// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3043 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 33
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 36
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 35
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 32
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 51369 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 51369 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 51369 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 51369 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 51369 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 51369 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 11221 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 51202 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 51202 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 51202 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 51202 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 51202 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 51202 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 51202 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 51202 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 51202 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 51202 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 51202 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 51202 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 51369 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 51369 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 51369 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 51369 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 51369 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 51369 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 51369 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 51369 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 51369 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 51369 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 51369 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 51369 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 51369 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 51369 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 51369 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 51369 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 51369 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 51369 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 48191 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 52077 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7565 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 52094 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8168 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 52135 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8221 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpDepots := [ ] ;
2799: LD_ADDR_EXP 14
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpBuildings := [ ] ;
2806: LD_ADDR_EXP 17
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2813: LD_ADDR_EXP 18
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2820: LD_ADDR_EXP 19
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2827: LD_ADDR_EXP 20
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpStartingResources := [ ] ;
2834: LD_ADDR_EXP 15
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpStartPos := [ ] ;
2841: LD_ADDR_EXP 21
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2848: LD_ADDR_EXP 22
2852: PUSH
2853: LD_INT 1
2855: NEG
2856: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2857: LD_ADDR_EXP 23
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpApemans := [ ] ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// mpApemansArea := [ ] ;
2871: LD_ADDR_EXP 31
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpRespawn := [ ] ;
2878: LD_ADDR_EXP 32
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpKingArea := 0 ;
2885: LD_ADDR_EXP 33
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// mpPoints := [ ] ;
2893: LD_ADDR_EXP 34
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpVehicles := 0 ;
2900: LD_ADDR_EXP 35
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// mpShipments := 0 ;
2908: LD_ADDR_EXP 27
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2916: LD_ADDR_EXP 39
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: PUSH
2925: EMPTY
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: ST_TO_ADDR
// mpEmissions := 0 ;
2947: LD_ADDR_EXP 36
2951: PUSH
2952: LD_INT 0
2954: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2955: LD_ADDR_EXP 25
2959: PUSH
2960: LD_INT 3
2962: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2963: LD_ADDR_EXP 24
2967: PUSH
2968: LD_INT 15
2970: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2971: LD_ADDR_EXP 37
2975: PUSH
2976: LD_INT 0
2978: ST_TO_ADDR
// mpGameActive := false ;
2979: LD_ADDR_EXP 38
2983: PUSH
2984: LD_INT 0
2986: ST_TO_ADDR
// mpBlockRespThread := false ;
2987: LD_ADDR_EXP 40
2991: PUSH
2992: LD_INT 0
2994: ST_TO_ADDR
// for i := 1 to 32 do
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 32
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3036
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3011: LD_ADDR_EXP 6
3015: PUSH
3016: LD_EXP 6
3020: PPUSH
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_INT 0
3028: PPUSH
3029: CALL_OW 1
3033: ST_TO_ADDR
3034: GO 3008
3036: POP
3037: POP
// end ;
3038: LD_VAR 0 1
3042: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3059: LD_ADDR_VAR 0 14
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: LD_INT 3
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
// for i in gameTypes do
3078: LD_ADDR_VAR 0 2
3082: PUSH
3083: LD_VAR 0 14
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3098
// disable ( i ) ;
3091: LD_VAR 0 2
3095: DISABLE_MARKED
3096: GO 3088
3098: POP
3099: POP
// if Multiplayer then
3100: LD_OWVAR 4
3104: IFFALSE 3288
// begin mpGameType := mp_game_type ;
3106: LD_ADDR_EXP 3
3110: PUSH
3111: LD_OWVAR 6
3115: ST_TO_ADDR
// your_side := mp_player_side ;
3116: LD_ADDR_OWVAR 2
3120: PUSH
3121: LD_OWVAR 7
3125: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3126: LD_ADDR_EXP 7
3130: PUSH
3131: LD_OWVAR 17
3135: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3136: LD_ADDR_EXP 8
3140: PUSH
3141: LD_OWVAR 15
3145: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3146: LD_ADDR_EXP 9
3150: PUSH
3151: LD_OWVAR 16
3155: ST_TO_ADDR
// mpTeams := mp_teams ;
3156: LD_ADDR_EXP 10
3160: PUSH
3161: LD_OWVAR 12
3165: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3166: LD_ADDR_VAR 0 2
3170: PUSH
3171: DOUBLE
3172: LD_INT 1
3174: DEC
3175: ST_TO_ADDR
3176: LD_EXP 4
3180: PPUSH
3181: CALL 11221 0 1
3185: PUSH
3186: FOR_TO
3187: IFFALSE 3263
// begin setting := mpGameSettingsKeys [ i ] ;
3189: LD_ADDR_VAR 0 12
3193: PUSH
3194: LD_EXP 4
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: ST_TO_ADDR
// if setting then
3205: LD_VAR 0 12
3209: IFFALSE 3261
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3211: LD_ADDR_EXP 6
3215: PUSH
3216: LD_EXP 6
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_EXP 5
3230: PUSH
3231: LD_VAR 0 2
3235: ARRAY
3236: PUSH
3237: LD_VAR 0 2
3241: PUSH
3242: LD_INT 1
3244: MINUS
3245: PPUSH
3246: CALL_OW 426
3250: PUSH
3251: LD_INT 1
3253: PLUS
3254: ARRAY
3255: PPUSH
3256: CALL_OW 1
3260: ST_TO_ADDR
// end ;
3261: GO 3186
3263: POP
3264: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3265: LD_ADDR_EXP 11
3269: PUSH
3270: LD_EXP 8
3274: PUSH
3275: LD_INT 0
3277: PUSH
3278: EMPTY
3279: LIST
3280: DIFF
3281: PUSH
3282: LD_INT 1
3284: GREATER
3285: ST_TO_ADDR
// end else
3286: GO 3288
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3288: LD_EXP 3
3292: PPUSH
3293: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3297: LD_EXP 18
3301: PPUSH
3302: CALL 11221 0 1
3306: IFFALSE 3337
// begin for i in mpMarkedAreas do
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: LD_EXP 18
3317: PUSH
3318: FOR_IN
3319: IFFALSE 3335
// SetAreaMapShow ( i , 0 ) ;
3321: LD_VAR 0 2
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 424
3333: GO 3318
3335: POP
3336: POP
// end ; for i := 1 to 8 do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 8
3349: PUSH
3350: FOR_TO
3351: IFFALSE 4567
// begin if not mpSidePositions [ i ] then
3353: LD_EXP 7
3357: PUSH
3358: LD_VAR 0 2
3362: ARRAY
3363: NOT
3364: IFFALSE 3368
// continue ;
3366: GO 3350
// side := i ;
3368: LD_ADDR_VAR 0 7
3372: PUSH
3373: LD_VAR 0 2
3377: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3378: LD_ADDR_VAR 0 9
3382: PUSH
3383: LD_EXP 9
3387: PUSH
3388: LD_VAR 0 2
3392: ARRAY
3393: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3394: LD_ADDR_VAR 0 8
3398: PUSH
3399: LD_EXP 7
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3410: LD_EXP 12
3414: PPUSH
3415: CALL 11221 0 1
3419: IFFALSE 3496
// begin for j in mpOilDeposits [ pos ] do
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_EXP 12
3430: PUSH
3431: LD_VAR 0 8
3435: ARRAY
3436: PUSH
3437: FOR_IN
3438: IFFALSE 3494
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_VAR 0 3
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_INT 2
3460: PPUSH
3461: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3465: LD_VAR 0 3
3469: PUSH
3470: LD_INT 1
3472: ARRAY
3473: PPUSH
3474: LD_VAR 0 3
3478: PUSH
3479: LD_INT 2
3481: ARRAY
3482: PPUSH
3483: LD_VAR 0 7
3487: PPUSH
3488: CALL_OW 441
// end ;
3492: GO 3437
3494: POP
3495: POP
// end ; if Count ( mpSibDeposits ) then
3496: LD_EXP 13
3500: PPUSH
3501: CALL 11221 0 1
3505: IFFALSE 3582
// begin for j in mpSibDeposits [ pos ] do
3507: LD_ADDR_VAR 0 3
3511: PUSH
3512: LD_EXP 13
3516: PUSH
3517: LD_VAR 0 8
3521: ARRAY
3522: PUSH
3523: FOR_IN
3524: IFFALSE 3580
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3526: LD_VAR 0 3
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: LD_VAR 0 3
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3551: LD_VAR 0 3
3555: PUSH
3556: LD_INT 1
3558: ARRAY
3559: PPUSH
3560: LD_VAR 0 3
3564: PUSH
3565: LD_INT 2
3567: ARRAY
3568: PPUSH
3569: LD_VAR 0 7
3573: PPUSH
3574: CALL_OW 441
// end ;
3578: GO 3523
3580: POP
3581: POP
// end ; InitBc ;
3582: CALL_OW 21
// InitUc ;
3586: CALL_OW 18
// uc_side := side ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_VAR 0 7
3599: ST_TO_ADDR
// uc_nation := nation ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: LD_VAR 0 9
3609: ST_TO_ADDR
// if Count ( mpDepots ) then
3610: LD_EXP 14
3614: PPUSH
3615: CALL 11221 0 1
3619: IFFALSE 3789
// begin bc_level := 0 ;
3621: LD_ADDR_OWVAR 43
3625: PUSH
3626: LD_INT 0
3628: ST_TO_ADDR
// bc_type := b_depot ;
3629: LD_ADDR_OWVAR 42
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3637: LD_ADDR_VAR 0 4
3641: PUSH
3642: LD_EXP 14
3646: PUSH
3647: LD_VAR 0 8
3651: ARRAY
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: LD_EXP 14
3661: PUSH
3662: LD_VAR 0 8
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: PPUSH
3672: LD_EXP 14
3676: PUSH
3677: LD_VAR 0 8
3681: ARRAY
3682: PUSH
3683: LD_INT 3
3685: ARRAY
3686: PPUSH
3687: CALL_OW 47
3691: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3692: LD_VAR 0 4
3696: PPUSH
3697: LD_STRING @
3699: PUSH
3700: LD_VAR 0 7
3704: STR
3705: PPUSH
3706: CALL_OW 500
// SetTag ( b , side ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_VAR 0 7
3719: PPUSH
3720: CALL_OW 109
// if Count ( mpStartingResources ) then
3724: LD_EXP 15
3728: PPUSH
3729: CALL 11221 0 1
3733: IFFALSE 3787
// begin for j := 1 to mpStartingResources do
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: DOUBLE
3741: LD_INT 1
3743: DEC
3744: ST_TO_ADDR
3745: LD_EXP 15
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3785
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: CALL_OW 274
3762: PPUSH
3763: LD_VAR 0 3
3767: PPUSH
3768: LD_EXP 15
3772: PUSH
3773: LD_VAR 0 3
3777: ARRAY
3778: PPUSH
3779: CALL_OW 277
3783: GO 3750
3785: POP
3786: POP
// end ; end else
3787: GO 3936
// if Count ( mpStartingResources ) then
3789: LD_EXP 15
3793: PPUSH
3794: CALL 11221 0 1
3798: IFFALSE 3936
// begin for j := 1 to mpStartingResources do
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: DOUBLE
3806: LD_INT 1
3808: DEC
3809: ST_TO_ADDR
3810: LD_EXP 15
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3934
// begin resources := mpStartingResources [ j ] ;
3818: LD_ADDR_VAR 0 13
3822: PUSH
3823: LD_EXP 15
3827: PUSH
3828: LD_VAR 0 3
3832: ARRAY
3833: ST_TO_ADDR
// repeat if resources >= 50 then
3834: LD_VAR 0 13
3838: PUSH
3839: LD_INT 50
3841: GREATEREQUAL
3842: IFFALSE 3888
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 5
3851: PPUSH
3852: LD_VAR 0 5
3856: PPUSH
3857: LD_VAR 0 6
3861: PPUSH
3862: LD_INT 4
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 60
// resources := resources - 50 ;
3872: LD_ADDR_VAR 0 13
3876: PUSH
3877: LD_VAR 0 13
3881: PUSH
3882: LD_INT 50
3884: MINUS
3885: ST_TO_ADDR
// end else
3886: GO 3922
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_VAR 0 13
3897: PUSH
3898: LD_INT 10
3900: DIV
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_VAR 0 6
3911: PPUSH
3912: LD_INT 4
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 60
// until resources <= 0 ;
3922: LD_VAR 0 13
3926: PUSH
3927: LD_INT 0
3929: LESSEQUAL
3930: IFFALSE 3834
// end ;
3932: GO 3815
3934: POP
3935: POP
// end ; if Count ( mpBuildings ) then
3936: LD_EXP 17
3940: PPUSH
3941: CALL 11221 0 1
3945: IFFALSE 4023
// begin for j in mpBuildings [ pos ] do
3947: LD_ADDR_VAR 0 3
3951: PUSH
3952: LD_EXP 17
3956: PUSH
3957: LD_VAR 0 8
3961: ARRAY
3962: PUSH
3963: FOR_IN
3964: IFFALSE 4021
// begin bc_level := 0 ;
3966: LD_ADDR_OWVAR 43
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3974: LD_ADDR_OWVAR 42
3978: PUSH
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3988: LD_VAR 0 3
3992: PUSH
3993: LD_INT 2
3995: ARRAY
3996: PPUSH
3997: LD_VAR 0 3
4001: PUSH
4002: LD_INT 3
4004: ARRAY
4005: PPUSH
4006: LD_VAR 0 3
4010: PUSH
4011: LD_INT 4
4013: ARRAY
4014: PPUSH
4015: CALL_OW 47
// end ;
4019: GO 3963
4021: POP
4022: POP
// end ; if mpBattleFlag > - 1 then
4023: LD_EXP 22
4027: PUSH
4028: LD_INT 1
4030: NEG
4031: GREATER
4032: IFFALSE 4191
// begin x := mpStartPos [ pos ] [ 1 ] ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: LD_EXP 21
4043: PUSH
4044: LD_VAR 0 8
4048: ARRAY
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4054: LD_ADDR_VAR 0 6
4058: PUSH
4059: LD_EXP 21
4063: PUSH
4064: LD_VAR 0 8
4068: ARRAY
4069: PUSH
4070: LD_INT 2
4072: ARRAY
4073: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4074: LD_VAR 0 5
4078: PPUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 12
4086: PPUSH
4087: LD_INT 2
4089: PPUSH
4090: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4094: LD_ADDR_EXP 23
4098: PUSH
4099: LD_EXP 23
4103: PPUSH
4104: LD_VAR 0 7
4108: PPUSH
4109: LD_VAR 0 7
4113: PPUSH
4114: LD_VAR 0 5
4118: PPUSH
4119: LD_VAR 0 6
4123: PPUSH
4124: LD_INT 1
4126: PUSH
4127: LD_INT 100
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 70
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: LD_INT 40
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 10
4156: PUSH
4157: LD_INT 25
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 20
4166: PUSH
4167: LD_INT 100
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 418
4185: PPUSH
4186: CALL_OW 1
4190: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4191: LD_EXP 26
4195: PUSH
4196: LD_INT 20
4198: PPUSH
4199: LD_VAR 0 7
4203: PPUSH
4204: CALL_OW 321
4208: PUSH
4209: LD_INT 1
4211: EQUAL
4212: AND
4213: IFFALSE 4230
// SetTech ( tech_SibDet , side , state_researched ) ;
4215: LD_INT 20
4217: PPUSH
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 2
4225: PPUSH
4226: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4230: LD_INT 24
4232: PPUSH
4233: LD_VAR 0 7
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 322
// if mpSibBomb = 1 then
4245: LD_EXP 28
4249: PUSH
4250: LD_INT 1
4252: EQUAL
4253: IFFALSE 4272
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4255: LD_INT 25
4257: PPUSH
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 322
// end else
4270: GO 4287
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4272: LD_INT 25
4274: PPUSH
4275: LD_VAR 0 7
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 322
// end ; if mpVehicles then
4287: LD_EXP 35
4291: IFFALSE 4390
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: LD_VAR 0 7
4302: PPUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_EXP 35
4312: PPUSH
4313: CALL 5477 0 3
4317: PUSH
4318: FOR_IN
4319: IFFALSE 4388
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4321: LD_VAR 0 3
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: CALL_OW 12
4336: PPUSH
4337: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4341: LD_VAR 0 3
4345: PPUSH
4346: LD_EXP 21
4350: PUSH
4351: LD_VAR 0 8
4355: ARRAY
4356: PUSH
4357: LD_INT 1
4359: ARRAY
4360: PPUSH
4361: LD_EXP 21
4365: PUSH
4366: LD_VAR 0 8
4370: ARRAY
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 12
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 50
// end ;
4386: GO 4318
4388: POP
4389: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4390: LD_ADDR_VAR 0 11
4394: PUSH
4395: LD_VAR 0 7
4399: PPUSH
4400: LD_VAR 0 9
4404: PPUSH
4405: LD_EXP 24
4409: PPUSH
4410: LD_EXP 25
4414: PPUSH
4415: CALL 4979 0 4
4419: ST_TO_ADDR
// for j in team do
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_VAR 0 11
4429: PUSH
4430: FOR_IN
4431: IFFALSE 4480
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4433: LD_VAR 0 3
4437: PPUSH
4438: LD_EXP 21
4442: PUSH
4443: LD_VAR 0 8
4447: ARRAY
4448: PUSH
4449: LD_INT 1
4451: ARRAY
4452: PPUSH
4453: LD_EXP 21
4457: PUSH
4458: LD_VAR 0 8
4462: ARRAY
4463: PUSH
4464: LD_INT 2
4466: ARRAY
4467: PPUSH
4468: LD_INT 12
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: CALL_OW 50
4478: GO 4430
4480: POP
4481: POP
// if mpApemans then
4482: LD_EXP 30
4486: IFFALSE 4565
// begin for j := 1 to mpApemans do
4488: LD_ADDR_VAR 0 3
4492: PUSH
4493: DOUBLE
4494: LD_INT 1
4496: DEC
4497: ST_TO_ADDR
4498: LD_EXP 30
4502: PUSH
4503: FOR_TO
4504: IFFALSE 4563
// begin PrepareApeman ( - 5 ) ;
4506: LD_INT 5
4508: NEG
4509: PPUSH
4510: CALL 43078 0 1
// ape := CreateHuman ;
4514: LD_ADDR_VAR 0 10
4518: PUSH
4519: CALL_OW 44
4523: ST_TO_ADDR
// SetTag ( ape , side ) ;
4524: LD_VAR 0 10
4528: PPUSH
4529: LD_VAR 0 7
4533: PPUSH
4534: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4538: LD_VAR 0 10
4542: PPUSH
4543: LD_EXP 31
4547: PUSH
4548: LD_VAR 0 8
4552: ARRAY
4553: PPUSH
4554: LD_INT 0
4556: PPUSH
4557: CALL_OW 49
// end ;
4561: GO 4503
4563: POP
4564: POP
// end ; end ;
4565: GO 3350
4567: POP
4568: POP
// if not mpTeamGame then
4569: LD_EXP 11
4573: NOT
4574: IFFALSE 4672
// begin for i := 1 to 8 do
4576: LD_ADDR_VAR 0 2
4580: PUSH
4581: DOUBLE
4582: LD_INT 1
4584: DEC
4585: ST_TO_ADDR
4586: LD_INT 8
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4668
// for j := 1 to 8 do
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: DOUBLE
4598: LD_INT 1
4600: DEC
4601: ST_TO_ADDR
4602: LD_INT 8
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4664
// if i <> j then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_VAR 0 3
4617: NONEQUAL
4618: IFFALSE 4642
// SetAttitude ( i , j , att_neutral , true ) else
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 3
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 80
4640: GO 4662
// SetAttitude ( i , j , att_friend , true ) ;
4642: LD_VAR 0 2
4646: PPUSH
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 80
4662: GO 4605
4664: POP
4665: POP
4666: GO 4589
4668: POP
4669: POP
// end else
4670: GO 4847
// begin if mpSharedVision then
4672: LD_EXP 16
4676: IFFALSE 4741
// begin for i in mpTeams do
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_EXP 10
4687: PUSH
4688: FOR_IN
4689: IFFALSE 4739
// for j := 2 to i do
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: DOUBLE
4697: LD_INT 2
4699: DEC
4700: ST_TO_ADDR
4701: LD_VAR 0 2
4705: PUSH
4706: FOR_TO
4707: IFFALSE 4735
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4709: LD_VAR 0 2
4713: PUSH
4714: LD_VAR 0 3
4718: ARRAY
4719: PPUSH
4720: LD_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: PPUSH
4729: CALL_OW 343
4733: GO 4706
4735: POP
4736: POP
4737: GO 4688
4739: POP
4740: POP
// end ; for i := 1 to 8 do
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: DOUBLE
4747: LD_INT 1
4749: DEC
4750: ST_TO_ADDR
4751: LD_INT 8
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4845
// for j := 1 to 8 do
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: DOUBLE
4763: LD_INT 1
4765: DEC
4766: ST_TO_ADDR
4767: LD_INT 8
4769: PUSH
4770: FOR_TO
4771: IFFALSE 4841
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4773: LD_EXP 8
4777: PUSH
4778: LD_VAR 0 2
4782: ARRAY
4783: PUSH
4784: LD_EXP 8
4788: PUSH
4789: LD_VAR 0 3
4793: ARRAY
4794: EQUAL
4795: IFFALSE 4819
// SetAttitude ( i , j , att_friend , true ) else
4797: LD_VAR 0 2
4801: PPUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: LD_INT 1
4812: PPUSH
4813: CALL_OW 80
4817: GO 4839
// SetAttitude ( i , j , att_enemy , true ) ;
4819: LD_VAR 0 2
4823: PPUSH
4824: LD_VAR 0 3
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 80
4839: GO 4770
4841: POP
4842: POP
4843: GO 4754
4845: POP
4846: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4847: LD_ADDR_OWVAR 71
4851: PUSH
4852: LD_EXP 9
4856: PUSH
4857: LD_OWVAR 2
4861: ARRAY
4862: ST_TO_ADDR
// if IAmSpec then
4863: CALL_OW 531
4867: IFFALSE 4908
// begin FogOff ( true ) ;
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4876: LD_EXP 29
4880: PUSH
4881: LD_INT 1
4883: ARRAY
4884: PUSH
4885: LD_INT 2
4887: DIV
4888: PPUSH
4889: LD_EXP 29
4893: PUSH
4894: LD_INT 2
4896: ARRAY
4897: PUSH
4898: LD_INT 2
4900: DIV
4901: PPUSH
4902: CALL_OW 86
// end else
4906: GO 4954
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4908: LD_EXP 21
4912: PUSH
4913: LD_EXP 7
4917: PUSH
4918: LD_OWVAR 2
4922: ARRAY
4923: ARRAY
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: LD_EXP 21
4933: PUSH
4934: LD_EXP 7
4938: PUSH
4939: LD_OWVAR 2
4943: ARRAY
4944: ARRAY
4945: PUSH
4946: LD_INT 2
4948: ARRAY
4949: PPUSH
4950: CALL_OW 86
// end ; BeginBuildUp ;
4954: CALL 5955 0 0
// enable ( mpActive ) ;
4958: LD_INT 100
4960: ENABLE_MARKED
// enable ( mpGameType ) ;
4961: LD_EXP 3
4965: ENABLE_MARKED
// mpGameActive := true ;
4966: LD_ADDR_EXP 38
4970: PUSH
4971: LD_INT 1
4973: ST_TO_ADDR
// end ;
4974: LD_VAR 0 1
4978: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4979: LD_INT 0
4981: PPUSH
4982: PPUSH
4983: PPUSH
4984: PPUSH
// result := [ ] ;
4985: LD_ADDR_VAR 0 5
4989: PUSH
4990: EMPTY
4991: ST_TO_ADDR
// class := class_soldier ;
4992: LD_ADDR_VAR 0 8
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// uc_side := side ;
5000: LD_ADDR_OWVAR 20
5004: PUSH
5005: LD_VAR 0 1
5009: ST_TO_ADDR
// uc_nation := nation ;
5010: LD_ADDR_OWVAR 21
5014: PUSH
5015: LD_VAR 0 2
5019: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5020: LD_ADDR_OWVAR 26
5024: PUSH
5025: LD_OWVAR 19
5029: PUSH
5030: LD_VAR 0 1
5034: ARRAY
5035: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_INT 2
5041: PPUSH
5042: CALL_OW 12
5046: PPUSH
5047: LD_VAR 0 8
5051: PPUSH
5052: LD_VAR 0 4
5056: PUSH
5057: LD_INT 2
5059: PLUS
5060: PPUSH
5061: CALL_OW 380
// hc_importance := 105 ;
5065: LD_ADDR_OWVAR 32
5069: PUSH
5070: LD_INT 105
5072: ST_TO_ADDR
// if Multiplayer then
5073: LD_OWVAR 4
5077: IFFALSE 5117
// begin hc_gallery := MULTIAVATARS ;
5079: LD_ADDR_OWVAR 33
5083: PUSH
5084: LD_STRING MULTIAVATARS
5086: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5087: LD_ADDR_OWVAR 34
5091: PUSH
5092: LD_VAR 0 1
5096: PPUSH
5097: CALL_OW 525
5101: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5102: LD_ADDR_OWVAR 27
5106: PUSH
5107: LD_VAR 0 1
5111: PPUSH
5112: CALL_OW 526
5116: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5117: LD_ADDR_VAR 0 5
5121: PUSH
5122: LD_VAR 0 5
5126: PPUSH
5127: CALL_OW 44
5131: PPUSH
5132: CALL 46830 0 2
5136: ST_TO_ADDR
// if mpTeamPreset then
5137: LD_LOC 1
5141: IFFALSE 5237
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5143: LD_LOC 1
5147: PUSH
5148: LD_INT 1
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 5
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PPUSH
5163: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5167: LD_VAR 0 5
5171: PUSH
5172: LD_VAR 0 5
5176: ARRAY
5177: PPUSH
5178: LD_INT 1
5180: PPUSH
5181: LD_LOC 1
5185: PUSH
5186: LD_INT 1
5188: ARRAY
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: CALL_OW 260
5197: PPUSH
5198: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5202: LD_VAR 0 5
5206: PUSH
5207: LD_VAR 0 5
5211: ARRAY
5212: PPUSH
5213: LD_INT 2
5215: PPUSH
5216: LD_LOC 1
5220: PUSH
5221: LD_INT 1
5223: ARRAY
5224: PPUSH
5225: LD_INT 2
5227: PPUSH
5228: CALL_OW 260
5232: PPUSH
5233: CALL_OW 239
// end ; InitHc_All ( ) ;
5237: CALL_OW 584
// class := 2 ;
5241: LD_ADDR_VAR 0 8
5245: PUSH
5246: LD_INT 2
5248: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: DOUBLE
5255: LD_INT 1
5257: DEC
5258: ST_TO_ADDR
5259: LD_VAR 0 3
5263: PUSH
5264: LD_INT 1
5266: MINUS
5267: PUSH
5268: FOR_TO
5269: IFFALSE 5453
// begin PrepareHuman ( false , class , skill ) ;
5271: LD_INT 0
5273: PPUSH
5274: LD_VAR 0 8
5278: PPUSH
5279: LD_VAR 0 4
5283: PPUSH
5284: CALL_OW 380
// un := CreateHuman ;
5288: LD_ADDR_VAR 0 7
5292: PUSH
5293: CALL_OW 44
5297: ST_TO_ADDR
// result := Join ( result , un ) ;
5298: LD_ADDR_VAR 0 5
5302: PUSH
5303: LD_VAR 0 5
5307: PPUSH
5308: LD_VAR 0 7
5312: PPUSH
5313: CALL 46830 0 2
5317: ST_TO_ADDR
// if mpTeamPreset then
5318: LD_LOC 1
5322: IFFALSE 5418
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5324: LD_LOC 1
5328: PUSH
5329: LD_VAR 0 6
5333: PUSH
5334: LD_INT 1
5336: PLUS
5337: ARRAY
5338: PPUSH
5339: LD_VAR 0 7
5343: PPUSH
5344: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5348: LD_VAR 0 7
5352: PPUSH
5353: LD_INT 1
5355: PPUSH
5356: LD_LOC 1
5360: PUSH
5361: LD_VAR 0 6
5365: PUSH
5366: LD_INT 1
5368: PLUS
5369: ARRAY
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: CALL_OW 260
5378: PPUSH
5379: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5383: LD_VAR 0 7
5387: PPUSH
5388: LD_INT 2
5390: PPUSH
5391: LD_LOC 1
5395: PUSH
5396: LD_VAR 0 6
5400: PUSH
5401: LD_INT 1
5403: PLUS
5404: ARRAY
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: CALL_OW 260
5413: PPUSH
5414: CALL_OW 239
// end ; class := Inc ( class ) ;
5418: LD_ADDR_VAR 0 8
5422: PUSH
5423: LD_VAR 0 8
5427: PPUSH
5428: CALL 48191 0 1
5432: ST_TO_ADDR
// if class = 5 then
5433: LD_VAR 0 8
5437: PUSH
5438: LD_INT 5
5440: EQUAL
5441: IFFALSE 5451
// class := 1 ;
5443: LD_ADDR_VAR 0 8
5447: PUSH
5448: LD_INT 1
5450: ST_TO_ADDR
// end ;
5451: GO 5268
5453: POP
5454: POP
// if not mpTeamPreset then
5455: LD_LOC 1
5459: NOT
5460: IFFALSE 5472
// mpTeamPreset := result ;
5462: LD_ADDR_LOC 1
5466: PUSH
5467: LD_VAR 0 5
5471: ST_TO_ADDR
// end ;
5472: LD_VAR 0 5
5476: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5477: LD_INT 0
5479: PPUSH
5480: PPUSH
// result := [ ] ;
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: EMPTY
5487: ST_TO_ADDR
// if not vehicles then
5488: LD_VAR 0 3
5492: NOT
5493: IFFALSE 5497
// exit ;
5495: GO 5656
// for i := 1 to vehicles [ nation ] do
5497: LD_ADDR_VAR 0 5
5501: PUSH
5502: DOUBLE
5503: LD_INT 1
5505: DEC
5506: ST_TO_ADDR
5507: LD_VAR 0 3
5511: PUSH
5512: LD_VAR 0 2
5516: ARRAY
5517: PUSH
5518: FOR_TO
5519: IFFALSE 5654
// begin uc_side := side ;
5521: LD_ADDR_OWVAR 20
5525: PUSH
5526: LD_VAR 0 1
5530: ST_TO_ADDR
// uc_nation := nation ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_VAR 0 2
5540: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5541: LD_VAR 0 3
5545: PUSH
5546: LD_VAR 0 2
5550: ARRAY
5551: PUSH
5552: LD_VAR 0 5
5556: ARRAY
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_VAR 0 3
5566: PUSH
5567: LD_VAR 0 2
5571: ARRAY
5572: PUSH
5573: LD_VAR 0 5
5577: ARRAY
5578: PUSH
5579: LD_INT 2
5581: ARRAY
5582: PPUSH
5583: LD_VAR 0 3
5587: PUSH
5588: LD_VAR 0 2
5592: ARRAY
5593: PUSH
5594: LD_VAR 0 5
5598: ARRAY
5599: PUSH
5600: LD_INT 3
5602: ARRAY
5603: PPUSH
5604: LD_VAR 0 3
5608: PUSH
5609: LD_VAR 0 2
5613: ARRAY
5614: PUSH
5615: LD_VAR 0 5
5619: ARRAY
5620: PUSH
5621: LD_INT 4
5623: ARRAY
5624: PPUSH
5625: LD_INT 80
5627: PPUSH
5628: CALL 13959 0 5
// result := Join ( result , CreateVehicle ) ;
5632: LD_ADDR_VAR 0 4
5636: PUSH
5637: LD_VAR 0 4
5641: PPUSH
5642: CALL_OW 45
5646: PPUSH
5647: CALL 46830 0 2
5651: ST_TO_ADDR
// end ;
5652: GO 5518
5654: POP
5655: POP
// end ;
5656: LD_VAR 0 4
5660: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5661: LD_INT 0
5663: PPUSH
5664: PPUSH
// for i in mpBattleFlags do
5665: LD_ADDR_VAR 0 3
5669: PUSH
5670: LD_EXP 23
5674: PUSH
5675: FOR_IN
5676: IFFALSE 5753
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5678: LD_VAR 0 3
5682: PPUSH
5683: LD_INT 1
5685: PUSH
5686: LD_VAR 0 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 2
5697: PUSH
5698: LD_VAR 0 1
5702: PUSH
5703: LD_REAL  7.00000000000000E-0001
5706: MUL
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: LD_INT 3
5714: PUSH
5715: LD_VAR 0 1
5719: PUSH
5720: LD_REAL  4.00000000000000E-0001
5723: MUL
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 20
5731: PUSH
5732: LD_VAR 0 1
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 423
5751: GO 5675
5753: POP
5754: POP
// end ;
5755: LD_VAR 0 2
5759: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5760: LD_INT 100
5762: IFFALSE 5857
5764: GO 5766
5766: DISABLE
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
// begin if mpBattleFlag <= 0 then
5771: LD_EXP 22
5775: PUSH
5776: LD_INT 0
5778: LESSEQUAL
5779: IFFALSE 5783
// exit ;
5781: GO 5857
// strength := 100 ;
5783: LD_ADDR_VAR 0 2
5787: PUSH
5788: LD_INT 100
5790: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5791: LD_EXP 22
5795: PPUSH
5796: CALL_OW 67
// strength := Dec ( strength ) ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: CALL 48213 0 1
5814: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5815: LD_VAR 0 2
5819: PPUSH
5820: CALL 5661 0 1
// until not strength ;
5824: LD_VAR 0 2
5828: NOT
5829: IFFALSE 5791
// for i in mpBattleFlags do
5831: LD_ADDR_VAR 0 1
5835: PUSH
5836: LD_EXP 23
5840: PUSH
5841: FOR_IN
5842: IFFALSE 5855
// KillBattleFlag ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 419
5853: GO 5841
5855: POP
5856: POP
// end ;
5857: PPOPN 2
5859: END
// every 0 0$1 marked mpActive do var side , tmp ;
5860: GO 5862
5862: DISABLE
5863: LD_INT 0
5865: PPUSH
5866: PPUSH
// begin if mpSibBomb <= 1 then
5867: LD_EXP 28
5871: PUSH
5872: LD_INT 1
5874: LESSEQUAL
5875: IFFALSE 5879
// exit ;
5877: GO 5952
// tmp := mpSibBomb ;
5879: LD_ADDR_VAR 0 2
5883: PUSH
5884: LD_EXP 28
5888: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5889: LD_INT 35
5891: PPUSH
5892: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: LD_VAR 0 2
5905: PUSH
5906: LD_INT 35
5908: MINUS
5909: ST_TO_ADDR
// until not tmp ;
5910: LD_VAR 0 2
5914: NOT
5915: IFFALSE 5889
// for side := 1 to 8 do
5917: LD_ADDR_VAR 0 1
5921: PUSH
5922: DOUBLE
5923: LD_INT 1
5925: DEC
5926: ST_TO_ADDR
5927: LD_INT 8
5929: PUSH
5930: FOR_TO
5931: IFFALSE 5950
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5933: LD_INT 25
5935: PPUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: CALL_OW 322
5948: GO 5930
5950: POP
5951: POP
// end ;
5952: PPOPN 2
5954: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5955: LD_INT 0
5957: PPUSH
5958: PPUSH
5959: PPUSH
// mpBuildUpTimeDelay := 0 ;
5960: LD_ADDR_EXP 41
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not mpBuildUpTime then
5968: LD_EXP 20
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6160
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5977: LD_ADDR_EXP 41
5981: PUSH
5982: LD_INT 8400
5984: PUSH
5985: LD_INT 2100
5987: PUSH
5988: LD_EXP 20
5992: MUL
5993: PLUS
5994: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5995: LD_ADDR_EXP 42
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// for i := 1 to 8 do
6003: LD_ADDR_VAR 0 2
6007: PUSH
6008: DOUBLE
6009: LD_INT 1
6011: DEC
6012: ST_TO_ADDR
6013: LD_INT 8
6015: PUSH
6016: FOR_TO
6017: IFFALSE 6158
// if mpSidePositions [ i ] then
6019: LD_EXP 7
6023: PUSH
6024: LD_VAR 0 2
6028: ARRAY
6029: IFFALSE 6156
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6031: LD_EXP 19
6035: PUSH
6036: LD_EXP 7
6040: PUSH
6041: LD_VAR 0 2
6045: ARRAY
6046: ARRAY
6047: PPUSH
6048: LD_INT 5
6050: PPUSH
6051: CALL_OW 424
// for j := 1 to 8 do
6055: LD_ADDR_VAR 0 3
6059: PUSH
6060: DOUBLE
6061: LD_INT 1
6063: DEC
6064: ST_TO_ADDR
6065: LD_INT 8
6067: PUSH
6068: FOR_TO
6069: IFFALSE 6154
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6071: LD_EXP 7
6075: PUSH
6076: LD_VAR 0 3
6080: ARRAY
6081: PUSH
6082: LD_EXP 8
6086: PUSH
6087: LD_VAR 0 2
6091: ARRAY
6092: PUSH
6093: LD_EXP 8
6097: PUSH
6098: LD_VAR 0 3
6102: ARRAY
6103: NONEQUAL
6104: PUSH
6105: LD_EXP 11
6109: NOT
6110: PUSH
6111: LD_VAR 0 2
6115: PUSH
6116: LD_VAR 0 3
6120: NONEQUAL
6121: AND
6122: OR
6123: AND
6124: IFFALSE 6152
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6126: LD_VAR 0 3
6130: PPUSH
6131: LD_EXP 19
6135: PUSH
6136: LD_EXP 7
6140: PUSH
6141: LD_VAR 0 2
6145: ARRAY
6146: ARRAY
6147: PPUSH
6148: CALL_OW 333
6152: GO 6068
6154: POP
6155: POP
// end ;
6156: GO 6016
6158: POP
6159: POP
// end ;
6160: LD_VAR 0 1
6164: RET
// function EndBuildUp ; var i , j ; begin
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
// mpBuildUpTimeActive := false ;
6170: LD_ADDR_EXP 42
6174: PUSH
6175: LD_INT 0
6177: ST_TO_ADDR
// for i := 1 to 8 do
6178: LD_ADDR_VAR 0 2
6182: PUSH
6183: DOUBLE
6184: LD_INT 1
6186: DEC
6187: ST_TO_ADDR
6188: LD_INT 8
6190: PUSH
6191: FOR_TO
6192: IFFALSE 6333
// if mpSidePositions [ i ] then
6194: LD_EXP 7
6198: PUSH
6199: LD_VAR 0 2
6203: ARRAY
6204: IFFALSE 6331
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6206: LD_EXP 19
6210: PUSH
6211: LD_EXP 7
6215: PUSH
6216: LD_VAR 0 2
6220: ARRAY
6221: ARRAY
6222: PPUSH
6223: LD_INT 0
6225: PPUSH
6226: CALL_OW 424
// for j := 1 to 8 do
6230: LD_ADDR_VAR 0 3
6234: PUSH
6235: DOUBLE
6236: LD_INT 1
6238: DEC
6239: ST_TO_ADDR
6240: LD_INT 8
6242: PUSH
6243: FOR_TO
6244: IFFALSE 6329
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6246: LD_EXP 7
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PUSH
6257: LD_EXP 8
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: PUSH
6268: LD_EXP 8
6272: PUSH
6273: LD_VAR 0 3
6277: ARRAY
6278: NONEQUAL
6279: PUSH
6280: LD_EXP 11
6284: NOT
6285: PUSH
6286: LD_VAR 0 2
6290: PUSH
6291: LD_VAR 0 3
6295: NONEQUAL
6296: AND
6297: OR
6298: AND
6299: IFFALSE 6327
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6301: LD_VAR 0 3
6305: PPUSH
6306: LD_EXP 19
6310: PUSH
6311: LD_EXP 7
6315: PUSH
6316: LD_VAR 0 2
6320: ARRAY
6321: ARRAY
6322: PPUSH
6323: CALL_OW 334
6327: GO 6243
6329: POP
6330: POP
// end ;
6331: GO 6191
6333: POP
6334: POP
// end ;
6335: LD_VAR 0 1
6339: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6340: LD_EXP 42
6344: IFFALSE 6519
6346: GO 6348
6348: DISABLE
6349: LD_INT 0
6351: PPUSH
6352: PPUSH
// begin for i := 1 to 8 do
6353: LD_ADDR_VAR 0 1
6357: PUSH
6358: DOUBLE
6359: LD_INT 1
6361: DEC
6362: ST_TO_ADDR
6363: LD_INT 8
6365: PUSH
6366: FOR_TO
6367: IFFALSE 6516
// if mpSidePositions [ i ] then
6369: LD_EXP 7
6373: PUSH
6374: LD_VAR 0 1
6378: ARRAY
6379: IFFALSE 6514
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: LD_EXP 19
6390: PUSH
6391: LD_EXP 7
6395: PUSH
6396: LD_VAR 0 1
6400: ARRAY
6401: ARRAY
6402: PPUSH
6403: LD_INT 2
6405: PUSH
6406: LD_INT 21
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 21
6418: PUSH
6419: LD_INT 2
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 22
6433: PUSH
6434: LD_OWVAR 2
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 70
6451: PUSH
6452: FOR_IN
6453: IFFALSE 6512
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6455: LD_EXP 8
6459: PUSH
6460: LD_VAR 0 1
6464: ARRAY
6465: PUSH
6466: LD_EXP 8
6470: PUSH
6471: LD_OWVAR 2
6475: ARRAY
6476: NONEQUAL
6477: PUSH
6478: LD_EXP 11
6482: NOT
6483: PUSH
6484: LD_VAR 0 1
6488: PUSH
6489: LD_OWVAR 2
6493: NONEQUAL
6494: AND
6495: OR
6496: IFFALSE 6510
// ComMoveToArea ( un , BuildUpEscape ) ;
6498: LD_VAR 0 2
6502: PPUSH
6503: LD_INT 13
6505: PPUSH
6506: CALL_OW 113
6510: GO 6452
6512: POP
6513: POP
6514: GO 6366
6516: POP
6517: POP
// enable ;
6518: ENABLE
// end ;
6519: PPOPN 2
6521: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6522: LD_EXP 20
6526: IFFALSE 6576
6528: GO 6530
6530: DISABLE
6531: LD_INT 0
6533: PPUSH
// begin tmp := mpBuildUpTime ;
6534: LD_ADDR_VAR 0 1
6538: PUSH
6539: LD_EXP 20
6543: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6544: LD_INT 35
6546: PPUSH
6547: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: LD_INT 35
6563: MINUS
6564: ST_TO_ADDR
// until not tmp ;
6565: LD_VAR 0 1
6569: NOT
6570: IFFALSE 6544
// EndBuildUp ;
6572: CALL 6165 0 0
// end ;
6576: PPOPN 1
6578: END
// every 0 0$1 trigger mpActive marked mpWin do
6579: LD_INT 100
6581: IFFALSE 6615
6583: GO 6585
6585: DISABLE
// begin if IAmServer then
6586: CALL_OW 518
6590: IFFALSE 6599
// wait ( 0 0$3 ) ;
6592: LD_INT 105
6594: PPUSH
6595: CALL_OW 67
// if Multiplayer then
6599: LD_OWVAR 4
6603: IFFALSE 6611
// YouWinInMultiplayer else
6605: CALL_OW 106
6609: GO 6615
// YouWin ;
6611: CALL_OW 103
// end ;
6615: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6616: LD_INT 0
6618: PPUSH
// result := false ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_INT 0
6626: ST_TO_ADDR
// case gameType of GameTypeNormal :
6627: LD_VAR 0 1
6631: PUSH
6632: LD_INT 1
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6713
6640: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 22
6648: PUSH
6649: LD_VAR 0 2
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 2
6660: PUSH
6661: LD_INT 21
6663: PUSH
6664: LD_INT 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 33
6673: PUSH
6674: LD_INT 3
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 33
6683: PUSH
6684: LD_INT 5
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL_OW 69
6705: PPUSH
6706: CALL 11221 0 1
6710: ST_TO_ADDR
// end ; GameTypeSurvival :
6711: GO 6948
6713: LD_INT 2
6715: DOUBLE
6716: EQUAL
6717: IFTRUE 6721
6719: GO 6849
6721: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_INT 22
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 2
6741: PUSH
6742: LD_INT 30
6744: PUSH
6745: LD_INT 0
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 30
6754: PUSH
6755: LD_INT 1
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PPUSH
6771: CALL_OW 69
6775: PPUSH
6776: CALL 11221 0 1
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_VAR 0 2
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 2
6795: PUSH
6796: LD_INT 21
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 33
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 33
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: PPUSH
6841: CALL 11221 0 1
6845: AND
6846: ST_TO_ADDR
// end ; GameTypeKing :
6847: GO 6948
6849: LD_INT 3
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6947
6857: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_VAR 0 2
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: LD_INT 21
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 33
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 33
6900: PUSH
6901: LD_INT 5
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PPUSH
6918: CALL_OW 69
6922: PPUSH
6923: CALL 11221 0 1
6927: PUSH
6928: LD_VAR 0 2
6932: PPUSH
6933: CALL 58380 0 1
6937: PUSH
6938: LD_EXP 34
6942: LESS
6943: AND
6944: ST_TO_ADDR
// end ; end ;
6945: GO 6948
6947: POP
// end ;
6948: LD_VAR 0 3
6952: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6953: LD_INT 100
6955: IFFALSE 7177
6957: GO 6959
6959: DISABLE
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
// begin if Multiplayer then
6964: LD_OWVAR 4
6968: IFFALSE 6976
// SetPlayerSpectator ( ) else
6970: CALL_OW 572
6974: GO 6985
// FogOff ( your_side ) ;
6976: LD_OWVAR 2
6980: PPUSH
6981: CALL_OW 344
// repeat gameIsOn := false ;
6985: LD_ADDR_VAR 0 1
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// for i := 1 to 8 do
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: DOUBLE
6999: LD_INT 1
7001: DEC
7002: ST_TO_ADDR
7003: LD_INT 8
7005: PUSH
7006: FOR_TO
7007: IFFALSE 7129
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7009: LD_EXP 7
7013: PUSH
7014: LD_VAR 0 2
7018: ARRAY
7019: PUSH
7020: LD_VAR 0 2
7024: PPUSH
7025: CALL_OW 108
7029: AND
7030: PUSH
7031: LD_VAR 0 2
7035: PUSH
7036: LD_OWVAR 2
7040: NONEQUAL
7041: AND
7042: IFFALSE 7127
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7044: LD_EXP 8
7048: PUSH
7049: LD_VAR 0 2
7053: ARRAY
7054: NOT
7055: PUSH
7056: LD_EXP 8
7060: PUSH
7061: LD_VAR 0 2
7065: ARRAY
7066: PUSH
7067: LD_EXP 8
7071: PUSH
7072: LD_OWVAR 2
7076: ARRAY
7077: NONEQUAL
7078: PUSH
7079: LD_OWVAR 2
7083: PPUSH
7084: LD_VAR 0 2
7088: PPUSH
7089: CALL_OW 81
7093: PUSH
7094: LD_INT 1
7096: NONEQUAL
7097: AND
7098: OR
7099: IFFALSE 7127
// if HasPowerByGameType ( mpGameType , i ) then
7101: LD_EXP 3
7105: PPUSH
7106: LD_VAR 0 2
7110: PPUSH
7111: CALL 6616 0 2
7115: IFFALSE 7127
// begin gameIsOn := true ;
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// break ;
7125: GO 7129
// end ;
7127: GO 7006
7129: POP
7130: POP
// wait ( 100 ) ;
7131: LD_INT 100
7133: PPUSH
7134: CALL_OW 67
// until not gameIsOn ;
7138: LD_VAR 0 1
7142: NOT
7143: IFFALSE 6985
// if IAmServer then
7145: CALL_OW 518
7149: IFFALSE 7158
// wait ( 0 0$3 ) ;
7151: LD_INT 105
7153: PPUSH
7154: CALL_OW 67
// if Multiplayer then
7158: LD_OWVAR 4
7162: IFFALSE 7170
// YouLostInMultiplayer else
7164: CALL_OW 107
7168: GO 7177
// YouLost (  ) ;
7170: LD_STRING 
7172: PPUSH
7173: CALL_OW 104
// end ;
7177: PPOPN 2
7179: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7180: LD_EXP 32
7184: IFFALSE 7531
7186: GO 7188
7188: DISABLE
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7196: LD_ADDR_VAR 0 5
7200: PUSH
7201: LD_INT 1
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: LD_INT 4
7212: PUSH
7213: LD_INT 5
7215: PUSH
7216: LD_INT 6
7218: PUSH
7219: LD_INT 7
7221: PUSH
7222: LD_INT 8
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7235: LD_INT 350
7237: PPUSH
7238: CALL_OW 67
// for i := 1 to 8 do
7242: LD_ADDR_VAR 0 1
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_INT 8
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7501
// begin j := sides [ i ] ;
7258: LD_ADDR_VAR 0 2
7262: PUSH
7263: LD_VAR 0 5
7267: PUSH
7268: LD_VAR 0 1
7272: ARRAY
7273: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7274: LD_EXP 39
7278: PUSH
7279: LD_VAR 0 2
7283: ARRAY
7284: PPUSH
7285: CALL 11221 0 1
7289: PUSH
7290: LD_VAR 0 2
7294: PPUSH
7295: CALL_OW 108
7299: AND
7300: PUSH
7301: LD_EXP 3
7305: PPUSH
7306: LD_VAR 0 2
7310: PPUSH
7311: CALL 6616 0 2
7315: AND
7316: IFFALSE 7499
// begin wait ( mpRespawn div 3 ) ;
7318: LD_EXP 32
7322: PUSH
7323: LD_INT 3
7325: DIV
7326: PPUSH
7327: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_INT 22
7338: PUSH
7339: LD_VAR 0 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 50
7350: PUSH
7351: EMPTY
7352: LIST
7353: PUSH
7354: LD_INT 2
7356: PUSH
7357: LD_INT 30
7359: PUSH
7360: LD_INT 0
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 30
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: PPUSH
7387: CALL_OW 69
7391: ST_TO_ADDR
// if not tmp then
7392: LD_VAR 0 3
7396: NOT
7397: IFFALSE 7401
// continue ;
7399: GO 7255
// spawn := tmp [ 1 ] ;
7401: LD_ADDR_VAR 0 4
7405: PUSH
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 1
7413: ARRAY
7414: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7415: LD_EXP 39
7419: PUSH
7420: LD_VAR 0 2
7424: ARRAY
7425: PUSH
7426: LD_INT 1
7428: ARRAY
7429: PPUSH
7430: LD_VAR 0 4
7434: PPUSH
7435: CALL_OW 250
7439: PPUSH
7440: LD_VAR 0 4
7444: PPUSH
7445: CALL_OW 251
7449: PPUSH
7450: LD_INT 32
7452: PPUSH
7453: LD_INT 1
7455: PPUSH
7456: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7460: LD_ADDR_EXP 39
7464: PUSH
7465: LD_EXP 39
7469: PPUSH
7470: LD_VAR 0 2
7474: PPUSH
7475: LD_EXP 39
7479: PUSH
7480: LD_VAR 0 2
7484: ARRAY
7485: PPUSH
7486: LD_INT 1
7488: PPUSH
7489: CALL_OW 3
7493: PPUSH
7494: CALL_OW 1
7498: ST_TO_ADDR
// end ; end ;
7499: GO 7255
7501: POP
7502: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7503: LD_ADDR_VAR 0 5
7507: PUSH
7508: LD_VAR 0 5
7512: PPUSH
7513: LD_INT 1
7515: PPUSH
7516: LD_INT 8
7518: PPUSH
7519: LD_INT 1
7521: PPUSH
7522: CALL 13499 0 4
7526: ST_TO_ADDR
// until false ;
7527: LD_INT 0
7529: IFFALSE 7235
// end ;
7531: PPOPN 5
7533: END
// every 0 0$1 marked mpActive do
7534: GO 7536
7536: DISABLE
// begin enable ;
7537: ENABLE
// if not mpDisplayStrings then
7538: LD_EXP 37
7542: NOT
7543: IFFALSE 7554
// begin display_strings := [ ] ;
7545: LD_ADDR_OWVAR 47
7549: PUSH
7550: EMPTY
7551: ST_TO_ADDR
// exit ;
7552: GO 7564
// end ; display_strings := mpDisplayStrings ;
7554: LD_ADDR_OWVAR 47
7558: PUSH
7559: LD_EXP 37
7563: ST_TO_ADDR
// end ; end_of_file
7564: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7565: LD_INT 0
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
// if GetType ( un ) = unit_vehicle then
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 247
7585: PUSH
7586: LD_INT 2
7588: EQUAL
7589: IFFALSE 7593
// exit ;
7591: GO 8163
// side := GetSide ( un ) ;
7593: LD_ADDR_VAR 0 9
7597: PUSH
7598: LD_VAR 0 1
7602: PPUSH
7603: CALL_OW 255
7607: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7608: LD_EXP 3
7612: PUSH
7613: LD_INT 2
7615: EQUAL
7616: IFFALSE 7709
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 266
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: IN
7638: PUSH
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 110
7648: PUSH
7649: LD_VAR 0 9
7653: EQUAL
7654: AND
7655: IFFALSE 7709
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7657: LD_ADDR_VAR 0 3
7661: PUSH
7662: LD_INT 22
7664: PUSH
7665: LD_VAR 0 9
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 21
7676: PUSH
7677: LD_INT 1
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7707
// KillUnit ( i ) ;
7696: LD_VAR 0 3
7700: PPUSH
7701: CALL_OW 66
7705: GO 7693
7707: POP
7708: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 257
7718: PUSH
7719: LD_INT 12
7721: PUSH
7722: LD_INT 17
7724: PUSH
7725: LD_INT 15
7727: PUSH
7728: LD_INT 16
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: IN
7737: PUSH
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 263
7747: PUSH
7748: LD_INT 5
7750: EQUAL
7751: OR
7752: IFFALSE 7892
// begin tag := GetTag ( un ) ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 1
7763: PPUSH
7764: CALL_OW 110
7768: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7769: LD_ADDR_VAR 0 7
7773: PUSH
7774: LD_EXP 31
7778: PUSH
7779: LD_EXP 7
7783: PUSH
7784: LD_VAR 0 5
7788: ARRAY
7789: ARRAY
7790: ST_TO_ADDR
// if not area then
7791: LD_VAR 0 7
7795: NOT
7796: IFFALSE 7800
// exit ;
7798: GO 8163
// wait ( 4 4$00 ) ;
7800: LD_INT 8400
7802: PPUSH
7803: CALL_OW 67
// repeat wait ( 10 ) ;
7807: LD_INT 10
7809: PPUSH
7810: CALL_OW 67
// until not mpBlockRespThread ;
7814: LD_EXP 40
7818: NOT
7819: IFFALSE 7807
// mpBlockRespThread := true ;
7821: LD_ADDR_EXP 40
7825: PUSH
7826: LD_INT 1
7828: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7829: LD_INT 0
7831: PPUSH
7832: CALL 43078 0 1
// ape := CreateHuman ;
7836: LD_ADDR_VAR 0 4
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_VAR 0 5
7855: PPUSH
7856: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7860: LD_VAR 0 4
7864: PPUSH
7865: LD_VAR 0 7
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: CALL_OW 49
// wait ( 10 ) ;
7877: LD_INT 10
7879: PPUSH
7880: CALL_OW 67
// mpBlockRespThread := false ;
7884: LD_ADDR_EXP 40
7888: PUSH
7889: LD_INT 0
7891: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7892: LD_VAR 0 1
7896: PPUSH
7897: CALL_OW 247
7901: PUSH
7902: LD_INT 1
7904: EQUAL
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 248
7915: PUSH
7916: LD_INT 0
7918: GREATER
7919: AND
7920: IFFALSE 8163
// begin if not mpRespawn then
7922: LD_EXP 32
7926: NOT
7927: IFFALSE 7931
// exit ;
7929: GO 8163
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7931: LD_VAR 0 9
7935: PPUSH
7936: CALL_OW 108
7940: NOT
7941: PUSH
7942: LD_EXP 3
7946: PPUSH
7947: LD_VAR 0 9
7951: PPUSH
7952: CALL 6616 0 2
7956: NOT
7957: AND
7958: IFFALSE 7962
// exit ;
7960: GO 8163
// side := GetSide ( un ) ;
7962: LD_ADDR_VAR 0 9
7966: PUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 255
7976: ST_TO_ADDR
// nation := GetNation ( un ) ;
7977: LD_ADDR_VAR 0 8
7981: PUSH
7982: LD_VAR 0 1
7986: PPUSH
7987: CALL_OW 248
7991: ST_TO_ADDR
// class := GetClass ( un ) ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 1
8001: PPUSH
8002: CALL_OW 257
8006: ST_TO_ADDR
// if class > 4 then
8007: LD_VAR 0 6
8011: PUSH
8012: LD_INT 4
8014: GREATER
8015: IFFALSE 8025
// class := 1 ;
8017: LD_ADDR_VAR 0 6
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// repeat wait ( 10 ) ;
8025: LD_INT 10
8027: PPUSH
8028: CALL_OW 67
// until not mpBlockRespThread ;
8032: LD_EXP 40
8036: NOT
8037: IFFALSE 8025
// mpBlockRespThread := true ;
8039: LD_ADDR_EXP 40
8043: PUSH
8044: LD_INT 1
8046: ST_TO_ADDR
// uc_side := side ;
8047: LD_ADDR_OWVAR 20
8051: PUSH
8052: LD_VAR 0 9
8056: ST_TO_ADDR
// uc_nation := nation ;
8057: LD_ADDR_OWVAR 21
8061: PUSH
8062: LD_VAR 0 8
8066: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8067: LD_INT 0
8069: PPUSH
8070: LD_VAR 0 6
8074: PPUSH
8075: LD_INT 2
8077: PPUSH
8078: CALL_OW 380
// un := CreateHuman ;
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: CALL_OW 44
8091: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8092: LD_ADDR_EXP 39
8096: PUSH
8097: LD_EXP 39
8101: PPUSH
8102: LD_VAR 0 9
8106: PPUSH
8107: LD_EXP 39
8111: PUSH
8112: LD_VAR 0 9
8116: ARRAY
8117: PPUSH
8118: LD_EXP 39
8122: PUSH
8123: LD_VAR 0 9
8127: ARRAY
8128: PUSH
8129: LD_INT 1
8131: PLUS
8132: PPUSH
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 1
8142: PPUSH
8143: CALL_OW 1
8147: ST_TO_ADDR
// wait ( 10 ) ;
8148: LD_INT 10
8150: PPUSH
8151: CALL_OW 67
// mpBlockRespThread := false ;
8155: LD_ADDR_EXP 40
8159: PUSH
8160: LD_INT 0
8162: ST_TO_ADDR
// end ; end ;
8163: LD_VAR 0 2
8167: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8168: LD_INT 0
8170: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8171: LD_VAR 0 1
8175: PPUSH
8176: CALL_OW 266
8180: PUSH
8181: LD_INT 0
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: IN
8191: IFFALSE 8216
// SetBName ( building , @ & GetSide ( building ) ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_STRING @
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 255
8210: STR
8211: PPUSH
8212: CALL_OW 500
// end ;
8216: LD_VAR 0 2
8220: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8221: LD_INT 0
8223: PPUSH
8224: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8225: LD_EXP 3
8229: PUSH
8230: LD_INT 2
8232: EQUAL
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL_OW 266
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 1
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: IN
8254: AND
8255: IFFALSE 8320
// begin KillUnit ( building ) ;
8257: LD_VAR 0 1
8261: PPUSH
8262: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8266: LD_ADDR_VAR 0 5
8270: PUSH
8271: LD_INT 22
8273: PUSH
8274: LD_VAR 0 2
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 21
8285: PUSH
8286: LD_INT 1
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 69
8301: PUSH
8302: FOR_IN
8303: IFFALSE 8316
// KillUnit ( i ) ;
8305: LD_VAR 0 5
8309: PPUSH
8310: CALL_OW 66
8314: GO 8302
8316: POP
8317: POP
// exit ;
8318: GO 8365
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 266
8329: PUSH
8330: LD_INT 0
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: IN
8340: IFFALSE 8365
// SetBName ( building , @ & GetSide ( building ) ) ;
8342: LD_VAR 0 1
8346: PPUSH
8347: LD_STRING @
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 255
8359: STR
8360: PPUSH
8361: CALL_OW 500
// end ; end_of_file
8365: LD_VAR 0 4
8369: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8370: LD_EXP 38
8374: PUSH
8375: CALL 8580 0 0
8379: AND
8380: PUSH
8381: LD_OWVAR 4
8385: AND
8386: IFFALSE 8577
8388: GO 8390
8390: DISABLE
8391: LD_INT 0
8393: PPUSH
8394: PPUSH
// begin canWin := false ;
8395: LD_ADDR_VAR 0 2
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// if not HasPower ( your_side ) then
8403: LD_OWVAR 2
8407: PPUSH
8408: CALL 8620 0 1
8412: NOT
8413: IFFALSE 8424
// begin Multiplayer_Loose_Message ;
8415: CALL_OW 521
// enable ( mpLose ) ;
8419: LD_INT 102
8421: ENABLE_MARKED
// end else
8422: GO 8577
// begin canWin := true ;
8424: LD_ADDR_VAR 0 2
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// for i := 1 to 8 do
8432: LD_ADDR_VAR 0 1
8436: PUSH
8437: DOUBLE
8438: LD_INT 1
8440: DEC
8441: ST_TO_ADDR
8442: LD_INT 8
8444: PUSH
8445: FOR_TO
8446: IFFALSE 8563
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8448: LD_EXP 7
8452: PUSH
8453: LD_VAR 0 1
8457: ARRAY
8458: PUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 108
8468: AND
8469: PUSH
8470: LD_VAR 0 1
8474: PUSH
8475: LD_OWVAR 2
8479: NONEQUAL
8480: AND
8481: IFFALSE 8561
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8483: LD_EXP 8
8487: PUSH
8488: LD_VAR 0 1
8492: ARRAY
8493: NOT
8494: PUSH
8495: LD_EXP 8
8499: PUSH
8500: LD_VAR 0 1
8504: ARRAY
8505: PUSH
8506: LD_EXP 8
8510: PUSH
8511: LD_OWVAR 2
8515: ARRAY
8516: NONEQUAL
8517: PUSH
8518: LD_OWVAR 2
8522: PPUSH
8523: LD_VAR 0 1
8527: PPUSH
8528: CALL_OW 81
8532: PUSH
8533: LD_INT 1
8535: NONEQUAL
8536: AND
8537: OR
8538: IFFALSE 8561
// if HasPower ( i ) then
8540: LD_VAR 0 1
8544: PPUSH
8545: CALL 8620 0 1
8549: IFFALSE 8561
// begin canWin := false ;
8551: LD_ADDR_VAR 0 2
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// break ;
8559: GO 8563
// end ;
8561: GO 8445
8563: POP
8564: POP
// if canWin then
8565: LD_VAR 0 2
8569: IFFALSE 8576
// enable ( mpWin ) else
8571: LD_INT 101
8573: ENABLE_MARKED
8574: GO 8577
// enable ;
8576: ENABLE
// end ; end ;
8577: PPOPN 2
8579: END
// function CanWinLoose ; begin
8580: LD_INT 0
8582: PPUSH
// result := true ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8591: CALL_OW 531
8595: PUSH
8596: CALL_OW 519
8600: PUSH
8601: LD_INT 1
8603: GREATER
8604: AND
8605: IFFALSE 8615
// result := false ;
8607: LD_ADDR_VAR 0 1
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// end ;
8615: LD_VAR 0 1
8619: RET
// function HasPower ( i ) ; begin
8620: LD_INT 0
8622: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8623: LD_ADDR_VAR 0 2
8627: PUSH
8628: LD_INT 22
8630: PUSH
8631: LD_VAR 0 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 21
8645: PUSH
8646: LD_INT 1
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 33
8655: PUSH
8656: LD_INT 3
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 33
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PPUSH
8683: CALL_OW 69
8687: ST_TO_ADDR
// end ; end_of_file
8688: LD_VAR 0 2
8692: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8693: LD_EXP 38
8697: IFFALSE 8740
8699: GO 8701
8701: DISABLE
8702: LD_INT 0
8704: PPUSH
// begin for i := 1 to 8 do
8705: LD_ADDR_VAR 0 1
8709: PUSH
8710: DOUBLE
8711: LD_INT 1
8713: DEC
8714: ST_TO_ADDR
8715: LD_INT 8
8717: PUSH
8718: FOR_TO
8719: IFFALSE 8738
// SetRestrict ( b_depot , i , state_disabled ) ;
8721: LD_INT 0
8723: PPUSH
8724: LD_VAR 0 1
8728: PPUSH
8729: LD_INT 0
8731: PPUSH
8732: CALL_OW 324
8736: GO 8718
8738: POP
8739: POP
// end ;
8740: PPOPN 1
8742: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8743: LD_EXP 38
8747: PUSH
8748: CALL 8953 0 0
8752: AND
8753: PUSH
8754: LD_OWVAR 4
8758: AND
8759: IFFALSE 8950
8761: GO 8763
8763: DISABLE
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
// begin canWin := false ;
8768: LD_ADDR_VAR 0 2
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// if not HasPower ( your_side ) then
8776: LD_OWVAR 2
8780: PPUSH
8781: CALL 8993 0 1
8785: NOT
8786: IFFALSE 8797
// begin Multiplayer_Loose_Message ;
8788: CALL_OW 521
// enable ( mpLose ) ;
8792: LD_INT 102
8794: ENABLE_MARKED
// end else
8795: GO 8950
// begin canWin := true ;
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// for i := 1 to 8 do
8805: LD_ADDR_VAR 0 1
8809: PUSH
8810: DOUBLE
8811: LD_INT 1
8813: DEC
8814: ST_TO_ADDR
8815: LD_INT 8
8817: PUSH
8818: FOR_TO
8819: IFFALSE 8936
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8821: LD_EXP 7
8825: PUSH
8826: LD_VAR 0 1
8830: ARRAY
8831: PUSH
8832: LD_VAR 0 1
8836: PPUSH
8837: CALL_OW 108
8841: AND
8842: PUSH
8843: LD_VAR 0 1
8847: PUSH
8848: LD_OWVAR 2
8852: NONEQUAL
8853: AND
8854: IFFALSE 8934
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8856: LD_EXP 8
8860: PUSH
8861: LD_VAR 0 1
8865: ARRAY
8866: NOT
8867: PUSH
8868: LD_EXP 8
8872: PUSH
8873: LD_VAR 0 1
8877: ARRAY
8878: PUSH
8879: LD_EXP 8
8883: PUSH
8884: LD_OWVAR 2
8888: ARRAY
8889: NONEQUAL
8890: PUSH
8891: LD_OWVAR 2
8895: PPUSH
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 81
8905: PUSH
8906: LD_INT 1
8908: NONEQUAL
8909: AND
8910: OR
8911: IFFALSE 8934
// if HasPower ( i ) then
8913: LD_VAR 0 1
8917: PPUSH
8918: CALL 8993 0 1
8922: IFFALSE 8934
// begin canWin := false ;
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: LD_INT 0
8931: ST_TO_ADDR
// break ;
8932: GO 8936
// end ;
8934: GO 8818
8936: POP
8937: POP
// if canWin then
8938: LD_VAR 0 2
8942: IFFALSE 8949
// enable ( mpWin ) else
8944: LD_INT 101
8946: ENABLE_MARKED
8947: GO 8950
// enable ;
8949: ENABLE
// end ; end ;
8950: PPOPN 2
8952: END
// function CanWinLoose ; begin
8953: LD_INT 0
8955: PPUSH
// result := true ;
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8964: CALL_OW 531
8968: PUSH
8969: CALL_OW 519
8973: PUSH
8974: LD_INT 1
8976: GREATER
8977: AND
8978: IFFALSE 8988
// result := false ;
8980: LD_ADDR_VAR 0 1
8984: PUSH
8985: LD_INT 0
8987: ST_TO_ADDR
// end ;
8988: LD_VAR 0 1
8992: RET
// function HasPower ( i ) ; begin
8993: LD_INT 0
8995: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8996: LD_INT 22
8998: PUSH
8999: LD_VAR 0 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 2
9010: PUSH
9011: LD_INT 30
9013: PUSH
9014: LD_INT 0
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 30
9023: PUSH
9024: LD_INT 1
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PPUSH
9040: CALL_OW 69
9044: NOT
9045: IFFALSE 9049
// exit ;
9047: GO 9114
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9049: LD_ADDR_VAR 0 2
9053: PUSH
9054: LD_INT 22
9056: PUSH
9057: LD_VAR 0 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 2
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 33
9081: PUSH
9082: LD_INT 3
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 33
9091: PUSH
9092: LD_INT 5
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PPUSH
9109: CALL_OW 69
9113: ST_TO_ADDR
// end ; end_of_file
9114: LD_VAR 0 2
9118: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9119: LD_INT 0
9121: PPUSH
9122: PPUSH
// if exist_mode then
9123: LD_VAR 0 2
9127: IFFALSE 9152
// unit := CreateCharacter ( prefix & ident ) else
9129: LD_ADDR_VAR 0 5
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: LD_VAR 0 1
9143: STR
9144: PPUSH
9145: CALL_OW 34
9149: ST_TO_ADDR
9150: GO 9167
// unit := NewCharacter ( ident ) ;
9152: LD_ADDR_VAR 0 5
9156: PUSH
9157: LD_VAR 0 1
9161: PPUSH
9162: CALL_OW 25
9166: ST_TO_ADDR
// result := unit ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: LD_VAR 0 5
9176: ST_TO_ADDR
// end ;
9177: LD_VAR 0 4
9181: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9182: LD_INT 0
9184: PPUSH
9185: PPUSH
// if not side or not nation then
9186: LD_VAR 0 1
9190: NOT
9191: PUSH
9192: LD_VAR 0 2
9196: NOT
9197: OR
9198: IFFALSE 9202
// exit ;
9200: GO 9970
// case nation of nation_american :
9202: LD_VAR 0 2
9206: PUSH
9207: LD_INT 1
9209: DOUBLE
9210: EQUAL
9211: IFTRUE 9215
9213: GO 9429
9215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9216: LD_ADDR_VAR 0 4
9220: PUSH
9221: LD_INT 35
9223: PUSH
9224: LD_INT 45
9226: PUSH
9227: LD_INT 46
9229: PUSH
9230: LD_INT 47
9232: PUSH
9233: LD_INT 82
9235: PUSH
9236: LD_INT 83
9238: PUSH
9239: LD_INT 84
9241: PUSH
9242: LD_INT 85
9244: PUSH
9245: LD_INT 86
9247: PUSH
9248: LD_INT 1
9250: PUSH
9251: LD_INT 2
9253: PUSH
9254: LD_INT 6
9256: PUSH
9257: LD_INT 15
9259: PUSH
9260: LD_INT 16
9262: PUSH
9263: LD_INT 7
9265: PUSH
9266: LD_INT 12
9268: PUSH
9269: LD_INT 13
9271: PUSH
9272: LD_INT 10
9274: PUSH
9275: LD_INT 14
9277: PUSH
9278: LD_INT 20
9280: PUSH
9281: LD_INT 21
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_INT 25
9289: PUSH
9290: LD_INT 32
9292: PUSH
9293: LD_INT 27
9295: PUSH
9296: LD_INT 36
9298: PUSH
9299: LD_INT 69
9301: PUSH
9302: LD_INT 39
9304: PUSH
9305: LD_INT 34
9307: PUSH
9308: LD_INT 40
9310: PUSH
9311: LD_INT 48
9313: PUSH
9314: LD_INT 49
9316: PUSH
9317: LD_INT 50
9319: PUSH
9320: LD_INT 51
9322: PUSH
9323: LD_INT 52
9325: PUSH
9326: LD_INT 53
9328: PUSH
9329: LD_INT 54
9331: PUSH
9332: LD_INT 55
9334: PUSH
9335: LD_INT 56
9337: PUSH
9338: LD_INT 57
9340: PUSH
9341: LD_INT 58
9343: PUSH
9344: LD_INT 59
9346: PUSH
9347: LD_INT 60
9349: PUSH
9350: LD_INT 61
9352: PUSH
9353: LD_INT 62
9355: PUSH
9356: LD_INT 80
9358: PUSH
9359: LD_INT 82
9361: PUSH
9362: LD_INT 83
9364: PUSH
9365: LD_INT 84
9367: PUSH
9368: LD_INT 85
9370: PUSH
9371: LD_INT 86
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: ST_TO_ADDR
9427: GO 9894
9429: LD_INT 2
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9663
9437: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9438: LD_ADDR_VAR 0 4
9442: PUSH
9443: LD_INT 35
9445: PUSH
9446: LD_INT 45
9448: PUSH
9449: LD_INT 46
9451: PUSH
9452: LD_INT 47
9454: PUSH
9455: LD_INT 82
9457: PUSH
9458: LD_INT 83
9460: PUSH
9461: LD_INT 84
9463: PUSH
9464: LD_INT 85
9466: PUSH
9467: LD_INT 87
9469: PUSH
9470: LD_INT 70
9472: PUSH
9473: LD_INT 1
9475: PUSH
9476: LD_INT 11
9478: PUSH
9479: LD_INT 3
9481: PUSH
9482: LD_INT 4
9484: PUSH
9485: LD_INT 5
9487: PUSH
9488: LD_INT 6
9490: PUSH
9491: LD_INT 15
9493: PUSH
9494: LD_INT 18
9496: PUSH
9497: LD_INT 7
9499: PUSH
9500: LD_INT 17
9502: PUSH
9503: LD_INT 8
9505: PUSH
9506: LD_INT 20
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 22
9514: PUSH
9515: LD_INT 72
9517: PUSH
9518: LD_INT 26
9520: PUSH
9521: LD_INT 69
9523: PUSH
9524: LD_INT 39
9526: PUSH
9527: LD_INT 40
9529: PUSH
9530: LD_INT 41
9532: PUSH
9533: LD_INT 42
9535: PUSH
9536: LD_INT 43
9538: PUSH
9539: LD_INT 48
9541: PUSH
9542: LD_INT 49
9544: PUSH
9545: LD_INT 50
9547: PUSH
9548: LD_INT 51
9550: PUSH
9551: LD_INT 52
9553: PUSH
9554: LD_INT 53
9556: PUSH
9557: LD_INT 54
9559: PUSH
9560: LD_INT 55
9562: PUSH
9563: LD_INT 56
9565: PUSH
9566: LD_INT 60
9568: PUSH
9569: LD_INT 61
9571: PUSH
9572: LD_INT 62
9574: PUSH
9575: LD_INT 66
9577: PUSH
9578: LD_INT 67
9580: PUSH
9581: LD_INT 68
9583: PUSH
9584: LD_INT 81
9586: PUSH
9587: LD_INT 82
9589: PUSH
9590: LD_INT 83
9592: PUSH
9593: LD_INT 84
9595: PUSH
9596: LD_INT 85
9598: PUSH
9599: LD_INT 87
9601: PUSH
9602: LD_INT 88
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: ST_TO_ADDR
9661: GO 9894
9663: LD_INT 3
9665: DOUBLE
9666: EQUAL
9667: IFTRUE 9671
9669: GO 9893
9671: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9672: LD_ADDR_VAR 0 4
9676: PUSH
9677: LD_INT 46
9679: PUSH
9680: LD_INT 47
9682: PUSH
9683: LD_INT 1
9685: PUSH
9686: LD_INT 2
9688: PUSH
9689: LD_INT 82
9691: PUSH
9692: LD_INT 83
9694: PUSH
9695: LD_INT 84
9697: PUSH
9698: LD_INT 85
9700: PUSH
9701: LD_INT 86
9703: PUSH
9704: LD_INT 11
9706: PUSH
9707: LD_INT 9
9709: PUSH
9710: LD_INT 20
9712: PUSH
9713: LD_INT 19
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 24
9721: PUSH
9722: LD_INT 22
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 28
9730: PUSH
9731: LD_INT 29
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 31
9739: PUSH
9740: LD_INT 37
9742: PUSH
9743: LD_INT 38
9745: PUSH
9746: LD_INT 32
9748: PUSH
9749: LD_INT 27
9751: PUSH
9752: LD_INT 33
9754: PUSH
9755: LD_INT 69
9757: PUSH
9758: LD_INT 39
9760: PUSH
9761: LD_INT 34
9763: PUSH
9764: LD_INT 40
9766: PUSH
9767: LD_INT 71
9769: PUSH
9770: LD_INT 23
9772: PUSH
9773: LD_INT 44
9775: PUSH
9776: LD_INT 48
9778: PUSH
9779: LD_INT 49
9781: PUSH
9782: LD_INT 50
9784: PUSH
9785: LD_INT 51
9787: PUSH
9788: LD_INT 52
9790: PUSH
9791: LD_INT 53
9793: PUSH
9794: LD_INT 54
9796: PUSH
9797: LD_INT 55
9799: PUSH
9800: LD_INT 56
9802: PUSH
9803: LD_INT 57
9805: PUSH
9806: LD_INT 58
9808: PUSH
9809: LD_INT 59
9811: PUSH
9812: LD_INT 63
9814: PUSH
9815: LD_INT 64
9817: PUSH
9818: LD_INT 65
9820: PUSH
9821: LD_INT 82
9823: PUSH
9824: LD_INT 83
9826: PUSH
9827: LD_INT 84
9829: PUSH
9830: LD_INT 85
9832: PUSH
9833: LD_INT 86
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: ST_TO_ADDR
9891: GO 9894
9893: POP
// if state > - 1 and state < 3 then
9894: LD_VAR 0 3
9898: PUSH
9899: LD_INT 1
9901: NEG
9902: GREATER
9903: PUSH
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 3
9911: LESS
9912: AND
9913: IFFALSE 9970
// for i in result do
9915: LD_ADDR_VAR 0 5
9919: PUSH
9920: LD_VAR 0 4
9924: PUSH
9925: FOR_IN
9926: IFFALSE 9968
// if GetTech ( i , side ) <> state then
9928: LD_VAR 0 5
9932: PPUSH
9933: LD_VAR 0 1
9937: PPUSH
9938: CALL_OW 321
9942: PUSH
9943: LD_VAR 0 3
9947: NONEQUAL
9948: IFFALSE 9966
// result := result diff i ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_VAR 0 4
9959: PUSH
9960: LD_VAR 0 5
9964: DIFF
9965: ST_TO_ADDR
9966: GO 9925
9968: POP
9969: POP
// end ;
9970: LD_VAR 0 4
9974: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9975: LD_INT 0
9977: PPUSH
9978: PPUSH
9979: PPUSH
// result := true ;
9980: LD_ADDR_VAR 0 3
9984: PUSH
9985: LD_INT 1
9987: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9988: LD_ADDR_VAR 0 5
9992: PUSH
9993: LD_VAR 0 2
9997: PPUSH
9998: CALL_OW 480
10002: ST_TO_ADDR
// if not tmp then
10003: LD_VAR 0 5
10007: NOT
10008: IFFALSE 10012
// exit ;
10010: GO 10061
// for i in tmp do
10012: LD_ADDR_VAR 0 4
10016: PUSH
10017: LD_VAR 0 5
10021: PUSH
10022: FOR_IN
10023: IFFALSE 10059
// if GetTech ( i , side ) <> state_researched then
10025: LD_VAR 0 4
10029: PPUSH
10030: LD_VAR 0 1
10034: PPUSH
10035: CALL_OW 321
10039: PUSH
10040: LD_INT 2
10042: NONEQUAL
10043: IFFALSE 10057
// begin result := false ;
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// exit ;
10053: POP
10054: POP
10055: GO 10061
// end ;
10057: GO 10022
10059: POP
10060: POP
// end ;
10061: LD_VAR 0 3
10065: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
10074: PPUSH
10075: PPUSH
10076: PPUSH
10077: PPUSH
10078: PPUSH
10079: PPUSH
10080: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10081: LD_VAR 0 1
10085: NOT
10086: PUSH
10087: LD_VAR 0 1
10091: PPUSH
10092: CALL_OW 257
10096: PUSH
10097: LD_INT 9
10099: NONEQUAL
10100: OR
10101: IFFALSE 10105
// exit ;
10103: GO 10678
// side := GetSide ( unit ) ;
10105: LD_ADDR_VAR 0 9
10109: PUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: CALL_OW 255
10119: ST_TO_ADDR
// tech_space := tech_spacanom ;
10120: LD_ADDR_VAR 0 12
10124: PUSH
10125: LD_INT 29
10127: ST_TO_ADDR
// tech_time := tech_taurad ;
10128: LD_ADDR_VAR 0 13
10132: PUSH
10133: LD_INT 28
10135: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10136: LD_ADDR_VAR 0 11
10140: PUSH
10141: LD_VAR 0 1
10145: PPUSH
10146: CALL_OW 310
10150: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10151: LD_VAR 0 11
10155: PPUSH
10156: CALL_OW 247
10160: PUSH
10161: LD_INT 2
10163: EQUAL
10164: IFFALSE 10168
// exit ;
10166: GO 10678
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10168: LD_ADDR_VAR 0 8
10172: PUSH
10173: LD_INT 81
10175: PUSH
10176: LD_VAR 0 9
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 3
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 3
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PPUSH
10206: CALL_OW 69
10210: ST_TO_ADDR
// if not tmp then
10211: LD_VAR 0 8
10215: NOT
10216: IFFALSE 10220
// exit ;
10218: GO 10678
// if in_unit then
10220: LD_VAR 0 11
10224: IFFALSE 10248
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10226: LD_ADDR_VAR 0 10
10230: PUSH
10231: LD_VAR 0 8
10235: PPUSH
10236: LD_VAR 0 11
10240: PPUSH
10241: CALL_OW 74
10245: ST_TO_ADDR
10246: GO 10268
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10248: LD_ADDR_VAR 0 10
10252: PUSH
10253: LD_VAR 0 8
10257: PPUSH
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 74
10267: ST_TO_ADDR
// if not enemy then
10268: LD_VAR 0 10
10272: NOT
10273: IFFALSE 10277
// exit ;
10275: GO 10678
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10277: LD_VAR 0 11
10281: PUSH
10282: LD_VAR 0 11
10286: PPUSH
10287: LD_VAR 0 10
10291: PPUSH
10292: CALL_OW 296
10296: PUSH
10297: LD_INT 13
10299: GREATER
10300: AND
10301: PUSH
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_VAR 0 10
10311: PPUSH
10312: CALL_OW 296
10316: PUSH
10317: LD_INT 12
10319: GREATER
10320: OR
10321: IFFALSE 10325
// exit ;
10323: GO 10678
// missile := [ 1 ] ;
10325: LD_ADDR_VAR 0 14
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: EMPTY
10334: LIST
10335: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10336: LD_VAR 0 9
10340: PPUSH
10341: LD_VAR 0 12
10345: PPUSH
10346: CALL_OW 325
10350: IFFALSE 10379
// missile := Replace ( missile , missile + 1 , 2 ) ;
10352: LD_ADDR_VAR 0 14
10356: PUSH
10357: LD_VAR 0 14
10361: PPUSH
10362: LD_VAR 0 14
10366: PUSH
10367: LD_INT 1
10369: PLUS
10370: PPUSH
10371: LD_INT 2
10373: PPUSH
10374: CALL_OW 1
10378: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10379: LD_VAR 0 9
10383: PPUSH
10384: LD_VAR 0 13
10388: PPUSH
10389: CALL_OW 325
10393: PUSH
10394: LD_VAR 0 10
10398: PPUSH
10399: CALL_OW 255
10403: PPUSH
10404: LD_VAR 0 13
10408: PPUSH
10409: CALL_OW 325
10413: NOT
10414: AND
10415: IFFALSE 10444
// missile := Replace ( missile , missile + 1 , 3 ) ;
10417: LD_ADDR_VAR 0 14
10421: PUSH
10422: LD_VAR 0 14
10426: PPUSH
10427: LD_VAR 0 14
10431: PUSH
10432: LD_INT 1
10434: PLUS
10435: PPUSH
10436: LD_INT 3
10438: PPUSH
10439: CALL_OW 1
10443: ST_TO_ADDR
// if missile < 2 then
10444: LD_VAR 0 14
10448: PUSH
10449: LD_INT 2
10451: LESS
10452: IFFALSE 10456
// exit ;
10454: GO 10678
// x := GetX ( enemy ) ;
10456: LD_ADDR_VAR 0 4
10460: PUSH
10461: LD_VAR 0 10
10465: PPUSH
10466: CALL_OW 250
10470: ST_TO_ADDR
// y := GetY ( enemy ) ;
10471: LD_ADDR_VAR 0 5
10475: PUSH
10476: LD_VAR 0 10
10480: PPUSH
10481: CALL_OW 251
10485: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10486: LD_ADDR_VAR 0 6
10490: PUSH
10491: LD_VAR 0 4
10495: PUSH
10496: LD_INT 1
10498: NEG
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 12
10507: PLUS
10508: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10509: LD_ADDR_VAR 0 7
10513: PUSH
10514: LD_VAR 0 5
10518: PUSH
10519: LD_INT 1
10521: NEG
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 12
10530: PLUS
10531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10532: LD_VAR 0 6
10536: PPUSH
10537: LD_VAR 0 7
10541: PPUSH
10542: CALL_OW 488
10546: NOT
10547: IFFALSE 10569
// begin _x := x ;
10549: LD_ADDR_VAR 0 6
10553: PUSH
10554: LD_VAR 0 4
10558: ST_TO_ADDR
// _y := y ;
10559: LD_ADDR_VAR 0 7
10563: PUSH
10564: LD_VAR 0 5
10568: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 14
10581: PPUSH
10582: CALL_OW 12
10586: ST_TO_ADDR
// case i of 1 :
10587: LD_VAR 0 3
10591: PUSH
10592: LD_INT 1
10594: DOUBLE
10595: EQUAL
10596: IFTRUE 10600
10598: GO 10617
10600: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10601: LD_VAR 0 1
10605: PPUSH
10606: LD_VAR 0 10
10610: PPUSH
10611: CALL_OW 115
10615: GO 10678
10617: LD_INT 2
10619: DOUBLE
10620: EQUAL
10621: IFTRUE 10625
10623: GO 10647
10625: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10626: LD_VAR 0 1
10630: PPUSH
10631: LD_VAR 0 6
10635: PPUSH
10636: LD_VAR 0 7
10640: PPUSH
10641: CALL_OW 153
10645: GO 10678
10647: LD_INT 3
10649: DOUBLE
10650: EQUAL
10651: IFTRUE 10655
10653: GO 10677
10655: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10656: LD_VAR 0 1
10660: PPUSH
10661: LD_VAR 0 6
10665: PPUSH
10666: LD_VAR 0 7
10670: PPUSH
10671: CALL_OW 154
10675: GO 10678
10677: POP
// end ;
10678: LD_VAR 0 2
10682: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10683: LD_INT 0
10685: PPUSH
10686: PPUSH
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
// if not unit or not building then
10691: LD_VAR 0 1
10695: NOT
10696: PUSH
10697: LD_VAR 0 2
10701: NOT
10702: OR
10703: IFFALSE 10707
// exit ;
10705: GO 10865
// x := GetX ( building ) ;
10707: LD_ADDR_VAR 0 5
10711: PUSH
10712: LD_VAR 0 2
10716: PPUSH
10717: CALL_OW 250
10721: ST_TO_ADDR
// y := GetY ( building ) ;
10722: LD_ADDR_VAR 0 6
10726: PUSH
10727: LD_VAR 0 2
10731: PPUSH
10732: CALL_OW 251
10736: ST_TO_ADDR
// for i = 0 to 5 do
10737: LD_ADDR_VAR 0 4
10741: PUSH
10742: DOUBLE
10743: LD_INT 0
10745: DEC
10746: ST_TO_ADDR
10747: LD_INT 5
10749: PUSH
10750: FOR_TO
10751: IFFALSE 10863
// begin _x := ShiftX ( x , i , 3 ) ;
10753: LD_ADDR_VAR 0 7
10757: PUSH
10758: LD_VAR 0 5
10762: PPUSH
10763: LD_VAR 0 4
10767: PPUSH
10768: LD_INT 3
10770: PPUSH
10771: CALL_OW 272
10775: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10776: LD_ADDR_VAR 0 8
10780: PUSH
10781: LD_VAR 0 6
10785: PPUSH
10786: LD_VAR 0 4
10790: PPUSH
10791: LD_INT 3
10793: PPUSH
10794: CALL_OW 273
10798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10799: LD_VAR 0 7
10803: PPUSH
10804: LD_VAR 0 8
10808: PPUSH
10809: CALL_OW 488
10813: NOT
10814: IFFALSE 10818
// continue ;
10816: GO 10750
// if HexInfo ( _x , _y ) = 0 then
10818: LD_VAR 0 7
10822: PPUSH
10823: LD_VAR 0 8
10827: PPUSH
10828: CALL_OW 428
10832: PUSH
10833: LD_INT 0
10835: EQUAL
10836: IFFALSE 10861
// begin ComMoveXY ( unit , _x , _y ) ;
10838: LD_VAR 0 1
10842: PPUSH
10843: LD_VAR 0 7
10847: PPUSH
10848: LD_VAR 0 8
10852: PPUSH
10853: CALL_OW 111
// exit ;
10857: POP
10858: POP
10859: GO 10865
// end ; end ;
10861: GO 10750
10863: POP
10864: POP
// end ;
10865: LD_VAR 0 3
10869: RET
// export function ScanBase ( side , base_area ) ; begin
10870: LD_INT 0
10872: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10873: LD_ADDR_VAR 0 3
10877: PUSH
10878: LD_VAR 0 2
10882: PPUSH
10883: LD_INT 81
10885: PUSH
10886: LD_VAR 0 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 70
10899: ST_TO_ADDR
// end ;
10900: LD_VAR 0 3
10904: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10905: LD_INT 0
10907: PPUSH
10908: PPUSH
10909: PPUSH
10910: PPUSH
// result := false ;
10911: LD_ADDR_VAR 0 2
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// side := GetSide ( unit ) ;
10919: LD_ADDR_VAR 0 3
10923: PUSH
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 255
10933: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10934: LD_ADDR_VAR 0 4
10938: PUSH
10939: LD_VAR 0 1
10943: PPUSH
10944: CALL_OW 248
10948: ST_TO_ADDR
// case nat of 1 :
10949: LD_VAR 0 4
10953: PUSH
10954: LD_INT 1
10956: DOUBLE
10957: EQUAL
10958: IFTRUE 10962
10960: GO 10973
10962: POP
// tech := tech_lassight ; 2 :
10963: LD_ADDR_VAR 0 5
10967: PUSH
10968: LD_INT 12
10970: ST_TO_ADDR
10971: GO 11012
10973: LD_INT 2
10975: DOUBLE
10976: EQUAL
10977: IFTRUE 10981
10979: GO 10992
10981: POP
// tech := tech_mortar ; 3 :
10982: LD_ADDR_VAR 0 5
10986: PUSH
10987: LD_INT 41
10989: ST_TO_ADDR
10990: GO 11012
10992: LD_INT 3
10994: DOUBLE
10995: EQUAL
10996: IFTRUE 11000
10998: GO 11011
11000: POP
// tech := tech_bazooka ; end ;
11001: LD_ADDR_VAR 0 5
11005: PUSH
11006: LD_INT 44
11008: ST_TO_ADDR
11009: GO 11012
11011: POP
// if Researched ( side , tech ) then
11012: LD_VAR 0 3
11016: PPUSH
11017: LD_VAR 0 5
11021: PPUSH
11022: CALL_OW 325
11026: IFFALSE 11053
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 5
11035: PUSH
11036: LD_INT 8
11038: PUSH
11039: LD_INT 9
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: PUSH
11047: LD_VAR 0 4
11051: ARRAY
11052: ST_TO_ADDR
// end ;
11053: LD_VAR 0 2
11057: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11058: LD_INT 0
11060: PPUSH
11061: PPUSH
11062: PPUSH
// if not mines then
11063: LD_VAR 0 2
11067: NOT
11068: IFFALSE 11072
// exit ;
11070: GO 11216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11072: LD_ADDR_VAR 0 5
11076: PUSH
11077: LD_INT 81
11079: PUSH
11080: LD_VAR 0 1
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 3
11091: PUSH
11092: LD_INT 21
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: ST_TO_ADDR
// for i in mines do
11115: LD_ADDR_VAR 0 4
11119: PUSH
11120: LD_VAR 0 2
11124: PUSH
11125: FOR_IN
11126: IFFALSE 11214
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11128: LD_VAR 0 4
11132: PUSH
11133: LD_INT 1
11135: ARRAY
11136: PPUSH
11137: LD_VAR 0 4
11141: PUSH
11142: LD_INT 2
11144: ARRAY
11145: PPUSH
11146: CALL_OW 458
11150: NOT
11151: IFFALSE 11155
// continue ;
11153: GO 11125
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11155: LD_VAR 0 4
11159: PUSH
11160: LD_INT 1
11162: ARRAY
11163: PPUSH
11164: LD_VAR 0 4
11168: PUSH
11169: LD_INT 2
11171: ARRAY
11172: PPUSH
11173: CALL_OW 428
11177: PUSH
11178: LD_VAR 0 5
11182: IN
11183: IFFALSE 11212
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11185: LD_VAR 0 4
11189: PUSH
11190: LD_INT 1
11192: ARRAY
11193: PPUSH
11194: LD_VAR 0 4
11198: PUSH
11199: LD_INT 2
11201: ARRAY
11202: PPUSH
11203: LD_VAR 0 1
11207: PPUSH
11208: CALL_OW 456
// end ;
11212: GO 11125
11214: POP
11215: POP
// end ;
11216: LD_VAR 0 3
11220: RET
// export function Count ( array ) ; begin
11221: LD_INT 0
11223: PPUSH
// result := array + 0 ;
11224: LD_ADDR_VAR 0 2
11228: PUSH
11229: LD_VAR 0 1
11233: PUSH
11234: LD_INT 0
11236: PLUS
11237: ST_TO_ADDR
// end ;
11238: LD_VAR 0 2
11242: RET
// export function IsEmpty ( building ) ; begin
11243: LD_INT 0
11245: PPUSH
// if not building then
11246: LD_VAR 0 1
11250: NOT
11251: IFFALSE 11255
// exit ;
11253: GO 11298
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11255: LD_ADDR_VAR 0 2
11259: PUSH
11260: LD_VAR 0 1
11264: PUSH
11265: LD_INT 22
11267: PUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 255
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 58
11284: PUSH
11285: EMPTY
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PPUSH
11292: CALL_OW 69
11296: IN
11297: ST_TO_ADDR
// end ;
11298: LD_VAR 0 2
11302: RET
// export function IsNotFull ( building ) ; var places ; begin
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
// if not building then
11307: LD_VAR 0 1
11311: NOT
11312: IFFALSE 11316
// exit ;
11314: GO 11344
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11316: LD_ADDR_VAR 0 2
11320: PUSH
11321: LD_VAR 0 1
11325: PPUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 62
11331: PUSH
11332: EMPTY
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 72
11343: ST_TO_ADDR
// end ;
11344: LD_VAR 0 2
11348: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11349: LD_INT 0
11351: PPUSH
11352: PPUSH
11353: PPUSH
11354: PPUSH
// tmp := [ ] ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: EMPTY
11361: ST_TO_ADDR
// list := [ ] ;
11362: LD_ADDR_VAR 0 5
11366: PUSH
11367: EMPTY
11368: ST_TO_ADDR
// for i = 16 to 25 do
11369: LD_ADDR_VAR 0 4
11373: PUSH
11374: DOUBLE
11375: LD_INT 16
11377: DEC
11378: ST_TO_ADDR
11379: LD_INT 25
11381: PUSH
11382: FOR_TO
11383: IFFALSE 11456
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: LD_VAR 0 3
11394: PUSH
11395: LD_INT 22
11397: PUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 255
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 91
11414: PUSH
11415: LD_VAR 0 1
11419: PUSH
11420: LD_INT 6
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PUSH
11428: LD_INT 30
11430: PUSH
11431: LD_VAR 0 4
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ADD
11453: ST_TO_ADDR
11454: GO 11382
11456: POP
11457: POP
// for i = 1 to tmp do
11458: LD_ADDR_VAR 0 4
11462: PUSH
11463: DOUBLE
11464: LD_INT 1
11466: DEC
11467: ST_TO_ADDR
11468: LD_VAR 0 3
11472: PUSH
11473: FOR_TO
11474: IFFALSE 11562
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11476: LD_ADDR_VAR 0 5
11480: PUSH
11481: LD_VAR 0 5
11485: PUSH
11486: LD_VAR 0 3
11490: PUSH
11491: LD_VAR 0 4
11495: ARRAY
11496: PPUSH
11497: CALL_OW 266
11501: PUSH
11502: LD_VAR 0 3
11506: PUSH
11507: LD_VAR 0 4
11511: ARRAY
11512: PPUSH
11513: CALL_OW 250
11517: PUSH
11518: LD_VAR 0 3
11522: PUSH
11523: LD_VAR 0 4
11527: ARRAY
11528: PPUSH
11529: CALL_OW 251
11533: PUSH
11534: LD_VAR 0 3
11538: PUSH
11539: LD_VAR 0 4
11543: ARRAY
11544: PPUSH
11545: CALL_OW 254
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: ADD
11559: ST_TO_ADDR
11560: GO 11473
11562: POP
11563: POP
// result := list ;
11564: LD_ADDR_VAR 0 2
11568: PUSH
11569: LD_VAR 0 5
11573: ST_TO_ADDR
// end ;
11574: LD_VAR 0 2
11578: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11579: LD_INT 0
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
11587: PPUSH
// if not factory then
11588: LD_VAR 0 1
11592: NOT
11593: IFFALSE 11597
// exit ;
11595: GO 12190
// if control = control_apeman then
11597: LD_VAR 0 4
11601: PUSH
11602: LD_INT 5
11604: EQUAL
11605: IFFALSE 11714
// begin tmp := UnitsInside ( factory ) ;
11607: LD_ADDR_VAR 0 8
11611: PUSH
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 313
11621: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11622: LD_VAR 0 8
11626: PPUSH
11627: LD_INT 25
11629: PUSH
11630: LD_INT 12
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL_OW 72
11641: NOT
11642: IFFALSE 11652
// control := control_manual ;
11644: LD_ADDR_VAR 0 4
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11652: LD_ADDR_VAR 0 8
11656: PUSH
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL 11349 0 1
11666: ST_TO_ADDR
// if tmp then
11667: LD_VAR 0 8
11671: IFFALSE 11714
// begin for i in tmp do
11673: LD_ADDR_VAR 0 7
11677: PUSH
11678: LD_VAR 0 8
11682: PUSH
11683: FOR_IN
11684: IFFALSE 11712
// if i [ 1 ] = b_ext_radio then
11686: LD_VAR 0 7
11690: PUSH
11691: LD_INT 1
11693: ARRAY
11694: PUSH
11695: LD_INT 22
11697: EQUAL
11698: IFFALSE 11710
// begin control := control_remote ;
11700: LD_ADDR_VAR 0 4
11704: PUSH
11705: LD_INT 2
11707: ST_TO_ADDR
// break ;
11708: GO 11712
// end ;
11710: GO 11683
11712: POP
11713: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_VAR 0 2
11723: PPUSH
11724: LD_VAR 0 3
11728: PPUSH
11729: LD_VAR 0 4
11733: PPUSH
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 448
11743: IFFALSE 11778
// begin result := [ chassis , engine , control , weapon ] ;
11745: LD_ADDR_VAR 0 6
11749: PUSH
11750: LD_VAR 0 2
11754: PUSH
11755: LD_VAR 0 3
11759: PUSH
11760: LD_VAR 0 4
11764: PUSH
11765: LD_VAR 0 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: ST_TO_ADDR
// exit ;
11776: GO 12190
// end ; _chassis := AvailableChassisList ( factory ) ;
11778: LD_ADDR_VAR 0 9
11782: PUSH
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 475
11792: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11793: LD_ADDR_VAR 0 11
11797: PUSH
11798: LD_VAR 0 1
11802: PPUSH
11803: CALL_OW 476
11807: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11808: LD_ADDR_VAR 0 12
11812: PUSH
11813: LD_VAR 0 1
11817: PPUSH
11818: CALL_OW 477
11822: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11823: LD_ADDR_VAR 0 10
11827: PUSH
11828: LD_VAR 0 1
11832: PPUSH
11833: CALL_OW 478
11837: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11838: LD_VAR 0 9
11842: NOT
11843: PUSH
11844: LD_VAR 0 11
11848: NOT
11849: OR
11850: PUSH
11851: LD_VAR 0 12
11855: NOT
11856: OR
11857: PUSH
11858: LD_VAR 0 10
11862: NOT
11863: OR
11864: IFFALSE 11899
// begin result := [ chassis , engine , control , weapon ] ;
11866: LD_ADDR_VAR 0 6
11870: PUSH
11871: LD_VAR 0 2
11875: PUSH
11876: LD_VAR 0 3
11880: PUSH
11881: LD_VAR 0 4
11885: PUSH
11886: LD_VAR 0 5
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: ST_TO_ADDR
// exit ;
11897: GO 12190
// end ; if not chassis in _chassis then
11899: LD_VAR 0 2
11903: PUSH
11904: LD_VAR 0 9
11908: IN
11909: NOT
11910: IFFALSE 11936
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11912: LD_ADDR_VAR 0 2
11916: PUSH
11917: LD_VAR 0 9
11921: PUSH
11922: LD_INT 1
11924: PPUSH
11925: LD_VAR 0 9
11929: PPUSH
11930: CALL_OW 12
11934: ARRAY
11935: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11936: LD_VAR 0 2
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: CALL 12195 0 2
11950: NOT
11951: IFFALSE 12010
// repeat engine := _engine [ 1 ] ;
11953: LD_ADDR_VAR 0 3
11957: PUSH
11958: LD_VAR 0 11
11962: PUSH
11963: LD_INT 1
11965: ARRAY
11966: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11967: LD_ADDR_VAR 0 11
11971: PUSH
11972: LD_VAR 0 11
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 3
11984: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11985: LD_VAR 0 2
11989: PPUSH
11990: LD_VAR 0 3
11994: PPUSH
11995: CALL 12195 0 2
11999: PUSH
12000: LD_VAR 0 11
12004: PUSH
12005: EMPTY
12006: EQUAL
12007: OR
12008: IFFALSE 11953
// if not control in _control then
12010: LD_VAR 0 4
12014: PUSH
12015: LD_VAR 0 12
12019: IN
12020: NOT
12021: IFFALSE 12047
// control := _control [ rand ( 1 , _control ) ] ;
12023: LD_ADDR_VAR 0 4
12027: PUSH
12028: LD_VAR 0 12
12032: PUSH
12033: LD_INT 1
12035: PPUSH
12036: LD_VAR 0 12
12040: PPUSH
12041: CALL_OW 12
12045: ARRAY
12046: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12047: LD_VAR 0 2
12051: PPUSH
12052: LD_VAR 0 5
12056: PPUSH
12057: CALL 12415 0 2
12061: NOT
12062: IFFALSE 12121
// repeat weapon := _weapon [ 1 ] ;
12064: LD_ADDR_VAR 0 5
12068: PUSH
12069: LD_VAR 0 10
12073: PUSH
12074: LD_INT 1
12076: ARRAY
12077: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12078: LD_ADDR_VAR 0 10
12082: PUSH
12083: LD_VAR 0 10
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: CALL_OW 3
12095: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12096: LD_VAR 0 2
12100: PPUSH
12101: LD_VAR 0 5
12105: PPUSH
12106: CALL 12415 0 2
12110: PUSH
12111: LD_VAR 0 10
12115: PUSH
12116: EMPTY
12117: EQUAL
12118: OR
12119: IFFALSE 12064
// result := [ ] ;
12121: LD_ADDR_VAR 0 6
12125: PUSH
12126: EMPTY
12127: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_VAR 0 2
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_VAR 0 4
12147: PPUSH
12148: LD_VAR 0 5
12152: PPUSH
12153: CALL_OW 448
12157: IFFALSE 12190
// result := [ chassis , engine , control , weapon ] ;
12159: LD_ADDR_VAR 0 6
12163: PUSH
12164: LD_VAR 0 2
12168: PUSH
12169: LD_VAR 0 3
12173: PUSH
12174: LD_VAR 0 4
12178: PUSH
12179: LD_VAR 0 5
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: ST_TO_ADDR
// end ;
12190: LD_VAR 0 6
12194: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12195: LD_INT 0
12197: PPUSH
// if not chassis or not engine then
12198: LD_VAR 0 1
12202: NOT
12203: PUSH
12204: LD_VAR 0 2
12208: NOT
12209: OR
12210: IFFALSE 12214
// exit ;
12212: GO 12410
// case engine of engine_solar :
12214: LD_VAR 0 2
12218: PUSH
12219: LD_INT 2
12221: DOUBLE
12222: EQUAL
12223: IFTRUE 12227
12225: GO 12265
12227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12228: LD_ADDR_VAR 0 3
12232: PUSH
12233: LD_INT 11
12235: PUSH
12236: LD_INT 12
12238: PUSH
12239: LD_INT 13
12241: PUSH
12242: LD_INT 14
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: ST_TO_ADDR
12263: GO 12394
12265: LD_INT 1
12267: DOUBLE
12268: EQUAL
12269: IFTRUE 12273
12271: GO 12335
12273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12274: LD_ADDR_VAR 0 3
12278: PUSH
12279: LD_INT 11
12281: PUSH
12282: LD_INT 12
12284: PUSH
12285: LD_INT 13
12287: PUSH
12288: LD_INT 14
12290: PUSH
12291: LD_INT 1
12293: PUSH
12294: LD_INT 2
12296: PUSH
12297: LD_INT 3
12299: PUSH
12300: LD_INT 4
12302: PUSH
12303: LD_INT 5
12305: PUSH
12306: LD_INT 21
12308: PUSH
12309: LD_INT 23
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_INT 24
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: ST_TO_ADDR
12333: GO 12394
12335: LD_INT 3
12337: DOUBLE
12338: EQUAL
12339: IFTRUE 12343
12341: GO 12393
12343: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12344: LD_ADDR_VAR 0 3
12348: PUSH
12349: LD_INT 13
12351: PUSH
12352: LD_INT 14
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 3
12360: PUSH
12361: LD_INT 4
12363: PUSH
12364: LD_INT 5
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_INT 23
12375: PUSH
12376: LD_INT 24
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: ST_TO_ADDR
12391: GO 12394
12393: POP
// result := ( chassis in result ) ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: LD_VAR 0 1
12403: PUSH
12404: LD_VAR 0 3
12408: IN
12409: ST_TO_ADDR
// end ;
12410: LD_VAR 0 3
12414: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12415: LD_INT 0
12417: PPUSH
// if not chassis or not weapon then
12418: LD_VAR 0 1
12422: NOT
12423: PUSH
12424: LD_VAR 0 2
12428: NOT
12429: OR
12430: IFFALSE 12434
// exit ;
12432: GO 13494
// case weapon of us_machine_gun :
12434: LD_VAR 0 2
12438: PUSH
12439: LD_INT 2
12441: DOUBLE
12442: EQUAL
12443: IFTRUE 12447
12445: GO 12477
12447: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12448: LD_ADDR_VAR 0 3
12452: PUSH
12453: LD_INT 1
12455: PUSH
12456: LD_INT 2
12458: PUSH
12459: LD_INT 3
12461: PUSH
12462: LD_INT 4
12464: PUSH
12465: LD_INT 5
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: ST_TO_ADDR
12475: GO 13478
12477: LD_INT 3
12479: DOUBLE
12480: EQUAL
12481: IFTRUE 12485
12483: GO 12515
12485: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12486: LD_ADDR_VAR 0 3
12490: PUSH
12491: LD_INT 1
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: LD_INT 3
12499: PUSH
12500: LD_INT 4
12502: PUSH
12503: LD_INT 5
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: ST_TO_ADDR
12513: GO 13478
12515: LD_INT 11
12517: DOUBLE
12518: EQUAL
12519: IFTRUE 12523
12521: GO 12553
12523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12524: LD_ADDR_VAR 0 3
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: LD_INT 3
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: LD_INT 5
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
12551: GO 13478
12553: LD_INT 4
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12587
12561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12562: LD_ADDR_VAR 0 3
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: LD_INT 3
12572: PUSH
12573: LD_INT 4
12575: PUSH
12576: LD_INT 5
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: ST_TO_ADDR
12585: GO 13478
12587: LD_INT 5
12589: DOUBLE
12590: EQUAL
12591: IFTRUE 12595
12593: GO 12621
12595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12596: LD_ADDR_VAR 0 3
12600: PUSH
12601: LD_INT 2
12603: PUSH
12604: LD_INT 3
12606: PUSH
12607: LD_INT 4
12609: PUSH
12610: LD_INT 5
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: ST_TO_ADDR
12619: GO 13478
12621: LD_INT 9
12623: DOUBLE
12624: EQUAL
12625: IFTRUE 12629
12627: GO 12655
12629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12630: LD_ADDR_VAR 0 3
12634: PUSH
12635: LD_INT 2
12637: PUSH
12638: LD_INT 3
12640: PUSH
12641: LD_INT 4
12643: PUSH
12644: LD_INT 5
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: ST_TO_ADDR
12653: GO 13478
12655: LD_INT 7
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 12689
12663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12664: LD_ADDR_VAR 0 3
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: LD_INT 3
12674: PUSH
12675: LD_INT 4
12677: PUSH
12678: LD_INT 5
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: ST_TO_ADDR
12687: GO 13478
12689: LD_INT 12
12691: DOUBLE
12692: EQUAL
12693: IFTRUE 12697
12695: GO 12723
12697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12698: LD_ADDR_VAR 0 3
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: LD_INT 4
12711: PUSH
12712: LD_INT 5
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: ST_TO_ADDR
12721: GO 13478
12723: LD_INT 13
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12757
12731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12732: LD_ADDR_VAR 0 3
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: LD_INT 3
12742: PUSH
12743: LD_INT 4
12745: PUSH
12746: LD_INT 5
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: ST_TO_ADDR
12755: GO 13478
12757: LD_INT 14
12759: DOUBLE
12760: EQUAL
12761: IFTRUE 12765
12763: GO 12783
12765: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12766: LD_ADDR_VAR 0 3
12770: PUSH
12771: LD_INT 4
12773: PUSH
12774: LD_INT 5
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: ST_TO_ADDR
12781: GO 13478
12783: LD_INT 6
12785: DOUBLE
12786: EQUAL
12787: IFTRUE 12791
12789: GO 12809
12791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12792: LD_ADDR_VAR 0 3
12796: PUSH
12797: LD_INT 4
12799: PUSH
12800: LD_INT 5
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: ST_TO_ADDR
12807: GO 13478
12809: LD_INT 10
12811: DOUBLE
12812: EQUAL
12813: IFTRUE 12817
12815: GO 12835
12817: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12818: LD_ADDR_VAR 0 3
12822: PUSH
12823: LD_INT 4
12825: PUSH
12826: LD_INT 5
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: ST_TO_ADDR
12833: GO 13478
12835: LD_INT 22
12837: DOUBLE
12838: EQUAL
12839: IFTRUE 12843
12841: GO 12869
12843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12844: LD_ADDR_VAR 0 3
12848: PUSH
12849: LD_INT 11
12851: PUSH
12852: LD_INT 12
12854: PUSH
12855: LD_INT 13
12857: PUSH
12858: LD_INT 14
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: ST_TO_ADDR
12867: GO 13478
12869: LD_INT 23
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12903
12877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12878: LD_ADDR_VAR 0 3
12882: PUSH
12883: LD_INT 11
12885: PUSH
12886: LD_INT 12
12888: PUSH
12889: LD_INT 13
12891: PUSH
12892: LD_INT 14
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: ST_TO_ADDR
12901: GO 13478
12903: LD_INT 24
12905: DOUBLE
12906: EQUAL
12907: IFTRUE 12911
12909: GO 12937
12911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12912: LD_ADDR_VAR 0 3
12916: PUSH
12917: LD_INT 11
12919: PUSH
12920: LD_INT 12
12922: PUSH
12923: LD_INT 13
12925: PUSH
12926: LD_INT 14
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: ST_TO_ADDR
12935: GO 13478
12937: LD_INT 30
12939: DOUBLE
12940: EQUAL
12941: IFTRUE 12945
12943: GO 12971
12945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12946: LD_ADDR_VAR 0 3
12950: PUSH
12951: LD_INT 11
12953: PUSH
12954: LD_INT 12
12956: PUSH
12957: LD_INT 13
12959: PUSH
12960: LD_INT 14
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: ST_TO_ADDR
12969: GO 13478
12971: LD_INT 25
12973: DOUBLE
12974: EQUAL
12975: IFTRUE 12979
12977: GO 12997
12979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12980: LD_ADDR_VAR 0 3
12984: PUSH
12985: LD_INT 13
12987: PUSH
12988: LD_INT 14
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: ST_TO_ADDR
12995: GO 13478
12997: LD_INT 27
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13023
13005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13006: LD_ADDR_VAR 0 3
13010: PUSH
13011: LD_INT 13
13013: PUSH
13014: LD_INT 14
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: ST_TO_ADDR
13021: GO 13478
13023: LD_INT 92
13025: DOUBLE
13026: EQUAL
13027: IFTRUE 13031
13029: GO 13057
13031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13032: LD_ADDR_VAR 0 3
13036: PUSH
13037: LD_INT 11
13039: PUSH
13040: LD_INT 12
13042: PUSH
13043: LD_INT 13
13045: PUSH
13046: LD_INT 14
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: ST_TO_ADDR
13055: GO 13478
13057: LD_INT 28
13059: DOUBLE
13060: EQUAL
13061: IFTRUE 13065
13063: GO 13083
13065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13066: LD_ADDR_VAR 0 3
13070: PUSH
13071: LD_INT 13
13073: PUSH
13074: LD_INT 14
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: ST_TO_ADDR
13081: GO 13478
13083: LD_INT 29
13085: DOUBLE
13086: EQUAL
13087: IFTRUE 13091
13089: GO 13109
13091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13092: LD_ADDR_VAR 0 3
13096: PUSH
13097: LD_INT 13
13099: PUSH
13100: LD_INT 14
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: ST_TO_ADDR
13107: GO 13478
13109: LD_INT 31
13111: DOUBLE
13112: EQUAL
13113: IFTRUE 13117
13115: GO 13135
13117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13118: LD_ADDR_VAR 0 3
13122: PUSH
13123: LD_INT 13
13125: PUSH
13126: LD_INT 14
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: ST_TO_ADDR
13133: GO 13478
13135: LD_INT 26
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13161
13143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: LD_INT 13
13151: PUSH
13152: LD_INT 14
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: ST_TO_ADDR
13159: GO 13478
13161: LD_INT 42
13163: DOUBLE
13164: EQUAL
13165: IFTRUE 13169
13167: GO 13195
13169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13170: LD_ADDR_VAR 0 3
13174: PUSH
13175: LD_INT 21
13177: PUSH
13178: LD_INT 22
13180: PUSH
13181: LD_INT 23
13183: PUSH
13184: LD_INT 24
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: ST_TO_ADDR
13193: GO 13478
13195: LD_INT 43
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13229
13203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13204: LD_ADDR_VAR 0 3
13208: PUSH
13209: LD_INT 21
13211: PUSH
13212: LD_INT 22
13214: PUSH
13215: LD_INT 23
13217: PUSH
13218: LD_INT 24
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: ST_TO_ADDR
13227: GO 13478
13229: LD_INT 44
13231: DOUBLE
13232: EQUAL
13233: IFTRUE 13237
13235: GO 13263
13237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13238: LD_ADDR_VAR 0 3
13242: PUSH
13243: LD_INT 21
13245: PUSH
13246: LD_INT 22
13248: PUSH
13249: LD_INT 23
13251: PUSH
13252: LD_INT 24
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: ST_TO_ADDR
13261: GO 13478
13263: LD_INT 45
13265: DOUBLE
13266: EQUAL
13267: IFTRUE 13271
13269: GO 13297
13271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13272: LD_ADDR_VAR 0 3
13276: PUSH
13277: LD_INT 21
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_INT 23
13285: PUSH
13286: LD_INT 24
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: ST_TO_ADDR
13295: GO 13478
13297: LD_INT 49
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13331
13305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13306: LD_ADDR_VAR 0 3
13310: PUSH
13311: LD_INT 21
13313: PUSH
13314: LD_INT 22
13316: PUSH
13317: LD_INT 23
13319: PUSH
13320: LD_INT 24
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: ST_TO_ADDR
13329: GO 13478
13331: LD_INT 51
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13365
13339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13340: LD_ADDR_VAR 0 3
13344: PUSH
13345: LD_INT 21
13347: PUSH
13348: LD_INT 22
13350: PUSH
13351: LD_INT 23
13353: PUSH
13354: LD_INT 24
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: ST_TO_ADDR
13363: GO 13478
13365: LD_INT 52
13367: DOUBLE
13368: EQUAL
13369: IFTRUE 13373
13371: GO 13399
13373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13374: LD_ADDR_VAR 0 3
13378: PUSH
13379: LD_INT 21
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 23
13387: PUSH
13388: LD_INT 24
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: ST_TO_ADDR
13397: GO 13478
13399: LD_INT 53
13401: DOUBLE
13402: EQUAL
13403: IFTRUE 13407
13405: GO 13425
13407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13408: LD_ADDR_VAR 0 3
13412: PUSH
13413: LD_INT 23
13415: PUSH
13416: LD_INT 24
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: ST_TO_ADDR
13423: GO 13478
13425: LD_INT 46
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 13451
13433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_INT 23
13441: PUSH
13442: LD_INT 24
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: ST_TO_ADDR
13449: GO 13478
13451: LD_INT 47
13453: DOUBLE
13454: EQUAL
13455: IFTRUE 13459
13457: GO 13477
13459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13460: LD_ADDR_VAR 0 3
13464: PUSH
13465: LD_INT 23
13467: PUSH
13468: LD_INT 24
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: ST_TO_ADDR
13475: GO 13478
13477: POP
// result := ( chassis in result ) ;
13478: LD_ADDR_VAR 0 3
13482: PUSH
13483: LD_VAR 0 1
13487: PUSH
13488: LD_VAR 0 3
13492: IN
13493: ST_TO_ADDR
// end ;
13494: LD_VAR 0 3
13498: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13499: LD_INT 0
13501: PPUSH
13502: PPUSH
13503: PPUSH
13504: PPUSH
13505: PPUSH
13506: PPUSH
13507: PPUSH
// result := array ;
13508: LD_ADDR_VAR 0 5
13512: PUSH
13513: LD_VAR 0 1
13517: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13518: LD_VAR 0 1
13522: NOT
13523: PUSH
13524: LD_VAR 0 2
13528: NOT
13529: OR
13530: PUSH
13531: LD_VAR 0 3
13535: NOT
13536: OR
13537: PUSH
13538: LD_VAR 0 2
13542: PUSH
13543: LD_VAR 0 1
13547: GREATER
13548: OR
13549: PUSH
13550: LD_VAR 0 3
13554: PUSH
13555: LD_VAR 0 1
13559: GREATER
13560: OR
13561: IFFALSE 13565
// exit ;
13563: GO 13861
// if direction then
13565: LD_VAR 0 4
13569: IFFALSE 13633
// begin d := 1 ;
13571: LD_ADDR_VAR 0 9
13575: PUSH
13576: LD_INT 1
13578: ST_TO_ADDR
// if i_from > i_to then
13579: LD_VAR 0 2
13583: PUSH
13584: LD_VAR 0 3
13588: GREATER
13589: IFFALSE 13615
// length := ( array - i_from ) + i_to else
13591: LD_ADDR_VAR 0 11
13595: PUSH
13596: LD_VAR 0 1
13600: PUSH
13601: LD_VAR 0 2
13605: MINUS
13606: PUSH
13607: LD_VAR 0 3
13611: PLUS
13612: ST_TO_ADDR
13613: GO 13631
// length := i_to - i_from ;
13615: LD_ADDR_VAR 0 11
13619: PUSH
13620: LD_VAR 0 3
13624: PUSH
13625: LD_VAR 0 2
13629: MINUS
13630: ST_TO_ADDR
// end else
13631: GO 13694
// begin d := - 1 ;
13633: LD_ADDR_VAR 0 9
13637: PUSH
13638: LD_INT 1
13640: NEG
13641: ST_TO_ADDR
// if i_from > i_to then
13642: LD_VAR 0 2
13646: PUSH
13647: LD_VAR 0 3
13651: GREATER
13652: IFFALSE 13672
// length := i_from - i_to else
13654: LD_ADDR_VAR 0 11
13658: PUSH
13659: LD_VAR 0 2
13663: PUSH
13664: LD_VAR 0 3
13668: MINUS
13669: ST_TO_ADDR
13670: GO 13694
// length := ( array - i_to ) + i_from ;
13672: LD_ADDR_VAR 0 11
13676: PUSH
13677: LD_VAR 0 1
13681: PUSH
13682: LD_VAR 0 3
13686: MINUS
13687: PUSH
13688: LD_VAR 0 2
13692: PLUS
13693: ST_TO_ADDR
// end ; if not length then
13694: LD_VAR 0 11
13698: NOT
13699: IFFALSE 13703
// exit ;
13701: GO 13861
// tmp := array ;
13703: LD_ADDR_VAR 0 10
13707: PUSH
13708: LD_VAR 0 1
13712: ST_TO_ADDR
// for i = 1 to length do
13713: LD_ADDR_VAR 0 6
13717: PUSH
13718: DOUBLE
13719: LD_INT 1
13721: DEC
13722: ST_TO_ADDR
13723: LD_VAR 0 11
13727: PUSH
13728: FOR_TO
13729: IFFALSE 13849
// begin for j = 1 to array do
13731: LD_ADDR_VAR 0 7
13735: PUSH
13736: DOUBLE
13737: LD_INT 1
13739: DEC
13740: ST_TO_ADDR
13741: LD_VAR 0 1
13745: PUSH
13746: FOR_TO
13747: IFFALSE 13835
// begin k := j + d ;
13749: LD_ADDR_VAR 0 8
13753: PUSH
13754: LD_VAR 0 7
13758: PUSH
13759: LD_VAR 0 9
13763: PLUS
13764: ST_TO_ADDR
// if k > array then
13765: LD_VAR 0 8
13769: PUSH
13770: LD_VAR 0 1
13774: GREATER
13775: IFFALSE 13785
// k := 1 ;
13777: LD_ADDR_VAR 0 8
13781: PUSH
13782: LD_INT 1
13784: ST_TO_ADDR
// if not k then
13785: LD_VAR 0 8
13789: NOT
13790: IFFALSE 13802
// k := array ;
13792: LD_ADDR_VAR 0 8
13796: PUSH
13797: LD_VAR 0 1
13801: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13802: LD_ADDR_VAR 0 10
13806: PUSH
13807: LD_VAR 0 10
13811: PPUSH
13812: LD_VAR 0 8
13816: PPUSH
13817: LD_VAR 0 1
13821: PUSH
13822: LD_VAR 0 7
13826: ARRAY
13827: PPUSH
13828: CALL_OW 1
13832: ST_TO_ADDR
// end ;
13833: GO 13746
13835: POP
13836: POP
// array := tmp ;
13837: LD_ADDR_VAR 0 1
13841: PUSH
13842: LD_VAR 0 10
13846: ST_TO_ADDR
// end ;
13847: GO 13728
13849: POP
13850: POP
// result := array ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: LD_VAR 0 1
13860: ST_TO_ADDR
// end ;
13861: LD_VAR 0 5
13865: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
// result := 0 ;
13870: LD_ADDR_VAR 0 3
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// if not array or not value in array then
13878: LD_VAR 0 1
13882: NOT
13883: PUSH
13884: LD_VAR 0 2
13888: PUSH
13889: LD_VAR 0 1
13893: IN
13894: NOT
13895: OR
13896: IFFALSE 13900
// exit ;
13898: GO 13954
// for i = 1 to array do
13900: LD_ADDR_VAR 0 4
13904: PUSH
13905: DOUBLE
13906: LD_INT 1
13908: DEC
13909: ST_TO_ADDR
13910: LD_VAR 0 1
13914: PUSH
13915: FOR_TO
13916: IFFALSE 13952
// if value = array [ i ] then
13918: LD_VAR 0 2
13922: PUSH
13923: LD_VAR 0 1
13927: PUSH
13928: LD_VAR 0 4
13932: ARRAY
13933: EQUAL
13934: IFFALSE 13950
// begin result := i ;
13936: LD_ADDR_VAR 0 3
13940: PUSH
13941: LD_VAR 0 4
13945: ST_TO_ADDR
// exit ;
13946: POP
13947: POP
13948: GO 13954
// end ;
13950: GO 13915
13952: POP
13953: POP
// end ;
13954: LD_VAR 0 3
13958: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13959: LD_INT 0
13961: PPUSH
// vc_chassis := chassis ;
13962: LD_ADDR_OWVAR 37
13966: PUSH
13967: LD_VAR 0 1
13971: ST_TO_ADDR
// vc_engine := engine ;
13972: LD_ADDR_OWVAR 39
13976: PUSH
13977: LD_VAR 0 2
13981: ST_TO_ADDR
// vc_control := control ;
13982: LD_ADDR_OWVAR 38
13986: PUSH
13987: LD_VAR 0 3
13991: ST_TO_ADDR
// vc_weapon := weapon ;
13992: LD_ADDR_OWVAR 40
13996: PUSH
13997: LD_VAR 0 4
14001: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14002: LD_ADDR_OWVAR 41
14006: PUSH
14007: LD_VAR 0 5
14011: ST_TO_ADDR
// end ;
14012: LD_VAR 0 6
14016: RET
// export function WantPlant ( unit ) ; var task ; begin
14017: LD_INT 0
14019: PPUSH
14020: PPUSH
// result := false ;
14021: LD_ADDR_VAR 0 2
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 437
14043: ST_TO_ADDR
// if task then
14044: LD_VAR 0 3
14048: IFFALSE 14076
// if task [ 1 ] [ 1 ] = p then
14050: LD_VAR 0 3
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PUSH
14063: LD_STRING p
14065: EQUAL
14066: IFFALSE 14076
// result := true ;
14068: LD_ADDR_VAR 0 2
14072: PUSH
14073: LD_INT 1
14075: ST_TO_ADDR
// end ;
14076: LD_VAR 0 2
14080: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
// if pos < 1 then
14087: LD_VAR 0 2
14091: PUSH
14092: LD_INT 1
14094: LESS
14095: IFFALSE 14099
// exit ;
14097: GO 14402
// if pos = 1 then
14099: LD_VAR 0 2
14103: PUSH
14104: LD_INT 1
14106: EQUAL
14107: IFFALSE 14140
// result := Replace ( arr , pos [ 1 ] , value ) else
14109: LD_ADDR_VAR 0 4
14113: PUSH
14114: LD_VAR 0 1
14118: PPUSH
14119: LD_VAR 0 2
14123: PUSH
14124: LD_INT 1
14126: ARRAY
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: CALL_OW 1
14137: ST_TO_ADDR
14138: GO 14402
// begin tmp := arr ;
14140: LD_ADDR_VAR 0 6
14144: PUSH
14145: LD_VAR 0 1
14149: ST_TO_ADDR
// s_arr := [ tmp ] ;
14150: LD_ADDR_VAR 0 7
14154: PUSH
14155: LD_VAR 0 6
14159: PUSH
14160: EMPTY
14161: LIST
14162: ST_TO_ADDR
// for i = 1 to pos - 1 do
14163: LD_ADDR_VAR 0 5
14167: PUSH
14168: DOUBLE
14169: LD_INT 1
14171: DEC
14172: ST_TO_ADDR
14173: LD_VAR 0 2
14177: PUSH
14178: LD_INT 1
14180: MINUS
14181: PUSH
14182: FOR_TO
14183: IFFALSE 14228
// begin tmp := tmp [ pos [ i ] ] ;
14185: LD_ADDR_VAR 0 6
14189: PUSH
14190: LD_VAR 0 6
14194: PUSH
14195: LD_VAR 0 2
14199: PUSH
14200: LD_VAR 0 5
14204: ARRAY
14205: ARRAY
14206: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14207: LD_ADDR_VAR 0 7
14211: PUSH
14212: LD_VAR 0 7
14216: PUSH
14217: LD_VAR 0 6
14221: PUSH
14222: EMPTY
14223: LIST
14224: ADD
14225: ST_TO_ADDR
// end ;
14226: GO 14182
14228: POP
14229: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14230: LD_ADDR_VAR 0 6
14234: PUSH
14235: LD_VAR 0 6
14239: PPUSH
14240: LD_VAR 0 2
14244: PUSH
14245: LD_VAR 0 2
14249: ARRAY
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: CALL_OW 1
14260: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14261: LD_ADDR_VAR 0 7
14265: PUSH
14266: LD_VAR 0 7
14270: PPUSH
14271: LD_VAR 0 7
14275: PPUSH
14276: LD_VAR 0 6
14280: PPUSH
14281: CALL_OW 1
14285: ST_TO_ADDR
// for i = s_arr downto 2 do
14286: LD_ADDR_VAR 0 5
14290: PUSH
14291: DOUBLE
14292: LD_VAR 0 7
14296: INC
14297: ST_TO_ADDR
14298: LD_INT 2
14300: PUSH
14301: FOR_DOWNTO
14302: IFFALSE 14386
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14304: LD_ADDR_VAR 0 6
14308: PUSH
14309: LD_VAR 0 7
14313: PUSH
14314: LD_VAR 0 5
14318: PUSH
14319: LD_INT 1
14321: MINUS
14322: ARRAY
14323: PPUSH
14324: LD_VAR 0 2
14328: PUSH
14329: LD_VAR 0 5
14333: PUSH
14334: LD_INT 1
14336: MINUS
14337: ARRAY
14338: PPUSH
14339: LD_VAR 0 7
14343: PUSH
14344: LD_VAR 0 5
14348: ARRAY
14349: PPUSH
14350: CALL_OW 1
14354: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14355: LD_ADDR_VAR 0 7
14359: PUSH
14360: LD_VAR 0 7
14364: PPUSH
14365: LD_VAR 0 5
14369: PUSH
14370: LD_INT 1
14372: MINUS
14373: PPUSH
14374: LD_VAR 0 6
14378: PPUSH
14379: CALL_OW 1
14383: ST_TO_ADDR
// end ;
14384: GO 14301
14386: POP
14387: POP
// result := s_arr [ 1 ] ;
14388: LD_ADDR_VAR 0 4
14392: PUSH
14393: LD_VAR 0 7
14397: PUSH
14398: LD_INT 1
14400: ARRAY
14401: ST_TO_ADDR
// end ; end ;
14402: LD_VAR 0 4
14406: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14407: LD_INT 0
14409: PPUSH
14410: PPUSH
// if not list then
14411: LD_VAR 0 1
14415: NOT
14416: IFFALSE 14420
// exit ;
14418: GO 14511
// i := list [ pos1 ] ;
14420: LD_ADDR_VAR 0 5
14424: PUSH
14425: LD_VAR 0 1
14429: PUSH
14430: LD_VAR 0 2
14434: ARRAY
14435: ST_TO_ADDR
// if not i then
14436: LD_VAR 0 5
14440: NOT
14441: IFFALSE 14445
// exit ;
14443: GO 14511
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14445: LD_ADDR_VAR 0 1
14449: PUSH
14450: LD_VAR 0 1
14454: PPUSH
14455: LD_VAR 0 2
14459: PPUSH
14460: LD_VAR 0 1
14464: PUSH
14465: LD_VAR 0 3
14469: ARRAY
14470: PPUSH
14471: CALL_OW 1
14475: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: LD_VAR 0 1
14485: PPUSH
14486: LD_VAR 0 3
14490: PPUSH
14491: LD_VAR 0 5
14495: PPUSH
14496: CALL_OW 1
14500: ST_TO_ADDR
// result := list ;
14501: LD_ADDR_VAR 0 4
14505: PUSH
14506: LD_VAR 0 1
14510: ST_TO_ADDR
// end ;
14511: LD_VAR 0 4
14515: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14516: LD_INT 0
14518: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14519: LD_ADDR_VAR 0 5
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 250
14533: PPUSH
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 251
14543: PPUSH
14544: LD_VAR 0 2
14548: PPUSH
14549: LD_VAR 0 3
14553: PPUSH
14554: LD_VAR 0 4
14558: PPUSH
14559: CALL 14937 0 5
14563: ST_TO_ADDR
// end ;
14564: LD_VAR 0 5
14568: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14569: LD_INT 0
14571: PPUSH
14572: PPUSH
14573: PPUSH
14574: PPUSH
// if not list or not unit then
14575: LD_VAR 0 2
14579: NOT
14580: PUSH
14581: LD_VAR 0 1
14585: NOT
14586: OR
14587: IFFALSE 14591
// exit ;
14589: GO 14932
// result := [ ] ;
14591: LD_ADDR_VAR 0 5
14595: PUSH
14596: EMPTY
14597: ST_TO_ADDR
// for i in list do
14598: LD_ADDR_VAR 0 6
14602: PUSH
14603: LD_VAR 0 2
14607: PUSH
14608: FOR_IN
14609: IFFALSE 14827
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14611: LD_ADDR_VAR 0 8
14615: PUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: LD_VAR 0 6
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PPUSH
14630: LD_VAR 0 6
14634: PUSH
14635: LD_INT 2
14637: ARRAY
14638: PPUSH
14639: CALL_OW 297
14643: ST_TO_ADDR
// if not Count ( result ) then
14644: LD_VAR 0 5
14648: PPUSH
14649: CALL 11221 0 1
14653: NOT
14654: IFFALSE 14687
// begin result := Join ( result , [ i , tmp ] ) ;
14656: LD_ADDR_VAR 0 5
14660: PUSH
14661: LD_VAR 0 5
14665: PPUSH
14666: LD_VAR 0 6
14670: PUSH
14671: LD_VAR 0 8
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL 46830 0 2
14684: ST_TO_ADDR
// continue ;
14685: GO 14608
// end ; if result [ result ] [ 2 ] <= tmp then
14687: LD_VAR 0 5
14691: PUSH
14692: LD_VAR 0 5
14696: ARRAY
14697: PUSH
14698: LD_INT 2
14700: ARRAY
14701: PUSH
14702: LD_VAR 0 8
14706: LESSEQUAL
14707: IFFALSE 14740
// result := Join ( result , [ i , tmp ] ) else
14709: LD_ADDR_VAR 0 5
14713: PUSH
14714: LD_VAR 0 5
14718: PPUSH
14719: LD_VAR 0 6
14723: PUSH
14724: LD_VAR 0 8
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PPUSH
14733: CALL 46830 0 2
14737: ST_TO_ADDR
14738: GO 14825
// begin for j := 1 to Count ( result ) do
14740: LD_ADDR_VAR 0 7
14744: PUSH
14745: DOUBLE
14746: LD_INT 1
14748: DEC
14749: ST_TO_ADDR
14750: LD_VAR 0 5
14754: PPUSH
14755: CALL 11221 0 1
14759: PUSH
14760: FOR_TO
14761: IFFALSE 14823
// begin if tmp < result [ j ] [ 2 ] then
14763: LD_VAR 0 8
14767: PUSH
14768: LD_VAR 0 5
14772: PUSH
14773: LD_VAR 0 7
14777: ARRAY
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: LESS
14783: IFFALSE 14821
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14785: LD_ADDR_VAR 0 5
14789: PUSH
14790: LD_VAR 0 5
14794: PPUSH
14795: LD_VAR 0 7
14799: PPUSH
14800: LD_VAR 0 6
14804: PUSH
14805: LD_VAR 0 8
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 2
14818: ST_TO_ADDR
// break ;
14819: GO 14823
// end ; end ;
14821: GO 14760
14823: POP
14824: POP
// end ; end ;
14825: GO 14608
14827: POP
14828: POP
// if result and not asc then
14829: LD_VAR 0 5
14833: PUSH
14834: LD_VAR 0 3
14838: NOT
14839: AND
14840: IFFALSE 14857
// result := ReverseArray ( result ) ;
14842: LD_ADDR_VAR 0 5
14846: PUSH
14847: LD_VAR 0 5
14851: PPUSH
14852: CALL 42097 0 1
14856: ST_TO_ADDR
// tmp := [ ] ;
14857: LD_ADDR_VAR 0 8
14861: PUSH
14862: EMPTY
14863: ST_TO_ADDR
// if mode then
14864: LD_VAR 0 4
14868: IFFALSE 14932
// begin for i := 1 to result do
14870: LD_ADDR_VAR 0 6
14874: PUSH
14875: DOUBLE
14876: LD_INT 1
14878: DEC
14879: ST_TO_ADDR
14880: LD_VAR 0 5
14884: PUSH
14885: FOR_TO
14886: IFFALSE 14920
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14888: LD_ADDR_VAR 0 8
14892: PUSH
14893: LD_VAR 0 8
14897: PPUSH
14898: LD_VAR 0 5
14902: PUSH
14903: LD_VAR 0 6
14907: ARRAY
14908: PUSH
14909: LD_INT 1
14911: ARRAY
14912: PPUSH
14913: CALL 46830 0 2
14917: ST_TO_ADDR
14918: GO 14885
14920: POP
14921: POP
// result := tmp ;
14922: LD_ADDR_VAR 0 5
14926: PUSH
14927: LD_VAR 0 8
14931: ST_TO_ADDR
// end ; end ;
14932: LD_VAR 0 5
14936: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
// if not list then
14943: LD_VAR 0 3
14947: NOT
14948: IFFALSE 14952
// exit ;
14950: GO 15340
// result := [ ] ;
14952: LD_ADDR_VAR 0 6
14956: PUSH
14957: EMPTY
14958: ST_TO_ADDR
// for i in list do
14959: LD_ADDR_VAR 0 7
14963: PUSH
14964: LD_VAR 0 3
14968: PUSH
14969: FOR_IN
14970: IFFALSE 15172
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14972: LD_ADDR_VAR 0 9
14976: PUSH
14977: LD_VAR 0 7
14981: PPUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: CALL_OW 297
14996: ST_TO_ADDR
// if not result then
14997: LD_VAR 0 6
15001: NOT
15002: IFFALSE 15028
// result := [ [ i , tmp ] ] else
15004: LD_ADDR_VAR 0 6
15008: PUSH
15009: LD_VAR 0 7
15013: PUSH
15014: LD_VAR 0 9
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: ST_TO_ADDR
15026: GO 15170
// begin if result [ result ] [ 2 ] < tmp then
15028: LD_VAR 0 6
15032: PUSH
15033: LD_VAR 0 6
15037: ARRAY
15038: PUSH
15039: LD_INT 2
15041: ARRAY
15042: PUSH
15043: LD_VAR 0 9
15047: LESS
15048: IFFALSE 15090
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15050: LD_ADDR_VAR 0 6
15054: PUSH
15055: LD_VAR 0 6
15059: PPUSH
15060: LD_VAR 0 6
15064: PUSH
15065: LD_INT 1
15067: PLUS
15068: PPUSH
15069: LD_VAR 0 7
15073: PUSH
15074: LD_VAR 0 9
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 2
15087: ST_TO_ADDR
15088: GO 15170
// for j = 1 to result do
15090: LD_ADDR_VAR 0 8
15094: PUSH
15095: DOUBLE
15096: LD_INT 1
15098: DEC
15099: ST_TO_ADDR
15100: LD_VAR 0 6
15104: PUSH
15105: FOR_TO
15106: IFFALSE 15168
// begin if tmp < result [ j ] [ 2 ] then
15108: LD_VAR 0 9
15112: PUSH
15113: LD_VAR 0 6
15117: PUSH
15118: LD_VAR 0 8
15122: ARRAY
15123: PUSH
15124: LD_INT 2
15126: ARRAY
15127: LESS
15128: IFFALSE 15166
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15130: LD_ADDR_VAR 0 6
15134: PUSH
15135: LD_VAR 0 6
15139: PPUSH
15140: LD_VAR 0 8
15144: PPUSH
15145: LD_VAR 0 7
15149: PUSH
15150: LD_VAR 0 9
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PPUSH
15159: CALL_OW 2
15163: ST_TO_ADDR
// break ;
15164: GO 15168
// end ; end ;
15166: GO 15105
15168: POP
15169: POP
// end ; end ;
15170: GO 14969
15172: POP
15173: POP
// if result and not asc then
15174: LD_VAR 0 6
15178: PUSH
15179: LD_VAR 0 4
15183: NOT
15184: AND
15185: IFFALSE 15260
// begin tmp := result ;
15187: LD_ADDR_VAR 0 9
15191: PUSH
15192: LD_VAR 0 6
15196: ST_TO_ADDR
// for i = tmp downto 1 do
15197: LD_ADDR_VAR 0 7
15201: PUSH
15202: DOUBLE
15203: LD_VAR 0 9
15207: INC
15208: ST_TO_ADDR
15209: LD_INT 1
15211: PUSH
15212: FOR_DOWNTO
15213: IFFALSE 15258
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15215: LD_ADDR_VAR 0 6
15219: PUSH
15220: LD_VAR 0 6
15224: PPUSH
15225: LD_VAR 0 9
15229: PUSH
15230: LD_VAR 0 7
15234: MINUS
15235: PUSH
15236: LD_INT 1
15238: PLUS
15239: PPUSH
15240: LD_VAR 0 9
15244: PUSH
15245: LD_VAR 0 7
15249: ARRAY
15250: PPUSH
15251: CALL_OW 1
15255: ST_TO_ADDR
15256: GO 15212
15258: POP
15259: POP
// end ; tmp := [ ] ;
15260: LD_ADDR_VAR 0 9
15264: PUSH
15265: EMPTY
15266: ST_TO_ADDR
// if mode then
15267: LD_VAR 0 5
15271: IFFALSE 15340
// begin for i = 1 to result do
15273: LD_ADDR_VAR 0 7
15277: PUSH
15278: DOUBLE
15279: LD_INT 1
15281: DEC
15282: ST_TO_ADDR
15283: LD_VAR 0 6
15287: PUSH
15288: FOR_TO
15289: IFFALSE 15328
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15291: LD_ADDR_VAR 0 9
15295: PUSH
15296: LD_VAR 0 9
15300: PPUSH
15301: LD_VAR 0 7
15305: PPUSH
15306: LD_VAR 0 6
15310: PUSH
15311: LD_VAR 0 7
15315: ARRAY
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 1
15325: ST_TO_ADDR
15326: GO 15288
15328: POP
15329: POP
// result := tmp ;
15330: LD_ADDR_VAR 0 6
15334: PUSH
15335: LD_VAR 0 9
15339: ST_TO_ADDR
// end ; end ;
15340: LD_VAR 0 6
15344: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15345: LD_INT 0
15347: PPUSH
15348: PPUSH
15349: PPUSH
15350: PPUSH
15351: PPUSH
15352: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15353: LD_ADDR_VAR 0 5
15357: PUSH
15358: LD_INT 0
15360: PUSH
15361: LD_INT 0
15363: PUSH
15364: LD_INT 0
15366: PUSH
15367: EMPTY
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: ST_TO_ADDR
// if not x or not y then
15375: LD_VAR 0 2
15379: NOT
15380: PUSH
15381: LD_VAR 0 3
15385: NOT
15386: OR
15387: IFFALSE 15391
// exit ;
15389: GO 17041
// if not range then
15391: LD_VAR 0 4
15395: NOT
15396: IFFALSE 15406
// range := 10 ;
15398: LD_ADDR_VAR 0 4
15402: PUSH
15403: LD_INT 10
15405: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15406: LD_ADDR_VAR 0 8
15410: PUSH
15411: LD_INT 81
15413: PUSH
15414: LD_VAR 0 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 92
15425: PUSH
15426: LD_VAR 0 2
15430: PUSH
15431: LD_VAR 0 3
15435: PUSH
15436: LD_VAR 0 4
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 3
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: ST_TO_ADDR
// if not tmp then
15474: LD_VAR 0 8
15478: NOT
15479: IFFALSE 15483
// exit ;
15481: GO 17041
// for i in tmp do
15483: LD_ADDR_VAR 0 6
15487: PUSH
15488: LD_VAR 0 8
15492: PUSH
15493: FOR_IN
15494: IFFALSE 17016
// begin points := [ 0 , 0 , 0 ] ;
15496: LD_ADDR_VAR 0 9
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: LD_INT 0
15506: PUSH
15507: LD_INT 0
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: ST_TO_ADDR
// bpoints := 1 ;
15515: LD_ADDR_VAR 0 10
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15523: LD_VAR 0 6
15527: PPUSH
15528: CALL_OW 247
15532: PUSH
15533: LD_INT 1
15535: DOUBLE
15536: EQUAL
15537: IFTRUE 15541
15539: GO 16119
15541: POP
// begin if GetClass ( i ) = 1 then
15542: LD_VAR 0 6
15546: PPUSH
15547: CALL_OW 257
15551: PUSH
15552: LD_INT 1
15554: EQUAL
15555: IFFALSE 15576
// points := [ 10 , 5 , 3 ] ;
15557: LD_ADDR_VAR 0 9
15561: PUSH
15562: LD_INT 10
15564: PUSH
15565: LD_INT 5
15567: PUSH
15568: LD_INT 3
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15576: LD_VAR 0 6
15580: PPUSH
15581: CALL_OW 257
15585: PUSH
15586: LD_INT 2
15588: PUSH
15589: LD_INT 3
15591: PUSH
15592: LD_INT 4
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: LIST
15599: IN
15600: IFFALSE 15621
// points := [ 3 , 2 , 1 ] ;
15602: LD_ADDR_VAR 0 9
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15621: LD_VAR 0 6
15625: PPUSH
15626: CALL_OW 257
15630: PUSH
15631: LD_INT 5
15633: EQUAL
15634: IFFALSE 15655
// points := [ 130 , 5 , 2 ] ;
15636: LD_ADDR_VAR 0 9
15640: PUSH
15641: LD_INT 130
15643: PUSH
15644: LD_INT 5
15646: PUSH
15647: LD_INT 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: LIST
15654: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15655: LD_VAR 0 6
15659: PPUSH
15660: CALL_OW 257
15664: PUSH
15665: LD_INT 8
15667: EQUAL
15668: IFFALSE 15689
// points := [ 35 , 35 , 30 ] ;
15670: LD_ADDR_VAR 0 9
15674: PUSH
15675: LD_INT 35
15677: PUSH
15678: LD_INT 35
15680: PUSH
15681: LD_INT 30
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15689: LD_VAR 0 6
15693: PPUSH
15694: CALL_OW 257
15698: PUSH
15699: LD_INT 9
15701: EQUAL
15702: IFFALSE 15723
// points := [ 20 , 55 , 40 ] ;
15704: LD_ADDR_VAR 0 9
15708: PUSH
15709: LD_INT 20
15711: PUSH
15712: LD_INT 55
15714: PUSH
15715: LD_INT 40
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: LIST
15722: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15723: LD_VAR 0 6
15727: PPUSH
15728: CALL_OW 257
15732: PUSH
15733: LD_INT 12
15735: PUSH
15736: LD_INT 16
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: IN
15743: IFFALSE 15764
// points := [ 5 , 3 , 2 ] ;
15745: LD_ADDR_VAR 0 9
15749: PUSH
15750: LD_INT 5
15752: PUSH
15753: LD_INT 3
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: LIST
15763: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15764: LD_VAR 0 6
15768: PPUSH
15769: CALL_OW 257
15773: PUSH
15774: LD_INT 17
15776: EQUAL
15777: IFFALSE 15798
// points := [ 100 , 50 , 75 ] ;
15779: LD_ADDR_VAR 0 9
15783: PUSH
15784: LD_INT 100
15786: PUSH
15787: LD_INT 50
15789: PUSH
15790: LD_INT 75
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15798: LD_VAR 0 6
15802: PPUSH
15803: CALL_OW 257
15807: PUSH
15808: LD_INT 15
15810: EQUAL
15811: IFFALSE 15832
// points := [ 10 , 5 , 3 ] ;
15813: LD_ADDR_VAR 0 9
15817: PUSH
15818: LD_INT 10
15820: PUSH
15821: LD_INT 5
15823: PUSH
15824: LD_INT 3
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15832: LD_VAR 0 6
15836: PPUSH
15837: CALL_OW 257
15841: PUSH
15842: LD_INT 14
15844: EQUAL
15845: IFFALSE 15866
// points := [ 10 , 0 , 0 ] ;
15847: LD_ADDR_VAR 0 9
15851: PUSH
15852: LD_INT 10
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15866: LD_VAR 0 6
15870: PPUSH
15871: CALL_OW 257
15875: PUSH
15876: LD_INT 11
15878: EQUAL
15879: IFFALSE 15900
// points := [ 30 , 10 , 5 ] ;
15881: LD_ADDR_VAR 0 9
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 10
15891: PUSH
15892: LD_INT 5
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_INT 5
15907: PPUSH
15908: CALL_OW 321
15912: PUSH
15913: LD_INT 2
15915: EQUAL
15916: IFFALSE 15933
// bpoints := bpoints * 1.8 ;
15918: LD_ADDR_VAR 0 10
15922: PUSH
15923: LD_VAR 0 10
15927: PUSH
15928: LD_REAL  1.80000000000000E+0000
15931: MUL
15932: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15933: LD_VAR 0 6
15937: PPUSH
15938: CALL_OW 257
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 3
15951: PUSH
15952: LD_INT 4
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: IN
15961: PUSH
15962: LD_VAR 0 1
15966: PPUSH
15967: LD_INT 51
15969: PPUSH
15970: CALL_OW 321
15974: PUSH
15975: LD_INT 2
15977: EQUAL
15978: AND
15979: IFFALSE 15996
// bpoints := bpoints * 1.2 ;
15981: LD_ADDR_VAR 0 10
15985: PUSH
15986: LD_VAR 0 10
15990: PUSH
15991: LD_REAL  1.20000000000000E+0000
15994: MUL
15995: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15996: LD_VAR 0 6
16000: PPUSH
16001: CALL_OW 257
16005: PUSH
16006: LD_INT 5
16008: PUSH
16009: LD_INT 7
16011: PUSH
16012: LD_INT 9
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: IN
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: LD_INT 52
16028: PPUSH
16029: CALL_OW 321
16033: PUSH
16034: LD_INT 2
16036: EQUAL
16037: AND
16038: IFFALSE 16055
// bpoints := bpoints * 1.5 ;
16040: LD_ADDR_VAR 0 10
16044: PUSH
16045: LD_VAR 0 10
16049: PUSH
16050: LD_REAL  1.50000000000000E+0000
16053: MUL
16054: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16055: LD_VAR 0 1
16059: PPUSH
16060: LD_INT 66
16062: PPUSH
16063: CALL_OW 321
16067: PUSH
16068: LD_INT 2
16070: EQUAL
16071: IFFALSE 16088
// bpoints := bpoints * 1.1 ;
16073: LD_ADDR_VAR 0 10
16077: PUSH
16078: LD_VAR 0 10
16082: PUSH
16083: LD_REAL  1.10000000000000E+0000
16086: MUL
16087: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16088: LD_ADDR_VAR 0 10
16092: PUSH
16093: LD_VAR 0 10
16097: PUSH
16098: LD_VAR 0 6
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 259
16110: PUSH
16111: LD_REAL  1.15000000000000E+0000
16114: MUL
16115: MUL
16116: ST_TO_ADDR
// end ; unit_vehicle :
16117: GO 16945
16119: LD_INT 2
16121: DOUBLE
16122: EQUAL
16123: IFTRUE 16127
16125: GO 16933
16127: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16128: LD_VAR 0 6
16132: PPUSH
16133: CALL_OW 264
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: LD_INT 42
16143: PUSH
16144: LD_INT 24
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: LIST
16151: IN
16152: IFFALSE 16173
// points := [ 25 , 5 , 3 ] ;
16154: LD_ADDR_VAR 0 9
16158: PUSH
16159: LD_INT 25
16161: PUSH
16162: LD_INT 5
16164: PUSH
16165: LD_INT 3
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16173: LD_VAR 0 6
16177: PPUSH
16178: CALL_OW 264
16182: PUSH
16183: LD_INT 4
16185: PUSH
16186: LD_INT 43
16188: PUSH
16189: LD_INT 25
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: IN
16197: IFFALSE 16218
// points := [ 40 , 15 , 5 ] ;
16199: LD_ADDR_VAR 0 9
16203: PUSH
16204: LD_INT 40
16206: PUSH
16207: LD_INT 15
16209: PUSH
16210: LD_INT 5
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: LIST
16217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16218: LD_VAR 0 6
16222: PPUSH
16223: CALL_OW 264
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: LD_INT 23
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: IN
16238: IFFALSE 16259
// points := [ 7 , 25 , 8 ] ;
16240: LD_ADDR_VAR 0 9
16244: PUSH
16245: LD_INT 7
16247: PUSH
16248: LD_INT 25
16250: PUSH
16251: LD_INT 8
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16259: LD_VAR 0 6
16263: PPUSH
16264: CALL_OW 264
16268: PUSH
16269: LD_INT 5
16271: PUSH
16272: LD_INT 27
16274: PUSH
16275: LD_INT 44
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: LIST
16282: IN
16283: IFFALSE 16304
// points := [ 14 , 50 , 16 ] ;
16285: LD_ADDR_VAR 0 9
16289: PUSH
16290: LD_INT 14
16292: PUSH
16293: LD_INT 50
16295: PUSH
16296: LD_INT 16
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16304: LD_VAR 0 6
16308: PPUSH
16309: CALL_OW 264
16313: PUSH
16314: LD_INT 6
16316: PUSH
16317: LD_INT 46
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: IN
16324: IFFALSE 16345
// points := [ 32 , 120 , 70 ] ;
16326: LD_ADDR_VAR 0 9
16330: PUSH
16331: LD_INT 32
16333: PUSH
16334: LD_INT 120
16336: PUSH
16337: LD_INT 70
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16345: LD_VAR 0 6
16349: PPUSH
16350: CALL_OW 264
16354: PUSH
16355: LD_INT 7
16357: PUSH
16358: LD_INT 28
16360: PUSH
16361: LD_INT 45
16363: PUSH
16364: LD_INT 92
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: IN
16373: IFFALSE 16394
// points := [ 35 , 20 , 45 ] ;
16375: LD_ADDR_VAR 0 9
16379: PUSH
16380: LD_INT 35
16382: PUSH
16383: LD_INT 20
16385: PUSH
16386: LD_INT 45
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16394: LD_VAR 0 6
16398: PPUSH
16399: CALL_OW 264
16403: PUSH
16404: LD_INT 47
16406: PUSH
16407: EMPTY
16408: LIST
16409: IN
16410: IFFALSE 16431
// points := [ 67 , 45 , 75 ] ;
16412: LD_ADDR_VAR 0 9
16416: PUSH
16417: LD_INT 67
16419: PUSH
16420: LD_INT 45
16422: PUSH
16423: LD_INT 75
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16431: LD_VAR 0 6
16435: PPUSH
16436: CALL_OW 264
16440: PUSH
16441: LD_INT 26
16443: PUSH
16444: EMPTY
16445: LIST
16446: IN
16447: IFFALSE 16468
// points := [ 120 , 30 , 80 ] ;
16449: LD_ADDR_VAR 0 9
16453: PUSH
16454: LD_INT 120
16456: PUSH
16457: LD_INT 30
16459: PUSH
16460: LD_INT 80
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16468: LD_VAR 0 6
16472: PPUSH
16473: CALL_OW 264
16477: PUSH
16478: LD_INT 22
16480: PUSH
16481: EMPTY
16482: LIST
16483: IN
16484: IFFALSE 16505
// points := [ 40 , 1 , 1 ] ;
16486: LD_ADDR_VAR 0 9
16490: PUSH
16491: LD_INT 40
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16505: LD_VAR 0 6
16509: PPUSH
16510: CALL_OW 264
16514: PUSH
16515: LD_INT 29
16517: PUSH
16518: EMPTY
16519: LIST
16520: IN
16521: IFFALSE 16542
// points := [ 70 , 200 , 400 ] ;
16523: LD_ADDR_VAR 0 9
16527: PUSH
16528: LD_INT 70
16530: PUSH
16531: LD_INT 200
16533: PUSH
16534: LD_INT 400
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16542: LD_VAR 0 6
16546: PPUSH
16547: CALL_OW 264
16551: PUSH
16552: LD_INT 14
16554: PUSH
16555: LD_INT 53
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: IN
16562: IFFALSE 16583
// points := [ 40 , 10 , 20 ] ;
16564: LD_ADDR_VAR 0 9
16568: PUSH
16569: LD_INT 40
16571: PUSH
16572: LD_INT 10
16574: PUSH
16575: LD_INT 20
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16583: LD_VAR 0 6
16587: PPUSH
16588: CALL_OW 264
16592: PUSH
16593: LD_INT 9
16595: PUSH
16596: EMPTY
16597: LIST
16598: IN
16599: IFFALSE 16620
// points := [ 5 , 70 , 20 ] ;
16601: LD_ADDR_VAR 0 9
16605: PUSH
16606: LD_INT 5
16608: PUSH
16609: LD_INT 70
16611: PUSH
16612: LD_INT 20
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: LIST
16619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16620: LD_VAR 0 6
16624: PPUSH
16625: CALL_OW 264
16629: PUSH
16630: LD_INT 10
16632: PUSH
16633: EMPTY
16634: LIST
16635: IN
16636: IFFALSE 16657
// points := [ 35 , 110 , 70 ] ;
16638: LD_ADDR_VAR 0 9
16642: PUSH
16643: LD_INT 35
16645: PUSH
16646: LD_INT 110
16648: PUSH
16649: LD_INT 70
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16657: LD_VAR 0 6
16661: PPUSH
16662: CALL_OW 265
16666: PUSH
16667: LD_INT 25
16669: EQUAL
16670: IFFALSE 16691
// points := [ 80 , 65 , 100 ] ;
16672: LD_ADDR_VAR 0 9
16676: PUSH
16677: LD_INT 80
16679: PUSH
16680: LD_INT 65
16682: PUSH
16683: LD_INT 100
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16691: LD_VAR 0 6
16695: PPUSH
16696: CALL_OW 263
16700: PUSH
16701: LD_INT 1
16703: EQUAL
16704: IFFALSE 16739
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16706: LD_ADDR_VAR 0 10
16710: PUSH
16711: LD_VAR 0 10
16715: PUSH
16716: LD_VAR 0 6
16720: PPUSH
16721: CALL_OW 311
16725: PPUSH
16726: LD_INT 3
16728: PPUSH
16729: CALL_OW 259
16733: PUSH
16734: LD_INT 4
16736: MUL
16737: MUL
16738: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16739: LD_VAR 0 6
16743: PPUSH
16744: CALL_OW 263
16748: PUSH
16749: LD_INT 2
16751: EQUAL
16752: IFFALSE 16803
// begin j := IsControledBy ( i ) ;
16754: LD_ADDR_VAR 0 7
16758: PUSH
16759: LD_VAR 0 6
16763: PPUSH
16764: CALL_OW 312
16768: ST_TO_ADDR
// if j then
16769: LD_VAR 0 7
16773: IFFALSE 16803
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16775: LD_ADDR_VAR 0 10
16779: PUSH
16780: LD_VAR 0 10
16784: PUSH
16785: LD_VAR 0 7
16789: PPUSH
16790: LD_INT 3
16792: PPUSH
16793: CALL_OW 259
16797: PUSH
16798: LD_INT 3
16800: MUL
16801: MUL
16802: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16803: LD_VAR 0 6
16807: PPUSH
16808: CALL_OW 264
16812: PUSH
16813: LD_INT 5
16815: PUSH
16816: LD_INT 6
16818: PUSH
16819: LD_INT 46
16821: PUSH
16822: LD_INT 44
16824: PUSH
16825: LD_INT 47
16827: PUSH
16828: LD_INT 45
16830: PUSH
16831: LD_INT 28
16833: PUSH
16834: LD_INT 7
16836: PUSH
16837: LD_INT 27
16839: PUSH
16840: LD_INT 29
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: IN
16855: PUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_INT 52
16863: PPUSH
16864: CALL_OW 321
16868: PUSH
16869: LD_INT 2
16871: EQUAL
16872: AND
16873: IFFALSE 16890
// bpoints := bpoints * 1.2 ;
16875: LD_ADDR_VAR 0 10
16879: PUSH
16880: LD_VAR 0 10
16884: PUSH
16885: LD_REAL  1.20000000000000E+0000
16888: MUL
16889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16890: LD_VAR 0 6
16894: PPUSH
16895: CALL_OW 264
16899: PUSH
16900: LD_INT 6
16902: PUSH
16903: LD_INT 46
16905: PUSH
16906: LD_INT 47
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: IN
16914: IFFALSE 16931
// bpoints := bpoints * 1.2 ;
16916: LD_ADDR_VAR 0 10
16920: PUSH
16921: LD_VAR 0 10
16925: PUSH
16926: LD_REAL  1.20000000000000E+0000
16929: MUL
16930: ST_TO_ADDR
// end ; unit_building :
16931: GO 16945
16933: LD_INT 3
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 16944
16941: POP
// ; end ;
16942: GO 16945
16944: POP
// for j = 1 to 3 do
16945: LD_ADDR_VAR 0 7
16949: PUSH
16950: DOUBLE
16951: LD_INT 1
16953: DEC
16954: ST_TO_ADDR
16955: LD_INT 3
16957: PUSH
16958: FOR_TO
16959: IFFALSE 17012
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16961: LD_ADDR_VAR 0 5
16965: PUSH
16966: LD_VAR 0 5
16970: PPUSH
16971: LD_VAR 0 7
16975: PPUSH
16976: LD_VAR 0 5
16980: PUSH
16981: LD_VAR 0 7
16985: ARRAY
16986: PUSH
16987: LD_VAR 0 9
16991: PUSH
16992: LD_VAR 0 7
16996: ARRAY
16997: PUSH
16998: LD_VAR 0 10
17002: MUL
17003: PLUS
17004: PPUSH
17005: CALL_OW 1
17009: ST_TO_ADDR
17010: GO 16958
17012: POP
17013: POP
// end ;
17014: GO 15493
17016: POP
17017: POP
// result := Replace ( result , 4 , tmp ) ;
17018: LD_ADDR_VAR 0 5
17022: PUSH
17023: LD_VAR 0 5
17027: PPUSH
17028: LD_INT 4
17030: PPUSH
17031: LD_VAR 0 8
17035: PPUSH
17036: CALL_OW 1
17040: ST_TO_ADDR
// end ;
17041: LD_VAR 0 5
17045: RET
// export function DangerAtRange ( unit , range ) ; begin
17046: LD_INT 0
17048: PPUSH
// if not unit then
17049: LD_VAR 0 1
17053: NOT
17054: IFFALSE 17058
// exit ;
17056: GO 17103
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17058: LD_ADDR_VAR 0 3
17062: PUSH
17063: LD_VAR 0 1
17067: PPUSH
17068: CALL_OW 255
17072: PPUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 250
17082: PPUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 251
17092: PPUSH
17093: LD_VAR 0 2
17097: PPUSH
17098: CALL 15345 0 4
17102: ST_TO_ADDR
// end ;
17103: LD_VAR 0 3
17107: RET
// export function DangerInArea ( side , area ) ; begin
17108: LD_INT 0
17110: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17111: LD_ADDR_VAR 0 3
17115: PUSH
17116: LD_VAR 0 2
17120: PPUSH
17121: LD_INT 81
17123: PUSH
17124: LD_VAR 0 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 70
17137: ST_TO_ADDR
// end ;
17138: LD_VAR 0 3
17142: RET
// export function IsExtension ( b ) ; begin
17143: LD_INT 0
17145: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17146: LD_ADDR_VAR 0 2
17150: PUSH
17151: LD_VAR 0 1
17155: PUSH
17156: LD_INT 23
17158: PUSH
17159: LD_INT 20
17161: PUSH
17162: LD_INT 22
17164: PUSH
17165: LD_INT 17
17167: PUSH
17168: LD_INT 24
17170: PUSH
17171: LD_INT 21
17173: PUSH
17174: LD_INT 19
17176: PUSH
17177: LD_INT 16
17179: PUSH
17180: LD_INT 25
17182: PUSH
17183: LD_INT 18
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: IN
17198: ST_TO_ADDR
// end ;
17199: LD_VAR 0 2
17203: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
17208: PPUSH
// result := [ ] ;
17209: LD_ADDR_VAR 0 4
17213: PUSH
17214: EMPTY
17215: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17216: LD_ADDR_VAR 0 5
17220: PUSH
17221: LD_VAR 0 2
17225: PPUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 70
17240: ST_TO_ADDR
// if not tmp then
17241: LD_VAR 0 5
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17314
// if checkLink then
17250: LD_VAR 0 3
17254: IFFALSE 17304
// begin for i in tmp do
17256: LD_ADDR_VAR 0 6
17260: PUSH
17261: LD_VAR 0 5
17265: PUSH
17266: FOR_IN
17267: IFFALSE 17302
// if GetBase ( i ) <> base then
17269: LD_VAR 0 6
17273: PPUSH
17274: CALL_OW 274
17278: PUSH
17279: LD_VAR 0 1
17283: NONEQUAL
17284: IFFALSE 17300
// ComLinkToBase ( base , i ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_VAR 0 6
17295: PPUSH
17296: CALL_OW 169
17300: GO 17266
17302: POP
17303: POP
// end ; result := tmp ;
17304: LD_ADDR_VAR 0 4
17308: PUSH
17309: LD_VAR 0 5
17313: ST_TO_ADDR
// end ;
17314: LD_VAR 0 4
17318: RET
// export function ComComplete ( units , b ) ; var i ; begin
17319: LD_INT 0
17321: PPUSH
17322: PPUSH
// if not units then
17323: LD_VAR 0 1
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17422
// for i in units do
17332: LD_ADDR_VAR 0 4
17336: PUSH
17337: LD_VAR 0 1
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17420
// if BuildingStatus ( b ) = bs_build then
17345: LD_VAR 0 2
17349: PPUSH
17350: CALL_OW 461
17354: PUSH
17355: LD_INT 1
17357: EQUAL
17358: IFFALSE 17418
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17360: LD_VAR 0 4
17364: PPUSH
17365: LD_STRING h
17367: PUSH
17368: LD_VAR 0 2
17372: PPUSH
17373: CALL_OW 250
17377: PUSH
17378: LD_VAR 0 2
17382: PPUSH
17383: CALL_OW 251
17387: PUSH
17388: LD_VAR 0 2
17392: PUSH
17393: LD_INT 0
17395: PUSH
17396: LD_INT 0
17398: PUSH
17399: LD_INT 0
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: PUSH
17411: EMPTY
17412: LIST
17413: PPUSH
17414: CALL_OW 446
17418: GO 17342
17420: POP
17421: POP
// end ;
17422: LD_VAR 0 3
17426: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
17434: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17435: LD_VAR 0 1
17439: NOT
17440: PUSH
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 263
17450: PUSH
17451: LD_INT 2
17453: NONEQUAL
17454: OR
17455: IFFALSE 17459
// exit ;
17457: GO 17775
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17459: LD_ADDR_VAR 0 6
17463: PUSH
17464: LD_INT 22
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 255
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: LD_INT 30
17486: PUSH
17487: LD_INT 36
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 34
17496: PUSH
17497: LD_INT 31
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 69
17517: ST_TO_ADDR
// if not tmp then
17518: LD_VAR 0 6
17522: NOT
17523: IFFALSE 17527
// exit ;
17525: GO 17775
// result := [ ] ;
17527: LD_ADDR_VAR 0 2
17531: PUSH
17532: EMPTY
17533: ST_TO_ADDR
// for i in tmp do
17534: LD_ADDR_VAR 0 3
17538: PUSH
17539: LD_VAR 0 6
17543: PUSH
17544: FOR_IN
17545: IFFALSE 17616
// begin t := UnitsInside ( i ) ;
17547: LD_ADDR_VAR 0 4
17551: PUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: CALL_OW 313
17561: ST_TO_ADDR
// if t then
17562: LD_VAR 0 4
17566: IFFALSE 17614
// for j in t do
17568: LD_ADDR_VAR 0 7
17572: PUSH
17573: LD_VAR 0 4
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17612
// result := Replace ( result , result + 1 , j ) ;
17581: LD_ADDR_VAR 0 2
17585: PUSH
17586: LD_VAR 0 2
17590: PPUSH
17591: LD_VAR 0 2
17595: PUSH
17596: LD_INT 1
17598: PLUS
17599: PPUSH
17600: LD_VAR 0 7
17604: PPUSH
17605: CALL_OW 1
17609: ST_TO_ADDR
17610: GO 17578
17612: POP
17613: POP
// end ;
17614: GO 17544
17616: POP
17617: POP
// if not result then
17618: LD_VAR 0 2
17622: NOT
17623: IFFALSE 17627
// exit ;
17625: GO 17775
// mech := result [ 1 ] ;
17627: LD_ADDR_VAR 0 5
17631: PUSH
17632: LD_VAR 0 2
17636: PUSH
17637: LD_INT 1
17639: ARRAY
17640: ST_TO_ADDR
// if result > 1 then
17641: LD_VAR 0 2
17645: PUSH
17646: LD_INT 1
17648: GREATER
17649: IFFALSE 17761
// begin for i = 2 to result do
17651: LD_ADDR_VAR 0 3
17655: PUSH
17656: DOUBLE
17657: LD_INT 2
17659: DEC
17660: ST_TO_ADDR
17661: LD_VAR 0 2
17665: PUSH
17666: FOR_TO
17667: IFFALSE 17759
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17669: LD_ADDR_VAR 0 4
17673: PUSH
17674: LD_VAR 0 2
17678: PUSH
17679: LD_VAR 0 3
17683: ARRAY
17684: PPUSH
17685: LD_INT 3
17687: PPUSH
17688: CALL_OW 259
17692: PUSH
17693: LD_VAR 0 2
17697: PUSH
17698: LD_VAR 0 3
17702: ARRAY
17703: PPUSH
17704: CALL_OW 432
17708: MINUS
17709: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17710: LD_VAR 0 4
17714: PUSH
17715: LD_VAR 0 5
17719: PPUSH
17720: LD_INT 3
17722: PPUSH
17723: CALL_OW 259
17727: PUSH
17728: LD_VAR 0 5
17732: PPUSH
17733: CALL_OW 432
17737: MINUS
17738: GREATEREQUAL
17739: IFFALSE 17757
// mech := result [ i ] ;
17741: LD_ADDR_VAR 0 5
17745: PUSH
17746: LD_VAR 0 2
17750: PUSH
17751: LD_VAR 0 3
17755: ARRAY
17756: ST_TO_ADDR
// end ;
17757: GO 17666
17759: POP
17760: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17761: LD_VAR 0 1
17765: PPUSH
17766: LD_VAR 0 5
17770: PPUSH
17771: CALL_OW 135
// end ;
17775: LD_VAR 0 2
17779: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17780: LD_INT 0
17782: PPUSH
17783: PPUSH
17784: PPUSH
17785: PPUSH
17786: PPUSH
17787: PPUSH
17788: PPUSH
17789: PPUSH
17790: PPUSH
17791: PPUSH
17792: PPUSH
17793: PPUSH
17794: PPUSH
// result := [ ] ;
17795: LD_ADDR_VAR 0 7
17799: PUSH
17800: EMPTY
17801: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL_OW 266
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: IN
17822: NOT
17823: IFFALSE 17827
// exit ;
17825: GO 19461
// if name then
17827: LD_VAR 0 3
17831: IFFALSE 17847
// SetBName ( base_dep , name ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_VAR 0 3
17842: PPUSH
17843: CALL_OW 500
// base := GetBase ( base_dep ) ;
17847: LD_ADDR_VAR 0 15
17851: PUSH
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL_OW 274
17861: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17862: LD_ADDR_VAR 0 16
17866: PUSH
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL_OW 255
17876: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17877: LD_ADDR_VAR 0 17
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 248
17891: ST_TO_ADDR
// if sources then
17892: LD_VAR 0 5
17896: IFFALSE 17943
// for i = 1 to 3 do
17898: LD_ADDR_VAR 0 8
17902: PUSH
17903: DOUBLE
17904: LD_INT 1
17906: DEC
17907: ST_TO_ADDR
17908: LD_INT 3
17910: PUSH
17911: FOR_TO
17912: IFFALSE 17941
// AddResourceType ( base , i , sources [ i ] ) ;
17914: LD_VAR 0 15
17918: PPUSH
17919: LD_VAR 0 8
17923: PPUSH
17924: LD_VAR 0 5
17928: PUSH
17929: LD_VAR 0 8
17933: ARRAY
17934: PPUSH
17935: CALL_OW 276
17939: GO 17911
17941: POP
17942: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17943: LD_ADDR_VAR 0 18
17947: PUSH
17948: LD_VAR 0 15
17952: PPUSH
17953: LD_VAR 0 2
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL 17204 0 3
17965: ST_TO_ADDR
// InitHc ;
17966: CALL_OW 19
// InitUc ;
17970: CALL_OW 18
// uc_side := side ;
17974: LD_ADDR_OWVAR 20
17978: PUSH
17979: LD_VAR 0 16
17983: ST_TO_ADDR
// uc_nation := nation ;
17984: LD_ADDR_OWVAR 21
17988: PUSH
17989: LD_VAR 0 17
17993: ST_TO_ADDR
// if buildings then
17994: LD_VAR 0 18
17998: IFFALSE 19320
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18000: LD_ADDR_VAR 0 19
18004: PUSH
18005: LD_VAR 0 18
18009: PPUSH
18010: LD_INT 2
18012: PUSH
18013: LD_INT 30
18015: PUSH
18016: LD_INT 29
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 30
18025: PUSH
18026: LD_INT 30
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: PPUSH
18038: CALL_OW 72
18042: ST_TO_ADDR
// if tmp then
18043: LD_VAR 0 19
18047: IFFALSE 18095
// for i in tmp do
18049: LD_ADDR_VAR 0 8
18053: PUSH
18054: LD_VAR 0 19
18058: PUSH
18059: FOR_IN
18060: IFFALSE 18093
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18062: LD_VAR 0 8
18066: PPUSH
18067: CALL_OW 250
18071: PPUSH
18072: LD_VAR 0 8
18076: PPUSH
18077: CALL_OW 251
18081: PPUSH
18082: LD_VAR 0 16
18086: PPUSH
18087: CALL_OW 441
18091: GO 18059
18093: POP
18094: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18095: LD_VAR 0 18
18099: PPUSH
18100: LD_INT 2
18102: PUSH
18103: LD_INT 30
18105: PUSH
18106: LD_INT 32
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 30
18115: PUSH
18116: LD_INT 33
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: PPUSH
18128: CALL_OW 72
18132: IFFALSE 18220
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18134: LD_ADDR_VAR 0 8
18138: PUSH
18139: LD_VAR 0 18
18143: PPUSH
18144: LD_INT 2
18146: PUSH
18147: LD_INT 30
18149: PUSH
18150: LD_INT 32
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 30
18159: PUSH
18160: LD_INT 33
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: PPUSH
18172: CALL_OW 72
18176: PUSH
18177: FOR_IN
18178: IFFALSE 18218
// begin if not GetBWeapon ( i ) then
18180: LD_VAR 0 8
18184: PPUSH
18185: CALL_OW 269
18189: NOT
18190: IFFALSE 18216
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18192: LD_VAR 0 8
18196: PPUSH
18197: LD_VAR 0 8
18201: PPUSH
18202: LD_VAR 0 2
18206: PPUSH
18207: CALL 19466 0 2
18211: PPUSH
18212: CALL_OW 431
// end ;
18216: GO 18177
18218: POP
18219: POP
// end ; for i = 1 to personel do
18220: LD_ADDR_VAR 0 8
18224: PUSH
18225: DOUBLE
18226: LD_INT 1
18228: DEC
18229: ST_TO_ADDR
18230: LD_VAR 0 6
18234: PUSH
18235: FOR_TO
18236: IFFALSE 19300
// begin if i > 4 then
18238: LD_VAR 0 8
18242: PUSH
18243: LD_INT 4
18245: GREATER
18246: IFFALSE 18250
// break ;
18248: GO 19300
// case i of 1 :
18250: LD_VAR 0 8
18254: PUSH
18255: LD_INT 1
18257: DOUBLE
18258: EQUAL
18259: IFTRUE 18263
18261: GO 18343
18263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18264: LD_ADDR_VAR 0 12
18268: PUSH
18269: LD_VAR 0 18
18273: PPUSH
18274: LD_INT 22
18276: PUSH
18277: LD_VAR 0 16
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 58
18288: PUSH
18289: EMPTY
18290: LIST
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 32
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 30
18307: PUSH
18308: LD_INT 4
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 30
18317: PUSH
18318: LD_INT 5
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: PPUSH
18336: CALL_OW 72
18340: ST_TO_ADDR
18341: GO 18565
18343: LD_INT 2
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18413
18351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18352: LD_ADDR_VAR 0 12
18356: PUSH
18357: LD_VAR 0 18
18361: PPUSH
18362: LD_INT 22
18364: PUSH
18365: LD_VAR 0 16
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 30
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 30
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PPUSH
18406: CALL_OW 72
18410: ST_TO_ADDR
18411: GO 18565
18413: LD_INT 3
18415: DOUBLE
18416: EQUAL
18417: IFTRUE 18421
18419: GO 18483
18421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18422: LD_ADDR_VAR 0 12
18426: PUSH
18427: LD_VAR 0 18
18431: PPUSH
18432: LD_INT 22
18434: PUSH
18435: LD_VAR 0 16
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: LD_INT 30
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 30
18459: PUSH
18460: LD_INT 3
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: LIST
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL_OW 72
18480: ST_TO_ADDR
18481: GO 18565
18483: LD_INT 4
18485: DOUBLE
18486: EQUAL
18487: IFTRUE 18491
18489: GO 18564
18491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18492: LD_ADDR_VAR 0 12
18496: PUSH
18497: LD_VAR 0 18
18501: PPUSH
18502: LD_INT 22
18504: PUSH
18505: LD_VAR 0 16
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 30
18519: PUSH
18520: LD_INT 6
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 30
18529: PUSH
18530: LD_INT 7
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 30
18539: PUSH
18540: LD_INT 8
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 72
18561: ST_TO_ADDR
18562: GO 18565
18564: POP
// if i = 1 then
18565: LD_VAR 0 8
18569: PUSH
18570: LD_INT 1
18572: EQUAL
18573: IFFALSE 18684
// begin tmp := [ ] ;
18575: LD_ADDR_VAR 0 19
18579: PUSH
18580: EMPTY
18581: ST_TO_ADDR
// for j in f do
18582: LD_ADDR_VAR 0 9
18586: PUSH
18587: LD_VAR 0 12
18591: PUSH
18592: FOR_IN
18593: IFFALSE 18666
// if GetBType ( j ) = b_bunker then
18595: LD_VAR 0 9
18599: PPUSH
18600: CALL_OW 266
18604: PUSH
18605: LD_INT 32
18607: EQUAL
18608: IFFALSE 18635
// tmp := Insert ( tmp , 1 , j ) else
18610: LD_ADDR_VAR 0 19
18614: PUSH
18615: LD_VAR 0 19
18619: PPUSH
18620: LD_INT 1
18622: PPUSH
18623: LD_VAR 0 9
18627: PPUSH
18628: CALL_OW 2
18632: ST_TO_ADDR
18633: GO 18664
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18635: LD_ADDR_VAR 0 19
18639: PUSH
18640: LD_VAR 0 19
18644: PPUSH
18645: LD_VAR 0 19
18649: PUSH
18650: LD_INT 1
18652: PLUS
18653: PPUSH
18654: LD_VAR 0 9
18658: PPUSH
18659: CALL_OW 2
18663: ST_TO_ADDR
18664: GO 18592
18666: POP
18667: POP
// if tmp then
18668: LD_VAR 0 19
18672: IFFALSE 18684
// f := tmp ;
18674: LD_ADDR_VAR 0 12
18678: PUSH
18679: LD_VAR 0 19
18683: ST_TO_ADDR
// end ; x := personel [ i ] ;
18684: LD_ADDR_VAR 0 13
18688: PUSH
18689: LD_VAR 0 6
18693: PUSH
18694: LD_VAR 0 8
18698: ARRAY
18699: ST_TO_ADDR
// if x = - 1 then
18700: LD_VAR 0 13
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: EQUAL
18709: IFFALSE 18918
// begin for j in f do
18711: LD_ADDR_VAR 0 9
18715: PUSH
18716: LD_VAR 0 12
18720: PUSH
18721: FOR_IN
18722: IFFALSE 18914
// repeat InitHc ;
18724: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18728: LD_VAR 0 9
18732: PPUSH
18733: CALL_OW 266
18737: PUSH
18738: LD_INT 5
18740: EQUAL
18741: IFFALSE 18811
// begin if UnitsInside ( j ) < 3 then
18743: LD_VAR 0 9
18747: PPUSH
18748: CALL_OW 313
18752: PUSH
18753: LD_INT 3
18755: LESS
18756: IFFALSE 18792
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18758: LD_INT 0
18760: PPUSH
18761: LD_INT 5
18763: PUSH
18764: LD_INT 8
18766: PUSH
18767: LD_INT 9
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: PUSH
18775: LD_VAR 0 17
18779: ARRAY
18780: PPUSH
18781: LD_VAR 0 4
18785: PPUSH
18786: CALL_OW 380
18790: GO 18809
// PrepareHuman ( false , i , skill ) ;
18792: LD_INT 0
18794: PPUSH
18795: LD_VAR 0 8
18799: PPUSH
18800: LD_VAR 0 4
18804: PPUSH
18805: CALL_OW 380
// end else
18809: GO 18828
// PrepareHuman ( false , i , skill ) ;
18811: LD_INT 0
18813: PPUSH
18814: LD_VAR 0 8
18818: PPUSH
18819: LD_VAR 0 4
18823: PPUSH
18824: CALL_OW 380
// un := CreateHuman ;
18828: LD_ADDR_VAR 0 14
18832: PUSH
18833: CALL_OW 44
18837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18838: LD_ADDR_VAR 0 7
18842: PUSH
18843: LD_VAR 0 7
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: LD_VAR 0 14
18855: PPUSH
18856: CALL_OW 2
18860: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18861: LD_VAR 0 14
18865: PPUSH
18866: LD_VAR 0 9
18870: PPUSH
18871: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18875: LD_VAR 0 9
18879: PPUSH
18880: CALL_OW 313
18884: PUSH
18885: LD_INT 6
18887: EQUAL
18888: PUSH
18889: LD_VAR 0 9
18893: PPUSH
18894: CALL_OW 266
18898: PUSH
18899: LD_INT 32
18901: PUSH
18902: LD_INT 31
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: IN
18909: OR
18910: IFFALSE 18724
18912: GO 18721
18914: POP
18915: POP
// end else
18916: GO 19298
// for j = 1 to x do
18918: LD_ADDR_VAR 0 9
18922: PUSH
18923: DOUBLE
18924: LD_INT 1
18926: DEC
18927: ST_TO_ADDR
18928: LD_VAR 0 13
18932: PUSH
18933: FOR_TO
18934: IFFALSE 19296
// begin InitHc ;
18936: CALL_OW 19
// if not f then
18940: LD_VAR 0 12
18944: NOT
18945: IFFALSE 19034
// begin PrepareHuman ( false , i , skill ) ;
18947: LD_INT 0
18949: PPUSH
18950: LD_VAR 0 8
18954: PPUSH
18955: LD_VAR 0 4
18959: PPUSH
18960: CALL_OW 380
// un := CreateHuman ;
18964: LD_ADDR_VAR 0 14
18968: PUSH
18969: CALL_OW 44
18973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18974: LD_ADDR_VAR 0 7
18978: PUSH
18979: LD_VAR 0 7
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_VAR 0 14
18991: PPUSH
18992: CALL_OW 2
18996: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18997: LD_VAR 0 14
19001: PPUSH
19002: LD_VAR 0 1
19006: PPUSH
19007: CALL_OW 250
19011: PPUSH
19012: LD_VAR 0 1
19016: PPUSH
19017: CALL_OW 251
19021: PPUSH
19022: LD_INT 10
19024: PPUSH
19025: LD_INT 0
19027: PPUSH
19028: CALL_OW 50
// continue ;
19032: GO 18933
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19034: LD_VAR 0 12
19038: PUSH
19039: LD_INT 1
19041: ARRAY
19042: PPUSH
19043: CALL_OW 313
19047: PUSH
19048: LD_VAR 0 12
19052: PUSH
19053: LD_INT 1
19055: ARRAY
19056: PPUSH
19057: CALL_OW 266
19061: PUSH
19062: LD_INT 32
19064: PUSH
19065: LD_INT 31
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: IN
19072: AND
19073: PUSH
19074: LD_VAR 0 12
19078: PUSH
19079: LD_INT 1
19081: ARRAY
19082: PPUSH
19083: CALL_OW 313
19087: PUSH
19088: LD_INT 6
19090: EQUAL
19091: OR
19092: IFFALSE 19112
// f := Delete ( f , 1 ) ;
19094: LD_ADDR_VAR 0 12
19098: PUSH
19099: LD_VAR 0 12
19103: PPUSH
19104: LD_INT 1
19106: PPUSH
19107: CALL_OW 3
19111: ST_TO_ADDR
// if not f then
19112: LD_VAR 0 12
19116: NOT
19117: IFFALSE 19135
// begin x := x + 2 ;
19119: LD_ADDR_VAR 0 13
19123: PUSH
19124: LD_VAR 0 13
19128: PUSH
19129: LD_INT 2
19131: PLUS
19132: ST_TO_ADDR
// continue ;
19133: GO 18933
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19135: LD_VAR 0 12
19139: PUSH
19140: LD_INT 1
19142: ARRAY
19143: PPUSH
19144: CALL_OW 266
19148: PUSH
19149: LD_INT 5
19151: EQUAL
19152: IFFALSE 19226
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19154: LD_VAR 0 12
19158: PUSH
19159: LD_INT 1
19161: ARRAY
19162: PPUSH
19163: CALL_OW 313
19167: PUSH
19168: LD_INT 3
19170: LESS
19171: IFFALSE 19207
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19173: LD_INT 0
19175: PPUSH
19176: LD_INT 5
19178: PUSH
19179: LD_INT 8
19181: PUSH
19182: LD_INT 9
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: LD_VAR 0 17
19194: ARRAY
19195: PPUSH
19196: LD_VAR 0 4
19200: PPUSH
19201: CALL_OW 380
19205: GO 19224
// PrepareHuman ( false , i , skill ) ;
19207: LD_INT 0
19209: PPUSH
19210: LD_VAR 0 8
19214: PPUSH
19215: LD_VAR 0 4
19219: PPUSH
19220: CALL_OW 380
// end else
19224: GO 19243
// PrepareHuman ( false , i , skill ) ;
19226: LD_INT 0
19228: PPUSH
19229: LD_VAR 0 8
19233: PPUSH
19234: LD_VAR 0 4
19238: PPUSH
19239: CALL_OW 380
// un := CreateHuman ;
19243: LD_ADDR_VAR 0 14
19247: PUSH
19248: CALL_OW 44
19252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19253: LD_ADDR_VAR 0 7
19257: PUSH
19258: LD_VAR 0 7
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: LD_VAR 0 14
19270: PPUSH
19271: CALL_OW 2
19275: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19276: LD_VAR 0 14
19280: PPUSH
19281: LD_VAR 0 12
19285: PUSH
19286: LD_INT 1
19288: ARRAY
19289: PPUSH
19290: CALL_OW 52
// end ;
19294: GO 18933
19296: POP
19297: POP
// end ;
19298: GO 18235
19300: POP
19301: POP
// result := result ^ buildings ;
19302: LD_ADDR_VAR 0 7
19306: PUSH
19307: LD_VAR 0 7
19311: PUSH
19312: LD_VAR 0 18
19316: ADD
19317: ST_TO_ADDR
// end else
19318: GO 19461
// begin for i = 1 to personel do
19320: LD_ADDR_VAR 0 8
19324: PUSH
19325: DOUBLE
19326: LD_INT 1
19328: DEC
19329: ST_TO_ADDR
19330: LD_VAR 0 6
19334: PUSH
19335: FOR_TO
19336: IFFALSE 19459
// begin if i > 4 then
19338: LD_VAR 0 8
19342: PUSH
19343: LD_INT 4
19345: GREATER
19346: IFFALSE 19350
// break ;
19348: GO 19459
// x := personel [ i ] ;
19350: LD_ADDR_VAR 0 13
19354: PUSH
19355: LD_VAR 0 6
19359: PUSH
19360: LD_VAR 0 8
19364: ARRAY
19365: ST_TO_ADDR
// if x = - 1 then
19366: LD_VAR 0 13
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: EQUAL
19375: IFFALSE 19379
// continue ;
19377: GO 19335
// PrepareHuman ( false , i , skill ) ;
19379: LD_INT 0
19381: PPUSH
19382: LD_VAR 0 8
19386: PPUSH
19387: LD_VAR 0 4
19391: PPUSH
19392: CALL_OW 380
// un := CreateHuman ;
19396: LD_ADDR_VAR 0 14
19400: PUSH
19401: CALL_OW 44
19405: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19406: LD_VAR 0 14
19410: PPUSH
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL_OW 250
19420: PPUSH
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 251
19430: PPUSH
19431: LD_INT 10
19433: PPUSH
19434: LD_INT 0
19436: PPUSH
19437: CALL_OW 50
// result := result ^ un ;
19441: LD_ADDR_VAR 0 7
19445: PUSH
19446: LD_VAR 0 7
19450: PUSH
19451: LD_VAR 0 14
19455: ADD
19456: ST_TO_ADDR
// end ;
19457: GO 19335
19459: POP
19460: POP
// end ; end ;
19461: LD_VAR 0 7
19465: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19466: LD_INT 0
19468: PPUSH
19469: PPUSH
19470: PPUSH
19471: PPUSH
19472: PPUSH
19473: PPUSH
19474: PPUSH
19475: PPUSH
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
19481: PPUSH
19482: PPUSH
19483: PPUSH
// result := false ;
19484: LD_ADDR_VAR 0 3
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19492: LD_VAR 0 1
19496: NOT
19497: PUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 266
19507: PUSH
19508: LD_INT 32
19510: PUSH
19511: LD_INT 33
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: IN
19518: NOT
19519: OR
19520: IFFALSE 19524
// exit ;
19522: GO 20633
// nat := GetNation ( tower ) ;
19524: LD_ADDR_VAR 0 12
19528: PUSH
19529: LD_VAR 0 1
19533: PPUSH
19534: CALL_OW 248
19538: ST_TO_ADDR
// side := GetSide ( tower ) ;
19539: LD_ADDR_VAR 0 16
19543: PUSH
19544: LD_VAR 0 1
19548: PPUSH
19549: CALL_OW 255
19553: ST_TO_ADDR
// x := GetX ( tower ) ;
19554: LD_ADDR_VAR 0 10
19558: PUSH
19559: LD_VAR 0 1
19563: PPUSH
19564: CALL_OW 250
19568: ST_TO_ADDR
// y := GetY ( tower ) ;
19569: LD_ADDR_VAR 0 11
19573: PUSH
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 251
19583: ST_TO_ADDR
// if not x or not y then
19584: LD_VAR 0 10
19588: NOT
19589: PUSH
19590: LD_VAR 0 11
19594: NOT
19595: OR
19596: IFFALSE 19600
// exit ;
19598: GO 20633
// weapon := 0 ;
19600: LD_ADDR_VAR 0 18
19604: PUSH
19605: LD_INT 0
19607: ST_TO_ADDR
// fac_list := [ ] ;
19608: LD_ADDR_VAR 0 17
19612: PUSH
19613: EMPTY
19614: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19615: LD_ADDR_VAR 0 6
19619: PUSH
19620: LD_VAR 0 1
19624: PPUSH
19625: CALL_OW 274
19629: PPUSH
19630: LD_VAR 0 2
19634: PPUSH
19635: LD_INT 0
19637: PPUSH
19638: CALL 17204 0 3
19642: PPUSH
19643: LD_INT 30
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 72
19657: ST_TO_ADDR
// if not factories then
19658: LD_VAR 0 6
19662: NOT
19663: IFFALSE 19667
// exit ;
19665: GO 20633
// for i in factories do
19667: LD_ADDR_VAR 0 8
19671: PUSH
19672: LD_VAR 0 6
19676: PUSH
19677: FOR_IN
19678: IFFALSE 19703
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19680: LD_ADDR_VAR 0 17
19684: PUSH
19685: LD_VAR 0 17
19689: PUSH
19690: LD_VAR 0 8
19694: PPUSH
19695: CALL_OW 478
19699: UNION
19700: ST_TO_ADDR
19701: GO 19677
19703: POP
19704: POP
// if not fac_list then
19705: LD_VAR 0 17
19709: NOT
19710: IFFALSE 19714
// exit ;
19712: GO 20633
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19714: LD_ADDR_VAR 0 5
19718: PUSH
19719: LD_INT 4
19721: PUSH
19722: LD_INT 5
19724: PUSH
19725: LD_INT 9
19727: PUSH
19728: LD_INT 10
19730: PUSH
19731: LD_INT 6
19733: PUSH
19734: LD_INT 7
19736: PUSH
19737: LD_INT 11
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 27
19751: PUSH
19752: LD_INT 28
19754: PUSH
19755: LD_INT 26
19757: PUSH
19758: LD_INT 30
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 43
19769: PUSH
19770: LD_INT 44
19772: PUSH
19773: LD_INT 46
19775: PUSH
19776: LD_INT 45
19778: PUSH
19779: LD_INT 47
19781: PUSH
19782: LD_INT 49
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: LD_VAR 0 12
19802: ARRAY
19803: ST_TO_ADDR
// list := list isect fac_list ;
19804: LD_ADDR_VAR 0 5
19808: PUSH
19809: LD_VAR 0 5
19813: PUSH
19814: LD_VAR 0 17
19818: ISECT
19819: ST_TO_ADDR
// if not list then
19820: LD_VAR 0 5
19824: NOT
19825: IFFALSE 19829
// exit ;
19827: GO 20633
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19829: LD_VAR 0 12
19833: PUSH
19834: LD_INT 3
19836: EQUAL
19837: PUSH
19838: LD_INT 49
19840: PUSH
19841: LD_VAR 0 5
19845: IN
19846: AND
19847: PUSH
19848: LD_INT 31
19850: PPUSH
19851: LD_VAR 0 16
19855: PPUSH
19856: CALL_OW 321
19860: PUSH
19861: LD_INT 2
19863: EQUAL
19864: AND
19865: IFFALSE 19925
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19867: LD_INT 22
19869: PUSH
19870: LD_VAR 0 16
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 35
19881: PUSH
19882: LD_INT 49
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 91
19891: PUSH
19892: LD_VAR 0 1
19896: PUSH
19897: LD_INT 10
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: PPUSH
19910: CALL_OW 69
19914: NOT
19915: IFFALSE 19925
// weapon := ru_time_lapser ;
19917: LD_ADDR_VAR 0 18
19921: PUSH
19922: LD_INT 49
19924: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19925: LD_VAR 0 12
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: IN
19940: PUSH
19941: LD_INT 11
19943: PUSH
19944: LD_VAR 0 5
19948: IN
19949: PUSH
19950: LD_INT 30
19952: PUSH
19953: LD_VAR 0 5
19957: IN
19958: OR
19959: AND
19960: PUSH
19961: LD_INT 6
19963: PPUSH
19964: LD_VAR 0 16
19968: PPUSH
19969: CALL_OW 321
19973: PUSH
19974: LD_INT 2
19976: EQUAL
19977: AND
19978: IFFALSE 20143
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19980: LD_INT 22
19982: PUSH
19983: LD_VAR 0 16
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 35
19997: PUSH
19998: LD_INT 11
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 35
20007: PUSH
20008: LD_INT 30
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 91
20022: PUSH
20023: LD_VAR 0 1
20027: PUSH
20028: LD_INT 18
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: PPUSH
20041: CALL_OW 69
20045: NOT
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_VAR 0 16
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 30
20064: PUSH
20065: LD_INT 32
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 30
20074: PUSH
20075: LD_INT 33
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 91
20089: PUSH
20090: LD_VAR 0 1
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: PPUSH
20111: CALL_OW 69
20115: PUSH
20116: LD_INT 2
20118: GREATER
20119: AND
20120: IFFALSE 20143
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20122: LD_ADDR_VAR 0 18
20126: PUSH
20127: LD_INT 11
20129: PUSH
20130: LD_INT 30
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_VAR 0 12
20141: ARRAY
20142: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20143: LD_VAR 0 18
20147: NOT
20148: PUSH
20149: LD_INT 40
20151: PPUSH
20152: LD_VAR 0 16
20156: PPUSH
20157: CALL_OW 321
20161: PUSH
20162: LD_INT 2
20164: EQUAL
20165: AND
20166: PUSH
20167: LD_INT 7
20169: PUSH
20170: LD_VAR 0 5
20174: IN
20175: PUSH
20176: LD_INT 28
20178: PUSH
20179: LD_VAR 0 5
20183: IN
20184: OR
20185: PUSH
20186: LD_INT 45
20188: PUSH
20189: LD_VAR 0 5
20193: IN
20194: OR
20195: AND
20196: IFFALSE 20450
// begin hex := GetHexInfo ( x , y ) ;
20198: LD_ADDR_VAR 0 4
20202: PUSH
20203: LD_VAR 0 10
20207: PPUSH
20208: LD_VAR 0 11
20212: PPUSH
20213: CALL_OW 546
20217: ST_TO_ADDR
// if hex [ 1 ] then
20218: LD_VAR 0 4
20222: PUSH
20223: LD_INT 1
20225: ARRAY
20226: IFFALSE 20230
// exit ;
20228: GO 20633
// height := hex [ 2 ] ;
20230: LD_ADDR_VAR 0 15
20234: PUSH
20235: LD_VAR 0 4
20239: PUSH
20240: LD_INT 2
20242: ARRAY
20243: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20244: LD_ADDR_VAR 0 14
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 3
20257: PUSH
20258: LD_INT 5
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: ST_TO_ADDR
// for i in tmp do
20267: LD_ADDR_VAR 0 8
20271: PUSH
20272: LD_VAR 0 14
20276: PUSH
20277: FOR_IN
20278: IFFALSE 20448
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20280: LD_ADDR_VAR 0 9
20284: PUSH
20285: LD_VAR 0 10
20289: PPUSH
20290: LD_VAR 0 8
20294: PPUSH
20295: LD_INT 5
20297: PPUSH
20298: CALL_OW 272
20302: PUSH
20303: LD_VAR 0 11
20307: PPUSH
20308: LD_VAR 0 8
20312: PPUSH
20313: LD_INT 5
20315: PPUSH
20316: CALL_OW 273
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20325: LD_VAR 0 9
20329: PUSH
20330: LD_INT 1
20332: ARRAY
20333: PPUSH
20334: LD_VAR 0 9
20338: PUSH
20339: LD_INT 2
20341: ARRAY
20342: PPUSH
20343: CALL_OW 488
20347: IFFALSE 20446
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20349: LD_ADDR_VAR 0 4
20353: PUSH
20354: LD_VAR 0 9
20358: PUSH
20359: LD_INT 1
20361: ARRAY
20362: PPUSH
20363: LD_VAR 0 9
20367: PUSH
20368: LD_INT 2
20370: ARRAY
20371: PPUSH
20372: CALL_OW 546
20376: ST_TO_ADDR
// if hex [ 1 ] then
20377: LD_VAR 0 4
20381: PUSH
20382: LD_INT 1
20384: ARRAY
20385: IFFALSE 20389
// continue ;
20387: GO 20277
// h := hex [ 2 ] ;
20389: LD_ADDR_VAR 0 13
20393: PUSH
20394: LD_VAR 0 4
20398: PUSH
20399: LD_INT 2
20401: ARRAY
20402: ST_TO_ADDR
// if h + 7 < height then
20403: LD_VAR 0 13
20407: PUSH
20408: LD_INT 7
20410: PLUS
20411: PUSH
20412: LD_VAR 0 15
20416: LESS
20417: IFFALSE 20446
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20419: LD_ADDR_VAR 0 18
20423: PUSH
20424: LD_INT 7
20426: PUSH
20427: LD_INT 28
20429: PUSH
20430: LD_INT 45
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: PUSH
20438: LD_VAR 0 12
20442: ARRAY
20443: ST_TO_ADDR
// break ;
20444: GO 20448
// end ; end ; end ;
20446: GO 20277
20448: POP
20449: POP
// end ; if not weapon then
20450: LD_VAR 0 18
20454: NOT
20455: IFFALSE 20515
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20457: LD_ADDR_VAR 0 5
20461: PUSH
20462: LD_VAR 0 5
20466: PUSH
20467: LD_INT 11
20469: PUSH
20470: LD_INT 30
20472: PUSH
20473: LD_INT 49
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: DIFF
20481: ST_TO_ADDR
// if not list then
20482: LD_VAR 0 5
20486: NOT
20487: IFFALSE 20491
// exit ;
20489: GO 20633
// weapon := list [ rand ( 1 , list ) ] ;
20491: LD_ADDR_VAR 0 18
20495: PUSH
20496: LD_VAR 0 5
20500: PUSH
20501: LD_INT 1
20503: PPUSH
20504: LD_VAR 0 5
20508: PPUSH
20509: CALL_OW 12
20513: ARRAY
20514: ST_TO_ADDR
// end ; if weapon then
20515: LD_VAR 0 18
20519: IFFALSE 20633
// begin tmp := CostOfWeapon ( weapon ) ;
20521: LD_ADDR_VAR 0 14
20525: PUSH
20526: LD_VAR 0 18
20530: PPUSH
20531: CALL_OW 451
20535: ST_TO_ADDR
// j := GetBase ( tower ) ;
20536: LD_ADDR_VAR 0 9
20540: PUSH
20541: LD_VAR 0 1
20545: PPUSH
20546: CALL_OW 274
20550: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20551: LD_VAR 0 9
20555: PPUSH
20556: LD_INT 1
20558: PPUSH
20559: CALL_OW 275
20563: PUSH
20564: LD_VAR 0 14
20568: PUSH
20569: LD_INT 1
20571: ARRAY
20572: GREATEREQUAL
20573: PUSH
20574: LD_VAR 0 9
20578: PPUSH
20579: LD_INT 2
20581: PPUSH
20582: CALL_OW 275
20586: PUSH
20587: LD_VAR 0 14
20591: PUSH
20592: LD_INT 2
20594: ARRAY
20595: GREATEREQUAL
20596: AND
20597: PUSH
20598: LD_VAR 0 9
20602: PPUSH
20603: LD_INT 3
20605: PPUSH
20606: CALL_OW 275
20610: PUSH
20611: LD_VAR 0 14
20615: PUSH
20616: LD_INT 3
20618: ARRAY
20619: GREATEREQUAL
20620: AND
20621: IFFALSE 20633
// result := weapon ;
20623: LD_ADDR_VAR 0 3
20627: PUSH
20628: LD_VAR 0 18
20632: ST_TO_ADDR
// end ; end ;
20633: LD_VAR 0 3
20637: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20638: LD_INT 0
20640: PPUSH
20641: PPUSH
// result := true ;
20642: LD_ADDR_VAR 0 3
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// if array1 = array2 then
20650: LD_VAR 0 1
20654: PUSH
20655: LD_VAR 0 2
20659: EQUAL
20660: IFFALSE 20720
// begin for i = 1 to array1 do
20662: LD_ADDR_VAR 0 4
20666: PUSH
20667: DOUBLE
20668: LD_INT 1
20670: DEC
20671: ST_TO_ADDR
20672: LD_VAR 0 1
20676: PUSH
20677: FOR_TO
20678: IFFALSE 20716
// if array1 [ i ] <> array2 [ i ] then
20680: LD_VAR 0 1
20684: PUSH
20685: LD_VAR 0 4
20689: ARRAY
20690: PUSH
20691: LD_VAR 0 2
20695: PUSH
20696: LD_VAR 0 4
20700: ARRAY
20701: NONEQUAL
20702: IFFALSE 20714
// begin result := false ;
20704: LD_ADDR_VAR 0 3
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// break ;
20712: GO 20716
// end ;
20714: GO 20677
20716: POP
20717: POP
// end else
20718: GO 20728
// result := false ;
20720: LD_ADDR_VAR 0 3
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// end ;
20728: LD_VAR 0 3
20732: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20733: LD_INT 0
20735: PPUSH
20736: PPUSH
// if not array1 or not array2 then
20737: LD_VAR 0 1
20741: NOT
20742: PUSH
20743: LD_VAR 0 2
20747: NOT
20748: OR
20749: IFFALSE 20753
// exit ;
20751: GO 20817
// result := true ;
20753: LD_ADDR_VAR 0 3
20757: PUSH
20758: LD_INT 1
20760: ST_TO_ADDR
// for i = 1 to array1 do
20761: LD_ADDR_VAR 0 4
20765: PUSH
20766: DOUBLE
20767: LD_INT 1
20769: DEC
20770: ST_TO_ADDR
20771: LD_VAR 0 1
20775: PUSH
20776: FOR_TO
20777: IFFALSE 20815
// if array1 [ i ] <> array2 [ i ] then
20779: LD_VAR 0 1
20783: PUSH
20784: LD_VAR 0 4
20788: ARRAY
20789: PUSH
20790: LD_VAR 0 2
20794: PUSH
20795: LD_VAR 0 4
20799: ARRAY
20800: NONEQUAL
20801: IFFALSE 20813
// begin result := false ;
20803: LD_ADDR_VAR 0 3
20807: PUSH
20808: LD_INT 0
20810: ST_TO_ADDR
// break ;
20811: GO 20815
// end ;
20813: GO 20776
20815: POP
20816: POP
// end ;
20817: LD_VAR 0 3
20821: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20822: LD_INT 0
20824: PPUSH
20825: PPUSH
20826: PPUSH
// pom := GetBase ( fac ) ;
20827: LD_ADDR_VAR 0 5
20831: PUSH
20832: LD_VAR 0 1
20836: PPUSH
20837: CALL_OW 274
20841: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20842: LD_ADDR_VAR 0 4
20846: PUSH
20847: LD_VAR 0 2
20851: PUSH
20852: LD_INT 1
20854: ARRAY
20855: PPUSH
20856: LD_VAR 0 2
20860: PUSH
20861: LD_INT 2
20863: ARRAY
20864: PPUSH
20865: LD_VAR 0 2
20869: PUSH
20870: LD_INT 3
20872: ARRAY
20873: PPUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_INT 4
20881: ARRAY
20882: PPUSH
20883: CALL_OW 449
20887: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_VAR 0 5
20897: PPUSH
20898: LD_INT 1
20900: PPUSH
20901: CALL_OW 275
20905: PUSH
20906: LD_VAR 0 4
20910: PUSH
20911: LD_INT 1
20913: ARRAY
20914: GREATEREQUAL
20915: PUSH
20916: LD_VAR 0 5
20920: PPUSH
20921: LD_INT 2
20923: PPUSH
20924: CALL_OW 275
20928: PUSH
20929: LD_VAR 0 4
20933: PUSH
20934: LD_INT 2
20936: ARRAY
20937: GREATEREQUAL
20938: AND
20939: PUSH
20940: LD_VAR 0 5
20944: PPUSH
20945: LD_INT 3
20947: PPUSH
20948: CALL_OW 275
20952: PUSH
20953: LD_VAR 0 4
20957: PUSH
20958: LD_INT 3
20960: ARRAY
20961: GREATEREQUAL
20962: AND
20963: ST_TO_ADDR
// end ;
20964: LD_VAR 0 3
20968: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20969: LD_INT 0
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
// pom := GetBase ( building ) ;
20975: LD_ADDR_VAR 0 3
20979: PUSH
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL_OW 274
20989: ST_TO_ADDR
// if not pom then
20990: LD_VAR 0 3
20994: NOT
20995: IFFALSE 20999
// exit ;
20997: GO 21169
// btype := GetBType ( building ) ;
20999: LD_ADDR_VAR 0 5
21003: PUSH
21004: LD_VAR 0 1
21008: PPUSH
21009: CALL_OW 266
21013: ST_TO_ADDR
// if btype = b_armoury then
21014: LD_VAR 0 5
21018: PUSH
21019: LD_INT 4
21021: EQUAL
21022: IFFALSE 21032
// btype := b_barracks ;
21024: LD_ADDR_VAR 0 5
21028: PUSH
21029: LD_INT 5
21031: ST_TO_ADDR
// if btype = b_depot then
21032: LD_VAR 0 5
21036: PUSH
21037: LD_INT 0
21039: EQUAL
21040: IFFALSE 21050
// btype := b_warehouse ;
21042: LD_ADDR_VAR 0 5
21046: PUSH
21047: LD_INT 1
21049: ST_TO_ADDR
// if btype = b_workshop then
21050: LD_VAR 0 5
21054: PUSH
21055: LD_INT 2
21057: EQUAL
21058: IFFALSE 21068
// btype := b_factory ;
21060: LD_ADDR_VAR 0 5
21064: PUSH
21065: LD_INT 3
21067: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21068: LD_ADDR_VAR 0 4
21072: PUSH
21073: LD_VAR 0 5
21077: PPUSH
21078: LD_VAR 0 1
21082: PPUSH
21083: CALL_OW 248
21087: PPUSH
21088: CALL_OW 450
21092: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21093: LD_ADDR_VAR 0 2
21097: PUSH
21098: LD_VAR 0 3
21102: PPUSH
21103: LD_INT 1
21105: PPUSH
21106: CALL_OW 275
21110: PUSH
21111: LD_VAR 0 4
21115: PUSH
21116: LD_INT 1
21118: ARRAY
21119: GREATEREQUAL
21120: PUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: LD_INT 2
21128: PPUSH
21129: CALL_OW 275
21133: PUSH
21134: LD_VAR 0 4
21138: PUSH
21139: LD_INT 2
21141: ARRAY
21142: GREATEREQUAL
21143: AND
21144: PUSH
21145: LD_VAR 0 3
21149: PPUSH
21150: LD_INT 3
21152: PPUSH
21153: CALL_OW 275
21157: PUSH
21158: LD_VAR 0 4
21162: PUSH
21163: LD_INT 3
21165: ARRAY
21166: GREATEREQUAL
21167: AND
21168: ST_TO_ADDR
// end ;
21169: LD_VAR 0 2
21173: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
21178: PPUSH
// pom := GetBase ( building ) ;
21179: LD_ADDR_VAR 0 4
21183: PUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 274
21193: ST_TO_ADDR
// if not pom then
21194: LD_VAR 0 4
21198: NOT
21199: IFFALSE 21203
// exit ;
21201: GO 21304
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21203: LD_ADDR_VAR 0 5
21207: PUSH
21208: LD_VAR 0 2
21212: PPUSH
21213: LD_VAR 0 1
21217: PPUSH
21218: CALL_OW 248
21222: PPUSH
21223: CALL_OW 450
21227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21228: LD_ADDR_VAR 0 3
21232: PUSH
21233: LD_VAR 0 4
21237: PPUSH
21238: LD_INT 1
21240: PPUSH
21241: CALL_OW 275
21245: PUSH
21246: LD_VAR 0 5
21250: PUSH
21251: LD_INT 1
21253: ARRAY
21254: GREATEREQUAL
21255: PUSH
21256: LD_VAR 0 4
21260: PPUSH
21261: LD_INT 2
21263: PPUSH
21264: CALL_OW 275
21268: PUSH
21269: LD_VAR 0 5
21273: PUSH
21274: LD_INT 2
21276: ARRAY
21277: GREATEREQUAL
21278: AND
21279: PUSH
21280: LD_VAR 0 4
21284: PPUSH
21285: LD_INT 3
21287: PPUSH
21288: CALL_OW 275
21292: PUSH
21293: LD_VAR 0 5
21297: PUSH
21298: LD_INT 3
21300: ARRAY
21301: GREATEREQUAL
21302: AND
21303: ST_TO_ADDR
// end ;
21304: LD_VAR 0 3
21308: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21309: LD_INT 0
21311: PPUSH
21312: PPUSH
21313: PPUSH
21314: PPUSH
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
// result := false ;
21322: LD_ADDR_VAR 0 8
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21330: LD_VAR 0 5
21334: NOT
21335: PUSH
21336: LD_VAR 0 1
21340: NOT
21341: OR
21342: PUSH
21343: LD_VAR 0 2
21347: NOT
21348: OR
21349: PUSH
21350: LD_VAR 0 3
21354: NOT
21355: OR
21356: IFFALSE 21360
// exit ;
21358: GO 22174
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21360: LD_ADDR_VAR 0 14
21364: PUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: LD_VAR 0 2
21374: PPUSH
21375: LD_VAR 0 3
21379: PPUSH
21380: LD_VAR 0 4
21384: PPUSH
21385: LD_VAR 0 5
21389: PUSH
21390: LD_INT 1
21392: ARRAY
21393: PPUSH
21394: CALL_OW 248
21398: PPUSH
21399: LD_INT 0
21401: PPUSH
21402: CALL 23427 0 6
21406: ST_TO_ADDR
// if not hexes then
21407: LD_VAR 0 14
21411: NOT
21412: IFFALSE 21416
// exit ;
21414: GO 22174
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21416: LD_ADDR_VAR 0 17
21420: PUSH
21421: LD_VAR 0 5
21425: PPUSH
21426: LD_INT 22
21428: PUSH
21429: LD_VAR 0 13
21433: PPUSH
21434: CALL_OW 255
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: LD_INT 30
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 30
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PPUSH
21475: CALL_OW 72
21479: ST_TO_ADDR
// for i = 1 to hexes do
21480: LD_ADDR_VAR 0 9
21484: PUSH
21485: DOUBLE
21486: LD_INT 1
21488: DEC
21489: ST_TO_ADDR
21490: LD_VAR 0 14
21494: PUSH
21495: FOR_TO
21496: IFFALSE 22172
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21498: LD_ADDR_VAR 0 13
21502: PUSH
21503: LD_VAR 0 14
21507: PUSH
21508: LD_VAR 0 9
21512: ARRAY
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PPUSH
21518: LD_VAR 0 14
21522: PUSH
21523: LD_VAR 0 9
21527: ARRAY
21528: PUSH
21529: LD_INT 2
21531: ARRAY
21532: PPUSH
21533: CALL_OW 428
21537: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21538: LD_VAR 0 14
21542: PUSH
21543: LD_VAR 0 9
21547: ARRAY
21548: PUSH
21549: LD_INT 1
21551: ARRAY
21552: PPUSH
21553: LD_VAR 0 14
21557: PUSH
21558: LD_VAR 0 9
21562: ARRAY
21563: PUSH
21564: LD_INT 2
21566: ARRAY
21567: PPUSH
21568: CALL_OW 351
21572: PUSH
21573: LD_VAR 0 14
21577: PUSH
21578: LD_VAR 0 9
21582: ARRAY
21583: PUSH
21584: LD_INT 1
21586: ARRAY
21587: PPUSH
21588: LD_VAR 0 14
21592: PUSH
21593: LD_VAR 0 9
21597: ARRAY
21598: PUSH
21599: LD_INT 2
21601: ARRAY
21602: PPUSH
21603: CALL_OW 488
21607: NOT
21608: OR
21609: PUSH
21610: LD_VAR 0 13
21614: PPUSH
21615: CALL_OW 247
21619: PUSH
21620: LD_INT 3
21622: EQUAL
21623: OR
21624: IFFALSE 21630
// exit ;
21626: POP
21627: POP
21628: GO 22174
// if not tmp then
21630: LD_VAR 0 13
21634: NOT
21635: IFFALSE 21639
// continue ;
21637: GO 21495
// result := true ;
21639: LD_ADDR_VAR 0 8
21643: PUSH
21644: LD_INT 1
21646: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21647: LD_VAR 0 6
21651: PUSH
21652: LD_VAR 0 13
21656: PPUSH
21657: CALL_OW 247
21661: PUSH
21662: LD_INT 2
21664: EQUAL
21665: AND
21666: PUSH
21667: LD_VAR 0 13
21671: PPUSH
21672: CALL_OW 263
21676: PUSH
21677: LD_INT 1
21679: EQUAL
21680: AND
21681: IFFALSE 21845
// begin if IsDrivenBy ( tmp ) then
21683: LD_VAR 0 13
21687: PPUSH
21688: CALL_OW 311
21692: IFFALSE 21696
// continue ;
21694: GO 21495
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21696: LD_VAR 0 6
21700: PPUSH
21701: LD_INT 3
21703: PUSH
21704: LD_INT 60
21706: PUSH
21707: EMPTY
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 3
21716: PUSH
21717: LD_INT 55
21719: PUSH
21720: EMPTY
21721: LIST
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PPUSH
21731: CALL_OW 72
21735: IFFALSE 21843
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21737: LD_ADDR_VAR 0 18
21741: PUSH
21742: LD_VAR 0 6
21746: PPUSH
21747: LD_INT 3
21749: PUSH
21750: LD_INT 60
21752: PUSH
21753: EMPTY
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: LD_INT 55
21765: PUSH
21766: EMPTY
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 72
21781: PUSH
21782: LD_INT 1
21784: ARRAY
21785: ST_TO_ADDR
// if IsInUnit ( driver ) then
21786: LD_VAR 0 18
21790: PPUSH
21791: CALL_OW 310
21795: IFFALSE 21806
// ComExit ( driver ) ;
21797: LD_VAR 0 18
21801: PPUSH
21802: CALL 47228 0 1
// AddComEnterUnit ( driver , tmp ) ;
21806: LD_VAR 0 18
21810: PPUSH
21811: LD_VAR 0 13
21815: PPUSH
21816: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21820: LD_VAR 0 18
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21834: LD_VAR 0 18
21838: PPUSH
21839: CALL_OW 181
// end ; continue ;
21843: GO 21495
// end ; if not cleaners or not tmp in cleaners then
21845: LD_VAR 0 6
21849: NOT
21850: PUSH
21851: LD_VAR 0 13
21855: PUSH
21856: LD_VAR 0 6
21860: IN
21861: NOT
21862: OR
21863: IFFALSE 22170
// begin if dep then
21865: LD_VAR 0 17
21869: IFFALSE 22005
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21871: LD_ADDR_VAR 0 16
21875: PUSH
21876: LD_VAR 0 17
21880: PUSH
21881: LD_INT 1
21883: ARRAY
21884: PPUSH
21885: CALL_OW 250
21889: PPUSH
21890: LD_VAR 0 17
21894: PUSH
21895: LD_INT 1
21897: ARRAY
21898: PPUSH
21899: CALL_OW 254
21903: PPUSH
21904: LD_INT 5
21906: PPUSH
21907: CALL_OW 272
21911: PUSH
21912: LD_VAR 0 17
21916: PUSH
21917: LD_INT 1
21919: ARRAY
21920: PPUSH
21921: CALL_OW 251
21925: PPUSH
21926: LD_VAR 0 17
21930: PUSH
21931: LD_INT 1
21933: ARRAY
21934: PPUSH
21935: CALL_OW 254
21939: PPUSH
21940: LD_INT 5
21942: PPUSH
21943: CALL_OW 273
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21952: LD_VAR 0 16
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PPUSH
21961: LD_VAR 0 16
21965: PUSH
21966: LD_INT 2
21968: ARRAY
21969: PPUSH
21970: CALL_OW 488
21974: IFFALSE 22005
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21976: LD_VAR 0 13
21980: PPUSH
21981: LD_VAR 0 16
21985: PUSH
21986: LD_INT 1
21988: ARRAY
21989: PPUSH
21990: LD_VAR 0 16
21994: PUSH
21995: LD_INT 2
21997: ARRAY
21998: PPUSH
21999: CALL_OW 111
// continue ;
22003: GO 21495
// end ; end ; r := GetDir ( tmp ) ;
22005: LD_ADDR_VAR 0 15
22009: PUSH
22010: LD_VAR 0 13
22014: PPUSH
22015: CALL_OW 254
22019: ST_TO_ADDR
// if r = 5 then
22020: LD_VAR 0 15
22024: PUSH
22025: LD_INT 5
22027: EQUAL
22028: IFFALSE 22038
// r := 0 ;
22030: LD_ADDR_VAR 0 15
22034: PUSH
22035: LD_INT 0
22037: ST_TO_ADDR
// for j = r to 5 do
22038: LD_ADDR_VAR 0 10
22042: PUSH
22043: DOUBLE
22044: LD_VAR 0 15
22048: DEC
22049: ST_TO_ADDR
22050: LD_INT 5
22052: PUSH
22053: FOR_TO
22054: IFFALSE 22168
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22056: LD_ADDR_VAR 0 11
22060: PUSH
22061: LD_VAR 0 13
22065: PPUSH
22066: CALL_OW 250
22070: PPUSH
22071: LD_VAR 0 10
22075: PPUSH
22076: LD_INT 2
22078: PPUSH
22079: CALL_OW 272
22083: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22084: LD_ADDR_VAR 0 12
22088: PUSH
22089: LD_VAR 0 13
22093: PPUSH
22094: CALL_OW 251
22098: PPUSH
22099: LD_VAR 0 10
22103: PPUSH
22104: LD_INT 2
22106: PPUSH
22107: CALL_OW 273
22111: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22112: LD_VAR 0 11
22116: PPUSH
22117: LD_VAR 0 12
22121: PPUSH
22122: CALL_OW 488
22126: PUSH
22127: LD_VAR 0 11
22131: PPUSH
22132: LD_VAR 0 12
22136: PPUSH
22137: CALL_OW 428
22141: NOT
22142: AND
22143: IFFALSE 22166
// begin ComMoveXY ( tmp , _x , _y ) ;
22145: LD_VAR 0 13
22149: PPUSH
22150: LD_VAR 0 11
22154: PPUSH
22155: LD_VAR 0 12
22159: PPUSH
22160: CALL_OW 111
// break ;
22164: GO 22168
// end ; end ;
22166: GO 22053
22168: POP
22169: POP
// end ; end ;
22170: GO 21495
22172: POP
22173: POP
// end ;
22174: LD_VAR 0 8
22178: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22179: LD_INT 0
22181: PPUSH
// result := true ;
22182: LD_ADDR_VAR 0 3
22186: PUSH
22187: LD_INT 1
22189: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22190: LD_VAR 0 2
22194: PUSH
22195: LD_INT 24
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22209
22201: LD_INT 33
22203: DOUBLE
22204: EQUAL
22205: IFTRUE 22209
22207: GO 22234
22209: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22210: LD_ADDR_VAR 0 3
22214: PUSH
22215: LD_INT 32
22217: PPUSH
22218: LD_VAR 0 1
22222: PPUSH
22223: CALL_OW 321
22227: PUSH
22228: LD_INT 2
22230: EQUAL
22231: ST_TO_ADDR
22232: GO 22550
22234: LD_INT 20
22236: DOUBLE
22237: EQUAL
22238: IFTRUE 22242
22240: GO 22267
22242: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22243: LD_ADDR_VAR 0 3
22247: PUSH
22248: LD_INT 6
22250: PPUSH
22251: LD_VAR 0 1
22255: PPUSH
22256: CALL_OW 321
22260: PUSH
22261: LD_INT 2
22263: EQUAL
22264: ST_TO_ADDR
22265: GO 22550
22267: LD_INT 22
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22281
22273: LD_INT 36
22275: DOUBLE
22276: EQUAL
22277: IFTRUE 22281
22279: GO 22306
22281: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22282: LD_ADDR_VAR 0 3
22286: PUSH
22287: LD_INT 15
22289: PPUSH
22290: LD_VAR 0 1
22294: PPUSH
22295: CALL_OW 321
22299: PUSH
22300: LD_INT 2
22302: EQUAL
22303: ST_TO_ADDR
22304: GO 22550
22306: LD_INT 30
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 22339
22314: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22315: LD_ADDR_VAR 0 3
22319: PUSH
22320: LD_INT 20
22322: PPUSH
22323: LD_VAR 0 1
22327: PPUSH
22328: CALL_OW 321
22332: PUSH
22333: LD_INT 2
22335: EQUAL
22336: ST_TO_ADDR
22337: GO 22550
22339: LD_INT 28
22341: DOUBLE
22342: EQUAL
22343: IFTRUE 22353
22345: LD_INT 21
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22378
22353: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22354: LD_ADDR_VAR 0 3
22358: PUSH
22359: LD_INT 21
22361: PPUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: CALL_OW 321
22371: PUSH
22372: LD_INT 2
22374: EQUAL
22375: ST_TO_ADDR
22376: GO 22550
22378: LD_INT 16
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22386
22384: GO 22411
22386: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22387: LD_ADDR_VAR 0 3
22391: PUSH
22392: LD_INT 84
22394: PPUSH
22395: LD_VAR 0 1
22399: PPUSH
22400: CALL_OW 321
22404: PUSH
22405: LD_INT 2
22407: EQUAL
22408: ST_TO_ADDR
22409: GO 22550
22411: LD_INT 19
22413: DOUBLE
22414: EQUAL
22415: IFTRUE 22425
22417: LD_INT 23
22419: DOUBLE
22420: EQUAL
22421: IFTRUE 22425
22423: GO 22450
22425: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22426: LD_ADDR_VAR 0 3
22430: PUSH
22431: LD_INT 83
22433: PPUSH
22434: LD_VAR 0 1
22438: PPUSH
22439: CALL_OW 321
22443: PUSH
22444: LD_INT 2
22446: EQUAL
22447: ST_TO_ADDR
22448: GO 22550
22450: LD_INT 17
22452: DOUBLE
22453: EQUAL
22454: IFTRUE 22458
22456: GO 22483
22458: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22459: LD_ADDR_VAR 0 3
22463: PUSH
22464: LD_INT 39
22466: PPUSH
22467: LD_VAR 0 1
22471: PPUSH
22472: CALL_OW 321
22476: PUSH
22477: LD_INT 2
22479: EQUAL
22480: ST_TO_ADDR
22481: GO 22550
22483: LD_INT 18
22485: DOUBLE
22486: EQUAL
22487: IFTRUE 22491
22489: GO 22516
22491: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22492: LD_ADDR_VAR 0 3
22496: PUSH
22497: LD_INT 40
22499: PPUSH
22500: LD_VAR 0 1
22504: PPUSH
22505: CALL_OW 321
22509: PUSH
22510: LD_INT 2
22512: EQUAL
22513: ST_TO_ADDR
22514: GO 22550
22516: LD_INT 27
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22549
22524: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22525: LD_ADDR_VAR 0 3
22529: PUSH
22530: LD_INT 35
22532: PPUSH
22533: LD_VAR 0 1
22537: PPUSH
22538: CALL_OW 321
22542: PUSH
22543: LD_INT 2
22545: EQUAL
22546: ST_TO_ADDR
22547: GO 22550
22549: POP
// end ;
22550: LD_VAR 0 3
22554: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22555: LD_INT 0
22557: PPUSH
22558: PPUSH
22559: PPUSH
22560: PPUSH
22561: PPUSH
22562: PPUSH
22563: PPUSH
22564: PPUSH
22565: PPUSH
22566: PPUSH
22567: PPUSH
// result := false ;
22568: LD_ADDR_VAR 0 6
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// if btype = b_depot then
22576: LD_VAR 0 2
22580: PUSH
22581: LD_INT 0
22583: EQUAL
22584: IFFALSE 22596
// begin result := true ;
22586: LD_ADDR_VAR 0 6
22590: PUSH
22591: LD_INT 1
22593: ST_TO_ADDR
// exit ;
22594: GO 23422
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22596: LD_VAR 0 1
22600: NOT
22601: PUSH
22602: LD_VAR 0 1
22606: PPUSH
22607: CALL_OW 266
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: IN
22622: NOT
22623: OR
22624: PUSH
22625: LD_VAR 0 2
22629: NOT
22630: OR
22631: PUSH
22632: LD_VAR 0 5
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: LD_INT 4
22651: PUSH
22652: LD_INT 5
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: IN
22663: NOT
22664: OR
22665: PUSH
22666: LD_VAR 0 3
22670: PPUSH
22671: LD_VAR 0 4
22675: PPUSH
22676: CALL_OW 488
22680: NOT
22681: OR
22682: IFFALSE 22686
// exit ;
22684: GO 23422
// side := GetSide ( depot ) ;
22686: LD_ADDR_VAR 0 9
22690: PUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL_OW 255
22700: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22701: LD_VAR 0 9
22705: PPUSH
22706: LD_VAR 0 2
22710: PPUSH
22711: CALL 22179 0 2
22715: NOT
22716: IFFALSE 22720
// exit ;
22718: GO 23422
// pom := GetBase ( depot ) ;
22720: LD_ADDR_VAR 0 10
22724: PUSH
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL_OW 274
22734: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22735: LD_ADDR_VAR 0 11
22739: PUSH
22740: LD_VAR 0 2
22744: PPUSH
22745: LD_VAR 0 1
22749: PPUSH
22750: CALL_OW 248
22754: PPUSH
22755: CALL_OW 450
22759: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22760: LD_VAR 0 10
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: CALL_OW 275
22772: PUSH
22773: LD_VAR 0 11
22777: PUSH
22778: LD_INT 1
22780: ARRAY
22781: GREATEREQUAL
22782: PUSH
22783: LD_VAR 0 10
22787: PPUSH
22788: LD_INT 2
22790: PPUSH
22791: CALL_OW 275
22795: PUSH
22796: LD_VAR 0 11
22800: PUSH
22801: LD_INT 2
22803: ARRAY
22804: GREATEREQUAL
22805: AND
22806: PUSH
22807: LD_VAR 0 10
22811: PPUSH
22812: LD_INT 3
22814: PPUSH
22815: CALL_OW 275
22819: PUSH
22820: LD_VAR 0 11
22824: PUSH
22825: LD_INT 3
22827: ARRAY
22828: GREATEREQUAL
22829: AND
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 23422
// if GetBType ( depot ) = b_depot then
22835: LD_VAR 0 1
22839: PPUSH
22840: CALL_OW 266
22844: PUSH
22845: LD_INT 0
22847: EQUAL
22848: IFFALSE 22860
// dist := 28 else
22850: LD_ADDR_VAR 0 14
22854: PUSH
22855: LD_INT 28
22857: ST_TO_ADDR
22858: GO 22868
// dist := 36 ;
22860: LD_ADDR_VAR 0 14
22864: PUSH
22865: LD_INT 36
22867: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22868: LD_VAR 0 1
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_VAR 0 4
22882: PPUSH
22883: CALL_OW 297
22887: PUSH
22888: LD_VAR 0 14
22892: GREATER
22893: IFFALSE 22897
// exit ;
22895: GO 23422
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22897: LD_ADDR_VAR 0 12
22901: PUSH
22902: LD_VAR 0 2
22906: PPUSH
22907: LD_VAR 0 3
22911: PPUSH
22912: LD_VAR 0 4
22916: PPUSH
22917: LD_VAR 0 5
22921: PPUSH
22922: LD_VAR 0 1
22926: PPUSH
22927: CALL_OW 248
22931: PPUSH
22932: LD_INT 0
22934: PPUSH
22935: CALL 23427 0 6
22939: ST_TO_ADDR
// if not hexes then
22940: LD_VAR 0 12
22944: NOT
22945: IFFALSE 22949
// exit ;
22947: GO 23422
// hex := GetHexInfo ( x , y ) ;
22949: LD_ADDR_VAR 0 15
22953: PUSH
22954: LD_VAR 0 3
22958: PPUSH
22959: LD_VAR 0 4
22963: PPUSH
22964: CALL_OW 546
22968: ST_TO_ADDR
// if hex [ 1 ] then
22969: LD_VAR 0 15
22973: PUSH
22974: LD_INT 1
22976: ARRAY
22977: IFFALSE 22981
// exit ;
22979: GO 23422
// height := hex [ 2 ] ;
22981: LD_ADDR_VAR 0 13
22985: PUSH
22986: LD_VAR 0 15
22990: PUSH
22991: LD_INT 2
22993: ARRAY
22994: ST_TO_ADDR
// for i = 1 to hexes do
22995: LD_ADDR_VAR 0 7
22999: PUSH
23000: DOUBLE
23001: LD_INT 1
23003: DEC
23004: ST_TO_ADDR
23005: LD_VAR 0 12
23009: PUSH
23010: FOR_TO
23011: IFFALSE 23341
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23013: LD_VAR 0 12
23017: PUSH
23018: LD_VAR 0 7
23022: ARRAY
23023: PUSH
23024: LD_INT 1
23026: ARRAY
23027: PPUSH
23028: LD_VAR 0 12
23032: PUSH
23033: LD_VAR 0 7
23037: ARRAY
23038: PUSH
23039: LD_INT 2
23041: ARRAY
23042: PPUSH
23043: CALL_OW 488
23047: NOT
23048: PUSH
23049: LD_VAR 0 12
23053: PUSH
23054: LD_VAR 0 7
23058: ARRAY
23059: PUSH
23060: LD_INT 1
23062: ARRAY
23063: PPUSH
23064: LD_VAR 0 12
23068: PUSH
23069: LD_VAR 0 7
23073: ARRAY
23074: PUSH
23075: LD_INT 2
23077: ARRAY
23078: PPUSH
23079: CALL_OW 428
23083: PUSH
23084: LD_INT 0
23086: GREATER
23087: OR
23088: PUSH
23089: LD_VAR 0 12
23093: PUSH
23094: LD_VAR 0 7
23098: ARRAY
23099: PUSH
23100: LD_INT 1
23102: ARRAY
23103: PPUSH
23104: LD_VAR 0 12
23108: PUSH
23109: LD_VAR 0 7
23113: ARRAY
23114: PUSH
23115: LD_INT 2
23117: ARRAY
23118: PPUSH
23119: CALL_OW 351
23123: OR
23124: IFFALSE 23130
// exit ;
23126: POP
23127: POP
23128: GO 23422
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23130: LD_ADDR_VAR 0 8
23134: PUSH
23135: LD_VAR 0 12
23139: PUSH
23140: LD_VAR 0 7
23144: ARRAY
23145: PUSH
23146: LD_INT 1
23148: ARRAY
23149: PPUSH
23150: LD_VAR 0 12
23154: PUSH
23155: LD_VAR 0 7
23159: ARRAY
23160: PUSH
23161: LD_INT 2
23163: ARRAY
23164: PPUSH
23165: CALL_OW 546
23169: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23170: LD_VAR 0 8
23174: PUSH
23175: LD_INT 1
23177: ARRAY
23178: PUSH
23179: LD_VAR 0 8
23183: PUSH
23184: LD_INT 2
23186: ARRAY
23187: PUSH
23188: LD_VAR 0 13
23192: PUSH
23193: LD_INT 2
23195: PLUS
23196: GREATER
23197: OR
23198: PUSH
23199: LD_VAR 0 8
23203: PUSH
23204: LD_INT 2
23206: ARRAY
23207: PUSH
23208: LD_VAR 0 13
23212: PUSH
23213: LD_INT 2
23215: MINUS
23216: LESS
23217: OR
23218: PUSH
23219: LD_VAR 0 8
23223: PUSH
23224: LD_INT 3
23226: ARRAY
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 8
23233: PUSH
23234: LD_INT 9
23236: PUSH
23237: LD_INT 10
23239: PUSH
23240: LD_INT 11
23242: PUSH
23243: LD_INT 12
23245: PUSH
23246: LD_INT 13
23248: PUSH
23249: LD_INT 16
23251: PUSH
23252: LD_INT 17
23254: PUSH
23255: LD_INT 18
23257: PUSH
23258: LD_INT 19
23260: PUSH
23261: LD_INT 20
23263: PUSH
23264: LD_INT 21
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: IN
23282: NOT
23283: OR
23284: PUSH
23285: LD_VAR 0 8
23289: PUSH
23290: LD_INT 5
23292: ARRAY
23293: NOT
23294: OR
23295: PUSH
23296: LD_VAR 0 8
23300: PUSH
23301: LD_INT 6
23303: ARRAY
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 7
23313: PUSH
23314: LD_INT 9
23316: PUSH
23317: LD_INT 10
23319: PUSH
23320: LD_INT 11
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: IN
23331: NOT
23332: OR
23333: IFFALSE 23339
// exit ;
23335: POP
23336: POP
23337: GO 23422
// end ;
23339: GO 23010
23341: POP
23342: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23343: LD_VAR 0 9
23347: PPUSH
23348: LD_VAR 0 3
23352: PPUSH
23353: LD_VAR 0 4
23357: PPUSH
23358: LD_INT 20
23360: PPUSH
23361: CALL 15345 0 4
23365: PUSH
23366: LD_INT 4
23368: ARRAY
23369: IFFALSE 23373
// exit ;
23371: GO 23422
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23373: LD_VAR 0 2
23377: PUSH
23378: LD_INT 29
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: IN
23388: PUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: LD_VAR 0 4
23398: PPUSH
23399: LD_VAR 0 9
23403: PPUSH
23404: CALL_OW 440
23408: NOT
23409: AND
23410: IFFALSE 23414
// exit ;
23412: GO 23422
// result := true ;
23414: LD_ADDR_VAR 0 6
23418: PUSH
23419: LD_INT 1
23421: ST_TO_ADDR
// end ;
23422: LD_VAR 0 6
23426: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23427: LD_INT 0
23429: PPUSH
23430: PPUSH
23431: PPUSH
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
23442: PPUSH
23443: PPUSH
23444: PPUSH
23445: PPUSH
23446: PPUSH
23447: PPUSH
23448: PPUSH
23449: PPUSH
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
// result = [ ] ;
23487: LD_ADDR_VAR 0 7
23491: PUSH
23492: EMPTY
23493: ST_TO_ADDR
// temp_list = [ ] ;
23494: LD_ADDR_VAR 0 9
23498: PUSH
23499: EMPTY
23500: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23501: LD_VAR 0 4
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 3
23517: PUSH
23518: LD_INT 4
23520: PUSH
23521: LD_INT 5
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: IN
23532: NOT
23533: PUSH
23534: LD_VAR 0 1
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: IN
23549: PUSH
23550: LD_VAR 0 5
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 3
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: IN
23569: NOT
23570: AND
23571: OR
23572: IFFALSE 23576
// exit ;
23574: GO 41967
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23576: LD_VAR 0 1
23580: PUSH
23581: LD_INT 6
23583: PUSH
23584: LD_INT 7
23586: PUSH
23587: LD_INT 8
23589: PUSH
23590: LD_INT 13
23592: PUSH
23593: LD_INT 12
23595: PUSH
23596: LD_INT 15
23598: PUSH
23599: LD_INT 11
23601: PUSH
23602: LD_INT 14
23604: PUSH
23605: LD_INT 10
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: IN
23619: IFFALSE 23629
// btype = b_lab ;
23621: LD_ADDR_VAR 0 1
23625: PUSH
23626: LD_INT 6
23628: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23629: LD_VAR 0 6
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: IN
23648: NOT
23649: PUSH
23650: LD_VAR 0 1
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: LD_INT 3
23666: PUSH
23667: LD_INT 6
23669: PUSH
23670: LD_INT 36
23672: PUSH
23673: LD_INT 4
23675: PUSH
23676: LD_INT 5
23678: PUSH
23679: LD_INT 31
23681: PUSH
23682: LD_INT 32
23684: PUSH
23685: LD_INT 33
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: IN
23701: NOT
23702: PUSH
23703: LD_VAR 0 6
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: AND
23712: OR
23713: PUSH
23714: LD_VAR 0 1
23718: PUSH
23719: LD_INT 2
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: IN
23729: NOT
23730: PUSH
23731: LD_VAR 0 6
23735: PUSH
23736: LD_INT 2
23738: EQUAL
23739: AND
23740: OR
23741: IFFALSE 23751
// mode = 0 ;
23743: LD_ADDR_VAR 0 6
23747: PUSH
23748: LD_INT 0
23750: ST_TO_ADDR
// case mode of 0 :
23751: LD_VAR 0 6
23755: PUSH
23756: LD_INT 0
23758: DOUBLE
23759: EQUAL
23760: IFTRUE 23764
23762: GO 35217
23764: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23765: LD_ADDR_VAR 0 11
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: LD_INT 2
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 2
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23958: LD_ADDR_VAR 0 12
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 2
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: NEG
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 2
24092: NEG
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 3
24115: NEG
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 3
24126: NEG
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24154: LD_ADDR_VAR 0 13
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 2
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 2
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: NEG
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: LD_INT 2
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: LD_INT 3
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 3
24313: NEG
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 3
24325: NEG
24326: PUSH
24327: LD_INT 3
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24353: LD_ADDR_VAR 0 14
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: LD_INT 2
24449: NEG
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 3
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 3
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 2
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24549: LD_ADDR_VAR 0 15
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 0
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: LD_INT 0
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 3
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24742: LD_ADDR_VAR 0 16
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: LD_INT 2
24827: NEG
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: LD_INT 2
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: NEG
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: LD_INT 2
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: LD_INT 3
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 2
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24935: LD_ADDR_VAR 0 17
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 2
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: LD_INT 2
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: NEG
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 2
25134: NEG
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25165: LD_ADDR_VAR 0 18
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: LD_INT 2
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 2
25352: NEG
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: LD_INT 2
25368: NEG
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25395: LD_ADDR_VAR 0 19
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: NEG
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 2
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 2
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 2
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: NEG
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 2
25582: NEG
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: LD_INT 2
25598: NEG
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25625: LD_ADDR_VAR 0 20
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: LD_INT 1
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: PUSH
25696: LD_INT 1
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: LD_INT 2
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 2
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 2
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25855: LD_ADDR_VAR 0 21
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 2
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 0
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26085: LD_ADDR_VAR 0 22
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 2
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26315: LD_ADDR_VAR 0 23
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 3
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: LD_INT 3
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26595: LD_ADDR_VAR 0 24
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 2
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 2
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 2
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: LD_INT 2
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 2
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 3
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 3
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26871: LD_ADDR_VAR 0 25
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: LD_INT 2
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: LD_INT 2
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: NEG
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: NEG
27071: PUSH
27072: LD_INT 2
27074: NEG
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 3
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 3
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 3
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27145: LD_ADDR_VAR 0 26
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: LD_INT 2
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: NEG
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: LD_INT 3
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: NEG
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27421: LD_ADDR_VAR 0 27
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 2
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 3
27654: NEG
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 3
27666: NEG
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27701: LD_ADDR_VAR 0 28
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: LD_INT 2
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 2
27888: NEG
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: NEG
27913: PUSH
27914: LD_INT 3
27916: NEG
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: PUSH
27926: LD_INT 3
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 3
27936: NEG
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 3
27948: NEG
27949: PUSH
27950: LD_INT 2
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27983: LD_ADDR_VAR 0 29
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: NEG
28162: PUSH
28163: LD_INT 2
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: LD_INT 3
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 3
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 3
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 3
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28262: LD_ADDR_VAR 0 30
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 2
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 2
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 2
28439: NEG
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 3
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 2
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 3
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: LD_INT 3
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28540: LD_ADDR_VAR 0 31
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 1
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: NEG
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 2
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 2
28705: NEG
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: NEG
28730: PUSH
28731: LD_INT 3
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 3
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 3
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 3
28783: NEG
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28818: LD_ADDR_VAR 0 32
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 2
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: LD_INT 2
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 2
28984: NEG
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 2
28995: NEG
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 3
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 3
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 3
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29096: LD_ADDR_VAR 0 33
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: NEG
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: NEG
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: LD_INT 2
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: NEG
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: NEG
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: LD_INT 3
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 2
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29375: LD_ADDR_VAR 0 34
29379: PUSH
29380: LD_INT 0
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: NEG
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: LD_INT 2
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 2
29542: NEG
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 3
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 3
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: LD_INT 3
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 2
29609: NEG
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 3
29620: NEG
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29655: LD_ADDR_VAR 0 35
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: LD_INT 1
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29767: LD_ADDR_VAR 0 36
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: LD_INT 1
29840: NEG
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29879: LD_ADDR_VAR 0 37
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29991: LD_ADDR_VAR 0 38
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: NEG
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30103: LD_ADDR_VAR 0 39
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30215: LD_ADDR_VAR 0 40
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30327: LD_ADDR_VAR 0 41
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 0
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 2
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: LD_INT 1
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 0
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: LD_INT 2
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: LD_INT 3
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 3
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 3
30570: PUSH
30571: LD_INT 3
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 2
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 3
30601: NEG
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 3
30612: NEG
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: LD_INT 2
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30677: LD_ADDR_VAR 0 42
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: NEG
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 3
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 3
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 3
30974: NEG
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 3
30986: NEG
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31027: LD_ADDR_VAR 0 43
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 0
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 3
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: LD_INT 3
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 3
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 3
31323: NEG
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31375: LD_ADDR_VAR 0 44
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 2
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 2
31530: NEG
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 3
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: NEG
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 3
31660: NEG
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 3
31672: NEG
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 3
31684: NEG
31685: PUSH
31686: LD_INT 3
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31725: LD_ADDR_VAR 0 45
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 3
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: LD_INT 3
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 3
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 3
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 3
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 3
32022: NEG
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 3
32034: NEG
32035: PUSH
32036: LD_INT 3
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32075: LD_ADDR_VAR 0 46
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: LD_INT 2
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32423: LD_ADDR_VAR 0 47
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: LD_INT 2
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32574: LD_ADDR_VAR 0 48
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: NEG
32656: PUSH
32657: LD_INT 2
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 2
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 2
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32721: LD_ADDR_VAR 0 49
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: NEG
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32865: LD_ADDR_VAR 0 50
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: LD_INT 2
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33009: LD_ADDR_VAR 0 51
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33156: LD_ADDR_VAR 0 52
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: LD_INT 2
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33307: LD_ADDR_VAR 0 53
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: NEG
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: NEG
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 2
33506: NEG
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33537: LD_ADDR_VAR 0 54
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33767: LD_ADDR_VAR 0 55
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 2
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 2
33954: NEG
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: NEG
33967: PUSH
33968: LD_INT 2
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33997: LD_ADDR_VAR 0 56
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 1
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 2
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: LD_INT 2
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34227: LD_ADDR_VAR 0 57
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34457: LD_ADDR_VAR 0 58
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 0
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34687: LD_ADDR_VAR 0 59
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34775: LD_ADDR_VAR 0 60
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34863: LD_ADDR_VAR 0 61
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34951: LD_ADDR_VAR 0 62
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: LD_INT 1
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35039: LD_ADDR_VAR 0 63
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35127: LD_ADDR_VAR 0 64
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: ST_TO_ADDR
// end ; 1 :
35215: GO 41112
35217: LD_INT 1
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35225
35223: GO 37848
35225: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35226: LD_ADDR_VAR 0 11
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 3
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: LD_INT 3
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: LD_INT 2
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35270: LD_ADDR_VAR 0 12
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 3
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 3
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35311: LD_ADDR_VAR 0 13
35315: PUSH
35316: LD_INT 3
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 3
35328: PUSH
35329: LD_INT 3
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: LD_INT 3
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35351: LD_ADDR_VAR 0 14
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 3
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 3
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35392: LD_ADDR_VAR 0 15
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: NEG
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 3
35421: NEG
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35436: LD_ADDR_VAR 0 16
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: LD_INT 3
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 3
35455: NEG
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 3
35467: NEG
35468: PUSH
35469: LD_INT 3
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: LIST
35481: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35482: LD_ADDR_VAR 0 17
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 3
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 2
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35526: LD_ADDR_VAR 0 18
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 3
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35567: LD_ADDR_VAR 0 19
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 3
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 2
35594: PUSH
35595: LD_INT 3
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35607: LD_ADDR_VAR 0 20
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: LD_INT 3
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: LD_INT 3
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35648: LD_ADDR_VAR 0 21
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 3
35666: NEG
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 3
35677: NEG
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35692: LD_ADDR_VAR 0 22
35696: PUSH
35697: LD_INT 2
35699: NEG
35700: PUSH
35701: LD_INT 3
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 3
35711: NEG
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 3
35723: NEG
35724: PUSH
35725: LD_INT 3
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35738: LD_ADDR_VAR 0 23
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 3
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: LD_INT 4
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 3
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35782: LD_ADDR_VAR 0 24
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 3
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 4
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35823: LD_ADDR_VAR 0 25
35827: PUSH
35828: LD_INT 3
35830: PUSH
35831: LD_INT 3
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 4
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 4
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35863: LD_ADDR_VAR 0 26
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 4
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35904: LD_ADDR_VAR 0 27
35908: PUSH
35909: LD_INT 3
35911: NEG
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 3
35922: NEG
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 4
35933: NEG
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35948: LD_ADDR_VAR 0 28
35952: PUSH
35953: LD_INT 3
35955: NEG
35956: PUSH
35957: LD_INT 3
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 3
35967: NEG
35968: PUSH
35969: LD_INT 4
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 4
35979: NEG
35980: PUSH
35981: LD_INT 3
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35994: LD_ADDR_VAR 0 29
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 3
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 3
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 4
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 4
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 3
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 5
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 5
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 4
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 6
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 6
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 5
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36149: LD_ADDR_VAR 0 30
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 3
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 3
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 4
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 4
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 4
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 5
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 5
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 5
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 6
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 6
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36292: LD_ADDR_VAR 0 31
36296: PUSH
36297: LD_INT 3
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: LD_INT 3
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 3
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 4
36329: PUSH
36330: LD_INT 3
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 4
36339: PUSH
36340: LD_INT 4
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 3
36349: PUSH
36350: LD_INT 4
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 5
36359: PUSH
36360: LD_INT 4
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 5
36369: PUSH
36370: LD_INT 5
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 4
36379: PUSH
36380: LD_INT 5
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 6
36389: PUSH
36390: LD_INT 5
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 6
36399: PUSH
36400: LD_INT 6
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: LD_INT 6
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36431: LD_ADDR_VAR 0 32
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: LD_INT 3
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 4
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 4
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 3
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 5
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 5
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 4
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 6
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 6
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 5
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36574: LD_ADDR_VAR 0 33
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 3
36592: NEG
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 3
36603: NEG
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 3
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 4
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 4
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 4
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 5
36660: NEG
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 5
36671: NEG
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 5
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 6
36694: NEG
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 6
36705: NEG
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36729: LD_ADDR_VAR 0 34
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: LD_INT 3
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 3
36748: NEG
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 3
36760: NEG
36761: PUSH
36762: LD_INT 3
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 3
36772: NEG
36773: PUSH
36774: LD_INT 4
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 4
36784: NEG
36785: PUSH
36786: LD_INT 3
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 4
36796: NEG
36797: PUSH
36798: LD_INT 4
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 4
36808: NEG
36809: PUSH
36810: LD_INT 5
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 5
36820: NEG
36821: PUSH
36822: LD_INT 4
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 5
36832: NEG
36833: PUSH
36834: LD_INT 5
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 5
36844: NEG
36845: PUSH
36846: LD_INT 6
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 6
36856: NEG
36857: PUSH
36858: LD_INT 5
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 6
36868: NEG
36869: PUSH
36870: LD_INT 6
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36892: LD_ADDR_VAR 0 41
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: LD_INT 3
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36936: LD_ADDR_VAR 0 42
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 3
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36977: LD_ADDR_VAR 0 43
36981: PUSH
36982: LD_INT 2
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: LD_INT 2
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 3
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37017: LD_ADDR_VAR 0 44
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37058: LD_ADDR_VAR 0 45
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 3
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37102: LD_ADDR_VAR 0 46
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: LD_INT 3
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 3
37133: NEG
37134: PUSH
37135: LD_INT 2
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37148: LD_ADDR_VAR 0 47
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: LD_INT 3
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: LD_INT 3
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37181: LD_ADDR_VAR 0 48
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37212: LD_ADDR_VAR 0 49
37216: PUSH
37217: LD_INT 3
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 3
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37241: LD_ADDR_VAR 0 50
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: LD_INT 3
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 3
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37270: LD_ADDR_VAR 0 51
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37301: LD_ADDR_VAR 0 52
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37334: LD_ADDR_VAR 0 53
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: LD_INT 3
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: LD_INT 3
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37378: LD_ADDR_VAR 0 54
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37419: LD_ADDR_VAR 0 55
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 3
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37459: LD_ADDR_VAR 0 56
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37500: LD_ADDR_VAR 0 57
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 3
37518: NEG
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 3
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37544: LD_ADDR_VAR 0 58
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: LD_INT 3
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 3
37563: NEG
37564: PUSH
37565: LD_INT 2
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 3
37575: NEG
37576: PUSH
37577: LD_INT 3
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37590: LD_ADDR_VAR 0 59
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: LD_INT 2
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37634: LD_ADDR_VAR 0 60
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37675: LD_ADDR_VAR 0 61
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37715: LD_ADDR_VAR 0 62
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37756: LD_ADDR_VAR 0 63
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37800: LD_ADDR_VAR 0 64
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
// end ; 2 :
37846: GO 41112
37848: LD_INT 2
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 41111
37856: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37857: LD_ADDR_VAR 0 29
37861: PUSH
37862: LD_INT 4
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 4
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 5
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 5
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 4
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 3
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 3
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 5
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 3
37957: PUSH
37958: LD_INT 3
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 3
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 4
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 4
37987: PUSH
37988: LD_INT 4
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 3
37997: PUSH
37998: LD_INT 4
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: LD_INT 3
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 4
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 4
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 3
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 4
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: LD_INT 5
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: LD_INT 5
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 4
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 3
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: LD_INT 5
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 3
38140: NEG
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: NEG
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 3
38185: NEG
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 4
38196: NEG
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 4
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 4
38219: NEG
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 2
38231: NEG
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 4
38242: NEG
38243: PUSH
38244: LD_INT 4
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 4
38254: NEG
38255: PUSH
38256: LD_INT 5
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 3
38266: NEG
38267: PUSH
38268: LD_INT 4
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 4
38290: NEG
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 5
38302: NEG
38303: PUSH
38304: LD_INT 4
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 5
38314: NEG
38315: PUSH
38316: LD_INT 5
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 3
38326: NEG
38327: PUSH
38328: LD_INT 5
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 5
38338: NEG
38339: PUSH
38340: LD_INT 3
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38395: LD_ADDR_VAR 0 30
38399: PUSH
38400: LD_INT 4
38402: PUSH
38403: LD_INT 4
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 4
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 5
38422: PUSH
38423: LD_INT 4
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 5
38432: PUSH
38433: LD_INT 5
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 4
38442: PUSH
38443: LD_INT 5
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 3
38452: PUSH
38453: LD_INT 4
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: LD_INT 3
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: LD_INT 3
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: LD_INT 5
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: LD_INT 3
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 4
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: LD_INT 4
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 4
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 4
38585: NEG
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 4
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 3
38608: NEG
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 3
38619: NEG
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 4
38630: NEG
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 5
38641: NEG
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 5
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 5
38664: NEG
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 3
38676: NEG
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 3
38687: NEG
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: NEG
38700: PUSH
38701: LD_INT 4
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: LD_INT 3
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 2
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 3
38735: NEG
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 4
38747: NEG
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 4
38759: NEG
38760: PUSH
38761: LD_INT 4
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: LD_INT 4
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 4
38783: NEG
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 4
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 5
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: LD_INT 4
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 3
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 3
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 4
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: LD_INT 5
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 3
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: LD_INT 5
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38942: LD_ADDR_VAR 0 31
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 4
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: LD_INT 3
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 4
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 5
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 4
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 5
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 3
39053: NEG
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 4
39098: NEG
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 4
39109: NEG
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 4
39121: NEG
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 4
39144: NEG
39145: PUSH
39146: LD_INT 4
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 4
39156: NEG
39157: PUSH
39158: LD_INT 5
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 3
39168: NEG
39169: PUSH
39170: LD_INT 4
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 3
39180: NEG
39181: PUSH
39182: LD_INT 3
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 4
39192: NEG
39193: PUSH
39194: LD_INT 3
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 5
39204: NEG
39205: PUSH
39206: LD_INT 4
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 5
39216: NEG
39217: PUSH
39218: LD_INT 5
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 3
39228: NEG
39229: PUSH
39230: LD_INT 5
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 5
39240: NEG
39241: PUSH
39242: LD_INT 3
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 4
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 3
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 3
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 4
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: LD_INT 4
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 4
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 4
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 5
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 5
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 4
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 3
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 5
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39492: LD_ADDR_VAR 0 32
39496: PUSH
39497: LD_INT 4
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 4
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 3
39522: NEG
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 3
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 4
39544: NEG
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 5
39555: NEG
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 5
39566: NEG
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 5
39578: NEG
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 3
39590: NEG
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 3
39601: NEG
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 3
39613: NEG
39614: PUSH
39615: LD_INT 4
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: LD_INT 3
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: NEG
39650: PUSH
39651: LD_INT 2
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 4
39661: NEG
39662: PUSH
39663: LD_INT 3
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 4
39673: NEG
39674: PUSH
39675: LD_INT 4
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: LD_INT 4
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 4
39697: NEG
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 4
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: LD_INT 5
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: LD_INT 4
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 3
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 4
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 5
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: LD_INT 3
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: LD_INT 5
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 3
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 4
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 4
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 4
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 4
39904: PUSH
39905: LD_INT 4
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 4
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 5
39924: PUSH
39925: LD_INT 4
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 5
39934: PUSH
39935: LD_INT 5
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 4
39944: PUSH
39945: LD_INT 5
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: LD_INT 4
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 5
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 3
39984: PUSH
39985: LD_INT 5
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40039: LD_ADDR_VAR 0 33
40043: PUSH
40044: LD_INT 4
40046: NEG
40047: PUSH
40048: LD_INT 4
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 4
40058: NEG
40059: PUSH
40060: LD_INT 5
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: LD_INT 4
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 3
40082: NEG
40083: PUSH
40084: LD_INT 3
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 4
40094: NEG
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 5
40106: NEG
40107: PUSH
40108: LD_INT 4
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 5
40118: NEG
40119: PUSH
40120: LD_INT 5
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 3
40130: NEG
40131: PUSH
40132: LD_INT 5
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 5
40142: NEG
40143: PUSH
40144: LD_INT 3
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 3
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 4
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 3
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: LD_INT 4
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 4
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 4
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 4
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 5
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 5
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 4
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 3
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 5
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 3
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 4
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 4
40379: PUSH
40380: LD_INT 4
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 3
40389: PUSH
40390: LD_INT 4
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 4
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 4
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 4
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 3
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 4
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 5
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 5
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 4
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 3
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: LD_INT 5
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: LD_INT 3
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40577: LD_ADDR_VAR 0 34
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 4
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_INT 5
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 4
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: LD_INT 3
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 3
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 4
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 5
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 5
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 3
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 3
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 4
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 4
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 3
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 4
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 4
40779: PUSH
40780: LD_INT 4
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 4
40789: PUSH
40790: LD_INT 3
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 5
40799: PUSH
40800: LD_INT 4
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 5
40809: PUSH
40810: LD_INT 5
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 4
40819: PUSH
40820: LD_INT 5
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 3
40829: PUSH
40830: LD_INT 4
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 3
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 5
40849: PUSH
40850: LD_INT 3
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: PUSH
40860: LD_INT 5
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 3
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 3
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 4
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 4
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 4
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 4
40962: NEG
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 4
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: NEG
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 3
40996: NEG
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 4
41007: NEG
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 5
41018: NEG
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 5
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 5
41041: NEG
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
// end ; end ;
41109: GO 41112
41111: POP
// case btype of b_depot , b_warehouse :
41112: LD_VAR 0 1
41116: PUSH
41117: LD_INT 0
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41131
41123: LD_INT 1
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41131
41129: GO 41332
41131: POP
// case nation of nation_american :
41132: LD_VAR 0 5
41136: PUSH
41137: LD_INT 1
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41145
41143: GO 41201
41145: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41146: LD_ADDR_VAR 0 9
41150: PUSH
41151: LD_VAR 0 11
41155: PUSH
41156: LD_VAR 0 12
41160: PUSH
41161: LD_VAR 0 13
41165: PUSH
41166: LD_VAR 0 14
41170: PUSH
41171: LD_VAR 0 15
41175: PUSH
41176: LD_VAR 0 16
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: PUSH
41189: LD_VAR 0 4
41193: PUSH
41194: LD_INT 1
41196: PLUS
41197: ARRAY
41198: ST_TO_ADDR
41199: GO 41330
41201: LD_INT 2
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41265
41209: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41210: LD_ADDR_VAR 0 9
41214: PUSH
41215: LD_VAR 0 17
41219: PUSH
41220: LD_VAR 0 18
41224: PUSH
41225: LD_VAR 0 19
41229: PUSH
41230: LD_VAR 0 20
41234: PUSH
41235: LD_VAR 0 21
41239: PUSH
41240: LD_VAR 0 22
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: PUSH
41253: LD_VAR 0 4
41257: PUSH
41258: LD_INT 1
41260: PLUS
41261: ARRAY
41262: ST_TO_ADDR
41263: GO 41330
41265: LD_INT 3
41267: DOUBLE
41268: EQUAL
41269: IFTRUE 41273
41271: GO 41329
41273: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41274: LD_ADDR_VAR 0 9
41278: PUSH
41279: LD_VAR 0 23
41283: PUSH
41284: LD_VAR 0 24
41288: PUSH
41289: LD_VAR 0 25
41293: PUSH
41294: LD_VAR 0 26
41298: PUSH
41299: LD_VAR 0 27
41303: PUSH
41304: LD_VAR 0 28
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: PUSH
41317: LD_VAR 0 4
41321: PUSH
41322: LD_INT 1
41324: PLUS
41325: ARRAY
41326: ST_TO_ADDR
41327: GO 41330
41329: POP
41330: GO 41885
41332: LD_INT 2
41334: DOUBLE
41335: EQUAL
41336: IFTRUE 41346
41338: LD_INT 3
41340: DOUBLE
41341: EQUAL
41342: IFTRUE 41346
41344: GO 41402
41346: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41347: LD_ADDR_VAR 0 9
41351: PUSH
41352: LD_VAR 0 29
41356: PUSH
41357: LD_VAR 0 30
41361: PUSH
41362: LD_VAR 0 31
41366: PUSH
41367: LD_VAR 0 32
41371: PUSH
41372: LD_VAR 0 33
41376: PUSH
41377: LD_VAR 0 34
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: PUSH
41390: LD_VAR 0 4
41394: PUSH
41395: LD_INT 1
41397: PLUS
41398: ARRAY
41399: ST_TO_ADDR
41400: GO 41885
41402: LD_INT 16
41404: DOUBLE
41405: EQUAL
41406: IFTRUE 41464
41408: LD_INT 17
41410: DOUBLE
41411: EQUAL
41412: IFTRUE 41464
41414: LD_INT 18
41416: DOUBLE
41417: EQUAL
41418: IFTRUE 41464
41420: LD_INT 19
41422: DOUBLE
41423: EQUAL
41424: IFTRUE 41464
41426: LD_INT 22
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41464
41432: LD_INT 20
41434: DOUBLE
41435: EQUAL
41436: IFTRUE 41464
41438: LD_INT 21
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41464
41444: LD_INT 23
41446: DOUBLE
41447: EQUAL
41448: IFTRUE 41464
41450: LD_INT 24
41452: DOUBLE
41453: EQUAL
41454: IFTRUE 41464
41456: LD_INT 25
41458: DOUBLE
41459: EQUAL
41460: IFTRUE 41464
41462: GO 41520
41464: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41465: LD_ADDR_VAR 0 9
41469: PUSH
41470: LD_VAR 0 35
41474: PUSH
41475: LD_VAR 0 36
41479: PUSH
41480: LD_VAR 0 37
41484: PUSH
41485: LD_VAR 0 38
41489: PUSH
41490: LD_VAR 0 39
41494: PUSH
41495: LD_VAR 0 40
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: PUSH
41508: LD_VAR 0 4
41512: PUSH
41513: LD_INT 1
41515: PLUS
41516: ARRAY
41517: ST_TO_ADDR
41518: GO 41885
41520: LD_INT 6
41522: DOUBLE
41523: EQUAL
41524: IFTRUE 41576
41526: LD_INT 7
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41576
41532: LD_INT 8
41534: DOUBLE
41535: EQUAL
41536: IFTRUE 41576
41538: LD_INT 13
41540: DOUBLE
41541: EQUAL
41542: IFTRUE 41576
41544: LD_INT 12
41546: DOUBLE
41547: EQUAL
41548: IFTRUE 41576
41550: LD_INT 15
41552: DOUBLE
41553: EQUAL
41554: IFTRUE 41576
41556: LD_INT 11
41558: DOUBLE
41559: EQUAL
41560: IFTRUE 41576
41562: LD_INT 14
41564: DOUBLE
41565: EQUAL
41566: IFTRUE 41576
41568: LD_INT 10
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41576
41574: GO 41632
41576: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41577: LD_ADDR_VAR 0 9
41581: PUSH
41582: LD_VAR 0 41
41586: PUSH
41587: LD_VAR 0 42
41591: PUSH
41592: LD_VAR 0 43
41596: PUSH
41597: LD_VAR 0 44
41601: PUSH
41602: LD_VAR 0 45
41606: PUSH
41607: LD_VAR 0 46
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: PUSH
41620: LD_VAR 0 4
41624: PUSH
41625: LD_INT 1
41627: PLUS
41628: ARRAY
41629: ST_TO_ADDR
41630: GO 41885
41632: LD_INT 36
41634: DOUBLE
41635: EQUAL
41636: IFTRUE 41640
41638: GO 41696
41640: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41641: LD_ADDR_VAR 0 9
41645: PUSH
41646: LD_VAR 0 47
41650: PUSH
41651: LD_VAR 0 48
41655: PUSH
41656: LD_VAR 0 49
41660: PUSH
41661: LD_VAR 0 50
41665: PUSH
41666: LD_VAR 0 51
41670: PUSH
41671: LD_VAR 0 52
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: PUSH
41684: LD_VAR 0 4
41688: PUSH
41689: LD_INT 1
41691: PLUS
41692: ARRAY
41693: ST_TO_ADDR
41694: GO 41885
41696: LD_INT 4
41698: DOUBLE
41699: EQUAL
41700: IFTRUE 41722
41702: LD_INT 5
41704: DOUBLE
41705: EQUAL
41706: IFTRUE 41722
41708: LD_INT 34
41710: DOUBLE
41711: EQUAL
41712: IFTRUE 41722
41714: LD_INT 37
41716: DOUBLE
41717: EQUAL
41718: IFTRUE 41722
41720: GO 41778
41722: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41723: LD_ADDR_VAR 0 9
41727: PUSH
41728: LD_VAR 0 53
41732: PUSH
41733: LD_VAR 0 54
41737: PUSH
41738: LD_VAR 0 55
41742: PUSH
41743: LD_VAR 0 56
41747: PUSH
41748: LD_VAR 0 57
41752: PUSH
41753: LD_VAR 0 58
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: PUSH
41766: LD_VAR 0 4
41770: PUSH
41771: LD_INT 1
41773: PLUS
41774: ARRAY
41775: ST_TO_ADDR
41776: GO 41885
41778: LD_INT 31
41780: DOUBLE
41781: EQUAL
41782: IFTRUE 41828
41784: LD_INT 32
41786: DOUBLE
41787: EQUAL
41788: IFTRUE 41828
41790: LD_INT 33
41792: DOUBLE
41793: EQUAL
41794: IFTRUE 41828
41796: LD_INT 27
41798: DOUBLE
41799: EQUAL
41800: IFTRUE 41828
41802: LD_INT 26
41804: DOUBLE
41805: EQUAL
41806: IFTRUE 41828
41808: LD_INT 28
41810: DOUBLE
41811: EQUAL
41812: IFTRUE 41828
41814: LD_INT 29
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41828
41820: LD_INT 30
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41884
41828: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41829: LD_ADDR_VAR 0 9
41833: PUSH
41834: LD_VAR 0 59
41838: PUSH
41839: LD_VAR 0 60
41843: PUSH
41844: LD_VAR 0 61
41848: PUSH
41849: LD_VAR 0 62
41853: PUSH
41854: LD_VAR 0 63
41858: PUSH
41859: LD_VAR 0 64
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: PUSH
41872: LD_VAR 0 4
41876: PUSH
41877: LD_INT 1
41879: PLUS
41880: ARRAY
41881: ST_TO_ADDR
41882: GO 41885
41884: POP
// temp_list2 = [ ] ;
41885: LD_ADDR_VAR 0 10
41889: PUSH
41890: EMPTY
41891: ST_TO_ADDR
// for i in temp_list do
41892: LD_ADDR_VAR 0 8
41896: PUSH
41897: LD_VAR 0 9
41901: PUSH
41902: FOR_IN
41903: IFFALSE 41955
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41905: LD_ADDR_VAR 0 10
41909: PUSH
41910: LD_VAR 0 10
41914: PUSH
41915: LD_VAR 0 8
41919: PUSH
41920: LD_INT 1
41922: ARRAY
41923: PUSH
41924: LD_VAR 0 2
41928: PLUS
41929: PUSH
41930: LD_VAR 0 8
41934: PUSH
41935: LD_INT 2
41937: ARRAY
41938: PUSH
41939: LD_VAR 0 3
41943: PLUS
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: EMPTY
41950: LIST
41951: ADD
41952: ST_TO_ADDR
41953: GO 41902
41955: POP
41956: POP
// result = temp_list2 ;
41957: LD_ADDR_VAR 0 7
41961: PUSH
41962: LD_VAR 0 10
41966: ST_TO_ADDR
// end ;
41967: LD_VAR 0 7
41971: RET
// export function EnemyInRange ( unit , dist ) ; begin
41972: LD_INT 0
41974: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41975: LD_ADDR_VAR 0 3
41979: PUSH
41980: LD_VAR 0 1
41984: PPUSH
41985: CALL_OW 255
41989: PPUSH
41990: LD_VAR 0 1
41994: PPUSH
41995: CALL_OW 250
41999: PPUSH
42000: LD_VAR 0 1
42004: PPUSH
42005: CALL_OW 251
42009: PPUSH
42010: LD_VAR 0 2
42014: PPUSH
42015: CALL 15345 0 4
42019: PUSH
42020: LD_INT 4
42022: ARRAY
42023: ST_TO_ADDR
// end ;
42024: LD_VAR 0 3
42028: RET
// export function PlayerSeeMe ( unit ) ; begin
42029: LD_INT 0
42031: PPUSH
// result := See ( your_side , unit ) ;
42032: LD_ADDR_VAR 0 2
42036: PUSH
42037: LD_OWVAR 2
42041: PPUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL_OW 292
42051: ST_TO_ADDR
// end ;
42052: LD_VAR 0 2
42056: RET
// export function ReverseDir ( unit ) ; begin
42057: LD_INT 0
42059: PPUSH
// if not unit then
42060: LD_VAR 0 1
42064: NOT
42065: IFFALSE 42069
// exit ;
42067: GO 42092
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42069: LD_ADDR_VAR 0 2
42073: PUSH
42074: LD_VAR 0 1
42078: PPUSH
42079: CALL_OW 254
42083: PUSH
42084: LD_INT 3
42086: PLUS
42087: PUSH
42088: LD_INT 6
42090: MOD
42091: ST_TO_ADDR
// end ;
42092: LD_VAR 0 2
42096: RET
// export function ReverseArray ( array ) ; var i ; begin
42097: LD_INT 0
42099: PPUSH
42100: PPUSH
// if not array then
42101: LD_VAR 0 1
42105: NOT
42106: IFFALSE 42110
// exit ;
42108: GO 42165
// result := [ ] ;
42110: LD_ADDR_VAR 0 2
42114: PUSH
42115: EMPTY
42116: ST_TO_ADDR
// for i := array downto 1 do
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: DOUBLE
42123: LD_VAR 0 1
42127: INC
42128: ST_TO_ADDR
42129: LD_INT 1
42131: PUSH
42132: FOR_DOWNTO
42133: IFFALSE 42163
// result := Join ( result , array [ i ] ) ;
42135: LD_ADDR_VAR 0 2
42139: PUSH
42140: LD_VAR 0 2
42144: PPUSH
42145: LD_VAR 0 1
42149: PUSH
42150: LD_VAR 0 3
42154: ARRAY
42155: PPUSH
42156: CALL 46830 0 2
42160: ST_TO_ADDR
42161: GO 42132
42163: POP
42164: POP
// end ;
42165: LD_VAR 0 2
42169: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42170: LD_INT 0
42172: PPUSH
42173: PPUSH
42174: PPUSH
42175: PPUSH
42176: PPUSH
42177: PPUSH
// if not unit or not hexes then
42178: LD_VAR 0 1
42182: NOT
42183: PUSH
42184: LD_VAR 0 2
42188: NOT
42189: OR
42190: IFFALSE 42194
// exit ;
42192: GO 42317
// dist := 9999 ;
42194: LD_ADDR_VAR 0 5
42198: PUSH
42199: LD_INT 9999
42201: ST_TO_ADDR
// for i = 1 to hexes do
42202: LD_ADDR_VAR 0 4
42206: PUSH
42207: DOUBLE
42208: LD_INT 1
42210: DEC
42211: ST_TO_ADDR
42212: LD_VAR 0 2
42216: PUSH
42217: FOR_TO
42218: IFFALSE 42305
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42220: LD_ADDR_VAR 0 6
42224: PUSH
42225: LD_VAR 0 1
42229: PPUSH
42230: LD_VAR 0 2
42234: PUSH
42235: LD_VAR 0 4
42239: ARRAY
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: LD_VAR 0 2
42249: PUSH
42250: LD_VAR 0 4
42254: ARRAY
42255: PUSH
42256: LD_INT 2
42258: ARRAY
42259: PPUSH
42260: CALL_OW 297
42264: ST_TO_ADDR
// if tdist < dist then
42265: LD_VAR 0 6
42269: PUSH
42270: LD_VAR 0 5
42274: LESS
42275: IFFALSE 42303
// begin hex := hexes [ i ] ;
42277: LD_ADDR_VAR 0 8
42281: PUSH
42282: LD_VAR 0 2
42286: PUSH
42287: LD_VAR 0 4
42291: ARRAY
42292: ST_TO_ADDR
// dist := tdist ;
42293: LD_ADDR_VAR 0 5
42297: PUSH
42298: LD_VAR 0 6
42302: ST_TO_ADDR
// end ; end ;
42303: GO 42217
42305: POP
42306: POP
// result := hex ;
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_VAR 0 8
42316: ST_TO_ADDR
// end ;
42317: LD_VAR 0 3
42321: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42322: LD_INT 0
42324: PPUSH
42325: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42326: LD_VAR 0 1
42330: NOT
42331: PUSH
42332: LD_VAR 0 1
42336: PUSH
42337: LD_INT 21
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 23
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PPUSH
42361: CALL_OW 69
42365: IN
42366: NOT
42367: OR
42368: IFFALSE 42372
// exit ;
42370: GO 42419
// for i = 1 to 3 do
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: DOUBLE
42378: LD_INT 1
42380: DEC
42381: ST_TO_ADDR
42382: LD_INT 3
42384: PUSH
42385: FOR_TO
42386: IFFALSE 42417
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42388: LD_VAR 0 1
42392: PPUSH
42393: CALL_OW 250
42397: PPUSH
42398: LD_VAR 0 1
42402: PPUSH
42403: CALL_OW 251
42407: PPUSH
42408: LD_INT 1
42410: PPUSH
42411: CALL_OW 453
42415: GO 42385
42417: POP
42418: POP
// end ;
42419: LD_VAR 0 2
42423: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42424: LD_INT 0
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
// if not unit or not enemy_unit then
42432: LD_VAR 0 1
42436: NOT
42437: PUSH
42438: LD_VAR 0 2
42442: NOT
42443: OR
42444: IFFALSE 42448
// exit ;
42446: GO 42915
// if GetLives ( i ) < 250 then
42448: LD_VAR 0 4
42452: PPUSH
42453: CALL_OW 256
42457: PUSH
42458: LD_INT 250
42460: LESS
42461: IFFALSE 42474
// begin ComAutodestruct ( i ) ;
42463: LD_VAR 0 4
42467: PPUSH
42468: CALL 42322 0 1
// exit ;
42472: GO 42915
// end ; x := GetX ( enemy_unit ) ;
42474: LD_ADDR_VAR 0 7
42478: PUSH
42479: LD_VAR 0 2
42483: PPUSH
42484: CALL_OW 250
42488: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42489: LD_ADDR_VAR 0 8
42493: PUSH
42494: LD_VAR 0 2
42498: PPUSH
42499: CALL_OW 251
42503: ST_TO_ADDR
// if not x or not y then
42504: LD_VAR 0 7
42508: NOT
42509: PUSH
42510: LD_VAR 0 8
42514: NOT
42515: OR
42516: IFFALSE 42520
// exit ;
42518: GO 42915
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42520: LD_ADDR_VAR 0 6
42524: PUSH
42525: LD_VAR 0 7
42529: PPUSH
42530: LD_INT 0
42532: PPUSH
42533: LD_INT 4
42535: PPUSH
42536: CALL_OW 272
42540: PUSH
42541: LD_VAR 0 8
42545: PPUSH
42546: LD_INT 0
42548: PPUSH
42549: LD_INT 4
42551: PPUSH
42552: CALL_OW 273
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_VAR 0 7
42565: PPUSH
42566: LD_INT 1
42568: PPUSH
42569: LD_INT 4
42571: PPUSH
42572: CALL_OW 272
42576: PUSH
42577: LD_VAR 0 8
42581: PPUSH
42582: LD_INT 1
42584: PPUSH
42585: LD_INT 4
42587: PPUSH
42588: CALL_OW 273
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_VAR 0 7
42601: PPUSH
42602: LD_INT 2
42604: PPUSH
42605: LD_INT 4
42607: PPUSH
42608: CALL_OW 272
42612: PUSH
42613: LD_VAR 0 8
42617: PPUSH
42618: LD_INT 2
42620: PPUSH
42621: LD_INT 4
42623: PPUSH
42624: CALL_OW 273
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_VAR 0 7
42637: PPUSH
42638: LD_INT 3
42640: PPUSH
42641: LD_INT 4
42643: PPUSH
42644: CALL_OW 272
42648: PUSH
42649: LD_VAR 0 8
42653: PPUSH
42654: LD_INT 3
42656: PPUSH
42657: LD_INT 4
42659: PPUSH
42660: CALL_OW 273
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_VAR 0 7
42673: PPUSH
42674: LD_INT 4
42676: PPUSH
42677: LD_INT 4
42679: PPUSH
42680: CALL_OW 272
42684: PUSH
42685: LD_VAR 0 8
42689: PPUSH
42690: LD_INT 4
42692: PPUSH
42693: LD_INT 4
42695: PPUSH
42696: CALL_OW 273
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_VAR 0 7
42709: PPUSH
42710: LD_INT 5
42712: PPUSH
42713: LD_INT 4
42715: PPUSH
42716: CALL_OW 272
42720: PUSH
42721: LD_VAR 0 8
42725: PPUSH
42726: LD_INT 5
42728: PPUSH
42729: LD_INT 4
42731: PPUSH
42732: CALL_OW 273
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: ST_TO_ADDR
// for i = tmp downto 1 do
42749: LD_ADDR_VAR 0 4
42753: PUSH
42754: DOUBLE
42755: LD_VAR 0 6
42759: INC
42760: ST_TO_ADDR
42761: LD_INT 1
42763: PUSH
42764: FOR_DOWNTO
42765: IFFALSE 42866
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42767: LD_VAR 0 6
42771: PUSH
42772: LD_VAR 0 4
42776: ARRAY
42777: PUSH
42778: LD_INT 1
42780: ARRAY
42781: PPUSH
42782: LD_VAR 0 6
42786: PUSH
42787: LD_VAR 0 4
42791: ARRAY
42792: PUSH
42793: LD_INT 2
42795: ARRAY
42796: PPUSH
42797: CALL_OW 488
42801: NOT
42802: PUSH
42803: LD_VAR 0 6
42807: PUSH
42808: LD_VAR 0 4
42812: ARRAY
42813: PUSH
42814: LD_INT 1
42816: ARRAY
42817: PPUSH
42818: LD_VAR 0 6
42822: PUSH
42823: LD_VAR 0 4
42827: ARRAY
42828: PUSH
42829: LD_INT 2
42831: ARRAY
42832: PPUSH
42833: CALL_OW 428
42837: PUSH
42838: LD_INT 0
42840: NONEQUAL
42841: OR
42842: IFFALSE 42864
// tmp := Delete ( tmp , i ) ;
42844: LD_ADDR_VAR 0 6
42848: PUSH
42849: LD_VAR 0 6
42853: PPUSH
42854: LD_VAR 0 4
42858: PPUSH
42859: CALL_OW 3
42863: ST_TO_ADDR
42864: GO 42764
42866: POP
42867: POP
// j := GetClosestHex ( unit , tmp ) ;
42868: LD_ADDR_VAR 0 5
42872: PUSH
42873: LD_VAR 0 1
42877: PPUSH
42878: LD_VAR 0 6
42882: PPUSH
42883: CALL 42170 0 2
42887: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42888: LD_VAR 0 1
42892: PPUSH
42893: LD_VAR 0 5
42897: PUSH
42898: LD_INT 1
42900: ARRAY
42901: PPUSH
42902: LD_VAR 0 5
42906: PUSH
42907: LD_INT 2
42909: ARRAY
42910: PPUSH
42911: CALL_OW 111
// end ;
42915: LD_VAR 0 3
42919: RET
// export function PrepareApemanSoldier ( ) ; begin
42920: LD_INT 0
42922: PPUSH
// uc_nation := 0 ;
42923: LD_ADDR_OWVAR 21
42927: PUSH
42928: LD_INT 0
42930: ST_TO_ADDR
// hc_sex := sex_male ;
42931: LD_ADDR_OWVAR 27
42935: PUSH
42936: LD_INT 1
42938: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42939: LD_ADDR_OWVAR 28
42943: PUSH
42944: LD_INT 15
42946: ST_TO_ADDR
// hc_gallery :=  ;
42947: LD_ADDR_OWVAR 33
42951: PUSH
42952: LD_STRING 
42954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42955: LD_ADDR_OWVAR 31
42959: PUSH
42960: LD_INT 0
42962: PPUSH
42963: LD_INT 3
42965: PPUSH
42966: CALL_OW 12
42970: PUSH
42971: LD_INT 0
42973: PPUSH
42974: LD_INT 3
42976: PPUSH
42977: CALL_OW 12
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// end ;
42994: LD_VAR 0 1
42998: RET
// export function PrepareApemanEngineer ( ) ; begin
42999: LD_INT 0
43001: PPUSH
// uc_nation := 0 ;
43002: LD_ADDR_OWVAR 21
43006: PUSH
43007: LD_INT 0
43009: ST_TO_ADDR
// hc_sex := sex_male ;
43010: LD_ADDR_OWVAR 27
43014: PUSH
43015: LD_INT 1
43017: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43018: LD_ADDR_OWVAR 28
43022: PUSH
43023: LD_INT 16
43025: ST_TO_ADDR
// hc_gallery :=  ;
43026: LD_ADDR_OWVAR 33
43030: PUSH
43031: LD_STRING 
43033: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43034: LD_ADDR_OWVAR 31
43038: PUSH
43039: LD_INT 0
43041: PPUSH
43042: LD_INT 3
43044: PPUSH
43045: CALL_OW 12
43049: PUSH
43050: LD_INT 0
43052: PPUSH
43053: LD_INT 3
43055: PPUSH
43056: CALL_OW 12
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: ST_TO_ADDR
// end ;
43073: LD_VAR 0 1
43077: RET
// export function PrepareApeman ( agressivity ) ; begin
43078: LD_INT 0
43080: PPUSH
// uc_side := 0 ;
43081: LD_ADDR_OWVAR 20
43085: PUSH
43086: LD_INT 0
43088: ST_TO_ADDR
// uc_nation := 0 ;
43089: LD_ADDR_OWVAR 21
43093: PUSH
43094: LD_INT 0
43096: ST_TO_ADDR
// hc_sex := sex_male ;
43097: LD_ADDR_OWVAR 27
43101: PUSH
43102: LD_INT 1
43104: ST_TO_ADDR
// hc_class := class_apeman ;
43105: LD_ADDR_OWVAR 28
43109: PUSH
43110: LD_INT 12
43112: ST_TO_ADDR
// hc_gallery :=  ;
43113: LD_ADDR_OWVAR 33
43117: PUSH
43118: LD_STRING 
43120: ST_TO_ADDR
// if agressivity = 0 then
43121: LD_VAR 0 1
43125: PUSH
43126: LD_INT 0
43128: EQUAL
43129: IFFALSE 43141
// hc_agressivity := 0 else
43131: LD_ADDR_OWVAR 35
43135: PUSH
43136: LD_INT 0
43138: ST_TO_ADDR
43139: GO 43162
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43141: LD_ADDR_OWVAR 35
43145: PUSH
43146: LD_VAR 0 1
43150: NEG
43151: PPUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 12
43161: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43162: LD_ADDR_OWVAR 31
43166: PUSH
43167: LD_INT 0
43169: PPUSH
43170: LD_INT 3
43172: PPUSH
43173: CALL_OW 12
43177: PUSH
43178: LD_INT 0
43180: PPUSH
43181: LD_INT 3
43183: PPUSH
43184: CALL_OW 12
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// end ;
43201: LD_VAR 0 2
43205: RET
// export function PrepareTiger ( agressivity ) ; begin
43206: LD_INT 0
43208: PPUSH
// uc_side := 0 ;
43209: LD_ADDR_OWVAR 20
43213: PUSH
43214: LD_INT 0
43216: ST_TO_ADDR
// uc_nation := 0 ;
43217: LD_ADDR_OWVAR 21
43221: PUSH
43222: LD_INT 0
43224: ST_TO_ADDR
// hc_class := class_tiger ;
43225: LD_ADDR_OWVAR 28
43229: PUSH
43230: LD_INT 14
43232: ST_TO_ADDR
// hc_gallery :=  ;
43233: LD_ADDR_OWVAR 33
43237: PUSH
43238: LD_STRING 
43240: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43241: LD_ADDR_OWVAR 35
43245: PUSH
43246: LD_VAR 0 1
43250: NEG
43251: PPUSH
43252: LD_VAR 0 1
43256: PPUSH
43257: CALL_OW 12
43261: ST_TO_ADDR
// end ;
43262: LD_VAR 0 2
43266: RET
// export function PrepareEnchidna ( ) ; begin
43267: LD_INT 0
43269: PPUSH
// uc_side := 0 ;
43270: LD_ADDR_OWVAR 20
43274: PUSH
43275: LD_INT 0
43277: ST_TO_ADDR
// uc_nation := 0 ;
43278: LD_ADDR_OWVAR 21
43282: PUSH
43283: LD_INT 0
43285: ST_TO_ADDR
// hc_class := class_baggie ;
43286: LD_ADDR_OWVAR 28
43290: PUSH
43291: LD_INT 13
43293: ST_TO_ADDR
// hc_gallery :=  ;
43294: LD_ADDR_OWVAR 33
43298: PUSH
43299: LD_STRING 
43301: ST_TO_ADDR
// end ;
43302: LD_VAR 0 1
43306: RET
// export function PrepareFrog ( ) ; begin
43307: LD_INT 0
43309: PPUSH
// uc_side := 0 ;
43310: LD_ADDR_OWVAR 20
43314: PUSH
43315: LD_INT 0
43317: ST_TO_ADDR
// uc_nation := 0 ;
43318: LD_ADDR_OWVAR 21
43322: PUSH
43323: LD_INT 0
43325: ST_TO_ADDR
// hc_class := class_frog ;
43326: LD_ADDR_OWVAR 28
43330: PUSH
43331: LD_INT 19
43333: ST_TO_ADDR
// hc_gallery :=  ;
43334: LD_ADDR_OWVAR 33
43338: PUSH
43339: LD_STRING 
43341: ST_TO_ADDR
// end ;
43342: LD_VAR 0 1
43346: RET
// export function PrepareFish ( ) ; begin
43347: LD_INT 0
43349: PPUSH
// uc_side := 0 ;
43350: LD_ADDR_OWVAR 20
43354: PUSH
43355: LD_INT 0
43357: ST_TO_ADDR
// uc_nation := 0 ;
43358: LD_ADDR_OWVAR 21
43362: PUSH
43363: LD_INT 0
43365: ST_TO_ADDR
// hc_class := class_fish ;
43366: LD_ADDR_OWVAR 28
43370: PUSH
43371: LD_INT 20
43373: ST_TO_ADDR
// hc_gallery :=  ;
43374: LD_ADDR_OWVAR 33
43378: PUSH
43379: LD_STRING 
43381: ST_TO_ADDR
// end ;
43382: LD_VAR 0 1
43386: RET
// export function PrepareBird ( ) ; begin
43387: LD_INT 0
43389: PPUSH
// uc_side := 0 ;
43390: LD_ADDR_OWVAR 20
43394: PUSH
43395: LD_INT 0
43397: ST_TO_ADDR
// uc_nation := 0 ;
43398: LD_ADDR_OWVAR 21
43402: PUSH
43403: LD_INT 0
43405: ST_TO_ADDR
// hc_class := class_phororhacos ;
43406: LD_ADDR_OWVAR 28
43410: PUSH
43411: LD_INT 18
43413: ST_TO_ADDR
// hc_gallery :=  ;
43414: LD_ADDR_OWVAR 33
43418: PUSH
43419: LD_STRING 
43421: ST_TO_ADDR
// end ;
43422: LD_VAR 0 1
43426: RET
// export function PrepareHorse ( ) ; begin
43427: LD_INT 0
43429: PPUSH
// uc_side := 0 ;
43430: LD_ADDR_OWVAR 20
43434: PUSH
43435: LD_INT 0
43437: ST_TO_ADDR
// uc_nation := 0 ;
43438: LD_ADDR_OWVAR 21
43442: PUSH
43443: LD_INT 0
43445: ST_TO_ADDR
// hc_class := class_horse ;
43446: LD_ADDR_OWVAR 28
43450: PUSH
43451: LD_INT 21
43453: ST_TO_ADDR
// hc_gallery :=  ;
43454: LD_ADDR_OWVAR 33
43458: PUSH
43459: LD_STRING 
43461: ST_TO_ADDR
// end ;
43462: LD_VAR 0 1
43466: RET
// export function PrepareMastodont ( ) ; begin
43467: LD_INT 0
43469: PPUSH
// uc_side := 0 ;
43470: LD_ADDR_OWVAR 20
43474: PUSH
43475: LD_INT 0
43477: ST_TO_ADDR
// uc_nation := 0 ;
43478: LD_ADDR_OWVAR 21
43482: PUSH
43483: LD_INT 0
43485: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43486: LD_ADDR_OWVAR 37
43490: PUSH
43491: LD_INT 31
43493: ST_TO_ADDR
// vc_control := control_rider ;
43494: LD_ADDR_OWVAR 38
43498: PUSH
43499: LD_INT 4
43501: ST_TO_ADDR
// end ;
43502: LD_VAR 0 1
43506: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43507: LD_INT 0
43509: PPUSH
43510: PPUSH
43511: PPUSH
// uc_side = 0 ;
43512: LD_ADDR_OWVAR 20
43516: PUSH
43517: LD_INT 0
43519: ST_TO_ADDR
// uc_nation = 0 ;
43520: LD_ADDR_OWVAR 21
43524: PUSH
43525: LD_INT 0
43527: ST_TO_ADDR
// InitHc_All ( ) ;
43528: CALL_OW 584
// InitVc ;
43532: CALL_OW 20
// if mastodonts then
43536: LD_VAR 0 6
43540: IFFALSE 43607
// for i = 1 to mastodonts do
43542: LD_ADDR_VAR 0 11
43546: PUSH
43547: DOUBLE
43548: LD_INT 1
43550: DEC
43551: ST_TO_ADDR
43552: LD_VAR 0 6
43556: PUSH
43557: FOR_TO
43558: IFFALSE 43605
// begin vc_chassis := 31 ;
43560: LD_ADDR_OWVAR 37
43564: PUSH
43565: LD_INT 31
43567: ST_TO_ADDR
// vc_control := control_rider ;
43568: LD_ADDR_OWVAR 38
43572: PUSH
43573: LD_INT 4
43575: ST_TO_ADDR
// animal := CreateVehicle ;
43576: LD_ADDR_VAR 0 12
43580: PUSH
43581: CALL_OW 45
43585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43586: LD_VAR 0 12
43590: PPUSH
43591: LD_VAR 0 8
43595: PPUSH
43596: LD_INT 0
43598: PPUSH
43599: CALL 45735 0 3
// end ;
43603: GO 43557
43605: POP
43606: POP
// if horses then
43607: LD_VAR 0 5
43611: IFFALSE 43678
// for i = 1 to horses do
43613: LD_ADDR_VAR 0 11
43617: PUSH
43618: DOUBLE
43619: LD_INT 1
43621: DEC
43622: ST_TO_ADDR
43623: LD_VAR 0 5
43627: PUSH
43628: FOR_TO
43629: IFFALSE 43676
// begin hc_class := 21 ;
43631: LD_ADDR_OWVAR 28
43635: PUSH
43636: LD_INT 21
43638: ST_TO_ADDR
// hc_gallery :=  ;
43639: LD_ADDR_OWVAR 33
43643: PUSH
43644: LD_STRING 
43646: ST_TO_ADDR
// animal := CreateHuman ;
43647: LD_ADDR_VAR 0 12
43651: PUSH
43652: CALL_OW 44
43656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43657: LD_VAR 0 12
43661: PPUSH
43662: LD_VAR 0 8
43666: PPUSH
43667: LD_INT 0
43669: PPUSH
43670: CALL 45735 0 3
// end ;
43674: GO 43628
43676: POP
43677: POP
// if birds then
43678: LD_VAR 0 1
43682: IFFALSE 43749
// for i = 1 to birds do
43684: LD_ADDR_VAR 0 11
43688: PUSH
43689: DOUBLE
43690: LD_INT 1
43692: DEC
43693: ST_TO_ADDR
43694: LD_VAR 0 1
43698: PUSH
43699: FOR_TO
43700: IFFALSE 43747
// begin hc_class := 18 ;
43702: LD_ADDR_OWVAR 28
43706: PUSH
43707: LD_INT 18
43709: ST_TO_ADDR
// hc_gallery =  ;
43710: LD_ADDR_OWVAR 33
43714: PUSH
43715: LD_STRING 
43717: ST_TO_ADDR
// animal := CreateHuman ;
43718: LD_ADDR_VAR 0 12
43722: PUSH
43723: CALL_OW 44
43727: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43728: LD_VAR 0 12
43732: PPUSH
43733: LD_VAR 0 8
43737: PPUSH
43738: LD_INT 0
43740: PPUSH
43741: CALL 45735 0 3
// end ;
43745: GO 43699
43747: POP
43748: POP
// if tigers then
43749: LD_VAR 0 2
43753: IFFALSE 43837
// for i = 1 to tigers do
43755: LD_ADDR_VAR 0 11
43759: PUSH
43760: DOUBLE
43761: LD_INT 1
43763: DEC
43764: ST_TO_ADDR
43765: LD_VAR 0 2
43769: PUSH
43770: FOR_TO
43771: IFFALSE 43835
// begin hc_class = class_tiger ;
43773: LD_ADDR_OWVAR 28
43777: PUSH
43778: LD_INT 14
43780: ST_TO_ADDR
// hc_gallery =  ;
43781: LD_ADDR_OWVAR 33
43785: PUSH
43786: LD_STRING 
43788: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43789: LD_ADDR_OWVAR 35
43793: PUSH
43794: LD_INT 7
43796: NEG
43797: PPUSH
43798: LD_INT 7
43800: PPUSH
43801: CALL_OW 12
43805: ST_TO_ADDR
// animal := CreateHuman ;
43806: LD_ADDR_VAR 0 12
43810: PUSH
43811: CALL_OW 44
43815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43816: LD_VAR 0 12
43820: PPUSH
43821: LD_VAR 0 8
43825: PPUSH
43826: LD_INT 0
43828: PPUSH
43829: CALL 45735 0 3
// end ;
43833: GO 43770
43835: POP
43836: POP
// if apemans then
43837: LD_VAR 0 3
43841: IFFALSE 43964
// for i = 1 to apemans do
43843: LD_ADDR_VAR 0 11
43847: PUSH
43848: DOUBLE
43849: LD_INT 1
43851: DEC
43852: ST_TO_ADDR
43853: LD_VAR 0 3
43857: PUSH
43858: FOR_TO
43859: IFFALSE 43962
// begin hc_class = class_apeman ;
43861: LD_ADDR_OWVAR 28
43865: PUSH
43866: LD_INT 12
43868: ST_TO_ADDR
// hc_gallery =  ;
43869: LD_ADDR_OWVAR 33
43873: PUSH
43874: LD_STRING 
43876: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43877: LD_ADDR_OWVAR 35
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PPUSH
43886: LD_INT 2
43888: PPUSH
43889: CALL_OW 12
43893: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43894: LD_ADDR_OWVAR 31
43898: PUSH
43899: LD_INT 1
43901: PPUSH
43902: LD_INT 3
43904: PPUSH
43905: CALL_OW 12
43909: PUSH
43910: LD_INT 1
43912: PPUSH
43913: LD_INT 3
43915: PPUSH
43916: CALL_OW 12
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// animal := CreateHuman ;
43933: LD_ADDR_VAR 0 12
43937: PUSH
43938: CALL_OW 44
43942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43943: LD_VAR 0 12
43947: PPUSH
43948: LD_VAR 0 8
43952: PPUSH
43953: LD_INT 0
43955: PPUSH
43956: CALL 45735 0 3
// end ;
43960: GO 43858
43962: POP
43963: POP
// if enchidnas then
43964: LD_VAR 0 4
43968: IFFALSE 44035
// for i = 1 to enchidnas do
43970: LD_ADDR_VAR 0 11
43974: PUSH
43975: DOUBLE
43976: LD_INT 1
43978: DEC
43979: ST_TO_ADDR
43980: LD_VAR 0 4
43984: PUSH
43985: FOR_TO
43986: IFFALSE 44033
// begin hc_class = 13 ;
43988: LD_ADDR_OWVAR 28
43992: PUSH
43993: LD_INT 13
43995: ST_TO_ADDR
// hc_gallery =  ;
43996: LD_ADDR_OWVAR 33
44000: PUSH
44001: LD_STRING 
44003: ST_TO_ADDR
// animal := CreateHuman ;
44004: LD_ADDR_VAR 0 12
44008: PUSH
44009: CALL_OW 44
44013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44014: LD_VAR 0 12
44018: PPUSH
44019: LD_VAR 0 8
44023: PPUSH
44024: LD_INT 0
44026: PPUSH
44027: CALL 45735 0 3
// end ;
44031: GO 43985
44033: POP
44034: POP
// if fishes then
44035: LD_VAR 0 7
44039: IFFALSE 44106
// for i = 1 to fishes do
44041: LD_ADDR_VAR 0 11
44045: PUSH
44046: DOUBLE
44047: LD_INT 1
44049: DEC
44050: ST_TO_ADDR
44051: LD_VAR 0 7
44055: PUSH
44056: FOR_TO
44057: IFFALSE 44104
// begin hc_class = 20 ;
44059: LD_ADDR_OWVAR 28
44063: PUSH
44064: LD_INT 20
44066: ST_TO_ADDR
// hc_gallery =  ;
44067: LD_ADDR_OWVAR 33
44071: PUSH
44072: LD_STRING 
44074: ST_TO_ADDR
// animal := CreateHuman ;
44075: LD_ADDR_VAR 0 12
44079: PUSH
44080: CALL_OW 44
44084: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44085: LD_VAR 0 12
44089: PPUSH
44090: LD_VAR 0 9
44094: PPUSH
44095: LD_INT 0
44097: PPUSH
44098: CALL 45735 0 3
// end ;
44102: GO 44056
44104: POP
44105: POP
// end ;
44106: LD_VAR 0 10
44110: RET
// export function WantHeal ( sci , unit ) ; begin
44111: LD_INT 0
44113: PPUSH
// if GetTaskList ( sci ) > 0 then
44114: LD_VAR 0 1
44118: PPUSH
44119: CALL_OW 437
44123: PUSH
44124: LD_INT 0
44126: GREATER
44127: IFFALSE 44197
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44129: LD_VAR 0 1
44133: PPUSH
44134: CALL_OW 437
44138: PUSH
44139: LD_INT 1
44141: ARRAY
44142: PUSH
44143: LD_INT 1
44145: ARRAY
44146: PUSH
44147: LD_STRING l
44149: EQUAL
44150: PUSH
44151: LD_VAR 0 1
44155: PPUSH
44156: CALL_OW 437
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PUSH
44165: LD_INT 4
44167: ARRAY
44168: PUSH
44169: LD_VAR 0 2
44173: EQUAL
44174: AND
44175: IFFALSE 44187
// result := true else
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: LD_INT 1
44184: ST_TO_ADDR
44185: GO 44195
// result := false ;
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_INT 0
44194: ST_TO_ADDR
// end else
44195: GO 44205
// result := false ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_INT 0
44204: ST_TO_ADDR
// end ;
44205: LD_VAR 0 3
44209: RET
// export function HealTarget ( sci ) ; begin
44210: LD_INT 0
44212: PPUSH
// if not sci then
44213: LD_VAR 0 1
44217: NOT
44218: IFFALSE 44222
// exit ;
44220: GO 44287
// result := 0 ;
44222: LD_ADDR_VAR 0 2
44226: PUSH
44227: LD_INT 0
44229: ST_TO_ADDR
// if GetTaskList ( sci ) then
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 437
44239: IFFALSE 44287
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 437
44250: PUSH
44251: LD_INT 1
44253: ARRAY
44254: PUSH
44255: LD_INT 1
44257: ARRAY
44258: PUSH
44259: LD_STRING l
44261: EQUAL
44262: IFFALSE 44287
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44264: LD_ADDR_VAR 0 2
44268: PUSH
44269: LD_VAR 0 1
44273: PPUSH
44274: CALL_OW 437
44278: PUSH
44279: LD_INT 1
44281: ARRAY
44282: PUSH
44283: LD_INT 4
44285: ARRAY
44286: ST_TO_ADDR
// end ;
44287: LD_VAR 0 2
44291: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44292: LD_INT 0
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
// if not base_units then
44298: LD_VAR 0 1
44302: NOT
44303: IFFALSE 44307
// exit ;
44305: GO 44394
// result := false ;
44307: LD_ADDR_VAR 0 2
44311: PUSH
44312: LD_INT 0
44314: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44315: LD_ADDR_VAR 0 5
44319: PUSH
44320: LD_VAR 0 1
44324: PPUSH
44325: LD_INT 21
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PPUSH
44335: CALL_OW 72
44339: ST_TO_ADDR
// if not tmp then
44340: LD_VAR 0 5
44344: NOT
44345: IFFALSE 44349
// exit ;
44347: GO 44394
// for i in tmp do
44349: LD_ADDR_VAR 0 3
44353: PUSH
44354: LD_VAR 0 5
44358: PUSH
44359: FOR_IN
44360: IFFALSE 44392
// begin result := EnemyInRange ( i , 22 ) ;
44362: LD_ADDR_VAR 0 2
44366: PUSH
44367: LD_VAR 0 3
44371: PPUSH
44372: LD_INT 22
44374: PPUSH
44375: CALL 41972 0 2
44379: ST_TO_ADDR
// if result then
44380: LD_VAR 0 2
44384: IFFALSE 44390
// exit ;
44386: POP
44387: POP
44388: GO 44394
// end ;
44390: GO 44359
44392: POP
44393: POP
// end ;
44394: LD_VAR 0 2
44398: RET
// export function FilterByTag ( units , tag ) ; begin
44399: LD_INT 0
44401: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44402: LD_ADDR_VAR 0 3
44406: PUSH
44407: LD_VAR 0 1
44411: PPUSH
44412: LD_INT 120
44414: PUSH
44415: LD_VAR 0 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PPUSH
44424: CALL_OW 72
44428: ST_TO_ADDR
// end ;
44429: LD_VAR 0 3
44433: RET
// export function IsDriver ( un ) ; begin
44434: LD_INT 0
44436: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44437: LD_ADDR_VAR 0 2
44441: PUSH
44442: LD_VAR 0 1
44446: PUSH
44447: LD_INT 55
44449: PUSH
44450: EMPTY
44451: LIST
44452: PPUSH
44453: CALL_OW 69
44457: IN
44458: ST_TO_ADDR
// end ;
44459: LD_VAR 0 2
44463: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44464: LD_INT 0
44466: PPUSH
44467: PPUSH
// list := [ ] ;
44468: LD_ADDR_VAR 0 5
44472: PUSH
44473: EMPTY
44474: ST_TO_ADDR
// case d of 0 :
44475: LD_VAR 0 3
44479: PUSH
44480: LD_INT 0
44482: DOUBLE
44483: EQUAL
44484: IFTRUE 44488
44486: GO 44621
44488: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44489: LD_ADDR_VAR 0 5
44493: PUSH
44494: LD_VAR 0 1
44498: PUSH
44499: LD_INT 4
44501: MINUS
44502: PUSH
44503: LD_VAR 0 2
44507: PUSH
44508: LD_INT 4
44510: MINUS
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: PUSH
44520: LD_VAR 0 1
44524: PUSH
44525: LD_INT 3
44527: MINUS
44528: PUSH
44529: LD_VAR 0 2
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: PUSH
44542: LD_VAR 0 1
44546: PUSH
44547: LD_INT 4
44549: PLUS
44550: PUSH
44551: LD_VAR 0 2
44555: PUSH
44556: LD_INT 4
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: PUSH
44564: LD_VAR 0 1
44568: PUSH
44569: LD_INT 3
44571: PLUS
44572: PUSH
44573: LD_VAR 0 2
44577: PUSH
44578: LD_INT 3
44580: PLUS
44581: PUSH
44582: LD_INT 5
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: PUSH
44590: LD_VAR 0 1
44594: PUSH
44595: LD_VAR 0 2
44599: PUSH
44600: LD_INT 4
44602: PLUS
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: ST_TO_ADDR
// end ; 1 :
44619: GO 45319
44621: LD_INT 1
44623: DOUBLE
44624: EQUAL
44625: IFTRUE 44629
44627: GO 44762
44629: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44630: LD_ADDR_VAR 0 5
44634: PUSH
44635: LD_VAR 0 1
44639: PUSH
44640: LD_VAR 0 2
44644: PUSH
44645: LD_INT 4
44647: MINUS
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: PUSH
44657: LD_VAR 0 1
44661: PUSH
44662: LD_INT 3
44664: MINUS
44665: PUSH
44666: LD_VAR 0 2
44670: PUSH
44671: LD_INT 3
44673: MINUS
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: PUSH
44683: LD_VAR 0 1
44687: PUSH
44688: LD_INT 4
44690: MINUS
44691: PUSH
44692: LD_VAR 0 2
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: LD_VAR 0 1
44709: PUSH
44710: LD_VAR 0 2
44714: PUSH
44715: LD_INT 3
44717: PLUS
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: PUSH
44727: LD_VAR 0 1
44731: PUSH
44732: LD_INT 4
44734: PLUS
44735: PUSH
44736: LD_VAR 0 2
44740: PUSH
44741: LD_INT 4
44743: PLUS
44744: PUSH
44745: LD_INT 5
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// end ; 2 :
44760: GO 45319
44762: LD_INT 2
44764: DOUBLE
44765: EQUAL
44766: IFTRUE 44770
44768: GO 44899
44770: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44771: LD_ADDR_VAR 0 5
44775: PUSH
44776: LD_VAR 0 1
44780: PUSH
44781: LD_VAR 0 2
44785: PUSH
44786: LD_INT 3
44788: MINUS
44789: PUSH
44790: LD_INT 3
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: PUSH
44798: LD_VAR 0 1
44802: PUSH
44803: LD_INT 4
44805: PLUS
44806: PUSH
44807: LD_VAR 0 2
44811: PUSH
44812: LD_INT 4
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: PUSH
44820: LD_VAR 0 1
44824: PUSH
44825: LD_VAR 0 2
44829: PUSH
44830: LD_INT 4
44832: PLUS
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: PUSH
44842: LD_VAR 0 1
44846: PUSH
44847: LD_INT 3
44849: MINUS
44850: PUSH
44851: LD_VAR 0 2
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: PUSH
44864: LD_VAR 0 1
44868: PUSH
44869: LD_INT 4
44871: MINUS
44872: PUSH
44873: LD_VAR 0 2
44877: PUSH
44878: LD_INT 4
44880: MINUS
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// end ; 3 :
44897: GO 45319
44899: LD_INT 3
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44907
44905: GO 45040
44907: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44908: LD_ADDR_VAR 0 5
44912: PUSH
44913: LD_VAR 0 1
44917: PUSH
44918: LD_INT 3
44920: PLUS
44921: PUSH
44922: LD_VAR 0 2
44926: PUSH
44927: LD_INT 4
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: PUSH
44935: LD_VAR 0 1
44939: PUSH
44940: LD_INT 4
44942: PLUS
44943: PUSH
44944: LD_VAR 0 2
44948: PUSH
44949: LD_INT 4
44951: PLUS
44952: PUSH
44953: LD_INT 5
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: PUSH
44961: LD_VAR 0 1
44965: PUSH
44966: LD_INT 4
44968: MINUS
44969: PUSH
44970: LD_VAR 0 2
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: LD_VAR 0 1
44987: PUSH
44988: LD_VAR 0 2
44992: PUSH
44993: LD_INT 4
44995: MINUS
44996: PUSH
44997: LD_INT 3
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: PUSH
45005: LD_VAR 0 1
45009: PUSH
45010: LD_INT 3
45012: MINUS
45013: PUSH
45014: LD_VAR 0 2
45018: PUSH
45019: LD_INT 3
45021: MINUS
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// end ; 4 :
45038: GO 45319
45040: LD_INT 4
45042: DOUBLE
45043: EQUAL
45044: IFTRUE 45048
45046: GO 45181
45048: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45049: LD_ADDR_VAR 0 5
45053: PUSH
45054: LD_VAR 0 1
45058: PUSH
45059: LD_VAR 0 2
45063: PUSH
45064: LD_INT 4
45066: PLUS
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: PUSH
45076: LD_VAR 0 1
45080: PUSH
45081: LD_INT 3
45083: PLUS
45084: PUSH
45085: LD_VAR 0 2
45089: PUSH
45090: LD_INT 3
45092: PLUS
45093: PUSH
45094: LD_INT 5
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: PUSH
45102: LD_VAR 0 1
45106: PUSH
45107: LD_INT 4
45109: PLUS
45110: PUSH
45111: LD_VAR 0 2
45115: PUSH
45116: LD_INT 4
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: PUSH
45124: LD_VAR 0 1
45128: PUSH
45129: LD_VAR 0 2
45133: PUSH
45134: LD_INT 3
45136: MINUS
45137: PUSH
45138: LD_INT 3
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: PUSH
45146: LD_VAR 0 1
45150: PUSH
45151: LD_INT 4
45153: MINUS
45154: PUSH
45155: LD_VAR 0 2
45159: PUSH
45160: LD_INT 4
45162: MINUS
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// end ; 5 :
45179: GO 45319
45181: LD_INT 5
45183: DOUBLE
45184: EQUAL
45185: IFTRUE 45189
45187: GO 45318
45189: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45190: LD_ADDR_VAR 0 5
45194: PUSH
45195: LD_VAR 0 1
45199: PUSH
45200: LD_INT 4
45202: MINUS
45203: PUSH
45204: LD_VAR 0 2
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: PUSH
45217: LD_VAR 0 1
45221: PUSH
45222: LD_VAR 0 2
45226: PUSH
45227: LD_INT 4
45229: MINUS
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: PUSH
45239: LD_VAR 0 1
45243: PUSH
45244: LD_INT 4
45246: PLUS
45247: PUSH
45248: LD_VAR 0 2
45252: PUSH
45253: LD_INT 4
45255: PLUS
45256: PUSH
45257: LD_INT 5
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: PUSH
45265: LD_VAR 0 1
45269: PUSH
45270: LD_INT 3
45272: PLUS
45273: PUSH
45274: LD_VAR 0 2
45278: PUSH
45279: LD_INT 4
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: PUSH
45287: LD_VAR 0 1
45291: PUSH
45292: LD_VAR 0 2
45296: PUSH
45297: LD_INT 3
45299: PLUS
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// end ; end ;
45316: GO 45319
45318: POP
// result := list ;
45319: LD_ADDR_VAR 0 4
45323: PUSH
45324: LD_VAR 0 5
45328: ST_TO_ADDR
// end ;
45329: LD_VAR 0 4
45333: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45334: LD_INT 0
45336: PPUSH
45337: PPUSH
45338: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45339: LD_VAR 0 1
45343: NOT
45344: PUSH
45345: LD_VAR 0 2
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: LD_INT 4
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: IN
45368: NOT
45369: OR
45370: IFFALSE 45374
// exit ;
45372: GO 45457
// tmp := [ ] ;
45374: LD_ADDR_VAR 0 5
45378: PUSH
45379: EMPTY
45380: ST_TO_ADDR
// for i in units do
45381: LD_ADDR_VAR 0 4
45385: PUSH
45386: LD_VAR 0 1
45390: PUSH
45391: FOR_IN
45392: IFFALSE 45426
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45394: LD_ADDR_VAR 0 5
45398: PUSH
45399: LD_VAR 0 5
45403: PPUSH
45404: LD_VAR 0 4
45408: PPUSH
45409: LD_VAR 0 2
45413: PPUSH
45414: CALL_OW 259
45418: PPUSH
45419: CALL 46830 0 2
45423: ST_TO_ADDR
45424: GO 45391
45426: POP
45427: POP
// if not tmp then
45428: LD_VAR 0 5
45432: NOT
45433: IFFALSE 45437
// exit ;
45435: GO 45457
// result := SortListByListDesc ( units , tmp ) ;
45437: LD_ADDR_VAR 0 3
45441: PUSH
45442: LD_VAR 0 1
45446: PPUSH
45447: LD_VAR 0 5
45451: PPUSH
45452: CALL_OW 77
45456: ST_TO_ADDR
// end ;
45457: LD_VAR 0 3
45461: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45462: LD_INT 0
45464: PPUSH
45465: PPUSH
45466: PPUSH
// result := false ;
45467: LD_ADDR_VAR 0 3
45471: PUSH
45472: LD_INT 0
45474: ST_TO_ADDR
// if not building then
45475: LD_VAR 0 2
45479: NOT
45480: IFFALSE 45484
// exit ;
45482: GO 45622
// x := GetX ( building ) ;
45484: LD_ADDR_VAR 0 4
45488: PUSH
45489: LD_VAR 0 2
45493: PPUSH
45494: CALL_OW 250
45498: ST_TO_ADDR
// y := GetY ( building ) ;
45499: LD_ADDR_VAR 0 5
45503: PUSH
45504: LD_VAR 0 2
45508: PPUSH
45509: CALL_OW 251
45513: ST_TO_ADDR
// if not x or not y then
45514: LD_VAR 0 4
45518: NOT
45519: PUSH
45520: LD_VAR 0 5
45524: NOT
45525: OR
45526: IFFALSE 45530
// exit ;
45528: GO 45622
// if GetTaskList ( unit ) then
45530: LD_VAR 0 1
45534: PPUSH
45535: CALL_OW 437
45539: IFFALSE 45622
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45541: LD_STRING e
45543: PUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 437
45553: PUSH
45554: LD_INT 1
45556: ARRAY
45557: PUSH
45558: LD_INT 1
45560: ARRAY
45561: EQUAL
45562: PUSH
45563: LD_VAR 0 4
45567: PUSH
45568: LD_VAR 0 1
45572: PPUSH
45573: CALL_OW 437
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: PUSH
45582: LD_INT 2
45584: ARRAY
45585: EQUAL
45586: AND
45587: PUSH
45588: LD_VAR 0 5
45592: PUSH
45593: LD_VAR 0 1
45597: PPUSH
45598: CALL_OW 437
45602: PUSH
45603: LD_INT 1
45605: ARRAY
45606: PUSH
45607: LD_INT 3
45609: ARRAY
45610: EQUAL
45611: AND
45612: IFFALSE 45622
// result := true end ;
45614: LD_ADDR_VAR 0 3
45618: PUSH
45619: LD_INT 1
45621: ST_TO_ADDR
// end ;
45622: LD_VAR 0 3
45626: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45627: LD_INT 0
45629: PPUSH
// result := false ;
45630: LD_ADDR_VAR 0 4
45634: PUSH
45635: LD_INT 0
45637: ST_TO_ADDR
// if GetTaskList ( unit ) then
45638: LD_VAR 0 1
45642: PPUSH
45643: CALL_OW 437
45647: IFFALSE 45730
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45649: LD_STRING M
45651: PUSH
45652: LD_VAR 0 1
45656: PPUSH
45657: CALL_OW 437
45661: PUSH
45662: LD_INT 1
45664: ARRAY
45665: PUSH
45666: LD_INT 1
45668: ARRAY
45669: EQUAL
45670: PUSH
45671: LD_VAR 0 2
45675: PUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: CALL_OW 437
45685: PUSH
45686: LD_INT 1
45688: ARRAY
45689: PUSH
45690: LD_INT 2
45692: ARRAY
45693: EQUAL
45694: AND
45695: PUSH
45696: LD_VAR 0 3
45700: PUSH
45701: LD_VAR 0 1
45705: PPUSH
45706: CALL_OW 437
45710: PUSH
45711: LD_INT 1
45713: ARRAY
45714: PUSH
45715: LD_INT 3
45717: ARRAY
45718: EQUAL
45719: AND
45720: IFFALSE 45730
// result := true ;
45722: LD_ADDR_VAR 0 4
45726: PUSH
45727: LD_INT 1
45729: ST_TO_ADDR
// end ; end ;
45730: LD_VAR 0 4
45734: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45735: LD_INT 0
45737: PPUSH
45738: PPUSH
45739: PPUSH
45740: PPUSH
// if not unit or not area then
45741: LD_VAR 0 1
45745: NOT
45746: PUSH
45747: LD_VAR 0 2
45751: NOT
45752: OR
45753: IFFALSE 45757
// exit ;
45755: GO 45933
// tmp := AreaToList ( area , i ) ;
45757: LD_ADDR_VAR 0 6
45761: PUSH
45762: LD_VAR 0 2
45766: PPUSH
45767: LD_VAR 0 5
45771: PPUSH
45772: CALL_OW 517
45776: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: DOUBLE
45783: LD_INT 1
45785: DEC
45786: ST_TO_ADDR
45787: LD_VAR 0 6
45791: PUSH
45792: LD_INT 1
45794: ARRAY
45795: PUSH
45796: FOR_TO
45797: IFFALSE 45931
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45799: LD_ADDR_VAR 0 7
45803: PUSH
45804: LD_VAR 0 6
45808: PUSH
45809: LD_INT 1
45811: ARRAY
45812: PUSH
45813: LD_VAR 0 5
45817: ARRAY
45818: PUSH
45819: LD_VAR 0 6
45823: PUSH
45824: LD_INT 2
45826: ARRAY
45827: PUSH
45828: LD_VAR 0 5
45832: ARRAY
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45838: LD_INT 92
45840: PUSH
45841: LD_VAR 0 7
45845: PUSH
45846: LD_INT 1
45848: ARRAY
45849: PUSH
45850: LD_VAR 0 7
45854: PUSH
45855: LD_INT 2
45857: ARRAY
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: PPUSH
45868: CALL_OW 69
45872: PUSH
45873: LD_INT 0
45875: EQUAL
45876: IFFALSE 45929
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45878: LD_VAR 0 1
45882: PPUSH
45883: LD_VAR 0 7
45887: PUSH
45888: LD_INT 1
45890: ARRAY
45891: PPUSH
45892: LD_VAR 0 7
45896: PUSH
45897: LD_INT 2
45899: ARRAY
45900: PPUSH
45901: LD_VAR 0 3
45905: PPUSH
45906: CALL_OW 48
// result := IsPlaced ( unit ) ;
45910: LD_ADDR_VAR 0 4
45914: PUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: CALL_OW 305
45924: ST_TO_ADDR
// exit ;
45925: POP
45926: POP
45927: GO 45933
// end ; end ;
45929: GO 45796
45931: POP
45932: POP
// end ;
45933: LD_VAR 0 4
45937: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45938: LD_INT 0
45940: PPUSH
45941: PPUSH
45942: PPUSH
// if not side or side > 8 then
45943: LD_VAR 0 1
45947: NOT
45948: PUSH
45949: LD_VAR 0 1
45953: PUSH
45954: LD_INT 8
45956: GREATER
45957: OR
45958: IFFALSE 45962
// exit ;
45960: GO 46149
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45962: LD_ADDR_VAR 0 4
45966: PUSH
45967: LD_INT 22
45969: PUSH
45970: LD_VAR 0 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 21
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PPUSH
45993: CALL_OW 69
45997: ST_TO_ADDR
// if not tmp then
45998: LD_VAR 0 4
46002: NOT
46003: IFFALSE 46007
// exit ;
46005: GO 46149
// enable_addtolog := true ;
46007: LD_ADDR_OWVAR 81
46011: PUSH
46012: LD_INT 1
46014: ST_TO_ADDR
// AddToLog ( [ ) ;
46015: LD_STRING [
46017: PPUSH
46018: CALL_OW 561
// for i in tmp do
46022: LD_ADDR_VAR 0 3
46026: PUSH
46027: LD_VAR 0 4
46031: PUSH
46032: FOR_IN
46033: IFFALSE 46140
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46035: LD_STRING [
46037: PUSH
46038: LD_VAR 0 3
46042: PPUSH
46043: CALL_OW 266
46047: STR
46048: PUSH
46049: LD_STRING , 
46051: STR
46052: PUSH
46053: LD_VAR 0 3
46057: PPUSH
46058: CALL_OW 250
46062: STR
46063: PUSH
46064: LD_STRING , 
46066: STR
46067: PUSH
46068: LD_VAR 0 3
46072: PPUSH
46073: CALL_OW 251
46077: STR
46078: PUSH
46079: LD_STRING , 
46081: STR
46082: PUSH
46083: LD_VAR 0 3
46087: PPUSH
46088: CALL_OW 254
46092: STR
46093: PUSH
46094: LD_STRING , 
46096: STR
46097: PUSH
46098: LD_VAR 0 3
46102: PPUSH
46103: LD_INT 1
46105: PPUSH
46106: CALL_OW 268
46110: STR
46111: PUSH
46112: LD_STRING , 
46114: STR
46115: PUSH
46116: LD_VAR 0 3
46120: PPUSH
46121: LD_INT 2
46123: PPUSH
46124: CALL_OW 268
46128: STR
46129: PUSH
46130: LD_STRING ],
46132: STR
46133: PPUSH
46134: CALL_OW 561
// end ;
46138: GO 46032
46140: POP
46141: POP
// AddToLog ( ]; ) ;
46142: LD_STRING ];
46144: PPUSH
46145: CALL_OW 561
// end ;
46149: LD_VAR 0 2
46153: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46154: LD_INT 0
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
// if not area or not rate or not max then
46161: LD_VAR 0 1
46165: NOT
46166: PUSH
46167: LD_VAR 0 2
46171: NOT
46172: OR
46173: PUSH
46174: LD_VAR 0 4
46178: NOT
46179: OR
46180: IFFALSE 46184
// exit ;
46182: GO 46373
// while 1 do
46184: LD_INT 1
46186: IFFALSE 46373
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46188: LD_ADDR_VAR 0 9
46192: PUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: LD_INT 1
46200: PPUSH
46201: CALL_OW 287
46205: PUSH
46206: LD_INT 10
46208: MUL
46209: ST_TO_ADDR
// r := rate / 10 ;
46210: LD_ADDR_VAR 0 7
46214: PUSH
46215: LD_VAR 0 2
46219: PUSH
46220: LD_INT 10
46222: DIVREAL
46223: ST_TO_ADDR
// time := 1 1$00 ;
46224: LD_ADDR_VAR 0 8
46228: PUSH
46229: LD_INT 2100
46231: ST_TO_ADDR
// if amount < min then
46232: LD_VAR 0 9
46236: PUSH
46237: LD_VAR 0 3
46241: LESS
46242: IFFALSE 46260
// r := r * 2 else
46244: LD_ADDR_VAR 0 7
46248: PUSH
46249: LD_VAR 0 7
46253: PUSH
46254: LD_INT 2
46256: MUL
46257: ST_TO_ADDR
46258: GO 46286
// if amount > max then
46260: LD_VAR 0 9
46264: PUSH
46265: LD_VAR 0 4
46269: GREATER
46270: IFFALSE 46286
// r := r / 2 ;
46272: LD_ADDR_VAR 0 7
46276: PUSH
46277: LD_VAR 0 7
46281: PUSH
46282: LD_INT 2
46284: DIVREAL
46285: ST_TO_ADDR
// time := time / r ;
46286: LD_ADDR_VAR 0 8
46290: PUSH
46291: LD_VAR 0 8
46295: PUSH
46296: LD_VAR 0 7
46300: DIVREAL
46301: ST_TO_ADDR
// if time < 0 then
46302: LD_VAR 0 8
46306: PUSH
46307: LD_INT 0
46309: LESS
46310: IFFALSE 46327
// time := time * - 1 ;
46312: LD_ADDR_VAR 0 8
46316: PUSH
46317: LD_VAR 0 8
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: MUL
46326: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46327: LD_VAR 0 8
46331: PUSH
46332: LD_INT 35
46334: PPUSH
46335: LD_INT 875
46337: PPUSH
46338: CALL_OW 12
46342: PLUS
46343: PPUSH
46344: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46348: LD_INT 1
46350: PPUSH
46351: LD_INT 5
46353: PPUSH
46354: CALL_OW 12
46358: PPUSH
46359: LD_VAR 0 1
46363: PPUSH
46364: LD_INT 1
46366: PPUSH
46367: CALL_OW 55
// end ;
46371: GO 46184
// end ;
46373: LD_VAR 0 5
46377: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46378: LD_INT 0
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
46385: PPUSH
46386: PPUSH
46387: PPUSH
// if not turrets or not factories then
46388: LD_VAR 0 1
46392: NOT
46393: PUSH
46394: LD_VAR 0 2
46398: NOT
46399: OR
46400: IFFALSE 46404
// exit ;
46402: GO 46711
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46404: LD_ADDR_VAR 0 10
46408: PUSH
46409: LD_INT 5
46411: PUSH
46412: LD_INT 6
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 4
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 3
46431: PUSH
46432: LD_INT 5
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 24
46446: PUSH
46447: LD_INT 25
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 23
46456: PUSH
46457: LD_INT 27
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 42
46470: PUSH
46471: LD_INT 43
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 44
46480: PUSH
46481: LD_INT 46
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 45
46490: PUSH
46491: LD_INT 47
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// result := [ ] ;
46508: LD_ADDR_VAR 0 3
46512: PUSH
46513: EMPTY
46514: ST_TO_ADDR
// for i in turrets do
46515: LD_ADDR_VAR 0 4
46519: PUSH
46520: LD_VAR 0 1
46524: PUSH
46525: FOR_IN
46526: IFFALSE 46709
// begin nat := GetNation ( i ) ;
46528: LD_ADDR_VAR 0 7
46532: PUSH
46533: LD_VAR 0 4
46537: PPUSH
46538: CALL_OW 248
46542: ST_TO_ADDR
// weapon := 0 ;
46543: LD_ADDR_VAR 0 8
46547: PUSH
46548: LD_INT 0
46550: ST_TO_ADDR
// if not nat then
46551: LD_VAR 0 7
46555: NOT
46556: IFFALSE 46560
// continue ;
46558: GO 46525
// for j in list [ nat ] do
46560: LD_ADDR_VAR 0 5
46564: PUSH
46565: LD_VAR 0 10
46569: PUSH
46570: LD_VAR 0 7
46574: ARRAY
46575: PUSH
46576: FOR_IN
46577: IFFALSE 46618
// if GetBWeapon ( i ) = j [ 1 ] then
46579: LD_VAR 0 4
46583: PPUSH
46584: CALL_OW 269
46588: PUSH
46589: LD_VAR 0 5
46593: PUSH
46594: LD_INT 1
46596: ARRAY
46597: EQUAL
46598: IFFALSE 46616
// begin weapon := j [ 2 ] ;
46600: LD_ADDR_VAR 0 8
46604: PUSH
46605: LD_VAR 0 5
46609: PUSH
46610: LD_INT 2
46612: ARRAY
46613: ST_TO_ADDR
// break ;
46614: GO 46618
// end ;
46616: GO 46576
46618: POP
46619: POP
// if not weapon then
46620: LD_VAR 0 8
46624: NOT
46625: IFFALSE 46629
// continue ;
46627: GO 46525
// for k in factories do
46629: LD_ADDR_VAR 0 6
46633: PUSH
46634: LD_VAR 0 2
46638: PUSH
46639: FOR_IN
46640: IFFALSE 46705
// begin weapons := AvailableWeaponList ( k ) ;
46642: LD_ADDR_VAR 0 9
46646: PUSH
46647: LD_VAR 0 6
46651: PPUSH
46652: CALL_OW 478
46656: ST_TO_ADDR
// if not weapons then
46657: LD_VAR 0 9
46661: NOT
46662: IFFALSE 46666
// continue ;
46664: GO 46639
// if weapon in weapons then
46666: LD_VAR 0 8
46670: PUSH
46671: LD_VAR 0 9
46675: IN
46676: IFFALSE 46703
// begin result := [ i , weapon ] ;
46678: LD_ADDR_VAR 0 3
46682: PUSH
46683: LD_VAR 0 4
46687: PUSH
46688: LD_VAR 0 8
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: ST_TO_ADDR
// exit ;
46697: POP
46698: POP
46699: POP
46700: POP
46701: GO 46711
// end ; end ;
46703: GO 46639
46705: POP
46706: POP
// end ;
46707: GO 46525
46709: POP
46710: POP
// end ;
46711: LD_VAR 0 3
46715: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46716: LD_INT 0
46718: PPUSH
// if not side or side > 8 then
46719: LD_VAR 0 3
46723: NOT
46724: PUSH
46725: LD_VAR 0 3
46729: PUSH
46730: LD_INT 8
46732: GREATER
46733: OR
46734: IFFALSE 46738
// exit ;
46736: GO 46797
// if not range then
46738: LD_VAR 0 4
46742: NOT
46743: IFFALSE 46754
// range := - 12 ;
46745: LD_ADDR_VAR 0 4
46749: PUSH
46750: LD_INT 12
46752: NEG
46753: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46754: LD_VAR 0 1
46758: PPUSH
46759: LD_VAR 0 2
46763: PPUSH
46764: LD_VAR 0 3
46768: PPUSH
46769: LD_VAR 0 4
46773: PPUSH
46774: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46778: LD_VAR 0 1
46782: PPUSH
46783: LD_VAR 0 2
46787: PPUSH
46788: LD_VAR 0 3
46792: PPUSH
46793: CALL_OW 331
// end ;
46797: LD_VAR 0 5
46801: RET
// export function Video ( mode ) ; begin
46802: LD_INT 0
46804: PPUSH
// ingame_video = mode ;
46805: LD_ADDR_OWVAR 52
46809: PUSH
46810: LD_VAR 0 1
46814: ST_TO_ADDR
// interface_hidden = mode ;
46815: LD_ADDR_OWVAR 54
46819: PUSH
46820: LD_VAR 0 1
46824: ST_TO_ADDR
// end ;
46825: LD_VAR 0 2
46829: RET
// export function Join ( array , element ) ; begin
46830: LD_INT 0
46832: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46833: LD_ADDR_VAR 0 3
46837: PUSH
46838: LD_VAR 0 1
46842: PPUSH
46843: LD_VAR 0 1
46847: PUSH
46848: LD_INT 1
46850: PLUS
46851: PPUSH
46852: LD_VAR 0 2
46856: PPUSH
46857: CALL_OW 1
46861: ST_TO_ADDR
// end ;
46862: LD_VAR 0 3
46866: RET
// export function JoinUnion ( array , element ) ; begin
46867: LD_INT 0
46869: PPUSH
// result := array union element ;
46870: LD_ADDR_VAR 0 3
46874: PUSH
46875: LD_VAR 0 1
46879: PUSH
46880: LD_VAR 0 2
46884: UNION
46885: ST_TO_ADDR
// end ;
46886: LD_VAR 0 3
46890: RET
// export function GetBehemoths ( side ) ; begin
46891: LD_INT 0
46893: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46894: LD_ADDR_VAR 0 2
46898: PUSH
46899: LD_INT 22
46901: PUSH
46902: LD_VAR 0 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 31
46913: PUSH
46914: LD_INT 25
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PPUSH
46925: CALL_OW 69
46929: ST_TO_ADDR
// end ;
46930: LD_VAR 0 2
46934: RET
// export function Shuffle ( array ) ; var i , index ; begin
46935: LD_INT 0
46937: PPUSH
46938: PPUSH
46939: PPUSH
// result := [ ] ;
46940: LD_ADDR_VAR 0 2
46944: PUSH
46945: EMPTY
46946: ST_TO_ADDR
// if not array then
46947: LD_VAR 0 1
46951: NOT
46952: IFFALSE 46956
// exit ;
46954: GO 47055
// Randomize ;
46956: CALL_OW 10
// for i = array downto 1 do
46960: LD_ADDR_VAR 0 3
46964: PUSH
46965: DOUBLE
46966: LD_VAR 0 1
46970: INC
46971: ST_TO_ADDR
46972: LD_INT 1
46974: PUSH
46975: FOR_DOWNTO
46976: IFFALSE 47053
// begin index := rand ( 1 , array ) ;
46978: LD_ADDR_VAR 0 4
46982: PUSH
46983: LD_INT 1
46985: PPUSH
46986: LD_VAR 0 1
46990: PPUSH
46991: CALL_OW 12
46995: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46996: LD_ADDR_VAR 0 2
47000: PUSH
47001: LD_VAR 0 2
47005: PPUSH
47006: LD_VAR 0 2
47010: PUSH
47011: LD_INT 1
47013: PLUS
47014: PPUSH
47015: LD_VAR 0 1
47019: PUSH
47020: LD_VAR 0 4
47024: ARRAY
47025: PPUSH
47026: CALL_OW 2
47030: ST_TO_ADDR
// array := Delete ( array , index ) ;
47031: LD_ADDR_VAR 0 1
47035: PUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: LD_VAR 0 4
47045: PPUSH
47046: CALL_OW 3
47050: ST_TO_ADDR
// end ;
47051: GO 46975
47053: POP
47054: POP
// end ;
47055: LD_VAR 0 2
47059: RET
// export function GetBaseMaterials ( base ) ; begin
47060: LD_INT 0
47062: PPUSH
// result := [ 0 , 0 , 0 ] ;
47063: LD_ADDR_VAR 0 2
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: ST_TO_ADDR
// if not base then
47082: LD_VAR 0 1
47086: NOT
47087: IFFALSE 47091
// exit ;
47089: GO 47140
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47091: LD_ADDR_VAR 0 2
47095: PUSH
47096: LD_VAR 0 1
47100: PPUSH
47101: LD_INT 1
47103: PPUSH
47104: CALL_OW 275
47108: PUSH
47109: LD_VAR 0 1
47113: PPUSH
47114: LD_INT 2
47116: PPUSH
47117: CALL_OW 275
47121: PUSH
47122: LD_VAR 0 1
47126: PPUSH
47127: LD_INT 3
47129: PPUSH
47130: CALL_OW 275
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: ST_TO_ADDR
// end ;
47140: LD_VAR 0 2
47144: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47145: LD_INT 0
47147: PPUSH
47148: PPUSH
// result := array ;
47149: LD_ADDR_VAR 0 3
47153: PUSH
47154: LD_VAR 0 1
47158: ST_TO_ADDR
// if size >= result then
47159: LD_VAR 0 2
47163: PUSH
47164: LD_VAR 0 3
47168: GREATEREQUAL
47169: IFFALSE 47173
// exit ;
47171: GO 47223
// if size then
47173: LD_VAR 0 2
47177: IFFALSE 47223
// for i := array downto size do
47179: LD_ADDR_VAR 0 4
47183: PUSH
47184: DOUBLE
47185: LD_VAR 0 1
47189: INC
47190: ST_TO_ADDR
47191: LD_VAR 0 2
47195: PUSH
47196: FOR_DOWNTO
47197: IFFALSE 47221
// result := Delete ( result , result ) ;
47199: LD_ADDR_VAR 0 3
47203: PUSH
47204: LD_VAR 0 3
47208: PPUSH
47209: LD_VAR 0 3
47213: PPUSH
47214: CALL_OW 3
47218: ST_TO_ADDR
47219: GO 47196
47221: POP
47222: POP
// end ;
47223: LD_VAR 0 3
47227: RET
// export function ComExit ( unit ) ; var tmp ; begin
47228: LD_INT 0
47230: PPUSH
47231: PPUSH
// if not IsInUnit ( unit ) then
47232: LD_VAR 0 1
47236: PPUSH
47237: CALL_OW 310
47241: NOT
47242: IFFALSE 47246
// exit ;
47244: GO 47306
// tmp := IsInUnit ( unit ) ;
47246: LD_ADDR_VAR 0 3
47250: PUSH
47251: LD_VAR 0 1
47255: PPUSH
47256: CALL_OW 310
47260: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47261: LD_VAR 0 3
47265: PPUSH
47266: CALL_OW 247
47270: PUSH
47271: LD_INT 2
47273: EQUAL
47274: IFFALSE 47287
// ComExitVehicle ( unit ) else
47276: LD_VAR 0 1
47280: PPUSH
47281: CALL_OW 121
47285: GO 47296
// ComExitBuilding ( unit ) ;
47287: LD_VAR 0 1
47291: PPUSH
47292: CALL_OW 122
// result := tmp ;
47296: LD_ADDR_VAR 0 2
47300: PUSH
47301: LD_VAR 0 3
47305: ST_TO_ADDR
// end ;
47306: LD_VAR 0 2
47310: RET
// export function ComExitAll ( units ) ; var i ; begin
47311: LD_INT 0
47313: PPUSH
47314: PPUSH
// if not units then
47315: LD_VAR 0 1
47319: NOT
47320: IFFALSE 47324
// exit ;
47322: GO 47350
// for i in units do
47324: LD_ADDR_VAR 0 3
47328: PUSH
47329: LD_VAR 0 1
47333: PUSH
47334: FOR_IN
47335: IFFALSE 47348
// ComExit ( i ) ;
47337: LD_VAR 0 3
47341: PPUSH
47342: CALL 47228 0 1
47346: GO 47334
47348: POP
47349: POP
// end ;
47350: LD_VAR 0 2
47354: RET
// export function ResetHc ; begin
47355: LD_INT 0
47357: PPUSH
// InitHc ;
47358: CALL_OW 19
// hc_importance := 0 ;
47362: LD_ADDR_OWVAR 32
47366: PUSH
47367: LD_INT 0
47369: ST_TO_ADDR
// end ;
47370: LD_VAR 0 1
47374: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47375: LD_INT 0
47377: PPUSH
47378: PPUSH
47379: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47380: LD_ADDR_VAR 0 6
47384: PUSH
47385: LD_VAR 0 1
47389: PUSH
47390: LD_VAR 0 3
47394: PLUS
47395: PUSH
47396: LD_INT 2
47398: DIV
47399: ST_TO_ADDR
// if _x < 0 then
47400: LD_VAR 0 6
47404: PUSH
47405: LD_INT 0
47407: LESS
47408: IFFALSE 47425
// _x := _x * - 1 ;
47410: LD_ADDR_VAR 0 6
47414: PUSH
47415: LD_VAR 0 6
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: MUL
47424: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47425: LD_ADDR_VAR 0 7
47429: PUSH
47430: LD_VAR 0 2
47434: PUSH
47435: LD_VAR 0 4
47439: PLUS
47440: PUSH
47441: LD_INT 2
47443: DIV
47444: ST_TO_ADDR
// if _y < 0 then
47445: LD_VAR 0 7
47449: PUSH
47450: LD_INT 0
47452: LESS
47453: IFFALSE 47470
// _y := _y * - 1 ;
47455: LD_ADDR_VAR 0 7
47459: PUSH
47460: LD_VAR 0 7
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: MUL
47469: ST_TO_ADDR
// result := [ _x , _y ] ;
47470: LD_ADDR_VAR 0 5
47474: PUSH
47475: LD_VAR 0 6
47479: PUSH
47480: LD_VAR 0 7
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// end ;
47489: LD_VAR 0 5
47493: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47494: LD_INT 0
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
// task := GetTaskList ( unit ) ;
47500: LD_ADDR_VAR 0 7
47504: PUSH
47505: LD_VAR 0 1
47509: PPUSH
47510: CALL_OW 437
47514: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47515: LD_VAR 0 7
47519: NOT
47520: PUSH
47521: LD_VAR 0 1
47525: PPUSH
47526: LD_VAR 0 2
47530: PPUSH
47531: CALL_OW 308
47535: NOT
47536: AND
47537: IFFALSE 47541
// exit ;
47539: GO 47659
// if IsInArea ( unit , area ) then
47541: LD_VAR 0 1
47545: PPUSH
47546: LD_VAR 0 2
47550: PPUSH
47551: CALL_OW 308
47555: IFFALSE 47573
// begin ComMoveToArea ( unit , goAway ) ;
47557: LD_VAR 0 1
47561: PPUSH
47562: LD_VAR 0 3
47566: PPUSH
47567: CALL_OW 113
// exit ;
47571: GO 47659
// end ; if task [ 1 ] [ 1 ] <> M then
47573: LD_VAR 0 7
47577: PUSH
47578: LD_INT 1
47580: ARRAY
47581: PUSH
47582: LD_INT 1
47584: ARRAY
47585: PUSH
47586: LD_STRING M
47588: NONEQUAL
47589: IFFALSE 47593
// exit ;
47591: GO 47659
// x := task [ 1 ] [ 2 ] ;
47593: LD_ADDR_VAR 0 5
47597: PUSH
47598: LD_VAR 0 7
47602: PUSH
47603: LD_INT 1
47605: ARRAY
47606: PUSH
47607: LD_INT 2
47609: ARRAY
47610: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47611: LD_ADDR_VAR 0 6
47615: PUSH
47616: LD_VAR 0 7
47620: PUSH
47621: LD_INT 1
47623: ARRAY
47624: PUSH
47625: LD_INT 3
47627: ARRAY
47628: ST_TO_ADDR
// if InArea ( x , y , area ) then
47629: LD_VAR 0 5
47633: PPUSH
47634: LD_VAR 0 6
47638: PPUSH
47639: LD_VAR 0 2
47643: PPUSH
47644: CALL_OW 309
47648: IFFALSE 47659
// ComStop ( unit ) ;
47650: LD_VAR 0 1
47654: PPUSH
47655: CALL_OW 141
// end ;
47659: LD_VAR 0 4
47663: RET
// export function Abs ( value ) ; begin
47664: LD_INT 0
47666: PPUSH
// result := value ;
47667: LD_ADDR_VAR 0 2
47671: PUSH
47672: LD_VAR 0 1
47676: ST_TO_ADDR
// if value < 0 then
47677: LD_VAR 0 1
47681: PUSH
47682: LD_INT 0
47684: LESS
47685: IFFALSE 47702
// result := value * - 1 ;
47687: LD_ADDR_VAR 0 2
47691: PUSH
47692: LD_VAR 0 1
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: MUL
47701: ST_TO_ADDR
// end ;
47702: LD_VAR 0 2
47706: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47707: LD_INT 0
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
47713: PPUSH
47714: PPUSH
47715: PPUSH
47716: PPUSH
// if not unit or not building then
47717: LD_VAR 0 1
47721: NOT
47722: PUSH
47723: LD_VAR 0 2
47727: NOT
47728: OR
47729: IFFALSE 47733
// exit ;
47731: GO 47959
// x := GetX ( building ) ;
47733: LD_ADDR_VAR 0 4
47737: PUSH
47738: LD_VAR 0 2
47742: PPUSH
47743: CALL_OW 250
47747: ST_TO_ADDR
// y := GetY ( building ) ;
47748: LD_ADDR_VAR 0 6
47752: PUSH
47753: LD_VAR 0 2
47757: PPUSH
47758: CALL_OW 251
47762: ST_TO_ADDR
// d := GetDir ( building ) ;
47763: LD_ADDR_VAR 0 8
47767: PUSH
47768: LD_VAR 0 2
47772: PPUSH
47773: CALL_OW 254
47777: ST_TO_ADDR
// r := 4 ;
47778: LD_ADDR_VAR 0 9
47782: PUSH
47783: LD_INT 4
47785: ST_TO_ADDR
// for i := 1 to 5 do
47786: LD_ADDR_VAR 0 10
47790: PUSH
47791: DOUBLE
47792: LD_INT 1
47794: DEC
47795: ST_TO_ADDR
47796: LD_INT 5
47798: PUSH
47799: FOR_TO
47800: IFFALSE 47957
// begin _x := ShiftX ( x , d , r + i ) ;
47802: LD_ADDR_VAR 0 5
47806: PUSH
47807: LD_VAR 0 4
47811: PPUSH
47812: LD_VAR 0 8
47816: PPUSH
47817: LD_VAR 0 9
47821: PUSH
47822: LD_VAR 0 10
47826: PLUS
47827: PPUSH
47828: CALL_OW 272
47832: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47833: LD_ADDR_VAR 0 7
47837: PUSH
47838: LD_VAR 0 6
47842: PPUSH
47843: LD_VAR 0 8
47847: PPUSH
47848: LD_VAR 0 9
47852: PUSH
47853: LD_VAR 0 10
47857: PLUS
47858: PPUSH
47859: CALL_OW 273
47863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47864: LD_VAR 0 5
47868: PPUSH
47869: LD_VAR 0 7
47873: PPUSH
47874: CALL_OW 488
47878: PUSH
47879: LD_VAR 0 5
47883: PPUSH
47884: LD_VAR 0 7
47888: PPUSH
47889: CALL_OW 428
47893: PPUSH
47894: CALL_OW 247
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: IN
47909: NOT
47910: AND
47911: IFFALSE 47955
// begin ComMoveXY ( unit , _x , _y ) ;
47913: LD_VAR 0 1
47917: PPUSH
47918: LD_VAR 0 5
47922: PPUSH
47923: LD_VAR 0 7
47927: PPUSH
47928: CALL_OW 111
// result := [ _x , _y ] ;
47932: LD_ADDR_VAR 0 3
47936: PUSH
47937: LD_VAR 0 5
47941: PUSH
47942: LD_VAR 0 7
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: ST_TO_ADDR
// exit ;
47951: POP
47952: POP
47953: GO 47959
// end ; end ;
47955: GO 47799
47957: POP
47958: POP
// end ;
47959: LD_VAR 0 3
47963: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47964: LD_INT 0
47966: PPUSH
47967: PPUSH
47968: PPUSH
// result := 0 ;
47969: LD_ADDR_VAR 0 3
47973: PUSH
47974: LD_INT 0
47976: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47977: LD_VAR 0 1
47981: PUSH
47982: LD_INT 0
47984: LESS
47985: PUSH
47986: LD_VAR 0 1
47990: PUSH
47991: LD_INT 8
47993: GREATER
47994: OR
47995: PUSH
47996: LD_VAR 0 2
48000: PUSH
48001: LD_INT 0
48003: LESS
48004: OR
48005: PUSH
48006: LD_VAR 0 2
48010: PUSH
48011: LD_INT 8
48013: GREATER
48014: OR
48015: IFFALSE 48019
// exit ;
48017: GO 48094
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48019: LD_ADDR_VAR 0 4
48023: PUSH
48024: LD_INT 22
48026: PUSH
48027: LD_VAR 0 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PPUSH
48036: CALL_OW 69
48040: PUSH
48041: FOR_IN
48042: IFFALSE 48092
// begin un := UnitShoot ( i ) ;
48044: LD_ADDR_VAR 0 5
48048: PUSH
48049: LD_VAR 0 4
48053: PPUSH
48054: CALL_OW 504
48058: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48059: LD_VAR 0 5
48063: PPUSH
48064: CALL_OW 255
48068: PUSH
48069: LD_VAR 0 1
48073: EQUAL
48074: IFFALSE 48090
// begin result := un ;
48076: LD_ADDR_VAR 0 3
48080: PUSH
48081: LD_VAR 0 5
48085: ST_TO_ADDR
// exit ;
48086: POP
48087: POP
48088: GO 48094
// end ; end ;
48090: GO 48041
48092: POP
48093: POP
// end ;
48094: LD_VAR 0 3
48098: RET
// export function GetCargoBay ( units ) ; begin
48099: LD_INT 0
48101: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48102: LD_ADDR_VAR 0 2
48106: PUSH
48107: LD_VAR 0 1
48111: PPUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 34
48117: PUSH
48118: LD_INT 12
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 34
48127: PUSH
48128: LD_INT 51
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 34
48137: PUSH
48138: LD_INT 32
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 34
48147: PUSH
48148: LD_INT 89
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: PPUSH
48162: CALL_OW 72
48166: ST_TO_ADDR
// end ;
48167: LD_VAR 0 2
48171: RET
// export function Negate ( value ) ; begin
48172: LD_INT 0
48174: PPUSH
// result := not value ;
48175: LD_ADDR_VAR 0 2
48179: PUSH
48180: LD_VAR 0 1
48184: NOT
48185: ST_TO_ADDR
// end ;
48186: LD_VAR 0 2
48190: RET
// export function Inc ( value ) ; begin
48191: LD_INT 0
48193: PPUSH
// result := value + 1 ;
48194: LD_ADDR_VAR 0 2
48198: PUSH
48199: LD_VAR 0 1
48203: PUSH
48204: LD_INT 1
48206: PLUS
48207: ST_TO_ADDR
// end ;
48208: LD_VAR 0 2
48212: RET
// export function Dec ( value ) ; begin
48213: LD_INT 0
48215: PPUSH
// result := value - 1 ;
48216: LD_ADDR_VAR 0 2
48220: PUSH
48221: LD_VAR 0 1
48225: PUSH
48226: LD_INT 1
48228: MINUS
48229: ST_TO_ADDR
// end ;
48230: LD_VAR 0 2
48234: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48235: LD_INT 0
48237: PPUSH
48238: PPUSH
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
48243: PPUSH
48244: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48245: LD_VAR 0 1
48249: PPUSH
48250: LD_VAR 0 2
48254: PPUSH
48255: CALL_OW 488
48259: NOT
48260: PUSH
48261: LD_VAR 0 3
48265: PPUSH
48266: LD_VAR 0 4
48270: PPUSH
48271: CALL_OW 488
48275: NOT
48276: OR
48277: IFFALSE 48290
// begin result := - 1 ;
48279: LD_ADDR_VAR 0 5
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: ST_TO_ADDR
// exit ;
48288: GO 48525
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48290: LD_ADDR_VAR 0 12
48294: PUSH
48295: LD_VAR 0 1
48299: PPUSH
48300: LD_VAR 0 2
48304: PPUSH
48305: LD_VAR 0 3
48309: PPUSH
48310: LD_VAR 0 4
48314: PPUSH
48315: CALL 47375 0 4
48319: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48320: LD_ADDR_VAR 0 11
48324: PUSH
48325: LD_VAR 0 1
48329: PPUSH
48330: LD_VAR 0 2
48334: PPUSH
48335: LD_VAR 0 12
48339: PUSH
48340: LD_INT 1
48342: ARRAY
48343: PPUSH
48344: LD_VAR 0 12
48348: PUSH
48349: LD_INT 2
48351: ARRAY
48352: PPUSH
48353: CALL_OW 298
48357: ST_TO_ADDR
// distance := 9999 ;
48358: LD_ADDR_VAR 0 10
48362: PUSH
48363: LD_INT 9999
48365: ST_TO_ADDR
// for i := 0 to 5 do
48366: LD_ADDR_VAR 0 6
48370: PUSH
48371: DOUBLE
48372: LD_INT 0
48374: DEC
48375: ST_TO_ADDR
48376: LD_INT 5
48378: PUSH
48379: FOR_TO
48380: IFFALSE 48523
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48382: LD_ADDR_VAR 0 7
48386: PUSH
48387: LD_VAR 0 1
48391: PPUSH
48392: LD_VAR 0 6
48396: PPUSH
48397: LD_VAR 0 11
48401: PPUSH
48402: CALL_OW 272
48406: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48407: LD_ADDR_VAR 0 8
48411: PUSH
48412: LD_VAR 0 2
48416: PPUSH
48417: LD_VAR 0 6
48421: PPUSH
48422: LD_VAR 0 11
48426: PPUSH
48427: CALL_OW 273
48431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48432: LD_VAR 0 7
48436: PPUSH
48437: LD_VAR 0 8
48441: PPUSH
48442: CALL_OW 488
48446: NOT
48447: IFFALSE 48451
// continue ;
48449: GO 48379
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48451: LD_ADDR_VAR 0 9
48455: PUSH
48456: LD_VAR 0 12
48460: PUSH
48461: LD_INT 1
48463: ARRAY
48464: PPUSH
48465: LD_VAR 0 12
48469: PUSH
48470: LD_INT 2
48472: ARRAY
48473: PPUSH
48474: LD_VAR 0 7
48478: PPUSH
48479: LD_VAR 0 8
48483: PPUSH
48484: CALL_OW 298
48488: ST_TO_ADDR
// if tmp < distance then
48489: LD_VAR 0 9
48493: PUSH
48494: LD_VAR 0 10
48498: LESS
48499: IFFALSE 48521
// begin result := i ;
48501: LD_ADDR_VAR 0 5
48505: PUSH
48506: LD_VAR 0 6
48510: ST_TO_ADDR
// distance := tmp ;
48511: LD_ADDR_VAR 0 10
48515: PUSH
48516: LD_VAR 0 9
48520: ST_TO_ADDR
// end ; end ;
48521: GO 48379
48523: POP
48524: POP
// end ;
48525: LD_VAR 0 5
48529: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48530: LD_INT 0
48532: PPUSH
48533: PPUSH
// if not driver or not IsInUnit ( driver ) then
48534: LD_VAR 0 1
48538: NOT
48539: PUSH
48540: LD_VAR 0 1
48544: PPUSH
48545: CALL_OW 310
48549: NOT
48550: OR
48551: IFFALSE 48555
// exit ;
48553: GO 48645
// vehicle := IsInUnit ( driver ) ;
48555: LD_ADDR_VAR 0 3
48559: PUSH
48560: LD_VAR 0 1
48564: PPUSH
48565: CALL_OW 310
48569: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48570: LD_VAR 0 1
48574: PPUSH
48575: LD_STRING \
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: PUSH
48605: LD_STRING E
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_VAR 0 3
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PPUSH
48641: CALL_OW 446
// end ;
48645: LD_VAR 0 2
48649: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48650: LD_INT 0
48652: PPUSH
48653: PPUSH
// if not driver or not IsInUnit ( driver ) then
48654: LD_VAR 0 1
48658: NOT
48659: PUSH
48660: LD_VAR 0 1
48664: PPUSH
48665: CALL_OW 310
48669: NOT
48670: OR
48671: IFFALSE 48675
// exit ;
48673: GO 48765
// vehicle := IsInUnit ( driver ) ;
48675: LD_ADDR_VAR 0 3
48679: PUSH
48680: LD_VAR 0 1
48684: PPUSH
48685: CALL_OW 310
48689: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48690: LD_VAR 0 1
48694: PPUSH
48695: LD_STRING \
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: PUSH
48725: LD_STRING E
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_VAR 0 3
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PPUSH
48761: CALL_OW 447
// end ;
48765: LD_VAR 0 2
48769: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48770: LD_INT 0
48772: PPUSH
48773: PPUSH
48774: PPUSH
// tmp := [ ] ;
48775: LD_ADDR_VAR 0 5
48779: PUSH
48780: EMPTY
48781: ST_TO_ADDR
// for i in units do
48782: LD_ADDR_VAR 0 4
48786: PUSH
48787: LD_VAR 0 1
48791: PUSH
48792: FOR_IN
48793: IFFALSE 48831
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48795: LD_ADDR_VAR 0 5
48799: PUSH
48800: LD_VAR 0 5
48804: PPUSH
48805: LD_VAR 0 5
48809: PUSH
48810: LD_INT 1
48812: PLUS
48813: PPUSH
48814: LD_VAR 0 4
48818: PPUSH
48819: CALL_OW 256
48823: PPUSH
48824: CALL_OW 2
48828: ST_TO_ADDR
48829: GO 48792
48831: POP
48832: POP
// if not tmp then
48833: LD_VAR 0 5
48837: NOT
48838: IFFALSE 48842
// exit ;
48840: GO 48890
// if asc then
48842: LD_VAR 0 2
48846: IFFALSE 48870
// result := SortListByListAsc ( units , tmp ) else
48848: LD_ADDR_VAR 0 3
48852: PUSH
48853: LD_VAR 0 1
48857: PPUSH
48858: LD_VAR 0 5
48862: PPUSH
48863: CALL_OW 76
48867: ST_TO_ADDR
48868: GO 48890
// result := SortListByListDesc ( units , tmp ) ;
48870: LD_ADDR_VAR 0 3
48874: PUSH
48875: LD_VAR 0 1
48879: PPUSH
48880: LD_VAR 0 5
48884: PPUSH
48885: CALL_OW 77
48889: ST_TO_ADDR
// end ;
48890: LD_VAR 0 3
48894: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48895: LD_INT 0
48897: PPUSH
48898: PPUSH
// task := GetTaskList ( mech ) ;
48899: LD_ADDR_VAR 0 4
48903: PUSH
48904: LD_VAR 0 1
48908: PPUSH
48909: CALL_OW 437
48913: ST_TO_ADDR
// if not task then
48914: LD_VAR 0 4
48918: NOT
48919: IFFALSE 48923
// exit ;
48921: GO 48965
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48923: LD_ADDR_VAR 0 3
48927: PUSH
48928: LD_VAR 0 4
48932: PUSH
48933: LD_INT 1
48935: ARRAY
48936: PUSH
48937: LD_INT 1
48939: ARRAY
48940: PUSH
48941: LD_STRING r
48943: EQUAL
48944: PUSH
48945: LD_VAR 0 4
48949: PUSH
48950: LD_INT 1
48952: ARRAY
48953: PUSH
48954: LD_INT 4
48956: ARRAY
48957: PUSH
48958: LD_VAR 0 2
48962: EQUAL
48963: AND
48964: ST_TO_ADDR
// end ;
48965: LD_VAR 0 3
48969: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48970: LD_INT 0
48972: PPUSH
// SetDir ( unit , d ) ;
48973: LD_VAR 0 1
48977: PPUSH
48978: LD_VAR 0 4
48982: PPUSH
48983: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48987: LD_VAR 0 1
48991: PPUSH
48992: LD_VAR 0 2
48996: PPUSH
48997: LD_VAR 0 3
49001: PPUSH
49002: LD_VAR 0 5
49006: PPUSH
49007: CALL_OW 48
// end ;
49011: LD_VAR 0 6
49015: RET
// export function ToNaturalNumber ( number ) ; begin
49016: LD_INT 0
49018: PPUSH
// result := number div 1 ;
49019: LD_ADDR_VAR 0 2
49023: PUSH
49024: LD_VAR 0 1
49028: PUSH
49029: LD_INT 1
49031: DIV
49032: ST_TO_ADDR
// if number < 0 then
49033: LD_VAR 0 1
49037: PUSH
49038: LD_INT 0
49040: LESS
49041: IFFALSE 49051
// result := 0 ;
49043: LD_ADDR_VAR 0 2
49047: PUSH
49048: LD_INT 0
49050: ST_TO_ADDR
// end ;
49051: LD_VAR 0 2
49055: RET
// export function SortByClass ( units , class ) ; var un ; begin
49056: LD_INT 0
49058: PPUSH
49059: PPUSH
// if not units or not class then
49060: LD_VAR 0 1
49064: NOT
49065: PUSH
49066: LD_VAR 0 2
49070: NOT
49071: OR
49072: IFFALSE 49076
// exit ;
49074: GO 49171
// result := [ ] ;
49076: LD_ADDR_VAR 0 3
49080: PUSH
49081: EMPTY
49082: ST_TO_ADDR
// for un in units do
49083: LD_ADDR_VAR 0 4
49087: PUSH
49088: LD_VAR 0 1
49092: PUSH
49093: FOR_IN
49094: IFFALSE 49169
// if GetClass ( un ) = class then
49096: LD_VAR 0 4
49100: PPUSH
49101: CALL_OW 257
49105: PUSH
49106: LD_VAR 0 2
49110: EQUAL
49111: IFFALSE 49138
// result := Insert ( result , 1 , un ) else
49113: LD_ADDR_VAR 0 3
49117: PUSH
49118: LD_VAR 0 3
49122: PPUSH
49123: LD_INT 1
49125: PPUSH
49126: LD_VAR 0 4
49130: PPUSH
49131: CALL_OW 2
49135: ST_TO_ADDR
49136: GO 49167
// result := Replace ( result , result + 1 , un ) ;
49138: LD_ADDR_VAR 0 3
49142: PUSH
49143: LD_VAR 0 3
49147: PPUSH
49148: LD_VAR 0 3
49152: PUSH
49153: LD_INT 1
49155: PLUS
49156: PPUSH
49157: LD_VAR 0 4
49161: PPUSH
49162: CALL_OW 1
49166: ST_TO_ADDR
49167: GO 49093
49169: POP
49170: POP
// end ;
49171: LD_VAR 0 3
49175: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49176: LD_INT 0
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
// result := [ ] ;
49185: LD_ADDR_VAR 0 4
49189: PUSH
49190: EMPTY
49191: ST_TO_ADDR
// if x - r < 0 then
49192: LD_VAR 0 1
49196: PUSH
49197: LD_VAR 0 3
49201: MINUS
49202: PUSH
49203: LD_INT 0
49205: LESS
49206: IFFALSE 49218
// min_x := 0 else
49208: LD_ADDR_VAR 0 8
49212: PUSH
49213: LD_INT 0
49215: ST_TO_ADDR
49216: GO 49234
// min_x := x - r ;
49218: LD_ADDR_VAR 0 8
49222: PUSH
49223: LD_VAR 0 1
49227: PUSH
49228: LD_VAR 0 3
49232: MINUS
49233: ST_TO_ADDR
// if y - r < 0 then
49234: LD_VAR 0 2
49238: PUSH
49239: LD_VAR 0 3
49243: MINUS
49244: PUSH
49245: LD_INT 0
49247: LESS
49248: IFFALSE 49260
// min_y := 0 else
49250: LD_ADDR_VAR 0 7
49254: PUSH
49255: LD_INT 0
49257: ST_TO_ADDR
49258: GO 49276
// min_y := y - r ;
49260: LD_ADDR_VAR 0 7
49264: PUSH
49265: LD_VAR 0 2
49269: PUSH
49270: LD_VAR 0 3
49274: MINUS
49275: ST_TO_ADDR
// max_x := x + r ;
49276: LD_ADDR_VAR 0 9
49280: PUSH
49281: LD_VAR 0 1
49285: PUSH
49286: LD_VAR 0 3
49290: PLUS
49291: ST_TO_ADDR
// max_y := y + r ;
49292: LD_ADDR_VAR 0 10
49296: PUSH
49297: LD_VAR 0 2
49301: PUSH
49302: LD_VAR 0 3
49306: PLUS
49307: ST_TO_ADDR
// for _x = min_x to max_x do
49308: LD_ADDR_VAR 0 5
49312: PUSH
49313: DOUBLE
49314: LD_VAR 0 8
49318: DEC
49319: ST_TO_ADDR
49320: LD_VAR 0 9
49324: PUSH
49325: FOR_TO
49326: IFFALSE 49427
// for _y = min_y to max_y do
49328: LD_ADDR_VAR 0 6
49332: PUSH
49333: DOUBLE
49334: LD_VAR 0 7
49338: DEC
49339: ST_TO_ADDR
49340: LD_VAR 0 10
49344: PUSH
49345: FOR_TO
49346: IFFALSE 49423
// begin if not ValidHex ( _x , _y ) then
49348: LD_VAR 0 5
49352: PPUSH
49353: LD_VAR 0 6
49357: PPUSH
49358: CALL_OW 488
49362: NOT
49363: IFFALSE 49367
// continue ;
49365: GO 49345
// if GetResourceTypeXY ( _x , _y ) then
49367: LD_VAR 0 5
49371: PPUSH
49372: LD_VAR 0 6
49376: PPUSH
49377: CALL_OW 283
49381: IFFALSE 49421
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49383: LD_ADDR_VAR 0 4
49387: PUSH
49388: LD_VAR 0 4
49392: PPUSH
49393: LD_VAR 0 4
49397: PUSH
49398: LD_INT 1
49400: PLUS
49401: PPUSH
49402: LD_VAR 0 5
49406: PUSH
49407: LD_VAR 0 6
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PPUSH
49416: CALL_OW 1
49420: ST_TO_ADDR
// end ;
49421: GO 49345
49423: POP
49424: POP
49425: GO 49325
49427: POP
49428: POP
// end ;
49429: LD_VAR 0 4
49433: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49434: LD_INT 0
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
// if not units then
49444: LD_VAR 0 1
49448: NOT
49449: IFFALSE 49453
// exit ;
49451: GO 49981
// result := UnitFilter ( units , [ f_ok ] ) ;
49453: LD_ADDR_VAR 0 3
49457: PUSH
49458: LD_VAR 0 1
49462: PPUSH
49463: LD_INT 50
49465: PUSH
49466: EMPTY
49467: LIST
49468: PPUSH
49469: CALL_OW 72
49473: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49474: LD_ADDR_VAR 0 8
49478: PUSH
49479: LD_VAR 0 1
49483: PUSH
49484: LD_INT 1
49486: ARRAY
49487: PPUSH
49488: CALL_OW 255
49492: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49493: LD_ADDR_VAR 0 10
49497: PUSH
49498: LD_INT 29
49500: PUSH
49501: LD_INT 91
49503: PUSH
49504: LD_INT 49
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// if not result then
49512: LD_VAR 0 3
49516: NOT
49517: IFFALSE 49521
// exit ;
49519: GO 49981
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49521: LD_ADDR_VAR 0 5
49525: PUSH
49526: LD_INT 81
49528: PUSH
49529: LD_VAR 0 8
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PPUSH
49538: CALL_OW 69
49542: ST_TO_ADDR
// for i in result do
49543: LD_ADDR_VAR 0 4
49547: PUSH
49548: LD_VAR 0 3
49552: PUSH
49553: FOR_IN
49554: IFFALSE 49979
// begin tag := GetTag ( i ) + 1 ;
49556: LD_ADDR_VAR 0 9
49560: PUSH
49561: LD_VAR 0 4
49565: PPUSH
49566: CALL_OW 110
49570: PUSH
49571: LD_INT 1
49573: PLUS
49574: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49575: LD_ADDR_VAR 0 7
49579: PUSH
49580: LD_VAR 0 4
49584: PPUSH
49585: CALL_OW 250
49589: PPUSH
49590: LD_VAR 0 4
49594: PPUSH
49595: CALL_OW 251
49599: PPUSH
49600: LD_INT 4
49602: PPUSH
49603: CALL 49176 0 3
49607: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49608: LD_VAR 0 4
49612: PPUSH
49613: CALL_OW 247
49617: PUSH
49618: LD_INT 2
49620: EQUAL
49621: PUSH
49622: LD_VAR 0 7
49626: PUSH
49627: LD_INT 2
49629: GREATER
49630: AND
49631: PUSH
49632: LD_VAR 0 4
49636: PPUSH
49637: CALL_OW 264
49641: PUSH
49642: LD_VAR 0 10
49646: IN
49647: NOT
49648: AND
49649: IFFALSE 49688
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49651: LD_VAR 0 4
49655: PPUSH
49656: LD_VAR 0 7
49660: PUSH
49661: LD_INT 1
49663: ARRAY
49664: PUSH
49665: LD_INT 1
49667: ARRAY
49668: PPUSH
49669: LD_VAR 0 7
49673: PUSH
49674: LD_INT 1
49676: ARRAY
49677: PUSH
49678: LD_INT 2
49680: ARRAY
49681: PPUSH
49682: CALL_OW 116
49686: GO 49977
// if path > tag then
49688: LD_VAR 0 2
49692: PUSH
49693: LD_VAR 0 9
49697: GREATER
49698: IFFALSE 49906
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49700: LD_ADDR_VAR 0 6
49704: PUSH
49705: LD_VAR 0 5
49709: PPUSH
49710: LD_INT 91
49712: PUSH
49713: LD_VAR 0 4
49717: PUSH
49718: LD_INT 8
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: PPUSH
49726: CALL_OW 72
49730: ST_TO_ADDR
// if nearEnemy then
49731: LD_VAR 0 6
49735: IFFALSE 49804
// begin if GetWeapon ( i ) = ru_time_lapser then
49737: LD_VAR 0 4
49741: PPUSH
49742: CALL_OW 264
49746: PUSH
49747: LD_INT 49
49749: EQUAL
49750: IFFALSE 49778
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49752: LD_VAR 0 4
49756: PPUSH
49757: LD_VAR 0 6
49761: PPUSH
49762: LD_VAR 0 4
49766: PPUSH
49767: CALL_OW 74
49771: PPUSH
49772: CALL_OW 112
49776: GO 49802
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49778: LD_VAR 0 4
49782: PPUSH
49783: LD_VAR 0 6
49787: PPUSH
49788: LD_VAR 0 4
49792: PPUSH
49793: CALL_OW 74
49797: PPUSH
49798: CALL 51052 0 2
// end else
49802: GO 49904
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49804: LD_VAR 0 4
49808: PPUSH
49809: LD_VAR 0 2
49813: PUSH
49814: LD_VAR 0 9
49818: ARRAY
49819: PUSH
49820: LD_INT 1
49822: ARRAY
49823: PPUSH
49824: LD_VAR 0 2
49828: PUSH
49829: LD_VAR 0 9
49833: ARRAY
49834: PUSH
49835: LD_INT 2
49837: ARRAY
49838: PPUSH
49839: CALL_OW 297
49843: PUSH
49844: LD_INT 6
49846: GREATER
49847: IFFALSE 49890
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49849: LD_VAR 0 4
49853: PPUSH
49854: LD_VAR 0 2
49858: PUSH
49859: LD_VAR 0 9
49863: ARRAY
49864: PUSH
49865: LD_INT 1
49867: ARRAY
49868: PPUSH
49869: LD_VAR 0 2
49873: PUSH
49874: LD_VAR 0 9
49878: ARRAY
49879: PUSH
49880: LD_INT 2
49882: ARRAY
49883: PPUSH
49884: CALL_OW 114
49888: GO 49904
// SetTag ( i , tag ) ;
49890: LD_VAR 0 4
49894: PPUSH
49895: LD_VAR 0 9
49899: PPUSH
49900: CALL_OW 109
// end else
49904: GO 49977
// if enemy then
49906: LD_VAR 0 5
49910: IFFALSE 49977
// begin if GetWeapon ( i ) = ru_time_lapser then
49912: LD_VAR 0 4
49916: PPUSH
49917: CALL_OW 264
49921: PUSH
49922: LD_INT 49
49924: EQUAL
49925: IFFALSE 49953
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49927: LD_VAR 0 4
49931: PPUSH
49932: LD_VAR 0 5
49936: PPUSH
49937: LD_VAR 0 4
49941: PPUSH
49942: CALL_OW 74
49946: PPUSH
49947: CALL_OW 112
49951: GO 49977
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49953: LD_VAR 0 4
49957: PPUSH
49958: LD_VAR 0 5
49962: PPUSH
49963: LD_VAR 0 4
49967: PPUSH
49968: CALL_OW 74
49972: PPUSH
49973: CALL 51052 0 2
// end ; end ;
49977: GO 49553
49979: POP
49980: POP
// end ;
49981: LD_VAR 0 3
49985: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49986: LD_INT 0
49988: PPUSH
49989: PPUSH
49990: PPUSH
// if not unit or IsInUnit ( unit ) then
49991: LD_VAR 0 1
49995: NOT
49996: PUSH
49997: LD_VAR 0 1
50001: PPUSH
50002: CALL_OW 310
50006: OR
50007: IFFALSE 50011
// exit ;
50009: GO 50102
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50011: LD_ADDR_VAR 0 4
50015: PUSH
50016: LD_VAR 0 1
50020: PPUSH
50021: CALL_OW 250
50025: PPUSH
50026: LD_VAR 0 2
50030: PPUSH
50031: LD_INT 1
50033: PPUSH
50034: CALL_OW 272
50038: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50039: LD_ADDR_VAR 0 5
50043: PUSH
50044: LD_VAR 0 1
50048: PPUSH
50049: CALL_OW 251
50053: PPUSH
50054: LD_VAR 0 2
50058: PPUSH
50059: LD_INT 1
50061: PPUSH
50062: CALL_OW 273
50066: ST_TO_ADDR
// if ValidHex ( x , y ) then
50067: LD_VAR 0 4
50071: PPUSH
50072: LD_VAR 0 5
50076: PPUSH
50077: CALL_OW 488
50081: IFFALSE 50102
// ComTurnXY ( unit , x , y ) ;
50083: LD_VAR 0 1
50087: PPUSH
50088: LD_VAR 0 4
50092: PPUSH
50093: LD_VAR 0 5
50097: PPUSH
50098: CALL_OW 118
// end ;
50102: LD_VAR 0 3
50106: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50107: LD_INT 0
50109: PPUSH
50110: PPUSH
// result := false ;
50111: LD_ADDR_VAR 0 3
50115: PUSH
50116: LD_INT 0
50118: ST_TO_ADDR
// if not units then
50119: LD_VAR 0 2
50123: NOT
50124: IFFALSE 50128
// exit ;
50126: GO 50173
// for i in units do
50128: LD_ADDR_VAR 0 4
50132: PUSH
50133: LD_VAR 0 2
50137: PUSH
50138: FOR_IN
50139: IFFALSE 50171
// if See ( side , i ) then
50141: LD_VAR 0 1
50145: PPUSH
50146: LD_VAR 0 4
50150: PPUSH
50151: CALL_OW 292
50155: IFFALSE 50169
// begin result := true ;
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_INT 1
50164: ST_TO_ADDR
// exit ;
50165: POP
50166: POP
50167: GO 50173
// end ;
50169: GO 50138
50171: POP
50172: POP
// end ;
50173: LD_VAR 0 3
50177: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50178: LD_INT 0
50180: PPUSH
50181: PPUSH
50182: PPUSH
50183: PPUSH
// if not unit or not points then
50184: LD_VAR 0 1
50188: NOT
50189: PUSH
50190: LD_VAR 0 2
50194: NOT
50195: OR
50196: IFFALSE 50200
// exit ;
50198: GO 50290
// dist := 99999 ;
50200: LD_ADDR_VAR 0 5
50204: PUSH
50205: LD_INT 99999
50207: ST_TO_ADDR
// for i in points do
50208: LD_ADDR_VAR 0 4
50212: PUSH
50213: LD_VAR 0 2
50217: PUSH
50218: FOR_IN
50219: IFFALSE 50288
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50221: LD_ADDR_VAR 0 6
50225: PUSH
50226: LD_VAR 0 1
50230: PPUSH
50231: LD_VAR 0 4
50235: PUSH
50236: LD_INT 1
50238: ARRAY
50239: PPUSH
50240: LD_VAR 0 4
50244: PUSH
50245: LD_INT 2
50247: ARRAY
50248: PPUSH
50249: CALL_OW 297
50253: ST_TO_ADDR
// if tmpDist < dist then
50254: LD_VAR 0 6
50258: PUSH
50259: LD_VAR 0 5
50263: LESS
50264: IFFALSE 50286
// begin result := i ;
50266: LD_ADDR_VAR 0 3
50270: PUSH
50271: LD_VAR 0 4
50275: ST_TO_ADDR
// dist := tmpDist ;
50276: LD_ADDR_VAR 0 5
50280: PUSH
50281: LD_VAR 0 6
50285: ST_TO_ADDR
// end ; end ;
50286: GO 50218
50288: POP
50289: POP
// end ;
50290: LD_VAR 0 3
50294: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50295: LD_INT 0
50297: PPUSH
// uc_side := side ;
50298: LD_ADDR_OWVAR 20
50302: PUSH
50303: LD_VAR 0 1
50307: ST_TO_ADDR
// uc_nation := 3 ;
50308: LD_ADDR_OWVAR 21
50312: PUSH
50313: LD_INT 3
50315: ST_TO_ADDR
// vc_chassis := 25 ;
50316: LD_ADDR_OWVAR 37
50320: PUSH
50321: LD_INT 25
50323: ST_TO_ADDR
// vc_engine := engine_siberite ;
50324: LD_ADDR_OWVAR 39
50328: PUSH
50329: LD_INT 3
50331: ST_TO_ADDR
// vc_control := control_computer ;
50332: LD_ADDR_OWVAR 38
50336: PUSH
50337: LD_INT 3
50339: ST_TO_ADDR
// vc_weapon := 59 ;
50340: LD_ADDR_OWVAR 40
50344: PUSH
50345: LD_INT 59
50347: ST_TO_ADDR
// result := CreateVehicle ;
50348: LD_ADDR_VAR 0 5
50352: PUSH
50353: CALL_OW 45
50357: ST_TO_ADDR
// SetDir ( result , d ) ;
50358: LD_VAR 0 5
50362: PPUSH
50363: LD_VAR 0 4
50367: PPUSH
50368: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50372: LD_VAR 0 5
50376: PPUSH
50377: LD_VAR 0 2
50381: PPUSH
50382: LD_VAR 0 3
50386: PPUSH
50387: LD_INT 0
50389: PPUSH
50390: CALL_OW 48
// end ;
50394: LD_VAR 0 5
50398: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50399: LD_INT 0
50401: PPUSH
50402: PPUSH
50403: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50404: LD_ADDR_VAR 0 2
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50427: LD_VAR 0 1
50431: NOT
50432: PUSH
50433: LD_VAR 0 1
50437: PPUSH
50438: CALL_OW 264
50442: PUSH
50443: LD_INT 12
50445: PUSH
50446: LD_INT 51
50448: PUSH
50449: LD_INT 32
50451: PUSH
50452: LD_INT 89
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: IN
50461: NOT
50462: OR
50463: IFFALSE 50467
// exit ;
50465: GO 50565
// for i := 1 to 3 do
50467: LD_ADDR_VAR 0 3
50471: PUSH
50472: DOUBLE
50473: LD_INT 1
50475: DEC
50476: ST_TO_ADDR
50477: LD_INT 3
50479: PUSH
50480: FOR_TO
50481: IFFALSE 50563
// begin tmp := GetCargo ( cargo , i ) ;
50483: LD_ADDR_VAR 0 4
50487: PUSH
50488: LD_VAR 0 1
50492: PPUSH
50493: LD_VAR 0 3
50497: PPUSH
50498: CALL_OW 289
50502: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50503: LD_ADDR_VAR 0 2
50507: PUSH
50508: LD_VAR 0 2
50512: PPUSH
50513: LD_VAR 0 3
50517: PPUSH
50518: LD_VAR 0 4
50522: PPUSH
50523: CALL_OW 1
50527: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50528: LD_ADDR_VAR 0 2
50532: PUSH
50533: LD_VAR 0 2
50537: PPUSH
50538: LD_INT 4
50540: PPUSH
50541: LD_VAR 0 2
50545: PUSH
50546: LD_INT 4
50548: ARRAY
50549: PUSH
50550: LD_VAR 0 4
50554: PLUS
50555: PPUSH
50556: CALL_OW 1
50560: ST_TO_ADDR
// end ;
50561: GO 50480
50563: POP
50564: POP
// end ;
50565: LD_VAR 0 2
50569: RET
// export function Length ( array ) ; begin
50570: LD_INT 0
50572: PPUSH
// result := array + 0 ;
50573: LD_ADDR_VAR 0 2
50577: PUSH
50578: LD_VAR 0 1
50582: PUSH
50583: LD_INT 0
50585: PLUS
50586: ST_TO_ADDR
// end ;
50587: LD_VAR 0 2
50591: RET
// export function PrepareArray ( array ) ; begin
50592: LD_INT 0
50594: PPUSH
// result := array diff 0 ;
50595: LD_ADDR_VAR 0 2
50599: PUSH
50600: LD_VAR 0 1
50604: PUSH
50605: LD_INT 0
50607: DIFF
50608: ST_TO_ADDR
// if not result [ 1 ] then
50609: LD_VAR 0 2
50613: PUSH
50614: LD_INT 1
50616: ARRAY
50617: NOT
50618: IFFALSE 50638
// result := Delete ( result , 1 ) ;
50620: LD_ADDR_VAR 0 2
50624: PUSH
50625: LD_VAR 0 2
50629: PPUSH
50630: LD_INT 1
50632: PPUSH
50633: CALL_OW 3
50637: ST_TO_ADDR
// end ;
50638: LD_VAR 0 2
50642: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50643: LD_INT 0
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
// sibRocketRange := 25 ;
50649: LD_ADDR_VAR 0 6
50653: PUSH
50654: LD_INT 25
50656: ST_TO_ADDR
// result := false ;
50657: LD_ADDR_VAR 0 4
50661: PUSH
50662: LD_INT 0
50664: ST_TO_ADDR
// for i := 0 to 5 do
50665: LD_ADDR_VAR 0 5
50669: PUSH
50670: DOUBLE
50671: LD_INT 0
50673: DEC
50674: ST_TO_ADDR
50675: LD_INT 5
50677: PUSH
50678: FOR_TO
50679: IFFALSE 50746
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50681: LD_VAR 0 1
50685: PPUSH
50686: LD_VAR 0 5
50690: PPUSH
50691: LD_VAR 0 6
50695: PPUSH
50696: CALL_OW 272
50700: PPUSH
50701: LD_VAR 0 2
50705: PPUSH
50706: LD_VAR 0 5
50710: PPUSH
50711: LD_VAR 0 6
50715: PPUSH
50716: CALL_OW 273
50720: PPUSH
50721: LD_VAR 0 3
50725: PPUSH
50726: CALL_OW 309
50730: IFFALSE 50744
// begin result := true ;
50732: LD_ADDR_VAR 0 4
50736: PUSH
50737: LD_INT 1
50739: ST_TO_ADDR
// exit ;
50740: POP
50741: POP
50742: GO 50748
// end ;
50744: GO 50678
50746: POP
50747: POP
// end ;
50748: LD_VAR 0 4
50752: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50753: LD_INT 0
50755: PPUSH
50756: PPUSH
50757: PPUSH
// if btype = b_depot then
50758: LD_VAR 0 2
50762: PUSH
50763: LD_INT 0
50765: EQUAL
50766: IFFALSE 50778
// begin result := true ;
50768: LD_ADDR_VAR 0 3
50772: PUSH
50773: LD_INT 1
50775: ST_TO_ADDR
// exit ;
50776: GO 50894
// end ; pom := GetBase ( depot ) ;
50778: LD_ADDR_VAR 0 4
50782: PUSH
50783: LD_VAR 0 1
50787: PPUSH
50788: CALL_OW 274
50792: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50793: LD_ADDR_VAR 0 5
50797: PUSH
50798: LD_VAR 0 2
50802: PPUSH
50803: LD_VAR 0 1
50807: PPUSH
50808: CALL_OW 248
50812: PPUSH
50813: CALL_OW 450
50817: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50818: LD_ADDR_VAR 0 3
50822: PUSH
50823: LD_VAR 0 4
50827: PPUSH
50828: LD_INT 1
50830: PPUSH
50831: CALL_OW 275
50835: PUSH
50836: LD_VAR 0 5
50840: PUSH
50841: LD_INT 1
50843: ARRAY
50844: GREATEREQUAL
50845: PUSH
50846: LD_VAR 0 4
50850: PPUSH
50851: LD_INT 2
50853: PPUSH
50854: CALL_OW 275
50858: PUSH
50859: LD_VAR 0 5
50863: PUSH
50864: LD_INT 2
50866: ARRAY
50867: GREATEREQUAL
50868: AND
50869: PUSH
50870: LD_VAR 0 4
50874: PPUSH
50875: LD_INT 3
50877: PPUSH
50878: CALL_OW 275
50882: PUSH
50883: LD_VAR 0 5
50887: PUSH
50888: LD_INT 3
50890: ARRAY
50891: GREATEREQUAL
50892: AND
50893: ST_TO_ADDR
// end ;
50894: LD_VAR 0 3
50898: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50899: LD_INT 0
50901: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50902: LD_VAR 0 1
50906: PPUSH
50907: LD_VAR 0 2
50911: PPUSH
50912: LD_INT 0
50914: PPUSH
50915: LD_INT 0
50917: PPUSH
50918: LD_INT 1
50920: PPUSH
50921: LD_INT 0
50923: PPUSH
50924: CALL_OW 587
// end ;
50928: LD_VAR 0 3
50932: RET
// export function CenterOnNow ( unit ) ; begin
50933: LD_INT 0
50935: PPUSH
// result := IsInUnit ( unit ) ;
50936: LD_ADDR_VAR 0 2
50940: PUSH
50941: LD_VAR 0 1
50945: PPUSH
50946: CALL_OW 310
50950: ST_TO_ADDR
// if not result then
50951: LD_VAR 0 2
50955: NOT
50956: IFFALSE 50968
// result := unit ;
50958: LD_ADDR_VAR 0 2
50962: PUSH
50963: LD_VAR 0 1
50967: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50968: LD_VAR 0 1
50972: PPUSH
50973: CALL_OW 87
// end ;
50977: LD_VAR 0 2
50981: RET
// export function ComMoveHex ( unit , hex ) ; begin
50982: LD_INT 0
50984: PPUSH
// if not hex then
50985: LD_VAR 0 2
50989: NOT
50990: IFFALSE 50994
// exit ;
50992: GO 51047
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50994: LD_VAR 0 2
50998: PUSH
50999: LD_INT 1
51001: ARRAY
51002: PPUSH
51003: LD_VAR 0 2
51007: PUSH
51008: LD_INT 2
51010: ARRAY
51011: PPUSH
51012: CALL_OW 428
51016: IFFALSE 51020
// exit ;
51018: GO 51047
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51020: LD_VAR 0 1
51024: PPUSH
51025: LD_VAR 0 2
51029: PUSH
51030: LD_INT 1
51032: ARRAY
51033: PPUSH
51034: LD_VAR 0 2
51038: PUSH
51039: LD_INT 2
51041: ARRAY
51042: PPUSH
51043: CALL_OW 111
// end ;
51047: LD_VAR 0 3
51051: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51052: LD_INT 0
51054: PPUSH
51055: PPUSH
51056: PPUSH
// if not unit or not enemy then
51057: LD_VAR 0 1
51061: NOT
51062: PUSH
51063: LD_VAR 0 2
51067: NOT
51068: OR
51069: IFFALSE 51073
// exit ;
51071: GO 51197
// x := GetX ( enemy ) ;
51073: LD_ADDR_VAR 0 4
51077: PUSH
51078: LD_VAR 0 2
51082: PPUSH
51083: CALL_OW 250
51087: ST_TO_ADDR
// y := GetY ( enemy ) ;
51088: LD_ADDR_VAR 0 5
51092: PUSH
51093: LD_VAR 0 2
51097: PPUSH
51098: CALL_OW 251
51102: ST_TO_ADDR
// if ValidHex ( x , y ) then
51103: LD_VAR 0 4
51107: PPUSH
51108: LD_VAR 0 5
51112: PPUSH
51113: CALL_OW 488
51117: IFFALSE 51197
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51119: LD_VAR 0 2
51123: PPUSH
51124: CALL_OW 247
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: IN
51139: PUSH
51140: LD_VAR 0 1
51144: PPUSH
51145: CALL_OW 255
51149: PPUSH
51150: LD_VAR 0 2
51154: PPUSH
51155: CALL_OW 292
51159: OR
51160: IFFALSE 51178
// ComAttackUnit ( unit , enemy ) else
51162: LD_VAR 0 1
51166: PPUSH
51167: LD_VAR 0 2
51171: PPUSH
51172: CALL_OW 115
51176: GO 51197
// ComAgressiveMove ( unit , x , y ) ;
51178: LD_VAR 0 1
51182: PPUSH
51183: LD_VAR 0 4
51187: PPUSH
51188: LD_VAR 0 5
51192: PPUSH
51193: CALL_OW 114
// end ;
51197: LD_VAR 0 3
51201: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51202: LD_INT 0
51204: PPUSH
51205: PPUSH
51206: PPUSH
// list := AreaToList ( area , 0 ) ;
51207: LD_ADDR_VAR 0 5
51211: PUSH
51212: LD_VAR 0 1
51216: PPUSH
51217: LD_INT 0
51219: PPUSH
51220: CALL_OW 517
51224: ST_TO_ADDR
// if not list then
51225: LD_VAR 0 5
51229: NOT
51230: IFFALSE 51234
// exit ;
51232: GO 51364
// if all then
51234: LD_VAR 0 2
51238: IFFALSE 51326
// begin for i := 1 to list [ 1 ] do
51240: LD_ADDR_VAR 0 4
51244: PUSH
51245: DOUBLE
51246: LD_INT 1
51248: DEC
51249: ST_TO_ADDR
51250: LD_VAR 0 5
51254: PUSH
51255: LD_INT 1
51257: ARRAY
51258: PUSH
51259: FOR_TO
51260: IFFALSE 51322
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51262: LD_ADDR_VAR 0 3
51266: PUSH
51267: LD_VAR 0 3
51271: PPUSH
51272: LD_VAR 0 3
51276: PUSH
51277: LD_INT 1
51279: PLUS
51280: PPUSH
51281: LD_VAR 0 5
51285: PUSH
51286: LD_INT 1
51288: ARRAY
51289: PUSH
51290: LD_VAR 0 4
51294: ARRAY
51295: PUSH
51296: LD_VAR 0 5
51300: PUSH
51301: LD_INT 2
51303: ARRAY
51304: PUSH
51305: LD_VAR 0 4
51309: ARRAY
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PPUSH
51315: CALL_OW 1
51319: ST_TO_ADDR
51320: GO 51259
51322: POP
51323: POP
// exit ;
51324: GO 51364
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51326: LD_ADDR_VAR 0 3
51330: PUSH
51331: LD_VAR 0 5
51335: PUSH
51336: LD_INT 1
51338: ARRAY
51339: PUSH
51340: LD_INT 1
51342: ARRAY
51343: PUSH
51344: LD_VAR 0 5
51348: PUSH
51349: LD_INT 2
51351: ARRAY
51352: PUSH
51353: LD_INT 1
51355: ARRAY
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: ST_TO_ADDR
// end ;
51364: LD_VAR 0 3
51368: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51369: LD_INT 0
51371: PPUSH
51372: PPUSH
// list := AreaToList ( area , 0 ) ;
51373: LD_ADDR_VAR 0 4
51377: PUSH
51378: LD_VAR 0 1
51382: PPUSH
51383: LD_INT 0
51385: PPUSH
51386: CALL_OW 517
51390: ST_TO_ADDR
// if not list then
51391: LD_VAR 0 4
51395: NOT
51396: IFFALSE 51400
// exit ;
51398: GO 51441
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51400: LD_ADDR_VAR 0 3
51404: PUSH
51405: LD_VAR 0 4
51409: PUSH
51410: LD_INT 1
51412: ARRAY
51413: PUSH
51414: LD_INT 1
51416: ARRAY
51417: PUSH
51418: LD_VAR 0 4
51422: PUSH
51423: LD_INT 2
51425: ARRAY
51426: PUSH
51427: LD_INT 1
51429: ARRAY
51430: PUSH
51431: LD_VAR 0 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// end ;
51441: LD_VAR 0 3
51445: RET
// export function First ( array ) ; begin
51446: LD_INT 0
51448: PPUSH
// if not array then
51449: LD_VAR 0 1
51453: NOT
51454: IFFALSE 51458
// exit ;
51456: GO 51472
// result := array [ 1 ] ;
51458: LD_ADDR_VAR 0 2
51462: PUSH
51463: LD_VAR 0 1
51467: PUSH
51468: LD_INT 1
51470: ARRAY
51471: ST_TO_ADDR
// end ;
51472: LD_VAR 0 2
51476: RET
// export function Last ( array ) ; begin
51477: LD_INT 0
51479: PPUSH
// if not array then
51480: LD_VAR 0 1
51484: NOT
51485: IFFALSE 51489
// exit ;
51487: GO 51505
// result := array [ array ] ;
51489: LD_ADDR_VAR 0 2
51493: PUSH
51494: LD_VAR 0 1
51498: PUSH
51499: LD_VAR 0 1
51503: ARRAY
51504: ST_TO_ADDR
// end ;
51505: LD_VAR 0 2
51509: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51510: LD_INT 0
51512: PPUSH
51513: PPUSH
// result := [ ] ;
51514: LD_ADDR_VAR 0 5
51518: PUSH
51519: EMPTY
51520: ST_TO_ADDR
// if not array then
51521: LD_VAR 0 1
51525: NOT
51526: IFFALSE 51530
// exit ;
51528: GO 51642
// for i := 1 to array do
51530: LD_ADDR_VAR 0 6
51534: PUSH
51535: DOUBLE
51536: LD_INT 1
51538: DEC
51539: ST_TO_ADDR
51540: LD_VAR 0 1
51544: PUSH
51545: FOR_TO
51546: IFFALSE 51640
// if array [ i ] [ index ] = value then
51548: LD_VAR 0 1
51552: PUSH
51553: LD_VAR 0 6
51557: ARRAY
51558: PUSH
51559: LD_VAR 0 2
51563: ARRAY
51564: PUSH
51565: LD_VAR 0 3
51569: EQUAL
51570: IFFALSE 51638
// begin if indexColumn then
51572: LD_VAR 0 4
51576: IFFALSE 51612
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51578: LD_ADDR_VAR 0 5
51582: PUSH
51583: LD_VAR 0 5
51587: PPUSH
51588: LD_VAR 0 1
51592: PUSH
51593: LD_VAR 0 6
51597: ARRAY
51598: PUSH
51599: LD_VAR 0 4
51603: ARRAY
51604: PPUSH
51605: CALL 46830 0 2
51609: ST_TO_ADDR
51610: GO 51638
// result := Join ( result , array [ i ] ) ;
51612: LD_ADDR_VAR 0 5
51616: PUSH
51617: LD_VAR 0 5
51621: PPUSH
51622: LD_VAR 0 1
51626: PUSH
51627: LD_VAR 0 6
51631: ARRAY
51632: PPUSH
51633: CALL 46830 0 2
51637: ST_TO_ADDR
// end ;
51638: GO 51545
51640: POP
51641: POP
// end ;
51642: LD_VAR 0 5
51646: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51647: LD_INT 0
51649: PPUSH
// if not vehicles or not parkingPoint then
51650: LD_VAR 0 1
51654: NOT
51655: PUSH
51656: LD_VAR 0 2
51660: NOT
51661: OR
51662: IFFALSE 51666
// exit ;
51664: GO 51764
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51666: LD_ADDR_VAR 0 1
51670: PUSH
51671: LD_VAR 0 1
51675: PPUSH
51676: LD_INT 50
51678: PUSH
51679: EMPTY
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 92
51687: PUSH
51688: LD_VAR 0 2
51692: PUSH
51693: LD_INT 1
51695: ARRAY
51696: PUSH
51697: LD_VAR 0 2
51701: PUSH
51702: LD_INT 2
51704: ARRAY
51705: PUSH
51706: LD_INT 8
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PPUSH
51723: CALL_OW 72
51727: ST_TO_ADDR
// if not vehicles then
51728: LD_VAR 0 1
51732: NOT
51733: IFFALSE 51737
// exit ;
51735: GO 51764
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51737: LD_VAR 0 1
51741: PPUSH
51742: LD_VAR 0 2
51746: PUSH
51747: LD_INT 1
51749: ARRAY
51750: PPUSH
51751: LD_VAR 0 2
51755: PUSH
51756: LD_INT 2
51758: ARRAY
51759: PPUSH
51760: CALL_OW 111
// end ;
51764: LD_VAR 0 3
51768: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51769: LD_INT 0
51771: PPUSH
51772: PPUSH
51773: PPUSH
// if not side or not area then
51774: LD_VAR 0 1
51778: NOT
51779: PUSH
51780: LD_VAR 0 2
51784: NOT
51785: OR
51786: IFFALSE 51790
// exit ;
51788: GO 51909
// tmp := AreaToList ( area , 0 ) ;
51790: LD_ADDR_VAR 0 5
51794: PUSH
51795: LD_VAR 0 2
51799: PPUSH
51800: LD_INT 0
51802: PPUSH
51803: CALL_OW 517
51807: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51808: LD_ADDR_VAR 0 4
51812: PUSH
51813: DOUBLE
51814: LD_INT 1
51816: DEC
51817: ST_TO_ADDR
51818: LD_VAR 0 5
51822: PUSH
51823: LD_INT 1
51825: ARRAY
51826: PUSH
51827: FOR_TO
51828: IFFALSE 51907
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51830: LD_VAR 0 5
51834: PUSH
51835: LD_INT 1
51837: ARRAY
51838: PUSH
51839: LD_VAR 0 4
51843: ARRAY
51844: PPUSH
51845: LD_VAR 0 5
51849: PUSH
51850: LD_INT 2
51852: ARRAY
51853: PUSH
51854: LD_VAR 0 4
51858: ARRAY
51859: PPUSH
51860: CALL_OW 351
51864: IFFALSE 51905
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51866: LD_VAR 0 5
51870: PUSH
51871: LD_INT 1
51873: ARRAY
51874: PUSH
51875: LD_VAR 0 4
51879: ARRAY
51880: PPUSH
51881: LD_VAR 0 5
51885: PUSH
51886: LD_INT 2
51888: ARRAY
51889: PUSH
51890: LD_VAR 0 4
51894: ARRAY
51895: PPUSH
51896: LD_VAR 0 1
51900: PPUSH
51901: CALL_OW 244
// end ;
51905: GO 51827
51907: POP
51908: POP
// end ; end_of_file
51909: LD_VAR 0 3
51913: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
51914: LD_VAR 0 1
51918: PUSH
51919: LD_INT 200
51921: DOUBLE
51922: GREATEREQUAL
51923: IFFALSE 51931
51925: LD_INT 299
51927: DOUBLE
51928: LESSEQUAL
51929: IFTRUE 51933
51931: GO 51965
51933: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
51934: LD_VAR 0 1
51938: PPUSH
51939: LD_VAR 0 2
51943: PPUSH
51944: LD_VAR 0 3
51948: PPUSH
51949: LD_VAR 0 4
51953: PPUSH
51954: LD_VAR 0 5
51958: PPUSH
51959: CALL 52662 0 5
51963: GO 52042
51965: LD_INT 300
51967: DOUBLE
51968: GREATEREQUAL
51969: IFFALSE 51977
51971: LD_INT 399
51973: DOUBLE
51974: LESSEQUAL
51975: IFTRUE 51979
51977: GO 52041
51979: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
51980: LD_VAR 0 1
51984: PPUSH
51985: LD_VAR 0 2
51989: PPUSH
51990: LD_VAR 0 3
51994: PPUSH
51995: LD_VAR 0 4
51999: PPUSH
52000: LD_VAR 0 5
52004: PPUSH
52005: LD_VAR 0 6
52009: PPUSH
52010: LD_VAR 0 7
52014: PPUSH
52015: LD_VAR 0 8
52019: PPUSH
52020: LD_VAR 0 9
52024: PPUSH
52025: LD_VAR 0 10
52029: PPUSH
52030: LD_VAR 0 11
52034: PPUSH
52035: CALL 58989 0 11
52039: GO 52042
52041: POP
// end ;
52042: PPOPN 11
52044: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52045: LD_VAR 0 1
52049: PPUSH
52050: LD_VAR 0 2
52054: PPUSH
52055: LD_VAR 0 3
52059: PPUSH
52060: LD_VAR 0 4
52064: PPUSH
52065: LD_VAR 0 5
52069: PPUSH
52070: CALL 52127 0 5
// end ; end_of_file
52074: PPOPN 5
52076: END
// export function SOS_UnitDestroyed ( un ) ; begin
52077: LD_INT 0
52079: PPUSH
// ComRadiation ( un ) ;
52080: LD_VAR 0 1
52084: PPUSH
52085: CALL 53066 0 1
// end ;
52089: LD_VAR 0 2
52093: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52094: LD_INT 0
52096: PPUSH
// ComRadiation ( un ) ;
52097: LD_VAR 0 1
52101: PPUSH
52102: CALL 53066 0 1
// end ;
52106: LD_VAR 0 2
52110: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52111: LD_INT 0
52113: PPUSH
// end ;
52114: LD_VAR 0 4
52118: RET
// export function SOS_Command ( cmd ) ; begin
52119: LD_INT 0
52121: PPUSH
// end ;
52122: LD_VAR 0 2
52126: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52127: LD_INT 0
52129: PPUSH
// end ;
52130: LD_VAR 0 6
52134: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
52135: LD_INT 0
52137: PPUSH
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
// if not vehicle or not factory then
52142: LD_VAR 0 1
52146: NOT
52147: PUSH
52148: LD_VAR 0 2
52152: NOT
52153: OR
52154: IFFALSE 52158
// exit ;
52156: GO 52657
// if not factoryWaypoints then
52158: LD_EXP 54
52162: NOT
52163: IFFALSE 52167
// exit ;
52165: GO 52657
// for i := 1 to Count ( factoryWaypoints ) do
52167: LD_ADDR_VAR 0 4
52171: PUSH
52172: DOUBLE
52173: LD_INT 1
52175: DEC
52176: ST_TO_ADDR
52177: LD_EXP 54
52181: PPUSH
52182: CALL 11221 0 1
52186: PUSH
52187: FOR_TO
52188: IFFALSE 52655
// if factoryWaypoints [ i ] [ 2 ] = factory then
52190: LD_EXP 54
52194: PUSH
52195: LD_VAR 0 4
52199: ARRAY
52200: PUSH
52201: LD_INT 2
52203: ARRAY
52204: PUSH
52205: LD_VAR 0 2
52209: EQUAL
52210: IFFALSE 52653
// begin if GetControl ( vehicle ) = control_manual then
52212: LD_VAR 0 1
52216: PPUSH
52217: CALL_OW 263
52221: PUSH
52222: LD_INT 1
52224: EQUAL
52225: IFFALSE 52536
// begin driver := IsDrivenBy ( vehicle ) ;
52227: LD_ADDR_VAR 0 6
52231: PUSH
52232: LD_VAR 0 1
52236: PPUSH
52237: CALL_OW 311
52241: ST_TO_ADDR
// tag := GetTag ( driver ) ;
52242: LD_ADDR_VAR 0 5
52246: PUSH
52247: LD_VAR 0 6
52251: PPUSH
52252: CALL_OW 110
52256: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
52257: LD_VAR 0 5
52261: PUSH
52262: LD_INT 501
52264: EQUAL
52265: PUSH
52266: LD_VAR 0 1
52270: PPUSH
52271: CALL_OW 110
52275: PUSH
52276: LD_INT 501
52278: EQUAL
52279: OR
52280: IFFALSE 52286
// exit ;
52282: POP
52283: POP
52284: GO 52657
// if not HasTask ( driver ) then
52286: LD_VAR 0 6
52290: PPUSH
52291: CALL_OW 314
52295: NOT
52296: IFFALSE 52534
// begin SetTag ( driver , tDriver ) ;
52298: LD_VAR 0 6
52302: PPUSH
52303: LD_INT 501
52305: PPUSH
52306: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
52310: LD_VAR 0 1
52314: PPUSH
52315: LD_INT 501
52317: PPUSH
52318: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52322: LD_ADDR_VAR 0 7
52326: PUSH
52327: LD_EXP 54
52331: PUSH
52332: LD_VAR 0 4
52336: ARRAY
52337: PUSH
52338: LD_INT 3
52340: ARRAY
52341: PPUSH
52342: LD_EXP 54
52346: PUSH
52347: LD_VAR 0 4
52351: ARRAY
52352: PUSH
52353: LD_INT 4
52355: ARRAY
52356: PPUSH
52357: CALL_OW 428
52361: ST_TO_ADDR
// if hex then
52362: LD_VAR 0 7
52366: IFFALSE 52384
// ComMoveUnit ( driver , hex ) else
52368: LD_VAR 0 6
52372: PPUSH
52373: LD_VAR 0 7
52377: PPUSH
52378: CALL_OW 112
52382: GO 52423
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52384: LD_VAR 0 6
52388: PPUSH
52389: LD_EXP 54
52393: PUSH
52394: LD_VAR 0 4
52398: ARRAY
52399: PUSH
52400: LD_INT 3
52402: ARRAY
52403: PPUSH
52404: LD_EXP 54
52408: PUSH
52409: LD_VAR 0 4
52413: ARRAY
52414: PUSH
52415: LD_INT 4
52417: ARRAY
52418: PPUSH
52419: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52423: LD_VAR 0 6
52427: PPUSH
52428: CALL_OW 181
// if Multiplayer then
52432: LD_OWVAR 4
52436: IFFALSE 52485
// begin repeat wait ( 10 ) ;
52438: LD_INT 10
52440: PPUSH
52441: CALL_OW 67
// until not IsInUnit ( driver ) ;
52445: LD_VAR 0 6
52449: PPUSH
52450: CALL_OW 310
52454: NOT
52455: IFFALSE 52438
// if not HasTask ( driver ) then
52457: LD_VAR 0 6
52461: PPUSH
52462: CALL_OW 314
52466: NOT
52467: IFFALSE 52483
// ComEnterUnit ( driver , factory ) ;
52469: LD_VAR 0 6
52473: PPUSH
52474: LD_VAR 0 2
52478: PPUSH
52479: CALL_OW 120
// end else
52483: GO 52499
// AddComEnterUnit ( driver , factory ) ;
52485: LD_VAR 0 6
52489: PPUSH
52490: LD_VAR 0 2
52494: PPUSH
52495: CALL_OW 180
// wait ( 0 0$1 ) ;
52499: LD_INT 35
52501: PPUSH
52502: CALL_OW 67
// SetTag ( driver , tag ) ;
52506: LD_VAR 0 6
52510: PPUSH
52511: LD_VAR 0 5
52515: PPUSH
52516: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
52520: LD_VAR 0 1
52524: PPUSH
52525: LD_INT 0
52527: PPUSH
52528: CALL_OW 109
// break ;
52532: GO 52655
// end ; end else
52534: GO 52653
// if GetControl ( vehicle ) = control_remote then
52536: LD_VAR 0 1
52540: PPUSH
52541: CALL_OW 263
52545: PUSH
52546: LD_INT 2
52548: EQUAL
52549: IFFALSE 52612
// begin wait ( 0 0$2 ) ;
52551: LD_INT 70
52553: PPUSH
52554: CALL_OW 67
// if Connect ( vehicle ) then
52558: LD_VAR 0 1
52562: PPUSH
52563: CALL 17427 0 1
52567: IFFALSE 52608
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52569: LD_VAR 0 1
52573: PPUSH
52574: LD_EXP 54
52578: PUSH
52579: LD_VAR 0 4
52583: ARRAY
52584: PUSH
52585: LD_INT 3
52587: ARRAY
52588: PPUSH
52589: LD_EXP 54
52593: PUSH
52594: LD_VAR 0 4
52598: ARRAY
52599: PUSH
52600: LD_INT 4
52602: ARRAY
52603: PPUSH
52604: CALL_OW 171
// break ;
52608: GO 52655
// end else
52610: GO 52653
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52612: LD_VAR 0 1
52616: PPUSH
52617: LD_EXP 54
52621: PUSH
52622: LD_VAR 0 4
52626: ARRAY
52627: PUSH
52628: LD_INT 3
52630: ARRAY
52631: PPUSH
52632: LD_EXP 54
52636: PUSH
52637: LD_VAR 0 4
52641: ARRAY
52642: PUSH
52643: LD_INT 4
52645: ARRAY
52646: PPUSH
52647: CALL_OW 171
// break ;
52651: GO 52655
// end ; end ;
52653: GO 52187
52655: POP
52656: POP
// end ;
52657: LD_VAR 0 3
52661: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52662: LD_INT 0
52664: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52665: LD_VAR 0 1
52669: PUSH
52670: LD_INT 250
52672: EQUAL
52673: PUSH
52674: LD_VAR 0 2
52678: PPUSH
52679: CALL_OW 264
52683: PUSH
52684: LD_INT 81
52686: EQUAL
52687: AND
52688: IFFALSE 52709
// MinerPlaceMine ( unit , x , y ) ;
52690: LD_VAR 0 2
52694: PPUSH
52695: LD_VAR 0 4
52699: PPUSH
52700: LD_VAR 0 5
52704: PPUSH
52705: CALL 55801 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52709: LD_VAR 0 1
52713: PUSH
52714: LD_INT 251
52716: EQUAL
52717: PUSH
52718: LD_VAR 0 2
52722: PPUSH
52723: CALL_OW 264
52727: PUSH
52728: LD_INT 81
52730: EQUAL
52731: AND
52732: IFFALSE 52753
// MinerDetonateMine ( unit , x , y ) ;
52734: LD_VAR 0 2
52738: PPUSH
52739: LD_VAR 0 4
52743: PPUSH
52744: LD_VAR 0 5
52748: PPUSH
52749: CALL 56076 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52753: LD_VAR 0 1
52757: PUSH
52758: LD_INT 252
52760: EQUAL
52761: PUSH
52762: LD_VAR 0 2
52766: PPUSH
52767: CALL_OW 264
52771: PUSH
52772: LD_INT 81
52774: EQUAL
52775: AND
52776: IFFALSE 52797
// MinerCreateMinefield ( unit , x , y ) ;
52778: LD_VAR 0 2
52782: PPUSH
52783: LD_VAR 0 4
52787: PPUSH
52788: LD_VAR 0 5
52792: PPUSH
52793: CALL 56493 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52797: LD_VAR 0 1
52801: PUSH
52802: LD_INT 253
52804: EQUAL
52805: PUSH
52806: LD_VAR 0 2
52810: PPUSH
52811: CALL_OW 257
52815: PUSH
52816: LD_INT 5
52818: EQUAL
52819: AND
52820: IFFALSE 52841
// ComBinocular ( unit , x , y ) ;
52822: LD_VAR 0 2
52826: PPUSH
52827: LD_VAR 0 4
52831: PPUSH
52832: LD_VAR 0 5
52836: PPUSH
52837: CALL 56862 0 3
// if selectedUnit then
52841: LD_VAR 0 3
52845: IFFALSE 52901
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52847: LD_VAR 0 1
52851: PUSH
52852: LD_INT 254
52854: EQUAL
52855: PUSH
52856: LD_VAR 0 2
52860: PPUSH
52861: CALL_OW 264
52865: PUSH
52866: LD_INT 99
52868: EQUAL
52869: AND
52870: PUSH
52871: LD_VAR 0 3
52875: PPUSH
52876: CALL_OW 263
52880: PUSH
52881: LD_INT 3
52883: EQUAL
52884: AND
52885: IFFALSE 52901
// HackDestroyVehicle ( unit , selectedUnit ) ;
52887: LD_VAR 0 2
52891: PPUSH
52892: LD_VAR 0 3
52896: PPUSH
52897: CALL 55165 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52901: LD_VAR 0 1
52905: PUSH
52906: LD_INT 255
52908: EQUAL
52909: PUSH
52910: LD_VAR 0 2
52914: PPUSH
52915: CALL_OW 264
52919: PUSH
52920: LD_INT 14
52922: PUSH
52923: LD_INT 53
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: IN
52930: AND
52931: PUSH
52932: LD_VAR 0 4
52936: PPUSH
52937: LD_VAR 0 5
52941: PPUSH
52942: CALL_OW 488
52946: AND
52947: IFFALSE 52971
// CutTreeXYR ( unit , x , y , 12 ) ;
52949: LD_VAR 0 2
52953: PPUSH
52954: LD_VAR 0 4
52958: PPUSH
52959: LD_VAR 0 5
52963: PPUSH
52964: LD_INT 12
52966: PPUSH
52967: CALL 53162 0 4
// if cmd = 256 then
52971: LD_VAR 0 1
52975: PUSH
52976: LD_INT 256
52978: EQUAL
52979: IFFALSE 53000
// SetFactoryWaypoint ( unit , x , y ) ;
52981: LD_VAR 0 2
52985: PPUSH
52986: LD_VAR 0 4
52990: PPUSH
52991: LD_VAR 0 5
52995: PPUSH
52996: CALL 58997 0 3
// if cmd = 257 then
53000: LD_VAR 0 1
53004: PUSH
53005: LD_INT 257
53007: EQUAL
53008: IFFALSE 53029
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53010: LD_VAR 0 2
53014: PPUSH
53015: LD_VAR 0 4
53019: PPUSH
53020: LD_VAR 0 5
53024: PPUSH
53025: CALL 59487 0 3
// if cmd = 258 then
53029: LD_VAR 0 1
53033: PUSH
53034: LD_INT 258
53036: EQUAL
53037: IFFALSE 53061
// BurnTreeXYR ( unit , x , y , 8 ) ;
53039: LD_VAR 0 2
53043: PPUSH
53044: LD_VAR 0 4
53048: PPUSH
53049: LD_VAR 0 5
53053: PPUSH
53054: LD_INT 8
53056: PPUSH
53057: CALL 53556 0 4
// end ;
53061: LD_VAR 0 6
53065: RET
// export function ComRadiation ( un ) ; var eff ; begin
53066: LD_INT 0
53068: PPUSH
53069: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL_OW 264
53079: PUSH
53080: LD_INT 91
53082: NONEQUAL
53083: IFFALSE 53087
// exit ;
53085: GO 53157
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53087: LD_INT 68
53089: PPUSH
53090: LD_VAR 0 1
53094: PPUSH
53095: CALL_OW 255
53099: PPUSH
53100: CALL_OW 321
53104: PUSH
53105: LD_INT 2
53107: EQUAL
53108: IFFALSE 53120
// eff := 70 else
53110: LD_ADDR_VAR 0 3
53114: PUSH
53115: LD_INT 70
53117: ST_TO_ADDR
53118: GO 53128
// eff := 30 ;
53120: LD_ADDR_VAR 0 3
53124: PUSH
53125: LD_INT 30
53127: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53128: LD_VAR 0 1
53132: PPUSH
53133: CALL_OW 250
53137: PPUSH
53138: LD_VAR 0 1
53142: PPUSH
53143: CALL_OW 251
53147: PPUSH
53148: LD_VAR 0 3
53152: PPUSH
53153: CALL_OW 495
// end ;
53157: LD_VAR 0 2
53161: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53162: LD_INT 0
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53173: LD_VAR 0 1
53177: PPUSH
53178: CALL_OW 302
53182: NOT
53183: PUSH
53184: LD_VAR 0 2
53188: PPUSH
53189: LD_VAR 0 3
53193: PPUSH
53194: CALL_OW 488
53198: NOT
53199: OR
53200: PUSH
53201: LD_VAR 0 4
53205: NOT
53206: OR
53207: IFFALSE 53211
// exit ;
53209: GO 53551
// list := [ ] ;
53211: LD_ADDR_VAR 0 13
53215: PUSH
53216: EMPTY
53217: ST_TO_ADDR
// if x - r < 0 then
53218: LD_VAR 0 2
53222: PUSH
53223: LD_VAR 0 4
53227: MINUS
53228: PUSH
53229: LD_INT 0
53231: LESS
53232: IFFALSE 53244
// min_x := 0 else
53234: LD_ADDR_VAR 0 7
53238: PUSH
53239: LD_INT 0
53241: ST_TO_ADDR
53242: GO 53260
// min_x := x - r ;
53244: LD_ADDR_VAR 0 7
53248: PUSH
53249: LD_VAR 0 2
53253: PUSH
53254: LD_VAR 0 4
53258: MINUS
53259: ST_TO_ADDR
// if y - r < 0 then
53260: LD_VAR 0 3
53264: PUSH
53265: LD_VAR 0 4
53269: MINUS
53270: PUSH
53271: LD_INT 0
53273: LESS
53274: IFFALSE 53286
// min_y := 0 else
53276: LD_ADDR_VAR 0 8
53280: PUSH
53281: LD_INT 0
53283: ST_TO_ADDR
53284: GO 53302
// min_y := y - r ;
53286: LD_ADDR_VAR 0 8
53290: PUSH
53291: LD_VAR 0 3
53295: PUSH
53296: LD_VAR 0 4
53300: MINUS
53301: ST_TO_ADDR
// max_x := x + r ;
53302: LD_ADDR_VAR 0 9
53306: PUSH
53307: LD_VAR 0 2
53311: PUSH
53312: LD_VAR 0 4
53316: PLUS
53317: ST_TO_ADDR
// max_y := y + r ;
53318: LD_ADDR_VAR 0 10
53322: PUSH
53323: LD_VAR 0 3
53327: PUSH
53328: LD_VAR 0 4
53332: PLUS
53333: ST_TO_ADDR
// for _x = min_x to max_x do
53334: LD_ADDR_VAR 0 11
53338: PUSH
53339: DOUBLE
53340: LD_VAR 0 7
53344: DEC
53345: ST_TO_ADDR
53346: LD_VAR 0 9
53350: PUSH
53351: FOR_TO
53352: IFFALSE 53469
// for _y = min_y to max_y do
53354: LD_ADDR_VAR 0 12
53358: PUSH
53359: DOUBLE
53360: LD_VAR 0 8
53364: DEC
53365: ST_TO_ADDR
53366: LD_VAR 0 10
53370: PUSH
53371: FOR_TO
53372: IFFALSE 53465
// begin if not ValidHex ( _x , _y ) then
53374: LD_VAR 0 11
53378: PPUSH
53379: LD_VAR 0 12
53383: PPUSH
53384: CALL_OW 488
53388: NOT
53389: IFFALSE 53393
// continue ;
53391: GO 53371
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53393: LD_VAR 0 11
53397: PPUSH
53398: LD_VAR 0 12
53402: PPUSH
53403: CALL_OW 351
53407: PUSH
53408: LD_VAR 0 11
53412: PPUSH
53413: LD_VAR 0 12
53417: PPUSH
53418: CALL_OW 554
53422: AND
53423: IFFALSE 53463
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53425: LD_ADDR_VAR 0 13
53429: PUSH
53430: LD_VAR 0 13
53434: PPUSH
53435: LD_VAR 0 13
53439: PUSH
53440: LD_INT 1
53442: PLUS
53443: PPUSH
53444: LD_VAR 0 11
53448: PUSH
53449: LD_VAR 0 12
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PPUSH
53458: CALL_OW 2
53462: ST_TO_ADDR
// end ;
53463: GO 53371
53465: POP
53466: POP
53467: GO 53351
53469: POP
53470: POP
// if not list then
53471: LD_VAR 0 13
53475: NOT
53476: IFFALSE 53480
// exit ;
53478: GO 53551
// for i in list do
53480: LD_ADDR_VAR 0 6
53484: PUSH
53485: LD_VAR 0 13
53489: PUSH
53490: FOR_IN
53491: IFFALSE 53549
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53493: LD_VAR 0 1
53497: PPUSH
53498: LD_STRING M
53500: PUSH
53501: LD_VAR 0 6
53505: PUSH
53506: LD_INT 1
53508: ARRAY
53509: PUSH
53510: LD_VAR 0 6
53514: PUSH
53515: LD_INT 2
53517: ARRAY
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: PPUSH
53543: CALL_OW 447
53547: GO 53490
53549: POP
53550: POP
// end ;
53551: LD_VAR 0 5
53555: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53556: LD_INT 0
53558: PPUSH
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53568: LD_VAR 0 1
53572: PPUSH
53573: CALL_OW 302
53577: NOT
53578: PUSH
53579: LD_VAR 0 2
53583: PPUSH
53584: LD_VAR 0 3
53588: PPUSH
53589: CALL_OW 488
53593: NOT
53594: OR
53595: PUSH
53596: LD_VAR 0 4
53600: NOT
53601: OR
53602: IFFALSE 53606
// exit ;
53604: GO 54119
// list := [ ] ;
53606: LD_ADDR_VAR 0 13
53610: PUSH
53611: EMPTY
53612: ST_TO_ADDR
// if x - r < 0 then
53613: LD_VAR 0 2
53617: PUSH
53618: LD_VAR 0 4
53622: MINUS
53623: PUSH
53624: LD_INT 0
53626: LESS
53627: IFFALSE 53639
// min_x := 0 else
53629: LD_ADDR_VAR 0 7
53633: PUSH
53634: LD_INT 0
53636: ST_TO_ADDR
53637: GO 53655
// min_x := x - r ;
53639: LD_ADDR_VAR 0 7
53643: PUSH
53644: LD_VAR 0 2
53648: PUSH
53649: LD_VAR 0 4
53653: MINUS
53654: ST_TO_ADDR
// if y - r < 0 then
53655: LD_VAR 0 3
53659: PUSH
53660: LD_VAR 0 4
53664: MINUS
53665: PUSH
53666: LD_INT 0
53668: LESS
53669: IFFALSE 53681
// min_y := 0 else
53671: LD_ADDR_VAR 0 8
53675: PUSH
53676: LD_INT 0
53678: ST_TO_ADDR
53679: GO 53697
// min_y := y - r ;
53681: LD_ADDR_VAR 0 8
53685: PUSH
53686: LD_VAR 0 3
53690: PUSH
53691: LD_VAR 0 4
53695: MINUS
53696: ST_TO_ADDR
// max_x := x + r ;
53697: LD_ADDR_VAR 0 9
53701: PUSH
53702: LD_VAR 0 2
53706: PUSH
53707: LD_VAR 0 4
53711: PLUS
53712: ST_TO_ADDR
// max_y := y + r ;
53713: LD_ADDR_VAR 0 10
53717: PUSH
53718: LD_VAR 0 3
53722: PUSH
53723: LD_VAR 0 4
53727: PLUS
53728: ST_TO_ADDR
// for _x = min_x to max_x do
53729: LD_ADDR_VAR 0 11
53733: PUSH
53734: DOUBLE
53735: LD_VAR 0 7
53739: DEC
53740: ST_TO_ADDR
53741: LD_VAR 0 9
53745: PUSH
53746: FOR_TO
53747: IFFALSE 53864
// for _y = min_y to max_y do
53749: LD_ADDR_VAR 0 12
53753: PUSH
53754: DOUBLE
53755: LD_VAR 0 8
53759: DEC
53760: ST_TO_ADDR
53761: LD_VAR 0 10
53765: PUSH
53766: FOR_TO
53767: IFFALSE 53860
// begin if not ValidHex ( _x , _y ) then
53769: LD_VAR 0 11
53773: PPUSH
53774: LD_VAR 0 12
53778: PPUSH
53779: CALL_OW 488
53783: NOT
53784: IFFALSE 53788
// continue ;
53786: GO 53766
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53788: LD_VAR 0 11
53792: PPUSH
53793: LD_VAR 0 12
53797: PPUSH
53798: CALL_OW 351
53802: PUSH
53803: LD_VAR 0 11
53807: PPUSH
53808: LD_VAR 0 12
53812: PPUSH
53813: CALL_OW 554
53817: AND
53818: IFFALSE 53858
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53820: LD_ADDR_VAR 0 13
53824: PUSH
53825: LD_VAR 0 13
53829: PPUSH
53830: LD_VAR 0 13
53834: PUSH
53835: LD_INT 1
53837: PLUS
53838: PPUSH
53839: LD_VAR 0 11
53843: PUSH
53844: LD_VAR 0 12
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PPUSH
53853: CALL_OW 2
53857: ST_TO_ADDR
// end ;
53858: GO 53766
53860: POP
53861: POP
53862: GO 53746
53864: POP
53865: POP
// if not list then
53866: LD_VAR 0 13
53870: NOT
53871: IFFALSE 53875
// exit ;
53873: GO 54119
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
53875: LD_ADDR_VAR 0 13
53879: PUSH
53880: LD_VAR 0 1
53884: PPUSH
53885: LD_VAR 0 13
53889: PPUSH
53890: LD_INT 1
53892: PPUSH
53893: LD_INT 1
53895: PPUSH
53896: CALL 14569 0 4
53900: ST_TO_ADDR
// ComStop ( flame ) ;
53901: LD_VAR 0 1
53905: PPUSH
53906: CALL_OW 141
// for i in list do
53910: LD_ADDR_VAR 0 6
53914: PUSH
53915: LD_VAR 0 13
53919: PUSH
53920: FOR_IN
53921: IFFALSE 53952
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
53923: LD_VAR 0 1
53927: PPUSH
53928: LD_VAR 0 6
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PPUSH
53937: LD_VAR 0 6
53941: PUSH
53942: LD_INT 2
53944: ARRAY
53945: PPUSH
53946: CALL_OW 176
53950: GO 53920
53952: POP
53953: POP
// repeat wait ( 0 0$1 ) ;
53954: LD_INT 35
53956: PPUSH
53957: CALL_OW 67
// task := GetTaskList ( flame ) ;
53961: LD_ADDR_VAR 0 14
53965: PUSH
53966: LD_VAR 0 1
53970: PPUSH
53971: CALL_OW 437
53975: ST_TO_ADDR
// if not task then
53976: LD_VAR 0 14
53980: NOT
53981: IFFALSE 53985
// exit ;
53983: GO 54119
// if task [ 1 ] [ 1 ] <> | then
53985: LD_VAR 0 14
53989: PUSH
53990: LD_INT 1
53992: ARRAY
53993: PUSH
53994: LD_INT 1
53996: ARRAY
53997: PUSH
53998: LD_STRING |
54000: NONEQUAL
54001: IFFALSE 54005
// exit ;
54003: GO 54119
// _x := task [ 1 ] [ 2 ] ;
54005: LD_ADDR_VAR 0 11
54009: PUSH
54010: LD_VAR 0 14
54014: PUSH
54015: LD_INT 1
54017: ARRAY
54018: PUSH
54019: LD_INT 2
54021: ARRAY
54022: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54023: LD_ADDR_VAR 0 12
54027: PUSH
54028: LD_VAR 0 14
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: PUSH
54037: LD_INT 3
54039: ARRAY
54040: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54041: LD_VAR 0 11
54045: PPUSH
54046: LD_VAR 0 12
54050: PPUSH
54051: CALL_OW 351
54055: NOT
54056: PUSH
54057: LD_VAR 0 11
54061: PPUSH
54062: LD_VAR 0 12
54066: PPUSH
54067: CALL_OW 554
54071: NOT
54072: OR
54073: IFFALSE 54107
// begin task := Delete ( task , 1 ) ;
54075: LD_ADDR_VAR 0 14
54079: PUSH
54080: LD_VAR 0 14
54084: PPUSH
54085: LD_INT 1
54087: PPUSH
54088: CALL_OW 3
54092: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54093: LD_VAR 0 1
54097: PPUSH
54098: LD_VAR 0 14
54102: PPUSH
54103: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54107: LD_VAR 0 1
54111: PPUSH
54112: CALL_OW 314
54116: NOT
54117: IFFALSE 53954
// end ;
54119: LD_VAR 0 5
54123: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54124: LD_EXP 43
54128: NOT
54129: IFFALSE 54179
54131: GO 54133
54133: DISABLE
// begin initHack := true ;
54134: LD_ADDR_EXP 43
54138: PUSH
54139: LD_INT 1
54141: ST_TO_ADDR
// hackTanks := [ ] ;
54142: LD_ADDR_EXP 44
54146: PUSH
54147: EMPTY
54148: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54149: LD_ADDR_EXP 45
54153: PUSH
54154: EMPTY
54155: ST_TO_ADDR
// hackLimit := 3 ;
54156: LD_ADDR_EXP 46
54160: PUSH
54161: LD_INT 3
54163: ST_TO_ADDR
// hackDist := 12 ;
54164: LD_ADDR_EXP 47
54168: PUSH
54169: LD_INT 12
54171: ST_TO_ADDR
// hackCounter := [ ] ;
54172: LD_ADDR_EXP 48
54176: PUSH
54177: EMPTY
54178: ST_TO_ADDR
// end ;
54179: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54180: LD_EXP 43
54184: PUSH
54185: LD_INT 34
54187: PUSH
54188: LD_INT 99
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PPUSH
54195: CALL_OW 69
54199: AND
54200: IFFALSE 54453
54202: GO 54204
54204: DISABLE
54205: LD_INT 0
54207: PPUSH
54208: PPUSH
// begin enable ;
54209: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54210: LD_ADDR_VAR 0 1
54214: PUSH
54215: LD_INT 34
54217: PUSH
54218: LD_INT 99
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PPUSH
54225: CALL_OW 69
54229: PUSH
54230: FOR_IN
54231: IFFALSE 54451
// begin if not i in hackTanks then
54233: LD_VAR 0 1
54237: PUSH
54238: LD_EXP 44
54242: IN
54243: NOT
54244: IFFALSE 54327
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54246: LD_ADDR_EXP 44
54250: PUSH
54251: LD_EXP 44
54255: PPUSH
54256: LD_EXP 44
54260: PUSH
54261: LD_INT 1
54263: PLUS
54264: PPUSH
54265: LD_VAR 0 1
54269: PPUSH
54270: CALL_OW 1
54274: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54275: LD_ADDR_EXP 45
54279: PUSH
54280: LD_EXP 45
54284: PPUSH
54285: LD_EXP 45
54289: PUSH
54290: LD_INT 1
54292: PLUS
54293: PPUSH
54294: EMPTY
54295: PPUSH
54296: CALL_OW 1
54300: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54301: LD_ADDR_EXP 48
54305: PUSH
54306: LD_EXP 48
54310: PPUSH
54311: LD_EXP 48
54315: PUSH
54316: LD_INT 1
54318: PLUS
54319: PPUSH
54320: EMPTY
54321: PPUSH
54322: CALL_OW 1
54326: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54327: LD_VAR 0 1
54331: PPUSH
54332: CALL_OW 302
54336: NOT
54337: IFFALSE 54350
// begin HackUnlinkAll ( i ) ;
54339: LD_VAR 0 1
54343: PPUSH
54344: CALL 54456 0 1
// continue ;
54348: GO 54230
// end ; HackCheckCapturedStatus ( i ) ;
54350: LD_VAR 0 1
54354: PPUSH
54355: CALL 54899 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54359: LD_ADDR_VAR 0 2
54363: PUSH
54364: LD_INT 81
54366: PUSH
54367: LD_VAR 0 1
54371: PPUSH
54372: CALL_OW 255
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 33
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 91
54393: PUSH
54394: LD_VAR 0 1
54398: PUSH
54399: LD_EXP 47
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 50
54411: PUSH
54412: EMPTY
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: PPUSH
54421: CALL_OW 69
54425: ST_TO_ADDR
// if not tmp then
54426: LD_VAR 0 2
54430: NOT
54431: IFFALSE 54435
// continue ;
54433: GO 54230
// HackLink ( i , tmp ) ;
54435: LD_VAR 0 1
54439: PPUSH
54440: LD_VAR 0 2
54444: PPUSH
54445: CALL 54592 0 2
// end ;
54449: GO 54230
54451: POP
54452: POP
// end ;
54453: PPOPN 2
54455: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54456: LD_INT 0
54458: PPUSH
54459: PPUSH
54460: PPUSH
// if not hack in hackTanks then
54461: LD_VAR 0 1
54465: PUSH
54466: LD_EXP 44
54470: IN
54471: NOT
54472: IFFALSE 54476
// exit ;
54474: GO 54587
// index := GetElementIndex ( hackTanks , hack ) ;
54476: LD_ADDR_VAR 0 4
54480: PUSH
54481: LD_EXP 44
54485: PPUSH
54486: LD_VAR 0 1
54490: PPUSH
54491: CALL 13866 0 2
54495: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54496: LD_EXP 45
54500: PUSH
54501: LD_VAR 0 4
54505: ARRAY
54506: IFFALSE 54587
// begin for i in hackTanksCaptured [ index ] do
54508: LD_ADDR_VAR 0 3
54512: PUSH
54513: LD_EXP 45
54517: PUSH
54518: LD_VAR 0 4
54522: ARRAY
54523: PUSH
54524: FOR_IN
54525: IFFALSE 54551
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54527: LD_VAR 0 3
54531: PUSH
54532: LD_INT 1
54534: ARRAY
54535: PPUSH
54536: LD_VAR 0 3
54540: PUSH
54541: LD_INT 2
54543: ARRAY
54544: PPUSH
54545: CALL_OW 235
54549: GO 54524
54551: POP
54552: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54553: LD_ADDR_EXP 45
54557: PUSH
54558: LD_EXP 45
54562: PPUSH
54563: LD_VAR 0 4
54567: PPUSH
54568: EMPTY
54569: PPUSH
54570: CALL_OW 1
54574: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54575: LD_VAR 0 1
54579: PPUSH
54580: LD_INT 0
54582: PPUSH
54583: CALL_OW 505
// end ; end ;
54587: LD_VAR 0 2
54591: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54592: LD_INT 0
54594: PPUSH
54595: PPUSH
54596: PPUSH
// if not hack in hackTanks or not vehicles then
54597: LD_VAR 0 1
54601: PUSH
54602: LD_EXP 44
54606: IN
54607: NOT
54608: PUSH
54609: LD_VAR 0 2
54613: NOT
54614: OR
54615: IFFALSE 54619
// exit ;
54617: GO 54894
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54619: LD_ADDR_VAR 0 2
54623: PUSH
54624: LD_VAR 0 1
54628: PPUSH
54629: LD_VAR 0 2
54633: PPUSH
54634: LD_INT 1
54636: PPUSH
54637: LD_INT 1
54639: PPUSH
54640: CALL 14516 0 4
54644: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54645: LD_ADDR_VAR 0 5
54649: PUSH
54650: LD_EXP 44
54654: PPUSH
54655: LD_VAR 0 1
54659: PPUSH
54660: CALL 13866 0 2
54664: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54665: LD_EXP 45
54669: PUSH
54670: LD_VAR 0 5
54674: ARRAY
54675: PUSH
54676: LD_EXP 46
54680: LESS
54681: IFFALSE 54870
// begin for i := 1 to vehicles do
54683: LD_ADDR_VAR 0 4
54687: PUSH
54688: DOUBLE
54689: LD_INT 1
54691: DEC
54692: ST_TO_ADDR
54693: LD_VAR 0 2
54697: PUSH
54698: FOR_TO
54699: IFFALSE 54868
// begin if hackTanksCaptured [ index ] = hackLimit then
54701: LD_EXP 45
54705: PUSH
54706: LD_VAR 0 5
54710: ARRAY
54711: PUSH
54712: LD_EXP 46
54716: EQUAL
54717: IFFALSE 54721
// break ;
54719: GO 54868
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54721: LD_ADDR_EXP 48
54725: PUSH
54726: LD_EXP 48
54730: PPUSH
54731: LD_VAR 0 5
54735: PPUSH
54736: LD_EXP 48
54740: PUSH
54741: LD_VAR 0 5
54745: ARRAY
54746: PUSH
54747: LD_INT 1
54749: PLUS
54750: PPUSH
54751: CALL_OW 1
54755: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54756: LD_ADDR_EXP 45
54760: PUSH
54761: LD_EXP 45
54765: PPUSH
54766: LD_VAR 0 5
54770: PUSH
54771: LD_EXP 45
54775: PUSH
54776: LD_VAR 0 5
54780: ARRAY
54781: PUSH
54782: LD_INT 1
54784: PLUS
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PPUSH
54790: LD_VAR 0 2
54794: PUSH
54795: LD_VAR 0 4
54799: ARRAY
54800: PUSH
54801: LD_VAR 0 2
54805: PUSH
54806: LD_VAR 0 4
54810: ARRAY
54811: PPUSH
54812: CALL_OW 255
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PPUSH
54821: CALL 14081 0 3
54825: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54826: LD_VAR 0 2
54830: PUSH
54831: LD_VAR 0 4
54835: ARRAY
54836: PPUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: CALL_OW 255
54846: PPUSH
54847: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54851: LD_VAR 0 2
54855: PUSH
54856: LD_VAR 0 4
54860: ARRAY
54861: PPUSH
54862: CALL_OW 141
// end ;
54866: GO 54698
54868: POP
54869: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54870: LD_VAR 0 1
54874: PPUSH
54875: LD_EXP 45
54879: PUSH
54880: LD_VAR 0 5
54884: ARRAY
54885: PUSH
54886: LD_INT 0
54888: PLUS
54889: PPUSH
54890: CALL_OW 505
// end ;
54894: LD_VAR 0 3
54898: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54899: LD_INT 0
54901: PPUSH
54902: PPUSH
54903: PPUSH
54904: PPUSH
// if not hack in hackTanks then
54905: LD_VAR 0 1
54909: PUSH
54910: LD_EXP 44
54914: IN
54915: NOT
54916: IFFALSE 54920
// exit ;
54918: GO 55160
// index := GetElementIndex ( hackTanks , hack ) ;
54920: LD_ADDR_VAR 0 4
54924: PUSH
54925: LD_EXP 44
54929: PPUSH
54930: LD_VAR 0 1
54934: PPUSH
54935: CALL 13866 0 2
54939: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54940: LD_ADDR_VAR 0 3
54944: PUSH
54945: DOUBLE
54946: LD_EXP 45
54950: PUSH
54951: LD_VAR 0 4
54955: ARRAY
54956: INC
54957: ST_TO_ADDR
54958: LD_INT 1
54960: PUSH
54961: FOR_DOWNTO
54962: IFFALSE 55134
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54964: LD_ADDR_VAR 0 5
54968: PUSH
54969: LD_EXP 45
54973: PUSH
54974: LD_VAR 0 4
54978: ARRAY
54979: PUSH
54980: LD_VAR 0 3
54984: ARRAY
54985: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
54986: LD_VAR 0 5
54990: PUSH
54991: LD_INT 1
54993: ARRAY
54994: PPUSH
54995: CALL_OW 302
54999: NOT
55000: PUSH
55001: LD_VAR 0 5
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PPUSH
55010: CALL_OW 255
55014: PUSH
55015: LD_VAR 0 1
55019: PPUSH
55020: CALL_OW 255
55024: NONEQUAL
55025: OR
55026: IFFALSE 55132
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55028: LD_VAR 0 5
55032: PUSH
55033: LD_INT 1
55035: ARRAY
55036: PPUSH
55037: CALL_OW 305
55041: PUSH
55042: LD_VAR 0 5
55046: PUSH
55047: LD_INT 1
55049: ARRAY
55050: PPUSH
55051: CALL_OW 255
55055: PUSH
55056: LD_VAR 0 1
55060: PPUSH
55061: CALL_OW 255
55065: EQUAL
55066: AND
55067: IFFALSE 55091
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55069: LD_VAR 0 5
55073: PUSH
55074: LD_INT 1
55076: ARRAY
55077: PPUSH
55078: LD_VAR 0 5
55082: PUSH
55083: LD_INT 2
55085: ARRAY
55086: PPUSH
55087: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55091: LD_ADDR_EXP 45
55095: PUSH
55096: LD_EXP 45
55100: PPUSH
55101: LD_VAR 0 4
55105: PPUSH
55106: LD_EXP 45
55110: PUSH
55111: LD_VAR 0 4
55115: ARRAY
55116: PPUSH
55117: LD_VAR 0 3
55121: PPUSH
55122: CALL_OW 3
55126: PPUSH
55127: CALL_OW 1
55131: ST_TO_ADDR
// end ; end ;
55132: GO 54961
55134: POP
55135: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55136: LD_VAR 0 1
55140: PPUSH
55141: LD_EXP 45
55145: PUSH
55146: LD_VAR 0 4
55150: ARRAY
55151: PUSH
55152: LD_INT 0
55154: PLUS
55155: PPUSH
55156: CALL_OW 505
// end ;
55160: LD_VAR 0 2
55164: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55165: LD_INT 0
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
// if not hack in hackTanks then
55171: LD_VAR 0 1
55175: PUSH
55176: LD_EXP 44
55180: IN
55181: NOT
55182: IFFALSE 55186
// exit ;
55184: GO 55271
// index := GetElementIndex ( hackTanks , hack ) ;
55186: LD_ADDR_VAR 0 5
55190: PUSH
55191: LD_EXP 44
55195: PPUSH
55196: LD_VAR 0 1
55200: PPUSH
55201: CALL 13866 0 2
55205: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55206: LD_ADDR_VAR 0 4
55210: PUSH
55211: DOUBLE
55212: LD_INT 1
55214: DEC
55215: ST_TO_ADDR
55216: LD_EXP 45
55220: PUSH
55221: LD_VAR 0 5
55225: ARRAY
55226: PUSH
55227: FOR_TO
55228: IFFALSE 55269
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55230: LD_EXP 45
55234: PUSH
55235: LD_VAR 0 5
55239: ARRAY
55240: PUSH
55241: LD_VAR 0 4
55245: ARRAY
55246: PUSH
55247: LD_INT 1
55249: ARRAY
55250: PUSH
55251: LD_VAR 0 2
55255: EQUAL
55256: IFFALSE 55267
// KillUnit ( vehicle ) ;
55258: LD_VAR 0 2
55262: PPUSH
55263: CALL_OW 66
55267: GO 55227
55269: POP
55270: POP
// end ;
55271: LD_VAR 0 3
55275: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55276: LD_EXP 49
55280: NOT
55281: IFFALSE 55316
55283: GO 55285
55285: DISABLE
// begin initMiner := true ;
55286: LD_ADDR_EXP 49
55290: PUSH
55291: LD_INT 1
55293: ST_TO_ADDR
// minersList := [ ] ;
55294: LD_ADDR_EXP 50
55298: PUSH
55299: EMPTY
55300: ST_TO_ADDR
// minerMinesList := [ ] ;
55301: LD_ADDR_EXP 51
55305: PUSH
55306: EMPTY
55307: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55308: LD_ADDR_EXP 52
55312: PUSH
55313: LD_INT 5
55315: ST_TO_ADDR
// end ;
55316: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55317: LD_EXP 49
55321: PUSH
55322: LD_INT 34
55324: PUSH
55325: LD_INT 81
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PPUSH
55332: CALL_OW 69
55336: AND
55337: IFFALSE 55798
55339: GO 55341
55341: DISABLE
55342: LD_INT 0
55344: PPUSH
55345: PPUSH
55346: PPUSH
55347: PPUSH
// begin enable ;
55348: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55349: LD_ADDR_VAR 0 1
55353: PUSH
55354: LD_INT 34
55356: PUSH
55357: LD_INT 81
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PPUSH
55364: CALL_OW 69
55368: PUSH
55369: FOR_IN
55370: IFFALSE 55442
// begin if not i in minersList then
55372: LD_VAR 0 1
55376: PUSH
55377: LD_EXP 50
55381: IN
55382: NOT
55383: IFFALSE 55440
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55385: LD_ADDR_EXP 50
55389: PUSH
55390: LD_EXP 50
55394: PPUSH
55395: LD_EXP 50
55399: PUSH
55400: LD_INT 1
55402: PLUS
55403: PPUSH
55404: LD_VAR 0 1
55408: PPUSH
55409: CALL_OW 1
55413: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55414: LD_ADDR_EXP 51
55418: PUSH
55419: LD_EXP 51
55423: PPUSH
55424: LD_EXP 51
55428: PUSH
55429: LD_INT 1
55431: PLUS
55432: PPUSH
55433: EMPTY
55434: PPUSH
55435: CALL_OW 1
55439: ST_TO_ADDR
// end end ;
55440: GO 55369
55442: POP
55443: POP
// for i := minerMinesList downto 1 do
55444: LD_ADDR_VAR 0 1
55448: PUSH
55449: DOUBLE
55450: LD_EXP 51
55454: INC
55455: ST_TO_ADDR
55456: LD_INT 1
55458: PUSH
55459: FOR_DOWNTO
55460: IFFALSE 55796
// begin if IsLive ( minersList [ i ] ) then
55462: LD_EXP 50
55466: PUSH
55467: LD_VAR 0 1
55471: ARRAY
55472: PPUSH
55473: CALL_OW 300
55477: IFFALSE 55505
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55479: LD_EXP 50
55483: PUSH
55484: LD_VAR 0 1
55488: ARRAY
55489: PPUSH
55490: LD_EXP 51
55494: PUSH
55495: LD_VAR 0 1
55499: ARRAY
55500: PPUSH
55501: CALL_OW 505
// if not minerMinesList [ i ] then
55505: LD_EXP 51
55509: PUSH
55510: LD_VAR 0 1
55514: ARRAY
55515: NOT
55516: IFFALSE 55520
// continue ;
55518: GO 55459
// for j := minerMinesList [ i ] downto 1 do
55520: LD_ADDR_VAR 0 2
55524: PUSH
55525: DOUBLE
55526: LD_EXP 51
55530: PUSH
55531: LD_VAR 0 1
55535: ARRAY
55536: INC
55537: ST_TO_ADDR
55538: LD_INT 1
55540: PUSH
55541: FOR_DOWNTO
55542: IFFALSE 55792
// begin side := GetSide ( minersList [ i ] ) ;
55544: LD_ADDR_VAR 0 3
55548: PUSH
55549: LD_EXP 50
55553: PUSH
55554: LD_VAR 0 1
55558: ARRAY
55559: PPUSH
55560: CALL_OW 255
55564: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55565: LD_ADDR_VAR 0 4
55569: PUSH
55570: LD_EXP 51
55574: PUSH
55575: LD_VAR 0 1
55579: ARRAY
55580: PUSH
55581: LD_VAR 0 2
55585: ARRAY
55586: PUSH
55587: LD_INT 1
55589: ARRAY
55590: PPUSH
55591: LD_EXP 51
55595: PUSH
55596: LD_VAR 0 1
55600: ARRAY
55601: PUSH
55602: LD_VAR 0 2
55606: ARRAY
55607: PUSH
55608: LD_INT 2
55610: ARRAY
55611: PPUSH
55612: CALL_OW 428
55616: ST_TO_ADDR
// if not tmp then
55617: LD_VAR 0 4
55621: NOT
55622: IFFALSE 55626
// continue ;
55624: GO 55541
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55626: LD_VAR 0 4
55630: PUSH
55631: LD_INT 81
55633: PUSH
55634: LD_VAR 0 3
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PPUSH
55643: CALL_OW 69
55647: IN
55648: PUSH
55649: LD_EXP 51
55653: PUSH
55654: LD_VAR 0 1
55658: ARRAY
55659: PUSH
55660: LD_VAR 0 2
55664: ARRAY
55665: PUSH
55666: LD_INT 1
55668: ARRAY
55669: PPUSH
55670: LD_EXP 51
55674: PUSH
55675: LD_VAR 0 1
55679: ARRAY
55680: PUSH
55681: LD_VAR 0 2
55685: ARRAY
55686: PUSH
55687: LD_INT 2
55689: ARRAY
55690: PPUSH
55691: CALL_OW 458
55695: AND
55696: IFFALSE 55790
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55698: LD_EXP 51
55702: PUSH
55703: LD_VAR 0 1
55707: ARRAY
55708: PUSH
55709: LD_VAR 0 2
55713: ARRAY
55714: PUSH
55715: LD_INT 1
55717: ARRAY
55718: PPUSH
55719: LD_EXP 51
55723: PUSH
55724: LD_VAR 0 1
55728: ARRAY
55729: PUSH
55730: LD_VAR 0 2
55734: ARRAY
55735: PUSH
55736: LD_INT 2
55738: ARRAY
55739: PPUSH
55740: LD_VAR 0 3
55744: PPUSH
55745: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55749: LD_ADDR_EXP 51
55753: PUSH
55754: LD_EXP 51
55758: PPUSH
55759: LD_VAR 0 1
55763: PPUSH
55764: LD_EXP 51
55768: PUSH
55769: LD_VAR 0 1
55773: ARRAY
55774: PPUSH
55775: LD_VAR 0 2
55779: PPUSH
55780: CALL_OW 3
55784: PPUSH
55785: CALL_OW 1
55789: ST_TO_ADDR
// end ; end ;
55790: GO 55541
55792: POP
55793: POP
// end ;
55794: GO 55459
55796: POP
55797: POP
// end ;
55798: PPOPN 4
55800: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55801: LD_INT 0
55803: PPUSH
55804: PPUSH
// result := false ;
55805: LD_ADDR_VAR 0 4
55809: PUSH
55810: LD_INT 0
55812: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55813: LD_VAR 0 1
55817: PPUSH
55818: CALL_OW 264
55822: PUSH
55823: LD_INT 81
55825: EQUAL
55826: NOT
55827: IFFALSE 55831
// exit ;
55829: GO 56071
// index := GetElementIndex ( minersList , unit ) ;
55831: LD_ADDR_VAR 0 5
55835: PUSH
55836: LD_EXP 50
55840: PPUSH
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL 13866 0 2
55850: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55851: LD_EXP 51
55855: PUSH
55856: LD_VAR 0 5
55860: ARRAY
55861: PUSH
55862: LD_EXP 52
55866: GREATEREQUAL
55867: IFFALSE 55871
// exit ;
55869: GO 56071
// ComMoveXY ( unit , x , y ) ;
55871: LD_VAR 0 1
55875: PPUSH
55876: LD_VAR 0 2
55880: PPUSH
55881: LD_VAR 0 3
55885: PPUSH
55886: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55890: LD_INT 35
55892: PPUSH
55893: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55897: LD_VAR 0 1
55901: PPUSH
55902: LD_VAR 0 2
55906: PPUSH
55907: LD_VAR 0 3
55911: PPUSH
55912: CALL 45627 0 3
55916: NOT
55917: PUSH
55918: LD_VAR 0 1
55922: PPUSH
55923: CALL_OW 314
55927: AND
55928: IFFALSE 55932
// exit ;
55930: GO 56071
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55932: LD_VAR 0 2
55936: PPUSH
55937: LD_VAR 0 3
55941: PPUSH
55942: CALL_OW 428
55946: PUSH
55947: LD_VAR 0 1
55951: EQUAL
55952: PUSH
55953: LD_VAR 0 1
55957: PPUSH
55958: CALL_OW 314
55962: NOT
55963: AND
55964: IFFALSE 55890
// PlaySoundXY ( x , y , PlantMine ) ;
55966: LD_VAR 0 2
55970: PPUSH
55971: LD_VAR 0 3
55975: PPUSH
55976: LD_STRING PlantMine
55978: PPUSH
55979: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
55983: LD_VAR 0 2
55987: PPUSH
55988: LD_VAR 0 3
55992: PPUSH
55993: LD_VAR 0 1
55997: PPUSH
55998: CALL_OW 255
56002: PPUSH
56003: LD_INT 0
56005: PPUSH
56006: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56010: LD_ADDR_EXP 51
56014: PUSH
56015: LD_EXP 51
56019: PPUSH
56020: LD_VAR 0 5
56024: PUSH
56025: LD_EXP 51
56029: PUSH
56030: LD_VAR 0 5
56034: ARRAY
56035: PUSH
56036: LD_INT 1
56038: PLUS
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PPUSH
56044: LD_VAR 0 2
56048: PUSH
56049: LD_VAR 0 3
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PPUSH
56058: CALL 14081 0 3
56062: ST_TO_ADDR
// result := true ;
56063: LD_ADDR_VAR 0 4
56067: PUSH
56068: LD_INT 1
56070: ST_TO_ADDR
// end ;
56071: LD_VAR 0 4
56075: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56076: LD_INT 0
56078: PPUSH
56079: PPUSH
56080: PPUSH
// if not unit in minersList then
56081: LD_VAR 0 1
56085: PUSH
56086: LD_EXP 50
56090: IN
56091: NOT
56092: IFFALSE 56096
// exit ;
56094: GO 56488
// index := GetElementIndex ( minersList , unit ) ;
56096: LD_ADDR_VAR 0 6
56100: PUSH
56101: LD_EXP 50
56105: PPUSH
56106: LD_VAR 0 1
56110: PPUSH
56111: CALL 13866 0 2
56115: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56116: LD_ADDR_VAR 0 5
56120: PUSH
56121: DOUBLE
56122: LD_EXP 51
56126: PUSH
56127: LD_VAR 0 6
56131: ARRAY
56132: INC
56133: ST_TO_ADDR
56134: LD_INT 1
56136: PUSH
56137: FOR_DOWNTO
56138: IFFALSE 56299
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56140: LD_EXP 51
56144: PUSH
56145: LD_VAR 0 6
56149: ARRAY
56150: PUSH
56151: LD_VAR 0 5
56155: ARRAY
56156: PUSH
56157: LD_INT 1
56159: ARRAY
56160: PUSH
56161: LD_VAR 0 2
56165: EQUAL
56166: PUSH
56167: LD_EXP 51
56171: PUSH
56172: LD_VAR 0 6
56176: ARRAY
56177: PUSH
56178: LD_VAR 0 5
56182: ARRAY
56183: PUSH
56184: LD_INT 2
56186: ARRAY
56187: PUSH
56188: LD_VAR 0 3
56192: EQUAL
56193: AND
56194: IFFALSE 56297
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56196: LD_EXP 51
56200: PUSH
56201: LD_VAR 0 6
56205: ARRAY
56206: PUSH
56207: LD_VAR 0 5
56211: ARRAY
56212: PUSH
56213: LD_INT 1
56215: ARRAY
56216: PPUSH
56217: LD_EXP 51
56221: PUSH
56222: LD_VAR 0 6
56226: ARRAY
56227: PUSH
56228: LD_VAR 0 5
56232: ARRAY
56233: PUSH
56234: LD_INT 2
56236: ARRAY
56237: PPUSH
56238: LD_VAR 0 1
56242: PPUSH
56243: CALL_OW 255
56247: PPUSH
56248: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56252: LD_ADDR_EXP 51
56256: PUSH
56257: LD_EXP 51
56261: PPUSH
56262: LD_VAR 0 6
56266: PPUSH
56267: LD_EXP 51
56271: PUSH
56272: LD_VAR 0 6
56276: ARRAY
56277: PPUSH
56278: LD_VAR 0 5
56282: PPUSH
56283: CALL_OW 3
56287: PPUSH
56288: CALL_OW 1
56292: ST_TO_ADDR
// exit ;
56293: POP
56294: POP
56295: GO 56488
// end ; end ;
56297: GO 56137
56299: POP
56300: POP
// for i := minerMinesList [ index ] downto 1 do
56301: LD_ADDR_VAR 0 5
56305: PUSH
56306: DOUBLE
56307: LD_EXP 51
56311: PUSH
56312: LD_VAR 0 6
56316: ARRAY
56317: INC
56318: ST_TO_ADDR
56319: LD_INT 1
56321: PUSH
56322: FOR_DOWNTO
56323: IFFALSE 56486
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56325: LD_EXP 51
56329: PUSH
56330: LD_VAR 0 6
56334: ARRAY
56335: PUSH
56336: LD_VAR 0 5
56340: ARRAY
56341: PUSH
56342: LD_INT 1
56344: ARRAY
56345: PPUSH
56346: LD_EXP 51
56350: PUSH
56351: LD_VAR 0 6
56355: ARRAY
56356: PUSH
56357: LD_VAR 0 5
56361: ARRAY
56362: PUSH
56363: LD_INT 2
56365: ARRAY
56366: PPUSH
56367: LD_VAR 0 2
56371: PPUSH
56372: LD_VAR 0 3
56376: PPUSH
56377: CALL_OW 298
56381: PUSH
56382: LD_INT 6
56384: LESS
56385: IFFALSE 56484
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56387: LD_EXP 51
56391: PUSH
56392: LD_VAR 0 6
56396: ARRAY
56397: PUSH
56398: LD_VAR 0 5
56402: ARRAY
56403: PUSH
56404: LD_INT 1
56406: ARRAY
56407: PPUSH
56408: LD_EXP 51
56412: PUSH
56413: LD_VAR 0 6
56417: ARRAY
56418: PUSH
56419: LD_VAR 0 5
56423: ARRAY
56424: PUSH
56425: LD_INT 2
56427: ARRAY
56428: PPUSH
56429: LD_VAR 0 1
56433: PPUSH
56434: CALL_OW 255
56438: PPUSH
56439: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56443: LD_ADDR_EXP 51
56447: PUSH
56448: LD_EXP 51
56452: PPUSH
56453: LD_VAR 0 6
56457: PPUSH
56458: LD_EXP 51
56462: PUSH
56463: LD_VAR 0 6
56467: ARRAY
56468: PPUSH
56469: LD_VAR 0 5
56473: PPUSH
56474: CALL_OW 3
56478: PPUSH
56479: CALL_OW 1
56483: ST_TO_ADDR
// end ; end ;
56484: GO 56322
56486: POP
56487: POP
// end ;
56488: LD_VAR 0 4
56492: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56493: LD_INT 0
56495: PPUSH
56496: PPUSH
56497: PPUSH
56498: PPUSH
56499: PPUSH
56500: PPUSH
56501: PPUSH
56502: PPUSH
56503: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56504: LD_VAR 0 1
56508: PPUSH
56509: CALL_OW 264
56513: PUSH
56514: LD_INT 81
56516: EQUAL
56517: NOT
56518: PUSH
56519: LD_VAR 0 1
56523: PUSH
56524: LD_EXP 50
56528: IN
56529: NOT
56530: OR
56531: IFFALSE 56535
// exit ;
56533: GO 56857
// index := GetElementIndex ( minersList , unit ) ;
56535: LD_ADDR_VAR 0 6
56539: PUSH
56540: LD_EXP 50
56544: PPUSH
56545: LD_VAR 0 1
56549: PPUSH
56550: CALL 13866 0 2
56554: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56555: LD_ADDR_VAR 0 8
56559: PUSH
56560: LD_EXP 52
56564: PUSH
56565: LD_EXP 51
56569: PUSH
56570: LD_VAR 0 6
56574: ARRAY
56575: MINUS
56576: ST_TO_ADDR
// if not minesFreeAmount then
56577: LD_VAR 0 8
56581: NOT
56582: IFFALSE 56586
// exit ;
56584: GO 56857
// tmp := [ ] ;
56586: LD_ADDR_VAR 0 7
56590: PUSH
56591: EMPTY
56592: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56593: LD_ADDR_VAR 0 5
56597: PUSH
56598: DOUBLE
56599: LD_INT 1
56601: DEC
56602: ST_TO_ADDR
56603: LD_VAR 0 8
56607: PUSH
56608: FOR_TO
56609: IFFALSE 56804
// begin _d := rand ( 0 , 5 ) ;
56611: LD_ADDR_VAR 0 11
56615: PUSH
56616: LD_INT 0
56618: PPUSH
56619: LD_INT 5
56621: PPUSH
56622: CALL_OW 12
56626: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56627: LD_ADDR_VAR 0 12
56631: PUSH
56632: LD_INT 2
56634: PPUSH
56635: LD_INT 6
56637: PPUSH
56638: CALL_OW 12
56642: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56643: LD_ADDR_VAR 0 9
56647: PUSH
56648: LD_VAR 0 2
56652: PPUSH
56653: LD_VAR 0 11
56657: PPUSH
56658: LD_VAR 0 12
56662: PPUSH
56663: CALL_OW 272
56667: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56668: LD_ADDR_VAR 0 10
56672: PUSH
56673: LD_VAR 0 3
56677: PPUSH
56678: LD_VAR 0 11
56682: PPUSH
56683: LD_VAR 0 12
56687: PPUSH
56688: CALL_OW 273
56692: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56693: LD_VAR 0 9
56697: PPUSH
56698: LD_VAR 0 10
56702: PPUSH
56703: CALL_OW 488
56707: PUSH
56708: LD_VAR 0 9
56712: PUSH
56713: LD_VAR 0 10
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_VAR 0 7
56726: IN
56727: NOT
56728: AND
56729: PUSH
56730: LD_VAR 0 9
56734: PPUSH
56735: LD_VAR 0 10
56739: PPUSH
56740: CALL_OW 458
56744: NOT
56745: AND
56746: IFFALSE 56788
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56748: LD_ADDR_VAR 0 7
56752: PUSH
56753: LD_VAR 0 7
56757: PPUSH
56758: LD_VAR 0 7
56762: PUSH
56763: LD_INT 1
56765: PLUS
56766: PPUSH
56767: LD_VAR 0 9
56771: PUSH
56772: LD_VAR 0 10
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PPUSH
56781: CALL_OW 1
56785: ST_TO_ADDR
56786: GO 56802
// i := i - 1 ;
56788: LD_ADDR_VAR 0 5
56792: PUSH
56793: LD_VAR 0 5
56797: PUSH
56798: LD_INT 1
56800: MINUS
56801: ST_TO_ADDR
// end ;
56802: GO 56608
56804: POP
56805: POP
// for i in tmp do
56806: LD_ADDR_VAR 0 5
56810: PUSH
56811: LD_VAR 0 7
56815: PUSH
56816: FOR_IN
56817: IFFALSE 56855
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56819: LD_VAR 0 1
56823: PPUSH
56824: LD_VAR 0 5
56828: PUSH
56829: LD_INT 1
56831: ARRAY
56832: PPUSH
56833: LD_VAR 0 5
56837: PUSH
56838: LD_INT 2
56840: ARRAY
56841: PPUSH
56842: CALL 55801 0 3
56846: NOT
56847: IFFALSE 56853
// exit ;
56849: POP
56850: POP
56851: GO 56857
56853: GO 56816
56855: POP
56856: POP
// end ;
56857: LD_VAR 0 4
56861: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
56862: LD_INT 0
56864: PPUSH
56865: PPUSH
56866: PPUSH
56867: PPUSH
56868: PPUSH
56869: PPUSH
56870: PPUSH
56871: PPUSH
56872: PPUSH
// if GetClass ( unit ) <> class_sniper then
56873: LD_VAR 0 1
56877: PPUSH
56878: CALL_OW 257
56882: PUSH
56883: LD_INT 5
56885: NONEQUAL
56886: IFFALSE 56890
// exit ;
56888: GO 57356
// dist := 8 ;
56890: LD_ADDR_VAR 0 5
56894: PUSH
56895: LD_INT 8
56897: ST_TO_ADDR
// viewRange := 12 ;
56898: LD_ADDR_VAR 0 8
56902: PUSH
56903: LD_INT 12
56905: ST_TO_ADDR
// side := GetSide ( unit ) ;
56906: LD_ADDR_VAR 0 6
56910: PUSH
56911: LD_VAR 0 1
56915: PPUSH
56916: CALL_OW 255
56920: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56921: LD_INT 61
56923: PPUSH
56924: LD_VAR 0 6
56928: PPUSH
56929: CALL_OW 321
56933: PUSH
56934: LD_INT 2
56936: EQUAL
56937: IFFALSE 56947
// viewRange := 16 ;
56939: LD_ADDR_VAR 0 8
56943: PUSH
56944: LD_INT 16
56946: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56947: LD_VAR 0 1
56951: PPUSH
56952: LD_VAR 0 2
56956: PPUSH
56957: LD_VAR 0 3
56961: PPUSH
56962: CALL_OW 297
56966: PUSH
56967: LD_VAR 0 5
56971: GREATER
56972: IFFALSE 57051
// begin ComMoveXY ( unit , x , y ) ;
56974: LD_VAR 0 1
56978: PPUSH
56979: LD_VAR 0 2
56983: PPUSH
56984: LD_VAR 0 3
56988: PPUSH
56989: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56993: LD_INT 35
56995: PPUSH
56996: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57000: LD_VAR 0 1
57004: PPUSH
57005: LD_VAR 0 2
57009: PPUSH
57010: LD_VAR 0 3
57014: PPUSH
57015: CALL 45627 0 3
57019: NOT
57020: IFFALSE 57024
// exit ;
57022: GO 57356
// until GetDistUnitXY ( unit , x , y ) < dist ;
57024: LD_VAR 0 1
57028: PPUSH
57029: LD_VAR 0 2
57033: PPUSH
57034: LD_VAR 0 3
57038: PPUSH
57039: CALL_OW 297
57043: PUSH
57044: LD_VAR 0 5
57048: LESS
57049: IFFALSE 56993
// end ; ComTurnXY ( unit , x , y ) ;
57051: LD_VAR 0 1
57055: PPUSH
57056: LD_VAR 0 2
57060: PPUSH
57061: LD_VAR 0 3
57065: PPUSH
57066: CALL_OW 118
// repeat if Multiplayer then
57070: LD_OWVAR 4
57074: IFFALSE 57085
// wait ( 35 ) else
57076: LD_INT 35
57078: PPUSH
57079: CALL_OW 67
57083: GO 57092
// wait ( 5 ) ;
57085: LD_INT 5
57087: PPUSH
57088: CALL_OW 67
// _d := GetDir ( unit ) ;
57092: LD_ADDR_VAR 0 11
57096: PUSH
57097: LD_VAR 0 1
57101: PPUSH
57102: CALL_OW 254
57106: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57107: LD_ADDR_VAR 0 7
57111: PUSH
57112: LD_VAR 0 1
57116: PPUSH
57117: CALL_OW 250
57121: PPUSH
57122: LD_VAR 0 1
57126: PPUSH
57127: CALL_OW 251
57131: PPUSH
57132: LD_VAR 0 2
57136: PPUSH
57137: LD_VAR 0 3
57141: PPUSH
57142: CALL 48235 0 4
57146: ST_TO_ADDR
// until dir = _d ;
57147: LD_VAR 0 7
57151: PUSH
57152: LD_VAR 0 11
57156: EQUAL
57157: IFFALSE 57070
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57159: LD_ADDR_VAR 0 9
57163: PUSH
57164: LD_VAR 0 1
57168: PPUSH
57169: CALL_OW 250
57173: PPUSH
57174: LD_VAR 0 7
57178: PPUSH
57179: LD_VAR 0 5
57183: PPUSH
57184: CALL_OW 272
57188: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57189: LD_ADDR_VAR 0 10
57193: PUSH
57194: LD_VAR 0 1
57198: PPUSH
57199: CALL_OW 251
57203: PPUSH
57204: LD_VAR 0 7
57208: PPUSH
57209: LD_VAR 0 5
57213: PPUSH
57214: CALL_OW 273
57218: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57219: LD_VAR 0 9
57223: PPUSH
57224: LD_VAR 0 10
57228: PPUSH
57229: CALL_OW 488
57233: NOT
57234: IFFALSE 57238
// exit ;
57236: GO 57356
// ComAnimCustom ( unit , 1 ) ;
57238: LD_VAR 0 1
57242: PPUSH
57243: LD_INT 1
57245: PPUSH
57246: CALL_OW 592
// p := 0 ;
57250: LD_ADDR_VAR 0 12
57254: PUSH
57255: LD_INT 0
57257: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57258: LD_VAR 0 9
57262: PPUSH
57263: LD_VAR 0 10
57267: PPUSH
57268: LD_VAR 0 6
57272: PPUSH
57273: LD_VAR 0 8
57277: PPUSH
57278: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57282: LD_INT 35
57284: PPUSH
57285: CALL_OW 67
// p := Inc ( p ) ;
57289: LD_ADDR_VAR 0 12
57293: PUSH
57294: LD_VAR 0 12
57298: PPUSH
57299: CALL 48191 0 1
57303: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57304: LD_VAR 0 12
57308: PUSH
57309: LD_INT 3
57311: EQUAL
57312: PUSH
57313: LD_VAR 0 1
57317: PPUSH
57318: CALL_OW 302
57322: NOT
57323: OR
57324: PUSH
57325: LD_VAR 0 1
57329: PPUSH
57330: CALL_OW 301
57334: OR
57335: IFFALSE 57282
// RemoveSeeing ( _x , _y , side ) ;
57337: LD_VAR 0 9
57341: PPUSH
57342: LD_VAR 0 10
57346: PPUSH
57347: LD_VAR 0 6
57351: PPUSH
57352: CALL_OW 331
// end ; end_of_file
57356: LD_VAR 0 4
57360: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57361: LD_EXP 38
57365: IFFALSE 57706
57367: GO 57369
57369: DISABLE
57370: LD_INT 0
57372: PPUSH
57373: PPUSH
57374: PPUSH
// begin mpKingPoints := [ ] ;
57375: LD_ADDR_EXP 53
57379: PUSH
57380: EMPTY
57381: ST_TO_ADDR
// if mpTeamGame then
57382: LD_EXP 11
57386: IFFALSE 57440
// begin for i := 1 to Count ( mpTeams ) do
57388: LD_ADDR_VAR 0 1
57392: PUSH
57393: DOUBLE
57394: LD_INT 1
57396: DEC
57397: ST_TO_ADDR
57398: LD_EXP 10
57402: PPUSH
57403: CALL 11221 0 1
57407: PUSH
57408: FOR_TO
57409: IFFALSE 57436
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57411: LD_ADDR_EXP 53
57415: PUSH
57416: LD_EXP 53
57420: PPUSH
57421: LD_VAR 0 1
57425: PPUSH
57426: LD_INT 0
57428: PPUSH
57429: CALL_OW 1
57433: ST_TO_ADDR
57434: GO 57408
57436: POP
57437: POP
// end else
57438: GO 57483
// begin for i := 1 to 8 do
57440: LD_ADDR_VAR 0 1
57444: PUSH
57445: DOUBLE
57446: LD_INT 1
57448: DEC
57449: ST_TO_ADDR
57450: LD_INT 8
57452: PUSH
57453: FOR_TO
57454: IFFALSE 57481
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57456: LD_ADDR_EXP 53
57460: PUSH
57461: LD_EXP 53
57465: PPUSH
57466: LD_VAR 0 1
57470: PPUSH
57471: LD_INT 0
57473: PPUSH
57474: CALL_OW 1
57478: ST_TO_ADDR
57479: GO 57453
57481: POP
57482: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57483: LD_ADDR_VAR 0 3
57487: PUSH
57488: LD_EXP 2
57492: PPUSH
57493: LD_INT 0
57495: PPUSH
57496: CALL_OW 517
57500: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57501: LD_ADDR_VAR 0 1
57505: PUSH
57506: DOUBLE
57507: LD_INT 1
57509: DEC
57510: ST_TO_ADDR
57511: LD_VAR 0 3
57515: PUSH
57516: LD_INT 1
57518: ARRAY
57519: PUSH
57520: FOR_TO
57521: IFFALSE 57588
// for j := 1 to 8 do
57523: LD_ADDR_VAR 0 2
57527: PUSH
57528: DOUBLE
57529: LD_INT 1
57531: DEC
57532: ST_TO_ADDR
57533: LD_INT 8
57535: PUSH
57536: FOR_TO
57537: IFFALSE 57584
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57539: LD_VAR 0 3
57543: PUSH
57544: LD_INT 1
57546: ARRAY
57547: PUSH
57548: LD_VAR 0 1
57552: ARRAY
57553: PPUSH
57554: LD_VAR 0 3
57558: PUSH
57559: LD_INT 2
57561: ARRAY
57562: PUSH
57563: LD_VAR 0 1
57567: ARRAY
57568: PPUSH
57569: LD_VAR 0 2
57573: PPUSH
57574: LD_INT 12
57576: NEG
57577: PPUSH
57578: CALL_OW 330
57582: GO 57536
57584: POP
57585: POP
57586: GO 57520
57588: POP
57589: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57590: LD_EXP 33
57594: PPUSH
57595: LD_INT 1
57597: PPUSH
57598: CALL_OW 424
// UpdateCounter ;
57602: CALL 58210 0 0
// repeat wait ( 0 0$1 ) ;
57606: LD_INT 35
57608: PPUSH
57609: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57613: LD_ADDR_VAR 0 3
57617: PUSH
57618: LD_EXP 33
57622: PPUSH
57623: LD_INT 3
57625: PUSH
57626: LD_INT 57
57628: PUSH
57629: EMPTY
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 50
57638: PUSH
57639: EMPTY
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 30
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 30
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: LIST
57674: PPUSH
57675: CALL_OW 70
57679: ST_TO_ADDR
// if not tmp then
57680: LD_VAR 0 3
57684: NOT
57685: IFFALSE 57689
// continue ;
57687: GO 57606
// AddPoints ( tmp ) ;
57689: LD_VAR 0 3
57693: PPUSH
57694: CALL 57888 0 1
// UpdateCounter ;
57698: CALL 58210 0 0
// until false ;
57702: LD_INT 0
57704: IFFALSE 57606
// end ;
57706: PPOPN 3
57708: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
57709: LD_EXP 38
57713: PUSH
57714: LD_EXP 36
57718: AND
57719: IFFALSE 57885
57721: GO 57723
57723: DISABLE
57724: LD_INT 0
57726: PPUSH
57727: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
57728: LD_ADDR_VAR 0 2
57732: PUSH
57733: LD_EXP 2
57737: PPUSH
57738: LD_INT 0
57740: PPUSH
57741: CALL_OW 517
57745: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57746: LD_ADDR_VAR 0 1
57750: PUSH
57751: DOUBLE
57752: LD_INT 1
57754: DEC
57755: ST_TO_ADDR
57756: LD_VAR 0 2
57760: PUSH
57761: LD_INT 1
57763: ARRAY
57764: PUSH
57765: FOR_TO
57766: IFFALSE 57807
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
57768: LD_VAR 0 2
57772: PUSH
57773: LD_INT 1
57775: ARRAY
57776: PUSH
57777: LD_VAR 0 1
57781: ARRAY
57782: PPUSH
57783: LD_VAR 0 2
57787: PUSH
57788: LD_INT 2
57790: ARRAY
57791: PUSH
57792: LD_VAR 0 1
57796: ARRAY
57797: PPUSH
57798: LD_INT 125
57800: PPUSH
57801: CALL_OW 495
57805: GO 57765
57807: POP
57808: POP
// repeat wait ( mpEmissions ) ;
57809: LD_EXP 36
57813: PPUSH
57814: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
57818: LD_ADDR_VAR 0 1
57822: PUSH
57823: DOUBLE
57824: LD_INT 1
57826: DEC
57827: ST_TO_ADDR
57828: LD_VAR 0 2
57832: PUSH
57833: LD_INT 1
57835: ARRAY
57836: PUSH
57837: FOR_TO
57838: IFFALSE 57879
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
57840: LD_VAR 0 2
57844: PUSH
57845: LD_INT 1
57847: ARRAY
57848: PUSH
57849: LD_VAR 0 1
57853: ARRAY
57854: PPUSH
57855: LD_VAR 0 2
57859: PUSH
57860: LD_INT 2
57862: ARRAY
57863: PUSH
57864: LD_VAR 0 1
57868: ARRAY
57869: PPUSH
57870: LD_INT 15
57872: PPUSH
57873: CALL_OW 495
57877: GO 57837
57879: POP
57880: POP
// until false ;
57881: LD_INT 0
57883: IFFALSE 57809
// end ;
57885: PPOPN 2
57887: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
57888: LD_INT 0
57890: PPUSH
57891: PPUSH
57892: PPUSH
57893: PPUSH
57894: PPUSH
// if mpTeamGame then
57895: LD_EXP 11
57899: IFFALSE 58096
// begin first := depots [ 1 ] ;
57901: LD_ADDR_VAR 0 4
57905: PUSH
57906: LD_VAR 0 1
57910: PUSH
57911: LD_INT 1
57913: ARRAY
57914: ST_TO_ADDR
// side := GetSide ( first ) ;
57915: LD_ADDR_VAR 0 6
57919: PUSH
57920: LD_VAR 0 4
57924: PPUSH
57925: CALL_OW 255
57929: ST_TO_ADDR
// for i := 1 to mpTeams do
57930: LD_ADDR_VAR 0 3
57934: PUSH
57935: DOUBLE
57936: LD_INT 1
57938: DEC
57939: ST_TO_ADDR
57940: LD_EXP 10
57944: PUSH
57945: FOR_TO
57946: IFFALSE 57980
// if side in mpTeams [ i ] then
57948: LD_VAR 0 6
57952: PUSH
57953: LD_EXP 10
57957: PUSH
57958: LD_VAR 0 3
57962: ARRAY
57963: IN
57964: IFFALSE 57978
// begin team := i ;
57966: LD_ADDR_VAR 0 5
57970: PUSH
57971: LD_VAR 0 3
57975: ST_TO_ADDR
// break ;
57976: GO 57980
// end ;
57978: GO 57945
57980: POP
57981: POP
// if not team then
57982: LD_VAR 0 5
57986: NOT
57987: IFFALSE 57991
// exit ;
57989: GO 58205
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
57991: LD_EXP 33
57995: PPUSH
57996: LD_INT 81
57998: PUSH
57999: LD_VAR 0 6
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PPUSH
58008: CALL_OW 70
58012: IFFALSE 58016
// exit ;
58014: GO 58205
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58016: LD_ADDR_EXP 53
58020: PUSH
58021: LD_EXP 53
58025: PPUSH
58026: LD_VAR 0 5
58030: PPUSH
58031: LD_EXP 53
58035: PUSH
58036: LD_VAR 0 5
58040: ARRAY
58041: PUSH
58042: LD_INT 1
58044: PLUS
58045: PPUSH
58046: CALL_OW 1
58050: ST_TO_ADDR
// for i in mpTeams [ team ] do
58051: LD_ADDR_VAR 0 3
58055: PUSH
58056: LD_EXP 10
58060: PUSH
58061: LD_VAR 0 5
58065: ARRAY
58066: PUSH
58067: FOR_IN
58068: IFFALSE 58092
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58070: LD_VAR 0 3
58074: PPUSH
58075: LD_EXP 53
58079: PUSH
58080: LD_VAR 0 5
58084: ARRAY
58085: PPUSH
58086: CALL_OW 506
58090: GO 58067
58092: POP
58093: POP
// end else
58094: GO 58205
// begin first := depots [ 1 ] ;
58096: LD_ADDR_VAR 0 4
58100: PUSH
58101: LD_VAR 0 1
58105: PUSH
58106: LD_INT 1
58108: ARRAY
58109: ST_TO_ADDR
// side := GetSide ( first ) ;
58110: LD_ADDR_VAR 0 6
58114: PUSH
58115: LD_VAR 0 4
58119: PPUSH
58120: CALL_OW 255
58124: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58125: LD_EXP 33
58129: PPUSH
58130: LD_INT 81
58132: PUSH
58133: LD_VAR 0 6
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PPUSH
58142: CALL_OW 70
58146: IFFALSE 58150
// exit ;
58148: GO 58205
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58150: LD_ADDR_EXP 53
58154: PUSH
58155: LD_EXP 53
58159: PPUSH
58160: LD_VAR 0 6
58164: PPUSH
58165: LD_EXP 53
58169: PUSH
58170: LD_VAR 0 6
58174: ARRAY
58175: PUSH
58176: LD_INT 1
58178: PLUS
58179: PPUSH
58180: CALL_OW 1
58184: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58185: LD_VAR 0 6
58189: PPUSH
58190: LD_EXP 53
58194: PUSH
58195: LD_VAR 0 6
58199: ARRAY
58200: PPUSH
58201: CALL_OW 506
// end ; end ;
58205: LD_VAR 0 2
58209: RET
// function UpdateCounter ; var i ; begin
58210: LD_INT 0
58212: PPUSH
58213: PPUSH
// result := [ ] ;
58214: LD_ADDR_VAR 0 1
58218: PUSH
58219: EMPTY
58220: ST_TO_ADDR
// if mpTeamGame then
58221: LD_EXP 11
58225: IFFALSE 58292
// begin for i := 1 to mpTeams do
58227: LD_ADDR_VAR 0 2
58231: PUSH
58232: DOUBLE
58233: LD_INT 1
58235: DEC
58236: ST_TO_ADDR
58237: LD_EXP 10
58241: PUSH
58242: FOR_TO
58243: IFFALSE 58288
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58245: LD_ADDR_VAR 0 1
58249: PUSH
58250: LD_VAR 0 1
58254: PUSH
58255: LD_STRING #KingoftheHill-Team
58257: PUSH
58258: LD_VAR 0 2
58262: PUSH
58263: LD_EXP 53
58267: PUSH
58268: LD_VAR 0 2
58272: ARRAY
58273: PUSH
58274: LD_EXP 34
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: ADD
58285: ST_TO_ADDR
58286: GO 58242
58288: POP
58289: POP
// end else
58290: GO 58365
// begin for i := 1 to 8 do
58292: LD_ADDR_VAR 0 2
58296: PUSH
58297: DOUBLE
58298: LD_INT 1
58300: DEC
58301: ST_TO_ADDR
58302: LD_INT 8
58304: PUSH
58305: FOR_TO
58306: IFFALSE 58363
// if mpSidePositions [ i ] then
58308: LD_EXP 7
58312: PUSH
58313: LD_VAR 0 2
58317: ARRAY
58318: IFFALSE 58361
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58320: LD_ADDR_VAR 0 1
58324: PUSH
58325: LD_VAR 0 1
58329: PUSH
58330: LD_STRING #KingoftheHill-Player
58332: PUSH
58333: LD_VAR 0 2
58337: PUSH
58338: LD_EXP 53
58342: PUSH
58343: LD_VAR 0 2
58347: ARRAY
58348: PUSH
58349: LD_EXP 34
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: ADD
58360: ST_TO_ADDR
58361: GO 58305
58363: POP
58364: POP
// end ; mpDisplayStrings := result ;
58365: LD_ADDR_EXP 37
58369: PUSH
58370: LD_VAR 0 1
58374: ST_TO_ADDR
// end ;
58375: LD_VAR 0 1
58379: RET
// export function HowMuchPointsKing ( side ) ; begin
58380: LD_INT 0
58382: PPUSH
// result := HowMuchPoints ( side ) ;
58383: LD_ADDR_VAR 0 2
58387: PUSH
58388: LD_VAR 0 1
58392: PPUSH
58393: CALL 58403 0 1
58397: ST_TO_ADDR
// end ;
58398: LD_VAR 0 2
58402: RET
// function HowMuchPoints ( side ) ; var i ; begin
58403: LD_INT 0
58405: PPUSH
58406: PPUSH
// if mpTeamGame then
58407: LD_EXP 11
58411: IFFALSE 58480
// begin for i := 1 to Count ( mpTeams ) do
58413: LD_ADDR_VAR 0 3
58417: PUSH
58418: DOUBLE
58419: LD_INT 1
58421: DEC
58422: ST_TO_ADDR
58423: LD_EXP 10
58427: PPUSH
58428: CALL 11221 0 1
58432: PUSH
58433: FOR_TO
58434: IFFALSE 58476
// begin if side in mpTeams [ i ] then
58436: LD_VAR 0 1
58440: PUSH
58441: LD_EXP 10
58445: PUSH
58446: LD_VAR 0 3
58450: ARRAY
58451: IN
58452: IFFALSE 58474
// begin result := mpKingPoints [ i ] ;
58454: LD_ADDR_VAR 0 2
58458: PUSH
58459: LD_EXP 53
58463: PUSH
58464: LD_VAR 0 3
58468: ARRAY
58469: ST_TO_ADDR
// exit ;
58470: POP
58471: POP
58472: GO 58496
// end ; end ;
58474: GO 58433
58476: POP
58477: POP
// end else
58478: GO 58496
// result := mpKingPoints [ side ] ;
58480: LD_ADDR_VAR 0 2
58484: PUSH
58485: LD_EXP 53
58489: PUSH
58490: LD_VAR 0 1
58494: ARRAY
58495: ST_TO_ADDR
// end ;
58496: LD_VAR 0 2
58500: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58501: LD_EXP 38
58505: PUSH
58506: CALL 58828 0 0
58510: AND
58511: PUSH
58512: LD_OWVAR 4
58516: AND
58517: IFFALSE 58753
58519: GO 58521
58521: DISABLE
58522: LD_INT 0
58524: PPUSH
58525: PPUSH
// begin canWin := false ;
58526: LD_ADDR_VAR 0 2
58530: PUSH
58531: LD_INT 0
58533: ST_TO_ADDR
// if not HasPower ( your_side ) then
58534: LD_OWVAR 2
58538: PPUSH
58539: CALL 58868 0 1
58543: NOT
58544: IFFALSE 58555
// begin Multiplayer_Loose_Message ;
58546: CALL_OW 521
// enable ( mpLose ) ;
58550: LD_INT 102
58552: ENABLE_MARKED
// end else
58553: GO 58753
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58555: LD_ADDR_VAR 0 2
58559: PUSH
58560: LD_OWVAR 2
58564: PPUSH
58565: CALL 58403 0 1
58569: PUSH
58570: LD_EXP 34
58574: GREATEREQUAL
58575: PUSH
58576: LD_OWVAR 2
58580: PPUSH
58581: CALL 58868 0 1
58585: AND
58586: PUSH
58587: CALL 58756 0 0
58591: NOT
58592: OR
58593: ST_TO_ADDR
// for i := 1 to 8 do
58594: LD_ADDR_VAR 0 1
58598: PUSH
58599: DOUBLE
58600: LD_INT 1
58602: DEC
58603: ST_TO_ADDR
58604: LD_INT 8
58606: PUSH
58607: FOR_TO
58608: IFFALSE 58739
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58610: LD_EXP 7
58614: PUSH
58615: LD_VAR 0 1
58619: ARRAY
58620: PUSH
58621: LD_VAR 0 1
58625: PPUSH
58626: CALL_OW 108
58630: AND
58631: PUSH
58632: LD_VAR 0 1
58636: PUSH
58637: LD_OWVAR 2
58641: NONEQUAL
58642: AND
58643: IFFALSE 58737
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58645: LD_EXP 8
58649: PUSH
58650: LD_VAR 0 1
58654: ARRAY
58655: NOT
58656: PUSH
58657: LD_EXP 8
58661: PUSH
58662: LD_VAR 0 1
58666: ARRAY
58667: PUSH
58668: LD_EXP 8
58672: PUSH
58673: LD_OWVAR 2
58677: ARRAY
58678: NONEQUAL
58679: PUSH
58680: LD_OWVAR 2
58684: PPUSH
58685: LD_VAR 0 1
58689: PPUSH
58690: CALL_OW 81
58694: PUSH
58695: LD_INT 1
58697: NONEQUAL
58698: AND
58699: OR
58700: IFFALSE 58737
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL 58403 0 1
58711: PUSH
58712: LD_EXP 34
58716: GREATEREQUAL
58717: PUSH
58718: LD_VAR 0 1
58722: PPUSH
58723: CALL 58868 0 1
58727: AND
58728: IFFALSE 58737
// begin enable ( mpLose ) ;
58730: LD_INT 102
58732: ENABLE_MARKED
// exit ;
58733: POP
58734: POP
58735: GO 58753
// end ;
58737: GO 58607
58739: POP
58740: POP
// if canWin then
58741: LD_VAR 0 2
58745: IFFALSE 58752
// enable ( mpWin ) else
58747: LD_INT 101
58749: ENABLE_MARKED
58750: GO 58753
// enable ;
58752: ENABLE
// end ; end ;
58753: PPOPN 2
58755: END
// function EnemiesInGame ; var i ; begin
58756: LD_INT 0
58758: PPUSH
58759: PPUSH
// result := false ;
58760: LD_ADDR_VAR 0 1
58764: PUSH
58765: LD_INT 0
58767: ST_TO_ADDR
// for i := 1 to 8 do
58768: LD_ADDR_VAR 0 2
58772: PUSH
58773: DOUBLE
58774: LD_INT 1
58776: DEC
58777: ST_TO_ADDR
58778: LD_INT 8
58780: PUSH
58781: FOR_TO
58782: IFFALSE 58821
// if i <> your_side and HasPower ( i ) then
58784: LD_VAR 0 2
58788: PUSH
58789: LD_OWVAR 2
58793: NONEQUAL
58794: PUSH
58795: LD_VAR 0 2
58799: PPUSH
58800: CALL 58868 0 1
58804: AND
58805: IFFALSE 58819
// begin result := true ;
58807: LD_ADDR_VAR 0 1
58811: PUSH
58812: LD_INT 1
58814: ST_TO_ADDR
// exit ;
58815: POP
58816: POP
58817: GO 58823
// end ;
58819: GO 58781
58821: POP
58822: POP
// end ;
58823: LD_VAR 0 1
58827: RET
// function CanWinLoose ; begin
58828: LD_INT 0
58830: PPUSH
// result := true ;
58831: LD_ADDR_VAR 0 1
58835: PUSH
58836: LD_INT 1
58838: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
58839: CALL_OW 531
58843: PUSH
58844: CALL_OW 519
58848: PUSH
58849: LD_INT 1
58851: GREATER
58852: AND
58853: IFFALSE 58863
// result := false ;
58855: LD_ADDR_VAR 0 1
58859: PUSH
58860: LD_INT 0
58862: ST_TO_ADDR
// end ;
58863: LD_VAR 0 1
58867: RET
// function HasPower ( i ) ; begin
58868: LD_INT 0
58870: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
58871: LD_ADDR_VAR 0 2
58875: PUSH
58876: LD_INT 22
58878: PUSH
58879: LD_VAR 0 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 21
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 33
58903: PUSH
58904: LD_INT 3
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 33
58913: PUSH
58914: LD_INT 5
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PPUSH
58931: CALL_OW 69
58935: ST_TO_ADDR
// end ; end_of_file
58936: LD_VAR 0 2
58940: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
58941: PPOPN 6
58943: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58944: CALL 58973 0 0
// end ; end_of_file
58948: PPOPN 1
58950: END
// every 0 0$1 do
58951: GO 58953
58953: DISABLE
// begin enable ;
58954: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58955: LD_STRING updateTimer(
58957: PUSH
58958: LD_OWVAR 1
58962: STR
58963: PUSH
58964: LD_STRING );
58966: STR
58967: PPUSH
58968: CALL_OW 559
// end ;
58972: END
// export function SOS_MapStart ( ) ; begin
58973: LD_INT 0
58975: PPUSH
// UpdateFactoryWaypoints ( ) ;
58976: CALL 59345 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58980: CALL 59597 0 0
// end ;
58984: LD_VAR 0 1
58988: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58989: LD_INT 0
58991: PPUSH
// end ;
58992: LD_VAR 0 12
58996: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
58997: LD_INT 0
58999: PPUSH
59000: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59001: LD_VAR 0 1
59005: NOT
59006: PUSH
59007: LD_VAR 0 2
59011: PPUSH
59012: LD_VAR 0 3
59016: PPUSH
59017: CALL_OW 488
59021: NOT
59022: OR
59023: PUSH
59024: LD_VAR 0 1
59028: PPUSH
59029: CALL_OW 266
59033: PUSH
59034: LD_INT 3
59036: NONEQUAL
59037: PUSH
59038: LD_VAR 0 1
59042: PPUSH
59043: CALL_OW 247
59047: PUSH
59048: LD_INT 1
59050: EQUAL
59051: NOT
59052: AND
59053: OR
59054: IFFALSE 59058
// exit ;
59056: GO 59340
// if GetType ( factory ) = unit_human then
59058: LD_VAR 0 1
59062: PPUSH
59063: CALL_OW 247
59067: PUSH
59068: LD_INT 1
59070: EQUAL
59071: IFFALSE 59088
// factory := IsInUnit ( factory ) ;
59073: LD_ADDR_VAR 0 1
59077: PUSH
59078: LD_VAR 0 1
59082: PPUSH
59083: CALL_OW 310
59087: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59088: LD_VAR 0 1
59092: PPUSH
59093: CALL_OW 266
59097: PUSH
59098: LD_INT 3
59100: NONEQUAL
59101: IFFALSE 59105
// exit ;
59103: GO 59340
// for i := 1 to Count ( factoryWaypoints ) do
59105: LD_ADDR_VAR 0 5
59109: PUSH
59110: DOUBLE
59111: LD_INT 1
59113: DEC
59114: ST_TO_ADDR
59115: LD_EXP 54
59119: PPUSH
59120: CALL 11221 0 1
59124: PUSH
59125: FOR_TO
59126: IFFALSE 59288
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59128: LD_VAR 0 2
59132: PPUSH
59133: LD_VAR 0 3
59137: PPUSH
59138: CALL_OW 428
59142: PUSH
59143: LD_EXP 54
59147: PUSH
59148: LD_VAR 0 5
59152: ARRAY
59153: PUSH
59154: LD_INT 2
59156: ARRAY
59157: EQUAL
59158: IFFALSE 59190
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59160: LD_ADDR_EXP 54
59164: PUSH
59165: LD_EXP 54
59169: PPUSH
59170: LD_VAR 0 5
59174: PPUSH
59175: CALL_OW 3
59179: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59180: CALL 59345 0 0
// exit ;
59184: POP
59185: POP
59186: GO 59340
// end else
59188: GO 59286
// if factory = factoryWaypoints [ i ] [ 2 ] then
59190: LD_VAR 0 1
59194: PUSH
59195: LD_EXP 54
59199: PUSH
59200: LD_VAR 0 5
59204: ARRAY
59205: PUSH
59206: LD_INT 2
59208: ARRAY
59209: EQUAL
59210: IFFALSE 59286
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59212: LD_ADDR_EXP 54
59216: PUSH
59217: LD_EXP 54
59221: PPUSH
59222: LD_VAR 0 5
59226: PPUSH
59227: CALL_OW 3
59231: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59232: LD_ADDR_EXP 54
59236: PUSH
59237: LD_EXP 54
59241: PPUSH
59242: LD_VAR 0 1
59246: PPUSH
59247: CALL_OW 255
59251: PUSH
59252: LD_VAR 0 1
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_VAR 0 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: PPUSH
59273: CALL 46830 0 2
59277: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59278: CALL 59345 0 0
// exit ;
59282: POP
59283: POP
59284: GO 59340
// end ; end ;
59286: GO 59125
59288: POP
59289: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59290: LD_ADDR_EXP 54
59294: PUSH
59295: LD_EXP 54
59299: PPUSH
59300: LD_VAR 0 1
59304: PPUSH
59305: CALL_OW 255
59309: PUSH
59310: LD_VAR 0 1
59314: PUSH
59315: LD_VAR 0 2
59319: PUSH
59320: LD_VAR 0 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: PPUSH
59331: CALL 46830 0 2
59335: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59336: CALL 59345 0 0
// end ;
59340: LD_VAR 0 4
59344: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59345: LD_INT 0
59347: PPUSH
59348: PPUSH
59349: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59350: LD_STRING resetFactoryWaypoint();
59352: PPUSH
59353: CALL_OW 559
// if factoryWaypoints then
59357: LD_EXP 54
59361: IFFALSE 59482
// begin list := factoryWaypoints ;
59363: LD_ADDR_VAR 0 3
59367: PUSH
59368: LD_EXP 54
59372: ST_TO_ADDR
// for i := 1 to list do
59373: LD_ADDR_VAR 0 2
59377: PUSH
59378: DOUBLE
59379: LD_INT 1
59381: DEC
59382: ST_TO_ADDR
59383: LD_VAR 0 3
59387: PUSH
59388: FOR_TO
59389: IFFALSE 59480
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59391: LD_STRING setFactoryWaypointXY(
59393: PUSH
59394: LD_VAR 0 3
59398: PUSH
59399: LD_VAR 0 2
59403: ARRAY
59404: PUSH
59405: LD_INT 1
59407: ARRAY
59408: STR
59409: PUSH
59410: LD_STRING ,
59412: STR
59413: PUSH
59414: LD_VAR 0 3
59418: PUSH
59419: LD_VAR 0 2
59423: ARRAY
59424: PUSH
59425: LD_INT 2
59427: ARRAY
59428: STR
59429: PUSH
59430: LD_STRING ,
59432: STR
59433: PUSH
59434: LD_VAR 0 3
59438: PUSH
59439: LD_VAR 0 2
59443: ARRAY
59444: PUSH
59445: LD_INT 3
59447: ARRAY
59448: STR
59449: PUSH
59450: LD_STRING ,
59452: STR
59453: PUSH
59454: LD_VAR 0 3
59458: PUSH
59459: LD_VAR 0 2
59463: ARRAY
59464: PUSH
59465: LD_INT 4
59467: ARRAY
59468: STR
59469: PUSH
59470: LD_STRING )
59472: STR
59473: PPUSH
59474: CALL_OW 559
59478: GO 59388
59480: POP
59481: POP
// end ; end ;
59482: LD_VAR 0 1
59486: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59487: LD_INT 0
59489: PPUSH
// if HexInfo ( x , y ) = warehouse then
59490: LD_VAR 0 2
59494: PPUSH
59495: LD_VAR 0 3
59499: PPUSH
59500: CALL_OW 428
59504: PUSH
59505: LD_VAR 0 1
59509: EQUAL
59510: IFFALSE 59537
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59512: LD_ADDR_EXP 55
59516: PUSH
59517: LD_EXP 55
59521: PPUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: LD_INT 0
59529: PPUSH
59530: CALL_OW 1
59534: ST_TO_ADDR
59535: GO 59588
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59537: LD_ADDR_EXP 55
59541: PUSH
59542: LD_EXP 55
59546: PPUSH
59547: LD_VAR 0 1
59551: PPUSH
59552: LD_VAR 0 1
59556: PPUSH
59557: CALL_OW 255
59561: PUSH
59562: LD_VAR 0 1
59566: PUSH
59567: LD_VAR 0 2
59571: PUSH
59572: LD_VAR 0 3
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: PPUSH
59583: CALL_OW 1
59587: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59588: CALL 59597 0 0
// end ;
59592: LD_VAR 0 4
59596: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59597: LD_INT 0
59599: PPUSH
59600: PPUSH
59601: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59602: LD_STRING resetWarehouseGatheringPoints();
59604: PPUSH
59605: CALL_OW 559
// if warehouseGatheringPoints then
59609: LD_EXP 55
59613: IFFALSE 59739
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59615: LD_ADDR_VAR 0 3
59619: PUSH
59620: LD_EXP 55
59624: PPUSH
59625: CALL 50592 0 1
59629: ST_TO_ADDR
// for i := 1 to list do
59630: LD_ADDR_VAR 0 2
59634: PUSH
59635: DOUBLE
59636: LD_INT 1
59638: DEC
59639: ST_TO_ADDR
59640: LD_VAR 0 3
59644: PUSH
59645: FOR_TO
59646: IFFALSE 59737
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59648: LD_STRING setWarehouseGatheringPointXY(
59650: PUSH
59651: LD_VAR 0 3
59655: PUSH
59656: LD_VAR 0 2
59660: ARRAY
59661: PUSH
59662: LD_INT 1
59664: ARRAY
59665: STR
59666: PUSH
59667: LD_STRING ,
59669: STR
59670: PUSH
59671: LD_VAR 0 3
59675: PUSH
59676: LD_VAR 0 2
59680: ARRAY
59681: PUSH
59682: LD_INT 2
59684: ARRAY
59685: STR
59686: PUSH
59687: LD_STRING ,
59689: STR
59690: PUSH
59691: LD_VAR 0 3
59695: PUSH
59696: LD_VAR 0 2
59700: ARRAY
59701: PUSH
59702: LD_INT 3
59704: ARRAY
59705: STR
59706: PUSH
59707: LD_STRING ,
59709: STR
59710: PUSH
59711: LD_VAR 0 3
59715: PUSH
59716: LD_VAR 0 2
59720: ARRAY
59721: PUSH
59722: LD_INT 4
59724: ARRAY
59725: STR
59726: PUSH
59727: LD_STRING )
59729: STR
59730: PPUSH
59731: CALL_OW 559
59735: GO 59645
59737: POP
59738: POP
// end ; end ;
59739: LD_VAR 0 1
59743: RET
