// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3043 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 33
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 36
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 35
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 32
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 51108 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 51108 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 51108 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 51108 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 51108 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 51108 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 10980 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 50941 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 50941 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 50941 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 50941 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 50941 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 50941 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 50941 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 50941 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 50941 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 50941 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 50941 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 50941 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 51108 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 51108 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 51108 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 51108 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 51108 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 51108 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 51108 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 51108 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 51108 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 51108 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 51108 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 51108 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 51108 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 51108 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 51108 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 51108 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 51108 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 51108 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 47930 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 67694 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7337 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 67711 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 7927 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 67752 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 7980 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpDepots := [ ] ;
2799: LD_ADDR_EXP 14
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpBuildings := [ ] ;
2806: LD_ADDR_EXP 17
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2813: LD_ADDR_EXP 18
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2820: LD_ADDR_EXP 19
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2827: LD_ADDR_EXP 20
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpStartingResources := [ ] ;
2834: LD_ADDR_EXP 15
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpStartPos := [ ] ;
2841: LD_ADDR_EXP 21
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2848: LD_ADDR_EXP 22
2852: PUSH
2853: LD_INT 1
2855: NEG
2856: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2857: LD_ADDR_EXP 23
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpApemans := [ ] ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// mpApemansArea := [ ] ;
2871: LD_ADDR_EXP 31
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpRespawn := [ ] ;
2878: LD_ADDR_EXP 32
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpKingArea := 0 ;
2885: LD_ADDR_EXP 33
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// mpPoints := [ ] ;
2893: LD_ADDR_EXP 34
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpVehicles := 0 ;
2900: LD_ADDR_EXP 35
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// mpShipments := 0 ;
2908: LD_ADDR_EXP 27
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2916: LD_ADDR_EXP 39
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: PUSH
2925: EMPTY
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: ST_TO_ADDR
// mpEmissions := 0 ;
2947: LD_ADDR_EXP 36
2951: PUSH
2952: LD_INT 0
2954: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2955: LD_ADDR_EXP 25
2959: PUSH
2960: LD_INT 3
2962: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2963: LD_ADDR_EXP 24
2967: PUSH
2968: LD_INT 15
2970: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2971: LD_ADDR_EXP 37
2975: PUSH
2976: LD_INT 0
2978: ST_TO_ADDR
// mpGameActive := false ;
2979: LD_ADDR_EXP 38
2983: PUSH
2984: LD_INT 0
2986: ST_TO_ADDR
// mpBlockRespThread := false ;
2987: LD_ADDR_EXP 40
2991: PUSH
2992: LD_INT 0
2994: ST_TO_ADDR
// for i := 1 to 32 do
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 32
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3036
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3011: LD_ADDR_EXP 6
3015: PUSH
3016: LD_EXP 6
3020: PPUSH
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_INT 0
3028: PPUSH
3029: CALL_OW 1
3033: ST_TO_ADDR
3034: GO 3008
3036: POP
3037: POP
// end ;
3038: LD_VAR 0 1
3042: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3059: LD_ADDR_VAR 0 14
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: LD_INT 3
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
// for i in gameTypes do
3078: LD_ADDR_VAR 0 2
3082: PUSH
3083: LD_VAR 0 14
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3098
// disable ( i ) ;
3091: LD_VAR 0 2
3095: DISABLE_MARKED
3096: GO 3088
3098: POP
3099: POP
// if Multiplayer then
3100: LD_OWVAR 4
3104: IFFALSE 3288
// begin mpGameType := mp_game_type ;
3106: LD_ADDR_EXP 3
3110: PUSH
3111: LD_OWVAR 6
3115: ST_TO_ADDR
// your_side := mp_player_side ;
3116: LD_ADDR_OWVAR 2
3120: PUSH
3121: LD_OWVAR 7
3125: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3126: LD_ADDR_EXP 7
3130: PUSH
3131: LD_OWVAR 17
3135: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3136: LD_ADDR_EXP 8
3140: PUSH
3141: LD_OWVAR 15
3145: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3146: LD_ADDR_EXP 9
3150: PUSH
3151: LD_OWVAR 16
3155: ST_TO_ADDR
// mpTeams := mp_teams ;
3156: LD_ADDR_EXP 10
3160: PUSH
3161: LD_OWVAR 12
3165: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3166: LD_ADDR_VAR 0 2
3170: PUSH
3171: DOUBLE
3172: LD_INT 1
3174: DEC
3175: ST_TO_ADDR
3176: LD_EXP 4
3180: PPUSH
3181: CALL 10980 0 1
3185: PUSH
3186: FOR_TO
3187: IFFALSE 3263
// begin setting := mpGameSettingsKeys [ i ] ;
3189: LD_ADDR_VAR 0 12
3193: PUSH
3194: LD_EXP 4
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: ST_TO_ADDR
// if setting then
3205: LD_VAR 0 12
3209: IFFALSE 3261
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3211: LD_ADDR_EXP 6
3215: PUSH
3216: LD_EXP 6
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_EXP 5
3230: PUSH
3231: LD_VAR 0 2
3235: ARRAY
3236: PUSH
3237: LD_VAR 0 2
3241: PUSH
3242: LD_INT 1
3244: MINUS
3245: PPUSH
3246: CALL_OW 426
3250: PUSH
3251: LD_INT 1
3253: PLUS
3254: ARRAY
3255: PPUSH
3256: CALL_OW 1
3260: ST_TO_ADDR
// end ;
3261: GO 3186
3263: POP
3264: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3265: LD_ADDR_EXP 11
3269: PUSH
3270: LD_EXP 8
3274: PUSH
3275: LD_INT 0
3277: PUSH
3278: EMPTY
3279: LIST
3280: DIFF
3281: PUSH
3282: LD_INT 1
3284: GREATER
3285: ST_TO_ADDR
// end else
3286: GO 3288
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3288: LD_EXP 3
3292: PPUSH
3293: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3297: LD_EXP 18
3301: PPUSH
3302: CALL 10980 0 1
3306: IFFALSE 3337
// begin for i in mpMarkedAreas do
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: LD_EXP 18
3317: PUSH
3318: FOR_IN
3319: IFFALSE 3335
// SetAreaMapShow ( i , 0 ) ;
3321: LD_VAR 0 2
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 424
3333: GO 3318
3335: POP
3336: POP
// end ; for i := 1 to 8 do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 8
3349: PUSH
3350: FOR_TO
3351: IFFALSE 4567
// begin if not mpSidePositions [ i ] then
3353: LD_EXP 7
3357: PUSH
3358: LD_VAR 0 2
3362: ARRAY
3363: NOT
3364: IFFALSE 3368
// continue ;
3366: GO 3350
// side := i ;
3368: LD_ADDR_VAR 0 7
3372: PUSH
3373: LD_VAR 0 2
3377: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3378: LD_ADDR_VAR 0 9
3382: PUSH
3383: LD_EXP 9
3387: PUSH
3388: LD_VAR 0 2
3392: ARRAY
3393: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3394: LD_ADDR_VAR 0 8
3398: PUSH
3399: LD_EXP 7
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3410: LD_EXP 12
3414: PPUSH
3415: CALL 10980 0 1
3419: IFFALSE 3496
// begin for j in mpOilDeposits [ pos ] do
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_EXP 12
3430: PUSH
3431: LD_VAR 0 8
3435: ARRAY
3436: PUSH
3437: FOR_IN
3438: IFFALSE 3494
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_VAR 0 3
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_INT 2
3460: PPUSH
3461: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3465: LD_VAR 0 3
3469: PUSH
3470: LD_INT 1
3472: ARRAY
3473: PPUSH
3474: LD_VAR 0 3
3478: PUSH
3479: LD_INT 2
3481: ARRAY
3482: PPUSH
3483: LD_VAR 0 7
3487: PPUSH
3488: CALL_OW 441
// end ;
3492: GO 3437
3494: POP
3495: POP
// end ; if Count ( mpSibDeposits ) then
3496: LD_EXP 13
3500: PPUSH
3501: CALL 10980 0 1
3505: IFFALSE 3582
// begin for j in mpSibDeposits [ pos ] do
3507: LD_ADDR_VAR 0 3
3511: PUSH
3512: LD_EXP 13
3516: PUSH
3517: LD_VAR 0 8
3521: ARRAY
3522: PUSH
3523: FOR_IN
3524: IFFALSE 3580
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3526: LD_VAR 0 3
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: LD_VAR 0 3
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3551: LD_VAR 0 3
3555: PUSH
3556: LD_INT 1
3558: ARRAY
3559: PPUSH
3560: LD_VAR 0 3
3564: PUSH
3565: LD_INT 2
3567: ARRAY
3568: PPUSH
3569: LD_VAR 0 7
3573: PPUSH
3574: CALL_OW 441
// end ;
3578: GO 3523
3580: POP
3581: POP
// end ; InitBc ;
3582: CALL_OW 21
// InitUc ;
3586: CALL_OW 18
// uc_side := side ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_VAR 0 7
3599: ST_TO_ADDR
// uc_nation := nation ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: LD_VAR 0 9
3609: ST_TO_ADDR
// if Count ( mpDepots ) then
3610: LD_EXP 14
3614: PPUSH
3615: CALL 10980 0 1
3619: IFFALSE 3789
// begin bc_level := 0 ;
3621: LD_ADDR_OWVAR 43
3625: PUSH
3626: LD_INT 0
3628: ST_TO_ADDR
// bc_type := b_depot ;
3629: LD_ADDR_OWVAR 42
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3637: LD_ADDR_VAR 0 4
3641: PUSH
3642: LD_EXP 14
3646: PUSH
3647: LD_VAR 0 8
3651: ARRAY
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: LD_EXP 14
3661: PUSH
3662: LD_VAR 0 8
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: PPUSH
3672: LD_EXP 14
3676: PUSH
3677: LD_VAR 0 8
3681: ARRAY
3682: PUSH
3683: LD_INT 3
3685: ARRAY
3686: PPUSH
3687: CALL_OW 47
3691: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3692: LD_VAR 0 4
3696: PPUSH
3697: LD_STRING @
3699: PUSH
3700: LD_VAR 0 7
3704: STR
3705: PPUSH
3706: CALL_OW 500
// SetTag ( b , side ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_VAR 0 7
3719: PPUSH
3720: CALL_OW 109
// if Count ( mpStartingResources ) then
3724: LD_EXP 15
3728: PPUSH
3729: CALL 10980 0 1
3733: IFFALSE 3787
// begin for j := 1 to mpStartingResources do
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: DOUBLE
3741: LD_INT 1
3743: DEC
3744: ST_TO_ADDR
3745: LD_EXP 15
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3785
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: CALL_OW 274
3762: PPUSH
3763: LD_VAR 0 3
3767: PPUSH
3768: LD_EXP 15
3772: PUSH
3773: LD_VAR 0 3
3777: ARRAY
3778: PPUSH
3779: CALL_OW 277
3783: GO 3750
3785: POP
3786: POP
// end ; end else
3787: GO 3936
// if Count ( mpStartingResources ) then
3789: LD_EXP 15
3793: PPUSH
3794: CALL 10980 0 1
3798: IFFALSE 3936
// begin for j := 1 to mpStartingResources do
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: DOUBLE
3806: LD_INT 1
3808: DEC
3809: ST_TO_ADDR
3810: LD_EXP 15
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3934
// begin resources := mpStartingResources [ j ] ;
3818: LD_ADDR_VAR 0 13
3822: PUSH
3823: LD_EXP 15
3827: PUSH
3828: LD_VAR 0 3
3832: ARRAY
3833: ST_TO_ADDR
// repeat if resources >= 50 then
3834: LD_VAR 0 13
3838: PUSH
3839: LD_INT 50
3841: GREATEREQUAL
3842: IFFALSE 3888
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 5
3851: PPUSH
3852: LD_VAR 0 5
3856: PPUSH
3857: LD_VAR 0 6
3861: PPUSH
3862: LD_INT 4
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 60
// resources := resources - 50 ;
3872: LD_ADDR_VAR 0 13
3876: PUSH
3877: LD_VAR 0 13
3881: PUSH
3882: LD_INT 50
3884: MINUS
3885: ST_TO_ADDR
// end else
3886: GO 3922
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_VAR 0 13
3897: PUSH
3898: LD_INT 10
3900: DIV
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_VAR 0 6
3911: PPUSH
3912: LD_INT 4
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 60
// until resources <= 0 ;
3922: LD_VAR 0 13
3926: PUSH
3927: LD_INT 0
3929: LESSEQUAL
3930: IFFALSE 3834
// end ;
3932: GO 3815
3934: POP
3935: POP
// end ; if Count ( mpBuildings ) then
3936: LD_EXP 17
3940: PPUSH
3941: CALL 10980 0 1
3945: IFFALSE 4023
// begin for j in mpBuildings [ pos ] do
3947: LD_ADDR_VAR 0 3
3951: PUSH
3952: LD_EXP 17
3956: PUSH
3957: LD_VAR 0 8
3961: ARRAY
3962: PUSH
3963: FOR_IN
3964: IFFALSE 4021
// begin bc_level := 0 ;
3966: LD_ADDR_OWVAR 43
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3974: LD_ADDR_OWVAR 42
3978: PUSH
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3988: LD_VAR 0 3
3992: PUSH
3993: LD_INT 2
3995: ARRAY
3996: PPUSH
3997: LD_VAR 0 3
4001: PUSH
4002: LD_INT 3
4004: ARRAY
4005: PPUSH
4006: LD_VAR 0 3
4010: PUSH
4011: LD_INT 4
4013: ARRAY
4014: PPUSH
4015: CALL_OW 47
// end ;
4019: GO 3963
4021: POP
4022: POP
// end ; if mpBattleFlag > - 1 then
4023: LD_EXP 22
4027: PUSH
4028: LD_INT 1
4030: NEG
4031: GREATER
4032: IFFALSE 4191
// begin x := mpStartPos [ pos ] [ 1 ] ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: LD_EXP 21
4043: PUSH
4044: LD_VAR 0 8
4048: ARRAY
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4054: LD_ADDR_VAR 0 6
4058: PUSH
4059: LD_EXP 21
4063: PUSH
4064: LD_VAR 0 8
4068: ARRAY
4069: PUSH
4070: LD_INT 2
4072: ARRAY
4073: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4074: LD_VAR 0 5
4078: PPUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 12
4086: PPUSH
4087: LD_INT 2
4089: PPUSH
4090: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4094: LD_ADDR_EXP 23
4098: PUSH
4099: LD_EXP 23
4103: PPUSH
4104: LD_VAR 0 7
4108: PPUSH
4109: LD_VAR 0 7
4113: PPUSH
4114: LD_VAR 0 5
4118: PPUSH
4119: LD_VAR 0 6
4123: PPUSH
4124: LD_INT 1
4126: PUSH
4127: LD_INT 100
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 70
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: LD_INT 40
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 10
4156: PUSH
4157: LD_INT 25
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 20
4166: PUSH
4167: LD_INT 100
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 418
4185: PPUSH
4186: CALL_OW 1
4190: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4191: LD_EXP 26
4195: PUSH
4196: LD_INT 20
4198: PPUSH
4199: LD_VAR 0 7
4203: PPUSH
4204: CALL_OW 321
4208: PUSH
4209: LD_INT 1
4211: EQUAL
4212: AND
4213: IFFALSE 4230
// SetTech ( tech_SibDet , side , state_researched ) ;
4215: LD_INT 20
4217: PPUSH
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 2
4225: PPUSH
4226: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4230: LD_INT 24
4232: PPUSH
4233: LD_VAR 0 7
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 322
// if mpSibBomb = 1 then
4245: LD_EXP 28
4249: PUSH
4250: LD_INT 1
4252: EQUAL
4253: IFFALSE 4272
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4255: LD_INT 25
4257: PPUSH
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 322
// end else
4270: GO 4287
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4272: LD_INT 25
4274: PPUSH
4275: LD_VAR 0 7
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 322
// end ; if mpVehicles then
4287: LD_EXP 35
4291: IFFALSE 4390
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: LD_VAR 0 7
4302: PPUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_EXP 35
4312: PPUSH
4313: CALL 5249 0 3
4317: PUSH
4318: FOR_IN
4319: IFFALSE 4388
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4321: LD_VAR 0 3
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: CALL_OW 12
4336: PPUSH
4337: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4341: LD_VAR 0 3
4345: PPUSH
4346: LD_EXP 21
4350: PUSH
4351: LD_VAR 0 8
4355: ARRAY
4356: PUSH
4357: LD_INT 1
4359: ARRAY
4360: PPUSH
4361: LD_EXP 21
4365: PUSH
4366: LD_VAR 0 8
4370: ARRAY
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 12
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 50
// end ;
4386: GO 4318
4388: POP
4389: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4390: LD_ADDR_VAR 0 11
4394: PUSH
4395: LD_VAR 0 7
4399: PPUSH
4400: LD_VAR 0 9
4404: PPUSH
4405: LD_EXP 24
4409: PPUSH
4410: LD_EXP 25
4414: PPUSH
4415: CALL 4979 0 4
4419: ST_TO_ADDR
// for j in team do
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_VAR 0 11
4429: PUSH
4430: FOR_IN
4431: IFFALSE 4480
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4433: LD_VAR 0 3
4437: PPUSH
4438: LD_EXP 21
4442: PUSH
4443: LD_VAR 0 8
4447: ARRAY
4448: PUSH
4449: LD_INT 1
4451: ARRAY
4452: PPUSH
4453: LD_EXP 21
4457: PUSH
4458: LD_VAR 0 8
4462: ARRAY
4463: PUSH
4464: LD_INT 2
4466: ARRAY
4467: PPUSH
4468: LD_INT 12
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: CALL_OW 50
4478: GO 4430
4480: POP
4481: POP
// if mpApemans then
4482: LD_EXP 30
4486: IFFALSE 4565
// begin for j := 1 to mpApemans do
4488: LD_ADDR_VAR 0 3
4492: PUSH
4493: DOUBLE
4494: LD_INT 1
4496: DEC
4497: ST_TO_ADDR
4498: LD_EXP 30
4502: PUSH
4503: FOR_TO
4504: IFFALSE 4563
// begin PrepareApeman ( - 5 ) ;
4506: LD_INT 5
4508: NEG
4509: PPUSH
4510: CALL 42837 0 1
// ape := CreateHuman ;
4514: LD_ADDR_VAR 0 10
4518: PUSH
4519: CALL_OW 44
4523: ST_TO_ADDR
// SetTag ( ape , side ) ;
4524: LD_VAR 0 10
4528: PPUSH
4529: LD_VAR 0 7
4533: PPUSH
4534: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4538: LD_VAR 0 10
4542: PPUSH
4543: LD_EXP 31
4547: PUSH
4548: LD_VAR 0 8
4552: ARRAY
4553: PPUSH
4554: LD_INT 0
4556: PPUSH
4557: CALL_OW 49
// end ;
4561: GO 4503
4563: POP
4564: POP
// end ; end ;
4565: GO 3350
4567: POP
4568: POP
// if not mpTeamGame then
4569: LD_EXP 11
4573: NOT
4574: IFFALSE 4672
// begin for i := 1 to 8 do
4576: LD_ADDR_VAR 0 2
4580: PUSH
4581: DOUBLE
4582: LD_INT 1
4584: DEC
4585: ST_TO_ADDR
4586: LD_INT 8
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4668
// for j := 1 to 8 do
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: DOUBLE
4598: LD_INT 1
4600: DEC
4601: ST_TO_ADDR
4602: LD_INT 8
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4664
// if i <> j then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_VAR 0 3
4617: NONEQUAL
4618: IFFALSE 4642
// SetAttitude ( i , j , att_neutral , true ) else
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 3
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 80
4640: GO 4662
// SetAttitude ( i , j , att_friend , true ) ;
4642: LD_VAR 0 2
4646: PPUSH
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 80
4662: GO 4605
4664: POP
4665: POP
4666: GO 4589
4668: POP
4669: POP
// end else
4670: GO 4847
// begin if mpSharedVision then
4672: LD_EXP 16
4676: IFFALSE 4741
// begin for i in mpTeams do
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_EXP 10
4687: PUSH
4688: FOR_IN
4689: IFFALSE 4739
// for j := 2 to i do
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: DOUBLE
4697: LD_INT 2
4699: DEC
4700: ST_TO_ADDR
4701: LD_VAR 0 2
4705: PUSH
4706: FOR_TO
4707: IFFALSE 4735
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4709: LD_VAR 0 2
4713: PUSH
4714: LD_VAR 0 3
4718: ARRAY
4719: PPUSH
4720: LD_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: PPUSH
4729: CALL_OW 343
4733: GO 4706
4735: POP
4736: POP
4737: GO 4688
4739: POP
4740: POP
// end ; for i := 1 to 8 do
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: DOUBLE
4747: LD_INT 1
4749: DEC
4750: ST_TO_ADDR
4751: LD_INT 8
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4845
// for j := 1 to 8 do
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: DOUBLE
4763: LD_INT 1
4765: DEC
4766: ST_TO_ADDR
4767: LD_INT 8
4769: PUSH
4770: FOR_TO
4771: IFFALSE 4841
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4773: LD_EXP 8
4777: PUSH
4778: LD_VAR 0 2
4782: ARRAY
4783: PUSH
4784: LD_EXP 8
4788: PUSH
4789: LD_VAR 0 3
4793: ARRAY
4794: EQUAL
4795: IFFALSE 4819
// SetAttitude ( i , j , att_friend , true ) else
4797: LD_VAR 0 2
4801: PPUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: LD_INT 1
4812: PPUSH
4813: CALL_OW 80
4817: GO 4839
// SetAttitude ( i , j , att_enemy , true ) ;
4819: LD_VAR 0 2
4823: PPUSH
4824: LD_VAR 0 3
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 80
4839: GO 4770
4841: POP
4842: POP
4843: GO 4754
4845: POP
4846: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4847: LD_ADDR_OWVAR 71
4851: PUSH
4852: LD_EXP 9
4856: PUSH
4857: LD_OWVAR 2
4861: ARRAY
4862: ST_TO_ADDR
// if IAmSpec then
4863: CALL_OW 531
4867: IFFALSE 4908
// begin FogOff ( true ) ;
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4876: LD_EXP 29
4880: PUSH
4881: LD_INT 1
4883: ARRAY
4884: PUSH
4885: LD_INT 2
4887: DIV
4888: PPUSH
4889: LD_EXP 29
4893: PUSH
4894: LD_INT 2
4896: ARRAY
4897: PUSH
4898: LD_INT 2
4900: DIV
4901: PPUSH
4902: CALL_OW 86
// end else
4906: GO 4954
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4908: LD_EXP 21
4912: PUSH
4913: LD_EXP 7
4917: PUSH
4918: LD_OWVAR 2
4922: ARRAY
4923: ARRAY
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: LD_EXP 21
4933: PUSH
4934: LD_EXP 7
4938: PUSH
4939: LD_OWVAR 2
4943: ARRAY
4944: ARRAY
4945: PUSH
4946: LD_INT 2
4948: ARRAY
4949: PPUSH
4950: CALL_OW 86
// end ; BeginBuildUp ;
4954: CALL 5727 0 0
// enable ( mpActive ) ;
4958: LD_INT 100
4960: ENABLE_MARKED
// enable ( mpGameType ) ;
4961: LD_EXP 3
4965: ENABLE_MARKED
// mpGameActive := true ;
4966: LD_ADDR_EXP 38
4970: PUSH
4971: LD_INT 1
4973: ST_TO_ADDR
// end ;
4974: LD_VAR 0 1
4978: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
4979: LD_INT 0
4981: PPUSH
4982: PPUSH
4983: PPUSH
// result := [ ] ;
4984: LD_ADDR_VAR 0 5
4988: PUSH
4989: EMPTY
4990: ST_TO_ADDR
// class := class_soldier ;
4991: LD_ADDR_VAR 0 7
4995: PUSH
4996: LD_INT 1
4998: ST_TO_ADDR
// uc_side := side ;
4999: LD_ADDR_OWVAR 20
5003: PUSH
5004: LD_VAR 0 1
5008: ST_TO_ADDR
// uc_nation := nation ;
5009: LD_ADDR_OWVAR 21
5013: PUSH
5014: LD_VAR 0 2
5018: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5019: LD_ADDR_OWVAR 26
5023: PUSH
5024: LD_OWVAR 19
5028: PUSH
5029: LD_VAR 0 1
5033: ARRAY
5034: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5035: LD_INT 1
5037: PPUSH
5038: LD_INT 2
5040: PPUSH
5041: CALL_OW 12
5045: PPUSH
5046: LD_VAR 0 7
5050: PPUSH
5051: LD_VAR 0 4
5055: PUSH
5056: LD_INT 2
5058: PLUS
5059: PPUSH
5060: CALL_OW 380
// hc_importance := 105 ;
5064: LD_ADDR_OWVAR 32
5068: PUSH
5069: LD_INT 105
5071: ST_TO_ADDR
// if Multiplayer then
5072: LD_OWVAR 4
5076: IFFALSE 5116
// begin hc_gallery := MULTIAVATARS ;
5078: LD_ADDR_OWVAR 33
5082: PUSH
5083: LD_STRING MULTIAVATARS
5085: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5086: LD_ADDR_OWVAR 34
5090: PUSH
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 525
5100: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5101: LD_ADDR_OWVAR 27
5105: PUSH
5106: LD_VAR 0 1
5110: PPUSH
5111: CALL_OW 526
5115: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5116: LD_ADDR_VAR 0 5
5120: PUSH
5121: LD_VAR 0 5
5125: PPUSH
5126: CALL_OW 44
5130: PPUSH
5131: CALL 46569 0 2
5135: ST_TO_ADDR
// InitHc_All ( ) ;
5136: CALL_OW 584
// class := 2 ;
5140: LD_ADDR_VAR 0 7
5144: PUSH
5145: LD_INT 2
5147: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5148: LD_ADDR_VAR 0 6
5152: PUSH
5153: DOUBLE
5154: LD_INT 1
5156: DEC
5157: ST_TO_ADDR
5158: LD_VAR 0 3
5162: PUSH
5163: LD_INT 1
5165: MINUS
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5242
// begin PrepareHuman ( false , class , skill ) ;
5170: LD_INT 0
5172: PPUSH
5173: LD_VAR 0 7
5177: PPUSH
5178: LD_VAR 0 4
5182: PPUSH
5183: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
5187: LD_ADDR_VAR 0 5
5191: PUSH
5192: LD_VAR 0 5
5196: PPUSH
5197: CALL_OW 44
5201: PPUSH
5202: CALL 46569 0 2
5206: ST_TO_ADDR
// class := Inc ( class ) ;
5207: LD_ADDR_VAR 0 7
5211: PUSH
5212: LD_VAR 0 7
5216: PPUSH
5217: CALL 47930 0 1
5221: ST_TO_ADDR
// if class = 5 then
5222: LD_VAR 0 7
5226: PUSH
5227: LD_INT 5
5229: EQUAL
5230: IFFALSE 5240
// class := 1 ;
5232: LD_ADDR_VAR 0 7
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// end ;
5240: GO 5167
5242: POP
5243: POP
// end ;
5244: LD_VAR 0 5
5248: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5249: LD_INT 0
5251: PPUSH
5252: PPUSH
// result := [ ] ;
5253: LD_ADDR_VAR 0 4
5257: PUSH
5258: EMPTY
5259: ST_TO_ADDR
// if not vehicles then
5260: LD_VAR 0 3
5264: NOT
5265: IFFALSE 5269
// exit ;
5267: GO 5428
// for i := 1 to vehicles [ nation ] do
5269: LD_ADDR_VAR 0 5
5273: PUSH
5274: DOUBLE
5275: LD_INT 1
5277: DEC
5278: ST_TO_ADDR
5279: LD_VAR 0 3
5283: PUSH
5284: LD_VAR 0 2
5288: ARRAY
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5426
// begin uc_side := side ;
5293: LD_ADDR_OWVAR 20
5297: PUSH
5298: LD_VAR 0 1
5302: ST_TO_ADDR
// uc_nation := nation ;
5303: LD_ADDR_OWVAR 21
5307: PUSH
5308: LD_VAR 0 2
5312: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5313: LD_VAR 0 3
5317: PUSH
5318: LD_VAR 0 2
5322: ARRAY
5323: PUSH
5324: LD_VAR 0 5
5328: ARRAY
5329: PUSH
5330: LD_INT 1
5332: ARRAY
5333: PPUSH
5334: LD_VAR 0 3
5338: PUSH
5339: LD_VAR 0 2
5343: ARRAY
5344: PUSH
5345: LD_VAR 0 5
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: LD_VAR 0 3
5359: PUSH
5360: LD_VAR 0 2
5364: ARRAY
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PUSH
5372: LD_INT 3
5374: ARRAY
5375: PPUSH
5376: LD_VAR 0 3
5380: PUSH
5381: LD_VAR 0 2
5385: ARRAY
5386: PUSH
5387: LD_VAR 0 5
5391: ARRAY
5392: PUSH
5393: LD_INT 4
5395: ARRAY
5396: PPUSH
5397: LD_INT 80
5399: PPUSH
5400: CALL 13718 0 5
// result := Join ( result , CreateVehicle ) ;
5404: LD_ADDR_VAR 0 4
5408: PUSH
5409: LD_VAR 0 4
5413: PPUSH
5414: CALL_OW 45
5418: PPUSH
5419: CALL 46569 0 2
5423: ST_TO_ADDR
// end ;
5424: GO 5290
5426: POP
5427: POP
// end ;
5428: LD_VAR 0 4
5432: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5433: LD_INT 0
5435: PPUSH
5436: PPUSH
// for i in mpBattleFlags do
5437: LD_ADDR_VAR 0 3
5441: PUSH
5442: LD_EXP 23
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5525
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5450: LD_VAR 0 3
5454: PPUSH
5455: LD_INT 1
5457: PUSH
5458: LD_VAR 0 1
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 2
5469: PUSH
5470: LD_VAR 0 1
5474: PUSH
5475: LD_REAL  7.00000000000000E-0001
5478: MUL
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 3
5486: PUSH
5487: LD_VAR 0 1
5491: PUSH
5492: LD_REAL  4.00000000000000E-0001
5495: MUL
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 20
5503: PUSH
5504: LD_VAR 0 1
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PPUSH
5519: CALL_OW 423
5523: GO 5447
5525: POP
5526: POP
// end ;
5527: LD_VAR 0 2
5531: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5532: LD_INT 100
5534: IFFALSE 5629
5536: GO 5538
5538: DISABLE
5539: LD_INT 0
5541: PPUSH
5542: PPUSH
// begin if mpBattleFlag <= 0 then
5543: LD_EXP 22
5547: PUSH
5548: LD_INT 0
5550: LESSEQUAL
5551: IFFALSE 5555
// exit ;
5553: GO 5629
// strength := 100 ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_INT 100
5562: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5563: LD_EXP 22
5567: PPUSH
5568: CALL_OW 67
// strength := Dec ( strength ) ;
5572: LD_ADDR_VAR 0 2
5576: PUSH
5577: LD_VAR 0 2
5581: PPUSH
5582: CALL 47952 0 1
5586: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5587: LD_VAR 0 2
5591: PPUSH
5592: CALL 5433 0 1
// until not strength ;
5596: LD_VAR 0 2
5600: NOT
5601: IFFALSE 5563
// for i in mpBattleFlags do
5603: LD_ADDR_VAR 0 1
5607: PUSH
5608: LD_EXP 23
5612: PUSH
5613: FOR_IN
5614: IFFALSE 5627
// KillBattleFlag ( i ) ;
5616: LD_VAR 0 1
5620: PPUSH
5621: CALL_OW 419
5625: GO 5613
5627: POP
5628: POP
// end ;
5629: PPOPN 2
5631: END
// every 0 0$1 marked mpActive do var side , tmp ;
5632: GO 5634
5634: DISABLE
5635: LD_INT 0
5637: PPUSH
5638: PPUSH
// begin if mpSibBomb <= 1 then
5639: LD_EXP 28
5643: PUSH
5644: LD_INT 1
5646: LESSEQUAL
5647: IFFALSE 5651
// exit ;
5649: GO 5724
// tmp := mpSibBomb ;
5651: LD_ADDR_VAR 0 2
5655: PUSH
5656: LD_EXP 28
5660: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5661: LD_INT 35
5663: PPUSH
5664: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_VAR 0 2
5677: PUSH
5678: LD_INT 35
5680: MINUS
5681: ST_TO_ADDR
// until not tmp ;
5682: LD_VAR 0 2
5686: NOT
5687: IFFALSE 5661
// for side := 1 to 8 do
5689: LD_ADDR_VAR 0 1
5693: PUSH
5694: DOUBLE
5695: LD_INT 1
5697: DEC
5698: ST_TO_ADDR
5699: LD_INT 8
5701: PUSH
5702: FOR_TO
5703: IFFALSE 5722
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5705: LD_INT 25
5707: PPUSH
5708: LD_VAR 0 1
5712: PPUSH
5713: LD_INT 1
5715: PPUSH
5716: CALL_OW 322
5720: GO 5702
5722: POP
5723: POP
// end ;
5724: PPOPN 2
5726: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5727: LD_INT 0
5729: PPUSH
5730: PPUSH
5731: PPUSH
// mpBuildUpTimeDelay := 0 ;
5732: LD_ADDR_EXP 41
5736: PUSH
5737: LD_INT 0
5739: ST_TO_ADDR
// if not mpBuildUpTime then
5740: LD_EXP 20
5744: NOT
5745: IFFALSE 5749
// exit ;
5747: GO 5932
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5749: LD_ADDR_EXP 41
5753: PUSH
5754: LD_INT 8400
5756: PUSH
5757: LD_INT 2100
5759: PUSH
5760: LD_EXP 20
5764: MUL
5765: PLUS
5766: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5767: LD_ADDR_EXP 42
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// for i := 1 to 8 do
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: DOUBLE
5781: LD_INT 1
5783: DEC
5784: ST_TO_ADDR
5785: LD_INT 8
5787: PUSH
5788: FOR_TO
5789: IFFALSE 5930
// if mpSidePositions [ i ] then
5791: LD_EXP 7
5795: PUSH
5796: LD_VAR 0 2
5800: ARRAY
5801: IFFALSE 5928
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
5803: LD_EXP 19
5807: PUSH
5808: LD_EXP 7
5812: PUSH
5813: LD_VAR 0 2
5817: ARRAY
5818: ARRAY
5819: PPUSH
5820: LD_INT 5
5822: PPUSH
5823: CALL_OW 424
// for j := 1 to 8 do
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 8
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5926
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
5843: LD_EXP 7
5847: PUSH
5848: LD_VAR 0 3
5852: ARRAY
5853: PUSH
5854: LD_EXP 8
5858: PUSH
5859: LD_VAR 0 2
5863: ARRAY
5864: PUSH
5865: LD_EXP 8
5869: PUSH
5870: LD_VAR 0 3
5874: ARRAY
5875: NONEQUAL
5876: PUSH
5877: LD_EXP 11
5881: NOT
5882: PUSH
5883: LD_VAR 0 2
5887: PUSH
5888: LD_VAR 0 3
5892: NONEQUAL
5893: AND
5894: OR
5895: AND
5896: IFFALSE 5924
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
5898: LD_VAR 0 3
5902: PPUSH
5903: LD_EXP 19
5907: PUSH
5908: LD_EXP 7
5912: PUSH
5913: LD_VAR 0 2
5917: ARRAY
5918: ARRAY
5919: PPUSH
5920: CALL_OW 333
5924: GO 5840
5926: POP
5927: POP
// end ;
5928: GO 5788
5930: POP
5931: POP
// end ;
5932: LD_VAR 0 1
5936: RET
// function EndBuildUp ; var i , j ; begin
5937: LD_INT 0
5939: PPUSH
5940: PPUSH
5941: PPUSH
// mpBuildUpTimeActive := false ;
5942: LD_ADDR_EXP 42
5946: PUSH
5947: LD_INT 0
5949: ST_TO_ADDR
// for i := 1 to 8 do
5950: LD_ADDR_VAR 0 2
5954: PUSH
5955: DOUBLE
5956: LD_INT 1
5958: DEC
5959: ST_TO_ADDR
5960: LD_INT 8
5962: PUSH
5963: FOR_TO
5964: IFFALSE 6105
// if mpSidePositions [ i ] then
5966: LD_EXP 7
5970: PUSH
5971: LD_VAR 0 2
5975: ARRAY
5976: IFFALSE 6103
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
5978: LD_EXP 19
5982: PUSH
5983: LD_EXP 7
5987: PUSH
5988: LD_VAR 0 2
5992: ARRAY
5993: ARRAY
5994: PPUSH
5995: LD_INT 0
5997: PPUSH
5998: CALL_OW 424
// for j := 1 to 8 do
6002: LD_ADDR_VAR 0 3
6006: PUSH
6007: DOUBLE
6008: LD_INT 1
6010: DEC
6011: ST_TO_ADDR
6012: LD_INT 8
6014: PUSH
6015: FOR_TO
6016: IFFALSE 6101
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6018: LD_EXP 7
6022: PUSH
6023: LD_VAR 0 3
6027: ARRAY
6028: PUSH
6029: LD_EXP 8
6033: PUSH
6034: LD_VAR 0 2
6038: ARRAY
6039: PUSH
6040: LD_EXP 8
6044: PUSH
6045: LD_VAR 0 3
6049: ARRAY
6050: NONEQUAL
6051: PUSH
6052: LD_EXP 11
6056: NOT
6057: PUSH
6058: LD_VAR 0 2
6062: PUSH
6063: LD_VAR 0 3
6067: NONEQUAL
6068: AND
6069: OR
6070: AND
6071: IFFALSE 6099
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6073: LD_VAR 0 3
6077: PPUSH
6078: LD_EXP 19
6082: PUSH
6083: LD_EXP 7
6087: PUSH
6088: LD_VAR 0 2
6092: ARRAY
6093: ARRAY
6094: PPUSH
6095: CALL_OW 334
6099: GO 6015
6101: POP
6102: POP
// end ;
6103: GO 5963
6105: POP
6106: POP
// end ;
6107: LD_VAR 0 1
6111: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6112: LD_EXP 42
6116: IFFALSE 6291
6118: GO 6120
6120: DISABLE
6121: LD_INT 0
6123: PPUSH
6124: PPUSH
// begin for i := 1 to 8 do
6125: LD_ADDR_VAR 0 1
6129: PUSH
6130: DOUBLE
6131: LD_INT 1
6133: DEC
6134: ST_TO_ADDR
6135: LD_INT 8
6137: PUSH
6138: FOR_TO
6139: IFFALSE 6288
// if mpSidePositions [ i ] then
6141: LD_EXP 7
6145: PUSH
6146: LD_VAR 0 1
6150: ARRAY
6151: IFFALSE 6286
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_EXP 19
6162: PUSH
6163: LD_EXP 7
6167: PUSH
6168: LD_VAR 0 1
6172: ARRAY
6173: ARRAY
6174: PPUSH
6175: LD_INT 2
6177: PUSH
6178: LD_INT 21
6180: PUSH
6181: LD_INT 1
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 21
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 22
6205: PUSH
6206: LD_OWVAR 2
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PPUSH
6219: CALL_OW 70
6223: PUSH
6224: FOR_IN
6225: IFFALSE 6284
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6227: LD_EXP 8
6231: PUSH
6232: LD_VAR 0 1
6236: ARRAY
6237: PUSH
6238: LD_EXP 8
6242: PUSH
6243: LD_OWVAR 2
6247: ARRAY
6248: NONEQUAL
6249: PUSH
6250: LD_EXP 11
6254: NOT
6255: PUSH
6256: LD_VAR 0 1
6260: PUSH
6261: LD_OWVAR 2
6265: NONEQUAL
6266: AND
6267: OR
6268: IFFALSE 6282
// ComMoveToArea ( un , BuildUpEscape ) ;
6270: LD_VAR 0 2
6274: PPUSH
6275: LD_INT 13
6277: PPUSH
6278: CALL_OW 113
6282: GO 6224
6284: POP
6285: POP
6286: GO 6138
6288: POP
6289: POP
// enable ;
6290: ENABLE
// end ;
6291: PPOPN 2
6293: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6294: LD_EXP 20
6298: IFFALSE 6348
6300: GO 6302
6302: DISABLE
6303: LD_INT 0
6305: PPUSH
// begin tmp := mpBuildUpTime ;
6306: LD_ADDR_VAR 0 1
6310: PUSH
6311: LD_EXP 20
6315: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6316: LD_INT 35
6318: PPUSH
6319: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 1
6332: PUSH
6333: LD_INT 35
6335: MINUS
6336: ST_TO_ADDR
// until not tmp ;
6337: LD_VAR 0 1
6341: NOT
6342: IFFALSE 6316
// EndBuildUp ;
6344: CALL 5937 0 0
// end ;
6348: PPOPN 1
6350: END
// every 0 0$1 trigger mpActive marked mpWin do
6351: LD_INT 100
6353: IFFALSE 6387
6355: GO 6357
6357: DISABLE
// begin if IAmServer then
6358: CALL_OW 518
6362: IFFALSE 6371
// wait ( 0 0$3 ) ;
6364: LD_INT 105
6366: PPUSH
6367: CALL_OW 67
// if Multiplayer then
6371: LD_OWVAR 4
6375: IFFALSE 6383
// YouWinInMultiplayer else
6377: CALL_OW 106
6381: GO 6387
// YouWin ;
6383: CALL_OW 103
// end ;
6387: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6388: LD_INT 0
6390: PPUSH
// result := false ;
6391: LD_ADDR_VAR 0 3
6395: PUSH
6396: LD_INT 0
6398: ST_TO_ADDR
// case gameType of GameTypeNormal :
6399: LD_VAR 0 1
6403: PUSH
6404: LD_INT 1
6406: DOUBLE
6407: EQUAL
6408: IFTRUE 6412
6410: GO 6485
6412: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_INT 22
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 2
6432: PUSH
6433: LD_INT 21
6435: PUSH
6436: LD_INT 1
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 33
6445: PUSH
6446: LD_INT 3
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 33
6455: PUSH
6456: LD_INT 5
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 69
6477: PPUSH
6478: CALL 10980 0 1
6482: ST_TO_ADDR
// end ; GameTypeSurvival :
6483: GO 6720
6485: LD_INT 2
6487: DOUBLE
6488: EQUAL
6489: IFTRUE 6493
6491: GO 6621
6493: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_VAR 0 2
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 2
6513: PUSH
6514: LD_INT 30
6516: PUSH
6517: LD_INT 0
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 30
6526: PUSH
6527: LD_INT 1
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PPUSH
6543: CALL_OW 69
6547: PPUSH
6548: CALL 10980 0 1
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 2
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 21
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 33
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 33
6590: PUSH
6591: LD_INT 5
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: PPUSH
6613: CALL 10980 0 1
6617: AND
6618: ST_TO_ADDR
// end ; GameTypeKing :
6619: GO 6720
6621: LD_INT 3
6623: DOUBLE
6624: EQUAL
6625: IFTRUE 6629
6627: GO 6719
6629: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
6630: LD_ADDR_VAR 0 3
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_VAR 0 2
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: LD_INT 21
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 33
6662: PUSH
6663: LD_INT 3
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 33
6672: PUSH
6673: LD_INT 5
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PPUSH
6695: CALL 10980 0 1
6699: PUSH
6700: LD_VAR 0 2
6704: PPUSH
6705: CALL 73954 0 1
6709: PUSH
6710: LD_EXP 34
6714: GREATEREQUAL
6715: OR
6716: ST_TO_ADDR
// end ; end ;
6717: GO 6720
6719: POP
// end ;
6720: LD_VAR 0 3
6724: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6725: LD_INT 100
6727: IFFALSE 6949
6729: GO 6731
6731: DISABLE
6732: LD_INT 0
6734: PPUSH
6735: PPUSH
// begin if Multiplayer then
6736: LD_OWVAR 4
6740: IFFALSE 6748
// SetPlayerSpectator ( ) else
6742: CALL_OW 572
6746: GO 6757
// FogOff ( your_side ) ;
6748: LD_OWVAR 2
6752: PPUSH
6753: CALL_OW 344
// repeat gameIsOn := false ;
6757: LD_ADDR_VAR 0 1
6761: PUSH
6762: LD_INT 0
6764: ST_TO_ADDR
// for i := 1 to 8 do
6765: LD_ADDR_VAR 0 2
6769: PUSH
6770: DOUBLE
6771: LD_INT 1
6773: DEC
6774: ST_TO_ADDR
6775: LD_INT 8
6777: PUSH
6778: FOR_TO
6779: IFFALSE 6901
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6781: LD_EXP 7
6785: PUSH
6786: LD_VAR 0 2
6790: ARRAY
6791: PUSH
6792: LD_VAR 0 2
6796: PPUSH
6797: CALL_OW 108
6801: AND
6802: PUSH
6803: LD_VAR 0 2
6807: PUSH
6808: LD_OWVAR 2
6812: NONEQUAL
6813: AND
6814: IFFALSE 6899
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
6816: LD_EXP 8
6820: PUSH
6821: LD_VAR 0 2
6825: ARRAY
6826: NOT
6827: PUSH
6828: LD_EXP 8
6832: PUSH
6833: LD_VAR 0 2
6837: ARRAY
6838: PUSH
6839: LD_EXP 8
6843: PUSH
6844: LD_OWVAR 2
6848: ARRAY
6849: NONEQUAL
6850: PUSH
6851: LD_OWVAR 2
6855: PPUSH
6856: LD_VAR 0 2
6860: PPUSH
6861: CALL_OW 81
6865: PUSH
6866: LD_INT 1
6868: NONEQUAL
6869: AND
6870: OR
6871: IFFALSE 6899
// if HasPowerByGameType ( mpGameType , i ) then
6873: LD_EXP 3
6877: PPUSH
6878: LD_VAR 0 2
6882: PPUSH
6883: CALL 6388 0 2
6887: IFFALSE 6899
// begin gameIsOn := true ;
6889: LD_ADDR_VAR 0 1
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// break ;
6897: GO 6901
// end ;
6899: GO 6778
6901: POP
6902: POP
// wait ( 100 ) ;
6903: LD_INT 100
6905: PPUSH
6906: CALL_OW 67
// until not gameIsOn ;
6910: LD_VAR 0 1
6914: NOT
6915: IFFALSE 6757
// if IAmServer then
6917: CALL_OW 518
6921: IFFALSE 6930
// wait ( 0 0$3 ) ;
6923: LD_INT 105
6925: PPUSH
6926: CALL_OW 67
// if Multiplayer then
6930: LD_OWVAR 4
6934: IFFALSE 6942
// YouLostInMultiplayer else
6936: CALL_OW 107
6940: GO 6949
// YouLost (  ) ;
6942: LD_STRING 
6944: PPUSH
6945: CALL_OW 104
// end ;
6949: PPOPN 2
6951: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
6952: LD_EXP 32
6956: IFFALSE 7303
6958: GO 6960
6960: DISABLE
6961: LD_INT 0
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
6968: LD_ADDR_VAR 0 5
6972: PUSH
6973: LD_INT 1
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 3
6981: PUSH
6982: LD_INT 4
6984: PUSH
6985: LD_INT 5
6987: PUSH
6988: LD_INT 6
6990: PUSH
6991: LD_INT 7
6993: PUSH
6994: LD_INT 8
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7007: LD_INT 350
7009: PPUSH
7010: CALL_OW 67
// for i := 1 to 8 do
7014: LD_ADDR_VAR 0 1
7018: PUSH
7019: DOUBLE
7020: LD_INT 1
7022: DEC
7023: ST_TO_ADDR
7024: LD_INT 8
7026: PUSH
7027: FOR_TO
7028: IFFALSE 7273
// begin j := sides [ i ] ;
7030: LD_ADDR_VAR 0 2
7034: PUSH
7035: LD_VAR 0 5
7039: PUSH
7040: LD_VAR 0 1
7044: ARRAY
7045: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7046: LD_EXP 39
7050: PUSH
7051: LD_VAR 0 2
7055: ARRAY
7056: PPUSH
7057: CALL 10980 0 1
7061: PUSH
7062: LD_VAR 0 2
7066: PPUSH
7067: CALL_OW 108
7071: AND
7072: PUSH
7073: LD_EXP 3
7077: PPUSH
7078: LD_VAR 0 2
7082: PPUSH
7083: CALL 6388 0 2
7087: AND
7088: IFFALSE 7271
// begin wait ( mpRespawn div 3 ) ;
7090: LD_EXP 32
7094: PUSH
7095: LD_INT 3
7097: DIV
7098: PPUSH
7099: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7103: LD_ADDR_VAR 0 3
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 50
7122: PUSH
7123: EMPTY
7124: LIST
7125: PUSH
7126: LD_INT 2
7128: PUSH
7129: LD_INT 30
7131: PUSH
7132: LD_INT 0
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 30
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: ST_TO_ADDR
// if not tmp then
7164: LD_VAR 0 3
7168: NOT
7169: IFFALSE 7173
// continue ;
7171: GO 7027
// spawn := tmp [ 1 ] ;
7173: LD_ADDR_VAR 0 4
7177: PUSH
7178: LD_VAR 0 3
7182: PUSH
7183: LD_INT 1
7185: ARRAY
7186: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7187: LD_EXP 39
7191: PUSH
7192: LD_VAR 0 2
7196: ARRAY
7197: PUSH
7198: LD_INT 1
7200: ARRAY
7201: PPUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: CALL_OW 250
7211: PPUSH
7212: LD_VAR 0 4
7216: PPUSH
7217: CALL_OW 251
7221: PPUSH
7222: LD_INT 32
7224: PPUSH
7225: LD_INT 1
7227: PPUSH
7228: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7232: LD_ADDR_EXP 39
7236: PUSH
7237: LD_EXP 39
7241: PPUSH
7242: LD_VAR 0 2
7246: PPUSH
7247: LD_EXP 39
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: CALL_OW 3
7265: PPUSH
7266: CALL_OW 1
7270: ST_TO_ADDR
// end ; end ;
7271: GO 7027
7273: POP
7274: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7275: LD_ADDR_VAR 0 5
7279: PUSH
7280: LD_VAR 0 5
7284: PPUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_INT 8
7290: PPUSH
7291: LD_INT 1
7293: PPUSH
7294: CALL 13258 0 4
7298: ST_TO_ADDR
// until false ;
7299: LD_INT 0
7301: IFFALSE 7007
// end ;
7303: PPOPN 5
7305: END
// every 0 0$1 marked mpActive do
7306: GO 7308
7308: DISABLE
// begin enable ;
7309: ENABLE
// if not mpDisplayStrings then
7310: LD_EXP 37
7314: NOT
7315: IFFALSE 7326
// begin display_strings := [ ] ;
7317: LD_ADDR_OWVAR 47
7321: PUSH
7322: EMPTY
7323: ST_TO_ADDR
// exit ;
7324: GO 7336
// end ; display_strings := mpDisplayStrings ;
7326: LD_ADDR_OWVAR 47
7330: PUSH
7331: LD_EXP 37
7335: ST_TO_ADDR
// end ; end_of_file
7336: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7337: LD_INT 0
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
7347: PPUSH
// if GetType ( un ) = unit_vehicle then
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 247
7357: PUSH
7358: LD_INT 2
7360: EQUAL
7361: IFFALSE 7365
// exit ;
7363: GO 7922
// side := GetSide ( un ) ;
7365: LD_ADDR_VAR 0 9
7369: PUSH
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 255
7379: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7380: LD_EXP 3
7384: PUSH
7385: LD_INT 2
7387: EQUAL
7388: IFFALSE 7481
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7390: LD_VAR 0 1
7394: PPUSH
7395: CALL_OW 266
7399: PUSH
7400: LD_INT 0
7402: PUSH
7403: LD_INT 1
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: IN
7410: PUSH
7411: LD_VAR 0 1
7415: PPUSH
7416: CALL_OW 110
7420: PUSH
7421: LD_VAR 0 9
7425: EQUAL
7426: AND
7427: IFFALSE 7481
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7429: LD_ADDR_VAR 0 3
7433: PUSH
7434: LD_INT 22
7436: PUSH
7437: LD_VAR 0 9
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PPUSH
7460: CALL_OW 69
7464: PUSH
7465: FOR_IN
7466: IFFALSE 7479
// KillUnit ( i ) ;
7468: LD_VAR 0 3
7472: PPUSH
7473: CALL_OW 66
7477: GO 7465
7479: POP
7480: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7481: LD_VAR 0 1
7485: PPUSH
7486: CALL_OW 257
7490: PUSH
7491: LD_INT 12
7493: PUSH
7494: LD_INT 17
7496: PUSH
7497: LD_INT 15
7499: PUSH
7500: LD_INT 16
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: IN
7509: PUSH
7510: LD_VAR 0 1
7514: PPUSH
7515: CALL_OW 263
7519: PUSH
7520: LD_INT 5
7522: EQUAL
7523: OR
7524: IFFALSE 7658
// begin tag := GetTag ( un ) ;
7526: LD_ADDR_VAR 0 5
7530: PUSH
7531: LD_VAR 0 1
7535: PPUSH
7536: CALL_OW 110
7540: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7541: LD_ADDR_VAR 0 7
7545: PUSH
7546: LD_EXP 31
7550: PUSH
7551: LD_EXP 7
7555: PUSH
7556: LD_VAR 0 5
7560: ARRAY
7561: ARRAY
7562: ST_TO_ADDR
// if not area then
7563: LD_VAR 0 7
7567: NOT
7568: IFFALSE 7572
// exit ;
7570: GO 7922
// wait ( 4 4$00 ) ;
7572: LD_INT 8400
7574: PPUSH
7575: CALL_OW 67
// repeat wait ( 10 ) ;
7579: LD_INT 10
7581: PPUSH
7582: CALL_OW 67
// until not mpBlockRespThread ;
7586: LD_EXP 40
7590: NOT
7591: IFFALSE 7579
// mpBlockRespThread := true ;
7593: LD_ADDR_EXP 40
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7601: LD_INT 5
7603: NEG
7604: PPUSH
7605: CALL 42837 0 1
// ape := CreateHuman ;
7609: LD_ADDR_VAR 0 4
7613: PUSH
7614: CALL_OW 44
7618: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7619: LD_VAR 0 4
7623: PPUSH
7624: LD_VAR 0 5
7628: PPUSH
7629: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7633: LD_VAR 0 4
7637: PPUSH
7638: LD_VAR 0 7
7642: PPUSH
7643: LD_INT 0
7645: PPUSH
7646: CALL_OW 49
// mpBlockRespThread := false ;
7650: LD_ADDR_EXP 40
7654: PUSH
7655: LD_INT 0
7657: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 247
7667: PUSH
7668: LD_INT 1
7670: EQUAL
7671: PUSH
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 248
7681: PUSH
7682: LD_INT 0
7684: GREATER
7685: AND
7686: IFFALSE 7922
// begin if not mpRespawn then
7688: LD_EXP 32
7692: NOT
7693: IFFALSE 7697
// exit ;
7695: GO 7922
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7697: LD_VAR 0 9
7701: PPUSH
7702: CALL_OW 108
7706: NOT
7707: PUSH
7708: LD_EXP 3
7712: PPUSH
7713: LD_VAR 0 9
7717: PPUSH
7718: CALL 6388 0 2
7722: NOT
7723: AND
7724: IFFALSE 7728
// exit ;
7726: GO 7922
// side := GetSide ( un ) ;
7728: LD_ADDR_VAR 0 9
7732: PUSH
7733: LD_VAR 0 1
7737: PPUSH
7738: CALL_OW 255
7742: ST_TO_ADDR
// nation := GetNation ( un ) ;
7743: LD_ADDR_VAR 0 8
7747: PUSH
7748: LD_VAR 0 1
7752: PPUSH
7753: CALL_OW 248
7757: ST_TO_ADDR
// class := GetClass ( un ) ;
7758: LD_ADDR_VAR 0 6
7762: PUSH
7763: LD_VAR 0 1
7767: PPUSH
7768: CALL_OW 257
7772: ST_TO_ADDR
// if class > 4 then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: GREATER
7781: IFFALSE 7791
// class := 1 ;
7783: LD_ADDR_VAR 0 6
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// repeat wait ( 10 ) ;
7791: LD_INT 10
7793: PPUSH
7794: CALL_OW 67
// until not mpBlockRespThread ;
7798: LD_EXP 40
7802: NOT
7803: IFFALSE 7791
// mpBlockRespThread := true ;
7805: LD_ADDR_EXP 40
7809: PUSH
7810: LD_INT 1
7812: ST_TO_ADDR
// uc_side := side ;
7813: LD_ADDR_OWVAR 20
7817: PUSH
7818: LD_VAR 0 9
7822: ST_TO_ADDR
// uc_nation := nation ;
7823: LD_ADDR_OWVAR 21
7827: PUSH
7828: LD_VAR 0 8
7832: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
7833: LD_INT 0
7835: PPUSH
7836: LD_VAR 0 6
7840: PPUSH
7841: LD_INT 2
7843: PPUSH
7844: CALL_OW 380
// un := CreateHuman ;
7848: LD_ADDR_VAR 0 1
7852: PUSH
7853: CALL_OW 44
7857: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
7858: LD_ADDR_EXP 39
7862: PUSH
7863: LD_EXP 39
7867: PPUSH
7868: LD_VAR 0 9
7872: PPUSH
7873: LD_EXP 39
7877: PUSH
7878: LD_VAR 0 9
7882: ARRAY
7883: PPUSH
7884: LD_EXP 39
7888: PUSH
7889: LD_VAR 0 9
7893: ARRAY
7894: PUSH
7895: LD_INT 1
7897: PLUS
7898: PPUSH
7899: LD_VAR 0 1
7903: PPUSH
7904: CALL_OW 1
7908: PPUSH
7909: CALL_OW 1
7913: ST_TO_ADDR
// mpBlockRespThread := false ;
7914: LD_ADDR_EXP 40
7918: PUSH
7919: LD_INT 0
7921: ST_TO_ADDR
// end ; end ;
7922: LD_VAR 0 2
7926: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
7927: LD_INT 0
7929: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 266
7939: PUSH
7940: LD_INT 0
7942: PUSH
7943: LD_INT 1
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: IN
7950: IFFALSE 7975
// SetBName ( building , @ & GetSide ( building ) ) ;
7952: LD_VAR 0 1
7956: PPUSH
7957: LD_STRING @
7959: PUSH
7960: LD_VAR 0 1
7964: PPUSH
7965: CALL_OW 255
7969: STR
7970: PPUSH
7971: CALL_OW 500
// end ;
7975: LD_VAR 0 2
7979: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
7980: LD_INT 0
7982: PPUSH
7983: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
7984: LD_EXP 3
7988: PUSH
7989: LD_INT 2
7991: EQUAL
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 266
8002: PUSH
8003: LD_INT 0
8005: PUSH
8006: LD_INT 1
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: IN
8013: AND
8014: IFFALSE 8079
// begin KillUnit ( building ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8025: LD_ADDR_VAR 0 5
8029: PUSH
8030: LD_INT 22
8032: PUSH
8033: LD_VAR 0 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 21
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8075
// KillUnit ( i ) ;
8064: LD_VAR 0 5
8068: PPUSH
8069: CALL_OW 66
8073: GO 8061
8075: POP
8076: POP
// exit ;
8077: GO 8124
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8079: LD_VAR 0 1
8083: PPUSH
8084: CALL_OW 266
8088: PUSH
8089: LD_INT 0
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: IN
8099: IFFALSE 8124
// SetBName ( building , @ & GetSide ( building ) ) ;
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_STRING @
8108: PUSH
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 255
8118: STR
8119: PPUSH
8120: CALL_OW 500
// end ; end_of_file
8124: LD_VAR 0 4
8128: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8129: LD_EXP 38
8133: PUSH
8134: CALL 8339 0 0
8138: AND
8139: PUSH
8140: LD_OWVAR 4
8144: AND
8145: IFFALSE 8336
8147: GO 8149
8149: DISABLE
8150: LD_INT 0
8152: PPUSH
8153: PPUSH
// begin canWin := false ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// if not HasPower ( your_side ) then
8162: LD_OWVAR 2
8166: PPUSH
8167: CALL 8379 0 1
8171: NOT
8172: IFFALSE 8183
// begin Multiplayer_Loose_Message ;
8174: CALL_OW 521
// enable ( mpLose ) ;
8178: LD_INT 102
8180: ENABLE_MARKED
// end else
8181: GO 8336
// begin canWin := true ;
8183: LD_ADDR_VAR 0 2
8187: PUSH
8188: LD_INT 1
8190: ST_TO_ADDR
// for i := 1 to 8 do
8191: LD_ADDR_VAR 0 1
8195: PUSH
8196: DOUBLE
8197: LD_INT 1
8199: DEC
8200: ST_TO_ADDR
8201: LD_INT 8
8203: PUSH
8204: FOR_TO
8205: IFFALSE 8322
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8207: LD_EXP 7
8211: PUSH
8212: LD_VAR 0 1
8216: ARRAY
8217: PUSH
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 108
8227: AND
8228: PUSH
8229: LD_VAR 0 1
8233: PUSH
8234: LD_OWVAR 2
8238: NONEQUAL
8239: AND
8240: IFFALSE 8320
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8242: LD_EXP 8
8246: PUSH
8247: LD_VAR 0 1
8251: ARRAY
8252: NOT
8253: PUSH
8254: LD_EXP 8
8258: PUSH
8259: LD_VAR 0 1
8263: ARRAY
8264: PUSH
8265: LD_EXP 8
8269: PUSH
8270: LD_OWVAR 2
8274: ARRAY
8275: NONEQUAL
8276: PUSH
8277: LD_OWVAR 2
8281: PPUSH
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 81
8291: PUSH
8292: LD_INT 1
8294: NONEQUAL
8295: AND
8296: OR
8297: IFFALSE 8320
// if HasPower ( i ) then
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL 8379 0 1
8308: IFFALSE 8320
// begin canWin := false ;
8310: LD_ADDR_VAR 0 2
8314: PUSH
8315: LD_INT 0
8317: ST_TO_ADDR
// break ;
8318: GO 8322
// end ;
8320: GO 8204
8322: POP
8323: POP
// if canWin then
8324: LD_VAR 0 2
8328: IFFALSE 8335
// enable ( mpWin ) else
8330: LD_INT 101
8332: ENABLE_MARKED
8333: GO 8336
// enable ;
8335: ENABLE
// end ; end ;
8336: PPOPN 2
8338: END
// function CanWinLoose ; begin
8339: LD_INT 0
8341: PPUSH
// result := true ;
8342: LD_ADDR_VAR 0 1
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8350: CALL_OW 531
8354: PUSH
8355: CALL_OW 519
8359: PUSH
8360: LD_INT 1
8362: GREATER
8363: AND
8364: IFFALSE 8374
// result := false ;
8366: LD_ADDR_VAR 0 1
8370: PUSH
8371: LD_INT 0
8373: ST_TO_ADDR
// end ;
8374: LD_VAR 0 1
8378: RET
// function HasPower ( i ) ; begin
8379: LD_INT 0
8381: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8382: LD_ADDR_VAR 0 2
8386: PUSH
8387: LD_INT 22
8389: PUSH
8390: LD_VAR 0 1
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 2
8401: PUSH
8402: LD_INT 21
8404: PUSH
8405: LD_INT 1
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: LD_INT 33
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: LD_INT 33
8424: PUSH
8425: LD_INT 5
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PPUSH
8442: CALL_OW 69
8446: ST_TO_ADDR
// end ; end_of_file
8447: LD_VAR 0 2
8451: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8452: LD_EXP 38
8456: IFFALSE 8499
8458: GO 8460
8460: DISABLE
8461: LD_INT 0
8463: PPUSH
// begin for i := 1 to 8 do
8464: LD_ADDR_VAR 0 1
8468: PUSH
8469: DOUBLE
8470: LD_INT 1
8472: DEC
8473: ST_TO_ADDR
8474: LD_INT 8
8476: PUSH
8477: FOR_TO
8478: IFFALSE 8497
// SetRestrict ( b_depot , i , state_disabled ) ;
8480: LD_INT 0
8482: PPUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: LD_INT 0
8490: PPUSH
8491: CALL_OW 324
8495: GO 8477
8497: POP
8498: POP
// end ;
8499: PPOPN 1
8501: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8502: LD_EXP 38
8506: PUSH
8507: CALL 8712 0 0
8511: AND
8512: PUSH
8513: LD_OWVAR 4
8517: AND
8518: IFFALSE 8709
8520: GO 8522
8522: DISABLE
8523: LD_INT 0
8525: PPUSH
8526: PPUSH
// begin canWin := false ;
8527: LD_ADDR_VAR 0 2
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// if not HasPower ( your_side ) then
8535: LD_OWVAR 2
8539: PPUSH
8540: CALL 8752 0 1
8544: NOT
8545: IFFALSE 8556
// begin Multiplayer_Loose_Message ;
8547: CALL_OW 521
// enable ( mpLose ) ;
8551: LD_INT 102
8553: ENABLE_MARKED
// end else
8554: GO 8709
// begin canWin := true ;
8556: LD_ADDR_VAR 0 2
8560: PUSH
8561: LD_INT 1
8563: ST_TO_ADDR
// for i := 1 to 8 do
8564: LD_ADDR_VAR 0 1
8568: PUSH
8569: DOUBLE
8570: LD_INT 1
8572: DEC
8573: ST_TO_ADDR
8574: LD_INT 8
8576: PUSH
8577: FOR_TO
8578: IFFALSE 8695
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8580: LD_EXP 7
8584: PUSH
8585: LD_VAR 0 1
8589: ARRAY
8590: PUSH
8591: LD_VAR 0 1
8595: PPUSH
8596: CALL_OW 108
8600: AND
8601: PUSH
8602: LD_VAR 0 1
8606: PUSH
8607: LD_OWVAR 2
8611: NONEQUAL
8612: AND
8613: IFFALSE 8693
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8615: LD_EXP 8
8619: PUSH
8620: LD_VAR 0 1
8624: ARRAY
8625: NOT
8626: PUSH
8627: LD_EXP 8
8631: PUSH
8632: LD_VAR 0 1
8636: ARRAY
8637: PUSH
8638: LD_EXP 8
8642: PUSH
8643: LD_OWVAR 2
8647: ARRAY
8648: NONEQUAL
8649: PUSH
8650: LD_OWVAR 2
8654: PPUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 81
8664: PUSH
8665: LD_INT 1
8667: NONEQUAL
8668: AND
8669: OR
8670: IFFALSE 8693
// if HasPower ( i ) then
8672: LD_VAR 0 1
8676: PPUSH
8677: CALL 8752 0 1
8681: IFFALSE 8693
// begin canWin := false ;
8683: LD_ADDR_VAR 0 2
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// break ;
8691: GO 8695
// end ;
8693: GO 8577
8695: POP
8696: POP
// if canWin then
8697: LD_VAR 0 2
8701: IFFALSE 8708
// enable ( mpWin ) else
8703: LD_INT 101
8705: ENABLE_MARKED
8706: GO 8709
// enable ;
8708: ENABLE
// end ; end ;
8709: PPOPN 2
8711: END
// function CanWinLoose ; begin
8712: LD_INT 0
8714: PPUSH
// result := true ;
8715: LD_ADDR_VAR 0 1
8719: PUSH
8720: LD_INT 1
8722: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8723: CALL_OW 531
8727: PUSH
8728: CALL_OW 519
8732: PUSH
8733: LD_INT 1
8735: GREATER
8736: AND
8737: IFFALSE 8747
// result := false ;
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// end ;
8747: LD_VAR 0 1
8751: RET
// function HasPower ( i ) ; begin
8752: LD_INT 0
8754: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8755: LD_INT 22
8757: PUSH
8758: LD_VAR 0 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: LD_INT 30
8772: PUSH
8773: LD_INT 0
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 30
8782: PUSH
8783: LD_INT 1
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: LIST
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PPUSH
8799: CALL_OW 69
8803: NOT
8804: IFFALSE 8808
// exit ;
8806: GO 8873
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_INT 22
8815: PUSH
8816: LD_VAR 0 1
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 2
8827: PUSH
8828: LD_INT 21
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 33
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 33
8850: PUSH
8851: LD_INT 5
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PPUSH
8868: CALL_OW 69
8872: ST_TO_ADDR
// end ; end_of_file
8873: LD_VAR 0 2
8877: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8878: LD_INT 0
8880: PPUSH
8881: PPUSH
// if exist_mode then
8882: LD_VAR 0 2
8886: IFFALSE 8911
// unit := CreateCharacter ( prefix & ident ) else
8888: LD_ADDR_VAR 0 5
8892: PUSH
8893: LD_VAR 0 3
8897: PUSH
8898: LD_VAR 0 1
8902: STR
8903: PPUSH
8904: CALL_OW 34
8908: ST_TO_ADDR
8909: GO 8926
// unit := NewCharacter ( ident ) ;
8911: LD_ADDR_VAR 0 5
8915: PUSH
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 25
8925: ST_TO_ADDR
// result := unit ;
8926: LD_ADDR_VAR 0 4
8930: PUSH
8931: LD_VAR 0 5
8935: ST_TO_ADDR
// end ;
8936: LD_VAR 0 4
8940: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8941: LD_INT 0
8943: PPUSH
8944: PPUSH
// if not side or not nation then
8945: LD_VAR 0 1
8949: NOT
8950: PUSH
8951: LD_VAR 0 2
8955: NOT
8956: OR
8957: IFFALSE 8961
// exit ;
8959: GO 9729
// case nation of nation_american :
8961: LD_VAR 0 2
8965: PUSH
8966: LD_INT 1
8968: DOUBLE
8969: EQUAL
8970: IFTRUE 8974
8972: GO 9188
8974: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8975: LD_ADDR_VAR 0 4
8979: PUSH
8980: LD_INT 35
8982: PUSH
8983: LD_INT 45
8985: PUSH
8986: LD_INT 46
8988: PUSH
8989: LD_INT 47
8991: PUSH
8992: LD_INT 82
8994: PUSH
8995: LD_INT 83
8997: PUSH
8998: LD_INT 84
9000: PUSH
9001: LD_INT 85
9003: PUSH
9004: LD_INT 86
9006: PUSH
9007: LD_INT 1
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 15
9018: PUSH
9019: LD_INT 16
9021: PUSH
9022: LD_INT 7
9024: PUSH
9025: LD_INT 12
9027: PUSH
9028: LD_INT 13
9030: PUSH
9031: LD_INT 10
9033: PUSH
9034: LD_INT 14
9036: PUSH
9037: LD_INT 20
9039: PUSH
9040: LD_INT 21
9042: PUSH
9043: LD_INT 22
9045: PUSH
9046: LD_INT 25
9048: PUSH
9049: LD_INT 32
9051: PUSH
9052: LD_INT 27
9054: PUSH
9055: LD_INT 36
9057: PUSH
9058: LD_INT 69
9060: PUSH
9061: LD_INT 39
9063: PUSH
9064: LD_INT 34
9066: PUSH
9067: LD_INT 40
9069: PUSH
9070: LD_INT 48
9072: PUSH
9073: LD_INT 49
9075: PUSH
9076: LD_INT 50
9078: PUSH
9079: LD_INT 51
9081: PUSH
9082: LD_INT 52
9084: PUSH
9085: LD_INT 53
9087: PUSH
9088: LD_INT 54
9090: PUSH
9091: LD_INT 55
9093: PUSH
9094: LD_INT 56
9096: PUSH
9097: LD_INT 57
9099: PUSH
9100: LD_INT 58
9102: PUSH
9103: LD_INT 59
9105: PUSH
9106: LD_INT 60
9108: PUSH
9109: LD_INT 61
9111: PUSH
9112: LD_INT 62
9114: PUSH
9115: LD_INT 80
9117: PUSH
9118: LD_INT 82
9120: PUSH
9121: LD_INT 83
9123: PUSH
9124: LD_INT 84
9126: PUSH
9127: LD_INT 85
9129: PUSH
9130: LD_INT 86
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: ST_TO_ADDR
9186: GO 9653
9188: LD_INT 2
9190: DOUBLE
9191: EQUAL
9192: IFTRUE 9196
9194: GO 9422
9196: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9197: LD_ADDR_VAR 0 4
9201: PUSH
9202: LD_INT 35
9204: PUSH
9205: LD_INT 45
9207: PUSH
9208: LD_INT 46
9210: PUSH
9211: LD_INT 47
9213: PUSH
9214: LD_INT 82
9216: PUSH
9217: LD_INT 83
9219: PUSH
9220: LD_INT 84
9222: PUSH
9223: LD_INT 85
9225: PUSH
9226: LD_INT 87
9228: PUSH
9229: LD_INT 70
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: LD_INT 11
9237: PUSH
9238: LD_INT 3
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: LD_INT 6
9249: PUSH
9250: LD_INT 15
9252: PUSH
9253: LD_INT 18
9255: PUSH
9256: LD_INT 7
9258: PUSH
9259: LD_INT 17
9261: PUSH
9262: LD_INT 8
9264: PUSH
9265: LD_INT 20
9267: PUSH
9268: LD_INT 21
9270: PUSH
9271: LD_INT 22
9273: PUSH
9274: LD_INT 72
9276: PUSH
9277: LD_INT 26
9279: PUSH
9280: LD_INT 69
9282: PUSH
9283: LD_INT 39
9285: PUSH
9286: LD_INT 40
9288: PUSH
9289: LD_INT 41
9291: PUSH
9292: LD_INT 42
9294: PUSH
9295: LD_INT 43
9297: PUSH
9298: LD_INT 48
9300: PUSH
9301: LD_INT 49
9303: PUSH
9304: LD_INT 50
9306: PUSH
9307: LD_INT 51
9309: PUSH
9310: LD_INT 52
9312: PUSH
9313: LD_INT 53
9315: PUSH
9316: LD_INT 54
9318: PUSH
9319: LD_INT 55
9321: PUSH
9322: LD_INT 56
9324: PUSH
9325: LD_INT 60
9327: PUSH
9328: LD_INT 61
9330: PUSH
9331: LD_INT 62
9333: PUSH
9334: LD_INT 66
9336: PUSH
9337: LD_INT 67
9339: PUSH
9340: LD_INT 68
9342: PUSH
9343: LD_INT 81
9345: PUSH
9346: LD_INT 82
9348: PUSH
9349: LD_INT 83
9351: PUSH
9352: LD_INT 84
9354: PUSH
9355: LD_INT 85
9357: PUSH
9358: LD_INT 87
9360: PUSH
9361: LD_INT 88
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: ST_TO_ADDR
9420: GO 9653
9422: LD_INT 3
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9652
9430: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9431: LD_ADDR_VAR 0 4
9435: PUSH
9436: LD_INT 46
9438: PUSH
9439: LD_INT 47
9441: PUSH
9442: LD_INT 1
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: LD_INT 82
9450: PUSH
9451: LD_INT 83
9453: PUSH
9454: LD_INT 84
9456: PUSH
9457: LD_INT 85
9459: PUSH
9460: LD_INT 86
9462: PUSH
9463: LD_INT 11
9465: PUSH
9466: LD_INT 9
9468: PUSH
9469: LD_INT 20
9471: PUSH
9472: LD_INT 19
9474: PUSH
9475: LD_INT 21
9477: PUSH
9478: LD_INT 24
9480: PUSH
9481: LD_INT 22
9483: PUSH
9484: LD_INT 25
9486: PUSH
9487: LD_INT 28
9489: PUSH
9490: LD_INT 29
9492: PUSH
9493: LD_INT 30
9495: PUSH
9496: LD_INT 31
9498: PUSH
9499: LD_INT 37
9501: PUSH
9502: LD_INT 38
9504: PUSH
9505: LD_INT 32
9507: PUSH
9508: LD_INT 27
9510: PUSH
9511: LD_INT 33
9513: PUSH
9514: LD_INT 69
9516: PUSH
9517: LD_INT 39
9519: PUSH
9520: LD_INT 34
9522: PUSH
9523: LD_INT 40
9525: PUSH
9526: LD_INT 71
9528: PUSH
9529: LD_INT 23
9531: PUSH
9532: LD_INT 44
9534: PUSH
9535: LD_INT 48
9537: PUSH
9538: LD_INT 49
9540: PUSH
9541: LD_INT 50
9543: PUSH
9544: LD_INT 51
9546: PUSH
9547: LD_INT 52
9549: PUSH
9550: LD_INT 53
9552: PUSH
9553: LD_INT 54
9555: PUSH
9556: LD_INT 55
9558: PUSH
9559: LD_INT 56
9561: PUSH
9562: LD_INT 57
9564: PUSH
9565: LD_INT 58
9567: PUSH
9568: LD_INT 59
9570: PUSH
9571: LD_INT 63
9573: PUSH
9574: LD_INT 64
9576: PUSH
9577: LD_INT 65
9579: PUSH
9580: LD_INT 82
9582: PUSH
9583: LD_INT 83
9585: PUSH
9586: LD_INT 84
9588: PUSH
9589: LD_INT 85
9591: PUSH
9592: LD_INT 86
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: ST_TO_ADDR
9650: GO 9653
9652: POP
// if state > - 1 and state < 3 then
9653: LD_VAR 0 3
9657: PUSH
9658: LD_INT 1
9660: NEG
9661: GREATER
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: LD_INT 3
9670: LESS
9671: AND
9672: IFFALSE 9729
// for i in result do
9674: LD_ADDR_VAR 0 5
9678: PUSH
9679: LD_VAR 0 4
9683: PUSH
9684: FOR_IN
9685: IFFALSE 9727
// if GetTech ( i , side ) <> state then
9687: LD_VAR 0 5
9691: PPUSH
9692: LD_VAR 0 1
9696: PPUSH
9697: CALL_OW 321
9701: PUSH
9702: LD_VAR 0 3
9706: NONEQUAL
9707: IFFALSE 9725
// result := result diff i ;
9709: LD_ADDR_VAR 0 4
9713: PUSH
9714: LD_VAR 0 4
9718: PUSH
9719: LD_VAR 0 5
9723: DIFF
9724: ST_TO_ADDR
9725: GO 9684
9727: POP
9728: POP
// end ;
9729: LD_VAR 0 4
9733: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9734: LD_INT 0
9736: PPUSH
9737: PPUSH
9738: PPUSH
// result := true ;
9739: LD_ADDR_VAR 0 3
9743: PUSH
9744: LD_INT 1
9746: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9747: LD_ADDR_VAR 0 5
9751: PUSH
9752: LD_VAR 0 2
9756: PPUSH
9757: CALL_OW 480
9761: ST_TO_ADDR
// if not tmp then
9762: LD_VAR 0 5
9766: NOT
9767: IFFALSE 9771
// exit ;
9769: GO 9820
// for i in tmp do
9771: LD_ADDR_VAR 0 4
9775: PUSH
9776: LD_VAR 0 5
9780: PUSH
9781: FOR_IN
9782: IFFALSE 9818
// if GetTech ( i , side ) <> state_researched then
9784: LD_VAR 0 4
9788: PPUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 321
9798: PUSH
9799: LD_INT 2
9801: NONEQUAL
9802: IFFALSE 9816
// begin result := false ;
9804: LD_ADDR_VAR 0 3
9808: PUSH
9809: LD_INT 0
9811: ST_TO_ADDR
// exit ;
9812: POP
9813: POP
9814: GO 9820
// end ;
9816: GO 9781
9818: POP
9819: POP
// end ;
9820: LD_VAR 0 3
9824: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9825: LD_INT 0
9827: PPUSH
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9840: LD_VAR 0 1
9844: NOT
9845: PUSH
9846: LD_VAR 0 1
9850: PPUSH
9851: CALL_OW 257
9855: PUSH
9856: LD_INT 9
9858: NONEQUAL
9859: OR
9860: IFFALSE 9864
// exit ;
9862: GO 10437
// side := GetSide ( unit ) ;
9864: LD_ADDR_VAR 0 9
9868: PUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 255
9878: ST_TO_ADDR
// tech_space := tech_spacanom ;
9879: LD_ADDR_VAR 0 12
9883: PUSH
9884: LD_INT 29
9886: ST_TO_ADDR
// tech_time := tech_taurad ;
9887: LD_ADDR_VAR 0 13
9891: PUSH
9892: LD_INT 28
9894: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9895: LD_ADDR_VAR 0 11
9899: PUSH
9900: LD_VAR 0 1
9904: PPUSH
9905: CALL_OW 310
9909: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9910: LD_VAR 0 11
9914: PPUSH
9915: CALL_OW 247
9919: PUSH
9920: LD_INT 2
9922: EQUAL
9923: IFFALSE 9927
// exit ;
9925: GO 10437
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9927: LD_ADDR_VAR 0 8
9931: PUSH
9932: LD_INT 81
9934: PUSH
9935: LD_VAR 0 9
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 3
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: CALL_OW 69
9969: ST_TO_ADDR
// if not tmp then
9970: LD_VAR 0 8
9974: NOT
9975: IFFALSE 9979
// exit ;
9977: GO 10437
// if in_unit then
9979: LD_VAR 0 11
9983: IFFALSE 10007
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9985: LD_ADDR_VAR 0 10
9989: PUSH
9990: LD_VAR 0 8
9994: PPUSH
9995: LD_VAR 0 11
9999: PPUSH
10000: CALL_OW 74
10004: ST_TO_ADDR
10005: GO 10027
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10007: LD_ADDR_VAR 0 10
10011: PUSH
10012: LD_VAR 0 8
10016: PPUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: CALL_OW 74
10026: ST_TO_ADDR
// if not enemy then
10027: LD_VAR 0 10
10031: NOT
10032: IFFALSE 10036
// exit ;
10034: GO 10437
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10036: LD_VAR 0 11
10040: PUSH
10041: LD_VAR 0 11
10045: PPUSH
10046: LD_VAR 0 10
10050: PPUSH
10051: CALL_OW 296
10055: PUSH
10056: LD_INT 13
10058: GREATER
10059: AND
10060: PUSH
10061: LD_VAR 0 1
10065: PPUSH
10066: LD_VAR 0 10
10070: PPUSH
10071: CALL_OW 296
10075: PUSH
10076: LD_INT 12
10078: GREATER
10079: OR
10080: IFFALSE 10084
// exit ;
10082: GO 10437
// missile := [ 1 ] ;
10084: LD_ADDR_VAR 0 14
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10095: LD_VAR 0 9
10099: PPUSH
10100: LD_VAR 0 12
10104: PPUSH
10105: CALL_OW 325
10109: IFFALSE 10138
// missile := Replace ( missile , missile + 1 , 2 ) ;
10111: LD_ADDR_VAR 0 14
10115: PUSH
10116: LD_VAR 0 14
10120: PPUSH
10121: LD_VAR 0 14
10125: PUSH
10126: LD_INT 1
10128: PLUS
10129: PPUSH
10130: LD_INT 2
10132: PPUSH
10133: CALL_OW 1
10137: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10138: LD_VAR 0 9
10142: PPUSH
10143: LD_VAR 0 13
10147: PPUSH
10148: CALL_OW 325
10152: PUSH
10153: LD_VAR 0 10
10157: PPUSH
10158: CALL_OW 255
10162: PPUSH
10163: LD_VAR 0 13
10167: PPUSH
10168: CALL_OW 325
10172: NOT
10173: AND
10174: IFFALSE 10203
// missile := Replace ( missile , missile + 1 , 3 ) ;
10176: LD_ADDR_VAR 0 14
10180: PUSH
10181: LD_VAR 0 14
10185: PPUSH
10186: LD_VAR 0 14
10190: PUSH
10191: LD_INT 1
10193: PLUS
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 1
10202: ST_TO_ADDR
// if missile < 2 then
10203: LD_VAR 0 14
10207: PUSH
10208: LD_INT 2
10210: LESS
10211: IFFALSE 10215
// exit ;
10213: GO 10437
// x := GetX ( enemy ) ;
10215: LD_ADDR_VAR 0 4
10219: PUSH
10220: LD_VAR 0 10
10224: PPUSH
10225: CALL_OW 250
10229: ST_TO_ADDR
// y := GetY ( enemy ) ;
10230: LD_ADDR_VAR 0 5
10234: PUSH
10235: LD_VAR 0 10
10239: PPUSH
10240: CALL_OW 251
10244: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10245: LD_ADDR_VAR 0 6
10249: PUSH
10250: LD_VAR 0 4
10254: PUSH
10255: LD_INT 1
10257: NEG
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: CALL_OW 12
10266: PLUS
10267: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10268: LD_ADDR_VAR 0 7
10272: PUSH
10273: LD_VAR 0 5
10277: PUSH
10278: LD_INT 1
10280: NEG
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 12
10289: PLUS
10290: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10291: LD_VAR 0 6
10295: PPUSH
10296: LD_VAR 0 7
10300: PPUSH
10301: CALL_OW 488
10305: NOT
10306: IFFALSE 10328
// begin _x := x ;
10308: LD_ADDR_VAR 0 6
10312: PUSH
10313: LD_VAR 0 4
10317: ST_TO_ADDR
// _y := y ;
10318: LD_ADDR_VAR 0 7
10322: PUSH
10323: LD_VAR 0 5
10327: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10328: LD_ADDR_VAR 0 3
10332: PUSH
10333: LD_INT 1
10335: PPUSH
10336: LD_VAR 0 14
10340: PPUSH
10341: CALL_OW 12
10345: ST_TO_ADDR
// case i of 1 :
10346: LD_VAR 0 3
10350: PUSH
10351: LD_INT 1
10353: DOUBLE
10354: EQUAL
10355: IFTRUE 10359
10357: GO 10376
10359: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10360: LD_VAR 0 1
10364: PPUSH
10365: LD_VAR 0 10
10369: PPUSH
10370: CALL_OW 115
10374: GO 10437
10376: LD_INT 2
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10406
10384: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10385: LD_VAR 0 1
10389: PPUSH
10390: LD_VAR 0 6
10394: PPUSH
10395: LD_VAR 0 7
10399: PPUSH
10400: CALL_OW 153
10404: GO 10437
10406: LD_INT 3
10408: DOUBLE
10409: EQUAL
10410: IFTRUE 10414
10412: GO 10436
10414: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10415: LD_VAR 0 1
10419: PPUSH
10420: LD_VAR 0 6
10424: PPUSH
10425: LD_VAR 0 7
10429: PPUSH
10430: CALL_OW 154
10434: GO 10437
10436: POP
// end ;
10437: LD_VAR 0 2
10441: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10442: LD_INT 0
10444: PPUSH
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
// if not unit or not building then
10450: LD_VAR 0 1
10454: NOT
10455: PUSH
10456: LD_VAR 0 2
10460: NOT
10461: OR
10462: IFFALSE 10466
// exit ;
10464: GO 10624
// x := GetX ( building ) ;
10466: LD_ADDR_VAR 0 5
10470: PUSH
10471: LD_VAR 0 2
10475: PPUSH
10476: CALL_OW 250
10480: ST_TO_ADDR
// y := GetY ( building ) ;
10481: LD_ADDR_VAR 0 6
10485: PUSH
10486: LD_VAR 0 2
10490: PPUSH
10491: CALL_OW 251
10495: ST_TO_ADDR
// for i = 0 to 5 do
10496: LD_ADDR_VAR 0 4
10500: PUSH
10501: DOUBLE
10502: LD_INT 0
10504: DEC
10505: ST_TO_ADDR
10506: LD_INT 5
10508: PUSH
10509: FOR_TO
10510: IFFALSE 10622
// begin _x := ShiftX ( x , i , 3 ) ;
10512: LD_ADDR_VAR 0 7
10516: PUSH
10517: LD_VAR 0 5
10521: PPUSH
10522: LD_VAR 0 4
10526: PPUSH
10527: LD_INT 3
10529: PPUSH
10530: CALL_OW 272
10534: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10535: LD_ADDR_VAR 0 8
10539: PUSH
10540: LD_VAR 0 6
10544: PPUSH
10545: LD_VAR 0 4
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: CALL_OW 273
10557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10558: LD_VAR 0 7
10562: PPUSH
10563: LD_VAR 0 8
10567: PPUSH
10568: CALL_OW 488
10572: NOT
10573: IFFALSE 10577
// continue ;
10575: GO 10509
// if HexInfo ( _x , _y ) = 0 then
10577: LD_VAR 0 7
10581: PPUSH
10582: LD_VAR 0 8
10586: PPUSH
10587: CALL_OW 428
10591: PUSH
10592: LD_INT 0
10594: EQUAL
10595: IFFALSE 10620
// begin ComMoveXY ( unit , _x , _y ) ;
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_VAR 0 7
10606: PPUSH
10607: LD_VAR 0 8
10611: PPUSH
10612: CALL_OW 111
// exit ;
10616: POP
10617: POP
10618: GO 10624
// end ; end ;
10620: GO 10509
10622: POP
10623: POP
// end ;
10624: LD_VAR 0 3
10628: RET
// export function ScanBase ( side , base_area ) ; begin
10629: LD_INT 0
10631: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10632: LD_ADDR_VAR 0 3
10636: PUSH
10637: LD_VAR 0 2
10641: PPUSH
10642: LD_INT 81
10644: PUSH
10645: LD_VAR 0 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PPUSH
10654: CALL_OW 70
10658: ST_TO_ADDR
// end ;
10659: LD_VAR 0 3
10663: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10664: LD_INT 0
10666: PPUSH
10667: PPUSH
10668: PPUSH
10669: PPUSH
// result := false ;
10670: LD_ADDR_VAR 0 2
10674: PUSH
10675: LD_INT 0
10677: ST_TO_ADDR
// side := GetSide ( unit ) ;
10678: LD_ADDR_VAR 0 3
10682: PUSH
10683: LD_VAR 0 1
10687: PPUSH
10688: CALL_OW 255
10692: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10693: LD_ADDR_VAR 0 4
10697: PUSH
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 248
10707: ST_TO_ADDR
// case nat of 1 :
10708: LD_VAR 0 4
10712: PUSH
10713: LD_INT 1
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10732
10721: POP
// tech := tech_lassight ; 2 :
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_INT 12
10729: ST_TO_ADDR
10730: GO 10771
10732: LD_INT 2
10734: DOUBLE
10735: EQUAL
10736: IFTRUE 10740
10738: GO 10751
10740: POP
// tech := tech_mortar ; 3 :
10741: LD_ADDR_VAR 0 5
10745: PUSH
10746: LD_INT 41
10748: ST_TO_ADDR
10749: GO 10771
10751: LD_INT 3
10753: DOUBLE
10754: EQUAL
10755: IFTRUE 10759
10757: GO 10770
10759: POP
// tech := tech_bazooka ; end ;
10760: LD_ADDR_VAR 0 5
10764: PUSH
10765: LD_INT 44
10767: ST_TO_ADDR
10768: GO 10771
10770: POP
// if Researched ( side , tech ) then
10771: LD_VAR 0 3
10775: PPUSH
10776: LD_VAR 0 5
10780: PPUSH
10781: CALL_OW 325
10785: IFFALSE 10812
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 5
10794: PUSH
10795: LD_INT 8
10797: PUSH
10798: LD_INT 9
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: LD_VAR 0 4
10810: ARRAY
10811: ST_TO_ADDR
// end ;
10812: LD_VAR 0 2
10816: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10817: LD_INT 0
10819: PPUSH
10820: PPUSH
10821: PPUSH
// if not mines then
10822: LD_VAR 0 2
10826: NOT
10827: IFFALSE 10831
// exit ;
10829: GO 10975
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10831: LD_ADDR_VAR 0 5
10835: PUSH
10836: LD_INT 81
10838: PUSH
10839: LD_VAR 0 1
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: LD_INT 21
10853: PUSH
10854: LD_INT 3
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PPUSH
10869: CALL_OW 69
10873: ST_TO_ADDR
// for i in mines do
10874: LD_ADDR_VAR 0 4
10878: PUSH
10879: LD_VAR 0 2
10883: PUSH
10884: FOR_IN
10885: IFFALSE 10973
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10887: LD_VAR 0 4
10891: PUSH
10892: LD_INT 1
10894: ARRAY
10895: PPUSH
10896: LD_VAR 0 4
10900: PUSH
10901: LD_INT 2
10903: ARRAY
10904: PPUSH
10905: CALL_OW 458
10909: NOT
10910: IFFALSE 10914
// continue ;
10912: GO 10884
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10914: LD_VAR 0 4
10918: PUSH
10919: LD_INT 1
10921: ARRAY
10922: PPUSH
10923: LD_VAR 0 4
10927: PUSH
10928: LD_INT 2
10930: ARRAY
10931: PPUSH
10932: CALL_OW 428
10936: PUSH
10937: LD_VAR 0 5
10941: IN
10942: IFFALSE 10971
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10944: LD_VAR 0 4
10948: PUSH
10949: LD_INT 1
10951: ARRAY
10952: PPUSH
10953: LD_VAR 0 4
10957: PUSH
10958: LD_INT 2
10960: ARRAY
10961: PPUSH
10962: LD_VAR 0 1
10966: PPUSH
10967: CALL_OW 456
// end ;
10971: GO 10884
10973: POP
10974: POP
// end ;
10975: LD_VAR 0 3
10979: RET
// export function Count ( array ) ; begin
10980: LD_INT 0
10982: PPUSH
// result := array + 0 ;
10983: LD_ADDR_VAR 0 2
10987: PUSH
10988: LD_VAR 0 1
10992: PUSH
10993: LD_INT 0
10995: PLUS
10996: ST_TO_ADDR
// end ;
10997: LD_VAR 0 2
11001: RET
// export function IsEmpty ( building ) ; begin
11002: LD_INT 0
11004: PPUSH
// if not building then
11005: LD_VAR 0 1
11009: NOT
11010: IFFALSE 11014
// exit ;
11012: GO 11057
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11014: LD_ADDR_VAR 0 2
11018: PUSH
11019: LD_VAR 0 1
11023: PUSH
11024: LD_INT 22
11026: PUSH
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL_OW 255
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 58
11043: PUSH
11044: EMPTY
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 69
11055: IN
11056: ST_TO_ADDR
// end ;
11057: LD_VAR 0 2
11061: RET
// export function IsNotFull ( building ) ; var places ; begin
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
// if not building then
11066: LD_VAR 0 1
11070: NOT
11071: IFFALSE 11075
// exit ;
11073: GO 11103
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11075: LD_ADDR_VAR 0 2
11079: PUSH
11080: LD_VAR 0 1
11084: PPUSH
11085: LD_INT 3
11087: PUSH
11088: LD_INT 62
11090: PUSH
11091: EMPTY
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 72
11102: ST_TO_ADDR
// end ;
11103: LD_VAR 0 2
11107: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11108: LD_INT 0
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
// tmp := [ ] ;
11114: LD_ADDR_VAR 0 3
11118: PUSH
11119: EMPTY
11120: ST_TO_ADDR
// list := [ ] ;
11121: LD_ADDR_VAR 0 5
11125: PUSH
11126: EMPTY
11127: ST_TO_ADDR
// for i = 16 to 25 do
11128: LD_ADDR_VAR 0 4
11132: PUSH
11133: DOUBLE
11134: LD_INT 16
11136: DEC
11137: ST_TO_ADDR
11138: LD_INT 25
11140: PUSH
11141: FOR_TO
11142: IFFALSE 11215
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11144: LD_ADDR_VAR 0 3
11148: PUSH
11149: LD_VAR 0 3
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 255
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 91
11173: PUSH
11174: LD_VAR 0 1
11178: PUSH
11179: LD_INT 6
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 30
11189: PUSH
11190: LD_VAR 0 4
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: PPUSH
11207: CALL_OW 69
11211: ADD
11212: ST_TO_ADDR
11213: GO 11141
11215: POP
11216: POP
// for i = 1 to tmp do
11217: LD_ADDR_VAR 0 4
11221: PUSH
11222: DOUBLE
11223: LD_INT 1
11225: DEC
11226: ST_TO_ADDR
11227: LD_VAR 0 3
11231: PUSH
11232: FOR_TO
11233: IFFALSE 11321
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11235: LD_ADDR_VAR 0 5
11239: PUSH
11240: LD_VAR 0 5
11244: PUSH
11245: LD_VAR 0 3
11249: PUSH
11250: LD_VAR 0 4
11254: ARRAY
11255: PPUSH
11256: CALL_OW 266
11260: PUSH
11261: LD_VAR 0 3
11265: PUSH
11266: LD_VAR 0 4
11270: ARRAY
11271: PPUSH
11272: CALL_OW 250
11276: PUSH
11277: LD_VAR 0 3
11281: PUSH
11282: LD_VAR 0 4
11286: ARRAY
11287: PPUSH
11288: CALL_OW 251
11292: PUSH
11293: LD_VAR 0 3
11297: PUSH
11298: LD_VAR 0 4
11302: ARRAY
11303: PPUSH
11304: CALL_OW 254
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: ADD
11318: ST_TO_ADDR
11319: GO 11232
11321: POP
11322: POP
// result := list ;
11323: LD_ADDR_VAR 0 2
11327: PUSH
11328: LD_VAR 0 5
11332: ST_TO_ADDR
// end ;
11333: LD_VAR 0 2
11337: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11338: LD_INT 0
11340: PPUSH
11341: PPUSH
11342: PPUSH
11343: PPUSH
11344: PPUSH
11345: PPUSH
11346: PPUSH
// if not factory then
11347: LD_VAR 0 1
11351: NOT
11352: IFFALSE 11356
// exit ;
11354: GO 11949
// if control = control_apeman then
11356: LD_VAR 0 4
11360: PUSH
11361: LD_INT 5
11363: EQUAL
11364: IFFALSE 11473
// begin tmp := UnitsInside ( factory ) ;
11366: LD_ADDR_VAR 0 8
11370: PUSH
11371: LD_VAR 0 1
11375: PPUSH
11376: CALL_OW 313
11380: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11381: LD_VAR 0 8
11385: PPUSH
11386: LD_INT 25
11388: PUSH
11389: LD_INT 12
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PPUSH
11396: CALL_OW 72
11400: NOT
11401: IFFALSE 11411
// control := control_manual ;
11403: LD_ADDR_VAR 0 4
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11411: LD_ADDR_VAR 0 8
11415: PUSH
11416: LD_VAR 0 1
11420: PPUSH
11421: CALL 11108 0 1
11425: ST_TO_ADDR
// if tmp then
11426: LD_VAR 0 8
11430: IFFALSE 11473
// begin for i in tmp do
11432: LD_ADDR_VAR 0 7
11436: PUSH
11437: LD_VAR 0 8
11441: PUSH
11442: FOR_IN
11443: IFFALSE 11471
// if i [ 1 ] = b_ext_radio then
11445: LD_VAR 0 7
11449: PUSH
11450: LD_INT 1
11452: ARRAY
11453: PUSH
11454: LD_INT 22
11456: EQUAL
11457: IFFALSE 11469
// begin control := control_remote ;
11459: LD_ADDR_VAR 0 4
11463: PUSH
11464: LD_INT 2
11466: ST_TO_ADDR
// break ;
11467: GO 11471
// end ;
11469: GO 11442
11471: POP
11472: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11473: LD_VAR 0 1
11477: PPUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_VAR 0 4
11492: PPUSH
11493: LD_VAR 0 5
11497: PPUSH
11498: CALL_OW 448
11502: IFFALSE 11537
// begin result := [ chassis , engine , control , weapon ] ;
11504: LD_ADDR_VAR 0 6
11508: PUSH
11509: LD_VAR 0 2
11513: PUSH
11514: LD_VAR 0 3
11518: PUSH
11519: LD_VAR 0 4
11523: PUSH
11524: LD_VAR 0 5
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: ST_TO_ADDR
// exit ;
11535: GO 11949
// end ; _chassis := AvailableChassisList ( factory ) ;
11537: LD_ADDR_VAR 0 9
11541: PUSH
11542: LD_VAR 0 1
11546: PPUSH
11547: CALL_OW 475
11551: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11552: LD_ADDR_VAR 0 11
11556: PUSH
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 476
11566: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11567: LD_ADDR_VAR 0 12
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 477
11581: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11582: LD_ADDR_VAR 0 10
11586: PUSH
11587: LD_VAR 0 1
11591: PPUSH
11592: CALL_OW 478
11596: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11597: LD_VAR 0 9
11601: NOT
11602: PUSH
11603: LD_VAR 0 11
11607: NOT
11608: OR
11609: PUSH
11610: LD_VAR 0 12
11614: NOT
11615: OR
11616: PUSH
11617: LD_VAR 0 10
11621: NOT
11622: OR
11623: IFFALSE 11658
// begin result := [ chassis , engine , control , weapon ] ;
11625: LD_ADDR_VAR 0 6
11629: PUSH
11630: LD_VAR 0 2
11634: PUSH
11635: LD_VAR 0 3
11639: PUSH
11640: LD_VAR 0 4
11644: PUSH
11645: LD_VAR 0 5
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: ST_TO_ADDR
// exit ;
11656: GO 11949
// end ; if not chassis in _chassis then
11658: LD_VAR 0 2
11662: PUSH
11663: LD_VAR 0 9
11667: IN
11668: NOT
11669: IFFALSE 11695
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: LD_VAR 0 9
11680: PUSH
11681: LD_INT 1
11683: PPUSH
11684: LD_VAR 0 9
11688: PPUSH
11689: CALL_OW 12
11693: ARRAY
11694: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11695: LD_VAR 0 2
11699: PPUSH
11700: LD_VAR 0 3
11704: PPUSH
11705: CALL 11954 0 2
11709: NOT
11710: IFFALSE 11769
// repeat engine := _engine [ 1 ] ;
11712: LD_ADDR_VAR 0 3
11716: PUSH
11717: LD_VAR 0 11
11721: PUSH
11722: LD_INT 1
11724: ARRAY
11725: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11726: LD_ADDR_VAR 0 11
11730: PUSH
11731: LD_VAR 0 11
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 3
11743: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11744: LD_VAR 0 2
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: CALL 11954 0 2
11758: PUSH
11759: LD_VAR 0 11
11763: PUSH
11764: EMPTY
11765: EQUAL
11766: OR
11767: IFFALSE 11712
// if not control in _control then
11769: LD_VAR 0 4
11773: PUSH
11774: LD_VAR 0 12
11778: IN
11779: NOT
11780: IFFALSE 11806
// control := _control [ rand ( 1 , _control ) ] ;
11782: LD_ADDR_VAR 0 4
11786: PUSH
11787: LD_VAR 0 12
11791: PUSH
11792: LD_INT 1
11794: PPUSH
11795: LD_VAR 0 12
11799: PPUSH
11800: CALL_OW 12
11804: ARRAY
11805: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11806: LD_VAR 0 2
11810: PPUSH
11811: LD_VAR 0 5
11815: PPUSH
11816: CALL 12174 0 2
11820: NOT
11821: IFFALSE 11880
// repeat weapon := _weapon [ 1 ] ;
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_VAR 0 10
11832: PUSH
11833: LD_INT 1
11835: ARRAY
11836: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11837: LD_ADDR_VAR 0 10
11841: PUSH
11842: LD_VAR 0 10
11846: PPUSH
11847: LD_INT 1
11849: PPUSH
11850: CALL_OW 3
11854: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11855: LD_VAR 0 2
11859: PPUSH
11860: LD_VAR 0 5
11864: PPUSH
11865: CALL 12174 0 2
11869: PUSH
11870: LD_VAR 0 10
11874: PUSH
11875: EMPTY
11876: EQUAL
11877: OR
11878: IFFALSE 11823
// result := [ ] ;
11880: LD_ADDR_VAR 0 6
11884: PUSH
11885: EMPTY
11886: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11887: LD_VAR 0 1
11891: PPUSH
11892: LD_VAR 0 2
11896: PPUSH
11897: LD_VAR 0 3
11901: PPUSH
11902: LD_VAR 0 4
11906: PPUSH
11907: LD_VAR 0 5
11911: PPUSH
11912: CALL_OW 448
11916: IFFALSE 11949
// result := [ chassis , engine , control , weapon ] ;
11918: LD_ADDR_VAR 0 6
11922: PUSH
11923: LD_VAR 0 2
11927: PUSH
11928: LD_VAR 0 3
11932: PUSH
11933: LD_VAR 0 4
11937: PUSH
11938: LD_VAR 0 5
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: ST_TO_ADDR
// end ;
11949: LD_VAR 0 6
11953: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11954: LD_INT 0
11956: PPUSH
// if not chassis or not engine then
11957: LD_VAR 0 1
11961: NOT
11962: PUSH
11963: LD_VAR 0 2
11967: NOT
11968: OR
11969: IFFALSE 11973
// exit ;
11971: GO 12169
// case engine of engine_solar :
11973: LD_VAR 0 2
11977: PUSH
11978: LD_INT 2
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 12024
11986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11987: LD_ADDR_VAR 0 3
11991: PUSH
11992: LD_INT 11
11994: PUSH
11995: LD_INT 12
11997: PUSH
11998: LD_INT 13
12000: PUSH
12001: LD_INT 14
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: ST_TO_ADDR
12022: GO 12153
12024: LD_INT 1
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12094
12032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12033: LD_ADDR_VAR 0 3
12037: PUSH
12038: LD_INT 11
12040: PUSH
12041: LD_INT 12
12043: PUSH
12044: LD_INT 13
12046: PUSH
12047: LD_INT 14
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: LD_INT 2
12055: PUSH
12056: LD_INT 3
12058: PUSH
12059: LD_INT 4
12061: PUSH
12062: LD_INT 5
12064: PUSH
12065: LD_INT 21
12067: PUSH
12068: LD_INT 23
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: LD_INT 24
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: ST_TO_ADDR
12092: GO 12153
12094: LD_INT 3
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 12152
12102: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12103: LD_ADDR_VAR 0 3
12107: PUSH
12108: LD_INT 13
12110: PUSH
12111: LD_INT 14
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: LD_INT 3
12119: PUSH
12120: LD_INT 4
12122: PUSH
12123: LD_INT 5
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 22
12131: PUSH
12132: LD_INT 23
12134: PUSH
12135: LD_INT 24
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: ST_TO_ADDR
12150: GO 12153
12152: POP
// result := ( chassis in result ) ;
12153: LD_ADDR_VAR 0 3
12157: PUSH
12158: LD_VAR 0 1
12162: PUSH
12163: LD_VAR 0 3
12167: IN
12168: ST_TO_ADDR
// end ;
12169: LD_VAR 0 3
12173: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12174: LD_INT 0
12176: PPUSH
// if not chassis or not weapon then
12177: LD_VAR 0 1
12181: NOT
12182: PUSH
12183: LD_VAR 0 2
12187: NOT
12188: OR
12189: IFFALSE 12193
// exit ;
12191: GO 13253
// case weapon of us_machine_gun :
12193: LD_VAR 0 2
12197: PUSH
12198: LD_INT 2
12200: DOUBLE
12201: EQUAL
12202: IFTRUE 12206
12204: GO 12236
12206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12207: LD_ADDR_VAR 0 3
12211: PUSH
12212: LD_INT 1
12214: PUSH
12215: LD_INT 2
12217: PUSH
12218: LD_INT 3
12220: PUSH
12221: LD_INT 4
12223: PUSH
12224: LD_INT 5
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: ST_TO_ADDR
12234: GO 13237
12236: LD_INT 3
12238: DOUBLE
12239: EQUAL
12240: IFTRUE 12244
12242: GO 12274
12244: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12245: LD_ADDR_VAR 0 3
12249: PUSH
12250: LD_INT 1
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 4
12261: PUSH
12262: LD_INT 5
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: ST_TO_ADDR
12272: GO 13237
12274: LD_INT 11
12276: DOUBLE
12277: EQUAL
12278: IFTRUE 12282
12280: GO 12312
12282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12283: LD_ADDR_VAR 0 3
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 3
12296: PUSH
12297: LD_INT 4
12299: PUSH
12300: LD_INT 5
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: ST_TO_ADDR
12310: GO 13237
12312: LD_INT 4
12314: DOUBLE
12315: EQUAL
12316: IFTRUE 12320
12318: GO 12346
12320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12321: LD_ADDR_VAR 0 3
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: LD_INT 3
12331: PUSH
12332: LD_INT 4
12334: PUSH
12335: LD_INT 5
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: ST_TO_ADDR
12344: GO 13237
12346: LD_INT 5
12348: DOUBLE
12349: EQUAL
12350: IFTRUE 12354
12352: GO 12380
12354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12355: LD_ADDR_VAR 0 3
12359: PUSH
12360: LD_INT 2
12362: PUSH
12363: LD_INT 3
12365: PUSH
12366: LD_INT 4
12368: PUSH
12369: LD_INT 5
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: ST_TO_ADDR
12378: GO 13237
12380: LD_INT 9
12382: DOUBLE
12383: EQUAL
12384: IFTRUE 12388
12386: GO 12414
12388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12389: LD_ADDR_VAR 0 3
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: LD_INT 3
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: ST_TO_ADDR
12412: GO 13237
12414: LD_INT 7
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12448
12422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12423: LD_ADDR_VAR 0 3
12427: PUSH
12428: LD_INT 2
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: LD_INT 4
12436: PUSH
12437: LD_INT 5
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: ST_TO_ADDR
12446: GO 13237
12448: LD_INT 12
12450: DOUBLE
12451: EQUAL
12452: IFTRUE 12456
12454: GO 12482
12456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12457: LD_ADDR_VAR 0 3
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: LD_INT 5
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: ST_TO_ADDR
12480: GO 13237
12482: LD_INT 13
12484: DOUBLE
12485: EQUAL
12486: IFTRUE 12490
12488: GO 12516
12490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12491: LD_ADDR_VAR 0 3
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: LD_INT 3
12501: PUSH
12502: LD_INT 4
12504: PUSH
12505: LD_INT 5
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: ST_TO_ADDR
12514: GO 13237
12516: LD_INT 14
12518: DOUBLE
12519: EQUAL
12520: IFTRUE 12524
12522: GO 12542
12524: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12525: LD_ADDR_VAR 0 3
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: ST_TO_ADDR
12540: GO 13237
12542: LD_INT 6
12544: DOUBLE
12545: EQUAL
12546: IFTRUE 12550
12548: GO 12568
12550: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12551: LD_ADDR_VAR 0 3
12555: PUSH
12556: LD_INT 4
12558: PUSH
12559: LD_INT 5
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: ST_TO_ADDR
12566: GO 13237
12568: LD_INT 10
12570: DOUBLE
12571: EQUAL
12572: IFTRUE 12576
12574: GO 12594
12576: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12577: LD_ADDR_VAR 0 3
12581: PUSH
12582: LD_INT 4
12584: PUSH
12585: LD_INT 5
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: ST_TO_ADDR
12592: GO 13237
12594: LD_INT 22
12596: DOUBLE
12597: EQUAL
12598: IFTRUE 12602
12600: GO 12628
12602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12603: LD_ADDR_VAR 0 3
12607: PUSH
12608: LD_INT 11
12610: PUSH
12611: LD_INT 12
12613: PUSH
12614: LD_INT 13
12616: PUSH
12617: LD_INT 14
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: ST_TO_ADDR
12626: GO 13237
12628: LD_INT 23
12630: DOUBLE
12631: EQUAL
12632: IFTRUE 12636
12634: GO 12662
12636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12637: LD_ADDR_VAR 0 3
12641: PUSH
12642: LD_INT 11
12644: PUSH
12645: LD_INT 12
12647: PUSH
12648: LD_INT 13
12650: PUSH
12651: LD_INT 14
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: ST_TO_ADDR
12660: GO 13237
12662: LD_INT 24
12664: DOUBLE
12665: EQUAL
12666: IFTRUE 12670
12668: GO 12696
12670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12671: LD_ADDR_VAR 0 3
12675: PUSH
12676: LD_INT 11
12678: PUSH
12679: LD_INT 12
12681: PUSH
12682: LD_INT 13
12684: PUSH
12685: LD_INT 14
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: ST_TO_ADDR
12694: GO 13237
12696: LD_INT 30
12698: DOUBLE
12699: EQUAL
12700: IFTRUE 12704
12702: GO 12730
12704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12705: LD_ADDR_VAR 0 3
12709: PUSH
12710: LD_INT 11
12712: PUSH
12713: LD_INT 12
12715: PUSH
12716: LD_INT 13
12718: PUSH
12719: LD_INT 14
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: ST_TO_ADDR
12728: GO 13237
12730: LD_INT 25
12732: DOUBLE
12733: EQUAL
12734: IFTRUE 12738
12736: GO 12756
12738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12739: LD_ADDR_VAR 0 3
12743: PUSH
12744: LD_INT 13
12746: PUSH
12747: LD_INT 14
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: ST_TO_ADDR
12754: GO 13237
12756: LD_INT 27
12758: DOUBLE
12759: EQUAL
12760: IFTRUE 12764
12762: GO 12782
12764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_INT 13
12772: PUSH
12773: LD_INT 14
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: ST_TO_ADDR
12780: GO 13237
12782: LD_INT 92
12784: DOUBLE
12785: EQUAL
12786: IFTRUE 12790
12788: GO 12816
12790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_INT 11
12798: PUSH
12799: LD_INT 12
12801: PUSH
12802: LD_INT 13
12804: PUSH
12805: LD_INT 14
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: ST_TO_ADDR
12814: GO 13237
12816: LD_INT 28
12818: DOUBLE
12819: EQUAL
12820: IFTRUE 12824
12822: GO 12842
12824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12825: LD_ADDR_VAR 0 3
12829: PUSH
12830: LD_INT 13
12832: PUSH
12833: LD_INT 14
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: ST_TO_ADDR
12840: GO 13237
12842: LD_INT 29
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 12868
12850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12851: LD_ADDR_VAR 0 3
12855: PUSH
12856: LD_INT 13
12858: PUSH
12859: LD_INT 14
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: ST_TO_ADDR
12866: GO 13237
12868: LD_INT 31
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 12894
12876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12877: LD_ADDR_VAR 0 3
12881: PUSH
12882: LD_INT 13
12884: PUSH
12885: LD_INT 14
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: ST_TO_ADDR
12892: GO 13237
12894: LD_INT 26
12896: DOUBLE
12897: EQUAL
12898: IFTRUE 12902
12900: GO 12920
12902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12903: LD_ADDR_VAR 0 3
12907: PUSH
12908: LD_INT 13
12910: PUSH
12911: LD_INT 14
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: ST_TO_ADDR
12918: GO 13237
12920: LD_INT 42
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 12954
12928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12929: LD_ADDR_VAR 0 3
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 24
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: ST_TO_ADDR
12952: GO 13237
12954: LD_INT 43
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 12988
12962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12963: LD_ADDR_VAR 0 3
12967: PUSH
12968: LD_INT 21
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_INT 23
12976: PUSH
12977: LD_INT 24
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: ST_TO_ADDR
12986: GO 13237
12988: LD_INT 44
12990: DOUBLE
12991: EQUAL
12992: IFTRUE 12996
12994: GO 13022
12996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12997: LD_ADDR_VAR 0 3
13001: PUSH
13002: LD_INT 21
13004: PUSH
13005: LD_INT 22
13007: PUSH
13008: LD_INT 23
13010: PUSH
13011: LD_INT 24
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: ST_TO_ADDR
13020: GO 13237
13022: LD_INT 45
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13056
13030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13031: LD_ADDR_VAR 0 3
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_INT 23
13044: PUSH
13045: LD_INT 24
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: ST_TO_ADDR
13054: GO 13237
13056: LD_INT 49
13058: DOUBLE
13059: EQUAL
13060: IFTRUE 13064
13062: GO 13090
13064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13065: LD_ADDR_VAR 0 3
13069: PUSH
13070: LD_INT 21
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 23
13078: PUSH
13079: LD_INT 24
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: ST_TO_ADDR
13088: GO 13237
13090: LD_INT 51
13092: DOUBLE
13093: EQUAL
13094: IFTRUE 13098
13096: GO 13124
13098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13099: LD_ADDR_VAR 0 3
13103: PUSH
13104: LD_INT 21
13106: PUSH
13107: LD_INT 22
13109: PUSH
13110: LD_INT 23
13112: PUSH
13113: LD_INT 24
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: ST_TO_ADDR
13122: GO 13237
13124: LD_INT 52
13126: DOUBLE
13127: EQUAL
13128: IFTRUE 13132
13130: GO 13158
13132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13133: LD_ADDR_VAR 0 3
13137: PUSH
13138: LD_INT 21
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 23
13146: PUSH
13147: LD_INT 24
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: ST_TO_ADDR
13156: GO 13237
13158: LD_INT 53
13160: DOUBLE
13161: EQUAL
13162: IFTRUE 13166
13164: GO 13184
13166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: LD_INT 23
13174: PUSH
13175: LD_INT 24
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: ST_TO_ADDR
13182: GO 13237
13184: LD_INT 46
13186: DOUBLE
13187: EQUAL
13188: IFTRUE 13192
13190: GO 13210
13192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13193: LD_ADDR_VAR 0 3
13197: PUSH
13198: LD_INT 23
13200: PUSH
13201: LD_INT 24
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: ST_TO_ADDR
13208: GO 13237
13210: LD_INT 47
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13236
13218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13219: LD_ADDR_VAR 0 3
13223: PUSH
13224: LD_INT 23
13226: PUSH
13227: LD_INT 24
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: ST_TO_ADDR
13234: GO 13237
13236: POP
// result := ( chassis in result ) ;
13237: LD_ADDR_VAR 0 3
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: LD_VAR 0 3
13251: IN
13252: ST_TO_ADDR
// end ;
13253: LD_VAR 0 3
13257: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
13266: PPUSH
// result := array ;
13267: LD_ADDR_VAR 0 5
13271: PUSH
13272: LD_VAR 0 1
13276: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13277: LD_VAR 0 1
13281: NOT
13282: PUSH
13283: LD_VAR 0 2
13287: NOT
13288: OR
13289: PUSH
13290: LD_VAR 0 3
13294: NOT
13295: OR
13296: PUSH
13297: LD_VAR 0 2
13301: PUSH
13302: LD_VAR 0 1
13306: GREATER
13307: OR
13308: PUSH
13309: LD_VAR 0 3
13313: PUSH
13314: LD_VAR 0 1
13318: GREATER
13319: OR
13320: IFFALSE 13324
// exit ;
13322: GO 13620
// if direction then
13324: LD_VAR 0 4
13328: IFFALSE 13392
// begin d := 1 ;
13330: LD_ADDR_VAR 0 9
13334: PUSH
13335: LD_INT 1
13337: ST_TO_ADDR
// if i_from > i_to then
13338: LD_VAR 0 2
13342: PUSH
13343: LD_VAR 0 3
13347: GREATER
13348: IFFALSE 13374
// length := ( array - i_from ) + i_to else
13350: LD_ADDR_VAR 0 11
13354: PUSH
13355: LD_VAR 0 1
13359: PUSH
13360: LD_VAR 0 2
13364: MINUS
13365: PUSH
13366: LD_VAR 0 3
13370: PLUS
13371: ST_TO_ADDR
13372: GO 13390
// length := i_to - i_from ;
13374: LD_ADDR_VAR 0 11
13378: PUSH
13379: LD_VAR 0 3
13383: PUSH
13384: LD_VAR 0 2
13388: MINUS
13389: ST_TO_ADDR
// end else
13390: GO 13453
// begin d := - 1 ;
13392: LD_ADDR_VAR 0 9
13396: PUSH
13397: LD_INT 1
13399: NEG
13400: ST_TO_ADDR
// if i_from > i_to then
13401: LD_VAR 0 2
13405: PUSH
13406: LD_VAR 0 3
13410: GREATER
13411: IFFALSE 13431
// length := i_from - i_to else
13413: LD_ADDR_VAR 0 11
13417: PUSH
13418: LD_VAR 0 2
13422: PUSH
13423: LD_VAR 0 3
13427: MINUS
13428: ST_TO_ADDR
13429: GO 13453
// length := ( array - i_to ) + i_from ;
13431: LD_ADDR_VAR 0 11
13435: PUSH
13436: LD_VAR 0 1
13440: PUSH
13441: LD_VAR 0 3
13445: MINUS
13446: PUSH
13447: LD_VAR 0 2
13451: PLUS
13452: ST_TO_ADDR
// end ; if not length then
13453: LD_VAR 0 11
13457: NOT
13458: IFFALSE 13462
// exit ;
13460: GO 13620
// tmp := array ;
13462: LD_ADDR_VAR 0 10
13466: PUSH
13467: LD_VAR 0 1
13471: ST_TO_ADDR
// for i = 1 to length do
13472: LD_ADDR_VAR 0 6
13476: PUSH
13477: DOUBLE
13478: LD_INT 1
13480: DEC
13481: ST_TO_ADDR
13482: LD_VAR 0 11
13486: PUSH
13487: FOR_TO
13488: IFFALSE 13608
// begin for j = 1 to array do
13490: LD_ADDR_VAR 0 7
13494: PUSH
13495: DOUBLE
13496: LD_INT 1
13498: DEC
13499: ST_TO_ADDR
13500: LD_VAR 0 1
13504: PUSH
13505: FOR_TO
13506: IFFALSE 13594
// begin k := j + d ;
13508: LD_ADDR_VAR 0 8
13512: PUSH
13513: LD_VAR 0 7
13517: PUSH
13518: LD_VAR 0 9
13522: PLUS
13523: ST_TO_ADDR
// if k > array then
13524: LD_VAR 0 8
13528: PUSH
13529: LD_VAR 0 1
13533: GREATER
13534: IFFALSE 13544
// k := 1 ;
13536: LD_ADDR_VAR 0 8
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// if not k then
13544: LD_VAR 0 8
13548: NOT
13549: IFFALSE 13561
// k := array ;
13551: LD_ADDR_VAR 0 8
13555: PUSH
13556: LD_VAR 0 1
13560: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13561: LD_ADDR_VAR 0 10
13565: PUSH
13566: LD_VAR 0 10
13570: PPUSH
13571: LD_VAR 0 8
13575: PPUSH
13576: LD_VAR 0 1
13580: PUSH
13581: LD_VAR 0 7
13585: ARRAY
13586: PPUSH
13587: CALL_OW 1
13591: ST_TO_ADDR
// end ;
13592: GO 13505
13594: POP
13595: POP
// array := tmp ;
13596: LD_ADDR_VAR 0 1
13600: PUSH
13601: LD_VAR 0 10
13605: ST_TO_ADDR
// end ;
13606: GO 13487
13608: POP
13609: POP
// result := array ;
13610: LD_ADDR_VAR 0 5
13614: PUSH
13615: LD_VAR 0 1
13619: ST_TO_ADDR
// end ;
13620: LD_VAR 0 5
13624: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13625: LD_INT 0
13627: PPUSH
13628: PPUSH
// result := 0 ;
13629: LD_ADDR_VAR 0 3
13633: PUSH
13634: LD_INT 0
13636: ST_TO_ADDR
// if not array or not value in array then
13637: LD_VAR 0 1
13641: NOT
13642: PUSH
13643: LD_VAR 0 2
13647: PUSH
13648: LD_VAR 0 1
13652: IN
13653: NOT
13654: OR
13655: IFFALSE 13659
// exit ;
13657: GO 13713
// for i = 1 to array do
13659: LD_ADDR_VAR 0 4
13663: PUSH
13664: DOUBLE
13665: LD_INT 1
13667: DEC
13668: ST_TO_ADDR
13669: LD_VAR 0 1
13673: PUSH
13674: FOR_TO
13675: IFFALSE 13711
// if value = array [ i ] then
13677: LD_VAR 0 2
13681: PUSH
13682: LD_VAR 0 1
13686: PUSH
13687: LD_VAR 0 4
13691: ARRAY
13692: EQUAL
13693: IFFALSE 13709
// begin result := i ;
13695: LD_ADDR_VAR 0 3
13699: PUSH
13700: LD_VAR 0 4
13704: ST_TO_ADDR
// exit ;
13705: POP
13706: POP
13707: GO 13713
// end ;
13709: GO 13674
13711: POP
13712: POP
// end ;
13713: LD_VAR 0 3
13717: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13718: LD_INT 0
13720: PPUSH
// vc_chassis := chassis ;
13721: LD_ADDR_OWVAR 37
13725: PUSH
13726: LD_VAR 0 1
13730: ST_TO_ADDR
// vc_engine := engine ;
13731: LD_ADDR_OWVAR 39
13735: PUSH
13736: LD_VAR 0 2
13740: ST_TO_ADDR
// vc_control := control ;
13741: LD_ADDR_OWVAR 38
13745: PUSH
13746: LD_VAR 0 3
13750: ST_TO_ADDR
// vc_weapon := weapon ;
13751: LD_ADDR_OWVAR 40
13755: PUSH
13756: LD_VAR 0 4
13760: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13761: LD_ADDR_OWVAR 41
13765: PUSH
13766: LD_VAR 0 5
13770: ST_TO_ADDR
// end ;
13771: LD_VAR 0 6
13775: RET
// export function WantPlant ( unit ) ; var task ; begin
13776: LD_INT 0
13778: PPUSH
13779: PPUSH
// result := false ;
13780: LD_ADDR_VAR 0 2
13784: PUSH
13785: LD_INT 0
13787: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_VAR 0 1
13797: PPUSH
13798: CALL_OW 437
13802: ST_TO_ADDR
// if task then
13803: LD_VAR 0 3
13807: IFFALSE 13835
// if task [ 1 ] [ 1 ] = p then
13809: LD_VAR 0 3
13813: PUSH
13814: LD_INT 1
13816: ARRAY
13817: PUSH
13818: LD_INT 1
13820: ARRAY
13821: PUSH
13822: LD_STRING p
13824: EQUAL
13825: IFFALSE 13835
// result := true ;
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_INT 1
13834: ST_TO_ADDR
// end ;
13835: LD_VAR 0 2
13839: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13840: LD_INT 0
13842: PPUSH
13843: PPUSH
13844: PPUSH
13845: PPUSH
// if pos < 1 then
13846: LD_VAR 0 2
13850: PUSH
13851: LD_INT 1
13853: LESS
13854: IFFALSE 13858
// exit ;
13856: GO 14161
// if pos = 1 then
13858: LD_VAR 0 2
13862: PUSH
13863: LD_INT 1
13865: EQUAL
13866: IFFALSE 13899
// result := Replace ( arr , pos [ 1 ] , value ) else
13868: LD_ADDR_VAR 0 4
13872: PUSH
13873: LD_VAR 0 1
13877: PPUSH
13878: LD_VAR 0 2
13882: PUSH
13883: LD_INT 1
13885: ARRAY
13886: PPUSH
13887: LD_VAR 0 3
13891: PPUSH
13892: CALL_OW 1
13896: ST_TO_ADDR
13897: GO 14161
// begin tmp := arr ;
13899: LD_ADDR_VAR 0 6
13903: PUSH
13904: LD_VAR 0 1
13908: ST_TO_ADDR
// s_arr := [ tmp ] ;
13909: LD_ADDR_VAR 0 7
13913: PUSH
13914: LD_VAR 0 6
13918: PUSH
13919: EMPTY
13920: LIST
13921: ST_TO_ADDR
// for i = 1 to pos - 1 do
13922: LD_ADDR_VAR 0 5
13926: PUSH
13927: DOUBLE
13928: LD_INT 1
13930: DEC
13931: ST_TO_ADDR
13932: LD_VAR 0 2
13936: PUSH
13937: LD_INT 1
13939: MINUS
13940: PUSH
13941: FOR_TO
13942: IFFALSE 13987
// begin tmp := tmp [ pos [ i ] ] ;
13944: LD_ADDR_VAR 0 6
13948: PUSH
13949: LD_VAR 0 6
13953: PUSH
13954: LD_VAR 0 2
13958: PUSH
13959: LD_VAR 0 5
13963: ARRAY
13964: ARRAY
13965: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13966: LD_ADDR_VAR 0 7
13970: PUSH
13971: LD_VAR 0 7
13975: PUSH
13976: LD_VAR 0 6
13980: PUSH
13981: EMPTY
13982: LIST
13983: ADD
13984: ST_TO_ADDR
// end ;
13985: GO 13941
13987: POP
13988: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13989: LD_ADDR_VAR 0 6
13993: PUSH
13994: LD_VAR 0 6
13998: PPUSH
13999: LD_VAR 0 2
14003: PUSH
14004: LD_VAR 0 2
14008: ARRAY
14009: PPUSH
14010: LD_VAR 0 3
14014: PPUSH
14015: CALL_OW 1
14019: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14020: LD_ADDR_VAR 0 7
14024: PUSH
14025: LD_VAR 0 7
14029: PPUSH
14030: LD_VAR 0 7
14034: PPUSH
14035: LD_VAR 0 6
14039: PPUSH
14040: CALL_OW 1
14044: ST_TO_ADDR
// for i = s_arr downto 2 do
14045: LD_ADDR_VAR 0 5
14049: PUSH
14050: DOUBLE
14051: LD_VAR 0 7
14055: INC
14056: ST_TO_ADDR
14057: LD_INT 2
14059: PUSH
14060: FOR_DOWNTO
14061: IFFALSE 14145
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14063: LD_ADDR_VAR 0 6
14067: PUSH
14068: LD_VAR 0 7
14072: PUSH
14073: LD_VAR 0 5
14077: PUSH
14078: LD_INT 1
14080: MINUS
14081: ARRAY
14082: PPUSH
14083: LD_VAR 0 2
14087: PUSH
14088: LD_VAR 0 5
14092: PUSH
14093: LD_INT 1
14095: MINUS
14096: ARRAY
14097: PPUSH
14098: LD_VAR 0 7
14102: PUSH
14103: LD_VAR 0 5
14107: ARRAY
14108: PPUSH
14109: CALL_OW 1
14113: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14114: LD_ADDR_VAR 0 7
14118: PUSH
14119: LD_VAR 0 7
14123: PPUSH
14124: LD_VAR 0 5
14128: PUSH
14129: LD_INT 1
14131: MINUS
14132: PPUSH
14133: LD_VAR 0 6
14137: PPUSH
14138: CALL_OW 1
14142: ST_TO_ADDR
// end ;
14143: GO 14060
14145: POP
14146: POP
// result := s_arr [ 1 ] ;
14147: LD_ADDR_VAR 0 4
14151: PUSH
14152: LD_VAR 0 7
14156: PUSH
14157: LD_INT 1
14159: ARRAY
14160: ST_TO_ADDR
// end ; end ;
14161: LD_VAR 0 4
14165: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14166: LD_INT 0
14168: PPUSH
14169: PPUSH
// if not list then
14170: LD_VAR 0 1
14174: NOT
14175: IFFALSE 14179
// exit ;
14177: GO 14270
// i := list [ pos1 ] ;
14179: LD_ADDR_VAR 0 5
14183: PUSH
14184: LD_VAR 0 1
14188: PUSH
14189: LD_VAR 0 2
14193: ARRAY
14194: ST_TO_ADDR
// if not i then
14195: LD_VAR 0 5
14199: NOT
14200: IFFALSE 14204
// exit ;
14202: GO 14270
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_VAR 0 1
14223: PUSH
14224: LD_VAR 0 3
14228: ARRAY
14229: PPUSH
14230: CALL_OW 1
14234: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: LD_VAR 0 1
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: LD_VAR 0 5
14254: PPUSH
14255: CALL_OW 1
14259: ST_TO_ADDR
// result := list ;
14260: LD_ADDR_VAR 0 4
14264: PUSH
14265: LD_VAR 0 1
14269: ST_TO_ADDR
// end ;
14270: LD_VAR 0 4
14274: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14275: LD_INT 0
14277: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14278: LD_ADDR_VAR 0 5
14282: PUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 250
14292: PPUSH
14293: LD_VAR 0 1
14297: PPUSH
14298: CALL_OW 251
14302: PPUSH
14303: LD_VAR 0 2
14307: PPUSH
14308: LD_VAR 0 3
14312: PPUSH
14313: LD_VAR 0 4
14317: PPUSH
14318: CALL 14696 0 5
14322: ST_TO_ADDR
// end ;
14323: LD_VAR 0 5
14327: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14328: LD_INT 0
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
// if not list or not unit then
14334: LD_VAR 0 2
14338: NOT
14339: PUSH
14340: LD_VAR 0 1
14344: NOT
14345: OR
14346: IFFALSE 14350
// exit ;
14348: GO 14691
// result := [ ] ;
14350: LD_ADDR_VAR 0 5
14354: PUSH
14355: EMPTY
14356: ST_TO_ADDR
// for i in list do
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_VAR 0 2
14366: PUSH
14367: FOR_IN
14368: IFFALSE 14586
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14370: LD_ADDR_VAR 0 8
14374: PUSH
14375: LD_VAR 0 1
14379: PPUSH
14380: LD_VAR 0 6
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PPUSH
14389: LD_VAR 0 6
14393: PUSH
14394: LD_INT 2
14396: ARRAY
14397: PPUSH
14398: CALL_OW 297
14402: ST_TO_ADDR
// if not Count ( result ) then
14403: LD_VAR 0 5
14407: PPUSH
14408: CALL 10980 0 1
14412: NOT
14413: IFFALSE 14446
// begin result := Join ( result , [ i , tmp ] ) ;
14415: LD_ADDR_VAR 0 5
14419: PUSH
14420: LD_VAR 0 5
14424: PPUSH
14425: LD_VAR 0 6
14429: PUSH
14430: LD_VAR 0 8
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL 46569 0 2
14443: ST_TO_ADDR
// continue ;
14444: GO 14367
// end ; if result [ result ] [ 2 ] <= tmp then
14446: LD_VAR 0 5
14450: PUSH
14451: LD_VAR 0 5
14455: ARRAY
14456: PUSH
14457: LD_INT 2
14459: ARRAY
14460: PUSH
14461: LD_VAR 0 8
14465: LESSEQUAL
14466: IFFALSE 14499
// result := Join ( result , [ i , tmp ] ) else
14468: LD_ADDR_VAR 0 5
14472: PUSH
14473: LD_VAR 0 5
14477: PPUSH
14478: LD_VAR 0 6
14482: PUSH
14483: LD_VAR 0 8
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PPUSH
14492: CALL 46569 0 2
14496: ST_TO_ADDR
14497: GO 14584
// begin for j := 1 to Count ( result ) do
14499: LD_ADDR_VAR 0 7
14503: PUSH
14504: DOUBLE
14505: LD_INT 1
14507: DEC
14508: ST_TO_ADDR
14509: LD_VAR 0 5
14513: PPUSH
14514: CALL 10980 0 1
14518: PUSH
14519: FOR_TO
14520: IFFALSE 14582
// begin if tmp < result [ j ] [ 2 ] then
14522: LD_VAR 0 8
14526: PUSH
14527: LD_VAR 0 5
14531: PUSH
14532: LD_VAR 0 7
14536: ARRAY
14537: PUSH
14538: LD_INT 2
14540: ARRAY
14541: LESS
14542: IFFALSE 14580
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14544: LD_ADDR_VAR 0 5
14548: PUSH
14549: LD_VAR 0 5
14553: PPUSH
14554: LD_VAR 0 7
14558: PPUSH
14559: LD_VAR 0 6
14563: PUSH
14564: LD_VAR 0 8
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PPUSH
14573: CALL_OW 2
14577: ST_TO_ADDR
// break ;
14578: GO 14582
// end ; end ;
14580: GO 14519
14582: POP
14583: POP
// end ; end ;
14584: GO 14367
14586: POP
14587: POP
// if result and not asc then
14588: LD_VAR 0 5
14592: PUSH
14593: LD_VAR 0 3
14597: NOT
14598: AND
14599: IFFALSE 14616
// result := ReverseArray ( result ) ;
14601: LD_ADDR_VAR 0 5
14605: PUSH
14606: LD_VAR 0 5
14610: PPUSH
14611: CALL 41856 0 1
14615: ST_TO_ADDR
// tmp := [ ] ;
14616: LD_ADDR_VAR 0 8
14620: PUSH
14621: EMPTY
14622: ST_TO_ADDR
// if mode then
14623: LD_VAR 0 4
14627: IFFALSE 14691
// begin for i := 1 to result do
14629: LD_ADDR_VAR 0 6
14633: PUSH
14634: DOUBLE
14635: LD_INT 1
14637: DEC
14638: ST_TO_ADDR
14639: LD_VAR 0 5
14643: PUSH
14644: FOR_TO
14645: IFFALSE 14679
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14647: LD_ADDR_VAR 0 8
14651: PUSH
14652: LD_VAR 0 8
14656: PPUSH
14657: LD_VAR 0 5
14661: PUSH
14662: LD_VAR 0 6
14666: ARRAY
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PPUSH
14672: CALL 46569 0 2
14676: ST_TO_ADDR
14677: GO 14644
14679: POP
14680: POP
// result := tmp ;
14681: LD_ADDR_VAR 0 5
14685: PUSH
14686: LD_VAR 0 8
14690: ST_TO_ADDR
// end ; end ;
14691: LD_VAR 0 5
14695: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14696: LD_INT 0
14698: PPUSH
14699: PPUSH
14700: PPUSH
14701: PPUSH
// if not list then
14702: LD_VAR 0 3
14706: NOT
14707: IFFALSE 14711
// exit ;
14709: GO 15099
// result := [ ] ;
14711: LD_ADDR_VAR 0 6
14715: PUSH
14716: EMPTY
14717: ST_TO_ADDR
// for i in list do
14718: LD_ADDR_VAR 0 7
14722: PUSH
14723: LD_VAR 0 3
14727: PUSH
14728: FOR_IN
14729: IFFALSE 14931
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14731: LD_ADDR_VAR 0 9
14735: PUSH
14736: LD_VAR 0 7
14740: PPUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: CALL_OW 297
14755: ST_TO_ADDR
// if not result then
14756: LD_VAR 0 6
14760: NOT
14761: IFFALSE 14787
// result := [ [ i , tmp ] ] else
14763: LD_ADDR_VAR 0 6
14767: PUSH
14768: LD_VAR 0 7
14772: PUSH
14773: LD_VAR 0 9
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: ST_TO_ADDR
14785: GO 14929
// begin if result [ result ] [ 2 ] < tmp then
14787: LD_VAR 0 6
14791: PUSH
14792: LD_VAR 0 6
14796: ARRAY
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: PUSH
14802: LD_VAR 0 9
14806: LESS
14807: IFFALSE 14849
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: LD_VAR 0 6
14818: PPUSH
14819: LD_VAR 0 6
14823: PUSH
14824: LD_INT 1
14826: PLUS
14827: PPUSH
14828: LD_VAR 0 7
14832: PUSH
14833: LD_VAR 0 9
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 2
14846: ST_TO_ADDR
14847: GO 14929
// for j = 1 to result do
14849: LD_ADDR_VAR 0 8
14853: PUSH
14854: DOUBLE
14855: LD_INT 1
14857: DEC
14858: ST_TO_ADDR
14859: LD_VAR 0 6
14863: PUSH
14864: FOR_TO
14865: IFFALSE 14927
// begin if tmp < result [ j ] [ 2 ] then
14867: LD_VAR 0 9
14871: PUSH
14872: LD_VAR 0 6
14876: PUSH
14877: LD_VAR 0 8
14881: ARRAY
14882: PUSH
14883: LD_INT 2
14885: ARRAY
14886: LESS
14887: IFFALSE 14925
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14889: LD_ADDR_VAR 0 6
14893: PUSH
14894: LD_VAR 0 6
14898: PPUSH
14899: LD_VAR 0 8
14903: PPUSH
14904: LD_VAR 0 7
14908: PUSH
14909: LD_VAR 0 9
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PPUSH
14918: CALL_OW 2
14922: ST_TO_ADDR
// break ;
14923: GO 14927
// end ; end ;
14925: GO 14864
14927: POP
14928: POP
// end ; end ;
14929: GO 14728
14931: POP
14932: POP
// if result and not asc then
14933: LD_VAR 0 6
14937: PUSH
14938: LD_VAR 0 4
14942: NOT
14943: AND
14944: IFFALSE 15019
// begin tmp := result ;
14946: LD_ADDR_VAR 0 9
14950: PUSH
14951: LD_VAR 0 6
14955: ST_TO_ADDR
// for i = tmp downto 1 do
14956: LD_ADDR_VAR 0 7
14960: PUSH
14961: DOUBLE
14962: LD_VAR 0 9
14966: INC
14967: ST_TO_ADDR
14968: LD_INT 1
14970: PUSH
14971: FOR_DOWNTO
14972: IFFALSE 15017
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14974: LD_ADDR_VAR 0 6
14978: PUSH
14979: LD_VAR 0 6
14983: PPUSH
14984: LD_VAR 0 9
14988: PUSH
14989: LD_VAR 0 7
14993: MINUS
14994: PUSH
14995: LD_INT 1
14997: PLUS
14998: PPUSH
14999: LD_VAR 0 9
15003: PUSH
15004: LD_VAR 0 7
15008: ARRAY
15009: PPUSH
15010: CALL_OW 1
15014: ST_TO_ADDR
15015: GO 14971
15017: POP
15018: POP
// end ; tmp := [ ] ;
15019: LD_ADDR_VAR 0 9
15023: PUSH
15024: EMPTY
15025: ST_TO_ADDR
// if mode then
15026: LD_VAR 0 5
15030: IFFALSE 15099
// begin for i = 1 to result do
15032: LD_ADDR_VAR 0 7
15036: PUSH
15037: DOUBLE
15038: LD_INT 1
15040: DEC
15041: ST_TO_ADDR
15042: LD_VAR 0 6
15046: PUSH
15047: FOR_TO
15048: IFFALSE 15087
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15050: LD_ADDR_VAR 0 9
15054: PUSH
15055: LD_VAR 0 9
15059: PPUSH
15060: LD_VAR 0 7
15064: PPUSH
15065: LD_VAR 0 6
15069: PUSH
15070: LD_VAR 0 7
15074: ARRAY
15075: PUSH
15076: LD_INT 1
15078: ARRAY
15079: PPUSH
15080: CALL_OW 1
15084: ST_TO_ADDR
15085: GO 15047
15087: POP
15088: POP
// result := tmp ;
15089: LD_ADDR_VAR 0 6
15093: PUSH
15094: LD_VAR 0 9
15098: ST_TO_ADDR
// end ; end ;
15099: LD_VAR 0 6
15103: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15104: LD_INT 0
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15112: LD_ADDR_VAR 0 5
15116: PUSH
15117: LD_INT 0
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: LD_INT 0
15125: PUSH
15126: EMPTY
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: ST_TO_ADDR
// if not x or not y then
15134: LD_VAR 0 2
15138: NOT
15139: PUSH
15140: LD_VAR 0 3
15144: NOT
15145: OR
15146: IFFALSE 15150
// exit ;
15148: GO 16800
// if not range then
15150: LD_VAR 0 4
15154: NOT
15155: IFFALSE 15165
// range := 10 ;
15157: LD_ADDR_VAR 0 4
15161: PUSH
15162: LD_INT 10
15164: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15165: LD_ADDR_VAR 0 8
15169: PUSH
15170: LD_INT 81
15172: PUSH
15173: LD_VAR 0 1
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 92
15184: PUSH
15185: LD_VAR 0 2
15189: PUSH
15190: LD_VAR 0 3
15194: PUSH
15195: LD_VAR 0 4
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 3
15208: PUSH
15209: LD_INT 21
15211: PUSH
15212: LD_INT 3
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 69
15232: ST_TO_ADDR
// if not tmp then
15233: LD_VAR 0 8
15237: NOT
15238: IFFALSE 15242
// exit ;
15240: GO 16800
// for i in tmp do
15242: LD_ADDR_VAR 0 6
15246: PUSH
15247: LD_VAR 0 8
15251: PUSH
15252: FOR_IN
15253: IFFALSE 16775
// begin points := [ 0 , 0 , 0 ] ;
15255: LD_ADDR_VAR 0 9
15259: PUSH
15260: LD_INT 0
15262: PUSH
15263: LD_INT 0
15265: PUSH
15266: LD_INT 0
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: ST_TO_ADDR
// bpoints := 1 ;
15274: LD_ADDR_VAR 0 10
15278: PUSH
15279: LD_INT 1
15281: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15282: LD_VAR 0 6
15286: PPUSH
15287: CALL_OW 247
15291: PUSH
15292: LD_INT 1
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15878
15300: POP
// begin if GetClass ( i ) = 1 then
15301: LD_VAR 0 6
15305: PPUSH
15306: CALL_OW 257
15310: PUSH
15311: LD_INT 1
15313: EQUAL
15314: IFFALSE 15335
// points := [ 10 , 5 , 3 ] ;
15316: LD_ADDR_VAR 0 9
15320: PUSH
15321: LD_INT 10
15323: PUSH
15324: LD_INT 5
15326: PUSH
15327: LD_INT 3
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15335: LD_VAR 0 6
15339: PPUSH
15340: CALL_OW 257
15344: PUSH
15345: LD_INT 2
15347: PUSH
15348: LD_INT 3
15350: PUSH
15351: LD_INT 4
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: IN
15359: IFFALSE 15380
// points := [ 3 , 2 , 1 ] ;
15361: LD_ADDR_VAR 0 9
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: LD_INT 2
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15380: LD_VAR 0 6
15384: PPUSH
15385: CALL_OW 257
15389: PUSH
15390: LD_INT 5
15392: EQUAL
15393: IFFALSE 15414
// points := [ 130 , 5 , 2 ] ;
15395: LD_ADDR_VAR 0 9
15399: PUSH
15400: LD_INT 130
15402: PUSH
15403: LD_INT 5
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15414: LD_VAR 0 6
15418: PPUSH
15419: CALL_OW 257
15423: PUSH
15424: LD_INT 8
15426: EQUAL
15427: IFFALSE 15448
// points := [ 35 , 35 , 30 ] ;
15429: LD_ADDR_VAR 0 9
15433: PUSH
15434: LD_INT 35
15436: PUSH
15437: LD_INT 35
15439: PUSH
15440: LD_INT 30
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15448: LD_VAR 0 6
15452: PPUSH
15453: CALL_OW 257
15457: PUSH
15458: LD_INT 9
15460: EQUAL
15461: IFFALSE 15482
// points := [ 20 , 55 , 40 ] ;
15463: LD_ADDR_VAR 0 9
15467: PUSH
15468: LD_INT 20
15470: PUSH
15471: LD_INT 55
15473: PUSH
15474: LD_INT 40
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15482: LD_VAR 0 6
15486: PPUSH
15487: CALL_OW 257
15491: PUSH
15492: LD_INT 12
15494: PUSH
15495: LD_INT 16
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: IN
15502: IFFALSE 15523
// points := [ 5 , 3 , 2 ] ;
15504: LD_ADDR_VAR 0 9
15508: PUSH
15509: LD_INT 5
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15523: LD_VAR 0 6
15527: PPUSH
15528: CALL_OW 257
15532: PUSH
15533: LD_INT 17
15535: EQUAL
15536: IFFALSE 15557
// points := [ 100 , 50 , 75 ] ;
15538: LD_ADDR_VAR 0 9
15542: PUSH
15543: LD_INT 100
15545: PUSH
15546: LD_INT 50
15548: PUSH
15549: LD_INT 75
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15557: LD_VAR 0 6
15561: PPUSH
15562: CALL_OW 257
15566: PUSH
15567: LD_INT 15
15569: EQUAL
15570: IFFALSE 15591
// points := [ 10 , 5 , 3 ] ;
15572: LD_ADDR_VAR 0 9
15576: PUSH
15577: LD_INT 10
15579: PUSH
15580: LD_INT 5
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: LIST
15590: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15591: LD_VAR 0 6
15595: PPUSH
15596: CALL_OW 257
15600: PUSH
15601: LD_INT 14
15603: EQUAL
15604: IFFALSE 15625
// points := [ 10 , 0 , 0 ] ;
15606: LD_ADDR_VAR 0 9
15610: PUSH
15611: LD_INT 10
15613: PUSH
15614: LD_INT 0
15616: PUSH
15617: LD_INT 0
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15625: LD_VAR 0 6
15629: PPUSH
15630: CALL_OW 257
15634: PUSH
15635: LD_INT 11
15637: EQUAL
15638: IFFALSE 15659
// points := [ 30 , 10 , 5 ] ;
15640: LD_ADDR_VAR 0 9
15644: PUSH
15645: LD_INT 30
15647: PUSH
15648: LD_INT 10
15650: PUSH
15651: LD_INT 5
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: LIST
15658: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15659: LD_VAR 0 1
15663: PPUSH
15664: LD_INT 5
15666: PPUSH
15667: CALL_OW 321
15671: PUSH
15672: LD_INT 2
15674: EQUAL
15675: IFFALSE 15692
// bpoints := bpoints * 1.8 ;
15677: LD_ADDR_VAR 0 10
15681: PUSH
15682: LD_VAR 0 10
15686: PUSH
15687: LD_REAL  1.80000000000000E+0000
15690: MUL
15691: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15692: LD_VAR 0 6
15696: PPUSH
15697: CALL_OW 257
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: LD_INT 2
15707: PUSH
15708: LD_INT 3
15710: PUSH
15711: LD_INT 4
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: IN
15720: PUSH
15721: LD_VAR 0 1
15725: PPUSH
15726: LD_INT 51
15728: PPUSH
15729: CALL_OW 321
15733: PUSH
15734: LD_INT 2
15736: EQUAL
15737: AND
15738: IFFALSE 15755
// bpoints := bpoints * 1.2 ;
15740: LD_ADDR_VAR 0 10
15744: PUSH
15745: LD_VAR 0 10
15749: PUSH
15750: LD_REAL  1.20000000000000E+0000
15753: MUL
15754: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15755: LD_VAR 0 6
15759: PPUSH
15760: CALL_OW 257
15764: PUSH
15765: LD_INT 5
15767: PUSH
15768: LD_INT 7
15770: PUSH
15771: LD_INT 9
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: IN
15779: PUSH
15780: LD_VAR 0 1
15784: PPUSH
15785: LD_INT 52
15787: PPUSH
15788: CALL_OW 321
15792: PUSH
15793: LD_INT 2
15795: EQUAL
15796: AND
15797: IFFALSE 15814
// bpoints := bpoints * 1.5 ;
15799: LD_ADDR_VAR 0 10
15803: PUSH
15804: LD_VAR 0 10
15808: PUSH
15809: LD_REAL  1.50000000000000E+0000
15812: MUL
15813: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15814: LD_VAR 0 1
15818: PPUSH
15819: LD_INT 66
15821: PPUSH
15822: CALL_OW 321
15826: PUSH
15827: LD_INT 2
15829: EQUAL
15830: IFFALSE 15847
// bpoints := bpoints * 1.1 ;
15832: LD_ADDR_VAR 0 10
15836: PUSH
15837: LD_VAR 0 10
15841: PUSH
15842: LD_REAL  1.10000000000000E+0000
15845: MUL
15846: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15847: LD_ADDR_VAR 0 10
15851: PUSH
15852: LD_VAR 0 10
15856: PUSH
15857: LD_VAR 0 6
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 259
15869: PUSH
15870: LD_REAL  1.15000000000000E+0000
15873: MUL
15874: MUL
15875: ST_TO_ADDR
// end ; unit_vehicle :
15876: GO 16704
15878: LD_INT 2
15880: DOUBLE
15881: EQUAL
15882: IFTRUE 15886
15884: GO 16692
15886: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15887: LD_VAR 0 6
15891: PPUSH
15892: CALL_OW 264
15896: PUSH
15897: LD_INT 2
15899: PUSH
15900: LD_INT 42
15902: PUSH
15903: LD_INT 24
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: LIST
15910: IN
15911: IFFALSE 15932
// points := [ 25 , 5 , 3 ] ;
15913: LD_ADDR_VAR 0 9
15917: PUSH
15918: LD_INT 25
15920: PUSH
15921: LD_INT 5
15923: PUSH
15924: LD_INT 3
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15932: LD_VAR 0 6
15936: PPUSH
15937: CALL_OW 264
15941: PUSH
15942: LD_INT 4
15944: PUSH
15945: LD_INT 43
15947: PUSH
15948: LD_INT 25
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: IN
15956: IFFALSE 15977
// points := [ 40 , 15 , 5 ] ;
15958: LD_ADDR_VAR 0 9
15962: PUSH
15963: LD_INT 40
15965: PUSH
15966: LD_INT 15
15968: PUSH
15969: LD_INT 5
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15977: LD_VAR 0 6
15981: PPUSH
15982: CALL_OW 264
15986: PUSH
15987: LD_INT 3
15989: PUSH
15990: LD_INT 23
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: IN
15997: IFFALSE 16018
// points := [ 7 , 25 , 8 ] ;
15999: LD_ADDR_VAR 0 9
16003: PUSH
16004: LD_INT 7
16006: PUSH
16007: LD_INT 25
16009: PUSH
16010: LD_INT 8
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16018: LD_VAR 0 6
16022: PPUSH
16023: CALL_OW 264
16027: PUSH
16028: LD_INT 5
16030: PUSH
16031: LD_INT 27
16033: PUSH
16034: LD_INT 44
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: IN
16042: IFFALSE 16063
// points := [ 14 , 50 , 16 ] ;
16044: LD_ADDR_VAR 0 9
16048: PUSH
16049: LD_INT 14
16051: PUSH
16052: LD_INT 50
16054: PUSH
16055: LD_INT 16
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16063: LD_VAR 0 6
16067: PPUSH
16068: CALL_OW 264
16072: PUSH
16073: LD_INT 6
16075: PUSH
16076: LD_INT 46
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: IN
16083: IFFALSE 16104
// points := [ 32 , 120 , 70 ] ;
16085: LD_ADDR_VAR 0 9
16089: PUSH
16090: LD_INT 32
16092: PUSH
16093: LD_INT 120
16095: PUSH
16096: LD_INT 70
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16104: LD_VAR 0 6
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 7
16116: PUSH
16117: LD_INT 28
16119: PUSH
16120: LD_INT 45
16122: PUSH
16123: LD_INT 92
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: IN
16132: IFFALSE 16153
// points := [ 35 , 20 , 45 ] ;
16134: LD_ADDR_VAR 0 9
16138: PUSH
16139: LD_INT 35
16141: PUSH
16142: LD_INT 20
16144: PUSH
16145: LD_INT 45
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16153: LD_VAR 0 6
16157: PPUSH
16158: CALL_OW 264
16162: PUSH
16163: LD_INT 47
16165: PUSH
16166: EMPTY
16167: LIST
16168: IN
16169: IFFALSE 16190
// points := [ 67 , 45 , 75 ] ;
16171: LD_ADDR_VAR 0 9
16175: PUSH
16176: LD_INT 67
16178: PUSH
16179: LD_INT 45
16181: PUSH
16182: LD_INT 75
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16190: LD_VAR 0 6
16194: PPUSH
16195: CALL_OW 264
16199: PUSH
16200: LD_INT 26
16202: PUSH
16203: EMPTY
16204: LIST
16205: IN
16206: IFFALSE 16227
// points := [ 120 , 30 , 80 ] ;
16208: LD_ADDR_VAR 0 9
16212: PUSH
16213: LD_INT 120
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 80
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: LIST
16226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16227: LD_VAR 0 6
16231: PPUSH
16232: CALL_OW 264
16236: PUSH
16237: LD_INT 22
16239: PUSH
16240: EMPTY
16241: LIST
16242: IN
16243: IFFALSE 16264
// points := [ 40 , 1 , 1 ] ;
16245: LD_ADDR_VAR 0 9
16249: PUSH
16250: LD_INT 40
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16264: LD_VAR 0 6
16268: PPUSH
16269: CALL_OW 264
16273: PUSH
16274: LD_INT 29
16276: PUSH
16277: EMPTY
16278: LIST
16279: IN
16280: IFFALSE 16301
// points := [ 70 , 200 , 400 ] ;
16282: LD_ADDR_VAR 0 9
16286: PUSH
16287: LD_INT 70
16289: PUSH
16290: LD_INT 200
16292: PUSH
16293: LD_INT 400
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16301: LD_VAR 0 6
16305: PPUSH
16306: CALL_OW 264
16310: PUSH
16311: LD_INT 14
16313: PUSH
16314: LD_INT 53
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: IN
16321: IFFALSE 16342
// points := [ 40 , 10 , 20 ] ;
16323: LD_ADDR_VAR 0 9
16327: PUSH
16328: LD_INT 40
16330: PUSH
16331: LD_INT 10
16333: PUSH
16334: LD_INT 20
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16342: LD_VAR 0 6
16346: PPUSH
16347: CALL_OW 264
16351: PUSH
16352: LD_INT 9
16354: PUSH
16355: EMPTY
16356: LIST
16357: IN
16358: IFFALSE 16379
// points := [ 5 , 70 , 20 ] ;
16360: LD_ADDR_VAR 0 9
16364: PUSH
16365: LD_INT 5
16367: PUSH
16368: LD_INT 70
16370: PUSH
16371: LD_INT 20
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: LIST
16378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16379: LD_VAR 0 6
16383: PPUSH
16384: CALL_OW 264
16388: PUSH
16389: LD_INT 10
16391: PUSH
16392: EMPTY
16393: LIST
16394: IN
16395: IFFALSE 16416
// points := [ 35 , 110 , 70 ] ;
16397: LD_ADDR_VAR 0 9
16401: PUSH
16402: LD_INT 35
16404: PUSH
16405: LD_INT 110
16407: PUSH
16408: LD_INT 70
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16416: LD_VAR 0 6
16420: PPUSH
16421: CALL_OW 265
16425: PUSH
16426: LD_INT 25
16428: EQUAL
16429: IFFALSE 16450
// points := [ 80 , 65 , 100 ] ;
16431: LD_ADDR_VAR 0 9
16435: PUSH
16436: LD_INT 80
16438: PUSH
16439: LD_INT 65
16441: PUSH
16442: LD_INT 100
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: LIST
16449: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16450: LD_VAR 0 6
16454: PPUSH
16455: CALL_OW 263
16459: PUSH
16460: LD_INT 1
16462: EQUAL
16463: IFFALSE 16498
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16465: LD_ADDR_VAR 0 10
16469: PUSH
16470: LD_VAR 0 10
16474: PUSH
16475: LD_VAR 0 6
16479: PPUSH
16480: CALL_OW 311
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: CALL_OW 259
16492: PUSH
16493: LD_INT 4
16495: MUL
16496: MUL
16497: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16498: LD_VAR 0 6
16502: PPUSH
16503: CALL_OW 263
16507: PUSH
16508: LD_INT 2
16510: EQUAL
16511: IFFALSE 16562
// begin j := IsControledBy ( i ) ;
16513: LD_ADDR_VAR 0 7
16517: PUSH
16518: LD_VAR 0 6
16522: PPUSH
16523: CALL_OW 312
16527: ST_TO_ADDR
// if j then
16528: LD_VAR 0 7
16532: IFFALSE 16562
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16534: LD_ADDR_VAR 0 10
16538: PUSH
16539: LD_VAR 0 10
16543: PUSH
16544: LD_VAR 0 7
16548: PPUSH
16549: LD_INT 3
16551: PPUSH
16552: CALL_OW 259
16556: PUSH
16557: LD_INT 3
16559: MUL
16560: MUL
16561: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16562: LD_VAR 0 6
16566: PPUSH
16567: CALL_OW 264
16571: PUSH
16572: LD_INT 5
16574: PUSH
16575: LD_INT 6
16577: PUSH
16578: LD_INT 46
16580: PUSH
16581: LD_INT 44
16583: PUSH
16584: LD_INT 47
16586: PUSH
16587: LD_INT 45
16589: PUSH
16590: LD_INT 28
16592: PUSH
16593: LD_INT 7
16595: PUSH
16596: LD_INT 27
16598: PUSH
16599: LD_INT 29
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: IN
16614: PUSH
16615: LD_VAR 0 1
16619: PPUSH
16620: LD_INT 52
16622: PPUSH
16623: CALL_OW 321
16627: PUSH
16628: LD_INT 2
16630: EQUAL
16631: AND
16632: IFFALSE 16649
// bpoints := bpoints * 1.2 ;
16634: LD_ADDR_VAR 0 10
16638: PUSH
16639: LD_VAR 0 10
16643: PUSH
16644: LD_REAL  1.20000000000000E+0000
16647: MUL
16648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16649: LD_VAR 0 6
16653: PPUSH
16654: CALL_OW 264
16658: PUSH
16659: LD_INT 6
16661: PUSH
16662: LD_INT 46
16664: PUSH
16665: LD_INT 47
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: IN
16673: IFFALSE 16690
// bpoints := bpoints * 1.2 ;
16675: LD_ADDR_VAR 0 10
16679: PUSH
16680: LD_VAR 0 10
16684: PUSH
16685: LD_REAL  1.20000000000000E+0000
16688: MUL
16689: ST_TO_ADDR
// end ; unit_building :
16690: GO 16704
16692: LD_INT 3
16694: DOUBLE
16695: EQUAL
16696: IFTRUE 16700
16698: GO 16703
16700: POP
// ; end ;
16701: GO 16704
16703: POP
// for j = 1 to 3 do
16704: LD_ADDR_VAR 0 7
16708: PUSH
16709: DOUBLE
16710: LD_INT 1
16712: DEC
16713: ST_TO_ADDR
16714: LD_INT 3
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16771
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16720: LD_ADDR_VAR 0 5
16724: PUSH
16725: LD_VAR 0 5
16729: PPUSH
16730: LD_VAR 0 7
16734: PPUSH
16735: LD_VAR 0 5
16739: PUSH
16740: LD_VAR 0 7
16744: ARRAY
16745: PUSH
16746: LD_VAR 0 9
16750: PUSH
16751: LD_VAR 0 7
16755: ARRAY
16756: PUSH
16757: LD_VAR 0 10
16761: MUL
16762: PLUS
16763: PPUSH
16764: CALL_OW 1
16768: ST_TO_ADDR
16769: GO 16717
16771: POP
16772: POP
// end ;
16773: GO 15252
16775: POP
16776: POP
// result := Replace ( result , 4 , tmp ) ;
16777: LD_ADDR_VAR 0 5
16781: PUSH
16782: LD_VAR 0 5
16786: PPUSH
16787: LD_INT 4
16789: PPUSH
16790: LD_VAR 0 8
16794: PPUSH
16795: CALL_OW 1
16799: ST_TO_ADDR
// end ;
16800: LD_VAR 0 5
16804: RET
// export function DangerAtRange ( unit , range ) ; begin
16805: LD_INT 0
16807: PPUSH
// if not unit then
16808: LD_VAR 0 1
16812: NOT
16813: IFFALSE 16817
// exit ;
16815: GO 16862
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16817: LD_ADDR_VAR 0 3
16821: PUSH
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 255
16831: PPUSH
16832: LD_VAR 0 1
16836: PPUSH
16837: CALL_OW 250
16841: PPUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 251
16851: PPUSH
16852: LD_VAR 0 2
16856: PPUSH
16857: CALL 15104 0 4
16861: ST_TO_ADDR
// end ;
16862: LD_VAR 0 3
16866: RET
// export function DangerInArea ( side , area ) ; begin
16867: LD_INT 0
16869: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16870: LD_ADDR_VAR 0 3
16874: PUSH
16875: LD_VAR 0 2
16879: PPUSH
16880: LD_INT 81
16882: PUSH
16883: LD_VAR 0 1
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PPUSH
16892: CALL_OW 70
16896: ST_TO_ADDR
// end ;
16897: LD_VAR 0 3
16901: RET
// export function IsExtension ( b ) ; begin
16902: LD_INT 0
16904: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16905: LD_ADDR_VAR 0 2
16909: PUSH
16910: LD_VAR 0 1
16914: PUSH
16915: LD_INT 23
16917: PUSH
16918: LD_INT 20
16920: PUSH
16921: LD_INT 22
16923: PUSH
16924: LD_INT 17
16926: PUSH
16927: LD_INT 24
16929: PUSH
16930: LD_INT 21
16932: PUSH
16933: LD_INT 19
16935: PUSH
16936: LD_INT 16
16938: PUSH
16939: LD_INT 25
16941: PUSH
16942: LD_INT 18
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: IN
16957: ST_TO_ADDR
// end ;
16958: LD_VAR 0 2
16962: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16963: LD_INT 0
16965: PPUSH
16966: PPUSH
16967: PPUSH
// result := [ ] ;
16968: LD_ADDR_VAR 0 4
16972: PUSH
16973: EMPTY
16974: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16975: LD_ADDR_VAR 0 5
16979: PUSH
16980: LD_VAR 0 2
16984: PPUSH
16985: LD_INT 21
16987: PUSH
16988: LD_INT 3
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PPUSH
16995: CALL_OW 70
16999: ST_TO_ADDR
// if not tmp then
17000: LD_VAR 0 5
17004: NOT
17005: IFFALSE 17009
// exit ;
17007: GO 17073
// if checkLink then
17009: LD_VAR 0 3
17013: IFFALSE 17063
// begin for i in tmp do
17015: LD_ADDR_VAR 0 6
17019: PUSH
17020: LD_VAR 0 5
17024: PUSH
17025: FOR_IN
17026: IFFALSE 17061
// if GetBase ( i ) <> base then
17028: LD_VAR 0 6
17032: PPUSH
17033: CALL_OW 274
17037: PUSH
17038: LD_VAR 0 1
17042: NONEQUAL
17043: IFFALSE 17059
// ComLinkToBase ( base , i ) ;
17045: LD_VAR 0 1
17049: PPUSH
17050: LD_VAR 0 6
17054: PPUSH
17055: CALL_OW 169
17059: GO 17025
17061: POP
17062: POP
// end ; result := tmp ;
17063: LD_ADDR_VAR 0 4
17067: PUSH
17068: LD_VAR 0 5
17072: ST_TO_ADDR
// end ;
17073: LD_VAR 0 4
17077: RET
// export function ComComplete ( units , b ) ; var i ; begin
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
// if not units then
17082: LD_VAR 0 1
17086: NOT
17087: IFFALSE 17091
// exit ;
17089: GO 17181
// for i in units do
17091: LD_ADDR_VAR 0 4
17095: PUSH
17096: LD_VAR 0 1
17100: PUSH
17101: FOR_IN
17102: IFFALSE 17179
// if BuildingStatus ( b ) = bs_build then
17104: LD_VAR 0 2
17108: PPUSH
17109: CALL_OW 461
17113: PUSH
17114: LD_INT 1
17116: EQUAL
17117: IFFALSE 17177
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17119: LD_VAR 0 4
17123: PPUSH
17124: LD_STRING h
17126: PUSH
17127: LD_VAR 0 2
17131: PPUSH
17132: CALL_OW 250
17136: PUSH
17137: LD_VAR 0 2
17141: PPUSH
17142: CALL_OW 251
17146: PUSH
17147: LD_VAR 0 2
17151: PUSH
17152: LD_INT 0
17154: PUSH
17155: LD_INT 0
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: PUSH
17170: EMPTY
17171: LIST
17172: PPUSH
17173: CALL_OW 446
17177: GO 17101
17179: POP
17180: POP
// end ;
17181: LD_VAR 0 3
17185: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
17192: PPUSH
17193: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17194: LD_VAR 0 1
17198: NOT
17199: PUSH
17200: LD_VAR 0 1
17204: PPUSH
17205: CALL_OW 263
17209: PUSH
17210: LD_INT 2
17212: NONEQUAL
17213: OR
17214: IFFALSE 17218
// exit ;
17216: GO 17534
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17218: LD_ADDR_VAR 0 6
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_VAR 0 1
17230: PPUSH
17231: CALL_OW 255
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: LD_INT 30
17245: PUSH
17246: LD_INT 36
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 34
17255: PUSH
17256: LD_INT 31
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: ST_TO_ADDR
// if not tmp then
17277: LD_VAR 0 6
17281: NOT
17282: IFFALSE 17286
// exit ;
17284: GO 17534
// result := [ ] ;
17286: LD_ADDR_VAR 0 2
17290: PUSH
17291: EMPTY
17292: ST_TO_ADDR
// for i in tmp do
17293: LD_ADDR_VAR 0 3
17297: PUSH
17298: LD_VAR 0 6
17302: PUSH
17303: FOR_IN
17304: IFFALSE 17375
// begin t := UnitsInside ( i ) ;
17306: LD_ADDR_VAR 0 4
17310: PUSH
17311: LD_VAR 0 3
17315: PPUSH
17316: CALL_OW 313
17320: ST_TO_ADDR
// if t then
17321: LD_VAR 0 4
17325: IFFALSE 17373
// for j in t do
17327: LD_ADDR_VAR 0 7
17331: PUSH
17332: LD_VAR 0 4
17336: PUSH
17337: FOR_IN
17338: IFFALSE 17371
// result := Replace ( result , result + 1 , j ) ;
17340: LD_ADDR_VAR 0 2
17344: PUSH
17345: LD_VAR 0 2
17349: PPUSH
17350: LD_VAR 0 2
17354: PUSH
17355: LD_INT 1
17357: PLUS
17358: PPUSH
17359: LD_VAR 0 7
17363: PPUSH
17364: CALL_OW 1
17368: ST_TO_ADDR
17369: GO 17337
17371: POP
17372: POP
// end ;
17373: GO 17303
17375: POP
17376: POP
// if not result then
17377: LD_VAR 0 2
17381: NOT
17382: IFFALSE 17386
// exit ;
17384: GO 17534
// mech := result [ 1 ] ;
17386: LD_ADDR_VAR 0 5
17390: PUSH
17391: LD_VAR 0 2
17395: PUSH
17396: LD_INT 1
17398: ARRAY
17399: ST_TO_ADDR
// if result > 1 then
17400: LD_VAR 0 2
17404: PUSH
17405: LD_INT 1
17407: GREATER
17408: IFFALSE 17520
// begin for i = 2 to result do
17410: LD_ADDR_VAR 0 3
17414: PUSH
17415: DOUBLE
17416: LD_INT 2
17418: DEC
17419: ST_TO_ADDR
17420: LD_VAR 0 2
17424: PUSH
17425: FOR_TO
17426: IFFALSE 17518
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17428: LD_ADDR_VAR 0 4
17432: PUSH
17433: LD_VAR 0 2
17437: PUSH
17438: LD_VAR 0 3
17442: ARRAY
17443: PPUSH
17444: LD_INT 3
17446: PPUSH
17447: CALL_OW 259
17451: PUSH
17452: LD_VAR 0 2
17456: PUSH
17457: LD_VAR 0 3
17461: ARRAY
17462: PPUSH
17463: CALL_OW 432
17467: MINUS
17468: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17469: LD_VAR 0 4
17473: PUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_INT 3
17481: PPUSH
17482: CALL_OW 259
17486: PUSH
17487: LD_VAR 0 5
17491: PPUSH
17492: CALL_OW 432
17496: MINUS
17497: GREATEREQUAL
17498: IFFALSE 17516
// mech := result [ i ] ;
17500: LD_ADDR_VAR 0 5
17504: PUSH
17505: LD_VAR 0 2
17509: PUSH
17510: LD_VAR 0 3
17514: ARRAY
17515: ST_TO_ADDR
// end ;
17516: GO 17425
17518: POP
17519: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17520: LD_VAR 0 1
17524: PPUSH
17525: LD_VAR 0 5
17529: PPUSH
17530: CALL_OW 135
// end ;
17534: LD_VAR 0 2
17538: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17539: LD_INT 0
17541: PPUSH
17542: PPUSH
17543: PPUSH
17544: PPUSH
17545: PPUSH
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
17552: PPUSH
17553: PPUSH
// result := [ ] ;
17554: LD_ADDR_VAR 0 7
17558: PUSH
17559: EMPTY
17560: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17561: LD_VAR 0 1
17565: PPUSH
17566: CALL_OW 266
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: IN
17581: NOT
17582: IFFALSE 17586
// exit ;
17584: GO 19220
// if name then
17586: LD_VAR 0 3
17590: IFFALSE 17606
// SetBName ( base_dep , name ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_VAR 0 3
17601: PPUSH
17602: CALL_OW 500
// base := GetBase ( base_dep ) ;
17606: LD_ADDR_VAR 0 15
17610: PUSH
17611: LD_VAR 0 1
17615: PPUSH
17616: CALL_OW 274
17620: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17621: LD_ADDR_VAR 0 16
17625: PUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL_OW 255
17635: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17636: LD_ADDR_VAR 0 17
17640: PUSH
17641: LD_VAR 0 1
17645: PPUSH
17646: CALL_OW 248
17650: ST_TO_ADDR
// if sources then
17651: LD_VAR 0 5
17655: IFFALSE 17702
// for i = 1 to 3 do
17657: LD_ADDR_VAR 0 8
17661: PUSH
17662: DOUBLE
17663: LD_INT 1
17665: DEC
17666: ST_TO_ADDR
17667: LD_INT 3
17669: PUSH
17670: FOR_TO
17671: IFFALSE 17700
// AddResourceType ( base , i , sources [ i ] ) ;
17673: LD_VAR 0 15
17677: PPUSH
17678: LD_VAR 0 8
17682: PPUSH
17683: LD_VAR 0 5
17687: PUSH
17688: LD_VAR 0 8
17692: ARRAY
17693: PPUSH
17694: CALL_OW 276
17698: GO 17670
17700: POP
17701: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17702: LD_ADDR_VAR 0 18
17706: PUSH
17707: LD_VAR 0 15
17711: PPUSH
17712: LD_VAR 0 2
17716: PPUSH
17717: LD_INT 1
17719: PPUSH
17720: CALL 16963 0 3
17724: ST_TO_ADDR
// InitHc ;
17725: CALL_OW 19
// InitUc ;
17729: CALL_OW 18
// uc_side := side ;
17733: LD_ADDR_OWVAR 20
17737: PUSH
17738: LD_VAR 0 16
17742: ST_TO_ADDR
// uc_nation := nation ;
17743: LD_ADDR_OWVAR 21
17747: PUSH
17748: LD_VAR 0 17
17752: ST_TO_ADDR
// if buildings then
17753: LD_VAR 0 18
17757: IFFALSE 19079
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17759: LD_ADDR_VAR 0 19
17763: PUSH
17764: LD_VAR 0 18
17768: PPUSH
17769: LD_INT 2
17771: PUSH
17772: LD_INT 30
17774: PUSH
17775: LD_INT 29
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 30
17784: PUSH
17785: LD_INT 30
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: PPUSH
17797: CALL_OW 72
17801: ST_TO_ADDR
// if tmp then
17802: LD_VAR 0 19
17806: IFFALSE 17854
// for i in tmp do
17808: LD_ADDR_VAR 0 8
17812: PUSH
17813: LD_VAR 0 19
17817: PUSH
17818: FOR_IN
17819: IFFALSE 17852
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17821: LD_VAR 0 8
17825: PPUSH
17826: CALL_OW 250
17830: PPUSH
17831: LD_VAR 0 8
17835: PPUSH
17836: CALL_OW 251
17840: PPUSH
17841: LD_VAR 0 16
17845: PPUSH
17846: CALL_OW 441
17850: GO 17818
17852: POP
17853: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17854: LD_VAR 0 18
17858: PPUSH
17859: LD_INT 2
17861: PUSH
17862: LD_INT 30
17864: PUSH
17865: LD_INT 32
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 30
17874: PUSH
17875: LD_INT 33
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: PPUSH
17887: CALL_OW 72
17891: IFFALSE 17979
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17893: LD_ADDR_VAR 0 8
17897: PUSH
17898: LD_VAR 0 18
17902: PPUSH
17903: LD_INT 2
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: LD_INT 32
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 30
17918: PUSH
17919: LD_INT 33
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: PPUSH
17931: CALL_OW 72
17935: PUSH
17936: FOR_IN
17937: IFFALSE 17977
// begin if not GetBWeapon ( i ) then
17939: LD_VAR 0 8
17943: PPUSH
17944: CALL_OW 269
17948: NOT
17949: IFFALSE 17975
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17951: LD_VAR 0 8
17955: PPUSH
17956: LD_VAR 0 8
17960: PPUSH
17961: LD_VAR 0 2
17965: PPUSH
17966: CALL 19225 0 2
17970: PPUSH
17971: CALL_OW 431
// end ;
17975: GO 17936
17977: POP
17978: POP
// end ; for i = 1 to personel do
17979: LD_ADDR_VAR 0 8
17983: PUSH
17984: DOUBLE
17985: LD_INT 1
17987: DEC
17988: ST_TO_ADDR
17989: LD_VAR 0 6
17993: PUSH
17994: FOR_TO
17995: IFFALSE 19059
// begin if i > 4 then
17997: LD_VAR 0 8
18001: PUSH
18002: LD_INT 4
18004: GREATER
18005: IFFALSE 18009
// break ;
18007: GO 19059
// case i of 1 :
18009: LD_VAR 0 8
18013: PUSH
18014: LD_INT 1
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18102
18022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18023: LD_ADDR_VAR 0 12
18027: PUSH
18028: LD_VAR 0 18
18032: PPUSH
18033: LD_INT 22
18035: PUSH
18036: LD_VAR 0 16
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 58
18047: PUSH
18048: EMPTY
18049: LIST
18050: PUSH
18051: LD_INT 2
18053: PUSH
18054: LD_INT 30
18056: PUSH
18057: LD_INT 32
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 30
18066: PUSH
18067: LD_INT 4
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 30
18076: PUSH
18077: LD_INT 5
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 72
18099: ST_TO_ADDR
18100: GO 18324
18102: LD_INT 2
18104: DOUBLE
18105: EQUAL
18106: IFTRUE 18110
18108: GO 18172
18110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18111: LD_ADDR_VAR 0 12
18115: PUSH
18116: LD_VAR 0 18
18120: PPUSH
18121: LD_INT 22
18123: PUSH
18124: LD_VAR 0 16
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: LD_INT 30
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 30
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 72
18169: ST_TO_ADDR
18170: GO 18324
18172: LD_INT 3
18174: DOUBLE
18175: EQUAL
18176: IFTRUE 18180
18178: GO 18242
18180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18181: LD_ADDR_VAR 0 12
18185: PUSH
18186: LD_VAR 0 18
18190: PPUSH
18191: LD_INT 22
18193: PUSH
18194: LD_VAR 0 16
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: LD_INT 30
18208: PUSH
18209: LD_INT 2
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 30
18218: PUSH
18219: LD_INT 3
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 72
18239: ST_TO_ADDR
18240: GO 18324
18242: LD_INT 4
18244: DOUBLE
18245: EQUAL
18246: IFTRUE 18250
18248: GO 18323
18250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18251: LD_ADDR_VAR 0 12
18255: PUSH
18256: LD_VAR 0 18
18260: PPUSH
18261: LD_INT 22
18263: PUSH
18264: LD_VAR 0 16
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 30
18278: PUSH
18279: LD_INT 6
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 30
18288: PUSH
18289: LD_INT 7
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 30
18298: PUSH
18299: LD_INT 8
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PPUSH
18316: CALL_OW 72
18320: ST_TO_ADDR
18321: GO 18324
18323: POP
// if i = 1 then
18324: LD_VAR 0 8
18328: PUSH
18329: LD_INT 1
18331: EQUAL
18332: IFFALSE 18443
// begin tmp := [ ] ;
18334: LD_ADDR_VAR 0 19
18338: PUSH
18339: EMPTY
18340: ST_TO_ADDR
// for j in f do
18341: LD_ADDR_VAR 0 9
18345: PUSH
18346: LD_VAR 0 12
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18425
// if GetBType ( j ) = b_bunker then
18354: LD_VAR 0 9
18358: PPUSH
18359: CALL_OW 266
18363: PUSH
18364: LD_INT 32
18366: EQUAL
18367: IFFALSE 18394
// tmp := Insert ( tmp , 1 , j ) else
18369: LD_ADDR_VAR 0 19
18373: PUSH
18374: LD_VAR 0 19
18378: PPUSH
18379: LD_INT 1
18381: PPUSH
18382: LD_VAR 0 9
18386: PPUSH
18387: CALL_OW 2
18391: ST_TO_ADDR
18392: GO 18423
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18394: LD_ADDR_VAR 0 19
18398: PUSH
18399: LD_VAR 0 19
18403: PPUSH
18404: LD_VAR 0 19
18408: PUSH
18409: LD_INT 1
18411: PLUS
18412: PPUSH
18413: LD_VAR 0 9
18417: PPUSH
18418: CALL_OW 2
18422: ST_TO_ADDR
18423: GO 18351
18425: POP
18426: POP
// if tmp then
18427: LD_VAR 0 19
18431: IFFALSE 18443
// f := tmp ;
18433: LD_ADDR_VAR 0 12
18437: PUSH
18438: LD_VAR 0 19
18442: ST_TO_ADDR
// end ; x := personel [ i ] ;
18443: LD_ADDR_VAR 0 13
18447: PUSH
18448: LD_VAR 0 6
18452: PUSH
18453: LD_VAR 0 8
18457: ARRAY
18458: ST_TO_ADDR
// if x = - 1 then
18459: LD_VAR 0 13
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: EQUAL
18468: IFFALSE 18677
// begin for j in f do
18470: LD_ADDR_VAR 0 9
18474: PUSH
18475: LD_VAR 0 12
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18673
// repeat InitHc ;
18483: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18487: LD_VAR 0 9
18491: PPUSH
18492: CALL_OW 266
18496: PUSH
18497: LD_INT 5
18499: EQUAL
18500: IFFALSE 18570
// begin if UnitsInside ( j ) < 3 then
18502: LD_VAR 0 9
18506: PPUSH
18507: CALL_OW 313
18511: PUSH
18512: LD_INT 3
18514: LESS
18515: IFFALSE 18551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18517: LD_INT 0
18519: PPUSH
18520: LD_INT 5
18522: PUSH
18523: LD_INT 8
18525: PUSH
18526: LD_INT 9
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: LD_VAR 0 17
18538: ARRAY
18539: PPUSH
18540: LD_VAR 0 4
18544: PPUSH
18545: CALL_OW 380
18549: GO 18568
// PrepareHuman ( false , i , skill ) ;
18551: LD_INT 0
18553: PPUSH
18554: LD_VAR 0 8
18558: PPUSH
18559: LD_VAR 0 4
18563: PPUSH
18564: CALL_OW 380
// end else
18568: GO 18587
// PrepareHuman ( false , i , skill ) ;
18570: LD_INT 0
18572: PPUSH
18573: LD_VAR 0 8
18577: PPUSH
18578: LD_VAR 0 4
18582: PPUSH
18583: CALL_OW 380
// un := CreateHuman ;
18587: LD_ADDR_VAR 0 14
18591: PUSH
18592: CALL_OW 44
18596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18597: LD_ADDR_VAR 0 7
18601: PUSH
18602: LD_VAR 0 7
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: LD_VAR 0 14
18614: PPUSH
18615: CALL_OW 2
18619: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18620: LD_VAR 0 14
18624: PPUSH
18625: LD_VAR 0 9
18629: PPUSH
18630: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18634: LD_VAR 0 9
18638: PPUSH
18639: CALL_OW 313
18643: PUSH
18644: LD_INT 6
18646: EQUAL
18647: PUSH
18648: LD_VAR 0 9
18652: PPUSH
18653: CALL_OW 266
18657: PUSH
18658: LD_INT 32
18660: PUSH
18661: LD_INT 31
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: IN
18668: OR
18669: IFFALSE 18483
18671: GO 18480
18673: POP
18674: POP
// end else
18675: GO 19057
// for j = 1 to x do
18677: LD_ADDR_VAR 0 9
18681: PUSH
18682: DOUBLE
18683: LD_INT 1
18685: DEC
18686: ST_TO_ADDR
18687: LD_VAR 0 13
18691: PUSH
18692: FOR_TO
18693: IFFALSE 19055
// begin InitHc ;
18695: CALL_OW 19
// if not f then
18699: LD_VAR 0 12
18703: NOT
18704: IFFALSE 18793
// begin PrepareHuman ( false , i , skill ) ;
18706: LD_INT 0
18708: PPUSH
18709: LD_VAR 0 8
18713: PPUSH
18714: LD_VAR 0 4
18718: PPUSH
18719: CALL_OW 380
// un := CreateHuman ;
18723: LD_ADDR_VAR 0 14
18727: PUSH
18728: CALL_OW 44
18732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18733: LD_ADDR_VAR 0 7
18737: PUSH
18738: LD_VAR 0 7
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: LD_VAR 0 14
18750: PPUSH
18751: CALL_OW 2
18755: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18756: LD_VAR 0 14
18760: PPUSH
18761: LD_VAR 0 1
18765: PPUSH
18766: CALL_OW 250
18770: PPUSH
18771: LD_VAR 0 1
18775: PPUSH
18776: CALL_OW 251
18780: PPUSH
18781: LD_INT 10
18783: PPUSH
18784: LD_INT 0
18786: PPUSH
18787: CALL_OW 50
// continue ;
18791: GO 18692
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18793: LD_VAR 0 12
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PPUSH
18802: CALL_OW 313
18806: PUSH
18807: LD_VAR 0 12
18811: PUSH
18812: LD_INT 1
18814: ARRAY
18815: PPUSH
18816: CALL_OW 266
18820: PUSH
18821: LD_INT 32
18823: PUSH
18824: LD_INT 31
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: IN
18831: AND
18832: PUSH
18833: LD_VAR 0 12
18837: PUSH
18838: LD_INT 1
18840: ARRAY
18841: PPUSH
18842: CALL_OW 313
18846: PUSH
18847: LD_INT 6
18849: EQUAL
18850: OR
18851: IFFALSE 18871
// f := Delete ( f , 1 ) ;
18853: LD_ADDR_VAR 0 12
18857: PUSH
18858: LD_VAR 0 12
18862: PPUSH
18863: LD_INT 1
18865: PPUSH
18866: CALL_OW 3
18870: ST_TO_ADDR
// if not f then
18871: LD_VAR 0 12
18875: NOT
18876: IFFALSE 18894
// begin x := x + 2 ;
18878: LD_ADDR_VAR 0 13
18882: PUSH
18883: LD_VAR 0 13
18887: PUSH
18888: LD_INT 2
18890: PLUS
18891: ST_TO_ADDR
// continue ;
18892: GO 18692
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18894: LD_VAR 0 12
18898: PUSH
18899: LD_INT 1
18901: ARRAY
18902: PPUSH
18903: CALL_OW 266
18907: PUSH
18908: LD_INT 5
18910: EQUAL
18911: IFFALSE 18985
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18913: LD_VAR 0 12
18917: PUSH
18918: LD_INT 1
18920: ARRAY
18921: PPUSH
18922: CALL_OW 313
18926: PUSH
18927: LD_INT 3
18929: LESS
18930: IFFALSE 18966
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18932: LD_INT 0
18934: PPUSH
18935: LD_INT 5
18937: PUSH
18938: LD_INT 8
18940: PUSH
18941: LD_INT 9
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: PUSH
18949: LD_VAR 0 17
18953: ARRAY
18954: PPUSH
18955: LD_VAR 0 4
18959: PPUSH
18960: CALL_OW 380
18964: GO 18983
// PrepareHuman ( false , i , skill ) ;
18966: LD_INT 0
18968: PPUSH
18969: LD_VAR 0 8
18973: PPUSH
18974: LD_VAR 0 4
18978: PPUSH
18979: CALL_OW 380
// end else
18983: GO 19002
// PrepareHuman ( false , i , skill ) ;
18985: LD_INT 0
18987: PPUSH
18988: LD_VAR 0 8
18992: PPUSH
18993: LD_VAR 0 4
18997: PPUSH
18998: CALL_OW 380
// un := CreateHuman ;
19002: LD_ADDR_VAR 0 14
19006: PUSH
19007: CALL_OW 44
19011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19012: LD_ADDR_VAR 0 7
19016: PUSH
19017: LD_VAR 0 7
19021: PPUSH
19022: LD_INT 1
19024: PPUSH
19025: LD_VAR 0 14
19029: PPUSH
19030: CALL_OW 2
19034: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19035: LD_VAR 0 14
19039: PPUSH
19040: LD_VAR 0 12
19044: PUSH
19045: LD_INT 1
19047: ARRAY
19048: PPUSH
19049: CALL_OW 52
// end ;
19053: GO 18692
19055: POP
19056: POP
// end ;
19057: GO 17994
19059: POP
19060: POP
// result := result ^ buildings ;
19061: LD_ADDR_VAR 0 7
19065: PUSH
19066: LD_VAR 0 7
19070: PUSH
19071: LD_VAR 0 18
19075: ADD
19076: ST_TO_ADDR
// end else
19077: GO 19220
// begin for i = 1 to personel do
19079: LD_ADDR_VAR 0 8
19083: PUSH
19084: DOUBLE
19085: LD_INT 1
19087: DEC
19088: ST_TO_ADDR
19089: LD_VAR 0 6
19093: PUSH
19094: FOR_TO
19095: IFFALSE 19218
// begin if i > 4 then
19097: LD_VAR 0 8
19101: PUSH
19102: LD_INT 4
19104: GREATER
19105: IFFALSE 19109
// break ;
19107: GO 19218
// x := personel [ i ] ;
19109: LD_ADDR_VAR 0 13
19113: PUSH
19114: LD_VAR 0 6
19118: PUSH
19119: LD_VAR 0 8
19123: ARRAY
19124: ST_TO_ADDR
// if x = - 1 then
19125: LD_VAR 0 13
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: EQUAL
19134: IFFALSE 19138
// continue ;
19136: GO 19094
// PrepareHuman ( false , i , skill ) ;
19138: LD_INT 0
19140: PPUSH
19141: LD_VAR 0 8
19145: PPUSH
19146: LD_VAR 0 4
19150: PPUSH
19151: CALL_OW 380
// un := CreateHuman ;
19155: LD_ADDR_VAR 0 14
19159: PUSH
19160: CALL_OW 44
19164: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19165: LD_VAR 0 14
19169: PPUSH
19170: LD_VAR 0 1
19174: PPUSH
19175: CALL_OW 250
19179: PPUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 251
19189: PPUSH
19190: LD_INT 10
19192: PPUSH
19193: LD_INT 0
19195: PPUSH
19196: CALL_OW 50
// result := result ^ un ;
19200: LD_ADDR_VAR 0 7
19204: PUSH
19205: LD_VAR 0 7
19209: PUSH
19210: LD_VAR 0 14
19214: ADD
19215: ST_TO_ADDR
// end ;
19216: GO 19094
19218: POP
19219: POP
// end ; end ;
19220: LD_VAR 0 7
19224: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19225: LD_INT 0
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
19242: PPUSH
// result := false ;
19243: LD_ADDR_VAR 0 3
19247: PUSH
19248: LD_INT 0
19250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19251: LD_VAR 0 1
19255: NOT
19256: PUSH
19257: LD_VAR 0 1
19261: PPUSH
19262: CALL_OW 266
19266: PUSH
19267: LD_INT 32
19269: PUSH
19270: LD_INT 33
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: IN
19277: NOT
19278: OR
19279: IFFALSE 19283
// exit ;
19281: GO 20392
// nat := GetNation ( tower ) ;
19283: LD_ADDR_VAR 0 12
19287: PUSH
19288: LD_VAR 0 1
19292: PPUSH
19293: CALL_OW 248
19297: ST_TO_ADDR
// side := GetSide ( tower ) ;
19298: LD_ADDR_VAR 0 16
19302: PUSH
19303: LD_VAR 0 1
19307: PPUSH
19308: CALL_OW 255
19312: ST_TO_ADDR
// x := GetX ( tower ) ;
19313: LD_ADDR_VAR 0 10
19317: PUSH
19318: LD_VAR 0 1
19322: PPUSH
19323: CALL_OW 250
19327: ST_TO_ADDR
// y := GetY ( tower ) ;
19328: LD_ADDR_VAR 0 11
19332: PUSH
19333: LD_VAR 0 1
19337: PPUSH
19338: CALL_OW 251
19342: ST_TO_ADDR
// if not x or not y then
19343: LD_VAR 0 10
19347: NOT
19348: PUSH
19349: LD_VAR 0 11
19353: NOT
19354: OR
19355: IFFALSE 19359
// exit ;
19357: GO 20392
// weapon := 0 ;
19359: LD_ADDR_VAR 0 18
19363: PUSH
19364: LD_INT 0
19366: ST_TO_ADDR
// fac_list := [ ] ;
19367: LD_ADDR_VAR 0 17
19371: PUSH
19372: EMPTY
19373: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19374: LD_ADDR_VAR 0 6
19378: PUSH
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 274
19388: PPUSH
19389: LD_VAR 0 2
19393: PPUSH
19394: LD_INT 0
19396: PPUSH
19397: CALL 16963 0 3
19401: PPUSH
19402: LD_INT 30
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 72
19416: ST_TO_ADDR
// if not factories then
19417: LD_VAR 0 6
19421: NOT
19422: IFFALSE 19426
// exit ;
19424: GO 20392
// for i in factories do
19426: LD_ADDR_VAR 0 8
19430: PUSH
19431: LD_VAR 0 6
19435: PUSH
19436: FOR_IN
19437: IFFALSE 19462
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19439: LD_ADDR_VAR 0 17
19443: PUSH
19444: LD_VAR 0 17
19448: PUSH
19449: LD_VAR 0 8
19453: PPUSH
19454: CALL_OW 478
19458: UNION
19459: ST_TO_ADDR
19460: GO 19436
19462: POP
19463: POP
// if not fac_list then
19464: LD_VAR 0 17
19468: NOT
19469: IFFALSE 19473
// exit ;
19471: GO 20392
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19473: LD_ADDR_VAR 0 5
19477: PUSH
19478: LD_INT 4
19480: PUSH
19481: LD_INT 5
19483: PUSH
19484: LD_INT 9
19486: PUSH
19487: LD_INT 10
19489: PUSH
19490: LD_INT 6
19492: PUSH
19493: LD_INT 7
19495: PUSH
19496: LD_INT 11
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 27
19510: PUSH
19511: LD_INT 28
19513: PUSH
19514: LD_INT 26
19516: PUSH
19517: LD_INT 30
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 43
19528: PUSH
19529: LD_INT 44
19531: PUSH
19532: LD_INT 46
19534: PUSH
19535: LD_INT 45
19537: PUSH
19538: LD_INT 47
19540: PUSH
19541: LD_INT 49
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: PUSH
19557: LD_VAR 0 12
19561: ARRAY
19562: ST_TO_ADDR
// list := list isect fac_list ;
19563: LD_ADDR_VAR 0 5
19567: PUSH
19568: LD_VAR 0 5
19572: PUSH
19573: LD_VAR 0 17
19577: ISECT
19578: ST_TO_ADDR
// if not list then
19579: LD_VAR 0 5
19583: NOT
19584: IFFALSE 19588
// exit ;
19586: GO 20392
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19588: LD_VAR 0 12
19592: PUSH
19593: LD_INT 3
19595: EQUAL
19596: PUSH
19597: LD_INT 49
19599: PUSH
19600: LD_VAR 0 5
19604: IN
19605: AND
19606: PUSH
19607: LD_INT 31
19609: PPUSH
19610: LD_VAR 0 16
19614: PPUSH
19615: CALL_OW 321
19619: PUSH
19620: LD_INT 2
19622: EQUAL
19623: AND
19624: IFFALSE 19684
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19626: LD_INT 22
19628: PUSH
19629: LD_VAR 0 16
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 35
19640: PUSH
19641: LD_INT 49
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 91
19650: PUSH
19651: LD_VAR 0 1
19655: PUSH
19656: LD_INT 10
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: LIST
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 69
19673: NOT
19674: IFFALSE 19684
// weapon := ru_time_lapser ;
19676: LD_ADDR_VAR 0 18
19680: PUSH
19681: LD_INT 49
19683: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19684: LD_VAR 0 12
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: IN
19699: PUSH
19700: LD_INT 11
19702: PUSH
19703: LD_VAR 0 5
19707: IN
19708: PUSH
19709: LD_INT 30
19711: PUSH
19712: LD_VAR 0 5
19716: IN
19717: OR
19718: AND
19719: PUSH
19720: LD_INT 6
19722: PPUSH
19723: LD_VAR 0 16
19727: PPUSH
19728: CALL_OW 321
19732: PUSH
19733: LD_INT 2
19735: EQUAL
19736: AND
19737: IFFALSE 19902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19739: LD_INT 22
19741: PUSH
19742: LD_VAR 0 16
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 35
19756: PUSH
19757: LD_INT 11
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 35
19766: PUSH
19767: LD_INT 30
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 91
19781: PUSH
19782: LD_VAR 0 1
19786: PUSH
19787: LD_INT 18
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: PPUSH
19800: CALL_OW 69
19804: NOT
19805: PUSH
19806: LD_INT 22
19808: PUSH
19809: LD_VAR 0 16
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: LD_INT 30
19823: PUSH
19824: LD_INT 32
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 30
19833: PUSH
19834: LD_INT 33
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 91
19848: PUSH
19849: LD_VAR 0 1
19853: PUSH
19854: LD_INT 12
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: PPUSH
19870: CALL_OW 69
19874: PUSH
19875: LD_INT 2
19877: GREATER
19878: AND
19879: IFFALSE 19902
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19881: LD_ADDR_VAR 0 18
19885: PUSH
19886: LD_INT 11
19888: PUSH
19889: LD_INT 30
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_VAR 0 12
19900: ARRAY
19901: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19902: LD_VAR 0 18
19906: NOT
19907: PUSH
19908: LD_INT 40
19910: PPUSH
19911: LD_VAR 0 16
19915: PPUSH
19916: CALL_OW 321
19920: PUSH
19921: LD_INT 2
19923: EQUAL
19924: AND
19925: PUSH
19926: LD_INT 7
19928: PUSH
19929: LD_VAR 0 5
19933: IN
19934: PUSH
19935: LD_INT 28
19937: PUSH
19938: LD_VAR 0 5
19942: IN
19943: OR
19944: PUSH
19945: LD_INT 45
19947: PUSH
19948: LD_VAR 0 5
19952: IN
19953: OR
19954: AND
19955: IFFALSE 20209
// begin hex := GetHexInfo ( x , y ) ;
19957: LD_ADDR_VAR 0 4
19961: PUSH
19962: LD_VAR 0 10
19966: PPUSH
19967: LD_VAR 0 11
19971: PPUSH
19972: CALL_OW 546
19976: ST_TO_ADDR
// if hex [ 1 ] then
19977: LD_VAR 0 4
19981: PUSH
19982: LD_INT 1
19984: ARRAY
19985: IFFALSE 19989
// exit ;
19987: GO 20392
// height := hex [ 2 ] ;
19989: LD_ADDR_VAR 0 15
19993: PUSH
19994: LD_VAR 0 4
19998: PUSH
19999: LD_INT 2
20001: ARRAY
20002: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20003: LD_ADDR_VAR 0 14
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: LD_INT 3
20016: PUSH
20017: LD_INT 5
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: ST_TO_ADDR
// for i in tmp do
20026: LD_ADDR_VAR 0 8
20030: PUSH
20031: LD_VAR 0 14
20035: PUSH
20036: FOR_IN
20037: IFFALSE 20207
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20039: LD_ADDR_VAR 0 9
20043: PUSH
20044: LD_VAR 0 10
20048: PPUSH
20049: LD_VAR 0 8
20053: PPUSH
20054: LD_INT 5
20056: PPUSH
20057: CALL_OW 272
20061: PUSH
20062: LD_VAR 0 11
20066: PPUSH
20067: LD_VAR 0 8
20071: PPUSH
20072: LD_INT 5
20074: PPUSH
20075: CALL_OW 273
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20084: LD_VAR 0 9
20088: PUSH
20089: LD_INT 1
20091: ARRAY
20092: PPUSH
20093: LD_VAR 0 9
20097: PUSH
20098: LD_INT 2
20100: ARRAY
20101: PPUSH
20102: CALL_OW 488
20106: IFFALSE 20205
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20108: LD_ADDR_VAR 0 4
20112: PUSH
20113: LD_VAR 0 9
20117: PUSH
20118: LD_INT 1
20120: ARRAY
20121: PPUSH
20122: LD_VAR 0 9
20126: PUSH
20127: LD_INT 2
20129: ARRAY
20130: PPUSH
20131: CALL_OW 546
20135: ST_TO_ADDR
// if hex [ 1 ] then
20136: LD_VAR 0 4
20140: PUSH
20141: LD_INT 1
20143: ARRAY
20144: IFFALSE 20148
// continue ;
20146: GO 20036
// h := hex [ 2 ] ;
20148: LD_ADDR_VAR 0 13
20152: PUSH
20153: LD_VAR 0 4
20157: PUSH
20158: LD_INT 2
20160: ARRAY
20161: ST_TO_ADDR
// if h + 7 < height then
20162: LD_VAR 0 13
20166: PUSH
20167: LD_INT 7
20169: PLUS
20170: PUSH
20171: LD_VAR 0 15
20175: LESS
20176: IFFALSE 20205
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20178: LD_ADDR_VAR 0 18
20182: PUSH
20183: LD_INT 7
20185: PUSH
20186: LD_INT 28
20188: PUSH
20189: LD_INT 45
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: PUSH
20197: LD_VAR 0 12
20201: ARRAY
20202: ST_TO_ADDR
// break ;
20203: GO 20207
// end ; end ; end ;
20205: GO 20036
20207: POP
20208: POP
// end ; if not weapon then
20209: LD_VAR 0 18
20213: NOT
20214: IFFALSE 20274
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20216: LD_ADDR_VAR 0 5
20220: PUSH
20221: LD_VAR 0 5
20225: PUSH
20226: LD_INT 11
20228: PUSH
20229: LD_INT 30
20231: PUSH
20232: LD_INT 49
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: DIFF
20240: ST_TO_ADDR
// if not list then
20241: LD_VAR 0 5
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20392
// weapon := list [ rand ( 1 , list ) ] ;
20250: LD_ADDR_VAR 0 18
20254: PUSH
20255: LD_VAR 0 5
20259: PUSH
20260: LD_INT 1
20262: PPUSH
20263: LD_VAR 0 5
20267: PPUSH
20268: CALL_OW 12
20272: ARRAY
20273: ST_TO_ADDR
// end ; if weapon then
20274: LD_VAR 0 18
20278: IFFALSE 20392
// begin tmp := CostOfWeapon ( weapon ) ;
20280: LD_ADDR_VAR 0 14
20284: PUSH
20285: LD_VAR 0 18
20289: PPUSH
20290: CALL_OW 451
20294: ST_TO_ADDR
// j := GetBase ( tower ) ;
20295: LD_ADDR_VAR 0 9
20299: PUSH
20300: LD_VAR 0 1
20304: PPUSH
20305: CALL_OW 274
20309: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20310: LD_VAR 0 9
20314: PPUSH
20315: LD_INT 1
20317: PPUSH
20318: CALL_OW 275
20322: PUSH
20323: LD_VAR 0 14
20327: PUSH
20328: LD_INT 1
20330: ARRAY
20331: GREATEREQUAL
20332: PUSH
20333: LD_VAR 0 9
20337: PPUSH
20338: LD_INT 2
20340: PPUSH
20341: CALL_OW 275
20345: PUSH
20346: LD_VAR 0 14
20350: PUSH
20351: LD_INT 2
20353: ARRAY
20354: GREATEREQUAL
20355: AND
20356: PUSH
20357: LD_VAR 0 9
20361: PPUSH
20362: LD_INT 3
20364: PPUSH
20365: CALL_OW 275
20369: PUSH
20370: LD_VAR 0 14
20374: PUSH
20375: LD_INT 3
20377: ARRAY
20378: GREATEREQUAL
20379: AND
20380: IFFALSE 20392
// result := weapon ;
20382: LD_ADDR_VAR 0 3
20386: PUSH
20387: LD_VAR 0 18
20391: ST_TO_ADDR
// end ; end ;
20392: LD_VAR 0 3
20396: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20397: LD_INT 0
20399: PPUSH
20400: PPUSH
// result := true ;
20401: LD_ADDR_VAR 0 3
20405: PUSH
20406: LD_INT 1
20408: ST_TO_ADDR
// if array1 = array2 then
20409: LD_VAR 0 1
20413: PUSH
20414: LD_VAR 0 2
20418: EQUAL
20419: IFFALSE 20479
// begin for i = 1 to array1 do
20421: LD_ADDR_VAR 0 4
20425: PUSH
20426: DOUBLE
20427: LD_INT 1
20429: DEC
20430: ST_TO_ADDR
20431: LD_VAR 0 1
20435: PUSH
20436: FOR_TO
20437: IFFALSE 20475
// if array1 [ i ] <> array2 [ i ] then
20439: LD_VAR 0 1
20443: PUSH
20444: LD_VAR 0 4
20448: ARRAY
20449: PUSH
20450: LD_VAR 0 2
20454: PUSH
20455: LD_VAR 0 4
20459: ARRAY
20460: NONEQUAL
20461: IFFALSE 20473
// begin result := false ;
20463: LD_ADDR_VAR 0 3
20467: PUSH
20468: LD_INT 0
20470: ST_TO_ADDR
// break ;
20471: GO 20475
// end ;
20473: GO 20436
20475: POP
20476: POP
// end else
20477: GO 20487
// result := false ;
20479: LD_ADDR_VAR 0 3
20483: PUSH
20484: LD_INT 0
20486: ST_TO_ADDR
// end ;
20487: LD_VAR 0 3
20491: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20492: LD_INT 0
20494: PPUSH
20495: PPUSH
// if not array1 or not array2 then
20496: LD_VAR 0 1
20500: NOT
20501: PUSH
20502: LD_VAR 0 2
20506: NOT
20507: OR
20508: IFFALSE 20512
// exit ;
20510: GO 20576
// result := true ;
20512: LD_ADDR_VAR 0 3
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// for i = 1 to array1 do
20520: LD_ADDR_VAR 0 4
20524: PUSH
20525: DOUBLE
20526: LD_INT 1
20528: DEC
20529: ST_TO_ADDR
20530: LD_VAR 0 1
20534: PUSH
20535: FOR_TO
20536: IFFALSE 20574
// if array1 [ i ] <> array2 [ i ] then
20538: LD_VAR 0 1
20542: PUSH
20543: LD_VAR 0 4
20547: ARRAY
20548: PUSH
20549: LD_VAR 0 2
20553: PUSH
20554: LD_VAR 0 4
20558: ARRAY
20559: NONEQUAL
20560: IFFALSE 20572
// begin result := false ;
20562: LD_ADDR_VAR 0 3
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// break ;
20570: GO 20574
// end ;
20572: GO 20535
20574: POP
20575: POP
// end ;
20576: LD_VAR 0 3
20580: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20581: LD_INT 0
20583: PPUSH
20584: PPUSH
20585: PPUSH
// pom := GetBase ( fac ) ;
20586: LD_ADDR_VAR 0 5
20590: PUSH
20591: LD_VAR 0 1
20595: PPUSH
20596: CALL_OW 274
20600: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20601: LD_ADDR_VAR 0 4
20605: PUSH
20606: LD_VAR 0 2
20610: PUSH
20611: LD_INT 1
20613: ARRAY
20614: PPUSH
20615: LD_VAR 0 2
20619: PUSH
20620: LD_INT 2
20622: ARRAY
20623: PPUSH
20624: LD_VAR 0 2
20628: PUSH
20629: LD_INT 3
20631: ARRAY
20632: PPUSH
20633: LD_VAR 0 2
20637: PUSH
20638: LD_INT 4
20640: ARRAY
20641: PPUSH
20642: CALL_OW 449
20646: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20647: LD_ADDR_VAR 0 3
20651: PUSH
20652: LD_VAR 0 5
20656: PPUSH
20657: LD_INT 1
20659: PPUSH
20660: CALL_OW 275
20664: PUSH
20665: LD_VAR 0 4
20669: PUSH
20670: LD_INT 1
20672: ARRAY
20673: GREATEREQUAL
20674: PUSH
20675: LD_VAR 0 5
20679: PPUSH
20680: LD_INT 2
20682: PPUSH
20683: CALL_OW 275
20687: PUSH
20688: LD_VAR 0 4
20692: PUSH
20693: LD_INT 2
20695: ARRAY
20696: GREATEREQUAL
20697: AND
20698: PUSH
20699: LD_VAR 0 5
20703: PPUSH
20704: LD_INT 3
20706: PPUSH
20707: CALL_OW 275
20711: PUSH
20712: LD_VAR 0 4
20716: PUSH
20717: LD_INT 3
20719: ARRAY
20720: GREATEREQUAL
20721: AND
20722: ST_TO_ADDR
// end ;
20723: LD_VAR 0 3
20727: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20728: LD_INT 0
20730: PPUSH
20731: PPUSH
20732: PPUSH
20733: PPUSH
// pom := GetBase ( building ) ;
20734: LD_ADDR_VAR 0 3
20738: PUSH
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 274
20748: ST_TO_ADDR
// if not pom then
20749: LD_VAR 0 3
20753: NOT
20754: IFFALSE 20758
// exit ;
20756: GO 20928
// btype := GetBType ( building ) ;
20758: LD_ADDR_VAR 0 5
20762: PUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 266
20772: ST_TO_ADDR
// if btype = b_armoury then
20773: LD_VAR 0 5
20777: PUSH
20778: LD_INT 4
20780: EQUAL
20781: IFFALSE 20791
// btype := b_barracks ;
20783: LD_ADDR_VAR 0 5
20787: PUSH
20788: LD_INT 5
20790: ST_TO_ADDR
// if btype = b_depot then
20791: LD_VAR 0 5
20795: PUSH
20796: LD_INT 0
20798: EQUAL
20799: IFFALSE 20809
// btype := b_warehouse ;
20801: LD_ADDR_VAR 0 5
20805: PUSH
20806: LD_INT 1
20808: ST_TO_ADDR
// if btype = b_workshop then
20809: LD_VAR 0 5
20813: PUSH
20814: LD_INT 2
20816: EQUAL
20817: IFFALSE 20827
// btype := b_factory ;
20819: LD_ADDR_VAR 0 5
20823: PUSH
20824: LD_INT 3
20826: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20827: LD_ADDR_VAR 0 4
20831: PUSH
20832: LD_VAR 0 5
20836: PPUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 248
20846: PPUSH
20847: CALL_OW 450
20851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20852: LD_ADDR_VAR 0 2
20856: PUSH
20857: LD_VAR 0 3
20861: PPUSH
20862: LD_INT 1
20864: PPUSH
20865: CALL_OW 275
20869: PUSH
20870: LD_VAR 0 4
20874: PUSH
20875: LD_INT 1
20877: ARRAY
20878: GREATEREQUAL
20879: PUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: LD_INT 2
20887: PPUSH
20888: CALL_OW 275
20892: PUSH
20893: LD_VAR 0 4
20897: PUSH
20898: LD_INT 2
20900: ARRAY
20901: GREATEREQUAL
20902: AND
20903: PUSH
20904: LD_VAR 0 3
20908: PPUSH
20909: LD_INT 3
20911: PPUSH
20912: CALL_OW 275
20916: PUSH
20917: LD_VAR 0 4
20921: PUSH
20922: LD_INT 3
20924: ARRAY
20925: GREATEREQUAL
20926: AND
20927: ST_TO_ADDR
// end ;
20928: LD_VAR 0 2
20932: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20933: LD_INT 0
20935: PPUSH
20936: PPUSH
20937: PPUSH
// pom := GetBase ( building ) ;
20938: LD_ADDR_VAR 0 4
20942: PUSH
20943: LD_VAR 0 1
20947: PPUSH
20948: CALL_OW 274
20952: ST_TO_ADDR
// if not pom then
20953: LD_VAR 0 4
20957: NOT
20958: IFFALSE 20962
// exit ;
20960: GO 21063
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20962: LD_ADDR_VAR 0 5
20966: PUSH
20967: LD_VAR 0 2
20971: PPUSH
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL_OW 248
20981: PPUSH
20982: CALL_OW 450
20986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20987: LD_ADDR_VAR 0 3
20991: PUSH
20992: LD_VAR 0 4
20996: PPUSH
20997: LD_INT 1
20999: PPUSH
21000: CALL_OW 275
21004: PUSH
21005: LD_VAR 0 5
21009: PUSH
21010: LD_INT 1
21012: ARRAY
21013: GREATEREQUAL
21014: PUSH
21015: LD_VAR 0 4
21019: PPUSH
21020: LD_INT 2
21022: PPUSH
21023: CALL_OW 275
21027: PUSH
21028: LD_VAR 0 5
21032: PUSH
21033: LD_INT 2
21035: ARRAY
21036: GREATEREQUAL
21037: AND
21038: PUSH
21039: LD_VAR 0 4
21043: PPUSH
21044: LD_INT 3
21046: PPUSH
21047: CALL_OW 275
21051: PUSH
21052: LD_VAR 0 5
21056: PUSH
21057: LD_INT 3
21059: ARRAY
21060: GREATEREQUAL
21061: AND
21062: ST_TO_ADDR
// end ;
21063: LD_VAR 0 3
21067: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21068: LD_INT 0
21070: PPUSH
21071: PPUSH
21072: PPUSH
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
// result := false ;
21081: LD_ADDR_VAR 0 8
21085: PUSH
21086: LD_INT 0
21088: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21089: LD_VAR 0 5
21093: NOT
21094: PUSH
21095: LD_VAR 0 1
21099: NOT
21100: OR
21101: PUSH
21102: LD_VAR 0 2
21106: NOT
21107: OR
21108: PUSH
21109: LD_VAR 0 3
21113: NOT
21114: OR
21115: IFFALSE 21119
// exit ;
21117: GO 21933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21119: LD_ADDR_VAR 0 14
21123: PUSH
21124: LD_VAR 0 1
21128: PPUSH
21129: LD_VAR 0 2
21133: PPUSH
21134: LD_VAR 0 3
21138: PPUSH
21139: LD_VAR 0 4
21143: PPUSH
21144: LD_VAR 0 5
21148: PUSH
21149: LD_INT 1
21151: ARRAY
21152: PPUSH
21153: CALL_OW 248
21157: PPUSH
21158: LD_INT 0
21160: PPUSH
21161: CALL 23186 0 6
21165: ST_TO_ADDR
// if not hexes then
21166: LD_VAR 0 14
21170: NOT
21171: IFFALSE 21175
// exit ;
21173: GO 21933
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21175: LD_ADDR_VAR 0 17
21179: PUSH
21180: LD_VAR 0 5
21184: PPUSH
21185: LD_INT 22
21187: PUSH
21188: LD_VAR 0 13
21192: PPUSH
21193: CALL_OW 255
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: LD_INT 30
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 30
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PPUSH
21234: CALL_OW 72
21238: ST_TO_ADDR
// for i = 1 to hexes do
21239: LD_ADDR_VAR 0 9
21243: PUSH
21244: DOUBLE
21245: LD_INT 1
21247: DEC
21248: ST_TO_ADDR
21249: LD_VAR 0 14
21253: PUSH
21254: FOR_TO
21255: IFFALSE 21931
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21257: LD_ADDR_VAR 0 13
21261: PUSH
21262: LD_VAR 0 14
21266: PUSH
21267: LD_VAR 0 9
21271: ARRAY
21272: PUSH
21273: LD_INT 1
21275: ARRAY
21276: PPUSH
21277: LD_VAR 0 14
21281: PUSH
21282: LD_VAR 0 9
21286: ARRAY
21287: PUSH
21288: LD_INT 2
21290: ARRAY
21291: PPUSH
21292: CALL_OW 428
21296: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21297: LD_VAR 0 14
21301: PUSH
21302: LD_VAR 0 9
21306: ARRAY
21307: PUSH
21308: LD_INT 1
21310: ARRAY
21311: PPUSH
21312: LD_VAR 0 14
21316: PUSH
21317: LD_VAR 0 9
21321: ARRAY
21322: PUSH
21323: LD_INT 2
21325: ARRAY
21326: PPUSH
21327: CALL_OW 351
21331: PUSH
21332: LD_VAR 0 14
21336: PUSH
21337: LD_VAR 0 9
21341: ARRAY
21342: PUSH
21343: LD_INT 1
21345: ARRAY
21346: PPUSH
21347: LD_VAR 0 14
21351: PUSH
21352: LD_VAR 0 9
21356: ARRAY
21357: PUSH
21358: LD_INT 2
21360: ARRAY
21361: PPUSH
21362: CALL_OW 488
21366: NOT
21367: OR
21368: PUSH
21369: LD_VAR 0 13
21373: PPUSH
21374: CALL_OW 247
21378: PUSH
21379: LD_INT 3
21381: EQUAL
21382: OR
21383: IFFALSE 21389
// exit ;
21385: POP
21386: POP
21387: GO 21933
// if not tmp then
21389: LD_VAR 0 13
21393: NOT
21394: IFFALSE 21398
// continue ;
21396: GO 21254
// result := true ;
21398: LD_ADDR_VAR 0 8
21402: PUSH
21403: LD_INT 1
21405: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21406: LD_VAR 0 6
21410: PUSH
21411: LD_VAR 0 13
21415: PPUSH
21416: CALL_OW 247
21420: PUSH
21421: LD_INT 2
21423: EQUAL
21424: AND
21425: PUSH
21426: LD_VAR 0 13
21430: PPUSH
21431: CALL_OW 263
21435: PUSH
21436: LD_INT 1
21438: EQUAL
21439: AND
21440: IFFALSE 21604
// begin if IsDrivenBy ( tmp ) then
21442: LD_VAR 0 13
21446: PPUSH
21447: CALL_OW 311
21451: IFFALSE 21455
// continue ;
21453: GO 21254
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21455: LD_VAR 0 6
21459: PPUSH
21460: LD_INT 3
21462: PUSH
21463: LD_INT 60
21465: PUSH
21466: EMPTY
21467: LIST
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 3
21475: PUSH
21476: LD_INT 55
21478: PUSH
21479: EMPTY
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PPUSH
21490: CALL_OW 72
21494: IFFALSE 21602
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21496: LD_ADDR_VAR 0 18
21500: PUSH
21501: LD_VAR 0 6
21505: PPUSH
21506: LD_INT 3
21508: PUSH
21509: LD_INT 60
21511: PUSH
21512: EMPTY
21513: LIST
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 3
21521: PUSH
21522: LD_INT 55
21524: PUSH
21525: EMPTY
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PPUSH
21536: CALL_OW 72
21540: PUSH
21541: LD_INT 1
21543: ARRAY
21544: ST_TO_ADDR
// if IsInUnit ( driver ) then
21545: LD_VAR 0 18
21549: PPUSH
21550: CALL_OW 310
21554: IFFALSE 21565
// ComExit ( driver ) ;
21556: LD_VAR 0 18
21560: PPUSH
21561: CALL 46967 0 1
// AddComEnterUnit ( driver , tmp ) ;
21565: LD_VAR 0 18
21569: PPUSH
21570: LD_VAR 0 13
21574: PPUSH
21575: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21579: LD_VAR 0 18
21583: PPUSH
21584: LD_VAR 0 7
21588: PPUSH
21589: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21593: LD_VAR 0 18
21597: PPUSH
21598: CALL_OW 181
// end ; continue ;
21602: GO 21254
// end ; if not cleaners or not tmp in cleaners then
21604: LD_VAR 0 6
21608: NOT
21609: PUSH
21610: LD_VAR 0 13
21614: PUSH
21615: LD_VAR 0 6
21619: IN
21620: NOT
21621: OR
21622: IFFALSE 21929
// begin if dep then
21624: LD_VAR 0 17
21628: IFFALSE 21764
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21630: LD_ADDR_VAR 0 16
21634: PUSH
21635: LD_VAR 0 17
21639: PUSH
21640: LD_INT 1
21642: ARRAY
21643: PPUSH
21644: CALL_OW 250
21648: PPUSH
21649: LD_VAR 0 17
21653: PUSH
21654: LD_INT 1
21656: ARRAY
21657: PPUSH
21658: CALL_OW 254
21662: PPUSH
21663: LD_INT 5
21665: PPUSH
21666: CALL_OW 272
21670: PUSH
21671: LD_VAR 0 17
21675: PUSH
21676: LD_INT 1
21678: ARRAY
21679: PPUSH
21680: CALL_OW 251
21684: PPUSH
21685: LD_VAR 0 17
21689: PUSH
21690: LD_INT 1
21692: ARRAY
21693: PPUSH
21694: CALL_OW 254
21698: PPUSH
21699: LD_INT 5
21701: PPUSH
21702: CALL_OW 273
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21711: LD_VAR 0 16
21715: PUSH
21716: LD_INT 1
21718: ARRAY
21719: PPUSH
21720: LD_VAR 0 16
21724: PUSH
21725: LD_INT 2
21727: ARRAY
21728: PPUSH
21729: CALL_OW 488
21733: IFFALSE 21764
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21735: LD_VAR 0 13
21739: PPUSH
21740: LD_VAR 0 16
21744: PUSH
21745: LD_INT 1
21747: ARRAY
21748: PPUSH
21749: LD_VAR 0 16
21753: PUSH
21754: LD_INT 2
21756: ARRAY
21757: PPUSH
21758: CALL_OW 111
// continue ;
21762: GO 21254
// end ; end ; r := GetDir ( tmp ) ;
21764: LD_ADDR_VAR 0 15
21768: PUSH
21769: LD_VAR 0 13
21773: PPUSH
21774: CALL_OW 254
21778: ST_TO_ADDR
// if r = 5 then
21779: LD_VAR 0 15
21783: PUSH
21784: LD_INT 5
21786: EQUAL
21787: IFFALSE 21797
// r := 0 ;
21789: LD_ADDR_VAR 0 15
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// for j = r to 5 do
21797: LD_ADDR_VAR 0 10
21801: PUSH
21802: DOUBLE
21803: LD_VAR 0 15
21807: DEC
21808: ST_TO_ADDR
21809: LD_INT 5
21811: PUSH
21812: FOR_TO
21813: IFFALSE 21927
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21815: LD_ADDR_VAR 0 11
21819: PUSH
21820: LD_VAR 0 13
21824: PPUSH
21825: CALL_OW 250
21829: PPUSH
21830: LD_VAR 0 10
21834: PPUSH
21835: LD_INT 2
21837: PPUSH
21838: CALL_OW 272
21842: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21843: LD_ADDR_VAR 0 12
21847: PUSH
21848: LD_VAR 0 13
21852: PPUSH
21853: CALL_OW 251
21857: PPUSH
21858: LD_VAR 0 10
21862: PPUSH
21863: LD_INT 2
21865: PPUSH
21866: CALL_OW 273
21870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21871: LD_VAR 0 11
21875: PPUSH
21876: LD_VAR 0 12
21880: PPUSH
21881: CALL_OW 488
21885: PUSH
21886: LD_VAR 0 11
21890: PPUSH
21891: LD_VAR 0 12
21895: PPUSH
21896: CALL_OW 428
21900: NOT
21901: AND
21902: IFFALSE 21925
// begin ComMoveXY ( tmp , _x , _y ) ;
21904: LD_VAR 0 13
21908: PPUSH
21909: LD_VAR 0 11
21913: PPUSH
21914: LD_VAR 0 12
21918: PPUSH
21919: CALL_OW 111
// break ;
21923: GO 21927
// end ; end ;
21925: GO 21812
21927: POP
21928: POP
// end ; end ;
21929: GO 21254
21931: POP
21932: POP
// end ;
21933: LD_VAR 0 8
21937: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21938: LD_INT 0
21940: PPUSH
// result := true ;
21941: LD_ADDR_VAR 0 3
21945: PUSH
21946: LD_INT 1
21948: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21949: LD_VAR 0 2
21953: PUSH
21954: LD_INT 24
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21968
21960: LD_INT 33
21962: DOUBLE
21963: EQUAL
21964: IFTRUE 21968
21966: GO 21993
21968: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: LD_INT 32
21976: PPUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 321
21986: PUSH
21987: LD_INT 2
21989: EQUAL
21990: ST_TO_ADDR
21991: GO 22309
21993: LD_INT 20
21995: DOUBLE
21996: EQUAL
21997: IFTRUE 22001
21999: GO 22026
22001: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22002: LD_ADDR_VAR 0 3
22006: PUSH
22007: LD_INT 6
22009: PPUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 321
22019: PUSH
22020: LD_INT 2
22022: EQUAL
22023: ST_TO_ADDR
22024: GO 22309
22026: LD_INT 22
22028: DOUBLE
22029: EQUAL
22030: IFTRUE 22040
22032: LD_INT 36
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22065
22040: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22041: LD_ADDR_VAR 0 3
22045: PUSH
22046: LD_INT 15
22048: PPUSH
22049: LD_VAR 0 1
22053: PPUSH
22054: CALL_OW 321
22058: PUSH
22059: LD_INT 2
22061: EQUAL
22062: ST_TO_ADDR
22063: GO 22309
22065: LD_INT 30
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22098
22073: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22074: LD_ADDR_VAR 0 3
22078: PUSH
22079: LD_INT 20
22081: PPUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 321
22091: PUSH
22092: LD_INT 2
22094: EQUAL
22095: ST_TO_ADDR
22096: GO 22309
22098: LD_INT 28
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22112
22104: LD_INT 21
22106: DOUBLE
22107: EQUAL
22108: IFTRUE 22112
22110: GO 22137
22112: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22113: LD_ADDR_VAR 0 3
22117: PUSH
22118: LD_INT 21
22120: PPUSH
22121: LD_VAR 0 1
22125: PPUSH
22126: CALL_OW 321
22130: PUSH
22131: LD_INT 2
22133: EQUAL
22134: ST_TO_ADDR
22135: GO 22309
22137: LD_INT 16
22139: DOUBLE
22140: EQUAL
22141: IFTRUE 22145
22143: GO 22170
22145: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22146: LD_ADDR_VAR 0 3
22150: PUSH
22151: LD_INT 84
22153: PPUSH
22154: LD_VAR 0 1
22158: PPUSH
22159: CALL_OW 321
22163: PUSH
22164: LD_INT 2
22166: EQUAL
22167: ST_TO_ADDR
22168: GO 22309
22170: LD_INT 19
22172: DOUBLE
22173: EQUAL
22174: IFTRUE 22184
22176: LD_INT 23
22178: DOUBLE
22179: EQUAL
22180: IFTRUE 22184
22182: GO 22209
22184: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22185: LD_ADDR_VAR 0 3
22189: PUSH
22190: LD_INT 83
22192: PPUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 321
22202: PUSH
22203: LD_INT 2
22205: EQUAL
22206: ST_TO_ADDR
22207: GO 22309
22209: LD_INT 17
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22242
22217: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22218: LD_ADDR_VAR 0 3
22222: PUSH
22223: LD_INT 39
22225: PPUSH
22226: LD_VAR 0 1
22230: PPUSH
22231: CALL_OW 321
22235: PUSH
22236: LD_INT 2
22238: EQUAL
22239: ST_TO_ADDR
22240: GO 22309
22242: LD_INT 18
22244: DOUBLE
22245: EQUAL
22246: IFTRUE 22250
22248: GO 22275
22250: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22251: LD_ADDR_VAR 0 3
22255: PUSH
22256: LD_INT 40
22258: PPUSH
22259: LD_VAR 0 1
22263: PPUSH
22264: CALL_OW 321
22268: PUSH
22269: LD_INT 2
22271: EQUAL
22272: ST_TO_ADDR
22273: GO 22309
22275: LD_INT 27
22277: DOUBLE
22278: EQUAL
22279: IFTRUE 22283
22281: GO 22308
22283: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22284: LD_ADDR_VAR 0 3
22288: PUSH
22289: LD_INT 35
22291: PPUSH
22292: LD_VAR 0 1
22296: PPUSH
22297: CALL_OW 321
22301: PUSH
22302: LD_INT 2
22304: EQUAL
22305: ST_TO_ADDR
22306: GO 22309
22308: POP
// end ;
22309: LD_VAR 0 3
22313: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22314: LD_INT 0
22316: PPUSH
22317: PPUSH
22318: PPUSH
22319: PPUSH
22320: PPUSH
22321: PPUSH
22322: PPUSH
22323: PPUSH
22324: PPUSH
22325: PPUSH
22326: PPUSH
// result := false ;
22327: LD_ADDR_VAR 0 6
22331: PUSH
22332: LD_INT 0
22334: ST_TO_ADDR
// if btype = b_depot then
22335: LD_VAR 0 2
22339: PUSH
22340: LD_INT 0
22342: EQUAL
22343: IFFALSE 22355
// begin result := true ;
22345: LD_ADDR_VAR 0 6
22349: PUSH
22350: LD_INT 1
22352: ST_TO_ADDR
// exit ;
22353: GO 23181
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22355: LD_VAR 0 1
22359: NOT
22360: PUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 266
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: IN
22381: NOT
22382: OR
22383: PUSH
22384: LD_VAR 0 2
22388: NOT
22389: OR
22390: PUSH
22391: LD_VAR 0 5
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: LD_INT 3
22407: PUSH
22408: LD_INT 4
22410: PUSH
22411: LD_INT 5
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: IN
22422: NOT
22423: OR
22424: PUSH
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_VAR 0 4
22434: PPUSH
22435: CALL_OW 488
22439: NOT
22440: OR
22441: IFFALSE 22445
// exit ;
22443: GO 23181
// side := GetSide ( depot ) ;
22445: LD_ADDR_VAR 0 9
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 255
22459: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22460: LD_VAR 0 9
22464: PPUSH
22465: LD_VAR 0 2
22469: PPUSH
22470: CALL 21938 0 2
22474: NOT
22475: IFFALSE 22479
// exit ;
22477: GO 23181
// pom := GetBase ( depot ) ;
22479: LD_ADDR_VAR 0 10
22483: PUSH
22484: LD_VAR 0 1
22488: PPUSH
22489: CALL_OW 274
22493: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22494: LD_ADDR_VAR 0 11
22498: PUSH
22499: LD_VAR 0 2
22503: PPUSH
22504: LD_VAR 0 1
22508: PPUSH
22509: CALL_OW 248
22513: PPUSH
22514: CALL_OW 450
22518: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22519: LD_VAR 0 10
22523: PPUSH
22524: LD_INT 1
22526: PPUSH
22527: CALL_OW 275
22531: PUSH
22532: LD_VAR 0 11
22536: PUSH
22537: LD_INT 1
22539: ARRAY
22540: GREATEREQUAL
22541: PUSH
22542: LD_VAR 0 10
22546: PPUSH
22547: LD_INT 2
22549: PPUSH
22550: CALL_OW 275
22554: PUSH
22555: LD_VAR 0 11
22559: PUSH
22560: LD_INT 2
22562: ARRAY
22563: GREATEREQUAL
22564: AND
22565: PUSH
22566: LD_VAR 0 10
22570: PPUSH
22571: LD_INT 3
22573: PPUSH
22574: CALL_OW 275
22578: PUSH
22579: LD_VAR 0 11
22583: PUSH
22584: LD_INT 3
22586: ARRAY
22587: GREATEREQUAL
22588: AND
22589: NOT
22590: IFFALSE 22594
// exit ;
22592: GO 23181
// if GetBType ( depot ) = b_depot then
22594: LD_VAR 0 1
22598: PPUSH
22599: CALL_OW 266
22603: PUSH
22604: LD_INT 0
22606: EQUAL
22607: IFFALSE 22619
// dist := 28 else
22609: LD_ADDR_VAR 0 14
22613: PUSH
22614: LD_INT 28
22616: ST_TO_ADDR
22617: GO 22627
// dist := 36 ;
22619: LD_ADDR_VAR 0 14
22623: PUSH
22624: LD_INT 36
22626: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22627: LD_VAR 0 1
22631: PPUSH
22632: LD_VAR 0 3
22636: PPUSH
22637: LD_VAR 0 4
22641: PPUSH
22642: CALL_OW 297
22646: PUSH
22647: LD_VAR 0 14
22651: GREATER
22652: IFFALSE 22656
// exit ;
22654: GO 23181
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22656: LD_ADDR_VAR 0 12
22660: PUSH
22661: LD_VAR 0 2
22665: PPUSH
22666: LD_VAR 0 3
22670: PPUSH
22671: LD_VAR 0 4
22675: PPUSH
22676: LD_VAR 0 5
22680: PPUSH
22681: LD_VAR 0 1
22685: PPUSH
22686: CALL_OW 248
22690: PPUSH
22691: LD_INT 0
22693: PPUSH
22694: CALL 23186 0 6
22698: ST_TO_ADDR
// if not hexes then
22699: LD_VAR 0 12
22703: NOT
22704: IFFALSE 22708
// exit ;
22706: GO 23181
// hex := GetHexInfo ( x , y ) ;
22708: LD_ADDR_VAR 0 15
22712: PUSH
22713: LD_VAR 0 3
22717: PPUSH
22718: LD_VAR 0 4
22722: PPUSH
22723: CALL_OW 546
22727: ST_TO_ADDR
// if hex [ 1 ] then
22728: LD_VAR 0 15
22732: PUSH
22733: LD_INT 1
22735: ARRAY
22736: IFFALSE 22740
// exit ;
22738: GO 23181
// height := hex [ 2 ] ;
22740: LD_ADDR_VAR 0 13
22744: PUSH
22745: LD_VAR 0 15
22749: PUSH
22750: LD_INT 2
22752: ARRAY
22753: ST_TO_ADDR
// for i = 1 to hexes do
22754: LD_ADDR_VAR 0 7
22758: PUSH
22759: DOUBLE
22760: LD_INT 1
22762: DEC
22763: ST_TO_ADDR
22764: LD_VAR 0 12
22768: PUSH
22769: FOR_TO
22770: IFFALSE 23100
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22772: LD_VAR 0 12
22776: PUSH
22777: LD_VAR 0 7
22781: ARRAY
22782: PUSH
22783: LD_INT 1
22785: ARRAY
22786: PPUSH
22787: LD_VAR 0 12
22791: PUSH
22792: LD_VAR 0 7
22796: ARRAY
22797: PUSH
22798: LD_INT 2
22800: ARRAY
22801: PPUSH
22802: CALL_OW 488
22806: NOT
22807: PUSH
22808: LD_VAR 0 12
22812: PUSH
22813: LD_VAR 0 7
22817: ARRAY
22818: PUSH
22819: LD_INT 1
22821: ARRAY
22822: PPUSH
22823: LD_VAR 0 12
22827: PUSH
22828: LD_VAR 0 7
22832: ARRAY
22833: PUSH
22834: LD_INT 2
22836: ARRAY
22837: PPUSH
22838: CALL_OW 428
22842: PUSH
22843: LD_INT 0
22845: GREATER
22846: OR
22847: PUSH
22848: LD_VAR 0 12
22852: PUSH
22853: LD_VAR 0 7
22857: ARRAY
22858: PUSH
22859: LD_INT 1
22861: ARRAY
22862: PPUSH
22863: LD_VAR 0 12
22867: PUSH
22868: LD_VAR 0 7
22872: ARRAY
22873: PUSH
22874: LD_INT 2
22876: ARRAY
22877: PPUSH
22878: CALL_OW 351
22882: OR
22883: IFFALSE 22889
// exit ;
22885: POP
22886: POP
22887: GO 23181
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22889: LD_ADDR_VAR 0 8
22893: PUSH
22894: LD_VAR 0 12
22898: PUSH
22899: LD_VAR 0 7
22903: ARRAY
22904: PUSH
22905: LD_INT 1
22907: ARRAY
22908: PPUSH
22909: LD_VAR 0 12
22913: PUSH
22914: LD_VAR 0 7
22918: ARRAY
22919: PUSH
22920: LD_INT 2
22922: ARRAY
22923: PPUSH
22924: CALL_OW 546
22928: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22929: LD_VAR 0 8
22933: PUSH
22934: LD_INT 1
22936: ARRAY
22937: PUSH
22938: LD_VAR 0 8
22942: PUSH
22943: LD_INT 2
22945: ARRAY
22946: PUSH
22947: LD_VAR 0 13
22951: PUSH
22952: LD_INT 2
22954: PLUS
22955: GREATER
22956: OR
22957: PUSH
22958: LD_VAR 0 8
22962: PUSH
22963: LD_INT 2
22965: ARRAY
22966: PUSH
22967: LD_VAR 0 13
22971: PUSH
22972: LD_INT 2
22974: MINUS
22975: LESS
22976: OR
22977: PUSH
22978: LD_VAR 0 8
22982: PUSH
22983: LD_INT 3
22985: ARRAY
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 8
22992: PUSH
22993: LD_INT 9
22995: PUSH
22996: LD_INT 10
22998: PUSH
22999: LD_INT 11
23001: PUSH
23002: LD_INT 12
23004: PUSH
23005: LD_INT 13
23007: PUSH
23008: LD_INT 16
23010: PUSH
23011: LD_INT 17
23013: PUSH
23014: LD_INT 18
23016: PUSH
23017: LD_INT 19
23019: PUSH
23020: LD_INT 20
23022: PUSH
23023: LD_INT 21
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: IN
23041: NOT
23042: OR
23043: PUSH
23044: LD_VAR 0 8
23048: PUSH
23049: LD_INT 5
23051: ARRAY
23052: NOT
23053: OR
23054: PUSH
23055: LD_VAR 0 8
23059: PUSH
23060: LD_INT 6
23062: ARRAY
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: LD_INT 7
23072: PUSH
23073: LD_INT 9
23075: PUSH
23076: LD_INT 10
23078: PUSH
23079: LD_INT 11
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: IN
23090: NOT
23091: OR
23092: IFFALSE 23098
// exit ;
23094: POP
23095: POP
23096: GO 23181
// end ;
23098: GO 22769
23100: POP
23101: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23102: LD_VAR 0 9
23106: PPUSH
23107: LD_VAR 0 3
23111: PPUSH
23112: LD_VAR 0 4
23116: PPUSH
23117: LD_INT 20
23119: PPUSH
23120: CALL 15104 0 4
23124: PUSH
23125: LD_INT 4
23127: ARRAY
23128: IFFALSE 23132
// exit ;
23130: GO 23181
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23132: LD_VAR 0 2
23136: PUSH
23137: LD_INT 29
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: IN
23147: PUSH
23148: LD_VAR 0 3
23152: PPUSH
23153: LD_VAR 0 4
23157: PPUSH
23158: LD_VAR 0 9
23162: PPUSH
23163: CALL_OW 440
23167: NOT
23168: AND
23169: IFFALSE 23173
// exit ;
23171: GO 23181
// result := true ;
23173: LD_ADDR_VAR 0 6
23177: PUSH
23178: LD_INT 1
23180: ST_TO_ADDR
// end ;
23181: LD_VAR 0 6
23185: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23186: LD_INT 0
23188: PPUSH
23189: PPUSH
23190: PPUSH
23191: PPUSH
23192: PPUSH
23193: PPUSH
23194: PPUSH
23195: PPUSH
23196: PPUSH
23197: PPUSH
23198: PPUSH
23199: PPUSH
23200: PPUSH
23201: PPUSH
23202: PPUSH
23203: PPUSH
23204: PPUSH
23205: PPUSH
23206: PPUSH
23207: PPUSH
23208: PPUSH
23209: PPUSH
23210: PPUSH
23211: PPUSH
23212: PPUSH
23213: PPUSH
23214: PPUSH
23215: PPUSH
23216: PPUSH
23217: PPUSH
23218: PPUSH
23219: PPUSH
23220: PPUSH
23221: PPUSH
23222: PPUSH
23223: PPUSH
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
23233: PPUSH
23234: PPUSH
23235: PPUSH
23236: PPUSH
23237: PPUSH
23238: PPUSH
23239: PPUSH
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
// result = [ ] ;
23246: LD_ADDR_VAR 0 7
23250: PUSH
23251: EMPTY
23252: ST_TO_ADDR
// temp_list = [ ] ;
23253: LD_ADDR_VAR 0 9
23257: PUSH
23258: EMPTY
23259: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23260: LD_VAR 0 4
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: LD_INT 3
23276: PUSH
23277: LD_INT 4
23279: PUSH
23280: LD_INT 5
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: IN
23291: NOT
23292: PUSH
23293: LD_VAR 0 1
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: IN
23308: PUSH
23309: LD_VAR 0 5
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 3
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: IN
23328: NOT
23329: AND
23330: OR
23331: IFFALSE 23335
// exit ;
23333: GO 41726
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23335: LD_VAR 0 1
23339: PUSH
23340: LD_INT 6
23342: PUSH
23343: LD_INT 7
23345: PUSH
23346: LD_INT 8
23348: PUSH
23349: LD_INT 13
23351: PUSH
23352: LD_INT 12
23354: PUSH
23355: LD_INT 15
23357: PUSH
23358: LD_INT 11
23360: PUSH
23361: LD_INT 14
23363: PUSH
23364: LD_INT 10
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: IN
23378: IFFALSE 23388
// btype = b_lab ;
23380: LD_ADDR_VAR 0 1
23384: PUSH
23385: LD_INT 6
23387: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23388: LD_VAR 0 6
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: IN
23407: NOT
23408: PUSH
23409: LD_VAR 0 1
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: LD_INT 6
23428: PUSH
23429: LD_INT 36
23431: PUSH
23432: LD_INT 4
23434: PUSH
23435: LD_INT 5
23437: PUSH
23438: LD_INT 31
23440: PUSH
23441: LD_INT 32
23443: PUSH
23444: LD_INT 33
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: IN
23460: NOT
23461: PUSH
23462: LD_VAR 0 6
23466: PUSH
23467: LD_INT 1
23469: EQUAL
23470: AND
23471: OR
23472: PUSH
23473: LD_VAR 0 1
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: IN
23488: NOT
23489: PUSH
23490: LD_VAR 0 6
23494: PUSH
23495: LD_INT 2
23497: EQUAL
23498: AND
23499: OR
23500: IFFALSE 23510
// mode = 0 ;
23502: LD_ADDR_VAR 0 6
23506: PUSH
23507: LD_INT 0
23509: ST_TO_ADDR
// case mode of 0 :
23510: LD_VAR 0 6
23514: PUSH
23515: LD_INT 0
23517: DOUBLE
23518: EQUAL
23519: IFTRUE 23523
23521: GO 34976
23523: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23524: LD_ADDR_VAR 0 11
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 3
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 3
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23717: LD_ADDR_VAR 0 12
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 0
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: LD_INT 1
23790: NEG
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 2
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 2
23840: NEG
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 2
23851: NEG
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 3
23874: NEG
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 3
23885: NEG
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23913: LD_ADDR_VAR 0 13
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: LD_INT 2
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: NEG
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: LD_INT 2
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 2
24060: NEG
24061: PUSH
24062: LD_INT 3
24064: NEG
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 3
24072: NEG
24073: PUSH
24074: LD_INT 2
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 3
24084: NEG
24085: PUSH
24086: LD_INT 3
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24112: LD_ADDR_VAR 0 14
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: NEG
24194: PUSH
24195: LD_INT 2
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 3
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 3
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24308: LD_ADDR_VAR 0 15
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 3
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24501: LD_ADDR_VAR 0 16
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: LD_INT 2
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: NEG
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 3
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: LD_INT 3
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: LD_INT 3
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24694: LD_ADDR_VAR 0 17
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 2
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: LD_INT 2
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: NEG
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 2
24881: NEG
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 2
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24924: LD_ADDR_VAR 0 18
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 1
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: LD_INT 2
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: LD_INT 2
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 2
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: LD_INT 2
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25154: LD_ADDR_VAR 0 19
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 2
25330: NEG
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: LD_INT 2
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25384: LD_ADDR_VAR 0 20
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: LD_INT 2
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 2
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25614: LD_ADDR_VAR 0 21
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 2
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: NEG
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25844: LD_ADDR_VAR 0 22
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: LD_INT 2
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: LD_INT 2
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: NEG
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: LD_INT 2
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26074: LD_ADDR_VAR 0 23
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 2
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 2
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 2
26250: NEG
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: LD_INT 2
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 2
26285: NEG
26286: PUSH
26287: LD_INT 3
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 3
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26354: LD_ADDR_VAR 0 24
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 3
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26630: LD_ADDR_VAR 0 25
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: LD_INT 1
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: LD_INT 1
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 1
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: LD_INT 2
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 2
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 2
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 2
26829: NEG
26830: PUSH
26831: LD_INT 2
26833: NEG
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 3
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 3
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 3
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26904: LD_ADDR_VAR 0 26
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 2
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 2
27103: NEG
27104: PUSH
27105: LD_INT 2
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 3
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: LD_INT 3
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: LD_INT 2
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27180: LD_ADDR_VAR 0 27
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 2
27276: NEG
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 2
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 2
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 2
27356: NEG
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: NEG
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 1
27391: NEG
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 3
27413: NEG
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 3
27425: NEG
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27460: LD_ADDR_VAR 0 28
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: LD_INT 3
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 3
27695: NEG
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 3
27707: NEG
27708: PUSH
27709: LD_INT 2
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27742: LD_ADDR_VAR 0 29
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: NEG
27909: PUSH
27910: LD_INT 1
27912: NEG
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: LD_INT 2
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: NEG
27933: PUSH
27934: LD_INT 3
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 3
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: LD_INT 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 3
27986: NEG
27987: PUSH
27988: LD_INT 2
27990: NEG
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28021: LD_ADDR_VAR 0 30
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 2
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: NEG
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 3
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 2
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 3
28233: PUSH
28234: LD_INT 2
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: LD_INT 3
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 3
28264: NEG
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28299: LD_ADDR_VAR 0 31
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 2
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 2
28464: NEG
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: NEG
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 2
28488: NEG
28489: PUSH
28490: LD_INT 3
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 3
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 3
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 3
28542: NEG
28543: PUSH
28544: LD_INT 2
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28577: LD_ADDR_VAR 0 32
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 2
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 2
28754: NEG
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: LD_INT 3
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 3
28789: PUSH
28790: LD_INT 2
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 3
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 3
28820: NEG
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28855: LD_ADDR_VAR 0 33
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: NEG
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: LD_INT 3
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 3
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 3
29099: NEG
29100: PUSH
29101: LD_INT 2
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29134: LD_ADDR_VAR 0 34
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: LD_INT 1
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: NEG
29216: PUSH
29217: LD_INT 2
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 2
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: LD_INT 3
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29414: LD_ADDR_VAR 0 35
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 2
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29526: LD_ADDR_VAR 0 36
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29638: LD_ADDR_VAR 0 37
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: NEG
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29750: LD_ADDR_VAR 0 38
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29862: LD_ADDR_VAR 0 39
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: LD_INT 2
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29974: LD_ADDR_VAR 0 40
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30086: LD_ADDR_VAR 0 41
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: LD_INT 2
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 2
30241: NEG
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: LD_INT 2
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 2
30276: NEG
30277: PUSH
30278: LD_INT 3
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 3
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 3
30309: PUSH
30310: LD_INT 1
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 3
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: NEG
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 3
30360: NEG
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 3
30371: NEG
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: NEG
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 3
30395: NEG
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30436: LD_ADDR_VAR 0 42
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: LD_INT 3
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 3
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 3
30733: NEG
30734: PUSH
30735: LD_INT 2
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 3
30745: NEG
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30786: LD_ADDR_VAR 0 43
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: NEG
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 2
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 3
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 3
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 3
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 3
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 3
31082: NEG
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 3
31093: NEG
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31134: LD_ADDR_VAR 0 44
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: LD_INT 2
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 3
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 3
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 3
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 3
31408: NEG
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 3
31419: NEG
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: LD_INT 3
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31484: LD_ADDR_VAR 0 45
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 3
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 3
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 3
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: NEG
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31834: LD_ADDR_VAR 0 46
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 3
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: LD_INT 3
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 3
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: NEG
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: NEG
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32182: LD_ADDR_VAR 0 47
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 2
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: NEG
32310: PUSH
32311: LD_INT 2
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32333: LD_ADDR_VAR 0 48
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: LD_INT 2
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32480: LD_ADDR_VAR 0 49
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: LD_INT 1
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32624: LD_ADDR_VAR 0 50
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32768: LD_ADDR_VAR 0 51
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 2
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: LD_INT 1
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32915: LD_ADDR_VAR 0 52
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: LD_INT 2
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33066: LD_ADDR_VAR 0 53
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33296: LD_ADDR_VAR 0 54
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 2
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33526: LD_ADDR_VAR 0 55
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33756: LD_ADDR_VAR 0 56
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: LD_INT 2
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33986: LD_ADDR_VAR 0 57
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34216: LD_ADDR_VAR 0 58
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34446: LD_ADDR_VAR 0 59
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34534: LD_ADDR_VAR 0 60
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34622: LD_ADDR_VAR 0 61
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34710: LD_ADDR_VAR 0 62
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34798: LD_ADDR_VAR 0 63
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34886: LD_ADDR_VAR 0 64
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: ST_TO_ADDR
// end ; 1 :
34974: GO 40871
34976: LD_INT 1
34978: DOUBLE
34979: EQUAL
34980: IFTRUE 34984
34982: GO 37607
34984: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34985: LD_ADDR_VAR 0 11
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: LD_INT 3
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 3
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35029: LD_ADDR_VAR 0 12
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35070: LD_ADDR_VAR 0 13
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 3
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35110: LD_ADDR_VAR 0 14
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 3
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35151: LD_ADDR_VAR 0 15
35155: PUSH
35156: LD_INT 2
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 3
35169: NEG
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 3
35180: NEG
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35195: LD_ADDR_VAR 0 16
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: LD_INT 3
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 3
35214: NEG
35215: PUSH
35216: LD_INT 2
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 3
35226: NEG
35227: PUSH
35228: LD_INT 3
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35241: LD_ADDR_VAR 0 17
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 3
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: LD_INT 3
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35285: LD_ADDR_VAR 0 18
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: LD_INT 1
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35326: LD_ADDR_VAR 0 19
35330: PUSH
35331: LD_INT 3
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: LD_INT 3
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35366: LD_ADDR_VAR 0 20
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 3
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35407: LD_ADDR_VAR 0 21
35411: PUSH
35412: LD_INT 2
35414: NEG
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 3
35425: NEG
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 3
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35451: LD_ADDR_VAR 0 22
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 3
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 3
35470: NEG
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 3
35482: NEG
35483: PUSH
35484: LD_INT 3
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35497: LD_ADDR_VAR 0 23
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 3
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 4
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 3
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35541: LD_ADDR_VAR 0 24
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 4
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35582: LD_ADDR_VAR 0 25
35586: PUSH
35587: LD_INT 3
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 4
35599: PUSH
35600: LD_INT 3
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 3
35609: PUSH
35610: LD_INT 4
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35622: LD_ADDR_VAR 0 26
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 4
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 3
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35663: LD_ADDR_VAR 0 27
35667: PUSH
35668: LD_INT 3
35670: NEG
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 3
35681: NEG
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 4
35692: NEG
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35707: LD_ADDR_VAR 0 28
35711: PUSH
35712: LD_INT 3
35714: NEG
35715: PUSH
35716: LD_INT 3
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 3
35726: NEG
35727: PUSH
35728: LD_INT 4
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 4
35738: NEG
35739: PUSH
35740: LD_INT 3
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35753: LD_ADDR_VAR 0 29
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: LD_INT 3
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 3
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 2
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: LD_INT 4
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 4
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: LD_INT 3
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: LD_INT 5
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 5
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 4
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 6
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 6
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 5
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35908: LD_ADDR_VAR 0 30
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 3
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 3
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 4
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 4
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 4
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 5
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 5
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 5
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 6
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 6
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36051: LD_ADDR_VAR 0 31
36055: PUSH
36056: LD_INT 3
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 3
36068: PUSH
36069: LD_INT 3
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 4
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 4
36098: PUSH
36099: LD_INT 4
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: LD_INT 4
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 5
36118: PUSH
36119: LD_INT 4
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 5
36128: PUSH
36129: LD_INT 5
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 4
36138: PUSH
36139: LD_INT 5
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 6
36148: PUSH
36149: LD_INT 5
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 6
36158: PUSH
36159: LD_INT 6
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 5
36168: PUSH
36169: LD_INT 6
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36190: LD_ADDR_VAR 0 32
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: LD_INT 3
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 4
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 4
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 3
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 5
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 5
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 4
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 6
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 6
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 5
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36333: LD_ADDR_VAR 0 33
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 3
36351: NEG
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 3
36362: NEG
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 3
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 4
36385: NEG
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 4
36396: NEG
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 4
36408: NEG
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 5
36419: NEG
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 5
36430: NEG
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 5
36442: NEG
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 6
36453: NEG
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 6
36464: NEG
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36488: LD_ADDR_VAR 0 34
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 3
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 3
36507: NEG
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 3
36519: NEG
36520: PUSH
36521: LD_INT 3
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 3
36531: NEG
36532: PUSH
36533: LD_INT 4
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 4
36543: NEG
36544: PUSH
36545: LD_INT 3
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 4
36555: NEG
36556: PUSH
36557: LD_INT 4
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 4
36567: NEG
36568: PUSH
36569: LD_INT 5
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 5
36579: NEG
36580: PUSH
36581: LD_INT 4
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 5
36591: NEG
36592: PUSH
36593: LD_INT 5
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 5
36603: NEG
36604: PUSH
36605: LD_INT 6
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 6
36615: NEG
36616: PUSH
36617: LD_INT 5
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 6
36627: NEG
36628: PUSH
36629: LD_INT 6
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36651: LD_ADDR_VAR 0 41
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 3
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36695: LD_ADDR_VAR 0 42
36699: PUSH
36700: LD_INT 2
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 3
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: LIST
36735: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36736: LD_ADDR_VAR 0 43
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 3
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: LD_INT 3
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36776: LD_ADDR_VAR 0 44
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 3
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36817: LD_ADDR_VAR 0 45
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 3
36846: NEG
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36861: LD_ADDR_VAR 0 46
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 3
36892: NEG
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36907: LD_ADDR_VAR 0 47
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 3
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: LD_INT 3
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36940: LD_ADDR_VAR 0 48
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36971: LD_ADDR_VAR 0 49
36975: PUSH
36976: LD_INT 3
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 3
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37000: LD_ADDR_VAR 0 50
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 3
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: LD_INT 3
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37029: LD_ADDR_VAR 0 51
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37060: LD_ADDR_VAR 0 52
37064: PUSH
37065: LD_INT 3
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: NEG
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37093: LD_ADDR_VAR 0 53
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: LD_INT 3
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37137: LD_ADDR_VAR 0 54
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 3
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 3
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37178: LD_ADDR_VAR 0 55
37182: PUSH
37183: LD_INT 3
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37218: LD_ADDR_VAR 0 56
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 3
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37259: LD_ADDR_VAR 0 57
37263: PUSH
37264: LD_INT 2
37266: NEG
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 3
37277: NEG
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 3
37288: NEG
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37303: LD_ADDR_VAR 0 58
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 3
37334: NEG
37335: PUSH
37336: LD_INT 3
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37349: LD_ADDR_VAR 0 59
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 2
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37393: LD_ADDR_VAR 0 60
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37434: LD_ADDR_VAR 0 61
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37474: LD_ADDR_VAR 0 62
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37515: LD_ADDR_VAR 0 63
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37559: LD_ADDR_VAR 0 64
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: ST_TO_ADDR
// end ; 2 :
37605: GO 40871
37607: LD_INT 2
37609: DOUBLE
37610: EQUAL
37611: IFTRUE 37615
37613: GO 40870
37615: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37616: LD_ADDR_VAR 0 29
37620: PUSH
37621: LD_INT 4
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 4
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 5
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 5
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 4
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 2
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 5
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 3
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 4
37736: PUSH
37737: LD_INT 3
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 4
37746: PUSH
37747: LD_INT 4
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 3
37756: PUSH
37757: LD_INT 4
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 4
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: LD_INT 4
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: LD_INT 4
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: LD_INT 4
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 5
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 5
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 4
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 5
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 3
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 3
37944: NEG
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 4
37955: NEG
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 4
37966: NEG
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 4
37978: NEG
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 2
37990: NEG
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 4
38001: NEG
38002: PUSH
38003: LD_INT 4
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 4
38013: NEG
38014: PUSH
38015: LD_INT 5
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: LD_INT 4
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 4
38049: NEG
38050: PUSH
38051: LD_INT 3
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 5
38061: NEG
38062: PUSH
38063: LD_INT 4
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 5
38073: NEG
38074: PUSH
38075: LD_INT 5
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 3
38085: NEG
38086: PUSH
38087: LD_INT 5
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 5
38097: NEG
38098: PUSH
38099: LD_INT 3
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38154: LD_ADDR_VAR 0 30
38158: PUSH
38159: LD_INT 4
38161: PUSH
38162: LD_INT 4
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 4
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 5
38181: PUSH
38182: LD_INT 4
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 5
38191: PUSH
38192: LD_INT 5
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 4
38201: PUSH
38202: LD_INT 5
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 3
38211: PUSH
38212: LD_INT 4
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 3
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 5
38231: PUSH
38232: LD_INT 3
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 3
38241: PUSH
38242: LD_INT 5
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 3
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: LD_INT 3
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 4
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 4
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: LD_INT 4
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 4
38344: NEG
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 4
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 3
38367: NEG
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 3
38378: NEG
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 4
38389: NEG
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 5
38400: NEG
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 5
38411: NEG
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 5
38423: NEG
38424: PUSH
38425: LD_INT 2
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 3
38435: NEG
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: LD_INT 3
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 3
38458: NEG
38459: PUSH
38460: LD_INT 4
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: LD_INT 3
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 3
38494: NEG
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 4
38506: NEG
38507: PUSH
38508: LD_INT 3
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 4
38518: NEG
38519: PUSH
38520: LD_INT 4
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: LD_INT 4
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 4
38542: NEG
38543: PUSH
38544: LD_INT 2
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 4
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 5
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 4
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: LD_INT 3
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: LD_INT 4
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 5
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: LD_INT 3
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: LD_INT 5
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38701: LD_ADDR_VAR 0 31
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 4
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 4
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 5
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 5
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 4
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: LD_INT 5
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 3
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 3
38801: NEG
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 3
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 3
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 4
38857: NEG
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 4
38868: NEG
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 4
38880: NEG
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 4
38903: NEG
38904: PUSH
38905: LD_INT 4
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 4
38915: NEG
38916: PUSH
38917: LD_INT 5
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 3
38927: NEG
38928: PUSH
38929: LD_INT 4
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 3
38939: NEG
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 4
38951: NEG
38952: PUSH
38953: LD_INT 3
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 5
38963: NEG
38964: PUSH
38965: LD_INT 4
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 5
38975: NEG
38976: PUSH
38977: LD_INT 5
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 3
38987: NEG
38988: PUSH
38989: LD_INT 5
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 5
38999: NEG
39000: PUSH
39001: LD_INT 3
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 3
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 4
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 3
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: LD_INT 3
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: LD_INT 4
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: LD_INT 4
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 4
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 4
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 5
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 5
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 4
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39251: LD_ADDR_VAR 0 32
39255: PUSH
39256: LD_INT 4
39258: NEG
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 4
39269: NEG
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 3
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 4
39303: NEG
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 5
39314: NEG
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 5
39325: NEG
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 5
39337: NEG
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 3
39349: NEG
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 3
39360: NEG
39361: PUSH
39362: LD_INT 3
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: LD_INT 4
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 3
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 3
39408: NEG
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 4
39420: NEG
39421: PUSH
39422: LD_INT 3
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 4
39432: NEG
39433: PUSH
39434: LD_INT 4
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 4
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 4
39456: NEG
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 4
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 5
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 4
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 3
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 3
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: LD_INT 4
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 5
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 3
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: LD_INT 5
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 4
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 4
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 4
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 4
39663: PUSH
39664: LD_INT 4
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 4
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 5
39683: PUSH
39684: LD_INT 4
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 5
39693: PUSH
39694: LD_INT 5
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 4
39703: PUSH
39704: LD_INT 5
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: LD_INT 4
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 3
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 5
39733: PUSH
39734: LD_INT 3
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39798: LD_ADDR_VAR 0 33
39802: PUSH
39803: LD_INT 4
39805: NEG
39806: PUSH
39807: LD_INT 4
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 4
39817: NEG
39818: PUSH
39819: LD_INT 5
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: LD_INT 4
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: NEG
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 4
39853: NEG
39854: PUSH
39855: LD_INT 3
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 5
39865: NEG
39866: PUSH
39867: LD_INT 4
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 5
39877: NEG
39878: PUSH
39879: LD_INT 5
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 3
39889: NEG
39890: PUSH
39891: LD_INT 5
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 5
39901: NEG
39902: PUSH
39903: LD_INT 3
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 3
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 4
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 3
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 3
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: LD_INT 4
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: LD_INT 4
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 4
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 4
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 5
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 5
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 4
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 3
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 3
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 3
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 5
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 3
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 4
40128: PUSH
40129: LD_INT 3
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 4
40138: PUSH
40139: LD_INT 4
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: PUSH
40149: LD_INT 4
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: LD_INT 3
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 4
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 4
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 4
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 4
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: LD_INT 5
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 5
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 4
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: LD_INT 5
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40336: LD_ADDR_VAR 0 34
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 4
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 5
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 4
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: LD_INT 3
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 3
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 4
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 5
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: LD_INT 3
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 5
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 3
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 3
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 4
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 4
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 4
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: LD_INT 4
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 4
40548: PUSH
40549: LD_INT 3
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 5
40558: PUSH
40559: LD_INT 4
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 5
40568: PUSH
40569: LD_INT 5
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 4
40578: PUSH
40579: LD_INT 5
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: LD_INT 4
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 3
40598: PUSH
40599: LD_INT 3
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 5
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 3
40618: PUSH
40619: LD_INT 5
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: LD_INT 4
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 4
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: LD_INT 3
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 4
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 4
40721: NEG
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 4
40732: NEG
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 3
40744: NEG
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 3
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 4
40766: NEG
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 5
40777: NEG
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 5
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 5
40800: NEG
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 3
40812: NEG
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
// end ; end ;
40868: GO 40871
40870: POP
// case btype of b_depot , b_warehouse :
40871: LD_VAR 0 1
40875: PUSH
40876: LD_INT 0
40878: DOUBLE
40879: EQUAL
40880: IFTRUE 40890
40882: LD_INT 1
40884: DOUBLE
40885: EQUAL
40886: IFTRUE 40890
40888: GO 41091
40890: POP
// case nation of nation_american :
40891: LD_VAR 0 5
40895: PUSH
40896: LD_INT 1
40898: DOUBLE
40899: EQUAL
40900: IFTRUE 40904
40902: GO 40960
40904: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40905: LD_ADDR_VAR 0 9
40909: PUSH
40910: LD_VAR 0 11
40914: PUSH
40915: LD_VAR 0 12
40919: PUSH
40920: LD_VAR 0 13
40924: PUSH
40925: LD_VAR 0 14
40929: PUSH
40930: LD_VAR 0 15
40934: PUSH
40935: LD_VAR 0 16
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: PUSH
40948: LD_VAR 0 4
40952: PUSH
40953: LD_INT 1
40955: PLUS
40956: ARRAY
40957: ST_TO_ADDR
40958: GO 41089
40960: LD_INT 2
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40968
40966: GO 41024
40968: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40969: LD_ADDR_VAR 0 9
40973: PUSH
40974: LD_VAR 0 17
40978: PUSH
40979: LD_VAR 0 18
40983: PUSH
40984: LD_VAR 0 19
40988: PUSH
40989: LD_VAR 0 20
40993: PUSH
40994: LD_VAR 0 21
40998: PUSH
40999: LD_VAR 0 22
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: LD_VAR 0 4
41016: PUSH
41017: LD_INT 1
41019: PLUS
41020: ARRAY
41021: ST_TO_ADDR
41022: GO 41089
41024: LD_INT 3
41026: DOUBLE
41027: EQUAL
41028: IFTRUE 41032
41030: GO 41088
41032: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41033: LD_ADDR_VAR 0 9
41037: PUSH
41038: LD_VAR 0 23
41042: PUSH
41043: LD_VAR 0 24
41047: PUSH
41048: LD_VAR 0 25
41052: PUSH
41053: LD_VAR 0 26
41057: PUSH
41058: LD_VAR 0 27
41062: PUSH
41063: LD_VAR 0 28
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: PUSH
41076: LD_VAR 0 4
41080: PUSH
41081: LD_INT 1
41083: PLUS
41084: ARRAY
41085: ST_TO_ADDR
41086: GO 41089
41088: POP
41089: GO 41644
41091: LD_INT 2
41093: DOUBLE
41094: EQUAL
41095: IFTRUE 41105
41097: LD_INT 3
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41105
41103: GO 41161
41105: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41106: LD_ADDR_VAR 0 9
41110: PUSH
41111: LD_VAR 0 29
41115: PUSH
41116: LD_VAR 0 30
41120: PUSH
41121: LD_VAR 0 31
41125: PUSH
41126: LD_VAR 0 32
41130: PUSH
41131: LD_VAR 0 33
41135: PUSH
41136: LD_VAR 0 34
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: PUSH
41149: LD_VAR 0 4
41153: PUSH
41154: LD_INT 1
41156: PLUS
41157: ARRAY
41158: ST_TO_ADDR
41159: GO 41644
41161: LD_INT 16
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41223
41167: LD_INT 17
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41223
41173: LD_INT 18
41175: DOUBLE
41176: EQUAL
41177: IFTRUE 41223
41179: LD_INT 19
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41223
41185: LD_INT 22
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41223
41191: LD_INT 20
41193: DOUBLE
41194: EQUAL
41195: IFTRUE 41223
41197: LD_INT 21
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41223
41203: LD_INT 23
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41223
41209: LD_INT 24
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41223
41215: LD_INT 25
41217: DOUBLE
41218: EQUAL
41219: IFTRUE 41223
41221: GO 41279
41223: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41224: LD_ADDR_VAR 0 9
41228: PUSH
41229: LD_VAR 0 35
41233: PUSH
41234: LD_VAR 0 36
41238: PUSH
41239: LD_VAR 0 37
41243: PUSH
41244: LD_VAR 0 38
41248: PUSH
41249: LD_VAR 0 39
41253: PUSH
41254: LD_VAR 0 40
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: PUSH
41267: LD_VAR 0 4
41271: PUSH
41272: LD_INT 1
41274: PLUS
41275: ARRAY
41276: ST_TO_ADDR
41277: GO 41644
41279: LD_INT 6
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41335
41285: LD_INT 7
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41335
41291: LD_INT 8
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41335
41297: LD_INT 13
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41335
41303: LD_INT 12
41305: DOUBLE
41306: EQUAL
41307: IFTRUE 41335
41309: LD_INT 15
41311: DOUBLE
41312: EQUAL
41313: IFTRUE 41335
41315: LD_INT 11
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41335
41321: LD_INT 14
41323: DOUBLE
41324: EQUAL
41325: IFTRUE 41335
41327: LD_INT 10
41329: DOUBLE
41330: EQUAL
41331: IFTRUE 41335
41333: GO 41391
41335: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41336: LD_ADDR_VAR 0 9
41340: PUSH
41341: LD_VAR 0 41
41345: PUSH
41346: LD_VAR 0 42
41350: PUSH
41351: LD_VAR 0 43
41355: PUSH
41356: LD_VAR 0 44
41360: PUSH
41361: LD_VAR 0 45
41365: PUSH
41366: LD_VAR 0 46
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: PUSH
41379: LD_VAR 0 4
41383: PUSH
41384: LD_INT 1
41386: PLUS
41387: ARRAY
41388: ST_TO_ADDR
41389: GO 41644
41391: LD_INT 36
41393: DOUBLE
41394: EQUAL
41395: IFTRUE 41399
41397: GO 41455
41399: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41400: LD_ADDR_VAR 0 9
41404: PUSH
41405: LD_VAR 0 47
41409: PUSH
41410: LD_VAR 0 48
41414: PUSH
41415: LD_VAR 0 49
41419: PUSH
41420: LD_VAR 0 50
41424: PUSH
41425: LD_VAR 0 51
41429: PUSH
41430: LD_VAR 0 52
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: PUSH
41443: LD_VAR 0 4
41447: PUSH
41448: LD_INT 1
41450: PLUS
41451: ARRAY
41452: ST_TO_ADDR
41453: GO 41644
41455: LD_INT 4
41457: DOUBLE
41458: EQUAL
41459: IFTRUE 41481
41461: LD_INT 5
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41481
41467: LD_INT 34
41469: DOUBLE
41470: EQUAL
41471: IFTRUE 41481
41473: LD_INT 37
41475: DOUBLE
41476: EQUAL
41477: IFTRUE 41481
41479: GO 41537
41481: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_VAR 0 53
41491: PUSH
41492: LD_VAR 0 54
41496: PUSH
41497: LD_VAR 0 55
41501: PUSH
41502: LD_VAR 0 56
41506: PUSH
41507: LD_VAR 0 57
41511: PUSH
41512: LD_VAR 0 58
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: PUSH
41525: LD_VAR 0 4
41529: PUSH
41530: LD_INT 1
41532: PLUS
41533: ARRAY
41534: ST_TO_ADDR
41535: GO 41644
41537: LD_INT 31
41539: DOUBLE
41540: EQUAL
41541: IFTRUE 41587
41543: LD_INT 32
41545: DOUBLE
41546: EQUAL
41547: IFTRUE 41587
41549: LD_INT 33
41551: DOUBLE
41552: EQUAL
41553: IFTRUE 41587
41555: LD_INT 27
41557: DOUBLE
41558: EQUAL
41559: IFTRUE 41587
41561: LD_INT 26
41563: DOUBLE
41564: EQUAL
41565: IFTRUE 41587
41567: LD_INT 28
41569: DOUBLE
41570: EQUAL
41571: IFTRUE 41587
41573: LD_INT 29
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41587
41579: LD_INT 30
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41587
41585: GO 41643
41587: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41588: LD_ADDR_VAR 0 9
41592: PUSH
41593: LD_VAR 0 59
41597: PUSH
41598: LD_VAR 0 60
41602: PUSH
41603: LD_VAR 0 61
41607: PUSH
41608: LD_VAR 0 62
41612: PUSH
41613: LD_VAR 0 63
41617: PUSH
41618: LD_VAR 0 64
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: PUSH
41631: LD_VAR 0 4
41635: PUSH
41636: LD_INT 1
41638: PLUS
41639: ARRAY
41640: ST_TO_ADDR
41641: GO 41644
41643: POP
// temp_list2 = [ ] ;
41644: LD_ADDR_VAR 0 10
41648: PUSH
41649: EMPTY
41650: ST_TO_ADDR
// for i in temp_list do
41651: LD_ADDR_VAR 0 8
41655: PUSH
41656: LD_VAR 0 9
41660: PUSH
41661: FOR_IN
41662: IFFALSE 41714
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41664: LD_ADDR_VAR 0 10
41668: PUSH
41669: LD_VAR 0 10
41673: PUSH
41674: LD_VAR 0 8
41678: PUSH
41679: LD_INT 1
41681: ARRAY
41682: PUSH
41683: LD_VAR 0 2
41687: PLUS
41688: PUSH
41689: LD_VAR 0 8
41693: PUSH
41694: LD_INT 2
41696: ARRAY
41697: PUSH
41698: LD_VAR 0 3
41702: PLUS
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: ADD
41711: ST_TO_ADDR
41712: GO 41661
41714: POP
41715: POP
// result = temp_list2 ;
41716: LD_ADDR_VAR 0 7
41720: PUSH
41721: LD_VAR 0 10
41725: ST_TO_ADDR
// end ;
41726: LD_VAR 0 7
41730: RET
// export function EnemyInRange ( unit , dist ) ; begin
41731: LD_INT 0
41733: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41734: LD_ADDR_VAR 0 3
41738: PUSH
41739: LD_VAR 0 1
41743: PPUSH
41744: CALL_OW 255
41748: PPUSH
41749: LD_VAR 0 1
41753: PPUSH
41754: CALL_OW 250
41758: PPUSH
41759: LD_VAR 0 1
41763: PPUSH
41764: CALL_OW 251
41768: PPUSH
41769: LD_VAR 0 2
41773: PPUSH
41774: CALL 15104 0 4
41778: PUSH
41779: LD_INT 4
41781: ARRAY
41782: ST_TO_ADDR
// end ;
41783: LD_VAR 0 3
41787: RET
// export function PlayerSeeMe ( unit ) ; begin
41788: LD_INT 0
41790: PPUSH
// result := See ( your_side , unit ) ;
41791: LD_ADDR_VAR 0 2
41795: PUSH
41796: LD_OWVAR 2
41800: PPUSH
41801: LD_VAR 0 1
41805: PPUSH
41806: CALL_OW 292
41810: ST_TO_ADDR
// end ;
41811: LD_VAR 0 2
41815: RET
// export function ReverseDir ( unit ) ; begin
41816: LD_INT 0
41818: PPUSH
// if not unit then
41819: LD_VAR 0 1
41823: NOT
41824: IFFALSE 41828
// exit ;
41826: GO 41851
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41828: LD_ADDR_VAR 0 2
41832: PUSH
41833: LD_VAR 0 1
41837: PPUSH
41838: CALL_OW 254
41842: PUSH
41843: LD_INT 3
41845: PLUS
41846: PUSH
41847: LD_INT 6
41849: MOD
41850: ST_TO_ADDR
// end ;
41851: LD_VAR 0 2
41855: RET
// export function ReverseArray ( array ) ; var i ; begin
41856: LD_INT 0
41858: PPUSH
41859: PPUSH
// if not array then
41860: LD_VAR 0 1
41864: NOT
41865: IFFALSE 41869
// exit ;
41867: GO 41924
// result := [ ] ;
41869: LD_ADDR_VAR 0 2
41873: PUSH
41874: EMPTY
41875: ST_TO_ADDR
// for i := array downto 1 do
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: DOUBLE
41882: LD_VAR 0 1
41886: INC
41887: ST_TO_ADDR
41888: LD_INT 1
41890: PUSH
41891: FOR_DOWNTO
41892: IFFALSE 41922
// result := Join ( result , array [ i ] ) ;
41894: LD_ADDR_VAR 0 2
41898: PUSH
41899: LD_VAR 0 2
41903: PPUSH
41904: LD_VAR 0 1
41908: PUSH
41909: LD_VAR 0 3
41913: ARRAY
41914: PPUSH
41915: CALL 46569 0 2
41919: ST_TO_ADDR
41920: GO 41891
41922: POP
41923: POP
// end ;
41924: LD_VAR 0 2
41928: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41929: LD_INT 0
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
// if not unit or not hexes then
41937: LD_VAR 0 1
41941: NOT
41942: PUSH
41943: LD_VAR 0 2
41947: NOT
41948: OR
41949: IFFALSE 41953
// exit ;
41951: GO 42076
// dist := 9999 ;
41953: LD_ADDR_VAR 0 5
41957: PUSH
41958: LD_INT 9999
41960: ST_TO_ADDR
// for i = 1 to hexes do
41961: LD_ADDR_VAR 0 4
41965: PUSH
41966: DOUBLE
41967: LD_INT 1
41969: DEC
41970: ST_TO_ADDR
41971: LD_VAR 0 2
41975: PUSH
41976: FOR_TO
41977: IFFALSE 42064
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41979: LD_ADDR_VAR 0 6
41983: PUSH
41984: LD_VAR 0 1
41988: PPUSH
41989: LD_VAR 0 2
41993: PUSH
41994: LD_VAR 0 4
41998: ARRAY
41999: PUSH
42000: LD_INT 1
42002: ARRAY
42003: PPUSH
42004: LD_VAR 0 2
42008: PUSH
42009: LD_VAR 0 4
42013: ARRAY
42014: PUSH
42015: LD_INT 2
42017: ARRAY
42018: PPUSH
42019: CALL_OW 297
42023: ST_TO_ADDR
// if tdist < dist then
42024: LD_VAR 0 6
42028: PUSH
42029: LD_VAR 0 5
42033: LESS
42034: IFFALSE 42062
// begin hex := hexes [ i ] ;
42036: LD_ADDR_VAR 0 8
42040: PUSH
42041: LD_VAR 0 2
42045: PUSH
42046: LD_VAR 0 4
42050: ARRAY
42051: ST_TO_ADDR
// dist := tdist ;
42052: LD_ADDR_VAR 0 5
42056: PUSH
42057: LD_VAR 0 6
42061: ST_TO_ADDR
// end ; end ;
42062: GO 41976
42064: POP
42065: POP
// result := hex ;
42066: LD_ADDR_VAR 0 3
42070: PUSH
42071: LD_VAR 0 8
42075: ST_TO_ADDR
// end ;
42076: LD_VAR 0 3
42080: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42081: LD_INT 0
42083: PPUSH
42084: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42085: LD_VAR 0 1
42089: NOT
42090: PUSH
42091: LD_VAR 0 1
42095: PUSH
42096: LD_INT 21
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 23
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PPUSH
42120: CALL_OW 69
42124: IN
42125: NOT
42126: OR
42127: IFFALSE 42131
// exit ;
42129: GO 42178
// for i = 1 to 3 do
42131: LD_ADDR_VAR 0 3
42135: PUSH
42136: DOUBLE
42137: LD_INT 1
42139: DEC
42140: ST_TO_ADDR
42141: LD_INT 3
42143: PUSH
42144: FOR_TO
42145: IFFALSE 42176
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42147: LD_VAR 0 1
42151: PPUSH
42152: CALL_OW 250
42156: PPUSH
42157: LD_VAR 0 1
42161: PPUSH
42162: CALL_OW 251
42166: PPUSH
42167: LD_INT 1
42169: PPUSH
42170: CALL_OW 453
42174: GO 42144
42176: POP
42177: POP
// end ;
42178: LD_VAR 0 2
42182: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42183: LD_INT 0
42185: PPUSH
42186: PPUSH
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
// if not unit or not enemy_unit then
42191: LD_VAR 0 1
42195: NOT
42196: PUSH
42197: LD_VAR 0 2
42201: NOT
42202: OR
42203: IFFALSE 42207
// exit ;
42205: GO 42674
// if GetLives ( i ) < 250 then
42207: LD_VAR 0 4
42211: PPUSH
42212: CALL_OW 256
42216: PUSH
42217: LD_INT 250
42219: LESS
42220: IFFALSE 42233
// begin ComAutodestruct ( i ) ;
42222: LD_VAR 0 4
42226: PPUSH
42227: CALL 42081 0 1
// exit ;
42231: GO 42674
// end ; x := GetX ( enemy_unit ) ;
42233: LD_ADDR_VAR 0 7
42237: PUSH
42238: LD_VAR 0 2
42242: PPUSH
42243: CALL_OW 250
42247: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42248: LD_ADDR_VAR 0 8
42252: PUSH
42253: LD_VAR 0 2
42257: PPUSH
42258: CALL_OW 251
42262: ST_TO_ADDR
// if not x or not y then
42263: LD_VAR 0 7
42267: NOT
42268: PUSH
42269: LD_VAR 0 8
42273: NOT
42274: OR
42275: IFFALSE 42279
// exit ;
42277: GO 42674
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42279: LD_ADDR_VAR 0 6
42283: PUSH
42284: LD_VAR 0 7
42288: PPUSH
42289: LD_INT 0
42291: PPUSH
42292: LD_INT 4
42294: PPUSH
42295: CALL_OW 272
42299: PUSH
42300: LD_VAR 0 8
42304: PPUSH
42305: LD_INT 0
42307: PPUSH
42308: LD_INT 4
42310: PPUSH
42311: CALL_OW 273
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_VAR 0 7
42324: PPUSH
42325: LD_INT 1
42327: PPUSH
42328: LD_INT 4
42330: PPUSH
42331: CALL_OW 272
42335: PUSH
42336: LD_VAR 0 8
42340: PPUSH
42341: LD_INT 1
42343: PPUSH
42344: LD_INT 4
42346: PPUSH
42347: CALL_OW 273
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_VAR 0 7
42360: PPUSH
42361: LD_INT 2
42363: PPUSH
42364: LD_INT 4
42366: PPUSH
42367: CALL_OW 272
42371: PUSH
42372: LD_VAR 0 8
42376: PPUSH
42377: LD_INT 2
42379: PPUSH
42380: LD_INT 4
42382: PPUSH
42383: CALL_OW 273
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_VAR 0 7
42396: PPUSH
42397: LD_INT 3
42399: PPUSH
42400: LD_INT 4
42402: PPUSH
42403: CALL_OW 272
42407: PUSH
42408: LD_VAR 0 8
42412: PPUSH
42413: LD_INT 3
42415: PPUSH
42416: LD_INT 4
42418: PPUSH
42419: CALL_OW 273
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_VAR 0 7
42432: PPUSH
42433: LD_INT 4
42435: PPUSH
42436: LD_INT 4
42438: PPUSH
42439: CALL_OW 272
42443: PUSH
42444: LD_VAR 0 8
42448: PPUSH
42449: LD_INT 4
42451: PPUSH
42452: LD_INT 4
42454: PPUSH
42455: CALL_OW 273
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_VAR 0 7
42468: PPUSH
42469: LD_INT 5
42471: PPUSH
42472: LD_INT 4
42474: PPUSH
42475: CALL_OW 272
42479: PUSH
42480: LD_VAR 0 8
42484: PPUSH
42485: LD_INT 5
42487: PPUSH
42488: LD_INT 4
42490: PPUSH
42491: CALL_OW 273
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: ST_TO_ADDR
// for i = tmp downto 1 do
42508: LD_ADDR_VAR 0 4
42512: PUSH
42513: DOUBLE
42514: LD_VAR 0 6
42518: INC
42519: ST_TO_ADDR
42520: LD_INT 1
42522: PUSH
42523: FOR_DOWNTO
42524: IFFALSE 42625
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42526: LD_VAR 0 6
42530: PUSH
42531: LD_VAR 0 4
42535: ARRAY
42536: PUSH
42537: LD_INT 1
42539: ARRAY
42540: PPUSH
42541: LD_VAR 0 6
42545: PUSH
42546: LD_VAR 0 4
42550: ARRAY
42551: PUSH
42552: LD_INT 2
42554: ARRAY
42555: PPUSH
42556: CALL_OW 488
42560: NOT
42561: PUSH
42562: LD_VAR 0 6
42566: PUSH
42567: LD_VAR 0 4
42571: ARRAY
42572: PUSH
42573: LD_INT 1
42575: ARRAY
42576: PPUSH
42577: LD_VAR 0 6
42581: PUSH
42582: LD_VAR 0 4
42586: ARRAY
42587: PUSH
42588: LD_INT 2
42590: ARRAY
42591: PPUSH
42592: CALL_OW 428
42596: PUSH
42597: LD_INT 0
42599: NONEQUAL
42600: OR
42601: IFFALSE 42623
// tmp := Delete ( tmp , i ) ;
42603: LD_ADDR_VAR 0 6
42607: PUSH
42608: LD_VAR 0 6
42612: PPUSH
42613: LD_VAR 0 4
42617: PPUSH
42618: CALL_OW 3
42622: ST_TO_ADDR
42623: GO 42523
42625: POP
42626: POP
// j := GetClosestHex ( unit , tmp ) ;
42627: LD_ADDR_VAR 0 5
42631: PUSH
42632: LD_VAR 0 1
42636: PPUSH
42637: LD_VAR 0 6
42641: PPUSH
42642: CALL 41929 0 2
42646: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42647: LD_VAR 0 1
42651: PPUSH
42652: LD_VAR 0 5
42656: PUSH
42657: LD_INT 1
42659: ARRAY
42660: PPUSH
42661: LD_VAR 0 5
42665: PUSH
42666: LD_INT 2
42668: ARRAY
42669: PPUSH
42670: CALL_OW 111
// end ;
42674: LD_VAR 0 3
42678: RET
// export function PrepareApemanSoldier ( ) ; begin
42679: LD_INT 0
42681: PPUSH
// uc_nation := 0 ;
42682: LD_ADDR_OWVAR 21
42686: PUSH
42687: LD_INT 0
42689: ST_TO_ADDR
// hc_sex := sex_male ;
42690: LD_ADDR_OWVAR 27
42694: PUSH
42695: LD_INT 1
42697: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42698: LD_ADDR_OWVAR 28
42702: PUSH
42703: LD_INT 15
42705: ST_TO_ADDR
// hc_gallery :=  ;
42706: LD_ADDR_OWVAR 33
42710: PUSH
42711: LD_STRING 
42713: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42714: LD_ADDR_OWVAR 31
42718: PUSH
42719: LD_INT 0
42721: PPUSH
42722: LD_INT 3
42724: PPUSH
42725: CALL_OW 12
42729: PUSH
42730: LD_INT 0
42732: PPUSH
42733: LD_INT 3
42735: PPUSH
42736: CALL_OW 12
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// end ;
42753: LD_VAR 0 1
42757: RET
// export function PrepareApemanEngineer ( ) ; begin
42758: LD_INT 0
42760: PPUSH
// uc_nation := 0 ;
42761: LD_ADDR_OWVAR 21
42765: PUSH
42766: LD_INT 0
42768: ST_TO_ADDR
// hc_sex := sex_male ;
42769: LD_ADDR_OWVAR 27
42773: PUSH
42774: LD_INT 1
42776: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42777: LD_ADDR_OWVAR 28
42781: PUSH
42782: LD_INT 16
42784: ST_TO_ADDR
// hc_gallery :=  ;
42785: LD_ADDR_OWVAR 33
42789: PUSH
42790: LD_STRING 
42792: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42793: LD_ADDR_OWVAR 31
42797: PUSH
42798: LD_INT 0
42800: PPUSH
42801: LD_INT 3
42803: PPUSH
42804: CALL_OW 12
42808: PUSH
42809: LD_INT 0
42811: PPUSH
42812: LD_INT 3
42814: PPUSH
42815: CALL_OW 12
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// end ;
42832: LD_VAR 0 1
42836: RET
// export function PrepareApeman ( agressivity ) ; begin
42837: LD_INT 0
42839: PPUSH
// uc_side := 0 ;
42840: LD_ADDR_OWVAR 20
42844: PUSH
42845: LD_INT 0
42847: ST_TO_ADDR
// uc_nation := 0 ;
42848: LD_ADDR_OWVAR 21
42852: PUSH
42853: LD_INT 0
42855: ST_TO_ADDR
// hc_sex := sex_male ;
42856: LD_ADDR_OWVAR 27
42860: PUSH
42861: LD_INT 1
42863: ST_TO_ADDR
// hc_class := class_apeman ;
42864: LD_ADDR_OWVAR 28
42868: PUSH
42869: LD_INT 12
42871: ST_TO_ADDR
// hc_gallery :=  ;
42872: LD_ADDR_OWVAR 33
42876: PUSH
42877: LD_STRING 
42879: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42880: LD_ADDR_OWVAR 35
42884: PUSH
42885: LD_VAR 0 1
42889: NEG
42890: PPUSH
42891: LD_VAR 0 1
42895: PPUSH
42896: CALL_OW 12
42900: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42901: LD_ADDR_OWVAR 31
42905: PUSH
42906: LD_INT 0
42908: PPUSH
42909: LD_INT 3
42911: PPUSH
42912: CALL_OW 12
42916: PUSH
42917: LD_INT 0
42919: PPUSH
42920: LD_INT 3
42922: PPUSH
42923: CALL_OW 12
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// end ;
42940: LD_VAR 0 2
42944: RET
// export function PrepareTiger ( agressivity ) ; begin
42945: LD_INT 0
42947: PPUSH
// uc_side := 0 ;
42948: LD_ADDR_OWVAR 20
42952: PUSH
42953: LD_INT 0
42955: ST_TO_ADDR
// uc_nation := 0 ;
42956: LD_ADDR_OWVAR 21
42960: PUSH
42961: LD_INT 0
42963: ST_TO_ADDR
// hc_class := class_tiger ;
42964: LD_ADDR_OWVAR 28
42968: PUSH
42969: LD_INT 14
42971: ST_TO_ADDR
// hc_gallery :=  ;
42972: LD_ADDR_OWVAR 33
42976: PUSH
42977: LD_STRING 
42979: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42980: LD_ADDR_OWVAR 35
42984: PUSH
42985: LD_VAR 0 1
42989: NEG
42990: PPUSH
42991: LD_VAR 0 1
42995: PPUSH
42996: CALL_OW 12
43000: ST_TO_ADDR
// end ;
43001: LD_VAR 0 2
43005: RET
// export function PrepareEnchidna ( ) ; begin
43006: LD_INT 0
43008: PPUSH
// uc_side := 0 ;
43009: LD_ADDR_OWVAR 20
43013: PUSH
43014: LD_INT 0
43016: ST_TO_ADDR
// uc_nation := 0 ;
43017: LD_ADDR_OWVAR 21
43021: PUSH
43022: LD_INT 0
43024: ST_TO_ADDR
// hc_class := class_baggie ;
43025: LD_ADDR_OWVAR 28
43029: PUSH
43030: LD_INT 13
43032: ST_TO_ADDR
// hc_gallery :=  ;
43033: LD_ADDR_OWVAR 33
43037: PUSH
43038: LD_STRING 
43040: ST_TO_ADDR
// end ;
43041: LD_VAR 0 1
43045: RET
// export function PrepareFrog ( ) ; begin
43046: LD_INT 0
43048: PPUSH
// uc_side := 0 ;
43049: LD_ADDR_OWVAR 20
43053: PUSH
43054: LD_INT 0
43056: ST_TO_ADDR
// uc_nation := 0 ;
43057: LD_ADDR_OWVAR 21
43061: PUSH
43062: LD_INT 0
43064: ST_TO_ADDR
// hc_class := class_frog ;
43065: LD_ADDR_OWVAR 28
43069: PUSH
43070: LD_INT 19
43072: ST_TO_ADDR
// hc_gallery :=  ;
43073: LD_ADDR_OWVAR 33
43077: PUSH
43078: LD_STRING 
43080: ST_TO_ADDR
// end ;
43081: LD_VAR 0 1
43085: RET
// export function PrepareFish ( ) ; begin
43086: LD_INT 0
43088: PPUSH
// uc_side := 0 ;
43089: LD_ADDR_OWVAR 20
43093: PUSH
43094: LD_INT 0
43096: ST_TO_ADDR
// uc_nation := 0 ;
43097: LD_ADDR_OWVAR 21
43101: PUSH
43102: LD_INT 0
43104: ST_TO_ADDR
// hc_class := class_fish ;
43105: LD_ADDR_OWVAR 28
43109: PUSH
43110: LD_INT 20
43112: ST_TO_ADDR
// hc_gallery :=  ;
43113: LD_ADDR_OWVAR 33
43117: PUSH
43118: LD_STRING 
43120: ST_TO_ADDR
// end ;
43121: LD_VAR 0 1
43125: RET
// export function PrepareBird ( ) ; begin
43126: LD_INT 0
43128: PPUSH
// uc_side := 0 ;
43129: LD_ADDR_OWVAR 20
43133: PUSH
43134: LD_INT 0
43136: ST_TO_ADDR
// uc_nation := 0 ;
43137: LD_ADDR_OWVAR 21
43141: PUSH
43142: LD_INT 0
43144: ST_TO_ADDR
// hc_class := class_phororhacos ;
43145: LD_ADDR_OWVAR 28
43149: PUSH
43150: LD_INT 18
43152: ST_TO_ADDR
// hc_gallery :=  ;
43153: LD_ADDR_OWVAR 33
43157: PUSH
43158: LD_STRING 
43160: ST_TO_ADDR
// end ;
43161: LD_VAR 0 1
43165: RET
// export function PrepareHorse ( ) ; begin
43166: LD_INT 0
43168: PPUSH
// uc_side := 0 ;
43169: LD_ADDR_OWVAR 20
43173: PUSH
43174: LD_INT 0
43176: ST_TO_ADDR
// uc_nation := 0 ;
43177: LD_ADDR_OWVAR 21
43181: PUSH
43182: LD_INT 0
43184: ST_TO_ADDR
// hc_class := class_horse ;
43185: LD_ADDR_OWVAR 28
43189: PUSH
43190: LD_INT 21
43192: ST_TO_ADDR
// hc_gallery :=  ;
43193: LD_ADDR_OWVAR 33
43197: PUSH
43198: LD_STRING 
43200: ST_TO_ADDR
// end ;
43201: LD_VAR 0 1
43205: RET
// export function PrepareMastodont ( ) ; begin
43206: LD_INT 0
43208: PPUSH
// uc_side := 0 ;
43209: LD_ADDR_OWVAR 20
43213: PUSH
43214: LD_INT 0
43216: ST_TO_ADDR
// uc_nation := 0 ;
43217: LD_ADDR_OWVAR 21
43221: PUSH
43222: LD_INT 0
43224: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43225: LD_ADDR_OWVAR 37
43229: PUSH
43230: LD_INT 31
43232: ST_TO_ADDR
// vc_control := control_rider ;
43233: LD_ADDR_OWVAR 38
43237: PUSH
43238: LD_INT 4
43240: ST_TO_ADDR
// end ;
43241: LD_VAR 0 1
43245: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43246: LD_INT 0
43248: PPUSH
43249: PPUSH
43250: PPUSH
// uc_side = 0 ;
43251: LD_ADDR_OWVAR 20
43255: PUSH
43256: LD_INT 0
43258: ST_TO_ADDR
// uc_nation = 0 ;
43259: LD_ADDR_OWVAR 21
43263: PUSH
43264: LD_INT 0
43266: ST_TO_ADDR
// InitHc_All ( ) ;
43267: CALL_OW 584
// InitVc ;
43271: CALL_OW 20
// if mastodonts then
43275: LD_VAR 0 6
43279: IFFALSE 43346
// for i = 1 to mastodonts do
43281: LD_ADDR_VAR 0 11
43285: PUSH
43286: DOUBLE
43287: LD_INT 1
43289: DEC
43290: ST_TO_ADDR
43291: LD_VAR 0 6
43295: PUSH
43296: FOR_TO
43297: IFFALSE 43344
// begin vc_chassis := 31 ;
43299: LD_ADDR_OWVAR 37
43303: PUSH
43304: LD_INT 31
43306: ST_TO_ADDR
// vc_control := control_rider ;
43307: LD_ADDR_OWVAR 38
43311: PUSH
43312: LD_INT 4
43314: ST_TO_ADDR
// animal := CreateVehicle ;
43315: LD_ADDR_VAR 0 12
43319: PUSH
43320: CALL_OW 45
43324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43325: LD_VAR 0 12
43329: PPUSH
43330: LD_VAR 0 8
43334: PPUSH
43335: LD_INT 0
43337: PPUSH
43338: CALL 45474 0 3
// end ;
43342: GO 43296
43344: POP
43345: POP
// if horses then
43346: LD_VAR 0 5
43350: IFFALSE 43417
// for i = 1 to horses do
43352: LD_ADDR_VAR 0 11
43356: PUSH
43357: DOUBLE
43358: LD_INT 1
43360: DEC
43361: ST_TO_ADDR
43362: LD_VAR 0 5
43366: PUSH
43367: FOR_TO
43368: IFFALSE 43415
// begin hc_class := 21 ;
43370: LD_ADDR_OWVAR 28
43374: PUSH
43375: LD_INT 21
43377: ST_TO_ADDR
// hc_gallery :=  ;
43378: LD_ADDR_OWVAR 33
43382: PUSH
43383: LD_STRING 
43385: ST_TO_ADDR
// animal := CreateHuman ;
43386: LD_ADDR_VAR 0 12
43390: PUSH
43391: CALL_OW 44
43395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43396: LD_VAR 0 12
43400: PPUSH
43401: LD_VAR 0 8
43405: PPUSH
43406: LD_INT 0
43408: PPUSH
43409: CALL 45474 0 3
// end ;
43413: GO 43367
43415: POP
43416: POP
// if birds then
43417: LD_VAR 0 1
43421: IFFALSE 43488
// for i = 1 to birds do
43423: LD_ADDR_VAR 0 11
43427: PUSH
43428: DOUBLE
43429: LD_INT 1
43431: DEC
43432: ST_TO_ADDR
43433: LD_VAR 0 1
43437: PUSH
43438: FOR_TO
43439: IFFALSE 43486
// begin hc_class := 18 ;
43441: LD_ADDR_OWVAR 28
43445: PUSH
43446: LD_INT 18
43448: ST_TO_ADDR
// hc_gallery =  ;
43449: LD_ADDR_OWVAR 33
43453: PUSH
43454: LD_STRING 
43456: ST_TO_ADDR
// animal := CreateHuman ;
43457: LD_ADDR_VAR 0 12
43461: PUSH
43462: CALL_OW 44
43466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43467: LD_VAR 0 12
43471: PPUSH
43472: LD_VAR 0 8
43476: PPUSH
43477: LD_INT 0
43479: PPUSH
43480: CALL 45474 0 3
// end ;
43484: GO 43438
43486: POP
43487: POP
// if tigers then
43488: LD_VAR 0 2
43492: IFFALSE 43576
// for i = 1 to tigers do
43494: LD_ADDR_VAR 0 11
43498: PUSH
43499: DOUBLE
43500: LD_INT 1
43502: DEC
43503: ST_TO_ADDR
43504: LD_VAR 0 2
43508: PUSH
43509: FOR_TO
43510: IFFALSE 43574
// begin hc_class = class_tiger ;
43512: LD_ADDR_OWVAR 28
43516: PUSH
43517: LD_INT 14
43519: ST_TO_ADDR
// hc_gallery =  ;
43520: LD_ADDR_OWVAR 33
43524: PUSH
43525: LD_STRING 
43527: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43528: LD_ADDR_OWVAR 35
43532: PUSH
43533: LD_INT 7
43535: NEG
43536: PPUSH
43537: LD_INT 7
43539: PPUSH
43540: CALL_OW 12
43544: ST_TO_ADDR
// animal := CreateHuman ;
43545: LD_ADDR_VAR 0 12
43549: PUSH
43550: CALL_OW 44
43554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43555: LD_VAR 0 12
43559: PPUSH
43560: LD_VAR 0 8
43564: PPUSH
43565: LD_INT 0
43567: PPUSH
43568: CALL 45474 0 3
// end ;
43572: GO 43509
43574: POP
43575: POP
// if apemans then
43576: LD_VAR 0 3
43580: IFFALSE 43703
// for i = 1 to apemans do
43582: LD_ADDR_VAR 0 11
43586: PUSH
43587: DOUBLE
43588: LD_INT 1
43590: DEC
43591: ST_TO_ADDR
43592: LD_VAR 0 3
43596: PUSH
43597: FOR_TO
43598: IFFALSE 43701
// begin hc_class = class_apeman ;
43600: LD_ADDR_OWVAR 28
43604: PUSH
43605: LD_INT 12
43607: ST_TO_ADDR
// hc_gallery =  ;
43608: LD_ADDR_OWVAR 33
43612: PUSH
43613: LD_STRING 
43615: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43616: LD_ADDR_OWVAR 35
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PPUSH
43625: LD_INT 2
43627: PPUSH
43628: CALL_OW 12
43632: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43633: LD_ADDR_OWVAR 31
43637: PUSH
43638: LD_INT 1
43640: PPUSH
43641: LD_INT 3
43643: PPUSH
43644: CALL_OW 12
43648: PUSH
43649: LD_INT 1
43651: PPUSH
43652: LD_INT 3
43654: PPUSH
43655: CALL_OW 12
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// animal := CreateHuman ;
43672: LD_ADDR_VAR 0 12
43676: PUSH
43677: CALL_OW 44
43681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43682: LD_VAR 0 12
43686: PPUSH
43687: LD_VAR 0 8
43691: PPUSH
43692: LD_INT 0
43694: PPUSH
43695: CALL 45474 0 3
// end ;
43699: GO 43597
43701: POP
43702: POP
// if enchidnas then
43703: LD_VAR 0 4
43707: IFFALSE 43774
// for i = 1 to enchidnas do
43709: LD_ADDR_VAR 0 11
43713: PUSH
43714: DOUBLE
43715: LD_INT 1
43717: DEC
43718: ST_TO_ADDR
43719: LD_VAR 0 4
43723: PUSH
43724: FOR_TO
43725: IFFALSE 43772
// begin hc_class = 13 ;
43727: LD_ADDR_OWVAR 28
43731: PUSH
43732: LD_INT 13
43734: ST_TO_ADDR
// hc_gallery =  ;
43735: LD_ADDR_OWVAR 33
43739: PUSH
43740: LD_STRING 
43742: ST_TO_ADDR
// animal := CreateHuman ;
43743: LD_ADDR_VAR 0 12
43747: PUSH
43748: CALL_OW 44
43752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43753: LD_VAR 0 12
43757: PPUSH
43758: LD_VAR 0 8
43762: PPUSH
43763: LD_INT 0
43765: PPUSH
43766: CALL 45474 0 3
// end ;
43770: GO 43724
43772: POP
43773: POP
// if fishes then
43774: LD_VAR 0 7
43778: IFFALSE 43845
// for i = 1 to fishes do
43780: LD_ADDR_VAR 0 11
43784: PUSH
43785: DOUBLE
43786: LD_INT 1
43788: DEC
43789: ST_TO_ADDR
43790: LD_VAR 0 7
43794: PUSH
43795: FOR_TO
43796: IFFALSE 43843
// begin hc_class = 20 ;
43798: LD_ADDR_OWVAR 28
43802: PUSH
43803: LD_INT 20
43805: ST_TO_ADDR
// hc_gallery =  ;
43806: LD_ADDR_OWVAR 33
43810: PUSH
43811: LD_STRING 
43813: ST_TO_ADDR
// animal := CreateHuman ;
43814: LD_ADDR_VAR 0 12
43818: PUSH
43819: CALL_OW 44
43823: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43824: LD_VAR 0 12
43828: PPUSH
43829: LD_VAR 0 9
43833: PPUSH
43834: LD_INT 0
43836: PPUSH
43837: CALL 45474 0 3
// end ;
43841: GO 43795
43843: POP
43844: POP
// end ;
43845: LD_VAR 0 10
43849: RET
// export function WantHeal ( sci , unit ) ; begin
43850: LD_INT 0
43852: PPUSH
// if GetTaskList ( sci ) > 0 then
43853: LD_VAR 0 1
43857: PPUSH
43858: CALL_OW 437
43862: PUSH
43863: LD_INT 0
43865: GREATER
43866: IFFALSE 43936
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43868: LD_VAR 0 1
43872: PPUSH
43873: CALL_OW 437
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: PUSH
43882: LD_INT 1
43884: ARRAY
43885: PUSH
43886: LD_STRING l
43888: EQUAL
43889: PUSH
43890: LD_VAR 0 1
43894: PPUSH
43895: CALL_OW 437
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PUSH
43904: LD_INT 4
43906: ARRAY
43907: PUSH
43908: LD_VAR 0 2
43912: EQUAL
43913: AND
43914: IFFALSE 43926
// result := true else
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_INT 1
43923: ST_TO_ADDR
43924: GO 43934
// result := false ;
43926: LD_ADDR_VAR 0 3
43930: PUSH
43931: LD_INT 0
43933: ST_TO_ADDR
// end else
43934: GO 43944
// result := false ;
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: LD_INT 0
43943: ST_TO_ADDR
// end ;
43944: LD_VAR 0 3
43948: RET
// export function HealTarget ( sci ) ; begin
43949: LD_INT 0
43951: PPUSH
// if not sci then
43952: LD_VAR 0 1
43956: NOT
43957: IFFALSE 43961
// exit ;
43959: GO 44026
// result := 0 ;
43961: LD_ADDR_VAR 0 2
43965: PUSH
43966: LD_INT 0
43968: ST_TO_ADDR
// if GetTaskList ( sci ) then
43969: LD_VAR 0 1
43973: PPUSH
43974: CALL_OW 437
43978: IFFALSE 44026
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43980: LD_VAR 0 1
43984: PPUSH
43985: CALL_OW 437
43989: PUSH
43990: LD_INT 1
43992: ARRAY
43993: PUSH
43994: LD_INT 1
43996: ARRAY
43997: PUSH
43998: LD_STRING l
44000: EQUAL
44001: IFFALSE 44026
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44003: LD_ADDR_VAR 0 2
44007: PUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: CALL_OW 437
44017: PUSH
44018: LD_INT 1
44020: ARRAY
44021: PUSH
44022: LD_INT 4
44024: ARRAY
44025: ST_TO_ADDR
// end ;
44026: LD_VAR 0 2
44030: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44031: LD_INT 0
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
// if not base_units then
44037: LD_VAR 0 1
44041: NOT
44042: IFFALSE 44046
// exit ;
44044: GO 44133
// result := false ;
44046: LD_ADDR_VAR 0 2
44050: PUSH
44051: LD_INT 0
44053: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44054: LD_ADDR_VAR 0 5
44058: PUSH
44059: LD_VAR 0 1
44063: PPUSH
44064: LD_INT 21
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PPUSH
44074: CALL_OW 72
44078: ST_TO_ADDR
// if not tmp then
44079: LD_VAR 0 5
44083: NOT
44084: IFFALSE 44088
// exit ;
44086: GO 44133
// for i in tmp do
44088: LD_ADDR_VAR 0 3
44092: PUSH
44093: LD_VAR 0 5
44097: PUSH
44098: FOR_IN
44099: IFFALSE 44131
// begin result := EnemyInRange ( i , 22 ) ;
44101: LD_ADDR_VAR 0 2
44105: PUSH
44106: LD_VAR 0 3
44110: PPUSH
44111: LD_INT 22
44113: PPUSH
44114: CALL 41731 0 2
44118: ST_TO_ADDR
// if result then
44119: LD_VAR 0 2
44123: IFFALSE 44129
// exit ;
44125: POP
44126: POP
44127: GO 44133
// end ;
44129: GO 44098
44131: POP
44132: POP
// end ;
44133: LD_VAR 0 2
44137: RET
// export function FilterByTag ( units , tag ) ; begin
44138: LD_INT 0
44140: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44141: LD_ADDR_VAR 0 3
44145: PUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: LD_INT 120
44153: PUSH
44154: LD_VAR 0 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PPUSH
44163: CALL_OW 72
44167: ST_TO_ADDR
// end ;
44168: LD_VAR 0 3
44172: RET
// export function IsDriver ( un ) ; begin
44173: LD_INT 0
44175: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44176: LD_ADDR_VAR 0 2
44180: PUSH
44181: LD_VAR 0 1
44185: PUSH
44186: LD_INT 55
44188: PUSH
44189: EMPTY
44190: LIST
44191: PPUSH
44192: CALL_OW 69
44196: IN
44197: ST_TO_ADDR
// end ;
44198: LD_VAR 0 2
44202: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44203: LD_INT 0
44205: PPUSH
44206: PPUSH
// list := [ ] ;
44207: LD_ADDR_VAR 0 5
44211: PUSH
44212: EMPTY
44213: ST_TO_ADDR
// case d of 0 :
44214: LD_VAR 0 3
44218: PUSH
44219: LD_INT 0
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44227
44225: GO 44360
44227: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44228: LD_ADDR_VAR 0 5
44232: PUSH
44233: LD_VAR 0 1
44237: PUSH
44238: LD_INT 4
44240: MINUS
44241: PUSH
44242: LD_VAR 0 2
44246: PUSH
44247: LD_INT 4
44249: MINUS
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: PUSH
44259: LD_VAR 0 1
44263: PUSH
44264: LD_INT 3
44266: MINUS
44267: PUSH
44268: LD_VAR 0 2
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: PUSH
44281: LD_VAR 0 1
44285: PUSH
44286: LD_INT 4
44288: PLUS
44289: PUSH
44290: LD_VAR 0 2
44294: PUSH
44295: LD_INT 4
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: PUSH
44303: LD_VAR 0 1
44307: PUSH
44308: LD_INT 3
44310: PLUS
44311: PUSH
44312: LD_VAR 0 2
44316: PUSH
44317: LD_INT 3
44319: PLUS
44320: PUSH
44321: LD_INT 5
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: PUSH
44329: LD_VAR 0 1
44333: PUSH
44334: LD_VAR 0 2
44338: PUSH
44339: LD_INT 4
44341: PLUS
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
// end ; 1 :
44358: GO 45058
44360: LD_INT 1
44362: DOUBLE
44363: EQUAL
44364: IFTRUE 44368
44366: GO 44501
44368: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44369: LD_ADDR_VAR 0 5
44373: PUSH
44374: LD_VAR 0 1
44378: PUSH
44379: LD_VAR 0 2
44383: PUSH
44384: LD_INT 4
44386: MINUS
44387: PUSH
44388: LD_INT 3
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: PUSH
44396: LD_VAR 0 1
44400: PUSH
44401: LD_INT 3
44403: MINUS
44404: PUSH
44405: LD_VAR 0 2
44409: PUSH
44410: LD_INT 3
44412: MINUS
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: PUSH
44422: LD_VAR 0 1
44426: PUSH
44427: LD_INT 4
44429: MINUS
44430: PUSH
44431: LD_VAR 0 2
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: PUSH
44444: LD_VAR 0 1
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 3
44456: PLUS
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: PUSH
44466: LD_VAR 0 1
44470: PUSH
44471: LD_INT 4
44473: PLUS
44474: PUSH
44475: LD_VAR 0 2
44479: PUSH
44480: LD_INT 4
44482: PLUS
44483: PUSH
44484: LD_INT 5
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// end ; 2 :
44499: GO 45058
44501: LD_INT 2
44503: DOUBLE
44504: EQUAL
44505: IFTRUE 44509
44507: GO 44638
44509: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44510: LD_ADDR_VAR 0 5
44514: PUSH
44515: LD_VAR 0 1
44519: PUSH
44520: LD_VAR 0 2
44524: PUSH
44525: LD_INT 3
44527: MINUS
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: PUSH
44537: LD_VAR 0 1
44541: PUSH
44542: LD_INT 4
44544: PLUS
44545: PUSH
44546: LD_VAR 0 2
44550: PUSH
44551: LD_INT 4
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: LIST
44558: PUSH
44559: LD_VAR 0 1
44563: PUSH
44564: LD_VAR 0 2
44568: PUSH
44569: LD_INT 4
44571: PLUS
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: PUSH
44581: LD_VAR 0 1
44585: PUSH
44586: LD_INT 3
44588: MINUS
44589: PUSH
44590: LD_VAR 0 2
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: PUSH
44603: LD_VAR 0 1
44607: PUSH
44608: LD_INT 4
44610: MINUS
44611: PUSH
44612: LD_VAR 0 2
44616: PUSH
44617: LD_INT 4
44619: MINUS
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: ST_TO_ADDR
// end ; 3 :
44636: GO 45058
44638: LD_INT 3
44640: DOUBLE
44641: EQUAL
44642: IFTRUE 44646
44644: GO 44779
44646: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44647: LD_ADDR_VAR 0 5
44651: PUSH
44652: LD_VAR 0 1
44656: PUSH
44657: LD_INT 3
44659: PLUS
44660: PUSH
44661: LD_VAR 0 2
44665: PUSH
44666: LD_INT 4
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: LIST
44673: PUSH
44674: LD_VAR 0 1
44678: PUSH
44679: LD_INT 4
44681: PLUS
44682: PUSH
44683: LD_VAR 0 2
44687: PUSH
44688: LD_INT 4
44690: PLUS
44691: PUSH
44692: LD_INT 5
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: PUSH
44700: LD_VAR 0 1
44704: PUSH
44705: LD_INT 4
44707: MINUS
44708: PUSH
44709: LD_VAR 0 2
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: PUSH
44722: LD_VAR 0 1
44726: PUSH
44727: LD_VAR 0 2
44731: PUSH
44732: LD_INT 4
44734: MINUS
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: PUSH
44744: LD_VAR 0 1
44748: PUSH
44749: LD_INT 3
44751: MINUS
44752: PUSH
44753: LD_VAR 0 2
44757: PUSH
44758: LD_INT 3
44760: MINUS
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: ST_TO_ADDR
// end ; 4 :
44777: GO 45058
44779: LD_INT 4
44781: DOUBLE
44782: EQUAL
44783: IFTRUE 44787
44785: GO 44920
44787: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44788: LD_ADDR_VAR 0 5
44792: PUSH
44793: LD_VAR 0 1
44797: PUSH
44798: LD_VAR 0 2
44802: PUSH
44803: LD_INT 4
44805: PLUS
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: PUSH
44815: LD_VAR 0 1
44819: PUSH
44820: LD_INT 3
44822: PLUS
44823: PUSH
44824: LD_VAR 0 2
44828: PUSH
44829: LD_INT 3
44831: PLUS
44832: PUSH
44833: LD_INT 5
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: LIST
44840: PUSH
44841: LD_VAR 0 1
44845: PUSH
44846: LD_INT 4
44848: PLUS
44849: PUSH
44850: LD_VAR 0 2
44854: PUSH
44855: LD_INT 4
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: PUSH
44863: LD_VAR 0 1
44867: PUSH
44868: LD_VAR 0 2
44872: PUSH
44873: LD_INT 3
44875: MINUS
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: PUSH
44885: LD_VAR 0 1
44889: PUSH
44890: LD_INT 4
44892: MINUS
44893: PUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_INT 4
44901: MINUS
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
// end ; 5 :
44918: GO 45058
44920: LD_INT 5
44922: DOUBLE
44923: EQUAL
44924: IFTRUE 44928
44926: GO 45057
44928: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44929: LD_ADDR_VAR 0 5
44933: PUSH
44934: LD_VAR 0 1
44938: PUSH
44939: LD_INT 4
44941: MINUS
44942: PUSH
44943: LD_VAR 0 2
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: PUSH
44956: LD_VAR 0 1
44960: PUSH
44961: LD_VAR 0 2
44965: PUSH
44966: LD_INT 4
44968: MINUS
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: PUSH
44978: LD_VAR 0 1
44982: PUSH
44983: LD_INT 4
44985: PLUS
44986: PUSH
44987: LD_VAR 0 2
44991: PUSH
44992: LD_INT 4
44994: PLUS
44995: PUSH
44996: LD_INT 5
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: PUSH
45004: LD_VAR 0 1
45008: PUSH
45009: LD_INT 3
45011: PLUS
45012: PUSH
45013: LD_VAR 0 2
45017: PUSH
45018: LD_INT 4
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: PUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_VAR 0 2
45035: PUSH
45036: LD_INT 3
45038: PLUS
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// end ; end ;
45055: GO 45058
45057: POP
// result := list ;
45058: LD_ADDR_VAR 0 4
45062: PUSH
45063: LD_VAR 0 5
45067: ST_TO_ADDR
// end ;
45068: LD_VAR 0 4
45072: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45073: LD_INT 0
45075: PPUSH
45076: PPUSH
45077: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45078: LD_VAR 0 1
45082: NOT
45083: PUSH
45084: LD_VAR 0 2
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: LD_INT 4
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: IN
45107: NOT
45108: OR
45109: IFFALSE 45113
// exit ;
45111: GO 45196
// tmp := [ ] ;
45113: LD_ADDR_VAR 0 5
45117: PUSH
45118: EMPTY
45119: ST_TO_ADDR
// for i in units do
45120: LD_ADDR_VAR 0 4
45124: PUSH
45125: LD_VAR 0 1
45129: PUSH
45130: FOR_IN
45131: IFFALSE 45165
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45133: LD_ADDR_VAR 0 5
45137: PUSH
45138: LD_VAR 0 5
45142: PPUSH
45143: LD_VAR 0 4
45147: PPUSH
45148: LD_VAR 0 2
45152: PPUSH
45153: CALL_OW 259
45157: PPUSH
45158: CALL 46569 0 2
45162: ST_TO_ADDR
45163: GO 45130
45165: POP
45166: POP
// if not tmp then
45167: LD_VAR 0 5
45171: NOT
45172: IFFALSE 45176
// exit ;
45174: GO 45196
// result := SortListByListDesc ( units , tmp ) ;
45176: LD_ADDR_VAR 0 3
45180: PUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: LD_VAR 0 5
45190: PPUSH
45191: CALL_OW 77
45195: ST_TO_ADDR
// end ;
45196: LD_VAR 0 3
45200: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45201: LD_INT 0
45203: PPUSH
45204: PPUSH
45205: PPUSH
// result := false ;
45206: LD_ADDR_VAR 0 3
45210: PUSH
45211: LD_INT 0
45213: ST_TO_ADDR
// if not building then
45214: LD_VAR 0 2
45218: NOT
45219: IFFALSE 45223
// exit ;
45221: GO 45361
// x := GetX ( building ) ;
45223: LD_ADDR_VAR 0 4
45227: PUSH
45228: LD_VAR 0 2
45232: PPUSH
45233: CALL_OW 250
45237: ST_TO_ADDR
// y := GetY ( building ) ;
45238: LD_ADDR_VAR 0 5
45242: PUSH
45243: LD_VAR 0 2
45247: PPUSH
45248: CALL_OW 251
45252: ST_TO_ADDR
// if not x or not y then
45253: LD_VAR 0 4
45257: NOT
45258: PUSH
45259: LD_VAR 0 5
45263: NOT
45264: OR
45265: IFFALSE 45269
// exit ;
45267: GO 45361
// if GetTaskList ( unit ) then
45269: LD_VAR 0 1
45273: PPUSH
45274: CALL_OW 437
45278: IFFALSE 45361
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45280: LD_STRING e
45282: PUSH
45283: LD_VAR 0 1
45287: PPUSH
45288: CALL_OW 437
45292: PUSH
45293: LD_INT 1
45295: ARRAY
45296: PUSH
45297: LD_INT 1
45299: ARRAY
45300: EQUAL
45301: PUSH
45302: LD_VAR 0 4
45306: PUSH
45307: LD_VAR 0 1
45311: PPUSH
45312: CALL_OW 437
45316: PUSH
45317: LD_INT 1
45319: ARRAY
45320: PUSH
45321: LD_INT 2
45323: ARRAY
45324: EQUAL
45325: AND
45326: PUSH
45327: LD_VAR 0 5
45331: PUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: CALL_OW 437
45341: PUSH
45342: LD_INT 1
45344: ARRAY
45345: PUSH
45346: LD_INT 3
45348: ARRAY
45349: EQUAL
45350: AND
45351: IFFALSE 45361
// result := true end ;
45353: LD_ADDR_VAR 0 3
45357: PUSH
45358: LD_INT 1
45360: ST_TO_ADDR
// end ;
45361: LD_VAR 0 3
45365: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45366: LD_INT 0
45368: PPUSH
// result := false ;
45369: LD_ADDR_VAR 0 4
45373: PUSH
45374: LD_INT 0
45376: ST_TO_ADDR
// if GetTaskList ( unit ) then
45377: LD_VAR 0 1
45381: PPUSH
45382: CALL_OW 437
45386: IFFALSE 45469
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45388: LD_STRING M
45390: PUSH
45391: LD_VAR 0 1
45395: PPUSH
45396: CALL_OW 437
45400: PUSH
45401: LD_INT 1
45403: ARRAY
45404: PUSH
45405: LD_INT 1
45407: ARRAY
45408: EQUAL
45409: PUSH
45410: LD_VAR 0 2
45414: PUSH
45415: LD_VAR 0 1
45419: PPUSH
45420: CALL_OW 437
45424: PUSH
45425: LD_INT 1
45427: ARRAY
45428: PUSH
45429: LD_INT 2
45431: ARRAY
45432: EQUAL
45433: AND
45434: PUSH
45435: LD_VAR 0 3
45439: PUSH
45440: LD_VAR 0 1
45444: PPUSH
45445: CALL_OW 437
45449: PUSH
45450: LD_INT 1
45452: ARRAY
45453: PUSH
45454: LD_INT 3
45456: ARRAY
45457: EQUAL
45458: AND
45459: IFFALSE 45469
// result := true ;
45461: LD_ADDR_VAR 0 4
45465: PUSH
45466: LD_INT 1
45468: ST_TO_ADDR
// end ; end ;
45469: LD_VAR 0 4
45473: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45474: LD_INT 0
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
// if not unit or not area then
45480: LD_VAR 0 1
45484: NOT
45485: PUSH
45486: LD_VAR 0 2
45490: NOT
45491: OR
45492: IFFALSE 45496
// exit ;
45494: GO 45672
// tmp := AreaToList ( area , i ) ;
45496: LD_ADDR_VAR 0 6
45500: PUSH
45501: LD_VAR 0 2
45505: PPUSH
45506: LD_VAR 0 5
45510: PPUSH
45511: CALL_OW 517
45515: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45516: LD_ADDR_VAR 0 5
45520: PUSH
45521: DOUBLE
45522: LD_INT 1
45524: DEC
45525: ST_TO_ADDR
45526: LD_VAR 0 6
45530: PUSH
45531: LD_INT 1
45533: ARRAY
45534: PUSH
45535: FOR_TO
45536: IFFALSE 45670
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45538: LD_ADDR_VAR 0 7
45542: PUSH
45543: LD_VAR 0 6
45547: PUSH
45548: LD_INT 1
45550: ARRAY
45551: PUSH
45552: LD_VAR 0 5
45556: ARRAY
45557: PUSH
45558: LD_VAR 0 6
45562: PUSH
45563: LD_INT 2
45565: ARRAY
45566: PUSH
45567: LD_VAR 0 5
45571: ARRAY
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45577: LD_INT 92
45579: PUSH
45580: LD_VAR 0 7
45584: PUSH
45585: LD_INT 1
45587: ARRAY
45588: PUSH
45589: LD_VAR 0 7
45593: PUSH
45594: LD_INT 2
45596: ARRAY
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: PPUSH
45607: CALL_OW 69
45611: PUSH
45612: LD_INT 0
45614: EQUAL
45615: IFFALSE 45668
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45617: LD_VAR 0 1
45621: PPUSH
45622: LD_VAR 0 7
45626: PUSH
45627: LD_INT 1
45629: ARRAY
45630: PPUSH
45631: LD_VAR 0 7
45635: PUSH
45636: LD_INT 2
45638: ARRAY
45639: PPUSH
45640: LD_VAR 0 3
45644: PPUSH
45645: CALL_OW 48
// result := IsPlaced ( unit ) ;
45649: LD_ADDR_VAR 0 4
45653: PUSH
45654: LD_VAR 0 1
45658: PPUSH
45659: CALL_OW 305
45663: ST_TO_ADDR
// exit ;
45664: POP
45665: POP
45666: GO 45672
// end ; end ;
45668: GO 45535
45670: POP
45671: POP
// end ;
45672: LD_VAR 0 4
45676: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45677: LD_INT 0
45679: PPUSH
45680: PPUSH
45681: PPUSH
// if not side or side > 8 then
45682: LD_VAR 0 1
45686: NOT
45687: PUSH
45688: LD_VAR 0 1
45692: PUSH
45693: LD_INT 8
45695: GREATER
45696: OR
45697: IFFALSE 45701
// exit ;
45699: GO 45888
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45701: LD_ADDR_VAR 0 4
45705: PUSH
45706: LD_INT 22
45708: PUSH
45709: LD_VAR 0 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 21
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PPUSH
45732: CALL_OW 69
45736: ST_TO_ADDR
// if not tmp then
45737: LD_VAR 0 4
45741: NOT
45742: IFFALSE 45746
// exit ;
45744: GO 45888
// enable_addtolog := true ;
45746: LD_ADDR_OWVAR 81
45750: PUSH
45751: LD_INT 1
45753: ST_TO_ADDR
// AddToLog ( [ ) ;
45754: LD_STRING [
45756: PPUSH
45757: CALL_OW 561
// for i in tmp do
45761: LD_ADDR_VAR 0 3
45765: PUSH
45766: LD_VAR 0 4
45770: PUSH
45771: FOR_IN
45772: IFFALSE 45879
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45774: LD_STRING [
45776: PUSH
45777: LD_VAR 0 3
45781: PPUSH
45782: CALL_OW 266
45786: STR
45787: PUSH
45788: LD_STRING , 
45790: STR
45791: PUSH
45792: LD_VAR 0 3
45796: PPUSH
45797: CALL_OW 250
45801: STR
45802: PUSH
45803: LD_STRING , 
45805: STR
45806: PUSH
45807: LD_VAR 0 3
45811: PPUSH
45812: CALL_OW 251
45816: STR
45817: PUSH
45818: LD_STRING , 
45820: STR
45821: PUSH
45822: LD_VAR 0 3
45826: PPUSH
45827: CALL_OW 254
45831: STR
45832: PUSH
45833: LD_STRING , 
45835: STR
45836: PUSH
45837: LD_VAR 0 3
45841: PPUSH
45842: LD_INT 1
45844: PPUSH
45845: CALL_OW 268
45849: STR
45850: PUSH
45851: LD_STRING , 
45853: STR
45854: PUSH
45855: LD_VAR 0 3
45859: PPUSH
45860: LD_INT 2
45862: PPUSH
45863: CALL_OW 268
45867: STR
45868: PUSH
45869: LD_STRING ],
45871: STR
45872: PPUSH
45873: CALL_OW 561
// end ;
45877: GO 45771
45879: POP
45880: POP
// AddToLog ( ]; ) ;
45881: LD_STRING ];
45883: PPUSH
45884: CALL_OW 561
// end ;
45888: LD_VAR 0 2
45892: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45893: LD_INT 0
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
45899: PPUSH
// if not area or not rate or not max then
45900: LD_VAR 0 1
45904: NOT
45905: PUSH
45906: LD_VAR 0 2
45910: NOT
45911: OR
45912: PUSH
45913: LD_VAR 0 4
45917: NOT
45918: OR
45919: IFFALSE 45923
// exit ;
45921: GO 46112
// while 1 do
45923: LD_INT 1
45925: IFFALSE 46112
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45927: LD_ADDR_VAR 0 9
45931: PUSH
45932: LD_VAR 0 1
45936: PPUSH
45937: LD_INT 1
45939: PPUSH
45940: CALL_OW 287
45944: PUSH
45945: LD_INT 10
45947: MUL
45948: ST_TO_ADDR
// r := rate / 10 ;
45949: LD_ADDR_VAR 0 7
45953: PUSH
45954: LD_VAR 0 2
45958: PUSH
45959: LD_INT 10
45961: DIVREAL
45962: ST_TO_ADDR
// time := 1 1$00 ;
45963: LD_ADDR_VAR 0 8
45967: PUSH
45968: LD_INT 2100
45970: ST_TO_ADDR
// if amount < min then
45971: LD_VAR 0 9
45975: PUSH
45976: LD_VAR 0 3
45980: LESS
45981: IFFALSE 45999
// r := r * 2 else
45983: LD_ADDR_VAR 0 7
45987: PUSH
45988: LD_VAR 0 7
45992: PUSH
45993: LD_INT 2
45995: MUL
45996: ST_TO_ADDR
45997: GO 46025
// if amount > max then
45999: LD_VAR 0 9
46003: PUSH
46004: LD_VAR 0 4
46008: GREATER
46009: IFFALSE 46025
// r := r / 2 ;
46011: LD_ADDR_VAR 0 7
46015: PUSH
46016: LD_VAR 0 7
46020: PUSH
46021: LD_INT 2
46023: DIVREAL
46024: ST_TO_ADDR
// time := time / r ;
46025: LD_ADDR_VAR 0 8
46029: PUSH
46030: LD_VAR 0 8
46034: PUSH
46035: LD_VAR 0 7
46039: DIVREAL
46040: ST_TO_ADDR
// if time < 0 then
46041: LD_VAR 0 8
46045: PUSH
46046: LD_INT 0
46048: LESS
46049: IFFALSE 46066
// time := time * - 1 ;
46051: LD_ADDR_VAR 0 8
46055: PUSH
46056: LD_VAR 0 8
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: MUL
46065: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46066: LD_VAR 0 8
46070: PUSH
46071: LD_INT 35
46073: PPUSH
46074: LD_INT 875
46076: PPUSH
46077: CALL_OW 12
46081: PLUS
46082: PPUSH
46083: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46087: LD_INT 1
46089: PPUSH
46090: LD_INT 5
46092: PPUSH
46093: CALL_OW 12
46097: PPUSH
46098: LD_VAR 0 1
46102: PPUSH
46103: LD_INT 1
46105: PPUSH
46106: CALL_OW 55
// end ;
46110: GO 45923
// end ;
46112: LD_VAR 0 5
46116: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46117: LD_INT 0
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
// if not turrets or not factories then
46127: LD_VAR 0 1
46131: NOT
46132: PUSH
46133: LD_VAR 0 2
46137: NOT
46138: OR
46139: IFFALSE 46143
// exit ;
46141: GO 46450
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46143: LD_ADDR_VAR 0 10
46147: PUSH
46148: LD_INT 5
46150: PUSH
46151: LD_INT 6
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 4
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 3
46170: PUSH
46171: LD_INT 5
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 24
46185: PUSH
46186: LD_INT 25
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 23
46195: PUSH
46196: LD_INT 27
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 42
46209: PUSH
46210: LD_INT 43
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 44
46219: PUSH
46220: LD_INT 46
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 45
46229: PUSH
46230: LD_INT 47
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// result := [ ] ;
46247: LD_ADDR_VAR 0 3
46251: PUSH
46252: EMPTY
46253: ST_TO_ADDR
// for i in turrets do
46254: LD_ADDR_VAR 0 4
46258: PUSH
46259: LD_VAR 0 1
46263: PUSH
46264: FOR_IN
46265: IFFALSE 46448
// begin nat := GetNation ( i ) ;
46267: LD_ADDR_VAR 0 7
46271: PUSH
46272: LD_VAR 0 4
46276: PPUSH
46277: CALL_OW 248
46281: ST_TO_ADDR
// weapon := 0 ;
46282: LD_ADDR_VAR 0 8
46286: PUSH
46287: LD_INT 0
46289: ST_TO_ADDR
// if not nat then
46290: LD_VAR 0 7
46294: NOT
46295: IFFALSE 46299
// continue ;
46297: GO 46264
// for j in list [ nat ] do
46299: LD_ADDR_VAR 0 5
46303: PUSH
46304: LD_VAR 0 10
46308: PUSH
46309: LD_VAR 0 7
46313: ARRAY
46314: PUSH
46315: FOR_IN
46316: IFFALSE 46357
// if GetBWeapon ( i ) = j [ 1 ] then
46318: LD_VAR 0 4
46322: PPUSH
46323: CALL_OW 269
46327: PUSH
46328: LD_VAR 0 5
46332: PUSH
46333: LD_INT 1
46335: ARRAY
46336: EQUAL
46337: IFFALSE 46355
// begin weapon := j [ 2 ] ;
46339: LD_ADDR_VAR 0 8
46343: PUSH
46344: LD_VAR 0 5
46348: PUSH
46349: LD_INT 2
46351: ARRAY
46352: ST_TO_ADDR
// break ;
46353: GO 46357
// end ;
46355: GO 46315
46357: POP
46358: POP
// if not weapon then
46359: LD_VAR 0 8
46363: NOT
46364: IFFALSE 46368
// continue ;
46366: GO 46264
// for k in factories do
46368: LD_ADDR_VAR 0 6
46372: PUSH
46373: LD_VAR 0 2
46377: PUSH
46378: FOR_IN
46379: IFFALSE 46444
// begin weapons := AvailableWeaponList ( k ) ;
46381: LD_ADDR_VAR 0 9
46385: PUSH
46386: LD_VAR 0 6
46390: PPUSH
46391: CALL_OW 478
46395: ST_TO_ADDR
// if not weapons then
46396: LD_VAR 0 9
46400: NOT
46401: IFFALSE 46405
// continue ;
46403: GO 46378
// if weapon in weapons then
46405: LD_VAR 0 8
46409: PUSH
46410: LD_VAR 0 9
46414: IN
46415: IFFALSE 46442
// begin result := [ i , weapon ] ;
46417: LD_ADDR_VAR 0 3
46421: PUSH
46422: LD_VAR 0 4
46426: PUSH
46427: LD_VAR 0 8
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: ST_TO_ADDR
// exit ;
46436: POP
46437: POP
46438: POP
46439: POP
46440: GO 46450
// end ; end ;
46442: GO 46378
46444: POP
46445: POP
// end ;
46446: GO 46264
46448: POP
46449: POP
// end ;
46450: LD_VAR 0 3
46454: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46455: LD_INT 0
46457: PPUSH
// if not side or side > 8 then
46458: LD_VAR 0 3
46462: NOT
46463: PUSH
46464: LD_VAR 0 3
46468: PUSH
46469: LD_INT 8
46471: GREATER
46472: OR
46473: IFFALSE 46477
// exit ;
46475: GO 46536
// if not range then
46477: LD_VAR 0 4
46481: NOT
46482: IFFALSE 46493
// range := - 12 ;
46484: LD_ADDR_VAR 0 4
46488: PUSH
46489: LD_INT 12
46491: NEG
46492: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46493: LD_VAR 0 1
46497: PPUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: LD_VAR 0 3
46507: PPUSH
46508: LD_VAR 0 4
46512: PPUSH
46513: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46517: LD_VAR 0 1
46521: PPUSH
46522: LD_VAR 0 2
46526: PPUSH
46527: LD_VAR 0 3
46531: PPUSH
46532: CALL_OW 331
// end ;
46536: LD_VAR 0 5
46540: RET
// export function Video ( mode ) ; begin
46541: LD_INT 0
46543: PPUSH
// ingame_video = mode ;
46544: LD_ADDR_OWVAR 52
46548: PUSH
46549: LD_VAR 0 1
46553: ST_TO_ADDR
// interface_hidden = mode ;
46554: LD_ADDR_OWVAR 54
46558: PUSH
46559: LD_VAR 0 1
46563: ST_TO_ADDR
// end ;
46564: LD_VAR 0 2
46568: RET
// export function Join ( array , element ) ; begin
46569: LD_INT 0
46571: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46572: LD_ADDR_VAR 0 3
46576: PUSH
46577: LD_VAR 0 1
46581: PPUSH
46582: LD_VAR 0 1
46586: PUSH
46587: LD_INT 1
46589: PLUS
46590: PPUSH
46591: LD_VAR 0 2
46595: PPUSH
46596: CALL_OW 1
46600: ST_TO_ADDR
// end ;
46601: LD_VAR 0 3
46605: RET
// export function JoinUnion ( array , element ) ; begin
46606: LD_INT 0
46608: PPUSH
// result := array union element ;
46609: LD_ADDR_VAR 0 3
46613: PUSH
46614: LD_VAR 0 1
46618: PUSH
46619: LD_VAR 0 2
46623: UNION
46624: ST_TO_ADDR
// end ;
46625: LD_VAR 0 3
46629: RET
// export function GetBehemoths ( side ) ; begin
46630: LD_INT 0
46632: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46633: LD_ADDR_VAR 0 2
46637: PUSH
46638: LD_INT 22
46640: PUSH
46641: LD_VAR 0 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 31
46652: PUSH
46653: LD_INT 25
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PPUSH
46664: CALL_OW 69
46668: ST_TO_ADDR
// end ;
46669: LD_VAR 0 2
46673: RET
// export function Shuffle ( array ) ; var i , index ; begin
46674: LD_INT 0
46676: PPUSH
46677: PPUSH
46678: PPUSH
// result := [ ] ;
46679: LD_ADDR_VAR 0 2
46683: PUSH
46684: EMPTY
46685: ST_TO_ADDR
// if not array then
46686: LD_VAR 0 1
46690: NOT
46691: IFFALSE 46695
// exit ;
46693: GO 46794
// Randomize ;
46695: CALL_OW 10
// for i = array downto 1 do
46699: LD_ADDR_VAR 0 3
46703: PUSH
46704: DOUBLE
46705: LD_VAR 0 1
46709: INC
46710: ST_TO_ADDR
46711: LD_INT 1
46713: PUSH
46714: FOR_DOWNTO
46715: IFFALSE 46792
// begin index := rand ( 1 , array ) ;
46717: LD_ADDR_VAR 0 4
46721: PUSH
46722: LD_INT 1
46724: PPUSH
46725: LD_VAR 0 1
46729: PPUSH
46730: CALL_OW 12
46734: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46735: LD_ADDR_VAR 0 2
46739: PUSH
46740: LD_VAR 0 2
46744: PPUSH
46745: LD_VAR 0 2
46749: PUSH
46750: LD_INT 1
46752: PLUS
46753: PPUSH
46754: LD_VAR 0 1
46758: PUSH
46759: LD_VAR 0 4
46763: ARRAY
46764: PPUSH
46765: CALL_OW 2
46769: ST_TO_ADDR
// array := Delete ( array , index ) ;
46770: LD_ADDR_VAR 0 1
46774: PUSH
46775: LD_VAR 0 1
46779: PPUSH
46780: LD_VAR 0 4
46784: PPUSH
46785: CALL_OW 3
46789: ST_TO_ADDR
// end ;
46790: GO 46714
46792: POP
46793: POP
// end ;
46794: LD_VAR 0 2
46798: RET
// export function GetBaseMaterials ( base ) ; begin
46799: LD_INT 0
46801: PPUSH
// result := [ 0 , 0 , 0 ] ;
46802: LD_ADDR_VAR 0 2
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// if not base then
46821: LD_VAR 0 1
46825: NOT
46826: IFFALSE 46830
// exit ;
46828: GO 46879
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46830: LD_ADDR_VAR 0 2
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: LD_INT 1
46842: PPUSH
46843: CALL_OW 275
46847: PUSH
46848: LD_VAR 0 1
46852: PPUSH
46853: LD_INT 2
46855: PPUSH
46856: CALL_OW 275
46860: PUSH
46861: LD_VAR 0 1
46865: PPUSH
46866: LD_INT 3
46868: PPUSH
46869: CALL_OW 275
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// end ;
46879: LD_VAR 0 2
46883: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46884: LD_INT 0
46886: PPUSH
46887: PPUSH
// result := array ;
46888: LD_ADDR_VAR 0 3
46892: PUSH
46893: LD_VAR 0 1
46897: ST_TO_ADDR
// if size >= result then
46898: LD_VAR 0 2
46902: PUSH
46903: LD_VAR 0 3
46907: GREATEREQUAL
46908: IFFALSE 46912
// exit ;
46910: GO 46962
// if size then
46912: LD_VAR 0 2
46916: IFFALSE 46962
// for i := array downto size do
46918: LD_ADDR_VAR 0 4
46922: PUSH
46923: DOUBLE
46924: LD_VAR 0 1
46928: INC
46929: ST_TO_ADDR
46930: LD_VAR 0 2
46934: PUSH
46935: FOR_DOWNTO
46936: IFFALSE 46960
// result := Delete ( result , result ) ;
46938: LD_ADDR_VAR 0 3
46942: PUSH
46943: LD_VAR 0 3
46947: PPUSH
46948: LD_VAR 0 3
46952: PPUSH
46953: CALL_OW 3
46957: ST_TO_ADDR
46958: GO 46935
46960: POP
46961: POP
// end ;
46962: LD_VAR 0 3
46966: RET
// export function ComExit ( unit ) ; var tmp ; begin
46967: LD_INT 0
46969: PPUSH
46970: PPUSH
// if not IsInUnit ( unit ) then
46971: LD_VAR 0 1
46975: PPUSH
46976: CALL_OW 310
46980: NOT
46981: IFFALSE 46985
// exit ;
46983: GO 47045
// tmp := IsInUnit ( unit ) ;
46985: LD_ADDR_VAR 0 3
46989: PUSH
46990: LD_VAR 0 1
46994: PPUSH
46995: CALL_OW 310
46999: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47000: LD_VAR 0 3
47004: PPUSH
47005: CALL_OW 247
47009: PUSH
47010: LD_INT 2
47012: EQUAL
47013: IFFALSE 47026
// ComExitVehicle ( unit ) else
47015: LD_VAR 0 1
47019: PPUSH
47020: CALL_OW 121
47024: GO 47035
// ComExitBuilding ( unit ) ;
47026: LD_VAR 0 1
47030: PPUSH
47031: CALL_OW 122
// result := tmp ;
47035: LD_ADDR_VAR 0 2
47039: PUSH
47040: LD_VAR 0 3
47044: ST_TO_ADDR
// end ;
47045: LD_VAR 0 2
47049: RET
// export function ComExitAll ( units ) ; var i ; begin
47050: LD_INT 0
47052: PPUSH
47053: PPUSH
// if not units then
47054: LD_VAR 0 1
47058: NOT
47059: IFFALSE 47063
// exit ;
47061: GO 47089
// for i in units do
47063: LD_ADDR_VAR 0 3
47067: PUSH
47068: LD_VAR 0 1
47072: PUSH
47073: FOR_IN
47074: IFFALSE 47087
// ComExit ( i ) ;
47076: LD_VAR 0 3
47080: PPUSH
47081: CALL 46967 0 1
47085: GO 47073
47087: POP
47088: POP
// end ;
47089: LD_VAR 0 2
47093: RET
// export function ResetHc ; begin
47094: LD_INT 0
47096: PPUSH
// InitHc ;
47097: CALL_OW 19
// hc_importance := 0 ;
47101: LD_ADDR_OWVAR 32
47105: PUSH
47106: LD_INT 0
47108: ST_TO_ADDR
// end ;
47109: LD_VAR 0 1
47113: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47114: LD_INT 0
47116: PPUSH
47117: PPUSH
47118: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47119: LD_ADDR_VAR 0 6
47123: PUSH
47124: LD_VAR 0 1
47128: PUSH
47129: LD_VAR 0 3
47133: PLUS
47134: PUSH
47135: LD_INT 2
47137: DIV
47138: ST_TO_ADDR
// if _x < 0 then
47139: LD_VAR 0 6
47143: PUSH
47144: LD_INT 0
47146: LESS
47147: IFFALSE 47164
// _x := _x * - 1 ;
47149: LD_ADDR_VAR 0 6
47153: PUSH
47154: LD_VAR 0 6
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: MUL
47163: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47164: LD_ADDR_VAR 0 7
47168: PUSH
47169: LD_VAR 0 2
47173: PUSH
47174: LD_VAR 0 4
47178: PLUS
47179: PUSH
47180: LD_INT 2
47182: DIV
47183: ST_TO_ADDR
// if _y < 0 then
47184: LD_VAR 0 7
47188: PUSH
47189: LD_INT 0
47191: LESS
47192: IFFALSE 47209
// _y := _y * - 1 ;
47194: LD_ADDR_VAR 0 7
47198: PUSH
47199: LD_VAR 0 7
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: MUL
47208: ST_TO_ADDR
// result := [ _x , _y ] ;
47209: LD_ADDR_VAR 0 5
47213: PUSH
47214: LD_VAR 0 6
47218: PUSH
47219: LD_VAR 0 7
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: ST_TO_ADDR
// end ;
47228: LD_VAR 0 5
47232: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47233: LD_INT 0
47235: PPUSH
47236: PPUSH
47237: PPUSH
47238: PPUSH
// task := GetTaskList ( unit ) ;
47239: LD_ADDR_VAR 0 7
47243: PUSH
47244: LD_VAR 0 1
47248: PPUSH
47249: CALL_OW 437
47253: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47254: LD_VAR 0 7
47258: NOT
47259: PUSH
47260: LD_VAR 0 1
47264: PPUSH
47265: LD_VAR 0 2
47269: PPUSH
47270: CALL_OW 308
47274: NOT
47275: AND
47276: IFFALSE 47280
// exit ;
47278: GO 47398
// if IsInArea ( unit , area ) then
47280: LD_VAR 0 1
47284: PPUSH
47285: LD_VAR 0 2
47289: PPUSH
47290: CALL_OW 308
47294: IFFALSE 47312
// begin ComMoveToArea ( unit , goAway ) ;
47296: LD_VAR 0 1
47300: PPUSH
47301: LD_VAR 0 3
47305: PPUSH
47306: CALL_OW 113
// exit ;
47310: GO 47398
// end ; if task [ 1 ] [ 1 ] <> M then
47312: LD_VAR 0 7
47316: PUSH
47317: LD_INT 1
47319: ARRAY
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PUSH
47325: LD_STRING M
47327: NONEQUAL
47328: IFFALSE 47332
// exit ;
47330: GO 47398
// x := task [ 1 ] [ 2 ] ;
47332: LD_ADDR_VAR 0 5
47336: PUSH
47337: LD_VAR 0 7
47341: PUSH
47342: LD_INT 1
47344: ARRAY
47345: PUSH
47346: LD_INT 2
47348: ARRAY
47349: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47350: LD_ADDR_VAR 0 6
47354: PUSH
47355: LD_VAR 0 7
47359: PUSH
47360: LD_INT 1
47362: ARRAY
47363: PUSH
47364: LD_INT 3
47366: ARRAY
47367: ST_TO_ADDR
// if InArea ( x , y , area ) then
47368: LD_VAR 0 5
47372: PPUSH
47373: LD_VAR 0 6
47377: PPUSH
47378: LD_VAR 0 2
47382: PPUSH
47383: CALL_OW 309
47387: IFFALSE 47398
// ComStop ( unit ) ;
47389: LD_VAR 0 1
47393: PPUSH
47394: CALL_OW 141
// end ;
47398: LD_VAR 0 4
47402: RET
// export function Abs ( value ) ; begin
47403: LD_INT 0
47405: PPUSH
// result := value ;
47406: LD_ADDR_VAR 0 2
47410: PUSH
47411: LD_VAR 0 1
47415: ST_TO_ADDR
// if value < 0 then
47416: LD_VAR 0 1
47420: PUSH
47421: LD_INT 0
47423: LESS
47424: IFFALSE 47441
// result := value * - 1 ;
47426: LD_ADDR_VAR 0 2
47430: PUSH
47431: LD_VAR 0 1
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: MUL
47440: ST_TO_ADDR
// end ;
47441: LD_VAR 0 2
47445: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47446: LD_INT 0
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
// if not unit or not building then
47456: LD_VAR 0 1
47460: NOT
47461: PUSH
47462: LD_VAR 0 2
47466: NOT
47467: OR
47468: IFFALSE 47472
// exit ;
47470: GO 47698
// x := GetX ( building ) ;
47472: LD_ADDR_VAR 0 4
47476: PUSH
47477: LD_VAR 0 2
47481: PPUSH
47482: CALL_OW 250
47486: ST_TO_ADDR
// y := GetY ( building ) ;
47487: LD_ADDR_VAR 0 6
47491: PUSH
47492: LD_VAR 0 2
47496: PPUSH
47497: CALL_OW 251
47501: ST_TO_ADDR
// d := GetDir ( building ) ;
47502: LD_ADDR_VAR 0 8
47506: PUSH
47507: LD_VAR 0 2
47511: PPUSH
47512: CALL_OW 254
47516: ST_TO_ADDR
// r := 4 ;
47517: LD_ADDR_VAR 0 9
47521: PUSH
47522: LD_INT 4
47524: ST_TO_ADDR
// for i := 1 to 5 do
47525: LD_ADDR_VAR 0 10
47529: PUSH
47530: DOUBLE
47531: LD_INT 1
47533: DEC
47534: ST_TO_ADDR
47535: LD_INT 5
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47696
// begin _x := ShiftX ( x , d , r + i ) ;
47541: LD_ADDR_VAR 0 5
47545: PUSH
47546: LD_VAR 0 4
47550: PPUSH
47551: LD_VAR 0 8
47555: PPUSH
47556: LD_VAR 0 9
47560: PUSH
47561: LD_VAR 0 10
47565: PLUS
47566: PPUSH
47567: CALL_OW 272
47571: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47572: LD_ADDR_VAR 0 7
47576: PUSH
47577: LD_VAR 0 6
47581: PPUSH
47582: LD_VAR 0 8
47586: PPUSH
47587: LD_VAR 0 9
47591: PUSH
47592: LD_VAR 0 10
47596: PLUS
47597: PPUSH
47598: CALL_OW 273
47602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47603: LD_VAR 0 5
47607: PPUSH
47608: LD_VAR 0 7
47612: PPUSH
47613: CALL_OW 488
47617: PUSH
47618: LD_VAR 0 5
47622: PPUSH
47623: LD_VAR 0 7
47627: PPUSH
47628: CALL_OW 428
47632: PPUSH
47633: CALL_OW 247
47637: PUSH
47638: LD_INT 3
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: IN
47648: NOT
47649: AND
47650: IFFALSE 47694
// begin ComMoveXY ( unit , _x , _y ) ;
47652: LD_VAR 0 1
47656: PPUSH
47657: LD_VAR 0 5
47661: PPUSH
47662: LD_VAR 0 7
47666: PPUSH
47667: CALL_OW 111
// result := [ _x , _y ] ;
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_VAR 0 5
47680: PUSH
47681: LD_VAR 0 7
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: ST_TO_ADDR
// exit ;
47690: POP
47691: POP
47692: GO 47698
// end ; end ;
47694: GO 47538
47696: POP
47697: POP
// end ;
47698: LD_VAR 0 3
47702: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47703: LD_INT 0
47705: PPUSH
47706: PPUSH
47707: PPUSH
// result := 0 ;
47708: LD_ADDR_VAR 0 3
47712: PUSH
47713: LD_INT 0
47715: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47716: LD_VAR 0 1
47720: PUSH
47721: LD_INT 0
47723: LESS
47724: PUSH
47725: LD_VAR 0 1
47729: PUSH
47730: LD_INT 8
47732: GREATER
47733: OR
47734: PUSH
47735: LD_VAR 0 2
47739: PUSH
47740: LD_INT 0
47742: LESS
47743: OR
47744: PUSH
47745: LD_VAR 0 2
47749: PUSH
47750: LD_INT 8
47752: GREATER
47753: OR
47754: IFFALSE 47758
// exit ;
47756: GO 47833
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47758: LD_ADDR_VAR 0 4
47762: PUSH
47763: LD_INT 22
47765: PUSH
47766: LD_VAR 0 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PPUSH
47775: CALL_OW 69
47779: PUSH
47780: FOR_IN
47781: IFFALSE 47831
// begin un := UnitShoot ( i ) ;
47783: LD_ADDR_VAR 0 5
47787: PUSH
47788: LD_VAR 0 4
47792: PPUSH
47793: CALL_OW 504
47797: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47798: LD_VAR 0 5
47802: PPUSH
47803: CALL_OW 255
47807: PUSH
47808: LD_VAR 0 1
47812: EQUAL
47813: IFFALSE 47829
// begin result := un ;
47815: LD_ADDR_VAR 0 3
47819: PUSH
47820: LD_VAR 0 5
47824: ST_TO_ADDR
// exit ;
47825: POP
47826: POP
47827: GO 47833
// end ; end ;
47829: GO 47780
47831: POP
47832: POP
// end ;
47833: LD_VAR 0 3
47837: RET
// export function GetCargoBay ( units ) ; begin
47838: LD_INT 0
47840: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47841: LD_ADDR_VAR 0 2
47845: PUSH
47846: LD_VAR 0 1
47850: PPUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 34
47856: PUSH
47857: LD_INT 12
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 34
47866: PUSH
47867: LD_INT 51
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 34
47876: PUSH
47877: LD_INT 32
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 34
47886: PUSH
47887: LD_INT 89
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: PPUSH
47901: CALL_OW 72
47905: ST_TO_ADDR
// end ;
47906: LD_VAR 0 2
47910: RET
// export function Negate ( value ) ; begin
47911: LD_INT 0
47913: PPUSH
// result := not value ;
47914: LD_ADDR_VAR 0 2
47918: PUSH
47919: LD_VAR 0 1
47923: NOT
47924: ST_TO_ADDR
// end ;
47925: LD_VAR 0 2
47929: RET
// export function Inc ( value ) ; begin
47930: LD_INT 0
47932: PPUSH
// result := value + 1 ;
47933: LD_ADDR_VAR 0 2
47937: PUSH
47938: LD_VAR 0 1
47942: PUSH
47943: LD_INT 1
47945: PLUS
47946: ST_TO_ADDR
// end ;
47947: LD_VAR 0 2
47951: RET
// export function Dec ( value ) ; begin
47952: LD_INT 0
47954: PPUSH
// result := value - 1 ;
47955: LD_ADDR_VAR 0 2
47959: PUSH
47960: LD_VAR 0 1
47964: PUSH
47965: LD_INT 1
47967: MINUS
47968: ST_TO_ADDR
// end ;
47969: LD_VAR 0 2
47973: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47974: LD_INT 0
47976: PPUSH
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
47981: PPUSH
47982: PPUSH
47983: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47984: LD_VAR 0 1
47988: PPUSH
47989: LD_VAR 0 2
47993: PPUSH
47994: CALL_OW 488
47998: NOT
47999: PUSH
48000: LD_VAR 0 3
48004: PPUSH
48005: LD_VAR 0 4
48009: PPUSH
48010: CALL_OW 488
48014: NOT
48015: OR
48016: IFFALSE 48029
// begin result := - 1 ;
48018: LD_ADDR_VAR 0 5
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: ST_TO_ADDR
// exit ;
48027: GO 48264
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48029: LD_ADDR_VAR 0 12
48033: PUSH
48034: LD_VAR 0 1
48038: PPUSH
48039: LD_VAR 0 2
48043: PPUSH
48044: LD_VAR 0 3
48048: PPUSH
48049: LD_VAR 0 4
48053: PPUSH
48054: CALL 47114 0 4
48058: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48059: LD_ADDR_VAR 0 11
48063: PUSH
48064: LD_VAR 0 1
48068: PPUSH
48069: LD_VAR 0 2
48073: PPUSH
48074: LD_VAR 0 12
48078: PUSH
48079: LD_INT 1
48081: ARRAY
48082: PPUSH
48083: LD_VAR 0 12
48087: PUSH
48088: LD_INT 2
48090: ARRAY
48091: PPUSH
48092: CALL_OW 298
48096: ST_TO_ADDR
// distance := 9999 ;
48097: LD_ADDR_VAR 0 10
48101: PUSH
48102: LD_INT 9999
48104: ST_TO_ADDR
// for i := 0 to 5 do
48105: LD_ADDR_VAR 0 6
48109: PUSH
48110: DOUBLE
48111: LD_INT 0
48113: DEC
48114: ST_TO_ADDR
48115: LD_INT 5
48117: PUSH
48118: FOR_TO
48119: IFFALSE 48262
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48121: LD_ADDR_VAR 0 7
48125: PUSH
48126: LD_VAR 0 1
48130: PPUSH
48131: LD_VAR 0 6
48135: PPUSH
48136: LD_VAR 0 11
48140: PPUSH
48141: CALL_OW 272
48145: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48146: LD_ADDR_VAR 0 8
48150: PUSH
48151: LD_VAR 0 2
48155: PPUSH
48156: LD_VAR 0 6
48160: PPUSH
48161: LD_VAR 0 11
48165: PPUSH
48166: CALL_OW 273
48170: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48171: LD_VAR 0 7
48175: PPUSH
48176: LD_VAR 0 8
48180: PPUSH
48181: CALL_OW 488
48185: NOT
48186: IFFALSE 48190
// continue ;
48188: GO 48118
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48190: LD_ADDR_VAR 0 9
48194: PUSH
48195: LD_VAR 0 12
48199: PUSH
48200: LD_INT 1
48202: ARRAY
48203: PPUSH
48204: LD_VAR 0 12
48208: PUSH
48209: LD_INT 2
48211: ARRAY
48212: PPUSH
48213: LD_VAR 0 7
48217: PPUSH
48218: LD_VAR 0 8
48222: PPUSH
48223: CALL_OW 298
48227: ST_TO_ADDR
// if tmp < distance then
48228: LD_VAR 0 9
48232: PUSH
48233: LD_VAR 0 10
48237: LESS
48238: IFFALSE 48260
// begin result := i ;
48240: LD_ADDR_VAR 0 5
48244: PUSH
48245: LD_VAR 0 6
48249: ST_TO_ADDR
// distance := tmp ;
48250: LD_ADDR_VAR 0 10
48254: PUSH
48255: LD_VAR 0 9
48259: ST_TO_ADDR
// end ; end ;
48260: GO 48118
48262: POP
48263: POP
// end ;
48264: LD_VAR 0 5
48268: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48269: LD_INT 0
48271: PPUSH
48272: PPUSH
// if not driver or not IsInUnit ( driver ) then
48273: LD_VAR 0 1
48277: NOT
48278: PUSH
48279: LD_VAR 0 1
48283: PPUSH
48284: CALL_OW 310
48288: NOT
48289: OR
48290: IFFALSE 48294
// exit ;
48292: GO 48384
// vehicle := IsInUnit ( driver ) ;
48294: LD_ADDR_VAR 0 3
48298: PUSH
48299: LD_VAR 0 1
48303: PPUSH
48304: CALL_OW 310
48308: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48309: LD_VAR 0 1
48313: PPUSH
48314: LD_STRING \
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: PUSH
48344: LD_STRING E
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_VAR 0 3
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PPUSH
48380: CALL_OW 446
// end ;
48384: LD_VAR 0 2
48388: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48389: LD_INT 0
48391: PPUSH
48392: PPUSH
// if not driver or not IsInUnit ( driver ) then
48393: LD_VAR 0 1
48397: NOT
48398: PUSH
48399: LD_VAR 0 1
48403: PPUSH
48404: CALL_OW 310
48408: NOT
48409: OR
48410: IFFALSE 48414
// exit ;
48412: GO 48504
// vehicle := IsInUnit ( driver ) ;
48414: LD_ADDR_VAR 0 3
48418: PUSH
48419: LD_VAR 0 1
48423: PPUSH
48424: CALL_OW 310
48428: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48429: LD_VAR 0 1
48433: PPUSH
48434: LD_STRING \
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: PUSH
48464: LD_STRING E
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_VAR 0 3
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PPUSH
48500: CALL_OW 447
// end ;
48504: LD_VAR 0 2
48508: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48509: LD_INT 0
48511: PPUSH
48512: PPUSH
48513: PPUSH
// tmp := [ ] ;
48514: LD_ADDR_VAR 0 5
48518: PUSH
48519: EMPTY
48520: ST_TO_ADDR
// for i in units do
48521: LD_ADDR_VAR 0 4
48525: PUSH
48526: LD_VAR 0 1
48530: PUSH
48531: FOR_IN
48532: IFFALSE 48570
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48534: LD_ADDR_VAR 0 5
48538: PUSH
48539: LD_VAR 0 5
48543: PPUSH
48544: LD_VAR 0 5
48548: PUSH
48549: LD_INT 1
48551: PLUS
48552: PPUSH
48553: LD_VAR 0 4
48557: PPUSH
48558: CALL_OW 256
48562: PPUSH
48563: CALL_OW 2
48567: ST_TO_ADDR
48568: GO 48531
48570: POP
48571: POP
// if not tmp then
48572: LD_VAR 0 5
48576: NOT
48577: IFFALSE 48581
// exit ;
48579: GO 48629
// if asc then
48581: LD_VAR 0 2
48585: IFFALSE 48609
// result := SortListByListAsc ( units , tmp ) else
48587: LD_ADDR_VAR 0 3
48591: PUSH
48592: LD_VAR 0 1
48596: PPUSH
48597: LD_VAR 0 5
48601: PPUSH
48602: CALL_OW 76
48606: ST_TO_ADDR
48607: GO 48629
// result := SortListByListDesc ( units , tmp ) ;
48609: LD_ADDR_VAR 0 3
48613: PUSH
48614: LD_VAR 0 1
48618: PPUSH
48619: LD_VAR 0 5
48623: PPUSH
48624: CALL_OW 77
48628: ST_TO_ADDR
// end ;
48629: LD_VAR 0 3
48633: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48634: LD_INT 0
48636: PPUSH
48637: PPUSH
// task := GetTaskList ( mech ) ;
48638: LD_ADDR_VAR 0 4
48642: PUSH
48643: LD_VAR 0 1
48647: PPUSH
48648: CALL_OW 437
48652: ST_TO_ADDR
// if not task then
48653: LD_VAR 0 4
48657: NOT
48658: IFFALSE 48662
// exit ;
48660: GO 48704
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48662: LD_ADDR_VAR 0 3
48666: PUSH
48667: LD_VAR 0 4
48671: PUSH
48672: LD_INT 1
48674: ARRAY
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: PUSH
48680: LD_STRING r
48682: EQUAL
48683: PUSH
48684: LD_VAR 0 4
48688: PUSH
48689: LD_INT 1
48691: ARRAY
48692: PUSH
48693: LD_INT 4
48695: ARRAY
48696: PUSH
48697: LD_VAR 0 2
48701: EQUAL
48702: AND
48703: ST_TO_ADDR
// end ;
48704: LD_VAR 0 3
48708: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48709: LD_INT 0
48711: PPUSH
// SetDir ( unit , d ) ;
48712: LD_VAR 0 1
48716: PPUSH
48717: LD_VAR 0 4
48721: PPUSH
48722: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48726: LD_VAR 0 1
48730: PPUSH
48731: LD_VAR 0 2
48735: PPUSH
48736: LD_VAR 0 3
48740: PPUSH
48741: LD_VAR 0 5
48745: PPUSH
48746: CALL_OW 48
// end ;
48750: LD_VAR 0 6
48754: RET
// export function ToNaturalNumber ( number ) ; begin
48755: LD_INT 0
48757: PPUSH
// result := number div 1 ;
48758: LD_ADDR_VAR 0 2
48762: PUSH
48763: LD_VAR 0 1
48767: PUSH
48768: LD_INT 1
48770: DIV
48771: ST_TO_ADDR
// if number < 0 then
48772: LD_VAR 0 1
48776: PUSH
48777: LD_INT 0
48779: LESS
48780: IFFALSE 48790
// result := 0 ;
48782: LD_ADDR_VAR 0 2
48786: PUSH
48787: LD_INT 0
48789: ST_TO_ADDR
// end ;
48790: LD_VAR 0 2
48794: RET
// export function SortByClass ( units , class ) ; var un ; begin
48795: LD_INT 0
48797: PPUSH
48798: PPUSH
// if not units or not class then
48799: LD_VAR 0 1
48803: NOT
48804: PUSH
48805: LD_VAR 0 2
48809: NOT
48810: OR
48811: IFFALSE 48815
// exit ;
48813: GO 48910
// result := [ ] ;
48815: LD_ADDR_VAR 0 3
48819: PUSH
48820: EMPTY
48821: ST_TO_ADDR
// for un in units do
48822: LD_ADDR_VAR 0 4
48826: PUSH
48827: LD_VAR 0 1
48831: PUSH
48832: FOR_IN
48833: IFFALSE 48908
// if GetClass ( un ) = class then
48835: LD_VAR 0 4
48839: PPUSH
48840: CALL_OW 257
48844: PUSH
48845: LD_VAR 0 2
48849: EQUAL
48850: IFFALSE 48877
// result := Insert ( result , 1 , un ) else
48852: LD_ADDR_VAR 0 3
48856: PUSH
48857: LD_VAR 0 3
48861: PPUSH
48862: LD_INT 1
48864: PPUSH
48865: LD_VAR 0 4
48869: PPUSH
48870: CALL_OW 2
48874: ST_TO_ADDR
48875: GO 48906
// result := Replace ( result , result + 1 , un ) ;
48877: LD_ADDR_VAR 0 3
48881: PUSH
48882: LD_VAR 0 3
48886: PPUSH
48887: LD_VAR 0 3
48891: PUSH
48892: LD_INT 1
48894: PLUS
48895: PPUSH
48896: LD_VAR 0 4
48900: PPUSH
48901: CALL_OW 1
48905: ST_TO_ADDR
48906: GO 48832
48908: POP
48909: POP
// end ;
48910: LD_VAR 0 3
48914: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48915: LD_INT 0
48917: PPUSH
48918: PPUSH
48919: PPUSH
48920: PPUSH
48921: PPUSH
48922: PPUSH
48923: PPUSH
// result := [ ] ;
48924: LD_ADDR_VAR 0 4
48928: PUSH
48929: EMPTY
48930: ST_TO_ADDR
// if x - r < 0 then
48931: LD_VAR 0 1
48935: PUSH
48936: LD_VAR 0 3
48940: MINUS
48941: PUSH
48942: LD_INT 0
48944: LESS
48945: IFFALSE 48957
// min_x := 0 else
48947: LD_ADDR_VAR 0 8
48951: PUSH
48952: LD_INT 0
48954: ST_TO_ADDR
48955: GO 48973
// min_x := x - r ;
48957: LD_ADDR_VAR 0 8
48961: PUSH
48962: LD_VAR 0 1
48966: PUSH
48967: LD_VAR 0 3
48971: MINUS
48972: ST_TO_ADDR
// if y - r < 0 then
48973: LD_VAR 0 2
48977: PUSH
48978: LD_VAR 0 3
48982: MINUS
48983: PUSH
48984: LD_INT 0
48986: LESS
48987: IFFALSE 48999
// min_y := 0 else
48989: LD_ADDR_VAR 0 7
48993: PUSH
48994: LD_INT 0
48996: ST_TO_ADDR
48997: GO 49015
// min_y := y - r ;
48999: LD_ADDR_VAR 0 7
49003: PUSH
49004: LD_VAR 0 2
49008: PUSH
49009: LD_VAR 0 3
49013: MINUS
49014: ST_TO_ADDR
// max_x := x + r ;
49015: LD_ADDR_VAR 0 9
49019: PUSH
49020: LD_VAR 0 1
49024: PUSH
49025: LD_VAR 0 3
49029: PLUS
49030: ST_TO_ADDR
// max_y := y + r ;
49031: LD_ADDR_VAR 0 10
49035: PUSH
49036: LD_VAR 0 2
49040: PUSH
49041: LD_VAR 0 3
49045: PLUS
49046: ST_TO_ADDR
// for _x = min_x to max_x do
49047: LD_ADDR_VAR 0 5
49051: PUSH
49052: DOUBLE
49053: LD_VAR 0 8
49057: DEC
49058: ST_TO_ADDR
49059: LD_VAR 0 9
49063: PUSH
49064: FOR_TO
49065: IFFALSE 49166
// for _y = min_y to max_y do
49067: LD_ADDR_VAR 0 6
49071: PUSH
49072: DOUBLE
49073: LD_VAR 0 7
49077: DEC
49078: ST_TO_ADDR
49079: LD_VAR 0 10
49083: PUSH
49084: FOR_TO
49085: IFFALSE 49162
// begin if not ValidHex ( _x , _y ) then
49087: LD_VAR 0 5
49091: PPUSH
49092: LD_VAR 0 6
49096: PPUSH
49097: CALL_OW 488
49101: NOT
49102: IFFALSE 49106
// continue ;
49104: GO 49084
// if GetResourceTypeXY ( _x , _y ) then
49106: LD_VAR 0 5
49110: PPUSH
49111: LD_VAR 0 6
49115: PPUSH
49116: CALL_OW 283
49120: IFFALSE 49160
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49122: LD_ADDR_VAR 0 4
49126: PUSH
49127: LD_VAR 0 4
49131: PPUSH
49132: LD_VAR 0 4
49136: PUSH
49137: LD_INT 1
49139: PLUS
49140: PPUSH
49141: LD_VAR 0 5
49145: PUSH
49146: LD_VAR 0 6
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PPUSH
49155: CALL_OW 1
49159: ST_TO_ADDR
// end ;
49160: GO 49084
49162: POP
49163: POP
49164: GO 49064
49166: POP
49167: POP
// end ;
49168: LD_VAR 0 4
49172: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49173: LD_INT 0
49175: PPUSH
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
// if not units then
49183: LD_VAR 0 1
49187: NOT
49188: IFFALSE 49192
// exit ;
49190: GO 49720
// result := UnitFilter ( units , [ f_ok ] ) ;
49192: LD_ADDR_VAR 0 3
49196: PUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: LD_INT 50
49204: PUSH
49205: EMPTY
49206: LIST
49207: PPUSH
49208: CALL_OW 72
49212: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49213: LD_ADDR_VAR 0 8
49217: PUSH
49218: LD_VAR 0 1
49222: PUSH
49223: LD_INT 1
49225: ARRAY
49226: PPUSH
49227: CALL_OW 255
49231: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49232: LD_ADDR_VAR 0 10
49236: PUSH
49237: LD_INT 29
49239: PUSH
49240: LD_INT 91
49242: PUSH
49243: LD_INT 49
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
// if not result then
49251: LD_VAR 0 3
49255: NOT
49256: IFFALSE 49260
// exit ;
49258: GO 49720
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49260: LD_ADDR_VAR 0 5
49264: PUSH
49265: LD_INT 81
49267: PUSH
49268: LD_VAR 0 8
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PPUSH
49277: CALL_OW 69
49281: ST_TO_ADDR
// for i in result do
49282: LD_ADDR_VAR 0 4
49286: PUSH
49287: LD_VAR 0 3
49291: PUSH
49292: FOR_IN
49293: IFFALSE 49718
// begin tag := GetTag ( i ) + 1 ;
49295: LD_ADDR_VAR 0 9
49299: PUSH
49300: LD_VAR 0 4
49304: PPUSH
49305: CALL_OW 110
49309: PUSH
49310: LD_INT 1
49312: PLUS
49313: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49314: LD_ADDR_VAR 0 7
49318: PUSH
49319: LD_VAR 0 4
49323: PPUSH
49324: CALL_OW 250
49328: PPUSH
49329: LD_VAR 0 4
49333: PPUSH
49334: CALL_OW 251
49338: PPUSH
49339: LD_INT 4
49341: PPUSH
49342: CALL 48915 0 3
49346: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49347: LD_VAR 0 4
49351: PPUSH
49352: CALL_OW 247
49356: PUSH
49357: LD_INT 2
49359: EQUAL
49360: PUSH
49361: LD_VAR 0 7
49365: PUSH
49366: LD_INT 2
49368: GREATER
49369: AND
49370: PUSH
49371: LD_VAR 0 4
49375: PPUSH
49376: CALL_OW 264
49380: PUSH
49381: LD_VAR 0 10
49385: IN
49386: NOT
49387: AND
49388: IFFALSE 49427
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49390: LD_VAR 0 4
49394: PPUSH
49395: LD_VAR 0 7
49399: PUSH
49400: LD_INT 1
49402: ARRAY
49403: PUSH
49404: LD_INT 1
49406: ARRAY
49407: PPUSH
49408: LD_VAR 0 7
49412: PUSH
49413: LD_INT 1
49415: ARRAY
49416: PUSH
49417: LD_INT 2
49419: ARRAY
49420: PPUSH
49421: CALL_OW 116
49425: GO 49716
// if path > tag then
49427: LD_VAR 0 2
49431: PUSH
49432: LD_VAR 0 9
49436: GREATER
49437: IFFALSE 49645
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49439: LD_ADDR_VAR 0 6
49443: PUSH
49444: LD_VAR 0 5
49448: PPUSH
49449: LD_INT 91
49451: PUSH
49452: LD_VAR 0 4
49456: PUSH
49457: LD_INT 8
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: PPUSH
49465: CALL_OW 72
49469: ST_TO_ADDR
// if nearEnemy then
49470: LD_VAR 0 6
49474: IFFALSE 49543
// begin if GetWeapon ( i ) = ru_time_lapser then
49476: LD_VAR 0 4
49480: PPUSH
49481: CALL_OW 264
49485: PUSH
49486: LD_INT 49
49488: EQUAL
49489: IFFALSE 49517
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49491: LD_VAR 0 4
49495: PPUSH
49496: LD_VAR 0 6
49500: PPUSH
49501: LD_VAR 0 4
49505: PPUSH
49506: CALL_OW 74
49510: PPUSH
49511: CALL_OW 112
49515: GO 49541
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49517: LD_VAR 0 4
49521: PPUSH
49522: LD_VAR 0 6
49526: PPUSH
49527: LD_VAR 0 4
49531: PPUSH
49532: CALL_OW 74
49536: PPUSH
49537: CALL 50791 0 2
// end else
49541: GO 49643
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49543: LD_VAR 0 4
49547: PPUSH
49548: LD_VAR 0 2
49552: PUSH
49553: LD_VAR 0 9
49557: ARRAY
49558: PUSH
49559: LD_INT 1
49561: ARRAY
49562: PPUSH
49563: LD_VAR 0 2
49567: PUSH
49568: LD_VAR 0 9
49572: ARRAY
49573: PUSH
49574: LD_INT 2
49576: ARRAY
49577: PPUSH
49578: CALL_OW 297
49582: PUSH
49583: LD_INT 6
49585: GREATER
49586: IFFALSE 49629
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49588: LD_VAR 0 4
49592: PPUSH
49593: LD_VAR 0 2
49597: PUSH
49598: LD_VAR 0 9
49602: ARRAY
49603: PUSH
49604: LD_INT 1
49606: ARRAY
49607: PPUSH
49608: LD_VAR 0 2
49612: PUSH
49613: LD_VAR 0 9
49617: ARRAY
49618: PUSH
49619: LD_INT 2
49621: ARRAY
49622: PPUSH
49623: CALL_OW 114
49627: GO 49643
// SetTag ( i , tag ) ;
49629: LD_VAR 0 4
49633: PPUSH
49634: LD_VAR 0 9
49638: PPUSH
49639: CALL_OW 109
// end else
49643: GO 49716
// if enemy then
49645: LD_VAR 0 5
49649: IFFALSE 49716
// begin if GetWeapon ( i ) = ru_time_lapser then
49651: LD_VAR 0 4
49655: PPUSH
49656: CALL_OW 264
49660: PUSH
49661: LD_INT 49
49663: EQUAL
49664: IFFALSE 49692
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49666: LD_VAR 0 4
49670: PPUSH
49671: LD_VAR 0 5
49675: PPUSH
49676: LD_VAR 0 4
49680: PPUSH
49681: CALL_OW 74
49685: PPUSH
49686: CALL_OW 112
49690: GO 49716
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49692: LD_VAR 0 4
49696: PPUSH
49697: LD_VAR 0 5
49701: PPUSH
49702: LD_VAR 0 4
49706: PPUSH
49707: CALL_OW 74
49711: PPUSH
49712: CALL 50791 0 2
// end ; end ;
49716: GO 49292
49718: POP
49719: POP
// end ;
49720: LD_VAR 0 3
49724: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49725: LD_INT 0
49727: PPUSH
49728: PPUSH
49729: PPUSH
// if not unit or IsInUnit ( unit ) then
49730: LD_VAR 0 1
49734: NOT
49735: PUSH
49736: LD_VAR 0 1
49740: PPUSH
49741: CALL_OW 310
49745: OR
49746: IFFALSE 49750
// exit ;
49748: GO 49841
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49750: LD_ADDR_VAR 0 4
49754: PUSH
49755: LD_VAR 0 1
49759: PPUSH
49760: CALL_OW 250
49764: PPUSH
49765: LD_VAR 0 2
49769: PPUSH
49770: LD_INT 1
49772: PPUSH
49773: CALL_OW 272
49777: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49778: LD_ADDR_VAR 0 5
49782: PUSH
49783: LD_VAR 0 1
49787: PPUSH
49788: CALL_OW 251
49792: PPUSH
49793: LD_VAR 0 2
49797: PPUSH
49798: LD_INT 1
49800: PPUSH
49801: CALL_OW 273
49805: ST_TO_ADDR
// if ValidHex ( x , y ) then
49806: LD_VAR 0 4
49810: PPUSH
49811: LD_VAR 0 5
49815: PPUSH
49816: CALL_OW 488
49820: IFFALSE 49841
// ComTurnXY ( unit , x , y ) ;
49822: LD_VAR 0 1
49826: PPUSH
49827: LD_VAR 0 4
49831: PPUSH
49832: LD_VAR 0 5
49836: PPUSH
49837: CALL_OW 118
// end ;
49841: LD_VAR 0 3
49845: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49846: LD_INT 0
49848: PPUSH
49849: PPUSH
// result := false ;
49850: LD_ADDR_VAR 0 3
49854: PUSH
49855: LD_INT 0
49857: ST_TO_ADDR
// if not units then
49858: LD_VAR 0 2
49862: NOT
49863: IFFALSE 49867
// exit ;
49865: GO 49912
// for i in units do
49867: LD_ADDR_VAR 0 4
49871: PUSH
49872: LD_VAR 0 2
49876: PUSH
49877: FOR_IN
49878: IFFALSE 49910
// if See ( side , i ) then
49880: LD_VAR 0 1
49884: PPUSH
49885: LD_VAR 0 4
49889: PPUSH
49890: CALL_OW 292
49894: IFFALSE 49908
// begin result := true ;
49896: LD_ADDR_VAR 0 3
49900: PUSH
49901: LD_INT 1
49903: ST_TO_ADDR
// exit ;
49904: POP
49905: POP
49906: GO 49912
// end ;
49908: GO 49877
49910: POP
49911: POP
// end ;
49912: LD_VAR 0 3
49916: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49917: LD_INT 0
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
// if not unit or not points then
49923: LD_VAR 0 1
49927: NOT
49928: PUSH
49929: LD_VAR 0 2
49933: NOT
49934: OR
49935: IFFALSE 49939
// exit ;
49937: GO 50029
// dist := 99999 ;
49939: LD_ADDR_VAR 0 5
49943: PUSH
49944: LD_INT 99999
49946: ST_TO_ADDR
// for i in points do
49947: LD_ADDR_VAR 0 4
49951: PUSH
49952: LD_VAR 0 2
49956: PUSH
49957: FOR_IN
49958: IFFALSE 50027
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49960: LD_ADDR_VAR 0 6
49964: PUSH
49965: LD_VAR 0 1
49969: PPUSH
49970: LD_VAR 0 4
49974: PUSH
49975: LD_INT 1
49977: ARRAY
49978: PPUSH
49979: LD_VAR 0 4
49983: PUSH
49984: LD_INT 2
49986: ARRAY
49987: PPUSH
49988: CALL_OW 297
49992: ST_TO_ADDR
// if tmpDist < dist then
49993: LD_VAR 0 6
49997: PUSH
49998: LD_VAR 0 5
50002: LESS
50003: IFFALSE 50025
// begin result := i ;
50005: LD_ADDR_VAR 0 3
50009: PUSH
50010: LD_VAR 0 4
50014: ST_TO_ADDR
// dist := tmpDist ;
50015: LD_ADDR_VAR 0 5
50019: PUSH
50020: LD_VAR 0 6
50024: ST_TO_ADDR
// end ; end ;
50025: GO 49957
50027: POP
50028: POP
// end ;
50029: LD_VAR 0 3
50033: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50034: LD_INT 0
50036: PPUSH
// uc_side := side ;
50037: LD_ADDR_OWVAR 20
50041: PUSH
50042: LD_VAR 0 1
50046: ST_TO_ADDR
// uc_nation := 3 ;
50047: LD_ADDR_OWVAR 21
50051: PUSH
50052: LD_INT 3
50054: ST_TO_ADDR
// vc_chassis := 25 ;
50055: LD_ADDR_OWVAR 37
50059: PUSH
50060: LD_INT 25
50062: ST_TO_ADDR
// vc_engine := engine_siberite ;
50063: LD_ADDR_OWVAR 39
50067: PUSH
50068: LD_INT 3
50070: ST_TO_ADDR
// vc_control := control_computer ;
50071: LD_ADDR_OWVAR 38
50075: PUSH
50076: LD_INT 3
50078: ST_TO_ADDR
// vc_weapon := 59 ;
50079: LD_ADDR_OWVAR 40
50083: PUSH
50084: LD_INT 59
50086: ST_TO_ADDR
// result := CreateVehicle ;
50087: LD_ADDR_VAR 0 5
50091: PUSH
50092: CALL_OW 45
50096: ST_TO_ADDR
// SetDir ( result , d ) ;
50097: LD_VAR 0 5
50101: PPUSH
50102: LD_VAR 0 4
50106: PPUSH
50107: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50111: LD_VAR 0 5
50115: PPUSH
50116: LD_VAR 0 2
50120: PPUSH
50121: LD_VAR 0 3
50125: PPUSH
50126: LD_INT 0
50128: PPUSH
50129: CALL_OW 48
// end ;
50133: LD_VAR 0 5
50137: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50138: LD_INT 0
50140: PPUSH
50141: PPUSH
50142: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50143: LD_ADDR_VAR 0 2
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50166: LD_VAR 0 1
50170: NOT
50171: PUSH
50172: LD_VAR 0 1
50176: PPUSH
50177: CALL_OW 264
50181: PUSH
50182: LD_INT 12
50184: PUSH
50185: LD_INT 51
50187: PUSH
50188: LD_INT 32
50190: PUSH
50191: LD_INT 89
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: IN
50200: NOT
50201: OR
50202: IFFALSE 50206
// exit ;
50204: GO 50304
// for i := 1 to 3 do
50206: LD_ADDR_VAR 0 3
50210: PUSH
50211: DOUBLE
50212: LD_INT 1
50214: DEC
50215: ST_TO_ADDR
50216: LD_INT 3
50218: PUSH
50219: FOR_TO
50220: IFFALSE 50302
// begin tmp := GetCargo ( cargo , i ) ;
50222: LD_ADDR_VAR 0 4
50226: PUSH
50227: LD_VAR 0 1
50231: PPUSH
50232: LD_VAR 0 3
50236: PPUSH
50237: CALL_OW 289
50241: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50242: LD_ADDR_VAR 0 2
50246: PUSH
50247: LD_VAR 0 2
50251: PPUSH
50252: LD_VAR 0 3
50256: PPUSH
50257: LD_VAR 0 4
50261: PPUSH
50262: CALL_OW 1
50266: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50267: LD_ADDR_VAR 0 2
50271: PUSH
50272: LD_VAR 0 2
50276: PPUSH
50277: LD_INT 4
50279: PPUSH
50280: LD_VAR 0 2
50284: PUSH
50285: LD_INT 4
50287: ARRAY
50288: PUSH
50289: LD_VAR 0 4
50293: PLUS
50294: PPUSH
50295: CALL_OW 1
50299: ST_TO_ADDR
// end ;
50300: GO 50219
50302: POP
50303: POP
// end ;
50304: LD_VAR 0 2
50308: RET
// export function Length ( array ) ; begin
50309: LD_INT 0
50311: PPUSH
// result := array + 0 ;
50312: LD_ADDR_VAR 0 2
50316: PUSH
50317: LD_VAR 0 1
50321: PUSH
50322: LD_INT 0
50324: PLUS
50325: ST_TO_ADDR
// end ;
50326: LD_VAR 0 2
50330: RET
// export function PrepareArray ( array ) ; begin
50331: LD_INT 0
50333: PPUSH
// result := array diff 0 ;
50334: LD_ADDR_VAR 0 2
50338: PUSH
50339: LD_VAR 0 1
50343: PUSH
50344: LD_INT 0
50346: DIFF
50347: ST_TO_ADDR
// if not result [ 1 ] then
50348: LD_VAR 0 2
50352: PUSH
50353: LD_INT 1
50355: ARRAY
50356: NOT
50357: IFFALSE 50377
// result := Delete ( result , 1 ) ;
50359: LD_ADDR_VAR 0 2
50363: PUSH
50364: LD_VAR 0 2
50368: PPUSH
50369: LD_INT 1
50371: PPUSH
50372: CALL_OW 3
50376: ST_TO_ADDR
// end ;
50377: LD_VAR 0 2
50381: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50382: LD_INT 0
50384: PPUSH
50385: PPUSH
50386: PPUSH
50387: PPUSH
// sibRocketRange := 25 ;
50388: LD_ADDR_VAR 0 6
50392: PUSH
50393: LD_INT 25
50395: ST_TO_ADDR
// result := false ;
50396: LD_ADDR_VAR 0 4
50400: PUSH
50401: LD_INT 0
50403: ST_TO_ADDR
// for i := 0 to 5 do
50404: LD_ADDR_VAR 0 5
50408: PUSH
50409: DOUBLE
50410: LD_INT 0
50412: DEC
50413: ST_TO_ADDR
50414: LD_INT 5
50416: PUSH
50417: FOR_TO
50418: IFFALSE 50485
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50420: LD_VAR 0 1
50424: PPUSH
50425: LD_VAR 0 5
50429: PPUSH
50430: LD_VAR 0 6
50434: PPUSH
50435: CALL_OW 272
50439: PPUSH
50440: LD_VAR 0 2
50444: PPUSH
50445: LD_VAR 0 5
50449: PPUSH
50450: LD_VAR 0 6
50454: PPUSH
50455: CALL_OW 273
50459: PPUSH
50460: LD_VAR 0 3
50464: PPUSH
50465: CALL_OW 309
50469: IFFALSE 50483
// begin result := true ;
50471: LD_ADDR_VAR 0 4
50475: PUSH
50476: LD_INT 1
50478: ST_TO_ADDR
// exit ;
50479: POP
50480: POP
50481: GO 50487
// end ;
50483: GO 50417
50485: POP
50486: POP
// end ;
50487: LD_VAR 0 4
50491: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50492: LD_INT 0
50494: PPUSH
50495: PPUSH
50496: PPUSH
// if btype = b_depot then
50497: LD_VAR 0 2
50501: PUSH
50502: LD_INT 0
50504: EQUAL
50505: IFFALSE 50517
// begin result := true ;
50507: LD_ADDR_VAR 0 3
50511: PUSH
50512: LD_INT 1
50514: ST_TO_ADDR
// exit ;
50515: GO 50633
// end ; pom := GetBase ( depot ) ;
50517: LD_ADDR_VAR 0 4
50521: PUSH
50522: LD_VAR 0 1
50526: PPUSH
50527: CALL_OW 274
50531: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50532: LD_ADDR_VAR 0 5
50536: PUSH
50537: LD_VAR 0 2
50541: PPUSH
50542: LD_VAR 0 1
50546: PPUSH
50547: CALL_OW 248
50551: PPUSH
50552: CALL_OW 450
50556: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50557: LD_ADDR_VAR 0 3
50561: PUSH
50562: LD_VAR 0 4
50566: PPUSH
50567: LD_INT 1
50569: PPUSH
50570: CALL_OW 275
50574: PUSH
50575: LD_VAR 0 5
50579: PUSH
50580: LD_INT 1
50582: ARRAY
50583: GREATEREQUAL
50584: PUSH
50585: LD_VAR 0 4
50589: PPUSH
50590: LD_INT 2
50592: PPUSH
50593: CALL_OW 275
50597: PUSH
50598: LD_VAR 0 5
50602: PUSH
50603: LD_INT 2
50605: ARRAY
50606: GREATEREQUAL
50607: AND
50608: PUSH
50609: LD_VAR 0 4
50613: PPUSH
50614: LD_INT 3
50616: PPUSH
50617: CALL_OW 275
50621: PUSH
50622: LD_VAR 0 5
50626: PUSH
50627: LD_INT 3
50629: ARRAY
50630: GREATEREQUAL
50631: AND
50632: ST_TO_ADDR
// end ;
50633: LD_VAR 0 3
50637: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50638: LD_INT 0
50640: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50641: LD_VAR 0 1
50645: PPUSH
50646: LD_VAR 0 2
50650: PPUSH
50651: LD_INT 0
50653: PPUSH
50654: LD_INT 0
50656: PPUSH
50657: LD_INT 1
50659: PPUSH
50660: LD_INT 0
50662: PPUSH
50663: CALL_OW 587
// end ;
50667: LD_VAR 0 3
50671: RET
// export function CenterOnNow ( unit ) ; begin
50672: LD_INT 0
50674: PPUSH
// result := IsInUnit ( unit ) ;
50675: LD_ADDR_VAR 0 2
50679: PUSH
50680: LD_VAR 0 1
50684: PPUSH
50685: CALL_OW 310
50689: ST_TO_ADDR
// if not result then
50690: LD_VAR 0 2
50694: NOT
50695: IFFALSE 50707
// result := unit ;
50697: LD_ADDR_VAR 0 2
50701: PUSH
50702: LD_VAR 0 1
50706: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50707: LD_VAR 0 1
50711: PPUSH
50712: CALL_OW 87
// end ;
50716: LD_VAR 0 2
50720: RET
// export function ComMoveHex ( unit , hex ) ; begin
50721: LD_INT 0
50723: PPUSH
// if not hex then
50724: LD_VAR 0 2
50728: NOT
50729: IFFALSE 50733
// exit ;
50731: GO 50786
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50733: LD_VAR 0 2
50737: PUSH
50738: LD_INT 1
50740: ARRAY
50741: PPUSH
50742: LD_VAR 0 2
50746: PUSH
50747: LD_INT 2
50749: ARRAY
50750: PPUSH
50751: CALL_OW 428
50755: IFFALSE 50759
// exit ;
50757: GO 50786
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
50759: LD_VAR 0 1
50763: PPUSH
50764: LD_VAR 0 2
50768: PUSH
50769: LD_INT 1
50771: ARRAY
50772: PPUSH
50773: LD_VAR 0 2
50777: PUSH
50778: LD_INT 2
50780: ARRAY
50781: PPUSH
50782: CALL_OW 111
// end ;
50786: LD_VAR 0 3
50790: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50791: LD_INT 0
50793: PPUSH
50794: PPUSH
50795: PPUSH
// if not unit or not enemy then
50796: LD_VAR 0 1
50800: NOT
50801: PUSH
50802: LD_VAR 0 2
50806: NOT
50807: OR
50808: IFFALSE 50812
// exit ;
50810: GO 50936
// x := GetX ( enemy ) ;
50812: LD_ADDR_VAR 0 4
50816: PUSH
50817: LD_VAR 0 2
50821: PPUSH
50822: CALL_OW 250
50826: ST_TO_ADDR
// y := GetY ( enemy ) ;
50827: LD_ADDR_VAR 0 5
50831: PUSH
50832: LD_VAR 0 2
50836: PPUSH
50837: CALL_OW 251
50841: ST_TO_ADDR
// if ValidHex ( x , y ) then
50842: LD_VAR 0 4
50846: PPUSH
50847: LD_VAR 0 5
50851: PPUSH
50852: CALL_OW 488
50856: IFFALSE 50936
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
50858: LD_VAR 0 2
50862: PPUSH
50863: CALL_OW 247
50867: PUSH
50868: LD_INT 3
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: IN
50878: PUSH
50879: LD_VAR 0 1
50883: PPUSH
50884: CALL_OW 255
50888: PPUSH
50889: LD_VAR 0 2
50893: PPUSH
50894: CALL_OW 292
50898: OR
50899: IFFALSE 50917
// ComAttackUnit ( unit , enemy ) else
50901: LD_VAR 0 1
50905: PPUSH
50906: LD_VAR 0 2
50910: PPUSH
50911: CALL_OW 115
50915: GO 50936
// ComAgressiveMove ( unit , x , y ) ;
50917: LD_VAR 0 1
50921: PPUSH
50922: LD_VAR 0 4
50926: PPUSH
50927: LD_VAR 0 5
50931: PPUSH
50932: CALL_OW 114
// end ;
50936: LD_VAR 0 3
50940: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
50941: LD_INT 0
50943: PPUSH
50944: PPUSH
50945: PPUSH
// list := AreaToList ( area , 0 ) ;
50946: LD_ADDR_VAR 0 5
50950: PUSH
50951: LD_VAR 0 1
50955: PPUSH
50956: LD_INT 0
50958: PPUSH
50959: CALL_OW 517
50963: ST_TO_ADDR
// if not list then
50964: LD_VAR 0 5
50968: NOT
50969: IFFALSE 50973
// exit ;
50971: GO 51103
// if all then
50973: LD_VAR 0 2
50977: IFFALSE 51065
// begin for i := 1 to list [ 1 ] do
50979: LD_ADDR_VAR 0 4
50983: PUSH
50984: DOUBLE
50985: LD_INT 1
50987: DEC
50988: ST_TO_ADDR
50989: LD_VAR 0 5
50993: PUSH
50994: LD_INT 1
50996: ARRAY
50997: PUSH
50998: FOR_TO
50999: IFFALSE 51061
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51001: LD_ADDR_VAR 0 3
51005: PUSH
51006: LD_VAR 0 3
51010: PPUSH
51011: LD_VAR 0 3
51015: PUSH
51016: LD_INT 1
51018: PLUS
51019: PPUSH
51020: LD_VAR 0 5
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PUSH
51029: LD_VAR 0 4
51033: ARRAY
51034: PUSH
51035: LD_VAR 0 5
51039: PUSH
51040: LD_INT 2
51042: ARRAY
51043: PUSH
51044: LD_VAR 0 4
51048: ARRAY
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PPUSH
51054: CALL_OW 1
51058: ST_TO_ADDR
51059: GO 50998
51061: POP
51062: POP
// exit ;
51063: GO 51103
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51065: LD_ADDR_VAR 0 3
51069: PUSH
51070: LD_VAR 0 5
51074: PUSH
51075: LD_INT 1
51077: ARRAY
51078: PUSH
51079: LD_INT 1
51081: ARRAY
51082: PUSH
51083: LD_VAR 0 5
51087: PUSH
51088: LD_INT 2
51090: ARRAY
51091: PUSH
51092: LD_INT 1
51094: ARRAY
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: ST_TO_ADDR
// end ;
51103: LD_VAR 0 3
51107: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51108: LD_INT 0
51110: PPUSH
51111: PPUSH
// list := AreaToList ( area , 0 ) ;
51112: LD_ADDR_VAR 0 4
51116: PUSH
51117: LD_VAR 0 1
51121: PPUSH
51122: LD_INT 0
51124: PPUSH
51125: CALL_OW 517
51129: ST_TO_ADDR
// if not list then
51130: LD_VAR 0 4
51134: NOT
51135: IFFALSE 51139
// exit ;
51137: GO 51180
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51139: LD_ADDR_VAR 0 3
51143: PUSH
51144: LD_VAR 0 4
51148: PUSH
51149: LD_INT 1
51151: ARRAY
51152: PUSH
51153: LD_INT 1
51155: ARRAY
51156: PUSH
51157: LD_VAR 0 4
51161: PUSH
51162: LD_INT 2
51164: ARRAY
51165: PUSH
51166: LD_INT 1
51168: ARRAY
51169: PUSH
51170: LD_VAR 0 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: ST_TO_ADDR
// end ;
51180: LD_VAR 0 3
51184: RET
// export function First ( array ) ; begin
51185: LD_INT 0
51187: PPUSH
// if not array then
51188: LD_VAR 0 1
51192: NOT
51193: IFFALSE 51197
// exit ;
51195: GO 51211
// result := array [ 1 ] ;
51197: LD_ADDR_VAR 0 2
51201: PUSH
51202: LD_VAR 0 1
51206: PUSH
51207: LD_INT 1
51209: ARRAY
51210: ST_TO_ADDR
// end ;
51211: LD_VAR 0 2
51215: RET
// export function Last ( array ) ; begin
51216: LD_INT 0
51218: PPUSH
// if not array then
51219: LD_VAR 0 1
51223: NOT
51224: IFFALSE 51228
// exit ;
51226: GO 51244
// result := array [ array ] ;
51228: LD_ADDR_VAR 0 2
51232: PUSH
51233: LD_VAR 0 1
51237: PUSH
51238: LD_VAR 0 1
51242: ARRAY
51243: ST_TO_ADDR
// end ;
51244: LD_VAR 0 2
51248: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51249: LD_INT 0
51251: PPUSH
51252: PPUSH
// result := [ ] ;
51253: LD_ADDR_VAR 0 5
51257: PUSH
51258: EMPTY
51259: ST_TO_ADDR
// if not array then
51260: LD_VAR 0 1
51264: NOT
51265: IFFALSE 51269
// exit ;
51267: GO 51381
// for i := 1 to array do
51269: LD_ADDR_VAR 0 6
51273: PUSH
51274: DOUBLE
51275: LD_INT 1
51277: DEC
51278: ST_TO_ADDR
51279: LD_VAR 0 1
51283: PUSH
51284: FOR_TO
51285: IFFALSE 51379
// if array [ i ] [ index ] = value then
51287: LD_VAR 0 1
51291: PUSH
51292: LD_VAR 0 6
51296: ARRAY
51297: PUSH
51298: LD_VAR 0 2
51302: ARRAY
51303: PUSH
51304: LD_VAR 0 3
51308: EQUAL
51309: IFFALSE 51377
// begin if indexColumn then
51311: LD_VAR 0 4
51315: IFFALSE 51351
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51317: LD_ADDR_VAR 0 5
51321: PUSH
51322: LD_VAR 0 5
51326: PPUSH
51327: LD_VAR 0 1
51331: PUSH
51332: LD_VAR 0 6
51336: ARRAY
51337: PUSH
51338: LD_VAR 0 4
51342: ARRAY
51343: PPUSH
51344: CALL 46569 0 2
51348: ST_TO_ADDR
51349: GO 51377
// result := Join ( result , array [ i ] ) ;
51351: LD_ADDR_VAR 0 5
51355: PUSH
51356: LD_VAR 0 5
51360: PPUSH
51361: LD_VAR 0 1
51365: PUSH
51366: LD_VAR 0 6
51370: ARRAY
51371: PPUSH
51372: CALL 46569 0 2
51376: ST_TO_ADDR
// end ;
51377: GO 51284
51379: POP
51380: POP
// end ;
51381: LD_VAR 0 5
51385: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51386: LD_INT 0
51388: PPUSH
// if not vehicles or not parkingPoint then
51389: LD_VAR 0 1
51393: NOT
51394: PUSH
51395: LD_VAR 0 2
51399: NOT
51400: OR
51401: IFFALSE 51405
// exit ;
51403: GO 51503
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51405: LD_ADDR_VAR 0 1
51409: PUSH
51410: LD_VAR 0 1
51414: PPUSH
51415: LD_INT 50
51417: PUSH
51418: EMPTY
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 92
51426: PUSH
51427: LD_VAR 0 2
51431: PUSH
51432: LD_INT 1
51434: ARRAY
51435: PUSH
51436: LD_VAR 0 2
51440: PUSH
51441: LD_INT 2
51443: ARRAY
51444: PUSH
51445: LD_INT 8
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PPUSH
51462: CALL_OW 72
51466: ST_TO_ADDR
// if not vehicles then
51467: LD_VAR 0 1
51471: NOT
51472: IFFALSE 51476
// exit ;
51474: GO 51503
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51476: LD_VAR 0 1
51480: PPUSH
51481: LD_VAR 0 2
51485: PUSH
51486: LD_INT 1
51488: ARRAY
51489: PPUSH
51490: LD_VAR 0 2
51494: PUSH
51495: LD_INT 2
51497: ARRAY
51498: PPUSH
51499: CALL_OW 111
// end ;
51503: LD_VAR 0 3
51507: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51508: LD_INT 0
51510: PPUSH
51511: PPUSH
51512: PPUSH
// if not side or not area then
51513: LD_VAR 0 1
51517: NOT
51518: PUSH
51519: LD_VAR 0 2
51523: NOT
51524: OR
51525: IFFALSE 51529
// exit ;
51527: GO 51648
// tmp := AreaToList ( area , 0 ) ;
51529: LD_ADDR_VAR 0 5
51533: PUSH
51534: LD_VAR 0 2
51538: PPUSH
51539: LD_INT 0
51541: PPUSH
51542: CALL_OW 517
51546: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51547: LD_ADDR_VAR 0 4
51551: PUSH
51552: DOUBLE
51553: LD_INT 1
51555: DEC
51556: ST_TO_ADDR
51557: LD_VAR 0 5
51561: PUSH
51562: LD_INT 1
51564: ARRAY
51565: PUSH
51566: FOR_TO
51567: IFFALSE 51646
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51569: LD_VAR 0 5
51573: PUSH
51574: LD_INT 1
51576: ARRAY
51577: PUSH
51578: LD_VAR 0 4
51582: ARRAY
51583: PPUSH
51584: LD_VAR 0 5
51588: PUSH
51589: LD_INT 2
51591: ARRAY
51592: PUSH
51593: LD_VAR 0 4
51597: ARRAY
51598: PPUSH
51599: CALL_OW 351
51603: IFFALSE 51644
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51605: LD_VAR 0 5
51609: PUSH
51610: LD_INT 1
51612: ARRAY
51613: PUSH
51614: LD_VAR 0 4
51618: ARRAY
51619: PPUSH
51620: LD_VAR 0 5
51624: PUSH
51625: LD_INT 2
51627: ARRAY
51628: PUSH
51629: LD_VAR 0 4
51633: ARRAY
51634: PPUSH
51635: LD_VAR 0 1
51639: PPUSH
51640: CALL_OW 244
// end ;
51644: GO 51566
51646: POP
51647: POP
// end ; end_of_file
51648: LD_VAR 0 3
51652: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
51653: LD_VAR 0 1
51657: PPUSH
51658: LD_VAR 0 2
51662: PPUSH
51663: LD_VAR 0 3
51667: PPUSH
51668: LD_VAR 0 4
51672: PPUSH
51673: LD_VAR 0 5
51677: PPUSH
51678: LD_VAR 0 6
51682: PPUSH
51683: CALL 51884 0 6
// end ;
51687: PPOPN 6
51689: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
51690: LD_INT 0
51692: PPUSH
// begin if not units then
51693: LD_VAR 0 1
51697: NOT
51698: IFFALSE 51702
// exit ;
51700: GO 51702
// end ;
51702: PPOPN 7
51704: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
51705: CALL 51771 0 0
// end ; end_of_file
51709: PPOPN 1
51711: END
// export globalGameSaveCounter ; every 0 0$1 do
51712: GO 51714
51714: DISABLE
// begin enable ;
51715: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51716: LD_STRING updateTimer(
51718: PUSH
51719: LD_OWVAR 1
51723: STR
51724: PUSH
51725: LD_STRING );
51727: STR
51728: PPUSH
51729: CALL_OW 559
// end ;
51733: END
// every 0 0$1 do
51734: GO 51736
51736: DISABLE
// begin globalGameSaveCounter := 0 ;
51737: LD_ADDR_EXP 43
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51745: LD_STRING setGameSaveCounter(0)
51747: PPUSH
51748: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51752: LD_STRING initStreamRollete();
51754: PPUSH
51755: CALL_OW 559
// InitStreamMode ;
51759: CALL 53102 0 0
// DefineStreamItems ( false ) ;
51763: LD_INT 0
51765: PPUSH
51766: CALL 53566 0 1
// end ;
51770: END
// export function SOS_MapStart ( ) ; begin
51771: LD_INT 0
51773: PPUSH
// if streamModeActive then
51774: LD_EXP 44
51778: IFFALSE 51787
// DefineStreamItems ( true ) ;
51780: LD_INT 1
51782: PPUSH
51783: CALL 53566 0 1
// UpdateLuaVariables ( ) ;
51787: CALL 51804 0 0
// UpdateFactoryWaypoints ( ) ;
51791: CALL 66435 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51795: CALL 66692 0 0
// end ;
51799: LD_VAR 0 1
51803: RET
// function UpdateLuaVariables ( ) ; begin
51804: LD_INT 0
51806: PPUSH
// if globalGameSaveCounter then
51807: LD_EXP 43
51811: IFFALSE 51845
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51813: LD_ADDR_EXP 43
51817: PUSH
51818: LD_EXP 43
51822: PPUSH
51823: CALL 47930 0 1
51827: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51828: LD_STRING setGameSaveCounter(
51830: PUSH
51831: LD_EXP 43
51835: STR
51836: PUSH
51837: LD_STRING )
51839: STR
51840: PPUSH
51841: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51845: LD_STRING setGameDifficulty(
51847: PUSH
51848: LD_OWVAR 67
51852: STR
51853: PUSH
51854: LD_STRING )
51856: STR
51857: PPUSH
51858: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
51862: LD_STRING displayDifficulty(
51864: PUSH
51865: LD_OWVAR 67
51869: STR
51870: PUSH
51871: LD_STRING )
51873: STR
51874: PPUSH
51875: CALL_OW 559
// end ;
51879: LD_VAR 0 1
51883: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51884: LD_INT 0
51886: PPUSH
// if p2 = stream_mode then
51887: LD_VAR 0 2
51891: PUSH
51892: LD_INT 100
51894: EQUAL
51895: IFFALSE 52898
// begin if not StreamModeActive then
51897: LD_EXP 44
51901: NOT
51902: IFFALSE 51912
// StreamModeActive := true ;
51904: LD_ADDR_EXP 44
51908: PUSH
51909: LD_INT 1
51911: ST_TO_ADDR
// if p3 = 0 then
51912: LD_VAR 0 3
51916: PUSH
51917: LD_INT 0
51919: EQUAL
51920: IFFALSE 51926
// InitStreamMode ;
51922: CALL 53102 0 0
// if p3 = 1 then
51926: LD_VAR 0 3
51930: PUSH
51931: LD_INT 1
51933: EQUAL
51934: IFFALSE 51944
// sRocket := true ;
51936: LD_ADDR_EXP 49
51940: PUSH
51941: LD_INT 1
51943: ST_TO_ADDR
// if p3 = 2 then
51944: LD_VAR 0 3
51948: PUSH
51949: LD_INT 2
51951: EQUAL
51952: IFFALSE 51962
// sSpeed := true ;
51954: LD_ADDR_EXP 48
51958: PUSH
51959: LD_INT 1
51961: ST_TO_ADDR
// if p3 = 3 then
51962: LD_VAR 0 3
51966: PUSH
51967: LD_INT 3
51969: EQUAL
51970: IFFALSE 51980
// sEngine := true ;
51972: LD_ADDR_EXP 50
51976: PUSH
51977: LD_INT 1
51979: ST_TO_ADDR
// if p3 = 4 then
51980: LD_VAR 0 3
51984: PUSH
51985: LD_INT 4
51987: EQUAL
51988: IFFALSE 51998
// sSpec := true ;
51990: LD_ADDR_EXP 47
51994: PUSH
51995: LD_INT 1
51997: ST_TO_ADDR
// if p3 = 5 then
51998: LD_VAR 0 3
52002: PUSH
52003: LD_INT 5
52005: EQUAL
52006: IFFALSE 52016
// sLevel := true ;
52008: LD_ADDR_EXP 51
52012: PUSH
52013: LD_INT 1
52015: ST_TO_ADDR
// if p3 = 6 then
52016: LD_VAR 0 3
52020: PUSH
52021: LD_INT 6
52023: EQUAL
52024: IFFALSE 52034
// sArmoury := true ;
52026: LD_ADDR_EXP 52
52030: PUSH
52031: LD_INT 1
52033: ST_TO_ADDR
// if p3 = 7 then
52034: LD_VAR 0 3
52038: PUSH
52039: LD_INT 7
52041: EQUAL
52042: IFFALSE 52052
// sRadar := true ;
52044: LD_ADDR_EXP 53
52048: PUSH
52049: LD_INT 1
52051: ST_TO_ADDR
// if p3 = 8 then
52052: LD_VAR 0 3
52056: PUSH
52057: LD_INT 8
52059: EQUAL
52060: IFFALSE 52070
// sBunker := true ;
52062: LD_ADDR_EXP 54
52066: PUSH
52067: LD_INT 1
52069: ST_TO_ADDR
// if p3 = 9 then
52070: LD_VAR 0 3
52074: PUSH
52075: LD_INT 9
52077: EQUAL
52078: IFFALSE 52088
// sHack := true ;
52080: LD_ADDR_EXP 55
52084: PUSH
52085: LD_INT 1
52087: ST_TO_ADDR
// if p3 = 10 then
52088: LD_VAR 0 3
52092: PUSH
52093: LD_INT 10
52095: EQUAL
52096: IFFALSE 52106
// sFire := true ;
52098: LD_ADDR_EXP 56
52102: PUSH
52103: LD_INT 1
52105: ST_TO_ADDR
// if p3 = 11 then
52106: LD_VAR 0 3
52110: PUSH
52111: LD_INT 11
52113: EQUAL
52114: IFFALSE 52124
// sRefresh := true ;
52116: LD_ADDR_EXP 57
52120: PUSH
52121: LD_INT 1
52123: ST_TO_ADDR
// if p3 = 12 then
52124: LD_VAR 0 3
52128: PUSH
52129: LD_INT 12
52131: EQUAL
52132: IFFALSE 52142
// sExp := true ;
52134: LD_ADDR_EXP 58
52138: PUSH
52139: LD_INT 1
52141: ST_TO_ADDR
// if p3 = 13 then
52142: LD_VAR 0 3
52146: PUSH
52147: LD_INT 13
52149: EQUAL
52150: IFFALSE 52160
// sDepot := true ;
52152: LD_ADDR_EXP 59
52156: PUSH
52157: LD_INT 1
52159: ST_TO_ADDR
// if p3 = 14 then
52160: LD_VAR 0 3
52164: PUSH
52165: LD_INT 14
52167: EQUAL
52168: IFFALSE 52178
// sFlag := true ;
52170: LD_ADDR_EXP 60
52174: PUSH
52175: LD_INT 1
52177: ST_TO_ADDR
// if p3 = 15 then
52178: LD_VAR 0 3
52182: PUSH
52183: LD_INT 15
52185: EQUAL
52186: IFFALSE 52196
// sKamikadze := true ;
52188: LD_ADDR_EXP 68
52192: PUSH
52193: LD_INT 1
52195: ST_TO_ADDR
// if p3 = 16 then
52196: LD_VAR 0 3
52200: PUSH
52201: LD_INT 16
52203: EQUAL
52204: IFFALSE 52214
// sTroll := true ;
52206: LD_ADDR_EXP 69
52210: PUSH
52211: LD_INT 1
52213: ST_TO_ADDR
// if p3 = 17 then
52214: LD_VAR 0 3
52218: PUSH
52219: LD_INT 17
52221: EQUAL
52222: IFFALSE 52232
// sSlow := true ;
52224: LD_ADDR_EXP 70
52228: PUSH
52229: LD_INT 1
52231: ST_TO_ADDR
// if p3 = 18 then
52232: LD_VAR 0 3
52236: PUSH
52237: LD_INT 18
52239: EQUAL
52240: IFFALSE 52250
// sLack := true ;
52242: LD_ADDR_EXP 71
52246: PUSH
52247: LD_INT 1
52249: ST_TO_ADDR
// if p3 = 19 then
52250: LD_VAR 0 3
52254: PUSH
52255: LD_INT 19
52257: EQUAL
52258: IFFALSE 52268
// sTank := true ;
52260: LD_ADDR_EXP 73
52264: PUSH
52265: LD_INT 1
52267: ST_TO_ADDR
// if p3 = 20 then
52268: LD_VAR 0 3
52272: PUSH
52273: LD_INT 20
52275: EQUAL
52276: IFFALSE 52286
// sRemote := true ;
52278: LD_ADDR_EXP 74
52282: PUSH
52283: LD_INT 1
52285: ST_TO_ADDR
// if p3 = 21 then
52286: LD_VAR 0 3
52290: PUSH
52291: LD_INT 21
52293: EQUAL
52294: IFFALSE 52304
// sPowell := true ;
52296: LD_ADDR_EXP 75
52300: PUSH
52301: LD_INT 1
52303: ST_TO_ADDR
// if p3 = 22 then
52304: LD_VAR 0 3
52308: PUSH
52309: LD_INT 22
52311: EQUAL
52312: IFFALSE 52322
// sTeleport := true ;
52314: LD_ADDR_EXP 78
52318: PUSH
52319: LD_INT 1
52321: ST_TO_ADDR
// if p3 = 23 then
52322: LD_VAR 0 3
52326: PUSH
52327: LD_INT 23
52329: EQUAL
52330: IFFALSE 52340
// sOilTower := true ;
52332: LD_ADDR_EXP 80
52336: PUSH
52337: LD_INT 1
52339: ST_TO_ADDR
// if p3 = 24 then
52340: LD_VAR 0 3
52344: PUSH
52345: LD_INT 24
52347: EQUAL
52348: IFFALSE 52358
// sShovel := true ;
52350: LD_ADDR_EXP 81
52354: PUSH
52355: LD_INT 1
52357: ST_TO_ADDR
// if p3 = 25 then
52358: LD_VAR 0 3
52362: PUSH
52363: LD_INT 25
52365: EQUAL
52366: IFFALSE 52376
// sSheik := true ;
52368: LD_ADDR_EXP 82
52372: PUSH
52373: LD_INT 1
52375: ST_TO_ADDR
// if p3 = 26 then
52376: LD_VAR 0 3
52380: PUSH
52381: LD_INT 26
52383: EQUAL
52384: IFFALSE 52394
// sEarthquake := true ;
52386: LD_ADDR_EXP 84
52390: PUSH
52391: LD_INT 1
52393: ST_TO_ADDR
// if p3 = 27 then
52394: LD_VAR 0 3
52398: PUSH
52399: LD_INT 27
52401: EQUAL
52402: IFFALSE 52412
// sAI := true ;
52404: LD_ADDR_EXP 85
52408: PUSH
52409: LD_INT 1
52411: ST_TO_ADDR
// if p3 = 28 then
52412: LD_VAR 0 3
52416: PUSH
52417: LD_INT 28
52419: EQUAL
52420: IFFALSE 52430
// sCargo := true ;
52422: LD_ADDR_EXP 88
52426: PUSH
52427: LD_INT 1
52429: ST_TO_ADDR
// if p3 = 29 then
52430: LD_VAR 0 3
52434: PUSH
52435: LD_INT 29
52437: EQUAL
52438: IFFALSE 52448
// sDLaser := true ;
52440: LD_ADDR_EXP 89
52444: PUSH
52445: LD_INT 1
52447: ST_TO_ADDR
// if p3 = 30 then
52448: LD_VAR 0 3
52452: PUSH
52453: LD_INT 30
52455: EQUAL
52456: IFFALSE 52466
// sExchange := true ;
52458: LD_ADDR_EXP 90
52462: PUSH
52463: LD_INT 1
52465: ST_TO_ADDR
// if p3 = 31 then
52466: LD_VAR 0 3
52470: PUSH
52471: LD_INT 31
52473: EQUAL
52474: IFFALSE 52484
// sFac := true ;
52476: LD_ADDR_EXP 91
52480: PUSH
52481: LD_INT 1
52483: ST_TO_ADDR
// if p3 = 32 then
52484: LD_VAR 0 3
52488: PUSH
52489: LD_INT 32
52491: EQUAL
52492: IFFALSE 52502
// sPower := true ;
52494: LD_ADDR_EXP 92
52498: PUSH
52499: LD_INT 1
52501: ST_TO_ADDR
// if p3 = 33 then
52502: LD_VAR 0 3
52506: PUSH
52507: LD_INT 33
52509: EQUAL
52510: IFFALSE 52520
// sRandom := true ;
52512: LD_ADDR_EXP 93
52516: PUSH
52517: LD_INT 1
52519: ST_TO_ADDR
// if p3 = 34 then
52520: LD_VAR 0 3
52524: PUSH
52525: LD_INT 34
52527: EQUAL
52528: IFFALSE 52538
// sShield := true ;
52530: LD_ADDR_EXP 94
52534: PUSH
52535: LD_INT 1
52537: ST_TO_ADDR
// if p3 = 35 then
52538: LD_VAR 0 3
52542: PUSH
52543: LD_INT 35
52545: EQUAL
52546: IFFALSE 52556
// sTime := true ;
52548: LD_ADDR_EXP 95
52552: PUSH
52553: LD_INT 1
52555: ST_TO_ADDR
// if p3 = 36 then
52556: LD_VAR 0 3
52560: PUSH
52561: LD_INT 36
52563: EQUAL
52564: IFFALSE 52574
// sTools := true ;
52566: LD_ADDR_EXP 96
52570: PUSH
52571: LD_INT 1
52573: ST_TO_ADDR
// if p3 = 101 then
52574: LD_VAR 0 3
52578: PUSH
52579: LD_INT 101
52581: EQUAL
52582: IFFALSE 52592
// sSold := true ;
52584: LD_ADDR_EXP 61
52588: PUSH
52589: LD_INT 1
52591: ST_TO_ADDR
// if p3 = 102 then
52592: LD_VAR 0 3
52596: PUSH
52597: LD_INT 102
52599: EQUAL
52600: IFFALSE 52610
// sDiff := true ;
52602: LD_ADDR_EXP 62
52606: PUSH
52607: LD_INT 1
52609: ST_TO_ADDR
// if p3 = 103 then
52610: LD_VAR 0 3
52614: PUSH
52615: LD_INT 103
52617: EQUAL
52618: IFFALSE 52628
// sFog := true ;
52620: LD_ADDR_EXP 65
52624: PUSH
52625: LD_INT 1
52627: ST_TO_ADDR
// if p3 = 104 then
52628: LD_VAR 0 3
52632: PUSH
52633: LD_INT 104
52635: EQUAL
52636: IFFALSE 52646
// sReset := true ;
52638: LD_ADDR_EXP 66
52642: PUSH
52643: LD_INT 1
52645: ST_TO_ADDR
// if p3 = 105 then
52646: LD_VAR 0 3
52650: PUSH
52651: LD_INT 105
52653: EQUAL
52654: IFFALSE 52664
// sSun := true ;
52656: LD_ADDR_EXP 67
52660: PUSH
52661: LD_INT 1
52663: ST_TO_ADDR
// if p3 = 106 then
52664: LD_VAR 0 3
52668: PUSH
52669: LD_INT 106
52671: EQUAL
52672: IFFALSE 52682
// sTiger := true ;
52674: LD_ADDR_EXP 63
52678: PUSH
52679: LD_INT 1
52681: ST_TO_ADDR
// if p3 = 107 then
52682: LD_VAR 0 3
52686: PUSH
52687: LD_INT 107
52689: EQUAL
52690: IFFALSE 52700
// sBomb := true ;
52692: LD_ADDR_EXP 64
52696: PUSH
52697: LD_INT 1
52699: ST_TO_ADDR
// if p3 = 108 then
52700: LD_VAR 0 3
52704: PUSH
52705: LD_INT 108
52707: EQUAL
52708: IFFALSE 52718
// sWound := true ;
52710: LD_ADDR_EXP 72
52714: PUSH
52715: LD_INT 1
52717: ST_TO_ADDR
// if p3 = 109 then
52718: LD_VAR 0 3
52722: PUSH
52723: LD_INT 109
52725: EQUAL
52726: IFFALSE 52736
// sBetray := true ;
52728: LD_ADDR_EXP 76
52732: PUSH
52733: LD_INT 1
52735: ST_TO_ADDR
// if p3 = 110 then
52736: LD_VAR 0 3
52740: PUSH
52741: LD_INT 110
52743: EQUAL
52744: IFFALSE 52754
// sContamin := true ;
52746: LD_ADDR_EXP 77
52750: PUSH
52751: LD_INT 1
52753: ST_TO_ADDR
// if p3 = 111 then
52754: LD_VAR 0 3
52758: PUSH
52759: LD_INT 111
52761: EQUAL
52762: IFFALSE 52772
// sOil := true ;
52764: LD_ADDR_EXP 79
52768: PUSH
52769: LD_INT 1
52771: ST_TO_ADDR
// if p3 = 112 then
52772: LD_VAR 0 3
52776: PUSH
52777: LD_INT 112
52779: EQUAL
52780: IFFALSE 52790
// sStu := true ;
52782: LD_ADDR_EXP 83
52786: PUSH
52787: LD_INT 1
52789: ST_TO_ADDR
// if p3 = 113 then
52790: LD_VAR 0 3
52794: PUSH
52795: LD_INT 113
52797: EQUAL
52798: IFFALSE 52808
// sBazooka := true ;
52800: LD_ADDR_EXP 86
52804: PUSH
52805: LD_INT 1
52807: ST_TO_ADDR
// if p3 = 114 then
52808: LD_VAR 0 3
52812: PUSH
52813: LD_INT 114
52815: EQUAL
52816: IFFALSE 52826
// sMortar := true ;
52818: LD_ADDR_EXP 87
52822: PUSH
52823: LD_INT 1
52825: ST_TO_ADDR
// if p3 = 115 then
52826: LD_VAR 0 3
52830: PUSH
52831: LD_INT 115
52833: EQUAL
52834: IFFALSE 52844
// sRanger := true ;
52836: LD_ADDR_EXP 97
52840: PUSH
52841: LD_INT 1
52843: ST_TO_ADDR
// if p3 = 116 then
52844: LD_VAR 0 3
52848: PUSH
52849: LD_INT 116
52851: EQUAL
52852: IFFALSE 52862
// sComputer := true ;
52854: LD_ADDR_EXP 98
52858: PUSH
52859: LD_INT 1
52861: ST_TO_ADDR
// if p3 = 117 then
52862: LD_VAR 0 3
52866: PUSH
52867: LD_INT 117
52869: EQUAL
52870: IFFALSE 52880
// s30 := true ;
52872: LD_ADDR_EXP 99
52876: PUSH
52877: LD_INT 1
52879: ST_TO_ADDR
// if p3 = 118 then
52880: LD_VAR 0 3
52884: PUSH
52885: LD_INT 118
52887: EQUAL
52888: IFFALSE 52898
// s60 := true ;
52890: LD_ADDR_EXP 100
52894: PUSH
52895: LD_INT 1
52897: ST_TO_ADDR
// end ; if p2 = hack_mode then
52898: LD_VAR 0 2
52902: PUSH
52903: LD_INT 101
52905: EQUAL
52906: IFFALSE 53034
// begin case p3 of 1 :
52908: LD_VAR 0 3
52912: PUSH
52913: LD_INT 1
52915: DOUBLE
52916: EQUAL
52917: IFTRUE 52921
52919: GO 52928
52921: POP
// hHackUnlimitedResources ; 2 :
52922: CALL 65181 0 0
52926: GO 53034
52928: LD_INT 2
52930: DOUBLE
52931: EQUAL
52932: IFTRUE 52936
52934: GO 52943
52936: POP
// hHackSetLevel10 ; 3 :
52937: CALL 65314 0 0
52941: GO 53034
52943: LD_INT 3
52945: DOUBLE
52946: EQUAL
52947: IFTRUE 52951
52949: GO 52958
52951: POP
// hHackSetLevel10YourUnits ; 4 :
52952: CALL 65399 0 0
52956: GO 53034
52958: LD_INT 4
52960: DOUBLE
52961: EQUAL
52962: IFTRUE 52966
52964: GO 52973
52966: POP
// hHackInvincible ; 5 :
52967: CALL 65847 0 0
52971: GO 53034
52973: LD_INT 5
52975: DOUBLE
52976: EQUAL
52977: IFTRUE 52981
52979: GO 52988
52981: POP
// hHackInvisible ; 6 :
52982: CALL 65958 0 0
52986: GO 53034
52988: LD_INT 6
52990: DOUBLE
52991: EQUAL
52992: IFTRUE 52996
52994: GO 53003
52996: POP
// hHackChangeYourSide ; 7 :
52997: CALL 66015 0 0
53001: GO 53034
53003: LD_INT 7
53005: DOUBLE
53006: EQUAL
53007: IFTRUE 53011
53009: GO 53018
53011: POP
// hHackChangeUnitSide ; 8 :
53012: CALL 66057 0 0
53016: GO 53034
53018: LD_INT 8
53020: DOUBLE
53021: EQUAL
53022: IFTRUE 53026
53024: GO 53033
53026: POP
// hHackFog ; end ;
53027: CALL 66158 0 0
53031: GO 53034
53033: POP
// end ; if p2 = game_save_mode then
53034: LD_VAR 0 2
53038: PUSH
53039: LD_INT 102
53041: EQUAL
53042: IFFALSE 53097
// begin if p3 = 1 then
53044: LD_VAR 0 3
53048: PUSH
53049: LD_INT 1
53051: EQUAL
53052: IFFALSE 53064
// globalGameSaveCounter := p4 ;
53054: LD_ADDR_EXP 43
53058: PUSH
53059: LD_VAR 0 4
53063: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
53064: LD_VAR 0 3
53068: PUSH
53069: LD_INT 2
53071: EQUAL
53072: PUSH
53073: LD_EXP 43
53077: AND
53078: IFFALSE 53097
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53080: LD_STRING setGameSaveCounter(
53082: PUSH
53083: LD_EXP 43
53087: STR
53088: PUSH
53089: LD_STRING )
53091: STR
53092: PPUSH
53093: CALL_OW 559
// end ; end ;
53097: LD_VAR 0 7
53101: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
53102: LD_INT 0
53104: PPUSH
// streamModeActive := false ;
53105: LD_ADDR_EXP 44
53109: PUSH
53110: LD_INT 0
53112: ST_TO_ADDR
// normalCounter := 36 ;
53113: LD_ADDR_EXP 45
53117: PUSH
53118: LD_INT 36
53120: ST_TO_ADDR
// hardcoreCounter := 18 ;
53121: LD_ADDR_EXP 46
53125: PUSH
53126: LD_INT 18
53128: ST_TO_ADDR
// sRocket := false ;
53129: LD_ADDR_EXP 49
53133: PUSH
53134: LD_INT 0
53136: ST_TO_ADDR
// sSpeed := false ;
53137: LD_ADDR_EXP 48
53141: PUSH
53142: LD_INT 0
53144: ST_TO_ADDR
// sEngine := false ;
53145: LD_ADDR_EXP 50
53149: PUSH
53150: LD_INT 0
53152: ST_TO_ADDR
// sSpec := false ;
53153: LD_ADDR_EXP 47
53157: PUSH
53158: LD_INT 0
53160: ST_TO_ADDR
// sLevel := false ;
53161: LD_ADDR_EXP 51
53165: PUSH
53166: LD_INT 0
53168: ST_TO_ADDR
// sArmoury := false ;
53169: LD_ADDR_EXP 52
53173: PUSH
53174: LD_INT 0
53176: ST_TO_ADDR
// sRadar := false ;
53177: LD_ADDR_EXP 53
53181: PUSH
53182: LD_INT 0
53184: ST_TO_ADDR
// sBunker := false ;
53185: LD_ADDR_EXP 54
53189: PUSH
53190: LD_INT 0
53192: ST_TO_ADDR
// sHack := false ;
53193: LD_ADDR_EXP 55
53197: PUSH
53198: LD_INT 0
53200: ST_TO_ADDR
// sFire := false ;
53201: LD_ADDR_EXP 56
53205: PUSH
53206: LD_INT 0
53208: ST_TO_ADDR
// sRefresh := false ;
53209: LD_ADDR_EXP 57
53213: PUSH
53214: LD_INT 0
53216: ST_TO_ADDR
// sExp := false ;
53217: LD_ADDR_EXP 58
53221: PUSH
53222: LD_INT 0
53224: ST_TO_ADDR
// sDepot := false ;
53225: LD_ADDR_EXP 59
53229: PUSH
53230: LD_INT 0
53232: ST_TO_ADDR
// sFlag := false ;
53233: LD_ADDR_EXP 60
53237: PUSH
53238: LD_INT 0
53240: ST_TO_ADDR
// sKamikadze := false ;
53241: LD_ADDR_EXP 68
53245: PUSH
53246: LD_INT 0
53248: ST_TO_ADDR
// sTroll := false ;
53249: LD_ADDR_EXP 69
53253: PUSH
53254: LD_INT 0
53256: ST_TO_ADDR
// sSlow := false ;
53257: LD_ADDR_EXP 70
53261: PUSH
53262: LD_INT 0
53264: ST_TO_ADDR
// sLack := false ;
53265: LD_ADDR_EXP 71
53269: PUSH
53270: LD_INT 0
53272: ST_TO_ADDR
// sTank := false ;
53273: LD_ADDR_EXP 73
53277: PUSH
53278: LD_INT 0
53280: ST_TO_ADDR
// sRemote := false ;
53281: LD_ADDR_EXP 74
53285: PUSH
53286: LD_INT 0
53288: ST_TO_ADDR
// sPowell := false ;
53289: LD_ADDR_EXP 75
53293: PUSH
53294: LD_INT 0
53296: ST_TO_ADDR
// sTeleport := false ;
53297: LD_ADDR_EXP 78
53301: PUSH
53302: LD_INT 0
53304: ST_TO_ADDR
// sOilTower := false ;
53305: LD_ADDR_EXP 80
53309: PUSH
53310: LD_INT 0
53312: ST_TO_ADDR
// sShovel := false ;
53313: LD_ADDR_EXP 81
53317: PUSH
53318: LD_INT 0
53320: ST_TO_ADDR
// sSheik := false ;
53321: LD_ADDR_EXP 82
53325: PUSH
53326: LD_INT 0
53328: ST_TO_ADDR
// sEarthquake := false ;
53329: LD_ADDR_EXP 84
53333: PUSH
53334: LD_INT 0
53336: ST_TO_ADDR
// sAI := false ;
53337: LD_ADDR_EXP 85
53341: PUSH
53342: LD_INT 0
53344: ST_TO_ADDR
// sCargo := false ;
53345: LD_ADDR_EXP 88
53349: PUSH
53350: LD_INT 0
53352: ST_TO_ADDR
// sDLaser := false ;
53353: LD_ADDR_EXP 89
53357: PUSH
53358: LD_INT 0
53360: ST_TO_ADDR
// sExchange := false ;
53361: LD_ADDR_EXP 90
53365: PUSH
53366: LD_INT 0
53368: ST_TO_ADDR
// sFac := false ;
53369: LD_ADDR_EXP 91
53373: PUSH
53374: LD_INT 0
53376: ST_TO_ADDR
// sPower := false ;
53377: LD_ADDR_EXP 92
53381: PUSH
53382: LD_INT 0
53384: ST_TO_ADDR
// sRandom := false ;
53385: LD_ADDR_EXP 93
53389: PUSH
53390: LD_INT 0
53392: ST_TO_ADDR
// sShield := false ;
53393: LD_ADDR_EXP 94
53397: PUSH
53398: LD_INT 0
53400: ST_TO_ADDR
// sTime := false ;
53401: LD_ADDR_EXP 95
53405: PUSH
53406: LD_INT 0
53408: ST_TO_ADDR
// sTools := false ;
53409: LD_ADDR_EXP 96
53413: PUSH
53414: LD_INT 0
53416: ST_TO_ADDR
// sSold := false ;
53417: LD_ADDR_EXP 61
53421: PUSH
53422: LD_INT 0
53424: ST_TO_ADDR
// sDiff := false ;
53425: LD_ADDR_EXP 62
53429: PUSH
53430: LD_INT 0
53432: ST_TO_ADDR
// sFog := false ;
53433: LD_ADDR_EXP 65
53437: PUSH
53438: LD_INT 0
53440: ST_TO_ADDR
// sReset := false ;
53441: LD_ADDR_EXP 66
53445: PUSH
53446: LD_INT 0
53448: ST_TO_ADDR
// sSun := false ;
53449: LD_ADDR_EXP 67
53453: PUSH
53454: LD_INT 0
53456: ST_TO_ADDR
// sTiger := false ;
53457: LD_ADDR_EXP 63
53461: PUSH
53462: LD_INT 0
53464: ST_TO_ADDR
// sBomb := false ;
53465: LD_ADDR_EXP 64
53469: PUSH
53470: LD_INT 0
53472: ST_TO_ADDR
// sWound := false ;
53473: LD_ADDR_EXP 72
53477: PUSH
53478: LD_INT 0
53480: ST_TO_ADDR
// sBetray := false ;
53481: LD_ADDR_EXP 76
53485: PUSH
53486: LD_INT 0
53488: ST_TO_ADDR
// sContamin := false ;
53489: LD_ADDR_EXP 77
53493: PUSH
53494: LD_INT 0
53496: ST_TO_ADDR
// sOil := false ;
53497: LD_ADDR_EXP 79
53501: PUSH
53502: LD_INT 0
53504: ST_TO_ADDR
// sStu := false ;
53505: LD_ADDR_EXP 83
53509: PUSH
53510: LD_INT 0
53512: ST_TO_ADDR
// sBazooka := false ;
53513: LD_ADDR_EXP 86
53517: PUSH
53518: LD_INT 0
53520: ST_TO_ADDR
// sMortar := false ;
53521: LD_ADDR_EXP 87
53525: PUSH
53526: LD_INT 0
53528: ST_TO_ADDR
// sRanger := false ;
53529: LD_ADDR_EXP 97
53533: PUSH
53534: LD_INT 0
53536: ST_TO_ADDR
// sComputer := false ;
53537: LD_ADDR_EXP 98
53541: PUSH
53542: LD_INT 0
53544: ST_TO_ADDR
// s30 := false ;
53545: LD_ADDR_EXP 99
53549: PUSH
53550: LD_INT 0
53552: ST_TO_ADDR
// s60 := false ;
53553: LD_ADDR_EXP 100
53557: PUSH
53558: LD_INT 0
53560: ST_TO_ADDR
// end ;
53561: LD_VAR 0 1
53565: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53566: LD_INT 0
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
// result := [ ] ;
53575: LD_ADDR_VAR 0 2
53579: PUSH
53580: EMPTY
53581: ST_TO_ADDR
// if campaign_id = 1 then
53582: LD_OWVAR 69
53586: PUSH
53587: LD_INT 1
53589: EQUAL
53590: IFFALSE 56756
// begin case mission_number of 1 :
53592: LD_OWVAR 70
53596: PUSH
53597: LD_INT 1
53599: DOUBLE
53600: EQUAL
53601: IFTRUE 53605
53603: GO 53681
53605: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53606: LD_ADDR_VAR 0 2
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 4
53616: PUSH
53617: LD_INT 11
53619: PUSH
53620: LD_INT 12
53622: PUSH
53623: LD_INT 15
53625: PUSH
53626: LD_INT 16
53628: PUSH
53629: LD_INT 22
53631: PUSH
53632: LD_INT 23
53634: PUSH
53635: LD_INT 26
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 101
53651: PUSH
53652: LD_INT 102
53654: PUSH
53655: LD_INT 106
53657: PUSH
53658: LD_INT 116
53660: PUSH
53661: LD_INT 117
53663: PUSH
53664: LD_INT 118
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: ST_TO_ADDR
53679: GO 56754
53681: LD_INT 2
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53689
53687: GO 53773
53689: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53690: LD_ADDR_VAR 0 2
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: LD_INT 11
53703: PUSH
53704: LD_INT 12
53706: PUSH
53707: LD_INT 15
53709: PUSH
53710: LD_INT 16
53712: PUSH
53713: LD_INT 22
53715: PUSH
53716: LD_INT 23
53718: PUSH
53719: LD_INT 26
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 101
53735: PUSH
53736: LD_INT 102
53738: PUSH
53739: LD_INT 105
53741: PUSH
53742: LD_INT 106
53744: PUSH
53745: LD_INT 108
53747: PUSH
53748: LD_INT 116
53750: PUSH
53751: LD_INT 117
53753: PUSH
53754: LD_INT 118
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: ST_TO_ADDR
53771: GO 56754
53773: LD_INT 3
53775: DOUBLE
53776: EQUAL
53777: IFTRUE 53781
53779: GO 53869
53781: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53782: LD_ADDR_VAR 0 2
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: LD_INT 4
53792: PUSH
53793: LD_INT 5
53795: PUSH
53796: LD_INT 11
53798: PUSH
53799: LD_INT 12
53801: PUSH
53802: LD_INT 15
53804: PUSH
53805: LD_INT 16
53807: PUSH
53808: LD_INT 22
53810: PUSH
53811: LD_INT 26
53813: PUSH
53814: LD_INT 36
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 101
53831: PUSH
53832: LD_INT 102
53834: PUSH
53835: LD_INT 105
53837: PUSH
53838: LD_INT 106
53840: PUSH
53841: LD_INT 108
53843: PUSH
53844: LD_INT 116
53846: PUSH
53847: LD_INT 117
53849: PUSH
53850: LD_INT 118
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: ST_TO_ADDR
53867: GO 56754
53869: LD_INT 4
53871: DOUBLE
53872: EQUAL
53873: IFTRUE 53877
53875: GO 53973
53877: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53878: LD_ADDR_VAR 0 2
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 4
53888: PUSH
53889: LD_INT 5
53891: PUSH
53892: LD_INT 8
53894: PUSH
53895: LD_INT 11
53897: PUSH
53898: LD_INT 12
53900: PUSH
53901: LD_INT 15
53903: PUSH
53904: LD_INT 16
53906: PUSH
53907: LD_INT 22
53909: PUSH
53910: LD_INT 23
53912: PUSH
53913: LD_INT 26
53915: PUSH
53916: LD_INT 36
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 101
53935: PUSH
53936: LD_INT 102
53938: PUSH
53939: LD_INT 105
53941: PUSH
53942: LD_INT 106
53944: PUSH
53945: LD_INT 108
53947: PUSH
53948: LD_INT 116
53950: PUSH
53951: LD_INT 117
53953: PUSH
53954: LD_INT 118
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: ST_TO_ADDR
53971: GO 56754
53973: LD_INT 5
53975: DOUBLE
53976: EQUAL
53977: IFTRUE 53981
53979: GO 54093
53981: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53982: LD_ADDR_VAR 0 2
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: LD_INT 6
53998: PUSH
53999: LD_INT 8
54001: PUSH
54002: LD_INT 11
54004: PUSH
54005: LD_INT 12
54007: PUSH
54008: LD_INT 15
54010: PUSH
54011: LD_INT 16
54013: PUSH
54014: LD_INT 22
54016: PUSH
54017: LD_INT 23
54019: PUSH
54020: LD_INT 25
54022: PUSH
54023: LD_INT 26
54025: PUSH
54026: LD_INT 36
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 101
54047: PUSH
54048: LD_INT 102
54050: PUSH
54051: LD_INT 105
54053: PUSH
54054: LD_INT 106
54056: PUSH
54057: LD_INT 108
54059: PUSH
54060: LD_INT 109
54062: PUSH
54063: LD_INT 112
54065: PUSH
54066: LD_INT 116
54068: PUSH
54069: LD_INT 117
54071: PUSH
54072: LD_INT 118
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: ST_TO_ADDR
54091: GO 56754
54093: LD_INT 6
54095: DOUBLE
54096: EQUAL
54097: IFTRUE 54101
54099: GO 54233
54101: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
54102: LD_ADDR_VAR 0 2
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 4
54112: PUSH
54113: LD_INT 5
54115: PUSH
54116: LD_INT 6
54118: PUSH
54119: LD_INT 8
54121: PUSH
54122: LD_INT 11
54124: PUSH
54125: LD_INT 12
54127: PUSH
54128: LD_INT 15
54130: PUSH
54131: LD_INT 16
54133: PUSH
54134: LD_INT 20
54136: PUSH
54137: LD_INT 21
54139: PUSH
54140: LD_INT 22
54142: PUSH
54143: LD_INT 23
54145: PUSH
54146: LD_INT 25
54148: PUSH
54149: LD_INT 26
54151: PUSH
54152: LD_INT 30
54154: PUSH
54155: LD_INT 31
54157: PUSH
54158: LD_INT 32
54160: PUSH
54161: LD_INT 36
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 101
54187: PUSH
54188: LD_INT 102
54190: PUSH
54191: LD_INT 105
54193: PUSH
54194: LD_INT 106
54196: PUSH
54197: LD_INT 108
54199: PUSH
54200: LD_INT 109
54202: PUSH
54203: LD_INT 112
54205: PUSH
54206: LD_INT 116
54208: PUSH
54209: LD_INT 117
54211: PUSH
54212: LD_INT 118
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: ST_TO_ADDR
54231: GO 56754
54233: LD_INT 7
54235: DOUBLE
54236: EQUAL
54237: IFTRUE 54241
54239: GO 54353
54241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54242: LD_ADDR_VAR 0 2
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 4
54252: PUSH
54253: LD_INT 5
54255: PUSH
54256: LD_INT 7
54258: PUSH
54259: LD_INT 11
54261: PUSH
54262: LD_INT 12
54264: PUSH
54265: LD_INT 15
54267: PUSH
54268: LD_INT 16
54270: PUSH
54271: LD_INT 20
54273: PUSH
54274: LD_INT 21
54276: PUSH
54277: LD_INT 22
54279: PUSH
54280: LD_INT 23
54282: PUSH
54283: LD_INT 25
54285: PUSH
54286: LD_INT 26
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 101
54307: PUSH
54308: LD_INT 102
54310: PUSH
54311: LD_INT 103
54313: PUSH
54314: LD_INT 105
54316: PUSH
54317: LD_INT 106
54319: PUSH
54320: LD_INT 108
54322: PUSH
54323: LD_INT 112
54325: PUSH
54326: LD_INT 116
54328: PUSH
54329: LD_INT 117
54331: PUSH
54332: LD_INT 118
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: ST_TO_ADDR
54351: GO 56754
54353: LD_INT 8
54355: DOUBLE
54356: EQUAL
54357: IFTRUE 54361
54359: GO 54501
54361: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54362: LD_ADDR_VAR 0 2
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 4
54372: PUSH
54373: LD_INT 5
54375: PUSH
54376: LD_INT 6
54378: PUSH
54379: LD_INT 7
54381: PUSH
54382: LD_INT 8
54384: PUSH
54385: LD_INT 11
54387: PUSH
54388: LD_INT 12
54390: PUSH
54391: LD_INT 15
54393: PUSH
54394: LD_INT 16
54396: PUSH
54397: LD_INT 20
54399: PUSH
54400: LD_INT 21
54402: PUSH
54403: LD_INT 22
54405: PUSH
54406: LD_INT 23
54408: PUSH
54409: LD_INT 25
54411: PUSH
54412: LD_INT 26
54414: PUSH
54415: LD_INT 30
54417: PUSH
54418: LD_INT 31
54420: PUSH
54421: LD_INT 32
54423: PUSH
54424: LD_INT 36
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 101
54451: PUSH
54452: LD_INT 102
54454: PUSH
54455: LD_INT 103
54457: PUSH
54458: LD_INT 105
54460: PUSH
54461: LD_INT 106
54463: PUSH
54464: LD_INT 108
54466: PUSH
54467: LD_INT 109
54469: PUSH
54470: LD_INT 112
54472: PUSH
54473: LD_INT 116
54475: PUSH
54476: LD_INT 117
54478: PUSH
54479: LD_INT 118
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: ST_TO_ADDR
54499: GO 56754
54501: LD_INT 9
54503: DOUBLE
54504: EQUAL
54505: IFTRUE 54509
54507: GO 54657
54509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54510: LD_ADDR_VAR 0 2
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: LD_INT 4
54520: PUSH
54521: LD_INT 5
54523: PUSH
54524: LD_INT 6
54526: PUSH
54527: LD_INT 7
54529: PUSH
54530: LD_INT 8
54532: PUSH
54533: LD_INT 11
54535: PUSH
54536: LD_INT 12
54538: PUSH
54539: LD_INT 15
54541: PUSH
54542: LD_INT 16
54544: PUSH
54545: LD_INT 20
54547: PUSH
54548: LD_INT 21
54550: PUSH
54551: LD_INT 22
54553: PUSH
54554: LD_INT 23
54556: PUSH
54557: LD_INT 25
54559: PUSH
54560: LD_INT 26
54562: PUSH
54563: LD_INT 28
54565: PUSH
54566: LD_INT 30
54568: PUSH
54569: LD_INT 31
54571: PUSH
54572: LD_INT 32
54574: PUSH
54575: LD_INT 36
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 101
54603: PUSH
54604: LD_INT 102
54606: PUSH
54607: LD_INT 103
54609: PUSH
54610: LD_INT 105
54612: PUSH
54613: LD_INT 106
54615: PUSH
54616: LD_INT 108
54618: PUSH
54619: LD_INT 109
54621: PUSH
54622: LD_INT 112
54624: PUSH
54625: LD_INT 114
54627: PUSH
54628: LD_INT 116
54630: PUSH
54631: LD_INT 117
54633: PUSH
54634: LD_INT 118
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: ST_TO_ADDR
54655: GO 56754
54657: LD_INT 10
54659: DOUBLE
54660: EQUAL
54661: IFTRUE 54665
54663: GO 54861
54665: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54666: LD_ADDR_VAR 0 2
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: LD_INT 5
54679: PUSH
54680: LD_INT 6
54682: PUSH
54683: LD_INT 7
54685: PUSH
54686: LD_INT 8
54688: PUSH
54689: LD_INT 9
54691: PUSH
54692: LD_INT 10
54694: PUSH
54695: LD_INT 11
54697: PUSH
54698: LD_INT 12
54700: PUSH
54701: LD_INT 13
54703: PUSH
54704: LD_INT 14
54706: PUSH
54707: LD_INT 15
54709: PUSH
54710: LD_INT 16
54712: PUSH
54713: LD_INT 17
54715: PUSH
54716: LD_INT 18
54718: PUSH
54719: LD_INT 19
54721: PUSH
54722: LD_INT 20
54724: PUSH
54725: LD_INT 21
54727: PUSH
54728: LD_INT 22
54730: PUSH
54731: LD_INT 23
54733: PUSH
54734: LD_INT 24
54736: PUSH
54737: LD_INT 25
54739: PUSH
54740: LD_INT 26
54742: PUSH
54743: LD_INT 28
54745: PUSH
54746: LD_INT 30
54748: PUSH
54749: LD_INT 31
54751: PUSH
54752: LD_INT 32
54754: PUSH
54755: LD_INT 36
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 101
54791: PUSH
54792: LD_INT 102
54794: PUSH
54795: LD_INT 103
54797: PUSH
54798: LD_INT 104
54800: PUSH
54801: LD_INT 105
54803: PUSH
54804: LD_INT 106
54806: PUSH
54807: LD_INT 107
54809: PUSH
54810: LD_INT 108
54812: PUSH
54813: LD_INT 109
54815: PUSH
54816: LD_INT 110
54818: PUSH
54819: LD_INT 111
54821: PUSH
54822: LD_INT 112
54824: PUSH
54825: LD_INT 114
54827: PUSH
54828: LD_INT 116
54830: PUSH
54831: LD_INT 117
54833: PUSH
54834: LD_INT 118
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: ST_TO_ADDR
54859: GO 56754
54861: LD_INT 11
54863: DOUBLE
54864: EQUAL
54865: IFTRUE 54869
54867: GO 55073
54869: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54870: LD_ADDR_VAR 0 2
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: LD_INT 4
54883: PUSH
54884: LD_INT 5
54886: PUSH
54887: LD_INT 6
54889: PUSH
54890: LD_INT 7
54892: PUSH
54893: LD_INT 8
54895: PUSH
54896: LD_INT 9
54898: PUSH
54899: LD_INT 10
54901: PUSH
54902: LD_INT 11
54904: PUSH
54905: LD_INT 12
54907: PUSH
54908: LD_INT 13
54910: PUSH
54911: LD_INT 14
54913: PUSH
54914: LD_INT 15
54916: PUSH
54917: LD_INT 16
54919: PUSH
54920: LD_INT 17
54922: PUSH
54923: LD_INT 18
54925: PUSH
54926: LD_INT 19
54928: PUSH
54929: LD_INT 20
54931: PUSH
54932: LD_INT 21
54934: PUSH
54935: LD_INT 22
54937: PUSH
54938: LD_INT 23
54940: PUSH
54941: LD_INT 24
54943: PUSH
54944: LD_INT 25
54946: PUSH
54947: LD_INT 26
54949: PUSH
54950: LD_INT 28
54952: PUSH
54953: LD_INT 30
54955: PUSH
54956: LD_INT 31
54958: PUSH
54959: LD_INT 32
54961: PUSH
54962: LD_INT 34
54964: PUSH
54965: LD_INT 36
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 101
55003: PUSH
55004: LD_INT 102
55006: PUSH
55007: LD_INT 103
55009: PUSH
55010: LD_INT 104
55012: PUSH
55013: LD_INT 105
55015: PUSH
55016: LD_INT 106
55018: PUSH
55019: LD_INT 107
55021: PUSH
55022: LD_INT 108
55024: PUSH
55025: LD_INT 109
55027: PUSH
55028: LD_INT 110
55030: PUSH
55031: LD_INT 111
55033: PUSH
55034: LD_INT 112
55036: PUSH
55037: LD_INT 114
55039: PUSH
55040: LD_INT 116
55042: PUSH
55043: LD_INT 117
55045: PUSH
55046: LD_INT 118
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: ST_TO_ADDR
55071: GO 56754
55073: LD_INT 12
55075: DOUBLE
55076: EQUAL
55077: IFTRUE 55081
55079: GO 55301
55081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
55082: LD_ADDR_VAR 0 2
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: LD_INT 5
55101: PUSH
55102: LD_INT 6
55104: PUSH
55105: LD_INT 7
55107: PUSH
55108: LD_INT 8
55110: PUSH
55111: LD_INT 9
55113: PUSH
55114: LD_INT 10
55116: PUSH
55117: LD_INT 11
55119: PUSH
55120: LD_INT 12
55122: PUSH
55123: LD_INT 13
55125: PUSH
55126: LD_INT 14
55128: PUSH
55129: LD_INT 15
55131: PUSH
55132: LD_INT 16
55134: PUSH
55135: LD_INT 17
55137: PUSH
55138: LD_INT 18
55140: PUSH
55141: LD_INT 19
55143: PUSH
55144: LD_INT 20
55146: PUSH
55147: LD_INT 21
55149: PUSH
55150: LD_INT 22
55152: PUSH
55153: LD_INT 23
55155: PUSH
55156: LD_INT 24
55158: PUSH
55159: LD_INT 25
55161: PUSH
55162: LD_INT 26
55164: PUSH
55165: LD_INT 27
55167: PUSH
55168: LD_INT 28
55170: PUSH
55171: LD_INT 30
55173: PUSH
55174: LD_INT 31
55176: PUSH
55177: LD_INT 32
55179: PUSH
55180: LD_INT 33
55182: PUSH
55183: LD_INT 34
55185: PUSH
55186: LD_INT 36
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 101
55227: PUSH
55228: LD_INT 102
55230: PUSH
55231: LD_INT 103
55233: PUSH
55234: LD_INT 104
55236: PUSH
55237: LD_INT 105
55239: PUSH
55240: LD_INT 106
55242: PUSH
55243: LD_INT 107
55245: PUSH
55246: LD_INT 108
55248: PUSH
55249: LD_INT 109
55251: PUSH
55252: LD_INT 110
55254: PUSH
55255: LD_INT 111
55257: PUSH
55258: LD_INT 112
55260: PUSH
55261: LD_INT 113
55263: PUSH
55264: LD_INT 114
55266: PUSH
55267: LD_INT 116
55269: PUSH
55270: LD_INT 117
55272: PUSH
55273: LD_INT 118
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: ST_TO_ADDR
55299: GO 56754
55301: LD_INT 13
55303: DOUBLE
55304: EQUAL
55305: IFTRUE 55309
55307: GO 55517
55309: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55310: LD_ADDR_VAR 0 2
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: LD_INT 5
55329: PUSH
55330: LD_INT 8
55332: PUSH
55333: LD_INT 9
55335: PUSH
55336: LD_INT 10
55338: PUSH
55339: LD_INT 11
55341: PUSH
55342: LD_INT 12
55344: PUSH
55345: LD_INT 14
55347: PUSH
55348: LD_INT 15
55350: PUSH
55351: LD_INT 16
55353: PUSH
55354: LD_INT 17
55356: PUSH
55357: LD_INT 18
55359: PUSH
55360: LD_INT 19
55362: PUSH
55363: LD_INT 20
55365: PUSH
55366: LD_INT 21
55368: PUSH
55369: LD_INT 22
55371: PUSH
55372: LD_INT 23
55374: PUSH
55375: LD_INT 24
55377: PUSH
55378: LD_INT 25
55380: PUSH
55381: LD_INT 26
55383: PUSH
55384: LD_INT 27
55386: PUSH
55387: LD_INT 28
55389: PUSH
55390: LD_INT 30
55392: PUSH
55393: LD_INT 31
55395: PUSH
55396: LD_INT 32
55398: PUSH
55399: LD_INT 33
55401: PUSH
55402: LD_INT 34
55404: PUSH
55405: LD_INT 36
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 101
55443: PUSH
55444: LD_INT 102
55446: PUSH
55447: LD_INT 103
55449: PUSH
55450: LD_INT 104
55452: PUSH
55453: LD_INT 105
55455: PUSH
55456: LD_INT 106
55458: PUSH
55459: LD_INT 107
55461: PUSH
55462: LD_INT 108
55464: PUSH
55465: LD_INT 109
55467: PUSH
55468: LD_INT 110
55470: PUSH
55471: LD_INT 111
55473: PUSH
55474: LD_INT 112
55476: PUSH
55477: LD_INT 113
55479: PUSH
55480: LD_INT 114
55482: PUSH
55483: LD_INT 116
55485: PUSH
55486: LD_INT 117
55488: PUSH
55489: LD_INT 118
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: ST_TO_ADDR
55515: GO 56754
55517: LD_INT 14
55519: DOUBLE
55520: EQUAL
55521: IFTRUE 55525
55523: GO 55749
55525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55526: LD_ADDR_VAR 0 2
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 4
55542: PUSH
55543: LD_INT 5
55545: PUSH
55546: LD_INT 6
55548: PUSH
55549: LD_INT 7
55551: PUSH
55552: LD_INT 8
55554: PUSH
55555: LD_INT 9
55557: PUSH
55558: LD_INT 10
55560: PUSH
55561: LD_INT 11
55563: PUSH
55564: LD_INT 12
55566: PUSH
55567: LD_INT 13
55569: PUSH
55570: LD_INT 14
55572: PUSH
55573: LD_INT 15
55575: PUSH
55576: LD_INT 16
55578: PUSH
55579: LD_INT 17
55581: PUSH
55582: LD_INT 18
55584: PUSH
55585: LD_INT 19
55587: PUSH
55588: LD_INT 20
55590: PUSH
55591: LD_INT 21
55593: PUSH
55594: LD_INT 22
55596: PUSH
55597: LD_INT 23
55599: PUSH
55600: LD_INT 24
55602: PUSH
55603: LD_INT 25
55605: PUSH
55606: LD_INT 26
55608: PUSH
55609: LD_INT 27
55611: PUSH
55612: LD_INT 28
55614: PUSH
55615: LD_INT 29
55617: PUSH
55618: LD_INT 30
55620: PUSH
55621: LD_INT 31
55623: PUSH
55624: LD_INT 32
55626: PUSH
55627: LD_INT 33
55629: PUSH
55630: LD_INT 34
55632: PUSH
55633: LD_INT 36
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 101
55675: PUSH
55676: LD_INT 102
55678: PUSH
55679: LD_INT 103
55681: PUSH
55682: LD_INT 104
55684: PUSH
55685: LD_INT 105
55687: PUSH
55688: LD_INT 106
55690: PUSH
55691: LD_INT 107
55693: PUSH
55694: LD_INT 108
55696: PUSH
55697: LD_INT 109
55699: PUSH
55700: LD_INT 110
55702: PUSH
55703: LD_INT 111
55705: PUSH
55706: LD_INT 112
55708: PUSH
55709: LD_INT 113
55711: PUSH
55712: LD_INT 114
55714: PUSH
55715: LD_INT 116
55717: PUSH
55718: LD_INT 117
55720: PUSH
55721: LD_INT 118
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: ST_TO_ADDR
55747: GO 56754
55749: LD_INT 15
55751: DOUBLE
55752: EQUAL
55753: IFTRUE 55757
55755: GO 55981
55757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55758: LD_ADDR_VAR 0 2
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: LD_INT 5
55777: PUSH
55778: LD_INT 6
55780: PUSH
55781: LD_INT 7
55783: PUSH
55784: LD_INT 8
55786: PUSH
55787: LD_INT 9
55789: PUSH
55790: LD_INT 10
55792: PUSH
55793: LD_INT 11
55795: PUSH
55796: LD_INT 12
55798: PUSH
55799: LD_INT 13
55801: PUSH
55802: LD_INT 14
55804: PUSH
55805: LD_INT 15
55807: PUSH
55808: LD_INT 16
55810: PUSH
55811: LD_INT 17
55813: PUSH
55814: LD_INT 18
55816: PUSH
55817: LD_INT 19
55819: PUSH
55820: LD_INT 20
55822: PUSH
55823: LD_INT 21
55825: PUSH
55826: LD_INT 22
55828: PUSH
55829: LD_INT 23
55831: PUSH
55832: LD_INT 24
55834: PUSH
55835: LD_INT 25
55837: PUSH
55838: LD_INT 26
55840: PUSH
55841: LD_INT 27
55843: PUSH
55844: LD_INT 28
55846: PUSH
55847: LD_INT 29
55849: PUSH
55850: LD_INT 30
55852: PUSH
55853: LD_INT 31
55855: PUSH
55856: LD_INT 32
55858: PUSH
55859: LD_INT 33
55861: PUSH
55862: LD_INT 34
55864: PUSH
55865: LD_INT 36
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 101
55907: PUSH
55908: LD_INT 102
55910: PUSH
55911: LD_INT 103
55913: PUSH
55914: LD_INT 104
55916: PUSH
55917: LD_INT 105
55919: PUSH
55920: LD_INT 106
55922: PUSH
55923: LD_INT 107
55925: PUSH
55926: LD_INT 108
55928: PUSH
55929: LD_INT 109
55931: PUSH
55932: LD_INT 110
55934: PUSH
55935: LD_INT 111
55937: PUSH
55938: LD_INT 112
55940: PUSH
55941: LD_INT 113
55943: PUSH
55944: LD_INT 114
55946: PUSH
55947: LD_INT 116
55949: PUSH
55950: LD_INT 117
55952: PUSH
55953: LD_INT 118
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: ST_TO_ADDR
55979: GO 56754
55981: LD_INT 16
55983: DOUBLE
55984: EQUAL
55985: IFTRUE 55989
55987: GO 56125
55989: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55990: LD_ADDR_VAR 0 2
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: LD_INT 4
56000: PUSH
56001: LD_INT 5
56003: PUSH
56004: LD_INT 7
56006: PUSH
56007: LD_INT 11
56009: PUSH
56010: LD_INT 12
56012: PUSH
56013: LD_INT 15
56015: PUSH
56016: LD_INT 16
56018: PUSH
56019: LD_INT 20
56021: PUSH
56022: LD_INT 21
56024: PUSH
56025: LD_INT 22
56027: PUSH
56028: LD_INT 23
56030: PUSH
56031: LD_INT 25
56033: PUSH
56034: LD_INT 26
56036: PUSH
56037: LD_INT 30
56039: PUSH
56040: LD_INT 31
56042: PUSH
56043: LD_INT 32
56045: PUSH
56046: LD_INT 33
56048: PUSH
56049: LD_INT 34
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 101
56075: PUSH
56076: LD_INT 102
56078: PUSH
56079: LD_INT 103
56081: PUSH
56082: LD_INT 106
56084: PUSH
56085: LD_INT 108
56087: PUSH
56088: LD_INT 112
56090: PUSH
56091: LD_INT 113
56093: PUSH
56094: LD_INT 114
56096: PUSH
56097: LD_INT 116
56099: PUSH
56100: LD_INT 117
56102: PUSH
56103: LD_INT 118
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: ST_TO_ADDR
56123: GO 56754
56125: LD_INT 17
56127: DOUBLE
56128: EQUAL
56129: IFTRUE 56133
56131: GO 56357
56133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
56134: LD_ADDR_VAR 0 2
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: LD_INT 4
56150: PUSH
56151: LD_INT 5
56153: PUSH
56154: LD_INT 6
56156: PUSH
56157: LD_INT 7
56159: PUSH
56160: LD_INT 8
56162: PUSH
56163: LD_INT 9
56165: PUSH
56166: LD_INT 10
56168: PUSH
56169: LD_INT 11
56171: PUSH
56172: LD_INT 12
56174: PUSH
56175: LD_INT 13
56177: PUSH
56178: LD_INT 14
56180: PUSH
56181: LD_INT 15
56183: PUSH
56184: LD_INT 16
56186: PUSH
56187: LD_INT 17
56189: PUSH
56190: LD_INT 18
56192: PUSH
56193: LD_INT 19
56195: PUSH
56196: LD_INT 20
56198: PUSH
56199: LD_INT 21
56201: PUSH
56202: LD_INT 22
56204: PUSH
56205: LD_INT 23
56207: PUSH
56208: LD_INT 24
56210: PUSH
56211: LD_INT 25
56213: PUSH
56214: LD_INT 26
56216: PUSH
56217: LD_INT 27
56219: PUSH
56220: LD_INT 28
56222: PUSH
56223: LD_INT 29
56225: PUSH
56226: LD_INT 30
56228: PUSH
56229: LD_INT 31
56231: PUSH
56232: LD_INT 32
56234: PUSH
56235: LD_INT 33
56237: PUSH
56238: LD_INT 34
56240: PUSH
56241: LD_INT 36
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 101
56283: PUSH
56284: LD_INT 102
56286: PUSH
56287: LD_INT 103
56289: PUSH
56290: LD_INT 104
56292: PUSH
56293: LD_INT 105
56295: PUSH
56296: LD_INT 106
56298: PUSH
56299: LD_INT 107
56301: PUSH
56302: LD_INT 108
56304: PUSH
56305: LD_INT 109
56307: PUSH
56308: LD_INT 110
56310: PUSH
56311: LD_INT 111
56313: PUSH
56314: LD_INT 112
56316: PUSH
56317: LD_INT 113
56319: PUSH
56320: LD_INT 114
56322: PUSH
56323: LD_INT 116
56325: PUSH
56326: LD_INT 117
56328: PUSH
56329: LD_INT 118
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: ST_TO_ADDR
56355: GO 56754
56357: LD_INT 18
56359: DOUBLE
56360: EQUAL
56361: IFTRUE 56365
56363: GO 56513
56365: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56366: LD_ADDR_VAR 0 2
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 4
56376: PUSH
56377: LD_INT 5
56379: PUSH
56380: LD_INT 7
56382: PUSH
56383: LD_INT 11
56385: PUSH
56386: LD_INT 12
56388: PUSH
56389: LD_INT 15
56391: PUSH
56392: LD_INT 16
56394: PUSH
56395: LD_INT 20
56397: PUSH
56398: LD_INT 21
56400: PUSH
56401: LD_INT 22
56403: PUSH
56404: LD_INT 23
56406: PUSH
56407: LD_INT 25
56409: PUSH
56410: LD_INT 26
56412: PUSH
56413: LD_INT 30
56415: PUSH
56416: LD_INT 31
56418: PUSH
56419: LD_INT 32
56421: PUSH
56422: LD_INT 33
56424: PUSH
56425: LD_INT 34
56427: PUSH
56428: LD_INT 35
56430: PUSH
56431: LD_INT 36
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 101
56459: PUSH
56460: LD_INT 102
56462: PUSH
56463: LD_INT 103
56465: PUSH
56466: LD_INT 106
56468: PUSH
56469: LD_INT 108
56471: PUSH
56472: LD_INT 112
56474: PUSH
56475: LD_INT 113
56477: PUSH
56478: LD_INT 114
56480: PUSH
56481: LD_INT 115
56483: PUSH
56484: LD_INT 116
56486: PUSH
56487: LD_INT 117
56489: PUSH
56490: LD_INT 118
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: ST_TO_ADDR
56511: GO 56754
56513: LD_INT 19
56515: DOUBLE
56516: EQUAL
56517: IFTRUE 56521
56519: GO 56753
56521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56522: LD_ADDR_VAR 0 2
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: LD_INT 3
56535: PUSH
56536: LD_INT 4
56538: PUSH
56539: LD_INT 5
56541: PUSH
56542: LD_INT 6
56544: PUSH
56545: LD_INT 7
56547: PUSH
56548: LD_INT 8
56550: PUSH
56551: LD_INT 9
56553: PUSH
56554: LD_INT 10
56556: PUSH
56557: LD_INT 11
56559: PUSH
56560: LD_INT 12
56562: PUSH
56563: LD_INT 13
56565: PUSH
56566: LD_INT 14
56568: PUSH
56569: LD_INT 15
56571: PUSH
56572: LD_INT 16
56574: PUSH
56575: LD_INT 17
56577: PUSH
56578: LD_INT 18
56580: PUSH
56581: LD_INT 19
56583: PUSH
56584: LD_INT 20
56586: PUSH
56587: LD_INT 21
56589: PUSH
56590: LD_INT 22
56592: PUSH
56593: LD_INT 23
56595: PUSH
56596: LD_INT 24
56598: PUSH
56599: LD_INT 25
56601: PUSH
56602: LD_INT 26
56604: PUSH
56605: LD_INT 27
56607: PUSH
56608: LD_INT 28
56610: PUSH
56611: LD_INT 29
56613: PUSH
56614: LD_INT 30
56616: PUSH
56617: LD_INT 31
56619: PUSH
56620: LD_INT 32
56622: PUSH
56623: LD_INT 33
56625: PUSH
56626: LD_INT 34
56628: PUSH
56629: LD_INT 35
56631: PUSH
56632: LD_INT 36
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 101
56675: PUSH
56676: LD_INT 102
56678: PUSH
56679: LD_INT 103
56681: PUSH
56682: LD_INT 104
56684: PUSH
56685: LD_INT 105
56687: PUSH
56688: LD_INT 106
56690: PUSH
56691: LD_INT 107
56693: PUSH
56694: LD_INT 108
56696: PUSH
56697: LD_INT 109
56699: PUSH
56700: LD_INT 110
56702: PUSH
56703: LD_INT 111
56705: PUSH
56706: LD_INT 112
56708: PUSH
56709: LD_INT 113
56711: PUSH
56712: LD_INT 114
56714: PUSH
56715: LD_INT 115
56717: PUSH
56718: LD_INT 116
56720: PUSH
56721: LD_INT 117
56723: PUSH
56724: LD_INT 118
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: ST_TO_ADDR
56751: GO 56754
56753: POP
// end else
56754: GO 56985
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56756: LD_ADDR_VAR 0 2
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 4
56772: PUSH
56773: LD_INT 5
56775: PUSH
56776: LD_INT 6
56778: PUSH
56779: LD_INT 7
56781: PUSH
56782: LD_INT 8
56784: PUSH
56785: LD_INT 9
56787: PUSH
56788: LD_INT 10
56790: PUSH
56791: LD_INT 11
56793: PUSH
56794: LD_INT 12
56796: PUSH
56797: LD_INT 13
56799: PUSH
56800: LD_INT 14
56802: PUSH
56803: LD_INT 15
56805: PUSH
56806: LD_INT 16
56808: PUSH
56809: LD_INT 17
56811: PUSH
56812: LD_INT 18
56814: PUSH
56815: LD_INT 19
56817: PUSH
56818: LD_INT 20
56820: PUSH
56821: LD_INT 21
56823: PUSH
56824: LD_INT 22
56826: PUSH
56827: LD_INT 23
56829: PUSH
56830: LD_INT 24
56832: PUSH
56833: LD_INT 25
56835: PUSH
56836: LD_INT 26
56838: PUSH
56839: LD_INT 27
56841: PUSH
56842: LD_INT 28
56844: PUSH
56845: LD_INT 29
56847: PUSH
56848: LD_INT 30
56850: PUSH
56851: LD_INT 31
56853: PUSH
56854: LD_INT 32
56856: PUSH
56857: LD_INT 33
56859: PUSH
56860: LD_INT 34
56862: PUSH
56863: LD_INT 35
56865: PUSH
56866: LD_INT 36
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 101
56909: PUSH
56910: LD_INT 102
56912: PUSH
56913: LD_INT 103
56915: PUSH
56916: LD_INT 104
56918: PUSH
56919: LD_INT 105
56921: PUSH
56922: LD_INT 106
56924: PUSH
56925: LD_INT 107
56927: PUSH
56928: LD_INT 108
56930: PUSH
56931: LD_INT 109
56933: PUSH
56934: LD_INT 110
56936: PUSH
56937: LD_INT 111
56939: PUSH
56940: LD_INT 112
56942: PUSH
56943: LD_INT 113
56945: PUSH
56946: LD_INT 114
56948: PUSH
56949: LD_INT 115
56951: PUSH
56952: LD_INT 116
56954: PUSH
56955: LD_INT 117
56957: PUSH
56958: LD_INT 118
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// if result then
56985: LD_VAR 0 2
56989: IFFALSE 57775
// begin normal :=  ;
56991: LD_ADDR_VAR 0 5
56995: PUSH
56996: LD_STRING 
56998: ST_TO_ADDR
// hardcore :=  ;
56999: LD_ADDR_VAR 0 6
57003: PUSH
57004: LD_STRING 
57006: ST_TO_ADDR
// active :=  ;
57007: LD_ADDR_VAR 0 7
57011: PUSH
57012: LD_STRING 
57014: ST_TO_ADDR
// for i = 1 to normalCounter do
57015: LD_ADDR_VAR 0 8
57019: PUSH
57020: DOUBLE
57021: LD_INT 1
57023: DEC
57024: ST_TO_ADDR
57025: LD_EXP 45
57029: PUSH
57030: FOR_TO
57031: IFFALSE 57132
// begin tmp := 0 ;
57033: LD_ADDR_VAR 0 3
57037: PUSH
57038: LD_STRING 0
57040: ST_TO_ADDR
// if result [ 1 ] then
57041: LD_VAR 0 2
57045: PUSH
57046: LD_INT 1
57048: ARRAY
57049: IFFALSE 57114
// if result [ 1 ] [ 1 ] = i then
57051: LD_VAR 0 2
57055: PUSH
57056: LD_INT 1
57058: ARRAY
57059: PUSH
57060: LD_INT 1
57062: ARRAY
57063: PUSH
57064: LD_VAR 0 8
57068: EQUAL
57069: IFFALSE 57114
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57071: LD_ADDR_VAR 0 2
57075: PUSH
57076: LD_VAR 0 2
57080: PPUSH
57081: LD_INT 1
57083: PPUSH
57084: LD_VAR 0 2
57088: PUSH
57089: LD_INT 1
57091: ARRAY
57092: PPUSH
57093: LD_INT 1
57095: PPUSH
57096: CALL_OW 3
57100: PPUSH
57101: CALL_OW 1
57105: ST_TO_ADDR
// tmp := 1 ;
57106: LD_ADDR_VAR 0 3
57110: PUSH
57111: LD_STRING 1
57113: ST_TO_ADDR
// end ; normal := normal & tmp ;
57114: LD_ADDR_VAR 0 5
57118: PUSH
57119: LD_VAR 0 5
57123: PUSH
57124: LD_VAR 0 3
57128: STR
57129: ST_TO_ADDR
// end ;
57130: GO 57030
57132: POP
57133: POP
// for i = 1 to hardcoreCounter do
57134: LD_ADDR_VAR 0 8
57138: PUSH
57139: DOUBLE
57140: LD_INT 1
57142: DEC
57143: ST_TO_ADDR
57144: LD_EXP 46
57148: PUSH
57149: FOR_TO
57150: IFFALSE 57255
// begin tmp := 0 ;
57152: LD_ADDR_VAR 0 3
57156: PUSH
57157: LD_STRING 0
57159: ST_TO_ADDR
// if result [ 2 ] then
57160: LD_VAR 0 2
57164: PUSH
57165: LD_INT 2
57167: ARRAY
57168: IFFALSE 57237
// if result [ 2 ] [ 1 ] = 100 + i then
57170: LD_VAR 0 2
57174: PUSH
57175: LD_INT 2
57177: ARRAY
57178: PUSH
57179: LD_INT 1
57181: ARRAY
57182: PUSH
57183: LD_INT 100
57185: PUSH
57186: LD_VAR 0 8
57190: PLUS
57191: EQUAL
57192: IFFALSE 57237
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57194: LD_ADDR_VAR 0 2
57198: PUSH
57199: LD_VAR 0 2
57203: PPUSH
57204: LD_INT 2
57206: PPUSH
57207: LD_VAR 0 2
57211: PUSH
57212: LD_INT 2
57214: ARRAY
57215: PPUSH
57216: LD_INT 1
57218: PPUSH
57219: CALL_OW 3
57223: PPUSH
57224: CALL_OW 1
57228: ST_TO_ADDR
// tmp := 1 ;
57229: LD_ADDR_VAR 0 3
57233: PUSH
57234: LD_STRING 1
57236: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57237: LD_ADDR_VAR 0 6
57241: PUSH
57242: LD_VAR 0 6
57246: PUSH
57247: LD_VAR 0 3
57251: STR
57252: ST_TO_ADDR
// end ;
57253: GO 57149
57255: POP
57256: POP
// if isGameLoad then
57257: LD_VAR 0 1
57261: IFFALSE 57736
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57263: LD_ADDR_VAR 0 4
57267: PUSH
57268: LD_EXP 49
57272: PUSH
57273: LD_EXP 48
57277: PUSH
57278: LD_EXP 50
57282: PUSH
57283: LD_EXP 47
57287: PUSH
57288: LD_EXP 51
57292: PUSH
57293: LD_EXP 52
57297: PUSH
57298: LD_EXP 53
57302: PUSH
57303: LD_EXP 54
57307: PUSH
57308: LD_EXP 55
57312: PUSH
57313: LD_EXP 56
57317: PUSH
57318: LD_EXP 57
57322: PUSH
57323: LD_EXP 58
57327: PUSH
57328: LD_EXP 59
57332: PUSH
57333: LD_EXP 60
57337: PUSH
57338: LD_EXP 68
57342: PUSH
57343: LD_EXP 69
57347: PUSH
57348: LD_EXP 70
57352: PUSH
57353: LD_EXP 71
57357: PUSH
57358: LD_EXP 73
57362: PUSH
57363: LD_EXP 74
57367: PUSH
57368: LD_EXP 75
57372: PUSH
57373: LD_EXP 78
57377: PUSH
57378: LD_EXP 80
57382: PUSH
57383: LD_EXP 81
57387: PUSH
57388: LD_EXP 82
57392: PUSH
57393: LD_EXP 84
57397: PUSH
57398: LD_EXP 85
57402: PUSH
57403: LD_EXP 88
57407: PUSH
57408: LD_EXP 89
57412: PUSH
57413: LD_EXP 90
57417: PUSH
57418: LD_EXP 91
57422: PUSH
57423: LD_EXP 92
57427: PUSH
57428: LD_EXP 93
57432: PUSH
57433: LD_EXP 94
57437: PUSH
57438: LD_EXP 95
57442: PUSH
57443: LD_EXP 96
57447: PUSH
57448: LD_EXP 61
57452: PUSH
57453: LD_EXP 62
57457: PUSH
57458: LD_EXP 65
57462: PUSH
57463: LD_EXP 66
57467: PUSH
57468: LD_EXP 67
57472: PUSH
57473: LD_EXP 63
57477: PUSH
57478: LD_EXP 64
57482: PUSH
57483: LD_EXP 72
57487: PUSH
57488: LD_EXP 76
57492: PUSH
57493: LD_EXP 77
57497: PUSH
57498: LD_EXP 79
57502: PUSH
57503: LD_EXP 83
57507: PUSH
57508: LD_EXP 86
57512: PUSH
57513: LD_EXP 87
57517: PUSH
57518: LD_EXP 97
57522: PUSH
57523: LD_EXP 98
57527: PUSH
57528: LD_EXP 99
57532: PUSH
57533: LD_EXP 100
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// tmp :=  ;
57594: LD_ADDR_VAR 0 3
57598: PUSH
57599: LD_STRING 
57601: ST_TO_ADDR
// for i = 1 to normalCounter do
57602: LD_ADDR_VAR 0 8
57606: PUSH
57607: DOUBLE
57608: LD_INT 1
57610: DEC
57611: ST_TO_ADDR
57612: LD_EXP 45
57616: PUSH
57617: FOR_TO
57618: IFFALSE 57654
// begin if flags [ i ] then
57620: LD_VAR 0 4
57624: PUSH
57625: LD_VAR 0 8
57629: ARRAY
57630: IFFALSE 57652
// tmp := tmp & i & ; ;
57632: LD_ADDR_VAR 0 3
57636: PUSH
57637: LD_VAR 0 3
57641: PUSH
57642: LD_VAR 0 8
57646: STR
57647: PUSH
57648: LD_STRING ;
57650: STR
57651: ST_TO_ADDR
// end ;
57652: GO 57617
57654: POP
57655: POP
// for i = 1 to hardcoreCounter do
57656: LD_ADDR_VAR 0 8
57660: PUSH
57661: DOUBLE
57662: LD_INT 1
57664: DEC
57665: ST_TO_ADDR
57666: LD_EXP 46
57670: PUSH
57671: FOR_TO
57672: IFFALSE 57718
// begin if flags [ normalCounter + i ] then
57674: LD_VAR 0 4
57678: PUSH
57679: LD_EXP 45
57683: PUSH
57684: LD_VAR 0 8
57688: PLUS
57689: ARRAY
57690: IFFALSE 57716
// tmp := tmp & ( 100 + i ) & ; ;
57692: LD_ADDR_VAR 0 3
57696: PUSH
57697: LD_VAR 0 3
57701: PUSH
57702: LD_INT 100
57704: PUSH
57705: LD_VAR 0 8
57709: PLUS
57710: STR
57711: PUSH
57712: LD_STRING ;
57714: STR
57715: ST_TO_ADDR
// end ;
57716: GO 57671
57718: POP
57719: POP
// if tmp then
57720: LD_VAR 0 3
57724: IFFALSE 57736
// active := tmp ;
57726: LD_ADDR_VAR 0 7
57730: PUSH
57731: LD_VAR 0 3
57735: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57736: LD_STRING getStreamItemsFromMission("
57738: PUSH
57739: LD_VAR 0 5
57743: STR
57744: PUSH
57745: LD_STRING ","
57747: STR
57748: PUSH
57749: LD_VAR 0 6
57753: STR
57754: PUSH
57755: LD_STRING ","
57757: STR
57758: PUSH
57759: LD_VAR 0 7
57763: STR
57764: PUSH
57765: LD_STRING ")
57767: STR
57768: PPUSH
57769: CALL_OW 559
// end else
57773: GO 57782
// ToLua ( getStreamItemsFromMission("","","") ) ;
57775: LD_STRING getStreamItemsFromMission("","","")
57777: PPUSH
57778: CALL_OW 559
// end ;
57782: LD_VAR 0 2
57786: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57787: LD_EXP 44
57791: PUSH
57792: LD_EXP 49
57796: AND
57797: IFFALSE 57921
57799: GO 57801
57801: DISABLE
57802: LD_INT 0
57804: PPUSH
57805: PPUSH
// begin enable ;
57806: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57807: LD_ADDR_VAR 0 2
57811: PUSH
57812: LD_INT 22
57814: PUSH
57815: LD_OWVAR 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 34
57829: PUSH
57830: LD_INT 7
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 34
57839: PUSH
57840: LD_INT 45
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 34
57849: PUSH
57850: LD_INT 28
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 34
57859: PUSH
57860: LD_INT 47
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PPUSH
57878: CALL_OW 69
57882: ST_TO_ADDR
// if not tmp then
57883: LD_VAR 0 2
57887: NOT
57888: IFFALSE 57892
// exit ;
57890: GO 57921
// for i in tmp do
57892: LD_ADDR_VAR 0 1
57896: PUSH
57897: LD_VAR 0 2
57901: PUSH
57902: FOR_IN
57903: IFFALSE 57919
// begin SetLives ( i , 0 ) ;
57905: LD_VAR 0 1
57909: PPUSH
57910: LD_INT 0
57912: PPUSH
57913: CALL_OW 234
// end ;
57917: GO 57902
57919: POP
57920: POP
// end ;
57921: PPOPN 2
57923: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57924: LD_EXP 44
57928: PUSH
57929: LD_EXP 50
57933: AND
57934: IFFALSE 58018
57936: GO 57938
57938: DISABLE
57939: LD_INT 0
57941: PPUSH
57942: PPUSH
// begin enable ;
57943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57944: LD_ADDR_VAR 0 2
57948: PUSH
57949: LD_INT 22
57951: PUSH
57952: LD_OWVAR 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 32
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PPUSH
57975: CALL_OW 69
57979: ST_TO_ADDR
// if not tmp then
57980: LD_VAR 0 2
57984: NOT
57985: IFFALSE 57989
// exit ;
57987: GO 58018
// for i in tmp do
57989: LD_ADDR_VAR 0 1
57993: PUSH
57994: LD_VAR 0 2
57998: PUSH
57999: FOR_IN
58000: IFFALSE 58016
// begin SetLives ( i , 0 ) ;
58002: LD_VAR 0 1
58006: PPUSH
58007: LD_INT 0
58009: PPUSH
58010: CALL_OW 234
// end ;
58014: GO 57999
58016: POP
58017: POP
// end ;
58018: PPOPN 2
58020: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58021: LD_EXP 44
58025: PUSH
58026: LD_EXP 47
58030: AND
58031: IFFALSE 58124
58033: GO 58035
58035: DISABLE
58036: LD_INT 0
58038: PPUSH
// begin enable ;
58039: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58040: LD_ADDR_VAR 0 1
58044: PUSH
58045: LD_INT 22
58047: PUSH
58048: LD_OWVAR 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: LD_INT 25
58062: PUSH
58063: LD_INT 5
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 25
58072: PUSH
58073: LD_INT 9
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 25
58082: PUSH
58083: LD_INT 8
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PPUSH
58100: CALL_OW 69
58104: PUSH
58105: FOR_IN
58106: IFFALSE 58122
// begin SetClass ( i , 1 ) ;
58108: LD_VAR 0 1
58112: PPUSH
58113: LD_INT 1
58115: PPUSH
58116: CALL_OW 336
// end ;
58120: GO 58105
58122: POP
58123: POP
// end ;
58124: PPOPN 1
58126: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58127: LD_EXP 44
58131: PUSH
58132: LD_EXP 48
58136: AND
58137: PUSH
58138: LD_OWVAR 65
58142: PUSH
58143: LD_INT 7
58145: LESS
58146: AND
58147: IFFALSE 58161
58149: GO 58151
58151: DISABLE
// begin enable ;
58152: ENABLE
// game_speed := 7 ;
58153: LD_ADDR_OWVAR 65
58157: PUSH
58158: LD_INT 7
58160: ST_TO_ADDR
// end ;
58161: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58162: LD_EXP 44
58166: PUSH
58167: LD_EXP 51
58171: AND
58172: IFFALSE 58374
58174: GO 58176
58176: DISABLE
58177: LD_INT 0
58179: PPUSH
58180: PPUSH
58181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58182: LD_ADDR_VAR 0 3
58186: PUSH
58187: LD_INT 81
58189: PUSH
58190: LD_OWVAR 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 21
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PPUSH
58213: CALL_OW 69
58217: ST_TO_ADDR
// if not tmp then
58218: LD_VAR 0 3
58222: NOT
58223: IFFALSE 58227
// exit ;
58225: GO 58374
// if tmp > 5 then
58227: LD_VAR 0 3
58231: PUSH
58232: LD_INT 5
58234: GREATER
58235: IFFALSE 58247
// k := 5 else
58237: LD_ADDR_VAR 0 2
58241: PUSH
58242: LD_INT 5
58244: ST_TO_ADDR
58245: GO 58257
// k := tmp ;
58247: LD_ADDR_VAR 0 2
58251: PUSH
58252: LD_VAR 0 3
58256: ST_TO_ADDR
// for i := 1 to k do
58257: LD_ADDR_VAR 0 1
58261: PUSH
58262: DOUBLE
58263: LD_INT 1
58265: DEC
58266: ST_TO_ADDR
58267: LD_VAR 0 2
58271: PUSH
58272: FOR_TO
58273: IFFALSE 58372
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58275: LD_VAR 0 3
58279: PUSH
58280: LD_VAR 0 1
58284: ARRAY
58285: PPUSH
58286: LD_VAR 0 1
58290: PUSH
58291: LD_INT 4
58293: MOD
58294: PUSH
58295: LD_INT 1
58297: PLUS
58298: PPUSH
58299: CALL_OW 259
58303: PUSH
58304: LD_INT 10
58306: LESS
58307: IFFALSE 58370
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58309: LD_VAR 0 3
58313: PUSH
58314: LD_VAR 0 1
58318: ARRAY
58319: PPUSH
58320: LD_VAR 0 1
58324: PUSH
58325: LD_INT 4
58327: MOD
58328: PUSH
58329: LD_INT 1
58331: PLUS
58332: PPUSH
58333: LD_VAR 0 3
58337: PUSH
58338: LD_VAR 0 1
58342: ARRAY
58343: PPUSH
58344: LD_VAR 0 1
58348: PUSH
58349: LD_INT 4
58351: MOD
58352: PUSH
58353: LD_INT 1
58355: PLUS
58356: PPUSH
58357: CALL_OW 259
58361: PUSH
58362: LD_INT 1
58364: PLUS
58365: PPUSH
58366: CALL_OW 237
58370: GO 58272
58372: POP
58373: POP
// end ;
58374: PPOPN 3
58376: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58377: LD_EXP 44
58381: PUSH
58382: LD_EXP 52
58386: AND
58387: IFFALSE 58407
58389: GO 58391
58391: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58392: LD_INT 4
58394: PPUSH
58395: LD_OWVAR 2
58399: PPUSH
58400: LD_INT 0
58402: PPUSH
58403: CALL_OW 324
58407: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58408: LD_EXP 44
58412: PUSH
58413: LD_EXP 81
58417: AND
58418: IFFALSE 58438
58420: GO 58422
58422: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58423: LD_INT 19
58425: PPUSH
58426: LD_OWVAR 2
58430: PPUSH
58431: LD_INT 0
58433: PPUSH
58434: CALL_OW 324
58438: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58439: LD_EXP 44
58443: PUSH
58444: LD_EXP 53
58448: AND
58449: IFFALSE 58551
58451: GO 58453
58453: DISABLE
58454: LD_INT 0
58456: PPUSH
58457: PPUSH
// begin enable ;
58458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58459: LD_ADDR_VAR 0 2
58463: PUSH
58464: LD_INT 22
58466: PUSH
58467: LD_OWVAR 2
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 34
58481: PUSH
58482: LD_INT 11
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 34
58491: PUSH
58492: LD_INT 30
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: LIST
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PPUSH
58508: CALL_OW 69
58512: ST_TO_ADDR
// if not tmp then
58513: LD_VAR 0 2
58517: NOT
58518: IFFALSE 58522
// exit ;
58520: GO 58551
// for i in tmp do
58522: LD_ADDR_VAR 0 1
58526: PUSH
58527: LD_VAR 0 2
58531: PUSH
58532: FOR_IN
58533: IFFALSE 58549
// begin SetLives ( i , 0 ) ;
58535: LD_VAR 0 1
58539: PPUSH
58540: LD_INT 0
58542: PPUSH
58543: CALL_OW 234
// end ;
58547: GO 58532
58549: POP
58550: POP
// end ;
58551: PPOPN 2
58553: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58554: LD_EXP 44
58558: PUSH
58559: LD_EXP 54
58563: AND
58564: IFFALSE 58584
58566: GO 58568
58568: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58569: LD_INT 32
58571: PPUSH
58572: LD_OWVAR 2
58576: PPUSH
58577: LD_INT 0
58579: PPUSH
58580: CALL_OW 324
58584: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58585: LD_EXP 44
58589: PUSH
58590: LD_EXP 55
58594: AND
58595: IFFALSE 58776
58597: GO 58599
58599: DISABLE
58600: LD_INT 0
58602: PPUSH
58603: PPUSH
58604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58605: LD_ADDR_VAR 0 2
58609: PUSH
58610: LD_INT 22
58612: PUSH
58613: LD_OWVAR 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 33
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PPUSH
58636: CALL_OW 69
58640: ST_TO_ADDR
// if not tmp then
58641: LD_VAR 0 2
58645: NOT
58646: IFFALSE 58650
// exit ;
58648: GO 58776
// side := 0 ;
58650: LD_ADDR_VAR 0 3
58654: PUSH
58655: LD_INT 0
58657: ST_TO_ADDR
// for i := 1 to 8 do
58658: LD_ADDR_VAR 0 1
58662: PUSH
58663: DOUBLE
58664: LD_INT 1
58666: DEC
58667: ST_TO_ADDR
58668: LD_INT 8
58670: PUSH
58671: FOR_TO
58672: IFFALSE 58720
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58674: LD_OWVAR 2
58678: PUSH
58679: LD_VAR 0 1
58683: NONEQUAL
58684: PUSH
58685: LD_OWVAR 2
58689: PPUSH
58690: LD_VAR 0 1
58694: PPUSH
58695: CALL_OW 81
58699: PUSH
58700: LD_INT 2
58702: EQUAL
58703: AND
58704: IFFALSE 58718
// begin side := i ;
58706: LD_ADDR_VAR 0 3
58710: PUSH
58711: LD_VAR 0 1
58715: ST_TO_ADDR
// break ;
58716: GO 58720
// end ;
58718: GO 58671
58720: POP
58721: POP
// if not side then
58722: LD_VAR 0 3
58726: NOT
58727: IFFALSE 58731
// exit ;
58729: GO 58776
// for i := 1 to tmp do
58731: LD_ADDR_VAR 0 1
58735: PUSH
58736: DOUBLE
58737: LD_INT 1
58739: DEC
58740: ST_TO_ADDR
58741: LD_VAR 0 2
58745: PUSH
58746: FOR_TO
58747: IFFALSE 58774
// if Prob ( 60 ) then
58749: LD_INT 60
58751: PPUSH
58752: CALL_OW 13
58756: IFFALSE 58772
// SetSide ( i , side ) ;
58758: LD_VAR 0 1
58762: PPUSH
58763: LD_VAR 0 3
58767: PPUSH
58768: CALL_OW 235
58772: GO 58746
58774: POP
58775: POP
// end ;
58776: PPOPN 3
58778: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58779: LD_EXP 44
58783: PUSH
58784: LD_EXP 57
58788: AND
58789: IFFALSE 58908
58791: GO 58793
58793: DISABLE
58794: LD_INT 0
58796: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58797: LD_ADDR_VAR 0 1
58801: PUSH
58802: LD_INT 22
58804: PUSH
58805: LD_OWVAR 2
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 21
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: LD_INT 23
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: PPUSH
58846: CALL_OW 69
58850: PUSH
58851: FOR_IN
58852: IFFALSE 58906
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58854: LD_VAR 0 1
58858: PPUSH
58859: CALL_OW 257
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: LD_INT 4
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: IN
58882: IFFALSE 58904
// SetClass ( un , rand ( 1 , 4 ) ) ;
58884: LD_VAR 0 1
58888: PPUSH
58889: LD_INT 1
58891: PPUSH
58892: LD_INT 4
58894: PPUSH
58895: CALL_OW 12
58899: PPUSH
58900: CALL_OW 336
58904: GO 58851
58906: POP
58907: POP
// end ;
58908: PPOPN 1
58910: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58911: LD_EXP 44
58915: PUSH
58916: LD_EXP 56
58920: AND
58921: IFFALSE 59000
58923: GO 58925
58925: DISABLE
58926: LD_INT 0
58928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58929: LD_ADDR_VAR 0 1
58933: PUSH
58934: LD_INT 22
58936: PUSH
58937: LD_OWVAR 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 21
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PPUSH
58960: CALL_OW 69
58964: ST_TO_ADDR
// if not tmp then
58965: LD_VAR 0 1
58969: NOT
58970: IFFALSE 58974
// exit ;
58972: GO 59000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58974: LD_VAR 0 1
58978: PUSH
58979: LD_INT 1
58981: PPUSH
58982: LD_VAR 0 1
58986: PPUSH
58987: CALL_OW 12
58991: ARRAY
58992: PPUSH
58993: LD_INT 100
58995: PPUSH
58996: CALL_OW 234
// end ;
59000: PPOPN 1
59002: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59003: LD_EXP 44
59007: PUSH
59008: LD_EXP 58
59012: AND
59013: IFFALSE 59111
59015: GO 59017
59017: DISABLE
59018: LD_INT 0
59020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59021: LD_ADDR_VAR 0 1
59025: PUSH
59026: LD_INT 22
59028: PUSH
59029: LD_OWVAR 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 21
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PPUSH
59052: CALL_OW 69
59056: ST_TO_ADDR
// if not tmp then
59057: LD_VAR 0 1
59061: NOT
59062: IFFALSE 59066
// exit ;
59064: GO 59111
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59066: LD_VAR 0 1
59070: PUSH
59071: LD_INT 1
59073: PPUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: CALL_OW 12
59083: ARRAY
59084: PPUSH
59085: LD_INT 1
59087: PPUSH
59088: LD_INT 4
59090: PPUSH
59091: CALL_OW 12
59095: PPUSH
59096: LD_INT 3000
59098: PPUSH
59099: LD_INT 9000
59101: PPUSH
59102: CALL_OW 12
59106: PPUSH
59107: CALL_OW 492
// end ;
59111: PPOPN 1
59113: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59114: LD_EXP 44
59118: PUSH
59119: LD_EXP 59
59123: AND
59124: IFFALSE 59144
59126: GO 59128
59128: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59129: LD_INT 1
59131: PPUSH
59132: LD_OWVAR 2
59136: PPUSH
59137: LD_INT 0
59139: PPUSH
59140: CALL_OW 324
59144: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59145: LD_EXP 44
59149: PUSH
59150: LD_EXP 60
59154: AND
59155: IFFALSE 59238
59157: GO 59159
59159: DISABLE
59160: LD_INT 0
59162: PPUSH
59163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59164: LD_ADDR_VAR 0 2
59168: PUSH
59169: LD_INT 22
59171: PUSH
59172: LD_OWVAR 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 21
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PPUSH
59195: CALL_OW 69
59199: ST_TO_ADDR
// if not tmp then
59200: LD_VAR 0 2
59204: NOT
59205: IFFALSE 59209
// exit ;
59207: GO 59238
// for i in tmp do
59209: LD_ADDR_VAR 0 1
59213: PUSH
59214: LD_VAR 0 2
59218: PUSH
59219: FOR_IN
59220: IFFALSE 59236
// SetBLevel ( i , 10 ) ;
59222: LD_VAR 0 1
59226: PPUSH
59227: LD_INT 10
59229: PPUSH
59230: CALL_OW 241
59234: GO 59219
59236: POP
59237: POP
// end ;
59238: PPOPN 2
59240: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59241: LD_EXP 44
59245: PUSH
59246: LD_EXP 61
59250: AND
59251: IFFALSE 59362
59253: GO 59255
59255: DISABLE
59256: LD_INT 0
59258: PPUSH
59259: PPUSH
59260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59261: LD_ADDR_VAR 0 3
59265: PUSH
59266: LD_INT 22
59268: PUSH
59269: LD_OWVAR 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 25
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PPUSH
59292: CALL_OW 69
59296: ST_TO_ADDR
// if not tmp then
59297: LD_VAR 0 3
59301: NOT
59302: IFFALSE 59306
// exit ;
59304: GO 59362
// un := tmp [ rand ( 1 , tmp ) ] ;
59306: LD_ADDR_VAR 0 2
59310: PUSH
59311: LD_VAR 0 3
59315: PUSH
59316: LD_INT 1
59318: PPUSH
59319: LD_VAR 0 3
59323: PPUSH
59324: CALL_OW 12
59328: ARRAY
59329: ST_TO_ADDR
// if Crawls ( un ) then
59330: LD_VAR 0 2
59334: PPUSH
59335: CALL_OW 318
59339: IFFALSE 59350
// ComWalk ( un ) ;
59341: LD_VAR 0 2
59345: PPUSH
59346: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59350: LD_VAR 0 2
59354: PPUSH
59355: LD_INT 5
59357: PPUSH
59358: CALL_OW 336
// end ;
59362: PPOPN 3
59364: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59365: LD_EXP 44
59369: PUSH
59370: LD_EXP 62
59374: AND
59375: PUSH
59376: LD_OWVAR 67
59380: PUSH
59381: LD_INT 4
59383: LESS
59384: AND
59385: IFFALSE 59404
59387: GO 59389
59389: DISABLE
// begin Difficulty := Difficulty + 1 ;
59390: LD_ADDR_OWVAR 67
59394: PUSH
59395: LD_OWVAR 67
59399: PUSH
59400: LD_INT 1
59402: PLUS
59403: ST_TO_ADDR
// end ;
59404: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59405: LD_EXP 44
59409: PUSH
59410: LD_EXP 63
59414: AND
59415: IFFALSE 59518
59417: GO 59419
59419: DISABLE
59420: LD_INT 0
59422: PPUSH
// begin for i := 1 to 5 do
59423: LD_ADDR_VAR 0 1
59427: PUSH
59428: DOUBLE
59429: LD_INT 1
59431: DEC
59432: ST_TO_ADDR
59433: LD_INT 5
59435: PUSH
59436: FOR_TO
59437: IFFALSE 59516
// begin uc_nation := nation_nature ;
59439: LD_ADDR_OWVAR 21
59443: PUSH
59444: LD_INT 0
59446: ST_TO_ADDR
// uc_side := 0 ;
59447: LD_ADDR_OWVAR 20
59451: PUSH
59452: LD_INT 0
59454: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59455: LD_ADDR_OWVAR 29
59459: PUSH
59460: LD_INT 12
59462: PUSH
59463: LD_INT 12
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: ST_TO_ADDR
// hc_agressivity := 20 ;
59470: LD_ADDR_OWVAR 35
59474: PUSH
59475: LD_INT 20
59477: ST_TO_ADDR
// hc_class := class_tiger ;
59478: LD_ADDR_OWVAR 28
59482: PUSH
59483: LD_INT 14
59485: ST_TO_ADDR
// hc_gallery :=  ;
59486: LD_ADDR_OWVAR 33
59490: PUSH
59491: LD_STRING 
59493: ST_TO_ADDR
// hc_name :=  ;
59494: LD_ADDR_OWVAR 26
59498: PUSH
59499: LD_STRING 
59501: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59502: CALL_OW 44
59506: PPUSH
59507: LD_INT 0
59509: PPUSH
59510: CALL_OW 51
// end ;
59514: GO 59436
59516: POP
59517: POP
// end ;
59518: PPOPN 1
59520: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59521: LD_EXP 44
59525: PUSH
59526: LD_EXP 64
59530: AND
59531: IFFALSE 59540
59533: GO 59535
59535: DISABLE
// StreamSibBomb ;
59536: CALL 59541 0 0
59540: END
// export function StreamSibBomb ; var i , x , y ; begin
59541: LD_INT 0
59543: PPUSH
59544: PPUSH
59545: PPUSH
59546: PPUSH
// result := false ;
59547: LD_ADDR_VAR 0 1
59551: PUSH
59552: LD_INT 0
59554: ST_TO_ADDR
// for i := 1 to 16 do
59555: LD_ADDR_VAR 0 2
59559: PUSH
59560: DOUBLE
59561: LD_INT 1
59563: DEC
59564: ST_TO_ADDR
59565: LD_INT 16
59567: PUSH
59568: FOR_TO
59569: IFFALSE 59768
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59571: LD_ADDR_VAR 0 3
59575: PUSH
59576: LD_INT 10
59578: PUSH
59579: LD_INT 20
59581: PUSH
59582: LD_INT 30
59584: PUSH
59585: LD_INT 40
59587: PUSH
59588: LD_INT 50
59590: PUSH
59591: LD_INT 60
59593: PUSH
59594: LD_INT 70
59596: PUSH
59597: LD_INT 80
59599: PUSH
59600: LD_INT 90
59602: PUSH
59603: LD_INT 100
59605: PUSH
59606: LD_INT 110
59608: PUSH
59609: LD_INT 120
59611: PUSH
59612: LD_INT 130
59614: PUSH
59615: LD_INT 140
59617: PUSH
59618: LD_INT 150
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PPUSH
59641: LD_INT 15
59643: PPUSH
59644: CALL_OW 12
59648: ARRAY
59649: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59650: LD_ADDR_VAR 0 4
59654: PUSH
59655: LD_INT 10
59657: PUSH
59658: LD_INT 20
59660: PUSH
59661: LD_INT 30
59663: PUSH
59664: LD_INT 40
59666: PUSH
59667: LD_INT 50
59669: PUSH
59670: LD_INT 60
59672: PUSH
59673: LD_INT 70
59675: PUSH
59676: LD_INT 80
59678: PUSH
59679: LD_INT 90
59681: PUSH
59682: LD_INT 100
59684: PUSH
59685: LD_INT 110
59687: PUSH
59688: LD_INT 120
59690: PUSH
59691: LD_INT 130
59693: PUSH
59694: LD_INT 140
59696: PUSH
59697: LD_INT 150
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PPUSH
59720: LD_INT 15
59722: PPUSH
59723: CALL_OW 12
59727: ARRAY
59728: ST_TO_ADDR
// if ValidHex ( x , y ) then
59729: LD_VAR 0 3
59733: PPUSH
59734: LD_VAR 0 4
59738: PPUSH
59739: CALL_OW 488
59743: IFFALSE 59766
// begin result := [ x , y ] ;
59745: LD_ADDR_VAR 0 1
59749: PUSH
59750: LD_VAR 0 3
59754: PUSH
59755: LD_VAR 0 4
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: ST_TO_ADDR
// break ;
59764: GO 59768
// end ; end ;
59766: GO 59568
59768: POP
59769: POP
// if result then
59770: LD_VAR 0 1
59774: IFFALSE 59834
// begin ToLua ( playSibBomb() ) ;
59776: LD_STRING playSibBomb()
59778: PPUSH
59779: CALL_OW 559
// wait ( 0 0$14 ) ;
59783: LD_INT 490
59785: PPUSH
59786: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59790: LD_VAR 0 1
59794: PUSH
59795: LD_INT 1
59797: ARRAY
59798: PPUSH
59799: LD_VAR 0 1
59803: PUSH
59804: LD_INT 2
59806: ARRAY
59807: PPUSH
59808: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59812: LD_VAR 0 1
59816: PUSH
59817: LD_INT 1
59819: ARRAY
59820: PPUSH
59821: LD_VAR 0 1
59825: PUSH
59826: LD_INT 2
59828: ARRAY
59829: PPUSH
59830: CALL_OW 429
// end ; end ;
59834: LD_VAR 0 1
59838: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59839: LD_EXP 44
59843: PUSH
59844: LD_EXP 66
59848: AND
59849: IFFALSE 59861
59851: GO 59853
59853: DISABLE
// YouLost (  ) ;
59854: LD_STRING 
59856: PPUSH
59857: CALL_OW 104
59861: END
// every 0 0$1 trigger StreamModeActive and sFog do
59862: LD_EXP 44
59866: PUSH
59867: LD_EXP 65
59871: AND
59872: IFFALSE 59886
59874: GO 59876
59876: DISABLE
// FogOff ( your_side ) ;
59877: LD_OWVAR 2
59881: PPUSH
59882: CALL_OW 344
59886: END
// every 0 0$1 trigger StreamModeActive and sSun do
59887: LD_EXP 44
59891: PUSH
59892: LD_EXP 67
59896: AND
59897: IFFALSE 59925
59899: GO 59901
59901: DISABLE
// begin solar_recharge_percent := 0 ;
59902: LD_ADDR_OWVAR 79
59906: PUSH
59907: LD_INT 0
59909: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59910: LD_INT 10500
59912: PPUSH
59913: CALL_OW 67
// solar_recharge_percent := 100 ;
59917: LD_ADDR_OWVAR 79
59921: PUSH
59922: LD_INT 100
59924: ST_TO_ADDR
// end ;
59925: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59926: LD_EXP 44
59930: PUSH
59931: LD_EXP 68
59935: AND
59936: IFFALSE 60175
59938: GO 59940
59940: DISABLE
59941: LD_INT 0
59943: PPUSH
59944: PPUSH
59945: PPUSH
// begin tmp := [ ] ;
59946: LD_ADDR_VAR 0 3
59950: PUSH
59951: EMPTY
59952: ST_TO_ADDR
// for i := 1 to 6 do
59953: LD_ADDR_VAR 0 1
59957: PUSH
59958: DOUBLE
59959: LD_INT 1
59961: DEC
59962: ST_TO_ADDR
59963: LD_INT 6
59965: PUSH
59966: FOR_TO
59967: IFFALSE 60072
// begin uc_nation := nation_nature ;
59969: LD_ADDR_OWVAR 21
59973: PUSH
59974: LD_INT 0
59976: ST_TO_ADDR
// uc_side := 0 ;
59977: LD_ADDR_OWVAR 20
59981: PUSH
59982: LD_INT 0
59984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59985: LD_ADDR_OWVAR 29
59989: PUSH
59990: LD_INT 12
59992: PUSH
59993: LD_INT 12
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// hc_agressivity := 20 ;
60000: LD_ADDR_OWVAR 35
60004: PUSH
60005: LD_INT 20
60007: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60008: LD_ADDR_OWVAR 28
60012: PUSH
60013: LD_INT 17
60015: ST_TO_ADDR
// hc_gallery :=  ;
60016: LD_ADDR_OWVAR 33
60020: PUSH
60021: LD_STRING 
60023: ST_TO_ADDR
// hc_name :=  ;
60024: LD_ADDR_OWVAR 26
60028: PUSH
60029: LD_STRING 
60031: ST_TO_ADDR
// un := CreateHuman ;
60032: LD_ADDR_VAR 0 2
60036: PUSH
60037: CALL_OW 44
60041: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60042: LD_VAR 0 2
60046: PPUSH
60047: LD_INT 1
60049: PPUSH
60050: CALL_OW 51
// tmp := tmp ^ un ;
60054: LD_ADDR_VAR 0 3
60058: PUSH
60059: LD_VAR 0 3
60063: PUSH
60064: LD_VAR 0 2
60068: ADD
60069: ST_TO_ADDR
// end ;
60070: GO 59966
60072: POP
60073: POP
// repeat wait ( 0 0$1 ) ;
60074: LD_INT 35
60076: PPUSH
60077: CALL_OW 67
// for un in tmp do
60081: LD_ADDR_VAR 0 2
60085: PUSH
60086: LD_VAR 0 3
60090: PUSH
60091: FOR_IN
60092: IFFALSE 60166
// begin if IsDead ( un ) then
60094: LD_VAR 0 2
60098: PPUSH
60099: CALL_OW 301
60103: IFFALSE 60123
// begin tmp := tmp diff un ;
60105: LD_ADDR_VAR 0 3
60109: PUSH
60110: LD_VAR 0 3
60114: PUSH
60115: LD_VAR 0 2
60119: DIFF
60120: ST_TO_ADDR
// continue ;
60121: GO 60091
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60123: LD_VAR 0 2
60127: PPUSH
60128: LD_INT 3
60130: PUSH
60131: LD_INT 22
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PPUSH
60145: CALL_OW 69
60149: PPUSH
60150: LD_VAR 0 2
60154: PPUSH
60155: CALL_OW 74
60159: PPUSH
60160: CALL_OW 115
// end ;
60164: GO 60091
60166: POP
60167: POP
// until not tmp ;
60168: LD_VAR 0 3
60172: NOT
60173: IFFALSE 60074
// end ;
60175: PPOPN 3
60177: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60178: LD_EXP 44
60182: PUSH
60183: LD_EXP 69
60187: AND
60188: IFFALSE 60242
60190: GO 60192
60192: DISABLE
// begin ToLua ( displayTroll(); ) ;
60193: LD_STRING displayTroll();
60195: PPUSH
60196: CALL_OW 559
// wait ( 3 3$00 ) ;
60200: LD_INT 6300
60202: PPUSH
60203: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60207: LD_STRING hideTroll();
60209: PPUSH
60210: CALL_OW 559
// wait ( 1 1$00 ) ;
60214: LD_INT 2100
60216: PPUSH
60217: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60221: LD_STRING displayTroll();
60223: PPUSH
60224: CALL_OW 559
// wait ( 1 1$00 ) ;
60228: LD_INT 2100
60230: PPUSH
60231: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60235: LD_STRING hideTroll();
60237: PPUSH
60238: CALL_OW 559
// end ;
60242: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60243: LD_EXP 44
60247: PUSH
60248: LD_EXP 70
60252: AND
60253: IFFALSE 60316
60255: GO 60257
60257: DISABLE
60258: LD_INT 0
60260: PPUSH
// begin p := 0 ;
60261: LD_ADDR_VAR 0 1
60265: PUSH
60266: LD_INT 0
60268: ST_TO_ADDR
// repeat game_speed := 1 ;
60269: LD_ADDR_OWVAR 65
60273: PUSH
60274: LD_INT 1
60276: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60277: LD_INT 35
60279: PPUSH
60280: CALL_OW 67
// p := p + 1 ;
60284: LD_ADDR_VAR 0 1
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_INT 1
60296: PLUS
60297: ST_TO_ADDR
// until p >= 60 ;
60298: LD_VAR 0 1
60302: PUSH
60303: LD_INT 60
60305: GREATEREQUAL
60306: IFFALSE 60269
// game_speed := 4 ;
60308: LD_ADDR_OWVAR 65
60312: PUSH
60313: LD_INT 4
60315: ST_TO_ADDR
// end ;
60316: PPOPN 1
60318: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60319: LD_EXP 44
60323: PUSH
60324: LD_EXP 71
60328: AND
60329: IFFALSE 60475
60331: GO 60333
60333: DISABLE
60334: LD_INT 0
60336: PPUSH
60337: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60338: LD_ADDR_VAR 0 1
60342: PUSH
60343: LD_INT 22
60345: PUSH
60346: LD_OWVAR 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 30
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 30
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PPUSH
60387: CALL_OW 69
60391: ST_TO_ADDR
// if not depot then
60392: LD_VAR 0 1
60396: NOT
60397: IFFALSE 60401
// exit ;
60399: GO 60475
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60401: LD_ADDR_VAR 0 2
60405: PUSH
60406: LD_VAR 0 1
60410: PUSH
60411: LD_INT 1
60413: PPUSH
60414: LD_VAR 0 1
60418: PPUSH
60419: CALL_OW 12
60423: ARRAY
60424: PPUSH
60425: CALL_OW 274
60429: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60430: LD_VAR 0 2
60434: PPUSH
60435: LD_INT 1
60437: PPUSH
60438: LD_INT 0
60440: PPUSH
60441: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60445: LD_VAR 0 2
60449: PPUSH
60450: LD_INT 2
60452: PPUSH
60453: LD_INT 0
60455: PPUSH
60456: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60460: LD_VAR 0 2
60464: PPUSH
60465: LD_INT 3
60467: PPUSH
60468: LD_INT 0
60470: PPUSH
60471: CALL_OW 277
// end ;
60475: PPOPN 2
60477: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60478: LD_EXP 44
60482: PUSH
60483: LD_EXP 72
60487: AND
60488: IFFALSE 60585
60490: GO 60492
60492: DISABLE
60493: LD_INT 0
60495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60496: LD_ADDR_VAR 0 1
60500: PUSH
60501: LD_INT 22
60503: PUSH
60504: LD_OWVAR 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 21
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: LD_INT 23
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: PPUSH
60545: CALL_OW 69
60549: ST_TO_ADDR
// if not tmp then
60550: LD_VAR 0 1
60554: NOT
60555: IFFALSE 60559
// exit ;
60557: GO 60585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60559: LD_VAR 0 1
60563: PUSH
60564: LD_INT 1
60566: PPUSH
60567: LD_VAR 0 1
60571: PPUSH
60572: CALL_OW 12
60576: ARRAY
60577: PPUSH
60578: LD_INT 200
60580: PPUSH
60581: CALL_OW 234
// end ;
60585: PPOPN 1
60587: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60588: LD_EXP 44
60592: PUSH
60593: LD_EXP 73
60597: AND
60598: IFFALSE 60677
60600: GO 60602
60602: DISABLE
60603: LD_INT 0
60605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60606: LD_ADDR_VAR 0 1
60610: PUSH
60611: LD_INT 22
60613: PUSH
60614: LD_OWVAR 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 21
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PPUSH
60637: CALL_OW 69
60641: ST_TO_ADDR
// if not tmp then
60642: LD_VAR 0 1
60646: NOT
60647: IFFALSE 60651
// exit ;
60649: GO 60677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60651: LD_VAR 0 1
60655: PUSH
60656: LD_INT 1
60658: PPUSH
60659: LD_VAR 0 1
60663: PPUSH
60664: CALL_OW 12
60668: ARRAY
60669: PPUSH
60670: LD_INT 60
60672: PPUSH
60673: CALL_OW 234
// end ;
60677: PPOPN 1
60679: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60680: LD_EXP 44
60684: PUSH
60685: LD_EXP 74
60689: AND
60690: IFFALSE 60789
60692: GO 60694
60694: DISABLE
60695: LD_INT 0
60697: PPUSH
60698: PPUSH
// begin enable ;
60699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60700: LD_ADDR_VAR 0 1
60704: PUSH
60705: LD_INT 22
60707: PUSH
60708: LD_OWVAR 2
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 61
60719: PUSH
60720: EMPTY
60721: LIST
60722: PUSH
60723: LD_INT 33
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: PPUSH
60738: CALL_OW 69
60742: ST_TO_ADDR
// if not tmp then
60743: LD_VAR 0 1
60747: NOT
60748: IFFALSE 60752
// exit ;
60750: GO 60789
// for i in tmp do
60752: LD_ADDR_VAR 0 2
60756: PUSH
60757: LD_VAR 0 1
60761: PUSH
60762: FOR_IN
60763: IFFALSE 60787
// if IsControledBy ( i ) then
60765: LD_VAR 0 2
60769: PPUSH
60770: CALL_OW 312
60774: IFFALSE 60785
// ComUnlink ( i ) ;
60776: LD_VAR 0 2
60780: PPUSH
60781: CALL_OW 136
60785: GO 60762
60787: POP
60788: POP
// end ;
60789: PPOPN 2
60791: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60792: LD_EXP 44
60796: PUSH
60797: LD_EXP 75
60801: AND
60802: IFFALSE 60942
60804: GO 60806
60806: DISABLE
60807: LD_INT 0
60809: PPUSH
60810: PPUSH
// begin ToLua ( displayPowell(); ) ;
60811: LD_STRING displayPowell();
60813: PPUSH
60814: CALL_OW 559
// uc_side := 0 ;
60818: LD_ADDR_OWVAR 20
60822: PUSH
60823: LD_INT 0
60825: ST_TO_ADDR
// uc_nation := 2 ;
60826: LD_ADDR_OWVAR 21
60830: PUSH
60831: LD_INT 2
60833: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60834: LD_ADDR_OWVAR 37
60838: PUSH
60839: LD_INT 14
60841: ST_TO_ADDR
// vc_engine := engine_siberite ;
60842: LD_ADDR_OWVAR 39
60846: PUSH
60847: LD_INT 3
60849: ST_TO_ADDR
// vc_control := control_apeman ;
60850: LD_ADDR_OWVAR 38
60854: PUSH
60855: LD_INT 5
60857: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60858: LD_ADDR_OWVAR 40
60862: PUSH
60863: LD_INT 29
60865: ST_TO_ADDR
// un := CreateVehicle ;
60866: LD_ADDR_VAR 0 2
60870: PUSH
60871: CALL_OW 45
60875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60876: LD_VAR 0 2
60880: PPUSH
60881: LD_INT 1
60883: PPUSH
60884: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60888: LD_INT 35
60890: PPUSH
60891: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60895: LD_VAR 0 2
60899: PPUSH
60900: LD_INT 22
60902: PUSH
60903: LD_OWVAR 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PPUSH
60912: CALL_OW 69
60916: PPUSH
60917: LD_VAR 0 2
60921: PPUSH
60922: CALL_OW 74
60926: PPUSH
60927: CALL_OW 115
// until IsDead ( un ) ;
60931: LD_VAR 0 2
60935: PPUSH
60936: CALL_OW 301
60940: IFFALSE 60888
// end ;
60942: PPOPN 2
60944: END
// every 0 0$1 trigger StreamModeActive and sStu do
60945: LD_EXP 44
60949: PUSH
60950: LD_EXP 83
60954: AND
60955: IFFALSE 60971
60957: GO 60959
60959: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60960: LD_STRING displayStucuk();
60962: PPUSH
60963: CALL_OW 559
// ResetFog ;
60967: CALL_OW 335
// end ;
60971: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60972: LD_EXP 44
60976: PUSH
60977: LD_EXP 76
60981: AND
60982: IFFALSE 61123
60984: GO 60986
60986: DISABLE
60987: LD_INT 0
60989: PPUSH
60990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60991: LD_ADDR_VAR 0 2
60995: PUSH
60996: LD_INT 22
60998: PUSH
60999: LD_OWVAR 2
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 21
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PPUSH
61022: CALL_OW 69
61026: ST_TO_ADDR
// if not tmp then
61027: LD_VAR 0 2
61031: NOT
61032: IFFALSE 61036
// exit ;
61034: GO 61123
// un := tmp [ rand ( 1 , tmp ) ] ;
61036: LD_ADDR_VAR 0 1
61040: PUSH
61041: LD_VAR 0 2
61045: PUSH
61046: LD_INT 1
61048: PPUSH
61049: LD_VAR 0 2
61053: PPUSH
61054: CALL_OW 12
61058: ARRAY
61059: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61060: LD_VAR 0 1
61064: PPUSH
61065: LD_INT 0
61067: PPUSH
61068: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61072: LD_VAR 0 1
61076: PPUSH
61077: LD_OWVAR 3
61081: PUSH
61082: LD_VAR 0 1
61086: DIFF
61087: PPUSH
61088: LD_VAR 0 1
61092: PPUSH
61093: CALL_OW 74
61097: PPUSH
61098: CALL_OW 115
// wait ( 0 0$20 ) ;
61102: LD_INT 700
61104: PPUSH
61105: CALL_OW 67
// SetSide ( un , your_side ) ;
61109: LD_VAR 0 1
61113: PPUSH
61114: LD_OWVAR 2
61118: PPUSH
61119: CALL_OW 235
// end ;
61123: PPOPN 2
61125: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61126: LD_EXP 44
61130: PUSH
61131: LD_EXP 77
61135: AND
61136: IFFALSE 61242
61138: GO 61140
61140: DISABLE
61141: LD_INT 0
61143: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61144: LD_ADDR_VAR 0 1
61148: PUSH
61149: LD_INT 22
61151: PUSH
61152: LD_OWVAR 2
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 30
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 30
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: LIST
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PPUSH
61193: CALL_OW 69
61197: ST_TO_ADDR
// if not depot then
61198: LD_VAR 0 1
61202: NOT
61203: IFFALSE 61207
// exit ;
61205: GO 61242
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61207: LD_VAR 0 1
61211: PUSH
61212: LD_INT 1
61214: ARRAY
61215: PPUSH
61216: CALL_OW 250
61220: PPUSH
61221: LD_VAR 0 1
61225: PUSH
61226: LD_INT 1
61228: ARRAY
61229: PPUSH
61230: CALL_OW 251
61234: PPUSH
61235: LD_INT 70
61237: PPUSH
61238: CALL_OW 495
// end ;
61242: PPOPN 1
61244: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61245: LD_EXP 44
61249: PUSH
61250: LD_EXP 78
61254: AND
61255: IFFALSE 61466
61257: GO 61259
61259: DISABLE
61260: LD_INT 0
61262: PPUSH
61263: PPUSH
61264: PPUSH
61265: PPUSH
61266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61267: LD_ADDR_VAR 0 5
61271: PUSH
61272: LD_INT 22
61274: PUSH
61275: LD_OWVAR 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 21
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PPUSH
61298: CALL_OW 69
61302: ST_TO_ADDR
// if not tmp then
61303: LD_VAR 0 5
61307: NOT
61308: IFFALSE 61312
// exit ;
61310: GO 61466
// for i in tmp do
61312: LD_ADDR_VAR 0 1
61316: PUSH
61317: LD_VAR 0 5
61321: PUSH
61322: FOR_IN
61323: IFFALSE 61464
// begin d := rand ( 0 , 5 ) ;
61325: LD_ADDR_VAR 0 4
61329: PUSH
61330: LD_INT 0
61332: PPUSH
61333: LD_INT 5
61335: PPUSH
61336: CALL_OW 12
61340: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61341: LD_ADDR_VAR 0 2
61345: PUSH
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 250
61355: PPUSH
61356: LD_VAR 0 4
61360: PPUSH
61361: LD_INT 3
61363: PPUSH
61364: LD_INT 12
61366: PPUSH
61367: CALL_OW 12
61371: PPUSH
61372: CALL_OW 272
61376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61377: LD_ADDR_VAR 0 3
61381: PUSH
61382: LD_VAR 0 1
61386: PPUSH
61387: CALL_OW 251
61391: PPUSH
61392: LD_VAR 0 4
61396: PPUSH
61397: LD_INT 3
61399: PPUSH
61400: LD_INT 12
61402: PPUSH
61403: CALL_OW 12
61407: PPUSH
61408: CALL_OW 273
61412: ST_TO_ADDR
// if ValidHex ( x , y ) then
61413: LD_VAR 0 2
61417: PPUSH
61418: LD_VAR 0 3
61422: PPUSH
61423: CALL_OW 488
61427: IFFALSE 61462
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61429: LD_VAR 0 1
61433: PPUSH
61434: LD_VAR 0 2
61438: PPUSH
61439: LD_VAR 0 3
61443: PPUSH
61444: LD_INT 3
61446: PPUSH
61447: LD_INT 6
61449: PPUSH
61450: CALL_OW 12
61454: PPUSH
61455: LD_INT 1
61457: PPUSH
61458: CALL_OW 483
// end ;
61462: GO 61322
61464: POP
61465: POP
// end ;
61466: PPOPN 5
61468: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61469: LD_EXP 44
61473: PUSH
61474: LD_EXP 79
61478: AND
61479: IFFALSE 61573
61481: GO 61483
61483: DISABLE
61484: LD_INT 0
61486: PPUSH
61487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61488: LD_ADDR_VAR 0 2
61492: PUSH
61493: LD_INT 22
61495: PUSH
61496: LD_OWVAR 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 32
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 21
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: PPUSH
61530: CALL_OW 69
61534: ST_TO_ADDR
// if not tmp then
61535: LD_VAR 0 2
61539: NOT
61540: IFFALSE 61544
// exit ;
61542: GO 61573
// for i in tmp do
61544: LD_ADDR_VAR 0 1
61548: PUSH
61549: LD_VAR 0 2
61553: PUSH
61554: FOR_IN
61555: IFFALSE 61571
// SetFuel ( i , 0 ) ;
61557: LD_VAR 0 1
61561: PPUSH
61562: LD_INT 0
61564: PPUSH
61565: CALL_OW 240
61569: GO 61554
61571: POP
61572: POP
// end ;
61573: PPOPN 2
61575: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61576: LD_EXP 44
61580: PUSH
61581: LD_EXP 80
61585: AND
61586: IFFALSE 61652
61588: GO 61590
61590: DISABLE
61591: LD_INT 0
61593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61594: LD_ADDR_VAR 0 1
61598: PUSH
61599: LD_INT 22
61601: PUSH
61602: LD_OWVAR 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 30
61613: PUSH
61614: LD_INT 29
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PPUSH
61625: CALL_OW 69
61629: ST_TO_ADDR
// if not tmp then
61630: LD_VAR 0 1
61634: NOT
61635: IFFALSE 61639
// exit ;
61637: GO 61652
// DestroyUnit ( tmp [ 1 ] ) ;
61639: LD_VAR 0 1
61643: PUSH
61644: LD_INT 1
61646: ARRAY
61647: PPUSH
61648: CALL_OW 65
// end ;
61652: PPOPN 1
61654: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61655: LD_EXP 44
61659: PUSH
61660: LD_EXP 82
61664: AND
61665: IFFALSE 61794
61667: GO 61669
61669: DISABLE
61670: LD_INT 0
61672: PPUSH
// begin uc_side := 0 ;
61673: LD_ADDR_OWVAR 20
61677: PUSH
61678: LD_INT 0
61680: ST_TO_ADDR
// uc_nation := nation_arabian ;
61681: LD_ADDR_OWVAR 21
61685: PUSH
61686: LD_INT 2
61688: ST_TO_ADDR
// hc_gallery :=  ;
61689: LD_ADDR_OWVAR 33
61693: PUSH
61694: LD_STRING 
61696: ST_TO_ADDR
// hc_name :=  ;
61697: LD_ADDR_OWVAR 26
61701: PUSH
61702: LD_STRING 
61704: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61705: LD_INT 1
61707: PPUSH
61708: LD_INT 11
61710: PPUSH
61711: LD_INT 10
61713: PPUSH
61714: CALL_OW 380
// un := CreateHuman ;
61718: LD_ADDR_VAR 0 1
61722: PUSH
61723: CALL_OW 44
61727: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61728: LD_VAR 0 1
61732: PPUSH
61733: LD_INT 1
61735: PPUSH
61736: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61740: LD_INT 35
61742: PPUSH
61743: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61747: LD_VAR 0 1
61751: PPUSH
61752: LD_INT 22
61754: PUSH
61755: LD_OWVAR 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PPUSH
61764: CALL_OW 69
61768: PPUSH
61769: LD_VAR 0 1
61773: PPUSH
61774: CALL_OW 74
61778: PPUSH
61779: CALL_OW 115
// until IsDead ( un ) ;
61783: LD_VAR 0 1
61787: PPUSH
61788: CALL_OW 301
61792: IFFALSE 61740
// end ;
61794: PPOPN 1
61796: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61797: LD_EXP 44
61801: PUSH
61802: LD_EXP 84
61806: AND
61807: IFFALSE 61819
61809: GO 61811
61811: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61812: LD_STRING earthquake(getX(game), 0, 32)
61814: PPUSH
61815: CALL_OW 559
61819: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61820: LD_EXP 44
61824: PUSH
61825: LD_EXP 85
61829: AND
61830: IFFALSE 61921
61832: GO 61834
61834: DISABLE
61835: LD_INT 0
61837: PPUSH
// begin enable ;
61838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61839: LD_ADDR_VAR 0 1
61843: PUSH
61844: LD_INT 22
61846: PUSH
61847: LD_OWVAR 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 21
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 33
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: LIST
61880: PPUSH
61881: CALL_OW 69
61885: ST_TO_ADDR
// if not tmp then
61886: LD_VAR 0 1
61890: NOT
61891: IFFALSE 61895
// exit ;
61893: GO 61921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61895: LD_VAR 0 1
61899: PUSH
61900: LD_INT 1
61902: PPUSH
61903: LD_VAR 0 1
61907: PPUSH
61908: CALL_OW 12
61912: ARRAY
61913: PPUSH
61914: LD_INT 1
61916: PPUSH
61917: CALL_OW 234
// end ;
61921: PPOPN 1
61923: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61924: LD_EXP 44
61928: PUSH
61929: LD_EXP 86
61933: AND
61934: IFFALSE 62075
61936: GO 61938
61938: DISABLE
61939: LD_INT 0
61941: PPUSH
61942: PPUSH
61943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61944: LD_ADDR_VAR 0 3
61948: PUSH
61949: LD_INT 22
61951: PUSH
61952: LD_OWVAR 2
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 25
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PPUSH
61975: CALL_OW 69
61979: ST_TO_ADDR
// if not tmp then
61980: LD_VAR 0 3
61984: NOT
61985: IFFALSE 61989
// exit ;
61987: GO 62075
// un := tmp [ rand ( 1 , tmp ) ] ;
61989: LD_ADDR_VAR 0 2
61993: PUSH
61994: LD_VAR 0 3
61998: PUSH
61999: LD_INT 1
62001: PPUSH
62002: LD_VAR 0 3
62006: PPUSH
62007: CALL_OW 12
62011: ARRAY
62012: ST_TO_ADDR
// if Crawls ( un ) then
62013: LD_VAR 0 2
62017: PPUSH
62018: CALL_OW 318
62022: IFFALSE 62033
// ComWalk ( un ) ;
62024: LD_VAR 0 2
62028: PPUSH
62029: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62033: LD_VAR 0 2
62037: PPUSH
62038: LD_INT 9
62040: PPUSH
62041: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62045: LD_INT 28
62047: PPUSH
62048: LD_OWVAR 2
62052: PPUSH
62053: LD_INT 2
62055: PPUSH
62056: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62060: LD_INT 29
62062: PPUSH
62063: LD_OWVAR 2
62067: PPUSH
62068: LD_INT 2
62070: PPUSH
62071: CALL_OW 322
// end ;
62075: PPOPN 3
62077: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62078: LD_EXP 44
62082: PUSH
62083: LD_EXP 87
62087: AND
62088: IFFALSE 62199
62090: GO 62092
62092: DISABLE
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
62097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62098: LD_ADDR_VAR 0 3
62102: PUSH
62103: LD_INT 22
62105: PUSH
62106: LD_OWVAR 2
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 25
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PPUSH
62129: CALL_OW 69
62133: ST_TO_ADDR
// if not tmp then
62134: LD_VAR 0 3
62138: NOT
62139: IFFALSE 62143
// exit ;
62141: GO 62199
// un := tmp [ rand ( 1 , tmp ) ] ;
62143: LD_ADDR_VAR 0 2
62147: PUSH
62148: LD_VAR 0 3
62152: PUSH
62153: LD_INT 1
62155: PPUSH
62156: LD_VAR 0 3
62160: PPUSH
62161: CALL_OW 12
62165: ARRAY
62166: ST_TO_ADDR
// if Crawls ( un ) then
62167: LD_VAR 0 2
62171: PPUSH
62172: CALL_OW 318
62176: IFFALSE 62187
// ComWalk ( un ) ;
62178: LD_VAR 0 2
62182: PPUSH
62183: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62187: LD_VAR 0 2
62191: PPUSH
62192: LD_INT 8
62194: PPUSH
62195: CALL_OW 336
// end ;
62199: PPOPN 3
62201: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62202: LD_EXP 44
62206: PUSH
62207: LD_EXP 88
62211: AND
62212: IFFALSE 62356
62214: GO 62216
62216: DISABLE
62217: LD_INT 0
62219: PPUSH
62220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62221: LD_ADDR_VAR 0 2
62225: PUSH
62226: LD_INT 22
62228: PUSH
62229: LD_OWVAR 2
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 21
62240: PUSH
62241: LD_INT 2
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 34
62253: PUSH
62254: LD_INT 12
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 34
62263: PUSH
62264: LD_INT 51
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 34
62273: PUSH
62274: LD_INT 32
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: LIST
62291: PPUSH
62292: CALL_OW 69
62296: ST_TO_ADDR
// if not tmp then
62297: LD_VAR 0 2
62301: NOT
62302: IFFALSE 62306
// exit ;
62304: GO 62356
// for i in tmp do
62306: LD_ADDR_VAR 0 1
62310: PUSH
62311: LD_VAR 0 2
62315: PUSH
62316: FOR_IN
62317: IFFALSE 62354
// if GetCargo ( i , mat_artifact ) = 0 then
62319: LD_VAR 0 1
62323: PPUSH
62324: LD_INT 4
62326: PPUSH
62327: CALL_OW 289
62331: PUSH
62332: LD_INT 0
62334: EQUAL
62335: IFFALSE 62352
// SetCargo ( i , mat_siberit , 100 ) ;
62337: LD_VAR 0 1
62341: PPUSH
62342: LD_INT 3
62344: PPUSH
62345: LD_INT 100
62347: PPUSH
62348: CALL_OW 290
62352: GO 62316
62354: POP
62355: POP
// end ;
62356: PPOPN 2
62358: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62359: LD_EXP 44
62363: PUSH
62364: LD_EXP 89
62368: AND
62369: IFFALSE 62552
62371: GO 62373
62373: DISABLE
62374: LD_INT 0
62376: PPUSH
62377: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62378: LD_ADDR_VAR 0 2
62382: PUSH
62383: LD_INT 22
62385: PUSH
62386: LD_OWVAR 2
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PPUSH
62395: CALL_OW 69
62399: ST_TO_ADDR
// if not tmp then
62400: LD_VAR 0 2
62404: NOT
62405: IFFALSE 62409
// exit ;
62407: GO 62552
// for i := 1 to 2 do
62409: LD_ADDR_VAR 0 1
62413: PUSH
62414: DOUBLE
62415: LD_INT 1
62417: DEC
62418: ST_TO_ADDR
62419: LD_INT 2
62421: PUSH
62422: FOR_TO
62423: IFFALSE 62550
// begin uc_side := your_side ;
62425: LD_ADDR_OWVAR 20
62429: PUSH
62430: LD_OWVAR 2
62434: ST_TO_ADDR
// uc_nation := nation_american ;
62435: LD_ADDR_OWVAR 21
62439: PUSH
62440: LD_INT 1
62442: ST_TO_ADDR
// vc_chassis := us_morphling ;
62443: LD_ADDR_OWVAR 37
62447: PUSH
62448: LD_INT 5
62450: ST_TO_ADDR
// vc_engine := engine_siberite ;
62451: LD_ADDR_OWVAR 39
62455: PUSH
62456: LD_INT 3
62458: ST_TO_ADDR
// vc_control := control_computer ;
62459: LD_ADDR_OWVAR 38
62463: PUSH
62464: LD_INT 3
62466: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62467: LD_ADDR_OWVAR 40
62471: PUSH
62472: LD_INT 10
62474: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62475: LD_VAR 0 2
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PPUSH
62484: CALL_OW 310
62488: NOT
62489: IFFALSE 62536
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62491: CALL_OW 45
62495: PPUSH
62496: LD_VAR 0 2
62500: PUSH
62501: LD_INT 1
62503: ARRAY
62504: PPUSH
62505: CALL_OW 250
62509: PPUSH
62510: LD_VAR 0 2
62514: PUSH
62515: LD_INT 1
62517: ARRAY
62518: PPUSH
62519: CALL_OW 251
62523: PPUSH
62524: LD_INT 12
62526: PPUSH
62527: LD_INT 1
62529: PPUSH
62530: CALL_OW 50
62534: GO 62548
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62536: CALL_OW 45
62540: PPUSH
62541: LD_INT 1
62543: PPUSH
62544: CALL_OW 51
// end ;
62548: GO 62422
62550: POP
62551: POP
// end ;
62552: PPOPN 2
62554: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62555: LD_EXP 44
62559: PUSH
62560: LD_EXP 90
62564: AND
62565: IFFALSE 62787
62567: GO 62569
62569: DISABLE
62570: LD_INT 0
62572: PPUSH
62573: PPUSH
62574: PPUSH
62575: PPUSH
62576: PPUSH
62577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62578: LD_ADDR_VAR 0 6
62582: PUSH
62583: LD_INT 22
62585: PUSH
62586: LD_OWVAR 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 21
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: LD_INT 23
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: LIST
62626: PPUSH
62627: CALL_OW 69
62631: ST_TO_ADDR
// if not tmp then
62632: LD_VAR 0 6
62636: NOT
62637: IFFALSE 62641
// exit ;
62639: GO 62787
// s1 := rand ( 1 , 4 ) ;
62641: LD_ADDR_VAR 0 2
62645: PUSH
62646: LD_INT 1
62648: PPUSH
62649: LD_INT 4
62651: PPUSH
62652: CALL_OW 12
62656: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62657: LD_ADDR_VAR 0 4
62661: PUSH
62662: LD_VAR 0 6
62666: PUSH
62667: LD_INT 1
62669: ARRAY
62670: PPUSH
62671: LD_VAR 0 2
62675: PPUSH
62676: CALL_OW 259
62680: ST_TO_ADDR
// if s1 = 1 then
62681: LD_VAR 0 2
62685: PUSH
62686: LD_INT 1
62688: EQUAL
62689: IFFALSE 62709
// s2 := rand ( 2 , 4 ) else
62691: LD_ADDR_VAR 0 3
62695: PUSH
62696: LD_INT 2
62698: PPUSH
62699: LD_INT 4
62701: PPUSH
62702: CALL_OW 12
62706: ST_TO_ADDR
62707: GO 62717
// s2 := 1 ;
62709: LD_ADDR_VAR 0 3
62713: PUSH
62714: LD_INT 1
62716: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62717: LD_ADDR_VAR 0 5
62721: PUSH
62722: LD_VAR 0 6
62726: PUSH
62727: LD_INT 1
62729: ARRAY
62730: PPUSH
62731: LD_VAR 0 3
62735: PPUSH
62736: CALL_OW 259
62740: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62741: LD_VAR 0 6
62745: PUSH
62746: LD_INT 1
62748: ARRAY
62749: PPUSH
62750: LD_VAR 0 2
62754: PPUSH
62755: LD_VAR 0 5
62759: PPUSH
62760: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62764: LD_VAR 0 6
62768: PUSH
62769: LD_INT 1
62771: ARRAY
62772: PPUSH
62773: LD_VAR 0 3
62777: PPUSH
62778: LD_VAR 0 4
62782: PPUSH
62783: CALL_OW 237
// end ;
62787: PPOPN 6
62789: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62790: LD_EXP 44
62794: PUSH
62795: LD_EXP 91
62799: AND
62800: IFFALSE 62879
62802: GO 62804
62804: DISABLE
62805: LD_INT 0
62807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62808: LD_ADDR_VAR 0 1
62812: PUSH
62813: LD_INT 22
62815: PUSH
62816: LD_OWVAR 2
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 30
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PPUSH
62839: CALL_OW 69
62843: ST_TO_ADDR
// if not tmp then
62844: LD_VAR 0 1
62848: NOT
62849: IFFALSE 62853
// exit ;
62851: GO 62879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62853: LD_VAR 0 1
62857: PUSH
62858: LD_INT 1
62860: PPUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL_OW 12
62870: ARRAY
62871: PPUSH
62872: LD_INT 1
62874: PPUSH
62875: CALL_OW 234
// end ;
62879: PPOPN 1
62881: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62882: LD_EXP 44
62886: PUSH
62887: LD_EXP 92
62891: AND
62892: IFFALSE 63004
62894: GO 62896
62896: DISABLE
62897: LD_INT 0
62899: PPUSH
62900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62901: LD_ADDR_VAR 0 2
62905: PUSH
62906: LD_INT 22
62908: PUSH
62909: LD_OWVAR 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: LD_INT 30
62923: PUSH
62924: LD_INT 27
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 30
62933: PUSH
62934: LD_INT 26
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 30
62943: PUSH
62944: LD_INT 28
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PPUSH
62961: CALL_OW 69
62965: ST_TO_ADDR
// if not tmp then
62966: LD_VAR 0 2
62970: NOT
62971: IFFALSE 62975
// exit ;
62973: GO 63004
// for i in tmp do
62975: LD_ADDR_VAR 0 1
62979: PUSH
62980: LD_VAR 0 2
62984: PUSH
62985: FOR_IN
62986: IFFALSE 63002
// SetLives ( i , 1 ) ;
62988: LD_VAR 0 1
62992: PPUSH
62993: LD_INT 1
62995: PPUSH
62996: CALL_OW 234
63000: GO 62985
63002: POP
63003: POP
// end ;
63004: PPOPN 2
63006: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63007: LD_EXP 44
63011: PUSH
63012: LD_EXP 93
63016: AND
63017: IFFALSE 63304
63019: GO 63021
63021: DISABLE
63022: LD_INT 0
63024: PPUSH
63025: PPUSH
63026: PPUSH
// begin i := rand ( 1 , 7 ) ;
63027: LD_ADDR_VAR 0 1
63031: PUSH
63032: LD_INT 1
63034: PPUSH
63035: LD_INT 7
63037: PPUSH
63038: CALL_OW 12
63042: ST_TO_ADDR
// case i of 1 :
63043: LD_VAR 0 1
63047: PUSH
63048: LD_INT 1
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63056
63054: GO 63066
63056: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63057: LD_STRING earthquake(getX(game), 0, 32)
63059: PPUSH
63060: CALL_OW 559
63064: GO 63304
63066: LD_INT 2
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63074
63072: GO 63088
63074: POP
// begin ToLua ( displayStucuk(); ) ;
63075: LD_STRING displayStucuk();
63077: PPUSH
63078: CALL_OW 559
// ResetFog ;
63082: CALL_OW 335
// end ; 3 :
63086: GO 63304
63088: LD_INT 3
63090: DOUBLE
63091: EQUAL
63092: IFTRUE 63096
63094: GO 63200
63096: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63097: LD_ADDR_VAR 0 2
63101: PUSH
63102: LD_INT 22
63104: PUSH
63105: LD_OWVAR 2
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 25
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PPUSH
63128: CALL_OW 69
63132: ST_TO_ADDR
// if not tmp then
63133: LD_VAR 0 2
63137: NOT
63138: IFFALSE 63142
// exit ;
63140: GO 63304
// un := tmp [ rand ( 1 , tmp ) ] ;
63142: LD_ADDR_VAR 0 3
63146: PUSH
63147: LD_VAR 0 2
63151: PUSH
63152: LD_INT 1
63154: PPUSH
63155: LD_VAR 0 2
63159: PPUSH
63160: CALL_OW 12
63164: ARRAY
63165: ST_TO_ADDR
// if Crawls ( un ) then
63166: LD_VAR 0 3
63170: PPUSH
63171: CALL_OW 318
63175: IFFALSE 63186
// ComWalk ( un ) ;
63177: LD_VAR 0 3
63181: PPUSH
63182: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63186: LD_VAR 0 3
63190: PPUSH
63191: LD_INT 8
63193: PPUSH
63194: CALL_OW 336
// end ; 4 :
63198: GO 63304
63200: LD_INT 4
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63208
63206: GO 63282
63208: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63209: LD_ADDR_VAR 0 2
63213: PUSH
63214: LD_INT 22
63216: PUSH
63217: LD_OWVAR 2
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 30
63228: PUSH
63229: LD_INT 29
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PPUSH
63240: CALL_OW 69
63244: ST_TO_ADDR
// if not tmp then
63245: LD_VAR 0 2
63249: NOT
63250: IFFALSE 63254
// exit ;
63252: GO 63304
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63254: LD_VAR 0 2
63258: PUSH
63259: LD_INT 1
63261: ARRAY
63262: PPUSH
63263: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 1
63274: ARRAY
63275: PPUSH
63276: CALL_OW 65
// end ; 5 .. 7 :
63280: GO 63304
63282: LD_INT 5
63284: DOUBLE
63285: GREATEREQUAL
63286: IFFALSE 63294
63288: LD_INT 7
63290: DOUBLE
63291: LESSEQUAL
63292: IFTRUE 63296
63294: GO 63303
63296: POP
// StreamSibBomb ; end ;
63297: CALL 59541 0 0
63301: GO 63304
63303: POP
// end ;
63304: PPOPN 3
63306: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63307: LD_EXP 44
63311: PUSH
63312: LD_EXP 94
63316: AND
63317: IFFALSE 63473
63319: GO 63321
63321: DISABLE
63322: LD_INT 0
63324: PPUSH
63325: PPUSH
63326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63327: LD_ADDR_VAR 0 2
63331: PUSH
63332: LD_INT 81
63334: PUSH
63335: LD_OWVAR 2
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: LD_INT 21
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 21
63359: PUSH
63360: LD_INT 2
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PPUSH
63376: CALL_OW 69
63380: ST_TO_ADDR
// if not tmp then
63381: LD_VAR 0 2
63385: NOT
63386: IFFALSE 63390
// exit ;
63388: GO 63473
// p := 0 ;
63390: LD_ADDR_VAR 0 3
63394: PUSH
63395: LD_INT 0
63397: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63398: LD_INT 35
63400: PPUSH
63401: CALL_OW 67
// p := p + 1 ;
63405: LD_ADDR_VAR 0 3
63409: PUSH
63410: LD_VAR 0 3
63414: PUSH
63415: LD_INT 1
63417: PLUS
63418: ST_TO_ADDR
// for i in tmp do
63419: LD_ADDR_VAR 0 1
63423: PUSH
63424: LD_VAR 0 2
63428: PUSH
63429: FOR_IN
63430: IFFALSE 63461
// if GetLives ( i ) < 1000 then
63432: LD_VAR 0 1
63436: PPUSH
63437: CALL_OW 256
63441: PUSH
63442: LD_INT 1000
63444: LESS
63445: IFFALSE 63459
// SetLives ( i , 1000 ) ;
63447: LD_VAR 0 1
63451: PPUSH
63452: LD_INT 1000
63454: PPUSH
63455: CALL_OW 234
63459: GO 63429
63461: POP
63462: POP
// until p > 20 ;
63463: LD_VAR 0 3
63467: PUSH
63468: LD_INT 20
63470: GREATER
63471: IFFALSE 63398
// end ;
63473: PPOPN 3
63475: END
// every 0 0$1 trigger StreamModeActive and sTime do
63476: LD_EXP 44
63480: PUSH
63481: LD_EXP 95
63485: AND
63486: IFFALSE 63521
63488: GO 63490
63490: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63491: LD_INT 28
63493: PPUSH
63494: LD_OWVAR 2
63498: PPUSH
63499: LD_INT 2
63501: PPUSH
63502: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63506: LD_INT 30
63508: PPUSH
63509: LD_OWVAR 2
63513: PPUSH
63514: LD_INT 2
63516: PPUSH
63517: CALL_OW 322
// end ;
63521: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63522: LD_EXP 44
63526: PUSH
63527: LD_EXP 96
63531: AND
63532: IFFALSE 63653
63534: GO 63536
63536: DISABLE
63537: LD_INT 0
63539: PPUSH
63540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63541: LD_ADDR_VAR 0 2
63545: PUSH
63546: LD_INT 22
63548: PUSH
63549: LD_OWVAR 2
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 21
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 3
63570: PUSH
63571: LD_INT 23
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: PPUSH
63590: CALL_OW 69
63594: ST_TO_ADDR
// if not tmp then
63595: LD_VAR 0 2
63599: NOT
63600: IFFALSE 63604
// exit ;
63602: GO 63653
// for i in tmp do
63604: LD_ADDR_VAR 0 1
63608: PUSH
63609: LD_VAR 0 2
63613: PUSH
63614: FOR_IN
63615: IFFALSE 63651
// begin if Crawls ( i ) then
63617: LD_VAR 0 1
63621: PPUSH
63622: CALL_OW 318
63626: IFFALSE 63637
// ComWalk ( i ) ;
63628: LD_VAR 0 1
63632: PPUSH
63633: CALL_OW 138
// SetClass ( i , 2 ) ;
63637: LD_VAR 0 1
63641: PPUSH
63642: LD_INT 2
63644: PPUSH
63645: CALL_OW 336
// end ;
63649: GO 63614
63651: POP
63652: POP
// end ;
63653: PPOPN 2
63655: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63656: LD_EXP 44
63660: PUSH
63661: LD_EXP 97
63665: AND
63666: IFFALSE 63954
63668: GO 63670
63670: DISABLE
63671: LD_INT 0
63673: PPUSH
63674: PPUSH
63675: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63676: LD_OWVAR 2
63680: PPUSH
63681: LD_INT 9
63683: PPUSH
63684: LD_INT 1
63686: PPUSH
63687: LD_INT 1
63689: PPUSH
63690: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63694: LD_INT 9
63696: PPUSH
63697: LD_OWVAR 2
63701: PPUSH
63702: CALL_OW 343
// uc_side := 9 ;
63706: LD_ADDR_OWVAR 20
63710: PUSH
63711: LD_INT 9
63713: ST_TO_ADDR
// uc_nation := 2 ;
63714: LD_ADDR_OWVAR 21
63718: PUSH
63719: LD_INT 2
63721: ST_TO_ADDR
// hc_name := Dark Warrior ;
63722: LD_ADDR_OWVAR 26
63726: PUSH
63727: LD_STRING Dark Warrior
63729: ST_TO_ADDR
// hc_gallery :=  ;
63730: LD_ADDR_OWVAR 33
63734: PUSH
63735: LD_STRING 
63737: ST_TO_ADDR
// hc_noskilllimit := true ;
63738: LD_ADDR_OWVAR 76
63742: PUSH
63743: LD_INT 1
63745: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63746: LD_ADDR_OWVAR 31
63750: PUSH
63751: LD_INT 30
63753: PUSH
63754: LD_INT 30
63756: PUSH
63757: LD_INT 30
63759: PUSH
63760: LD_INT 30
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// un := CreateHuman ;
63769: LD_ADDR_VAR 0 3
63773: PUSH
63774: CALL_OW 44
63778: ST_TO_ADDR
// hc_noskilllimit := false ;
63779: LD_ADDR_OWVAR 76
63783: PUSH
63784: LD_INT 0
63786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63787: LD_VAR 0 3
63791: PPUSH
63792: LD_INT 1
63794: PPUSH
63795: CALL_OW 51
// ToLua ( playRanger() ) ;
63799: LD_STRING playRanger()
63801: PPUSH
63802: CALL_OW 559
// p := 0 ;
63806: LD_ADDR_VAR 0 2
63810: PUSH
63811: LD_INT 0
63813: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63814: LD_INT 35
63816: PPUSH
63817: CALL_OW 67
// p := p + 1 ;
63821: LD_ADDR_VAR 0 2
63825: PUSH
63826: LD_VAR 0 2
63830: PUSH
63831: LD_INT 1
63833: PLUS
63834: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63835: LD_VAR 0 3
63839: PPUSH
63840: CALL_OW 256
63844: PUSH
63845: LD_INT 1000
63847: LESS
63848: IFFALSE 63862
// SetLives ( un , 1000 ) ;
63850: LD_VAR 0 3
63854: PPUSH
63855: LD_INT 1000
63857: PPUSH
63858: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63862: LD_VAR 0 3
63866: PPUSH
63867: LD_INT 81
63869: PUSH
63870: LD_OWVAR 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 91
63881: PUSH
63882: LD_VAR 0 3
63886: PUSH
63887: LD_INT 30
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PPUSH
63899: CALL_OW 69
63903: PPUSH
63904: LD_VAR 0 3
63908: PPUSH
63909: CALL_OW 74
63913: PPUSH
63914: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63918: LD_VAR 0 2
63922: PUSH
63923: LD_INT 80
63925: GREATER
63926: PUSH
63927: LD_VAR 0 3
63931: PPUSH
63932: CALL_OW 301
63936: OR
63937: IFFALSE 63814
// if un then
63939: LD_VAR 0 3
63943: IFFALSE 63954
// RemoveUnit ( un ) ;
63945: LD_VAR 0 3
63949: PPUSH
63950: CALL_OW 64
// end ;
63954: PPOPN 3
63956: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63957: LD_EXP 98
63961: IFFALSE 64077
63963: GO 63965
63965: DISABLE
63966: LD_INT 0
63968: PPUSH
63969: PPUSH
63970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63971: LD_ADDR_VAR 0 2
63975: PUSH
63976: LD_INT 81
63978: PUSH
63979: LD_OWVAR 2
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 21
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PPUSH
64002: CALL_OW 69
64006: ST_TO_ADDR
// ToLua ( playComputer() ) ;
64007: LD_STRING playComputer()
64009: PPUSH
64010: CALL_OW 559
// if not tmp then
64014: LD_VAR 0 2
64018: NOT
64019: IFFALSE 64023
// exit ;
64021: GO 64077
// for i in tmp do
64023: LD_ADDR_VAR 0 1
64027: PUSH
64028: LD_VAR 0 2
64032: PUSH
64033: FOR_IN
64034: IFFALSE 64075
// for j := 1 to 4 do
64036: LD_ADDR_VAR 0 3
64040: PUSH
64041: DOUBLE
64042: LD_INT 1
64044: DEC
64045: ST_TO_ADDR
64046: LD_INT 4
64048: PUSH
64049: FOR_TO
64050: IFFALSE 64071
// SetSkill ( i , j , 10 ) ;
64052: LD_VAR 0 1
64056: PPUSH
64057: LD_VAR 0 3
64061: PPUSH
64062: LD_INT 10
64064: PPUSH
64065: CALL_OW 237
64069: GO 64049
64071: POP
64072: POP
64073: GO 64033
64075: POP
64076: POP
// end ;
64077: PPOPN 3
64079: END
// every 0 0$1 trigger s30 do var i , tmp ;
64080: LD_EXP 99
64084: IFFALSE 64153
64086: GO 64088
64088: DISABLE
64089: LD_INT 0
64091: PPUSH
64092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64093: LD_ADDR_VAR 0 2
64097: PUSH
64098: LD_INT 22
64100: PUSH
64101: LD_OWVAR 2
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PPUSH
64110: CALL_OW 69
64114: ST_TO_ADDR
// if not tmp then
64115: LD_VAR 0 2
64119: NOT
64120: IFFALSE 64124
// exit ;
64122: GO 64153
// for i in tmp do
64124: LD_ADDR_VAR 0 1
64128: PUSH
64129: LD_VAR 0 2
64133: PUSH
64134: FOR_IN
64135: IFFALSE 64151
// SetLives ( i , 300 ) ;
64137: LD_VAR 0 1
64141: PPUSH
64142: LD_INT 300
64144: PPUSH
64145: CALL_OW 234
64149: GO 64134
64151: POP
64152: POP
// end ;
64153: PPOPN 2
64155: END
// every 0 0$1 trigger s60 do var i , tmp ;
64156: LD_EXP 100
64160: IFFALSE 64229
64162: GO 64164
64164: DISABLE
64165: LD_INT 0
64167: PPUSH
64168: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64169: LD_ADDR_VAR 0 2
64173: PUSH
64174: LD_INT 22
64176: PUSH
64177: LD_OWVAR 2
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PPUSH
64186: CALL_OW 69
64190: ST_TO_ADDR
// if not tmp then
64191: LD_VAR 0 2
64195: NOT
64196: IFFALSE 64200
// exit ;
64198: GO 64229
// for i in tmp do
64200: LD_ADDR_VAR 0 1
64204: PUSH
64205: LD_VAR 0 2
64209: PUSH
64210: FOR_IN
64211: IFFALSE 64227
// SetLives ( i , 600 ) ;
64213: LD_VAR 0 1
64217: PPUSH
64218: LD_INT 600
64220: PPUSH
64221: CALL_OW 234
64225: GO 64210
64227: POP
64228: POP
// end ;
64229: PPOPN 2
64231: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64232: LD_INT 0
64234: PPUSH
// case cmd of 301 :
64235: LD_VAR 0 1
64239: PUSH
64240: LD_INT 301
64242: DOUBLE
64243: EQUAL
64244: IFTRUE 64248
64246: GO 64280
64248: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64249: LD_VAR 0 6
64253: PPUSH
64254: LD_VAR 0 7
64258: PPUSH
64259: LD_VAR 0 8
64263: PPUSH
64264: LD_VAR 0 4
64268: PPUSH
64269: LD_VAR 0 5
64273: PPUSH
64274: CALL 65489 0 5
64278: GO 64401
64280: LD_INT 302
64282: DOUBLE
64283: EQUAL
64284: IFTRUE 64288
64286: GO 64325
64288: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64289: LD_VAR 0 6
64293: PPUSH
64294: LD_VAR 0 7
64298: PPUSH
64299: LD_VAR 0 8
64303: PPUSH
64304: LD_VAR 0 9
64308: PPUSH
64309: LD_VAR 0 4
64313: PPUSH
64314: LD_VAR 0 5
64318: PPUSH
64319: CALL 65580 0 6
64323: GO 64401
64325: LD_INT 303
64327: DOUBLE
64328: EQUAL
64329: IFTRUE 64333
64331: GO 64370
64333: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64334: LD_VAR 0 6
64338: PPUSH
64339: LD_VAR 0 7
64343: PPUSH
64344: LD_VAR 0 8
64348: PPUSH
64349: LD_VAR 0 9
64353: PPUSH
64354: LD_VAR 0 4
64358: PPUSH
64359: LD_VAR 0 5
64363: PPUSH
64364: CALL 64406 0 6
64368: GO 64401
64370: LD_INT 304
64372: DOUBLE
64373: EQUAL
64374: IFTRUE 64378
64376: GO 64400
64378: POP
// hHackTeleport ( unit , x , y ) ; end ;
64379: LD_VAR 0 2
64383: PPUSH
64384: LD_VAR 0 4
64388: PPUSH
64389: LD_VAR 0 5
64393: PPUSH
64394: CALL 66173 0 3
64398: GO 64401
64400: POP
// end ;
64401: LD_VAR 0 12
64405: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64406: LD_INT 0
64408: PPUSH
64409: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64410: LD_VAR 0 1
64414: PUSH
64415: LD_INT 1
64417: LESS
64418: PUSH
64419: LD_VAR 0 1
64423: PUSH
64424: LD_INT 3
64426: GREATER
64427: OR
64428: PUSH
64429: LD_VAR 0 5
64433: PPUSH
64434: LD_VAR 0 6
64438: PPUSH
64439: CALL_OW 428
64443: OR
64444: IFFALSE 64448
// exit ;
64446: GO 65176
// uc_side := your_side ;
64448: LD_ADDR_OWVAR 20
64452: PUSH
64453: LD_OWVAR 2
64457: ST_TO_ADDR
// uc_nation := nation ;
64458: LD_ADDR_OWVAR 21
64462: PUSH
64463: LD_VAR 0 1
64467: ST_TO_ADDR
// bc_level = 1 ;
64468: LD_ADDR_OWVAR 43
64472: PUSH
64473: LD_INT 1
64475: ST_TO_ADDR
// case btype of 1 :
64476: LD_VAR 0 2
64480: PUSH
64481: LD_INT 1
64483: DOUBLE
64484: EQUAL
64485: IFTRUE 64489
64487: GO 64500
64489: POP
// bc_type := b_depot ; 2 :
64490: LD_ADDR_OWVAR 42
64494: PUSH
64495: LD_INT 0
64497: ST_TO_ADDR
64498: GO 65120
64500: LD_INT 2
64502: DOUBLE
64503: EQUAL
64504: IFTRUE 64508
64506: GO 64519
64508: POP
// bc_type := b_warehouse ; 3 :
64509: LD_ADDR_OWVAR 42
64513: PUSH
64514: LD_INT 1
64516: ST_TO_ADDR
64517: GO 65120
64519: LD_INT 3
64521: DOUBLE
64522: EQUAL
64523: IFTRUE 64527
64525: GO 64538
64527: POP
// bc_type := b_lab ; 4 .. 9 :
64528: LD_ADDR_OWVAR 42
64532: PUSH
64533: LD_INT 6
64535: ST_TO_ADDR
64536: GO 65120
64538: LD_INT 4
64540: DOUBLE
64541: GREATEREQUAL
64542: IFFALSE 64550
64544: LD_INT 9
64546: DOUBLE
64547: LESSEQUAL
64548: IFTRUE 64552
64550: GO 64612
64552: POP
// begin bc_type := b_lab_half ;
64553: LD_ADDR_OWVAR 42
64557: PUSH
64558: LD_INT 7
64560: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64561: LD_ADDR_OWVAR 44
64565: PUSH
64566: LD_INT 10
64568: PUSH
64569: LD_INT 11
64571: PUSH
64572: LD_INT 12
64574: PUSH
64575: LD_INT 15
64577: PUSH
64578: LD_INT 14
64580: PUSH
64581: LD_INT 13
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: PUSH
64592: LD_VAR 0 2
64596: PUSH
64597: LD_INT 3
64599: MINUS
64600: ARRAY
64601: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
64602: LD_ADDR_OWVAR 45
64606: PUSH
64607: LD_INT 9
64609: ST_TO_ADDR
// end ; 10 .. 13 :
64610: GO 65120
64612: LD_INT 10
64614: DOUBLE
64615: GREATEREQUAL
64616: IFFALSE 64624
64618: LD_INT 13
64620: DOUBLE
64621: LESSEQUAL
64622: IFTRUE 64626
64624: GO 64703
64626: POP
// begin bc_type := b_lab_full ;
64627: LD_ADDR_OWVAR 42
64631: PUSH
64632: LD_INT 8
64634: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64635: LD_ADDR_OWVAR 44
64639: PUSH
64640: LD_INT 10
64642: PUSH
64643: LD_INT 12
64645: PUSH
64646: LD_INT 14
64648: PUSH
64649: LD_INT 13
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: PUSH
64658: LD_VAR 0 2
64662: PUSH
64663: LD_INT 9
64665: MINUS
64666: ARRAY
64667: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64668: LD_ADDR_OWVAR 45
64672: PUSH
64673: LD_INT 11
64675: PUSH
64676: LD_INT 15
64678: PUSH
64679: LD_INT 12
64681: PUSH
64682: LD_INT 15
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: PUSH
64691: LD_VAR 0 2
64695: PUSH
64696: LD_INT 9
64698: MINUS
64699: ARRAY
64700: ST_TO_ADDR
// end ; 14 :
64701: GO 65120
64703: LD_INT 14
64705: DOUBLE
64706: EQUAL
64707: IFTRUE 64711
64709: GO 64722
64711: POP
// bc_type := b_workshop ; 15 :
64712: LD_ADDR_OWVAR 42
64716: PUSH
64717: LD_INT 2
64719: ST_TO_ADDR
64720: GO 65120
64722: LD_INT 15
64724: DOUBLE
64725: EQUAL
64726: IFTRUE 64730
64728: GO 64741
64730: POP
// bc_type := b_factory ; 16 :
64731: LD_ADDR_OWVAR 42
64735: PUSH
64736: LD_INT 3
64738: ST_TO_ADDR
64739: GO 65120
64741: LD_INT 16
64743: DOUBLE
64744: EQUAL
64745: IFTRUE 64749
64747: GO 64760
64749: POP
// bc_type := b_ext_gun ; 17 :
64750: LD_ADDR_OWVAR 42
64754: PUSH
64755: LD_INT 17
64757: ST_TO_ADDR
64758: GO 65120
64760: LD_INT 17
64762: DOUBLE
64763: EQUAL
64764: IFTRUE 64768
64766: GO 64796
64768: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64769: LD_ADDR_OWVAR 42
64773: PUSH
64774: LD_INT 19
64776: PUSH
64777: LD_INT 23
64779: PUSH
64780: LD_INT 19
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: LIST
64787: PUSH
64788: LD_VAR 0 1
64792: ARRAY
64793: ST_TO_ADDR
64794: GO 65120
64796: LD_INT 18
64798: DOUBLE
64799: EQUAL
64800: IFTRUE 64804
64802: GO 64815
64804: POP
// bc_type := b_ext_radar ; 19 :
64805: LD_ADDR_OWVAR 42
64809: PUSH
64810: LD_INT 20
64812: ST_TO_ADDR
64813: GO 65120
64815: LD_INT 19
64817: DOUBLE
64818: EQUAL
64819: IFTRUE 64823
64821: GO 64834
64823: POP
// bc_type := b_ext_radio ; 20 :
64824: LD_ADDR_OWVAR 42
64828: PUSH
64829: LD_INT 22
64831: ST_TO_ADDR
64832: GO 65120
64834: LD_INT 20
64836: DOUBLE
64837: EQUAL
64838: IFTRUE 64842
64840: GO 64853
64842: POP
// bc_type := b_ext_siberium ; 21 :
64843: LD_ADDR_OWVAR 42
64847: PUSH
64848: LD_INT 21
64850: ST_TO_ADDR
64851: GO 65120
64853: LD_INT 21
64855: DOUBLE
64856: EQUAL
64857: IFTRUE 64861
64859: GO 64872
64861: POP
// bc_type := b_ext_computer ; 22 :
64862: LD_ADDR_OWVAR 42
64866: PUSH
64867: LD_INT 24
64869: ST_TO_ADDR
64870: GO 65120
64872: LD_INT 22
64874: DOUBLE
64875: EQUAL
64876: IFTRUE 64880
64878: GO 64891
64880: POP
// bc_type := b_ext_track ; 23 :
64881: LD_ADDR_OWVAR 42
64885: PUSH
64886: LD_INT 16
64888: ST_TO_ADDR
64889: GO 65120
64891: LD_INT 23
64893: DOUBLE
64894: EQUAL
64895: IFTRUE 64899
64897: GO 64910
64899: POP
// bc_type := b_ext_laser ; 24 :
64900: LD_ADDR_OWVAR 42
64904: PUSH
64905: LD_INT 25
64907: ST_TO_ADDR
64908: GO 65120
64910: LD_INT 24
64912: DOUBLE
64913: EQUAL
64914: IFTRUE 64918
64916: GO 64929
64918: POP
// bc_type := b_control_tower ; 25 :
64919: LD_ADDR_OWVAR 42
64923: PUSH
64924: LD_INT 36
64926: ST_TO_ADDR
64927: GO 65120
64929: LD_INT 25
64931: DOUBLE
64932: EQUAL
64933: IFTRUE 64937
64935: GO 64948
64937: POP
// bc_type := b_breastwork ; 26 :
64938: LD_ADDR_OWVAR 42
64942: PUSH
64943: LD_INT 31
64945: ST_TO_ADDR
64946: GO 65120
64948: LD_INT 26
64950: DOUBLE
64951: EQUAL
64952: IFTRUE 64956
64954: GO 64967
64956: POP
// bc_type := b_bunker ; 27 :
64957: LD_ADDR_OWVAR 42
64961: PUSH
64962: LD_INT 32
64964: ST_TO_ADDR
64965: GO 65120
64967: LD_INT 27
64969: DOUBLE
64970: EQUAL
64971: IFTRUE 64975
64973: GO 64986
64975: POP
// bc_type := b_turret ; 28 :
64976: LD_ADDR_OWVAR 42
64980: PUSH
64981: LD_INT 33
64983: ST_TO_ADDR
64984: GO 65120
64986: LD_INT 28
64988: DOUBLE
64989: EQUAL
64990: IFTRUE 64994
64992: GO 65005
64994: POP
// bc_type := b_armoury ; 29 :
64995: LD_ADDR_OWVAR 42
64999: PUSH
65000: LD_INT 4
65002: ST_TO_ADDR
65003: GO 65120
65005: LD_INT 29
65007: DOUBLE
65008: EQUAL
65009: IFTRUE 65013
65011: GO 65024
65013: POP
// bc_type := b_barracks ; 30 :
65014: LD_ADDR_OWVAR 42
65018: PUSH
65019: LD_INT 5
65021: ST_TO_ADDR
65022: GO 65120
65024: LD_INT 30
65026: DOUBLE
65027: EQUAL
65028: IFTRUE 65032
65030: GO 65043
65032: POP
// bc_type := b_solar_power ; 31 :
65033: LD_ADDR_OWVAR 42
65037: PUSH
65038: LD_INT 27
65040: ST_TO_ADDR
65041: GO 65120
65043: LD_INT 31
65045: DOUBLE
65046: EQUAL
65047: IFTRUE 65051
65049: GO 65062
65051: POP
// bc_type := b_oil_power ; 32 :
65052: LD_ADDR_OWVAR 42
65056: PUSH
65057: LD_INT 26
65059: ST_TO_ADDR
65060: GO 65120
65062: LD_INT 32
65064: DOUBLE
65065: EQUAL
65066: IFTRUE 65070
65068: GO 65081
65070: POP
// bc_type := b_siberite_power ; 33 :
65071: LD_ADDR_OWVAR 42
65075: PUSH
65076: LD_INT 28
65078: ST_TO_ADDR
65079: GO 65120
65081: LD_INT 33
65083: DOUBLE
65084: EQUAL
65085: IFTRUE 65089
65087: GO 65100
65089: POP
// bc_type := b_oil_mine ; 34 :
65090: LD_ADDR_OWVAR 42
65094: PUSH
65095: LD_INT 29
65097: ST_TO_ADDR
65098: GO 65120
65100: LD_INT 34
65102: DOUBLE
65103: EQUAL
65104: IFTRUE 65108
65106: GO 65119
65108: POP
// bc_type := b_siberite_mine ; end ;
65109: LD_ADDR_OWVAR 42
65113: PUSH
65114: LD_INT 30
65116: ST_TO_ADDR
65117: GO 65120
65119: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
65120: LD_ADDR_VAR 0 8
65124: PUSH
65125: LD_VAR 0 5
65129: PPUSH
65130: LD_VAR 0 6
65134: PPUSH
65135: LD_VAR 0 3
65139: PPUSH
65140: CALL_OW 47
65144: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
65145: LD_OWVAR 42
65149: PUSH
65150: LD_INT 32
65152: PUSH
65153: LD_INT 33
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: IN
65160: IFFALSE 65176
// PlaceWeaponTurret ( b , weapon ) ;
65162: LD_VAR 0 8
65166: PPUSH
65167: LD_VAR 0 4
65171: PPUSH
65172: CALL_OW 431
// end ;
65176: LD_VAR 0 7
65180: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65181: LD_INT 0
65183: PPUSH
65184: PPUSH
65185: PPUSH
65186: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65187: LD_ADDR_VAR 0 4
65191: PUSH
65192: LD_INT 22
65194: PUSH
65195: LD_OWVAR 2
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: LD_INT 30
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 30
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PPUSH
65236: CALL_OW 69
65240: ST_TO_ADDR
// if not tmp then
65241: LD_VAR 0 4
65245: NOT
65246: IFFALSE 65250
// exit ;
65248: GO 65309
// for i in tmp do
65250: LD_ADDR_VAR 0 2
65254: PUSH
65255: LD_VAR 0 4
65259: PUSH
65260: FOR_IN
65261: IFFALSE 65307
// for j = 1 to 3 do
65263: LD_ADDR_VAR 0 3
65267: PUSH
65268: DOUBLE
65269: LD_INT 1
65271: DEC
65272: ST_TO_ADDR
65273: LD_INT 3
65275: PUSH
65276: FOR_TO
65277: IFFALSE 65303
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65279: LD_VAR 0 2
65283: PPUSH
65284: CALL_OW 274
65288: PPUSH
65289: LD_VAR 0 3
65293: PPUSH
65294: LD_INT 99999
65296: PPUSH
65297: CALL_OW 277
65301: GO 65276
65303: POP
65304: POP
65305: GO 65260
65307: POP
65308: POP
// end ;
65309: LD_VAR 0 1
65313: RET
// export function hHackSetLevel10 ; var i , j ; begin
65314: LD_INT 0
65316: PPUSH
65317: PPUSH
65318: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65319: LD_ADDR_VAR 0 2
65323: PUSH
65324: LD_INT 21
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PPUSH
65334: CALL_OW 69
65338: PUSH
65339: FOR_IN
65340: IFFALSE 65392
// if IsSelected ( i ) then
65342: LD_VAR 0 2
65346: PPUSH
65347: CALL_OW 306
65351: IFFALSE 65390
// begin for j := 1 to 4 do
65353: LD_ADDR_VAR 0 3
65357: PUSH
65358: DOUBLE
65359: LD_INT 1
65361: DEC
65362: ST_TO_ADDR
65363: LD_INT 4
65365: PUSH
65366: FOR_TO
65367: IFFALSE 65388
// SetSkill ( i , j , 10 ) ;
65369: LD_VAR 0 2
65373: PPUSH
65374: LD_VAR 0 3
65378: PPUSH
65379: LD_INT 10
65381: PPUSH
65382: CALL_OW 237
65386: GO 65366
65388: POP
65389: POP
// end ;
65390: GO 65339
65392: POP
65393: POP
// end ;
65394: LD_VAR 0 1
65398: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65399: LD_INT 0
65401: PPUSH
65402: PPUSH
65403: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65404: LD_ADDR_VAR 0 2
65408: PUSH
65409: LD_INT 22
65411: PUSH
65412: LD_OWVAR 2
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 21
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PPUSH
65435: CALL_OW 69
65439: PUSH
65440: FOR_IN
65441: IFFALSE 65482
// begin for j := 1 to 4 do
65443: LD_ADDR_VAR 0 3
65447: PUSH
65448: DOUBLE
65449: LD_INT 1
65451: DEC
65452: ST_TO_ADDR
65453: LD_INT 4
65455: PUSH
65456: FOR_TO
65457: IFFALSE 65478
// SetSkill ( i , j , 10 ) ;
65459: LD_VAR 0 2
65463: PPUSH
65464: LD_VAR 0 3
65468: PPUSH
65469: LD_INT 10
65471: PPUSH
65472: CALL_OW 237
65476: GO 65456
65478: POP
65479: POP
// end ;
65480: GO 65440
65482: POP
65483: POP
// end ;
65484: LD_VAR 0 1
65488: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65489: LD_INT 0
65491: PPUSH
// uc_side := your_side ;
65492: LD_ADDR_OWVAR 20
65496: PUSH
65497: LD_OWVAR 2
65501: ST_TO_ADDR
// uc_nation := nation ;
65502: LD_ADDR_OWVAR 21
65506: PUSH
65507: LD_VAR 0 1
65511: ST_TO_ADDR
// InitHc ;
65512: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65516: LD_INT 0
65518: PPUSH
65519: LD_VAR 0 2
65523: PPUSH
65524: LD_VAR 0 3
65528: PPUSH
65529: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65533: LD_VAR 0 4
65537: PPUSH
65538: LD_VAR 0 5
65542: PPUSH
65543: CALL_OW 428
65547: PUSH
65548: LD_INT 0
65550: EQUAL
65551: IFFALSE 65575
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65553: CALL_OW 44
65557: PPUSH
65558: LD_VAR 0 4
65562: PPUSH
65563: LD_VAR 0 5
65567: PPUSH
65568: LD_INT 1
65570: PPUSH
65571: CALL_OW 48
// end ;
65575: LD_VAR 0 6
65579: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65580: LD_INT 0
65582: PPUSH
65583: PPUSH
// uc_side := your_side ;
65584: LD_ADDR_OWVAR 20
65588: PUSH
65589: LD_OWVAR 2
65593: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65594: LD_VAR 0 1
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: LD_INT 3
65607: PUSH
65608: LD_INT 4
65610: PUSH
65611: LD_INT 5
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: IN
65621: IFFALSE 65633
// uc_nation := nation_american else
65623: LD_ADDR_OWVAR 21
65627: PUSH
65628: LD_INT 1
65630: ST_TO_ADDR
65631: GO 65676
// if chassis in [ 11 , 12 , 13 , 14 ] then
65633: LD_VAR 0 1
65637: PUSH
65638: LD_INT 11
65640: PUSH
65641: LD_INT 12
65643: PUSH
65644: LD_INT 13
65646: PUSH
65647: LD_INT 14
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: IN
65656: IFFALSE 65668
// uc_nation := nation_arabian else
65658: LD_ADDR_OWVAR 21
65662: PUSH
65663: LD_INT 2
65665: ST_TO_ADDR
65666: GO 65676
// uc_nation := nation_russian ;
65668: LD_ADDR_OWVAR 21
65672: PUSH
65673: LD_INT 3
65675: ST_TO_ADDR
// vc_chassis := chassis ;
65676: LD_ADDR_OWVAR 37
65680: PUSH
65681: LD_VAR 0 1
65685: ST_TO_ADDR
// vc_engine := engine ;
65686: LD_ADDR_OWVAR 39
65690: PUSH
65691: LD_VAR 0 2
65695: ST_TO_ADDR
// vc_control := control ;
65696: LD_ADDR_OWVAR 38
65700: PUSH
65701: LD_VAR 0 3
65705: ST_TO_ADDR
// vc_weapon := weapon ;
65706: LD_ADDR_OWVAR 40
65710: PUSH
65711: LD_VAR 0 4
65715: ST_TO_ADDR
// un := CreateVehicle ;
65716: LD_ADDR_VAR 0 8
65720: PUSH
65721: CALL_OW 45
65725: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65726: LD_VAR 0 8
65730: PPUSH
65731: LD_INT 0
65733: PPUSH
65734: LD_INT 5
65736: PPUSH
65737: CALL_OW 12
65741: PPUSH
65742: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65746: LD_VAR 0 8
65750: PPUSH
65751: LD_VAR 0 5
65755: PPUSH
65756: LD_VAR 0 6
65760: PPUSH
65761: LD_INT 1
65763: PPUSH
65764: CALL_OW 48
// end ;
65768: LD_VAR 0 7
65772: RET
// export hInvincible ; every 1 do
65773: GO 65775
65775: DISABLE
// hInvincible := [ ] ;
65776: LD_ADDR_EXP 101
65780: PUSH
65781: EMPTY
65782: ST_TO_ADDR
65783: END
// every 10 do var i ;
65784: GO 65786
65786: DISABLE
65787: LD_INT 0
65789: PPUSH
// begin enable ;
65790: ENABLE
// if not hInvincible then
65791: LD_EXP 101
65795: NOT
65796: IFFALSE 65800
// exit ;
65798: GO 65844
// for i in hInvincible do
65800: LD_ADDR_VAR 0 1
65804: PUSH
65805: LD_EXP 101
65809: PUSH
65810: FOR_IN
65811: IFFALSE 65842
// if GetLives ( i ) < 1000 then
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 256
65822: PUSH
65823: LD_INT 1000
65825: LESS
65826: IFFALSE 65840
// SetLives ( i , 1000 ) ;
65828: LD_VAR 0 1
65832: PPUSH
65833: LD_INT 1000
65835: PPUSH
65836: CALL_OW 234
65840: GO 65810
65842: POP
65843: POP
// end ;
65844: PPOPN 1
65846: END
// export function hHackInvincible ; var i ; begin
65847: LD_INT 0
65849: PPUSH
65850: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65851: LD_ADDR_VAR 0 2
65855: PUSH
65856: LD_INT 2
65858: PUSH
65859: LD_INT 21
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 21
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: PPUSH
65884: CALL_OW 69
65888: PUSH
65889: FOR_IN
65890: IFFALSE 65951
// if IsSelected ( i ) then
65892: LD_VAR 0 2
65896: PPUSH
65897: CALL_OW 306
65901: IFFALSE 65949
// begin if i in hInvincible then
65903: LD_VAR 0 2
65907: PUSH
65908: LD_EXP 101
65912: IN
65913: IFFALSE 65933
// hInvincible := hInvincible diff i else
65915: LD_ADDR_EXP 101
65919: PUSH
65920: LD_EXP 101
65924: PUSH
65925: LD_VAR 0 2
65929: DIFF
65930: ST_TO_ADDR
65931: GO 65949
// hInvincible := hInvincible union i ;
65933: LD_ADDR_EXP 101
65937: PUSH
65938: LD_EXP 101
65942: PUSH
65943: LD_VAR 0 2
65947: UNION
65948: ST_TO_ADDR
// end ;
65949: GO 65889
65951: POP
65952: POP
// end ;
65953: LD_VAR 0 1
65957: RET
// export function hHackInvisible ; var i , j ; begin
65958: LD_INT 0
65960: PPUSH
65961: PPUSH
65962: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65963: LD_ADDR_VAR 0 2
65967: PUSH
65968: LD_INT 21
65970: PUSH
65971: LD_INT 1
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PPUSH
65978: CALL_OW 69
65982: PUSH
65983: FOR_IN
65984: IFFALSE 66008
// if IsSelected ( i ) then
65986: LD_VAR 0 2
65990: PPUSH
65991: CALL_OW 306
65995: IFFALSE 66006
// ComForceInvisible ( i ) ;
65997: LD_VAR 0 2
66001: PPUSH
66002: CALL_OW 496
66006: GO 65983
66008: POP
66009: POP
// end ;
66010: LD_VAR 0 1
66014: RET
// export function hHackChangeYourSide ; begin
66015: LD_INT 0
66017: PPUSH
// if your_side = 8 then
66018: LD_OWVAR 2
66022: PUSH
66023: LD_INT 8
66025: EQUAL
66026: IFFALSE 66038
// your_side := 0 else
66028: LD_ADDR_OWVAR 2
66032: PUSH
66033: LD_INT 0
66035: ST_TO_ADDR
66036: GO 66052
// your_side := your_side + 1 ;
66038: LD_ADDR_OWVAR 2
66042: PUSH
66043: LD_OWVAR 2
66047: PUSH
66048: LD_INT 1
66050: PLUS
66051: ST_TO_ADDR
// end ;
66052: LD_VAR 0 1
66056: RET
// export function hHackChangeUnitSide ; var i , j ; begin
66057: LD_INT 0
66059: PPUSH
66060: PPUSH
66061: PPUSH
// for i in all_units do
66062: LD_ADDR_VAR 0 2
66066: PUSH
66067: LD_OWVAR 3
66071: PUSH
66072: FOR_IN
66073: IFFALSE 66151
// if IsSelected ( i ) then
66075: LD_VAR 0 2
66079: PPUSH
66080: CALL_OW 306
66084: IFFALSE 66149
// begin j := GetSide ( i ) ;
66086: LD_ADDR_VAR 0 3
66090: PUSH
66091: LD_VAR 0 2
66095: PPUSH
66096: CALL_OW 255
66100: ST_TO_ADDR
// if j = 8 then
66101: LD_VAR 0 3
66105: PUSH
66106: LD_INT 8
66108: EQUAL
66109: IFFALSE 66121
// j := 0 else
66111: LD_ADDR_VAR 0 3
66115: PUSH
66116: LD_INT 0
66118: ST_TO_ADDR
66119: GO 66135
// j := j + 1 ;
66121: LD_ADDR_VAR 0 3
66125: PUSH
66126: LD_VAR 0 3
66130: PUSH
66131: LD_INT 1
66133: PLUS
66134: ST_TO_ADDR
// SetSide ( i , j ) ;
66135: LD_VAR 0 2
66139: PPUSH
66140: LD_VAR 0 3
66144: PPUSH
66145: CALL_OW 235
// end ;
66149: GO 66072
66151: POP
66152: POP
// end ;
66153: LD_VAR 0 1
66157: RET
// export function hHackFog ; begin
66158: LD_INT 0
66160: PPUSH
// FogOff ( true ) ;
66161: LD_INT 1
66163: PPUSH
66164: CALL_OW 344
// end ;
66168: LD_VAR 0 1
66172: RET
// export function hHackTeleport ( unit , x , y ) ; begin
66173: LD_INT 0
66175: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
66176: LD_VAR 0 1
66180: PPUSH
66181: LD_VAR 0 2
66185: PPUSH
66186: LD_VAR 0 3
66190: PPUSH
66191: LD_INT 1
66193: PPUSH
66194: LD_INT 1
66196: PPUSH
66197: CALL_OW 483
// CenterOnXY ( x , y ) ;
66201: LD_VAR 0 2
66205: PPUSH
66206: LD_VAR 0 3
66210: PPUSH
66211: CALL_OW 84
// end ;
66215: LD_VAR 0 4
66219: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66220: LD_INT 0
66222: PPUSH
66223: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66224: LD_VAR 0 1
66228: NOT
66229: PUSH
66230: LD_VAR 0 2
66234: PPUSH
66235: LD_VAR 0 3
66239: PPUSH
66240: CALL_OW 488
66244: NOT
66245: OR
66246: PUSH
66247: LD_VAR 0 1
66251: PPUSH
66252: CALL_OW 266
66256: PUSH
66257: LD_INT 3
66259: NONEQUAL
66260: PUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: CALL_OW 247
66270: PUSH
66271: LD_INT 1
66273: EQUAL
66274: NOT
66275: AND
66276: OR
66277: IFFALSE 66281
// exit ;
66279: GO 66430
// if GetType ( factory ) = unit_human then
66281: LD_VAR 0 1
66285: PPUSH
66286: CALL_OW 247
66290: PUSH
66291: LD_INT 1
66293: EQUAL
66294: IFFALSE 66311
// factory := IsInUnit ( factory ) ;
66296: LD_ADDR_VAR 0 1
66300: PUSH
66301: LD_VAR 0 1
66305: PPUSH
66306: CALL_OW 310
66310: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66311: LD_VAR 0 1
66315: PPUSH
66316: CALL_OW 266
66320: PUSH
66321: LD_INT 3
66323: NONEQUAL
66324: IFFALSE 66328
// exit ;
66326: GO 66430
// if HexInfo ( x , y ) = factory then
66328: LD_VAR 0 2
66332: PPUSH
66333: LD_VAR 0 3
66337: PPUSH
66338: CALL_OW 428
66342: PUSH
66343: LD_VAR 0 1
66347: EQUAL
66348: IFFALSE 66375
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66350: LD_ADDR_EXP 102
66354: PUSH
66355: LD_EXP 102
66359: PPUSH
66360: LD_VAR 0 1
66364: PPUSH
66365: LD_INT 0
66367: PPUSH
66368: CALL_OW 1
66372: ST_TO_ADDR
66373: GO 66426
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66375: LD_ADDR_EXP 102
66379: PUSH
66380: LD_EXP 102
66384: PPUSH
66385: LD_VAR 0 1
66389: PPUSH
66390: LD_VAR 0 1
66394: PPUSH
66395: CALL_OW 255
66399: PUSH
66400: LD_VAR 0 1
66404: PUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_VAR 0 3
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: PPUSH
66421: CALL_OW 1
66425: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66426: CALL 66435 0 0
// end ;
66430: LD_VAR 0 4
66434: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66435: LD_INT 0
66437: PPUSH
66438: PPUSH
66439: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66440: LD_STRING resetFactoryWaypoint();
66442: PPUSH
66443: CALL_OW 559
// if factoryWaypoints then
66447: LD_EXP 102
66451: IFFALSE 66577
// begin list := PrepareArray ( factoryWaypoints ) ;
66453: LD_ADDR_VAR 0 3
66457: PUSH
66458: LD_EXP 102
66462: PPUSH
66463: CALL 50331 0 1
66467: ST_TO_ADDR
// for i := 1 to list do
66468: LD_ADDR_VAR 0 2
66472: PUSH
66473: DOUBLE
66474: LD_INT 1
66476: DEC
66477: ST_TO_ADDR
66478: LD_VAR 0 3
66482: PUSH
66483: FOR_TO
66484: IFFALSE 66575
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66486: LD_STRING setFactoryWaypointXY(
66488: PUSH
66489: LD_VAR 0 3
66493: PUSH
66494: LD_VAR 0 2
66498: ARRAY
66499: PUSH
66500: LD_INT 1
66502: ARRAY
66503: STR
66504: PUSH
66505: LD_STRING ,
66507: STR
66508: PUSH
66509: LD_VAR 0 3
66513: PUSH
66514: LD_VAR 0 2
66518: ARRAY
66519: PUSH
66520: LD_INT 2
66522: ARRAY
66523: STR
66524: PUSH
66525: LD_STRING ,
66527: STR
66528: PUSH
66529: LD_VAR 0 3
66533: PUSH
66534: LD_VAR 0 2
66538: ARRAY
66539: PUSH
66540: LD_INT 3
66542: ARRAY
66543: STR
66544: PUSH
66545: LD_STRING ,
66547: STR
66548: PUSH
66549: LD_VAR 0 3
66553: PUSH
66554: LD_VAR 0 2
66558: ARRAY
66559: PUSH
66560: LD_INT 4
66562: ARRAY
66563: STR
66564: PUSH
66565: LD_STRING )
66567: STR
66568: PPUSH
66569: CALL_OW 559
66573: GO 66483
66575: POP
66576: POP
// end ; end ;
66577: LD_VAR 0 1
66581: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66582: LD_INT 0
66584: PPUSH
// if HexInfo ( x , y ) = warehouse then
66585: LD_VAR 0 2
66589: PPUSH
66590: LD_VAR 0 3
66594: PPUSH
66595: CALL_OW 428
66599: PUSH
66600: LD_VAR 0 1
66604: EQUAL
66605: IFFALSE 66632
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66607: LD_ADDR_EXP 103
66611: PUSH
66612: LD_EXP 103
66616: PPUSH
66617: LD_VAR 0 1
66621: PPUSH
66622: LD_INT 0
66624: PPUSH
66625: CALL_OW 1
66629: ST_TO_ADDR
66630: GO 66683
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66632: LD_ADDR_EXP 103
66636: PUSH
66637: LD_EXP 103
66641: PPUSH
66642: LD_VAR 0 1
66646: PPUSH
66647: LD_VAR 0 1
66651: PPUSH
66652: CALL_OW 255
66656: PUSH
66657: LD_VAR 0 1
66661: PUSH
66662: LD_VAR 0 2
66666: PUSH
66667: LD_VAR 0 3
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: PPUSH
66678: CALL_OW 1
66682: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66683: CALL 66692 0 0
// end ;
66687: LD_VAR 0 4
66691: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66692: LD_INT 0
66694: PPUSH
66695: PPUSH
66696: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66697: LD_STRING resetWarehouseGatheringPoints();
66699: PPUSH
66700: CALL_OW 559
// if warehouseGatheringPoints then
66704: LD_EXP 103
66708: IFFALSE 66834
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66710: LD_ADDR_VAR 0 3
66714: PUSH
66715: LD_EXP 103
66719: PPUSH
66720: CALL 50331 0 1
66724: ST_TO_ADDR
// for i := 1 to list do
66725: LD_ADDR_VAR 0 2
66729: PUSH
66730: DOUBLE
66731: LD_INT 1
66733: DEC
66734: ST_TO_ADDR
66735: LD_VAR 0 3
66739: PUSH
66740: FOR_TO
66741: IFFALSE 66832
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66743: LD_STRING setWarehouseGatheringPointXY(
66745: PUSH
66746: LD_VAR 0 3
66750: PUSH
66751: LD_VAR 0 2
66755: ARRAY
66756: PUSH
66757: LD_INT 1
66759: ARRAY
66760: STR
66761: PUSH
66762: LD_STRING ,
66764: STR
66765: PUSH
66766: LD_VAR 0 3
66770: PUSH
66771: LD_VAR 0 2
66775: ARRAY
66776: PUSH
66777: LD_INT 2
66779: ARRAY
66780: STR
66781: PUSH
66782: LD_STRING ,
66784: STR
66785: PUSH
66786: LD_VAR 0 3
66790: PUSH
66791: LD_VAR 0 2
66795: ARRAY
66796: PUSH
66797: LD_INT 3
66799: ARRAY
66800: STR
66801: PUSH
66802: LD_STRING ,
66804: STR
66805: PUSH
66806: LD_VAR 0 3
66810: PUSH
66811: LD_VAR 0 2
66815: ARRAY
66816: PUSH
66817: LD_INT 4
66819: ARRAY
66820: STR
66821: PUSH
66822: LD_STRING )
66824: STR
66825: PPUSH
66826: CALL_OW 559
66830: GO 66740
66832: POP
66833: POP
// end ; end ;
66834: LD_VAR 0 1
66838: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66839: LD_EXP 103
66843: IFFALSE 67528
66845: GO 66847
66847: DISABLE
66848: LD_INT 0
66850: PPUSH
66851: PPUSH
66852: PPUSH
66853: PPUSH
66854: PPUSH
66855: PPUSH
66856: PPUSH
66857: PPUSH
66858: PPUSH
// begin enable ;
66859: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66860: LD_ADDR_VAR 0 3
66864: PUSH
66865: LD_EXP 103
66869: PPUSH
66870: CALL 50331 0 1
66874: ST_TO_ADDR
// if not list then
66875: LD_VAR 0 3
66879: NOT
66880: IFFALSE 66884
// exit ;
66882: GO 67528
// for i := 1 to list do
66884: LD_ADDR_VAR 0 1
66888: PUSH
66889: DOUBLE
66890: LD_INT 1
66892: DEC
66893: ST_TO_ADDR
66894: LD_VAR 0 3
66898: PUSH
66899: FOR_TO
66900: IFFALSE 67526
// begin depot := list [ i ] [ 2 ] ;
66902: LD_ADDR_VAR 0 8
66906: PUSH
66907: LD_VAR 0 3
66911: PUSH
66912: LD_VAR 0 1
66916: ARRAY
66917: PUSH
66918: LD_INT 2
66920: ARRAY
66921: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: LD_VAR 0 3
66931: PUSH
66932: LD_VAR 0 1
66936: ARRAY
66937: PUSH
66938: LD_INT 1
66940: ARRAY
66941: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66942: LD_VAR 0 8
66946: PPUSH
66947: CALL_OW 301
66951: PUSH
66952: LD_VAR 0 5
66956: PUSH
66957: LD_VAR 0 8
66961: PPUSH
66962: CALL_OW 255
66966: NONEQUAL
66967: OR
66968: IFFALSE 66997
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66970: LD_ADDR_EXP 103
66974: PUSH
66975: LD_EXP 103
66979: PPUSH
66980: LD_VAR 0 8
66984: PPUSH
66985: LD_INT 0
66987: PPUSH
66988: CALL_OW 1
66992: ST_TO_ADDR
// exit ;
66993: POP
66994: POP
66995: GO 67528
// end ; x := list [ i ] [ 3 ] ;
66997: LD_ADDR_VAR 0 6
67001: PUSH
67002: LD_VAR 0 3
67006: PUSH
67007: LD_VAR 0 1
67011: ARRAY
67012: PUSH
67013: LD_INT 3
67015: ARRAY
67016: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
67017: LD_ADDR_VAR 0 7
67021: PUSH
67022: LD_VAR 0 3
67026: PUSH
67027: LD_VAR 0 1
67031: ARRAY
67032: PUSH
67033: LD_INT 4
67035: ARRAY
67036: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
67037: LD_ADDR_VAR 0 9
67041: PUSH
67042: LD_VAR 0 6
67046: PPUSH
67047: LD_VAR 0 7
67051: PPUSH
67052: LD_INT 16
67054: PPUSH
67055: CALL 48915 0 3
67059: ST_TO_ADDR
// if not cratesNearbyPoint then
67060: LD_VAR 0 9
67064: NOT
67065: IFFALSE 67071
// exit ;
67067: POP
67068: POP
67069: GO 67528
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
67071: LD_ADDR_VAR 0 4
67075: PUSH
67076: LD_INT 22
67078: PUSH
67079: LD_VAR 0 5
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 3
67090: PUSH
67091: LD_INT 60
67093: PUSH
67094: EMPTY
67095: LIST
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 91
67103: PUSH
67104: LD_VAR 0 8
67108: PUSH
67109: LD_INT 6
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: LD_INT 25
67122: PUSH
67123: LD_INT 2
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 25
67132: PUSH
67133: LD_INT 16
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: PPUSH
67151: CALL_OW 69
67155: PUSH
67156: LD_VAR 0 8
67160: PPUSH
67161: CALL_OW 313
67165: PPUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 60
67171: PUSH
67172: EMPTY
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: LD_INT 25
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 25
67194: PUSH
67195: LD_INT 16
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PPUSH
67211: CALL_OW 72
67215: UNION
67216: ST_TO_ADDR
// if tmp then
67217: LD_VAR 0 4
67221: IFFALSE 67301
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67223: LD_ADDR_VAR 0 4
67227: PUSH
67228: LD_VAR 0 4
67232: PPUSH
67233: LD_INT 3
67235: PPUSH
67236: CALL 46884 0 2
67240: ST_TO_ADDR
// for j in tmp do
67241: LD_ADDR_VAR 0 2
67245: PUSH
67246: LD_VAR 0 4
67250: PUSH
67251: FOR_IN
67252: IFFALSE 67295
// begin if IsInUnit ( j ) then
67254: LD_VAR 0 2
67258: PPUSH
67259: CALL_OW 310
67263: IFFALSE 67274
// ComExit ( j ) ;
67265: LD_VAR 0 2
67269: PPUSH
67270: CALL 46967 0 1
// AddComCollect ( j , x , y ) ;
67274: LD_VAR 0 2
67278: PPUSH
67279: LD_VAR 0 6
67283: PPUSH
67284: LD_VAR 0 7
67288: PPUSH
67289: CALL_OW 177
// end ;
67293: GO 67251
67295: POP
67296: POP
// exit ;
67297: POP
67298: POP
67299: GO 67528
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67301: LD_ADDR_VAR 0 4
67305: PUSH
67306: LD_INT 22
67308: PUSH
67309: LD_VAR 0 5
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 91
67320: PUSH
67321: LD_VAR 0 8
67325: PUSH
67326: LD_INT 8
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 2
67336: PUSH
67337: LD_INT 34
67339: PUSH
67340: LD_INT 12
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 34
67349: PUSH
67350: LD_INT 51
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 34
67359: PUSH
67360: LD_INT 32
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 34
67369: PUSH
67370: LD_INT 89
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: PPUSH
67389: CALL_OW 69
67393: ST_TO_ADDR
// if tmp then
67394: LD_VAR 0 4
67398: IFFALSE 67524
// begin for j in tmp do
67400: LD_ADDR_VAR 0 2
67404: PUSH
67405: LD_VAR 0 4
67409: PUSH
67410: FOR_IN
67411: IFFALSE 67522
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67413: LD_VAR 0 2
67417: PPUSH
67418: CALL_OW 262
67422: PUSH
67423: LD_INT 3
67425: EQUAL
67426: PUSH
67427: LD_VAR 0 2
67431: PPUSH
67432: CALL_OW 261
67436: PUSH
67437: LD_INT 20
67439: GREATER
67440: OR
67441: PUSH
67442: LD_VAR 0 2
67446: PPUSH
67447: CALL_OW 314
67451: NOT
67452: AND
67453: PUSH
67454: LD_VAR 0 2
67458: PPUSH
67459: CALL_OW 263
67463: PUSH
67464: LD_INT 1
67466: NONEQUAL
67467: PUSH
67468: LD_VAR 0 2
67472: PPUSH
67473: CALL_OW 311
67477: OR
67478: AND
67479: IFFALSE 67520
// begin ComCollect ( j , x , y ) ;
67481: LD_VAR 0 2
67485: PPUSH
67486: LD_VAR 0 6
67490: PPUSH
67491: LD_VAR 0 7
67495: PPUSH
67496: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67500: LD_VAR 0 2
67504: PPUSH
67505: LD_VAR 0 8
67509: PPUSH
67510: CALL_OW 172
// exit ;
67514: POP
67515: POP
67516: POP
67517: POP
67518: GO 67528
// end ;
67520: GO 67410
67522: POP
67523: POP
// end ; end ;
67524: GO 66899
67526: POP
67527: POP
// end ; end_of_file
67528: PPOPN 9
67530: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67531: LD_VAR 0 1
67535: PUSH
67536: LD_INT 200
67538: DOUBLE
67539: GREATEREQUAL
67540: IFFALSE 67548
67542: LD_INT 299
67544: DOUBLE
67545: LESSEQUAL
67546: IFTRUE 67550
67548: GO 67582
67550: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67551: LD_VAR 0 1
67555: PPUSH
67556: LD_VAR 0 2
67560: PPUSH
67561: LD_VAR 0 3
67565: PPUSH
67566: LD_VAR 0 4
67570: PPUSH
67571: LD_VAR 0 5
67575: PPUSH
67576: CALL 68236 0 5
67580: GO 67659
67582: LD_INT 300
67584: DOUBLE
67585: GREATEREQUAL
67586: IFFALSE 67594
67588: LD_INT 399
67590: DOUBLE
67591: LESSEQUAL
67592: IFTRUE 67596
67594: GO 67658
67596: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67597: LD_VAR 0 1
67601: PPUSH
67602: LD_VAR 0 2
67606: PPUSH
67607: LD_VAR 0 3
67611: PPUSH
67612: LD_VAR 0 4
67616: PPUSH
67617: LD_VAR 0 5
67621: PPUSH
67622: LD_VAR 0 6
67626: PPUSH
67627: LD_VAR 0 7
67631: PPUSH
67632: LD_VAR 0 8
67636: PPUSH
67637: LD_VAR 0 9
67641: PPUSH
67642: LD_VAR 0 10
67646: PPUSH
67647: LD_VAR 0 11
67651: PPUSH
67652: CALL 64232 0 11
67656: GO 67659
67658: POP
// end ;
67659: PPOPN 11
67661: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67662: LD_VAR 0 1
67666: PPUSH
67667: LD_VAR 0 2
67671: PPUSH
67672: LD_VAR 0 3
67676: PPUSH
67677: LD_VAR 0 4
67681: PPUSH
67682: LD_VAR 0 5
67686: PPUSH
67687: CALL 67744 0 5
// end ; end_of_file
67691: PPOPN 5
67693: END
// export function SOS_UnitDestroyed ( un ) ; begin
67694: LD_INT 0
67696: PPUSH
// ComRadiation ( un ) ;
67697: LD_VAR 0 1
67701: PPUSH
67702: CALL 68640 0 1
// end ;
67706: LD_VAR 0 2
67710: RET
// export function SOS_UnitKamikazed ( un ) ; begin
67711: LD_INT 0
67713: PPUSH
// ComRadiation ( un ) ;
67714: LD_VAR 0 1
67718: PPUSH
67719: CALL 68640 0 1
// end ;
67723: LD_VAR 0 2
67727: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67728: LD_INT 0
67730: PPUSH
// end ;
67731: LD_VAR 0 4
67735: RET
// export function SOS_Command ( cmd ) ; begin
67736: LD_INT 0
67738: PPUSH
// end ;
67739: LD_VAR 0 2
67743: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67744: LD_INT 0
67746: PPUSH
// end ;
67747: LD_VAR 0 6
67751: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
67752: LD_INT 0
67754: PPUSH
67755: PPUSH
67756: PPUSH
67757: PPUSH
// if not vehicle or not factory then
67758: LD_VAR 0 1
67762: NOT
67763: PUSH
67764: LD_VAR 0 2
67768: NOT
67769: OR
67770: IFFALSE 67774
// exit ;
67772: GO 68231
// if factoryWaypoints >= factory then
67774: LD_EXP 102
67778: PUSH
67779: LD_VAR 0 2
67783: GREATEREQUAL
67784: IFFALSE 68231
// if factoryWaypoints [ factory ] then
67786: LD_EXP 102
67790: PUSH
67791: LD_VAR 0 2
67795: ARRAY
67796: IFFALSE 68231
// begin if GetControl ( vehicle ) = control_manual then
67798: LD_VAR 0 1
67802: PPUSH
67803: CALL_OW 263
67807: PUSH
67808: LD_INT 1
67810: EQUAL
67811: IFFALSE 68118
// begin driver := IsDrivenBy ( vehicle ) ;
67813: LD_ADDR_VAR 0 5
67817: PUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: CALL_OW 311
67827: ST_TO_ADDR
// tag := GetTag ( driver ) ;
67828: LD_ADDR_VAR 0 4
67832: PUSH
67833: LD_VAR 0 5
67837: PPUSH
67838: CALL_OW 110
67842: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
67843: LD_VAR 0 4
67847: PUSH
67848: LD_INT 501
67850: EQUAL
67851: PUSH
67852: LD_VAR 0 1
67856: PPUSH
67857: CALL_OW 110
67861: PUSH
67862: LD_INT 501
67864: EQUAL
67865: OR
67866: IFFALSE 67870
// exit ;
67868: GO 68231
// if not HasTask ( driver ) then
67870: LD_VAR 0 5
67874: PPUSH
67875: CALL_OW 314
67879: NOT
67880: IFFALSE 68116
// begin SetTag ( driver , tDriver ) ;
67882: LD_VAR 0 5
67886: PPUSH
67887: LD_INT 501
67889: PPUSH
67890: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
67894: LD_VAR 0 1
67898: PPUSH
67899: LD_INT 501
67901: PPUSH
67902: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67906: LD_ADDR_VAR 0 6
67910: PUSH
67911: LD_EXP 102
67915: PUSH
67916: LD_VAR 0 2
67920: ARRAY
67921: PUSH
67922: LD_INT 3
67924: ARRAY
67925: PPUSH
67926: LD_EXP 102
67930: PUSH
67931: LD_VAR 0 2
67935: ARRAY
67936: PUSH
67937: LD_INT 4
67939: ARRAY
67940: PPUSH
67941: CALL_OW 428
67945: ST_TO_ADDR
// if hex then
67946: LD_VAR 0 6
67950: IFFALSE 67968
// ComMoveUnit ( driver , hex ) else
67952: LD_VAR 0 5
67956: PPUSH
67957: LD_VAR 0 6
67961: PPUSH
67962: CALL_OW 112
67966: GO 68007
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67968: LD_VAR 0 5
67972: PPUSH
67973: LD_EXP 102
67977: PUSH
67978: LD_VAR 0 2
67982: ARRAY
67983: PUSH
67984: LD_INT 3
67986: ARRAY
67987: PPUSH
67988: LD_EXP 102
67992: PUSH
67993: LD_VAR 0 2
67997: ARRAY
67998: PUSH
67999: LD_INT 4
68001: ARRAY
68002: PPUSH
68003: CALL_OW 111
// AddComExitVehicle ( driver ) ;
68007: LD_VAR 0 5
68011: PPUSH
68012: CALL_OW 181
// if Multiplayer then
68016: LD_OWVAR 4
68020: IFFALSE 68069
// begin repeat wait ( 10 ) ;
68022: LD_INT 10
68024: PPUSH
68025: CALL_OW 67
// until not IsInUnit ( driver ) ;
68029: LD_VAR 0 5
68033: PPUSH
68034: CALL_OW 310
68038: NOT
68039: IFFALSE 68022
// if not HasTask ( driver ) then
68041: LD_VAR 0 5
68045: PPUSH
68046: CALL_OW 314
68050: NOT
68051: IFFALSE 68067
// ComEnterUnit ( driver , factory ) ;
68053: LD_VAR 0 5
68057: PPUSH
68058: LD_VAR 0 2
68062: PPUSH
68063: CALL_OW 120
// end else
68067: GO 68083
// AddComEnterUnit ( driver , factory ) ;
68069: LD_VAR 0 5
68073: PPUSH
68074: LD_VAR 0 2
68078: PPUSH
68079: CALL_OW 180
// wait ( 0 0$1 ) ;
68083: LD_INT 35
68085: PPUSH
68086: CALL_OW 67
// SetTag ( driver , tag ) ;
68090: LD_VAR 0 5
68094: PPUSH
68095: LD_VAR 0 4
68099: PPUSH
68100: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
68104: LD_VAR 0 1
68108: PPUSH
68109: LD_INT 0
68111: PPUSH
68112: CALL_OW 109
// end ; end else
68116: GO 68231
// if GetControl ( vehicle ) = control_remote then
68118: LD_VAR 0 1
68122: PPUSH
68123: CALL_OW 263
68127: PUSH
68128: LD_INT 2
68130: EQUAL
68131: IFFALSE 68192
// begin wait ( 0 0$2 ) ;
68133: LD_INT 70
68135: PPUSH
68136: CALL_OW 67
// if Connect ( vehicle ) then
68140: LD_VAR 0 1
68144: PPUSH
68145: CALL 17186 0 1
68149: IFFALSE 68190
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68151: LD_VAR 0 1
68155: PPUSH
68156: LD_EXP 102
68160: PUSH
68161: LD_VAR 0 2
68165: ARRAY
68166: PUSH
68167: LD_INT 3
68169: ARRAY
68170: PPUSH
68171: LD_EXP 102
68175: PUSH
68176: LD_VAR 0 2
68180: ARRAY
68181: PUSH
68182: LD_INT 4
68184: ARRAY
68185: PPUSH
68186: CALL_OW 171
// end else
68190: GO 68231
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68192: LD_VAR 0 1
68196: PPUSH
68197: LD_EXP 102
68201: PUSH
68202: LD_VAR 0 2
68206: ARRAY
68207: PUSH
68208: LD_INT 3
68210: ARRAY
68211: PPUSH
68212: LD_EXP 102
68216: PUSH
68217: LD_VAR 0 2
68221: ARRAY
68222: PUSH
68223: LD_INT 4
68225: ARRAY
68226: PPUSH
68227: CALL_OW 171
// end ; end ;
68231: LD_VAR 0 3
68235: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68236: LD_INT 0
68238: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68239: LD_VAR 0 1
68243: PUSH
68244: LD_INT 250
68246: EQUAL
68247: PUSH
68248: LD_VAR 0 2
68252: PPUSH
68253: CALL_OW 264
68257: PUSH
68258: LD_INT 81
68260: EQUAL
68261: AND
68262: IFFALSE 68283
// MinerPlaceMine ( unit , x , y ) ;
68264: LD_VAR 0 2
68268: PPUSH
68269: LD_VAR 0 4
68273: PPUSH
68274: LD_VAR 0 5
68278: PPUSH
68279: CALL 71375 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68283: LD_VAR 0 1
68287: PUSH
68288: LD_INT 251
68290: EQUAL
68291: PUSH
68292: LD_VAR 0 2
68296: PPUSH
68297: CALL_OW 264
68301: PUSH
68302: LD_INT 81
68304: EQUAL
68305: AND
68306: IFFALSE 68327
// MinerDetonateMine ( unit , x , y ) ;
68308: LD_VAR 0 2
68312: PPUSH
68313: LD_VAR 0 4
68317: PPUSH
68318: LD_VAR 0 5
68322: PPUSH
68323: CALL 71650 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68327: LD_VAR 0 1
68331: PUSH
68332: LD_INT 252
68334: EQUAL
68335: PUSH
68336: LD_VAR 0 2
68340: PPUSH
68341: CALL_OW 264
68345: PUSH
68346: LD_INT 81
68348: EQUAL
68349: AND
68350: IFFALSE 68371
// MinerCreateMinefield ( unit , x , y ) ;
68352: LD_VAR 0 2
68356: PPUSH
68357: LD_VAR 0 4
68361: PPUSH
68362: LD_VAR 0 5
68366: PPUSH
68367: CALL 72067 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68371: LD_VAR 0 1
68375: PUSH
68376: LD_INT 253
68378: EQUAL
68379: PUSH
68380: LD_VAR 0 2
68384: PPUSH
68385: CALL_OW 257
68389: PUSH
68390: LD_INT 5
68392: EQUAL
68393: AND
68394: IFFALSE 68415
// ComBinocular ( unit , x , y ) ;
68396: LD_VAR 0 2
68400: PPUSH
68401: LD_VAR 0 4
68405: PPUSH
68406: LD_VAR 0 5
68410: PPUSH
68411: CALL 72436 0 3
// if selectedUnit then
68415: LD_VAR 0 3
68419: IFFALSE 68475
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68421: LD_VAR 0 1
68425: PUSH
68426: LD_INT 254
68428: EQUAL
68429: PUSH
68430: LD_VAR 0 2
68434: PPUSH
68435: CALL_OW 264
68439: PUSH
68440: LD_INT 99
68442: EQUAL
68443: AND
68444: PUSH
68445: LD_VAR 0 3
68449: PPUSH
68450: CALL_OW 263
68454: PUSH
68455: LD_INT 3
68457: EQUAL
68458: AND
68459: IFFALSE 68475
// HackDestroyVehicle ( unit , selectedUnit ) ;
68461: LD_VAR 0 2
68465: PPUSH
68466: LD_VAR 0 3
68470: PPUSH
68471: CALL 70739 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68475: LD_VAR 0 1
68479: PUSH
68480: LD_INT 255
68482: EQUAL
68483: PUSH
68484: LD_VAR 0 2
68488: PPUSH
68489: CALL_OW 264
68493: PUSH
68494: LD_INT 14
68496: PUSH
68497: LD_INT 53
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: IN
68504: AND
68505: PUSH
68506: LD_VAR 0 4
68510: PPUSH
68511: LD_VAR 0 5
68515: PPUSH
68516: CALL_OW 488
68520: AND
68521: IFFALSE 68545
// CutTreeXYR ( unit , x , y , 12 ) ;
68523: LD_VAR 0 2
68527: PPUSH
68528: LD_VAR 0 4
68532: PPUSH
68533: LD_VAR 0 5
68537: PPUSH
68538: LD_INT 12
68540: PPUSH
68541: CALL 68736 0 4
// if cmd = 256 then
68545: LD_VAR 0 1
68549: PUSH
68550: LD_INT 256
68552: EQUAL
68553: IFFALSE 68574
// SetFactoryWaypoint ( unit , x , y ) ;
68555: LD_VAR 0 2
68559: PPUSH
68560: LD_VAR 0 4
68564: PPUSH
68565: LD_VAR 0 5
68569: PPUSH
68570: CALL 66220 0 3
// if cmd = 257 then
68574: LD_VAR 0 1
68578: PUSH
68579: LD_INT 257
68581: EQUAL
68582: IFFALSE 68603
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68584: LD_VAR 0 2
68588: PPUSH
68589: LD_VAR 0 4
68593: PPUSH
68594: LD_VAR 0 5
68598: PPUSH
68599: CALL 66582 0 3
// if cmd = 258 then
68603: LD_VAR 0 1
68607: PUSH
68608: LD_INT 258
68610: EQUAL
68611: IFFALSE 68635
// BurnTreeXYR ( unit , x , y , 8 ) ;
68613: LD_VAR 0 2
68617: PPUSH
68618: LD_VAR 0 4
68622: PPUSH
68623: LD_VAR 0 5
68627: PPUSH
68628: LD_INT 8
68630: PPUSH
68631: CALL 69130 0 4
// end ;
68635: LD_VAR 0 6
68639: RET
// export function ComRadiation ( un ) ; var eff ; begin
68640: LD_INT 0
68642: PPUSH
68643: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
68644: LD_VAR 0 1
68648: PPUSH
68649: CALL_OW 264
68653: PUSH
68654: LD_INT 91
68656: NONEQUAL
68657: IFFALSE 68661
// exit ;
68659: GO 68731
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68661: LD_INT 68
68663: PPUSH
68664: LD_VAR 0 1
68668: PPUSH
68669: CALL_OW 255
68673: PPUSH
68674: CALL_OW 321
68678: PUSH
68679: LD_INT 2
68681: EQUAL
68682: IFFALSE 68694
// eff := 70 else
68684: LD_ADDR_VAR 0 3
68688: PUSH
68689: LD_INT 70
68691: ST_TO_ADDR
68692: GO 68702
// eff := 30 ;
68694: LD_ADDR_VAR 0 3
68698: PUSH
68699: LD_INT 30
68701: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68702: LD_VAR 0 1
68706: PPUSH
68707: CALL_OW 250
68711: PPUSH
68712: LD_VAR 0 1
68716: PPUSH
68717: CALL_OW 251
68721: PPUSH
68722: LD_VAR 0 3
68726: PPUSH
68727: CALL_OW 495
// end ;
68731: LD_VAR 0 2
68735: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68736: LD_INT 0
68738: PPUSH
68739: PPUSH
68740: PPUSH
68741: PPUSH
68742: PPUSH
68743: PPUSH
68744: PPUSH
68745: PPUSH
68746: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
68747: LD_VAR 0 1
68751: PPUSH
68752: CALL_OW 302
68756: NOT
68757: PUSH
68758: LD_VAR 0 2
68762: PPUSH
68763: LD_VAR 0 3
68767: PPUSH
68768: CALL_OW 488
68772: NOT
68773: OR
68774: PUSH
68775: LD_VAR 0 4
68779: NOT
68780: OR
68781: IFFALSE 68785
// exit ;
68783: GO 69125
// list := [ ] ;
68785: LD_ADDR_VAR 0 13
68789: PUSH
68790: EMPTY
68791: ST_TO_ADDR
// if x - r < 0 then
68792: LD_VAR 0 2
68796: PUSH
68797: LD_VAR 0 4
68801: MINUS
68802: PUSH
68803: LD_INT 0
68805: LESS
68806: IFFALSE 68818
// min_x := 0 else
68808: LD_ADDR_VAR 0 7
68812: PUSH
68813: LD_INT 0
68815: ST_TO_ADDR
68816: GO 68834
// min_x := x - r ;
68818: LD_ADDR_VAR 0 7
68822: PUSH
68823: LD_VAR 0 2
68827: PUSH
68828: LD_VAR 0 4
68832: MINUS
68833: ST_TO_ADDR
// if y - r < 0 then
68834: LD_VAR 0 3
68838: PUSH
68839: LD_VAR 0 4
68843: MINUS
68844: PUSH
68845: LD_INT 0
68847: LESS
68848: IFFALSE 68860
// min_y := 0 else
68850: LD_ADDR_VAR 0 8
68854: PUSH
68855: LD_INT 0
68857: ST_TO_ADDR
68858: GO 68876
// min_y := y - r ;
68860: LD_ADDR_VAR 0 8
68864: PUSH
68865: LD_VAR 0 3
68869: PUSH
68870: LD_VAR 0 4
68874: MINUS
68875: ST_TO_ADDR
// max_x := x + r ;
68876: LD_ADDR_VAR 0 9
68880: PUSH
68881: LD_VAR 0 2
68885: PUSH
68886: LD_VAR 0 4
68890: PLUS
68891: ST_TO_ADDR
// max_y := y + r ;
68892: LD_ADDR_VAR 0 10
68896: PUSH
68897: LD_VAR 0 3
68901: PUSH
68902: LD_VAR 0 4
68906: PLUS
68907: ST_TO_ADDR
// for _x = min_x to max_x do
68908: LD_ADDR_VAR 0 11
68912: PUSH
68913: DOUBLE
68914: LD_VAR 0 7
68918: DEC
68919: ST_TO_ADDR
68920: LD_VAR 0 9
68924: PUSH
68925: FOR_TO
68926: IFFALSE 69043
// for _y = min_y to max_y do
68928: LD_ADDR_VAR 0 12
68932: PUSH
68933: DOUBLE
68934: LD_VAR 0 8
68938: DEC
68939: ST_TO_ADDR
68940: LD_VAR 0 10
68944: PUSH
68945: FOR_TO
68946: IFFALSE 69039
// begin if not ValidHex ( _x , _y ) then
68948: LD_VAR 0 11
68952: PPUSH
68953: LD_VAR 0 12
68957: PPUSH
68958: CALL_OW 488
68962: NOT
68963: IFFALSE 68967
// continue ;
68965: GO 68945
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68967: LD_VAR 0 11
68971: PPUSH
68972: LD_VAR 0 12
68976: PPUSH
68977: CALL_OW 351
68981: PUSH
68982: LD_VAR 0 11
68986: PPUSH
68987: LD_VAR 0 12
68991: PPUSH
68992: CALL_OW 554
68996: AND
68997: IFFALSE 69037
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68999: LD_ADDR_VAR 0 13
69003: PUSH
69004: LD_VAR 0 13
69008: PPUSH
69009: LD_VAR 0 13
69013: PUSH
69014: LD_INT 1
69016: PLUS
69017: PPUSH
69018: LD_VAR 0 11
69022: PUSH
69023: LD_VAR 0 12
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PPUSH
69032: CALL_OW 2
69036: ST_TO_ADDR
// end ;
69037: GO 68945
69039: POP
69040: POP
69041: GO 68925
69043: POP
69044: POP
// if not list then
69045: LD_VAR 0 13
69049: NOT
69050: IFFALSE 69054
// exit ;
69052: GO 69125
// for i in list do
69054: LD_ADDR_VAR 0 6
69058: PUSH
69059: LD_VAR 0 13
69063: PUSH
69064: FOR_IN
69065: IFFALSE 69123
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69067: LD_VAR 0 1
69071: PPUSH
69072: LD_STRING M
69074: PUSH
69075: LD_VAR 0 6
69079: PUSH
69080: LD_INT 1
69082: ARRAY
69083: PUSH
69084: LD_VAR 0 6
69088: PUSH
69089: LD_INT 2
69091: ARRAY
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: PUSH
69114: EMPTY
69115: LIST
69116: PPUSH
69117: CALL_OW 447
69121: GO 69064
69123: POP
69124: POP
// end ;
69125: LD_VAR 0 5
69129: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
69130: LD_INT 0
69132: PPUSH
69133: PPUSH
69134: PPUSH
69135: PPUSH
69136: PPUSH
69137: PPUSH
69138: PPUSH
69139: PPUSH
69140: PPUSH
69141: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
69142: LD_VAR 0 1
69146: PPUSH
69147: CALL_OW 302
69151: NOT
69152: PUSH
69153: LD_VAR 0 2
69157: PPUSH
69158: LD_VAR 0 3
69162: PPUSH
69163: CALL_OW 488
69167: NOT
69168: OR
69169: PUSH
69170: LD_VAR 0 4
69174: NOT
69175: OR
69176: IFFALSE 69180
// exit ;
69178: GO 69693
// list := [ ] ;
69180: LD_ADDR_VAR 0 13
69184: PUSH
69185: EMPTY
69186: ST_TO_ADDR
// if x - r < 0 then
69187: LD_VAR 0 2
69191: PUSH
69192: LD_VAR 0 4
69196: MINUS
69197: PUSH
69198: LD_INT 0
69200: LESS
69201: IFFALSE 69213
// min_x := 0 else
69203: LD_ADDR_VAR 0 7
69207: PUSH
69208: LD_INT 0
69210: ST_TO_ADDR
69211: GO 69229
// min_x := x - r ;
69213: LD_ADDR_VAR 0 7
69217: PUSH
69218: LD_VAR 0 2
69222: PUSH
69223: LD_VAR 0 4
69227: MINUS
69228: ST_TO_ADDR
// if y - r < 0 then
69229: LD_VAR 0 3
69233: PUSH
69234: LD_VAR 0 4
69238: MINUS
69239: PUSH
69240: LD_INT 0
69242: LESS
69243: IFFALSE 69255
// min_y := 0 else
69245: LD_ADDR_VAR 0 8
69249: PUSH
69250: LD_INT 0
69252: ST_TO_ADDR
69253: GO 69271
// min_y := y - r ;
69255: LD_ADDR_VAR 0 8
69259: PUSH
69260: LD_VAR 0 3
69264: PUSH
69265: LD_VAR 0 4
69269: MINUS
69270: ST_TO_ADDR
// max_x := x + r ;
69271: LD_ADDR_VAR 0 9
69275: PUSH
69276: LD_VAR 0 2
69280: PUSH
69281: LD_VAR 0 4
69285: PLUS
69286: ST_TO_ADDR
// max_y := y + r ;
69287: LD_ADDR_VAR 0 10
69291: PUSH
69292: LD_VAR 0 3
69296: PUSH
69297: LD_VAR 0 4
69301: PLUS
69302: ST_TO_ADDR
// for _x = min_x to max_x do
69303: LD_ADDR_VAR 0 11
69307: PUSH
69308: DOUBLE
69309: LD_VAR 0 7
69313: DEC
69314: ST_TO_ADDR
69315: LD_VAR 0 9
69319: PUSH
69320: FOR_TO
69321: IFFALSE 69438
// for _y = min_y to max_y do
69323: LD_ADDR_VAR 0 12
69327: PUSH
69328: DOUBLE
69329: LD_VAR 0 8
69333: DEC
69334: ST_TO_ADDR
69335: LD_VAR 0 10
69339: PUSH
69340: FOR_TO
69341: IFFALSE 69434
// begin if not ValidHex ( _x , _y ) then
69343: LD_VAR 0 11
69347: PPUSH
69348: LD_VAR 0 12
69352: PPUSH
69353: CALL_OW 488
69357: NOT
69358: IFFALSE 69362
// continue ;
69360: GO 69340
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69362: LD_VAR 0 11
69366: PPUSH
69367: LD_VAR 0 12
69371: PPUSH
69372: CALL_OW 351
69376: PUSH
69377: LD_VAR 0 11
69381: PPUSH
69382: LD_VAR 0 12
69386: PPUSH
69387: CALL_OW 554
69391: AND
69392: IFFALSE 69432
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69394: LD_ADDR_VAR 0 13
69398: PUSH
69399: LD_VAR 0 13
69403: PPUSH
69404: LD_VAR 0 13
69408: PUSH
69409: LD_INT 1
69411: PLUS
69412: PPUSH
69413: LD_VAR 0 11
69417: PUSH
69418: LD_VAR 0 12
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PPUSH
69427: CALL_OW 2
69431: ST_TO_ADDR
// end ;
69432: GO 69340
69434: POP
69435: POP
69436: GO 69320
69438: POP
69439: POP
// if not list then
69440: LD_VAR 0 13
69444: NOT
69445: IFFALSE 69449
// exit ;
69447: GO 69693
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
69449: LD_ADDR_VAR 0 13
69453: PUSH
69454: LD_VAR 0 1
69458: PPUSH
69459: LD_VAR 0 13
69463: PPUSH
69464: LD_INT 1
69466: PPUSH
69467: LD_INT 1
69469: PPUSH
69470: CALL 14328 0 4
69474: ST_TO_ADDR
// ComStop ( flame ) ;
69475: LD_VAR 0 1
69479: PPUSH
69480: CALL_OW 141
// for i in list do
69484: LD_ADDR_VAR 0 6
69488: PUSH
69489: LD_VAR 0 13
69493: PUSH
69494: FOR_IN
69495: IFFALSE 69526
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
69497: LD_VAR 0 1
69501: PPUSH
69502: LD_VAR 0 6
69506: PUSH
69507: LD_INT 1
69509: ARRAY
69510: PPUSH
69511: LD_VAR 0 6
69515: PUSH
69516: LD_INT 2
69518: ARRAY
69519: PPUSH
69520: CALL_OW 176
69524: GO 69494
69526: POP
69527: POP
// repeat wait ( 0 0$1 ) ;
69528: LD_INT 35
69530: PPUSH
69531: CALL_OW 67
// task := GetTaskList ( flame ) ;
69535: LD_ADDR_VAR 0 14
69539: PUSH
69540: LD_VAR 0 1
69544: PPUSH
69545: CALL_OW 437
69549: ST_TO_ADDR
// if not task then
69550: LD_VAR 0 14
69554: NOT
69555: IFFALSE 69559
// exit ;
69557: GO 69693
// if task [ 1 ] [ 1 ] <> | then
69559: LD_VAR 0 14
69563: PUSH
69564: LD_INT 1
69566: ARRAY
69567: PUSH
69568: LD_INT 1
69570: ARRAY
69571: PUSH
69572: LD_STRING |
69574: NONEQUAL
69575: IFFALSE 69579
// exit ;
69577: GO 69693
// _x := task [ 1 ] [ 2 ] ;
69579: LD_ADDR_VAR 0 11
69583: PUSH
69584: LD_VAR 0 14
69588: PUSH
69589: LD_INT 1
69591: ARRAY
69592: PUSH
69593: LD_INT 2
69595: ARRAY
69596: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69597: LD_ADDR_VAR 0 12
69601: PUSH
69602: LD_VAR 0 14
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PUSH
69611: LD_INT 3
69613: ARRAY
69614: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69615: LD_VAR 0 11
69619: PPUSH
69620: LD_VAR 0 12
69624: PPUSH
69625: CALL_OW 351
69629: NOT
69630: PUSH
69631: LD_VAR 0 11
69635: PPUSH
69636: LD_VAR 0 12
69640: PPUSH
69641: CALL_OW 554
69645: NOT
69646: OR
69647: IFFALSE 69681
// begin task := Delete ( task , 1 ) ;
69649: LD_ADDR_VAR 0 14
69653: PUSH
69654: LD_VAR 0 14
69658: PPUSH
69659: LD_INT 1
69661: PPUSH
69662: CALL_OW 3
69666: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69667: LD_VAR 0 1
69671: PPUSH
69672: LD_VAR 0 14
69676: PPUSH
69677: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69681: LD_VAR 0 1
69685: PPUSH
69686: CALL_OW 314
69690: NOT
69691: IFFALSE 69528
// end ;
69693: LD_VAR 0 5
69697: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69698: LD_EXP 105
69702: NOT
69703: IFFALSE 69753
69705: GO 69707
69707: DISABLE
// begin initHack := true ;
69708: LD_ADDR_EXP 105
69712: PUSH
69713: LD_INT 1
69715: ST_TO_ADDR
// hackTanks := [ ] ;
69716: LD_ADDR_EXP 106
69720: PUSH
69721: EMPTY
69722: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69723: LD_ADDR_EXP 107
69727: PUSH
69728: EMPTY
69729: ST_TO_ADDR
// hackLimit := 3 ;
69730: LD_ADDR_EXP 108
69734: PUSH
69735: LD_INT 3
69737: ST_TO_ADDR
// hackDist := 12 ;
69738: LD_ADDR_EXP 109
69742: PUSH
69743: LD_INT 12
69745: ST_TO_ADDR
// hackCounter := [ ] ;
69746: LD_ADDR_EXP 110
69750: PUSH
69751: EMPTY
69752: ST_TO_ADDR
// end ;
69753: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69754: LD_EXP 105
69758: PUSH
69759: LD_INT 34
69761: PUSH
69762: LD_INT 99
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PPUSH
69769: CALL_OW 69
69773: AND
69774: IFFALSE 70027
69776: GO 69778
69778: DISABLE
69779: LD_INT 0
69781: PPUSH
69782: PPUSH
// begin enable ;
69783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69784: LD_ADDR_VAR 0 1
69788: PUSH
69789: LD_INT 34
69791: PUSH
69792: LD_INT 99
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PPUSH
69799: CALL_OW 69
69803: PUSH
69804: FOR_IN
69805: IFFALSE 70025
// begin if not i in hackTanks then
69807: LD_VAR 0 1
69811: PUSH
69812: LD_EXP 106
69816: IN
69817: NOT
69818: IFFALSE 69901
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69820: LD_ADDR_EXP 106
69824: PUSH
69825: LD_EXP 106
69829: PPUSH
69830: LD_EXP 106
69834: PUSH
69835: LD_INT 1
69837: PLUS
69838: PPUSH
69839: LD_VAR 0 1
69843: PPUSH
69844: CALL_OW 1
69848: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69849: LD_ADDR_EXP 107
69853: PUSH
69854: LD_EXP 107
69858: PPUSH
69859: LD_EXP 107
69863: PUSH
69864: LD_INT 1
69866: PLUS
69867: PPUSH
69868: EMPTY
69869: PPUSH
69870: CALL_OW 1
69874: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69875: LD_ADDR_EXP 110
69879: PUSH
69880: LD_EXP 110
69884: PPUSH
69885: LD_EXP 110
69889: PUSH
69890: LD_INT 1
69892: PLUS
69893: PPUSH
69894: EMPTY
69895: PPUSH
69896: CALL_OW 1
69900: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69901: LD_VAR 0 1
69905: PPUSH
69906: CALL_OW 302
69910: NOT
69911: IFFALSE 69924
// begin HackUnlinkAll ( i ) ;
69913: LD_VAR 0 1
69917: PPUSH
69918: CALL 70030 0 1
// continue ;
69922: GO 69804
// end ; HackCheckCapturedStatus ( i ) ;
69924: LD_VAR 0 1
69928: PPUSH
69929: CALL 70473 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69933: LD_ADDR_VAR 0 2
69937: PUSH
69938: LD_INT 81
69940: PUSH
69941: LD_VAR 0 1
69945: PPUSH
69946: CALL_OW 255
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 33
69957: PUSH
69958: LD_INT 3
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 91
69967: PUSH
69968: LD_VAR 0 1
69972: PUSH
69973: LD_EXP 109
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 50
69985: PUSH
69986: EMPTY
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: PPUSH
69995: CALL_OW 69
69999: ST_TO_ADDR
// if not tmp then
70000: LD_VAR 0 2
70004: NOT
70005: IFFALSE 70009
// continue ;
70007: GO 69804
// HackLink ( i , tmp ) ;
70009: LD_VAR 0 1
70013: PPUSH
70014: LD_VAR 0 2
70018: PPUSH
70019: CALL 70166 0 2
// end ;
70023: GO 69804
70025: POP
70026: POP
// end ;
70027: PPOPN 2
70029: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
70030: LD_INT 0
70032: PPUSH
70033: PPUSH
70034: PPUSH
// if not hack in hackTanks then
70035: LD_VAR 0 1
70039: PUSH
70040: LD_EXP 106
70044: IN
70045: NOT
70046: IFFALSE 70050
// exit ;
70048: GO 70161
// index := GetElementIndex ( hackTanks , hack ) ;
70050: LD_ADDR_VAR 0 4
70054: PUSH
70055: LD_EXP 106
70059: PPUSH
70060: LD_VAR 0 1
70064: PPUSH
70065: CALL 13625 0 2
70069: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
70070: LD_EXP 107
70074: PUSH
70075: LD_VAR 0 4
70079: ARRAY
70080: IFFALSE 70161
// begin for i in hackTanksCaptured [ index ] do
70082: LD_ADDR_VAR 0 3
70086: PUSH
70087: LD_EXP 107
70091: PUSH
70092: LD_VAR 0 4
70096: ARRAY
70097: PUSH
70098: FOR_IN
70099: IFFALSE 70125
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70101: LD_VAR 0 3
70105: PUSH
70106: LD_INT 1
70108: ARRAY
70109: PPUSH
70110: LD_VAR 0 3
70114: PUSH
70115: LD_INT 2
70117: ARRAY
70118: PPUSH
70119: CALL_OW 235
70123: GO 70098
70125: POP
70126: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70127: LD_ADDR_EXP 107
70131: PUSH
70132: LD_EXP 107
70136: PPUSH
70137: LD_VAR 0 4
70141: PPUSH
70142: EMPTY
70143: PPUSH
70144: CALL_OW 1
70148: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70149: LD_VAR 0 1
70153: PPUSH
70154: LD_INT 0
70156: PPUSH
70157: CALL_OW 505
// end ; end ;
70161: LD_VAR 0 2
70165: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70166: LD_INT 0
70168: PPUSH
70169: PPUSH
70170: PPUSH
// if not hack in hackTanks or not vehicles then
70171: LD_VAR 0 1
70175: PUSH
70176: LD_EXP 106
70180: IN
70181: NOT
70182: PUSH
70183: LD_VAR 0 2
70187: NOT
70188: OR
70189: IFFALSE 70193
// exit ;
70191: GO 70468
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70193: LD_ADDR_VAR 0 2
70197: PUSH
70198: LD_VAR 0 1
70202: PPUSH
70203: LD_VAR 0 2
70207: PPUSH
70208: LD_INT 1
70210: PPUSH
70211: LD_INT 1
70213: PPUSH
70214: CALL 14275 0 4
70218: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70219: LD_ADDR_VAR 0 5
70223: PUSH
70224: LD_EXP 106
70228: PPUSH
70229: LD_VAR 0 1
70233: PPUSH
70234: CALL 13625 0 2
70238: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70239: LD_EXP 107
70243: PUSH
70244: LD_VAR 0 5
70248: ARRAY
70249: PUSH
70250: LD_EXP 108
70254: LESS
70255: IFFALSE 70444
// begin for i := 1 to vehicles do
70257: LD_ADDR_VAR 0 4
70261: PUSH
70262: DOUBLE
70263: LD_INT 1
70265: DEC
70266: ST_TO_ADDR
70267: LD_VAR 0 2
70271: PUSH
70272: FOR_TO
70273: IFFALSE 70442
// begin if hackTanksCaptured [ index ] = hackLimit then
70275: LD_EXP 107
70279: PUSH
70280: LD_VAR 0 5
70284: ARRAY
70285: PUSH
70286: LD_EXP 108
70290: EQUAL
70291: IFFALSE 70295
// break ;
70293: GO 70442
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70295: LD_ADDR_EXP 110
70299: PUSH
70300: LD_EXP 110
70304: PPUSH
70305: LD_VAR 0 5
70309: PPUSH
70310: LD_EXP 110
70314: PUSH
70315: LD_VAR 0 5
70319: ARRAY
70320: PUSH
70321: LD_INT 1
70323: PLUS
70324: PPUSH
70325: CALL_OW 1
70329: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70330: LD_ADDR_EXP 107
70334: PUSH
70335: LD_EXP 107
70339: PPUSH
70340: LD_VAR 0 5
70344: PUSH
70345: LD_EXP 107
70349: PUSH
70350: LD_VAR 0 5
70354: ARRAY
70355: PUSH
70356: LD_INT 1
70358: PLUS
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PPUSH
70364: LD_VAR 0 2
70368: PUSH
70369: LD_VAR 0 4
70373: ARRAY
70374: PUSH
70375: LD_VAR 0 2
70379: PUSH
70380: LD_VAR 0 4
70384: ARRAY
70385: PPUSH
70386: CALL_OW 255
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PPUSH
70395: CALL 13840 0 3
70399: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70400: LD_VAR 0 2
70404: PUSH
70405: LD_VAR 0 4
70409: ARRAY
70410: PPUSH
70411: LD_VAR 0 1
70415: PPUSH
70416: CALL_OW 255
70420: PPUSH
70421: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70425: LD_VAR 0 2
70429: PUSH
70430: LD_VAR 0 4
70434: ARRAY
70435: PPUSH
70436: CALL_OW 141
// end ;
70440: GO 70272
70442: POP
70443: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70444: LD_VAR 0 1
70448: PPUSH
70449: LD_EXP 107
70453: PUSH
70454: LD_VAR 0 5
70458: ARRAY
70459: PUSH
70460: LD_INT 0
70462: PLUS
70463: PPUSH
70464: CALL_OW 505
// end ;
70468: LD_VAR 0 3
70472: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70473: LD_INT 0
70475: PPUSH
70476: PPUSH
70477: PPUSH
70478: PPUSH
// if not hack in hackTanks then
70479: LD_VAR 0 1
70483: PUSH
70484: LD_EXP 106
70488: IN
70489: NOT
70490: IFFALSE 70494
// exit ;
70492: GO 70734
// index := GetElementIndex ( hackTanks , hack ) ;
70494: LD_ADDR_VAR 0 4
70498: PUSH
70499: LD_EXP 106
70503: PPUSH
70504: LD_VAR 0 1
70508: PPUSH
70509: CALL 13625 0 2
70513: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70514: LD_ADDR_VAR 0 3
70518: PUSH
70519: DOUBLE
70520: LD_EXP 107
70524: PUSH
70525: LD_VAR 0 4
70529: ARRAY
70530: INC
70531: ST_TO_ADDR
70532: LD_INT 1
70534: PUSH
70535: FOR_DOWNTO
70536: IFFALSE 70708
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70538: LD_ADDR_VAR 0 5
70542: PUSH
70543: LD_EXP 107
70547: PUSH
70548: LD_VAR 0 4
70552: ARRAY
70553: PUSH
70554: LD_VAR 0 3
70558: ARRAY
70559: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70560: LD_VAR 0 5
70564: PUSH
70565: LD_INT 1
70567: ARRAY
70568: PPUSH
70569: CALL_OW 302
70573: NOT
70574: PUSH
70575: LD_VAR 0 5
70579: PUSH
70580: LD_INT 1
70582: ARRAY
70583: PPUSH
70584: CALL_OW 255
70588: PUSH
70589: LD_VAR 0 1
70593: PPUSH
70594: CALL_OW 255
70598: NONEQUAL
70599: OR
70600: IFFALSE 70706
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70602: LD_VAR 0 5
70606: PUSH
70607: LD_INT 1
70609: ARRAY
70610: PPUSH
70611: CALL_OW 305
70615: PUSH
70616: LD_VAR 0 5
70620: PUSH
70621: LD_INT 1
70623: ARRAY
70624: PPUSH
70625: CALL_OW 255
70629: PUSH
70630: LD_VAR 0 1
70634: PPUSH
70635: CALL_OW 255
70639: EQUAL
70640: AND
70641: IFFALSE 70665
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70643: LD_VAR 0 5
70647: PUSH
70648: LD_INT 1
70650: ARRAY
70651: PPUSH
70652: LD_VAR 0 5
70656: PUSH
70657: LD_INT 2
70659: ARRAY
70660: PPUSH
70661: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70665: LD_ADDR_EXP 107
70669: PUSH
70670: LD_EXP 107
70674: PPUSH
70675: LD_VAR 0 4
70679: PPUSH
70680: LD_EXP 107
70684: PUSH
70685: LD_VAR 0 4
70689: ARRAY
70690: PPUSH
70691: LD_VAR 0 3
70695: PPUSH
70696: CALL_OW 3
70700: PPUSH
70701: CALL_OW 1
70705: ST_TO_ADDR
// end ; end ;
70706: GO 70535
70708: POP
70709: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70710: LD_VAR 0 1
70714: PPUSH
70715: LD_EXP 107
70719: PUSH
70720: LD_VAR 0 4
70724: ARRAY
70725: PUSH
70726: LD_INT 0
70728: PLUS
70729: PPUSH
70730: CALL_OW 505
// end ;
70734: LD_VAR 0 2
70738: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70739: LD_INT 0
70741: PPUSH
70742: PPUSH
70743: PPUSH
70744: PPUSH
// if not hack in hackTanks then
70745: LD_VAR 0 1
70749: PUSH
70750: LD_EXP 106
70754: IN
70755: NOT
70756: IFFALSE 70760
// exit ;
70758: GO 70845
// index := GetElementIndex ( hackTanks , hack ) ;
70760: LD_ADDR_VAR 0 5
70764: PUSH
70765: LD_EXP 106
70769: PPUSH
70770: LD_VAR 0 1
70774: PPUSH
70775: CALL 13625 0 2
70779: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70780: LD_ADDR_VAR 0 4
70784: PUSH
70785: DOUBLE
70786: LD_INT 1
70788: DEC
70789: ST_TO_ADDR
70790: LD_EXP 107
70794: PUSH
70795: LD_VAR 0 5
70799: ARRAY
70800: PUSH
70801: FOR_TO
70802: IFFALSE 70843
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70804: LD_EXP 107
70808: PUSH
70809: LD_VAR 0 5
70813: ARRAY
70814: PUSH
70815: LD_VAR 0 4
70819: ARRAY
70820: PUSH
70821: LD_INT 1
70823: ARRAY
70824: PUSH
70825: LD_VAR 0 2
70829: EQUAL
70830: IFFALSE 70841
// KillUnit ( vehicle ) ;
70832: LD_VAR 0 2
70836: PPUSH
70837: CALL_OW 66
70841: GO 70801
70843: POP
70844: POP
// end ;
70845: LD_VAR 0 3
70849: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70850: LD_EXP 111
70854: NOT
70855: IFFALSE 70890
70857: GO 70859
70859: DISABLE
// begin initMiner := true ;
70860: LD_ADDR_EXP 111
70864: PUSH
70865: LD_INT 1
70867: ST_TO_ADDR
// minersList := [ ] ;
70868: LD_ADDR_EXP 112
70872: PUSH
70873: EMPTY
70874: ST_TO_ADDR
// minerMinesList := [ ] ;
70875: LD_ADDR_EXP 113
70879: PUSH
70880: EMPTY
70881: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70882: LD_ADDR_EXP 114
70886: PUSH
70887: LD_INT 5
70889: ST_TO_ADDR
// end ;
70890: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70891: LD_EXP 111
70895: PUSH
70896: LD_INT 34
70898: PUSH
70899: LD_INT 81
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PPUSH
70906: CALL_OW 69
70910: AND
70911: IFFALSE 71372
70913: GO 70915
70915: DISABLE
70916: LD_INT 0
70918: PPUSH
70919: PPUSH
70920: PPUSH
70921: PPUSH
// begin enable ;
70922: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70923: LD_ADDR_VAR 0 1
70927: PUSH
70928: LD_INT 34
70930: PUSH
70931: LD_INT 81
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PPUSH
70938: CALL_OW 69
70942: PUSH
70943: FOR_IN
70944: IFFALSE 71016
// begin if not i in minersList then
70946: LD_VAR 0 1
70950: PUSH
70951: LD_EXP 112
70955: IN
70956: NOT
70957: IFFALSE 71014
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70959: LD_ADDR_EXP 112
70963: PUSH
70964: LD_EXP 112
70968: PPUSH
70969: LD_EXP 112
70973: PUSH
70974: LD_INT 1
70976: PLUS
70977: PPUSH
70978: LD_VAR 0 1
70982: PPUSH
70983: CALL_OW 1
70987: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70988: LD_ADDR_EXP 113
70992: PUSH
70993: LD_EXP 113
70997: PPUSH
70998: LD_EXP 113
71002: PUSH
71003: LD_INT 1
71005: PLUS
71006: PPUSH
71007: EMPTY
71008: PPUSH
71009: CALL_OW 1
71013: ST_TO_ADDR
// end end ;
71014: GO 70943
71016: POP
71017: POP
// for i := minerMinesList downto 1 do
71018: LD_ADDR_VAR 0 1
71022: PUSH
71023: DOUBLE
71024: LD_EXP 113
71028: INC
71029: ST_TO_ADDR
71030: LD_INT 1
71032: PUSH
71033: FOR_DOWNTO
71034: IFFALSE 71370
// begin if IsLive ( minersList [ i ] ) then
71036: LD_EXP 112
71040: PUSH
71041: LD_VAR 0 1
71045: ARRAY
71046: PPUSH
71047: CALL_OW 300
71051: IFFALSE 71079
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
71053: LD_EXP 112
71057: PUSH
71058: LD_VAR 0 1
71062: ARRAY
71063: PPUSH
71064: LD_EXP 113
71068: PUSH
71069: LD_VAR 0 1
71073: ARRAY
71074: PPUSH
71075: CALL_OW 505
// if not minerMinesList [ i ] then
71079: LD_EXP 113
71083: PUSH
71084: LD_VAR 0 1
71088: ARRAY
71089: NOT
71090: IFFALSE 71094
// continue ;
71092: GO 71033
// for j := minerMinesList [ i ] downto 1 do
71094: LD_ADDR_VAR 0 2
71098: PUSH
71099: DOUBLE
71100: LD_EXP 113
71104: PUSH
71105: LD_VAR 0 1
71109: ARRAY
71110: INC
71111: ST_TO_ADDR
71112: LD_INT 1
71114: PUSH
71115: FOR_DOWNTO
71116: IFFALSE 71366
// begin side := GetSide ( minersList [ i ] ) ;
71118: LD_ADDR_VAR 0 3
71122: PUSH
71123: LD_EXP 112
71127: PUSH
71128: LD_VAR 0 1
71132: ARRAY
71133: PPUSH
71134: CALL_OW 255
71138: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71139: LD_ADDR_VAR 0 4
71143: PUSH
71144: LD_EXP 113
71148: PUSH
71149: LD_VAR 0 1
71153: ARRAY
71154: PUSH
71155: LD_VAR 0 2
71159: ARRAY
71160: PUSH
71161: LD_INT 1
71163: ARRAY
71164: PPUSH
71165: LD_EXP 113
71169: PUSH
71170: LD_VAR 0 1
71174: ARRAY
71175: PUSH
71176: LD_VAR 0 2
71180: ARRAY
71181: PUSH
71182: LD_INT 2
71184: ARRAY
71185: PPUSH
71186: CALL_OW 428
71190: ST_TO_ADDR
// if not tmp then
71191: LD_VAR 0 4
71195: NOT
71196: IFFALSE 71200
// continue ;
71198: GO 71115
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71200: LD_VAR 0 4
71204: PUSH
71205: LD_INT 81
71207: PUSH
71208: LD_VAR 0 3
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PPUSH
71217: CALL_OW 69
71221: IN
71222: PUSH
71223: LD_EXP 113
71227: PUSH
71228: LD_VAR 0 1
71232: ARRAY
71233: PUSH
71234: LD_VAR 0 2
71238: ARRAY
71239: PUSH
71240: LD_INT 1
71242: ARRAY
71243: PPUSH
71244: LD_EXP 113
71248: PUSH
71249: LD_VAR 0 1
71253: ARRAY
71254: PUSH
71255: LD_VAR 0 2
71259: ARRAY
71260: PUSH
71261: LD_INT 2
71263: ARRAY
71264: PPUSH
71265: CALL_OW 458
71269: AND
71270: IFFALSE 71364
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71272: LD_EXP 113
71276: PUSH
71277: LD_VAR 0 1
71281: ARRAY
71282: PUSH
71283: LD_VAR 0 2
71287: ARRAY
71288: PUSH
71289: LD_INT 1
71291: ARRAY
71292: PPUSH
71293: LD_EXP 113
71297: PUSH
71298: LD_VAR 0 1
71302: ARRAY
71303: PUSH
71304: LD_VAR 0 2
71308: ARRAY
71309: PUSH
71310: LD_INT 2
71312: ARRAY
71313: PPUSH
71314: LD_VAR 0 3
71318: PPUSH
71319: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71323: LD_ADDR_EXP 113
71327: PUSH
71328: LD_EXP 113
71332: PPUSH
71333: LD_VAR 0 1
71337: PPUSH
71338: LD_EXP 113
71342: PUSH
71343: LD_VAR 0 1
71347: ARRAY
71348: PPUSH
71349: LD_VAR 0 2
71353: PPUSH
71354: CALL_OW 3
71358: PPUSH
71359: CALL_OW 1
71363: ST_TO_ADDR
// end ; end ;
71364: GO 71115
71366: POP
71367: POP
// end ;
71368: GO 71033
71370: POP
71371: POP
// end ;
71372: PPOPN 4
71374: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71375: LD_INT 0
71377: PPUSH
71378: PPUSH
// result := false ;
71379: LD_ADDR_VAR 0 4
71383: PUSH
71384: LD_INT 0
71386: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71387: LD_VAR 0 1
71391: PPUSH
71392: CALL_OW 264
71396: PUSH
71397: LD_INT 81
71399: EQUAL
71400: NOT
71401: IFFALSE 71405
// exit ;
71403: GO 71645
// index := GetElementIndex ( minersList , unit ) ;
71405: LD_ADDR_VAR 0 5
71409: PUSH
71410: LD_EXP 112
71414: PPUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: CALL 13625 0 2
71424: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71425: LD_EXP 113
71429: PUSH
71430: LD_VAR 0 5
71434: ARRAY
71435: PUSH
71436: LD_EXP 114
71440: GREATEREQUAL
71441: IFFALSE 71445
// exit ;
71443: GO 71645
// ComMoveXY ( unit , x , y ) ;
71445: LD_VAR 0 1
71449: PPUSH
71450: LD_VAR 0 2
71454: PPUSH
71455: LD_VAR 0 3
71459: PPUSH
71460: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71464: LD_INT 35
71466: PPUSH
71467: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71471: LD_VAR 0 1
71475: PPUSH
71476: LD_VAR 0 2
71480: PPUSH
71481: LD_VAR 0 3
71485: PPUSH
71486: CALL 45366 0 3
71490: NOT
71491: PUSH
71492: LD_VAR 0 1
71496: PPUSH
71497: CALL_OW 314
71501: AND
71502: IFFALSE 71506
// exit ;
71504: GO 71645
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71506: LD_VAR 0 2
71510: PPUSH
71511: LD_VAR 0 3
71515: PPUSH
71516: CALL_OW 428
71520: PUSH
71521: LD_VAR 0 1
71525: EQUAL
71526: PUSH
71527: LD_VAR 0 1
71531: PPUSH
71532: CALL_OW 314
71536: NOT
71537: AND
71538: IFFALSE 71464
// PlaySoundXY ( x , y , PlantMine ) ;
71540: LD_VAR 0 2
71544: PPUSH
71545: LD_VAR 0 3
71549: PPUSH
71550: LD_STRING PlantMine
71552: PPUSH
71553: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71557: LD_VAR 0 2
71561: PPUSH
71562: LD_VAR 0 3
71566: PPUSH
71567: LD_VAR 0 1
71571: PPUSH
71572: CALL_OW 255
71576: PPUSH
71577: LD_INT 0
71579: PPUSH
71580: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71584: LD_ADDR_EXP 113
71588: PUSH
71589: LD_EXP 113
71593: PPUSH
71594: LD_VAR 0 5
71598: PUSH
71599: LD_EXP 113
71603: PUSH
71604: LD_VAR 0 5
71608: ARRAY
71609: PUSH
71610: LD_INT 1
71612: PLUS
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PPUSH
71618: LD_VAR 0 2
71622: PUSH
71623: LD_VAR 0 3
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PPUSH
71632: CALL 13840 0 3
71636: ST_TO_ADDR
// result := true ;
71637: LD_ADDR_VAR 0 4
71641: PUSH
71642: LD_INT 1
71644: ST_TO_ADDR
// end ;
71645: LD_VAR 0 4
71649: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71650: LD_INT 0
71652: PPUSH
71653: PPUSH
71654: PPUSH
// if not unit in minersList then
71655: LD_VAR 0 1
71659: PUSH
71660: LD_EXP 112
71664: IN
71665: NOT
71666: IFFALSE 71670
// exit ;
71668: GO 72062
// index := GetElementIndex ( minersList , unit ) ;
71670: LD_ADDR_VAR 0 6
71674: PUSH
71675: LD_EXP 112
71679: PPUSH
71680: LD_VAR 0 1
71684: PPUSH
71685: CALL 13625 0 2
71689: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71690: LD_ADDR_VAR 0 5
71694: PUSH
71695: DOUBLE
71696: LD_EXP 113
71700: PUSH
71701: LD_VAR 0 6
71705: ARRAY
71706: INC
71707: ST_TO_ADDR
71708: LD_INT 1
71710: PUSH
71711: FOR_DOWNTO
71712: IFFALSE 71873
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71714: LD_EXP 113
71718: PUSH
71719: LD_VAR 0 6
71723: ARRAY
71724: PUSH
71725: LD_VAR 0 5
71729: ARRAY
71730: PUSH
71731: LD_INT 1
71733: ARRAY
71734: PUSH
71735: LD_VAR 0 2
71739: EQUAL
71740: PUSH
71741: LD_EXP 113
71745: PUSH
71746: LD_VAR 0 6
71750: ARRAY
71751: PUSH
71752: LD_VAR 0 5
71756: ARRAY
71757: PUSH
71758: LD_INT 2
71760: ARRAY
71761: PUSH
71762: LD_VAR 0 3
71766: EQUAL
71767: AND
71768: IFFALSE 71871
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71770: LD_EXP 113
71774: PUSH
71775: LD_VAR 0 6
71779: ARRAY
71780: PUSH
71781: LD_VAR 0 5
71785: ARRAY
71786: PUSH
71787: LD_INT 1
71789: ARRAY
71790: PPUSH
71791: LD_EXP 113
71795: PUSH
71796: LD_VAR 0 6
71800: ARRAY
71801: PUSH
71802: LD_VAR 0 5
71806: ARRAY
71807: PUSH
71808: LD_INT 2
71810: ARRAY
71811: PPUSH
71812: LD_VAR 0 1
71816: PPUSH
71817: CALL_OW 255
71821: PPUSH
71822: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71826: LD_ADDR_EXP 113
71830: PUSH
71831: LD_EXP 113
71835: PPUSH
71836: LD_VAR 0 6
71840: PPUSH
71841: LD_EXP 113
71845: PUSH
71846: LD_VAR 0 6
71850: ARRAY
71851: PPUSH
71852: LD_VAR 0 5
71856: PPUSH
71857: CALL_OW 3
71861: PPUSH
71862: CALL_OW 1
71866: ST_TO_ADDR
// exit ;
71867: POP
71868: POP
71869: GO 72062
// end ; end ;
71871: GO 71711
71873: POP
71874: POP
// for i := minerMinesList [ index ] downto 1 do
71875: LD_ADDR_VAR 0 5
71879: PUSH
71880: DOUBLE
71881: LD_EXP 113
71885: PUSH
71886: LD_VAR 0 6
71890: ARRAY
71891: INC
71892: ST_TO_ADDR
71893: LD_INT 1
71895: PUSH
71896: FOR_DOWNTO
71897: IFFALSE 72060
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71899: LD_EXP 113
71903: PUSH
71904: LD_VAR 0 6
71908: ARRAY
71909: PUSH
71910: LD_VAR 0 5
71914: ARRAY
71915: PUSH
71916: LD_INT 1
71918: ARRAY
71919: PPUSH
71920: LD_EXP 113
71924: PUSH
71925: LD_VAR 0 6
71929: ARRAY
71930: PUSH
71931: LD_VAR 0 5
71935: ARRAY
71936: PUSH
71937: LD_INT 2
71939: ARRAY
71940: PPUSH
71941: LD_VAR 0 2
71945: PPUSH
71946: LD_VAR 0 3
71950: PPUSH
71951: CALL_OW 298
71955: PUSH
71956: LD_INT 6
71958: LESS
71959: IFFALSE 72058
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71961: LD_EXP 113
71965: PUSH
71966: LD_VAR 0 6
71970: ARRAY
71971: PUSH
71972: LD_VAR 0 5
71976: ARRAY
71977: PUSH
71978: LD_INT 1
71980: ARRAY
71981: PPUSH
71982: LD_EXP 113
71986: PUSH
71987: LD_VAR 0 6
71991: ARRAY
71992: PUSH
71993: LD_VAR 0 5
71997: ARRAY
71998: PUSH
71999: LD_INT 2
72001: ARRAY
72002: PPUSH
72003: LD_VAR 0 1
72007: PPUSH
72008: CALL_OW 255
72012: PPUSH
72013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72017: LD_ADDR_EXP 113
72021: PUSH
72022: LD_EXP 113
72026: PPUSH
72027: LD_VAR 0 6
72031: PPUSH
72032: LD_EXP 113
72036: PUSH
72037: LD_VAR 0 6
72041: ARRAY
72042: PPUSH
72043: LD_VAR 0 5
72047: PPUSH
72048: CALL_OW 3
72052: PPUSH
72053: CALL_OW 1
72057: ST_TO_ADDR
// end ; end ;
72058: GO 71896
72060: POP
72061: POP
// end ;
72062: LD_VAR 0 4
72066: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
72067: LD_INT 0
72069: PPUSH
72070: PPUSH
72071: PPUSH
72072: PPUSH
72073: PPUSH
72074: PPUSH
72075: PPUSH
72076: PPUSH
72077: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72078: LD_VAR 0 1
72082: PPUSH
72083: CALL_OW 264
72087: PUSH
72088: LD_INT 81
72090: EQUAL
72091: NOT
72092: PUSH
72093: LD_VAR 0 1
72097: PUSH
72098: LD_EXP 112
72102: IN
72103: NOT
72104: OR
72105: IFFALSE 72109
// exit ;
72107: GO 72431
// index := GetElementIndex ( minersList , unit ) ;
72109: LD_ADDR_VAR 0 6
72113: PUSH
72114: LD_EXP 112
72118: PPUSH
72119: LD_VAR 0 1
72123: PPUSH
72124: CALL 13625 0 2
72128: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72129: LD_ADDR_VAR 0 8
72133: PUSH
72134: LD_EXP 114
72138: PUSH
72139: LD_EXP 113
72143: PUSH
72144: LD_VAR 0 6
72148: ARRAY
72149: MINUS
72150: ST_TO_ADDR
// if not minesFreeAmount then
72151: LD_VAR 0 8
72155: NOT
72156: IFFALSE 72160
// exit ;
72158: GO 72431
// tmp := [ ] ;
72160: LD_ADDR_VAR 0 7
72164: PUSH
72165: EMPTY
72166: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72167: LD_ADDR_VAR 0 5
72171: PUSH
72172: DOUBLE
72173: LD_INT 1
72175: DEC
72176: ST_TO_ADDR
72177: LD_VAR 0 8
72181: PUSH
72182: FOR_TO
72183: IFFALSE 72378
// begin _d := rand ( 0 , 5 ) ;
72185: LD_ADDR_VAR 0 11
72189: PUSH
72190: LD_INT 0
72192: PPUSH
72193: LD_INT 5
72195: PPUSH
72196: CALL_OW 12
72200: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72201: LD_ADDR_VAR 0 12
72205: PUSH
72206: LD_INT 2
72208: PPUSH
72209: LD_INT 6
72211: PPUSH
72212: CALL_OW 12
72216: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72217: LD_ADDR_VAR 0 9
72221: PUSH
72222: LD_VAR 0 2
72226: PPUSH
72227: LD_VAR 0 11
72231: PPUSH
72232: LD_VAR 0 12
72236: PPUSH
72237: CALL_OW 272
72241: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72242: LD_ADDR_VAR 0 10
72246: PUSH
72247: LD_VAR 0 3
72251: PPUSH
72252: LD_VAR 0 11
72256: PPUSH
72257: LD_VAR 0 12
72261: PPUSH
72262: CALL_OW 273
72266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72267: LD_VAR 0 9
72271: PPUSH
72272: LD_VAR 0 10
72276: PPUSH
72277: CALL_OW 488
72281: PUSH
72282: LD_VAR 0 9
72286: PUSH
72287: LD_VAR 0 10
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_VAR 0 7
72300: IN
72301: NOT
72302: AND
72303: PUSH
72304: LD_VAR 0 9
72308: PPUSH
72309: LD_VAR 0 10
72313: PPUSH
72314: CALL_OW 458
72318: NOT
72319: AND
72320: IFFALSE 72362
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72322: LD_ADDR_VAR 0 7
72326: PUSH
72327: LD_VAR 0 7
72331: PPUSH
72332: LD_VAR 0 7
72336: PUSH
72337: LD_INT 1
72339: PLUS
72340: PPUSH
72341: LD_VAR 0 9
72345: PUSH
72346: LD_VAR 0 10
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PPUSH
72355: CALL_OW 1
72359: ST_TO_ADDR
72360: GO 72376
// i := i - 1 ;
72362: LD_ADDR_VAR 0 5
72366: PUSH
72367: LD_VAR 0 5
72371: PUSH
72372: LD_INT 1
72374: MINUS
72375: ST_TO_ADDR
// end ;
72376: GO 72182
72378: POP
72379: POP
// for i in tmp do
72380: LD_ADDR_VAR 0 5
72384: PUSH
72385: LD_VAR 0 7
72389: PUSH
72390: FOR_IN
72391: IFFALSE 72429
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72393: LD_VAR 0 1
72397: PPUSH
72398: LD_VAR 0 5
72402: PUSH
72403: LD_INT 1
72405: ARRAY
72406: PPUSH
72407: LD_VAR 0 5
72411: PUSH
72412: LD_INT 2
72414: ARRAY
72415: PPUSH
72416: CALL 71375 0 3
72420: NOT
72421: IFFALSE 72427
// exit ;
72423: POP
72424: POP
72425: GO 72431
72427: GO 72390
72429: POP
72430: POP
// end ;
72431: LD_VAR 0 4
72435: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
72436: LD_INT 0
72438: PPUSH
72439: PPUSH
72440: PPUSH
72441: PPUSH
72442: PPUSH
72443: PPUSH
72444: PPUSH
72445: PPUSH
72446: PPUSH
// if GetClass ( unit ) <> class_sniper then
72447: LD_VAR 0 1
72451: PPUSH
72452: CALL_OW 257
72456: PUSH
72457: LD_INT 5
72459: NONEQUAL
72460: IFFALSE 72464
// exit ;
72462: GO 72930
// dist := 8 ;
72464: LD_ADDR_VAR 0 5
72468: PUSH
72469: LD_INT 8
72471: ST_TO_ADDR
// viewRange := 12 ;
72472: LD_ADDR_VAR 0 8
72476: PUSH
72477: LD_INT 12
72479: ST_TO_ADDR
// side := GetSide ( unit ) ;
72480: LD_ADDR_VAR 0 6
72484: PUSH
72485: LD_VAR 0 1
72489: PPUSH
72490: CALL_OW 255
72494: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72495: LD_INT 61
72497: PPUSH
72498: LD_VAR 0 6
72502: PPUSH
72503: CALL_OW 321
72507: PUSH
72508: LD_INT 2
72510: EQUAL
72511: IFFALSE 72521
// viewRange := 16 ;
72513: LD_ADDR_VAR 0 8
72517: PUSH
72518: LD_INT 16
72520: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72521: LD_VAR 0 1
72525: PPUSH
72526: LD_VAR 0 2
72530: PPUSH
72531: LD_VAR 0 3
72535: PPUSH
72536: CALL_OW 297
72540: PUSH
72541: LD_VAR 0 5
72545: GREATER
72546: IFFALSE 72625
// begin ComMoveXY ( unit , x , y ) ;
72548: LD_VAR 0 1
72552: PPUSH
72553: LD_VAR 0 2
72557: PPUSH
72558: LD_VAR 0 3
72562: PPUSH
72563: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72567: LD_INT 35
72569: PPUSH
72570: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72574: LD_VAR 0 1
72578: PPUSH
72579: LD_VAR 0 2
72583: PPUSH
72584: LD_VAR 0 3
72588: PPUSH
72589: CALL 45366 0 3
72593: NOT
72594: IFFALSE 72598
// exit ;
72596: GO 72930
// until GetDistUnitXY ( unit , x , y ) < dist ;
72598: LD_VAR 0 1
72602: PPUSH
72603: LD_VAR 0 2
72607: PPUSH
72608: LD_VAR 0 3
72612: PPUSH
72613: CALL_OW 297
72617: PUSH
72618: LD_VAR 0 5
72622: LESS
72623: IFFALSE 72567
// end ; ComTurnXY ( unit , x , y ) ;
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_VAR 0 2
72634: PPUSH
72635: LD_VAR 0 3
72639: PPUSH
72640: CALL_OW 118
// repeat if Multiplayer then
72644: LD_OWVAR 4
72648: IFFALSE 72659
// wait ( 35 ) else
72650: LD_INT 35
72652: PPUSH
72653: CALL_OW 67
72657: GO 72666
// wait ( 5 ) ;
72659: LD_INT 5
72661: PPUSH
72662: CALL_OW 67
// _d := GetDir ( unit ) ;
72666: LD_ADDR_VAR 0 11
72670: PUSH
72671: LD_VAR 0 1
72675: PPUSH
72676: CALL_OW 254
72680: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
72681: LD_ADDR_VAR 0 7
72685: PUSH
72686: LD_VAR 0 1
72690: PPUSH
72691: CALL_OW 250
72695: PPUSH
72696: LD_VAR 0 1
72700: PPUSH
72701: CALL_OW 251
72705: PPUSH
72706: LD_VAR 0 2
72710: PPUSH
72711: LD_VAR 0 3
72715: PPUSH
72716: CALL 47974 0 4
72720: ST_TO_ADDR
// until dir = _d ;
72721: LD_VAR 0 7
72725: PUSH
72726: LD_VAR 0 11
72730: EQUAL
72731: IFFALSE 72644
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
72733: LD_ADDR_VAR 0 9
72737: PUSH
72738: LD_VAR 0 1
72742: PPUSH
72743: CALL_OW 250
72747: PPUSH
72748: LD_VAR 0 7
72752: PPUSH
72753: LD_VAR 0 5
72757: PPUSH
72758: CALL_OW 272
72762: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
72763: LD_ADDR_VAR 0 10
72767: PUSH
72768: LD_VAR 0 1
72772: PPUSH
72773: CALL_OW 251
72777: PPUSH
72778: LD_VAR 0 7
72782: PPUSH
72783: LD_VAR 0 5
72787: PPUSH
72788: CALL_OW 273
72792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72793: LD_VAR 0 9
72797: PPUSH
72798: LD_VAR 0 10
72802: PPUSH
72803: CALL_OW 488
72807: NOT
72808: IFFALSE 72812
// exit ;
72810: GO 72930
// ComAnimCustom ( unit , 1 ) ;
72812: LD_VAR 0 1
72816: PPUSH
72817: LD_INT 1
72819: PPUSH
72820: CALL_OW 592
// p := 0 ;
72824: LD_ADDR_VAR 0 12
72828: PUSH
72829: LD_INT 0
72831: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72832: LD_VAR 0 9
72836: PPUSH
72837: LD_VAR 0 10
72841: PPUSH
72842: LD_VAR 0 6
72846: PPUSH
72847: LD_VAR 0 8
72851: PPUSH
72852: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
72856: LD_INT 35
72858: PPUSH
72859: CALL_OW 67
// p := Inc ( p ) ;
72863: LD_ADDR_VAR 0 12
72867: PUSH
72868: LD_VAR 0 12
72872: PPUSH
72873: CALL 47930 0 1
72877: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
72878: LD_VAR 0 12
72882: PUSH
72883: LD_INT 3
72885: EQUAL
72886: PUSH
72887: LD_VAR 0 1
72891: PPUSH
72892: CALL_OW 302
72896: NOT
72897: OR
72898: PUSH
72899: LD_VAR 0 1
72903: PPUSH
72904: CALL_OW 301
72908: OR
72909: IFFALSE 72856
// RemoveSeeing ( _x , _y , side ) ;
72911: LD_VAR 0 9
72915: PPUSH
72916: LD_VAR 0 10
72920: PPUSH
72921: LD_VAR 0 6
72925: PPUSH
72926: CALL_OW 331
// end ; end_of_file
72930: LD_VAR 0 4
72934: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
72935: LD_EXP 38
72939: IFFALSE 73280
72941: GO 72943
72943: DISABLE
72944: LD_INT 0
72946: PPUSH
72947: PPUSH
72948: PPUSH
// begin mpKingPoints := [ ] ;
72949: LD_ADDR_EXP 115
72953: PUSH
72954: EMPTY
72955: ST_TO_ADDR
// if mpTeamGame then
72956: LD_EXP 11
72960: IFFALSE 73014
// begin for i := 1 to Count ( mpTeams ) do
72962: LD_ADDR_VAR 0 1
72966: PUSH
72967: DOUBLE
72968: LD_INT 1
72970: DEC
72971: ST_TO_ADDR
72972: LD_EXP 10
72976: PPUSH
72977: CALL 10980 0 1
72981: PUSH
72982: FOR_TO
72983: IFFALSE 73010
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
72985: LD_ADDR_EXP 115
72989: PUSH
72990: LD_EXP 115
72994: PPUSH
72995: LD_VAR 0 1
72999: PPUSH
73000: LD_INT 0
73002: PPUSH
73003: CALL_OW 1
73007: ST_TO_ADDR
73008: GO 72982
73010: POP
73011: POP
// end else
73012: GO 73057
// begin for i := 1 to 8 do
73014: LD_ADDR_VAR 0 1
73018: PUSH
73019: DOUBLE
73020: LD_INT 1
73022: DEC
73023: ST_TO_ADDR
73024: LD_INT 8
73026: PUSH
73027: FOR_TO
73028: IFFALSE 73055
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
73030: LD_ADDR_EXP 115
73034: PUSH
73035: LD_EXP 115
73039: PPUSH
73040: LD_VAR 0 1
73044: PPUSH
73045: LD_INT 0
73047: PPUSH
73048: CALL_OW 1
73052: ST_TO_ADDR
73053: GO 73027
73055: POP
73056: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
73057: LD_ADDR_VAR 0 3
73061: PUSH
73062: LD_EXP 2
73066: PPUSH
73067: LD_INT 0
73069: PPUSH
73070: CALL_OW 517
73074: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73075: LD_ADDR_VAR 0 1
73079: PUSH
73080: DOUBLE
73081: LD_INT 1
73083: DEC
73084: ST_TO_ADDR
73085: LD_VAR 0 3
73089: PUSH
73090: LD_INT 1
73092: ARRAY
73093: PUSH
73094: FOR_TO
73095: IFFALSE 73162
// for j := 1 to 8 do
73097: LD_ADDR_VAR 0 2
73101: PUSH
73102: DOUBLE
73103: LD_INT 1
73105: DEC
73106: ST_TO_ADDR
73107: LD_INT 8
73109: PUSH
73110: FOR_TO
73111: IFFALSE 73158
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
73113: LD_VAR 0 3
73117: PUSH
73118: LD_INT 1
73120: ARRAY
73121: PUSH
73122: LD_VAR 0 1
73126: ARRAY
73127: PPUSH
73128: LD_VAR 0 3
73132: PUSH
73133: LD_INT 2
73135: ARRAY
73136: PUSH
73137: LD_VAR 0 1
73141: ARRAY
73142: PPUSH
73143: LD_VAR 0 2
73147: PPUSH
73148: LD_INT 12
73150: NEG
73151: PPUSH
73152: CALL_OW 330
73156: GO 73110
73158: POP
73159: POP
73160: GO 73094
73162: POP
73163: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
73164: LD_EXP 33
73168: PPUSH
73169: LD_INT 1
73171: PPUSH
73172: CALL_OW 424
// UpdateCounter ;
73176: CALL 73784 0 0
// repeat wait ( 0 0$1 ) ;
73180: LD_INT 35
73182: PPUSH
73183: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73187: LD_ADDR_VAR 0 3
73191: PUSH
73192: LD_EXP 33
73196: PPUSH
73197: LD_INT 3
73199: PUSH
73200: LD_INT 57
73202: PUSH
73203: EMPTY
73204: LIST
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 50
73212: PUSH
73213: EMPTY
73214: LIST
73215: PUSH
73216: LD_INT 2
73218: PUSH
73219: LD_INT 30
73221: PUSH
73222: LD_INT 0
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 30
73231: PUSH
73232: LD_INT 1
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: LIST
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: LIST
73248: PPUSH
73249: CALL_OW 70
73253: ST_TO_ADDR
// if not tmp then
73254: LD_VAR 0 3
73258: NOT
73259: IFFALSE 73263
// continue ;
73261: GO 73180
// AddPoints ( tmp ) ;
73263: LD_VAR 0 3
73267: PPUSH
73268: CALL 73462 0 1
// UpdateCounter ;
73272: CALL 73784 0 0
// until false ;
73276: LD_INT 0
73278: IFFALSE 73180
// end ;
73280: PPOPN 3
73282: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
73283: LD_EXP 38
73287: PUSH
73288: LD_EXP 36
73292: AND
73293: IFFALSE 73459
73295: GO 73297
73297: DISABLE
73298: LD_INT 0
73300: PPUSH
73301: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
73302: LD_ADDR_VAR 0 2
73306: PUSH
73307: LD_EXP 2
73311: PPUSH
73312: LD_INT 0
73314: PPUSH
73315: CALL_OW 517
73319: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73320: LD_ADDR_VAR 0 1
73324: PUSH
73325: DOUBLE
73326: LD_INT 1
73328: DEC
73329: ST_TO_ADDR
73330: LD_VAR 0 2
73334: PUSH
73335: LD_INT 1
73337: ARRAY
73338: PUSH
73339: FOR_TO
73340: IFFALSE 73381
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
73342: LD_VAR 0 2
73346: PUSH
73347: LD_INT 1
73349: ARRAY
73350: PUSH
73351: LD_VAR 0 1
73355: ARRAY
73356: PPUSH
73357: LD_VAR 0 2
73361: PUSH
73362: LD_INT 2
73364: ARRAY
73365: PUSH
73366: LD_VAR 0 1
73370: ARRAY
73371: PPUSH
73372: LD_INT 125
73374: PPUSH
73375: CALL_OW 495
73379: GO 73339
73381: POP
73382: POP
// repeat wait ( mpEmissions ) ;
73383: LD_EXP 36
73387: PPUSH
73388: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
73392: LD_ADDR_VAR 0 1
73396: PUSH
73397: DOUBLE
73398: LD_INT 1
73400: DEC
73401: ST_TO_ADDR
73402: LD_VAR 0 2
73406: PUSH
73407: LD_INT 1
73409: ARRAY
73410: PUSH
73411: FOR_TO
73412: IFFALSE 73453
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
73414: LD_VAR 0 2
73418: PUSH
73419: LD_INT 1
73421: ARRAY
73422: PUSH
73423: LD_VAR 0 1
73427: ARRAY
73428: PPUSH
73429: LD_VAR 0 2
73433: PUSH
73434: LD_INT 2
73436: ARRAY
73437: PUSH
73438: LD_VAR 0 1
73442: ARRAY
73443: PPUSH
73444: LD_INT 15
73446: PPUSH
73447: CALL_OW 495
73451: GO 73411
73453: POP
73454: POP
// until false ;
73455: LD_INT 0
73457: IFFALSE 73383
// end ;
73459: PPOPN 2
73461: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
73462: LD_INT 0
73464: PPUSH
73465: PPUSH
73466: PPUSH
73467: PPUSH
73468: PPUSH
// if mpTeamGame then
73469: LD_EXP 11
73473: IFFALSE 73670
// begin first := depots [ 1 ] ;
73475: LD_ADDR_VAR 0 4
73479: PUSH
73480: LD_VAR 0 1
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: ST_TO_ADDR
// side := GetSide ( first ) ;
73489: LD_ADDR_VAR 0 6
73493: PUSH
73494: LD_VAR 0 4
73498: PPUSH
73499: CALL_OW 255
73503: ST_TO_ADDR
// for i := 1 to mpTeams do
73504: LD_ADDR_VAR 0 3
73508: PUSH
73509: DOUBLE
73510: LD_INT 1
73512: DEC
73513: ST_TO_ADDR
73514: LD_EXP 10
73518: PUSH
73519: FOR_TO
73520: IFFALSE 73554
// if side in mpTeams [ i ] then
73522: LD_VAR 0 6
73526: PUSH
73527: LD_EXP 10
73531: PUSH
73532: LD_VAR 0 3
73536: ARRAY
73537: IN
73538: IFFALSE 73552
// begin team := i ;
73540: LD_ADDR_VAR 0 5
73544: PUSH
73545: LD_VAR 0 3
73549: ST_TO_ADDR
// break ;
73550: GO 73554
// end ;
73552: GO 73519
73554: POP
73555: POP
// if not team then
73556: LD_VAR 0 5
73560: NOT
73561: IFFALSE 73565
// exit ;
73563: GO 73779
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73565: LD_EXP 33
73569: PPUSH
73570: LD_INT 81
73572: PUSH
73573: LD_VAR 0 6
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PPUSH
73582: CALL_OW 70
73586: IFFALSE 73590
// exit ;
73588: GO 73779
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
73590: LD_ADDR_EXP 115
73594: PUSH
73595: LD_EXP 115
73599: PPUSH
73600: LD_VAR 0 5
73604: PPUSH
73605: LD_EXP 115
73609: PUSH
73610: LD_VAR 0 5
73614: ARRAY
73615: PUSH
73616: LD_INT 1
73618: PLUS
73619: PPUSH
73620: CALL_OW 1
73624: ST_TO_ADDR
// for i in mpTeams [ team ] do
73625: LD_ADDR_VAR 0 3
73629: PUSH
73630: LD_EXP 10
73634: PUSH
73635: LD_VAR 0 5
73639: ARRAY
73640: PUSH
73641: FOR_IN
73642: IFFALSE 73666
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
73644: LD_VAR 0 3
73648: PPUSH
73649: LD_EXP 115
73653: PUSH
73654: LD_VAR 0 5
73658: ARRAY
73659: PPUSH
73660: CALL_OW 506
73664: GO 73641
73666: POP
73667: POP
// end else
73668: GO 73779
// begin first := depots [ 1 ] ;
73670: LD_ADDR_VAR 0 4
73674: PUSH
73675: LD_VAR 0 1
73679: PUSH
73680: LD_INT 1
73682: ARRAY
73683: ST_TO_ADDR
// side := GetSide ( first ) ;
73684: LD_ADDR_VAR 0 6
73688: PUSH
73689: LD_VAR 0 4
73693: PPUSH
73694: CALL_OW 255
73698: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73699: LD_EXP 33
73703: PPUSH
73704: LD_INT 81
73706: PUSH
73707: LD_VAR 0 6
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PPUSH
73716: CALL_OW 70
73720: IFFALSE 73724
// exit ;
73722: GO 73779
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
73724: LD_ADDR_EXP 115
73728: PUSH
73729: LD_EXP 115
73733: PPUSH
73734: LD_VAR 0 6
73738: PPUSH
73739: LD_EXP 115
73743: PUSH
73744: LD_VAR 0 6
73748: ARRAY
73749: PUSH
73750: LD_INT 1
73752: PLUS
73753: PPUSH
73754: CALL_OW 1
73758: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
73759: LD_VAR 0 6
73763: PPUSH
73764: LD_EXP 115
73768: PUSH
73769: LD_VAR 0 6
73773: ARRAY
73774: PPUSH
73775: CALL_OW 506
// end ; end ;
73779: LD_VAR 0 2
73783: RET
// function UpdateCounter ; var i ; begin
73784: LD_INT 0
73786: PPUSH
73787: PPUSH
// result := [ ] ;
73788: LD_ADDR_VAR 0 1
73792: PUSH
73793: EMPTY
73794: ST_TO_ADDR
// if mpTeamGame then
73795: LD_EXP 11
73799: IFFALSE 73866
// begin for i := 1 to mpTeams do
73801: LD_ADDR_VAR 0 2
73805: PUSH
73806: DOUBLE
73807: LD_INT 1
73809: DEC
73810: ST_TO_ADDR
73811: LD_EXP 10
73815: PUSH
73816: FOR_TO
73817: IFFALSE 73862
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
73819: LD_ADDR_VAR 0 1
73823: PUSH
73824: LD_VAR 0 1
73828: PUSH
73829: LD_STRING #KingoftheHill-Team
73831: PUSH
73832: LD_VAR 0 2
73836: PUSH
73837: LD_EXP 115
73841: PUSH
73842: LD_VAR 0 2
73846: ARRAY
73847: PUSH
73848: LD_EXP 34
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: ADD
73859: ST_TO_ADDR
73860: GO 73816
73862: POP
73863: POP
// end else
73864: GO 73939
// begin for i := 1 to 8 do
73866: LD_ADDR_VAR 0 2
73870: PUSH
73871: DOUBLE
73872: LD_INT 1
73874: DEC
73875: ST_TO_ADDR
73876: LD_INT 8
73878: PUSH
73879: FOR_TO
73880: IFFALSE 73937
// if mpSidePositions [ i ] then
73882: LD_EXP 7
73886: PUSH
73887: LD_VAR 0 2
73891: ARRAY
73892: IFFALSE 73935
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
73894: LD_ADDR_VAR 0 1
73898: PUSH
73899: LD_VAR 0 1
73903: PUSH
73904: LD_STRING #KingoftheHill-Player
73906: PUSH
73907: LD_VAR 0 2
73911: PUSH
73912: LD_EXP 115
73916: PUSH
73917: LD_VAR 0 2
73921: ARRAY
73922: PUSH
73923: LD_EXP 34
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: ADD
73934: ST_TO_ADDR
73935: GO 73879
73937: POP
73938: POP
// end ; mpDisplayStrings := result ;
73939: LD_ADDR_EXP 37
73943: PUSH
73944: LD_VAR 0 1
73948: ST_TO_ADDR
// end ;
73949: LD_VAR 0 1
73953: RET
// export function HowMuchPointsKing ( side ) ; begin
73954: LD_INT 0
73956: PPUSH
// result := HowMuchPoints ( side ) ;
73957: LD_ADDR_VAR 0 2
73961: PUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: CALL 73977 0 1
73971: ST_TO_ADDR
// end ;
73972: LD_VAR 0 2
73976: RET
// function HowMuchPoints ( side ) ; var i ; begin
73977: LD_INT 0
73979: PPUSH
73980: PPUSH
// if mpTeamGame then
73981: LD_EXP 11
73985: IFFALSE 74054
// begin for i := 1 to Count ( mpTeams ) do
73987: LD_ADDR_VAR 0 3
73991: PUSH
73992: DOUBLE
73993: LD_INT 1
73995: DEC
73996: ST_TO_ADDR
73997: LD_EXP 10
74001: PPUSH
74002: CALL 10980 0 1
74006: PUSH
74007: FOR_TO
74008: IFFALSE 74050
// begin if side in mpTeams [ i ] then
74010: LD_VAR 0 1
74014: PUSH
74015: LD_EXP 10
74019: PUSH
74020: LD_VAR 0 3
74024: ARRAY
74025: IN
74026: IFFALSE 74048
// begin result := mpKingPoints [ i ] ;
74028: LD_ADDR_VAR 0 2
74032: PUSH
74033: LD_EXP 115
74037: PUSH
74038: LD_VAR 0 3
74042: ARRAY
74043: ST_TO_ADDR
// exit ;
74044: POP
74045: POP
74046: GO 74070
// end ; end ;
74048: GO 74007
74050: POP
74051: POP
// end else
74052: GO 74070
// result := mpKingPoints [ side ] ;
74054: LD_ADDR_VAR 0 2
74058: PUSH
74059: LD_EXP 115
74063: PUSH
74064: LD_VAR 0 1
74068: ARRAY
74069: ST_TO_ADDR
// end ;
74070: LD_VAR 0 2
74074: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
74075: LD_EXP 38
74079: PUSH
74080: CALL 74402 0 0
74084: AND
74085: PUSH
74086: LD_OWVAR 4
74090: AND
74091: IFFALSE 74327
74093: GO 74095
74095: DISABLE
74096: LD_INT 0
74098: PPUSH
74099: PPUSH
// begin canWin := false ;
74100: LD_ADDR_VAR 0 2
74104: PUSH
74105: LD_INT 0
74107: ST_TO_ADDR
// if not HasPower ( your_side ) then
74108: LD_OWVAR 2
74112: PPUSH
74113: CALL 74442 0 1
74117: NOT
74118: IFFALSE 74129
// begin Multiplayer_Loose_Message ;
74120: CALL_OW 521
// enable ( mpLose ) ;
74124: LD_INT 102
74126: ENABLE_MARKED
// end else
74127: GO 74327
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
74129: LD_ADDR_VAR 0 2
74133: PUSH
74134: LD_OWVAR 2
74138: PPUSH
74139: CALL 73977 0 1
74143: PUSH
74144: LD_EXP 34
74148: GREATEREQUAL
74149: PUSH
74150: LD_OWVAR 2
74154: PPUSH
74155: CALL 74442 0 1
74159: AND
74160: PUSH
74161: CALL 74330 0 0
74165: NOT
74166: OR
74167: ST_TO_ADDR
// for i := 1 to 8 do
74168: LD_ADDR_VAR 0 1
74172: PUSH
74173: DOUBLE
74174: LD_INT 1
74176: DEC
74177: ST_TO_ADDR
74178: LD_INT 8
74180: PUSH
74181: FOR_TO
74182: IFFALSE 74313
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
74184: LD_EXP 7
74188: PUSH
74189: LD_VAR 0 1
74193: ARRAY
74194: PUSH
74195: LD_VAR 0 1
74199: PPUSH
74200: CALL_OW 108
74204: AND
74205: PUSH
74206: LD_VAR 0 1
74210: PUSH
74211: LD_OWVAR 2
74215: NONEQUAL
74216: AND
74217: IFFALSE 74311
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
74219: LD_EXP 8
74223: PUSH
74224: LD_VAR 0 1
74228: ARRAY
74229: NOT
74230: PUSH
74231: LD_EXP 8
74235: PUSH
74236: LD_VAR 0 1
74240: ARRAY
74241: PUSH
74242: LD_EXP 8
74246: PUSH
74247: LD_OWVAR 2
74251: ARRAY
74252: NONEQUAL
74253: PUSH
74254: LD_OWVAR 2
74258: PPUSH
74259: LD_VAR 0 1
74263: PPUSH
74264: CALL_OW 81
74268: PUSH
74269: LD_INT 1
74271: NONEQUAL
74272: AND
74273: OR
74274: IFFALSE 74311
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
74276: LD_VAR 0 1
74280: PPUSH
74281: CALL 73977 0 1
74285: PUSH
74286: LD_EXP 34
74290: GREATEREQUAL
74291: PUSH
74292: LD_VAR 0 1
74296: PPUSH
74297: CALL 74442 0 1
74301: AND
74302: IFFALSE 74311
// begin enable ( mpLose ) ;
74304: LD_INT 102
74306: ENABLE_MARKED
// exit ;
74307: POP
74308: POP
74309: GO 74327
// end ;
74311: GO 74181
74313: POP
74314: POP
// if canWin then
74315: LD_VAR 0 2
74319: IFFALSE 74326
// enable ( mpWin ) else
74321: LD_INT 101
74323: ENABLE_MARKED
74324: GO 74327
// enable ;
74326: ENABLE
// end ; end ;
74327: PPOPN 2
74329: END
// function EnemiesInGame ; var i ; begin
74330: LD_INT 0
74332: PPUSH
74333: PPUSH
// result := false ;
74334: LD_ADDR_VAR 0 1
74338: PUSH
74339: LD_INT 0
74341: ST_TO_ADDR
// for i := 1 to 8 do
74342: LD_ADDR_VAR 0 2
74346: PUSH
74347: DOUBLE
74348: LD_INT 1
74350: DEC
74351: ST_TO_ADDR
74352: LD_INT 8
74354: PUSH
74355: FOR_TO
74356: IFFALSE 74395
// if i <> your_side and HasPower ( i ) then
74358: LD_VAR 0 2
74362: PUSH
74363: LD_OWVAR 2
74367: NONEQUAL
74368: PUSH
74369: LD_VAR 0 2
74373: PPUSH
74374: CALL 74442 0 1
74378: AND
74379: IFFALSE 74393
// begin result := true ;
74381: LD_ADDR_VAR 0 1
74385: PUSH
74386: LD_INT 1
74388: ST_TO_ADDR
// exit ;
74389: POP
74390: POP
74391: GO 74397
// end ;
74393: GO 74355
74395: POP
74396: POP
// end ;
74397: LD_VAR 0 1
74401: RET
// function CanWinLoose ; begin
74402: LD_INT 0
74404: PPUSH
// result := true ;
74405: LD_ADDR_VAR 0 1
74409: PUSH
74410: LD_INT 1
74412: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
74413: CALL_OW 531
74417: PUSH
74418: CALL_OW 519
74422: PUSH
74423: LD_INT 1
74425: GREATER
74426: AND
74427: IFFALSE 74437
// result := false ;
74429: LD_ADDR_VAR 0 1
74433: PUSH
74434: LD_INT 0
74436: ST_TO_ADDR
// end ;
74437: LD_VAR 0 1
74441: RET
// function HasPower ( i ) ; begin
74442: LD_INT 0
74444: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
74445: LD_ADDR_VAR 0 2
74449: PUSH
74450: LD_INT 22
74452: PUSH
74453: LD_VAR 0 1
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: LD_INT 2
74464: PUSH
74465: LD_INT 21
74467: PUSH
74468: LD_INT 1
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 33
74477: PUSH
74478: LD_INT 3
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 33
74487: PUSH
74488: LD_INT 5
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PPUSH
74505: CALL_OW 69
74509: ST_TO_ADDR
// end ;
74510: LD_VAR 0 2
74514: RET
