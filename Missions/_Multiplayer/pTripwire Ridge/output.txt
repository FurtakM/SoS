// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3043 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 33
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 36
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 35
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 32
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 51390 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 51390 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 51390 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 51390 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 51390 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 51390 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 11242 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 51223 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 51223 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 51223 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 51223 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 51223 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 51223 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 51223 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 51223 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 51223 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 51223 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 51223 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 51223 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 51390 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 51390 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 51390 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 51390 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 51390 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 51390 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 51390 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 51390 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 51390 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 51390 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 51390 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 51390 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 51390 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 51390 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 51390 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 51390 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 51390 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 51390 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 48212 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 52098 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7565 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 52115 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8168 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 52156 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8221 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpDepots := [ ] ;
2799: LD_ADDR_EXP 14
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpBuildings := [ ] ;
2806: LD_ADDR_EXP 17
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2813: LD_ADDR_EXP 18
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2820: LD_ADDR_EXP 19
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2827: LD_ADDR_EXP 20
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpStartingResources := [ ] ;
2834: LD_ADDR_EXP 15
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpStartPos := [ ] ;
2841: LD_ADDR_EXP 21
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2848: LD_ADDR_EXP 22
2852: PUSH
2853: LD_INT 1
2855: NEG
2856: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2857: LD_ADDR_EXP 23
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpApemans := [ ] ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// mpApemansArea := [ ] ;
2871: LD_ADDR_EXP 31
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpRespawn := [ ] ;
2878: LD_ADDR_EXP 32
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpKingArea := 0 ;
2885: LD_ADDR_EXP 33
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// mpPoints := [ ] ;
2893: LD_ADDR_EXP 34
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpVehicles := 0 ;
2900: LD_ADDR_EXP 35
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// mpShipments := 0 ;
2908: LD_ADDR_EXP 27
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2916: LD_ADDR_EXP 39
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: PUSH
2925: EMPTY
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: ST_TO_ADDR
// mpEmissions := 0 ;
2947: LD_ADDR_EXP 36
2951: PUSH
2952: LD_INT 0
2954: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2955: LD_ADDR_EXP 25
2959: PUSH
2960: LD_INT 3
2962: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2963: LD_ADDR_EXP 24
2967: PUSH
2968: LD_INT 15
2970: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2971: LD_ADDR_EXP 37
2975: PUSH
2976: LD_INT 0
2978: ST_TO_ADDR
// mpGameActive := false ;
2979: LD_ADDR_EXP 38
2983: PUSH
2984: LD_INT 0
2986: ST_TO_ADDR
// mpBlockRespThread := false ;
2987: LD_ADDR_EXP 40
2991: PUSH
2992: LD_INT 0
2994: ST_TO_ADDR
// for i := 1 to 32 do
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 32
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3036
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3011: LD_ADDR_EXP 6
3015: PUSH
3016: LD_EXP 6
3020: PPUSH
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_INT 0
3028: PPUSH
3029: CALL_OW 1
3033: ST_TO_ADDR
3034: GO 3008
3036: POP
3037: POP
// end ;
3038: LD_VAR 0 1
3042: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3059: LD_ADDR_VAR 0 14
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: LD_INT 3
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
// for i in gameTypes do
3078: LD_ADDR_VAR 0 2
3082: PUSH
3083: LD_VAR 0 14
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3098
// disable ( i ) ;
3091: LD_VAR 0 2
3095: DISABLE_MARKED
3096: GO 3088
3098: POP
3099: POP
// if Multiplayer then
3100: LD_OWVAR 4
3104: IFFALSE 3288
// begin mpGameType := mp_game_type ;
3106: LD_ADDR_EXP 3
3110: PUSH
3111: LD_OWVAR 6
3115: ST_TO_ADDR
// your_side := mp_player_side ;
3116: LD_ADDR_OWVAR 2
3120: PUSH
3121: LD_OWVAR 7
3125: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3126: LD_ADDR_EXP 7
3130: PUSH
3131: LD_OWVAR 17
3135: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3136: LD_ADDR_EXP 8
3140: PUSH
3141: LD_OWVAR 15
3145: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3146: LD_ADDR_EXP 9
3150: PUSH
3151: LD_OWVAR 16
3155: ST_TO_ADDR
// mpTeams := mp_teams ;
3156: LD_ADDR_EXP 10
3160: PUSH
3161: LD_OWVAR 12
3165: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3166: LD_ADDR_VAR 0 2
3170: PUSH
3171: DOUBLE
3172: LD_INT 1
3174: DEC
3175: ST_TO_ADDR
3176: LD_EXP 4
3180: PPUSH
3181: CALL 11242 0 1
3185: PUSH
3186: FOR_TO
3187: IFFALSE 3263
// begin setting := mpGameSettingsKeys [ i ] ;
3189: LD_ADDR_VAR 0 12
3193: PUSH
3194: LD_EXP 4
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: ST_TO_ADDR
// if setting then
3205: LD_VAR 0 12
3209: IFFALSE 3261
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3211: LD_ADDR_EXP 6
3215: PUSH
3216: LD_EXP 6
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_EXP 5
3230: PUSH
3231: LD_VAR 0 2
3235: ARRAY
3236: PUSH
3237: LD_VAR 0 2
3241: PUSH
3242: LD_INT 1
3244: MINUS
3245: PPUSH
3246: CALL_OW 426
3250: PUSH
3251: LD_INT 1
3253: PLUS
3254: ARRAY
3255: PPUSH
3256: CALL_OW 1
3260: ST_TO_ADDR
// end ;
3261: GO 3186
3263: POP
3264: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3265: LD_ADDR_EXP 11
3269: PUSH
3270: LD_EXP 8
3274: PUSH
3275: LD_INT 0
3277: PUSH
3278: EMPTY
3279: LIST
3280: DIFF
3281: PUSH
3282: LD_INT 1
3284: GREATER
3285: ST_TO_ADDR
// end else
3286: GO 3288
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3288: LD_EXP 3
3292: PPUSH
3293: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3297: LD_EXP 18
3301: PPUSH
3302: CALL 11242 0 1
3306: IFFALSE 3337
// begin for i in mpMarkedAreas do
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: LD_EXP 18
3317: PUSH
3318: FOR_IN
3319: IFFALSE 3335
// SetAreaMapShow ( i , 0 ) ;
3321: LD_VAR 0 2
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 424
3333: GO 3318
3335: POP
3336: POP
// end ; for i := 1 to 8 do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 8
3349: PUSH
3350: FOR_TO
3351: IFFALSE 4567
// begin if not mpSidePositions [ i ] then
3353: LD_EXP 7
3357: PUSH
3358: LD_VAR 0 2
3362: ARRAY
3363: NOT
3364: IFFALSE 3368
// continue ;
3366: GO 3350
// side := i ;
3368: LD_ADDR_VAR 0 7
3372: PUSH
3373: LD_VAR 0 2
3377: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3378: LD_ADDR_VAR 0 9
3382: PUSH
3383: LD_EXP 9
3387: PUSH
3388: LD_VAR 0 2
3392: ARRAY
3393: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3394: LD_ADDR_VAR 0 8
3398: PUSH
3399: LD_EXP 7
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3410: LD_EXP 12
3414: PPUSH
3415: CALL 11242 0 1
3419: IFFALSE 3496
// begin for j in mpOilDeposits [ pos ] do
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_EXP 12
3430: PUSH
3431: LD_VAR 0 8
3435: ARRAY
3436: PUSH
3437: FOR_IN
3438: IFFALSE 3494
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_VAR 0 3
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_INT 2
3460: PPUSH
3461: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3465: LD_VAR 0 3
3469: PUSH
3470: LD_INT 1
3472: ARRAY
3473: PPUSH
3474: LD_VAR 0 3
3478: PUSH
3479: LD_INT 2
3481: ARRAY
3482: PPUSH
3483: LD_VAR 0 7
3487: PPUSH
3488: CALL_OW 441
// end ;
3492: GO 3437
3494: POP
3495: POP
// end ; if Count ( mpSibDeposits ) then
3496: LD_EXP 13
3500: PPUSH
3501: CALL 11242 0 1
3505: IFFALSE 3582
// begin for j in mpSibDeposits [ pos ] do
3507: LD_ADDR_VAR 0 3
3511: PUSH
3512: LD_EXP 13
3516: PUSH
3517: LD_VAR 0 8
3521: ARRAY
3522: PUSH
3523: FOR_IN
3524: IFFALSE 3580
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3526: LD_VAR 0 3
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: LD_VAR 0 3
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3551: LD_VAR 0 3
3555: PUSH
3556: LD_INT 1
3558: ARRAY
3559: PPUSH
3560: LD_VAR 0 3
3564: PUSH
3565: LD_INT 2
3567: ARRAY
3568: PPUSH
3569: LD_VAR 0 7
3573: PPUSH
3574: CALL_OW 441
// end ;
3578: GO 3523
3580: POP
3581: POP
// end ; InitBc ;
3582: CALL_OW 21
// InitUc ;
3586: CALL_OW 18
// uc_side := side ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_VAR 0 7
3599: ST_TO_ADDR
// uc_nation := nation ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: LD_VAR 0 9
3609: ST_TO_ADDR
// if Count ( mpDepots ) then
3610: LD_EXP 14
3614: PPUSH
3615: CALL 11242 0 1
3619: IFFALSE 3789
// begin bc_level := 0 ;
3621: LD_ADDR_OWVAR 43
3625: PUSH
3626: LD_INT 0
3628: ST_TO_ADDR
// bc_type := b_depot ;
3629: LD_ADDR_OWVAR 42
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3637: LD_ADDR_VAR 0 4
3641: PUSH
3642: LD_EXP 14
3646: PUSH
3647: LD_VAR 0 8
3651: ARRAY
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: LD_EXP 14
3661: PUSH
3662: LD_VAR 0 8
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: PPUSH
3672: LD_EXP 14
3676: PUSH
3677: LD_VAR 0 8
3681: ARRAY
3682: PUSH
3683: LD_INT 3
3685: ARRAY
3686: PPUSH
3687: CALL_OW 47
3691: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3692: LD_VAR 0 4
3696: PPUSH
3697: LD_STRING @
3699: PUSH
3700: LD_VAR 0 7
3704: STR
3705: PPUSH
3706: CALL_OW 500
// SetTag ( b , side ) ;
3710: LD_VAR 0 4
3714: PPUSH
3715: LD_VAR 0 7
3719: PPUSH
3720: CALL_OW 109
// if Count ( mpStartingResources ) then
3724: LD_EXP 15
3728: PPUSH
3729: CALL 11242 0 1
3733: IFFALSE 3787
// begin for j := 1 to mpStartingResources do
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: DOUBLE
3741: LD_INT 1
3743: DEC
3744: ST_TO_ADDR
3745: LD_EXP 15
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3785
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3753: LD_VAR 0 4
3757: PPUSH
3758: CALL_OW 274
3762: PPUSH
3763: LD_VAR 0 3
3767: PPUSH
3768: LD_EXP 15
3772: PUSH
3773: LD_VAR 0 3
3777: ARRAY
3778: PPUSH
3779: CALL_OW 277
3783: GO 3750
3785: POP
3786: POP
// end ; end else
3787: GO 3936
// if Count ( mpStartingResources ) then
3789: LD_EXP 15
3793: PPUSH
3794: CALL 11242 0 1
3798: IFFALSE 3936
// begin for j := 1 to mpStartingResources do
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: DOUBLE
3806: LD_INT 1
3808: DEC
3809: ST_TO_ADDR
3810: LD_EXP 15
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3934
// begin resources := mpStartingResources [ j ] ;
3818: LD_ADDR_VAR 0 13
3822: PUSH
3823: LD_EXP 15
3827: PUSH
3828: LD_VAR 0 3
3832: ARRAY
3833: ST_TO_ADDR
// repeat if resources >= 50 then
3834: LD_VAR 0 13
3838: PUSH
3839: LD_INT 50
3841: GREATEREQUAL
3842: IFFALSE 3888
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 5
3851: PPUSH
3852: LD_VAR 0 5
3856: PPUSH
3857: LD_VAR 0 6
3861: PPUSH
3862: LD_INT 4
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 60
// resources := resources - 50 ;
3872: LD_ADDR_VAR 0 13
3876: PUSH
3877: LD_VAR 0 13
3881: PUSH
3882: LD_INT 50
3884: MINUS
3885: ST_TO_ADDR
// end else
3886: GO 3922
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_VAR 0 13
3897: PUSH
3898: LD_INT 10
3900: DIV
3901: PPUSH
3902: LD_VAR 0 5
3906: PPUSH
3907: LD_VAR 0 6
3911: PPUSH
3912: LD_INT 4
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 60
// until resources <= 0 ;
3922: LD_VAR 0 13
3926: PUSH
3927: LD_INT 0
3929: LESSEQUAL
3930: IFFALSE 3834
// end ;
3932: GO 3815
3934: POP
3935: POP
// end ; if Count ( mpBuildings ) then
3936: LD_EXP 17
3940: PPUSH
3941: CALL 11242 0 1
3945: IFFALSE 4023
// begin for j in mpBuildings [ pos ] do
3947: LD_ADDR_VAR 0 3
3951: PUSH
3952: LD_EXP 17
3956: PUSH
3957: LD_VAR 0 8
3961: ARRAY
3962: PUSH
3963: FOR_IN
3964: IFFALSE 4021
// begin bc_level := 0 ;
3966: LD_ADDR_OWVAR 43
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3974: LD_ADDR_OWVAR 42
3978: PUSH
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3988: LD_VAR 0 3
3992: PUSH
3993: LD_INT 2
3995: ARRAY
3996: PPUSH
3997: LD_VAR 0 3
4001: PUSH
4002: LD_INT 3
4004: ARRAY
4005: PPUSH
4006: LD_VAR 0 3
4010: PUSH
4011: LD_INT 4
4013: ARRAY
4014: PPUSH
4015: CALL_OW 47
// end ;
4019: GO 3963
4021: POP
4022: POP
// end ; if mpBattleFlag > - 1 then
4023: LD_EXP 22
4027: PUSH
4028: LD_INT 1
4030: NEG
4031: GREATER
4032: IFFALSE 4191
// begin x := mpStartPos [ pos ] [ 1 ] ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: LD_EXP 21
4043: PUSH
4044: LD_VAR 0 8
4048: ARRAY
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4054: LD_ADDR_VAR 0 6
4058: PUSH
4059: LD_EXP 21
4063: PUSH
4064: LD_VAR 0 8
4068: ARRAY
4069: PUSH
4070: LD_INT 2
4072: ARRAY
4073: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4074: LD_VAR 0 5
4078: PPUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 12
4086: PPUSH
4087: LD_INT 2
4089: PPUSH
4090: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4094: LD_ADDR_EXP 23
4098: PUSH
4099: LD_EXP 23
4103: PPUSH
4104: LD_VAR 0 7
4108: PPUSH
4109: LD_VAR 0 7
4113: PPUSH
4114: LD_VAR 0 5
4118: PPUSH
4119: LD_VAR 0 6
4123: PPUSH
4124: LD_INT 1
4126: PUSH
4127: LD_INT 100
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 70
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: LD_INT 40
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 10
4156: PUSH
4157: LD_INT 25
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 20
4166: PUSH
4167: LD_INT 100
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 418
4185: PPUSH
4186: CALL_OW 1
4190: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4191: LD_EXP 26
4195: PUSH
4196: LD_INT 20
4198: PPUSH
4199: LD_VAR 0 7
4203: PPUSH
4204: CALL_OW 321
4208: PUSH
4209: LD_INT 1
4211: EQUAL
4212: AND
4213: IFFALSE 4230
// SetTech ( tech_SibDet , side , state_researched ) ;
4215: LD_INT 20
4217: PPUSH
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 2
4225: PPUSH
4226: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4230: LD_INT 24
4232: PPUSH
4233: LD_VAR 0 7
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 322
// if mpSibBomb = 1 then
4245: LD_EXP 28
4249: PUSH
4250: LD_INT 1
4252: EQUAL
4253: IFFALSE 4272
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4255: LD_INT 25
4257: PPUSH
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 1
4265: PPUSH
4266: CALL_OW 322
// end else
4270: GO 4287
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4272: LD_INT 25
4274: PPUSH
4275: LD_VAR 0 7
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 322
// end ; if mpVehicles then
4287: LD_EXP 35
4291: IFFALSE 4390
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: LD_VAR 0 7
4302: PPUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_EXP 35
4312: PPUSH
4313: CALL 5477 0 3
4317: PUSH
4318: FOR_IN
4319: IFFALSE 4388
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4321: LD_VAR 0 3
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: CALL_OW 12
4336: PPUSH
4337: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4341: LD_VAR 0 3
4345: PPUSH
4346: LD_EXP 21
4350: PUSH
4351: LD_VAR 0 8
4355: ARRAY
4356: PUSH
4357: LD_INT 1
4359: ARRAY
4360: PPUSH
4361: LD_EXP 21
4365: PUSH
4366: LD_VAR 0 8
4370: ARRAY
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 12
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 50
// end ;
4386: GO 4318
4388: POP
4389: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4390: LD_ADDR_VAR 0 11
4394: PUSH
4395: LD_VAR 0 7
4399: PPUSH
4400: LD_VAR 0 9
4404: PPUSH
4405: LD_EXP 24
4409: PPUSH
4410: LD_EXP 25
4414: PPUSH
4415: CALL 4979 0 4
4419: ST_TO_ADDR
// for j in team do
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_VAR 0 11
4429: PUSH
4430: FOR_IN
4431: IFFALSE 4480
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4433: LD_VAR 0 3
4437: PPUSH
4438: LD_EXP 21
4442: PUSH
4443: LD_VAR 0 8
4447: ARRAY
4448: PUSH
4449: LD_INT 1
4451: ARRAY
4452: PPUSH
4453: LD_EXP 21
4457: PUSH
4458: LD_VAR 0 8
4462: ARRAY
4463: PUSH
4464: LD_INT 2
4466: ARRAY
4467: PPUSH
4468: LD_INT 12
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: CALL_OW 50
4478: GO 4430
4480: POP
4481: POP
// if mpApemans then
4482: LD_EXP 30
4486: IFFALSE 4565
// begin for j := 1 to mpApemans do
4488: LD_ADDR_VAR 0 3
4492: PUSH
4493: DOUBLE
4494: LD_INT 1
4496: DEC
4497: ST_TO_ADDR
4498: LD_EXP 30
4502: PUSH
4503: FOR_TO
4504: IFFALSE 4563
// begin PrepareApeman ( - 5 ) ;
4506: LD_INT 5
4508: NEG
4509: PPUSH
4510: CALL 43099 0 1
// ape := CreateHuman ;
4514: LD_ADDR_VAR 0 10
4518: PUSH
4519: CALL_OW 44
4523: ST_TO_ADDR
// SetTag ( ape , side ) ;
4524: LD_VAR 0 10
4528: PPUSH
4529: LD_VAR 0 7
4533: PPUSH
4534: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4538: LD_VAR 0 10
4542: PPUSH
4543: LD_EXP 31
4547: PUSH
4548: LD_VAR 0 8
4552: ARRAY
4553: PPUSH
4554: LD_INT 0
4556: PPUSH
4557: CALL_OW 49
// end ;
4561: GO 4503
4563: POP
4564: POP
// end ; end ;
4565: GO 3350
4567: POP
4568: POP
// if not mpTeamGame then
4569: LD_EXP 11
4573: NOT
4574: IFFALSE 4672
// begin for i := 1 to 8 do
4576: LD_ADDR_VAR 0 2
4580: PUSH
4581: DOUBLE
4582: LD_INT 1
4584: DEC
4585: ST_TO_ADDR
4586: LD_INT 8
4588: PUSH
4589: FOR_TO
4590: IFFALSE 4668
// for j := 1 to 8 do
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: DOUBLE
4598: LD_INT 1
4600: DEC
4601: ST_TO_ADDR
4602: LD_INT 8
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4664
// if i <> j then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_VAR 0 3
4617: NONEQUAL
4618: IFFALSE 4642
// SetAttitude ( i , j , att_neutral , true ) else
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 3
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 80
4640: GO 4662
// SetAttitude ( i , j , att_friend , true ) ;
4642: LD_VAR 0 2
4646: PPUSH
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 80
4662: GO 4605
4664: POP
4665: POP
4666: GO 4589
4668: POP
4669: POP
// end else
4670: GO 4847
// begin if mpSharedVision then
4672: LD_EXP 16
4676: IFFALSE 4741
// begin for i in mpTeams do
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_EXP 10
4687: PUSH
4688: FOR_IN
4689: IFFALSE 4739
// for j := 2 to i do
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: DOUBLE
4697: LD_INT 2
4699: DEC
4700: ST_TO_ADDR
4701: LD_VAR 0 2
4705: PUSH
4706: FOR_TO
4707: IFFALSE 4735
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4709: LD_VAR 0 2
4713: PUSH
4714: LD_VAR 0 3
4718: ARRAY
4719: PPUSH
4720: LD_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: PPUSH
4729: CALL_OW 343
4733: GO 4706
4735: POP
4736: POP
4737: GO 4688
4739: POP
4740: POP
// end ; for i := 1 to 8 do
4741: LD_ADDR_VAR 0 2
4745: PUSH
4746: DOUBLE
4747: LD_INT 1
4749: DEC
4750: ST_TO_ADDR
4751: LD_INT 8
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4845
// for j := 1 to 8 do
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: DOUBLE
4763: LD_INT 1
4765: DEC
4766: ST_TO_ADDR
4767: LD_INT 8
4769: PUSH
4770: FOR_TO
4771: IFFALSE 4841
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4773: LD_EXP 8
4777: PUSH
4778: LD_VAR 0 2
4782: ARRAY
4783: PUSH
4784: LD_EXP 8
4788: PUSH
4789: LD_VAR 0 3
4793: ARRAY
4794: EQUAL
4795: IFFALSE 4819
// SetAttitude ( i , j , att_friend , true ) else
4797: LD_VAR 0 2
4801: PPUSH
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: LD_INT 1
4812: PPUSH
4813: CALL_OW 80
4817: GO 4839
// SetAttitude ( i , j , att_enemy , true ) ;
4819: LD_VAR 0 2
4823: PPUSH
4824: LD_VAR 0 3
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 80
4839: GO 4770
4841: POP
4842: POP
4843: GO 4754
4845: POP
4846: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4847: LD_ADDR_OWVAR 71
4851: PUSH
4852: LD_EXP 9
4856: PUSH
4857: LD_OWVAR 2
4861: ARRAY
4862: ST_TO_ADDR
// if IAmSpec then
4863: CALL_OW 531
4867: IFFALSE 4908
// begin FogOff ( true ) ;
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4876: LD_EXP 29
4880: PUSH
4881: LD_INT 1
4883: ARRAY
4884: PUSH
4885: LD_INT 2
4887: DIV
4888: PPUSH
4889: LD_EXP 29
4893: PUSH
4894: LD_INT 2
4896: ARRAY
4897: PUSH
4898: LD_INT 2
4900: DIV
4901: PPUSH
4902: CALL_OW 86
// end else
4906: GO 4954
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4908: LD_EXP 21
4912: PUSH
4913: LD_EXP 7
4917: PUSH
4918: LD_OWVAR 2
4922: ARRAY
4923: ARRAY
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: LD_EXP 21
4933: PUSH
4934: LD_EXP 7
4938: PUSH
4939: LD_OWVAR 2
4943: ARRAY
4944: ARRAY
4945: PUSH
4946: LD_INT 2
4948: ARRAY
4949: PPUSH
4950: CALL_OW 86
// end ; BeginBuildUp ;
4954: CALL 5955 0 0
// enable ( mpActive ) ;
4958: LD_INT 100
4960: ENABLE_MARKED
// enable ( mpGameType ) ;
4961: LD_EXP 3
4965: ENABLE_MARKED
// mpGameActive := true ;
4966: LD_ADDR_EXP 38
4970: PUSH
4971: LD_INT 1
4973: ST_TO_ADDR
// end ;
4974: LD_VAR 0 1
4978: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4979: LD_INT 0
4981: PPUSH
4982: PPUSH
4983: PPUSH
4984: PPUSH
// result := [ ] ;
4985: LD_ADDR_VAR 0 5
4989: PUSH
4990: EMPTY
4991: ST_TO_ADDR
// class := class_soldier ;
4992: LD_ADDR_VAR 0 8
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// uc_side := side ;
5000: LD_ADDR_OWVAR 20
5004: PUSH
5005: LD_VAR 0 1
5009: ST_TO_ADDR
// uc_nation := nation ;
5010: LD_ADDR_OWVAR 21
5014: PUSH
5015: LD_VAR 0 2
5019: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5020: LD_ADDR_OWVAR 26
5024: PUSH
5025: LD_OWVAR 19
5029: PUSH
5030: LD_VAR 0 1
5034: ARRAY
5035: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_INT 2
5041: PPUSH
5042: CALL_OW 12
5046: PPUSH
5047: LD_VAR 0 8
5051: PPUSH
5052: LD_VAR 0 4
5056: PUSH
5057: LD_INT 2
5059: PLUS
5060: PPUSH
5061: CALL_OW 380
// hc_importance := 105 ;
5065: LD_ADDR_OWVAR 32
5069: PUSH
5070: LD_INT 105
5072: ST_TO_ADDR
// if Multiplayer then
5073: LD_OWVAR 4
5077: IFFALSE 5117
// begin hc_gallery := MULTIAVATARS ;
5079: LD_ADDR_OWVAR 33
5083: PUSH
5084: LD_STRING MULTIAVATARS
5086: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5087: LD_ADDR_OWVAR 34
5091: PUSH
5092: LD_VAR 0 1
5096: PPUSH
5097: CALL_OW 525
5101: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5102: LD_ADDR_OWVAR 27
5106: PUSH
5107: LD_VAR 0 1
5111: PPUSH
5112: CALL_OW 526
5116: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5117: LD_ADDR_VAR 0 5
5121: PUSH
5122: LD_VAR 0 5
5126: PPUSH
5127: CALL_OW 44
5131: PPUSH
5132: CALL 46851 0 2
5136: ST_TO_ADDR
// if mpTeamPreset then
5137: LD_LOC 1
5141: IFFALSE 5237
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5143: LD_LOC 1
5147: PUSH
5148: LD_INT 1
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 5
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PPUSH
5163: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5167: LD_VAR 0 5
5171: PUSH
5172: LD_VAR 0 5
5176: ARRAY
5177: PPUSH
5178: LD_INT 1
5180: PPUSH
5181: LD_LOC 1
5185: PUSH
5186: LD_INT 1
5188: ARRAY
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: CALL_OW 260
5197: PPUSH
5198: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5202: LD_VAR 0 5
5206: PUSH
5207: LD_VAR 0 5
5211: ARRAY
5212: PPUSH
5213: LD_INT 2
5215: PPUSH
5216: LD_LOC 1
5220: PUSH
5221: LD_INT 1
5223: ARRAY
5224: PPUSH
5225: LD_INT 2
5227: PPUSH
5228: CALL_OW 260
5232: PPUSH
5233: CALL_OW 239
// end ; InitHc_All ( ) ;
5237: CALL_OW 584
// class := 2 ;
5241: LD_ADDR_VAR 0 8
5245: PUSH
5246: LD_INT 2
5248: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: DOUBLE
5255: LD_INT 1
5257: DEC
5258: ST_TO_ADDR
5259: LD_VAR 0 3
5263: PUSH
5264: LD_INT 1
5266: MINUS
5267: PUSH
5268: FOR_TO
5269: IFFALSE 5453
// begin PrepareHuman ( false , class , skill ) ;
5271: LD_INT 0
5273: PPUSH
5274: LD_VAR 0 8
5278: PPUSH
5279: LD_VAR 0 4
5283: PPUSH
5284: CALL_OW 380
// un := CreateHuman ;
5288: LD_ADDR_VAR 0 7
5292: PUSH
5293: CALL_OW 44
5297: ST_TO_ADDR
// result := Join ( result , un ) ;
5298: LD_ADDR_VAR 0 5
5302: PUSH
5303: LD_VAR 0 5
5307: PPUSH
5308: LD_VAR 0 7
5312: PPUSH
5313: CALL 46851 0 2
5317: ST_TO_ADDR
// if mpTeamPreset then
5318: LD_LOC 1
5322: IFFALSE 5418
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5324: LD_LOC 1
5328: PUSH
5329: LD_VAR 0 6
5333: PUSH
5334: LD_INT 1
5336: PLUS
5337: ARRAY
5338: PPUSH
5339: LD_VAR 0 7
5343: PPUSH
5344: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5348: LD_VAR 0 7
5352: PPUSH
5353: LD_INT 1
5355: PPUSH
5356: LD_LOC 1
5360: PUSH
5361: LD_VAR 0 6
5365: PUSH
5366: LD_INT 1
5368: PLUS
5369: ARRAY
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: CALL_OW 260
5378: PPUSH
5379: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5383: LD_VAR 0 7
5387: PPUSH
5388: LD_INT 2
5390: PPUSH
5391: LD_LOC 1
5395: PUSH
5396: LD_VAR 0 6
5400: PUSH
5401: LD_INT 1
5403: PLUS
5404: ARRAY
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: CALL_OW 260
5413: PPUSH
5414: CALL_OW 239
// end ; class := Inc ( class ) ;
5418: LD_ADDR_VAR 0 8
5422: PUSH
5423: LD_VAR 0 8
5427: PPUSH
5428: CALL 48212 0 1
5432: ST_TO_ADDR
// if class = 5 then
5433: LD_VAR 0 8
5437: PUSH
5438: LD_INT 5
5440: EQUAL
5441: IFFALSE 5451
// class := 1 ;
5443: LD_ADDR_VAR 0 8
5447: PUSH
5448: LD_INT 1
5450: ST_TO_ADDR
// end ;
5451: GO 5268
5453: POP
5454: POP
// if not mpTeamPreset then
5455: LD_LOC 1
5459: NOT
5460: IFFALSE 5472
// mpTeamPreset := result ;
5462: LD_ADDR_LOC 1
5466: PUSH
5467: LD_VAR 0 5
5471: ST_TO_ADDR
// end ;
5472: LD_VAR 0 5
5476: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5477: LD_INT 0
5479: PPUSH
5480: PPUSH
// result := [ ] ;
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: EMPTY
5487: ST_TO_ADDR
// if not vehicles then
5488: LD_VAR 0 3
5492: NOT
5493: IFFALSE 5497
// exit ;
5495: GO 5656
// for i := 1 to vehicles [ nation ] do
5497: LD_ADDR_VAR 0 5
5501: PUSH
5502: DOUBLE
5503: LD_INT 1
5505: DEC
5506: ST_TO_ADDR
5507: LD_VAR 0 3
5511: PUSH
5512: LD_VAR 0 2
5516: ARRAY
5517: PUSH
5518: FOR_TO
5519: IFFALSE 5654
// begin uc_side := side ;
5521: LD_ADDR_OWVAR 20
5525: PUSH
5526: LD_VAR 0 1
5530: ST_TO_ADDR
// uc_nation := nation ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_VAR 0 2
5540: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5541: LD_VAR 0 3
5545: PUSH
5546: LD_VAR 0 2
5550: ARRAY
5551: PUSH
5552: LD_VAR 0 5
5556: ARRAY
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_VAR 0 3
5566: PUSH
5567: LD_VAR 0 2
5571: ARRAY
5572: PUSH
5573: LD_VAR 0 5
5577: ARRAY
5578: PUSH
5579: LD_INT 2
5581: ARRAY
5582: PPUSH
5583: LD_VAR 0 3
5587: PUSH
5588: LD_VAR 0 2
5592: ARRAY
5593: PUSH
5594: LD_VAR 0 5
5598: ARRAY
5599: PUSH
5600: LD_INT 3
5602: ARRAY
5603: PPUSH
5604: LD_VAR 0 3
5608: PUSH
5609: LD_VAR 0 2
5613: ARRAY
5614: PUSH
5615: LD_VAR 0 5
5619: ARRAY
5620: PUSH
5621: LD_INT 4
5623: ARRAY
5624: PPUSH
5625: LD_INT 80
5627: PPUSH
5628: CALL 13980 0 5
// result := Join ( result , CreateVehicle ) ;
5632: LD_ADDR_VAR 0 4
5636: PUSH
5637: LD_VAR 0 4
5641: PPUSH
5642: CALL_OW 45
5646: PPUSH
5647: CALL 46851 0 2
5651: ST_TO_ADDR
// end ;
5652: GO 5518
5654: POP
5655: POP
// end ;
5656: LD_VAR 0 4
5660: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5661: LD_INT 0
5663: PPUSH
5664: PPUSH
// for i in mpBattleFlags do
5665: LD_ADDR_VAR 0 3
5669: PUSH
5670: LD_EXP 23
5674: PUSH
5675: FOR_IN
5676: IFFALSE 5753
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5678: LD_VAR 0 3
5682: PPUSH
5683: LD_INT 1
5685: PUSH
5686: LD_VAR 0 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 2
5697: PUSH
5698: LD_VAR 0 1
5702: PUSH
5703: LD_REAL  7.00000000000000E-0001
5706: MUL
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: LD_INT 3
5714: PUSH
5715: LD_VAR 0 1
5719: PUSH
5720: LD_REAL  4.00000000000000E-0001
5723: MUL
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 20
5731: PUSH
5732: LD_VAR 0 1
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 423
5751: GO 5675
5753: POP
5754: POP
// end ;
5755: LD_VAR 0 2
5759: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5760: LD_INT 100
5762: IFFALSE 5857
5764: GO 5766
5766: DISABLE
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
// begin if mpBattleFlag <= 0 then
5771: LD_EXP 22
5775: PUSH
5776: LD_INT 0
5778: LESSEQUAL
5779: IFFALSE 5783
// exit ;
5781: GO 5857
// strength := 100 ;
5783: LD_ADDR_VAR 0 2
5787: PUSH
5788: LD_INT 100
5790: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5791: LD_EXP 22
5795: PPUSH
5796: CALL_OW 67
// strength := Dec ( strength ) ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: CALL 48234 0 1
5814: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5815: LD_VAR 0 2
5819: PPUSH
5820: CALL 5661 0 1
// until not strength ;
5824: LD_VAR 0 2
5828: NOT
5829: IFFALSE 5791
// for i in mpBattleFlags do
5831: LD_ADDR_VAR 0 1
5835: PUSH
5836: LD_EXP 23
5840: PUSH
5841: FOR_IN
5842: IFFALSE 5855
// KillBattleFlag ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 419
5853: GO 5841
5855: POP
5856: POP
// end ;
5857: PPOPN 2
5859: END
// every 0 0$1 marked mpActive do var side , tmp ;
5860: GO 5862
5862: DISABLE
5863: LD_INT 0
5865: PPUSH
5866: PPUSH
// begin if mpSibBomb <= 1 then
5867: LD_EXP 28
5871: PUSH
5872: LD_INT 1
5874: LESSEQUAL
5875: IFFALSE 5879
// exit ;
5877: GO 5952
// tmp := mpSibBomb ;
5879: LD_ADDR_VAR 0 2
5883: PUSH
5884: LD_EXP 28
5888: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5889: LD_INT 35
5891: PPUSH
5892: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: LD_VAR 0 2
5905: PUSH
5906: LD_INT 35
5908: MINUS
5909: ST_TO_ADDR
// until not tmp ;
5910: LD_VAR 0 2
5914: NOT
5915: IFFALSE 5889
// for side := 1 to 8 do
5917: LD_ADDR_VAR 0 1
5921: PUSH
5922: DOUBLE
5923: LD_INT 1
5925: DEC
5926: ST_TO_ADDR
5927: LD_INT 8
5929: PUSH
5930: FOR_TO
5931: IFFALSE 5950
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5933: LD_INT 25
5935: PPUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: CALL_OW 322
5948: GO 5930
5950: POP
5951: POP
// end ;
5952: PPOPN 2
5954: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5955: LD_INT 0
5957: PPUSH
5958: PPUSH
5959: PPUSH
// mpBuildUpTimeDelay := 0 ;
5960: LD_ADDR_EXP 41
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not mpBuildUpTime then
5968: LD_EXP 20
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6160
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5977: LD_ADDR_EXP 41
5981: PUSH
5982: LD_INT 8400
5984: PUSH
5985: LD_INT 2100
5987: PUSH
5988: LD_EXP 20
5992: MUL
5993: PLUS
5994: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5995: LD_ADDR_EXP 42
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// for i := 1 to 8 do
6003: LD_ADDR_VAR 0 2
6007: PUSH
6008: DOUBLE
6009: LD_INT 1
6011: DEC
6012: ST_TO_ADDR
6013: LD_INT 8
6015: PUSH
6016: FOR_TO
6017: IFFALSE 6158
// if mpSidePositions [ i ] then
6019: LD_EXP 7
6023: PUSH
6024: LD_VAR 0 2
6028: ARRAY
6029: IFFALSE 6156
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6031: LD_EXP 19
6035: PUSH
6036: LD_EXP 7
6040: PUSH
6041: LD_VAR 0 2
6045: ARRAY
6046: ARRAY
6047: PPUSH
6048: LD_INT 5
6050: PPUSH
6051: CALL_OW 424
// for j := 1 to 8 do
6055: LD_ADDR_VAR 0 3
6059: PUSH
6060: DOUBLE
6061: LD_INT 1
6063: DEC
6064: ST_TO_ADDR
6065: LD_INT 8
6067: PUSH
6068: FOR_TO
6069: IFFALSE 6154
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6071: LD_EXP 7
6075: PUSH
6076: LD_VAR 0 3
6080: ARRAY
6081: PUSH
6082: LD_EXP 8
6086: PUSH
6087: LD_VAR 0 2
6091: ARRAY
6092: PUSH
6093: LD_EXP 8
6097: PUSH
6098: LD_VAR 0 3
6102: ARRAY
6103: NONEQUAL
6104: PUSH
6105: LD_EXP 11
6109: NOT
6110: PUSH
6111: LD_VAR 0 2
6115: PUSH
6116: LD_VAR 0 3
6120: NONEQUAL
6121: AND
6122: OR
6123: AND
6124: IFFALSE 6152
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6126: LD_VAR 0 3
6130: PPUSH
6131: LD_EXP 19
6135: PUSH
6136: LD_EXP 7
6140: PUSH
6141: LD_VAR 0 2
6145: ARRAY
6146: ARRAY
6147: PPUSH
6148: CALL_OW 333
6152: GO 6068
6154: POP
6155: POP
// end ;
6156: GO 6016
6158: POP
6159: POP
// end ;
6160: LD_VAR 0 1
6164: RET
// function EndBuildUp ; var i , j ; begin
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
// mpBuildUpTimeActive := false ;
6170: LD_ADDR_EXP 42
6174: PUSH
6175: LD_INT 0
6177: ST_TO_ADDR
// for i := 1 to 8 do
6178: LD_ADDR_VAR 0 2
6182: PUSH
6183: DOUBLE
6184: LD_INT 1
6186: DEC
6187: ST_TO_ADDR
6188: LD_INT 8
6190: PUSH
6191: FOR_TO
6192: IFFALSE 6333
// if mpSidePositions [ i ] then
6194: LD_EXP 7
6198: PUSH
6199: LD_VAR 0 2
6203: ARRAY
6204: IFFALSE 6331
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6206: LD_EXP 19
6210: PUSH
6211: LD_EXP 7
6215: PUSH
6216: LD_VAR 0 2
6220: ARRAY
6221: ARRAY
6222: PPUSH
6223: LD_INT 0
6225: PPUSH
6226: CALL_OW 424
// for j := 1 to 8 do
6230: LD_ADDR_VAR 0 3
6234: PUSH
6235: DOUBLE
6236: LD_INT 1
6238: DEC
6239: ST_TO_ADDR
6240: LD_INT 8
6242: PUSH
6243: FOR_TO
6244: IFFALSE 6329
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6246: LD_EXP 7
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PUSH
6257: LD_EXP 8
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: PUSH
6268: LD_EXP 8
6272: PUSH
6273: LD_VAR 0 3
6277: ARRAY
6278: NONEQUAL
6279: PUSH
6280: LD_EXP 11
6284: NOT
6285: PUSH
6286: LD_VAR 0 2
6290: PUSH
6291: LD_VAR 0 3
6295: NONEQUAL
6296: AND
6297: OR
6298: AND
6299: IFFALSE 6327
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6301: LD_VAR 0 3
6305: PPUSH
6306: LD_EXP 19
6310: PUSH
6311: LD_EXP 7
6315: PUSH
6316: LD_VAR 0 2
6320: ARRAY
6321: ARRAY
6322: PPUSH
6323: CALL_OW 334
6327: GO 6243
6329: POP
6330: POP
// end ;
6331: GO 6191
6333: POP
6334: POP
// end ;
6335: LD_VAR 0 1
6339: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6340: LD_EXP 42
6344: IFFALSE 6519
6346: GO 6348
6348: DISABLE
6349: LD_INT 0
6351: PPUSH
6352: PPUSH
// begin for i := 1 to 8 do
6353: LD_ADDR_VAR 0 1
6357: PUSH
6358: DOUBLE
6359: LD_INT 1
6361: DEC
6362: ST_TO_ADDR
6363: LD_INT 8
6365: PUSH
6366: FOR_TO
6367: IFFALSE 6516
// if mpSidePositions [ i ] then
6369: LD_EXP 7
6373: PUSH
6374: LD_VAR 0 1
6378: ARRAY
6379: IFFALSE 6514
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: LD_EXP 19
6390: PUSH
6391: LD_EXP 7
6395: PUSH
6396: LD_VAR 0 1
6400: ARRAY
6401: ARRAY
6402: PPUSH
6403: LD_INT 2
6405: PUSH
6406: LD_INT 21
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 21
6418: PUSH
6419: LD_INT 2
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 22
6433: PUSH
6434: LD_OWVAR 2
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 70
6451: PUSH
6452: FOR_IN
6453: IFFALSE 6512
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6455: LD_EXP 8
6459: PUSH
6460: LD_VAR 0 1
6464: ARRAY
6465: PUSH
6466: LD_EXP 8
6470: PUSH
6471: LD_OWVAR 2
6475: ARRAY
6476: NONEQUAL
6477: PUSH
6478: LD_EXP 11
6482: NOT
6483: PUSH
6484: LD_VAR 0 1
6488: PUSH
6489: LD_OWVAR 2
6493: NONEQUAL
6494: AND
6495: OR
6496: IFFALSE 6510
// ComMoveToArea ( un , BuildUpEscape ) ;
6498: LD_VAR 0 2
6502: PPUSH
6503: LD_INT 13
6505: PPUSH
6506: CALL_OW 113
6510: GO 6452
6512: POP
6513: POP
6514: GO 6366
6516: POP
6517: POP
// enable ;
6518: ENABLE
// end ;
6519: PPOPN 2
6521: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6522: LD_EXP 20
6526: IFFALSE 6576
6528: GO 6530
6530: DISABLE
6531: LD_INT 0
6533: PPUSH
// begin tmp := mpBuildUpTime ;
6534: LD_ADDR_VAR 0 1
6538: PUSH
6539: LD_EXP 20
6543: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6544: LD_INT 35
6546: PPUSH
6547: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: LD_INT 35
6563: MINUS
6564: ST_TO_ADDR
// until not tmp ;
6565: LD_VAR 0 1
6569: NOT
6570: IFFALSE 6544
// EndBuildUp ;
6572: CALL 6165 0 0
// end ;
6576: PPOPN 1
6578: END
// every 0 0$1 trigger mpActive marked mpWin do
6579: LD_INT 100
6581: IFFALSE 6615
6583: GO 6585
6585: DISABLE
// begin if IAmServer then
6586: CALL_OW 518
6590: IFFALSE 6599
// wait ( 0 0$3 ) ;
6592: LD_INT 105
6594: PPUSH
6595: CALL_OW 67
// if Multiplayer then
6599: LD_OWVAR 4
6603: IFFALSE 6611
// YouWinInMultiplayer else
6605: CALL_OW 106
6609: GO 6615
// YouWin ;
6611: CALL_OW 103
// end ;
6615: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6616: LD_INT 0
6618: PPUSH
// result := false ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_INT 0
6626: ST_TO_ADDR
// case gameType of GameTypeNormal :
6627: LD_VAR 0 1
6631: PUSH
6632: LD_INT 1
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6713
6640: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 22
6648: PUSH
6649: LD_VAR 0 2
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 2
6660: PUSH
6661: LD_INT 21
6663: PUSH
6664: LD_INT 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 33
6673: PUSH
6674: LD_INT 3
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 33
6683: PUSH
6684: LD_INT 5
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL_OW 69
6705: PPUSH
6706: CALL 11242 0 1
6710: ST_TO_ADDR
// end ; GameTypeSurvival :
6711: GO 6948
6713: LD_INT 2
6715: DOUBLE
6716: EQUAL
6717: IFTRUE 6721
6719: GO 6849
6721: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_INT 22
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 2
6741: PUSH
6742: LD_INT 30
6744: PUSH
6745: LD_INT 0
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 30
6754: PUSH
6755: LD_INT 1
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PPUSH
6771: CALL_OW 69
6775: PPUSH
6776: CALL 11242 0 1
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_VAR 0 2
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 2
6795: PUSH
6796: LD_INT 21
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 33
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 33
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: PPUSH
6841: CALL 11242 0 1
6845: AND
6846: ST_TO_ADDR
// end ; GameTypeKing :
6847: GO 6948
6849: LD_INT 3
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6947
6857: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_VAR 0 2
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: LD_INT 21
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 33
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 33
6900: PUSH
6901: LD_INT 5
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PPUSH
6918: CALL_OW 69
6922: PPUSH
6923: CALL 11242 0 1
6927: PUSH
6928: LD_VAR 0 2
6932: PPUSH
6933: CALL 58401 0 1
6937: PUSH
6938: LD_EXP 34
6942: LESS
6943: AND
6944: ST_TO_ADDR
// end ; end ;
6945: GO 6948
6947: POP
// end ;
6948: LD_VAR 0 3
6952: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6953: LD_INT 100
6955: IFFALSE 7177
6957: GO 6959
6959: DISABLE
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
// begin if Multiplayer then
6964: LD_OWVAR 4
6968: IFFALSE 6976
// SetPlayerSpectator ( ) else
6970: CALL_OW 572
6974: GO 6985
// FogOff ( your_side ) ;
6976: LD_OWVAR 2
6980: PPUSH
6981: CALL_OW 344
// repeat gameIsOn := false ;
6985: LD_ADDR_VAR 0 1
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// for i := 1 to 8 do
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: DOUBLE
6999: LD_INT 1
7001: DEC
7002: ST_TO_ADDR
7003: LD_INT 8
7005: PUSH
7006: FOR_TO
7007: IFFALSE 7129
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7009: LD_EXP 7
7013: PUSH
7014: LD_VAR 0 2
7018: ARRAY
7019: PUSH
7020: LD_VAR 0 2
7024: PPUSH
7025: CALL_OW 108
7029: AND
7030: PUSH
7031: LD_VAR 0 2
7035: PUSH
7036: LD_OWVAR 2
7040: NONEQUAL
7041: AND
7042: IFFALSE 7127
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7044: LD_EXP 8
7048: PUSH
7049: LD_VAR 0 2
7053: ARRAY
7054: NOT
7055: PUSH
7056: LD_EXP 8
7060: PUSH
7061: LD_VAR 0 2
7065: ARRAY
7066: PUSH
7067: LD_EXP 8
7071: PUSH
7072: LD_OWVAR 2
7076: ARRAY
7077: NONEQUAL
7078: PUSH
7079: LD_OWVAR 2
7083: PPUSH
7084: LD_VAR 0 2
7088: PPUSH
7089: CALL_OW 81
7093: PUSH
7094: LD_INT 1
7096: NONEQUAL
7097: AND
7098: OR
7099: IFFALSE 7127
// if HasPowerByGameType ( mpGameType , i ) then
7101: LD_EXP 3
7105: PPUSH
7106: LD_VAR 0 2
7110: PPUSH
7111: CALL 6616 0 2
7115: IFFALSE 7127
// begin gameIsOn := true ;
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// break ;
7125: GO 7129
// end ;
7127: GO 7006
7129: POP
7130: POP
// wait ( 100 ) ;
7131: LD_INT 100
7133: PPUSH
7134: CALL_OW 67
// until not gameIsOn ;
7138: LD_VAR 0 1
7142: NOT
7143: IFFALSE 6985
// if IAmServer then
7145: CALL_OW 518
7149: IFFALSE 7158
// wait ( 0 0$3 ) ;
7151: LD_INT 105
7153: PPUSH
7154: CALL_OW 67
// if Multiplayer then
7158: LD_OWVAR 4
7162: IFFALSE 7170
// YouLostInMultiplayer else
7164: CALL_OW 107
7168: GO 7177
// YouLost (  ) ;
7170: LD_STRING 
7172: PPUSH
7173: CALL_OW 104
// end ;
7177: PPOPN 2
7179: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7180: LD_EXP 32
7184: IFFALSE 7531
7186: GO 7188
7188: DISABLE
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7196: LD_ADDR_VAR 0 5
7200: PUSH
7201: LD_INT 1
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: LD_INT 4
7212: PUSH
7213: LD_INT 5
7215: PUSH
7216: LD_INT 6
7218: PUSH
7219: LD_INT 7
7221: PUSH
7222: LD_INT 8
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7235: LD_INT 350
7237: PPUSH
7238: CALL_OW 67
// for i := 1 to 8 do
7242: LD_ADDR_VAR 0 1
7246: PUSH
7247: DOUBLE
7248: LD_INT 1
7250: DEC
7251: ST_TO_ADDR
7252: LD_INT 8
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7501
// begin j := sides [ i ] ;
7258: LD_ADDR_VAR 0 2
7262: PUSH
7263: LD_VAR 0 5
7267: PUSH
7268: LD_VAR 0 1
7272: ARRAY
7273: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7274: LD_EXP 39
7278: PUSH
7279: LD_VAR 0 2
7283: ARRAY
7284: PPUSH
7285: CALL 11242 0 1
7289: PUSH
7290: LD_VAR 0 2
7294: PPUSH
7295: CALL_OW 108
7299: AND
7300: PUSH
7301: LD_EXP 3
7305: PPUSH
7306: LD_VAR 0 2
7310: PPUSH
7311: CALL 6616 0 2
7315: AND
7316: IFFALSE 7499
// begin wait ( mpRespawn div 3 ) ;
7318: LD_EXP 32
7322: PUSH
7323: LD_INT 3
7325: DIV
7326: PPUSH
7327: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_INT 22
7338: PUSH
7339: LD_VAR 0 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 50
7350: PUSH
7351: EMPTY
7352: LIST
7353: PUSH
7354: LD_INT 2
7356: PUSH
7357: LD_INT 30
7359: PUSH
7360: LD_INT 0
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 30
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: PPUSH
7387: CALL_OW 69
7391: ST_TO_ADDR
// if not tmp then
7392: LD_VAR 0 3
7396: NOT
7397: IFFALSE 7401
// continue ;
7399: GO 7255
// spawn := tmp [ 1 ] ;
7401: LD_ADDR_VAR 0 4
7405: PUSH
7406: LD_VAR 0 3
7410: PUSH
7411: LD_INT 1
7413: ARRAY
7414: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7415: LD_EXP 39
7419: PUSH
7420: LD_VAR 0 2
7424: ARRAY
7425: PUSH
7426: LD_INT 1
7428: ARRAY
7429: PPUSH
7430: LD_VAR 0 4
7434: PPUSH
7435: CALL_OW 250
7439: PPUSH
7440: LD_VAR 0 4
7444: PPUSH
7445: CALL_OW 251
7449: PPUSH
7450: LD_INT 32
7452: PPUSH
7453: LD_INT 1
7455: PPUSH
7456: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7460: LD_ADDR_EXP 39
7464: PUSH
7465: LD_EXP 39
7469: PPUSH
7470: LD_VAR 0 2
7474: PPUSH
7475: LD_EXP 39
7479: PUSH
7480: LD_VAR 0 2
7484: ARRAY
7485: PPUSH
7486: LD_INT 1
7488: PPUSH
7489: CALL_OW 3
7493: PPUSH
7494: CALL_OW 1
7498: ST_TO_ADDR
// end ; end ;
7499: GO 7255
7501: POP
7502: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7503: LD_ADDR_VAR 0 5
7507: PUSH
7508: LD_VAR 0 5
7512: PPUSH
7513: LD_INT 1
7515: PPUSH
7516: LD_INT 8
7518: PPUSH
7519: LD_INT 1
7521: PPUSH
7522: CALL 13520 0 4
7526: ST_TO_ADDR
// until false ;
7527: LD_INT 0
7529: IFFALSE 7235
// end ;
7531: PPOPN 5
7533: END
// every 0 0$1 marked mpActive do
7534: GO 7536
7536: DISABLE
// begin enable ;
7537: ENABLE
// if not mpDisplayStrings then
7538: LD_EXP 37
7542: NOT
7543: IFFALSE 7554
// begin display_strings := [ ] ;
7545: LD_ADDR_OWVAR 47
7549: PUSH
7550: EMPTY
7551: ST_TO_ADDR
// exit ;
7552: GO 7564
// end ; display_strings := mpDisplayStrings ;
7554: LD_ADDR_OWVAR 47
7558: PUSH
7559: LD_EXP 37
7563: ST_TO_ADDR
// end ; end_of_file
7564: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7565: LD_INT 0
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
// if GetType ( un ) = unit_vehicle then
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 247
7585: PUSH
7586: LD_INT 2
7588: EQUAL
7589: IFFALSE 7593
// exit ;
7591: GO 8163
// side := GetSide ( un ) ;
7593: LD_ADDR_VAR 0 9
7597: PUSH
7598: LD_VAR 0 1
7602: PPUSH
7603: CALL_OW 255
7607: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7608: LD_EXP 3
7612: PUSH
7613: LD_INT 2
7615: EQUAL
7616: IFFALSE 7709
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 266
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: IN
7638: PUSH
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 110
7648: PUSH
7649: LD_VAR 0 9
7653: EQUAL
7654: AND
7655: IFFALSE 7709
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7657: LD_ADDR_VAR 0 3
7661: PUSH
7662: LD_INT 22
7664: PUSH
7665: LD_VAR 0 9
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 21
7676: PUSH
7677: LD_INT 1
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7707
// KillUnit ( i ) ;
7696: LD_VAR 0 3
7700: PPUSH
7701: CALL_OW 66
7705: GO 7693
7707: POP
7708: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 257
7718: PUSH
7719: LD_INT 12
7721: PUSH
7722: LD_INT 17
7724: PUSH
7725: LD_INT 15
7727: PUSH
7728: LD_INT 16
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: IN
7737: PUSH
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 263
7747: PUSH
7748: LD_INT 5
7750: EQUAL
7751: OR
7752: IFFALSE 7892
// begin tag := GetTag ( un ) ;
7754: LD_ADDR_VAR 0 5
7758: PUSH
7759: LD_VAR 0 1
7763: PPUSH
7764: CALL_OW 110
7768: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7769: LD_ADDR_VAR 0 7
7773: PUSH
7774: LD_EXP 31
7778: PUSH
7779: LD_EXP 7
7783: PUSH
7784: LD_VAR 0 5
7788: ARRAY
7789: ARRAY
7790: ST_TO_ADDR
// if not area then
7791: LD_VAR 0 7
7795: NOT
7796: IFFALSE 7800
// exit ;
7798: GO 8163
// wait ( 4 4$00 ) ;
7800: LD_INT 8400
7802: PPUSH
7803: CALL_OW 67
// repeat wait ( 10 ) ;
7807: LD_INT 10
7809: PPUSH
7810: CALL_OW 67
// until not mpBlockRespThread ;
7814: LD_EXP 40
7818: NOT
7819: IFFALSE 7807
// mpBlockRespThread := true ;
7821: LD_ADDR_EXP 40
7825: PUSH
7826: LD_INT 1
7828: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7829: LD_INT 0
7831: PPUSH
7832: CALL 43099 0 1
// ape := CreateHuman ;
7836: LD_ADDR_VAR 0 4
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_VAR 0 5
7855: PPUSH
7856: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7860: LD_VAR 0 4
7864: PPUSH
7865: LD_VAR 0 7
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: CALL_OW 49
// wait ( 10 ) ;
7877: LD_INT 10
7879: PPUSH
7880: CALL_OW 67
// mpBlockRespThread := false ;
7884: LD_ADDR_EXP 40
7888: PUSH
7889: LD_INT 0
7891: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7892: LD_VAR 0 1
7896: PPUSH
7897: CALL_OW 247
7901: PUSH
7902: LD_INT 1
7904: EQUAL
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 248
7915: PUSH
7916: LD_INT 0
7918: GREATER
7919: AND
7920: IFFALSE 8163
// begin if not mpRespawn then
7922: LD_EXP 32
7926: NOT
7927: IFFALSE 7931
// exit ;
7929: GO 8163
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7931: LD_VAR 0 9
7935: PPUSH
7936: CALL_OW 108
7940: NOT
7941: PUSH
7942: LD_EXP 3
7946: PPUSH
7947: LD_VAR 0 9
7951: PPUSH
7952: CALL 6616 0 2
7956: NOT
7957: AND
7958: IFFALSE 7962
// exit ;
7960: GO 8163
// side := GetSide ( un ) ;
7962: LD_ADDR_VAR 0 9
7966: PUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 255
7976: ST_TO_ADDR
// nation := GetNation ( un ) ;
7977: LD_ADDR_VAR 0 8
7981: PUSH
7982: LD_VAR 0 1
7986: PPUSH
7987: CALL_OW 248
7991: ST_TO_ADDR
// class := GetClass ( un ) ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 1
8001: PPUSH
8002: CALL_OW 257
8006: ST_TO_ADDR
// if class > 4 then
8007: LD_VAR 0 6
8011: PUSH
8012: LD_INT 4
8014: GREATER
8015: IFFALSE 8025
// class := 1 ;
8017: LD_ADDR_VAR 0 6
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// repeat wait ( 10 ) ;
8025: LD_INT 10
8027: PPUSH
8028: CALL_OW 67
// until not mpBlockRespThread ;
8032: LD_EXP 40
8036: NOT
8037: IFFALSE 8025
// mpBlockRespThread := true ;
8039: LD_ADDR_EXP 40
8043: PUSH
8044: LD_INT 1
8046: ST_TO_ADDR
// uc_side := side ;
8047: LD_ADDR_OWVAR 20
8051: PUSH
8052: LD_VAR 0 9
8056: ST_TO_ADDR
// uc_nation := nation ;
8057: LD_ADDR_OWVAR 21
8061: PUSH
8062: LD_VAR 0 8
8066: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8067: LD_INT 0
8069: PPUSH
8070: LD_VAR 0 6
8074: PPUSH
8075: LD_INT 2
8077: PPUSH
8078: CALL_OW 380
// un := CreateHuman ;
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: CALL_OW 44
8091: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8092: LD_ADDR_EXP 39
8096: PUSH
8097: LD_EXP 39
8101: PPUSH
8102: LD_VAR 0 9
8106: PPUSH
8107: LD_EXP 39
8111: PUSH
8112: LD_VAR 0 9
8116: ARRAY
8117: PPUSH
8118: LD_EXP 39
8122: PUSH
8123: LD_VAR 0 9
8127: ARRAY
8128: PUSH
8129: LD_INT 1
8131: PLUS
8132: PPUSH
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 1
8142: PPUSH
8143: CALL_OW 1
8147: ST_TO_ADDR
// wait ( 10 ) ;
8148: LD_INT 10
8150: PPUSH
8151: CALL_OW 67
// mpBlockRespThread := false ;
8155: LD_ADDR_EXP 40
8159: PUSH
8160: LD_INT 0
8162: ST_TO_ADDR
// end ; end ;
8163: LD_VAR 0 2
8167: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8168: LD_INT 0
8170: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8171: LD_VAR 0 1
8175: PPUSH
8176: CALL_OW 266
8180: PUSH
8181: LD_INT 0
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: IN
8191: IFFALSE 8216
// SetBName ( building , @ & GetSide ( building ) ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_STRING @
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 255
8210: STR
8211: PPUSH
8212: CALL_OW 500
// end ;
8216: LD_VAR 0 2
8220: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8221: LD_INT 0
8223: PPUSH
8224: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8225: LD_EXP 3
8229: PUSH
8230: LD_INT 2
8232: EQUAL
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL_OW 266
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 1
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: IN
8254: AND
8255: IFFALSE 8320
// begin KillUnit ( building ) ;
8257: LD_VAR 0 1
8261: PPUSH
8262: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8266: LD_ADDR_VAR 0 5
8270: PUSH
8271: LD_INT 22
8273: PUSH
8274: LD_VAR 0 2
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 21
8285: PUSH
8286: LD_INT 1
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 69
8301: PUSH
8302: FOR_IN
8303: IFFALSE 8316
// KillUnit ( i ) ;
8305: LD_VAR 0 5
8309: PPUSH
8310: CALL_OW 66
8314: GO 8302
8316: POP
8317: POP
// exit ;
8318: GO 8365
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 266
8329: PUSH
8330: LD_INT 0
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: IN
8340: IFFALSE 8365
// SetBName ( building , @ & GetSide ( building ) ) ;
8342: LD_VAR 0 1
8346: PPUSH
8347: LD_STRING @
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 255
8359: STR
8360: PPUSH
8361: CALL_OW 500
// end ; end_of_file
8365: LD_VAR 0 4
8369: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8370: LD_EXP 38
8374: PUSH
8375: CALL 8580 0 0
8379: AND
8380: PUSH
8381: LD_OWVAR 4
8385: AND
8386: IFFALSE 8577
8388: GO 8390
8390: DISABLE
8391: LD_INT 0
8393: PPUSH
8394: PPUSH
// begin canWin := false ;
8395: LD_ADDR_VAR 0 2
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// if not HasPower ( your_side ) then
8403: LD_OWVAR 2
8407: PPUSH
8408: CALL 8620 0 1
8412: NOT
8413: IFFALSE 8424
// begin Multiplayer_Loose_Message ;
8415: CALL_OW 521
// enable ( mpLose ) ;
8419: LD_INT 102
8421: ENABLE_MARKED
// end else
8422: GO 8577
// begin canWin := true ;
8424: LD_ADDR_VAR 0 2
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// for i := 1 to 8 do
8432: LD_ADDR_VAR 0 1
8436: PUSH
8437: DOUBLE
8438: LD_INT 1
8440: DEC
8441: ST_TO_ADDR
8442: LD_INT 8
8444: PUSH
8445: FOR_TO
8446: IFFALSE 8563
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8448: LD_EXP 7
8452: PUSH
8453: LD_VAR 0 1
8457: ARRAY
8458: PUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 108
8468: AND
8469: PUSH
8470: LD_VAR 0 1
8474: PUSH
8475: LD_OWVAR 2
8479: NONEQUAL
8480: AND
8481: IFFALSE 8561
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8483: LD_EXP 8
8487: PUSH
8488: LD_VAR 0 1
8492: ARRAY
8493: NOT
8494: PUSH
8495: LD_EXP 8
8499: PUSH
8500: LD_VAR 0 1
8504: ARRAY
8505: PUSH
8506: LD_EXP 8
8510: PUSH
8511: LD_OWVAR 2
8515: ARRAY
8516: NONEQUAL
8517: PUSH
8518: LD_OWVAR 2
8522: PPUSH
8523: LD_VAR 0 1
8527: PPUSH
8528: CALL_OW 81
8532: PUSH
8533: LD_INT 1
8535: NONEQUAL
8536: AND
8537: OR
8538: IFFALSE 8561
// if HasPower ( i ) then
8540: LD_VAR 0 1
8544: PPUSH
8545: CALL 8620 0 1
8549: IFFALSE 8561
// begin canWin := false ;
8551: LD_ADDR_VAR 0 2
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// break ;
8559: GO 8563
// end ;
8561: GO 8445
8563: POP
8564: POP
// if canWin then
8565: LD_VAR 0 2
8569: IFFALSE 8576
// enable ( mpWin ) else
8571: LD_INT 101
8573: ENABLE_MARKED
8574: GO 8577
// enable ;
8576: ENABLE
// end ; end ;
8577: PPOPN 2
8579: END
// function CanWinLoose ; begin
8580: LD_INT 0
8582: PPUSH
// result := true ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8591: CALL_OW 531
8595: PUSH
8596: CALL_OW 519
8600: PUSH
8601: LD_INT 1
8603: GREATER
8604: AND
8605: IFFALSE 8615
// result := false ;
8607: LD_ADDR_VAR 0 1
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// end ;
8615: LD_VAR 0 1
8619: RET
// function HasPower ( i ) ; begin
8620: LD_INT 0
8622: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8623: LD_ADDR_VAR 0 2
8627: PUSH
8628: LD_INT 22
8630: PUSH
8631: LD_VAR 0 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 21
8645: PUSH
8646: LD_INT 1
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 33
8655: PUSH
8656: LD_INT 3
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 33
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PPUSH
8683: CALL_OW 69
8687: ST_TO_ADDR
// end ; end_of_file
8688: LD_VAR 0 2
8692: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8693: LD_EXP 38
8697: IFFALSE 8740
8699: GO 8701
8701: DISABLE
8702: LD_INT 0
8704: PPUSH
// begin for i := 1 to 8 do
8705: LD_ADDR_VAR 0 1
8709: PUSH
8710: DOUBLE
8711: LD_INT 1
8713: DEC
8714: ST_TO_ADDR
8715: LD_INT 8
8717: PUSH
8718: FOR_TO
8719: IFFALSE 8738
// SetRestrict ( b_depot , i , state_disabled ) ;
8721: LD_INT 0
8723: PPUSH
8724: LD_VAR 0 1
8728: PPUSH
8729: LD_INT 0
8731: PPUSH
8732: CALL_OW 324
8736: GO 8718
8738: POP
8739: POP
// end ;
8740: PPOPN 1
8742: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8743: LD_EXP 38
8747: PUSH
8748: CALL 8953 0 0
8752: AND
8753: PUSH
8754: LD_OWVAR 4
8758: AND
8759: IFFALSE 8950
8761: GO 8763
8763: DISABLE
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
// begin canWin := false ;
8768: LD_ADDR_VAR 0 2
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// if not HasPower ( your_side ) then
8776: LD_OWVAR 2
8780: PPUSH
8781: CALL 8993 0 1
8785: NOT
8786: IFFALSE 8797
// begin Multiplayer_Loose_Message ;
8788: CALL_OW 521
// enable ( mpLose ) ;
8792: LD_INT 102
8794: ENABLE_MARKED
// end else
8795: GO 8950
// begin canWin := true ;
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// for i := 1 to 8 do
8805: LD_ADDR_VAR 0 1
8809: PUSH
8810: DOUBLE
8811: LD_INT 1
8813: DEC
8814: ST_TO_ADDR
8815: LD_INT 8
8817: PUSH
8818: FOR_TO
8819: IFFALSE 8936
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8821: LD_EXP 7
8825: PUSH
8826: LD_VAR 0 1
8830: ARRAY
8831: PUSH
8832: LD_VAR 0 1
8836: PPUSH
8837: CALL_OW 108
8841: AND
8842: PUSH
8843: LD_VAR 0 1
8847: PUSH
8848: LD_OWVAR 2
8852: NONEQUAL
8853: AND
8854: IFFALSE 8934
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8856: LD_EXP 8
8860: PUSH
8861: LD_VAR 0 1
8865: ARRAY
8866: NOT
8867: PUSH
8868: LD_EXP 8
8872: PUSH
8873: LD_VAR 0 1
8877: ARRAY
8878: PUSH
8879: LD_EXP 8
8883: PUSH
8884: LD_OWVAR 2
8888: ARRAY
8889: NONEQUAL
8890: PUSH
8891: LD_OWVAR 2
8895: PPUSH
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 81
8905: PUSH
8906: LD_INT 1
8908: NONEQUAL
8909: AND
8910: OR
8911: IFFALSE 8934
// if HasPower ( i ) then
8913: LD_VAR 0 1
8917: PPUSH
8918: CALL 8993 0 1
8922: IFFALSE 8934
// begin canWin := false ;
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: LD_INT 0
8931: ST_TO_ADDR
// break ;
8932: GO 8936
// end ;
8934: GO 8818
8936: POP
8937: POP
// if canWin then
8938: LD_VAR 0 2
8942: IFFALSE 8949
// enable ( mpWin ) else
8944: LD_INT 101
8946: ENABLE_MARKED
8947: GO 8950
// enable ;
8949: ENABLE
// end ; end ;
8950: PPOPN 2
8952: END
// function CanWinLoose ; begin
8953: LD_INT 0
8955: PPUSH
// result := true ;
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8964: CALL_OW 531
8968: PUSH
8969: CALL_OW 519
8973: PUSH
8974: LD_INT 1
8976: GREATER
8977: AND
8978: IFFALSE 8988
// result := false ;
8980: LD_ADDR_VAR 0 1
8984: PUSH
8985: LD_INT 0
8987: ST_TO_ADDR
// end ;
8988: LD_VAR 0 1
8992: RET
// function HasPower ( i ) ; begin
8993: LD_INT 0
8995: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8996: LD_INT 22
8998: PUSH
8999: LD_VAR 0 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 2
9010: PUSH
9011: LD_INT 30
9013: PUSH
9014: LD_INT 0
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 30
9023: PUSH
9024: LD_INT 1
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PPUSH
9040: CALL_OW 69
9044: NOT
9045: IFFALSE 9049
// exit ;
9047: GO 9114
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9049: LD_ADDR_VAR 0 2
9053: PUSH
9054: LD_INT 22
9056: PUSH
9057: LD_VAR 0 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 2
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 33
9081: PUSH
9082: LD_INT 3
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 33
9091: PUSH
9092: LD_INT 5
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PPUSH
9109: CALL_OW 69
9113: ST_TO_ADDR
// end ; end_of_file
9114: LD_VAR 0 2
9118: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9119: LD_INT 0
9121: PPUSH
9122: PPUSH
// if exist_mode then
9123: LD_VAR 0 2
9127: IFFALSE 9173
// begin unit := CreateCharacter ( prefix & ident ) ;
9129: LD_ADDR_VAR 0 5
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: LD_VAR 0 1
9143: STR
9144: PPUSH
9145: CALL_OW 34
9149: ST_TO_ADDR
// if unit then
9150: LD_VAR 0 5
9154: IFFALSE 9171
// DeleteCharacters ( prefix & ident ) ;
9156: LD_VAR 0 3
9160: PUSH
9161: LD_VAR 0 1
9165: STR
9166: PPUSH
9167: CALL_OW 40
// end else
9171: GO 9188
// unit := NewCharacter ( ident ) ;
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_VAR 0 1
9182: PPUSH
9183: CALL_OW 25
9187: ST_TO_ADDR
// result := unit ;
9188: LD_ADDR_VAR 0 4
9192: PUSH
9193: LD_VAR 0 5
9197: ST_TO_ADDR
// end ;
9198: LD_VAR 0 4
9202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9203: LD_INT 0
9205: PPUSH
9206: PPUSH
// if not side or not nation then
9207: LD_VAR 0 1
9211: NOT
9212: PUSH
9213: LD_VAR 0 2
9217: NOT
9218: OR
9219: IFFALSE 9223
// exit ;
9221: GO 9991
// case nation of nation_american :
9223: LD_VAR 0 2
9227: PUSH
9228: LD_INT 1
9230: DOUBLE
9231: EQUAL
9232: IFTRUE 9236
9234: GO 9450
9236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9237: LD_ADDR_VAR 0 4
9241: PUSH
9242: LD_INT 35
9244: PUSH
9245: LD_INT 45
9247: PUSH
9248: LD_INT 46
9250: PUSH
9251: LD_INT 47
9253: PUSH
9254: LD_INT 82
9256: PUSH
9257: LD_INT 83
9259: PUSH
9260: LD_INT 84
9262: PUSH
9263: LD_INT 85
9265: PUSH
9266: LD_INT 86
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: LD_INT 6
9277: PUSH
9278: LD_INT 15
9280: PUSH
9281: LD_INT 16
9283: PUSH
9284: LD_INT 7
9286: PUSH
9287: LD_INT 12
9289: PUSH
9290: LD_INT 13
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: LD_INT 14
9298: PUSH
9299: LD_INT 20
9301: PUSH
9302: LD_INT 21
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_INT 25
9310: PUSH
9311: LD_INT 32
9313: PUSH
9314: LD_INT 27
9316: PUSH
9317: LD_INT 36
9319: PUSH
9320: LD_INT 69
9322: PUSH
9323: LD_INT 39
9325: PUSH
9326: LD_INT 34
9328: PUSH
9329: LD_INT 40
9331: PUSH
9332: LD_INT 48
9334: PUSH
9335: LD_INT 49
9337: PUSH
9338: LD_INT 50
9340: PUSH
9341: LD_INT 51
9343: PUSH
9344: LD_INT 52
9346: PUSH
9347: LD_INT 53
9349: PUSH
9350: LD_INT 54
9352: PUSH
9353: LD_INT 55
9355: PUSH
9356: LD_INT 56
9358: PUSH
9359: LD_INT 57
9361: PUSH
9362: LD_INT 58
9364: PUSH
9365: LD_INT 59
9367: PUSH
9368: LD_INT 60
9370: PUSH
9371: LD_INT 61
9373: PUSH
9374: LD_INT 62
9376: PUSH
9377: LD_INT 80
9379: PUSH
9380: LD_INT 82
9382: PUSH
9383: LD_INT 83
9385: PUSH
9386: LD_INT 84
9388: PUSH
9389: LD_INT 85
9391: PUSH
9392: LD_INT 86
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: ST_TO_ADDR
9448: GO 9915
9450: LD_INT 2
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9684
9458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9459: LD_ADDR_VAR 0 4
9463: PUSH
9464: LD_INT 35
9466: PUSH
9467: LD_INT 45
9469: PUSH
9470: LD_INT 46
9472: PUSH
9473: LD_INT 47
9475: PUSH
9476: LD_INT 82
9478: PUSH
9479: LD_INT 83
9481: PUSH
9482: LD_INT 84
9484: PUSH
9485: LD_INT 85
9487: PUSH
9488: LD_INT 87
9490: PUSH
9491: LD_INT 70
9493: PUSH
9494: LD_INT 1
9496: PUSH
9497: LD_INT 11
9499: PUSH
9500: LD_INT 3
9502: PUSH
9503: LD_INT 4
9505: PUSH
9506: LD_INT 5
9508: PUSH
9509: LD_INT 6
9511: PUSH
9512: LD_INT 15
9514: PUSH
9515: LD_INT 18
9517: PUSH
9518: LD_INT 7
9520: PUSH
9521: LD_INT 17
9523: PUSH
9524: LD_INT 8
9526: PUSH
9527: LD_INT 20
9529: PUSH
9530: LD_INT 21
9532: PUSH
9533: LD_INT 22
9535: PUSH
9536: LD_INT 72
9538: PUSH
9539: LD_INT 26
9541: PUSH
9542: LD_INT 69
9544: PUSH
9545: LD_INT 39
9547: PUSH
9548: LD_INT 40
9550: PUSH
9551: LD_INT 41
9553: PUSH
9554: LD_INT 42
9556: PUSH
9557: LD_INT 43
9559: PUSH
9560: LD_INT 48
9562: PUSH
9563: LD_INT 49
9565: PUSH
9566: LD_INT 50
9568: PUSH
9569: LD_INT 51
9571: PUSH
9572: LD_INT 52
9574: PUSH
9575: LD_INT 53
9577: PUSH
9578: LD_INT 54
9580: PUSH
9581: LD_INT 55
9583: PUSH
9584: LD_INT 56
9586: PUSH
9587: LD_INT 60
9589: PUSH
9590: LD_INT 61
9592: PUSH
9593: LD_INT 62
9595: PUSH
9596: LD_INT 66
9598: PUSH
9599: LD_INT 67
9601: PUSH
9602: LD_INT 68
9604: PUSH
9605: LD_INT 81
9607: PUSH
9608: LD_INT 82
9610: PUSH
9611: LD_INT 83
9613: PUSH
9614: LD_INT 84
9616: PUSH
9617: LD_INT 85
9619: PUSH
9620: LD_INT 87
9622: PUSH
9623: LD_INT 88
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: ST_TO_ADDR
9682: GO 9915
9684: LD_INT 3
9686: DOUBLE
9687: EQUAL
9688: IFTRUE 9692
9690: GO 9914
9692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9693: LD_ADDR_VAR 0 4
9697: PUSH
9698: LD_INT 46
9700: PUSH
9701: LD_INT 47
9703: PUSH
9704: LD_INT 1
9706: PUSH
9707: LD_INT 2
9709: PUSH
9710: LD_INT 82
9712: PUSH
9713: LD_INT 83
9715: PUSH
9716: LD_INT 84
9718: PUSH
9719: LD_INT 85
9721: PUSH
9722: LD_INT 86
9724: PUSH
9725: LD_INT 11
9727: PUSH
9728: LD_INT 9
9730: PUSH
9731: LD_INT 20
9733: PUSH
9734: LD_INT 19
9736: PUSH
9737: LD_INT 21
9739: PUSH
9740: LD_INT 24
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 25
9748: PUSH
9749: LD_INT 28
9751: PUSH
9752: LD_INT 29
9754: PUSH
9755: LD_INT 30
9757: PUSH
9758: LD_INT 31
9760: PUSH
9761: LD_INT 37
9763: PUSH
9764: LD_INT 38
9766: PUSH
9767: LD_INT 32
9769: PUSH
9770: LD_INT 27
9772: PUSH
9773: LD_INT 33
9775: PUSH
9776: LD_INT 69
9778: PUSH
9779: LD_INT 39
9781: PUSH
9782: LD_INT 34
9784: PUSH
9785: LD_INT 40
9787: PUSH
9788: LD_INT 71
9790: PUSH
9791: LD_INT 23
9793: PUSH
9794: LD_INT 44
9796: PUSH
9797: LD_INT 48
9799: PUSH
9800: LD_INT 49
9802: PUSH
9803: LD_INT 50
9805: PUSH
9806: LD_INT 51
9808: PUSH
9809: LD_INT 52
9811: PUSH
9812: LD_INT 53
9814: PUSH
9815: LD_INT 54
9817: PUSH
9818: LD_INT 55
9820: PUSH
9821: LD_INT 56
9823: PUSH
9824: LD_INT 57
9826: PUSH
9827: LD_INT 58
9829: PUSH
9830: LD_INT 59
9832: PUSH
9833: LD_INT 63
9835: PUSH
9836: LD_INT 64
9838: PUSH
9839: LD_INT 65
9841: PUSH
9842: LD_INT 82
9844: PUSH
9845: LD_INT 83
9847: PUSH
9848: LD_INT 84
9850: PUSH
9851: LD_INT 85
9853: PUSH
9854: LD_INT 86
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: ST_TO_ADDR
9912: GO 9915
9914: POP
// if state > - 1 and state < 3 then
9915: LD_VAR 0 3
9919: PUSH
9920: LD_INT 1
9922: NEG
9923: GREATER
9924: PUSH
9925: LD_VAR 0 3
9929: PUSH
9930: LD_INT 3
9932: LESS
9933: AND
9934: IFFALSE 9991
// for i in result do
9936: LD_ADDR_VAR 0 5
9940: PUSH
9941: LD_VAR 0 4
9945: PUSH
9946: FOR_IN
9947: IFFALSE 9989
// if GetTech ( i , side ) <> state then
9949: LD_VAR 0 5
9953: PPUSH
9954: LD_VAR 0 1
9958: PPUSH
9959: CALL_OW 321
9963: PUSH
9964: LD_VAR 0 3
9968: NONEQUAL
9969: IFFALSE 9987
// result := result diff i ;
9971: LD_ADDR_VAR 0 4
9975: PUSH
9976: LD_VAR 0 4
9980: PUSH
9981: LD_VAR 0 5
9985: DIFF
9986: ST_TO_ADDR
9987: GO 9946
9989: POP
9990: POP
// end ;
9991: LD_VAR 0 4
9995: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9996: LD_INT 0
9998: PPUSH
9999: PPUSH
10000: PPUSH
// result := true ;
10001: LD_ADDR_VAR 0 3
10005: PUSH
10006: LD_INT 1
10008: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10009: LD_ADDR_VAR 0 5
10013: PUSH
10014: LD_VAR 0 2
10018: PPUSH
10019: CALL_OW 480
10023: ST_TO_ADDR
// if not tmp then
10024: LD_VAR 0 5
10028: NOT
10029: IFFALSE 10033
// exit ;
10031: GO 10082
// for i in tmp do
10033: LD_ADDR_VAR 0 4
10037: PUSH
10038: LD_VAR 0 5
10042: PUSH
10043: FOR_IN
10044: IFFALSE 10080
// if GetTech ( i , side ) <> state_researched then
10046: LD_VAR 0 4
10050: PPUSH
10051: LD_VAR 0 1
10055: PPUSH
10056: CALL_OW 321
10060: PUSH
10061: LD_INT 2
10063: NONEQUAL
10064: IFFALSE 10078
// begin result := false ;
10066: LD_ADDR_VAR 0 3
10070: PUSH
10071: LD_INT 0
10073: ST_TO_ADDR
// exit ;
10074: POP
10075: POP
10076: GO 10082
// end ;
10078: GO 10043
10080: POP
10081: POP
// end ;
10082: LD_VAR 0 3
10086: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10087: LD_INT 0
10089: PPUSH
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
10096: PPUSH
10097: PPUSH
10098: PPUSH
10099: PPUSH
10100: PPUSH
10101: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10102: LD_VAR 0 1
10106: NOT
10107: PUSH
10108: LD_VAR 0 1
10112: PPUSH
10113: CALL_OW 257
10117: PUSH
10118: LD_INT 9
10120: NONEQUAL
10121: OR
10122: IFFALSE 10126
// exit ;
10124: GO 10699
// side := GetSide ( unit ) ;
10126: LD_ADDR_VAR 0 9
10130: PUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 255
10140: ST_TO_ADDR
// tech_space := tech_spacanom ;
10141: LD_ADDR_VAR 0 12
10145: PUSH
10146: LD_INT 29
10148: ST_TO_ADDR
// tech_time := tech_taurad ;
10149: LD_ADDR_VAR 0 13
10153: PUSH
10154: LD_INT 28
10156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10157: LD_ADDR_VAR 0 11
10161: PUSH
10162: LD_VAR 0 1
10166: PPUSH
10167: CALL_OW 310
10171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10172: LD_VAR 0 11
10176: PPUSH
10177: CALL_OW 247
10181: PUSH
10182: LD_INT 2
10184: EQUAL
10185: IFFALSE 10189
// exit ;
10187: GO 10699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10189: LD_ADDR_VAR 0 8
10193: PUSH
10194: LD_INT 81
10196: PUSH
10197: LD_VAR 0 9
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 21
10211: PUSH
10212: LD_INT 3
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 69
10231: ST_TO_ADDR
// if not tmp then
10232: LD_VAR 0 8
10236: NOT
10237: IFFALSE 10241
// exit ;
10239: GO 10699
// if in_unit then
10241: LD_VAR 0 11
10245: IFFALSE 10269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10247: LD_ADDR_VAR 0 10
10251: PUSH
10252: LD_VAR 0 8
10256: PPUSH
10257: LD_VAR 0 11
10261: PPUSH
10262: CALL_OW 74
10266: ST_TO_ADDR
10267: GO 10289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10269: LD_ADDR_VAR 0 10
10273: PUSH
10274: LD_VAR 0 8
10278: PPUSH
10279: LD_VAR 0 1
10283: PPUSH
10284: CALL_OW 74
10288: ST_TO_ADDR
// if not enemy then
10289: LD_VAR 0 10
10293: NOT
10294: IFFALSE 10298
// exit ;
10296: GO 10699
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10298: LD_VAR 0 11
10302: PUSH
10303: LD_VAR 0 11
10307: PPUSH
10308: LD_VAR 0 10
10312: PPUSH
10313: CALL_OW 296
10317: PUSH
10318: LD_INT 13
10320: GREATER
10321: AND
10322: PUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: LD_VAR 0 10
10332: PPUSH
10333: CALL_OW 296
10337: PUSH
10338: LD_INT 12
10340: GREATER
10341: OR
10342: IFFALSE 10346
// exit ;
10344: GO 10699
// missile := [ 1 ] ;
10346: LD_ADDR_VAR 0 14
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: EMPTY
10355: LIST
10356: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10357: LD_VAR 0 9
10361: PPUSH
10362: LD_VAR 0 12
10366: PPUSH
10367: CALL_OW 325
10371: IFFALSE 10400
// missile := Replace ( missile , missile + 1 , 2 ) ;
10373: LD_ADDR_VAR 0 14
10377: PUSH
10378: LD_VAR 0 14
10382: PPUSH
10383: LD_VAR 0 14
10387: PUSH
10388: LD_INT 1
10390: PLUS
10391: PPUSH
10392: LD_INT 2
10394: PPUSH
10395: CALL_OW 1
10399: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10400: LD_VAR 0 9
10404: PPUSH
10405: LD_VAR 0 13
10409: PPUSH
10410: CALL_OW 325
10414: PUSH
10415: LD_VAR 0 10
10419: PPUSH
10420: CALL_OW 255
10424: PPUSH
10425: LD_VAR 0 13
10429: PPUSH
10430: CALL_OW 325
10434: NOT
10435: AND
10436: IFFALSE 10465
// missile := Replace ( missile , missile + 1 , 3 ) ;
10438: LD_ADDR_VAR 0 14
10442: PUSH
10443: LD_VAR 0 14
10447: PPUSH
10448: LD_VAR 0 14
10452: PUSH
10453: LD_INT 1
10455: PLUS
10456: PPUSH
10457: LD_INT 3
10459: PPUSH
10460: CALL_OW 1
10464: ST_TO_ADDR
// if missile < 2 then
10465: LD_VAR 0 14
10469: PUSH
10470: LD_INT 2
10472: LESS
10473: IFFALSE 10477
// exit ;
10475: GO 10699
// x := GetX ( enemy ) ;
10477: LD_ADDR_VAR 0 4
10481: PUSH
10482: LD_VAR 0 10
10486: PPUSH
10487: CALL_OW 250
10491: ST_TO_ADDR
// y := GetY ( enemy ) ;
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_VAR 0 10
10501: PPUSH
10502: CALL_OW 251
10506: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10507: LD_ADDR_VAR 0 6
10511: PUSH
10512: LD_VAR 0 4
10516: PUSH
10517: LD_INT 1
10519: NEG
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 12
10528: PLUS
10529: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10530: LD_ADDR_VAR 0 7
10534: PUSH
10535: LD_VAR 0 5
10539: PUSH
10540: LD_INT 1
10542: NEG
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL_OW 12
10551: PLUS
10552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10553: LD_VAR 0 6
10557: PPUSH
10558: LD_VAR 0 7
10562: PPUSH
10563: CALL_OW 488
10567: NOT
10568: IFFALSE 10590
// begin _x := x ;
10570: LD_ADDR_VAR 0 6
10574: PUSH
10575: LD_VAR 0 4
10579: ST_TO_ADDR
// _y := y ;
10580: LD_ADDR_VAR 0 7
10584: PUSH
10585: LD_VAR 0 5
10589: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10590: LD_ADDR_VAR 0 3
10594: PUSH
10595: LD_INT 1
10597: PPUSH
10598: LD_VAR 0 14
10602: PPUSH
10603: CALL_OW 12
10607: ST_TO_ADDR
// case i of 1 :
10608: LD_VAR 0 3
10612: PUSH
10613: LD_INT 1
10615: DOUBLE
10616: EQUAL
10617: IFTRUE 10621
10619: GO 10638
10621: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10622: LD_VAR 0 1
10626: PPUSH
10627: LD_VAR 0 10
10631: PPUSH
10632: CALL_OW 115
10636: GO 10699
10638: LD_INT 2
10640: DOUBLE
10641: EQUAL
10642: IFTRUE 10646
10644: GO 10668
10646: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10647: LD_VAR 0 1
10651: PPUSH
10652: LD_VAR 0 6
10656: PPUSH
10657: LD_VAR 0 7
10661: PPUSH
10662: CALL_OW 153
10666: GO 10699
10668: LD_INT 3
10670: DOUBLE
10671: EQUAL
10672: IFTRUE 10676
10674: GO 10698
10676: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10677: LD_VAR 0 1
10681: PPUSH
10682: LD_VAR 0 6
10686: PPUSH
10687: LD_VAR 0 7
10691: PPUSH
10692: CALL_OW 154
10696: GO 10699
10698: POP
// end ;
10699: LD_VAR 0 2
10703: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10704: LD_INT 0
10706: PPUSH
10707: PPUSH
10708: PPUSH
10709: PPUSH
10710: PPUSH
10711: PPUSH
// if not unit or not building then
10712: LD_VAR 0 1
10716: NOT
10717: PUSH
10718: LD_VAR 0 2
10722: NOT
10723: OR
10724: IFFALSE 10728
// exit ;
10726: GO 10886
// x := GetX ( building ) ;
10728: LD_ADDR_VAR 0 5
10732: PUSH
10733: LD_VAR 0 2
10737: PPUSH
10738: CALL_OW 250
10742: ST_TO_ADDR
// y := GetY ( building ) ;
10743: LD_ADDR_VAR 0 6
10747: PUSH
10748: LD_VAR 0 2
10752: PPUSH
10753: CALL_OW 251
10757: ST_TO_ADDR
// for i = 0 to 5 do
10758: LD_ADDR_VAR 0 4
10762: PUSH
10763: DOUBLE
10764: LD_INT 0
10766: DEC
10767: ST_TO_ADDR
10768: LD_INT 5
10770: PUSH
10771: FOR_TO
10772: IFFALSE 10884
// begin _x := ShiftX ( x , i , 3 ) ;
10774: LD_ADDR_VAR 0 7
10778: PUSH
10779: LD_VAR 0 5
10783: PPUSH
10784: LD_VAR 0 4
10788: PPUSH
10789: LD_INT 3
10791: PPUSH
10792: CALL_OW 272
10796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10797: LD_ADDR_VAR 0 8
10801: PUSH
10802: LD_VAR 0 6
10806: PPUSH
10807: LD_VAR 0 4
10811: PPUSH
10812: LD_INT 3
10814: PPUSH
10815: CALL_OW 273
10819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10820: LD_VAR 0 7
10824: PPUSH
10825: LD_VAR 0 8
10829: PPUSH
10830: CALL_OW 488
10834: NOT
10835: IFFALSE 10839
// continue ;
10837: GO 10771
// if HexInfo ( _x , _y ) = 0 then
10839: LD_VAR 0 7
10843: PPUSH
10844: LD_VAR 0 8
10848: PPUSH
10849: CALL_OW 428
10853: PUSH
10854: LD_INT 0
10856: EQUAL
10857: IFFALSE 10882
// begin ComMoveXY ( unit , _x , _y ) ;
10859: LD_VAR 0 1
10863: PPUSH
10864: LD_VAR 0 7
10868: PPUSH
10869: LD_VAR 0 8
10873: PPUSH
10874: CALL_OW 111
// exit ;
10878: POP
10879: POP
10880: GO 10886
// end ; end ;
10882: GO 10771
10884: POP
10885: POP
// end ;
10886: LD_VAR 0 3
10890: RET
// export function ScanBase ( side , base_area ) ; begin
10891: LD_INT 0
10893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10894: LD_ADDR_VAR 0 3
10898: PUSH
10899: LD_VAR 0 2
10903: PPUSH
10904: LD_INT 81
10906: PUSH
10907: LD_VAR 0 1
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PPUSH
10916: CALL_OW 70
10920: ST_TO_ADDR
// end ;
10921: LD_VAR 0 3
10925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10926: LD_INT 0
10928: PPUSH
10929: PPUSH
10930: PPUSH
10931: PPUSH
// result := false ;
10932: LD_ADDR_VAR 0 2
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// side := GetSide ( unit ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 255
10954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10955: LD_ADDR_VAR 0 4
10959: PUSH
10960: LD_VAR 0 1
10964: PPUSH
10965: CALL_OW 248
10969: ST_TO_ADDR
// case nat of 1 :
10970: LD_VAR 0 4
10974: PUSH
10975: LD_INT 1
10977: DOUBLE
10978: EQUAL
10979: IFTRUE 10983
10981: GO 10994
10983: POP
// tech := tech_lassight ; 2 :
10984: LD_ADDR_VAR 0 5
10988: PUSH
10989: LD_INT 12
10991: ST_TO_ADDR
10992: GO 11033
10994: LD_INT 2
10996: DOUBLE
10997: EQUAL
10998: IFTRUE 11002
11000: GO 11013
11002: POP
// tech := tech_mortar ; 3 :
11003: LD_ADDR_VAR 0 5
11007: PUSH
11008: LD_INT 41
11010: ST_TO_ADDR
11011: GO 11033
11013: LD_INT 3
11015: DOUBLE
11016: EQUAL
11017: IFTRUE 11021
11019: GO 11032
11021: POP
// tech := tech_bazooka ; end ;
11022: LD_ADDR_VAR 0 5
11026: PUSH
11027: LD_INT 44
11029: ST_TO_ADDR
11030: GO 11033
11032: POP
// if Researched ( side , tech ) then
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_VAR 0 5
11042: PPUSH
11043: CALL_OW 325
11047: IFFALSE 11074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11049: LD_ADDR_VAR 0 2
11053: PUSH
11054: LD_INT 5
11056: PUSH
11057: LD_INT 8
11059: PUSH
11060: LD_INT 9
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: PUSH
11068: LD_VAR 0 4
11072: ARRAY
11073: ST_TO_ADDR
// end ;
11074: LD_VAR 0 2
11078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11079: LD_INT 0
11081: PPUSH
11082: PPUSH
11083: PPUSH
// if not mines then
11084: LD_VAR 0 2
11088: NOT
11089: IFFALSE 11093
// exit ;
11091: GO 11237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11093: LD_ADDR_VAR 0 5
11097: PUSH
11098: LD_INT 81
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: LD_INT 21
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PPUSH
11131: CALL_OW 69
11135: ST_TO_ADDR
// for i in mines do
11136: LD_ADDR_VAR 0 4
11140: PUSH
11141: LD_VAR 0 2
11145: PUSH
11146: FOR_IN
11147: IFFALSE 11235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11149: LD_VAR 0 4
11153: PUSH
11154: LD_INT 1
11156: ARRAY
11157: PPUSH
11158: LD_VAR 0 4
11162: PUSH
11163: LD_INT 2
11165: ARRAY
11166: PPUSH
11167: CALL_OW 458
11171: NOT
11172: IFFALSE 11176
// continue ;
11174: GO 11146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11176: LD_VAR 0 4
11180: PUSH
11181: LD_INT 1
11183: ARRAY
11184: PPUSH
11185: LD_VAR 0 4
11189: PUSH
11190: LD_INT 2
11192: ARRAY
11193: PPUSH
11194: CALL_OW 428
11198: PUSH
11199: LD_VAR 0 5
11203: IN
11204: IFFALSE 11233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11206: LD_VAR 0 4
11210: PUSH
11211: LD_INT 1
11213: ARRAY
11214: PPUSH
11215: LD_VAR 0 4
11219: PUSH
11220: LD_INT 2
11222: ARRAY
11223: PPUSH
11224: LD_VAR 0 1
11228: PPUSH
11229: CALL_OW 456
// end ;
11233: GO 11146
11235: POP
11236: POP
// end ;
11237: LD_VAR 0 3
11241: RET
// export function Count ( array ) ; begin
11242: LD_INT 0
11244: PPUSH
// result := array + 0 ;
11245: LD_ADDR_VAR 0 2
11249: PUSH
11250: LD_VAR 0 1
11254: PUSH
11255: LD_INT 0
11257: PLUS
11258: ST_TO_ADDR
// end ;
11259: LD_VAR 0 2
11263: RET
// export function IsEmpty ( building ) ; begin
11264: LD_INT 0
11266: PPUSH
// if not building then
11267: LD_VAR 0 1
11271: NOT
11272: IFFALSE 11276
// exit ;
11274: GO 11319
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11276: LD_ADDR_VAR 0 2
11280: PUSH
11281: LD_VAR 0 1
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 255
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 58
11305: PUSH
11306: EMPTY
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 69
11317: IN
11318: ST_TO_ADDR
// end ;
11319: LD_VAR 0 2
11323: RET
// export function IsNotFull ( building ) ; var places ; begin
11324: LD_INT 0
11326: PPUSH
11327: PPUSH
// if not building then
11328: LD_VAR 0 1
11332: NOT
11333: IFFALSE 11337
// exit ;
11335: GO 11365
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11337: LD_ADDR_VAR 0 2
11341: PUSH
11342: LD_VAR 0 1
11346: PPUSH
11347: LD_INT 3
11349: PUSH
11350: LD_INT 62
11352: PUSH
11353: EMPTY
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: ST_TO_ADDR
// end ;
11365: LD_VAR 0 2
11369: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11370: LD_INT 0
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
// tmp := [ ] ;
11376: LD_ADDR_VAR 0 3
11380: PUSH
11381: EMPTY
11382: ST_TO_ADDR
// list := [ ] ;
11383: LD_ADDR_VAR 0 5
11387: PUSH
11388: EMPTY
11389: ST_TO_ADDR
// for i = 16 to 25 do
11390: LD_ADDR_VAR 0 4
11394: PUSH
11395: DOUBLE
11396: LD_INT 16
11398: DEC
11399: ST_TO_ADDR
11400: LD_INT 25
11402: PUSH
11403: FOR_TO
11404: IFFALSE 11477
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11406: LD_ADDR_VAR 0 3
11410: PUSH
11411: LD_VAR 0 3
11415: PUSH
11416: LD_INT 22
11418: PUSH
11419: LD_VAR 0 1
11423: PPUSH
11424: CALL_OW 255
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 91
11435: PUSH
11436: LD_VAR 0 1
11440: PUSH
11441: LD_INT 6
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 30
11451: PUSH
11452: LD_VAR 0 4
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: PPUSH
11469: CALL_OW 69
11473: ADD
11474: ST_TO_ADDR
11475: GO 11403
11477: POP
11478: POP
// for i = 1 to tmp do
11479: LD_ADDR_VAR 0 4
11483: PUSH
11484: DOUBLE
11485: LD_INT 1
11487: DEC
11488: ST_TO_ADDR
11489: LD_VAR 0 3
11493: PUSH
11494: FOR_TO
11495: IFFALSE 11583
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11497: LD_ADDR_VAR 0 5
11501: PUSH
11502: LD_VAR 0 5
11506: PUSH
11507: LD_VAR 0 3
11511: PUSH
11512: LD_VAR 0 4
11516: ARRAY
11517: PPUSH
11518: CALL_OW 266
11522: PUSH
11523: LD_VAR 0 3
11527: PUSH
11528: LD_VAR 0 4
11532: ARRAY
11533: PPUSH
11534: CALL_OW 250
11538: PUSH
11539: LD_VAR 0 3
11543: PUSH
11544: LD_VAR 0 4
11548: ARRAY
11549: PPUSH
11550: CALL_OW 251
11554: PUSH
11555: LD_VAR 0 3
11559: PUSH
11560: LD_VAR 0 4
11564: ARRAY
11565: PPUSH
11566: CALL_OW 254
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: ADD
11580: ST_TO_ADDR
11581: GO 11494
11583: POP
11584: POP
// result := list ;
11585: LD_ADDR_VAR 0 2
11589: PUSH
11590: LD_VAR 0 5
11594: ST_TO_ADDR
// end ;
11595: LD_VAR 0 2
11599: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11600: LD_INT 0
11602: PPUSH
11603: PPUSH
11604: PPUSH
11605: PPUSH
11606: PPUSH
11607: PPUSH
11608: PPUSH
// if not factory then
11609: LD_VAR 0 1
11613: NOT
11614: IFFALSE 11618
// exit ;
11616: GO 12211
// if control = control_apeman then
11618: LD_VAR 0 4
11622: PUSH
11623: LD_INT 5
11625: EQUAL
11626: IFFALSE 11735
// begin tmp := UnitsInside ( factory ) ;
11628: LD_ADDR_VAR 0 8
11632: PUSH
11633: LD_VAR 0 1
11637: PPUSH
11638: CALL_OW 313
11642: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11643: LD_VAR 0 8
11647: PPUSH
11648: LD_INT 25
11650: PUSH
11651: LD_INT 12
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 72
11662: NOT
11663: IFFALSE 11673
// control := control_manual ;
11665: LD_ADDR_VAR 0 4
11669: PUSH
11670: LD_INT 1
11672: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11673: LD_ADDR_VAR 0 8
11677: PUSH
11678: LD_VAR 0 1
11682: PPUSH
11683: CALL 11370 0 1
11687: ST_TO_ADDR
// if tmp then
11688: LD_VAR 0 8
11692: IFFALSE 11735
// begin for i in tmp do
11694: LD_ADDR_VAR 0 7
11698: PUSH
11699: LD_VAR 0 8
11703: PUSH
11704: FOR_IN
11705: IFFALSE 11733
// if i [ 1 ] = b_ext_radio then
11707: LD_VAR 0 7
11711: PUSH
11712: LD_INT 1
11714: ARRAY
11715: PUSH
11716: LD_INT 22
11718: EQUAL
11719: IFFALSE 11731
// begin control := control_remote ;
11721: LD_ADDR_VAR 0 4
11725: PUSH
11726: LD_INT 2
11728: ST_TO_ADDR
// break ;
11729: GO 11733
// end ;
11731: GO 11704
11733: POP
11734: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11735: LD_VAR 0 1
11739: PPUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_VAR 0 3
11749: PPUSH
11750: LD_VAR 0 4
11754: PPUSH
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 448
11764: IFFALSE 11799
// begin result := [ chassis , engine , control , weapon ] ;
11766: LD_ADDR_VAR 0 6
11770: PUSH
11771: LD_VAR 0 2
11775: PUSH
11776: LD_VAR 0 3
11780: PUSH
11781: LD_VAR 0 4
11785: PUSH
11786: LD_VAR 0 5
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: ST_TO_ADDR
// exit ;
11797: GO 12211
// end ; _chassis := AvailableChassisList ( factory ) ;
11799: LD_ADDR_VAR 0 9
11803: PUSH
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 475
11813: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11814: LD_ADDR_VAR 0 11
11818: PUSH
11819: LD_VAR 0 1
11823: PPUSH
11824: CALL_OW 476
11828: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11829: LD_ADDR_VAR 0 12
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 477
11843: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11844: LD_ADDR_VAR 0 10
11848: PUSH
11849: LD_VAR 0 1
11853: PPUSH
11854: CALL_OW 478
11858: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11859: LD_VAR 0 9
11863: NOT
11864: PUSH
11865: LD_VAR 0 11
11869: NOT
11870: OR
11871: PUSH
11872: LD_VAR 0 12
11876: NOT
11877: OR
11878: PUSH
11879: LD_VAR 0 10
11883: NOT
11884: OR
11885: IFFALSE 11920
// begin result := [ chassis , engine , control , weapon ] ;
11887: LD_ADDR_VAR 0 6
11891: PUSH
11892: LD_VAR 0 2
11896: PUSH
11897: LD_VAR 0 3
11901: PUSH
11902: LD_VAR 0 4
11906: PUSH
11907: LD_VAR 0 5
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: ST_TO_ADDR
// exit ;
11918: GO 12211
// end ; if not chassis in _chassis then
11920: LD_VAR 0 2
11924: PUSH
11925: LD_VAR 0 9
11929: IN
11930: NOT
11931: IFFALSE 11957
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11933: LD_ADDR_VAR 0 2
11937: PUSH
11938: LD_VAR 0 9
11942: PUSH
11943: LD_INT 1
11945: PPUSH
11946: LD_VAR 0 9
11950: PPUSH
11951: CALL_OW 12
11955: ARRAY
11956: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11957: LD_VAR 0 2
11961: PPUSH
11962: LD_VAR 0 3
11966: PPUSH
11967: CALL 12216 0 2
11971: NOT
11972: IFFALSE 12031
// repeat engine := _engine [ 1 ] ;
11974: LD_ADDR_VAR 0 3
11978: PUSH
11979: LD_VAR 0 11
11983: PUSH
11984: LD_INT 1
11986: ARRAY
11987: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11988: LD_ADDR_VAR 0 11
11992: PUSH
11993: LD_VAR 0 11
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: CALL_OW 3
12005: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12006: LD_VAR 0 2
12010: PPUSH
12011: LD_VAR 0 3
12015: PPUSH
12016: CALL 12216 0 2
12020: PUSH
12021: LD_VAR 0 11
12025: PUSH
12026: EMPTY
12027: EQUAL
12028: OR
12029: IFFALSE 11974
// if not control in _control then
12031: LD_VAR 0 4
12035: PUSH
12036: LD_VAR 0 12
12040: IN
12041: NOT
12042: IFFALSE 12068
// control := _control [ rand ( 1 , _control ) ] ;
12044: LD_ADDR_VAR 0 4
12048: PUSH
12049: LD_VAR 0 12
12053: PUSH
12054: LD_INT 1
12056: PPUSH
12057: LD_VAR 0 12
12061: PPUSH
12062: CALL_OW 12
12066: ARRAY
12067: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12068: LD_VAR 0 2
12072: PPUSH
12073: LD_VAR 0 5
12077: PPUSH
12078: CALL 12436 0 2
12082: NOT
12083: IFFALSE 12142
// repeat weapon := _weapon [ 1 ] ;
12085: LD_ADDR_VAR 0 5
12089: PUSH
12090: LD_VAR 0 10
12094: PUSH
12095: LD_INT 1
12097: ARRAY
12098: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12099: LD_ADDR_VAR 0 10
12103: PUSH
12104: LD_VAR 0 10
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 3
12116: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12117: LD_VAR 0 2
12121: PPUSH
12122: LD_VAR 0 5
12126: PPUSH
12127: CALL 12436 0 2
12131: PUSH
12132: LD_VAR 0 10
12136: PUSH
12137: EMPTY
12138: EQUAL
12139: OR
12140: IFFALSE 12085
// result := [ ] ;
12142: LD_ADDR_VAR 0 6
12146: PUSH
12147: EMPTY
12148: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_VAR 0 4
12168: PPUSH
12169: LD_VAR 0 5
12173: PPUSH
12174: CALL_OW 448
12178: IFFALSE 12211
// result := [ chassis , engine , control , weapon ] ;
12180: LD_ADDR_VAR 0 6
12184: PUSH
12185: LD_VAR 0 2
12189: PUSH
12190: LD_VAR 0 3
12194: PUSH
12195: LD_VAR 0 4
12199: PUSH
12200: LD_VAR 0 5
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: ST_TO_ADDR
// end ;
12211: LD_VAR 0 6
12215: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12216: LD_INT 0
12218: PPUSH
// if not chassis or not engine then
12219: LD_VAR 0 1
12223: NOT
12224: PUSH
12225: LD_VAR 0 2
12229: NOT
12230: OR
12231: IFFALSE 12235
// exit ;
12233: GO 12431
// case engine of engine_solar :
12235: LD_VAR 0 2
12239: PUSH
12240: LD_INT 2
12242: DOUBLE
12243: EQUAL
12244: IFTRUE 12248
12246: GO 12286
12248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12249: LD_ADDR_VAR 0 3
12253: PUSH
12254: LD_INT 11
12256: PUSH
12257: LD_INT 12
12259: PUSH
12260: LD_INT 13
12262: PUSH
12263: LD_INT 14
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: LD_INT 3
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: ST_TO_ADDR
12284: GO 12415
12286: LD_INT 1
12288: DOUBLE
12289: EQUAL
12290: IFTRUE 12294
12292: GO 12356
12294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12295: LD_ADDR_VAR 0 3
12299: PUSH
12300: LD_INT 11
12302: PUSH
12303: LD_INT 12
12305: PUSH
12306: LD_INT 13
12308: PUSH
12309: LD_INT 14
12311: PUSH
12312: LD_INT 1
12314: PUSH
12315: LD_INT 2
12317: PUSH
12318: LD_INT 3
12320: PUSH
12321: LD_INT 4
12323: PUSH
12324: LD_INT 5
12326: PUSH
12327: LD_INT 21
12329: PUSH
12330: LD_INT 23
12332: PUSH
12333: LD_INT 22
12335: PUSH
12336: LD_INT 24
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: ST_TO_ADDR
12354: GO 12415
12356: LD_INT 3
12358: DOUBLE
12359: EQUAL
12360: IFTRUE 12364
12362: GO 12414
12364: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12365: LD_ADDR_VAR 0 3
12369: PUSH
12370: LD_INT 13
12372: PUSH
12373: LD_INT 14
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 4
12384: PUSH
12385: LD_INT 5
12387: PUSH
12388: LD_INT 21
12390: PUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 23
12396: PUSH
12397: LD_INT 24
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: ST_TO_ADDR
12412: GO 12415
12414: POP
// result := ( chassis in result ) ;
12415: LD_ADDR_VAR 0 3
12419: PUSH
12420: LD_VAR 0 1
12424: PUSH
12425: LD_VAR 0 3
12429: IN
12430: ST_TO_ADDR
// end ;
12431: LD_VAR 0 3
12435: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12436: LD_INT 0
12438: PPUSH
// if not chassis or not weapon then
12439: LD_VAR 0 1
12443: NOT
12444: PUSH
12445: LD_VAR 0 2
12449: NOT
12450: OR
12451: IFFALSE 12455
// exit ;
12453: GO 13515
// case weapon of us_machine_gun :
12455: LD_VAR 0 2
12459: PUSH
12460: LD_INT 2
12462: DOUBLE
12463: EQUAL
12464: IFTRUE 12468
12466: GO 12498
12468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: LD_INT 1
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: LD_INT 3
12482: PUSH
12483: LD_INT 4
12485: PUSH
12486: LD_INT 5
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: ST_TO_ADDR
12496: GO 13499
12498: LD_INT 3
12500: DOUBLE
12501: EQUAL
12502: IFTRUE 12506
12504: GO 12536
12506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12507: LD_ADDR_VAR 0 3
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: LD_INT 2
12517: PUSH
12518: LD_INT 3
12520: PUSH
12521: LD_INT 4
12523: PUSH
12524: LD_INT 5
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: ST_TO_ADDR
12534: GO 13499
12536: LD_INT 11
12538: DOUBLE
12539: EQUAL
12540: IFTRUE 12544
12542: GO 12574
12544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12545: LD_ADDR_VAR 0 3
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: LD_INT 4
12561: PUSH
12562: LD_INT 5
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: ST_TO_ADDR
12572: GO 13499
12574: LD_INT 4
12576: DOUBLE
12577: EQUAL
12578: IFTRUE 12582
12580: GO 12608
12582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12583: LD_ADDR_VAR 0 3
12587: PUSH
12588: LD_INT 2
12590: PUSH
12591: LD_INT 3
12593: PUSH
12594: LD_INT 4
12596: PUSH
12597: LD_INT 5
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: ST_TO_ADDR
12606: GO 13499
12608: LD_INT 5
12610: DOUBLE
12611: EQUAL
12612: IFTRUE 12616
12614: GO 12642
12616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12617: LD_ADDR_VAR 0 3
12621: PUSH
12622: LD_INT 2
12624: PUSH
12625: LD_INT 3
12627: PUSH
12628: LD_INT 4
12630: PUSH
12631: LD_INT 5
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: ST_TO_ADDR
12640: GO 13499
12642: LD_INT 9
12644: DOUBLE
12645: EQUAL
12646: IFTRUE 12650
12648: GO 12676
12650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12651: LD_ADDR_VAR 0 3
12655: PUSH
12656: LD_INT 2
12658: PUSH
12659: LD_INT 3
12661: PUSH
12662: LD_INT 4
12664: PUSH
12665: LD_INT 5
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: ST_TO_ADDR
12674: GO 13499
12676: LD_INT 7
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12710
12684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12685: LD_ADDR_VAR 0 3
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: LD_INT 5
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: ST_TO_ADDR
12708: GO 13499
12710: LD_INT 12
12712: DOUBLE
12713: EQUAL
12714: IFTRUE 12718
12716: GO 12744
12718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12719: LD_ADDR_VAR 0 3
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: LD_INT 3
12729: PUSH
12730: LD_INT 4
12732: PUSH
12733: LD_INT 5
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: ST_TO_ADDR
12742: GO 13499
12744: LD_INT 13
12746: DOUBLE
12747: EQUAL
12748: IFTRUE 12752
12750: GO 12778
12752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12753: LD_ADDR_VAR 0 3
12757: PUSH
12758: LD_INT 2
12760: PUSH
12761: LD_INT 3
12763: PUSH
12764: LD_INT 4
12766: PUSH
12767: LD_INT 5
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: ST_TO_ADDR
12776: GO 13499
12778: LD_INT 14
12780: DOUBLE
12781: EQUAL
12782: IFTRUE 12786
12784: GO 12804
12786: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12787: LD_ADDR_VAR 0 3
12791: PUSH
12792: LD_INT 4
12794: PUSH
12795: LD_INT 5
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: ST_TO_ADDR
12802: GO 13499
12804: LD_INT 6
12806: DOUBLE
12807: EQUAL
12808: IFTRUE 12812
12810: GO 12830
12812: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12813: LD_ADDR_VAR 0 3
12817: PUSH
12818: LD_INT 4
12820: PUSH
12821: LD_INT 5
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: ST_TO_ADDR
12828: GO 13499
12830: LD_INT 10
12832: DOUBLE
12833: EQUAL
12834: IFTRUE 12838
12836: GO 12856
12838: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12839: LD_ADDR_VAR 0 3
12843: PUSH
12844: LD_INT 4
12846: PUSH
12847: LD_INT 5
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: ST_TO_ADDR
12854: GO 13499
12856: LD_INT 22
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 12890
12864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12865: LD_ADDR_VAR 0 3
12869: PUSH
12870: LD_INT 11
12872: PUSH
12873: LD_INT 12
12875: PUSH
12876: LD_INT 13
12878: PUSH
12879: LD_INT 14
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: ST_TO_ADDR
12888: GO 13499
12890: LD_INT 23
12892: DOUBLE
12893: EQUAL
12894: IFTRUE 12898
12896: GO 12924
12898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12899: LD_ADDR_VAR 0 3
12903: PUSH
12904: LD_INT 11
12906: PUSH
12907: LD_INT 12
12909: PUSH
12910: LD_INT 13
12912: PUSH
12913: LD_INT 14
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: ST_TO_ADDR
12922: GO 13499
12924: LD_INT 24
12926: DOUBLE
12927: EQUAL
12928: IFTRUE 12932
12930: GO 12958
12932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12933: LD_ADDR_VAR 0 3
12937: PUSH
12938: LD_INT 11
12940: PUSH
12941: LD_INT 12
12943: PUSH
12944: LD_INT 13
12946: PUSH
12947: LD_INT 14
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: ST_TO_ADDR
12956: GO 13499
12958: LD_INT 30
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 12992
12966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12967: LD_ADDR_VAR 0 3
12971: PUSH
12972: LD_INT 11
12974: PUSH
12975: LD_INT 12
12977: PUSH
12978: LD_INT 13
12980: PUSH
12981: LD_INT 14
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: ST_TO_ADDR
12990: GO 13499
12992: LD_INT 25
12994: DOUBLE
12995: EQUAL
12996: IFTRUE 13000
12998: GO 13018
13000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13001: LD_ADDR_VAR 0 3
13005: PUSH
13006: LD_INT 13
13008: PUSH
13009: LD_INT 14
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: ST_TO_ADDR
13016: GO 13499
13018: LD_INT 27
13020: DOUBLE
13021: EQUAL
13022: IFTRUE 13026
13024: GO 13044
13026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13027: LD_ADDR_VAR 0 3
13031: PUSH
13032: LD_INT 13
13034: PUSH
13035: LD_INT 14
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: ST_TO_ADDR
13042: GO 13499
13044: LD_INT 92
13046: DOUBLE
13047: EQUAL
13048: IFTRUE 13052
13050: GO 13078
13052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13053: LD_ADDR_VAR 0 3
13057: PUSH
13058: LD_INT 11
13060: PUSH
13061: LD_INT 12
13063: PUSH
13064: LD_INT 13
13066: PUSH
13067: LD_INT 14
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: ST_TO_ADDR
13076: GO 13499
13078: LD_INT 28
13080: DOUBLE
13081: EQUAL
13082: IFTRUE 13086
13084: GO 13104
13086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13087: LD_ADDR_VAR 0 3
13091: PUSH
13092: LD_INT 13
13094: PUSH
13095: LD_INT 14
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: ST_TO_ADDR
13102: GO 13499
13104: LD_INT 29
13106: DOUBLE
13107: EQUAL
13108: IFTRUE 13112
13110: GO 13130
13112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13113: LD_ADDR_VAR 0 3
13117: PUSH
13118: LD_INT 13
13120: PUSH
13121: LD_INT 14
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: ST_TO_ADDR
13128: GO 13499
13130: LD_INT 31
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13156
13138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_INT 13
13146: PUSH
13147: LD_INT 14
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: ST_TO_ADDR
13154: GO 13499
13156: LD_INT 26
13158: DOUBLE
13159: EQUAL
13160: IFTRUE 13164
13162: GO 13182
13164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: LD_INT 13
13172: PUSH
13173: LD_INT 14
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: ST_TO_ADDR
13180: GO 13499
13182: LD_INT 42
13184: DOUBLE
13185: EQUAL
13186: IFTRUE 13190
13188: GO 13216
13190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_INT 21
13198: PUSH
13199: LD_INT 22
13201: PUSH
13202: LD_INT 23
13204: PUSH
13205: LD_INT 24
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: ST_TO_ADDR
13214: GO 13499
13216: LD_INT 43
13218: DOUBLE
13219: EQUAL
13220: IFTRUE 13224
13222: GO 13250
13224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13225: LD_ADDR_VAR 0 3
13229: PUSH
13230: LD_INT 21
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_INT 23
13238: PUSH
13239: LD_INT 24
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: ST_TO_ADDR
13248: GO 13499
13250: LD_INT 44
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13284
13258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13259: LD_ADDR_VAR 0 3
13263: PUSH
13264: LD_INT 21
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_INT 23
13272: PUSH
13273: LD_INT 24
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: ST_TO_ADDR
13282: GO 13499
13284: LD_INT 45
13286: DOUBLE
13287: EQUAL
13288: IFTRUE 13292
13290: GO 13318
13292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13293: LD_ADDR_VAR 0 3
13297: PUSH
13298: LD_INT 21
13300: PUSH
13301: LD_INT 22
13303: PUSH
13304: LD_INT 23
13306: PUSH
13307: LD_INT 24
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: ST_TO_ADDR
13316: GO 13499
13318: LD_INT 49
13320: DOUBLE
13321: EQUAL
13322: IFTRUE 13326
13324: GO 13352
13326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13327: LD_ADDR_VAR 0 3
13331: PUSH
13332: LD_INT 21
13334: PUSH
13335: LD_INT 22
13337: PUSH
13338: LD_INT 23
13340: PUSH
13341: LD_INT 24
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: ST_TO_ADDR
13350: GO 13499
13352: LD_INT 51
13354: DOUBLE
13355: EQUAL
13356: IFTRUE 13360
13358: GO 13386
13360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13361: LD_ADDR_VAR 0 3
13365: PUSH
13366: LD_INT 21
13368: PUSH
13369: LD_INT 22
13371: PUSH
13372: LD_INT 23
13374: PUSH
13375: LD_INT 24
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: ST_TO_ADDR
13384: GO 13499
13386: LD_INT 52
13388: DOUBLE
13389: EQUAL
13390: IFTRUE 13394
13392: GO 13420
13394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13395: LD_ADDR_VAR 0 3
13399: PUSH
13400: LD_INT 21
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 23
13408: PUSH
13409: LD_INT 24
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: ST_TO_ADDR
13418: GO 13499
13420: LD_INT 53
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13446
13428: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13429: LD_ADDR_VAR 0 3
13433: PUSH
13434: LD_INT 23
13436: PUSH
13437: LD_INT 24
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: ST_TO_ADDR
13444: GO 13499
13446: LD_INT 46
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 13472
13454: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13455: LD_ADDR_VAR 0 3
13459: PUSH
13460: LD_INT 23
13462: PUSH
13463: LD_INT 24
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: ST_TO_ADDR
13470: GO 13499
13472: LD_INT 47
13474: DOUBLE
13475: EQUAL
13476: IFTRUE 13480
13478: GO 13498
13480: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13481: LD_ADDR_VAR 0 3
13485: PUSH
13486: LD_INT 23
13488: PUSH
13489: LD_INT 24
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// result := ( chassis in result ) ;
13499: LD_ADDR_VAR 0 3
13503: PUSH
13504: LD_VAR 0 1
13508: PUSH
13509: LD_VAR 0 3
13513: IN
13514: ST_TO_ADDR
// end ;
13515: LD_VAR 0 3
13519: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
13525: PPUSH
13526: PPUSH
13527: PPUSH
13528: PPUSH
// result := array ;
13529: LD_ADDR_VAR 0 5
13533: PUSH
13534: LD_VAR 0 1
13538: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13539: LD_VAR 0 1
13543: NOT
13544: PUSH
13545: LD_VAR 0 2
13549: NOT
13550: OR
13551: PUSH
13552: LD_VAR 0 3
13556: NOT
13557: OR
13558: PUSH
13559: LD_VAR 0 2
13563: PUSH
13564: LD_VAR 0 1
13568: GREATER
13569: OR
13570: PUSH
13571: LD_VAR 0 3
13575: PUSH
13576: LD_VAR 0 1
13580: GREATER
13581: OR
13582: IFFALSE 13586
// exit ;
13584: GO 13882
// if direction then
13586: LD_VAR 0 4
13590: IFFALSE 13654
// begin d := 1 ;
13592: LD_ADDR_VAR 0 9
13596: PUSH
13597: LD_INT 1
13599: ST_TO_ADDR
// if i_from > i_to then
13600: LD_VAR 0 2
13604: PUSH
13605: LD_VAR 0 3
13609: GREATER
13610: IFFALSE 13636
// length := ( array - i_from ) + i_to else
13612: LD_ADDR_VAR 0 11
13616: PUSH
13617: LD_VAR 0 1
13621: PUSH
13622: LD_VAR 0 2
13626: MINUS
13627: PUSH
13628: LD_VAR 0 3
13632: PLUS
13633: ST_TO_ADDR
13634: GO 13652
// length := i_to - i_from ;
13636: LD_ADDR_VAR 0 11
13640: PUSH
13641: LD_VAR 0 3
13645: PUSH
13646: LD_VAR 0 2
13650: MINUS
13651: ST_TO_ADDR
// end else
13652: GO 13715
// begin d := - 1 ;
13654: LD_ADDR_VAR 0 9
13658: PUSH
13659: LD_INT 1
13661: NEG
13662: ST_TO_ADDR
// if i_from > i_to then
13663: LD_VAR 0 2
13667: PUSH
13668: LD_VAR 0 3
13672: GREATER
13673: IFFALSE 13693
// length := i_from - i_to else
13675: LD_ADDR_VAR 0 11
13679: PUSH
13680: LD_VAR 0 2
13684: PUSH
13685: LD_VAR 0 3
13689: MINUS
13690: ST_TO_ADDR
13691: GO 13715
// length := ( array - i_to ) + i_from ;
13693: LD_ADDR_VAR 0 11
13697: PUSH
13698: LD_VAR 0 1
13702: PUSH
13703: LD_VAR 0 3
13707: MINUS
13708: PUSH
13709: LD_VAR 0 2
13713: PLUS
13714: ST_TO_ADDR
// end ; if not length then
13715: LD_VAR 0 11
13719: NOT
13720: IFFALSE 13724
// exit ;
13722: GO 13882
// tmp := array ;
13724: LD_ADDR_VAR 0 10
13728: PUSH
13729: LD_VAR 0 1
13733: ST_TO_ADDR
// for i = 1 to length do
13734: LD_ADDR_VAR 0 6
13738: PUSH
13739: DOUBLE
13740: LD_INT 1
13742: DEC
13743: ST_TO_ADDR
13744: LD_VAR 0 11
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13870
// begin for j = 1 to array do
13752: LD_ADDR_VAR 0 7
13756: PUSH
13757: DOUBLE
13758: LD_INT 1
13760: DEC
13761: ST_TO_ADDR
13762: LD_VAR 0 1
13766: PUSH
13767: FOR_TO
13768: IFFALSE 13856
// begin k := j + d ;
13770: LD_ADDR_VAR 0 8
13774: PUSH
13775: LD_VAR 0 7
13779: PUSH
13780: LD_VAR 0 9
13784: PLUS
13785: ST_TO_ADDR
// if k > array then
13786: LD_VAR 0 8
13790: PUSH
13791: LD_VAR 0 1
13795: GREATER
13796: IFFALSE 13806
// k := 1 ;
13798: LD_ADDR_VAR 0 8
13802: PUSH
13803: LD_INT 1
13805: ST_TO_ADDR
// if not k then
13806: LD_VAR 0 8
13810: NOT
13811: IFFALSE 13823
// k := array ;
13813: LD_ADDR_VAR 0 8
13817: PUSH
13818: LD_VAR 0 1
13822: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13823: LD_ADDR_VAR 0 10
13827: PUSH
13828: LD_VAR 0 10
13832: PPUSH
13833: LD_VAR 0 8
13837: PPUSH
13838: LD_VAR 0 1
13842: PUSH
13843: LD_VAR 0 7
13847: ARRAY
13848: PPUSH
13849: CALL_OW 1
13853: ST_TO_ADDR
// end ;
13854: GO 13767
13856: POP
13857: POP
// array := tmp ;
13858: LD_ADDR_VAR 0 1
13862: PUSH
13863: LD_VAR 0 10
13867: ST_TO_ADDR
// end ;
13868: GO 13749
13870: POP
13871: POP
// result := array ;
13872: LD_ADDR_VAR 0 5
13876: PUSH
13877: LD_VAR 0 1
13881: ST_TO_ADDR
// end ;
13882: LD_VAR 0 5
13886: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
// result := 0 ;
13891: LD_ADDR_VAR 0 3
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// if not array or not value in array then
13899: LD_VAR 0 1
13903: NOT
13904: PUSH
13905: LD_VAR 0 2
13909: PUSH
13910: LD_VAR 0 1
13914: IN
13915: NOT
13916: OR
13917: IFFALSE 13921
// exit ;
13919: GO 13975
// for i = 1 to array do
13921: LD_ADDR_VAR 0 4
13925: PUSH
13926: DOUBLE
13927: LD_INT 1
13929: DEC
13930: ST_TO_ADDR
13931: LD_VAR 0 1
13935: PUSH
13936: FOR_TO
13937: IFFALSE 13973
// if value = array [ i ] then
13939: LD_VAR 0 2
13943: PUSH
13944: LD_VAR 0 1
13948: PUSH
13949: LD_VAR 0 4
13953: ARRAY
13954: EQUAL
13955: IFFALSE 13971
// begin result := i ;
13957: LD_ADDR_VAR 0 3
13961: PUSH
13962: LD_VAR 0 4
13966: ST_TO_ADDR
// exit ;
13967: POP
13968: POP
13969: GO 13975
// end ;
13971: GO 13936
13973: POP
13974: POP
// end ;
13975: LD_VAR 0 3
13979: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13980: LD_INT 0
13982: PPUSH
// vc_chassis := chassis ;
13983: LD_ADDR_OWVAR 37
13987: PUSH
13988: LD_VAR 0 1
13992: ST_TO_ADDR
// vc_engine := engine ;
13993: LD_ADDR_OWVAR 39
13997: PUSH
13998: LD_VAR 0 2
14002: ST_TO_ADDR
// vc_control := control ;
14003: LD_ADDR_OWVAR 38
14007: PUSH
14008: LD_VAR 0 3
14012: ST_TO_ADDR
// vc_weapon := weapon ;
14013: LD_ADDR_OWVAR 40
14017: PUSH
14018: LD_VAR 0 4
14022: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14023: LD_ADDR_OWVAR 41
14027: PUSH
14028: LD_VAR 0 5
14032: ST_TO_ADDR
// end ;
14033: LD_VAR 0 6
14037: RET
// export function WantPlant ( unit ) ; var task ; begin
14038: LD_INT 0
14040: PPUSH
14041: PPUSH
// result := false ;
14042: LD_ADDR_VAR 0 2
14046: PUSH
14047: LD_INT 0
14049: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14050: LD_ADDR_VAR 0 3
14054: PUSH
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 437
14064: ST_TO_ADDR
// if task then
14065: LD_VAR 0 3
14069: IFFALSE 14097
// if task [ 1 ] [ 1 ] = p then
14071: LD_VAR 0 3
14075: PUSH
14076: LD_INT 1
14078: ARRAY
14079: PUSH
14080: LD_INT 1
14082: ARRAY
14083: PUSH
14084: LD_STRING p
14086: EQUAL
14087: IFFALSE 14097
// result := true ;
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: LD_INT 1
14096: ST_TO_ADDR
// end ;
14097: LD_VAR 0 2
14101: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14102: LD_INT 0
14104: PPUSH
14105: PPUSH
14106: PPUSH
14107: PPUSH
// if pos < 1 then
14108: LD_VAR 0 2
14112: PUSH
14113: LD_INT 1
14115: LESS
14116: IFFALSE 14120
// exit ;
14118: GO 14423
// if pos = 1 then
14120: LD_VAR 0 2
14124: PUSH
14125: LD_INT 1
14127: EQUAL
14128: IFFALSE 14161
// result := Replace ( arr , pos [ 1 ] , value ) else
14130: LD_ADDR_VAR 0 4
14134: PUSH
14135: LD_VAR 0 1
14139: PPUSH
14140: LD_VAR 0 2
14144: PUSH
14145: LD_INT 1
14147: ARRAY
14148: PPUSH
14149: LD_VAR 0 3
14153: PPUSH
14154: CALL_OW 1
14158: ST_TO_ADDR
14159: GO 14423
// begin tmp := arr ;
14161: LD_ADDR_VAR 0 6
14165: PUSH
14166: LD_VAR 0 1
14170: ST_TO_ADDR
// s_arr := [ tmp ] ;
14171: LD_ADDR_VAR 0 7
14175: PUSH
14176: LD_VAR 0 6
14180: PUSH
14181: EMPTY
14182: LIST
14183: ST_TO_ADDR
// for i = 1 to pos - 1 do
14184: LD_ADDR_VAR 0 5
14188: PUSH
14189: DOUBLE
14190: LD_INT 1
14192: DEC
14193: ST_TO_ADDR
14194: LD_VAR 0 2
14198: PUSH
14199: LD_INT 1
14201: MINUS
14202: PUSH
14203: FOR_TO
14204: IFFALSE 14249
// begin tmp := tmp [ pos [ i ] ] ;
14206: LD_ADDR_VAR 0 6
14210: PUSH
14211: LD_VAR 0 6
14215: PUSH
14216: LD_VAR 0 2
14220: PUSH
14221: LD_VAR 0 5
14225: ARRAY
14226: ARRAY
14227: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14228: LD_ADDR_VAR 0 7
14232: PUSH
14233: LD_VAR 0 7
14237: PUSH
14238: LD_VAR 0 6
14242: PUSH
14243: EMPTY
14244: LIST
14245: ADD
14246: ST_TO_ADDR
// end ;
14247: GO 14203
14249: POP
14250: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14251: LD_ADDR_VAR 0 6
14255: PUSH
14256: LD_VAR 0 6
14260: PPUSH
14261: LD_VAR 0 2
14265: PUSH
14266: LD_VAR 0 2
14270: ARRAY
14271: PPUSH
14272: LD_VAR 0 3
14276: PPUSH
14277: CALL_OW 1
14281: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14282: LD_ADDR_VAR 0 7
14286: PUSH
14287: LD_VAR 0 7
14291: PPUSH
14292: LD_VAR 0 7
14296: PPUSH
14297: LD_VAR 0 6
14301: PPUSH
14302: CALL_OW 1
14306: ST_TO_ADDR
// for i = s_arr downto 2 do
14307: LD_ADDR_VAR 0 5
14311: PUSH
14312: DOUBLE
14313: LD_VAR 0 7
14317: INC
14318: ST_TO_ADDR
14319: LD_INT 2
14321: PUSH
14322: FOR_DOWNTO
14323: IFFALSE 14407
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14325: LD_ADDR_VAR 0 6
14329: PUSH
14330: LD_VAR 0 7
14334: PUSH
14335: LD_VAR 0 5
14339: PUSH
14340: LD_INT 1
14342: MINUS
14343: ARRAY
14344: PPUSH
14345: LD_VAR 0 2
14349: PUSH
14350: LD_VAR 0 5
14354: PUSH
14355: LD_INT 1
14357: MINUS
14358: ARRAY
14359: PPUSH
14360: LD_VAR 0 7
14364: PUSH
14365: LD_VAR 0 5
14369: ARRAY
14370: PPUSH
14371: CALL_OW 1
14375: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14376: LD_ADDR_VAR 0 7
14380: PUSH
14381: LD_VAR 0 7
14385: PPUSH
14386: LD_VAR 0 5
14390: PUSH
14391: LD_INT 1
14393: MINUS
14394: PPUSH
14395: LD_VAR 0 6
14399: PPUSH
14400: CALL_OW 1
14404: ST_TO_ADDR
// end ;
14405: GO 14322
14407: POP
14408: POP
// result := s_arr [ 1 ] ;
14409: LD_ADDR_VAR 0 4
14413: PUSH
14414: LD_VAR 0 7
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: ST_TO_ADDR
// end ; end ;
14423: LD_VAR 0 4
14427: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14428: LD_INT 0
14430: PPUSH
14431: PPUSH
// if not list then
14432: LD_VAR 0 1
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14532
// i := list [ pos1 ] ;
14441: LD_ADDR_VAR 0 5
14445: PUSH
14446: LD_VAR 0 1
14450: PUSH
14451: LD_VAR 0 2
14455: ARRAY
14456: ST_TO_ADDR
// if not i then
14457: LD_VAR 0 5
14461: NOT
14462: IFFALSE 14466
// exit ;
14464: GO 14532
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14466: LD_ADDR_VAR 0 1
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_VAR 0 2
14480: PPUSH
14481: LD_VAR 0 1
14485: PUSH
14486: LD_VAR 0 3
14490: ARRAY
14491: PPUSH
14492: CALL_OW 1
14496: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14497: LD_ADDR_VAR 0 1
14501: PUSH
14502: LD_VAR 0 1
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: LD_VAR 0 5
14516: PPUSH
14517: CALL_OW 1
14521: ST_TO_ADDR
// result := list ;
14522: LD_ADDR_VAR 0 4
14526: PUSH
14527: LD_VAR 0 1
14531: ST_TO_ADDR
// end ;
14532: LD_VAR 0 4
14536: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14537: LD_INT 0
14539: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14540: LD_ADDR_VAR 0 5
14544: PUSH
14545: LD_VAR 0 1
14549: PPUSH
14550: CALL_OW 250
14554: PPUSH
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 251
14564: PPUSH
14565: LD_VAR 0 2
14569: PPUSH
14570: LD_VAR 0 3
14574: PPUSH
14575: LD_VAR 0 4
14579: PPUSH
14580: CALL 14958 0 5
14584: ST_TO_ADDR
// end ;
14585: LD_VAR 0 5
14589: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14590: LD_INT 0
14592: PPUSH
14593: PPUSH
14594: PPUSH
14595: PPUSH
// if not list or not unit then
14596: LD_VAR 0 2
14600: NOT
14601: PUSH
14602: LD_VAR 0 1
14606: NOT
14607: OR
14608: IFFALSE 14612
// exit ;
14610: GO 14953
// result := [ ] ;
14612: LD_ADDR_VAR 0 5
14616: PUSH
14617: EMPTY
14618: ST_TO_ADDR
// for i in list do
14619: LD_ADDR_VAR 0 6
14623: PUSH
14624: LD_VAR 0 2
14628: PUSH
14629: FOR_IN
14630: IFFALSE 14848
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14632: LD_ADDR_VAR 0 8
14636: PUSH
14637: LD_VAR 0 1
14641: PPUSH
14642: LD_VAR 0 6
14646: PUSH
14647: LD_INT 1
14649: ARRAY
14650: PPUSH
14651: LD_VAR 0 6
14655: PUSH
14656: LD_INT 2
14658: ARRAY
14659: PPUSH
14660: CALL_OW 297
14664: ST_TO_ADDR
// if not Count ( result ) then
14665: LD_VAR 0 5
14669: PPUSH
14670: CALL 11242 0 1
14674: NOT
14675: IFFALSE 14708
// begin result := Join ( result , [ i , tmp ] ) ;
14677: LD_ADDR_VAR 0 5
14681: PUSH
14682: LD_VAR 0 5
14686: PPUSH
14687: LD_VAR 0 6
14691: PUSH
14692: LD_VAR 0 8
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PPUSH
14701: CALL 46851 0 2
14705: ST_TO_ADDR
// continue ;
14706: GO 14629
// end ; if result [ result ] [ 2 ] <= tmp then
14708: LD_VAR 0 5
14712: PUSH
14713: LD_VAR 0 5
14717: ARRAY
14718: PUSH
14719: LD_INT 2
14721: ARRAY
14722: PUSH
14723: LD_VAR 0 8
14727: LESSEQUAL
14728: IFFALSE 14761
// result := Join ( result , [ i , tmp ] ) else
14730: LD_ADDR_VAR 0 5
14734: PUSH
14735: LD_VAR 0 5
14739: PPUSH
14740: LD_VAR 0 6
14744: PUSH
14745: LD_VAR 0 8
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL 46851 0 2
14758: ST_TO_ADDR
14759: GO 14846
// begin for j := 1 to Count ( result ) do
14761: LD_ADDR_VAR 0 7
14765: PUSH
14766: DOUBLE
14767: LD_INT 1
14769: DEC
14770: ST_TO_ADDR
14771: LD_VAR 0 5
14775: PPUSH
14776: CALL 11242 0 1
14780: PUSH
14781: FOR_TO
14782: IFFALSE 14844
// begin if tmp < result [ j ] [ 2 ] then
14784: LD_VAR 0 8
14788: PUSH
14789: LD_VAR 0 5
14793: PUSH
14794: LD_VAR 0 7
14798: ARRAY
14799: PUSH
14800: LD_INT 2
14802: ARRAY
14803: LESS
14804: IFFALSE 14842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14806: LD_ADDR_VAR 0 5
14810: PUSH
14811: LD_VAR 0 5
14815: PPUSH
14816: LD_VAR 0 7
14820: PPUSH
14821: LD_VAR 0 6
14825: PUSH
14826: LD_VAR 0 8
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 2
14839: ST_TO_ADDR
// break ;
14840: GO 14844
// end ; end ;
14842: GO 14781
14844: POP
14845: POP
// end ; end ;
14846: GO 14629
14848: POP
14849: POP
// if result and not asc then
14850: LD_VAR 0 5
14854: PUSH
14855: LD_VAR 0 3
14859: NOT
14860: AND
14861: IFFALSE 14878
// result := ReverseArray ( result ) ;
14863: LD_ADDR_VAR 0 5
14867: PUSH
14868: LD_VAR 0 5
14872: PPUSH
14873: CALL 42118 0 1
14877: ST_TO_ADDR
// tmp := [ ] ;
14878: LD_ADDR_VAR 0 8
14882: PUSH
14883: EMPTY
14884: ST_TO_ADDR
// if mode then
14885: LD_VAR 0 4
14889: IFFALSE 14953
// begin for i := 1 to result do
14891: LD_ADDR_VAR 0 6
14895: PUSH
14896: DOUBLE
14897: LD_INT 1
14899: DEC
14900: ST_TO_ADDR
14901: LD_VAR 0 5
14905: PUSH
14906: FOR_TO
14907: IFFALSE 14941
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14909: LD_ADDR_VAR 0 8
14913: PUSH
14914: LD_VAR 0 8
14918: PPUSH
14919: LD_VAR 0 5
14923: PUSH
14924: LD_VAR 0 6
14928: ARRAY
14929: PUSH
14930: LD_INT 1
14932: ARRAY
14933: PPUSH
14934: CALL 46851 0 2
14938: ST_TO_ADDR
14939: GO 14906
14941: POP
14942: POP
// result := tmp ;
14943: LD_ADDR_VAR 0 5
14947: PUSH
14948: LD_VAR 0 8
14952: ST_TO_ADDR
// end ; end ;
14953: LD_VAR 0 5
14957: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14958: LD_INT 0
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
// if not list then
14964: LD_VAR 0 3
14968: NOT
14969: IFFALSE 14973
// exit ;
14971: GO 15361
// result := [ ] ;
14973: LD_ADDR_VAR 0 6
14977: PUSH
14978: EMPTY
14979: ST_TO_ADDR
// for i in list do
14980: LD_ADDR_VAR 0 7
14984: PUSH
14985: LD_VAR 0 3
14989: PUSH
14990: FOR_IN
14991: IFFALSE 15193
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14993: LD_ADDR_VAR 0 9
14997: PUSH
14998: LD_VAR 0 7
15002: PPUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: LD_VAR 0 2
15012: PPUSH
15013: CALL_OW 297
15017: ST_TO_ADDR
// if not result then
15018: LD_VAR 0 6
15022: NOT
15023: IFFALSE 15049
// result := [ [ i , tmp ] ] else
15025: LD_ADDR_VAR 0 6
15029: PUSH
15030: LD_VAR 0 7
15034: PUSH
15035: LD_VAR 0 9
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: ST_TO_ADDR
15047: GO 15191
// begin if result [ result ] [ 2 ] <= tmp then
15049: LD_VAR 0 6
15053: PUSH
15054: LD_VAR 0 6
15058: ARRAY
15059: PUSH
15060: LD_INT 2
15062: ARRAY
15063: PUSH
15064: LD_VAR 0 9
15068: LESSEQUAL
15069: IFFALSE 15111
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15071: LD_ADDR_VAR 0 6
15075: PUSH
15076: LD_VAR 0 6
15080: PPUSH
15081: LD_VAR 0 6
15085: PUSH
15086: LD_INT 1
15088: PLUS
15089: PPUSH
15090: LD_VAR 0 7
15094: PUSH
15095: LD_VAR 0 9
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 2
15108: ST_TO_ADDR
15109: GO 15191
// for j := 1 to result do
15111: LD_ADDR_VAR 0 8
15115: PUSH
15116: DOUBLE
15117: LD_INT 1
15119: DEC
15120: ST_TO_ADDR
15121: LD_VAR 0 6
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15189
// begin if tmp < result [ j ] [ 2 ] then
15129: LD_VAR 0 9
15133: PUSH
15134: LD_VAR 0 6
15138: PUSH
15139: LD_VAR 0 8
15143: ARRAY
15144: PUSH
15145: LD_INT 2
15147: ARRAY
15148: LESS
15149: IFFALSE 15187
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15151: LD_ADDR_VAR 0 6
15155: PUSH
15156: LD_VAR 0 6
15160: PPUSH
15161: LD_VAR 0 8
15165: PPUSH
15166: LD_VAR 0 7
15170: PUSH
15171: LD_VAR 0 9
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PPUSH
15180: CALL_OW 2
15184: ST_TO_ADDR
// break ;
15185: GO 15189
// end ; end ;
15187: GO 15126
15189: POP
15190: POP
// end ; end ;
15191: GO 14990
15193: POP
15194: POP
// if result and not asc then
15195: LD_VAR 0 6
15199: PUSH
15200: LD_VAR 0 4
15204: NOT
15205: AND
15206: IFFALSE 15281
// begin tmp := result ;
15208: LD_ADDR_VAR 0 9
15212: PUSH
15213: LD_VAR 0 6
15217: ST_TO_ADDR
// for i = tmp downto 1 do
15218: LD_ADDR_VAR 0 7
15222: PUSH
15223: DOUBLE
15224: LD_VAR 0 9
15228: INC
15229: ST_TO_ADDR
15230: LD_INT 1
15232: PUSH
15233: FOR_DOWNTO
15234: IFFALSE 15279
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15236: LD_ADDR_VAR 0 6
15240: PUSH
15241: LD_VAR 0 6
15245: PPUSH
15246: LD_VAR 0 9
15250: PUSH
15251: LD_VAR 0 7
15255: MINUS
15256: PUSH
15257: LD_INT 1
15259: PLUS
15260: PPUSH
15261: LD_VAR 0 9
15265: PUSH
15266: LD_VAR 0 7
15270: ARRAY
15271: PPUSH
15272: CALL_OW 1
15276: ST_TO_ADDR
15277: GO 15233
15279: POP
15280: POP
// end ; tmp := [ ] ;
15281: LD_ADDR_VAR 0 9
15285: PUSH
15286: EMPTY
15287: ST_TO_ADDR
// if mode then
15288: LD_VAR 0 5
15292: IFFALSE 15361
// begin for i = 1 to result do
15294: LD_ADDR_VAR 0 7
15298: PUSH
15299: DOUBLE
15300: LD_INT 1
15302: DEC
15303: ST_TO_ADDR
15304: LD_VAR 0 6
15308: PUSH
15309: FOR_TO
15310: IFFALSE 15349
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15312: LD_ADDR_VAR 0 9
15316: PUSH
15317: LD_VAR 0 9
15321: PPUSH
15322: LD_VAR 0 7
15326: PPUSH
15327: LD_VAR 0 6
15331: PUSH
15332: LD_VAR 0 7
15336: ARRAY
15337: PUSH
15338: LD_INT 1
15340: ARRAY
15341: PPUSH
15342: CALL_OW 1
15346: ST_TO_ADDR
15347: GO 15309
15349: POP
15350: POP
// result := tmp ;
15351: LD_ADDR_VAR 0 6
15355: PUSH
15356: LD_VAR 0 9
15360: ST_TO_ADDR
// end ; end ;
15361: LD_VAR 0 6
15365: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15366: LD_INT 0
15368: PPUSH
15369: PPUSH
15370: PPUSH
15371: PPUSH
15372: PPUSH
15373: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15374: LD_ADDR_VAR 0 5
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: LD_INT 0
15384: PUSH
15385: LD_INT 0
15387: PUSH
15388: EMPTY
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: ST_TO_ADDR
// if not x or not y then
15396: LD_VAR 0 2
15400: NOT
15401: PUSH
15402: LD_VAR 0 3
15406: NOT
15407: OR
15408: IFFALSE 15412
// exit ;
15410: GO 17062
// if not range then
15412: LD_VAR 0 4
15416: NOT
15417: IFFALSE 15427
// range := 10 ;
15419: LD_ADDR_VAR 0 4
15423: PUSH
15424: LD_INT 10
15426: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15427: LD_ADDR_VAR 0 8
15431: PUSH
15432: LD_INT 81
15434: PUSH
15435: LD_VAR 0 1
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 92
15446: PUSH
15447: LD_VAR 0 2
15451: PUSH
15452: LD_VAR 0 3
15456: PUSH
15457: LD_VAR 0 4
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 3
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: PPUSH
15490: CALL_OW 69
15494: ST_TO_ADDR
// if not tmp then
15495: LD_VAR 0 8
15499: NOT
15500: IFFALSE 15504
// exit ;
15502: GO 17062
// for i in tmp do
15504: LD_ADDR_VAR 0 6
15508: PUSH
15509: LD_VAR 0 8
15513: PUSH
15514: FOR_IN
15515: IFFALSE 17037
// begin points := [ 0 , 0 , 0 ] ;
15517: LD_ADDR_VAR 0 9
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: LD_INT 0
15527: PUSH
15528: LD_INT 0
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: ST_TO_ADDR
// bpoints := 1 ;
15536: LD_ADDR_VAR 0 10
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15544: LD_VAR 0 6
15548: PPUSH
15549: CALL_OW 247
15553: PUSH
15554: LD_INT 1
15556: DOUBLE
15557: EQUAL
15558: IFTRUE 15562
15560: GO 16140
15562: POP
// begin if GetClass ( i ) = 1 then
15563: LD_VAR 0 6
15567: PPUSH
15568: CALL_OW 257
15572: PUSH
15573: LD_INT 1
15575: EQUAL
15576: IFFALSE 15597
// points := [ 10 , 5 , 3 ] ;
15578: LD_ADDR_VAR 0 9
15582: PUSH
15583: LD_INT 10
15585: PUSH
15586: LD_INT 5
15588: PUSH
15589: LD_INT 3
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15597: LD_VAR 0 6
15601: PPUSH
15602: CALL_OW 257
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: LD_INT 4
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: IN
15621: IFFALSE 15642
// points := [ 3 , 2 , 1 ] ;
15623: LD_ADDR_VAR 0 9
15627: PUSH
15628: LD_INT 3
15630: PUSH
15631: LD_INT 2
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: LIST
15641: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15642: LD_VAR 0 6
15646: PPUSH
15647: CALL_OW 257
15651: PUSH
15652: LD_INT 5
15654: EQUAL
15655: IFFALSE 15676
// points := [ 130 , 5 , 2 ] ;
15657: LD_ADDR_VAR 0 9
15661: PUSH
15662: LD_INT 130
15664: PUSH
15665: LD_INT 5
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15676: LD_VAR 0 6
15680: PPUSH
15681: CALL_OW 257
15685: PUSH
15686: LD_INT 8
15688: EQUAL
15689: IFFALSE 15710
// points := [ 35 , 35 , 30 ] ;
15691: LD_ADDR_VAR 0 9
15695: PUSH
15696: LD_INT 35
15698: PUSH
15699: LD_INT 35
15701: PUSH
15702: LD_INT 30
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15710: LD_VAR 0 6
15714: PPUSH
15715: CALL_OW 257
15719: PUSH
15720: LD_INT 9
15722: EQUAL
15723: IFFALSE 15744
// points := [ 20 , 55 , 40 ] ;
15725: LD_ADDR_VAR 0 9
15729: PUSH
15730: LD_INT 20
15732: PUSH
15733: LD_INT 55
15735: PUSH
15736: LD_INT 40
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15744: LD_VAR 0 6
15748: PPUSH
15749: CALL_OW 257
15753: PUSH
15754: LD_INT 12
15756: PUSH
15757: LD_INT 16
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: IN
15764: IFFALSE 15785
// points := [ 5 , 3 , 2 ] ;
15766: LD_ADDR_VAR 0 9
15770: PUSH
15771: LD_INT 5
15773: PUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 2
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: LIST
15784: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15785: LD_VAR 0 6
15789: PPUSH
15790: CALL_OW 257
15794: PUSH
15795: LD_INT 17
15797: EQUAL
15798: IFFALSE 15819
// points := [ 100 , 50 , 75 ] ;
15800: LD_ADDR_VAR 0 9
15804: PUSH
15805: LD_INT 100
15807: PUSH
15808: LD_INT 50
15810: PUSH
15811: LD_INT 75
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15819: LD_VAR 0 6
15823: PPUSH
15824: CALL_OW 257
15828: PUSH
15829: LD_INT 15
15831: EQUAL
15832: IFFALSE 15853
// points := [ 10 , 5 , 3 ] ;
15834: LD_ADDR_VAR 0 9
15838: PUSH
15839: LD_INT 10
15841: PUSH
15842: LD_INT 5
15844: PUSH
15845: LD_INT 3
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15853: LD_VAR 0 6
15857: PPUSH
15858: CALL_OW 257
15862: PUSH
15863: LD_INT 14
15865: EQUAL
15866: IFFALSE 15887
// points := [ 10 , 0 , 0 ] ;
15868: LD_ADDR_VAR 0 9
15872: PUSH
15873: LD_INT 10
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15887: LD_VAR 0 6
15891: PPUSH
15892: CALL_OW 257
15896: PUSH
15897: LD_INT 11
15899: EQUAL
15900: IFFALSE 15921
// points := [ 30 , 10 , 5 ] ;
15902: LD_ADDR_VAR 0 9
15906: PUSH
15907: LD_INT 30
15909: PUSH
15910: LD_INT 10
15912: PUSH
15913: LD_INT 5
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: LIST
15920: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15921: LD_VAR 0 1
15925: PPUSH
15926: LD_INT 5
15928: PPUSH
15929: CALL_OW 321
15933: PUSH
15934: LD_INT 2
15936: EQUAL
15937: IFFALSE 15954
// bpoints := bpoints * 1.8 ;
15939: LD_ADDR_VAR 0 10
15943: PUSH
15944: LD_VAR 0 10
15948: PUSH
15949: LD_REAL  1.80000000000000E+0000
15952: MUL
15953: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15954: LD_VAR 0 6
15958: PPUSH
15959: CALL_OW 257
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: LD_INT 2
15969: PUSH
15970: LD_INT 3
15972: PUSH
15973: LD_INT 4
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: IN
15982: PUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: LD_INT 51
15990: PPUSH
15991: CALL_OW 321
15995: PUSH
15996: LD_INT 2
15998: EQUAL
15999: AND
16000: IFFALSE 16017
// bpoints := bpoints * 1.2 ;
16002: LD_ADDR_VAR 0 10
16006: PUSH
16007: LD_VAR 0 10
16011: PUSH
16012: LD_REAL  1.20000000000000E+0000
16015: MUL
16016: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16017: LD_VAR 0 6
16021: PPUSH
16022: CALL_OW 257
16026: PUSH
16027: LD_INT 5
16029: PUSH
16030: LD_INT 7
16032: PUSH
16033: LD_INT 9
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: IN
16041: PUSH
16042: LD_VAR 0 1
16046: PPUSH
16047: LD_INT 52
16049: PPUSH
16050: CALL_OW 321
16054: PUSH
16055: LD_INT 2
16057: EQUAL
16058: AND
16059: IFFALSE 16076
// bpoints := bpoints * 1.5 ;
16061: LD_ADDR_VAR 0 10
16065: PUSH
16066: LD_VAR 0 10
16070: PUSH
16071: LD_REAL  1.50000000000000E+0000
16074: MUL
16075: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16076: LD_VAR 0 1
16080: PPUSH
16081: LD_INT 66
16083: PPUSH
16084: CALL_OW 321
16088: PUSH
16089: LD_INT 2
16091: EQUAL
16092: IFFALSE 16109
// bpoints := bpoints * 1.1 ;
16094: LD_ADDR_VAR 0 10
16098: PUSH
16099: LD_VAR 0 10
16103: PUSH
16104: LD_REAL  1.10000000000000E+0000
16107: MUL
16108: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16109: LD_ADDR_VAR 0 10
16113: PUSH
16114: LD_VAR 0 10
16118: PUSH
16119: LD_VAR 0 6
16123: PPUSH
16124: LD_INT 1
16126: PPUSH
16127: CALL_OW 259
16131: PUSH
16132: LD_REAL  1.15000000000000E+0000
16135: MUL
16136: MUL
16137: ST_TO_ADDR
// end ; unit_vehicle :
16138: GO 16966
16140: LD_INT 2
16142: DOUBLE
16143: EQUAL
16144: IFTRUE 16148
16146: GO 16954
16148: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16149: LD_VAR 0 6
16153: PPUSH
16154: CALL_OW 264
16158: PUSH
16159: LD_INT 2
16161: PUSH
16162: LD_INT 42
16164: PUSH
16165: LD_INT 24
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: IN
16173: IFFALSE 16194
// points := [ 25 , 5 , 3 ] ;
16175: LD_ADDR_VAR 0 9
16179: PUSH
16180: LD_INT 25
16182: PUSH
16183: LD_INT 5
16185: PUSH
16186: LD_INT 3
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16194: LD_VAR 0 6
16198: PPUSH
16199: CALL_OW 264
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: LD_INT 43
16209: PUSH
16210: LD_INT 25
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: LIST
16217: IN
16218: IFFALSE 16239
// points := [ 40 , 15 , 5 ] ;
16220: LD_ADDR_VAR 0 9
16224: PUSH
16225: LD_INT 40
16227: PUSH
16228: LD_INT 15
16230: PUSH
16231: LD_INT 5
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16239: LD_VAR 0 6
16243: PPUSH
16244: CALL_OW 264
16248: PUSH
16249: LD_INT 3
16251: PUSH
16252: LD_INT 23
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: IN
16259: IFFALSE 16280
// points := [ 7 , 25 , 8 ] ;
16261: LD_ADDR_VAR 0 9
16265: PUSH
16266: LD_INT 7
16268: PUSH
16269: LD_INT 25
16271: PUSH
16272: LD_INT 8
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16280: LD_VAR 0 6
16284: PPUSH
16285: CALL_OW 264
16289: PUSH
16290: LD_INT 5
16292: PUSH
16293: LD_INT 27
16295: PUSH
16296: LD_INT 44
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: IN
16304: IFFALSE 16325
// points := [ 14 , 50 , 16 ] ;
16306: LD_ADDR_VAR 0 9
16310: PUSH
16311: LD_INT 14
16313: PUSH
16314: LD_INT 50
16316: PUSH
16317: LD_INT 16
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16325: LD_VAR 0 6
16329: PPUSH
16330: CALL_OW 264
16334: PUSH
16335: LD_INT 6
16337: PUSH
16338: LD_INT 46
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: IN
16345: IFFALSE 16366
// points := [ 32 , 120 , 70 ] ;
16347: LD_ADDR_VAR 0 9
16351: PUSH
16352: LD_INT 32
16354: PUSH
16355: LD_INT 120
16357: PUSH
16358: LD_INT 70
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16366: LD_VAR 0 6
16370: PPUSH
16371: CALL_OW 264
16375: PUSH
16376: LD_INT 7
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: LD_INT 45
16384: PUSH
16385: LD_INT 92
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: IN
16394: IFFALSE 16415
// points := [ 35 , 20 , 45 ] ;
16396: LD_ADDR_VAR 0 9
16400: PUSH
16401: LD_INT 35
16403: PUSH
16404: LD_INT 20
16406: PUSH
16407: LD_INT 45
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: LIST
16414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16415: LD_VAR 0 6
16419: PPUSH
16420: CALL_OW 264
16424: PUSH
16425: LD_INT 47
16427: PUSH
16428: EMPTY
16429: LIST
16430: IN
16431: IFFALSE 16452
// points := [ 67 , 45 , 75 ] ;
16433: LD_ADDR_VAR 0 9
16437: PUSH
16438: LD_INT 67
16440: PUSH
16441: LD_INT 45
16443: PUSH
16444: LD_INT 75
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16452: LD_VAR 0 6
16456: PPUSH
16457: CALL_OW 264
16461: PUSH
16462: LD_INT 26
16464: PUSH
16465: EMPTY
16466: LIST
16467: IN
16468: IFFALSE 16489
// points := [ 120 , 30 , 80 ] ;
16470: LD_ADDR_VAR 0 9
16474: PUSH
16475: LD_INT 120
16477: PUSH
16478: LD_INT 30
16480: PUSH
16481: LD_INT 80
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16489: LD_VAR 0 6
16493: PPUSH
16494: CALL_OW 264
16498: PUSH
16499: LD_INT 22
16501: PUSH
16502: EMPTY
16503: LIST
16504: IN
16505: IFFALSE 16526
// points := [ 40 , 1 , 1 ] ;
16507: LD_ADDR_VAR 0 9
16511: PUSH
16512: LD_INT 40
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: LD_INT 1
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16526: LD_VAR 0 6
16530: PPUSH
16531: CALL_OW 264
16535: PUSH
16536: LD_INT 29
16538: PUSH
16539: EMPTY
16540: LIST
16541: IN
16542: IFFALSE 16563
// points := [ 70 , 200 , 400 ] ;
16544: LD_ADDR_VAR 0 9
16548: PUSH
16549: LD_INT 70
16551: PUSH
16552: LD_INT 200
16554: PUSH
16555: LD_INT 400
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16563: LD_VAR 0 6
16567: PPUSH
16568: CALL_OW 264
16572: PUSH
16573: LD_INT 14
16575: PUSH
16576: LD_INT 53
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: IN
16583: IFFALSE 16604
// points := [ 40 , 10 , 20 ] ;
16585: LD_ADDR_VAR 0 9
16589: PUSH
16590: LD_INT 40
16592: PUSH
16593: LD_INT 10
16595: PUSH
16596: LD_INT 20
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: LIST
16603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16604: LD_VAR 0 6
16608: PPUSH
16609: CALL_OW 264
16613: PUSH
16614: LD_INT 9
16616: PUSH
16617: EMPTY
16618: LIST
16619: IN
16620: IFFALSE 16641
// points := [ 5 , 70 , 20 ] ;
16622: LD_ADDR_VAR 0 9
16626: PUSH
16627: LD_INT 5
16629: PUSH
16630: LD_INT 70
16632: PUSH
16633: LD_INT 20
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16641: LD_VAR 0 6
16645: PPUSH
16646: CALL_OW 264
16650: PUSH
16651: LD_INT 10
16653: PUSH
16654: EMPTY
16655: LIST
16656: IN
16657: IFFALSE 16678
// points := [ 35 , 110 , 70 ] ;
16659: LD_ADDR_VAR 0 9
16663: PUSH
16664: LD_INT 35
16666: PUSH
16667: LD_INT 110
16669: PUSH
16670: LD_INT 70
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16678: LD_VAR 0 6
16682: PPUSH
16683: CALL_OW 265
16687: PUSH
16688: LD_INT 25
16690: EQUAL
16691: IFFALSE 16712
// points := [ 80 , 65 , 100 ] ;
16693: LD_ADDR_VAR 0 9
16697: PUSH
16698: LD_INT 80
16700: PUSH
16701: LD_INT 65
16703: PUSH
16704: LD_INT 100
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: LIST
16711: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16712: LD_VAR 0 6
16716: PPUSH
16717: CALL_OW 263
16721: PUSH
16722: LD_INT 1
16724: EQUAL
16725: IFFALSE 16760
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16727: LD_ADDR_VAR 0 10
16731: PUSH
16732: LD_VAR 0 10
16736: PUSH
16737: LD_VAR 0 6
16741: PPUSH
16742: CALL_OW 311
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: CALL_OW 259
16754: PUSH
16755: LD_INT 4
16757: MUL
16758: MUL
16759: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16760: LD_VAR 0 6
16764: PPUSH
16765: CALL_OW 263
16769: PUSH
16770: LD_INT 2
16772: EQUAL
16773: IFFALSE 16824
// begin j := IsControledBy ( i ) ;
16775: LD_ADDR_VAR 0 7
16779: PUSH
16780: LD_VAR 0 6
16784: PPUSH
16785: CALL_OW 312
16789: ST_TO_ADDR
// if j then
16790: LD_VAR 0 7
16794: IFFALSE 16824
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16796: LD_ADDR_VAR 0 10
16800: PUSH
16801: LD_VAR 0 10
16805: PUSH
16806: LD_VAR 0 7
16810: PPUSH
16811: LD_INT 3
16813: PPUSH
16814: CALL_OW 259
16818: PUSH
16819: LD_INT 3
16821: MUL
16822: MUL
16823: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16824: LD_VAR 0 6
16828: PPUSH
16829: CALL_OW 264
16833: PUSH
16834: LD_INT 5
16836: PUSH
16837: LD_INT 6
16839: PUSH
16840: LD_INT 46
16842: PUSH
16843: LD_INT 44
16845: PUSH
16846: LD_INT 47
16848: PUSH
16849: LD_INT 45
16851: PUSH
16852: LD_INT 28
16854: PUSH
16855: LD_INT 7
16857: PUSH
16858: LD_INT 27
16860: PUSH
16861: LD_INT 29
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: IN
16876: PUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: LD_INT 52
16884: PPUSH
16885: CALL_OW 321
16889: PUSH
16890: LD_INT 2
16892: EQUAL
16893: AND
16894: IFFALSE 16911
// bpoints := bpoints * 1.2 ;
16896: LD_ADDR_VAR 0 10
16900: PUSH
16901: LD_VAR 0 10
16905: PUSH
16906: LD_REAL  1.20000000000000E+0000
16909: MUL
16910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16911: LD_VAR 0 6
16915: PPUSH
16916: CALL_OW 264
16920: PUSH
16921: LD_INT 6
16923: PUSH
16924: LD_INT 46
16926: PUSH
16927: LD_INT 47
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: IN
16935: IFFALSE 16952
// bpoints := bpoints * 1.2 ;
16937: LD_ADDR_VAR 0 10
16941: PUSH
16942: LD_VAR 0 10
16946: PUSH
16947: LD_REAL  1.20000000000000E+0000
16950: MUL
16951: ST_TO_ADDR
// end ; unit_building :
16952: GO 16966
16954: LD_INT 3
16956: DOUBLE
16957: EQUAL
16958: IFTRUE 16962
16960: GO 16965
16962: POP
// ; end ;
16963: GO 16966
16965: POP
// for j = 1 to 3 do
16966: LD_ADDR_VAR 0 7
16970: PUSH
16971: DOUBLE
16972: LD_INT 1
16974: DEC
16975: ST_TO_ADDR
16976: LD_INT 3
16978: PUSH
16979: FOR_TO
16980: IFFALSE 17033
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16982: LD_ADDR_VAR 0 5
16986: PUSH
16987: LD_VAR 0 5
16991: PPUSH
16992: LD_VAR 0 7
16996: PPUSH
16997: LD_VAR 0 5
17001: PUSH
17002: LD_VAR 0 7
17006: ARRAY
17007: PUSH
17008: LD_VAR 0 9
17012: PUSH
17013: LD_VAR 0 7
17017: ARRAY
17018: PUSH
17019: LD_VAR 0 10
17023: MUL
17024: PLUS
17025: PPUSH
17026: CALL_OW 1
17030: ST_TO_ADDR
17031: GO 16979
17033: POP
17034: POP
// end ;
17035: GO 15514
17037: POP
17038: POP
// result := Replace ( result , 4 , tmp ) ;
17039: LD_ADDR_VAR 0 5
17043: PUSH
17044: LD_VAR 0 5
17048: PPUSH
17049: LD_INT 4
17051: PPUSH
17052: LD_VAR 0 8
17056: PPUSH
17057: CALL_OW 1
17061: ST_TO_ADDR
// end ;
17062: LD_VAR 0 5
17066: RET
// export function DangerAtRange ( unit , range ) ; begin
17067: LD_INT 0
17069: PPUSH
// if not unit then
17070: LD_VAR 0 1
17074: NOT
17075: IFFALSE 17079
// exit ;
17077: GO 17124
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17079: LD_ADDR_VAR 0 3
17083: PUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 255
17093: PPUSH
17094: LD_VAR 0 1
17098: PPUSH
17099: CALL_OW 250
17103: PPUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 251
17113: PPUSH
17114: LD_VAR 0 2
17118: PPUSH
17119: CALL 15366 0 4
17123: ST_TO_ADDR
// end ;
17124: LD_VAR 0 3
17128: RET
// export function DangerInArea ( side , area ) ; begin
17129: LD_INT 0
17131: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17132: LD_ADDR_VAR 0 3
17136: PUSH
17137: LD_VAR 0 2
17141: PPUSH
17142: LD_INT 81
17144: PUSH
17145: LD_VAR 0 1
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PPUSH
17154: CALL_OW 70
17158: ST_TO_ADDR
// end ;
17159: LD_VAR 0 3
17163: RET
// export function IsExtension ( b ) ; begin
17164: LD_INT 0
17166: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17167: LD_ADDR_VAR 0 2
17171: PUSH
17172: LD_VAR 0 1
17176: PUSH
17177: LD_INT 23
17179: PUSH
17180: LD_INT 20
17182: PUSH
17183: LD_INT 22
17185: PUSH
17186: LD_INT 17
17188: PUSH
17189: LD_INT 24
17191: PUSH
17192: LD_INT 21
17194: PUSH
17195: LD_INT 19
17197: PUSH
17198: LD_INT 16
17200: PUSH
17201: LD_INT 25
17203: PUSH
17204: LD_INT 18
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: IN
17219: ST_TO_ADDR
// end ;
17220: LD_VAR 0 2
17224: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17225: LD_INT 0
17227: PPUSH
17228: PPUSH
17229: PPUSH
// result := [ ] ;
17230: LD_ADDR_VAR 0 4
17234: PUSH
17235: EMPTY
17236: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17237: LD_ADDR_VAR 0 5
17241: PUSH
17242: LD_VAR 0 2
17246: PPUSH
17247: LD_INT 21
17249: PUSH
17250: LD_INT 3
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 70
17261: ST_TO_ADDR
// if not tmp then
17262: LD_VAR 0 5
17266: NOT
17267: IFFALSE 17271
// exit ;
17269: GO 17335
// if checkLink then
17271: LD_VAR 0 3
17275: IFFALSE 17325
// begin for i in tmp do
17277: LD_ADDR_VAR 0 6
17281: PUSH
17282: LD_VAR 0 5
17286: PUSH
17287: FOR_IN
17288: IFFALSE 17323
// if GetBase ( i ) <> base then
17290: LD_VAR 0 6
17294: PPUSH
17295: CALL_OW 274
17299: PUSH
17300: LD_VAR 0 1
17304: NONEQUAL
17305: IFFALSE 17321
// ComLinkToBase ( base , i ) ;
17307: LD_VAR 0 1
17311: PPUSH
17312: LD_VAR 0 6
17316: PPUSH
17317: CALL_OW 169
17321: GO 17287
17323: POP
17324: POP
// end ; result := tmp ;
17325: LD_ADDR_VAR 0 4
17329: PUSH
17330: LD_VAR 0 5
17334: ST_TO_ADDR
// end ;
17335: LD_VAR 0 4
17339: RET
// export function ComComplete ( units , b ) ; var i ; begin
17340: LD_INT 0
17342: PPUSH
17343: PPUSH
// if not units then
17344: LD_VAR 0 1
17348: NOT
17349: IFFALSE 17353
// exit ;
17351: GO 17443
// for i in units do
17353: LD_ADDR_VAR 0 4
17357: PUSH
17358: LD_VAR 0 1
17362: PUSH
17363: FOR_IN
17364: IFFALSE 17441
// if BuildingStatus ( b ) = bs_build then
17366: LD_VAR 0 2
17370: PPUSH
17371: CALL_OW 461
17375: PUSH
17376: LD_INT 1
17378: EQUAL
17379: IFFALSE 17439
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17381: LD_VAR 0 4
17385: PPUSH
17386: LD_STRING h
17388: PUSH
17389: LD_VAR 0 2
17393: PPUSH
17394: CALL_OW 250
17398: PUSH
17399: LD_VAR 0 2
17403: PPUSH
17404: CALL_OW 251
17408: PUSH
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: LD_INT 0
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: PPUSH
17435: CALL_OW 446
17439: GO 17363
17441: POP
17442: POP
// end ;
17443: LD_VAR 0 3
17447: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17448: LD_INT 0
17450: PPUSH
17451: PPUSH
17452: PPUSH
17453: PPUSH
17454: PPUSH
17455: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17456: LD_VAR 0 1
17460: NOT
17461: PUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 263
17471: PUSH
17472: LD_INT 2
17474: NONEQUAL
17475: OR
17476: IFFALSE 17480
// exit ;
17478: GO 17796
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17480: LD_ADDR_VAR 0 6
17484: PUSH
17485: LD_INT 22
17487: PUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 255
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 36
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 34
17517: PUSH
17518: LD_INT 31
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PPUSH
17534: CALL_OW 69
17538: ST_TO_ADDR
// if not tmp then
17539: LD_VAR 0 6
17543: NOT
17544: IFFALSE 17548
// exit ;
17546: GO 17796
// result := [ ] ;
17548: LD_ADDR_VAR 0 2
17552: PUSH
17553: EMPTY
17554: ST_TO_ADDR
// for i in tmp do
17555: LD_ADDR_VAR 0 3
17559: PUSH
17560: LD_VAR 0 6
17564: PUSH
17565: FOR_IN
17566: IFFALSE 17637
// begin t := UnitsInside ( i ) ;
17568: LD_ADDR_VAR 0 4
17572: PUSH
17573: LD_VAR 0 3
17577: PPUSH
17578: CALL_OW 313
17582: ST_TO_ADDR
// if t then
17583: LD_VAR 0 4
17587: IFFALSE 17635
// for j in t do
17589: LD_ADDR_VAR 0 7
17593: PUSH
17594: LD_VAR 0 4
17598: PUSH
17599: FOR_IN
17600: IFFALSE 17633
// result := Replace ( result , result + 1 , j ) ;
17602: LD_ADDR_VAR 0 2
17606: PUSH
17607: LD_VAR 0 2
17611: PPUSH
17612: LD_VAR 0 2
17616: PUSH
17617: LD_INT 1
17619: PLUS
17620: PPUSH
17621: LD_VAR 0 7
17625: PPUSH
17626: CALL_OW 1
17630: ST_TO_ADDR
17631: GO 17599
17633: POP
17634: POP
// end ;
17635: GO 17565
17637: POP
17638: POP
// if not result then
17639: LD_VAR 0 2
17643: NOT
17644: IFFALSE 17648
// exit ;
17646: GO 17796
// mech := result [ 1 ] ;
17648: LD_ADDR_VAR 0 5
17652: PUSH
17653: LD_VAR 0 2
17657: PUSH
17658: LD_INT 1
17660: ARRAY
17661: ST_TO_ADDR
// if result > 1 then
17662: LD_VAR 0 2
17666: PUSH
17667: LD_INT 1
17669: GREATER
17670: IFFALSE 17782
// begin for i = 2 to result do
17672: LD_ADDR_VAR 0 3
17676: PUSH
17677: DOUBLE
17678: LD_INT 2
17680: DEC
17681: ST_TO_ADDR
17682: LD_VAR 0 2
17686: PUSH
17687: FOR_TO
17688: IFFALSE 17780
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17690: LD_ADDR_VAR 0 4
17694: PUSH
17695: LD_VAR 0 2
17699: PUSH
17700: LD_VAR 0 3
17704: ARRAY
17705: PPUSH
17706: LD_INT 3
17708: PPUSH
17709: CALL_OW 259
17713: PUSH
17714: LD_VAR 0 2
17718: PUSH
17719: LD_VAR 0 3
17723: ARRAY
17724: PPUSH
17725: CALL_OW 432
17729: MINUS
17730: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17731: LD_VAR 0 4
17735: PUSH
17736: LD_VAR 0 5
17740: PPUSH
17741: LD_INT 3
17743: PPUSH
17744: CALL_OW 259
17748: PUSH
17749: LD_VAR 0 5
17753: PPUSH
17754: CALL_OW 432
17758: MINUS
17759: GREATEREQUAL
17760: IFFALSE 17778
// mech := result [ i ] ;
17762: LD_ADDR_VAR 0 5
17766: PUSH
17767: LD_VAR 0 2
17771: PUSH
17772: LD_VAR 0 3
17776: ARRAY
17777: ST_TO_ADDR
// end ;
17778: GO 17687
17780: POP
17781: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17782: LD_VAR 0 1
17786: PPUSH
17787: LD_VAR 0 5
17791: PPUSH
17792: CALL_OW 135
// end ;
17796: LD_VAR 0 2
17800: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17801: LD_INT 0
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
17815: PPUSH
// result := [ ] ;
17816: LD_ADDR_VAR 0 7
17820: PUSH
17821: EMPTY
17822: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 266
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: IN
17843: NOT
17844: IFFALSE 17848
// exit ;
17846: GO 19482
// if name then
17848: LD_VAR 0 3
17852: IFFALSE 17868
// SetBName ( base_dep , name ) ;
17854: LD_VAR 0 1
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: CALL_OW 500
// base := GetBase ( base_dep ) ;
17868: LD_ADDR_VAR 0 15
17872: PUSH
17873: LD_VAR 0 1
17877: PPUSH
17878: CALL_OW 274
17882: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17883: LD_ADDR_VAR 0 16
17887: PUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: CALL_OW 255
17897: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17898: LD_ADDR_VAR 0 17
17902: PUSH
17903: LD_VAR 0 1
17907: PPUSH
17908: CALL_OW 248
17912: ST_TO_ADDR
// if sources then
17913: LD_VAR 0 5
17917: IFFALSE 17964
// for i = 1 to 3 do
17919: LD_ADDR_VAR 0 8
17923: PUSH
17924: DOUBLE
17925: LD_INT 1
17927: DEC
17928: ST_TO_ADDR
17929: LD_INT 3
17931: PUSH
17932: FOR_TO
17933: IFFALSE 17962
// AddResourceType ( base , i , sources [ i ] ) ;
17935: LD_VAR 0 15
17939: PPUSH
17940: LD_VAR 0 8
17944: PPUSH
17945: LD_VAR 0 5
17949: PUSH
17950: LD_VAR 0 8
17954: ARRAY
17955: PPUSH
17956: CALL_OW 276
17960: GO 17932
17962: POP
17963: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17964: LD_ADDR_VAR 0 18
17968: PUSH
17969: LD_VAR 0 15
17973: PPUSH
17974: LD_VAR 0 2
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: CALL 17225 0 3
17986: ST_TO_ADDR
// InitHc ;
17987: CALL_OW 19
// InitUc ;
17991: CALL_OW 18
// uc_side := side ;
17995: LD_ADDR_OWVAR 20
17999: PUSH
18000: LD_VAR 0 16
18004: ST_TO_ADDR
// uc_nation := nation ;
18005: LD_ADDR_OWVAR 21
18009: PUSH
18010: LD_VAR 0 17
18014: ST_TO_ADDR
// if buildings then
18015: LD_VAR 0 18
18019: IFFALSE 19341
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18021: LD_ADDR_VAR 0 19
18025: PUSH
18026: LD_VAR 0 18
18030: PPUSH
18031: LD_INT 2
18033: PUSH
18034: LD_INT 30
18036: PUSH
18037: LD_INT 29
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 30
18046: PUSH
18047: LD_INT 30
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: PPUSH
18059: CALL_OW 72
18063: ST_TO_ADDR
// if tmp then
18064: LD_VAR 0 19
18068: IFFALSE 18116
// for i in tmp do
18070: LD_ADDR_VAR 0 8
18074: PUSH
18075: LD_VAR 0 19
18079: PUSH
18080: FOR_IN
18081: IFFALSE 18114
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18083: LD_VAR 0 8
18087: PPUSH
18088: CALL_OW 250
18092: PPUSH
18093: LD_VAR 0 8
18097: PPUSH
18098: CALL_OW 251
18102: PPUSH
18103: LD_VAR 0 16
18107: PPUSH
18108: CALL_OW 441
18112: GO 18080
18114: POP
18115: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18116: LD_VAR 0 18
18120: PPUSH
18121: LD_INT 2
18123: PUSH
18124: LD_INT 30
18126: PUSH
18127: LD_INT 32
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 30
18136: PUSH
18137: LD_INT 33
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 72
18153: IFFALSE 18241
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18155: LD_ADDR_VAR 0 8
18159: PUSH
18160: LD_VAR 0 18
18164: PPUSH
18165: LD_INT 2
18167: PUSH
18168: LD_INT 30
18170: PUSH
18171: LD_INT 32
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 30
18180: PUSH
18181: LD_INT 33
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: LIST
18192: PPUSH
18193: CALL_OW 72
18197: PUSH
18198: FOR_IN
18199: IFFALSE 18239
// begin if not GetBWeapon ( i ) then
18201: LD_VAR 0 8
18205: PPUSH
18206: CALL_OW 269
18210: NOT
18211: IFFALSE 18237
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18213: LD_VAR 0 8
18217: PPUSH
18218: LD_VAR 0 8
18222: PPUSH
18223: LD_VAR 0 2
18227: PPUSH
18228: CALL 19487 0 2
18232: PPUSH
18233: CALL_OW 431
// end ;
18237: GO 18198
18239: POP
18240: POP
// end ; for i = 1 to personel do
18241: LD_ADDR_VAR 0 8
18245: PUSH
18246: DOUBLE
18247: LD_INT 1
18249: DEC
18250: ST_TO_ADDR
18251: LD_VAR 0 6
18255: PUSH
18256: FOR_TO
18257: IFFALSE 19321
// begin if i > 4 then
18259: LD_VAR 0 8
18263: PUSH
18264: LD_INT 4
18266: GREATER
18267: IFFALSE 18271
// break ;
18269: GO 19321
// case i of 1 :
18271: LD_VAR 0 8
18275: PUSH
18276: LD_INT 1
18278: DOUBLE
18279: EQUAL
18280: IFTRUE 18284
18282: GO 18364
18284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18285: LD_ADDR_VAR 0 12
18289: PUSH
18290: LD_VAR 0 18
18294: PPUSH
18295: LD_INT 22
18297: PUSH
18298: LD_VAR 0 16
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 58
18309: PUSH
18310: EMPTY
18311: LIST
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: LD_INT 30
18318: PUSH
18319: LD_INT 32
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 30
18328: PUSH
18329: LD_INT 4
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 30
18338: PUSH
18339: LD_INT 5
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: PPUSH
18357: CALL_OW 72
18361: ST_TO_ADDR
18362: GO 18586
18364: LD_INT 2
18366: DOUBLE
18367: EQUAL
18368: IFTRUE 18372
18370: GO 18434
18372: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18373: LD_ADDR_VAR 0 12
18377: PUSH
18378: LD_VAR 0 18
18382: PPUSH
18383: LD_INT 22
18385: PUSH
18386: LD_VAR 0 16
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: LD_INT 30
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 30
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 72
18431: ST_TO_ADDR
18432: GO 18586
18434: LD_INT 3
18436: DOUBLE
18437: EQUAL
18438: IFTRUE 18442
18440: GO 18504
18442: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18443: LD_ADDR_VAR 0 12
18447: PUSH
18448: LD_VAR 0 18
18452: PPUSH
18453: LD_INT 22
18455: PUSH
18456: LD_VAR 0 16
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: PUSH
18468: LD_INT 30
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 30
18480: PUSH
18481: LD_INT 3
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 72
18501: ST_TO_ADDR
18502: GO 18586
18504: LD_INT 4
18506: DOUBLE
18507: EQUAL
18508: IFTRUE 18512
18510: GO 18585
18512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18513: LD_ADDR_VAR 0 12
18517: PUSH
18518: LD_VAR 0 18
18522: PPUSH
18523: LD_INT 22
18525: PUSH
18526: LD_VAR 0 16
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 30
18540: PUSH
18541: LD_INT 6
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 30
18550: PUSH
18551: LD_INT 7
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 30
18560: PUSH
18561: LD_INT 8
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PPUSH
18578: CALL_OW 72
18582: ST_TO_ADDR
18583: GO 18586
18585: POP
// if i = 1 then
18586: LD_VAR 0 8
18590: PUSH
18591: LD_INT 1
18593: EQUAL
18594: IFFALSE 18705
// begin tmp := [ ] ;
18596: LD_ADDR_VAR 0 19
18600: PUSH
18601: EMPTY
18602: ST_TO_ADDR
// for j in f do
18603: LD_ADDR_VAR 0 9
18607: PUSH
18608: LD_VAR 0 12
18612: PUSH
18613: FOR_IN
18614: IFFALSE 18687
// if GetBType ( j ) = b_bunker then
18616: LD_VAR 0 9
18620: PPUSH
18621: CALL_OW 266
18625: PUSH
18626: LD_INT 32
18628: EQUAL
18629: IFFALSE 18656
// tmp := Insert ( tmp , 1 , j ) else
18631: LD_ADDR_VAR 0 19
18635: PUSH
18636: LD_VAR 0 19
18640: PPUSH
18641: LD_INT 1
18643: PPUSH
18644: LD_VAR 0 9
18648: PPUSH
18649: CALL_OW 2
18653: ST_TO_ADDR
18654: GO 18685
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18656: LD_ADDR_VAR 0 19
18660: PUSH
18661: LD_VAR 0 19
18665: PPUSH
18666: LD_VAR 0 19
18670: PUSH
18671: LD_INT 1
18673: PLUS
18674: PPUSH
18675: LD_VAR 0 9
18679: PPUSH
18680: CALL_OW 2
18684: ST_TO_ADDR
18685: GO 18613
18687: POP
18688: POP
// if tmp then
18689: LD_VAR 0 19
18693: IFFALSE 18705
// f := tmp ;
18695: LD_ADDR_VAR 0 12
18699: PUSH
18700: LD_VAR 0 19
18704: ST_TO_ADDR
// end ; x := personel [ i ] ;
18705: LD_ADDR_VAR 0 13
18709: PUSH
18710: LD_VAR 0 6
18714: PUSH
18715: LD_VAR 0 8
18719: ARRAY
18720: ST_TO_ADDR
// if x = - 1 then
18721: LD_VAR 0 13
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: EQUAL
18730: IFFALSE 18939
// begin for j in f do
18732: LD_ADDR_VAR 0 9
18736: PUSH
18737: LD_VAR 0 12
18741: PUSH
18742: FOR_IN
18743: IFFALSE 18935
// repeat InitHc ;
18745: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18749: LD_VAR 0 9
18753: PPUSH
18754: CALL_OW 266
18758: PUSH
18759: LD_INT 5
18761: EQUAL
18762: IFFALSE 18832
// begin if UnitsInside ( j ) < 3 then
18764: LD_VAR 0 9
18768: PPUSH
18769: CALL_OW 313
18773: PUSH
18774: LD_INT 3
18776: LESS
18777: IFFALSE 18813
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18779: LD_INT 0
18781: PPUSH
18782: LD_INT 5
18784: PUSH
18785: LD_INT 8
18787: PUSH
18788: LD_INT 9
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: PUSH
18796: LD_VAR 0 17
18800: ARRAY
18801: PPUSH
18802: LD_VAR 0 4
18806: PPUSH
18807: CALL_OW 380
18811: GO 18830
// PrepareHuman ( false , i , skill ) ;
18813: LD_INT 0
18815: PPUSH
18816: LD_VAR 0 8
18820: PPUSH
18821: LD_VAR 0 4
18825: PPUSH
18826: CALL_OW 380
// end else
18830: GO 18849
// PrepareHuman ( false , i , skill ) ;
18832: LD_INT 0
18834: PPUSH
18835: LD_VAR 0 8
18839: PPUSH
18840: LD_VAR 0 4
18844: PPUSH
18845: CALL_OW 380
// un := CreateHuman ;
18849: LD_ADDR_VAR 0 14
18853: PUSH
18854: CALL_OW 44
18858: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18859: LD_ADDR_VAR 0 7
18863: PUSH
18864: LD_VAR 0 7
18868: PPUSH
18869: LD_INT 1
18871: PPUSH
18872: LD_VAR 0 14
18876: PPUSH
18877: CALL_OW 2
18881: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18882: LD_VAR 0 14
18886: PPUSH
18887: LD_VAR 0 9
18891: PPUSH
18892: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18896: LD_VAR 0 9
18900: PPUSH
18901: CALL_OW 313
18905: PUSH
18906: LD_INT 6
18908: EQUAL
18909: PUSH
18910: LD_VAR 0 9
18914: PPUSH
18915: CALL_OW 266
18919: PUSH
18920: LD_INT 32
18922: PUSH
18923: LD_INT 31
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: IN
18930: OR
18931: IFFALSE 18745
18933: GO 18742
18935: POP
18936: POP
// end else
18937: GO 19319
// for j = 1 to x do
18939: LD_ADDR_VAR 0 9
18943: PUSH
18944: DOUBLE
18945: LD_INT 1
18947: DEC
18948: ST_TO_ADDR
18949: LD_VAR 0 13
18953: PUSH
18954: FOR_TO
18955: IFFALSE 19317
// begin InitHc ;
18957: CALL_OW 19
// if not f then
18961: LD_VAR 0 12
18965: NOT
18966: IFFALSE 19055
// begin PrepareHuman ( false , i , skill ) ;
18968: LD_INT 0
18970: PPUSH
18971: LD_VAR 0 8
18975: PPUSH
18976: LD_VAR 0 4
18980: PPUSH
18981: CALL_OW 380
// un := CreateHuman ;
18985: LD_ADDR_VAR 0 14
18989: PUSH
18990: CALL_OW 44
18994: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18995: LD_ADDR_VAR 0 7
18999: PUSH
19000: LD_VAR 0 7
19004: PPUSH
19005: LD_INT 1
19007: PPUSH
19008: LD_VAR 0 14
19012: PPUSH
19013: CALL_OW 2
19017: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19018: LD_VAR 0 14
19022: PPUSH
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 250
19032: PPUSH
19033: LD_VAR 0 1
19037: PPUSH
19038: CALL_OW 251
19042: PPUSH
19043: LD_INT 10
19045: PPUSH
19046: LD_INT 0
19048: PPUSH
19049: CALL_OW 50
// continue ;
19053: GO 18954
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19055: LD_VAR 0 12
19059: PUSH
19060: LD_INT 1
19062: ARRAY
19063: PPUSH
19064: CALL_OW 313
19068: PUSH
19069: LD_VAR 0 12
19073: PUSH
19074: LD_INT 1
19076: ARRAY
19077: PPUSH
19078: CALL_OW 266
19082: PUSH
19083: LD_INT 32
19085: PUSH
19086: LD_INT 31
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: IN
19093: AND
19094: PUSH
19095: LD_VAR 0 12
19099: PUSH
19100: LD_INT 1
19102: ARRAY
19103: PPUSH
19104: CALL_OW 313
19108: PUSH
19109: LD_INT 6
19111: EQUAL
19112: OR
19113: IFFALSE 19133
// f := Delete ( f , 1 ) ;
19115: LD_ADDR_VAR 0 12
19119: PUSH
19120: LD_VAR 0 12
19124: PPUSH
19125: LD_INT 1
19127: PPUSH
19128: CALL_OW 3
19132: ST_TO_ADDR
// if not f then
19133: LD_VAR 0 12
19137: NOT
19138: IFFALSE 19156
// begin x := x + 2 ;
19140: LD_ADDR_VAR 0 13
19144: PUSH
19145: LD_VAR 0 13
19149: PUSH
19150: LD_INT 2
19152: PLUS
19153: ST_TO_ADDR
// continue ;
19154: GO 18954
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19156: LD_VAR 0 12
19160: PUSH
19161: LD_INT 1
19163: ARRAY
19164: PPUSH
19165: CALL_OW 266
19169: PUSH
19170: LD_INT 5
19172: EQUAL
19173: IFFALSE 19247
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19175: LD_VAR 0 12
19179: PUSH
19180: LD_INT 1
19182: ARRAY
19183: PPUSH
19184: CALL_OW 313
19188: PUSH
19189: LD_INT 3
19191: LESS
19192: IFFALSE 19228
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19194: LD_INT 0
19196: PPUSH
19197: LD_INT 5
19199: PUSH
19200: LD_INT 8
19202: PUSH
19203: LD_INT 9
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: LIST
19210: PUSH
19211: LD_VAR 0 17
19215: ARRAY
19216: PPUSH
19217: LD_VAR 0 4
19221: PPUSH
19222: CALL_OW 380
19226: GO 19245
// PrepareHuman ( false , i , skill ) ;
19228: LD_INT 0
19230: PPUSH
19231: LD_VAR 0 8
19235: PPUSH
19236: LD_VAR 0 4
19240: PPUSH
19241: CALL_OW 380
// end else
19245: GO 19264
// PrepareHuman ( false , i , skill ) ;
19247: LD_INT 0
19249: PPUSH
19250: LD_VAR 0 8
19254: PPUSH
19255: LD_VAR 0 4
19259: PPUSH
19260: CALL_OW 380
// un := CreateHuman ;
19264: LD_ADDR_VAR 0 14
19268: PUSH
19269: CALL_OW 44
19273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19274: LD_ADDR_VAR 0 7
19278: PUSH
19279: LD_VAR 0 7
19283: PPUSH
19284: LD_INT 1
19286: PPUSH
19287: LD_VAR 0 14
19291: PPUSH
19292: CALL_OW 2
19296: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19297: LD_VAR 0 14
19301: PPUSH
19302: LD_VAR 0 12
19306: PUSH
19307: LD_INT 1
19309: ARRAY
19310: PPUSH
19311: CALL_OW 52
// end ;
19315: GO 18954
19317: POP
19318: POP
// end ;
19319: GO 18256
19321: POP
19322: POP
// result := result ^ buildings ;
19323: LD_ADDR_VAR 0 7
19327: PUSH
19328: LD_VAR 0 7
19332: PUSH
19333: LD_VAR 0 18
19337: ADD
19338: ST_TO_ADDR
// end else
19339: GO 19482
// begin for i = 1 to personel do
19341: LD_ADDR_VAR 0 8
19345: PUSH
19346: DOUBLE
19347: LD_INT 1
19349: DEC
19350: ST_TO_ADDR
19351: LD_VAR 0 6
19355: PUSH
19356: FOR_TO
19357: IFFALSE 19480
// begin if i > 4 then
19359: LD_VAR 0 8
19363: PUSH
19364: LD_INT 4
19366: GREATER
19367: IFFALSE 19371
// break ;
19369: GO 19480
// x := personel [ i ] ;
19371: LD_ADDR_VAR 0 13
19375: PUSH
19376: LD_VAR 0 6
19380: PUSH
19381: LD_VAR 0 8
19385: ARRAY
19386: ST_TO_ADDR
// if x = - 1 then
19387: LD_VAR 0 13
19391: PUSH
19392: LD_INT 1
19394: NEG
19395: EQUAL
19396: IFFALSE 19400
// continue ;
19398: GO 19356
// PrepareHuman ( false , i , skill ) ;
19400: LD_INT 0
19402: PPUSH
19403: LD_VAR 0 8
19407: PPUSH
19408: LD_VAR 0 4
19412: PPUSH
19413: CALL_OW 380
// un := CreateHuman ;
19417: LD_ADDR_VAR 0 14
19421: PUSH
19422: CALL_OW 44
19426: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19427: LD_VAR 0 14
19431: PPUSH
19432: LD_VAR 0 1
19436: PPUSH
19437: CALL_OW 250
19441: PPUSH
19442: LD_VAR 0 1
19446: PPUSH
19447: CALL_OW 251
19451: PPUSH
19452: LD_INT 10
19454: PPUSH
19455: LD_INT 0
19457: PPUSH
19458: CALL_OW 50
// result := result ^ un ;
19462: LD_ADDR_VAR 0 7
19466: PUSH
19467: LD_VAR 0 7
19471: PUSH
19472: LD_VAR 0 14
19476: ADD
19477: ST_TO_ADDR
// end ;
19478: GO 19356
19480: POP
19481: POP
// end ; end ;
19482: LD_VAR 0 7
19486: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19487: LD_INT 0
19489: PPUSH
19490: PPUSH
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
19498: PPUSH
19499: PPUSH
19500: PPUSH
19501: PPUSH
19502: PPUSH
19503: PPUSH
19504: PPUSH
// result := false ;
19505: LD_ADDR_VAR 0 3
19509: PUSH
19510: LD_INT 0
19512: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19513: LD_VAR 0 1
19517: NOT
19518: PUSH
19519: LD_VAR 0 1
19523: PPUSH
19524: CALL_OW 266
19528: PUSH
19529: LD_INT 32
19531: PUSH
19532: LD_INT 33
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: IN
19539: NOT
19540: OR
19541: IFFALSE 19545
// exit ;
19543: GO 20654
// nat := GetNation ( tower ) ;
19545: LD_ADDR_VAR 0 12
19549: PUSH
19550: LD_VAR 0 1
19554: PPUSH
19555: CALL_OW 248
19559: ST_TO_ADDR
// side := GetSide ( tower ) ;
19560: LD_ADDR_VAR 0 16
19564: PUSH
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 255
19574: ST_TO_ADDR
// x := GetX ( tower ) ;
19575: LD_ADDR_VAR 0 10
19579: PUSH
19580: LD_VAR 0 1
19584: PPUSH
19585: CALL_OW 250
19589: ST_TO_ADDR
// y := GetY ( tower ) ;
19590: LD_ADDR_VAR 0 11
19594: PUSH
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 251
19604: ST_TO_ADDR
// if not x or not y then
19605: LD_VAR 0 10
19609: NOT
19610: PUSH
19611: LD_VAR 0 11
19615: NOT
19616: OR
19617: IFFALSE 19621
// exit ;
19619: GO 20654
// weapon := 0 ;
19621: LD_ADDR_VAR 0 18
19625: PUSH
19626: LD_INT 0
19628: ST_TO_ADDR
// fac_list := [ ] ;
19629: LD_ADDR_VAR 0 17
19633: PUSH
19634: EMPTY
19635: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19636: LD_ADDR_VAR 0 6
19640: PUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 274
19650: PPUSH
19651: LD_VAR 0 2
19655: PPUSH
19656: LD_INT 0
19658: PPUSH
19659: CALL 17225 0 3
19663: PPUSH
19664: LD_INT 30
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 72
19678: ST_TO_ADDR
// if not factories then
19679: LD_VAR 0 6
19683: NOT
19684: IFFALSE 19688
// exit ;
19686: GO 20654
// for i in factories do
19688: LD_ADDR_VAR 0 8
19692: PUSH
19693: LD_VAR 0 6
19697: PUSH
19698: FOR_IN
19699: IFFALSE 19724
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19701: LD_ADDR_VAR 0 17
19705: PUSH
19706: LD_VAR 0 17
19710: PUSH
19711: LD_VAR 0 8
19715: PPUSH
19716: CALL_OW 478
19720: UNION
19721: ST_TO_ADDR
19722: GO 19698
19724: POP
19725: POP
// if not fac_list then
19726: LD_VAR 0 17
19730: NOT
19731: IFFALSE 19735
// exit ;
19733: GO 20654
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19735: LD_ADDR_VAR 0 5
19739: PUSH
19740: LD_INT 4
19742: PUSH
19743: LD_INT 5
19745: PUSH
19746: LD_INT 9
19748: PUSH
19749: LD_INT 10
19751: PUSH
19752: LD_INT 6
19754: PUSH
19755: LD_INT 7
19757: PUSH
19758: LD_INT 11
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 27
19772: PUSH
19773: LD_INT 28
19775: PUSH
19776: LD_INT 26
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 43
19790: PUSH
19791: LD_INT 44
19793: PUSH
19794: LD_INT 46
19796: PUSH
19797: LD_INT 45
19799: PUSH
19800: LD_INT 47
19802: PUSH
19803: LD_INT 49
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: PUSH
19819: LD_VAR 0 12
19823: ARRAY
19824: ST_TO_ADDR
// list := list isect fac_list ;
19825: LD_ADDR_VAR 0 5
19829: PUSH
19830: LD_VAR 0 5
19834: PUSH
19835: LD_VAR 0 17
19839: ISECT
19840: ST_TO_ADDR
// if not list then
19841: LD_VAR 0 5
19845: NOT
19846: IFFALSE 19850
// exit ;
19848: GO 20654
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19850: LD_VAR 0 12
19854: PUSH
19855: LD_INT 3
19857: EQUAL
19858: PUSH
19859: LD_INT 49
19861: PUSH
19862: LD_VAR 0 5
19866: IN
19867: AND
19868: PUSH
19869: LD_INT 31
19871: PPUSH
19872: LD_VAR 0 16
19876: PPUSH
19877: CALL_OW 321
19881: PUSH
19882: LD_INT 2
19884: EQUAL
19885: AND
19886: IFFALSE 19946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19888: LD_INT 22
19890: PUSH
19891: LD_VAR 0 16
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 35
19902: PUSH
19903: LD_INT 49
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 91
19912: PUSH
19913: LD_VAR 0 1
19917: PUSH
19918: LD_INT 10
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 69
19935: NOT
19936: IFFALSE 19946
// weapon := ru_time_lapser ;
19938: LD_ADDR_VAR 0 18
19942: PUSH
19943: LD_INT 49
19945: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19946: LD_VAR 0 12
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: IN
19961: PUSH
19962: LD_INT 11
19964: PUSH
19965: LD_VAR 0 5
19969: IN
19970: PUSH
19971: LD_INT 30
19973: PUSH
19974: LD_VAR 0 5
19978: IN
19979: OR
19980: AND
19981: PUSH
19982: LD_INT 6
19984: PPUSH
19985: LD_VAR 0 16
19989: PPUSH
19990: CALL_OW 321
19994: PUSH
19995: LD_INT 2
19997: EQUAL
19998: AND
19999: IFFALSE 20164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20001: LD_INT 22
20003: PUSH
20004: LD_VAR 0 16
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: LD_INT 35
20018: PUSH
20019: LD_INT 11
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 35
20028: PUSH
20029: LD_INT 30
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 91
20043: PUSH
20044: LD_VAR 0 1
20048: PUSH
20049: LD_INT 18
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: PPUSH
20062: CALL_OW 69
20066: NOT
20067: PUSH
20068: LD_INT 22
20070: PUSH
20071: LD_VAR 0 16
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 30
20085: PUSH
20086: LD_INT 32
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 30
20095: PUSH
20096: LD_INT 33
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 91
20110: PUSH
20111: LD_VAR 0 1
20115: PUSH
20116: LD_INT 12
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: PPUSH
20132: CALL_OW 69
20136: PUSH
20137: LD_INT 2
20139: GREATER
20140: AND
20141: IFFALSE 20164
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20143: LD_ADDR_VAR 0 18
20147: PUSH
20148: LD_INT 11
20150: PUSH
20151: LD_INT 30
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_VAR 0 12
20162: ARRAY
20163: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20164: LD_VAR 0 18
20168: NOT
20169: PUSH
20170: LD_INT 40
20172: PPUSH
20173: LD_VAR 0 16
20177: PPUSH
20178: CALL_OW 321
20182: PUSH
20183: LD_INT 2
20185: EQUAL
20186: AND
20187: PUSH
20188: LD_INT 7
20190: PUSH
20191: LD_VAR 0 5
20195: IN
20196: PUSH
20197: LD_INT 28
20199: PUSH
20200: LD_VAR 0 5
20204: IN
20205: OR
20206: PUSH
20207: LD_INT 45
20209: PUSH
20210: LD_VAR 0 5
20214: IN
20215: OR
20216: AND
20217: IFFALSE 20471
// begin hex := GetHexInfo ( x , y ) ;
20219: LD_ADDR_VAR 0 4
20223: PUSH
20224: LD_VAR 0 10
20228: PPUSH
20229: LD_VAR 0 11
20233: PPUSH
20234: CALL_OW 546
20238: ST_TO_ADDR
// if hex [ 1 ] then
20239: LD_VAR 0 4
20243: PUSH
20244: LD_INT 1
20246: ARRAY
20247: IFFALSE 20251
// exit ;
20249: GO 20654
// height := hex [ 2 ] ;
20251: LD_ADDR_VAR 0 15
20255: PUSH
20256: LD_VAR 0 4
20260: PUSH
20261: LD_INT 2
20263: ARRAY
20264: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20265: LD_ADDR_VAR 0 14
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: LD_INT 5
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: ST_TO_ADDR
// for i in tmp do
20288: LD_ADDR_VAR 0 8
20292: PUSH
20293: LD_VAR 0 14
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20469
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20301: LD_ADDR_VAR 0 9
20305: PUSH
20306: LD_VAR 0 10
20310: PPUSH
20311: LD_VAR 0 8
20315: PPUSH
20316: LD_INT 5
20318: PPUSH
20319: CALL_OW 272
20323: PUSH
20324: LD_VAR 0 11
20328: PPUSH
20329: LD_VAR 0 8
20333: PPUSH
20334: LD_INT 5
20336: PPUSH
20337: CALL_OW 273
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20346: LD_VAR 0 9
20350: PUSH
20351: LD_INT 1
20353: ARRAY
20354: PPUSH
20355: LD_VAR 0 9
20359: PUSH
20360: LD_INT 2
20362: ARRAY
20363: PPUSH
20364: CALL_OW 488
20368: IFFALSE 20467
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20370: LD_ADDR_VAR 0 4
20374: PUSH
20375: LD_VAR 0 9
20379: PUSH
20380: LD_INT 1
20382: ARRAY
20383: PPUSH
20384: LD_VAR 0 9
20388: PUSH
20389: LD_INT 2
20391: ARRAY
20392: PPUSH
20393: CALL_OW 546
20397: ST_TO_ADDR
// if hex [ 1 ] then
20398: LD_VAR 0 4
20402: PUSH
20403: LD_INT 1
20405: ARRAY
20406: IFFALSE 20410
// continue ;
20408: GO 20298
// h := hex [ 2 ] ;
20410: LD_ADDR_VAR 0 13
20414: PUSH
20415: LD_VAR 0 4
20419: PUSH
20420: LD_INT 2
20422: ARRAY
20423: ST_TO_ADDR
// if h + 7 < height then
20424: LD_VAR 0 13
20428: PUSH
20429: LD_INT 7
20431: PLUS
20432: PUSH
20433: LD_VAR 0 15
20437: LESS
20438: IFFALSE 20467
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20440: LD_ADDR_VAR 0 18
20444: PUSH
20445: LD_INT 7
20447: PUSH
20448: LD_INT 28
20450: PUSH
20451: LD_INT 45
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: LIST
20458: PUSH
20459: LD_VAR 0 12
20463: ARRAY
20464: ST_TO_ADDR
// break ;
20465: GO 20469
// end ; end ; end ;
20467: GO 20298
20469: POP
20470: POP
// end ; if not weapon then
20471: LD_VAR 0 18
20475: NOT
20476: IFFALSE 20536
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20478: LD_ADDR_VAR 0 5
20482: PUSH
20483: LD_VAR 0 5
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: LD_INT 30
20493: PUSH
20494: LD_INT 49
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: DIFF
20502: ST_TO_ADDR
// if not list then
20503: LD_VAR 0 5
20507: NOT
20508: IFFALSE 20512
// exit ;
20510: GO 20654
// weapon := list [ rand ( 1 , list ) ] ;
20512: LD_ADDR_VAR 0 18
20516: PUSH
20517: LD_VAR 0 5
20521: PUSH
20522: LD_INT 1
20524: PPUSH
20525: LD_VAR 0 5
20529: PPUSH
20530: CALL_OW 12
20534: ARRAY
20535: ST_TO_ADDR
// end ; if weapon then
20536: LD_VAR 0 18
20540: IFFALSE 20654
// begin tmp := CostOfWeapon ( weapon ) ;
20542: LD_ADDR_VAR 0 14
20546: PUSH
20547: LD_VAR 0 18
20551: PPUSH
20552: CALL_OW 451
20556: ST_TO_ADDR
// j := GetBase ( tower ) ;
20557: LD_ADDR_VAR 0 9
20561: PUSH
20562: LD_VAR 0 1
20566: PPUSH
20567: CALL_OW 274
20571: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20572: LD_VAR 0 9
20576: PPUSH
20577: LD_INT 1
20579: PPUSH
20580: CALL_OW 275
20584: PUSH
20585: LD_VAR 0 14
20589: PUSH
20590: LD_INT 1
20592: ARRAY
20593: GREATEREQUAL
20594: PUSH
20595: LD_VAR 0 9
20599: PPUSH
20600: LD_INT 2
20602: PPUSH
20603: CALL_OW 275
20607: PUSH
20608: LD_VAR 0 14
20612: PUSH
20613: LD_INT 2
20615: ARRAY
20616: GREATEREQUAL
20617: AND
20618: PUSH
20619: LD_VAR 0 9
20623: PPUSH
20624: LD_INT 3
20626: PPUSH
20627: CALL_OW 275
20631: PUSH
20632: LD_VAR 0 14
20636: PUSH
20637: LD_INT 3
20639: ARRAY
20640: GREATEREQUAL
20641: AND
20642: IFFALSE 20654
// result := weapon ;
20644: LD_ADDR_VAR 0 3
20648: PUSH
20649: LD_VAR 0 18
20653: ST_TO_ADDR
// end ; end ;
20654: LD_VAR 0 3
20658: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20659: LD_INT 0
20661: PPUSH
20662: PPUSH
// result := true ;
20663: LD_ADDR_VAR 0 3
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if array1 = array2 then
20671: LD_VAR 0 1
20675: PUSH
20676: LD_VAR 0 2
20680: EQUAL
20681: IFFALSE 20741
// begin for i = 1 to array1 do
20683: LD_ADDR_VAR 0 4
20687: PUSH
20688: DOUBLE
20689: LD_INT 1
20691: DEC
20692: ST_TO_ADDR
20693: LD_VAR 0 1
20697: PUSH
20698: FOR_TO
20699: IFFALSE 20737
// if array1 [ i ] <> array2 [ i ] then
20701: LD_VAR 0 1
20705: PUSH
20706: LD_VAR 0 4
20710: ARRAY
20711: PUSH
20712: LD_VAR 0 2
20716: PUSH
20717: LD_VAR 0 4
20721: ARRAY
20722: NONEQUAL
20723: IFFALSE 20735
// begin result := false ;
20725: LD_ADDR_VAR 0 3
20729: PUSH
20730: LD_INT 0
20732: ST_TO_ADDR
// break ;
20733: GO 20737
// end ;
20735: GO 20698
20737: POP
20738: POP
// end else
20739: GO 20749
// result := false ;
20741: LD_ADDR_VAR 0 3
20745: PUSH
20746: LD_INT 0
20748: ST_TO_ADDR
// end ;
20749: LD_VAR 0 3
20753: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20754: LD_INT 0
20756: PPUSH
20757: PPUSH
// if not array1 or not array2 then
20758: LD_VAR 0 1
20762: NOT
20763: PUSH
20764: LD_VAR 0 2
20768: NOT
20769: OR
20770: IFFALSE 20774
// exit ;
20772: GO 20838
// result := true ;
20774: LD_ADDR_VAR 0 3
20778: PUSH
20779: LD_INT 1
20781: ST_TO_ADDR
// for i = 1 to array1 do
20782: LD_ADDR_VAR 0 4
20786: PUSH
20787: DOUBLE
20788: LD_INT 1
20790: DEC
20791: ST_TO_ADDR
20792: LD_VAR 0 1
20796: PUSH
20797: FOR_TO
20798: IFFALSE 20836
// if array1 [ i ] <> array2 [ i ] then
20800: LD_VAR 0 1
20804: PUSH
20805: LD_VAR 0 4
20809: ARRAY
20810: PUSH
20811: LD_VAR 0 2
20815: PUSH
20816: LD_VAR 0 4
20820: ARRAY
20821: NONEQUAL
20822: IFFALSE 20834
// begin result := false ;
20824: LD_ADDR_VAR 0 3
20828: PUSH
20829: LD_INT 0
20831: ST_TO_ADDR
// break ;
20832: GO 20836
// end ;
20834: GO 20797
20836: POP
20837: POP
// end ;
20838: LD_VAR 0 3
20842: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20843: LD_INT 0
20845: PPUSH
20846: PPUSH
20847: PPUSH
// pom := GetBase ( fac ) ;
20848: LD_ADDR_VAR 0 5
20852: PUSH
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 274
20862: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20863: LD_ADDR_VAR 0 4
20867: PUSH
20868: LD_VAR 0 2
20872: PUSH
20873: LD_INT 1
20875: ARRAY
20876: PPUSH
20877: LD_VAR 0 2
20881: PUSH
20882: LD_INT 2
20884: ARRAY
20885: PPUSH
20886: LD_VAR 0 2
20890: PUSH
20891: LD_INT 3
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 2
20899: PUSH
20900: LD_INT 4
20902: ARRAY
20903: PPUSH
20904: CALL_OW 449
20908: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20909: LD_ADDR_VAR 0 3
20913: PUSH
20914: LD_VAR 0 5
20918: PPUSH
20919: LD_INT 1
20921: PPUSH
20922: CALL_OW 275
20926: PUSH
20927: LD_VAR 0 4
20931: PUSH
20932: LD_INT 1
20934: ARRAY
20935: GREATEREQUAL
20936: PUSH
20937: LD_VAR 0 5
20941: PPUSH
20942: LD_INT 2
20944: PPUSH
20945: CALL_OW 275
20949: PUSH
20950: LD_VAR 0 4
20954: PUSH
20955: LD_INT 2
20957: ARRAY
20958: GREATEREQUAL
20959: AND
20960: PUSH
20961: LD_VAR 0 5
20965: PPUSH
20966: LD_INT 3
20968: PPUSH
20969: CALL_OW 275
20973: PUSH
20974: LD_VAR 0 4
20978: PUSH
20979: LD_INT 3
20981: ARRAY
20982: GREATEREQUAL
20983: AND
20984: ST_TO_ADDR
// end ;
20985: LD_VAR 0 3
20989: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20990: LD_INT 0
20992: PPUSH
20993: PPUSH
20994: PPUSH
20995: PPUSH
// pom := GetBase ( building ) ;
20996: LD_ADDR_VAR 0 3
21000: PUSH
21001: LD_VAR 0 1
21005: PPUSH
21006: CALL_OW 274
21010: ST_TO_ADDR
// if not pom then
21011: LD_VAR 0 3
21015: NOT
21016: IFFALSE 21020
// exit ;
21018: GO 21190
// btype := GetBType ( building ) ;
21020: LD_ADDR_VAR 0 5
21024: PUSH
21025: LD_VAR 0 1
21029: PPUSH
21030: CALL_OW 266
21034: ST_TO_ADDR
// if btype = b_armoury then
21035: LD_VAR 0 5
21039: PUSH
21040: LD_INT 4
21042: EQUAL
21043: IFFALSE 21053
// btype := b_barracks ;
21045: LD_ADDR_VAR 0 5
21049: PUSH
21050: LD_INT 5
21052: ST_TO_ADDR
// if btype = b_depot then
21053: LD_VAR 0 5
21057: PUSH
21058: LD_INT 0
21060: EQUAL
21061: IFFALSE 21071
// btype := b_warehouse ;
21063: LD_ADDR_VAR 0 5
21067: PUSH
21068: LD_INT 1
21070: ST_TO_ADDR
// if btype = b_workshop then
21071: LD_VAR 0 5
21075: PUSH
21076: LD_INT 2
21078: EQUAL
21079: IFFALSE 21089
// btype := b_factory ;
21081: LD_ADDR_VAR 0 5
21085: PUSH
21086: LD_INT 3
21088: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21089: LD_ADDR_VAR 0 4
21093: PUSH
21094: LD_VAR 0 5
21098: PPUSH
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 248
21108: PPUSH
21109: CALL_OW 450
21113: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21114: LD_ADDR_VAR 0 2
21118: PUSH
21119: LD_VAR 0 3
21123: PPUSH
21124: LD_INT 1
21126: PPUSH
21127: CALL_OW 275
21131: PUSH
21132: LD_VAR 0 4
21136: PUSH
21137: LD_INT 1
21139: ARRAY
21140: GREATEREQUAL
21141: PUSH
21142: LD_VAR 0 3
21146: PPUSH
21147: LD_INT 2
21149: PPUSH
21150: CALL_OW 275
21154: PUSH
21155: LD_VAR 0 4
21159: PUSH
21160: LD_INT 2
21162: ARRAY
21163: GREATEREQUAL
21164: AND
21165: PUSH
21166: LD_VAR 0 3
21170: PPUSH
21171: LD_INT 3
21173: PPUSH
21174: CALL_OW 275
21178: PUSH
21179: LD_VAR 0 4
21183: PUSH
21184: LD_INT 3
21186: ARRAY
21187: GREATEREQUAL
21188: AND
21189: ST_TO_ADDR
// end ;
21190: LD_VAR 0 2
21194: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21195: LD_INT 0
21197: PPUSH
21198: PPUSH
21199: PPUSH
// pom := GetBase ( building ) ;
21200: LD_ADDR_VAR 0 4
21204: PUSH
21205: LD_VAR 0 1
21209: PPUSH
21210: CALL_OW 274
21214: ST_TO_ADDR
// if not pom then
21215: LD_VAR 0 4
21219: NOT
21220: IFFALSE 21224
// exit ;
21222: GO 21325
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21224: LD_ADDR_VAR 0 5
21228: PUSH
21229: LD_VAR 0 2
21233: PPUSH
21234: LD_VAR 0 1
21238: PPUSH
21239: CALL_OW 248
21243: PPUSH
21244: CALL_OW 450
21248: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: LD_VAR 0 4
21258: PPUSH
21259: LD_INT 1
21261: PPUSH
21262: CALL_OW 275
21266: PUSH
21267: LD_VAR 0 5
21271: PUSH
21272: LD_INT 1
21274: ARRAY
21275: GREATEREQUAL
21276: PUSH
21277: LD_VAR 0 4
21281: PPUSH
21282: LD_INT 2
21284: PPUSH
21285: CALL_OW 275
21289: PUSH
21290: LD_VAR 0 5
21294: PUSH
21295: LD_INT 2
21297: ARRAY
21298: GREATEREQUAL
21299: AND
21300: PUSH
21301: LD_VAR 0 4
21305: PPUSH
21306: LD_INT 3
21308: PPUSH
21309: CALL_OW 275
21313: PUSH
21314: LD_VAR 0 5
21318: PUSH
21319: LD_INT 3
21321: ARRAY
21322: GREATEREQUAL
21323: AND
21324: ST_TO_ADDR
// end ;
21325: LD_VAR 0 3
21329: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21330: LD_INT 0
21332: PPUSH
21333: PPUSH
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
21340: PPUSH
21341: PPUSH
21342: PPUSH
// result := false ;
21343: LD_ADDR_VAR 0 8
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21351: LD_VAR 0 5
21355: NOT
21356: PUSH
21357: LD_VAR 0 1
21361: NOT
21362: OR
21363: PUSH
21364: LD_VAR 0 2
21368: NOT
21369: OR
21370: PUSH
21371: LD_VAR 0 3
21375: NOT
21376: OR
21377: IFFALSE 21381
// exit ;
21379: GO 22195
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21381: LD_ADDR_VAR 0 14
21385: PUSH
21386: LD_VAR 0 1
21390: PPUSH
21391: LD_VAR 0 2
21395: PPUSH
21396: LD_VAR 0 3
21400: PPUSH
21401: LD_VAR 0 4
21405: PPUSH
21406: LD_VAR 0 5
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: CALL_OW 248
21419: PPUSH
21420: LD_INT 0
21422: PPUSH
21423: CALL 23448 0 6
21427: ST_TO_ADDR
// if not hexes then
21428: LD_VAR 0 14
21432: NOT
21433: IFFALSE 21437
// exit ;
21435: GO 22195
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21437: LD_ADDR_VAR 0 17
21441: PUSH
21442: LD_VAR 0 5
21446: PPUSH
21447: LD_INT 22
21449: PUSH
21450: LD_VAR 0 13
21454: PPUSH
21455: CALL_OW 255
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: LD_INT 30
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 30
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PPUSH
21496: CALL_OW 72
21500: ST_TO_ADDR
// for i = 1 to hexes do
21501: LD_ADDR_VAR 0 9
21505: PUSH
21506: DOUBLE
21507: LD_INT 1
21509: DEC
21510: ST_TO_ADDR
21511: LD_VAR 0 14
21515: PUSH
21516: FOR_TO
21517: IFFALSE 22193
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21519: LD_ADDR_VAR 0 13
21523: PUSH
21524: LD_VAR 0 14
21528: PUSH
21529: LD_VAR 0 9
21533: ARRAY
21534: PUSH
21535: LD_INT 1
21537: ARRAY
21538: PPUSH
21539: LD_VAR 0 14
21543: PUSH
21544: LD_VAR 0 9
21548: ARRAY
21549: PUSH
21550: LD_INT 2
21552: ARRAY
21553: PPUSH
21554: CALL_OW 428
21558: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21559: LD_VAR 0 14
21563: PUSH
21564: LD_VAR 0 9
21568: ARRAY
21569: PUSH
21570: LD_INT 1
21572: ARRAY
21573: PPUSH
21574: LD_VAR 0 14
21578: PUSH
21579: LD_VAR 0 9
21583: ARRAY
21584: PUSH
21585: LD_INT 2
21587: ARRAY
21588: PPUSH
21589: CALL_OW 351
21593: PUSH
21594: LD_VAR 0 14
21598: PUSH
21599: LD_VAR 0 9
21603: ARRAY
21604: PUSH
21605: LD_INT 1
21607: ARRAY
21608: PPUSH
21609: LD_VAR 0 14
21613: PUSH
21614: LD_VAR 0 9
21618: ARRAY
21619: PUSH
21620: LD_INT 2
21622: ARRAY
21623: PPUSH
21624: CALL_OW 488
21628: NOT
21629: OR
21630: PUSH
21631: LD_VAR 0 13
21635: PPUSH
21636: CALL_OW 247
21640: PUSH
21641: LD_INT 3
21643: EQUAL
21644: OR
21645: IFFALSE 21651
// exit ;
21647: POP
21648: POP
21649: GO 22195
// if not tmp then
21651: LD_VAR 0 13
21655: NOT
21656: IFFALSE 21660
// continue ;
21658: GO 21516
// result := true ;
21660: LD_ADDR_VAR 0 8
21664: PUSH
21665: LD_INT 1
21667: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21668: LD_VAR 0 6
21672: PUSH
21673: LD_VAR 0 13
21677: PPUSH
21678: CALL_OW 247
21682: PUSH
21683: LD_INT 2
21685: EQUAL
21686: AND
21687: PUSH
21688: LD_VAR 0 13
21692: PPUSH
21693: CALL_OW 263
21697: PUSH
21698: LD_INT 1
21700: EQUAL
21701: AND
21702: IFFALSE 21866
// begin if IsDrivenBy ( tmp ) then
21704: LD_VAR 0 13
21708: PPUSH
21709: CALL_OW 311
21713: IFFALSE 21717
// continue ;
21715: GO 21516
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21717: LD_VAR 0 6
21721: PPUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 60
21727: PUSH
21728: EMPTY
21729: LIST
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 3
21737: PUSH
21738: LD_INT 55
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PPUSH
21752: CALL_OW 72
21756: IFFALSE 21864
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21758: LD_ADDR_VAR 0 18
21762: PUSH
21763: LD_VAR 0 6
21767: PPUSH
21768: LD_INT 3
21770: PUSH
21771: LD_INT 60
21773: PUSH
21774: EMPTY
21775: LIST
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 3
21783: PUSH
21784: LD_INT 55
21786: PUSH
21787: EMPTY
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PPUSH
21798: CALL_OW 72
21802: PUSH
21803: LD_INT 1
21805: ARRAY
21806: ST_TO_ADDR
// if IsInUnit ( driver ) then
21807: LD_VAR 0 18
21811: PPUSH
21812: CALL_OW 310
21816: IFFALSE 21827
// ComExit ( driver ) ;
21818: LD_VAR 0 18
21822: PPUSH
21823: CALL 47249 0 1
// AddComEnterUnit ( driver , tmp ) ;
21827: LD_VAR 0 18
21831: PPUSH
21832: LD_VAR 0 13
21836: PPUSH
21837: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21841: LD_VAR 0 18
21845: PPUSH
21846: LD_VAR 0 7
21850: PPUSH
21851: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21855: LD_VAR 0 18
21859: PPUSH
21860: CALL_OW 181
// end ; continue ;
21864: GO 21516
// end ; if not cleaners or not tmp in cleaners then
21866: LD_VAR 0 6
21870: NOT
21871: PUSH
21872: LD_VAR 0 13
21876: PUSH
21877: LD_VAR 0 6
21881: IN
21882: NOT
21883: OR
21884: IFFALSE 22191
// begin if dep then
21886: LD_VAR 0 17
21890: IFFALSE 22026
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21892: LD_ADDR_VAR 0 16
21896: PUSH
21897: LD_VAR 0 17
21901: PUSH
21902: LD_INT 1
21904: ARRAY
21905: PPUSH
21906: CALL_OW 250
21910: PPUSH
21911: LD_VAR 0 17
21915: PUSH
21916: LD_INT 1
21918: ARRAY
21919: PPUSH
21920: CALL_OW 254
21924: PPUSH
21925: LD_INT 5
21927: PPUSH
21928: CALL_OW 272
21932: PUSH
21933: LD_VAR 0 17
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PPUSH
21942: CALL_OW 251
21946: PPUSH
21947: LD_VAR 0 17
21951: PUSH
21952: LD_INT 1
21954: ARRAY
21955: PPUSH
21956: CALL_OW 254
21960: PPUSH
21961: LD_INT 5
21963: PPUSH
21964: CALL_OW 273
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21973: LD_VAR 0 16
21977: PUSH
21978: LD_INT 1
21980: ARRAY
21981: PPUSH
21982: LD_VAR 0 16
21986: PUSH
21987: LD_INT 2
21989: ARRAY
21990: PPUSH
21991: CALL_OW 488
21995: IFFALSE 22026
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21997: LD_VAR 0 13
22001: PPUSH
22002: LD_VAR 0 16
22006: PUSH
22007: LD_INT 1
22009: ARRAY
22010: PPUSH
22011: LD_VAR 0 16
22015: PUSH
22016: LD_INT 2
22018: ARRAY
22019: PPUSH
22020: CALL_OW 111
// continue ;
22024: GO 21516
// end ; end ; r := GetDir ( tmp ) ;
22026: LD_ADDR_VAR 0 15
22030: PUSH
22031: LD_VAR 0 13
22035: PPUSH
22036: CALL_OW 254
22040: ST_TO_ADDR
// if r = 5 then
22041: LD_VAR 0 15
22045: PUSH
22046: LD_INT 5
22048: EQUAL
22049: IFFALSE 22059
// r := 0 ;
22051: LD_ADDR_VAR 0 15
22055: PUSH
22056: LD_INT 0
22058: ST_TO_ADDR
// for j = r to 5 do
22059: LD_ADDR_VAR 0 10
22063: PUSH
22064: DOUBLE
22065: LD_VAR 0 15
22069: DEC
22070: ST_TO_ADDR
22071: LD_INT 5
22073: PUSH
22074: FOR_TO
22075: IFFALSE 22189
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22077: LD_ADDR_VAR 0 11
22081: PUSH
22082: LD_VAR 0 13
22086: PPUSH
22087: CALL_OW 250
22091: PPUSH
22092: LD_VAR 0 10
22096: PPUSH
22097: LD_INT 2
22099: PPUSH
22100: CALL_OW 272
22104: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22105: LD_ADDR_VAR 0 12
22109: PUSH
22110: LD_VAR 0 13
22114: PPUSH
22115: CALL_OW 251
22119: PPUSH
22120: LD_VAR 0 10
22124: PPUSH
22125: LD_INT 2
22127: PPUSH
22128: CALL_OW 273
22132: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22133: LD_VAR 0 11
22137: PPUSH
22138: LD_VAR 0 12
22142: PPUSH
22143: CALL_OW 488
22147: PUSH
22148: LD_VAR 0 11
22152: PPUSH
22153: LD_VAR 0 12
22157: PPUSH
22158: CALL_OW 428
22162: NOT
22163: AND
22164: IFFALSE 22187
// begin ComMoveXY ( tmp , _x , _y ) ;
22166: LD_VAR 0 13
22170: PPUSH
22171: LD_VAR 0 11
22175: PPUSH
22176: LD_VAR 0 12
22180: PPUSH
22181: CALL_OW 111
// break ;
22185: GO 22189
// end ; end ;
22187: GO 22074
22189: POP
22190: POP
// end ; end ;
22191: GO 21516
22193: POP
22194: POP
// end ;
22195: LD_VAR 0 8
22199: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22200: LD_INT 0
22202: PPUSH
// result := true ;
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_INT 1
22210: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22211: LD_VAR 0 2
22215: PUSH
22216: LD_INT 24
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22230
22222: LD_INT 33
22224: DOUBLE
22225: EQUAL
22226: IFTRUE 22230
22228: GO 22255
22230: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22231: LD_ADDR_VAR 0 3
22235: PUSH
22236: LD_INT 32
22238: PPUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 321
22248: PUSH
22249: LD_INT 2
22251: EQUAL
22252: ST_TO_ADDR
22253: GO 22571
22255: LD_INT 20
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22288
22263: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22264: LD_ADDR_VAR 0 3
22268: PUSH
22269: LD_INT 6
22271: PPUSH
22272: LD_VAR 0 1
22276: PPUSH
22277: CALL_OW 321
22281: PUSH
22282: LD_INT 2
22284: EQUAL
22285: ST_TO_ADDR
22286: GO 22571
22288: LD_INT 22
22290: DOUBLE
22291: EQUAL
22292: IFTRUE 22302
22294: LD_INT 36
22296: DOUBLE
22297: EQUAL
22298: IFTRUE 22302
22300: GO 22327
22302: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22303: LD_ADDR_VAR 0 3
22307: PUSH
22308: LD_INT 15
22310: PPUSH
22311: LD_VAR 0 1
22315: PPUSH
22316: CALL_OW 321
22320: PUSH
22321: LD_INT 2
22323: EQUAL
22324: ST_TO_ADDR
22325: GO 22571
22327: LD_INT 30
22329: DOUBLE
22330: EQUAL
22331: IFTRUE 22335
22333: GO 22360
22335: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22336: LD_ADDR_VAR 0 3
22340: PUSH
22341: LD_INT 20
22343: PPUSH
22344: LD_VAR 0 1
22348: PPUSH
22349: CALL_OW 321
22353: PUSH
22354: LD_INT 2
22356: EQUAL
22357: ST_TO_ADDR
22358: GO 22571
22360: LD_INT 28
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22374
22366: LD_INT 21
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22374
22372: GO 22399
22374: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_INT 21
22382: PPUSH
22383: LD_VAR 0 1
22387: PPUSH
22388: CALL_OW 321
22392: PUSH
22393: LD_INT 2
22395: EQUAL
22396: ST_TO_ADDR
22397: GO 22571
22399: LD_INT 16
22401: DOUBLE
22402: EQUAL
22403: IFTRUE 22407
22405: GO 22432
22407: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22408: LD_ADDR_VAR 0 3
22412: PUSH
22413: LD_INT 84
22415: PPUSH
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL_OW 321
22425: PUSH
22426: LD_INT 2
22428: EQUAL
22429: ST_TO_ADDR
22430: GO 22571
22432: LD_INT 19
22434: DOUBLE
22435: EQUAL
22436: IFTRUE 22446
22438: LD_INT 23
22440: DOUBLE
22441: EQUAL
22442: IFTRUE 22446
22444: GO 22471
22446: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: LD_INT 83
22454: PPUSH
22455: LD_VAR 0 1
22459: PPUSH
22460: CALL_OW 321
22464: PUSH
22465: LD_INT 2
22467: EQUAL
22468: ST_TO_ADDR
22469: GO 22571
22471: LD_INT 17
22473: DOUBLE
22474: EQUAL
22475: IFTRUE 22479
22477: GO 22504
22479: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22480: LD_ADDR_VAR 0 3
22484: PUSH
22485: LD_INT 39
22487: PPUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 321
22497: PUSH
22498: LD_INT 2
22500: EQUAL
22501: ST_TO_ADDR
22502: GO 22571
22504: LD_INT 18
22506: DOUBLE
22507: EQUAL
22508: IFTRUE 22512
22510: GO 22537
22512: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22513: LD_ADDR_VAR 0 3
22517: PUSH
22518: LD_INT 40
22520: PPUSH
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 321
22530: PUSH
22531: LD_INT 2
22533: EQUAL
22534: ST_TO_ADDR
22535: GO 22571
22537: LD_INT 27
22539: DOUBLE
22540: EQUAL
22541: IFTRUE 22545
22543: GO 22570
22545: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22546: LD_ADDR_VAR 0 3
22550: PUSH
22551: LD_INT 35
22553: PPUSH
22554: LD_VAR 0 1
22558: PPUSH
22559: CALL_OW 321
22563: PUSH
22564: LD_INT 2
22566: EQUAL
22567: ST_TO_ADDR
22568: GO 22571
22570: POP
// end ;
22571: LD_VAR 0 3
22575: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22576: LD_INT 0
22578: PPUSH
22579: PPUSH
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
22586: PPUSH
22587: PPUSH
22588: PPUSH
// result := false ;
22589: LD_ADDR_VAR 0 6
22593: PUSH
22594: LD_INT 0
22596: ST_TO_ADDR
// if btype = b_depot then
22597: LD_VAR 0 2
22601: PUSH
22602: LD_INT 0
22604: EQUAL
22605: IFFALSE 22617
// begin result := true ;
22607: LD_ADDR_VAR 0 6
22611: PUSH
22612: LD_INT 1
22614: ST_TO_ADDR
// exit ;
22615: GO 23443
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22617: LD_VAR 0 1
22621: NOT
22622: PUSH
22623: LD_VAR 0 1
22627: PPUSH
22628: CALL_OW 266
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: IN
22643: NOT
22644: OR
22645: PUSH
22646: LD_VAR 0 2
22650: NOT
22651: OR
22652: PUSH
22653: LD_VAR 0 5
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 2
22666: PUSH
22667: LD_INT 3
22669: PUSH
22670: LD_INT 4
22672: PUSH
22673: LD_INT 5
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: IN
22684: NOT
22685: OR
22686: PUSH
22687: LD_VAR 0 3
22691: PPUSH
22692: LD_VAR 0 4
22696: PPUSH
22697: CALL_OW 488
22701: NOT
22702: OR
22703: IFFALSE 22707
// exit ;
22705: GO 23443
// side := GetSide ( depot ) ;
22707: LD_ADDR_VAR 0 9
22711: PUSH
22712: LD_VAR 0 1
22716: PPUSH
22717: CALL_OW 255
22721: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22722: LD_VAR 0 9
22726: PPUSH
22727: LD_VAR 0 2
22731: PPUSH
22732: CALL 22200 0 2
22736: NOT
22737: IFFALSE 22741
// exit ;
22739: GO 23443
// pom := GetBase ( depot ) ;
22741: LD_ADDR_VAR 0 10
22745: PUSH
22746: LD_VAR 0 1
22750: PPUSH
22751: CALL_OW 274
22755: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22756: LD_ADDR_VAR 0 11
22760: PUSH
22761: LD_VAR 0 2
22765: PPUSH
22766: LD_VAR 0 1
22770: PPUSH
22771: CALL_OW 248
22775: PPUSH
22776: CALL_OW 450
22780: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22781: LD_VAR 0 10
22785: PPUSH
22786: LD_INT 1
22788: PPUSH
22789: CALL_OW 275
22793: PUSH
22794: LD_VAR 0 11
22798: PUSH
22799: LD_INT 1
22801: ARRAY
22802: GREATEREQUAL
22803: PUSH
22804: LD_VAR 0 10
22808: PPUSH
22809: LD_INT 2
22811: PPUSH
22812: CALL_OW 275
22816: PUSH
22817: LD_VAR 0 11
22821: PUSH
22822: LD_INT 2
22824: ARRAY
22825: GREATEREQUAL
22826: AND
22827: PUSH
22828: LD_VAR 0 10
22832: PPUSH
22833: LD_INT 3
22835: PPUSH
22836: CALL_OW 275
22840: PUSH
22841: LD_VAR 0 11
22845: PUSH
22846: LD_INT 3
22848: ARRAY
22849: GREATEREQUAL
22850: AND
22851: NOT
22852: IFFALSE 22856
// exit ;
22854: GO 23443
// if GetBType ( depot ) = b_depot then
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 266
22865: PUSH
22866: LD_INT 0
22868: EQUAL
22869: IFFALSE 22881
// dist := 28 else
22871: LD_ADDR_VAR 0 14
22875: PUSH
22876: LD_INT 28
22878: ST_TO_ADDR
22879: GO 22889
// dist := 36 ;
22881: LD_ADDR_VAR 0 14
22885: PUSH
22886: LD_INT 36
22888: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22889: LD_VAR 0 1
22893: PPUSH
22894: LD_VAR 0 3
22898: PPUSH
22899: LD_VAR 0 4
22903: PPUSH
22904: CALL_OW 297
22908: PUSH
22909: LD_VAR 0 14
22913: GREATER
22914: IFFALSE 22918
// exit ;
22916: GO 23443
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22918: LD_ADDR_VAR 0 12
22922: PUSH
22923: LD_VAR 0 2
22927: PPUSH
22928: LD_VAR 0 3
22932: PPUSH
22933: LD_VAR 0 4
22937: PPUSH
22938: LD_VAR 0 5
22942: PPUSH
22943: LD_VAR 0 1
22947: PPUSH
22948: CALL_OW 248
22952: PPUSH
22953: LD_INT 0
22955: PPUSH
22956: CALL 23448 0 6
22960: ST_TO_ADDR
// if not hexes then
22961: LD_VAR 0 12
22965: NOT
22966: IFFALSE 22970
// exit ;
22968: GO 23443
// hex := GetHexInfo ( x , y ) ;
22970: LD_ADDR_VAR 0 15
22974: PUSH
22975: LD_VAR 0 3
22979: PPUSH
22980: LD_VAR 0 4
22984: PPUSH
22985: CALL_OW 546
22989: ST_TO_ADDR
// if hex [ 1 ] then
22990: LD_VAR 0 15
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: IFFALSE 23002
// exit ;
23000: GO 23443
// height := hex [ 2 ] ;
23002: LD_ADDR_VAR 0 13
23006: PUSH
23007: LD_VAR 0 15
23011: PUSH
23012: LD_INT 2
23014: ARRAY
23015: ST_TO_ADDR
// for i = 1 to hexes do
23016: LD_ADDR_VAR 0 7
23020: PUSH
23021: DOUBLE
23022: LD_INT 1
23024: DEC
23025: ST_TO_ADDR
23026: LD_VAR 0 12
23030: PUSH
23031: FOR_TO
23032: IFFALSE 23362
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23034: LD_VAR 0 12
23038: PUSH
23039: LD_VAR 0 7
23043: ARRAY
23044: PUSH
23045: LD_INT 1
23047: ARRAY
23048: PPUSH
23049: LD_VAR 0 12
23053: PUSH
23054: LD_VAR 0 7
23058: ARRAY
23059: PUSH
23060: LD_INT 2
23062: ARRAY
23063: PPUSH
23064: CALL_OW 488
23068: NOT
23069: PUSH
23070: LD_VAR 0 12
23074: PUSH
23075: LD_VAR 0 7
23079: ARRAY
23080: PUSH
23081: LD_INT 1
23083: ARRAY
23084: PPUSH
23085: LD_VAR 0 12
23089: PUSH
23090: LD_VAR 0 7
23094: ARRAY
23095: PUSH
23096: LD_INT 2
23098: ARRAY
23099: PPUSH
23100: CALL_OW 428
23104: PUSH
23105: LD_INT 0
23107: GREATER
23108: OR
23109: PUSH
23110: LD_VAR 0 12
23114: PUSH
23115: LD_VAR 0 7
23119: ARRAY
23120: PUSH
23121: LD_INT 1
23123: ARRAY
23124: PPUSH
23125: LD_VAR 0 12
23129: PUSH
23130: LD_VAR 0 7
23134: ARRAY
23135: PUSH
23136: LD_INT 2
23138: ARRAY
23139: PPUSH
23140: CALL_OW 351
23144: OR
23145: IFFALSE 23151
// exit ;
23147: POP
23148: POP
23149: GO 23443
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23151: LD_ADDR_VAR 0 8
23155: PUSH
23156: LD_VAR 0 12
23160: PUSH
23161: LD_VAR 0 7
23165: ARRAY
23166: PUSH
23167: LD_INT 1
23169: ARRAY
23170: PPUSH
23171: LD_VAR 0 12
23175: PUSH
23176: LD_VAR 0 7
23180: ARRAY
23181: PUSH
23182: LD_INT 2
23184: ARRAY
23185: PPUSH
23186: CALL_OW 546
23190: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23191: LD_VAR 0 8
23195: PUSH
23196: LD_INT 1
23198: ARRAY
23199: PUSH
23200: LD_VAR 0 8
23204: PUSH
23205: LD_INT 2
23207: ARRAY
23208: PUSH
23209: LD_VAR 0 13
23213: PUSH
23214: LD_INT 2
23216: PLUS
23217: GREATER
23218: OR
23219: PUSH
23220: LD_VAR 0 8
23224: PUSH
23225: LD_INT 2
23227: ARRAY
23228: PUSH
23229: LD_VAR 0 13
23233: PUSH
23234: LD_INT 2
23236: MINUS
23237: LESS
23238: OR
23239: PUSH
23240: LD_VAR 0 8
23244: PUSH
23245: LD_INT 3
23247: ARRAY
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: LD_INT 8
23254: PUSH
23255: LD_INT 9
23257: PUSH
23258: LD_INT 10
23260: PUSH
23261: LD_INT 11
23263: PUSH
23264: LD_INT 12
23266: PUSH
23267: LD_INT 13
23269: PUSH
23270: LD_INT 16
23272: PUSH
23273: LD_INT 17
23275: PUSH
23276: LD_INT 18
23278: PUSH
23279: LD_INT 19
23281: PUSH
23282: LD_INT 20
23284: PUSH
23285: LD_INT 21
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: IN
23303: NOT
23304: OR
23305: PUSH
23306: LD_VAR 0 8
23310: PUSH
23311: LD_INT 5
23313: ARRAY
23314: NOT
23315: OR
23316: PUSH
23317: LD_VAR 0 8
23321: PUSH
23322: LD_INT 6
23324: ARRAY
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: LD_INT 7
23334: PUSH
23335: LD_INT 9
23337: PUSH
23338: LD_INT 10
23340: PUSH
23341: LD_INT 11
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: IN
23352: NOT
23353: OR
23354: IFFALSE 23360
// exit ;
23356: POP
23357: POP
23358: GO 23443
// end ;
23360: GO 23031
23362: POP
23363: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23364: LD_VAR 0 9
23368: PPUSH
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_VAR 0 4
23378: PPUSH
23379: LD_INT 20
23381: PPUSH
23382: CALL 15366 0 4
23386: PUSH
23387: LD_INT 4
23389: ARRAY
23390: IFFALSE 23394
// exit ;
23392: GO 23443
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23394: LD_VAR 0 2
23398: PUSH
23399: LD_INT 29
23401: PUSH
23402: LD_INT 30
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: IN
23409: PUSH
23410: LD_VAR 0 3
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_VAR 0 9
23424: PPUSH
23425: CALL_OW 440
23429: NOT
23430: AND
23431: IFFALSE 23435
// exit ;
23433: GO 23443
// result := true ;
23435: LD_ADDR_VAR 0 6
23439: PUSH
23440: LD_INT 1
23442: ST_TO_ADDR
// end ;
23443: LD_VAR 0 6
23447: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23448: LD_INT 0
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
23506: PPUSH
23507: PPUSH
// result = [ ] ;
23508: LD_ADDR_VAR 0 7
23512: PUSH
23513: EMPTY
23514: ST_TO_ADDR
// temp_list = [ ] ;
23515: LD_ADDR_VAR 0 9
23519: PUSH
23520: EMPTY
23521: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23522: LD_VAR 0 4
23526: PUSH
23527: LD_INT 0
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: LD_INT 4
23541: PUSH
23542: LD_INT 5
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: IN
23553: NOT
23554: PUSH
23555: LD_VAR 0 1
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: IN
23570: PUSH
23571: LD_VAR 0 5
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: LD_INT 3
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: IN
23590: NOT
23591: AND
23592: OR
23593: IFFALSE 23597
// exit ;
23595: GO 41988
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23597: LD_VAR 0 1
23601: PUSH
23602: LD_INT 6
23604: PUSH
23605: LD_INT 7
23607: PUSH
23608: LD_INT 8
23610: PUSH
23611: LD_INT 13
23613: PUSH
23614: LD_INT 12
23616: PUSH
23617: LD_INT 15
23619: PUSH
23620: LD_INT 11
23622: PUSH
23623: LD_INT 14
23625: PUSH
23626: LD_INT 10
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: IN
23640: IFFALSE 23650
// btype = b_lab ;
23642: LD_ADDR_VAR 0 1
23646: PUSH
23647: LD_INT 6
23649: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23650: LD_VAR 0 6
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: IN
23669: NOT
23670: PUSH
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: LD_INT 3
23687: PUSH
23688: LD_INT 6
23690: PUSH
23691: LD_INT 36
23693: PUSH
23694: LD_INT 4
23696: PUSH
23697: LD_INT 5
23699: PUSH
23700: LD_INT 31
23702: PUSH
23703: LD_INT 32
23705: PUSH
23706: LD_INT 33
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: IN
23722: NOT
23723: PUSH
23724: LD_VAR 0 6
23728: PUSH
23729: LD_INT 1
23731: EQUAL
23732: AND
23733: OR
23734: PUSH
23735: LD_VAR 0 1
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: IN
23750: NOT
23751: PUSH
23752: LD_VAR 0 6
23756: PUSH
23757: LD_INT 2
23759: EQUAL
23760: AND
23761: OR
23762: IFFALSE 23772
// mode = 0 ;
23764: LD_ADDR_VAR 0 6
23768: PUSH
23769: LD_INT 0
23771: ST_TO_ADDR
// case mode of 0 :
23772: LD_VAR 0 6
23776: PUSH
23777: LD_INT 0
23779: DOUBLE
23780: EQUAL
23781: IFTRUE 23785
23783: GO 35238
23785: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23786: LD_ADDR_VAR 0 11
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 2
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: LD_INT 3
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 3
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23979: LD_ADDR_VAR 0 12
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 2
24102: NEG
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 2
24113: NEG
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: NEG
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 3
24147: NEG
24148: PUSH
24149: LD_INT 1
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24175: LD_ADDR_VAR 0 13
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: NEG
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: NEG
24311: PUSH
24312: LD_INT 2
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 2
24322: NEG
24323: PUSH
24324: LD_INT 3
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 3
24334: NEG
24335: PUSH
24336: LD_INT 2
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 3
24346: NEG
24347: PUSH
24348: LD_INT 3
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24374: LD_ADDR_VAR 0 14
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 1
24455: NEG
24456: PUSH
24457: LD_INT 2
24459: NEG
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 2
24470: NEG
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: LD_INT 3
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 3
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24570: LD_ADDR_VAR 0 15
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 2
24704: NEG
24705: PUSH
24706: LD_INT 1
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 3
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24763: LD_ADDR_VAR 0 16
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: LD_INT 1
24783: NEG
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 2
24898: NEG
24899: PUSH
24900: LD_INT 2
24902: NEG
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 3
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 3
24920: PUSH
24921: LD_INT 3
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: LD_INT 3
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24956: LD_ADDR_VAR 0 17
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: LD_INT 1
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: LD_INT 2
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: LD_INT 2
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: NEG
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 2
25155: NEG
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25186: LD_ADDR_VAR 0 18
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: LD_INT 2
25282: NEG
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: NEG
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 2
25373: NEG
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 2
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25416: LD_ADDR_VAR 0 19
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: LD_INT 2
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 2
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: LD_INT 2
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25646: LD_ADDR_VAR 0 20
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25876: LD_ADDR_VAR 0 21
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 2
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 1
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: NEG
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 2
26063: NEG
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 2
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26106: LD_ADDR_VAR 0 22
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 1
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: LD_INT 2
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 1
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 2
26282: NEG
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26336: LD_ADDR_VAR 0 23
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 2
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: NEG
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: NEG
26548: PUSH
26549: LD_INT 3
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 3
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 2
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26616: LD_ADDR_VAR 0 24
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 1
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 2
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 2
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: NEG
26816: PUSH
26817: LD_INT 2
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 2
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 3
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 3
26859: PUSH
26860: LD_INT 2
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26892: LD_ADDR_VAR 0 25
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: LD_INT 1
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: LD_INT 2
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 2
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 2
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 2
27068: NEG
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 2
27079: NEG
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: LD_INT 2
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 3
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 3
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: LD_INT 3
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: LD_INT 3
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27166: LD_ADDR_VAR 0 26
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 2
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 2
27342: NEG
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 2
27353: NEG
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: LD_INT 2
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: LD_INT 3
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27442: LD_ADDR_VAR 0 27
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 2
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 2
27641: NEG
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 3
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27722: LD_ADDR_VAR 0 28
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: NEG
27934: PUSH
27935: LD_INT 3
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: NEG
27946: PUSH
27947: LD_INT 3
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 3
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 3
27969: NEG
27970: PUSH
27971: LD_INT 2
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28004: LD_ADDR_VAR 0 29
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: NEG
28183: PUSH
28184: LD_INT 2
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: LD_INT 3
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 3
28248: NEG
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28283: LD_ADDR_VAR 0 30
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: LD_INT 2
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 2
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 2
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 2
28449: NEG
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 1
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 1
28472: NEG
28473: PUSH
28474: LD_INT 3
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 3
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 3
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28561: LD_ADDR_VAR 0 31
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: LD_INT 2
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: NEG
28751: PUSH
28752: LD_INT 3
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 3
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 3
28804: NEG
28805: PUSH
28806: LD_INT 2
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28839: LD_ADDR_VAR 0 32
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 2
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 2
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: NEG
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: LD_INT 3
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 3
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 2
29071: NEG
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: NEG
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29117: LD_ADDR_VAR 0 33
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: NEG
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: NEG
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: LD_INT 2
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: LD_INT 2
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29396: LD_ADDR_VAR 0 34
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: PUSH
29501: LD_INT 1
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 2
29552: NEG
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 2
29563: NEG
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 2
29575: NEG
29576: PUSH
29577: LD_INT 2
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: LD_INT 2
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: LD_INT 1
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 3
29641: NEG
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29676: LD_ADDR_VAR 0 35
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 1
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: LD_INT 1
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29788: LD_ADDR_VAR 0 36
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29900: LD_ADDR_VAR 0 37
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30012: LD_ADDR_VAR 0 38
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 2
30103: NEG
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30124: LD_ADDR_VAR 0 39
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 2
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30236: LD_ADDR_VAR 0 40
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30348: LD_ADDR_VAR 0 41
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: LD_INT 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 2
30503: NEG
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: LD_INT 1
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: LD_INT 2
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: LD_INT 3
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 3
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 3
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 3
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: LD_INT 3
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 2
30611: NEG
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: NEG
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 3
30633: NEG
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: LD_INT 2
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 3
30657: NEG
30658: PUSH
30659: LD_INT 3
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30698: LD_ADDR_VAR 0 42
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 2
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: LD_INT 3
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: LD_INT 3
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 2
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 3
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: LD_INT 3
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 0
30974: PUSH
30975: LD_INT 3
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: LD_INT 3
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31048: LD_ADDR_VAR 0 43
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 1
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: NEG
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 3
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 3
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 3
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31396: LD_ADDR_VAR 0 44
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 2
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: LD_INT 2
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 2
31562: NEG
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 2
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 3
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: NEG
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31746: LD_ADDR_VAR 0 45
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: LD_INT 2
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: LD_INT 3
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: LD_INT 3
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 3
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 3
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 3
32043: NEG
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 3
32055: NEG
32056: PUSH
32057: LD_INT 3
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32096: LD_ADDR_VAR 0 46
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: LD_INT 3
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 3
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: LD_INT 3
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32444: LD_ADDR_VAR 0 47
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: LD_INT 2
32575: NEG
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32595: LD_ADDR_VAR 0 48
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32742: LD_ADDR_VAR 0 49
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 2
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32886: LD_ADDR_VAR 0 50
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: LD_INT 1
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33030: LD_ADDR_VAR 0 51
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33177: LD_ADDR_VAR 0 52
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: LD_INT 2
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33328: LD_ADDR_VAR 0 53
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: LD_INT 2
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33558: LD_ADDR_VAR 0 54
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: LD_INT 2
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 1
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33788: LD_ADDR_VAR 0 55
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34018: LD_ADDR_VAR 0 56
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 2
34217: NEG
34218: PUSH
34219: LD_INT 2
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34248: LD_ADDR_VAR 0 57
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34478: LD_ADDR_VAR 0 58
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: LD_INT 1
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: NEG
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: NEG
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: LD_INT 2
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34708: LD_ADDR_VAR 0 59
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34796: LD_ADDR_VAR 0 60
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34884: LD_ADDR_VAR 0 61
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34972: LD_ADDR_VAR 0 62
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35060: LD_ADDR_VAR 0 63
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35148: LD_ADDR_VAR 0 64
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: ST_TO_ADDR
// end ; 1 :
35236: GO 41133
35238: LD_INT 1
35240: DOUBLE
35241: EQUAL
35242: IFTRUE 35246
35244: GO 37869
35246: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35247: LD_ADDR_VAR 0 11
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 3
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35291: LD_ADDR_VAR 0 12
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 3
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35332: LD_ADDR_VAR 0 13
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: LD_INT 3
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35372: LD_ADDR_VAR 0 14
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 3
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35413: LD_ADDR_VAR 0 15
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 3
35431: NEG
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 3
35442: NEG
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35457: LD_ADDR_VAR 0 16
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: LD_INT 3
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 3
35476: NEG
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 3
35488: NEG
35489: PUSH
35490: LD_INT 3
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35503: LD_ADDR_VAR 0 17
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: LD_INT 3
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 3
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35547: LD_ADDR_VAR 0 18
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 3
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35588: LD_ADDR_VAR 0 19
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 3
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: LD_INT 3
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35628: LD_ADDR_VAR 0 20
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 3
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 3
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35669: LD_ADDR_VAR 0 21
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: NEG
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 3
35698: NEG
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35713: LD_ADDR_VAR 0 22
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 3
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 3
35744: NEG
35745: PUSH
35746: LD_INT 3
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35759: LD_ADDR_VAR 0 23
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: LD_INT 3
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: LD_INT 4
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 3
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35803: LD_ADDR_VAR 0 24
35807: PUSH
35808: LD_INT 3
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 3
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 4
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35844: LD_ADDR_VAR 0 25
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 4
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 3
35871: PUSH
35872: LD_INT 4
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35884: LD_ADDR_VAR 0 26
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 4
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35925: LD_ADDR_VAR 0 27
35929: PUSH
35930: LD_INT 3
35932: NEG
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 3
35943: NEG
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 4
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35969: LD_ADDR_VAR 0 28
35973: PUSH
35974: LD_INT 3
35976: NEG
35977: PUSH
35978: LD_INT 3
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 3
35988: NEG
35989: PUSH
35990: LD_INT 4
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 4
36000: NEG
36001: PUSH
36002: LD_INT 3
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36015: LD_ADDR_VAR 0 29
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 3
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: LD_INT 3
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: LD_INT 2
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: LD_INT 4
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 4
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 3
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: LD_INT 5
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 5
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 4
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 6
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 6
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 5
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36170: LD_ADDR_VAR 0 30
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 3
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 4
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 4
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 4
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 5
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 5
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 5
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 6
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 6
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36313: LD_ADDR_VAR 0 31
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: LD_INT 2
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 3
36330: PUSH
36331: LD_INT 3
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 3
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 4
36350: PUSH
36351: LD_INT 3
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 4
36360: PUSH
36361: LD_INT 4
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 3
36370: PUSH
36371: LD_INT 4
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 5
36380: PUSH
36381: LD_INT 4
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 5
36390: PUSH
36391: LD_INT 5
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 4
36400: PUSH
36401: LD_INT 5
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 6
36410: PUSH
36411: LD_INT 5
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 6
36420: PUSH
36421: LD_INT 6
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 5
36430: PUSH
36431: LD_INT 6
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36452: LD_ADDR_VAR 0 32
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 3
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: LD_INT 3
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: LD_INT 2
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 4
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 4
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: LD_INT 3
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 5
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 5
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 4
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 6
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 6
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 5
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36595: LD_ADDR_VAR 0 33
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 3
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 3
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 4
36647: NEG
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 4
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 4
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 5
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 5
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 5
36704: NEG
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 6
36715: NEG
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 6
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36750: LD_ADDR_VAR 0 34
36754: PUSH
36755: LD_INT 2
36757: NEG
36758: PUSH
36759: LD_INT 3
36761: NEG
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 3
36769: NEG
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 3
36781: NEG
36782: PUSH
36783: LD_INT 3
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 3
36793: NEG
36794: PUSH
36795: LD_INT 4
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 4
36805: NEG
36806: PUSH
36807: LD_INT 3
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 4
36817: NEG
36818: PUSH
36819: LD_INT 4
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 4
36829: NEG
36830: PUSH
36831: LD_INT 5
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 5
36841: NEG
36842: PUSH
36843: LD_INT 4
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 5
36853: NEG
36854: PUSH
36855: LD_INT 5
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 5
36865: NEG
36866: PUSH
36867: LD_INT 6
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 6
36877: NEG
36878: PUSH
36879: LD_INT 5
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 6
36889: NEG
36890: PUSH
36891: LD_INT 6
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36913: LD_ADDR_VAR 0 41
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: LD_INT 3
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36957: LD_ADDR_VAR 0 42
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36998: LD_ADDR_VAR 0 43
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37038: LD_ADDR_VAR 0 44
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 3
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37079: LD_ADDR_VAR 0 45
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 3
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37123: LD_ADDR_VAR 0 46
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: LD_INT 2
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 3
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37169: LD_ADDR_VAR 0 47
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: LD_INT 3
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 3
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37202: LD_ADDR_VAR 0 48
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37233: LD_ADDR_VAR 0 49
37237: PUSH
37238: LD_INT 3
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37262: LD_ADDR_VAR 0 50
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37291: LD_ADDR_VAR 0 51
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37322: LD_ADDR_VAR 0 52
37326: PUSH
37327: LD_INT 3
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 3
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37355: LD_ADDR_VAR 0 53
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 3
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 3
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 2
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37399: LD_ADDR_VAR 0 54
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 3
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 3
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37440: LD_ADDR_VAR 0 55
37444: PUSH
37445: LD_INT 3
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37480: LD_ADDR_VAR 0 56
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 3
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37521: LD_ADDR_VAR 0 57
37525: PUSH
37526: LD_INT 2
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 3
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37565: LD_ADDR_VAR 0 58
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 3
37584: NEG
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: LD_INT 3
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37611: LD_ADDR_VAR 0 59
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37655: LD_ADDR_VAR 0 60
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37696: LD_ADDR_VAR 0 61
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37736: LD_ADDR_VAR 0 62
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37777: LD_ADDR_VAR 0 63
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 2
37795: NEG
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37821: LD_ADDR_VAR 0 64
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 2
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: ST_TO_ADDR
// end ; 2 :
37867: GO 41133
37869: LD_INT 2
37871: DOUBLE
37872: EQUAL
37873: IFTRUE 37877
37875: GO 41132
37877: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37878: LD_ADDR_VAR 0 29
37882: PUSH
37883: LD_INT 4
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 4
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 5
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 5
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 4
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 3
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 3
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 5
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 4
37998: PUSH
37999: LD_INT 3
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 4
38008: PUSH
38009: LD_INT 4
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 3
38018: PUSH
38019: LD_INT 4
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: LD_INT 3
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 4
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: LD_INT 4
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 4
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 3
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: LD_INT 4
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 5
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 5
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: LD_INT 4
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: LD_INT 5
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: NEG
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 3
38172: NEG
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 2
38184: NEG
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 3
38206: NEG
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 4
38217: NEG
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 4
38228: NEG
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 4
38240: NEG
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 4
38263: NEG
38264: PUSH
38265: LD_INT 4
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 4
38275: NEG
38276: PUSH
38277: LD_INT 5
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: LD_INT 4
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 3
38299: NEG
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 4
38311: NEG
38312: PUSH
38313: LD_INT 3
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 5
38323: NEG
38324: PUSH
38325: LD_INT 4
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 5
38335: NEG
38336: PUSH
38337: LD_INT 5
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 3
38347: NEG
38348: PUSH
38349: LD_INT 5
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 5
38359: NEG
38360: PUSH
38361: LD_INT 3
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38416: LD_ADDR_VAR 0 30
38420: PUSH
38421: LD_INT 4
38423: PUSH
38424: LD_INT 4
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 4
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 5
38443: PUSH
38444: LD_INT 4
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 5
38453: PUSH
38454: LD_INT 5
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 4
38463: PUSH
38464: LD_INT 5
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 3
38473: PUSH
38474: LD_INT 4
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 3
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 5
38493: PUSH
38494: LD_INT 3
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 3
38503: PUSH
38504: LD_INT 5
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: LD_INT 4
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 4
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: LD_INT 3
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: LD_INT 4
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 4
38606: NEG
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 4
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 3
38629: NEG
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 3
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 4
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 5
38662: NEG
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 5
38673: NEG
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 5
38685: NEG
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 3
38697: NEG
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: NEG
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: LD_INT 4
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 4
38768: NEG
38769: PUSH
38770: LD_INT 3
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 4
38780: NEG
38781: PUSH
38782: LD_INT 4
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: LD_INT 4
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 4
38804: NEG
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 4
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: LD_INT 5
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 4
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 3
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: LD_INT 3
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: LD_INT 4
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: LD_INT 5
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: LD_INT 3
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 5
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38963: LD_ADDR_VAR 0 31
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 4
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 4
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 5
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 5
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 5
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: LD_INT 3
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 3
39063: NEG
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: NEG
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 3
39108: NEG
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 4
39119: NEG
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 4
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 4
39142: NEG
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 4
39165: NEG
39166: PUSH
39167: LD_INT 4
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 4
39177: NEG
39178: PUSH
39179: LD_INT 5
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 3
39189: NEG
39190: PUSH
39191: LD_INT 4
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 3
39201: NEG
39202: PUSH
39203: LD_INT 3
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 4
39213: NEG
39214: PUSH
39215: LD_INT 3
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 5
39225: NEG
39226: PUSH
39227: LD_INT 4
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 5
39237: NEG
39238: PUSH
39239: LD_INT 5
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: NEG
39250: PUSH
39251: LD_INT 5
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 5
39261: NEG
39262: PUSH
39263: LD_INT 3
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 3
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 4
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 3
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 4
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 4
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 4
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 4
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 5
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 5
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 4
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 5
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39513: LD_ADDR_VAR 0 32
39517: PUSH
39518: LD_INT 4
39520: NEG
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 4
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 3
39543: NEG
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 3
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 4
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 5
39576: NEG
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 5
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 5
39599: NEG
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 3
39611: NEG
39612: PUSH
39613: LD_INT 2
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: NEG
39623: PUSH
39624: LD_INT 3
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: LD_INT 4
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: LD_INT 3
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 3
39670: NEG
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 4
39682: NEG
39683: PUSH
39684: LD_INT 3
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 4
39694: NEG
39695: PUSH
39696: LD_INT 4
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: LD_INT 4
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 4
39718: NEG
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 4
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 5
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 4
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 3
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 4
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 5
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: LD_INT 3
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: LD_INT 5
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 4
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 4
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 4
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: LD_INT 4
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 4
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 5
39945: PUSH
39946: LD_INT 4
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 5
39955: PUSH
39956: LD_INT 5
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 4
39965: PUSH
39966: LD_INT 5
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: LD_INT 4
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 5
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 3
40005: PUSH
40006: LD_INT 5
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40060: LD_ADDR_VAR 0 33
40064: PUSH
40065: LD_INT 4
40067: NEG
40068: PUSH
40069: LD_INT 4
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 4
40079: NEG
40080: PUSH
40081: LD_INT 5
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 3
40091: NEG
40092: PUSH
40093: LD_INT 4
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 3
40103: NEG
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 4
40115: NEG
40116: PUSH
40117: LD_INT 3
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 5
40127: NEG
40128: PUSH
40129: LD_INT 4
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 5
40139: NEG
40140: PUSH
40141: LD_INT 5
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 3
40151: NEG
40152: PUSH
40153: LD_INT 5
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 5
40163: NEG
40164: PUSH
40165: LD_INT 3
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 4
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: LD_INT 3
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 3
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 4
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: LD_INT 4
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 4
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 4
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 5
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 5
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 4
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 5
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 3
40370: PUSH
40371: LD_INT 3
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 3
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 4
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 4
40400: PUSH
40401: LD_INT 4
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 3
40410: PUSH
40411: LD_INT 4
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: LD_INT 3
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 4
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: LD_INT 4
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 4
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 4
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 5
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 5
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 4
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 3
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 5
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40598: LD_ADDR_VAR 0 34
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 4
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 5
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 4
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 3
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 3
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 4
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 5
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 3
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 5
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 3
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 3
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 4
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 4
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 4
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 4
40800: PUSH
40801: LD_INT 4
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 4
40810: PUSH
40811: LD_INT 3
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 5
40820: PUSH
40821: LD_INT 4
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 5
40830: PUSH
40831: LD_INT 5
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 4
40840: PUSH
40841: LD_INT 5
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 3
40850: PUSH
40851: LD_INT 4
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 3
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 5
40870: PUSH
40871: LD_INT 3
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 3
40880: PUSH
40881: LD_INT 5
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 3
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: LD_INT 3
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 4
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 4
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: LD_INT 3
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 4
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 4
40983: NEG
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 4
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 3
41006: NEG
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 3
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 4
41028: NEG
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 5
41039: NEG
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 5
41050: NEG
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 5
41062: NEG
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 3
41074: NEG
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
// end ; end ;
41130: GO 41133
41132: POP
// case btype of b_depot , b_warehouse :
41133: LD_VAR 0 1
41137: PUSH
41138: LD_INT 0
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41152
41144: LD_INT 1
41146: DOUBLE
41147: EQUAL
41148: IFTRUE 41152
41150: GO 41353
41152: POP
// case nation of nation_american :
41153: LD_VAR 0 5
41157: PUSH
41158: LD_INT 1
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41222
41166: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41167: LD_ADDR_VAR 0 9
41171: PUSH
41172: LD_VAR 0 11
41176: PUSH
41177: LD_VAR 0 12
41181: PUSH
41182: LD_VAR 0 13
41186: PUSH
41187: LD_VAR 0 14
41191: PUSH
41192: LD_VAR 0 15
41196: PUSH
41197: LD_VAR 0 16
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: PUSH
41210: LD_VAR 0 4
41214: PUSH
41215: LD_INT 1
41217: PLUS
41218: ARRAY
41219: ST_TO_ADDR
41220: GO 41351
41222: LD_INT 2
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41230
41228: GO 41286
41230: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41231: LD_ADDR_VAR 0 9
41235: PUSH
41236: LD_VAR 0 17
41240: PUSH
41241: LD_VAR 0 18
41245: PUSH
41246: LD_VAR 0 19
41250: PUSH
41251: LD_VAR 0 20
41255: PUSH
41256: LD_VAR 0 21
41260: PUSH
41261: LD_VAR 0 22
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: PUSH
41274: LD_VAR 0 4
41278: PUSH
41279: LD_INT 1
41281: PLUS
41282: ARRAY
41283: ST_TO_ADDR
41284: GO 41351
41286: LD_INT 3
41288: DOUBLE
41289: EQUAL
41290: IFTRUE 41294
41292: GO 41350
41294: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41295: LD_ADDR_VAR 0 9
41299: PUSH
41300: LD_VAR 0 23
41304: PUSH
41305: LD_VAR 0 24
41309: PUSH
41310: LD_VAR 0 25
41314: PUSH
41315: LD_VAR 0 26
41319: PUSH
41320: LD_VAR 0 27
41324: PUSH
41325: LD_VAR 0 28
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: PUSH
41338: LD_VAR 0 4
41342: PUSH
41343: LD_INT 1
41345: PLUS
41346: ARRAY
41347: ST_TO_ADDR
41348: GO 41351
41350: POP
41351: GO 41906
41353: LD_INT 2
41355: DOUBLE
41356: EQUAL
41357: IFTRUE 41367
41359: LD_INT 3
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41367
41365: GO 41423
41367: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41368: LD_ADDR_VAR 0 9
41372: PUSH
41373: LD_VAR 0 29
41377: PUSH
41378: LD_VAR 0 30
41382: PUSH
41383: LD_VAR 0 31
41387: PUSH
41388: LD_VAR 0 32
41392: PUSH
41393: LD_VAR 0 33
41397: PUSH
41398: LD_VAR 0 34
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: LD_VAR 0 4
41415: PUSH
41416: LD_INT 1
41418: PLUS
41419: ARRAY
41420: ST_TO_ADDR
41421: GO 41906
41423: LD_INT 16
41425: DOUBLE
41426: EQUAL
41427: IFTRUE 41485
41429: LD_INT 17
41431: DOUBLE
41432: EQUAL
41433: IFTRUE 41485
41435: LD_INT 18
41437: DOUBLE
41438: EQUAL
41439: IFTRUE 41485
41441: LD_INT 19
41443: DOUBLE
41444: EQUAL
41445: IFTRUE 41485
41447: LD_INT 22
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41485
41453: LD_INT 20
41455: DOUBLE
41456: EQUAL
41457: IFTRUE 41485
41459: LD_INT 21
41461: DOUBLE
41462: EQUAL
41463: IFTRUE 41485
41465: LD_INT 23
41467: DOUBLE
41468: EQUAL
41469: IFTRUE 41485
41471: LD_INT 24
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41485
41477: LD_INT 25
41479: DOUBLE
41480: EQUAL
41481: IFTRUE 41485
41483: GO 41541
41485: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41486: LD_ADDR_VAR 0 9
41490: PUSH
41491: LD_VAR 0 35
41495: PUSH
41496: LD_VAR 0 36
41500: PUSH
41501: LD_VAR 0 37
41505: PUSH
41506: LD_VAR 0 38
41510: PUSH
41511: LD_VAR 0 39
41515: PUSH
41516: LD_VAR 0 40
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: PUSH
41529: LD_VAR 0 4
41533: PUSH
41534: LD_INT 1
41536: PLUS
41537: ARRAY
41538: ST_TO_ADDR
41539: GO 41906
41541: LD_INT 6
41543: DOUBLE
41544: EQUAL
41545: IFTRUE 41597
41547: LD_INT 7
41549: DOUBLE
41550: EQUAL
41551: IFTRUE 41597
41553: LD_INT 8
41555: DOUBLE
41556: EQUAL
41557: IFTRUE 41597
41559: LD_INT 13
41561: DOUBLE
41562: EQUAL
41563: IFTRUE 41597
41565: LD_INT 12
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41597
41571: LD_INT 15
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41597
41577: LD_INT 11
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41597
41583: LD_INT 14
41585: DOUBLE
41586: EQUAL
41587: IFTRUE 41597
41589: LD_INT 10
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41597
41595: GO 41653
41597: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41598: LD_ADDR_VAR 0 9
41602: PUSH
41603: LD_VAR 0 41
41607: PUSH
41608: LD_VAR 0 42
41612: PUSH
41613: LD_VAR 0 43
41617: PUSH
41618: LD_VAR 0 44
41622: PUSH
41623: LD_VAR 0 45
41627: PUSH
41628: LD_VAR 0 46
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: PUSH
41641: LD_VAR 0 4
41645: PUSH
41646: LD_INT 1
41648: PLUS
41649: ARRAY
41650: ST_TO_ADDR
41651: GO 41906
41653: LD_INT 36
41655: DOUBLE
41656: EQUAL
41657: IFTRUE 41661
41659: GO 41717
41661: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41662: LD_ADDR_VAR 0 9
41666: PUSH
41667: LD_VAR 0 47
41671: PUSH
41672: LD_VAR 0 48
41676: PUSH
41677: LD_VAR 0 49
41681: PUSH
41682: LD_VAR 0 50
41686: PUSH
41687: LD_VAR 0 51
41691: PUSH
41692: LD_VAR 0 52
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: PUSH
41705: LD_VAR 0 4
41709: PUSH
41710: LD_INT 1
41712: PLUS
41713: ARRAY
41714: ST_TO_ADDR
41715: GO 41906
41717: LD_INT 4
41719: DOUBLE
41720: EQUAL
41721: IFTRUE 41743
41723: LD_INT 5
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41743
41729: LD_INT 34
41731: DOUBLE
41732: EQUAL
41733: IFTRUE 41743
41735: LD_INT 37
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41743
41741: GO 41799
41743: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41744: LD_ADDR_VAR 0 9
41748: PUSH
41749: LD_VAR 0 53
41753: PUSH
41754: LD_VAR 0 54
41758: PUSH
41759: LD_VAR 0 55
41763: PUSH
41764: LD_VAR 0 56
41768: PUSH
41769: LD_VAR 0 57
41773: PUSH
41774: LD_VAR 0 58
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: PUSH
41787: LD_VAR 0 4
41791: PUSH
41792: LD_INT 1
41794: PLUS
41795: ARRAY
41796: ST_TO_ADDR
41797: GO 41906
41799: LD_INT 31
41801: DOUBLE
41802: EQUAL
41803: IFTRUE 41849
41805: LD_INT 32
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41849
41811: LD_INT 33
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41849
41817: LD_INT 27
41819: DOUBLE
41820: EQUAL
41821: IFTRUE 41849
41823: LD_INT 26
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41849
41829: LD_INT 28
41831: DOUBLE
41832: EQUAL
41833: IFTRUE 41849
41835: LD_INT 29
41837: DOUBLE
41838: EQUAL
41839: IFTRUE 41849
41841: LD_INT 30
41843: DOUBLE
41844: EQUAL
41845: IFTRUE 41849
41847: GO 41905
41849: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41850: LD_ADDR_VAR 0 9
41854: PUSH
41855: LD_VAR 0 59
41859: PUSH
41860: LD_VAR 0 60
41864: PUSH
41865: LD_VAR 0 61
41869: PUSH
41870: LD_VAR 0 62
41874: PUSH
41875: LD_VAR 0 63
41879: PUSH
41880: LD_VAR 0 64
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: PUSH
41893: LD_VAR 0 4
41897: PUSH
41898: LD_INT 1
41900: PLUS
41901: ARRAY
41902: ST_TO_ADDR
41903: GO 41906
41905: POP
// temp_list2 = [ ] ;
41906: LD_ADDR_VAR 0 10
41910: PUSH
41911: EMPTY
41912: ST_TO_ADDR
// for i in temp_list do
41913: LD_ADDR_VAR 0 8
41917: PUSH
41918: LD_VAR 0 9
41922: PUSH
41923: FOR_IN
41924: IFFALSE 41976
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41926: LD_ADDR_VAR 0 10
41930: PUSH
41931: LD_VAR 0 10
41935: PUSH
41936: LD_VAR 0 8
41940: PUSH
41941: LD_INT 1
41943: ARRAY
41944: PUSH
41945: LD_VAR 0 2
41949: PLUS
41950: PUSH
41951: LD_VAR 0 8
41955: PUSH
41956: LD_INT 2
41958: ARRAY
41959: PUSH
41960: LD_VAR 0 3
41964: PLUS
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: EMPTY
41971: LIST
41972: ADD
41973: ST_TO_ADDR
41974: GO 41923
41976: POP
41977: POP
// result = temp_list2 ;
41978: LD_ADDR_VAR 0 7
41982: PUSH
41983: LD_VAR 0 10
41987: ST_TO_ADDR
// end ;
41988: LD_VAR 0 7
41992: RET
// export function EnemyInRange ( unit , dist ) ; begin
41993: LD_INT 0
41995: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41996: LD_ADDR_VAR 0 3
42000: PUSH
42001: LD_VAR 0 1
42005: PPUSH
42006: CALL_OW 255
42010: PPUSH
42011: LD_VAR 0 1
42015: PPUSH
42016: CALL_OW 250
42020: PPUSH
42021: LD_VAR 0 1
42025: PPUSH
42026: CALL_OW 251
42030: PPUSH
42031: LD_VAR 0 2
42035: PPUSH
42036: CALL 15366 0 4
42040: PUSH
42041: LD_INT 4
42043: ARRAY
42044: ST_TO_ADDR
// end ;
42045: LD_VAR 0 3
42049: RET
// export function PlayerSeeMe ( unit ) ; begin
42050: LD_INT 0
42052: PPUSH
// result := See ( your_side , unit ) ;
42053: LD_ADDR_VAR 0 2
42057: PUSH
42058: LD_OWVAR 2
42062: PPUSH
42063: LD_VAR 0 1
42067: PPUSH
42068: CALL_OW 292
42072: ST_TO_ADDR
// end ;
42073: LD_VAR 0 2
42077: RET
// export function ReverseDir ( unit ) ; begin
42078: LD_INT 0
42080: PPUSH
// if not unit then
42081: LD_VAR 0 1
42085: NOT
42086: IFFALSE 42090
// exit ;
42088: GO 42113
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42090: LD_ADDR_VAR 0 2
42094: PUSH
42095: LD_VAR 0 1
42099: PPUSH
42100: CALL_OW 254
42104: PUSH
42105: LD_INT 3
42107: PLUS
42108: PUSH
42109: LD_INT 6
42111: MOD
42112: ST_TO_ADDR
// end ;
42113: LD_VAR 0 2
42117: RET
// export function ReverseArray ( array ) ; var i ; begin
42118: LD_INT 0
42120: PPUSH
42121: PPUSH
// if not array then
42122: LD_VAR 0 1
42126: NOT
42127: IFFALSE 42131
// exit ;
42129: GO 42186
// result := [ ] ;
42131: LD_ADDR_VAR 0 2
42135: PUSH
42136: EMPTY
42137: ST_TO_ADDR
// for i := array downto 1 do
42138: LD_ADDR_VAR 0 3
42142: PUSH
42143: DOUBLE
42144: LD_VAR 0 1
42148: INC
42149: ST_TO_ADDR
42150: LD_INT 1
42152: PUSH
42153: FOR_DOWNTO
42154: IFFALSE 42184
// result := Join ( result , array [ i ] ) ;
42156: LD_ADDR_VAR 0 2
42160: PUSH
42161: LD_VAR 0 2
42165: PPUSH
42166: LD_VAR 0 1
42170: PUSH
42171: LD_VAR 0 3
42175: ARRAY
42176: PPUSH
42177: CALL 46851 0 2
42181: ST_TO_ADDR
42182: GO 42153
42184: POP
42185: POP
// end ;
42186: LD_VAR 0 2
42190: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42191: LD_INT 0
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
// if not unit or not hexes then
42199: LD_VAR 0 1
42203: NOT
42204: PUSH
42205: LD_VAR 0 2
42209: NOT
42210: OR
42211: IFFALSE 42215
// exit ;
42213: GO 42338
// dist := 9999 ;
42215: LD_ADDR_VAR 0 5
42219: PUSH
42220: LD_INT 9999
42222: ST_TO_ADDR
// for i = 1 to hexes do
42223: LD_ADDR_VAR 0 4
42227: PUSH
42228: DOUBLE
42229: LD_INT 1
42231: DEC
42232: ST_TO_ADDR
42233: LD_VAR 0 2
42237: PUSH
42238: FOR_TO
42239: IFFALSE 42326
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42241: LD_ADDR_VAR 0 6
42245: PUSH
42246: LD_VAR 0 1
42250: PPUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_VAR 0 4
42260: ARRAY
42261: PUSH
42262: LD_INT 1
42264: ARRAY
42265: PPUSH
42266: LD_VAR 0 2
42270: PUSH
42271: LD_VAR 0 4
42275: ARRAY
42276: PUSH
42277: LD_INT 2
42279: ARRAY
42280: PPUSH
42281: CALL_OW 297
42285: ST_TO_ADDR
// if tdist < dist then
42286: LD_VAR 0 6
42290: PUSH
42291: LD_VAR 0 5
42295: LESS
42296: IFFALSE 42324
// begin hex := hexes [ i ] ;
42298: LD_ADDR_VAR 0 8
42302: PUSH
42303: LD_VAR 0 2
42307: PUSH
42308: LD_VAR 0 4
42312: ARRAY
42313: ST_TO_ADDR
// dist := tdist ;
42314: LD_ADDR_VAR 0 5
42318: PUSH
42319: LD_VAR 0 6
42323: ST_TO_ADDR
// end ; end ;
42324: GO 42238
42326: POP
42327: POP
// result := hex ;
42328: LD_ADDR_VAR 0 3
42332: PUSH
42333: LD_VAR 0 8
42337: ST_TO_ADDR
// end ;
42338: LD_VAR 0 3
42342: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42343: LD_INT 0
42345: PPUSH
42346: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42347: LD_VAR 0 1
42351: NOT
42352: PUSH
42353: LD_VAR 0 1
42357: PUSH
42358: LD_INT 21
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 23
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PPUSH
42382: CALL_OW 69
42386: IN
42387: NOT
42388: OR
42389: IFFALSE 42393
// exit ;
42391: GO 42440
// for i = 1 to 3 do
42393: LD_ADDR_VAR 0 3
42397: PUSH
42398: DOUBLE
42399: LD_INT 1
42401: DEC
42402: ST_TO_ADDR
42403: LD_INT 3
42405: PUSH
42406: FOR_TO
42407: IFFALSE 42438
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 250
42418: PPUSH
42419: LD_VAR 0 1
42423: PPUSH
42424: CALL_OW 251
42428: PPUSH
42429: LD_INT 1
42431: PPUSH
42432: CALL_OW 453
42436: GO 42406
42438: POP
42439: POP
// end ;
42440: LD_VAR 0 2
42444: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42445: LD_INT 0
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
// if not unit or not enemy_unit then
42453: LD_VAR 0 1
42457: NOT
42458: PUSH
42459: LD_VAR 0 2
42463: NOT
42464: OR
42465: IFFALSE 42469
// exit ;
42467: GO 42936
// if GetLives ( i ) < 250 then
42469: LD_VAR 0 4
42473: PPUSH
42474: CALL_OW 256
42478: PUSH
42479: LD_INT 250
42481: LESS
42482: IFFALSE 42495
// begin ComAutodestruct ( i ) ;
42484: LD_VAR 0 4
42488: PPUSH
42489: CALL 42343 0 1
// exit ;
42493: GO 42936
// end ; x := GetX ( enemy_unit ) ;
42495: LD_ADDR_VAR 0 7
42499: PUSH
42500: LD_VAR 0 2
42504: PPUSH
42505: CALL_OW 250
42509: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42510: LD_ADDR_VAR 0 8
42514: PUSH
42515: LD_VAR 0 2
42519: PPUSH
42520: CALL_OW 251
42524: ST_TO_ADDR
// if not x or not y then
42525: LD_VAR 0 7
42529: NOT
42530: PUSH
42531: LD_VAR 0 8
42535: NOT
42536: OR
42537: IFFALSE 42541
// exit ;
42539: GO 42936
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42541: LD_ADDR_VAR 0 6
42545: PUSH
42546: LD_VAR 0 7
42550: PPUSH
42551: LD_INT 0
42553: PPUSH
42554: LD_INT 4
42556: PPUSH
42557: CALL_OW 272
42561: PUSH
42562: LD_VAR 0 8
42566: PPUSH
42567: LD_INT 0
42569: PPUSH
42570: LD_INT 4
42572: PPUSH
42573: CALL_OW 273
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_VAR 0 7
42586: PPUSH
42587: LD_INT 1
42589: PPUSH
42590: LD_INT 4
42592: PPUSH
42593: CALL_OW 272
42597: PUSH
42598: LD_VAR 0 8
42602: PPUSH
42603: LD_INT 1
42605: PPUSH
42606: LD_INT 4
42608: PPUSH
42609: CALL_OW 273
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_VAR 0 7
42622: PPUSH
42623: LD_INT 2
42625: PPUSH
42626: LD_INT 4
42628: PPUSH
42629: CALL_OW 272
42633: PUSH
42634: LD_VAR 0 8
42638: PPUSH
42639: LD_INT 2
42641: PPUSH
42642: LD_INT 4
42644: PPUSH
42645: CALL_OW 273
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_VAR 0 7
42658: PPUSH
42659: LD_INT 3
42661: PPUSH
42662: LD_INT 4
42664: PPUSH
42665: CALL_OW 272
42669: PUSH
42670: LD_VAR 0 8
42674: PPUSH
42675: LD_INT 3
42677: PPUSH
42678: LD_INT 4
42680: PPUSH
42681: CALL_OW 273
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_VAR 0 7
42694: PPUSH
42695: LD_INT 4
42697: PPUSH
42698: LD_INT 4
42700: PPUSH
42701: CALL_OW 272
42705: PUSH
42706: LD_VAR 0 8
42710: PPUSH
42711: LD_INT 4
42713: PPUSH
42714: LD_INT 4
42716: PPUSH
42717: CALL_OW 273
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_VAR 0 7
42730: PPUSH
42731: LD_INT 5
42733: PPUSH
42734: LD_INT 4
42736: PPUSH
42737: CALL_OW 272
42741: PUSH
42742: LD_VAR 0 8
42746: PPUSH
42747: LD_INT 5
42749: PPUSH
42750: LD_INT 4
42752: PPUSH
42753: CALL_OW 273
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
// for i = tmp downto 1 do
42770: LD_ADDR_VAR 0 4
42774: PUSH
42775: DOUBLE
42776: LD_VAR 0 6
42780: INC
42781: ST_TO_ADDR
42782: LD_INT 1
42784: PUSH
42785: FOR_DOWNTO
42786: IFFALSE 42887
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42788: LD_VAR 0 6
42792: PUSH
42793: LD_VAR 0 4
42797: ARRAY
42798: PUSH
42799: LD_INT 1
42801: ARRAY
42802: PPUSH
42803: LD_VAR 0 6
42807: PUSH
42808: LD_VAR 0 4
42812: ARRAY
42813: PUSH
42814: LD_INT 2
42816: ARRAY
42817: PPUSH
42818: CALL_OW 488
42822: NOT
42823: PUSH
42824: LD_VAR 0 6
42828: PUSH
42829: LD_VAR 0 4
42833: ARRAY
42834: PUSH
42835: LD_INT 1
42837: ARRAY
42838: PPUSH
42839: LD_VAR 0 6
42843: PUSH
42844: LD_VAR 0 4
42848: ARRAY
42849: PUSH
42850: LD_INT 2
42852: ARRAY
42853: PPUSH
42854: CALL_OW 428
42858: PUSH
42859: LD_INT 0
42861: NONEQUAL
42862: OR
42863: IFFALSE 42885
// tmp := Delete ( tmp , i ) ;
42865: LD_ADDR_VAR 0 6
42869: PUSH
42870: LD_VAR 0 6
42874: PPUSH
42875: LD_VAR 0 4
42879: PPUSH
42880: CALL_OW 3
42884: ST_TO_ADDR
42885: GO 42785
42887: POP
42888: POP
// j := GetClosestHex ( unit , tmp ) ;
42889: LD_ADDR_VAR 0 5
42893: PUSH
42894: LD_VAR 0 1
42898: PPUSH
42899: LD_VAR 0 6
42903: PPUSH
42904: CALL 42191 0 2
42908: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42909: LD_VAR 0 1
42913: PPUSH
42914: LD_VAR 0 5
42918: PUSH
42919: LD_INT 1
42921: ARRAY
42922: PPUSH
42923: LD_VAR 0 5
42927: PUSH
42928: LD_INT 2
42930: ARRAY
42931: PPUSH
42932: CALL_OW 111
// end ;
42936: LD_VAR 0 3
42940: RET
// export function PrepareApemanSoldier ( ) ; begin
42941: LD_INT 0
42943: PPUSH
// uc_nation := 0 ;
42944: LD_ADDR_OWVAR 21
42948: PUSH
42949: LD_INT 0
42951: ST_TO_ADDR
// hc_sex := sex_male ;
42952: LD_ADDR_OWVAR 27
42956: PUSH
42957: LD_INT 1
42959: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42960: LD_ADDR_OWVAR 28
42964: PUSH
42965: LD_INT 15
42967: ST_TO_ADDR
// hc_gallery :=  ;
42968: LD_ADDR_OWVAR 33
42972: PUSH
42973: LD_STRING 
42975: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42976: LD_ADDR_OWVAR 31
42980: PUSH
42981: LD_INT 0
42983: PPUSH
42984: LD_INT 3
42986: PPUSH
42987: CALL_OW 12
42991: PUSH
42992: LD_INT 0
42994: PPUSH
42995: LD_INT 3
42997: PPUSH
42998: CALL_OW 12
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: ST_TO_ADDR
// end ;
43015: LD_VAR 0 1
43019: RET
// export function PrepareApemanEngineer ( ) ; begin
43020: LD_INT 0
43022: PPUSH
// uc_nation := 0 ;
43023: LD_ADDR_OWVAR 21
43027: PUSH
43028: LD_INT 0
43030: ST_TO_ADDR
// hc_sex := sex_male ;
43031: LD_ADDR_OWVAR 27
43035: PUSH
43036: LD_INT 1
43038: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43039: LD_ADDR_OWVAR 28
43043: PUSH
43044: LD_INT 16
43046: ST_TO_ADDR
// hc_gallery :=  ;
43047: LD_ADDR_OWVAR 33
43051: PUSH
43052: LD_STRING 
43054: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43055: LD_ADDR_OWVAR 31
43059: PUSH
43060: LD_INT 0
43062: PPUSH
43063: LD_INT 3
43065: PPUSH
43066: CALL_OW 12
43070: PUSH
43071: LD_INT 0
43073: PPUSH
43074: LD_INT 3
43076: PPUSH
43077: CALL_OW 12
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
// end ;
43094: LD_VAR 0 1
43098: RET
// export function PrepareApeman ( agressivity ) ; begin
43099: LD_INT 0
43101: PPUSH
// uc_side := 0 ;
43102: LD_ADDR_OWVAR 20
43106: PUSH
43107: LD_INT 0
43109: ST_TO_ADDR
// uc_nation := 0 ;
43110: LD_ADDR_OWVAR 21
43114: PUSH
43115: LD_INT 0
43117: ST_TO_ADDR
// hc_sex := sex_male ;
43118: LD_ADDR_OWVAR 27
43122: PUSH
43123: LD_INT 1
43125: ST_TO_ADDR
// hc_class := class_apeman ;
43126: LD_ADDR_OWVAR 28
43130: PUSH
43131: LD_INT 12
43133: ST_TO_ADDR
// hc_gallery :=  ;
43134: LD_ADDR_OWVAR 33
43138: PUSH
43139: LD_STRING 
43141: ST_TO_ADDR
// if agressivity = 0 then
43142: LD_VAR 0 1
43146: PUSH
43147: LD_INT 0
43149: EQUAL
43150: IFFALSE 43162
// hc_agressivity := 0 else
43152: LD_ADDR_OWVAR 35
43156: PUSH
43157: LD_INT 0
43159: ST_TO_ADDR
43160: GO 43183
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43162: LD_ADDR_OWVAR 35
43166: PUSH
43167: LD_VAR 0 1
43171: NEG
43172: PPUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: CALL_OW 12
43182: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43183: LD_ADDR_OWVAR 31
43187: PUSH
43188: LD_INT 0
43190: PPUSH
43191: LD_INT 3
43193: PPUSH
43194: CALL_OW 12
43198: PUSH
43199: LD_INT 0
43201: PPUSH
43202: LD_INT 3
43204: PPUSH
43205: CALL_OW 12
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// end ;
43222: LD_VAR 0 2
43226: RET
// export function PrepareTiger ( agressivity ) ; begin
43227: LD_INT 0
43229: PPUSH
// uc_side := 0 ;
43230: LD_ADDR_OWVAR 20
43234: PUSH
43235: LD_INT 0
43237: ST_TO_ADDR
// uc_nation := 0 ;
43238: LD_ADDR_OWVAR 21
43242: PUSH
43243: LD_INT 0
43245: ST_TO_ADDR
// hc_class := class_tiger ;
43246: LD_ADDR_OWVAR 28
43250: PUSH
43251: LD_INT 14
43253: ST_TO_ADDR
// hc_gallery :=  ;
43254: LD_ADDR_OWVAR 33
43258: PUSH
43259: LD_STRING 
43261: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43262: LD_ADDR_OWVAR 35
43266: PUSH
43267: LD_VAR 0 1
43271: NEG
43272: PPUSH
43273: LD_VAR 0 1
43277: PPUSH
43278: CALL_OW 12
43282: ST_TO_ADDR
// end ;
43283: LD_VAR 0 2
43287: RET
// export function PrepareEnchidna ( ) ; begin
43288: LD_INT 0
43290: PPUSH
// uc_side := 0 ;
43291: LD_ADDR_OWVAR 20
43295: PUSH
43296: LD_INT 0
43298: ST_TO_ADDR
// uc_nation := 0 ;
43299: LD_ADDR_OWVAR 21
43303: PUSH
43304: LD_INT 0
43306: ST_TO_ADDR
// hc_class := class_baggie ;
43307: LD_ADDR_OWVAR 28
43311: PUSH
43312: LD_INT 13
43314: ST_TO_ADDR
// hc_gallery :=  ;
43315: LD_ADDR_OWVAR 33
43319: PUSH
43320: LD_STRING 
43322: ST_TO_ADDR
// end ;
43323: LD_VAR 0 1
43327: RET
// export function PrepareFrog ( ) ; begin
43328: LD_INT 0
43330: PPUSH
// uc_side := 0 ;
43331: LD_ADDR_OWVAR 20
43335: PUSH
43336: LD_INT 0
43338: ST_TO_ADDR
// uc_nation := 0 ;
43339: LD_ADDR_OWVAR 21
43343: PUSH
43344: LD_INT 0
43346: ST_TO_ADDR
// hc_class := class_frog ;
43347: LD_ADDR_OWVAR 28
43351: PUSH
43352: LD_INT 19
43354: ST_TO_ADDR
// hc_gallery :=  ;
43355: LD_ADDR_OWVAR 33
43359: PUSH
43360: LD_STRING 
43362: ST_TO_ADDR
// end ;
43363: LD_VAR 0 1
43367: RET
// export function PrepareFish ( ) ; begin
43368: LD_INT 0
43370: PPUSH
// uc_side := 0 ;
43371: LD_ADDR_OWVAR 20
43375: PUSH
43376: LD_INT 0
43378: ST_TO_ADDR
// uc_nation := 0 ;
43379: LD_ADDR_OWVAR 21
43383: PUSH
43384: LD_INT 0
43386: ST_TO_ADDR
// hc_class := class_fish ;
43387: LD_ADDR_OWVAR 28
43391: PUSH
43392: LD_INT 20
43394: ST_TO_ADDR
// hc_gallery :=  ;
43395: LD_ADDR_OWVAR 33
43399: PUSH
43400: LD_STRING 
43402: ST_TO_ADDR
// end ;
43403: LD_VAR 0 1
43407: RET
// export function PrepareBird ( ) ; begin
43408: LD_INT 0
43410: PPUSH
// uc_side := 0 ;
43411: LD_ADDR_OWVAR 20
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// uc_nation := 0 ;
43419: LD_ADDR_OWVAR 21
43423: PUSH
43424: LD_INT 0
43426: ST_TO_ADDR
// hc_class := class_phororhacos ;
43427: LD_ADDR_OWVAR 28
43431: PUSH
43432: LD_INT 18
43434: ST_TO_ADDR
// hc_gallery :=  ;
43435: LD_ADDR_OWVAR 33
43439: PUSH
43440: LD_STRING 
43442: ST_TO_ADDR
// end ;
43443: LD_VAR 0 1
43447: RET
// export function PrepareHorse ( ) ; begin
43448: LD_INT 0
43450: PPUSH
// uc_side := 0 ;
43451: LD_ADDR_OWVAR 20
43455: PUSH
43456: LD_INT 0
43458: ST_TO_ADDR
// uc_nation := 0 ;
43459: LD_ADDR_OWVAR 21
43463: PUSH
43464: LD_INT 0
43466: ST_TO_ADDR
// hc_class := class_horse ;
43467: LD_ADDR_OWVAR 28
43471: PUSH
43472: LD_INT 21
43474: ST_TO_ADDR
// hc_gallery :=  ;
43475: LD_ADDR_OWVAR 33
43479: PUSH
43480: LD_STRING 
43482: ST_TO_ADDR
// end ;
43483: LD_VAR 0 1
43487: RET
// export function PrepareMastodont ( ) ; begin
43488: LD_INT 0
43490: PPUSH
// uc_side := 0 ;
43491: LD_ADDR_OWVAR 20
43495: PUSH
43496: LD_INT 0
43498: ST_TO_ADDR
// uc_nation := 0 ;
43499: LD_ADDR_OWVAR 21
43503: PUSH
43504: LD_INT 0
43506: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43507: LD_ADDR_OWVAR 37
43511: PUSH
43512: LD_INT 31
43514: ST_TO_ADDR
// vc_control := control_rider ;
43515: LD_ADDR_OWVAR 38
43519: PUSH
43520: LD_INT 4
43522: ST_TO_ADDR
// end ;
43523: LD_VAR 0 1
43527: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43528: LD_INT 0
43530: PPUSH
43531: PPUSH
43532: PPUSH
// uc_side = 0 ;
43533: LD_ADDR_OWVAR 20
43537: PUSH
43538: LD_INT 0
43540: ST_TO_ADDR
// uc_nation = 0 ;
43541: LD_ADDR_OWVAR 21
43545: PUSH
43546: LD_INT 0
43548: ST_TO_ADDR
// InitHc_All ( ) ;
43549: CALL_OW 584
// InitVc ;
43553: CALL_OW 20
// if mastodonts then
43557: LD_VAR 0 6
43561: IFFALSE 43628
// for i = 1 to mastodonts do
43563: LD_ADDR_VAR 0 11
43567: PUSH
43568: DOUBLE
43569: LD_INT 1
43571: DEC
43572: ST_TO_ADDR
43573: LD_VAR 0 6
43577: PUSH
43578: FOR_TO
43579: IFFALSE 43626
// begin vc_chassis := 31 ;
43581: LD_ADDR_OWVAR 37
43585: PUSH
43586: LD_INT 31
43588: ST_TO_ADDR
// vc_control := control_rider ;
43589: LD_ADDR_OWVAR 38
43593: PUSH
43594: LD_INT 4
43596: ST_TO_ADDR
// animal := CreateVehicle ;
43597: LD_ADDR_VAR 0 12
43601: PUSH
43602: CALL_OW 45
43606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43607: LD_VAR 0 12
43611: PPUSH
43612: LD_VAR 0 8
43616: PPUSH
43617: LD_INT 0
43619: PPUSH
43620: CALL 45756 0 3
// end ;
43624: GO 43578
43626: POP
43627: POP
// if horses then
43628: LD_VAR 0 5
43632: IFFALSE 43699
// for i = 1 to horses do
43634: LD_ADDR_VAR 0 11
43638: PUSH
43639: DOUBLE
43640: LD_INT 1
43642: DEC
43643: ST_TO_ADDR
43644: LD_VAR 0 5
43648: PUSH
43649: FOR_TO
43650: IFFALSE 43697
// begin hc_class := 21 ;
43652: LD_ADDR_OWVAR 28
43656: PUSH
43657: LD_INT 21
43659: ST_TO_ADDR
// hc_gallery :=  ;
43660: LD_ADDR_OWVAR 33
43664: PUSH
43665: LD_STRING 
43667: ST_TO_ADDR
// animal := CreateHuman ;
43668: LD_ADDR_VAR 0 12
43672: PUSH
43673: CALL_OW 44
43677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43678: LD_VAR 0 12
43682: PPUSH
43683: LD_VAR 0 8
43687: PPUSH
43688: LD_INT 0
43690: PPUSH
43691: CALL 45756 0 3
// end ;
43695: GO 43649
43697: POP
43698: POP
// if birds then
43699: LD_VAR 0 1
43703: IFFALSE 43770
// for i = 1 to birds do
43705: LD_ADDR_VAR 0 11
43709: PUSH
43710: DOUBLE
43711: LD_INT 1
43713: DEC
43714: ST_TO_ADDR
43715: LD_VAR 0 1
43719: PUSH
43720: FOR_TO
43721: IFFALSE 43768
// begin hc_class := 18 ;
43723: LD_ADDR_OWVAR 28
43727: PUSH
43728: LD_INT 18
43730: ST_TO_ADDR
// hc_gallery =  ;
43731: LD_ADDR_OWVAR 33
43735: PUSH
43736: LD_STRING 
43738: ST_TO_ADDR
// animal := CreateHuman ;
43739: LD_ADDR_VAR 0 12
43743: PUSH
43744: CALL_OW 44
43748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43749: LD_VAR 0 12
43753: PPUSH
43754: LD_VAR 0 8
43758: PPUSH
43759: LD_INT 0
43761: PPUSH
43762: CALL 45756 0 3
// end ;
43766: GO 43720
43768: POP
43769: POP
// if tigers then
43770: LD_VAR 0 2
43774: IFFALSE 43858
// for i = 1 to tigers do
43776: LD_ADDR_VAR 0 11
43780: PUSH
43781: DOUBLE
43782: LD_INT 1
43784: DEC
43785: ST_TO_ADDR
43786: LD_VAR 0 2
43790: PUSH
43791: FOR_TO
43792: IFFALSE 43856
// begin hc_class = class_tiger ;
43794: LD_ADDR_OWVAR 28
43798: PUSH
43799: LD_INT 14
43801: ST_TO_ADDR
// hc_gallery =  ;
43802: LD_ADDR_OWVAR 33
43806: PUSH
43807: LD_STRING 
43809: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43810: LD_ADDR_OWVAR 35
43814: PUSH
43815: LD_INT 7
43817: NEG
43818: PPUSH
43819: LD_INT 7
43821: PPUSH
43822: CALL_OW 12
43826: ST_TO_ADDR
// animal := CreateHuman ;
43827: LD_ADDR_VAR 0 12
43831: PUSH
43832: CALL_OW 44
43836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43837: LD_VAR 0 12
43841: PPUSH
43842: LD_VAR 0 8
43846: PPUSH
43847: LD_INT 0
43849: PPUSH
43850: CALL 45756 0 3
// end ;
43854: GO 43791
43856: POP
43857: POP
// if apemans then
43858: LD_VAR 0 3
43862: IFFALSE 43985
// for i = 1 to apemans do
43864: LD_ADDR_VAR 0 11
43868: PUSH
43869: DOUBLE
43870: LD_INT 1
43872: DEC
43873: ST_TO_ADDR
43874: LD_VAR 0 3
43878: PUSH
43879: FOR_TO
43880: IFFALSE 43983
// begin hc_class = class_apeman ;
43882: LD_ADDR_OWVAR 28
43886: PUSH
43887: LD_INT 12
43889: ST_TO_ADDR
// hc_gallery =  ;
43890: LD_ADDR_OWVAR 33
43894: PUSH
43895: LD_STRING 
43897: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43898: LD_ADDR_OWVAR 35
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PPUSH
43907: LD_INT 2
43909: PPUSH
43910: CALL_OW 12
43914: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43915: LD_ADDR_OWVAR 31
43919: PUSH
43920: LD_INT 1
43922: PPUSH
43923: LD_INT 3
43925: PPUSH
43926: CALL_OW 12
43930: PUSH
43931: LD_INT 1
43933: PPUSH
43934: LD_INT 3
43936: PPUSH
43937: CALL_OW 12
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: ST_TO_ADDR
// animal := CreateHuman ;
43954: LD_ADDR_VAR 0 12
43958: PUSH
43959: CALL_OW 44
43963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43964: LD_VAR 0 12
43968: PPUSH
43969: LD_VAR 0 8
43973: PPUSH
43974: LD_INT 0
43976: PPUSH
43977: CALL 45756 0 3
// end ;
43981: GO 43879
43983: POP
43984: POP
// if enchidnas then
43985: LD_VAR 0 4
43989: IFFALSE 44056
// for i = 1 to enchidnas do
43991: LD_ADDR_VAR 0 11
43995: PUSH
43996: DOUBLE
43997: LD_INT 1
43999: DEC
44000: ST_TO_ADDR
44001: LD_VAR 0 4
44005: PUSH
44006: FOR_TO
44007: IFFALSE 44054
// begin hc_class = 13 ;
44009: LD_ADDR_OWVAR 28
44013: PUSH
44014: LD_INT 13
44016: ST_TO_ADDR
// hc_gallery =  ;
44017: LD_ADDR_OWVAR 33
44021: PUSH
44022: LD_STRING 
44024: ST_TO_ADDR
// animal := CreateHuman ;
44025: LD_ADDR_VAR 0 12
44029: PUSH
44030: CALL_OW 44
44034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44035: LD_VAR 0 12
44039: PPUSH
44040: LD_VAR 0 8
44044: PPUSH
44045: LD_INT 0
44047: PPUSH
44048: CALL 45756 0 3
// end ;
44052: GO 44006
44054: POP
44055: POP
// if fishes then
44056: LD_VAR 0 7
44060: IFFALSE 44127
// for i = 1 to fishes do
44062: LD_ADDR_VAR 0 11
44066: PUSH
44067: DOUBLE
44068: LD_INT 1
44070: DEC
44071: ST_TO_ADDR
44072: LD_VAR 0 7
44076: PUSH
44077: FOR_TO
44078: IFFALSE 44125
// begin hc_class = 20 ;
44080: LD_ADDR_OWVAR 28
44084: PUSH
44085: LD_INT 20
44087: ST_TO_ADDR
// hc_gallery =  ;
44088: LD_ADDR_OWVAR 33
44092: PUSH
44093: LD_STRING 
44095: ST_TO_ADDR
// animal := CreateHuman ;
44096: LD_ADDR_VAR 0 12
44100: PUSH
44101: CALL_OW 44
44105: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44106: LD_VAR 0 12
44110: PPUSH
44111: LD_VAR 0 9
44115: PPUSH
44116: LD_INT 0
44118: PPUSH
44119: CALL 45756 0 3
// end ;
44123: GO 44077
44125: POP
44126: POP
// end ;
44127: LD_VAR 0 10
44131: RET
// export function WantHeal ( sci , unit ) ; begin
44132: LD_INT 0
44134: PPUSH
// if GetTaskList ( sci ) > 0 then
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 437
44144: PUSH
44145: LD_INT 0
44147: GREATER
44148: IFFALSE 44218
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44150: LD_VAR 0 1
44154: PPUSH
44155: CALL_OW 437
44159: PUSH
44160: LD_INT 1
44162: ARRAY
44163: PUSH
44164: LD_INT 1
44166: ARRAY
44167: PUSH
44168: LD_STRING l
44170: EQUAL
44171: PUSH
44172: LD_VAR 0 1
44176: PPUSH
44177: CALL_OW 437
44181: PUSH
44182: LD_INT 1
44184: ARRAY
44185: PUSH
44186: LD_INT 4
44188: ARRAY
44189: PUSH
44190: LD_VAR 0 2
44194: EQUAL
44195: AND
44196: IFFALSE 44208
// result := true else
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_INT 1
44205: ST_TO_ADDR
44206: GO 44216
// result := false ;
44208: LD_ADDR_VAR 0 3
44212: PUSH
44213: LD_INT 0
44215: ST_TO_ADDR
// end else
44216: GO 44226
// result := false ;
44218: LD_ADDR_VAR 0 3
44222: PUSH
44223: LD_INT 0
44225: ST_TO_ADDR
// end ;
44226: LD_VAR 0 3
44230: RET
// export function HealTarget ( sci ) ; begin
44231: LD_INT 0
44233: PPUSH
// if not sci then
44234: LD_VAR 0 1
44238: NOT
44239: IFFALSE 44243
// exit ;
44241: GO 44308
// result := 0 ;
44243: LD_ADDR_VAR 0 2
44247: PUSH
44248: LD_INT 0
44250: ST_TO_ADDR
// if GetTaskList ( sci ) then
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 437
44260: IFFALSE 44308
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44262: LD_VAR 0 1
44266: PPUSH
44267: CALL_OW 437
44271: PUSH
44272: LD_INT 1
44274: ARRAY
44275: PUSH
44276: LD_INT 1
44278: ARRAY
44279: PUSH
44280: LD_STRING l
44282: EQUAL
44283: IFFALSE 44308
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44285: LD_ADDR_VAR 0 2
44289: PUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: CALL_OW 437
44299: PUSH
44300: LD_INT 1
44302: ARRAY
44303: PUSH
44304: LD_INT 4
44306: ARRAY
44307: ST_TO_ADDR
// end ;
44308: LD_VAR 0 2
44312: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44313: LD_INT 0
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
// if not base_units then
44319: LD_VAR 0 1
44323: NOT
44324: IFFALSE 44328
// exit ;
44326: GO 44415
// result := false ;
44328: LD_ADDR_VAR 0 2
44332: PUSH
44333: LD_INT 0
44335: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44336: LD_ADDR_VAR 0 5
44340: PUSH
44341: LD_VAR 0 1
44345: PPUSH
44346: LD_INT 21
44348: PUSH
44349: LD_INT 3
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PPUSH
44356: CALL_OW 72
44360: ST_TO_ADDR
// if not tmp then
44361: LD_VAR 0 5
44365: NOT
44366: IFFALSE 44370
// exit ;
44368: GO 44415
// for i in tmp do
44370: LD_ADDR_VAR 0 3
44374: PUSH
44375: LD_VAR 0 5
44379: PUSH
44380: FOR_IN
44381: IFFALSE 44413
// begin result := EnemyInRange ( i , 22 ) ;
44383: LD_ADDR_VAR 0 2
44387: PUSH
44388: LD_VAR 0 3
44392: PPUSH
44393: LD_INT 22
44395: PPUSH
44396: CALL 41993 0 2
44400: ST_TO_ADDR
// if result then
44401: LD_VAR 0 2
44405: IFFALSE 44411
// exit ;
44407: POP
44408: POP
44409: GO 44415
// end ;
44411: GO 44380
44413: POP
44414: POP
// end ;
44415: LD_VAR 0 2
44419: RET
// export function FilterByTag ( units , tag ) ; begin
44420: LD_INT 0
44422: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44423: LD_ADDR_VAR 0 3
44427: PUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: LD_INT 120
44435: PUSH
44436: LD_VAR 0 2
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PPUSH
44445: CALL_OW 72
44449: ST_TO_ADDR
// end ;
44450: LD_VAR 0 3
44454: RET
// export function IsDriver ( un ) ; begin
44455: LD_INT 0
44457: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44458: LD_ADDR_VAR 0 2
44462: PUSH
44463: LD_VAR 0 1
44467: PUSH
44468: LD_INT 55
44470: PUSH
44471: EMPTY
44472: LIST
44473: PPUSH
44474: CALL_OW 69
44478: IN
44479: ST_TO_ADDR
// end ;
44480: LD_VAR 0 2
44484: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44485: LD_INT 0
44487: PPUSH
44488: PPUSH
// list := [ ] ;
44489: LD_ADDR_VAR 0 5
44493: PUSH
44494: EMPTY
44495: ST_TO_ADDR
// case d of 0 :
44496: LD_VAR 0 3
44500: PUSH
44501: LD_INT 0
44503: DOUBLE
44504: EQUAL
44505: IFTRUE 44509
44507: GO 44642
44509: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44510: LD_ADDR_VAR 0 5
44514: PUSH
44515: LD_VAR 0 1
44519: PUSH
44520: LD_INT 4
44522: MINUS
44523: PUSH
44524: LD_VAR 0 2
44528: PUSH
44529: LD_INT 4
44531: MINUS
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: PUSH
44541: LD_VAR 0 1
44545: PUSH
44546: LD_INT 3
44548: MINUS
44549: PUSH
44550: LD_VAR 0 2
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: PUSH
44563: LD_VAR 0 1
44567: PUSH
44568: LD_INT 4
44570: PLUS
44571: PUSH
44572: LD_VAR 0 2
44576: PUSH
44577: LD_INT 4
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: PUSH
44585: LD_VAR 0 1
44589: PUSH
44590: LD_INT 3
44592: PLUS
44593: PUSH
44594: LD_VAR 0 2
44598: PUSH
44599: LD_INT 3
44601: PLUS
44602: PUSH
44603: LD_INT 5
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: PUSH
44611: LD_VAR 0 1
44615: PUSH
44616: LD_VAR 0 2
44620: PUSH
44621: LD_INT 4
44623: PLUS
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// end ; 1 :
44640: GO 45340
44642: LD_INT 1
44644: DOUBLE
44645: EQUAL
44646: IFTRUE 44650
44648: GO 44783
44650: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44651: LD_ADDR_VAR 0 5
44655: PUSH
44656: LD_VAR 0 1
44660: PUSH
44661: LD_VAR 0 2
44665: PUSH
44666: LD_INT 4
44668: MINUS
44669: PUSH
44670: LD_INT 3
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: PUSH
44678: LD_VAR 0 1
44682: PUSH
44683: LD_INT 3
44685: MINUS
44686: PUSH
44687: LD_VAR 0 2
44691: PUSH
44692: LD_INT 3
44694: MINUS
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: PUSH
44704: LD_VAR 0 1
44708: PUSH
44709: LD_INT 4
44711: MINUS
44712: PUSH
44713: LD_VAR 0 2
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: PUSH
44726: LD_VAR 0 1
44730: PUSH
44731: LD_VAR 0 2
44735: PUSH
44736: LD_INT 3
44738: PLUS
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: PUSH
44748: LD_VAR 0 1
44752: PUSH
44753: LD_INT 4
44755: PLUS
44756: PUSH
44757: LD_VAR 0 2
44761: PUSH
44762: LD_INT 4
44764: PLUS
44765: PUSH
44766: LD_INT 5
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// end ; 2 :
44781: GO 45340
44783: LD_INT 2
44785: DOUBLE
44786: EQUAL
44787: IFTRUE 44791
44789: GO 44920
44791: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44792: LD_ADDR_VAR 0 5
44796: PUSH
44797: LD_VAR 0 1
44801: PUSH
44802: LD_VAR 0 2
44806: PUSH
44807: LD_INT 3
44809: MINUS
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: PUSH
44819: LD_VAR 0 1
44823: PUSH
44824: LD_INT 4
44826: PLUS
44827: PUSH
44828: LD_VAR 0 2
44832: PUSH
44833: LD_INT 4
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: LIST
44840: PUSH
44841: LD_VAR 0 1
44845: PUSH
44846: LD_VAR 0 2
44850: PUSH
44851: LD_INT 4
44853: PLUS
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: PUSH
44863: LD_VAR 0 1
44867: PUSH
44868: LD_INT 3
44870: MINUS
44871: PUSH
44872: LD_VAR 0 2
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: PUSH
44885: LD_VAR 0 1
44889: PUSH
44890: LD_INT 4
44892: MINUS
44893: PUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_INT 4
44901: MINUS
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
// end ; 3 :
44918: GO 45340
44920: LD_INT 3
44922: DOUBLE
44923: EQUAL
44924: IFTRUE 44928
44926: GO 45061
44928: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44929: LD_ADDR_VAR 0 5
44933: PUSH
44934: LD_VAR 0 1
44938: PUSH
44939: LD_INT 3
44941: PLUS
44942: PUSH
44943: LD_VAR 0 2
44947: PUSH
44948: LD_INT 4
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: PUSH
44956: LD_VAR 0 1
44960: PUSH
44961: LD_INT 4
44963: PLUS
44964: PUSH
44965: LD_VAR 0 2
44969: PUSH
44970: LD_INT 4
44972: PLUS
44973: PUSH
44974: LD_INT 5
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: PUSH
44982: LD_VAR 0 1
44986: PUSH
44987: LD_INT 4
44989: MINUS
44990: PUSH
44991: LD_VAR 0 2
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: PUSH
45004: LD_VAR 0 1
45008: PUSH
45009: LD_VAR 0 2
45013: PUSH
45014: LD_INT 4
45016: MINUS
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: PUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_INT 3
45033: MINUS
45034: PUSH
45035: LD_VAR 0 2
45039: PUSH
45040: LD_INT 3
45042: MINUS
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// end ; 4 :
45059: GO 45340
45061: LD_INT 4
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45069
45067: GO 45202
45069: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45070: LD_ADDR_VAR 0 5
45074: PUSH
45075: LD_VAR 0 1
45079: PUSH
45080: LD_VAR 0 2
45084: PUSH
45085: LD_INT 4
45087: PLUS
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: PUSH
45097: LD_VAR 0 1
45101: PUSH
45102: LD_INT 3
45104: PLUS
45105: PUSH
45106: LD_VAR 0 2
45110: PUSH
45111: LD_INT 3
45113: PLUS
45114: PUSH
45115: LD_INT 5
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: LIST
45122: PUSH
45123: LD_VAR 0 1
45127: PUSH
45128: LD_INT 4
45130: PLUS
45131: PUSH
45132: LD_VAR 0 2
45136: PUSH
45137: LD_INT 4
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: PUSH
45145: LD_VAR 0 1
45149: PUSH
45150: LD_VAR 0 2
45154: PUSH
45155: LD_INT 3
45157: MINUS
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: LIST
45166: PUSH
45167: LD_VAR 0 1
45171: PUSH
45172: LD_INT 4
45174: MINUS
45175: PUSH
45176: LD_VAR 0 2
45180: PUSH
45181: LD_INT 4
45183: MINUS
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// end ; 5 :
45200: GO 45340
45202: LD_INT 5
45204: DOUBLE
45205: EQUAL
45206: IFTRUE 45210
45208: GO 45339
45210: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45211: LD_ADDR_VAR 0 5
45215: PUSH
45216: LD_VAR 0 1
45220: PUSH
45221: LD_INT 4
45223: MINUS
45224: PUSH
45225: LD_VAR 0 2
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: PUSH
45238: LD_VAR 0 1
45242: PUSH
45243: LD_VAR 0 2
45247: PUSH
45248: LD_INT 4
45250: MINUS
45251: PUSH
45252: LD_INT 3
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: PUSH
45260: LD_VAR 0 1
45264: PUSH
45265: LD_INT 4
45267: PLUS
45268: PUSH
45269: LD_VAR 0 2
45273: PUSH
45274: LD_INT 4
45276: PLUS
45277: PUSH
45278: LD_INT 5
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: PUSH
45286: LD_VAR 0 1
45290: PUSH
45291: LD_INT 3
45293: PLUS
45294: PUSH
45295: LD_VAR 0 2
45299: PUSH
45300: LD_INT 4
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: PUSH
45308: LD_VAR 0 1
45312: PUSH
45313: LD_VAR 0 2
45317: PUSH
45318: LD_INT 3
45320: PLUS
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// end ; end ;
45337: GO 45340
45339: POP
// result := list ;
45340: LD_ADDR_VAR 0 4
45344: PUSH
45345: LD_VAR 0 5
45349: ST_TO_ADDR
// end ;
45350: LD_VAR 0 4
45354: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45355: LD_INT 0
45357: PPUSH
45358: PPUSH
45359: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45360: LD_VAR 0 1
45364: NOT
45365: PUSH
45366: LD_VAR 0 2
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: LD_INT 4
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: IN
45389: NOT
45390: OR
45391: IFFALSE 45395
// exit ;
45393: GO 45478
// tmp := [ ] ;
45395: LD_ADDR_VAR 0 5
45399: PUSH
45400: EMPTY
45401: ST_TO_ADDR
// for i in units do
45402: LD_ADDR_VAR 0 4
45406: PUSH
45407: LD_VAR 0 1
45411: PUSH
45412: FOR_IN
45413: IFFALSE 45447
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45415: LD_ADDR_VAR 0 5
45419: PUSH
45420: LD_VAR 0 5
45424: PPUSH
45425: LD_VAR 0 4
45429: PPUSH
45430: LD_VAR 0 2
45434: PPUSH
45435: CALL_OW 259
45439: PPUSH
45440: CALL 46851 0 2
45444: ST_TO_ADDR
45445: GO 45412
45447: POP
45448: POP
// if not tmp then
45449: LD_VAR 0 5
45453: NOT
45454: IFFALSE 45458
// exit ;
45456: GO 45478
// result := SortListByListDesc ( units , tmp ) ;
45458: LD_ADDR_VAR 0 3
45462: PUSH
45463: LD_VAR 0 1
45467: PPUSH
45468: LD_VAR 0 5
45472: PPUSH
45473: CALL_OW 77
45477: ST_TO_ADDR
// end ;
45478: LD_VAR 0 3
45482: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45483: LD_INT 0
45485: PPUSH
45486: PPUSH
45487: PPUSH
// result := false ;
45488: LD_ADDR_VAR 0 3
45492: PUSH
45493: LD_INT 0
45495: ST_TO_ADDR
// if not building then
45496: LD_VAR 0 2
45500: NOT
45501: IFFALSE 45505
// exit ;
45503: GO 45643
// x := GetX ( building ) ;
45505: LD_ADDR_VAR 0 4
45509: PUSH
45510: LD_VAR 0 2
45514: PPUSH
45515: CALL_OW 250
45519: ST_TO_ADDR
// y := GetY ( building ) ;
45520: LD_ADDR_VAR 0 5
45524: PUSH
45525: LD_VAR 0 2
45529: PPUSH
45530: CALL_OW 251
45534: ST_TO_ADDR
// if not x or not y then
45535: LD_VAR 0 4
45539: NOT
45540: PUSH
45541: LD_VAR 0 5
45545: NOT
45546: OR
45547: IFFALSE 45551
// exit ;
45549: GO 45643
// if GetTaskList ( unit ) then
45551: LD_VAR 0 1
45555: PPUSH
45556: CALL_OW 437
45560: IFFALSE 45643
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45562: LD_STRING e
45564: PUSH
45565: LD_VAR 0 1
45569: PPUSH
45570: CALL_OW 437
45574: PUSH
45575: LD_INT 1
45577: ARRAY
45578: PUSH
45579: LD_INT 1
45581: ARRAY
45582: EQUAL
45583: PUSH
45584: LD_VAR 0 4
45588: PUSH
45589: LD_VAR 0 1
45593: PPUSH
45594: CALL_OW 437
45598: PUSH
45599: LD_INT 1
45601: ARRAY
45602: PUSH
45603: LD_INT 2
45605: ARRAY
45606: EQUAL
45607: AND
45608: PUSH
45609: LD_VAR 0 5
45613: PUSH
45614: LD_VAR 0 1
45618: PPUSH
45619: CALL_OW 437
45623: PUSH
45624: LD_INT 1
45626: ARRAY
45627: PUSH
45628: LD_INT 3
45630: ARRAY
45631: EQUAL
45632: AND
45633: IFFALSE 45643
// result := true end ;
45635: LD_ADDR_VAR 0 3
45639: PUSH
45640: LD_INT 1
45642: ST_TO_ADDR
// end ;
45643: LD_VAR 0 3
45647: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45648: LD_INT 0
45650: PPUSH
// result := false ;
45651: LD_ADDR_VAR 0 4
45655: PUSH
45656: LD_INT 0
45658: ST_TO_ADDR
// if GetTaskList ( unit ) then
45659: LD_VAR 0 1
45663: PPUSH
45664: CALL_OW 437
45668: IFFALSE 45751
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45670: LD_STRING M
45672: PUSH
45673: LD_VAR 0 1
45677: PPUSH
45678: CALL_OW 437
45682: PUSH
45683: LD_INT 1
45685: ARRAY
45686: PUSH
45687: LD_INT 1
45689: ARRAY
45690: EQUAL
45691: PUSH
45692: LD_VAR 0 2
45696: PUSH
45697: LD_VAR 0 1
45701: PPUSH
45702: CALL_OW 437
45706: PUSH
45707: LD_INT 1
45709: ARRAY
45710: PUSH
45711: LD_INT 2
45713: ARRAY
45714: EQUAL
45715: AND
45716: PUSH
45717: LD_VAR 0 3
45721: PUSH
45722: LD_VAR 0 1
45726: PPUSH
45727: CALL_OW 437
45731: PUSH
45732: LD_INT 1
45734: ARRAY
45735: PUSH
45736: LD_INT 3
45738: ARRAY
45739: EQUAL
45740: AND
45741: IFFALSE 45751
// result := true ;
45743: LD_ADDR_VAR 0 4
45747: PUSH
45748: LD_INT 1
45750: ST_TO_ADDR
// end ; end ;
45751: LD_VAR 0 4
45755: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45756: LD_INT 0
45758: PPUSH
45759: PPUSH
45760: PPUSH
45761: PPUSH
// if not unit or not area then
45762: LD_VAR 0 1
45766: NOT
45767: PUSH
45768: LD_VAR 0 2
45772: NOT
45773: OR
45774: IFFALSE 45778
// exit ;
45776: GO 45954
// tmp := AreaToList ( area , i ) ;
45778: LD_ADDR_VAR 0 6
45782: PUSH
45783: LD_VAR 0 2
45787: PPUSH
45788: LD_VAR 0 5
45792: PPUSH
45793: CALL_OW 517
45797: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45798: LD_ADDR_VAR 0 5
45802: PUSH
45803: DOUBLE
45804: LD_INT 1
45806: DEC
45807: ST_TO_ADDR
45808: LD_VAR 0 6
45812: PUSH
45813: LD_INT 1
45815: ARRAY
45816: PUSH
45817: FOR_TO
45818: IFFALSE 45952
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45820: LD_ADDR_VAR 0 7
45824: PUSH
45825: LD_VAR 0 6
45829: PUSH
45830: LD_INT 1
45832: ARRAY
45833: PUSH
45834: LD_VAR 0 5
45838: ARRAY
45839: PUSH
45840: LD_VAR 0 6
45844: PUSH
45845: LD_INT 2
45847: ARRAY
45848: PUSH
45849: LD_VAR 0 5
45853: ARRAY
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45859: LD_INT 92
45861: PUSH
45862: LD_VAR 0 7
45866: PUSH
45867: LD_INT 1
45869: ARRAY
45870: PUSH
45871: LD_VAR 0 7
45875: PUSH
45876: LD_INT 2
45878: ARRAY
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: PPUSH
45889: CALL_OW 69
45893: PUSH
45894: LD_INT 0
45896: EQUAL
45897: IFFALSE 45950
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45899: LD_VAR 0 1
45903: PPUSH
45904: LD_VAR 0 7
45908: PUSH
45909: LD_INT 1
45911: ARRAY
45912: PPUSH
45913: LD_VAR 0 7
45917: PUSH
45918: LD_INT 2
45920: ARRAY
45921: PPUSH
45922: LD_VAR 0 3
45926: PPUSH
45927: CALL_OW 48
// result := IsPlaced ( unit ) ;
45931: LD_ADDR_VAR 0 4
45935: PUSH
45936: LD_VAR 0 1
45940: PPUSH
45941: CALL_OW 305
45945: ST_TO_ADDR
// exit ;
45946: POP
45947: POP
45948: GO 45954
// end ; end ;
45950: GO 45817
45952: POP
45953: POP
// end ;
45954: LD_VAR 0 4
45958: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45959: LD_INT 0
45961: PPUSH
45962: PPUSH
45963: PPUSH
// if not side or side > 8 then
45964: LD_VAR 0 1
45968: NOT
45969: PUSH
45970: LD_VAR 0 1
45974: PUSH
45975: LD_INT 8
45977: GREATER
45978: OR
45979: IFFALSE 45983
// exit ;
45981: GO 46170
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45983: LD_ADDR_VAR 0 4
45987: PUSH
45988: LD_INT 22
45990: PUSH
45991: LD_VAR 0 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 21
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PPUSH
46014: CALL_OW 69
46018: ST_TO_ADDR
// if not tmp then
46019: LD_VAR 0 4
46023: NOT
46024: IFFALSE 46028
// exit ;
46026: GO 46170
// enable_addtolog := true ;
46028: LD_ADDR_OWVAR 81
46032: PUSH
46033: LD_INT 1
46035: ST_TO_ADDR
// AddToLog ( [ ) ;
46036: LD_STRING [
46038: PPUSH
46039: CALL_OW 561
// for i in tmp do
46043: LD_ADDR_VAR 0 3
46047: PUSH
46048: LD_VAR 0 4
46052: PUSH
46053: FOR_IN
46054: IFFALSE 46161
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46056: LD_STRING [
46058: PUSH
46059: LD_VAR 0 3
46063: PPUSH
46064: CALL_OW 266
46068: STR
46069: PUSH
46070: LD_STRING , 
46072: STR
46073: PUSH
46074: LD_VAR 0 3
46078: PPUSH
46079: CALL_OW 250
46083: STR
46084: PUSH
46085: LD_STRING , 
46087: STR
46088: PUSH
46089: LD_VAR 0 3
46093: PPUSH
46094: CALL_OW 251
46098: STR
46099: PUSH
46100: LD_STRING , 
46102: STR
46103: PUSH
46104: LD_VAR 0 3
46108: PPUSH
46109: CALL_OW 254
46113: STR
46114: PUSH
46115: LD_STRING , 
46117: STR
46118: PUSH
46119: LD_VAR 0 3
46123: PPUSH
46124: LD_INT 1
46126: PPUSH
46127: CALL_OW 268
46131: STR
46132: PUSH
46133: LD_STRING , 
46135: STR
46136: PUSH
46137: LD_VAR 0 3
46141: PPUSH
46142: LD_INT 2
46144: PPUSH
46145: CALL_OW 268
46149: STR
46150: PUSH
46151: LD_STRING ],
46153: STR
46154: PPUSH
46155: CALL_OW 561
// end ;
46159: GO 46053
46161: POP
46162: POP
// AddToLog ( ]; ) ;
46163: LD_STRING ];
46165: PPUSH
46166: CALL_OW 561
// end ;
46170: LD_VAR 0 2
46174: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46175: LD_INT 0
46177: PPUSH
46178: PPUSH
46179: PPUSH
46180: PPUSH
46181: PPUSH
// if not area or not rate or not max then
46182: LD_VAR 0 1
46186: NOT
46187: PUSH
46188: LD_VAR 0 2
46192: NOT
46193: OR
46194: PUSH
46195: LD_VAR 0 4
46199: NOT
46200: OR
46201: IFFALSE 46205
// exit ;
46203: GO 46394
// while 1 do
46205: LD_INT 1
46207: IFFALSE 46394
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46209: LD_ADDR_VAR 0 9
46213: PUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: LD_INT 1
46221: PPUSH
46222: CALL_OW 287
46226: PUSH
46227: LD_INT 10
46229: MUL
46230: ST_TO_ADDR
// r := rate / 10 ;
46231: LD_ADDR_VAR 0 7
46235: PUSH
46236: LD_VAR 0 2
46240: PUSH
46241: LD_INT 10
46243: DIVREAL
46244: ST_TO_ADDR
// time := 1 1$00 ;
46245: LD_ADDR_VAR 0 8
46249: PUSH
46250: LD_INT 2100
46252: ST_TO_ADDR
// if amount < min then
46253: LD_VAR 0 9
46257: PUSH
46258: LD_VAR 0 3
46262: LESS
46263: IFFALSE 46281
// r := r * 2 else
46265: LD_ADDR_VAR 0 7
46269: PUSH
46270: LD_VAR 0 7
46274: PUSH
46275: LD_INT 2
46277: MUL
46278: ST_TO_ADDR
46279: GO 46307
// if amount > max then
46281: LD_VAR 0 9
46285: PUSH
46286: LD_VAR 0 4
46290: GREATER
46291: IFFALSE 46307
// r := r / 2 ;
46293: LD_ADDR_VAR 0 7
46297: PUSH
46298: LD_VAR 0 7
46302: PUSH
46303: LD_INT 2
46305: DIVREAL
46306: ST_TO_ADDR
// time := time / r ;
46307: LD_ADDR_VAR 0 8
46311: PUSH
46312: LD_VAR 0 8
46316: PUSH
46317: LD_VAR 0 7
46321: DIVREAL
46322: ST_TO_ADDR
// if time < 0 then
46323: LD_VAR 0 8
46327: PUSH
46328: LD_INT 0
46330: LESS
46331: IFFALSE 46348
// time := time * - 1 ;
46333: LD_ADDR_VAR 0 8
46337: PUSH
46338: LD_VAR 0 8
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: MUL
46347: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46348: LD_VAR 0 8
46352: PUSH
46353: LD_INT 35
46355: PPUSH
46356: LD_INT 875
46358: PPUSH
46359: CALL_OW 12
46363: PLUS
46364: PPUSH
46365: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46369: LD_INT 1
46371: PPUSH
46372: LD_INT 5
46374: PPUSH
46375: CALL_OW 12
46379: PPUSH
46380: LD_VAR 0 1
46384: PPUSH
46385: LD_INT 1
46387: PPUSH
46388: CALL_OW 55
// end ;
46392: GO 46205
// end ;
46394: LD_VAR 0 5
46398: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46399: LD_INT 0
46401: PPUSH
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
46408: PPUSH
// if not turrets or not factories then
46409: LD_VAR 0 1
46413: NOT
46414: PUSH
46415: LD_VAR 0 2
46419: NOT
46420: OR
46421: IFFALSE 46425
// exit ;
46423: GO 46732
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46425: LD_ADDR_VAR 0 10
46429: PUSH
46430: LD_INT 5
46432: PUSH
46433: LD_INT 6
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: LD_INT 4
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: LD_INT 5
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 24
46467: PUSH
46468: LD_INT 25
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 23
46477: PUSH
46478: LD_INT 27
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 42
46491: PUSH
46492: LD_INT 43
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 44
46501: PUSH
46502: LD_INT 46
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 45
46511: PUSH
46512: LD_INT 47
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: ST_TO_ADDR
// result := [ ] ;
46529: LD_ADDR_VAR 0 3
46533: PUSH
46534: EMPTY
46535: ST_TO_ADDR
// for i in turrets do
46536: LD_ADDR_VAR 0 4
46540: PUSH
46541: LD_VAR 0 1
46545: PUSH
46546: FOR_IN
46547: IFFALSE 46730
// begin nat := GetNation ( i ) ;
46549: LD_ADDR_VAR 0 7
46553: PUSH
46554: LD_VAR 0 4
46558: PPUSH
46559: CALL_OW 248
46563: ST_TO_ADDR
// weapon := 0 ;
46564: LD_ADDR_VAR 0 8
46568: PUSH
46569: LD_INT 0
46571: ST_TO_ADDR
// if not nat then
46572: LD_VAR 0 7
46576: NOT
46577: IFFALSE 46581
// continue ;
46579: GO 46546
// for j in list [ nat ] do
46581: LD_ADDR_VAR 0 5
46585: PUSH
46586: LD_VAR 0 10
46590: PUSH
46591: LD_VAR 0 7
46595: ARRAY
46596: PUSH
46597: FOR_IN
46598: IFFALSE 46639
// if GetBWeapon ( i ) = j [ 1 ] then
46600: LD_VAR 0 4
46604: PPUSH
46605: CALL_OW 269
46609: PUSH
46610: LD_VAR 0 5
46614: PUSH
46615: LD_INT 1
46617: ARRAY
46618: EQUAL
46619: IFFALSE 46637
// begin weapon := j [ 2 ] ;
46621: LD_ADDR_VAR 0 8
46625: PUSH
46626: LD_VAR 0 5
46630: PUSH
46631: LD_INT 2
46633: ARRAY
46634: ST_TO_ADDR
// break ;
46635: GO 46639
// end ;
46637: GO 46597
46639: POP
46640: POP
// if not weapon then
46641: LD_VAR 0 8
46645: NOT
46646: IFFALSE 46650
// continue ;
46648: GO 46546
// for k in factories do
46650: LD_ADDR_VAR 0 6
46654: PUSH
46655: LD_VAR 0 2
46659: PUSH
46660: FOR_IN
46661: IFFALSE 46726
// begin weapons := AvailableWeaponList ( k ) ;
46663: LD_ADDR_VAR 0 9
46667: PUSH
46668: LD_VAR 0 6
46672: PPUSH
46673: CALL_OW 478
46677: ST_TO_ADDR
// if not weapons then
46678: LD_VAR 0 9
46682: NOT
46683: IFFALSE 46687
// continue ;
46685: GO 46660
// if weapon in weapons then
46687: LD_VAR 0 8
46691: PUSH
46692: LD_VAR 0 9
46696: IN
46697: IFFALSE 46724
// begin result := [ i , weapon ] ;
46699: LD_ADDR_VAR 0 3
46703: PUSH
46704: LD_VAR 0 4
46708: PUSH
46709: LD_VAR 0 8
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// exit ;
46718: POP
46719: POP
46720: POP
46721: POP
46722: GO 46732
// end ; end ;
46724: GO 46660
46726: POP
46727: POP
// end ;
46728: GO 46546
46730: POP
46731: POP
// end ;
46732: LD_VAR 0 3
46736: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46737: LD_INT 0
46739: PPUSH
// if not side or side > 8 then
46740: LD_VAR 0 3
46744: NOT
46745: PUSH
46746: LD_VAR 0 3
46750: PUSH
46751: LD_INT 8
46753: GREATER
46754: OR
46755: IFFALSE 46759
// exit ;
46757: GO 46818
// if not range then
46759: LD_VAR 0 4
46763: NOT
46764: IFFALSE 46775
// range := - 12 ;
46766: LD_ADDR_VAR 0 4
46770: PUSH
46771: LD_INT 12
46773: NEG
46774: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46775: LD_VAR 0 1
46779: PPUSH
46780: LD_VAR 0 2
46784: PPUSH
46785: LD_VAR 0 3
46789: PPUSH
46790: LD_VAR 0 4
46794: PPUSH
46795: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46799: LD_VAR 0 1
46803: PPUSH
46804: LD_VAR 0 2
46808: PPUSH
46809: LD_VAR 0 3
46813: PPUSH
46814: CALL_OW 331
// end ;
46818: LD_VAR 0 5
46822: RET
// export function Video ( mode ) ; begin
46823: LD_INT 0
46825: PPUSH
// ingame_video = mode ;
46826: LD_ADDR_OWVAR 52
46830: PUSH
46831: LD_VAR 0 1
46835: ST_TO_ADDR
// interface_hidden = mode ;
46836: LD_ADDR_OWVAR 54
46840: PUSH
46841: LD_VAR 0 1
46845: ST_TO_ADDR
// end ;
46846: LD_VAR 0 2
46850: RET
// export function Join ( array , element ) ; begin
46851: LD_INT 0
46853: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46854: LD_ADDR_VAR 0 3
46858: PUSH
46859: LD_VAR 0 1
46863: PPUSH
46864: LD_VAR 0 1
46868: PUSH
46869: LD_INT 1
46871: PLUS
46872: PPUSH
46873: LD_VAR 0 2
46877: PPUSH
46878: CALL_OW 1
46882: ST_TO_ADDR
// end ;
46883: LD_VAR 0 3
46887: RET
// export function JoinUnion ( array , element ) ; begin
46888: LD_INT 0
46890: PPUSH
// result := array union element ;
46891: LD_ADDR_VAR 0 3
46895: PUSH
46896: LD_VAR 0 1
46900: PUSH
46901: LD_VAR 0 2
46905: UNION
46906: ST_TO_ADDR
// end ;
46907: LD_VAR 0 3
46911: RET
// export function GetBehemoths ( side ) ; begin
46912: LD_INT 0
46914: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46915: LD_ADDR_VAR 0 2
46919: PUSH
46920: LD_INT 22
46922: PUSH
46923: LD_VAR 0 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 31
46934: PUSH
46935: LD_INT 25
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PPUSH
46946: CALL_OW 69
46950: ST_TO_ADDR
// end ;
46951: LD_VAR 0 2
46955: RET
// export function Shuffle ( array ) ; var i , index ; begin
46956: LD_INT 0
46958: PPUSH
46959: PPUSH
46960: PPUSH
// result := [ ] ;
46961: LD_ADDR_VAR 0 2
46965: PUSH
46966: EMPTY
46967: ST_TO_ADDR
// if not array then
46968: LD_VAR 0 1
46972: NOT
46973: IFFALSE 46977
// exit ;
46975: GO 47076
// Randomize ;
46977: CALL_OW 10
// for i = array downto 1 do
46981: LD_ADDR_VAR 0 3
46985: PUSH
46986: DOUBLE
46987: LD_VAR 0 1
46991: INC
46992: ST_TO_ADDR
46993: LD_INT 1
46995: PUSH
46996: FOR_DOWNTO
46997: IFFALSE 47074
// begin index := rand ( 1 , array ) ;
46999: LD_ADDR_VAR 0 4
47003: PUSH
47004: LD_INT 1
47006: PPUSH
47007: LD_VAR 0 1
47011: PPUSH
47012: CALL_OW 12
47016: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47017: LD_ADDR_VAR 0 2
47021: PUSH
47022: LD_VAR 0 2
47026: PPUSH
47027: LD_VAR 0 2
47031: PUSH
47032: LD_INT 1
47034: PLUS
47035: PPUSH
47036: LD_VAR 0 1
47040: PUSH
47041: LD_VAR 0 4
47045: ARRAY
47046: PPUSH
47047: CALL_OW 2
47051: ST_TO_ADDR
// array := Delete ( array , index ) ;
47052: LD_ADDR_VAR 0 1
47056: PUSH
47057: LD_VAR 0 1
47061: PPUSH
47062: LD_VAR 0 4
47066: PPUSH
47067: CALL_OW 3
47071: ST_TO_ADDR
// end ;
47072: GO 46996
47074: POP
47075: POP
// end ;
47076: LD_VAR 0 2
47080: RET
// export function GetBaseMaterials ( base ) ; begin
47081: LD_INT 0
47083: PPUSH
// result := [ 0 , 0 , 0 ] ;
47084: LD_ADDR_VAR 0 2
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// if not base then
47103: LD_VAR 0 1
47107: NOT
47108: IFFALSE 47112
// exit ;
47110: GO 47161
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47112: LD_ADDR_VAR 0 2
47116: PUSH
47117: LD_VAR 0 1
47121: PPUSH
47122: LD_INT 1
47124: PPUSH
47125: CALL_OW 275
47129: PUSH
47130: LD_VAR 0 1
47134: PPUSH
47135: LD_INT 2
47137: PPUSH
47138: CALL_OW 275
47142: PUSH
47143: LD_VAR 0 1
47147: PPUSH
47148: LD_INT 3
47150: PPUSH
47151: CALL_OW 275
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// end ;
47161: LD_VAR 0 2
47165: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47166: LD_INT 0
47168: PPUSH
47169: PPUSH
// result := array ;
47170: LD_ADDR_VAR 0 3
47174: PUSH
47175: LD_VAR 0 1
47179: ST_TO_ADDR
// if size >= result then
47180: LD_VAR 0 2
47184: PUSH
47185: LD_VAR 0 3
47189: GREATEREQUAL
47190: IFFALSE 47194
// exit ;
47192: GO 47244
// if size then
47194: LD_VAR 0 2
47198: IFFALSE 47244
// for i := array downto size do
47200: LD_ADDR_VAR 0 4
47204: PUSH
47205: DOUBLE
47206: LD_VAR 0 1
47210: INC
47211: ST_TO_ADDR
47212: LD_VAR 0 2
47216: PUSH
47217: FOR_DOWNTO
47218: IFFALSE 47242
// result := Delete ( result , result ) ;
47220: LD_ADDR_VAR 0 3
47224: PUSH
47225: LD_VAR 0 3
47229: PPUSH
47230: LD_VAR 0 3
47234: PPUSH
47235: CALL_OW 3
47239: ST_TO_ADDR
47240: GO 47217
47242: POP
47243: POP
// end ;
47244: LD_VAR 0 3
47248: RET
// export function ComExit ( unit ) ; var tmp ; begin
47249: LD_INT 0
47251: PPUSH
47252: PPUSH
// if not IsInUnit ( unit ) then
47253: LD_VAR 0 1
47257: PPUSH
47258: CALL_OW 310
47262: NOT
47263: IFFALSE 47267
// exit ;
47265: GO 47327
// tmp := IsInUnit ( unit ) ;
47267: LD_ADDR_VAR 0 3
47271: PUSH
47272: LD_VAR 0 1
47276: PPUSH
47277: CALL_OW 310
47281: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47282: LD_VAR 0 3
47286: PPUSH
47287: CALL_OW 247
47291: PUSH
47292: LD_INT 2
47294: EQUAL
47295: IFFALSE 47308
// ComExitVehicle ( unit ) else
47297: LD_VAR 0 1
47301: PPUSH
47302: CALL_OW 121
47306: GO 47317
// ComExitBuilding ( unit ) ;
47308: LD_VAR 0 1
47312: PPUSH
47313: CALL_OW 122
// result := tmp ;
47317: LD_ADDR_VAR 0 2
47321: PUSH
47322: LD_VAR 0 3
47326: ST_TO_ADDR
// end ;
47327: LD_VAR 0 2
47331: RET
// export function ComExitAll ( units ) ; var i ; begin
47332: LD_INT 0
47334: PPUSH
47335: PPUSH
// if not units then
47336: LD_VAR 0 1
47340: NOT
47341: IFFALSE 47345
// exit ;
47343: GO 47371
// for i in units do
47345: LD_ADDR_VAR 0 3
47349: PUSH
47350: LD_VAR 0 1
47354: PUSH
47355: FOR_IN
47356: IFFALSE 47369
// ComExit ( i ) ;
47358: LD_VAR 0 3
47362: PPUSH
47363: CALL 47249 0 1
47367: GO 47355
47369: POP
47370: POP
// end ;
47371: LD_VAR 0 2
47375: RET
// export function ResetHc ; begin
47376: LD_INT 0
47378: PPUSH
// InitHc ;
47379: CALL_OW 19
// hc_importance := 0 ;
47383: LD_ADDR_OWVAR 32
47387: PUSH
47388: LD_INT 0
47390: ST_TO_ADDR
// end ;
47391: LD_VAR 0 1
47395: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47396: LD_INT 0
47398: PPUSH
47399: PPUSH
47400: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47401: LD_ADDR_VAR 0 6
47405: PUSH
47406: LD_VAR 0 1
47410: PUSH
47411: LD_VAR 0 3
47415: PLUS
47416: PUSH
47417: LD_INT 2
47419: DIV
47420: ST_TO_ADDR
// if _x < 0 then
47421: LD_VAR 0 6
47425: PUSH
47426: LD_INT 0
47428: LESS
47429: IFFALSE 47446
// _x := _x * - 1 ;
47431: LD_ADDR_VAR 0 6
47435: PUSH
47436: LD_VAR 0 6
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: MUL
47445: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47446: LD_ADDR_VAR 0 7
47450: PUSH
47451: LD_VAR 0 2
47455: PUSH
47456: LD_VAR 0 4
47460: PLUS
47461: PUSH
47462: LD_INT 2
47464: DIV
47465: ST_TO_ADDR
// if _y < 0 then
47466: LD_VAR 0 7
47470: PUSH
47471: LD_INT 0
47473: LESS
47474: IFFALSE 47491
// _y := _y * - 1 ;
47476: LD_ADDR_VAR 0 7
47480: PUSH
47481: LD_VAR 0 7
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: MUL
47490: ST_TO_ADDR
// result := [ _x , _y ] ;
47491: LD_ADDR_VAR 0 5
47495: PUSH
47496: LD_VAR 0 6
47500: PUSH
47501: LD_VAR 0 7
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// end ;
47510: LD_VAR 0 5
47514: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47515: LD_INT 0
47517: PPUSH
47518: PPUSH
47519: PPUSH
47520: PPUSH
// task := GetTaskList ( unit ) ;
47521: LD_ADDR_VAR 0 7
47525: PUSH
47526: LD_VAR 0 1
47530: PPUSH
47531: CALL_OW 437
47535: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47536: LD_VAR 0 7
47540: NOT
47541: PUSH
47542: LD_VAR 0 1
47546: PPUSH
47547: LD_VAR 0 2
47551: PPUSH
47552: CALL_OW 308
47556: NOT
47557: AND
47558: IFFALSE 47562
// exit ;
47560: GO 47680
// if IsInArea ( unit , area ) then
47562: LD_VAR 0 1
47566: PPUSH
47567: LD_VAR 0 2
47571: PPUSH
47572: CALL_OW 308
47576: IFFALSE 47594
// begin ComMoveToArea ( unit , goAway ) ;
47578: LD_VAR 0 1
47582: PPUSH
47583: LD_VAR 0 3
47587: PPUSH
47588: CALL_OW 113
// exit ;
47592: GO 47680
// end ; if task [ 1 ] [ 1 ] <> M then
47594: LD_VAR 0 7
47598: PUSH
47599: LD_INT 1
47601: ARRAY
47602: PUSH
47603: LD_INT 1
47605: ARRAY
47606: PUSH
47607: LD_STRING M
47609: NONEQUAL
47610: IFFALSE 47614
// exit ;
47612: GO 47680
// x := task [ 1 ] [ 2 ] ;
47614: LD_ADDR_VAR 0 5
47618: PUSH
47619: LD_VAR 0 7
47623: PUSH
47624: LD_INT 1
47626: ARRAY
47627: PUSH
47628: LD_INT 2
47630: ARRAY
47631: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47632: LD_ADDR_VAR 0 6
47636: PUSH
47637: LD_VAR 0 7
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: PUSH
47646: LD_INT 3
47648: ARRAY
47649: ST_TO_ADDR
// if InArea ( x , y , area ) then
47650: LD_VAR 0 5
47654: PPUSH
47655: LD_VAR 0 6
47659: PPUSH
47660: LD_VAR 0 2
47664: PPUSH
47665: CALL_OW 309
47669: IFFALSE 47680
// ComStop ( unit ) ;
47671: LD_VAR 0 1
47675: PPUSH
47676: CALL_OW 141
// end ;
47680: LD_VAR 0 4
47684: RET
// export function Abs ( value ) ; begin
47685: LD_INT 0
47687: PPUSH
// result := value ;
47688: LD_ADDR_VAR 0 2
47692: PUSH
47693: LD_VAR 0 1
47697: ST_TO_ADDR
// if value < 0 then
47698: LD_VAR 0 1
47702: PUSH
47703: LD_INT 0
47705: LESS
47706: IFFALSE 47723
// result := value * - 1 ;
47708: LD_ADDR_VAR 0 2
47712: PUSH
47713: LD_VAR 0 1
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: MUL
47722: ST_TO_ADDR
// end ;
47723: LD_VAR 0 2
47727: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47728: LD_INT 0
47730: PPUSH
47731: PPUSH
47732: PPUSH
47733: PPUSH
47734: PPUSH
47735: PPUSH
47736: PPUSH
47737: PPUSH
// if not unit or not building then
47738: LD_VAR 0 1
47742: NOT
47743: PUSH
47744: LD_VAR 0 2
47748: NOT
47749: OR
47750: IFFALSE 47754
// exit ;
47752: GO 47980
// x := GetX ( building ) ;
47754: LD_ADDR_VAR 0 4
47758: PUSH
47759: LD_VAR 0 2
47763: PPUSH
47764: CALL_OW 250
47768: ST_TO_ADDR
// y := GetY ( building ) ;
47769: LD_ADDR_VAR 0 6
47773: PUSH
47774: LD_VAR 0 2
47778: PPUSH
47779: CALL_OW 251
47783: ST_TO_ADDR
// d := GetDir ( building ) ;
47784: LD_ADDR_VAR 0 8
47788: PUSH
47789: LD_VAR 0 2
47793: PPUSH
47794: CALL_OW 254
47798: ST_TO_ADDR
// r := 4 ;
47799: LD_ADDR_VAR 0 9
47803: PUSH
47804: LD_INT 4
47806: ST_TO_ADDR
// for i := 1 to 5 do
47807: LD_ADDR_VAR 0 10
47811: PUSH
47812: DOUBLE
47813: LD_INT 1
47815: DEC
47816: ST_TO_ADDR
47817: LD_INT 5
47819: PUSH
47820: FOR_TO
47821: IFFALSE 47978
// begin _x := ShiftX ( x , d , r + i ) ;
47823: LD_ADDR_VAR 0 5
47827: PUSH
47828: LD_VAR 0 4
47832: PPUSH
47833: LD_VAR 0 8
47837: PPUSH
47838: LD_VAR 0 9
47842: PUSH
47843: LD_VAR 0 10
47847: PLUS
47848: PPUSH
47849: CALL_OW 272
47853: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47854: LD_ADDR_VAR 0 7
47858: PUSH
47859: LD_VAR 0 6
47863: PPUSH
47864: LD_VAR 0 8
47868: PPUSH
47869: LD_VAR 0 9
47873: PUSH
47874: LD_VAR 0 10
47878: PLUS
47879: PPUSH
47880: CALL_OW 273
47884: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47885: LD_VAR 0 5
47889: PPUSH
47890: LD_VAR 0 7
47894: PPUSH
47895: CALL_OW 488
47899: PUSH
47900: LD_VAR 0 5
47904: PPUSH
47905: LD_VAR 0 7
47909: PPUSH
47910: CALL_OW 428
47914: PPUSH
47915: CALL_OW 247
47919: PUSH
47920: LD_INT 3
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: IN
47930: NOT
47931: AND
47932: IFFALSE 47976
// begin ComMoveXY ( unit , _x , _y ) ;
47934: LD_VAR 0 1
47938: PPUSH
47939: LD_VAR 0 5
47943: PPUSH
47944: LD_VAR 0 7
47948: PPUSH
47949: CALL_OW 111
// result := [ _x , _y ] ;
47953: LD_ADDR_VAR 0 3
47957: PUSH
47958: LD_VAR 0 5
47962: PUSH
47963: LD_VAR 0 7
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// exit ;
47972: POP
47973: POP
47974: GO 47980
// end ; end ;
47976: GO 47820
47978: POP
47979: POP
// end ;
47980: LD_VAR 0 3
47984: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47985: LD_INT 0
47987: PPUSH
47988: PPUSH
47989: PPUSH
// result := 0 ;
47990: LD_ADDR_VAR 0 3
47994: PUSH
47995: LD_INT 0
47997: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47998: LD_VAR 0 1
48002: PUSH
48003: LD_INT 0
48005: LESS
48006: PUSH
48007: LD_VAR 0 1
48011: PUSH
48012: LD_INT 8
48014: GREATER
48015: OR
48016: PUSH
48017: LD_VAR 0 2
48021: PUSH
48022: LD_INT 0
48024: LESS
48025: OR
48026: PUSH
48027: LD_VAR 0 2
48031: PUSH
48032: LD_INT 8
48034: GREATER
48035: OR
48036: IFFALSE 48040
// exit ;
48038: GO 48115
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: LD_INT 22
48047: PUSH
48048: LD_VAR 0 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PPUSH
48057: CALL_OW 69
48061: PUSH
48062: FOR_IN
48063: IFFALSE 48113
// begin un := UnitShoot ( i ) ;
48065: LD_ADDR_VAR 0 5
48069: PUSH
48070: LD_VAR 0 4
48074: PPUSH
48075: CALL_OW 504
48079: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48080: LD_VAR 0 5
48084: PPUSH
48085: CALL_OW 255
48089: PUSH
48090: LD_VAR 0 1
48094: EQUAL
48095: IFFALSE 48111
// begin result := un ;
48097: LD_ADDR_VAR 0 3
48101: PUSH
48102: LD_VAR 0 5
48106: ST_TO_ADDR
// exit ;
48107: POP
48108: POP
48109: GO 48115
// end ; end ;
48111: GO 48062
48113: POP
48114: POP
// end ;
48115: LD_VAR 0 3
48119: RET
// export function GetCargoBay ( units ) ; begin
48120: LD_INT 0
48122: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48123: LD_ADDR_VAR 0 2
48127: PUSH
48128: LD_VAR 0 1
48132: PPUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 34
48138: PUSH
48139: LD_INT 12
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 34
48148: PUSH
48149: LD_INT 51
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 34
48158: PUSH
48159: LD_INT 32
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 34
48168: PUSH
48169: LD_INT 89
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: PPUSH
48183: CALL_OW 72
48187: ST_TO_ADDR
// end ;
48188: LD_VAR 0 2
48192: RET
// export function Negate ( value ) ; begin
48193: LD_INT 0
48195: PPUSH
// result := not value ;
48196: LD_ADDR_VAR 0 2
48200: PUSH
48201: LD_VAR 0 1
48205: NOT
48206: ST_TO_ADDR
// end ;
48207: LD_VAR 0 2
48211: RET
// export function Inc ( value ) ; begin
48212: LD_INT 0
48214: PPUSH
// result := value + 1 ;
48215: LD_ADDR_VAR 0 2
48219: PUSH
48220: LD_VAR 0 1
48224: PUSH
48225: LD_INT 1
48227: PLUS
48228: ST_TO_ADDR
// end ;
48229: LD_VAR 0 2
48233: RET
// export function Dec ( value ) ; begin
48234: LD_INT 0
48236: PPUSH
// result := value - 1 ;
48237: LD_ADDR_VAR 0 2
48241: PUSH
48242: LD_VAR 0 1
48246: PUSH
48247: LD_INT 1
48249: MINUS
48250: ST_TO_ADDR
// end ;
48251: LD_VAR 0 2
48255: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48256: LD_INT 0
48258: PPUSH
48259: PPUSH
48260: PPUSH
48261: PPUSH
48262: PPUSH
48263: PPUSH
48264: PPUSH
48265: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48266: LD_VAR 0 1
48270: PPUSH
48271: LD_VAR 0 2
48275: PPUSH
48276: CALL_OW 488
48280: NOT
48281: PUSH
48282: LD_VAR 0 3
48286: PPUSH
48287: LD_VAR 0 4
48291: PPUSH
48292: CALL_OW 488
48296: NOT
48297: OR
48298: IFFALSE 48311
// begin result := - 1 ;
48300: LD_ADDR_VAR 0 5
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: ST_TO_ADDR
// exit ;
48309: GO 48546
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48311: LD_ADDR_VAR 0 12
48315: PUSH
48316: LD_VAR 0 1
48320: PPUSH
48321: LD_VAR 0 2
48325: PPUSH
48326: LD_VAR 0 3
48330: PPUSH
48331: LD_VAR 0 4
48335: PPUSH
48336: CALL 47396 0 4
48340: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48341: LD_ADDR_VAR 0 11
48345: PUSH
48346: LD_VAR 0 1
48350: PPUSH
48351: LD_VAR 0 2
48355: PPUSH
48356: LD_VAR 0 12
48360: PUSH
48361: LD_INT 1
48363: ARRAY
48364: PPUSH
48365: LD_VAR 0 12
48369: PUSH
48370: LD_INT 2
48372: ARRAY
48373: PPUSH
48374: CALL_OW 298
48378: ST_TO_ADDR
// distance := 9999 ;
48379: LD_ADDR_VAR 0 10
48383: PUSH
48384: LD_INT 9999
48386: ST_TO_ADDR
// for i := 0 to 5 do
48387: LD_ADDR_VAR 0 6
48391: PUSH
48392: DOUBLE
48393: LD_INT 0
48395: DEC
48396: ST_TO_ADDR
48397: LD_INT 5
48399: PUSH
48400: FOR_TO
48401: IFFALSE 48544
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48403: LD_ADDR_VAR 0 7
48407: PUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: LD_VAR 0 6
48417: PPUSH
48418: LD_VAR 0 11
48422: PPUSH
48423: CALL_OW 272
48427: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48428: LD_ADDR_VAR 0 8
48432: PUSH
48433: LD_VAR 0 2
48437: PPUSH
48438: LD_VAR 0 6
48442: PPUSH
48443: LD_VAR 0 11
48447: PPUSH
48448: CALL_OW 273
48452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48453: LD_VAR 0 7
48457: PPUSH
48458: LD_VAR 0 8
48462: PPUSH
48463: CALL_OW 488
48467: NOT
48468: IFFALSE 48472
// continue ;
48470: GO 48400
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48472: LD_ADDR_VAR 0 9
48476: PUSH
48477: LD_VAR 0 12
48481: PUSH
48482: LD_INT 1
48484: ARRAY
48485: PPUSH
48486: LD_VAR 0 12
48490: PUSH
48491: LD_INT 2
48493: ARRAY
48494: PPUSH
48495: LD_VAR 0 7
48499: PPUSH
48500: LD_VAR 0 8
48504: PPUSH
48505: CALL_OW 298
48509: ST_TO_ADDR
// if tmp < distance then
48510: LD_VAR 0 9
48514: PUSH
48515: LD_VAR 0 10
48519: LESS
48520: IFFALSE 48542
// begin result := i ;
48522: LD_ADDR_VAR 0 5
48526: PUSH
48527: LD_VAR 0 6
48531: ST_TO_ADDR
// distance := tmp ;
48532: LD_ADDR_VAR 0 10
48536: PUSH
48537: LD_VAR 0 9
48541: ST_TO_ADDR
// end ; end ;
48542: GO 48400
48544: POP
48545: POP
// end ;
48546: LD_VAR 0 5
48550: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48551: LD_INT 0
48553: PPUSH
48554: PPUSH
// if not driver or not IsInUnit ( driver ) then
48555: LD_VAR 0 1
48559: NOT
48560: PUSH
48561: LD_VAR 0 1
48565: PPUSH
48566: CALL_OW 310
48570: NOT
48571: OR
48572: IFFALSE 48576
// exit ;
48574: GO 48666
// vehicle := IsInUnit ( driver ) ;
48576: LD_ADDR_VAR 0 3
48580: PUSH
48581: LD_VAR 0 1
48585: PPUSH
48586: CALL_OW 310
48590: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48591: LD_VAR 0 1
48595: PPUSH
48596: LD_STRING \
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: PUSH
48626: LD_STRING E
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_VAR 0 3
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PPUSH
48662: CALL_OW 446
// end ;
48666: LD_VAR 0 2
48670: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48671: LD_INT 0
48673: PPUSH
48674: PPUSH
// if not driver or not IsInUnit ( driver ) then
48675: LD_VAR 0 1
48679: NOT
48680: PUSH
48681: LD_VAR 0 1
48685: PPUSH
48686: CALL_OW 310
48690: NOT
48691: OR
48692: IFFALSE 48696
// exit ;
48694: GO 48786
// vehicle := IsInUnit ( driver ) ;
48696: LD_ADDR_VAR 0 3
48700: PUSH
48701: LD_VAR 0 1
48705: PPUSH
48706: CALL_OW 310
48710: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48711: LD_VAR 0 1
48715: PPUSH
48716: LD_STRING \
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: PUSH
48746: LD_STRING E
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_VAR 0 3
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PPUSH
48782: CALL_OW 447
// end ;
48786: LD_VAR 0 2
48790: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48791: LD_INT 0
48793: PPUSH
48794: PPUSH
48795: PPUSH
// tmp := [ ] ;
48796: LD_ADDR_VAR 0 5
48800: PUSH
48801: EMPTY
48802: ST_TO_ADDR
// for i in units do
48803: LD_ADDR_VAR 0 4
48807: PUSH
48808: LD_VAR 0 1
48812: PUSH
48813: FOR_IN
48814: IFFALSE 48852
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48816: LD_ADDR_VAR 0 5
48820: PUSH
48821: LD_VAR 0 5
48825: PPUSH
48826: LD_VAR 0 5
48830: PUSH
48831: LD_INT 1
48833: PLUS
48834: PPUSH
48835: LD_VAR 0 4
48839: PPUSH
48840: CALL_OW 256
48844: PPUSH
48845: CALL_OW 2
48849: ST_TO_ADDR
48850: GO 48813
48852: POP
48853: POP
// if not tmp then
48854: LD_VAR 0 5
48858: NOT
48859: IFFALSE 48863
// exit ;
48861: GO 48911
// if asc then
48863: LD_VAR 0 2
48867: IFFALSE 48891
// result := SortListByListAsc ( units , tmp ) else
48869: LD_ADDR_VAR 0 3
48873: PUSH
48874: LD_VAR 0 1
48878: PPUSH
48879: LD_VAR 0 5
48883: PPUSH
48884: CALL_OW 76
48888: ST_TO_ADDR
48889: GO 48911
// result := SortListByListDesc ( units , tmp ) ;
48891: LD_ADDR_VAR 0 3
48895: PUSH
48896: LD_VAR 0 1
48900: PPUSH
48901: LD_VAR 0 5
48905: PPUSH
48906: CALL_OW 77
48910: ST_TO_ADDR
// end ;
48911: LD_VAR 0 3
48915: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48916: LD_INT 0
48918: PPUSH
48919: PPUSH
// task := GetTaskList ( mech ) ;
48920: LD_ADDR_VAR 0 4
48924: PUSH
48925: LD_VAR 0 1
48929: PPUSH
48930: CALL_OW 437
48934: ST_TO_ADDR
// if not task then
48935: LD_VAR 0 4
48939: NOT
48940: IFFALSE 48944
// exit ;
48942: GO 48986
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48944: LD_ADDR_VAR 0 3
48948: PUSH
48949: LD_VAR 0 4
48953: PUSH
48954: LD_INT 1
48956: ARRAY
48957: PUSH
48958: LD_INT 1
48960: ARRAY
48961: PUSH
48962: LD_STRING r
48964: EQUAL
48965: PUSH
48966: LD_VAR 0 4
48970: PUSH
48971: LD_INT 1
48973: ARRAY
48974: PUSH
48975: LD_INT 4
48977: ARRAY
48978: PUSH
48979: LD_VAR 0 2
48983: EQUAL
48984: AND
48985: ST_TO_ADDR
// end ;
48986: LD_VAR 0 3
48990: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48991: LD_INT 0
48993: PPUSH
// SetDir ( unit , d ) ;
48994: LD_VAR 0 1
48998: PPUSH
48999: LD_VAR 0 4
49003: PPUSH
49004: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49008: LD_VAR 0 1
49012: PPUSH
49013: LD_VAR 0 2
49017: PPUSH
49018: LD_VAR 0 3
49022: PPUSH
49023: LD_VAR 0 5
49027: PPUSH
49028: CALL_OW 48
// end ;
49032: LD_VAR 0 6
49036: RET
// export function ToNaturalNumber ( number ) ; begin
49037: LD_INT 0
49039: PPUSH
// result := number div 1 ;
49040: LD_ADDR_VAR 0 2
49044: PUSH
49045: LD_VAR 0 1
49049: PUSH
49050: LD_INT 1
49052: DIV
49053: ST_TO_ADDR
// if number < 0 then
49054: LD_VAR 0 1
49058: PUSH
49059: LD_INT 0
49061: LESS
49062: IFFALSE 49072
// result := 0 ;
49064: LD_ADDR_VAR 0 2
49068: PUSH
49069: LD_INT 0
49071: ST_TO_ADDR
// end ;
49072: LD_VAR 0 2
49076: RET
// export function SortByClass ( units , class ) ; var un ; begin
49077: LD_INT 0
49079: PPUSH
49080: PPUSH
// if not units or not class then
49081: LD_VAR 0 1
49085: NOT
49086: PUSH
49087: LD_VAR 0 2
49091: NOT
49092: OR
49093: IFFALSE 49097
// exit ;
49095: GO 49192
// result := [ ] ;
49097: LD_ADDR_VAR 0 3
49101: PUSH
49102: EMPTY
49103: ST_TO_ADDR
// for un in units do
49104: LD_ADDR_VAR 0 4
49108: PUSH
49109: LD_VAR 0 1
49113: PUSH
49114: FOR_IN
49115: IFFALSE 49190
// if GetClass ( un ) = class then
49117: LD_VAR 0 4
49121: PPUSH
49122: CALL_OW 257
49126: PUSH
49127: LD_VAR 0 2
49131: EQUAL
49132: IFFALSE 49159
// result := Insert ( result , 1 , un ) else
49134: LD_ADDR_VAR 0 3
49138: PUSH
49139: LD_VAR 0 3
49143: PPUSH
49144: LD_INT 1
49146: PPUSH
49147: LD_VAR 0 4
49151: PPUSH
49152: CALL_OW 2
49156: ST_TO_ADDR
49157: GO 49188
// result := Replace ( result , result + 1 , un ) ;
49159: LD_ADDR_VAR 0 3
49163: PUSH
49164: LD_VAR 0 3
49168: PPUSH
49169: LD_VAR 0 3
49173: PUSH
49174: LD_INT 1
49176: PLUS
49177: PPUSH
49178: LD_VAR 0 4
49182: PPUSH
49183: CALL_OW 1
49187: ST_TO_ADDR
49188: GO 49114
49190: POP
49191: POP
// end ;
49192: LD_VAR 0 3
49196: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49197: LD_INT 0
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
49204: PPUSH
49205: PPUSH
// result := [ ] ;
49206: LD_ADDR_VAR 0 4
49210: PUSH
49211: EMPTY
49212: ST_TO_ADDR
// if x - r < 0 then
49213: LD_VAR 0 1
49217: PUSH
49218: LD_VAR 0 3
49222: MINUS
49223: PUSH
49224: LD_INT 0
49226: LESS
49227: IFFALSE 49239
// min_x := 0 else
49229: LD_ADDR_VAR 0 8
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
49237: GO 49255
// min_x := x - r ;
49239: LD_ADDR_VAR 0 8
49243: PUSH
49244: LD_VAR 0 1
49248: PUSH
49249: LD_VAR 0 3
49253: MINUS
49254: ST_TO_ADDR
// if y - r < 0 then
49255: LD_VAR 0 2
49259: PUSH
49260: LD_VAR 0 3
49264: MINUS
49265: PUSH
49266: LD_INT 0
49268: LESS
49269: IFFALSE 49281
// min_y := 0 else
49271: LD_ADDR_VAR 0 7
49275: PUSH
49276: LD_INT 0
49278: ST_TO_ADDR
49279: GO 49297
// min_y := y - r ;
49281: LD_ADDR_VAR 0 7
49285: PUSH
49286: LD_VAR 0 2
49290: PUSH
49291: LD_VAR 0 3
49295: MINUS
49296: ST_TO_ADDR
// max_x := x + r ;
49297: LD_ADDR_VAR 0 9
49301: PUSH
49302: LD_VAR 0 1
49306: PUSH
49307: LD_VAR 0 3
49311: PLUS
49312: ST_TO_ADDR
// max_y := y + r ;
49313: LD_ADDR_VAR 0 10
49317: PUSH
49318: LD_VAR 0 2
49322: PUSH
49323: LD_VAR 0 3
49327: PLUS
49328: ST_TO_ADDR
// for _x = min_x to max_x do
49329: LD_ADDR_VAR 0 5
49333: PUSH
49334: DOUBLE
49335: LD_VAR 0 8
49339: DEC
49340: ST_TO_ADDR
49341: LD_VAR 0 9
49345: PUSH
49346: FOR_TO
49347: IFFALSE 49448
// for _y = min_y to max_y do
49349: LD_ADDR_VAR 0 6
49353: PUSH
49354: DOUBLE
49355: LD_VAR 0 7
49359: DEC
49360: ST_TO_ADDR
49361: LD_VAR 0 10
49365: PUSH
49366: FOR_TO
49367: IFFALSE 49444
// begin if not ValidHex ( _x , _y ) then
49369: LD_VAR 0 5
49373: PPUSH
49374: LD_VAR 0 6
49378: PPUSH
49379: CALL_OW 488
49383: NOT
49384: IFFALSE 49388
// continue ;
49386: GO 49366
// if GetResourceTypeXY ( _x , _y ) then
49388: LD_VAR 0 5
49392: PPUSH
49393: LD_VAR 0 6
49397: PPUSH
49398: CALL_OW 283
49402: IFFALSE 49442
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49404: LD_ADDR_VAR 0 4
49408: PUSH
49409: LD_VAR 0 4
49413: PPUSH
49414: LD_VAR 0 4
49418: PUSH
49419: LD_INT 1
49421: PLUS
49422: PPUSH
49423: LD_VAR 0 5
49427: PUSH
49428: LD_VAR 0 6
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PPUSH
49437: CALL_OW 1
49441: ST_TO_ADDR
// end ;
49442: GO 49366
49444: POP
49445: POP
49446: GO 49346
49448: POP
49449: POP
// end ;
49450: LD_VAR 0 4
49454: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49455: LD_INT 0
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
49462: PPUSH
49463: PPUSH
49464: PPUSH
// if not units then
49465: LD_VAR 0 1
49469: NOT
49470: IFFALSE 49474
// exit ;
49472: GO 50002
// result := UnitFilter ( units , [ f_ok ] ) ;
49474: LD_ADDR_VAR 0 3
49478: PUSH
49479: LD_VAR 0 1
49483: PPUSH
49484: LD_INT 50
49486: PUSH
49487: EMPTY
49488: LIST
49489: PPUSH
49490: CALL_OW 72
49494: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49495: LD_ADDR_VAR 0 8
49499: PUSH
49500: LD_VAR 0 1
49504: PUSH
49505: LD_INT 1
49507: ARRAY
49508: PPUSH
49509: CALL_OW 255
49513: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49514: LD_ADDR_VAR 0 10
49518: PUSH
49519: LD_INT 29
49521: PUSH
49522: LD_INT 91
49524: PUSH
49525: LD_INT 49
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: ST_TO_ADDR
// if not result then
49533: LD_VAR 0 3
49537: NOT
49538: IFFALSE 49542
// exit ;
49540: GO 50002
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49542: LD_ADDR_VAR 0 5
49546: PUSH
49547: LD_INT 81
49549: PUSH
49550: LD_VAR 0 8
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PPUSH
49559: CALL_OW 69
49563: ST_TO_ADDR
// for i in result do
49564: LD_ADDR_VAR 0 4
49568: PUSH
49569: LD_VAR 0 3
49573: PUSH
49574: FOR_IN
49575: IFFALSE 50000
// begin tag := GetTag ( i ) + 1 ;
49577: LD_ADDR_VAR 0 9
49581: PUSH
49582: LD_VAR 0 4
49586: PPUSH
49587: CALL_OW 110
49591: PUSH
49592: LD_INT 1
49594: PLUS
49595: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49596: LD_ADDR_VAR 0 7
49600: PUSH
49601: LD_VAR 0 4
49605: PPUSH
49606: CALL_OW 250
49610: PPUSH
49611: LD_VAR 0 4
49615: PPUSH
49616: CALL_OW 251
49620: PPUSH
49621: LD_INT 4
49623: PPUSH
49624: CALL 49197 0 3
49628: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49629: LD_VAR 0 4
49633: PPUSH
49634: CALL_OW 247
49638: PUSH
49639: LD_INT 2
49641: EQUAL
49642: PUSH
49643: LD_VAR 0 7
49647: PUSH
49648: LD_INT 2
49650: GREATER
49651: AND
49652: PUSH
49653: LD_VAR 0 4
49657: PPUSH
49658: CALL_OW 264
49662: PUSH
49663: LD_VAR 0 10
49667: IN
49668: NOT
49669: AND
49670: IFFALSE 49709
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49672: LD_VAR 0 4
49676: PPUSH
49677: LD_VAR 0 7
49681: PUSH
49682: LD_INT 1
49684: ARRAY
49685: PUSH
49686: LD_INT 1
49688: ARRAY
49689: PPUSH
49690: LD_VAR 0 7
49694: PUSH
49695: LD_INT 1
49697: ARRAY
49698: PUSH
49699: LD_INT 2
49701: ARRAY
49702: PPUSH
49703: CALL_OW 116
49707: GO 49998
// if path > tag then
49709: LD_VAR 0 2
49713: PUSH
49714: LD_VAR 0 9
49718: GREATER
49719: IFFALSE 49927
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49721: LD_ADDR_VAR 0 6
49725: PUSH
49726: LD_VAR 0 5
49730: PPUSH
49731: LD_INT 91
49733: PUSH
49734: LD_VAR 0 4
49738: PUSH
49739: LD_INT 8
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: PPUSH
49747: CALL_OW 72
49751: ST_TO_ADDR
// if nearEnemy then
49752: LD_VAR 0 6
49756: IFFALSE 49825
// begin if GetWeapon ( i ) = ru_time_lapser then
49758: LD_VAR 0 4
49762: PPUSH
49763: CALL_OW 264
49767: PUSH
49768: LD_INT 49
49770: EQUAL
49771: IFFALSE 49799
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49773: LD_VAR 0 4
49777: PPUSH
49778: LD_VAR 0 6
49782: PPUSH
49783: LD_VAR 0 4
49787: PPUSH
49788: CALL_OW 74
49792: PPUSH
49793: CALL_OW 112
49797: GO 49823
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49799: LD_VAR 0 4
49803: PPUSH
49804: LD_VAR 0 6
49808: PPUSH
49809: LD_VAR 0 4
49813: PPUSH
49814: CALL_OW 74
49818: PPUSH
49819: CALL 51073 0 2
// end else
49823: GO 49925
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49825: LD_VAR 0 4
49829: PPUSH
49830: LD_VAR 0 2
49834: PUSH
49835: LD_VAR 0 9
49839: ARRAY
49840: PUSH
49841: LD_INT 1
49843: ARRAY
49844: PPUSH
49845: LD_VAR 0 2
49849: PUSH
49850: LD_VAR 0 9
49854: ARRAY
49855: PUSH
49856: LD_INT 2
49858: ARRAY
49859: PPUSH
49860: CALL_OW 297
49864: PUSH
49865: LD_INT 6
49867: GREATER
49868: IFFALSE 49911
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49870: LD_VAR 0 4
49874: PPUSH
49875: LD_VAR 0 2
49879: PUSH
49880: LD_VAR 0 9
49884: ARRAY
49885: PUSH
49886: LD_INT 1
49888: ARRAY
49889: PPUSH
49890: LD_VAR 0 2
49894: PUSH
49895: LD_VAR 0 9
49899: ARRAY
49900: PUSH
49901: LD_INT 2
49903: ARRAY
49904: PPUSH
49905: CALL_OW 114
49909: GO 49925
// SetTag ( i , tag ) ;
49911: LD_VAR 0 4
49915: PPUSH
49916: LD_VAR 0 9
49920: PPUSH
49921: CALL_OW 109
// end else
49925: GO 49998
// if enemy then
49927: LD_VAR 0 5
49931: IFFALSE 49998
// begin if GetWeapon ( i ) = ru_time_lapser then
49933: LD_VAR 0 4
49937: PPUSH
49938: CALL_OW 264
49942: PUSH
49943: LD_INT 49
49945: EQUAL
49946: IFFALSE 49974
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49948: LD_VAR 0 4
49952: PPUSH
49953: LD_VAR 0 5
49957: PPUSH
49958: LD_VAR 0 4
49962: PPUSH
49963: CALL_OW 74
49967: PPUSH
49968: CALL_OW 112
49972: GO 49998
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49974: LD_VAR 0 4
49978: PPUSH
49979: LD_VAR 0 5
49983: PPUSH
49984: LD_VAR 0 4
49988: PPUSH
49989: CALL_OW 74
49993: PPUSH
49994: CALL 51073 0 2
// end ; end ;
49998: GO 49574
50000: POP
50001: POP
// end ;
50002: LD_VAR 0 3
50006: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50007: LD_INT 0
50009: PPUSH
50010: PPUSH
50011: PPUSH
// if not unit or IsInUnit ( unit ) then
50012: LD_VAR 0 1
50016: NOT
50017: PUSH
50018: LD_VAR 0 1
50022: PPUSH
50023: CALL_OW 310
50027: OR
50028: IFFALSE 50032
// exit ;
50030: GO 50123
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50032: LD_ADDR_VAR 0 4
50036: PUSH
50037: LD_VAR 0 1
50041: PPUSH
50042: CALL_OW 250
50046: PPUSH
50047: LD_VAR 0 2
50051: PPUSH
50052: LD_INT 1
50054: PPUSH
50055: CALL_OW 272
50059: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50060: LD_ADDR_VAR 0 5
50064: PUSH
50065: LD_VAR 0 1
50069: PPUSH
50070: CALL_OW 251
50074: PPUSH
50075: LD_VAR 0 2
50079: PPUSH
50080: LD_INT 1
50082: PPUSH
50083: CALL_OW 273
50087: ST_TO_ADDR
// if ValidHex ( x , y ) then
50088: LD_VAR 0 4
50092: PPUSH
50093: LD_VAR 0 5
50097: PPUSH
50098: CALL_OW 488
50102: IFFALSE 50123
// ComTurnXY ( unit , x , y ) ;
50104: LD_VAR 0 1
50108: PPUSH
50109: LD_VAR 0 4
50113: PPUSH
50114: LD_VAR 0 5
50118: PPUSH
50119: CALL_OW 118
// end ;
50123: LD_VAR 0 3
50127: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50128: LD_INT 0
50130: PPUSH
50131: PPUSH
// result := false ;
50132: LD_ADDR_VAR 0 3
50136: PUSH
50137: LD_INT 0
50139: ST_TO_ADDR
// if not units then
50140: LD_VAR 0 2
50144: NOT
50145: IFFALSE 50149
// exit ;
50147: GO 50194
// for i in units do
50149: LD_ADDR_VAR 0 4
50153: PUSH
50154: LD_VAR 0 2
50158: PUSH
50159: FOR_IN
50160: IFFALSE 50192
// if See ( side , i ) then
50162: LD_VAR 0 1
50166: PPUSH
50167: LD_VAR 0 4
50171: PPUSH
50172: CALL_OW 292
50176: IFFALSE 50190
// begin result := true ;
50178: LD_ADDR_VAR 0 3
50182: PUSH
50183: LD_INT 1
50185: ST_TO_ADDR
// exit ;
50186: POP
50187: POP
50188: GO 50194
// end ;
50190: GO 50159
50192: POP
50193: POP
// end ;
50194: LD_VAR 0 3
50198: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50199: LD_INT 0
50201: PPUSH
50202: PPUSH
50203: PPUSH
50204: PPUSH
// if not unit or not points then
50205: LD_VAR 0 1
50209: NOT
50210: PUSH
50211: LD_VAR 0 2
50215: NOT
50216: OR
50217: IFFALSE 50221
// exit ;
50219: GO 50311
// dist := 99999 ;
50221: LD_ADDR_VAR 0 5
50225: PUSH
50226: LD_INT 99999
50228: ST_TO_ADDR
// for i in points do
50229: LD_ADDR_VAR 0 4
50233: PUSH
50234: LD_VAR 0 2
50238: PUSH
50239: FOR_IN
50240: IFFALSE 50309
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50242: LD_ADDR_VAR 0 6
50246: PUSH
50247: LD_VAR 0 1
50251: PPUSH
50252: LD_VAR 0 4
50256: PUSH
50257: LD_INT 1
50259: ARRAY
50260: PPUSH
50261: LD_VAR 0 4
50265: PUSH
50266: LD_INT 2
50268: ARRAY
50269: PPUSH
50270: CALL_OW 297
50274: ST_TO_ADDR
// if tmpDist < dist then
50275: LD_VAR 0 6
50279: PUSH
50280: LD_VAR 0 5
50284: LESS
50285: IFFALSE 50307
// begin result := i ;
50287: LD_ADDR_VAR 0 3
50291: PUSH
50292: LD_VAR 0 4
50296: ST_TO_ADDR
// dist := tmpDist ;
50297: LD_ADDR_VAR 0 5
50301: PUSH
50302: LD_VAR 0 6
50306: ST_TO_ADDR
// end ; end ;
50307: GO 50239
50309: POP
50310: POP
// end ;
50311: LD_VAR 0 3
50315: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50316: LD_INT 0
50318: PPUSH
// uc_side := side ;
50319: LD_ADDR_OWVAR 20
50323: PUSH
50324: LD_VAR 0 1
50328: ST_TO_ADDR
// uc_nation := 3 ;
50329: LD_ADDR_OWVAR 21
50333: PUSH
50334: LD_INT 3
50336: ST_TO_ADDR
// vc_chassis := 25 ;
50337: LD_ADDR_OWVAR 37
50341: PUSH
50342: LD_INT 25
50344: ST_TO_ADDR
// vc_engine := engine_siberite ;
50345: LD_ADDR_OWVAR 39
50349: PUSH
50350: LD_INT 3
50352: ST_TO_ADDR
// vc_control := control_computer ;
50353: LD_ADDR_OWVAR 38
50357: PUSH
50358: LD_INT 3
50360: ST_TO_ADDR
// vc_weapon := 59 ;
50361: LD_ADDR_OWVAR 40
50365: PUSH
50366: LD_INT 59
50368: ST_TO_ADDR
// result := CreateVehicle ;
50369: LD_ADDR_VAR 0 5
50373: PUSH
50374: CALL_OW 45
50378: ST_TO_ADDR
// SetDir ( result , d ) ;
50379: LD_VAR 0 5
50383: PPUSH
50384: LD_VAR 0 4
50388: PPUSH
50389: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50393: LD_VAR 0 5
50397: PPUSH
50398: LD_VAR 0 2
50402: PPUSH
50403: LD_VAR 0 3
50407: PPUSH
50408: LD_INT 0
50410: PPUSH
50411: CALL_OW 48
// end ;
50415: LD_VAR 0 5
50419: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50420: LD_INT 0
50422: PPUSH
50423: PPUSH
50424: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50425: LD_ADDR_VAR 0 2
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50448: LD_VAR 0 1
50452: NOT
50453: PUSH
50454: LD_VAR 0 1
50458: PPUSH
50459: CALL_OW 264
50463: PUSH
50464: LD_INT 12
50466: PUSH
50467: LD_INT 51
50469: PUSH
50470: LD_INT 32
50472: PUSH
50473: LD_INT 89
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: IN
50482: NOT
50483: OR
50484: IFFALSE 50488
// exit ;
50486: GO 50586
// for i := 1 to 3 do
50488: LD_ADDR_VAR 0 3
50492: PUSH
50493: DOUBLE
50494: LD_INT 1
50496: DEC
50497: ST_TO_ADDR
50498: LD_INT 3
50500: PUSH
50501: FOR_TO
50502: IFFALSE 50584
// begin tmp := GetCargo ( cargo , i ) ;
50504: LD_ADDR_VAR 0 4
50508: PUSH
50509: LD_VAR 0 1
50513: PPUSH
50514: LD_VAR 0 3
50518: PPUSH
50519: CALL_OW 289
50523: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50524: LD_ADDR_VAR 0 2
50528: PUSH
50529: LD_VAR 0 2
50533: PPUSH
50534: LD_VAR 0 3
50538: PPUSH
50539: LD_VAR 0 4
50543: PPUSH
50544: CALL_OW 1
50548: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50549: LD_ADDR_VAR 0 2
50553: PUSH
50554: LD_VAR 0 2
50558: PPUSH
50559: LD_INT 4
50561: PPUSH
50562: LD_VAR 0 2
50566: PUSH
50567: LD_INT 4
50569: ARRAY
50570: PUSH
50571: LD_VAR 0 4
50575: PLUS
50576: PPUSH
50577: CALL_OW 1
50581: ST_TO_ADDR
// end ;
50582: GO 50501
50584: POP
50585: POP
// end ;
50586: LD_VAR 0 2
50590: RET
// export function Length ( array ) ; begin
50591: LD_INT 0
50593: PPUSH
// result := array + 0 ;
50594: LD_ADDR_VAR 0 2
50598: PUSH
50599: LD_VAR 0 1
50603: PUSH
50604: LD_INT 0
50606: PLUS
50607: ST_TO_ADDR
// end ;
50608: LD_VAR 0 2
50612: RET
// export function PrepareArray ( array ) ; begin
50613: LD_INT 0
50615: PPUSH
// result := array diff 0 ;
50616: LD_ADDR_VAR 0 2
50620: PUSH
50621: LD_VAR 0 1
50625: PUSH
50626: LD_INT 0
50628: DIFF
50629: ST_TO_ADDR
// if not result [ 1 ] then
50630: LD_VAR 0 2
50634: PUSH
50635: LD_INT 1
50637: ARRAY
50638: NOT
50639: IFFALSE 50659
// result := Delete ( result , 1 ) ;
50641: LD_ADDR_VAR 0 2
50645: PUSH
50646: LD_VAR 0 2
50650: PPUSH
50651: LD_INT 1
50653: PPUSH
50654: CALL_OW 3
50658: ST_TO_ADDR
// end ;
50659: LD_VAR 0 2
50663: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50664: LD_INT 0
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
// sibRocketRange := 25 ;
50670: LD_ADDR_VAR 0 6
50674: PUSH
50675: LD_INT 25
50677: ST_TO_ADDR
// result := false ;
50678: LD_ADDR_VAR 0 4
50682: PUSH
50683: LD_INT 0
50685: ST_TO_ADDR
// for i := 0 to 5 do
50686: LD_ADDR_VAR 0 5
50690: PUSH
50691: DOUBLE
50692: LD_INT 0
50694: DEC
50695: ST_TO_ADDR
50696: LD_INT 5
50698: PUSH
50699: FOR_TO
50700: IFFALSE 50767
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50702: LD_VAR 0 1
50706: PPUSH
50707: LD_VAR 0 5
50711: PPUSH
50712: LD_VAR 0 6
50716: PPUSH
50717: CALL_OW 272
50721: PPUSH
50722: LD_VAR 0 2
50726: PPUSH
50727: LD_VAR 0 5
50731: PPUSH
50732: LD_VAR 0 6
50736: PPUSH
50737: CALL_OW 273
50741: PPUSH
50742: LD_VAR 0 3
50746: PPUSH
50747: CALL_OW 309
50751: IFFALSE 50765
// begin result := true ;
50753: LD_ADDR_VAR 0 4
50757: PUSH
50758: LD_INT 1
50760: ST_TO_ADDR
// exit ;
50761: POP
50762: POP
50763: GO 50769
// end ;
50765: GO 50699
50767: POP
50768: POP
// end ;
50769: LD_VAR 0 4
50773: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50774: LD_INT 0
50776: PPUSH
50777: PPUSH
50778: PPUSH
// if btype = b_depot then
50779: LD_VAR 0 2
50783: PUSH
50784: LD_INT 0
50786: EQUAL
50787: IFFALSE 50799
// begin result := true ;
50789: LD_ADDR_VAR 0 3
50793: PUSH
50794: LD_INT 1
50796: ST_TO_ADDR
// exit ;
50797: GO 50915
// end ; pom := GetBase ( depot ) ;
50799: LD_ADDR_VAR 0 4
50803: PUSH
50804: LD_VAR 0 1
50808: PPUSH
50809: CALL_OW 274
50813: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50814: LD_ADDR_VAR 0 5
50818: PUSH
50819: LD_VAR 0 2
50823: PPUSH
50824: LD_VAR 0 1
50828: PPUSH
50829: CALL_OW 248
50833: PPUSH
50834: CALL_OW 450
50838: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50839: LD_ADDR_VAR 0 3
50843: PUSH
50844: LD_VAR 0 4
50848: PPUSH
50849: LD_INT 1
50851: PPUSH
50852: CALL_OW 275
50856: PUSH
50857: LD_VAR 0 5
50861: PUSH
50862: LD_INT 1
50864: ARRAY
50865: GREATEREQUAL
50866: PUSH
50867: LD_VAR 0 4
50871: PPUSH
50872: LD_INT 2
50874: PPUSH
50875: CALL_OW 275
50879: PUSH
50880: LD_VAR 0 5
50884: PUSH
50885: LD_INT 2
50887: ARRAY
50888: GREATEREQUAL
50889: AND
50890: PUSH
50891: LD_VAR 0 4
50895: PPUSH
50896: LD_INT 3
50898: PPUSH
50899: CALL_OW 275
50903: PUSH
50904: LD_VAR 0 5
50908: PUSH
50909: LD_INT 3
50911: ARRAY
50912: GREATEREQUAL
50913: AND
50914: ST_TO_ADDR
// end ;
50915: LD_VAR 0 3
50919: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50920: LD_INT 0
50922: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50923: LD_VAR 0 1
50927: PPUSH
50928: LD_VAR 0 2
50932: PPUSH
50933: LD_INT 0
50935: PPUSH
50936: LD_INT 0
50938: PPUSH
50939: LD_INT 1
50941: PPUSH
50942: LD_INT 0
50944: PPUSH
50945: CALL_OW 587
// end ;
50949: LD_VAR 0 3
50953: RET
// export function CenterOnNow ( unit ) ; begin
50954: LD_INT 0
50956: PPUSH
// result := IsInUnit ( unit ) ;
50957: LD_ADDR_VAR 0 2
50961: PUSH
50962: LD_VAR 0 1
50966: PPUSH
50967: CALL_OW 310
50971: ST_TO_ADDR
// if not result then
50972: LD_VAR 0 2
50976: NOT
50977: IFFALSE 50989
// result := unit ;
50979: LD_ADDR_VAR 0 2
50983: PUSH
50984: LD_VAR 0 1
50988: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50989: LD_VAR 0 1
50993: PPUSH
50994: CALL_OW 87
// end ;
50998: LD_VAR 0 2
51002: RET
// export function ComMoveHex ( unit , hex ) ; begin
51003: LD_INT 0
51005: PPUSH
// if not hex then
51006: LD_VAR 0 2
51010: NOT
51011: IFFALSE 51015
// exit ;
51013: GO 51068
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51015: LD_VAR 0 2
51019: PUSH
51020: LD_INT 1
51022: ARRAY
51023: PPUSH
51024: LD_VAR 0 2
51028: PUSH
51029: LD_INT 2
51031: ARRAY
51032: PPUSH
51033: CALL_OW 428
51037: IFFALSE 51041
// exit ;
51039: GO 51068
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51041: LD_VAR 0 1
51045: PPUSH
51046: LD_VAR 0 2
51050: PUSH
51051: LD_INT 1
51053: ARRAY
51054: PPUSH
51055: LD_VAR 0 2
51059: PUSH
51060: LD_INT 2
51062: ARRAY
51063: PPUSH
51064: CALL_OW 111
// end ;
51068: LD_VAR 0 3
51072: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51073: LD_INT 0
51075: PPUSH
51076: PPUSH
51077: PPUSH
// if not unit or not enemy then
51078: LD_VAR 0 1
51082: NOT
51083: PUSH
51084: LD_VAR 0 2
51088: NOT
51089: OR
51090: IFFALSE 51094
// exit ;
51092: GO 51218
// x := GetX ( enemy ) ;
51094: LD_ADDR_VAR 0 4
51098: PUSH
51099: LD_VAR 0 2
51103: PPUSH
51104: CALL_OW 250
51108: ST_TO_ADDR
// y := GetY ( enemy ) ;
51109: LD_ADDR_VAR 0 5
51113: PUSH
51114: LD_VAR 0 2
51118: PPUSH
51119: CALL_OW 251
51123: ST_TO_ADDR
// if ValidHex ( x , y ) then
51124: LD_VAR 0 4
51128: PPUSH
51129: LD_VAR 0 5
51133: PPUSH
51134: CALL_OW 488
51138: IFFALSE 51218
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51140: LD_VAR 0 2
51144: PPUSH
51145: CALL_OW 247
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: IN
51160: PUSH
51161: LD_VAR 0 1
51165: PPUSH
51166: CALL_OW 255
51170: PPUSH
51171: LD_VAR 0 2
51175: PPUSH
51176: CALL_OW 292
51180: OR
51181: IFFALSE 51199
// ComAttackUnit ( unit , enemy ) else
51183: LD_VAR 0 1
51187: PPUSH
51188: LD_VAR 0 2
51192: PPUSH
51193: CALL_OW 115
51197: GO 51218
// ComAgressiveMove ( unit , x , y ) ;
51199: LD_VAR 0 1
51203: PPUSH
51204: LD_VAR 0 4
51208: PPUSH
51209: LD_VAR 0 5
51213: PPUSH
51214: CALL_OW 114
// end ;
51218: LD_VAR 0 3
51222: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51223: LD_INT 0
51225: PPUSH
51226: PPUSH
51227: PPUSH
// list := AreaToList ( area , 0 ) ;
51228: LD_ADDR_VAR 0 5
51232: PUSH
51233: LD_VAR 0 1
51237: PPUSH
51238: LD_INT 0
51240: PPUSH
51241: CALL_OW 517
51245: ST_TO_ADDR
// if not list then
51246: LD_VAR 0 5
51250: NOT
51251: IFFALSE 51255
// exit ;
51253: GO 51385
// if all then
51255: LD_VAR 0 2
51259: IFFALSE 51347
// begin for i := 1 to list [ 1 ] do
51261: LD_ADDR_VAR 0 4
51265: PUSH
51266: DOUBLE
51267: LD_INT 1
51269: DEC
51270: ST_TO_ADDR
51271: LD_VAR 0 5
51275: PUSH
51276: LD_INT 1
51278: ARRAY
51279: PUSH
51280: FOR_TO
51281: IFFALSE 51343
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51283: LD_ADDR_VAR 0 3
51287: PUSH
51288: LD_VAR 0 3
51292: PPUSH
51293: LD_VAR 0 3
51297: PUSH
51298: LD_INT 1
51300: PLUS
51301: PPUSH
51302: LD_VAR 0 5
51306: PUSH
51307: LD_INT 1
51309: ARRAY
51310: PUSH
51311: LD_VAR 0 4
51315: ARRAY
51316: PUSH
51317: LD_VAR 0 5
51321: PUSH
51322: LD_INT 2
51324: ARRAY
51325: PUSH
51326: LD_VAR 0 4
51330: ARRAY
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PPUSH
51336: CALL_OW 1
51340: ST_TO_ADDR
51341: GO 51280
51343: POP
51344: POP
// exit ;
51345: GO 51385
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51347: LD_ADDR_VAR 0 3
51351: PUSH
51352: LD_VAR 0 5
51356: PUSH
51357: LD_INT 1
51359: ARRAY
51360: PUSH
51361: LD_INT 1
51363: ARRAY
51364: PUSH
51365: LD_VAR 0 5
51369: PUSH
51370: LD_INT 2
51372: ARRAY
51373: PUSH
51374: LD_INT 1
51376: ARRAY
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: EMPTY
51383: LIST
51384: ST_TO_ADDR
// end ;
51385: LD_VAR 0 3
51389: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51390: LD_INT 0
51392: PPUSH
51393: PPUSH
// list := AreaToList ( area , 0 ) ;
51394: LD_ADDR_VAR 0 4
51398: PUSH
51399: LD_VAR 0 1
51403: PPUSH
51404: LD_INT 0
51406: PPUSH
51407: CALL_OW 517
51411: ST_TO_ADDR
// if not list then
51412: LD_VAR 0 4
51416: NOT
51417: IFFALSE 51421
// exit ;
51419: GO 51462
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_VAR 0 4
51430: PUSH
51431: LD_INT 1
51433: ARRAY
51434: PUSH
51435: LD_INT 1
51437: ARRAY
51438: PUSH
51439: LD_VAR 0 4
51443: PUSH
51444: LD_INT 2
51446: ARRAY
51447: PUSH
51448: LD_INT 1
51450: ARRAY
51451: PUSH
51452: LD_VAR 0 2
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: ST_TO_ADDR
// end ;
51462: LD_VAR 0 3
51466: RET
// export function First ( array ) ; begin
51467: LD_INT 0
51469: PPUSH
// if not array then
51470: LD_VAR 0 1
51474: NOT
51475: IFFALSE 51479
// exit ;
51477: GO 51493
// result := array [ 1 ] ;
51479: LD_ADDR_VAR 0 2
51483: PUSH
51484: LD_VAR 0 1
51488: PUSH
51489: LD_INT 1
51491: ARRAY
51492: ST_TO_ADDR
// end ;
51493: LD_VAR 0 2
51497: RET
// export function Last ( array ) ; begin
51498: LD_INT 0
51500: PPUSH
// if not array then
51501: LD_VAR 0 1
51505: NOT
51506: IFFALSE 51510
// exit ;
51508: GO 51526
// result := array [ array ] ;
51510: LD_ADDR_VAR 0 2
51514: PUSH
51515: LD_VAR 0 1
51519: PUSH
51520: LD_VAR 0 1
51524: ARRAY
51525: ST_TO_ADDR
// end ;
51526: LD_VAR 0 2
51530: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51531: LD_INT 0
51533: PPUSH
51534: PPUSH
// result := [ ] ;
51535: LD_ADDR_VAR 0 5
51539: PUSH
51540: EMPTY
51541: ST_TO_ADDR
// if not array then
51542: LD_VAR 0 1
51546: NOT
51547: IFFALSE 51551
// exit ;
51549: GO 51663
// for i := 1 to array do
51551: LD_ADDR_VAR 0 6
51555: PUSH
51556: DOUBLE
51557: LD_INT 1
51559: DEC
51560: ST_TO_ADDR
51561: LD_VAR 0 1
51565: PUSH
51566: FOR_TO
51567: IFFALSE 51661
// if array [ i ] [ index ] = value then
51569: LD_VAR 0 1
51573: PUSH
51574: LD_VAR 0 6
51578: ARRAY
51579: PUSH
51580: LD_VAR 0 2
51584: ARRAY
51585: PUSH
51586: LD_VAR 0 3
51590: EQUAL
51591: IFFALSE 51659
// begin if indexColumn then
51593: LD_VAR 0 4
51597: IFFALSE 51633
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51599: LD_ADDR_VAR 0 5
51603: PUSH
51604: LD_VAR 0 5
51608: PPUSH
51609: LD_VAR 0 1
51613: PUSH
51614: LD_VAR 0 6
51618: ARRAY
51619: PUSH
51620: LD_VAR 0 4
51624: ARRAY
51625: PPUSH
51626: CALL 46851 0 2
51630: ST_TO_ADDR
51631: GO 51659
// result := Join ( result , array [ i ] ) ;
51633: LD_ADDR_VAR 0 5
51637: PUSH
51638: LD_VAR 0 5
51642: PPUSH
51643: LD_VAR 0 1
51647: PUSH
51648: LD_VAR 0 6
51652: ARRAY
51653: PPUSH
51654: CALL 46851 0 2
51658: ST_TO_ADDR
// end ;
51659: GO 51566
51661: POP
51662: POP
// end ;
51663: LD_VAR 0 5
51667: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51668: LD_INT 0
51670: PPUSH
// if not vehicles or not parkingPoint then
51671: LD_VAR 0 1
51675: NOT
51676: PUSH
51677: LD_VAR 0 2
51681: NOT
51682: OR
51683: IFFALSE 51687
// exit ;
51685: GO 51785
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51687: LD_ADDR_VAR 0 1
51691: PUSH
51692: LD_VAR 0 1
51696: PPUSH
51697: LD_INT 50
51699: PUSH
51700: EMPTY
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: LD_INT 92
51708: PUSH
51709: LD_VAR 0 2
51713: PUSH
51714: LD_INT 1
51716: ARRAY
51717: PUSH
51718: LD_VAR 0 2
51722: PUSH
51723: LD_INT 2
51725: ARRAY
51726: PUSH
51727: LD_INT 8
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PPUSH
51744: CALL_OW 72
51748: ST_TO_ADDR
// if not vehicles then
51749: LD_VAR 0 1
51753: NOT
51754: IFFALSE 51758
// exit ;
51756: GO 51785
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51758: LD_VAR 0 1
51762: PPUSH
51763: LD_VAR 0 2
51767: PUSH
51768: LD_INT 1
51770: ARRAY
51771: PPUSH
51772: LD_VAR 0 2
51776: PUSH
51777: LD_INT 2
51779: ARRAY
51780: PPUSH
51781: CALL_OW 111
// end ;
51785: LD_VAR 0 3
51789: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51790: LD_INT 0
51792: PPUSH
51793: PPUSH
51794: PPUSH
// if not side or not area then
51795: LD_VAR 0 1
51799: NOT
51800: PUSH
51801: LD_VAR 0 2
51805: NOT
51806: OR
51807: IFFALSE 51811
// exit ;
51809: GO 51930
// tmp := AreaToList ( area , 0 ) ;
51811: LD_ADDR_VAR 0 5
51815: PUSH
51816: LD_VAR 0 2
51820: PPUSH
51821: LD_INT 0
51823: PPUSH
51824: CALL_OW 517
51828: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51829: LD_ADDR_VAR 0 4
51833: PUSH
51834: DOUBLE
51835: LD_INT 1
51837: DEC
51838: ST_TO_ADDR
51839: LD_VAR 0 5
51843: PUSH
51844: LD_INT 1
51846: ARRAY
51847: PUSH
51848: FOR_TO
51849: IFFALSE 51928
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51851: LD_VAR 0 5
51855: PUSH
51856: LD_INT 1
51858: ARRAY
51859: PUSH
51860: LD_VAR 0 4
51864: ARRAY
51865: PPUSH
51866: LD_VAR 0 5
51870: PUSH
51871: LD_INT 2
51873: ARRAY
51874: PUSH
51875: LD_VAR 0 4
51879: ARRAY
51880: PPUSH
51881: CALL_OW 351
51885: IFFALSE 51926
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51887: LD_VAR 0 5
51891: PUSH
51892: LD_INT 1
51894: ARRAY
51895: PUSH
51896: LD_VAR 0 4
51900: ARRAY
51901: PPUSH
51902: LD_VAR 0 5
51906: PUSH
51907: LD_INT 2
51909: ARRAY
51910: PUSH
51911: LD_VAR 0 4
51915: ARRAY
51916: PPUSH
51917: LD_VAR 0 1
51921: PPUSH
51922: CALL_OW 244
// end ;
51926: GO 51848
51928: POP
51929: POP
// end ; end_of_file
51930: LD_VAR 0 3
51934: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
51935: LD_VAR 0 1
51939: PUSH
51940: LD_INT 200
51942: DOUBLE
51943: GREATEREQUAL
51944: IFFALSE 51952
51946: LD_INT 299
51948: DOUBLE
51949: LESSEQUAL
51950: IFTRUE 51954
51952: GO 51986
51954: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
51955: LD_VAR 0 1
51959: PPUSH
51960: LD_VAR 0 2
51964: PPUSH
51965: LD_VAR 0 3
51969: PPUSH
51970: LD_VAR 0 4
51974: PPUSH
51975: LD_VAR 0 5
51979: PPUSH
51980: CALL 52683 0 5
51984: GO 52063
51986: LD_INT 300
51988: DOUBLE
51989: GREATEREQUAL
51990: IFFALSE 51998
51992: LD_INT 399
51994: DOUBLE
51995: LESSEQUAL
51996: IFTRUE 52000
51998: GO 52062
52000: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52001: LD_VAR 0 1
52005: PPUSH
52006: LD_VAR 0 2
52010: PPUSH
52011: LD_VAR 0 3
52015: PPUSH
52016: LD_VAR 0 4
52020: PPUSH
52021: LD_VAR 0 5
52025: PPUSH
52026: LD_VAR 0 6
52030: PPUSH
52031: LD_VAR 0 7
52035: PPUSH
52036: LD_VAR 0 8
52040: PPUSH
52041: LD_VAR 0 9
52045: PPUSH
52046: LD_VAR 0 10
52050: PPUSH
52051: LD_VAR 0 11
52055: PPUSH
52056: CALL 59010 0 11
52060: GO 52063
52062: POP
// end ;
52063: PPOPN 11
52065: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52066: LD_VAR 0 1
52070: PPUSH
52071: LD_VAR 0 2
52075: PPUSH
52076: LD_VAR 0 3
52080: PPUSH
52081: LD_VAR 0 4
52085: PPUSH
52086: LD_VAR 0 5
52090: PPUSH
52091: CALL 52148 0 5
// end ; end_of_file
52095: PPOPN 5
52097: END
// export function SOS_UnitDestroyed ( un ) ; begin
52098: LD_INT 0
52100: PPUSH
// ComRadiation ( un ) ;
52101: LD_VAR 0 1
52105: PPUSH
52106: CALL 53087 0 1
// end ;
52110: LD_VAR 0 2
52114: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52115: LD_INT 0
52117: PPUSH
// ComRadiation ( un ) ;
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL 53087 0 1
// end ;
52127: LD_VAR 0 2
52131: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52132: LD_INT 0
52134: PPUSH
// end ;
52135: LD_VAR 0 4
52139: RET
// export function SOS_Command ( cmd ) ; begin
52140: LD_INT 0
52142: PPUSH
// end ;
52143: LD_VAR 0 2
52147: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52148: LD_INT 0
52150: PPUSH
// end ;
52151: LD_VAR 0 6
52155: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
52156: LD_INT 0
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
// if not vehicle or not factory then
52163: LD_VAR 0 1
52167: NOT
52168: PUSH
52169: LD_VAR 0 2
52173: NOT
52174: OR
52175: IFFALSE 52179
// exit ;
52177: GO 52678
// if not factoryWaypoints then
52179: LD_EXP 54
52183: NOT
52184: IFFALSE 52188
// exit ;
52186: GO 52678
// for i := 1 to Count ( factoryWaypoints ) do
52188: LD_ADDR_VAR 0 4
52192: PUSH
52193: DOUBLE
52194: LD_INT 1
52196: DEC
52197: ST_TO_ADDR
52198: LD_EXP 54
52202: PPUSH
52203: CALL 11242 0 1
52207: PUSH
52208: FOR_TO
52209: IFFALSE 52676
// if factoryWaypoints [ i ] [ 2 ] = factory then
52211: LD_EXP 54
52215: PUSH
52216: LD_VAR 0 4
52220: ARRAY
52221: PUSH
52222: LD_INT 2
52224: ARRAY
52225: PUSH
52226: LD_VAR 0 2
52230: EQUAL
52231: IFFALSE 52674
// begin if GetControl ( vehicle ) = control_manual then
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 263
52242: PUSH
52243: LD_INT 1
52245: EQUAL
52246: IFFALSE 52557
// begin driver := IsDrivenBy ( vehicle ) ;
52248: LD_ADDR_VAR 0 6
52252: PUSH
52253: LD_VAR 0 1
52257: PPUSH
52258: CALL_OW 311
52262: ST_TO_ADDR
// tag := GetTag ( driver ) ;
52263: LD_ADDR_VAR 0 5
52267: PUSH
52268: LD_VAR 0 6
52272: PPUSH
52273: CALL_OW 110
52277: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
52278: LD_VAR 0 5
52282: PUSH
52283: LD_INT 501
52285: EQUAL
52286: PUSH
52287: LD_VAR 0 1
52291: PPUSH
52292: CALL_OW 110
52296: PUSH
52297: LD_INT 501
52299: EQUAL
52300: OR
52301: IFFALSE 52307
// exit ;
52303: POP
52304: POP
52305: GO 52678
// if not HasTask ( driver ) then
52307: LD_VAR 0 6
52311: PPUSH
52312: CALL_OW 314
52316: NOT
52317: IFFALSE 52555
// begin SetTag ( driver , tDriver ) ;
52319: LD_VAR 0 6
52323: PPUSH
52324: LD_INT 501
52326: PPUSH
52327: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
52331: LD_VAR 0 1
52335: PPUSH
52336: LD_INT 501
52338: PPUSH
52339: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52343: LD_ADDR_VAR 0 7
52347: PUSH
52348: LD_EXP 54
52352: PUSH
52353: LD_VAR 0 4
52357: ARRAY
52358: PUSH
52359: LD_INT 3
52361: ARRAY
52362: PPUSH
52363: LD_EXP 54
52367: PUSH
52368: LD_VAR 0 4
52372: ARRAY
52373: PUSH
52374: LD_INT 4
52376: ARRAY
52377: PPUSH
52378: CALL_OW 428
52382: ST_TO_ADDR
// if hex then
52383: LD_VAR 0 7
52387: IFFALSE 52405
// ComMoveUnit ( driver , hex ) else
52389: LD_VAR 0 6
52393: PPUSH
52394: LD_VAR 0 7
52398: PPUSH
52399: CALL_OW 112
52403: GO 52444
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52405: LD_VAR 0 6
52409: PPUSH
52410: LD_EXP 54
52414: PUSH
52415: LD_VAR 0 4
52419: ARRAY
52420: PUSH
52421: LD_INT 3
52423: ARRAY
52424: PPUSH
52425: LD_EXP 54
52429: PUSH
52430: LD_VAR 0 4
52434: ARRAY
52435: PUSH
52436: LD_INT 4
52438: ARRAY
52439: PPUSH
52440: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52444: LD_VAR 0 6
52448: PPUSH
52449: CALL_OW 181
// if Multiplayer then
52453: LD_OWVAR 4
52457: IFFALSE 52506
// begin repeat wait ( 10 ) ;
52459: LD_INT 10
52461: PPUSH
52462: CALL_OW 67
// until not IsInUnit ( driver ) ;
52466: LD_VAR 0 6
52470: PPUSH
52471: CALL_OW 310
52475: NOT
52476: IFFALSE 52459
// if not HasTask ( driver ) then
52478: LD_VAR 0 6
52482: PPUSH
52483: CALL_OW 314
52487: NOT
52488: IFFALSE 52504
// ComEnterUnit ( driver , factory ) ;
52490: LD_VAR 0 6
52494: PPUSH
52495: LD_VAR 0 2
52499: PPUSH
52500: CALL_OW 120
// end else
52504: GO 52520
// AddComEnterUnit ( driver , factory ) ;
52506: LD_VAR 0 6
52510: PPUSH
52511: LD_VAR 0 2
52515: PPUSH
52516: CALL_OW 180
// wait ( 0 0$1 ) ;
52520: LD_INT 35
52522: PPUSH
52523: CALL_OW 67
// SetTag ( driver , tag ) ;
52527: LD_VAR 0 6
52531: PPUSH
52532: LD_VAR 0 5
52536: PPUSH
52537: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
52541: LD_VAR 0 1
52545: PPUSH
52546: LD_INT 0
52548: PPUSH
52549: CALL_OW 109
// break ;
52553: GO 52676
// end ; end else
52555: GO 52674
// if GetControl ( vehicle ) = control_remote then
52557: LD_VAR 0 1
52561: PPUSH
52562: CALL_OW 263
52566: PUSH
52567: LD_INT 2
52569: EQUAL
52570: IFFALSE 52633
// begin wait ( 0 0$2 ) ;
52572: LD_INT 70
52574: PPUSH
52575: CALL_OW 67
// if Connect ( vehicle ) then
52579: LD_VAR 0 1
52583: PPUSH
52584: CALL 17448 0 1
52588: IFFALSE 52629
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52590: LD_VAR 0 1
52594: PPUSH
52595: LD_EXP 54
52599: PUSH
52600: LD_VAR 0 4
52604: ARRAY
52605: PUSH
52606: LD_INT 3
52608: ARRAY
52609: PPUSH
52610: LD_EXP 54
52614: PUSH
52615: LD_VAR 0 4
52619: ARRAY
52620: PUSH
52621: LD_INT 4
52623: ARRAY
52624: PPUSH
52625: CALL_OW 171
// break ;
52629: GO 52676
// end else
52631: GO 52674
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52633: LD_VAR 0 1
52637: PPUSH
52638: LD_EXP 54
52642: PUSH
52643: LD_VAR 0 4
52647: ARRAY
52648: PUSH
52649: LD_INT 3
52651: ARRAY
52652: PPUSH
52653: LD_EXP 54
52657: PUSH
52658: LD_VAR 0 4
52662: ARRAY
52663: PUSH
52664: LD_INT 4
52666: ARRAY
52667: PPUSH
52668: CALL_OW 171
// break ;
52672: GO 52676
// end ; end ;
52674: GO 52208
52676: POP
52677: POP
// end ;
52678: LD_VAR 0 3
52682: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52683: LD_INT 0
52685: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52686: LD_VAR 0 1
52690: PUSH
52691: LD_INT 250
52693: EQUAL
52694: PUSH
52695: LD_VAR 0 2
52699: PPUSH
52700: CALL_OW 264
52704: PUSH
52705: LD_INT 81
52707: EQUAL
52708: AND
52709: IFFALSE 52730
// MinerPlaceMine ( unit , x , y ) ;
52711: LD_VAR 0 2
52715: PPUSH
52716: LD_VAR 0 4
52720: PPUSH
52721: LD_VAR 0 5
52725: PPUSH
52726: CALL 55822 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52730: LD_VAR 0 1
52734: PUSH
52735: LD_INT 251
52737: EQUAL
52738: PUSH
52739: LD_VAR 0 2
52743: PPUSH
52744: CALL_OW 264
52748: PUSH
52749: LD_INT 81
52751: EQUAL
52752: AND
52753: IFFALSE 52774
// MinerDetonateMine ( unit , x , y ) ;
52755: LD_VAR 0 2
52759: PPUSH
52760: LD_VAR 0 4
52764: PPUSH
52765: LD_VAR 0 5
52769: PPUSH
52770: CALL 56097 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52774: LD_VAR 0 1
52778: PUSH
52779: LD_INT 252
52781: EQUAL
52782: PUSH
52783: LD_VAR 0 2
52787: PPUSH
52788: CALL_OW 264
52792: PUSH
52793: LD_INT 81
52795: EQUAL
52796: AND
52797: IFFALSE 52818
// MinerCreateMinefield ( unit , x , y ) ;
52799: LD_VAR 0 2
52803: PPUSH
52804: LD_VAR 0 4
52808: PPUSH
52809: LD_VAR 0 5
52813: PPUSH
52814: CALL 56514 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52818: LD_VAR 0 1
52822: PUSH
52823: LD_INT 253
52825: EQUAL
52826: PUSH
52827: LD_VAR 0 2
52831: PPUSH
52832: CALL_OW 257
52836: PUSH
52837: LD_INT 5
52839: EQUAL
52840: AND
52841: IFFALSE 52862
// ComBinocular ( unit , x , y ) ;
52843: LD_VAR 0 2
52847: PPUSH
52848: LD_VAR 0 4
52852: PPUSH
52853: LD_VAR 0 5
52857: PPUSH
52858: CALL 56883 0 3
// if selectedUnit then
52862: LD_VAR 0 3
52866: IFFALSE 52922
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52868: LD_VAR 0 1
52872: PUSH
52873: LD_INT 254
52875: EQUAL
52876: PUSH
52877: LD_VAR 0 2
52881: PPUSH
52882: CALL_OW 264
52886: PUSH
52887: LD_INT 99
52889: EQUAL
52890: AND
52891: PUSH
52892: LD_VAR 0 3
52896: PPUSH
52897: CALL_OW 263
52901: PUSH
52902: LD_INT 3
52904: EQUAL
52905: AND
52906: IFFALSE 52922
// HackDestroyVehicle ( unit , selectedUnit ) ;
52908: LD_VAR 0 2
52912: PPUSH
52913: LD_VAR 0 3
52917: PPUSH
52918: CALL 55186 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52922: LD_VAR 0 1
52926: PUSH
52927: LD_INT 255
52929: EQUAL
52930: PUSH
52931: LD_VAR 0 2
52935: PPUSH
52936: CALL_OW 264
52940: PUSH
52941: LD_INT 14
52943: PUSH
52944: LD_INT 53
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: IN
52951: AND
52952: PUSH
52953: LD_VAR 0 4
52957: PPUSH
52958: LD_VAR 0 5
52962: PPUSH
52963: CALL_OW 488
52967: AND
52968: IFFALSE 52992
// CutTreeXYR ( unit , x , y , 12 ) ;
52970: LD_VAR 0 2
52974: PPUSH
52975: LD_VAR 0 4
52979: PPUSH
52980: LD_VAR 0 5
52984: PPUSH
52985: LD_INT 12
52987: PPUSH
52988: CALL 53183 0 4
// if cmd = 256 then
52992: LD_VAR 0 1
52996: PUSH
52997: LD_INT 256
52999: EQUAL
53000: IFFALSE 53021
// SetFactoryWaypoint ( unit , x , y ) ;
53002: LD_VAR 0 2
53006: PPUSH
53007: LD_VAR 0 4
53011: PPUSH
53012: LD_VAR 0 5
53016: PPUSH
53017: CALL 59018 0 3
// if cmd = 257 then
53021: LD_VAR 0 1
53025: PUSH
53026: LD_INT 257
53028: EQUAL
53029: IFFALSE 53050
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53031: LD_VAR 0 2
53035: PPUSH
53036: LD_VAR 0 4
53040: PPUSH
53041: LD_VAR 0 5
53045: PPUSH
53046: CALL 59508 0 3
// if cmd = 258 then
53050: LD_VAR 0 1
53054: PUSH
53055: LD_INT 258
53057: EQUAL
53058: IFFALSE 53082
// BurnTreeXYR ( unit , x , y , 8 ) ;
53060: LD_VAR 0 2
53064: PPUSH
53065: LD_VAR 0 4
53069: PPUSH
53070: LD_VAR 0 5
53074: PPUSH
53075: LD_INT 8
53077: PPUSH
53078: CALL 53577 0 4
// end ;
53082: LD_VAR 0 6
53086: RET
// export function ComRadiation ( un ) ; var eff ; begin
53087: LD_INT 0
53089: PPUSH
53090: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53091: LD_VAR 0 1
53095: PPUSH
53096: CALL_OW 264
53100: PUSH
53101: LD_INT 91
53103: NONEQUAL
53104: IFFALSE 53108
// exit ;
53106: GO 53178
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53108: LD_INT 68
53110: PPUSH
53111: LD_VAR 0 1
53115: PPUSH
53116: CALL_OW 255
53120: PPUSH
53121: CALL_OW 321
53125: PUSH
53126: LD_INT 2
53128: EQUAL
53129: IFFALSE 53141
// eff := 70 else
53131: LD_ADDR_VAR 0 3
53135: PUSH
53136: LD_INT 70
53138: ST_TO_ADDR
53139: GO 53149
// eff := 30 ;
53141: LD_ADDR_VAR 0 3
53145: PUSH
53146: LD_INT 30
53148: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 250
53158: PPUSH
53159: LD_VAR 0 1
53163: PPUSH
53164: CALL_OW 251
53168: PPUSH
53169: LD_VAR 0 3
53173: PPUSH
53174: CALL_OW 495
// end ;
53178: LD_VAR 0 2
53182: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53183: LD_INT 0
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53194: LD_VAR 0 1
53198: PPUSH
53199: CALL_OW 302
53203: NOT
53204: PUSH
53205: LD_VAR 0 2
53209: PPUSH
53210: LD_VAR 0 3
53214: PPUSH
53215: CALL_OW 488
53219: NOT
53220: OR
53221: PUSH
53222: LD_VAR 0 4
53226: NOT
53227: OR
53228: IFFALSE 53232
// exit ;
53230: GO 53572
// list := [ ] ;
53232: LD_ADDR_VAR 0 13
53236: PUSH
53237: EMPTY
53238: ST_TO_ADDR
// if x - r < 0 then
53239: LD_VAR 0 2
53243: PUSH
53244: LD_VAR 0 4
53248: MINUS
53249: PUSH
53250: LD_INT 0
53252: LESS
53253: IFFALSE 53265
// min_x := 0 else
53255: LD_ADDR_VAR 0 7
53259: PUSH
53260: LD_INT 0
53262: ST_TO_ADDR
53263: GO 53281
// min_x := x - r ;
53265: LD_ADDR_VAR 0 7
53269: PUSH
53270: LD_VAR 0 2
53274: PUSH
53275: LD_VAR 0 4
53279: MINUS
53280: ST_TO_ADDR
// if y - r < 0 then
53281: LD_VAR 0 3
53285: PUSH
53286: LD_VAR 0 4
53290: MINUS
53291: PUSH
53292: LD_INT 0
53294: LESS
53295: IFFALSE 53307
// min_y := 0 else
53297: LD_ADDR_VAR 0 8
53301: PUSH
53302: LD_INT 0
53304: ST_TO_ADDR
53305: GO 53323
// min_y := y - r ;
53307: LD_ADDR_VAR 0 8
53311: PUSH
53312: LD_VAR 0 3
53316: PUSH
53317: LD_VAR 0 4
53321: MINUS
53322: ST_TO_ADDR
// max_x := x + r ;
53323: LD_ADDR_VAR 0 9
53327: PUSH
53328: LD_VAR 0 2
53332: PUSH
53333: LD_VAR 0 4
53337: PLUS
53338: ST_TO_ADDR
// max_y := y + r ;
53339: LD_ADDR_VAR 0 10
53343: PUSH
53344: LD_VAR 0 3
53348: PUSH
53349: LD_VAR 0 4
53353: PLUS
53354: ST_TO_ADDR
// for _x = min_x to max_x do
53355: LD_ADDR_VAR 0 11
53359: PUSH
53360: DOUBLE
53361: LD_VAR 0 7
53365: DEC
53366: ST_TO_ADDR
53367: LD_VAR 0 9
53371: PUSH
53372: FOR_TO
53373: IFFALSE 53490
// for _y = min_y to max_y do
53375: LD_ADDR_VAR 0 12
53379: PUSH
53380: DOUBLE
53381: LD_VAR 0 8
53385: DEC
53386: ST_TO_ADDR
53387: LD_VAR 0 10
53391: PUSH
53392: FOR_TO
53393: IFFALSE 53486
// begin if not ValidHex ( _x , _y ) then
53395: LD_VAR 0 11
53399: PPUSH
53400: LD_VAR 0 12
53404: PPUSH
53405: CALL_OW 488
53409: NOT
53410: IFFALSE 53414
// continue ;
53412: GO 53392
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53414: LD_VAR 0 11
53418: PPUSH
53419: LD_VAR 0 12
53423: PPUSH
53424: CALL_OW 351
53428: PUSH
53429: LD_VAR 0 11
53433: PPUSH
53434: LD_VAR 0 12
53438: PPUSH
53439: CALL_OW 554
53443: AND
53444: IFFALSE 53484
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53446: LD_ADDR_VAR 0 13
53450: PUSH
53451: LD_VAR 0 13
53455: PPUSH
53456: LD_VAR 0 13
53460: PUSH
53461: LD_INT 1
53463: PLUS
53464: PPUSH
53465: LD_VAR 0 11
53469: PUSH
53470: LD_VAR 0 12
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PPUSH
53479: CALL_OW 2
53483: ST_TO_ADDR
// end ;
53484: GO 53392
53486: POP
53487: POP
53488: GO 53372
53490: POP
53491: POP
// if not list then
53492: LD_VAR 0 13
53496: NOT
53497: IFFALSE 53501
// exit ;
53499: GO 53572
// for i in list do
53501: LD_ADDR_VAR 0 6
53505: PUSH
53506: LD_VAR 0 13
53510: PUSH
53511: FOR_IN
53512: IFFALSE 53570
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53514: LD_VAR 0 1
53518: PPUSH
53519: LD_STRING M
53521: PUSH
53522: LD_VAR 0 6
53526: PUSH
53527: LD_INT 1
53529: ARRAY
53530: PUSH
53531: LD_VAR 0 6
53535: PUSH
53536: LD_INT 2
53538: ARRAY
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: PPUSH
53564: CALL_OW 447
53568: GO 53511
53570: POP
53571: POP
// end ;
53572: LD_VAR 0 5
53576: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53577: LD_INT 0
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53589: LD_VAR 0 1
53593: PPUSH
53594: CALL_OW 302
53598: NOT
53599: PUSH
53600: LD_VAR 0 2
53604: PPUSH
53605: LD_VAR 0 3
53609: PPUSH
53610: CALL_OW 488
53614: NOT
53615: OR
53616: PUSH
53617: LD_VAR 0 4
53621: NOT
53622: OR
53623: IFFALSE 53627
// exit ;
53625: GO 54140
// list := [ ] ;
53627: LD_ADDR_VAR 0 13
53631: PUSH
53632: EMPTY
53633: ST_TO_ADDR
// if x - r < 0 then
53634: LD_VAR 0 2
53638: PUSH
53639: LD_VAR 0 4
53643: MINUS
53644: PUSH
53645: LD_INT 0
53647: LESS
53648: IFFALSE 53660
// min_x := 0 else
53650: LD_ADDR_VAR 0 7
53654: PUSH
53655: LD_INT 0
53657: ST_TO_ADDR
53658: GO 53676
// min_x := x - r ;
53660: LD_ADDR_VAR 0 7
53664: PUSH
53665: LD_VAR 0 2
53669: PUSH
53670: LD_VAR 0 4
53674: MINUS
53675: ST_TO_ADDR
// if y - r < 0 then
53676: LD_VAR 0 3
53680: PUSH
53681: LD_VAR 0 4
53685: MINUS
53686: PUSH
53687: LD_INT 0
53689: LESS
53690: IFFALSE 53702
// min_y := 0 else
53692: LD_ADDR_VAR 0 8
53696: PUSH
53697: LD_INT 0
53699: ST_TO_ADDR
53700: GO 53718
// min_y := y - r ;
53702: LD_ADDR_VAR 0 8
53706: PUSH
53707: LD_VAR 0 3
53711: PUSH
53712: LD_VAR 0 4
53716: MINUS
53717: ST_TO_ADDR
// max_x := x + r ;
53718: LD_ADDR_VAR 0 9
53722: PUSH
53723: LD_VAR 0 2
53727: PUSH
53728: LD_VAR 0 4
53732: PLUS
53733: ST_TO_ADDR
// max_y := y + r ;
53734: LD_ADDR_VAR 0 10
53738: PUSH
53739: LD_VAR 0 3
53743: PUSH
53744: LD_VAR 0 4
53748: PLUS
53749: ST_TO_ADDR
// for _x = min_x to max_x do
53750: LD_ADDR_VAR 0 11
53754: PUSH
53755: DOUBLE
53756: LD_VAR 0 7
53760: DEC
53761: ST_TO_ADDR
53762: LD_VAR 0 9
53766: PUSH
53767: FOR_TO
53768: IFFALSE 53885
// for _y = min_y to max_y do
53770: LD_ADDR_VAR 0 12
53774: PUSH
53775: DOUBLE
53776: LD_VAR 0 8
53780: DEC
53781: ST_TO_ADDR
53782: LD_VAR 0 10
53786: PUSH
53787: FOR_TO
53788: IFFALSE 53881
// begin if not ValidHex ( _x , _y ) then
53790: LD_VAR 0 11
53794: PPUSH
53795: LD_VAR 0 12
53799: PPUSH
53800: CALL_OW 488
53804: NOT
53805: IFFALSE 53809
// continue ;
53807: GO 53787
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53809: LD_VAR 0 11
53813: PPUSH
53814: LD_VAR 0 12
53818: PPUSH
53819: CALL_OW 351
53823: PUSH
53824: LD_VAR 0 11
53828: PPUSH
53829: LD_VAR 0 12
53833: PPUSH
53834: CALL_OW 554
53838: AND
53839: IFFALSE 53879
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53841: LD_ADDR_VAR 0 13
53845: PUSH
53846: LD_VAR 0 13
53850: PPUSH
53851: LD_VAR 0 13
53855: PUSH
53856: LD_INT 1
53858: PLUS
53859: PPUSH
53860: LD_VAR 0 11
53864: PUSH
53865: LD_VAR 0 12
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PPUSH
53874: CALL_OW 2
53878: ST_TO_ADDR
// end ;
53879: GO 53787
53881: POP
53882: POP
53883: GO 53767
53885: POP
53886: POP
// if not list then
53887: LD_VAR 0 13
53891: NOT
53892: IFFALSE 53896
// exit ;
53894: GO 54140
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
53896: LD_ADDR_VAR 0 13
53900: PUSH
53901: LD_VAR 0 1
53905: PPUSH
53906: LD_VAR 0 13
53910: PPUSH
53911: LD_INT 1
53913: PPUSH
53914: LD_INT 1
53916: PPUSH
53917: CALL 14590 0 4
53921: ST_TO_ADDR
// ComStop ( flame ) ;
53922: LD_VAR 0 1
53926: PPUSH
53927: CALL_OW 141
// for i in list do
53931: LD_ADDR_VAR 0 6
53935: PUSH
53936: LD_VAR 0 13
53940: PUSH
53941: FOR_IN
53942: IFFALSE 53973
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
53944: LD_VAR 0 1
53948: PPUSH
53949: LD_VAR 0 6
53953: PUSH
53954: LD_INT 1
53956: ARRAY
53957: PPUSH
53958: LD_VAR 0 6
53962: PUSH
53963: LD_INT 2
53965: ARRAY
53966: PPUSH
53967: CALL_OW 176
53971: GO 53941
53973: POP
53974: POP
// repeat wait ( 0 0$1 ) ;
53975: LD_INT 35
53977: PPUSH
53978: CALL_OW 67
// task := GetTaskList ( flame ) ;
53982: LD_ADDR_VAR 0 14
53986: PUSH
53987: LD_VAR 0 1
53991: PPUSH
53992: CALL_OW 437
53996: ST_TO_ADDR
// if not task then
53997: LD_VAR 0 14
54001: NOT
54002: IFFALSE 54006
// exit ;
54004: GO 54140
// if task [ 1 ] [ 1 ] <> | then
54006: LD_VAR 0 14
54010: PUSH
54011: LD_INT 1
54013: ARRAY
54014: PUSH
54015: LD_INT 1
54017: ARRAY
54018: PUSH
54019: LD_STRING |
54021: NONEQUAL
54022: IFFALSE 54026
// exit ;
54024: GO 54140
// _x := task [ 1 ] [ 2 ] ;
54026: LD_ADDR_VAR 0 11
54030: PUSH
54031: LD_VAR 0 14
54035: PUSH
54036: LD_INT 1
54038: ARRAY
54039: PUSH
54040: LD_INT 2
54042: ARRAY
54043: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54044: LD_ADDR_VAR 0 12
54048: PUSH
54049: LD_VAR 0 14
54053: PUSH
54054: LD_INT 1
54056: ARRAY
54057: PUSH
54058: LD_INT 3
54060: ARRAY
54061: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54062: LD_VAR 0 11
54066: PPUSH
54067: LD_VAR 0 12
54071: PPUSH
54072: CALL_OW 351
54076: NOT
54077: PUSH
54078: LD_VAR 0 11
54082: PPUSH
54083: LD_VAR 0 12
54087: PPUSH
54088: CALL_OW 554
54092: NOT
54093: OR
54094: IFFALSE 54128
// begin task := Delete ( task , 1 ) ;
54096: LD_ADDR_VAR 0 14
54100: PUSH
54101: LD_VAR 0 14
54105: PPUSH
54106: LD_INT 1
54108: PPUSH
54109: CALL_OW 3
54113: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54114: LD_VAR 0 1
54118: PPUSH
54119: LD_VAR 0 14
54123: PPUSH
54124: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54128: LD_VAR 0 1
54132: PPUSH
54133: CALL_OW 314
54137: NOT
54138: IFFALSE 53975
// end ;
54140: LD_VAR 0 5
54144: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54145: LD_EXP 43
54149: NOT
54150: IFFALSE 54200
54152: GO 54154
54154: DISABLE
// begin initHack := true ;
54155: LD_ADDR_EXP 43
54159: PUSH
54160: LD_INT 1
54162: ST_TO_ADDR
// hackTanks := [ ] ;
54163: LD_ADDR_EXP 44
54167: PUSH
54168: EMPTY
54169: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54170: LD_ADDR_EXP 45
54174: PUSH
54175: EMPTY
54176: ST_TO_ADDR
// hackLimit := 3 ;
54177: LD_ADDR_EXP 46
54181: PUSH
54182: LD_INT 3
54184: ST_TO_ADDR
// hackDist := 12 ;
54185: LD_ADDR_EXP 47
54189: PUSH
54190: LD_INT 12
54192: ST_TO_ADDR
// hackCounter := [ ] ;
54193: LD_ADDR_EXP 48
54197: PUSH
54198: EMPTY
54199: ST_TO_ADDR
// end ;
54200: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54201: LD_EXP 43
54205: PUSH
54206: LD_INT 34
54208: PUSH
54209: LD_INT 99
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PPUSH
54216: CALL_OW 69
54220: AND
54221: IFFALSE 54474
54223: GO 54225
54225: DISABLE
54226: LD_INT 0
54228: PPUSH
54229: PPUSH
// begin enable ;
54230: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54231: LD_ADDR_VAR 0 1
54235: PUSH
54236: LD_INT 34
54238: PUSH
54239: LD_INT 99
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PPUSH
54246: CALL_OW 69
54250: PUSH
54251: FOR_IN
54252: IFFALSE 54472
// begin if not i in hackTanks then
54254: LD_VAR 0 1
54258: PUSH
54259: LD_EXP 44
54263: IN
54264: NOT
54265: IFFALSE 54348
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54267: LD_ADDR_EXP 44
54271: PUSH
54272: LD_EXP 44
54276: PPUSH
54277: LD_EXP 44
54281: PUSH
54282: LD_INT 1
54284: PLUS
54285: PPUSH
54286: LD_VAR 0 1
54290: PPUSH
54291: CALL_OW 1
54295: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54296: LD_ADDR_EXP 45
54300: PUSH
54301: LD_EXP 45
54305: PPUSH
54306: LD_EXP 45
54310: PUSH
54311: LD_INT 1
54313: PLUS
54314: PPUSH
54315: EMPTY
54316: PPUSH
54317: CALL_OW 1
54321: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54322: LD_ADDR_EXP 48
54326: PUSH
54327: LD_EXP 48
54331: PPUSH
54332: LD_EXP 48
54336: PUSH
54337: LD_INT 1
54339: PLUS
54340: PPUSH
54341: EMPTY
54342: PPUSH
54343: CALL_OW 1
54347: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54348: LD_VAR 0 1
54352: PPUSH
54353: CALL_OW 302
54357: NOT
54358: IFFALSE 54371
// begin HackUnlinkAll ( i ) ;
54360: LD_VAR 0 1
54364: PPUSH
54365: CALL 54477 0 1
// continue ;
54369: GO 54251
// end ; HackCheckCapturedStatus ( i ) ;
54371: LD_VAR 0 1
54375: PPUSH
54376: CALL 54920 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54380: LD_ADDR_VAR 0 2
54384: PUSH
54385: LD_INT 81
54387: PUSH
54388: LD_VAR 0 1
54392: PPUSH
54393: CALL_OW 255
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 33
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 91
54414: PUSH
54415: LD_VAR 0 1
54419: PUSH
54420: LD_EXP 47
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 50
54432: PUSH
54433: EMPTY
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: PPUSH
54442: CALL_OW 69
54446: ST_TO_ADDR
// if not tmp then
54447: LD_VAR 0 2
54451: NOT
54452: IFFALSE 54456
// continue ;
54454: GO 54251
// HackLink ( i , tmp ) ;
54456: LD_VAR 0 1
54460: PPUSH
54461: LD_VAR 0 2
54465: PPUSH
54466: CALL 54613 0 2
// end ;
54470: GO 54251
54472: POP
54473: POP
// end ;
54474: PPOPN 2
54476: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54477: LD_INT 0
54479: PPUSH
54480: PPUSH
54481: PPUSH
// if not hack in hackTanks then
54482: LD_VAR 0 1
54486: PUSH
54487: LD_EXP 44
54491: IN
54492: NOT
54493: IFFALSE 54497
// exit ;
54495: GO 54608
// index := GetElementIndex ( hackTanks , hack ) ;
54497: LD_ADDR_VAR 0 4
54501: PUSH
54502: LD_EXP 44
54506: PPUSH
54507: LD_VAR 0 1
54511: PPUSH
54512: CALL 13887 0 2
54516: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54517: LD_EXP 45
54521: PUSH
54522: LD_VAR 0 4
54526: ARRAY
54527: IFFALSE 54608
// begin for i in hackTanksCaptured [ index ] do
54529: LD_ADDR_VAR 0 3
54533: PUSH
54534: LD_EXP 45
54538: PUSH
54539: LD_VAR 0 4
54543: ARRAY
54544: PUSH
54545: FOR_IN
54546: IFFALSE 54572
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54548: LD_VAR 0 3
54552: PUSH
54553: LD_INT 1
54555: ARRAY
54556: PPUSH
54557: LD_VAR 0 3
54561: PUSH
54562: LD_INT 2
54564: ARRAY
54565: PPUSH
54566: CALL_OW 235
54570: GO 54545
54572: POP
54573: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54574: LD_ADDR_EXP 45
54578: PUSH
54579: LD_EXP 45
54583: PPUSH
54584: LD_VAR 0 4
54588: PPUSH
54589: EMPTY
54590: PPUSH
54591: CALL_OW 1
54595: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54596: LD_VAR 0 1
54600: PPUSH
54601: LD_INT 0
54603: PPUSH
54604: CALL_OW 505
// end ; end ;
54608: LD_VAR 0 2
54612: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54613: LD_INT 0
54615: PPUSH
54616: PPUSH
54617: PPUSH
// if not hack in hackTanks or not vehicles then
54618: LD_VAR 0 1
54622: PUSH
54623: LD_EXP 44
54627: IN
54628: NOT
54629: PUSH
54630: LD_VAR 0 2
54634: NOT
54635: OR
54636: IFFALSE 54640
// exit ;
54638: GO 54915
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54640: LD_ADDR_VAR 0 2
54644: PUSH
54645: LD_VAR 0 1
54649: PPUSH
54650: LD_VAR 0 2
54654: PPUSH
54655: LD_INT 1
54657: PPUSH
54658: LD_INT 1
54660: PPUSH
54661: CALL 14537 0 4
54665: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54666: LD_ADDR_VAR 0 5
54670: PUSH
54671: LD_EXP 44
54675: PPUSH
54676: LD_VAR 0 1
54680: PPUSH
54681: CALL 13887 0 2
54685: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54686: LD_EXP 45
54690: PUSH
54691: LD_VAR 0 5
54695: ARRAY
54696: PUSH
54697: LD_EXP 46
54701: LESS
54702: IFFALSE 54891
// begin for i := 1 to vehicles do
54704: LD_ADDR_VAR 0 4
54708: PUSH
54709: DOUBLE
54710: LD_INT 1
54712: DEC
54713: ST_TO_ADDR
54714: LD_VAR 0 2
54718: PUSH
54719: FOR_TO
54720: IFFALSE 54889
// begin if hackTanksCaptured [ index ] = hackLimit then
54722: LD_EXP 45
54726: PUSH
54727: LD_VAR 0 5
54731: ARRAY
54732: PUSH
54733: LD_EXP 46
54737: EQUAL
54738: IFFALSE 54742
// break ;
54740: GO 54889
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54742: LD_ADDR_EXP 48
54746: PUSH
54747: LD_EXP 48
54751: PPUSH
54752: LD_VAR 0 5
54756: PPUSH
54757: LD_EXP 48
54761: PUSH
54762: LD_VAR 0 5
54766: ARRAY
54767: PUSH
54768: LD_INT 1
54770: PLUS
54771: PPUSH
54772: CALL_OW 1
54776: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54777: LD_ADDR_EXP 45
54781: PUSH
54782: LD_EXP 45
54786: PPUSH
54787: LD_VAR 0 5
54791: PUSH
54792: LD_EXP 45
54796: PUSH
54797: LD_VAR 0 5
54801: ARRAY
54802: PUSH
54803: LD_INT 1
54805: PLUS
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PPUSH
54811: LD_VAR 0 2
54815: PUSH
54816: LD_VAR 0 4
54820: ARRAY
54821: PUSH
54822: LD_VAR 0 2
54826: PUSH
54827: LD_VAR 0 4
54831: ARRAY
54832: PPUSH
54833: CALL_OW 255
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PPUSH
54842: CALL 14102 0 3
54846: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54847: LD_VAR 0 2
54851: PUSH
54852: LD_VAR 0 4
54856: ARRAY
54857: PPUSH
54858: LD_VAR 0 1
54862: PPUSH
54863: CALL_OW 255
54867: PPUSH
54868: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54872: LD_VAR 0 2
54876: PUSH
54877: LD_VAR 0 4
54881: ARRAY
54882: PPUSH
54883: CALL_OW 141
// end ;
54887: GO 54719
54889: POP
54890: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54891: LD_VAR 0 1
54895: PPUSH
54896: LD_EXP 45
54900: PUSH
54901: LD_VAR 0 5
54905: ARRAY
54906: PUSH
54907: LD_INT 0
54909: PLUS
54910: PPUSH
54911: CALL_OW 505
// end ;
54915: LD_VAR 0 3
54919: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54920: LD_INT 0
54922: PPUSH
54923: PPUSH
54924: PPUSH
54925: PPUSH
// if not hack in hackTanks then
54926: LD_VAR 0 1
54930: PUSH
54931: LD_EXP 44
54935: IN
54936: NOT
54937: IFFALSE 54941
// exit ;
54939: GO 55181
// index := GetElementIndex ( hackTanks , hack ) ;
54941: LD_ADDR_VAR 0 4
54945: PUSH
54946: LD_EXP 44
54950: PPUSH
54951: LD_VAR 0 1
54955: PPUSH
54956: CALL 13887 0 2
54960: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54961: LD_ADDR_VAR 0 3
54965: PUSH
54966: DOUBLE
54967: LD_EXP 45
54971: PUSH
54972: LD_VAR 0 4
54976: ARRAY
54977: INC
54978: ST_TO_ADDR
54979: LD_INT 1
54981: PUSH
54982: FOR_DOWNTO
54983: IFFALSE 55155
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54985: LD_ADDR_VAR 0 5
54989: PUSH
54990: LD_EXP 45
54994: PUSH
54995: LD_VAR 0 4
54999: ARRAY
55000: PUSH
55001: LD_VAR 0 3
55005: ARRAY
55006: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55007: LD_VAR 0 5
55011: PUSH
55012: LD_INT 1
55014: ARRAY
55015: PPUSH
55016: CALL_OW 302
55020: NOT
55021: PUSH
55022: LD_VAR 0 5
55026: PUSH
55027: LD_INT 1
55029: ARRAY
55030: PPUSH
55031: CALL_OW 255
55035: PUSH
55036: LD_VAR 0 1
55040: PPUSH
55041: CALL_OW 255
55045: NONEQUAL
55046: OR
55047: IFFALSE 55153
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55049: LD_VAR 0 5
55053: PUSH
55054: LD_INT 1
55056: ARRAY
55057: PPUSH
55058: CALL_OW 305
55062: PUSH
55063: LD_VAR 0 5
55067: PUSH
55068: LD_INT 1
55070: ARRAY
55071: PPUSH
55072: CALL_OW 255
55076: PUSH
55077: LD_VAR 0 1
55081: PPUSH
55082: CALL_OW 255
55086: EQUAL
55087: AND
55088: IFFALSE 55112
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55090: LD_VAR 0 5
55094: PUSH
55095: LD_INT 1
55097: ARRAY
55098: PPUSH
55099: LD_VAR 0 5
55103: PUSH
55104: LD_INT 2
55106: ARRAY
55107: PPUSH
55108: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55112: LD_ADDR_EXP 45
55116: PUSH
55117: LD_EXP 45
55121: PPUSH
55122: LD_VAR 0 4
55126: PPUSH
55127: LD_EXP 45
55131: PUSH
55132: LD_VAR 0 4
55136: ARRAY
55137: PPUSH
55138: LD_VAR 0 3
55142: PPUSH
55143: CALL_OW 3
55147: PPUSH
55148: CALL_OW 1
55152: ST_TO_ADDR
// end ; end ;
55153: GO 54982
55155: POP
55156: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55157: LD_VAR 0 1
55161: PPUSH
55162: LD_EXP 45
55166: PUSH
55167: LD_VAR 0 4
55171: ARRAY
55172: PUSH
55173: LD_INT 0
55175: PLUS
55176: PPUSH
55177: CALL_OW 505
// end ;
55181: LD_VAR 0 2
55185: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55186: LD_INT 0
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
// if not hack in hackTanks then
55192: LD_VAR 0 1
55196: PUSH
55197: LD_EXP 44
55201: IN
55202: NOT
55203: IFFALSE 55207
// exit ;
55205: GO 55292
// index := GetElementIndex ( hackTanks , hack ) ;
55207: LD_ADDR_VAR 0 5
55211: PUSH
55212: LD_EXP 44
55216: PPUSH
55217: LD_VAR 0 1
55221: PPUSH
55222: CALL 13887 0 2
55226: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55227: LD_ADDR_VAR 0 4
55231: PUSH
55232: DOUBLE
55233: LD_INT 1
55235: DEC
55236: ST_TO_ADDR
55237: LD_EXP 45
55241: PUSH
55242: LD_VAR 0 5
55246: ARRAY
55247: PUSH
55248: FOR_TO
55249: IFFALSE 55290
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55251: LD_EXP 45
55255: PUSH
55256: LD_VAR 0 5
55260: ARRAY
55261: PUSH
55262: LD_VAR 0 4
55266: ARRAY
55267: PUSH
55268: LD_INT 1
55270: ARRAY
55271: PUSH
55272: LD_VAR 0 2
55276: EQUAL
55277: IFFALSE 55288
// KillUnit ( vehicle ) ;
55279: LD_VAR 0 2
55283: PPUSH
55284: CALL_OW 66
55288: GO 55248
55290: POP
55291: POP
// end ;
55292: LD_VAR 0 3
55296: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55297: LD_EXP 49
55301: NOT
55302: IFFALSE 55337
55304: GO 55306
55306: DISABLE
// begin initMiner := true ;
55307: LD_ADDR_EXP 49
55311: PUSH
55312: LD_INT 1
55314: ST_TO_ADDR
// minersList := [ ] ;
55315: LD_ADDR_EXP 50
55319: PUSH
55320: EMPTY
55321: ST_TO_ADDR
// minerMinesList := [ ] ;
55322: LD_ADDR_EXP 51
55326: PUSH
55327: EMPTY
55328: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55329: LD_ADDR_EXP 52
55333: PUSH
55334: LD_INT 5
55336: ST_TO_ADDR
// end ;
55337: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55338: LD_EXP 49
55342: PUSH
55343: LD_INT 34
55345: PUSH
55346: LD_INT 81
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PPUSH
55353: CALL_OW 69
55357: AND
55358: IFFALSE 55819
55360: GO 55362
55362: DISABLE
55363: LD_INT 0
55365: PPUSH
55366: PPUSH
55367: PPUSH
55368: PPUSH
// begin enable ;
55369: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55370: LD_ADDR_VAR 0 1
55374: PUSH
55375: LD_INT 34
55377: PUSH
55378: LD_INT 81
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PPUSH
55385: CALL_OW 69
55389: PUSH
55390: FOR_IN
55391: IFFALSE 55463
// begin if not i in minersList then
55393: LD_VAR 0 1
55397: PUSH
55398: LD_EXP 50
55402: IN
55403: NOT
55404: IFFALSE 55461
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55406: LD_ADDR_EXP 50
55410: PUSH
55411: LD_EXP 50
55415: PPUSH
55416: LD_EXP 50
55420: PUSH
55421: LD_INT 1
55423: PLUS
55424: PPUSH
55425: LD_VAR 0 1
55429: PPUSH
55430: CALL_OW 1
55434: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55435: LD_ADDR_EXP 51
55439: PUSH
55440: LD_EXP 51
55444: PPUSH
55445: LD_EXP 51
55449: PUSH
55450: LD_INT 1
55452: PLUS
55453: PPUSH
55454: EMPTY
55455: PPUSH
55456: CALL_OW 1
55460: ST_TO_ADDR
// end end ;
55461: GO 55390
55463: POP
55464: POP
// for i := minerMinesList downto 1 do
55465: LD_ADDR_VAR 0 1
55469: PUSH
55470: DOUBLE
55471: LD_EXP 51
55475: INC
55476: ST_TO_ADDR
55477: LD_INT 1
55479: PUSH
55480: FOR_DOWNTO
55481: IFFALSE 55817
// begin if IsLive ( minersList [ i ] ) then
55483: LD_EXP 50
55487: PUSH
55488: LD_VAR 0 1
55492: ARRAY
55493: PPUSH
55494: CALL_OW 300
55498: IFFALSE 55526
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55500: LD_EXP 50
55504: PUSH
55505: LD_VAR 0 1
55509: ARRAY
55510: PPUSH
55511: LD_EXP 51
55515: PUSH
55516: LD_VAR 0 1
55520: ARRAY
55521: PPUSH
55522: CALL_OW 505
// if not minerMinesList [ i ] then
55526: LD_EXP 51
55530: PUSH
55531: LD_VAR 0 1
55535: ARRAY
55536: NOT
55537: IFFALSE 55541
// continue ;
55539: GO 55480
// for j := minerMinesList [ i ] downto 1 do
55541: LD_ADDR_VAR 0 2
55545: PUSH
55546: DOUBLE
55547: LD_EXP 51
55551: PUSH
55552: LD_VAR 0 1
55556: ARRAY
55557: INC
55558: ST_TO_ADDR
55559: LD_INT 1
55561: PUSH
55562: FOR_DOWNTO
55563: IFFALSE 55813
// begin side := GetSide ( minersList [ i ] ) ;
55565: LD_ADDR_VAR 0 3
55569: PUSH
55570: LD_EXP 50
55574: PUSH
55575: LD_VAR 0 1
55579: ARRAY
55580: PPUSH
55581: CALL_OW 255
55585: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55586: LD_ADDR_VAR 0 4
55590: PUSH
55591: LD_EXP 51
55595: PUSH
55596: LD_VAR 0 1
55600: ARRAY
55601: PUSH
55602: LD_VAR 0 2
55606: ARRAY
55607: PUSH
55608: LD_INT 1
55610: ARRAY
55611: PPUSH
55612: LD_EXP 51
55616: PUSH
55617: LD_VAR 0 1
55621: ARRAY
55622: PUSH
55623: LD_VAR 0 2
55627: ARRAY
55628: PUSH
55629: LD_INT 2
55631: ARRAY
55632: PPUSH
55633: CALL_OW 428
55637: ST_TO_ADDR
// if not tmp then
55638: LD_VAR 0 4
55642: NOT
55643: IFFALSE 55647
// continue ;
55645: GO 55562
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55647: LD_VAR 0 4
55651: PUSH
55652: LD_INT 81
55654: PUSH
55655: LD_VAR 0 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PPUSH
55664: CALL_OW 69
55668: IN
55669: PUSH
55670: LD_EXP 51
55674: PUSH
55675: LD_VAR 0 1
55679: ARRAY
55680: PUSH
55681: LD_VAR 0 2
55685: ARRAY
55686: PUSH
55687: LD_INT 1
55689: ARRAY
55690: PPUSH
55691: LD_EXP 51
55695: PUSH
55696: LD_VAR 0 1
55700: ARRAY
55701: PUSH
55702: LD_VAR 0 2
55706: ARRAY
55707: PUSH
55708: LD_INT 2
55710: ARRAY
55711: PPUSH
55712: CALL_OW 458
55716: AND
55717: IFFALSE 55811
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55719: LD_EXP 51
55723: PUSH
55724: LD_VAR 0 1
55728: ARRAY
55729: PUSH
55730: LD_VAR 0 2
55734: ARRAY
55735: PUSH
55736: LD_INT 1
55738: ARRAY
55739: PPUSH
55740: LD_EXP 51
55744: PUSH
55745: LD_VAR 0 1
55749: ARRAY
55750: PUSH
55751: LD_VAR 0 2
55755: ARRAY
55756: PUSH
55757: LD_INT 2
55759: ARRAY
55760: PPUSH
55761: LD_VAR 0 3
55765: PPUSH
55766: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55770: LD_ADDR_EXP 51
55774: PUSH
55775: LD_EXP 51
55779: PPUSH
55780: LD_VAR 0 1
55784: PPUSH
55785: LD_EXP 51
55789: PUSH
55790: LD_VAR 0 1
55794: ARRAY
55795: PPUSH
55796: LD_VAR 0 2
55800: PPUSH
55801: CALL_OW 3
55805: PPUSH
55806: CALL_OW 1
55810: ST_TO_ADDR
// end ; end ;
55811: GO 55562
55813: POP
55814: POP
// end ;
55815: GO 55480
55817: POP
55818: POP
// end ;
55819: PPOPN 4
55821: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55822: LD_INT 0
55824: PPUSH
55825: PPUSH
// result := false ;
55826: LD_ADDR_VAR 0 4
55830: PUSH
55831: LD_INT 0
55833: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55834: LD_VAR 0 1
55838: PPUSH
55839: CALL_OW 264
55843: PUSH
55844: LD_INT 81
55846: EQUAL
55847: NOT
55848: IFFALSE 55852
// exit ;
55850: GO 56092
// index := GetElementIndex ( minersList , unit ) ;
55852: LD_ADDR_VAR 0 5
55856: PUSH
55857: LD_EXP 50
55861: PPUSH
55862: LD_VAR 0 1
55866: PPUSH
55867: CALL 13887 0 2
55871: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55872: LD_EXP 51
55876: PUSH
55877: LD_VAR 0 5
55881: ARRAY
55882: PUSH
55883: LD_EXP 52
55887: GREATEREQUAL
55888: IFFALSE 55892
// exit ;
55890: GO 56092
// ComMoveXY ( unit , x , y ) ;
55892: LD_VAR 0 1
55896: PPUSH
55897: LD_VAR 0 2
55901: PPUSH
55902: LD_VAR 0 3
55906: PPUSH
55907: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55911: LD_INT 35
55913: PPUSH
55914: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55918: LD_VAR 0 1
55922: PPUSH
55923: LD_VAR 0 2
55927: PPUSH
55928: LD_VAR 0 3
55932: PPUSH
55933: CALL 45648 0 3
55937: NOT
55938: PUSH
55939: LD_VAR 0 1
55943: PPUSH
55944: CALL_OW 314
55948: AND
55949: IFFALSE 55953
// exit ;
55951: GO 56092
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55953: LD_VAR 0 2
55957: PPUSH
55958: LD_VAR 0 3
55962: PPUSH
55963: CALL_OW 428
55967: PUSH
55968: LD_VAR 0 1
55972: EQUAL
55973: PUSH
55974: LD_VAR 0 1
55978: PPUSH
55979: CALL_OW 314
55983: NOT
55984: AND
55985: IFFALSE 55911
// PlaySoundXY ( x , y , PlantMine ) ;
55987: LD_VAR 0 2
55991: PPUSH
55992: LD_VAR 0 3
55996: PPUSH
55997: LD_STRING PlantMine
55999: PPUSH
56000: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56004: LD_VAR 0 2
56008: PPUSH
56009: LD_VAR 0 3
56013: PPUSH
56014: LD_VAR 0 1
56018: PPUSH
56019: CALL_OW 255
56023: PPUSH
56024: LD_INT 0
56026: PPUSH
56027: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56031: LD_ADDR_EXP 51
56035: PUSH
56036: LD_EXP 51
56040: PPUSH
56041: LD_VAR 0 5
56045: PUSH
56046: LD_EXP 51
56050: PUSH
56051: LD_VAR 0 5
56055: ARRAY
56056: PUSH
56057: LD_INT 1
56059: PLUS
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PPUSH
56065: LD_VAR 0 2
56069: PUSH
56070: LD_VAR 0 3
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PPUSH
56079: CALL 14102 0 3
56083: ST_TO_ADDR
// result := true ;
56084: LD_ADDR_VAR 0 4
56088: PUSH
56089: LD_INT 1
56091: ST_TO_ADDR
// end ;
56092: LD_VAR 0 4
56096: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56097: LD_INT 0
56099: PPUSH
56100: PPUSH
56101: PPUSH
// if not unit in minersList then
56102: LD_VAR 0 1
56106: PUSH
56107: LD_EXP 50
56111: IN
56112: NOT
56113: IFFALSE 56117
// exit ;
56115: GO 56509
// index := GetElementIndex ( minersList , unit ) ;
56117: LD_ADDR_VAR 0 6
56121: PUSH
56122: LD_EXP 50
56126: PPUSH
56127: LD_VAR 0 1
56131: PPUSH
56132: CALL 13887 0 2
56136: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56137: LD_ADDR_VAR 0 5
56141: PUSH
56142: DOUBLE
56143: LD_EXP 51
56147: PUSH
56148: LD_VAR 0 6
56152: ARRAY
56153: INC
56154: ST_TO_ADDR
56155: LD_INT 1
56157: PUSH
56158: FOR_DOWNTO
56159: IFFALSE 56320
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56161: LD_EXP 51
56165: PUSH
56166: LD_VAR 0 6
56170: ARRAY
56171: PUSH
56172: LD_VAR 0 5
56176: ARRAY
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: PUSH
56182: LD_VAR 0 2
56186: EQUAL
56187: PUSH
56188: LD_EXP 51
56192: PUSH
56193: LD_VAR 0 6
56197: ARRAY
56198: PUSH
56199: LD_VAR 0 5
56203: ARRAY
56204: PUSH
56205: LD_INT 2
56207: ARRAY
56208: PUSH
56209: LD_VAR 0 3
56213: EQUAL
56214: AND
56215: IFFALSE 56318
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56217: LD_EXP 51
56221: PUSH
56222: LD_VAR 0 6
56226: ARRAY
56227: PUSH
56228: LD_VAR 0 5
56232: ARRAY
56233: PUSH
56234: LD_INT 1
56236: ARRAY
56237: PPUSH
56238: LD_EXP 51
56242: PUSH
56243: LD_VAR 0 6
56247: ARRAY
56248: PUSH
56249: LD_VAR 0 5
56253: ARRAY
56254: PUSH
56255: LD_INT 2
56257: ARRAY
56258: PPUSH
56259: LD_VAR 0 1
56263: PPUSH
56264: CALL_OW 255
56268: PPUSH
56269: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56273: LD_ADDR_EXP 51
56277: PUSH
56278: LD_EXP 51
56282: PPUSH
56283: LD_VAR 0 6
56287: PPUSH
56288: LD_EXP 51
56292: PUSH
56293: LD_VAR 0 6
56297: ARRAY
56298: PPUSH
56299: LD_VAR 0 5
56303: PPUSH
56304: CALL_OW 3
56308: PPUSH
56309: CALL_OW 1
56313: ST_TO_ADDR
// exit ;
56314: POP
56315: POP
56316: GO 56509
// end ; end ;
56318: GO 56158
56320: POP
56321: POP
// for i := minerMinesList [ index ] downto 1 do
56322: LD_ADDR_VAR 0 5
56326: PUSH
56327: DOUBLE
56328: LD_EXP 51
56332: PUSH
56333: LD_VAR 0 6
56337: ARRAY
56338: INC
56339: ST_TO_ADDR
56340: LD_INT 1
56342: PUSH
56343: FOR_DOWNTO
56344: IFFALSE 56507
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56346: LD_EXP 51
56350: PUSH
56351: LD_VAR 0 6
56355: ARRAY
56356: PUSH
56357: LD_VAR 0 5
56361: ARRAY
56362: PUSH
56363: LD_INT 1
56365: ARRAY
56366: PPUSH
56367: LD_EXP 51
56371: PUSH
56372: LD_VAR 0 6
56376: ARRAY
56377: PUSH
56378: LD_VAR 0 5
56382: ARRAY
56383: PUSH
56384: LD_INT 2
56386: ARRAY
56387: PPUSH
56388: LD_VAR 0 2
56392: PPUSH
56393: LD_VAR 0 3
56397: PPUSH
56398: CALL_OW 298
56402: PUSH
56403: LD_INT 6
56405: LESS
56406: IFFALSE 56505
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56408: LD_EXP 51
56412: PUSH
56413: LD_VAR 0 6
56417: ARRAY
56418: PUSH
56419: LD_VAR 0 5
56423: ARRAY
56424: PUSH
56425: LD_INT 1
56427: ARRAY
56428: PPUSH
56429: LD_EXP 51
56433: PUSH
56434: LD_VAR 0 6
56438: ARRAY
56439: PUSH
56440: LD_VAR 0 5
56444: ARRAY
56445: PUSH
56446: LD_INT 2
56448: ARRAY
56449: PPUSH
56450: LD_VAR 0 1
56454: PPUSH
56455: CALL_OW 255
56459: PPUSH
56460: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56464: LD_ADDR_EXP 51
56468: PUSH
56469: LD_EXP 51
56473: PPUSH
56474: LD_VAR 0 6
56478: PPUSH
56479: LD_EXP 51
56483: PUSH
56484: LD_VAR 0 6
56488: ARRAY
56489: PPUSH
56490: LD_VAR 0 5
56494: PPUSH
56495: CALL_OW 3
56499: PPUSH
56500: CALL_OW 1
56504: ST_TO_ADDR
// end ; end ;
56505: GO 56343
56507: POP
56508: POP
// end ;
56509: LD_VAR 0 4
56513: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56514: LD_INT 0
56516: PPUSH
56517: PPUSH
56518: PPUSH
56519: PPUSH
56520: PPUSH
56521: PPUSH
56522: PPUSH
56523: PPUSH
56524: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 264
56534: PUSH
56535: LD_INT 81
56537: EQUAL
56538: NOT
56539: PUSH
56540: LD_VAR 0 1
56544: PUSH
56545: LD_EXP 50
56549: IN
56550: NOT
56551: OR
56552: IFFALSE 56556
// exit ;
56554: GO 56878
// index := GetElementIndex ( minersList , unit ) ;
56556: LD_ADDR_VAR 0 6
56560: PUSH
56561: LD_EXP 50
56565: PPUSH
56566: LD_VAR 0 1
56570: PPUSH
56571: CALL 13887 0 2
56575: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56576: LD_ADDR_VAR 0 8
56580: PUSH
56581: LD_EXP 52
56585: PUSH
56586: LD_EXP 51
56590: PUSH
56591: LD_VAR 0 6
56595: ARRAY
56596: MINUS
56597: ST_TO_ADDR
// if not minesFreeAmount then
56598: LD_VAR 0 8
56602: NOT
56603: IFFALSE 56607
// exit ;
56605: GO 56878
// tmp := [ ] ;
56607: LD_ADDR_VAR 0 7
56611: PUSH
56612: EMPTY
56613: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56614: LD_ADDR_VAR 0 5
56618: PUSH
56619: DOUBLE
56620: LD_INT 1
56622: DEC
56623: ST_TO_ADDR
56624: LD_VAR 0 8
56628: PUSH
56629: FOR_TO
56630: IFFALSE 56825
// begin _d := rand ( 0 , 5 ) ;
56632: LD_ADDR_VAR 0 11
56636: PUSH
56637: LD_INT 0
56639: PPUSH
56640: LD_INT 5
56642: PPUSH
56643: CALL_OW 12
56647: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56648: LD_ADDR_VAR 0 12
56652: PUSH
56653: LD_INT 2
56655: PPUSH
56656: LD_INT 6
56658: PPUSH
56659: CALL_OW 12
56663: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56664: LD_ADDR_VAR 0 9
56668: PUSH
56669: LD_VAR 0 2
56673: PPUSH
56674: LD_VAR 0 11
56678: PPUSH
56679: LD_VAR 0 12
56683: PPUSH
56684: CALL_OW 272
56688: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56689: LD_ADDR_VAR 0 10
56693: PUSH
56694: LD_VAR 0 3
56698: PPUSH
56699: LD_VAR 0 11
56703: PPUSH
56704: LD_VAR 0 12
56708: PPUSH
56709: CALL_OW 273
56713: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56714: LD_VAR 0 9
56718: PPUSH
56719: LD_VAR 0 10
56723: PPUSH
56724: CALL_OW 488
56728: PUSH
56729: LD_VAR 0 9
56733: PUSH
56734: LD_VAR 0 10
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_VAR 0 7
56747: IN
56748: NOT
56749: AND
56750: PUSH
56751: LD_VAR 0 9
56755: PPUSH
56756: LD_VAR 0 10
56760: PPUSH
56761: CALL_OW 458
56765: NOT
56766: AND
56767: IFFALSE 56809
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56769: LD_ADDR_VAR 0 7
56773: PUSH
56774: LD_VAR 0 7
56778: PPUSH
56779: LD_VAR 0 7
56783: PUSH
56784: LD_INT 1
56786: PLUS
56787: PPUSH
56788: LD_VAR 0 9
56792: PUSH
56793: LD_VAR 0 10
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PPUSH
56802: CALL_OW 1
56806: ST_TO_ADDR
56807: GO 56823
// i := i - 1 ;
56809: LD_ADDR_VAR 0 5
56813: PUSH
56814: LD_VAR 0 5
56818: PUSH
56819: LD_INT 1
56821: MINUS
56822: ST_TO_ADDR
// end ;
56823: GO 56629
56825: POP
56826: POP
// for i in tmp do
56827: LD_ADDR_VAR 0 5
56831: PUSH
56832: LD_VAR 0 7
56836: PUSH
56837: FOR_IN
56838: IFFALSE 56876
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56840: LD_VAR 0 1
56844: PPUSH
56845: LD_VAR 0 5
56849: PUSH
56850: LD_INT 1
56852: ARRAY
56853: PPUSH
56854: LD_VAR 0 5
56858: PUSH
56859: LD_INT 2
56861: ARRAY
56862: PPUSH
56863: CALL 55822 0 3
56867: NOT
56868: IFFALSE 56874
// exit ;
56870: POP
56871: POP
56872: GO 56878
56874: GO 56837
56876: POP
56877: POP
// end ;
56878: LD_VAR 0 4
56882: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
56883: LD_INT 0
56885: PPUSH
56886: PPUSH
56887: PPUSH
56888: PPUSH
56889: PPUSH
56890: PPUSH
56891: PPUSH
56892: PPUSH
56893: PPUSH
// if GetClass ( unit ) <> class_sniper then
56894: LD_VAR 0 1
56898: PPUSH
56899: CALL_OW 257
56903: PUSH
56904: LD_INT 5
56906: NONEQUAL
56907: IFFALSE 56911
// exit ;
56909: GO 57377
// dist := 8 ;
56911: LD_ADDR_VAR 0 5
56915: PUSH
56916: LD_INT 8
56918: ST_TO_ADDR
// viewRange := 12 ;
56919: LD_ADDR_VAR 0 8
56923: PUSH
56924: LD_INT 12
56926: ST_TO_ADDR
// side := GetSide ( unit ) ;
56927: LD_ADDR_VAR 0 6
56931: PUSH
56932: LD_VAR 0 1
56936: PPUSH
56937: CALL_OW 255
56941: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56942: LD_INT 61
56944: PPUSH
56945: LD_VAR 0 6
56949: PPUSH
56950: CALL_OW 321
56954: PUSH
56955: LD_INT 2
56957: EQUAL
56958: IFFALSE 56968
// viewRange := 16 ;
56960: LD_ADDR_VAR 0 8
56964: PUSH
56965: LD_INT 16
56967: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56968: LD_VAR 0 1
56972: PPUSH
56973: LD_VAR 0 2
56977: PPUSH
56978: LD_VAR 0 3
56982: PPUSH
56983: CALL_OW 297
56987: PUSH
56988: LD_VAR 0 5
56992: GREATER
56993: IFFALSE 57072
// begin ComMoveXY ( unit , x , y ) ;
56995: LD_VAR 0 1
56999: PPUSH
57000: LD_VAR 0 2
57004: PPUSH
57005: LD_VAR 0 3
57009: PPUSH
57010: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57014: LD_INT 35
57016: PPUSH
57017: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57021: LD_VAR 0 1
57025: PPUSH
57026: LD_VAR 0 2
57030: PPUSH
57031: LD_VAR 0 3
57035: PPUSH
57036: CALL 45648 0 3
57040: NOT
57041: IFFALSE 57045
// exit ;
57043: GO 57377
// until GetDistUnitXY ( unit , x , y ) < dist ;
57045: LD_VAR 0 1
57049: PPUSH
57050: LD_VAR 0 2
57054: PPUSH
57055: LD_VAR 0 3
57059: PPUSH
57060: CALL_OW 297
57064: PUSH
57065: LD_VAR 0 5
57069: LESS
57070: IFFALSE 57014
// end ; ComTurnXY ( unit , x , y ) ;
57072: LD_VAR 0 1
57076: PPUSH
57077: LD_VAR 0 2
57081: PPUSH
57082: LD_VAR 0 3
57086: PPUSH
57087: CALL_OW 118
// repeat if Multiplayer then
57091: LD_OWVAR 4
57095: IFFALSE 57106
// wait ( 35 ) else
57097: LD_INT 35
57099: PPUSH
57100: CALL_OW 67
57104: GO 57113
// wait ( 5 ) ;
57106: LD_INT 5
57108: PPUSH
57109: CALL_OW 67
// _d := GetDir ( unit ) ;
57113: LD_ADDR_VAR 0 11
57117: PUSH
57118: LD_VAR 0 1
57122: PPUSH
57123: CALL_OW 254
57127: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57128: LD_ADDR_VAR 0 7
57132: PUSH
57133: LD_VAR 0 1
57137: PPUSH
57138: CALL_OW 250
57142: PPUSH
57143: LD_VAR 0 1
57147: PPUSH
57148: CALL_OW 251
57152: PPUSH
57153: LD_VAR 0 2
57157: PPUSH
57158: LD_VAR 0 3
57162: PPUSH
57163: CALL 48256 0 4
57167: ST_TO_ADDR
// until dir = _d ;
57168: LD_VAR 0 7
57172: PUSH
57173: LD_VAR 0 11
57177: EQUAL
57178: IFFALSE 57091
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57180: LD_ADDR_VAR 0 9
57184: PUSH
57185: LD_VAR 0 1
57189: PPUSH
57190: CALL_OW 250
57194: PPUSH
57195: LD_VAR 0 7
57199: PPUSH
57200: LD_VAR 0 5
57204: PPUSH
57205: CALL_OW 272
57209: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57210: LD_ADDR_VAR 0 10
57214: PUSH
57215: LD_VAR 0 1
57219: PPUSH
57220: CALL_OW 251
57224: PPUSH
57225: LD_VAR 0 7
57229: PPUSH
57230: LD_VAR 0 5
57234: PPUSH
57235: CALL_OW 273
57239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57240: LD_VAR 0 9
57244: PPUSH
57245: LD_VAR 0 10
57249: PPUSH
57250: CALL_OW 488
57254: NOT
57255: IFFALSE 57259
// exit ;
57257: GO 57377
// ComAnimCustom ( unit , 1 ) ;
57259: LD_VAR 0 1
57263: PPUSH
57264: LD_INT 1
57266: PPUSH
57267: CALL_OW 592
// p := 0 ;
57271: LD_ADDR_VAR 0 12
57275: PUSH
57276: LD_INT 0
57278: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57279: LD_VAR 0 9
57283: PPUSH
57284: LD_VAR 0 10
57288: PPUSH
57289: LD_VAR 0 6
57293: PPUSH
57294: LD_VAR 0 8
57298: PPUSH
57299: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57303: LD_INT 35
57305: PPUSH
57306: CALL_OW 67
// p := Inc ( p ) ;
57310: LD_ADDR_VAR 0 12
57314: PUSH
57315: LD_VAR 0 12
57319: PPUSH
57320: CALL 48212 0 1
57324: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57325: LD_VAR 0 12
57329: PUSH
57330: LD_INT 3
57332: EQUAL
57333: PUSH
57334: LD_VAR 0 1
57338: PPUSH
57339: CALL_OW 302
57343: NOT
57344: OR
57345: PUSH
57346: LD_VAR 0 1
57350: PPUSH
57351: CALL_OW 301
57355: OR
57356: IFFALSE 57303
// RemoveSeeing ( _x , _y , side ) ;
57358: LD_VAR 0 9
57362: PPUSH
57363: LD_VAR 0 10
57367: PPUSH
57368: LD_VAR 0 6
57372: PPUSH
57373: CALL_OW 331
// end ; end_of_file
57377: LD_VAR 0 4
57381: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57382: LD_EXP 38
57386: IFFALSE 57727
57388: GO 57390
57390: DISABLE
57391: LD_INT 0
57393: PPUSH
57394: PPUSH
57395: PPUSH
// begin mpKingPoints := [ ] ;
57396: LD_ADDR_EXP 53
57400: PUSH
57401: EMPTY
57402: ST_TO_ADDR
// if mpTeamGame then
57403: LD_EXP 11
57407: IFFALSE 57461
// begin for i := 1 to Count ( mpTeams ) do
57409: LD_ADDR_VAR 0 1
57413: PUSH
57414: DOUBLE
57415: LD_INT 1
57417: DEC
57418: ST_TO_ADDR
57419: LD_EXP 10
57423: PPUSH
57424: CALL 11242 0 1
57428: PUSH
57429: FOR_TO
57430: IFFALSE 57457
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57432: LD_ADDR_EXP 53
57436: PUSH
57437: LD_EXP 53
57441: PPUSH
57442: LD_VAR 0 1
57446: PPUSH
57447: LD_INT 0
57449: PPUSH
57450: CALL_OW 1
57454: ST_TO_ADDR
57455: GO 57429
57457: POP
57458: POP
// end else
57459: GO 57504
// begin for i := 1 to 8 do
57461: LD_ADDR_VAR 0 1
57465: PUSH
57466: DOUBLE
57467: LD_INT 1
57469: DEC
57470: ST_TO_ADDR
57471: LD_INT 8
57473: PUSH
57474: FOR_TO
57475: IFFALSE 57502
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57477: LD_ADDR_EXP 53
57481: PUSH
57482: LD_EXP 53
57486: PPUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: LD_INT 0
57494: PPUSH
57495: CALL_OW 1
57499: ST_TO_ADDR
57500: GO 57474
57502: POP
57503: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57504: LD_ADDR_VAR 0 3
57508: PUSH
57509: LD_EXP 2
57513: PPUSH
57514: LD_INT 0
57516: PPUSH
57517: CALL_OW 517
57521: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57522: LD_ADDR_VAR 0 1
57526: PUSH
57527: DOUBLE
57528: LD_INT 1
57530: DEC
57531: ST_TO_ADDR
57532: LD_VAR 0 3
57536: PUSH
57537: LD_INT 1
57539: ARRAY
57540: PUSH
57541: FOR_TO
57542: IFFALSE 57609
// for j := 1 to 8 do
57544: LD_ADDR_VAR 0 2
57548: PUSH
57549: DOUBLE
57550: LD_INT 1
57552: DEC
57553: ST_TO_ADDR
57554: LD_INT 8
57556: PUSH
57557: FOR_TO
57558: IFFALSE 57605
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57560: LD_VAR 0 3
57564: PUSH
57565: LD_INT 1
57567: ARRAY
57568: PUSH
57569: LD_VAR 0 1
57573: ARRAY
57574: PPUSH
57575: LD_VAR 0 3
57579: PUSH
57580: LD_INT 2
57582: ARRAY
57583: PUSH
57584: LD_VAR 0 1
57588: ARRAY
57589: PPUSH
57590: LD_VAR 0 2
57594: PPUSH
57595: LD_INT 12
57597: NEG
57598: PPUSH
57599: CALL_OW 330
57603: GO 57557
57605: POP
57606: POP
57607: GO 57541
57609: POP
57610: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57611: LD_EXP 33
57615: PPUSH
57616: LD_INT 1
57618: PPUSH
57619: CALL_OW 424
// UpdateCounter ;
57623: CALL 58231 0 0
// repeat wait ( 0 0$1 ) ;
57627: LD_INT 35
57629: PPUSH
57630: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57634: LD_ADDR_VAR 0 3
57638: PUSH
57639: LD_EXP 33
57643: PPUSH
57644: LD_INT 3
57646: PUSH
57647: LD_INT 57
57649: PUSH
57650: EMPTY
57651: LIST
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 50
57659: PUSH
57660: EMPTY
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: LD_INT 30
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 30
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: PPUSH
57696: CALL_OW 70
57700: ST_TO_ADDR
// if not tmp then
57701: LD_VAR 0 3
57705: NOT
57706: IFFALSE 57710
// continue ;
57708: GO 57627
// AddPoints ( tmp ) ;
57710: LD_VAR 0 3
57714: PPUSH
57715: CALL 57909 0 1
// UpdateCounter ;
57719: CALL 58231 0 0
// until false ;
57723: LD_INT 0
57725: IFFALSE 57627
// end ;
57727: PPOPN 3
57729: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
57730: LD_EXP 38
57734: PUSH
57735: LD_EXP 36
57739: AND
57740: IFFALSE 57906
57742: GO 57744
57744: DISABLE
57745: LD_INT 0
57747: PPUSH
57748: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
57749: LD_ADDR_VAR 0 2
57753: PUSH
57754: LD_EXP 2
57758: PPUSH
57759: LD_INT 0
57761: PPUSH
57762: CALL_OW 517
57766: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57767: LD_ADDR_VAR 0 1
57771: PUSH
57772: DOUBLE
57773: LD_INT 1
57775: DEC
57776: ST_TO_ADDR
57777: LD_VAR 0 2
57781: PUSH
57782: LD_INT 1
57784: ARRAY
57785: PUSH
57786: FOR_TO
57787: IFFALSE 57828
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
57789: LD_VAR 0 2
57793: PUSH
57794: LD_INT 1
57796: ARRAY
57797: PUSH
57798: LD_VAR 0 1
57802: ARRAY
57803: PPUSH
57804: LD_VAR 0 2
57808: PUSH
57809: LD_INT 2
57811: ARRAY
57812: PUSH
57813: LD_VAR 0 1
57817: ARRAY
57818: PPUSH
57819: LD_INT 125
57821: PPUSH
57822: CALL_OW 495
57826: GO 57786
57828: POP
57829: POP
// repeat wait ( mpEmissions ) ;
57830: LD_EXP 36
57834: PPUSH
57835: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
57839: LD_ADDR_VAR 0 1
57843: PUSH
57844: DOUBLE
57845: LD_INT 1
57847: DEC
57848: ST_TO_ADDR
57849: LD_VAR 0 2
57853: PUSH
57854: LD_INT 1
57856: ARRAY
57857: PUSH
57858: FOR_TO
57859: IFFALSE 57900
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
57861: LD_VAR 0 2
57865: PUSH
57866: LD_INT 1
57868: ARRAY
57869: PUSH
57870: LD_VAR 0 1
57874: ARRAY
57875: PPUSH
57876: LD_VAR 0 2
57880: PUSH
57881: LD_INT 2
57883: ARRAY
57884: PUSH
57885: LD_VAR 0 1
57889: ARRAY
57890: PPUSH
57891: LD_INT 15
57893: PPUSH
57894: CALL_OW 495
57898: GO 57858
57900: POP
57901: POP
// until false ;
57902: LD_INT 0
57904: IFFALSE 57830
// end ;
57906: PPOPN 2
57908: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
57909: LD_INT 0
57911: PPUSH
57912: PPUSH
57913: PPUSH
57914: PPUSH
57915: PPUSH
// if mpTeamGame then
57916: LD_EXP 11
57920: IFFALSE 58117
// begin first := depots [ 1 ] ;
57922: LD_ADDR_VAR 0 4
57926: PUSH
57927: LD_VAR 0 1
57931: PUSH
57932: LD_INT 1
57934: ARRAY
57935: ST_TO_ADDR
// side := GetSide ( first ) ;
57936: LD_ADDR_VAR 0 6
57940: PUSH
57941: LD_VAR 0 4
57945: PPUSH
57946: CALL_OW 255
57950: ST_TO_ADDR
// for i := 1 to mpTeams do
57951: LD_ADDR_VAR 0 3
57955: PUSH
57956: DOUBLE
57957: LD_INT 1
57959: DEC
57960: ST_TO_ADDR
57961: LD_EXP 10
57965: PUSH
57966: FOR_TO
57967: IFFALSE 58001
// if side in mpTeams [ i ] then
57969: LD_VAR 0 6
57973: PUSH
57974: LD_EXP 10
57978: PUSH
57979: LD_VAR 0 3
57983: ARRAY
57984: IN
57985: IFFALSE 57999
// begin team := i ;
57987: LD_ADDR_VAR 0 5
57991: PUSH
57992: LD_VAR 0 3
57996: ST_TO_ADDR
// break ;
57997: GO 58001
// end ;
57999: GO 57966
58001: POP
58002: POP
// if not team then
58003: LD_VAR 0 5
58007: NOT
58008: IFFALSE 58012
// exit ;
58010: GO 58226
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58012: LD_EXP 33
58016: PPUSH
58017: LD_INT 81
58019: PUSH
58020: LD_VAR 0 6
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PPUSH
58029: CALL_OW 70
58033: IFFALSE 58037
// exit ;
58035: GO 58226
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58037: LD_ADDR_EXP 53
58041: PUSH
58042: LD_EXP 53
58046: PPUSH
58047: LD_VAR 0 5
58051: PPUSH
58052: LD_EXP 53
58056: PUSH
58057: LD_VAR 0 5
58061: ARRAY
58062: PUSH
58063: LD_INT 1
58065: PLUS
58066: PPUSH
58067: CALL_OW 1
58071: ST_TO_ADDR
// for i in mpTeams [ team ] do
58072: LD_ADDR_VAR 0 3
58076: PUSH
58077: LD_EXP 10
58081: PUSH
58082: LD_VAR 0 5
58086: ARRAY
58087: PUSH
58088: FOR_IN
58089: IFFALSE 58113
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58091: LD_VAR 0 3
58095: PPUSH
58096: LD_EXP 53
58100: PUSH
58101: LD_VAR 0 5
58105: ARRAY
58106: PPUSH
58107: CALL_OW 506
58111: GO 58088
58113: POP
58114: POP
// end else
58115: GO 58226
// begin first := depots [ 1 ] ;
58117: LD_ADDR_VAR 0 4
58121: PUSH
58122: LD_VAR 0 1
58126: PUSH
58127: LD_INT 1
58129: ARRAY
58130: ST_TO_ADDR
// side := GetSide ( first ) ;
58131: LD_ADDR_VAR 0 6
58135: PUSH
58136: LD_VAR 0 4
58140: PPUSH
58141: CALL_OW 255
58145: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58146: LD_EXP 33
58150: PPUSH
58151: LD_INT 81
58153: PUSH
58154: LD_VAR 0 6
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PPUSH
58163: CALL_OW 70
58167: IFFALSE 58171
// exit ;
58169: GO 58226
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58171: LD_ADDR_EXP 53
58175: PUSH
58176: LD_EXP 53
58180: PPUSH
58181: LD_VAR 0 6
58185: PPUSH
58186: LD_EXP 53
58190: PUSH
58191: LD_VAR 0 6
58195: ARRAY
58196: PUSH
58197: LD_INT 1
58199: PLUS
58200: PPUSH
58201: CALL_OW 1
58205: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58206: LD_VAR 0 6
58210: PPUSH
58211: LD_EXP 53
58215: PUSH
58216: LD_VAR 0 6
58220: ARRAY
58221: PPUSH
58222: CALL_OW 506
// end ; end ;
58226: LD_VAR 0 2
58230: RET
// function UpdateCounter ; var i ; begin
58231: LD_INT 0
58233: PPUSH
58234: PPUSH
// result := [ ] ;
58235: LD_ADDR_VAR 0 1
58239: PUSH
58240: EMPTY
58241: ST_TO_ADDR
// if mpTeamGame then
58242: LD_EXP 11
58246: IFFALSE 58313
// begin for i := 1 to mpTeams do
58248: LD_ADDR_VAR 0 2
58252: PUSH
58253: DOUBLE
58254: LD_INT 1
58256: DEC
58257: ST_TO_ADDR
58258: LD_EXP 10
58262: PUSH
58263: FOR_TO
58264: IFFALSE 58309
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58266: LD_ADDR_VAR 0 1
58270: PUSH
58271: LD_VAR 0 1
58275: PUSH
58276: LD_STRING #KingoftheHill-Team
58278: PUSH
58279: LD_VAR 0 2
58283: PUSH
58284: LD_EXP 53
58288: PUSH
58289: LD_VAR 0 2
58293: ARRAY
58294: PUSH
58295: LD_EXP 34
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: ADD
58306: ST_TO_ADDR
58307: GO 58263
58309: POP
58310: POP
// end else
58311: GO 58386
// begin for i := 1 to 8 do
58313: LD_ADDR_VAR 0 2
58317: PUSH
58318: DOUBLE
58319: LD_INT 1
58321: DEC
58322: ST_TO_ADDR
58323: LD_INT 8
58325: PUSH
58326: FOR_TO
58327: IFFALSE 58384
// if mpSidePositions [ i ] then
58329: LD_EXP 7
58333: PUSH
58334: LD_VAR 0 2
58338: ARRAY
58339: IFFALSE 58382
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58341: LD_ADDR_VAR 0 1
58345: PUSH
58346: LD_VAR 0 1
58350: PUSH
58351: LD_STRING #KingoftheHill-Player
58353: PUSH
58354: LD_VAR 0 2
58358: PUSH
58359: LD_EXP 53
58363: PUSH
58364: LD_VAR 0 2
58368: ARRAY
58369: PUSH
58370: LD_EXP 34
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: ADD
58381: ST_TO_ADDR
58382: GO 58326
58384: POP
58385: POP
// end ; mpDisplayStrings := result ;
58386: LD_ADDR_EXP 37
58390: PUSH
58391: LD_VAR 0 1
58395: ST_TO_ADDR
// end ;
58396: LD_VAR 0 1
58400: RET
// export function HowMuchPointsKing ( side ) ; begin
58401: LD_INT 0
58403: PPUSH
// result := HowMuchPoints ( side ) ;
58404: LD_ADDR_VAR 0 2
58408: PUSH
58409: LD_VAR 0 1
58413: PPUSH
58414: CALL 58424 0 1
58418: ST_TO_ADDR
// end ;
58419: LD_VAR 0 2
58423: RET
// function HowMuchPoints ( side ) ; var i ; begin
58424: LD_INT 0
58426: PPUSH
58427: PPUSH
// if mpTeamGame then
58428: LD_EXP 11
58432: IFFALSE 58501
// begin for i := 1 to Count ( mpTeams ) do
58434: LD_ADDR_VAR 0 3
58438: PUSH
58439: DOUBLE
58440: LD_INT 1
58442: DEC
58443: ST_TO_ADDR
58444: LD_EXP 10
58448: PPUSH
58449: CALL 11242 0 1
58453: PUSH
58454: FOR_TO
58455: IFFALSE 58497
// begin if side in mpTeams [ i ] then
58457: LD_VAR 0 1
58461: PUSH
58462: LD_EXP 10
58466: PUSH
58467: LD_VAR 0 3
58471: ARRAY
58472: IN
58473: IFFALSE 58495
// begin result := mpKingPoints [ i ] ;
58475: LD_ADDR_VAR 0 2
58479: PUSH
58480: LD_EXP 53
58484: PUSH
58485: LD_VAR 0 3
58489: ARRAY
58490: ST_TO_ADDR
// exit ;
58491: POP
58492: POP
58493: GO 58517
// end ; end ;
58495: GO 58454
58497: POP
58498: POP
// end else
58499: GO 58517
// result := mpKingPoints [ side ] ;
58501: LD_ADDR_VAR 0 2
58505: PUSH
58506: LD_EXP 53
58510: PUSH
58511: LD_VAR 0 1
58515: ARRAY
58516: ST_TO_ADDR
// end ;
58517: LD_VAR 0 2
58521: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58522: LD_EXP 38
58526: PUSH
58527: CALL 58849 0 0
58531: AND
58532: PUSH
58533: LD_OWVAR 4
58537: AND
58538: IFFALSE 58774
58540: GO 58542
58542: DISABLE
58543: LD_INT 0
58545: PPUSH
58546: PPUSH
// begin canWin := false ;
58547: LD_ADDR_VAR 0 2
58551: PUSH
58552: LD_INT 0
58554: ST_TO_ADDR
// if not HasPower ( your_side ) then
58555: LD_OWVAR 2
58559: PPUSH
58560: CALL 58889 0 1
58564: NOT
58565: IFFALSE 58576
// begin Multiplayer_Loose_Message ;
58567: CALL_OW 521
// enable ( mpLose ) ;
58571: LD_INT 102
58573: ENABLE_MARKED
// end else
58574: GO 58774
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58576: LD_ADDR_VAR 0 2
58580: PUSH
58581: LD_OWVAR 2
58585: PPUSH
58586: CALL 58424 0 1
58590: PUSH
58591: LD_EXP 34
58595: GREATEREQUAL
58596: PUSH
58597: LD_OWVAR 2
58601: PPUSH
58602: CALL 58889 0 1
58606: AND
58607: PUSH
58608: CALL 58777 0 0
58612: NOT
58613: OR
58614: ST_TO_ADDR
// for i := 1 to 8 do
58615: LD_ADDR_VAR 0 1
58619: PUSH
58620: DOUBLE
58621: LD_INT 1
58623: DEC
58624: ST_TO_ADDR
58625: LD_INT 8
58627: PUSH
58628: FOR_TO
58629: IFFALSE 58760
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58631: LD_EXP 7
58635: PUSH
58636: LD_VAR 0 1
58640: ARRAY
58641: PUSH
58642: LD_VAR 0 1
58646: PPUSH
58647: CALL_OW 108
58651: AND
58652: PUSH
58653: LD_VAR 0 1
58657: PUSH
58658: LD_OWVAR 2
58662: NONEQUAL
58663: AND
58664: IFFALSE 58758
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58666: LD_EXP 8
58670: PUSH
58671: LD_VAR 0 1
58675: ARRAY
58676: NOT
58677: PUSH
58678: LD_EXP 8
58682: PUSH
58683: LD_VAR 0 1
58687: ARRAY
58688: PUSH
58689: LD_EXP 8
58693: PUSH
58694: LD_OWVAR 2
58698: ARRAY
58699: NONEQUAL
58700: PUSH
58701: LD_OWVAR 2
58705: PPUSH
58706: LD_VAR 0 1
58710: PPUSH
58711: CALL_OW 81
58715: PUSH
58716: LD_INT 1
58718: NONEQUAL
58719: AND
58720: OR
58721: IFFALSE 58758
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
58723: LD_VAR 0 1
58727: PPUSH
58728: CALL 58424 0 1
58732: PUSH
58733: LD_EXP 34
58737: GREATEREQUAL
58738: PUSH
58739: LD_VAR 0 1
58743: PPUSH
58744: CALL 58889 0 1
58748: AND
58749: IFFALSE 58758
// begin enable ( mpLose ) ;
58751: LD_INT 102
58753: ENABLE_MARKED
// exit ;
58754: POP
58755: POP
58756: GO 58774
// end ;
58758: GO 58628
58760: POP
58761: POP
// if canWin then
58762: LD_VAR 0 2
58766: IFFALSE 58773
// enable ( mpWin ) else
58768: LD_INT 101
58770: ENABLE_MARKED
58771: GO 58774
// enable ;
58773: ENABLE
// end ; end ;
58774: PPOPN 2
58776: END
// function EnemiesInGame ; var i ; begin
58777: LD_INT 0
58779: PPUSH
58780: PPUSH
// result := false ;
58781: LD_ADDR_VAR 0 1
58785: PUSH
58786: LD_INT 0
58788: ST_TO_ADDR
// for i := 1 to 8 do
58789: LD_ADDR_VAR 0 2
58793: PUSH
58794: DOUBLE
58795: LD_INT 1
58797: DEC
58798: ST_TO_ADDR
58799: LD_INT 8
58801: PUSH
58802: FOR_TO
58803: IFFALSE 58842
// if i <> your_side and HasPower ( i ) then
58805: LD_VAR 0 2
58809: PUSH
58810: LD_OWVAR 2
58814: NONEQUAL
58815: PUSH
58816: LD_VAR 0 2
58820: PPUSH
58821: CALL 58889 0 1
58825: AND
58826: IFFALSE 58840
// begin result := true ;
58828: LD_ADDR_VAR 0 1
58832: PUSH
58833: LD_INT 1
58835: ST_TO_ADDR
// exit ;
58836: POP
58837: POP
58838: GO 58844
// end ;
58840: GO 58802
58842: POP
58843: POP
// end ;
58844: LD_VAR 0 1
58848: RET
// function CanWinLoose ; begin
58849: LD_INT 0
58851: PPUSH
// result := true ;
58852: LD_ADDR_VAR 0 1
58856: PUSH
58857: LD_INT 1
58859: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
58860: CALL_OW 531
58864: PUSH
58865: CALL_OW 519
58869: PUSH
58870: LD_INT 1
58872: GREATER
58873: AND
58874: IFFALSE 58884
// result := false ;
58876: LD_ADDR_VAR 0 1
58880: PUSH
58881: LD_INT 0
58883: ST_TO_ADDR
// end ;
58884: LD_VAR 0 1
58888: RET
// function HasPower ( i ) ; begin
58889: LD_INT 0
58891: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
58892: LD_ADDR_VAR 0 2
58896: PUSH
58897: LD_INT 22
58899: PUSH
58900: LD_VAR 0 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 21
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 33
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 33
58934: PUSH
58935: LD_INT 5
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PPUSH
58952: CALL_OW 69
58956: ST_TO_ADDR
// end ; end_of_file
58957: LD_VAR 0 2
58961: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
58962: PPOPN 6
58964: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58965: CALL 58994 0 0
// end ; end_of_file
58969: PPOPN 1
58971: END
// every 0 0$1 do
58972: GO 58974
58974: DISABLE
// begin enable ;
58975: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58976: LD_STRING updateTimer(
58978: PUSH
58979: LD_OWVAR 1
58983: STR
58984: PUSH
58985: LD_STRING );
58987: STR
58988: PPUSH
58989: CALL_OW 559
// end ;
58993: END
// export function SOS_MapStart ( ) ; begin
58994: LD_INT 0
58996: PPUSH
// UpdateFactoryWaypoints ( ) ;
58997: CALL 59366 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59001: CALL 59618 0 0
// end ;
59005: LD_VAR 0 1
59009: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59010: LD_INT 0
59012: PPUSH
// end ;
59013: LD_VAR 0 12
59017: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59018: LD_INT 0
59020: PPUSH
59021: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59022: LD_VAR 0 1
59026: NOT
59027: PUSH
59028: LD_VAR 0 2
59032: PPUSH
59033: LD_VAR 0 3
59037: PPUSH
59038: CALL_OW 488
59042: NOT
59043: OR
59044: PUSH
59045: LD_VAR 0 1
59049: PPUSH
59050: CALL_OW 266
59054: PUSH
59055: LD_INT 3
59057: NONEQUAL
59058: PUSH
59059: LD_VAR 0 1
59063: PPUSH
59064: CALL_OW 247
59068: PUSH
59069: LD_INT 1
59071: EQUAL
59072: NOT
59073: AND
59074: OR
59075: IFFALSE 59079
// exit ;
59077: GO 59361
// if GetType ( factory ) = unit_human then
59079: LD_VAR 0 1
59083: PPUSH
59084: CALL_OW 247
59088: PUSH
59089: LD_INT 1
59091: EQUAL
59092: IFFALSE 59109
// factory := IsInUnit ( factory ) ;
59094: LD_ADDR_VAR 0 1
59098: PUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: CALL_OW 310
59108: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59109: LD_VAR 0 1
59113: PPUSH
59114: CALL_OW 266
59118: PUSH
59119: LD_INT 3
59121: NONEQUAL
59122: IFFALSE 59126
// exit ;
59124: GO 59361
// for i := 1 to Count ( factoryWaypoints ) do
59126: LD_ADDR_VAR 0 5
59130: PUSH
59131: DOUBLE
59132: LD_INT 1
59134: DEC
59135: ST_TO_ADDR
59136: LD_EXP 54
59140: PPUSH
59141: CALL 11242 0 1
59145: PUSH
59146: FOR_TO
59147: IFFALSE 59309
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59149: LD_VAR 0 2
59153: PPUSH
59154: LD_VAR 0 3
59158: PPUSH
59159: CALL_OW 428
59163: PUSH
59164: LD_EXP 54
59168: PUSH
59169: LD_VAR 0 5
59173: ARRAY
59174: PUSH
59175: LD_INT 2
59177: ARRAY
59178: EQUAL
59179: IFFALSE 59211
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59181: LD_ADDR_EXP 54
59185: PUSH
59186: LD_EXP 54
59190: PPUSH
59191: LD_VAR 0 5
59195: PPUSH
59196: CALL_OW 3
59200: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59201: CALL 59366 0 0
// exit ;
59205: POP
59206: POP
59207: GO 59361
// end else
59209: GO 59307
// if factory = factoryWaypoints [ i ] [ 2 ] then
59211: LD_VAR 0 1
59215: PUSH
59216: LD_EXP 54
59220: PUSH
59221: LD_VAR 0 5
59225: ARRAY
59226: PUSH
59227: LD_INT 2
59229: ARRAY
59230: EQUAL
59231: IFFALSE 59307
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59233: LD_ADDR_EXP 54
59237: PUSH
59238: LD_EXP 54
59242: PPUSH
59243: LD_VAR 0 5
59247: PPUSH
59248: CALL_OW 3
59252: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59253: LD_ADDR_EXP 54
59257: PUSH
59258: LD_EXP 54
59262: PPUSH
59263: LD_VAR 0 1
59267: PPUSH
59268: CALL_OW 255
59272: PUSH
59273: LD_VAR 0 1
59277: PUSH
59278: LD_VAR 0 2
59282: PUSH
59283: LD_VAR 0 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: PPUSH
59294: CALL 46851 0 2
59298: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59299: CALL 59366 0 0
// exit ;
59303: POP
59304: POP
59305: GO 59361
// end ; end ;
59307: GO 59146
59309: POP
59310: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59311: LD_ADDR_EXP 54
59315: PUSH
59316: LD_EXP 54
59320: PPUSH
59321: LD_VAR 0 1
59325: PPUSH
59326: CALL_OW 255
59330: PUSH
59331: LD_VAR 0 1
59335: PUSH
59336: LD_VAR 0 2
59340: PUSH
59341: LD_VAR 0 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: PPUSH
59352: CALL 46851 0 2
59356: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59357: CALL 59366 0 0
// end ;
59361: LD_VAR 0 4
59365: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59366: LD_INT 0
59368: PPUSH
59369: PPUSH
59370: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59371: LD_STRING resetFactoryWaypoint();
59373: PPUSH
59374: CALL_OW 559
// if factoryWaypoints then
59378: LD_EXP 54
59382: IFFALSE 59503
// begin list := factoryWaypoints ;
59384: LD_ADDR_VAR 0 3
59388: PUSH
59389: LD_EXP 54
59393: ST_TO_ADDR
// for i := 1 to list do
59394: LD_ADDR_VAR 0 2
59398: PUSH
59399: DOUBLE
59400: LD_INT 1
59402: DEC
59403: ST_TO_ADDR
59404: LD_VAR 0 3
59408: PUSH
59409: FOR_TO
59410: IFFALSE 59501
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59412: LD_STRING setFactoryWaypointXY(
59414: PUSH
59415: LD_VAR 0 3
59419: PUSH
59420: LD_VAR 0 2
59424: ARRAY
59425: PUSH
59426: LD_INT 1
59428: ARRAY
59429: STR
59430: PUSH
59431: LD_STRING ,
59433: STR
59434: PUSH
59435: LD_VAR 0 3
59439: PUSH
59440: LD_VAR 0 2
59444: ARRAY
59445: PUSH
59446: LD_INT 2
59448: ARRAY
59449: STR
59450: PUSH
59451: LD_STRING ,
59453: STR
59454: PUSH
59455: LD_VAR 0 3
59459: PUSH
59460: LD_VAR 0 2
59464: ARRAY
59465: PUSH
59466: LD_INT 3
59468: ARRAY
59469: STR
59470: PUSH
59471: LD_STRING ,
59473: STR
59474: PUSH
59475: LD_VAR 0 3
59479: PUSH
59480: LD_VAR 0 2
59484: ARRAY
59485: PUSH
59486: LD_INT 4
59488: ARRAY
59489: STR
59490: PUSH
59491: LD_STRING )
59493: STR
59494: PPUSH
59495: CALL_OW 559
59499: GO 59409
59501: POP
59502: POP
// end ; end ;
59503: LD_VAR 0 1
59507: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59508: LD_INT 0
59510: PPUSH
// if HexInfo ( x , y ) = warehouse then
59511: LD_VAR 0 2
59515: PPUSH
59516: LD_VAR 0 3
59520: PPUSH
59521: CALL_OW 428
59525: PUSH
59526: LD_VAR 0 1
59530: EQUAL
59531: IFFALSE 59558
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59533: LD_ADDR_EXP 55
59537: PUSH
59538: LD_EXP 55
59542: PPUSH
59543: LD_VAR 0 1
59547: PPUSH
59548: LD_INT 0
59550: PPUSH
59551: CALL_OW 1
59555: ST_TO_ADDR
59556: GO 59609
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59558: LD_ADDR_EXP 55
59562: PUSH
59563: LD_EXP 55
59567: PPUSH
59568: LD_VAR 0 1
59572: PPUSH
59573: LD_VAR 0 1
59577: PPUSH
59578: CALL_OW 255
59582: PUSH
59583: LD_VAR 0 1
59587: PUSH
59588: LD_VAR 0 2
59592: PUSH
59593: LD_VAR 0 3
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: PPUSH
59604: CALL_OW 1
59608: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59609: CALL 59618 0 0
// end ;
59613: LD_VAR 0 4
59617: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59618: LD_INT 0
59620: PPUSH
59621: PPUSH
59622: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59623: LD_STRING resetWarehouseGatheringPoints();
59625: PPUSH
59626: CALL_OW 559
// if warehouseGatheringPoints then
59630: LD_EXP 55
59634: IFFALSE 59760
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59636: LD_ADDR_VAR 0 3
59640: PUSH
59641: LD_EXP 55
59645: PPUSH
59646: CALL 50613 0 1
59650: ST_TO_ADDR
// for i := 1 to list do
59651: LD_ADDR_VAR 0 2
59655: PUSH
59656: DOUBLE
59657: LD_INT 1
59659: DEC
59660: ST_TO_ADDR
59661: LD_VAR 0 3
59665: PUSH
59666: FOR_TO
59667: IFFALSE 59758
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59669: LD_STRING setWarehouseGatheringPointXY(
59671: PUSH
59672: LD_VAR 0 3
59676: PUSH
59677: LD_VAR 0 2
59681: ARRAY
59682: PUSH
59683: LD_INT 1
59685: ARRAY
59686: STR
59687: PUSH
59688: LD_STRING ,
59690: STR
59691: PUSH
59692: LD_VAR 0 3
59696: PUSH
59697: LD_VAR 0 2
59701: ARRAY
59702: PUSH
59703: LD_INT 2
59705: ARRAY
59706: STR
59707: PUSH
59708: LD_STRING ,
59710: STR
59711: PUSH
59712: LD_VAR 0 3
59716: PUSH
59717: LD_VAR 0 2
59721: ARRAY
59722: PUSH
59723: LD_INT 3
59725: ARRAY
59726: STR
59727: PUSH
59728: LD_STRING ,
59730: STR
59731: PUSH
59732: LD_VAR 0 3
59736: PUSH
59737: LD_VAR 0 2
59741: ARRAY
59742: PUSH
59743: LD_INT 4
59745: ARRAY
59746: STR
59747: PUSH
59748: LD_STRING )
59750: STR
59751: PPUSH
59752: CALL_OW 559
59756: GO 59666
59758: POP
59759: POP
// end ; end ;
59760: LD_VAR 0 1
59764: RET
