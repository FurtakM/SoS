// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5873 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7216 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 9174 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9290 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9826 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 15529 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 58116 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 24
 359: PUSH
 360: LD_INT 36
 362: PUSH
 363: LD_INT 48
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 985 0 2
// PlaceMines ( extraMinefield , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 381: LD_INT 24
 383: PPUSH
 384: LD_INT 6
 386: PUSH
 387: LD_INT 8
 389: PUSH
 390: LD_INT 10
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: LD_OWVAR 67
 402: ARRAY
 403: PPUSH
 404: CALL 985 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 408: LD_ADDR_VAR 0 8
 412: PUSH
 413: LD_INT 3
 415: PUSH
 416: LD_INT 5
 418: PUSH
 419: LD_INT 7
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: PUSH
 427: LD_OWVAR 67
 431: ARRAY
 432: ST_TO_ADDR
// uc_side := side ;
 433: LD_ADDR_OWVAR 20
 437: PUSH
 438: LD_VAR 0 1
 442: ST_TO_ADDR
// uc_nation := 2 ;
 443: LD_ADDR_OWVAR 21
 447: PUSH
 448: LD_INT 2
 450: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 8000 , 1200 , 400 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 451: LD_ADDR_EXP 14
 455: PUSH
 456: LD_INT 2
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: LD_STRING 
 464: PPUSH
 465: LD_VAR 0 8
 469: PPUSH
 470: LD_INT 8000
 472: PUSH
 473: LD_INT 1200
 475: PUSH
 476: LD_INT 400
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PPUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 11
 489: PUSH
 490: LD_INT 12
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: PUSH
 507: LD_INT 6
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL 24127 0 6
 523: ST_TO_ADDR
// arForceTmp := [ ] ;
 524: LD_ADDR_EXP 15
 528: PUSH
 529: EMPTY
 530: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 22
 538: PUSH
 539: LD_VAR 0 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 30
 550: PUSH
 551: LD_INT 31
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PUSH
 558: LD_INT 3
 560: PUSH
 561: LD_INT 95
 563: PUSH
 564: LD_INT 1
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: LD_INT 58
 577: PUSH
 578: EMPTY
 579: LIST
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PPUSH
 587: CALL_OW 69
 591: PUSH
 592: FOR_IN
 593: IFFALSE 722
// begin d := GetDir ( i ) ;
 595: LD_ADDR_VAR 0 4
 599: PUSH
 600: LD_VAR 0 3
 604: PPUSH
 605: CALL_OW 254
 609: ST_TO_ADDR
// if d < 3 then
 610: LD_VAR 0 4
 614: PUSH
 615: LD_INT 3
 617: LESS
 618: IFFALSE 636
// d := d + 3 else
 620: LD_ADDR_VAR 0 4
 624: PUSH
 625: LD_VAR 0 4
 629: PUSH
 630: LD_INT 3
 632: PLUS
 633: ST_TO_ADDR
 634: GO 650
// d := d - 3 ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_VAR 0 4
 645: PUSH
 646: LD_INT 3
 648: MINUS
 649: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 650: LD_INT 0
 652: PPUSH
 653: LD_VAR 0 8
 657: PPUSH
 658: CALL_OW 381
// un := CreateHuman ;
 662: LD_ADDR_VAR 0 6
 666: PUSH
 667: CALL_OW 44
 671: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 672: LD_ADDR_EXP 15
 676: PUSH
 677: LD_EXP 15
 681: PPUSH
 682: LD_VAR 0 6
 686: PPUSH
 687: CALL 53177 0 2
 691: ST_TO_ADDR
// SetDir ( un , d ) ;
 692: LD_VAR 0 6
 696: PPUSH
 697: LD_VAR 0 4
 701: PPUSH
 702: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 706: LD_VAR 0 6
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 52
// end ;
 720: GO 592
 722: POP
 723: POP
// for i := 1 to 2 do
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: DOUBLE
 730: LD_INT 1
 732: DEC
 733: ST_TO_ADDR
 734: LD_INT 2
 736: PUSH
 737: FOR_TO
 738: IFFALSE 822
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 740: LD_INT 14
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 31
 751: PPUSH
 752: LD_INT 100
 754: PPUSH
 755: CALL 20306 0 5
// un := CreateVehicle ;
 759: LD_ADDR_VAR 0 6
 763: PUSH
 764: CALL_OW 45
 768: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 769: LD_VAR 0 6
 773: PPUSH
 774: LD_INT 102
 776: PPUSH
 777: LD_INT 31
 779: PPUSH
 780: LD_INT 6
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 790: LD_INT 0
 792: PPUSH
 793: LD_VAR 0 8
 797: PUSH
 798: LD_INT 2
 800: PLUS
 801: PPUSH
 802: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_VAR 0 6
 815: PPUSH
 816: CALL_OW 52
// end ;
 820: GO 737
 822: POP
 823: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 824: LD_ADDR_VAR 0 3
 828: PUSH
 829: LD_INT 22
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 3
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PPUSH
 855: CALL_OW 69
 859: PUSH
 860: FOR_IN
 861: IFFALSE 894
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 863: LD_VAR 0 3
 867: PPUSH
 868: LD_INT 3
 870: PUSH
 871: LD_INT 5
 873: PUSH
 874: LD_INT 7
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL_OW 241
 892: GO 860
 894: POP
 895: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 896: LD_ADDR_VAR 0 3
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_VAR 0 1
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 32
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PPUSH
 927: CALL_OW 69
 931: PUSH
 932: FOR_IN
 933: IFFALSE 978
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 935: LD_VAR 0 3
 939: PPUSH
 940: LD_INT 27
 942: PUSH
 943: LD_INT 25
 945: PUSH
 946: LD_INT 28
 948: PUSH
 949: LD_INT 27
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: PUSH
 958: LD_VAR 0 3
 962: PUSH
 963: LD_INT 4
 965: MOD
 966: PUSH
 967: LD_INT 1
 969: PLUS
 970: ARRAY
 971: PPUSH
 972: CALL_OW 431
 976: GO 932
 978: POP
 979: POP
// end ;
 980: LD_VAR 0 2
 984: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 985: LD_INT 0
 987: PPUSH
 988: PPUSH
 989: PPUSH
 990: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 991: LD_ADDR_VAR 0 5
 995: PUSH
 996: LD_VAR 0 1
1000: PPUSH
1001: LD_INT 0
1003: PPUSH
1004: CALL_OW 517
1008: ST_TO_ADDR
// if not tmp then
1009: LD_VAR 0 5
1013: NOT
1014: IFFALSE 1018
// exit ;
1016: GO 1260
// for i := 1 to n do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_VAR 0 2
1032: PUSH
1033: FOR_TO
1034: IFFALSE 1258
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1036: LD_ADDR_VAR 0 6
1040: PUSH
1041: LD_INT 1
1043: PPUSH
1044: LD_VAR 0 5
1048: PUSH
1049: LD_INT 1
1051: ARRAY
1052: PPUSH
1053: CALL_OW 12
1057: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1058: LD_VAR 0 5
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PUSH
1067: LD_VAR 0 6
1071: ARRAY
1072: PPUSH
1073: LD_VAR 0 5
1077: PUSH
1078: LD_INT 2
1080: ARRAY
1081: PUSH
1082: LD_VAR 0 6
1086: ARRAY
1087: PPUSH
1088: LD_EXP 3
1092: PUSH
1093: LD_INT 1
1095: ARRAY
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1104: LD_ADDR_EXP 13
1108: PUSH
1109: LD_EXP 13
1113: PPUSH
1114: LD_EXP 13
1118: PUSH
1119: LD_INT 1
1121: PLUS
1122: PPUSH
1123: LD_VAR 0 5
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PUSH
1132: LD_VAR 0 6
1136: ARRAY
1137: PPUSH
1138: CALL_OW 2
1142: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1143: LD_ADDR_EXP 13
1147: PUSH
1148: LD_EXP 13
1152: PPUSH
1153: LD_EXP 13
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: PPUSH
1162: LD_VAR 0 5
1166: PUSH
1167: LD_INT 2
1169: ARRAY
1170: PUSH
1171: LD_VAR 0 6
1175: ARRAY
1176: PPUSH
1177: CALL_OW 2
1181: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1182: LD_ADDR_VAR 0 5
1186: PUSH
1187: LD_VAR 0 5
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_VAR 0 5
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_VAR 0 6
1208: PPUSH
1209: CALL_OW 3
1213: PPUSH
1214: CALL_OW 1
1218: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1219: LD_ADDR_VAR 0 5
1223: PUSH
1224: LD_VAR 0 5
1228: PPUSH
1229: LD_INT 2
1231: PPUSH
1232: LD_VAR 0 5
1236: PUSH
1237: LD_INT 2
1239: ARRAY
1240: PPUSH
1241: LD_VAR 0 6
1245: PPUSH
1246: CALL_OW 3
1250: PPUSH
1251: CALL_OW 1
1255: ST_TO_ADDR
// end ;
1256: GO 1033
1258: POP
1259: POP
// end ;
1260: LD_VAR 0 3
1264: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1265: LD_INT 0
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// enable ;
1298: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1299: LD_ADDR_VAR 0 11
1303: PUSH
1304: LD_INT 81
1306: PUSH
1307: LD_VAR 0 1
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: PPUSH
1316: CALL_OW 69
1320: ST_TO_ADDR
// if tmp then
1321: LD_VAR 0 11
1325: IFFALSE 1346
// enemySide := GetSide ( tmp [ 1 ] ) ;
1327: LD_ADDR_VAR 0 38
1331: PUSH
1332: LD_VAR 0 11
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: PPUSH
1341: CALL_OW 255
1345: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 26
1350: PUSH
1351: LD_VAR 0 3
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1373: LD_ADDR_VAR 0 27
1377: PUSH
1378: LD_VAR 0 4
1382: PPUSH
1383: LD_INT 81
1385: PUSH
1386: LD_VAR 0 1
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: PPUSH
1395: CALL_OW 70
1399: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1400: LD_ADDR_VAR 0 13
1404: PUSH
1405: LD_INT 22
1407: PUSH
1408: LD_VAR 0 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 50
1419: PUSH
1420: EMPTY
1421: LIST
1422: PUSH
1423: LD_INT 34
1425: PUSH
1426: LD_INT 31
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: PPUSH
1438: CALL_OW 69
1442: ST_TO_ADDR
// if ct then
1443: LD_VAR 0 13
1447: IFFALSE 1538
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1449: LD_ADDR_VAR 0 15
1453: PUSH
1454: LD_INT 22
1456: PUSH
1457: LD_VAR 0 1
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 61
1471: PUSH
1472: EMPTY
1473: LIST
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 50
1481: PUSH
1482: EMPTY
1483: LIST
1484: PUSH
1485: LD_INT 33
1487: PUSH
1488: LD_INT 2
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: PPUSH
1501: CALL_OW 69
1505: ST_TO_ADDR
// if veh then
1506: LD_VAR 0 15
1510: IFFALSE 1538
// for i in veh do
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_VAR 0 15
1521: PUSH
1522: FOR_IN
1523: IFFALSE 1536
// Connect ( i ) ;
1525: LD_VAR 0 9
1529: PPUSH
1530: CALL 23774 0 1
1534: GO 1522
1536: POP
1537: POP
// end ; vehicles := arVehicles ;
1538: LD_ADDR_VAR 0 30
1542: PUSH
1543: LD_EXP 8
1547: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1548: LD_ADDR_VAR 0 36
1552: PUSH
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 22
1560: PUSH
1561: LD_VAR 0 1
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 30
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PPUSH
1602: CALL_OW 70
1606: ST_TO_ADDR
// if depot then
1607: LD_VAR 0 36
1611: IFFALSE 1627
// depot := depot [ 1 ] ;
1613: LD_ADDR_VAR 0 36
1617: PUSH
1618: LD_VAR 0 36
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1627: LD_ADDR_VAR 0 22
1631: PUSH
1632: LD_VAR 0 5
1636: PPUSH
1637: LD_INT 25
1639: PUSH
1640: LD_INT 4
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 50
1649: PUSH
1650: EMPTY
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 72
1661: ST_TO_ADDR
// if arTech then
1662: LD_EXP 5
1666: IFFALSE 2028
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1668: LD_ADDR_VAR 0 16
1672: PUSH
1673: LD_VAR 0 3
1677: PPUSH
1678: LD_INT 22
1680: PUSH
1681: LD_VAR 0 1
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 50
1692: PUSH
1693: EMPTY
1694: LIST
1695: PUSH
1696: LD_INT 2
1698: PUSH
1699: LD_INT 30
1701: PUSH
1702: LD_INT 6
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 7
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 30
1721: PUSH
1722: LD_INT 8
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 70
1744: ST_TO_ADDR
// if lab then
1745: LD_VAR 0 16
1749: IFFALSE 2028
// begin for j := 1 to Count ( lab ) do
1751: LD_ADDR_VAR 0 10
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 16
1765: PPUSH
1766: CALL 17568 0 1
1770: PUSH
1771: FOR_TO
1772: IFFALSE 2026
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1774: LD_VAR 0 16
1778: PUSH
1779: LD_VAR 0 10
1783: ARRAY
1784: PPUSH
1785: CALL_OW 461
1789: PUSH
1790: LD_INT 2
1792: EQUAL
1793: IFFALSE 1876
// begin for i in arTech do
1795: LD_ADDR_VAR 0 9
1799: PUSH
1800: LD_EXP 5
1804: PUSH
1805: FOR_IN
1806: IFFALSE 1872
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1808: LD_VAR 0 16
1812: PUSH
1813: LD_VAR 0 10
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 9
1823: PPUSH
1824: CALL_OW 430
1828: PUSH
1829: LD_VAR 0 9
1833: PPUSH
1834: LD_VAR 0 1
1838: PPUSH
1839: CALL_OW 321
1843: PUSH
1844: LD_INT 1
1846: EQUAL
1847: AND
1848: IFFALSE 1870
// begin AddComResearch ( lab [ j ] , i ) ;
1850: LD_VAR 0 16
1854: PUSH
1855: LD_VAR 0 10
1859: ARRAY
1860: PPUSH
1861: LD_VAR 0 9
1865: PPUSH
1866: CALL_OW 184
// end ;
1870: GO 1805
1872: POP
1873: POP
// end else
1874: GO 2024
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1876: LD_VAR 0 16
1880: PUSH
1881: LD_VAR 0 10
1885: ARRAY
1886: PPUSH
1887: CALL_OW 461
1891: PUSH
1892: LD_INT 6
1894: EQUAL
1895: IFFALSE 2024
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1897: LD_ADDR_VAR 0 9
1901: PUSH
1902: LD_VAR 0 22
1906: PPUSH
1907: LD_INT 3
1909: PUSH
1910: LD_INT 120
1912: PUSH
1913: LD_INT 10
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PPUSH
1924: CALL_OW 72
1928: PUSH
1929: FOR_IN
1930: IFFALSE 2022
// begin inside := IsInUnit ( i ) ;
1932: LD_ADDR_VAR 0 14
1936: PUSH
1937: LD_VAR 0 9
1941: PPUSH
1942: CALL_OW 310
1946: ST_TO_ADDR
// if not inside then
1947: LD_VAR 0 14
1951: NOT
1952: IFFALSE 1976
// ComEnterUnit ( i , lab [ j ] ) else
1954: LD_VAR 0 9
1958: PPUSH
1959: LD_VAR 0 16
1963: PUSH
1964: LD_VAR 0 10
1968: ARRAY
1969: PPUSH
1970: CALL_OW 120
1974: GO 2020
// if BuildingStatus ( inside ) = bs_idle then
1976: LD_VAR 0 14
1980: PPUSH
1981: CALL_OW 461
1985: PUSH
1986: LD_INT 2
1988: EQUAL
1989: IFFALSE 2020
// begin ComExitBuilding ( i ) ;
1991: LD_VAR 0 9
1995: PPUSH
1996: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
2000: LD_VAR 0 9
2004: PPUSH
2005: LD_VAR 0 16
2009: PUSH
2010: LD_VAR 0 10
2014: ARRAY
2015: PPUSH
2016: CALL_OW 180
// end ; end ;
2020: GO 1929
2022: POP
2023: POP
// end ;
2024: GO 1771
2026: POP
2027: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2028: LD_ADDR_VAR 0 33
2032: PUSH
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_INT 22
2040: PUSH
2041: LD_VAR 0 1
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 30
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 50
2062: PUSH
2063: EMPTY
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PPUSH
2071: CALL_OW 70
2075: ST_TO_ADDR
// if fac then
2076: LD_VAR 0 33
2080: IFFALSE 2415
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2082: LD_VAR 0 33
2086: PUSH
2087: LD_INT 1
2089: ARRAY
2090: PPUSH
2091: CALL_OW 461
2095: PUSH
2096: LD_INT 2
2098: EQUAL
2099: IFFALSE 2415
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2101: LD_ADDR_VAR 0 34
2105: PUSH
2106: LD_VAR 0 3
2110: PPUSH
2111: LD_INT 2
2113: PUSH
2114: LD_INT 30
2116: PUSH
2117: LD_INT 32
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 33
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 35
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PPUSH
2153: CALL_OW 70
2157: ST_TO_ADDR
// if emptyTowers then
2158: LD_VAR 0 34
2162: IFFALSE 2212
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2164: LD_ADDR_VAR 0 35
2168: PUSH
2169: LD_VAR 0 34
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PPUSH
2178: LD_VAR 0 3
2182: PPUSH
2183: CALL 25813 0 2
2187: ST_TO_ADDR
// if weapon then
2188: LD_VAR 0 35
2192: IFFALSE 2212
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2194: LD_VAR 0 34
2198: PUSH
2199: LD_INT 1
2201: ARRAY
2202: PPUSH
2203: LD_VAR 0 35
2207: PPUSH
2208: CALL_OW 148
// end ; if arConstructList then
2212: LD_EXP 6
2216: IFFALSE 2415
// for i := 1 to Count ( arConstructList ) do
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_EXP 6
2232: PPUSH
2233: CALL 17568 0 1
2237: PUSH
2238: FOR_TO
2239: IFFALSE 2413
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2241: LD_VAR 0 33
2245: PUSH
2246: LD_INT 1
2248: ARRAY
2249: PPUSH
2250: LD_EXP 6
2254: PUSH
2255: LD_VAR 0 9
2259: ARRAY
2260: PUSH
2261: LD_INT 1
2263: ARRAY
2264: PPUSH
2265: LD_EXP 6
2269: PUSH
2270: LD_VAR 0 9
2274: ARRAY
2275: PUSH
2276: LD_INT 2
2278: ARRAY
2279: PPUSH
2280: LD_EXP 6
2284: PUSH
2285: LD_VAR 0 9
2289: ARRAY
2290: PUSH
2291: LD_INT 3
2293: ARRAY
2294: PPUSH
2295: LD_EXP 6
2299: PUSH
2300: LD_VAR 0 9
2304: ARRAY
2305: PUSH
2306: LD_INT 4
2308: ARRAY
2309: PPUSH
2310: CALL_OW 448
2314: IFFALSE 2411
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2316: LD_VAR 0 33
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 6
2329: PUSH
2330: LD_VAR 0 9
2334: ARRAY
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 6
2344: PUSH
2345: LD_VAR 0 9
2349: ARRAY
2350: PUSH
2351: LD_INT 2
2353: ARRAY
2354: PPUSH
2355: LD_EXP 6
2359: PUSH
2360: LD_VAR 0 9
2364: ARRAY
2365: PUSH
2366: LD_INT 3
2368: ARRAY
2369: PPUSH
2370: LD_EXP 6
2374: PUSH
2375: LD_VAR 0 9
2379: ARRAY
2380: PUSH
2381: LD_INT 4
2383: ARRAY
2384: PPUSH
2385: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2389: LD_ADDR_EXP 6
2393: PUSH
2394: LD_EXP 6
2398: PPUSH
2399: LD_VAR 0 9
2403: PPUSH
2404: CALL_OW 3
2408: ST_TO_ADDR
// break ;
2409: GO 2413
// end ; end ;
2411: GO 2238
2413: POP
2414: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2415: LD_ADDR_VAR 0 11
2419: PUSH
2420: LD_VAR 0 3
2424: PPUSH
2425: LD_INT 22
2427: PUSH
2428: LD_VAR 0 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 21
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 57
2452: PUSH
2453: EMPTY
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 3
2462: PUSH
2463: LD_INT 24
2465: PUSH
2466: LD_INT 1000
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2488: LD_ADDR_VAR 0 21
2492: PUSH
2493: LD_VAR 0 3
2497: PPUSH
2498: CALL_OW 435
2502: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2503: LD_ADDR_VAR 0 18
2507: PUSH
2508: LD_VAR 0 5
2512: PPUSH
2513: LD_INT 25
2515: PUSH
2516: LD_INT 3
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 50
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2538: LD_VAR 0 18
2542: PPUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 120
2548: PUSH
2549: LD_INT 7
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 54
2565: PUSH
2566: EMPTY
2567: LIST
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PPUSH
2577: CALL_OW 72
2581: PUSH
2582: LD_VAR 0 33
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: CALL_OW 302
2595: AND
2596: IFFALSE 2655
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2598: LD_VAR 0 18
2602: PPUSH
2603: LD_INT 3
2605: PUSH
2606: LD_INT 120
2608: PUSH
2609: LD_INT 7
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 54
2625: PUSH
2626: EMPTY
2627: LIST
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 72
2641: PPUSH
2642: LD_VAR 0 33
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2655: LD_ADDR_VAR 0 16
2659: PUSH
2660: LD_VAR 0 3
2664: PPUSH
2665: LD_INT 2
2667: PUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 6
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 7
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 8
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PPUSH
2704: CALL_OW 70
2708: ST_TO_ADDR
// if sci then
2709: LD_VAR 0 22
2713: IFFALSE 2956
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2715: LD_ADDR_VAR 0 24
2719: PUSH
2720: LD_VAR 0 5
2724: PPUSH
2725: LD_INT 95
2727: PUSH
2728: LD_VAR 0 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 120
2739: PUSH
2740: LD_INT 1
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 72
2755: ST_TO_ADDR
// if hurtUnits then
2756: LD_VAR 0 24
2760: IFFALSE 2855
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2762: LD_ADDR_VAR 0 9
2766: PUSH
2767: LD_VAR 0 22
2771: PPUSH
2772: LD_INT 3
2774: PUSH
2775: LD_INT 120
2777: PUSH
2778: LD_INT 10
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 72
2793: PUSH
2794: FOR_IN
2795: IFFALSE 2851
// begin SetTag ( i , tHealer ) ;
2797: LD_VAR 0 9
2801: PPUSH
2802: LD_INT 10
2804: PPUSH
2805: CALL_OW 109
// if IsInUnit ( i ) then
2809: LD_VAR 0 9
2813: PPUSH
2814: CALL_OW 310
2818: IFFALSE 2831
// ComExitBuilding ( i ) else
2820: LD_VAR 0 9
2824: PPUSH
2825: CALL_OW 122
2829: GO 2849
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2831: LD_VAR 0 9
2835: PPUSH
2836: LD_VAR 0 24
2840: PUSH
2841: LD_INT 1
2843: ARRAY
2844: PPUSH
2845: CALL_OW 128
// end ;
2849: GO 2794
2851: POP
2852: POP
// end else
2853: GO 2956
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2855: LD_VAR 0 16
2859: PUSH
2860: LD_VAR 0 22
2864: PPUSH
2865: LD_INT 120
2867: PUSH
2868: LD_INT 10
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 72
2879: AND
2880: IFFALSE 2956
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2882: LD_ADDR_VAR 0 9
2886: PUSH
2887: LD_VAR 0 22
2891: PPUSH
2892: LD_INT 120
2894: PUSH
2895: LD_INT 10
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 72
2906: PUSH
2907: FOR_IN
2908: IFFALSE 2954
// begin SetTag ( i , 0 ) ;
2910: LD_VAR 0 9
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 109
// if not IsInUnit ( i ) then
2922: LD_VAR 0 9
2926: PPUSH
2927: CALL_OW 310
2931: NOT
2932: IFFALSE 2952
// ComEnterUnit ( i , lab [ 1 ] ) ;
2934: LD_VAR 0 9
2938: PPUSH
2939: LD_VAR 0 16
2943: PUSH
2944: LD_INT 1
2946: ARRAY
2947: PPUSH
2948: CALL_OW 120
// end ;
2952: GO 2907
2954: POP
2955: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2956: LD_ADDR_VAR 0 17
2960: PUSH
2961: LD_VAR 0 5
2965: PPUSH
2966: LD_INT 25
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: CALL_OW 72
2980: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2981: LD_ADDR_VAR 0 37
2985: PUSH
2986: LD_EXP 7
2990: ST_TO_ADDR
// if eng then
2991: LD_VAR 0 17
2995: IFFALSE 3829
// begin for i in eng do
2997: LD_ADDR_VAR 0 9
3001: PUSH
3002: LD_VAR 0 17
3006: PUSH
3007: FOR_IN
3008: IFFALSE 3827
// begin tag := GetTag ( i ) ;
3010: LD_ADDR_VAR 0 19
3014: PUSH
3015: LD_VAR 0 9
3019: PPUSH
3020: CALL_OW 110
3024: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
3025: LD_VAR 0 9
3029: PPUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: CALL_OW 308
3039: IFFALSE 3070
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3041: LD_VAR 0 9
3045: PPUSH
3046: LD_VAR 0 7
3050: PUSH
3051: LD_INT 1
3053: ARRAY
3054: PPUSH
3055: LD_VAR 0 7
3059: PUSH
3060: LD_INT 2
3062: ARRAY
3063: PPUSH
3064: CALL_OW 111
// continue ;
3068: GO 3007
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3070: LD_VAR 0 9
3074: PPUSH
3075: CALL_OW 256
3079: PUSH
3080: LD_INT 800
3082: LESS
3083: PUSH
3084: LD_VAR 0 19
3088: PUSH
3089: LD_INT 1
3091: NONEQUAL
3092: AND
3093: IFFALSE 3143
// begin SetTag ( i , tHeal ) ;
3095: LD_VAR 0 9
3099: PPUSH
3100: LD_INT 1
3102: PPUSH
3103: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3107: LD_VAR 0 9
3111: PPUSH
3112: LD_VAR 0 6
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: PPUSH
3121: LD_VAR 0 6
3125: PUSH
3126: LD_INT 2
3128: ARRAY
3129: PPUSH
3130: CALL_OW 111
// AddComHold ( i ) ;
3134: LD_VAR 0 9
3138: PPUSH
3139: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3143: LD_VAR 0 19
3147: PUSH
3148: LD_INT 1
3150: EQUAL
3151: PUSH
3152: LD_VAR 0 9
3156: PPUSH
3157: CALL_OW 256
3161: PUSH
3162: LD_INT 1000
3164: EQUAL
3165: AND
3166: IFFALSE 3180
// SetTag ( i , 0 ) ;
3168: LD_VAR 0 9
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 109
// if not tag then
3180: LD_VAR 0 19
3184: NOT
3185: IFFALSE 3352
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3187: LD_ADDR_VAR 0 12
3191: PUSH
3192: LD_VAR 0 3
3196: PPUSH
3197: LD_INT 57
3199: PUSH
3200: EMPTY
3201: LIST
3202: PPUSH
3203: CALL_OW 70
3207: ST_TO_ADDR
// if undone then
3208: LD_VAR 0 12
3212: IFFALSE 3234
// begin ComComplete ( i , undone [ 1 ] ) ;
3214: LD_VAR 0 9
3218: PPUSH
3219: LD_VAR 0 12
3223: PUSH
3224: LD_INT 1
3226: ARRAY
3227: PPUSH
3228: CALL 23666 0 2
// continue ;
3232: GO 3007
// end ; if cr or tmp or buildingsToBuild then
3234: LD_VAR 0 21
3238: PUSH
3239: LD_VAR 0 11
3243: OR
3244: PUSH
3245: LD_VAR 0 37
3249: OR
3250: IFFALSE 3326
// begin if IsInUnit ( i ) then
3252: LD_VAR 0 9
3256: PPUSH
3257: CALL_OW 310
3261: IFFALSE 3272
// ComExitBuilding ( i ) ;
3263: LD_VAR 0 9
3267: PPUSH
3268: CALL_OW 122
// if tmp then
3272: LD_VAR 0 11
3276: IFFALSE 3292
// SetTag ( i , tRepair ) else
3278: LD_VAR 0 9
3282: PPUSH
3283: LD_INT 3
3285: PPUSH
3286: CALL_OW 109
3290: GO 3324
// if cr then
3292: LD_VAR 0 21
3296: IFFALSE 3312
// SetTag ( i , tCrates ) else
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_INT 2
3305: PPUSH
3306: CALL_OW 109
3310: GO 3324
// SetTag ( i , tBuild ) ;
3312: LD_VAR 0 9
3316: PPUSH
3317: LD_INT 5
3319: PPUSH
3320: CALL_OW 109
// end else
3324: GO 3352
// if not IsInUnit ( i ) then
3326: LD_VAR 0 9
3330: PPUSH
3331: CALL_OW 310
3335: NOT
3336: IFFALSE 3352
// ComEnterUnit ( i , depot ) ;
3338: LD_VAR 0 9
3342: PPUSH
3343: LD_VAR 0 36
3347: PPUSH
3348: CALL_OW 120
// end ; if tag = tRepair then
3352: LD_VAR 0 19
3356: PUSH
3357: LD_INT 3
3359: EQUAL
3360: IFFALSE 3466
// begin if IsInUnit ( i ) then
3362: LD_VAR 0 9
3366: PPUSH
3367: CALL_OW 310
3371: IFFALSE 3384
// begin ComExitBuilding ( i ) ;
3373: LD_VAR 0 9
3377: PPUSH
3378: CALL_OW 122
// continue ;
3382: GO 3007
// end ; if not tmp then
3384: LD_VAR 0 11
3388: NOT
3389: IFFALSE 3405
// begin SetTag ( i , 0 ) ;
3391: LD_VAR 0 9
3395: PPUSH
3396: LD_INT 0
3398: PPUSH
3399: CALL_OW 109
// continue ;
3403: GO 3007
// end ; if not HasTask ( i ) then
3405: LD_VAR 0 9
3409: PPUSH
3410: CALL_OW 314
3414: NOT
3415: IFFALSE 3435
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3417: LD_VAR 0 9
3421: PPUSH
3422: LD_VAR 0 11
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: PPUSH
3431: CALL_OW 130
// if not IsInArea ( i , area ) then
3435: LD_VAR 0 9
3439: PPUSH
3440: LD_VAR 0 3
3444: PPUSH
3445: CALL_OW 308
3449: NOT
3450: IFFALSE 3466
// ComMoveToArea ( i , area ) ;
3452: LD_VAR 0 9
3456: PPUSH
3457: LD_VAR 0 3
3461: PPUSH
3462: CALL_OW 113
// end ; if tag = tBuild then
3466: LD_VAR 0 19
3470: PUSH
3471: LD_INT 5
3473: EQUAL
3474: IFFALSE 3680
// begin if IsInUnit ( i ) then
3476: LD_VAR 0 9
3480: PPUSH
3481: CALL_OW 310
3485: IFFALSE 3498
// begin ComExitBuilding ( i ) ;
3487: LD_VAR 0 9
3491: PPUSH
3492: CALL_OW 122
// continue ;
3496: GO 3007
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3498: LD_VAR 0 37
3502: NOT
3503: PUSH
3504: LD_VAR 0 26
3508: OR
3509: PUSH
3510: LD_VAR 0 27
3514: OR
3515: IFFALSE 3533
// begin SetTag ( i , 0 ) ;
3517: LD_VAR 0 9
3521: PPUSH
3522: LD_INT 0
3524: PPUSH
3525: CALL_OW 109
// continue ;
3529: GO 3007
// end else
3531: GO 3572
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3533: LD_VAR 0 36
3537: PPUSH
3538: LD_VAR 0 37
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: PPUSH
3551: CALL 57100 0 2
3555: NOT
3556: IFFALSE 3572
// begin SetTag ( i , 0 ) ;
3558: LD_VAR 0 9
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 109
// continue ;
3570: GO 3007
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3572: LD_ADDR_VAR 0 12
3576: PUSH
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 57
3584: PUSH
3585: EMPTY
3586: LIST
3587: PPUSH
3588: CALL_OW 70
3592: ST_TO_ADDR
// if undone then
3593: LD_VAR 0 12
3597: IFFALSE 3619
// begin ComComplete ( i , undone [ 1 ] ) ;
3599: LD_VAR 0 9
3603: PPUSH
3604: LD_VAR 0 12
3608: PUSH
3609: LD_INT 1
3611: ARRAY
3612: PPUSH
3613: CALL 23666 0 2
// continue ;
3617: GO 3007
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3619: LD_VAR 0 9
3623: PPUSH
3624: LD_VAR 0 37
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: PPUSH
3637: LD_VAR 0 37
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: PUSH
3646: LD_INT 2
3648: ARRAY
3649: PPUSH
3650: LD_VAR 0 37
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PUSH
3659: LD_INT 3
3661: ARRAY
3662: PPUSH
3663: LD_VAR 0 37
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PUSH
3672: LD_INT 4
3674: ARRAY
3675: PPUSH
3676: CALL_OW 145
// end ; if tag = tCrates then
3680: LD_VAR 0 19
3684: PUSH
3685: LD_INT 2
3687: EQUAL
3688: IFFALSE 3825
// begin if IsInUnit ( i ) then
3690: LD_VAR 0 9
3694: PPUSH
3695: CALL_OW 310
3699: IFFALSE 3712
// begin ComExitBuilding ( i ) ;
3701: LD_VAR 0 9
3705: PPUSH
3706: CALL_OW 122
// continue ;
3710: GO 3007
// end ; if not cr then
3712: LD_VAR 0 21
3716: NOT
3717: IFFALSE 3733
// begin SetTag ( i , 0 ) ;
3719: LD_VAR 0 9
3723: PPUSH
3724: LD_INT 0
3726: PPUSH
3727: CALL_OW 109
// continue ;
3731: GO 3007
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3733: LD_VAR 0 9
3737: PPUSH
3738: CALL_OW 314
3742: NOT
3743: PUSH
3744: LD_INT 81
3746: PUSH
3747: LD_VAR 0 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 92
3758: PUSH
3759: LD_VAR 0 21
3763: PUSH
3764: LD_INT 1
3766: ARRAY
3767: PUSH
3768: LD_VAR 0 21
3772: PUSH
3773: LD_INT 2
3775: ARRAY
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 69
3794: NOT
3795: AND
3796: IFFALSE 3825
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3798: LD_VAR 0 9
3802: PPUSH
3803: LD_VAR 0 21
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_VAR 0 21
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 117
// end ; end ;
3825: GO 3007
3827: POP
3828: POP
// end ; if vehicles then
3829: LD_VAR 0 30
3833: IFFALSE 4633
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3835: LD_ADDR_VAR 0 30
3839: PUSH
3840: LD_VAR 0 30
3844: PPUSH
3845: LD_INT 3
3847: PUSH
3848: LD_INT 2
3850: PUSH
3851: LD_INT 34
3853: PUSH
3854: LD_INT 88
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 34
3863: PUSH
3864: LD_INT 32
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 50
3882: PUSH
3883: EMPTY
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 72
3894: ST_TO_ADDR
// if vehicles then
3895: LD_VAR 0 30
3899: IFFALSE 4633
// begin for i in vehicles do
3901: LD_ADDR_VAR 0 9
3905: PUSH
3906: LD_VAR 0 30
3910: PUSH
3911: FOR_IN
3912: IFFALSE 4631
// begin tag := GetTag ( i ) ;
3914: LD_ADDR_VAR 0 19
3918: PUSH
3919: LD_VAR 0 9
3923: PPUSH
3924: CALL_OW 110
3928: ST_TO_ADDR
// if not tag then
3929: LD_VAR 0 19
3933: NOT
3934: IFFALSE 4080
// begin if GetControl ( i ) = control_manual then
3936: LD_VAR 0 9
3940: PPUSH
3941: CALL_OW 263
3945: PUSH
3946: LD_INT 1
3948: EQUAL
3949: IFFALSE 4066
// begin drivers := arDrivers ;
3951: LD_ADDR_VAR 0 28
3955: PUSH
3956: LD_EXP 10
3960: ST_TO_ADDR
// if not drivers then
3961: LD_VAR 0 28
3965: NOT
3966: IFFALSE 4046
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3968: LD_ADDR_VAR 0 28
3972: PUSH
3973: LD_VAR 0 18
3977: PPUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 120
3983: PUSH
3984: LD_INT 7
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: ST_TO_ADDR
// if drivers then
4000: LD_VAR 0 28
4004: IFFALSE 4046
// begin SetTag ( drivers [ 1 ] , tMech ) ;
4006: LD_VAR 0 28
4010: PUSH
4011: LD_INT 1
4013: ARRAY
4014: PPUSH
4015: LD_INT 7
4017: PPUSH
4018: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
4022: LD_ADDR_EXP 10
4026: PUSH
4027: LD_EXP 10
4031: PPUSH
4032: LD_VAR 0 28
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: CALL 53177 0 2
4045: ST_TO_ADDR
// end ; end ; if drivers then
4046: LD_VAR 0 28
4050: IFFALSE 4064
// SetTag ( i , tBusy ) ;
4052: LD_VAR 0 9
4056: PPUSH
4057: LD_INT 8
4059: PPUSH
4060: CALL_OW 109
// continue ;
4064: GO 3911
// end ; SetTag ( i , tBusy ) ;
4066: LD_VAR 0 9
4070: PPUSH
4071: LD_INT 8
4073: PPUSH
4074: CALL_OW 109
// end else
4078: GO 4629
// if tag = tBusy then
4080: LD_VAR 0 19
4084: PUSH
4085: LD_INT 8
4087: EQUAL
4088: IFFALSE 4300
// begin if GetLives ( i ) = 1000 then
4090: LD_VAR 0 9
4094: PPUSH
4095: CALL_OW 256
4099: PUSH
4100: LD_INT 1000
4102: EQUAL
4103: IFFALSE 4298
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4105: LD_VAR 0 9
4109: PPUSH
4110: CALL_OW 263
4114: PUSH
4115: LD_INT 1
4117: EQUAL
4118: PUSH
4119: LD_VAR 0 9
4123: PPUSH
4124: CALL_OW 311
4128: NOT
4129: AND
4130: IFFALSE 4286
// begin drivers := arDrivers ;
4132: LD_ADDR_VAR 0 28
4136: PUSH
4137: LD_EXP 10
4141: ST_TO_ADDR
// if not drivers then
4142: LD_VAR 0 28
4146: NOT
4147: IFFALSE 4163
// begin SetTag ( i , 0 ) ;
4149: LD_VAR 0 9
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: CALL_OW 109
// continue ;
4161: GO 3911
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4163: LD_VAR 0 28
4167: PUSH
4168: LD_INT 1
4170: ARRAY
4171: PPUSH
4172: CALL_OW 310
4176: PUSH
4177: LD_VAR 0 28
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: CALL 50781 0 1
4190: NOT
4191: AND
4192: IFFALSE 4207
// ComExitBuilding ( drivers [ 1 ] ) ;
4194: LD_VAR 0 28
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4207: LD_VAR 0 30
4211: PPUSH
4212: LD_INT 120
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 72
4226: PUSH
4227: LD_VAR 0 28
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: CALL_OW 314
4240: NOT
4241: AND
4242: PUSH
4243: LD_VAR 0 30
4247: PPUSH
4248: LD_INT 120
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PPUSH
4258: CALL_OW 72
4262: NOT
4263: OR
4264: IFFALSE 4284
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4266: LD_VAR 0 28
4270: PUSH
4271: LD_INT 1
4273: ARRAY
4274: PPUSH
4275: LD_VAR 0 9
4279: PPUSH
4280: CALL_OW 120
// continue ;
4284: GO 3911
// end ; SetTag ( i , tAttack ) ;
4286: LD_VAR 0 9
4290: PPUSH
4291: LD_INT 13
4293: PPUSH
4294: CALL_OW 109
// end ; end else
4298: GO 4629
// if tag = tAttack then
4300: LD_VAR 0 19
4304: PUSH
4305: LD_INT 13
4307: EQUAL
4308: IFFALSE 4488
// begin enemy := enemyInBase ;
4310: LD_ADDR_VAR 0 25
4314: PUSH
4315: LD_VAR 0 26
4319: ST_TO_ADDR
// if not enemy then
4320: LD_VAR 0 25
4324: NOT
4325: IFFALSE 4337
// enemy := enemyOuterBase ;
4327: LD_ADDR_VAR 0 25
4331: PUSH
4332: LD_VAR 0 27
4336: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4337: LD_VAR 0 25
4341: NOT
4342: PUSH
4343: LD_VAR 0 9
4347: PPUSH
4348: LD_VAR 0 7
4352: PUSH
4353: LD_INT 1
4355: ARRAY
4356: PPUSH
4357: LD_VAR 0 7
4361: PUSH
4362: LD_INT 2
4364: ARRAY
4365: PPUSH
4366: CALL_OW 297
4370: PUSH
4371: LD_INT 10
4373: GREATER
4374: AND
4375: IFFALSE 4406
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4377: LD_VAR 0 9
4381: PPUSH
4382: LD_VAR 0 7
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: LD_VAR 0 7
4395: PUSH
4396: LD_INT 2
4398: ARRAY
4399: PPUSH
4400: CALL_OW 111
// continue ;
4404: GO 3911
// end ; if GetLives ( i ) < 650 then
4406: LD_VAR 0 9
4410: PPUSH
4411: CALL_OW 256
4415: PUSH
4416: LD_INT 650
4418: LESS
4419: IFFALSE 4462
// begin SetTag ( i , tVehRepair ) ;
4421: LD_VAR 0 9
4425: PPUSH
4426: LD_INT 9
4428: PPUSH
4429: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4433: LD_VAR 0 9
4437: PPUSH
4438: LD_VAR 0 7
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_VAR 0 7
4451: PUSH
4452: LD_INT 2
4454: ARRAY
4455: PPUSH
4456: CALL_OW 111
// continue ;
4460: GO 3911
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4462: LD_VAR 0 9
4466: PPUSH
4467: LD_VAR 0 25
4471: PPUSH
4472: LD_VAR 0 9
4476: PPUSH
4477: CALL_OW 74
4481: PPUSH
4482: CALL_OW 115
// end else
4486: GO 4629
// if tag = tVehRepair then
4488: LD_VAR 0 19
4492: PUSH
4493: LD_INT 9
4495: EQUAL
4496: IFFALSE 4629
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4498: LD_VAR 0 9
4502: PPUSH
4503: LD_VAR 0 7
4507: PUSH
4508: LD_INT 1
4510: ARRAY
4511: PPUSH
4512: LD_VAR 0 7
4516: PUSH
4517: LD_INT 2
4519: ARRAY
4520: PPUSH
4521: CALL_OW 297
4525: PUSH
4526: LD_INT 10
4528: GREATER
4529: IFFALSE 4560
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4531: LD_VAR 0 9
4535: PPUSH
4536: LD_VAR 0 7
4540: PUSH
4541: LD_INT 1
4543: ARRAY
4544: PPUSH
4545: LD_VAR 0 7
4549: PUSH
4550: LD_INT 2
4552: ARRAY
4553: PPUSH
4554: CALL_OW 111
// continue ;
4558: GO 3911
// end ; if GetLives ( i ) = 1000 then
4560: LD_VAR 0 9
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4589
// begin SetTag ( i , tBusy ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: LD_INT 8
4582: PPUSH
4583: CALL_OW 109
// continue ;
4587: GO 3911
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4589: LD_VAR 0 9
4593: PPUSH
4594: CALL_OW 263
4598: PUSH
4599: LD_INT 1
4601: EQUAL
4602: PUSH
4603: LD_VAR 0 9
4607: PPUSH
4608: CALL_OW 311
4612: AND
4613: IFFALSE 4629
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4615: LD_VAR 0 9
4619: PPUSH
4620: CALL_OW 311
4624: PPUSH
4625: CALL 54877 0 1
// end ; end ;
4629: GO 3911
4631: POP
4632: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4633: LD_ADDR_VAR 0 23
4637: PUSH
4638: LD_VAR 0 5
4642: PPUSH
4643: LD_INT 2
4645: PUSH
4646: LD_INT 25
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 25
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 25
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 9
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 50
4695: PUSH
4696: EMPTY
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 72
4707: ST_TO_ADDR
// if sol then
4708: LD_VAR 0 23
4712: IFFALSE 5220
// begin if enemyInBase then
4714: LD_VAR 0 26
4718: IFFALSE 4897
// begin for i in sol do
4720: LD_ADDR_VAR 0 9
4724: PUSH
4725: LD_VAR 0 23
4729: PUSH
4730: FOR_IN
4731: IFFALSE 4893
// begin tw := IsInUnit ( i ) ;
4733: LD_ADDR_VAR 0 20
4737: PUSH
4738: LD_VAR 0 9
4742: PPUSH
4743: CALL_OW 310
4747: ST_TO_ADDR
// if tw then
4748: LD_VAR 0 20
4752: IFFALSE 4835
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4754: LD_VAR 0 20
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 101
4773: PUSH
4774: LD_VAR 0 38
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: LD_INT 32
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 30
4798: PUSH
4799: LD_INT 31
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PPUSH
4816: CALL_OW 69
4820: IN
4821: NOT
4822: IFFALSE 4833
// ComExitBuilding ( i ) ;
4824: LD_VAR 0 9
4828: PPUSH
4829: CALL_OW 122
// end else
4833: GO 4891
// if IsInArea ( i , area ) then
4835: LD_VAR 0 9
4839: PPUSH
4840: LD_VAR 0 3
4844: PPUSH
4845: CALL_OW 308
4849: IFFALSE 4877
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4851: LD_VAR 0 9
4855: PPUSH
4856: LD_VAR 0 26
4860: PPUSH
4861: LD_VAR 0 9
4865: PPUSH
4866: CALL_OW 74
4870: PPUSH
4871: CALL_OW 115
4875: GO 4891
// ComMoveToArea ( i , area ) ;
4877: LD_VAR 0 9
4881: PPUSH
4882: LD_VAR 0 3
4886: PPUSH
4887: CALL_OW 113
// end ;
4891: GO 4730
4893: POP
4894: POP
// end else
4895: GO 5220
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4897: LD_ADDR_VAR 0 32
4901: PUSH
4902: LD_VAR 0 3
4906: PPUSH
4907: LD_INT 3
4909: PUSH
4910: LD_INT 62
4912: PUSH
4913: EMPTY
4914: LIST
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 2
4922: PUSH
4923: LD_INT 30
4925: PUSH
4926: LD_INT 32
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 30
4935: PUSH
4936: LD_INT 4
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: LD_INT 30
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 30
4955: PUSH
4956: LD_INT 31
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: ST_TO_ADDR
// if empty then
4979: LD_VAR 0 32
4983: IFFALSE 5000
// empty := ReverseArray ( empty ) ;
4985: LD_ADDR_VAR 0 32
4989: PUSH
4990: LD_VAR 0 32
4994: PPUSH
4995: CALL 48444 0 1
4999: ST_TO_ADDR
// for i in sol do
5000: LD_ADDR_VAR 0 9
5004: PUSH
5005: LD_VAR 0 23
5009: PUSH
5010: FOR_IN
5011: IFFALSE 5218
// begin tag := GetTag ( i ) ;
5013: LD_ADDR_VAR 0 19
5017: PUSH
5018: LD_VAR 0 9
5022: PPUSH
5023: CALL_OW 110
5027: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
5028: LD_VAR 0 9
5032: PPUSH
5033: CALL_OW 256
5037: PUSH
5038: LD_INT 1000
5040: LESS
5041: PUSH
5042: LD_VAR 0 19
5046: PUSH
5047: LD_INT 1
5049: NONEQUAL
5050: AND
5051: IFFALSE 5103
// begin SetTag ( i , tHeal ) ;
5053: LD_VAR 0 9
5057: PPUSH
5058: LD_INT 1
5060: PPUSH
5061: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5065: LD_VAR 0 9
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: ARRAY
5078: PPUSH
5079: LD_VAR 0 6
5083: PUSH
5084: LD_INT 2
5086: ARRAY
5087: PPUSH
5088: CALL_OW 111
// AddComHold ( i ) ;
5092: LD_VAR 0 9
5096: PPUSH
5097: CALL_OW 200
// continue ;
5101: GO 5010
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5103: LD_VAR 0 9
5107: PPUSH
5108: CALL_OW 256
5112: PUSH
5113: LD_INT 1000
5115: EQUAL
5116: PUSH
5117: LD_VAR 0 19
5121: PUSH
5122: LD_INT 1
5124: EQUAL
5125: AND
5126: IFFALSE 5142
// begin SetTag ( i , 0 ) ;
5128: LD_VAR 0 9
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL_OW 109
// continue ;
5140: GO 5010
// end ; if HasTask ( i ) then
5142: LD_VAR 0 9
5146: PPUSH
5147: CALL_OW 314
5151: IFFALSE 5155
// continue ;
5153: GO 5010
// if not IsInUnit ( i ) and not tag and empty then
5155: LD_VAR 0 9
5159: PPUSH
5160: CALL_OW 310
5164: NOT
5165: PUSH
5166: LD_VAR 0 19
5170: NOT
5171: AND
5172: PUSH
5173: LD_VAR 0 32
5177: AND
5178: IFFALSE 5216
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5180: LD_VAR 0 9
5184: PPUSH
5185: LD_VAR 0 32
5189: PUSH
5190: LD_INT 1
5192: ARRAY
5193: PPUSH
5194: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5198: LD_ADDR_VAR 0 32
5202: PUSH
5203: LD_VAR 0 32
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 3
5215: ST_TO_ADDR
// end ; end ;
5216: GO 5010
5218: POP
5219: POP
// end ; end ; end ;
5220: LD_VAR 0 8
5224: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5225: LD_EXP 14
5229: PPUSH
5230: LD_INT 50
5232: PUSH
5233: EMPTY
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: IFFALSE 5293
5242: GO 5244
5244: DISABLE
// begin enable ;
5245: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5246: LD_EXP 3
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_EXP 14
5268: PPUSH
5269: LD_INT 109
5271: PUSH
5272: LD_INT 43
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: LD_INT 112
5281: PUSH
5282: LD_INT 52
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PPUSH
5289: CALL 1265 0 7
// end ;
5293: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp , side ;
5294: LD_EXP 13
5298: IFFALSE 5539
5300: GO 5302
5302: DISABLE
5303: LD_INT 0
5305: PPUSH
5306: PPUSH
5307: PPUSH
5308: PPUSH
// begin enable ;
5309: ENABLE
// p := 1 ;
5310: LD_ADDR_VAR 0 2
5314: PUSH
5315: LD_INT 1
5317: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: DOUBLE
5324: LD_INT 1
5326: DEC
5327: ST_TO_ADDR
5328: LD_EXP 13
5332: PPUSH
5333: CALL 17568 0 1
5337: PUSH
5338: LD_INT 2
5340: DIV
5341: PUSH
5342: FOR_TO
5343: IFFALSE 5537
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5345: LD_ADDR_VAR 0 3
5349: PUSH
5350: LD_EXP 13
5354: PUSH
5355: LD_VAR 0 2
5359: ARRAY
5360: PPUSH
5361: LD_EXP 13
5365: PUSH
5366: LD_VAR 0 2
5370: PUSH
5371: LD_INT 1
5373: PLUS
5374: ARRAY
5375: PPUSH
5376: CALL_OW 428
5380: ST_TO_ADDR
// if tmp then
5381: LD_VAR 0 3
5385: IFFALSE 5521
// begin side := GetSide ( tmp ) ;
5387: LD_ADDR_VAR 0 4
5391: PUSH
5392: LD_VAR 0 3
5396: PPUSH
5397: CALL_OW 255
5401: ST_TO_ADDR
// if side <> botSides [ 1 ] and side > 0 then
5402: LD_VAR 0 4
5406: PUSH
5407: LD_EXP 3
5411: PUSH
5412: LD_INT 1
5414: ARRAY
5415: NONEQUAL
5416: PUSH
5417: LD_VAR 0 4
5421: PUSH
5422: LD_INT 0
5424: GREATER
5425: AND
5426: IFFALSE 5521
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5428: LD_EXP 13
5432: PUSH
5433: LD_VAR 0 2
5437: ARRAY
5438: PPUSH
5439: LD_EXP 13
5443: PUSH
5444: LD_VAR 0 2
5448: PUSH
5449: LD_INT 1
5451: PLUS
5452: ARRAY
5453: PPUSH
5454: LD_EXP 3
5458: PUSH
5459: LD_INT 1
5461: ARRAY
5462: PPUSH
5463: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5467: LD_ADDR_EXP 13
5471: PUSH
5472: LD_EXP 13
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: CALL_OW 3
5486: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5487: LD_ADDR_EXP 13
5491: PUSH
5492: LD_EXP 13
5496: PPUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: CALL_OW 3
5506: ST_TO_ADDR
// p := p - 2 ;
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_VAR 0 2
5516: PUSH
5517: LD_INT 2
5519: MINUS
5520: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: LD_VAR 0 2
5530: PUSH
5531: LD_INT 2
5533: PLUS
5534: ST_TO_ADDR
// end ;
5535: GO 5342
5537: POP
5538: POP
// end ;
5539: PPOPN 4
5541: END
// every 6 6$00 trigger IsOk ( arDep ) do var un ;
5542: LD_INT 2
5544: PPUSH
5545: CALL_OW 302
5549: IFFALSE 5870
5551: GO 5553
5553: DISABLE
5554: LD_INT 0
5556: PPUSH
// begin enable ;
5557: ENABLE
// if UnitsInside ( arFac ) < 3 then
5558: LD_INT 12
5560: PPUSH
5561: CALL_OW 313
5565: PUSH
5566: LD_INT 3
5568: LESS
5569: IFFALSE 5698
// begin arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
5571: LD_ADDR_EXP 11
5575: PUSH
5576: LD_EXP 11
5580: PPUSH
5581: CALL 54560 0 1
5585: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
5586: LD_ADDR_OWVAR 20
5590: PUSH
5591: LD_EXP 3
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: ST_TO_ADDR
// uc_nation := nation_arabian ;
5600: LD_ADDR_OWVAR 21
5604: PUSH
5605: LD_INT 2
5607: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 3
5613: PUSH
5614: LD_INT 6
5616: PUSH
5617: LD_INT 9
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: LD_OWVAR 67
5629: ARRAY
5630: PPUSH
5631: CALL_OW 383
// un := CreateHuman ;
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: CALL_OW 44
5644: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
5645: LD_VAR 0 1
5649: PPUSH
5650: LD_INT 143
5652: PPUSH
5653: LD_INT 29
5655: PPUSH
5656: LD_INT 0
5658: PPUSH
5659: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
5663: LD_VAR 0 1
5667: PPUSH
5668: LD_INT 115
5670: PPUSH
5671: LD_INT 52
5673: PPUSH
5674: CALL_OW 111
// arForce := Join ( arForce , un ) ;
5678: LD_ADDR_EXP 14
5682: PUSH
5683: LD_EXP 14
5687: PPUSH
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL 53177 0 2
5697: ST_TO_ADDR
// end ; arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5698: LD_ADDR_EXP 6
5702: PUSH
5703: LD_EXP 6
5707: PUSH
5708: LD_INT 14
5710: PUSH
5711: LD_INT 1
5713: PUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 27
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: PUSH
5726: LD_INT 14
5728: PUSH
5729: LD_INT 1
5731: PUSH
5732: LD_INT 2
5734: PUSH
5735: LD_INT 28
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 14
5746: PUSH
5747: LD_INT 1
5749: PUSH
5750: LD_INT 2
5752: PUSH
5753: LD_INT 28
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: ADD
5767: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5768: LD_OWVAR 67
5772: PUSH
5773: LD_INT 1
5775: GREATER
5776: PUSH
5777: LD_INT 72
5779: PPUSH
5780: LD_EXP 3
5784: PUSH
5785: LD_INT 1
5787: ARRAY
5788: PPUSH
5789: CALL_OW 321
5793: PUSH
5794: LD_INT 2
5796: EQUAL
5797: AND
5798: IFFALSE 5870
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5800: LD_ADDR_EXP 6
5804: PUSH
5805: LD_EXP 6
5809: PUSH
5810: LD_INT 14
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: LD_INT 2
5818: PUSH
5819: LD_INT 29
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 14
5830: PUSH
5831: LD_INT 3
5833: PUSH
5834: LD_INT 2
5836: PUSH
5837: LD_INT 29
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 14
5848: PUSH
5849: LD_INT 3
5851: PUSH
5852: LD_INT 2
5854: PUSH
5855: LD_INT 29
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: ADD
5869: ST_TO_ADDR
// end ; end_of_file
5870: PPOPN 1
5872: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5873: LD_INT 0
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
// multi_settings_counter := 6 ;
5880: LD_ADDR_EXP 29
5884: PUSH
5885: LD_INT 6
5887: ST_TO_ADDR
// multi_settings := [ ] ;
5888: LD_ADDR_EXP 28
5892: PUSH
5893: EMPTY
5894: ST_TO_ADDR
// if Multiplayer then
5895: LD_OWVAR 4
5899: IFFALSE 6079
// begin your_side := mp_player_side ;
5901: LD_ADDR_OWVAR 2
5905: PUSH
5906: LD_OWVAR 7
5910: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5911: LD_ADDR_EXP 17
5915: PUSH
5916: LD_OWVAR 6
5920: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5921: LD_ADDR_EXP 18
5925: PUSH
5926: LD_OWVAR 17
5930: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5931: LD_ADDR_EXP 19
5935: PUSH
5936: LD_OWVAR 15
5940: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5941: LD_ADDR_EXP 20
5945: PUSH
5946: LD_OWVAR 16
5950: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5951: LD_ADDR_EXP 21
5955: PUSH
5956: EMPTY
5957: PUSH
5958: EMPTY
5959: LIST
5960: ST_TO_ADDR
// for i in mp_teams do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: LD_OWVAR 12
5970: PUSH
5971: FOR_IN
5972: IFFALSE 6015
// if i then
5974: LD_VAR 0 2
5978: IFFALSE 6013
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5980: LD_ADDR_EXP 21
5984: PUSH
5985: LD_EXP 21
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: LD_EXP 21
5997: PUSH
5998: LD_INT 1
6000: ARRAY
6001: PUSH
6002: LD_VAR 0 2
6006: UNION
6007: PPUSH
6008: CALL_OW 1
6012: ST_TO_ADDR
6013: GO 5971
6015: POP
6016: POP
// for i := 1 to multi_settings_counter do
6017: LD_ADDR_VAR 0 2
6021: PUSH
6022: DOUBLE
6023: LD_INT 1
6025: DEC
6026: ST_TO_ADDR
6027: LD_EXP 29
6031: PUSH
6032: FOR_TO
6033: IFFALSE 6075
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
6035: LD_ADDR_EXP 28
6039: PUSH
6040: LD_EXP 28
6044: PPUSH
6045: LD_EXP 28
6049: PUSH
6050: LD_INT 1
6052: PLUS
6053: PPUSH
6054: LD_VAR 0 2
6058: PPUSH
6059: CALL_OW 426
6063: PUSH
6064: LD_INT 1
6066: PLUS
6067: PPUSH
6068: CALL_OW 1
6072: ST_TO_ADDR
6073: GO 6032
6075: POP
6076: POP
// end else
6077: GO 6265
// begin your_side := 3 ;
6079: LD_ADDR_OWVAR 2
6083: PUSH
6084: LD_INT 3
6086: ST_TO_ADDR
// multi_gametype := 1 ;
6087: LD_ADDR_EXP 17
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
6095: LD_ADDR_EXP 18
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: LD_INT 0
6105: PUSH
6106: LD_INT 1
6108: PUSH
6109: LD_INT 2
6111: PUSH
6112: LD_INT 3
6114: PUSH
6115: LD_INT 0
6117: PUSH
6118: LD_INT 0
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
6134: LD_ADDR_EXP 19
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 1
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: LD_INT 1
6153: PUSH
6154: LD_INT 0
6156: PUSH
6157: LD_INT 0
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
6173: LD_ADDR_EXP 20
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: LD_INT 3
6189: PUSH
6190: LD_INT 3
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6212: LD_ADDR_EXP 21
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6234: LD_ADDR_EXP 28
6238: PUSH
6239: LD_INT 2
6241: PUSH
6242: LD_INT 4
6244: PUSH
6245: LD_INT 4
6247: PUSH
6248: LD_INT 3
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: LD_INT 3
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6265: LD_ADDR_EXP 22
6269: PUSH
6270: LD_INT 0
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: LD_INT 0
6287: PUSH
6288: LD_INT 0
6290: PUSH
6291: LD_INT 0
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6304: LD_ADDR_EXP 25
6308: PUSH
6309: LD_INT 0
6311: PUSH
6312: LD_INT 0
6314: PUSH
6315: LD_INT 0
6317: PUSH
6318: LD_INT 0
6320: PUSH
6321: LD_INT 0
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6343: LD_ADDR_EXP 36
6347: PUSH
6348: LD_INT 0
6350: PUSH
6351: LD_INT 0
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: LD_INT 0
6365: PUSH
6366: LD_INT 0
6368: PUSH
6369: LD_INT 0
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: ST_TO_ADDR
// multi_teamgame := true ;
6382: LD_ADDR_EXP 26
6386: PUSH
6387: LD_INT 1
6389: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6390: LD_ADDR_EXP 24
6394: PUSH
6395: LD_INT 3
6397: PUSH
6398: EMPTY
6399: LIST
6400: ST_TO_ADDR
// multi_custom_commanders := true ;
6401: LD_ADDR_EXP 27
6405: PUSH
6406: LD_INT 1
6408: ST_TO_ADDR
// multi_commanders := [ ] ;
6409: LD_ADDR_EXP 35
6413: PUSH
6414: EMPTY
6415: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6416: LD_ADDR_EXP 38
6420: PUSH
6421: EMPTY
6422: ST_TO_ADDR
// multi_players_amount := 0 ;
6423: LD_ADDR_EXP 37
6427: PUSH
6428: LD_INT 0
6430: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6431: LD_ADDR_EXP 23
6435: PUSH
6436: LD_INT 5
6438: PUSH
6439: LD_INT 6
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: PUSH
6456: LD_INT 9
6458: PUSH
6459: LD_INT 10
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6471: LD_ADDR_EXP 40
6475: PUSH
6476: EMPTY
6477: PUSH
6478: EMPTY
6479: PUSH
6480: EMPTY
6481: PUSH
6482: EMPTY
6483: PUSH
6484: EMPTY
6485: PUSH
6486: EMPTY
6487: PUSH
6488: EMPTY
6489: PUSH
6490: EMPTY
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: ST_TO_ADDR
// for i := 1 to 8 do
6502: LD_ADDR_VAR 0 2
6506: PUSH
6507: DOUBLE
6508: LD_INT 1
6510: DEC
6511: ST_TO_ADDR
6512: LD_INT 8
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6845
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 530
6527: IFFALSE 6685
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6529: LD_ADDR_EXP 22
6533: PUSH
6534: LD_EXP 22
6538: PPUSH
6539: LD_VAR 0 2
6543: PPUSH
6544: LD_INT 1
6546: PPUSH
6547: CALL_OW 1
6551: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6552: LD_ADDR_EXP 20
6556: PUSH
6557: LD_EXP 20
6561: PPUSH
6562: LD_VAR 0 2
6566: PPUSH
6567: LD_INT 0
6569: PPUSH
6570: CALL_OW 1
6574: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6575: LD_ADDR_EXP 18
6579: PUSH
6580: LD_EXP 18
6584: PPUSH
6585: LD_VAR 0 2
6589: PPUSH
6590: LD_INT 0
6592: PPUSH
6593: CALL_OW 1
6597: ST_TO_ADDR
// for j = 1 to multi_teams do
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: DOUBLE
6604: LD_INT 1
6606: DEC
6607: ST_TO_ADDR
6608: LD_EXP 21
6612: PUSH
6613: FOR_TO
6614: IFFALSE 6683
// begin if i in multi_teams [ j ] then
6616: LD_VAR 0 2
6620: PUSH
6621: LD_EXP 21
6625: PUSH
6626: LD_VAR 0 3
6630: ARRAY
6631: IN
6632: IFFALSE 6681
// begin tmp := multi_teams [ j ] diff i ;
6634: LD_ADDR_VAR 0 5
6638: PUSH
6639: LD_EXP 21
6643: PUSH
6644: LD_VAR 0 3
6648: ARRAY
6649: PUSH
6650: LD_VAR 0 2
6654: DIFF
6655: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6656: LD_ADDR_EXP 21
6660: PUSH
6661: LD_EXP 21
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: LD_VAR 0 5
6675: PPUSH
6676: CALL_OW 1
6680: ST_TO_ADDR
// end ; end ;
6681: GO 6613
6683: POP
6684: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6685: LD_EXP 20
6689: PUSH
6690: LD_VAR 0 2
6694: ARRAY
6695: PUSH
6696: LD_EXP 20
6700: PUSH
6701: LD_VAR 0 2
6705: ARRAY
6706: PUSH
6707: LD_EXP 24
6711: IN
6712: NOT
6713: AND
6714: IFFALSE 6755
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6716: LD_ADDR_EXP 20
6720: PUSH
6721: LD_EXP 20
6725: PPUSH
6726: LD_VAR 0 2
6730: PPUSH
6731: LD_EXP 24
6735: PUSH
6736: LD_INT 1
6738: PPUSH
6739: LD_EXP 24
6743: PPUSH
6744: CALL_OW 12
6748: ARRAY
6749: PPUSH
6750: CALL_OW 1
6754: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6755: LD_EXP 20
6759: PUSH
6760: LD_VAR 0 2
6764: ARRAY
6765: NOT
6766: PUSH
6767: LD_EXP 18
6771: PUSH
6772: LD_VAR 0 2
6776: ARRAY
6777: NOT
6778: AND
6779: PUSH
6780: LD_EXP 22
6784: PUSH
6785: LD_VAR 0 2
6789: ARRAY
6790: NOT
6791: AND
6792: IFFALSE 6817
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6794: LD_ADDR_EXP 25
6798: PUSH
6799: LD_EXP 25
6803: PPUSH
6804: LD_VAR 0 2
6808: PPUSH
6809: LD_INT 1
6811: PPUSH
6812: CALL_OW 1
6816: ST_TO_ADDR
// if multi_sides [ i ] then
6817: LD_EXP 18
6821: PUSH
6822: LD_VAR 0 2
6826: ARRAY
6827: IFFALSE 6843
// multi_players_amount := multi_players_amount + 1 ;
6829: LD_ADDR_EXP 37
6833: PUSH
6834: LD_EXP 37
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ST_TO_ADDR
// end ;
6843: GO 6515
6845: POP
6846: POP
// for i in multi_teams do
6847: LD_ADDR_VAR 0 2
6851: PUSH
6852: LD_EXP 21
6856: PUSH
6857: FOR_IN
6858: IFFALSE 6966
// begin for j = 2 to i do
6860: LD_ADDR_VAR 0 3
6864: PUSH
6865: DOUBLE
6866: LD_INT 2
6868: DEC
6869: ST_TO_ADDR
6870: LD_VAR 0 2
6874: PUSH
6875: FOR_TO
6876: IFFALSE 6962
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6878: LD_VAR 0 2
6882: PUSH
6883: LD_VAR 0 3
6887: ARRAY
6888: PPUSH
6889: LD_VAR 0 2
6893: PUSH
6894: LD_INT 1
6896: ARRAY
6897: PPUSH
6898: CALL_OW 343
// for x = 1 to j - 1 do
6902: LD_ADDR_VAR 0 4
6906: PUSH
6907: DOUBLE
6908: LD_INT 1
6910: DEC
6911: ST_TO_ADDR
6912: LD_VAR 0 3
6916: PUSH
6917: LD_INT 1
6919: MINUS
6920: PUSH
6921: FOR_TO
6922: IFFALSE 6958
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6924: LD_VAR 0 2
6928: PUSH
6929: LD_VAR 0 3
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 2
6939: PUSH
6940: LD_VAR 0 4
6944: ARRAY
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 80
6956: GO 6921
6958: POP
6959: POP
// end ;
6960: GO 6875
6962: POP
6963: POP
// end ;
6964: GO 6857
6966: POP
6967: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6968: LD_ADDR_OWVAR 67
6972: PUSH
6973: LD_INT 1
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 3
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: PUSH
6987: LD_EXP 28
6991: PUSH
6992: LD_INT 1
6994: ARRAY
6995: ARRAY
6996: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
6997: LD_ADDR_EXP 30
7001: PUSH
7002: LD_INT 9
7004: PUSH
7005: LD_INT 12
7007: PUSH
7008: LD_INT 15
7010: PUSH
7011: LD_INT 18
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_EXP 28
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: ARRAY
7029: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
7030: LD_ADDR_EXP 31
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: LD_INT 2
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: LD_EXP 28
7057: PUSH
7058: LD_INT 3
7060: ARRAY
7061: ARRAY
7062: ST_TO_ADDR
// multi_crates_spawn := [ [ 5000 , 0 0$32 ] , [ 8000 , 0 0$22 ] , [ 11000 , 0 0$14 ] , [ 14000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
7063: LD_ADDR_EXP 32
7067: PUSH
7068: LD_INT 5000
7070: PUSH
7071: LD_INT 1120
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 8000
7080: PUSH
7081: LD_INT 770
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 11000
7090: PUSH
7091: LD_INT 490
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 14000
7100: PUSH
7101: LD_INT 420
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: LD_EXP 28
7118: PUSH
7119: LD_INT 4
7121: ARRAY
7122: ARRAY
7123: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
7124: LD_ADDR_EXP 33
7128: PUSH
7129: LD_INT 0
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: LD_INT 2
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: PUSH
7147: LD_EXP 28
7151: PUSH
7152: LD_INT 5
7154: ARRAY
7155: ARRAY
7156: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
7157: LD_ADDR_EXP 34
7161: PUSH
7162: LD_INT 0
7164: PUSH
7165: LD_INT 1
7167: PUSH
7168: LD_INT 2
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_EXP 28
7180: PUSH
7181: LD_INT 6
7183: ARRAY
7184: ARRAY
7185: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7186: LD_ADDR_EXP 39
7190: PUSH
7191: LD_INT 10500
7193: PUSH
7194: LD_INT 31500
7196: PUSH
7197: LD_INT 52500
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: LD_OWVAR 67
7209: ARRAY
7210: ST_TO_ADDR
// end ;
7211: LD_VAR 0 1
7215: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7216: LD_INT 0
7218: PPUSH
7219: PPUSH
// if not multi_sides [ preferSide ] then
7220: LD_EXP 18
7224: PUSH
7225: LD_VAR 0 1
7229: ARRAY
7230: NOT
7231: IFFALSE 7245
// begin result := preferSide ;
7233: LD_ADDR_VAR 0 2
7237: PUSH
7238: LD_VAR 0 1
7242: ST_TO_ADDR
// exit ;
7243: GO 7292
// end ; for i := 1 to 8 do
7245: LD_ADDR_VAR 0 3
7249: PUSH
7250: DOUBLE
7251: LD_INT 1
7253: DEC
7254: ST_TO_ADDR
7255: LD_INT 8
7257: PUSH
7258: FOR_TO
7259: IFFALSE 7290
// if not multi_sides [ i ] then
7261: LD_EXP 18
7265: PUSH
7266: LD_VAR 0 3
7270: ARRAY
7271: NOT
7272: IFFALSE 7288
// begin result := i ;
7274: LD_ADDR_VAR 0 2
7278: PUSH
7279: LD_VAR 0 3
7283: ST_TO_ADDR
// exit ;
7284: POP
7285: POP
7286: GO 7292
// end ;
7288: GO 7258
7290: POP
7291: POP
// end ;
7292: LD_VAR 0 2
7296: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7297: LD_INT 0
7299: PPUSH
// uc_side := side ;
7300: LD_ADDR_OWVAR 20
7304: PUSH
7305: LD_VAR 0 1
7309: ST_TO_ADDR
// uc_nation := nation_russian ;
7310: LD_ADDR_OWVAR 21
7314: PUSH
7315: LD_INT 3
7317: ST_TO_ADDR
// hc_importance := 100 ;
7318: LD_ADDR_OWVAR 32
7322: PUSH
7323: LD_INT 100
7325: ST_TO_ADDR
// if num = 1 then
7326: LD_VAR 0 2
7330: PUSH
7331: LD_INT 1
7333: EQUAL
7334: IFFALSE 7401
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7336: LD_INT 1
7338: PPUSH
7339: LD_EXP 31
7343: PUSH
7344: LD_INT 1
7346: PLUS
7347: PPUSH
7348: CALL_OW 381
// hc_gallery := ru ;
7352: LD_ADDR_OWVAR 33
7356: PUSH
7357: LD_STRING ru
7359: ST_TO_ADDR
// hc_face_number := 25 ;
7360: LD_ADDR_OWVAR 34
7364: PUSH
7365: LD_INT 25
7367: ST_TO_ADDR
// hc_name := Xavier ;
7368: LD_ADDR_OWVAR 26
7372: PUSH
7373: LD_STRING Xavier
7375: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7376: LD_ADDR_OWVAR 29
7380: PUSH
7381: LD_INT 12
7383: PUSH
7384: LD_INT 10
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// result := CreateHuman ;
7391: LD_ADDR_VAR 0 3
7395: PUSH
7396: CALL_OW 44
7400: ST_TO_ADDR
// end ; if num = 2 then
7401: LD_VAR 0 2
7405: PUSH
7406: LD_INT 2
7408: EQUAL
7409: IFFALSE 7476
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7411: LD_INT 1
7413: PPUSH
7414: LD_EXP 31
7418: PUSH
7419: LD_INT 2
7421: PLUS
7422: PPUSH
7423: CALL_OW 383
// hc_gallery := ru ;
7427: LD_ADDR_OWVAR 33
7431: PUSH
7432: LD_STRING ru
7434: ST_TO_ADDR
// hc_face_number := 1 ;
7435: LD_ADDR_OWVAR 34
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// hc_name := Burlak ;
7443: LD_ADDR_OWVAR 26
7447: PUSH
7448: LD_STRING Burlak
7450: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7451: LD_ADDR_OWVAR 29
7455: PUSH
7456: LD_INT 10
7458: PUSH
7459: LD_INT 11
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// result := CreateHuman ;
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// end ; if num = 3 then
7476: LD_VAR 0 2
7480: PUSH
7481: LD_INT 3
7483: EQUAL
7484: IFFALSE 7551
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7486: LD_INT 1
7488: PPUSH
7489: LD_EXP 31
7493: PUSH
7494: LD_INT 1
7496: PLUS
7497: PPUSH
7498: CALL_OW 381
// hc_gallery := ru ;
7502: LD_ADDR_OWVAR 33
7506: PUSH
7507: LD_STRING ru
7509: ST_TO_ADDR
// hc_face_number := 18 ;
7510: LD_ADDR_OWVAR 34
7514: PUSH
7515: LD_INT 18
7517: ST_TO_ADDR
// hc_name := Vsevolod ;
7518: LD_ADDR_OWVAR 26
7522: PUSH
7523: LD_STRING Vsevolod
7525: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7526: LD_ADDR_OWVAR 29
7530: PUSH
7531: LD_INT 12
7533: PUSH
7534: LD_INT 11
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: ST_TO_ADDR
// result := CreateHuman ;
7541: LD_ADDR_VAR 0 3
7545: PUSH
7546: CALL_OW 44
7550: ST_TO_ADDR
// end ; end ;
7551: LD_VAR 0 3
7555: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7556: LD_INT 0
7558: PPUSH
7559: PPUSH
7560: PPUSH
// if not multi_apeman then
7561: LD_EXP 33
7565: NOT
7566: IFFALSE 7570
// exit ;
7568: GO 7648
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7570: LD_ADDR_VAR 0 3
7574: PUSH
7575: LD_INT 6
7577: PUSH
7578: LD_INT 9
7580: PUSH
7581: LD_INT 12
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: PUSH
7589: LD_EXP 33
7593: ARRAY
7594: ST_TO_ADDR
// for i := 1 to tmp do
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: DOUBLE
7601: LD_INT 1
7603: DEC
7604: ST_TO_ADDR
7605: LD_VAR 0 3
7609: PUSH
7610: FOR_TO
7611: IFFALSE 7646
// begin uc_side := 0 ;
7613: LD_ADDR_OWVAR 20
7617: PUSH
7618: LD_INT 0
7620: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7621: LD_INT 5
7623: NEG
7624: PPUSH
7625: CALL 49425 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7629: CALL_OW 44
7633: PPUSH
7634: LD_INT 21
7636: PPUSH
7637: LD_INT 0
7639: PPUSH
7640: CALL_OW 49
// end ;
7644: GO 7610
7646: POP
7647: POP
// end ;
7648: LD_VAR 0 1
7652: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7653: LD_INT 0
7655: PPUSH
7656: PPUSH
7657: PPUSH
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
7662: PPUSH
7663: PPUSH
7664: PPUSH
// for i := 1 to 8 do
7665: LD_ADDR_VAR 0 2
7669: PUSH
7670: DOUBLE
7671: LD_INT 1
7673: DEC
7674: ST_TO_ADDR
7675: LD_INT 8
7677: PUSH
7678: FOR_TO
7679: IFFALSE 8859
// begin if not multi_sides [ i ] then
7681: LD_EXP 18
7685: PUSH
7686: LD_VAR 0 2
7690: ARRAY
7691: NOT
7692: IFFALSE 7696
// continue ;
7694: GO 7678
// if multi_buildings [ multi_sides [ i ] ] then
7696: LD_EXP 40
7700: PUSH
7701: LD_EXP 18
7705: PUSH
7706: LD_VAR 0 2
7710: ARRAY
7711: ARRAY
7712: IFFALSE 7946
// begin uc_side := i ;
7714: LD_ADDR_OWVAR 20
7718: PUSH
7719: LD_VAR 0 2
7723: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7724: LD_ADDR_OWVAR 21
7728: PUSH
7729: LD_EXP 20
7733: PUSH
7734: LD_VAR 0 2
7738: ARRAY
7739: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7740: LD_ADDR_VAR 0 3
7744: PUSH
7745: LD_EXP 40
7749: PUSH
7750: LD_EXP 18
7754: PUSH
7755: LD_VAR 0 2
7759: ARRAY
7760: ARRAY
7761: PUSH
7762: FOR_IN
7763: IFFALSE 7944
// begin bc_type := j [ 1 ] ;
7765: LD_ADDR_OWVAR 42
7769: PUSH
7770: LD_VAR 0 3
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: ST_TO_ADDR
// bc_level := 2 ;
7779: LD_ADDR_OWVAR 43
7783: PUSH
7784: LD_INT 2
7786: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7787: LD_ADDR_VAR 0 4
7791: PUSH
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 2
7799: ARRAY
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 3
7809: PUSH
7810: LD_INT 2
7812: ARRAY
7813: PUSH
7814: LD_INT 2
7816: ARRAY
7817: PPUSH
7818: LD_VAR 0 3
7822: PUSH
7823: LD_INT 2
7825: ARRAY
7826: PUSH
7827: LD_INT 3
7829: ARRAY
7830: PPUSH
7831: CALL_OW 47
7835: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7836: LD_VAR 0 3
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PUSH
7845: LD_INT 0
7847: EQUAL
7848: IFFALSE 7942
// begin SetBName ( b , j [ 3 ] ) ;
7850: LD_VAR 0 4
7854: PPUSH
7855: LD_VAR 0 3
7859: PUSH
7860: LD_INT 3
7862: ARRAY
7863: PPUSH
7864: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7868: LD_VAR 0 4
7872: PPUSH
7873: CALL_OW 274
7877: PPUSH
7878: LD_INT 1
7880: PPUSH
7881: LD_INT 120
7883: PUSH
7884: LD_INT 100
7886: PUSH
7887: LD_INT 80
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: PUSH
7895: LD_OWVAR 67
7899: ARRAY
7900: PPUSH
7901: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7905: LD_VAR 0 4
7909: PPUSH
7910: CALL_OW 274
7914: PPUSH
7915: LD_INT 2
7917: PPUSH
7918: LD_INT 90
7920: PUSH
7921: LD_INT 60
7923: PUSH
7924: LD_INT 30
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_OWVAR 67
7936: ARRAY
7937: PPUSH
7938: CALL_OW 277
// end ; end ;
7942: GO 7762
7944: POP
7945: POP
// end ; if multi_custom_commanders then
7946: LD_EXP 27
7950: IFFALSE 8159
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7952: LD_ADDR_VAR 0 6
7956: PUSH
7957: LD_VAR 0 2
7961: PPUSH
7962: LD_EXP 18
7966: PUSH
7967: LD_VAR 0 2
7971: ARRAY
7972: PPUSH
7973: CALL 7297 0 2
7977: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7978: LD_ADDR_EXP 35
7982: PUSH
7983: LD_EXP 35
7987: PPUSH
7988: LD_EXP 35
7992: PUSH
7993: LD_INT 1
7995: PLUS
7996: PPUSH
7997: LD_VAR 0 6
8001: PPUSH
8002: CALL_OW 2
8006: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
8007: LD_VAR 0 6
8011: PPUSH
8012: CALL_OW 257
8016: PUSH
8017: LD_INT 3
8019: EQUAL
8020: IFFALSE 8124
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
8022: LD_INT 23
8024: PPUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_INT 1
8030: PPUSH
8031: LD_INT 46
8033: PPUSH
8034: LD_INT 80
8036: PPUSH
8037: CALL 20306 0 5
// veh := CreateVehicle ;
8041: LD_ADDR_VAR 0 7
8045: PUSH
8046: CALL_OW 45
8050: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
8051: LD_VAR 0 7
8055: PPUSH
8056: LD_VAR 0 6
8060: PPUSH
8061: CALL_OW 255
8065: PUSH
8066: LD_INT 1
8068: NEG
8069: MUL
8070: PPUSH
8071: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8075: LD_VAR 0 7
8079: PPUSH
8080: LD_EXP 23
8084: PUSH
8085: LD_EXP 18
8089: PUSH
8090: LD_VAR 0 2
8094: ARRAY
8095: ARRAY
8096: PUSH
8097: LD_INT 2
8099: ARRAY
8100: PPUSH
8101: LD_INT 0
8103: PPUSH
8104: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8108: LD_VAR 0 6
8112: PPUSH
8113: LD_VAR 0 7
8117: PPUSH
8118: CALL_OW 52
// end else
8122: GO 8157
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8124: LD_VAR 0 6
8128: PPUSH
8129: LD_EXP 23
8133: PUSH
8134: LD_EXP 18
8138: PUSH
8139: LD_VAR 0 2
8143: ARRAY
8144: ARRAY
8145: PUSH
8146: LD_INT 1
8148: ARRAY
8149: PPUSH
8150: LD_INT 0
8152: PPUSH
8153: CALL_OW 49
// end else
8157: GO 8370
// begin uc_side := i ;
8159: LD_ADDR_OWVAR 20
8163: PUSH
8164: LD_VAR 0 2
8168: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8169: LD_ADDR_OWVAR 21
8173: PUSH
8174: LD_EXP 20
8178: PUSH
8179: LD_VAR 0 2
8183: ARRAY
8184: ST_TO_ADDR
// hc_importance := 100 ;
8185: LD_ADDR_OWVAR 32
8189: PUSH
8190: LD_INT 100
8192: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8193: LD_INT 0
8195: PPUSH
8196: LD_INT 1
8198: PPUSH
8199: LD_EXP 31
8203: PPUSH
8204: CALL_OW 380
// if multiplayer then
8208: LD_OWVAR 4
8212: IFFALSE 8270
// begin hc_name := mp_sides_players_names [ i ] ;
8214: LD_ADDR_OWVAR 26
8218: PUSH
8219: LD_OWVAR 19
8223: PUSH
8224: LD_VAR 0 2
8228: ARRAY
8229: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8230: LD_ADDR_OWVAR 33
8234: PUSH
8235: LD_STRING MULTIAVATARS
8237: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8238: LD_ADDR_OWVAR 34
8242: PUSH
8243: LD_VAR 0 2
8247: PPUSH
8248: CALL_OW 525
8252: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8253: LD_ADDR_OWVAR 27
8257: PUSH
8258: LD_VAR 0 2
8262: PPUSH
8263: CALL_OW 526
8267: ST_TO_ADDR
// end else
8268: GO 8302
// begin hc_gallery :=  ;
8270: LD_ADDR_OWVAR 33
8274: PUSH
8275: LD_STRING 
8277: ST_TO_ADDR
// hc_name :=  ;
8278: LD_ADDR_OWVAR 26
8282: PUSH
8283: LD_STRING 
8285: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8286: LD_ADDR_OWVAR 27
8290: PUSH
8291: LD_INT 1
8293: PPUSH
8294: LD_INT 2
8296: PPUSH
8297: CALL_OW 12
8301: ST_TO_ADDR
// end ; un := CreateHuman ;
8302: LD_ADDR_VAR 0 6
8306: PUSH
8307: CALL_OW 44
8311: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8312: LD_VAR 0 6
8316: PPUSH
8317: LD_EXP 23
8321: PUSH
8322: LD_EXP 18
8326: PUSH
8327: LD_VAR 0 2
8331: ARRAY
8332: ARRAY
8333: PUSH
8334: LD_INT 1
8336: ARRAY
8337: PPUSH
8338: LD_INT 0
8340: PPUSH
8341: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8345: LD_ADDR_EXP 35
8349: PUSH
8350: LD_EXP 35
8354: PPUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: LD_VAR 0 6
8364: PPUSH
8365: CALL_OW 1
8369: ST_TO_ADDR
// end ; InitHc ;
8370: CALL_OW 19
// InitUc ;
8374: CALL_OW 18
// uc_side := i ;
8378: LD_ADDR_OWVAR 20
8382: PUSH
8383: LD_VAR 0 2
8387: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8388: LD_ADDR_OWVAR 21
8392: PUSH
8393: LD_EXP 20
8397: PUSH
8398: LD_VAR 0 2
8402: ARRAY
8403: ST_TO_ADDR
// hc_gallery :=  ;
8404: LD_ADDR_OWVAR 33
8408: PUSH
8409: LD_STRING 
8411: ST_TO_ADDR
// hc_name :=  ;
8412: LD_ADDR_OWVAR 26
8416: PUSH
8417: LD_STRING 
8419: ST_TO_ADDR
// hc_importance := 0 ;
8420: LD_ADDR_OWVAR 32
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
// cl := 1 ;
8428: LD_ADDR_VAR 0 5
8432: PUSH
8433: LD_INT 1
8435: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8436: LD_ADDR_VAR 0 3
8440: PUSH
8441: DOUBLE
8442: LD_INT 2
8444: DEC
8445: ST_TO_ADDR
8446: LD_EXP 30
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8855
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8454: LD_VAR 0 3
8458: PUSH
8459: LD_INT 1
8461: MINUS
8462: PUSH
8463: LD_EXP 30
8467: PUSH
8468: LD_INT 1
8470: MINUS
8471: PUSH
8472: LD_INT 4
8474: DIVREAL
8475: MOD
8476: PUSH
8477: LD_INT 0
8479: EQUAL
8480: IFFALSE 8496
// cl := cl + 1 ;
8482: LD_ADDR_VAR 0 5
8486: PUSH
8487: LD_VAR 0 5
8491: PUSH
8492: LD_INT 1
8494: PLUS
8495: ST_TO_ADDR
// if cl > 4 then
8496: LD_VAR 0 5
8500: PUSH
8501: LD_INT 4
8503: GREATER
8504: IFFALSE 8514
// cl := 1 ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: LD_INT 1
8513: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8514: LD_INT 0
8516: PPUSH
8517: LD_VAR 0 5
8521: PPUSH
8522: LD_EXP 31
8526: PPUSH
8527: CALL_OW 380
// un := CreateHuman ;
8531: LD_ADDR_VAR 0 6
8535: PUSH
8536: CALL_OW 44
8540: ST_TO_ADDR
// if j > copy then
8541: LD_VAR 0 3
8545: PUSH
8546: LD_VAR 0 9
8550: GREATER
8551: IFFALSE 8580
// copy := Replace ( copy , j , un ) else
8553: LD_ADDR_VAR 0 9
8557: PUSH
8558: LD_VAR 0 9
8562: PPUSH
8563: LD_VAR 0 3
8567: PPUSH
8568: LD_VAR 0 6
8572: PPUSH
8573: CALL_OW 1
8577: ST_TO_ADDR
8578: GO 8662
// begin CopySkills ( copy [ j ] , un ) ;
8580: LD_VAR 0 9
8584: PUSH
8585: LD_VAR 0 3
8589: ARRAY
8590: PPUSH
8591: LD_VAR 0 6
8595: PPUSH
8596: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8600: LD_VAR 0 6
8604: PPUSH
8605: LD_INT 2
8607: PPUSH
8608: LD_VAR 0 9
8612: PUSH
8613: LD_VAR 0 3
8617: ARRAY
8618: PPUSH
8619: LD_INT 2
8621: PPUSH
8622: CALL_OW 260
8626: PPUSH
8627: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8631: LD_VAR 0 6
8635: PPUSH
8636: LD_INT 1
8638: PPUSH
8639: LD_VAR 0 9
8643: PUSH
8644: LD_VAR 0 3
8648: ARRAY
8649: PPUSH
8650: LD_INT 1
8652: PPUSH
8653: CALL_OW 260
8657: PPUSH
8658: CALL_OW 239
// end ; if multi_pos_area then
8662: LD_EXP 23
8666: IFFALSE 8853
// begin if GetClass ( un ) = 3 then
8668: LD_VAR 0 6
8672: PPUSH
8673: CALL_OW 257
8677: PUSH
8678: LD_INT 3
8680: EQUAL
8681: IFFALSE 8820
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8683: LD_INT 22
8685: PPUSH
8686: LD_INT 1
8688: PPUSH
8689: LD_INT 1
8691: PPUSH
8692: LD_INT 44
8694: PUSH
8695: LD_INT 44
8697: PUSH
8698: LD_INT 43
8700: PUSH
8701: LD_INT 51
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 4
8717: MOD
8718: PUSH
8719: LD_INT 1
8721: PLUS
8722: ARRAY
8723: PPUSH
8724: LD_INT 80
8726: PPUSH
8727: CALL 20306 0 5
// veh := CreateVehicle ;
8731: LD_ADDR_VAR 0 7
8735: PUSH
8736: CALL_OW 45
8740: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8741: LD_VAR 0 7
8745: PPUSH
8746: LD_EXP 23
8750: PUSH
8751: LD_EXP 18
8755: PUSH
8756: LD_VAR 0 2
8760: ARRAY
8761: ARRAY
8762: PUSH
8763: LD_INT 2
8765: ARRAY
8766: PPUSH
8767: LD_INT 0
8769: PPUSH
8770: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8774: LD_VAR 0 6
8778: PPUSH
8779: LD_VAR 0 7
8783: PPUSH
8784: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8788: LD_VAR 0 7
8792: PPUSH
8793: CALL_OW 264
8797: PUSH
8798: LD_INT 51
8800: EQUAL
8801: IFFALSE 8818
// SetCargo ( veh , mat_cans , 100 ) ;
8803: LD_VAR 0 7
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: LD_INT 100
8813: PPUSH
8814: CALL_OW 290
// continue ;
8818: GO 8451
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8820: LD_VAR 0 6
8824: PPUSH
8825: LD_EXP 23
8829: PUSH
8830: LD_EXP 18
8834: PUSH
8835: LD_VAR 0 2
8839: ARRAY
8840: ARRAY
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_INT 0
8848: PPUSH
8849: CALL_OW 49
// end ; end ;
8853: GO 8451
8855: POP
8856: POP
// end ;
8857: GO 7678
8859: POP
8860: POP
// end ;
8861: LD_VAR 0 1
8865: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
8872: PPUSH
// if not multi_support then
8873: LD_EXP 34
8877: NOT
8878: IFFALSE 8882
// exit ;
8880: GO 9169
// result := [ ] ;
8882: LD_ADDR_VAR 0 1
8886: PUSH
8887: EMPTY
8888: ST_TO_ADDR
// for i := 1 to 8 do
8889: LD_ADDR_VAR 0 2
8893: PUSH
8894: DOUBLE
8895: LD_INT 1
8897: DEC
8898: ST_TO_ADDR
8899: LD_INT 8
8901: PUSH
8902: FOR_TO
8903: IFFALSE 9167
// begin result := Replace ( result , i , [ ] ) ;
8905: LD_ADDR_VAR 0 1
8909: PUSH
8910: LD_VAR 0 1
8914: PPUSH
8915: LD_VAR 0 2
8919: PPUSH
8920: EMPTY
8921: PPUSH
8922: CALL_OW 1
8926: ST_TO_ADDR
// if multi_sides [ i ] then
8927: LD_EXP 18
8931: PUSH
8932: LD_VAR 0 2
8936: ARRAY
8937: IFFALSE 9165
// begin tmp := [ ] ;
8939: LD_ADDR_VAR 0 5
8943: PUSH
8944: EMPTY
8945: ST_TO_ADDR
// if multi_support = 1 then
8946: LD_EXP 34
8950: PUSH
8951: LD_INT 1
8953: EQUAL
8954: IFFALSE 9043
// begin uc_side := i ;
8956: LD_ADDR_OWVAR 20
8960: PUSH
8961: LD_VAR 0 2
8965: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8966: LD_ADDR_OWVAR 21
8970: PUSH
8971: LD_EXP 20
8975: PUSH
8976: LD_VAR 0 2
8980: ARRAY
8981: ST_TO_ADDR
// for j := 1 to 2 do
8982: LD_ADDR_VAR 0 3
8986: PUSH
8987: DOUBLE
8988: LD_INT 1
8990: DEC
8991: ST_TO_ADDR
8992: LD_INT 2
8994: PUSH
8995: FOR_TO
8996: IFFALSE 9041
// begin InitHC_All ( ) ;
8998: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
9002: LD_INT 0
9004: PPUSH
9005: LD_INT 1
9007: PPUSH
9008: LD_INT 4
9010: PPUSH
9011: CALL_OW 12
9015: PPUSH
9016: LD_INT 1
9018: PPUSH
9019: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9023: LD_ADDR_VAR 0 5
9027: PUSH
9028: LD_VAR 0 5
9032: PUSH
9033: CALL_OW 44
9037: ADD
9038: ST_TO_ADDR
// end ;
9039: GO 8995
9041: POP
9042: POP
// end ; if multi_support = 2 then
9043: LD_EXP 34
9047: PUSH
9048: LD_INT 2
9050: EQUAL
9051: IFFALSE 9140
// begin uc_side := i ;
9053: LD_ADDR_OWVAR 20
9057: PUSH
9058: LD_VAR 0 2
9062: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9063: LD_ADDR_OWVAR 21
9067: PUSH
9068: LD_EXP 20
9072: PUSH
9073: LD_VAR 0 2
9077: ARRAY
9078: ST_TO_ADDR
// for j := 1 to 4 do
9079: LD_ADDR_VAR 0 3
9083: PUSH
9084: DOUBLE
9085: LD_INT 1
9087: DEC
9088: ST_TO_ADDR
9089: LD_INT 4
9091: PUSH
9092: FOR_TO
9093: IFFALSE 9138
// begin InitHC_All ( ) ;
9095: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
9099: LD_INT 0
9101: PPUSH
9102: LD_INT 1
9104: PPUSH
9105: LD_INT 4
9107: PPUSH
9108: CALL_OW 12
9112: PPUSH
9113: LD_INT 2
9115: PPUSH
9116: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9120: LD_ADDR_VAR 0 5
9124: PUSH
9125: LD_VAR 0 5
9129: PUSH
9130: CALL_OW 44
9134: ADD
9135: ST_TO_ADDR
// end ;
9136: GO 9092
9138: POP
9139: POP
// end ; result := Replace ( result , i , tmp ) ;
9140: LD_ADDR_VAR 0 1
9144: PUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_VAR 0 5
9159: PPUSH
9160: CALL_OW 1
9164: ST_TO_ADDR
// end ; end ;
9165: GO 8902
9167: POP
9168: POP
// end ;
9169: LD_VAR 0 1
9173: RET
// export function Multiplayer_Start ( ) ; begin
9174: LD_INT 0
9176: PPUSH
// Multiplayer_PrepareApemans ( ) ;
9177: CALL 7556 0 0
// Multiplayer_PreparePlayers ( ) ;
9181: CALL 7653 0 0
// Multiplayer_InitPointSystem ( ) ;
9185: CALL 9915 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9189: LD_INT 20
9191: PPUSH
9192: CALL 10091 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9196: LD_INT 150
9198: PPUSH
9199: CALL 10091 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9203: LD_INT 5
9205: PPUSH
9206: CALL 10091 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9210: LD_INT 40
9212: NEG
9213: PPUSH
9214: CALL 10091 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9218: LD_INT 200
9220: PPUSH
9221: CALL 10091 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9225: LD_INT 2
9227: PPUSH
9228: CALL 10091 0 1
// if multi_support then
9232: LD_EXP 34
9236: IFFALSE 9248
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9238: LD_ADDR_EXP 38
9242: PUSH
9243: CALL 8866 0 0
9247: ST_TO_ADDR
// if multi_sides [ your_side ] then
9248: LD_EXP 18
9252: PUSH
9253: LD_OWVAR 2
9257: ARRAY
9258: IFFALSE 9285
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9260: LD_INT 22
9262: PUSH
9263: LD_OWVAR 2
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: CALL_OW 69
9276: PUSH
9277: LD_INT 1
9279: ARRAY
9280: PPUSH
9281: CALL_OW 87
// end ;
9285: LD_VAR 0 1
9289: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
9290: LD_INT 0
9292: PPUSH
9293: PPUSH
9294: PPUSH
// repeat wait ( 0 0$1 ) ;
9295: LD_INT 35
9297: PPUSH
9298: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9302: LD_OWVAR 1
9306: PUSH
9307: LD_EXP 39
9311: GREATER
9312: PUSH
9313: LD_EXP 34
9317: AND
9318: IFFALSE 9483
// begin if tick mod 1 1$00 = 0 then
9320: LD_OWVAR 1
9324: PUSH
9325: LD_INT 2100
9327: MOD
9328: PUSH
9329: LD_INT 0
9331: EQUAL
9332: IFFALSE 9483
// begin for i := 1 to 8 do
9334: LD_ADDR_VAR 0 2
9338: PUSH
9339: DOUBLE
9340: LD_INT 1
9342: DEC
9343: ST_TO_ADDR
9344: LD_INT 8
9346: PUSH
9347: FOR_TO
9348: IFFALSE 9481
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
9350: LD_EXP 18
9354: PUSH
9355: LD_VAR 0 2
9359: ARRAY
9360: PUSH
9361: LD_EXP 36
9365: PUSH
9366: LD_VAR 0 2
9370: ARRAY
9371: NOT
9372: AND
9373: PUSH
9374: LD_EXP 38
9378: PUSH
9379: LD_VAR 0 2
9383: ARRAY
9384: AND
9385: PUSH
9386: LD_INT 80
9388: PUSH
9389: LD_INT 60
9391: PUSH
9392: LD_INT 40
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: LIST
9399: PUSH
9400: LD_OWVAR 67
9404: ARRAY
9405: PPUSH
9406: CALL_OW 13
9410: AND
9411: IFFALSE 9479
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9413: LD_EXP 38
9417: PUSH
9418: LD_VAR 0 2
9422: ARRAY
9423: PUSH
9424: LD_INT 1
9426: ARRAY
9427: PPUSH
9428: LD_INT 11
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9438: LD_ADDR_EXP 38
9442: PUSH
9443: LD_EXP 38
9447: PPUSH
9448: LD_VAR 0 2
9452: PPUSH
9453: LD_EXP 38
9457: PUSH
9458: LD_VAR 0 2
9462: ARRAY
9463: PPUSH
9464: LD_INT 1
9466: PPUSH
9467: CALL_OW 3
9471: PPUSH
9472: CALL_OW 1
9476: ST_TO_ADDR
// break ;
9477: GO 9481
// end ; end ;
9479: GO 9347
9481: POP
9482: POP
// end ; end ; if not multi_custom_commanders then
9483: LD_EXP 27
9487: NOT
9488: IFFALSE 9601
// begin for i := 1 to 8 do
9490: LD_ADDR_VAR 0 2
9494: PUSH
9495: DOUBLE
9496: LD_INT 1
9498: DEC
9499: ST_TO_ADDR
9500: LD_INT 8
9502: PUSH
9503: FOR_TO
9504: IFFALSE 9575
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9506: LD_INT 22
9508: PUSH
9509: LD_VAR 0 2
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PPUSH
9518: CALL_OW 69
9522: PUSH
9523: LD_INT 0
9525: EQUAL
9526: PUSH
9527: LD_EXP 36
9531: PUSH
9532: LD_VAR 0 2
9536: ARRAY
9537: NOT
9538: AND
9539: IFFALSE 9573
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9541: LD_ADDR_EXP 36
9545: PUSH
9546: LD_EXP 36
9550: PPUSH
9551: LD_VAR 0 2
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: CALL_OW 1
9563: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9564: LD_VAR 0 2
9568: PPUSH
9569: CALL 10161 0 1
// end ; end ;
9573: GO 9503
9575: POP
9576: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9577: LD_EXP 36
9581: PPUSH
9582: CALL 17568 0 1
9586: PUSH
9587: LD_EXP 18
9591: PPUSH
9592: CALL 17568 0 1
9596: EQUAL
9597: IFFALSE 9601
// break ;
9599: GO 9621
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9601: CALL 9735 0 0
9605: NOT
9606: PUSH
9607: LD_EXP 2
9611: AND
9612: PUSH
9613: LD_EXP 35
9617: NOT
9618: OR
9619: IFFALSE 9295
// game := false ;
9621: LD_ADDR_EXP 2
9625: PUSH
9626: LD_INT 0
9628: ST_TO_ADDR
// for i := 1 to 8 do
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: DOUBLE
9635: LD_INT 1
9637: DEC
9638: ST_TO_ADDR
9639: LD_INT 8
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9679
// begin if multi_sides [ i ] then
9645: LD_EXP 18
9649: PUSH
9650: LD_VAR 0 2
9654: ARRAY
9655: IFFALSE 9677
// SetMultiScore ( i , multi_points [ i ] ) ;
9657: LD_VAR 0 2
9661: PPUSH
9662: LD_EXP 41
9666: PUSH
9667: LD_VAR 0 2
9671: ARRAY
9672: PPUSH
9673: CALL_OW 506
// end ;
9677: GO 9642
9679: POP
9680: POP
// if multi_loosers [ your_side ] then
9681: LD_EXP 36
9685: PUSH
9686: LD_OWVAR 2
9690: ARRAY
9691: IFFALSE 9714
// begin if Multiplayer then
9693: LD_OWVAR 4
9697: IFFALSE 9705
// YouLostInMultiplayer else
9699: CALL_OW 107
9703: GO 9712
// YouLost (  ) ;
9705: LD_STRING 
9707: PPUSH
9708: CALL_OW 104
// end else
9712: GO 9730
// begin if Multiplayer then
9714: LD_OWVAR 4
9718: IFFALSE 9726
// YouWinInMultiplayer else
9720: CALL_OW 106
9724: GO 9730
// YouWin ;
9726: CALL_OW 103
// end ; end ;
9730: LD_VAR 0 1
9734: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9735: LD_INT 0
9737: PPUSH
9738: PPUSH
// result := false ;
9739: LD_ADDR_VAR 0 1
9743: PUSH
9744: LD_INT 0
9746: ST_TO_ADDR
// for side in botSides do
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: LD_EXP 3
9756: PUSH
9757: FOR_IN
9758: IFFALSE 9819
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9760: LD_ADDR_VAR 0 1
9764: PUSH
9765: LD_INT 22
9767: PUSH
9768: LD_VAR 0 2
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 21
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 50
9789: PUSH
9790: EMPTY
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: PUSH
9803: LD_INT 0
9805: GREATER
9806: ST_TO_ADDR
// if result then
9807: LD_VAR 0 1
9811: IFFALSE 9817
// exit ;
9813: POP
9814: POP
9815: GO 9821
// end ;
9817: GO 9757
9819: POP
9820: POP
// end ;
9821: LD_VAR 0 1
9825: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9826: LD_INT 0
9828: PPUSH
9829: PPUSH
// result := [ ] ;
9830: LD_ADDR_VAR 0 1
9834: PUSH
9835: EMPTY
9836: ST_TO_ADDR
// for i := 1 to 8 do
9837: LD_ADDR_VAR 0 2
9841: PUSH
9842: DOUBLE
9843: LD_INT 1
9845: DEC
9846: ST_TO_ADDR
9847: LD_INT 8
9849: PUSH
9850: FOR_TO
9851: IFFALSE 9908
// begin if multi_sides [ i ] then
9853: LD_EXP 18
9857: PUSH
9858: LD_VAR 0 2
9862: ARRAY
9863: IFFALSE 9906
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: LD_VAR 0 1
9874: PUSH
9875: LD_STRING #coop-points
9877: PUSH
9878: LD_VAR 0 2
9882: PUSH
9883: LD_VAR 0 2
9887: PUSH
9888: LD_EXP 41
9892: PUSH
9893: LD_VAR 0 2
9897: ARRAY
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: ADD
9905: ST_TO_ADDR
// end ; end ;
9906: GO 9850
9908: POP
9909: POP
// end ;
9910: LD_VAR 0 1
9914: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
9915: LD_INT 0
9917: PPUSH
9918: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9919: LD_ADDR_EXP 41
9923: PUSH
9924: LD_INT 0
9926: PUSH
9927: LD_INT 0
9929: PUSH
9930: LD_INT 0
9932: PUSH
9933: LD_INT 0
9935: PUSH
9936: LD_INT 0
9938: PUSH
9939: LD_INT 0
9941: PUSH
9942: LD_INT 0
9944: PUSH
9945: LD_INT 0
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: ST_TO_ADDR
// multi_points_conditions := [ ] ;
9958: LD_ADDR_EXP 42
9962: PUSH
9963: EMPTY
9964: ST_TO_ADDR
// end ;
9965: LD_VAR 0 1
9969: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
9970: LD_INT 0
9972: PPUSH
// if not multi_points or not side or side > 8 then
9973: LD_EXP 41
9977: NOT
9978: PUSH
9979: LD_VAR 0 1
9983: NOT
9984: OR
9985: PUSH
9986: LD_VAR 0 1
9990: PUSH
9991: LD_INT 8
9993: GREATER
9994: OR
9995: IFFALSE 9999
// exit ;
9997: GO 10036
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
9999: LD_ADDR_EXP 41
10003: PUSH
10004: LD_EXP 41
10008: PPUSH
10009: LD_VAR 0 1
10013: PPUSH
10014: LD_EXP 41
10018: PUSH
10019: LD_VAR 0 1
10023: ARRAY
10024: PUSH
10025: LD_VAR 0 2
10029: PLUS
10030: PPUSH
10031: CALL_OW 1
10035: ST_TO_ADDR
// end ;
10036: LD_VAR 0 3
10040: RET
// export function Multiplayer_GetPoints ( side ) ; begin
10041: LD_INT 0
10043: PPUSH
// if not multi_points or not side or side > 8 then
10044: LD_EXP 41
10048: NOT
10049: PUSH
10050: LD_VAR 0 1
10054: NOT
10055: OR
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: LD_INT 8
10064: GREATER
10065: OR
10066: IFFALSE 10070
// exit ;
10068: GO 10086
// result := multi_points [ side ] ;
10070: LD_ADDR_VAR 0 2
10074: PUSH
10075: LD_EXP 41
10079: PUSH
10080: LD_VAR 0 1
10084: ARRAY
10085: ST_TO_ADDR
// end ;
10086: LD_VAR 0 2
10090: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
10091: LD_INT 0
10093: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
10094: LD_ADDR_EXP 42
10098: PUSH
10099: LD_EXP 42
10103: PPUSH
10104: LD_EXP 42
10108: PUSH
10109: LD_INT 1
10111: PLUS
10112: PPUSH
10113: LD_VAR 0 1
10117: PPUSH
10118: CALL_OW 1
10122: ST_TO_ADDR
// end ;
10123: LD_VAR 0 2
10127: RET
// export function Multiplayer_GetCondition ( id ) ; begin
10128: LD_INT 0
10130: PPUSH
// if not id then
10131: LD_VAR 0 1
10135: NOT
10136: IFFALSE 10140
// exit ;
10138: GO 10156
// result := multi_points_conditions [ id ] ;
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: LD_EXP 42
10149: PUSH
10150: LD_VAR 0 1
10154: ARRAY
10155: ST_TO_ADDR
// end ;
10156: LD_VAR 0 2
10160: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
10161: LD_INT 0
10163: PPUSH
10164: PPUSH
10165: PPUSH
10166: PPUSH
10167: PPUSH
// players := [ ] ;
10168: LD_ADDR_VAR 0 3
10172: PUSH
10173: EMPTY
10174: ST_TO_ADDR
// for i = 1 to 8 do
10175: LD_ADDR_VAR 0 4
10179: PUSH
10180: DOUBLE
10181: LD_INT 1
10183: DEC
10184: ST_TO_ADDR
10185: LD_INT 8
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10248
// begin if i = side then
10191: LD_VAR 0 4
10195: PUSH
10196: LD_VAR 0 1
10200: EQUAL
10201: IFFALSE 10205
// continue ;
10203: GO 10188
// if multi_sides [ i ] and not multi_loosers [ i ] then
10205: LD_EXP 18
10209: PUSH
10210: LD_VAR 0 4
10214: ARRAY
10215: PUSH
10216: LD_EXP 36
10220: PUSH
10221: LD_VAR 0 4
10225: ARRAY
10226: NOT
10227: AND
10228: IFFALSE 10246
// players := players ^ i ;
10230: LD_ADDR_VAR 0 3
10234: PUSH
10235: LD_VAR 0 3
10239: PUSH
10240: LD_VAR 0 4
10244: ADD
10245: ST_TO_ADDR
// end ;
10246: GO 10188
10248: POP
10249: POP
// if not players then
10250: LD_VAR 0 3
10254: NOT
10255: IFFALSE 10259
// exit ;
10257: GO 10526
// if players = 1 then
10259: LD_VAR 0 3
10263: PUSH
10264: LD_INT 1
10266: EQUAL
10267: IFFALSE 10328
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10269: LD_ADDR_VAR 0 4
10273: PUSH
10274: LD_INT 22
10276: PUSH
10277: LD_VAR 0 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 51
10288: PUSH
10289: EMPTY
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PPUSH
10296: CALL_OW 69
10300: PUSH
10301: FOR_IN
10302: IFFALSE 10324
// SetSide ( i , players [ 1 ] ) ;
10304: LD_VAR 0 4
10308: PPUSH
10309: LD_VAR 0 3
10313: PUSH
10314: LD_INT 1
10316: ARRAY
10317: PPUSH
10318: CALL_OW 235
10322: GO 10301
10324: POP
10325: POP
// end else
10326: GO 10526
// begin j := 1 ;
10328: LD_ADDR_VAR 0 5
10332: PUSH
10333: LD_INT 1
10335: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10336: LD_ADDR_VAR 0 4
10340: PUSH
10341: LD_INT 22
10343: PUSH
10344: LD_VAR 0 1
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 21
10358: PUSH
10359: LD_INT 1
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 51
10368: PUSH
10369: EMPTY
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 21
10378: PUSH
10379: LD_INT 2
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 69
10399: PUSH
10400: FOR_IN
10401: IFFALSE 10524
// begin SetSide ( i , players [ j ] ) ;
10403: LD_VAR 0 4
10407: PPUSH
10408: LD_VAR 0 3
10412: PUSH
10413: LD_VAR 0 5
10417: ARRAY
10418: PPUSH
10419: CALL_OW 235
// if IsDrivenBy ( i ) then
10423: LD_VAR 0 4
10427: PPUSH
10428: CALL_OW 311
10432: IFFALSE 10459
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10434: LD_VAR 0 4
10438: PPUSH
10439: CALL_OW 311
10443: PPUSH
10444: LD_VAR 0 3
10448: PUSH
10449: LD_VAR 0 5
10453: ARRAY
10454: PPUSH
10455: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10459: LD_VAR 0 4
10463: PPUSH
10464: CALL_OW 310
10468: PPUSH
10469: CALL_OW 247
10473: PUSH
10474: LD_INT 3
10476: EQUAL
10477: IFFALSE 10488
// ComExitBuilding ( i ) ;
10479: LD_VAR 0 4
10483: PPUSH
10484: CALL_OW 122
// j := j + 1 ;
10488: LD_ADDR_VAR 0 5
10492: PUSH
10493: LD_VAR 0 5
10497: PUSH
10498: LD_INT 1
10500: PLUS
10501: ST_TO_ADDR
// if j > players then
10502: LD_VAR 0 5
10506: PUSH
10507: LD_VAR 0 3
10511: GREATER
10512: IFFALSE 10522
// j := 1 ;
10514: LD_ADDR_VAR 0 5
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// end ;
10522: GO 10400
10524: POP
10525: POP
// end ; end ;
10526: LD_VAR 0 2
10530: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10531: LD_INT 0
10533: PPUSH
10534: PPUSH
10535: PPUSH
// i := 3 ;
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: LD_INT 3
10543: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10544: LD_ADDR_VAR 0 3
10548: PUSH
10549: LD_INT 5
10551: PUSH
10552: LD_INT 10
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 120
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 101
10571: PUSH
10572: LD_INT 8
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 27
10581: PUSH
10582: LD_INT 4
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10595: LD_INT 4
10597: PPUSH
10598: LD_INT 5
10600: PPUSH
10601: LD_VAR 0 3
10605: PUSH
10606: LD_VAR 0 2
10610: ARRAY
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: PPUSH
10616: LD_VAR 0 3
10620: PUSH
10621: LD_VAR 0 2
10625: ARRAY
10626: PUSH
10627: LD_INT 2
10629: ARRAY
10630: PPUSH
10631: LD_INT 0
10633: PPUSH
10634: CALL_OW 58
// end ;
10638: LD_VAR 0 1
10642: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10643: LD_INT 0
10645: PPUSH
// if not side or side > 8 then
10646: LD_VAR 0 1
10650: NOT
10651: PUSH
10652: LD_VAR 0 1
10656: PUSH
10657: LD_INT 8
10659: GREATER
10660: OR
10661: IFFALSE 10665
// exit ;
10663: GO 10682
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10665: LD_VAR 0 1
10669: PPUSH
10670: LD_INT 6
10672: PPUSH
10673: CALL 10128 0 1
10677: PPUSH
10678: CALL 9970 0 2
// end ;
10682: LD_VAR 0 2
10686: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10687: LD_INT 0
10689: PPUSH
// if not side or side > 8 then
10690: LD_VAR 0 1
10694: NOT
10695: PUSH
10696: LD_VAR 0 1
10700: PUSH
10701: LD_INT 8
10703: GREATER
10704: OR
10705: IFFALSE 10709
// exit ;
10707: GO 10726
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_INT 4
10716: PPUSH
10717: CALL 10128 0 1
10721: PPUSH
10722: CALL 9970 0 2
// end ;
10726: LD_VAR 0 2
10730: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10731: LD_INT 0
10733: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10734: LD_VAR 0 1
10738: NOT
10739: PUSH
10740: LD_VAR 0 1
10744: PUSH
10745: LD_INT 8
10747: GREATER
10748: OR
10749: PUSH
10750: LD_VAR 0 2
10754: PUSH
10755: LD_INT 2
10757: PUSH
10758: LD_INT 6
10760: PUSH
10761: LD_INT 36
10763: PUSH
10764: LD_INT 0
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: IN
10773: NOT
10774: OR
10775: IFFALSE 10779
// exit ;
10777: GO 10796
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10779: LD_VAR 0 1
10783: PPUSH
10784: LD_INT 3
10786: PPUSH
10787: CALL 10128 0 1
10791: PPUSH
10792: CALL 9970 0 2
// end ;
10796: LD_VAR 0 3
10800: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10801: LD_INT 0
10803: PPUSH
10804: PPUSH
// if not un then
10805: LD_VAR 0 1
10809: NOT
10810: IFFALSE 10814
// exit ;
10812: GO 10860
// if not points then
10814: LD_VAR 0 3
10818: NOT
10819: IFFALSE 10836
// gained_points := Multiplayer_GetCondition ( 1 ) else
10821: LD_ADDR_VAR 0 5
10825: PUSH
10826: LD_INT 1
10828: PPUSH
10829: CALL 10128 0 1
10833: ST_TO_ADDR
10834: GO 10846
// gained_points := points ;
10836: LD_ADDR_VAR 0 5
10840: PUSH
10841: LD_VAR 0 3
10845: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10846: LD_VAR 0 2
10850: PPUSH
10851: LD_VAR 0 5
10855: PPUSH
10856: CALL 9970 0 2
10860: LD_VAR 0 4
10864: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10865: LD_INT 0
10867: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10868: LD_VAR 0 1
10872: PPUSH
10873: LD_INT 2
10875: PPUSH
10876: CALL 10128 0 1
10880: PPUSH
10881: CALL 9970 0 2
// end ; end_of_file
10885: LD_VAR 0 2
10889: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: LD_EXP 3
10904: IN
10905: NOT
10906: IFFALSE 10910
// exit ;
10908: GO 10927
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10910: LD_VAR 0 1
10914: PPUSH
10915: LD_VAR 0 2
10919: PPUSH
10920: LD_INT 0
10922: PPUSH
10923: CALL 10801 0 3
// end ;
10927: PPOPN 3
10929: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
10935: PPUSH
10936: PPUSH
10937: PPUSH
10938: PPUSH
10939: PPUSH
10940: PPUSH
10941: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
10942: LD_VAR 0 1
10946: PPUSH
10947: CALL 58261 0 1
// side := GetSide ( un ) ;
10951: LD_ADDR_VAR 0 3
10955: PUSH
10956: LD_VAR 0 1
10960: PPUSH
10961: CALL_OW 255
10965: ST_TO_ADDR
// if multi_sides [ side ] then
10966: LD_EXP 18
10970: PUSH
10971: LD_VAR 0 3
10975: ARRAY
10976: IFFALSE 11002
// if GetType ( un ) = unit_human then
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 247
10987: PUSH
10988: LD_INT 1
10990: EQUAL
10991: IFFALSE 11002
// MultiplayerEvent_HumanLost ( side ) ;
10993: LD_VAR 0 3
10997: PPUSH
10998: CALL 10687 0 1
// if side in botSides then
11002: LD_VAR 0 3
11006: PUSH
11007: LD_EXP 3
11011: IN
11012: IFFALSE 11517
// begin if side = botSides [ 1 ] then
11014: LD_VAR 0 3
11018: PUSH
11019: LD_EXP 3
11023: PUSH
11024: LD_INT 1
11026: ARRAY
11027: EQUAL
11028: IFFALSE 11517
// begin if un in arForce then
11030: LD_VAR 0 1
11034: PUSH
11035: LD_EXP 14
11039: IN
11040: IFFALSE 11058
// arForce := arForce diff un ;
11042: LD_ADDR_EXP 14
11046: PUSH
11047: LD_EXP 14
11051: PUSH
11052: LD_VAR 0 1
11056: DIFF
11057: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
11058: LD_VAR 0 1
11062: PUSH
11063: LD_EXP 8
11067: IN
11068: PUSH
11069: LD_VAR 0 1
11073: PUSH
11074: LD_EXP 9
11078: IN
11079: OR
11080: IFFALSE 11174
// begin arVehicles := arVehicles diff un ;
11082: LD_ADDR_EXP 8
11086: PUSH
11087: LD_EXP 8
11091: PUSH
11092: LD_VAR 0 1
11096: DIFF
11097: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
11098: LD_ADDR_EXP 9
11102: PUSH
11103: LD_EXP 9
11107: PUSH
11108: LD_VAR 0 1
11112: DIFF
11113: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
11114: LD_ADDR_EXP 6
11118: PUSH
11119: LD_EXP 6
11123: PUSH
11124: LD_VAR 0 1
11128: PPUSH
11129: CALL_OW 265
11133: PUSH
11134: LD_VAR 0 1
11138: PPUSH
11139: CALL_OW 262
11143: PUSH
11144: LD_VAR 0 1
11148: PPUSH
11149: CALL_OW 263
11153: PUSH
11154: LD_VAR 0 1
11158: PPUSH
11159: CALL_OW 264
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: ADD
11173: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
11174: LD_VAR 0 1
11178: PPUSH
11179: CALL_OW 257
11183: PUSH
11184: LD_INT 3
11186: EQUAL
11187: PUSH
11188: LD_VAR 0 1
11192: PPUSH
11193: CALL_OW 110
11197: PUSH
11198: LD_INT 999
11200: LESS
11201: AND
11202: PUSH
11203: LD_EXP 11
11207: AND
11208: IFFALSE 11349
// begin if not IsOk ( arDep ) then
11210: LD_INT 2
11212: PPUSH
11213: CALL_OW 302
11217: NOT
11218: IFFALSE 11222
// exit ;
11220: GO 11589
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11222: LD_ADDR_EXP 11
11226: PUSH
11227: LD_EXP 11
11231: PPUSH
11232: CALL 54560 0 1
11236: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11237: LD_ADDR_OWVAR 20
11241: PUSH
11242: LD_EXP 3
11246: PUSH
11247: LD_INT 1
11249: ARRAY
11250: ST_TO_ADDR
// uc_nation := nation_arabian ;
11251: LD_ADDR_OWVAR 21
11255: PUSH
11256: LD_INT 2
11258: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
11259: LD_INT 0
11261: PPUSH
11262: LD_INT 3
11264: PUSH
11265: LD_INT 6
11267: PUSH
11268: LD_INT 9
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: LD_OWVAR 67
11280: ARRAY
11281: PPUSH
11282: CALL_OW 383
// un := CreateHuman ;
11286: LD_ADDR_VAR 0 1
11290: PUSH
11291: CALL_OW 44
11295: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11296: LD_VAR 0 1
11300: PPUSH
11301: LD_INT 143
11303: PPUSH
11304: LD_INT 29
11306: PPUSH
11307: LD_INT 0
11309: PPUSH
11310: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11314: LD_VAR 0 1
11318: PPUSH
11319: LD_INT 115
11321: PPUSH
11322: LD_INT 52
11324: PPUSH
11325: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11329: LD_ADDR_EXP 14
11333: PUSH
11334: LD_EXP 14
11338: PPUSH
11339: LD_VAR 0 1
11343: PPUSH
11344: CALL 53177 0 2
11348: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11349: LD_VAR 0 1
11353: PPUSH
11354: CALL_OW 247
11358: PUSH
11359: LD_INT 3
11361: EQUAL
11362: IFFALSE 11517
// begin btype := GetBType ( un ) ;
11364: LD_ADDR_VAR 0 11
11368: PUSH
11369: LD_VAR 0 1
11373: PPUSH
11374: CALL_OW 266
11378: ST_TO_ADDR
// if btype = b_breastwork then
11379: LD_VAR 0 11
11383: PUSH
11384: LD_INT 31
11386: EQUAL
11387: IFFALSE 11391
// exit ;
11389: GO 11589
// if btype = b_barracks then
11391: LD_VAR 0 11
11395: PUSH
11396: LD_INT 5
11398: EQUAL
11399: IFFALSE 11409
// btype := b_armoury ;
11401: LD_ADDR_VAR 0 11
11405: PUSH
11406: LD_INT 4
11408: ST_TO_ADDR
// if btype = b_factory then
11409: LD_VAR 0 11
11413: PUSH
11414: LD_INT 3
11416: EQUAL
11417: IFFALSE 11427
// btype := b_workshop ;
11419: LD_ADDR_VAR 0 11
11423: PUSH
11424: LD_INT 2
11426: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11427: LD_VAR 0 11
11431: PUSH
11432: LD_INT 8
11434: PUSH
11435: LD_INT 7
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: IN
11442: IFFALSE 11452
// btype := b_lab ;
11444: LD_ADDR_VAR 0 11
11448: PUSH
11449: LD_INT 6
11451: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11452: LD_ADDR_EXP 7
11456: PUSH
11457: LD_EXP 7
11461: PPUSH
11462: LD_EXP 7
11466: PUSH
11467: LD_INT 1
11469: PLUS
11470: PPUSH
11471: LD_VAR 0 11
11475: PUSH
11476: LD_VAR 0 1
11480: PPUSH
11481: CALL_OW 250
11485: PUSH
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 251
11495: PUSH
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL_OW 254
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PPUSH
11512: CALL_OW 1
11516: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
11517: LD_EXP 35
11521: PUSH
11522: LD_EXP 27
11526: AND
11527: IFFALSE 11589
// if un in multi_commanders then
11529: LD_VAR 0 1
11533: PUSH
11534: LD_EXP 35
11538: IN
11539: IFFALSE 11589
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11541: LD_ADDR_EXP 36
11545: PUSH
11546: LD_EXP 36
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 1
11563: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11564: LD_ADDR_EXP 35
11568: PUSH
11569: LD_EXP 35
11573: PUSH
11574: LD_VAR 0 1
11578: DIFF
11579: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11580: LD_VAR 0 3
11584: PPUSH
11585: CALL 10161 0 1
// end ; end ;
11589: PPOPN 11
11591: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11592: LD_INT 0
11594: PPUSH
11595: PPUSH
11596: PPUSH
11597: PPUSH
// begin side := GetSide ( building ) ;
11598: LD_ADDR_VAR 0 4
11602: PUSH
11603: LD_VAR 0 1
11607: PPUSH
11608: CALL_OW 255
11612: ST_TO_ADDR
// if multi_sides [ side ] then
11613: LD_EXP 18
11617: PUSH
11618: LD_VAR 0 4
11622: ARRAY
11623: IFFALSE 11644
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11625: LD_VAR 0 4
11629: PPUSH
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 266
11639: PPUSH
11640: CALL 10731 0 2
// if side = botSides [ 1 ] then
11644: LD_VAR 0 4
11648: PUSH
11649: LD_EXP 3
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: EQUAL
11658: IFFALSE 11754
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11660: LD_ADDR_EXP 7
11664: PUSH
11665: LD_EXP 7
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 3
11677: ST_TO_ADDR
// btype := GetBType ( building ) ;
11678: LD_ADDR_VAR 0 5
11682: PUSH
11683: LD_VAR 0 1
11687: PPUSH
11688: CALL_OW 266
11692: ST_TO_ADDR
// case btype of b_workshop :
11693: LD_VAR 0 5
11697: PUSH
11698: LD_INT 2
11700: DOUBLE
11701: EQUAL
11702: IFTRUE 11706
11704: GO 11718
11706: POP
// ComUpgrade ( building ) ; b_lab :
11707: LD_VAR 0 1
11711: PPUSH
11712: CALL_OW 146
11716: GO 11754
11718: LD_INT 6
11720: DOUBLE
11721: EQUAL
11722: IFTRUE 11726
11724: GO 11753
11726: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: LD_INT 10
11734: PPUSH
11735: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11739: LD_VAR 0 1
11743: PPUSH
11744: LD_INT 15
11746: PPUSH
11747: CALL_OW 207
// end ; end ;
11751: GO 11754
11753: POP
// end ; end ;
11754: PPOPN 5
11756: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11757: LD_VAR 0 1
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_EXP 3
11769: PUSH
11770: LD_INT 1
11772: ARRAY
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 33
11780: PUSH
11781: LD_INT 2
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PPUSH
11792: CALL_OW 69
11796: IN
11797: IFFALSE 11808
// ComUnlink ( un ) ;
11799: LD_VAR 0 1
11803: PPUSH
11804: CALL_OW 136
// end ;
11808: PPOPN 1
11810: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11811: LD_VAR 0 2
11815: PPUSH
11816: CALL_OW 255
11820: PUSH
11821: LD_EXP 3
11825: IN
11826: NOT
11827: IFFALSE 11831
// exit ;
11829: GO 11894
// if unit in arForceTmp then
11831: LD_VAR 0 2
11835: PUSH
11836: LD_EXP 15
11840: IN
11841: IFFALSE 11894
// begin arForceTmp := arForceTmp diff unit ;
11843: LD_ADDR_EXP 15
11847: PUSH
11848: LD_EXP 15
11852: PUSH
11853: LD_VAR 0 2
11857: DIFF
11858: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11859: LD_ADDR_EXP 14
11863: PUSH
11864: LD_EXP 14
11868: PPUSH
11869: LD_VAR 0 2
11873: PPUSH
11874: CALL 53177 0 2
11878: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11879: LD_VAR 0 2
11883: PPUSH
11884: LD_INT 103
11886: PPUSH
11887: LD_INT 54
11889: PPUSH
11890: CALL_OW 111
// end ; end ;
11894: PPOPN 2
11896: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
11897: LD_INT 0
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
11905: LD_VAR 0 1
11909: PPUSH
11910: LD_VAR 0 2
11914: PPUSH
11915: CALL 58319 0 2
// side := GetSide ( vehicle ) ;
11919: LD_ADDR_VAR 0 4
11923: PUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 255
11933: ST_TO_ADDR
// if multi_sides [ side ] then
11934: LD_EXP 18
11938: PUSH
11939: LD_VAR 0 4
11943: ARRAY
11944: IFFALSE 11955
// MultiplayerEvent_Produced ( side ) ;
11946: LD_VAR 0 4
11950: PPUSH
11951: CALL 10643 0 1
// if side = botSides [ 1 ] then
11955: LD_VAR 0 4
11959: PUSH
11960: LD_EXP 3
11964: PUSH
11965: LD_INT 1
11967: ARRAY
11968: EQUAL
11969: IFFALSE 12165
// begin driver := IsDrivenBy ( vehicle ) ;
11971: LD_ADDR_VAR 0 8
11975: PUSH
11976: LD_VAR 0 1
11980: PPUSH
11981: CALL_OW 311
11985: ST_TO_ADDR
// if driver then
11986: LD_VAR 0 8
11990: IFFALSE 12024
// begin SetTag ( driver , tMech ) ;
11992: LD_VAR 0 8
11996: PPUSH
11997: LD_INT 7
11999: PPUSH
12000: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
12004: LD_ADDR_EXP 10
12008: PUSH
12009: LD_EXP 10
12013: PPUSH
12014: LD_VAR 0 8
12018: PPUSH
12019: CALL 53177 0 2
12023: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12024: LD_VAR 0 1
12028: PPUSH
12029: CALL_OW 263
12033: PUSH
12034: LD_INT 2
12036: EQUAL
12037: PUSH
12038: LD_VAR 0 1
12042: PPUSH
12043: CALL_OW 264
12047: PUSH
12048: LD_INT 32
12050: PUSH
12051: LD_INT 88
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: IN
12058: NOT
12059: AND
12060: IFFALSE 12084
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
12062: LD_ADDR_EXP 16
12066: PUSH
12067: LD_EXP 16
12071: PPUSH
12072: LD_VAR 0 1
12076: PPUSH
12077: CALL 53177 0 2
12081: ST_TO_ADDR
// exit ;
12082: GO 12165
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12084: LD_EXP 12
12088: PUSH
12089: LD_EXP 8
12093: PPUSH
12094: CALL 17568 0 1
12098: GREATER
12099: PUSH
12100: LD_VAR 0 1
12104: PPUSH
12105: CALL_OW 264
12109: PUSH
12110: LD_INT 32
12112: PUSH
12113: LD_INT 88
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: IN
12120: OR
12121: IFFALSE 12145
// arVehicles := Join ( arVehicles , vehicle ) else
12123: LD_ADDR_EXP 8
12127: PUSH
12128: LD_EXP 8
12132: PPUSH
12133: LD_VAR 0 1
12137: PPUSH
12138: CALL 53177 0 2
12142: ST_TO_ADDR
12143: GO 12165
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
12145: LD_ADDR_EXP 9
12149: PUSH
12150: LD_EXP 9
12154: PPUSH
12155: LD_VAR 0 1
12159: PPUSH
12160: CALL 53177 0 2
12164: ST_TO_ADDR
// end ; end ;
12165: PPOPN 8
12167: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
12168: LD_VAR 0 1
12172: PPUSH
12173: CALL_OW 110
12177: PUSH
12178: LD_INT 7
12180: EQUAL
12181: IFFALSE 12195
// SetTag ( driver , 0 ) ;
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_INT 0
12190: PPUSH
12191: CALL_OW 109
// end ;
12195: PPOPN 4
12197: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12198: LD_VAR 0 2
12202: PPUSH
12203: CALL_OW 255
12207: PUSH
12208: LD_EXP 3
12212: PUSH
12213: LD_INT 1
12215: ARRAY
12216: EQUAL
12217: IFFALSE 12247
// if tech in arTech then
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 5
12228: IN
12229: IFFALSE 12247
// arTech := arTech diff tech ;
12231: LD_ADDR_EXP 5
12235: PUSH
12236: LD_EXP 5
12240: PUSH
12241: LD_VAR 0 1
12245: DIFF
12246: ST_TO_ADDR
// end ;
12247: PPOPN 2
12249: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: CALL 58278 0 1
// end ; end_of_file
12259: PPOPN 1
12261: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12262: LD_INT 2
12264: PPUSH
12265: CALL_OW 302
12269: PUSH
12270: LD_INT 2
12272: PPUSH
12273: CALL_OW 255
12277: PUSH
12278: LD_EXP 3
12282: PUSH
12283: LD_INT 1
12285: ARRAY
12286: EQUAL
12287: AND
12288: IFFALSE 12325
12290: GO 12292
12292: DISABLE
// begin wait ( 5 5$00 - ( 2 2$00 * Difficulty ) ) ;
12293: LD_INT 10500
12295: PUSH
12296: LD_INT 4200
12298: PUSH
12299: LD_OWVAR 67
12303: MUL
12304: MINUS
12305: PPUSH
12306: CALL_OW 67
// activeArabAttacks := true ;
12310: LD_ADDR_EXP 4
12314: PUSH
12315: LD_INT 1
12317: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12318: LD_INT 0
12320: PPUSH
12321: CALL 12544 0 1
// end ;
12325: END
// every 35 35$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12326: LD_INT 2
12328: PPUSH
12329: CALL_OW 302
12333: PUSH
12334: LD_INT 2
12336: PPUSH
12337: CALL_OW 255
12341: PUSH
12342: LD_EXP 3
12346: PUSH
12347: LD_INT 1
12349: ARRAY
12350: EQUAL
12351: AND
12352: IFFALSE 12366
12354: GO 12356
12356: DISABLE
// ArabAttack ( Difficulty ) ;
12357: LD_OWVAR 67
12361: PPUSH
12362: CALL 12544 0 1
12366: END
// every 55 55$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12367: LD_INT 2
12369: PPUSH
12370: CALL_OW 302
12374: PUSH
12375: LD_INT 2
12377: PPUSH
12378: CALL_OW 255
12382: PUSH
12383: LD_EXP 3
12387: PUSH
12388: LD_INT 1
12390: ARRAY
12391: EQUAL
12392: AND
12393: IFFALSE 12411
12395: GO 12397
12397: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12398: LD_OWVAR 67
12402: PUSH
12403: LD_INT 1
12405: PLUS
12406: PPUSH
12407: CALL 12544 0 1
12411: END
// every 85 85$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12412: LD_INT 2
12414: PPUSH
12415: CALL_OW 302
12419: PUSH
12420: LD_INT 2
12422: PPUSH
12423: CALL_OW 255
12427: PUSH
12428: LD_EXP 3
12432: PUSH
12433: LD_INT 1
12435: ARRAY
12436: EQUAL
12437: AND
12438: IFFALSE 12456
12440: GO 12442
12442: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12443: LD_OWVAR 67
12447: PUSH
12448: LD_INT 2
12450: PLUS
12451: PPUSH
12452: CALL 12544 0 1
12456: END
// every 115 115$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12457: LD_INT 2
12459: PPUSH
12460: CALL_OW 302
12464: PUSH
12465: LD_INT 2
12467: PPUSH
12468: CALL_OW 255
12472: PUSH
12473: LD_EXP 3
12477: PUSH
12478: LD_INT 1
12480: ARRAY
12481: EQUAL
12482: AND
12483: IFFALSE 12501
12485: GO 12487
12487: DISABLE
// ArabAttack ( Difficulty + 3 ) ;
12488: LD_OWVAR 67
12492: PUSH
12493: LD_INT 3
12495: PLUS
12496: PPUSH
12497: CALL 12544 0 1
12501: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12502: LD_INT 2
12504: PPUSH
12505: LD_INT 81
12507: PUSH
12508: LD_EXP 3
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 70
12525: IFFALSE 12543
12527: GO 12529
12529: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12530: LD_OWVAR 67
12534: PUSH
12535: LD_INT 2
12537: PLUS
12538: PPUSH
12539: CALL 12544 0 1
12543: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12544: LD_INT 0
12546: PPUSH
12547: PPUSH
12548: PPUSH
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
// uc_side := botSides [ 1 ] ;
12553: LD_ADDR_OWVAR 20
12557: PUSH
12558: LD_EXP 3
12562: PUSH
12563: LD_INT 1
12565: ARRAY
12566: ST_TO_ADDR
// uc_nation := nation_arabian ;
12567: LD_ADDR_OWVAR 21
12571: PUSH
12572: LD_INT 2
12574: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12575: LD_ADDR_VAR 0 4
12579: PUSH
12580: LD_INT 3
12582: PUSH
12583: LD_INT 5
12585: PUSH
12586: LD_INT 7
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: PUSH
12594: LD_OWVAR 67
12598: ARRAY
12599: ST_TO_ADDR
// arAttackersInf := [ ] ;
12600: LD_ADDR_EXP 43
12604: PUSH
12605: EMPTY
12606: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12607: LD_ADDR_EXP 44
12611: PUSH
12612: EMPTY
12613: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12614: LD_ADDR_VAR 0 7
12618: PUSH
12619: LD_INT 48
12621: PUSH
12622: LD_INT 52
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 135
12631: PUSH
12632: LD_INT 48
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_VAR 0 1
12647: PUSH
12648: LD_INT 2
12650: MOD
12651: PUSH
12652: LD_INT 1
12654: PLUS
12655: ARRAY
12656: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12657: LD_ADDR_VAR 0 8
12661: PUSH
12662: LD_INT 12
12664: PUSH
12665: LD_INT 13
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 23
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: LD_VAR 0 1
12690: PUSH
12691: LD_INT 2
12693: MOD
12694: PUSH
12695: LD_INT 1
12697: PLUS
12698: ARRAY
12699: ST_TO_ADDR
// InitHC_All ( ) ;
12700: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12704: LD_ADDR_VAR 0 3
12708: PUSH
12709: DOUBLE
12710: LD_INT 1
12712: DEC
12713: ST_TO_ADDR
12714: LD_INT 3
12716: PUSH
12717: LD_INT 4
12719: PUSH
12720: LD_INT 6
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_OWVAR 67
12732: ARRAY
12733: PUSH
12734: LD_VAR 0 1
12738: PLUS
12739: PUSH
12740: FOR_TO
12741: IFFALSE 12873
// begin PrepareSoldier ( false , skill ) ;
12743: LD_INT 0
12745: PPUSH
12746: LD_VAR 0 4
12750: PPUSH
12751: CALL_OW 381
// un := CreateHuman ;
12755: LD_ADDR_VAR 0 5
12759: PUSH
12760: CALL_OW 44
12764: ST_TO_ADDR
// if i mod 2 = 0 then
12765: LD_VAR 0 3
12769: PUSH
12770: LD_INT 2
12772: MOD
12773: PUSH
12774: LD_INT 0
12776: EQUAL
12777: IFFALSE 12791
// SetClass ( un , class_mortar ) ;
12779: LD_VAR 0 5
12783: PPUSH
12784: LD_INT 8
12786: PPUSH
12787: CALL_OW 336
// SetDir ( un , 1 ) ;
12791: LD_VAR 0 5
12795: PPUSH
12796: LD_INT 1
12798: PPUSH
12799: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
12803: LD_VAR 0 5
12807: PPUSH
12808: LD_VAR 0 8
12812: PUSH
12813: LD_INT 1
12815: ARRAY
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12824: LD_ADDR_EXP 43
12828: PUSH
12829: LD_EXP 43
12833: PPUSH
12834: LD_VAR 0 5
12838: PPUSH
12839: CALL 53177 0 2
12843: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
12844: LD_VAR 0 5
12848: PPUSH
12849: LD_VAR 0 7
12853: PUSH
12854: LD_INT 1
12856: ARRAY
12857: PPUSH
12858: LD_VAR 0 7
12862: PUSH
12863: LD_INT 2
12865: ARRAY
12866: PPUSH
12867: CALL_OW 114
// end ;
12871: GO 12740
12873: POP
12874: POP
// for i := 1 to 3 + v do
12875: LD_ADDR_VAR 0 3
12879: PUSH
12880: DOUBLE
12881: LD_INT 1
12883: DEC
12884: ST_TO_ADDR
12885: LD_INT 3
12887: PUSH
12888: LD_VAR 0 1
12892: PLUS
12893: PUSH
12894: FOR_TO
12895: IFFALSE 13092
// begin PrepareMechanic ( false , skill ) ;
12897: LD_INT 0
12899: PPUSH
12900: LD_VAR 0 4
12904: PPUSH
12905: CALL_OW 383
// un := CreateHuman ;
12909: LD_ADDR_VAR 0 5
12913: PUSH
12914: CALL_OW 44
12918: ST_TO_ADDR
// SetTag ( un , 999 ) ;
12919: LD_VAR 0 5
12923: PPUSH
12924: LD_INT 999
12926: PPUSH
12927: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
12931: LD_INT 14
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: LD_INT 27
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 28
12948: PUSH
12949: LD_INT 26
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: PUSH
12958: LD_VAR 0 3
12962: PUSH
12963: LD_INT 4
12965: MOD
12966: PUSH
12967: LD_INT 1
12969: PLUS
12970: ARRAY
12971: PPUSH
12972: LD_INT 80
12974: PPUSH
12975: CALL 20306 0 5
// veh := CreateVehicle ;
12979: LD_ADDR_VAR 0 6
12983: PUSH
12984: CALL_OW 45
12988: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12989: LD_VAR 0 6
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13001: LD_VAR 0 6
13005: PPUSH
13006: LD_VAR 0 8
13010: PUSH
13011: LD_INT 2
13013: ARRAY
13014: PPUSH
13015: LD_INT 0
13017: PPUSH
13018: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13022: LD_VAR 0 5
13026: PPUSH
13027: LD_VAR 0 6
13031: PPUSH
13032: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13036: LD_VAR 0 5
13040: PPUSH
13041: LD_VAR 0 7
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: LD_VAR 0 7
13054: PUSH
13055: LD_INT 2
13057: ARRAY
13058: PPUSH
13059: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13063: LD_ADDR_EXP 44
13067: PUSH
13068: LD_EXP 44
13072: PPUSH
13073: LD_VAR 0 6
13077: PPUSH
13078: CALL 53177 0 2
13082: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13083: LD_INT 70
13085: PPUSH
13086: CALL_OW 67
// end ;
13090: GO 12894
13092: POP
13093: POP
// wait ( 0 0$2 ) ;
13094: LD_INT 70
13096: PPUSH
13097: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] + ( v div 2 ) do
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: DOUBLE
13107: LD_INT 1
13109: DEC
13110: ST_TO_ADDR
13111: LD_INT 1
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PUSH
13125: LD_OWVAR 67
13129: ARRAY
13130: PUSH
13131: LD_VAR 0 1
13135: PUSH
13136: LD_INT 2
13138: DIV
13139: PLUS
13140: PUSH
13141: FOR_TO
13142: IFFALSE 13255
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
13144: LD_INT 14
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 5
13152: PPUSH
13153: LD_INT 29
13155: PPUSH
13156: LD_INT 80
13158: PPUSH
13159: CALL 20306 0 5
// veh := CreateVehicle ;
13163: LD_ADDR_VAR 0 6
13167: PUSH
13168: CALL_OW 45
13172: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13173: LD_VAR 0 6
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13185: LD_VAR 0 6
13189: PPUSH
13190: LD_VAR 0 8
13194: PUSH
13195: LD_INT 2
13197: ARRAY
13198: PPUSH
13199: LD_INT 0
13201: PPUSH
13202: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13206: LD_VAR 0 5
13210: PPUSH
13211: LD_VAR 0 7
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: PPUSH
13220: LD_VAR 0 7
13224: PUSH
13225: LD_INT 2
13227: ARRAY
13228: PPUSH
13229: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13233: LD_ADDR_EXP 44
13237: PUSH
13238: LD_EXP 44
13242: PPUSH
13243: LD_VAR 0 6
13247: PPUSH
13248: CALL 53177 0 2
13252: ST_TO_ADDR
// end ;
13253: GO 13141
13255: POP
13256: POP
// end ;
13257: LD_VAR 0 2
13261: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
13262: LD_EXP 43
13266: IFFALSE 13796
13268: GO 13270
13270: DISABLE
13271: LD_INT 0
13273: PPUSH
13274: PPUSH
13275: PPUSH
13276: PPUSH
13277: PPUSH
// begin enable ;
13278: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13279: LD_ADDR_VAR 0 1
13283: PUSH
13284: LD_INT 120
13286: PUSH
13287: LD_INT 11
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: PUSH
13299: FOR_IN
13300: IFFALSE 13316
// SetTag ( i , 0 ) ;
13302: LD_VAR 0 1
13306: PPUSH
13307: LD_INT 0
13309: PPUSH
13310: CALL_OW 109
13314: GO 13299
13316: POP
13317: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13318: LD_ADDR_VAR 0 2
13322: PUSH
13323: LD_EXP 43
13327: PPUSH
13328: LD_INT 50
13330: PUSH
13331: EMPTY
13332: LIST
13333: PPUSH
13334: CALL_OW 72
13338: ST_TO_ADDR
// arAttackersInf := [ ] ;
13339: LD_ADDR_EXP 43
13343: PUSH
13344: EMPTY
13345: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13346: LD_ADDR_VAR 0 1
13350: PUSH
13351: LD_VAR 0 2
13355: PPUSH
13356: LD_INT 25
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 72
13370: PUSH
13371: FOR_IN
13372: IFFALSE 13503
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13374: LD_ADDR_VAR 0 3
13378: PUSH
13379: LD_INT 81
13381: PUSH
13382: LD_EXP 3
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 3
13397: PUSH
13398: LD_INT 120
13400: PUSH
13401: LD_INT 11
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 2
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 21
13427: PUSH
13428: LD_INT 3
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: PPUSH
13445: CALL_OW 69
13449: PPUSH
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 74
13459: ST_TO_ADDR
// if not nearest then
13460: LD_VAR 0 3
13464: NOT
13465: IFFALSE 13469
// break ;
13467: GO 13503
// SetTag ( nearest , tMined ) ;
13469: LD_VAR 0 3
13473: PPUSH
13474: LD_INT 11
13476: PPUSH
13477: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13481: LD_VAR 0 1
13485: PPUSH
13486: LD_INT 0
13488: PPUSH
13489: LD_INT 0
13491: PPUSH
13492: LD_VAR 0 3
13496: PPUSH
13497: CALL_OW 192
// end ;
13501: GO 13371
13503: POP
13504: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13505: LD_ADDR_VAR 0 2
13509: PUSH
13510: LD_VAR 0 2
13514: PPUSH
13515: LD_INT 50
13517: PUSH
13518: EMPTY
13519: LIST
13520: PPUSH
13521: CALL_OW 72
13525: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13526: LD_INT 70
13528: PPUSH
13529: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13533: LD_ADDR_VAR 0 2
13537: PUSH
13538: LD_VAR 0 2
13542: PPUSH
13543: LD_INT 50
13545: PUSH
13546: EMPTY
13547: LIST
13548: PPUSH
13549: CALL_OW 72
13553: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13554: LD_ADDR_VAR 0 4
13558: PUSH
13559: LD_INT 81
13561: PUSH
13562: LD_EXP 3
13566: PUSH
13567: LD_INT 1
13569: ARRAY
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 69
13579: ST_TO_ADDR
// for i in tmp do
13580: LD_ADDR_VAR 0 1
13584: PUSH
13585: LD_VAR 0 2
13589: PUSH
13590: FOR_IN
13591: IFFALSE 13787
// if GetClass ( i ) <> 1 then
13593: LD_VAR 0 1
13597: PPUSH
13598: CALL_OW 257
13602: PUSH
13603: LD_INT 1
13605: NONEQUAL
13606: IFFALSE 13634
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13608: LD_VAR 0 1
13612: PPUSH
13613: LD_VAR 0 4
13617: PPUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 74
13627: PPUSH
13628: CALL_OW 115
13632: GO 13785
// if not HasTask ( i ) then
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL_OW 314
13643: NOT
13644: IFFALSE 13785
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13646: LD_ADDR_VAR 0 3
13650: PUSH
13651: LD_VAR 0 4
13655: PPUSH
13656: LD_INT 3
13658: PUSH
13659: LD_INT 120
13661: PUSH
13662: LD_INT 11
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 2
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 21
13688: PUSH
13689: LD_INT 3
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 72
13709: PPUSH
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 74
13719: ST_TO_ADDR
// if not nearest then
13720: LD_VAR 0 3
13724: NOT
13725: IFFALSE 13753
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13727: LD_VAR 0 1
13731: PPUSH
13732: LD_VAR 0 4
13736: PPUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 74
13746: PPUSH
13747: CALL_OW 115
13751: GO 13785
// begin SetTag ( nearest , tMined ) ;
13753: LD_VAR 0 3
13757: PPUSH
13758: LD_INT 11
13760: PPUSH
13761: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13765: LD_VAR 0 1
13769: PPUSH
13770: LD_INT 0
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: CALL_OW 132
// end ; end ;
13785: GO 13590
13787: POP
13788: POP
// until not tmp ;
13789: LD_VAR 0 2
13793: NOT
13794: IFFALSE 13526
// end ;
13796: PPOPN 5
13798: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
13799: LD_EXP 44
13803: IFFALSE 14026
13805: GO 13807
13807: DISABLE
13808: LD_INT 0
13810: PPUSH
13811: PPUSH
13812: PPUSH
// begin enable ;
13813: ENABLE
// tmp := arAttackersVeh ;
13814: LD_ADDR_VAR 0 2
13818: PUSH
13819: LD_EXP 44
13823: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13824: LD_ADDR_EXP 44
13828: PUSH
13829: EMPTY
13830: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: LD_INT 139
13838: PUSH
13839: LD_INT 55
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 155
13848: PUSH
13849: LD_INT 92
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 53
13862: PUSH
13863: LD_INT 61
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 74
13872: PUSH
13873: LD_INT 98
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
13888: LD_VAR 0 2
13892: PUSH
13893: LD_INT 1
13895: ARRAY
13896: PPUSH
13897: LD_INT 139
13899: PPUSH
13900: LD_INT 55
13902: PPUSH
13903: CALL_OW 297
13907: PUSH
13908: LD_VAR 0 2
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PPUSH
13917: LD_INT 53
13919: PPUSH
13920: LD_INT 61
13922: PPUSH
13923: CALL_OW 297
13927: LESS
13928: IFFALSE 13946
// path := path [ 1 ] else
13930: LD_ADDR_VAR 0 3
13934: PUSH
13935: LD_VAR 0 3
13939: PUSH
13940: LD_INT 1
13942: ARRAY
13943: ST_TO_ADDR
13944: GO 13960
// path := path [ 2 ] ;
13946: LD_ADDR_VAR 0 3
13950: PUSH
13951: LD_VAR 0 3
13955: PUSH
13956: LD_INT 2
13958: ARRAY
13959: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13960: LD_INT 70
13962: PPUSH
13963: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13967: LD_ADDR_VAR 0 2
13971: PUSH
13972: LD_VAR 0 2
13976: PPUSH
13977: LD_INT 50
13979: PUSH
13980: EMPTY
13981: LIST
13982: PPUSH
13983: CALL_OW 72
13987: ST_TO_ADDR
// for i in tmp do
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_VAR 0 2
13997: PUSH
13998: FOR_IN
13999: IFFALSE 14017
// AgressiveMove ( i , path ) until not tmp ;
14001: LD_VAR 0 1
14005: PPUSH
14006: LD_VAR 0 3
14010: PPUSH
14011: CALL 55781 0 2
14015: GO 13998
14017: POP
14018: POP
14019: LD_VAR 0 2
14023: NOT
14024: IFFALSE 13960
// end ;
14026: PPOPN 3
14028: END
// every 1 1$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
14029: LD_EXP 16
14033: PPUSH
14034: CALL 17568 0 1
14038: PUSH
14039: LD_INT 3
14041: GREATEREQUAL
14042: IFFALSE 14163
14044: GO 14046
14046: DISABLE
14047: LD_INT 0
14049: PPUSH
14050: PPUSH
// begin enable ;
14051: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
14052: LD_ADDR_VAR 0 2
14056: PUSH
14057: LD_EXP 16
14061: PPUSH
14062: LD_INT 61
14064: PUSH
14065: EMPTY
14066: LIST
14067: PPUSH
14068: CALL_OW 72
14072: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
14073: LD_ADDR_EXP 16
14077: PUSH
14078: LD_EXP 16
14082: PUSH
14083: LD_VAR 0 2
14087: DIFF
14088: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14089: LD_INT 70
14091: PPUSH
14092: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14096: LD_ADDR_VAR 0 2
14100: PUSH
14101: LD_VAR 0 2
14105: PPUSH
14106: LD_INT 50
14108: PUSH
14109: EMPTY
14110: LIST
14111: PPUSH
14112: CALL_OW 72
14116: ST_TO_ADDR
// for i in tmp do
14117: LD_ADDR_VAR 0 1
14121: PUSH
14122: LD_VAR 0 2
14126: PUSH
14127: FOR_IN
14128: IFFALSE 14154
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
14130: LD_VAR 0 1
14134: PPUSH
14135: LD_INT 98
14137: PUSH
14138: LD_INT 63
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: EMPTY
14146: LIST
14147: PPUSH
14148: CALL 55781 0 2
14152: GO 14127
14154: POP
14155: POP
14156: LD_VAR 0 2
14160: NOT
14161: IFFALSE 14089
// end ;
14163: PPOPN 2
14165: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
14166: LD_EXP 9
14170: PUSH
14171: LD_EXP 4
14175: AND
14176: IFFALSE 14733
14178: GO 14180
14180: DISABLE
14181: LD_INT 0
14183: PPUSH
14184: PPUSH
14185: PPUSH
// begin enable ;
14186: ENABLE
// if not arVehiclesAtttackers then
14187: LD_EXP 9
14191: NOT
14192: IFFALSE 14196
// exit ;
14194: GO 14733
// for i in arVehiclesAtttackers do
14196: LD_ADDR_VAR 0 1
14200: PUSH
14201: LD_EXP 9
14205: PUSH
14206: FOR_IN
14207: IFFALSE 14731
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
14209: LD_VAR 0 1
14213: PPUSH
14214: CALL_OW 302
14218: NOT
14219: PUSH
14220: LD_VAR 0 1
14224: PPUSH
14225: CALL_OW 255
14229: PUSH
14230: LD_EXP 3
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: NONEQUAL
14239: OR
14240: IFFALSE 14260
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
14242: LD_ADDR_EXP 9
14246: PUSH
14247: LD_EXP 9
14251: PUSH
14252: LD_VAR 0 1
14256: DIFF
14257: ST_TO_ADDR
// continue ;
14258: GO 14206
// end ; if GetTag ( i ) = 300 then
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 110
14269: PUSH
14270: LD_INT 300
14272: EQUAL
14273: IFFALSE 14388
// begin if GetFuel ( i ) < 50 then
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 261
14284: PUSH
14285: LD_INT 50
14287: LESS
14288: IFFALSE 14347
// begin ComMoveXY ( i , 102 , 47 ) ;
14290: LD_VAR 0 1
14294: PPUSH
14295: LD_INT 102
14297: PPUSH
14298: LD_INT 47
14300: PPUSH
14301: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14305: LD_INT 35
14307: PPUSH
14308: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14312: LD_VAR 0 1
14316: PPUSH
14317: LD_INT 102
14319: PPUSH
14320: LD_INT 47
14322: PPUSH
14323: CALL_OW 297
14327: PUSH
14328: LD_INT 4
14330: LESS
14331: IFFALSE 14305
// SetFuel ( i , 100 ) ;
14333: LD_VAR 0 1
14337: PPUSH
14338: LD_INT 100
14340: PPUSH
14341: CALL_OW 240
// end else
14345: GO 14388
// if not IsInArea ( i , arParkingArea ) then
14347: LD_VAR 0 1
14351: PPUSH
14352: LD_INT 14
14354: PPUSH
14355: CALL_OW 308
14359: NOT
14360: IFFALSE 14376
// ComMoveToArea ( i , arParkingArea ) else
14362: LD_VAR 0 1
14366: PPUSH
14367: LD_INT 14
14369: PPUSH
14370: CALL_OW 113
14374: GO 14388
// SetTag ( i , 301 ) ;
14376: LD_VAR 0 1
14380: PPUSH
14381: LD_INT 301
14383: PPUSH
14384: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 110
14397: PUSH
14398: LD_INT 301
14400: EQUAL
14401: IFFALSE 14543
// begin if GetLives ( i ) < 1000 then
14403: LD_VAR 0 1
14407: PPUSH
14408: CALL_OW 256
14412: PUSH
14413: LD_INT 1000
14415: LESS
14416: IFFALSE 14520
// begin if not IsDrivenBy ( i ) then
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 311
14427: NOT
14428: IFFALSE 14432
// continue ;
14430: GO 14206
// mech := IsDrivenBy ( i ) ;
14432: LD_ADDR_VAR 0 2
14436: PUSH
14437: LD_VAR 0 1
14441: PPUSH
14442: CALL_OW 311
14446: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14447: LD_VAR 0 2
14451: PPUSH
14452: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14456: LD_VAR 0 2
14460: PPUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14470: LD_INT 35
14472: PPUSH
14473: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14477: LD_VAR 0 1
14481: PPUSH
14482: CALL_OW 256
14486: PUSH
14487: LD_INT 1000
14489: EQUAL
14490: IFFALSE 14470
// SetLives ( mech , 1000 ) ;
14492: LD_VAR 0 2
14496: PPUSH
14497: LD_INT 1000
14499: PPUSH
14500: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14504: LD_VAR 0 2
14508: PPUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 120
// end else
14518: GO 14543
// if IsDrivenBy ( i ) then
14520: LD_VAR 0 1
14524: PPUSH
14525: CALL_OW 311
14529: IFFALSE 14543
// SetTag ( i , 0 ) ;
14531: LD_VAR 0 1
14535: PPUSH
14536: LD_INT 0
14538: PPUSH
14539: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 110
14552: PUSH
14553: LD_INT 300
14555: LESS
14556: IFFALSE 14729
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_INT 1
14565: PPUSH
14566: LD_INT 81
14568: PUSH
14569: LD_EXP 3
14573: PUSH
14574: LD_INT 1
14576: ARRAY
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PPUSH
14582: CALL_OW 70
14586: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL_OW 256
14596: PUSH
14597: LD_INT 650
14599: LESS
14600: IFFALSE 14625
// begin ComStop ( i ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: CALL_OW 141
// SetTag ( i , 300 ) ;
14611: LD_VAR 0 1
14615: PPUSH
14616: LD_INT 300
14618: PPUSH
14619: CALL_OW 109
// continue ;
14623: GO 14206
// end ; if enemy then
14625: LD_VAR 0 3
14629: IFFALSE 14669
// begin if not HasTask ( i ) then
14631: LD_VAR 0 1
14635: PPUSH
14636: CALL_OW 314
14640: NOT
14641: IFFALSE 14667
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14643: LD_VAR 0 1
14647: PPUSH
14648: LD_VAR 0 3
14652: PPUSH
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL_OW 74
14662: PPUSH
14663: CALL_OW 115
// end else
14667: GO 14729
// if arVehiclesAtttackers then
14669: LD_EXP 9
14673: IFFALSE 14729
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14675: LD_ADDR_VAR 0 3
14679: PUSH
14680: LD_INT 81
14682: PUSH
14683: LD_EXP 3
14687: PUSH
14688: LD_INT 1
14690: ARRAY
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: ST_TO_ADDR
// if enemy then
14701: LD_VAR 0 3
14705: IFFALSE 14729
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14707: LD_VAR 0 1
14711: PPUSH
14712: LD_INT 99
14714: PUSH
14715: LD_INT 66
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: PPUSH
14725: CALL 55781 0 2
// end ; end ; end ;
14729: GO 14206
14731: POP
14732: POP
// end ;
14733: PPOPN 3
14735: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14736: LD_INT 22
14738: PUSH
14739: LD_EXP 3
14743: PUSH
14744: LD_INT 1
14746: ARRAY
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 32
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: IFFALSE 14853
14772: GO 14774
14774: DISABLE
14775: LD_INT 0
14777: PPUSH
// begin enable ;
14778: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14779: LD_ADDR_VAR 0 1
14783: PUSH
14784: LD_INT 22
14786: PUSH
14787: LD_EXP 3
14791: PUSH
14792: LD_INT 1
14794: ARRAY
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 32
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 69
14818: PUSH
14819: FOR_IN
14820: IFFALSE 14851
// if GetFuel ( i ) < 3 then
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 261
14831: PUSH
14832: LD_INT 3
14834: LESS
14835: IFFALSE 14849
// SetFuel ( i , 3 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 3
14844: PPUSH
14845: CALL_OW 240
14849: GO 14819
14851: POP
14852: POP
// end ; end_of_file
14853: PPOPN 1
14855: END
// every 0 0$20 trigger game do
14856: LD_EXP 2
14860: IFFALSE 14905
14862: GO 14864
14864: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14865: LD_INT 15
14867: PUSH
14868: LD_INT 17
14870: PUSH
14871: LD_INT 16
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: LD_EXP 32
14887: PUSH
14888: LD_INT 2
14890: ARRAY
14891: PPUSH
14892: LD_EXP 32
14896: PUSH
14897: LD_INT 1
14899: ARRAY
14900: PPUSH
14901: CALL 14906 0 3
14905: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
14910: PPUSH
14911: PPUSH
// if not areas then
14912: LD_VAR 0 1
14916: NOT
14917: IFFALSE 14921
// exit ;
14919: GO 15298
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
14921: LD_ADDR_VAR 0 7
14925: PUSH
14926: LD_INT 18
14928: PUSH
14929: LD_INT 19
14931: PUSH
14932: LD_INT 20
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: ST_TO_ADDR
// x := 5 ;
14940: LD_ADDR_VAR 0 6
14944: PUSH
14945: LD_INT 5
14947: ST_TO_ADDR
// repeat wait ( time ) ;
14948: LD_VAR 0 2
14952: PPUSH
14953: CALL_OW 67
// if tick < [ 22 22$00 , 19 19$00 , 15 15$00 ] [ Difficulty ] then
14957: LD_OWVAR 1
14961: PUSH
14962: LD_INT 46200
14964: PUSH
14965: LD_INT 39900
14967: PUSH
14968: LD_INT 31500
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: PUSH
14976: LD_OWVAR 67
14980: ARRAY
14981: LESS
14982: IFFALSE 15121
// begin for i := 1 to multi_sides do
14984: LD_ADDR_VAR 0 5
14988: PUSH
14989: DOUBLE
14990: LD_INT 1
14992: DEC
14993: ST_TO_ADDR
14994: LD_EXP 18
14998: PUSH
14999: FOR_TO
15000: IFFALSE 15112
// if multi_sides [ i ] then
15002: LD_EXP 18
15006: PUSH
15007: LD_VAR 0 5
15011: ARRAY
15012: IFFALSE 15110
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
15014: LD_VAR 0 7
15018: PUSH
15019: LD_EXP 18
15023: PUSH
15024: LD_VAR 0 5
15028: ARRAY
15029: ARRAY
15030: PPUSH
15031: LD_INT 1
15033: PPUSH
15034: CALL_OW 287
15038: PUSH
15039: LD_INT 32
15041: PUSH
15042: LD_INT 25
15044: PUSH
15045: LD_INT 23
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: LD_OWVAR 67
15057: ARRAY
15058: LESS
15059: IFFALSE 15110
// begin amount := amount - ( x * 10 ) ;
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_VAR 0 3
15070: PUSH
15071: LD_VAR 0 6
15075: PUSH
15076: LD_INT 10
15078: MUL
15079: MINUS
15080: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
15081: LD_VAR 0 6
15085: PPUSH
15086: LD_VAR 0 7
15090: PUSH
15091: LD_EXP 18
15095: PUSH
15096: LD_VAR 0 5
15100: ARRAY
15101: ARRAY
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 55
// end ; end ;
15110: GO 14999
15112: POP
15113: POP
// wait ( 0 0$2 ) ;
15114: LD_INT 70
15116: PPUSH
15117: CALL_OW 67
// end ; for i in areas do
15121: LD_ADDR_VAR 0 5
15125: PUSH
15126: LD_VAR 0 1
15130: PUSH
15131: FOR_IN
15132: IFFALSE 15215
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
15134: LD_VAR 0 5
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 287
15146: PUSH
15147: LD_INT 25
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_INT 20
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: PUSH
15161: LD_OWVAR 67
15165: ARRAY
15166: LESS
15167: IFFALSE 15213
// begin wait ( 0 0$5 ) ;
15169: LD_INT 175
15171: PPUSH
15172: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15176: LD_VAR 0 6
15180: PPUSH
15181: LD_VAR 0 5
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_VAR 0 3
15202: PUSH
15203: LD_VAR 0 6
15207: PUSH
15208: LD_INT 10
15210: MUL
15211: MINUS
15212: ST_TO_ADDR
// end ; end ;
15213: GO 15131
15215: POP
15216: POP
// time := time + 0 0$2 ;
15217: LD_ADDR_VAR 0 2
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: LD_INT 70
15229: PLUS
15230: ST_TO_ADDR
// x := x - 1 ;
15231: LD_ADDR_VAR 0 6
15235: PUSH
15236: LD_VAR 0 6
15240: PUSH
15241: LD_INT 1
15243: MINUS
15244: ST_TO_ADDR
// if x = 0 then
15245: LD_VAR 0 6
15249: PUSH
15250: LD_INT 0
15252: EQUAL
15253: IFFALSE 15263
// x := 5 ;
15255: LD_ADDR_VAR 0 6
15259: PUSH
15260: LD_INT 5
15262: ST_TO_ADDR
// if time > 1 1$00 then
15263: LD_VAR 0 2
15267: PUSH
15268: LD_INT 2100
15270: GREATER
15271: IFFALSE 15281
// time := 0 0$30 ;
15273: LD_ADDR_VAR 0 2
15277: PUSH
15278: LD_INT 1050
15280: ST_TO_ADDR
// until not game or amount <= 0 ;
15281: LD_EXP 2
15285: NOT
15286: PUSH
15287: LD_VAR 0 3
15291: PUSH
15292: LD_INT 0
15294: LESSEQUAL
15295: OR
15296: IFFALSE 14948
// end ; end_of_file
15298: LD_VAR 0 4
15302: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15303: LD_VAR 0 1
15307: PUSH
15308: LD_INT 200
15310: DOUBLE
15311: GREATEREQUAL
15312: IFFALSE 15320
15314: LD_INT 299
15316: DOUBLE
15317: LESSEQUAL
15318: IFTRUE 15322
15320: GO 15354
15322: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15323: LD_VAR 0 1
15327: PPUSH
15328: LD_VAR 0 2
15332: PPUSH
15333: LD_VAR 0 3
15337: PPUSH
15338: LD_VAR 0 4
15342: PPUSH
15343: LD_VAR 0 5
15347: PPUSH
15348: CALL 58846 0 5
15352: GO 15431
15354: LD_INT 300
15356: DOUBLE
15357: GREATEREQUAL
15358: IFFALSE 15366
15360: LD_INT 399
15362: DOUBLE
15363: LESSEQUAL
15364: IFTRUE 15368
15366: GO 15430
15368: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15369: LD_VAR 0 1
15373: PPUSH
15374: LD_VAR 0 2
15378: PPUSH
15379: LD_VAR 0 3
15383: PPUSH
15384: LD_VAR 0 4
15388: PPUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: LD_VAR 0 6
15398: PPUSH
15399: LD_VAR 0 7
15403: PPUSH
15404: LD_VAR 0 8
15408: PPUSH
15409: LD_VAR 0 9
15413: PPUSH
15414: LD_VAR 0 10
15418: PPUSH
15419: LD_VAR 0 11
15423: PPUSH
15424: CALL 63593 0 11
15428: GO 15431
15430: POP
// end ;
15431: PPOPN 11
15433: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15434: LD_VAR 0 1
15438: PPUSH
15439: LD_VAR 0 2
15443: PPUSH
15444: LD_VAR 0 3
15448: PPUSH
15449: LD_VAR 0 4
15453: PPUSH
15454: LD_VAR 0 5
15458: PPUSH
15459: CALL 58311 0 5
// end ; end_of_file
15463: PPOPN 5
15465: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
// if exist_mode then
15470: LD_VAR 0 2
15474: IFFALSE 15499
// unit := CreateCharacter ( prefix & ident ) else
15476: LD_ADDR_VAR 0 5
15480: PUSH
15481: LD_VAR 0 3
15485: PUSH
15486: LD_VAR 0 1
15490: STR
15491: PPUSH
15492: CALL_OW 34
15496: ST_TO_ADDR
15497: GO 15514
// unit := NewCharacter ( ident ) ;
15499: LD_ADDR_VAR 0 5
15503: PUSH
15504: LD_VAR 0 1
15508: PPUSH
15509: CALL_OW 25
15513: ST_TO_ADDR
// result := unit ;
15514: LD_ADDR_VAR 0 4
15518: PUSH
15519: LD_VAR 0 5
15523: ST_TO_ADDR
// end ;
15524: LD_VAR 0 4
15528: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15529: LD_INT 0
15531: PPUSH
15532: PPUSH
// if not side or not nation then
15533: LD_VAR 0 1
15537: NOT
15538: PUSH
15539: LD_VAR 0 2
15543: NOT
15544: OR
15545: IFFALSE 15549
// exit ;
15547: GO 16317
// case nation of nation_american :
15549: LD_VAR 0 2
15553: PUSH
15554: LD_INT 1
15556: DOUBLE
15557: EQUAL
15558: IFTRUE 15562
15560: GO 15776
15562: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15563: LD_ADDR_VAR 0 4
15567: PUSH
15568: LD_INT 35
15570: PUSH
15571: LD_INT 45
15573: PUSH
15574: LD_INT 46
15576: PUSH
15577: LD_INT 47
15579: PUSH
15580: LD_INT 82
15582: PUSH
15583: LD_INT 83
15585: PUSH
15586: LD_INT 84
15588: PUSH
15589: LD_INT 85
15591: PUSH
15592: LD_INT 86
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: LD_INT 2
15600: PUSH
15601: LD_INT 6
15603: PUSH
15604: LD_INT 15
15606: PUSH
15607: LD_INT 16
15609: PUSH
15610: LD_INT 7
15612: PUSH
15613: LD_INT 12
15615: PUSH
15616: LD_INT 13
15618: PUSH
15619: LD_INT 10
15621: PUSH
15622: LD_INT 14
15624: PUSH
15625: LD_INT 20
15627: PUSH
15628: LD_INT 21
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 25
15636: PUSH
15637: LD_INT 32
15639: PUSH
15640: LD_INT 27
15642: PUSH
15643: LD_INT 36
15645: PUSH
15646: LD_INT 69
15648: PUSH
15649: LD_INT 39
15651: PUSH
15652: LD_INT 34
15654: PUSH
15655: LD_INT 40
15657: PUSH
15658: LD_INT 48
15660: PUSH
15661: LD_INT 49
15663: PUSH
15664: LD_INT 50
15666: PUSH
15667: LD_INT 51
15669: PUSH
15670: LD_INT 52
15672: PUSH
15673: LD_INT 53
15675: PUSH
15676: LD_INT 54
15678: PUSH
15679: LD_INT 55
15681: PUSH
15682: LD_INT 56
15684: PUSH
15685: LD_INT 57
15687: PUSH
15688: LD_INT 58
15690: PUSH
15691: LD_INT 59
15693: PUSH
15694: LD_INT 60
15696: PUSH
15697: LD_INT 61
15699: PUSH
15700: LD_INT 62
15702: PUSH
15703: LD_INT 80
15705: PUSH
15706: LD_INT 82
15708: PUSH
15709: LD_INT 83
15711: PUSH
15712: LD_INT 84
15714: PUSH
15715: LD_INT 85
15717: PUSH
15718: LD_INT 86
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: ST_TO_ADDR
15774: GO 16241
15776: LD_INT 2
15778: DOUBLE
15779: EQUAL
15780: IFTRUE 15784
15782: GO 16010
15784: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15785: LD_ADDR_VAR 0 4
15789: PUSH
15790: LD_INT 35
15792: PUSH
15793: LD_INT 45
15795: PUSH
15796: LD_INT 46
15798: PUSH
15799: LD_INT 47
15801: PUSH
15802: LD_INT 82
15804: PUSH
15805: LD_INT 83
15807: PUSH
15808: LD_INT 84
15810: PUSH
15811: LD_INT 85
15813: PUSH
15814: LD_INT 87
15816: PUSH
15817: LD_INT 70
15819: PUSH
15820: LD_INT 1
15822: PUSH
15823: LD_INT 11
15825: PUSH
15826: LD_INT 3
15828: PUSH
15829: LD_INT 4
15831: PUSH
15832: LD_INT 5
15834: PUSH
15835: LD_INT 6
15837: PUSH
15838: LD_INT 15
15840: PUSH
15841: LD_INT 18
15843: PUSH
15844: LD_INT 7
15846: PUSH
15847: LD_INT 17
15849: PUSH
15850: LD_INT 8
15852: PUSH
15853: LD_INT 20
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 22
15861: PUSH
15862: LD_INT 72
15864: PUSH
15865: LD_INT 26
15867: PUSH
15868: LD_INT 69
15870: PUSH
15871: LD_INT 39
15873: PUSH
15874: LD_INT 40
15876: PUSH
15877: LD_INT 41
15879: PUSH
15880: LD_INT 42
15882: PUSH
15883: LD_INT 43
15885: PUSH
15886: LD_INT 48
15888: PUSH
15889: LD_INT 49
15891: PUSH
15892: LD_INT 50
15894: PUSH
15895: LD_INT 51
15897: PUSH
15898: LD_INT 52
15900: PUSH
15901: LD_INT 53
15903: PUSH
15904: LD_INT 54
15906: PUSH
15907: LD_INT 55
15909: PUSH
15910: LD_INT 56
15912: PUSH
15913: LD_INT 60
15915: PUSH
15916: LD_INT 61
15918: PUSH
15919: LD_INT 62
15921: PUSH
15922: LD_INT 66
15924: PUSH
15925: LD_INT 67
15927: PUSH
15928: LD_INT 68
15930: PUSH
15931: LD_INT 81
15933: PUSH
15934: LD_INT 82
15936: PUSH
15937: LD_INT 83
15939: PUSH
15940: LD_INT 84
15942: PUSH
15943: LD_INT 85
15945: PUSH
15946: LD_INT 87
15948: PUSH
15949: LD_INT 88
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: ST_TO_ADDR
16008: GO 16241
16010: LD_INT 3
16012: DOUBLE
16013: EQUAL
16014: IFTRUE 16018
16016: GO 16240
16018: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16019: LD_ADDR_VAR 0 4
16023: PUSH
16024: LD_INT 46
16026: PUSH
16027: LD_INT 47
16029: PUSH
16030: LD_INT 1
16032: PUSH
16033: LD_INT 2
16035: PUSH
16036: LD_INT 82
16038: PUSH
16039: LD_INT 83
16041: PUSH
16042: LD_INT 84
16044: PUSH
16045: LD_INT 85
16047: PUSH
16048: LD_INT 86
16050: PUSH
16051: LD_INT 11
16053: PUSH
16054: LD_INT 9
16056: PUSH
16057: LD_INT 20
16059: PUSH
16060: LD_INT 19
16062: PUSH
16063: LD_INT 21
16065: PUSH
16066: LD_INT 24
16068: PUSH
16069: LD_INT 22
16071: PUSH
16072: LD_INT 25
16074: PUSH
16075: LD_INT 28
16077: PUSH
16078: LD_INT 29
16080: PUSH
16081: LD_INT 30
16083: PUSH
16084: LD_INT 31
16086: PUSH
16087: LD_INT 37
16089: PUSH
16090: LD_INT 38
16092: PUSH
16093: LD_INT 32
16095: PUSH
16096: LD_INT 27
16098: PUSH
16099: LD_INT 33
16101: PUSH
16102: LD_INT 69
16104: PUSH
16105: LD_INT 39
16107: PUSH
16108: LD_INT 34
16110: PUSH
16111: LD_INT 40
16113: PUSH
16114: LD_INT 71
16116: PUSH
16117: LD_INT 23
16119: PUSH
16120: LD_INT 44
16122: PUSH
16123: LD_INT 48
16125: PUSH
16126: LD_INT 49
16128: PUSH
16129: LD_INT 50
16131: PUSH
16132: LD_INT 51
16134: PUSH
16135: LD_INT 52
16137: PUSH
16138: LD_INT 53
16140: PUSH
16141: LD_INT 54
16143: PUSH
16144: LD_INT 55
16146: PUSH
16147: LD_INT 56
16149: PUSH
16150: LD_INT 57
16152: PUSH
16153: LD_INT 58
16155: PUSH
16156: LD_INT 59
16158: PUSH
16159: LD_INT 63
16161: PUSH
16162: LD_INT 64
16164: PUSH
16165: LD_INT 65
16167: PUSH
16168: LD_INT 82
16170: PUSH
16171: LD_INT 83
16173: PUSH
16174: LD_INT 84
16176: PUSH
16177: LD_INT 85
16179: PUSH
16180: LD_INT 86
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: ST_TO_ADDR
16238: GO 16241
16240: POP
// if state > - 1 and state < 3 then
16241: LD_VAR 0 3
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: GREATER
16250: PUSH
16251: LD_VAR 0 3
16255: PUSH
16256: LD_INT 3
16258: LESS
16259: AND
16260: IFFALSE 16317
// for i in result do
16262: LD_ADDR_VAR 0 5
16266: PUSH
16267: LD_VAR 0 4
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16315
// if GetTech ( i , side ) <> state then
16275: LD_VAR 0 5
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 321
16289: PUSH
16290: LD_VAR 0 3
16294: NONEQUAL
16295: IFFALSE 16313
// result := result diff i ;
16297: LD_ADDR_VAR 0 4
16301: PUSH
16302: LD_VAR 0 4
16306: PUSH
16307: LD_VAR 0 5
16311: DIFF
16312: ST_TO_ADDR
16313: GO 16272
16315: POP
16316: POP
// end ;
16317: LD_VAR 0 4
16321: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16322: LD_INT 0
16324: PPUSH
16325: PPUSH
16326: PPUSH
// result := true ;
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16335: LD_ADDR_VAR 0 5
16339: PUSH
16340: LD_VAR 0 2
16344: PPUSH
16345: CALL_OW 480
16349: ST_TO_ADDR
// if not tmp then
16350: LD_VAR 0 5
16354: NOT
16355: IFFALSE 16359
// exit ;
16357: GO 16408
// for i in tmp do
16359: LD_ADDR_VAR 0 4
16363: PUSH
16364: LD_VAR 0 5
16368: PUSH
16369: FOR_IN
16370: IFFALSE 16406
// if GetTech ( i , side ) <> state_researched then
16372: LD_VAR 0 4
16376: PPUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: CALL_OW 321
16386: PUSH
16387: LD_INT 2
16389: NONEQUAL
16390: IFFALSE 16404
// begin result := false ;
16392: LD_ADDR_VAR 0 3
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// exit ;
16400: POP
16401: POP
16402: GO 16408
// end ;
16404: GO 16369
16406: POP
16407: POP
// end ;
16408: LD_VAR 0 3
16412: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16428: LD_VAR 0 1
16432: NOT
16433: PUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 257
16443: PUSH
16444: LD_INT 9
16446: NONEQUAL
16447: OR
16448: IFFALSE 16452
// exit ;
16450: GO 17025
// side := GetSide ( unit ) ;
16452: LD_ADDR_VAR 0 9
16456: PUSH
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 255
16466: ST_TO_ADDR
// tech_space := tech_spacanom ;
16467: LD_ADDR_VAR 0 12
16471: PUSH
16472: LD_INT 29
16474: ST_TO_ADDR
// tech_time := tech_taurad ;
16475: LD_ADDR_VAR 0 13
16479: PUSH
16480: LD_INT 28
16482: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16483: LD_ADDR_VAR 0 11
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: CALL_OW 310
16497: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16498: LD_VAR 0 11
16502: PPUSH
16503: CALL_OW 247
16507: PUSH
16508: LD_INT 2
16510: EQUAL
16511: IFFALSE 16515
// exit ;
16513: GO 17025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16515: LD_ADDR_VAR 0 8
16519: PUSH
16520: LD_INT 81
16522: PUSH
16523: LD_VAR 0 9
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 3
16534: PUSH
16535: LD_INT 21
16537: PUSH
16538: LD_INT 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PPUSH
16553: CALL_OW 69
16557: ST_TO_ADDR
// if not tmp then
16558: LD_VAR 0 8
16562: NOT
16563: IFFALSE 16567
// exit ;
16565: GO 17025
// if in_unit then
16567: LD_VAR 0 11
16571: IFFALSE 16595
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16573: LD_ADDR_VAR 0 10
16577: PUSH
16578: LD_VAR 0 8
16582: PPUSH
16583: LD_VAR 0 11
16587: PPUSH
16588: CALL_OW 74
16592: ST_TO_ADDR
16593: GO 16615
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16595: LD_ADDR_VAR 0 10
16599: PUSH
16600: LD_VAR 0 8
16604: PPUSH
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 74
16614: ST_TO_ADDR
// if not enemy then
16615: LD_VAR 0 10
16619: NOT
16620: IFFALSE 16624
// exit ;
16622: GO 17025
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16624: LD_VAR 0 11
16628: PUSH
16629: LD_VAR 0 11
16633: PPUSH
16634: LD_VAR 0 10
16638: PPUSH
16639: CALL_OW 296
16643: PUSH
16644: LD_INT 13
16646: GREATER
16647: AND
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: LD_VAR 0 10
16658: PPUSH
16659: CALL_OW 296
16663: PUSH
16664: LD_INT 12
16666: GREATER
16667: OR
16668: IFFALSE 16672
// exit ;
16670: GO 17025
// missile := [ 1 ] ;
16672: LD_ADDR_VAR 0 14
16676: PUSH
16677: LD_INT 1
16679: PUSH
16680: EMPTY
16681: LIST
16682: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16683: LD_VAR 0 9
16687: PPUSH
16688: LD_VAR 0 12
16692: PPUSH
16693: CALL_OW 325
16697: IFFALSE 16726
// missile := Replace ( missile , missile + 1 , 2 ) ;
16699: LD_ADDR_VAR 0 14
16703: PUSH
16704: LD_VAR 0 14
16708: PPUSH
16709: LD_VAR 0 14
16713: PUSH
16714: LD_INT 1
16716: PLUS
16717: PPUSH
16718: LD_INT 2
16720: PPUSH
16721: CALL_OW 1
16725: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16726: LD_VAR 0 9
16730: PPUSH
16731: LD_VAR 0 13
16735: PPUSH
16736: CALL_OW 325
16740: PUSH
16741: LD_VAR 0 10
16745: PPUSH
16746: CALL_OW 255
16750: PPUSH
16751: LD_VAR 0 13
16755: PPUSH
16756: CALL_OW 325
16760: NOT
16761: AND
16762: IFFALSE 16791
// missile := Replace ( missile , missile + 1 , 3 ) ;
16764: LD_ADDR_VAR 0 14
16768: PUSH
16769: LD_VAR 0 14
16773: PPUSH
16774: LD_VAR 0 14
16778: PUSH
16779: LD_INT 1
16781: PLUS
16782: PPUSH
16783: LD_INT 3
16785: PPUSH
16786: CALL_OW 1
16790: ST_TO_ADDR
// if missile < 2 then
16791: LD_VAR 0 14
16795: PUSH
16796: LD_INT 2
16798: LESS
16799: IFFALSE 16803
// exit ;
16801: GO 17025
// x := GetX ( enemy ) ;
16803: LD_ADDR_VAR 0 4
16807: PUSH
16808: LD_VAR 0 10
16812: PPUSH
16813: CALL_OW 250
16817: ST_TO_ADDR
// y := GetY ( enemy ) ;
16818: LD_ADDR_VAR 0 5
16822: PUSH
16823: LD_VAR 0 10
16827: PPUSH
16828: CALL_OW 251
16832: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16833: LD_ADDR_VAR 0 6
16837: PUSH
16838: LD_VAR 0 4
16842: PUSH
16843: LD_INT 1
16845: NEG
16846: PPUSH
16847: LD_INT 1
16849: PPUSH
16850: CALL_OW 12
16854: PLUS
16855: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16856: LD_ADDR_VAR 0 7
16860: PUSH
16861: LD_VAR 0 5
16865: PUSH
16866: LD_INT 1
16868: NEG
16869: PPUSH
16870: LD_INT 1
16872: PPUSH
16873: CALL_OW 12
16877: PLUS
16878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16879: LD_VAR 0 6
16883: PPUSH
16884: LD_VAR 0 7
16888: PPUSH
16889: CALL_OW 488
16893: NOT
16894: IFFALSE 16916
// begin _x := x ;
16896: LD_ADDR_VAR 0 6
16900: PUSH
16901: LD_VAR 0 4
16905: ST_TO_ADDR
// _y := y ;
16906: LD_ADDR_VAR 0 7
16910: PUSH
16911: LD_VAR 0 5
16915: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: LD_INT 1
16923: PPUSH
16924: LD_VAR 0 14
16928: PPUSH
16929: CALL_OW 12
16933: ST_TO_ADDR
// case i of 1 :
16934: LD_VAR 0 3
16938: PUSH
16939: LD_INT 1
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 16964
16947: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16948: LD_VAR 0 1
16952: PPUSH
16953: LD_VAR 0 10
16957: PPUSH
16958: CALL_OW 115
16962: GO 17025
16964: LD_INT 2
16966: DOUBLE
16967: EQUAL
16968: IFTRUE 16972
16970: GO 16994
16972: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16973: LD_VAR 0 1
16977: PPUSH
16978: LD_VAR 0 6
16982: PPUSH
16983: LD_VAR 0 7
16987: PPUSH
16988: CALL_OW 153
16992: GO 17025
16994: LD_INT 3
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17024
17002: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17003: LD_VAR 0 1
17007: PPUSH
17008: LD_VAR 0 6
17012: PPUSH
17013: LD_VAR 0 7
17017: PPUSH
17018: CALL_OW 154
17022: GO 17025
17024: POP
// end ;
17025: LD_VAR 0 2
17029: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17030: LD_INT 0
17032: PPUSH
17033: PPUSH
17034: PPUSH
17035: PPUSH
17036: PPUSH
17037: PPUSH
// if not unit or not building then
17038: LD_VAR 0 1
17042: NOT
17043: PUSH
17044: LD_VAR 0 2
17048: NOT
17049: OR
17050: IFFALSE 17054
// exit ;
17052: GO 17212
// x := GetX ( building ) ;
17054: LD_ADDR_VAR 0 5
17058: PUSH
17059: LD_VAR 0 2
17063: PPUSH
17064: CALL_OW 250
17068: ST_TO_ADDR
// y := GetY ( building ) ;
17069: LD_ADDR_VAR 0 6
17073: PUSH
17074: LD_VAR 0 2
17078: PPUSH
17079: CALL_OW 251
17083: ST_TO_ADDR
// for i = 0 to 5 do
17084: LD_ADDR_VAR 0 4
17088: PUSH
17089: DOUBLE
17090: LD_INT 0
17092: DEC
17093: ST_TO_ADDR
17094: LD_INT 5
17096: PUSH
17097: FOR_TO
17098: IFFALSE 17210
// begin _x := ShiftX ( x , i , 3 ) ;
17100: LD_ADDR_VAR 0 7
17104: PUSH
17105: LD_VAR 0 5
17109: PPUSH
17110: LD_VAR 0 4
17114: PPUSH
17115: LD_INT 3
17117: PPUSH
17118: CALL_OW 272
17122: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17123: LD_ADDR_VAR 0 8
17127: PUSH
17128: LD_VAR 0 6
17132: PPUSH
17133: LD_VAR 0 4
17137: PPUSH
17138: LD_INT 3
17140: PPUSH
17141: CALL_OW 273
17145: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17146: LD_VAR 0 7
17150: PPUSH
17151: LD_VAR 0 8
17155: PPUSH
17156: CALL_OW 488
17160: NOT
17161: IFFALSE 17165
// continue ;
17163: GO 17097
// if HexInfo ( _x , _y ) = 0 then
17165: LD_VAR 0 7
17169: PPUSH
17170: LD_VAR 0 8
17174: PPUSH
17175: CALL_OW 428
17179: PUSH
17180: LD_INT 0
17182: EQUAL
17183: IFFALSE 17208
// begin ComMoveXY ( unit , _x , _y ) ;
17185: LD_VAR 0 1
17189: PPUSH
17190: LD_VAR 0 7
17194: PPUSH
17195: LD_VAR 0 8
17199: PPUSH
17200: CALL_OW 111
// exit ;
17204: POP
17205: POP
17206: GO 17212
// end ; end ;
17208: GO 17097
17210: POP
17211: POP
// end ;
17212: LD_VAR 0 3
17216: RET
// export function ScanBase ( side , base_area ) ; begin
17217: LD_INT 0
17219: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17220: LD_ADDR_VAR 0 3
17224: PUSH
17225: LD_VAR 0 2
17229: PPUSH
17230: LD_INT 81
17232: PUSH
17233: LD_VAR 0 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PPUSH
17242: CALL_OW 70
17246: ST_TO_ADDR
// end ;
17247: LD_VAR 0 3
17251: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
// result := false ;
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_INT 0
17265: ST_TO_ADDR
// side := GetSide ( unit ) ;
17266: LD_ADDR_VAR 0 3
17270: PUSH
17271: LD_VAR 0 1
17275: PPUSH
17276: CALL_OW 255
17280: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17281: LD_ADDR_VAR 0 4
17285: PUSH
17286: LD_VAR 0 1
17290: PPUSH
17291: CALL_OW 248
17295: ST_TO_ADDR
// case nat of 1 :
17296: LD_VAR 0 4
17300: PUSH
17301: LD_INT 1
17303: DOUBLE
17304: EQUAL
17305: IFTRUE 17309
17307: GO 17320
17309: POP
// tech := tech_lassight ; 2 :
17310: LD_ADDR_VAR 0 5
17314: PUSH
17315: LD_INT 12
17317: ST_TO_ADDR
17318: GO 17359
17320: LD_INT 2
17322: DOUBLE
17323: EQUAL
17324: IFTRUE 17328
17326: GO 17339
17328: POP
// tech := tech_mortar ; 3 :
17329: LD_ADDR_VAR 0 5
17333: PUSH
17334: LD_INT 41
17336: ST_TO_ADDR
17337: GO 17359
17339: LD_INT 3
17341: DOUBLE
17342: EQUAL
17343: IFTRUE 17347
17345: GO 17358
17347: POP
// tech := tech_bazooka ; end ;
17348: LD_ADDR_VAR 0 5
17352: PUSH
17353: LD_INT 44
17355: ST_TO_ADDR
17356: GO 17359
17358: POP
// if Researched ( side , tech ) then
17359: LD_VAR 0 3
17363: PPUSH
17364: LD_VAR 0 5
17368: PPUSH
17369: CALL_OW 325
17373: IFFALSE 17400
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17375: LD_ADDR_VAR 0 2
17379: PUSH
17380: LD_INT 5
17382: PUSH
17383: LD_INT 8
17385: PUSH
17386: LD_INT 9
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: PUSH
17394: LD_VAR 0 4
17398: ARRAY
17399: ST_TO_ADDR
// end ;
17400: LD_VAR 0 2
17404: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17405: LD_INT 0
17407: PPUSH
17408: PPUSH
17409: PPUSH
// if not mines then
17410: LD_VAR 0 2
17414: NOT
17415: IFFALSE 17419
// exit ;
17417: GO 17563
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17419: LD_ADDR_VAR 0 5
17423: PUSH
17424: LD_INT 81
17426: PUSH
17427: LD_VAR 0 1
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 3
17438: PUSH
17439: LD_INT 21
17441: PUSH
17442: LD_INT 3
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: ST_TO_ADDR
// for i in mines do
17462: LD_ADDR_VAR 0 4
17466: PUSH
17467: LD_VAR 0 2
17471: PUSH
17472: FOR_IN
17473: IFFALSE 17561
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17475: LD_VAR 0 4
17479: PUSH
17480: LD_INT 1
17482: ARRAY
17483: PPUSH
17484: LD_VAR 0 4
17488: PUSH
17489: LD_INT 2
17491: ARRAY
17492: PPUSH
17493: CALL_OW 458
17497: NOT
17498: IFFALSE 17502
// continue ;
17500: GO 17472
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17502: LD_VAR 0 4
17506: PUSH
17507: LD_INT 1
17509: ARRAY
17510: PPUSH
17511: LD_VAR 0 4
17515: PUSH
17516: LD_INT 2
17518: ARRAY
17519: PPUSH
17520: CALL_OW 428
17524: PUSH
17525: LD_VAR 0 5
17529: IN
17530: IFFALSE 17559
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17532: LD_VAR 0 4
17536: PUSH
17537: LD_INT 1
17539: ARRAY
17540: PPUSH
17541: LD_VAR 0 4
17545: PUSH
17546: LD_INT 2
17548: ARRAY
17549: PPUSH
17550: LD_VAR 0 1
17554: PPUSH
17555: CALL_OW 456
// end ;
17559: GO 17472
17561: POP
17562: POP
// end ;
17563: LD_VAR 0 3
17567: RET
// export function Count ( array ) ; begin
17568: LD_INT 0
17570: PPUSH
// result := array + 0 ;
17571: LD_ADDR_VAR 0 2
17575: PUSH
17576: LD_VAR 0 1
17580: PUSH
17581: LD_INT 0
17583: PLUS
17584: ST_TO_ADDR
// end ;
17585: LD_VAR 0 2
17589: RET
// export function IsEmpty ( building ) ; begin
17590: LD_INT 0
17592: PPUSH
// if not building then
17593: LD_VAR 0 1
17597: NOT
17598: IFFALSE 17602
// exit ;
17600: GO 17645
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17602: LD_ADDR_VAR 0 2
17606: PUSH
17607: LD_VAR 0 1
17611: PUSH
17612: LD_INT 22
17614: PUSH
17615: LD_VAR 0 1
17619: PPUSH
17620: CALL_OW 255
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 58
17631: PUSH
17632: EMPTY
17633: LIST
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PPUSH
17639: CALL_OW 69
17643: IN
17644: ST_TO_ADDR
// end ;
17645: LD_VAR 0 2
17649: RET
// export function IsNotFull ( building ) ; var places ; begin
17650: LD_INT 0
17652: PPUSH
17653: PPUSH
// if not building then
17654: LD_VAR 0 1
17658: NOT
17659: IFFALSE 17663
// exit ;
17661: GO 17691
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17663: LD_ADDR_VAR 0 2
17667: PUSH
17668: LD_VAR 0 1
17672: PPUSH
17673: LD_INT 3
17675: PUSH
17676: LD_INT 62
17678: PUSH
17679: EMPTY
17680: LIST
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PPUSH
17686: CALL_OW 72
17690: ST_TO_ADDR
// end ;
17691: LD_VAR 0 2
17695: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17696: LD_INT 0
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
// tmp := [ ] ;
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: EMPTY
17708: ST_TO_ADDR
// list := [ ] ;
17709: LD_ADDR_VAR 0 5
17713: PUSH
17714: EMPTY
17715: ST_TO_ADDR
// for i = 16 to 25 do
17716: LD_ADDR_VAR 0 4
17720: PUSH
17721: DOUBLE
17722: LD_INT 16
17724: DEC
17725: ST_TO_ADDR
17726: LD_INT 25
17728: PUSH
17729: FOR_TO
17730: IFFALSE 17803
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17732: LD_ADDR_VAR 0 3
17736: PUSH
17737: LD_VAR 0 3
17741: PUSH
17742: LD_INT 22
17744: PUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 255
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 91
17761: PUSH
17762: LD_VAR 0 1
17766: PUSH
17767: LD_INT 6
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 30
17777: PUSH
17778: LD_VAR 0 4
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: ADD
17800: ST_TO_ADDR
17801: GO 17729
17803: POP
17804: POP
// for i = 1 to tmp do
17805: LD_ADDR_VAR 0 4
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_VAR 0 3
17819: PUSH
17820: FOR_TO
17821: IFFALSE 17909
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17823: LD_ADDR_VAR 0 5
17827: PUSH
17828: LD_VAR 0 5
17832: PUSH
17833: LD_VAR 0 3
17837: PUSH
17838: LD_VAR 0 4
17842: ARRAY
17843: PPUSH
17844: CALL_OW 266
17848: PUSH
17849: LD_VAR 0 3
17853: PUSH
17854: LD_VAR 0 4
17858: ARRAY
17859: PPUSH
17860: CALL_OW 250
17864: PUSH
17865: LD_VAR 0 3
17869: PUSH
17870: LD_VAR 0 4
17874: ARRAY
17875: PPUSH
17876: CALL_OW 251
17880: PUSH
17881: LD_VAR 0 3
17885: PUSH
17886: LD_VAR 0 4
17890: ARRAY
17891: PPUSH
17892: CALL_OW 254
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: EMPTY
17904: LIST
17905: ADD
17906: ST_TO_ADDR
17907: GO 17820
17909: POP
17910: POP
// result := list ;
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: LD_VAR 0 5
17920: ST_TO_ADDR
// end ;
17921: LD_VAR 0 2
17925: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
17932: PPUSH
17933: PPUSH
17934: PPUSH
// if not factory then
17935: LD_VAR 0 1
17939: NOT
17940: IFFALSE 17944
// exit ;
17942: GO 18537
// if control = control_apeman then
17944: LD_VAR 0 4
17948: PUSH
17949: LD_INT 5
17951: EQUAL
17952: IFFALSE 18061
// begin tmp := UnitsInside ( factory ) ;
17954: LD_ADDR_VAR 0 8
17958: PUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 313
17968: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17969: LD_VAR 0 8
17973: PPUSH
17974: LD_INT 25
17976: PUSH
17977: LD_INT 12
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PPUSH
17984: CALL_OW 72
17988: NOT
17989: IFFALSE 17999
// control := control_manual ;
17991: LD_ADDR_VAR 0 4
17995: PUSH
17996: LD_INT 1
17998: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17999: LD_ADDR_VAR 0 8
18003: PUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL 17696 0 1
18013: ST_TO_ADDR
// if tmp then
18014: LD_VAR 0 8
18018: IFFALSE 18061
// begin for i in tmp do
18020: LD_ADDR_VAR 0 7
18024: PUSH
18025: LD_VAR 0 8
18029: PUSH
18030: FOR_IN
18031: IFFALSE 18059
// if i [ 1 ] = b_ext_radio then
18033: LD_VAR 0 7
18037: PUSH
18038: LD_INT 1
18040: ARRAY
18041: PUSH
18042: LD_INT 22
18044: EQUAL
18045: IFFALSE 18057
// begin control := control_remote ;
18047: LD_ADDR_VAR 0 4
18051: PUSH
18052: LD_INT 2
18054: ST_TO_ADDR
// break ;
18055: GO 18059
// end ;
18057: GO 18030
18059: POP
18060: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18061: LD_VAR 0 1
18065: PPUSH
18066: LD_VAR 0 2
18070: PPUSH
18071: LD_VAR 0 3
18075: PPUSH
18076: LD_VAR 0 4
18080: PPUSH
18081: LD_VAR 0 5
18085: PPUSH
18086: CALL_OW 448
18090: IFFALSE 18125
// begin result := [ chassis , engine , control , weapon ] ;
18092: LD_ADDR_VAR 0 6
18096: PUSH
18097: LD_VAR 0 2
18101: PUSH
18102: LD_VAR 0 3
18106: PUSH
18107: LD_VAR 0 4
18111: PUSH
18112: LD_VAR 0 5
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: ST_TO_ADDR
// exit ;
18123: GO 18537
// end ; _chassis := AvailableChassisList ( factory ) ;
18125: LD_ADDR_VAR 0 9
18129: PUSH
18130: LD_VAR 0 1
18134: PPUSH
18135: CALL_OW 475
18139: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18140: LD_ADDR_VAR 0 11
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 476
18154: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18155: LD_ADDR_VAR 0 12
18159: PUSH
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 477
18169: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18170: LD_ADDR_VAR 0 10
18174: PUSH
18175: LD_VAR 0 1
18179: PPUSH
18180: CALL_OW 478
18184: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18185: LD_VAR 0 9
18189: NOT
18190: PUSH
18191: LD_VAR 0 11
18195: NOT
18196: OR
18197: PUSH
18198: LD_VAR 0 12
18202: NOT
18203: OR
18204: PUSH
18205: LD_VAR 0 10
18209: NOT
18210: OR
18211: IFFALSE 18246
// begin result := [ chassis , engine , control , weapon ] ;
18213: LD_ADDR_VAR 0 6
18217: PUSH
18218: LD_VAR 0 2
18222: PUSH
18223: LD_VAR 0 3
18227: PUSH
18228: LD_VAR 0 4
18232: PUSH
18233: LD_VAR 0 5
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: ST_TO_ADDR
// exit ;
18244: GO 18537
// end ; if not chassis in _chassis then
18246: LD_VAR 0 2
18250: PUSH
18251: LD_VAR 0 9
18255: IN
18256: NOT
18257: IFFALSE 18283
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18259: LD_ADDR_VAR 0 2
18263: PUSH
18264: LD_VAR 0 9
18268: PUSH
18269: LD_INT 1
18271: PPUSH
18272: LD_VAR 0 9
18276: PPUSH
18277: CALL_OW 12
18281: ARRAY
18282: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18283: LD_VAR 0 2
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: CALL 18542 0 2
18297: NOT
18298: IFFALSE 18357
// repeat engine := _engine [ 1 ] ;
18300: LD_ADDR_VAR 0 3
18304: PUSH
18305: LD_VAR 0 11
18309: PUSH
18310: LD_INT 1
18312: ARRAY
18313: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18314: LD_ADDR_VAR 0 11
18318: PUSH
18319: LD_VAR 0 11
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 3
18331: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18332: LD_VAR 0 2
18336: PPUSH
18337: LD_VAR 0 3
18341: PPUSH
18342: CALL 18542 0 2
18346: PUSH
18347: LD_VAR 0 11
18351: PUSH
18352: EMPTY
18353: EQUAL
18354: OR
18355: IFFALSE 18300
// if not control in _control then
18357: LD_VAR 0 4
18361: PUSH
18362: LD_VAR 0 12
18366: IN
18367: NOT
18368: IFFALSE 18394
// control := _control [ rand ( 1 , _control ) ] ;
18370: LD_ADDR_VAR 0 4
18374: PUSH
18375: LD_VAR 0 12
18379: PUSH
18380: LD_INT 1
18382: PPUSH
18383: LD_VAR 0 12
18387: PPUSH
18388: CALL_OW 12
18392: ARRAY
18393: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18394: LD_VAR 0 2
18398: PPUSH
18399: LD_VAR 0 5
18403: PPUSH
18404: CALL 18762 0 2
18408: NOT
18409: IFFALSE 18468
// repeat weapon := _weapon [ 1 ] ;
18411: LD_ADDR_VAR 0 5
18415: PUSH
18416: LD_VAR 0 10
18420: PUSH
18421: LD_INT 1
18423: ARRAY
18424: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18425: LD_ADDR_VAR 0 10
18429: PUSH
18430: LD_VAR 0 10
18434: PPUSH
18435: LD_INT 1
18437: PPUSH
18438: CALL_OW 3
18442: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18443: LD_VAR 0 2
18447: PPUSH
18448: LD_VAR 0 5
18452: PPUSH
18453: CALL 18762 0 2
18457: PUSH
18458: LD_VAR 0 10
18462: PUSH
18463: EMPTY
18464: EQUAL
18465: OR
18466: IFFALSE 18411
// result := [ ] ;
18468: LD_ADDR_VAR 0 6
18472: PUSH
18473: EMPTY
18474: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18475: LD_VAR 0 1
18479: PPUSH
18480: LD_VAR 0 2
18484: PPUSH
18485: LD_VAR 0 3
18489: PPUSH
18490: LD_VAR 0 4
18494: PPUSH
18495: LD_VAR 0 5
18499: PPUSH
18500: CALL_OW 448
18504: IFFALSE 18537
// result := [ chassis , engine , control , weapon ] ;
18506: LD_ADDR_VAR 0 6
18510: PUSH
18511: LD_VAR 0 2
18515: PUSH
18516: LD_VAR 0 3
18520: PUSH
18521: LD_VAR 0 4
18525: PUSH
18526: LD_VAR 0 5
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: ST_TO_ADDR
// end ;
18537: LD_VAR 0 6
18541: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18542: LD_INT 0
18544: PPUSH
// if not chassis or not engine then
18545: LD_VAR 0 1
18549: NOT
18550: PUSH
18551: LD_VAR 0 2
18555: NOT
18556: OR
18557: IFFALSE 18561
// exit ;
18559: GO 18757
// case engine of engine_solar :
18561: LD_VAR 0 2
18565: PUSH
18566: LD_INT 2
18568: DOUBLE
18569: EQUAL
18570: IFTRUE 18574
18572: GO 18612
18574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18575: LD_ADDR_VAR 0 3
18579: PUSH
18580: LD_INT 11
18582: PUSH
18583: LD_INT 12
18585: PUSH
18586: LD_INT 13
18588: PUSH
18589: LD_INT 14
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: LD_INT 3
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: ST_TO_ADDR
18610: GO 18741
18612: LD_INT 1
18614: DOUBLE
18615: EQUAL
18616: IFTRUE 18620
18618: GO 18682
18620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18621: LD_ADDR_VAR 0 3
18625: PUSH
18626: LD_INT 11
18628: PUSH
18629: LD_INT 12
18631: PUSH
18632: LD_INT 13
18634: PUSH
18635: LD_INT 14
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: LD_INT 3
18646: PUSH
18647: LD_INT 4
18649: PUSH
18650: LD_INT 5
18652: PUSH
18653: LD_INT 21
18655: PUSH
18656: LD_INT 23
18658: PUSH
18659: LD_INT 22
18661: PUSH
18662: LD_INT 24
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: ST_TO_ADDR
18680: GO 18741
18682: LD_INT 3
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18740
18690: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18691: LD_ADDR_VAR 0 3
18695: PUSH
18696: LD_INT 13
18698: PUSH
18699: LD_INT 14
18701: PUSH
18702: LD_INT 2
18704: PUSH
18705: LD_INT 3
18707: PUSH
18708: LD_INT 4
18710: PUSH
18711: LD_INT 5
18713: PUSH
18714: LD_INT 21
18716: PUSH
18717: LD_INT 22
18719: PUSH
18720: LD_INT 23
18722: PUSH
18723: LD_INT 24
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: ST_TO_ADDR
18738: GO 18741
18740: POP
// result := ( chassis in result ) ;
18741: LD_ADDR_VAR 0 3
18745: PUSH
18746: LD_VAR 0 1
18750: PUSH
18751: LD_VAR 0 3
18755: IN
18756: ST_TO_ADDR
// end ;
18757: LD_VAR 0 3
18761: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18762: LD_INT 0
18764: PPUSH
// if not chassis or not weapon then
18765: LD_VAR 0 1
18769: NOT
18770: PUSH
18771: LD_VAR 0 2
18775: NOT
18776: OR
18777: IFFALSE 18781
// exit ;
18779: GO 19841
// case weapon of us_machine_gun :
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 2
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18824
18794: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18795: LD_ADDR_VAR 0 3
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: LD_INT 3
18808: PUSH
18809: LD_INT 4
18811: PUSH
18812: LD_INT 5
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: ST_TO_ADDR
18822: GO 19825
18824: LD_INT 3
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18862
18832: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18833: LD_ADDR_VAR 0 3
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 3
18846: PUSH
18847: LD_INT 4
18849: PUSH
18850: LD_INT 5
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: ST_TO_ADDR
18860: GO 19825
18862: LD_INT 11
18864: DOUBLE
18865: EQUAL
18866: IFTRUE 18870
18868: GO 18900
18870: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18871: LD_ADDR_VAR 0 3
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: LD_INT 3
18884: PUSH
18885: LD_INT 4
18887: PUSH
18888: LD_INT 5
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: ST_TO_ADDR
18898: GO 19825
18900: LD_INT 4
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18934
18908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18909: LD_ADDR_VAR 0 3
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: LD_INT 3
18919: PUSH
18920: LD_INT 4
18922: PUSH
18923: LD_INT 5
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: ST_TO_ADDR
18932: GO 19825
18934: LD_INT 5
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18968
18942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18943: LD_ADDR_VAR 0 3
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: LD_INT 4
18956: PUSH
18957: LD_INT 5
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: ST_TO_ADDR
18966: GO 19825
18968: LD_INT 9
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 19002
18976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 3
18987: PUSH
18988: LD_INT 4
18990: PUSH
18991: LD_INT 5
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: ST_TO_ADDR
19000: GO 19825
19002: LD_INT 7
19004: DOUBLE
19005: EQUAL
19006: IFTRUE 19010
19008: GO 19036
19010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19011: LD_ADDR_VAR 0 3
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: LD_INT 4
19024: PUSH
19025: LD_INT 5
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: ST_TO_ADDR
19034: GO 19825
19036: LD_INT 12
19038: DOUBLE
19039: EQUAL
19040: IFTRUE 19044
19042: GO 19070
19044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19045: LD_ADDR_VAR 0 3
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 4
19058: PUSH
19059: LD_INT 5
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: ST_TO_ADDR
19068: GO 19825
19070: LD_INT 13
19072: DOUBLE
19073: EQUAL
19074: IFTRUE 19078
19076: GO 19104
19078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19079: LD_ADDR_VAR 0 3
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: LD_INT 4
19092: PUSH
19093: LD_INT 5
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: ST_TO_ADDR
19102: GO 19825
19104: LD_INT 14
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19130
19112: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19113: LD_ADDR_VAR 0 3
19117: PUSH
19118: LD_INT 4
19120: PUSH
19121: LD_INT 5
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: ST_TO_ADDR
19128: GO 19825
19130: LD_INT 6
19132: DOUBLE
19133: EQUAL
19134: IFTRUE 19138
19136: GO 19156
19138: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19139: LD_ADDR_VAR 0 3
19143: PUSH
19144: LD_INT 4
19146: PUSH
19147: LD_INT 5
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: ST_TO_ADDR
19154: GO 19825
19156: LD_INT 10
19158: DOUBLE
19159: EQUAL
19160: IFTRUE 19164
19162: GO 19182
19164: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: LD_INT 4
19172: PUSH
19173: LD_INT 5
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: ST_TO_ADDR
19180: GO 19825
19182: LD_INT 22
19184: DOUBLE
19185: EQUAL
19186: IFTRUE 19190
19188: GO 19216
19190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19191: LD_ADDR_VAR 0 3
19195: PUSH
19196: LD_INT 11
19198: PUSH
19199: LD_INT 12
19201: PUSH
19202: LD_INT 13
19204: PUSH
19205: LD_INT 14
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: ST_TO_ADDR
19214: GO 19825
19216: LD_INT 23
19218: DOUBLE
19219: EQUAL
19220: IFTRUE 19224
19222: GO 19250
19224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: LD_INT 11
19232: PUSH
19233: LD_INT 12
19235: PUSH
19236: LD_INT 13
19238: PUSH
19239: LD_INT 14
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: ST_TO_ADDR
19248: GO 19825
19250: LD_INT 24
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19284
19258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19259: LD_ADDR_VAR 0 3
19263: PUSH
19264: LD_INT 11
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: LD_INT 13
19272: PUSH
19273: LD_INT 14
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: ST_TO_ADDR
19282: GO 19825
19284: LD_INT 30
19286: DOUBLE
19287: EQUAL
19288: IFTRUE 19292
19290: GO 19318
19292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_INT 11
19300: PUSH
19301: LD_INT 12
19303: PUSH
19304: LD_INT 13
19306: PUSH
19307: LD_INT 14
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: ST_TO_ADDR
19316: GO 19825
19318: LD_INT 25
19320: DOUBLE
19321: EQUAL
19322: IFTRUE 19326
19324: GO 19344
19326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19327: LD_ADDR_VAR 0 3
19331: PUSH
19332: LD_INT 13
19334: PUSH
19335: LD_INT 14
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: ST_TO_ADDR
19342: GO 19825
19344: LD_INT 27
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19370
19352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19353: LD_ADDR_VAR 0 3
19357: PUSH
19358: LD_INT 13
19360: PUSH
19361: LD_INT 14
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: ST_TO_ADDR
19368: GO 19825
19370: LD_INT 92
19372: DOUBLE
19373: EQUAL
19374: IFTRUE 19378
19376: GO 19404
19378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 11
19386: PUSH
19387: LD_INT 12
19389: PUSH
19390: LD_INT 13
19392: PUSH
19393: LD_INT 14
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: ST_TO_ADDR
19402: GO 19825
19404: LD_INT 28
19406: DOUBLE
19407: EQUAL
19408: IFTRUE 19412
19410: GO 19430
19412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_INT 13
19420: PUSH
19421: LD_INT 14
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: ST_TO_ADDR
19428: GO 19825
19430: LD_INT 29
19432: DOUBLE
19433: EQUAL
19434: IFTRUE 19438
19436: GO 19456
19438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19439: LD_ADDR_VAR 0 3
19443: PUSH
19444: LD_INT 13
19446: PUSH
19447: LD_INT 14
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 19825
19456: LD_INT 31
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19482
19464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19465: LD_ADDR_VAR 0 3
19469: PUSH
19470: LD_INT 13
19472: PUSH
19473: LD_INT 14
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: ST_TO_ADDR
19480: GO 19825
19482: LD_INT 26
19484: DOUBLE
19485: EQUAL
19486: IFTRUE 19490
19488: GO 19508
19490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_INT 13
19498: PUSH
19499: LD_INT 14
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: ST_TO_ADDR
19506: GO 19825
19508: LD_INT 42
19510: DOUBLE
19511: EQUAL
19512: IFTRUE 19516
19514: GO 19542
19516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19517: LD_ADDR_VAR 0 3
19521: PUSH
19522: LD_INT 21
19524: PUSH
19525: LD_INT 22
19527: PUSH
19528: LD_INT 23
19530: PUSH
19531: LD_INT 24
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: ST_TO_ADDR
19540: GO 19825
19542: LD_INT 43
19544: DOUBLE
19545: EQUAL
19546: IFTRUE 19550
19548: GO 19576
19550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19551: LD_ADDR_VAR 0 3
19555: PUSH
19556: LD_INT 21
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 23
19564: PUSH
19565: LD_INT 24
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 19825
19576: LD_INT 44
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19610
19584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: LD_INT 21
19592: PUSH
19593: LD_INT 22
19595: PUSH
19596: LD_INT 23
19598: PUSH
19599: LD_INT 24
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: ST_TO_ADDR
19608: GO 19825
19610: LD_INT 45
19612: DOUBLE
19613: EQUAL
19614: IFTRUE 19618
19616: GO 19644
19618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19619: LD_ADDR_VAR 0 3
19623: PUSH
19624: LD_INT 21
19626: PUSH
19627: LD_INT 22
19629: PUSH
19630: LD_INT 23
19632: PUSH
19633: LD_INT 24
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: ST_TO_ADDR
19642: GO 19825
19644: LD_INT 49
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19678
19652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_INT 21
19660: PUSH
19661: LD_INT 22
19663: PUSH
19664: LD_INT 23
19666: PUSH
19667: LD_INT 24
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: ST_TO_ADDR
19676: GO 19825
19678: LD_INT 51
19680: DOUBLE
19681: EQUAL
19682: IFTRUE 19686
19684: GO 19712
19686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: LD_INT 21
19694: PUSH
19695: LD_INT 22
19697: PUSH
19698: LD_INT 23
19700: PUSH
19701: LD_INT 24
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 19825
19712: LD_INT 52
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19746
19720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 21
19728: PUSH
19729: LD_INT 22
19731: PUSH
19732: LD_INT 23
19734: PUSH
19735: LD_INT 24
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: ST_TO_ADDR
19744: GO 19825
19746: LD_INT 53
19748: DOUBLE
19749: EQUAL
19750: IFTRUE 19754
19752: GO 19772
19754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: LD_INT 23
19762: PUSH
19763: LD_INT 24
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: ST_TO_ADDR
19770: GO 19825
19772: LD_INT 46
19774: DOUBLE
19775: EQUAL
19776: IFTRUE 19780
19778: GO 19798
19780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: LD_INT 23
19788: PUSH
19789: LD_INT 24
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 19825
19798: LD_INT 47
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19824
19806: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19807: LD_ADDR_VAR 0 3
19811: PUSH
19812: LD_INT 23
19814: PUSH
19815: LD_INT 24
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: ST_TO_ADDR
19822: GO 19825
19824: POP
// result := ( chassis in result ) ;
19825: LD_ADDR_VAR 0 3
19829: PUSH
19830: LD_VAR 0 1
19834: PUSH
19835: LD_VAR 0 3
19839: IN
19840: ST_TO_ADDR
// end ;
19841: LD_VAR 0 3
19845: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19846: LD_INT 0
19848: PPUSH
19849: PPUSH
19850: PPUSH
19851: PPUSH
19852: PPUSH
19853: PPUSH
19854: PPUSH
// result := array ;
19855: LD_ADDR_VAR 0 5
19859: PUSH
19860: LD_VAR 0 1
19864: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19865: LD_VAR 0 1
19869: NOT
19870: PUSH
19871: LD_VAR 0 2
19875: NOT
19876: OR
19877: PUSH
19878: LD_VAR 0 3
19882: NOT
19883: OR
19884: PUSH
19885: LD_VAR 0 2
19889: PUSH
19890: LD_VAR 0 1
19894: GREATER
19895: OR
19896: PUSH
19897: LD_VAR 0 3
19901: PUSH
19902: LD_VAR 0 1
19906: GREATER
19907: OR
19908: IFFALSE 19912
// exit ;
19910: GO 20208
// if direction then
19912: LD_VAR 0 4
19916: IFFALSE 19980
// begin d := 1 ;
19918: LD_ADDR_VAR 0 9
19922: PUSH
19923: LD_INT 1
19925: ST_TO_ADDR
// if i_from > i_to then
19926: LD_VAR 0 2
19930: PUSH
19931: LD_VAR 0 3
19935: GREATER
19936: IFFALSE 19962
// length := ( array - i_from ) + i_to else
19938: LD_ADDR_VAR 0 11
19942: PUSH
19943: LD_VAR 0 1
19947: PUSH
19948: LD_VAR 0 2
19952: MINUS
19953: PUSH
19954: LD_VAR 0 3
19958: PLUS
19959: ST_TO_ADDR
19960: GO 19978
// length := i_to - i_from ;
19962: LD_ADDR_VAR 0 11
19966: PUSH
19967: LD_VAR 0 3
19971: PUSH
19972: LD_VAR 0 2
19976: MINUS
19977: ST_TO_ADDR
// end else
19978: GO 20041
// begin d := - 1 ;
19980: LD_ADDR_VAR 0 9
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: ST_TO_ADDR
// if i_from > i_to then
19989: LD_VAR 0 2
19993: PUSH
19994: LD_VAR 0 3
19998: GREATER
19999: IFFALSE 20019
// length := i_from - i_to else
20001: LD_ADDR_VAR 0 11
20005: PUSH
20006: LD_VAR 0 2
20010: PUSH
20011: LD_VAR 0 3
20015: MINUS
20016: ST_TO_ADDR
20017: GO 20041
// length := ( array - i_to ) + i_from ;
20019: LD_ADDR_VAR 0 11
20023: PUSH
20024: LD_VAR 0 1
20028: PUSH
20029: LD_VAR 0 3
20033: MINUS
20034: PUSH
20035: LD_VAR 0 2
20039: PLUS
20040: ST_TO_ADDR
// end ; if not length then
20041: LD_VAR 0 11
20045: NOT
20046: IFFALSE 20050
// exit ;
20048: GO 20208
// tmp := array ;
20050: LD_ADDR_VAR 0 10
20054: PUSH
20055: LD_VAR 0 1
20059: ST_TO_ADDR
// for i = 1 to length do
20060: LD_ADDR_VAR 0 6
20064: PUSH
20065: DOUBLE
20066: LD_INT 1
20068: DEC
20069: ST_TO_ADDR
20070: LD_VAR 0 11
20074: PUSH
20075: FOR_TO
20076: IFFALSE 20196
// begin for j = 1 to array do
20078: LD_ADDR_VAR 0 7
20082: PUSH
20083: DOUBLE
20084: LD_INT 1
20086: DEC
20087: ST_TO_ADDR
20088: LD_VAR 0 1
20092: PUSH
20093: FOR_TO
20094: IFFALSE 20182
// begin k := j + d ;
20096: LD_ADDR_VAR 0 8
20100: PUSH
20101: LD_VAR 0 7
20105: PUSH
20106: LD_VAR 0 9
20110: PLUS
20111: ST_TO_ADDR
// if k > array then
20112: LD_VAR 0 8
20116: PUSH
20117: LD_VAR 0 1
20121: GREATER
20122: IFFALSE 20132
// k := 1 ;
20124: LD_ADDR_VAR 0 8
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// if not k then
20132: LD_VAR 0 8
20136: NOT
20137: IFFALSE 20149
// k := array ;
20139: LD_ADDR_VAR 0 8
20143: PUSH
20144: LD_VAR 0 1
20148: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20149: LD_ADDR_VAR 0 10
20153: PUSH
20154: LD_VAR 0 10
20158: PPUSH
20159: LD_VAR 0 8
20163: PPUSH
20164: LD_VAR 0 1
20168: PUSH
20169: LD_VAR 0 7
20173: ARRAY
20174: PPUSH
20175: CALL_OW 1
20179: ST_TO_ADDR
// end ;
20180: GO 20093
20182: POP
20183: POP
// array := tmp ;
20184: LD_ADDR_VAR 0 1
20188: PUSH
20189: LD_VAR 0 10
20193: ST_TO_ADDR
// end ;
20194: GO 20075
20196: POP
20197: POP
// result := array ;
20198: LD_ADDR_VAR 0 5
20202: PUSH
20203: LD_VAR 0 1
20207: ST_TO_ADDR
// end ;
20208: LD_VAR 0 5
20212: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20213: LD_INT 0
20215: PPUSH
20216: PPUSH
// result := 0 ;
20217: LD_ADDR_VAR 0 3
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// if not array or not value in array then
20225: LD_VAR 0 1
20229: NOT
20230: PUSH
20231: LD_VAR 0 2
20235: PUSH
20236: LD_VAR 0 1
20240: IN
20241: NOT
20242: OR
20243: IFFALSE 20247
// exit ;
20245: GO 20301
// for i = 1 to array do
20247: LD_ADDR_VAR 0 4
20251: PUSH
20252: DOUBLE
20253: LD_INT 1
20255: DEC
20256: ST_TO_ADDR
20257: LD_VAR 0 1
20261: PUSH
20262: FOR_TO
20263: IFFALSE 20299
// if value = array [ i ] then
20265: LD_VAR 0 2
20269: PUSH
20270: LD_VAR 0 1
20274: PUSH
20275: LD_VAR 0 4
20279: ARRAY
20280: EQUAL
20281: IFFALSE 20297
// begin result := i ;
20283: LD_ADDR_VAR 0 3
20287: PUSH
20288: LD_VAR 0 4
20292: ST_TO_ADDR
// exit ;
20293: POP
20294: POP
20295: GO 20301
// end ;
20297: GO 20262
20299: POP
20300: POP
// end ;
20301: LD_VAR 0 3
20305: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20306: LD_INT 0
20308: PPUSH
// vc_chassis := chassis ;
20309: LD_ADDR_OWVAR 37
20313: PUSH
20314: LD_VAR 0 1
20318: ST_TO_ADDR
// vc_engine := engine ;
20319: LD_ADDR_OWVAR 39
20323: PUSH
20324: LD_VAR 0 2
20328: ST_TO_ADDR
// vc_control := control ;
20329: LD_ADDR_OWVAR 38
20333: PUSH
20334: LD_VAR 0 3
20338: ST_TO_ADDR
// vc_weapon := weapon ;
20339: LD_ADDR_OWVAR 40
20343: PUSH
20344: LD_VAR 0 4
20348: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20349: LD_ADDR_OWVAR 41
20353: PUSH
20354: LD_VAR 0 5
20358: ST_TO_ADDR
// end ;
20359: LD_VAR 0 6
20363: RET
// export function WantPlant ( unit ) ; var task ; begin
20364: LD_INT 0
20366: PPUSH
20367: PPUSH
// result := false ;
20368: LD_ADDR_VAR 0 2
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20376: LD_ADDR_VAR 0 3
20380: PUSH
20381: LD_VAR 0 1
20385: PPUSH
20386: CALL_OW 437
20390: ST_TO_ADDR
// if task then
20391: LD_VAR 0 3
20395: IFFALSE 20423
// if task [ 1 ] [ 1 ] = p then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 1
20404: ARRAY
20405: PUSH
20406: LD_INT 1
20408: ARRAY
20409: PUSH
20410: LD_STRING p
20412: EQUAL
20413: IFFALSE 20423
// result := true ;
20415: LD_ADDR_VAR 0 2
20419: PUSH
20420: LD_INT 1
20422: ST_TO_ADDR
// end ;
20423: LD_VAR 0 2
20427: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20428: LD_INT 0
20430: PPUSH
20431: PPUSH
20432: PPUSH
20433: PPUSH
// if pos < 1 then
20434: LD_VAR 0 2
20438: PUSH
20439: LD_INT 1
20441: LESS
20442: IFFALSE 20446
// exit ;
20444: GO 20749
// if pos = 1 then
20446: LD_VAR 0 2
20450: PUSH
20451: LD_INT 1
20453: EQUAL
20454: IFFALSE 20487
// result := Replace ( arr , pos [ 1 ] , value ) else
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_VAR 0 1
20465: PPUSH
20466: LD_VAR 0 2
20470: PUSH
20471: LD_INT 1
20473: ARRAY
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 1
20484: ST_TO_ADDR
20485: GO 20749
// begin tmp := arr ;
20487: LD_ADDR_VAR 0 6
20491: PUSH
20492: LD_VAR 0 1
20496: ST_TO_ADDR
// s_arr := [ tmp ] ;
20497: LD_ADDR_VAR 0 7
20501: PUSH
20502: LD_VAR 0 6
20506: PUSH
20507: EMPTY
20508: LIST
20509: ST_TO_ADDR
// for i = 1 to pos - 1 do
20510: LD_ADDR_VAR 0 5
20514: PUSH
20515: DOUBLE
20516: LD_INT 1
20518: DEC
20519: ST_TO_ADDR
20520: LD_VAR 0 2
20524: PUSH
20525: LD_INT 1
20527: MINUS
20528: PUSH
20529: FOR_TO
20530: IFFALSE 20575
// begin tmp := tmp [ pos [ i ] ] ;
20532: LD_ADDR_VAR 0 6
20536: PUSH
20537: LD_VAR 0 6
20541: PUSH
20542: LD_VAR 0 2
20546: PUSH
20547: LD_VAR 0 5
20551: ARRAY
20552: ARRAY
20553: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20554: LD_ADDR_VAR 0 7
20558: PUSH
20559: LD_VAR 0 7
20563: PUSH
20564: LD_VAR 0 6
20568: PUSH
20569: EMPTY
20570: LIST
20571: ADD
20572: ST_TO_ADDR
// end ;
20573: GO 20529
20575: POP
20576: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20577: LD_ADDR_VAR 0 6
20581: PUSH
20582: LD_VAR 0 6
20586: PPUSH
20587: LD_VAR 0 2
20591: PUSH
20592: LD_VAR 0 2
20596: ARRAY
20597: PPUSH
20598: LD_VAR 0 3
20602: PPUSH
20603: CALL_OW 1
20607: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20608: LD_ADDR_VAR 0 7
20612: PUSH
20613: LD_VAR 0 7
20617: PPUSH
20618: LD_VAR 0 7
20622: PPUSH
20623: LD_VAR 0 6
20627: PPUSH
20628: CALL_OW 1
20632: ST_TO_ADDR
// for i = s_arr downto 2 do
20633: LD_ADDR_VAR 0 5
20637: PUSH
20638: DOUBLE
20639: LD_VAR 0 7
20643: INC
20644: ST_TO_ADDR
20645: LD_INT 2
20647: PUSH
20648: FOR_DOWNTO
20649: IFFALSE 20733
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20651: LD_ADDR_VAR 0 6
20655: PUSH
20656: LD_VAR 0 7
20660: PUSH
20661: LD_VAR 0 5
20665: PUSH
20666: LD_INT 1
20668: MINUS
20669: ARRAY
20670: PPUSH
20671: LD_VAR 0 2
20675: PUSH
20676: LD_VAR 0 5
20680: PUSH
20681: LD_INT 1
20683: MINUS
20684: ARRAY
20685: PPUSH
20686: LD_VAR 0 7
20690: PUSH
20691: LD_VAR 0 5
20695: ARRAY
20696: PPUSH
20697: CALL_OW 1
20701: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20702: LD_ADDR_VAR 0 7
20706: PUSH
20707: LD_VAR 0 7
20711: PPUSH
20712: LD_VAR 0 5
20716: PUSH
20717: LD_INT 1
20719: MINUS
20720: PPUSH
20721: LD_VAR 0 6
20725: PPUSH
20726: CALL_OW 1
20730: ST_TO_ADDR
// end ;
20731: GO 20648
20733: POP
20734: POP
// result := s_arr [ 1 ] ;
20735: LD_ADDR_VAR 0 4
20739: PUSH
20740: LD_VAR 0 7
20744: PUSH
20745: LD_INT 1
20747: ARRAY
20748: ST_TO_ADDR
// end ; end ;
20749: LD_VAR 0 4
20753: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20754: LD_INT 0
20756: PPUSH
20757: PPUSH
// if not list then
20758: LD_VAR 0 1
20762: NOT
20763: IFFALSE 20767
// exit ;
20765: GO 20858
// i := list [ pos1 ] ;
20767: LD_ADDR_VAR 0 5
20771: PUSH
20772: LD_VAR 0 1
20776: PUSH
20777: LD_VAR 0 2
20781: ARRAY
20782: ST_TO_ADDR
// if not i then
20783: LD_VAR 0 5
20787: NOT
20788: IFFALSE 20792
// exit ;
20790: GO 20858
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20792: LD_ADDR_VAR 0 1
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 1
20811: PUSH
20812: LD_VAR 0 3
20816: ARRAY
20817: PPUSH
20818: CALL_OW 1
20822: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20823: LD_ADDR_VAR 0 1
20827: PUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: LD_VAR 0 3
20837: PPUSH
20838: LD_VAR 0 5
20842: PPUSH
20843: CALL_OW 1
20847: ST_TO_ADDR
// result := list ;
20848: LD_ADDR_VAR 0 4
20852: PUSH
20853: LD_VAR 0 1
20857: ST_TO_ADDR
// end ;
20858: LD_VAR 0 4
20862: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20863: LD_INT 0
20865: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20866: LD_ADDR_VAR 0 5
20870: PUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 250
20880: PPUSH
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 251
20890: PPUSH
20891: LD_VAR 0 2
20895: PPUSH
20896: LD_VAR 0 3
20900: PPUSH
20901: LD_VAR 0 4
20905: PPUSH
20906: CALL 21284 0 5
20910: ST_TO_ADDR
// end ;
20911: LD_VAR 0 5
20915: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20916: LD_INT 0
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
// if not list or not unit then
20922: LD_VAR 0 2
20926: NOT
20927: PUSH
20928: LD_VAR 0 1
20932: NOT
20933: OR
20934: IFFALSE 20938
// exit ;
20936: GO 21279
// result := [ ] ;
20938: LD_ADDR_VAR 0 5
20942: PUSH
20943: EMPTY
20944: ST_TO_ADDR
// for i in list do
20945: LD_ADDR_VAR 0 6
20949: PUSH
20950: LD_VAR 0 2
20954: PUSH
20955: FOR_IN
20956: IFFALSE 21174
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20958: LD_ADDR_VAR 0 8
20962: PUSH
20963: LD_VAR 0 1
20967: PPUSH
20968: LD_VAR 0 6
20972: PUSH
20973: LD_INT 1
20975: ARRAY
20976: PPUSH
20977: LD_VAR 0 6
20981: PUSH
20982: LD_INT 2
20984: ARRAY
20985: PPUSH
20986: CALL_OW 297
20990: ST_TO_ADDR
// if not Count ( result ) then
20991: LD_VAR 0 5
20995: PPUSH
20996: CALL 17568 0 1
21000: NOT
21001: IFFALSE 21034
// begin result := Join ( result , [ i , tmp ] ) ;
21003: LD_ADDR_VAR 0 5
21007: PUSH
21008: LD_VAR 0 5
21012: PPUSH
21013: LD_VAR 0 6
21017: PUSH
21018: LD_VAR 0 8
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PPUSH
21027: CALL 53177 0 2
21031: ST_TO_ADDR
// continue ;
21032: GO 20955
// end ; if result [ result ] [ 2 ] <= tmp then
21034: LD_VAR 0 5
21038: PUSH
21039: LD_VAR 0 5
21043: ARRAY
21044: PUSH
21045: LD_INT 2
21047: ARRAY
21048: PUSH
21049: LD_VAR 0 8
21053: LESSEQUAL
21054: IFFALSE 21087
// result := Join ( result , [ i , tmp ] ) else
21056: LD_ADDR_VAR 0 5
21060: PUSH
21061: LD_VAR 0 5
21065: PPUSH
21066: LD_VAR 0 6
21070: PUSH
21071: LD_VAR 0 8
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PPUSH
21080: CALL 53177 0 2
21084: ST_TO_ADDR
21085: GO 21172
// begin for j := 1 to Count ( result ) do
21087: LD_ADDR_VAR 0 7
21091: PUSH
21092: DOUBLE
21093: LD_INT 1
21095: DEC
21096: ST_TO_ADDR
21097: LD_VAR 0 5
21101: PPUSH
21102: CALL 17568 0 1
21106: PUSH
21107: FOR_TO
21108: IFFALSE 21170
// begin if tmp < result [ j ] [ 2 ] then
21110: LD_VAR 0 8
21114: PUSH
21115: LD_VAR 0 5
21119: PUSH
21120: LD_VAR 0 7
21124: ARRAY
21125: PUSH
21126: LD_INT 2
21128: ARRAY
21129: LESS
21130: IFFALSE 21168
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21132: LD_ADDR_VAR 0 5
21136: PUSH
21137: LD_VAR 0 5
21141: PPUSH
21142: LD_VAR 0 7
21146: PPUSH
21147: LD_VAR 0 6
21151: PUSH
21152: LD_VAR 0 8
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 2
21165: ST_TO_ADDR
// break ;
21166: GO 21170
// end ; end ;
21168: GO 21107
21170: POP
21171: POP
// end ; end ;
21172: GO 20955
21174: POP
21175: POP
// if result and not asc then
21176: LD_VAR 0 5
21180: PUSH
21181: LD_VAR 0 3
21185: NOT
21186: AND
21187: IFFALSE 21204
// result := ReverseArray ( result ) ;
21189: LD_ADDR_VAR 0 5
21193: PUSH
21194: LD_VAR 0 5
21198: PPUSH
21199: CALL 48444 0 1
21203: ST_TO_ADDR
// tmp := [ ] ;
21204: LD_ADDR_VAR 0 8
21208: PUSH
21209: EMPTY
21210: ST_TO_ADDR
// if mode then
21211: LD_VAR 0 4
21215: IFFALSE 21279
// begin for i := 1 to result do
21217: LD_ADDR_VAR 0 6
21221: PUSH
21222: DOUBLE
21223: LD_INT 1
21225: DEC
21226: ST_TO_ADDR
21227: LD_VAR 0 5
21231: PUSH
21232: FOR_TO
21233: IFFALSE 21267
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21235: LD_ADDR_VAR 0 8
21239: PUSH
21240: LD_VAR 0 8
21244: PPUSH
21245: LD_VAR 0 5
21249: PUSH
21250: LD_VAR 0 6
21254: ARRAY
21255: PUSH
21256: LD_INT 1
21258: ARRAY
21259: PPUSH
21260: CALL 53177 0 2
21264: ST_TO_ADDR
21265: GO 21232
21267: POP
21268: POP
// result := tmp ;
21269: LD_ADDR_VAR 0 5
21273: PUSH
21274: LD_VAR 0 8
21278: ST_TO_ADDR
// end ; end ;
21279: LD_VAR 0 5
21283: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
21288: PPUSH
21289: PPUSH
// if not list then
21290: LD_VAR 0 3
21294: NOT
21295: IFFALSE 21299
// exit ;
21297: GO 21687
// result := [ ] ;
21299: LD_ADDR_VAR 0 6
21303: PUSH
21304: EMPTY
21305: ST_TO_ADDR
// for i in list do
21306: LD_ADDR_VAR 0 7
21310: PUSH
21311: LD_VAR 0 3
21315: PUSH
21316: FOR_IN
21317: IFFALSE 21519
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21319: LD_ADDR_VAR 0 9
21323: PUSH
21324: LD_VAR 0 7
21328: PPUSH
21329: LD_VAR 0 1
21333: PPUSH
21334: LD_VAR 0 2
21338: PPUSH
21339: CALL_OW 297
21343: ST_TO_ADDR
// if not result then
21344: LD_VAR 0 6
21348: NOT
21349: IFFALSE 21375
// result := [ [ i , tmp ] ] else
21351: LD_ADDR_VAR 0 6
21355: PUSH
21356: LD_VAR 0 7
21360: PUSH
21361: LD_VAR 0 9
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: EMPTY
21371: LIST
21372: ST_TO_ADDR
21373: GO 21517
// begin if result [ result ] [ 2 ] < tmp then
21375: LD_VAR 0 6
21379: PUSH
21380: LD_VAR 0 6
21384: ARRAY
21385: PUSH
21386: LD_INT 2
21388: ARRAY
21389: PUSH
21390: LD_VAR 0 9
21394: LESS
21395: IFFALSE 21437
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21397: LD_ADDR_VAR 0 6
21401: PUSH
21402: LD_VAR 0 6
21406: PPUSH
21407: LD_VAR 0 6
21411: PUSH
21412: LD_INT 1
21414: PLUS
21415: PPUSH
21416: LD_VAR 0 7
21420: PUSH
21421: LD_VAR 0 9
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PPUSH
21430: CALL_OW 2
21434: ST_TO_ADDR
21435: GO 21517
// for j = 1 to result do
21437: LD_ADDR_VAR 0 8
21441: PUSH
21442: DOUBLE
21443: LD_INT 1
21445: DEC
21446: ST_TO_ADDR
21447: LD_VAR 0 6
21451: PUSH
21452: FOR_TO
21453: IFFALSE 21515
// begin if tmp < result [ j ] [ 2 ] then
21455: LD_VAR 0 9
21459: PUSH
21460: LD_VAR 0 6
21464: PUSH
21465: LD_VAR 0 8
21469: ARRAY
21470: PUSH
21471: LD_INT 2
21473: ARRAY
21474: LESS
21475: IFFALSE 21513
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21477: LD_ADDR_VAR 0 6
21481: PUSH
21482: LD_VAR 0 6
21486: PPUSH
21487: LD_VAR 0 8
21491: PPUSH
21492: LD_VAR 0 7
21496: PUSH
21497: LD_VAR 0 9
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PPUSH
21506: CALL_OW 2
21510: ST_TO_ADDR
// break ;
21511: GO 21515
// end ; end ;
21513: GO 21452
21515: POP
21516: POP
// end ; end ;
21517: GO 21316
21519: POP
21520: POP
// if result and not asc then
21521: LD_VAR 0 6
21525: PUSH
21526: LD_VAR 0 4
21530: NOT
21531: AND
21532: IFFALSE 21607
// begin tmp := result ;
21534: LD_ADDR_VAR 0 9
21538: PUSH
21539: LD_VAR 0 6
21543: ST_TO_ADDR
// for i = tmp downto 1 do
21544: LD_ADDR_VAR 0 7
21548: PUSH
21549: DOUBLE
21550: LD_VAR 0 9
21554: INC
21555: ST_TO_ADDR
21556: LD_INT 1
21558: PUSH
21559: FOR_DOWNTO
21560: IFFALSE 21605
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21562: LD_ADDR_VAR 0 6
21566: PUSH
21567: LD_VAR 0 6
21571: PPUSH
21572: LD_VAR 0 9
21576: PUSH
21577: LD_VAR 0 7
21581: MINUS
21582: PUSH
21583: LD_INT 1
21585: PLUS
21586: PPUSH
21587: LD_VAR 0 9
21591: PUSH
21592: LD_VAR 0 7
21596: ARRAY
21597: PPUSH
21598: CALL_OW 1
21602: ST_TO_ADDR
21603: GO 21559
21605: POP
21606: POP
// end ; tmp := [ ] ;
21607: LD_ADDR_VAR 0 9
21611: PUSH
21612: EMPTY
21613: ST_TO_ADDR
// if mode then
21614: LD_VAR 0 5
21618: IFFALSE 21687
// begin for i = 1 to result do
21620: LD_ADDR_VAR 0 7
21624: PUSH
21625: DOUBLE
21626: LD_INT 1
21628: DEC
21629: ST_TO_ADDR
21630: LD_VAR 0 6
21634: PUSH
21635: FOR_TO
21636: IFFALSE 21675
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21638: LD_ADDR_VAR 0 9
21642: PUSH
21643: LD_VAR 0 9
21647: PPUSH
21648: LD_VAR 0 7
21652: PPUSH
21653: LD_VAR 0 6
21657: PUSH
21658: LD_VAR 0 7
21662: ARRAY
21663: PUSH
21664: LD_INT 1
21666: ARRAY
21667: PPUSH
21668: CALL_OW 1
21672: ST_TO_ADDR
21673: GO 21635
21675: POP
21676: POP
// result := tmp ;
21677: LD_ADDR_VAR 0 6
21681: PUSH
21682: LD_VAR 0 9
21686: ST_TO_ADDR
// end ; end ;
21687: LD_VAR 0 6
21691: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21692: LD_INT 0
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
21699: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21700: LD_ADDR_VAR 0 5
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: ST_TO_ADDR
// if not x or not y then
21722: LD_VAR 0 2
21726: NOT
21727: PUSH
21728: LD_VAR 0 3
21732: NOT
21733: OR
21734: IFFALSE 21738
// exit ;
21736: GO 23388
// if not range then
21738: LD_VAR 0 4
21742: NOT
21743: IFFALSE 21753
// range := 10 ;
21745: LD_ADDR_VAR 0 4
21749: PUSH
21750: LD_INT 10
21752: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21753: LD_ADDR_VAR 0 8
21757: PUSH
21758: LD_INT 81
21760: PUSH
21761: LD_VAR 0 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 92
21772: PUSH
21773: LD_VAR 0 2
21777: PUSH
21778: LD_VAR 0 3
21782: PUSH
21783: LD_VAR 0 4
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 3
21796: PUSH
21797: LD_INT 21
21799: PUSH
21800: LD_INT 3
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: PPUSH
21816: CALL_OW 69
21820: ST_TO_ADDR
// if not tmp then
21821: LD_VAR 0 8
21825: NOT
21826: IFFALSE 21830
// exit ;
21828: GO 23388
// for i in tmp do
21830: LD_ADDR_VAR 0 6
21834: PUSH
21835: LD_VAR 0 8
21839: PUSH
21840: FOR_IN
21841: IFFALSE 23363
// begin points := [ 0 , 0 , 0 ] ;
21843: LD_ADDR_VAR 0 9
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: ST_TO_ADDR
// bpoints := 1 ;
21862: LD_ADDR_VAR 0 10
21866: PUSH
21867: LD_INT 1
21869: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21870: LD_VAR 0 6
21874: PPUSH
21875: CALL_OW 247
21879: PUSH
21880: LD_INT 1
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 22466
21888: POP
// begin if GetClass ( i ) = 1 then
21889: LD_VAR 0 6
21893: PPUSH
21894: CALL_OW 257
21898: PUSH
21899: LD_INT 1
21901: EQUAL
21902: IFFALSE 21923
// points := [ 10 , 5 , 3 ] ;
21904: LD_ADDR_VAR 0 9
21908: PUSH
21909: LD_INT 10
21911: PUSH
21912: LD_INT 5
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21923: LD_VAR 0 6
21927: PPUSH
21928: CALL_OW 257
21932: PUSH
21933: LD_INT 2
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: LD_INT 4
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: LIST
21946: IN
21947: IFFALSE 21968
// points := [ 3 , 2 , 1 ] ;
21949: LD_ADDR_VAR 0 9
21953: PUSH
21954: LD_INT 3
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21968: LD_VAR 0 6
21972: PPUSH
21973: CALL_OW 257
21977: PUSH
21978: LD_INT 5
21980: EQUAL
21981: IFFALSE 22002
// points := [ 130 , 5 , 2 ] ;
21983: LD_ADDR_VAR 0 9
21987: PUSH
21988: LD_INT 130
21990: PUSH
21991: LD_INT 5
21993: PUSH
21994: LD_INT 2
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: LIST
22001: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22002: LD_VAR 0 6
22006: PPUSH
22007: CALL_OW 257
22011: PUSH
22012: LD_INT 8
22014: EQUAL
22015: IFFALSE 22036
// points := [ 35 , 35 , 30 ] ;
22017: LD_ADDR_VAR 0 9
22021: PUSH
22022: LD_INT 35
22024: PUSH
22025: LD_INT 35
22027: PUSH
22028: LD_INT 30
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22036: LD_VAR 0 6
22040: PPUSH
22041: CALL_OW 257
22045: PUSH
22046: LD_INT 9
22048: EQUAL
22049: IFFALSE 22070
// points := [ 20 , 55 , 40 ] ;
22051: LD_ADDR_VAR 0 9
22055: PUSH
22056: LD_INT 20
22058: PUSH
22059: LD_INT 55
22061: PUSH
22062: LD_INT 40
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22070: LD_VAR 0 6
22074: PPUSH
22075: CALL_OW 257
22079: PUSH
22080: LD_INT 12
22082: PUSH
22083: LD_INT 16
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: IN
22090: IFFALSE 22111
// points := [ 5 , 3 , 2 ] ;
22092: LD_ADDR_VAR 0 9
22096: PUSH
22097: LD_INT 5
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22111: LD_VAR 0 6
22115: PPUSH
22116: CALL_OW 257
22120: PUSH
22121: LD_INT 17
22123: EQUAL
22124: IFFALSE 22145
// points := [ 100 , 50 , 75 ] ;
22126: LD_ADDR_VAR 0 9
22130: PUSH
22131: LD_INT 100
22133: PUSH
22134: LD_INT 50
22136: PUSH
22137: LD_INT 75
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: LIST
22144: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22145: LD_VAR 0 6
22149: PPUSH
22150: CALL_OW 257
22154: PUSH
22155: LD_INT 15
22157: EQUAL
22158: IFFALSE 22179
// points := [ 10 , 5 , 3 ] ;
22160: LD_ADDR_VAR 0 9
22164: PUSH
22165: LD_INT 10
22167: PUSH
22168: LD_INT 5
22170: PUSH
22171: LD_INT 3
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22179: LD_VAR 0 6
22183: PPUSH
22184: CALL_OW 257
22188: PUSH
22189: LD_INT 14
22191: EQUAL
22192: IFFALSE 22213
// points := [ 10 , 0 , 0 ] ;
22194: LD_ADDR_VAR 0 9
22198: PUSH
22199: LD_INT 10
22201: PUSH
22202: LD_INT 0
22204: PUSH
22205: LD_INT 0
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22213: LD_VAR 0 6
22217: PPUSH
22218: CALL_OW 257
22222: PUSH
22223: LD_INT 11
22225: EQUAL
22226: IFFALSE 22247
// points := [ 30 , 10 , 5 ] ;
22228: LD_ADDR_VAR 0 9
22232: PUSH
22233: LD_INT 30
22235: PUSH
22236: LD_INT 10
22238: PUSH
22239: LD_INT 5
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 5
22254: PPUSH
22255: CALL_OW 321
22259: PUSH
22260: LD_INT 2
22262: EQUAL
22263: IFFALSE 22280
// bpoints := bpoints * 1.8 ;
22265: LD_ADDR_VAR 0 10
22269: PUSH
22270: LD_VAR 0 10
22274: PUSH
22275: LD_REAL  1.80000000000000E+0000
22278: MUL
22279: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22280: LD_VAR 0 6
22284: PPUSH
22285: CALL_OW 257
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: LD_INT 4
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: IN
22308: PUSH
22309: LD_VAR 0 1
22313: PPUSH
22314: LD_INT 51
22316: PPUSH
22317: CALL_OW 321
22321: PUSH
22322: LD_INT 2
22324: EQUAL
22325: AND
22326: IFFALSE 22343
// bpoints := bpoints * 1.2 ;
22328: LD_ADDR_VAR 0 10
22332: PUSH
22333: LD_VAR 0 10
22337: PUSH
22338: LD_REAL  1.20000000000000E+0000
22341: MUL
22342: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22343: LD_VAR 0 6
22347: PPUSH
22348: CALL_OW 257
22352: PUSH
22353: LD_INT 5
22355: PUSH
22356: LD_INT 7
22358: PUSH
22359: LD_INT 9
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: IN
22367: PUSH
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_INT 52
22375: PPUSH
22376: CALL_OW 321
22380: PUSH
22381: LD_INT 2
22383: EQUAL
22384: AND
22385: IFFALSE 22402
// bpoints := bpoints * 1.5 ;
22387: LD_ADDR_VAR 0 10
22391: PUSH
22392: LD_VAR 0 10
22396: PUSH
22397: LD_REAL  1.50000000000000E+0000
22400: MUL
22401: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22402: LD_VAR 0 1
22406: PPUSH
22407: LD_INT 66
22409: PPUSH
22410: CALL_OW 321
22414: PUSH
22415: LD_INT 2
22417: EQUAL
22418: IFFALSE 22435
// bpoints := bpoints * 1.1 ;
22420: LD_ADDR_VAR 0 10
22424: PUSH
22425: LD_VAR 0 10
22429: PUSH
22430: LD_REAL  1.10000000000000E+0000
22433: MUL
22434: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22435: LD_ADDR_VAR 0 10
22439: PUSH
22440: LD_VAR 0 10
22444: PUSH
22445: LD_VAR 0 6
22449: PPUSH
22450: LD_INT 1
22452: PPUSH
22453: CALL_OW 259
22457: PUSH
22458: LD_REAL  1.15000000000000E+0000
22461: MUL
22462: MUL
22463: ST_TO_ADDR
// end ; unit_vehicle :
22464: GO 23292
22466: LD_INT 2
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 23280
22474: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22475: LD_VAR 0 6
22479: PPUSH
22480: CALL_OW 264
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: LD_INT 42
22490: PUSH
22491: LD_INT 24
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: LIST
22498: IN
22499: IFFALSE 22520
// points := [ 25 , 5 , 3 ] ;
22501: LD_ADDR_VAR 0 9
22505: PUSH
22506: LD_INT 25
22508: PUSH
22509: LD_INT 5
22511: PUSH
22512: LD_INT 3
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22520: LD_VAR 0 6
22524: PPUSH
22525: CALL_OW 264
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: LD_INT 43
22535: PUSH
22536: LD_INT 25
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: IN
22544: IFFALSE 22565
// points := [ 40 , 15 , 5 ] ;
22546: LD_ADDR_VAR 0 9
22550: PUSH
22551: LD_INT 40
22553: PUSH
22554: LD_INT 15
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22565: LD_VAR 0 6
22569: PPUSH
22570: CALL_OW 264
22574: PUSH
22575: LD_INT 3
22577: PUSH
22578: LD_INT 23
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: IN
22585: IFFALSE 22606
// points := [ 7 , 25 , 8 ] ;
22587: LD_ADDR_VAR 0 9
22591: PUSH
22592: LD_INT 7
22594: PUSH
22595: LD_INT 25
22597: PUSH
22598: LD_INT 8
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22606: LD_VAR 0 6
22610: PPUSH
22611: CALL_OW 264
22615: PUSH
22616: LD_INT 5
22618: PUSH
22619: LD_INT 27
22621: PUSH
22622: LD_INT 44
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: IN
22630: IFFALSE 22651
// points := [ 14 , 50 , 16 ] ;
22632: LD_ADDR_VAR 0 9
22636: PUSH
22637: LD_INT 14
22639: PUSH
22640: LD_INT 50
22642: PUSH
22643: LD_INT 16
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22651: LD_VAR 0 6
22655: PPUSH
22656: CALL_OW 264
22660: PUSH
22661: LD_INT 6
22663: PUSH
22664: LD_INT 46
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: IN
22671: IFFALSE 22692
// points := [ 32 , 120 , 70 ] ;
22673: LD_ADDR_VAR 0 9
22677: PUSH
22678: LD_INT 32
22680: PUSH
22681: LD_INT 120
22683: PUSH
22684: LD_INT 70
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22692: LD_VAR 0 6
22696: PPUSH
22697: CALL_OW 264
22701: PUSH
22702: LD_INT 7
22704: PUSH
22705: LD_INT 28
22707: PUSH
22708: LD_INT 45
22710: PUSH
22711: LD_INT 92
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: IN
22720: IFFALSE 22741
// points := [ 35 , 20 , 45 ] ;
22722: LD_ADDR_VAR 0 9
22726: PUSH
22727: LD_INT 35
22729: PUSH
22730: LD_INT 20
22732: PUSH
22733: LD_INT 45
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22741: LD_VAR 0 6
22745: PPUSH
22746: CALL_OW 264
22750: PUSH
22751: LD_INT 47
22753: PUSH
22754: EMPTY
22755: LIST
22756: IN
22757: IFFALSE 22778
// points := [ 67 , 45 , 75 ] ;
22759: LD_ADDR_VAR 0 9
22763: PUSH
22764: LD_INT 67
22766: PUSH
22767: LD_INT 45
22769: PUSH
22770: LD_INT 75
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22778: LD_VAR 0 6
22782: PPUSH
22783: CALL_OW 264
22787: PUSH
22788: LD_INT 26
22790: PUSH
22791: EMPTY
22792: LIST
22793: IN
22794: IFFALSE 22815
// points := [ 120 , 30 , 80 ] ;
22796: LD_ADDR_VAR 0 9
22800: PUSH
22801: LD_INT 120
22803: PUSH
22804: LD_INT 30
22806: PUSH
22807: LD_INT 80
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22815: LD_VAR 0 6
22819: PPUSH
22820: CALL_OW 264
22824: PUSH
22825: LD_INT 22
22827: PUSH
22828: EMPTY
22829: LIST
22830: IN
22831: IFFALSE 22852
// points := [ 40 , 1 , 1 ] ;
22833: LD_ADDR_VAR 0 9
22837: PUSH
22838: LD_INT 40
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: LD_INT 1
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22852: LD_VAR 0 6
22856: PPUSH
22857: CALL_OW 264
22861: PUSH
22862: LD_INT 29
22864: PUSH
22865: EMPTY
22866: LIST
22867: IN
22868: IFFALSE 22889
// points := [ 70 , 200 , 400 ] ;
22870: LD_ADDR_VAR 0 9
22874: PUSH
22875: LD_INT 70
22877: PUSH
22878: LD_INT 200
22880: PUSH
22881: LD_INT 400
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22889: LD_VAR 0 6
22893: PPUSH
22894: CALL_OW 264
22898: PUSH
22899: LD_INT 14
22901: PUSH
22902: LD_INT 53
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: IN
22909: IFFALSE 22930
// points := [ 40 , 10 , 20 ] ;
22911: LD_ADDR_VAR 0 9
22915: PUSH
22916: LD_INT 40
22918: PUSH
22919: LD_INT 10
22921: PUSH
22922: LD_INT 20
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22930: LD_VAR 0 6
22934: PPUSH
22935: CALL_OW 264
22939: PUSH
22940: LD_INT 9
22942: PUSH
22943: EMPTY
22944: LIST
22945: IN
22946: IFFALSE 22967
// points := [ 5 , 70 , 20 ] ;
22948: LD_ADDR_VAR 0 9
22952: PUSH
22953: LD_INT 5
22955: PUSH
22956: LD_INT 70
22958: PUSH
22959: LD_INT 20
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22967: LD_VAR 0 6
22971: PPUSH
22972: CALL_OW 264
22976: PUSH
22977: LD_INT 10
22979: PUSH
22980: EMPTY
22981: LIST
22982: IN
22983: IFFALSE 23004
// points := [ 35 , 110 , 70 ] ;
22985: LD_ADDR_VAR 0 9
22989: PUSH
22990: LD_INT 35
22992: PUSH
22993: LD_INT 110
22995: PUSH
22996: LD_INT 70
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23004: LD_VAR 0 6
23008: PPUSH
23009: CALL_OW 265
23013: PUSH
23014: LD_INT 25
23016: EQUAL
23017: IFFALSE 23038
// points := [ 80 , 65 , 100 ] ;
23019: LD_ADDR_VAR 0 9
23023: PUSH
23024: LD_INT 80
23026: PUSH
23027: LD_INT 65
23029: PUSH
23030: LD_INT 100
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23038: LD_VAR 0 6
23042: PPUSH
23043: CALL_OW 263
23047: PUSH
23048: LD_INT 1
23050: EQUAL
23051: IFFALSE 23086
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23053: LD_ADDR_VAR 0 10
23057: PUSH
23058: LD_VAR 0 10
23062: PUSH
23063: LD_VAR 0 6
23067: PPUSH
23068: CALL_OW 311
23072: PPUSH
23073: LD_INT 3
23075: PPUSH
23076: CALL_OW 259
23080: PUSH
23081: LD_INT 4
23083: MUL
23084: MUL
23085: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23086: LD_VAR 0 6
23090: PPUSH
23091: CALL_OW 263
23095: PUSH
23096: LD_INT 2
23098: EQUAL
23099: IFFALSE 23150
// begin j := IsControledBy ( i ) ;
23101: LD_ADDR_VAR 0 7
23105: PUSH
23106: LD_VAR 0 6
23110: PPUSH
23111: CALL_OW 312
23115: ST_TO_ADDR
// if j then
23116: LD_VAR 0 7
23120: IFFALSE 23150
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23122: LD_ADDR_VAR 0 10
23126: PUSH
23127: LD_VAR 0 10
23131: PUSH
23132: LD_VAR 0 7
23136: PPUSH
23137: LD_INT 3
23139: PPUSH
23140: CALL_OW 259
23144: PUSH
23145: LD_INT 3
23147: MUL
23148: MUL
23149: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23150: LD_VAR 0 6
23154: PPUSH
23155: CALL_OW 264
23159: PUSH
23160: LD_INT 5
23162: PUSH
23163: LD_INT 6
23165: PUSH
23166: LD_INT 46
23168: PUSH
23169: LD_INT 44
23171: PUSH
23172: LD_INT 47
23174: PUSH
23175: LD_INT 45
23177: PUSH
23178: LD_INT 28
23180: PUSH
23181: LD_INT 7
23183: PUSH
23184: LD_INT 27
23186: PUSH
23187: LD_INT 29
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: IN
23202: PUSH
23203: LD_VAR 0 1
23207: PPUSH
23208: LD_INT 52
23210: PPUSH
23211: CALL_OW 321
23215: PUSH
23216: LD_INT 2
23218: EQUAL
23219: AND
23220: IFFALSE 23237
// bpoints := bpoints * 1.2 ;
23222: LD_ADDR_VAR 0 10
23226: PUSH
23227: LD_VAR 0 10
23231: PUSH
23232: LD_REAL  1.20000000000000E+0000
23235: MUL
23236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23237: LD_VAR 0 6
23241: PPUSH
23242: CALL_OW 264
23246: PUSH
23247: LD_INT 6
23249: PUSH
23250: LD_INT 46
23252: PUSH
23253: LD_INT 47
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: LIST
23260: IN
23261: IFFALSE 23278
// bpoints := bpoints * 1.2 ;
23263: LD_ADDR_VAR 0 10
23267: PUSH
23268: LD_VAR 0 10
23272: PUSH
23273: LD_REAL  1.20000000000000E+0000
23276: MUL
23277: ST_TO_ADDR
// end ; unit_building :
23278: GO 23292
23280: LD_INT 3
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23291
23288: POP
// ; end ;
23289: GO 23292
23291: POP
// for j = 1 to 3 do
23292: LD_ADDR_VAR 0 7
23296: PUSH
23297: DOUBLE
23298: LD_INT 1
23300: DEC
23301: ST_TO_ADDR
23302: LD_INT 3
23304: PUSH
23305: FOR_TO
23306: IFFALSE 23359
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23308: LD_ADDR_VAR 0 5
23312: PUSH
23313: LD_VAR 0 5
23317: PPUSH
23318: LD_VAR 0 7
23322: PPUSH
23323: LD_VAR 0 5
23327: PUSH
23328: LD_VAR 0 7
23332: ARRAY
23333: PUSH
23334: LD_VAR 0 9
23338: PUSH
23339: LD_VAR 0 7
23343: ARRAY
23344: PUSH
23345: LD_VAR 0 10
23349: MUL
23350: PLUS
23351: PPUSH
23352: CALL_OW 1
23356: ST_TO_ADDR
23357: GO 23305
23359: POP
23360: POP
// end ;
23361: GO 21840
23363: POP
23364: POP
// result := Replace ( result , 4 , tmp ) ;
23365: LD_ADDR_VAR 0 5
23369: PUSH
23370: LD_VAR 0 5
23374: PPUSH
23375: LD_INT 4
23377: PPUSH
23378: LD_VAR 0 8
23382: PPUSH
23383: CALL_OW 1
23387: ST_TO_ADDR
// end ;
23388: LD_VAR 0 5
23392: RET
// export function DangerAtRange ( unit , range ) ; begin
23393: LD_INT 0
23395: PPUSH
// if not unit then
23396: LD_VAR 0 1
23400: NOT
23401: IFFALSE 23405
// exit ;
23403: GO 23450
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_VAR 0 1
23414: PPUSH
23415: CALL_OW 255
23419: PPUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 250
23429: PPUSH
23430: LD_VAR 0 1
23434: PPUSH
23435: CALL_OW 251
23439: PPUSH
23440: LD_VAR 0 2
23444: PPUSH
23445: CALL 21692 0 4
23449: ST_TO_ADDR
// end ;
23450: LD_VAR 0 3
23454: RET
// export function DangerInArea ( side , area ) ; begin
23455: LD_INT 0
23457: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23458: LD_ADDR_VAR 0 3
23462: PUSH
23463: LD_VAR 0 2
23467: PPUSH
23468: LD_INT 81
23470: PUSH
23471: LD_VAR 0 1
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PPUSH
23480: CALL_OW 70
23484: ST_TO_ADDR
// end ;
23485: LD_VAR 0 3
23489: RET
// export function IsExtension ( b ) ; begin
23490: LD_INT 0
23492: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23493: LD_ADDR_VAR 0 2
23497: PUSH
23498: LD_VAR 0 1
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 20
23508: PUSH
23509: LD_INT 22
23511: PUSH
23512: LD_INT 17
23514: PUSH
23515: LD_INT 24
23517: PUSH
23518: LD_INT 21
23520: PUSH
23521: LD_INT 19
23523: PUSH
23524: LD_INT 16
23526: PUSH
23527: LD_INT 25
23529: PUSH
23530: LD_INT 18
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: IN
23545: ST_TO_ADDR
// end ;
23546: LD_VAR 0 2
23550: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23551: LD_INT 0
23553: PPUSH
23554: PPUSH
23555: PPUSH
// result := [ ] ;
23556: LD_ADDR_VAR 0 4
23560: PUSH
23561: EMPTY
23562: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23563: LD_ADDR_VAR 0 5
23567: PUSH
23568: LD_VAR 0 2
23572: PPUSH
23573: LD_INT 21
23575: PUSH
23576: LD_INT 3
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PPUSH
23583: CALL_OW 70
23587: ST_TO_ADDR
// if not tmp then
23588: LD_VAR 0 5
23592: NOT
23593: IFFALSE 23597
// exit ;
23595: GO 23661
// if checkLink then
23597: LD_VAR 0 3
23601: IFFALSE 23651
// begin for i in tmp do
23603: LD_ADDR_VAR 0 6
23607: PUSH
23608: LD_VAR 0 5
23612: PUSH
23613: FOR_IN
23614: IFFALSE 23649
// if GetBase ( i ) <> base then
23616: LD_VAR 0 6
23620: PPUSH
23621: CALL_OW 274
23625: PUSH
23626: LD_VAR 0 1
23630: NONEQUAL
23631: IFFALSE 23647
// ComLinkToBase ( base , i ) ;
23633: LD_VAR 0 1
23637: PPUSH
23638: LD_VAR 0 6
23642: PPUSH
23643: CALL_OW 169
23647: GO 23613
23649: POP
23650: POP
// end ; result := tmp ;
23651: LD_ADDR_VAR 0 4
23655: PUSH
23656: LD_VAR 0 5
23660: ST_TO_ADDR
// end ;
23661: LD_VAR 0 4
23665: RET
// export function ComComplete ( units , b ) ; var i ; begin
23666: LD_INT 0
23668: PPUSH
23669: PPUSH
// if not units then
23670: LD_VAR 0 1
23674: NOT
23675: IFFALSE 23679
// exit ;
23677: GO 23769
// for i in units do
23679: LD_ADDR_VAR 0 4
23683: PUSH
23684: LD_VAR 0 1
23688: PUSH
23689: FOR_IN
23690: IFFALSE 23767
// if BuildingStatus ( b ) = bs_build then
23692: LD_VAR 0 2
23696: PPUSH
23697: CALL_OW 461
23701: PUSH
23702: LD_INT 1
23704: EQUAL
23705: IFFALSE 23765
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23707: LD_VAR 0 4
23711: PPUSH
23712: LD_STRING h
23714: PUSH
23715: LD_VAR 0 2
23719: PPUSH
23720: CALL_OW 250
23724: PUSH
23725: LD_VAR 0 2
23729: PPUSH
23730: CALL_OW 251
23734: PUSH
23735: LD_VAR 0 2
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: PPUSH
23761: CALL_OW 446
23765: GO 23689
23767: POP
23768: POP
// end ;
23769: LD_VAR 0 3
23773: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23774: LD_INT 0
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23782: LD_VAR 0 1
23786: NOT
23787: PUSH
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 263
23797: PUSH
23798: LD_INT 2
23800: NONEQUAL
23801: OR
23802: IFFALSE 23806
// exit ;
23804: GO 24122
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23806: LD_ADDR_VAR 0 6
23810: PUSH
23811: LD_INT 22
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 255
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: LD_INT 30
23833: PUSH
23834: LD_INT 36
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 34
23843: PUSH
23844: LD_INT 31
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PPUSH
23860: CALL_OW 69
23864: ST_TO_ADDR
// if not tmp then
23865: LD_VAR 0 6
23869: NOT
23870: IFFALSE 23874
// exit ;
23872: GO 24122
// result := [ ] ;
23874: LD_ADDR_VAR 0 2
23878: PUSH
23879: EMPTY
23880: ST_TO_ADDR
// for i in tmp do
23881: LD_ADDR_VAR 0 3
23885: PUSH
23886: LD_VAR 0 6
23890: PUSH
23891: FOR_IN
23892: IFFALSE 23963
// begin t := UnitsInside ( i ) ;
23894: LD_ADDR_VAR 0 4
23898: PUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: CALL_OW 313
23908: ST_TO_ADDR
// if t then
23909: LD_VAR 0 4
23913: IFFALSE 23961
// for j in t do
23915: LD_ADDR_VAR 0 7
23919: PUSH
23920: LD_VAR 0 4
23924: PUSH
23925: FOR_IN
23926: IFFALSE 23959
// result := Replace ( result , result + 1 , j ) ;
23928: LD_ADDR_VAR 0 2
23932: PUSH
23933: LD_VAR 0 2
23937: PPUSH
23938: LD_VAR 0 2
23942: PUSH
23943: LD_INT 1
23945: PLUS
23946: PPUSH
23947: LD_VAR 0 7
23951: PPUSH
23952: CALL_OW 1
23956: ST_TO_ADDR
23957: GO 23925
23959: POP
23960: POP
// end ;
23961: GO 23891
23963: POP
23964: POP
// if not result then
23965: LD_VAR 0 2
23969: NOT
23970: IFFALSE 23974
// exit ;
23972: GO 24122
// mech := result [ 1 ] ;
23974: LD_ADDR_VAR 0 5
23978: PUSH
23979: LD_VAR 0 2
23983: PUSH
23984: LD_INT 1
23986: ARRAY
23987: ST_TO_ADDR
// if result > 1 then
23988: LD_VAR 0 2
23992: PUSH
23993: LD_INT 1
23995: GREATER
23996: IFFALSE 24108
// begin for i = 2 to result do
23998: LD_ADDR_VAR 0 3
24002: PUSH
24003: DOUBLE
24004: LD_INT 2
24006: DEC
24007: ST_TO_ADDR
24008: LD_VAR 0 2
24012: PUSH
24013: FOR_TO
24014: IFFALSE 24106
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24016: LD_ADDR_VAR 0 4
24020: PUSH
24021: LD_VAR 0 2
24025: PUSH
24026: LD_VAR 0 3
24030: ARRAY
24031: PPUSH
24032: LD_INT 3
24034: PPUSH
24035: CALL_OW 259
24039: PUSH
24040: LD_VAR 0 2
24044: PUSH
24045: LD_VAR 0 3
24049: ARRAY
24050: PPUSH
24051: CALL_OW 432
24055: MINUS
24056: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24057: LD_VAR 0 4
24061: PUSH
24062: LD_VAR 0 5
24066: PPUSH
24067: LD_INT 3
24069: PPUSH
24070: CALL_OW 259
24074: PUSH
24075: LD_VAR 0 5
24079: PPUSH
24080: CALL_OW 432
24084: MINUS
24085: GREATEREQUAL
24086: IFFALSE 24104
// mech := result [ i ] ;
24088: LD_ADDR_VAR 0 5
24092: PUSH
24093: LD_VAR 0 2
24097: PUSH
24098: LD_VAR 0 3
24102: ARRAY
24103: ST_TO_ADDR
// end ;
24104: GO 24013
24106: POP
24107: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24108: LD_VAR 0 1
24112: PPUSH
24113: LD_VAR 0 5
24117: PPUSH
24118: CALL_OW 135
// end ;
24122: LD_VAR 0 2
24126: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24127: LD_INT 0
24129: PPUSH
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
24134: PPUSH
24135: PPUSH
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
// result := [ ] ;
24142: LD_ADDR_VAR 0 7
24146: PUSH
24147: EMPTY
24148: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24149: LD_VAR 0 1
24153: PPUSH
24154: CALL_OW 266
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: IN
24169: NOT
24170: IFFALSE 24174
// exit ;
24172: GO 25808
// if name then
24174: LD_VAR 0 3
24178: IFFALSE 24194
// SetBName ( base_dep , name ) ;
24180: LD_VAR 0 1
24184: PPUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: CALL_OW 500
// base := GetBase ( base_dep ) ;
24194: LD_ADDR_VAR 0 15
24198: PUSH
24199: LD_VAR 0 1
24203: PPUSH
24204: CALL_OW 274
24208: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24209: LD_ADDR_VAR 0 16
24213: PUSH
24214: LD_VAR 0 1
24218: PPUSH
24219: CALL_OW 255
24223: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24224: LD_ADDR_VAR 0 17
24228: PUSH
24229: LD_VAR 0 1
24233: PPUSH
24234: CALL_OW 248
24238: ST_TO_ADDR
// if sources then
24239: LD_VAR 0 5
24243: IFFALSE 24290
// for i = 1 to 3 do
24245: LD_ADDR_VAR 0 8
24249: PUSH
24250: DOUBLE
24251: LD_INT 1
24253: DEC
24254: ST_TO_ADDR
24255: LD_INT 3
24257: PUSH
24258: FOR_TO
24259: IFFALSE 24288
// AddResourceType ( base , i , sources [ i ] ) ;
24261: LD_VAR 0 15
24265: PPUSH
24266: LD_VAR 0 8
24270: PPUSH
24271: LD_VAR 0 5
24275: PUSH
24276: LD_VAR 0 8
24280: ARRAY
24281: PPUSH
24282: CALL_OW 276
24286: GO 24258
24288: POP
24289: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24290: LD_ADDR_VAR 0 18
24294: PUSH
24295: LD_VAR 0 15
24299: PPUSH
24300: LD_VAR 0 2
24304: PPUSH
24305: LD_INT 1
24307: PPUSH
24308: CALL 23551 0 3
24312: ST_TO_ADDR
// InitHc ;
24313: CALL_OW 19
// InitUc ;
24317: CALL_OW 18
// uc_side := side ;
24321: LD_ADDR_OWVAR 20
24325: PUSH
24326: LD_VAR 0 16
24330: ST_TO_ADDR
// uc_nation := nation ;
24331: LD_ADDR_OWVAR 21
24335: PUSH
24336: LD_VAR 0 17
24340: ST_TO_ADDR
// if buildings then
24341: LD_VAR 0 18
24345: IFFALSE 25667
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24347: LD_ADDR_VAR 0 19
24351: PUSH
24352: LD_VAR 0 18
24356: PPUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 30
24362: PUSH
24363: LD_INT 29
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 30
24372: PUSH
24373: LD_INT 30
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: PPUSH
24385: CALL_OW 72
24389: ST_TO_ADDR
// if tmp then
24390: LD_VAR 0 19
24394: IFFALSE 24442
// for i in tmp do
24396: LD_ADDR_VAR 0 8
24400: PUSH
24401: LD_VAR 0 19
24405: PUSH
24406: FOR_IN
24407: IFFALSE 24440
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24409: LD_VAR 0 8
24413: PPUSH
24414: CALL_OW 250
24418: PPUSH
24419: LD_VAR 0 8
24423: PPUSH
24424: CALL_OW 251
24428: PPUSH
24429: LD_VAR 0 16
24433: PPUSH
24434: CALL_OW 441
24438: GO 24406
24440: POP
24441: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24442: LD_VAR 0 18
24446: PPUSH
24447: LD_INT 2
24449: PUSH
24450: LD_INT 30
24452: PUSH
24453: LD_INT 32
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 30
24462: PUSH
24463: LD_INT 33
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 72
24479: IFFALSE 24567
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24481: LD_ADDR_VAR 0 8
24485: PUSH
24486: LD_VAR 0 18
24490: PPUSH
24491: LD_INT 2
24493: PUSH
24494: LD_INT 30
24496: PUSH
24497: LD_INT 32
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 30
24506: PUSH
24507: LD_INT 33
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: PPUSH
24519: CALL_OW 72
24523: PUSH
24524: FOR_IN
24525: IFFALSE 24565
// begin if not GetBWeapon ( i ) then
24527: LD_VAR 0 8
24531: PPUSH
24532: CALL_OW 269
24536: NOT
24537: IFFALSE 24563
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24539: LD_VAR 0 8
24543: PPUSH
24544: LD_VAR 0 8
24548: PPUSH
24549: LD_VAR 0 2
24553: PPUSH
24554: CALL 25813 0 2
24558: PPUSH
24559: CALL_OW 431
// end ;
24563: GO 24524
24565: POP
24566: POP
// end ; for i = 1 to personel do
24567: LD_ADDR_VAR 0 8
24571: PUSH
24572: DOUBLE
24573: LD_INT 1
24575: DEC
24576: ST_TO_ADDR
24577: LD_VAR 0 6
24581: PUSH
24582: FOR_TO
24583: IFFALSE 25647
// begin if i > 4 then
24585: LD_VAR 0 8
24589: PUSH
24590: LD_INT 4
24592: GREATER
24593: IFFALSE 24597
// break ;
24595: GO 25647
// case i of 1 :
24597: LD_VAR 0 8
24601: PUSH
24602: LD_INT 1
24604: DOUBLE
24605: EQUAL
24606: IFTRUE 24610
24608: GO 24690
24610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24611: LD_ADDR_VAR 0 12
24615: PUSH
24616: LD_VAR 0 18
24620: PPUSH
24621: LD_INT 22
24623: PUSH
24624: LD_VAR 0 16
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 58
24635: PUSH
24636: EMPTY
24637: LIST
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: LD_INT 30
24644: PUSH
24645: LD_INT 32
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 30
24654: PUSH
24655: LD_INT 4
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 30
24664: PUSH
24665: LD_INT 5
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: LIST
24682: PPUSH
24683: CALL_OW 72
24687: ST_TO_ADDR
24688: GO 24912
24690: LD_INT 2
24692: DOUBLE
24693: EQUAL
24694: IFTRUE 24698
24696: GO 24760
24698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24699: LD_ADDR_VAR 0 12
24703: PUSH
24704: LD_VAR 0 18
24708: PPUSH
24709: LD_INT 22
24711: PUSH
24712: LD_VAR 0 16
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 30
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 30
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PPUSH
24753: CALL_OW 72
24757: ST_TO_ADDR
24758: GO 24912
24760: LD_INT 3
24762: DOUBLE
24763: EQUAL
24764: IFTRUE 24768
24766: GO 24830
24768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24769: LD_ADDR_VAR 0 12
24773: PUSH
24774: LD_VAR 0 18
24778: PPUSH
24779: LD_INT 22
24781: PUSH
24782: LD_VAR 0 16
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 30
24796: PUSH
24797: LD_INT 2
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 30
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PPUSH
24823: CALL_OW 72
24827: ST_TO_ADDR
24828: GO 24912
24830: LD_INT 4
24832: DOUBLE
24833: EQUAL
24834: IFTRUE 24838
24836: GO 24911
24838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24839: LD_ADDR_VAR 0 12
24843: PUSH
24844: LD_VAR 0 18
24848: PPUSH
24849: LD_INT 22
24851: PUSH
24852: LD_VAR 0 16
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 30
24866: PUSH
24867: LD_INT 6
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 30
24876: PUSH
24877: LD_INT 7
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 8
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PPUSH
24904: CALL_OW 72
24908: ST_TO_ADDR
24909: GO 24912
24911: POP
// if i = 1 then
24912: LD_VAR 0 8
24916: PUSH
24917: LD_INT 1
24919: EQUAL
24920: IFFALSE 25031
// begin tmp := [ ] ;
24922: LD_ADDR_VAR 0 19
24926: PUSH
24927: EMPTY
24928: ST_TO_ADDR
// for j in f do
24929: LD_ADDR_VAR 0 9
24933: PUSH
24934: LD_VAR 0 12
24938: PUSH
24939: FOR_IN
24940: IFFALSE 25013
// if GetBType ( j ) = b_bunker then
24942: LD_VAR 0 9
24946: PPUSH
24947: CALL_OW 266
24951: PUSH
24952: LD_INT 32
24954: EQUAL
24955: IFFALSE 24982
// tmp := Insert ( tmp , 1 , j ) else
24957: LD_ADDR_VAR 0 19
24961: PUSH
24962: LD_VAR 0 19
24966: PPUSH
24967: LD_INT 1
24969: PPUSH
24970: LD_VAR 0 9
24974: PPUSH
24975: CALL_OW 2
24979: ST_TO_ADDR
24980: GO 25011
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24982: LD_ADDR_VAR 0 19
24986: PUSH
24987: LD_VAR 0 19
24991: PPUSH
24992: LD_VAR 0 19
24996: PUSH
24997: LD_INT 1
24999: PLUS
25000: PPUSH
25001: LD_VAR 0 9
25005: PPUSH
25006: CALL_OW 2
25010: ST_TO_ADDR
25011: GO 24939
25013: POP
25014: POP
// if tmp then
25015: LD_VAR 0 19
25019: IFFALSE 25031
// f := tmp ;
25021: LD_ADDR_VAR 0 12
25025: PUSH
25026: LD_VAR 0 19
25030: ST_TO_ADDR
// end ; x := personel [ i ] ;
25031: LD_ADDR_VAR 0 13
25035: PUSH
25036: LD_VAR 0 6
25040: PUSH
25041: LD_VAR 0 8
25045: ARRAY
25046: ST_TO_ADDR
// if x = - 1 then
25047: LD_VAR 0 13
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: EQUAL
25056: IFFALSE 25265
// begin for j in f do
25058: LD_ADDR_VAR 0 9
25062: PUSH
25063: LD_VAR 0 12
25067: PUSH
25068: FOR_IN
25069: IFFALSE 25261
// repeat InitHc ;
25071: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25075: LD_VAR 0 9
25079: PPUSH
25080: CALL_OW 266
25084: PUSH
25085: LD_INT 5
25087: EQUAL
25088: IFFALSE 25158
// begin if UnitsInside ( j ) < 3 then
25090: LD_VAR 0 9
25094: PPUSH
25095: CALL_OW 313
25099: PUSH
25100: LD_INT 3
25102: LESS
25103: IFFALSE 25139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25105: LD_INT 0
25107: PPUSH
25108: LD_INT 5
25110: PUSH
25111: LD_INT 8
25113: PUSH
25114: LD_INT 9
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: PUSH
25122: LD_VAR 0 17
25126: ARRAY
25127: PPUSH
25128: LD_VAR 0 4
25132: PPUSH
25133: CALL_OW 380
25137: GO 25156
// PrepareHuman ( false , i , skill ) ;
25139: LD_INT 0
25141: PPUSH
25142: LD_VAR 0 8
25146: PPUSH
25147: LD_VAR 0 4
25151: PPUSH
25152: CALL_OW 380
// end else
25156: GO 25175
// PrepareHuman ( false , i , skill ) ;
25158: LD_INT 0
25160: PPUSH
25161: LD_VAR 0 8
25165: PPUSH
25166: LD_VAR 0 4
25170: PPUSH
25171: CALL_OW 380
// un := CreateHuman ;
25175: LD_ADDR_VAR 0 14
25179: PUSH
25180: CALL_OW 44
25184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25185: LD_ADDR_VAR 0 7
25189: PUSH
25190: LD_VAR 0 7
25194: PPUSH
25195: LD_INT 1
25197: PPUSH
25198: LD_VAR 0 14
25202: PPUSH
25203: CALL_OW 2
25207: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25208: LD_VAR 0 14
25212: PPUSH
25213: LD_VAR 0 9
25217: PPUSH
25218: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25222: LD_VAR 0 9
25226: PPUSH
25227: CALL_OW 313
25231: PUSH
25232: LD_INT 6
25234: EQUAL
25235: PUSH
25236: LD_VAR 0 9
25240: PPUSH
25241: CALL_OW 266
25245: PUSH
25246: LD_INT 32
25248: PUSH
25249: LD_INT 31
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: IN
25256: OR
25257: IFFALSE 25071
25259: GO 25068
25261: POP
25262: POP
// end else
25263: GO 25645
// for j = 1 to x do
25265: LD_ADDR_VAR 0 9
25269: PUSH
25270: DOUBLE
25271: LD_INT 1
25273: DEC
25274: ST_TO_ADDR
25275: LD_VAR 0 13
25279: PUSH
25280: FOR_TO
25281: IFFALSE 25643
// begin InitHc ;
25283: CALL_OW 19
// if not f then
25287: LD_VAR 0 12
25291: NOT
25292: IFFALSE 25381
// begin PrepareHuman ( false , i , skill ) ;
25294: LD_INT 0
25296: PPUSH
25297: LD_VAR 0 8
25301: PPUSH
25302: LD_VAR 0 4
25306: PPUSH
25307: CALL_OW 380
// un := CreateHuman ;
25311: LD_ADDR_VAR 0 14
25315: PUSH
25316: CALL_OW 44
25320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25321: LD_ADDR_VAR 0 7
25325: PUSH
25326: LD_VAR 0 7
25330: PPUSH
25331: LD_INT 1
25333: PPUSH
25334: LD_VAR 0 14
25338: PPUSH
25339: CALL_OW 2
25343: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25344: LD_VAR 0 14
25348: PPUSH
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 250
25358: PPUSH
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL_OW 251
25368: PPUSH
25369: LD_INT 10
25371: PPUSH
25372: LD_INT 0
25374: PPUSH
25375: CALL_OW 50
// continue ;
25379: GO 25280
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25381: LD_VAR 0 12
25385: PUSH
25386: LD_INT 1
25388: ARRAY
25389: PPUSH
25390: CALL_OW 313
25394: PUSH
25395: LD_VAR 0 12
25399: PUSH
25400: LD_INT 1
25402: ARRAY
25403: PPUSH
25404: CALL_OW 266
25408: PUSH
25409: LD_INT 32
25411: PUSH
25412: LD_INT 31
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: IN
25419: AND
25420: PUSH
25421: LD_VAR 0 12
25425: PUSH
25426: LD_INT 1
25428: ARRAY
25429: PPUSH
25430: CALL_OW 313
25434: PUSH
25435: LD_INT 6
25437: EQUAL
25438: OR
25439: IFFALSE 25459
// f := Delete ( f , 1 ) ;
25441: LD_ADDR_VAR 0 12
25445: PUSH
25446: LD_VAR 0 12
25450: PPUSH
25451: LD_INT 1
25453: PPUSH
25454: CALL_OW 3
25458: ST_TO_ADDR
// if not f then
25459: LD_VAR 0 12
25463: NOT
25464: IFFALSE 25482
// begin x := x + 2 ;
25466: LD_ADDR_VAR 0 13
25470: PUSH
25471: LD_VAR 0 13
25475: PUSH
25476: LD_INT 2
25478: PLUS
25479: ST_TO_ADDR
// continue ;
25480: GO 25280
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25482: LD_VAR 0 12
25486: PUSH
25487: LD_INT 1
25489: ARRAY
25490: PPUSH
25491: CALL_OW 266
25495: PUSH
25496: LD_INT 5
25498: EQUAL
25499: IFFALSE 25573
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25501: LD_VAR 0 12
25505: PUSH
25506: LD_INT 1
25508: ARRAY
25509: PPUSH
25510: CALL_OW 313
25514: PUSH
25515: LD_INT 3
25517: LESS
25518: IFFALSE 25554
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25520: LD_INT 0
25522: PPUSH
25523: LD_INT 5
25525: PUSH
25526: LD_INT 8
25528: PUSH
25529: LD_INT 9
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: PUSH
25537: LD_VAR 0 17
25541: ARRAY
25542: PPUSH
25543: LD_VAR 0 4
25547: PPUSH
25548: CALL_OW 380
25552: GO 25571
// PrepareHuman ( false , i , skill ) ;
25554: LD_INT 0
25556: PPUSH
25557: LD_VAR 0 8
25561: PPUSH
25562: LD_VAR 0 4
25566: PPUSH
25567: CALL_OW 380
// end else
25571: GO 25590
// PrepareHuman ( false , i , skill ) ;
25573: LD_INT 0
25575: PPUSH
25576: LD_VAR 0 8
25580: PPUSH
25581: LD_VAR 0 4
25585: PPUSH
25586: CALL_OW 380
// un := CreateHuman ;
25590: LD_ADDR_VAR 0 14
25594: PUSH
25595: CALL_OW 44
25599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25600: LD_ADDR_VAR 0 7
25604: PUSH
25605: LD_VAR 0 7
25609: PPUSH
25610: LD_INT 1
25612: PPUSH
25613: LD_VAR 0 14
25617: PPUSH
25618: CALL_OW 2
25622: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25623: LD_VAR 0 14
25627: PPUSH
25628: LD_VAR 0 12
25632: PUSH
25633: LD_INT 1
25635: ARRAY
25636: PPUSH
25637: CALL_OW 52
// end ;
25641: GO 25280
25643: POP
25644: POP
// end ;
25645: GO 24582
25647: POP
25648: POP
// result := result ^ buildings ;
25649: LD_ADDR_VAR 0 7
25653: PUSH
25654: LD_VAR 0 7
25658: PUSH
25659: LD_VAR 0 18
25663: ADD
25664: ST_TO_ADDR
// end else
25665: GO 25808
// begin for i = 1 to personel do
25667: LD_ADDR_VAR 0 8
25671: PUSH
25672: DOUBLE
25673: LD_INT 1
25675: DEC
25676: ST_TO_ADDR
25677: LD_VAR 0 6
25681: PUSH
25682: FOR_TO
25683: IFFALSE 25806
// begin if i > 4 then
25685: LD_VAR 0 8
25689: PUSH
25690: LD_INT 4
25692: GREATER
25693: IFFALSE 25697
// break ;
25695: GO 25806
// x := personel [ i ] ;
25697: LD_ADDR_VAR 0 13
25701: PUSH
25702: LD_VAR 0 6
25706: PUSH
25707: LD_VAR 0 8
25711: ARRAY
25712: ST_TO_ADDR
// if x = - 1 then
25713: LD_VAR 0 13
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: EQUAL
25722: IFFALSE 25726
// continue ;
25724: GO 25682
// PrepareHuman ( false , i , skill ) ;
25726: LD_INT 0
25728: PPUSH
25729: LD_VAR 0 8
25733: PPUSH
25734: LD_VAR 0 4
25738: PPUSH
25739: CALL_OW 380
// un := CreateHuman ;
25743: LD_ADDR_VAR 0 14
25747: PUSH
25748: CALL_OW 44
25752: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25753: LD_VAR 0 14
25757: PPUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 250
25767: PPUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 251
25777: PPUSH
25778: LD_INT 10
25780: PPUSH
25781: LD_INT 0
25783: PPUSH
25784: CALL_OW 50
// result := result ^ un ;
25788: LD_ADDR_VAR 0 7
25792: PUSH
25793: LD_VAR 0 7
25797: PUSH
25798: LD_VAR 0 14
25802: ADD
25803: ST_TO_ADDR
// end ;
25804: GO 25682
25806: POP
25807: POP
// end ; end ;
25808: LD_VAR 0 7
25812: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25813: LD_INT 0
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
25819: PPUSH
25820: PPUSH
25821: PPUSH
25822: PPUSH
25823: PPUSH
25824: PPUSH
25825: PPUSH
25826: PPUSH
25827: PPUSH
25828: PPUSH
25829: PPUSH
25830: PPUSH
// result := false ;
25831: LD_ADDR_VAR 0 3
25835: PUSH
25836: LD_INT 0
25838: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25839: LD_VAR 0 1
25843: NOT
25844: PUSH
25845: LD_VAR 0 1
25849: PPUSH
25850: CALL_OW 266
25854: PUSH
25855: LD_INT 32
25857: PUSH
25858: LD_INT 33
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: IN
25865: NOT
25866: OR
25867: IFFALSE 25871
// exit ;
25869: GO 26980
// nat := GetNation ( tower ) ;
25871: LD_ADDR_VAR 0 12
25875: PUSH
25876: LD_VAR 0 1
25880: PPUSH
25881: CALL_OW 248
25885: ST_TO_ADDR
// side := GetSide ( tower ) ;
25886: LD_ADDR_VAR 0 16
25890: PUSH
25891: LD_VAR 0 1
25895: PPUSH
25896: CALL_OW 255
25900: ST_TO_ADDR
// x := GetX ( tower ) ;
25901: LD_ADDR_VAR 0 10
25905: PUSH
25906: LD_VAR 0 1
25910: PPUSH
25911: CALL_OW 250
25915: ST_TO_ADDR
// y := GetY ( tower ) ;
25916: LD_ADDR_VAR 0 11
25920: PUSH
25921: LD_VAR 0 1
25925: PPUSH
25926: CALL_OW 251
25930: ST_TO_ADDR
// if not x or not y then
25931: LD_VAR 0 10
25935: NOT
25936: PUSH
25937: LD_VAR 0 11
25941: NOT
25942: OR
25943: IFFALSE 25947
// exit ;
25945: GO 26980
// weapon := 0 ;
25947: LD_ADDR_VAR 0 18
25951: PUSH
25952: LD_INT 0
25954: ST_TO_ADDR
// fac_list := [ ] ;
25955: LD_ADDR_VAR 0 17
25959: PUSH
25960: EMPTY
25961: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25962: LD_ADDR_VAR 0 6
25966: PUSH
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 274
25976: PPUSH
25977: LD_VAR 0 2
25981: PPUSH
25982: LD_INT 0
25984: PPUSH
25985: CALL 23551 0 3
25989: PPUSH
25990: LD_INT 30
25992: PUSH
25993: LD_INT 3
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PPUSH
26000: CALL_OW 72
26004: ST_TO_ADDR
// if not factories then
26005: LD_VAR 0 6
26009: NOT
26010: IFFALSE 26014
// exit ;
26012: GO 26980
// for i in factories do
26014: LD_ADDR_VAR 0 8
26018: PUSH
26019: LD_VAR 0 6
26023: PUSH
26024: FOR_IN
26025: IFFALSE 26050
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26027: LD_ADDR_VAR 0 17
26031: PUSH
26032: LD_VAR 0 17
26036: PUSH
26037: LD_VAR 0 8
26041: PPUSH
26042: CALL_OW 478
26046: UNION
26047: ST_TO_ADDR
26048: GO 26024
26050: POP
26051: POP
// if not fac_list then
26052: LD_VAR 0 17
26056: NOT
26057: IFFALSE 26061
// exit ;
26059: GO 26980
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26061: LD_ADDR_VAR 0 5
26065: PUSH
26066: LD_INT 4
26068: PUSH
26069: LD_INT 5
26071: PUSH
26072: LD_INT 9
26074: PUSH
26075: LD_INT 10
26077: PUSH
26078: LD_INT 6
26080: PUSH
26081: LD_INT 7
26083: PUSH
26084: LD_INT 11
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 27
26098: PUSH
26099: LD_INT 28
26101: PUSH
26102: LD_INT 26
26104: PUSH
26105: LD_INT 30
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 43
26116: PUSH
26117: LD_INT 44
26119: PUSH
26120: LD_INT 46
26122: PUSH
26123: LD_INT 45
26125: PUSH
26126: LD_INT 47
26128: PUSH
26129: LD_INT 49
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: PUSH
26145: LD_VAR 0 12
26149: ARRAY
26150: ST_TO_ADDR
// list := list isect fac_list ;
26151: LD_ADDR_VAR 0 5
26155: PUSH
26156: LD_VAR 0 5
26160: PUSH
26161: LD_VAR 0 17
26165: ISECT
26166: ST_TO_ADDR
// if not list then
26167: LD_VAR 0 5
26171: NOT
26172: IFFALSE 26176
// exit ;
26174: GO 26980
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26176: LD_VAR 0 12
26180: PUSH
26181: LD_INT 3
26183: EQUAL
26184: PUSH
26185: LD_INT 49
26187: PUSH
26188: LD_VAR 0 5
26192: IN
26193: AND
26194: PUSH
26195: LD_INT 31
26197: PPUSH
26198: LD_VAR 0 16
26202: PPUSH
26203: CALL_OW 321
26207: PUSH
26208: LD_INT 2
26210: EQUAL
26211: AND
26212: IFFALSE 26272
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26214: LD_INT 22
26216: PUSH
26217: LD_VAR 0 16
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 35
26228: PUSH
26229: LD_INT 49
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 91
26238: PUSH
26239: LD_VAR 0 1
26243: PUSH
26244: LD_INT 10
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: LIST
26256: PPUSH
26257: CALL_OW 69
26261: NOT
26262: IFFALSE 26272
// weapon := ru_time_lapser ;
26264: LD_ADDR_VAR 0 18
26268: PUSH
26269: LD_INT 49
26271: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26272: LD_VAR 0 12
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: IN
26287: PUSH
26288: LD_INT 11
26290: PUSH
26291: LD_VAR 0 5
26295: IN
26296: PUSH
26297: LD_INT 30
26299: PUSH
26300: LD_VAR 0 5
26304: IN
26305: OR
26306: AND
26307: PUSH
26308: LD_INT 6
26310: PPUSH
26311: LD_VAR 0 16
26315: PPUSH
26316: CALL_OW 321
26320: PUSH
26321: LD_INT 2
26323: EQUAL
26324: AND
26325: IFFALSE 26490
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26327: LD_INT 22
26329: PUSH
26330: LD_VAR 0 16
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: LD_INT 35
26344: PUSH
26345: LD_INT 11
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 35
26354: PUSH
26355: LD_INT 30
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 91
26369: PUSH
26370: LD_VAR 0 1
26374: PUSH
26375: LD_INT 18
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: PPUSH
26388: CALL_OW 69
26392: NOT
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_VAR 0 16
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: LD_INT 30
26411: PUSH
26412: LD_INT 32
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 30
26421: PUSH
26422: LD_INT 33
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 91
26436: PUSH
26437: LD_VAR 0 1
26441: PUSH
26442: LD_INT 12
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: PPUSH
26458: CALL_OW 69
26462: PUSH
26463: LD_INT 2
26465: GREATER
26466: AND
26467: IFFALSE 26490
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26469: LD_ADDR_VAR 0 18
26473: PUSH
26474: LD_INT 11
26476: PUSH
26477: LD_INT 30
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_VAR 0 12
26488: ARRAY
26489: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26490: LD_VAR 0 18
26494: NOT
26495: PUSH
26496: LD_INT 40
26498: PPUSH
26499: LD_VAR 0 16
26503: PPUSH
26504: CALL_OW 321
26508: PUSH
26509: LD_INT 2
26511: EQUAL
26512: AND
26513: PUSH
26514: LD_INT 7
26516: PUSH
26517: LD_VAR 0 5
26521: IN
26522: PUSH
26523: LD_INT 28
26525: PUSH
26526: LD_VAR 0 5
26530: IN
26531: OR
26532: PUSH
26533: LD_INT 45
26535: PUSH
26536: LD_VAR 0 5
26540: IN
26541: OR
26542: AND
26543: IFFALSE 26797
// begin hex := GetHexInfo ( x , y ) ;
26545: LD_ADDR_VAR 0 4
26549: PUSH
26550: LD_VAR 0 10
26554: PPUSH
26555: LD_VAR 0 11
26559: PPUSH
26560: CALL_OW 546
26564: ST_TO_ADDR
// if hex [ 1 ] then
26565: LD_VAR 0 4
26569: PUSH
26570: LD_INT 1
26572: ARRAY
26573: IFFALSE 26577
// exit ;
26575: GO 26980
// height := hex [ 2 ] ;
26577: LD_ADDR_VAR 0 15
26581: PUSH
26582: LD_VAR 0 4
26586: PUSH
26587: LD_INT 2
26589: ARRAY
26590: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26591: LD_ADDR_VAR 0 14
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 3
26604: PUSH
26605: LD_INT 5
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: ST_TO_ADDR
// for i in tmp do
26614: LD_ADDR_VAR 0 8
26618: PUSH
26619: LD_VAR 0 14
26623: PUSH
26624: FOR_IN
26625: IFFALSE 26795
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26627: LD_ADDR_VAR 0 9
26631: PUSH
26632: LD_VAR 0 10
26636: PPUSH
26637: LD_VAR 0 8
26641: PPUSH
26642: LD_INT 5
26644: PPUSH
26645: CALL_OW 272
26649: PUSH
26650: LD_VAR 0 11
26654: PPUSH
26655: LD_VAR 0 8
26659: PPUSH
26660: LD_INT 5
26662: PPUSH
26663: CALL_OW 273
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26672: LD_VAR 0 9
26676: PUSH
26677: LD_INT 1
26679: ARRAY
26680: PPUSH
26681: LD_VAR 0 9
26685: PUSH
26686: LD_INT 2
26688: ARRAY
26689: PPUSH
26690: CALL_OW 488
26694: IFFALSE 26793
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26696: LD_ADDR_VAR 0 4
26700: PUSH
26701: LD_VAR 0 9
26705: PUSH
26706: LD_INT 1
26708: ARRAY
26709: PPUSH
26710: LD_VAR 0 9
26714: PUSH
26715: LD_INT 2
26717: ARRAY
26718: PPUSH
26719: CALL_OW 546
26723: ST_TO_ADDR
// if hex [ 1 ] then
26724: LD_VAR 0 4
26728: PUSH
26729: LD_INT 1
26731: ARRAY
26732: IFFALSE 26736
// continue ;
26734: GO 26624
// h := hex [ 2 ] ;
26736: LD_ADDR_VAR 0 13
26740: PUSH
26741: LD_VAR 0 4
26745: PUSH
26746: LD_INT 2
26748: ARRAY
26749: ST_TO_ADDR
// if h + 7 < height then
26750: LD_VAR 0 13
26754: PUSH
26755: LD_INT 7
26757: PLUS
26758: PUSH
26759: LD_VAR 0 15
26763: LESS
26764: IFFALSE 26793
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26766: LD_ADDR_VAR 0 18
26770: PUSH
26771: LD_INT 7
26773: PUSH
26774: LD_INT 28
26776: PUSH
26777: LD_INT 45
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: PUSH
26785: LD_VAR 0 12
26789: ARRAY
26790: ST_TO_ADDR
// break ;
26791: GO 26795
// end ; end ; end ;
26793: GO 26624
26795: POP
26796: POP
// end ; if not weapon then
26797: LD_VAR 0 18
26801: NOT
26802: IFFALSE 26862
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26804: LD_ADDR_VAR 0 5
26808: PUSH
26809: LD_VAR 0 5
26813: PUSH
26814: LD_INT 11
26816: PUSH
26817: LD_INT 30
26819: PUSH
26820: LD_INT 49
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: DIFF
26828: ST_TO_ADDR
// if not list then
26829: LD_VAR 0 5
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26980
// weapon := list [ rand ( 1 , list ) ] ;
26838: LD_ADDR_VAR 0 18
26842: PUSH
26843: LD_VAR 0 5
26847: PUSH
26848: LD_INT 1
26850: PPUSH
26851: LD_VAR 0 5
26855: PPUSH
26856: CALL_OW 12
26860: ARRAY
26861: ST_TO_ADDR
// end ; if weapon then
26862: LD_VAR 0 18
26866: IFFALSE 26980
// begin tmp := CostOfWeapon ( weapon ) ;
26868: LD_ADDR_VAR 0 14
26872: PUSH
26873: LD_VAR 0 18
26877: PPUSH
26878: CALL_OW 451
26882: ST_TO_ADDR
// j := GetBase ( tower ) ;
26883: LD_ADDR_VAR 0 9
26887: PUSH
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 274
26897: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26898: LD_VAR 0 9
26902: PPUSH
26903: LD_INT 1
26905: PPUSH
26906: CALL_OW 275
26910: PUSH
26911: LD_VAR 0 14
26915: PUSH
26916: LD_INT 1
26918: ARRAY
26919: GREATEREQUAL
26920: PUSH
26921: LD_VAR 0 9
26925: PPUSH
26926: LD_INT 2
26928: PPUSH
26929: CALL_OW 275
26933: PUSH
26934: LD_VAR 0 14
26938: PUSH
26939: LD_INT 2
26941: ARRAY
26942: GREATEREQUAL
26943: AND
26944: PUSH
26945: LD_VAR 0 9
26949: PPUSH
26950: LD_INT 3
26952: PPUSH
26953: CALL_OW 275
26957: PUSH
26958: LD_VAR 0 14
26962: PUSH
26963: LD_INT 3
26965: ARRAY
26966: GREATEREQUAL
26967: AND
26968: IFFALSE 26980
// result := weapon ;
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: LD_VAR 0 18
26979: ST_TO_ADDR
// end ; end ;
26980: LD_VAR 0 3
26984: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26985: LD_INT 0
26987: PPUSH
26988: PPUSH
// result := true ;
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: LD_INT 1
26996: ST_TO_ADDR
// if array1 = array2 then
26997: LD_VAR 0 1
27001: PUSH
27002: LD_VAR 0 2
27006: EQUAL
27007: IFFALSE 27067
// begin for i = 1 to array1 do
27009: LD_ADDR_VAR 0 4
27013: PUSH
27014: DOUBLE
27015: LD_INT 1
27017: DEC
27018: ST_TO_ADDR
27019: LD_VAR 0 1
27023: PUSH
27024: FOR_TO
27025: IFFALSE 27063
// if array1 [ i ] <> array2 [ i ] then
27027: LD_VAR 0 1
27031: PUSH
27032: LD_VAR 0 4
27036: ARRAY
27037: PUSH
27038: LD_VAR 0 2
27042: PUSH
27043: LD_VAR 0 4
27047: ARRAY
27048: NONEQUAL
27049: IFFALSE 27061
// begin result := false ;
27051: LD_ADDR_VAR 0 3
27055: PUSH
27056: LD_INT 0
27058: ST_TO_ADDR
// break ;
27059: GO 27063
// end ;
27061: GO 27024
27063: POP
27064: POP
// end else
27065: GO 27075
// result := false ;
27067: LD_ADDR_VAR 0 3
27071: PUSH
27072: LD_INT 0
27074: ST_TO_ADDR
// end ;
27075: LD_VAR 0 3
27079: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27080: LD_INT 0
27082: PPUSH
27083: PPUSH
// if not array1 or not array2 then
27084: LD_VAR 0 1
27088: NOT
27089: PUSH
27090: LD_VAR 0 2
27094: NOT
27095: OR
27096: IFFALSE 27100
// exit ;
27098: GO 27164
// result := true ;
27100: LD_ADDR_VAR 0 3
27104: PUSH
27105: LD_INT 1
27107: ST_TO_ADDR
// for i = 1 to array1 do
27108: LD_ADDR_VAR 0 4
27112: PUSH
27113: DOUBLE
27114: LD_INT 1
27116: DEC
27117: ST_TO_ADDR
27118: LD_VAR 0 1
27122: PUSH
27123: FOR_TO
27124: IFFALSE 27162
// if array1 [ i ] <> array2 [ i ] then
27126: LD_VAR 0 1
27130: PUSH
27131: LD_VAR 0 4
27135: ARRAY
27136: PUSH
27137: LD_VAR 0 2
27141: PUSH
27142: LD_VAR 0 4
27146: ARRAY
27147: NONEQUAL
27148: IFFALSE 27160
// begin result := false ;
27150: LD_ADDR_VAR 0 3
27154: PUSH
27155: LD_INT 0
27157: ST_TO_ADDR
// break ;
27158: GO 27162
// end ;
27160: GO 27123
27162: POP
27163: POP
// end ;
27164: LD_VAR 0 3
27168: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27169: LD_INT 0
27171: PPUSH
27172: PPUSH
27173: PPUSH
// pom := GetBase ( fac ) ;
27174: LD_ADDR_VAR 0 5
27178: PUSH
27179: LD_VAR 0 1
27183: PPUSH
27184: CALL_OW 274
27188: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27189: LD_ADDR_VAR 0 4
27193: PUSH
27194: LD_VAR 0 2
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: LD_VAR 0 2
27207: PUSH
27208: LD_INT 2
27210: ARRAY
27211: PPUSH
27212: LD_VAR 0 2
27216: PUSH
27217: LD_INT 3
27219: ARRAY
27220: PPUSH
27221: LD_VAR 0 2
27225: PUSH
27226: LD_INT 4
27228: ARRAY
27229: PPUSH
27230: CALL_OW 449
27234: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_VAR 0 5
27244: PPUSH
27245: LD_INT 1
27247: PPUSH
27248: CALL_OW 275
27252: PUSH
27253: LD_VAR 0 4
27257: PUSH
27258: LD_INT 1
27260: ARRAY
27261: GREATEREQUAL
27262: PUSH
27263: LD_VAR 0 5
27267: PPUSH
27268: LD_INT 2
27270: PPUSH
27271: CALL_OW 275
27275: PUSH
27276: LD_VAR 0 4
27280: PUSH
27281: LD_INT 2
27283: ARRAY
27284: GREATEREQUAL
27285: AND
27286: PUSH
27287: LD_VAR 0 5
27291: PPUSH
27292: LD_INT 3
27294: PPUSH
27295: CALL_OW 275
27299: PUSH
27300: LD_VAR 0 4
27304: PUSH
27305: LD_INT 3
27307: ARRAY
27308: GREATEREQUAL
27309: AND
27310: ST_TO_ADDR
// end ;
27311: LD_VAR 0 3
27315: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
27320: PPUSH
27321: PPUSH
// pom := GetBase ( building ) ;
27322: LD_ADDR_VAR 0 3
27326: PUSH
27327: LD_VAR 0 1
27331: PPUSH
27332: CALL_OW 274
27336: ST_TO_ADDR
// if not pom then
27337: LD_VAR 0 3
27341: NOT
27342: IFFALSE 27346
// exit ;
27344: GO 27516
// btype := GetBType ( building ) ;
27346: LD_ADDR_VAR 0 5
27350: PUSH
27351: LD_VAR 0 1
27355: PPUSH
27356: CALL_OW 266
27360: ST_TO_ADDR
// if btype = b_armoury then
27361: LD_VAR 0 5
27365: PUSH
27366: LD_INT 4
27368: EQUAL
27369: IFFALSE 27379
// btype := b_barracks ;
27371: LD_ADDR_VAR 0 5
27375: PUSH
27376: LD_INT 5
27378: ST_TO_ADDR
// if btype = b_depot then
27379: LD_VAR 0 5
27383: PUSH
27384: LD_INT 0
27386: EQUAL
27387: IFFALSE 27397
// btype := b_warehouse ;
27389: LD_ADDR_VAR 0 5
27393: PUSH
27394: LD_INT 1
27396: ST_TO_ADDR
// if btype = b_workshop then
27397: LD_VAR 0 5
27401: PUSH
27402: LD_INT 2
27404: EQUAL
27405: IFFALSE 27415
// btype := b_factory ;
27407: LD_ADDR_VAR 0 5
27411: PUSH
27412: LD_INT 3
27414: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27415: LD_ADDR_VAR 0 4
27419: PUSH
27420: LD_VAR 0 5
27424: PPUSH
27425: LD_VAR 0 1
27429: PPUSH
27430: CALL_OW 248
27434: PPUSH
27435: CALL_OW 450
27439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27440: LD_ADDR_VAR 0 2
27444: PUSH
27445: LD_VAR 0 3
27449: PPUSH
27450: LD_INT 1
27452: PPUSH
27453: CALL_OW 275
27457: PUSH
27458: LD_VAR 0 4
27462: PUSH
27463: LD_INT 1
27465: ARRAY
27466: GREATEREQUAL
27467: PUSH
27468: LD_VAR 0 3
27472: PPUSH
27473: LD_INT 2
27475: PPUSH
27476: CALL_OW 275
27480: PUSH
27481: LD_VAR 0 4
27485: PUSH
27486: LD_INT 2
27488: ARRAY
27489: GREATEREQUAL
27490: AND
27491: PUSH
27492: LD_VAR 0 3
27496: PPUSH
27497: LD_INT 3
27499: PPUSH
27500: CALL_OW 275
27504: PUSH
27505: LD_VAR 0 4
27509: PUSH
27510: LD_INT 3
27512: ARRAY
27513: GREATEREQUAL
27514: AND
27515: ST_TO_ADDR
// end ;
27516: LD_VAR 0 2
27520: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27521: LD_INT 0
27523: PPUSH
27524: PPUSH
27525: PPUSH
// pom := GetBase ( building ) ;
27526: LD_ADDR_VAR 0 4
27530: PUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 274
27540: ST_TO_ADDR
// if not pom then
27541: LD_VAR 0 4
27545: NOT
27546: IFFALSE 27550
// exit ;
27548: GO 27651
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27550: LD_ADDR_VAR 0 5
27554: PUSH
27555: LD_VAR 0 2
27559: PPUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 248
27569: PPUSH
27570: CALL_OW 450
27574: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27575: LD_ADDR_VAR 0 3
27579: PUSH
27580: LD_VAR 0 4
27584: PPUSH
27585: LD_INT 1
27587: PPUSH
27588: CALL_OW 275
27592: PUSH
27593: LD_VAR 0 5
27597: PUSH
27598: LD_INT 1
27600: ARRAY
27601: GREATEREQUAL
27602: PUSH
27603: LD_VAR 0 4
27607: PPUSH
27608: LD_INT 2
27610: PPUSH
27611: CALL_OW 275
27615: PUSH
27616: LD_VAR 0 5
27620: PUSH
27621: LD_INT 2
27623: ARRAY
27624: GREATEREQUAL
27625: AND
27626: PUSH
27627: LD_VAR 0 4
27631: PPUSH
27632: LD_INT 3
27634: PPUSH
27635: CALL_OW 275
27639: PUSH
27640: LD_VAR 0 5
27644: PUSH
27645: LD_INT 3
27647: ARRAY
27648: GREATEREQUAL
27649: AND
27650: ST_TO_ADDR
// end ;
27651: LD_VAR 0 3
27655: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
27662: PPUSH
27663: PPUSH
27664: PPUSH
27665: PPUSH
27666: PPUSH
27667: PPUSH
27668: PPUSH
// result := false ;
27669: LD_ADDR_VAR 0 8
27673: PUSH
27674: LD_INT 0
27676: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27677: LD_VAR 0 5
27681: NOT
27682: PUSH
27683: LD_VAR 0 1
27687: NOT
27688: OR
27689: PUSH
27690: LD_VAR 0 2
27694: NOT
27695: OR
27696: PUSH
27697: LD_VAR 0 3
27701: NOT
27702: OR
27703: IFFALSE 27707
// exit ;
27705: GO 28521
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27707: LD_ADDR_VAR 0 14
27711: PUSH
27712: LD_VAR 0 1
27716: PPUSH
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_VAR 0 3
27726: PPUSH
27727: LD_VAR 0 4
27731: PPUSH
27732: LD_VAR 0 5
27736: PUSH
27737: LD_INT 1
27739: ARRAY
27740: PPUSH
27741: CALL_OW 248
27745: PPUSH
27746: LD_INT 0
27748: PPUSH
27749: CALL 29774 0 6
27753: ST_TO_ADDR
// if not hexes then
27754: LD_VAR 0 14
27758: NOT
27759: IFFALSE 27763
// exit ;
27761: GO 28521
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27763: LD_ADDR_VAR 0 17
27767: PUSH
27768: LD_VAR 0 5
27772: PPUSH
27773: LD_INT 22
27775: PUSH
27776: LD_VAR 0 13
27780: PPUSH
27781: CALL_OW 255
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: LD_INT 30
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 30
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PPUSH
27822: CALL_OW 72
27826: ST_TO_ADDR
// for i = 1 to hexes do
27827: LD_ADDR_VAR 0 9
27831: PUSH
27832: DOUBLE
27833: LD_INT 1
27835: DEC
27836: ST_TO_ADDR
27837: LD_VAR 0 14
27841: PUSH
27842: FOR_TO
27843: IFFALSE 28519
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27845: LD_ADDR_VAR 0 13
27849: PUSH
27850: LD_VAR 0 14
27854: PUSH
27855: LD_VAR 0 9
27859: ARRAY
27860: PUSH
27861: LD_INT 1
27863: ARRAY
27864: PPUSH
27865: LD_VAR 0 14
27869: PUSH
27870: LD_VAR 0 9
27874: ARRAY
27875: PUSH
27876: LD_INT 2
27878: ARRAY
27879: PPUSH
27880: CALL_OW 428
27884: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27885: LD_VAR 0 14
27889: PUSH
27890: LD_VAR 0 9
27894: ARRAY
27895: PUSH
27896: LD_INT 1
27898: ARRAY
27899: PPUSH
27900: LD_VAR 0 14
27904: PUSH
27905: LD_VAR 0 9
27909: ARRAY
27910: PUSH
27911: LD_INT 2
27913: ARRAY
27914: PPUSH
27915: CALL_OW 351
27919: PUSH
27920: LD_VAR 0 14
27924: PUSH
27925: LD_VAR 0 9
27929: ARRAY
27930: PUSH
27931: LD_INT 1
27933: ARRAY
27934: PPUSH
27935: LD_VAR 0 14
27939: PUSH
27940: LD_VAR 0 9
27944: ARRAY
27945: PUSH
27946: LD_INT 2
27948: ARRAY
27949: PPUSH
27950: CALL_OW 488
27954: NOT
27955: OR
27956: PUSH
27957: LD_VAR 0 13
27961: PPUSH
27962: CALL_OW 247
27966: PUSH
27967: LD_INT 3
27969: EQUAL
27970: OR
27971: IFFALSE 27977
// exit ;
27973: POP
27974: POP
27975: GO 28521
// if not tmp then
27977: LD_VAR 0 13
27981: NOT
27982: IFFALSE 27986
// continue ;
27984: GO 27842
// result := true ;
27986: LD_ADDR_VAR 0 8
27990: PUSH
27991: LD_INT 1
27993: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27994: LD_VAR 0 6
27998: PUSH
27999: LD_VAR 0 13
28003: PPUSH
28004: CALL_OW 247
28008: PUSH
28009: LD_INT 2
28011: EQUAL
28012: AND
28013: PUSH
28014: LD_VAR 0 13
28018: PPUSH
28019: CALL_OW 263
28023: PUSH
28024: LD_INT 1
28026: EQUAL
28027: AND
28028: IFFALSE 28192
// begin if IsDrivenBy ( tmp ) then
28030: LD_VAR 0 13
28034: PPUSH
28035: CALL_OW 311
28039: IFFALSE 28043
// continue ;
28041: GO 27842
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28043: LD_VAR 0 6
28047: PPUSH
28048: LD_INT 3
28050: PUSH
28051: LD_INT 60
28053: PUSH
28054: EMPTY
28055: LIST
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: LD_INT 55
28066: PUSH
28067: EMPTY
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PPUSH
28078: CALL_OW 72
28082: IFFALSE 28190
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28084: LD_ADDR_VAR 0 18
28088: PUSH
28089: LD_VAR 0 6
28093: PPUSH
28094: LD_INT 3
28096: PUSH
28097: LD_INT 60
28099: PUSH
28100: EMPTY
28101: LIST
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 3
28109: PUSH
28110: LD_INT 55
28112: PUSH
28113: EMPTY
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PPUSH
28124: CALL_OW 72
28128: PUSH
28129: LD_INT 1
28131: ARRAY
28132: ST_TO_ADDR
// if IsInUnit ( driver ) then
28133: LD_VAR 0 18
28137: PPUSH
28138: CALL_OW 310
28142: IFFALSE 28153
// ComExit ( driver ) ;
28144: LD_VAR 0 18
28148: PPUSH
28149: CALL 53575 0 1
// AddComEnterUnit ( driver , tmp ) ;
28153: LD_VAR 0 18
28157: PPUSH
28158: LD_VAR 0 13
28162: PPUSH
28163: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28167: LD_VAR 0 18
28171: PPUSH
28172: LD_VAR 0 7
28176: PPUSH
28177: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28181: LD_VAR 0 18
28185: PPUSH
28186: CALL_OW 181
// end ; continue ;
28190: GO 27842
// end ; if not cleaners or not tmp in cleaners then
28192: LD_VAR 0 6
28196: NOT
28197: PUSH
28198: LD_VAR 0 13
28202: PUSH
28203: LD_VAR 0 6
28207: IN
28208: NOT
28209: OR
28210: IFFALSE 28517
// begin if dep then
28212: LD_VAR 0 17
28216: IFFALSE 28352
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28218: LD_ADDR_VAR 0 16
28222: PUSH
28223: LD_VAR 0 17
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: PPUSH
28232: CALL_OW 250
28236: PPUSH
28237: LD_VAR 0 17
28241: PUSH
28242: LD_INT 1
28244: ARRAY
28245: PPUSH
28246: CALL_OW 254
28250: PPUSH
28251: LD_INT 5
28253: PPUSH
28254: CALL_OW 272
28258: PUSH
28259: LD_VAR 0 17
28263: PUSH
28264: LD_INT 1
28266: ARRAY
28267: PPUSH
28268: CALL_OW 251
28272: PPUSH
28273: LD_VAR 0 17
28277: PUSH
28278: LD_INT 1
28280: ARRAY
28281: PPUSH
28282: CALL_OW 254
28286: PPUSH
28287: LD_INT 5
28289: PPUSH
28290: CALL_OW 273
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28299: LD_VAR 0 16
28303: PUSH
28304: LD_INT 1
28306: ARRAY
28307: PPUSH
28308: LD_VAR 0 16
28312: PUSH
28313: LD_INT 2
28315: ARRAY
28316: PPUSH
28317: CALL_OW 488
28321: IFFALSE 28352
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28323: LD_VAR 0 13
28327: PPUSH
28328: LD_VAR 0 16
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PPUSH
28337: LD_VAR 0 16
28341: PUSH
28342: LD_INT 2
28344: ARRAY
28345: PPUSH
28346: CALL_OW 111
// continue ;
28350: GO 27842
// end ; end ; r := GetDir ( tmp ) ;
28352: LD_ADDR_VAR 0 15
28356: PUSH
28357: LD_VAR 0 13
28361: PPUSH
28362: CALL_OW 254
28366: ST_TO_ADDR
// if r = 5 then
28367: LD_VAR 0 15
28371: PUSH
28372: LD_INT 5
28374: EQUAL
28375: IFFALSE 28385
// r := 0 ;
28377: LD_ADDR_VAR 0 15
28381: PUSH
28382: LD_INT 0
28384: ST_TO_ADDR
// for j = r to 5 do
28385: LD_ADDR_VAR 0 10
28389: PUSH
28390: DOUBLE
28391: LD_VAR 0 15
28395: DEC
28396: ST_TO_ADDR
28397: LD_INT 5
28399: PUSH
28400: FOR_TO
28401: IFFALSE 28515
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28403: LD_ADDR_VAR 0 11
28407: PUSH
28408: LD_VAR 0 13
28412: PPUSH
28413: CALL_OW 250
28417: PPUSH
28418: LD_VAR 0 10
28422: PPUSH
28423: LD_INT 2
28425: PPUSH
28426: CALL_OW 272
28430: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28431: LD_ADDR_VAR 0 12
28435: PUSH
28436: LD_VAR 0 13
28440: PPUSH
28441: CALL_OW 251
28445: PPUSH
28446: LD_VAR 0 10
28450: PPUSH
28451: LD_INT 2
28453: PPUSH
28454: CALL_OW 273
28458: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28459: LD_VAR 0 11
28463: PPUSH
28464: LD_VAR 0 12
28468: PPUSH
28469: CALL_OW 488
28473: PUSH
28474: LD_VAR 0 11
28478: PPUSH
28479: LD_VAR 0 12
28483: PPUSH
28484: CALL_OW 428
28488: NOT
28489: AND
28490: IFFALSE 28513
// begin ComMoveXY ( tmp , _x , _y ) ;
28492: LD_VAR 0 13
28496: PPUSH
28497: LD_VAR 0 11
28501: PPUSH
28502: LD_VAR 0 12
28506: PPUSH
28507: CALL_OW 111
// break ;
28511: GO 28515
// end ; end ;
28513: GO 28400
28515: POP
28516: POP
// end ; end ;
28517: GO 27842
28519: POP
28520: POP
// end ;
28521: LD_VAR 0 8
28525: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28526: LD_INT 0
28528: PPUSH
// result := true ;
28529: LD_ADDR_VAR 0 3
28533: PUSH
28534: LD_INT 1
28536: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28537: LD_VAR 0 2
28541: PUSH
28542: LD_INT 24
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28556
28548: LD_INT 33
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28581
28556: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28557: LD_ADDR_VAR 0 3
28561: PUSH
28562: LD_INT 32
28564: PPUSH
28565: LD_VAR 0 1
28569: PPUSH
28570: CALL_OW 321
28574: PUSH
28575: LD_INT 2
28577: EQUAL
28578: ST_TO_ADDR
28579: GO 28897
28581: LD_INT 20
28583: DOUBLE
28584: EQUAL
28585: IFTRUE 28589
28587: GO 28614
28589: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_INT 6
28597: PPUSH
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 321
28607: PUSH
28608: LD_INT 2
28610: EQUAL
28611: ST_TO_ADDR
28612: GO 28897
28614: LD_INT 22
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28628
28620: LD_INT 36
28622: DOUBLE
28623: EQUAL
28624: IFTRUE 28628
28626: GO 28653
28628: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28629: LD_ADDR_VAR 0 3
28633: PUSH
28634: LD_INT 15
28636: PPUSH
28637: LD_VAR 0 1
28641: PPUSH
28642: CALL_OW 321
28646: PUSH
28647: LD_INT 2
28649: EQUAL
28650: ST_TO_ADDR
28651: GO 28897
28653: LD_INT 30
28655: DOUBLE
28656: EQUAL
28657: IFTRUE 28661
28659: GO 28686
28661: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28662: LD_ADDR_VAR 0 3
28666: PUSH
28667: LD_INT 20
28669: PPUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL_OW 321
28679: PUSH
28680: LD_INT 2
28682: EQUAL
28683: ST_TO_ADDR
28684: GO 28897
28686: LD_INT 28
28688: DOUBLE
28689: EQUAL
28690: IFTRUE 28700
28692: LD_INT 21
28694: DOUBLE
28695: EQUAL
28696: IFTRUE 28700
28698: GO 28725
28700: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28701: LD_ADDR_VAR 0 3
28705: PUSH
28706: LD_INT 21
28708: PPUSH
28709: LD_VAR 0 1
28713: PPUSH
28714: CALL_OW 321
28718: PUSH
28719: LD_INT 2
28721: EQUAL
28722: ST_TO_ADDR
28723: GO 28897
28725: LD_INT 16
28727: DOUBLE
28728: EQUAL
28729: IFTRUE 28733
28731: GO 28758
28733: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28734: LD_ADDR_VAR 0 3
28738: PUSH
28739: LD_INT 84
28741: PPUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 321
28751: PUSH
28752: LD_INT 2
28754: EQUAL
28755: ST_TO_ADDR
28756: GO 28897
28758: LD_INT 19
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28772
28764: LD_INT 23
28766: DOUBLE
28767: EQUAL
28768: IFTRUE 28772
28770: GO 28797
28772: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28773: LD_ADDR_VAR 0 3
28777: PUSH
28778: LD_INT 83
28780: PPUSH
28781: LD_VAR 0 1
28785: PPUSH
28786: CALL_OW 321
28790: PUSH
28791: LD_INT 2
28793: EQUAL
28794: ST_TO_ADDR
28795: GO 28897
28797: LD_INT 17
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28805
28803: GO 28830
28805: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: LD_INT 39
28813: PPUSH
28814: LD_VAR 0 1
28818: PPUSH
28819: CALL_OW 321
28823: PUSH
28824: LD_INT 2
28826: EQUAL
28827: ST_TO_ADDR
28828: GO 28897
28830: LD_INT 18
28832: DOUBLE
28833: EQUAL
28834: IFTRUE 28838
28836: GO 28863
28838: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28839: LD_ADDR_VAR 0 3
28843: PUSH
28844: LD_INT 40
28846: PPUSH
28847: LD_VAR 0 1
28851: PPUSH
28852: CALL_OW 321
28856: PUSH
28857: LD_INT 2
28859: EQUAL
28860: ST_TO_ADDR
28861: GO 28897
28863: LD_INT 27
28865: DOUBLE
28866: EQUAL
28867: IFTRUE 28871
28869: GO 28896
28871: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28872: LD_ADDR_VAR 0 3
28876: PUSH
28877: LD_INT 35
28879: PPUSH
28880: LD_VAR 0 1
28884: PPUSH
28885: CALL_OW 321
28889: PUSH
28890: LD_INT 2
28892: EQUAL
28893: ST_TO_ADDR
28894: GO 28897
28896: POP
// end ;
28897: LD_VAR 0 3
28901: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28902: LD_INT 0
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
28908: PPUSH
28909: PPUSH
28910: PPUSH
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
// result := false ;
28915: LD_ADDR_VAR 0 6
28919: PUSH
28920: LD_INT 0
28922: ST_TO_ADDR
// if btype = b_depot then
28923: LD_VAR 0 2
28927: PUSH
28928: LD_INT 0
28930: EQUAL
28931: IFFALSE 28943
// begin result := true ;
28933: LD_ADDR_VAR 0 6
28937: PUSH
28938: LD_INT 1
28940: ST_TO_ADDR
// exit ;
28941: GO 29769
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28943: LD_VAR 0 1
28947: NOT
28948: PUSH
28949: LD_VAR 0 1
28953: PPUSH
28954: CALL_OW 266
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: IN
28969: NOT
28970: OR
28971: PUSH
28972: LD_VAR 0 2
28976: NOT
28977: OR
28978: PUSH
28979: LD_VAR 0 5
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: LD_INT 3
28995: PUSH
28996: LD_INT 4
28998: PUSH
28999: LD_INT 5
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: IN
29010: NOT
29011: OR
29012: PUSH
29013: LD_VAR 0 3
29017: PPUSH
29018: LD_VAR 0 4
29022: PPUSH
29023: CALL_OW 488
29027: NOT
29028: OR
29029: IFFALSE 29033
// exit ;
29031: GO 29769
// side := GetSide ( depot ) ;
29033: LD_ADDR_VAR 0 9
29037: PUSH
29038: LD_VAR 0 1
29042: PPUSH
29043: CALL_OW 255
29047: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29048: LD_VAR 0 9
29052: PPUSH
29053: LD_VAR 0 2
29057: PPUSH
29058: CALL 28526 0 2
29062: NOT
29063: IFFALSE 29067
// exit ;
29065: GO 29769
// pom := GetBase ( depot ) ;
29067: LD_ADDR_VAR 0 10
29071: PUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 274
29081: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29082: LD_ADDR_VAR 0 11
29086: PUSH
29087: LD_VAR 0 2
29091: PPUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 248
29101: PPUSH
29102: CALL_OW 450
29106: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29107: LD_VAR 0 10
29111: PPUSH
29112: LD_INT 1
29114: PPUSH
29115: CALL_OW 275
29119: PUSH
29120: LD_VAR 0 11
29124: PUSH
29125: LD_INT 1
29127: ARRAY
29128: GREATEREQUAL
29129: PUSH
29130: LD_VAR 0 10
29134: PPUSH
29135: LD_INT 2
29137: PPUSH
29138: CALL_OW 275
29142: PUSH
29143: LD_VAR 0 11
29147: PUSH
29148: LD_INT 2
29150: ARRAY
29151: GREATEREQUAL
29152: AND
29153: PUSH
29154: LD_VAR 0 10
29158: PPUSH
29159: LD_INT 3
29161: PPUSH
29162: CALL_OW 275
29166: PUSH
29167: LD_VAR 0 11
29171: PUSH
29172: LD_INT 3
29174: ARRAY
29175: GREATEREQUAL
29176: AND
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29769
// if GetBType ( depot ) = b_depot then
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 266
29191: PUSH
29192: LD_INT 0
29194: EQUAL
29195: IFFALSE 29207
// dist := 28 else
29197: LD_ADDR_VAR 0 14
29201: PUSH
29202: LD_INT 28
29204: ST_TO_ADDR
29205: GO 29215
// dist := 36 ;
29207: LD_ADDR_VAR 0 14
29211: PUSH
29212: LD_INT 36
29214: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29215: LD_VAR 0 1
29219: PPUSH
29220: LD_VAR 0 3
29224: PPUSH
29225: LD_VAR 0 4
29229: PPUSH
29230: CALL_OW 297
29234: PUSH
29235: LD_VAR 0 14
29239: GREATER
29240: IFFALSE 29244
// exit ;
29242: GO 29769
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29244: LD_ADDR_VAR 0 12
29248: PUSH
29249: LD_VAR 0 2
29253: PPUSH
29254: LD_VAR 0 3
29258: PPUSH
29259: LD_VAR 0 4
29263: PPUSH
29264: LD_VAR 0 5
29268: PPUSH
29269: LD_VAR 0 1
29273: PPUSH
29274: CALL_OW 248
29278: PPUSH
29279: LD_INT 0
29281: PPUSH
29282: CALL 29774 0 6
29286: ST_TO_ADDR
// if not hexes then
29287: LD_VAR 0 12
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29769
// hex := GetHexInfo ( x , y ) ;
29296: LD_ADDR_VAR 0 15
29300: PUSH
29301: LD_VAR 0 3
29305: PPUSH
29306: LD_VAR 0 4
29310: PPUSH
29311: CALL_OW 546
29315: ST_TO_ADDR
// if hex [ 1 ] then
29316: LD_VAR 0 15
29320: PUSH
29321: LD_INT 1
29323: ARRAY
29324: IFFALSE 29328
// exit ;
29326: GO 29769
// height := hex [ 2 ] ;
29328: LD_ADDR_VAR 0 13
29332: PUSH
29333: LD_VAR 0 15
29337: PUSH
29338: LD_INT 2
29340: ARRAY
29341: ST_TO_ADDR
// for i = 1 to hexes do
29342: LD_ADDR_VAR 0 7
29346: PUSH
29347: DOUBLE
29348: LD_INT 1
29350: DEC
29351: ST_TO_ADDR
29352: LD_VAR 0 12
29356: PUSH
29357: FOR_TO
29358: IFFALSE 29688
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29360: LD_VAR 0 12
29364: PUSH
29365: LD_VAR 0 7
29369: ARRAY
29370: PUSH
29371: LD_INT 1
29373: ARRAY
29374: PPUSH
29375: LD_VAR 0 12
29379: PUSH
29380: LD_VAR 0 7
29384: ARRAY
29385: PUSH
29386: LD_INT 2
29388: ARRAY
29389: PPUSH
29390: CALL_OW 488
29394: NOT
29395: PUSH
29396: LD_VAR 0 12
29400: PUSH
29401: LD_VAR 0 7
29405: ARRAY
29406: PUSH
29407: LD_INT 1
29409: ARRAY
29410: PPUSH
29411: LD_VAR 0 12
29415: PUSH
29416: LD_VAR 0 7
29420: ARRAY
29421: PUSH
29422: LD_INT 2
29424: ARRAY
29425: PPUSH
29426: CALL_OW 428
29430: PUSH
29431: LD_INT 0
29433: GREATER
29434: OR
29435: PUSH
29436: LD_VAR 0 12
29440: PUSH
29441: LD_VAR 0 7
29445: ARRAY
29446: PUSH
29447: LD_INT 1
29449: ARRAY
29450: PPUSH
29451: LD_VAR 0 12
29455: PUSH
29456: LD_VAR 0 7
29460: ARRAY
29461: PUSH
29462: LD_INT 2
29464: ARRAY
29465: PPUSH
29466: CALL_OW 351
29470: OR
29471: IFFALSE 29477
// exit ;
29473: POP
29474: POP
29475: GO 29769
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29477: LD_ADDR_VAR 0 8
29481: PUSH
29482: LD_VAR 0 12
29486: PUSH
29487: LD_VAR 0 7
29491: ARRAY
29492: PUSH
29493: LD_INT 1
29495: ARRAY
29496: PPUSH
29497: LD_VAR 0 12
29501: PUSH
29502: LD_VAR 0 7
29506: ARRAY
29507: PUSH
29508: LD_INT 2
29510: ARRAY
29511: PPUSH
29512: CALL_OW 546
29516: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29517: LD_VAR 0 8
29521: PUSH
29522: LD_INT 1
29524: ARRAY
29525: PUSH
29526: LD_VAR 0 8
29530: PUSH
29531: LD_INT 2
29533: ARRAY
29534: PUSH
29535: LD_VAR 0 13
29539: PUSH
29540: LD_INT 2
29542: PLUS
29543: GREATER
29544: OR
29545: PUSH
29546: LD_VAR 0 8
29550: PUSH
29551: LD_INT 2
29553: ARRAY
29554: PUSH
29555: LD_VAR 0 13
29559: PUSH
29560: LD_INT 2
29562: MINUS
29563: LESS
29564: OR
29565: PUSH
29566: LD_VAR 0 8
29570: PUSH
29571: LD_INT 3
29573: ARRAY
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 8
29580: PUSH
29581: LD_INT 9
29583: PUSH
29584: LD_INT 10
29586: PUSH
29587: LD_INT 11
29589: PUSH
29590: LD_INT 12
29592: PUSH
29593: LD_INT 13
29595: PUSH
29596: LD_INT 16
29598: PUSH
29599: LD_INT 17
29601: PUSH
29602: LD_INT 18
29604: PUSH
29605: LD_INT 19
29607: PUSH
29608: LD_INT 20
29610: PUSH
29611: LD_INT 21
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: IN
29629: NOT
29630: OR
29631: PUSH
29632: LD_VAR 0 8
29636: PUSH
29637: LD_INT 5
29639: ARRAY
29640: NOT
29641: OR
29642: PUSH
29643: LD_VAR 0 8
29647: PUSH
29648: LD_INT 6
29650: ARRAY
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 7
29660: PUSH
29661: LD_INT 9
29663: PUSH
29664: LD_INT 10
29666: PUSH
29667: LD_INT 11
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: IN
29678: NOT
29679: OR
29680: IFFALSE 29686
// exit ;
29682: POP
29683: POP
29684: GO 29769
// end ;
29686: GO 29357
29688: POP
29689: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29690: LD_VAR 0 9
29694: PPUSH
29695: LD_VAR 0 3
29699: PPUSH
29700: LD_VAR 0 4
29704: PPUSH
29705: LD_INT 20
29707: PPUSH
29708: CALL 21692 0 4
29712: PUSH
29713: LD_INT 4
29715: ARRAY
29716: IFFALSE 29720
// exit ;
29718: GO 29769
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29720: LD_VAR 0 2
29724: PUSH
29725: LD_INT 29
29727: PUSH
29728: LD_INT 30
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: IN
29735: PUSH
29736: LD_VAR 0 3
29740: PPUSH
29741: LD_VAR 0 4
29745: PPUSH
29746: LD_VAR 0 9
29750: PPUSH
29751: CALL_OW 440
29755: NOT
29756: AND
29757: IFFALSE 29761
// exit ;
29759: GO 29769
// result := true ;
29761: LD_ADDR_VAR 0 6
29765: PUSH
29766: LD_INT 1
29768: ST_TO_ADDR
// end ;
29769: LD_VAR 0 6
29773: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29774: LD_INT 0
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
// result = [ ] ;
29834: LD_ADDR_VAR 0 7
29838: PUSH
29839: EMPTY
29840: ST_TO_ADDR
// temp_list = [ ] ;
29841: LD_ADDR_VAR 0 9
29845: PUSH
29846: EMPTY
29847: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29848: LD_VAR 0 4
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 2
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: LD_INT 4
29867: PUSH
29868: LD_INT 5
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: IN
29879: NOT
29880: PUSH
29881: LD_VAR 0 1
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: IN
29896: PUSH
29897: LD_VAR 0 5
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: IN
29916: NOT
29917: AND
29918: OR
29919: IFFALSE 29923
// exit ;
29921: GO 48314
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29923: LD_VAR 0 1
29927: PUSH
29928: LD_INT 6
29930: PUSH
29931: LD_INT 7
29933: PUSH
29934: LD_INT 8
29936: PUSH
29937: LD_INT 13
29939: PUSH
29940: LD_INT 12
29942: PUSH
29943: LD_INT 15
29945: PUSH
29946: LD_INT 11
29948: PUSH
29949: LD_INT 14
29951: PUSH
29952: LD_INT 10
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: IN
29966: IFFALSE 29976
// btype = b_lab ;
29968: LD_ADDR_VAR 0 1
29972: PUSH
29973: LD_INT 6
29975: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29976: LD_VAR 0 6
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: LIST
29994: IN
29995: NOT
29996: PUSH
29997: LD_VAR 0 1
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 3
30013: PUSH
30014: LD_INT 6
30016: PUSH
30017: LD_INT 36
30019: PUSH
30020: LD_INT 4
30022: PUSH
30023: LD_INT 5
30025: PUSH
30026: LD_INT 31
30028: PUSH
30029: LD_INT 32
30031: PUSH
30032: LD_INT 33
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: IN
30048: NOT
30049: PUSH
30050: LD_VAR 0 6
30054: PUSH
30055: LD_INT 1
30057: EQUAL
30058: AND
30059: OR
30060: PUSH
30061: LD_VAR 0 1
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 3
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: IN
30076: NOT
30077: PUSH
30078: LD_VAR 0 6
30082: PUSH
30083: LD_INT 2
30085: EQUAL
30086: AND
30087: OR
30088: IFFALSE 30098
// mode = 0 ;
30090: LD_ADDR_VAR 0 6
30094: PUSH
30095: LD_INT 0
30097: ST_TO_ADDR
// case mode of 0 :
30098: LD_VAR 0 6
30102: PUSH
30103: LD_INT 0
30105: DOUBLE
30106: EQUAL
30107: IFTRUE 30111
30109: GO 41564
30111: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30112: LD_ADDR_VAR 0 11
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: LD_INT 2
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30305: LD_ADDR_VAR 0 12
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 0
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 2
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: NEG
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: NEG
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30501: LD_ADDR_VAR 0 13
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 2
30636: NEG
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: LD_INT 3
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: NEG
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30700: LD_ADDR_VAR 0 14
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: LD_INT 3
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30896: LD_ADDR_VAR 0 15
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 3
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31089: LD_ADDR_VAR 0 16
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: NEG
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 2
31224: NEG
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 3
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31282: LD_ADDR_VAR 0 17
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31512: LD_ADDR_VAR 0 18
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 0
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31742: LD_ADDR_VAR 0 19
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: LD_INT 2
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 2
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31972: LD_ADDR_VAR 0 20
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 2
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: LD_INT 2
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 2
32159: NEG
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32202: LD_ADDR_VAR 0 21
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32432: LD_ADDR_VAR 0 22
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 2
32608: NEG
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 2
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32662: LD_ADDR_VAR 0 23
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 2
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 3
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32942: LD_ADDR_VAR 0 24
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 2
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: LD_INT 2
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 2
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33218: LD_ADDR_VAR 0 25
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 3
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33492: LD_ADDR_VAR 0 26
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 2
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: NEG
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 3
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 3
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33768: LD_ADDR_VAR 0 27
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 1
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: LD_INT 2
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: NEG
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 2
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 2
33990: NEG
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 3
34001: NEG
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: NEG
34014: PUSH
34015: LD_INT 2
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34048: LD_ADDR_VAR 0 28
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: LD_INT 3
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 3
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 3
34283: NEG
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 3
34295: NEG
34296: PUSH
34297: LD_INT 2
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34330: LD_ADDR_VAR 0 29
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 2
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: NEG
34521: PUSH
34522: LD_INT 3
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 3
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: LD_INT 2
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34609: LD_ADDR_VAR 0 30
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: NEG
34799: PUSH
34800: LD_INT 3
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 3
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 3
34852: NEG
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34887: LD_ADDR_VAR 0 31
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: LD_INT 3
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 3
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 3
35130: NEG
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35165: LD_ADDR_VAR 0 32
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 3
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 3
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 3
35408: NEG
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35443: LD_ADDR_VAR 0 33
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: NEG
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: LD_INT 3
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 3
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 3
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: NEG
35688: PUSH
35689: LD_INT 2
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35722: LD_ADDR_VAR 0 34
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 2
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: NEG
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: LD_INT 2
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: LD_INT 3
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 3
35967: NEG
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36002: LD_ADDR_VAR 0 35
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 2
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36114: LD_ADDR_VAR 0 36
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36226: LD_ADDR_VAR 0 37
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36338: LD_ADDR_VAR 0 38
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36450: LD_ADDR_VAR 0 39
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36562: LD_ADDR_VAR 0 40
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36674: LD_ADDR_VAR 0 41
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: LD_INT 2
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 2
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 3
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 3
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: LD_INT 2
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 3
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: NEG
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 3
36948: NEG
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 3
36959: NEG
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 3
36971: NEG
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 3
36983: NEG
36984: PUSH
36985: LD_INT 3
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37024: LD_ADDR_VAR 0 42
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: LD_INT 3
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 3
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 3
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 2
37280: PUSH
37281: LD_INT 3
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: LD_INT 3
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 3
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 3
37321: NEG
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 3
37333: NEG
37334: PUSH
37335: LD_INT 3
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37374: LD_ADDR_VAR 0 43
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 2
37540: NEG
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 3
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 3
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 3
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37722: LD_ADDR_VAR 0 44
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: NEG
37913: PUSH
37914: LD_INT 3
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 3
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 3
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 3
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 3
37965: PUSH
37966: LD_INT 3
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 2
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 3
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 3
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 3
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 3
38031: NEG
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38072: LD_ADDR_VAR 0 45
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: LD_INT 3
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 3
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 3
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 3
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 2
38328: PUSH
38329: LD_INT 3
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 3
38369: NEG
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 3
38381: NEG
38382: PUSH
38383: LD_INT 3
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38422: LD_ADDR_VAR 0 46
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 2
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 2
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 1
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: LD_INT 3
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 3
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: LD_INT 2
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 3
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 3
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 3
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 3
38729: NEG
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38770: LD_ADDR_VAR 0 47
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38921: LD_ADDR_VAR 0 48
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39068: LD_ADDR_VAR 0 49
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 2
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39212: LD_ADDR_VAR 0 50
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39356: LD_ADDR_VAR 0 51
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39503: LD_ADDR_VAR 0 52
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39654: LD_ADDR_VAR 0 53
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39884: LD_ADDR_VAR 0 54
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: LD_INT 2
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40114: LD_ADDR_VAR 0 55
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40344: LD_ADDR_VAR 0 56
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: NEG
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40574: LD_ADDR_VAR 0 57
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40804: LD_ADDR_VAR 0 58
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41034: LD_ADDR_VAR 0 59
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41122: LD_ADDR_VAR 0 60
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41210: LD_ADDR_VAR 0 61
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41298: LD_ADDR_VAR 0 62
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41386: LD_ADDR_VAR 0 63
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41474: LD_ADDR_VAR 0 64
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: ST_TO_ADDR
// end ; 1 :
41562: GO 47459
41564: LD_INT 1
41566: DOUBLE
41567: EQUAL
41568: IFTRUE 41572
41570: GO 44195
41572: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41573: LD_ADDR_VAR 0 11
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 3
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41617: LD_ADDR_VAR 0 12
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 3
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41658: LD_ADDR_VAR 0 13
41662: PUSH
41663: LD_INT 3
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41698: LD_ADDR_VAR 0 14
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41739: LD_ADDR_VAR 0 15
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: NEG
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41783: LD_ADDR_VAR 0 16
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 3
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 3
41802: NEG
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 3
41814: NEG
41815: PUSH
41816: LD_INT 3
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41829: LD_ADDR_VAR 0 17
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41873: LD_ADDR_VAR 0 18
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 3
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41914: LD_ADDR_VAR 0 19
41918: PUSH
41919: LD_INT 3
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41954: LD_ADDR_VAR 0 20
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 3
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41995: LD_ADDR_VAR 0 21
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 3
42013: NEG
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 3
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42039: LD_ADDR_VAR 0 22
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 3
42058: NEG
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42085: LD_ADDR_VAR 0 23
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 3
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 4
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: LD_INT 3
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42129: LD_ADDR_VAR 0 24
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 4
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42170: LD_ADDR_VAR 0 25
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 4
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: LD_INT 4
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42210: LD_ADDR_VAR 0 26
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 3
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 4
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 3
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: LIST
42250: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42251: LD_ADDR_VAR 0 27
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 3
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 4
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42295: LD_ADDR_VAR 0 28
42299: PUSH
42300: LD_INT 3
42302: NEG
42303: PUSH
42304: LD_INT 3
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: NEG
42315: PUSH
42316: LD_INT 4
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 4
42326: NEG
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42341: LD_ADDR_VAR 0 29
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 3
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 4
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 4
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 5
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 5
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 4
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 6
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 6
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: LD_INT 5
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42496: LD_ADDR_VAR 0 30
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 3
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 4
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 4
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 4
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 5
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 5
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 5
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 6
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 6
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42639: LD_ADDR_VAR 0 31
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 3
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 4
42676: PUSH
42677: LD_INT 3
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 4
42686: PUSH
42687: LD_INT 4
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 4
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: LD_INT 4
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 5
42716: PUSH
42717: LD_INT 5
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 4
42726: PUSH
42727: LD_INT 5
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 6
42736: PUSH
42737: LD_INT 5
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 6
42746: PUSH
42747: LD_INT 6
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 5
42756: PUSH
42757: LD_INT 6
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42778: LD_ADDR_VAR 0 32
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 3
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 4
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 4
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 5
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 5
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 4
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 6
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 6
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: LD_INT 5
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42921: LD_ADDR_VAR 0 33
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 3
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 3
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 4
42973: NEG
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 4
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 4
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 5
43007: NEG
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 5
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 5
43030: NEG
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 6
43041: NEG
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 6
43052: NEG
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43076: LD_ADDR_VAR 0 34
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 3
43095: NEG
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: LD_INT 4
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 4
43131: NEG
43132: PUSH
43133: LD_INT 3
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 4
43143: NEG
43144: PUSH
43145: LD_INT 4
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 4
43155: NEG
43156: PUSH
43157: LD_INT 5
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 5
43167: NEG
43168: PUSH
43169: LD_INT 4
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 5
43179: NEG
43180: PUSH
43181: LD_INT 5
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 5
43191: NEG
43192: PUSH
43193: LD_INT 6
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 6
43203: NEG
43204: PUSH
43205: LD_INT 5
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 6
43215: NEG
43216: PUSH
43217: LD_INT 6
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43239: LD_ADDR_VAR 0 41
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43283: LD_ADDR_VAR 0 42
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43324: LD_ADDR_VAR 0 43
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43364: LD_ADDR_VAR 0 44
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43405: LD_ADDR_VAR 0 45
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43449: LD_ADDR_VAR 0 46
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: LD_INT 3
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 3
43480: NEG
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43495: LD_ADDR_VAR 0 47
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 3
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43528: LD_ADDR_VAR 0 48
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43559: LD_ADDR_VAR 0 49
43563: PUSH
43564: LD_INT 3
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43588: LD_ADDR_VAR 0 50
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43617: LD_ADDR_VAR 0 51
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43648: LD_ADDR_VAR 0 52
43652: PUSH
43653: LD_INT 3
43655: NEG
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43681: LD_ADDR_VAR 0 53
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43725: LD_ADDR_VAR 0 54
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43766: LD_ADDR_VAR 0 55
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43806: LD_ADDR_VAR 0 56
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43847: LD_ADDR_VAR 0 57
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 3
43865: NEG
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43891: LD_ADDR_VAR 0 58
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 3
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 3
43910: NEG
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 3
43922: NEG
43923: PUSH
43924: LD_INT 3
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43937: LD_ADDR_VAR 0 59
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43981: LD_ADDR_VAR 0 60
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44022: LD_ADDR_VAR 0 61
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44062: LD_ADDR_VAR 0 62
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44103: LD_ADDR_VAR 0 63
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44147: LD_ADDR_VAR 0 64
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: ST_TO_ADDR
// end ; 2 :
44193: GO 47459
44195: LD_INT 2
44197: DOUBLE
44198: EQUAL
44199: IFTRUE 44203
44201: GO 47458
44203: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44204: LD_ADDR_VAR 0 29
44208: PUSH
44209: LD_INT 4
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 4
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 5
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 5
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 4
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 3
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 5
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 3
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 3
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 4
44324: PUSH
44325: LD_INT 3
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 4
44334: PUSH
44335: LD_INT 4
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: LD_INT 4
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 4
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 4
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 4
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 3
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 4
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 5
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 4
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 5
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 3
44487: NEG
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 3
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 3
44532: NEG
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 4
44543: NEG
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 4
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 4
44566: NEG
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 4
44589: NEG
44590: PUSH
44591: LD_INT 4
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 4
44601: NEG
44602: PUSH
44603: LD_INT 5
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: NEG
44614: PUSH
44615: LD_INT 4
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: LD_INT 3
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 4
44637: NEG
44638: PUSH
44639: LD_INT 3
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 5
44649: NEG
44650: PUSH
44651: LD_INT 4
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 5
44661: NEG
44662: PUSH
44663: LD_INT 5
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: LD_INT 5
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 5
44685: NEG
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44742: LD_ADDR_VAR 0 30
44746: PUSH
44747: LD_INT 4
44749: PUSH
44750: LD_INT 4
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 4
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 5
44769: PUSH
44770: LD_INT 4
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 5
44779: PUSH
44780: LD_INT 5
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 4
44789: PUSH
44790: LD_INT 5
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: LD_INT 4
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 5
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: LD_INT 5
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 3
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 4
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 4
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 4
44932: NEG
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 4
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 4
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 5
44988: NEG
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 5
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 5
45011: NEG
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 3
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: LD_INT 3
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: LD_INT 4
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 3
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 3
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 4
45094: NEG
45095: PUSH
45096: LD_INT 3
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 4
45106: NEG
45107: PUSH
45108: LD_INT 4
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 4
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 4
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 4
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 5
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 4
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 4
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 5
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 3
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: LD_INT 5
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45289: LD_ADDR_VAR 0 31
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 4
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 5
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 5
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 4
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 5
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 3
45389: NEG
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 3
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 4
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 4
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 4
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 4
45491: NEG
45492: PUSH
45493: LD_INT 4
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 4
45503: NEG
45504: PUSH
45505: LD_INT 5
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: LD_INT 4
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 3
45527: NEG
45528: PUSH
45529: LD_INT 3
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 4
45539: NEG
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 5
45551: NEG
45552: PUSH
45553: LD_INT 4
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 5
45563: NEG
45564: PUSH
45565: LD_INT 5
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: LD_INT 5
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 5
45587: NEG
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 3
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 4
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 3
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 4
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 4
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 4
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 4
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 5
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 5
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 4
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 5
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45839: LD_ADDR_VAR 0 32
45843: PUSH
45844: LD_INT 4
45846: NEG
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 4
45857: NEG
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 4
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 5
45902: NEG
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 5
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 5
45925: NEG
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 3
45948: NEG
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 3
45960: NEG
45961: PUSH
45962: LD_INT 4
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 3
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 4
46008: NEG
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 4
46020: NEG
46021: PUSH
46022: LD_INT 4
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 4
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 4
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 4
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 5
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 4
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 3
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 3
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 4
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 5
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 5
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 3
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 4
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 4
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 3
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 4
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 4
46251: PUSH
46252: LD_INT 4
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 4
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 5
46271: PUSH
46272: LD_INT 4
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 5
46281: PUSH
46282: LD_INT 5
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 4
46291: PUSH
46292: LD_INT 5
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: LD_INT 4
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 5
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 5
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46386: LD_ADDR_VAR 0 33
46390: PUSH
46391: LD_INT 4
46393: NEG
46394: PUSH
46395: LD_INT 4
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 4
46405: NEG
46406: PUSH
46407: LD_INT 5
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: LD_INT 4
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 3
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 4
46441: NEG
46442: PUSH
46443: LD_INT 3
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 5
46453: NEG
46454: PUSH
46455: LD_INT 4
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 5
46465: NEG
46466: PUSH
46467: LD_INT 5
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: LD_INT 5
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 5
46489: NEG
46490: PUSH
46491: LD_INT 3
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 4
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 3
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: LD_INT 4
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 4
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 4
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 5
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 5
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 4
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 3
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 5
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 3
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 4
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 4
46726: PUSH
46727: LD_INT 4
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 3
46736: PUSH
46737: LD_INT 4
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 4
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 4
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 4
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 3
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 4
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 5
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 5
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 4
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 5
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46924: LD_ADDR_VAR 0 34
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 4
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 5
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 4
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 4
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 5
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 5
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 4
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 4
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 4
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 4
47126: PUSH
47127: LD_INT 4
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 4
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 5
47146: PUSH
47147: LD_INT 4
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 5
47156: PUSH
47157: LD_INT 5
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 4
47166: PUSH
47167: LD_INT 5
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 4
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 5
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: LD_INT 5
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 3
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 4
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 4
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 4
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 4
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 3
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 4
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 5
47365: NEG
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 5
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 5
47388: NEG
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// end ; end ;
47456: GO 47459
47458: POP
// case btype of b_depot , b_warehouse :
47459: LD_VAR 0 1
47463: PUSH
47464: LD_INT 0
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47478
47470: LD_INT 1
47472: DOUBLE
47473: EQUAL
47474: IFTRUE 47478
47476: GO 47679
47478: POP
// case nation of nation_american :
47479: LD_VAR 0 5
47483: PUSH
47484: LD_INT 1
47486: DOUBLE
47487: EQUAL
47488: IFTRUE 47492
47490: GO 47548
47492: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47493: LD_ADDR_VAR 0 9
47497: PUSH
47498: LD_VAR 0 11
47502: PUSH
47503: LD_VAR 0 12
47507: PUSH
47508: LD_VAR 0 13
47512: PUSH
47513: LD_VAR 0 14
47517: PUSH
47518: LD_VAR 0 15
47522: PUSH
47523: LD_VAR 0 16
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: PUSH
47536: LD_VAR 0 4
47540: PUSH
47541: LD_INT 1
47543: PLUS
47544: ARRAY
47545: ST_TO_ADDR
47546: GO 47677
47548: LD_INT 2
47550: DOUBLE
47551: EQUAL
47552: IFTRUE 47556
47554: GO 47612
47556: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47557: LD_ADDR_VAR 0 9
47561: PUSH
47562: LD_VAR 0 17
47566: PUSH
47567: LD_VAR 0 18
47571: PUSH
47572: LD_VAR 0 19
47576: PUSH
47577: LD_VAR 0 20
47581: PUSH
47582: LD_VAR 0 21
47586: PUSH
47587: LD_VAR 0 22
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: PUSH
47600: LD_VAR 0 4
47604: PUSH
47605: LD_INT 1
47607: PLUS
47608: ARRAY
47609: ST_TO_ADDR
47610: GO 47677
47612: LD_INT 3
47614: DOUBLE
47615: EQUAL
47616: IFTRUE 47620
47618: GO 47676
47620: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47621: LD_ADDR_VAR 0 9
47625: PUSH
47626: LD_VAR 0 23
47630: PUSH
47631: LD_VAR 0 24
47635: PUSH
47636: LD_VAR 0 25
47640: PUSH
47641: LD_VAR 0 26
47645: PUSH
47646: LD_VAR 0 27
47650: PUSH
47651: LD_VAR 0 28
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: PUSH
47664: LD_VAR 0 4
47668: PUSH
47669: LD_INT 1
47671: PLUS
47672: ARRAY
47673: ST_TO_ADDR
47674: GO 47677
47676: POP
47677: GO 48232
47679: LD_INT 2
47681: DOUBLE
47682: EQUAL
47683: IFTRUE 47693
47685: LD_INT 3
47687: DOUBLE
47688: EQUAL
47689: IFTRUE 47693
47691: GO 47749
47693: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47694: LD_ADDR_VAR 0 9
47698: PUSH
47699: LD_VAR 0 29
47703: PUSH
47704: LD_VAR 0 30
47708: PUSH
47709: LD_VAR 0 31
47713: PUSH
47714: LD_VAR 0 32
47718: PUSH
47719: LD_VAR 0 33
47723: PUSH
47724: LD_VAR 0 34
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: PUSH
47737: LD_VAR 0 4
47741: PUSH
47742: LD_INT 1
47744: PLUS
47745: ARRAY
47746: ST_TO_ADDR
47747: GO 48232
47749: LD_INT 16
47751: DOUBLE
47752: EQUAL
47753: IFTRUE 47811
47755: LD_INT 17
47757: DOUBLE
47758: EQUAL
47759: IFTRUE 47811
47761: LD_INT 18
47763: DOUBLE
47764: EQUAL
47765: IFTRUE 47811
47767: LD_INT 19
47769: DOUBLE
47770: EQUAL
47771: IFTRUE 47811
47773: LD_INT 22
47775: DOUBLE
47776: EQUAL
47777: IFTRUE 47811
47779: LD_INT 20
47781: DOUBLE
47782: EQUAL
47783: IFTRUE 47811
47785: LD_INT 21
47787: DOUBLE
47788: EQUAL
47789: IFTRUE 47811
47791: LD_INT 23
47793: DOUBLE
47794: EQUAL
47795: IFTRUE 47811
47797: LD_INT 24
47799: DOUBLE
47800: EQUAL
47801: IFTRUE 47811
47803: LD_INT 25
47805: DOUBLE
47806: EQUAL
47807: IFTRUE 47811
47809: GO 47867
47811: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47812: LD_ADDR_VAR 0 9
47816: PUSH
47817: LD_VAR 0 35
47821: PUSH
47822: LD_VAR 0 36
47826: PUSH
47827: LD_VAR 0 37
47831: PUSH
47832: LD_VAR 0 38
47836: PUSH
47837: LD_VAR 0 39
47841: PUSH
47842: LD_VAR 0 40
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: PUSH
47855: LD_VAR 0 4
47859: PUSH
47860: LD_INT 1
47862: PLUS
47863: ARRAY
47864: ST_TO_ADDR
47865: GO 48232
47867: LD_INT 6
47869: DOUBLE
47870: EQUAL
47871: IFTRUE 47923
47873: LD_INT 7
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47923
47879: LD_INT 8
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47923
47885: LD_INT 13
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47923
47891: LD_INT 12
47893: DOUBLE
47894: EQUAL
47895: IFTRUE 47923
47897: LD_INT 15
47899: DOUBLE
47900: EQUAL
47901: IFTRUE 47923
47903: LD_INT 11
47905: DOUBLE
47906: EQUAL
47907: IFTRUE 47923
47909: LD_INT 14
47911: DOUBLE
47912: EQUAL
47913: IFTRUE 47923
47915: LD_INT 10
47917: DOUBLE
47918: EQUAL
47919: IFTRUE 47923
47921: GO 47979
47923: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47924: LD_ADDR_VAR 0 9
47928: PUSH
47929: LD_VAR 0 41
47933: PUSH
47934: LD_VAR 0 42
47938: PUSH
47939: LD_VAR 0 43
47943: PUSH
47944: LD_VAR 0 44
47948: PUSH
47949: LD_VAR 0 45
47953: PUSH
47954: LD_VAR 0 46
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: PUSH
47967: LD_VAR 0 4
47971: PUSH
47972: LD_INT 1
47974: PLUS
47975: ARRAY
47976: ST_TO_ADDR
47977: GO 48232
47979: LD_INT 36
47981: DOUBLE
47982: EQUAL
47983: IFTRUE 47987
47985: GO 48043
47987: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47988: LD_ADDR_VAR 0 9
47992: PUSH
47993: LD_VAR 0 47
47997: PUSH
47998: LD_VAR 0 48
48002: PUSH
48003: LD_VAR 0 49
48007: PUSH
48008: LD_VAR 0 50
48012: PUSH
48013: LD_VAR 0 51
48017: PUSH
48018: LD_VAR 0 52
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: PUSH
48031: LD_VAR 0 4
48035: PUSH
48036: LD_INT 1
48038: PLUS
48039: ARRAY
48040: ST_TO_ADDR
48041: GO 48232
48043: LD_INT 4
48045: DOUBLE
48046: EQUAL
48047: IFTRUE 48069
48049: LD_INT 5
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48069
48055: LD_INT 34
48057: DOUBLE
48058: EQUAL
48059: IFTRUE 48069
48061: LD_INT 37
48063: DOUBLE
48064: EQUAL
48065: IFTRUE 48069
48067: GO 48125
48069: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48070: LD_ADDR_VAR 0 9
48074: PUSH
48075: LD_VAR 0 53
48079: PUSH
48080: LD_VAR 0 54
48084: PUSH
48085: LD_VAR 0 55
48089: PUSH
48090: LD_VAR 0 56
48094: PUSH
48095: LD_VAR 0 57
48099: PUSH
48100: LD_VAR 0 58
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: PUSH
48113: LD_VAR 0 4
48117: PUSH
48118: LD_INT 1
48120: PLUS
48121: ARRAY
48122: ST_TO_ADDR
48123: GO 48232
48125: LD_INT 31
48127: DOUBLE
48128: EQUAL
48129: IFTRUE 48175
48131: LD_INT 32
48133: DOUBLE
48134: EQUAL
48135: IFTRUE 48175
48137: LD_INT 33
48139: DOUBLE
48140: EQUAL
48141: IFTRUE 48175
48143: LD_INT 27
48145: DOUBLE
48146: EQUAL
48147: IFTRUE 48175
48149: LD_INT 26
48151: DOUBLE
48152: EQUAL
48153: IFTRUE 48175
48155: LD_INT 28
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48175
48161: LD_INT 29
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48175
48167: LD_INT 30
48169: DOUBLE
48170: EQUAL
48171: IFTRUE 48175
48173: GO 48231
48175: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48176: LD_ADDR_VAR 0 9
48180: PUSH
48181: LD_VAR 0 59
48185: PUSH
48186: LD_VAR 0 60
48190: PUSH
48191: LD_VAR 0 61
48195: PUSH
48196: LD_VAR 0 62
48200: PUSH
48201: LD_VAR 0 63
48205: PUSH
48206: LD_VAR 0 64
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: PUSH
48219: LD_VAR 0 4
48223: PUSH
48224: LD_INT 1
48226: PLUS
48227: ARRAY
48228: ST_TO_ADDR
48229: GO 48232
48231: POP
// temp_list2 = [ ] ;
48232: LD_ADDR_VAR 0 10
48236: PUSH
48237: EMPTY
48238: ST_TO_ADDR
// for i in temp_list do
48239: LD_ADDR_VAR 0 8
48243: PUSH
48244: LD_VAR 0 9
48248: PUSH
48249: FOR_IN
48250: IFFALSE 48302
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48252: LD_ADDR_VAR 0 10
48256: PUSH
48257: LD_VAR 0 10
48261: PUSH
48262: LD_VAR 0 8
48266: PUSH
48267: LD_INT 1
48269: ARRAY
48270: PUSH
48271: LD_VAR 0 2
48275: PLUS
48276: PUSH
48277: LD_VAR 0 8
48281: PUSH
48282: LD_INT 2
48284: ARRAY
48285: PUSH
48286: LD_VAR 0 3
48290: PLUS
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: ADD
48299: ST_TO_ADDR
48300: GO 48249
48302: POP
48303: POP
// result = temp_list2 ;
48304: LD_ADDR_VAR 0 7
48308: PUSH
48309: LD_VAR 0 10
48313: ST_TO_ADDR
// end ;
48314: LD_VAR 0 7
48318: RET
// export function EnemyInRange ( unit , dist ) ; begin
48319: LD_INT 0
48321: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48322: LD_ADDR_VAR 0 3
48326: PUSH
48327: LD_VAR 0 1
48331: PPUSH
48332: CALL_OW 255
48336: PPUSH
48337: LD_VAR 0 1
48341: PPUSH
48342: CALL_OW 250
48346: PPUSH
48347: LD_VAR 0 1
48351: PPUSH
48352: CALL_OW 251
48356: PPUSH
48357: LD_VAR 0 2
48361: PPUSH
48362: CALL 21692 0 4
48366: PUSH
48367: LD_INT 4
48369: ARRAY
48370: ST_TO_ADDR
// end ;
48371: LD_VAR 0 3
48375: RET
// export function PlayerSeeMe ( unit ) ; begin
48376: LD_INT 0
48378: PPUSH
// result := See ( your_side , unit ) ;
48379: LD_ADDR_VAR 0 2
48383: PUSH
48384: LD_OWVAR 2
48388: PPUSH
48389: LD_VAR 0 1
48393: PPUSH
48394: CALL_OW 292
48398: ST_TO_ADDR
// end ;
48399: LD_VAR 0 2
48403: RET
// export function ReverseDir ( unit ) ; begin
48404: LD_INT 0
48406: PPUSH
// if not unit then
48407: LD_VAR 0 1
48411: NOT
48412: IFFALSE 48416
// exit ;
48414: GO 48439
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48416: LD_ADDR_VAR 0 2
48420: PUSH
48421: LD_VAR 0 1
48425: PPUSH
48426: CALL_OW 254
48430: PUSH
48431: LD_INT 3
48433: PLUS
48434: PUSH
48435: LD_INT 6
48437: MOD
48438: ST_TO_ADDR
// end ;
48439: LD_VAR 0 2
48443: RET
// export function ReverseArray ( array ) ; var i ; begin
48444: LD_INT 0
48446: PPUSH
48447: PPUSH
// if not array then
48448: LD_VAR 0 1
48452: NOT
48453: IFFALSE 48457
// exit ;
48455: GO 48512
// result := [ ] ;
48457: LD_ADDR_VAR 0 2
48461: PUSH
48462: EMPTY
48463: ST_TO_ADDR
// for i := array downto 1 do
48464: LD_ADDR_VAR 0 3
48468: PUSH
48469: DOUBLE
48470: LD_VAR 0 1
48474: INC
48475: ST_TO_ADDR
48476: LD_INT 1
48478: PUSH
48479: FOR_DOWNTO
48480: IFFALSE 48510
// result := Join ( result , array [ i ] ) ;
48482: LD_ADDR_VAR 0 2
48486: PUSH
48487: LD_VAR 0 2
48491: PPUSH
48492: LD_VAR 0 1
48496: PUSH
48497: LD_VAR 0 3
48501: ARRAY
48502: PPUSH
48503: CALL 53177 0 2
48507: ST_TO_ADDR
48508: GO 48479
48510: POP
48511: POP
// end ;
48512: LD_VAR 0 2
48516: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48517: LD_INT 0
48519: PPUSH
48520: PPUSH
48521: PPUSH
48522: PPUSH
48523: PPUSH
48524: PPUSH
// if not unit or not hexes then
48525: LD_VAR 0 1
48529: NOT
48530: PUSH
48531: LD_VAR 0 2
48535: NOT
48536: OR
48537: IFFALSE 48541
// exit ;
48539: GO 48664
// dist := 9999 ;
48541: LD_ADDR_VAR 0 5
48545: PUSH
48546: LD_INT 9999
48548: ST_TO_ADDR
// for i = 1 to hexes do
48549: LD_ADDR_VAR 0 4
48553: PUSH
48554: DOUBLE
48555: LD_INT 1
48557: DEC
48558: ST_TO_ADDR
48559: LD_VAR 0 2
48563: PUSH
48564: FOR_TO
48565: IFFALSE 48652
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48567: LD_ADDR_VAR 0 6
48571: PUSH
48572: LD_VAR 0 1
48576: PPUSH
48577: LD_VAR 0 2
48581: PUSH
48582: LD_VAR 0 4
48586: ARRAY
48587: PUSH
48588: LD_INT 1
48590: ARRAY
48591: PPUSH
48592: LD_VAR 0 2
48596: PUSH
48597: LD_VAR 0 4
48601: ARRAY
48602: PUSH
48603: LD_INT 2
48605: ARRAY
48606: PPUSH
48607: CALL_OW 297
48611: ST_TO_ADDR
// if tdist < dist then
48612: LD_VAR 0 6
48616: PUSH
48617: LD_VAR 0 5
48621: LESS
48622: IFFALSE 48650
// begin hex := hexes [ i ] ;
48624: LD_ADDR_VAR 0 8
48628: PUSH
48629: LD_VAR 0 2
48633: PUSH
48634: LD_VAR 0 4
48638: ARRAY
48639: ST_TO_ADDR
// dist := tdist ;
48640: LD_ADDR_VAR 0 5
48644: PUSH
48645: LD_VAR 0 6
48649: ST_TO_ADDR
// end ; end ;
48650: GO 48564
48652: POP
48653: POP
// result := hex ;
48654: LD_ADDR_VAR 0 3
48658: PUSH
48659: LD_VAR 0 8
48663: ST_TO_ADDR
// end ;
48664: LD_VAR 0 3
48668: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48669: LD_INT 0
48671: PPUSH
48672: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48673: LD_VAR 0 1
48677: NOT
48678: PUSH
48679: LD_VAR 0 1
48683: PUSH
48684: LD_INT 21
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 23
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PPUSH
48708: CALL_OW 69
48712: IN
48713: NOT
48714: OR
48715: IFFALSE 48719
// exit ;
48717: GO 48766
// for i = 1 to 3 do
48719: LD_ADDR_VAR 0 3
48723: PUSH
48724: DOUBLE
48725: LD_INT 1
48727: DEC
48728: ST_TO_ADDR
48729: LD_INT 3
48731: PUSH
48732: FOR_TO
48733: IFFALSE 48764
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48735: LD_VAR 0 1
48739: PPUSH
48740: CALL_OW 250
48744: PPUSH
48745: LD_VAR 0 1
48749: PPUSH
48750: CALL_OW 251
48754: PPUSH
48755: LD_INT 1
48757: PPUSH
48758: CALL_OW 453
48762: GO 48732
48764: POP
48765: POP
// end ;
48766: LD_VAR 0 2
48770: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48771: LD_INT 0
48773: PPUSH
48774: PPUSH
48775: PPUSH
48776: PPUSH
48777: PPUSH
48778: PPUSH
// if not unit or not enemy_unit then
48779: LD_VAR 0 1
48783: NOT
48784: PUSH
48785: LD_VAR 0 2
48789: NOT
48790: OR
48791: IFFALSE 48795
// exit ;
48793: GO 49262
// if GetLives ( i ) < 250 then
48795: LD_VAR 0 4
48799: PPUSH
48800: CALL_OW 256
48804: PUSH
48805: LD_INT 250
48807: LESS
48808: IFFALSE 48821
// begin ComAutodestruct ( i ) ;
48810: LD_VAR 0 4
48814: PPUSH
48815: CALL 48669 0 1
// exit ;
48819: GO 49262
// end ; x := GetX ( enemy_unit ) ;
48821: LD_ADDR_VAR 0 7
48825: PUSH
48826: LD_VAR 0 2
48830: PPUSH
48831: CALL_OW 250
48835: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48836: LD_ADDR_VAR 0 8
48840: PUSH
48841: LD_VAR 0 2
48845: PPUSH
48846: CALL_OW 251
48850: ST_TO_ADDR
// if not x or not y then
48851: LD_VAR 0 7
48855: NOT
48856: PUSH
48857: LD_VAR 0 8
48861: NOT
48862: OR
48863: IFFALSE 48867
// exit ;
48865: GO 49262
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48867: LD_ADDR_VAR 0 6
48871: PUSH
48872: LD_VAR 0 7
48876: PPUSH
48877: LD_INT 0
48879: PPUSH
48880: LD_INT 4
48882: PPUSH
48883: CALL_OW 272
48887: PUSH
48888: LD_VAR 0 8
48892: PPUSH
48893: LD_INT 0
48895: PPUSH
48896: LD_INT 4
48898: PPUSH
48899: CALL_OW 273
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_VAR 0 7
48912: PPUSH
48913: LD_INT 1
48915: PPUSH
48916: LD_INT 4
48918: PPUSH
48919: CALL_OW 272
48923: PUSH
48924: LD_VAR 0 8
48928: PPUSH
48929: LD_INT 1
48931: PPUSH
48932: LD_INT 4
48934: PPUSH
48935: CALL_OW 273
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_VAR 0 7
48948: PPUSH
48949: LD_INT 2
48951: PPUSH
48952: LD_INT 4
48954: PPUSH
48955: CALL_OW 272
48959: PUSH
48960: LD_VAR 0 8
48964: PPUSH
48965: LD_INT 2
48967: PPUSH
48968: LD_INT 4
48970: PPUSH
48971: CALL_OW 273
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_VAR 0 7
48984: PPUSH
48985: LD_INT 3
48987: PPUSH
48988: LD_INT 4
48990: PPUSH
48991: CALL_OW 272
48995: PUSH
48996: LD_VAR 0 8
49000: PPUSH
49001: LD_INT 3
49003: PPUSH
49004: LD_INT 4
49006: PPUSH
49007: CALL_OW 273
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_VAR 0 7
49020: PPUSH
49021: LD_INT 4
49023: PPUSH
49024: LD_INT 4
49026: PPUSH
49027: CALL_OW 272
49031: PUSH
49032: LD_VAR 0 8
49036: PPUSH
49037: LD_INT 4
49039: PPUSH
49040: LD_INT 4
49042: PPUSH
49043: CALL_OW 273
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_VAR 0 7
49056: PPUSH
49057: LD_INT 5
49059: PPUSH
49060: LD_INT 4
49062: PPUSH
49063: CALL_OW 272
49067: PUSH
49068: LD_VAR 0 8
49072: PPUSH
49073: LD_INT 5
49075: PPUSH
49076: LD_INT 4
49078: PPUSH
49079: CALL_OW 273
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// for i = tmp downto 1 do
49096: LD_ADDR_VAR 0 4
49100: PUSH
49101: DOUBLE
49102: LD_VAR 0 6
49106: INC
49107: ST_TO_ADDR
49108: LD_INT 1
49110: PUSH
49111: FOR_DOWNTO
49112: IFFALSE 49213
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49114: LD_VAR 0 6
49118: PUSH
49119: LD_VAR 0 4
49123: ARRAY
49124: PUSH
49125: LD_INT 1
49127: ARRAY
49128: PPUSH
49129: LD_VAR 0 6
49133: PUSH
49134: LD_VAR 0 4
49138: ARRAY
49139: PUSH
49140: LD_INT 2
49142: ARRAY
49143: PPUSH
49144: CALL_OW 488
49148: NOT
49149: PUSH
49150: LD_VAR 0 6
49154: PUSH
49155: LD_VAR 0 4
49159: ARRAY
49160: PUSH
49161: LD_INT 1
49163: ARRAY
49164: PPUSH
49165: LD_VAR 0 6
49169: PUSH
49170: LD_VAR 0 4
49174: ARRAY
49175: PUSH
49176: LD_INT 2
49178: ARRAY
49179: PPUSH
49180: CALL_OW 428
49184: PUSH
49185: LD_INT 0
49187: NONEQUAL
49188: OR
49189: IFFALSE 49211
// tmp := Delete ( tmp , i ) ;
49191: LD_ADDR_VAR 0 6
49195: PUSH
49196: LD_VAR 0 6
49200: PPUSH
49201: LD_VAR 0 4
49205: PPUSH
49206: CALL_OW 3
49210: ST_TO_ADDR
49211: GO 49111
49213: POP
49214: POP
// j := GetClosestHex ( unit , tmp ) ;
49215: LD_ADDR_VAR 0 5
49219: PUSH
49220: LD_VAR 0 1
49224: PPUSH
49225: LD_VAR 0 6
49229: PPUSH
49230: CALL 48517 0 2
49234: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49235: LD_VAR 0 1
49239: PPUSH
49240: LD_VAR 0 5
49244: PUSH
49245: LD_INT 1
49247: ARRAY
49248: PPUSH
49249: LD_VAR 0 5
49253: PUSH
49254: LD_INT 2
49256: ARRAY
49257: PPUSH
49258: CALL_OW 111
// end ;
49262: LD_VAR 0 3
49266: RET
// export function PrepareApemanSoldier ( ) ; begin
49267: LD_INT 0
49269: PPUSH
// uc_nation := 0 ;
49270: LD_ADDR_OWVAR 21
49274: PUSH
49275: LD_INT 0
49277: ST_TO_ADDR
// hc_sex := sex_male ;
49278: LD_ADDR_OWVAR 27
49282: PUSH
49283: LD_INT 1
49285: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49286: LD_ADDR_OWVAR 28
49290: PUSH
49291: LD_INT 15
49293: ST_TO_ADDR
// hc_gallery :=  ;
49294: LD_ADDR_OWVAR 33
49298: PUSH
49299: LD_STRING 
49301: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49302: LD_ADDR_OWVAR 31
49306: PUSH
49307: LD_INT 0
49309: PPUSH
49310: LD_INT 3
49312: PPUSH
49313: CALL_OW 12
49317: PUSH
49318: LD_INT 0
49320: PPUSH
49321: LD_INT 3
49323: PPUSH
49324: CALL_OW 12
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// end ;
49341: LD_VAR 0 1
49345: RET
// export function PrepareApemanEngineer ( ) ; begin
49346: LD_INT 0
49348: PPUSH
// uc_nation := 0 ;
49349: LD_ADDR_OWVAR 21
49353: PUSH
49354: LD_INT 0
49356: ST_TO_ADDR
// hc_sex := sex_male ;
49357: LD_ADDR_OWVAR 27
49361: PUSH
49362: LD_INT 1
49364: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49365: LD_ADDR_OWVAR 28
49369: PUSH
49370: LD_INT 16
49372: ST_TO_ADDR
// hc_gallery :=  ;
49373: LD_ADDR_OWVAR 33
49377: PUSH
49378: LD_STRING 
49380: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49381: LD_ADDR_OWVAR 31
49385: PUSH
49386: LD_INT 0
49388: PPUSH
49389: LD_INT 3
49391: PPUSH
49392: CALL_OW 12
49396: PUSH
49397: LD_INT 0
49399: PPUSH
49400: LD_INT 3
49402: PPUSH
49403: CALL_OW 12
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// end ;
49420: LD_VAR 0 1
49424: RET
// export function PrepareApeman ( agressivity ) ; begin
49425: LD_INT 0
49427: PPUSH
// uc_side := 0 ;
49428: LD_ADDR_OWVAR 20
49432: PUSH
49433: LD_INT 0
49435: ST_TO_ADDR
// uc_nation := 0 ;
49436: LD_ADDR_OWVAR 21
49440: PUSH
49441: LD_INT 0
49443: ST_TO_ADDR
// hc_sex := sex_male ;
49444: LD_ADDR_OWVAR 27
49448: PUSH
49449: LD_INT 1
49451: ST_TO_ADDR
// hc_class := class_apeman ;
49452: LD_ADDR_OWVAR 28
49456: PUSH
49457: LD_INT 12
49459: ST_TO_ADDR
// hc_gallery :=  ;
49460: LD_ADDR_OWVAR 33
49464: PUSH
49465: LD_STRING 
49467: ST_TO_ADDR
// if agressivity = 0 then
49468: LD_VAR 0 1
49472: PUSH
49473: LD_INT 0
49475: EQUAL
49476: IFFALSE 49488
// hc_agressivity := 0 else
49478: LD_ADDR_OWVAR 35
49482: PUSH
49483: LD_INT 0
49485: ST_TO_ADDR
49486: GO 49509
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49488: LD_ADDR_OWVAR 35
49492: PUSH
49493: LD_VAR 0 1
49497: NEG
49498: PPUSH
49499: LD_VAR 0 1
49503: PPUSH
49504: CALL_OW 12
49508: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49509: LD_ADDR_OWVAR 31
49513: PUSH
49514: LD_INT 0
49516: PPUSH
49517: LD_INT 3
49519: PPUSH
49520: CALL_OW 12
49524: PUSH
49525: LD_INT 0
49527: PPUSH
49528: LD_INT 3
49530: PPUSH
49531: CALL_OW 12
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: ST_TO_ADDR
// end ;
49548: LD_VAR 0 2
49552: RET
// export function PrepareTiger ( agressivity ) ; begin
49553: LD_INT 0
49555: PPUSH
// uc_side := 0 ;
49556: LD_ADDR_OWVAR 20
49560: PUSH
49561: LD_INT 0
49563: ST_TO_ADDR
// uc_nation := 0 ;
49564: LD_ADDR_OWVAR 21
49568: PUSH
49569: LD_INT 0
49571: ST_TO_ADDR
// hc_class := class_tiger ;
49572: LD_ADDR_OWVAR 28
49576: PUSH
49577: LD_INT 14
49579: ST_TO_ADDR
// hc_gallery :=  ;
49580: LD_ADDR_OWVAR 33
49584: PUSH
49585: LD_STRING 
49587: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49588: LD_ADDR_OWVAR 35
49592: PUSH
49593: LD_VAR 0 1
49597: NEG
49598: PPUSH
49599: LD_VAR 0 1
49603: PPUSH
49604: CALL_OW 12
49608: ST_TO_ADDR
// end ;
49609: LD_VAR 0 2
49613: RET
// export function PrepareEnchidna ( ) ; begin
49614: LD_INT 0
49616: PPUSH
// uc_side := 0 ;
49617: LD_ADDR_OWVAR 20
49621: PUSH
49622: LD_INT 0
49624: ST_TO_ADDR
// uc_nation := 0 ;
49625: LD_ADDR_OWVAR 21
49629: PUSH
49630: LD_INT 0
49632: ST_TO_ADDR
// hc_class := class_baggie ;
49633: LD_ADDR_OWVAR 28
49637: PUSH
49638: LD_INT 13
49640: ST_TO_ADDR
// hc_gallery :=  ;
49641: LD_ADDR_OWVAR 33
49645: PUSH
49646: LD_STRING 
49648: ST_TO_ADDR
// end ;
49649: LD_VAR 0 1
49653: RET
// export function PrepareFrog ( ) ; begin
49654: LD_INT 0
49656: PPUSH
// uc_side := 0 ;
49657: LD_ADDR_OWVAR 20
49661: PUSH
49662: LD_INT 0
49664: ST_TO_ADDR
// uc_nation := 0 ;
49665: LD_ADDR_OWVAR 21
49669: PUSH
49670: LD_INT 0
49672: ST_TO_ADDR
// hc_class := class_frog ;
49673: LD_ADDR_OWVAR 28
49677: PUSH
49678: LD_INT 19
49680: ST_TO_ADDR
// hc_gallery :=  ;
49681: LD_ADDR_OWVAR 33
49685: PUSH
49686: LD_STRING 
49688: ST_TO_ADDR
// end ;
49689: LD_VAR 0 1
49693: RET
// export function PrepareFish ( ) ; begin
49694: LD_INT 0
49696: PPUSH
// uc_side := 0 ;
49697: LD_ADDR_OWVAR 20
49701: PUSH
49702: LD_INT 0
49704: ST_TO_ADDR
// uc_nation := 0 ;
49705: LD_ADDR_OWVAR 21
49709: PUSH
49710: LD_INT 0
49712: ST_TO_ADDR
// hc_class := class_fish ;
49713: LD_ADDR_OWVAR 28
49717: PUSH
49718: LD_INT 20
49720: ST_TO_ADDR
// hc_gallery :=  ;
49721: LD_ADDR_OWVAR 33
49725: PUSH
49726: LD_STRING 
49728: ST_TO_ADDR
// end ;
49729: LD_VAR 0 1
49733: RET
// export function PrepareBird ( ) ; begin
49734: LD_INT 0
49736: PPUSH
// uc_side := 0 ;
49737: LD_ADDR_OWVAR 20
49741: PUSH
49742: LD_INT 0
49744: ST_TO_ADDR
// uc_nation := 0 ;
49745: LD_ADDR_OWVAR 21
49749: PUSH
49750: LD_INT 0
49752: ST_TO_ADDR
// hc_class := class_phororhacos ;
49753: LD_ADDR_OWVAR 28
49757: PUSH
49758: LD_INT 18
49760: ST_TO_ADDR
// hc_gallery :=  ;
49761: LD_ADDR_OWVAR 33
49765: PUSH
49766: LD_STRING 
49768: ST_TO_ADDR
// end ;
49769: LD_VAR 0 1
49773: RET
// export function PrepareHorse ( ) ; begin
49774: LD_INT 0
49776: PPUSH
// uc_side := 0 ;
49777: LD_ADDR_OWVAR 20
49781: PUSH
49782: LD_INT 0
49784: ST_TO_ADDR
// uc_nation := 0 ;
49785: LD_ADDR_OWVAR 21
49789: PUSH
49790: LD_INT 0
49792: ST_TO_ADDR
// hc_class := class_horse ;
49793: LD_ADDR_OWVAR 28
49797: PUSH
49798: LD_INT 21
49800: ST_TO_ADDR
// hc_gallery :=  ;
49801: LD_ADDR_OWVAR 33
49805: PUSH
49806: LD_STRING 
49808: ST_TO_ADDR
// end ;
49809: LD_VAR 0 1
49813: RET
// export function PrepareMastodont ( ) ; begin
49814: LD_INT 0
49816: PPUSH
// uc_side := 0 ;
49817: LD_ADDR_OWVAR 20
49821: PUSH
49822: LD_INT 0
49824: ST_TO_ADDR
// uc_nation := 0 ;
49825: LD_ADDR_OWVAR 21
49829: PUSH
49830: LD_INT 0
49832: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49833: LD_ADDR_OWVAR 37
49837: PUSH
49838: LD_INT 31
49840: ST_TO_ADDR
// vc_control := control_rider ;
49841: LD_ADDR_OWVAR 38
49845: PUSH
49846: LD_INT 4
49848: ST_TO_ADDR
// end ;
49849: LD_VAR 0 1
49853: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49854: LD_INT 0
49856: PPUSH
49857: PPUSH
49858: PPUSH
// uc_side = 0 ;
49859: LD_ADDR_OWVAR 20
49863: PUSH
49864: LD_INT 0
49866: ST_TO_ADDR
// uc_nation = 0 ;
49867: LD_ADDR_OWVAR 21
49871: PUSH
49872: LD_INT 0
49874: ST_TO_ADDR
// InitHc_All ( ) ;
49875: CALL_OW 584
// InitVc ;
49879: CALL_OW 20
// if mastodonts then
49883: LD_VAR 0 6
49887: IFFALSE 49954
// for i = 1 to mastodonts do
49889: LD_ADDR_VAR 0 11
49893: PUSH
49894: DOUBLE
49895: LD_INT 1
49897: DEC
49898: ST_TO_ADDR
49899: LD_VAR 0 6
49903: PUSH
49904: FOR_TO
49905: IFFALSE 49952
// begin vc_chassis := 31 ;
49907: LD_ADDR_OWVAR 37
49911: PUSH
49912: LD_INT 31
49914: ST_TO_ADDR
// vc_control := control_rider ;
49915: LD_ADDR_OWVAR 38
49919: PUSH
49920: LD_INT 4
49922: ST_TO_ADDR
// animal := CreateVehicle ;
49923: LD_ADDR_VAR 0 12
49927: PUSH
49928: CALL_OW 45
49932: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49933: LD_VAR 0 12
49937: PPUSH
49938: LD_VAR 0 8
49942: PPUSH
49943: LD_INT 0
49945: PPUSH
49946: CALL 52082 0 3
// end ;
49950: GO 49904
49952: POP
49953: POP
// if horses then
49954: LD_VAR 0 5
49958: IFFALSE 50025
// for i = 1 to horses do
49960: LD_ADDR_VAR 0 11
49964: PUSH
49965: DOUBLE
49966: LD_INT 1
49968: DEC
49969: ST_TO_ADDR
49970: LD_VAR 0 5
49974: PUSH
49975: FOR_TO
49976: IFFALSE 50023
// begin hc_class := 21 ;
49978: LD_ADDR_OWVAR 28
49982: PUSH
49983: LD_INT 21
49985: ST_TO_ADDR
// hc_gallery :=  ;
49986: LD_ADDR_OWVAR 33
49990: PUSH
49991: LD_STRING 
49993: ST_TO_ADDR
// animal := CreateHuman ;
49994: LD_ADDR_VAR 0 12
49998: PUSH
49999: CALL_OW 44
50003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50004: LD_VAR 0 12
50008: PPUSH
50009: LD_VAR 0 8
50013: PPUSH
50014: LD_INT 0
50016: PPUSH
50017: CALL 52082 0 3
// end ;
50021: GO 49975
50023: POP
50024: POP
// if birds then
50025: LD_VAR 0 1
50029: IFFALSE 50096
// for i = 1 to birds do
50031: LD_ADDR_VAR 0 11
50035: PUSH
50036: DOUBLE
50037: LD_INT 1
50039: DEC
50040: ST_TO_ADDR
50041: LD_VAR 0 1
50045: PUSH
50046: FOR_TO
50047: IFFALSE 50094
// begin hc_class := 18 ;
50049: LD_ADDR_OWVAR 28
50053: PUSH
50054: LD_INT 18
50056: ST_TO_ADDR
// hc_gallery =  ;
50057: LD_ADDR_OWVAR 33
50061: PUSH
50062: LD_STRING 
50064: ST_TO_ADDR
// animal := CreateHuman ;
50065: LD_ADDR_VAR 0 12
50069: PUSH
50070: CALL_OW 44
50074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50075: LD_VAR 0 12
50079: PPUSH
50080: LD_VAR 0 8
50084: PPUSH
50085: LD_INT 0
50087: PPUSH
50088: CALL 52082 0 3
// end ;
50092: GO 50046
50094: POP
50095: POP
// if tigers then
50096: LD_VAR 0 2
50100: IFFALSE 50184
// for i = 1 to tigers do
50102: LD_ADDR_VAR 0 11
50106: PUSH
50107: DOUBLE
50108: LD_INT 1
50110: DEC
50111: ST_TO_ADDR
50112: LD_VAR 0 2
50116: PUSH
50117: FOR_TO
50118: IFFALSE 50182
// begin hc_class = class_tiger ;
50120: LD_ADDR_OWVAR 28
50124: PUSH
50125: LD_INT 14
50127: ST_TO_ADDR
// hc_gallery =  ;
50128: LD_ADDR_OWVAR 33
50132: PUSH
50133: LD_STRING 
50135: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50136: LD_ADDR_OWVAR 35
50140: PUSH
50141: LD_INT 7
50143: NEG
50144: PPUSH
50145: LD_INT 7
50147: PPUSH
50148: CALL_OW 12
50152: ST_TO_ADDR
// animal := CreateHuman ;
50153: LD_ADDR_VAR 0 12
50157: PUSH
50158: CALL_OW 44
50162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50163: LD_VAR 0 12
50167: PPUSH
50168: LD_VAR 0 8
50172: PPUSH
50173: LD_INT 0
50175: PPUSH
50176: CALL 52082 0 3
// end ;
50180: GO 50117
50182: POP
50183: POP
// if apemans then
50184: LD_VAR 0 3
50188: IFFALSE 50311
// for i = 1 to apemans do
50190: LD_ADDR_VAR 0 11
50194: PUSH
50195: DOUBLE
50196: LD_INT 1
50198: DEC
50199: ST_TO_ADDR
50200: LD_VAR 0 3
50204: PUSH
50205: FOR_TO
50206: IFFALSE 50309
// begin hc_class = class_apeman ;
50208: LD_ADDR_OWVAR 28
50212: PUSH
50213: LD_INT 12
50215: ST_TO_ADDR
// hc_gallery =  ;
50216: LD_ADDR_OWVAR 33
50220: PUSH
50221: LD_STRING 
50223: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50224: LD_ADDR_OWVAR 35
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PPUSH
50233: LD_INT 2
50235: PPUSH
50236: CALL_OW 12
50240: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50241: LD_ADDR_OWVAR 31
50245: PUSH
50246: LD_INT 1
50248: PPUSH
50249: LD_INT 3
50251: PPUSH
50252: CALL_OW 12
50256: PUSH
50257: LD_INT 1
50259: PPUSH
50260: LD_INT 3
50262: PPUSH
50263: CALL_OW 12
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// animal := CreateHuman ;
50280: LD_ADDR_VAR 0 12
50284: PUSH
50285: CALL_OW 44
50289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50290: LD_VAR 0 12
50294: PPUSH
50295: LD_VAR 0 8
50299: PPUSH
50300: LD_INT 0
50302: PPUSH
50303: CALL 52082 0 3
// end ;
50307: GO 50205
50309: POP
50310: POP
// if enchidnas then
50311: LD_VAR 0 4
50315: IFFALSE 50382
// for i = 1 to enchidnas do
50317: LD_ADDR_VAR 0 11
50321: PUSH
50322: DOUBLE
50323: LD_INT 1
50325: DEC
50326: ST_TO_ADDR
50327: LD_VAR 0 4
50331: PUSH
50332: FOR_TO
50333: IFFALSE 50380
// begin hc_class = 13 ;
50335: LD_ADDR_OWVAR 28
50339: PUSH
50340: LD_INT 13
50342: ST_TO_ADDR
// hc_gallery =  ;
50343: LD_ADDR_OWVAR 33
50347: PUSH
50348: LD_STRING 
50350: ST_TO_ADDR
// animal := CreateHuman ;
50351: LD_ADDR_VAR 0 12
50355: PUSH
50356: CALL_OW 44
50360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50361: LD_VAR 0 12
50365: PPUSH
50366: LD_VAR 0 8
50370: PPUSH
50371: LD_INT 0
50373: PPUSH
50374: CALL 52082 0 3
// end ;
50378: GO 50332
50380: POP
50381: POP
// if fishes then
50382: LD_VAR 0 7
50386: IFFALSE 50453
// for i = 1 to fishes do
50388: LD_ADDR_VAR 0 11
50392: PUSH
50393: DOUBLE
50394: LD_INT 1
50396: DEC
50397: ST_TO_ADDR
50398: LD_VAR 0 7
50402: PUSH
50403: FOR_TO
50404: IFFALSE 50451
// begin hc_class = 20 ;
50406: LD_ADDR_OWVAR 28
50410: PUSH
50411: LD_INT 20
50413: ST_TO_ADDR
// hc_gallery =  ;
50414: LD_ADDR_OWVAR 33
50418: PUSH
50419: LD_STRING 
50421: ST_TO_ADDR
// animal := CreateHuman ;
50422: LD_ADDR_VAR 0 12
50426: PUSH
50427: CALL_OW 44
50431: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50432: LD_VAR 0 12
50436: PPUSH
50437: LD_VAR 0 9
50441: PPUSH
50442: LD_INT 0
50444: PPUSH
50445: CALL 52082 0 3
// end ;
50449: GO 50403
50451: POP
50452: POP
// end ;
50453: LD_VAR 0 10
50457: RET
// export function WantHeal ( sci , unit ) ; begin
50458: LD_INT 0
50460: PPUSH
// if GetTaskList ( sci ) > 0 then
50461: LD_VAR 0 1
50465: PPUSH
50466: CALL_OW 437
50470: PUSH
50471: LD_INT 0
50473: GREATER
50474: IFFALSE 50544
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50476: LD_VAR 0 1
50480: PPUSH
50481: CALL_OW 437
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PUSH
50490: LD_INT 1
50492: ARRAY
50493: PUSH
50494: LD_STRING l
50496: EQUAL
50497: PUSH
50498: LD_VAR 0 1
50502: PPUSH
50503: CALL_OW 437
50507: PUSH
50508: LD_INT 1
50510: ARRAY
50511: PUSH
50512: LD_INT 4
50514: ARRAY
50515: PUSH
50516: LD_VAR 0 2
50520: EQUAL
50521: AND
50522: IFFALSE 50534
// result := true else
50524: LD_ADDR_VAR 0 3
50528: PUSH
50529: LD_INT 1
50531: ST_TO_ADDR
50532: GO 50542
// result := false ;
50534: LD_ADDR_VAR 0 3
50538: PUSH
50539: LD_INT 0
50541: ST_TO_ADDR
// end else
50542: GO 50552
// result := false ;
50544: LD_ADDR_VAR 0 3
50548: PUSH
50549: LD_INT 0
50551: ST_TO_ADDR
// end ;
50552: LD_VAR 0 3
50556: RET
// export function HealTarget ( sci ) ; begin
50557: LD_INT 0
50559: PPUSH
// if not sci then
50560: LD_VAR 0 1
50564: NOT
50565: IFFALSE 50569
// exit ;
50567: GO 50634
// result := 0 ;
50569: LD_ADDR_VAR 0 2
50573: PUSH
50574: LD_INT 0
50576: ST_TO_ADDR
// if GetTaskList ( sci ) then
50577: LD_VAR 0 1
50581: PPUSH
50582: CALL_OW 437
50586: IFFALSE 50634
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 437
50597: PUSH
50598: LD_INT 1
50600: ARRAY
50601: PUSH
50602: LD_INT 1
50604: ARRAY
50605: PUSH
50606: LD_STRING l
50608: EQUAL
50609: IFFALSE 50634
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50611: LD_ADDR_VAR 0 2
50615: PUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 437
50625: PUSH
50626: LD_INT 1
50628: ARRAY
50629: PUSH
50630: LD_INT 4
50632: ARRAY
50633: ST_TO_ADDR
// end ;
50634: LD_VAR 0 2
50638: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50639: LD_INT 0
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
// if not base_units then
50645: LD_VAR 0 1
50649: NOT
50650: IFFALSE 50654
// exit ;
50652: GO 50741
// result := false ;
50654: LD_ADDR_VAR 0 2
50658: PUSH
50659: LD_INT 0
50661: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50662: LD_ADDR_VAR 0 5
50666: PUSH
50667: LD_VAR 0 1
50671: PPUSH
50672: LD_INT 21
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PPUSH
50682: CALL_OW 72
50686: ST_TO_ADDR
// if not tmp then
50687: LD_VAR 0 5
50691: NOT
50692: IFFALSE 50696
// exit ;
50694: GO 50741
// for i in tmp do
50696: LD_ADDR_VAR 0 3
50700: PUSH
50701: LD_VAR 0 5
50705: PUSH
50706: FOR_IN
50707: IFFALSE 50739
// begin result := EnemyInRange ( i , 22 ) ;
50709: LD_ADDR_VAR 0 2
50713: PUSH
50714: LD_VAR 0 3
50718: PPUSH
50719: LD_INT 22
50721: PPUSH
50722: CALL 48319 0 2
50726: ST_TO_ADDR
// if result then
50727: LD_VAR 0 2
50731: IFFALSE 50737
// exit ;
50733: POP
50734: POP
50735: GO 50741
// end ;
50737: GO 50706
50739: POP
50740: POP
// end ;
50741: LD_VAR 0 2
50745: RET
// export function FilterByTag ( units , tag ) ; begin
50746: LD_INT 0
50748: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50749: LD_ADDR_VAR 0 3
50753: PUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: LD_INT 120
50761: PUSH
50762: LD_VAR 0 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PPUSH
50771: CALL_OW 72
50775: ST_TO_ADDR
// end ;
50776: LD_VAR 0 3
50780: RET
// export function IsDriver ( un ) ; begin
50781: LD_INT 0
50783: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50784: LD_ADDR_VAR 0 2
50788: PUSH
50789: LD_VAR 0 1
50793: PUSH
50794: LD_INT 55
50796: PUSH
50797: EMPTY
50798: LIST
50799: PPUSH
50800: CALL_OW 69
50804: IN
50805: ST_TO_ADDR
// end ;
50806: LD_VAR 0 2
50810: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50811: LD_INT 0
50813: PPUSH
50814: PPUSH
// list := [ ] ;
50815: LD_ADDR_VAR 0 5
50819: PUSH
50820: EMPTY
50821: ST_TO_ADDR
// case d of 0 :
50822: LD_VAR 0 3
50826: PUSH
50827: LD_INT 0
50829: DOUBLE
50830: EQUAL
50831: IFTRUE 50835
50833: GO 50968
50835: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50836: LD_ADDR_VAR 0 5
50840: PUSH
50841: LD_VAR 0 1
50845: PUSH
50846: LD_INT 4
50848: MINUS
50849: PUSH
50850: LD_VAR 0 2
50854: PUSH
50855: LD_INT 4
50857: MINUS
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: PUSH
50867: LD_VAR 0 1
50871: PUSH
50872: LD_INT 3
50874: MINUS
50875: PUSH
50876: LD_VAR 0 2
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: PUSH
50889: LD_VAR 0 1
50893: PUSH
50894: LD_INT 4
50896: PLUS
50897: PUSH
50898: LD_VAR 0 2
50902: PUSH
50903: LD_INT 4
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: PUSH
50911: LD_VAR 0 1
50915: PUSH
50916: LD_INT 3
50918: PLUS
50919: PUSH
50920: LD_VAR 0 2
50924: PUSH
50925: LD_INT 3
50927: PLUS
50928: PUSH
50929: LD_INT 5
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: LIST
50936: PUSH
50937: LD_VAR 0 1
50941: PUSH
50942: LD_VAR 0 2
50946: PUSH
50947: LD_INT 4
50949: PLUS
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
// end ; 1 :
50966: GO 51666
50968: LD_INT 1
50970: DOUBLE
50971: EQUAL
50972: IFTRUE 50976
50974: GO 51109
50976: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50977: LD_ADDR_VAR 0 5
50981: PUSH
50982: LD_VAR 0 1
50986: PUSH
50987: LD_VAR 0 2
50991: PUSH
50992: LD_INT 4
50994: MINUS
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: PUSH
51004: LD_VAR 0 1
51008: PUSH
51009: LD_INT 3
51011: MINUS
51012: PUSH
51013: LD_VAR 0 2
51017: PUSH
51018: LD_INT 3
51020: MINUS
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: PUSH
51030: LD_VAR 0 1
51034: PUSH
51035: LD_INT 4
51037: MINUS
51038: PUSH
51039: LD_VAR 0 2
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: PUSH
51052: LD_VAR 0 1
51056: PUSH
51057: LD_VAR 0 2
51061: PUSH
51062: LD_INT 3
51064: PLUS
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: PUSH
51074: LD_VAR 0 1
51078: PUSH
51079: LD_INT 4
51081: PLUS
51082: PUSH
51083: LD_VAR 0 2
51087: PUSH
51088: LD_INT 4
51090: PLUS
51091: PUSH
51092: LD_INT 5
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// end ; 2 :
51107: GO 51666
51109: LD_INT 2
51111: DOUBLE
51112: EQUAL
51113: IFTRUE 51117
51115: GO 51246
51117: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51118: LD_ADDR_VAR 0 5
51122: PUSH
51123: LD_VAR 0 1
51127: PUSH
51128: LD_VAR 0 2
51132: PUSH
51133: LD_INT 3
51135: MINUS
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: PUSH
51145: LD_VAR 0 1
51149: PUSH
51150: LD_INT 4
51152: PLUS
51153: PUSH
51154: LD_VAR 0 2
51158: PUSH
51159: LD_INT 4
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: PUSH
51167: LD_VAR 0 1
51171: PUSH
51172: LD_VAR 0 2
51176: PUSH
51177: LD_INT 4
51179: PLUS
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: LIST
51188: PUSH
51189: LD_VAR 0 1
51193: PUSH
51194: LD_INT 3
51196: MINUS
51197: PUSH
51198: LD_VAR 0 2
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: PUSH
51211: LD_VAR 0 1
51215: PUSH
51216: LD_INT 4
51218: MINUS
51219: PUSH
51220: LD_VAR 0 2
51224: PUSH
51225: LD_INT 4
51227: MINUS
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// end ; 3 :
51244: GO 51666
51246: LD_INT 3
51248: DOUBLE
51249: EQUAL
51250: IFTRUE 51254
51252: GO 51387
51254: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51255: LD_ADDR_VAR 0 5
51259: PUSH
51260: LD_VAR 0 1
51264: PUSH
51265: LD_INT 3
51267: PLUS
51268: PUSH
51269: LD_VAR 0 2
51273: PUSH
51274: LD_INT 4
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: LD_INT 4
51289: PLUS
51290: PUSH
51291: LD_VAR 0 2
51295: PUSH
51296: LD_INT 4
51298: PLUS
51299: PUSH
51300: LD_INT 5
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: PUSH
51308: LD_VAR 0 1
51312: PUSH
51313: LD_INT 4
51315: MINUS
51316: PUSH
51317: LD_VAR 0 2
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: PUSH
51330: LD_VAR 0 1
51334: PUSH
51335: LD_VAR 0 2
51339: PUSH
51340: LD_INT 4
51342: MINUS
51343: PUSH
51344: LD_INT 3
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: PUSH
51352: LD_VAR 0 1
51356: PUSH
51357: LD_INT 3
51359: MINUS
51360: PUSH
51361: LD_VAR 0 2
51365: PUSH
51366: LD_INT 3
51368: MINUS
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: ST_TO_ADDR
// end ; 4 :
51385: GO 51666
51387: LD_INT 4
51389: DOUBLE
51390: EQUAL
51391: IFTRUE 51395
51393: GO 51528
51395: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51396: LD_ADDR_VAR 0 5
51400: PUSH
51401: LD_VAR 0 1
51405: PUSH
51406: LD_VAR 0 2
51410: PUSH
51411: LD_INT 4
51413: PLUS
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: PUSH
51423: LD_VAR 0 1
51427: PUSH
51428: LD_INT 3
51430: PLUS
51431: PUSH
51432: LD_VAR 0 2
51436: PUSH
51437: LD_INT 3
51439: PLUS
51440: PUSH
51441: LD_INT 5
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: PUSH
51449: LD_VAR 0 1
51453: PUSH
51454: LD_INT 4
51456: PLUS
51457: PUSH
51458: LD_VAR 0 2
51462: PUSH
51463: LD_INT 4
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: PUSH
51471: LD_VAR 0 1
51475: PUSH
51476: LD_VAR 0 2
51480: PUSH
51481: LD_INT 3
51483: MINUS
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: PUSH
51493: LD_VAR 0 1
51497: PUSH
51498: LD_INT 4
51500: MINUS
51501: PUSH
51502: LD_VAR 0 2
51506: PUSH
51507: LD_INT 4
51509: MINUS
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// end ; 5 :
51526: GO 51666
51528: LD_INT 5
51530: DOUBLE
51531: EQUAL
51532: IFTRUE 51536
51534: GO 51665
51536: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51537: LD_ADDR_VAR 0 5
51541: PUSH
51542: LD_VAR 0 1
51546: PUSH
51547: LD_INT 4
51549: MINUS
51550: PUSH
51551: LD_VAR 0 2
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: PUSH
51564: LD_VAR 0 1
51568: PUSH
51569: LD_VAR 0 2
51573: PUSH
51574: LD_INT 4
51576: MINUS
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: PUSH
51586: LD_VAR 0 1
51590: PUSH
51591: LD_INT 4
51593: PLUS
51594: PUSH
51595: LD_VAR 0 2
51599: PUSH
51600: LD_INT 4
51602: PLUS
51603: PUSH
51604: LD_INT 5
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: PUSH
51612: LD_VAR 0 1
51616: PUSH
51617: LD_INT 3
51619: PLUS
51620: PUSH
51621: LD_VAR 0 2
51625: PUSH
51626: LD_INT 4
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: PUSH
51634: LD_VAR 0 1
51638: PUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_INT 3
51646: PLUS
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: ST_TO_ADDR
// end ; end ;
51663: GO 51666
51665: POP
// result := list ;
51666: LD_ADDR_VAR 0 4
51670: PUSH
51671: LD_VAR 0 5
51675: ST_TO_ADDR
// end ;
51676: LD_VAR 0 4
51680: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51681: LD_INT 0
51683: PPUSH
51684: PPUSH
51685: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51686: LD_VAR 0 1
51690: NOT
51691: PUSH
51692: LD_VAR 0 2
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: IN
51715: NOT
51716: OR
51717: IFFALSE 51721
// exit ;
51719: GO 51804
// tmp := [ ] ;
51721: LD_ADDR_VAR 0 5
51725: PUSH
51726: EMPTY
51727: ST_TO_ADDR
// for i in units do
51728: LD_ADDR_VAR 0 4
51732: PUSH
51733: LD_VAR 0 1
51737: PUSH
51738: FOR_IN
51739: IFFALSE 51773
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51741: LD_ADDR_VAR 0 5
51745: PUSH
51746: LD_VAR 0 5
51750: PPUSH
51751: LD_VAR 0 4
51755: PPUSH
51756: LD_VAR 0 2
51760: PPUSH
51761: CALL_OW 259
51765: PPUSH
51766: CALL 53177 0 2
51770: ST_TO_ADDR
51771: GO 51738
51773: POP
51774: POP
// if not tmp then
51775: LD_VAR 0 5
51779: NOT
51780: IFFALSE 51784
// exit ;
51782: GO 51804
// result := SortListByListDesc ( units , tmp ) ;
51784: LD_ADDR_VAR 0 3
51788: PUSH
51789: LD_VAR 0 1
51793: PPUSH
51794: LD_VAR 0 5
51798: PPUSH
51799: CALL_OW 77
51803: ST_TO_ADDR
// end ;
51804: LD_VAR 0 3
51808: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51809: LD_INT 0
51811: PPUSH
51812: PPUSH
51813: PPUSH
// result := false ;
51814: LD_ADDR_VAR 0 3
51818: PUSH
51819: LD_INT 0
51821: ST_TO_ADDR
// if not building then
51822: LD_VAR 0 2
51826: NOT
51827: IFFALSE 51831
// exit ;
51829: GO 51969
// x := GetX ( building ) ;
51831: LD_ADDR_VAR 0 4
51835: PUSH
51836: LD_VAR 0 2
51840: PPUSH
51841: CALL_OW 250
51845: ST_TO_ADDR
// y := GetY ( building ) ;
51846: LD_ADDR_VAR 0 5
51850: PUSH
51851: LD_VAR 0 2
51855: PPUSH
51856: CALL_OW 251
51860: ST_TO_ADDR
// if not x or not y then
51861: LD_VAR 0 4
51865: NOT
51866: PUSH
51867: LD_VAR 0 5
51871: NOT
51872: OR
51873: IFFALSE 51877
// exit ;
51875: GO 51969
// if GetTaskList ( unit ) then
51877: LD_VAR 0 1
51881: PPUSH
51882: CALL_OW 437
51886: IFFALSE 51969
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51888: LD_STRING e
51890: PUSH
51891: LD_VAR 0 1
51895: PPUSH
51896: CALL_OW 437
51900: PUSH
51901: LD_INT 1
51903: ARRAY
51904: PUSH
51905: LD_INT 1
51907: ARRAY
51908: EQUAL
51909: PUSH
51910: LD_VAR 0 4
51914: PUSH
51915: LD_VAR 0 1
51919: PPUSH
51920: CALL_OW 437
51924: PUSH
51925: LD_INT 1
51927: ARRAY
51928: PUSH
51929: LD_INT 2
51931: ARRAY
51932: EQUAL
51933: AND
51934: PUSH
51935: LD_VAR 0 5
51939: PUSH
51940: LD_VAR 0 1
51944: PPUSH
51945: CALL_OW 437
51949: PUSH
51950: LD_INT 1
51952: ARRAY
51953: PUSH
51954: LD_INT 3
51956: ARRAY
51957: EQUAL
51958: AND
51959: IFFALSE 51969
// result := true end ;
51961: LD_ADDR_VAR 0 3
51965: PUSH
51966: LD_INT 1
51968: ST_TO_ADDR
// end ;
51969: LD_VAR 0 3
51973: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51974: LD_INT 0
51976: PPUSH
// result := false ;
51977: LD_ADDR_VAR 0 4
51981: PUSH
51982: LD_INT 0
51984: ST_TO_ADDR
// if GetTaskList ( unit ) then
51985: LD_VAR 0 1
51989: PPUSH
51990: CALL_OW 437
51994: IFFALSE 52077
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51996: LD_STRING M
51998: PUSH
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 437
52008: PUSH
52009: LD_INT 1
52011: ARRAY
52012: PUSH
52013: LD_INT 1
52015: ARRAY
52016: EQUAL
52017: PUSH
52018: LD_VAR 0 2
52022: PUSH
52023: LD_VAR 0 1
52027: PPUSH
52028: CALL_OW 437
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PUSH
52037: LD_INT 2
52039: ARRAY
52040: EQUAL
52041: AND
52042: PUSH
52043: LD_VAR 0 3
52047: PUSH
52048: LD_VAR 0 1
52052: PPUSH
52053: CALL_OW 437
52057: PUSH
52058: LD_INT 1
52060: ARRAY
52061: PUSH
52062: LD_INT 3
52064: ARRAY
52065: EQUAL
52066: AND
52067: IFFALSE 52077
// result := true ;
52069: LD_ADDR_VAR 0 4
52073: PUSH
52074: LD_INT 1
52076: ST_TO_ADDR
// end ; end ;
52077: LD_VAR 0 4
52081: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52082: LD_INT 0
52084: PPUSH
52085: PPUSH
52086: PPUSH
52087: PPUSH
// if not unit or not area then
52088: LD_VAR 0 1
52092: NOT
52093: PUSH
52094: LD_VAR 0 2
52098: NOT
52099: OR
52100: IFFALSE 52104
// exit ;
52102: GO 52280
// tmp := AreaToList ( area , i ) ;
52104: LD_ADDR_VAR 0 6
52108: PUSH
52109: LD_VAR 0 2
52113: PPUSH
52114: LD_VAR 0 5
52118: PPUSH
52119: CALL_OW 517
52123: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52124: LD_ADDR_VAR 0 5
52128: PUSH
52129: DOUBLE
52130: LD_INT 1
52132: DEC
52133: ST_TO_ADDR
52134: LD_VAR 0 6
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PUSH
52143: FOR_TO
52144: IFFALSE 52278
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52146: LD_ADDR_VAR 0 7
52150: PUSH
52151: LD_VAR 0 6
52155: PUSH
52156: LD_INT 1
52158: ARRAY
52159: PUSH
52160: LD_VAR 0 5
52164: ARRAY
52165: PUSH
52166: LD_VAR 0 6
52170: PUSH
52171: LD_INT 2
52173: ARRAY
52174: PUSH
52175: LD_VAR 0 5
52179: ARRAY
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52185: LD_INT 92
52187: PUSH
52188: LD_VAR 0 7
52192: PUSH
52193: LD_INT 1
52195: ARRAY
52196: PUSH
52197: LD_VAR 0 7
52201: PUSH
52202: LD_INT 2
52204: ARRAY
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: PPUSH
52215: CALL_OW 69
52219: PUSH
52220: LD_INT 0
52222: EQUAL
52223: IFFALSE 52276
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52225: LD_VAR 0 1
52229: PPUSH
52230: LD_VAR 0 7
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: PPUSH
52239: LD_VAR 0 7
52243: PUSH
52244: LD_INT 2
52246: ARRAY
52247: PPUSH
52248: LD_VAR 0 3
52252: PPUSH
52253: CALL_OW 48
// result := IsPlaced ( unit ) ;
52257: LD_ADDR_VAR 0 4
52261: PUSH
52262: LD_VAR 0 1
52266: PPUSH
52267: CALL_OW 305
52271: ST_TO_ADDR
// exit ;
52272: POP
52273: POP
52274: GO 52280
// end ; end ;
52276: GO 52143
52278: POP
52279: POP
// end ;
52280: LD_VAR 0 4
52284: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52285: LD_INT 0
52287: PPUSH
52288: PPUSH
52289: PPUSH
// if not side or side > 8 then
52290: LD_VAR 0 1
52294: NOT
52295: PUSH
52296: LD_VAR 0 1
52300: PUSH
52301: LD_INT 8
52303: GREATER
52304: OR
52305: IFFALSE 52309
// exit ;
52307: GO 52496
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52309: LD_ADDR_VAR 0 4
52313: PUSH
52314: LD_INT 22
52316: PUSH
52317: LD_VAR 0 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 21
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PPUSH
52340: CALL_OW 69
52344: ST_TO_ADDR
// if not tmp then
52345: LD_VAR 0 4
52349: NOT
52350: IFFALSE 52354
// exit ;
52352: GO 52496
// enable_addtolog := true ;
52354: LD_ADDR_OWVAR 81
52358: PUSH
52359: LD_INT 1
52361: ST_TO_ADDR
// AddToLog ( [ ) ;
52362: LD_STRING [
52364: PPUSH
52365: CALL_OW 561
// for i in tmp do
52369: LD_ADDR_VAR 0 3
52373: PUSH
52374: LD_VAR 0 4
52378: PUSH
52379: FOR_IN
52380: IFFALSE 52487
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52382: LD_STRING [
52384: PUSH
52385: LD_VAR 0 3
52389: PPUSH
52390: CALL_OW 266
52394: STR
52395: PUSH
52396: LD_STRING , 
52398: STR
52399: PUSH
52400: LD_VAR 0 3
52404: PPUSH
52405: CALL_OW 250
52409: STR
52410: PUSH
52411: LD_STRING , 
52413: STR
52414: PUSH
52415: LD_VAR 0 3
52419: PPUSH
52420: CALL_OW 251
52424: STR
52425: PUSH
52426: LD_STRING , 
52428: STR
52429: PUSH
52430: LD_VAR 0 3
52434: PPUSH
52435: CALL_OW 254
52439: STR
52440: PUSH
52441: LD_STRING , 
52443: STR
52444: PUSH
52445: LD_VAR 0 3
52449: PPUSH
52450: LD_INT 1
52452: PPUSH
52453: CALL_OW 268
52457: STR
52458: PUSH
52459: LD_STRING , 
52461: STR
52462: PUSH
52463: LD_VAR 0 3
52467: PPUSH
52468: LD_INT 2
52470: PPUSH
52471: CALL_OW 268
52475: STR
52476: PUSH
52477: LD_STRING ],
52479: STR
52480: PPUSH
52481: CALL_OW 561
// end ;
52485: GO 52379
52487: POP
52488: POP
// AddToLog ( ]; ) ;
52489: LD_STRING ];
52491: PPUSH
52492: CALL_OW 561
// end ;
52496: LD_VAR 0 2
52500: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52501: LD_INT 0
52503: PPUSH
52504: PPUSH
52505: PPUSH
52506: PPUSH
52507: PPUSH
// if not area or not rate or not max then
52508: LD_VAR 0 1
52512: NOT
52513: PUSH
52514: LD_VAR 0 2
52518: NOT
52519: OR
52520: PUSH
52521: LD_VAR 0 4
52525: NOT
52526: OR
52527: IFFALSE 52531
// exit ;
52529: GO 52720
// while 1 do
52531: LD_INT 1
52533: IFFALSE 52720
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52535: LD_ADDR_VAR 0 9
52539: PUSH
52540: LD_VAR 0 1
52544: PPUSH
52545: LD_INT 1
52547: PPUSH
52548: CALL_OW 287
52552: PUSH
52553: LD_INT 10
52555: MUL
52556: ST_TO_ADDR
// r := rate / 10 ;
52557: LD_ADDR_VAR 0 7
52561: PUSH
52562: LD_VAR 0 2
52566: PUSH
52567: LD_INT 10
52569: DIVREAL
52570: ST_TO_ADDR
// time := 1 1$00 ;
52571: LD_ADDR_VAR 0 8
52575: PUSH
52576: LD_INT 2100
52578: ST_TO_ADDR
// if amount < min then
52579: LD_VAR 0 9
52583: PUSH
52584: LD_VAR 0 3
52588: LESS
52589: IFFALSE 52607
// r := r * 2 else
52591: LD_ADDR_VAR 0 7
52595: PUSH
52596: LD_VAR 0 7
52600: PUSH
52601: LD_INT 2
52603: MUL
52604: ST_TO_ADDR
52605: GO 52633
// if amount > max then
52607: LD_VAR 0 9
52611: PUSH
52612: LD_VAR 0 4
52616: GREATER
52617: IFFALSE 52633
// r := r / 2 ;
52619: LD_ADDR_VAR 0 7
52623: PUSH
52624: LD_VAR 0 7
52628: PUSH
52629: LD_INT 2
52631: DIVREAL
52632: ST_TO_ADDR
// time := time / r ;
52633: LD_ADDR_VAR 0 8
52637: PUSH
52638: LD_VAR 0 8
52642: PUSH
52643: LD_VAR 0 7
52647: DIVREAL
52648: ST_TO_ADDR
// if time < 0 then
52649: LD_VAR 0 8
52653: PUSH
52654: LD_INT 0
52656: LESS
52657: IFFALSE 52674
// time := time * - 1 ;
52659: LD_ADDR_VAR 0 8
52663: PUSH
52664: LD_VAR 0 8
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: MUL
52673: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52674: LD_VAR 0 8
52678: PUSH
52679: LD_INT 35
52681: PPUSH
52682: LD_INT 875
52684: PPUSH
52685: CALL_OW 12
52689: PLUS
52690: PPUSH
52691: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52695: LD_INT 1
52697: PPUSH
52698: LD_INT 5
52700: PPUSH
52701: CALL_OW 12
52705: PPUSH
52706: LD_VAR 0 1
52710: PPUSH
52711: LD_INT 1
52713: PPUSH
52714: CALL_OW 55
// end ;
52718: GO 52531
// end ;
52720: LD_VAR 0 5
52724: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52725: LD_INT 0
52727: PPUSH
52728: PPUSH
52729: PPUSH
52730: PPUSH
52731: PPUSH
52732: PPUSH
52733: PPUSH
52734: PPUSH
// if not turrets or not factories then
52735: LD_VAR 0 1
52739: NOT
52740: PUSH
52741: LD_VAR 0 2
52745: NOT
52746: OR
52747: IFFALSE 52751
// exit ;
52749: GO 53058
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52751: LD_ADDR_VAR 0 10
52755: PUSH
52756: LD_INT 5
52758: PUSH
52759: LD_INT 6
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 4
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 5
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 24
52793: PUSH
52794: LD_INT 25
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 23
52803: PUSH
52804: LD_INT 27
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 42
52817: PUSH
52818: LD_INT 43
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 44
52827: PUSH
52828: LD_INT 46
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 45
52837: PUSH
52838: LD_INT 47
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: LIST
52854: ST_TO_ADDR
// result := [ ] ;
52855: LD_ADDR_VAR 0 3
52859: PUSH
52860: EMPTY
52861: ST_TO_ADDR
// for i in turrets do
52862: LD_ADDR_VAR 0 4
52866: PUSH
52867: LD_VAR 0 1
52871: PUSH
52872: FOR_IN
52873: IFFALSE 53056
// begin nat := GetNation ( i ) ;
52875: LD_ADDR_VAR 0 7
52879: PUSH
52880: LD_VAR 0 4
52884: PPUSH
52885: CALL_OW 248
52889: ST_TO_ADDR
// weapon := 0 ;
52890: LD_ADDR_VAR 0 8
52894: PUSH
52895: LD_INT 0
52897: ST_TO_ADDR
// if not nat then
52898: LD_VAR 0 7
52902: NOT
52903: IFFALSE 52907
// continue ;
52905: GO 52872
// for j in list [ nat ] do
52907: LD_ADDR_VAR 0 5
52911: PUSH
52912: LD_VAR 0 10
52916: PUSH
52917: LD_VAR 0 7
52921: ARRAY
52922: PUSH
52923: FOR_IN
52924: IFFALSE 52965
// if GetBWeapon ( i ) = j [ 1 ] then
52926: LD_VAR 0 4
52930: PPUSH
52931: CALL_OW 269
52935: PUSH
52936: LD_VAR 0 5
52940: PUSH
52941: LD_INT 1
52943: ARRAY
52944: EQUAL
52945: IFFALSE 52963
// begin weapon := j [ 2 ] ;
52947: LD_ADDR_VAR 0 8
52951: PUSH
52952: LD_VAR 0 5
52956: PUSH
52957: LD_INT 2
52959: ARRAY
52960: ST_TO_ADDR
// break ;
52961: GO 52965
// end ;
52963: GO 52923
52965: POP
52966: POP
// if not weapon then
52967: LD_VAR 0 8
52971: NOT
52972: IFFALSE 52976
// continue ;
52974: GO 52872
// for k in factories do
52976: LD_ADDR_VAR 0 6
52980: PUSH
52981: LD_VAR 0 2
52985: PUSH
52986: FOR_IN
52987: IFFALSE 53052
// begin weapons := AvailableWeaponList ( k ) ;
52989: LD_ADDR_VAR 0 9
52993: PUSH
52994: LD_VAR 0 6
52998: PPUSH
52999: CALL_OW 478
53003: ST_TO_ADDR
// if not weapons then
53004: LD_VAR 0 9
53008: NOT
53009: IFFALSE 53013
// continue ;
53011: GO 52986
// if weapon in weapons then
53013: LD_VAR 0 8
53017: PUSH
53018: LD_VAR 0 9
53022: IN
53023: IFFALSE 53050
// begin result := [ i , weapon ] ;
53025: LD_ADDR_VAR 0 3
53029: PUSH
53030: LD_VAR 0 4
53034: PUSH
53035: LD_VAR 0 8
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// exit ;
53044: POP
53045: POP
53046: POP
53047: POP
53048: GO 53058
// end ; end ;
53050: GO 52986
53052: POP
53053: POP
// end ;
53054: GO 52872
53056: POP
53057: POP
// end ;
53058: LD_VAR 0 3
53062: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53063: LD_INT 0
53065: PPUSH
// if not side or side > 8 then
53066: LD_VAR 0 3
53070: NOT
53071: PUSH
53072: LD_VAR 0 3
53076: PUSH
53077: LD_INT 8
53079: GREATER
53080: OR
53081: IFFALSE 53085
// exit ;
53083: GO 53144
// if not range then
53085: LD_VAR 0 4
53089: NOT
53090: IFFALSE 53101
// range := - 12 ;
53092: LD_ADDR_VAR 0 4
53096: PUSH
53097: LD_INT 12
53099: NEG
53100: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53101: LD_VAR 0 1
53105: PPUSH
53106: LD_VAR 0 2
53110: PPUSH
53111: LD_VAR 0 3
53115: PPUSH
53116: LD_VAR 0 4
53120: PPUSH
53121: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53125: LD_VAR 0 1
53129: PPUSH
53130: LD_VAR 0 2
53134: PPUSH
53135: LD_VAR 0 3
53139: PPUSH
53140: CALL_OW 331
// end ;
53144: LD_VAR 0 5
53148: RET
// export function Video ( mode ) ; begin
53149: LD_INT 0
53151: PPUSH
// ingame_video = mode ;
53152: LD_ADDR_OWVAR 52
53156: PUSH
53157: LD_VAR 0 1
53161: ST_TO_ADDR
// interface_hidden = mode ;
53162: LD_ADDR_OWVAR 54
53166: PUSH
53167: LD_VAR 0 1
53171: ST_TO_ADDR
// end ;
53172: LD_VAR 0 2
53176: RET
// export function Join ( array , element ) ; begin
53177: LD_INT 0
53179: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53180: LD_ADDR_VAR 0 3
53184: PUSH
53185: LD_VAR 0 1
53189: PPUSH
53190: LD_VAR 0 1
53194: PUSH
53195: LD_INT 1
53197: PLUS
53198: PPUSH
53199: LD_VAR 0 2
53203: PPUSH
53204: CALL_OW 1
53208: ST_TO_ADDR
// end ;
53209: LD_VAR 0 3
53213: RET
// export function JoinUnion ( array , element ) ; begin
53214: LD_INT 0
53216: PPUSH
// result := array union element ;
53217: LD_ADDR_VAR 0 3
53221: PUSH
53222: LD_VAR 0 1
53226: PUSH
53227: LD_VAR 0 2
53231: UNION
53232: ST_TO_ADDR
// end ;
53233: LD_VAR 0 3
53237: RET
// export function GetBehemoths ( side ) ; begin
53238: LD_INT 0
53240: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53241: LD_ADDR_VAR 0 2
53245: PUSH
53246: LD_INT 22
53248: PUSH
53249: LD_VAR 0 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 31
53260: PUSH
53261: LD_INT 25
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PPUSH
53272: CALL_OW 69
53276: ST_TO_ADDR
// end ;
53277: LD_VAR 0 2
53281: RET
// export function Shuffle ( array ) ; var i , index ; begin
53282: LD_INT 0
53284: PPUSH
53285: PPUSH
53286: PPUSH
// result := [ ] ;
53287: LD_ADDR_VAR 0 2
53291: PUSH
53292: EMPTY
53293: ST_TO_ADDR
// if not array then
53294: LD_VAR 0 1
53298: NOT
53299: IFFALSE 53303
// exit ;
53301: GO 53402
// Randomize ;
53303: CALL_OW 10
// for i = array downto 1 do
53307: LD_ADDR_VAR 0 3
53311: PUSH
53312: DOUBLE
53313: LD_VAR 0 1
53317: INC
53318: ST_TO_ADDR
53319: LD_INT 1
53321: PUSH
53322: FOR_DOWNTO
53323: IFFALSE 53400
// begin index := rand ( 1 , array ) ;
53325: LD_ADDR_VAR 0 4
53329: PUSH
53330: LD_INT 1
53332: PPUSH
53333: LD_VAR 0 1
53337: PPUSH
53338: CALL_OW 12
53342: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53343: LD_ADDR_VAR 0 2
53347: PUSH
53348: LD_VAR 0 2
53352: PPUSH
53353: LD_VAR 0 2
53357: PUSH
53358: LD_INT 1
53360: PLUS
53361: PPUSH
53362: LD_VAR 0 1
53366: PUSH
53367: LD_VAR 0 4
53371: ARRAY
53372: PPUSH
53373: CALL_OW 2
53377: ST_TO_ADDR
// array := Delete ( array , index ) ;
53378: LD_ADDR_VAR 0 1
53382: PUSH
53383: LD_VAR 0 1
53387: PPUSH
53388: LD_VAR 0 4
53392: PPUSH
53393: CALL_OW 3
53397: ST_TO_ADDR
// end ;
53398: GO 53322
53400: POP
53401: POP
// end ;
53402: LD_VAR 0 2
53406: RET
// export function GetBaseMaterials ( base ) ; begin
53407: LD_INT 0
53409: PPUSH
// result := [ 0 , 0 , 0 ] ;
53410: LD_ADDR_VAR 0 2
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// if not base then
53429: LD_VAR 0 1
53433: NOT
53434: IFFALSE 53438
// exit ;
53436: GO 53487
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53438: LD_ADDR_VAR 0 2
53442: PUSH
53443: LD_VAR 0 1
53447: PPUSH
53448: LD_INT 1
53450: PPUSH
53451: CALL_OW 275
53455: PUSH
53456: LD_VAR 0 1
53460: PPUSH
53461: LD_INT 2
53463: PPUSH
53464: CALL_OW 275
53468: PUSH
53469: LD_VAR 0 1
53473: PPUSH
53474: LD_INT 3
53476: PPUSH
53477: CALL_OW 275
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// end ;
53487: LD_VAR 0 2
53491: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53492: LD_INT 0
53494: PPUSH
53495: PPUSH
// result := array ;
53496: LD_ADDR_VAR 0 3
53500: PUSH
53501: LD_VAR 0 1
53505: ST_TO_ADDR
// if size >= result then
53506: LD_VAR 0 2
53510: PUSH
53511: LD_VAR 0 3
53515: GREATEREQUAL
53516: IFFALSE 53520
// exit ;
53518: GO 53570
// if size then
53520: LD_VAR 0 2
53524: IFFALSE 53570
// for i := array downto size do
53526: LD_ADDR_VAR 0 4
53530: PUSH
53531: DOUBLE
53532: LD_VAR 0 1
53536: INC
53537: ST_TO_ADDR
53538: LD_VAR 0 2
53542: PUSH
53543: FOR_DOWNTO
53544: IFFALSE 53568
// result := Delete ( result , result ) ;
53546: LD_ADDR_VAR 0 3
53550: PUSH
53551: LD_VAR 0 3
53555: PPUSH
53556: LD_VAR 0 3
53560: PPUSH
53561: CALL_OW 3
53565: ST_TO_ADDR
53566: GO 53543
53568: POP
53569: POP
// end ;
53570: LD_VAR 0 3
53574: RET
// export function ComExit ( unit ) ; var tmp ; begin
53575: LD_INT 0
53577: PPUSH
53578: PPUSH
// if not IsInUnit ( unit ) then
53579: LD_VAR 0 1
53583: PPUSH
53584: CALL_OW 310
53588: NOT
53589: IFFALSE 53593
// exit ;
53591: GO 53653
// tmp := IsInUnit ( unit ) ;
53593: LD_ADDR_VAR 0 3
53597: PUSH
53598: LD_VAR 0 1
53602: PPUSH
53603: CALL_OW 310
53607: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53608: LD_VAR 0 3
53612: PPUSH
53613: CALL_OW 247
53617: PUSH
53618: LD_INT 2
53620: EQUAL
53621: IFFALSE 53634
// ComExitVehicle ( unit ) else
53623: LD_VAR 0 1
53627: PPUSH
53628: CALL_OW 121
53632: GO 53643
// ComExitBuilding ( unit ) ;
53634: LD_VAR 0 1
53638: PPUSH
53639: CALL_OW 122
// result := tmp ;
53643: LD_ADDR_VAR 0 2
53647: PUSH
53648: LD_VAR 0 3
53652: ST_TO_ADDR
// end ;
53653: LD_VAR 0 2
53657: RET
// export function ComExitAll ( units ) ; var i ; begin
53658: LD_INT 0
53660: PPUSH
53661: PPUSH
// if not units then
53662: LD_VAR 0 1
53666: NOT
53667: IFFALSE 53671
// exit ;
53669: GO 53697
// for i in units do
53671: LD_ADDR_VAR 0 3
53675: PUSH
53676: LD_VAR 0 1
53680: PUSH
53681: FOR_IN
53682: IFFALSE 53695
// ComExit ( i ) ;
53684: LD_VAR 0 3
53688: PPUSH
53689: CALL 53575 0 1
53693: GO 53681
53695: POP
53696: POP
// end ;
53697: LD_VAR 0 2
53701: RET
// export function ResetHc ; begin
53702: LD_INT 0
53704: PPUSH
// InitHc ;
53705: CALL_OW 19
// hc_importance := 0 ;
53709: LD_ADDR_OWVAR 32
53713: PUSH
53714: LD_INT 0
53716: ST_TO_ADDR
// end ;
53717: LD_VAR 0 1
53721: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53722: LD_INT 0
53724: PPUSH
53725: PPUSH
53726: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53727: LD_ADDR_VAR 0 6
53731: PUSH
53732: LD_VAR 0 1
53736: PUSH
53737: LD_VAR 0 3
53741: PLUS
53742: PUSH
53743: LD_INT 2
53745: DIV
53746: ST_TO_ADDR
// if _x < 0 then
53747: LD_VAR 0 6
53751: PUSH
53752: LD_INT 0
53754: LESS
53755: IFFALSE 53772
// _x := _x * - 1 ;
53757: LD_ADDR_VAR 0 6
53761: PUSH
53762: LD_VAR 0 6
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: MUL
53771: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53772: LD_ADDR_VAR 0 7
53776: PUSH
53777: LD_VAR 0 2
53781: PUSH
53782: LD_VAR 0 4
53786: PLUS
53787: PUSH
53788: LD_INT 2
53790: DIV
53791: ST_TO_ADDR
// if _y < 0 then
53792: LD_VAR 0 7
53796: PUSH
53797: LD_INT 0
53799: LESS
53800: IFFALSE 53817
// _y := _y * - 1 ;
53802: LD_ADDR_VAR 0 7
53806: PUSH
53807: LD_VAR 0 7
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: MUL
53816: ST_TO_ADDR
// result := [ _x , _y ] ;
53817: LD_ADDR_VAR 0 5
53821: PUSH
53822: LD_VAR 0 6
53826: PUSH
53827: LD_VAR 0 7
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: ST_TO_ADDR
// end ;
53836: LD_VAR 0 5
53840: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53841: LD_INT 0
53843: PPUSH
53844: PPUSH
53845: PPUSH
53846: PPUSH
// task := GetTaskList ( unit ) ;
53847: LD_ADDR_VAR 0 7
53851: PUSH
53852: LD_VAR 0 1
53856: PPUSH
53857: CALL_OW 437
53861: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53862: LD_VAR 0 7
53866: NOT
53867: PUSH
53868: LD_VAR 0 1
53872: PPUSH
53873: LD_VAR 0 2
53877: PPUSH
53878: CALL_OW 308
53882: NOT
53883: AND
53884: IFFALSE 53888
// exit ;
53886: GO 54006
// if IsInArea ( unit , area ) then
53888: LD_VAR 0 1
53892: PPUSH
53893: LD_VAR 0 2
53897: PPUSH
53898: CALL_OW 308
53902: IFFALSE 53920
// begin ComMoveToArea ( unit , goAway ) ;
53904: LD_VAR 0 1
53908: PPUSH
53909: LD_VAR 0 3
53913: PPUSH
53914: CALL_OW 113
// exit ;
53918: GO 54006
// end ; if task [ 1 ] [ 1 ] <> M then
53920: LD_VAR 0 7
53924: PUSH
53925: LD_INT 1
53927: ARRAY
53928: PUSH
53929: LD_INT 1
53931: ARRAY
53932: PUSH
53933: LD_STRING M
53935: NONEQUAL
53936: IFFALSE 53940
// exit ;
53938: GO 54006
// x := task [ 1 ] [ 2 ] ;
53940: LD_ADDR_VAR 0 5
53944: PUSH
53945: LD_VAR 0 7
53949: PUSH
53950: LD_INT 1
53952: ARRAY
53953: PUSH
53954: LD_INT 2
53956: ARRAY
53957: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53958: LD_ADDR_VAR 0 6
53962: PUSH
53963: LD_VAR 0 7
53967: PUSH
53968: LD_INT 1
53970: ARRAY
53971: PUSH
53972: LD_INT 3
53974: ARRAY
53975: ST_TO_ADDR
// if InArea ( x , y , area ) then
53976: LD_VAR 0 5
53980: PPUSH
53981: LD_VAR 0 6
53985: PPUSH
53986: LD_VAR 0 2
53990: PPUSH
53991: CALL_OW 309
53995: IFFALSE 54006
// ComStop ( unit ) ;
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 141
// end ;
54006: LD_VAR 0 4
54010: RET
// export function Abs ( value ) ; begin
54011: LD_INT 0
54013: PPUSH
// result := value ;
54014: LD_ADDR_VAR 0 2
54018: PUSH
54019: LD_VAR 0 1
54023: ST_TO_ADDR
// if value < 0 then
54024: LD_VAR 0 1
54028: PUSH
54029: LD_INT 0
54031: LESS
54032: IFFALSE 54049
// result := value * - 1 ;
54034: LD_ADDR_VAR 0 2
54038: PUSH
54039: LD_VAR 0 1
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: MUL
54048: ST_TO_ADDR
// end ;
54049: LD_VAR 0 2
54053: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54054: LD_INT 0
54056: PPUSH
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
// if not unit or not building then
54064: LD_VAR 0 1
54068: NOT
54069: PUSH
54070: LD_VAR 0 2
54074: NOT
54075: OR
54076: IFFALSE 54080
// exit ;
54078: GO 54306
// x := GetX ( building ) ;
54080: LD_ADDR_VAR 0 4
54084: PUSH
54085: LD_VAR 0 2
54089: PPUSH
54090: CALL_OW 250
54094: ST_TO_ADDR
// y := GetY ( building ) ;
54095: LD_ADDR_VAR 0 6
54099: PUSH
54100: LD_VAR 0 2
54104: PPUSH
54105: CALL_OW 251
54109: ST_TO_ADDR
// d := GetDir ( building ) ;
54110: LD_ADDR_VAR 0 8
54114: PUSH
54115: LD_VAR 0 2
54119: PPUSH
54120: CALL_OW 254
54124: ST_TO_ADDR
// r := 4 ;
54125: LD_ADDR_VAR 0 9
54129: PUSH
54130: LD_INT 4
54132: ST_TO_ADDR
// for i := 1 to 5 do
54133: LD_ADDR_VAR 0 10
54137: PUSH
54138: DOUBLE
54139: LD_INT 1
54141: DEC
54142: ST_TO_ADDR
54143: LD_INT 5
54145: PUSH
54146: FOR_TO
54147: IFFALSE 54304
// begin _x := ShiftX ( x , d , r + i ) ;
54149: LD_ADDR_VAR 0 5
54153: PUSH
54154: LD_VAR 0 4
54158: PPUSH
54159: LD_VAR 0 8
54163: PPUSH
54164: LD_VAR 0 9
54168: PUSH
54169: LD_VAR 0 10
54173: PLUS
54174: PPUSH
54175: CALL_OW 272
54179: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54180: LD_ADDR_VAR 0 7
54184: PUSH
54185: LD_VAR 0 6
54189: PPUSH
54190: LD_VAR 0 8
54194: PPUSH
54195: LD_VAR 0 9
54199: PUSH
54200: LD_VAR 0 10
54204: PLUS
54205: PPUSH
54206: CALL_OW 273
54210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54211: LD_VAR 0 5
54215: PPUSH
54216: LD_VAR 0 7
54220: PPUSH
54221: CALL_OW 488
54225: PUSH
54226: LD_VAR 0 5
54230: PPUSH
54231: LD_VAR 0 7
54235: PPUSH
54236: CALL_OW 428
54240: PPUSH
54241: CALL_OW 247
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: IN
54256: NOT
54257: AND
54258: IFFALSE 54302
// begin ComMoveXY ( unit , _x , _y ) ;
54260: LD_VAR 0 1
54264: PPUSH
54265: LD_VAR 0 5
54269: PPUSH
54270: LD_VAR 0 7
54274: PPUSH
54275: CALL_OW 111
// result := [ _x , _y ] ;
54279: LD_ADDR_VAR 0 3
54283: PUSH
54284: LD_VAR 0 5
54288: PUSH
54289: LD_VAR 0 7
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: ST_TO_ADDR
// exit ;
54298: POP
54299: POP
54300: GO 54306
// end ; end ;
54302: GO 54146
54304: POP
54305: POP
// end ;
54306: LD_VAR 0 3
54310: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54311: LD_INT 0
54313: PPUSH
54314: PPUSH
54315: PPUSH
// result := 0 ;
54316: LD_ADDR_VAR 0 3
54320: PUSH
54321: LD_INT 0
54323: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54324: LD_VAR 0 1
54328: PUSH
54329: LD_INT 0
54331: LESS
54332: PUSH
54333: LD_VAR 0 1
54337: PUSH
54338: LD_INT 8
54340: GREATER
54341: OR
54342: PUSH
54343: LD_VAR 0 2
54347: PUSH
54348: LD_INT 0
54350: LESS
54351: OR
54352: PUSH
54353: LD_VAR 0 2
54357: PUSH
54358: LD_INT 8
54360: GREATER
54361: OR
54362: IFFALSE 54366
// exit ;
54364: GO 54441
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54366: LD_ADDR_VAR 0 4
54370: PUSH
54371: LD_INT 22
54373: PUSH
54374: LD_VAR 0 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PPUSH
54383: CALL_OW 69
54387: PUSH
54388: FOR_IN
54389: IFFALSE 54439
// begin un := UnitShoot ( i ) ;
54391: LD_ADDR_VAR 0 5
54395: PUSH
54396: LD_VAR 0 4
54400: PPUSH
54401: CALL_OW 504
54405: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54406: LD_VAR 0 5
54410: PPUSH
54411: CALL_OW 255
54415: PUSH
54416: LD_VAR 0 1
54420: EQUAL
54421: IFFALSE 54437
// begin result := un ;
54423: LD_ADDR_VAR 0 3
54427: PUSH
54428: LD_VAR 0 5
54432: ST_TO_ADDR
// exit ;
54433: POP
54434: POP
54435: GO 54441
// end ; end ;
54437: GO 54388
54439: POP
54440: POP
// end ;
54441: LD_VAR 0 3
54445: RET
// export function GetCargoBay ( units ) ; begin
54446: LD_INT 0
54448: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54449: LD_ADDR_VAR 0 2
54453: PUSH
54454: LD_VAR 0 1
54458: PPUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 34
54464: PUSH
54465: LD_INT 12
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 34
54474: PUSH
54475: LD_INT 51
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 34
54484: PUSH
54485: LD_INT 32
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 34
54494: PUSH
54495: LD_INT 89
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: PPUSH
54509: CALL_OW 72
54513: ST_TO_ADDR
// end ;
54514: LD_VAR 0 2
54518: RET
// export function Negate ( value ) ; begin
54519: LD_INT 0
54521: PPUSH
// result := not value ;
54522: LD_ADDR_VAR 0 2
54526: PUSH
54527: LD_VAR 0 1
54531: NOT
54532: ST_TO_ADDR
// end ;
54533: LD_VAR 0 2
54537: RET
// export function Inc ( value ) ; begin
54538: LD_INT 0
54540: PPUSH
// result := value + 1 ;
54541: LD_ADDR_VAR 0 2
54545: PUSH
54546: LD_VAR 0 1
54550: PUSH
54551: LD_INT 1
54553: PLUS
54554: ST_TO_ADDR
// end ;
54555: LD_VAR 0 2
54559: RET
// export function Dec ( value ) ; begin
54560: LD_INT 0
54562: PPUSH
// result := value - 1 ;
54563: LD_ADDR_VAR 0 2
54567: PUSH
54568: LD_VAR 0 1
54572: PUSH
54573: LD_INT 1
54575: MINUS
54576: ST_TO_ADDR
// end ;
54577: LD_VAR 0 2
54581: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54582: LD_INT 0
54584: PPUSH
54585: PPUSH
54586: PPUSH
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
54591: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54592: LD_VAR 0 1
54596: PPUSH
54597: LD_VAR 0 2
54601: PPUSH
54602: CALL_OW 488
54606: NOT
54607: PUSH
54608: LD_VAR 0 3
54612: PPUSH
54613: LD_VAR 0 4
54617: PPUSH
54618: CALL_OW 488
54622: NOT
54623: OR
54624: IFFALSE 54637
// begin result := - 1 ;
54626: LD_ADDR_VAR 0 5
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: ST_TO_ADDR
// exit ;
54635: GO 54872
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54637: LD_ADDR_VAR 0 12
54641: PUSH
54642: LD_VAR 0 1
54646: PPUSH
54647: LD_VAR 0 2
54651: PPUSH
54652: LD_VAR 0 3
54656: PPUSH
54657: LD_VAR 0 4
54661: PPUSH
54662: CALL 53722 0 4
54666: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54667: LD_ADDR_VAR 0 11
54671: PUSH
54672: LD_VAR 0 1
54676: PPUSH
54677: LD_VAR 0 2
54681: PPUSH
54682: LD_VAR 0 12
54686: PUSH
54687: LD_INT 1
54689: ARRAY
54690: PPUSH
54691: LD_VAR 0 12
54695: PUSH
54696: LD_INT 2
54698: ARRAY
54699: PPUSH
54700: CALL_OW 298
54704: ST_TO_ADDR
// distance := 9999 ;
54705: LD_ADDR_VAR 0 10
54709: PUSH
54710: LD_INT 9999
54712: ST_TO_ADDR
// for i := 0 to 5 do
54713: LD_ADDR_VAR 0 6
54717: PUSH
54718: DOUBLE
54719: LD_INT 0
54721: DEC
54722: ST_TO_ADDR
54723: LD_INT 5
54725: PUSH
54726: FOR_TO
54727: IFFALSE 54870
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54729: LD_ADDR_VAR 0 7
54733: PUSH
54734: LD_VAR 0 1
54738: PPUSH
54739: LD_VAR 0 6
54743: PPUSH
54744: LD_VAR 0 11
54748: PPUSH
54749: CALL_OW 272
54753: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54754: LD_ADDR_VAR 0 8
54758: PUSH
54759: LD_VAR 0 2
54763: PPUSH
54764: LD_VAR 0 6
54768: PPUSH
54769: LD_VAR 0 11
54773: PPUSH
54774: CALL_OW 273
54778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54779: LD_VAR 0 7
54783: PPUSH
54784: LD_VAR 0 8
54788: PPUSH
54789: CALL_OW 488
54793: NOT
54794: IFFALSE 54798
// continue ;
54796: GO 54726
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54798: LD_ADDR_VAR 0 9
54802: PUSH
54803: LD_VAR 0 12
54807: PUSH
54808: LD_INT 1
54810: ARRAY
54811: PPUSH
54812: LD_VAR 0 12
54816: PUSH
54817: LD_INT 2
54819: ARRAY
54820: PPUSH
54821: LD_VAR 0 7
54825: PPUSH
54826: LD_VAR 0 8
54830: PPUSH
54831: CALL_OW 298
54835: ST_TO_ADDR
// if tmp < distance then
54836: LD_VAR 0 9
54840: PUSH
54841: LD_VAR 0 10
54845: LESS
54846: IFFALSE 54868
// begin result := i ;
54848: LD_ADDR_VAR 0 5
54852: PUSH
54853: LD_VAR 0 6
54857: ST_TO_ADDR
// distance := tmp ;
54858: LD_ADDR_VAR 0 10
54862: PUSH
54863: LD_VAR 0 9
54867: ST_TO_ADDR
// end ; end ;
54868: GO 54726
54870: POP
54871: POP
// end ;
54872: LD_VAR 0 5
54876: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54877: LD_INT 0
54879: PPUSH
54880: PPUSH
// if not driver or not IsInUnit ( driver ) then
54881: LD_VAR 0 1
54885: NOT
54886: PUSH
54887: LD_VAR 0 1
54891: PPUSH
54892: CALL_OW 310
54896: NOT
54897: OR
54898: IFFALSE 54902
// exit ;
54900: GO 54992
// vehicle := IsInUnit ( driver ) ;
54902: LD_ADDR_VAR 0 3
54906: PUSH
54907: LD_VAR 0 1
54911: PPUSH
54912: CALL_OW 310
54916: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54917: LD_VAR 0 1
54921: PPUSH
54922: LD_STRING \
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: PUSH
54952: LD_STRING E
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_VAR 0 3
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PPUSH
54988: CALL_OW 446
// end ;
54992: LD_VAR 0 2
54996: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54997: LD_INT 0
54999: PPUSH
55000: PPUSH
// if not driver or not IsInUnit ( driver ) then
55001: LD_VAR 0 1
55005: NOT
55006: PUSH
55007: LD_VAR 0 1
55011: PPUSH
55012: CALL_OW 310
55016: NOT
55017: OR
55018: IFFALSE 55022
// exit ;
55020: GO 55112
// vehicle := IsInUnit ( driver ) ;
55022: LD_ADDR_VAR 0 3
55026: PUSH
55027: LD_VAR 0 1
55031: PPUSH
55032: CALL_OW 310
55036: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55037: LD_VAR 0 1
55041: PPUSH
55042: LD_STRING \
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: PUSH
55072: LD_STRING E
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_VAR 0 3
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PPUSH
55108: CALL_OW 447
// end ;
55112: LD_VAR 0 2
55116: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55117: LD_INT 0
55119: PPUSH
55120: PPUSH
55121: PPUSH
// tmp := [ ] ;
55122: LD_ADDR_VAR 0 5
55126: PUSH
55127: EMPTY
55128: ST_TO_ADDR
// for i in units do
55129: LD_ADDR_VAR 0 4
55133: PUSH
55134: LD_VAR 0 1
55138: PUSH
55139: FOR_IN
55140: IFFALSE 55178
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55142: LD_ADDR_VAR 0 5
55146: PUSH
55147: LD_VAR 0 5
55151: PPUSH
55152: LD_VAR 0 5
55156: PUSH
55157: LD_INT 1
55159: PLUS
55160: PPUSH
55161: LD_VAR 0 4
55165: PPUSH
55166: CALL_OW 256
55170: PPUSH
55171: CALL_OW 2
55175: ST_TO_ADDR
55176: GO 55139
55178: POP
55179: POP
// if not tmp then
55180: LD_VAR 0 5
55184: NOT
55185: IFFALSE 55189
// exit ;
55187: GO 55237
// if asc then
55189: LD_VAR 0 2
55193: IFFALSE 55217
// result := SortListByListAsc ( units , tmp ) else
55195: LD_ADDR_VAR 0 3
55199: PUSH
55200: LD_VAR 0 1
55204: PPUSH
55205: LD_VAR 0 5
55209: PPUSH
55210: CALL_OW 76
55214: ST_TO_ADDR
55215: GO 55237
// result := SortListByListDesc ( units , tmp ) ;
55217: LD_ADDR_VAR 0 3
55221: PUSH
55222: LD_VAR 0 1
55226: PPUSH
55227: LD_VAR 0 5
55231: PPUSH
55232: CALL_OW 77
55236: ST_TO_ADDR
// end ;
55237: LD_VAR 0 3
55241: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55242: LD_INT 0
55244: PPUSH
55245: PPUSH
// task := GetTaskList ( mech ) ;
55246: LD_ADDR_VAR 0 4
55250: PUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: CALL_OW 437
55260: ST_TO_ADDR
// if not task then
55261: LD_VAR 0 4
55265: NOT
55266: IFFALSE 55270
// exit ;
55268: GO 55312
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55270: LD_ADDR_VAR 0 3
55274: PUSH
55275: LD_VAR 0 4
55279: PUSH
55280: LD_INT 1
55282: ARRAY
55283: PUSH
55284: LD_INT 1
55286: ARRAY
55287: PUSH
55288: LD_STRING r
55290: EQUAL
55291: PUSH
55292: LD_VAR 0 4
55296: PUSH
55297: LD_INT 1
55299: ARRAY
55300: PUSH
55301: LD_INT 4
55303: ARRAY
55304: PUSH
55305: LD_VAR 0 2
55309: EQUAL
55310: AND
55311: ST_TO_ADDR
// end ;
55312: LD_VAR 0 3
55316: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55317: LD_INT 0
55319: PPUSH
// SetDir ( unit , d ) ;
55320: LD_VAR 0 1
55324: PPUSH
55325: LD_VAR 0 4
55329: PPUSH
55330: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55334: LD_VAR 0 1
55338: PPUSH
55339: LD_VAR 0 2
55343: PPUSH
55344: LD_VAR 0 3
55348: PPUSH
55349: LD_VAR 0 5
55353: PPUSH
55354: CALL_OW 48
// end ;
55358: LD_VAR 0 6
55362: RET
// export function ToNaturalNumber ( number ) ; begin
55363: LD_INT 0
55365: PPUSH
// result := number div 1 ;
55366: LD_ADDR_VAR 0 2
55370: PUSH
55371: LD_VAR 0 1
55375: PUSH
55376: LD_INT 1
55378: DIV
55379: ST_TO_ADDR
// if number < 0 then
55380: LD_VAR 0 1
55384: PUSH
55385: LD_INT 0
55387: LESS
55388: IFFALSE 55398
// result := 0 ;
55390: LD_ADDR_VAR 0 2
55394: PUSH
55395: LD_INT 0
55397: ST_TO_ADDR
// end ;
55398: LD_VAR 0 2
55402: RET
// export function SortByClass ( units , class ) ; var un ; begin
55403: LD_INT 0
55405: PPUSH
55406: PPUSH
// if not units or not class then
55407: LD_VAR 0 1
55411: NOT
55412: PUSH
55413: LD_VAR 0 2
55417: NOT
55418: OR
55419: IFFALSE 55423
// exit ;
55421: GO 55518
// result := [ ] ;
55423: LD_ADDR_VAR 0 3
55427: PUSH
55428: EMPTY
55429: ST_TO_ADDR
// for un in units do
55430: LD_ADDR_VAR 0 4
55434: PUSH
55435: LD_VAR 0 1
55439: PUSH
55440: FOR_IN
55441: IFFALSE 55516
// if GetClass ( un ) = class then
55443: LD_VAR 0 4
55447: PPUSH
55448: CALL_OW 257
55452: PUSH
55453: LD_VAR 0 2
55457: EQUAL
55458: IFFALSE 55485
// result := Insert ( result , 1 , un ) else
55460: LD_ADDR_VAR 0 3
55464: PUSH
55465: LD_VAR 0 3
55469: PPUSH
55470: LD_INT 1
55472: PPUSH
55473: LD_VAR 0 4
55477: PPUSH
55478: CALL_OW 2
55482: ST_TO_ADDR
55483: GO 55514
// result := Replace ( result , result + 1 , un ) ;
55485: LD_ADDR_VAR 0 3
55489: PUSH
55490: LD_VAR 0 3
55494: PPUSH
55495: LD_VAR 0 3
55499: PUSH
55500: LD_INT 1
55502: PLUS
55503: PPUSH
55504: LD_VAR 0 4
55508: PPUSH
55509: CALL_OW 1
55513: ST_TO_ADDR
55514: GO 55440
55516: POP
55517: POP
// end ;
55518: LD_VAR 0 3
55522: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55523: LD_INT 0
55525: PPUSH
55526: PPUSH
55527: PPUSH
55528: PPUSH
55529: PPUSH
55530: PPUSH
55531: PPUSH
// result := [ ] ;
55532: LD_ADDR_VAR 0 4
55536: PUSH
55537: EMPTY
55538: ST_TO_ADDR
// if x - r < 0 then
55539: LD_VAR 0 1
55543: PUSH
55544: LD_VAR 0 3
55548: MINUS
55549: PUSH
55550: LD_INT 0
55552: LESS
55553: IFFALSE 55565
// min_x := 0 else
55555: LD_ADDR_VAR 0 8
55559: PUSH
55560: LD_INT 0
55562: ST_TO_ADDR
55563: GO 55581
// min_x := x - r ;
55565: LD_ADDR_VAR 0 8
55569: PUSH
55570: LD_VAR 0 1
55574: PUSH
55575: LD_VAR 0 3
55579: MINUS
55580: ST_TO_ADDR
// if y - r < 0 then
55581: LD_VAR 0 2
55585: PUSH
55586: LD_VAR 0 3
55590: MINUS
55591: PUSH
55592: LD_INT 0
55594: LESS
55595: IFFALSE 55607
// min_y := 0 else
55597: LD_ADDR_VAR 0 7
55601: PUSH
55602: LD_INT 0
55604: ST_TO_ADDR
55605: GO 55623
// min_y := y - r ;
55607: LD_ADDR_VAR 0 7
55611: PUSH
55612: LD_VAR 0 2
55616: PUSH
55617: LD_VAR 0 3
55621: MINUS
55622: ST_TO_ADDR
// max_x := x + r ;
55623: LD_ADDR_VAR 0 9
55627: PUSH
55628: LD_VAR 0 1
55632: PUSH
55633: LD_VAR 0 3
55637: PLUS
55638: ST_TO_ADDR
// max_y := y + r ;
55639: LD_ADDR_VAR 0 10
55643: PUSH
55644: LD_VAR 0 2
55648: PUSH
55649: LD_VAR 0 3
55653: PLUS
55654: ST_TO_ADDR
// for _x = min_x to max_x do
55655: LD_ADDR_VAR 0 5
55659: PUSH
55660: DOUBLE
55661: LD_VAR 0 8
55665: DEC
55666: ST_TO_ADDR
55667: LD_VAR 0 9
55671: PUSH
55672: FOR_TO
55673: IFFALSE 55774
// for _y = min_y to max_y do
55675: LD_ADDR_VAR 0 6
55679: PUSH
55680: DOUBLE
55681: LD_VAR 0 7
55685: DEC
55686: ST_TO_ADDR
55687: LD_VAR 0 10
55691: PUSH
55692: FOR_TO
55693: IFFALSE 55770
// begin if not ValidHex ( _x , _y ) then
55695: LD_VAR 0 5
55699: PPUSH
55700: LD_VAR 0 6
55704: PPUSH
55705: CALL_OW 488
55709: NOT
55710: IFFALSE 55714
// continue ;
55712: GO 55692
// if GetResourceTypeXY ( _x , _y ) then
55714: LD_VAR 0 5
55718: PPUSH
55719: LD_VAR 0 6
55723: PPUSH
55724: CALL_OW 283
55728: IFFALSE 55768
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55730: LD_ADDR_VAR 0 4
55734: PUSH
55735: LD_VAR 0 4
55739: PPUSH
55740: LD_VAR 0 4
55744: PUSH
55745: LD_INT 1
55747: PLUS
55748: PPUSH
55749: LD_VAR 0 5
55753: PUSH
55754: LD_VAR 0 6
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PPUSH
55763: CALL_OW 1
55767: ST_TO_ADDR
// end ;
55768: GO 55692
55770: POP
55771: POP
55772: GO 55672
55774: POP
55775: POP
// end ;
55776: LD_VAR 0 4
55780: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55781: LD_INT 0
55783: PPUSH
55784: PPUSH
55785: PPUSH
55786: PPUSH
55787: PPUSH
55788: PPUSH
55789: PPUSH
55790: PPUSH
// if not units then
55791: LD_VAR 0 1
55795: NOT
55796: IFFALSE 55800
// exit ;
55798: GO 56328
// result := UnitFilter ( units , [ f_ok ] ) ;
55800: LD_ADDR_VAR 0 3
55804: PUSH
55805: LD_VAR 0 1
55809: PPUSH
55810: LD_INT 50
55812: PUSH
55813: EMPTY
55814: LIST
55815: PPUSH
55816: CALL_OW 72
55820: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55821: LD_ADDR_VAR 0 8
55825: PUSH
55826: LD_VAR 0 1
55830: PUSH
55831: LD_INT 1
55833: ARRAY
55834: PPUSH
55835: CALL_OW 255
55839: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55840: LD_ADDR_VAR 0 10
55844: PUSH
55845: LD_INT 29
55847: PUSH
55848: LD_INT 91
55850: PUSH
55851: LD_INT 49
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// if not result then
55859: LD_VAR 0 3
55863: NOT
55864: IFFALSE 55868
// exit ;
55866: GO 56328
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55868: LD_ADDR_VAR 0 5
55872: PUSH
55873: LD_INT 81
55875: PUSH
55876: LD_VAR 0 8
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PPUSH
55885: CALL_OW 69
55889: ST_TO_ADDR
// for i in result do
55890: LD_ADDR_VAR 0 4
55894: PUSH
55895: LD_VAR 0 3
55899: PUSH
55900: FOR_IN
55901: IFFALSE 56326
// begin tag := GetTag ( i ) + 1 ;
55903: LD_ADDR_VAR 0 9
55907: PUSH
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL_OW 110
55917: PUSH
55918: LD_INT 1
55920: PLUS
55921: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55922: LD_ADDR_VAR 0 7
55926: PUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: CALL_OW 250
55936: PPUSH
55937: LD_VAR 0 4
55941: PPUSH
55942: CALL_OW 251
55946: PPUSH
55947: LD_INT 4
55949: PPUSH
55950: CALL 55523 0 3
55954: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55955: LD_VAR 0 4
55959: PPUSH
55960: CALL_OW 247
55964: PUSH
55965: LD_INT 2
55967: EQUAL
55968: PUSH
55969: LD_VAR 0 7
55973: PUSH
55974: LD_INT 2
55976: GREATER
55977: AND
55978: PUSH
55979: LD_VAR 0 4
55983: PPUSH
55984: CALL_OW 264
55988: PUSH
55989: LD_VAR 0 10
55993: IN
55994: NOT
55995: AND
55996: IFFALSE 56035
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55998: LD_VAR 0 4
56002: PPUSH
56003: LD_VAR 0 7
56007: PUSH
56008: LD_INT 1
56010: ARRAY
56011: PUSH
56012: LD_INT 1
56014: ARRAY
56015: PPUSH
56016: LD_VAR 0 7
56020: PUSH
56021: LD_INT 1
56023: ARRAY
56024: PUSH
56025: LD_INT 2
56027: ARRAY
56028: PPUSH
56029: CALL_OW 116
56033: GO 56324
// if path > tag then
56035: LD_VAR 0 2
56039: PUSH
56040: LD_VAR 0 9
56044: GREATER
56045: IFFALSE 56253
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56047: LD_ADDR_VAR 0 6
56051: PUSH
56052: LD_VAR 0 5
56056: PPUSH
56057: LD_INT 91
56059: PUSH
56060: LD_VAR 0 4
56064: PUSH
56065: LD_INT 8
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: PPUSH
56073: CALL_OW 72
56077: ST_TO_ADDR
// if nearEnemy then
56078: LD_VAR 0 6
56082: IFFALSE 56151
// begin if GetWeapon ( i ) = ru_time_lapser then
56084: LD_VAR 0 4
56088: PPUSH
56089: CALL_OW 264
56093: PUSH
56094: LD_INT 49
56096: EQUAL
56097: IFFALSE 56125
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56099: LD_VAR 0 4
56103: PPUSH
56104: LD_VAR 0 6
56108: PPUSH
56109: LD_VAR 0 4
56113: PPUSH
56114: CALL_OW 74
56118: PPUSH
56119: CALL_OW 112
56123: GO 56149
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56125: LD_VAR 0 4
56129: PPUSH
56130: LD_VAR 0 6
56134: PPUSH
56135: LD_VAR 0 4
56139: PPUSH
56140: CALL_OW 74
56144: PPUSH
56145: CALL 57399 0 2
// end else
56149: GO 56251
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56151: LD_VAR 0 4
56155: PPUSH
56156: LD_VAR 0 2
56160: PUSH
56161: LD_VAR 0 9
56165: ARRAY
56166: PUSH
56167: LD_INT 1
56169: ARRAY
56170: PPUSH
56171: LD_VAR 0 2
56175: PUSH
56176: LD_VAR 0 9
56180: ARRAY
56181: PUSH
56182: LD_INT 2
56184: ARRAY
56185: PPUSH
56186: CALL_OW 297
56190: PUSH
56191: LD_INT 6
56193: GREATER
56194: IFFALSE 56237
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56196: LD_VAR 0 4
56200: PPUSH
56201: LD_VAR 0 2
56205: PUSH
56206: LD_VAR 0 9
56210: ARRAY
56211: PUSH
56212: LD_INT 1
56214: ARRAY
56215: PPUSH
56216: LD_VAR 0 2
56220: PUSH
56221: LD_VAR 0 9
56225: ARRAY
56226: PUSH
56227: LD_INT 2
56229: ARRAY
56230: PPUSH
56231: CALL_OW 114
56235: GO 56251
// SetTag ( i , tag ) ;
56237: LD_VAR 0 4
56241: PPUSH
56242: LD_VAR 0 9
56246: PPUSH
56247: CALL_OW 109
// end else
56251: GO 56324
// if enemy then
56253: LD_VAR 0 5
56257: IFFALSE 56324
// begin if GetWeapon ( i ) = ru_time_lapser then
56259: LD_VAR 0 4
56263: PPUSH
56264: CALL_OW 264
56268: PUSH
56269: LD_INT 49
56271: EQUAL
56272: IFFALSE 56300
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56274: LD_VAR 0 4
56278: PPUSH
56279: LD_VAR 0 5
56283: PPUSH
56284: LD_VAR 0 4
56288: PPUSH
56289: CALL_OW 74
56293: PPUSH
56294: CALL_OW 112
56298: GO 56324
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56300: LD_VAR 0 4
56304: PPUSH
56305: LD_VAR 0 5
56309: PPUSH
56310: LD_VAR 0 4
56314: PPUSH
56315: CALL_OW 74
56319: PPUSH
56320: CALL 57399 0 2
// end ; end ;
56324: GO 55900
56326: POP
56327: POP
// end ;
56328: LD_VAR 0 3
56332: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56333: LD_INT 0
56335: PPUSH
56336: PPUSH
56337: PPUSH
// if not unit or IsInUnit ( unit ) then
56338: LD_VAR 0 1
56342: NOT
56343: PUSH
56344: LD_VAR 0 1
56348: PPUSH
56349: CALL_OW 310
56353: OR
56354: IFFALSE 56358
// exit ;
56356: GO 56449
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56358: LD_ADDR_VAR 0 4
56362: PUSH
56363: LD_VAR 0 1
56367: PPUSH
56368: CALL_OW 250
56372: PPUSH
56373: LD_VAR 0 2
56377: PPUSH
56378: LD_INT 1
56380: PPUSH
56381: CALL_OW 272
56385: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56386: LD_ADDR_VAR 0 5
56390: PUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 251
56400: PPUSH
56401: LD_VAR 0 2
56405: PPUSH
56406: LD_INT 1
56408: PPUSH
56409: CALL_OW 273
56413: ST_TO_ADDR
// if ValidHex ( x , y ) then
56414: LD_VAR 0 4
56418: PPUSH
56419: LD_VAR 0 5
56423: PPUSH
56424: CALL_OW 488
56428: IFFALSE 56449
// ComTurnXY ( unit , x , y ) ;
56430: LD_VAR 0 1
56434: PPUSH
56435: LD_VAR 0 4
56439: PPUSH
56440: LD_VAR 0 5
56444: PPUSH
56445: CALL_OW 118
// end ;
56449: LD_VAR 0 3
56453: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
// result := false ;
56458: LD_ADDR_VAR 0 3
56462: PUSH
56463: LD_INT 0
56465: ST_TO_ADDR
// if not units then
56466: LD_VAR 0 2
56470: NOT
56471: IFFALSE 56475
// exit ;
56473: GO 56520
// for i in units do
56475: LD_ADDR_VAR 0 4
56479: PUSH
56480: LD_VAR 0 2
56484: PUSH
56485: FOR_IN
56486: IFFALSE 56518
// if See ( side , i ) then
56488: LD_VAR 0 1
56492: PPUSH
56493: LD_VAR 0 4
56497: PPUSH
56498: CALL_OW 292
56502: IFFALSE 56516
// begin result := true ;
56504: LD_ADDR_VAR 0 3
56508: PUSH
56509: LD_INT 1
56511: ST_TO_ADDR
// exit ;
56512: POP
56513: POP
56514: GO 56520
// end ;
56516: GO 56485
56518: POP
56519: POP
// end ;
56520: LD_VAR 0 3
56524: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56525: LD_INT 0
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
// if not unit or not points then
56531: LD_VAR 0 1
56535: NOT
56536: PUSH
56537: LD_VAR 0 2
56541: NOT
56542: OR
56543: IFFALSE 56547
// exit ;
56545: GO 56637
// dist := 99999 ;
56547: LD_ADDR_VAR 0 5
56551: PUSH
56552: LD_INT 99999
56554: ST_TO_ADDR
// for i in points do
56555: LD_ADDR_VAR 0 4
56559: PUSH
56560: LD_VAR 0 2
56564: PUSH
56565: FOR_IN
56566: IFFALSE 56635
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56568: LD_ADDR_VAR 0 6
56572: PUSH
56573: LD_VAR 0 1
56577: PPUSH
56578: LD_VAR 0 4
56582: PUSH
56583: LD_INT 1
56585: ARRAY
56586: PPUSH
56587: LD_VAR 0 4
56591: PUSH
56592: LD_INT 2
56594: ARRAY
56595: PPUSH
56596: CALL_OW 297
56600: ST_TO_ADDR
// if tmpDist < dist then
56601: LD_VAR 0 6
56605: PUSH
56606: LD_VAR 0 5
56610: LESS
56611: IFFALSE 56633
// begin result := i ;
56613: LD_ADDR_VAR 0 3
56617: PUSH
56618: LD_VAR 0 4
56622: ST_TO_ADDR
// dist := tmpDist ;
56623: LD_ADDR_VAR 0 5
56627: PUSH
56628: LD_VAR 0 6
56632: ST_TO_ADDR
// end ; end ;
56633: GO 56565
56635: POP
56636: POP
// end ;
56637: LD_VAR 0 3
56641: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56642: LD_INT 0
56644: PPUSH
// uc_side := side ;
56645: LD_ADDR_OWVAR 20
56649: PUSH
56650: LD_VAR 0 1
56654: ST_TO_ADDR
// uc_nation := 3 ;
56655: LD_ADDR_OWVAR 21
56659: PUSH
56660: LD_INT 3
56662: ST_TO_ADDR
// vc_chassis := 25 ;
56663: LD_ADDR_OWVAR 37
56667: PUSH
56668: LD_INT 25
56670: ST_TO_ADDR
// vc_engine := engine_siberite ;
56671: LD_ADDR_OWVAR 39
56675: PUSH
56676: LD_INT 3
56678: ST_TO_ADDR
// vc_control := control_computer ;
56679: LD_ADDR_OWVAR 38
56683: PUSH
56684: LD_INT 3
56686: ST_TO_ADDR
// vc_weapon := 59 ;
56687: LD_ADDR_OWVAR 40
56691: PUSH
56692: LD_INT 59
56694: ST_TO_ADDR
// result := CreateVehicle ;
56695: LD_ADDR_VAR 0 5
56699: PUSH
56700: CALL_OW 45
56704: ST_TO_ADDR
// SetDir ( result , d ) ;
56705: LD_VAR 0 5
56709: PPUSH
56710: LD_VAR 0 4
56714: PPUSH
56715: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56719: LD_VAR 0 5
56723: PPUSH
56724: LD_VAR 0 2
56728: PPUSH
56729: LD_VAR 0 3
56733: PPUSH
56734: LD_INT 0
56736: PPUSH
56737: CALL_OW 48
// end ;
56741: LD_VAR 0 5
56745: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56746: LD_INT 0
56748: PPUSH
56749: PPUSH
56750: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56751: LD_ADDR_VAR 0 2
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56774: LD_VAR 0 1
56778: NOT
56779: PUSH
56780: LD_VAR 0 1
56784: PPUSH
56785: CALL_OW 264
56789: PUSH
56790: LD_INT 12
56792: PUSH
56793: LD_INT 51
56795: PUSH
56796: LD_INT 32
56798: PUSH
56799: LD_INT 89
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: IN
56808: NOT
56809: OR
56810: IFFALSE 56814
// exit ;
56812: GO 56912
// for i := 1 to 3 do
56814: LD_ADDR_VAR 0 3
56818: PUSH
56819: DOUBLE
56820: LD_INT 1
56822: DEC
56823: ST_TO_ADDR
56824: LD_INT 3
56826: PUSH
56827: FOR_TO
56828: IFFALSE 56910
// begin tmp := GetCargo ( cargo , i ) ;
56830: LD_ADDR_VAR 0 4
56834: PUSH
56835: LD_VAR 0 1
56839: PPUSH
56840: LD_VAR 0 3
56844: PPUSH
56845: CALL_OW 289
56849: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56850: LD_ADDR_VAR 0 2
56854: PUSH
56855: LD_VAR 0 2
56859: PPUSH
56860: LD_VAR 0 3
56864: PPUSH
56865: LD_VAR 0 4
56869: PPUSH
56870: CALL_OW 1
56874: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56875: LD_ADDR_VAR 0 2
56879: PUSH
56880: LD_VAR 0 2
56884: PPUSH
56885: LD_INT 4
56887: PPUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_INT 4
56895: ARRAY
56896: PUSH
56897: LD_VAR 0 4
56901: PLUS
56902: PPUSH
56903: CALL_OW 1
56907: ST_TO_ADDR
// end ;
56908: GO 56827
56910: POP
56911: POP
// end ;
56912: LD_VAR 0 2
56916: RET
// export function Length ( array ) ; begin
56917: LD_INT 0
56919: PPUSH
// result := array + 0 ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_VAR 0 1
56929: PUSH
56930: LD_INT 0
56932: PLUS
56933: ST_TO_ADDR
// end ;
56934: LD_VAR 0 2
56938: RET
// export function PrepareArray ( array ) ; begin
56939: LD_INT 0
56941: PPUSH
// result := array diff 0 ;
56942: LD_ADDR_VAR 0 2
56946: PUSH
56947: LD_VAR 0 1
56951: PUSH
56952: LD_INT 0
56954: DIFF
56955: ST_TO_ADDR
// if not result [ 1 ] then
56956: LD_VAR 0 2
56960: PUSH
56961: LD_INT 1
56963: ARRAY
56964: NOT
56965: IFFALSE 56985
// result := Delete ( result , 1 ) ;
56967: LD_ADDR_VAR 0 2
56971: PUSH
56972: LD_VAR 0 2
56976: PPUSH
56977: LD_INT 1
56979: PPUSH
56980: CALL_OW 3
56984: ST_TO_ADDR
// end ;
56985: LD_VAR 0 2
56989: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56990: LD_INT 0
56992: PPUSH
56993: PPUSH
56994: PPUSH
56995: PPUSH
// sibRocketRange := 25 ;
56996: LD_ADDR_VAR 0 6
57000: PUSH
57001: LD_INT 25
57003: ST_TO_ADDR
// result := false ;
57004: LD_ADDR_VAR 0 4
57008: PUSH
57009: LD_INT 0
57011: ST_TO_ADDR
// for i := 0 to 5 do
57012: LD_ADDR_VAR 0 5
57016: PUSH
57017: DOUBLE
57018: LD_INT 0
57020: DEC
57021: ST_TO_ADDR
57022: LD_INT 5
57024: PUSH
57025: FOR_TO
57026: IFFALSE 57093
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57028: LD_VAR 0 1
57032: PPUSH
57033: LD_VAR 0 5
57037: PPUSH
57038: LD_VAR 0 6
57042: PPUSH
57043: CALL_OW 272
57047: PPUSH
57048: LD_VAR 0 2
57052: PPUSH
57053: LD_VAR 0 5
57057: PPUSH
57058: LD_VAR 0 6
57062: PPUSH
57063: CALL_OW 273
57067: PPUSH
57068: LD_VAR 0 3
57072: PPUSH
57073: CALL_OW 309
57077: IFFALSE 57091
// begin result := true ;
57079: LD_ADDR_VAR 0 4
57083: PUSH
57084: LD_INT 1
57086: ST_TO_ADDR
// exit ;
57087: POP
57088: POP
57089: GO 57095
// end ;
57091: GO 57025
57093: POP
57094: POP
// end ;
57095: LD_VAR 0 4
57099: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57100: LD_INT 0
57102: PPUSH
57103: PPUSH
57104: PPUSH
// if btype = b_depot then
57105: LD_VAR 0 2
57109: PUSH
57110: LD_INT 0
57112: EQUAL
57113: IFFALSE 57125
// begin result := true ;
57115: LD_ADDR_VAR 0 3
57119: PUSH
57120: LD_INT 1
57122: ST_TO_ADDR
// exit ;
57123: GO 57241
// end ; pom := GetBase ( depot ) ;
57125: LD_ADDR_VAR 0 4
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 274
57139: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57140: LD_ADDR_VAR 0 5
57144: PUSH
57145: LD_VAR 0 2
57149: PPUSH
57150: LD_VAR 0 1
57154: PPUSH
57155: CALL_OW 248
57159: PPUSH
57160: CALL_OW 450
57164: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57165: LD_ADDR_VAR 0 3
57169: PUSH
57170: LD_VAR 0 4
57174: PPUSH
57175: LD_INT 1
57177: PPUSH
57178: CALL_OW 275
57182: PUSH
57183: LD_VAR 0 5
57187: PUSH
57188: LD_INT 1
57190: ARRAY
57191: GREATEREQUAL
57192: PUSH
57193: LD_VAR 0 4
57197: PPUSH
57198: LD_INT 2
57200: PPUSH
57201: CALL_OW 275
57205: PUSH
57206: LD_VAR 0 5
57210: PUSH
57211: LD_INT 2
57213: ARRAY
57214: GREATEREQUAL
57215: AND
57216: PUSH
57217: LD_VAR 0 4
57221: PPUSH
57222: LD_INT 3
57224: PPUSH
57225: CALL_OW 275
57229: PUSH
57230: LD_VAR 0 5
57234: PUSH
57235: LD_INT 3
57237: ARRAY
57238: GREATEREQUAL
57239: AND
57240: ST_TO_ADDR
// end ;
57241: LD_VAR 0 3
57245: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57246: LD_INT 0
57248: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57249: LD_VAR 0 1
57253: PPUSH
57254: LD_VAR 0 2
57258: PPUSH
57259: LD_INT 0
57261: PPUSH
57262: LD_INT 0
57264: PPUSH
57265: LD_INT 1
57267: PPUSH
57268: LD_INT 0
57270: PPUSH
57271: CALL_OW 587
// end ;
57275: LD_VAR 0 3
57279: RET
// export function CenterOnNow ( unit ) ; begin
57280: LD_INT 0
57282: PPUSH
// result := IsInUnit ( unit ) ;
57283: LD_ADDR_VAR 0 2
57287: PUSH
57288: LD_VAR 0 1
57292: PPUSH
57293: CALL_OW 310
57297: ST_TO_ADDR
// if not result then
57298: LD_VAR 0 2
57302: NOT
57303: IFFALSE 57315
// result := unit ;
57305: LD_ADDR_VAR 0 2
57309: PUSH
57310: LD_VAR 0 1
57314: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57315: LD_VAR 0 1
57319: PPUSH
57320: CALL_OW 87
// end ;
57324: LD_VAR 0 2
57328: RET
// export function ComMoveHex ( unit , hex ) ; begin
57329: LD_INT 0
57331: PPUSH
// if not hex then
57332: LD_VAR 0 2
57336: NOT
57337: IFFALSE 57341
// exit ;
57339: GO 57394
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57341: LD_VAR 0 2
57345: PUSH
57346: LD_INT 1
57348: ARRAY
57349: PPUSH
57350: LD_VAR 0 2
57354: PUSH
57355: LD_INT 2
57357: ARRAY
57358: PPUSH
57359: CALL_OW 428
57363: IFFALSE 57367
// exit ;
57365: GO 57394
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57367: LD_VAR 0 1
57371: PPUSH
57372: LD_VAR 0 2
57376: PUSH
57377: LD_INT 1
57379: ARRAY
57380: PPUSH
57381: LD_VAR 0 2
57385: PUSH
57386: LD_INT 2
57388: ARRAY
57389: PPUSH
57390: CALL_OW 111
// end ;
57394: LD_VAR 0 3
57398: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57399: LD_INT 0
57401: PPUSH
57402: PPUSH
57403: PPUSH
// if not unit or not enemy then
57404: LD_VAR 0 1
57408: NOT
57409: PUSH
57410: LD_VAR 0 2
57414: NOT
57415: OR
57416: IFFALSE 57420
// exit ;
57418: GO 57544
// x := GetX ( enemy ) ;
57420: LD_ADDR_VAR 0 4
57424: PUSH
57425: LD_VAR 0 2
57429: PPUSH
57430: CALL_OW 250
57434: ST_TO_ADDR
// y := GetY ( enemy ) ;
57435: LD_ADDR_VAR 0 5
57439: PUSH
57440: LD_VAR 0 2
57444: PPUSH
57445: CALL_OW 251
57449: ST_TO_ADDR
// if ValidHex ( x , y ) then
57450: LD_VAR 0 4
57454: PPUSH
57455: LD_VAR 0 5
57459: PPUSH
57460: CALL_OW 488
57464: IFFALSE 57544
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57466: LD_VAR 0 2
57470: PPUSH
57471: CALL_OW 247
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: IN
57486: PUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: CALL_OW 255
57496: PPUSH
57497: LD_VAR 0 2
57501: PPUSH
57502: CALL_OW 292
57506: OR
57507: IFFALSE 57525
// ComAttackUnit ( unit , enemy ) else
57509: LD_VAR 0 1
57513: PPUSH
57514: LD_VAR 0 2
57518: PPUSH
57519: CALL_OW 115
57523: GO 57544
// ComAgressiveMove ( unit , x , y ) ;
57525: LD_VAR 0 1
57529: PPUSH
57530: LD_VAR 0 4
57534: PPUSH
57535: LD_VAR 0 5
57539: PPUSH
57540: CALL_OW 114
// end ;
57544: LD_VAR 0 3
57548: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57549: LD_INT 0
57551: PPUSH
57552: PPUSH
57553: PPUSH
// list := AreaToList ( area , 0 ) ;
57554: LD_ADDR_VAR 0 5
57558: PUSH
57559: LD_VAR 0 1
57563: PPUSH
57564: LD_INT 0
57566: PPUSH
57567: CALL_OW 517
57571: ST_TO_ADDR
// if not list then
57572: LD_VAR 0 5
57576: NOT
57577: IFFALSE 57581
// exit ;
57579: GO 57711
// if all then
57581: LD_VAR 0 2
57585: IFFALSE 57673
// begin for i := 1 to list [ 1 ] do
57587: LD_ADDR_VAR 0 4
57591: PUSH
57592: DOUBLE
57593: LD_INT 1
57595: DEC
57596: ST_TO_ADDR
57597: LD_VAR 0 5
57601: PUSH
57602: LD_INT 1
57604: ARRAY
57605: PUSH
57606: FOR_TO
57607: IFFALSE 57669
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57609: LD_ADDR_VAR 0 3
57613: PUSH
57614: LD_VAR 0 3
57618: PPUSH
57619: LD_VAR 0 3
57623: PUSH
57624: LD_INT 1
57626: PLUS
57627: PPUSH
57628: LD_VAR 0 5
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: PUSH
57637: LD_VAR 0 4
57641: ARRAY
57642: PUSH
57643: LD_VAR 0 5
57647: PUSH
57648: LD_INT 2
57650: ARRAY
57651: PUSH
57652: LD_VAR 0 4
57656: ARRAY
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PPUSH
57662: CALL_OW 1
57666: ST_TO_ADDR
57667: GO 57606
57669: POP
57670: POP
// exit ;
57671: GO 57711
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57673: LD_ADDR_VAR 0 3
57677: PUSH
57678: LD_VAR 0 5
57682: PUSH
57683: LD_INT 1
57685: ARRAY
57686: PUSH
57687: LD_INT 1
57689: ARRAY
57690: PUSH
57691: LD_VAR 0 5
57695: PUSH
57696: LD_INT 2
57698: ARRAY
57699: PUSH
57700: LD_INT 1
57702: ARRAY
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: EMPTY
57709: LIST
57710: ST_TO_ADDR
// end ;
57711: LD_VAR 0 3
57715: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57716: LD_INT 0
57718: PPUSH
57719: PPUSH
// list := AreaToList ( area , 0 ) ;
57720: LD_ADDR_VAR 0 4
57724: PUSH
57725: LD_VAR 0 1
57729: PPUSH
57730: LD_INT 0
57732: PPUSH
57733: CALL_OW 517
57737: ST_TO_ADDR
// if not list then
57738: LD_VAR 0 4
57742: NOT
57743: IFFALSE 57747
// exit ;
57745: GO 57788
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57747: LD_ADDR_VAR 0 3
57751: PUSH
57752: LD_VAR 0 4
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: PUSH
57761: LD_INT 1
57763: ARRAY
57764: PUSH
57765: LD_VAR 0 4
57769: PUSH
57770: LD_INT 2
57772: ARRAY
57773: PUSH
57774: LD_INT 1
57776: ARRAY
57777: PUSH
57778: LD_VAR 0 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// end ;
57788: LD_VAR 0 3
57792: RET
// export function First ( array ) ; begin
57793: LD_INT 0
57795: PPUSH
// if not array then
57796: LD_VAR 0 1
57800: NOT
57801: IFFALSE 57805
// exit ;
57803: GO 57819
// result := array [ 1 ] ;
57805: LD_ADDR_VAR 0 2
57809: PUSH
57810: LD_VAR 0 1
57814: PUSH
57815: LD_INT 1
57817: ARRAY
57818: ST_TO_ADDR
// end ;
57819: LD_VAR 0 2
57823: RET
// export function Last ( array ) ; begin
57824: LD_INT 0
57826: PPUSH
// if not array then
57827: LD_VAR 0 1
57831: NOT
57832: IFFALSE 57836
// exit ;
57834: GO 57852
// result := array [ array ] ;
57836: LD_ADDR_VAR 0 2
57840: PUSH
57841: LD_VAR 0 1
57845: PUSH
57846: LD_VAR 0 1
57850: ARRAY
57851: ST_TO_ADDR
// end ;
57852: LD_VAR 0 2
57856: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57857: LD_INT 0
57859: PPUSH
57860: PPUSH
// result := [ ] ;
57861: LD_ADDR_VAR 0 5
57865: PUSH
57866: EMPTY
57867: ST_TO_ADDR
// if not array then
57868: LD_VAR 0 1
57872: NOT
57873: IFFALSE 57877
// exit ;
57875: GO 57989
// for i := 1 to array do
57877: LD_ADDR_VAR 0 6
57881: PUSH
57882: DOUBLE
57883: LD_INT 1
57885: DEC
57886: ST_TO_ADDR
57887: LD_VAR 0 1
57891: PUSH
57892: FOR_TO
57893: IFFALSE 57987
// if array [ i ] [ index ] = value then
57895: LD_VAR 0 1
57899: PUSH
57900: LD_VAR 0 6
57904: ARRAY
57905: PUSH
57906: LD_VAR 0 2
57910: ARRAY
57911: PUSH
57912: LD_VAR 0 3
57916: EQUAL
57917: IFFALSE 57985
// begin if indexColumn then
57919: LD_VAR 0 4
57923: IFFALSE 57959
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57925: LD_ADDR_VAR 0 5
57929: PUSH
57930: LD_VAR 0 5
57934: PPUSH
57935: LD_VAR 0 1
57939: PUSH
57940: LD_VAR 0 6
57944: ARRAY
57945: PUSH
57946: LD_VAR 0 4
57950: ARRAY
57951: PPUSH
57952: CALL 53177 0 2
57956: ST_TO_ADDR
57957: GO 57985
// result := Join ( result , array [ i ] ) ;
57959: LD_ADDR_VAR 0 5
57963: PUSH
57964: LD_VAR 0 5
57968: PPUSH
57969: LD_VAR 0 1
57973: PUSH
57974: LD_VAR 0 6
57978: ARRAY
57979: PPUSH
57980: CALL 53177 0 2
57984: ST_TO_ADDR
// end ;
57985: GO 57892
57987: POP
57988: POP
// end ;
57989: LD_VAR 0 5
57993: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57994: LD_INT 0
57996: PPUSH
// if not vehicles or not parkingPoint then
57997: LD_VAR 0 1
58001: NOT
58002: PUSH
58003: LD_VAR 0 2
58007: NOT
58008: OR
58009: IFFALSE 58013
// exit ;
58011: GO 58111
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58013: LD_ADDR_VAR 0 1
58017: PUSH
58018: LD_VAR 0 1
58022: PPUSH
58023: LD_INT 50
58025: PUSH
58026: EMPTY
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 92
58034: PUSH
58035: LD_VAR 0 2
58039: PUSH
58040: LD_INT 1
58042: ARRAY
58043: PUSH
58044: LD_VAR 0 2
58048: PUSH
58049: LD_INT 2
58051: ARRAY
58052: PUSH
58053: LD_INT 8
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PPUSH
58070: CALL_OW 72
58074: ST_TO_ADDR
// if not vehicles then
58075: LD_VAR 0 1
58079: NOT
58080: IFFALSE 58084
// exit ;
58082: GO 58111
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58084: LD_VAR 0 1
58088: PPUSH
58089: LD_VAR 0 2
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PPUSH
58098: LD_VAR 0 2
58102: PUSH
58103: LD_INT 2
58105: ARRAY
58106: PPUSH
58107: CALL_OW 111
// end ;
58111: LD_VAR 0 3
58115: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58116: LD_INT 0
58118: PPUSH
58119: PPUSH
58120: PPUSH
// if not side or not area then
58121: LD_VAR 0 1
58125: NOT
58126: PUSH
58127: LD_VAR 0 2
58131: NOT
58132: OR
58133: IFFALSE 58137
// exit ;
58135: GO 58256
// tmp := AreaToList ( area , 0 ) ;
58137: LD_ADDR_VAR 0 5
58141: PUSH
58142: LD_VAR 0 2
58146: PPUSH
58147: LD_INT 0
58149: PPUSH
58150: CALL_OW 517
58154: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58155: LD_ADDR_VAR 0 4
58159: PUSH
58160: DOUBLE
58161: LD_INT 1
58163: DEC
58164: ST_TO_ADDR
58165: LD_VAR 0 5
58169: PUSH
58170: LD_INT 1
58172: ARRAY
58173: PUSH
58174: FOR_TO
58175: IFFALSE 58254
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58177: LD_VAR 0 5
58181: PUSH
58182: LD_INT 1
58184: ARRAY
58185: PUSH
58186: LD_VAR 0 4
58190: ARRAY
58191: PPUSH
58192: LD_VAR 0 5
58196: PUSH
58197: LD_INT 2
58199: ARRAY
58200: PUSH
58201: LD_VAR 0 4
58205: ARRAY
58206: PPUSH
58207: CALL_OW 351
58211: IFFALSE 58252
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58213: LD_VAR 0 5
58217: PUSH
58218: LD_INT 1
58220: ARRAY
58221: PUSH
58222: LD_VAR 0 4
58226: ARRAY
58227: PPUSH
58228: LD_VAR 0 5
58232: PUSH
58233: LD_INT 2
58235: ARRAY
58236: PUSH
58237: LD_VAR 0 4
58241: ARRAY
58242: PPUSH
58243: LD_VAR 0 1
58247: PPUSH
58248: CALL_OW 244
// end ;
58252: GO 58174
58254: POP
58255: POP
// end ; end_of_file
58256: LD_VAR 0 3
58260: RET
// export function SOS_UnitDestroyed ( un ) ; begin
58261: LD_INT 0
58263: PPUSH
// ComRadiation ( un ) ;
58264: LD_VAR 0 1
58268: PPUSH
58269: CALL 59250 0 1
// end ;
58273: LD_VAR 0 2
58277: RET
// export function SOS_UnitKamikazed ( un ) ; begin
58278: LD_INT 0
58280: PPUSH
// ComRadiation ( un ) ;
58281: LD_VAR 0 1
58285: PPUSH
58286: CALL 59250 0 1
// end ;
58290: LD_VAR 0 2
58294: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58295: LD_INT 0
58297: PPUSH
// end ;
58298: LD_VAR 0 4
58302: RET
// export function SOS_Command ( cmd ) ; begin
58303: LD_INT 0
58305: PPUSH
// end ;
58306: LD_VAR 0 2
58310: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58311: LD_INT 0
58313: PPUSH
// end ;
58314: LD_VAR 0 6
58318: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
58319: LD_INT 0
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
// if not vehicle or not factory then
58326: LD_VAR 0 1
58330: NOT
58331: PUSH
58332: LD_VAR 0 2
58336: NOT
58337: OR
58338: IFFALSE 58342
// exit ;
58340: GO 58841
// if not factoryWaypoints then
58342: LD_EXP 55
58346: NOT
58347: IFFALSE 58351
// exit ;
58349: GO 58841
// for i := 1 to Count ( factoryWaypoints ) do
58351: LD_ADDR_VAR 0 4
58355: PUSH
58356: DOUBLE
58357: LD_INT 1
58359: DEC
58360: ST_TO_ADDR
58361: LD_EXP 55
58365: PPUSH
58366: CALL 17568 0 1
58370: PUSH
58371: FOR_TO
58372: IFFALSE 58839
// if factoryWaypoints [ i ] [ 2 ] = factory then
58374: LD_EXP 55
58378: PUSH
58379: LD_VAR 0 4
58383: ARRAY
58384: PUSH
58385: LD_INT 2
58387: ARRAY
58388: PUSH
58389: LD_VAR 0 2
58393: EQUAL
58394: IFFALSE 58837
// begin if GetControl ( vehicle ) = control_manual then
58396: LD_VAR 0 1
58400: PPUSH
58401: CALL_OW 263
58405: PUSH
58406: LD_INT 1
58408: EQUAL
58409: IFFALSE 58720
// begin driver := IsDrivenBy ( vehicle ) ;
58411: LD_ADDR_VAR 0 6
58415: PUSH
58416: LD_VAR 0 1
58420: PPUSH
58421: CALL_OW 311
58425: ST_TO_ADDR
// tag := GetTag ( driver ) ;
58426: LD_ADDR_VAR 0 5
58430: PUSH
58431: LD_VAR 0 6
58435: PPUSH
58436: CALL_OW 110
58440: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
58441: LD_VAR 0 5
58445: PUSH
58446: LD_INT 501
58448: EQUAL
58449: PUSH
58450: LD_VAR 0 1
58454: PPUSH
58455: CALL_OW 110
58459: PUSH
58460: LD_INT 501
58462: EQUAL
58463: OR
58464: IFFALSE 58470
// exit ;
58466: POP
58467: POP
58468: GO 58841
// if not HasTask ( driver ) then
58470: LD_VAR 0 6
58474: PPUSH
58475: CALL_OW 314
58479: NOT
58480: IFFALSE 58718
// begin SetTag ( driver , tDriver ) ;
58482: LD_VAR 0 6
58486: PPUSH
58487: LD_INT 501
58489: PPUSH
58490: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
58494: LD_VAR 0 1
58498: PPUSH
58499: LD_INT 501
58501: PPUSH
58502: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58506: LD_ADDR_VAR 0 7
58510: PUSH
58511: LD_EXP 55
58515: PUSH
58516: LD_VAR 0 4
58520: ARRAY
58521: PUSH
58522: LD_INT 3
58524: ARRAY
58525: PPUSH
58526: LD_EXP 55
58530: PUSH
58531: LD_VAR 0 4
58535: ARRAY
58536: PUSH
58537: LD_INT 4
58539: ARRAY
58540: PPUSH
58541: CALL_OW 428
58545: ST_TO_ADDR
// if hex then
58546: LD_VAR 0 7
58550: IFFALSE 58568
// ComMoveUnit ( driver , hex ) else
58552: LD_VAR 0 6
58556: PPUSH
58557: LD_VAR 0 7
58561: PPUSH
58562: CALL_OW 112
58566: GO 58607
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58568: LD_VAR 0 6
58572: PPUSH
58573: LD_EXP 55
58577: PUSH
58578: LD_VAR 0 4
58582: ARRAY
58583: PUSH
58584: LD_INT 3
58586: ARRAY
58587: PPUSH
58588: LD_EXP 55
58592: PUSH
58593: LD_VAR 0 4
58597: ARRAY
58598: PUSH
58599: LD_INT 4
58601: ARRAY
58602: PPUSH
58603: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58607: LD_VAR 0 6
58611: PPUSH
58612: CALL_OW 181
// if Multiplayer then
58616: LD_OWVAR 4
58620: IFFALSE 58669
// begin repeat wait ( 10 ) ;
58622: LD_INT 10
58624: PPUSH
58625: CALL_OW 67
// until not IsInUnit ( driver ) ;
58629: LD_VAR 0 6
58633: PPUSH
58634: CALL_OW 310
58638: NOT
58639: IFFALSE 58622
// if not HasTask ( driver ) then
58641: LD_VAR 0 6
58645: PPUSH
58646: CALL_OW 314
58650: NOT
58651: IFFALSE 58667
// ComEnterUnit ( driver , factory ) ;
58653: LD_VAR 0 6
58657: PPUSH
58658: LD_VAR 0 2
58662: PPUSH
58663: CALL_OW 120
// end else
58667: GO 58683
// AddComEnterUnit ( driver , factory ) ;
58669: LD_VAR 0 6
58673: PPUSH
58674: LD_VAR 0 2
58678: PPUSH
58679: CALL_OW 180
// wait ( 0 0$1 ) ;
58683: LD_INT 35
58685: PPUSH
58686: CALL_OW 67
// SetTag ( driver , tag ) ;
58690: LD_VAR 0 6
58694: PPUSH
58695: LD_VAR 0 5
58699: PPUSH
58700: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
58704: LD_VAR 0 1
58708: PPUSH
58709: LD_INT 0
58711: PPUSH
58712: CALL_OW 109
// break ;
58716: GO 58839
// end ; end else
58718: GO 58837
// if GetControl ( vehicle ) = control_remote then
58720: LD_VAR 0 1
58724: PPUSH
58725: CALL_OW 263
58729: PUSH
58730: LD_INT 2
58732: EQUAL
58733: IFFALSE 58796
// begin wait ( 0 0$2 ) ;
58735: LD_INT 70
58737: PPUSH
58738: CALL_OW 67
// if Connect ( vehicle ) then
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL 23774 0 1
58751: IFFALSE 58792
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58753: LD_VAR 0 1
58757: PPUSH
58758: LD_EXP 55
58762: PUSH
58763: LD_VAR 0 4
58767: ARRAY
58768: PUSH
58769: LD_INT 3
58771: ARRAY
58772: PPUSH
58773: LD_EXP 55
58777: PUSH
58778: LD_VAR 0 4
58782: ARRAY
58783: PUSH
58784: LD_INT 4
58786: ARRAY
58787: PPUSH
58788: CALL_OW 171
// break ;
58792: GO 58839
// end else
58794: GO 58837
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58796: LD_VAR 0 1
58800: PPUSH
58801: LD_EXP 55
58805: PUSH
58806: LD_VAR 0 4
58810: ARRAY
58811: PUSH
58812: LD_INT 3
58814: ARRAY
58815: PPUSH
58816: LD_EXP 55
58820: PUSH
58821: LD_VAR 0 4
58825: ARRAY
58826: PUSH
58827: LD_INT 4
58829: ARRAY
58830: PPUSH
58831: CALL_OW 171
// break ;
58835: GO 58839
// end ; end ;
58837: GO 58371
58839: POP
58840: POP
// end ;
58841: LD_VAR 0 3
58845: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58846: LD_INT 0
58848: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58849: LD_VAR 0 1
58853: PUSH
58854: LD_INT 250
58856: EQUAL
58857: PUSH
58858: LD_VAR 0 2
58862: PPUSH
58863: CALL_OW 264
58867: PUSH
58868: LD_INT 81
58870: EQUAL
58871: AND
58872: IFFALSE 58893
// MinerPlaceMine ( unit , x , y ) ;
58874: LD_VAR 0 2
58878: PPUSH
58879: LD_VAR 0 4
58883: PPUSH
58884: LD_VAR 0 5
58888: PPUSH
58889: CALL 61985 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58893: LD_VAR 0 1
58897: PUSH
58898: LD_INT 251
58900: EQUAL
58901: PUSH
58902: LD_VAR 0 2
58906: PPUSH
58907: CALL_OW 264
58911: PUSH
58912: LD_INT 81
58914: EQUAL
58915: AND
58916: IFFALSE 58937
// MinerDetonateMine ( unit , x , y ) ;
58918: LD_VAR 0 2
58922: PPUSH
58923: LD_VAR 0 4
58927: PPUSH
58928: LD_VAR 0 5
58932: PPUSH
58933: CALL 62260 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58937: LD_VAR 0 1
58941: PUSH
58942: LD_INT 252
58944: EQUAL
58945: PUSH
58946: LD_VAR 0 2
58950: PPUSH
58951: CALL_OW 264
58955: PUSH
58956: LD_INT 81
58958: EQUAL
58959: AND
58960: IFFALSE 58981
// MinerCreateMinefield ( unit , x , y ) ;
58962: LD_VAR 0 2
58966: PPUSH
58967: LD_VAR 0 4
58971: PPUSH
58972: LD_VAR 0 5
58976: PPUSH
58977: CALL 62677 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58981: LD_VAR 0 1
58985: PUSH
58986: LD_INT 253
58988: EQUAL
58989: PUSH
58990: LD_VAR 0 2
58994: PPUSH
58995: CALL_OW 257
58999: PUSH
59000: LD_INT 5
59002: EQUAL
59003: AND
59004: IFFALSE 59025
// ComBinocular ( unit , x , y ) ;
59006: LD_VAR 0 2
59010: PPUSH
59011: LD_VAR 0 4
59015: PPUSH
59016: LD_VAR 0 5
59020: PPUSH
59021: CALL 63046 0 3
// if selectedUnit then
59025: LD_VAR 0 3
59029: IFFALSE 59085
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59031: LD_VAR 0 1
59035: PUSH
59036: LD_INT 254
59038: EQUAL
59039: PUSH
59040: LD_VAR 0 2
59044: PPUSH
59045: CALL_OW 264
59049: PUSH
59050: LD_INT 99
59052: EQUAL
59053: AND
59054: PUSH
59055: LD_VAR 0 3
59059: PPUSH
59060: CALL_OW 263
59064: PUSH
59065: LD_INT 3
59067: EQUAL
59068: AND
59069: IFFALSE 59085
// HackDestroyVehicle ( unit , selectedUnit ) ;
59071: LD_VAR 0 2
59075: PPUSH
59076: LD_VAR 0 3
59080: PPUSH
59081: CALL 61349 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59085: LD_VAR 0 1
59089: PUSH
59090: LD_INT 255
59092: EQUAL
59093: PUSH
59094: LD_VAR 0 2
59098: PPUSH
59099: CALL_OW 264
59103: PUSH
59104: LD_INT 14
59106: PUSH
59107: LD_INT 53
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: IN
59114: AND
59115: PUSH
59116: LD_VAR 0 4
59120: PPUSH
59121: LD_VAR 0 5
59125: PPUSH
59126: CALL_OW 488
59130: AND
59131: IFFALSE 59155
// CutTreeXYR ( unit , x , y , 12 ) ;
59133: LD_VAR 0 2
59137: PPUSH
59138: LD_VAR 0 4
59142: PPUSH
59143: LD_VAR 0 5
59147: PPUSH
59148: LD_INT 12
59150: PPUSH
59151: CALL 59346 0 4
// if cmd = 256 then
59155: LD_VAR 0 1
59159: PUSH
59160: LD_INT 256
59162: EQUAL
59163: IFFALSE 59184
// SetFactoryWaypoint ( unit , x , y ) ;
59165: LD_VAR 0 2
59169: PPUSH
59170: LD_VAR 0 4
59174: PPUSH
59175: LD_VAR 0 5
59179: PPUSH
59180: CALL 63601 0 3
// if cmd = 257 then
59184: LD_VAR 0 1
59188: PUSH
59189: LD_INT 257
59191: EQUAL
59192: IFFALSE 59213
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59194: LD_VAR 0 2
59198: PPUSH
59199: LD_VAR 0 4
59203: PPUSH
59204: LD_VAR 0 5
59208: PPUSH
59209: CALL 64091 0 3
// if cmd = 258 then
59213: LD_VAR 0 1
59217: PUSH
59218: LD_INT 258
59220: EQUAL
59221: IFFALSE 59245
// BurnTreeXYR ( unit , x , y , 8 ) ;
59223: LD_VAR 0 2
59227: PPUSH
59228: LD_VAR 0 4
59232: PPUSH
59233: LD_VAR 0 5
59237: PPUSH
59238: LD_INT 8
59240: PPUSH
59241: CALL 59740 0 4
// end ;
59245: LD_VAR 0 6
59249: RET
// export function ComRadiation ( un ) ; var eff ; begin
59250: LD_INT 0
59252: PPUSH
59253: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
59254: LD_VAR 0 1
59258: PPUSH
59259: CALL_OW 264
59263: PUSH
59264: LD_INT 91
59266: NONEQUAL
59267: IFFALSE 59271
// exit ;
59269: GO 59341
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59271: LD_INT 68
59273: PPUSH
59274: LD_VAR 0 1
59278: PPUSH
59279: CALL_OW 255
59283: PPUSH
59284: CALL_OW 321
59288: PUSH
59289: LD_INT 2
59291: EQUAL
59292: IFFALSE 59304
// eff := 70 else
59294: LD_ADDR_VAR 0 3
59298: PUSH
59299: LD_INT 70
59301: ST_TO_ADDR
59302: GO 59312
// eff := 30 ;
59304: LD_ADDR_VAR 0 3
59308: PUSH
59309: LD_INT 30
59311: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 250
59321: PPUSH
59322: LD_VAR 0 1
59326: PPUSH
59327: CALL_OW 251
59331: PPUSH
59332: LD_VAR 0 3
59336: PPUSH
59337: CALL_OW 495
// end ;
59341: LD_VAR 0 2
59345: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59346: LD_INT 0
59348: PPUSH
59349: PPUSH
59350: PPUSH
59351: PPUSH
59352: PPUSH
59353: PPUSH
59354: PPUSH
59355: PPUSH
59356: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 302
59366: NOT
59367: PUSH
59368: LD_VAR 0 2
59372: PPUSH
59373: LD_VAR 0 3
59377: PPUSH
59378: CALL_OW 488
59382: NOT
59383: OR
59384: PUSH
59385: LD_VAR 0 4
59389: NOT
59390: OR
59391: IFFALSE 59395
// exit ;
59393: GO 59735
// list := [ ] ;
59395: LD_ADDR_VAR 0 13
59399: PUSH
59400: EMPTY
59401: ST_TO_ADDR
// if x - r < 0 then
59402: LD_VAR 0 2
59406: PUSH
59407: LD_VAR 0 4
59411: MINUS
59412: PUSH
59413: LD_INT 0
59415: LESS
59416: IFFALSE 59428
// min_x := 0 else
59418: LD_ADDR_VAR 0 7
59422: PUSH
59423: LD_INT 0
59425: ST_TO_ADDR
59426: GO 59444
// min_x := x - r ;
59428: LD_ADDR_VAR 0 7
59432: PUSH
59433: LD_VAR 0 2
59437: PUSH
59438: LD_VAR 0 4
59442: MINUS
59443: ST_TO_ADDR
// if y - r < 0 then
59444: LD_VAR 0 3
59448: PUSH
59449: LD_VAR 0 4
59453: MINUS
59454: PUSH
59455: LD_INT 0
59457: LESS
59458: IFFALSE 59470
// min_y := 0 else
59460: LD_ADDR_VAR 0 8
59464: PUSH
59465: LD_INT 0
59467: ST_TO_ADDR
59468: GO 59486
// min_y := y - r ;
59470: LD_ADDR_VAR 0 8
59474: PUSH
59475: LD_VAR 0 3
59479: PUSH
59480: LD_VAR 0 4
59484: MINUS
59485: ST_TO_ADDR
// max_x := x + r ;
59486: LD_ADDR_VAR 0 9
59490: PUSH
59491: LD_VAR 0 2
59495: PUSH
59496: LD_VAR 0 4
59500: PLUS
59501: ST_TO_ADDR
// max_y := y + r ;
59502: LD_ADDR_VAR 0 10
59506: PUSH
59507: LD_VAR 0 3
59511: PUSH
59512: LD_VAR 0 4
59516: PLUS
59517: ST_TO_ADDR
// for _x = min_x to max_x do
59518: LD_ADDR_VAR 0 11
59522: PUSH
59523: DOUBLE
59524: LD_VAR 0 7
59528: DEC
59529: ST_TO_ADDR
59530: LD_VAR 0 9
59534: PUSH
59535: FOR_TO
59536: IFFALSE 59653
// for _y = min_y to max_y do
59538: LD_ADDR_VAR 0 12
59542: PUSH
59543: DOUBLE
59544: LD_VAR 0 8
59548: DEC
59549: ST_TO_ADDR
59550: LD_VAR 0 10
59554: PUSH
59555: FOR_TO
59556: IFFALSE 59649
// begin if not ValidHex ( _x , _y ) then
59558: LD_VAR 0 11
59562: PPUSH
59563: LD_VAR 0 12
59567: PPUSH
59568: CALL_OW 488
59572: NOT
59573: IFFALSE 59577
// continue ;
59575: GO 59555
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59577: LD_VAR 0 11
59581: PPUSH
59582: LD_VAR 0 12
59586: PPUSH
59587: CALL_OW 351
59591: PUSH
59592: LD_VAR 0 11
59596: PPUSH
59597: LD_VAR 0 12
59601: PPUSH
59602: CALL_OW 554
59606: AND
59607: IFFALSE 59647
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59609: LD_ADDR_VAR 0 13
59613: PUSH
59614: LD_VAR 0 13
59618: PPUSH
59619: LD_VAR 0 13
59623: PUSH
59624: LD_INT 1
59626: PLUS
59627: PPUSH
59628: LD_VAR 0 11
59632: PUSH
59633: LD_VAR 0 12
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PPUSH
59642: CALL_OW 2
59646: ST_TO_ADDR
// end ;
59647: GO 59555
59649: POP
59650: POP
59651: GO 59535
59653: POP
59654: POP
// if not list then
59655: LD_VAR 0 13
59659: NOT
59660: IFFALSE 59664
// exit ;
59662: GO 59735
// for i in list do
59664: LD_ADDR_VAR 0 6
59668: PUSH
59669: LD_VAR 0 13
59673: PUSH
59674: FOR_IN
59675: IFFALSE 59733
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59677: LD_VAR 0 1
59681: PPUSH
59682: LD_STRING M
59684: PUSH
59685: LD_VAR 0 6
59689: PUSH
59690: LD_INT 1
59692: ARRAY
59693: PUSH
59694: LD_VAR 0 6
59698: PUSH
59699: LD_INT 2
59701: ARRAY
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: PPUSH
59727: CALL_OW 447
59731: GO 59674
59733: POP
59734: POP
// end ;
59735: LD_VAR 0 5
59739: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59740: LD_INT 0
59742: PPUSH
59743: PPUSH
59744: PPUSH
59745: PPUSH
59746: PPUSH
59747: PPUSH
59748: PPUSH
59749: PPUSH
59750: PPUSH
59751: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
59752: LD_VAR 0 1
59756: PPUSH
59757: CALL_OW 302
59761: NOT
59762: PUSH
59763: LD_VAR 0 2
59767: PPUSH
59768: LD_VAR 0 3
59772: PPUSH
59773: CALL_OW 488
59777: NOT
59778: OR
59779: PUSH
59780: LD_VAR 0 4
59784: NOT
59785: OR
59786: IFFALSE 59790
// exit ;
59788: GO 60303
// list := [ ] ;
59790: LD_ADDR_VAR 0 13
59794: PUSH
59795: EMPTY
59796: ST_TO_ADDR
// if x - r < 0 then
59797: LD_VAR 0 2
59801: PUSH
59802: LD_VAR 0 4
59806: MINUS
59807: PUSH
59808: LD_INT 0
59810: LESS
59811: IFFALSE 59823
// min_x := 0 else
59813: LD_ADDR_VAR 0 7
59817: PUSH
59818: LD_INT 0
59820: ST_TO_ADDR
59821: GO 59839
// min_x := x - r ;
59823: LD_ADDR_VAR 0 7
59827: PUSH
59828: LD_VAR 0 2
59832: PUSH
59833: LD_VAR 0 4
59837: MINUS
59838: ST_TO_ADDR
// if y - r < 0 then
59839: LD_VAR 0 3
59843: PUSH
59844: LD_VAR 0 4
59848: MINUS
59849: PUSH
59850: LD_INT 0
59852: LESS
59853: IFFALSE 59865
// min_y := 0 else
59855: LD_ADDR_VAR 0 8
59859: PUSH
59860: LD_INT 0
59862: ST_TO_ADDR
59863: GO 59881
// min_y := y - r ;
59865: LD_ADDR_VAR 0 8
59869: PUSH
59870: LD_VAR 0 3
59874: PUSH
59875: LD_VAR 0 4
59879: MINUS
59880: ST_TO_ADDR
// max_x := x + r ;
59881: LD_ADDR_VAR 0 9
59885: PUSH
59886: LD_VAR 0 2
59890: PUSH
59891: LD_VAR 0 4
59895: PLUS
59896: ST_TO_ADDR
// max_y := y + r ;
59897: LD_ADDR_VAR 0 10
59901: PUSH
59902: LD_VAR 0 3
59906: PUSH
59907: LD_VAR 0 4
59911: PLUS
59912: ST_TO_ADDR
// for _x = min_x to max_x do
59913: LD_ADDR_VAR 0 11
59917: PUSH
59918: DOUBLE
59919: LD_VAR 0 7
59923: DEC
59924: ST_TO_ADDR
59925: LD_VAR 0 9
59929: PUSH
59930: FOR_TO
59931: IFFALSE 60048
// for _y = min_y to max_y do
59933: LD_ADDR_VAR 0 12
59937: PUSH
59938: DOUBLE
59939: LD_VAR 0 8
59943: DEC
59944: ST_TO_ADDR
59945: LD_VAR 0 10
59949: PUSH
59950: FOR_TO
59951: IFFALSE 60044
// begin if not ValidHex ( _x , _y ) then
59953: LD_VAR 0 11
59957: PPUSH
59958: LD_VAR 0 12
59962: PPUSH
59963: CALL_OW 488
59967: NOT
59968: IFFALSE 59972
// continue ;
59970: GO 59950
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59972: LD_VAR 0 11
59976: PPUSH
59977: LD_VAR 0 12
59981: PPUSH
59982: CALL_OW 351
59986: PUSH
59987: LD_VAR 0 11
59991: PPUSH
59992: LD_VAR 0 12
59996: PPUSH
59997: CALL_OW 554
60001: AND
60002: IFFALSE 60042
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60004: LD_ADDR_VAR 0 13
60008: PUSH
60009: LD_VAR 0 13
60013: PPUSH
60014: LD_VAR 0 13
60018: PUSH
60019: LD_INT 1
60021: PLUS
60022: PPUSH
60023: LD_VAR 0 11
60027: PUSH
60028: LD_VAR 0 12
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PPUSH
60037: CALL_OW 2
60041: ST_TO_ADDR
// end ;
60042: GO 59950
60044: POP
60045: POP
60046: GO 59930
60048: POP
60049: POP
// if not list then
60050: LD_VAR 0 13
60054: NOT
60055: IFFALSE 60059
// exit ;
60057: GO 60303
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60059: LD_ADDR_VAR 0 13
60063: PUSH
60064: LD_VAR 0 1
60068: PPUSH
60069: LD_VAR 0 13
60073: PPUSH
60074: LD_INT 1
60076: PPUSH
60077: LD_INT 1
60079: PPUSH
60080: CALL 20916 0 4
60084: ST_TO_ADDR
// ComStop ( flame ) ;
60085: LD_VAR 0 1
60089: PPUSH
60090: CALL_OW 141
// for i in list do
60094: LD_ADDR_VAR 0 6
60098: PUSH
60099: LD_VAR 0 13
60103: PUSH
60104: FOR_IN
60105: IFFALSE 60136
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60107: LD_VAR 0 1
60111: PPUSH
60112: LD_VAR 0 6
60116: PUSH
60117: LD_INT 1
60119: ARRAY
60120: PPUSH
60121: LD_VAR 0 6
60125: PUSH
60126: LD_INT 2
60128: ARRAY
60129: PPUSH
60130: CALL_OW 176
60134: GO 60104
60136: POP
60137: POP
// repeat wait ( 0 0$1 ) ;
60138: LD_INT 35
60140: PPUSH
60141: CALL_OW 67
// task := GetTaskList ( flame ) ;
60145: LD_ADDR_VAR 0 14
60149: PUSH
60150: LD_VAR 0 1
60154: PPUSH
60155: CALL_OW 437
60159: ST_TO_ADDR
// if not task then
60160: LD_VAR 0 14
60164: NOT
60165: IFFALSE 60169
// exit ;
60167: GO 60303
// if task [ 1 ] [ 1 ] <> | then
60169: LD_VAR 0 14
60173: PUSH
60174: LD_INT 1
60176: ARRAY
60177: PUSH
60178: LD_INT 1
60180: ARRAY
60181: PUSH
60182: LD_STRING |
60184: NONEQUAL
60185: IFFALSE 60189
// exit ;
60187: GO 60303
// _x := task [ 1 ] [ 2 ] ;
60189: LD_ADDR_VAR 0 11
60193: PUSH
60194: LD_VAR 0 14
60198: PUSH
60199: LD_INT 1
60201: ARRAY
60202: PUSH
60203: LD_INT 2
60205: ARRAY
60206: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60207: LD_ADDR_VAR 0 12
60211: PUSH
60212: LD_VAR 0 14
60216: PUSH
60217: LD_INT 1
60219: ARRAY
60220: PUSH
60221: LD_INT 3
60223: ARRAY
60224: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60225: LD_VAR 0 11
60229: PPUSH
60230: LD_VAR 0 12
60234: PPUSH
60235: CALL_OW 351
60239: NOT
60240: PUSH
60241: LD_VAR 0 11
60245: PPUSH
60246: LD_VAR 0 12
60250: PPUSH
60251: CALL_OW 554
60255: NOT
60256: OR
60257: IFFALSE 60291
// begin task := Delete ( task , 1 ) ;
60259: LD_ADDR_VAR 0 14
60263: PUSH
60264: LD_VAR 0 14
60268: PPUSH
60269: LD_INT 1
60271: PPUSH
60272: CALL_OW 3
60276: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60277: LD_VAR 0 1
60281: PPUSH
60282: LD_VAR 0 14
60286: PPUSH
60287: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60291: LD_VAR 0 1
60295: PPUSH
60296: CALL_OW 314
60300: NOT
60301: IFFALSE 60138
// end ;
60303: LD_VAR 0 5
60307: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60308: LD_EXP 45
60312: NOT
60313: IFFALSE 60363
60315: GO 60317
60317: DISABLE
// begin initHack := true ;
60318: LD_ADDR_EXP 45
60322: PUSH
60323: LD_INT 1
60325: ST_TO_ADDR
// hackTanks := [ ] ;
60326: LD_ADDR_EXP 46
60330: PUSH
60331: EMPTY
60332: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60333: LD_ADDR_EXP 47
60337: PUSH
60338: EMPTY
60339: ST_TO_ADDR
// hackLimit := 3 ;
60340: LD_ADDR_EXP 48
60344: PUSH
60345: LD_INT 3
60347: ST_TO_ADDR
// hackDist := 12 ;
60348: LD_ADDR_EXP 49
60352: PUSH
60353: LD_INT 12
60355: ST_TO_ADDR
// hackCounter := [ ] ;
60356: LD_ADDR_EXP 50
60360: PUSH
60361: EMPTY
60362: ST_TO_ADDR
// end ;
60363: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60364: LD_EXP 45
60368: PUSH
60369: LD_INT 34
60371: PUSH
60372: LD_INT 99
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PPUSH
60379: CALL_OW 69
60383: AND
60384: IFFALSE 60637
60386: GO 60388
60388: DISABLE
60389: LD_INT 0
60391: PPUSH
60392: PPUSH
// begin enable ;
60393: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60394: LD_ADDR_VAR 0 1
60398: PUSH
60399: LD_INT 34
60401: PUSH
60402: LD_INT 99
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PPUSH
60409: CALL_OW 69
60413: PUSH
60414: FOR_IN
60415: IFFALSE 60635
// begin if not i in hackTanks then
60417: LD_VAR 0 1
60421: PUSH
60422: LD_EXP 46
60426: IN
60427: NOT
60428: IFFALSE 60511
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60430: LD_ADDR_EXP 46
60434: PUSH
60435: LD_EXP 46
60439: PPUSH
60440: LD_EXP 46
60444: PUSH
60445: LD_INT 1
60447: PLUS
60448: PPUSH
60449: LD_VAR 0 1
60453: PPUSH
60454: CALL_OW 1
60458: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60459: LD_ADDR_EXP 47
60463: PUSH
60464: LD_EXP 47
60468: PPUSH
60469: LD_EXP 47
60473: PUSH
60474: LD_INT 1
60476: PLUS
60477: PPUSH
60478: EMPTY
60479: PPUSH
60480: CALL_OW 1
60484: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60485: LD_ADDR_EXP 50
60489: PUSH
60490: LD_EXP 50
60494: PPUSH
60495: LD_EXP 50
60499: PUSH
60500: LD_INT 1
60502: PLUS
60503: PPUSH
60504: EMPTY
60505: PPUSH
60506: CALL_OW 1
60510: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60511: LD_VAR 0 1
60515: PPUSH
60516: CALL_OW 302
60520: NOT
60521: IFFALSE 60534
// begin HackUnlinkAll ( i ) ;
60523: LD_VAR 0 1
60527: PPUSH
60528: CALL 60640 0 1
// continue ;
60532: GO 60414
// end ; HackCheckCapturedStatus ( i ) ;
60534: LD_VAR 0 1
60538: PPUSH
60539: CALL 61083 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60543: LD_ADDR_VAR 0 2
60547: PUSH
60548: LD_INT 81
60550: PUSH
60551: LD_VAR 0 1
60555: PPUSH
60556: CALL_OW 255
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 33
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 91
60577: PUSH
60578: LD_VAR 0 1
60582: PUSH
60583: LD_EXP 49
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 50
60595: PUSH
60596: EMPTY
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: PPUSH
60605: CALL_OW 69
60609: ST_TO_ADDR
// if not tmp then
60610: LD_VAR 0 2
60614: NOT
60615: IFFALSE 60619
// continue ;
60617: GO 60414
// HackLink ( i , tmp ) ;
60619: LD_VAR 0 1
60623: PPUSH
60624: LD_VAR 0 2
60628: PPUSH
60629: CALL 60776 0 2
// end ;
60633: GO 60414
60635: POP
60636: POP
// end ;
60637: PPOPN 2
60639: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60640: LD_INT 0
60642: PPUSH
60643: PPUSH
60644: PPUSH
// if not hack in hackTanks then
60645: LD_VAR 0 1
60649: PUSH
60650: LD_EXP 46
60654: IN
60655: NOT
60656: IFFALSE 60660
// exit ;
60658: GO 60771
// index := GetElementIndex ( hackTanks , hack ) ;
60660: LD_ADDR_VAR 0 4
60664: PUSH
60665: LD_EXP 46
60669: PPUSH
60670: LD_VAR 0 1
60674: PPUSH
60675: CALL 20213 0 2
60679: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60680: LD_EXP 47
60684: PUSH
60685: LD_VAR 0 4
60689: ARRAY
60690: IFFALSE 60771
// begin for i in hackTanksCaptured [ index ] do
60692: LD_ADDR_VAR 0 3
60696: PUSH
60697: LD_EXP 47
60701: PUSH
60702: LD_VAR 0 4
60706: ARRAY
60707: PUSH
60708: FOR_IN
60709: IFFALSE 60735
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60711: LD_VAR 0 3
60715: PUSH
60716: LD_INT 1
60718: ARRAY
60719: PPUSH
60720: LD_VAR 0 3
60724: PUSH
60725: LD_INT 2
60727: ARRAY
60728: PPUSH
60729: CALL_OW 235
60733: GO 60708
60735: POP
60736: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60737: LD_ADDR_EXP 47
60741: PUSH
60742: LD_EXP 47
60746: PPUSH
60747: LD_VAR 0 4
60751: PPUSH
60752: EMPTY
60753: PPUSH
60754: CALL_OW 1
60758: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60759: LD_VAR 0 1
60763: PPUSH
60764: LD_INT 0
60766: PPUSH
60767: CALL_OW 505
// end ; end ;
60771: LD_VAR 0 2
60775: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60776: LD_INT 0
60778: PPUSH
60779: PPUSH
60780: PPUSH
// if not hack in hackTanks or not vehicles then
60781: LD_VAR 0 1
60785: PUSH
60786: LD_EXP 46
60790: IN
60791: NOT
60792: PUSH
60793: LD_VAR 0 2
60797: NOT
60798: OR
60799: IFFALSE 60803
// exit ;
60801: GO 61078
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60803: LD_ADDR_VAR 0 2
60807: PUSH
60808: LD_VAR 0 1
60812: PPUSH
60813: LD_VAR 0 2
60817: PPUSH
60818: LD_INT 1
60820: PPUSH
60821: LD_INT 1
60823: PPUSH
60824: CALL 20863 0 4
60828: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60829: LD_ADDR_VAR 0 5
60833: PUSH
60834: LD_EXP 46
60838: PPUSH
60839: LD_VAR 0 1
60843: PPUSH
60844: CALL 20213 0 2
60848: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60849: LD_EXP 47
60853: PUSH
60854: LD_VAR 0 5
60858: ARRAY
60859: PUSH
60860: LD_EXP 48
60864: LESS
60865: IFFALSE 61054
// begin for i := 1 to vehicles do
60867: LD_ADDR_VAR 0 4
60871: PUSH
60872: DOUBLE
60873: LD_INT 1
60875: DEC
60876: ST_TO_ADDR
60877: LD_VAR 0 2
60881: PUSH
60882: FOR_TO
60883: IFFALSE 61052
// begin if hackTanksCaptured [ index ] = hackLimit then
60885: LD_EXP 47
60889: PUSH
60890: LD_VAR 0 5
60894: ARRAY
60895: PUSH
60896: LD_EXP 48
60900: EQUAL
60901: IFFALSE 60905
// break ;
60903: GO 61052
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60905: LD_ADDR_EXP 50
60909: PUSH
60910: LD_EXP 50
60914: PPUSH
60915: LD_VAR 0 5
60919: PPUSH
60920: LD_EXP 50
60924: PUSH
60925: LD_VAR 0 5
60929: ARRAY
60930: PUSH
60931: LD_INT 1
60933: PLUS
60934: PPUSH
60935: CALL_OW 1
60939: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60940: LD_ADDR_EXP 47
60944: PUSH
60945: LD_EXP 47
60949: PPUSH
60950: LD_VAR 0 5
60954: PUSH
60955: LD_EXP 47
60959: PUSH
60960: LD_VAR 0 5
60964: ARRAY
60965: PUSH
60966: LD_INT 1
60968: PLUS
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PPUSH
60974: LD_VAR 0 2
60978: PUSH
60979: LD_VAR 0 4
60983: ARRAY
60984: PUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_VAR 0 4
60994: ARRAY
60995: PPUSH
60996: CALL_OW 255
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PPUSH
61005: CALL 20428 0 3
61009: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61010: LD_VAR 0 2
61014: PUSH
61015: LD_VAR 0 4
61019: ARRAY
61020: PPUSH
61021: LD_VAR 0 1
61025: PPUSH
61026: CALL_OW 255
61030: PPUSH
61031: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61035: LD_VAR 0 2
61039: PUSH
61040: LD_VAR 0 4
61044: ARRAY
61045: PPUSH
61046: CALL_OW 141
// end ;
61050: GO 60882
61052: POP
61053: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61054: LD_VAR 0 1
61058: PPUSH
61059: LD_EXP 47
61063: PUSH
61064: LD_VAR 0 5
61068: ARRAY
61069: PUSH
61070: LD_INT 0
61072: PLUS
61073: PPUSH
61074: CALL_OW 505
// end ;
61078: LD_VAR 0 3
61082: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61083: LD_INT 0
61085: PPUSH
61086: PPUSH
61087: PPUSH
61088: PPUSH
// if not hack in hackTanks then
61089: LD_VAR 0 1
61093: PUSH
61094: LD_EXP 46
61098: IN
61099: NOT
61100: IFFALSE 61104
// exit ;
61102: GO 61344
// index := GetElementIndex ( hackTanks , hack ) ;
61104: LD_ADDR_VAR 0 4
61108: PUSH
61109: LD_EXP 46
61113: PPUSH
61114: LD_VAR 0 1
61118: PPUSH
61119: CALL 20213 0 2
61123: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61124: LD_ADDR_VAR 0 3
61128: PUSH
61129: DOUBLE
61130: LD_EXP 47
61134: PUSH
61135: LD_VAR 0 4
61139: ARRAY
61140: INC
61141: ST_TO_ADDR
61142: LD_INT 1
61144: PUSH
61145: FOR_DOWNTO
61146: IFFALSE 61318
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61148: LD_ADDR_VAR 0 5
61152: PUSH
61153: LD_EXP 47
61157: PUSH
61158: LD_VAR 0 4
61162: ARRAY
61163: PUSH
61164: LD_VAR 0 3
61168: ARRAY
61169: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61170: LD_VAR 0 5
61174: PUSH
61175: LD_INT 1
61177: ARRAY
61178: PPUSH
61179: CALL_OW 302
61183: NOT
61184: PUSH
61185: LD_VAR 0 5
61189: PUSH
61190: LD_INT 1
61192: ARRAY
61193: PPUSH
61194: CALL_OW 255
61198: PUSH
61199: LD_VAR 0 1
61203: PPUSH
61204: CALL_OW 255
61208: NONEQUAL
61209: OR
61210: IFFALSE 61316
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61212: LD_VAR 0 5
61216: PUSH
61217: LD_INT 1
61219: ARRAY
61220: PPUSH
61221: CALL_OW 305
61225: PUSH
61226: LD_VAR 0 5
61230: PUSH
61231: LD_INT 1
61233: ARRAY
61234: PPUSH
61235: CALL_OW 255
61239: PUSH
61240: LD_VAR 0 1
61244: PPUSH
61245: CALL_OW 255
61249: EQUAL
61250: AND
61251: IFFALSE 61275
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61253: LD_VAR 0 5
61257: PUSH
61258: LD_INT 1
61260: ARRAY
61261: PPUSH
61262: LD_VAR 0 5
61266: PUSH
61267: LD_INT 2
61269: ARRAY
61270: PPUSH
61271: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61275: LD_ADDR_EXP 47
61279: PUSH
61280: LD_EXP 47
61284: PPUSH
61285: LD_VAR 0 4
61289: PPUSH
61290: LD_EXP 47
61294: PUSH
61295: LD_VAR 0 4
61299: ARRAY
61300: PPUSH
61301: LD_VAR 0 3
61305: PPUSH
61306: CALL_OW 3
61310: PPUSH
61311: CALL_OW 1
61315: ST_TO_ADDR
// end ; end ;
61316: GO 61145
61318: POP
61319: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61320: LD_VAR 0 1
61324: PPUSH
61325: LD_EXP 47
61329: PUSH
61330: LD_VAR 0 4
61334: ARRAY
61335: PUSH
61336: LD_INT 0
61338: PLUS
61339: PPUSH
61340: CALL_OW 505
// end ;
61344: LD_VAR 0 2
61348: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61349: LD_INT 0
61351: PPUSH
61352: PPUSH
61353: PPUSH
61354: PPUSH
// if not hack in hackTanks then
61355: LD_VAR 0 1
61359: PUSH
61360: LD_EXP 46
61364: IN
61365: NOT
61366: IFFALSE 61370
// exit ;
61368: GO 61455
// index := GetElementIndex ( hackTanks , hack ) ;
61370: LD_ADDR_VAR 0 5
61374: PUSH
61375: LD_EXP 46
61379: PPUSH
61380: LD_VAR 0 1
61384: PPUSH
61385: CALL 20213 0 2
61389: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61390: LD_ADDR_VAR 0 4
61394: PUSH
61395: DOUBLE
61396: LD_INT 1
61398: DEC
61399: ST_TO_ADDR
61400: LD_EXP 47
61404: PUSH
61405: LD_VAR 0 5
61409: ARRAY
61410: PUSH
61411: FOR_TO
61412: IFFALSE 61453
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61414: LD_EXP 47
61418: PUSH
61419: LD_VAR 0 5
61423: ARRAY
61424: PUSH
61425: LD_VAR 0 4
61429: ARRAY
61430: PUSH
61431: LD_INT 1
61433: ARRAY
61434: PUSH
61435: LD_VAR 0 2
61439: EQUAL
61440: IFFALSE 61451
// KillUnit ( vehicle ) ;
61442: LD_VAR 0 2
61446: PPUSH
61447: CALL_OW 66
61451: GO 61411
61453: POP
61454: POP
// end ;
61455: LD_VAR 0 3
61459: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61460: LD_EXP 51
61464: NOT
61465: IFFALSE 61500
61467: GO 61469
61469: DISABLE
// begin initMiner := true ;
61470: LD_ADDR_EXP 51
61474: PUSH
61475: LD_INT 1
61477: ST_TO_ADDR
// minersList := [ ] ;
61478: LD_ADDR_EXP 52
61482: PUSH
61483: EMPTY
61484: ST_TO_ADDR
// minerMinesList := [ ] ;
61485: LD_ADDR_EXP 53
61489: PUSH
61490: EMPTY
61491: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61492: LD_ADDR_EXP 54
61496: PUSH
61497: LD_INT 5
61499: ST_TO_ADDR
// end ;
61500: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61501: LD_EXP 51
61505: PUSH
61506: LD_INT 34
61508: PUSH
61509: LD_INT 81
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PPUSH
61516: CALL_OW 69
61520: AND
61521: IFFALSE 61982
61523: GO 61525
61525: DISABLE
61526: LD_INT 0
61528: PPUSH
61529: PPUSH
61530: PPUSH
61531: PPUSH
// begin enable ;
61532: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61533: LD_ADDR_VAR 0 1
61537: PUSH
61538: LD_INT 34
61540: PUSH
61541: LD_INT 81
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PPUSH
61548: CALL_OW 69
61552: PUSH
61553: FOR_IN
61554: IFFALSE 61626
// begin if not i in minersList then
61556: LD_VAR 0 1
61560: PUSH
61561: LD_EXP 52
61565: IN
61566: NOT
61567: IFFALSE 61624
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61569: LD_ADDR_EXP 52
61573: PUSH
61574: LD_EXP 52
61578: PPUSH
61579: LD_EXP 52
61583: PUSH
61584: LD_INT 1
61586: PLUS
61587: PPUSH
61588: LD_VAR 0 1
61592: PPUSH
61593: CALL_OW 1
61597: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61598: LD_ADDR_EXP 53
61602: PUSH
61603: LD_EXP 53
61607: PPUSH
61608: LD_EXP 53
61612: PUSH
61613: LD_INT 1
61615: PLUS
61616: PPUSH
61617: EMPTY
61618: PPUSH
61619: CALL_OW 1
61623: ST_TO_ADDR
// end end ;
61624: GO 61553
61626: POP
61627: POP
// for i := minerMinesList downto 1 do
61628: LD_ADDR_VAR 0 1
61632: PUSH
61633: DOUBLE
61634: LD_EXP 53
61638: INC
61639: ST_TO_ADDR
61640: LD_INT 1
61642: PUSH
61643: FOR_DOWNTO
61644: IFFALSE 61980
// begin if IsLive ( minersList [ i ] ) then
61646: LD_EXP 52
61650: PUSH
61651: LD_VAR 0 1
61655: ARRAY
61656: PPUSH
61657: CALL_OW 300
61661: IFFALSE 61689
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61663: LD_EXP 52
61667: PUSH
61668: LD_VAR 0 1
61672: ARRAY
61673: PPUSH
61674: LD_EXP 53
61678: PUSH
61679: LD_VAR 0 1
61683: ARRAY
61684: PPUSH
61685: CALL_OW 505
// if not minerMinesList [ i ] then
61689: LD_EXP 53
61693: PUSH
61694: LD_VAR 0 1
61698: ARRAY
61699: NOT
61700: IFFALSE 61704
// continue ;
61702: GO 61643
// for j := minerMinesList [ i ] downto 1 do
61704: LD_ADDR_VAR 0 2
61708: PUSH
61709: DOUBLE
61710: LD_EXP 53
61714: PUSH
61715: LD_VAR 0 1
61719: ARRAY
61720: INC
61721: ST_TO_ADDR
61722: LD_INT 1
61724: PUSH
61725: FOR_DOWNTO
61726: IFFALSE 61976
// begin side := GetSide ( minersList [ i ] ) ;
61728: LD_ADDR_VAR 0 3
61732: PUSH
61733: LD_EXP 52
61737: PUSH
61738: LD_VAR 0 1
61742: ARRAY
61743: PPUSH
61744: CALL_OW 255
61748: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61749: LD_ADDR_VAR 0 4
61753: PUSH
61754: LD_EXP 53
61758: PUSH
61759: LD_VAR 0 1
61763: ARRAY
61764: PUSH
61765: LD_VAR 0 2
61769: ARRAY
61770: PUSH
61771: LD_INT 1
61773: ARRAY
61774: PPUSH
61775: LD_EXP 53
61779: PUSH
61780: LD_VAR 0 1
61784: ARRAY
61785: PUSH
61786: LD_VAR 0 2
61790: ARRAY
61791: PUSH
61792: LD_INT 2
61794: ARRAY
61795: PPUSH
61796: CALL_OW 428
61800: ST_TO_ADDR
// if not tmp then
61801: LD_VAR 0 4
61805: NOT
61806: IFFALSE 61810
// continue ;
61808: GO 61725
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61810: LD_VAR 0 4
61814: PUSH
61815: LD_INT 81
61817: PUSH
61818: LD_VAR 0 3
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PPUSH
61827: CALL_OW 69
61831: IN
61832: PUSH
61833: LD_EXP 53
61837: PUSH
61838: LD_VAR 0 1
61842: ARRAY
61843: PUSH
61844: LD_VAR 0 2
61848: ARRAY
61849: PUSH
61850: LD_INT 1
61852: ARRAY
61853: PPUSH
61854: LD_EXP 53
61858: PUSH
61859: LD_VAR 0 1
61863: ARRAY
61864: PUSH
61865: LD_VAR 0 2
61869: ARRAY
61870: PUSH
61871: LD_INT 2
61873: ARRAY
61874: PPUSH
61875: CALL_OW 458
61879: AND
61880: IFFALSE 61974
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61882: LD_EXP 53
61886: PUSH
61887: LD_VAR 0 1
61891: ARRAY
61892: PUSH
61893: LD_VAR 0 2
61897: ARRAY
61898: PUSH
61899: LD_INT 1
61901: ARRAY
61902: PPUSH
61903: LD_EXP 53
61907: PUSH
61908: LD_VAR 0 1
61912: ARRAY
61913: PUSH
61914: LD_VAR 0 2
61918: ARRAY
61919: PUSH
61920: LD_INT 2
61922: ARRAY
61923: PPUSH
61924: LD_VAR 0 3
61928: PPUSH
61929: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61933: LD_ADDR_EXP 53
61937: PUSH
61938: LD_EXP 53
61942: PPUSH
61943: LD_VAR 0 1
61947: PPUSH
61948: LD_EXP 53
61952: PUSH
61953: LD_VAR 0 1
61957: ARRAY
61958: PPUSH
61959: LD_VAR 0 2
61963: PPUSH
61964: CALL_OW 3
61968: PPUSH
61969: CALL_OW 1
61973: ST_TO_ADDR
// end ; end ;
61974: GO 61725
61976: POP
61977: POP
// end ;
61978: GO 61643
61980: POP
61981: POP
// end ;
61982: PPOPN 4
61984: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61985: LD_INT 0
61987: PPUSH
61988: PPUSH
// result := false ;
61989: LD_ADDR_VAR 0 4
61993: PUSH
61994: LD_INT 0
61996: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61997: LD_VAR 0 1
62001: PPUSH
62002: CALL_OW 264
62006: PUSH
62007: LD_INT 81
62009: EQUAL
62010: NOT
62011: IFFALSE 62015
// exit ;
62013: GO 62255
// index := GetElementIndex ( minersList , unit ) ;
62015: LD_ADDR_VAR 0 5
62019: PUSH
62020: LD_EXP 52
62024: PPUSH
62025: LD_VAR 0 1
62029: PPUSH
62030: CALL 20213 0 2
62034: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62035: LD_EXP 53
62039: PUSH
62040: LD_VAR 0 5
62044: ARRAY
62045: PUSH
62046: LD_EXP 54
62050: GREATEREQUAL
62051: IFFALSE 62055
// exit ;
62053: GO 62255
// ComMoveXY ( unit , x , y ) ;
62055: LD_VAR 0 1
62059: PPUSH
62060: LD_VAR 0 2
62064: PPUSH
62065: LD_VAR 0 3
62069: PPUSH
62070: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62074: LD_INT 35
62076: PPUSH
62077: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62081: LD_VAR 0 1
62085: PPUSH
62086: LD_VAR 0 2
62090: PPUSH
62091: LD_VAR 0 3
62095: PPUSH
62096: CALL 51974 0 3
62100: NOT
62101: PUSH
62102: LD_VAR 0 1
62106: PPUSH
62107: CALL_OW 314
62111: AND
62112: IFFALSE 62116
// exit ;
62114: GO 62255
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62116: LD_VAR 0 2
62120: PPUSH
62121: LD_VAR 0 3
62125: PPUSH
62126: CALL_OW 428
62130: PUSH
62131: LD_VAR 0 1
62135: EQUAL
62136: PUSH
62137: LD_VAR 0 1
62141: PPUSH
62142: CALL_OW 314
62146: NOT
62147: AND
62148: IFFALSE 62074
// PlaySoundXY ( x , y , PlantMine ) ;
62150: LD_VAR 0 2
62154: PPUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: LD_STRING PlantMine
62162: PPUSH
62163: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62167: LD_VAR 0 2
62171: PPUSH
62172: LD_VAR 0 3
62176: PPUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 255
62186: PPUSH
62187: LD_INT 0
62189: PPUSH
62190: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62194: LD_ADDR_EXP 53
62198: PUSH
62199: LD_EXP 53
62203: PPUSH
62204: LD_VAR 0 5
62208: PUSH
62209: LD_EXP 53
62213: PUSH
62214: LD_VAR 0 5
62218: ARRAY
62219: PUSH
62220: LD_INT 1
62222: PLUS
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PPUSH
62228: LD_VAR 0 2
62232: PUSH
62233: LD_VAR 0 3
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PPUSH
62242: CALL 20428 0 3
62246: ST_TO_ADDR
// result := true ;
62247: LD_ADDR_VAR 0 4
62251: PUSH
62252: LD_INT 1
62254: ST_TO_ADDR
// end ;
62255: LD_VAR 0 4
62259: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62260: LD_INT 0
62262: PPUSH
62263: PPUSH
62264: PPUSH
// if not unit in minersList then
62265: LD_VAR 0 1
62269: PUSH
62270: LD_EXP 52
62274: IN
62275: NOT
62276: IFFALSE 62280
// exit ;
62278: GO 62672
// index := GetElementIndex ( minersList , unit ) ;
62280: LD_ADDR_VAR 0 6
62284: PUSH
62285: LD_EXP 52
62289: PPUSH
62290: LD_VAR 0 1
62294: PPUSH
62295: CALL 20213 0 2
62299: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62300: LD_ADDR_VAR 0 5
62304: PUSH
62305: DOUBLE
62306: LD_EXP 53
62310: PUSH
62311: LD_VAR 0 6
62315: ARRAY
62316: INC
62317: ST_TO_ADDR
62318: LD_INT 1
62320: PUSH
62321: FOR_DOWNTO
62322: IFFALSE 62483
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62324: LD_EXP 53
62328: PUSH
62329: LD_VAR 0 6
62333: ARRAY
62334: PUSH
62335: LD_VAR 0 5
62339: ARRAY
62340: PUSH
62341: LD_INT 1
62343: ARRAY
62344: PUSH
62345: LD_VAR 0 2
62349: EQUAL
62350: PUSH
62351: LD_EXP 53
62355: PUSH
62356: LD_VAR 0 6
62360: ARRAY
62361: PUSH
62362: LD_VAR 0 5
62366: ARRAY
62367: PUSH
62368: LD_INT 2
62370: ARRAY
62371: PUSH
62372: LD_VAR 0 3
62376: EQUAL
62377: AND
62378: IFFALSE 62481
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62380: LD_EXP 53
62384: PUSH
62385: LD_VAR 0 6
62389: ARRAY
62390: PUSH
62391: LD_VAR 0 5
62395: ARRAY
62396: PUSH
62397: LD_INT 1
62399: ARRAY
62400: PPUSH
62401: LD_EXP 53
62405: PUSH
62406: LD_VAR 0 6
62410: ARRAY
62411: PUSH
62412: LD_VAR 0 5
62416: ARRAY
62417: PUSH
62418: LD_INT 2
62420: ARRAY
62421: PPUSH
62422: LD_VAR 0 1
62426: PPUSH
62427: CALL_OW 255
62431: PPUSH
62432: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62436: LD_ADDR_EXP 53
62440: PUSH
62441: LD_EXP 53
62445: PPUSH
62446: LD_VAR 0 6
62450: PPUSH
62451: LD_EXP 53
62455: PUSH
62456: LD_VAR 0 6
62460: ARRAY
62461: PPUSH
62462: LD_VAR 0 5
62466: PPUSH
62467: CALL_OW 3
62471: PPUSH
62472: CALL_OW 1
62476: ST_TO_ADDR
// exit ;
62477: POP
62478: POP
62479: GO 62672
// end ; end ;
62481: GO 62321
62483: POP
62484: POP
// for i := minerMinesList [ index ] downto 1 do
62485: LD_ADDR_VAR 0 5
62489: PUSH
62490: DOUBLE
62491: LD_EXP 53
62495: PUSH
62496: LD_VAR 0 6
62500: ARRAY
62501: INC
62502: ST_TO_ADDR
62503: LD_INT 1
62505: PUSH
62506: FOR_DOWNTO
62507: IFFALSE 62670
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62509: LD_EXP 53
62513: PUSH
62514: LD_VAR 0 6
62518: ARRAY
62519: PUSH
62520: LD_VAR 0 5
62524: ARRAY
62525: PUSH
62526: LD_INT 1
62528: ARRAY
62529: PPUSH
62530: LD_EXP 53
62534: PUSH
62535: LD_VAR 0 6
62539: ARRAY
62540: PUSH
62541: LD_VAR 0 5
62545: ARRAY
62546: PUSH
62547: LD_INT 2
62549: ARRAY
62550: PPUSH
62551: LD_VAR 0 2
62555: PPUSH
62556: LD_VAR 0 3
62560: PPUSH
62561: CALL_OW 298
62565: PUSH
62566: LD_INT 6
62568: LESS
62569: IFFALSE 62668
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62571: LD_EXP 53
62575: PUSH
62576: LD_VAR 0 6
62580: ARRAY
62581: PUSH
62582: LD_VAR 0 5
62586: ARRAY
62587: PUSH
62588: LD_INT 1
62590: ARRAY
62591: PPUSH
62592: LD_EXP 53
62596: PUSH
62597: LD_VAR 0 6
62601: ARRAY
62602: PUSH
62603: LD_VAR 0 5
62607: ARRAY
62608: PUSH
62609: LD_INT 2
62611: ARRAY
62612: PPUSH
62613: LD_VAR 0 1
62617: PPUSH
62618: CALL_OW 255
62622: PPUSH
62623: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62627: LD_ADDR_EXP 53
62631: PUSH
62632: LD_EXP 53
62636: PPUSH
62637: LD_VAR 0 6
62641: PPUSH
62642: LD_EXP 53
62646: PUSH
62647: LD_VAR 0 6
62651: ARRAY
62652: PPUSH
62653: LD_VAR 0 5
62657: PPUSH
62658: CALL_OW 3
62662: PPUSH
62663: CALL_OW 1
62667: ST_TO_ADDR
// end ; end ;
62668: GO 62506
62670: POP
62671: POP
// end ;
62672: LD_VAR 0 4
62676: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62677: LD_INT 0
62679: PPUSH
62680: PPUSH
62681: PPUSH
62682: PPUSH
62683: PPUSH
62684: PPUSH
62685: PPUSH
62686: PPUSH
62687: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62688: LD_VAR 0 1
62692: PPUSH
62693: CALL_OW 264
62697: PUSH
62698: LD_INT 81
62700: EQUAL
62701: NOT
62702: PUSH
62703: LD_VAR 0 1
62707: PUSH
62708: LD_EXP 52
62712: IN
62713: NOT
62714: OR
62715: IFFALSE 62719
// exit ;
62717: GO 63041
// index := GetElementIndex ( minersList , unit ) ;
62719: LD_ADDR_VAR 0 6
62723: PUSH
62724: LD_EXP 52
62728: PPUSH
62729: LD_VAR 0 1
62733: PPUSH
62734: CALL 20213 0 2
62738: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62739: LD_ADDR_VAR 0 8
62743: PUSH
62744: LD_EXP 54
62748: PUSH
62749: LD_EXP 53
62753: PUSH
62754: LD_VAR 0 6
62758: ARRAY
62759: MINUS
62760: ST_TO_ADDR
// if not minesFreeAmount then
62761: LD_VAR 0 8
62765: NOT
62766: IFFALSE 62770
// exit ;
62768: GO 63041
// tmp := [ ] ;
62770: LD_ADDR_VAR 0 7
62774: PUSH
62775: EMPTY
62776: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62777: LD_ADDR_VAR 0 5
62781: PUSH
62782: DOUBLE
62783: LD_INT 1
62785: DEC
62786: ST_TO_ADDR
62787: LD_VAR 0 8
62791: PUSH
62792: FOR_TO
62793: IFFALSE 62988
// begin _d := rand ( 0 , 5 ) ;
62795: LD_ADDR_VAR 0 11
62799: PUSH
62800: LD_INT 0
62802: PPUSH
62803: LD_INT 5
62805: PPUSH
62806: CALL_OW 12
62810: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62811: LD_ADDR_VAR 0 12
62815: PUSH
62816: LD_INT 2
62818: PPUSH
62819: LD_INT 6
62821: PPUSH
62822: CALL_OW 12
62826: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62827: LD_ADDR_VAR 0 9
62831: PUSH
62832: LD_VAR 0 2
62836: PPUSH
62837: LD_VAR 0 11
62841: PPUSH
62842: LD_VAR 0 12
62846: PPUSH
62847: CALL_OW 272
62851: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62852: LD_ADDR_VAR 0 10
62856: PUSH
62857: LD_VAR 0 3
62861: PPUSH
62862: LD_VAR 0 11
62866: PPUSH
62867: LD_VAR 0 12
62871: PPUSH
62872: CALL_OW 273
62876: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62877: LD_VAR 0 9
62881: PPUSH
62882: LD_VAR 0 10
62886: PPUSH
62887: CALL_OW 488
62891: PUSH
62892: LD_VAR 0 9
62896: PUSH
62897: LD_VAR 0 10
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_VAR 0 7
62910: IN
62911: NOT
62912: AND
62913: PUSH
62914: LD_VAR 0 9
62918: PPUSH
62919: LD_VAR 0 10
62923: PPUSH
62924: CALL_OW 458
62928: NOT
62929: AND
62930: IFFALSE 62972
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62932: LD_ADDR_VAR 0 7
62936: PUSH
62937: LD_VAR 0 7
62941: PPUSH
62942: LD_VAR 0 7
62946: PUSH
62947: LD_INT 1
62949: PLUS
62950: PPUSH
62951: LD_VAR 0 9
62955: PUSH
62956: LD_VAR 0 10
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PPUSH
62965: CALL_OW 1
62969: ST_TO_ADDR
62970: GO 62986
// i := i - 1 ;
62972: LD_ADDR_VAR 0 5
62976: PUSH
62977: LD_VAR 0 5
62981: PUSH
62982: LD_INT 1
62984: MINUS
62985: ST_TO_ADDR
// end ;
62986: GO 62792
62988: POP
62989: POP
// for i in tmp do
62990: LD_ADDR_VAR 0 5
62994: PUSH
62995: LD_VAR 0 7
62999: PUSH
63000: FOR_IN
63001: IFFALSE 63039
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63003: LD_VAR 0 1
63007: PPUSH
63008: LD_VAR 0 5
63012: PUSH
63013: LD_INT 1
63015: ARRAY
63016: PPUSH
63017: LD_VAR 0 5
63021: PUSH
63022: LD_INT 2
63024: ARRAY
63025: PPUSH
63026: CALL 61985 0 3
63030: NOT
63031: IFFALSE 63037
// exit ;
63033: POP
63034: POP
63035: GO 63041
63037: GO 63000
63039: POP
63040: POP
// end ;
63041: LD_VAR 0 4
63045: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
63046: LD_INT 0
63048: PPUSH
63049: PPUSH
63050: PPUSH
63051: PPUSH
63052: PPUSH
63053: PPUSH
63054: PPUSH
63055: PPUSH
63056: PPUSH
// if GetClass ( unit ) <> class_sniper then
63057: LD_VAR 0 1
63061: PPUSH
63062: CALL_OW 257
63066: PUSH
63067: LD_INT 5
63069: NONEQUAL
63070: IFFALSE 63074
// exit ;
63072: GO 63540
// dist := 8 ;
63074: LD_ADDR_VAR 0 5
63078: PUSH
63079: LD_INT 8
63081: ST_TO_ADDR
// viewRange := 12 ;
63082: LD_ADDR_VAR 0 8
63086: PUSH
63087: LD_INT 12
63089: ST_TO_ADDR
// side := GetSide ( unit ) ;
63090: LD_ADDR_VAR 0 6
63094: PUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: CALL_OW 255
63104: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63105: LD_INT 61
63107: PPUSH
63108: LD_VAR 0 6
63112: PPUSH
63113: CALL_OW 321
63117: PUSH
63118: LD_INT 2
63120: EQUAL
63121: IFFALSE 63131
// viewRange := 16 ;
63123: LD_ADDR_VAR 0 8
63127: PUSH
63128: LD_INT 16
63130: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63131: LD_VAR 0 1
63135: PPUSH
63136: LD_VAR 0 2
63140: PPUSH
63141: LD_VAR 0 3
63145: PPUSH
63146: CALL_OW 297
63150: PUSH
63151: LD_VAR 0 5
63155: GREATER
63156: IFFALSE 63235
// begin ComMoveXY ( unit , x , y ) ;
63158: LD_VAR 0 1
63162: PPUSH
63163: LD_VAR 0 2
63167: PPUSH
63168: LD_VAR 0 3
63172: PPUSH
63173: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63177: LD_INT 35
63179: PPUSH
63180: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63184: LD_VAR 0 1
63188: PPUSH
63189: LD_VAR 0 2
63193: PPUSH
63194: LD_VAR 0 3
63198: PPUSH
63199: CALL 51974 0 3
63203: NOT
63204: IFFALSE 63208
// exit ;
63206: GO 63540
// until GetDistUnitXY ( unit , x , y ) < dist ;
63208: LD_VAR 0 1
63212: PPUSH
63213: LD_VAR 0 2
63217: PPUSH
63218: LD_VAR 0 3
63222: PPUSH
63223: CALL_OW 297
63227: PUSH
63228: LD_VAR 0 5
63232: LESS
63233: IFFALSE 63177
// end ; ComTurnXY ( unit , x , y ) ;
63235: LD_VAR 0 1
63239: PPUSH
63240: LD_VAR 0 2
63244: PPUSH
63245: LD_VAR 0 3
63249: PPUSH
63250: CALL_OW 118
// repeat if Multiplayer then
63254: LD_OWVAR 4
63258: IFFALSE 63269
// wait ( 35 ) else
63260: LD_INT 35
63262: PPUSH
63263: CALL_OW 67
63267: GO 63276
// wait ( 5 ) ;
63269: LD_INT 5
63271: PPUSH
63272: CALL_OW 67
// _d := GetDir ( unit ) ;
63276: LD_ADDR_VAR 0 11
63280: PUSH
63281: LD_VAR 0 1
63285: PPUSH
63286: CALL_OW 254
63290: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
63291: LD_ADDR_VAR 0 7
63295: PUSH
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL_OW 250
63305: PPUSH
63306: LD_VAR 0 1
63310: PPUSH
63311: CALL_OW 251
63315: PPUSH
63316: LD_VAR 0 2
63320: PPUSH
63321: LD_VAR 0 3
63325: PPUSH
63326: CALL 54582 0 4
63330: ST_TO_ADDR
// until dir = _d ;
63331: LD_VAR 0 7
63335: PUSH
63336: LD_VAR 0 11
63340: EQUAL
63341: IFFALSE 63254
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
63343: LD_ADDR_VAR 0 9
63347: PUSH
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL_OW 250
63357: PPUSH
63358: LD_VAR 0 7
63362: PPUSH
63363: LD_VAR 0 5
63367: PPUSH
63368: CALL_OW 272
63372: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63373: LD_ADDR_VAR 0 10
63377: PUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: CALL_OW 251
63387: PPUSH
63388: LD_VAR 0 7
63392: PPUSH
63393: LD_VAR 0 5
63397: PPUSH
63398: CALL_OW 273
63402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63403: LD_VAR 0 9
63407: PPUSH
63408: LD_VAR 0 10
63412: PPUSH
63413: CALL_OW 488
63417: NOT
63418: IFFALSE 63422
// exit ;
63420: GO 63540
// ComAnimCustom ( unit , 1 ) ;
63422: LD_VAR 0 1
63426: PPUSH
63427: LD_INT 1
63429: PPUSH
63430: CALL_OW 592
// p := 0 ;
63434: LD_ADDR_VAR 0 12
63438: PUSH
63439: LD_INT 0
63441: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63442: LD_VAR 0 9
63446: PPUSH
63447: LD_VAR 0 10
63451: PPUSH
63452: LD_VAR 0 6
63456: PPUSH
63457: LD_VAR 0 8
63461: PPUSH
63462: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63466: LD_INT 35
63468: PPUSH
63469: CALL_OW 67
// p := Inc ( p ) ;
63473: LD_ADDR_VAR 0 12
63477: PUSH
63478: LD_VAR 0 12
63482: PPUSH
63483: CALL 54538 0 1
63487: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63488: LD_VAR 0 12
63492: PUSH
63493: LD_INT 3
63495: EQUAL
63496: PUSH
63497: LD_VAR 0 1
63501: PPUSH
63502: CALL_OW 302
63506: NOT
63507: OR
63508: PUSH
63509: LD_VAR 0 1
63513: PPUSH
63514: CALL_OW 301
63518: OR
63519: IFFALSE 63466
// RemoveSeeing ( _x , _y , side ) ;
63521: LD_VAR 0 9
63525: PPUSH
63526: LD_VAR 0 10
63530: PPUSH
63531: LD_VAR 0 6
63535: PPUSH
63536: CALL_OW 331
// end ; end_of_file end_of_file
63540: LD_VAR 0 4
63544: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63545: PPOPN 6
63547: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63548: CALL 63577 0 0
// end ; end_of_file
63552: PPOPN 1
63554: END
// every 0 0$1 do
63555: GO 63557
63557: DISABLE
// begin enable ;
63558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63559: LD_STRING updateTimer(
63561: PUSH
63562: LD_OWVAR 1
63566: STR
63567: PUSH
63568: LD_STRING );
63570: STR
63571: PPUSH
63572: CALL_OW 559
// end ;
63576: END
// export function SOS_MapStart ( ) ; begin
63577: LD_INT 0
63579: PPUSH
// UpdateFactoryWaypoints ( ) ;
63580: CALL 63949 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63584: CALL 64201 0 0
// end ;
63588: LD_VAR 0 1
63592: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63593: LD_INT 0
63595: PPUSH
// end ;
63596: LD_VAR 0 12
63600: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63601: LD_INT 0
63603: PPUSH
63604: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63605: LD_VAR 0 1
63609: NOT
63610: PUSH
63611: LD_VAR 0 2
63615: PPUSH
63616: LD_VAR 0 3
63620: PPUSH
63621: CALL_OW 488
63625: NOT
63626: OR
63627: PUSH
63628: LD_VAR 0 1
63632: PPUSH
63633: CALL_OW 266
63637: PUSH
63638: LD_INT 3
63640: NONEQUAL
63641: PUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 247
63651: PUSH
63652: LD_INT 1
63654: EQUAL
63655: NOT
63656: AND
63657: OR
63658: IFFALSE 63662
// exit ;
63660: GO 63944
// if GetType ( factory ) = unit_human then
63662: LD_VAR 0 1
63666: PPUSH
63667: CALL_OW 247
63671: PUSH
63672: LD_INT 1
63674: EQUAL
63675: IFFALSE 63692
// factory := IsInUnit ( factory ) ;
63677: LD_ADDR_VAR 0 1
63681: PUSH
63682: LD_VAR 0 1
63686: PPUSH
63687: CALL_OW 310
63691: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63692: LD_VAR 0 1
63696: PPUSH
63697: CALL_OW 266
63701: PUSH
63702: LD_INT 3
63704: NONEQUAL
63705: IFFALSE 63709
// exit ;
63707: GO 63944
// for i := 1 to Count ( factoryWaypoints ) do
63709: LD_ADDR_VAR 0 5
63713: PUSH
63714: DOUBLE
63715: LD_INT 1
63717: DEC
63718: ST_TO_ADDR
63719: LD_EXP 55
63723: PPUSH
63724: CALL 17568 0 1
63728: PUSH
63729: FOR_TO
63730: IFFALSE 63892
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63732: LD_VAR 0 2
63736: PPUSH
63737: LD_VAR 0 3
63741: PPUSH
63742: CALL_OW 428
63746: PUSH
63747: LD_EXP 55
63751: PUSH
63752: LD_VAR 0 5
63756: ARRAY
63757: PUSH
63758: LD_INT 2
63760: ARRAY
63761: EQUAL
63762: IFFALSE 63794
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63764: LD_ADDR_EXP 55
63768: PUSH
63769: LD_EXP 55
63773: PPUSH
63774: LD_VAR 0 5
63778: PPUSH
63779: CALL_OW 3
63783: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63784: CALL 63949 0 0
// exit ;
63788: POP
63789: POP
63790: GO 63944
// end else
63792: GO 63890
// if factory = factoryWaypoints [ i ] [ 2 ] then
63794: LD_VAR 0 1
63798: PUSH
63799: LD_EXP 55
63803: PUSH
63804: LD_VAR 0 5
63808: ARRAY
63809: PUSH
63810: LD_INT 2
63812: ARRAY
63813: EQUAL
63814: IFFALSE 63890
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63816: LD_ADDR_EXP 55
63820: PUSH
63821: LD_EXP 55
63825: PPUSH
63826: LD_VAR 0 5
63830: PPUSH
63831: CALL_OW 3
63835: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63836: LD_ADDR_EXP 55
63840: PUSH
63841: LD_EXP 55
63845: PPUSH
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 255
63855: PUSH
63856: LD_VAR 0 1
63860: PUSH
63861: LD_VAR 0 2
63865: PUSH
63866: LD_VAR 0 3
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: PPUSH
63877: CALL 53177 0 2
63881: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63882: CALL 63949 0 0
// exit ;
63886: POP
63887: POP
63888: GO 63944
// end ; end ;
63890: GO 63729
63892: POP
63893: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63894: LD_ADDR_EXP 55
63898: PUSH
63899: LD_EXP 55
63903: PPUSH
63904: LD_VAR 0 1
63908: PPUSH
63909: CALL_OW 255
63913: PUSH
63914: LD_VAR 0 1
63918: PUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_VAR 0 3
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: PPUSH
63935: CALL 53177 0 2
63939: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63940: CALL 63949 0 0
// end ;
63944: LD_VAR 0 4
63948: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63949: LD_INT 0
63951: PPUSH
63952: PPUSH
63953: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63954: LD_STRING resetFactoryWaypoint();
63956: PPUSH
63957: CALL_OW 559
// if factoryWaypoints then
63961: LD_EXP 55
63965: IFFALSE 64086
// begin list := factoryWaypoints ;
63967: LD_ADDR_VAR 0 3
63971: PUSH
63972: LD_EXP 55
63976: ST_TO_ADDR
// for i := 1 to list do
63977: LD_ADDR_VAR 0 2
63981: PUSH
63982: DOUBLE
63983: LD_INT 1
63985: DEC
63986: ST_TO_ADDR
63987: LD_VAR 0 3
63991: PUSH
63992: FOR_TO
63993: IFFALSE 64084
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63995: LD_STRING setFactoryWaypointXY(
63997: PUSH
63998: LD_VAR 0 3
64002: PUSH
64003: LD_VAR 0 2
64007: ARRAY
64008: PUSH
64009: LD_INT 1
64011: ARRAY
64012: STR
64013: PUSH
64014: LD_STRING ,
64016: STR
64017: PUSH
64018: LD_VAR 0 3
64022: PUSH
64023: LD_VAR 0 2
64027: ARRAY
64028: PUSH
64029: LD_INT 2
64031: ARRAY
64032: STR
64033: PUSH
64034: LD_STRING ,
64036: STR
64037: PUSH
64038: LD_VAR 0 3
64042: PUSH
64043: LD_VAR 0 2
64047: ARRAY
64048: PUSH
64049: LD_INT 3
64051: ARRAY
64052: STR
64053: PUSH
64054: LD_STRING ,
64056: STR
64057: PUSH
64058: LD_VAR 0 3
64062: PUSH
64063: LD_VAR 0 2
64067: ARRAY
64068: PUSH
64069: LD_INT 4
64071: ARRAY
64072: STR
64073: PUSH
64074: LD_STRING )
64076: STR
64077: PPUSH
64078: CALL_OW 559
64082: GO 63992
64084: POP
64085: POP
// end ; end ;
64086: LD_VAR 0 1
64090: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64091: LD_INT 0
64093: PPUSH
// if HexInfo ( x , y ) = warehouse then
64094: LD_VAR 0 2
64098: PPUSH
64099: LD_VAR 0 3
64103: PPUSH
64104: CALL_OW 428
64108: PUSH
64109: LD_VAR 0 1
64113: EQUAL
64114: IFFALSE 64141
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64116: LD_ADDR_EXP 56
64120: PUSH
64121: LD_EXP 56
64125: PPUSH
64126: LD_VAR 0 1
64130: PPUSH
64131: LD_INT 0
64133: PPUSH
64134: CALL_OW 1
64138: ST_TO_ADDR
64139: GO 64192
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64141: LD_ADDR_EXP 56
64145: PUSH
64146: LD_EXP 56
64150: PPUSH
64151: LD_VAR 0 1
64155: PPUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: CALL_OW 255
64165: PUSH
64166: LD_VAR 0 1
64170: PUSH
64171: LD_VAR 0 2
64175: PUSH
64176: LD_VAR 0 3
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: PPUSH
64187: CALL_OW 1
64191: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64192: CALL 64201 0 0
// end ;
64196: LD_VAR 0 4
64200: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64201: LD_INT 0
64203: PPUSH
64204: PPUSH
64205: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64206: LD_STRING resetWarehouseGatheringPoints();
64208: PPUSH
64209: CALL_OW 559
// if warehouseGatheringPoints then
64213: LD_EXP 56
64217: IFFALSE 64343
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64219: LD_ADDR_VAR 0 3
64223: PUSH
64224: LD_EXP 56
64228: PPUSH
64229: CALL 56939 0 1
64233: ST_TO_ADDR
// for i := 1 to list do
64234: LD_ADDR_VAR 0 2
64238: PUSH
64239: DOUBLE
64240: LD_INT 1
64242: DEC
64243: ST_TO_ADDR
64244: LD_VAR 0 3
64248: PUSH
64249: FOR_TO
64250: IFFALSE 64341
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64252: LD_STRING setWarehouseGatheringPointXY(
64254: PUSH
64255: LD_VAR 0 3
64259: PUSH
64260: LD_VAR 0 2
64264: ARRAY
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: STR
64270: PUSH
64271: LD_STRING ,
64273: STR
64274: PUSH
64275: LD_VAR 0 3
64279: PUSH
64280: LD_VAR 0 2
64284: ARRAY
64285: PUSH
64286: LD_INT 2
64288: ARRAY
64289: STR
64290: PUSH
64291: LD_STRING ,
64293: STR
64294: PUSH
64295: LD_VAR 0 3
64299: PUSH
64300: LD_VAR 0 2
64304: ARRAY
64305: PUSH
64306: LD_INT 3
64308: ARRAY
64309: STR
64310: PUSH
64311: LD_STRING ,
64313: STR
64314: PUSH
64315: LD_VAR 0 3
64319: PUSH
64320: LD_VAR 0 2
64324: ARRAY
64325: PUSH
64326: LD_INT 4
64328: ARRAY
64329: STR
64330: PUSH
64331: LD_STRING )
64333: STR
64334: PPUSH
64335: CALL_OW 559
64339: GO 64249
64341: POP
64342: POP
// end ; end ;
64343: LD_VAR 0 1
64347: RET
