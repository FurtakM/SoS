// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5860 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7221 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 9179 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9295 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9915 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 15731 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 58324 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 24
 359: PUSH
 360: LD_INT 36
 362: PUSH
 363: LD_INT 48
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 985 0 2
// PlaceMines ( extraMinefield , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 381: LD_INT 24
 383: PPUSH
 384: LD_INT 6
 386: PUSH
 387: LD_INT 8
 389: PUSH
 390: LD_INT 10
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: LD_OWVAR 67
 402: ARRAY
 403: PPUSH
 404: CALL 985 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 408: LD_ADDR_VAR 0 8
 412: PUSH
 413: LD_INT 3
 415: PUSH
 416: LD_INT 5
 418: PUSH
 419: LD_INT 7
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: PUSH
 427: LD_OWVAR 67
 431: ARRAY
 432: ST_TO_ADDR
// uc_side := side ;
 433: LD_ADDR_OWVAR 20
 437: PUSH
 438: LD_VAR 0 1
 442: ST_TO_ADDR
// uc_nation := 2 ;
 443: LD_ADDR_OWVAR 21
 447: PUSH
 448: LD_INT 2
 450: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 8000 , 1200 , 400 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 451: LD_ADDR_EXP 14
 455: PUSH
 456: LD_INT 2
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: LD_STRING 
 464: PPUSH
 465: LD_VAR 0 8
 469: PPUSH
 470: LD_INT 8000
 472: PUSH
 473: LD_INT 1200
 475: PUSH
 476: LD_INT 400
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PPUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 11
 489: PUSH
 490: LD_INT 12
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: PUSH
 507: LD_INT 6
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL 24329 0 6
 523: ST_TO_ADDR
// arForceTmp := [ ] ;
 524: LD_ADDR_EXP 15
 528: PUSH
 529: EMPTY
 530: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 22
 538: PUSH
 539: LD_VAR 0 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 30
 550: PUSH
 551: LD_INT 31
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PUSH
 558: LD_INT 3
 560: PUSH
 561: LD_INT 95
 563: PUSH
 564: LD_INT 1
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: LD_INT 58
 577: PUSH
 578: EMPTY
 579: LIST
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PPUSH
 587: CALL_OW 69
 591: PUSH
 592: FOR_IN
 593: IFFALSE 722
// begin d := GetDir ( i ) ;
 595: LD_ADDR_VAR 0 4
 599: PUSH
 600: LD_VAR 0 3
 604: PPUSH
 605: CALL_OW 254
 609: ST_TO_ADDR
// if d < 3 then
 610: LD_VAR 0 4
 614: PUSH
 615: LD_INT 3
 617: LESS
 618: IFFALSE 636
// d := d + 3 else
 620: LD_ADDR_VAR 0 4
 624: PUSH
 625: LD_VAR 0 4
 629: PUSH
 630: LD_INT 3
 632: PLUS
 633: ST_TO_ADDR
 634: GO 650
// d := d - 3 ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_VAR 0 4
 645: PUSH
 646: LD_INT 3
 648: MINUS
 649: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 650: LD_INT 0
 652: PPUSH
 653: LD_VAR 0 8
 657: PPUSH
 658: CALL_OW 381
// un := CreateHuman ;
 662: LD_ADDR_VAR 0 6
 666: PUSH
 667: CALL_OW 44
 671: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 672: LD_ADDR_EXP 15
 676: PUSH
 677: LD_EXP 15
 681: PPUSH
 682: LD_VAR 0 6
 686: PPUSH
 687: CALL 53379 0 2
 691: ST_TO_ADDR
// SetDir ( un , d ) ;
 692: LD_VAR 0 6
 696: PPUSH
 697: LD_VAR 0 4
 701: PPUSH
 702: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 706: LD_VAR 0 6
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 52
// end ;
 720: GO 592
 722: POP
 723: POP
// for i := 1 to 2 do
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: DOUBLE
 730: LD_INT 1
 732: DEC
 733: ST_TO_ADDR
 734: LD_INT 2
 736: PUSH
 737: FOR_TO
 738: IFFALSE 822
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 740: LD_INT 14
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 31
 751: PPUSH
 752: LD_INT 100
 754: PPUSH
 755: CALL 20508 0 5
// un := CreateVehicle ;
 759: LD_ADDR_VAR 0 6
 763: PUSH
 764: CALL_OW 45
 768: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 769: LD_VAR 0 6
 773: PPUSH
 774: LD_INT 102
 776: PPUSH
 777: LD_INT 31
 779: PPUSH
 780: LD_INT 6
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 790: LD_INT 0
 792: PPUSH
 793: LD_VAR 0 8
 797: PUSH
 798: LD_INT 2
 800: PLUS
 801: PPUSH
 802: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_VAR 0 6
 815: PPUSH
 816: CALL_OW 52
// end ;
 820: GO 737
 822: POP
 823: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 824: LD_ADDR_VAR 0 3
 828: PUSH
 829: LD_INT 22
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 3
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PPUSH
 855: CALL_OW 69
 859: PUSH
 860: FOR_IN
 861: IFFALSE 894
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 863: LD_VAR 0 3
 867: PPUSH
 868: LD_INT 3
 870: PUSH
 871: LD_INT 5
 873: PUSH
 874: LD_INT 7
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL_OW 241
 892: GO 860
 894: POP
 895: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 896: LD_ADDR_VAR 0 3
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_VAR 0 1
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 32
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PPUSH
 927: CALL_OW 69
 931: PUSH
 932: FOR_IN
 933: IFFALSE 978
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 935: LD_VAR 0 3
 939: PPUSH
 940: LD_INT 27
 942: PUSH
 943: LD_INT 25
 945: PUSH
 946: LD_INT 28
 948: PUSH
 949: LD_INT 27
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: PUSH
 958: LD_VAR 0 3
 962: PUSH
 963: LD_INT 4
 965: MOD
 966: PUSH
 967: LD_INT 1
 969: PLUS
 970: ARRAY
 971: PPUSH
 972: CALL_OW 431
 976: GO 932
 978: POP
 979: POP
// end ;
 980: LD_VAR 0 2
 984: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 985: LD_INT 0
 987: PPUSH
 988: PPUSH
 989: PPUSH
 990: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 991: LD_ADDR_VAR 0 5
 995: PUSH
 996: LD_VAR 0 1
1000: PPUSH
1001: LD_INT 0
1003: PPUSH
1004: CALL_OW 517
1008: ST_TO_ADDR
// if not tmp then
1009: LD_VAR 0 5
1013: NOT
1014: IFFALSE 1018
// exit ;
1016: GO 1260
// for i := 1 to n do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_VAR 0 2
1032: PUSH
1033: FOR_TO
1034: IFFALSE 1258
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1036: LD_ADDR_VAR 0 6
1040: PUSH
1041: LD_INT 1
1043: PPUSH
1044: LD_VAR 0 5
1048: PUSH
1049: LD_INT 1
1051: ARRAY
1052: PPUSH
1053: CALL_OW 12
1057: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1058: LD_VAR 0 5
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PUSH
1067: LD_VAR 0 6
1071: ARRAY
1072: PPUSH
1073: LD_VAR 0 5
1077: PUSH
1078: LD_INT 2
1080: ARRAY
1081: PUSH
1082: LD_VAR 0 6
1086: ARRAY
1087: PPUSH
1088: LD_EXP 3
1092: PUSH
1093: LD_INT 1
1095: ARRAY
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1104: LD_ADDR_EXP 13
1108: PUSH
1109: LD_EXP 13
1113: PPUSH
1114: LD_EXP 13
1118: PUSH
1119: LD_INT 1
1121: PLUS
1122: PPUSH
1123: LD_VAR 0 5
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PUSH
1132: LD_VAR 0 6
1136: ARRAY
1137: PPUSH
1138: CALL_OW 2
1142: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1143: LD_ADDR_EXP 13
1147: PUSH
1148: LD_EXP 13
1152: PPUSH
1153: LD_EXP 13
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: PPUSH
1162: LD_VAR 0 5
1166: PUSH
1167: LD_INT 2
1169: ARRAY
1170: PUSH
1171: LD_VAR 0 6
1175: ARRAY
1176: PPUSH
1177: CALL_OW 2
1181: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1182: LD_ADDR_VAR 0 5
1186: PUSH
1187: LD_VAR 0 5
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_VAR 0 5
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_VAR 0 6
1208: PPUSH
1209: CALL_OW 3
1213: PPUSH
1214: CALL_OW 1
1218: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1219: LD_ADDR_VAR 0 5
1223: PUSH
1224: LD_VAR 0 5
1228: PPUSH
1229: LD_INT 2
1231: PPUSH
1232: LD_VAR 0 5
1236: PUSH
1237: LD_INT 2
1239: ARRAY
1240: PPUSH
1241: LD_VAR 0 6
1245: PPUSH
1246: CALL_OW 3
1250: PPUSH
1251: CALL_OW 1
1255: ST_TO_ADDR
// end ;
1256: GO 1033
1258: POP
1259: POP
// end ;
1260: LD_VAR 0 3
1264: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1265: LD_INT 0
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// enable ;
1298: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1299: LD_ADDR_VAR 0 11
1303: PUSH
1304: LD_INT 81
1306: PUSH
1307: LD_VAR 0 1
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: PPUSH
1316: CALL_OW 69
1320: ST_TO_ADDR
// if tmp then
1321: LD_VAR 0 11
1325: IFFALSE 1346
// enemySide := GetSide ( tmp [ 1 ] ) ;
1327: LD_ADDR_VAR 0 38
1331: PUSH
1332: LD_VAR 0 11
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: PPUSH
1341: CALL_OW 255
1345: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 26
1350: PUSH
1351: LD_VAR 0 3
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1373: LD_ADDR_VAR 0 27
1377: PUSH
1378: LD_VAR 0 4
1382: PPUSH
1383: LD_INT 81
1385: PUSH
1386: LD_VAR 0 1
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: PPUSH
1395: CALL_OW 70
1399: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1400: LD_ADDR_VAR 0 13
1404: PUSH
1405: LD_INT 22
1407: PUSH
1408: LD_VAR 0 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 50
1419: PUSH
1420: EMPTY
1421: LIST
1422: PUSH
1423: LD_INT 34
1425: PUSH
1426: LD_INT 31
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: PPUSH
1438: CALL_OW 69
1442: ST_TO_ADDR
// if ct then
1443: LD_VAR 0 13
1447: IFFALSE 1538
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1449: LD_ADDR_VAR 0 15
1453: PUSH
1454: LD_INT 22
1456: PUSH
1457: LD_VAR 0 1
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 61
1471: PUSH
1472: EMPTY
1473: LIST
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 50
1481: PUSH
1482: EMPTY
1483: LIST
1484: PUSH
1485: LD_INT 33
1487: PUSH
1488: LD_INT 2
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: PPUSH
1501: CALL_OW 69
1505: ST_TO_ADDR
// if veh then
1506: LD_VAR 0 15
1510: IFFALSE 1538
// for i in veh do
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_VAR 0 15
1521: PUSH
1522: FOR_IN
1523: IFFALSE 1536
// Connect ( i ) ;
1525: LD_VAR 0 9
1529: PPUSH
1530: CALL 23976 0 1
1534: GO 1522
1536: POP
1537: POP
// end ; vehicles := arVehicles ;
1538: LD_ADDR_VAR 0 30
1542: PUSH
1543: LD_EXP 8
1547: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1548: LD_ADDR_VAR 0 36
1552: PUSH
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 22
1560: PUSH
1561: LD_VAR 0 1
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 30
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PPUSH
1602: CALL_OW 70
1606: ST_TO_ADDR
// if depot then
1607: LD_VAR 0 36
1611: IFFALSE 1627
// depot := depot [ 1 ] ;
1613: LD_ADDR_VAR 0 36
1617: PUSH
1618: LD_VAR 0 36
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1627: LD_ADDR_VAR 0 22
1631: PUSH
1632: LD_VAR 0 5
1636: PPUSH
1637: LD_INT 25
1639: PUSH
1640: LD_INT 4
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 50
1649: PUSH
1650: EMPTY
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 72
1661: ST_TO_ADDR
// if arTech then
1662: LD_EXP 5
1666: IFFALSE 2028
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1668: LD_ADDR_VAR 0 16
1672: PUSH
1673: LD_VAR 0 3
1677: PPUSH
1678: LD_INT 22
1680: PUSH
1681: LD_VAR 0 1
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 50
1692: PUSH
1693: EMPTY
1694: LIST
1695: PUSH
1696: LD_INT 2
1698: PUSH
1699: LD_INT 30
1701: PUSH
1702: LD_INT 6
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 7
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 30
1721: PUSH
1722: LD_INT 8
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 70
1744: ST_TO_ADDR
// if lab then
1745: LD_VAR 0 16
1749: IFFALSE 2028
// begin for j := 1 to Count ( lab ) do
1751: LD_ADDR_VAR 0 10
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 16
1765: PPUSH
1766: CALL 17770 0 1
1770: PUSH
1771: FOR_TO
1772: IFFALSE 2026
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1774: LD_VAR 0 16
1778: PUSH
1779: LD_VAR 0 10
1783: ARRAY
1784: PPUSH
1785: CALL_OW 461
1789: PUSH
1790: LD_INT 2
1792: EQUAL
1793: IFFALSE 1876
// begin for i in arTech do
1795: LD_ADDR_VAR 0 9
1799: PUSH
1800: LD_EXP 5
1804: PUSH
1805: FOR_IN
1806: IFFALSE 1872
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1808: LD_VAR 0 16
1812: PUSH
1813: LD_VAR 0 10
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 9
1823: PPUSH
1824: CALL_OW 430
1828: PUSH
1829: LD_VAR 0 9
1833: PPUSH
1834: LD_VAR 0 1
1838: PPUSH
1839: CALL_OW 321
1843: PUSH
1844: LD_INT 1
1846: EQUAL
1847: AND
1848: IFFALSE 1870
// begin AddComResearch ( lab [ j ] , i ) ;
1850: LD_VAR 0 16
1854: PUSH
1855: LD_VAR 0 10
1859: ARRAY
1860: PPUSH
1861: LD_VAR 0 9
1865: PPUSH
1866: CALL_OW 184
// end ;
1870: GO 1805
1872: POP
1873: POP
// end else
1874: GO 2024
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1876: LD_VAR 0 16
1880: PUSH
1881: LD_VAR 0 10
1885: ARRAY
1886: PPUSH
1887: CALL_OW 461
1891: PUSH
1892: LD_INT 6
1894: EQUAL
1895: IFFALSE 2024
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1897: LD_ADDR_VAR 0 9
1901: PUSH
1902: LD_VAR 0 22
1906: PPUSH
1907: LD_INT 3
1909: PUSH
1910: LD_INT 120
1912: PUSH
1913: LD_INT 10
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PPUSH
1924: CALL_OW 72
1928: PUSH
1929: FOR_IN
1930: IFFALSE 2022
// begin inside := IsInUnit ( i ) ;
1932: LD_ADDR_VAR 0 14
1936: PUSH
1937: LD_VAR 0 9
1941: PPUSH
1942: CALL_OW 310
1946: ST_TO_ADDR
// if not inside then
1947: LD_VAR 0 14
1951: NOT
1952: IFFALSE 1976
// ComEnterUnit ( i , lab [ j ] ) else
1954: LD_VAR 0 9
1958: PPUSH
1959: LD_VAR 0 16
1963: PUSH
1964: LD_VAR 0 10
1968: ARRAY
1969: PPUSH
1970: CALL_OW 120
1974: GO 2020
// if BuildingStatus ( inside ) = bs_idle then
1976: LD_VAR 0 14
1980: PPUSH
1981: CALL_OW 461
1985: PUSH
1986: LD_INT 2
1988: EQUAL
1989: IFFALSE 2020
// begin ComExitBuilding ( i ) ;
1991: LD_VAR 0 9
1995: PPUSH
1996: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
2000: LD_VAR 0 9
2004: PPUSH
2005: LD_VAR 0 16
2009: PUSH
2010: LD_VAR 0 10
2014: ARRAY
2015: PPUSH
2016: CALL_OW 180
// end ; end ;
2020: GO 1929
2022: POP
2023: POP
// end ;
2024: GO 1771
2026: POP
2027: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2028: LD_ADDR_VAR 0 33
2032: PUSH
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_INT 22
2040: PUSH
2041: LD_VAR 0 1
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 30
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 50
2062: PUSH
2063: EMPTY
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PPUSH
2071: CALL_OW 70
2075: ST_TO_ADDR
// if fac then
2076: LD_VAR 0 33
2080: IFFALSE 2415
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2082: LD_VAR 0 33
2086: PUSH
2087: LD_INT 1
2089: ARRAY
2090: PPUSH
2091: CALL_OW 461
2095: PUSH
2096: LD_INT 2
2098: EQUAL
2099: IFFALSE 2415
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2101: LD_ADDR_VAR 0 34
2105: PUSH
2106: LD_VAR 0 3
2110: PPUSH
2111: LD_INT 2
2113: PUSH
2114: LD_INT 30
2116: PUSH
2117: LD_INT 32
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 33
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 35
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PPUSH
2153: CALL_OW 70
2157: ST_TO_ADDR
// if emptyTowers then
2158: LD_VAR 0 34
2162: IFFALSE 2212
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2164: LD_ADDR_VAR 0 35
2168: PUSH
2169: LD_VAR 0 34
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PPUSH
2178: LD_VAR 0 3
2182: PPUSH
2183: CALL 26015 0 2
2187: ST_TO_ADDR
// if weapon then
2188: LD_VAR 0 35
2192: IFFALSE 2212
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2194: LD_VAR 0 34
2198: PUSH
2199: LD_INT 1
2201: ARRAY
2202: PPUSH
2203: LD_VAR 0 35
2207: PPUSH
2208: CALL_OW 148
// end ; if arConstructList then
2212: LD_EXP 6
2216: IFFALSE 2415
// for i := 1 to Count ( arConstructList ) do
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_EXP 6
2232: PPUSH
2233: CALL 17770 0 1
2237: PUSH
2238: FOR_TO
2239: IFFALSE 2413
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2241: LD_VAR 0 33
2245: PUSH
2246: LD_INT 1
2248: ARRAY
2249: PPUSH
2250: LD_EXP 6
2254: PUSH
2255: LD_VAR 0 9
2259: ARRAY
2260: PUSH
2261: LD_INT 1
2263: ARRAY
2264: PPUSH
2265: LD_EXP 6
2269: PUSH
2270: LD_VAR 0 9
2274: ARRAY
2275: PUSH
2276: LD_INT 2
2278: ARRAY
2279: PPUSH
2280: LD_EXP 6
2284: PUSH
2285: LD_VAR 0 9
2289: ARRAY
2290: PUSH
2291: LD_INT 3
2293: ARRAY
2294: PPUSH
2295: LD_EXP 6
2299: PUSH
2300: LD_VAR 0 9
2304: ARRAY
2305: PUSH
2306: LD_INT 4
2308: ARRAY
2309: PPUSH
2310: CALL_OW 448
2314: IFFALSE 2411
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2316: LD_VAR 0 33
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 6
2329: PUSH
2330: LD_VAR 0 9
2334: ARRAY
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 6
2344: PUSH
2345: LD_VAR 0 9
2349: ARRAY
2350: PUSH
2351: LD_INT 2
2353: ARRAY
2354: PPUSH
2355: LD_EXP 6
2359: PUSH
2360: LD_VAR 0 9
2364: ARRAY
2365: PUSH
2366: LD_INT 3
2368: ARRAY
2369: PPUSH
2370: LD_EXP 6
2374: PUSH
2375: LD_VAR 0 9
2379: ARRAY
2380: PUSH
2381: LD_INT 4
2383: ARRAY
2384: PPUSH
2385: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2389: LD_ADDR_EXP 6
2393: PUSH
2394: LD_EXP 6
2398: PPUSH
2399: LD_VAR 0 9
2403: PPUSH
2404: CALL_OW 3
2408: ST_TO_ADDR
// break ;
2409: GO 2413
// end ; end ;
2411: GO 2238
2413: POP
2414: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2415: LD_ADDR_VAR 0 11
2419: PUSH
2420: LD_VAR 0 3
2424: PPUSH
2425: LD_INT 22
2427: PUSH
2428: LD_VAR 0 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 21
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 57
2452: PUSH
2453: EMPTY
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 3
2462: PUSH
2463: LD_INT 24
2465: PUSH
2466: LD_INT 1000
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2488: LD_ADDR_VAR 0 21
2492: PUSH
2493: LD_VAR 0 3
2497: PPUSH
2498: CALL_OW 435
2502: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2503: LD_ADDR_VAR 0 18
2507: PUSH
2508: LD_VAR 0 5
2512: PPUSH
2513: LD_INT 25
2515: PUSH
2516: LD_INT 3
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 50
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2538: LD_VAR 0 18
2542: PPUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 120
2548: PUSH
2549: LD_INT 7
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 54
2565: PUSH
2566: EMPTY
2567: LIST
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PPUSH
2577: CALL_OW 72
2581: PUSH
2582: LD_VAR 0 33
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: CALL_OW 302
2595: AND
2596: IFFALSE 2655
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2598: LD_VAR 0 18
2602: PPUSH
2603: LD_INT 3
2605: PUSH
2606: LD_INT 120
2608: PUSH
2609: LD_INT 7
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 54
2625: PUSH
2626: EMPTY
2627: LIST
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 72
2641: PPUSH
2642: LD_VAR 0 33
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2655: LD_ADDR_VAR 0 16
2659: PUSH
2660: LD_VAR 0 3
2664: PPUSH
2665: LD_INT 2
2667: PUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 6
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 7
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 8
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PPUSH
2704: CALL_OW 70
2708: ST_TO_ADDR
// if sci then
2709: LD_VAR 0 22
2713: IFFALSE 2956
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2715: LD_ADDR_VAR 0 24
2719: PUSH
2720: LD_VAR 0 5
2724: PPUSH
2725: LD_INT 95
2727: PUSH
2728: LD_VAR 0 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 120
2739: PUSH
2740: LD_INT 1
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 72
2755: ST_TO_ADDR
// if hurtUnits then
2756: LD_VAR 0 24
2760: IFFALSE 2855
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2762: LD_ADDR_VAR 0 9
2766: PUSH
2767: LD_VAR 0 22
2771: PPUSH
2772: LD_INT 3
2774: PUSH
2775: LD_INT 120
2777: PUSH
2778: LD_INT 10
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 72
2793: PUSH
2794: FOR_IN
2795: IFFALSE 2851
// begin SetTag ( i , tHealer ) ;
2797: LD_VAR 0 9
2801: PPUSH
2802: LD_INT 10
2804: PPUSH
2805: CALL_OW 109
// if IsInUnit ( i ) then
2809: LD_VAR 0 9
2813: PPUSH
2814: CALL_OW 310
2818: IFFALSE 2831
// ComExitBuilding ( i ) else
2820: LD_VAR 0 9
2824: PPUSH
2825: CALL_OW 122
2829: GO 2849
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2831: LD_VAR 0 9
2835: PPUSH
2836: LD_VAR 0 24
2840: PUSH
2841: LD_INT 1
2843: ARRAY
2844: PPUSH
2845: CALL_OW 128
// end ;
2849: GO 2794
2851: POP
2852: POP
// end else
2853: GO 2956
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2855: LD_VAR 0 16
2859: PUSH
2860: LD_VAR 0 22
2864: PPUSH
2865: LD_INT 120
2867: PUSH
2868: LD_INT 10
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 72
2879: AND
2880: IFFALSE 2956
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2882: LD_ADDR_VAR 0 9
2886: PUSH
2887: LD_VAR 0 22
2891: PPUSH
2892: LD_INT 120
2894: PUSH
2895: LD_INT 10
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 72
2906: PUSH
2907: FOR_IN
2908: IFFALSE 2954
// begin SetTag ( i , 0 ) ;
2910: LD_VAR 0 9
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 109
// if not IsInUnit ( i ) then
2922: LD_VAR 0 9
2926: PPUSH
2927: CALL_OW 310
2931: NOT
2932: IFFALSE 2952
// ComEnterUnit ( i , lab [ 1 ] ) ;
2934: LD_VAR 0 9
2938: PPUSH
2939: LD_VAR 0 16
2943: PUSH
2944: LD_INT 1
2946: ARRAY
2947: PPUSH
2948: CALL_OW 120
// end ;
2952: GO 2907
2954: POP
2955: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2956: LD_ADDR_VAR 0 17
2960: PUSH
2961: LD_VAR 0 5
2965: PPUSH
2966: LD_INT 25
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: CALL_OW 72
2980: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2981: LD_ADDR_VAR 0 37
2985: PUSH
2986: LD_EXP 7
2990: ST_TO_ADDR
// if eng then
2991: LD_VAR 0 17
2995: IFFALSE 3829
// begin for i in eng do
2997: LD_ADDR_VAR 0 9
3001: PUSH
3002: LD_VAR 0 17
3006: PUSH
3007: FOR_IN
3008: IFFALSE 3827
// begin tag := GetTag ( i ) ;
3010: LD_ADDR_VAR 0 19
3014: PUSH
3015: LD_VAR 0 9
3019: PPUSH
3020: CALL_OW 110
3024: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
3025: LD_VAR 0 9
3029: PPUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: CALL_OW 308
3039: IFFALSE 3070
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3041: LD_VAR 0 9
3045: PPUSH
3046: LD_VAR 0 7
3050: PUSH
3051: LD_INT 1
3053: ARRAY
3054: PPUSH
3055: LD_VAR 0 7
3059: PUSH
3060: LD_INT 2
3062: ARRAY
3063: PPUSH
3064: CALL_OW 111
// continue ;
3068: GO 3007
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3070: LD_VAR 0 9
3074: PPUSH
3075: CALL_OW 256
3079: PUSH
3080: LD_INT 800
3082: LESS
3083: PUSH
3084: LD_VAR 0 19
3088: PUSH
3089: LD_INT 1
3091: NONEQUAL
3092: AND
3093: IFFALSE 3143
// begin SetTag ( i , tHeal ) ;
3095: LD_VAR 0 9
3099: PPUSH
3100: LD_INT 1
3102: PPUSH
3103: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3107: LD_VAR 0 9
3111: PPUSH
3112: LD_VAR 0 6
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: PPUSH
3121: LD_VAR 0 6
3125: PUSH
3126: LD_INT 2
3128: ARRAY
3129: PPUSH
3130: CALL_OW 111
// AddComHold ( i ) ;
3134: LD_VAR 0 9
3138: PPUSH
3139: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3143: LD_VAR 0 19
3147: PUSH
3148: LD_INT 1
3150: EQUAL
3151: PUSH
3152: LD_VAR 0 9
3156: PPUSH
3157: CALL_OW 256
3161: PUSH
3162: LD_INT 1000
3164: EQUAL
3165: AND
3166: IFFALSE 3180
// SetTag ( i , 0 ) ;
3168: LD_VAR 0 9
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 109
// if not tag then
3180: LD_VAR 0 19
3184: NOT
3185: IFFALSE 3352
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3187: LD_ADDR_VAR 0 12
3191: PUSH
3192: LD_VAR 0 3
3196: PPUSH
3197: LD_INT 57
3199: PUSH
3200: EMPTY
3201: LIST
3202: PPUSH
3203: CALL_OW 70
3207: ST_TO_ADDR
// if undone then
3208: LD_VAR 0 12
3212: IFFALSE 3234
// begin ComComplete ( i , undone [ 1 ] ) ;
3214: LD_VAR 0 9
3218: PPUSH
3219: LD_VAR 0 12
3223: PUSH
3224: LD_INT 1
3226: ARRAY
3227: PPUSH
3228: CALL 23868 0 2
// continue ;
3232: GO 3007
// end ; if cr or tmp or buildingsToBuild then
3234: LD_VAR 0 21
3238: PUSH
3239: LD_VAR 0 11
3243: OR
3244: PUSH
3245: LD_VAR 0 37
3249: OR
3250: IFFALSE 3326
// begin if IsInUnit ( i ) then
3252: LD_VAR 0 9
3256: PPUSH
3257: CALL_OW 310
3261: IFFALSE 3272
// ComExitBuilding ( i ) ;
3263: LD_VAR 0 9
3267: PPUSH
3268: CALL_OW 122
// if tmp then
3272: LD_VAR 0 11
3276: IFFALSE 3292
// SetTag ( i , tRepair ) else
3278: LD_VAR 0 9
3282: PPUSH
3283: LD_INT 3
3285: PPUSH
3286: CALL_OW 109
3290: GO 3324
// if cr then
3292: LD_VAR 0 21
3296: IFFALSE 3312
// SetTag ( i , tCrates ) else
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_INT 2
3305: PPUSH
3306: CALL_OW 109
3310: GO 3324
// SetTag ( i , tBuild ) ;
3312: LD_VAR 0 9
3316: PPUSH
3317: LD_INT 5
3319: PPUSH
3320: CALL_OW 109
// end else
3324: GO 3352
// if not IsInUnit ( i ) then
3326: LD_VAR 0 9
3330: PPUSH
3331: CALL_OW 310
3335: NOT
3336: IFFALSE 3352
// ComEnterUnit ( i , depot ) ;
3338: LD_VAR 0 9
3342: PPUSH
3343: LD_VAR 0 36
3347: PPUSH
3348: CALL_OW 120
// end ; if tag = tRepair then
3352: LD_VAR 0 19
3356: PUSH
3357: LD_INT 3
3359: EQUAL
3360: IFFALSE 3466
// begin if IsInUnit ( i ) then
3362: LD_VAR 0 9
3366: PPUSH
3367: CALL_OW 310
3371: IFFALSE 3384
// begin ComExitBuilding ( i ) ;
3373: LD_VAR 0 9
3377: PPUSH
3378: CALL_OW 122
// continue ;
3382: GO 3007
// end ; if not tmp then
3384: LD_VAR 0 11
3388: NOT
3389: IFFALSE 3405
// begin SetTag ( i , 0 ) ;
3391: LD_VAR 0 9
3395: PPUSH
3396: LD_INT 0
3398: PPUSH
3399: CALL_OW 109
// continue ;
3403: GO 3007
// end ; if not HasTask ( i ) then
3405: LD_VAR 0 9
3409: PPUSH
3410: CALL_OW 314
3414: NOT
3415: IFFALSE 3435
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3417: LD_VAR 0 9
3421: PPUSH
3422: LD_VAR 0 11
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: PPUSH
3431: CALL_OW 130
// if not IsInArea ( i , area ) then
3435: LD_VAR 0 9
3439: PPUSH
3440: LD_VAR 0 3
3444: PPUSH
3445: CALL_OW 308
3449: NOT
3450: IFFALSE 3466
// ComMoveToArea ( i , area ) ;
3452: LD_VAR 0 9
3456: PPUSH
3457: LD_VAR 0 3
3461: PPUSH
3462: CALL_OW 113
// end ; if tag = tBuild then
3466: LD_VAR 0 19
3470: PUSH
3471: LD_INT 5
3473: EQUAL
3474: IFFALSE 3680
// begin if IsInUnit ( i ) then
3476: LD_VAR 0 9
3480: PPUSH
3481: CALL_OW 310
3485: IFFALSE 3498
// begin ComExitBuilding ( i ) ;
3487: LD_VAR 0 9
3491: PPUSH
3492: CALL_OW 122
// continue ;
3496: GO 3007
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3498: LD_VAR 0 37
3502: NOT
3503: PUSH
3504: LD_VAR 0 26
3508: OR
3509: PUSH
3510: LD_VAR 0 27
3514: OR
3515: IFFALSE 3533
// begin SetTag ( i , 0 ) ;
3517: LD_VAR 0 9
3521: PPUSH
3522: LD_INT 0
3524: PPUSH
3525: CALL_OW 109
// continue ;
3529: GO 3007
// end else
3531: GO 3572
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3533: LD_VAR 0 36
3537: PPUSH
3538: LD_VAR 0 37
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: PPUSH
3551: CALL 57308 0 2
3555: NOT
3556: IFFALSE 3572
// begin SetTag ( i , 0 ) ;
3558: LD_VAR 0 9
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 109
// continue ;
3570: GO 3007
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3572: LD_ADDR_VAR 0 12
3576: PUSH
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 57
3584: PUSH
3585: EMPTY
3586: LIST
3587: PPUSH
3588: CALL_OW 70
3592: ST_TO_ADDR
// if undone then
3593: LD_VAR 0 12
3597: IFFALSE 3619
// begin ComComplete ( i , undone [ 1 ] ) ;
3599: LD_VAR 0 9
3603: PPUSH
3604: LD_VAR 0 12
3608: PUSH
3609: LD_INT 1
3611: ARRAY
3612: PPUSH
3613: CALL 23868 0 2
// continue ;
3617: GO 3007
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3619: LD_VAR 0 9
3623: PPUSH
3624: LD_VAR 0 37
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: PPUSH
3637: LD_VAR 0 37
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: PUSH
3646: LD_INT 2
3648: ARRAY
3649: PPUSH
3650: LD_VAR 0 37
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PUSH
3659: LD_INT 3
3661: ARRAY
3662: PPUSH
3663: LD_VAR 0 37
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PUSH
3672: LD_INT 4
3674: ARRAY
3675: PPUSH
3676: CALL_OW 145
// end ; if tag = tCrates then
3680: LD_VAR 0 19
3684: PUSH
3685: LD_INT 2
3687: EQUAL
3688: IFFALSE 3825
// begin if IsInUnit ( i ) then
3690: LD_VAR 0 9
3694: PPUSH
3695: CALL_OW 310
3699: IFFALSE 3712
// begin ComExitBuilding ( i ) ;
3701: LD_VAR 0 9
3705: PPUSH
3706: CALL_OW 122
// continue ;
3710: GO 3007
// end ; if not cr then
3712: LD_VAR 0 21
3716: NOT
3717: IFFALSE 3733
// begin SetTag ( i , 0 ) ;
3719: LD_VAR 0 9
3723: PPUSH
3724: LD_INT 0
3726: PPUSH
3727: CALL_OW 109
// continue ;
3731: GO 3007
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3733: LD_VAR 0 9
3737: PPUSH
3738: CALL_OW 314
3742: NOT
3743: PUSH
3744: LD_INT 81
3746: PUSH
3747: LD_VAR 0 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 92
3758: PUSH
3759: LD_VAR 0 21
3763: PUSH
3764: LD_INT 1
3766: ARRAY
3767: PUSH
3768: LD_VAR 0 21
3772: PUSH
3773: LD_INT 2
3775: ARRAY
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 69
3794: NOT
3795: AND
3796: IFFALSE 3825
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3798: LD_VAR 0 9
3802: PPUSH
3803: LD_VAR 0 21
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_VAR 0 21
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 117
// end ; end ;
3825: GO 3007
3827: POP
3828: POP
// end ; if vehicles then
3829: LD_VAR 0 30
3833: IFFALSE 4633
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3835: LD_ADDR_VAR 0 30
3839: PUSH
3840: LD_VAR 0 30
3844: PPUSH
3845: LD_INT 3
3847: PUSH
3848: LD_INT 2
3850: PUSH
3851: LD_INT 34
3853: PUSH
3854: LD_INT 88
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 34
3863: PUSH
3864: LD_INT 32
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 50
3882: PUSH
3883: EMPTY
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 72
3894: ST_TO_ADDR
// if vehicles then
3895: LD_VAR 0 30
3899: IFFALSE 4633
// begin for i in vehicles do
3901: LD_ADDR_VAR 0 9
3905: PUSH
3906: LD_VAR 0 30
3910: PUSH
3911: FOR_IN
3912: IFFALSE 4631
// begin tag := GetTag ( i ) ;
3914: LD_ADDR_VAR 0 19
3918: PUSH
3919: LD_VAR 0 9
3923: PPUSH
3924: CALL_OW 110
3928: ST_TO_ADDR
// if not tag then
3929: LD_VAR 0 19
3933: NOT
3934: IFFALSE 4080
// begin if GetControl ( i ) = control_manual then
3936: LD_VAR 0 9
3940: PPUSH
3941: CALL_OW 263
3945: PUSH
3946: LD_INT 1
3948: EQUAL
3949: IFFALSE 4066
// begin drivers := arDrivers ;
3951: LD_ADDR_VAR 0 28
3955: PUSH
3956: LD_EXP 10
3960: ST_TO_ADDR
// if not drivers then
3961: LD_VAR 0 28
3965: NOT
3966: IFFALSE 4046
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3968: LD_ADDR_VAR 0 28
3972: PUSH
3973: LD_VAR 0 18
3977: PPUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 120
3983: PUSH
3984: LD_INT 7
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: ST_TO_ADDR
// if drivers then
4000: LD_VAR 0 28
4004: IFFALSE 4046
// begin SetTag ( drivers [ 1 ] , tMech ) ;
4006: LD_VAR 0 28
4010: PUSH
4011: LD_INT 1
4013: ARRAY
4014: PPUSH
4015: LD_INT 7
4017: PPUSH
4018: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
4022: LD_ADDR_EXP 10
4026: PUSH
4027: LD_EXP 10
4031: PPUSH
4032: LD_VAR 0 28
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: CALL 53379 0 2
4045: ST_TO_ADDR
// end ; end ; if drivers then
4046: LD_VAR 0 28
4050: IFFALSE 4064
// SetTag ( i , tBusy ) ;
4052: LD_VAR 0 9
4056: PPUSH
4057: LD_INT 8
4059: PPUSH
4060: CALL_OW 109
// continue ;
4064: GO 3911
// end ; SetTag ( i , tBusy ) ;
4066: LD_VAR 0 9
4070: PPUSH
4071: LD_INT 8
4073: PPUSH
4074: CALL_OW 109
// end else
4078: GO 4629
// if tag = tBusy then
4080: LD_VAR 0 19
4084: PUSH
4085: LD_INT 8
4087: EQUAL
4088: IFFALSE 4300
// begin if GetLives ( i ) = 1000 then
4090: LD_VAR 0 9
4094: PPUSH
4095: CALL_OW 256
4099: PUSH
4100: LD_INT 1000
4102: EQUAL
4103: IFFALSE 4298
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4105: LD_VAR 0 9
4109: PPUSH
4110: CALL_OW 263
4114: PUSH
4115: LD_INT 1
4117: EQUAL
4118: PUSH
4119: LD_VAR 0 9
4123: PPUSH
4124: CALL_OW 311
4128: NOT
4129: AND
4130: IFFALSE 4286
// begin drivers := arDrivers ;
4132: LD_ADDR_VAR 0 28
4136: PUSH
4137: LD_EXP 10
4141: ST_TO_ADDR
// if not drivers then
4142: LD_VAR 0 28
4146: NOT
4147: IFFALSE 4163
// begin SetTag ( i , 0 ) ;
4149: LD_VAR 0 9
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: CALL_OW 109
// continue ;
4161: GO 3911
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4163: LD_VAR 0 28
4167: PUSH
4168: LD_INT 1
4170: ARRAY
4171: PPUSH
4172: CALL_OW 310
4176: PUSH
4177: LD_VAR 0 28
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: CALL 50983 0 1
4190: NOT
4191: AND
4192: IFFALSE 4207
// ComExitBuilding ( drivers [ 1 ] ) ;
4194: LD_VAR 0 28
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4207: LD_VAR 0 30
4211: PPUSH
4212: LD_INT 120
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 72
4226: PUSH
4227: LD_VAR 0 28
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: CALL_OW 314
4240: NOT
4241: AND
4242: PUSH
4243: LD_VAR 0 30
4247: PPUSH
4248: LD_INT 120
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PPUSH
4258: CALL_OW 72
4262: NOT
4263: OR
4264: IFFALSE 4284
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4266: LD_VAR 0 28
4270: PUSH
4271: LD_INT 1
4273: ARRAY
4274: PPUSH
4275: LD_VAR 0 9
4279: PPUSH
4280: CALL_OW 120
// continue ;
4284: GO 3911
// end ; SetTag ( i , tAttack ) ;
4286: LD_VAR 0 9
4290: PPUSH
4291: LD_INT 13
4293: PPUSH
4294: CALL_OW 109
// end ; end else
4298: GO 4629
// if tag = tAttack then
4300: LD_VAR 0 19
4304: PUSH
4305: LD_INT 13
4307: EQUAL
4308: IFFALSE 4488
// begin enemy := enemyInBase ;
4310: LD_ADDR_VAR 0 25
4314: PUSH
4315: LD_VAR 0 26
4319: ST_TO_ADDR
// if not enemy then
4320: LD_VAR 0 25
4324: NOT
4325: IFFALSE 4337
// enemy := enemyOuterBase ;
4327: LD_ADDR_VAR 0 25
4331: PUSH
4332: LD_VAR 0 27
4336: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4337: LD_VAR 0 25
4341: NOT
4342: PUSH
4343: LD_VAR 0 9
4347: PPUSH
4348: LD_VAR 0 7
4352: PUSH
4353: LD_INT 1
4355: ARRAY
4356: PPUSH
4357: LD_VAR 0 7
4361: PUSH
4362: LD_INT 2
4364: ARRAY
4365: PPUSH
4366: CALL_OW 297
4370: PUSH
4371: LD_INT 10
4373: GREATER
4374: AND
4375: IFFALSE 4406
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4377: LD_VAR 0 9
4381: PPUSH
4382: LD_VAR 0 7
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: LD_VAR 0 7
4395: PUSH
4396: LD_INT 2
4398: ARRAY
4399: PPUSH
4400: CALL_OW 111
// continue ;
4404: GO 3911
// end ; if GetLives ( i ) < 650 then
4406: LD_VAR 0 9
4410: PPUSH
4411: CALL_OW 256
4415: PUSH
4416: LD_INT 650
4418: LESS
4419: IFFALSE 4462
// begin SetTag ( i , tVehRepair ) ;
4421: LD_VAR 0 9
4425: PPUSH
4426: LD_INT 9
4428: PPUSH
4429: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4433: LD_VAR 0 9
4437: PPUSH
4438: LD_VAR 0 7
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_VAR 0 7
4451: PUSH
4452: LD_INT 2
4454: ARRAY
4455: PPUSH
4456: CALL_OW 111
// continue ;
4460: GO 3911
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4462: LD_VAR 0 9
4466: PPUSH
4467: LD_VAR 0 25
4471: PPUSH
4472: LD_VAR 0 9
4476: PPUSH
4477: CALL_OW 74
4481: PPUSH
4482: CALL_OW 115
// end else
4486: GO 4629
// if tag = tVehRepair then
4488: LD_VAR 0 19
4492: PUSH
4493: LD_INT 9
4495: EQUAL
4496: IFFALSE 4629
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4498: LD_VAR 0 9
4502: PPUSH
4503: LD_VAR 0 7
4507: PUSH
4508: LD_INT 1
4510: ARRAY
4511: PPUSH
4512: LD_VAR 0 7
4516: PUSH
4517: LD_INT 2
4519: ARRAY
4520: PPUSH
4521: CALL_OW 297
4525: PUSH
4526: LD_INT 10
4528: GREATER
4529: IFFALSE 4560
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4531: LD_VAR 0 9
4535: PPUSH
4536: LD_VAR 0 7
4540: PUSH
4541: LD_INT 1
4543: ARRAY
4544: PPUSH
4545: LD_VAR 0 7
4549: PUSH
4550: LD_INT 2
4552: ARRAY
4553: PPUSH
4554: CALL_OW 111
// continue ;
4558: GO 3911
// end ; if GetLives ( i ) = 1000 then
4560: LD_VAR 0 9
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4589
// begin SetTag ( i , tBusy ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: LD_INT 8
4582: PPUSH
4583: CALL_OW 109
// continue ;
4587: GO 3911
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4589: LD_VAR 0 9
4593: PPUSH
4594: CALL_OW 263
4598: PUSH
4599: LD_INT 1
4601: EQUAL
4602: PUSH
4603: LD_VAR 0 9
4607: PPUSH
4608: CALL_OW 311
4612: AND
4613: IFFALSE 4629
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4615: LD_VAR 0 9
4619: PPUSH
4620: CALL_OW 311
4624: PPUSH
4625: CALL 55079 0 1
// end ; end ;
4629: GO 3911
4631: POP
4632: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4633: LD_ADDR_VAR 0 23
4637: PUSH
4638: LD_VAR 0 5
4642: PPUSH
4643: LD_INT 2
4645: PUSH
4646: LD_INT 25
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 25
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 25
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 9
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 50
4695: PUSH
4696: EMPTY
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 72
4707: ST_TO_ADDR
// if sol then
4708: LD_VAR 0 23
4712: IFFALSE 5220
// begin if enemyInBase then
4714: LD_VAR 0 26
4718: IFFALSE 4897
// begin for i in sol do
4720: LD_ADDR_VAR 0 9
4724: PUSH
4725: LD_VAR 0 23
4729: PUSH
4730: FOR_IN
4731: IFFALSE 4893
// begin tw := IsInUnit ( i ) ;
4733: LD_ADDR_VAR 0 20
4737: PUSH
4738: LD_VAR 0 9
4742: PPUSH
4743: CALL_OW 310
4747: ST_TO_ADDR
// if tw then
4748: LD_VAR 0 20
4752: IFFALSE 4835
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4754: LD_VAR 0 20
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 101
4773: PUSH
4774: LD_VAR 0 38
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: LD_INT 32
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 30
4798: PUSH
4799: LD_INT 31
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PPUSH
4816: CALL_OW 69
4820: IN
4821: NOT
4822: IFFALSE 4833
// ComExitBuilding ( i ) ;
4824: LD_VAR 0 9
4828: PPUSH
4829: CALL_OW 122
// end else
4833: GO 4891
// if IsInArea ( i , area ) then
4835: LD_VAR 0 9
4839: PPUSH
4840: LD_VAR 0 3
4844: PPUSH
4845: CALL_OW 308
4849: IFFALSE 4877
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4851: LD_VAR 0 9
4855: PPUSH
4856: LD_VAR 0 26
4860: PPUSH
4861: LD_VAR 0 9
4865: PPUSH
4866: CALL_OW 74
4870: PPUSH
4871: CALL_OW 115
4875: GO 4891
// ComMoveToArea ( i , area ) ;
4877: LD_VAR 0 9
4881: PPUSH
4882: LD_VAR 0 3
4886: PPUSH
4887: CALL_OW 113
// end ;
4891: GO 4730
4893: POP
4894: POP
// end else
4895: GO 5220
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4897: LD_ADDR_VAR 0 32
4901: PUSH
4902: LD_VAR 0 3
4906: PPUSH
4907: LD_INT 3
4909: PUSH
4910: LD_INT 62
4912: PUSH
4913: EMPTY
4914: LIST
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 2
4922: PUSH
4923: LD_INT 30
4925: PUSH
4926: LD_INT 32
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 30
4935: PUSH
4936: LD_INT 4
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: LD_INT 30
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 30
4955: PUSH
4956: LD_INT 31
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: ST_TO_ADDR
// if empty then
4979: LD_VAR 0 32
4983: IFFALSE 5000
// empty := ReverseArray ( empty ) ;
4985: LD_ADDR_VAR 0 32
4989: PUSH
4990: LD_VAR 0 32
4994: PPUSH
4995: CALL 48646 0 1
4999: ST_TO_ADDR
// for i in sol do
5000: LD_ADDR_VAR 0 9
5004: PUSH
5005: LD_VAR 0 23
5009: PUSH
5010: FOR_IN
5011: IFFALSE 5218
// begin tag := GetTag ( i ) ;
5013: LD_ADDR_VAR 0 19
5017: PUSH
5018: LD_VAR 0 9
5022: PPUSH
5023: CALL_OW 110
5027: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
5028: LD_VAR 0 9
5032: PPUSH
5033: CALL_OW 256
5037: PUSH
5038: LD_INT 1000
5040: LESS
5041: PUSH
5042: LD_VAR 0 19
5046: PUSH
5047: LD_INT 1
5049: NONEQUAL
5050: AND
5051: IFFALSE 5103
// begin SetTag ( i , tHeal ) ;
5053: LD_VAR 0 9
5057: PPUSH
5058: LD_INT 1
5060: PPUSH
5061: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5065: LD_VAR 0 9
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: ARRAY
5078: PPUSH
5079: LD_VAR 0 6
5083: PUSH
5084: LD_INT 2
5086: ARRAY
5087: PPUSH
5088: CALL_OW 111
// AddComHold ( i ) ;
5092: LD_VAR 0 9
5096: PPUSH
5097: CALL_OW 200
// continue ;
5101: GO 5010
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5103: LD_VAR 0 9
5107: PPUSH
5108: CALL_OW 256
5112: PUSH
5113: LD_INT 1000
5115: EQUAL
5116: PUSH
5117: LD_VAR 0 19
5121: PUSH
5122: LD_INT 1
5124: EQUAL
5125: AND
5126: IFFALSE 5142
// begin SetTag ( i , 0 ) ;
5128: LD_VAR 0 9
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL_OW 109
// continue ;
5140: GO 5010
// end ; if HasTask ( i ) then
5142: LD_VAR 0 9
5146: PPUSH
5147: CALL_OW 314
5151: IFFALSE 5155
// continue ;
5153: GO 5010
// if not IsInUnit ( i ) and not tag and empty then
5155: LD_VAR 0 9
5159: PPUSH
5160: CALL_OW 310
5164: NOT
5165: PUSH
5166: LD_VAR 0 19
5170: NOT
5171: AND
5172: PUSH
5173: LD_VAR 0 32
5177: AND
5178: IFFALSE 5216
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5180: LD_VAR 0 9
5184: PPUSH
5185: LD_VAR 0 32
5189: PUSH
5190: LD_INT 1
5192: ARRAY
5193: PPUSH
5194: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5198: LD_ADDR_VAR 0 32
5202: PUSH
5203: LD_VAR 0 32
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 3
5215: ST_TO_ADDR
// end ; end ;
5216: GO 5010
5218: POP
5219: POP
// end ; end ; end ;
5220: LD_VAR 0 8
5224: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5225: LD_EXP 14
5229: PPUSH
5230: LD_INT 50
5232: PUSH
5233: EMPTY
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: IFFALSE 5293
5242: GO 5244
5244: DISABLE
// begin enable ;
5245: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5246: LD_EXP 3
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_EXP 14
5268: PPUSH
5269: LD_INT 109
5271: PUSH
5272: LD_INT 43
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: LD_INT 112
5281: PUSH
5282: LD_INT 52
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PPUSH
5289: CALL 1265 0 7
// end ;
5293: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
5294: LD_EXP 13
5298: IFFALSE 5526
5300: GO 5302
5302: DISABLE
5303: LD_INT 0
5305: PPUSH
5306: PPUSH
5307: PPUSH
// begin enable ;
5308: ENABLE
// p := 1 ;
5309: LD_ADDR_VAR 0 2
5313: PUSH
5314: LD_INT 1
5316: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_EXP 13
5331: PPUSH
5332: CALL 17770 0 1
5336: PUSH
5337: LD_INT 2
5339: DIV
5340: PUSH
5341: FOR_TO
5342: IFFALSE 5524
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_EXP 13
5353: PUSH
5354: LD_VAR 0 2
5358: ARRAY
5359: PPUSH
5360: LD_EXP 13
5364: PUSH
5365: LD_VAR 0 2
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: ARRAY
5374: PPUSH
5375: CALL_OW 428
5379: ST_TO_ADDR
// if tmp then
5380: LD_VAR 0 3
5384: IFFALSE 5508
// begin if not GetSide ( tmp ) in [ 0 , botSides [ 1 ] ] then
5386: LD_VAR 0 3
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_INT 0
5398: PUSH
5399: LD_EXP 3
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: IN
5412: NOT
5413: IFFALSE 5508
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5415: LD_EXP 13
5419: PUSH
5420: LD_VAR 0 2
5424: ARRAY
5425: PPUSH
5426: LD_EXP 13
5430: PUSH
5431: LD_VAR 0 2
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: ARRAY
5440: PPUSH
5441: LD_EXP 3
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5454: LD_ADDR_EXP 13
5458: PUSH
5459: LD_EXP 13
5463: PPUSH
5464: LD_VAR 0 2
5468: PPUSH
5469: CALL_OW 3
5473: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5474: LD_ADDR_EXP 13
5478: PUSH
5479: LD_EXP 13
5483: PPUSH
5484: LD_VAR 0 2
5488: PPUSH
5489: CALL_OW 3
5493: ST_TO_ADDR
// p := p - 2 ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: LD_VAR 0 2
5503: PUSH
5504: LD_INT 2
5506: MINUS
5507: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_VAR 0 2
5517: PUSH
5518: LD_INT 2
5520: PLUS
5521: ST_TO_ADDR
// end ;
5522: GO 5341
5524: POP
5525: POP
// end ;
5526: PPOPN 3
5528: END
// every 6 6$00 trigger IsOk ( arDep ) do var un ;
5529: LD_INT 2
5531: PPUSH
5532: CALL_OW 302
5536: IFFALSE 5857
5538: GO 5540
5540: DISABLE
5541: LD_INT 0
5543: PPUSH
// begin enable ;
5544: ENABLE
// if UnitsInside ( arFac ) < 3 then
5545: LD_INT 12
5547: PPUSH
5548: CALL_OW 313
5552: PUSH
5553: LD_INT 3
5555: LESS
5556: IFFALSE 5685
// begin arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
5558: LD_ADDR_EXP 11
5562: PUSH
5563: LD_EXP 11
5567: PPUSH
5568: CALL 54762 0 1
5572: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
5573: LD_ADDR_OWVAR 20
5577: PUSH
5578: LD_EXP 3
5582: PUSH
5583: LD_INT 1
5585: ARRAY
5586: ST_TO_ADDR
// uc_nation := nation_arabian ;
5587: LD_ADDR_OWVAR 21
5591: PUSH
5592: LD_INT 2
5594: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
5595: LD_INT 0
5597: PPUSH
5598: LD_INT 3
5600: PUSH
5601: LD_INT 6
5603: PUSH
5604: LD_INT 9
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: PUSH
5612: LD_OWVAR 67
5616: ARRAY
5617: PPUSH
5618: CALL_OW 383
// un := CreateHuman ;
5622: LD_ADDR_VAR 0 1
5626: PUSH
5627: CALL_OW 44
5631: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
5632: LD_VAR 0 1
5636: PPUSH
5637: LD_INT 143
5639: PPUSH
5640: LD_INT 29
5642: PPUSH
5643: LD_INT 0
5645: PPUSH
5646: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: LD_INT 115
5657: PPUSH
5658: LD_INT 52
5660: PPUSH
5661: CALL_OW 111
// arForce := Join ( arForce , un ) ;
5665: LD_ADDR_EXP 14
5669: PUSH
5670: LD_EXP 14
5674: PPUSH
5675: LD_VAR 0 1
5679: PPUSH
5680: CALL 53379 0 2
5684: ST_TO_ADDR
// end ; arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5685: LD_ADDR_EXP 6
5689: PUSH
5690: LD_EXP 6
5694: PUSH
5695: LD_INT 14
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: LD_INT 2
5703: PUSH
5704: LD_INT 27
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 14
5715: PUSH
5716: LD_INT 1
5718: PUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 28
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: PUSH
5731: LD_INT 14
5733: PUSH
5734: LD_INT 1
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: LD_INT 28
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: ADD
5754: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5755: LD_OWVAR 67
5759: PUSH
5760: LD_INT 1
5762: GREATER
5763: PUSH
5764: LD_INT 72
5766: PPUSH
5767: LD_EXP 3
5771: PUSH
5772: LD_INT 1
5774: ARRAY
5775: PPUSH
5776: CALL_OW 321
5780: PUSH
5781: LD_INT 2
5783: EQUAL
5784: AND
5785: IFFALSE 5857
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5787: LD_ADDR_EXP 6
5791: PUSH
5792: LD_EXP 6
5796: PUSH
5797: LD_INT 14
5799: PUSH
5800: LD_INT 3
5802: PUSH
5803: LD_INT 2
5805: PUSH
5806: LD_INT 29
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 14
5817: PUSH
5818: LD_INT 3
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: LD_INT 29
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 14
5835: PUSH
5836: LD_INT 3
5838: PUSH
5839: LD_INT 2
5841: PUSH
5842: LD_INT 29
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: ADD
5856: ST_TO_ADDR
// end ; end_of_file
5857: PPOPN 1
5859: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5860: LD_INT 0
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// mpGameType := GameTypeCoop ;
5867: LD_ADDR_EXP 41
5871: PUSH
5872: LD_INT 4
5874: ST_TO_ADDR
// multi_settings_counter := 6 ;
5875: LD_ADDR_EXP 29
5879: PUSH
5880: LD_INT 6
5882: ST_TO_ADDR
// multi_settings := [ ] ;
5883: LD_ADDR_EXP 28
5887: PUSH
5888: EMPTY
5889: ST_TO_ADDR
// if Multiplayer then
5890: LD_OWVAR 4
5894: IFFALSE 6074
// begin your_side := mp_player_side ;
5896: LD_ADDR_OWVAR 2
5900: PUSH
5901: LD_OWVAR 7
5905: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5906: LD_ADDR_EXP 17
5910: PUSH
5911: LD_OWVAR 6
5915: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5916: LD_ADDR_EXP 18
5920: PUSH
5921: LD_OWVAR 17
5925: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5926: LD_ADDR_EXP 19
5930: PUSH
5931: LD_OWVAR 15
5935: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5936: LD_ADDR_EXP 20
5940: PUSH
5941: LD_OWVAR 16
5945: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5946: LD_ADDR_EXP 21
5950: PUSH
5951: EMPTY
5952: PUSH
5953: EMPTY
5954: LIST
5955: ST_TO_ADDR
// for i in mp_teams do
5956: LD_ADDR_VAR 0 2
5960: PUSH
5961: LD_OWVAR 12
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6010
// if i then
5969: LD_VAR 0 2
5973: IFFALSE 6008
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5975: LD_ADDR_EXP 21
5979: PUSH
5980: LD_EXP 21
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: LD_EXP 21
5992: PUSH
5993: LD_INT 1
5995: ARRAY
5996: PUSH
5997: LD_VAR 0 2
6001: UNION
6002: PPUSH
6003: CALL_OW 1
6007: ST_TO_ADDR
6008: GO 5966
6010: POP
6011: POP
// for i := 1 to multi_settings_counter do
6012: LD_ADDR_VAR 0 2
6016: PUSH
6017: DOUBLE
6018: LD_INT 1
6020: DEC
6021: ST_TO_ADDR
6022: LD_EXP 29
6026: PUSH
6027: FOR_TO
6028: IFFALSE 6070
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
6030: LD_ADDR_EXP 28
6034: PUSH
6035: LD_EXP 28
6039: PPUSH
6040: LD_EXP 28
6044: PUSH
6045: LD_INT 1
6047: PLUS
6048: PPUSH
6049: LD_VAR 0 2
6053: PPUSH
6054: CALL_OW 426
6058: PUSH
6059: LD_INT 1
6061: PLUS
6062: PPUSH
6063: CALL_OW 1
6067: ST_TO_ADDR
6068: GO 6027
6070: POP
6071: POP
// end else
6072: GO 6260
// begin your_side := 3 ;
6074: LD_ADDR_OWVAR 2
6078: PUSH
6079: LD_INT 3
6081: ST_TO_ADDR
// multi_gametype := 1 ;
6082: LD_ADDR_EXP 17
6086: PUSH
6087: LD_INT 1
6089: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
6090: LD_ADDR_EXP 18
6094: PUSH
6095: LD_INT 0
6097: PUSH
6098: LD_INT 0
6100: PUSH
6101: LD_INT 1
6103: PUSH
6104: LD_INT 2
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
6129: LD_ADDR_EXP 19
6133: PUSH
6134: LD_INT 0
6136: PUSH
6137: LD_INT 0
6139: PUSH
6140: LD_INT 1
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: LD_INT 1
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
6168: LD_ADDR_EXP 20
6172: PUSH
6173: LD_INT 0
6175: PUSH
6176: LD_INT 0
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: LD_INT 0
6190: PUSH
6191: LD_INT 0
6193: PUSH
6194: LD_INT 0
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6207: LD_ADDR_EXP 21
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6229: LD_ADDR_EXP 28
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: LD_INT 4
6239: PUSH
6240: LD_INT 4
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: LD_INT 2
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
6260: LD_ADDR_EXP 42
6264: PUSH
6265: LD_EXP 18
6269: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6270: LD_ADDR_EXP 22
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: LD_INT 0
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6309: LD_ADDR_EXP 25
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: LD_INT 0
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: LD_INT 0
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6348: LD_ADDR_EXP 36
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: LD_INT 0
6364: PUSH
6365: LD_INT 0
6367: PUSH
6368: LD_INT 0
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: LD_INT 0
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: ST_TO_ADDR
// multi_teamgame := true ;
6387: LD_ADDR_EXP 26
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6395: LD_ADDR_EXP 24
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: EMPTY
6404: LIST
6405: ST_TO_ADDR
// multi_custom_commanders := true ;
6406: LD_ADDR_EXP 27
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// multi_commanders := [ ] ;
6414: LD_ADDR_EXP 35
6418: PUSH
6419: EMPTY
6420: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6421: LD_ADDR_EXP 38
6425: PUSH
6426: EMPTY
6427: ST_TO_ADDR
// multi_players_amount := 0 ;
6428: LD_ADDR_EXP 37
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6436: LD_ADDR_EXP 23
6440: PUSH
6441: LD_INT 5
6443: PUSH
6444: LD_INT 6
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 7
6453: PUSH
6454: LD_INT 8
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 9
6463: PUSH
6464: LD_INT 10
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6476: LD_ADDR_EXP 40
6480: PUSH
6481: EMPTY
6482: PUSH
6483: EMPTY
6484: PUSH
6485: EMPTY
6486: PUSH
6487: EMPTY
6488: PUSH
6489: EMPTY
6490: PUSH
6491: EMPTY
6492: PUSH
6493: EMPTY
6494: PUSH
6495: EMPTY
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: ST_TO_ADDR
// for i := 1 to 8 do
6507: LD_ADDR_VAR 0 2
6511: PUSH
6512: DOUBLE
6513: LD_INT 1
6515: DEC
6516: ST_TO_ADDR
6517: LD_INT 8
6519: PUSH
6520: FOR_TO
6521: IFFALSE 6850
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6523: LD_VAR 0 2
6527: PPUSH
6528: CALL_OW 530
6532: IFFALSE 6690
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6534: LD_ADDR_EXP 22
6538: PUSH
6539: LD_EXP 22
6543: PPUSH
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_INT 1
6551: PPUSH
6552: CALL_OW 1
6556: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6557: LD_ADDR_EXP 20
6561: PUSH
6562: LD_EXP 20
6566: PPUSH
6567: LD_VAR 0 2
6571: PPUSH
6572: LD_INT 0
6574: PPUSH
6575: CALL_OW 1
6579: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6580: LD_ADDR_EXP 18
6584: PUSH
6585: LD_EXP 18
6589: PPUSH
6590: LD_VAR 0 2
6594: PPUSH
6595: LD_INT 0
6597: PPUSH
6598: CALL_OW 1
6602: ST_TO_ADDR
// for j = 1 to multi_teams do
6603: LD_ADDR_VAR 0 3
6607: PUSH
6608: DOUBLE
6609: LD_INT 1
6611: DEC
6612: ST_TO_ADDR
6613: LD_EXP 21
6617: PUSH
6618: FOR_TO
6619: IFFALSE 6688
// begin if i in multi_teams [ j ] then
6621: LD_VAR 0 2
6625: PUSH
6626: LD_EXP 21
6630: PUSH
6631: LD_VAR 0 3
6635: ARRAY
6636: IN
6637: IFFALSE 6686
// begin tmp := multi_teams [ j ] diff i ;
6639: LD_ADDR_VAR 0 5
6643: PUSH
6644: LD_EXP 21
6648: PUSH
6649: LD_VAR 0 3
6653: ARRAY
6654: PUSH
6655: LD_VAR 0 2
6659: DIFF
6660: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6661: LD_ADDR_EXP 21
6665: PUSH
6666: LD_EXP 21
6670: PPUSH
6671: LD_VAR 0 3
6675: PPUSH
6676: LD_VAR 0 5
6680: PPUSH
6681: CALL_OW 1
6685: ST_TO_ADDR
// end ; end ;
6686: GO 6618
6688: POP
6689: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6690: LD_EXP 20
6694: PUSH
6695: LD_VAR 0 2
6699: ARRAY
6700: PUSH
6701: LD_EXP 20
6705: PUSH
6706: LD_VAR 0 2
6710: ARRAY
6711: PUSH
6712: LD_EXP 24
6716: IN
6717: NOT
6718: AND
6719: IFFALSE 6760
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6721: LD_ADDR_EXP 20
6725: PUSH
6726: LD_EXP 20
6730: PPUSH
6731: LD_VAR 0 2
6735: PPUSH
6736: LD_EXP 24
6740: PUSH
6741: LD_INT 1
6743: PPUSH
6744: LD_EXP 24
6748: PPUSH
6749: CALL_OW 12
6753: ARRAY
6754: PPUSH
6755: CALL_OW 1
6759: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6760: LD_EXP 20
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: NOT
6771: PUSH
6772: LD_EXP 18
6776: PUSH
6777: LD_VAR 0 2
6781: ARRAY
6782: NOT
6783: AND
6784: PUSH
6785: LD_EXP 22
6789: PUSH
6790: LD_VAR 0 2
6794: ARRAY
6795: NOT
6796: AND
6797: IFFALSE 6822
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6799: LD_ADDR_EXP 25
6803: PUSH
6804: LD_EXP 25
6808: PPUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: LD_INT 1
6816: PPUSH
6817: CALL_OW 1
6821: ST_TO_ADDR
// if multi_sides [ i ] then
6822: LD_EXP 18
6826: PUSH
6827: LD_VAR 0 2
6831: ARRAY
6832: IFFALSE 6848
// multi_players_amount := multi_players_amount + 1 ;
6834: LD_ADDR_EXP 37
6838: PUSH
6839: LD_EXP 37
6843: PUSH
6844: LD_INT 1
6846: PLUS
6847: ST_TO_ADDR
// end ;
6848: GO 6520
6850: POP
6851: POP
// for i in multi_teams do
6852: LD_ADDR_VAR 0 2
6856: PUSH
6857: LD_EXP 21
6861: PUSH
6862: FOR_IN
6863: IFFALSE 6971
// begin for j = 2 to i do
6865: LD_ADDR_VAR 0 3
6869: PUSH
6870: DOUBLE
6871: LD_INT 2
6873: DEC
6874: ST_TO_ADDR
6875: LD_VAR 0 2
6879: PUSH
6880: FOR_TO
6881: IFFALSE 6967
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6883: LD_VAR 0 2
6887: PUSH
6888: LD_VAR 0 3
6892: ARRAY
6893: PPUSH
6894: LD_VAR 0 2
6898: PUSH
6899: LD_INT 1
6901: ARRAY
6902: PPUSH
6903: CALL_OW 343
// for x = 1 to j - 1 do
6907: LD_ADDR_VAR 0 4
6911: PUSH
6912: DOUBLE
6913: LD_INT 1
6915: DEC
6916: ST_TO_ADDR
6917: LD_VAR 0 3
6921: PUSH
6922: LD_INT 1
6924: MINUS
6925: PUSH
6926: FOR_TO
6927: IFFALSE 6963
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6929: LD_VAR 0 2
6933: PUSH
6934: LD_VAR 0 3
6938: ARRAY
6939: PPUSH
6940: LD_VAR 0 2
6944: PUSH
6945: LD_VAR 0 4
6949: ARRAY
6950: PPUSH
6951: LD_INT 1
6953: PPUSH
6954: LD_INT 1
6956: PPUSH
6957: CALL_OW 80
6961: GO 6926
6963: POP
6964: POP
// end ;
6965: GO 6880
6967: POP
6968: POP
// end ;
6969: GO 6862
6971: POP
6972: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6973: LD_ADDR_OWVAR 67
6977: PUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: LD_EXP 28
6996: PUSH
6997: LD_INT 1
6999: ARRAY
7000: ARRAY
7001: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
7002: LD_ADDR_EXP 30
7006: PUSH
7007: LD_INT 9
7009: PUSH
7010: LD_INT 12
7012: PUSH
7013: LD_INT 15
7015: PUSH
7016: LD_INT 18
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: PUSH
7025: LD_EXP 28
7029: PUSH
7030: LD_INT 2
7032: ARRAY
7033: ARRAY
7034: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
7035: LD_ADDR_EXP 31
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: LD_INT 2
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: LD_INT 5
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: LD_EXP 28
7062: PUSH
7063: LD_INT 3
7065: ARRAY
7066: ARRAY
7067: ST_TO_ADDR
// multi_crates_spawn := [ [ 5000 , 0 0$32 ] , [ 8000 , 0 0$22 ] , [ 11000 , 0 0$14 ] , [ 14000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
7068: LD_ADDR_EXP 32
7072: PUSH
7073: LD_INT 5000
7075: PUSH
7076: LD_INT 1120
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 8000
7085: PUSH
7086: LD_INT 770
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: LD_INT 11000
7095: PUSH
7096: LD_INT 490
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 14000
7105: PUSH
7106: LD_INT 420
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_EXP 28
7123: PUSH
7124: LD_INT 4
7126: ARRAY
7127: ARRAY
7128: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
7129: LD_ADDR_EXP 33
7133: PUSH
7134: LD_INT 0
7136: PUSH
7137: LD_INT 1
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: LD_EXP 28
7156: PUSH
7157: LD_INT 5
7159: ARRAY
7160: ARRAY
7161: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
7162: LD_ADDR_EXP 34
7166: PUSH
7167: LD_INT 0
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PUSH
7181: LD_EXP 28
7185: PUSH
7186: LD_INT 6
7188: ARRAY
7189: ARRAY
7190: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7191: LD_ADDR_EXP 39
7195: PUSH
7196: LD_INT 10500
7198: PUSH
7199: LD_INT 31500
7201: PUSH
7202: LD_INT 52500
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: LD_OWVAR 67
7214: ARRAY
7215: ST_TO_ADDR
// end ;
7216: LD_VAR 0 1
7220: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7221: LD_INT 0
7223: PPUSH
7224: PPUSH
// if not multi_sides [ preferSide ] then
7225: LD_EXP 18
7229: PUSH
7230: LD_VAR 0 1
7234: ARRAY
7235: NOT
7236: IFFALSE 7250
// begin result := preferSide ;
7238: LD_ADDR_VAR 0 2
7242: PUSH
7243: LD_VAR 0 1
7247: ST_TO_ADDR
// exit ;
7248: GO 7297
// end ; for i := 1 to 8 do
7250: LD_ADDR_VAR 0 3
7254: PUSH
7255: DOUBLE
7256: LD_INT 1
7258: DEC
7259: ST_TO_ADDR
7260: LD_INT 8
7262: PUSH
7263: FOR_TO
7264: IFFALSE 7295
// if not multi_sides [ i ] then
7266: LD_EXP 18
7270: PUSH
7271: LD_VAR 0 3
7275: ARRAY
7276: NOT
7277: IFFALSE 7293
// begin result := i ;
7279: LD_ADDR_VAR 0 2
7283: PUSH
7284: LD_VAR 0 3
7288: ST_TO_ADDR
// exit ;
7289: POP
7290: POP
7291: GO 7297
// end ;
7293: GO 7263
7295: POP
7296: POP
// end ;
7297: LD_VAR 0 2
7301: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7302: LD_INT 0
7304: PPUSH
// uc_side := side ;
7305: LD_ADDR_OWVAR 20
7309: PUSH
7310: LD_VAR 0 1
7314: ST_TO_ADDR
// uc_nation := nation_russian ;
7315: LD_ADDR_OWVAR 21
7319: PUSH
7320: LD_INT 3
7322: ST_TO_ADDR
// hc_importance := 100 ;
7323: LD_ADDR_OWVAR 32
7327: PUSH
7328: LD_INT 100
7330: ST_TO_ADDR
// if num = 1 then
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 1
7338: EQUAL
7339: IFFALSE 7406
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7341: LD_INT 1
7343: PPUSH
7344: LD_EXP 31
7348: PUSH
7349: LD_INT 1
7351: PLUS
7352: PPUSH
7353: CALL_OW 381
// hc_gallery := ru ;
7357: LD_ADDR_OWVAR 33
7361: PUSH
7362: LD_STRING ru
7364: ST_TO_ADDR
// hc_face_number := 25 ;
7365: LD_ADDR_OWVAR 34
7369: PUSH
7370: LD_INT 25
7372: ST_TO_ADDR
// hc_name := Xavier ;
7373: LD_ADDR_OWVAR 26
7377: PUSH
7378: LD_STRING Xavier
7380: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7381: LD_ADDR_OWVAR 29
7385: PUSH
7386: LD_INT 12
7388: PUSH
7389: LD_INT 10
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: ST_TO_ADDR
// result := CreateHuman ;
7396: LD_ADDR_VAR 0 3
7400: PUSH
7401: CALL_OW 44
7405: ST_TO_ADDR
// end ; if num = 2 then
7406: LD_VAR 0 2
7410: PUSH
7411: LD_INT 2
7413: EQUAL
7414: IFFALSE 7481
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7416: LD_INT 1
7418: PPUSH
7419: LD_EXP 31
7423: PUSH
7424: LD_INT 2
7426: PLUS
7427: PPUSH
7428: CALL_OW 383
// hc_gallery := ru ;
7432: LD_ADDR_OWVAR 33
7436: PUSH
7437: LD_STRING ru
7439: ST_TO_ADDR
// hc_face_number := 1 ;
7440: LD_ADDR_OWVAR 34
7444: PUSH
7445: LD_INT 1
7447: ST_TO_ADDR
// hc_name := Burlak ;
7448: LD_ADDR_OWVAR 26
7452: PUSH
7453: LD_STRING Burlak
7455: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7456: LD_ADDR_OWVAR 29
7460: PUSH
7461: LD_INT 10
7463: PUSH
7464: LD_INT 11
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: ST_TO_ADDR
// result := CreateHuman ;
7471: LD_ADDR_VAR 0 3
7475: PUSH
7476: CALL_OW 44
7480: ST_TO_ADDR
// end ; if num = 3 then
7481: LD_VAR 0 2
7485: PUSH
7486: LD_INT 3
7488: EQUAL
7489: IFFALSE 7556
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7491: LD_INT 1
7493: PPUSH
7494: LD_EXP 31
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: PPUSH
7503: CALL_OW 381
// hc_gallery := ru ;
7507: LD_ADDR_OWVAR 33
7511: PUSH
7512: LD_STRING ru
7514: ST_TO_ADDR
// hc_face_number := 18 ;
7515: LD_ADDR_OWVAR 34
7519: PUSH
7520: LD_INT 18
7522: ST_TO_ADDR
// hc_name := Vsevolod ;
7523: LD_ADDR_OWVAR 26
7527: PUSH
7528: LD_STRING Vsevolod
7530: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7531: LD_ADDR_OWVAR 29
7535: PUSH
7536: LD_INT 12
7538: PUSH
7539: LD_INT 11
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: ST_TO_ADDR
// result := CreateHuman ;
7546: LD_ADDR_VAR 0 3
7550: PUSH
7551: CALL_OW 44
7555: ST_TO_ADDR
// end ; end ;
7556: LD_VAR 0 3
7560: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7561: LD_INT 0
7563: PPUSH
7564: PPUSH
7565: PPUSH
// if not multi_apeman then
7566: LD_EXP 33
7570: NOT
7571: IFFALSE 7575
// exit ;
7573: GO 7653
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7575: LD_ADDR_VAR 0 3
7579: PUSH
7580: LD_INT 6
7582: PUSH
7583: LD_INT 9
7585: PUSH
7586: LD_INT 12
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_EXP 33
7598: ARRAY
7599: ST_TO_ADDR
// for i := 1 to tmp do
7600: LD_ADDR_VAR 0 2
7604: PUSH
7605: DOUBLE
7606: LD_INT 1
7608: DEC
7609: ST_TO_ADDR
7610: LD_VAR 0 3
7614: PUSH
7615: FOR_TO
7616: IFFALSE 7651
// begin uc_side := 0 ;
7618: LD_ADDR_OWVAR 20
7622: PUSH
7623: LD_INT 0
7625: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7626: LD_INT 5
7628: NEG
7629: PPUSH
7630: CALL 49627 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7634: CALL_OW 44
7638: PPUSH
7639: LD_INT 21
7641: PPUSH
7642: LD_INT 0
7644: PPUSH
7645: CALL_OW 49
// end ;
7649: GO 7615
7651: POP
7652: POP
// end ;
7653: LD_VAR 0 1
7657: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7658: LD_INT 0
7660: PPUSH
7661: PPUSH
7662: PPUSH
7663: PPUSH
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
7668: PPUSH
7669: PPUSH
// for i := 1 to 8 do
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: DOUBLE
7676: LD_INT 1
7678: DEC
7679: ST_TO_ADDR
7680: LD_INT 8
7682: PUSH
7683: FOR_TO
7684: IFFALSE 8864
// begin if not multi_sides [ i ] then
7686: LD_EXP 18
7690: PUSH
7691: LD_VAR 0 2
7695: ARRAY
7696: NOT
7697: IFFALSE 7701
// continue ;
7699: GO 7683
// if multi_buildings [ multi_sides [ i ] ] then
7701: LD_EXP 40
7705: PUSH
7706: LD_EXP 18
7710: PUSH
7711: LD_VAR 0 2
7715: ARRAY
7716: ARRAY
7717: IFFALSE 7951
// begin uc_side := i ;
7719: LD_ADDR_OWVAR 20
7723: PUSH
7724: LD_VAR 0 2
7728: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7729: LD_ADDR_OWVAR 21
7733: PUSH
7734: LD_EXP 20
7738: PUSH
7739: LD_VAR 0 2
7743: ARRAY
7744: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7745: LD_ADDR_VAR 0 3
7749: PUSH
7750: LD_EXP 40
7754: PUSH
7755: LD_EXP 18
7759: PUSH
7760: LD_VAR 0 2
7764: ARRAY
7765: ARRAY
7766: PUSH
7767: FOR_IN
7768: IFFALSE 7949
// begin bc_type := j [ 1 ] ;
7770: LD_ADDR_OWVAR 42
7774: PUSH
7775: LD_VAR 0 3
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: ST_TO_ADDR
// bc_level := 2 ;
7784: LD_ADDR_OWVAR 43
7788: PUSH
7789: LD_INT 2
7791: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7792: LD_ADDR_VAR 0 4
7796: PUSH
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 2
7804: ARRAY
7805: PUSH
7806: LD_INT 1
7808: ARRAY
7809: PPUSH
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 2
7817: ARRAY
7818: PUSH
7819: LD_INT 2
7821: ARRAY
7822: PPUSH
7823: LD_VAR 0 3
7827: PUSH
7828: LD_INT 2
7830: ARRAY
7831: PUSH
7832: LD_INT 3
7834: ARRAY
7835: PPUSH
7836: CALL_OW 47
7840: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7841: LD_VAR 0 3
7845: PUSH
7846: LD_INT 1
7848: ARRAY
7849: PUSH
7850: LD_INT 0
7852: EQUAL
7853: IFFALSE 7947
// begin SetBName ( b , j [ 3 ] ) ;
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_VAR 0 3
7864: PUSH
7865: LD_INT 3
7867: ARRAY
7868: PPUSH
7869: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7873: LD_VAR 0 4
7877: PPUSH
7878: CALL_OW 274
7882: PPUSH
7883: LD_INT 1
7885: PPUSH
7886: LD_INT 120
7888: PUSH
7889: LD_INT 100
7891: PUSH
7892: LD_INT 80
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: LD_OWVAR 67
7904: ARRAY
7905: PPUSH
7906: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7910: LD_VAR 0 4
7914: PPUSH
7915: CALL_OW 274
7919: PPUSH
7920: LD_INT 2
7922: PPUSH
7923: LD_INT 90
7925: PUSH
7926: LD_INT 60
7928: PUSH
7929: LD_INT 30
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PUSH
7937: LD_OWVAR 67
7941: ARRAY
7942: PPUSH
7943: CALL_OW 277
// end ; end ;
7947: GO 7767
7949: POP
7950: POP
// end ; if multi_custom_commanders then
7951: LD_EXP 27
7955: IFFALSE 8164
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7957: LD_ADDR_VAR 0 6
7961: PUSH
7962: LD_VAR 0 2
7966: PPUSH
7967: LD_EXP 18
7971: PUSH
7972: LD_VAR 0 2
7976: ARRAY
7977: PPUSH
7978: CALL 7302 0 2
7982: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7983: LD_ADDR_EXP 35
7987: PUSH
7988: LD_EXP 35
7992: PPUSH
7993: LD_EXP 35
7997: PUSH
7998: LD_INT 1
8000: PLUS
8001: PPUSH
8002: LD_VAR 0 6
8006: PPUSH
8007: CALL_OW 2
8011: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
8012: LD_VAR 0 6
8016: PPUSH
8017: CALL_OW 257
8021: PUSH
8022: LD_INT 3
8024: EQUAL
8025: IFFALSE 8129
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
8027: LD_INT 23
8029: PPUSH
8030: LD_INT 1
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: LD_INT 46
8038: PPUSH
8039: LD_INT 80
8041: PPUSH
8042: CALL 20508 0 5
// veh := CreateVehicle ;
8046: LD_ADDR_VAR 0 7
8050: PUSH
8051: CALL_OW 45
8055: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
8056: LD_VAR 0 7
8060: PPUSH
8061: LD_VAR 0 6
8065: PPUSH
8066: CALL_OW 255
8070: PUSH
8071: LD_INT 1
8073: NEG
8074: MUL
8075: PPUSH
8076: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8080: LD_VAR 0 7
8084: PPUSH
8085: LD_EXP 23
8089: PUSH
8090: LD_EXP 18
8094: PUSH
8095: LD_VAR 0 2
8099: ARRAY
8100: ARRAY
8101: PUSH
8102: LD_INT 2
8104: ARRAY
8105: PPUSH
8106: LD_INT 0
8108: PPUSH
8109: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8113: LD_VAR 0 6
8117: PPUSH
8118: LD_VAR 0 7
8122: PPUSH
8123: CALL_OW 52
// end else
8127: GO 8162
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8129: LD_VAR 0 6
8133: PPUSH
8134: LD_EXP 23
8138: PUSH
8139: LD_EXP 18
8143: PUSH
8144: LD_VAR 0 2
8148: ARRAY
8149: ARRAY
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: PPUSH
8155: LD_INT 0
8157: PPUSH
8158: CALL_OW 49
// end else
8162: GO 8375
// begin uc_side := i ;
8164: LD_ADDR_OWVAR 20
8168: PUSH
8169: LD_VAR 0 2
8173: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8174: LD_ADDR_OWVAR 21
8178: PUSH
8179: LD_EXP 20
8183: PUSH
8184: LD_VAR 0 2
8188: ARRAY
8189: ST_TO_ADDR
// hc_importance := 100 ;
8190: LD_ADDR_OWVAR 32
8194: PUSH
8195: LD_INT 100
8197: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8198: LD_INT 0
8200: PPUSH
8201: LD_INT 1
8203: PPUSH
8204: LD_EXP 31
8208: PPUSH
8209: CALL_OW 380
// if multiplayer then
8213: LD_OWVAR 4
8217: IFFALSE 8275
// begin hc_name := mp_sides_players_names [ i ] ;
8219: LD_ADDR_OWVAR 26
8223: PUSH
8224: LD_OWVAR 19
8228: PUSH
8229: LD_VAR 0 2
8233: ARRAY
8234: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8235: LD_ADDR_OWVAR 33
8239: PUSH
8240: LD_STRING MULTIAVATARS
8242: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8243: LD_ADDR_OWVAR 34
8247: PUSH
8248: LD_VAR 0 2
8252: PPUSH
8253: CALL_OW 525
8257: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8258: LD_ADDR_OWVAR 27
8262: PUSH
8263: LD_VAR 0 2
8267: PPUSH
8268: CALL_OW 526
8272: ST_TO_ADDR
// end else
8273: GO 8307
// begin hc_gallery :=  ;
8275: LD_ADDR_OWVAR 33
8279: PUSH
8280: LD_STRING 
8282: ST_TO_ADDR
// hc_name :=  ;
8283: LD_ADDR_OWVAR 26
8287: PUSH
8288: LD_STRING 
8290: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8291: LD_ADDR_OWVAR 27
8295: PUSH
8296: LD_INT 1
8298: PPUSH
8299: LD_INT 2
8301: PPUSH
8302: CALL_OW 12
8306: ST_TO_ADDR
// end ; un := CreateHuman ;
8307: LD_ADDR_VAR 0 6
8311: PUSH
8312: CALL_OW 44
8316: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8317: LD_VAR 0 6
8321: PPUSH
8322: LD_EXP 23
8326: PUSH
8327: LD_EXP 18
8331: PUSH
8332: LD_VAR 0 2
8336: ARRAY
8337: ARRAY
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PPUSH
8343: LD_INT 0
8345: PPUSH
8346: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8350: LD_ADDR_EXP 35
8354: PUSH
8355: LD_EXP 35
8359: PPUSH
8360: LD_VAR 0 2
8364: PPUSH
8365: LD_VAR 0 6
8369: PPUSH
8370: CALL_OW 1
8374: ST_TO_ADDR
// end ; InitHc ;
8375: CALL_OW 19
// InitUc ;
8379: CALL_OW 18
// uc_side := i ;
8383: LD_ADDR_OWVAR 20
8387: PUSH
8388: LD_VAR 0 2
8392: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8393: LD_ADDR_OWVAR 21
8397: PUSH
8398: LD_EXP 20
8402: PUSH
8403: LD_VAR 0 2
8407: ARRAY
8408: ST_TO_ADDR
// hc_gallery :=  ;
8409: LD_ADDR_OWVAR 33
8413: PUSH
8414: LD_STRING 
8416: ST_TO_ADDR
// hc_name :=  ;
8417: LD_ADDR_OWVAR 26
8421: PUSH
8422: LD_STRING 
8424: ST_TO_ADDR
// hc_importance := 0 ;
8425: LD_ADDR_OWVAR 32
8429: PUSH
8430: LD_INT 0
8432: ST_TO_ADDR
// cl := 1 ;
8433: LD_ADDR_VAR 0 5
8437: PUSH
8438: LD_INT 1
8440: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8441: LD_ADDR_VAR 0 3
8445: PUSH
8446: DOUBLE
8447: LD_INT 2
8449: DEC
8450: ST_TO_ADDR
8451: LD_EXP 30
8455: PUSH
8456: FOR_TO
8457: IFFALSE 8860
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8459: LD_VAR 0 3
8463: PUSH
8464: LD_INT 1
8466: MINUS
8467: PUSH
8468: LD_EXP 30
8472: PUSH
8473: LD_INT 1
8475: MINUS
8476: PUSH
8477: LD_INT 4
8479: DIVREAL
8480: MOD
8481: PUSH
8482: LD_INT 0
8484: EQUAL
8485: IFFALSE 8501
// cl := cl + 1 ;
8487: LD_ADDR_VAR 0 5
8491: PUSH
8492: LD_VAR 0 5
8496: PUSH
8497: LD_INT 1
8499: PLUS
8500: ST_TO_ADDR
// if cl > 4 then
8501: LD_VAR 0 5
8505: PUSH
8506: LD_INT 4
8508: GREATER
8509: IFFALSE 8519
// cl := 1 ;
8511: LD_ADDR_VAR 0 5
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8519: LD_INT 0
8521: PPUSH
8522: LD_VAR 0 5
8526: PPUSH
8527: LD_EXP 31
8531: PPUSH
8532: CALL_OW 380
// un := CreateHuman ;
8536: LD_ADDR_VAR 0 6
8540: PUSH
8541: CALL_OW 44
8545: ST_TO_ADDR
// if j > copy then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_VAR 0 9
8555: GREATER
8556: IFFALSE 8585
// copy := Replace ( copy , j , un ) else
8558: LD_ADDR_VAR 0 9
8562: PUSH
8563: LD_VAR 0 9
8567: PPUSH
8568: LD_VAR 0 3
8572: PPUSH
8573: LD_VAR 0 6
8577: PPUSH
8578: CALL_OW 1
8582: ST_TO_ADDR
8583: GO 8667
// begin CopySkills ( copy [ j ] , un ) ;
8585: LD_VAR 0 9
8589: PUSH
8590: LD_VAR 0 3
8594: ARRAY
8595: PPUSH
8596: LD_VAR 0 6
8600: PPUSH
8601: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8605: LD_VAR 0 6
8609: PPUSH
8610: LD_INT 2
8612: PPUSH
8613: LD_VAR 0 9
8617: PUSH
8618: LD_VAR 0 3
8622: ARRAY
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 260
8631: PPUSH
8632: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8636: LD_VAR 0 6
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: LD_VAR 0 9
8648: PUSH
8649: LD_VAR 0 3
8653: ARRAY
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: CALL_OW 260
8662: PPUSH
8663: CALL_OW 239
// end ; if multi_pos_area then
8667: LD_EXP 23
8671: IFFALSE 8858
// begin if GetClass ( un ) = 3 then
8673: LD_VAR 0 6
8677: PPUSH
8678: CALL_OW 257
8682: PUSH
8683: LD_INT 3
8685: EQUAL
8686: IFFALSE 8825
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8688: LD_INT 22
8690: PPUSH
8691: LD_INT 1
8693: PPUSH
8694: LD_INT 1
8696: PPUSH
8697: LD_INT 44
8699: PUSH
8700: LD_INT 44
8702: PUSH
8703: LD_INT 43
8705: PUSH
8706: LD_INT 51
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: LD_VAR 0 3
8719: PUSH
8720: LD_INT 4
8722: MOD
8723: PUSH
8724: LD_INT 1
8726: PLUS
8727: ARRAY
8728: PPUSH
8729: LD_INT 80
8731: PPUSH
8732: CALL 20508 0 5
// veh := CreateVehicle ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: CALL_OW 45
8745: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8746: LD_VAR 0 7
8750: PPUSH
8751: LD_EXP 23
8755: PUSH
8756: LD_EXP 18
8760: PUSH
8761: LD_VAR 0 2
8765: ARRAY
8766: ARRAY
8767: PUSH
8768: LD_INT 2
8770: ARRAY
8771: PPUSH
8772: LD_INT 0
8774: PPUSH
8775: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8779: LD_VAR 0 6
8783: PPUSH
8784: LD_VAR 0 7
8788: PPUSH
8789: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8793: LD_VAR 0 7
8797: PPUSH
8798: CALL_OW 264
8802: PUSH
8803: LD_INT 51
8805: EQUAL
8806: IFFALSE 8823
// SetCargo ( veh , mat_cans , 100 ) ;
8808: LD_VAR 0 7
8812: PPUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_INT 100
8818: PPUSH
8819: CALL_OW 290
// continue ;
8823: GO 8456
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8825: LD_VAR 0 6
8829: PPUSH
8830: LD_EXP 23
8834: PUSH
8835: LD_EXP 18
8839: PUSH
8840: LD_VAR 0 2
8844: ARRAY
8845: ARRAY
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PPUSH
8851: LD_INT 0
8853: PPUSH
8854: CALL_OW 49
// end ; end ;
8858: GO 8456
8860: POP
8861: POP
// end ;
8862: GO 7683
8864: POP
8865: POP
// end ;
8866: LD_VAR 0 1
8870: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8871: LD_INT 0
8873: PPUSH
8874: PPUSH
8875: PPUSH
8876: PPUSH
8877: PPUSH
// if not multi_support then
8878: LD_EXP 34
8882: NOT
8883: IFFALSE 8887
// exit ;
8885: GO 9174
// result := [ ] ;
8887: LD_ADDR_VAR 0 1
8891: PUSH
8892: EMPTY
8893: ST_TO_ADDR
// for i := 1 to 8 do
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 8
8906: PUSH
8907: FOR_TO
8908: IFFALSE 9172
// begin result := Replace ( result , i , [ ] ) ;
8910: LD_ADDR_VAR 0 1
8914: PUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: LD_VAR 0 2
8924: PPUSH
8925: EMPTY
8926: PPUSH
8927: CALL_OW 1
8931: ST_TO_ADDR
// if multi_sides [ i ] then
8932: LD_EXP 18
8936: PUSH
8937: LD_VAR 0 2
8941: ARRAY
8942: IFFALSE 9170
// begin tmp := [ ] ;
8944: LD_ADDR_VAR 0 5
8948: PUSH
8949: EMPTY
8950: ST_TO_ADDR
// if multi_support = 1 then
8951: LD_EXP 34
8955: PUSH
8956: LD_INT 1
8958: EQUAL
8959: IFFALSE 9048
// begin uc_side := i ;
8961: LD_ADDR_OWVAR 20
8965: PUSH
8966: LD_VAR 0 2
8970: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8971: LD_ADDR_OWVAR 21
8975: PUSH
8976: LD_EXP 20
8980: PUSH
8981: LD_VAR 0 2
8985: ARRAY
8986: ST_TO_ADDR
// for j := 1 to 2 do
8987: LD_ADDR_VAR 0 3
8991: PUSH
8992: DOUBLE
8993: LD_INT 1
8995: DEC
8996: ST_TO_ADDR
8997: LD_INT 2
8999: PUSH
9000: FOR_TO
9001: IFFALSE 9046
// begin InitHC_All ( ) ;
9003: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
9007: LD_INT 0
9009: PPUSH
9010: LD_INT 1
9012: PPUSH
9013: LD_INT 4
9015: PPUSH
9016: CALL_OW 12
9020: PPUSH
9021: LD_INT 1
9023: PPUSH
9024: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9028: LD_ADDR_VAR 0 5
9032: PUSH
9033: LD_VAR 0 5
9037: PUSH
9038: CALL_OW 44
9042: ADD
9043: ST_TO_ADDR
// end ;
9044: GO 9000
9046: POP
9047: POP
// end ; if multi_support = 2 then
9048: LD_EXP 34
9052: PUSH
9053: LD_INT 2
9055: EQUAL
9056: IFFALSE 9145
// begin uc_side := i ;
9058: LD_ADDR_OWVAR 20
9062: PUSH
9063: LD_VAR 0 2
9067: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9068: LD_ADDR_OWVAR 21
9072: PUSH
9073: LD_EXP 20
9077: PUSH
9078: LD_VAR 0 2
9082: ARRAY
9083: ST_TO_ADDR
// for j := 1 to 4 do
9084: LD_ADDR_VAR 0 3
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 4
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9143
// begin InitHC_All ( ) ;
9100: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
9104: LD_INT 0
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: LD_INT 4
9112: PPUSH
9113: CALL_OW 12
9117: PPUSH
9118: LD_INT 2
9120: PPUSH
9121: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9125: LD_ADDR_VAR 0 5
9129: PUSH
9130: LD_VAR 0 5
9134: PUSH
9135: CALL_OW 44
9139: ADD
9140: ST_TO_ADDR
// end ;
9141: GO 9097
9143: POP
9144: POP
// end ; result := Replace ( result , i , tmp ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: LD_VAR 0 5
9164: PPUSH
9165: CALL_OW 1
9169: ST_TO_ADDR
// end ; end ;
9170: GO 8907
9172: POP
9173: POP
// end ;
9174: LD_VAR 0 1
9178: RET
// export function Multiplayer_Start ( ) ; begin
9179: LD_INT 0
9181: PPUSH
// Multiplayer_PrepareApemans ( ) ;
9182: CALL 7561 0 0
// Multiplayer_PreparePlayers ( ) ;
9186: CALL 7658 0 0
// Multiplayer_InitPointSystem ( ) ;
9190: CALL 10004 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9194: LD_INT 20
9196: PPUSH
9197: CALL 10180 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9201: LD_INT 150
9203: PPUSH
9204: CALL 10180 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9208: LD_INT 5
9210: PPUSH
9211: CALL 10180 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9215: LD_INT 40
9217: NEG
9218: PPUSH
9219: CALL 10180 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9223: LD_INT 200
9225: PPUSH
9226: CALL 10180 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9230: LD_INT 2
9232: PPUSH
9233: CALL 10180 0 1
// if multi_support then
9237: LD_EXP 34
9241: IFFALSE 9253
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9243: LD_ADDR_EXP 38
9247: PUSH
9248: CALL 8871 0 0
9252: ST_TO_ADDR
// if multi_sides [ your_side ] then
9253: LD_EXP 18
9257: PUSH
9258: LD_OWVAR 2
9262: ARRAY
9263: IFFALSE 9290
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9265: LD_INT 22
9267: PUSH
9268: LD_OWVAR 2
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PPUSH
9277: CALL_OW 69
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: CALL_OW 87
// end ;
9290: LD_VAR 0 1
9294: RET
// export function Multiplayer_End ( ) ; var i , j , s , tmp ; begin
9295: LD_INT 0
9297: PPUSH
9298: PPUSH
9299: PPUSH
9300: PPUSH
9301: PPUSH
// tmp := [ ] ;
9302: LD_ADDR_VAR 0 5
9306: PUSH
9307: EMPTY
9308: ST_TO_ADDR
// for i := 1 to 8 do
9309: LD_ADDR_VAR 0 2
9313: PUSH
9314: DOUBLE
9315: LD_INT 1
9317: DEC
9318: ST_TO_ADDR
9319: LD_INT 8
9321: PUSH
9322: FOR_TO
9323: IFFALSE 9359
// if multi_sides [ i ] then
9325: LD_EXP 18
9329: PUSH
9330: LD_VAR 0 2
9334: ARRAY
9335: IFFALSE 9357
// tmp := Join ( tmp , i ) ;
9337: LD_ADDR_VAR 0 5
9341: PUSH
9342: LD_VAR 0 5
9346: PPUSH
9347: LD_VAR 0 2
9351: PPUSH
9352: CALL 53379 0 2
9356: ST_TO_ADDR
9357: GO 9322
9359: POP
9360: POP
// repeat wait ( 0 0$1 ) ;
9361: LD_INT 35
9363: PPUSH
9364: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9368: LD_OWVAR 1
9372: PUSH
9373: LD_EXP 39
9377: GREATER
9378: PUSH
9379: LD_EXP 34
9383: AND
9384: IFFALSE 9572
// begin if tick mod 2 2$00 = 0 then
9386: LD_OWVAR 1
9390: PUSH
9391: LD_INT 4200
9393: MOD
9394: PUSH
9395: LD_INT 0
9397: EQUAL
9398: IFFALSE 9572
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
9400: LD_ADDR_VAR 0 5
9404: PUSH
9405: LD_VAR 0 5
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: LD_VAR 0 5
9417: PPUSH
9418: CALL 17770 0 1
9422: PPUSH
9423: LD_INT 1
9425: PPUSH
9426: CALL 20048 0 4
9430: ST_TO_ADDR
// for s := 1 to tmp do
9431: LD_ADDR_VAR 0 4
9435: PUSH
9436: DOUBLE
9437: LD_INT 1
9439: DEC
9440: ST_TO_ADDR
9441: LD_VAR 0 5
9445: PUSH
9446: FOR_TO
9447: IFFALSE 9570
// begin i := tmp [ s ] ;
9449: LD_ADDR_VAR 0 2
9453: PUSH
9454: LD_VAR 0 5
9458: PUSH
9459: LD_VAR 0 4
9463: ARRAY
9464: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
9465: LD_EXP 18
9469: PUSH
9470: LD_VAR 0 2
9474: ARRAY
9475: PUSH
9476: LD_EXP 36
9480: PUSH
9481: LD_VAR 0 2
9485: ARRAY
9486: NOT
9487: AND
9488: PUSH
9489: LD_EXP 38
9493: PUSH
9494: LD_VAR 0 2
9498: ARRAY
9499: AND
9500: IFFALSE 9568
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9502: LD_EXP 38
9506: PUSH
9507: LD_VAR 0 2
9511: ARRAY
9512: PUSH
9513: LD_INT 1
9515: ARRAY
9516: PPUSH
9517: LD_INT 11
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9527: LD_ADDR_EXP 38
9531: PUSH
9532: LD_EXP 38
9536: PPUSH
9537: LD_VAR 0 2
9541: PPUSH
9542: LD_EXP 38
9546: PUSH
9547: LD_VAR 0 2
9551: ARRAY
9552: PPUSH
9553: LD_INT 1
9555: PPUSH
9556: CALL_OW 3
9560: PPUSH
9561: CALL_OW 1
9565: ST_TO_ADDR
// break ;
9566: GO 9570
// end ; end ;
9568: GO 9446
9570: POP
9571: POP
// end ; end ; if not multi_custom_commanders then
9572: LD_EXP 27
9576: NOT
9577: IFFALSE 9690
// begin for i := 1 to 8 do
9579: LD_ADDR_VAR 0 2
9583: PUSH
9584: DOUBLE
9585: LD_INT 1
9587: DEC
9588: ST_TO_ADDR
9589: LD_INT 8
9591: PUSH
9592: FOR_TO
9593: IFFALSE 9664
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9595: LD_INT 22
9597: PUSH
9598: LD_VAR 0 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 0
9614: EQUAL
9615: PUSH
9616: LD_EXP 36
9620: PUSH
9621: LD_VAR 0 2
9625: ARRAY
9626: NOT
9627: AND
9628: IFFALSE 9662
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9630: LD_ADDR_EXP 36
9634: PUSH
9635: LD_EXP 36
9639: PPUSH
9640: LD_VAR 0 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: CALL_OW 1
9652: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL 10250 0 1
// end ; end ;
9662: GO 9592
9664: POP
9665: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9666: LD_EXP 36
9670: PPUSH
9671: CALL 17770 0 1
9675: PUSH
9676: LD_EXP 18
9680: PPUSH
9681: CALL 17770 0 1
9685: EQUAL
9686: IFFALSE 9690
// break ;
9688: GO 9710
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9690: CALL 9824 0 0
9694: NOT
9695: PUSH
9696: LD_EXP 2
9700: AND
9701: PUSH
9702: LD_EXP 35
9706: NOT
9707: OR
9708: IFFALSE 9361
// game := false ;
9710: LD_ADDR_EXP 2
9714: PUSH
9715: LD_INT 0
9717: ST_TO_ADDR
// for i := 1 to 8 do
9718: LD_ADDR_VAR 0 2
9722: PUSH
9723: DOUBLE
9724: LD_INT 1
9726: DEC
9727: ST_TO_ADDR
9728: LD_INT 8
9730: PUSH
9731: FOR_TO
9732: IFFALSE 9768
// begin if multi_sides [ i ] then
9734: LD_EXP 18
9738: PUSH
9739: LD_VAR 0 2
9743: ARRAY
9744: IFFALSE 9766
// SetMultiScore ( i , multi_points [ i ] ) ;
9746: LD_VAR 0 2
9750: PPUSH
9751: LD_EXP 43
9755: PUSH
9756: LD_VAR 0 2
9760: ARRAY
9761: PPUSH
9762: CALL_OW 506
// end ;
9766: GO 9731
9768: POP
9769: POP
// if multi_loosers [ your_side ] then
9770: LD_EXP 36
9774: PUSH
9775: LD_OWVAR 2
9779: ARRAY
9780: IFFALSE 9803
// begin if Multiplayer then
9782: LD_OWVAR 4
9786: IFFALSE 9794
// YouLostInMultiplayer else
9788: CALL_OW 107
9792: GO 9801
// YouLost (  ) ;
9794: LD_STRING 
9796: PPUSH
9797: CALL_OW 104
// end else
9801: GO 9819
// begin if Multiplayer then
9803: LD_OWVAR 4
9807: IFFALSE 9815
// YouWinInMultiplayer else
9809: CALL_OW 106
9813: GO 9819
// YouWin ;
9815: CALL_OW 103
// end ; end ;
9819: LD_VAR 0 1
9823: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9824: LD_INT 0
9826: PPUSH
9827: PPUSH
// result := false ;
9828: LD_ADDR_VAR 0 1
9832: PUSH
9833: LD_INT 0
9835: ST_TO_ADDR
// for side in botSides do
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_EXP 3
9845: PUSH
9846: FOR_IN
9847: IFFALSE 9908
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9849: LD_ADDR_VAR 0 1
9853: PUSH
9854: LD_INT 22
9856: PUSH
9857: LD_VAR 0 2
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 21
9868: PUSH
9869: LD_INT 1
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 50
9878: PUSH
9879: EMPTY
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: PPUSH
9887: CALL_OW 69
9891: PUSH
9892: LD_INT 0
9894: GREATER
9895: ST_TO_ADDR
// if result then
9896: LD_VAR 0 1
9900: IFFALSE 9906
// exit ;
9902: POP
9903: POP
9904: GO 9910
// end ;
9906: GO 9846
9908: POP
9909: POP
// end ;
9910: LD_VAR 0 1
9914: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9915: LD_INT 0
9917: PPUSH
9918: PPUSH
// result := [ ] ;
9919: LD_ADDR_VAR 0 1
9923: PUSH
9924: EMPTY
9925: ST_TO_ADDR
// for i := 1 to 8 do
9926: LD_ADDR_VAR 0 2
9930: PUSH
9931: DOUBLE
9932: LD_INT 1
9934: DEC
9935: ST_TO_ADDR
9936: LD_INT 8
9938: PUSH
9939: FOR_TO
9940: IFFALSE 9997
// begin if multi_sides [ i ] then
9942: LD_EXP 18
9946: PUSH
9947: LD_VAR 0 2
9951: ARRAY
9952: IFFALSE 9995
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9954: LD_ADDR_VAR 0 1
9958: PUSH
9959: LD_VAR 0 1
9963: PUSH
9964: LD_STRING #coop-points
9966: PUSH
9967: LD_VAR 0 2
9971: PUSH
9972: LD_VAR 0 2
9976: PUSH
9977: LD_EXP 43
9981: PUSH
9982: LD_VAR 0 2
9986: ARRAY
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: ADD
9994: ST_TO_ADDR
// end ; end ;
9995: GO 9939
9997: POP
9998: POP
// end ;
9999: LD_VAR 0 1
10003: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
10004: LD_INT 0
10006: PPUSH
10007: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10008: LD_ADDR_EXP 43
10012: PUSH
10013: LD_INT 0
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: LD_INT 0
10021: PUSH
10022: LD_INT 0
10024: PUSH
10025: LD_INT 0
10027: PUSH
10028: LD_INT 0
10030: PUSH
10031: LD_INT 0
10033: PUSH
10034: LD_INT 0
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: ST_TO_ADDR
// multi_points_conditions := [ ] ;
10047: LD_ADDR_EXP 44
10051: PUSH
10052: EMPTY
10053: ST_TO_ADDR
// end ;
10054: LD_VAR 0 1
10058: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
10059: LD_INT 0
10061: PPUSH
// if not multi_points or not side or side > 8 then
10062: LD_EXP 43
10066: NOT
10067: PUSH
10068: LD_VAR 0 1
10072: NOT
10073: OR
10074: PUSH
10075: LD_VAR 0 1
10079: PUSH
10080: LD_INT 8
10082: GREATER
10083: OR
10084: IFFALSE 10088
// exit ;
10086: GO 10125
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
10088: LD_ADDR_EXP 43
10092: PUSH
10093: LD_EXP 43
10097: PPUSH
10098: LD_VAR 0 1
10102: PPUSH
10103: LD_EXP 43
10107: PUSH
10108: LD_VAR 0 1
10112: ARRAY
10113: PUSH
10114: LD_VAR 0 2
10118: PLUS
10119: PPUSH
10120: CALL_OW 1
10124: ST_TO_ADDR
// end ;
10125: LD_VAR 0 3
10129: RET
// export function Multiplayer_GetPoints ( side ) ; begin
10130: LD_INT 0
10132: PPUSH
// if not multi_points or not side or side > 8 then
10133: LD_EXP 43
10137: NOT
10138: PUSH
10139: LD_VAR 0 1
10143: NOT
10144: OR
10145: PUSH
10146: LD_VAR 0 1
10150: PUSH
10151: LD_INT 8
10153: GREATER
10154: OR
10155: IFFALSE 10159
// exit ;
10157: GO 10175
// result := multi_points [ side ] ;
10159: LD_ADDR_VAR 0 2
10163: PUSH
10164: LD_EXP 43
10168: PUSH
10169: LD_VAR 0 1
10173: ARRAY
10174: ST_TO_ADDR
// end ;
10175: LD_VAR 0 2
10179: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
10180: LD_INT 0
10182: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
10183: LD_ADDR_EXP 44
10187: PUSH
10188: LD_EXP 44
10192: PPUSH
10193: LD_EXP 44
10197: PUSH
10198: LD_INT 1
10200: PLUS
10201: PPUSH
10202: LD_VAR 0 1
10206: PPUSH
10207: CALL_OW 1
10211: ST_TO_ADDR
// end ;
10212: LD_VAR 0 2
10216: RET
// export function Multiplayer_GetCondition ( id ) ; begin
10217: LD_INT 0
10219: PPUSH
// if not id then
10220: LD_VAR 0 1
10224: NOT
10225: IFFALSE 10229
// exit ;
10227: GO 10245
// result := multi_points_conditions [ id ] ;
10229: LD_ADDR_VAR 0 2
10233: PUSH
10234: LD_EXP 44
10238: PUSH
10239: LD_VAR 0 1
10243: ARRAY
10244: ST_TO_ADDR
// end ;
10245: LD_VAR 0 2
10249: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
10250: LD_INT 0
10252: PPUSH
10253: PPUSH
10254: PPUSH
10255: PPUSH
10256: PPUSH
// players := [ ] ;
10257: LD_ADDR_VAR 0 3
10261: PUSH
10262: EMPTY
10263: ST_TO_ADDR
// for i = 1 to 8 do
10264: LD_ADDR_VAR 0 4
10268: PUSH
10269: DOUBLE
10270: LD_INT 1
10272: DEC
10273: ST_TO_ADDR
10274: LD_INT 8
10276: PUSH
10277: FOR_TO
10278: IFFALSE 10337
// begin if i = side then
10280: LD_VAR 0 4
10284: PUSH
10285: LD_VAR 0 1
10289: EQUAL
10290: IFFALSE 10294
// continue ;
10292: GO 10277
// if multi_sides [ i ] and not multi_loosers [ i ] then
10294: LD_EXP 18
10298: PUSH
10299: LD_VAR 0 4
10303: ARRAY
10304: PUSH
10305: LD_EXP 36
10309: PUSH
10310: LD_VAR 0 4
10314: ARRAY
10315: NOT
10316: AND
10317: IFFALSE 10335
// players := players ^ i ;
10319: LD_ADDR_VAR 0 3
10323: PUSH
10324: LD_VAR 0 3
10328: PUSH
10329: LD_VAR 0 4
10333: ADD
10334: ST_TO_ADDR
// end ;
10335: GO 10277
10337: POP
10338: POP
// if not players then
10339: LD_VAR 0 3
10343: NOT
10344: IFFALSE 10348
// exit ;
10346: GO 10615
// if players = 1 then
10348: LD_VAR 0 3
10352: PUSH
10353: LD_INT 1
10355: EQUAL
10356: IFFALSE 10417
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10358: LD_ADDR_VAR 0 4
10362: PUSH
10363: LD_INT 22
10365: PUSH
10366: LD_VAR 0 1
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 51
10377: PUSH
10378: EMPTY
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: PUSH
10390: FOR_IN
10391: IFFALSE 10413
// SetSide ( i , players [ 1 ] ) ;
10393: LD_VAR 0 4
10397: PPUSH
10398: LD_VAR 0 3
10402: PUSH
10403: LD_INT 1
10405: ARRAY
10406: PPUSH
10407: CALL_OW 235
10411: GO 10390
10413: POP
10414: POP
// end else
10415: GO 10615
// begin j := 1 ;
10417: LD_ADDR_VAR 0 5
10421: PUSH
10422: LD_INT 1
10424: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10425: LD_ADDR_VAR 0 4
10429: PUSH
10430: LD_INT 22
10432: PUSH
10433: LD_VAR 0 1
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 2
10444: PUSH
10445: LD_INT 21
10447: PUSH
10448: LD_INT 1
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 51
10457: PUSH
10458: EMPTY
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 21
10467: PUSH
10468: LD_INT 2
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 69
10488: PUSH
10489: FOR_IN
10490: IFFALSE 10613
// begin SetSide ( i , players [ j ] ) ;
10492: LD_VAR 0 4
10496: PPUSH
10497: LD_VAR 0 3
10501: PUSH
10502: LD_VAR 0 5
10506: ARRAY
10507: PPUSH
10508: CALL_OW 235
// if IsDrivenBy ( i ) then
10512: LD_VAR 0 4
10516: PPUSH
10517: CALL_OW 311
10521: IFFALSE 10548
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10523: LD_VAR 0 4
10527: PPUSH
10528: CALL_OW 311
10532: PPUSH
10533: LD_VAR 0 3
10537: PUSH
10538: LD_VAR 0 5
10542: ARRAY
10543: PPUSH
10544: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10548: LD_VAR 0 4
10552: PPUSH
10553: CALL_OW 310
10557: PPUSH
10558: CALL_OW 247
10562: PUSH
10563: LD_INT 3
10565: EQUAL
10566: IFFALSE 10577
// ComExitBuilding ( i ) ;
10568: LD_VAR 0 4
10572: PPUSH
10573: CALL_OW 122
// j := j + 1 ;
10577: LD_ADDR_VAR 0 5
10581: PUSH
10582: LD_VAR 0 5
10586: PUSH
10587: LD_INT 1
10589: PLUS
10590: ST_TO_ADDR
// if j > players then
10591: LD_VAR 0 5
10595: PUSH
10596: LD_VAR 0 3
10600: GREATER
10601: IFFALSE 10611
// j := 1 ;
10603: LD_ADDR_VAR 0 5
10607: PUSH
10608: LD_INT 1
10610: ST_TO_ADDR
// end ;
10611: GO 10489
10613: POP
10614: POP
// end ; end ;
10615: LD_VAR 0 2
10619: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
10624: PPUSH
// i := 3 ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_INT 3
10632: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10633: LD_ADDR_VAR 0 3
10637: PUSH
10638: LD_INT 5
10640: PUSH
10641: LD_INT 10
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 120
10650: PUSH
10651: LD_INT 2
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 101
10660: PUSH
10661: LD_INT 8
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 27
10670: PUSH
10671: LD_INT 4
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10684: LD_INT 4
10686: PPUSH
10687: LD_INT 5
10689: PPUSH
10690: LD_VAR 0 3
10694: PUSH
10695: LD_VAR 0 2
10699: ARRAY
10700: PUSH
10701: LD_INT 1
10703: ARRAY
10704: PPUSH
10705: LD_VAR 0 3
10709: PUSH
10710: LD_VAR 0 2
10714: ARRAY
10715: PUSH
10716: LD_INT 2
10718: ARRAY
10719: PPUSH
10720: LD_INT 0
10722: PPUSH
10723: CALL_OW 58
// end ;
10727: LD_VAR 0 1
10731: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10732: LD_INT 0
10734: PPUSH
// if not side or side > 8 then
10735: LD_VAR 0 1
10739: NOT
10740: PUSH
10741: LD_VAR 0 1
10745: PUSH
10746: LD_INT 8
10748: GREATER
10749: OR
10750: IFFALSE 10754
// exit ;
10752: GO 10771
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10754: LD_VAR 0 1
10758: PPUSH
10759: LD_INT 6
10761: PPUSH
10762: CALL 10217 0 1
10766: PPUSH
10767: CALL 10059 0 2
// end ;
10771: LD_VAR 0 2
10775: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10776: LD_INT 0
10778: PPUSH
// if not side or side > 8 then
10779: LD_VAR 0 1
10783: NOT
10784: PUSH
10785: LD_VAR 0 1
10789: PUSH
10790: LD_INT 8
10792: GREATER
10793: OR
10794: IFFALSE 10798
// exit ;
10796: GO 10815
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10798: LD_VAR 0 1
10802: PPUSH
10803: LD_INT 4
10805: PPUSH
10806: CALL 10217 0 1
10810: PPUSH
10811: CALL 10059 0 2
// end ;
10815: LD_VAR 0 2
10819: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10820: LD_INT 0
10822: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10823: LD_VAR 0 1
10827: NOT
10828: PUSH
10829: LD_VAR 0 1
10833: PUSH
10834: LD_INT 8
10836: GREATER
10837: OR
10838: PUSH
10839: LD_VAR 0 2
10843: PUSH
10844: LD_INT 2
10846: PUSH
10847: LD_INT 6
10849: PUSH
10850: LD_INT 36
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: IN
10862: NOT
10863: OR
10864: IFFALSE 10868
// exit ;
10866: GO 10885
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10868: LD_VAR 0 1
10872: PPUSH
10873: LD_INT 3
10875: PPUSH
10876: CALL 10217 0 1
10880: PPUSH
10881: CALL 10059 0 2
// end ;
10885: LD_VAR 0 3
10889: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10890: LD_INT 0
10892: PPUSH
10893: PPUSH
// if not un then
10894: LD_VAR 0 1
10898: NOT
10899: IFFALSE 10903
// exit ;
10901: GO 10949
// if not points then
10903: LD_VAR 0 3
10907: NOT
10908: IFFALSE 10925
// gained_points := Multiplayer_GetCondition ( 1 ) else
10910: LD_ADDR_VAR 0 5
10914: PUSH
10915: LD_INT 1
10917: PPUSH
10918: CALL 10217 0 1
10922: ST_TO_ADDR
10923: GO 10935
// gained_points := points ;
10925: LD_ADDR_VAR 0 5
10929: PUSH
10930: LD_VAR 0 3
10934: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10935: LD_VAR 0 2
10939: PPUSH
10940: LD_VAR 0 5
10944: PPUSH
10945: CALL 10059 0 2
10949: LD_VAR 0 4
10953: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10954: LD_INT 0
10956: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10957: LD_VAR 0 1
10961: PPUSH
10962: LD_INT 2
10964: PPUSH
10965: CALL 10217 0 1
10969: PPUSH
10970: CALL 10059 0 2
// end ; end_of_file
10974: LD_VAR 0 2
10978: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10979: LD_VAR 0 1
10983: PPUSH
10984: CALL_OW 255
10988: PUSH
10989: LD_EXP 3
10993: IN
10994: NOT
10995: IFFALSE 10999
// exit ;
10997: GO 11016
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10999: LD_VAR 0 1
11003: PPUSH
11004: LD_VAR 0 2
11008: PPUSH
11009: LD_INT 0
11011: PPUSH
11012: CALL 10890 0 3
// end ;
11016: PPOPN 3
11018: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
11023: PPUSH
11024: PPUSH
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
11030: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11031: LD_VAR 0 1
11035: PPUSH
11036: CALL 58469 0 1
// side := GetSide ( un ) ;
11040: LD_ADDR_VAR 0 3
11044: PUSH
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 255
11054: ST_TO_ADDR
// if multi_sides [ side ] then
11055: LD_EXP 18
11059: PUSH
11060: LD_VAR 0 3
11064: ARRAY
11065: IFFALSE 11091
// if GetType ( un ) = unit_human then
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 247
11076: PUSH
11077: LD_INT 1
11079: EQUAL
11080: IFFALSE 11091
// MultiplayerEvent_HumanLost ( side ) ;
11082: LD_VAR 0 3
11086: PPUSH
11087: CALL 10776 0 1
// if side in botSides then
11091: LD_VAR 0 3
11095: PUSH
11096: LD_EXP 3
11100: IN
11101: IFFALSE 11606
// begin if side = botSides [ 1 ] then
11103: LD_VAR 0 3
11107: PUSH
11108: LD_EXP 3
11112: PUSH
11113: LD_INT 1
11115: ARRAY
11116: EQUAL
11117: IFFALSE 11606
// begin if un in arForce then
11119: LD_VAR 0 1
11123: PUSH
11124: LD_EXP 14
11128: IN
11129: IFFALSE 11147
// arForce := arForce diff un ;
11131: LD_ADDR_EXP 14
11135: PUSH
11136: LD_EXP 14
11140: PUSH
11141: LD_VAR 0 1
11145: DIFF
11146: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
11147: LD_VAR 0 1
11151: PUSH
11152: LD_EXP 8
11156: IN
11157: PUSH
11158: LD_VAR 0 1
11162: PUSH
11163: LD_EXP 9
11167: IN
11168: OR
11169: IFFALSE 11263
// begin arVehicles := arVehicles diff un ;
11171: LD_ADDR_EXP 8
11175: PUSH
11176: LD_EXP 8
11180: PUSH
11181: LD_VAR 0 1
11185: DIFF
11186: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
11187: LD_ADDR_EXP 9
11191: PUSH
11192: LD_EXP 9
11196: PUSH
11197: LD_VAR 0 1
11201: DIFF
11202: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
11203: LD_ADDR_EXP 6
11207: PUSH
11208: LD_EXP 6
11212: PUSH
11213: LD_VAR 0 1
11217: PPUSH
11218: CALL_OW 265
11222: PUSH
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL_OW 262
11232: PUSH
11233: LD_VAR 0 1
11237: PPUSH
11238: CALL_OW 263
11242: PUSH
11243: LD_VAR 0 1
11247: PPUSH
11248: CALL_OW 264
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: ADD
11262: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
11263: LD_VAR 0 1
11267: PPUSH
11268: CALL_OW 257
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: PUSH
11277: LD_VAR 0 1
11281: PPUSH
11282: CALL_OW 110
11286: PUSH
11287: LD_INT 999
11289: LESS
11290: AND
11291: PUSH
11292: LD_EXP 11
11296: AND
11297: IFFALSE 11438
// begin if not IsOk ( arDep ) then
11299: LD_INT 2
11301: PPUSH
11302: CALL_OW 302
11306: NOT
11307: IFFALSE 11311
// exit ;
11309: GO 11707
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11311: LD_ADDR_EXP 11
11315: PUSH
11316: LD_EXP 11
11320: PPUSH
11321: CALL 54762 0 1
11325: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11326: LD_ADDR_OWVAR 20
11330: PUSH
11331: LD_EXP 3
11335: PUSH
11336: LD_INT 1
11338: ARRAY
11339: ST_TO_ADDR
// uc_nation := nation_arabian ;
11340: LD_ADDR_OWVAR 21
11344: PUSH
11345: LD_INT 2
11347: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
11348: LD_INT 0
11350: PPUSH
11351: LD_INT 3
11353: PUSH
11354: LD_INT 6
11356: PUSH
11357: LD_INT 9
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: PUSH
11365: LD_OWVAR 67
11369: ARRAY
11370: PPUSH
11371: CALL_OW 383
// un := CreateHuman ;
11375: LD_ADDR_VAR 0 1
11379: PUSH
11380: CALL_OW 44
11384: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 143
11392: PPUSH
11393: LD_INT 29
11395: PPUSH
11396: LD_INT 0
11398: PPUSH
11399: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_INT 115
11410: PPUSH
11411: LD_INT 52
11413: PPUSH
11414: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11418: LD_ADDR_EXP 14
11422: PUSH
11423: LD_EXP 14
11427: PPUSH
11428: LD_VAR 0 1
11432: PPUSH
11433: CALL 53379 0 2
11437: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 247
11447: PUSH
11448: LD_INT 3
11450: EQUAL
11451: IFFALSE 11606
// begin btype := GetBType ( un ) ;
11453: LD_ADDR_VAR 0 11
11457: PUSH
11458: LD_VAR 0 1
11462: PPUSH
11463: CALL_OW 266
11467: ST_TO_ADDR
// if btype = b_breastwork then
11468: LD_VAR 0 11
11472: PUSH
11473: LD_INT 31
11475: EQUAL
11476: IFFALSE 11480
// exit ;
11478: GO 11707
// if btype = b_barracks then
11480: LD_VAR 0 11
11484: PUSH
11485: LD_INT 5
11487: EQUAL
11488: IFFALSE 11498
// btype := b_armoury ;
11490: LD_ADDR_VAR 0 11
11494: PUSH
11495: LD_INT 4
11497: ST_TO_ADDR
// if btype = b_factory then
11498: LD_VAR 0 11
11502: PUSH
11503: LD_INT 3
11505: EQUAL
11506: IFFALSE 11516
// btype := b_workshop ;
11508: LD_ADDR_VAR 0 11
11512: PUSH
11513: LD_INT 2
11515: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11516: LD_VAR 0 11
11520: PUSH
11521: LD_INT 8
11523: PUSH
11524: LD_INT 7
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: IN
11531: IFFALSE 11541
// btype := b_lab ;
11533: LD_ADDR_VAR 0 11
11537: PUSH
11538: LD_INT 6
11540: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11541: LD_ADDR_EXP 7
11545: PUSH
11546: LD_EXP 7
11550: PPUSH
11551: LD_EXP 7
11555: PUSH
11556: LD_INT 1
11558: PLUS
11559: PPUSH
11560: LD_VAR 0 11
11564: PUSH
11565: LD_VAR 0 1
11569: PPUSH
11570: CALL_OW 250
11574: PUSH
11575: LD_VAR 0 1
11579: PPUSH
11580: CALL_OW 251
11584: PUSH
11585: LD_VAR 0 1
11589: PPUSH
11590: CALL_OW 254
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL_OW 1
11605: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
11606: LD_EXP 35
11610: PUSH
11611: LD_EXP 27
11615: AND
11616: PUSH
11617: LD_EXP 36
11621: PUSH
11622: LD_VAR 0 3
11626: ARRAY
11627: NOT
11628: AND
11629: IFFALSE 11707
// if un in multi_commanders then
11631: LD_VAR 0 1
11635: PUSH
11636: LD_EXP 35
11640: IN
11641: IFFALSE 11707
// begin if side = your_side then
11643: LD_VAR 0 3
11647: PUSH
11648: LD_OWVAR 2
11652: EQUAL
11653: IFFALSE 11659
// Multiplayer_Loose_Message ;
11655: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11659: LD_ADDR_EXP 36
11663: PUSH
11664: LD_EXP 36
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 1
11681: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11682: LD_ADDR_EXP 35
11686: PUSH
11687: LD_EXP 35
11691: PUSH
11692: LD_VAR 0 1
11696: DIFF
11697: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11698: LD_VAR 0 3
11702: PPUSH
11703: CALL 10250 0 1
// end ; end ;
11707: PPOPN 11
11709: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11710: LD_INT 0
11712: PPUSH
11713: PPUSH
11714: PPUSH
11715: PPUSH
// begin side := GetSide ( building ) ;
11716: LD_ADDR_VAR 0 4
11720: PUSH
11721: LD_VAR 0 1
11725: PPUSH
11726: CALL_OW 255
11730: ST_TO_ADDR
// if multi_sides [ side ] then
11731: LD_EXP 18
11735: PUSH
11736: LD_VAR 0 4
11740: ARRAY
11741: IFFALSE 11762
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11743: LD_VAR 0 4
11747: PPUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 266
11757: PPUSH
11758: CALL 10820 0 2
// if side = botSides [ 1 ] then
11762: LD_VAR 0 4
11766: PUSH
11767: LD_EXP 3
11771: PUSH
11772: LD_INT 1
11774: ARRAY
11775: EQUAL
11776: IFFALSE 11872
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11778: LD_ADDR_EXP 7
11782: PUSH
11783: LD_EXP 7
11787: PPUSH
11788: LD_INT 1
11790: PPUSH
11791: CALL_OW 3
11795: ST_TO_ADDR
// btype := GetBType ( building ) ;
11796: LD_ADDR_VAR 0 5
11800: PUSH
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL_OW 266
11810: ST_TO_ADDR
// case btype of b_workshop :
11811: LD_VAR 0 5
11815: PUSH
11816: LD_INT 2
11818: DOUBLE
11819: EQUAL
11820: IFTRUE 11824
11822: GO 11836
11824: POP
// ComUpgrade ( building ) ; b_lab :
11825: LD_VAR 0 1
11829: PPUSH
11830: CALL_OW 146
11834: GO 11872
11836: LD_INT 6
11838: DOUBLE
11839: EQUAL
11840: IFTRUE 11844
11842: GO 11871
11844: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: LD_INT 10
11852: PPUSH
11853: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_INT 15
11864: PPUSH
11865: CALL_OW 207
// end ; end ;
11869: GO 11872
11871: POP
// end ; end ;
11872: PPOPN 5
11874: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11875: LD_VAR 0 1
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_EXP 3
11887: PUSH
11888: LD_INT 1
11890: ARRAY
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 33
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: IN
11915: IFFALSE 11926
// ComUnlink ( un ) ;
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 136
// end ;
11926: PPOPN 1
11928: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11929: LD_VAR 0 2
11933: PPUSH
11934: CALL_OW 255
11938: PUSH
11939: LD_EXP 3
11943: IN
11944: NOT
11945: IFFALSE 11949
// exit ;
11947: GO 12012
// if unit in arForceTmp then
11949: LD_VAR 0 2
11953: PUSH
11954: LD_EXP 15
11958: IN
11959: IFFALSE 12012
// begin arForceTmp := arForceTmp diff unit ;
11961: LD_ADDR_EXP 15
11965: PUSH
11966: LD_EXP 15
11970: PUSH
11971: LD_VAR 0 2
11975: DIFF
11976: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11977: LD_ADDR_EXP 14
11981: PUSH
11982: LD_EXP 14
11986: PPUSH
11987: LD_VAR 0 2
11991: PPUSH
11992: CALL 53379 0 2
11996: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11997: LD_VAR 0 2
12001: PPUSH
12002: LD_INT 103
12004: PPUSH
12005: LD_INT 54
12007: PPUSH
12008: CALL_OW 111
// end ; end ;
12012: PPOPN 2
12014: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
12015: LD_INT 0
12017: PPUSH
12018: PPUSH
12019: PPUSH
12020: PPUSH
12021: PPUSH
12022: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
12023: LD_VAR 0 1
12027: PPUSH
12028: LD_VAR 0 2
12032: PPUSH
12033: CALL 58527 0 2
// side := GetSide ( vehicle ) ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 255
12051: ST_TO_ADDR
// if multi_sides [ side ] then
12052: LD_EXP 18
12056: PUSH
12057: LD_VAR 0 4
12061: ARRAY
12062: IFFALSE 12073
// MultiplayerEvent_Produced ( side ) ;
12064: LD_VAR 0 4
12068: PPUSH
12069: CALL 10732 0 1
// if side = botSides [ 1 ] then
12073: LD_VAR 0 4
12077: PUSH
12078: LD_EXP 3
12082: PUSH
12083: LD_INT 1
12085: ARRAY
12086: EQUAL
12087: IFFALSE 12283
// begin driver := IsDrivenBy ( vehicle ) ;
12089: LD_ADDR_VAR 0 8
12093: PUSH
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 311
12103: ST_TO_ADDR
// if driver then
12104: LD_VAR 0 8
12108: IFFALSE 12142
// begin SetTag ( driver , tMech ) ;
12110: LD_VAR 0 8
12114: PPUSH
12115: LD_INT 7
12117: PPUSH
12118: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
12122: LD_ADDR_EXP 10
12126: PUSH
12127: LD_EXP 10
12131: PPUSH
12132: LD_VAR 0 8
12136: PPUSH
12137: CALL 53379 0 2
12141: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12142: LD_VAR 0 1
12146: PPUSH
12147: CALL_OW 263
12151: PUSH
12152: LD_INT 2
12154: EQUAL
12155: PUSH
12156: LD_VAR 0 1
12160: PPUSH
12161: CALL_OW 264
12165: PUSH
12166: LD_INT 32
12168: PUSH
12169: LD_INT 88
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: IN
12176: NOT
12177: AND
12178: IFFALSE 12202
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
12180: LD_ADDR_EXP 16
12184: PUSH
12185: LD_EXP 16
12189: PPUSH
12190: LD_VAR 0 1
12194: PPUSH
12195: CALL 53379 0 2
12199: ST_TO_ADDR
// exit ;
12200: GO 12283
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12202: LD_EXP 12
12206: PUSH
12207: LD_EXP 8
12211: PPUSH
12212: CALL 17770 0 1
12216: GREATER
12217: PUSH
12218: LD_VAR 0 1
12222: PPUSH
12223: CALL_OW 264
12227: PUSH
12228: LD_INT 32
12230: PUSH
12231: LD_INT 88
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: IN
12238: OR
12239: IFFALSE 12263
// arVehicles := Join ( arVehicles , vehicle ) else
12241: LD_ADDR_EXP 8
12245: PUSH
12246: LD_EXP 8
12250: PPUSH
12251: LD_VAR 0 1
12255: PPUSH
12256: CALL 53379 0 2
12260: ST_TO_ADDR
12261: GO 12283
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
12263: LD_ADDR_EXP 9
12267: PUSH
12268: LD_EXP 9
12272: PPUSH
12273: LD_VAR 0 1
12277: PPUSH
12278: CALL 53379 0 2
12282: ST_TO_ADDR
// end ; end ;
12283: PPOPN 8
12285: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
12286: LD_VAR 0 1
12290: PPUSH
12291: CALL_OW 110
12295: PUSH
12296: LD_INT 7
12298: EQUAL
12299: IFFALSE 12313
// SetTag ( driver , 0 ) ;
12301: LD_VAR 0 1
12305: PPUSH
12306: LD_INT 0
12308: PPUSH
12309: CALL_OW 109
// end ;
12313: PPOPN 4
12315: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12316: LD_VAR 0 2
12320: PPUSH
12321: CALL_OW 255
12325: PUSH
12326: LD_EXP 3
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: EQUAL
12335: IFFALSE 12365
// if tech in arTech then
12337: LD_VAR 0 1
12341: PUSH
12342: LD_EXP 5
12346: IN
12347: IFFALSE 12365
// arTech := arTech diff tech ;
12349: LD_ADDR_EXP 5
12353: PUSH
12354: LD_EXP 5
12358: PUSH
12359: LD_VAR 0 1
12363: DIFF
12364: ST_TO_ADDR
// end ;
12365: PPOPN 2
12367: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
12368: LD_VAR 0 1
12372: PPUSH
12373: CALL 58486 0 1
// end ; end_of_file
12377: PPOPN 1
12379: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12380: LD_INT 2
12382: PPUSH
12383: CALL_OW 302
12387: PUSH
12388: LD_INT 2
12390: PPUSH
12391: CALL_OW 255
12395: PUSH
12396: LD_EXP 3
12400: PUSH
12401: LD_INT 1
12403: ARRAY
12404: EQUAL
12405: AND
12406: IFFALSE 12443
12408: GO 12410
12410: DISABLE
// begin wait ( 5 5$00 - ( 2 2$00 * Difficulty ) ) ;
12411: LD_INT 10500
12413: PUSH
12414: LD_INT 4200
12416: PUSH
12417: LD_OWVAR 67
12421: MUL
12422: MINUS
12423: PPUSH
12424: CALL_OW 67
// activeArabAttacks := true ;
12428: LD_ADDR_EXP 4
12432: PUSH
12433: LD_INT 1
12435: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12436: LD_INT 0
12438: PPUSH
12439: CALL 12662 0 1
// end ;
12443: END
// every 35 35$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12444: LD_INT 2
12446: PPUSH
12447: CALL_OW 302
12451: PUSH
12452: LD_INT 2
12454: PPUSH
12455: CALL_OW 255
12459: PUSH
12460: LD_EXP 3
12464: PUSH
12465: LD_INT 1
12467: ARRAY
12468: EQUAL
12469: AND
12470: IFFALSE 12484
12472: GO 12474
12474: DISABLE
// ArabAttack ( Difficulty ) ;
12475: LD_OWVAR 67
12479: PPUSH
12480: CALL 12662 0 1
12484: END
// every 55 55$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12485: LD_INT 2
12487: PPUSH
12488: CALL_OW 302
12492: PUSH
12493: LD_INT 2
12495: PPUSH
12496: CALL_OW 255
12500: PUSH
12501: LD_EXP 3
12505: PUSH
12506: LD_INT 1
12508: ARRAY
12509: EQUAL
12510: AND
12511: IFFALSE 12529
12513: GO 12515
12515: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12516: LD_OWVAR 67
12520: PUSH
12521: LD_INT 1
12523: PLUS
12524: PPUSH
12525: CALL 12662 0 1
12529: END
// every 85 85$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12530: LD_INT 2
12532: PPUSH
12533: CALL_OW 302
12537: PUSH
12538: LD_INT 2
12540: PPUSH
12541: CALL_OW 255
12545: PUSH
12546: LD_EXP 3
12550: PUSH
12551: LD_INT 1
12553: ARRAY
12554: EQUAL
12555: AND
12556: IFFALSE 12574
12558: GO 12560
12560: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12561: LD_OWVAR 67
12565: PUSH
12566: LD_INT 2
12568: PLUS
12569: PPUSH
12570: CALL 12662 0 1
12574: END
// every 115 115$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12575: LD_INT 2
12577: PPUSH
12578: CALL_OW 302
12582: PUSH
12583: LD_INT 2
12585: PPUSH
12586: CALL_OW 255
12590: PUSH
12591: LD_EXP 3
12595: PUSH
12596: LD_INT 1
12598: ARRAY
12599: EQUAL
12600: AND
12601: IFFALSE 12619
12603: GO 12605
12605: DISABLE
// ArabAttack ( Difficulty + 3 ) ;
12606: LD_OWVAR 67
12610: PUSH
12611: LD_INT 3
12613: PLUS
12614: PPUSH
12615: CALL 12662 0 1
12619: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12620: LD_INT 2
12622: PPUSH
12623: LD_INT 81
12625: PUSH
12626: LD_EXP 3
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 70
12643: IFFALSE 12661
12645: GO 12647
12647: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12648: LD_OWVAR 67
12652: PUSH
12653: LD_INT 2
12655: PLUS
12656: PPUSH
12657: CALL 12662 0 1
12661: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12662: LD_INT 0
12664: PPUSH
12665: PPUSH
12666: PPUSH
12667: PPUSH
12668: PPUSH
12669: PPUSH
12670: PPUSH
// uc_side := botSides [ 1 ] ;
12671: LD_ADDR_OWVAR 20
12675: PUSH
12676: LD_EXP 3
12680: PUSH
12681: LD_INT 1
12683: ARRAY
12684: ST_TO_ADDR
// uc_nation := nation_arabian ;
12685: LD_ADDR_OWVAR 21
12689: PUSH
12690: LD_INT 2
12692: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12693: LD_ADDR_VAR 0 4
12697: PUSH
12698: LD_INT 3
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: LD_INT 7
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: PUSH
12712: LD_OWVAR 67
12716: ARRAY
12717: ST_TO_ADDR
// arAttackersInf := [ ] ;
12718: LD_ADDR_EXP 45
12722: PUSH
12723: EMPTY
12724: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12725: LD_ADDR_EXP 46
12729: PUSH
12730: EMPTY
12731: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12732: LD_ADDR_VAR 0 7
12736: PUSH
12737: LD_INT 48
12739: PUSH
12740: LD_INT 52
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 135
12749: PUSH
12750: LD_INT 48
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_VAR 0 1
12765: PUSH
12766: LD_INT 2
12768: MOD
12769: PUSH
12770: LD_INT 1
12772: PLUS
12773: ARRAY
12774: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12775: LD_ADDR_VAR 0 8
12779: PUSH
12780: LD_INT 12
12782: PUSH
12783: LD_INT 13
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 23
12792: PUSH
12793: LD_INT 22
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_VAR 0 1
12808: PUSH
12809: LD_INT 2
12811: MOD
12812: PUSH
12813: LD_INT 1
12815: PLUS
12816: ARRAY
12817: ST_TO_ADDR
// InitHC_All ( ) ;
12818: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12822: LD_ADDR_VAR 0 3
12826: PUSH
12827: DOUBLE
12828: LD_INT 1
12830: DEC
12831: ST_TO_ADDR
12832: LD_INT 3
12834: PUSH
12835: LD_INT 4
12837: PUSH
12838: LD_INT 6
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_OWVAR 67
12850: ARRAY
12851: PUSH
12852: LD_VAR 0 1
12856: PLUS
12857: PUSH
12858: FOR_TO
12859: IFFALSE 12991
// begin PrepareSoldier ( false , skill ) ;
12861: LD_INT 0
12863: PPUSH
12864: LD_VAR 0 4
12868: PPUSH
12869: CALL_OW 381
// un := CreateHuman ;
12873: LD_ADDR_VAR 0 5
12877: PUSH
12878: CALL_OW 44
12882: ST_TO_ADDR
// if i mod 2 = 0 then
12883: LD_VAR 0 3
12887: PUSH
12888: LD_INT 2
12890: MOD
12891: PUSH
12892: LD_INT 0
12894: EQUAL
12895: IFFALSE 12909
// SetClass ( un , class_mortar ) ;
12897: LD_VAR 0 5
12901: PPUSH
12902: LD_INT 8
12904: PPUSH
12905: CALL_OW 336
// SetDir ( un , 1 ) ;
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
12921: LD_VAR 0 5
12925: PPUSH
12926: LD_VAR 0 8
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PPUSH
12935: LD_INT 0
12937: PPUSH
12938: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12942: LD_ADDR_EXP 45
12946: PUSH
12947: LD_EXP 45
12951: PPUSH
12952: LD_VAR 0 5
12956: PPUSH
12957: CALL 53379 0 2
12961: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
12962: LD_VAR 0 5
12966: PPUSH
12967: LD_VAR 0 7
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_VAR 0 7
12980: PUSH
12981: LD_INT 2
12983: ARRAY
12984: PPUSH
12985: CALL_OW 114
// end ;
12989: GO 12858
12991: POP
12992: POP
// for i := 1 to 3 + v do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_INT 3
13005: PUSH
13006: LD_VAR 0 1
13010: PLUS
13011: PUSH
13012: FOR_TO
13013: IFFALSE 13210
// begin PrepareMechanic ( false , skill ) ;
13015: LD_INT 0
13017: PPUSH
13018: LD_VAR 0 4
13022: PPUSH
13023: CALL_OW 383
// un := CreateHuman ;
13027: LD_ADDR_VAR 0 5
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// SetTag ( un , 999 ) ;
13037: LD_VAR 0 5
13041: PPUSH
13042: LD_INT 999
13044: PPUSH
13045: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
13049: LD_INT 14
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_INT 27
13060: PUSH
13061: LD_INT 25
13063: PUSH
13064: LD_INT 28
13066: PUSH
13067: LD_INT 26
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PUSH
13076: LD_VAR 0 3
13080: PUSH
13081: LD_INT 4
13083: MOD
13084: PUSH
13085: LD_INT 1
13087: PLUS
13088: ARRAY
13089: PPUSH
13090: LD_INT 80
13092: PPUSH
13093: CALL 20508 0 5
// veh := CreateVehicle ;
13097: LD_ADDR_VAR 0 6
13101: PUSH
13102: CALL_OW 45
13106: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13107: LD_VAR 0 6
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13119: LD_VAR 0 6
13123: PPUSH
13124: LD_VAR 0 8
13128: PUSH
13129: LD_INT 2
13131: ARRAY
13132: PPUSH
13133: LD_INT 0
13135: PPUSH
13136: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13140: LD_VAR 0 5
13144: PPUSH
13145: LD_VAR 0 6
13149: PPUSH
13150: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13154: LD_VAR 0 5
13158: PPUSH
13159: LD_VAR 0 7
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 7
13172: PUSH
13173: LD_INT 2
13175: ARRAY
13176: PPUSH
13177: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13181: LD_ADDR_EXP 46
13185: PUSH
13186: LD_EXP 46
13190: PPUSH
13191: LD_VAR 0 6
13195: PPUSH
13196: CALL 53379 0 2
13200: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13201: LD_INT 70
13203: PPUSH
13204: CALL_OW 67
// end ;
13208: GO 13012
13210: POP
13211: POP
// wait ( 0 0$2 ) ;
13212: LD_INT 70
13214: PPUSH
13215: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] + ( v div 2 ) do
13219: LD_ADDR_VAR 0 3
13223: PUSH
13224: DOUBLE
13225: LD_INT 1
13227: DEC
13228: ST_TO_ADDR
13229: LD_INT 1
13231: PUSH
13232: LD_INT 2
13234: PUSH
13235: LD_INT 3
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_OWVAR 67
13247: ARRAY
13248: PUSH
13249: LD_VAR 0 1
13253: PUSH
13254: LD_INT 2
13256: DIV
13257: PLUS
13258: PUSH
13259: FOR_TO
13260: IFFALSE 13373
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
13262: LD_INT 14
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: LD_INT 5
13270: PPUSH
13271: LD_INT 29
13273: PPUSH
13274: LD_INT 80
13276: PPUSH
13277: CALL 20508 0 5
// veh := CreateVehicle ;
13281: LD_ADDR_VAR 0 6
13285: PUSH
13286: CALL_OW 45
13290: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13291: LD_VAR 0 6
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13303: LD_VAR 0 6
13307: PPUSH
13308: LD_VAR 0 8
13312: PUSH
13313: LD_INT 2
13315: ARRAY
13316: PPUSH
13317: LD_INT 0
13319: PPUSH
13320: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13324: LD_VAR 0 5
13328: PPUSH
13329: LD_VAR 0 7
13333: PUSH
13334: LD_INT 1
13336: ARRAY
13337: PPUSH
13338: LD_VAR 0 7
13342: PUSH
13343: LD_INT 2
13345: ARRAY
13346: PPUSH
13347: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13351: LD_ADDR_EXP 46
13355: PUSH
13356: LD_EXP 46
13360: PPUSH
13361: LD_VAR 0 6
13365: PPUSH
13366: CALL 53379 0 2
13370: ST_TO_ADDR
// end ;
13371: GO 13259
13373: POP
13374: POP
// end ;
13375: LD_VAR 0 2
13379: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
13380: LD_EXP 45
13384: IFFALSE 13914
13386: GO 13388
13388: DISABLE
13389: LD_INT 0
13391: PPUSH
13392: PPUSH
13393: PPUSH
13394: PPUSH
13395: PPUSH
// begin enable ;
13396: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 120
13404: PUSH
13405: LD_INT 11
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PPUSH
13412: CALL_OW 69
13416: PUSH
13417: FOR_IN
13418: IFFALSE 13434
// SetTag ( i , 0 ) ;
13420: LD_VAR 0 1
13424: PPUSH
13425: LD_INT 0
13427: PPUSH
13428: CALL_OW 109
13432: GO 13417
13434: POP
13435: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13436: LD_ADDR_VAR 0 2
13440: PUSH
13441: LD_EXP 45
13445: PPUSH
13446: LD_INT 50
13448: PUSH
13449: EMPTY
13450: LIST
13451: PPUSH
13452: CALL_OW 72
13456: ST_TO_ADDR
// arAttackersInf := [ ] ;
13457: LD_ADDR_EXP 45
13461: PUSH
13462: EMPTY
13463: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13464: LD_ADDR_VAR 0 1
13468: PUSH
13469: LD_VAR 0 2
13473: PPUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 72
13488: PUSH
13489: FOR_IN
13490: IFFALSE 13621
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13492: LD_ADDR_VAR 0 3
13496: PUSH
13497: LD_INT 81
13499: PUSH
13500: LD_EXP 3
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: LD_INT 120
13518: PUSH
13519: LD_INT 11
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 2
13532: PUSH
13533: LD_INT 21
13535: PUSH
13536: LD_INT 2
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 21
13545: PUSH
13546: LD_INT 3
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PPUSH
13563: CALL_OW 69
13567: PPUSH
13568: LD_VAR 0 1
13572: PPUSH
13573: CALL_OW 74
13577: ST_TO_ADDR
// if not nearest then
13578: LD_VAR 0 3
13582: NOT
13583: IFFALSE 13587
// break ;
13585: GO 13621
// SetTag ( nearest , tMined ) ;
13587: LD_VAR 0 3
13591: PPUSH
13592: LD_INT 11
13594: PPUSH
13595: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13599: LD_VAR 0 1
13603: PPUSH
13604: LD_INT 0
13606: PPUSH
13607: LD_INT 0
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: CALL_OW 192
// end ;
13619: GO 13489
13621: POP
13622: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13623: LD_ADDR_VAR 0 2
13627: PUSH
13628: LD_VAR 0 2
13632: PPUSH
13633: LD_INT 50
13635: PUSH
13636: EMPTY
13637: LIST
13638: PPUSH
13639: CALL_OW 72
13643: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13644: LD_INT 70
13646: PPUSH
13647: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13651: LD_ADDR_VAR 0 2
13655: PUSH
13656: LD_VAR 0 2
13660: PPUSH
13661: LD_INT 50
13663: PUSH
13664: EMPTY
13665: LIST
13666: PPUSH
13667: CALL_OW 72
13671: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13672: LD_ADDR_VAR 0 4
13676: PUSH
13677: LD_INT 81
13679: PUSH
13680: LD_EXP 3
13684: PUSH
13685: LD_INT 1
13687: ARRAY
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PPUSH
13693: CALL_OW 69
13697: ST_TO_ADDR
// for i in tmp do
13698: LD_ADDR_VAR 0 1
13702: PUSH
13703: LD_VAR 0 2
13707: PUSH
13708: FOR_IN
13709: IFFALSE 13905
// if GetClass ( i ) <> 1 then
13711: LD_VAR 0 1
13715: PPUSH
13716: CALL_OW 257
13720: PUSH
13721: LD_INT 1
13723: NONEQUAL
13724: IFFALSE 13752
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13726: LD_VAR 0 1
13730: PPUSH
13731: LD_VAR 0 4
13735: PPUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 74
13745: PPUSH
13746: CALL_OW 115
13750: GO 13903
// if not HasTask ( i ) then
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 314
13761: NOT
13762: IFFALSE 13903
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13764: LD_ADDR_VAR 0 3
13768: PUSH
13769: LD_VAR 0 4
13773: PPUSH
13774: LD_INT 3
13776: PUSH
13777: LD_INT 120
13779: PUSH
13780: LD_INT 11
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 21
13806: PUSH
13807: LD_INT 3
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PPUSH
13823: CALL_OW 72
13827: PPUSH
13828: LD_VAR 0 1
13832: PPUSH
13833: CALL_OW 74
13837: ST_TO_ADDR
// if not nearest then
13838: LD_VAR 0 3
13842: NOT
13843: IFFALSE 13871
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_VAR 0 4
13854: PPUSH
13855: LD_VAR 0 1
13859: PPUSH
13860: CALL_OW 74
13864: PPUSH
13865: CALL_OW 115
13869: GO 13903
// begin SetTag ( nearest , tMined ) ;
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_INT 11
13878: PPUSH
13879: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13883: LD_VAR 0 1
13887: PPUSH
13888: LD_INT 0
13890: PPUSH
13891: LD_INT 0
13893: PPUSH
13894: LD_VAR 0 3
13898: PPUSH
13899: CALL_OW 132
// end ; end ;
13903: GO 13708
13905: POP
13906: POP
// until not tmp ;
13907: LD_VAR 0 2
13911: NOT
13912: IFFALSE 13644
// end ;
13914: PPOPN 5
13916: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
13917: LD_EXP 46
13921: IFFALSE 14144
13923: GO 13925
13925: DISABLE
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
// begin enable ;
13931: ENABLE
// tmp := arAttackersVeh ;
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_EXP 46
13941: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13942: LD_ADDR_EXP 46
13946: PUSH
13947: EMPTY
13948: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
13949: LD_ADDR_VAR 0 3
13953: PUSH
13954: LD_INT 139
13956: PUSH
13957: LD_INT 55
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 155
13966: PUSH
13967: LD_INT 92
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 53
13980: PUSH
13981: LD_INT 61
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 74
13990: PUSH
13991: LD_INT 98
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
14006: LD_VAR 0 2
14010: PUSH
14011: LD_INT 1
14013: ARRAY
14014: PPUSH
14015: LD_INT 139
14017: PPUSH
14018: LD_INT 55
14020: PPUSH
14021: CALL_OW 297
14025: PUSH
14026: LD_VAR 0 2
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: LD_INT 53
14037: PPUSH
14038: LD_INT 61
14040: PPUSH
14041: CALL_OW 297
14045: LESS
14046: IFFALSE 14064
// path := path [ 1 ] else
14048: LD_ADDR_VAR 0 3
14052: PUSH
14053: LD_VAR 0 3
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: ST_TO_ADDR
14062: GO 14078
// path := path [ 2 ] ;
14064: LD_ADDR_VAR 0 3
14068: PUSH
14069: LD_VAR 0 3
14073: PUSH
14074: LD_INT 2
14076: ARRAY
14077: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14078: LD_INT 70
14080: PPUSH
14081: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14085: LD_ADDR_VAR 0 2
14089: PUSH
14090: LD_VAR 0 2
14094: PPUSH
14095: LD_INT 50
14097: PUSH
14098: EMPTY
14099: LIST
14100: PPUSH
14101: CALL_OW 72
14105: ST_TO_ADDR
// for i in tmp do
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: LD_VAR 0 2
14115: PUSH
14116: FOR_IN
14117: IFFALSE 14135
// AgressiveMove ( i , path ) until not tmp ;
14119: LD_VAR 0 1
14123: PPUSH
14124: LD_VAR 0 3
14128: PPUSH
14129: CALL 55989 0 2
14133: GO 14116
14135: POP
14136: POP
14137: LD_VAR 0 2
14141: NOT
14142: IFFALSE 14078
// end ;
14144: PPOPN 3
14146: END
// every 1 1$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
14147: LD_EXP 16
14151: PPUSH
14152: CALL 17770 0 1
14156: PUSH
14157: LD_INT 3
14159: GREATEREQUAL
14160: IFFALSE 14281
14162: GO 14164
14164: DISABLE
14165: LD_INT 0
14167: PPUSH
14168: PPUSH
// begin enable ;
14169: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
14170: LD_ADDR_VAR 0 2
14174: PUSH
14175: LD_EXP 16
14179: PPUSH
14180: LD_INT 61
14182: PUSH
14183: EMPTY
14184: LIST
14185: PPUSH
14186: CALL_OW 72
14190: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
14191: LD_ADDR_EXP 16
14195: PUSH
14196: LD_EXP 16
14200: PUSH
14201: LD_VAR 0 2
14205: DIFF
14206: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14207: LD_INT 70
14209: PPUSH
14210: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14214: LD_ADDR_VAR 0 2
14218: PUSH
14219: LD_VAR 0 2
14223: PPUSH
14224: LD_INT 50
14226: PUSH
14227: EMPTY
14228: LIST
14229: PPUSH
14230: CALL_OW 72
14234: ST_TO_ADDR
// for i in tmp do
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: LD_VAR 0 2
14244: PUSH
14245: FOR_IN
14246: IFFALSE 14272
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
14248: LD_VAR 0 1
14252: PPUSH
14253: LD_INT 98
14255: PUSH
14256: LD_INT 63
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: PPUSH
14266: CALL 55989 0 2
14270: GO 14245
14272: POP
14273: POP
14274: LD_VAR 0 2
14278: NOT
14279: IFFALSE 14207
// end ;
14281: PPOPN 2
14283: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
14284: LD_EXP 9
14288: PUSH
14289: LD_EXP 4
14293: AND
14294: IFFALSE 14851
14296: GO 14298
14298: DISABLE
14299: LD_INT 0
14301: PPUSH
14302: PPUSH
14303: PPUSH
// begin enable ;
14304: ENABLE
// if not arVehiclesAtttackers then
14305: LD_EXP 9
14309: NOT
14310: IFFALSE 14314
// exit ;
14312: GO 14851
// for i in arVehiclesAtttackers do
14314: LD_ADDR_VAR 0 1
14318: PUSH
14319: LD_EXP 9
14323: PUSH
14324: FOR_IN
14325: IFFALSE 14849
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
14327: LD_VAR 0 1
14331: PPUSH
14332: CALL_OW 302
14336: NOT
14337: PUSH
14338: LD_VAR 0 1
14342: PPUSH
14343: CALL_OW 255
14347: PUSH
14348: LD_EXP 3
14352: PUSH
14353: LD_INT 1
14355: ARRAY
14356: NONEQUAL
14357: OR
14358: IFFALSE 14378
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
14360: LD_ADDR_EXP 9
14364: PUSH
14365: LD_EXP 9
14369: PUSH
14370: LD_VAR 0 1
14374: DIFF
14375: ST_TO_ADDR
// continue ;
14376: GO 14324
// end ; if GetTag ( i ) = 300 then
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 110
14387: PUSH
14388: LD_INT 300
14390: EQUAL
14391: IFFALSE 14506
// begin if GetFuel ( i ) < 50 then
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 261
14402: PUSH
14403: LD_INT 50
14405: LESS
14406: IFFALSE 14465
// begin ComMoveXY ( i , 102 , 47 ) ;
14408: LD_VAR 0 1
14412: PPUSH
14413: LD_INT 102
14415: PPUSH
14416: LD_INT 47
14418: PPUSH
14419: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14423: LD_INT 35
14425: PPUSH
14426: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14430: LD_VAR 0 1
14434: PPUSH
14435: LD_INT 102
14437: PPUSH
14438: LD_INT 47
14440: PPUSH
14441: CALL_OW 297
14445: PUSH
14446: LD_INT 4
14448: LESS
14449: IFFALSE 14423
// SetFuel ( i , 100 ) ;
14451: LD_VAR 0 1
14455: PPUSH
14456: LD_INT 100
14458: PPUSH
14459: CALL_OW 240
// end else
14463: GO 14506
// if not IsInArea ( i , arParkingArea ) then
14465: LD_VAR 0 1
14469: PPUSH
14470: LD_INT 14
14472: PPUSH
14473: CALL_OW 308
14477: NOT
14478: IFFALSE 14494
// ComMoveToArea ( i , arParkingArea ) else
14480: LD_VAR 0 1
14484: PPUSH
14485: LD_INT 14
14487: PPUSH
14488: CALL_OW 113
14492: GO 14506
// SetTag ( i , 301 ) ;
14494: LD_VAR 0 1
14498: PPUSH
14499: LD_INT 301
14501: PPUSH
14502: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 110
14515: PUSH
14516: LD_INT 301
14518: EQUAL
14519: IFFALSE 14661
// begin if GetLives ( i ) < 1000 then
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 256
14530: PUSH
14531: LD_INT 1000
14533: LESS
14534: IFFALSE 14638
// begin if not IsDrivenBy ( i ) then
14536: LD_VAR 0 1
14540: PPUSH
14541: CALL_OW 311
14545: NOT
14546: IFFALSE 14550
// continue ;
14548: GO 14324
// mech := IsDrivenBy ( i ) ;
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 311
14564: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14565: LD_VAR 0 2
14569: PPUSH
14570: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14574: LD_VAR 0 2
14578: PPUSH
14579: LD_VAR 0 1
14583: PPUSH
14584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14588: LD_INT 35
14590: PPUSH
14591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 256
14604: PUSH
14605: LD_INT 1000
14607: EQUAL
14608: IFFALSE 14588
// SetLives ( mech , 1000 ) ;
14610: LD_VAR 0 2
14614: PPUSH
14615: LD_INT 1000
14617: PPUSH
14618: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14622: LD_VAR 0 2
14626: PPUSH
14627: LD_VAR 0 1
14631: PPUSH
14632: CALL_OW 120
// end else
14636: GO 14661
// if IsDrivenBy ( i ) then
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 311
14647: IFFALSE 14661
// SetTag ( i , 0 ) ;
14649: LD_VAR 0 1
14653: PPUSH
14654: LD_INT 0
14656: PPUSH
14657: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL_OW 110
14670: PUSH
14671: LD_INT 300
14673: LESS
14674: IFFALSE 14847
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_INT 1
14683: PPUSH
14684: LD_INT 81
14686: PUSH
14687: LD_EXP 3
14691: PUSH
14692: LD_INT 1
14694: ARRAY
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PPUSH
14700: CALL_OW 70
14704: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 256
14714: PUSH
14715: LD_INT 650
14717: LESS
14718: IFFALSE 14743
// begin ComStop ( i ) ;
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 141
// SetTag ( i , 300 ) ;
14729: LD_VAR 0 1
14733: PPUSH
14734: LD_INT 300
14736: PPUSH
14737: CALL_OW 109
// continue ;
14741: GO 14324
// end ; if enemy then
14743: LD_VAR 0 3
14747: IFFALSE 14787
// begin if not HasTask ( i ) then
14749: LD_VAR 0 1
14753: PPUSH
14754: CALL_OW 314
14758: NOT
14759: IFFALSE 14785
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14761: LD_VAR 0 1
14765: PPUSH
14766: LD_VAR 0 3
14770: PPUSH
14771: LD_VAR 0 1
14775: PPUSH
14776: CALL_OW 74
14780: PPUSH
14781: CALL_OW 115
// end else
14785: GO 14847
// if arVehiclesAtttackers then
14787: LD_EXP 9
14791: IFFALSE 14847
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14793: LD_ADDR_VAR 0 3
14797: PUSH
14798: LD_INT 81
14800: PUSH
14801: LD_EXP 3
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 69
14818: ST_TO_ADDR
// if enemy then
14819: LD_VAR 0 3
14823: IFFALSE 14847
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14825: LD_VAR 0 1
14829: PPUSH
14830: LD_INT 99
14832: PUSH
14833: LD_INT 66
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: PPUSH
14843: CALL 55989 0 2
// end ; end ; end ;
14847: GO 14324
14849: POP
14850: POP
// end ;
14851: PPOPN 3
14853: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14854: LD_INT 22
14856: PUSH
14857: LD_EXP 3
14861: PUSH
14862: LD_INT 1
14864: ARRAY
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 32
14872: PUSH
14873: LD_INT 1
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: IFFALSE 14971
14890: GO 14892
14892: DISABLE
14893: LD_INT 0
14895: PPUSH
// begin enable ;
14896: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14897: LD_ADDR_VAR 0 1
14901: PUSH
14902: LD_INT 22
14904: PUSH
14905: LD_EXP 3
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 32
14920: PUSH
14921: LD_INT 1
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PPUSH
14932: CALL_OW 69
14936: PUSH
14937: FOR_IN
14938: IFFALSE 14969
// if GetFuel ( i ) < 3 then
14940: LD_VAR 0 1
14944: PPUSH
14945: CALL_OW 261
14949: PUSH
14950: LD_INT 3
14952: LESS
14953: IFFALSE 14967
// SetFuel ( i , 3 ) ;
14955: LD_VAR 0 1
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: CALL_OW 240
14967: GO 14937
14969: POP
14970: POP
// end ; end_of_file
14971: PPOPN 1
14973: END
// every 0 0$20 trigger game do
14974: LD_EXP 2
14978: IFFALSE 15023
14980: GO 14982
14982: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14983: LD_INT 15
14985: PUSH
14986: LD_INT 17
14988: PUSH
14989: LD_INT 16
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: PPUSH
15001: LD_EXP 32
15005: PUSH
15006: LD_INT 2
15008: ARRAY
15009: PPUSH
15010: LD_EXP 32
15014: PUSH
15015: LD_INT 1
15017: ARRAY
15018: PPUSH
15019: CALL 15024 0 3
15023: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
// if not areas then
15030: LD_VAR 0 1
15034: NOT
15035: IFFALSE 15039
// exit ;
15037: GO 15416
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
15039: LD_ADDR_VAR 0 7
15043: PUSH
15044: LD_INT 18
15046: PUSH
15047: LD_INT 19
15049: PUSH
15050: LD_INT 20
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: ST_TO_ADDR
// x := 5 ;
15058: LD_ADDR_VAR 0 6
15062: PUSH
15063: LD_INT 5
15065: ST_TO_ADDR
// repeat wait ( time ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: CALL_OW 67
// if tick < [ 22 22$00 , 19 19$00 , 15 15$00 ] [ Difficulty ] then
15075: LD_OWVAR 1
15079: PUSH
15080: LD_INT 46200
15082: PUSH
15083: LD_INT 39900
15085: PUSH
15086: LD_INT 31500
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: PUSH
15094: LD_OWVAR 67
15098: ARRAY
15099: LESS
15100: IFFALSE 15239
// begin for i := 1 to multi_sides do
15102: LD_ADDR_VAR 0 5
15106: PUSH
15107: DOUBLE
15108: LD_INT 1
15110: DEC
15111: ST_TO_ADDR
15112: LD_EXP 18
15116: PUSH
15117: FOR_TO
15118: IFFALSE 15230
// if multi_sides [ i ] then
15120: LD_EXP 18
15124: PUSH
15125: LD_VAR 0 5
15129: ARRAY
15130: IFFALSE 15228
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
15132: LD_VAR 0 7
15136: PUSH
15137: LD_EXP 18
15141: PUSH
15142: LD_VAR 0 5
15146: ARRAY
15147: ARRAY
15148: PPUSH
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 287
15156: PUSH
15157: LD_INT 32
15159: PUSH
15160: LD_INT 25
15162: PUSH
15163: LD_INT 23
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: LIST
15170: PUSH
15171: LD_OWVAR 67
15175: ARRAY
15176: LESS
15177: IFFALSE 15228
// begin amount := amount - ( x * 10 ) ;
15179: LD_ADDR_VAR 0 3
15183: PUSH
15184: LD_VAR 0 3
15188: PUSH
15189: LD_VAR 0 6
15193: PUSH
15194: LD_INT 10
15196: MUL
15197: MINUS
15198: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
15199: LD_VAR 0 6
15203: PPUSH
15204: LD_VAR 0 7
15208: PUSH
15209: LD_EXP 18
15213: PUSH
15214: LD_VAR 0 5
15218: ARRAY
15219: ARRAY
15220: PPUSH
15221: LD_INT 1
15223: PPUSH
15224: CALL_OW 55
// end ; end ;
15228: GO 15117
15230: POP
15231: POP
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// end ; for i in areas do
15239: LD_ADDR_VAR 0 5
15243: PUSH
15244: LD_VAR 0 1
15248: PUSH
15249: FOR_IN
15250: IFFALSE 15333
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
15252: LD_VAR 0 5
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 287
15264: PUSH
15265: LD_INT 25
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_INT 20
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: LD_OWVAR 67
15283: ARRAY
15284: LESS
15285: IFFALSE 15331
// begin wait ( 0 0$5 ) ;
15287: LD_INT 175
15289: PPUSH
15290: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15294: LD_VAR 0 6
15298: PPUSH
15299: LD_VAR 0 5
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15311: LD_ADDR_VAR 0 3
15315: PUSH
15316: LD_VAR 0 3
15320: PUSH
15321: LD_VAR 0 6
15325: PUSH
15326: LD_INT 10
15328: MUL
15329: MINUS
15330: ST_TO_ADDR
// end ; end ;
15331: GO 15249
15333: POP
15334: POP
// time := time + 0 0$2 ;
15335: LD_ADDR_VAR 0 2
15339: PUSH
15340: LD_VAR 0 2
15344: PUSH
15345: LD_INT 70
15347: PLUS
15348: ST_TO_ADDR
// x := x - 1 ;
15349: LD_ADDR_VAR 0 6
15353: PUSH
15354: LD_VAR 0 6
15358: PUSH
15359: LD_INT 1
15361: MINUS
15362: ST_TO_ADDR
// if x = 0 then
15363: LD_VAR 0 6
15367: PUSH
15368: LD_INT 0
15370: EQUAL
15371: IFFALSE 15381
// x := 5 ;
15373: LD_ADDR_VAR 0 6
15377: PUSH
15378: LD_INT 5
15380: ST_TO_ADDR
// if time > 1 1$00 then
15381: LD_VAR 0 2
15385: PUSH
15386: LD_INT 2100
15388: GREATER
15389: IFFALSE 15399
// time := 0 0$30 ;
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: LD_INT 1050
15398: ST_TO_ADDR
// until not game or amount <= 0 ;
15399: LD_EXP 2
15403: NOT
15404: PUSH
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 0
15412: LESSEQUAL
15413: OR
15414: IFFALSE 15066
// end ; end_of_file
15416: LD_VAR 0 4
15420: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15421: LD_VAR 0 1
15425: PUSH
15426: LD_INT 200
15428: DOUBLE
15429: GREATEREQUAL
15430: IFFALSE 15438
15432: LD_INT 299
15434: DOUBLE
15435: LESSEQUAL
15436: IFTRUE 15440
15438: GO 15472
15440: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15441: LD_VAR 0 1
15445: PPUSH
15446: LD_VAR 0 2
15450: PPUSH
15451: LD_VAR 0 3
15455: PPUSH
15456: LD_VAR 0 4
15460: PPUSH
15461: LD_VAR 0 5
15465: PPUSH
15466: CALL 59104 0 5
15470: GO 15549
15472: LD_INT 300
15474: DOUBLE
15475: GREATEREQUAL
15476: IFFALSE 15484
15478: LD_INT 399
15480: DOUBLE
15481: LESSEQUAL
15482: IFTRUE 15486
15484: GO 15548
15486: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15487: LD_VAR 0 1
15491: PPUSH
15492: LD_VAR 0 2
15496: PPUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: LD_VAR 0 4
15506: PPUSH
15507: LD_VAR 0 5
15511: PPUSH
15512: LD_VAR 0 6
15516: PPUSH
15517: LD_VAR 0 7
15521: PPUSH
15522: LD_VAR 0 8
15526: PPUSH
15527: LD_VAR 0 9
15531: PPUSH
15532: LD_VAR 0 10
15536: PPUSH
15537: LD_VAR 0 11
15541: PPUSH
15542: CALL 63899 0 11
15546: GO 15549
15548: POP
// end ;
15549: PPOPN 11
15551: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15552: LD_VAR 0 1
15556: PPUSH
15557: LD_VAR 0 2
15561: PPUSH
15562: LD_VAR 0 3
15566: PPUSH
15567: LD_VAR 0 4
15571: PPUSH
15572: LD_VAR 0 5
15576: PPUSH
15577: CALL 58519 0 5
// end ; end_of_file
15581: PPOPN 5
15583: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15584: LD_INT 0
15586: PPUSH
15587: PPUSH
// if exist_mode then
15588: LD_VAR 0 2
15592: IFFALSE 15638
// begin unit := CreateCharacter ( prefix & ident ) ;
15594: LD_ADDR_VAR 0 5
15598: PUSH
15599: LD_VAR 0 3
15603: PUSH
15604: LD_VAR 0 1
15608: STR
15609: PPUSH
15610: CALL_OW 34
15614: ST_TO_ADDR
// if unit then
15615: LD_VAR 0 5
15619: IFFALSE 15636
// DeleteCharacters ( prefix & ident ) ;
15621: LD_VAR 0 3
15625: PUSH
15626: LD_VAR 0 1
15630: STR
15631: PPUSH
15632: CALL_OW 40
// end else
15636: GO 15653
// unit := NewCharacter ( ident ) ;
15638: LD_ADDR_VAR 0 5
15642: PUSH
15643: LD_VAR 0 1
15647: PPUSH
15648: CALL_OW 25
15652: ST_TO_ADDR
// result := unit ;
15653: LD_ADDR_VAR 0 4
15657: PUSH
15658: LD_VAR 0 5
15662: ST_TO_ADDR
// end ;
15663: LD_VAR 0 4
15667: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15668: LD_INT 0
15670: PPUSH
15671: PPUSH
// if exist_mode then
15672: LD_VAR 0 2
15676: IFFALSE 15701
// unit := CreateCharacter ( prefix & ident ) else
15678: LD_ADDR_VAR 0 5
15682: PUSH
15683: LD_VAR 0 3
15687: PUSH
15688: LD_VAR 0 1
15692: STR
15693: PPUSH
15694: CALL_OW 34
15698: ST_TO_ADDR
15699: GO 15716
// unit := NewCharacter ( ident ) ;
15701: LD_ADDR_VAR 0 5
15705: PUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 25
15715: ST_TO_ADDR
// result := unit ;
15716: LD_ADDR_VAR 0 4
15720: PUSH
15721: LD_VAR 0 5
15725: ST_TO_ADDR
// end ;
15726: LD_VAR 0 4
15730: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15731: LD_INT 0
15733: PPUSH
15734: PPUSH
// if not side or not nation then
15735: LD_VAR 0 1
15739: NOT
15740: PUSH
15741: LD_VAR 0 2
15745: NOT
15746: OR
15747: IFFALSE 15751
// exit ;
15749: GO 16519
// case nation of nation_american :
15751: LD_VAR 0 2
15755: PUSH
15756: LD_INT 1
15758: DOUBLE
15759: EQUAL
15760: IFTRUE 15764
15762: GO 15978
15764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15765: LD_ADDR_VAR 0 4
15769: PUSH
15770: LD_INT 35
15772: PUSH
15773: LD_INT 45
15775: PUSH
15776: LD_INT 46
15778: PUSH
15779: LD_INT 47
15781: PUSH
15782: LD_INT 82
15784: PUSH
15785: LD_INT 83
15787: PUSH
15788: LD_INT 84
15790: PUSH
15791: LD_INT 85
15793: PUSH
15794: LD_INT 86
15796: PUSH
15797: LD_INT 1
15799: PUSH
15800: LD_INT 2
15802: PUSH
15803: LD_INT 6
15805: PUSH
15806: LD_INT 15
15808: PUSH
15809: LD_INT 16
15811: PUSH
15812: LD_INT 7
15814: PUSH
15815: LD_INT 12
15817: PUSH
15818: LD_INT 13
15820: PUSH
15821: LD_INT 10
15823: PUSH
15824: LD_INT 14
15826: PUSH
15827: LD_INT 20
15829: PUSH
15830: LD_INT 21
15832: PUSH
15833: LD_INT 22
15835: PUSH
15836: LD_INT 25
15838: PUSH
15839: LD_INT 32
15841: PUSH
15842: LD_INT 27
15844: PUSH
15845: LD_INT 36
15847: PUSH
15848: LD_INT 69
15850: PUSH
15851: LD_INT 39
15853: PUSH
15854: LD_INT 34
15856: PUSH
15857: LD_INT 40
15859: PUSH
15860: LD_INT 48
15862: PUSH
15863: LD_INT 49
15865: PUSH
15866: LD_INT 50
15868: PUSH
15869: LD_INT 51
15871: PUSH
15872: LD_INT 52
15874: PUSH
15875: LD_INT 53
15877: PUSH
15878: LD_INT 54
15880: PUSH
15881: LD_INT 55
15883: PUSH
15884: LD_INT 56
15886: PUSH
15887: LD_INT 57
15889: PUSH
15890: LD_INT 58
15892: PUSH
15893: LD_INT 59
15895: PUSH
15896: LD_INT 60
15898: PUSH
15899: LD_INT 61
15901: PUSH
15902: LD_INT 62
15904: PUSH
15905: LD_INT 80
15907: PUSH
15908: LD_INT 82
15910: PUSH
15911: LD_INT 83
15913: PUSH
15914: LD_INT 84
15916: PUSH
15917: LD_INT 85
15919: PUSH
15920: LD_INT 86
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: ST_TO_ADDR
15976: GO 16443
15978: LD_INT 2
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 16212
15986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15987: LD_ADDR_VAR 0 4
15991: PUSH
15992: LD_INT 35
15994: PUSH
15995: LD_INT 45
15997: PUSH
15998: LD_INT 46
16000: PUSH
16001: LD_INT 47
16003: PUSH
16004: LD_INT 82
16006: PUSH
16007: LD_INT 83
16009: PUSH
16010: LD_INT 84
16012: PUSH
16013: LD_INT 85
16015: PUSH
16016: LD_INT 87
16018: PUSH
16019: LD_INT 70
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: LD_INT 11
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: LD_INT 4
16033: PUSH
16034: LD_INT 5
16036: PUSH
16037: LD_INT 6
16039: PUSH
16040: LD_INT 15
16042: PUSH
16043: LD_INT 18
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: LD_INT 17
16051: PUSH
16052: LD_INT 8
16054: PUSH
16055: LD_INT 20
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_INT 72
16066: PUSH
16067: LD_INT 26
16069: PUSH
16070: LD_INT 69
16072: PUSH
16073: LD_INT 39
16075: PUSH
16076: LD_INT 40
16078: PUSH
16079: LD_INT 41
16081: PUSH
16082: LD_INT 42
16084: PUSH
16085: LD_INT 43
16087: PUSH
16088: LD_INT 48
16090: PUSH
16091: LD_INT 49
16093: PUSH
16094: LD_INT 50
16096: PUSH
16097: LD_INT 51
16099: PUSH
16100: LD_INT 52
16102: PUSH
16103: LD_INT 53
16105: PUSH
16106: LD_INT 54
16108: PUSH
16109: LD_INT 55
16111: PUSH
16112: LD_INT 56
16114: PUSH
16115: LD_INT 60
16117: PUSH
16118: LD_INT 61
16120: PUSH
16121: LD_INT 62
16123: PUSH
16124: LD_INT 66
16126: PUSH
16127: LD_INT 67
16129: PUSH
16130: LD_INT 68
16132: PUSH
16133: LD_INT 81
16135: PUSH
16136: LD_INT 82
16138: PUSH
16139: LD_INT 83
16141: PUSH
16142: LD_INT 84
16144: PUSH
16145: LD_INT 85
16147: PUSH
16148: LD_INT 87
16150: PUSH
16151: LD_INT 88
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: ST_TO_ADDR
16210: GO 16443
16212: LD_INT 3
16214: DOUBLE
16215: EQUAL
16216: IFTRUE 16220
16218: GO 16442
16220: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16221: LD_ADDR_VAR 0 4
16225: PUSH
16226: LD_INT 46
16228: PUSH
16229: LD_INT 47
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 82
16240: PUSH
16241: LD_INT 83
16243: PUSH
16244: LD_INT 84
16246: PUSH
16247: LD_INT 85
16249: PUSH
16250: LD_INT 86
16252: PUSH
16253: LD_INT 11
16255: PUSH
16256: LD_INT 9
16258: PUSH
16259: LD_INT 20
16261: PUSH
16262: LD_INT 19
16264: PUSH
16265: LD_INT 21
16267: PUSH
16268: LD_INT 24
16270: PUSH
16271: LD_INT 22
16273: PUSH
16274: LD_INT 25
16276: PUSH
16277: LD_INT 28
16279: PUSH
16280: LD_INT 29
16282: PUSH
16283: LD_INT 30
16285: PUSH
16286: LD_INT 31
16288: PUSH
16289: LD_INT 37
16291: PUSH
16292: LD_INT 38
16294: PUSH
16295: LD_INT 32
16297: PUSH
16298: LD_INT 27
16300: PUSH
16301: LD_INT 33
16303: PUSH
16304: LD_INT 69
16306: PUSH
16307: LD_INT 39
16309: PUSH
16310: LD_INT 34
16312: PUSH
16313: LD_INT 40
16315: PUSH
16316: LD_INT 71
16318: PUSH
16319: LD_INT 23
16321: PUSH
16322: LD_INT 44
16324: PUSH
16325: LD_INT 48
16327: PUSH
16328: LD_INT 49
16330: PUSH
16331: LD_INT 50
16333: PUSH
16334: LD_INT 51
16336: PUSH
16337: LD_INT 52
16339: PUSH
16340: LD_INT 53
16342: PUSH
16343: LD_INT 54
16345: PUSH
16346: LD_INT 55
16348: PUSH
16349: LD_INT 56
16351: PUSH
16352: LD_INT 57
16354: PUSH
16355: LD_INT 58
16357: PUSH
16358: LD_INT 59
16360: PUSH
16361: LD_INT 63
16363: PUSH
16364: LD_INT 64
16366: PUSH
16367: LD_INT 65
16369: PUSH
16370: LD_INT 82
16372: PUSH
16373: LD_INT 83
16375: PUSH
16376: LD_INT 84
16378: PUSH
16379: LD_INT 85
16381: PUSH
16382: LD_INT 86
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: ST_TO_ADDR
16440: GO 16443
16442: POP
// if state > - 1 and state < 3 then
16443: LD_VAR 0 3
16447: PUSH
16448: LD_INT 1
16450: NEG
16451: GREATER
16452: PUSH
16453: LD_VAR 0 3
16457: PUSH
16458: LD_INT 3
16460: LESS
16461: AND
16462: IFFALSE 16519
// for i in result do
16464: LD_ADDR_VAR 0 5
16468: PUSH
16469: LD_VAR 0 4
16473: PUSH
16474: FOR_IN
16475: IFFALSE 16517
// if GetTech ( i , side ) <> state then
16477: LD_VAR 0 5
16481: PPUSH
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 321
16491: PUSH
16492: LD_VAR 0 3
16496: NONEQUAL
16497: IFFALSE 16515
// result := result diff i ;
16499: LD_ADDR_VAR 0 4
16503: PUSH
16504: LD_VAR 0 4
16508: PUSH
16509: LD_VAR 0 5
16513: DIFF
16514: ST_TO_ADDR
16515: GO 16474
16517: POP
16518: POP
// end ;
16519: LD_VAR 0 4
16523: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16524: LD_INT 0
16526: PPUSH
16527: PPUSH
16528: PPUSH
// result := true ;
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_INT 1
16536: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16537: LD_ADDR_VAR 0 5
16541: PUSH
16542: LD_VAR 0 2
16546: PPUSH
16547: CALL_OW 480
16551: ST_TO_ADDR
// if not tmp then
16552: LD_VAR 0 5
16556: NOT
16557: IFFALSE 16561
// exit ;
16559: GO 16610
// for i in tmp do
16561: LD_ADDR_VAR 0 4
16565: PUSH
16566: LD_VAR 0 5
16570: PUSH
16571: FOR_IN
16572: IFFALSE 16608
// if GetTech ( i , side ) <> state_researched then
16574: LD_VAR 0 4
16578: PPUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 321
16588: PUSH
16589: LD_INT 2
16591: NONEQUAL
16592: IFFALSE 16606
// begin result := false ;
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_INT 0
16601: ST_TO_ADDR
// exit ;
16602: POP
16603: POP
16604: GO 16610
// end ;
16606: GO 16571
16608: POP
16609: POP
// end ;
16610: LD_VAR 0 3
16614: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16615: LD_INT 0
16617: PPUSH
16618: PPUSH
16619: PPUSH
16620: PPUSH
16621: PPUSH
16622: PPUSH
16623: PPUSH
16624: PPUSH
16625: PPUSH
16626: PPUSH
16627: PPUSH
16628: PPUSH
16629: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16630: LD_VAR 0 1
16634: NOT
16635: PUSH
16636: LD_VAR 0 1
16640: PPUSH
16641: CALL_OW 257
16645: PUSH
16646: LD_INT 9
16648: NONEQUAL
16649: OR
16650: IFFALSE 16654
// exit ;
16652: GO 17227
// side := GetSide ( unit ) ;
16654: LD_ADDR_VAR 0 9
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 255
16668: ST_TO_ADDR
// tech_space := tech_spacanom ;
16669: LD_ADDR_VAR 0 12
16673: PUSH
16674: LD_INT 29
16676: ST_TO_ADDR
// tech_time := tech_taurad ;
16677: LD_ADDR_VAR 0 13
16681: PUSH
16682: LD_INT 28
16684: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16685: LD_ADDR_VAR 0 11
16689: PUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 310
16699: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16700: LD_VAR 0 11
16704: PPUSH
16705: CALL_OW 247
16709: PUSH
16710: LD_INT 2
16712: EQUAL
16713: IFFALSE 16717
// exit ;
16715: GO 17227
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16717: LD_ADDR_VAR 0 8
16721: PUSH
16722: LD_INT 81
16724: PUSH
16725: LD_VAR 0 9
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 3
16736: PUSH
16737: LD_INT 21
16739: PUSH
16740: LD_INT 3
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PPUSH
16755: CALL_OW 69
16759: ST_TO_ADDR
// if not tmp then
16760: LD_VAR 0 8
16764: NOT
16765: IFFALSE 16769
// exit ;
16767: GO 17227
// if in_unit then
16769: LD_VAR 0 11
16773: IFFALSE 16797
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16775: LD_ADDR_VAR 0 10
16779: PUSH
16780: LD_VAR 0 8
16784: PPUSH
16785: LD_VAR 0 11
16789: PPUSH
16790: CALL_OW 74
16794: ST_TO_ADDR
16795: GO 16817
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16797: LD_ADDR_VAR 0 10
16801: PUSH
16802: LD_VAR 0 8
16806: PPUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 74
16816: ST_TO_ADDR
// if not enemy then
16817: LD_VAR 0 10
16821: NOT
16822: IFFALSE 16826
// exit ;
16824: GO 17227
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16826: LD_VAR 0 11
16830: PUSH
16831: LD_VAR 0 11
16835: PPUSH
16836: LD_VAR 0 10
16840: PPUSH
16841: CALL_OW 296
16845: PUSH
16846: LD_INT 13
16848: GREATER
16849: AND
16850: PUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: LD_VAR 0 10
16860: PPUSH
16861: CALL_OW 296
16865: PUSH
16866: LD_INT 12
16868: GREATER
16869: OR
16870: IFFALSE 16874
// exit ;
16872: GO 17227
// missile := [ 1 ] ;
16874: LD_ADDR_VAR 0 14
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: EMPTY
16883: LIST
16884: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16885: LD_VAR 0 9
16889: PPUSH
16890: LD_VAR 0 12
16894: PPUSH
16895: CALL_OW 325
16899: IFFALSE 16928
// missile := Replace ( missile , missile + 1 , 2 ) ;
16901: LD_ADDR_VAR 0 14
16905: PUSH
16906: LD_VAR 0 14
16910: PPUSH
16911: LD_VAR 0 14
16915: PUSH
16916: LD_INT 1
16918: PLUS
16919: PPUSH
16920: LD_INT 2
16922: PPUSH
16923: CALL_OW 1
16927: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16928: LD_VAR 0 9
16932: PPUSH
16933: LD_VAR 0 13
16937: PPUSH
16938: CALL_OW 325
16942: PUSH
16943: LD_VAR 0 10
16947: PPUSH
16948: CALL_OW 255
16952: PPUSH
16953: LD_VAR 0 13
16957: PPUSH
16958: CALL_OW 325
16962: NOT
16963: AND
16964: IFFALSE 16993
// missile := Replace ( missile , missile + 1 , 3 ) ;
16966: LD_ADDR_VAR 0 14
16970: PUSH
16971: LD_VAR 0 14
16975: PPUSH
16976: LD_VAR 0 14
16980: PUSH
16981: LD_INT 1
16983: PLUS
16984: PPUSH
16985: LD_INT 3
16987: PPUSH
16988: CALL_OW 1
16992: ST_TO_ADDR
// if missile < 2 then
16993: LD_VAR 0 14
16997: PUSH
16998: LD_INT 2
17000: LESS
17001: IFFALSE 17005
// exit ;
17003: GO 17227
// x := GetX ( enemy ) ;
17005: LD_ADDR_VAR 0 4
17009: PUSH
17010: LD_VAR 0 10
17014: PPUSH
17015: CALL_OW 250
17019: ST_TO_ADDR
// y := GetY ( enemy ) ;
17020: LD_ADDR_VAR 0 5
17024: PUSH
17025: LD_VAR 0 10
17029: PPUSH
17030: CALL_OW 251
17034: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17035: LD_ADDR_VAR 0 6
17039: PUSH
17040: LD_VAR 0 4
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PPUSH
17049: LD_INT 1
17051: PPUSH
17052: CALL_OW 12
17056: PLUS
17057: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17058: LD_ADDR_VAR 0 7
17062: PUSH
17063: LD_VAR 0 5
17067: PUSH
17068: LD_INT 1
17070: NEG
17071: PPUSH
17072: LD_INT 1
17074: PPUSH
17075: CALL_OW 12
17079: PLUS
17080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17081: LD_VAR 0 6
17085: PPUSH
17086: LD_VAR 0 7
17090: PPUSH
17091: CALL_OW 488
17095: NOT
17096: IFFALSE 17118
// begin _x := x ;
17098: LD_ADDR_VAR 0 6
17102: PUSH
17103: LD_VAR 0 4
17107: ST_TO_ADDR
// _y := y ;
17108: LD_ADDR_VAR 0 7
17112: PUSH
17113: LD_VAR 0 5
17117: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17118: LD_ADDR_VAR 0 3
17122: PUSH
17123: LD_INT 1
17125: PPUSH
17126: LD_VAR 0 14
17130: PPUSH
17131: CALL_OW 12
17135: ST_TO_ADDR
// case i of 1 :
17136: LD_VAR 0 3
17140: PUSH
17141: LD_INT 1
17143: DOUBLE
17144: EQUAL
17145: IFTRUE 17149
17147: GO 17166
17149: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17150: LD_VAR 0 1
17154: PPUSH
17155: LD_VAR 0 10
17159: PPUSH
17160: CALL_OW 115
17164: GO 17227
17166: LD_INT 2
17168: DOUBLE
17169: EQUAL
17170: IFTRUE 17174
17172: GO 17196
17174: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17175: LD_VAR 0 1
17179: PPUSH
17180: LD_VAR 0 6
17184: PPUSH
17185: LD_VAR 0 7
17189: PPUSH
17190: CALL_OW 153
17194: GO 17227
17196: LD_INT 3
17198: DOUBLE
17199: EQUAL
17200: IFTRUE 17204
17202: GO 17226
17204: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17205: LD_VAR 0 1
17209: PPUSH
17210: LD_VAR 0 6
17214: PPUSH
17215: LD_VAR 0 7
17219: PPUSH
17220: CALL_OW 154
17224: GO 17227
17226: POP
// end ;
17227: LD_VAR 0 2
17231: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17232: LD_INT 0
17234: PPUSH
17235: PPUSH
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
// if not unit or not building then
17240: LD_VAR 0 1
17244: NOT
17245: PUSH
17246: LD_VAR 0 2
17250: NOT
17251: OR
17252: IFFALSE 17256
// exit ;
17254: GO 17414
// x := GetX ( building ) ;
17256: LD_ADDR_VAR 0 5
17260: PUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: CALL_OW 250
17270: ST_TO_ADDR
// y := GetY ( building ) ;
17271: LD_ADDR_VAR 0 6
17275: PUSH
17276: LD_VAR 0 2
17280: PPUSH
17281: CALL_OW 251
17285: ST_TO_ADDR
// for i = 0 to 5 do
17286: LD_ADDR_VAR 0 4
17290: PUSH
17291: DOUBLE
17292: LD_INT 0
17294: DEC
17295: ST_TO_ADDR
17296: LD_INT 5
17298: PUSH
17299: FOR_TO
17300: IFFALSE 17412
// begin _x := ShiftX ( x , i , 3 ) ;
17302: LD_ADDR_VAR 0 7
17306: PUSH
17307: LD_VAR 0 5
17311: PPUSH
17312: LD_VAR 0 4
17316: PPUSH
17317: LD_INT 3
17319: PPUSH
17320: CALL_OW 272
17324: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17325: LD_ADDR_VAR 0 8
17329: PUSH
17330: LD_VAR 0 6
17334: PPUSH
17335: LD_VAR 0 4
17339: PPUSH
17340: LD_INT 3
17342: PPUSH
17343: CALL_OW 273
17347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17348: LD_VAR 0 7
17352: PPUSH
17353: LD_VAR 0 8
17357: PPUSH
17358: CALL_OW 488
17362: NOT
17363: IFFALSE 17367
// continue ;
17365: GO 17299
// if HexInfo ( _x , _y ) = 0 then
17367: LD_VAR 0 7
17371: PPUSH
17372: LD_VAR 0 8
17376: PPUSH
17377: CALL_OW 428
17381: PUSH
17382: LD_INT 0
17384: EQUAL
17385: IFFALSE 17410
// begin ComMoveXY ( unit , _x , _y ) ;
17387: LD_VAR 0 1
17391: PPUSH
17392: LD_VAR 0 7
17396: PPUSH
17397: LD_VAR 0 8
17401: PPUSH
17402: CALL_OW 111
// exit ;
17406: POP
17407: POP
17408: GO 17414
// end ; end ;
17410: GO 17299
17412: POP
17413: POP
// end ;
17414: LD_VAR 0 3
17418: RET
// export function ScanBase ( side , base_area ) ; begin
17419: LD_INT 0
17421: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17422: LD_ADDR_VAR 0 3
17426: PUSH
17427: LD_VAR 0 2
17431: PPUSH
17432: LD_INT 81
17434: PUSH
17435: LD_VAR 0 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PPUSH
17444: CALL_OW 70
17448: ST_TO_ADDR
// end ;
17449: LD_VAR 0 3
17453: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17454: LD_INT 0
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
// result := false ;
17460: LD_ADDR_VAR 0 2
17464: PUSH
17465: LD_INT 0
17467: ST_TO_ADDR
// side := GetSide ( unit ) ;
17468: LD_ADDR_VAR 0 3
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17483: LD_ADDR_VAR 0 4
17487: PUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 248
17497: ST_TO_ADDR
// case nat of 1 :
17498: LD_VAR 0 4
17502: PUSH
17503: LD_INT 1
17505: DOUBLE
17506: EQUAL
17507: IFTRUE 17511
17509: GO 17522
17511: POP
// tech := tech_lassight ; 2 :
17512: LD_ADDR_VAR 0 5
17516: PUSH
17517: LD_INT 12
17519: ST_TO_ADDR
17520: GO 17561
17522: LD_INT 2
17524: DOUBLE
17525: EQUAL
17526: IFTRUE 17530
17528: GO 17541
17530: POP
// tech := tech_mortar ; 3 :
17531: LD_ADDR_VAR 0 5
17535: PUSH
17536: LD_INT 41
17538: ST_TO_ADDR
17539: GO 17561
17541: LD_INT 3
17543: DOUBLE
17544: EQUAL
17545: IFTRUE 17549
17547: GO 17560
17549: POP
// tech := tech_bazooka ; end ;
17550: LD_ADDR_VAR 0 5
17554: PUSH
17555: LD_INT 44
17557: ST_TO_ADDR
17558: GO 17561
17560: POP
// if Researched ( side , tech ) then
17561: LD_VAR 0 3
17565: PPUSH
17566: LD_VAR 0 5
17570: PPUSH
17571: CALL_OW 325
17575: IFFALSE 17602
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17577: LD_ADDR_VAR 0 2
17581: PUSH
17582: LD_INT 5
17584: PUSH
17585: LD_INT 8
17587: PUSH
17588: LD_INT 9
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: LD_VAR 0 4
17600: ARRAY
17601: ST_TO_ADDR
// end ;
17602: LD_VAR 0 2
17606: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
17611: PPUSH
// if not mines then
17612: LD_VAR 0 2
17616: NOT
17617: IFFALSE 17621
// exit ;
17619: GO 17765
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17621: LD_ADDR_VAR 0 5
17625: PUSH
17626: LD_INT 81
17628: PUSH
17629: LD_VAR 0 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 3
17640: PUSH
17641: LD_INT 21
17643: PUSH
17644: LD_INT 3
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PPUSH
17659: CALL_OW 69
17663: ST_TO_ADDR
// for i in mines do
17664: LD_ADDR_VAR 0 4
17668: PUSH
17669: LD_VAR 0 2
17673: PUSH
17674: FOR_IN
17675: IFFALSE 17763
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17677: LD_VAR 0 4
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PPUSH
17686: LD_VAR 0 4
17690: PUSH
17691: LD_INT 2
17693: ARRAY
17694: PPUSH
17695: CALL_OW 458
17699: NOT
17700: IFFALSE 17704
// continue ;
17702: GO 17674
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17704: LD_VAR 0 4
17708: PUSH
17709: LD_INT 1
17711: ARRAY
17712: PPUSH
17713: LD_VAR 0 4
17717: PUSH
17718: LD_INT 2
17720: ARRAY
17721: PPUSH
17722: CALL_OW 428
17726: PUSH
17727: LD_VAR 0 5
17731: IN
17732: IFFALSE 17761
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17734: LD_VAR 0 4
17738: PUSH
17739: LD_INT 1
17741: ARRAY
17742: PPUSH
17743: LD_VAR 0 4
17747: PUSH
17748: LD_INT 2
17750: ARRAY
17751: PPUSH
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 456
// end ;
17761: GO 17674
17763: POP
17764: POP
// end ;
17765: LD_VAR 0 3
17769: RET
// export function Count ( array ) ; begin
17770: LD_INT 0
17772: PPUSH
// result := array + 0 ;
17773: LD_ADDR_VAR 0 2
17777: PUSH
17778: LD_VAR 0 1
17782: PUSH
17783: LD_INT 0
17785: PLUS
17786: ST_TO_ADDR
// end ;
17787: LD_VAR 0 2
17791: RET
// export function IsEmpty ( building ) ; begin
17792: LD_INT 0
17794: PPUSH
// if not building then
17795: LD_VAR 0 1
17799: NOT
17800: IFFALSE 17804
// exit ;
17802: GO 17847
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17804: LD_ADDR_VAR 0 2
17808: PUSH
17809: LD_VAR 0 1
17813: PUSH
17814: LD_INT 22
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 255
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 58
17833: PUSH
17834: EMPTY
17835: LIST
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PPUSH
17841: CALL_OW 69
17845: IN
17846: ST_TO_ADDR
// end ;
17847: LD_VAR 0 2
17851: RET
// export function IsNotFull ( building ) ; var places ; begin
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
// if not building then
17856: LD_VAR 0 1
17860: NOT
17861: IFFALSE 17865
// exit ;
17863: GO 17893
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17865: LD_ADDR_VAR 0 2
17869: PUSH
17870: LD_VAR 0 1
17874: PPUSH
17875: LD_INT 3
17877: PUSH
17878: LD_INT 62
17880: PUSH
17881: EMPTY
17882: LIST
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 72
17892: ST_TO_ADDR
// end ;
17893: LD_VAR 0 2
17897: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17898: LD_INT 0
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
// tmp := [ ] ;
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: EMPTY
17910: ST_TO_ADDR
// list := [ ] ;
17911: LD_ADDR_VAR 0 5
17915: PUSH
17916: EMPTY
17917: ST_TO_ADDR
// for i = 16 to 25 do
17918: LD_ADDR_VAR 0 4
17922: PUSH
17923: DOUBLE
17924: LD_INT 16
17926: DEC
17927: ST_TO_ADDR
17928: LD_INT 25
17930: PUSH
17931: FOR_TO
17932: IFFALSE 18005
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17934: LD_ADDR_VAR 0 3
17938: PUSH
17939: LD_VAR 0 3
17943: PUSH
17944: LD_INT 22
17946: PUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 255
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 91
17963: PUSH
17964: LD_VAR 0 1
17968: PUSH
17969: LD_INT 6
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 30
17979: PUSH
17980: LD_VAR 0 4
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: PPUSH
17997: CALL_OW 69
18001: ADD
18002: ST_TO_ADDR
18003: GO 17931
18005: POP
18006: POP
// for i = 1 to tmp do
18007: LD_ADDR_VAR 0 4
18011: PUSH
18012: DOUBLE
18013: LD_INT 1
18015: DEC
18016: ST_TO_ADDR
18017: LD_VAR 0 3
18021: PUSH
18022: FOR_TO
18023: IFFALSE 18111
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18025: LD_ADDR_VAR 0 5
18029: PUSH
18030: LD_VAR 0 5
18034: PUSH
18035: LD_VAR 0 3
18039: PUSH
18040: LD_VAR 0 4
18044: ARRAY
18045: PPUSH
18046: CALL_OW 266
18050: PUSH
18051: LD_VAR 0 3
18055: PUSH
18056: LD_VAR 0 4
18060: ARRAY
18061: PPUSH
18062: CALL_OW 250
18066: PUSH
18067: LD_VAR 0 3
18071: PUSH
18072: LD_VAR 0 4
18076: ARRAY
18077: PPUSH
18078: CALL_OW 251
18082: PUSH
18083: LD_VAR 0 3
18087: PUSH
18088: LD_VAR 0 4
18092: ARRAY
18093: PPUSH
18094: CALL_OW 254
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: ADD
18108: ST_TO_ADDR
18109: GO 18022
18111: POP
18112: POP
// result := list ;
18113: LD_ADDR_VAR 0 2
18117: PUSH
18118: LD_VAR 0 5
18122: ST_TO_ADDR
// end ;
18123: LD_VAR 0 2
18127: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
18136: PPUSH
// if not factory then
18137: LD_VAR 0 1
18141: NOT
18142: IFFALSE 18146
// exit ;
18144: GO 18739
// if control = control_apeman then
18146: LD_VAR 0 4
18150: PUSH
18151: LD_INT 5
18153: EQUAL
18154: IFFALSE 18263
// begin tmp := UnitsInside ( factory ) ;
18156: LD_ADDR_VAR 0 8
18160: PUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 313
18170: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18171: LD_VAR 0 8
18175: PPUSH
18176: LD_INT 25
18178: PUSH
18179: LD_INT 12
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PPUSH
18186: CALL_OW 72
18190: NOT
18191: IFFALSE 18201
// control := control_manual ;
18193: LD_ADDR_VAR 0 4
18197: PUSH
18198: LD_INT 1
18200: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18201: LD_ADDR_VAR 0 8
18205: PUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL 17898 0 1
18215: ST_TO_ADDR
// if tmp then
18216: LD_VAR 0 8
18220: IFFALSE 18263
// begin for i in tmp do
18222: LD_ADDR_VAR 0 7
18226: PUSH
18227: LD_VAR 0 8
18231: PUSH
18232: FOR_IN
18233: IFFALSE 18261
// if i [ 1 ] = b_ext_radio then
18235: LD_VAR 0 7
18239: PUSH
18240: LD_INT 1
18242: ARRAY
18243: PUSH
18244: LD_INT 22
18246: EQUAL
18247: IFFALSE 18259
// begin control := control_remote ;
18249: LD_ADDR_VAR 0 4
18253: PUSH
18254: LD_INT 2
18256: ST_TO_ADDR
// break ;
18257: GO 18261
// end ;
18259: GO 18232
18261: POP
18262: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18263: LD_VAR 0 1
18267: PPUSH
18268: LD_VAR 0 2
18272: PPUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: LD_VAR 0 4
18282: PPUSH
18283: LD_VAR 0 5
18287: PPUSH
18288: CALL_OW 448
18292: IFFALSE 18327
// begin result := [ chassis , engine , control , weapon ] ;
18294: LD_ADDR_VAR 0 6
18298: PUSH
18299: LD_VAR 0 2
18303: PUSH
18304: LD_VAR 0 3
18308: PUSH
18309: LD_VAR 0 4
18313: PUSH
18314: LD_VAR 0 5
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: ST_TO_ADDR
// exit ;
18325: GO 18739
// end ; _chassis := AvailableChassisList ( factory ) ;
18327: LD_ADDR_VAR 0 9
18331: PUSH
18332: LD_VAR 0 1
18336: PPUSH
18337: CALL_OW 475
18341: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18342: LD_ADDR_VAR 0 11
18346: PUSH
18347: LD_VAR 0 1
18351: PPUSH
18352: CALL_OW 476
18356: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18357: LD_ADDR_VAR 0 12
18361: PUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: CALL_OW 477
18371: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18372: LD_ADDR_VAR 0 10
18376: PUSH
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 478
18386: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18387: LD_VAR 0 9
18391: NOT
18392: PUSH
18393: LD_VAR 0 11
18397: NOT
18398: OR
18399: PUSH
18400: LD_VAR 0 12
18404: NOT
18405: OR
18406: PUSH
18407: LD_VAR 0 10
18411: NOT
18412: OR
18413: IFFALSE 18448
// begin result := [ chassis , engine , control , weapon ] ;
18415: LD_ADDR_VAR 0 6
18419: PUSH
18420: LD_VAR 0 2
18424: PUSH
18425: LD_VAR 0 3
18429: PUSH
18430: LD_VAR 0 4
18434: PUSH
18435: LD_VAR 0 5
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: ST_TO_ADDR
// exit ;
18446: GO 18739
// end ; if not chassis in _chassis then
18448: LD_VAR 0 2
18452: PUSH
18453: LD_VAR 0 9
18457: IN
18458: NOT
18459: IFFALSE 18485
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18461: LD_ADDR_VAR 0 2
18465: PUSH
18466: LD_VAR 0 9
18470: PUSH
18471: LD_INT 1
18473: PPUSH
18474: LD_VAR 0 9
18478: PPUSH
18479: CALL_OW 12
18483: ARRAY
18484: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18485: LD_VAR 0 2
18489: PPUSH
18490: LD_VAR 0 3
18494: PPUSH
18495: CALL 18744 0 2
18499: NOT
18500: IFFALSE 18559
// repeat engine := _engine [ 1 ] ;
18502: LD_ADDR_VAR 0 3
18506: PUSH
18507: LD_VAR 0 11
18511: PUSH
18512: LD_INT 1
18514: ARRAY
18515: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18516: LD_ADDR_VAR 0 11
18520: PUSH
18521: LD_VAR 0 11
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 3
18533: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18534: LD_VAR 0 2
18538: PPUSH
18539: LD_VAR 0 3
18543: PPUSH
18544: CALL 18744 0 2
18548: PUSH
18549: LD_VAR 0 11
18553: PUSH
18554: EMPTY
18555: EQUAL
18556: OR
18557: IFFALSE 18502
// if not control in _control then
18559: LD_VAR 0 4
18563: PUSH
18564: LD_VAR 0 12
18568: IN
18569: NOT
18570: IFFALSE 18596
// control := _control [ rand ( 1 , _control ) ] ;
18572: LD_ADDR_VAR 0 4
18576: PUSH
18577: LD_VAR 0 12
18581: PUSH
18582: LD_INT 1
18584: PPUSH
18585: LD_VAR 0 12
18589: PPUSH
18590: CALL_OW 12
18594: ARRAY
18595: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18596: LD_VAR 0 2
18600: PPUSH
18601: LD_VAR 0 5
18605: PPUSH
18606: CALL 18964 0 2
18610: NOT
18611: IFFALSE 18670
// repeat weapon := _weapon [ 1 ] ;
18613: LD_ADDR_VAR 0 5
18617: PUSH
18618: LD_VAR 0 10
18622: PUSH
18623: LD_INT 1
18625: ARRAY
18626: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18627: LD_ADDR_VAR 0 10
18631: PUSH
18632: LD_VAR 0 10
18636: PPUSH
18637: LD_INT 1
18639: PPUSH
18640: CALL_OW 3
18644: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18645: LD_VAR 0 2
18649: PPUSH
18650: LD_VAR 0 5
18654: PPUSH
18655: CALL 18964 0 2
18659: PUSH
18660: LD_VAR 0 10
18664: PUSH
18665: EMPTY
18666: EQUAL
18667: OR
18668: IFFALSE 18613
// result := [ ] ;
18670: LD_ADDR_VAR 0 6
18674: PUSH
18675: EMPTY
18676: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18677: LD_VAR 0 1
18681: PPUSH
18682: LD_VAR 0 2
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: LD_VAR 0 4
18696: PPUSH
18697: LD_VAR 0 5
18701: PPUSH
18702: CALL_OW 448
18706: IFFALSE 18739
// result := [ chassis , engine , control , weapon ] ;
18708: LD_ADDR_VAR 0 6
18712: PUSH
18713: LD_VAR 0 2
18717: PUSH
18718: LD_VAR 0 3
18722: PUSH
18723: LD_VAR 0 4
18727: PUSH
18728: LD_VAR 0 5
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: ST_TO_ADDR
// end ;
18739: LD_VAR 0 6
18743: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18744: LD_INT 0
18746: PPUSH
// if not chassis or not engine then
18747: LD_VAR 0 1
18751: NOT
18752: PUSH
18753: LD_VAR 0 2
18757: NOT
18758: OR
18759: IFFALSE 18763
// exit ;
18761: GO 18959
// case engine of engine_solar :
18763: LD_VAR 0 2
18767: PUSH
18768: LD_INT 2
18770: DOUBLE
18771: EQUAL
18772: IFTRUE 18776
18774: GO 18814
18776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18777: LD_ADDR_VAR 0 3
18781: PUSH
18782: LD_INT 11
18784: PUSH
18785: LD_INT 12
18787: PUSH
18788: LD_INT 13
18790: PUSH
18791: LD_INT 14
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: ST_TO_ADDR
18812: GO 18943
18814: LD_INT 1
18816: DOUBLE
18817: EQUAL
18818: IFTRUE 18822
18820: GO 18884
18822: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18823: LD_ADDR_VAR 0 3
18827: PUSH
18828: LD_INT 11
18830: PUSH
18831: LD_INT 12
18833: PUSH
18834: LD_INT 13
18836: PUSH
18837: LD_INT 14
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 3
18848: PUSH
18849: LD_INT 4
18851: PUSH
18852: LD_INT 5
18854: PUSH
18855: LD_INT 21
18857: PUSH
18858: LD_INT 23
18860: PUSH
18861: LD_INT 22
18863: PUSH
18864: LD_INT 24
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: ST_TO_ADDR
18882: GO 18943
18884: LD_INT 3
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18942
18892: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_INT 13
18900: PUSH
18901: LD_INT 14
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: LD_INT 4
18912: PUSH
18913: LD_INT 5
18915: PUSH
18916: LD_INT 21
18918: PUSH
18919: LD_INT 22
18921: PUSH
18922: LD_INT 23
18924: PUSH
18925: LD_INT 24
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: ST_TO_ADDR
18940: GO 18943
18942: POP
// result := ( chassis in result ) ;
18943: LD_ADDR_VAR 0 3
18947: PUSH
18948: LD_VAR 0 1
18952: PUSH
18953: LD_VAR 0 3
18957: IN
18958: ST_TO_ADDR
// end ;
18959: LD_VAR 0 3
18963: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18964: LD_INT 0
18966: PPUSH
// if not chassis or not weapon then
18967: LD_VAR 0 1
18971: NOT
18972: PUSH
18973: LD_VAR 0 2
18977: NOT
18978: OR
18979: IFFALSE 18983
// exit ;
18981: GO 20043
// case weapon of us_machine_gun :
18983: LD_VAR 0 2
18987: PUSH
18988: LD_INT 2
18990: DOUBLE
18991: EQUAL
18992: IFTRUE 18996
18994: GO 19026
18996: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18997: LD_ADDR_VAR 0 3
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 3
19010: PUSH
19011: LD_INT 4
19013: PUSH
19014: LD_INT 5
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: ST_TO_ADDR
19024: GO 20027
19026: LD_INT 3
19028: DOUBLE
19029: EQUAL
19030: IFTRUE 19034
19032: GO 19064
19034: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19035: LD_ADDR_VAR 0 3
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: LD_INT 4
19051: PUSH
19052: LD_INT 5
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: ST_TO_ADDR
19062: GO 20027
19064: LD_INT 11
19066: DOUBLE
19067: EQUAL
19068: IFTRUE 19072
19070: GO 19102
19072: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19073: LD_ADDR_VAR 0 3
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: LD_INT 4
19089: PUSH
19090: LD_INT 5
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: ST_TO_ADDR
19100: GO 20027
19102: LD_INT 4
19104: DOUBLE
19105: EQUAL
19106: IFTRUE 19110
19108: GO 19136
19110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19111: LD_ADDR_VAR 0 3
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: LD_INT 3
19121: PUSH
19122: LD_INT 4
19124: PUSH
19125: LD_INT 5
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: ST_TO_ADDR
19134: GO 20027
19136: LD_INT 5
19138: DOUBLE
19139: EQUAL
19140: IFTRUE 19144
19142: GO 19170
19144: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19145: LD_ADDR_VAR 0 3
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: LD_INT 4
19158: PUSH
19159: LD_INT 5
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: ST_TO_ADDR
19168: GO 20027
19170: LD_INT 9
19172: DOUBLE
19173: EQUAL
19174: IFTRUE 19178
19176: GO 19204
19178: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19179: LD_ADDR_VAR 0 3
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 3
19189: PUSH
19190: LD_INT 4
19192: PUSH
19193: LD_INT 5
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: ST_TO_ADDR
19202: GO 20027
19204: LD_INT 7
19206: DOUBLE
19207: EQUAL
19208: IFTRUE 19212
19210: GO 19238
19212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19213: LD_ADDR_VAR 0 3
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 3
19223: PUSH
19224: LD_INT 4
19226: PUSH
19227: LD_INT 5
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: ST_TO_ADDR
19236: GO 20027
19238: LD_INT 12
19240: DOUBLE
19241: EQUAL
19242: IFTRUE 19246
19244: GO 19272
19246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_INT 2
19254: PUSH
19255: LD_INT 3
19257: PUSH
19258: LD_INT 4
19260: PUSH
19261: LD_INT 5
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: ST_TO_ADDR
19270: GO 20027
19272: LD_INT 13
19274: DOUBLE
19275: EQUAL
19276: IFTRUE 19280
19278: GO 19306
19280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: LD_INT 3
19291: PUSH
19292: LD_INT 4
19294: PUSH
19295: LD_INT 5
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: ST_TO_ADDR
19304: GO 20027
19306: LD_INT 14
19308: DOUBLE
19309: EQUAL
19310: IFTRUE 19314
19312: GO 19332
19314: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19315: LD_ADDR_VAR 0 3
19319: PUSH
19320: LD_INT 4
19322: PUSH
19323: LD_INT 5
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: ST_TO_ADDR
19330: GO 20027
19332: LD_INT 6
19334: DOUBLE
19335: EQUAL
19336: IFTRUE 19340
19338: GO 19358
19340: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19341: LD_ADDR_VAR 0 3
19345: PUSH
19346: LD_INT 4
19348: PUSH
19349: LD_INT 5
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: ST_TO_ADDR
19356: GO 20027
19358: LD_INT 10
19360: DOUBLE
19361: EQUAL
19362: IFTRUE 19366
19364: GO 19384
19366: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: LD_INT 4
19374: PUSH
19375: LD_INT 5
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: ST_TO_ADDR
19382: GO 20027
19384: LD_INT 22
19386: DOUBLE
19387: EQUAL
19388: IFTRUE 19392
19390: GO 19418
19392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19393: LD_ADDR_VAR 0 3
19397: PUSH
19398: LD_INT 11
19400: PUSH
19401: LD_INT 12
19403: PUSH
19404: LD_INT 13
19406: PUSH
19407: LD_INT 14
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: ST_TO_ADDR
19416: GO 20027
19418: LD_INT 23
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19452
19426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: LD_INT 11
19434: PUSH
19435: LD_INT 12
19437: PUSH
19438: LD_INT 13
19440: PUSH
19441: LD_INT 14
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: ST_TO_ADDR
19450: GO 20027
19452: LD_INT 24
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19486
19460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_INT 11
19468: PUSH
19469: LD_INT 12
19471: PUSH
19472: LD_INT 13
19474: PUSH
19475: LD_INT 14
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: ST_TO_ADDR
19484: GO 20027
19486: LD_INT 30
19488: DOUBLE
19489: EQUAL
19490: IFTRUE 19494
19492: GO 19520
19494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_INT 11
19502: PUSH
19503: LD_INT 12
19505: PUSH
19506: LD_INT 13
19508: PUSH
19509: LD_INT 14
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: ST_TO_ADDR
19518: GO 20027
19520: LD_INT 25
19522: DOUBLE
19523: EQUAL
19524: IFTRUE 19528
19526: GO 19546
19528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19529: LD_ADDR_VAR 0 3
19533: PUSH
19534: LD_INT 13
19536: PUSH
19537: LD_INT 14
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: ST_TO_ADDR
19544: GO 20027
19546: LD_INT 27
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19572
19554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19555: LD_ADDR_VAR 0 3
19559: PUSH
19560: LD_INT 13
19562: PUSH
19563: LD_INT 14
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: ST_TO_ADDR
19570: GO 20027
19572: LD_INT 92
19574: DOUBLE
19575: EQUAL
19576: IFTRUE 19580
19578: GO 19606
19580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_INT 11
19588: PUSH
19589: LD_INT 12
19591: PUSH
19592: LD_INT 13
19594: PUSH
19595: LD_INT 14
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: ST_TO_ADDR
19604: GO 20027
19606: LD_INT 28
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19632
19614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19615: LD_ADDR_VAR 0 3
19619: PUSH
19620: LD_INT 13
19622: PUSH
19623: LD_INT 14
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: ST_TO_ADDR
19630: GO 20027
19632: LD_INT 29
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19658
19640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 13
19648: PUSH
19649: LD_INT 14
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: ST_TO_ADDR
19656: GO 20027
19658: LD_INT 31
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19684
19666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: LD_INT 13
19674: PUSH
19675: LD_INT 14
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: ST_TO_ADDR
19682: GO 20027
19684: LD_INT 26
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19710
19692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19693: LD_ADDR_VAR 0 3
19697: PUSH
19698: LD_INT 13
19700: PUSH
19701: LD_INT 14
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: ST_TO_ADDR
19708: GO 20027
19710: LD_INT 42
19712: DOUBLE
19713: EQUAL
19714: IFTRUE 19718
19716: GO 19744
19718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19719: LD_ADDR_VAR 0 3
19723: PUSH
19724: LD_INT 21
19726: PUSH
19727: LD_INT 22
19729: PUSH
19730: LD_INT 23
19732: PUSH
19733: LD_INT 24
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: ST_TO_ADDR
19742: GO 20027
19744: LD_INT 43
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19778
19752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: LD_INT 21
19760: PUSH
19761: LD_INT 22
19763: PUSH
19764: LD_INT 23
19766: PUSH
19767: LD_INT 24
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: ST_TO_ADDR
19776: GO 20027
19778: LD_INT 44
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19812
19786: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19787: LD_ADDR_VAR 0 3
19791: PUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_INT 23
19800: PUSH
19801: LD_INT 24
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: ST_TO_ADDR
19810: GO 20027
19812: LD_INT 45
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 19846
19820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19821: LD_ADDR_VAR 0 3
19825: PUSH
19826: LD_INT 21
19828: PUSH
19829: LD_INT 22
19831: PUSH
19832: LD_INT 23
19834: PUSH
19835: LD_INT 24
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: ST_TO_ADDR
19844: GO 20027
19846: LD_INT 49
19848: DOUBLE
19849: EQUAL
19850: IFTRUE 19854
19852: GO 19880
19854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: LD_INT 21
19862: PUSH
19863: LD_INT 22
19865: PUSH
19866: LD_INT 23
19868: PUSH
19869: LD_INT 24
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: ST_TO_ADDR
19878: GO 20027
19880: LD_INT 51
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 19914
19888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19889: LD_ADDR_VAR 0 3
19893: PUSH
19894: LD_INT 21
19896: PUSH
19897: LD_INT 22
19899: PUSH
19900: LD_INT 23
19902: PUSH
19903: LD_INT 24
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: ST_TO_ADDR
19912: GO 20027
19914: LD_INT 52
19916: DOUBLE
19917: EQUAL
19918: IFTRUE 19922
19920: GO 19948
19922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19923: LD_ADDR_VAR 0 3
19927: PUSH
19928: LD_INT 21
19930: PUSH
19931: LD_INT 22
19933: PUSH
19934: LD_INT 23
19936: PUSH
19937: LD_INT 24
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: ST_TO_ADDR
19946: GO 20027
19948: LD_INT 53
19950: DOUBLE
19951: EQUAL
19952: IFTRUE 19956
19954: GO 19974
19956: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: LD_INT 23
19964: PUSH
19965: LD_INT 24
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: ST_TO_ADDR
19972: GO 20027
19974: LD_INT 46
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 20000
19982: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19983: LD_ADDR_VAR 0 3
19987: PUSH
19988: LD_INT 23
19990: PUSH
19991: LD_INT 24
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: ST_TO_ADDR
19998: GO 20027
20000: LD_INT 47
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20026
20008: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_INT 23
20016: PUSH
20017: LD_INT 24
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: ST_TO_ADDR
20024: GO 20027
20026: POP
// result := ( chassis in result ) ;
20027: LD_ADDR_VAR 0 3
20031: PUSH
20032: LD_VAR 0 1
20036: PUSH
20037: LD_VAR 0 3
20041: IN
20042: ST_TO_ADDR
// end ;
20043: LD_VAR 0 3
20047: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20048: LD_INT 0
20050: PPUSH
20051: PPUSH
20052: PPUSH
20053: PPUSH
20054: PPUSH
20055: PPUSH
20056: PPUSH
// result := array ;
20057: LD_ADDR_VAR 0 5
20061: PUSH
20062: LD_VAR 0 1
20066: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20067: LD_VAR 0 1
20071: NOT
20072: PUSH
20073: LD_VAR 0 2
20077: NOT
20078: OR
20079: PUSH
20080: LD_VAR 0 3
20084: NOT
20085: OR
20086: PUSH
20087: LD_VAR 0 2
20091: PUSH
20092: LD_VAR 0 1
20096: GREATER
20097: OR
20098: PUSH
20099: LD_VAR 0 3
20103: PUSH
20104: LD_VAR 0 1
20108: GREATER
20109: OR
20110: IFFALSE 20114
// exit ;
20112: GO 20410
// if direction then
20114: LD_VAR 0 4
20118: IFFALSE 20182
// begin d := 1 ;
20120: LD_ADDR_VAR 0 9
20124: PUSH
20125: LD_INT 1
20127: ST_TO_ADDR
// if i_from > i_to then
20128: LD_VAR 0 2
20132: PUSH
20133: LD_VAR 0 3
20137: GREATER
20138: IFFALSE 20164
// length := ( array - i_from ) + i_to else
20140: LD_ADDR_VAR 0 11
20144: PUSH
20145: LD_VAR 0 1
20149: PUSH
20150: LD_VAR 0 2
20154: MINUS
20155: PUSH
20156: LD_VAR 0 3
20160: PLUS
20161: ST_TO_ADDR
20162: GO 20180
// length := i_to - i_from ;
20164: LD_ADDR_VAR 0 11
20168: PUSH
20169: LD_VAR 0 3
20173: PUSH
20174: LD_VAR 0 2
20178: MINUS
20179: ST_TO_ADDR
// end else
20180: GO 20243
// begin d := - 1 ;
20182: LD_ADDR_VAR 0 9
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: ST_TO_ADDR
// if i_from > i_to then
20191: LD_VAR 0 2
20195: PUSH
20196: LD_VAR 0 3
20200: GREATER
20201: IFFALSE 20221
// length := i_from - i_to else
20203: LD_ADDR_VAR 0 11
20207: PUSH
20208: LD_VAR 0 2
20212: PUSH
20213: LD_VAR 0 3
20217: MINUS
20218: ST_TO_ADDR
20219: GO 20243
// length := ( array - i_to ) + i_from ;
20221: LD_ADDR_VAR 0 11
20225: PUSH
20226: LD_VAR 0 1
20230: PUSH
20231: LD_VAR 0 3
20235: MINUS
20236: PUSH
20237: LD_VAR 0 2
20241: PLUS
20242: ST_TO_ADDR
// end ; if not length then
20243: LD_VAR 0 11
20247: NOT
20248: IFFALSE 20252
// exit ;
20250: GO 20410
// tmp := array ;
20252: LD_ADDR_VAR 0 10
20256: PUSH
20257: LD_VAR 0 1
20261: ST_TO_ADDR
// for i = 1 to length do
20262: LD_ADDR_VAR 0 6
20266: PUSH
20267: DOUBLE
20268: LD_INT 1
20270: DEC
20271: ST_TO_ADDR
20272: LD_VAR 0 11
20276: PUSH
20277: FOR_TO
20278: IFFALSE 20398
// begin for j = 1 to array do
20280: LD_ADDR_VAR 0 7
20284: PUSH
20285: DOUBLE
20286: LD_INT 1
20288: DEC
20289: ST_TO_ADDR
20290: LD_VAR 0 1
20294: PUSH
20295: FOR_TO
20296: IFFALSE 20384
// begin k := j + d ;
20298: LD_ADDR_VAR 0 8
20302: PUSH
20303: LD_VAR 0 7
20307: PUSH
20308: LD_VAR 0 9
20312: PLUS
20313: ST_TO_ADDR
// if k > array then
20314: LD_VAR 0 8
20318: PUSH
20319: LD_VAR 0 1
20323: GREATER
20324: IFFALSE 20334
// k := 1 ;
20326: LD_ADDR_VAR 0 8
20330: PUSH
20331: LD_INT 1
20333: ST_TO_ADDR
// if not k then
20334: LD_VAR 0 8
20338: NOT
20339: IFFALSE 20351
// k := array ;
20341: LD_ADDR_VAR 0 8
20345: PUSH
20346: LD_VAR 0 1
20350: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20351: LD_ADDR_VAR 0 10
20355: PUSH
20356: LD_VAR 0 10
20360: PPUSH
20361: LD_VAR 0 8
20365: PPUSH
20366: LD_VAR 0 1
20370: PUSH
20371: LD_VAR 0 7
20375: ARRAY
20376: PPUSH
20377: CALL_OW 1
20381: ST_TO_ADDR
// end ;
20382: GO 20295
20384: POP
20385: POP
// array := tmp ;
20386: LD_ADDR_VAR 0 1
20390: PUSH
20391: LD_VAR 0 10
20395: ST_TO_ADDR
// end ;
20396: GO 20277
20398: POP
20399: POP
// result := array ;
20400: LD_ADDR_VAR 0 5
20404: PUSH
20405: LD_VAR 0 1
20409: ST_TO_ADDR
// end ;
20410: LD_VAR 0 5
20414: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20415: LD_INT 0
20417: PPUSH
20418: PPUSH
// result := 0 ;
20419: LD_ADDR_VAR 0 3
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// if not array or not value in array then
20427: LD_VAR 0 1
20431: NOT
20432: PUSH
20433: LD_VAR 0 2
20437: PUSH
20438: LD_VAR 0 1
20442: IN
20443: NOT
20444: OR
20445: IFFALSE 20449
// exit ;
20447: GO 20503
// for i = 1 to array do
20449: LD_ADDR_VAR 0 4
20453: PUSH
20454: DOUBLE
20455: LD_INT 1
20457: DEC
20458: ST_TO_ADDR
20459: LD_VAR 0 1
20463: PUSH
20464: FOR_TO
20465: IFFALSE 20501
// if value = array [ i ] then
20467: LD_VAR 0 2
20471: PUSH
20472: LD_VAR 0 1
20476: PUSH
20477: LD_VAR 0 4
20481: ARRAY
20482: EQUAL
20483: IFFALSE 20499
// begin result := i ;
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_VAR 0 4
20494: ST_TO_ADDR
// exit ;
20495: POP
20496: POP
20497: GO 20503
// end ;
20499: GO 20464
20501: POP
20502: POP
// end ;
20503: LD_VAR 0 3
20507: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20508: LD_INT 0
20510: PPUSH
// vc_chassis := chassis ;
20511: LD_ADDR_OWVAR 37
20515: PUSH
20516: LD_VAR 0 1
20520: ST_TO_ADDR
// vc_engine := engine ;
20521: LD_ADDR_OWVAR 39
20525: PUSH
20526: LD_VAR 0 2
20530: ST_TO_ADDR
// vc_control := control ;
20531: LD_ADDR_OWVAR 38
20535: PUSH
20536: LD_VAR 0 3
20540: ST_TO_ADDR
// vc_weapon := weapon ;
20541: LD_ADDR_OWVAR 40
20545: PUSH
20546: LD_VAR 0 4
20550: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20551: LD_ADDR_OWVAR 41
20555: PUSH
20556: LD_VAR 0 5
20560: ST_TO_ADDR
// end ;
20561: LD_VAR 0 6
20565: RET
// export function WantPlant ( unit ) ; var task ; begin
20566: LD_INT 0
20568: PPUSH
20569: PPUSH
// result := false ;
20570: LD_ADDR_VAR 0 2
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 437
20592: ST_TO_ADDR
// if task then
20593: LD_VAR 0 3
20597: IFFALSE 20625
// if task [ 1 ] [ 1 ] = p then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 1
20606: ARRAY
20607: PUSH
20608: LD_INT 1
20610: ARRAY
20611: PUSH
20612: LD_STRING p
20614: EQUAL
20615: IFFALSE 20625
// result := true ;
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: LD_INT 1
20624: ST_TO_ADDR
// end ;
20625: LD_VAR 0 2
20629: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20630: LD_INT 0
20632: PPUSH
20633: PPUSH
20634: PPUSH
20635: PPUSH
// if pos < 1 then
20636: LD_VAR 0 2
20640: PUSH
20641: LD_INT 1
20643: LESS
20644: IFFALSE 20648
// exit ;
20646: GO 20951
// if pos = 1 then
20648: LD_VAR 0 2
20652: PUSH
20653: LD_INT 1
20655: EQUAL
20656: IFFALSE 20689
// result := Replace ( arr , pos [ 1 ] , value ) else
20658: LD_ADDR_VAR 0 4
20662: PUSH
20663: LD_VAR 0 1
20667: PPUSH
20668: LD_VAR 0 2
20672: PUSH
20673: LD_INT 1
20675: ARRAY
20676: PPUSH
20677: LD_VAR 0 3
20681: PPUSH
20682: CALL_OW 1
20686: ST_TO_ADDR
20687: GO 20951
// begin tmp := arr ;
20689: LD_ADDR_VAR 0 6
20693: PUSH
20694: LD_VAR 0 1
20698: ST_TO_ADDR
// s_arr := [ tmp ] ;
20699: LD_ADDR_VAR 0 7
20703: PUSH
20704: LD_VAR 0 6
20708: PUSH
20709: EMPTY
20710: LIST
20711: ST_TO_ADDR
// for i = 1 to pos - 1 do
20712: LD_ADDR_VAR 0 5
20716: PUSH
20717: DOUBLE
20718: LD_INT 1
20720: DEC
20721: ST_TO_ADDR
20722: LD_VAR 0 2
20726: PUSH
20727: LD_INT 1
20729: MINUS
20730: PUSH
20731: FOR_TO
20732: IFFALSE 20777
// begin tmp := tmp [ pos [ i ] ] ;
20734: LD_ADDR_VAR 0 6
20738: PUSH
20739: LD_VAR 0 6
20743: PUSH
20744: LD_VAR 0 2
20748: PUSH
20749: LD_VAR 0 5
20753: ARRAY
20754: ARRAY
20755: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20756: LD_ADDR_VAR 0 7
20760: PUSH
20761: LD_VAR 0 7
20765: PUSH
20766: LD_VAR 0 6
20770: PUSH
20771: EMPTY
20772: LIST
20773: ADD
20774: ST_TO_ADDR
// end ;
20775: GO 20731
20777: POP
20778: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20779: LD_ADDR_VAR 0 6
20783: PUSH
20784: LD_VAR 0 6
20788: PPUSH
20789: LD_VAR 0 2
20793: PUSH
20794: LD_VAR 0 2
20798: ARRAY
20799: PPUSH
20800: LD_VAR 0 3
20804: PPUSH
20805: CALL_OW 1
20809: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20810: LD_ADDR_VAR 0 7
20814: PUSH
20815: LD_VAR 0 7
20819: PPUSH
20820: LD_VAR 0 7
20824: PPUSH
20825: LD_VAR 0 6
20829: PPUSH
20830: CALL_OW 1
20834: ST_TO_ADDR
// for i = s_arr downto 2 do
20835: LD_ADDR_VAR 0 5
20839: PUSH
20840: DOUBLE
20841: LD_VAR 0 7
20845: INC
20846: ST_TO_ADDR
20847: LD_INT 2
20849: PUSH
20850: FOR_DOWNTO
20851: IFFALSE 20935
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20853: LD_ADDR_VAR 0 6
20857: PUSH
20858: LD_VAR 0 7
20862: PUSH
20863: LD_VAR 0 5
20867: PUSH
20868: LD_INT 1
20870: MINUS
20871: ARRAY
20872: PPUSH
20873: LD_VAR 0 2
20877: PUSH
20878: LD_VAR 0 5
20882: PUSH
20883: LD_INT 1
20885: MINUS
20886: ARRAY
20887: PPUSH
20888: LD_VAR 0 7
20892: PUSH
20893: LD_VAR 0 5
20897: ARRAY
20898: PPUSH
20899: CALL_OW 1
20903: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20904: LD_ADDR_VAR 0 7
20908: PUSH
20909: LD_VAR 0 7
20913: PPUSH
20914: LD_VAR 0 5
20918: PUSH
20919: LD_INT 1
20921: MINUS
20922: PPUSH
20923: LD_VAR 0 6
20927: PPUSH
20928: CALL_OW 1
20932: ST_TO_ADDR
// end ;
20933: GO 20850
20935: POP
20936: POP
// result := s_arr [ 1 ] ;
20937: LD_ADDR_VAR 0 4
20941: PUSH
20942: LD_VAR 0 7
20946: PUSH
20947: LD_INT 1
20949: ARRAY
20950: ST_TO_ADDR
// end ; end ;
20951: LD_VAR 0 4
20955: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20956: LD_INT 0
20958: PPUSH
20959: PPUSH
// if not list then
20960: LD_VAR 0 1
20964: NOT
20965: IFFALSE 20969
// exit ;
20967: GO 21060
// i := list [ pos1 ] ;
20969: LD_ADDR_VAR 0 5
20973: PUSH
20974: LD_VAR 0 1
20978: PUSH
20979: LD_VAR 0 2
20983: ARRAY
20984: ST_TO_ADDR
// if not i then
20985: LD_VAR 0 5
20989: NOT
20990: IFFALSE 20994
// exit ;
20992: GO 21060
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20994: LD_ADDR_VAR 0 1
20998: PUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: LD_VAR 0 2
21008: PPUSH
21009: LD_VAR 0 1
21013: PUSH
21014: LD_VAR 0 3
21018: ARRAY
21019: PPUSH
21020: CALL_OW 1
21024: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21025: LD_ADDR_VAR 0 1
21029: PUSH
21030: LD_VAR 0 1
21034: PPUSH
21035: LD_VAR 0 3
21039: PPUSH
21040: LD_VAR 0 5
21044: PPUSH
21045: CALL_OW 1
21049: ST_TO_ADDR
// result := list ;
21050: LD_ADDR_VAR 0 4
21054: PUSH
21055: LD_VAR 0 1
21059: ST_TO_ADDR
// end ;
21060: LD_VAR 0 4
21064: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21065: LD_INT 0
21067: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21068: LD_ADDR_VAR 0 5
21072: PUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 250
21082: PPUSH
21083: LD_VAR 0 1
21087: PPUSH
21088: CALL_OW 251
21092: PPUSH
21093: LD_VAR 0 2
21097: PPUSH
21098: LD_VAR 0 3
21102: PPUSH
21103: LD_VAR 0 4
21107: PPUSH
21108: CALL 21486 0 5
21112: ST_TO_ADDR
// end ;
21113: LD_VAR 0 5
21117: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
21122: PPUSH
21123: PPUSH
// if not list or not unit then
21124: LD_VAR 0 2
21128: NOT
21129: PUSH
21130: LD_VAR 0 1
21134: NOT
21135: OR
21136: IFFALSE 21140
// exit ;
21138: GO 21481
// result := [ ] ;
21140: LD_ADDR_VAR 0 5
21144: PUSH
21145: EMPTY
21146: ST_TO_ADDR
// for i in list do
21147: LD_ADDR_VAR 0 6
21151: PUSH
21152: LD_VAR 0 2
21156: PUSH
21157: FOR_IN
21158: IFFALSE 21376
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21160: LD_ADDR_VAR 0 8
21164: PUSH
21165: LD_VAR 0 1
21169: PPUSH
21170: LD_VAR 0 6
21174: PUSH
21175: LD_INT 1
21177: ARRAY
21178: PPUSH
21179: LD_VAR 0 6
21183: PUSH
21184: LD_INT 2
21186: ARRAY
21187: PPUSH
21188: CALL_OW 297
21192: ST_TO_ADDR
// if not Count ( result ) then
21193: LD_VAR 0 5
21197: PPUSH
21198: CALL 17770 0 1
21202: NOT
21203: IFFALSE 21236
// begin result := Join ( result , [ i , tmp ] ) ;
21205: LD_ADDR_VAR 0 5
21209: PUSH
21210: LD_VAR 0 5
21214: PPUSH
21215: LD_VAR 0 6
21219: PUSH
21220: LD_VAR 0 8
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PPUSH
21229: CALL 53379 0 2
21233: ST_TO_ADDR
// continue ;
21234: GO 21157
// end ; if result [ result ] [ 2 ] <= tmp then
21236: LD_VAR 0 5
21240: PUSH
21241: LD_VAR 0 5
21245: ARRAY
21246: PUSH
21247: LD_INT 2
21249: ARRAY
21250: PUSH
21251: LD_VAR 0 8
21255: LESSEQUAL
21256: IFFALSE 21289
// result := Join ( result , [ i , tmp ] ) else
21258: LD_ADDR_VAR 0 5
21262: PUSH
21263: LD_VAR 0 5
21267: PPUSH
21268: LD_VAR 0 6
21272: PUSH
21273: LD_VAR 0 8
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL 53379 0 2
21286: ST_TO_ADDR
21287: GO 21374
// begin for j := 1 to Count ( result ) do
21289: LD_ADDR_VAR 0 7
21293: PUSH
21294: DOUBLE
21295: LD_INT 1
21297: DEC
21298: ST_TO_ADDR
21299: LD_VAR 0 5
21303: PPUSH
21304: CALL 17770 0 1
21308: PUSH
21309: FOR_TO
21310: IFFALSE 21372
// begin if tmp < result [ j ] [ 2 ] then
21312: LD_VAR 0 8
21316: PUSH
21317: LD_VAR 0 5
21321: PUSH
21322: LD_VAR 0 7
21326: ARRAY
21327: PUSH
21328: LD_INT 2
21330: ARRAY
21331: LESS
21332: IFFALSE 21370
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21334: LD_ADDR_VAR 0 5
21338: PUSH
21339: LD_VAR 0 5
21343: PPUSH
21344: LD_VAR 0 7
21348: PPUSH
21349: LD_VAR 0 6
21353: PUSH
21354: LD_VAR 0 8
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PPUSH
21363: CALL_OW 2
21367: ST_TO_ADDR
// break ;
21368: GO 21372
// end ; end ;
21370: GO 21309
21372: POP
21373: POP
// end ; end ;
21374: GO 21157
21376: POP
21377: POP
// if result and not asc then
21378: LD_VAR 0 5
21382: PUSH
21383: LD_VAR 0 3
21387: NOT
21388: AND
21389: IFFALSE 21406
// result := ReverseArray ( result ) ;
21391: LD_ADDR_VAR 0 5
21395: PUSH
21396: LD_VAR 0 5
21400: PPUSH
21401: CALL 48646 0 1
21405: ST_TO_ADDR
// tmp := [ ] ;
21406: LD_ADDR_VAR 0 8
21410: PUSH
21411: EMPTY
21412: ST_TO_ADDR
// if mode then
21413: LD_VAR 0 4
21417: IFFALSE 21481
// begin for i := 1 to result do
21419: LD_ADDR_VAR 0 6
21423: PUSH
21424: DOUBLE
21425: LD_INT 1
21427: DEC
21428: ST_TO_ADDR
21429: LD_VAR 0 5
21433: PUSH
21434: FOR_TO
21435: IFFALSE 21469
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21437: LD_ADDR_VAR 0 8
21441: PUSH
21442: LD_VAR 0 8
21446: PPUSH
21447: LD_VAR 0 5
21451: PUSH
21452: LD_VAR 0 6
21456: ARRAY
21457: PUSH
21458: LD_INT 1
21460: ARRAY
21461: PPUSH
21462: CALL 53379 0 2
21466: ST_TO_ADDR
21467: GO 21434
21469: POP
21470: POP
// result := tmp ;
21471: LD_ADDR_VAR 0 5
21475: PUSH
21476: LD_VAR 0 8
21480: ST_TO_ADDR
// end ; end ;
21481: LD_VAR 0 5
21485: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21486: LD_INT 0
21488: PPUSH
21489: PPUSH
21490: PPUSH
21491: PPUSH
// if not list then
21492: LD_VAR 0 3
21496: NOT
21497: IFFALSE 21501
// exit ;
21499: GO 21889
// result := [ ] ;
21501: LD_ADDR_VAR 0 6
21505: PUSH
21506: EMPTY
21507: ST_TO_ADDR
// for i in list do
21508: LD_ADDR_VAR 0 7
21512: PUSH
21513: LD_VAR 0 3
21517: PUSH
21518: FOR_IN
21519: IFFALSE 21721
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21521: LD_ADDR_VAR 0 9
21525: PUSH
21526: LD_VAR 0 7
21530: PPUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: LD_VAR 0 2
21540: PPUSH
21541: CALL_OW 297
21545: ST_TO_ADDR
// if not result then
21546: LD_VAR 0 6
21550: NOT
21551: IFFALSE 21577
// result := [ [ i , tmp ] ] else
21553: LD_ADDR_VAR 0 6
21557: PUSH
21558: LD_VAR 0 7
21562: PUSH
21563: LD_VAR 0 9
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: EMPTY
21573: LIST
21574: ST_TO_ADDR
21575: GO 21719
// begin if result [ result ] [ 2 ] <= tmp then
21577: LD_VAR 0 6
21581: PUSH
21582: LD_VAR 0 6
21586: ARRAY
21587: PUSH
21588: LD_INT 2
21590: ARRAY
21591: PUSH
21592: LD_VAR 0 9
21596: LESSEQUAL
21597: IFFALSE 21639
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21599: LD_ADDR_VAR 0 6
21603: PUSH
21604: LD_VAR 0 6
21608: PPUSH
21609: LD_VAR 0 6
21613: PUSH
21614: LD_INT 1
21616: PLUS
21617: PPUSH
21618: LD_VAR 0 7
21622: PUSH
21623: LD_VAR 0 9
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PPUSH
21632: CALL_OW 2
21636: ST_TO_ADDR
21637: GO 21719
// for j := 1 to result do
21639: LD_ADDR_VAR 0 8
21643: PUSH
21644: DOUBLE
21645: LD_INT 1
21647: DEC
21648: ST_TO_ADDR
21649: LD_VAR 0 6
21653: PUSH
21654: FOR_TO
21655: IFFALSE 21717
// begin if tmp < result [ j ] [ 2 ] then
21657: LD_VAR 0 9
21661: PUSH
21662: LD_VAR 0 6
21666: PUSH
21667: LD_VAR 0 8
21671: ARRAY
21672: PUSH
21673: LD_INT 2
21675: ARRAY
21676: LESS
21677: IFFALSE 21715
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21679: LD_ADDR_VAR 0 6
21683: PUSH
21684: LD_VAR 0 6
21688: PPUSH
21689: LD_VAR 0 8
21693: PPUSH
21694: LD_VAR 0 7
21698: PUSH
21699: LD_VAR 0 9
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PPUSH
21708: CALL_OW 2
21712: ST_TO_ADDR
// break ;
21713: GO 21717
// end ; end ;
21715: GO 21654
21717: POP
21718: POP
// end ; end ;
21719: GO 21518
21721: POP
21722: POP
// if result and not asc then
21723: LD_VAR 0 6
21727: PUSH
21728: LD_VAR 0 4
21732: NOT
21733: AND
21734: IFFALSE 21809
// begin tmp := result ;
21736: LD_ADDR_VAR 0 9
21740: PUSH
21741: LD_VAR 0 6
21745: ST_TO_ADDR
// for i = tmp downto 1 do
21746: LD_ADDR_VAR 0 7
21750: PUSH
21751: DOUBLE
21752: LD_VAR 0 9
21756: INC
21757: ST_TO_ADDR
21758: LD_INT 1
21760: PUSH
21761: FOR_DOWNTO
21762: IFFALSE 21807
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21764: LD_ADDR_VAR 0 6
21768: PUSH
21769: LD_VAR 0 6
21773: PPUSH
21774: LD_VAR 0 9
21778: PUSH
21779: LD_VAR 0 7
21783: MINUS
21784: PUSH
21785: LD_INT 1
21787: PLUS
21788: PPUSH
21789: LD_VAR 0 9
21793: PUSH
21794: LD_VAR 0 7
21798: ARRAY
21799: PPUSH
21800: CALL_OW 1
21804: ST_TO_ADDR
21805: GO 21761
21807: POP
21808: POP
// end ; tmp := [ ] ;
21809: LD_ADDR_VAR 0 9
21813: PUSH
21814: EMPTY
21815: ST_TO_ADDR
// if mode then
21816: LD_VAR 0 5
21820: IFFALSE 21889
// begin for i = 1 to result do
21822: LD_ADDR_VAR 0 7
21826: PUSH
21827: DOUBLE
21828: LD_INT 1
21830: DEC
21831: ST_TO_ADDR
21832: LD_VAR 0 6
21836: PUSH
21837: FOR_TO
21838: IFFALSE 21877
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21840: LD_ADDR_VAR 0 9
21844: PUSH
21845: LD_VAR 0 9
21849: PPUSH
21850: LD_VAR 0 7
21854: PPUSH
21855: LD_VAR 0 6
21859: PUSH
21860: LD_VAR 0 7
21864: ARRAY
21865: PUSH
21866: LD_INT 1
21868: ARRAY
21869: PPUSH
21870: CALL_OW 1
21874: ST_TO_ADDR
21875: GO 21837
21877: POP
21878: POP
// result := tmp ;
21879: LD_ADDR_VAR 0 6
21883: PUSH
21884: LD_VAR 0 9
21888: ST_TO_ADDR
// end ; end ;
21889: LD_VAR 0 6
21893: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21894: LD_INT 0
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21902: LD_ADDR_VAR 0 5
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: EMPTY
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: ST_TO_ADDR
// if not x or not y then
21924: LD_VAR 0 2
21928: NOT
21929: PUSH
21930: LD_VAR 0 3
21934: NOT
21935: OR
21936: IFFALSE 21940
// exit ;
21938: GO 23590
// if not range then
21940: LD_VAR 0 4
21944: NOT
21945: IFFALSE 21955
// range := 10 ;
21947: LD_ADDR_VAR 0 4
21951: PUSH
21952: LD_INT 10
21954: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21955: LD_ADDR_VAR 0 8
21959: PUSH
21960: LD_INT 81
21962: PUSH
21963: LD_VAR 0 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 92
21974: PUSH
21975: LD_VAR 0 2
21979: PUSH
21980: LD_VAR 0 3
21984: PUSH
21985: LD_VAR 0 4
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 3
21998: PUSH
21999: LD_INT 21
22001: PUSH
22002: LD_INT 3
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: PPUSH
22018: CALL_OW 69
22022: ST_TO_ADDR
// if not tmp then
22023: LD_VAR 0 8
22027: NOT
22028: IFFALSE 22032
// exit ;
22030: GO 23590
// for i in tmp do
22032: LD_ADDR_VAR 0 6
22036: PUSH
22037: LD_VAR 0 8
22041: PUSH
22042: FOR_IN
22043: IFFALSE 23565
// begin points := [ 0 , 0 , 0 ] ;
22045: LD_ADDR_VAR 0 9
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: ST_TO_ADDR
// bpoints := 1 ;
22064: LD_ADDR_VAR 0 10
22068: PUSH
22069: LD_INT 1
22071: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22072: LD_VAR 0 6
22076: PPUSH
22077: CALL_OW 247
22081: PUSH
22082: LD_INT 1
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22668
22090: POP
// begin if GetClass ( i ) = 1 then
22091: LD_VAR 0 6
22095: PPUSH
22096: CALL_OW 257
22100: PUSH
22101: LD_INT 1
22103: EQUAL
22104: IFFALSE 22125
// points := [ 10 , 5 , 3 ] ;
22106: LD_ADDR_VAR 0 9
22110: PUSH
22111: LD_INT 10
22113: PUSH
22114: LD_INT 5
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: LIST
22124: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22125: LD_VAR 0 6
22129: PPUSH
22130: CALL_OW 257
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: LD_INT 4
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: IN
22149: IFFALSE 22170
// points := [ 3 , 2 , 1 ] ;
22151: LD_ADDR_VAR 0 9
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22170: LD_VAR 0 6
22174: PPUSH
22175: CALL_OW 257
22179: PUSH
22180: LD_INT 5
22182: EQUAL
22183: IFFALSE 22204
// points := [ 130 , 5 , 2 ] ;
22185: LD_ADDR_VAR 0 9
22189: PUSH
22190: LD_INT 130
22192: PUSH
22193: LD_INT 5
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22204: LD_VAR 0 6
22208: PPUSH
22209: CALL_OW 257
22213: PUSH
22214: LD_INT 8
22216: EQUAL
22217: IFFALSE 22238
// points := [ 35 , 35 , 30 ] ;
22219: LD_ADDR_VAR 0 9
22223: PUSH
22224: LD_INT 35
22226: PUSH
22227: LD_INT 35
22229: PUSH
22230: LD_INT 30
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22238: LD_VAR 0 6
22242: PPUSH
22243: CALL_OW 257
22247: PUSH
22248: LD_INT 9
22250: EQUAL
22251: IFFALSE 22272
// points := [ 20 , 55 , 40 ] ;
22253: LD_ADDR_VAR 0 9
22257: PUSH
22258: LD_INT 20
22260: PUSH
22261: LD_INT 55
22263: PUSH
22264: LD_INT 40
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22272: LD_VAR 0 6
22276: PPUSH
22277: CALL_OW 257
22281: PUSH
22282: LD_INT 12
22284: PUSH
22285: LD_INT 16
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: IN
22292: IFFALSE 22313
// points := [ 5 , 3 , 2 ] ;
22294: LD_ADDR_VAR 0 9
22298: PUSH
22299: LD_INT 5
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22313: LD_VAR 0 6
22317: PPUSH
22318: CALL_OW 257
22322: PUSH
22323: LD_INT 17
22325: EQUAL
22326: IFFALSE 22347
// points := [ 100 , 50 , 75 ] ;
22328: LD_ADDR_VAR 0 9
22332: PUSH
22333: LD_INT 100
22335: PUSH
22336: LD_INT 50
22338: PUSH
22339: LD_INT 75
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: LIST
22346: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22347: LD_VAR 0 6
22351: PPUSH
22352: CALL_OW 257
22356: PUSH
22357: LD_INT 15
22359: EQUAL
22360: IFFALSE 22381
// points := [ 10 , 5 , 3 ] ;
22362: LD_ADDR_VAR 0 9
22366: PUSH
22367: LD_INT 10
22369: PUSH
22370: LD_INT 5
22372: PUSH
22373: LD_INT 3
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22381: LD_VAR 0 6
22385: PPUSH
22386: CALL_OW 257
22390: PUSH
22391: LD_INT 14
22393: EQUAL
22394: IFFALSE 22415
// points := [ 10 , 0 , 0 ] ;
22396: LD_ADDR_VAR 0 9
22400: PUSH
22401: LD_INT 10
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: LIST
22414: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22415: LD_VAR 0 6
22419: PPUSH
22420: CALL_OW 257
22424: PUSH
22425: LD_INT 11
22427: EQUAL
22428: IFFALSE 22449
// points := [ 30 , 10 , 5 ] ;
22430: LD_ADDR_VAR 0 9
22434: PUSH
22435: LD_INT 30
22437: PUSH
22438: LD_INT 10
22440: PUSH
22441: LD_INT 5
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: LIST
22448: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_INT 5
22456: PPUSH
22457: CALL_OW 321
22461: PUSH
22462: LD_INT 2
22464: EQUAL
22465: IFFALSE 22482
// bpoints := bpoints * 1.8 ;
22467: LD_ADDR_VAR 0 10
22471: PUSH
22472: LD_VAR 0 10
22476: PUSH
22477: LD_REAL  1.80000000000000E+0000
22480: MUL
22481: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22482: LD_VAR 0 6
22486: PPUSH
22487: CALL_OW 257
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: LD_INT 4
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: IN
22510: PUSH
22511: LD_VAR 0 1
22515: PPUSH
22516: LD_INT 51
22518: PPUSH
22519: CALL_OW 321
22523: PUSH
22524: LD_INT 2
22526: EQUAL
22527: AND
22528: IFFALSE 22545
// bpoints := bpoints * 1.2 ;
22530: LD_ADDR_VAR 0 10
22534: PUSH
22535: LD_VAR 0 10
22539: PUSH
22540: LD_REAL  1.20000000000000E+0000
22543: MUL
22544: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22545: LD_VAR 0 6
22549: PPUSH
22550: CALL_OW 257
22554: PUSH
22555: LD_INT 5
22557: PUSH
22558: LD_INT 7
22560: PUSH
22561: LD_INT 9
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: IN
22569: PUSH
22570: LD_VAR 0 1
22574: PPUSH
22575: LD_INT 52
22577: PPUSH
22578: CALL_OW 321
22582: PUSH
22583: LD_INT 2
22585: EQUAL
22586: AND
22587: IFFALSE 22604
// bpoints := bpoints * 1.5 ;
22589: LD_ADDR_VAR 0 10
22593: PUSH
22594: LD_VAR 0 10
22598: PUSH
22599: LD_REAL  1.50000000000000E+0000
22602: MUL
22603: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22604: LD_VAR 0 1
22608: PPUSH
22609: LD_INT 66
22611: PPUSH
22612: CALL_OW 321
22616: PUSH
22617: LD_INT 2
22619: EQUAL
22620: IFFALSE 22637
// bpoints := bpoints * 1.1 ;
22622: LD_ADDR_VAR 0 10
22626: PUSH
22627: LD_VAR 0 10
22631: PUSH
22632: LD_REAL  1.10000000000000E+0000
22635: MUL
22636: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22637: LD_ADDR_VAR 0 10
22641: PUSH
22642: LD_VAR 0 10
22646: PUSH
22647: LD_VAR 0 6
22651: PPUSH
22652: LD_INT 1
22654: PPUSH
22655: CALL_OW 259
22659: PUSH
22660: LD_REAL  1.15000000000000E+0000
22663: MUL
22664: MUL
22665: ST_TO_ADDR
// end ; unit_vehicle :
22666: GO 23494
22668: LD_INT 2
22670: DOUBLE
22671: EQUAL
22672: IFTRUE 22676
22674: GO 23482
22676: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22677: LD_VAR 0 6
22681: PPUSH
22682: CALL_OW 264
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: LD_INT 42
22692: PUSH
22693: LD_INT 24
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: IN
22701: IFFALSE 22722
// points := [ 25 , 5 , 3 ] ;
22703: LD_ADDR_VAR 0 9
22707: PUSH
22708: LD_INT 25
22710: PUSH
22711: LD_INT 5
22713: PUSH
22714: LD_INT 3
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22722: LD_VAR 0 6
22726: PPUSH
22727: CALL_OW 264
22731: PUSH
22732: LD_INT 4
22734: PUSH
22735: LD_INT 43
22737: PUSH
22738: LD_INT 25
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: IN
22746: IFFALSE 22767
// points := [ 40 , 15 , 5 ] ;
22748: LD_ADDR_VAR 0 9
22752: PUSH
22753: LD_INT 40
22755: PUSH
22756: LD_INT 15
22758: PUSH
22759: LD_INT 5
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22767: LD_VAR 0 6
22771: PPUSH
22772: CALL_OW 264
22776: PUSH
22777: LD_INT 3
22779: PUSH
22780: LD_INT 23
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: IN
22787: IFFALSE 22808
// points := [ 7 , 25 , 8 ] ;
22789: LD_ADDR_VAR 0 9
22793: PUSH
22794: LD_INT 7
22796: PUSH
22797: LD_INT 25
22799: PUSH
22800: LD_INT 8
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22808: LD_VAR 0 6
22812: PPUSH
22813: CALL_OW 264
22817: PUSH
22818: LD_INT 5
22820: PUSH
22821: LD_INT 27
22823: PUSH
22824: LD_INT 44
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: LIST
22831: IN
22832: IFFALSE 22853
// points := [ 14 , 50 , 16 ] ;
22834: LD_ADDR_VAR 0 9
22838: PUSH
22839: LD_INT 14
22841: PUSH
22842: LD_INT 50
22844: PUSH
22845: LD_INT 16
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22853: LD_VAR 0 6
22857: PPUSH
22858: CALL_OW 264
22862: PUSH
22863: LD_INT 6
22865: PUSH
22866: LD_INT 46
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: IN
22873: IFFALSE 22894
// points := [ 32 , 120 , 70 ] ;
22875: LD_ADDR_VAR 0 9
22879: PUSH
22880: LD_INT 32
22882: PUSH
22883: LD_INT 120
22885: PUSH
22886: LD_INT 70
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22894: LD_VAR 0 6
22898: PPUSH
22899: CALL_OW 264
22903: PUSH
22904: LD_INT 7
22906: PUSH
22907: LD_INT 28
22909: PUSH
22910: LD_INT 45
22912: PUSH
22913: LD_INT 92
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: IN
22922: IFFALSE 22943
// points := [ 35 , 20 , 45 ] ;
22924: LD_ADDR_VAR 0 9
22928: PUSH
22929: LD_INT 35
22931: PUSH
22932: LD_INT 20
22934: PUSH
22935: LD_INT 45
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22943: LD_VAR 0 6
22947: PPUSH
22948: CALL_OW 264
22952: PUSH
22953: LD_INT 47
22955: PUSH
22956: EMPTY
22957: LIST
22958: IN
22959: IFFALSE 22980
// points := [ 67 , 45 , 75 ] ;
22961: LD_ADDR_VAR 0 9
22965: PUSH
22966: LD_INT 67
22968: PUSH
22969: LD_INT 45
22971: PUSH
22972: LD_INT 75
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: LIST
22979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22980: LD_VAR 0 6
22984: PPUSH
22985: CALL_OW 264
22989: PUSH
22990: LD_INT 26
22992: PUSH
22993: EMPTY
22994: LIST
22995: IN
22996: IFFALSE 23017
// points := [ 120 , 30 , 80 ] ;
22998: LD_ADDR_VAR 0 9
23002: PUSH
23003: LD_INT 120
23005: PUSH
23006: LD_INT 30
23008: PUSH
23009: LD_INT 80
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23017: LD_VAR 0 6
23021: PPUSH
23022: CALL_OW 264
23026: PUSH
23027: LD_INT 22
23029: PUSH
23030: EMPTY
23031: LIST
23032: IN
23033: IFFALSE 23054
// points := [ 40 , 1 , 1 ] ;
23035: LD_ADDR_VAR 0 9
23039: PUSH
23040: LD_INT 40
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23054: LD_VAR 0 6
23058: PPUSH
23059: CALL_OW 264
23063: PUSH
23064: LD_INT 29
23066: PUSH
23067: EMPTY
23068: LIST
23069: IN
23070: IFFALSE 23091
// points := [ 70 , 200 , 400 ] ;
23072: LD_ADDR_VAR 0 9
23076: PUSH
23077: LD_INT 70
23079: PUSH
23080: LD_INT 200
23082: PUSH
23083: LD_INT 400
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23091: LD_VAR 0 6
23095: PPUSH
23096: CALL_OW 264
23100: PUSH
23101: LD_INT 14
23103: PUSH
23104: LD_INT 53
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: IN
23111: IFFALSE 23132
// points := [ 40 , 10 , 20 ] ;
23113: LD_ADDR_VAR 0 9
23117: PUSH
23118: LD_INT 40
23120: PUSH
23121: LD_INT 10
23123: PUSH
23124: LD_INT 20
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23132: LD_VAR 0 6
23136: PPUSH
23137: CALL_OW 264
23141: PUSH
23142: LD_INT 9
23144: PUSH
23145: EMPTY
23146: LIST
23147: IN
23148: IFFALSE 23169
// points := [ 5 , 70 , 20 ] ;
23150: LD_ADDR_VAR 0 9
23154: PUSH
23155: LD_INT 5
23157: PUSH
23158: LD_INT 70
23160: PUSH
23161: LD_INT 20
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23169: LD_VAR 0 6
23173: PPUSH
23174: CALL_OW 264
23178: PUSH
23179: LD_INT 10
23181: PUSH
23182: EMPTY
23183: LIST
23184: IN
23185: IFFALSE 23206
// points := [ 35 , 110 , 70 ] ;
23187: LD_ADDR_VAR 0 9
23191: PUSH
23192: LD_INT 35
23194: PUSH
23195: LD_INT 110
23197: PUSH
23198: LD_INT 70
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23206: LD_VAR 0 6
23210: PPUSH
23211: CALL_OW 265
23215: PUSH
23216: LD_INT 25
23218: EQUAL
23219: IFFALSE 23240
// points := [ 80 , 65 , 100 ] ;
23221: LD_ADDR_VAR 0 9
23225: PUSH
23226: LD_INT 80
23228: PUSH
23229: LD_INT 65
23231: PUSH
23232: LD_INT 100
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23240: LD_VAR 0 6
23244: PPUSH
23245: CALL_OW 263
23249: PUSH
23250: LD_INT 1
23252: EQUAL
23253: IFFALSE 23288
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23255: LD_ADDR_VAR 0 10
23259: PUSH
23260: LD_VAR 0 10
23264: PUSH
23265: LD_VAR 0 6
23269: PPUSH
23270: CALL_OW 311
23274: PPUSH
23275: LD_INT 3
23277: PPUSH
23278: CALL_OW 259
23282: PUSH
23283: LD_INT 4
23285: MUL
23286: MUL
23287: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23288: LD_VAR 0 6
23292: PPUSH
23293: CALL_OW 263
23297: PUSH
23298: LD_INT 2
23300: EQUAL
23301: IFFALSE 23352
// begin j := IsControledBy ( i ) ;
23303: LD_ADDR_VAR 0 7
23307: PUSH
23308: LD_VAR 0 6
23312: PPUSH
23313: CALL_OW 312
23317: ST_TO_ADDR
// if j then
23318: LD_VAR 0 7
23322: IFFALSE 23352
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23324: LD_ADDR_VAR 0 10
23328: PUSH
23329: LD_VAR 0 10
23333: PUSH
23334: LD_VAR 0 7
23338: PPUSH
23339: LD_INT 3
23341: PPUSH
23342: CALL_OW 259
23346: PUSH
23347: LD_INT 3
23349: MUL
23350: MUL
23351: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23352: LD_VAR 0 6
23356: PPUSH
23357: CALL_OW 264
23361: PUSH
23362: LD_INT 5
23364: PUSH
23365: LD_INT 6
23367: PUSH
23368: LD_INT 46
23370: PUSH
23371: LD_INT 44
23373: PUSH
23374: LD_INT 47
23376: PUSH
23377: LD_INT 45
23379: PUSH
23380: LD_INT 28
23382: PUSH
23383: LD_INT 7
23385: PUSH
23386: LD_INT 27
23388: PUSH
23389: LD_INT 29
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: IN
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: LD_INT 52
23412: PPUSH
23413: CALL_OW 321
23417: PUSH
23418: LD_INT 2
23420: EQUAL
23421: AND
23422: IFFALSE 23439
// bpoints := bpoints * 1.2 ;
23424: LD_ADDR_VAR 0 10
23428: PUSH
23429: LD_VAR 0 10
23433: PUSH
23434: LD_REAL  1.20000000000000E+0000
23437: MUL
23438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23439: LD_VAR 0 6
23443: PPUSH
23444: CALL_OW 264
23448: PUSH
23449: LD_INT 6
23451: PUSH
23452: LD_INT 46
23454: PUSH
23455: LD_INT 47
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: IN
23463: IFFALSE 23480
// bpoints := bpoints * 1.2 ;
23465: LD_ADDR_VAR 0 10
23469: PUSH
23470: LD_VAR 0 10
23474: PUSH
23475: LD_REAL  1.20000000000000E+0000
23478: MUL
23479: ST_TO_ADDR
// end ; unit_building :
23480: GO 23494
23482: LD_INT 3
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23493
23490: POP
// ; end ;
23491: GO 23494
23493: POP
// for j = 1 to 3 do
23494: LD_ADDR_VAR 0 7
23498: PUSH
23499: DOUBLE
23500: LD_INT 1
23502: DEC
23503: ST_TO_ADDR
23504: LD_INT 3
23506: PUSH
23507: FOR_TO
23508: IFFALSE 23561
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23510: LD_ADDR_VAR 0 5
23514: PUSH
23515: LD_VAR 0 5
23519: PPUSH
23520: LD_VAR 0 7
23524: PPUSH
23525: LD_VAR 0 5
23529: PUSH
23530: LD_VAR 0 7
23534: ARRAY
23535: PUSH
23536: LD_VAR 0 9
23540: PUSH
23541: LD_VAR 0 7
23545: ARRAY
23546: PUSH
23547: LD_VAR 0 10
23551: MUL
23552: PLUS
23553: PPUSH
23554: CALL_OW 1
23558: ST_TO_ADDR
23559: GO 23507
23561: POP
23562: POP
// end ;
23563: GO 22042
23565: POP
23566: POP
// result := Replace ( result , 4 , tmp ) ;
23567: LD_ADDR_VAR 0 5
23571: PUSH
23572: LD_VAR 0 5
23576: PPUSH
23577: LD_INT 4
23579: PPUSH
23580: LD_VAR 0 8
23584: PPUSH
23585: CALL_OW 1
23589: ST_TO_ADDR
// end ;
23590: LD_VAR 0 5
23594: RET
// export function DangerAtRange ( unit , range ) ; begin
23595: LD_INT 0
23597: PPUSH
// if not unit then
23598: LD_VAR 0 1
23602: NOT
23603: IFFALSE 23607
// exit ;
23605: GO 23652
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: CALL_OW 255
23621: PPUSH
23622: LD_VAR 0 1
23626: PPUSH
23627: CALL_OW 250
23631: PPUSH
23632: LD_VAR 0 1
23636: PPUSH
23637: CALL_OW 251
23641: PPUSH
23642: LD_VAR 0 2
23646: PPUSH
23647: CALL 21894 0 4
23651: ST_TO_ADDR
// end ;
23652: LD_VAR 0 3
23656: RET
// export function DangerInArea ( side , area ) ; begin
23657: LD_INT 0
23659: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23660: LD_ADDR_VAR 0 3
23664: PUSH
23665: LD_VAR 0 2
23669: PPUSH
23670: LD_INT 81
23672: PUSH
23673: LD_VAR 0 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 70
23686: ST_TO_ADDR
// end ;
23687: LD_VAR 0 3
23691: RET
// export function IsExtension ( b ) ; begin
23692: LD_INT 0
23694: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23695: LD_ADDR_VAR 0 2
23699: PUSH
23700: LD_VAR 0 1
23704: PUSH
23705: LD_INT 23
23707: PUSH
23708: LD_INT 20
23710: PUSH
23711: LD_INT 22
23713: PUSH
23714: LD_INT 17
23716: PUSH
23717: LD_INT 24
23719: PUSH
23720: LD_INT 21
23722: PUSH
23723: LD_INT 19
23725: PUSH
23726: LD_INT 16
23728: PUSH
23729: LD_INT 25
23731: PUSH
23732: LD_INT 18
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: IN
23747: ST_TO_ADDR
// end ;
23748: LD_VAR 0 2
23752: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23753: LD_INT 0
23755: PPUSH
23756: PPUSH
23757: PPUSH
// result := [ ] ;
23758: LD_ADDR_VAR 0 4
23762: PUSH
23763: EMPTY
23764: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23765: LD_ADDR_VAR 0 5
23769: PUSH
23770: LD_VAR 0 2
23774: PPUSH
23775: LD_INT 21
23777: PUSH
23778: LD_INT 3
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PPUSH
23785: CALL_OW 70
23789: ST_TO_ADDR
// if not tmp then
23790: LD_VAR 0 5
23794: NOT
23795: IFFALSE 23799
// exit ;
23797: GO 23863
// if checkLink then
23799: LD_VAR 0 3
23803: IFFALSE 23853
// begin for i in tmp do
23805: LD_ADDR_VAR 0 6
23809: PUSH
23810: LD_VAR 0 5
23814: PUSH
23815: FOR_IN
23816: IFFALSE 23851
// if GetBase ( i ) <> base then
23818: LD_VAR 0 6
23822: PPUSH
23823: CALL_OW 274
23827: PUSH
23828: LD_VAR 0 1
23832: NONEQUAL
23833: IFFALSE 23849
// ComLinkToBase ( base , i ) ;
23835: LD_VAR 0 1
23839: PPUSH
23840: LD_VAR 0 6
23844: PPUSH
23845: CALL_OW 169
23849: GO 23815
23851: POP
23852: POP
// end ; result := tmp ;
23853: LD_ADDR_VAR 0 4
23857: PUSH
23858: LD_VAR 0 5
23862: ST_TO_ADDR
// end ;
23863: LD_VAR 0 4
23867: RET
// export function ComComplete ( units , b ) ; var i ; begin
23868: LD_INT 0
23870: PPUSH
23871: PPUSH
// if not units then
23872: LD_VAR 0 1
23876: NOT
23877: IFFALSE 23881
// exit ;
23879: GO 23971
// for i in units do
23881: LD_ADDR_VAR 0 4
23885: PUSH
23886: LD_VAR 0 1
23890: PUSH
23891: FOR_IN
23892: IFFALSE 23969
// if BuildingStatus ( b ) = bs_build then
23894: LD_VAR 0 2
23898: PPUSH
23899: CALL_OW 461
23903: PUSH
23904: LD_INT 1
23906: EQUAL
23907: IFFALSE 23967
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23909: LD_VAR 0 4
23913: PPUSH
23914: LD_STRING h
23916: PUSH
23917: LD_VAR 0 2
23921: PPUSH
23922: CALL_OW 250
23926: PUSH
23927: LD_VAR 0 2
23931: PPUSH
23932: CALL_OW 251
23936: PUSH
23937: LD_VAR 0 2
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: PPUSH
23963: CALL_OW 446
23967: GO 23891
23969: POP
23970: POP
// end ;
23971: LD_VAR 0 3
23975: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23976: LD_INT 0
23978: PPUSH
23979: PPUSH
23980: PPUSH
23981: PPUSH
23982: PPUSH
23983: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23984: LD_VAR 0 1
23988: NOT
23989: PUSH
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL_OW 263
23999: PUSH
24000: LD_INT 2
24002: NONEQUAL
24003: OR
24004: IFFALSE 24008
// exit ;
24006: GO 24324
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24008: LD_ADDR_VAR 0 6
24012: PUSH
24013: LD_INT 22
24015: PUSH
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 255
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_INT 36
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 34
24045: PUSH
24046: LD_INT 31
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PPUSH
24062: CALL_OW 69
24066: ST_TO_ADDR
// if not tmp then
24067: LD_VAR 0 6
24071: NOT
24072: IFFALSE 24076
// exit ;
24074: GO 24324
// result := [ ] ;
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: EMPTY
24082: ST_TO_ADDR
// for i in tmp do
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_VAR 0 6
24092: PUSH
24093: FOR_IN
24094: IFFALSE 24165
// begin t := UnitsInside ( i ) ;
24096: LD_ADDR_VAR 0 4
24100: PUSH
24101: LD_VAR 0 3
24105: PPUSH
24106: CALL_OW 313
24110: ST_TO_ADDR
// if t then
24111: LD_VAR 0 4
24115: IFFALSE 24163
// for j in t do
24117: LD_ADDR_VAR 0 7
24121: PUSH
24122: LD_VAR 0 4
24126: PUSH
24127: FOR_IN
24128: IFFALSE 24161
// result := Replace ( result , result + 1 , j ) ;
24130: LD_ADDR_VAR 0 2
24134: PUSH
24135: LD_VAR 0 2
24139: PPUSH
24140: LD_VAR 0 2
24144: PUSH
24145: LD_INT 1
24147: PLUS
24148: PPUSH
24149: LD_VAR 0 7
24153: PPUSH
24154: CALL_OW 1
24158: ST_TO_ADDR
24159: GO 24127
24161: POP
24162: POP
// end ;
24163: GO 24093
24165: POP
24166: POP
// if not result then
24167: LD_VAR 0 2
24171: NOT
24172: IFFALSE 24176
// exit ;
24174: GO 24324
// mech := result [ 1 ] ;
24176: LD_ADDR_VAR 0 5
24180: PUSH
24181: LD_VAR 0 2
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: ST_TO_ADDR
// if result > 1 then
24190: LD_VAR 0 2
24194: PUSH
24195: LD_INT 1
24197: GREATER
24198: IFFALSE 24310
// begin for i = 2 to result do
24200: LD_ADDR_VAR 0 3
24204: PUSH
24205: DOUBLE
24206: LD_INT 2
24208: DEC
24209: ST_TO_ADDR
24210: LD_VAR 0 2
24214: PUSH
24215: FOR_TO
24216: IFFALSE 24308
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24218: LD_ADDR_VAR 0 4
24222: PUSH
24223: LD_VAR 0 2
24227: PUSH
24228: LD_VAR 0 3
24232: ARRAY
24233: PPUSH
24234: LD_INT 3
24236: PPUSH
24237: CALL_OW 259
24241: PUSH
24242: LD_VAR 0 2
24246: PUSH
24247: LD_VAR 0 3
24251: ARRAY
24252: PPUSH
24253: CALL_OW 432
24257: MINUS
24258: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24259: LD_VAR 0 4
24263: PUSH
24264: LD_VAR 0 5
24268: PPUSH
24269: LD_INT 3
24271: PPUSH
24272: CALL_OW 259
24276: PUSH
24277: LD_VAR 0 5
24281: PPUSH
24282: CALL_OW 432
24286: MINUS
24287: GREATEREQUAL
24288: IFFALSE 24306
// mech := result [ i ] ;
24290: LD_ADDR_VAR 0 5
24294: PUSH
24295: LD_VAR 0 2
24299: PUSH
24300: LD_VAR 0 3
24304: ARRAY
24305: ST_TO_ADDR
// end ;
24306: GO 24215
24308: POP
24309: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24310: LD_VAR 0 1
24314: PPUSH
24315: LD_VAR 0 5
24319: PPUSH
24320: CALL_OW 135
// end ;
24324: LD_VAR 0 2
24328: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24329: LD_INT 0
24331: PPUSH
24332: PPUSH
24333: PPUSH
24334: PPUSH
24335: PPUSH
24336: PPUSH
24337: PPUSH
24338: PPUSH
24339: PPUSH
24340: PPUSH
24341: PPUSH
24342: PPUSH
24343: PPUSH
// result := [ ] ;
24344: LD_ADDR_VAR 0 7
24348: PUSH
24349: EMPTY
24350: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL_OW 266
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: IN
24371: NOT
24372: IFFALSE 24376
// exit ;
24374: GO 26010
// if name then
24376: LD_VAR 0 3
24380: IFFALSE 24396
// SetBName ( base_dep , name ) ;
24382: LD_VAR 0 1
24386: PPUSH
24387: LD_VAR 0 3
24391: PPUSH
24392: CALL_OW 500
// base := GetBase ( base_dep ) ;
24396: LD_ADDR_VAR 0 15
24400: PUSH
24401: LD_VAR 0 1
24405: PPUSH
24406: CALL_OW 274
24410: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24411: LD_ADDR_VAR 0 16
24415: PUSH
24416: LD_VAR 0 1
24420: PPUSH
24421: CALL_OW 255
24425: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24426: LD_ADDR_VAR 0 17
24430: PUSH
24431: LD_VAR 0 1
24435: PPUSH
24436: CALL_OW 248
24440: ST_TO_ADDR
// if sources then
24441: LD_VAR 0 5
24445: IFFALSE 24492
// for i = 1 to 3 do
24447: LD_ADDR_VAR 0 8
24451: PUSH
24452: DOUBLE
24453: LD_INT 1
24455: DEC
24456: ST_TO_ADDR
24457: LD_INT 3
24459: PUSH
24460: FOR_TO
24461: IFFALSE 24490
// AddResourceType ( base , i , sources [ i ] ) ;
24463: LD_VAR 0 15
24467: PPUSH
24468: LD_VAR 0 8
24472: PPUSH
24473: LD_VAR 0 5
24477: PUSH
24478: LD_VAR 0 8
24482: ARRAY
24483: PPUSH
24484: CALL_OW 276
24488: GO 24460
24490: POP
24491: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24492: LD_ADDR_VAR 0 18
24496: PUSH
24497: LD_VAR 0 15
24501: PPUSH
24502: LD_VAR 0 2
24506: PPUSH
24507: LD_INT 1
24509: PPUSH
24510: CALL 23753 0 3
24514: ST_TO_ADDR
// InitHc ;
24515: CALL_OW 19
// InitUc ;
24519: CALL_OW 18
// uc_side := side ;
24523: LD_ADDR_OWVAR 20
24527: PUSH
24528: LD_VAR 0 16
24532: ST_TO_ADDR
// uc_nation := nation ;
24533: LD_ADDR_OWVAR 21
24537: PUSH
24538: LD_VAR 0 17
24542: ST_TO_ADDR
// if buildings then
24543: LD_VAR 0 18
24547: IFFALSE 25869
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24549: LD_ADDR_VAR 0 19
24553: PUSH
24554: LD_VAR 0 18
24558: PPUSH
24559: LD_INT 2
24561: PUSH
24562: LD_INT 30
24564: PUSH
24565: LD_INT 29
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 30
24574: PUSH
24575: LD_INT 30
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: PPUSH
24587: CALL_OW 72
24591: ST_TO_ADDR
// if tmp then
24592: LD_VAR 0 19
24596: IFFALSE 24644
// for i in tmp do
24598: LD_ADDR_VAR 0 8
24602: PUSH
24603: LD_VAR 0 19
24607: PUSH
24608: FOR_IN
24609: IFFALSE 24642
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24611: LD_VAR 0 8
24615: PPUSH
24616: CALL_OW 250
24620: PPUSH
24621: LD_VAR 0 8
24625: PPUSH
24626: CALL_OW 251
24630: PPUSH
24631: LD_VAR 0 16
24635: PPUSH
24636: CALL_OW 441
24640: GO 24608
24642: POP
24643: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24644: LD_VAR 0 18
24648: PPUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 30
24654: PUSH
24655: LD_INT 32
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 30
24664: PUSH
24665: LD_INT 33
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 72
24681: IFFALSE 24769
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24683: LD_ADDR_VAR 0 8
24687: PUSH
24688: LD_VAR 0 18
24692: PPUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 30
24698: PUSH
24699: LD_INT 32
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 30
24708: PUSH
24709: LD_INT 33
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 72
24725: PUSH
24726: FOR_IN
24727: IFFALSE 24767
// begin if not GetBWeapon ( i ) then
24729: LD_VAR 0 8
24733: PPUSH
24734: CALL_OW 269
24738: NOT
24739: IFFALSE 24765
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24741: LD_VAR 0 8
24745: PPUSH
24746: LD_VAR 0 8
24750: PPUSH
24751: LD_VAR 0 2
24755: PPUSH
24756: CALL 26015 0 2
24760: PPUSH
24761: CALL_OW 431
// end ;
24765: GO 24726
24767: POP
24768: POP
// end ; for i = 1 to personel do
24769: LD_ADDR_VAR 0 8
24773: PUSH
24774: DOUBLE
24775: LD_INT 1
24777: DEC
24778: ST_TO_ADDR
24779: LD_VAR 0 6
24783: PUSH
24784: FOR_TO
24785: IFFALSE 25849
// begin if i > 4 then
24787: LD_VAR 0 8
24791: PUSH
24792: LD_INT 4
24794: GREATER
24795: IFFALSE 24799
// break ;
24797: GO 25849
// case i of 1 :
24799: LD_VAR 0 8
24803: PUSH
24804: LD_INT 1
24806: DOUBLE
24807: EQUAL
24808: IFTRUE 24812
24810: GO 24892
24812: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24813: LD_ADDR_VAR 0 12
24817: PUSH
24818: LD_VAR 0 18
24822: PPUSH
24823: LD_INT 22
24825: PUSH
24826: LD_VAR 0 16
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 58
24837: PUSH
24838: EMPTY
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: PUSH
24844: LD_INT 30
24846: PUSH
24847: LD_INT 32
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 30
24856: PUSH
24857: LD_INT 4
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 30
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: PPUSH
24885: CALL_OW 72
24889: ST_TO_ADDR
24890: GO 25114
24892: LD_INT 2
24894: DOUBLE
24895: EQUAL
24896: IFTRUE 24900
24898: GO 24962
24900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24901: LD_ADDR_VAR 0 12
24905: PUSH
24906: LD_VAR 0 18
24910: PPUSH
24911: LD_INT 22
24913: PUSH
24914: LD_VAR 0 16
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: LD_INT 30
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 30
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PPUSH
24955: CALL_OW 72
24959: ST_TO_ADDR
24960: GO 25114
24962: LD_INT 3
24964: DOUBLE
24965: EQUAL
24966: IFTRUE 24970
24968: GO 25032
24970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24971: LD_ADDR_VAR 0 12
24975: PUSH
24976: LD_VAR 0 18
24980: PPUSH
24981: LD_INT 22
24983: PUSH
24984: LD_VAR 0 16
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: LD_INT 30
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 30
25008: PUSH
25009: LD_INT 3
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 72
25029: ST_TO_ADDR
25030: GO 25114
25032: LD_INT 4
25034: DOUBLE
25035: EQUAL
25036: IFTRUE 25040
25038: GO 25113
25040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25041: LD_ADDR_VAR 0 12
25045: PUSH
25046: LD_VAR 0 18
25050: PPUSH
25051: LD_INT 22
25053: PUSH
25054: LD_VAR 0 16
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: PUSH
25066: LD_INT 30
25068: PUSH
25069: LD_INT 6
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 30
25078: PUSH
25079: LD_INT 7
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 30
25088: PUSH
25089: LD_INT 8
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PPUSH
25106: CALL_OW 72
25110: ST_TO_ADDR
25111: GO 25114
25113: POP
// if i = 1 then
25114: LD_VAR 0 8
25118: PUSH
25119: LD_INT 1
25121: EQUAL
25122: IFFALSE 25233
// begin tmp := [ ] ;
25124: LD_ADDR_VAR 0 19
25128: PUSH
25129: EMPTY
25130: ST_TO_ADDR
// for j in f do
25131: LD_ADDR_VAR 0 9
25135: PUSH
25136: LD_VAR 0 12
25140: PUSH
25141: FOR_IN
25142: IFFALSE 25215
// if GetBType ( j ) = b_bunker then
25144: LD_VAR 0 9
25148: PPUSH
25149: CALL_OW 266
25153: PUSH
25154: LD_INT 32
25156: EQUAL
25157: IFFALSE 25184
// tmp := Insert ( tmp , 1 , j ) else
25159: LD_ADDR_VAR 0 19
25163: PUSH
25164: LD_VAR 0 19
25168: PPUSH
25169: LD_INT 1
25171: PPUSH
25172: LD_VAR 0 9
25176: PPUSH
25177: CALL_OW 2
25181: ST_TO_ADDR
25182: GO 25213
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25184: LD_ADDR_VAR 0 19
25188: PUSH
25189: LD_VAR 0 19
25193: PPUSH
25194: LD_VAR 0 19
25198: PUSH
25199: LD_INT 1
25201: PLUS
25202: PPUSH
25203: LD_VAR 0 9
25207: PPUSH
25208: CALL_OW 2
25212: ST_TO_ADDR
25213: GO 25141
25215: POP
25216: POP
// if tmp then
25217: LD_VAR 0 19
25221: IFFALSE 25233
// f := tmp ;
25223: LD_ADDR_VAR 0 12
25227: PUSH
25228: LD_VAR 0 19
25232: ST_TO_ADDR
// end ; x := personel [ i ] ;
25233: LD_ADDR_VAR 0 13
25237: PUSH
25238: LD_VAR 0 6
25242: PUSH
25243: LD_VAR 0 8
25247: ARRAY
25248: ST_TO_ADDR
// if x = - 1 then
25249: LD_VAR 0 13
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: EQUAL
25258: IFFALSE 25467
// begin for j in f do
25260: LD_ADDR_VAR 0 9
25264: PUSH
25265: LD_VAR 0 12
25269: PUSH
25270: FOR_IN
25271: IFFALSE 25463
// repeat InitHc ;
25273: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25277: LD_VAR 0 9
25281: PPUSH
25282: CALL_OW 266
25286: PUSH
25287: LD_INT 5
25289: EQUAL
25290: IFFALSE 25360
// begin if UnitsInside ( j ) < 3 then
25292: LD_VAR 0 9
25296: PPUSH
25297: CALL_OW 313
25301: PUSH
25302: LD_INT 3
25304: LESS
25305: IFFALSE 25341
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25307: LD_INT 0
25309: PPUSH
25310: LD_INT 5
25312: PUSH
25313: LD_INT 8
25315: PUSH
25316: LD_INT 9
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: PUSH
25324: LD_VAR 0 17
25328: ARRAY
25329: PPUSH
25330: LD_VAR 0 4
25334: PPUSH
25335: CALL_OW 380
25339: GO 25358
// PrepareHuman ( false , i , skill ) ;
25341: LD_INT 0
25343: PPUSH
25344: LD_VAR 0 8
25348: PPUSH
25349: LD_VAR 0 4
25353: PPUSH
25354: CALL_OW 380
// end else
25358: GO 25377
// PrepareHuman ( false , i , skill ) ;
25360: LD_INT 0
25362: PPUSH
25363: LD_VAR 0 8
25367: PPUSH
25368: LD_VAR 0 4
25372: PPUSH
25373: CALL_OW 380
// un := CreateHuman ;
25377: LD_ADDR_VAR 0 14
25381: PUSH
25382: CALL_OW 44
25386: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25387: LD_ADDR_VAR 0 7
25391: PUSH
25392: LD_VAR 0 7
25396: PPUSH
25397: LD_INT 1
25399: PPUSH
25400: LD_VAR 0 14
25404: PPUSH
25405: CALL_OW 2
25409: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25410: LD_VAR 0 14
25414: PPUSH
25415: LD_VAR 0 9
25419: PPUSH
25420: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25424: LD_VAR 0 9
25428: PPUSH
25429: CALL_OW 313
25433: PUSH
25434: LD_INT 6
25436: EQUAL
25437: PUSH
25438: LD_VAR 0 9
25442: PPUSH
25443: CALL_OW 266
25447: PUSH
25448: LD_INT 32
25450: PUSH
25451: LD_INT 31
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: IN
25458: OR
25459: IFFALSE 25273
25461: GO 25270
25463: POP
25464: POP
// end else
25465: GO 25847
// for j = 1 to x do
25467: LD_ADDR_VAR 0 9
25471: PUSH
25472: DOUBLE
25473: LD_INT 1
25475: DEC
25476: ST_TO_ADDR
25477: LD_VAR 0 13
25481: PUSH
25482: FOR_TO
25483: IFFALSE 25845
// begin InitHc ;
25485: CALL_OW 19
// if not f then
25489: LD_VAR 0 12
25493: NOT
25494: IFFALSE 25583
// begin PrepareHuman ( false , i , skill ) ;
25496: LD_INT 0
25498: PPUSH
25499: LD_VAR 0 8
25503: PPUSH
25504: LD_VAR 0 4
25508: PPUSH
25509: CALL_OW 380
// un := CreateHuman ;
25513: LD_ADDR_VAR 0 14
25517: PUSH
25518: CALL_OW 44
25522: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25523: LD_ADDR_VAR 0 7
25527: PUSH
25528: LD_VAR 0 7
25532: PPUSH
25533: LD_INT 1
25535: PPUSH
25536: LD_VAR 0 14
25540: PPUSH
25541: CALL_OW 2
25545: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25546: LD_VAR 0 14
25550: PPUSH
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL_OW 250
25560: PPUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 251
25570: PPUSH
25571: LD_INT 10
25573: PPUSH
25574: LD_INT 0
25576: PPUSH
25577: CALL_OW 50
// continue ;
25581: GO 25482
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25583: LD_VAR 0 12
25587: PUSH
25588: LD_INT 1
25590: ARRAY
25591: PPUSH
25592: CALL_OW 313
25596: PUSH
25597: LD_VAR 0 12
25601: PUSH
25602: LD_INT 1
25604: ARRAY
25605: PPUSH
25606: CALL_OW 266
25610: PUSH
25611: LD_INT 32
25613: PUSH
25614: LD_INT 31
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: IN
25621: AND
25622: PUSH
25623: LD_VAR 0 12
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PPUSH
25632: CALL_OW 313
25636: PUSH
25637: LD_INT 6
25639: EQUAL
25640: OR
25641: IFFALSE 25661
// f := Delete ( f , 1 ) ;
25643: LD_ADDR_VAR 0 12
25647: PUSH
25648: LD_VAR 0 12
25652: PPUSH
25653: LD_INT 1
25655: PPUSH
25656: CALL_OW 3
25660: ST_TO_ADDR
// if not f then
25661: LD_VAR 0 12
25665: NOT
25666: IFFALSE 25684
// begin x := x + 2 ;
25668: LD_ADDR_VAR 0 13
25672: PUSH
25673: LD_VAR 0 13
25677: PUSH
25678: LD_INT 2
25680: PLUS
25681: ST_TO_ADDR
// continue ;
25682: GO 25482
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25684: LD_VAR 0 12
25688: PUSH
25689: LD_INT 1
25691: ARRAY
25692: PPUSH
25693: CALL_OW 266
25697: PUSH
25698: LD_INT 5
25700: EQUAL
25701: IFFALSE 25775
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25703: LD_VAR 0 12
25707: PUSH
25708: LD_INT 1
25710: ARRAY
25711: PPUSH
25712: CALL_OW 313
25716: PUSH
25717: LD_INT 3
25719: LESS
25720: IFFALSE 25756
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25722: LD_INT 0
25724: PPUSH
25725: LD_INT 5
25727: PUSH
25728: LD_INT 8
25730: PUSH
25731: LD_INT 9
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: PUSH
25739: LD_VAR 0 17
25743: ARRAY
25744: PPUSH
25745: LD_VAR 0 4
25749: PPUSH
25750: CALL_OW 380
25754: GO 25773
// PrepareHuman ( false , i , skill ) ;
25756: LD_INT 0
25758: PPUSH
25759: LD_VAR 0 8
25763: PPUSH
25764: LD_VAR 0 4
25768: PPUSH
25769: CALL_OW 380
// end else
25773: GO 25792
// PrepareHuman ( false , i , skill ) ;
25775: LD_INT 0
25777: PPUSH
25778: LD_VAR 0 8
25782: PPUSH
25783: LD_VAR 0 4
25787: PPUSH
25788: CALL_OW 380
// un := CreateHuman ;
25792: LD_ADDR_VAR 0 14
25796: PUSH
25797: CALL_OW 44
25801: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25802: LD_ADDR_VAR 0 7
25806: PUSH
25807: LD_VAR 0 7
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: LD_VAR 0 14
25819: PPUSH
25820: CALL_OW 2
25824: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25825: LD_VAR 0 14
25829: PPUSH
25830: LD_VAR 0 12
25834: PUSH
25835: LD_INT 1
25837: ARRAY
25838: PPUSH
25839: CALL_OW 52
// end ;
25843: GO 25482
25845: POP
25846: POP
// end ;
25847: GO 24784
25849: POP
25850: POP
// result := result ^ buildings ;
25851: LD_ADDR_VAR 0 7
25855: PUSH
25856: LD_VAR 0 7
25860: PUSH
25861: LD_VAR 0 18
25865: ADD
25866: ST_TO_ADDR
// end else
25867: GO 26010
// begin for i = 1 to personel do
25869: LD_ADDR_VAR 0 8
25873: PUSH
25874: DOUBLE
25875: LD_INT 1
25877: DEC
25878: ST_TO_ADDR
25879: LD_VAR 0 6
25883: PUSH
25884: FOR_TO
25885: IFFALSE 26008
// begin if i > 4 then
25887: LD_VAR 0 8
25891: PUSH
25892: LD_INT 4
25894: GREATER
25895: IFFALSE 25899
// break ;
25897: GO 26008
// x := personel [ i ] ;
25899: LD_ADDR_VAR 0 13
25903: PUSH
25904: LD_VAR 0 6
25908: PUSH
25909: LD_VAR 0 8
25913: ARRAY
25914: ST_TO_ADDR
// if x = - 1 then
25915: LD_VAR 0 13
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: EQUAL
25924: IFFALSE 25928
// continue ;
25926: GO 25884
// PrepareHuman ( false , i , skill ) ;
25928: LD_INT 0
25930: PPUSH
25931: LD_VAR 0 8
25935: PPUSH
25936: LD_VAR 0 4
25940: PPUSH
25941: CALL_OW 380
// un := CreateHuman ;
25945: LD_ADDR_VAR 0 14
25949: PUSH
25950: CALL_OW 44
25954: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25955: LD_VAR 0 14
25959: PPUSH
25960: LD_VAR 0 1
25964: PPUSH
25965: CALL_OW 250
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 251
25979: PPUSH
25980: LD_INT 10
25982: PPUSH
25983: LD_INT 0
25985: PPUSH
25986: CALL_OW 50
// result := result ^ un ;
25990: LD_ADDR_VAR 0 7
25994: PUSH
25995: LD_VAR 0 7
25999: PUSH
26000: LD_VAR 0 14
26004: ADD
26005: ST_TO_ADDR
// end ;
26006: GO 25884
26008: POP
26009: POP
// end ; end ;
26010: LD_VAR 0 7
26014: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26015: LD_INT 0
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
26027: PPUSH
26028: PPUSH
26029: PPUSH
26030: PPUSH
26031: PPUSH
26032: PPUSH
// result := false ;
26033: LD_ADDR_VAR 0 3
26037: PUSH
26038: LD_INT 0
26040: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26041: LD_VAR 0 1
26045: NOT
26046: PUSH
26047: LD_VAR 0 1
26051: PPUSH
26052: CALL_OW 266
26056: PUSH
26057: LD_INT 32
26059: PUSH
26060: LD_INT 33
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: IN
26067: NOT
26068: OR
26069: IFFALSE 26073
// exit ;
26071: GO 27182
// nat := GetNation ( tower ) ;
26073: LD_ADDR_VAR 0 12
26077: PUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: CALL_OW 248
26087: ST_TO_ADDR
// side := GetSide ( tower ) ;
26088: LD_ADDR_VAR 0 16
26092: PUSH
26093: LD_VAR 0 1
26097: PPUSH
26098: CALL_OW 255
26102: ST_TO_ADDR
// x := GetX ( tower ) ;
26103: LD_ADDR_VAR 0 10
26107: PUSH
26108: LD_VAR 0 1
26112: PPUSH
26113: CALL_OW 250
26117: ST_TO_ADDR
// y := GetY ( tower ) ;
26118: LD_ADDR_VAR 0 11
26122: PUSH
26123: LD_VAR 0 1
26127: PPUSH
26128: CALL_OW 251
26132: ST_TO_ADDR
// if not x or not y then
26133: LD_VAR 0 10
26137: NOT
26138: PUSH
26139: LD_VAR 0 11
26143: NOT
26144: OR
26145: IFFALSE 26149
// exit ;
26147: GO 27182
// weapon := 0 ;
26149: LD_ADDR_VAR 0 18
26153: PUSH
26154: LD_INT 0
26156: ST_TO_ADDR
// fac_list := [ ] ;
26157: LD_ADDR_VAR 0 17
26161: PUSH
26162: EMPTY
26163: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26164: LD_ADDR_VAR 0 6
26168: PUSH
26169: LD_VAR 0 1
26173: PPUSH
26174: CALL_OW 274
26178: PPUSH
26179: LD_VAR 0 2
26183: PPUSH
26184: LD_INT 0
26186: PPUSH
26187: CALL 23753 0 3
26191: PPUSH
26192: LD_INT 30
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PPUSH
26202: CALL_OW 72
26206: ST_TO_ADDR
// if not factories then
26207: LD_VAR 0 6
26211: NOT
26212: IFFALSE 26216
// exit ;
26214: GO 27182
// for i in factories do
26216: LD_ADDR_VAR 0 8
26220: PUSH
26221: LD_VAR 0 6
26225: PUSH
26226: FOR_IN
26227: IFFALSE 26252
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26229: LD_ADDR_VAR 0 17
26233: PUSH
26234: LD_VAR 0 17
26238: PUSH
26239: LD_VAR 0 8
26243: PPUSH
26244: CALL_OW 478
26248: UNION
26249: ST_TO_ADDR
26250: GO 26226
26252: POP
26253: POP
// if not fac_list then
26254: LD_VAR 0 17
26258: NOT
26259: IFFALSE 26263
// exit ;
26261: GO 27182
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26263: LD_ADDR_VAR 0 5
26267: PUSH
26268: LD_INT 4
26270: PUSH
26271: LD_INT 5
26273: PUSH
26274: LD_INT 9
26276: PUSH
26277: LD_INT 10
26279: PUSH
26280: LD_INT 6
26282: PUSH
26283: LD_INT 7
26285: PUSH
26286: LD_INT 11
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 27
26300: PUSH
26301: LD_INT 28
26303: PUSH
26304: LD_INT 26
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 43
26318: PUSH
26319: LD_INT 44
26321: PUSH
26322: LD_INT 46
26324: PUSH
26325: LD_INT 45
26327: PUSH
26328: LD_INT 47
26330: PUSH
26331: LD_INT 49
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: PUSH
26347: LD_VAR 0 12
26351: ARRAY
26352: ST_TO_ADDR
// list := list isect fac_list ;
26353: LD_ADDR_VAR 0 5
26357: PUSH
26358: LD_VAR 0 5
26362: PUSH
26363: LD_VAR 0 17
26367: ISECT
26368: ST_TO_ADDR
// if not list then
26369: LD_VAR 0 5
26373: NOT
26374: IFFALSE 26378
// exit ;
26376: GO 27182
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26378: LD_VAR 0 12
26382: PUSH
26383: LD_INT 3
26385: EQUAL
26386: PUSH
26387: LD_INT 49
26389: PUSH
26390: LD_VAR 0 5
26394: IN
26395: AND
26396: PUSH
26397: LD_INT 31
26399: PPUSH
26400: LD_VAR 0 16
26404: PPUSH
26405: CALL_OW 321
26409: PUSH
26410: LD_INT 2
26412: EQUAL
26413: AND
26414: IFFALSE 26474
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26416: LD_INT 22
26418: PUSH
26419: LD_VAR 0 16
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 35
26430: PUSH
26431: LD_INT 49
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 91
26440: PUSH
26441: LD_VAR 0 1
26445: PUSH
26446: LD_INT 10
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: PPUSH
26459: CALL_OW 69
26463: NOT
26464: IFFALSE 26474
// weapon := ru_time_lapser ;
26466: LD_ADDR_VAR 0 18
26470: PUSH
26471: LD_INT 49
26473: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26474: LD_VAR 0 12
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: IN
26489: PUSH
26490: LD_INT 11
26492: PUSH
26493: LD_VAR 0 5
26497: IN
26498: PUSH
26499: LD_INT 30
26501: PUSH
26502: LD_VAR 0 5
26506: IN
26507: OR
26508: AND
26509: PUSH
26510: LD_INT 6
26512: PPUSH
26513: LD_VAR 0 16
26517: PPUSH
26518: CALL_OW 321
26522: PUSH
26523: LD_INT 2
26525: EQUAL
26526: AND
26527: IFFALSE 26692
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26529: LD_INT 22
26531: PUSH
26532: LD_VAR 0 16
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 35
26546: PUSH
26547: LD_INT 11
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 35
26556: PUSH
26557: LD_INT 30
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 91
26571: PUSH
26572: LD_VAR 0 1
26576: PUSH
26577: LD_INT 18
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: PPUSH
26590: CALL_OW 69
26594: NOT
26595: PUSH
26596: LD_INT 22
26598: PUSH
26599: LD_VAR 0 16
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: LD_INT 30
26613: PUSH
26614: LD_INT 32
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 30
26623: PUSH
26624: LD_INT 33
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 91
26638: PUSH
26639: LD_VAR 0 1
26643: PUSH
26644: LD_INT 12
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: PPUSH
26660: CALL_OW 69
26664: PUSH
26665: LD_INT 2
26667: GREATER
26668: AND
26669: IFFALSE 26692
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26671: LD_ADDR_VAR 0 18
26675: PUSH
26676: LD_INT 11
26678: PUSH
26679: LD_INT 30
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_VAR 0 12
26690: ARRAY
26691: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26692: LD_VAR 0 18
26696: NOT
26697: PUSH
26698: LD_INT 40
26700: PPUSH
26701: LD_VAR 0 16
26705: PPUSH
26706: CALL_OW 321
26710: PUSH
26711: LD_INT 2
26713: EQUAL
26714: AND
26715: PUSH
26716: LD_INT 7
26718: PUSH
26719: LD_VAR 0 5
26723: IN
26724: PUSH
26725: LD_INT 28
26727: PUSH
26728: LD_VAR 0 5
26732: IN
26733: OR
26734: PUSH
26735: LD_INT 45
26737: PUSH
26738: LD_VAR 0 5
26742: IN
26743: OR
26744: AND
26745: IFFALSE 26999
// begin hex := GetHexInfo ( x , y ) ;
26747: LD_ADDR_VAR 0 4
26751: PUSH
26752: LD_VAR 0 10
26756: PPUSH
26757: LD_VAR 0 11
26761: PPUSH
26762: CALL_OW 546
26766: ST_TO_ADDR
// if hex [ 1 ] then
26767: LD_VAR 0 4
26771: PUSH
26772: LD_INT 1
26774: ARRAY
26775: IFFALSE 26779
// exit ;
26777: GO 27182
// height := hex [ 2 ] ;
26779: LD_ADDR_VAR 0 15
26783: PUSH
26784: LD_VAR 0 4
26788: PUSH
26789: LD_INT 2
26791: ARRAY
26792: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26793: LD_ADDR_VAR 0 14
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: LD_INT 5
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: ST_TO_ADDR
// for i in tmp do
26816: LD_ADDR_VAR 0 8
26820: PUSH
26821: LD_VAR 0 14
26825: PUSH
26826: FOR_IN
26827: IFFALSE 26997
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26829: LD_ADDR_VAR 0 9
26833: PUSH
26834: LD_VAR 0 10
26838: PPUSH
26839: LD_VAR 0 8
26843: PPUSH
26844: LD_INT 5
26846: PPUSH
26847: CALL_OW 272
26851: PUSH
26852: LD_VAR 0 11
26856: PPUSH
26857: LD_VAR 0 8
26861: PPUSH
26862: LD_INT 5
26864: PPUSH
26865: CALL_OW 273
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26874: LD_VAR 0 9
26878: PUSH
26879: LD_INT 1
26881: ARRAY
26882: PPUSH
26883: LD_VAR 0 9
26887: PUSH
26888: LD_INT 2
26890: ARRAY
26891: PPUSH
26892: CALL_OW 488
26896: IFFALSE 26995
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26898: LD_ADDR_VAR 0 4
26902: PUSH
26903: LD_VAR 0 9
26907: PUSH
26908: LD_INT 1
26910: ARRAY
26911: PPUSH
26912: LD_VAR 0 9
26916: PUSH
26917: LD_INT 2
26919: ARRAY
26920: PPUSH
26921: CALL_OW 546
26925: ST_TO_ADDR
// if hex [ 1 ] then
26926: LD_VAR 0 4
26930: PUSH
26931: LD_INT 1
26933: ARRAY
26934: IFFALSE 26938
// continue ;
26936: GO 26826
// h := hex [ 2 ] ;
26938: LD_ADDR_VAR 0 13
26942: PUSH
26943: LD_VAR 0 4
26947: PUSH
26948: LD_INT 2
26950: ARRAY
26951: ST_TO_ADDR
// if h + 7 < height then
26952: LD_VAR 0 13
26956: PUSH
26957: LD_INT 7
26959: PLUS
26960: PUSH
26961: LD_VAR 0 15
26965: LESS
26966: IFFALSE 26995
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26968: LD_ADDR_VAR 0 18
26972: PUSH
26973: LD_INT 7
26975: PUSH
26976: LD_INT 28
26978: PUSH
26979: LD_INT 45
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: PUSH
26987: LD_VAR 0 12
26991: ARRAY
26992: ST_TO_ADDR
// break ;
26993: GO 26997
// end ; end ; end ;
26995: GO 26826
26997: POP
26998: POP
// end ; if not weapon then
26999: LD_VAR 0 18
27003: NOT
27004: IFFALSE 27064
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27006: LD_ADDR_VAR 0 5
27010: PUSH
27011: LD_VAR 0 5
27015: PUSH
27016: LD_INT 11
27018: PUSH
27019: LD_INT 30
27021: PUSH
27022: LD_INT 49
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: DIFF
27030: ST_TO_ADDR
// if not list then
27031: LD_VAR 0 5
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27182
// weapon := list [ rand ( 1 , list ) ] ;
27040: LD_ADDR_VAR 0 18
27044: PUSH
27045: LD_VAR 0 5
27049: PUSH
27050: LD_INT 1
27052: PPUSH
27053: LD_VAR 0 5
27057: PPUSH
27058: CALL_OW 12
27062: ARRAY
27063: ST_TO_ADDR
// end ; if weapon then
27064: LD_VAR 0 18
27068: IFFALSE 27182
// begin tmp := CostOfWeapon ( weapon ) ;
27070: LD_ADDR_VAR 0 14
27074: PUSH
27075: LD_VAR 0 18
27079: PPUSH
27080: CALL_OW 451
27084: ST_TO_ADDR
// j := GetBase ( tower ) ;
27085: LD_ADDR_VAR 0 9
27089: PUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 274
27099: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27100: LD_VAR 0 9
27104: PPUSH
27105: LD_INT 1
27107: PPUSH
27108: CALL_OW 275
27112: PUSH
27113: LD_VAR 0 14
27117: PUSH
27118: LD_INT 1
27120: ARRAY
27121: GREATEREQUAL
27122: PUSH
27123: LD_VAR 0 9
27127: PPUSH
27128: LD_INT 2
27130: PPUSH
27131: CALL_OW 275
27135: PUSH
27136: LD_VAR 0 14
27140: PUSH
27141: LD_INT 2
27143: ARRAY
27144: GREATEREQUAL
27145: AND
27146: PUSH
27147: LD_VAR 0 9
27151: PPUSH
27152: LD_INT 3
27154: PPUSH
27155: CALL_OW 275
27159: PUSH
27160: LD_VAR 0 14
27164: PUSH
27165: LD_INT 3
27167: ARRAY
27168: GREATEREQUAL
27169: AND
27170: IFFALSE 27182
// result := weapon ;
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_VAR 0 18
27181: ST_TO_ADDR
// end ; end ;
27182: LD_VAR 0 3
27186: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27187: LD_INT 0
27189: PPUSH
27190: PPUSH
// result := true ;
27191: LD_ADDR_VAR 0 3
27195: PUSH
27196: LD_INT 1
27198: ST_TO_ADDR
// if array1 = array2 then
27199: LD_VAR 0 1
27203: PUSH
27204: LD_VAR 0 2
27208: EQUAL
27209: IFFALSE 27269
// begin for i = 1 to array1 do
27211: LD_ADDR_VAR 0 4
27215: PUSH
27216: DOUBLE
27217: LD_INT 1
27219: DEC
27220: ST_TO_ADDR
27221: LD_VAR 0 1
27225: PUSH
27226: FOR_TO
27227: IFFALSE 27265
// if array1 [ i ] <> array2 [ i ] then
27229: LD_VAR 0 1
27233: PUSH
27234: LD_VAR 0 4
27238: ARRAY
27239: PUSH
27240: LD_VAR 0 2
27244: PUSH
27245: LD_VAR 0 4
27249: ARRAY
27250: NONEQUAL
27251: IFFALSE 27263
// begin result := false ;
27253: LD_ADDR_VAR 0 3
27257: PUSH
27258: LD_INT 0
27260: ST_TO_ADDR
// break ;
27261: GO 27265
// end ;
27263: GO 27226
27265: POP
27266: POP
// end else
27267: GO 27277
// result := false ;
27269: LD_ADDR_VAR 0 3
27273: PUSH
27274: LD_INT 0
27276: ST_TO_ADDR
// end ;
27277: LD_VAR 0 3
27281: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
// if not array1 or not array2 then
27286: LD_VAR 0 1
27290: NOT
27291: PUSH
27292: LD_VAR 0 2
27296: NOT
27297: OR
27298: IFFALSE 27302
// exit ;
27300: GO 27366
// result := true ;
27302: LD_ADDR_VAR 0 3
27306: PUSH
27307: LD_INT 1
27309: ST_TO_ADDR
// for i = 1 to array1 do
27310: LD_ADDR_VAR 0 4
27314: PUSH
27315: DOUBLE
27316: LD_INT 1
27318: DEC
27319: ST_TO_ADDR
27320: LD_VAR 0 1
27324: PUSH
27325: FOR_TO
27326: IFFALSE 27364
// if array1 [ i ] <> array2 [ i ] then
27328: LD_VAR 0 1
27332: PUSH
27333: LD_VAR 0 4
27337: ARRAY
27338: PUSH
27339: LD_VAR 0 2
27343: PUSH
27344: LD_VAR 0 4
27348: ARRAY
27349: NONEQUAL
27350: IFFALSE 27362
// begin result := false ;
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: LD_INT 0
27359: ST_TO_ADDR
// break ;
27360: GO 27364
// end ;
27362: GO 27325
27364: POP
27365: POP
// end ;
27366: LD_VAR 0 3
27370: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27371: LD_INT 0
27373: PPUSH
27374: PPUSH
27375: PPUSH
// pom := GetBase ( fac ) ;
27376: LD_ADDR_VAR 0 5
27380: PUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: CALL_OW 274
27390: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27391: LD_ADDR_VAR 0 4
27395: PUSH
27396: LD_VAR 0 2
27400: PUSH
27401: LD_INT 1
27403: ARRAY
27404: PPUSH
27405: LD_VAR 0 2
27409: PUSH
27410: LD_INT 2
27412: ARRAY
27413: PPUSH
27414: LD_VAR 0 2
27418: PUSH
27419: LD_INT 3
27421: ARRAY
27422: PPUSH
27423: LD_VAR 0 2
27427: PUSH
27428: LD_INT 4
27430: ARRAY
27431: PPUSH
27432: CALL_OW 449
27436: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27437: LD_ADDR_VAR 0 3
27441: PUSH
27442: LD_VAR 0 5
27446: PPUSH
27447: LD_INT 1
27449: PPUSH
27450: CALL_OW 275
27454: PUSH
27455: LD_VAR 0 4
27459: PUSH
27460: LD_INT 1
27462: ARRAY
27463: GREATEREQUAL
27464: PUSH
27465: LD_VAR 0 5
27469: PPUSH
27470: LD_INT 2
27472: PPUSH
27473: CALL_OW 275
27477: PUSH
27478: LD_VAR 0 4
27482: PUSH
27483: LD_INT 2
27485: ARRAY
27486: GREATEREQUAL
27487: AND
27488: PUSH
27489: LD_VAR 0 5
27493: PPUSH
27494: LD_INT 3
27496: PPUSH
27497: CALL_OW 275
27501: PUSH
27502: LD_VAR 0 4
27506: PUSH
27507: LD_INT 3
27509: ARRAY
27510: GREATEREQUAL
27511: AND
27512: ST_TO_ADDR
// end ;
27513: LD_VAR 0 3
27517: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27518: LD_INT 0
27520: PPUSH
27521: PPUSH
27522: PPUSH
27523: PPUSH
// pom := GetBase ( building ) ;
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_VAR 0 1
27533: PPUSH
27534: CALL_OW 274
27538: ST_TO_ADDR
// if not pom then
27539: LD_VAR 0 3
27543: NOT
27544: IFFALSE 27548
// exit ;
27546: GO 27718
// btype := GetBType ( building ) ;
27548: LD_ADDR_VAR 0 5
27552: PUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 266
27562: ST_TO_ADDR
// if btype = b_armoury then
27563: LD_VAR 0 5
27567: PUSH
27568: LD_INT 4
27570: EQUAL
27571: IFFALSE 27581
// btype := b_barracks ;
27573: LD_ADDR_VAR 0 5
27577: PUSH
27578: LD_INT 5
27580: ST_TO_ADDR
// if btype = b_depot then
27581: LD_VAR 0 5
27585: PUSH
27586: LD_INT 0
27588: EQUAL
27589: IFFALSE 27599
// btype := b_warehouse ;
27591: LD_ADDR_VAR 0 5
27595: PUSH
27596: LD_INT 1
27598: ST_TO_ADDR
// if btype = b_workshop then
27599: LD_VAR 0 5
27603: PUSH
27604: LD_INT 2
27606: EQUAL
27607: IFFALSE 27617
// btype := b_factory ;
27609: LD_ADDR_VAR 0 5
27613: PUSH
27614: LD_INT 3
27616: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27617: LD_ADDR_VAR 0 4
27621: PUSH
27622: LD_VAR 0 5
27626: PPUSH
27627: LD_VAR 0 1
27631: PPUSH
27632: CALL_OW 248
27636: PPUSH
27637: CALL_OW 450
27641: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27642: LD_ADDR_VAR 0 2
27646: PUSH
27647: LD_VAR 0 3
27651: PPUSH
27652: LD_INT 1
27654: PPUSH
27655: CALL_OW 275
27659: PUSH
27660: LD_VAR 0 4
27664: PUSH
27665: LD_INT 1
27667: ARRAY
27668: GREATEREQUAL
27669: PUSH
27670: LD_VAR 0 3
27674: PPUSH
27675: LD_INT 2
27677: PPUSH
27678: CALL_OW 275
27682: PUSH
27683: LD_VAR 0 4
27687: PUSH
27688: LD_INT 2
27690: ARRAY
27691: GREATEREQUAL
27692: AND
27693: PUSH
27694: LD_VAR 0 3
27698: PPUSH
27699: LD_INT 3
27701: PPUSH
27702: CALL_OW 275
27706: PUSH
27707: LD_VAR 0 4
27711: PUSH
27712: LD_INT 3
27714: ARRAY
27715: GREATEREQUAL
27716: AND
27717: ST_TO_ADDR
// end ;
27718: LD_VAR 0 2
27722: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27723: LD_INT 0
27725: PPUSH
27726: PPUSH
27727: PPUSH
// pom := GetBase ( building ) ;
27728: LD_ADDR_VAR 0 4
27732: PUSH
27733: LD_VAR 0 1
27737: PPUSH
27738: CALL_OW 274
27742: ST_TO_ADDR
// if not pom then
27743: LD_VAR 0 4
27747: NOT
27748: IFFALSE 27752
// exit ;
27750: GO 27853
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27752: LD_ADDR_VAR 0 5
27756: PUSH
27757: LD_VAR 0 2
27761: PPUSH
27762: LD_VAR 0 1
27766: PPUSH
27767: CALL_OW 248
27771: PPUSH
27772: CALL_OW 450
27776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27777: LD_ADDR_VAR 0 3
27781: PUSH
27782: LD_VAR 0 4
27786: PPUSH
27787: LD_INT 1
27789: PPUSH
27790: CALL_OW 275
27794: PUSH
27795: LD_VAR 0 5
27799: PUSH
27800: LD_INT 1
27802: ARRAY
27803: GREATEREQUAL
27804: PUSH
27805: LD_VAR 0 4
27809: PPUSH
27810: LD_INT 2
27812: PPUSH
27813: CALL_OW 275
27817: PUSH
27818: LD_VAR 0 5
27822: PUSH
27823: LD_INT 2
27825: ARRAY
27826: GREATEREQUAL
27827: AND
27828: PUSH
27829: LD_VAR 0 4
27833: PPUSH
27834: LD_INT 3
27836: PPUSH
27837: CALL_OW 275
27841: PUSH
27842: LD_VAR 0 5
27846: PUSH
27847: LD_INT 3
27849: ARRAY
27850: GREATEREQUAL
27851: AND
27852: ST_TO_ADDR
// end ;
27853: LD_VAR 0 3
27857: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27858: LD_INT 0
27860: PPUSH
27861: PPUSH
27862: PPUSH
27863: PPUSH
27864: PPUSH
27865: PPUSH
27866: PPUSH
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
// result := false ;
27871: LD_ADDR_VAR 0 8
27875: PUSH
27876: LD_INT 0
27878: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27879: LD_VAR 0 5
27883: NOT
27884: PUSH
27885: LD_VAR 0 1
27889: NOT
27890: OR
27891: PUSH
27892: LD_VAR 0 2
27896: NOT
27897: OR
27898: PUSH
27899: LD_VAR 0 3
27903: NOT
27904: OR
27905: IFFALSE 27909
// exit ;
27907: GO 28723
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27909: LD_ADDR_VAR 0 14
27913: PUSH
27914: LD_VAR 0 1
27918: PPUSH
27919: LD_VAR 0 2
27923: PPUSH
27924: LD_VAR 0 3
27928: PPUSH
27929: LD_VAR 0 4
27933: PPUSH
27934: LD_VAR 0 5
27938: PUSH
27939: LD_INT 1
27941: ARRAY
27942: PPUSH
27943: CALL_OW 248
27947: PPUSH
27948: LD_INT 0
27950: PPUSH
27951: CALL 29976 0 6
27955: ST_TO_ADDR
// if not hexes then
27956: LD_VAR 0 14
27960: NOT
27961: IFFALSE 27965
// exit ;
27963: GO 28723
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27965: LD_ADDR_VAR 0 17
27969: PUSH
27970: LD_VAR 0 5
27974: PPUSH
27975: LD_INT 22
27977: PUSH
27978: LD_VAR 0 13
27982: PPUSH
27983: CALL_OW 255
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 30
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 72
28028: ST_TO_ADDR
// for i = 1 to hexes do
28029: LD_ADDR_VAR 0 9
28033: PUSH
28034: DOUBLE
28035: LD_INT 1
28037: DEC
28038: ST_TO_ADDR
28039: LD_VAR 0 14
28043: PUSH
28044: FOR_TO
28045: IFFALSE 28721
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28047: LD_ADDR_VAR 0 13
28051: PUSH
28052: LD_VAR 0 14
28056: PUSH
28057: LD_VAR 0 9
28061: ARRAY
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: PPUSH
28067: LD_VAR 0 14
28071: PUSH
28072: LD_VAR 0 9
28076: ARRAY
28077: PUSH
28078: LD_INT 2
28080: ARRAY
28081: PPUSH
28082: CALL_OW 428
28086: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28087: LD_VAR 0 14
28091: PUSH
28092: LD_VAR 0 9
28096: ARRAY
28097: PUSH
28098: LD_INT 1
28100: ARRAY
28101: PPUSH
28102: LD_VAR 0 14
28106: PUSH
28107: LD_VAR 0 9
28111: ARRAY
28112: PUSH
28113: LD_INT 2
28115: ARRAY
28116: PPUSH
28117: CALL_OW 351
28121: PUSH
28122: LD_VAR 0 14
28126: PUSH
28127: LD_VAR 0 9
28131: ARRAY
28132: PUSH
28133: LD_INT 1
28135: ARRAY
28136: PPUSH
28137: LD_VAR 0 14
28141: PUSH
28142: LD_VAR 0 9
28146: ARRAY
28147: PUSH
28148: LD_INT 2
28150: ARRAY
28151: PPUSH
28152: CALL_OW 488
28156: NOT
28157: OR
28158: PUSH
28159: LD_VAR 0 13
28163: PPUSH
28164: CALL_OW 247
28168: PUSH
28169: LD_INT 3
28171: EQUAL
28172: OR
28173: IFFALSE 28179
// exit ;
28175: POP
28176: POP
28177: GO 28723
// if not tmp then
28179: LD_VAR 0 13
28183: NOT
28184: IFFALSE 28188
// continue ;
28186: GO 28044
// result := true ;
28188: LD_ADDR_VAR 0 8
28192: PUSH
28193: LD_INT 1
28195: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28196: LD_VAR 0 6
28200: PUSH
28201: LD_VAR 0 13
28205: PPUSH
28206: CALL_OW 247
28210: PUSH
28211: LD_INT 2
28213: EQUAL
28214: AND
28215: PUSH
28216: LD_VAR 0 13
28220: PPUSH
28221: CALL_OW 263
28225: PUSH
28226: LD_INT 1
28228: EQUAL
28229: AND
28230: IFFALSE 28394
// begin if IsDrivenBy ( tmp ) then
28232: LD_VAR 0 13
28236: PPUSH
28237: CALL_OW 311
28241: IFFALSE 28245
// continue ;
28243: GO 28044
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28245: LD_VAR 0 6
28249: PPUSH
28250: LD_INT 3
28252: PUSH
28253: LD_INT 60
28255: PUSH
28256: EMPTY
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: LD_INT 55
28268: PUSH
28269: EMPTY
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PPUSH
28280: CALL_OW 72
28284: IFFALSE 28392
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28286: LD_ADDR_VAR 0 18
28290: PUSH
28291: LD_VAR 0 6
28295: PPUSH
28296: LD_INT 3
28298: PUSH
28299: LD_INT 60
28301: PUSH
28302: EMPTY
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: LD_INT 55
28314: PUSH
28315: EMPTY
28316: LIST
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PPUSH
28326: CALL_OW 72
28330: PUSH
28331: LD_INT 1
28333: ARRAY
28334: ST_TO_ADDR
// if IsInUnit ( driver ) then
28335: LD_VAR 0 18
28339: PPUSH
28340: CALL_OW 310
28344: IFFALSE 28355
// ComExit ( driver ) ;
28346: LD_VAR 0 18
28350: PPUSH
28351: CALL 53777 0 1
// AddComEnterUnit ( driver , tmp ) ;
28355: LD_VAR 0 18
28359: PPUSH
28360: LD_VAR 0 13
28364: PPUSH
28365: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28369: LD_VAR 0 18
28373: PPUSH
28374: LD_VAR 0 7
28378: PPUSH
28379: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28383: LD_VAR 0 18
28387: PPUSH
28388: CALL_OW 181
// end ; continue ;
28392: GO 28044
// end ; if not cleaners or not tmp in cleaners then
28394: LD_VAR 0 6
28398: NOT
28399: PUSH
28400: LD_VAR 0 13
28404: PUSH
28405: LD_VAR 0 6
28409: IN
28410: NOT
28411: OR
28412: IFFALSE 28719
// begin if dep then
28414: LD_VAR 0 17
28418: IFFALSE 28554
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28420: LD_ADDR_VAR 0 16
28424: PUSH
28425: LD_VAR 0 17
28429: PUSH
28430: LD_INT 1
28432: ARRAY
28433: PPUSH
28434: CALL_OW 250
28438: PPUSH
28439: LD_VAR 0 17
28443: PUSH
28444: LD_INT 1
28446: ARRAY
28447: PPUSH
28448: CALL_OW 254
28452: PPUSH
28453: LD_INT 5
28455: PPUSH
28456: CALL_OW 272
28460: PUSH
28461: LD_VAR 0 17
28465: PUSH
28466: LD_INT 1
28468: ARRAY
28469: PPUSH
28470: CALL_OW 251
28474: PPUSH
28475: LD_VAR 0 17
28479: PUSH
28480: LD_INT 1
28482: ARRAY
28483: PPUSH
28484: CALL_OW 254
28488: PPUSH
28489: LD_INT 5
28491: PPUSH
28492: CALL_OW 273
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28501: LD_VAR 0 16
28505: PUSH
28506: LD_INT 1
28508: ARRAY
28509: PPUSH
28510: LD_VAR 0 16
28514: PUSH
28515: LD_INT 2
28517: ARRAY
28518: PPUSH
28519: CALL_OW 488
28523: IFFALSE 28554
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28525: LD_VAR 0 13
28529: PPUSH
28530: LD_VAR 0 16
28534: PUSH
28535: LD_INT 1
28537: ARRAY
28538: PPUSH
28539: LD_VAR 0 16
28543: PUSH
28544: LD_INT 2
28546: ARRAY
28547: PPUSH
28548: CALL_OW 111
// continue ;
28552: GO 28044
// end ; end ; r := GetDir ( tmp ) ;
28554: LD_ADDR_VAR 0 15
28558: PUSH
28559: LD_VAR 0 13
28563: PPUSH
28564: CALL_OW 254
28568: ST_TO_ADDR
// if r = 5 then
28569: LD_VAR 0 15
28573: PUSH
28574: LD_INT 5
28576: EQUAL
28577: IFFALSE 28587
// r := 0 ;
28579: LD_ADDR_VAR 0 15
28583: PUSH
28584: LD_INT 0
28586: ST_TO_ADDR
// for j = r to 5 do
28587: LD_ADDR_VAR 0 10
28591: PUSH
28592: DOUBLE
28593: LD_VAR 0 15
28597: DEC
28598: ST_TO_ADDR
28599: LD_INT 5
28601: PUSH
28602: FOR_TO
28603: IFFALSE 28717
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28605: LD_ADDR_VAR 0 11
28609: PUSH
28610: LD_VAR 0 13
28614: PPUSH
28615: CALL_OW 250
28619: PPUSH
28620: LD_VAR 0 10
28624: PPUSH
28625: LD_INT 2
28627: PPUSH
28628: CALL_OW 272
28632: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28633: LD_ADDR_VAR 0 12
28637: PUSH
28638: LD_VAR 0 13
28642: PPUSH
28643: CALL_OW 251
28647: PPUSH
28648: LD_VAR 0 10
28652: PPUSH
28653: LD_INT 2
28655: PPUSH
28656: CALL_OW 273
28660: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28661: LD_VAR 0 11
28665: PPUSH
28666: LD_VAR 0 12
28670: PPUSH
28671: CALL_OW 488
28675: PUSH
28676: LD_VAR 0 11
28680: PPUSH
28681: LD_VAR 0 12
28685: PPUSH
28686: CALL_OW 428
28690: NOT
28691: AND
28692: IFFALSE 28715
// begin ComMoveXY ( tmp , _x , _y ) ;
28694: LD_VAR 0 13
28698: PPUSH
28699: LD_VAR 0 11
28703: PPUSH
28704: LD_VAR 0 12
28708: PPUSH
28709: CALL_OW 111
// break ;
28713: GO 28717
// end ; end ;
28715: GO 28602
28717: POP
28718: POP
// end ; end ;
28719: GO 28044
28721: POP
28722: POP
// end ;
28723: LD_VAR 0 8
28727: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28728: LD_INT 0
28730: PPUSH
// result := true ;
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: LD_INT 1
28738: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28739: LD_VAR 0 2
28743: PUSH
28744: LD_INT 24
28746: DOUBLE
28747: EQUAL
28748: IFTRUE 28758
28750: LD_INT 33
28752: DOUBLE
28753: EQUAL
28754: IFTRUE 28758
28756: GO 28783
28758: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28759: LD_ADDR_VAR 0 3
28763: PUSH
28764: LD_INT 32
28766: PPUSH
28767: LD_VAR 0 1
28771: PPUSH
28772: CALL_OW 321
28776: PUSH
28777: LD_INT 2
28779: EQUAL
28780: ST_TO_ADDR
28781: GO 29099
28783: LD_INT 20
28785: DOUBLE
28786: EQUAL
28787: IFTRUE 28791
28789: GO 28816
28791: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28792: LD_ADDR_VAR 0 3
28796: PUSH
28797: LD_INT 6
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 321
28809: PUSH
28810: LD_INT 2
28812: EQUAL
28813: ST_TO_ADDR
28814: GO 29099
28816: LD_INT 22
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28830
28822: LD_INT 36
28824: DOUBLE
28825: EQUAL
28826: IFTRUE 28830
28828: GO 28855
28830: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28831: LD_ADDR_VAR 0 3
28835: PUSH
28836: LD_INT 15
28838: PPUSH
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL_OW 321
28848: PUSH
28849: LD_INT 2
28851: EQUAL
28852: ST_TO_ADDR
28853: GO 29099
28855: LD_INT 30
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28888
28863: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_INT 20
28871: PPUSH
28872: LD_VAR 0 1
28876: PPUSH
28877: CALL_OW 321
28881: PUSH
28882: LD_INT 2
28884: EQUAL
28885: ST_TO_ADDR
28886: GO 29099
28888: LD_INT 28
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28902
28894: LD_INT 21
28896: DOUBLE
28897: EQUAL
28898: IFTRUE 28902
28900: GO 28927
28902: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28903: LD_ADDR_VAR 0 3
28907: PUSH
28908: LD_INT 21
28910: PPUSH
28911: LD_VAR 0 1
28915: PPUSH
28916: CALL_OW 321
28920: PUSH
28921: LD_INT 2
28923: EQUAL
28924: ST_TO_ADDR
28925: GO 29099
28927: LD_INT 16
28929: DOUBLE
28930: EQUAL
28931: IFTRUE 28935
28933: GO 28960
28935: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28936: LD_ADDR_VAR 0 3
28940: PUSH
28941: LD_INT 84
28943: PPUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 321
28953: PUSH
28954: LD_INT 2
28956: EQUAL
28957: ST_TO_ADDR
28958: GO 29099
28960: LD_INT 19
28962: DOUBLE
28963: EQUAL
28964: IFTRUE 28974
28966: LD_INT 23
28968: DOUBLE
28969: EQUAL
28970: IFTRUE 28974
28972: GO 28999
28974: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_INT 83
28982: PPUSH
28983: LD_VAR 0 1
28987: PPUSH
28988: CALL_OW 321
28992: PUSH
28993: LD_INT 2
28995: EQUAL
28996: ST_TO_ADDR
28997: GO 29099
28999: LD_INT 17
29001: DOUBLE
29002: EQUAL
29003: IFTRUE 29007
29005: GO 29032
29007: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29008: LD_ADDR_VAR 0 3
29012: PUSH
29013: LD_INT 39
29015: PPUSH
29016: LD_VAR 0 1
29020: PPUSH
29021: CALL_OW 321
29025: PUSH
29026: LD_INT 2
29028: EQUAL
29029: ST_TO_ADDR
29030: GO 29099
29032: LD_INT 18
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29065
29040: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 40
29048: PPUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 321
29058: PUSH
29059: LD_INT 2
29061: EQUAL
29062: ST_TO_ADDR
29063: GO 29099
29065: LD_INT 27
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29073
29071: GO 29098
29073: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29074: LD_ADDR_VAR 0 3
29078: PUSH
29079: LD_INT 35
29081: PPUSH
29082: LD_VAR 0 1
29086: PPUSH
29087: CALL_OW 321
29091: PUSH
29092: LD_INT 2
29094: EQUAL
29095: ST_TO_ADDR
29096: GO 29099
29098: POP
// end ;
29099: LD_VAR 0 3
29103: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29104: LD_INT 0
29106: PPUSH
29107: PPUSH
29108: PPUSH
29109: PPUSH
29110: PPUSH
29111: PPUSH
29112: PPUSH
29113: PPUSH
29114: PPUSH
29115: PPUSH
29116: PPUSH
// result := false ;
29117: LD_ADDR_VAR 0 6
29121: PUSH
29122: LD_INT 0
29124: ST_TO_ADDR
// if btype = b_depot then
29125: LD_VAR 0 2
29129: PUSH
29130: LD_INT 0
29132: EQUAL
29133: IFFALSE 29145
// begin result := true ;
29135: LD_ADDR_VAR 0 6
29139: PUSH
29140: LD_INT 1
29142: ST_TO_ADDR
// exit ;
29143: GO 29971
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29145: LD_VAR 0 1
29149: NOT
29150: PUSH
29151: LD_VAR 0 1
29155: PPUSH
29156: CALL_OW 266
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: IN
29171: NOT
29172: OR
29173: PUSH
29174: LD_VAR 0 2
29178: NOT
29179: OR
29180: PUSH
29181: LD_VAR 0 5
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: LD_INT 4
29200: PUSH
29201: LD_INT 5
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: IN
29212: NOT
29213: OR
29214: PUSH
29215: LD_VAR 0 3
29219: PPUSH
29220: LD_VAR 0 4
29224: PPUSH
29225: CALL_OW 488
29229: NOT
29230: OR
29231: IFFALSE 29235
// exit ;
29233: GO 29971
// side := GetSide ( depot ) ;
29235: LD_ADDR_VAR 0 9
29239: PUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 255
29249: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29250: LD_VAR 0 9
29254: PPUSH
29255: LD_VAR 0 2
29259: PPUSH
29260: CALL 28728 0 2
29264: NOT
29265: IFFALSE 29269
// exit ;
29267: GO 29971
// pom := GetBase ( depot ) ;
29269: LD_ADDR_VAR 0 10
29273: PUSH
29274: LD_VAR 0 1
29278: PPUSH
29279: CALL_OW 274
29283: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29284: LD_ADDR_VAR 0 11
29288: PUSH
29289: LD_VAR 0 2
29293: PPUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 248
29303: PPUSH
29304: CALL_OW 450
29308: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29309: LD_VAR 0 10
29313: PPUSH
29314: LD_INT 1
29316: PPUSH
29317: CALL_OW 275
29321: PUSH
29322: LD_VAR 0 11
29326: PUSH
29327: LD_INT 1
29329: ARRAY
29330: GREATEREQUAL
29331: PUSH
29332: LD_VAR 0 10
29336: PPUSH
29337: LD_INT 2
29339: PPUSH
29340: CALL_OW 275
29344: PUSH
29345: LD_VAR 0 11
29349: PUSH
29350: LD_INT 2
29352: ARRAY
29353: GREATEREQUAL
29354: AND
29355: PUSH
29356: LD_VAR 0 10
29360: PPUSH
29361: LD_INT 3
29363: PPUSH
29364: CALL_OW 275
29368: PUSH
29369: LD_VAR 0 11
29373: PUSH
29374: LD_INT 3
29376: ARRAY
29377: GREATEREQUAL
29378: AND
29379: NOT
29380: IFFALSE 29384
// exit ;
29382: GO 29971
// if GetBType ( depot ) = b_depot then
29384: LD_VAR 0 1
29388: PPUSH
29389: CALL_OW 266
29393: PUSH
29394: LD_INT 0
29396: EQUAL
29397: IFFALSE 29409
// dist := 28 else
29399: LD_ADDR_VAR 0 14
29403: PUSH
29404: LD_INT 28
29406: ST_TO_ADDR
29407: GO 29417
// dist := 36 ;
29409: LD_ADDR_VAR 0 14
29413: PUSH
29414: LD_INT 36
29416: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29417: LD_VAR 0 1
29421: PPUSH
29422: LD_VAR 0 3
29426: PPUSH
29427: LD_VAR 0 4
29431: PPUSH
29432: CALL_OW 297
29436: PUSH
29437: LD_VAR 0 14
29441: GREATER
29442: IFFALSE 29446
// exit ;
29444: GO 29971
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29446: LD_ADDR_VAR 0 12
29450: PUSH
29451: LD_VAR 0 2
29455: PPUSH
29456: LD_VAR 0 3
29460: PPUSH
29461: LD_VAR 0 4
29465: PPUSH
29466: LD_VAR 0 5
29470: PPUSH
29471: LD_VAR 0 1
29475: PPUSH
29476: CALL_OW 248
29480: PPUSH
29481: LD_INT 0
29483: PPUSH
29484: CALL 29976 0 6
29488: ST_TO_ADDR
// if not hexes then
29489: LD_VAR 0 12
29493: NOT
29494: IFFALSE 29498
// exit ;
29496: GO 29971
// hex := GetHexInfo ( x , y ) ;
29498: LD_ADDR_VAR 0 15
29502: PUSH
29503: LD_VAR 0 3
29507: PPUSH
29508: LD_VAR 0 4
29512: PPUSH
29513: CALL_OW 546
29517: ST_TO_ADDR
// if hex [ 1 ] then
29518: LD_VAR 0 15
29522: PUSH
29523: LD_INT 1
29525: ARRAY
29526: IFFALSE 29530
// exit ;
29528: GO 29971
// height := hex [ 2 ] ;
29530: LD_ADDR_VAR 0 13
29534: PUSH
29535: LD_VAR 0 15
29539: PUSH
29540: LD_INT 2
29542: ARRAY
29543: ST_TO_ADDR
// for i = 1 to hexes do
29544: LD_ADDR_VAR 0 7
29548: PUSH
29549: DOUBLE
29550: LD_INT 1
29552: DEC
29553: ST_TO_ADDR
29554: LD_VAR 0 12
29558: PUSH
29559: FOR_TO
29560: IFFALSE 29890
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29562: LD_VAR 0 12
29566: PUSH
29567: LD_VAR 0 7
29571: ARRAY
29572: PUSH
29573: LD_INT 1
29575: ARRAY
29576: PPUSH
29577: LD_VAR 0 12
29581: PUSH
29582: LD_VAR 0 7
29586: ARRAY
29587: PUSH
29588: LD_INT 2
29590: ARRAY
29591: PPUSH
29592: CALL_OW 488
29596: NOT
29597: PUSH
29598: LD_VAR 0 12
29602: PUSH
29603: LD_VAR 0 7
29607: ARRAY
29608: PUSH
29609: LD_INT 1
29611: ARRAY
29612: PPUSH
29613: LD_VAR 0 12
29617: PUSH
29618: LD_VAR 0 7
29622: ARRAY
29623: PUSH
29624: LD_INT 2
29626: ARRAY
29627: PPUSH
29628: CALL_OW 428
29632: PUSH
29633: LD_INT 0
29635: GREATER
29636: OR
29637: PUSH
29638: LD_VAR 0 12
29642: PUSH
29643: LD_VAR 0 7
29647: ARRAY
29648: PUSH
29649: LD_INT 1
29651: ARRAY
29652: PPUSH
29653: LD_VAR 0 12
29657: PUSH
29658: LD_VAR 0 7
29662: ARRAY
29663: PUSH
29664: LD_INT 2
29666: ARRAY
29667: PPUSH
29668: CALL_OW 351
29672: OR
29673: IFFALSE 29679
// exit ;
29675: POP
29676: POP
29677: GO 29971
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29679: LD_ADDR_VAR 0 8
29683: PUSH
29684: LD_VAR 0 12
29688: PUSH
29689: LD_VAR 0 7
29693: ARRAY
29694: PUSH
29695: LD_INT 1
29697: ARRAY
29698: PPUSH
29699: LD_VAR 0 12
29703: PUSH
29704: LD_VAR 0 7
29708: ARRAY
29709: PUSH
29710: LD_INT 2
29712: ARRAY
29713: PPUSH
29714: CALL_OW 546
29718: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29719: LD_VAR 0 8
29723: PUSH
29724: LD_INT 1
29726: ARRAY
29727: PUSH
29728: LD_VAR 0 8
29732: PUSH
29733: LD_INT 2
29735: ARRAY
29736: PUSH
29737: LD_VAR 0 13
29741: PUSH
29742: LD_INT 2
29744: PLUS
29745: GREATER
29746: OR
29747: PUSH
29748: LD_VAR 0 8
29752: PUSH
29753: LD_INT 2
29755: ARRAY
29756: PUSH
29757: LD_VAR 0 13
29761: PUSH
29762: LD_INT 2
29764: MINUS
29765: LESS
29766: OR
29767: PUSH
29768: LD_VAR 0 8
29772: PUSH
29773: LD_INT 3
29775: ARRAY
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 8
29782: PUSH
29783: LD_INT 9
29785: PUSH
29786: LD_INT 10
29788: PUSH
29789: LD_INT 11
29791: PUSH
29792: LD_INT 12
29794: PUSH
29795: LD_INT 13
29797: PUSH
29798: LD_INT 16
29800: PUSH
29801: LD_INT 17
29803: PUSH
29804: LD_INT 18
29806: PUSH
29807: LD_INT 19
29809: PUSH
29810: LD_INT 20
29812: PUSH
29813: LD_INT 21
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: IN
29831: NOT
29832: OR
29833: PUSH
29834: LD_VAR 0 8
29838: PUSH
29839: LD_INT 5
29841: ARRAY
29842: NOT
29843: OR
29844: PUSH
29845: LD_VAR 0 8
29849: PUSH
29850: LD_INT 6
29852: ARRAY
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: LD_INT 2
29859: PUSH
29860: LD_INT 7
29862: PUSH
29863: LD_INT 9
29865: PUSH
29866: LD_INT 10
29868: PUSH
29869: LD_INT 11
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: IN
29880: NOT
29881: OR
29882: IFFALSE 29888
// exit ;
29884: POP
29885: POP
29886: GO 29971
// end ;
29888: GO 29559
29890: POP
29891: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29892: LD_VAR 0 9
29896: PPUSH
29897: LD_VAR 0 3
29901: PPUSH
29902: LD_VAR 0 4
29906: PPUSH
29907: LD_INT 20
29909: PPUSH
29910: CALL 21894 0 4
29914: PUSH
29915: LD_INT 4
29917: ARRAY
29918: IFFALSE 29922
// exit ;
29920: GO 29971
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29922: LD_VAR 0 2
29926: PUSH
29927: LD_INT 29
29929: PUSH
29930: LD_INT 30
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: IN
29937: PUSH
29938: LD_VAR 0 3
29942: PPUSH
29943: LD_VAR 0 4
29947: PPUSH
29948: LD_VAR 0 9
29952: PPUSH
29953: CALL_OW 440
29957: NOT
29958: AND
29959: IFFALSE 29963
// exit ;
29961: GO 29971
// result := true ;
29963: LD_ADDR_VAR 0 6
29967: PUSH
29968: LD_INT 1
29970: ST_TO_ADDR
// end ;
29971: LD_VAR 0 6
29975: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29976: LD_INT 0
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
// result = [ ] ;
30036: LD_ADDR_VAR 0 7
30040: PUSH
30041: EMPTY
30042: ST_TO_ADDR
// temp_list = [ ] ;
30043: LD_ADDR_VAR 0 9
30047: PUSH
30048: EMPTY
30049: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30050: LD_VAR 0 4
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 2
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 4
30069: PUSH
30070: LD_INT 5
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: IN
30081: NOT
30082: PUSH
30083: LD_VAR 0 1
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: IN
30098: PUSH
30099: LD_VAR 0 5
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: IN
30118: NOT
30119: AND
30120: OR
30121: IFFALSE 30125
// exit ;
30123: GO 48516
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30125: LD_VAR 0 1
30129: PUSH
30130: LD_INT 6
30132: PUSH
30133: LD_INT 7
30135: PUSH
30136: LD_INT 8
30138: PUSH
30139: LD_INT 13
30141: PUSH
30142: LD_INT 12
30144: PUSH
30145: LD_INT 15
30147: PUSH
30148: LD_INT 11
30150: PUSH
30151: LD_INT 14
30153: PUSH
30154: LD_INT 10
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: IN
30168: IFFALSE 30178
// btype = b_lab ;
30170: LD_ADDR_VAR 0 1
30174: PUSH
30175: LD_INT 6
30177: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30178: LD_VAR 0 6
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: LD_INT 2
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: IN
30197: NOT
30198: PUSH
30199: LD_VAR 0 1
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: LD_INT 2
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: LD_INT 6
30218: PUSH
30219: LD_INT 36
30221: PUSH
30222: LD_INT 4
30224: PUSH
30225: LD_INT 5
30227: PUSH
30228: LD_INT 31
30230: PUSH
30231: LD_INT 32
30233: PUSH
30234: LD_INT 33
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: IN
30250: NOT
30251: PUSH
30252: LD_VAR 0 6
30256: PUSH
30257: LD_INT 1
30259: EQUAL
30260: AND
30261: OR
30262: PUSH
30263: LD_VAR 0 1
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: IN
30278: NOT
30279: PUSH
30280: LD_VAR 0 6
30284: PUSH
30285: LD_INT 2
30287: EQUAL
30288: AND
30289: OR
30290: IFFALSE 30300
// mode = 0 ;
30292: LD_ADDR_VAR 0 6
30296: PUSH
30297: LD_INT 0
30299: ST_TO_ADDR
// case mode of 0 :
30300: LD_VAR 0 6
30304: PUSH
30305: LD_INT 0
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 41766
30313: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30314: LD_ADDR_VAR 0 11
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: LD_INT 2
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 2
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 3
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30507: LD_ADDR_VAR 0 12
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: NEG
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 3
30675: NEG
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30703: LD_ADDR_VAR 0 13
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 2
30850: NEG
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 3
30862: NEG
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 3
30874: NEG
30875: PUSH
30876: LD_INT 3
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30902: LD_ADDR_VAR 0 14
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: NEG
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 2
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: LD_INT 3
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31098: LD_ADDR_VAR 0 15
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 3
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31291: LD_ADDR_VAR 0 16
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: NEG
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 3
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: LD_INT 3
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31484: LD_ADDR_VAR 0 17
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: NEG
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31714: LD_ADDR_VAR 0 18
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: LD_INT 2
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 2
31890: NEG
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31944: LD_ADDR_VAR 0 19
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 2
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: LD_INT 2
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32174: LD_ADDR_VAR 0 20
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: LD_INT 2
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32404: LD_ADDR_VAR 0 21
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: NEG
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: LD_INT 2
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32634: LD_ADDR_VAR 0 22
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32864: LD_ADDR_VAR 0 23
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 2
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 2
33063: NEG
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: NEG
33076: PUSH
33077: LD_INT 3
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: LD_INT 3
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 2
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33144: LD_ADDR_VAR 0 24
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 2
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 2
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 2
33331: NEG
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: NEG
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: LD_INT 2
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 3
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33420: LD_ADDR_VAR 0 25
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: NEG
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 2
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: LD_INT 2
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 3
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33694: LD_ADDR_VAR 0 26
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 2
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 3
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 3
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33970: LD_ADDR_VAR 0 27
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 1
34051: NEG
34052: PUSH
34053: LD_INT 2
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 2
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 2
34146: NEG
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 3
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 3
34215: NEG
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34250: LD_ADDR_VAR 0 28
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 2
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 3
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 3
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 3
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 3
34497: NEG
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34532: LD_ADDR_VAR 0 29
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: LD_INT 2
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: NEG
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: NEG
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 2
34722: NEG
34723: PUSH
34724: LD_INT 3
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 3
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: LD_INT 3
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 3
34776: NEG
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34811: LD_ADDR_VAR 0 30
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: NEG
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: LD_INT 2
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 3
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35089: LD_ADDR_VAR 0 31
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 3
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 3
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 3
35332: NEG
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35367: LD_ADDR_VAR 0 32
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 3
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 3
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 3
35610: NEG
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35645: LD_ADDR_VAR 0 33
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: LD_INT 2
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: LD_INT 3
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 3
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 3
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 3
35889: NEG
35890: PUSH
35891: LD_INT 2
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35924: LD_ADDR_VAR 0 34
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: LD_INT 2
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: LD_INT 2
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: NEG
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: LD_INT 3
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 2
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: LD_INT 3
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 3
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36204: LD_ADDR_VAR 0 35
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36316: LD_ADDR_VAR 0 36
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36428: LD_ADDR_VAR 0 37
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36540: LD_ADDR_VAR 0 38
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36652: LD_ADDR_VAR 0 39
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36764: LD_ADDR_VAR 0 40
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36876: LD_ADDR_VAR 0 41
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: NEG
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: LD_INT 3
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 3
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 3
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 3
37150: NEG
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 3
37161: NEG
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 3
37185: NEG
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37226: LD_ADDR_VAR 0 42
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 2
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: NEG
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: LD_INT 3
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 3
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 3
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 3
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 3
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 3
37523: NEG
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 3
37535: NEG
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37576: LD_ADDR_VAR 0 43
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 3
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: LD_INT 3
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 3
37872: NEG
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 3
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37924: LD_ADDR_VAR 0 44
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 3
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 2
38177: PUSH
38178: LD_INT 3
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 3
38198: NEG
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 3
38221: NEG
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 3
38233: NEG
38234: PUSH
38235: LD_INT 3
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38274: LD_ADDR_VAR 0 45
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 3
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 3
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 3
38520: PUSH
38521: LD_INT 3
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: LD_INT 3
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 3
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 3
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 3
38583: NEG
38584: PUSH
38585: LD_INT 3
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38624: LD_ADDR_VAR 0 46
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: NEG
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 3
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 3
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 3
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 3
38920: NEG
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38972: LD_ADDR_VAR 0 47
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: LD_INT 2
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39123: LD_ADDR_VAR 0 48
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: LD_INT 2
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39270: LD_ADDR_VAR 0 49
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39414: LD_ADDR_VAR 0 50
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39558: LD_ADDR_VAR 0 51
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39705: LD_ADDR_VAR 0 52
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39856: LD_ADDR_VAR 0 53
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 2
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 2
40032: NEG
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40086: LD_ADDR_VAR 0 54
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: NEG
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40316: LD_ADDR_VAR 0 55
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40546: LD_ADDR_VAR 0 56
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 2
40722: NEG
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: NEG
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40776: LD_ADDR_VAR 0 57
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41006: LD_ADDR_VAR 0 58
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41236: LD_ADDR_VAR 0 59
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41324: LD_ADDR_VAR 0 60
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41412: LD_ADDR_VAR 0 61
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41500: LD_ADDR_VAR 0 62
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41588: LD_ADDR_VAR 0 63
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41676: LD_ADDR_VAR 0 64
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
// end ; 1 :
41764: GO 47661
41766: LD_INT 1
41768: DOUBLE
41769: EQUAL
41770: IFTRUE 41774
41772: GO 44397
41774: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41775: LD_ADDR_VAR 0 11
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: LD_INT 3
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 3
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41819: LD_ADDR_VAR 0 12
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 3
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41860: LD_ADDR_VAR 0 13
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: LD_INT 3
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41900: LD_ADDR_VAR 0 14
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 3
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41941: LD_ADDR_VAR 0 15
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 3
41959: NEG
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41985: LD_ADDR_VAR 0 16
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: LD_INT 3
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 3
42016: NEG
42017: PUSH
42018: LD_INT 3
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42031: LD_ADDR_VAR 0 17
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 3
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 3
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42075: LD_ADDR_VAR 0 18
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42116: LD_ADDR_VAR 0 19
42120: PUSH
42121: LD_INT 3
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 3
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42156: LD_ADDR_VAR 0 20
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42197: LD_ADDR_VAR 0 21
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 3
42215: NEG
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 3
42226: NEG
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: LIST
42240: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42241: LD_ADDR_VAR 0 22
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 3
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 3
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: NEG
42273: PUSH
42274: LD_INT 3
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42287: LD_ADDR_VAR 0 23
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 4
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: LIST
42330: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42331: LD_ADDR_VAR 0 24
42335: PUSH
42336: LD_INT 3
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 3
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 4
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42372: LD_ADDR_VAR 0 25
42376: PUSH
42377: LD_INT 3
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 4
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 4
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42412: LD_ADDR_VAR 0 26
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 4
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42453: LD_ADDR_VAR 0 27
42457: PUSH
42458: LD_INT 3
42460: NEG
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 3
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 4
42482: NEG
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42497: LD_ADDR_VAR 0 28
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: NEG
42517: PUSH
42518: LD_INT 4
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 4
42528: NEG
42529: PUSH
42530: LD_INT 3
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42543: LD_ADDR_VAR 0 29
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: LD_INT 3
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 3
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: LD_INT 4
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 4
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 3
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 5
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 5
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 4
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 6
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 6
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 5
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42698: LD_ADDR_VAR 0 30
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 3
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 3
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 4
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 4
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 4
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 5
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 5
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 5
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 6
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 6
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42841: LD_ADDR_VAR 0 31
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 4
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 4
42888: PUSH
42889: LD_INT 4
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: LD_INT 4
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 5
42908: PUSH
42909: LD_INT 4
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 5
42918: PUSH
42919: LD_INT 5
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 4
42928: PUSH
42929: LD_INT 5
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 6
42938: PUSH
42939: LD_INT 5
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 6
42948: PUSH
42949: LD_INT 6
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 5
42958: PUSH
42959: LD_INT 6
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42980: LD_ADDR_VAR 0 32
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 3
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 3
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 4
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 4
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 5
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 5
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 4
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 6
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 6
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 5
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43123: LD_ADDR_VAR 0 33
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 4
43175: NEG
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 4
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 4
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 5
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 5
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 5
43232: NEG
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 6
43243: NEG
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 6
43254: NEG
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43278: LD_ADDR_VAR 0 34
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 3
43309: NEG
43310: PUSH
43311: LD_INT 3
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: LD_INT 4
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 4
43333: NEG
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 4
43345: NEG
43346: PUSH
43347: LD_INT 4
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 4
43357: NEG
43358: PUSH
43359: LD_INT 5
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 5
43369: NEG
43370: PUSH
43371: LD_INT 4
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 5
43381: NEG
43382: PUSH
43383: LD_INT 5
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 5
43393: NEG
43394: PUSH
43395: LD_INT 6
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 6
43405: NEG
43406: PUSH
43407: LD_INT 5
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 6
43417: NEG
43418: PUSH
43419: LD_INT 6
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43441: LD_ADDR_VAR 0 41
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 3
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43485: LD_ADDR_VAR 0 42
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43526: LD_ADDR_VAR 0 43
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43566: LD_ADDR_VAR 0 44
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43607: LD_ADDR_VAR 0 45
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 3
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43651: LD_ADDR_VAR 0 46
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: LD_INT 3
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43697: LD_ADDR_VAR 0 47
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 3
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 3
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43730: LD_ADDR_VAR 0 48
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 2
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43761: LD_ADDR_VAR 0 49
43765: PUSH
43766: LD_INT 3
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 3
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43790: LD_ADDR_VAR 0 50
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43819: LD_ADDR_VAR 0 51
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43850: LD_ADDR_VAR 0 52
43854: PUSH
43855: LD_INT 3
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43883: LD_ADDR_VAR 0 53
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 3
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 3
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43927: LD_ADDR_VAR 0 54
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 3
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43968: LD_ADDR_VAR 0 55
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 3
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44008: LD_ADDR_VAR 0 56
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44049: LD_ADDR_VAR 0 57
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: NEG
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44093: LD_ADDR_VAR 0 58
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: LD_INT 3
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 3
44112: NEG
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 3
44124: NEG
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44139: LD_ADDR_VAR 0 59
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44183: LD_ADDR_VAR 0 60
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44224: LD_ADDR_VAR 0 61
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44264: LD_ADDR_VAR 0 62
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44305: LD_ADDR_VAR 0 63
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44349: LD_ADDR_VAR 0 64
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
// end ; 2 :
44395: GO 47661
44397: LD_INT 2
44399: DOUBLE
44400: EQUAL
44401: IFTRUE 44405
44403: GO 47660
44405: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44406: LD_ADDR_VAR 0 29
44410: PUSH
44411: LD_INT 4
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 4
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 5
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 5
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 4
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 3
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 5
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 4
44526: PUSH
44527: LD_INT 3
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 4
44536: PUSH
44537: LD_INT 4
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: LD_INT 4
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 4
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 4
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 4
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 3
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 4
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 5
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 5
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 4
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 3
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 5
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: LD_INT 3
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 3
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 4
44745: NEG
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 4
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 4
44768: NEG
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 4
44791: NEG
44792: PUSH
44793: LD_INT 4
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 4
44803: NEG
44804: PUSH
44805: LD_INT 5
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 3
44815: NEG
44816: PUSH
44817: LD_INT 4
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: NEG
44828: PUSH
44829: LD_INT 3
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 4
44839: NEG
44840: PUSH
44841: LD_INT 3
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 5
44851: NEG
44852: PUSH
44853: LD_INT 4
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 5
44863: NEG
44864: PUSH
44865: LD_INT 5
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 3
44875: NEG
44876: PUSH
44877: LD_INT 5
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 5
44887: NEG
44888: PUSH
44889: LD_INT 3
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44944: LD_ADDR_VAR 0 30
44948: PUSH
44949: LD_INT 4
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 5
44971: PUSH
44972: LD_INT 4
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 5
44981: PUSH
44982: LD_INT 5
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 4
44991: PUSH
44992: LD_INT 5
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 5
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: LD_INT 5
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 4
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 4
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 3
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 4
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 4
45134: NEG
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 4
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: NEG
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 3
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 4
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 5
45190: NEG
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 5
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 5
45213: NEG
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 3
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 3
45236: NEG
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 3
45248: NEG
45249: PUSH
45250: LD_INT 4
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 3
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 3
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 4
45296: NEG
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 4
45308: NEG
45309: PUSH
45310: LD_INT 4
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 4
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 4
45332: NEG
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 4
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 5
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 4
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 3
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 3
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: LD_INT 4
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 5
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 3
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 5
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45491: LD_ADDR_VAR 0 31
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 4
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 4
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 5
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 5
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 4
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: LD_INT 5
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 3
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 4
45647: NEG
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 4
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 4
45670: NEG
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 4
45693: NEG
45694: PUSH
45695: LD_INT 4
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 4
45705: NEG
45706: PUSH
45707: LD_INT 5
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: LD_INT 4
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 4
45741: NEG
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 5
45753: NEG
45754: PUSH
45755: LD_INT 4
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 5
45765: NEG
45766: PUSH
45767: LD_INT 5
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: LD_INT 5
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 5
45789: NEG
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 3
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 4
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 3
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 3
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 4
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: LD_INT 4
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 4
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 4
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 5
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 5
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 4
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 3
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 5
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46041: LD_ADDR_VAR 0 32
46045: PUSH
46046: LD_INT 4
46048: NEG
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 4
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 4
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 5
46104: NEG
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 5
46115: NEG
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 5
46127: NEG
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 3
46150: NEG
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 3
46162: NEG
46163: PUSH
46164: LD_INT 4
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 4
46210: NEG
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 4
46222: NEG
46223: PUSH
46224: LD_INT 4
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: LD_INT 4
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 4
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 4
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 5
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 4
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 3
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 3
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 4
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 5
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 3
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 5
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 4
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 4
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 4
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 4
46453: PUSH
46454: LD_INT 4
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 4
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 5
46473: PUSH
46474: LD_INT 4
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 5
46483: PUSH
46484: LD_INT 5
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 4
46493: PUSH
46494: LD_INT 5
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: LD_INT 4
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 3
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 5
46523: PUSH
46524: LD_INT 3
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46588: LD_ADDR_VAR 0 33
46592: PUSH
46593: LD_INT 4
46595: NEG
46596: PUSH
46597: LD_INT 4
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 4
46607: NEG
46608: PUSH
46609: LD_INT 5
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: NEG
46620: PUSH
46621: LD_INT 4
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: LD_INT 3
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 4
46643: NEG
46644: PUSH
46645: LD_INT 3
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 5
46655: NEG
46656: PUSH
46657: LD_INT 4
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 5
46667: NEG
46668: PUSH
46669: LD_INT 5
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: LD_INT 5
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 5
46691: NEG
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 3
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 4
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 3
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 3
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 4
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 4
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 4
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 4
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 5
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 5
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 4
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 3
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 5
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 4
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 4
46928: PUSH
46929: LD_INT 4
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: PUSH
46939: LD_INT 4
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 4
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 4
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 4
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 4
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 5
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 5
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 4
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 5
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47126: LD_ADDR_VAR 0 34
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 4
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 5
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 4
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 4
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 5
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 5
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 4
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 4
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 4
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 4
47328: PUSH
47329: LD_INT 4
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 4
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 5
47348: PUSH
47349: LD_INT 4
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 5
47358: PUSH
47359: LD_INT 5
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 4
47368: PUSH
47369: LD_INT 5
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: LD_INT 4
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 5
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: LD_INT 5
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 3
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 4
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 4
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 3
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 4
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 4
47511: NEG
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 4
47522: NEG
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 3
47534: NEG
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 4
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 5
47567: NEG
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 5
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 5
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 3
47602: NEG
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// end ; end ;
47658: GO 47661
47660: POP
// case btype of b_depot , b_warehouse :
47661: LD_VAR 0 1
47665: PUSH
47666: LD_INT 0
47668: DOUBLE
47669: EQUAL
47670: IFTRUE 47680
47672: LD_INT 1
47674: DOUBLE
47675: EQUAL
47676: IFTRUE 47680
47678: GO 47881
47680: POP
// case nation of nation_american :
47681: LD_VAR 0 5
47685: PUSH
47686: LD_INT 1
47688: DOUBLE
47689: EQUAL
47690: IFTRUE 47694
47692: GO 47750
47694: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47695: LD_ADDR_VAR 0 9
47699: PUSH
47700: LD_VAR 0 11
47704: PUSH
47705: LD_VAR 0 12
47709: PUSH
47710: LD_VAR 0 13
47714: PUSH
47715: LD_VAR 0 14
47719: PUSH
47720: LD_VAR 0 15
47724: PUSH
47725: LD_VAR 0 16
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: PUSH
47738: LD_VAR 0 4
47742: PUSH
47743: LD_INT 1
47745: PLUS
47746: ARRAY
47747: ST_TO_ADDR
47748: GO 47879
47750: LD_INT 2
47752: DOUBLE
47753: EQUAL
47754: IFTRUE 47758
47756: GO 47814
47758: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47759: LD_ADDR_VAR 0 9
47763: PUSH
47764: LD_VAR 0 17
47768: PUSH
47769: LD_VAR 0 18
47773: PUSH
47774: LD_VAR 0 19
47778: PUSH
47779: LD_VAR 0 20
47783: PUSH
47784: LD_VAR 0 21
47788: PUSH
47789: LD_VAR 0 22
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: PUSH
47802: LD_VAR 0 4
47806: PUSH
47807: LD_INT 1
47809: PLUS
47810: ARRAY
47811: ST_TO_ADDR
47812: GO 47879
47814: LD_INT 3
47816: DOUBLE
47817: EQUAL
47818: IFTRUE 47822
47820: GO 47878
47822: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47823: LD_ADDR_VAR 0 9
47827: PUSH
47828: LD_VAR 0 23
47832: PUSH
47833: LD_VAR 0 24
47837: PUSH
47838: LD_VAR 0 25
47842: PUSH
47843: LD_VAR 0 26
47847: PUSH
47848: LD_VAR 0 27
47852: PUSH
47853: LD_VAR 0 28
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: LD_VAR 0 4
47870: PUSH
47871: LD_INT 1
47873: PLUS
47874: ARRAY
47875: ST_TO_ADDR
47876: GO 47879
47878: POP
47879: GO 48434
47881: LD_INT 2
47883: DOUBLE
47884: EQUAL
47885: IFTRUE 47895
47887: LD_INT 3
47889: DOUBLE
47890: EQUAL
47891: IFTRUE 47895
47893: GO 47951
47895: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47896: LD_ADDR_VAR 0 9
47900: PUSH
47901: LD_VAR 0 29
47905: PUSH
47906: LD_VAR 0 30
47910: PUSH
47911: LD_VAR 0 31
47915: PUSH
47916: LD_VAR 0 32
47920: PUSH
47921: LD_VAR 0 33
47925: PUSH
47926: LD_VAR 0 34
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: PUSH
47939: LD_VAR 0 4
47943: PUSH
47944: LD_INT 1
47946: PLUS
47947: ARRAY
47948: ST_TO_ADDR
47949: GO 48434
47951: LD_INT 16
47953: DOUBLE
47954: EQUAL
47955: IFTRUE 48013
47957: LD_INT 17
47959: DOUBLE
47960: EQUAL
47961: IFTRUE 48013
47963: LD_INT 18
47965: DOUBLE
47966: EQUAL
47967: IFTRUE 48013
47969: LD_INT 19
47971: DOUBLE
47972: EQUAL
47973: IFTRUE 48013
47975: LD_INT 22
47977: DOUBLE
47978: EQUAL
47979: IFTRUE 48013
47981: LD_INT 20
47983: DOUBLE
47984: EQUAL
47985: IFTRUE 48013
47987: LD_INT 21
47989: DOUBLE
47990: EQUAL
47991: IFTRUE 48013
47993: LD_INT 23
47995: DOUBLE
47996: EQUAL
47997: IFTRUE 48013
47999: LD_INT 24
48001: DOUBLE
48002: EQUAL
48003: IFTRUE 48013
48005: LD_INT 25
48007: DOUBLE
48008: EQUAL
48009: IFTRUE 48013
48011: GO 48069
48013: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48014: LD_ADDR_VAR 0 9
48018: PUSH
48019: LD_VAR 0 35
48023: PUSH
48024: LD_VAR 0 36
48028: PUSH
48029: LD_VAR 0 37
48033: PUSH
48034: LD_VAR 0 38
48038: PUSH
48039: LD_VAR 0 39
48043: PUSH
48044: LD_VAR 0 40
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: PUSH
48057: LD_VAR 0 4
48061: PUSH
48062: LD_INT 1
48064: PLUS
48065: ARRAY
48066: ST_TO_ADDR
48067: GO 48434
48069: LD_INT 6
48071: DOUBLE
48072: EQUAL
48073: IFTRUE 48125
48075: LD_INT 7
48077: DOUBLE
48078: EQUAL
48079: IFTRUE 48125
48081: LD_INT 8
48083: DOUBLE
48084: EQUAL
48085: IFTRUE 48125
48087: LD_INT 13
48089: DOUBLE
48090: EQUAL
48091: IFTRUE 48125
48093: LD_INT 12
48095: DOUBLE
48096: EQUAL
48097: IFTRUE 48125
48099: LD_INT 15
48101: DOUBLE
48102: EQUAL
48103: IFTRUE 48125
48105: LD_INT 11
48107: DOUBLE
48108: EQUAL
48109: IFTRUE 48125
48111: LD_INT 14
48113: DOUBLE
48114: EQUAL
48115: IFTRUE 48125
48117: LD_INT 10
48119: DOUBLE
48120: EQUAL
48121: IFTRUE 48125
48123: GO 48181
48125: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48126: LD_ADDR_VAR 0 9
48130: PUSH
48131: LD_VAR 0 41
48135: PUSH
48136: LD_VAR 0 42
48140: PUSH
48141: LD_VAR 0 43
48145: PUSH
48146: LD_VAR 0 44
48150: PUSH
48151: LD_VAR 0 45
48155: PUSH
48156: LD_VAR 0 46
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: PUSH
48169: LD_VAR 0 4
48173: PUSH
48174: LD_INT 1
48176: PLUS
48177: ARRAY
48178: ST_TO_ADDR
48179: GO 48434
48181: LD_INT 36
48183: DOUBLE
48184: EQUAL
48185: IFTRUE 48189
48187: GO 48245
48189: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48190: LD_ADDR_VAR 0 9
48194: PUSH
48195: LD_VAR 0 47
48199: PUSH
48200: LD_VAR 0 48
48204: PUSH
48205: LD_VAR 0 49
48209: PUSH
48210: LD_VAR 0 50
48214: PUSH
48215: LD_VAR 0 51
48219: PUSH
48220: LD_VAR 0 52
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: PUSH
48233: LD_VAR 0 4
48237: PUSH
48238: LD_INT 1
48240: PLUS
48241: ARRAY
48242: ST_TO_ADDR
48243: GO 48434
48245: LD_INT 4
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48271
48251: LD_INT 5
48253: DOUBLE
48254: EQUAL
48255: IFTRUE 48271
48257: LD_INT 34
48259: DOUBLE
48260: EQUAL
48261: IFTRUE 48271
48263: LD_INT 37
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48271
48269: GO 48327
48271: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48272: LD_ADDR_VAR 0 9
48276: PUSH
48277: LD_VAR 0 53
48281: PUSH
48282: LD_VAR 0 54
48286: PUSH
48287: LD_VAR 0 55
48291: PUSH
48292: LD_VAR 0 56
48296: PUSH
48297: LD_VAR 0 57
48301: PUSH
48302: LD_VAR 0 58
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: PUSH
48315: LD_VAR 0 4
48319: PUSH
48320: LD_INT 1
48322: PLUS
48323: ARRAY
48324: ST_TO_ADDR
48325: GO 48434
48327: LD_INT 31
48329: DOUBLE
48330: EQUAL
48331: IFTRUE 48377
48333: LD_INT 32
48335: DOUBLE
48336: EQUAL
48337: IFTRUE 48377
48339: LD_INT 33
48341: DOUBLE
48342: EQUAL
48343: IFTRUE 48377
48345: LD_INT 27
48347: DOUBLE
48348: EQUAL
48349: IFTRUE 48377
48351: LD_INT 26
48353: DOUBLE
48354: EQUAL
48355: IFTRUE 48377
48357: LD_INT 28
48359: DOUBLE
48360: EQUAL
48361: IFTRUE 48377
48363: LD_INT 29
48365: DOUBLE
48366: EQUAL
48367: IFTRUE 48377
48369: LD_INT 30
48371: DOUBLE
48372: EQUAL
48373: IFTRUE 48377
48375: GO 48433
48377: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48378: LD_ADDR_VAR 0 9
48382: PUSH
48383: LD_VAR 0 59
48387: PUSH
48388: LD_VAR 0 60
48392: PUSH
48393: LD_VAR 0 61
48397: PUSH
48398: LD_VAR 0 62
48402: PUSH
48403: LD_VAR 0 63
48407: PUSH
48408: LD_VAR 0 64
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: PUSH
48421: LD_VAR 0 4
48425: PUSH
48426: LD_INT 1
48428: PLUS
48429: ARRAY
48430: ST_TO_ADDR
48431: GO 48434
48433: POP
// temp_list2 = [ ] ;
48434: LD_ADDR_VAR 0 10
48438: PUSH
48439: EMPTY
48440: ST_TO_ADDR
// for i in temp_list do
48441: LD_ADDR_VAR 0 8
48445: PUSH
48446: LD_VAR 0 9
48450: PUSH
48451: FOR_IN
48452: IFFALSE 48504
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48454: LD_ADDR_VAR 0 10
48458: PUSH
48459: LD_VAR 0 10
48463: PUSH
48464: LD_VAR 0 8
48468: PUSH
48469: LD_INT 1
48471: ARRAY
48472: PUSH
48473: LD_VAR 0 2
48477: PLUS
48478: PUSH
48479: LD_VAR 0 8
48483: PUSH
48484: LD_INT 2
48486: ARRAY
48487: PUSH
48488: LD_VAR 0 3
48492: PLUS
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: ADD
48501: ST_TO_ADDR
48502: GO 48451
48504: POP
48505: POP
// result = temp_list2 ;
48506: LD_ADDR_VAR 0 7
48510: PUSH
48511: LD_VAR 0 10
48515: ST_TO_ADDR
// end ;
48516: LD_VAR 0 7
48520: RET
// export function EnemyInRange ( unit , dist ) ; begin
48521: LD_INT 0
48523: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48524: LD_ADDR_VAR 0 3
48528: PUSH
48529: LD_VAR 0 1
48533: PPUSH
48534: CALL_OW 255
48538: PPUSH
48539: LD_VAR 0 1
48543: PPUSH
48544: CALL_OW 250
48548: PPUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: CALL_OW 251
48558: PPUSH
48559: LD_VAR 0 2
48563: PPUSH
48564: CALL 21894 0 4
48568: PUSH
48569: LD_INT 4
48571: ARRAY
48572: ST_TO_ADDR
// end ;
48573: LD_VAR 0 3
48577: RET
// export function PlayerSeeMe ( unit ) ; begin
48578: LD_INT 0
48580: PPUSH
// result := See ( your_side , unit ) ;
48581: LD_ADDR_VAR 0 2
48585: PUSH
48586: LD_OWVAR 2
48590: PPUSH
48591: LD_VAR 0 1
48595: PPUSH
48596: CALL_OW 292
48600: ST_TO_ADDR
// end ;
48601: LD_VAR 0 2
48605: RET
// export function ReverseDir ( unit ) ; begin
48606: LD_INT 0
48608: PPUSH
// if not unit then
48609: LD_VAR 0 1
48613: NOT
48614: IFFALSE 48618
// exit ;
48616: GO 48641
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48618: LD_ADDR_VAR 0 2
48622: PUSH
48623: LD_VAR 0 1
48627: PPUSH
48628: CALL_OW 254
48632: PUSH
48633: LD_INT 3
48635: PLUS
48636: PUSH
48637: LD_INT 6
48639: MOD
48640: ST_TO_ADDR
// end ;
48641: LD_VAR 0 2
48645: RET
// export function ReverseArray ( array ) ; var i ; begin
48646: LD_INT 0
48648: PPUSH
48649: PPUSH
// if not array then
48650: LD_VAR 0 1
48654: NOT
48655: IFFALSE 48659
// exit ;
48657: GO 48714
// result := [ ] ;
48659: LD_ADDR_VAR 0 2
48663: PUSH
48664: EMPTY
48665: ST_TO_ADDR
// for i := array downto 1 do
48666: LD_ADDR_VAR 0 3
48670: PUSH
48671: DOUBLE
48672: LD_VAR 0 1
48676: INC
48677: ST_TO_ADDR
48678: LD_INT 1
48680: PUSH
48681: FOR_DOWNTO
48682: IFFALSE 48712
// result := Join ( result , array [ i ] ) ;
48684: LD_ADDR_VAR 0 2
48688: PUSH
48689: LD_VAR 0 2
48693: PPUSH
48694: LD_VAR 0 1
48698: PUSH
48699: LD_VAR 0 3
48703: ARRAY
48704: PPUSH
48705: CALL 53379 0 2
48709: ST_TO_ADDR
48710: GO 48681
48712: POP
48713: POP
// end ;
48714: LD_VAR 0 2
48718: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48719: LD_INT 0
48721: PPUSH
48722: PPUSH
48723: PPUSH
48724: PPUSH
48725: PPUSH
48726: PPUSH
// if not unit or not hexes then
48727: LD_VAR 0 1
48731: NOT
48732: PUSH
48733: LD_VAR 0 2
48737: NOT
48738: OR
48739: IFFALSE 48743
// exit ;
48741: GO 48866
// dist := 9999 ;
48743: LD_ADDR_VAR 0 5
48747: PUSH
48748: LD_INT 9999
48750: ST_TO_ADDR
// for i = 1 to hexes do
48751: LD_ADDR_VAR 0 4
48755: PUSH
48756: DOUBLE
48757: LD_INT 1
48759: DEC
48760: ST_TO_ADDR
48761: LD_VAR 0 2
48765: PUSH
48766: FOR_TO
48767: IFFALSE 48854
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48769: LD_ADDR_VAR 0 6
48773: PUSH
48774: LD_VAR 0 1
48778: PPUSH
48779: LD_VAR 0 2
48783: PUSH
48784: LD_VAR 0 4
48788: ARRAY
48789: PUSH
48790: LD_INT 1
48792: ARRAY
48793: PPUSH
48794: LD_VAR 0 2
48798: PUSH
48799: LD_VAR 0 4
48803: ARRAY
48804: PUSH
48805: LD_INT 2
48807: ARRAY
48808: PPUSH
48809: CALL_OW 297
48813: ST_TO_ADDR
// if tdist < dist then
48814: LD_VAR 0 6
48818: PUSH
48819: LD_VAR 0 5
48823: LESS
48824: IFFALSE 48852
// begin hex := hexes [ i ] ;
48826: LD_ADDR_VAR 0 8
48830: PUSH
48831: LD_VAR 0 2
48835: PUSH
48836: LD_VAR 0 4
48840: ARRAY
48841: ST_TO_ADDR
// dist := tdist ;
48842: LD_ADDR_VAR 0 5
48846: PUSH
48847: LD_VAR 0 6
48851: ST_TO_ADDR
// end ; end ;
48852: GO 48766
48854: POP
48855: POP
// result := hex ;
48856: LD_ADDR_VAR 0 3
48860: PUSH
48861: LD_VAR 0 8
48865: ST_TO_ADDR
// end ;
48866: LD_VAR 0 3
48870: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48871: LD_INT 0
48873: PPUSH
48874: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48875: LD_VAR 0 1
48879: NOT
48880: PUSH
48881: LD_VAR 0 1
48885: PUSH
48886: LD_INT 21
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 23
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PPUSH
48910: CALL_OW 69
48914: IN
48915: NOT
48916: OR
48917: IFFALSE 48921
// exit ;
48919: GO 48968
// for i = 1 to 3 do
48921: LD_ADDR_VAR 0 3
48925: PUSH
48926: DOUBLE
48927: LD_INT 1
48929: DEC
48930: ST_TO_ADDR
48931: LD_INT 3
48933: PUSH
48934: FOR_TO
48935: IFFALSE 48966
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48937: LD_VAR 0 1
48941: PPUSH
48942: CALL_OW 250
48946: PPUSH
48947: LD_VAR 0 1
48951: PPUSH
48952: CALL_OW 251
48956: PPUSH
48957: LD_INT 1
48959: PPUSH
48960: CALL_OW 453
48964: GO 48934
48966: POP
48967: POP
// end ;
48968: LD_VAR 0 2
48972: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48973: LD_INT 0
48975: PPUSH
48976: PPUSH
48977: PPUSH
48978: PPUSH
48979: PPUSH
48980: PPUSH
// if not unit or not enemy_unit then
48981: LD_VAR 0 1
48985: NOT
48986: PUSH
48987: LD_VAR 0 2
48991: NOT
48992: OR
48993: IFFALSE 48997
// exit ;
48995: GO 49464
// if GetLives ( i ) < 250 then
48997: LD_VAR 0 4
49001: PPUSH
49002: CALL_OW 256
49006: PUSH
49007: LD_INT 250
49009: LESS
49010: IFFALSE 49023
// begin ComAutodestruct ( i ) ;
49012: LD_VAR 0 4
49016: PPUSH
49017: CALL 48871 0 1
// exit ;
49021: GO 49464
// end ; x := GetX ( enemy_unit ) ;
49023: LD_ADDR_VAR 0 7
49027: PUSH
49028: LD_VAR 0 2
49032: PPUSH
49033: CALL_OW 250
49037: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49038: LD_ADDR_VAR 0 8
49042: PUSH
49043: LD_VAR 0 2
49047: PPUSH
49048: CALL_OW 251
49052: ST_TO_ADDR
// if not x or not y then
49053: LD_VAR 0 7
49057: NOT
49058: PUSH
49059: LD_VAR 0 8
49063: NOT
49064: OR
49065: IFFALSE 49069
// exit ;
49067: GO 49464
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49069: LD_ADDR_VAR 0 6
49073: PUSH
49074: LD_VAR 0 7
49078: PPUSH
49079: LD_INT 0
49081: PPUSH
49082: LD_INT 4
49084: PPUSH
49085: CALL_OW 272
49089: PUSH
49090: LD_VAR 0 8
49094: PPUSH
49095: LD_INT 0
49097: PPUSH
49098: LD_INT 4
49100: PPUSH
49101: CALL_OW 273
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_VAR 0 7
49114: PPUSH
49115: LD_INT 1
49117: PPUSH
49118: LD_INT 4
49120: PPUSH
49121: CALL_OW 272
49125: PUSH
49126: LD_VAR 0 8
49130: PPUSH
49131: LD_INT 1
49133: PPUSH
49134: LD_INT 4
49136: PPUSH
49137: CALL_OW 273
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_VAR 0 7
49150: PPUSH
49151: LD_INT 2
49153: PPUSH
49154: LD_INT 4
49156: PPUSH
49157: CALL_OW 272
49161: PUSH
49162: LD_VAR 0 8
49166: PPUSH
49167: LD_INT 2
49169: PPUSH
49170: LD_INT 4
49172: PPUSH
49173: CALL_OW 273
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_VAR 0 7
49186: PPUSH
49187: LD_INT 3
49189: PPUSH
49190: LD_INT 4
49192: PPUSH
49193: CALL_OW 272
49197: PUSH
49198: LD_VAR 0 8
49202: PPUSH
49203: LD_INT 3
49205: PPUSH
49206: LD_INT 4
49208: PPUSH
49209: CALL_OW 273
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_VAR 0 7
49222: PPUSH
49223: LD_INT 4
49225: PPUSH
49226: LD_INT 4
49228: PPUSH
49229: CALL_OW 272
49233: PUSH
49234: LD_VAR 0 8
49238: PPUSH
49239: LD_INT 4
49241: PPUSH
49242: LD_INT 4
49244: PPUSH
49245: CALL_OW 273
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_VAR 0 7
49258: PPUSH
49259: LD_INT 5
49261: PPUSH
49262: LD_INT 4
49264: PPUSH
49265: CALL_OW 272
49269: PUSH
49270: LD_VAR 0 8
49274: PPUSH
49275: LD_INT 5
49277: PPUSH
49278: LD_INT 4
49280: PPUSH
49281: CALL_OW 273
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: ST_TO_ADDR
// for i = tmp downto 1 do
49298: LD_ADDR_VAR 0 4
49302: PUSH
49303: DOUBLE
49304: LD_VAR 0 6
49308: INC
49309: ST_TO_ADDR
49310: LD_INT 1
49312: PUSH
49313: FOR_DOWNTO
49314: IFFALSE 49415
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49316: LD_VAR 0 6
49320: PUSH
49321: LD_VAR 0 4
49325: ARRAY
49326: PUSH
49327: LD_INT 1
49329: ARRAY
49330: PPUSH
49331: LD_VAR 0 6
49335: PUSH
49336: LD_VAR 0 4
49340: ARRAY
49341: PUSH
49342: LD_INT 2
49344: ARRAY
49345: PPUSH
49346: CALL_OW 488
49350: NOT
49351: PUSH
49352: LD_VAR 0 6
49356: PUSH
49357: LD_VAR 0 4
49361: ARRAY
49362: PUSH
49363: LD_INT 1
49365: ARRAY
49366: PPUSH
49367: LD_VAR 0 6
49371: PUSH
49372: LD_VAR 0 4
49376: ARRAY
49377: PUSH
49378: LD_INT 2
49380: ARRAY
49381: PPUSH
49382: CALL_OW 428
49386: PUSH
49387: LD_INT 0
49389: NONEQUAL
49390: OR
49391: IFFALSE 49413
// tmp := Delete ( tmp , i ) ;
49393: LD_ADDR_VAR 0 6
49397: PUSH
49398: LD_VAR 0 6
49402: PPUSH
49403: LD_VAR 0 4
49407: PPUSH
49408: CALL_OW 3
49412: ST_TO_ADDR
49413: GO 49313
49415: POP
49416: POP
// j := GetClosestHex ( unit , tmp ) ;
49417: LD_ADDR_VAR 0 5
49421: PUSH
49422: LD_VAR 0 1
49426: PPUSH
49427: LD_VAR 0 6
49431: PPUSH
49432: CALL 48719 0 2
49436: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49437: LD_VAR 0 1
49441: PPUSH
49442: LD_VAR 0 5
49446: PUSH
49447: LD_INT 1
49449: ARRAY
49450: PPUSH
49451: LD_VAR 0 5
49455: PUSH
49456: LD_INT 2
49458: ARRAY
49459: PPUSH
49460: CALL_OW 111
// end ;
49464: LD_VAR 0 3
49468: RET
// export function PrepareApemanSoldier ( ) ; begin
49469: LD_INT 0
49471: PPUSH
// uc_nation := 0 ;
49472: LD_ADDR_OWVAR 21
49476: PUSH
49477: LD_INT 0
49479: ST_TO_ADDR
// hc_sex := sex_male ;
49480: LD_ADDR_OWVAR 27
49484: PUSH
49485: LD_INT 1
49487: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49488: LD_ADDR_OWVAR 28
49492: PUSH
49493: LD_INT 15
49495: ST_TO_ADDR
// hc_gallery :=  ;
49496: LD_ADDR_OWVAR 33
49500: PUSH
49501: LD_STRING 
49503: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49504: LD_ADDR_OWVAR 31
49508: PUSH
49509: LD_INT 0
49511: PPUSH
49512: LD_INT 3
49514: PPUSH
49515: CALL_OW 12
49519: PUSH
49520: LD_INT 0
49522: PPUSH
49523: LD_INT 3
49525: PPUSH
49526: CALL_OW 12
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// end ;
49543: LD_VAR 0 1
49547: RET
// export function PrepareApemanEngineer ( ) ; begin
49548: LD_INT 0
49550: PPUSH
// uc_nation := 0 ;
49551: LD_ADDR_OWVAR 21
49555: PUSH
49556: LD_INT 0
49558: ST_TO_ADDR
// hc_sex := sex_male ;
49559: LD_ADDR_OWVAR 27
49563: PUSH
49564: LD_INT 1
49566: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49567: LD_ADDR_OWVAR 28
49571: PUSH
49572: LD_INT 16
49574: ST_TO_ADDR
// hc_gallery :=  ;
49575: LD_ADDR_OWVAR 33
49579: PUSH
49580: LD_STRING 
49582: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49583: LD_ADDR_OWVAR 31
49587: PUSH
49588: LD_INT 0
49590: PPUSH
49591: LD_INT 3
49593: PPUSH
49594: CALL_OW 12
49598: PUSH
49599: LD_INT 0
49601: PPUSH
49602: LD_INT 3
49604: PPUSH
49605: CALL_OW 12
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: ST_TO_ADDR
// end ;
49622: LD_VAR 0 1
49626: RET
// export function PrepareApeman ( agressivity ) ; begin
49627: LD_INT 0
49629: PPUSH
// uc_side := 0 ;
49630: LD_ADDR_OWVAR 20
49634: PUSH
49635: LD_INT 0
49637: ST_TO_ADDR
// uc_nation := 0 ;
49638: LD_ADDR_OWVAR 21
49642: PUSH
49643: LD_INT 0
49645: ST_TO_ADDR
// hc_sex := sex_male ;
49646: LD_ADDR_OWVAR 27
49650: PUSH
49651: LD_INT 1
49653: ST_TO_ADDR
// hc_class := class_apeman ;
49654: LD_ADDR_OWVAR 28
49658: PUSH
49659: LD_INT 12
49661: ST_TO_ADDR
// hc_gallery :=  ;
49662: LD_ADDR_OWVAR 33
49666: PUSH
49667: LD_STRING 
49669: ST_TO_ADDR
// if agressivity = 0 then
49670: LD_VAR 0 1
49674: PUSH
49675: LD_INT 0
49677: EQUAL
49678: IFFALSE 49690
// hc_agressivity := 0 else
49680: LD_ADDR_OWVAR 35
49684: PUSH
49685: LD_INT 0
49687: ST_TO_ADDR
49688: GO 49711
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49690: LD_ADDR_OWVAR 35
49694: PUSH
49695: LD_VAR 0 1
49699: NEG
49700: PPUSH
49701: LD_VAR 0 1
49705: PPUSH
49706: CALL_OW 12
49710: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49711: LD_ADDR_OWVAR 31
49715: PUSH
49716: LD_INT 0
49718: PPUSH
49719: LD_INT 3
49721: PPUSH
49722: CALL_OW 12
49726: PUSH
49727: LD_INT 0
49729: PPUSH
49730: LD_INT 3
49732: PPUSH
49733: CALL_OW 12
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: ST_TO_ADDR
// end ;
49750: LD_VAR 0 2
49754: RET
// export function PrepareTiger ( agressivity ) ; begin
49755: LD_INT 0
49757: PPUSH
// uc_side := 0 ;
49758: LD_ADDR_OWVAR 20
49762: PUSH
49763: LD_INT 0
49765: ST_TO_ADDR
// uc_nation := 0 ;
49766: LD_ADDR_OWVAR 21
49770: PUSH
49771: LD_INT 0
49773: ST_TO_ADDR
// hc_class := class_tiger ;
49774: LD_ADDR_OWVAR 28
49778: PUSH
49779: LD_INT 14
49781: ST_TO_ADDR
// hc_gallery :=  ;
49782: LD_ADDR_OWVAR 33
49786: PUSH
49787: LD_STRING 
49789: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49790: LD_ADDR_OWVAR 35
49794: PUSH
49795: LD_VAR 0 1
49799: NEG
49800: PPUSH
49801: LD_VAR 0 1
49805: PPUSH
49806: CALL_OW 12
49810: ST_TO_ADDR
// end ;
49811: LD_VAR 0 2
49815: RET
// export function PrepareEnchidna ( ) ; begin
49816: LD_INT 0
49818: PPUSH
// uc_side := 0 ;
49819: LD_ADDR_OWVAR 20
49823: PUSH
49824: LD_INT 0
49826: ST_TO_ADDR
// uc_nation := 0 ;
49827: LD_ADDR_OWVAR 21
49831: PUSH
49832: LD_INT 0
49834: ST_TO_ADDR
// hc_class := class_baggie ;
49835: LD_ADDR_OWVAR 28
49839: PUSH
49840: LD_INT 13
49842: ST_TO_ADDR
// hc_gallery :=  ;
49843: LD_ADDR_OWVAR 33
49847: PUSH
49848: LD_STRING 
49850: ST_TO_ADDR
// end ;
49851: LD_VAR 0 1
49855: RET
// export function PrepareFrog ( ) ; begin
49856: LD_INT 0
49858: PPUSH
// uc_side := 0 ;
49859: LD_ADDR_OWVAR 20
49863: PUSH
49864: LD_INT 0
49866: ST_TO_ADDR
// uc_nation := 0 ;
49867: LD_ADDR_OWVAR 21
49871: PUSH
49872: LD_INT 0
49874: ST_TO_ADDR
// hc_class := class_frog ;
49875: LD_ADDR_OWVAR 28
49879: PUSH
49880: LD_INT 19
49882: ST_TO_ADDR
// hc_gallery :=  ;
49883: LD_ADDR_OWVAR 33
49887: PUSH
49888: LD_STRING 
49890: ST_TO_ADDR
// end ;
49891: LD_VAR 0 1
49895: RET
// export function PrepareFish ( ) ; begin
49896: LD_INT 0
49898: PPUSH
// uc_side := 0 ;
49899: LD_ADDR_OWVAR 20
49903: PUSH
49904: LD_INT 0
49906: ST_TO_ADDR
// uc_nation := 0 ;
49907: LD_ADDR_OWVAR 21
49911: PUSH
49912: LD_INT 0
49914: ST_TO_ADDR
// hc_class := class_fish ;
49915: LD_ADDR_OWVAR 28
49919: PUSH
49920: LD_INT 20
49922: ST_TO_ADDR
// hc_gallery :=  ;
49923: LD_ADDR_OWVAR 33
49927: PUSH
49928: LD_STRING 
49930: ST_TO_ADDR
// end ;
49931: LD_VAR 0 1
49935: RET
// export function PrepareBird ( ) ; begin
49936: LD_INT 0
49938: PPUSH
// uc_side := 0 ;
49939: LD_ADDR_OWVAR 20
49943: PUSH
49944: LD_INT 0
49946: ST_TO_ADDR
// uc_nation := 0 ;
49947: LD_ADDR_OWVAR 21
49951: PUSH
49952: LD_INT 0
49954: ST_TO_ADDR
// hc_class := class_phororhacos ;
49955: LD_ADDR_OWVAR 28
49959: PUSH
49960: LD_INT 18
49962: ST_TO_ADDR
// hc_gallery :=  ;
49963: LD_ADDR_OWVAR 33
49967: PUSH
49968: LD_STRING 
49970: ST_TO_ADDR
// end ;
49971: LD_VAR 0 1
49975: RET
// export function PrepareHorse ( ) ; begin
49976: LD_INT 0
49978: PPUSH
// uc_side := 0 ;
49979: LD_ADDR_OWVAR 20
49983: PUSH
49984: LD_INT 0
49986: ST_TO_ADDR
// uc_nation := 0 ;
49987: LD_ADDR_OWVAR 21
49991: PUSH
49992: LD_INT 0
49994: ST_TO_ADDR
// hc_class := class_horse ;
49995: LD_ADDR_OWVAR 28
49999: PUSH
50000: LD_INT 21
50002: ST_TO_ADDR
// hc_gallery :=  ;
50003: LD_ADDR_OWVAR 33
50007: PUSH
50008: LD_STRING 
50010: ST_TO_ADDR
// end ;
50011: LD_VAR 0 1
50015: RET
// export function PrepareMastodont ( ) ; begin
50016: LD_INT 0
50018: PPUSH
// uc_side := 0 ;
50019: LD_ADDR_OWVAR 20
50023: PUSH
50024: LD_INT 0
50026: ST_TO_ADDR
// uc_nation := 0 ;
50027: LD_ADDR_OWVAR 21
50031: PUSH
50032: LD_INT 0
50034: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50035: LD_ADDR_OWVAR 37
50039: PUSH
50040: LD_INT 31
50042: ST_TO_ADDR
// vc_control := control_rider ;
50043: LD_ADDR_OWVAR 38
50047: PUSH
50048: LD_INT 4
50050: ST_TO_ADDR
// end ;
50051: LD_VAR 0 1
50055: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50056: LD_INT 0
50058: PPUSH
50059: PPUSH
50060: PPUSH
// uc_side = 0 ;
50061: LD_ADDR_OWVAR 20
50065: PUSH
50066: LD_INT 0
50068: ST_TO_ADDR
// uc_nation = 0 ;
50069: LD_ADDR_OWVAR 21
50073: PUSH
50074: LD_INT 0
50076: ST_TO_ADDR
// InitHc_All ( ) ;
50077: CALL_OW 584
// InitVc ;
50081: CALL_OW 20
// if mastodonts then
50085: LD_VAR 0 6
50089: IFFALSE 50156
// for i = 1 to mastodonts do
50091: LD_ADDR_VAR 0 11
50095: PUSH
50096: DOUBLE
50097: LD_INT 1
50099: DEC
50100: ST_TO_ADDR
50101: LD_VAR 0 6
50105: PUSH
50106: FOR_TO
50107: IFFALSE 50154
// begin vc_chassis := 31 ;
50109: LD_ADDR_OWVAR 37
50113: PUSH
50114: LD_INT 31
50116: ST_TO_ADDR
// vc_control := control_rider ;
50117: LD_ADDR_OWVAR 38
50121: PUSH
50122: LD_INT 4
50124: ST_TO_ADDR
// animal := CreateVehicle ;
50125: LD_ADDR_VAR 0 12
50129: PUSH
50130: CALL_OW 45
50134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50135: LD_VAR 0 12
50139: PPUSH
50140: LD_VAR 0 8
50144: PPUSH
50145: LD_INT 0
50147: PPUSH
50148: CALL 52284 0 3
// end ;
50152: GO 50106
50154: POP
50155: POP
// if horses then
50156: LD_VAR 0 5
50160: IFFALSE 50227
// for i = 1 to horses do
50162: LD_ADDR_VAR 0 11
50166: PUSH
50167: DOUBLE
50168: LD_INT 1
50170: DEC
50171: ST_TO_ADDR
50172: LD_VAR 0 5
50176: PUSH
50177: FOR_TO
50178: IFFALSE 50225
// begin hc_class := 21 ;
50180: LD_ADDR_OWVAR 28
50184: PUSH
50185: LD_INT 21
50187: ST_TO_ADDR
// hc_gallery :=  ;
50188: LD_ADDR_OWVAR 33
50192: PUSH
50193: LD_STRING 
50195: ST_TO_ADDR
// animal := CreateHuman ;
50196: LD_ADDR_VAR 0 12
50200: PUSH
50201: CALL_OW 44
50205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50206: LD_VAR 0 12
50210: PPUSH
50211: LD_VAR 0 8
50215: PPUSH
50216: LD_INT 0
50218: PPUSH
50219: CALL 52284 0 3
// end ;
50223: GO 50177
50225: POP
50226: POP
// if birds then
50227: LD_VAR 0 1
50231: IFFALSE 50298
// for i = 1 to birds do
50233: LD_ADDR_VAR 0 11
50237: PUSH
50238: DOUBLE
50239: LD_INT 1
50241: DEC
50242: ST_TO_ADDR
50243: LD_VAR 0 1
50247: PUSH
50248: FOR_TO
50249: IFFALSE 50296
// begin hc_class := 18 ;
50251: LD_ADDR_OWVAR 28
50255: PUSH
50256: LD_INT 18
50258: ST_TO_ADDR
// hc_gallery =  ;
50259: LD_ADDR_OWVAR 33
50263: PUSH
50264: LD_STRING 
50266: ST_TO_ADDR
// animal := CreateHuman ;
50267: LD_ADDR_VAR 0 12
50271: PUSH
50272: CALL_OW 44
50276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50277: LD_VAR 0 12
50281: PPUSH
50282: LD_VAR 0 8
50286: PPUSH
50287: LD_INT 0
50289: PPUSH
50290: CALL 52284 0 3
// end ;
50294: GO 50248
50296: POP
50297: POP
// if tigers then
50298: LD_VAR 0 2
50302: IFFALSE 50386
// for i = 1 to tigers do
50304: LD_ADDR_VAR 0 11
50308: PUSH
50309: DOUBLE
50310: LD_INT 1
50312: DEC
50313: ST_TO_ADDR
50314: LD_VAR 0 2
50318: PUSH
50319: FOR_TO
50320: IFFALSE 50384
// begin hc_class = class_tiger ;
50322: LD_ADDR_OWVAR 28
50326: PUSH
50327: LD_INT 14
50329: ST_TO_ADDR
// hc_gallery =  ;
50330: LD_ADDR_OWVAR 33
50334: PUSH
50335: LD_STRING 
50337: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50338: LD_ADDR_OWVAR 35
50342: PUSH
50343: LD_INT 7
50345: NEG
50346: PPUSH
50347: LD_INT 7
50349: PPUSH
50350: CALL_OW 12
50354: ST_TO_ADDR
// animal := CreateHuman ;
50355: LD_ADDR_VAR 0 12
50359: PUSH
50360: CALL_OW 44
50364: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50365: LD_VAR 0 12
50369: PPUSH
50370: LD_VAR 0 8
50374: PPUSH
50375: LD_INT 0
50377: PPUSH
50378: CALL 52284 0 3
// end ;
50382: GO 50319
50384: POP
50385: POP
// if apemans then
50386: LD_VAR 0 3
50390: IFFALSE 50513
// for i = 1 to apemans do
50392: LD_ADDR_VAR 0 11
50396: PUSH
50397: DOUBLE
50398: LD_INT 1
50400: DEC
50401: ST_TO_ADDR
50402: LD_VAR 0 3
50406: PUSH
50407: FOR_TO
50408: IFFALSE 50511
// begin hc_class = class_apeman ;
50410: LD_ADDR_OWVAR 28
50414: PUSH
50415: LD_INT 12
50417: ST_TO_ADDR
// hc_gallery =  ;
50418: LD_ADDR_OWVAR 33
50422: PUSH
50423: LD_STRING 
50425: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50426: LD_ADDR_OWVAR 35
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PPUSH
50435: LD_INT 2
50437: PPUSH
50438: CALL_OW 12
50442: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50443: LD_ADDR_OWVAR 31
50447: PUSH
50448: LD_INT 1
50450: PPUSH
50451: LD_INT 3
50453: PPUSH
50454: CALL_OW 12
50458: PUSH
50459: LD_INT 1
50461: PPUSH
50462: LD_INT 3
50464: PPUSH
50465: CALL_OW 12
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: ST_TO_ADDR
// animal := CreateHuman ;
50482: LD_ADDR_VAR 0 12
50486: PUSH
50487: CALL_OW 44
50491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50492: LD_VAR 0 12
50496: PPUSH
50497: LD_VAR 0 8
50501: PPUSH
50502: LD_INT 0
50504: PPUSH
50505: CALL 52284 0 3
// end ;
50509: GO 50407
50511: POP
50512: POP
// if enchidnas then
50513: LD_VAR 0 4
50517: IFFALSE 50584
// for i = 1 to enchidnas do
50519: LD_ADDR_VAR 0 11
50523: PUSH
50524: DOUBLE
50525: LD_INT 1
50527: DEC
50528: ST_TO_ADDR
50529: LD_VAR 0 4
50533: PUSH
50534: FOR_TO
50535: IFFALSE 50582
// begin hc_class = 13 ;
50537: LD_ADDR_OWVAR 28
50541: PUSH
50542: LD_INT 13
50544: ST_TO_ADDR
// hc_gallery =  ;
50545: LD_ADDR_OWVAR 33
50549: PUSH
50550: LD_STRING 
50552: ST_TO_ADDR
// animal := CreateHuman ;
50553: LD_ADDR_VAR 0 12
50557: PUSH
50558: CALL_OW 44
50562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50563: LD_VAR 0 12
50567: PPUSH
50568: LD_VAR 0 8
50572: PPUSH
50573: LD_INT 0
50575: PPUSH
50576: CALL 52284 0 3
// end ;
50580: GO 50534
50582: POP
50583: POP
// if fishes then
50584: LD_VAR 0 7
50588: IFFALSE 50655
// for i = 1 to fishes do
50590: LD_ADDR_VAR 0 11
50594: PUSH
50595: DOUBLE
50596: LD_INT 1
50598: DEC
50599: ST_TO_ADDR
50600: LD_VAR 0 7
50604: PUSH
50605: FOR_TO
50606: IFFALSE 50653
// begin hc_class = 20 ;
50608: LD_ADDR_OWVAR 28
50612: PUSH
50613: LD_INT 20
50615: ST_TO_ADDR
// hc_gallery =  ;
50616: LD_ADDR_OWVAR 33
50620: PUSH
50621: LD_STRING 
50623: ST_TO_ADDR
// animal := CreateHuman ;
50624: LD_ADDR_VAR 0 12
50628: PUSH
50629: CALL_OW 44
50633: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50634: LD_VAR 0 12
50638: PPUSH
50639: LD_VAR 0 9
50643: PPUSH
50644: LD_INT 0
50646: PPUSH
50647: CALL 52284 0 3
// end ;
50651: GO 50605
50653: POP
50654: POP
// end ;
50655: LD_VAR 0 10
50659: RET
// export function WantHeal ( sci , unit ) ; begin
50660: LD_INT 0
50662: PPUSH
// if GetTaskList ( sci ) > 0 then
50663: LD_VAR 0 1
50667: PPUSH
50668: CALL_OW 437
50672: PUSH
50673: LD_INT 0
50675: GREATER
50676: IFFALSE 50746
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50678: LD_VAR 0 1
50682: PPUSH
50683: CALL_OW 437
50687: PUSH
50688: LD_INT 1
50690: ARRAY
50691: PUSH
50692: LD_INT 1
50694: ARRAY
50695: PUSH
50696: LD_STRING l
50698: EQUAL
50699: PUSH
50700: LD_VAR 0 1
50704: PPUSH
50705: CALL_OW 437
50709: PUSH
50710: LD_INT 1
50712: ARRAY
50713: PUSH
50714: LD_INT 4
50716: ARRAY
50717: PUSH
50718: LD_VAR 0 2
50722: EQUAL
50723: AND
50724: IFFALSE 50736
// result := true else
50726: LD_ADDR_VAR 0 3
50730: PUSH
50731: LD_INT 1
50733: ST_TO_ADDR
50734: GO 50744
// result := false ;
50736: LD_ADDR_VAR 0 3
50740: PUSH
50741: LD_INT 0
50743: ST_TO_ADDR
// end else
50744: GO 50754
// result := false ;
50746: LD_ADDR_VAR 0 3
50750: PUSH
50751: LD_INT 0
50753: ST_TO_ADDR
// end ;
50754: LD_VAR 0 3
50758: RET
// export function HealTarget ( sci ) ; begin
50759: LD_INT 0
50761: PPUSH
// if not sci then
50762: LD_VAR 0 1
50766: NOT
50767: IFFALSE 50771
// exit ;
50769: GO 50836
// result := 0 ;
50771: LD_ADDR_VAR 0 2
50775: PUSH
50776: LD_INT 0
50778: ST_TO_ADDR
// if GetTaskList ( sci ) then
50779: LD_VAR 0 1
50783: PPUSH
50784: CALL_OW 437
50788: IFFALSE 50836
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50790: LD_VAR 0 1
50794: PPUSH
50795: CALL_OW 437
50799: PUSH
50800: LD_INT 1
50802: ARRAY
50803: PUSH
50804: LD_INT 1
50806: ARRAY
50807: PUSH
50808: LD_STRING l
50810: EQUAL
50811: IFFALSE 50836
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50813: LD_ADDR_VAR 0 2
50817: PUSH
50818: LD_VAR 0 1
50822: PPUSH
50823: CALL_OW 437
50827: PUSH
50828: LD_INT 1
50830: ARRAY
50831: PUSH
50832: LD_INT 4
50834: ARRAY
50835: ST_TO_ADDR
// end ;
50836: LD_VAR 0 2
50840: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50841: LD_INT 0
50843: PPUSH
50844: PPUSH
50845: PPUSH
50846: PPUSH
// if not base_units then
50847: LD_VAR 0 1
50851: NOT
50852: IFFALSE 50856
// exit ;
50854: GO 50943
// result := false ;
50856: LD_ADDR_VAR 0 2
50860: PUSH
50861: LD_INT 0
50863: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50864: LD_ADDR_VAR 0 5
50868: PUSH
50869: LD_VAR 0 1
50873: PPUSH
50874: LD_INT 21
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PPUSH
50884: CALL_OW 72
50888: ST_TO_ADDR
// if not tmp then
50889: LD_VAR 0 5
50893: NOT
50894: IFFALSE 50898
// exit ;
50896: GO 50943
// for i in tmp do
50898: LD_ADDR_VAR 0 3
50902: PUSH
50903: LD_VAR 0 5
50907: PUSH
50908: FOR_IN
50909: IFFALSE 50941
// begin result := EnemyInRange ( i , 22 ) ;
50911: LD_ADDR_VAR 0 2
50915: PUSH
50916: LD_VAR 0 3
50920: PPUSH
50921: LD_INT 22
50923: PPUSH
50924: CALL 48521 0 2
50928: ST_TO_ADDR
// if result then
50929: LD_VAR 0 2
50933: IFFALSE 50939
// exit ;
50935: POP
50936: POP
50937: GO 50943
// end ;
50939: GO 50908
50941: POP
50942: POP
// end ;
50943: LD_VAR 0 2
50947: RET
// export function FilterByTag ( units , tag ) ; begin
50948: LD_INT 0
50950: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50951: LD_ADDR_VAR 0 3
50955: PUSH
50956: LD_VAR 0 1
50960: PPUSH
50961: LD_INT 120
50963: PUSH
50964: LD_VAR 0 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PPUSH
50973: CALL_OW 72
50977: ST_TO_ADDR
// end ;
50978: LD_VAR 0 3
50982: RET
// export function IsDriver ( un ) ; begin
50983: LD_INT 0
50985: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50986: LD_ADDR_VAR 0 2
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: LD_INT 55
50998: PUSH
50999: EMPTY
51000: LIST
51001: PPUSH
51002: CALL_OW 69
51006: IN
51007: ST_TO_ADDR
// end ;
51008: LD_VAR 0 2
51012: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51013: LD_INT 0
51015: PPUSH
51016: PPUSH
// list := [ ] ;
51017: LD_ADDR_VAR 0 5
51021: PUSH
51022: EMPTY
51023: ST_TO_ADDR
// case d of 0 :
51024: LD_VAR 0 3
51028: PUSH
51029: LD_INT 0
51031: DOUBLE
51032: EQUAL
51033: IFTRUE 51037
51035: GO 51170
51037: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51038: LD_ADDR_VAR 0 5
51042: PUSH
51043: LD_VAR 0 1
51047: PUSH
51048: LD_INT 4
51050: MINUS
51051: PUSH
51052: LD_VAR 0 2
51056: PUSH
51057: LD_INT 4
51059: MINUS
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: PUSH
51069: LD_VAR 0 1
51073: PUSH
51074: LD_INT 3
51076: MINUS
51077: PUSH
51078: LD_VAR 0 2
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: LIST
51090: PUSH
51091: LD_VAR 0 1
51095: PUSH
51096: LD_INT 4
51098: PLUS
51099: PUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_INT 4
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: PUSH
51113: LD_VAR 0 1
51117: PUSH
51118: LD_INT 3
51120: PLUS
51121: PUSH
51122: LD_VAR 0 2
51126: PUSH
51127: LD_INT 3
51129: PLUS
51130: PUSH
51131: LD_INT 5
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: PUSH
51139: LD_VAR 0 1
51143: PUSH
51144: LD_VAR 0 2
51148: PUSH
51149: LD_INT 4
51151: PLUS
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: ST_TO_ADDR
// end ; 1 :
51168: GO 51868
51170: LD_INT 1
51172: DOUBLE
51173: EQUAL
51174: IFTRUE 51178
51176: GO 51311
51178: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51179: LD_ADDR_VAR 0 5
51183: PUSH
51184: LD_VAR 0 1
51188: PUSH
51189: LD_VAR 0 2
51193: PUSH
51194: LD_INT 4
51196: MINUS
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: PUSH
51206: LD_VAR 0 1
51210: PUSH
51211: LD_INT 3
51213: MINUS
51214: PUSH
51215: LD_VAR 0 2
51219: PUSH
51220: LD_INT 3
51222: MINUS
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: PUSH
51232: LD_VAR 0 1
51236: PUSH
51237: LD_INT 4
51239: MINUS
51240: PUSH
51241: LD_VAR 0 2
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: PUSH
51254: LD_VAR 0 1
51258: PUSH
51259: LD_VAR 0 2
51263: PUSH
51264: LD_INT 3
51266: PLUS
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: PUSH
51276: LD_VAR 0 1
51280: PUSH
51281: LD_INT 4
51283: PLUS
51284: PUSH
51285: LD_VAR 0 2
51289: PUSH
51290: LD_INT 4
51292: PLUS
51293: PUSH
51294: LD_INT 5
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// end ; 2 :
51309: GO 51868
51311: LD_INT 2
51313: DOUBLE
51314: EQUAL
51315: IFTRUE 51319
51317: GO 51448
51319: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51320: LD_ADDR_VAR 0 5
51324: PUSH
51325: LD_VAR 0 1
51329: PUSH
51330: LD_VAR 0 2
51334: PUSH
51335: LD_INT 3
51337: MINUS
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: PUSH
51347: LD_VAR 0 1
51351: PUSH
51352: LD_INT 4
51354: PLUS
51355: PUSH
51356: LD_VAR 0 2
51360: PUSH
51361: LD_INT 4
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: PUSH
51369: LD_VAR 0 1
51373: PUSH
51374: LD_VAR 0 2
51378: PUSH
51379: LD_INT 4
51381: PLUS
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: PUSH
51391: LD_VAR 0 1
51395: PUSH
51396: LD_INT 3
51398: MINUS
51399: PUSH
51400: LD_VAR 0 2
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: PUSH
51413: LD_VAR 0 1
51417: PUSH
51418: LD_INT 4
51420: MINUS
51421: PUSH
51422: LD_VAR 0 2
51426: PUSH
51427: LD_INT 4
51429: MINUS
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: ST_TO_ADDR
// end ; 3 :
51446: GO 51868
51448: LD_INT 3
51450: DOUBLE
51451: EQUAL
51452: IFTRUE 51456
51454: GO 51589
51456: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51457: LD_ADDR_VAR 0 5
51461: PUSH
51462: LD_VAR 0 1
51466: PUSH
51467: LD_INT 3
51469: PLUS
51470: PUSH
51471: LD_VAR 0 2
51475: PUSH
51476: LD_INT 4
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: PUSH
51484: LD_VAR 0 1
51488: PUSH
51489: LD_INT 4
51491: PLUS
51492: PUSH
51493: LD_VAR 0 2
51497: PUSH
51498: LD_INT 4
51500: PLUS
51501: PUSH
51502: LD_INT 5
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: PUSH
51510: LD_VAR 0 1
51514: PUSH
51515: LD_INT 4
51517: MINUS
51518: PUSH
51519: LD_VAR 0 2
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: PUSH
51532: LD_VAR 0 1
51536: PUSH
51537: LD_VAR 0 2
51541: PUSH
51542: LD_INT 4
51544: MINUS
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: PUSH
51554: LD_VAR 0 1
51558: PUSH
51559: LD_INT 3
51561: MINUS
51562: PUSH
51563: LD_VAR 0 2
51567: PUSH
51568: LD_INT 3
51570: MINUS
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: ST_TO_ADDR
// end ; 4 :
51587: GO 51868
51589: LD_INT 4
51591: DOUBLE
51592: EQUAL
51593: IFTRUE 51597
51595: GO 51730
51597: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51598: LD_ADDR_VAR 0 5
51602: PUSH
51603: LD_VAR 0 1
51607: PUSH
51608: LD_VAR 0 2
51612: PUSH
51613: LD_INT 4
51615: PLUS
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: PUSH
51625: LD_VAR 0 1
51629: PUSH
51630: LD_INT 3
51632: PLUS
51633: PUSH
51634: LD_VAR 0 2
51638: PUSH
51639: LD_INT 3
51641: PLUS
51642: PUSH
51643: LD_INT 5
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: PUSH
51651: LD_VAR 0 1
51655: PUSH
51656: LD_INT 4
51658: PLUS
51659: PUSH
51660: LD_VAR 0 2
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: PUSH
51673: LD_VAR 0 1
51677: PUSH
51678: LD_VAR 0 2
51682: PUSH
51683: LD_INT 3
51685: MINUS
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: LIST
51694: PUSH
51695: LD_VAR 0 1
51699: PUSH
51700: LD_INT 4
51702: MINUS
51703: PUSH
51704: LD_VAR 0 2
51708: PUSH
51709: LD_INT 4
51711: MINUS
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: ST_TO_ADDR
// end ; 5 :
51728: GO 51868
51730: LD_INT 5
51732: DOUBLE
51733: EQUAL
51734: IFTRUE 51738
51736: GO 51867
51738: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51739: LD_ADDR_VAR 0 5
51743: PUSH
51744: LD_VAR 0 1
51748: PUSH
51749: LD_INT 4
51751: MINUS
51752: PUSH
51753: LD_VAR 0 2
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: PUSH
51766: LD_VAR 0 1
51770: PUSH
51771: LD_VAR 0 2
51775: PUSH
51776: LD_INT 4
51778: MINUS
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: PUSH
51788: LD_VAR 0 1
51792: PUSH
51793: LD_INT 4
51795: PLUS
51796: PUSH
51797: LD_VAR 0 2
51801: PUSH
51802: LD_INT 4
51804: PLUS
51805: PUSH
51806: LD_INT 5
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: PUSH
51814: LD_VAR 0 1
51818: PUSH
51819: LD_INT 3
51821: PLUS
51822: PUSH
51823: LD_VAR 0 2
51827: PUSH
51828: LD_INT 4
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: PUSH
51836: LD_VAR 0 1
51840: PUSH
51841: LD_VAR 0 2
51845: PUSH
51846: LD_INT 3
51848: PLUS
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// end ; end ;
51865: GO 51868
51867: POP
// result := list ;
51868: LD_ADDR_VAR 0 4
51872: PUSH
51873: LD_VAR 0 5
51877: ST_TO_ADDR
// end ;
51878: LD_VAR 0 4
51882: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51883: LD_INT 0
51885: PPUSH
51886: PPUSH
51887: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51888: LD_VAR 0 1
51892: NOT
51893: PUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: LD_INT 4
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: IN
51917: NOT
51918: OR
51919: IFFALSE 51923
// exit ;
51921: GO 52006
// tmp := [ ] ;
51923: LD_ADDR_VAR 0 5
51927: PUSH
51928: EMPTY
51929: ST_TO_ADDR
// for i in units do
51930: LD_ADDR_VAR 0 4
51934: PUSH
51935: LD_VAR 0 1
51939: PUSH
51940: FOR_IN
51941: IFFALSE 51975
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51943: LD_ADDR_VAR 0 5
51947: PUSH
51948: LD_VAR 0 5
51952: PPUSH
51953: LD_VAR 0 4
51957: PPUSH
51958: LD_VAR 0 2
51962: PPUSH
51963: CALL_OW 259
51967: PPUSH
51968: CALL 53379 0 2
51972: ST_TO_ADDR
51973: GO 51940
51975: POP
51976: POP
// if not tmp then
51977: LD_VAR 0 5
51981: NOT
51982: IFFALSE 51986
// exit ;
51984: GO 52006
// result := SortListByListDesc ( units , tmp ) ;
51986: LD_ADDR_VAR 0 3
51990: PUSH
51991: LD_VAR 0 1
51995: PPUSH
51996: LD_VAR 0 5
52000: PPUSH
52001: CALL_OW 77
52005: ST_TO_ADDR
// end ;
52006: LD_VAR 0 3
52010: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52011: LD_INT 0
52013: PPUSH
52014: PPUSH
52015: PPUSH
// result := false ;
52016: LD_ADDR_VAR 0 3
52020: PUSH
52021: LD_INT 0
52023: ST_TO_ADDR
// if not building then
52024: LD_VAR 0 2
52028: NOT
52029: IFFALSE 52033
// exit ;
52031: GO 52171
// x := GetX ( building ) ;
52033: LD_ADDR_VAR 0 4
52037: PUSH
52038: LD_VAR 0 2
52042: PPUSH
52043: CALL_OW 250
52047: ST_TO_ADDR
// y := GetY ( building ) ;
52048: LD_ADDR_VAR 0 5
52052: PUSH
52053: LD_VAR 0 2
52057: PPUSH
52058: CALL_OW 251
52062: ST_TO_ADDR
// if not x or not y then
52063: LD_VAR 0 4
52067: NOT
52068: PUSH
52069: LD_VAR 0 5
52073: NOT
52074: OR
52075: IFFALSE 52079
// exit ;
52077: GO 52171
// if GetTaskList ( unit ) then
52079: LD_VAR 0 1
52083: PPUSH
52084: CALL_OW 437
52088: IFFALSE 52171
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52090: LD_STRING e
52092: PUSH
52093: LD_VAR 0 1
52097: PPUSH
52098: CALL_OW 437
52102: PUSH
52103: LD_INT 1
52105: ARRAY
52106: PUSH
52107: LD_INT 1
52109: ARRAY
52110: EQUAL
52111: PUSH
52112: LD_VAR 0 4
52116: PUSH
52117: LD_VAR 0 1
52121: PPUSH
52122: CALL_OW 437
52126: PUSH
52127: LD_INT 1
52129: ARRAY
52130: PUSH
52131: LD_INT 2
52133: ARRAY
52134: EQUAL
52135: AND
52136: PUSH
52137: LD_VAR 0 5
52141: PUSH
52142: LD_VAR 0 1
52146: PPUSH
52147: CALL_OW 437
52151: PUSH
52152: LD_INT 1
52154: ARRAY
52155: PUSH
52156: LD_INT 3
52158: ARRAY
52159: EQUAL
52160: AND
52161: IFFALSE 52171
// result := true end ;
52163: LD_ADDR_VAR 0 3
52167: PUSH
52168: LD_INT 1
52170: ST_TO_ADDR
// end ;
52171: LD_VAR 0 3
52175: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52176: LD_INT 0
52178: PPUSH
// result := false ;
52179: LD_ADDR_VAR 0 4
52183: PUSH
52184: LD_INT 0
52186: ST_TO_ADDR
// if GetTaskList ( unit ) then
52187: LD_VAR 0 1
52191: PPUSH
52192: CALL_OW 437
52196: IFFALSE 52279
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52198: LD_STRING M
52200: PUSH
52201: LD_VAR 0 1
52205: PPUSH
52206: CALL_OW 437
52210: PUSH
52211: LD_INT 1
52213: ARRAY
52214: PUSH
52215: LD_INT 1
52217: ARRAY
52218: EQUAL
52219: PUSH
52220: LD_VAR 0 2
52224: PUSH
52225: LD_VAR 0 1
52229: PPUSH
52230: CALL_OW 437
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: PUSH
52239: LD_INT 2
52241: ARRAY
52242: EQUAL
52243: AND
52244: PUSH
52245: LD_VAR 0 3
52249: PUSH
52250: LD_VAR 0 1
52254: PPUSH
52255: CALL_OW 437
52259: PUSH
52260: LD_INT 1
52262: ARRAY
52263: PUSH
52264: LD_INT 3
52266: ARRAY
52267: EQUAL
52268: AND
52269: IFFALSE 52279
// result := true ;
52271: LD_ADDR_VAR 0 4
52275: PUSH
52276: LD_INT 1
52278: ST_TO_ADDR
// end ; end ;
52279: LD_VAR 0 4
52283: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52284: LD_INT 0
52286: PPUSH
52287: PPUSH
52288: PPUSH
52289: PPUSH
// if not unit or not area then
52290: LD_VAR 0 1
52294: NOT
52295: PUSH
52296: LD_VAR 0 2
52300: NOT
52301: OR
52302: IFFALSE 52306
// exit ;
52304: GO 52482
// tmp := AreaToList ( area , i ) ;
52306: LD_ADDR_VAR 0 6
52310: PUSH
52311: LD_VAR 0 2
52315: PPUSH
52316: LD_VAR 0 5
52320: PPUSH
52321: CALL_OW 517
52325: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52326: LD_ADDR_VAR 0 5
52330: PUSH
52331: DOUBLE
52332: LD_INT 1
52334: DEC
52335: ST_TO_ADDR
52336: LD_VAR 0 6
52340: PUSH
52341: LD_INT 1
52343: ARRAY
52344: PUSH
52345: FOR_TO
52346: IFFALSE 52480
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52348: LD_ADDR_VAR 0 7
52352: PUSH
52353: LD_VAR 0 6
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: PUSH
52362: LD_VAR 0 5
52366: ARRAY
52367: PUSH
52368: LD_VAR 0 6
52372: PUSH
52373: LD_INT 2
52375: ARRAY
52376: PUSH
52377: LD_VAR 0 5
52381: ARRAY
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52387: LD_INT 92
52389: PUSH
52390: LD_VAR 0 7
52394: PUSH
52395: LD_INT 1
52397: ARRAY
52398: PUSH
52399: LD_VAR 0 7
52403: PUSH
52404: LD_INT 2
52406: ARRAY
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: PPUSH
52417: CALL_OW 69
52421: PUSH
52422: LD_INT 0
52424: EQUAL
52425: IFFALSE 52478
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52427: LD_VAR 0 1
52431: PPUSH
52432: LD_VAR 0 7
52436: PUSH
52437: LD_INT 1
52439: ARRAY
52440: PPUSH
52441: LD_VAR 0 7
52445: PUSH
52446: LD_INT 2
52448: ARRAY
52449: PPUSH
52450: LD_VAR 0 3
52454: PPUSH
52455: CALL_OW 48
// result := IsPlaced ( unit ) ;
52459: LD_ADDR_VAR 0 4
52463: PUSH
52464: LD_VAR 0 1
52468: PPUSH
52469: CALL_OW 305
52473: ST_TO_ADDR
// exit ;
52474: POP
52475: POP
52476: GO 52482
// end ; end ;
52478: GO 52345
52480: POP
52481: POP
// end ;
52482: LD_VAR 0 4
52486: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52487: LD_INT 0
52489: PPUSH
52490: PPUSH
52491: PPUSH
// if not side or side > 8 then
52492: LD_VAR 0 1
52496: NOT
52497: PUSH
52498: LD_VAR 0 1
52502: PUSH
52503: LD_INT 8
52505: GREATER
52506: OR
52507: IFFALSE 52511
// exit ;
52509: GO 52698
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52511: LD_ADDR_VAR 0 4
52515: PUSH
52516: LD_INT 22
52518: PUSH
52519: LD_VAR 0 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 21
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PPUSH
52542: CALL_OW 69
52546: ST_TO_ADDR
// if not tmp then
52547: LD_VAR 0 4
52551: NOT
52552: IFFALSE 52556
// exit ;
52554: GO 52698
// enable_addtolog := true ;
52556: LD_ADDR_OWVAR 81
52560: PUSH
52561: LD_INT 1
52563: ST_TO_ADDR
// AddToLog ( [ ) ;
52564: LD_STRING [
52566: PPUSH
52567: CALL_OW 561
// for i in tmp do
52571: LD_ADDR_VAR 0 3
52575: PUSH
52576: LD_VAR 0 4
52580: PUSH
52581: FOR_IN
52582: IFFALSE 52689
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52584: LD_STRING [
52586: PUSH
52587: LD_VAR 0 3
52591: PPUSH
52592: CALL_OW 266
52596: STR
52597: PUSH
52598: LD_STRING , 
52600: STR
52601: PUSH
52602: LD_VAR 0 3
52606: PPUSH
52607: CALL_OW 250
52611: STR
52612: PUSH
52613: LD_STRING , 
52615: STR
52616: PUSH
52617: LD_VAR 0 3
52621: PPUSH
52622: CALL_OW 251
52626: STR
52627: PUSH
52628: LD_STRING , 
52630: STR
52631: PUSH
52632: LD_VAR 0 3
52636: PPUSH
52637: CALL_OW 254
52641: STR
52642: PUSH
52643: LD_STRING , 
52645: STR
52646: PUSH
52647: LD_VAR 0 3
52651: PPUSH
52652: LD_INT 1
52654: PPUSH
52655: CALL_OW 268
52659: STR
52660: PUSH
52661: LD_STRING , 
52663: STR
52664: PUSH
52665: LD_VAR 0 3
52669: PPUSH
52670: LD_INT 2
52672: PPUSH
52673: CALL_OW 268
52677: STR
52678: PUSH
52679: LD_STRING ],
52681: STR
52682: PPUSH
52683: CALL_OW 561
// end ;
52687: GO 52581
52689: POP
52690: POP
// AddToLog ( ]; ) ;
52691: LD_STRING ];
52693: PPUSH
52694: CALL_OW 561
// end ;
52698: LD_VAR 0 2
52702: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52703: LD_INT 0
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
// if not area or not rate or not max then
52710: LD_VAR 0 1
52714: NOT
52715: PUSH
52716: LD_VAR 0 2
52720: NOT
52721: OR
52722: PUSH
52723: LD_VAR 0 4
52727: NOT
52728: OR
52729: IFFALSE 52733
// exit ;
52731: GO 52922
// while 1 do
52733: LD_INT 1
52735: IFFALSE 52922
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52737: LD_ADDR_VAR 0 9
52741: PUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: LD_INT 1
52749: PPUSH
52750: CALL_OW 287
52754: PUSH
52755: LD_INT 10
52757: MUL
52758: ST_TO_ADDR
// r := rate / 10 ;
52759: LD_ADDR_VAR 0 7
52763: PUSH
52764: LD_VAR 0 2
52768: PUSH
52769: LD_INT 10
52771: DIVREAL
52772: ST_TO_ADDR
// time := 1 1$00 ;
52773: LD_ADDR_VAR 0 8
52777: PUSH
52778: LD_INT 2100
52780: ST_TO_ADDR
// if amount < min then
52781: LD_VAR 0 9
52785: PUSH
52786: LD_VAR 0 3
52790: LESS
52791: IFFALSE 52809
// r := r * 2 else
52793: LD_ADDR_VAR 0 7
52797: PUSH
52798: LD_VAR 0 7
52802: PUSH
52803: LD_INT 2
52805: MUL
52806: ST_TO_ADDR
52807: GO 52835
// if amount > max then
52809: LD_VAR 0 9
52813: PUSH
52814: LD_VAR 0 4
52818: GREATER
52819: IFFALSE 52835
// r := r / 2 ;
52821: LD_ADDR_VAR 0 7
52825: PUSH
52826: LD_VAR 0 7
52830: PUSH
52831: LD_INT 2
52833: DIVREAL
52834: ST_TO_ADDR
// time := time / r ;
52835: LD_ADDR_VAR 0 8
52839: PUSH
52840: LD_VAR 0 8
52844: PUSH
52845: LD_VAR 0 7
52849: DIVREAL
52850: ST_TO_ADDR
// if time < 0 then
52851: LD_VAR 0 8
52855: PUSH
52856: LD_INT 0
52858: LESS
52859: IFFALSE 52876
// time := time * - 1 ;
52861: LD_ADDR_VAR 0 8
52865: PUSH
52866: LD_VAR 0 8
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: MUL
52875: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52876: LD_VAR 0 8
52880: PUSH
52881: LD_INT 35
52883: PPUSH
52884: LD_INT 875
52886: PPUSH
52887: CALL_OW 12
52891: PLUS
52892: PPUSH
52893: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52897: LD_INT 1
52899: PPUSH
52900: LD_INT 5
52902: PPUSH
52903: CALL_OW 12
52907: PPUSH
52908: LD_VAR 0 1
52912: PPUSH
52913: LD_INT 1
52915: PPUSH
52916: CALL_OW 55
// end ;
52920: GO 52733
// end ;
52922: LD_VAR 0 5
52926: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52927: LD_INT 0
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
52935: PPUSH
52936: PPUSH
// if not turrets or not factories then
52937: LD_VAR 0 1
52941: NOT
52942: PUSH
52943: LD_VAR 0 2
52947: NOT
52948: OR
52949: IFFALSE 52953
// exit ;
52951: GO 53260
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52953: LD_ADDR_VAR 0 10
52957: PUSH
52958: LD_INT 5
52960: PUSH
52961: LD_INT 6
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 4
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 3
52980: PUSH
52981: LD_INT 5
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 24
52995: PUSH
52996: LD_INT 25
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 23
53005: PUSH
53006: LD_INT 27
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 42
53019: PUSH
53020: LD_INT 43
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 44
53029: PUSH
53030: LD_INT 46
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 45
53039: PUSH
53040: LD_INT 47
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: ST_TO_ADDR
// result := [ ] ;
53057: LD_ADDR_VAR 0 3
53061: PUSH
53062: EMPTY
53063: ST_TO_ADDR
// for i in turrets do
53064: LD_ADDR_VAR 0 4
53068: PUSH
53069: LD_VAR 0 1
53073: PUSH
53074: FOR_IN
53075: IFFALSE 53258
// begin nat := GetNation ( i ) ;
53077: LD_ADDR_VAR 0 7
53081: PUSH
53082: LD_VAR 0 4
53086: PPUSH
53087: CALL_OW 248
53091: ST_TO_ADDR
// weapon := 0 ;
53092: LD_ADDR_VAR 0 8
53096: PUSH
53097: LD_INT 0
53099: ST_TO_ADDR
// if not nat then
53100: LD_VAR 0 7
53104: NOT
53105: IFFALSE 53109
// continue ;
53107: GO 53074
// for j in list [ nat ] do
53109: LD_ADDR_VAR 0 5
53113: PUSH
53114: LD_VAR 0 10
53118: PUSH
53119: LD_VAR 0 7
53123: ARRAY
53124: PUSH
53125: FOR_IN
53126: IFFALSE 53167
// if GetBWeapon ( i ) = j [ 1 ] then
53128: LD_VAR 0 4
53132: PPUSH
53133: CALL_OW 269
53137: PUSH
53138: LD_VAR 0 5
53142: PUSH
53143: LD_INT 1
53145: ARRAY
53146: EQUAL
53147: IFFALSE 53165
// begin weapon := j [ 2 ] ;
53149: LD_ADDR_VAR 0 8
53153: PUSH
53154: LD_VAR 0 5
53158: PUSH
53159: LD_INT 2
53161: ARRAY
53162: ST_TO_ADDR
// break ;
53163: GO 53167
// end ;
53165: GO 53125
53167: POP
53168: POP
// if not weapon then
53169: LD_VAR 0 8
53173: NOT
53174: IFFALSE 53178
// continue ;
53176: GO 53074
// for k in factories do
53178: LD_ADDR_VAR 0 6
53182: PUSH
53183: LD_VAR 0 2
53187: PUSH
53188: FOR_IN
53189: IFFALSE 53254
// begin weapons := AvailableWeaponList ( k ) ;
53191: LD_ADDR_VAR 0 9
53195: PUSH
53196: LD_VAR 0 6
53200: PPUSH
53201: CALL_OW 478
53205: ST_TO_ADDR
// if not weapons then
53206: LD_VAR 0 9
53210: NOT
53211: IFFALSE 53215
// continue ;
53213: GO 53188
// if weapon in weapons then
53215: LD_VAR 0 8
53219: PUSH
53220: LD_VAR 0 9
53224: IN
53225: IFFALSE 53252
// begin result := [ i , weapon ] ;
53227: LD_ADDR_VAR 0 3
53231: PUSH
53232: LD_VAR 0 4
53236: PUSH
53237: LD_VAR 0 8
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// exit ;
53246: POP
53247: POP
53248: POP
53249: POP
53250: GO 53260
// end ; end ;
53252: GO 53188
53254: POP
53255: POP
// end ;
53256: GO 53074
53258: POP
53259: POP
// end ;
53260: LD_VAR 0 3
53264: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53265: LD_INT 0
53267: PPUSH
// if not side or side > 8 then
53268: LD_VAR 0 3
53272: NOT
53273: PUSH
53274: LD_VAR 0 3
53278: PUSH
53279: LD_INT 8
53281: GREATER
53282: OR
53283: IFFALSE 53287
// exit ;
53285: GO 53346
// if not range then
53287: LD_VAR 0 4
53291: NOT
53292: IFFALSE 53303
// range := - 12 ;
53294: LD_ADDR_VAR 0 4
53298: PUSH
53299: LD_INT 12
53301: NEG
53302: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53303: LD_VAR 0 1
53307: PPUSH
53308: LD_VAR 0 2
53312: PPUSH
53313: LD_VAR 0 3
53317: PPUSH
53318: LD_VAR 0 4
53322: PPUSH
53323: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53327: LD_VAR 0 1
53331: PPUSH
53332: LD_VAR 0 2
53336: PPUSH
53337: LD_VAR 0 3
53341: PPUSH
53342: CALL_OW 331
// end ;
53346: LD_VAR 0 5
53350: RET
// export function Video ( mode ) ; begin
53351: LD_INT 0
53353: PPUSH
// ingame_video = mode ;
53354: LD_ADDR_OWVAR 52
53358: PUSH
53359: LD_VAR 0 1
53363: ST_TO_ADDR
// interface_hidden = mode ;
53364: LD_ADDR_OWVAR 54
53368: PUSH
53369: LD_VAR 0 1
53373: ST_TO_ADDR
// end ;
53374: LD_VAR 0 2
53378: RET
// export function Join ( array , element ) ; begin
53379: LD_INT 0
53381: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53382: LD_ADDR_VAR 0 3
53386: PUSH
53387: LD_VAR 0 1
53391: PPUSH
53392: LD_VAR 0 1
53396: PUSH
53397: LD_INT 1
53399: PLUS
53400: PPUSH
53401: LD_VAR 0 2
53405: PPUSH
53406: CALL_OW 1
53410: ST_TO_ADDR
// end ;
53411: LD_VAR 0 3
53415: RET
// export function JoinUnion ( array , element ) ; begin
53416: LD_INT 0
53418: PPUSH
// result := array union element ;
53419: LD_ADDR_VAR 0 3
53423: PUSH
53424: LD_VAR 0 1
53428: PUSH
53429: LD_VAR 0 2
53433: UNION
53434: ST_TO_ADDR
// end ;
53435: LD_VAR 0 3
53439: RET
// export function GetBehemoths ( side ) ; begin
53440: LD_INT 0
53442: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53443: LD_ADDR_VAR 0 2
53447: PUSH
53448: LD_INT 22
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 31
53462: PUSH
53463: LD_INT 25
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PPUSH
53474: CALL_OW 69
53478: ST_TO_ADDR
// end ;
53479: LD_VAR 0 2
53483: RET
// export function Shuffle ( array ) ; var i , index ; begin
53484: LD_INT 0
53486: PPUSH
53487: PPUSH
53488: PPUSH
// result := [ ] ;
53489: LD_ADDR_VAR 0 2
53493: PUSH
53494: EMPTY
53495: ST_TO_ADDR
// if not array then
53496: LD_VAR 0 1
53500: NOT
53501: IFFALSE 53505
// exit ;
53503: GO 53604
// Randomize ;
53505: CALL_OW 10
// for i = array downto 1 do
53509: LD_ADDR_VAR 0 3
53513: PUSH
53514: DOUBLE
53515: LD_VAR 0 1
53519: INC
53520: ST_TO_ADDR
53521: LD_INT 1
53523: PUSH
53524: FOR_DOWNTO
53525: IFFALSE 53602
// begin index := rand ( 1 , array ) ;
53527: LD_ADDR_VAR 0 4
53531: PUSH
53532: LD_INT 1
53534: PPUSH
53535: LD_VAR 0 1
53539: PPUSH
53540: CALL_OW 12
53544: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53545: LD_ADDR_VAR 0 2
53549: PUSH
53550: LD_VAR 0 2
53554: PPUSH
53555: LD_VAR 0 2
53559: PUSH
53560: LD_INT 1
53562: PLUS
53563: PPUSH
53564: LD_VAR 0 1
53568: PUSH
53569: LD_VAR 0 4
53573: ARRAY
53574: PPUSH
53575: CALL_OW 2
53579: ST_TO_ADDR
// array := Delete ( array , index ) ;
53580: LD_ADDR_VAR 0 1
53584: PUSH
53585: LD_VAR 0 1
53589: PPUSH
53590: LD_VAR 0 4
53594: PPUSH
53595: CALL_OW 3
53599: ST_TO_ADDR
// end ;
53600: GO 53524
53602: POP
53603: POP
// end ;
53604: LD_VAR 0 2
53608: RET
// export function GetBaseMaterials ( base ) ; begin
53609: LD_INT 0
53611: PPUSH
// result := [ 0 , 0 , 0 ] ;
53612: LD_ADDR_VAR 0 2
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// if not base then
53631: LD_VAR 0 1
53635: NOT
53636: IFFALSE 53640
// exit ;
53638: GO 53689
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53640: LD_ADDR_VAR 0 2
53644: PUSH
53645: LD_VAR 0 1
53649: PPUSH
53650: LD_INT 1
53652: PPUSH
53653: CALL_OW 275
53657: PUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: LD_INT 2
53665: PPUSH
53666: CALL_OW 275
53670: PUSH
53671: LD_VAR 0 1
53675: PPUSH
53676: LD_INT 3
53678: PPUSH
53679: CALL_OW 275
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// end ;
53689: LD_VAR 0 2
53693: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53694: LD_INT 0
53696: PPUSH
53697: PPUSH
// result := array ;
53698: LD_ADDR_VAR 0 3
53702: PUSH
53703: LD_VAR 0 1
53707: ST_TO_ADDR
// if size >= result then
53708: LD_VAR 0 2
53712: PUSH
53713: LD_VAR 0 3
53717: GREATEREQUAL
53718: IFFALSE 53722
// exit ;
53720: GO 53772
// if size then
53722: LD_VAR 0 2
53726: IFFALSE 53772
// for i := array downto size do
53728: LD_ADDR_VAR 0 4
53732: PUSH
53733: DOUBLE
53734: LD_VAR 0 1
53738: INC
53739: ST_TO_ADDR
53740: LD_VAR 0 2
53744: PUSH
53745: FOR_DOWNTO
53746: IFFALSE 53770
// result := Delete ( result , result ) ;
53748: LD_ADDR_VAR 0 3
53752: PUSH
53753: LD_VAR 0 3
53757: PPUSH
53758: LD_VAR 0 3
53762: PPUSH
53763: CALL_OW 3
53767: ST_TO_ADDR
53768: GO 53745
53770: POP
53771: POP
// end ;
53772: LD_VAR 0 3
53776: RET
// export function ComExit ( unit ) ; var tmp ; begin
53777: LD_INT 0
53779: PPUSH
53780: PPUSH
// if not IsInUnit ( unit ) then
53781: LD_VAR 0 1
53785: PPUSH
53786: CALL_OW 310
53790: NOT
53791: IFFALSE 53795
// exit ;
53793: GO 53855
// tmp := IsInUnit ( unit ) ;
53795: LD_ADDR_VAR 0 3
53799: PUSH
53800: LD_VAR 0 1
53804: PPUSH
53805: CALL_OW 310
53809: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53810: LD_VAR 0 3
53814: PPUSH
53815: CALL_OW 247
53819: PUSH
53820: LD_INT 2
53822: EQUAL
53823: IFFALSE 53836
// ComExitVehicle ( unit ) else
53825: LD_VAR 0 1
53829: PPUSH
53830: CALL_OW 121
53834: GO 53845
// ComExitBuilding ( unit ) ;
53836: LD_VAR 0 1
53840: PPUSH
53841: CALL_OW 122
// result := tmp ;
53845: LD_ADDR_VAR 0 2
53849: PUSH
53850: LD_VAR 0 3
53854: ST_TO_ADDR
// end ;
53855: LD_VAR 0 2
53859: RET
// export function ComExitAll ( units ) ; var i ; begin
53860: LD_INT 0
53862: PPUSH
53863: PPUSH
// if not units then
53864: LD_VAR 0 1
53868: NOT
53869: IFFALSE 53873
// exit ;
53871: GO 53899
// for i in units do
53873: LD_ADDR_VAR 0 3
53877: PUSH
53878: LD_VAR 0 1
53882: PUSH
53883: FOR_IN
53884: IFFALSE 53897
// ComExit ( i ) ;
53886: LD_VAR 0 3
53890: PPUSH
53891: CALL 53777 0 1
53895: GO 53883
53897: POP
53898: POP
// end ;
53899: LD_VAR 0 2
53903: RET
// export function ResetHc ; begin
53904: LD_INT 0
53906: PPUSH
// InitHc ;
53907: CALL_OW 19
// hc_importance := 0 ;
53911: LD_ADDR_OWVAR 32
53915: PUSH
53916: LD_INT 0
53918: ST_TO_ADDR
// end ;
53919: LD_VAR 0 1
53923: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53924: LD_INT 0
53926: PPUSH
53927: PPUSH
53928: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53929: LD_ADDR_VAR 0 6
53933: PUSH
53934: LD_VAR 0 1
53938: PUSH
53939: LD_VAR 0 3
53943: PLUS
53944: PUSH
53945: LD_INT 2
53947: DIV
53948: ST_TO_ADDR
// if _x < 0 then
53949: LD_VAR 0 6
53953: PUSH
53954: LD_INT 0
53956: LESS
53957: IFFALSE 53974
// _x := _x * - 1 ;
53959: LD_ADDR_VAR 0 6
53963: PUSH
53964: LD_VAR 0 6
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: MUL
53973: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53974: LD_ADDR_VAR 0 7
53978: PUSH
53979: LD_VAR 0 2
53983: PUSH
53984: LD_VAR 0 4
53988: PLUS
53989: PUSH
53990: LD_INT 2
53992: DIV
53993: ST_TO_ADDR
// if _y < 0 then
53994: LD_VAR 0 7
53998: PUSH
53999: LD_INT 0
54001: LESS
54002: IFFALSE 54019
// _y := _y * - 1 ;
54004: LD_ADDR_VAR 0 7
54008: PUSH
54009: LD_VAR 0 7
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: MUL
54018: ST_TO_ADDR
// result := [ _x , _y ] ;
54019: LD_ADDR_VAR 0 5
54023: PUSH
54024: LD_VAR 0 6
54028: PUSH
54029: LD_VAR 0 7
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// end ;
54038: LD_VAR 0 5
54042: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54043: LD_INT 0
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
// task := GetTaskList ( unit ) ;
54049: LD_ADDR_VAR 0 7
54053: PUSH
54054: LD_VAR 0 1
54058: PPUSH
54059: CALL_OW 437
54063: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54064: LD_VAR 0 7
54068: NOT
54069: PUSH
54070: LD_VAR 0 1
54074: PPUSH
54075: LD_VAR 0 2
54079: PPUSH
54080: CALL_OW 308
54084: NOT
54085: AND
54086: IFFALSE 54090
// exit ;
54088: GO 54208
// if IsInArea ( unit , area ) then
54090: LD_VAR 0 1
54094: PPUSH
54095: LD_VAR 0 2
54099: PPUSH
54100: CALL_OW 308
54104: IFFALSE 54122
// begin ComMoveToArea ( unit , goAway ) ;
54106: LD_VAR 0 1
54110: PPUSH
54111: LD_VAR 0 3
54115: PPUSH
54116: CALL_OW 113
// exit ;
54120: GO 54208
// end ; if task [ 1 ] [ 1 ] <> M then
54122: LD_VAR 0 7
54126: PUSH
54127: LD_INT 1
54129: ARRAY
54130: PUSH
54131: LD_INT 1
54133: ARRAY
54134: PUSH
54135: LD_STRING M
54137: NONEQUAL
54138: IFFALSE 54142
// exit ;
54140: GO 54208
// x := task [ 1 ] [ 2 ] ;
54142: LD_ADDR_VAR 0 5
54146: PUSH
54147: LD_VAR 0 7
54151: PUSH
54152: LD_INT 1
54154: ARRAY
54155: PUSH
54156: LD_INT 2
54158: ARRAY
54159: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54160: LD_ADDR_VAR 0 6
54164: PUSH
54165: LD_VAR 0 7
54169: PUSH
54170: LD_INT 1
54172: ARRAY
54173: PUSH
54174: LD_INT 3
54176: ARRAY
54177: ST_TO_ADDR
// if InArea ( x , y , area ) then
54178: LD_VAR 0 5
54182: PPUSH
54183: LD_VAR 0 6
54187: PPUSH
54188: LD_VAR 0 2
54192: PPUSH
54193: CALL_OW 309
54197: IFFALSE 54208
// ComStop ( unit ) ;
54199: LD_VAR 0 1
54203: PPUSH
54204: CALL_OW 141
// end ;
54208: LD_VAR 0 4
54212: RET
// export function Abs ( value ) ; begin
54213: LD_INT 0
54215: PPUSH
// result := value ;
54216: LD_ADDR_VAR 0 2
54220: PUSH
54221: LD_VAR 0 1
54225: ST_TO_ADDR
// if value < 0 then
54226: LD_VAR 0 1
54230: PUSH
54231: LD_INT 0
54233: LESS
54234: IFFALSE 54251
// result := value * - 1 ;
54236: LD_ADDR_VAR 0 2
54240: PUSH
54241: LD_VAR 0 1
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: MUL
54250: ST_TO_ADDR
// end ;
54251: LD_VAR 0 2
54255: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54256: LD_INT 0
54258: PPUSH
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
// if not unit or not building then
54266: LD_VAR 0 1
54270: NOT
54271: PUSH
54272: LD_VAR 0 2
54276: NOT
54277: OR
54278: IFFALSE 54282
// exit ;
54280: GO 54508
// x := GetX ( building ) ;
54282: LD_ADDR_VAR 0 4
54286: PUSH
54287: LD_VAR 0 2
54291: PPUSH
54292: CALL_OW 250
54296: ST_TO_ADDR
// y := GetY ( building ) ;
54297: LD_ADDR_VAR 0 6
54301: PUSH
54302: LD_VAR 0 2
54306: PPUSH
54307: CALL_OW 251
54311: ST_TO_ADDR
// d := GetDir ( building ) ;
54312: LD_ADDR_VAR 0 8
54316: PUSH
54317: LD_VAR 0 2
54321: PPUSH
54322: CALL_OW 254
54326: ST_TO_ADDR
// r := 4 ;
54327: LD_ADDR_VAR 0 9
54331: PUSH
54332: LD_INT 4
54334: ST_TO_ADDR
// for i := 1 to 5 do
54335: LD_ADDR_VAR 0 10
54339: PUSH
54340: DOUBLE
54341: LD_INT 1
54343: DEC
54344: ST_TO_ADDR
54345: LD_INT 5
54347: PUSH
54348: FOR_TO
54349: IFFALSE 54506
// begin _x := ShiftX ( x , d , r + i ) ;
54351: LD_ADDR_VAR 0 5
54355: PUSH
54356: LD_VAR 0 4
54360: PPUSH
54361: LD_VAR 0 8
54365: PPUSH
54366: LD_VAR 0 9
54370: PUSH
54371: LD_VAR 0 10
54375: PLUS
54376: PPUSH
54377: CALL_OW 272
54381: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54382: LD_ADDR_VAR 0 7
54386: PUSH
54387: LD_VAR 0 6
54391: PPUSH
54392: LD_VAR 0 8
54396: PPUSH
54397: LD_VAR 0 9
54401: PUSH
54402: LD_VAR 0 10
54406: PLUS
54407: PPUSH
54408: CALL_OW 273
54412: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54413: LD_VAR 0 5
54417: PPUSH
54418: LD_VAR 0 7
54422: PPUSH
54423: CALL_OW 488
54427: PUSH
54428: LD_VAR 0 5
54432: PPUSH
54433: LD_VAR 0 7
54437: PPUSH
54438: CALL_OW 428
54442: PPUSH
54443: CALL_OW 247
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: IN
54458: NOT
54459: AND
54460: IFFALSE 54504
// begin ComMoveXY ( unit , _x , _y ) ;
54462: LD_VAR 0 1
54466: PPUSH
54467: LD_VAR 0 5
54471: PPUSH
54472: LD_VAR 0 7
54476: PPUSH
54477: CALL_OW 111
// result := [ _x , _y ] ;
54481: LD_ADDR_VAR 0 3
54485: PUSH
54486: LD_VAR 0 5
54490: PUSH
54491: LD_VAR 0 7
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// exit ;
54500: POP
54501: POP
54502: GO 54508
// end ; end ;
54504: GO 54348
54506: POP
54507: POP
// end ;
54508: LD_VAR 0 3
54512: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54513: LD_INT 0
54515: PPUSH
54516: PPUSH
54517: PPUSH
// result := 0 ;
54518: LD_ADDR_VAR 0 3
54522: PUSH
54523: LD_INT 0
54525: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54526: LD_VAR 0 1
54530: PUSH
54531: LD_INT 0
54533: LESS
54534: PUSH
54535: LD_VAR 0 1
54539: PUSH
54540: LD_INT 8
54542: GREATER
54543: OR
54544: PUSH
54545: LD_VAR 0 2
54549: PUSH
54550: LD_INT 0
54552: LESS
54553: OR
54554: PUSH
54555: LD_VAR 0 2
54559: PUSH
54560: LD_INT 8
54562: GREATER
54563: OR
54564: IFFALSE 54568
// exit ;
54566: GO 54643
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54568: LD_ADDR_VAR 0 4
54572: PUSH
54573: LD_INT 22
54575: PUSH
54576: LD_VAR 0 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PPUSH
54585: CALL_OW 69
54589: PUSH
54590: FOR_IN
54591: IFFALSE 54641
// begin un := UnitShoot ( i ) ;
54593: LD_ADDR_VAR 0 5
54597: PUSH
54598: LD_VAR 0 4
54602: PPUSH
54603: CALL_OW 504
54607: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54608: LD_VAR 0 5
54612: PPUSH
54613: CALL_OW 255
54617: PUSH
54618: LD_VAR 0 1
54622: EQUAL
54623: IFFALSE 54639
// begin result := un ;
54625: LD_ADDR_VAR 0 3
54629: PUSH
54630: LD_VAR 0 5
54634: ST_TO_ADDR
// exit ;
54635: POP
54636: POP
54637: GO 54643
// end ; end ;
54639: GO 54590
54641: POP
54642: POP
// end ;
54643: LD_VAR 0 3
54647: RET
// export function GetCargoBay ( units ) ; begin
54648: LD_INT 0
54650: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54651: LD_ADDR_VAR 0 2
54655: PUSH
54656: LD_VAR 0 1
54660: PPUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 34
54666: PUSH
54667: LD_INT 12
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 34
54676: PUSH
54677: LD_INT 51
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 34
54686: PUSH
54687: LD_INT 32
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 34
54696: PUSH
54697: LD_INT 89
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: PPUSH
54711: CALL_OW 72
54715: ST_TO_ADDR
// end ;
54716: LD_VAR 0 2
54720: RET
// export function Negate ( value ) ; begin
54721: LD_INT 0
54723: PPUSH
// result := not value ;
54724: LD_ADDR_VAR 0 2
54728: PUSH
54729: LD_VAR 0 1
54733: NOT
54734: ST_TO_ADDR
// end ;
54735: LD_VAR 0 2
54739: RET
// export function Inc ( value ) ; begin
54740: LD_INT 0
54742: PPUSH
// result := value + 1 ;
54743: LD_ADDR_VAR 0 2
54747: PUSH
54748: LD_VAR 0 1
54752: PUSH
54753: LD_INT 1
54755: PLUS
54756: ST_TO_ADDR
// end ;
54757: LD_VAR 0 2
54761: RET
// export function Dec ( value ) ; begin
54762: LD_INT 0
54764: PPUSH
// result := value - 1 ;
54765: LD_ADDR_VAR 0 2
54769: PUSH
54770: LD_VAR 0 1
54774: PUSH
54775: LD_INT 1
54777: MINUS
54778: ST_TO_ADDR
// end ;
54779: LD_VAR 0 2
54783: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54784: LD_INT 0
54786: PPUSH
54787: PPUSH
54788: PPUSH
54789: PPUSH
54790: PPUSH
54791: PPUSH
54792: PPUSH
54793: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54794: LD_VAR 0 1
54798: PPUSH
54799: LD_VAR 0 2
54803: PPUSH
54804: CALL_OW 488
54808: NOT
54809: PUSH
54810: LD_VAR 0 3
54814: PPUSH
54815: LD_VAR 0 4
54819: PPUSH
54820: CALL_OW 488
54824: NOT
54825: OR
54826: IFFALSE 54839
// begin result := - 1 ;
54828: LD_ADDR_VAR 0 5
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: ST_TO_ADDR
// exit ;
54837: GO 55074
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54839: LD_ADDR_VAR 0 12
54843: PUSH
54844: LD_VAR 0 1
54848: PPUSH
54849: LD_VAR 0 2
54853: PPUSH
54854: LD_VAR 0 3
54858: PPUSH
54859: LD_VAR 0 4
54863: PPUSH
54864: CALL 53924 0 4
54868: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54869: LD_ADDR_VAR 0 11
54873: PUSH
54874: LD_VAR 0 1
54878: PPUSH
54879: LD_VAR 0 2
54883: PPUSH
54884: LD_VAR 0 12
54888: PUSH
54889: LD_INT 1
54891: ARRAY
54892: PPUSH
54893: LD_VAR 0 12
54897: PUSH
54898: LD_INT 2
54900: ARRAY
54901: PPUSH
54902: CALL_OW 298
54906: ST_TO_ADDR
// distance := 9999 ;
54907: LD_ADDR_VAR 0 10
54911: PUSH
54912: LD_INT 9999
54914: ST_TO_ADDR
// for i := 0 to 5 do
54915: LD_ADDR_VAR 0 6
54919: PUSH
54920: DOUBLE
54921: LD_INT 0
54923: DEC
54924: ST_TO_ADDR
54925: LD_INT 5
54927: PUSH
54928: FOR_TO
54929: IFFALSE 55072
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54931: LD_ADDR_VAR 0 7
54935: PUSH
54936: LD_VAR 0 1
54940: PPUSH
54941: LD_VAR 0 6
54945: PPUSH
54946: LD_VAR 0 11
54950: PPUSH
54951: CALL_OW 272
54955: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54956: LD_ADDR_VAR 0 8
54960: PUSH
54961: LD_VAR 0 2
54965: PPUSH
54966: LD_VAR 0 6
54970: PPUSH
54971: LD_VAR 0 11
54975: PPUSH
54976: CALL_OW 273
54980: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54981: LD_VAR 0 7
54985: PPUSH
54986: LD_VAR 0 8
54990: PPUSH
54991: CALL_OW 488
54995: NOT
54996: IFFALSE 55000
// continue ;
54998: GO 54928
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55000: LD_ADDR_VAR 0 9
55004: PUSH
55005: LD_VAR 0 12
55009: PUSH
55010: LD_INT 1
55012: ARRAY
55013: PPUSH
55014: LD_VAR 0 12
55018: PUSH
55019: LD_INT 2
55021: ARRAY
55022: PPUSH
55023: LD_VAR 0 7
55027: PPUSH
55028: LD_VAR 0 8
55032: PPUSH
55033: CALL_OW 298
55037: ST_TO_ADDR
// if tmp < distance then
55038: LD_VAR 0 9
55042: PUSH
55043: LD_VAR 0 10
55047: LESS
55048: IFFALSE 55070
// begin result := i ;
55050: LD_ADDR_VAR 0 5
55054: PUSH
55055: LD_VAR 0 6
55059: ST_TO_ADDR
// distance := tmp ;
55060: LD_ADDR_VAR 0 10
55064: PUSH
55065: LD_VAR 0 9
55069: ST_TO_ADDR
// end ; end ;
55070: GO 54928
55072: POP
55073: POP
// end ;
55074: LD_VAR 0 5
55078: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55079: LD_INT 0
55081: PPUSH
55082: PPUSH
// if not driver or not IsInUnit ( driver ) then
55083: LD_VAR 0 1
55087: NOT
55088: PUSH
55089: LD_VAR 0 1
55093: PPUSH
55094: CALL_OW 310
55098: NOT
55099: OR
55100: IFFALSE 55104
// exit ;
55102: GO 55194
// vehicle := IsInUnit ( driver ) ;
55104: LD_ADDR_VAR 0 3
55108: PUSH
55109: LD_VAR 0 1
55113: PPUSH
55114: CALL_OW 310
55118: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55119: LD_VAR 0 1
55123: PPUSH
55124: LD_STRING \
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: PUSH
55154: LD_STRING E
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_VAR 0 3
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PPUSH
55190: CALL_OW 446
// end ;
55194: LD_VAR 0 2
55198: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55199: LD_INT 0
55201: PPUSH
55202: PPUSH
// if not driver or not IsInUnit ( driver ) then
55203: LD_VAR 0 1
55207: NOT
55208: PUSH
55209: LD_VAR 0 1
55213: PPUSH
55214: CALL_OW 310
55218: NOT
55219: OR
55220: IFFALSE 55224
// exit ;
55222: GO 55314
// vehicle := IsInUnit ( driver ) ;
55224: LD_ADDR_VAR 0 3
55228: PUSH
55229: LD_VAR 0 1
55233: PPUSH
55234: CALL_OW 310
55238: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55239: LD_VAR 0 1
55243: PPUSH
55244: LD_STRING \
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: PUSH
55274: LD_STRING E
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_VAR 0 3
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PPUSH
55310: CALL_OW 447
// end ;
55314: LD_VAR 0 2
55318: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55319: LD_INT 0
55321: PPUSH
55322: PPUSH
55323: PPUSH
// tmp := [ ] ;
55324: LD_ADDR_VAR 0 5
55328: PUSH
55329: EMPTY
55330: ST_TO_ADDR
// for i in units do
55331: LD_ADDR_VAR 0 4
55335: PUSH
55336: LD_VAR 0 1
55340: PUSH
55341: FOR_IN
55342: IFFALSE 55380
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55344: LD_ADDR_VAR 0 5
55348: PUSH
55349: LD_VAR 0 5
55353: PPUSH
55354: LD_VAR 0 5
55358: PUSH
55359: LD_INT 1
55361: PLUS
55362: PPUSH
55363: LD_VAR 0 4
55367: PPUSH
55368: CALL_OW 256
55372: PPUSH
55373: CALL_OW 2
55377: ST_TO_ADDR
55378: GO 55341
55380: POP
55381: POP
// if not tmp then
55382: LD_VAR 0 5
55386: NOT
55387: IFFALSE 55391
// exit ;
55389: GO 55439
// if asc then
55391: LD_VAR 0 2
55395: IFFALSE 55419
// result := SortListByListAsc ( units , tmp ) else
55397: LD_ADDR_VAR 0 3
55401: PUSH
55402: LD_VAR 0 1
55406: PPUSH
55407: LD_VAR 0 5
55411: PPUSH
55412: CALL_OW 76
55416: ST_TO_ADDR
55417: GO 55439
// result := SortListByListDesc ( units , tmp ) ;
55419: LD_ADDR_VAR 0 3
55423: PUSH
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_VAR 0 5
55433: PPUSH
55434: CALL_OW 77
55438: ST_TO_ADDR
// end ;
55439: LD_VAR 0 3
55443: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55444: LD_INT 0
55446: PPUSH
55447: PPUSH
// task := GetTaskList ( mech ) ;
55448: LD_ADDR_VAR 0 4
55452: PUSH
55453: LD_VAR 0 1
55457: PPUSH
55458: CALL_OW 437
55462: ST_TO_ADDR
// if not task then
55463: LD_VAR 0 4
55467: NOT
55468: IFFALSE 55472
// exit ;
55470: GO 55514
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55472: LD_ADDR_VAR 0 3
55476: PUSH
55477: LD_VAR 0 4
55481: PUSH
55482: LD_INT 1
55484: ARRAY
55485: PUSH
55486: LD_INT 1
55488: ARRAY
55489: PUSH
55490: LD_STRING r
55492: EQUAL
55493: PUSH
55494: LD_VAR 0 4
55498: PUSH
55499: LD_INT 1
55501: ARRAY
55502: PUSH
55503: LD_INT 4
55505: ARRAY
55506: PUSH
55507: LD_VAR 0 2
55511: EQUAL
55512: AND
55513: ST_TO_ADDR
// end ;
55514: LD_VAR 0 3
55518: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55519: LD_INT 0
55521: PPUSH
// SetDir ( unit , d ) ;
55522: LD_VAR 0 1
55526: PPUSH
55527: LD_VAR 0 4
55531: PPUSH
55532: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55536: LD_ADDR_VAR 0 6
55540: PUSH
55541: LD_VAR 0 1
55545: PPUSH
55546: LD_VAR 0 2
55550: PPUSH
55551: LD_VAR 0 3
55555: PPUSH
55556: LD_VAR 0 5
55560: PPUSH
55561: CALL_OW 48
55565: ST_TO_ADDR
// end ;
55566: LD_VAR 0 6
55570: RET
// export function ToNaturalNumber ( number ) ; begin
55571: LD_INT 0
55573: PPUSH
// result := number div 1 ;
55574: LD_ADDR_VAR 0 2
55578: PUSH
55579: LD_VAR 0 1
55583: PUSH
55584: LD_INT 1
55586: DIV
55587: ST_TO_ADDR
// if number < 0 then
55588: LD_VAR 0 1
55592: PUSH
55593: LD_INT 0
55595: LESS
55596: IFFALSE 55606
// result := 0 ;
55598: LD_ADDR_VAR 0 2
55602: PUSH
55603: LD_INT 0
55605: ST_TO_ADDR
// end ;
55606: LD_VAR 0 2
55610: RET
// export function SortByClass ( units , class ) ; var un ; begin
55611: LD_INT 0
55613: PPUSH
55614: PPUSH
// if not units or not class then
55615: LD_VAR 0 1
55619: NOT
55620: PUSH
55621: LD_VAR 0 2
55625: NOT
55626: OR
55627: IFFALSE 55631
// exit ;
55629: GO 55726
// result := [ ] ;
55631: LD_ADDR_VAR 0 3
55635: PUSH
55636: EMPTY
55637: ST_TO_ADDR
// for un in units do
55638: LD_ADDR_VAR 0 4
55642: PUSH
55643: LD_VAR 0 1
55647: PUSH
55648: FOR_IN
55649: IFFALSE 55724
// if GetClass ( un ) = class then
55651: LD_VAR 0 4
55655: PPUSH
55656: CALL_OW 257
55660: PUSH
55661: LD_VAR 0 2
55665: EQUAL
55666: IFFALSE 55693
// result := Insert ( result , 1 , un ) else
55668: LD_ADDR_VAR 0 3
55672: PUSH
55673: LD_VAR 0 3
55677: PPUSH
55678: LD_INT 1
55680: PPUSH
55681: LD_VAR 0 4
55685: PPUSH
55686: CALL_OW 2
55690: ST_TO_ADDR
55691: GO 55722
// result := Replace ( result , result + 1 , un ) ;
55693: LD_ADDR_VAR 0 3
55697: PUSH
55698: LD_VAR 0 3
55702: PPUSH
55703: LD_VAR 0 3
55707: PUSH
55708: LD_INT 1
55710: PLUS
55711: PPUSH
55712: LD_VAR 0 4
55716: PPUSH
55717: CALL_OW 1
55721: ST_TO_ADDR
55722: GO 55648
55724: POP
55725: POP
// end ;
55726: LD_VAR 0 3
55730: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55731: LD_INT 0
55733: PPUSH
55734: PPUSH
55735: PPUSH
55736: PPUSH
55737: PPUSH
55738: PPUSH
55739: PPUSH
// result := [ ] ;
55740: LD_ADDR_VAR 0 4
55744: PUSH
55745: EMPTY
55746: ST_TO_ADDR
// if x - r < 0 then
55747: LD_VAR 0 1
55751: PUSH
55752: LD_VAR 0 3
55756: MINUS
55757: PUSH
55758: LD_INT 0
55760: LESS
55761: IFFALSE 55773
// min_x := 0 else
55763: LD_ADDR_VAR 0 8
55767: PUSH
55768: LD_INT 0
55770: ST_TO_ADDR
55771: GO 55789
// min_x := x - r ;
55773: LD_ADDR_VAR 0 8
55777: PUSH
55778: LD_VAR 0 1
55782: PUSH
55783: LD_VAR 0 3
55787: MINUS
55788: ST_TO_ADDR
// if y - r < 0 then
55789: LD_VAR 0 2
55793: PUSH
55794: LD_VAR 0 3
55798: MINUS
55799: PUSH
55800: LD_INT 0
55802: LESS
55803: IFFALSE 55815
// min_y := 0 else
55805: LD_ADDR_VAR 0 7
55809: PUSH
55810: LD_INT 0
55812: ST_TO_ADDR
55813: GO 55831
// min_y := y - r ;
55815: LD_ADDR_VAR 0 7
55819: PUSH
55820: LD_VAR 0 2
55824: PUSH
55825: LD_VAR 0 3
55829: MINUS
55830: ST_TO_ADDR
// max_x := x + r ;
55831: LD_ADDR_VAR 0 9
55835: PUSH
55836: LD_VAR 0 1
55840: PUSH
55841: LD_VAR 0 3
55845: PLUS
55846: ST_TO_ADDR
// max_y := y + r ;
55847: LD_ADDR_VAR 0 10
55851: PUSH
55852: LD_VAR 0 2
55856: PUSH
55857: LD_VAR 0 3
55861: PLUS
55862: ST_TO_ADDR
// for _x = min_x to max_x do
55863: LD_ADDR_VAR 0 5
55867: PUSH
55868: DOUBLE
55869: LD_VAR 0 8
55873: DEC
55874: ST_TO_ADDR
55875: LD_VAR 0 9
55879: PUSH
55880: FOR_TO
55881: IFFALSE 55982
// for _y = min_y to max_y do
55883: LD_ADDR_VAR 0 6
55887: PUSH
55888: DOUBLE
55889: LD_VAR 0 7
55893: DEC
55894: ST_TO_ADDR
55895: LD_VAR 0 10
55899: PUSH
55900: FOR_TO
55901: IFFALSE 55978
// begin if not ValidHex ( _x , _y ) then
55903: LD_VAR 0 5
55907: PPUSH
55908: LD_VAR 0 6
55912: PPUSH
55913: CALL_OW 488
55917: NOT
55918: IFFALSE 55922
// continue ;
55920: GO 55900
// if GetResourceTypeXY ( _x , _y ) then
55922: LD_VAR 0 5
55926: PPUSH
55927: LD_VAR 0 6
55931: PPUSH
55932: CALL_OW 283
55936: IFFALSE 55976
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55938: LD_ADDR_VAR 0 4
55942: PUSH
55943: LD_VAR 0 4
55947: PPUSH
55948: LD_VAR 0 4
55952: PUSH
55953: LD_INT 1
55955: PLUS
55956: PPUSH
55957: LD_VAR 0 5
55961: PUSH
55962: LD_VAR 0 6
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PPUSH
55971: CALL_OW 1
55975: ST_TO_ADDR
// end ;
55976: GO 55900
55978: POP
55979: POP
55980: GO 55880
55982: POP
55983: POP
// end ;
55984: LD_VAR 0 4
55988: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55989: LD_INT 0
55991: PPUSH
55992: PPUSH
55993: PPUSH
55994: PPUSH
55995: PPUSH
55996: PPUSH
55997: PPUSH
55998: PPUSH
// if not units then
55999: LD_VAR 0 1
56003: NOT
56004: IFFALSE 56008
// exit ;
56006: GO 56536
// result := UnitFilter ( units , [ f_ok ] ) ;
56008: LD_ADDR_VAR 0 3
56012: PUSH
56013: LD_VAR 0 1
56017: PPUSH
56018: LD_INT 50
56020: PUSH
56021: EMPTY
56022: LIST
56023: PPUSH
56024: CALL_OW 72
56028: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56029: LD_ADDR_VAR 0 8
56033: PUSH
56034: LD_VAR 0 1
56038: PUSH
56039: LD_INT 1
56041: ARRAY
56042: PPUSH
56043: CALL_OW 255
56047: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56048: LD_ADDR_VAR 0 10
56052: PUSH
56053: LD_INT 29
56055: PUSH
56056: LD_INT 91
56058: PUSH
56059: LD_INT 49
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// if not result then
56067: LD_VAR 0 3
56071: NOT
56072: IFFALSE 56076
// exit ;
56074: GO 56536
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56076: LD_ADDR_VAR 0 5
56080: PUSH
56081: LD_INT 81
56083: PUSH
56084: LD_VAR 0 8
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PPUSH
56093: CALL_OW 69
56097: ST_TO_ADDR
// for i in result do
56098: LD_ADDR_VAR 0 4
56102: PUSH
56103: LD_VAR 0 3
56107: PUSH
56108: FOR_IN
56109: IFFALSE 56534
// begin tag := GetTag ( i ) + 1 ;
56111: LD_ADDR_VAR 0 9
56115: PUSH
56116: LD_VAR 0 4
56120: PPUSH
56121: CALL_OW 110
56125: PUSH
56126: LD_INT 1
56128: PLUS
56129: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56130: LD_ADDR_VAR 0 7
56134: PUSH
56135: LD_VAR 0 4
56139: PPUSH
56140: CALL_OW 250
56144: PPUSH
56145: LD_VAR 0 4
56149: PPUSH
56150: CALL_OW 251
56154: PPUSH
56155: LD_INT 4
56157: PPUSH
56158: CALL 55731 0 3
56162: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56163: LD_VAR 0 4
56167: PPUSH
56168: CALL_OW 247
56172: PUSH
56173: LD_INT 2
56175: EQUAL
56176: PUSH
56177: LD_VAR 0 7
56181: PUSH
56182: LD_INT 2
56184: GREATER
56185: AND
56186: PUSH
56187: LD_VAR 0 4
56191: PPUSH
56192: CALL_OW 264
56196: PUSH
56197: LD_VAR 0 10
56201: IN
56202: NOT
56203: AND
56204: IFFALSE 56243
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56206: LD_VAR 0 4
56210: PPUSH
56211: LD_VAR 0 7
56215: PUSH
56216: LD_INT 1
56218: ARRAY
56219: PUSH
56220: LD_INT 1
56222: ARRAY
56223: PPUSH
56224: LD_VAR 0 7
56228: PUSH
56229: LD_INT 1
56231: ARRAY
56232: PUSH
56233: LD_INT 2
56235: ARRAY
56236: PPUSH
56237: CALL_OW 116
56241: GO 56532
// if path > tag then
56243: LD_VAR 0 2
56247: PUSH
56248: LD_VAR 0 9
56252: GREATER
56253: IFFALSE 56461
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56255: LD_ADDR_VAR 0 6
56259: PUSH
56260: LD_VAR 0 5
56264: PPUSH
56265: LD_INT 91
56267: PUSH
56268: LD_VAR 0 4
56272: PUSH
56273: LD_INT 8
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: PPUSH
56281: CALL_OW 72
56285: ST_TO_ADDR
// if nearEnemy then
56286: LD_VAR 0 6
56290: IFFALSE 56359
// begin if GetWeapon ( i ) = ru_time_lapser then
56292: LD_VAR 0 4
56296: PPUSH
56297: CALL_OW 264
56301: PUSH
56302: LD_INT 49
56304: EQUAL
56305: IFFALSE 56333
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56307: LD_VAR 0 4
56311: PPUSH
56312: LD_VAR 0 6
56316: PPUSH
56317: LD_VAR 0 4
56321: PPUSH
56322: CALL_OW 74
56326: PPUSH
56327: CALL_OW 112
56331: GO 56357
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56333: LD_VAR 0 4
56337: PPUSH
56338: LD_VAR 0 6
56342: PPUSH
56343: LD_VAR 0 4
56347: PPUSH
56348: CALL_OW 74
56352: PPUSH
56353: CALL 57607 0 2
// end else
56357: GO 56459
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56359: LD_VAR 0 4
56363: PPUSH
56364: LD_VAR 0 2
56368: PUSH
56369: LD_VAR 0 9
56373: ARRAY
56374: PUSH
56375: LD_INT 1
56377: ARRAY
56378: PPUSH
56379: LD_VAR 0 2
56383: PUSH
56384: LD_VAR 0 9
56388: ARRAY
56389: PUSH
56390: LD_INT 2
56392: ARRAY
56393: PPUSH
56394: CALL_OW 297
56398: PUSH
56399: LD_INT 6
56401: GREATER
56402: IFFALSE 56445
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56404: LD_VAR 0 4
56408: PPUSH
56409: LD_VAR 0 2
56413: PUSH
56414: LD_VAR 0 9
56418: ARRAY
56419: PUSH
56420: LD_INT 1
56422: ARRAY
56423: PPUSH
56424: LD_VAR 0 2
56428: PUSH
56429: LD_VAR 0 9
56433: ARRAY
56434: PUSH
56435: LD_INT 2
56437: ARRAY
56438: PPUSH
56439: CALL_OW 114
56443: GO 56459
// SetTag ( i , tag ) ;
56445: LD_VAR 0 4
56449: PPUSH
56450: LD_VAR 0 9
56454: PPUSH
56455: CALL_OW 109
// end else
56459: GO 56532
// if enemy then
56461: LD_VAR 0 5
56465: IFFALSE 56532
// begin if GetWeapon ( i ) = ru_time_lapser then
56467: LD_VAR 0 4
56471: PPUSH
56472: CALL_OW 264
56476: PUSH
56477: LD_INT 49
56479: EQUAL
56480: IFFALSE 56508
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56482: LD_VAR 0 4
56486: PPUSH
56487: LD_VAR 0 5
56491: PPUSH
56492: LD_VAR 0 4
56496: PPUSH
56497: CALL_OW 74
56501: PPUSH
56502: CALL_OW 112
56506: GO 56532
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56508: LD_VAR 0 4
56512: PPUSH
56513: LD_VAR 0 5
56517: PPUSH
56518: LD_VAR 0 4
56522: PPUSH
56523: CALL_OW 74
56527: PPUSH
56528: CALL 57607 0 2
// end ; end ;
56532: GO 56108
56534: POP
56535: POP
// end ;
56536: LD_VAR 0 3
56540: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56541: LD_INT 0
56543: PPUSH
56544: PPUSH
56545: PPUSH
// if not unit or IsInUnit ( unit ) then
56546: LD_VAR 0 1
56550: NOT
56551: PUSH
56552: LD_VAR 0 1
56556: PPUSH
56557: CALL_OW 310
56561: OR
56562: IFFALSE 56566
// exit ;
56564: GO 56657
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56566: LD_ADDR_VAR 0 4
56570: PUSH
56571: LD_VAR 0 1
56575: PPUSH
56576: CALL_OW 250
56580: PPUSH
56581: LD_VAR 0 2
56585: PPUSH
56586: LD_INT 1
56588: PPUSH
56589: CALL_OW 272
56593: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56594: LD_ADDR_VAR 0 5
56598: PUSH
56599: LD_VAR 0 1
56603: PPUSH
56604: CALL_OW 251
56608: PPUSH
56609: LD_VAR 0 2
56613: PPUSH
56614: LD_INT 1
56616: PPUSH
56617: CALL_OW 273
56621: ST_TO_ADDR
// if ValidHex ( x , y ) then
56622: LD_VAR 0 4
56626: PPUSH
56627: LD_VAR 0 5
56631: PPUSH
56632: CALL_OW 488
56636: IFFALSE 56657
// ComTurnXY ( unit , x , y ) ;
56638: LD_VAR 0 1
56642: PPUSH
56643: LD_VAR 0 4
56647: PPUSH
56648: LD_VAR 0 5
56652: PPUSH
56653: CALL_OW 118
// end ;
56657: LD_VAR 0 3
56661: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56662: LD_INT 0
56664: PPUSH
56665: PPUSH
// result := false ;
56666: LD_ADDR_VAR 0 3
56670: PUSH
56671: LD_INT 0
56673: ST_TO_ADDR
// if not units then
56674: LD_VAR 0 2
56678: NOT
56679: IFFALSE 56683
// exit ;
56681: GO 56728
// for i in units do
56683: LD_ADDR_VAR 0 4
56687: PUSH
56688: LD_VAR 0 2
56692: PUSH
56693: FOR_IN
56694: IFFALSE 56726
// if See ( side , i ) then
56696: LD_VAR 0 1
56700: PPUSH
56701: LD_VAR 0 4
56705: PPUSH
56706: CALL_OW 292
56710: IFFALSE 56724
// begin result := true ;
56712: LD_ADDR_VAR 0 3
56716: PUSH
56717: LD_INT 1
56719: ST_TO_ADDR
// exit ;
56720: POP
56721: POP
56722: GO 56728
// end ;
56724: GO 56693
56726: POP
56727: POP
// end ;
56728: LD_VAR 0 3
56732: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56733: LD_INT 0
56735: PPUSH
56736: PPUSH
56737: PPUSH
56738: PPUSH
// if not unit or not points then
56739: LD_VAR 0 1
56743: NOT
56744: PUSH
56745: LD_VAR 0 2
56749: NOT
56750: OR
56751: IFFALSE 56755
// exit ;
56753: GO 56845
// dist := 99999 ;
56755: LD_ADDR_VAR 0 5
56759: PUSH
56760: LD_INT 99999
56762: ST_TO_ADDR
// for i in points do
56763: LD_ADDR_VAR 0 4
56767: PUSH
56768: LD_VAR 0 2
56772: PUSH
56773: FOR_IN
56774: IFFALSE 56843
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56776: LD_ADDR_VAR 0 6
56780: PUSH
56781: LD_VAR 0 1
56785: PPUSH
56786: LD_VAR 0 4
56790: PUSH
56791: LD_INT 1
56793: ARRAY
56794: PPUSH
56795: LD_VAR 0 4
56799: PUSH
56800: LD_INT 2
56802: ARRAY
56803: PPUSH
56804: CALL_OW 297
56808: ST_TO_ADDR
// if tmpDist < dist then
56809: LD_VAR 0 6
56813: PUSH
56814: LD_VAR 0 5
56818: LESS
56819: IFFALSE 56841
// begin result := i ;
56821: LD_ADDR_VAR 0 3
56825: PUSH
56826: LD_VAR 0 4
56830: ST_TO_ADDR
// dist := tmpDist ;
56831: LD_ADDR_VAR 0 5
56835: PUSH
56836: LD_VAR 0 6
56840: ST_TO_ADDR
// end ; end ;
56841: GO 56773
56843: POP
56844: POP
// end ;
56845: LD_VAR 0 3
56849: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56850: LD_INT 0
56852: PPUSH
// uc_side := side ;
56853: LD_ADDR_OWVAR 20
56857: PUSH
56858: LD_VAR 0 1
56862: ST_TO_ADDR
// uc_nation := 3 ;
56863: LD_ADDR_OWVAR 21
56867: PUSH
56868: LD_INT 3
56870: ST_TO_ADDR
// vc_chassis := 25 ;
56871: LD_ADDR_OWVAR 37
56875: PUSH
56876: LD_INT 25
56878: ST_TO_ADDR
// vc_engine := engine_siberite ;
56879: LD_ADDR_OWVAR 39
56883: PUSH
56884: LD_INT 3
56886: ST_TO_ADDR
// vc_control := control_computer ;
56887: LD_ADDR_OWVAR 38
56891: PUSH
56892: LD_INT 3
56894: ST_TO_ADDR
// vc_weapon := 59 ;
56895: LD_ADDR_OWVAR 40
56899: PUSH
56900: LD_INT 59
56902: ST_TO_ADDR
// result := CreateVehicle ;
56903: LD_ADDR_VAR 0 5
56907: PUSH
56908: CALL_OW 45
56912: ST_TO_ADDR
// SetDir ( result , d ) ;
56913: LD_VAR 0 5
56917: PPUSH
56918: LD_VAR 0 4
56922: PPUSH
56923: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56927: LD_VAR 0 5
56931: PPUSH
56932: LD_VAR 0 2
56936: PPUSH
56937: LD_VAR 0 3
56941: PPUSH
56942: LD_INT 0
56944: PPUSH
56945: CALL_OW 48
// end ;
56949: LD_VAR 0 5
56953: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56954: LD_INT 0
56956: PPUSH
56957: PPUSH
56958: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56959: LD_ADDR_VAR 0 2
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56982: LD_VAR 0 1
56986: NOT
56987: PUSH
56988: LD_VAR 0 1
56992: PPUSH
56993: CALL_OW 264
56997: PUSH
56998: LD_INT 12
57000: PUSH
57001: LD_INT 51
57003: PUSH
57004: LD_INT 32
57006: PUSH
57007: LD_INT 89
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: IN
57016: NOT
57017: OR
57018: IFFALSE 57022
// exit ;
57020: GO 57120
// for i := 1 to 3 do
57022: LD_ADDR_VAR 0 3
57026: PUSH
57027: DOUBLE
57028: LD_INT 1
57030: DEC
57031: ST_TO_ADDR
57032: LD_INT 3
57034: PUSH
57035: FOR_TO
57036: IFFALSE 57118
// begin tmp := GetCargo ( cargo , i ) ;
57038: LD_ADDR_VAR 0 4
57042: PUSH
57043: LD_VAR 0 1
57047: PPUSH
57048: LD_VAR 0 3
57052: PPUSH
57053: CALL_OW 289
57057: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57058: LD_ADDR_VAR 0 2
57062: PUSH
57063: LD_VAR 0 2
57067: PPUSH
57068: LD_VAR 0 3
57072: PPUSH
57073: LD_VAR 0 4
57077: PPUSH
57078: CALL_OW 1
57082: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57083: LD_ADDR_VAR 0 2
57087: PUSH
57088: LD_VAR 0 2
57092: PPUSH
57093: LD_INT 4
57095: PPUSH
57096: LD_VAR 0 2
57100: PUSH
57101: LD_INT 4
57103: ARRAY
57104: PUSH
57105: LD_VAR 0 4
57109: PLUS
57110: PPUSH
57111: CALL_OW 1
57115: ST_TO_ADDR
// end ;
57116: GO 57035
57118: POP
57119: POP
// end ;
57120: LD_VAR 0 2
57124: RET
// export function Length ( array ) ; begin
57125: LD_INT 0
57127: PPUSH
// result := array + 0 ;
57128: LD_ADDR_VAR 0 2
57132: PUSH
57133: LD_VAR 0 1
57137: PUSH
57138: LD_INT 0
57140: PLUS
57141: ST_TO_ADDR
// end ;
57142: LD_VAR 0 2
57146: RET
// export function PrepareArray ( array ) ; begin
57147: LD_INT 0
57149: PPUSH
// result := array diff 0 ;
57150: LD_ADDR_VAR 0 2
57154: PUSH
57155: LD_VAR 0 1
57159: PUSH
57160: LD_INT 0
57162: DIFF
57163: ST_TO_ADDR
// if not result [ 1 ] then
57164: LD_VAR 0 2
57168: PUSH
57169: LD_INT 1
57171: ARRAY
57172: NOT
57173: IFFALSE 57193
// result := Delete ( result , 1 ) ;
57175: LD_ADDR_VAR 0 2
57179: PUSH
57180: LD_VAR 0 2
57184: PPUSH
57185: LD_INT 1
57187: PPUSH
57188: CALL_OW 3
57192: ST_TO_ADDR
// end ;
57193: LD_VAR 0 2
57197: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57198: LD_INT 0
57200: PPUSH
57201: PPUSH
57202: PPUSH
57203: PPUSH
// sibRocketRange := 25 ;
57204: LD_ADDR_VAR 0 6
57208: PUSH
57209: LD_INT 25
57211: ST_TO_ADDR
// result := false ;
57212: LD_ADDR_VAR 0 4
57216: PUSH
57217: LD_INT 0
57219: ST_TO_ADDR
// for i := 0 to 5 do
57220: LD_ADDR_VAR 0 5
57224: PUSH
57225: DOUBLE
57226: LD_INT 0
57228: DEC
57229: ST_TO_ADDR
57230: LD_INT 5
57232: PUSH
57233: FOR_TO
57234: IFFALSE 57301
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57236: LD_VAR 0 1
57240: PPUSH
57241: LD_VAR 0 5
57245: PPUSH
57246: LD_VAR 0 6
57250: PPUSH
57251: CALL_OW 272
57255: PPUSH
57256: LD_VAR 0 2
57260: PPUSH
57261: LD_VAR 0 5
57265: PPUSH
57266: LD_VAR 0 6
57270: PPUSH
57271: CALL_OW 273
57275: PPUSH
57276: LD_VAR 0 3
57280: PPUSH
57281: CALL_OW 309
57285: IFFALSE 57299
// begin result := true ;
57287: LD_ADDR_VAR 0 4
57291: PUSH
57292: LD_INT 1
57294: ST_TO_ADDR
// exit ;
57295: POP
57296: POP
57297: GO 57303
// end ;
57299: GO 57233
57301: POP
57302: POP
// end ;
57303: LD_VAR 0 4
57307: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57308: LD_INT 0
57310: PPUSH
57311: PPUSH
57312: PPUSH
// if btype = b_depot then
57313: LD_VAR 0 2
57317: PUSH
57318: LD_INT 0
57320: EQUAL
57321: IFFALSE 57333
// begin result := true ;
57323: LD_ADDR_VAR 0 3
57327: PUSH
57328: LD_INT 1
57330: ST_TO_ADDR
// exit ;
57331: GO 57449
// end ; pom := GetBase ( depot ) ;
57333: LD_ADDR_VAR 0 4
57337: PUSH
57338: LD_VAR 0 1
57342: PPUSH
57343: CALL_OW 274
57347: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57348: LD_ADDR_VAR 0 5
57352: PUSH
57353: LD_VAR 0 2
57357: PPUSH
57358: LD_VAR 0 1
57362: PPUSH
57363: CALL_OW 248
57367: PPUSH
57368: CALL_OW 450
57372: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57373: LD_ADDR_VAR 0 3
57377: PUSH
57378: LD_VAR 0 4
57382: PPUSH
57383: LD_INT 1
57385: PPUSH
57386: CALL_OW 275
57390: PUSH
57391: LD_VAR 0 5
57395: PUSH
57396: LD_INT 1
57398: ARRAY
57399: GREATEREQUAL
57400: PUSH
57401: LD_VAR 0 4
57405: PPUSH
57406: LD_INT 2
57408: PPUSH
57409: CALL_OW 275
57413: PUSH
57414: LD_VAR 0 5
57418: PUSH
57419: LD_INT 2
57421: ARRAY
57422: GREATEREQUAL
57423: AND
57424: PUSH
57425: LD_VAR 0 4
57429: PPUSH
57430: LD_INT 3
57432: PPUSH
57433: CALL_OW 275
57437: PUSH
57438: LD_VAR 0 5
57442: PUSH
57443: LD_INT 3
57445: ARRAY
57446: GREATEREQUAL
57447: AND
57448: ST_TO_ADDR
// end ;
57449: LD_VAR 0 3
57453: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57454: LD_INT 0
57456: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57457: LD_VAR 0 1
57461: PPUSH
57462: LD_VAR 0 2
57466: PPUSH
57467: LD_INT 0
57469: PPUSH
57470: LD_INT 0
57472: PPUSH
57473: LD_INT 1
57475: PPUSH
57476: LD_INT 0
57478: PPUSH
57479: CALL_OW 587
// end ;
57483: LD_VAR 0 3
57487: RET
// export function CenterOnNow ( unit ) ; begin
57488: LD_INT 0
57490: PPUSH
// result := IsInUnit ( unit ) ;
57491: LD_ADDR_VAR 0 2
57495: PUSH
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL_OW 310
57505: ST_TO_ADDR
// if not result then
57506: LD_VAR 0 2
57510: NOT
57511: IFFALSE 57523
// result := unit ;
57513: LD_ADDR_VAR 0 2
57517: PUSH
57518: LD_VAR 0 1
57522: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57523: LD_VAR 0 1
57527: PPUSH
57528: CALL_OW 87
// end ;
57532: LD_VAR 0 2
57536: RET
// export function ComMoveHex ( unit , hex ) ; begin
57537: LD_INT 0
57539: PPUSH
// if not hex then
57540: LD_VAR 0 2
57544: NOT
57545: IFFALSE 57549
// exit ;
57547: GO 57602
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57549: LD_VAR 0 2
57553: PUSH
57554: LD_INT 1
57556: ARRAY
57557: PPUSH
57558: LD_VAR 0 2
57562: PUSH
57563: LD_INT 2
57565: ARRAY
57566: PPUSH
57567: CALL_OW 428
57571: IFFALSE 57575
// exit ;
57573: GO 57602
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57575: LD_VAR 0 1
57579: PPUSH
57580: LD_VAR 0 2
57584: PUSH
57585: LD_INT 1
57587: ARRAY
57588: PPUSH
57589: LD_VAR 0 2
57593: PUSH
57594: LD_INT 2
57596: ARRAY
57597: PPUSH
57598: CALL_OW 111
// end ;
57602: LD_VAR 0 3
57606: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57607: LD_INT 0
57609: PPUSH
57610: PPUSH
57611: PPUSH
// if not unit or not enemy then
57612: LD_VAR 0 1
57616: NOT
57617: PUSH
57618: LD_VAR 0 2
57622: NOT
57623: OR
57624: IFFALSE 57628
// exit ;
57626: GO 57752
// x := GetX ( enemy ) ;
57628: LD_ADDR_VAR 0 4
57632: PUSH
57633: LD_VAR 0 2
57637: PPUSH
57638: CALL_OW 250
57642: ST_TO_ADDR
// y := GetY ( enemy ) ;
57643: LD_ADDR_VAR 0 5
57647: PUSH
57648: LD_VAR 0 2
57652: PPUSH
57653: CALL_OW 251
57657: ST_TO_ADDR
// if ValidHex ( x , y ) then
57658: LD_VAR 0 4
57662: PPUSH
57663: LD_VAR 0 5
57667: PPUSH
57668: CALL_OW 488
57672: IFFALSE 57752
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57674: LD_VAR 0 2
57678: PPUSH
57679: CALL_OW 247
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: IN
57694: PUSH
57695: LD_VAR 0 1
57699: PPUSH
57700: CALL_OW 255
57704: PPUSH
57705: LD_VAR 0 2
57709: PPUSH
57710: CALL_OW 292
57714: OR
57715: IFFALSE 57733
// ComAttackUnit ( unit , enemy ) else
57717: LD_VAR 0 1
57721: PPUSH
57722: LD_VAR 0 2
57726: PPUSH
57727: CALL_OW 115
57731: GO 57752
// ComAgressiveMove ( unit , x , y ) ;
57733: LD_VAR 0 1
57737: PPUSH
57738: LD_VAR 0 4
57742: PPUSH
57743: LD_VAR 0 5
57747: PPUSH
57748: CALL_OW 114
// end ;
57752: LD_VAR 0 3
57756: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57757: LD_INT 0
57759: PPUSH
57760: PPUSH
57761: PPUSH
// list := AreaToList ( area , 0 ) ;
57762: LD_ADDR_VAR 0 5
57766: PUSH
57767: LD_VAR 0 1
57771: PPUSH
57772: LD_INT 0
57774: PPUSH
57775: CALL_OW 517
57779: ST_TO_ADDR
// if not list then
57780: LD_VAR 0 5
57784: NOT
57785: IFFALSE 57789
// exit ;
57787: GO 57919
// if all then
57789: LD_VAR 0 2
57793: IFFALSE 57881
// begin for i := 1 to list [ 1 ] do
57795: LD_ADDR_VAR 0 4
57799: PUSH
57800: DOUBLE
57801: LD_INT 1
57803: DEC
57804: ST_TO_ADDR
57805: LD_VAR 0 5
57809: PUSH
57810: LD_INT 1
57812: ARRAY
57813: PUSH
57814: FOR_TO
57815: IFFALSE 57877
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57817: LD_ADDR_VAR 0 3
57821: PUSH
57822: LD_VAR 0 3
57826: PPUSH
57827: LD_VAR 0 3
57831: PUSH
57832: LD_INT 1
57834: PLUS
57835: PPUSH
57836: LD_VAR 0 5
57840: PUSH
57841: LD_INT 1
57843: ARRAY
57844: PUSH
57845: LD_VAR 0 4
57849: ARRAY
57850: PUSH
57851: LD_VAR 0 5
57855: PUSH
57856: LD_INT 2
57858: ARRAY
57859: PUSH
57860: LD_VAR 0 4
57864: ARRAY
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PPUSH
57870: CALL_OW 1
57874: ST_TO_ADDR
57875: GO 57814
57877: POP
57878: POP
// exit ;
57879: GO 57919
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57881: LD_ADDR_VAR 0 3
57885: PUSH
57886: LD_VAR 0 5
57890: PUSH
57891: LD_INT 1
57893: ARRAY
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PUSH
57899: LD_VAR 0 5
57903: PUSH
57904: LD_INT 2
57906: ARRAY
57907: PUSH
57908: LD_INT 1
57910: ARRAY
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: EMPTY
57917: LIST
57918: ST_TO_ADDR
// end ;
57919: LD_VAR 0 3
57923: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57924: LD_INT 0
57926: PPUSH
57927: PPUSH
// list := AreaToList ( area , 0 ) ;
57928: LD_ADDR_VAR 0 4
57932: PUSH
57933: LD_VAR 0 1
57937: PPUSH
57938: LD_INT 0
57940: PPUSH
57941: CALL_OW 517
57945: ST_TO_ADDR
// if not list then
57946: LD_VAR 0 4
57950: NOT
57951: IFFALSE 57955
// exit ;
57953: GO 57996
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57955: LD_ADDR_VAR 0 3
57959: PUSH
57960: LD_VAR 0 4
57964: PUSH
57965: LD_INT 1
57967: ARRAY
57968: PUSH
57969: LD_INT 1
57971: ARRAY
57972: PUSH
57973: LD_VAR 0 4
57977: PUSH
57978: LD_INT 2
57980: ARRAY
57981: PUSH
57982: LD_INT 1
57984: ARRAY
57985: PUSH
57986: LD_VAR 0 2
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: LIST
57995: ST_TO_ADDR
// end ;
57996: LD_VAR 0 3
58000: RET
// export function First ( array ) ; begin
58001: LD_INT 0
58003: PPUSH
// if not array then
58004: LD_VAR 0 1
58008: NOT
58009: IFFALSE 58013
// exit ;
58011: GO 58027
// result := array [ 1 ] ;
58013: LD_ADDR_VAR 0 2
58017: PUSH
58018: LD_VAR 0 1
58022: PUSH
58023: LD_INT 1
58025: ARRAY
58026: ST_TO_ADDR
// end ;
58027: LD_VAR 0 2
58031: RET
// export function Last ( array ) ; begin
58032: LD_INT 0
58034: PPUSH
// if not array then
58035: LD_VAR 0 1
58039: NOT
58040: IFFALSE 58044
// exit ;
58042: GO 58060
// result := array [ array ] ;
58044: LD_ADDR_VAR 0 2
58048: PUSH
58049: LD_VAR 0 1
58053: PUSH
58054: LD_VAR 0 1
58058: ARRAY
58059: ST_TO_ADDR
// end ;
58060: LD_VAR 0 2
58064: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58065: LD_INT 0
58067: PPUSH
58068: PPUSH
// result := [ ] ;
58069: LD_ADDR_VAR 0 5
58073: PUSH
58074: EMPTY
58075: ST_TO_ADDR
// if not array then
58076: LD_VAR 0 1
58080: NOT
58081: IFFALSE 58085
// exit ;
58083: GO 58197
// for i := 1 to array do
58085: LD_ADDR_VAR 0 6
58089: PUSH
58090: DOUBLE
58091: LD_INT 1
58093: DEC
58094: ST_TO_ADDR
58095: LD_VAR 0 1
58099: PUSH
58100: FOR_TO
58101: IFFALSE 58195
// if array [ i ] [ index ] = value then
58103: LD_VAR 0 1
58107: PUSH
58108: LD_VAR 0 6
58112: ARRAY
58113: PUSH
58114: LD_VAR 0 2
58118: ARRAY
58119: PUSH
58120: LD_VAR 0 3
58124: EQUAL
58125: IFFALSE 58193
// begin if indexColumn then
58127: LD_VAR 0 4
58131: IFFALSE 58167
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58133: LD_ADDR_VAR 0 5
58137: PUSH
58138: LD_VAR 0 5
58142: PPUSH
58143: LD_VAR 0 1
58147: PUSH
58148: LD_VAR 0 6
58152: ARRAY
58153: PUSH
58154: LD_VAR 0 4
58158: ARRAY
58159: PPUSH
58160: CALL 53379 0 2
58164: ST_TO_ADDR
58165: GO 58193
// result := Join ( result , array [ i ] ) ;
58167: LD_ADDR_VAR 0 5
58171: PUSH
58172: LD_VAR 0 5
58176: PPUSH
58177: LD_VAR 0 1
58181: PUSH
58182: LD_VAR 0 6
58186: ARRAY
58187: PPUSH
58188: CALL 53379 0 2
58192: ST_TO_ADDR
// end ;
58193: GO 58100
58195: POP
58196: POP
// end ;
58197: LD_VAR 0 5
58201: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58202: LD_INT 0
58204: PPUSH
// if not vehicles or not parkingPoint then
58205: LD_VAR 0 1
58209: NOT
58210: PUSH
58211: LD_VAR 0 2
58215: NOT
58216: OR
58217: IFFALSE 58221
// exit ;
58219: GO 58319
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58221: LD_ADDR_VAR 0 1
58225: PUSH
58226: LD_VAR 0 1
58230: PPUSH
58231: LD_INT 50
58233: PUSH
58234: EMPTY
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 92
58242: PUSH
58243: LD_VAR 0 2
58247: PUSH
58248: LD_INT 1
58250: ARRAY
58251: PUSH
58252: LD_VAR 0 2
58256: PUSH
58257: LD_INT 2
58259: ARRAY
58260: PUSH
58261: LD_INT 8
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PPUSH
58278: CALL_OW 72
58282: ST_TO_ADDR
// if not vehicles then
58283: LD_VAR 0 1
58287: NOT
58288: IFFALSE 58292
// exit ;
58290: GO 58319
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58292: LD_VAR 0 1
58296: PPUSH
58297: LD_VAR 0 2
58301: PUSH
58302: LD_INT 1
58304: ARRAY
58305: PPUSH
58306: LD_VAR 0 2
58310: PUSH
58311: LD_INT 2
58313: ARRAY
58314: PPUSH
58315: CALL_OW 111
// end ;
58319: LD_VAR 0 3
58323: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58324: LD_INT 0
58326: PPUSH
58327: PPUSH
58328: PPUSH
// if not side or not area then
58329: LD_VAR 0 1
58333: NOT
58334: PUSH
58335: LD_VAR 0 2
58339: NOT
58340: OR
58341: IFFALSE 58345
// exit ;
58343: GO 58464
// tmp := AreaToList ( area , 0 ) ;
58345: LD_ADDR_VAR 0 5
58349: PUSH
58350: LD_VAR 0 2
58354: PPUSH
58355: LD_INT 0
58357: PPUSH
58358: CALL_OW 517
58362: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58363: LD_ADDR_VAR 0 4
58367: PUSH
58368: DOUBLE
58369: LD_INT 1
58371: DEC
58372: ST_TO_ADDR
58373: LD_VAR 0 5
58377: PUSH
58378: LD_INT 1
58380: ARRAY
58381: PUSH
58382: FOR_TO
58383: IFFALSE 58462
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58385: LD_VAR 0 5
58389: PUSH
58390: LD_INT 1
58392: ARRAY
58393: PUSH
58394: LD_VAR 0 4
58398: ARRAY
58399: PPUSH
58400: LD_VAR 0 5
58404: PUSH
58405: LD_INT 2
58407: ARRAY
58408: PUSH
58409: LD_VAR 0 4
58413: ARRAY
58414: PPUSH
58415: CALL_OW 351
58419: IFFALSE 58460
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58421: LD_VAR 0 5
58425: PUSH
58426: LD_INT 1
58428: ARRAY
58429: PUSH
58430: LD_VAR 0 4
58434: ARRAY
58435: PPUSH
58436: LD_VAR 0 5
58440: PUSH
58441: LD_INT 2
58443: ARRAY
58444: PUSH
58445: LD_VAR 0 4
58449: ARRAY
58450: PPUSH
58451: LD_VAR 0 1
58455: PPUSH
58456: CALL_OW 244
// end ;
58460: GO 58382
58462: POP
58463: POP
// end ; end_of_file
58464: LD_VAR 0 3
58468: RET
// export function SOS_UnitDestroyed ( un ) ; begin
58469: LD_INT 0
58471: PPUSH
// ComRadiation ( un ) ;
58472: LD_VAR 0 1
58476: PPUSH
58477: CALL 59508 0 1
// end ;
58481: LD_VAR 0 2
58485: RET
// export function SOS_UnitKamikazed ( un ) ; begin
58486: LD_INT 0
58488: PPUSH
// ComRadiation ( un ) ;
58489: LD_VAR 0 1
58493: PPUSH
58494: CALL 59508 0 1
// end ;
58498: LD_VAR 0 2
58502: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58503: LD_INT 0
58505: PPUSH
// end ;
58506: LD_VAR 0 4
58510: RET
// export function SOS_Command ( cmd ) ; begin
58511: LD_INT 0
58513: PPUSH
// end ;
58514: LD_VAR 0 2
58518: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58519: LD_INT 0
58521: PPUSH
// end ;
58522: LD_VAR 0 6
58526: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
58527: LD_INT 0
58529: PPUSH
58530: PPUSH
58531: PPUSH
58532: PPUSH
// if not vehicle or not factory then
58533: LD_VAR 0 1
58537: NOT
58538: PUSH
58539: LD_VAR 0 2
58543: NOT
58544: OR
58545: IFFALSE 58549
// exit ;
58547: GO 59099
// if not factoryWaypoints then
58549: LD_EXP 57
58553: NOT
58554: IFFALSE 58558
// exit ;
58556: GO 59099
// for i := 1 to Count ( factoryWaypoints ) do
58558: LD_ADDR_VAR 0 4
58562: PUSH
58563: DOUBLE
58564: LD_INT 1
58566: DEC
58567: ST_TO_ADDR
58568: LD_EXP 57
58572: PPUSH
58573: CALL 17770 0 1
58577: PUSH
58578: FOR_TO
58579: IFFALSE 59097
// if factoryWaypoints [ i ] [ 2 ] = factory then
58581: LD_EXP 57
58585: PUSH
58586: LD_VAR 0 4
58590: ARRAY
58591: PUSH
58592: LD_INT 2
58594: ARRAY
58595: PUSH
58596: LD_VAR 0 2
58600: EQUAL
58601: IFFALSE 59095
// begin if GetControl ( vehicle ) = control_manual then
58603: LD_VAR 0 1
58607: PPUSH
58608: CALL_OW 263
58612: PUSH
58613: LD_INT 1
58615: EQUAL
58616: IFFALSE 58978
// begin driver := IsDrivenBy ( vehicle ) ;
58618: LD_ADDR_VAR 0 5
58622: PUSH
58623: LD_VAR 0 1
58627: PPUSH
58628: CALL_OW 311
58632: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
58633: LD_VAR 0 5
58637: PUSH
58638: LD_EXP 58
58642: IN
58643: PUSH
58644: LD_VAR 0 1
58648: PUSH
58649: LD_EXP 58
58653: IN
58654: OR
58655: IFFALSE 58661
// exit ;
58657: POP
58658: POP
58659: GO 59099
// if not HasTask ( driver ) then
58661: LD_VAR 0 5
58665: PPUSH
58666: CALL_OW 314
58670: NOT
58671: IFFALSE 58976
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
58673: LD_ADDR_EXP 58
58677: PUSH
58678: LD_EXP 58
58682: PPUSH
58683: LD_VAR 0 5
58687: PPUSH
58688: CALL 53379 0 2
58692: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
58693: LD_ADDR_EXP 58
58697: PUSH
58698: LD_EXP 58
58702: PPUSH
58703: LD_VAR 0 1
58707: PPUSH
58708: CALL 53379 0 2
58712: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58713: LD_ADDR_VAR 0 6
58717: PUSH
58718: LD_EXP 57
58722: PUSH
58723: LD_VAR 0 4
58727: ARRAY
58728: PUSH
58729: LD_INT 3
58731: ARRAY
58732: PPUSH
58733: LD_EXP 57
58737: PUSH
58738: LD_VAR 0 4
58742: ARRAY
58743: PUSH
58744: LD_INT 4
58746: ARRAY
58747: PPUSH
58748: CALL_OW 428
58752: ST_TO_ADDR
// if hex then
58753: LD_VAR 0 6
58757: IFFALSE 58775
// ComMoveUnit ( driver , hex ) else
58759: LD_VAR 0 5
58763: PPUSH
58764: LD_VAR 0 6
58768: PPUSH
58769: CALL_OW 112
58773: GO 58859
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
58775: LD_VAR 0 1
58779: PPUSH
58780: LD_EXP 57
58784: PUSH
58785: LD_VAR 0 4
58789: ARRAY
58790: PUSH
58791: LD_INT 3
58793: ARRAY
58794: PPUSH
58795: LD_EXP 57
58799: PUSH
58800: LD_VAR 0 4
58804: ARRAY
58805: PUSH
58806: LD_INT 4
58808: ARRAY
58809: PPUSH
58810: CALL_OW 297
58814: PUSH
58815: LD_INT 0
58817: GREATER
58818: IFFALSE 58859
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58820: LD_VAR 0 5
58824: PPUSH
58825: LD_EXP 57
58829: PUSH
58830: LD_VAR 0 4
58834: ARRAY
58835: PUSH
58836: LD_INT 3
58838: ARRAY
58839: PPUSH
58840: LD_EXP 57
58844: PUSH
58845: LD_VAR 0 4
58849: ARRAY
58850: PUSH
58851: LD_INT 4
58853: ARRAY
58854: PPUSH
58855: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58859: LD_VAR 0 5
58863: PPUSH
58864: CALL_OW 181
// if Multiplayer then
58868: LD_OWVAR 4
58872: IFFALSE 58921
// begin repeat wait ( 10 ) ;
58874: LD_INT 10
58876: PPUSH
58877: CALL_OW 67
// until not IsInUnit ( driver ) ;
58881: LD_VAR 0 5
58885: PPUSH
58886: CALL_OW 310
58890: NOT
58891: IFFALSE 58874
// if not HasTask ( driver ) then
58893: LD_VAR 0 5
58897: PPUSH
58898: CALL_OW 314
58902: NOT
58903: IFFALSE 58919
// ComEnterUnit ( driver , factory ) ;
58905: LD_VAR 0 5
58909: PPUSH
58910: LD_VAR 0 2
58914: PPUSH
58915: CALL_OW 120
// end else
58919: GO 58935
// AddComEnterUnit ( driver , factory ) ;
58921: LD_VAR 0 5
58925: PPUSH
58926: LD_VAR 0 2
58930: PPUSH
58931: CALL_OW 180
// wait ( 0 0$1 ) ;
58935: LD_INT 35
58937: PPUSH
58938: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
58942: LD_ADDR_EXP 58
58946: PUSH
58947: LD_EXP 58
58951: PUSH
58952: LD_VAR 0 5
58956: DIFF
58957: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
58958: LD_ADDR_EXP 58
58962: PUSH
58963: LD_EXP 58
58967: PUSH
58968: LD_VAR 0 1
58972: DIFF
58973: ST_TO_ADDR
// break ;
58974: GO 59097
// end ; end else
58976: GO 59095
// if GetControl ( vehicle ) = control_remote then
58978: LD_VAR 0 1
58982: PPUSH
58983: CALL_OW 263
58987: PUSH
58988: LD_INT 2
58990: EQUAL
58991: IFFALSE 59054
// begin wait ( 0 0$2 ) ;
58993: LD_INT 70
58995: PPUSH
58996: CALL_OW 67
// if Connect ( vehicle ) then
59000: LD_VAR 0 1
59004: PPUSH
59005: CALL 23976 0 1
59009: IFFALSE 59050
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59011: LD_VAR 0 1
59015: PPUSH
59016: LD_EXP 57
59020: PUSH
59021: LD_VAR 0 4
59025: ARRAY
59026: PUSH
59027: LD_INT 3
59029: ARRAY
59030: PPUSH
59031: LD_EXP 57
59035: PUSH
59036: LD_VAR 0 4
59040: ARRAY
59041: PUSH
59042: LD_INT 4
59044: ARRAY
59045: PPUSH
59046: CALL_OW 111
// break ;
59050: GO 59097
// end else
59052: GO 59095
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59054: LD_VAR 0 1
59058: PPUSH
59059: LD_EXP 57
59063: PUSH
59064: LD_VAR 0 4
59068: ARRAY
59069: PUSH
59070: LD_INT 3
59072: ARRAY
59073: PPUSH
59074: LD_EXP 57
59078: PUSH
59079: LD_VAR 0 4
59083: ARRAY
59084: PUSH
59085: LD_INT 4
59087: ARRAY
59088: PPUSH
59089: CALL_OW 111
// break ;
59093: GO 59097
// end ; end ;
59095: GO 58578
59097: POP
59098: POP
// end ;
59099: LD_VAR 0 3
59103: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59104: LD_INT 0
59106: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59107: LD_VAR 0 1
59111: PUSH
59112: LD_INT 250
59114: EQUAL
59115: PUSH
59116: LD_VAR 0 2
59120: PPUSH
59121: CALL_OW 264
59125: PUSH
59126: LD_INT 81
59128: EQUAL
59129: AND
59130: IFFALSE 59151
// MinerPlaceMine ( unit , x , y ) ;
59132: LD_VAR 0 2
59136: PPUSH
59137: LD_VAR 0 4
59141: PPUSH
59142: LD_VAR 0 5
59146: PPUSH
59147: CALL 62243 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59151: LD_VAR 0 1
59155: PUSH
59156: LD_INT 251
59158: EQUAL
59159: PUSH
59160: LD_VAR 0 2
59164: PPUSH
59165: CALL_OW 264
59169: PUSH
59170: LD_INT 81
59172: EQUAL
59173: AND
59174: IFFALSE 59195
// MinerDetonateMine ( unit , x , y ) ;
59176: LD_VAR 0 2
59180: PPUSH
59181: LD_VAR 0 4
59185: PPUSH
59186: LD_VAR 0 5
59190: PPUSH
59191: CALL 62518 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59195: LD_VAR 0 1
59199: PUSH
59200: LD_INT 252
59202: EQUAL
59203: PUSH
59204: LD_VAR 0 2
59208: PPUSH
59209: CALL_OW 264
59213: PUSH
59214: LD_INT 81
59216: EQUAL
59217: AND
59218: IFFALSE 59239
// MinerCreateMinefield ( unit , x , y ) ;
59220: LD_VAR 0 2
59224: PPUSH
59225: LD_VAR 0 4
59229: PPUSH
59230: LD_VAR 0 5
59234: PPUSH
59235: CALL 62935 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59239: LD_VAR 0 1
59243: PUSH
59244: LD_INT 253
59246: EQUAL
59247: PUSH
59248: LD_VAR 0 2
59252: PPUSH
59253: CALL_OW 257
59257: PUSH
59258: LD_INT 5
59260: EQUAL
59261: AND
59262: IFFALSE 59283
// ComBinocular ( unit , x , y ) ;
59264: LD_VAR 0 2
59268: PPUSH
59269: LD_VAR 0 4
59273: PPUSH
59274: LD_VAR 0 5
59278: PPUSH
59279: CALL 63304 0 3
// if selectedUnit then
59283: LD_VAR 0 3
59287: IFFALSE 59343
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59289: LD_VAR 0 1
59293: PUSH
59294: LD_INT 254
59296: EQUAL
59297: PUSH
59298: LD_VAR 0 2
59302: PPUSH
59303: CALL_OW 264
59307: PUSH
59308: LD_INT 99
59310: EQUAL
59311: AND
59312: PUSH
59313: LD_VAR 0 3
59317: PPUSH
59318: CALL_OW 263
59322: PUSH
59323: LD_INT 3
59325: EQUAL
59326: AND
59327: IFFALSE 59343
// HackDestroyVehicle ( unit , selectedUnit ) ;
59329: LD_VAR 0 2
59333: PPUSH
59334: LD_VAR 0 3
59338: PPUSH
59339: CALL 61607 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59343: LD_VAR 0 1
59347: PUSH
59348: LD_INT 255
59350: EQUAL
59351: PUSH
59352: LD_VAR 0 2
59356: PPUSH
59357: CALL_OW 264
59361: PUSH
59362: LD_INT 14
59364: PUSH
59365: LD_INT 53
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: IN
59372: AND
59373: PUSH
59374: LD_VAR 0 4
59378: PPUSH
59379: LD_VAR 0 5
59383: PPUSH
59384: CALL_OW 488
59388: AND
59389: IFFALSE 59413
// CutTreeXYR ( unit , x , y , 12 ) ;
59391: LD_VAR 0 2
59395: PPUSH
59396: LD_VAR 0 4
59400: PPUSH
59401: LD_VAR 0 5
59405: PPUSH
59406: LD_INT 12
59408: PPUSH
59409: CALL 59604 0 4
// if cmd = 256 then
59413: LD_VAR 0 1
59417: PUSH
59418: LD_INT 256
59420: EQUAL
59421: IFFALSE 59442
// SetFactoryWaypoint ( unit , x , y ) ;
59423: LD_VAR 0 2
59427: PPUSH
59428: LD_VAR 0 4
59432: PPUSH
59433: LD_VAR 0 5
59437: PPUSH
59438: CALL 63907 0 3
// if cmd = 257 then
59442: LD_VAR 0 1
59446: PUSH
59447: LD_INT 257
59449: EQUAL
59450: IFFALSE 59471
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59452: LD_VAR 0 2
59456: PPUSH
59457: LD_VAR 0 4
59461: PPUSH
59462: LD_VAR 0 5
59466: PPUSH
59467: CALL 64397 0 3
// if cmd = 258 then
59471: LD_VAR 0 1
59475: PUSH
59476: LD_INT 258
59478: EQUAL
59479: IFFALSE 59503
// BurnTreeXYR ( unit , x , y , 8 ) ;
59481: LD_VAR 0 2
59485: PPUSH
59486: LD_VAR 0 4
59490: PPUSH
59491: LD_VAR 0 5
59495: PPUSH
59496: LD_INT 8
59498: PPUSH
59499: CALL 59998 0 4
// end ;
59503: LD_VAR 0 6
59507: RET
// export function ComRadiation ( un ) ; var eff ; begin
59508: LD_INT 0
59510: PPUSH
59511: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
59512: LD_VAR 0 1
59516: PPUSH
59517: CALL_OW 264
59521: PUSH
59522: LD_INT 91
59524: NONEQUAL
59525: IFFALSE 59529
// exit ;
59527: GO 59599
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59529: LD_INT 68
59531: PPUSH
59532: LD_VAR 0 1
59536: PPUSH
59537: CALL_OW 255
59541: PPUSH
59542: CALL_OW 321
59546: PUSH
59547: LD_INT 2
59549: EQUAL
59550: IFFALSE 59562
// eff := 50 else
59552: LD_ADDR_VAR 0 3
59556: PUSH
59557: LD_INT 50
59559: ST_TO_ADDR
59560: GO 59570
// eff := 25 ;
59562: LD_ADDR_VAR 0 3
59566: PUSH
59567: LD_INT 25
59569: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59570: LD_VAR 0 1
59574: PPUSH
59575: CALL_OW 250
59579: PPUSH
59580: LD_VAR 0 1
59584: PPUSH
59585: CALL_OW 251
59589: PPUSH
59590: LD_VAR 0 3
59594: PPUSH
59595: CALL_OW 495
// end ;
59599: LD_VAR 0 2
59603: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59604: LD_INT 0
59606: PPUSH
59607: PPUSH
59608: PPUSH
59609: PPUSH
59610: PPUSH
59611: PPUSH
59612: PPUSH
59613: PPUSH
59614: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59615: LD_VAR 0 1
59619: PPUSH
59620: CALL_OW 302
59624: NOT
59625: PUSH
59626: LD_VAR 0 2
59630: PPUSH
59631: LD_VAR 0 3
59635: PPUSH
59636: CALL_OW 488
59640: NOT
59641: OR
59642: PUSH
59643: LD_VAR 0 4
59647: NOT
59648: OR
59649: IFFALSE 59653
// exit ;
59651: GO 59993
// list := [ ] ;
59653: LD_ADDR_VAR 0 13
59657: PUSH
59658: EMPTY
59659: ST_TO_ADDR
// if x - r < 0 then
59660: LD_VAR 0 2
59664: PUSH
59665: LD_VAR 0 4
59669: MINUS
59670: PUSH
59671: LD_INT 0
59673: LESS
59674: IFFALSE 59686
// min_x := 0 else
59676: LD_ADDR_VAR 0 7
59680: PUSH
59681: LD_INT 0
59683: ST_TO_ADDR
59684: GO 59702
// min_x := x - r ;
59686: LD_ADDR_VAR 0 7
59690: PUSH
59691: LD_VAR 0 2
59695: PUSH
59696: LD_VAR 0 4
59700: MINUS
59701: ST_TO_ADDR
// if y - r < 0 then
59702: LD_VAR 0 3
59706: PUSH
59707: LD_VAR 0 4
59711: MINUS
59712: PUSH
59713: LD_INT 0
59715: LESS
59716: IFFALSE 59728
// min_y := 0 else
59718: LD_ADDR_VAR 0 8
59722: PUSH
59723: LD_INT 0
59725: ST_TO_ADDR
59726: GO 59744
// min_y := y - r ;
59728: LD_ADDR_VAR 0 8
59732: PUSH
59733: LD_VAR 0 3
59737: PUSH
59738: LD_VAR 0 4
59742: MINUS
59743: ST_TO_ADDR
// max_x := x + r ;
59744: LD_ADDR_VAR 0 9
59748: PUSH
59749: LD_VAR 0 2
59753: PUSH
59754: LD_VAR 0 4
59758: PLUS
59759: ST_TO_ADDR
// max_y := y + r ;
59760: LD_ADDR_VAR 0 10
59764: PUSH
59765: LD_VAR 0 3
59769: PUSH
59770: LD_VAR 0 4
59774: PLUS
59775: ST_TO_ADDR
// for _x = min_x to max_x do
59776: LD_ADDR_VAR 0 11
59780: PUSH
59781: DOUBLE
59782: LD_VAR 0 7
59786: DEC
59787: ST_TO_ADDR
59788: LD_VAR 0 9
59792: PUSH
59793: FOR_TO
59794: IFFALSE 59911
// for _y = min_y to max_y do
59796: LD_ADDR_VAR 0 12
59800: PUSH
59801: DOUBLE
59802: LD_VAR 0 8
59806: DEC
59807: ST_TO_ADDR
59808: LD_VAR 0 10
59812: PUSH
59813: FOR_TO
59814: IFFALSE 59907
// begin if not ValidHex ( _x , _y ) then
59816: LD_VAR 0 11
59820: PPUSH
59821: LD_VAR 0 12
59825: PPUSH
59826: CALL_OW 488
59830: NOT
59831: IFFALSE 59835
// continue ;
59833: GO 59813
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59835: LD_VAR 0 11
59839: PPUSH
59840: LD_VAR 0 12
59844: PPUSH
59845: CALL_OW 351
59849: PUSH
59850: LD_VAR 0 11
59854: PPUSH
59855: LD_VAR 0 12
59859: PPUSH
59860: CALL_OW 554
59864: AND
59865: IFFALSE 59905
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59867: LD_ADDR_VAR 0 13
59871: PUSH
59872: LD_VAR 0 13
59876: PPUSH
59877: LD_VAR 0 13
59881: PUSH
59882: LD_INT 1
59884: PLUS
59885: PPUSH
59886: LD_VAR 0 11
59890: PUSH
59891: LD_VAR 0 12
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PPUSH
59900: CALL_OW 2
59904: ST_TO_ADDR
// end ;
59905: GO 59813
59907: POP
59908: POP
59909: GO 59793
59911: POP
59912: POP
// if not list then
59913: LD_VAR 0 13
59917: NOT
59918: IFFALSE 59922
// exit ;
59920: GO 59993
// for i in list do
59922: LD_ADDR_VAR 0 6
59926: PUSH
59927: LD_VAR 0 13
59931: PUSH
59932: FOR_IN
59933: IFFALSE 59991
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59935: LD_VAR 0 1
59939: PPUSH
59940: LD_STRING M
59942: PUSH
59943: LD_VAR 0 6
59947: PUSH
59948: LD_INT 1
59950: ARRAY
59951: PUSH
59952: LD_VAR 0 6
59956: PUSH
59957: LD_INT 2
59959: ARRAY
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: PUSH
59982: EMPTY
59983: LIST
59984: PPUSH
59985: CALL_OW 447
59989: GO 59932
59991: POP
59992: POP
// end ;
59993: LD_VAR 0 5
59997: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59998: LD_INT 0
60000: PPUSH
60001: PPUSH
60002: PPUSH
60003: PPUSH
60004: PPUSH
60005: PPUSH
60006: PPUSH
60007: PPUSH
60008: PPUSH
60009: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60010: LD_VAR 0 1
60014: PPUSH
60015: CALL_OW 302
60019: NOT
60020: PUSH
60021: LD_VAR 0 2
60025: PPUSH
60026: LD_VAR 0 3
60030: PPUSH
60031: CALL_OW 488
60035: NOT
60036: OR
60037: PUSH
60038: LD_VAR 0 4
60042: NOT
60043: OR
60044: IFFALSE 60048
// exit ;
60046: GO 60561
// list := [ ] ;
60048: LD_ADDR_VAR 0 13
60052: PUSH
60053: EMPTY
60054: ST_TO_ADDR
// if x - r < 0 then
60055: LD_VAR 0 2
60059: PUSH
60060: LD_VAR 0 4
60064: MINUS
60065: PUSH
60066: LD_INT 0
60068: LESS
60069: IFFALSE 60081
// min_x := 0 else
60071: LD_ADDR_VAR 0 7
60075: PUSH
60076: LD_INT 0
60078: ST_TO_ADDR
60079: GO 60097
// min_x := x - r ;
60081: LD_ADDR_VAR 0 7
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_VAR 0 4
60095: MINUS
60096: ST_TO_ADDR
// if y - r < 0 then
60097: LD_VAR 0 3
60101: PUSH
60102: LD_VAR 0 4
60106: MINUS
60107: PUSH
60108: LD_INT 0
60110: LESS
60111: IFFALSE 60123
// min_y := 0 else
60113: LD_ADDR_VAR 0 8
60117: PUSH
60118: LD_INT 0
60120: ST_TO_ADDR
60121: GO 60139
// min_y := y - r ;
60123: LD_ADDR_VAR 0 8
60127: PUSH
60128: LD_VAR 0 3
60132: PUSH
60133: LD_VAR 0 4
60137: MINUS
60138: ST_TO_ADDR
// max_x := x + r ;
60139: LD_ADDR_VAR 0 9
60143: PUSH
60144: LD_VAR 0 2
60148: PUSH
60149: LD_VAR 0 4
60153: PLUS
60154: ST_TO_ADDR
// max_y := y + r ;
60155: LD_ADDR_VAR 0 10
60159: PUSH
60160: LD_VAR 0 3
60164: PUSH
60165: LD_VAR 0 4
60169: PLUS
60170: ST_TO_ADDR
// for _x = min_x to max_x do
60171: LD_ADDR_VAR 0 11
60175: PUSH
60176: DOUBLE
60177: LD_VAR 0 7
60181: DEC
60182: ST_TO_ADDR
60183: LD_VAR 0 9
60187: PUSH
60188: FOR_TO
60189: IFFALSE 60306
// for _y = min_y to max_y do
60191: LD_ADDR_VAR 0 12
60195: PUSH
60196: DOUBLE
60197: LD_VAR 0 8
60201: DEC
60202: ST_TO_ADDR
60203: LD_VAR 0 10
60207: PUSH
60208: FOR_TO
60209: IFFALSE 60302
// begin if not ValidHex ( _x , _y ) then
60211: LD_VAR 0 11
60215: PPUSH
60216: LD_VAR 0 12
60220: PPUSH
60221: CALL_OW 488
60225: NOT
60226: IFFALSE 60230
// continue ;
60228: GO 60208
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60230: LD_VAR 0 11
60234: PPUSH
60235: LD_VAR 0 12
60239: PPUSH
60240: CALL_OW 351
60244: PUSH
60245: LD_VAR 0 11
60249: PPUSH
60250: LD_VAR 0 12
60254: PPUSH
60255: CALL_OW 554
60259: AND
60260: IFFALSE 60300
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60262: LD_ADDR_VAR 0 13
60266: PUSH
60267: LD_VAR 0 13
60271: PPUSH
60272: LD_VAR 0 13
60276: PUSH
60277: LD_INT 1
60279: PLUS
60280: PPUSH
60281: LD_VAR 0 11
60285: PUSH
60286: LD_VAR 0 12
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PPUSH
60295: CALL_OW 2
60299: ST_TO_ADDR
// end ;
60300: GO 60208
60302: POP
60303: POP
60304: GO 60188
60306: POP
60307: POP
// if not list then
60308: LD_VAR 0 13
60312: NOT
60313: IFFALSE 60317
// exit ;
60315: GO 60561
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60317: LD_ADDR_VAR 0 13
60321: PUSH
60322: LD_VAR 0 1
60326: PPUSH
60327: LD_VAR 0 13
60331: PPUSH
60332: LD_INT 1
60334: PPUSH
60335: LD_INT 1
60337: PPUSH
60338: CALL 21118 0 4
60342: ST_TO_ADDR
// ComStop ( flame ) ;
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL_OW 141
// for i in list do
60352: LD_ADDR_VAR 0 6
60356: PUSH
60357: LD_VAR 0 13
60361: PUSH
60362: FOR_IN
60363: IFFALSE 60394
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60365: LD_VAR 0 1
60369: PPUSH
60370: LD_VAR 0 6
60374: PUSH
60375: LD_INT 1
60377: ARRAY
60378: PPUSH
60379: LD_VAR 0 6
60383: PUSH
60384: LD_INT 2
60386: ARRAY
60387: PPUSH
60388: CALL_OW 176
60392: GO 60362
60394: POP
60395: POP
// repeat wait ( 0 0$1 ) ;
60396: LD_INT 35
60398: PPUSH
60399: CALL_OW 67
// task := GetTaskList ( flame ) ;
60403: LD_ADDR_VAR 0 14
60407: PUSH
60408: LD_VAR 0 1
60412: PPUSH
60413: CALL_OW 437
60417: ST_TO_ADDR
// if not task then
60418: LD_VAR 0 14
60422: NOT
60423: IFFALSE 60427
// exit ;
60425: GO 60561
// if task [ 1 ] [ 1 ] <> | then
60427: LD_VAR 0 14
60431: PUSH
60432: LD_INT 1
60434: ARRAY
60435: PUSH
60436: LD_INT 1
60438: ARRAY
60439: PUSH
60440: LD_STRING |
60442: NONEQUAL
60443: IFFALSE 60447
// exit ;
60445: GO 60561
// _x := task [ 1 ] [ 2 ] ;
60447: LD_ADDR_VAR 0 11
60451: PUSH
60452: LD_VAR 0 14
60456: PUSH
60457: LD_INT 1
60459: ARRAY
60460: PUSH
60461: LD_INT 2
60463: ARRAY
60464: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60465: LD_ADDR_VAR 0 12
60469: PUSH
60470: LD_VAR 0 14
60474: PUSH
60475: LD_INT 1
60477: ARRAY
60478: PUSH
60479: LD_INT 3
60481: ARRAY
60482: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60483: LD_VAR 0 11
60487: PPUSH
60488: LD_VAR 0 12
60492: PPUSH
60493: CALL_OW 351
60497: NOT
60498: PUSH
60499: LD_VAR 0 11
60503: PPUSH
60504: LD_VAR 0 12
60508: PPUSH
60509: CALL_OW 554
60513: NOT
60514: OR
60515: IFFALSE 60549
// begin task := Delete ( task , 1 ) ;
60517: LD_ADDR_VAR 0 14
60521: PUSH
60522: LD_VAR 0 14
60526: PPUSH
60527: LD_INT 1
60529: PPUSH
60530: CALL_OW 3
60534: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60535: LD_VAR 0 1
60539: PPUSH
60540: LD_VAR 0 14
60544: PPUSH
60545: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60549: LD_VAR 0 1
60553: PPUSH
60554: CALL_OW 314
60558: NOT
60559: IFFALSE 60396
// end ;
60561: LD_VAR 0 5
60565: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60566: LD_EXP 47
60570: NOT
60571: IFFALSE 60621
60573: GO 60575
60575: DISABLE
// begin initHack := true ;
60576: LD_ADDR_EXP 47
60580: PUSH
60581: LD_INT 1
60583: ST_TO_ADDR
// hackTanks := [ ] ;
60584: LD_ADDR_EXP 48
60588: PUSH
60589: EMPTY
60590: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60591: LD_ADDR_EXP 49
60595: PUSH
60596: EMPTY
60597: ST_TO_ADDR
// hackLimit := 3 ;
60598: LD_ADDR_EXP 50
60602: PUSH
60603: LD_INT 3
60605: ST_TO_ADDR
// hackDist := 12 ;
60606: LD_ADDR_EXP 51
60610: PUSH
60611: LD_INT 12
60613: ST_TO_ADDR
// hackCounter := [ ] ;
60614: LD_ADDR_EXP 52
60618: PUSH
60619: EMPTY
60620: ST_TO_ADDR
// end ;
60621: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60622: LD_EXP 47
60626: PUSH
60627: LD_INT 34
60629: PUSH
60630: LD_INT 99
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PPUSH
60637: CALL_OW 69
60641: AND
60642: IFFALSE 60895
60644: GO 60646
60646: DISABLE
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
// begin enable ;
60651: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60652: LD_ADDR_VAR 0 1
60656: PUSH
60657: LD_INT 34
60659: PUSH
60660: LD_INT 99
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PPUSH
60667: CALL_OW 69
60671: PUSH
60672: FOR_IN
60673: IFFALSE 60893
// begin if not i in hackTanks then
60675: LD_VAR 0 1
60679: PUSH
60680: LD_EXP 48
60684: IN
60685: NOT
60686: IFFALSE 60769
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60688: LD_ADDR_EXP 48
60692: PUSH
60693: LD_EXP 48
60697: PPUSH
60698: LD_EXP 48
60702: PUSH
60703: LD_INT 1
60705: PLUS
60706: PPUSH
60707: LD_VAR 0 1
60711: PPUSH
60712: CALL_OW 1
60716: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60717: LD_ADDR_EXP 49
60721: PUSH
60722: LD_EXP 49
60726: PPUSH
60727: LD_EXP 49
60731: PUSH
60732: LD_INT 1
60734: PLUS
60735: PPUSH
60736: EMPTY
60737: PPUSH
60738: CALL_OW 1
60742: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60743: LD_ADDR_EXP 52
60747: PUSH
60748: LD_EXP 52
60752: PPUSH
60753: LD_EXP 52
60757: PUSH
60758: LD_INT 1
60760: PLUS
60761: PPUSH
60762: EMPTY
60763: PPUSH
60764: CALL_OW 1
60768: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60769: LD_VAR 0 1
60773: PPUSH
60774: CALL_OW 302
60778: NOT
60779: IFFALSE 60792
// begin HackUnlinkAll ( i ) ;
60781: LD_VAR 0 1
60785: PPUSH
60786: CALL 60898 0 1
// continue ;
60790: GO 60672
// end ; HackCheckCapturedStatus ( i ) ;
60792: LD_VAR 0 1
60796: PPUSH
60797: CALL 61341 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60801: LD_ADDR_VAR 0 2
60805: PUSH
60806: LD_INT 81
60808: PUSH
60809: LD_VAR 0 1
60813: PPUSH
60814: CALL_OW 255
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 33
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 91
60835: PUSH
60836: LD_VAR 0 1
60840: PUSH
60841: LD_EXP 51
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 50
60853: PUSH
60854: EMPTY
60855: LIST
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: PPUSH
60863: CALL_OW 69
60867: ST_TO_ADDR
// if not tmp then
60868: LD_VAR 0 2
60872: NOT
60873: IFFALSE 60877
// continue ;
60875: GO 60672
// HackLink ( i , tmp ) ;
60877: LD_VAR 0 1
60881: PPUSH
60882: LD_VAR 0 2
60886: PPUSH
60887: CALL 61034 0 2
// end ;
60891: GO 60672
60893: POP
60894: POP
// end ;
60895: PPOPN 2
60897: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60898: LD_INT 0
60900: PPUSH
60901: PPUSH
60902: PPUSH
// if not hack in hackTanks then
60903: LD_VAR 0 1
60907: PUSH
60908: LD_EXP 48
60912: IN
60913: NOT
60914: IFFALSE 60918
// exit ;
60916: GO 61029
// index := GetElementIndex ( hackTanks , hack ) ;
60918: LD_ADDR_VAR 0 4
60922: PUSH
60923: LD_EXP 48
60927: PPUSH
60928: LD_VAR 0 1
60932: PPUSH
60933: CALL 20415 0 2
60937: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60938: LD_EXP 49
60942: PUSH
60943: LD_VAR 0 4
60947: ARRAY
60948: IFFALSE 61029
// begin for i in hackTanksCaptured [ index ] do
60950: LD_ADDR_VAR 0 3
60954: PUSH
60955: LD_EXP 49
60959: PUSH
60960: LD_VAR 0 4
60964: ARRAY
60965: PUSH
60966: FOR_IN
60967: IFFALSE 60993
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60969: LD_VAR 0 3
60973: PUSH
60974: LD_INT 1
60976: ARRAY
60977: PPUSH
60978: LD_VAR 0 3
60982: PUSH
60983: LD_INT 2
60985: ARRAY
60986: PPUSH
60987: CALL_OW 235
60991: GO 60966
60993: POP
60994: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60995: LD_ADDR_EXP 49
60999: PUSH
61000: LD_EXP 49
61004: PPUSH
61005: LD_VAR 0 4
61009: PPUSH
61010: EMPTY
61011: PPUSH
61012: CALL_OW 1
61016: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61017: LD_VAR 0 1
61021: PPUSH
61022: LD_INT 0
61024: PPUSH
61025: CALL_OW 505
// end ; end ;
61029: LD_VAR 0 2
61033: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61034: LD_INT 0
61036: PPUSH
61037: PPUSH
61038: PPUSH
// if not hack in hackTanks or not vehicles then
61039: LD_VAR 0 1
61043: PUSH
61044: LD_EXP 48
61048: IN
61049: NOT
61050: PUSH
61051: LD_VAR 0 2
61055: NOT
61056: OR
61057: IFFALSE 61061
// exit ;
61059: GO 61336
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61061: LD_ADDR_VAR 0 2
61065: PUSH
61066: LD_VAR 0 1
61070: PPUSH
61071: LD_VAR 0 2
61075: PPUSH
61076: LD_INT 1
61078: PPUSH
61079: LD_INT 1
61081: PPUSH
61082: CALL 21065 0 4
61086: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61087: LD_ADDR_VAR 0 5
61091: PUSH
61092: LD_EXP 48
61096: PPUSH
61097: LD_VAR 0 1
61101: PPUSH
61102: CALL 20415 0 2
61106: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61107: LD_EXP 49
61111: PUSH
61112: LD_VAR 0 5
61116: ARRAY
61117: PUSH
61118: LD_EXP 50
61122: LESS
61123: IFFALSE 61312
// begin for i := 1 to vehicles do
61125: LD_ADDR_VAR 0 4
61129: PUSH
61130: DOUBLE
61131: LD_INT 1
61133: DEC
61134: ST_TO_ADDR
61135: LD_VAR 0 2
61139: PUSH
61140: FOR_TO
61141: IFFALSE 61310
// begin if hackTanksCaptured [ index ] = hackLimit then
61143: LD_EXP 49
61147: PUSH
61148: LD_VAR 0 5
61152: ARRAY
61153: PUSH
61154: LD_EXP 50
61158: EQUAL
61159: IFFALSE 61163
// break ;
61161: GO 61310
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61163: LD_ADDR_EXP 52
61167: PUSH
61168: LD_EXP 52
61172: PPUSH
61173: LD_VAR 0 5
61177: PPUSH
61178: LD_EXP 52
61182: PUSH
61183: LD_VAR 0 5
61187: ARRAY
61188: PUSH
61189: LD_INT 1
61191: PLUS
61192: PPUSH
61193: CALL_OW 1
61197: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61198: LD_ADDR_EXP 49
61202: PUSH
61203: LD_EXP 49
61207: PPUSH
61208: LD_VAR 0 5
61212: PUSH
61213: LD_EXP 49
61217: PUSH
61218: LD_VAR 0 5
61222: ARRAY
61223: PUSH
61224: LD_INT 1
61226: PLUS
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PPUSH
61232: LD_VAR 0 2
61236: PUSH
61237: LD_VAR 0 4
61241: ARRAY
61242: PUSH
61243: LD_VAR 0 2
61247: PUSH
61248: LD_VAR 0 4
61252: ARRAY
61253: PPUSH
61254: CALL_OW 255
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PPUSH
61263: CALL 20630 0 3
61267: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61268: LD_VAR 0 2
61272: PUSH
61273: LD_VAR 0 4
61277: ARRAY
61278: PPUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: CALL_OW 255
61288: PPUSH
61289: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61293: LD_VAR 0 2
61297: PUSH
61298: LD_VAR 0 4
61302: ARRAY
61303: PPUSH
61304: CALL_OW 141
// end ;
61308: GO 61140
61310: POP
61311: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61312: LD_VAR 0 1
61316: PPUSH
61317: LD_EXP 49
61321: PUSH
61322: LD_VAR 0 5
61326: ARRAY
61327: PUSH
61328: LD_INT 0
61330: PLUS
61331: PPUSH
61332: CALL_OW 505
// end ;
61336: LD_VAR 0 3
61340: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61341: LD_INT 0
61343: PPUSH
61344: PPUSH
61345: PPUSH
61346: PPUSH
// if not hack in hackTanks then
61347: LD_VAR 0 1
61351: PUSH
61352: LD_EXP 48
61356: IN
61357: NOT
61358: IFFALSE 61362
// exit ;
61360: GO 61602
// index := GetElementIndex ( hackTanks , hack ) ;
61362: LD_ADDR_VAR 0 4
61366: PUSH
61367: LD_EXP 48
61371: PPUSH
61372: LD_VAR 0 1
61376: PPUSH
61377: CALL 20415 0 2
61381: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61382: LD_ADDR_VAR 0 3
61386: PUSH
61387: DOUBLE
61388: LD_EXP 49
61392: PUSH
61393: LD_VAR 0 4
61397: ARRAY
61398: INC
61399: ST_TO_ADDR
61400: LD_INT 1
61402: PUSH
61403: FOR_DOWNTO
61404: IFFALSE 61576
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61406: LD_ADDR_VAR 0 5
61410: PUSH
61411: LD_EXP 49
61415: PUSH
61416: LD_VAR 0 4
61420: ARRAY
61421: PUSH
61422: LD_VAR 0 3
61426: ARRAY
61427: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61428: LD_VAR 0 5
61432: PUSH
61433: LD_INT 1
61435: ARRAY
61436: PPUSH
61437: CALL_OW 302
61441: NOT
61442: PUSH
61443: LD_VAR 0 5
61447: PUSH
61448: LD_INT 1
61450: ARRAY
61451: PPUSH
61452: CALL_OW 255
61456: PUSH
61457: LD_VAR 0 1
61461: PPUSH
61462: CALL_OW 255
61466: NONEQUAL
61467: OR
61468: IFFALSE 61574
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61470: LD_VAR 0 5
61474: PUSH
61475: LD_INT 1
61477: ARRAY
61478: PPUSH
61479: CALL_OW 305
61483: PUSH
61484: LD_VAR 0 5
61488: PUSH
61489: LD_INT 1
61491: ARRAY
61492: PPUSH
61493: CALL_OW 255
61497: PUSH
61498: LD_VAR 0 1
61502: PPUSH
61503: CALL_OW 255
61507: EQUAL
61508: AND
61509: IFFALSE 61533
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61511: LD_VAR 0 5
61515: PUSH
61516: LD_INT 1
61518: ARRAY
61519: PPUSH
61520: LD_VAR 0 5
61524: PUSH
61525: LD_INT 2
61527: ARRAY
61528: PPUSH
61529: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61533: LD_ADDR_EXP 49
61537: PUSH
61538: LD_EXP 49
61542: PPUSH
61543: LD_VAR 0 4
61547: PPUSH
61548: LD_EXP 49
61552: PUSH
61553: LD_VAR 0 4
61557: ARRAY
61558: PPUSH
61559: LD_VAR 0 3
61563: PPUSH
61564: CALL_OW 3
61568: PPUSH
61569: CALL_OW 1
61573: ST_TO_ADDR
// end ; end ;
61574: GO 61403
61576: POP
61577: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61578: LD_VAR 0 1
61582: PPUSH
61583: LD_EXP 49
61587: PUSH
61588: LD_VAR 0 4
61592: ARRAY
61593: PUSH
61594: LD_INT 0
61596: PLUS
61597: PPUSH
61598: CALL_OW 505
// end ;
61602: LD_VAR 0 2
61606: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61607: LD_INT 0
61609: PPUSH
61610: PPUSH
61611: PPUSH
61612: PPUSH
// if not hack in hackTanks then
61613: LD_VAR 0 1
61617: PUSH
61618: LD_EXP 48
61622: IN
61623: NOT
61624: IFFALSE 61628
// exit ;
61626: GO 61713
// index := GetElementIndex ( hackTanks , hack ) ;
61628: LD_ADDR_VAR 0 5
61632: PUSH
61633: LD_EXP 48
61637: PPUSH
61638: LD_VAR 0 1
61642: PPUSH
61643: CALL 20415 0 2
61647: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61648: LD_ADDR_VAR 0 4
61652: PUSH
61653: DOUBLE
61654: LD_INT 1
61656: DEC
61657: ST_TO_ADDR
61658: LD_EXP 49
61662: PUSH
61663: LD_VAR 0 5
61667: ARRAY
61668: PUSH
61669: FOR_TO
61670: IFFALSE 61711
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61672: LD_EXP 49
61676: PUSH
61677: LD_VAR 0 5
61681: ARRAY
61682: PUSH
61683: LD_VAR 0 4
61687: ARRAY
61688: PUSH
61689: LD_INT 1
61691: ARRAY
61692: PUSH
61693: LD_VAR 0 2
61697: EQUAL
61698: IFFALSE 61709
// KillUnit ( vehicle ) ;
61700: LD_VAR 0 2
61704: PPUSH
61705: CALL_OW 66
61709: GO 61669
61711: POP
61712: POP
// end ;
61713: LD_VAR 0 3
61717: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61718: LD_EXP 53
61722: NOT
61723: IFFALSE 61758
61725: GO 61727
61727: DISABLE
// begin initMiner := true ;
61728: LD_ADDR_EXP 53
61732: PUSH
61733: LD_INT 1
61735: ST_TO_ADDR
// minersList := [ ] ;
61736: LD_ADDR_EXP 54
61740: PUSH
61741: EMPTY
61742: ST_TO_ADDR
// minerMinesList := [ ] ;
61743: LD_ADDR_EXP 55
61747: PUSH
61748: EMPTY
61749: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61750: LD_ADDR_EXP 56
61754: PUSH
61755: LD_INT 5
61757: ST_TO_ADDR
// end ;
61758: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61759: LD_EXP 53
61763: PUSH
61764: LD_INT 34
61766: PUSH
61767: LD_INT 81
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PPUSH
61774: CALL_OW 69
61778: AND
61779: IFFALSE 62240
61781: GO 61783
61783: DISABLE
61784: LD_INT 0
61786: PPUSH
61787: PPUSH
61788: PPUSH
61789: PPUSH
// begin enable ;
61790: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61791: LD_ADDR_VAR 0 1
61795: PUSH
61796: LD_INT 34
61798: PUSH
61799: LD_INT 81
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PPUSH
61806: CALL_OW 69
61810: PUSH
61811: FOR_IN
61812: IFFALSE 61884
// begin if not i in minersList then
61814: LD_VAR 0 1
61818: PUSH
61819: LD_EXP 54
61823: IN
61824: NOT
61825: IFFALSE 61882
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61827: LD_ADDR_EXP 54
61831: PUSH
61832: LD_EXP 54
61836: PPUSH
61837: LD_EXP 54
61841: PUSH
61842: LD_INT 1
61844: PLUS
61845: PPUSH
61846: LD_VAR 0 1
61850: PPUSH
61851: CALL_OW 1
61855: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61856: LD_ADDR_EXP 55
61860: PUSH
61861: LD_EXP 55
61865: PPUSH
61866: LD_EXP 55
61870: PUSH
61871: LD_INT 1
61873: PLUS
61874: PPUSH
61875: EMPTY
61876: PPUSH
61877: CALL_OW 1
61881: ST_TO_ADDR
// end end ;
61882: GO 61811
61884: POP
61885: POP
// for i := minerMinesList downto 1 do
61886: LD_ADDR_VAR 0 1
61890: PUSH
61891: DOUBLE
61892: LD_EXP 55
61896: INC
61897: ST_TO_ADDR
61898: LD_INT 1
61900: PUSH
61901: FOR_DOWNTO
61902: IFFALSE 62238
// begin if IsLive ( minersList [ i ] ) then
61904: LD_EXP 54
61908: PUSH
61909: LD_VAR 0 1
61913: ARRAY
61914: PPUSH
61915: CALL_OW 300
61919: IFFALSE 61947
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61921: LD_EXP 54
61925: PUSH
61926: LD_VAR 0 1
61930: ARRAY
61931: PPUSH
61932: LD_EXP 55
61936: PUSH
61937: LD_VAR 0 1
61941: ARRAY
61942: PPUSH
61943: CALL_OW 505
// if not minerMinesList [ i ] then
61947: LD_EXP 55
61951: PUSH
61952: LD_VAR 0 1
61956: ARRAY
61957: NOT
61958: IFFALSE 61962
// continue ;
61960: GO 61901
// for j := minerMinesList [ i ] downto 1 do
61962: LD_ADDR_VAR 0 2
61966: PUSH
61967: DOUBLE
61968: LD_EXP 55
61972: PUSH
61973: LD_VAR 0 1
61977: ARRAY
61978: INC
61979: ST_TO_ADDR
61980: LD_INT 1
61982: PUSH
61983: FOR_DOWNTO
61984: IFFALSE 62234
// begin side := GetSide ( minersList [ i ] ) ;
61986: LD_ADDR_VAR 0 3
61990: PUSH
61991: LD_EXP 54
61995: PUSH
61996: LD_VAR 0 1
62000: ARRAY
62001: PPUSH
62002: CALL_OW 255
62006: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62007: LD_ADDR_VAR 0 4
62011: PUSH
62012: LD_EXP 55
62016: PUSH
62017: LD_VAR 0 1
62021: ARRAY
62022: PUSH
62023: LD_VAR 0 2
62027: ARRAY
62028: PUSH
62029: LD_INT 1
62031: ARRAY
62032: PPUSH
62033: LD_EXP 55
62037: PUSH
62038: LD_VAR 0 1
62042: ARRAY
62043: PUSH
62044: LD_VAR 0 2
62048: ARRAY
62049: PUSH
62050: LD_INT 2
62052: ARRAY
62053: PPUSH
62054: CALL_OW 428
62058: ST_TO_ADDR
// if not tmp then
62059: LD_VAR 0 4
62063: NOT
62064: IFFALSE 62068
// continue ;
62066: GO 61983
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62068: LD_VAR 0 4
62072: PUSH
62073: LD_INT 81
62075: PUSH
62076: LD_VAR 0 3
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PPUSH
62085: CALL_OW 69
62089: IN
62090: PUSH
62091: LD_EXP 55
62095: PUSH
62096: LD_VAR 0 1
62100: ARRAY
62101: PUSH
62102: LD_VAR 0 2
62106: ARRAY
62107: PUSH
62108: LD_INT 1
62110: ARRAY
62111: PPUSH
62112: LD_EXP 55
62116: PUSH
62117: LD_VAR 0 1
62121: ARRAY
62122: PUSH
62123: LD_VAR 0 2
62127: ARRAY
62128: PUSH
62129: LD_INT 2
62131: ARRAY
62132: PPUSH
62133: CALL_OW 458
62137: AND
62138: IFFALSE 62232
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62140: LD_EXP 55
62144: PUSH
62145: LD_VAR 0 1
62149: ARRAY
62150: PUSH
62151: LD_VAR 0 2
62155: ARRAY
62156: PUSH
62157: LD_INT 1
62159: ARRAY
62160: PPUSH
62161: LD_EXP 55
62165: PUSH
62166: LD_VAR 0 1
62170: ARRAY
62171: PUSH
62172: LD_VAR 0 2
62176: ARRAY
62177: PUSH
62178: LD_INT 2
62180: ARRAY
62181: PPUSH
62182: LD_VAR 0 3
62186: PPUSH
62187: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62191: LD_ADDR_EXP 55
62195: PUSH
62196: LD_EXP 55
62200: PPUSH
62201: LD_VAR 0 1
62205: PPUSH
62206: LD_EXP 55
62210: PUSH
62211: LD_VAR 0 1
62215: ARRAY
62216: PPUSH
62217: LD_VAR 0 2
62221: PPUSH
62222: CALL_OW 3
62226: PPUSH
62227: CALL_OW 1
62231: ST_TO_ADDR
// end ; end ;
62232: GO 61983
62234: POP
62235: POP
// end ;
62236: GO 61901
62238: POP
62239: POP
// end ;
62240: PPOPN 4
62242: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62243: LD_INT 0
62245: PPUSH
62246: PPUSH
// result := false ;
62247: LD_ADDR_VAR 0 4
62251: PUSH
62252: LD_INT 0
62254: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62255: LD_VAR 0 1
62259: PPUSH
62260: CALL_OW 264
62264: PUSH
62265: LD_INT 81
62267: EQUAL
62268: NOT
62269: IFFALSE 62273
// exit ;
62271: GO 62513
// index := GetElementIndex ( minersList , unit ) ;
62273: LD_ADDR_VAR 0 5
62277: PUSH
62278: LD_EXP 54
62282: PPUSH
62283: LD_VAR 0 1
62287: PPUSH
62288: CALL 20415 0 2
62292: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62293: LD_EXP 55
62297: PUSH
62298: LD_VAR 0 5
62302: ARRAY
62303: PUSH
62304: LD_EXP 56
62308: GREATEREQUAL
62309: IFFALSE 62313
// exit ;
62311: GO 62513
// ComMoveXY ( unit , x , y ) ;
62313: LD_VAR 0 1
62317: PPUSH
62318: LD_VAR 0 2
62322: PPUSH
62323: LD_VAR 0 3
62327: PPUSH
62328: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62332: LD_INT 35
62334: PPUSH
62335: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62339: LD_VAR 0 1
62343: PPUSH
62344: LD_VAR 0 2
62348: PPUSH
62349: LD_VAR 0 3
62353: PPUSH
62354: CALL 52176 0 3
62358: NOT
62359: PUSH
62360: LD_VAR 0 1
62364: PPUSH
62365: CALL_OW 314
62369: AND
62370: IFFALSE 62374
// exit ;
62372: GO 62513
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62374: LD_VAR 0 2
62378: PPUSH
62379: LD_VAR 0 3
62383: PPUSH
62384: CALL_OW 428
62388: PUSH
62389: LD_VAR 0 1
62393: EQUAL
62394: PUSH
62395: LD_VAR 0 1
62399: PPUSH
62400: CALL_OW 314
62404: NOT
62405: AND
62406: IFFALSE 62332
// PlaySoundXY ( x , y , PlantMine ) ;
62408: LD_VAR 0 2
62412: PPUSH
62413: LD_VAR 0 3
62417: PPUSH
62418: LD_STRING PlantMine
62420: PPUSH
62421: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62425: LD_VAR 0 2
62429: PPUSH
62430: LD_VAR 0 3
62434: PPUSH
62435: LD_VAR 0 1
62439: PPUSH
62440: CALL_OW 255
62444: PPUSH
62445: LD_INT 0
62447: PPUSH
62448: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62452: LD_ADDR_EXP 55
62456: PUSH
62457: LD_EXP 55
62461: PPUSH
62462: LD_VAR 0 5
62466: PUSH
62467: LD_EXP 55
62471: PUSH
62472: LD_VAR 0 5
62476: ARRAY
62477: PUSH
62478: LD_INT 1
62480: PLUS
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PPUSH
62486: LD_VAR 0 2
62490: PUSH
62491: LD_VAR 0 3
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PPUSH
62500: CALL 20630 0 3
62504: ST_TO_ADDR
// result := true ;
62505: LD_ADDR_VAR 0 4
62509: PUSH
62510: LD_INT 1
62512: ST_TO_ADDR
// end ;
62513: LD_VAR 0 4
62517: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62518: LD_INT 0
62520: PPUSH
62521: PPUSH
62522: PPUSH
// if not unit in minersList then
62523: LD_VAR 0 1
62527: PUSH
62528: LD_EXP 54
62532: IN
62533: NOT
62534: IFFALSE 62538
// exit ;
62536: GO 62930
// index := GetElementIndex ( minersList , unit ) ;
62538: LD_ADDR_VAR 0 6
62542: PUSH
62543: LD_EXP 54
62547: PPUSH
62548: LD_VAR 0 1
62552: PPUSH
62553: CALL 20415 0 2
62557: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62558: LD_ADDR_VAR 0 5
62562: PUSH
62563: DOUBLE
62564: LD_EXP 55
62568: PUSH
62569: LD_VAR 0 6
62573: ARRAY
62574: INC
62575: ST_TO_ADDR
62576: LD_INT 1
62578: PUSH
62579: FOR_DOWNTO
62580: IFFALSE 62741
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62582: LD_EXP 55
62586: PUSH
62587: LD_VAR 0 6
62591: ARRAY
62592: PUSH
62593: LD_VAR 0 5
62597: ARRAY
62598: PUSH
62599: LD_INT 1
62601: ARRAY
62602: PUSH
62603: LD_VAR 0 2
62607: EQUAL
62608: PUSH
62609: LD_EXP 55
62613: PUSH
62614: LD_VAR 0 6
62618: ARRAY
62619: PUSH
62620: LD_VAR 0 5
62624: ARRAY
62625: PUSH
62626: LD_INT 2
62628: ARRAY
62629: PUSH
62630: LD_VAR 0 3
62634: EQUAL
62635: AND
62636: IFFALSE 62739
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62638: LD_EXP 55
62642: PUSH
62643: LD_VAR 0 6
62647: ARRAY
62648: PUSH
62649: LD_VAR 0 5
62653: ARRAY
62654: PUSH
62655: LD_INT 1
62657: ARRAY
62658: PPUSH
62659: LD_EXP 55
62663: PUSH
62664: LD_VAR 0 6
62668: ARRAY
62669: PUSH
62670: LD_VAR 0 5
62674: ARRAY
62675: PUSH
62676: LD_INT 2
62678: ARRAY
62679: PPUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 255
62689: PPUSH
62690: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62694: LD_ADDR_EXP 55
62698: PUSH
62699: LD_EXP 55
62703: PPUSH
62704: LD_VAR 0 6
62708: PPUSH
62709: LD_EXP 55
62713: PUSH
62714: LD_VAR 0 6
62718: ARRAY
62719: PPUSH
62720: LD_VAR 0 5
62724: PPUSH
62725: CALL_OW 3
62729: PPUSH
62730: CALL_OW 1
62734: ST_TO_ADDR
// exit ;
62735: POP
62736: POP
62737: GO 62930
// end ; end ;
62739: GO 62579
62741: POP
62742: POP
// for i := minerMinesList [ index ] downto 1 do
62743: LD_ADDR_VAR 0 5
62747: PUSH
62748: DOUBLE
62749: LD_EXP 55
62753: PUSH
62754: LD_VAR 0 6
62758: ARRAY
62759: INC
62760: ST_TO_ADDR
62761: LD_INT 1
62763: PUSH
62764: FOR_DOWNTO
62765: IFFALSE 62928
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62767: LD_EXP 55
62771: PUSH
62772: LD_VAR 0 6
62776: ARRAY
62777: PUSH
62778: LD_VAR 0 5
62782: ARRAY
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PPUSH
62788: LD_EXP 55
62792: PUSH
62793: LD_VAR 0 6
62797: ARRAY
62798: PUSH
62799: LD_VAR 0 5
62803: ARRAY
62804: PUSH
62805: LD_INT 2
62807: ARRAY
62808: PPUSH
62809: LD_VAR 0 2
62813: PPUSH
62814: LD_VAR 0 3
62818: PPUSH
62819: CALL_OW 298
62823: PUSH
62824: LD_INT 6
62826: LESS
62827: IFFALSE 62926
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62829: LD_EXP 55
62833: PUSH
62834: LD_VAR 0 6
62838: ARRAY
62839: PUSH
62840: LD_VAR 0 5
62844: ARRAY
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: PPUSH
62850: LD_EXP 55
62854: PUSH
62855: LD_VAR 0 6
62859: ARRAY
62860: PUSH
62861: LD_VAR 0 5
62865: ARRAY
62866: PUSH
62867: LD_INT 2
62869: ARRAY
62870: PPUSH
62871: LD_VAR 0 1
62875: PPUSH
62876: CALL_OW 255
62880: PPUSH
62881: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62885: LD_ADDR_EXP 55
62889: PUSH
62890: LD_EXP 55
62894: PPUSH
62895: LD_VAR 0 6
62899: PPUSH
62900: LD_EXP 55
62904: PUSH
62905: LD_VAR 0 6
62909: ARRAY
62910: PPUSH
62911: LD_VAR 0 5
62915: PPUSH
62916: CALL_OW 3
62920: PPUSH
62921: CALL_OW 1
62925: ST_TO_ADDR
// end ; end ;
62926: GO 62764
62928: POP
62929: POP
// end ;
62930: LD_VAR 0 4
62934: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62935: LD_INT 0
62937: PPUSH
62938: PPUSH
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
62943: PPUSH
62944: PPUSH
62945: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62946: LD_VAR 0 1
62950: PPUSH
62951: CALL_OW 264
62955: PUSH
62956: LD_INT 81
62958: EQUAL
62959: NOT
62960: PUSH
62961: LD_VAR 0 1
62965: PUSH
62966: LD_EXP 54
62970: IN
62971: NOT
62972: OR
62973: IFFALSE 62977
// exit ;
62975: GO 63299
// index := GetElementIndex ( minersList , unit ) ;
62977: LD_ADDR_VAR 0 6
62981: PUSH
62982: LD_EXP 54
62986: PPUSH
62987: LD_VAR 0 1
62991: PPUSH
62992: CALL 20415 0 2
62996: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62997: LD_ADDR_VAR 0 8
63001: PUSH
63002: LD_EXP 56
63006: PUSH
63007: LD_EXP 55
63011: PUSH
63012: LD_VAR 0 6
63016: ARRAY
63017: MINUS
63018: ST_TO_ADDR
// if not minesFreeAmount then
63019: LD_VAR 0 8
63023: NOT
63024: IFFALSE 63028
// exit ;
63026: GO 63299
// tmp := [ ] ;
63028: LD_ADDR_VAR 0 7
63032: PUSH
63033: EMPTY
63034: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63035: LD_ADDR_VAR 0 5
63039: PUSH
63040: DOUBLE
63041: LD_INT 1
63043: DEC
63044: ST_TO_ADDR
63045: LD_VAR 0 8
63049: PUSH
63050: FOR_TO
63051: IFFALSE 63246
// begin _d := rand ( 0 , 5 ) ;
63053: LD_ADDR_VAR 0 11
63057: PUSH
63058: LD_INT 0
63060: PPUSH
63061: LD_INT 5
63063: PPUSH
63064: CALL_OW 12
63068: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63069: LD_ADDR_VAR 0 12
63073: PUSH
63074: LD_INT 2
63076: PPUSH
63077: LD_INT 6
63079: PPUSH
63080: CALL_OW 12
63084: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63085: LD_ADDR_VAR 0 9
63089: PUSH
63090: LD_VAR 0 2
63094: PPUSH
63095: LD_VAR 0 11
63099: PPUSH
63100: LD_VAR 0 12
63104: PPUSH
63105: CALL_OW 272
63109: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63110: LD_ADDR_VAR 0 10
63114: PUSH
63115: LD_VAR 0 3
63119: PPUSH
63120: LD_VAR 0 11
63124: PPUSH
63125: LD_VAR 0 12
63129: PPUSH
63130: CALL_OW 273
63134: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63135: LD_VAR 0 9
63139: PPUSH
63140: LD_VAR 0 10
63144: PPUSH
63145: CALL_OW 488
63149: PUSH
63150: LD_VAR 0 9
63154: PUSH
63155: LD_VAR 0 10
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_VAR 0 7
63168: IN
63169: NOT
63170: AND
63171: PUSH
63172: LD_VAR 0 9
63176: PPUSH
63177: LD_VAR 0 10
63181: PPUSH
63182: CALL_OW 458
63186: NOT
63187: AND
63188: IFFALSE 63230
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63190: LD_ADDR_VAR 0 7
63194: PUSH
63195: LD_VAR 0 7
63199: PPUSH
63200: LD_VAR 0 7
63204: PUSH
63205: LD_INT 1
63207: PLUS
63208: PPUSH
63209: LD_VAR 0 9
63213: PUSH
63214: LD_VAR 0 10
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PPUSH
63223: CALL_OW 1
63227: ST_TO_ADDR
63228: GO 63244
// i := i - 1 ;
63230: LD_ADDR_VAR 0 5
63234: PUSH
63235: LD_VAR 0 5
63239: PUSH
63240: LD_INT 1
63242: MINUS
63243: ST_TO_ADDR
// end ;
63244: GO 63050
63246: POP
63247: POP
// for i in tmp do
63248: LD_ADDR_VAR 0 5
63252: PUSH
63253: LD_VAR 0 7
63257: PUSH
63258: FOR_IN
63259: IFFALSE 63297
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63261: LD_VAR 0 1
63265: PPUSH
63266: LD_VAR 0 5
63270: PUSH
63271: LD_INT 1
63273: ARRAY
63274: PPUSH
63275: LD_VAR 0 5
63279: PUSH
63280: LD_INT 2
63282: ARRAY
63283: PPUSH
63284: CALL 62243 0 3
63288: NOT
63289: IFFALSE 63295
// exit ;
63291: POP
63292: POP
63293: GO 63299
63295: GO 63258
63297: POP
63298: POP
// end ;
63299: LD_VAR 0 4
63303: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
63304: LD_INT 0
63306: PPUSH
63307: PPUSH
63308: PPUSH
63309: PPUSH
63310: PPUSH
63311: PPUSH
63312: PPUSH
63313: PPUSH
63314: PPUSH
// if GetClass ( unit ) <> class_sniper then
63315: LD_VAR 0 1
63319: PPUSH
63320: CALL_OW 257
63324: PUSH
63325: LD_INT 5
63327: NONEQUAL
63328: IFFALSE 63332
// exit ;
63330: GO 63798
// dist := 8 ;
63332: LD_ADDR_VAR 0 5
63336: PUSH
63337: LD_INT 8
63339: ST_TO_ADDR
// viewRange := 12 ;
63340: LD_ADDR_VAR 0 8
63344: PUSH
63345: LD_INT 12
63347: ST_TO_ADDR
// side := GetSide ( unit ) ;
63348: LD_ADDR_VAR 0 6
63352: PUSH
63353: LD_VAR 0 1
63357: PPUSH
63358: CALL_OW 255
63362: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63363: LD_INT 61
63365: PPUSH
63366: LD_VAR 0 6
63370: PPUSH
63371: CALL_OW 321
63375: PUSH
63376: LD_INT 2
63378: EQUAL
63379: IFFALSE 63389
// viewRange := 16 ;
63381: LD_ADDR_VAR 0 8
63385: PUSH
63386: LD_INT 16
63388: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63389: LD_VAR 0 1
63393: PPUSH
63394: LD_VAR 0 2
63398: PPUSH
63399: LD_VAR 0 3
63403: PPUSH
63404: CALL_OW 297
63408: PUSH
63409: LD_VAR 0 5
63413: GREATER
63414: IFFALSE 63493
// begin ComMoveXY ( unit , x , y ) ;
63416: LD_VAR 0 1
63420: PPUSH
63421: LD_VAR 0 2
63425: PPUSH
63426: LD_VAR 0 3
63430: PPUSH
63431: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63435: LD_INT 35
63437: PPUSH
63438: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63442: LD_VAR 0 1
63446: PPUSH
63447: LD_VAR 0 2
63451: PPUSH
63452: LD_VAR 0 3
63456: PPUSH
63457: CALL 52176 0 3
63461: NOT
63462: IFFALSE 63466
// exit ;
63464: GO 63798
// until GetDistUnitXY ( unit , x , y ) < dist ;
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_VAR 0 2
63475: PPUSH
63476: LD_VAR 0 3
63480: PPUSH
63481: CALL_OW 297
63485: PUSH
63486: LD_VAR 0 5
63490: LESS
63491: IFFALSE 63435
// end ; ComTurnXY ( unit , x , y ) ;
63493: LD_VAR 0 1
63497: PPUSH
63498: LD_VAR 0 2
63502: PPUSH
63503: LD_VAR 0 3
63507: PPUSH
63508: CALL_OW 118
// repeat if Multiplayer then
63512: LD_OWVAR 4
63516: IFFALSE 63527
// wait ( 35 ) else
63518: LD_INT 35
63520: PPUSH
63521: CALL_OW 67
63525: GO 63534
// wait ( 5 ) ;
63527: LD_INT 5
63529: PPUSH
63530: CALL_OW 67
// _d := GetDir ( unit ) ;
63534: LD_ADDR_VAR 0 11
63538: PUSH
63539: LD_VAR 0 1
63543: PPUSH
63544: CALL_OW 254
63548: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
63549: LD_ADDR_VAR 0 7
63553: PUSH
63554: LD_VAR 0 1
63558: PPUSH
63559: CALL_OW 250
63563: PPUSH
63564: LD_VAR 0 1
63568: PPUSH
63569: CALL_OW 251
63573: PPUSH
63574: LD_VAR 0 2
63578: PPUSH
63579: LD_VAR 0 3
63583: PPUSH
63584: CALL 54784 0 4
63588: ST_TO_ADDR
// until dir = _d ;
63589: LD_VAR 0 7
63593: PUSH
63594: LD_VAR 0 11
63598: EQUAL
63599: IFFALSE 63512
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
63601: LD_ADDR_VAR 0 9
63605: PUSH
63606: LD_VAR 0 1
63610: PPUSH
63611: CALL_OW 250
63615: PPUSH
63616: LD_VAR 0 7
63620: PPUSH
63621: LD_VAR 0 5
63625: PPUSH
63626: CALL_OW 272
63630: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63631: LD_ADDR_VAR 0 10
63635: PUSH
63636: LD_VAR 0 1
63640: PPUSH
63641: CALL_OW 251
63645: PPUSH
63646: LD_VAR 0 7
63650: PPUSH
63651: LD_VAR 0 5
63655: PPUSH
63656: CALL_OW 273
63660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63661: LD_VAR 0 9
63665: PPUSH
63666: LD_VAR 0 10
63670: PPUSH
63671: CALL_OW 488
63675: NOT
63676: IFFALSE 63680
// exit ;
63678: GO 63798
// ComAnimCustom ( unit , 1 ) ;
63680: LD_VAR 0 1
63684: PPUSH
63685: LD_INT 1
63687: PPUSH
63688: CALL_OW 592
// p := 0 ;
63692: LD_ADDR_VAR 0 12
63696: PUSH
63697: LD_INT 0
63699: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63700: LD_VAR 0 9
63704: PPUSH
63705: LD_VAR 0 10
63709: PPUSH
63710: LD_VAR 0 6
63714: PPUSH
63715: LD_VAR 0 8
63719: PPUSH
63720: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63724: LD_INT 35
63726: PPUSH
63727: CALL_OW 67
// p := Inc ( p ) ;
63731: LD_ADDR_VAR 0 12
63735: PUSH
63736: LD_VAR 0 12
63740: PPUSH
63741: CALL 54740 0 1
63745: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63746: LD_VAR 0 12
63750: PUSH
63751: LD_INT 3
63753: EQUAL
63754: PUSH
63755: LD_VAR 0 1
63759: PPUSH
63760: CALL_OW 302
63764: NOT
63765: OR
63766: PUSH
63767: LD_VAR 0 1
63771: PPUSH
63772: CALL_OW 301
63776: OR
63777: IFFALSE 63724
// RemoveSeeing ( _x , _y , side ) ;
63779: LD_VAR 0 9
63783: PPUSH
63784: LD_VAR 0 10
63788: PPUSH
63789: LD_VAR 0 6
63793: PPUSH
63794: CALL_OW 331
// end ; end_of_file end_of_file
63798: LD_VAR 0 4
63802: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63803: PPOPN 6
63805: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63806: LD_EXP 41
63810: PUSH
63811: LD_INT 4
63813: EQUAL
63814: IFFALSE 63850
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63816: LD_STRING setGameDifficulty(
63818: PUSH
63819: LD_OWVAR 67
63823: STR
63824: PUSH
63825: LD_STRING )
63827: STR
63828: PPUSH
63829: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63833: LD_STRING displayDifficulty(
63835: PUSH
63836: LD_OWVAR 67
63840: STR
63841: PUSH
63842: LD_STRING )
63844: STR
63845: PPUSH
63846: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63850: CALL 63879 0 0
// end ; end_of_file
63854: PPOPN 1
63856: END
// every 0 0$1 do
63857: GO 63859
63859: DISABLE
// begin enable ;
63860: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63861: LD_STRING updateTimer(
63863: PUSH
63864: LD_OWVAR 1
63868: STR
63869: PUSH
63870: LD_STRING );
63872: STR
63873: PPUSH
63874: CALL_OW 559
// end ;
63878: END
// export function SOS_MapStart ( ) ; begin
63879: LD_INT 0
63881: PPUSH
// UpdateFactoryWaypoints ( ) ;
63882: CALL 64255 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63886: CALL 64507 0 0
// ParseMultiDataToLua ( ) ;
63890: CALL 64654 0 0
// end ;
63894: LD_VAR 0 1
63898: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63899: LD_INT 0
63901: PPUSH
// end ;
63902: LD_VAR 0 12
63906: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63907: LD_INT 0
63909: PPUSH
63910: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63911: LD_VAR 0 1
63915: NOT
63916: PUSH
63917: LD_VAR 0 2
63921: PPUSH
63922: LD_VAR 0 3
63926: PPUSH
63927: CALL_OW 488
63931: NOT
63932: OR
63933: PUSH
63934: LD_VAR 0 1
63938: PPUSH
63939: CALL_OW 266
63943: PUSH
63944: LD_INT 3
63946: NONEQUAL
63947: PUSH
63948: LD_VAR 0 1
63952: PPUSH
63953: CALL_OW 247
63957: PUSH
63958: LD_INT 1
63960: EQUAL
63961: NOT
63962: AND
63963: OR
63964: IFFALSE 63968
// exit ;
63966: GO 64250
// if GetType ( factory ) = unit_human then
63968: LD_VAR 0 1
63972: PPUSH
63973: CALL_OW 247
63977: PUSH
63978: LD_INT 1
63980: EQUAL
63981: IFFALSE 63998
// factory := IsInUnit ( factory ) ;
63983: LD_ADDR_VAR 0 1
63987: PUSH
63988: LD_VAR 0 1
63992: PPUSH
63993: CALL_OW 310
63997: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63998: LD_VAR 0 1
64002: PPUSH
64003: CALL_OW 266
64007: PUSH
64008: LD_INT 3
64010: NONEQUAL
64011: IFFALSE 64015
// exit ;
64013: GO 64250
// for i := 1 to Count ( factoryWaypoints ) do
64015: LD_ADDR_VAR 0 5
64019: PUSH
64020: DOUBLE
64021: LD_INT 1
64023: DEC
64024: ST_TO_ADDR
64025: LD_EXP 57
64029: PPUSH
64030: CALL 17770 0 1
64034: PUSH
64035: FOR_TO
64036: IFFALSE 64198
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64038: LD_VAR 0 2
64042: PPUSH
64043: LD_VAR 0 3
64047: PPUSH
64048: CALL_OW 428
64052: PUSH
64053: LD_EXP 57
64057: PUSH
64058: LD_VAR 0 5
64062: ARRAY
64063: PUSH
64064: LD_INT 2
64066: ARRAY
64067: EQUAL
64068: IFFALSE 64100
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64070: LD_ADDR_EXP 57
64074: PUSH
64075: LD_EXP 57
64079: PPUSH
64080: LD_VAR 0 5
64084: PPUSH
64085: CALL_OW 3
64089: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64090: CALL 64255 0 0
// exit ;
64094: POP
64095: POP
64096: GO 64250
// end else
64098: GO 64196
// if factory = factoryWaypoints [ i ] [ 2 ] then
64100: LD_VAR 0 1
64104: PUSH
64105: LD_EXP 57
64109: PUSH
64110: LD_VAR 0 5
64114: ARRAY
64115: PUSH
64116: LD_INT 2
64118: ARRAY
64119: EQUAL
64120: IFFALSE 64196
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64122: LD_ADDR_EXP 57
64126: PUSH
64127: LD_EXP 57
64131: PPUSH
64132: LD_VAR 0 5
64136: PPUSH
64137: CALL_OW 3
64141: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64142: LD_ADDR_EXP 57
64146: PUSH
64147: LD_EXP 57
64151: PPUSH
64152: LD_VAR 0 1
64156: PPUSH
64157: CALL_OW 255
64161: PUSH
64162: LD_VAR 0 1
64166: PUSH
64167: LD_VAR 0 2
64171: PUSH
64172: LD_VAR 0 3
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: PPUSH
64183: CALL 53379 0 2
64187: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64188: CALL 64255 0 0
// exit ;
64192: POP
64193: POP
64194: GO 64250
// end ; end ;
64196: GO 64035
64198: POP
64199: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64200: LD_ADDR_EXP 57
64204: PUSH
64205: LD_EXP 57
64209: PPUSH
64210: LD_VAR 0 1
64214: PPUSH
64215: CALL_OW 255
64219: PUSH
64220: LD_VAR 0 1
64224: PUSH
64225: LD_VAR 0 2
64229: PUSH
64230: LD_VAR 0 3
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: PPUSH
64241: CALL 53379 0 2
64245: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64246: CALL 64255 0 0
// end ;
64250: LD_VAR 0 4
64254: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64255: LD_INT 0
64257: PPUSH
64258: PPUSH
64259: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64260: LD_STRING resetFactoryWaypoint();
64262: PPUSH
64263: CALL_OW 559
// if factoryWaypoints then
64267: LD_EXP 57
64271: IFFALSE 64392
// begin list := factoryWaypoints ;
64273: LD_ADDR_VAR 0 3
64277: PUSH
64278: LD_EXP 57
64282: ST_TO_ADDR
// for i := 1 to list do
64283: LD_ADDR_VAR 0 2
64287: PUSH
64288: DOUBLE
64289: LD_INT 1
64291: DEC
64292: ST_TO_ADDR
64293: LD_VAR 0 3
64297: PUSH
64298: FOR_TO
64299: IFFALSE 64390
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64301: LD_STRING setFactoryWaypointXY(
64303: PUSH
64304: LD_VAR 0 3
64308: PUSH
64309: LD_VAR 0 2
64313: ARRAY
64314: PUSH
64315: LD_INT 1
64317: ARRAY
64318: STR
64319: PUSH
64320: LD_STRING ,
64322: STR
64323: PUSH
64324: LD_VAR 0 3
64328: PUSH
64329: LD_VAR 0 2
64333: ARRAY
64334: PUSH
64335: LD_INT 2
64337: ARRAY
64338: STR
64339: PUSH
64340: LD_STRING ,
64342: STR
64343: PUSH
64344: LD_VAR 0 3
64348: PUSH
64349: LD_VAR 0 2
64353: ARRAY
64354: PUSH
64355: LD_INT 3
64357: ARRAY
64358: STR
64359: PUSH
64360: LD_STRING ,
64362: STR
64363: PUSH
64364: LD_VAR 0 3
64368: PUSH
64369: LD_VAR 0 2
64373: ARRAY
64374: PUSH
64375: LD_INT 4
64377: ARRAY
64378: STR
64379: PUSH
64380: LD_STRING )
64382: STR
64383: PPUSH
64384: CALL_OW 559
64388: GO 64298
64390: POP
64391: POP
// end ; end ;
64392: LD_VAR 0 1
64396: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64397: LD_INT 0
64399: PPUSH
// if HexInfo ( x , y ) = warehouse then
64400: LD_VAR 0 2
64404: PPUSH
64405: LD_VAR 0 3
64409: PPUSH
64410: CALL_OW 428
64414: PUSH
64415: LD_VAR 0 1
64419: EQUAL
64420: IFFALSE 64447
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64422: LD_ADDR_EXP 59
64426: PUSH
64427: LD_EXP 59
64431: PPUSH
64432: LD_VAR 0 1
64436: PPUSH
64437: LD_INT 0
64439: PPUSH
64440: CALL_OW 1
64444: ST_TO_ADDR
64445: GO 64498
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64447: LD_ADDR_EXP 59
64451: PUSH
64452: LD_EXP 59
64456: PPUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: LD_VAR 0 1
64466: PPUSH
64467: CALL_OW 255
64471: PUSH
64472: LD_VAR 0 1
64476: PUSH
64477: LD_VAR 0 2
64481: PUSH
64482: LD_VAR 0 3
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: PPUSH
64493: CALL_OW 1
64497: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64498: CALL 64507 0 0
// end ;
64502: LD_VAR 0 4
64506: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64507: LD_INT 0
64509: PPUSH
64510: PPUSH
64511: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64512: LD_STRING resetWarehouseGatheringPoints();
64514: PPUSH
64515: CALL_OW 559
// if warehouseGatheringPoints then
64519: LD_EXP 59
64523: IFFALSE 64649
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64525: LD_ADDR_VAR 0 3
64529: PUSH
64530: LD_EXP 59
64534: PPUSH
64535: CALL 57147 0 1
64539: ST_TO_ADDR
// for i := 1 to list do
64540: LD_ADDR_VAR 0 2
64544: PUSH
64545: DOUBLE
64546: LD_INT 1
64548: DEC
64549: ST_TO_ADDR
64550: LD_VAR 0 3
64554: PUSH
64555: FOR_TO
64556: IFFALSE 64647
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64558: LD_STRING setWarehouseGatheringPointXY(
64560: PUSH
64561: LD_VAR 0 3
64565: PUSH
64566: LD_VAR 0 2
64570: ARRAY
64571: PUSH
64572: LD_INT 1
64574: ARRAY
64575: STR
64576: PUSH
64577: LD_STRING ,
64579: STR
64580: PUSH
64581: LD_VAR 0 3
64585: PUSH
64586: LD_VAR 0 2
64590: ARRAY
64591: PUSH
64592: LD_INT 2
64594: ARRAY
64595: STR
64596: PUSH
64597: LD_STRING ,
64599: STR
64600: PUSH
64601: LD_VAR 0 3
64605: PUSH
64606: LD_VAR 0 2
64610: ARRAY
64611: PUSH
64612: LD_INT 3
64614: ARRAY
64615: STR
64616: PUSH
64617: LD_STRING ,
64619: STR
64620: PUSH
64621: LD_VAR 0 3
64625: PUSH
64626: LD_VAR 0 2
64630: ARRAY
64631: PUSH
64632: LD_INT 4
64634: ARRAY
64635: STR
64636: PUSH
64637: LD_STRING )
64639: STR
64640: PPUSH
64641: CALL_OW 559
64645: GO 64555
64647: POP
64648: POP
// end ; end ;
64649: LD_VAR 0 1
64653: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
// if not mpSidePositions then
64658: LD_EXP 42
64662: NOT
64663: IFFALSE 64667
// exit ;
64665: GO 64738
// result :=  ;
64667: LD_ADDR_VAR 0 1
64671: PUSH
64672: LD_STRING 
64674: ST_TO_ADDR
// for i := 1 to 8 do
64675: LD_ADDR_VAR 0 2
64679: PUSH
64680: DOUBLE
64681: LD_INT 1
64683: DEC
64684: ST_TO_ADDR
64685: LD_INT 8
64687: PUSH
64688: FOR_TO
64689: IFFALSE 64719
// begin result := result & mpSidePositions [ i ] & ; ;
64691: LD_ADDR_VAR 0 1
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_EXP 42
64705: PUSH
64706: LD_VAR 0 2
64710: ARRAY
64711: STR
64712: PUSH
64713: LD_STRING ;
64715: STR
64716: ST_TO_ADDR
// end ;
64717: GO 64688
64719: POP
64720: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64721: LD_STRING setMultiplayerRealPosition("
64723: PUSH
64724: LD_VAR 0 1
64728: STR
64729: PUSH
64730: LD_STRING ");
64732: STR
64733: PPUSH
64734: CALL_OW 559
// end ;
64738: LD_VAR 0 1
64742: RET
