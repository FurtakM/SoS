// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5688 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7031 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 8989 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9105 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9641 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 15277 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 57844 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 24
 359: PUSH
 360: LD_INT 36
 362: PUSH
 363: LD_INT 48
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 958 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 381: LD_ADDR_VAR 0 8
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: LD_INT 5
 391: PUSH
 392: LD_INT 7
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// uc_side := side ;
 406: LD_ADDR_OWVAR 20
 410: PUSH
 411: LD_VAR 0 1
 415: ST_TO_ADDR
// uc_nation := 2 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 2
 423: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 424: LD_ADDR_EXP 14
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: LD_STRING 
 437: PPUSH
 438: LD_VAR 0 8
 442: PPUSH
 443: LD_INT 800
 445: PUSH
 446: LD_INT 120
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PPUSH
 457: LD_INT 10
 459: PUSH
 460: LD_INT 11
 462: PUSH
 463: LD_INT 12
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: PUSH
 477: LD_INT 4
 479: PUSH
 480: LD_INT 6
 482: PUSH
 483: LD_INT 3
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: PPUSH
 492: CALL 23875 0 6
 496: ST_TO_ADDR
// arForceTmp := [ ] ;
 497: LD_ADDR_EXP 15
 501: PUSH
 502: EMPTY
 503: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 504: LD_ADDR_VAR 0 3
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_VAR 0 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 31
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 3
 533: PUSH
 534: LD_INT 95
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 58
 550: PUSH
 551: EMPTY
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: PPUSH
 560: CALL_OW 69
 564: PUSH
 565: FOR_IN
 566: IFFALSE 695
// begin d := GetDir ( i ) ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: LD_VAR 0 3
 577: PPUSH
 578: CALL_OW 254
 582: ST_TO_ADDR
// if d < 3 then
 583: LD_VAR 0 4
 587: PUSH
 588: LD_INT 3
 590: LESS
 591: IFFALSE 609
// d := d + 3 else
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_VAR 0 4
 602: PUSH
 603: LD_INT 3
 605: PLUS
 606: ST_TO_ADDR
 607: GO 623
// d := d - 3 ;
 609: LD_ADDR_VAR 0 4
 613: PUSH
 614: LD_VAR 0 4
 618: PUSH
 619: LD_INT 3
 621: MINUS
 622: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 623: LD_INT 0
 625: PPUSH
 626: LD_VAR 0 8
 630: PPUSH
 631: CALL_OW 381
// un := CreateHuman ;
 635: LD_ADDR_VAR 0 6
 639: PUSH
 640: CALL_OW 44
 644: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 645: LD_ADDR_EXP 15
 649: PUSH
 650: LD_EXP 15
 654: PPUSH
 655: LD_VAR 0 6
 659: PPUSH
 660: CALL 52905 0 2
 664: ST_TO_ADDR
// SetDir ( un , d ) ;
 665: LD_VAR 0 6
 669: PPUSH
 670: LD_VAR 0 4
 674: PPUSH
 675: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 679: LD_VAR 0 6
 683: PPUSH
 684: LD_VAR 0 3
 688: PPUSH
 689: CALL_OW 52
// end ;
 693: GO 565
 695: POP
 696: POP
// for i := 1 to 2 do
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: DOUBLE
 703: LD_INT 1
 705: DEC
 706: ST_TO_ADDR
 707: LD_INT 2
 709: PUSH
 710: FOR_TO
 711: IFFALSE 795
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 713: LD_INT 14
 715: PPUSH
 716: LD_INT 2
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 31
 724: PPUSH
 725: LD_INT 100
 727: PPUSH
 728: CALL 20054 0 5
// un := CreateVehicle ;
 732: LD_ADDR_VAR 0 6
 736: PUSH
 737: CALL_OW 45
 741: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 742: LD_VAR 0 6
 746: PPUSH
 747: LD_INT 102
 749: PPUSH
 750: LD_INT 31
 752: PPUSH
 753: LD_INT 6
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 763: LD_INT 0
 765: PPUSH
 766: LD_VAR 0 8
 770: PUSH
 771: LD_INT 2
 773: PLUS
 774: PPUSH
 775: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_VAR 0 6
 788: PPUSH
 789: CALL_OW 52
// end ;
 793: GO 710
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_VAR 0 1
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 21
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PPUSH
 828: CALL_OW 69
 832: PUSH
 833: FOR_IN
 834: IFFALSE 867
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 836: LD_VAR 0 3
 840: PPUSH
 841: LD_INT 3
 843: PUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 7
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: PUSH
 855: LD_OWVAR 67
 859: ARRAY
 860: PPUSH
 861: CALL_OW 241
 865: GO 833
 867: POP
 868: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 869: LD_ADDR_VAR 0 3
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 30
 888: PUSH
 889: LD_INT 32
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PPUSH
 900: CALL_OW 69
 904: PUSH
 905: FOR_IN
 906: IFFALSE 951
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 908: LD_VAR 0 3
 912: PPUSH
 913: LD_INT 27
 915: PUSH
 916: LD_INT 25
 918: PUSH
 919: LD_INT 28
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_VAR 0 3
 935: PUSH
 936: LD_INT 4
 938: MOD
 939: PUSH
 940: LD_INT 1
 942: PLUS
 943: ARRAY
 944: PPUSH
 945: CALL_OW 431
 949: GO 905
 951: POP
 952: POP
// end ;
 953: LD_VAR 0 2
 957: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 958: LD_INT 0
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 964: LD_ADDR_VAR 0 5
 968: PUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 517
 981: ST_TO_ADDR
// if not tmp then
 982: LD_VAR 0 5
 986: NOT
 987: IFFALSE 991
// exit ;
 989: GO 1233
// for i := 1 to n do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1231
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1009: LD_ADDR_VAR 0 6
1013: PUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_VAR 0 5
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 12
1030: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1031: LD_VAR 0 5
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PUSH
1040: LD_VAR 0 6
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 2
1053: ARRAY
1054: PUSH
1055: LD_VAR 0 6
1059: ARRAY
1060: PPUSH
1061: LD_EXP 3
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1077: LD_ADDR_EXP 13
1081: PUSH
1082: LD_EXP 13
1086: PPUSH
1087: LD_EXP 13
1091: PUSH
1092: LD_INT 1
1094: PLUS
1095: PPUSH
1096: LD_VAR 0 5
1100: PUSH
1101: LD_INT 1
1103: ARRAY
1104: PUSH
1105: LD_VAR 0 6
1109: ARRAY
1110: PPUSH
1111: CALL_OW 2
1115: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1116: LD_ADDR_EXP 13
1120: PUSH
1121: LD_EXP 13
1125: PPUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 1
1133: PLUS
1134: PPUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_INT 2
1142: ARRAY
1143: PUSH
1144: LD_VAR 0 6
1148: ARRAY
1149: PPUSH
1150: CALL_OW 2
1154: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1155: LD_ADDR_VAR 0 5
1159: PUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_VAR 0 5
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 6
1181: PPUSH
1182: CALL_OW 3
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_VAR 0 5
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: LD_VAR 0 5
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 6
1218: PPUSH
1219: CALL_OW 3
1223: PPUSH
1224: CALL_OW 1
1228: ST_TO_ADDR
// end ;
1229: GO 1006
1231: POP
1232: POP
// end ;
1233: LD_VAR 0 3
1237: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1238: LD_INT 0
1240: PPUSH
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
1246: PPUSH
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
1255: PPUSH
1256: PPUSH
1257: PPUSH
1258: PPUSH
1259: PPUSH
1260: PPUSH
1261: PPUSH
1262: PPUSH
1263: PPUSH
1264: PPUSH
1265: PPUSH
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
// enable ;
1271: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1272: LD_ADDR_VAR 0 11
1276: PUSH
1277: LD_INT 81
1279: PUSH
1280: LD_VAR 0 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// if tmp then
1294: LD_VAR 0 11
1298: IFFALSE 1319
// enemySide := GetSide ( tmp [ 1 ] ) ;
1300: LD_ADDR_VAR 0 38
1304: PUSH
1305: LD_VAR 0 11
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 255
1318: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1319: LD_ADDR_VAR 0 26
1323: PUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: LD_INT 81
1331: PUSH
1332: LD_VAR 0 1
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PPUSH
1341: CALL_OW 70
1345: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 27
1350: PUSH
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1373: LD_ADDR_VAR 0 13
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_VAR 0 1
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 50
1392: PUSH
1393: EMPTY
1394: LIST
1395: PUSH
1396: LD_INT 34
1398: PUSH
1399: LD_INT 31
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 69
1415: ST_TO_ADDR
// if ct then
1416: LD_VAR 0 13
1420: IFFALSE 1511
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1422: LD_ADDR_VAR 0 15
1426: PUSH
1427: LD_INT 22
1429: PUSH
1430: LD_VAR 0 1
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 3
1441: PUSH
1442: LD_INT 61
1444: PUSH
1445: EMPTY
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PUSH
1458: LD_INT 33
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL_OW 69
1478: ST_TO_ADDR
// if veh then
1479: LD_VAR 0 15
1483: IFFALSE 1511
// for i in veh do
1485: LD_ADDR_VAR 0 9
1489: PUSH
1490: LD_VAR 0 15
1494: PUSH
1495: FOR_IN
1496: IFFALSE 1509
// Connect ( i ) ;
1498: LD_VAR 0 9
1502: PPUSH
1503: CALL 23522 0 1
1507: GO 1495
1509: POP
1510: POP
// end ; vehicles := arVehicles ;
1511: LD_ADDR_VAR 0 30
1515: PUSH
1516: LD_EXP 8
1520: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1521: LD_ADDR_VAR 0 36
1525: PUSH
1526: LD_VAR 0 3
1530: PPUSH
1531: LD_INT 22
1533: PUSH
1534: LD_VAR 0 1
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 30
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 30
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// if depot then
1580: LD_VAR 0 36
1584: IFFALSE 1600
// depot := depot [ 1 ] ;
1586: LD_ADDR_VAR 0 36
1590: PUSH
1591: LD_VAR 0 36
1595: PUSH
1596: LD_INT 1
1598: ARRAY
1599: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1600: LD_ADDR_VAR 0 22
1604: PUSH
1605: LD_VAR 0 5
1609: PPUSH
1610: LD_INT 25
1612: PUSH
1613: LD_INT 4
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 50
1622: PUSH
1623: EMPTY
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 72
1634: ST_TO_ADDR
// if arTech then
1635: LD_EXP 5
1639: IFFALSE 2001
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1641: LD_ADDR_VAR 0 16
1645: PUSH
1646: LD_VAR 0 3
1650: PPUSH
1651: LD_INT 22
1653: PUSH
1654: LD_VAR 0 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 50
1665: PUSH
1666: EMPTY
1667: LIST
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 30
1674: PUSH
1675: LD_INT 6
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 30
1684: PUSH
1685: LD_INT 7
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 30
1694: PUSH
1695: LD_INT 8
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 70
1717: ST_TO_ADDR
// if lab then
1718: LD_VAR 0 16
1722: IFFALSE 2001
// begin for j := 1 to Count ( lab ) do
1724: LD_ADDR_VAR 0 10
1728: PUSH
1729: DOUBLE
1730: LD_INT 1
1732: DEC
1733: ST_TO_ADDR
1734: LD_VAR 0 16
1738: PPUSH
1739: CALL 17316 0 1
1743: PUSH
1744: FOR_TO
1745: IFFALSE 1999
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1747: LD_VAR 0 16
1751: PUSH
1752: LD_VAR 0 10
1756: ARRAY
1757: PPUSH
1758: CALL_OW 461
1762: PUSH
1763: LD_INT 2
1765: EQUAL
1766: IFFALSE 1849
// begin for i in arTech do
1768: LD_ADDR_VAR 0 9
1772: PUSH
1773: LD_EXP 5
1777: PUSH
1778: FOR_IN
1779: IFFALSE 1845
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1781: LD_VAR 0 16
1785: PUSH
1786: LD_VAR 0 10
1790: ARRAY
1791: PPUSH
1792: LD_VAR 0 9
1796: PPUSH
1797: CALL_OW 430
1801: PUSH
1802: LD_VAR 0 9
1806: PPUSH
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 321
1816: PUSH
1817: LD_INT 1
1819: EQUAL
1820: AND
1821: IFFALSE 1843
// begin AddComResearch ( lab [ j ] , i ) ;
1823: LD_VAR 0 16
1827: PUSH
1828: LD_VAR 0 10
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 9
1838: PPUSH
1839: CALL_OW 184
// end ;
1843: GO 1778
1845: POP
1846: POP
// end else
1847: GO 1997
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1849: LD_VAR 0 16
1853: PUSH
1854: LD_VAR 0 10
1858: ARRAY
1859: PPUSH
1860: CALL_OW 461
1864: PUSH
1865: LD_INT 6
1867: EQUAL
1868: IFFALSE 1997
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1870: LD_ADDR_VAR 0 9
1874: PUSH
1875: LD_VAR 0 22
1879: PPUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 120
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 72
1901: PUSH
1902: FOR_IN
1903: IFFALSE 1995
// begin inside := IsInUnit ( i ) ;
1905: LD_ADDR_VAR 0 14
1909: PUSH
1910: LD_VAR 0 9
1914: PPUSH
1915: CALL_OW 310
1919: ST_TO_ADDR
// if not inside then
1920: LD_VAR 0 14
1924: NOT
1925: IFFALSE 1949
// ComEnterUnit ( i , lab [ j ] ) else
1927: LD_VAR 0 9
1931: PPUSH
1932: LD_VAR 0 16
1936: PUSH
1937: LD_VAR 0 10
1941: ARRAY
1942: PPUSH
1943: CALL_OW 120
1947: GO 1993
// if BuildingStatus ( inside ) = bs_idle then
1949: LD_VAR 0 14
1953: PPUSH
1954: CALL_OW 461
1958: PUSH
1959: LD_INT 2
1961: EQUAL
1962: IFFALSE 1993
// begin ComExitBuilding ( i ) ;
1964: LD_VAR 0 9
1968: PPUSH
1969: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
1973: LD_VAR 0 9
1977: PPUSH
1978: LD_VAR 0 16
1982: PUSH
1983: LD_VAR 0 10
1987: ARRAY
1988: PPUSH
1989: CALL_OW 180
// end ; end ;
1993: GO 1902
1995: POP
1996: POP
// end ;
1997: GO 1744
1999: POP
2000: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2001: LD_ADDR_VAR 0 33
2005: PUSH
2006: LD_VAR 0 3
2010: PPUSH
2011: LD_INT 22
2013: PUSH
2014: LD_VAR 0 1
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 30
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 50
2035: PUSH
2036: EMPTY
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 70
2048: ST_TO_ADDR
// if fac then
2049: LD_VAR 0 33
2053: IFFALSE 2388
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2055: LD_VAR 0 33
2059: PUSH
2060: LD_INT 1
2062: ARRAY
2063: PPUSH
2064: CALL_OW 461
2068: PUSH
2069: LD_INT 2
2071: EQUAL
2072: IFFALSE 2388
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2074: LD_ADDR_VAR 0 34
2078: PUSH
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 2
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 32
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 30
2099: PUSH
2100: LD_INT 33
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 35
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 70
2130: ST_TO_ADDR
// if emptyTowers then
2131: LD_VAR 0 34
2135: IFFALSE 2185
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2137: LD_ADDR_VAR 0 35
2141: PUSH
2142: LD_VAR 0 34
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PPUSH
2151: LD_VAR 0 3
2155: PPUSH
2156: CALL 25561 0 2
2160: ST_TO_ADDR
// if weapon then
2161: LD_VAR 0 35
2165: IFFALSE 2185
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2167: LD_VAR 0 34
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PPUSH
2176: LD_VAR 0 35
2180: PPUSH
2181: CALL_OW 148
// end ; if arConstructList then
2185: LD_EXP 6
2189: IFFALSE 2388
// for i := 1 to Count ( arConstructList ) do
2191: LD_ADDR_VAR 0 9
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_EXP 6
2205: PPUSH
2206: CALL 17316 0 1
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2386
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2214: LD_VAR 0 33
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PPUSH
2223: LD_EXP 6
2227: PUSH
2228: LD_VAR 0 9
2232: ARRAY
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PPUSH
2238: LD_EXP 6
2242: PUSH
2243: LD_VAR 0 9
2247: ARRAY
2248: PUSH
2249: LD_INT 2
2251: ARRAY
2252: PPUSH
2253: LD_EXP 6
2257: PUSH
2258: LD_VAR 0 9
2262: ARRAY
2263: PUSH
2264: LD_INT 3
2266: ARRAY
2267: PPUSH
2268: LD_EXP 6
2272: PUSH
2273: LD_VAR 0 9
2277: ARRAY
2278: PUSH
2279: LD_INT 4
2281: ARRAY
2282: PPUSH
2283: CALL_OW 448
2287: IFFALSE 2384
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2289: LD_VAR 0 33
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PPUSH
2298: LD_EXP 6
2302: PUSH
2303: LD_VAR 0 9
2307: ARRAY
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: PPUSH
2313: LD_EXP 6
2317: PUSH
2318: LD_VAR 0 9
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: PPUSH
2328: LD_EXP 6
2332: PUSH
2333: LD_VAR 0 9
2337: ARRAY
2338: PUSH
2339: LD_INT 3
2341: ARRAY
2342: PPUSH
2343: LD_EXP 6
2347: PUSH
2348: LD_VAR 0 9
2352: ARRAY
2353: PUSH
2354: LD_INT 4
2356: ARRAY
2357: PPUSH
2358: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2362: LD_ADDR_EXP 6
2366: PUSH
2367: LD_EXP 6
2371: PPUSH
2372: LD_VAR 0 9
2376: PPUSH
2377: CALL_OW 3
2381: ST_TO_ADDR
// break ;
2382: GO 2386
// end ; end ;
2384: GO 2211
2386: POP
2387: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2388: LD_ADDR_VAR 0 11
2392: PUSH
2393: LD_VAR 0 3
2397: PPUSH
2398: LD_INT 21
2400: PUSH
2401: LD_INT 3
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 57
2413: PUSH
2414: EMPTY
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 24
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: PPUSH
2443: CALL_OW 70
2447: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2448: LD_ADDR_VAR 0 21
2452: PUSH
2453: LD_VAR 0 3
2457: PPUSH
2458: CALL_OW 435
2462: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2463: LD_ADDR_VAR 0 18
2467: PUSH
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 25
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 50
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 72
2497: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2498: LD_VAR 0 18
2502: PPUSH
2503: LD_INT 3
2505: PUSH
2506: LD_INT 120
2508: PUSH
2509: LD_INT 7
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: LD_INT 54
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: PUSH
2542: LD_VAR 0 33
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PPUSH
2551: CALL_OW 302
2555: AND
2556: IFFALSE 2615
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2558: LD_VAR 0 18
2562: PPUSH
2563: LD_INT 3
2565: PUSH
2566: LD_INT 120
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 3
2582: PUSH
2583: LD_INT 54
2585: PUSH
2586: EMPTY
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PPUSH
2597: CALL_OW 72
2601: PPUSH
2602: LD_VAR 0 33
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2615: LD_ADDR_VAR 0 16
2619: PUSH
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_INT 6
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 30
2640: PUSH
2641: LD_INT 7
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 30
2650: PUSH
2651: LD_INT 8
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 70
2668: ST_TO_ADDR
// if sci then
2669: LD_VAR 0 22
2673: IFFALSE 2916
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2675: LD_ADDR_VAR 0 24
2679: PUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: LD_INT 95
2687: PUSH
2688: LD_VAR 0 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 120
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: ST_TO_ADDR
// if hurtUnits then
2716: LD_VAR 0 24
2720: IFFALSE 2815
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2722: LD_ADDR_VAR 0 9
2726: PUSH
2727: LD_VAR 0 22
2731: PPUSH
2732: LD_INT 3
2734: PUSH
2735: LD_INT 120
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 72
2753: PUSH
2754: FOR_IN
2755: IFFALSE 2811
// begin SetTag ( i , tHealer ) ;
2757: LD_VAR 0 9
2761: PPUSH
2762: LD_INT 10
2764: PPUSH
2765: CALL_OW 109
// if IsInUnit ( i ) then
2769: LD_VAR 0 9
2773: PPUSH
2774: CALL_OW 310
2778: IFFALSE 2791
// ComExitBuilding ( i ) else
2780: LD_VAR 0 9
2784: PPUSH
2785: CALL_OW 122
2789: GO 2809
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2791: LD_VAR 0 9
2795: PPUSH
2796: LD_VAR 0 24
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: CALL_OW 128
// end ;
2809: GO 2754
2811: POP
2812: POP
// end else
2813: GO 2916
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2815: LD_VAR 0 16
2819: PUSH
2820: LD_VAR 0 22
2824: PPUSH
2825: LD_INT 120
2827: PUSH
2828: LD_INT 10
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: AND
2840: IFFALSE 2916
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2842: LD_ADDR_VAR 0 9
2846: PUSH
2847: LD_VAR 0 22
2851: PPUSH
2852: LD_INT 120
2854: PUSH
2855: LD_INT 10
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: CALL_OW 72
2866: PUSH
2867: FOR_IN
2868: IFFALSE 2914
// begin SetTag ( i , 0 ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_INT 0
2877: PPUSH
2878: CALL_OW 109
// if not IsInUnit ( i ) then
2882: LD_VAR 0 9
2886: PPUSH
2887: CALL_OW 310
2891: NOT
2892: IFFALSE 2912
// ComEnterUnit ( i , lab [ 1 ] ) ;
2894: LD_VAR 0 9
2898: PPUSH
2899: LD_VAR 0 16
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: PPUSH
2908: CALL_OW 120
// end ;
2912: GO 2867
2914: POP
2915: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2916: LD_ADDR_VAR 0 17
2920: PUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 25
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 72
2940: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2941: LD_ADDR_VAR 0 37
2945: PUSH
2946: LD_EXP 7
2950: ST_TO_ADDR
// if eng then
2951: LD_VAR 0 17
2955: IFFALSE 3789
// begin for i in eng do
2957: LD_ADDR_VAR 0 9
2961: PUSH
2962: LD_VAR 0 17
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3787
// begin tag := GetTag ( i ) ;
2970: LD_ADDR_VAR 0 19
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: CALL_OW 110
2984: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
2985: LD_VAR 0 9
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 308
2999: IFFALSE 3030
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3001: LD_VAR 0 9
3005: PPUSH
3006: LD_VAR 0 7
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 7
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PPUSH
3024: CALL_OW 111
// continue ;
3028: GO 2967
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3030: LD_VAR 0 9
3034: PPUSH
3035: CALL_OW 256
3039: PUSH
3040: LD_INT 800
3042: LESS
3043: PUSH
3044: LD_VAR 0 19
3048: PUSH
3049: LD_INT 1
3051: NONEQUAL
3052: AND
3053: IFFALSE 3103
// begin SetTag ( i , tHeal ) ;
3055: LD_VAR 0 9
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3067: LD_VAR 0 9
3071: PPUSH
3072: LD_VAR 0 6
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: LD_VAR 0 6
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: CALL_OW 111
// AddComHold ( i ) ;
3094: LD_VAR 0 9
3098: PPUSH
3099: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3103: LD_VAR 0 19
3107: PUSH
3108: LD_INT 1
3110: EQUAL
3111: PUSH
3112: LD_VAR 0 9
3116: PPUSH
3117: CALL_OW 256
3121: PUSH
3122: LD_INT 1000
3124: EQUAL
3125: AND
3126: IFFALSE 3140
// SetTag ( i , 0 ) ;
3128: LD_VAR 0 9
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 109
// if not tag then
3140: LD_VAR 0 19
3144: NOT
3145: IFFALSE 3312
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3147: LD_ADDR_VAR 0 12
3151: PUSH
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 57
3159: PUSH
3160: EMPTY
3161: LIST
3162: PPUSH
3163: CALL_OW 70
3167: ST_TO_ADDR
// if undone then
3168: LD_VAR 0 12
3172: IFFALSE 3194
// begin ComComplete ( i , undone [ 1 ] ) ;
3174: LD_VAR 0 9
3178: PPUSH
3179: LD_VAR 0 12
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: CALL 23414 0 2
// continue ;
3192: GO 2967
// end ; if cr or tmp or buildingsToBuild then
3194: LD_VAR 0 21
3198: PUSH
3199: LD_VAR 0 11
3203: OR
3204: PUSH
3205: LD_VAR 0 37
3209: OR
3210: IFFALSE 3286
// begin if IsInUnit ( i ) then
3212: LD_VAR 0 9
3216: PPUSH
3217: CALL_OW 310
3221: IFFALSE 3232
// ComExitBuilding ( i ) ;
3223: LD_VAR 0 9
3227: PPUSH
3228: CALL_OW 122
// if tmp then
3232: LD_VAR 0 11
3236: IFFALSE 3252
// SetTag ( i , tRepair ) else
3238: LD_VAR 0 9
3242: PPUSH
3243: LD_INT 3
3245: PPUSH
3246: CALL_OW 109
3250: GO 3284
// if cr then
3252: LD_VAR 0 21
3256: IFFALSE 3272
// SetTag ( i , tCrates ) else
3258: LD_VAR 0 9
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 109
3270: GO 3284
// SetTag ( i , tBuild ) ;
3272: LD_VAR 0 9
3276: PPUSH
3277: LD_INT 5
3279: PPUSH
3280: CALL_OW 109
// end else
3284: GO 3312
// if not IsInUnit ( i ) then
3286: LD_VAR 0 9
3290: PPUSH
3291: CALL_OW 310
3295: NOT
3296: IFFALSE 3312
// ComEnterUnit ( i , depot ) ;
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_VAR 0 36
3307: PPUSH
3308: CALL_OW 120
// end ; if tag = tRepair then
3312: LD_VAR 0 19
3316: PUSH
3317: LD_INT 3
3319: EQUAL
3320: IFFALSE 3426
// begin if IsInUnit ( i ) then
3322: LD_VAR 0 9
3326: PPUSH
3327: CALL_OW 310
3331: IFFALSE 3344
// begin ComExitBuilding ( i ) ;
3333: LD_VAR 0 9
3337: PPUSH
3338: CALL_OW 122
// continue ;
3342: GO 2967
// end ; if not tmp then
3344: LD_VAR 0 11
3348: NOT
3349: IFFALSE 3365
// begin SetTag ( i , 0 ) ;
3351: LD_VAR 0 9
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: CALL_OW 109
// continue ;
3363: GO 2967
// end ; if not HasTask ( i ) then
3365: LD_VAR 0 9
3369: PPUSH
3370: CALL_OW 314
3374: NOT
3375: IFFALSE 3395
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3377: LD_VAR 0 9
3381: PPUSH
3382: LD_VAR 0 11
3386: PUSH
3387: LD_INT 1
3389: ARRAY
3390: PPUSH
3391: CALL_OW 130
// if not IsInArea ( i , area ) then
3395: LD_VAR 0 9
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 308
3409: NOT
3410: IFFALSE 3426
// ComMoveToArea ( i , area ) ;
3412: LD_VAR 0 9
3416: PPUSH
3417: LD_VAR 0 3
3421: PPUSH
3422: CALL_OW 113
// end ; if tag = tBuild then
3426: LD_VAR 0 19
3430: PUSH
3431: LD_INT 5
3433: EQUAL
3434: IFFALSE 3640
// begin if IsInUnit ( i ) then
3436: LD_VAR 0 9
3440: PPUSH
3441: CALL_OW 310
3445: IFFALSE 3458
// begin ComExitBuilding ( i ) ;
3447: LD_VAR 0 9
3451: PPUSH
3452: CALL_OW 122
// continue ;
3456: GO 2967
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3458: LD_VAR 0 37
3462: NOT
3463: PUSH
3464: LD_VAR 0 26
3468: OR
3469: PUSH
3470: LD_VAR 0 27
3474: OR
3475: IFFALSE 3493
// begin SetTag ( i , 0 ) ;
3477: LD_VAR 0 9
3481: PPUSH
3482: LD_INT 0
3484: PPUSH
3485: CALL_OW 109
// continue ;
3489: GO 2967
// end else
3491: GO 3532
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3493: LD_VAR 0 36
3497: PPUSH
3498: LD_VAR 0 37
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL 56828 0 2
3515: NOT
3516: IFFALSE 3532
// begin SetTag ( i , 0 ) ;
3518: LD_VAR 0 9
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 109
// continue ;
3530: GO 2967
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3532: LD_ADDR_VAR 0 12
3536: PUSH
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_INT 57
3544: PUSH
3545: EMPTY
3546: LIST
3547: PPUSH
3548: CALL_OW 70
3552: ST_TO_ADDR
// if undone then
3553: LD_VAR 0 12
3557: IFFALSE 3579
// begin ComComplete ( i , undone [ 1 ] ) ;
3559: LD_VAR 0 9
3563: PPUSH
3564: LD_VAR 0 12
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL 23414 0 2
// continue ;
3577: GO 2967
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3579: LD_VAR 0 9
3583: PPUSH
3584: LD_VAR 0 37
3588: PUSH
3589: LD_INT 1
3591: ARRAY
3592: PUSH
3593: LD_INT 1
3595: ARRAY
3596: PPUSH
3597: LD_VAR 0 37
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PUSH
3606: LD_INT 2
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 37
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PUSH
3619: LD_INT 3
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 37
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PUSH
3632: LD_INT 4
3634: ARRAY
3635: PPUSH
3636: CALL_OW 145
// end ; if tag = tCrates then
3640: LD_VAR 0 19
3644: PUSH
3645: LD_INT 2
3647: EQUAL
3648: IFFALSE 3785
// begin if IsInUnit ( i ) then
3650: LD_VAR 0 9
3654: PPUSH
3655: CALL_OW 310
3659: IFFALSE 3672
// begin ComExitBuilding ( i ) ;
3661: LD_VAR 0 9
3665: PPUSH
3666: CALL_OW 122
// continue ;
3670: GO 2967
// end ; if not cr then
3672: LD_VAR 0 21
3676: NOT
3677: IFFALSE 3693
// begin SetTag ( i , 0 ) ;
3679: LD_VAR 0 9
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 109
// continue ;
3691: GO 2967
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3693: LD_VAR 0 9
3697: PPUSH
3698: CALL_OW 314
3702: NOT
3703: PUSH
3704: LD_INT 81
3706: PUSH
3707: LD_VAR 0 1
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 92
3718: PUSH
3719: LD_VAR 0 21
3723: PUSH
3724: LD_INT 1
3726: ARRAY
3727: PUSH
3728: LD_VAR 0 21
3732: PUSH
3733: LD_INT 2
3735: ARRAY
3736: PUSH
3737: LD_INT 12
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: NOT
3755: AND
3756: IFFALSE 3785
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3758: LD_VAR 0 9
3762: PPUSH
3763: LD_VAR 0 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_VAR 0 21
3776: PUSH
3777: LD_INT 2
3779: ARRAY
3780: PPUSH
3781: CALL_OW 117
// end ; end ;
3785: GO 2967
3787: POP
3788: POP
// end ; if vehicles then
3789: LD_VAR 0 30
3793: IFFALSE 4593
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3795: LD_ADDR_VAR 0 30
3799: PUSH
3800: LD_VAR 0 30
3804: PPUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 34
3813: PUSH
3814: LD_INT 88
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 34
3823: PUSH
3824: LD_INT 32
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 50
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 72
3854: ST_TO_ADDR
// if vehicles then
3855: LD_VAR 0 30
3859: IFFALSE 4593
// begin for i in vehicles do
3861: LD_ADDR_VAR 0 9
3865: PUSH
3866: LD_VAR 0 30
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4591
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 19
3878: PUSH
3879: LD_VAR 0 9
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if not tag then
3889: LD_VAR 0 19
3893: NOT
3894: IFFALSE 4040
// begin if GetControl ( i ) = control_manual then
3896: LD_VAR 0 9
3900: PPUSH
3901: CALL_OW 263
3905: PUSH
3906: LD_INT 1
3908: EQUAL
3909: IFFALSE 4026
// begin drivers := arDrivers ;
3911: LD_ADDR_VAR 0 28
3915: PUSH
3916: LD_EXP 10
3920: ST_TO_ADDR
// if not drivers then
3921: LD_VAR 0 28
3925: NOT
3926: IFFALSE 4006
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3928: LD_ADDR_VAR 0 28
3932: PUSH
3933: LD_VAR 0 18
3937: PPUSH
3938: LD_INT 3
3940: PUSH
3941: LD_INT 120
3943: PUSH
3944: LD_INT 7
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 72
3959: ST_TO_ADDR
// if drivers then
3960: LD_VAR 0 28
3964: IFFALSE 4006
// begin SetTag ( drivers [ 1 ] , tMech ) ;
3966: LD_VAR 0 28
3970: PUSH
3971: LD_INT 1
3973: ARRAY
3974: PPUSH
3975: LD_INT 7
3977: PPUSH
3978: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
3982: LD_ADDR_EXP 10
3986: PUSH
3987: LD_EXP 10
3991: PPUSH
3992: LD_VAR 0 28
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: CALL 52905 0 2
4005: ST_TO_ADDR
// end ; end ; if drivers then
4006: LD_VAR 0 28
4010: IFFALSE 4024
// SetTag ( i , tBusy ) ;
4012: LD_VAR 0 9
4016: PPUSH
4017: LD_INT 8
4019: PPUSH
4020: CALL_OW 109
// continue ;
4024: GO 3871
// end ; SetTag ( i , tBusy ) ;
4026: LD_VAR 0 9
4030: PPUSH
4031: LD_INT 8
4033: PPUSH
4034: CALL_OW 109
// end else
4038: GO 4589
// if tag = tBusy then
4040: LD_VAR 0 19
4044: PUSH
4045: LD_INT 8
4047: EQUAL
4048: IFFALSE 4260
// begin if GetLives ( i ) = 1000 then
4050: LD_VAR 0 9
4054: PPUSH
4055: CALL_OW 256
4059: PUSH
4060: LD_INT 1000
4062: EQUAL
4063: IFFALSE 4258
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4065: LD_VAR 0 9
4069: PPUSH
4070: CALL_OW 263
4074: PUSH
4075: LD_INT 1
4077: EQUAL
4078: PUSH
4079: LD_VAR 0 9
4083: PPUSH
4084: CALL_OW 311
4088: NOT
4089: AND
4090: IFFALSE 4246
// begin drivers := arDrivers ;
4092: LD_ADDR_VAR 0 28
4096: PUSH
4097: LD_EXP 10
4101: ST_TO_ADDR
// if not drivers then
4102: LD_VAR 0 28
4106: NOT
4107: IFFALSE 4123
// begin SetTag ( i , 0 ) ;
4109: LD_VAR 0 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 109
// continue ;
4121: GO 3871
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4123: LD_VAR 0 28
4127: PUSH
4128: LD_INT 1
4130: ARRAY
4131: PPUSH
4132: CALL_OW 310
4136: PUSH
4137: LD_VAR 0 28
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: PPUSH
4146: CALL 50509 0 1
4150: NOT
4151: AND
4152: IFFALSE 4167
// ComExitBuilding ( drivers [ 1 ] ) ;
4154: LD_VAR 0 28
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PPUSH
4163: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4167: LD_VAR 0 30
4171: PPUSH
4172: LD_INT 120
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 72
4186: PUSH
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 314
4200: NOT
4201: AND
4202: PUSH
4203: LD_VAR 0 30
4207: PPUSH
4208: LD_INT 120
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 72
4222: NOT
4223: OR
4224: IFFALSE 4244
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4226: LD_VAR 0 28
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: LD_VAR 0 9
4239: PPUSH
4240: CALL_OW 120
// continue ;
4244: GO 3871
// end ; SetTag ( i , tAttack ) ;
4246: LD_VAR 0 9
4250: PPUSH
4251: LD_INT 13
4253: PPUSH
4254: CALL_OW 109
// end ; end else
4258: GO 4589
// if tag = tAttack then
4260: LD_VAR 0 19
4264: PUSH
4265: LD_INT 13
4267: EQUAL
4268: IFFALSE 4448
// begin enemy := enemyInBase ;
4270: LD_ADDR_VAR 0 25
4274: PUSH
4275: LD_VAR 0 26
4279: ST_TO_ADDR
// if not enemy then
4280: LD_VAR 0 25
4284: NOT
4285: IFFALSE 4297
// enemy := enemyOuterBase ;
4287: LD_ADDR_VAR 0 25
4291: PUSH
4292: LD_VAR 0 27
4296: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4297: LD_VAR 0 25
4301: NOT
4302: PUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_VAR 0 7
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: LD_VAR 0 7
4321: PUSH
4322: LD_INT 2
4324: ARRAY
4325: PPUSH
4326: CALL_OW 297
4330: PUSH
4331: LD_INT 10
4333: GREATER
4334: AND
4335: IFFALSE 4366
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4337: LD_VAR 0 9
4341: PPUSH
4342: LD_VAR 0 7
4346: PUSH
4347: LD_INT 1
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 7
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: PPUSH
4360: CALL_OW 111
// continue ;
4364: GO 3871
// end ; if GetLives ( i ) < 650 then
4366: LD_VAR 0 9
4370: PPUSH
4371: CALL_OW 256
4375: PUSH
4376: LD_INT 650
4378: LESS
4379: IFFALSE 4422
// begin SetTag ( i , tVehRepair ) ;
4381: LD_VAR 0 9
4385: PPUSH
4386: LD_INT 9
4388: PPUSH
4389: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4393: LD_VAR 0 9
4397: PPUSH
4398: LD_VAR 0 7
4402: PUSH
4403: LD_INT 1
4405: ARRAY
4406: PPUSH
4407: LD_VAR 0 7
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 111
// continue ;
4420: GO 3871
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4422: LD_VAR 0 9
4426: PPUSH
4427: LD_VAR 0 25
4431: PPUSH
4432: LD_VAR 0 9
4436: PPUSH
4437: CALL_OW 74
4441: PPUSH
4442: CALL_OW 115
// end else
4446: GO 4589
// if tag = tVehRepair then
4448: LD_VAR 0 19
4452: PUSH
4453: LD_INT 9
4455: EQUAL
4456: IFFALSE 4589
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 7
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 7
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: PPUSH
4481: CALL_OW 297
4485: PUSH
4486: LD_INT 10
4488: GREATER
4489: IFFALSE 4520
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4491: LD_VAR 0 9
4495: PPUSH
4496: LD_VAR 0 7
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 7
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: PPUSH
4514: CALL_OW 111
// continue ;
4518: GO 3871
// end ; if GetLives ( i ) = 1000 then
4520: LD_VAR 0 9
4524: PPUSH
4525: CALL_OW 256
4529: PUSH
4530: LD_INT 1000
4532: EQUAL
4533: IFFALSE 4549
// begin SetTag ( i , tBusy ) ;
4535: LD_VAR 0 9
4539: PPUSH
4540: LD_INT 8
4542: PPUSH
4543: CALL_OW 109
// continue ;
4547: GO 3871
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4549: LD_VAR 0 9
4553: PPUSH
4554: CALL_OW 263
4558: PUSH
4559: LD_INT 1
4561: EQUAL
4562: PUSH
4563: LD_VAR 0 9
4567: PPUSH
4568: CALL_OW 311
4572: AND
4573: IFFALSE 4589
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: CALL_OW 311
4584: PPUSH
4585: CALL 54605 0 1
// end ; end ;
4589: GO 3871
4591: POP
4592: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4593: LD_ADDR_VAR 0 23
4597: PUSH
4598: LD_VAR 0 5
4602: PPUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 25
4608: PUSH
4609: LD_INT 1
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 25
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 25
4628: PUSH
4629: LD_INT 5
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 9
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 50
4655: PUSH
4656: EMPTY
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PPUSH
4663: CALL_OW 72
4667: ST_TO_ADDR
// if sol then
4668: LD_VAR 0 23
4672: IFFALSE 5180
// begin if enemyInBase then
4674: LD_VAR 0 26
4678: IFFALSE 4857
// begin for i in sol do
4680: LD_ADDR_VAR 0 9
4684: PUSH
4685: LD_VAR 0 23
4689: PUSH
4690: FOR_IN
4691: IFFALSE 4853
// begin tw := IsInUnit ( i ) ;
4693: LD_ADDR_VAR 0 20
4697: PUSH
4698: LD_VAR 0 9
4702: PPUSH
4703: CALL_OW 310
4707: ST_TO_ADDR
// if tw then
4708: LD_VAR 0 20
4712: IFFALSE 4795
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4714: LD_VAR 0 20
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_VAR 0 1
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 101
4733: PUSH
4734: LD_VAR 0 38
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 32
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 31
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: IN
4781: NOT
4782: IFFALSE 4793
// ComExitBuilding ( i ) ;
4784: LD_VAR 0 9
4788: PPUSH
4789: CALL_OW 122
// end else
4793: GO 4851
// if IsInArea ( i , area ) then
4795: LD_VAR 0 9
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL_OW 308
4809: IFFALSE 4837
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4811: LD_VAR 0 9
4815: PPUSH
4816: LD_VAR 0 26
4820: PPUSH
4821: LD_VAR 0 9
4825: PPUSH
4826: CALL_OW 74
4830: PPUSH
4831: CALL_OW 115
4835: GO 4851
// ComMoveToArea ( i , area ) ;
4837: LD_VAR 0 9
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: CALL_OW 113
// end ;
4851: GO 4690
4853: POP
4854: POP
// end else
4855: GO 5180
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4857: LD_ADDR_VAR 0 32
4861: PUSH
4862: LD_VAR 0 3
4866: PPUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 62
4872: PUSH
4873: EMPTY
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 30
4885: PUSH
4886: LD_INT 32
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 4
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 30
4905: PUSH
4906: LD_INT 5
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 30
4915: PUSH
4916: LD_INT 31
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: ST_TO_ADDR
// if empty then
4939: LD_VAR 0 32
4943: IFFALSE 4960
// empty := ReverseArray ( empty ) ;
4945: LD_ADDR_VAR 0 32
4949: PUSH
4950: LD_VAR 0 32
4954: PPUSH
4955: CALL 48192 0 1
4959: ST_TO_ADDR
// for i in sol do
4960: LD_ADDR_VAR 0 9
4964: PUSH
4965: LD_VAR 0 23
4969: PUSH
4970: FOR_IN
4971: IFFALSE 5178
// begin tag := GetTag ( i ) ;
4973: LD_ADDR_VAR 0 19
4977: PUSH
4978: LD_VAR 0 9
4982: PPUSH
4983: CALL_OW 110
4987: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
4988: LD_VAR 0 9
4992: PPUSH
4993: CALL_OW 256
4997: PUSH
4998: LD_INT 1000
5000: LESS
5001: PUSH
5002: LD_VAR 0 19
5006: PUSH
5007: LD_INT 1
5009: NONEQUAL
5010: AND
5011: IFFALSE 5063
// begin SetTag ( i , tHeal ) ;
5013: LD_VAR 0 9
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5025: LD_VAR 0 9
5029: PPUSH
5030: LD_VAR 0 6
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 6
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PPUSH
5048: CALL_OW 111
// AddComHold ( i ) ;
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 200
// continue ;
5061: GO 4970
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5063: LD_VAR 0 9
5067: PPUSH
5068: CALL_OW 256
5072: PUSH
5073: LD_INT 1000
5075: EQUAL
5076: PUSH
5077: LD_VAR 0 19
5081: PUSH
5082: LD_INT 1
5084: EQUAL
5085: AND
5086: IFFALSE 5102
// begin SetTag ( i , 0 ) ;
5088: LD_VAR 0 9
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 109
// continue ;
5100: GO 4970
// end ; if HasTask ( i ) then
5102: LD_VAR 0 9
5106: PPUSH
5107: CALL_OW 314
5111: IFFALSE 5115
// continue ;
5113: GO 4970
// if not IsInUnit ( i ) and not tag and empty then
5115: LD_VAR 0 9
5119: PPUSH
5120: CALL_OW 310
5124: NOT
5125: PUSH
5126: LD_VAR 0 19
5130: NOT
5131: AND
5132: PUSH
5133: LD_VAR 0 32
5137: AND
5138: IFFALSE 5176
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5140: LD_VAR 0 9
5144: PPUSH
5145: LD_VAR 0 32
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: PPUSH
5154: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5158: LD_ADDR_VAR 0 32
5162: PUSH
5163: LD_VAR 0 32
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 3
5175: ST_TO_ADDR
// end ; end ;
5176: GO 4970
5178: POP
5179: POP
// end ; end ; end ;
5180: LD_VAR 0 8
5184: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5185: LD_EXP 14
5189: PPUSH
5190: LD_INT 50
5192: PUSH
5193: EMPTY
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: IFFALSE 5253
5202: GO 5204
5204: DISABLE
// begin enable ;
5205: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5206: LD_EXP 3
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_INT 1
5217: PPUSH
5218: LD_INT 1
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_EXP 14
5228: PPUSH
5229: LD_INT 109
5231: PUSH
5232: LD_INT 43
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PPUSH
5239: LD_INT 112
5241: PUSH
5242: LD_INT 52
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL 1238 0 7
// end ;
5253: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp , side ;
5254: LD_EXP 13
5258: IFFALSE 5499
5260: GO 5262
5262: DISABLE
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
// begin enable ;
5269: ENABLE
// p := 1 ;
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5278: LD_ADDR_VAR 0 1
5282: PUSH
5283: DOUBLE
5284: LD_INT 1
5286: DEC
5287: ST_TO_ADDR
5288: LD_EXP 13
5292: PPUSH
5293: CALL 17316 0 1
5297: PUSH
5298: LD_INT 2
5300: DIV
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5497
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5305: LD_ADDR_VAR 0 3
5309: PUSH
5310: LD_EXP 13
5314: PUSH
5315: LD_VAR 0 2
5319: ARRAY
5320: PPUSH
5321: LD_EXP 13
5325: PUSH
5326: LD_VAR 0 2
5330: PUSH
5331: LD_INT 1
5333: PLUS
5334: ARRAY
5335: PPUSH
5336: CALL_OW 428
5340: ST_TO_ADDR
// if tmp then
5341: LD_VAR 0 3
5345: IFFALSE 5481
// begin side := GetSide ( tmp ) ;
5347: LD_ADDR_VAR 0 4
5351: PUSH
5352: LD_VAR 0 3
5356: PPUSH
5357: CALL_OW 255
5361: ST_TO_ADDR
// if side <> botSides [ 1 ] and side > 0 then
5362: LD_VAR 0 4
5366: PUSH
5367: LD_EXP 3
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: NONEQUAL
5376: PUSH
5377: LD_VAR 0 4
5381: PUSH
5382: LD_INT 0
5384: GREATER
5385: AND
5386: IFFALSE 5481
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5388: LD_EXP 13
5392: PUSH
5393: LD_VAR 0 2
5397: ARRAY
5398: PPUSH
5399: LD_EXP 13
5403: PUSH
5404: LD_VAR 0 2
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: ARRAY
5413: PPUSH
5414: LD_EXP 3
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5427: LD_ADDR_EXP 13
5431: PUSH
5432: LD_EXP 13
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 3
5446: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5447: LD_ADDR_EXP 13
5451: PUSH
5452: LD_EXP 13
5456: PPUSH
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 3
5466: ST_TO_ADDR
// p := p - 2 ;
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 2
5476: PUSH
5477: LD_INT 2
5479: MINUS
5480: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5481: LD_ADDR_VAR 0 2
5485: PUSH
5486: LD_VAR 0 2
5490: PUSH
5491: LD_INT 2
5493: PLUS
5494: ST_TO_ADDR
// end ;
5495: GO 5302
5497: POP
5498: POP
// end ;
5499: PPOPN 4
5501: END
// every 6 6$00 trigger IsOk ( arDep ) do
5502: LD_INT 2
5504: PPUSH
5505: CALL_OW 302
5509: IFFALSE 5687
5511: GO 5513
5513: DISABLE
// begin enable ;
5514: ENABLE
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5515: LD_ADDR_EXP 6
5519: PUSH
5520: LD_EXP 6
5524: PUSH
5525: LD_INT 14
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 2
5533: PUSH
5534: LD_INT 27
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 14
5545: PUSH
5546: LD_INT 1
5548: PUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 28
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 14
5563: PUSH
5564: LD_INT 1
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 28
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: ADD
5584: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5585: LD_OWVAR 67
5589: PUSH
5590: LD_INT 1
5592: GREATER
5593: PUSH
5594: LD_INT 72
5596: PPUSH
5597: LD_EXP 3
5601: PUSH
5602: LD_INT 1
5604: ARRAY
5605: PPUSH
5606: CALL_OW 321
5610: PUSH
5611: LD_INT 2
5613: EQUAL
5614: AND
5615: IFFALSE 5687
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5617: LD_ADDR_EXP 6
5621: PUSH
5622: LD_EXP 6
5626: PUSH
5627: LD_INT 14
5629: PUSH
5630: LD_INT 3
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 29
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 14
5647: PUSH
5648: LD_INT 3
5650: PUSH
5651: LD_INT 2
5653: PUSH
5654: LD_INT 29
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 14
5665: PUSH
5666: LD_INT 3
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 29
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: ADD
5686: ST_TO_ADDR
// end ; end_of_file
5687: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
5692: PPUSH
5693: PPUSH
5694: PPUSH
// multi_settings_counter := 6 ;
5695: LD_ADDR_EXP 29
5699: PUSH
5700: LD_INT 6
5702: ST_TO_ADDR
// multi_settings := [ ] ;
5703: LD_ADDR_EXP 28
5707: PUSH
5708: EMPTY
5709: ST_TO_ADDR
// if Multiplayer then
5710: LD_OWVAR 4
5714: IFFALSE 5894
// begin your_side := mp_player_side ;
5716: LD_ADDR_OWVAR 2
5720: PUSH
5721: LD_OWVAR 7
5725: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5726: LD_ADDR_EXP 17
5730: PUSH
5731: LD_OWVAR 6
5735: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5736: LD_ADDR_EXP 18
5740: PUSH
5741: LD_OWVAR 17
5745: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5746: LD_ADDR_EXP 19
5750: PUSH
5751: LD_OWVAR 15
5755: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5756: LD_ADDR_EXP 20
5760: PUSH
5761: LD_OWVAR 16
5765: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5766: LD_ADDR_EXP 21
5770: PUSH
5771: EMPTY
5772: PUSH
5773: EMPTY
5774: LIST
5775: ST_TO_ADDR
// for i in mp_teams do
5776: LD_ADDR_VAR 0 2
5780: PUSH
5781: LD_OWVAR 12
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5830
// if i then
5789: LD_VAR 0 2
5793: IFFALSE 5828
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5795: LD_ADDR_EXP 21
5799: PUSH
5800: LD_EXP 21
5804: PPUSH
5805: LD_INT 1
5807: PPUSH
5808: LD_EXP 21
5812: PUSH
5813: LD_INT 1
5815: ARRAY
5816: PUSH
5817: LD_VAR 0 2
5821: UNION
5822: PPUSH
5823: CALL_OW 1
5827: ST_TO_ADDR
5828: GO 5786
5830: POP
5831: POP
// for i := 1 to multi_settings_counter do
5832: LD_ADDR_VAR 0 2
5836: PUSH
5837: DOUBLE
5838: LD_INT 1
5840: DEC
5841: ST_TO_ADDR
5842: LD_EXP 29
5846: PUSH
5847: FOR_TO
5848: IFFALSE 5890
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
5850: LD_ADDR_EXP 28
5854: PUSH
5855: LD_EXP 28
5859: PPUSH
5860: LD_EXP 28
5864: PUSH
5865: LD_INT 1
5867: PLUS
5868: PPUSH
5869: LD_VAR 0 2
5873: PPUSH
5874: CALL_OW 426
5878: PUSH
5879: LD_INT 1
5881: PLUS
5882: PPUSH
5883: CALL_OW 1
5887: ST_TO_ADDR
5888: GO 5847
5890: POP
5891: POP
// end else
5892: GO 6080
// begin your_side := 3 ;
5894: LD_ADDR_OWVAR 2
5898: PUSH
5899: LD_INT 3
5901: ST_TO_ADDR
// multi_gametype := 1 ;
5902: LD_ADDR_EXP 17
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
5910: LD_ADDR_EXP 18
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: LD_INT 2
5926: PUSH
5927: LD_INT 3
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
5949: LD_ADDR_EXP 19
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 1
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: LD_INT 1
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
5988: LD_ADDR_EXP 20
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 3
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 3
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: LD_INT 0
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6027: LD_ADDR_EXP 21
6031: PUSH
6032: LD_INT 3
6034: PUSH
6035: LD_INT 4
6037: PUSH
6038: LD_INT 5
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6049: LD_ADDR_EXP 28
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 4
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6080: LD_ADDR_EXP 22
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: LD_INT 0
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: LD_INT 0
6105: PUSH
6106: LD_INT 0
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6119: LD_ADDR_EXP 25
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: LD_INT 0
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: LD_INT 0
6135: PUSH
6136: LD_INT 0
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 0
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6158: LD_ADDR_EXP 36
6162: PUSH
6163: LD_INT 0
6165: PUSH
6166: LD_INT 0
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 0
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: ST_TO_ADDR
// multi_teamgame := true ;
6197: LD_ADDR_EXP 26
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6205: LD_ADDR_EXP 24
6209: PUSH
6210: LD_INT 3
6212: PUSH
6213: EMPTY
6214: LIST
6215: ST_TO_ADDR
// multi_custom_commanders := true ;
6216: LD_ADDR_EXP 27
6220: PUSH
6221: LD_INT 1
6223: ST_TO_ADDR
// multi_commanders := [ ] ;
6224: LD_ADDR_EXP 35
6228: PUSH
6229: EMPTY
6230: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6231: LD_ADDR_EXP 38
6235: PUSH
6236: EMPTY
6237: ST_TO_ADDR
// multi_players_amount := 0 ;
6238: LD_ADDR_EXP 37
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6246: LD_ADDR_EXP 23
6250: PUSH
6251: LD_INT 5
6253: PUSH
6254: LD_INT 6
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 7
6263: PUSH
6264: LD_INT 8
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 9
6273: PUSH
6274: LD_INT 10
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6286: LD_ADDR_EXP 40
6290: PUSH
6291: EMPTY
6292: PUSH
6293: EMPTY
6294: PUSH
6295: EMPTY
6296: PUSH
6297: EMPTY
6298: PUSH
6299: EMPTY
6300: PUSH
6301: EMPTY
6302: PUSH
6303: EMPTY
6304: PUSH
6305: EMPTY
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: ST_TO_ADDR
// for i := 1 to 8 do
6317: LD_ADDR_VAR 0 2
6321: PUSH
6322: DOUBLE
6323: LD_INT 1
6325: DEC
6326: ST_TO_ADDR
6327: LD_INT 8
6329: PUSH
6330: FOR_TO
6331: IFFALSE 6660
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6333: LD_VAR 0 2
6337: PPUSH
6338: CALL_OW 530
6342: IFFALSE 6500
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6344: LD_ADDR_EXP 22
6348: PUSH
6349: LD_EXP 22
6353: PPUSH
6354: LD_VAR 0 2
6358: PPUSH
6359: LD_INT 1
6361: PPUSH
6362: CALL_OW 1
6366: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6367: LD_ADDR_EXP 20
6371: PUSH
6372: LD_EXP 20
6376: PPUSH
6377: LD_VAR 0 2
6381: PPUSH
6382: LD_INT 0
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6390: LD_ADDR_EXP 18
6394: PUSH
6395: LD_EXP 18
6399: PPUSH
6400: LD_VAR 0 2
6404: PPUSH
6405: LD_INT 0
6407: PPUSH
6408: CALL_OW 1
6412: ST_TO_ADDR
// for j = 1 to multi_teams do
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_EXP 21
6427: PUSH
6428: FOR_TO
6429: IFFALSE 6498
// begin if i in multi_teams [ j ] then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_EXP 21
6440: PUSH
6441: LD_VAR 0 3
6445: ARRAY
6446: IN
6447: IFFALSE 6496
// begin tmp := multi_teams [ j ] diff i ;
6449: LD_ADDR_VAR 0 5
6453: PUSH
6454: LD_EXP 21
6458: PUSH
6459: LD_VAR 0 3
6463: ARRAY
6464: PUSH
6465: LD_VAR 0 2
6469: DIFF
6470: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6471: LD_ADDR_EXP 21
6475: PUSH
6476: LD_EXP 21
6480: PPUSH
6481: LD_VAR 0 3
6485: PPUSH
6486: LD_VAR 0 5
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
// end ; end ;
6496: GO 6428
6498: POP
6499: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6500: LD_EXP 20
6504: PUSH
6505: LD_VAR 0 2
6509: ARRAY
6510: PUSH
6511: LD_EXP 20
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PUSH
6522: LD_EXP 24
6526: IN
6527: NOT
6528: AND
6529: IFFALSE 6570
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6531: LD_ADDR_EXP 20
6535: PUSH
6536: LD_EXP 20
6540: PPUSH
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_EXP 24
6550: PUSH
6551: LD_INT 1
6553: PPUSH
6554: LD_EXP 24
6558: PPUSH
6559: CALL_OW 12
6563: ARRAY
6564: PPUSH
6565: CALL_OW 1
6569: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6570: LD_EXP 20
6574: PUSH
6575: LD_VAR 0 2
6579: ARRAY
6580: NOT
6581: PUSH
6582: LD_EXP 18
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: NOT
6593: AND
6594: PUSH
6595: LD_EXP 22
6599: PUSH
6600: LD_VAR 0 2
6604: ARRAY
6605: NOT
6606: AND
6607: IFFALSE 6632
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6609: LD_ADDR_EXP 25
6613: PUSH
6614: LD_EXP 25
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: CALL_OW 1
6631: ST_TO_ADDR
// if multi_sides [ i ] then
6632: LD_EXP 18
6636: PUSH
6637: LD_VAR 0 2
6641: ARRAY
6642: IFFALSE 6658
// multi_players_amount := multi_players_amount + 1 ;
6644: LD_ADDR_EXP 37
6648: PUSH
6649: LD_EXP 37
6653: PUSH
6654: LD_INT 1
6656: PLUS
6657: ST_TO_ADDR
// end ;
6658: GO 6330
6660: POP
6661: POP
// for i in multi_teams do
6662: LD_ADDR_VAR 0 2
6666: PUSH
6667: LD_EXP 21
6671: PUSH
6672: FOR_IN
6673: IFFALSE 6781
// begin for j = 2 to i do
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: DOUBLE
6681: LD_INT 2
6683: DEC
6684: ST_TO_ADDR
6685: LD_VAR 0 2
6689: PUSH
6690: FOR_TO
6691: IFFALSE 6777
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6693: LD_VAR 0 2
6697: PUSH
6698: LD_VAR 0 3
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 2
6708: PUSH
6709: LD_INT 1
6711: ARRAY
6712: PPUSH
6713: CALL_OW 343
// for x = 1 to j - 1 do
6717: LD_ADDR_VAR 0 4
6721: PUSH
6722: DOUBLE
6723: LD_INT 1
6725: DEC
6726: ST_TO_ADDR
6727: LD_VAR 0 3
6731: PUSH
6732: LD_INT 1
6734: MINUS
6735: PUSH
6736: FOR_TO
6737: IFFALSE 6773
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 3
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 4
6759: ARRAY
6760: PPUSH
6761: LD_INT 1
6763: PPUSH
6764: LD_INT 1
6766: PPUSH
6767: CALL_OW 80
6771: GO 6736
6773: POP
6774: POP
// end ;
6775: GO 6690
6777: POP
6778: POP
// end ;
6779: GO 6672
6781: POP
6782: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6783: LD_ADDR_OWVAR 67
6787: PUSH
6788: LD_INT 1
6790: PUSH
6791: LD_INT 2
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: LD_EXP 28
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: ARRAY
6811: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
6812: LD_ADDR_EXP 30
6816: PUSH
6817: LD_INT 9
6819: PUSH
6820: LD_INT 12
6822: PUSH
6823: LD_INT 15
6825: PUSH
6826: LD_INT 18
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_EXP 28
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: ARRAY
6844: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
6845: LD_ADDR_EXP 31
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 3
6858: PUSH
6859: LD_INT 5
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: LD_EXP 28
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: ARRAY
6877: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
6878: LD_ADDR_EXP 32
6882: PUSH
6883: LD_INT 3000
6885: PUSH
6886: LD_INT 1120
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 5000
6895: PUSH
6896: LD_INT 770
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 6000
6905: PUSH
6906: LD_INT 490
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 8000
6915: PUSH
6916: LD_INT 420
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_EXP 28
6933: PUSH
6934: LD_INT 4
6936: ARRAY
6937: ARRAY
6938: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
6939: LD_ADDR_EXP 33
6943: PUSH
6944: LD_INT 0
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: LD_EXP 28
6966: PUSH
6967: LD_INT 5
6969: ARRAY
6970: ARRAY
6971: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
6972: LD_ADDR_EXP 34
6976: PUSH
6977: LD_INT 0
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: PUSH
6991: LD_EXP 28
6995: PUSH
6996: LD_INT 6
6998: ARRAY
6999: ARRAY
7000: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7001: LD_ADDR_EXP 39
7005: PUSH
7006: LD_INT 10500
7008: PUSH
7009: LD_INT 31500
7011: PUSH
7012: LD_INT 52500
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_OWVAR 67
7024: ARRAY
7025: ST_TO_ADDR
// end ;
7026: LD_VAR 0 1
7030: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
// if not multi_sides [ preferSide ] then
7035: LD_EXP 18
7039: PUSH
7040: LD_VAR 0 1
7044: ARRAY
7045: NOT
7046: IFFALSE 7060
// begin result := preferSide ;
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_VAR 0 1
7057: ST_TO_ADDR
// exit ;
7058: GO 7107
// end ; for i := 1 to 8 do
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: DOUBLE
7066: LD_INT 1
7068: DEC
7069: ST_TO_ADDR
7070: LD_INT 8
7072: PUSH
7073: FOR_TO
7074: IFFALSE 7105
// if not multi_sides [ i ] then
7076: LD_EXP 18
7080: PUSH
7081: LD_VAR 0 3
7085: ARRAY
7086: NOT
7087: IFFALSE 7103
// begin result := i ;
7089: LD_ADDR_VAR 0 2
7093: PUSH
7094: LD_VAR 0 3
7098: ST_TO_ADDR
// exit ;
7099: POP
7100: POP
7101: GO 7107
// end ;
7103: GO 7073
7105: POP
7106: POP
// end ;
7107: LD_VAR 0 2
7111: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7112: LD_INT 0
7114: PPUSH
// uc_side := side ;
7115: LD_ADDR_OWVAR 20
7119: PUSH
7120: LD_VAR 0 1
7124: ST_TO_ADDR
// uc_nation := nation_russian ;
7125: LD_ADDR_OWVAR 21
7129: PUSH
7130: LD_INT 3
7132: ST_TO_ADDR
// hc_importance := 100 ;
7133: LD_ADDR_OWVAR 32
7137: PUSH
7138: LD_INT 100
7140: ST_TO_ADDR
// if num = 1 then
7141: LD_VAR 0 2
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: IFFALSE 7216
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7151: LD_INT 1
7153: PPUSH
7154: LD_EXP 31
7158: PUSH
7159: LD_INT 1
7161: PLUS
7162: PPUSH
7163: CALL_OW 381
// hc_gallery := ru ;
7167: LD_ADDR_OWVAR 33
7171: PUSH
7172: LD_STRING ru
7174: ST_TO_ADDR
// hc_face_number := 25 ;
7175: LD_ADDR_OWVAR 34
7179: PUSH
7180: LD_INT 25
7182: ST_TO_ADDR
// hc_name := Xavier ;
7183: LD_ADDR_OWVAR 26
7187: PUSH
7188: LD_STRING Xavier
7190: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7191: LD_ADDR_OWVAR 29
7195: PUSH
7196: LD_INT 12
7198: PUSH
7199: LD_INT 10
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// result := CreateHuman ;
7206: LD_ADDR_VAR 0 3
7210: PUSH
7211: CALL_OW 44
7215: ST_TO_ADDR
// end ; if num = 2 then
7216: LD_VAR 0 2
7220: PUSH
7221: LD_INT 2
7223: EQUAL
7224: IFFALSE 7291
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7226: LD_INT 1
7228: PPUSH
7229: LD_EXP 31
7233: PUSH
7234: LD_INT 2
7236: PLUS
7237: PPUSH
7238: CALL_OW 383
// hc_gallery := ru ;
7242: LD_ADDR_OWVAR 33
7246: PUSH
7247: LD_STRING ru
7249: ST_TO_ADDR
// hc_face_number := 1 ;
7250: LD_ADDR_OWVAR 34
7254: PUSH
7255: LD_INT 1
7257: ST_TO_ADDR
// hc_name := Burlak ;
7258: LD_ADDR_OWVAR 26
7262: PUSH
7263: LD_STRING Burlak
7265: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7266: LD_ADDR_OWVAR 29
7270: PUSH
7271: LD_INT 10
7273: PUSH
7274: LD_INT 11
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: ST_TO_ADDR
// result := CreateHuman ;
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: CALL_OW 44
7290: ST_TO_ADDR
// end ; if num = 3 then
7291: LD_VAR 0 2
7295: PUSH
7296: LD_INT 3
7298: EQUAL
7299: IFFALSE 7366
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7301: LD_INT 1
7303: PPUSH
7304: LD_EXP 31
7308: PUSH
7309: LD_INT 1
7311: PLUS
7312: PPUSH
7313: CALL_OW 381
// hc_gallery := ru ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING ru
7324: ST_TO_ADDR
// hc_face_number := 18 ;
7325: LD_ADDR_OWVAR 34
7329: PUSH
7330: LD_INT 18
7332: ST_TO_ADDR
// hc_name := Vsevolod ;
7333: LD_ADDR_OWVAR 26
7337: PUSH
7338: LD_STRING Vsevolod
7340: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7341: LD_ADDR_OWVAR 29
7345: PUSH
7346: LD_INT 12
7348: PUSH
7349: LD_INT 11
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: ST_TO_ADDR
// result := CreateHuman ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: CALL_OW 44
7365: ST_TO_ADDR
// end ; end ;
7366: LD_VAR 0 3
7370: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7371: LD_INT 0
7373: PPUSH
7374: PPUSH
7375: PPUSH
// if not multi_apeman then
7376: LD_EXP 33
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 7463
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7385: LD_ADDR_VAR 0 3
7389: PUSH
7390: LD_INT 6
7392: PUSH
7393: LD_INT 9
7395: PUSH
7396: LD_INT 12
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: LD_EXP 33
7408: ARRAY
7409: ST_TO_ADDR
// for i := 1 to tmp do
7410: LD_ADDR_VAR 0 2
7414: PUSH
7415: DOUBLE
7416: LD_INT 1
7418: DEC
7419: ST_TO_ADDR
7420: LD_VAR 0 3
7424: PUSH
7425: FOR_TO
7426: IFFALSE 7461
// begin uc_side := 0 ;
7428: LD_ADDR_OWVAR 20
7432: PUSH
7433: LD_INT 0
7435: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7436: LD_INT 5
7438: NEG
7439: PPUSH
7440: CALL 49173 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_INT 21
7451: PPUSH
7452: LD_INT 0
7454: PPUSH
7455: CALL_OW 49
// end ;
7459: GO 7425
7461: POP
7462: POP
// end ;
7463: LD_VAR 0 1
7467: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7468: LD_INT 0
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
// for i := 1 to 8 do
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: DOUBLE
7486: LD_INT 1
7488: DEC
7489: ST_TO_ADDR
7490: LD_INT 8
7492: PUSH
7493: FOR_TO
7494: IFFALSE 8674
// begin if not multi_sides [ i ] then
7496: LD_EXP 18
7500: PUSH
7501: LD_VAR 0 2
7505: ARRAY
7506: NOT
7507: IFFALSE 7511
// continue ;
7509: GO 7493
// if multi_buildings [ multi_sides [ i ] ] then
7511: LD_EXP 40
7515: PUSH
7516: LD_EXP 18
7520: PUSH
7521: LD_VAR 0 2
7525: ARRAY
7526: ARRAY
7527: IFFALSE 7761
// begin uc_side := i ;
7529: LD_ADDR_OWVAR 20
7533: PUSH
7534: LD_VAR 0 2
7538: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7539: LD_ADDR_OWVAR 21
7543: PUSH
7544: LD_EXP 20
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7555: LD_ADDR_VAR 0 3
7559: PUSH
7560: LD_EXP 40
7564: PUSH
7565: LD_EXP 18
7569: PUSH
7570: LD_VAR 0 2
7574: ARRAY
7575: ARRAY
7576: PUSH
7577: FOR_IN
7578: IFFALSE 7759
// begin bc_type := j [ 1 ] ;
7580: LD_ADDR_OWVAR 42
7584: PUSH
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 1
7592: ARRAY
7593: ST_TO_ADDR
// bc_level := 2 ;
7594: LD_ADDR_OWVAR 43
7598: PUSH
7599: LD_INT 2
7601: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7602: LD_ADDR_VAR 0 4
7606: PUSH
7607: LD_VAR 0 3
7611: PUSH
7612: LD_INT 2
7614: ARRAY
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_VAR 0 3
7624: PUSH
7625: LD_INT 2
7627: ARRAY
7628: PUSH
7629: LD_INT 2
7631: ARRAY
7632: PPUSH
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 2
7640: ARRAY
7641: PUSH
7642: LD_INT 3
7644: ARRAY
7645: PPUSH
7646: CALL_OW 47
7650: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7651: LD_VAR 0 3
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PUSH
7660: LD_INT 0
7662: EQUAL
7663: IFFALSE 7757
// begin SetBName ( b , j [ 3 ] ) ;
7665: LD_VAR 0 4
7669: PPUSH
7670: LD_VAR 0 3
7674: PUSH
7675: LD_INT 3
7677: ARRAY
7678: PPUSH
7679: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7683: LD_VAR 0 4
7687: PPUSH
7688: CALL_OW 274
7692: PPUSH
7693: LD_INT 1
7695: PPUSH
7696: LD_INT 120
7698: PUSH
7699: LD_INT 100
7701: PUSH
7702: LD_INT 80
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: PUSH
7710: LD_OWVAR 67
7714: ARRAY
7715: PPUSH
7716: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7720: LD_VAR 0 4
7724: PPUSH
7725: CALL_OW 274
7729: PPUSH
7730: LD_INT 2
7732: PPUSH
7733: LD_INT 90
7735: PUSH
7736: LD_INT 60
7738: PUSH
7739: LD_INT 30
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PUSH
7747: LD_OWVAR 67
7751: ARRAY
7752: PPUSH
7753: CALL_OW 277
// end ; end ;
7757: GO 7577
7759: POP
7760: POP
// end ; if multi_custom_commanders then
7761: LD_EXP 27
7765: IFFALSE 7974
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7767: LD_ADDR_VAR 0 6
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: LD_EXP 18
7781: PUSH
7782: LD_VAR 0 2
7786: ARRAY
7787: PPUSH
7788: CALL 7112 0 2
7792: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7793: LD_ADDR_EXP 35
7797: PUSH
7798: LD_EXP 35
7802: PPUSH
7803: LD_EXP 35
7807: PUSH
7808: LD_INT 1
7810: PLUS
7811: PPUSH
7812: LD_VAR 0 6
7816: PPUSH
7817: CALL_OW 2
7821: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
7822: LD_VAR 0 6
7826: PPUSH
7827: CALL_OW 257
7831: PUSH
7832: LD_INT 3
7834: EQUAL
7835: IFFALSE 7939
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
7837: LD_INT 23
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: LD_INT 1
7845: PPUSH
7846: LD_INT 46
7848: PPUSH
7849: LD_INT 80
7851: PPUSH
7852: CALL 20054 0 5
// veh := CreateVehicle ;
7856: LD_ADDR_VAR 0 7
7860: PUSH
7861: CALL_OW 45
7865: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
7866: LD_VAR 0 7
7870: PPUSH
7871: LD_VAR 0 6
7875: PPUSH
7876: CALL_OW 255
7880: PUSH
7881: LD_INT 1
7883: NEG
7884: MUL
7885: PPUSH
7886: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7890: LD_VAR 0 7
7894: PPUSH
7895: LD_EXP 23
7899: PUSH
7900: LD_EXP 18
7904: PUSH
7905: LD_VAR 0 2
7909: ARRAY
7910: ARRAY
7911: PUSH
7912: LD_INT 2
7914: ARRAY
7915: PPUSH
7916: LD_INT 0
7918: PPUSH
7919: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7923: LD_VAR 0 6
7927: PPUSH
7928: LD_VAR 0 7
7932: PPUSH
7933: CALL_OW 52
// end else
7937: GO 7972
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7939: LD_VAR 0 6
7943: PPUSH
7944: LD_EXP 23
7948: PUSH
7949: LD_EXP 18
7953: PUSH
7954: LD_VAR 0 2
7958: ARRAY
7959: ARRAY
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: PPUSH
7965: LD_INT 0
7967: PPUSH
7968: CALL_OW 49
// end else
7972: GO 8185
// begin uc_side := i ;
7974: LD_ADDR_OWVAR 20
7978: PUSH
7979: LD_VAR 0 2
7983: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7984: LD_ADDR_OWVAR 21
7988: PUSH
7989: LD_EXP 20
7993: PUSH
7994: LD_VAR 0 2
7998: ARRAY
7999: ST_TO_ADDR
// hc_importance := 100 ;
8000: LD_ADDR_OWVAR 32
8004: PUSH
8005: LD_INT 100
8007: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8008: LD_INT 0
8010: PPUSH
8011: LD_INT 1
8013: PPUSH
8014: LD_EXP 31
8018: PPUSH
8019: CALL_OW 380
// if multiplayer then
8023: LD_OWVAR 4
8027: IFFALSE 8085
// begin hc_name := mp_sides_players_names [ i ] ;
8029: LD_ADDR_OWVAR 26
8033: PUSH
8034: LD_OWVAR 19
8038: PUSH
8039: LD_VAR 0 2
8043: ARRAY
8044: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8045: LD_ADDR_OWVAR 33
8049: PUSH
8050: LD_STRING MULTIAVATARS
8052: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8053: LD_ADDR_OWVAR 34
8057: PUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 525
8067: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8068: LD_ADDR_OWVAR 27
8072: PUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: CALL_OW 526
8082: ST_TO_ADDR
// end else
8083: GO 8117
// begin hc_gallery :=  ;
8085: LD_ADDR_OWVAR 33
8089: PUSH
8090: LD_STRING 
8092: ST_TO_ADDR
// hc_name :=  ;
8093: LD_ADDR_OWVAR 26
8097: PUSH
8098: LD_STRING 
8100: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8101: LD_ADDR_OWVAR 27
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// end ; un := CreateHuman ;
8117: LD_ADDR_VAR 0 6
8121: PUSH
8122: CALL_OW 44
8126: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8127: LD_VAR 0 6
8131: PPUSH
8132: LD_EXP 23
8136: PUSH
8137: LD_EXP 18
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: ARRAY
8148: PUSH
8149: LD_INT 1
8151: ARRAY
8152: PPUSH
8153: LD_INT 0
8155: PPUSH
8156: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8160: LD_ADDR_EXP 35
8164: PUSH
8165: LD_EXP 35
8169: PPUSH
8170: LD_VAR 0 2
8174: PPUSH
8175: LD_VAR 0 6
8179: PPUSH
8180: CALL_OW 1
8184: ST_TO_ADDR
// end ; InitHc ;
8185: CALL_OW 19
// InitUc ;
8189: CALL_OW 18
// uc_side := i ;
8193: LD_ADDR_OWVAR 20
8197: PUSH
8198: LD_VAR 0 2
8202: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8203: LD_ADDR_OWVAR 21
8207: PUSH
8208: LD_EXP 20
8212: PUSH
8213: LD_VAR 0 2
8217: ARRAY
8218: ST_TO_ADDR
// hc_gallery :=  ;
8219: LD_ADDR_OWVAR 33
8223: PUSH
8224: LD_STRING 
8226: ST_TO_ADDR
// hc_name :=  ;
8227: LD_ADDR_OWVAR 26
8231: PUSH
8232: LD_STRING 
8234: ST_TO_ADDR
// hc_importance := 0 ;
8235: LD_ADDR_OWVAR 32
8239: PUSH
8240: LD_INT 0
8242: ST_TO_ADDR
// cl := 1 ;
8243: LD_ADDR_VAR 0 5
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: DOUBLE
8257: LD_INT 2
8259: DEC
8260: ST_TO_ADDR
8261: LD_EXP 30
8265: PUSH
8266: FOR_TO
8267: IFFALSE 8670
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 1
8276: MINUS
8277: PUSH
8278: LD_EXP 30
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: PUSH
8287: LD_INT 4
8289: DIVREAL
8290: MOD
8291: PUSH
8292: LD_INT 0
8294: EQUAL
8295: IFFALSE 8311
// cl := cl + 1 ;
8297: LD_ADDR_VAR 0 5
8301: PUSH
8302: LD_VAR 0 5
8306: PUSH
8307: LD_INT 1
8309: PLUS
8310: ST_TO_ADDR
// if cl > 4 then
8311: LD_VAR 0 5
8315: PUSH
8316: LD_INT 4
8318: GREATER
8319: IFFALSE 8329
// cl := 1 ;
8321: LD_ADDR_VAR 0 5
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8329: LD_INT 0
8331: PPUSH
8332: LD_VAR 0 5
8336: PPUSH
8337: LD_EXP 31
8341: PPUSH
8342: CALL_OW 380
// un := CreateHuman ;
8346: LD_ADDR_VAR 0 6
8350: PUSH
8351: CALL_OW 44
8355: ST_TO_ADDR
// if j > copy then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_VAR 0 9
8365: GREATER
8366: IFFALSE 8395
// copy := Replace ( copy , j , un ) else
8368: LD_ADDR_VAR 0 9
8372: PUSH
8373: LD_VAR 0 9
8377: PPUSH
8378: LD_VAR 0 3
8382: PPUSH
8383: LD_VAR 0 6
8387: PPUSH
8388: CALL_OW 1
8392: ST_TO_ADDR
8393: GO 8477
// begin CopySkills ( copy [ j ] , un ) ;
8395: LD_VAR 0 9
8399: PUSH
8400: LD_VAR 0 3
8404: ARRAY
8405: PPUSH
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8415: LD_VAR 0 6
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: LD_VAR 0 9
8427: PUSH
8428: LD_VAR 0 3
8432: ARRAY
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: CALL_OW 260
8441: PPUSH
8442: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8446: LD_VAR 0 6
8450: PPUSH
8451: LD_INT 1
8453: PPUSH
8454: LD_VAR 0 9
8458: PUSH
8459: LD_VAR 0 3
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: CALL_OW 260
8472: PPUSH
8473: CALL_OW 239
// end ; if multi_pos_area then
8477: LD_EXP 23
8481: IFFALSE 8668
// begin if GetClass ( un ) = 3 then
8483: LD_VAR 0 6
8487: PPUSH
8488: CALL_OW 257
8492: PUSH
8493: LD_INT 3
8495: EQUAL
8496: IFFALSE 8635
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8498: LD_INT 22
8500: PPUSH
8501: LD_INT 1
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_INT 44
8509: PUSH
8510: LD_INT 44
8512: PUSH
8513: LD_INT 43
8515: PUSH
8516: LD_INT 51
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 4
8532: MOD
8533: PUSH
8534: LD_INT 1
8536: PLUS
8537: ARRAY
8538: PPUSH
8539: LD_INT 80
8541: PPUSH
8542: CALL 20054 0 5
// veh := CreateVehicle ;
8546: LD_ADDR_VAR 0 7
8550: PUSH
8551: CALL_OW 45
8555: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8556: LD_VAR 0 7
8560: PPUSH
8561: LD_EXP 23
8565: PUSH
8566: LD_EXP 18
8570: PUSH
8571: LD_VAR 0 2
8575: ARRAY
8576: ARRAY
8577: PUSH
8578: LD_INT 2
8580: ARRAY
8581: PPUSH
8582: LD_INT 0
8584: PPUSH
8585: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8589: LD_VAR 0 6
8593: PPUSH
8594: LD_VAR 0 7
8598: PPUSH
8599: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8603: LD_VAR 0 7
8607: PPUSH
8608: CALL_OW 264
8612: PUSH
8613: LD_INT 51
8615: EQUAL
8616: IFFALSE 8633
// SetCargo ( veh , mat_cans , 100 ) ;
8618: LD_VAR 0 7
8622: PPUSH
8623: LD_INT 1
8625: PPUSH
8626: LD_INT 100
8628: PPUSH
8629: CALL_OW 290
// continue ;
8633: GO 8266
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8635: LD_VAR 0 6
8639: PPUSH
8640: LD_EXP 23
8644: PUSH
8645: LD_EXP 18
8649: PUSH
8650: LD_VAR 0 2
8654: ARRAY
8655: ARRAY
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PPUSH
8661: LD_INT 0
8663: PPUSH
8664: CALL_OW 49
// end ; end ;
8668: GO 8266
8670: POP
8671: POP
// end ;
8672: GO 7493
8674: POP
8675: POP
// end ;
8676: LD_VAR 0 1
8680: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8681: LD_INT 0
8683: PPUSH
8684: PPUSH
8685: PPUSH
8686: PPUSH
8687: PPUSH
// if not multi_support then
8688: LD_EXP 34
8692: NOT
8693: IFFALSE 8697
// exit ;
8695: GO 8984
// result := [ ] ;
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: EMPTY
8703: ST_TO_ADDR
// for i := 1 to 8 do
8704: LD_ADDR_VAR 0 2
8708: PUSH
8709: DOUBLE
8710: LD_INT 1
8712: DEC
8713: ST_TO_ADDR
8714: LD_INT 8
8716: PUSH
8717: FOR_TO
8718: IFFALSE 8982
// begin result := Replace ( result , i , [ ] ) ;
8720: LD_ADDR_VAR 0 1
8724: PUSH
8725: LD_VAR 0 1
8729: PPUSH
8730: LD_VAR 0 2
8734: PPUSH
8735: EMPTY
8736: PPUSH
8737: CALL_OW 1
8741: ST_TO_ADDR
// if multi_sides [ i ] then
8742: LD_EXP 18
8746: PUSH
8747: LD_VAR 0 2
8751: ARRAY
8752: IFFALSE 8980
// begin tmp := [ ] ;
8754: LD_ADDR_VAR 0 5
8758: PUSH
8759: EMPTY
8760: ST_TO_ADDR
// if multi_support = 1 then
8761: LD_EXP 34
8765: PUSH
8766: LD_INT 1
8768: EQUAL
8769: IFFALSE 8858
// begin uc_side := i ;
8771: LD_ADDR_OWVAR 20
8775: PUSH
8776: LD_VAR 0 2
8780: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8781: LD_ADDR_OWVAR 21
8785: PUSH
8786: LD_EXP 20
8790: PUSH
8791: LD_VAR 0 2
8795: ARRAY
8796: ST_TO_ADDR
// for j := 1 to 2 do
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_INT 2
8809: PUSH
8810: FOR_TO
8811: IFFALSE 8856
// begin InitHC_All ( ) ;
8813: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
8817: LD_INT 0
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_INT 4
8825: PPUSH
8826: CALL_OW 12
8830: PPUSH
8831: LD_INT 1
8833: PPUSH
8834: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8838: LD_ADDR_VAR 0 5
8842: PUSH
8843: LD_VAR 0 5
8847: PUSH
8848: CALL_OW 44
8852: ADD
8853: ST_TO_ADDR
// end ;
8854: GO 8810
8856: POP
8857: POP
// end ; if multi_support = 2 then
8858: LD_EXP 34
8862: PUSH
8863: LD_INT 2
8865: EQUAL
8866: IFFALSE 8955
// begin uc_side := i ;
8868: LD_ADDR_OWVAR 20
8872: PUSH
8873: LD_VAR 0 2
8877: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8878: LD_ADDR_OWVAR 21
8882: PUSH
8883: LD_EXP 20
8887: PUSH
8888: LD_VAR 0 2
8892: ARRAY
8893: ST_TO_ADDR
// for j := 1 to 4 do
8894: LD_ADDR_VAR 0 3
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 4
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8953
// begin InitHC_All ( ) ;
8910: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
8914: LD_INT 0
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_INT 4
8922: PPUSH
8923: CALL_OW 12
8927: PPUSH
8928: LD_INT 2
8930: PPUSH
8931: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8935: LD_ADDR_VAR 0 5
8939: PUSH
8940: LD_VAR 0 5
8944: PUSH
8945: CALL_OW 44
8949: ADD
8950: ST_TO_ADDR
// end ;
8951: GO 8907
8953: POP
8954: POP
// end ; result := Replace ( result , i , tmp ) ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_VAR 0 5
8974: PPUSH
8975: CALL_OW 1
8979: ST_TO_ADDR
// end ; end ;
8980: GO 8717
8982: POP
8983: POP
// end ;
8984: LD_VAR 0 1
8988: RET
// export function Multiplayer_Start ( ) ; begin
8989: LD_INT 0
8991: PPUSH
// Multiplayer_PrepareApemans ( ) ;
8992: CALL 7371 0 0
// Multiplayer_PreparePlayers ( ) ;
8996: CALL 7468 0 0
// Multiplayer_InitPointSystem ( ) ;
9000: CALL 9730 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9004: LD_INT 20
9006: PPUSH
9007: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9011: LD_INT 150
9013: PPUSH
9014: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9018: LD_INT 5
9020: PPUSH
9021: CALL 9906 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9025: LD_INT 40
9027: NEG
9028: PPUSH
9029: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9033: LD_INT 200
9035: PPUSH
9036: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9040: LD_INT 2
9042: PPUSH
9043: CALL 9906 0 1
// if multi_support then
9047: LD_EXP 34
9051: IFFALSE 9063
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9053: LD_ADDR_EXP 38
9057: PUSH
9058: CALL 8681 0 0
9062: ST_TO_ADDR
// if multi_sides [ your_side ] then
9063: LD_EXP 18
9067: PUSH
9068: LD_OWVAR 2
9072: ARRAY
9073: IFFALSE 9100
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9075: LD_INT 22
9077: PUSH
9078: LD_OWVAR 2
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PPUSH
9087: CALL_OW 69
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: PPUSH
9096: CALL_OW 87
// end ;
9100: LD_VAR 0 1
9104: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
9109: PPUSH
// repeat wait ( 0 0$1 ) ;
9110: LD_INT 35
9112: PPUSH
9113: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9117: LD_OWVAR 1
9121: PUSH
9122: LD_EXP 39
9126: GREATER
9127: PUSH
9128: LD_EXP 34
9132: AND
9133: IFFALSE 9298
// begin if tick mod 1 1$00 = 0 then
9135: LD_OWVAR 1
9139: PUSH
9140: LD_INT 2100
9142: MOD
9143: PUSH
9144: LD_INT 0
9146: EQUAL
9147: IFFALSE 9298
// begin for i := 1 to 8 do
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: DOUBLE
9155: LD_INT 1
9157: DEC
9158: ST_TO_ADDR
9159: LD_INT 8
9161: PUSH
9162: FOR_TO
9163: IFFALSE 9296
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
9165: LD_EXP 18
9169: PUSH
9170: LD_VAR 0 2
9174: ARRAY
9175: PUSH
9176: LD_EXP 36
9180: PUSH
9181: LD_VAR 0 2
9185: ARRAY
9186: NOT
9187: AND
9188: PUSH
9189: LD_EXP 38
9193: PUSH
9194: LD_VAR 0 2
9198: ARRAY
9199: AND
9200: PUSH
9201: LD_INT 80
9203: PUSH
9204: LD_INT 60
9206: PUSH
9207: LD_INT 40
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: PUSH
9215: LD_OWVAR 67
9219: ARRAY
9220: PPUSH
9221: CALL_OW 13
9225: AND
9226: IFFALSE 9294
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9228: LD_EXP 38
9232: PUSH
9233: LD_VAR 0 2
9237: ARRAY
9238: PUSH
9239: LD_INT 1
9241: ARRAY
9242: PPUSH
9243: LD_INT 11
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9253: LD_ADDR_EXP 38
9257: PUSH
9258: LD_EXP 38
9262: PPUSH
9263: LD_VAR 0 2
9267: PPUSH
9268: LD_EXP 38
9272: PUSH
9273: LD_VAR 0 2
9277: ARRAY
9278: PPUSH
9279: LD_INT 1
9281: PPUSH
9282: CALL_OW 3
9286: PPUSH
9287: CALL_OW 1
9291: ST_TO_ADDR
// break ;
9292: GO 9296
// end ; end ;
9294: GO 9162
9296: POP
9297: POP
// end ; end ; if not multi_custom_commanders then
9298: LD_EXP 27
9302: NOT
9303: IFFALSE 9416
// begin for i := 1 to 8 do
9305: LD_ADDR_VAR 0 2
9309: PUSH
9310: DOUBLE
9311: LD_INT 1
9313: DEC
9314: ST_TO_ADDR
9315: LD_INT 8
9317: PUSH
9318: FOR_TO
9319: IFFALSE 9390
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9321: LD_INT 22
9323: PUSH
9324: LD_VAR 0 2
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 69
9337: PUSH
9338: LD_INT 0
9340: EQUAL
9341: PUSH
9342: LD_EXP 36
9346: PUSH
9347: LD_VAR 0 2
9351: ARRAY
9352: NOT
9353: AND
9354: IFFALSE 9388
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9356: LD_ADDR_EXP 36
9360: PUSH
9361: LD_EXP 36
9365: PPUSH
9366: LD_VAR 0 2
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 1
9378: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9379: LD_VAR 0 2
9383: PPUSH
9384: CALL 9976 0 1
// end ; end ;
9388: GO 9318
9390: POP
9391: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9392: LD_EXP 36
9396: PPUSH
9397: CALL 17316 0 1
9401: PUSH
9402: LD_EXP 18
9406: PPUSH
9407: CALL 17316 0 1
9411: EQUAL
9412: IFFALSE 9416
// break ;
9414: GO 9436
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9416: CALL 9550 0 0
9420: NOT
9421: PUSH
9422: LD_EXP 2
9426: AND
9427: PUSH
9428: LD_EXP 35
9432: NOT
9433: OR
9434: IFFALSE 9110
// game := false ;
9436: LD_ADDR_EXP 2
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// for i := 1 to 8 do
9444: LD_ADDR_VAR 0 2
9448: PUSH
9449: DOUBLE
9450: LD_INT 1
9452: DEC
9453: ST_TO_ADDR
9454: LD_INT 8
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9494
// begin if multi_sides [ i ] then
9460: LD_EXP 18
9464: PUSH
9465: LD_VAR 0 2
9469: ARRAY
9470: IFFALSE 9492
// SetMultiScore ( i , multi_points [ i ] ) ;
9472: LD_VAR 0 2
9476: PPUSH
9477: LD_EXP 41
9481: PUSH
9482: LD_VAR 0 2
9486: ARRAY
9487: PPUSH
9488: CALL_OW 506
// end ;
9492: GO 9457
9494: POP
9495: POP
// if multi_loosers [ your_side ] then
9496: LD_EXP 36
9500: PUSH
9501: LD_OWVAR 2
9505: ARRAY
9506: IFFALSE 9529
// begin if Multiplayer then
9508: LD_OWVAR 4
9512: IFFALSE 9520
// YouLostInMultiplayer else
9514: CALL_OW 107
9518: GO 9527
// YouLost (  ) ;
9520: LD_STRING 
9522: PPUSH
9523: CALL_OW 104
// end else
9527: GO 9545
// begin if Multiplayer then
9529: LD_OWVAR 4
9533: IFFALSE 9541
// YouWinInMultiplayer else
9535: CALL_OW 106
9539: GO 9545
// YouWin ;
9541: CALL_OW 103
// end ; end ;
9545: LD_VAR 0 1
9549: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
// result := false ;
9554: LD_ADDR_VAR 0 1
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// for side in botSides do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_EXP 3
9571: PUSH
9572: FOR_IN
9573: IFFALSE 9634
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9575: LD_ADDR_VAR 0 1
9579: PUSH
9580: LD_INT 22
9582: PUSH
9583: LD_VAR 0 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 50
9604: PUSH
9605: EMPTY
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 0
9620: GREATER
9621: ST_TO_ADDR
// if result then
9622: LD_VAR 0 1
9626: IFFALSE 9632
// exit ;
9628: POP
9629: POP
9630: GO 9636
// end ;
9632: GO 9572
9634: POP
9635: POP
// end ;
9636: LD_VAR 0 1
9640: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9641: LD_INT 0
9643: PPUSH
9644: PPUSH
// result := [ ] ;
9645: LD_ADDR_VAR 0 1
9649: PUSH
9650: EMPTY
9651: ST_TO_ADDR
// for i := 1 to 8 do
9652: LD_ADDR_VAR 0 2
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_INT 8
9664: PUSH
9665: FOR_TO
9666: IFFALSE 9723
// begin if multi_sides [ i ] then
9668: LD_EXP 18
9672: PUSH
9673: LD_VAR 0 2
9677: ARRAY
9678: IFFALSE 9721
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9680: LD_ADDR_VAR 0 1
9684: PUSH
9685: LD_VAR 0 1
9689: PUSH
9690: LD_STRING #coop-points
9692: PUSH
9693: LD_VAR 0 2
9697: PUSH
9698: LD_VAR 0 2
9702: PUSH
9703: LD_EXP 41
9707: PUSH
9708: LD_VAR 0 2
9712: ARRAY
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: ADD
9720: ST_TO_ADDR
// end ; end ;
9721: GO 9665
9723: POP
9724: POP
// end ;
9725: LD_VAR 0 1
9729: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
9730: LD_INT 0
9732: PPUSH
9733: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9734: LD_ADDR_EXP 41
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: LD_INT 0
9744: PUSH
9745: LD_INT 0
9747: PUSH
9748: LD_INT 0
9750: PUSH
9751: LD_INT 0
9753: PUSH
9754: LD_INT 0
9756: PUSH
9757: LD_INT 0
9759: PUSH
9760: LD_INT 0
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// multi_points_conditions := [ ] ;
9773: LD_ADDR_EXP 42
9777: PUSH
9778: EMPTY
9779: ST_TO_ADDR
// end ;
9780: LD_VAR 0 1
9784: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
9785: LD_INT 0
9787: PPUSH
// if not multi_points or not side or side > 8 then
9788: LD_EXP 41
9792: NOT
9793: PUSH
9794: LD_VAR 0 1
9798: NOT
9799: OR
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_INT 8
9808: GREATER
9809: OR
9810: IFFALSE 9814
// exit ;
9812: GO 9851
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
9814: LD_ADDR_EXP 41
9818: PUSH
9819: LD_EXP 41
9823: PPUSH
9824: LD_VAR 0 1
9828: PPUSH
9829: LD_EXP 41
9833: PUSH
9834: LD_VAR 0 1
9838: ARRAY
9839: PUSH
9840: LD_VAR 0 2
9844: PLUS
9845: PPUSH
9846: CALL_OW 1
9850: ST_TO_ADDR
// end ;
9851: LD_VAR 0 3
9855: RET
// export function Multiplayer_GetPoints ( side ) ; begin
9856: LD_INT 0
9858: PPUSH
// if not multi_points or not side or side > 8 then
9859: LD_EXP 41
9863: NOT
9864: PUSH
9865: LD_VAR 0 1
9869: NOT
9870: OR
9871: PUSH
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 8
9879: GREATER
9880: OR
9881: IFFALSE 9885
// exit ;
9883: GO 9901
// result := multi_points [ side ] ;
9885: LD_ADDR_VAR 0 2
9889: PUSH
9890: LD_EXP 41
9894: PUSH
9895: LD_VAR 0 1
9899: ARRAY
9900: ST_TO_ADDR
// end ;
9901: LD_VAR 0 2
9905: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
9906: LD_INT 0
9908: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
9909: LD_ADDR_EXP 42
9913: PUSH
9914: LD_EXP 42
9918: PPUSH
9919: LD_EXP 42
9923: PUSH
9924: LD_INT 1
9926: PLUS
9927: PPUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: CALL_OW 1
9937: ST_TO_ADDR
// end ;
9938: LD_VAR 0 2
9942: RET
// export function Multiplayer_GetCondition ( id ) ; begin
9943: LD_INT 0
9945: PPUSH
// if not id then
9946: LD_VAR 0 1
9950: NOT
9951: IFFALSE 9955
// exit ;
9953: GO 9971
// result := multi_points_conditions [ id ] ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_EXP 42
9964: PUSH
9965: LD_VAR 0 1
9969: ARRAY
9970: ST_TO_ADDR
// end ;
9971: LD_VAR 0 2
9975: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
9976: LD_INT 0
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// players := [ ] ;
9983: LD_ADDR_VAR 0 3
9987: PUSH
9988: EMPTY
9989: ST_TO_ADDR
// for i = 1 to 8 do
9990: LD_ADDR_VAR 0 4
9994: PUSH
9995: DOUBLE
9996: LD_INT 1
9998: DEC
9999: ST_TO_ADDR
10000: LD_INT 8
10002: PUSH
10003: FOR_TO
10004: IFFALSE 10063
// begin if i = side then
10006: LD_VAR 0 4
10010: PUSH
10011: LD_VAR 0 1
10015: EQUAL
10016: IFFALSE 10020
// continue ;
10018: GO 10003
// if multi_sides [ i ] and not multi_loosers [ i ] then
10020: LD_EXP 18
10024: PUSH
10025: LD_VAR 0 4
10029: ARRAY
10030: PUSH
10031: LD_EXP 36
10035: PUSH
10036: LD_VAR 0 4
10040: ARRAY
10041: NOT
10042: AND
10043: IFFALSE 10061
// players := players ^ i ;
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: LD_VAR 0 3
10054: PUSH
10055: LD_VAR 0 4
10059: ADD
10060: ST_TO_ADDR
// end ;
10061: GO 10003
10063: POP
10064: POP
// if not players then
10065: LD_VAR 0 3
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10341
// if players = 1 then
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: EQUAL
10082: IFFALSE 10143
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10084: LD_ADDR_VAR 0 4
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_VAR 0 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 51
10103: PUSH
10104: EMPTY
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 69
10115: PUSH
10116: FOR_IN
10117: IFFALSE 10139
// SetSide ( i , players [ 1 ] ) ;
10119: LD_VAR 0 4
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 1
10131: ARRAY
10132: PPUSH
10133: CALL_OW 235
10137: GO 10116
10139: POP
10140: POP
// end else
10141: GO 10341
// begin j := 1 ;
10143: LD_ADDR_VAR 0 5
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10151: LD_ADDR_VAR 0 4
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 1
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 51
10183: PUSH
10184: EMPTY
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 69
10214: PUSH
10215: FOR_IN
10216: IFFALSE 10339
// begin SetSide ( i , players [ j ] ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_VAR 0 5
10232: ARRAY
10233: PPUSH
10234: CALL_OW 235
// if IsDrivenBy ( i ) then
10238: LD_VAR 0 4
10242: PPUSH
10243: CALL_OW 311
10247: IFFALSE 10274
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10249: LD_VAR 0 4
10253: PPUSH
10254: CALL_OW 311
10258: PPUSH
10259: LD_VAR 0 3
10263: PUSH
10264: LD_VAR 0 5
10268: ARRAY
10269: PPUSH
10270: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10274: LD_VAR 0 4
10278: PPUSH
10279: CALL_OW 310
10283: PPUSH
10284: CALL_OW 247
10288: PUSH
10289: LD_INT 3
10291: EQUAL
10292: IFFALSE 10303
// ComExitBuilding ( i ) ;
10294: LD_VAR 0 4
10298: PPUSH
10299: CALL_OW 122
// j := j + 1 ;
10303: LD_ADDR_VAR 0 5
10307: PUSH
10308: LD_VAR 0 5
10312: PUSH
10313: LD_INT 1
10315: PLUS
10316: ST_TO_ADDR
// if j > players then
10317: LD_VAR 0 5
10321: PUSH
10322: LD_VAR 0 3
10326: GREATER
10327: IFFALSE 10337
// j := 1 ;
10329: LD_ADDR_VAR 0 5
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// end ;
10337: GO 10215
10339: POP
10340: POP
// end ; end ;
10341: LD_VAR 0 2
10345: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
10350: PPUSH
// i := 3 ;
10351: LD_ADDR_VAR 0 2
10355: PUSH
10356: LD_INT 3
10358: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10359: LD_ADDR_VAR 0 3
10363: PUSH
10364: LD_INT 5
10366: PUSH
10367: LD_INT 10
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 120
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 101
10386: PUSH
10387: LD_INT 8
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 27
10396: PUSH
10397: LD_INT 4
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10410: LD_INT 4
10412: PPUSH
10413: LD_INT 5
10415: PPUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_VAR 0 2
10425: ARRAY
10426: PUSH
10427: LD_INT 1
10429: ARRAY
10430: PPUSH
10431: LD_VAR 0 3
10435: PUSH
10436: LD_VAR 0 2
10440: ARRAY
10441: PUSH
10442: LD_INT 2
10444: ARRAY
10445: PPUSH
10446: LD_INT 0
10448: PPUSH
10449: CALL_OW 58
// end ;
10453: LD_VAR 0 1
10457: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10458: LD_INT 0
10460: PPUSH
// if not side or side > 8 then
10461: LD_VAR 0 1
10465: NOT
10466: PUSH
10467: LD_VAR 0 1
10471: PUSH
10472: LD_INT 8
10474: GREATER
10475: OR
10476: IFFALSE 10480
// exit ;
10478: GO 10497
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 6
10487: PPUSH
10488: CALL 9943 0 1
10492: PPUSH
10493: CALL 9785 0 2
// end ;
10497: LD_VAR 0 2
10501: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10502: LD_INT 0
10504: PPUSH
// if not side or side > 8 then
10505: LD_VAR 0 1
10509: NOT
10510: PUSH
10511: LD_VAR 0 1
10515: PUSH
10516: LD_INT 8
10518: GREATER
10519: OR
10520: IFFALSE 10524
// exit ;
10522: GO 10541
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 4
10531: PPUSH
10532: CALL 9943 0 1
10536: PPUSH
10537: CALL 9785 0 2
// end ;
10541: LD_VAR 0 2
10545: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10546: LD_INT 0
10548: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10549: LD_VAR 0 1
10553: NOT
10554: PUSH
10555: LD_VAR 0 1
10559: PUSH
10560: LD_INT 8
10562: GREATER
10563: OR
10564: PUSH
10565: LD_VAR 0 2
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 6
10575: PUSH
10576: LD_INT 36
10578: PUSH
10579: LD_INT 0
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: IN
10588: NOT
10589: OR
10590: IFFALSE 10594
// exit ;
10592: GO 10611
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10594: LD_VAR 0 1
10598: PPUSH
10599: LD_INT 3
10601: PPUSH
10602: CALL 9943 0 1
10606: PPUSH
10607: CALL 9785 0 2
// end ;
10611: LD_VAR 0 3
10615: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// if not un then
10620: LD_VAR 0 1
10624: NOT
10625: IFFALSE 10629
// exit ;
10627: GO 10675
// if not points then
10629: LD_VAR 0 3
10633: NOT
10634: IFFALSE 10651
// gained_points := Multiplayer_GetCondition ( 1 ) else
10636: LD_ADDR_VAR 0 5
10640: PUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL 9943 0 1
10648: ST_TO_ADDR
10649: GO 10661
// gained_points := points ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_VAR 0 3
10660: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10661: LD_VAR 0 2
10665: PPUSH
10666: LD_VAR 0 5
10670: PPUSH
10671: CALL 9785 0 2
10675: LD_VAR 0 4
10679: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10680: LD_INT 0
10682: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10683: LD_VAR 0 1
10687: PPUSH
10688: LD_INT 2
10690: PPUSH
10691: CALL 9943 0 1
10695: PPUSH
10696: CALL 9785 0 2
// end ; end_of_file
10700: LD_VAR 0 2
10704: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10705: LD_VAR 0 1
10709: PPUSH
10710: CALL_OW 255
10714: PUSH
10715: LD_EXP 3
10719: IN
10720: NOT
10721: IFFALSE 10725
// exit ;
10723: GO 10742
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10725: LD_VAR 0 1
10729: PPUSH
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_INT 0
10737: PPUSH
10738: CALL 10616 0 3
// end ;
10742: PPOPN 3
10744: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
10745: LD_INT 0
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL 73808 0 1
// side := GetSide ( un ) ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_VAR 0 1
10775: PPUSH
10776: CALL_OW 255
10780: ST_TO_ADDR
// if multi_sides [ side ] then
10781: LD_EXP 18
10785: PUSH
10786: LD_VAR 0 3
10790: ARRAY
10791: IFFALSE 10817
// if GetType ( un ) = unit_human then
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 247
10802: PUSH
10803: LD_INT 1
10805: EQUAL
10806: IFFALSE 10817
// MultiplayerEvent_HumanLost ( side ) ;
10808: LD_VAR 0 3
10812: PPUSH
10813: CALL 10502 0 1
// if side in botSides then
10817: LD_VAR 0 3
10821: PUSH
10822: LD_EXP 3
10826: IN
10827: IFFALSE 11320
// begin if side = botSides [ 1 ] then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_EXP 3
10838: PUSH
10839: LD_INT 1
10841: ARRAY
10842: EQUAL
10843: IFFALSE 11320
// begin if un in arForce then
10845: LD_VAR 0 1
10849: PUSH
10850: LD_EXP 14
10854: IN
10855: IFFALSE 10873
// arForce := arForce diff un ;
10857: LD_ADDR_EXP 14
10861: PUSH
10862: LD_EXP 14
10866: PUSH
10867: LD_VAR 0 1
10871: DIFF
10872: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
10873: LD_VAR 0 1
10877: PUSH
10878: LD_EXP 8
10882: IN
10883: PUSH
10884: LD_VAR 0 1
10888: PUSH
10889: LD_EXP 9
10893: IN
10894: OR
10895: IFFALSE 10989
// begin arVehicles := arVehicles diff un ;
10897: LD_ADDR_EXP 8
10901: PUSH
10902: LD_EXP 8
10906: PUSH
10907: LD_VAR 0 1
10911: DIFF
10912: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
10913: LD_ADDR_EXP 9
10917: PUSH
10918: LD_EXP 9
10922: PUSH
10923: LD_VAR 0 1
10927: DIFF
10928: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
10929: LD_ADDR_EXP 6
10933: PUSH
10934: LD_EXP 6
10938: PUSH
10939: LD_VAR 0 1
10943: PPUSH
10944: CALL_OW 265
10948: PUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 262
10958: PUSH
10959: LD_VAR 0 1
10963: PPUSH
10964: CALL_OW 263
10968: PUSH
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 264
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: PUSH
10985: EMPTY
10986: LIST
10987: ADD
10988: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
10989: LD_VAR 0 1
10993: PPUSH
10994: CALL_OW 257
10998: PUSH
10999: LD_INT 3
11001: EQUAL
11002: PUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 110
11012: PUSH
11013: LD_INT 999
11015: LESS
11016: AND
11017: PUSH
11018: LD_EXP 11
11022: AND
11023: IFFALSE 11164
// begin if not IsOk ( arDep ) then
11025: LD_INT 2
11027: PPUSH
11028: CALL_OW 302
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11392
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11037: LD_ADDR_EXP 11
11041: PUSH
11042: LD_EXP 11
11046: PPUSH
11047: CALL 54288 0 1
11051: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11052: LD_ADDR_OWVAR 20
11056: PUSH
11057: LD_EXP 3
11061: PUSH
11062: LD_INT 1
11064: ARRAY
11065: ST_TO_ADDR
// uc_nation := nation_arabian ;
11066: LD_ADDR_OWVAR 21
11070: PUSH
11071: LD_INT 2
11073: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
11074: LD_INT 0
11076: PPUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: LD_OWVAR 67
11095: ARRAY
11096: PPUSH
11097: CALL_OW 383
// un := CreateHuman ;
11101: LD_ADDR_VAR 0 1
11105: PUSH
11106: CALL_OW 44
11110: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11111: LD_VAR 0 1
11115: PPUSH
11116: LD_INT 143
11118: PPUSH
11119: LD_INT 29
11121: PPUSH
11122: LD_INT 0
11124: PPUSH
11125: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11129: LD_VAR 0 1
11133: PPUSH
11134: LD_INT 115
11136: PPUSH
11137: LD_INT 52
11139: PPUSH
11140: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11144: LD_ADDR_EXP 14
11148: PUSH
11149: LD_EXP 14
11153: PPUSH
11154: LD_VAR 0 1
11158: PPUSH
11159: CALL 52905 0 2
11163: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 247
11173: PUSH
11174: LD_INT 3
11176: EQUAL
11177: IFFALSE 11320
// begin btype := GetBType ( un ) ;
11179: LD_ADDR_VAR 0 11
11183: PUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 266
11193: ST_TO_ADDR
// if btype = b_barracks then
11194: LD_VAR 0 11
11198: PUSH
11199: LD_INT 5
11201: EQUAL
11202: IFFALSE 11212
// btype := b_armoury ;
11204: LD_ADDR_VAR 0 11
11208: PUSH
11209: LD_INT 4
11211: ST_TO_ADDR
// if btype = b_factory then
11212: LD_VAR 0 11
11216: PUSH
11217: LD_INT 3
11219: EQUAL
11220: IFFALSE 11230
// btype := b_workshop ;
11222: LD_ADDR_VAR 0 11
11226: PUSH
11227: LD_INT 2
11229: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11230: LD_VAR 0 11
11234: PUSH
11235: LD_INT 8
11237: PUSH
11238: LD_INT 7
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: IN
11245: IFFALSE 11255
// btype := b_lab ;
11247: LD_ADDR_VAR 0 11
11251: PUSH
11252: LD_INT 6
11254: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11255: LD_ADDR_EXP 7
11259: PUSH
11260: LD_EXP 7
11264: PPUSH
11265: LD_EXP 7
11269: PUSH
11270: LD_INT 1
11272: PLUS
11273: PPUSH
11274: LD_VAR 0 11
11278: PUSH
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 250
11288: PUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 251
11298: PUSH
11299: LD_VAR 0 1
11303: PPUSH
11304: CALL_OW 254
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 1
11319: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
11320: LD_EXP 35
11324: PUSH
11325: LD_EXP 27
11329: AND
11330: IFFALSE 11392
// if un in multi_commanders then
11332: LD_VAR 0 1
11336: PUSH
11337: LD_EXP 35
11341: IN
11342: IFFALSE 11392
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11344: LD_ADDR_EXP 36
11348: PUSH
11349: LD_EXP 36
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 1
11366: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11367: LD_ADDR_EXP 35
11371: PUSH
11372: LD_EXP 35
11376: PUSH
11377: LD_VAR 0 1
11381: DIFF
11382: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11383: LD_VAR 0 3
11387: PPUSH
11388: CALL 9976 0 1
// end ; end ;
11392: PPOPN 11
11394: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
// begin side := GetSide ( building ) ;
11401: LD_ADDR_VAR 0 4
11405: PUSH
11406: LD_VAR 0 1
11410: PPUSH
11411: CALL_OW 255
11415: ST_TO_ADDR
// if multi_sides [ side ] then
11416: LD_EXP 18
11420: PUSH
11421: LD_VAR 0 4
11425: ARRAY
11426: IFFALSE 11447
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11428: LD_VAR 0 4
11432: PPUSH
11433: LD_VAR 0 1
11437: PPUSH
11438: CALL_OW 266
11442: PPUSH
11443: CALL 10546 0 2
// if side = botSides [ 1 ] then
11447: LD_VAR 0 4
11451: PUSH
11452: LD_EXP 3
11456: PUSH
11457: LD_INT 1
11459: ARRAY
11460: EQUAL
11461: IFFALSE 11557
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11463: LD_ADDR_EXP 7
11467: PUSH
11468: LD_EXP 7
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 3
11480: ST_TO_ADDR
// btype := GetBType ( building ) ;
11481: LD_ADDR_VAR 0 5
11485: PUSH
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 266
11495: ST_TO_ADDR
// case btype of b_workshop :
11496: LD_VAR 0 5
11500: PUSH
11501: LD_INT 2
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11521
11509: POP
// ComUpgrade ( building ) ; b_lab :
11510: LD_VAR 0 1
11514: PPUSH
11515: CALL_OW 146
11519: GO 11557
11521: LD_INT 6
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11556
11529: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11530: LD_VAR 0 1
11534: PPUSH
11535: LD_INT 10
11537: PPUSH
11538: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11542: LD_VAR 0 1
11546: PPUSH
11547: LD_INT 15
11549: PPUSH
11550: CALL_OW 207
// end ; end ;
11554: GO 11557
11556: POP
// end ; end ;
11557: PPOPN 5
11559: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11560: LD_VAR 0 1
11564: PUSH
11565: LD_INT 22
11567: PUSH
11568: LD_EXP 3
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 33
11583: PUSH
11584: LD_INT 2
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PPUSH
11595: CALL_OW 69
11599: IN
11600: IFFALSE 11611
// ComUnlink ( un ) ;
11602: LD_VAR 0 1
11606: PPUSH
11607: CALL_OW 136
// end ;
11611: PPOPN 1
11613: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11614: LD_VAR 0 2
11618: PPUSH
11619: CALL_OW 255
11623: PUSH
11624: LD_EXP 3
11628: IN
11629: NOT
11630: IFFALSE 11634
// exit ;
11632: GO 11697
// if unit in arForceTmp then
11634: LD_VAR 0 2
11638: PUSH
11639: LD_EXP 15
11643: IN
11644: IFFALSE 11697
// begin arForceTmp := arForceTmp diff unit ;
11646: LD_ADDR_EXP 15
11650: PUSH
11651: LD_EXP 15
11655: PUSH
11656: LD_VAR 0 2
11660: DIFF
11661: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11662: LD_ADDR_EXP 14
11666: PUSH
11667: LD_EXP 14
11671: PPUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL 52905 0 2
11681: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11682: LD_VAR 0 2
11686: PPUSH
11687: LD_INT 103
11689: PPUSH
11690: LD_INT 54
11692: PPUSH
11693: CALL_OW 111
// end ; end ;
11697: PPOPN 2
11699: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
11700: LD_INT 0
11702: PPUSH
11703: PPUSH
11704: PPUSH
11705: PPUSH
11706: PPUSH
11707: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
11708: LD_VAR 0 1
11712: PPUSH
11713: LD_VAR 0 2
11717: PPUSH
11718: CALL 73866 0 2
// side := GetSide ( vehicle ) ;
11722: LD_ADDR_VAR 0 4
11726: PUSH
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 255
11736: ST_TO_ADDR
// if multi_sides [ side ] then
11737: LD_EXP 18
11741: PUSH
11742: LD_VAR 0 4
11746: ARRAY
11747: IFFALSE 11758
// MultiplayerEvent_Produced ( side ) ;
11749: LD_VAR 0 4
11753: PPUSH
11754: CALL 10458 0 1
// if side = botSides [ 1 ] then
11758: LD_VAR 0 4
11762: PUSH
11763: LD_EXP 3
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: EQUAL
11772: IFFALSE 11968
// begin driver := IsDrivenBy ( vehicle ) ;
11774: LD_ADDR_VAR 0 8
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 311
11788: ST_TO_ADDR
// if driver then
11789: LD_VAR 0 8
11793: IFFALSE 11827
// begin SetTag ( driver , tMech ) ;
11795: LD_VAR 0 8
11799: PPUSH
11800: LD_INT 7
11802: PPUSH
11803: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
11807: LD_ADDR_EXP 10
11811: PUSH
11812: LD_EXP 10
11816: PPUSH
11817: LD_VAR 0 8
11821: PPUSH
11822: CALL 52905 0 2
11826: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 263
11836: PUSH
11837: LD_INT 2
11839: EQUAL
11840: PUSH
11841: LD_VAR 0 1
11845: PPUSH
11846: CALL_OW 264
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: LD_INT 88
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: IN
11861: NOT
11862: AND
11863: IFFALSE 11887
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
11865: LD_ADDR_EXP 16
11869: PUSH
11870: LD_EXP 16
11874: PPUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL 52905 0 2
11884: ST_TO_ADDR
// exit ;
11885: GO 11968
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11887: LD_EXP 12
11891: PUSH
11892: LD_EXP 8
11896: PPUSH
11897: CALL 17316 0 1
11901: GREATER
11902: PUSH
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 264
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: LD_INT 88
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: IN
11923: OR
11924: IFFALSE 11948
// arVehicles := Join ( arVehicles , vehicle ) else
11926: LD_ADDR_EXP 8
11930: PUSH
11931: LD_EXP 8
11935: PPUSH
11936: LD_VAR 0 1
11940: PPUSH
11941: CALL 52905 0 2
11945: ST_TO_ADDR
11946: GO 11968
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
11948: LD_ADDR_EXP 9
11952: PUSH
11953: LD_EXP 9
11957: PPUSH
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL 52905 0 2
11967: ST_TO_ADDR
// end ; end ;
11968: PPOPN 8
11970: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
11971: LD_VAR 0 1
11975: PPUSH
11976: CALL_OW 110
11980: PUSH
11981: LD_INT 7
11983: EQUAL
11984: IFFALSE 11998
// SetTag ( driver , 0 ) ;
11986: LD_VAR 0 1
11990: PPUSH
11991: LD_INT 0
11993: PPUSH
11994: CALL_OW 109
// end ;
11998: PPOPN 4
12000: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12001: LD_VAR 0 2
12005: PPUSH
12006: CALL_OW 255
12010: PUSH
12011: LD_EXP 3
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: EQUAL
12020: IFFALSE 12050
// if tech in arTech then
12022: LD_VAR 0 1
12026: PUSH
12027: LD_EXP 5
12031: IN
12032: IFFALSE 12050
// arTech := arTech diff tech ;
12034: LD_ADDR_EXP 5
12038: PUSH
12039: LD_EXP 5
12043: PUSH
12044: LD_VAR 0 1
12048: DIFF
12049: ST_TO_ADDR
// end ;
12050: PPOPN 2
12052: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL 73825 0 1
// end ; end_of_file
12062: PPOPN 1
12064: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12065: LD_INT 2
12067: PPUSH
12068: CALL_OW 302
12072: PUSH
12073: LD_INT 2
12075: PPUSH
12076: CALL_OW 255
12080: PUSH
12081: LD_EXP 3
12085: PUSH
12086: LD_INT 1
12088: ARRAY
12089: EQUAL
12090: AND
12091: IFFALSE 12128
12093: GO 12095
12095: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
12096: LD_INT 10500
12098: PUSH
12099: LD_INT 2100
12101: PUSH
12102: LD_OWVAR 67
12106: MUL
12107: MINUS
12108: PPUSH
12109: CALL_OW 67
// activeArabAttacks := true ;
12113: LD_ADDR_EXP 4
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12121: LD_INT 0
12123: PPUSH
12124: CALL 12302 0 1
// end ;
12128: END
// every 35 35$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12129: LD_INT 2
12131: PPUSH
12132: CALL_OW 302
12136: PUSH
12137: LD_INT 2
12139: PPUSH
12140: CALL_OW 255
12144: PUSH
12145: LD_EXP 3
12149: PUSH
12150: LD_INT 1
12152: ARRAY
12153: EQUAL
12154: AND
12155: IFFALSE 12169
12157: GO 12159
12159: DISABLE
// ArabAttack ( Difficulty ) ;
12160: LD_OWVAR 67
12164: PPUSH
12165: CALL 12302 0 1
12169: END
// every 55 55$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12170: LD_INT 2
12172: PPUSH
12173: CALL_OW 302
12177: PUSH
12178: LD_INT 2
12180: PPUSH
12181: CALL_OW 255
12185: PUSH
12186: LD_EXP 3
12190: PUSH
12191: LD_INT 1
12193: ARRAY
12194: EQUAL
12195: AND
12196: IFFALSE 12214
12198: GO 12200
12200: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12201: LD_OWVAR 67
12205: PUSH
12206: LD_INT 1
12208: PLUS
12209: PPUSH
12210: CALL 12302 0 1
12214: END
// every 105 105$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12215: LD_INT 2
12217: PPUSH
12218: CALL_OW 302
12222: PUSH
12223: LD_INT 2
12225: PPUSH
12226: CALL_OW 255
12230: PUSH
12231: LD_EXP 3
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: EQUAL
12240: AND
12241: IFFALSE 12259
12243: GO 12245
12245: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12246: LD_OWVAR 67
12250: PUSH
12251: LD_INT 2
12253: PLUS
12254: PPUSH
12255: CALL 12302 0 1
12259: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12260: LD_INT 2
12262: PPUSH
12263: LD_INT 81
12265: PUSH
12266: LD_EXP 3
12270: PUSH
12271: LD_INT 1
12273: ARRAY
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 70
12283: IFFALSE 12301
12285: GO 12287
12287: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12288: LD_OWVAR 67
12292: PUSH
12293: LD_INT 2
12295: PLUS
12296: PPUSH
12297: CALL 12302 0 1
12301: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12302: LD_INT 0
12304: PPUSH
12305: PPUSH
12306: PPUSH
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
// uc_side := botSides [ 1 ] ;
12311: LD_ADDR_OWVAR 20
12315: PUSH
12316: LD_EXP 3
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: ST_TO_ADDR
// uc_nation := nation_arabian ;
12325: LD_ADDR_OWVAR 21
12329: PUSH
12330: LD_INT 2
12332: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12333: LD_ADDR_VAR 0 4
12337: PUSH
12338: LD_INT 3
12340: PUSH
12341: LD_INT 5
12343: PUSH
12344: LD_INT 7
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: LD_OWVAR 67
12356: ARRAY
12357: ST_TO_ADDR
// arAttackersInf := [ ] ;
12358: LD_ADDR_EXP 43
12362: PUSH
12363: EMPTY
12364: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12365: LD_ADDR_EXP 44
12369: PUSH
12370: EMPTY
12371: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12372: LD_ADDR_VAR 0 7
12376: PUSH
12377: LD_INT 48
12379: PUSH
12380: LD_INT 52
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 135
12389: PUSH
12390: LD_INT 48
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_VAR 0 1
12405: PUSH
12406: LD_INT 2
12408: MOD
12409: PUSH
12410: LD_INT 1
12412: PLUS
12413: ARRAY
12414: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12415: LD_ADDR_VAR 0 8
12419: PUSH
12420: LD_INT 12
12422: PUSH
12423: LD_INT 13
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 23
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_VAR 0 1
12448: PUSH
12449: LD_INT 2
12451: MOD
12452: PUSH
12453: LD_INT 1
12455: PLUS
12456: ARRAY
12457: ST_TO_ADDR
// InitHC_All ( ) ;
12458: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: DOUBLE
12468: LD_INT 1
12470: DEC
12471: ST_TO_ADDR
12472: LD_INT 3
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: LD_INT 6
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: PUSH
12486: LD_OWVAR 67
12490: ARRAY
12491: PUSH
12492: LD_VAR 0 1
12496: PLUS
12497: PUSH
12498: FOR_TO
12499: IFFALSE 12631
// begin PrepareSoldier ( false , skill ) ;
12501: LD_INT 0
12503: PPUSH
12504: LD_VAR 0 4
12508: PPUSH
12509: CALL_OW 381
// un := CreateHuman ;
12513: LD_ADDR_VAR 0 5
12517: PUSH
12518: CALL_OW 44
12522: ST_TO_ADDR
// if i mod 2 = 0 then
12523: LD_VAR 0 3
12527: PUSH
12528: LD_INT 2
12530: MOD
12531: PUSH
12532: LD_INT 0
12534: EQUAL
12535: IFFALSE 12549
// SetClass ( un , class_mortar ) ;
12537: LD_VAR 0 5
12541: PPUSH
12542: LD_INT 8
12544: PPUSH
12545: CALL_OW 336
// SetDir ( un , 1 ) ;
12549: LD_VAR 0 5
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
12561: LD_VAR 0 5
12565: PPUSH
12566: LD_VAR 0 8
12570: PUSH
12571: LD_INT 1
12573: ARRAY
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12582: LD_ADDR_EXP 43
12586: PUSH
12587: LD_EXP 43
12591: PPUSH
12592: LD_VAR 0 5
12596: PPUSH
12597: CALL 52905 0 2
12601: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
12602: LD_VAR 0 5
12606: PPUSH
12607: LD_VAR 0 7
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PPUSH
12616: LD_VAR 0 7
12620: PUSH
12621: LD_INT 2
12623: ARRAY
12624: PPUSH
12625: CALL_OW 114
// end ;
12629: GO 12498
12631: POP
12632: POP
// for i := 1 to 3 + v do
12633: LD_ADDR_VAR 0 3
12637: PUSH
12638: DOUBLE
12639: LD_INT 1
12641: DEC
12642: ST_TO_ADDR
12643: LD_INT 3
12645: PUSH
12646: LD_VAR 0 1
12650: PLUS
12651: PUSH
12652: FOR_TO
12653: IFFALSE 12850
// begin PrepareMechanic ( false , skill ) ;
12655: LD_INT 0
12657: PPUSH
12658: LD_VAR 0 4
12662: PPUSH
12663: CALL_OW 383
// un := CreateHuman ;
12667: LD_ADDR_VAR 0 5
12671: PUSH
12672: CALL_OW 44
12676: ST_TO_ADDR
// SetTag ( un , 999 ) ;
12677: LD_VAR 0 5
12681: PPUSH
12682: LD_INT 999
12684: PPUSH
12685: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
12689: LD_INT 14
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: LD_INT 27
12700: PUSH
12701: LD_INT 25
12703: PUSH
12704: LD_INT 28
12706: PUSH
12707: LD_INT 26
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: PUSH
12716: LD_VAR 0 3
12720: PUSH
12721: LD_INT 4
12723: MOD
12724: PUSH
12725: LD_INT 1
12727: PLUS
12728: ARRAY
12729: PPUSH
12730: LD_INT 80
12732: PPUSH
12733: CALL 20054 0 5
// veh := CreateVehicle ;
12737: LD_ADDR_VAR 0 6
12741: PUSH
12742: CALL_OW 45
12746: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12747: LD_VAR 0 6
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12759: LD_VAR 0 6
12763: PPUSH
12764: LD_VAR 0 8
12768: PUSH
12769: LD_INT 2
12771: ARRAY
12772: PPUSH
12773: LD_INT 0
12775: PPUSH
12776: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12780: LD_VAR 0 5
12784: PPUSH
12785: LD_VAR 0 6
12789: PPUSH
12790: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12794: LD_VAR 0 5
12798: PPUSH
12799: LD_VAR 0 7
12803: PUSH
12804: LD_INT 1
12806: ARRAY
12807: PPUSH
12808: LD_VAR 0 7
12812: PUSH
12813: LD_INT 2
12815: ARRAY
12816: PPUSH
12817: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12821: LD_ADDR_EXP 44
12825: PUSH
12826: LD_EXP 44
12830: PPUSH
12831: LD_VAR 0 6
12835: PPUSH
12836: CALL 52905 0 2
12840: ST_TO_ADDR
// wait ( 0 0$2 ) ;
12841: LD_INT 70
12843: PPUSH
12844: CALL_OW 67
// end ;
12848: GO 12652
12850: POP
12851: POP
// wait ( 0 0$2 ) ;
12852: LD_INT 70
12854: PPUSH
12855: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
12859: LD_ADDR_VAR 0 3
12863: PUSH
12864: DOUBLE
12865: LD_INT 1
12867: DEC
12868: ST_TO_ADDR
12869: LD_INT 1
12871: PUSH
12872: LD_INT 2
12874: PUSH
12875: LD_INT 2
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_OWVAR 67
12887: ARRAY
12888: PUSH
12889: FOR_TO
12890: IFFALSE 13003
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
12892: LD_INT 14
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_INT 5
12900: PPUSH
12901: LD_INT 29
12903: PPUSH
12904: LD_INT 80
12906: PPUSH
12907: CALL 20054 0 5
// veh := CreateVehicle ;
12911: LD_ADDR_VAR 0 6
12915: PUSH
12916: CALL_OW 45
12920: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12921: LD_VAR 0 6
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12933: LD_VAR 0 6
12937: PPUSH
12938: LD_VAR 0 8
12942: PUSH
12943: LD_INT 2
12945: ARRAY
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12954: LD_VAR 0 5
12958: PPUSH
12959: LD_VAR 0 7
12963: PUSH
12964: LD_INT 1
12966: ARRAY
12967: PPUSH
12968: LD_VAR 0 7
12972: PUSH
12973: LD_INT 2
12975: ARRAY
12976: PPUSH
12977: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12981: LD_ADDR_EXP 44
12985: PUSH
12986: LD_EXP 44
12990: PPUSH
12991: LD_VAR 0 6
12995: PPUSH
12996: CALL 52905 0 2
13000: ST_TO_ADDR
// end ;
13001: GO 12889
13003: POP
13004: POP
// end ;
13005: LD_VAR 0 2
13009: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
13010: LD_EXP 43
13014: IFFALSE 13544
13016: GO 13018
13018: DISABLE
13019: LD_INT 0
13021: PPUSH
13022: PPUSH
13023: PPUSH
13024: PPUSH
13025: PPUSH
// begin enable ;
13026: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13027: LD_ADDR_VAR 0 1
13031: PUSH
13032: LD_INT 120
13034: PUSH
13035: LD_INT 11
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PPUSH
13042: CALL_OW 69
13046: PUSH
13047: FOR_IN
13048: IFFALSE 13064
// SetTag ( i , 0 ) ;
13050: LD_VAR 0 1
13054: PPUSH
13055: LD_INT 0
13057: PPUSH
13058: CALL_OW 109
13062: GO 13047
13064: POP
13065: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13066: LD_ADDR_VAR 0 2
13070: PUSH
13071: LD_EXP 43
13075: PPUSH
13076: LD_INT 50
13078: PUSH
13079: EMPTY
13080: LIST
13081: PPUSH
13082: CALL_OW 72
13086: ST_TO_ADDR
// arAttackersInf := [ ] ;
13087: LD_ADDR_EXP 43
13091: PUSH
13092: EMPTY
13093: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13094: LD_ADDR_VAR 0 1
13098: PUSH
13099: LD_VAR 0 2
13103: PPUSH
13104: LD_INT 25
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PPUSH
13114: CALL_OW 72
13118: PUSH
13119: FOR_IN
13120: IFFALSE 13251
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13122: LD_ADDR_VAR 0 3
13126: PUSH
13127: LD_INT 81
13129: PUSH
13130: LD_EXP 3
13134: PUSH
13135: LD_INT 1
13137: ARRAY
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 3
13145: PUSH
13146: LD_INT 120
13148: PUSH
13149: LD_INT 11
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 21
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 21
13175: PUSH
13176: LD_INT 3
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: PPUSH
13193: CALL_OW 69
13197: PPUSH
13198: LD_VAR 0 1
13202: PPUSH
13203: CALL_OW 74
13207: ST_TO_ADDR
// if not nearest then
13208: LD_VAR 0 3
13212: NOT
13213: IFFALSE 13217
// break ;
13215: GO 13251
// SetTag ( nearest , tMined ) ;
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 11
13224: PPUSH
13225: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13229: LD_VAR 0 1
13233: PPUSH
13234: LD_INT 0
13236: PPUSH
13237: LD_INT 0
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: CALL_OW 192
// end ;
13249: GO 13119
13251: POP
13252: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_VAR 0 2
13262: PPUSH
13263: LD_INT 50
13265: PUSH
13266: EMPTY
13267: LIST
13268: PPUSH
13269: CALL_OW 72
13273: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13274: LD_INT 70
13276: PPUSH
13277: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13281: LD_ADDR_VAR 0 2
13285: PUSH
13286: LD_VAR 0 2
13290: PPUSH
13291: LD_INT 50
13293: PUSH
13294: EMPTY
13295: LIST
13296: PPUSH
13297: CALL_OW 72
13301: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13302: LD_ADDR_VAR 0 4
13306: PUSH
13307: LD_INT 81
13309: PUSH
13310: LD_EXP 3
13314: PUSH
13315: LD_INT 1
13317: ARRAY
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 69
13327: ST_TO_ADDR
// for i in tmp do
13328: LD_ADDR_VAR 0 1
13332: PUSH
13333: LD_VAR 0 2
13337: PUSH
13338: FOR_IN
13339: IFFALSE 13535
// if GetClass ( i ) <> 1 then
13341: LD_VAR 0 1
13345: PPUSH
13346: CALL_OW 257
13350: PUSH
13351: LD_INT 1
13353: NONEQUAL
13354: IFFALSE 13382
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13356: LD_VAR 0 1
13360: PPUSH
13361: LD_VAR 0 4
13365: PPUSH
13366: LD_VAR 0 1
13370: PPUSH
13371: CALL_OW 74
13375: PPUSH
13376: CALL_OW 115
13380: GO 13533
// if not HasTask ( i ) then
13382: LD_VAR 0 1
13386: PPUSH
13387: CALL_OW 314
13391: NOT
13392: IFFALSE 13533
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: LD_VAR 0 4
13403: PPUSH
13404: LD_INT 3
13406: PUSH
13407: LD_INT 120
13409: PUSH
13410: LD_INT 11
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 2
13423: PUSH
13424: LD_INT 21
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 72
13457: PPUSH
13458: LD_VAR 0 1
13462: PPUSH
13463: CALL_OW 74
13467: ST_TO_ADDR
// if not nearest then
13468: LD_VAR 0 3
13472: NOT
13473: IFFALSE 13501
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13475: LD_VAR 0 1
13479: PPUSH
13480: LD_VAR 0 4
13484: PPUSH
13485: LD_VAR 0 1
13489: PPUSH
13490: CALL_OW 74
13494: PPUSH
13495: CALL_OW 115
13499: GO 13533
// begin SetTag ( nearest , tMined ) ;
13501: LD_VAR 0 3
13505: PPUSH
13506: LD_INT 11
13508: PPUSH
13509: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13513: LD_VAR 0 1
13517: PPUSH
13518: LD_INT 0
13520: PPUSH
13521: LD_INT 0
13523: PPUSH
13524: LD_VAR 0 3
13528: PPUSH
13529: CALL_OW 132
// end ; end ;
13533: GO 13338
13535: POP
13536: POP
// until not tmp ;
13537: LD_VAR 0 2
13541: NOT
13542: IFFALSE 13274
// end ;
13544: PPOPN 5
13546: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
13547: LD_EXP 44
13551: IFFALSE 13774
13553: GO 13555
13555: DISABLE
13556: LD_INT 0
13558: PPUSH
13559: PPUSH
13560: PPUSH
// begin enable ;
13561: ENABLE
// tmp := arAttackersVeh ;
13562: LD_ADDR_VAR 0 2
13566: PUSH
13567: LD_EXP 44
13571: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13572: LD_ADDR_EXP 44
13576: PUSH
13577: EMPTY
13578: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
13579: LD_ADDR_VAR 0 3
13583: PUSH
13584: LD_INT 139
13586: PUSH
13587: LD_INT 55
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 155
13596: PUSH
13597: LD_INT 92
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 53
13610: PUSH
13611: LD_INT 61
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 74
13620: PUSH
13621: LD_INT 98
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
13636: LD_VAR 0 2
13640: PUSH
13641: LD_INT 1
13643: ARRAY
13644: PPUSH
13645: LD_INT 139
13647: PPUSH
13648: LD_INT 55
13650: PPUSH
13651: CALL_OW 297
13655: PUSH
13656: LD_VAR 0 2
13660: PUSH
13661: LD_INT 1
13663: ARRAY
13664: PPUSH
13665: LD_INT 53
13667: PPUSH
13668: LD_INT 61
13670: PPUSH
13671: CALL_OW 297
13675: LESS
13676: IFFALSE 13694
// path := path [ 1 ] else
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: LD_VAR 0 3
13687: PUSH
13688: LD_INT 1
13690: ARRAY
13691: ST_TO_ADDR
13692: GO 13708
// path := path [ 2 ] ;
13694: LD_ADDR_VAR 0 3
13698: PUSH
13699: LD_VAR 0 3
13703: PUSH
13704: LD_INT 2
13706: ARRAY
13707: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13708: LD_INT 70
13710: PPUSH
13711: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13715: LD_ADDR_VAR 0 2
13719: PUSH
13720: LD_VAR 0 2
13724: PPUSH
13725: LD_INT 50
13727: PUSH
13728: EMPTY
13729: LIST
13730: PPUSH
13731: CALL_OW 72
13735: ST_TO_ADDR
// for i in tmp do
13736: LD_ADDR_VAR 0 1
13740: PUSH
13741: LD_VAR 0 2
13745: PUSH
13746: FOR_IN
13747: IFFALSE 13765
// AgressiveMove ( i , path ) until not tmp ;
13749: LD_VAR 0 1
13753: PPUSH
13754: LD_VAR 0 3
13758: PPUSH
13759: CALL 55509 0 2
13763: GO 13746
13765: POP
13766: POP
13767: LD_VAR 0 2
13771: NOT
13772: IFFALSE 13708
// end ;
13774: PPOPN 3
13776: END
// every 1 1$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
13777: LD_EXP 16
13781: PPUSH
13782: CALL 17316 0 1
13786: PUSH
13787: LD_INT 3
13789: GREATEREQUAL
13790: IFFALSE 13911
13792: GO 13794
13794: DISABLE
13795: LD_INT 0
13797: PPUSH
13798: PPUSH
// begin enable ;
13799: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
13800: LD_ADDR_VAR 0 2
13804: PUSH
13805: LD_EXP 16
13809: PPUSH
13810: LD_INT 61
13812: PUSH
13813: EMPTY
13814: LIST
13815: PPUSH
13816: CALL_OW 72
13820: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
13821: LD_ADDR_EXP 16
13825: PUSH
13826: LD_EXP 16
13830: PUSH
13831: LD_VAR 0 2
13835: DIFF
13836: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13837: LD_INT 70
13839: PPUSH
13840: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13844: LD_ADDR_VAR 0 2
13848: PUSH
13849: LD_VAR 0 2
13853: PPUSH
13854: LD_INT 50
13856: PUSH
13857: EMPTY
13858: LIST
13859: PPUSH
13860: CALL_OW 72
13864: ST_TO_ADDR
// for i in tmp do
13865: LD_ADDR_VAR 0 1
13869: PUSH
13870: LD_VAR 0 2
13874: PUSH
13875: FOR_IN
13876: IFFALSE 13902
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
13878: LD_VAR 0 1
13882: PPUSH
13883: LD_INT 98
13885: PUSH
13886: LD_INT 63
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: PPUSH
13896: CALL 55509 0 2
13900: GO 13875
13902: POP
13903: POP
13904: LD_VAR 0 2
13908: NOT
13909: IFFALSE 13837
// end ;
13911: PPOPN 2
13913: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
13914: LD_EXP 9
13918: PUSH
13919: LD_EXP 4
13923: AND
13924: IFFALSE 14481
13926: GO 13928
13928: DISABLE
13929: LD_INT 0
13931: PPUSH
13932: PPUSH
13933: PPUSH
// begin enable ;
13934: ENABLE
// if not arVehiclesAtttackers then
13935: LD_EXP 9
13939: NOT
13940: IFFALSE 13944
// exit ;
13942: GO 14481
// for i in arVehiclesAtttackers do
13944: LD_ADDR_VAR 0 1
13948: PUSH
13949: LD_EXP 9
13953: PUSH
13954: FOR_IN
13955: IFFALSE 14479
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 302
13966: NOT
13967: PUSH
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 255
13977: PUSH
13978: LD_EXP 3
13982: PUSH
13983: LD_INT 1
13985: ARRAY
13986: NONEQUAL
13987: OR
13988: IFFALSE 14008
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
13990: LD_ADDR_EXP 9
13994: PUSH
13995: LD_EXP 9
13999: PUSH
14000: LD_VAR 0 1
14004: DIFF
14005: ST_TO_ADDR
// continue ;
14006: GO 13954
// end ; if GetTag ( i ) = 300 then
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL_OW 110
14017: PUSH
14018: LD_INT 300
14020: EQUAL
14021: IFFALSE 14136
// begin if GetFuel ( i ) < 50 then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 261
14032: PUSH
14033: LD_INT 50
14035: LESS
14036: IFFALSE 14095
// begin ComMoveXY ( i , 102 , 47 ) ;
14038: LD_VAR 0 1
14042: PPUSH
14043: LD_INT 102
14045: PPUSH
14046: LD_INT 47
14048: PPUSH
14049: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14053: LD_INT 35
14055: PPUSH
14056: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_INT 102
14067: PPUSH
14068: LD_INT 47
14070: PPUSH
14071: CALL_OW 297
14075: PUSH
14076: LD_INT 4
14078: LESS
14079: IFFALSE 14053
// SetFuel ( i , 100 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 100
14088: PPUSH
14089: CALL_OW 240
// end else
14093: GO 14136
// if not IsInArea ( i , arParkingArea ) then
14095: LD_VAR 0 1
14099: PPUSH
14100: LD_INT 14
14102: PPUSH
14103: CALL_OW 308
14107: NOT
14108: IFFALSE 14124
// ComMoveToArea ( i , arParkingArea ) else
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_INT 14
14117: PPUSH
14118: CALL_OW 113
14122: GO 14136
// SetTag ( i , 301 ) ;
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_INT 301
14131: PPUSH
14132: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14136: LD_VAR 0 1
14140: PPUSH
14141: CALL_OW 110
14145: PUSH
14146: LD_INT 301
14148: EQUAL
14149: IFFALSE 14291
// begin if GetLives ( i ) < 1000 then
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 256
14160: PUSH
14161: LD_INT 1000
14163: LESS
14164: IFFALSE 14268
// begin if not IsDrivenBy ( i ) then
14166: LD_VAR 0 1
14170: PPUSH
14171: CALL_OW 311
14175: NOT
14176: IFFALSE 14180
// continue ;
14178: GO 13954
// mech := IsDrivenBy ( i ) ;
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_VAR 0 1
14189: PPUSH
14190: CALL_OW 311
14194: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14195: LD_VAR 0 2
14199: PPUSH
14200: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14204: LD_VAR 0 2
14208: PPUSH
14209: LD_VAR 0 1
14213: PPUSH
14214: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14218: LD_INT 35
14220: PPUSH
14221: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14225: LD_VAR 0 1
14229: PPUSH
14230: CALL_OW 256
14234: PUSH
14235: LD_INT 1000
14237: EQUAL
14238: IFFALSE 14218
// SetLives ( mech , 1000 ) ;
14240: LD_VAR 0 2
14244: PPUSH
14245: LD_INT 1000
14247: PPUSH
14248: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14252: LD_VAR 0 2
14256: PPUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 120
// end else
14266: GO 14291
// if IsDrivenBy ( i ) then
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 311
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 1
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 110
14300: PUSH
14301: LD_INT 300
14303: LESS
14304: IFFALSE 14477
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14306: LD_ADDR_VAR 0 3
14310: PUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_INT 81
14316: PUSH
14317: LD_EXP 3
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 70
14334: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14335: LD_VAR 0 1
14339: PPUSH
14340: CALL_OW 256
14344: PUSH
14345: LD_INT 650
14347: LESS
14348: IFFALSE 14373
// begin ComStop ( i ) ;
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 141
// SetTag ( i , 300 ) ;
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_INT 300
14366: PPUSH
14367: CALL_OW 109
// continue ;
14371: GO 13954
// end ; if enemy then
14373: LD_VAR 0 3
14377: IFFALSE 14417
// begin if not HasTask ( i ) then
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 314
14388: NOT
14389: IFFALSE 14415
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14391: LD_VAR 0 1
14395: PPUSH
14396: LD_VAR 0 3
14400: PPUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 74
14410: PPUSH
14411: CALL_OW 115
// end else
14415: GO 14477
// if arVehiclesAtttackers then
14417: LD_EXP 9
14421: IFFALSE 14477
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14423: LD_ADDR_VAR 0 3
14427: PUSH
14428: LD_INT 81
14430: PUSH
14431: LD_EXP 3
14435: PUSH
14436: LD_INT 1
14438: ARRAY
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PPUSH
14444: CALL_OW 69
14448: ST_TO_ADDR
// if enemy then
14449: LD_VAR 0 3
14453: IFFALSE 14477
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14455: LD_VAR 0 1
14459: PPUSH
14460: LD_INT 99
14462: PUSH
14463: LD_INT 66
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: PPUSH
14473: CALL 55509 0 2
// end ; end ; end ;
14477: GO 13954
14479: POP
14480: POP
// end ;
14481: PPOPN 3
14483: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14484: LD_INT 22
14486: PUSH
14487: LD_EXP 3
14491: PUSH
14492: LD_INT 1
14494: ARRAY
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 32
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PPUSH
14514: CALL_OW 69
14518: IFFALSE 14601
14520: GO 14522
14522: DISABLE
14523: LD_INT 0
14525: PPUSH
// begin enable ;
14526: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14527: LD_ADDR_VAR 0 1
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_EXP 3
14539: PUSH
14540: LD_INT 1
14542: ARRAY
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 32
14550: PUSH
14551: LD_INT 1
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PPUSH
14562: CALL_OW 69
14566: PUSH
14567: FOR_IN
14568: IFFALSE 14599
// if GetFuel ( i ) < 3 then
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 261
14579: PUSH
14580: LD_INT 3
14582: LESS
14583: IFFALSE 14597
// SetFuel ( i , 3 ) ;
14585: LD_VAR 0 1
14589: PPUSH
14590: LD_INT 3
14592: PPUSH
14593: CALL_OW 240
14597: GO 14567
14599: POP
14600: POP
// end ; end_of_file
14601: PPOPN 1
14603: END
// every 0 0$20 trigger game do
14604: LD_EXP 2
14608: IFFALSE 14653
14610: GO 14612
14612: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14613: LD_INT 15
14615: PUSH
14616: LD_INT 17
14618: PUSH
14619: LD_INT 16
14621: PUSH
14622: LD_INT 1
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PPUSH
14631: LD_EXP 32
14635: PUSH
14636: LD_INT 2
14638: ARRAY
14639: PPUSH
14640: LD_EXP 32
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: CALL 14654 0 3
14653: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
// if not areas then
14660: LD_VAR 0 1
14664: NOT
14665: IFFALSE 14669
// exit ;
14667: GO 15046
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
14669: LD_ADDR_VAR 0 7
14673: PUSH
14674: LD_INT 18
14676: PUSH
14677: LD_INT 19
14679: PUSH
14680: LD_INT 20
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: ST_TO_ADDR
// x := 5 ;
14688: LD_ADDR_VAR 0 6
14692: PUSH
14693: LD_INT 5
14695: ST_TO_ADDR
// repeat wait ( time ) ;
14696: LD_VAR 0 2
14700: PPUSH
14701: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
14705: LD_OWVAR 1
14709: PUSH
14710: LD_INT 37800
14712: PUSH
14713: LD_INT 31500
14715: PUSH
14716: LD_INT 25200
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: LD_OWVAR 67
14728: ARRAY
14729: LESS
14730: IFFALSE 14869
// begin for i := 1 to multi_sides do
14732: LD_ADDR_VAR 0 5
14736: PUSH
14737: DOUBLE
14738: LD_INT 1
14740: DEC
14741: ST_TO_ADDR
14742: LD_EXP 18
14746: PUSH
14747: FOR_TO
14748: IFFALSE 14860
// if multi_sides [ i ] then
14750: LD_EXP 18
14754: PUSH
14755: LD_VAR 0 5
14759: ARRAY
14760: IFFALSE 14858
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
14762: LD_VAR 0 7
14766: PUSH
14767: LD_EXP 18
14771: PUSH
14772: LD_VAR 0 5
14776: ARRAY
14777: ARRAY
14778: PPUSH
14779: LD_INT 1
14781: PPUSH
14782: CALL_OW 287
14786: PUSH
14787: LD_INT 32
14789: PUSH
14790: LD_INT 25
14792: PUSH
14793: LD_INT 23
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: PUSH
14801: LD_OWVAR 67
14805: ARRAY
14806: LESS
14807: IFFALSE 14858
// begin amount := amount - ( x * 10 ) ;
14809: LD_ADDR_VAR 0 3
14813: PUSH
14814: LD_VAR 0 3
14818: PUSH
14819: LD_VAR 0 6
14823: PUSH
14824: LD_INT 10
14826: MUL
14827: MINUS
14828: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
14829: LD_VAR 0 6
14833: PPUSH
14834: LD_VAR 0 7
14838: PUSH
14839: LD_EXP 18
14843: PUSH
14844: LD_VAR 0 5
14848: ARRAY
14849: ARRAY
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: CALL_OW 55
// end ; end ;
14858: GO 14747
14860: POP
14861: POP
// wait ( 0 0$2 ) ;
14862: LD_INT 70
14864: PPUSH
14865: CALL_OW 67
// end ; for i in areas do
14869: LD_ADDR_VAR 0 5
14873: PUSH
14874: LD_VAR 0 1
14878: PUSH
14879: FOR_IN
14880: IFFALSE 14963
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
14882: LD_VAR 0 5
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 287
14894: PUSH
14895: LD_INT 25
14897: PUSH
14898: LD_INT 22
14900: PUSH
14901: LD_INT 20
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: LIST
14908: PUSH
14909: LD_OWVAR 67
14913: ARRAY
14914: LESS
14915: IFFALSE 14961
// begin wait ( 0 0$5 ) ;
14917: LD_INT 175
14919: PPUSH
14920: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14924: LD_VAR 0 6
14928: PPUSH
14929: LD_VAR 0 5
14933: PPUSH
14934: LD_INT 1
14936: PPUSH
14937: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14941: LD_ADDR_VAR 0 3
14945: PUSH
14946: LD_VAR 0 3
14950: PUSH
14951: LD_VAR 0 6
14955: PUSH
14956: LD_INT 10
14958: MUL
14959: MINUS
14960: ST_TO_ADDR
// end ; end ;
14961: GO 14879
14963: POP
14964: POP
// time := time + 0 0$2 ;
14965: LD_ADDR_VAR 0 2
14969: PUSH
14970: LD_VAR 0 2
14974: PUSH
14975: LD_INT 70
14977: PLUS
14978: ST_TO_ADDR
// x := x - 1 ;
14979: LD_ADDR_VAR 0 6
14983: PUSH
14984: LD_VAR 0 6
14988: PUSH
14989: LD_INT 1
14991: MINUS
14992: ST_TO_ADDR
// if x = 0 then
14993: LD_VAR 0 6
14997: PUSH
14998: LD_INT 0
15000: EQUAL
15001: IFFALSE 15011
// x := 5 ;
15003: LD_ADDR_VAR 0 6
15007: PUSH
15008: LD_INT 5
15010: ST_TO_ADDR
// if time > 2 2$00 then
15011: LD_VAR 0 2
15015: PUSH
15016: LD_INT 4200
15018: GREATER
15019: IFFALSE 15029
// time := 0 0$30 ;
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_INT 1050
15028: ST_TO_ADDR
// until not game or amount <= 0 ;
15029: LD_EXP 2
15033: NOT
15034: PUSH
15035: LD_VAR 0 3
15039: PUSH
15040: LD_INT 0
15042: LESSEQUAL
15043: OR
15044: IFFALSE 14696
// end ; end_of_file
15046: LD_VAR 0 4
15050: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15051: LD_VAR 0 1
15055: PUSH
15056: LD_INT 200
15058: DOUBLE
15059: GREATEREQUAL
15060: IFFALSE 15068
15062: LD_INT 299
15064: DOUBLE
15065: LESSEQUAL
15066: IFTRUE 15070
15068: GO 15102
15070: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15071: LD_VAR 0 1
15075: PPUSH
15076: LD_VAR 0 2
15080: PPUSH
15081: LD_VAR 0 3
15085: PPUSH
15086: LD_VAR 0 4
15090: PPUSH
15091: LD_VAR 0 5
15095: PPUSH
15096: CALL 74297 0 5
15100: GO 15179
15102: LD_INT 300
15104: DOUBLE
15105: GREATEREQUAL
15106: IFFALSE 15114
15108: LD_INT 399
15110: DOUBLE
15111: LESSEQUAL
15112: IFTRUE 15116
15114: GO 15178
15116: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15117: LD_VAR 0 1
15121: PPUSH
15122: LD_VAR 0 2
15126: PPUSH
15127: LD_VAR 0 3
15131: PPUSH
15132: LD_VAR 0 4
15136: PPUSH
15137: LD_VAR 0 5
15141: PPUSH
15142: LD_VAR 0 6
15146: PPUSH
15147: LD_VAR 0 7
15151: PPUSH
15152: LD_VAR 0 8
15156: PPUSH
15157: LD_VAR 0 9
15161: PPUSH
15162: LD_VAR 0 10
15166: PPUSH
15167: LD_VAR 0 11
15171: PPUSH
15172: CALL 70509 0 11
15176: GO 15179
15178: POP
// end ;
15179: PPOPN 11
15181: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PPUSH
15192: LD_VAR 0 3
15196: PPUSH
15197: LD_VAR 0 4
15201: PPUSH
15202: LD_VAR 0 5
15206: PPUSH
15207: CALL 73858 0 5
// end ; end_of_file
15211: PPOPN 5
15213: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15214: LD_INT 0
15216: PPUSH
15217: PPUSH
// if exist_mode then
15218: LD_VAR 0 2
15222: IFFALSE 15247
// unit := CreateCharacter ( prefix & ident ) else
15224: LD_ADDR_VAR 0 5
15228: PUSH
15229: LD_VAR 0 3
15233: PUSH
15234: LD_VAR 0 1
15238: STR
15239: PPUSH
15240: CALL_OW 34
15244: ST_TO_ADDR
15245: GO 15262
// unit := NewCharacter ( ident ) ;
15247: LD_ADDR_VAR 0 5
15251: PUSH
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 25
15261: ST_TO_ADDR
// result := unit ;
15262: LD_ADDR_VAR 0 4
15266: PUSH
15267: LD_VAR 0 5
15271: ST_TO_ADDR
// end ;
15272: LD_VAR 0 4
15276: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
// if not side or not nation then
15281: LD_VAR 0 1
15285: NOT
15286: PUSH
15287: LD_VAR 0 2
15291: NOT
15292: OR
15293: IFFALSE 15297
// exit ;
15295: GO 16065
// case nation of nation_american :
15297: LD_VAR 0 2
15301: PUSH
15302: LD_INT 1
15304: DOUBLE
15305: EQUAL
15306: IFTRUE 15310
15308: GO 15524
15310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15311: LD_ADDR_VAR 0 4
15315: PUSH
15316: LD_INT 35
15318: PUSH
15319: LD_INT 45
15321: PUSH
15322: LD_INT 46
15324: PUSH
15325: LD_INT 47
15327: PUSH
15328: LD_INT 82
15330: PUSH
15331: LD_INT 83
15333: PUSH
15334: LD_INT 84
15336: PUSH
15337: LD_INT 85
15339: PUSH
15340: LD_INT 86
15342: PUSH
15343: LD_INT 1
15345: PUSH
15346: LD_INT 2
15348: PUSH
15349: LD_INT 6
15351: PUSH
15352: LD_INT 15
15354: PUSH
15355: LD_INT 16
15357: PUSH
15358: LD_INT 7
15360: PUSH
15361: LD_INT 12
15363: PUSH
15364: LD_INT 13
15366: PUSH
15367: LD_INT 10
15369: PUSH
15370: LD_INT 14
15372: PUSH
15373: LD_INT 20
15375: PUSH
15376: LD_INT 21
15378: PUSH
15379: LD_INT 22
15381: PUSH
15382: LD_INT 25
15384: PUSH
15385: LD_INT 32
15387: PUSH
15388: LD_INT 27
15390: PUSH
15391: LD_INT 36
15393: PUSH
15394: LD_INT 69
15396: PUSH
15397: LD_INT 39
15399: PUSH
15400: LD_INT 34
15402: PUSH
15403: LD_INT 40
15405: PUSH
15406: LD_INT 48
15408: PUSH
15409: LD_INT 49
15411: PUSH
15412: LD_INT 50
15414: PUSH
15415: LD_INT 51
15417: PUSH
15418: LD_INT 52
15420: PUSH
15421: LD_INT 53
15423: PUSH
15424: LD_INT 54
15426: PUSH
15427: LD_INT 55
15429: PUSH
15430: LD_INT 56
15432: PUSH
15433: LD_INT 57
15435: PUSH
15436: LD_INT 58
15438: PUSH
15439: LD_INT 59
15441: PUSH
15442: LD_INT 60
15444: PUSH
15445: LD_INT 61
15447: PUSH
15448: LD_INT 62
15450: PUSH
15451: LD_INT 80
15453: PUSH
15454: LD_INT 82
15456: PUSH
15457: LD_INT 83
15459: PUSH
15460: LD_INT 84
15462: PUSH
15463: LD_INT 85
15465: PUSH
15466: LD_INT 86
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: ST_TO_ADDR
15522: GO 15989
15524: LD_INT 2
15526: DOUBLE
15527: EQUAL
15528: IFTRUE 15532
15530: GO 15758
15532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15533: LD_ADDR_VAR 0 4
15537: PUSH
15538: LD_INT 35
15540: PUSH
15541: LD_INT 45
15543: PUSH
15544: LD_INT 46
15546: PUSH
15547: LD_INT 47
15549: PUSH
15550: LD_INT 82
15552: PUSH
15553: LD_INT 83
15555: PUSH
15556: LD_INT 84
15558: PUSH
15559: LD_INT 85
15561: PUSH
15562: LD_INT 87
15564: PUSH
15565: LD_INT 70
15567: PUSH
15568: LD_INT 1
15570: PUSH
15571: LD_INT 11
15573: PUSH
15574: LD_INT 3
15576: PUSH
15577: LD_INT 4
15579: PUSH
15580: LD_INT 5
15582: PUSH
15583: LD_INT 6
15585: PUSH
15586: LD_INT 15
15588: PUSH
15589: LD_INT 18
15591: PUSH
15592: LD_INT 7
15594: PUSH
15595: LD_INT 17
15597: PUSH
15598: LD_INT 8
15600: PUSH
15601: LD_INT 20
15603: PUSH
15604: LD_INT 21
15606: PUSH
15607: LD_INT 22
15609: PUSH
15610: LD_INT 72
15612: PUSH
15613: LD_INT 26
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 39
15621: PUSH
15622: LD_INT 40
15624: PUSH
15625: LD_INT 41
15627: PUSH
15628: LD_INT 42
15630: PUSH
15631: LD_INT 43
15633: PUSH
15634: LD_INT 48
15636: PUSH
15637: LD_INT 49
15639: PUSH
15640: LD_INT 50
15642: PUSH
15643: LD_INT 51
15645: PUSH
15646: LD_INT 52
15648: PUSH
15649: LD_INT 53
15651: PUSH
15652: LD_INT 54
15654: PUSH
15655: LD_INT 55
15657: PUSH
15658: LD_INT 56
15660: PUSH
15661: LD_INT 60
15663: PUSH
15664: LD_INT 61
15666: PUSH
15667: LD_INT 62
15669: PUSH
15670: LD_INT 66
15672: PUSH
15673: LD_INT 67
15675: PUSH
15676: LD_INT 68
15678: PUSH
15679: LD_INT 81
15681: PUSH
15682: LD_INT 82
15684: PUSH
15685: LD_INT 83
15687: PUSH
15688: LD_INT 84
15690: PUSH
15691: LD_INT 85
15693: PUSH
15694: LD_INT 87
15696: PUSH
15697: LD_INT 88
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: ST_TO_ADDR
15756: GO 15989
15758: LD_INT 3
15760: DOUBLE
15761: EQUAL
15762: IFTRUE 15766
15764: GO 15988
15766: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15767: LD_ADDR_VAR 0 4
15771: PUSH
15772: LD_INT 46
15774: PUSH
15775: LD_INT 47
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: LD_INT 2
15783: PUSH
15784: LD_INT 82
15786: PUSH
15787: LD_INT 83
15789: PUSH
15790: LD_INT 84
15792: PUSH
15793: LD_INT 85
15795: PUSH
15796: LD_INT 86
15798: PUSH
15799: LD_INT 11
15801: PUSH
15802: LD_INT 9
15804: PUSH
15805: LD_INT 20
15807: PUSH
15808: LD_INT 19
15810: PUSH
15811: LD_INT 21
15813: PUSH
15814: LD_INT 24
15816: PUSH
15817: LD_INT 22
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 28
15825: PUSH
15826: LD_INT 29
15828: PUSH
15829: LD_INT 30
15831: PUSH
15832: LD_INT 31
15834: PUSH
15835: LD_INT 37
15837: PUSH
15838: LD_INT 38
15840: PUSH
15841: LD_INT 32
15843: PUSH
15844: LD_INT 27
15846: PUSH
15847: LD_INT 33
15849: PUSH
15850: LD_INT 69
15852: PUSH
15853: LD_INT 39
15855: PUSH
15856: LD_INT 34
15858: PUSH
15859: LD_INT 40
15861: PUSH
15862: LD_INT 71
15864: PUSH
15865: LD_INT 23
15867: PUSH
15868: LD_INT 44
15870: PUSH
15871: LD_INT 48
15873: PUSH
15874: LD_INT 49
15876: PUSH
15877: LD_INT 50
15879: PUSH
15880: LD_INT 51
15882: PUSH
15883: LD_INT 52
15885: PUSH
15886: LD_INT 53
15888: PUSH
15889: LD_INT 54
15891: PUSH
15892: LD_INT 55
15894: PUSH
15895: LD_INT 56
15897: PUSH
15898: LD_INT 57
15900: PUSH
15901: LD_INT 58
15903: PUSH
15904: LD_INT 59
15906: PUSH
15907: LD_INT 63
15909: PUSH
15910: LD_INT 64
15912: PUSH
15913: LD_INT 65
15915: PUSH
15916: LD_INT 82
15918: PUSH
15919: LD_INT 83
15921: PUSH
15922: LD_INT 84
15924: PUSH
15925: LD_INT 85
15927: PUSH
15928: LD_INT 86
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: ST_TO_ADDR
15986: GO 15989
15988: POP
// if state > - 1 and state < 3 then
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 1
15996: NEG
15997: GREATER
15998: PUSH
15999: LD_VAR 0 3
16003: PUSH
16004: LD_INT 3
16006: LESS
16007: AND
16008: IFFALSE 16065
// for i in result do
16010: LD_ADDR_VAR 0 5
16014: PUSH
16015: LD_VAR 0 4
16019: PUSH
16020: FOR_IN
16021: IFFALSE 16063
// if GetTech ( i , side ) <> state then
16023: LD_VAR 0 5
16027: PPUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 321
16037: PUSH
16038: LD_VAR 0 3
16042: NONEQUAL
16043: IFFALSE 16061
// result := result diff i ;
16045: LD_ADDR_VAR 0 4
16049: PUSH
16050: LD_VAR 0 4
16054: PUSH
16055: LD_VAR 0 5
16059: DIFF
16060: ST_TO_ADDR
16061: GO 16020
16063: POP
16064: POP
// end ;
16065: LD_VAR 0 4
16069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16070: LD_INT 0
16072: PPUSH
16073: PPUSH
16074: PPUSH
// result := true ;
16075: LD_ADDR_VAR 0 3
16079: PUSH
16080: LD_INT 1
16082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16083: LD_ADDR_VAR 0 5
16087: PUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 480
16097: ST_TO_ADDR
// if not tmp then
16098: LD_VAR 0 5
16102: NOT
16103: IFFALSE 16107
// exit ;
16105: GO 16156
// for i in tmp do
16107: LD_ADDR_VAR 0 4
16111: PUSH
16112: LD_VAR 0 5
16116: PUSH
16117: FOR_IN
16118: IFFALSE 16154
// if GetTech ( i , side ) <> state_researched then
16120: LD_VAR 0 4
16124: PPUSH
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 321
16134: PUSH
16135: LD_INT 2
16137: NONEQUAL
16138: IFFALSE 16152
// begin result := false ;
16140: LD_ADDR_VAR 0 3
16144: PUSH
16145: LD_INT 0
16147: ST_TO_ADDR
// exit ;
16148: POP
16149: POP
16150: GO 16156
// end ;
16152: GO 16117
16154: POP
16155: POP
// end ;
16156: LD_VAR 0 3
16160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16161: LD_INT 0
16163: PPUSH
16164: PPUSH
16165: PPUSH
16166: PPUSH
16167: PPUSH
16168: PPUSH
16169: PPUSH
16170: PPUSH
16171: PPUSH
16172: PPUSH
16173: PPUSH
16174: PPUSH
16175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16176: LD_VAR 0 1
16180: NOT
16181: PUSH
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 257
16191: PUSH
16192: LD_INT 9
16194: NONEQUAL
16195: OR
16196: IFFALSE 16200
// exit ;
16198: GO 16773
// side := GetSide ( unit ) ;
16200: LD_ADDR_VAR 0 9
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 255
16214: ST_TO_ADDR
// tech_space := tech_spacanom ;
16215: LD_ADDR_VAR 0 12
16219: PUSH
16220: LD_INT 29
16222: ST_TO_ADDR
// tech_time := tech_taurad ;
16223: LD_ADDR_VAR 0 13
16227: PUSH
16228: LD_INT 28
16230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16231: LD_ADDR_VAR 0 11
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 310
16245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16246: LD_VAR 0 11
16250: PPUSH
16251: CALL_OW 247
16255: PUSH
16256: LD_INT 2
16258: EQUAL
16259: IFFALSE 16263
// exit ;
16261: GO 16773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16263: LD_ADDR_VAR 0 8
16267: PUSH
16268: LD_INT 81
16270: PUSH
16271: LD_VAR 0 9
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 3
16282: PUSH
16283: LD_INT 21
16285: PUSH
16286: LD_INT 3
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PPUSH
16301: CALL_OW 69
16305: ST_TO_ADDR
// if not tmp then
16306: LD_VAR 0 8
16310: NOT
16311: IFFALSE 16315
// exit ;
16313: GO 16773
// if in_unit then
16315: LD_VAR 0 11
16319: IFFALSE 16343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16321: LD_ADDR_VAR 0 10
16325: PUSH
16326: LD_VAR 0 8
16330: PPUSH
16331: LD_VAR 0 11
16335: PPUSH
16336: CALL_OW 74
16340: ST_TO_ADDR
16341: GO 16363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16343: LD_ADDR_VAR 0 10
16347: PUSH
16348: LD_VAR 0 8
16352: PPUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 74
16362: ST_TO_ADDR
// if not enemy then
16363: LD_VAR 0 10
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16372: LD_VAR 0 11
16376: PUSH
16377: LD_VAR 0 11
16381: PPUSH
16382: LD_VAR 0 10
16386: PPUSH
16387: CALL_OW 296
16391: PUSH
16392: LD_INT 13
16394: GREATER
16395: AND
16396: PUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: LD_VAR 0 10
16406: PPUSH
16407: CALL_OW 296
16411: PUSH
16412: LD_INT 12
16414: GREATER
16415: OR
16416: IFFALSE 16420
// exit ;
16418: GO 16773
// missile := [ 1 ] ;
16420: LD_ADDR_VAR 0 14
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: EMPTY
16429: LIST
16430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16431: LD_VAR 0 9
16435: PPUSH
16436: LD_VAR 0 12
16440: PPUSH
16441: CALL_OW 325
16445: IFFALSE 16474
// missile := Replace ( missile , missile + 1 , 2 ) ;
16447: LD_ADDR_VAR 0 14
16451: PUSH
16452: LD_VAR 0 14
16456: PPUSH
16457: LD_VAR 0 14
16461: PUSH
16462: LD_INT 1
16464: PLUS
16465: PPUSH
16466: LD_INT 2
16468: PPUSH
16469: CALL_OW 1
16473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16474: LD_VAR 0 9
16478: PPUSH
16479: LD_VAR 0 13
16483: PPUSH
16484: CALL_OW 325
16488: PUSH
16489: LD_VAR 0 10
16493: PPUSH
16494: CALL_OW 255
16498: PPUSH
16499: LD_VAR 0 13
16503: PPUSH
16504: CALL_OW 325
16508: NOT
16509: AND
16510: IFFALSE 16539
// missile := Replace ( missile , missile + 1 , 3 ) ;
16512: LD_ADDR_VAR 0 14
16516: PUSH
16517: LD_VAR 0 14
16521: PPUSH
16522: LD_VAR 0 14
16526: PUSH
16527: LD_INT 1
16529: PLUS
16530: PPUSH
16531: LD_INT 3
16533: PPUSH
16534: CALL_OW 1
16538: ST_TO_ADDR
// if missile < 2 then
16539: LD_VAR 0 14
16543: PUSH
16544: LD_INT 2
16546: LESS
16547: IFFALSE 16551
// exit ;
16549: GO 16773
// x := GetX ( enemy ) ;
16551: LD_ADDR_VAR 0 4
16555: PUSH
16556: LD_VAR 0 10
16560: PPUSH
16561: CALL_OW 250
16565: ST_TO_ADDR
// y := GetY ( enemy ) ;
16566: LD_ADDR_VAR 0 5
16570: PUSH
16571: LD_VAR 0 10
16575: PPUSH
16576: CALL_OW 251
16580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16581: LD_ADDR_VAR 0 6
16585: PUSH
16586: LD_VAR 0 4
16590: PUSH
16591: LD_INT 1
16593: NEG
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: CALL_OW 12
16602: PLUS
16603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16604: LD_ADDR_VAR 0 7
16608: PUSH
16609: LD_VAR 0 5
16613: PUSH
16614: LD_INT 1
16616: NEG
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 12
16625: PLUS
16626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16627: LD_VAR 0 6
16631: PPUSH
16632: LD_VAR 0 7
16636: PPUSH
16637: CALL_OW 488
16641: NOT
16642: IFFALSE 16664
// begin _x := x ;
16644: LD_ADDR_VAR 0 6
16648: PUSH
16649: LD_VAR 0 4
16653: ST_TO_ADDR
// _y := y ;
16654: LD_ADDR_VAR 0 7
16658: PUSH
16659: LD_VAR 0 5
16663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_INT 1
16671: PPUSH
16672: LD_VAR 0 14
16676: PPUSH
16677: CALL_OW 12
16681: ST_TO_ADDR
// case i of 1 :
16682: LD_VAR 0 3
16686: PUSH
16687: LD_INT 1
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16712
16695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16696: LD_VAR 0 1
16700: PPUSH
16701: LD_VAR 0 10
16705: PPUSH
16706: CALL_OW 115
16710: GO 16773
16712: LD_INT 2
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16742
16720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16721: LD_VAR 0 1
16725: PPUSH
16726: LD_VAR 0 6
16730: PPUSH
16731: LD_VAR 0 7
16735: PPUSH
16736: CALL_OW 153
16740: GO 16773
16742: LD_INT 3
16744: DOUBLE
16745: EQUAL
16746: IFTRUE 16750
16748: GO 16772
16750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16751: LD_VAR 0 1
16755: PPUSH
16756: LD_VAR 0 6
16760: PPUSH
16761: LD_VAR 0 7
16765: PPUSH
16766: CALL_OW 154
16770: GO 16773
16772: POP
// end ;
16773: LD_VAR 0 2
16777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16778: LD_INT 0
16780: PPUSH
16781: PPUSH
16782: PPUSH
16783: PPUSH
16784: PPUSH
16785: PPUSH
// if not unit or not building then
16786: LD_VAR 0 1
16790: NOT
16791: PUSH
16792: LD_VAR 0 2
16796: NOT
16797: OR
16798: IFFALSE 16802
// exit ;
16800: GO 16960
// x := GetX ( building ) ;
16802: LD_ADDR_VAR 0 5
16806: PUSH
16807: LD_VAR 0 2
16811: PPUSH
16812: CALL_OW 250
16816: ST_TO_ADDR
// y := GetY ( building ) ;
16817: LD_ADDR_VAR 0 6
16821: PUSH
16822: LD_VAR 0 2
16826: PPUSH
16827: CALL_OW 251
16831: ST_TO_ADDR
// for i = 0 to 5 do
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: DOUBLE
16838: LD_INT 0
16840: DEC
16841: ST_TO_ADDR
16842: LD_INT 5
16844: PUSH
16845: FOR_TO
16846: IFFALSE 16958
// begin _x := ShiftX ( x , i , 3 ) ;
16848: LD_ADDR_VAR 0 7
16852: PUSH
16853: LD_VAR 0 5
16857: PPUSH
16858: LD_VAR 0 4
16862: PPUSH
16863: LD_INT 3
16865: PPUSH
16866: CALL_OW 272
16870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16871: LD_ADDR_VAR 0 8
16875: PUSH
16876: LD_VAR 0 6
16880: PPUSH
16881: LD_VAR 0 4
16885: PPUSH
16886: LD_INT 3
16888: PPUSH
16889: CALL_OW 273
16893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16894: LD_VAR 0 7
16898: PPUSH
16899: LD_VAR 0 8
16903: PPUSH
16904: CALL_OW 488
16908: NOT
16909: IFFALSE 16913
// continue ;
16911: GO 16845
// if HexInfo ( _x , _y ) = 0 then
16913: LD_VAR 0 7
16917: PPUSH
16918: LD_VAR 0 8
16922: PPUSH
16923: CALL_OW 428
16927: PUSH
16928: LD_INT 0
16930: EQUAL
16931: IFFALSE 16956
// begin ComMoveXY ( unit , _x , _y ) ;
16933: LD_VAR 0 1
16937: PPUSH
16938: LD_VAR 0 7
16942: PPUSH
16943: LD_VAR 0 8
16947: PPUSH
16948: CALL_OW 111
// exit ;
16952: POP
16953: POP
16954: GO 16960
// end ; end ;
16956: GO 16845
16958: POP
16959: POP
// end ;
16960: LD_VAR 0 3
16964: RET
// export function ScanBase ( side , base_area ) ; begin
16965: LD_INT 0
16967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_VAR 0 2
16977: PPUSH
16978: LD_INT 81
16980: PUSH
16981: LD_VAR 0 1
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 70
16994: ST_TO_ADDR
// end ;
16995: LD_VAR 0 3
16999: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17000: LD_INT 0
17002: PPUSH
17003: PPUSH
17004: PPUSH
17005: PPUSH
// result := false ;
17006: LD_ADDR_VAR 0 2
17010: PUSH
17011: LD_INT 0
17013: ST_TO_ADDR
// side := GetSide ( unit ) ;
17014: LD_ADDR_VAR 0 3
17018: PUSH
17019: LD_VAR 0 1
17023: PPUSH
17024: CALL_OW 255
17028: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17029: LD_ADDR_VAR 0 4
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 248
17043: ST_TO_ADDR
// case nat of 1 :
17044: LD_VAR 0 4
17048: PUSH
17049: LD_INT 1
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17068
17057: POP
// tech := tech_lassight ; 2 :
17058: LD_ADDR_VAR 0 5
17062: PUSH
17063: LD_INT 12
17065: ST_TO_ADDR
17066: GO 17107
17068: LD_INT 2
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17087
17076: POP
// tech := tech_mortar ; 3 :
17077: LD_ADDR_VAR 0 5
17081: PUSH
17082: LD_INT 41
17084: ST_TO_ADDR
17085: GO 17107
17087: LD_INT 3
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17106
17095: POP
// tech := tech_bazooka ; end ;
17096: LD_ADDR_VAR 0 5
17100: PUSH
17101: LD_INT 44
17103: ST_TO_ADDR
17104: GO 17107
17106: POP
// if Researched ( side , tech ) then
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_VAR 0 5
17116: PPUSH
17117: CALL_OW 325
17121: IFFALSE 17148
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17123: LD_ADDR_VAR 0 2
17127: PUSH
17128: LD_INT 5
17130: PUSH
17131: LD_INT 8
17133: PUSH
17134: LD_INT 9
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: LD_VAR 0 4
17146: ARRAY
17147: ST_TO_ADDR
// end ;
17148: LD_VAR 0 2
17152: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17153: LD_INT 0
17155: PPUSH
17156: PPUSH
17157: PPUSH
// if not mines then
17158: LD_VAR 0 2
17162: NOT
17163: IFFALSE 17167
// exit ;
17165: GO 17311
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17167: LD_ADDR_VAR 0 5
17171: PUSH
17172: LD_INT 81
17174: PUSH
17175: LD_VAR 0 1
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 3
17186: PUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 3
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PPUSH
17205: CALL_OW 69
17209: ST_TO_ADDR
// for i in mines do
17210: LD_ADDR_VAR 0 4
17214: PUSH
17215: LD_VAR 0 2
17219: PUSH
17220: FOR_IN
17221: IFFALSE 17309
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17223: LD_VAR 0 4
17227: PUSH
17228: LD_INT 1
17230: ARRAY
17231: PPUSH
17232: LD_VAR 0 4
17236: PUSH
17237: LD_INT 2
17239: ARRAY
17240: PPUSH
17241: CALL_OW 458
17245: NOT
17246: IFFALSE 17250
// continue ;
17248: GO 17220
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17250: LD_VAR 0 4
17254: PUSH
17255: LD_INT 1
17257: ARRAY
17258: PPUSH
17259: LD_VAR 0 4
17263: PUSH
17264: LD_INT 2
17266: ARRAY
17267: PPUSH
17268: CALL_OW 428
17272: PUSH
17273: LD_VAR 0 5
17277: IN
17278: IFFALSE 17307
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17280: LD_VAR 0 4
17284: PUSH
17285: LD_INT 1
17287: ARRAY
17288: PPUSH
17289: LD_VAR 0 4
17293: PUSH
17294: LD_INT 2
17296: ARRAY
17297: PPUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: CALL_OW 456
// end ;
17307: GO 17220
17309: POP
17310: POP
// end ;
17311: LD_VAR 0 3
17315: RET
// export function Count ( array ) ; begin
17316: LD_INT 0
17318: PPUSH
// result := array + 0 ;
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_VAR 0 1
17328: PUSH
17329: LD_INT 0
17331: PLUS
17332: ST_TO_ADDR
// end ;
17333: LD_VAR 0 2
17337: RET
// export function IsEmpty ( building ) ; begin
17338: LD_INT 0
17340: PPUSH
// if not building then
17341: LD_VAR 0 1
17345: NOT
17346: IFFALSE 17350
// exit ;
17348: GO 17393
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: LD_VAR 0 1
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_VAR 0 1
17367: PPUSH
17368: CALL_OW 255
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 58
17379: PUSH
17380: EMPTY
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 69
17391: IN
17392: ST_TO_ADDR
// end ;
17393: LD_VAR 0 2
17397: RET
// export function IsNotFull ( building ) ; var places ; begin
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
// if not building then
17402: LD_VAR 0 1
17406: NOT
17407: IFFALSE 17411
// exit ;
17409: GO 17439
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17411: LD_ADDR_VAR 0 2
17415: PUSH
17416: LD_VAR 0 1
17420: PPUSH
17421: LD_INT 3
17423: PUSH
17424: LD_INT 62
17426: PUSH
17427: EMPTY
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 72
17438: ST_TO_ADDR
// end ;
17439: LD_VAR 0 2
17443: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17444: LD_INT 0
17446: PPUSH
17447: PPUSH
17448: PPUSH
17449: PPUSH
// tmp := [ ] ;
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: EMPTY
17456: ST_TO_ADDR
// list := [ ] ;
17457: LD_ADDR_VAR 0 5
17461: PUSH
17462: EMPTY
17463: ST_TO_ADDR
// for i = 16 to 25 do
17464: LD_ADDR_VAR 0 4
17468: PUSH
17469: DOUBLE
17470: LD_INT 16
17472: DEC
17473: ST_TO_ADDR
17474: LD_INT 25
17476: PUSH
17477: FOR_TO
17478: IFFALSE 17551
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_VAR 0 3
17489: PUSH
17490: LD_INT 22
17492: PUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 255
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 91
17509: PUSH
17510: LD_VAR 0 1
17514: PUSH
17515: LD_INT 6
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 30
17525: PUSH
17526: LD_VAR 0 4
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: PPUSH
17543: CALL_OW 69
17547: ADD
17548: ST_TO_ADDR
17549: GO 17477
17551: POP
17552: POP
// for i = 1 to tmp do
17553: LD_ADDR_VAR 0 4
17557: PUSH
17558: DOUBLE
17559: LD_INT 1
17561: DEC
17562: ST_TO_ADDR
17563: LD_VAR 0 3
17567: PUSH
17568: FOR_TO
17569: IFFALSE 17657
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17571: LD_ADDR_VAR 0 5
17575: PUSH
17576: LD_VAR 0 5
17580: PUSH
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 4
17590: ARRAY
17591: PPUSH
17592: CALL_OW 266
17596: PUSH
17597: LD_VAR 0 3
17601: PUSH
17602: LD_VAR 0 4
17606: ARRAY
17607: PPUSH
17608: CALL_OW 250
17612: PUSH
17613: LD_VAR 0 3
17617: PUSH
17618: LD_VAR 0 4
17622: ARRAY
17623: PPUSH
17624: CALL_OW 251
17628: PUSH
17629: LD_VAR 0 3
17633: PUSH
17634: LD_VAR 0 4
17638: ARRAY
17639: PPUSH
17640: CALL_OW 254
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: ADD
17654: ST_TO_ADDR
17655: GO 17568
17657: POP
17658: POP
// result := list ;
17659: LD_ADDR_VAR 0 2
17663: PUSH
17664: LD_VAR 0 5
17668: ST_TO_ADDR
// end ;
17669: LD_VAR 0 2
17673: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17674: LD_INT 0
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
// if not factory then
17683: LD_VAR 0 1
17687: NOT
17688: IFFALSE 17692
// exit ;
17690: GO 18285
// if control = control_apeman then
17692: LD_VAR 0 4
17696: PUSH
17697: LD_INT 5
17699: EQUAL
17700: IFFALSE 17809
// begin tmp := UnitsInside ( factory ) ;
17702: LD_ADDR_VAR 0 8
17706: PUSH
17707: LD_VAR 0 1
17711: PPUSH
17712: CALL_OW 313
17716: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17717: LD_VAR 0 8
17721: PPUSH
17722: LD_INT 25
17724: PUSH
17725: LD_INT 12
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 72
17736: NOT
17737: IFFALSE 17747
// control := control_manual ;
17739: LD_ADDR_VAR 0 4
17743: PUSH
17744: LD_INT 1
17746: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17747: LD_ADDR_VAR 0 8
17751: PUSH
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL 17444 0 1
17761: ST_TO_ADDR
// if tmp then
17762: LD_VAR 0 8
17766: IFFALSE 17809
// begin for i in tmp do
17768: LD_ADDR_VAR 0 7
17772: PUSH
17773: LD_VAR 0 8
17777: PUSH
17778: FOR_IN
17779: IFFALSE 17807
// if i [ 1 ] = b_ext_radio then
17781: LD_VAR 0 7
17785: PUSH
17786: LD_INT 1
17788: ARRAY
17789: PUSH
17790: LD_INT 22
17792: EQUAL
17793: IFFALSE 17805
// begin control := control_remote ;
17795: LD_ADDR_VAR 0 4
17799: PUSH
17800: LD_INT 2
17802: ST_TO_ADDR
// break ;
17803: GO 17807
// end ;
17805: GO 17778
17807: POP
17808: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_VAR 0 2
17818: PPUSH
17819: LD_VAR 0 3
17823: PPUSH
17824: LD_VAR 0 4
17828: PPUSH
17829: LD_VAR 0 5
17833: PPUSH
17834: CALL_OW 448
17838: IFFALSE 17873
// begin result := [ chassis , engine , control , weapon ] ;
17840: LD_ADDR_VAR 0 6
17844: PUSH
17845: LD_VAR 0 2
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 4
17859: PUSH
17860: LD_VAR 0 5
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: ST_TO_ADDR
// exit ;
17871: GO 18285
// end ; _chassis := AvailableChassisList ( factory ) ;
17873: LD_ADDR_VAR 0 9
17877: PUSH
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 475
17887: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17888: LD_ADDR_VAR 0 11
17892: PUSH
17893: LD_VAR 0 1
17897: PPUSH
17898: CALL_OW 476
17902: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17903: LD_ADDR_VAR 0 12
17907: PUSH
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 477
17917: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17918: LD_ADDR_VAR 0 10
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 478
17932: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17933: LD_VAR 0 9
17937: NOT
17938: PUSH
17939: LD_VAR 0 11
17943: NOT
17944: OR
17945: PUSH
17946: LD_VAR 0 12
17950: NOT
17951: OR
17952: PUSH
17953: LD_VAR 0 10
17957: NOT
17958: OR
17959: IFFALSE 17994
// begin result := [ chassis , engine , control , weapon ] ;
17961: LD_ADDR_VAR 0 6
17965: PUSH
17966: LD_VAR 0 2
17970: PUSH
17971: LD_VAR 0 3
17975: PUSH
17976: LD_VAR 0 4
17980: PUSH
17981: LD_VAR 0 5
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: ST_TO_ADDR
// exit ;
17992: GO 18285
// end ; if not chassis in _chassis then
17994: LD_VAR 0 2
17998: PUSH
17999: LD_VAR 0 9
18003: IN
18004: NOT
18005: IFFALSE 18031
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18007: LD_ADDR_VAR 0 2
18011: PUSH
18012: LD_VAR 0 9
18016: PUSH
18017: LD_INT 1
18019: PPUSH
18020: LD_VAR 0 9
18024: PPUSH
18025: CALL_OW 12
18029: ARRAY
18030: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18031: LD_VAR 0 2
18035: PPUSH
18036: LD_VAR 0 3
18040: PPUSH
18041: CALL 18290 0 2
18045: NOT
18046: IFFALSE 18105
// repeat engine := _engine [ 1 ] ;
18048: LD_ADDR_VAR 0 3
18052: PUSH
18053: LD_VAR 0 11
18057: PUSH
18058: LD_INT 1
18060: ARRAY
18061: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18062: LD_ADDR_VAR 0 11
18066: PUSH
18067: LD_VAR 0 11
18071: PPUSH
18072: LD_INT 1
18074: PPUSH
18075: CALL_OW 3
18079: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18080: LD_VAR 0 2
18084: PPUSH
18085: LD_VAR 0 3
18089: PPUSH
18090: CALL 18290 0 2
18094: PUSH
18095: LD_VAR 0 11
18099: PUSH
18100: EMPTY
18101: EQUAL
18102: OR
18103: IFFALSE 18048
// if not control in _control then
18105: LD_VAR 0 4
18109: PUSH
18110: LD_VAR 0 12
18114: IN
18115: NOT
18116: IFFALSE 18142
// control := _control [ rand ( 1 , _control ) ] ;
18118: LD_ADDR_VAR 0 4
18122: PUSH
18123: LD_VAR 0 12
18127: PUSH
18128: LD_INT 1
18130: PPUSH
18131: LD_VAR 0 12
18135: PPUSH
18136: CALL_OW 12
18140: ARRAY
18141: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18142: LD_VAR 0 2
18146: PPUSH
18147: LD_VAR 0 5
18151: PPUSH
18152: CALL 18510 0 2
18156: NOT
18157: IFFALSE 18216
// repeat weapon := _weapon [ 1 ] ;
18159: LD_ADDR_VAR 0 5
18163: PUSH
18164: LD_VAR 0 10
18168: PUSH
18169: LD_INT 1
18171: ARRAY
18172: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18173: LD_ADDR_VAR 0 10
18177: PUSH
18178: LD_VAR 0 10
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 3
18190: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18191: LD_VAR 0 2
18195: PPUSH
18196: LD_VAR 0 5
18200: PPUSH
18201: CALL 18510 0 2
18205: PUSH
18206: LD_VAR 0 10
18210: PUSH
18211: EMPTY
18212: EQUAL
18213: OR
18214: IFFALSE 18159
// result := [ ] ;
18216: LD_ADDR_VAR 0 6
18220: PUSH
18221: EMPTY
18222: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18223: LD_VAR 0 1
18227: PPUSH
18228: LD_VAR 0 2
18232: PPUSH
18233: LD_VAR 0 3
18237: PPUSH
18238: LD_VAR 0 4
18242: PPUSH
18243: LD_VAR 0 5
18247: PPUSH
18248: CALL_OW 448
18252: IFFALSE 18285
// result := [ chassis , engine , control , weapon ] ;
18254: LD_ADDR_VAR 0 6
18258: PUSH
18259: LD_VAR 0 2
18263: PUSH
18264: LD_VAR 0 3
18268: PUSH
18269: LD_VAR 0 4
18273: PUSH
18274: LD_VAR 0 5
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: ST_TO_ADDR
// end ;
18285: LD_VAR 0 6
18289: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18290: LD_INT 0
18292: PPUSH
// if not chassis or not engine then
18293: LD_VAR 0 1
18297: NOT
18298: PUSH
18299: LD_VAR 0 2
18303: NOT
18304: OR
18305: IFFALSE 18309
// exit ;
18307: GO 18505
// case engine of engine_solar :
18309: LD_VAR 0 2
18313: PUSH
18314: LD_INT 2
18316: DOUBLE
18317: EQUAL
18318: IFTRUE 18322
18320: GO 18360
18322: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18323: LD_ADDR_VAR 0 3
18327: PUSH
18328: LD_INT 11
18330: PUSH
18331: LD_INT 12
18333: PUSH
18334: LD_INT 13
18336: PUSH
18337: LD_INT 14
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: ST_TO_ADDR
18358: GO 18489
18360: LD_INT 1
18362: DOUBLE
18363: EQUAL
18364: IFTRUE 18368
18366: GO 18430
18368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18369: LD_ADDR_VAR 0 3
18373: PUSH
18374: LD_INT 11
18376: PUSH
18377: LD_INT 12
18379: PUSH
18380: LD_INT 13
18382: PUSH
18383: LD_INT 14
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 3
18394: PUSH
18395: LD_INT 4
18397: PUSH
18398: LD_INT 5
18400: PUSH
18401: LD_INT 21
18403: PUSH
18404: LD_INT 23
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_INT 24
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: ST_TO_ADDR
18428: GO 18489
18430: LD_INT 3
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18488
18438: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18439: LD_ADDR_VAR 0 3
18443: PUSH
18444: LD_INT 13
18446: PUSH
18447: LD_INT 14
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: LD_INT 4
18458: PUSH
18459: LD_INT 5
18461: PUSH
18462: LD_INT 21
18464: PUSH
18465: LD_INT 22
18467: PUSH
18468: LD_INT 23
18470: PUSH
18471: LD_INT 24
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: ST_TO_ADDR
18486: GO 18489
18488: POP
// result := ( chassis in result ) ;
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_VAR 0 1
18498: PUSH
18499: LD_VAR 0 3
18503: IN
18504: ST_TO_ADDR
// end ;
18505: LD_VAR 0 3
18509: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18510: LD_INT 0
18512: PPUSH
// if not chassis or not weapon then
18513: LD_VAR 0 1
18517: NOT
18518: PUSH
18519: LD_VAR 0 2
18523: NOT
18524: OR
18525: IFFALSE 18529
// exit ;
18527: GO 19589
// case weapon of us_machine_gun :
18529: LD_VAR 0 2
18533: PUSH
18534: LD_INT 2
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 18572
18542: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18543: LD_ADDR_VAR 0 3
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 3
18556: PUSH
18557: LD_INT 4
18559: PUSH
18560: LD_INT 5
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: ST_TO_ADDR
18570: GO 19573
18572: LD_INT 3
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18610
18580: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18581: LD_ADDR_VAR 0 3
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: LD_INT 4
18597: PUSH
18598: LD_INT 5
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: ST_TO_ADDR
18608: GO 19573
18610: LD_INT 11
18612: DOUBLE
18613: EQUAL
18614: IFTRUE 18618
18616: GO 18648
18618: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18619: LD_ADDR_VAR 0 3
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: LD_INT 3
18632: PUSH
18633: LD_INT 4
18635: PUSH
18636: LD_INT 5
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: ST_TO_ADDR
18646: GO 19573
18648: LD_INT 4
18650: DOUBLE
18651: EQUAL
18652: IFTRUE 18656
18654: GO 18682
18656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18657: LD_ADDR_VAR 0 3
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: LD_INT 4
18670: PUSH
18671: LD_INT 5
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: ST_TO_ADDR
18680: GO 19573
18682: LD_INT 5
18684: DOUBLE
18685: EQUAL
18686: IFTRUE 18690
18688: GO 18716
18690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18691: LD_ADDR_VAR 0 3
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: LD_INT 4
18704: PUSH
18705: LD_INT 5
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: ST_TO_ADDR
18714: GO 19573
18716: LD_INT 9
18718: DOUBLE
18719: EQUAL
18720: IFTRUE 18724
18722: GO 18750
18724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18725: LD_ADDR_VAR 0 3
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: LD_INT 3
18735: PUSH
18736: LD_INT 4
18738: PUSH
18739: LD_INT 5
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: ST_TO_ADDR
18748: GO 19573
18750: LD_INT 7
18752: DOUBLE
18753: EQUAL
18754: IFTRUE 18758
18756: GO 18784
18758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18759: LD_ADDR_VAR 0 3
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: LD_INT 4
18772: PUSH
18773: LD_INT 5
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: ST_TO_ADDR
18782: GO 19573
18784: LD_INT 12
18786: DOUBLE
18787: EQUAL
18788: IFTRUE 18792
18790: GO 18818
18792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18793: LD_ADDR_VAR 0 3
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: LD_INT 4
18806: PUSH
18807: LD_INT 5
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: ST_TO_ADDR
18816: GO 19573
18818: LD_INT 13
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18852
18826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18827: LD_ADDR_VAR 0 3
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: LD_INT 4
18840: PUSH
18841: LD_INT 5
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: ST_TO_ADDR
18850: GO 19573
18852: LD_INT 14
18854: DOUBLE
18855: EQUAL
18856: IFTRUE 18860
18858: GO 18878
18860: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18861: LD_ADDR_VAR 0 3
18865: PUSH
18866: LD_INT 4
18868: PUSH
18869: LD_INT 5
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: ST_TO_ADDR
18876: GO 19573
18878: LD_INT 6
18880: DOUBLE
18881: EQUAL
18882: IFTRUE 18886
18884: GO 18904
18886: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18887: LD_ADDR_VAR 0 3
18891: PUSH
18892: LD_INT 4
18894: PUSH
18895: LD_INT 5
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: ST_TO_ADDR
18902: GO 19573
18904: LD_INT 10
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 18930
18912: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18913: LD_ADDR_VAR 0 3
18917: PUSH
18918: LD_INT 4
18920: PUSH
18921: LD_INT 5
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: ST_TO_ADDR
18928: GO 19573
18930: LD_INT 22
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18964
18938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18939: LD_ADDR_VAR 0 3
18943: PUSH
18944: LD_INT 11
18946: PUSH
18947: LD_INT 12
18949: PUSH
18950: LD_INT 13
18952: PUSH
18953: LD_INT 14
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: ST_TO_ADDR
18962: GO 19573
18964: LD_INT 23
18966: DOUBLE
18967: EQUAL
18968: IFTRUE 18972
18970: GO 18998
18972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18973: LD_ADDR_VAR 0 3
18977: PUSH
18978: LD_INT 11
18980: PUSH
18981: LD_INT 12
18983: PUSH
18984: LD_INT 13
18986: PUSH
18987: LD_INT 14
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: ST_TO_ADDR
18996: GO 19573
18998: LD_INT 24
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19032
19006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19007: LD_ADDR_VAR 0 3
19011: PUSH
19012: LD_INT 11
19014: PUSH
19015: LD_INT 12
19017: PUSH
19018: LD_INT 13
19020: PUSH
19021: LD_INT 14
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: ST_TO_ADDR
19030: GO 19573
19032: LD_INT 30
19034: DOUBLE
19035: EQUAL
19036: IFTRUE 19040
19038: GO 19066
19040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19041: LD_ADDR_VAR 0 3
19045: PUSH
19046: LD_INT 11
19048: PUSH
19049: LD_INT 12
19051: PUSH
19052: LD_INT 13
19054: PUSH
19055: LD_INT 14
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: ST_TO_ADDR
19064: GO 19573
19066: LD_INT 25
19068: DOUBLE
19069: EQUAL
19070: IFTRUE 19074
19072: GO 19092
19074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19075: LD_ADDR_VAR 0 3
19079: PUSH
19080: LD_INT 13
19082: PUSH
19083: LD_INT 14
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 19573
19092: LD_INT 27
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19118
19100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_INT 13
19108: PUSH
19109: LD_INT 14
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: ST_TO_ADDR
19116: GO 19573
19118: LD_INT 92
19120: DOUBLE
19121: EQUAL
19122: IFTRUE 19126
19124: GO 19152
19126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19127: LD_ADDR_VAR 0 3
19131: PUSH
19132: LD_INT 11
19134: PUSH
19135: LD_INT 12
19137: PUSH
19138: LD_INT 13
19140: PUSH
19141: LD_INT 14
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: ST_TO_ADDR
19150: GO 19573
19152: LD_INT 28
19154: DOUBLE
19155: EQUAL
19156: IFTRUE 19160
19158: GO 19178
19160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19161: LD_ADDR_VAR 0 3
19165: PUSH
19166: LD_INT 13
19168: PUSH
19169: LD_INT 14
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: ST_TO_ADDR
19176: GO 19573
19178: LD_INT 29
19180: DOUBLE
19181: EQUAL
19182: IFTRUE 19186
19184: GO 19204
19186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19187: LD_ADDR_VAR 0 3
19191: PUSH
19192: LD_INT 13
19194: PUSH
19195: LD_INT 14
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: ST_TO_ADDR
19202: GO 19573
19204: LD_INT 31
19206: DOUBLE
19207: EQUAL
19208: IFTRUE 19212
19210: GO 19230
19212: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19213: LD_ADDR_VAR 0 3
19217: PUSH
19218: LD_INT 13
19220: PUSH
19221: LD_INT 14
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: ST_TO_ADDR
19228: GO 19573
19230: LD_INT 26
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19256
19238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_INT 13
19246: PUSH
19247: LD_INT 14
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: ST_TO_ADDR
19254: GO 19573
19256: LD_INT 42
19258: DOUBLE
19259: EQUAL
19260: IFTRUE 19264
19262: GO 19290
19264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19265: LD_ADDR_VAR 0 3
19269: PUSH
19270: LD_INT 21
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_INT 23
19278: PUSH
19279: LD_INT 24
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: ST_TO_ADDR
19288: GO 19573
19290: LD_INT 43
19292: DOUBLE
19293: EQUAL
19294: IFTRUE 19298
19296: GO 19324
19298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19299: LD_ADDR_VAR 0 3
19303: PUSH
19304: LD_INT 21
19306: PUSH
19307: LD_INT 22
19309: PUSH
19310: LD_INT 23
19312: PUSH
19313: LD_INT 24
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: ST_TO_ADDR
19322: GO 19573
19324: LD_INT 44
19326: DOUBLE
19327: EQUAL
19328: IFTRUE 19332
19330: GO 19358
19332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_INT 21
19340: PUSH
19341: LD_INT 22
19343: PUSH
19344: LD_INT 23
19346: PUSH
19347: LD_INT 24
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: ST_TO_ADDR
19356: GO 19573
19358: LD_INT 45
19360: DOUBLE
19361: EQUAL
19362: IFTRUE 19366
19364: GO 19392
19366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: LD_INT 21
19374: PUSH
19375: LD_INT 22
19377: PUSH
19378: LD_INT 23
19380: PUSH
19381: LD_INT 24
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 19573
19392: LD_INT 49
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19426
19400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_INT 21
19408: PUSH
19409: LD_INT 22
19411: PUSH
19412: LD_INT 23
19414: PUSH
19415: LD_INT 24
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: ST_TO_ADDR
19424: GO 19573
19426: LD_INT 51
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19460
19434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19435: LD_ADDR_VAR 0 3
19439: PUSH
19440: LD_INT 21
19442: PUSH
19443: LD_INT 22
19445: PUSH
19446: LD_INT 23
19448: PUSH
19449: LD_INT 24
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: ST_TO_ADDR
19458: GO 19573
19460: LD_INT 52
19462: DOUBLE
19463: EQUAL
19464: IFTRUE 19468
19466: GO 19494
19468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: LD_INT 21
19476: PUSH
19477: LD_INT 22
19479: PUSH
19480: LD_INT 23
19482: PUSH
19483: LD_INT 24
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: ST_TO_ADDR
19492: GO 19573
19494: LD_INT 53
19496: DOUBLE
19497: EQUAL
19498: IFTRUE 19502
19500: GO 19520
19502: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19503: LD_ADDR_VAR 0 3
19507: PUSH
19508: LD_INT 23
19510: PUSH
19511: LD_INT 24
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: ST_TO_ADDR
19518: GO 19573
19520: LD_INT 46
19522: DOUBLE
19523: EQUAL
19524: IFTRUE 19528
19526: GO 19546
19528: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19529: LD_ADDR_VAR 0 3
19533: PUSH
19534: LD_INT 23
19536: PUSH
19537: LD_INT 24
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: ST_TO_ADDR
19544: GO 19573
19546: LD_INT 47
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19572
19554: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19555: LD_ADDR_VAR 0 3
19559: PUSH
19560: LD_INT 23
19562: PUSH
19563: LD_INT 24
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: ST_TO_ADDR
19570: GO 19573
19572: POP
// result := ( chassis in result ) ;
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: LD_VAR 0 1
19582: PUSH
19583: LD_VAR 0 3
19587: IN
19588: ST_TO_ADDR
// end ;
19589: LD_VAR 0 3
19593: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19594: LD_INT 0
19596: PPUSH
19597: PPUSH
19598: PPUSH
19599: PPUSH
19600: PPUSH
19601: PPUSH
19602: PPUSH
// result := array ;
19603: LD_ADDR_VAR 0 5
19607: PUSH
19608: LD_VAR 0 1
19612: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19613: LD_VAR 0 1
19617: NOT
19618: PUSH
19619: LD_VAR 0 2
19623: NOT
19624: OR
19625: PUSH
19626: LD_VAR 0 3
19630: NOT
19631: OR
19632: PUSH
19633: LD_VAR 0 2
19637: PUSH
19638: LD_VAR 0 1
19642: GREATER
19643: OR
19644: PUSH
19645: LD_VAR 0 3
19649: PUSH
19650: LD_VAR 0 1
19654: GREATER
19655: OR
19656: IFFALSE 19660
// exit ;
19658: GO 19956
// if direction then
19660: LD_VAR 0 4
19664: IFFALSE 19728
// begin d := 1 ;
19666: LD_ADDR_VAR 0 9
19670: PUSH
19671: LD_INT 1
19673: ST_TO_ADDR
// if i_from > i_to then
19674: LD_VAR 0 2
19678: PUSH
19679: LD_VAR 0 3
19683: GREATER
19684: IFFALSE 19710
// length := ( array - i_from ) + i_to else
19686: LD_ADDR_VAR 0 11
19690: PUSH
19691: LD_VAR 0 1
19695: PUSH
19696: LD_VAR 0 2
19700: MINUS
19701: PUSH
19702: LD_VAR 0 3
19706: PLUS
19707: ST_TO_ADDR
19708: GO 19726
// length := i_to - i_from ;
19710: LD_ADDR_VAR 0 11
19714: PUSH
19715: LD_VAR 0 3
19719: PUSH
19720: LD_VAR 0 2
19724: MINUS
19725: ST_TO_ADDR
// end else
19726: GO 19789
// begin d := - 1 ;
19728: LD_ADDR_VAR 0 9
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: ST_TO_ADDR
// if i_from > i_to then
19737: LD_VAR 0 2
19741: PUSH
19742: LD_VAR 0 3
19746: GREATER
19747: IFFALSE 19767
// length := i_from - i_to else
19749: LD_ADDR_VAR 0 11
19753: PUSH
19754: LD_VAR 0 2
19758: PUSH
19759: LD_VAR 0 3
19763: MINUS
19764: ST_TO_ADDR
19765: GO 19789
// length := ( array - i_to ) + i_from ;
19767: LD_ADDR_VAR 0 11
19771: PUSH
19772: LD_VAR 0 1
19776: PUSH
19777: LD_VAR 0 3
19781: MINUS
19782: PUSH
19783: LD_VAR 0 2
19787: PLUS
19788: ST_TO_ADDR
// end ; if not length then
19789: LD_VAR 0 11
19793: NOT
19794: IFFALSE 19798
// exit ;
19796: GO 19956
// tmp := array ;
19798: LD_ADDR_VAR 0 10
19802: PUSH
19803: LD_VAR 0 1
19807: ST_TO_ADDR
// for i = 1 to length do
19808: LD_ADDR_VAR 0 6
19812: PUSH
19813: DOUBLE
19814: LD_INT 1
19816: DEC
19817: ST_TO_ADDR
19818: LD_VAR 0 11
19822: PUSH
19823: FOR_TO
19824: IFFALSE 19944
// begin for j = 1 to array do
19826: LD_ADDR_VAR 0 7
19830: PUSH
19831: DOUBLE
19832: LD_INT 1
19834: DEC
19835: ST_TO_ADDR
19836: LD_VAR 0 1
19840: PUSH
19841: FOR_TO
19842: IFFALSE 19930
// begin k := j + d ;
19844: LD_ADDR_VAR 0 8
19848: PUSH
19849: LD_VAR 0 7
19853: PUSH
19854: LD_VAR 0 9
19858: PLUS
19859: ST_TO_ADDR
// if k > array then
19860: LD_VAR 0 8
19864: PUSH
19865: LD_VAR 0 1
19869: GREATER
19870: IFFALSE 19880
// k := 1 ;
19872: LD_ADDR_VAR 0 8
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// if not k then
19880: LD_VAR 0 8
19884: NOT
19885: IFFALSE 19897
// k := array ;
19887: LD_ADDR_VAR 0 8
19891: PUSH
19892: LD_VAR 0 1
19896: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19897: LD_ADDR_VAR 0 10
19901: PUSH
19902: LD_VAR 0 10
19906: PPUSH
19907: LD_VAR 0 8
19911: PPUSH
19912: LD_VAR 0 1
19916: PUSH
19917: LD_VAR 0 7
19921: ARRAY
19922: PPUSH
19923: CALL_OW 1
19927: ST_TO_ADDR
// end ;
19928: GO 19841
19930: POP
19931: POP
// array := tmp ;
19932: LD_ADDR_VAR 0 1
19936: PUSH
19937: LD_VAR 0 10
19941: ST_TO_ADDR
// end ;
19942: GO 19823
19944: POP
19945: POP
// result := array ;
19946: LD_ADDR_VAR 0 5
19950: PUSH
19951: LD_VAR 0 1
19955: ST_TO_ADDR
// end ;
19956: LD_VAR 0 5
19960: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19961: LD_INT 0
19963: PPUSH
19964: PPUSH
// result := 0 ;
19965: LD_ADDR_VAR 0 3
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// if not array or not value in array then
19973: LD_VAR 0 1
19977: NOT
19978: PUSH
19979: LD_VAR 0 2
19983: PUSH
19984: LD_VAR 0 1
19988: IN
19989: NOT
19990: OR
19991: IFFALSE 19995
// exit ;
19993: GO 20049
// for i = 1 to array do
19995: LD_ADDR_VAR 0 4
19999: PUSH
20000: DOUBLE
20001: LD_INT 1
20003: DEC
20004: ST_TO_ADDR
20005: LD_VAR 0 1
20009: PUSH
20010: FOR_TO
20011: IFFALSE 20047
// if value = array [ i ] then
20013: LD_VAR 0 2
20017: PUSH
20018: LD_VAR 0 1
20022: PUSH
20023: LD_VAR 0 4
20027: ARRAY
20028: EQUAL
20029: IFFALSE 20045
// begin result := i ;
20031: LD_ADDR_VAR 0 3
20035: PUSH
20036: LD_VAR 0 4
20040: ST_TO_ADDR
// exit ;
20041: POP
20042: POP
20043: GO 20049
// end ;
20045: GO 20010
20047: POP
20048: POP
// end ;
20049: LD_VAR 0 3
20053: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20054: LD_INT 0
20056: PPUSH
// vc_chassis := chassis ;
20057: LD_ADDR_OWVAR 37
20061: PUSH
20062: LD_VAR 0 1
20066: ST_TO_ADDR
// vc_engine := engine ;
20067: LD_ADDR_OWVAR 39
20071: PUSH
20072: LD_VAR 0 2
20076: ST_TO_ADDR
// vc_control := control ;
20077: LD_ADDR_OWVAR 38
20081: PUSH
20082: LD_VAR 0 3
20086: ST_TO_ADDR
// vc_weapon := weapon ;
20087: LD_ADDR_OWVAR 40
20091: PUSH
20092: LD_VAR 0 4
20096: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20097: LD_ADDR_OWVAR 41
20101: PUSH
20102: LD_VAR 0 5
20106: ST_TO_ADDR
// end ;
20107: LD_VAR 0 6
20111: RET
// export function WantPlant ( unit ) ; var task ; begin
20112: LD_INT 0
20114: PPUSH
20115: PPUSH
// result := false ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20124: LD_ADDR_VAR 0 3
20128: PUSH
20129: LD_VAR 0 1
20133: PPUSH
20134: CALL_OW 437
20138: ST_TO_ADDR
// if task then
20139: LD_VAR 0 3
20143: IFFALSE 20171
// if task [ 1 ] [ 1 ] = p then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 1
20152: ARRAY
20153: PUSH
20154: LD_INT 1
20156: ARRAY
20157: PUSH
20158: LD_STRING p
20160: EQUAL
20161: IFFALSE 20171
// result := true ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// end ;
20171: LD_VAR 0 2
20175: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
20180: PPUSH
20181: PPUSH
// if pos < 1 then
20182: LD_VAR 0 2
20186: PUSH
20187: LD_INT 1
20189: LESS
20190: IFFALSE 20194
// exit ;
20192: GO 20497
// if pos = 1 then
20194: LD_VAR 0 2
20198: PUSH
20199: LD_INT 1
20201: EQUAL
20202: IFFALSE 20235
// result := Replace ( arr , pos [ 1 ] , value ) else
20204: LD_ADDR_VAR 0 4
20208: PUSH
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_VAR 0 2
20218: PUSH
20219: LD_INT 1
20221: ARRAY
20222: PPUSH
20223: LD_VAR 0 3
20227: PPUSH
20228: CALL_OW 1
20232: ST_TO_ADDR
20233: GO 20497
// begin tmp := arr ;
20235: LD_ADDR_VAR 0 6
20239: PUSH
20240: LD_VAR 0 1
20244: ST_TO_ADDR
// s_arr := [ tmp ] ;
20245: LD_ADDR_VAR 0 7
20249: PUSH
20250: LD_VAR 0 6
20254: PUSH
20255: EMPTY
20256: LIST
20257: ST_TO_ADDR
// for i = 1 to pos - 1 do
20258: LD_ADDR_VAR 0 5
20262: PUSH
20263: DOUBLE
20264: LD_INT 1
20266: DEC
20267: ST_TO_ADDR
20268: LD_VAR 0 2
20272: PUSH
20273: LD_INT 1
20275: MINUS
20276: PUSH
20277: FOR_TO
20278: IFFALSE 20323
// begin tmp := tmp [ pos [ i ] ] ;
20280: LD_ADDR_VAR 0 6
20284: PUSH
20285: LD_VAR 0 6
20289: PUSH
20290: LD_VAR 0 2
20294: PUSH
20295: LD_VAR 0 5
20299: ARRAY
20300: ARRAY
20301: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20302: LD_ADDR_VAR 0 7
20306: PUSH
20307: LD_VAR 0 7
20311: PUSH
20312: LD_VAR 0 6
20316: PUSH
20317: EMPTY
20318: LIST
20319: ADD
20320: ST_TO_ADDR
// end ;
20321: GO 20277
20323: POP
20324: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20325: LD_ADDR_VAR 0 6
20329: PUSH
20330: LD_VAR 0 6
20334: PPUSH
20335: LD_VAR 0 2
20339: PUSH
20340: LD_VAR 0 2
20344: ARRAY
20345: PPUSH
20346: LD_VAR 0 3
20350: PPUSH
20351: CALL_OW 1
20355: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20356: LD_ADDR_VAR 0 7
20360: PUSH
20361: LD_VAR 0 7
20365: PPUSH
20366: LD_VAR 0 7
20370: PPUSH
20371: LD_VAR 0 6
20375: PPUSH
20376: CALL_OW 1
20380: ST_TO_ADDR
// for i = s_arr downto 2 do
20381: LD_ADDR_VAR 0 5
20385: PUSH
20386: DOUBLE
20387: LD_VAR 0 7
20391: INC
20392: ST_TO_ADDR
20393: LD_INT 2
20395: PUSH
20396: FOR_DOWNTO
20397: IFFALSE 20481
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20399: LD_ADDR_VAR 0 6
20403: PUSH
20404: LD_VAR 0 7
20408: PUSH
20409: LD_VAR 0 5
20413: PUSH
20414: LD_INT 1
20416: MINUS
20417: ARRAY
20418: PPUSH
20419: LD_VAR 0 2
20423: PUSH
20424: LD_VAR 0 5
20428: PUSH
20429: LD_INT 1
20431: MINUS
20432: ARRAY
20433: PPUSH
20434: LD_VAR 0 7
20438: PUSH
20439: LD_VAR 0 5
20443: ARRAY
20444: PPUSH
20445: CALL_OW 1
20449: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20450: LD_ADDR_VAR 0 7
20454: PUSH
20455: LD_VAR 0 7
20459: PPUSH
20460: LD_VAR 0 5
20464: PUSH
20465: LD_INT 1
20467: MINUS
20468: PPUSH
20469: LD_VAR 0 6
20473: PPUSH
20474: CALL_OW 1
20478: ST_TO_ADDR
// end ;
20479: GO 20396
20481: POP
20482: POP
// result := s_arr [ 1 ] ;
20483: LD_ADDR_VAR 0 4
20487: PUSH
20488: LD_VAR 0 7
20492: PUSH
20493: LD_INT 1
20495: ARRAY
20496: ST_TO_ADDR
// end ; end ;
20497: LD_VAR 0 4
20501: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20502: LD_INT 0
20504: PPUSH
20505: PPUSH
// if not list then
20506: LD_VAR 0 1
20510: NOT
20511: IFFALSE 20515
// exit ;
20513: GO 20606
// i := list [ pos1 ] ;
20515: LD_ADDR_VAR 0 5
20519: PUSH
20520: LD_VAR 0 1
20524: PUSH
20525: LD_VAR 0 2
20529: ARRAY
20530: ST_TO_ADDR
// if not i then
20531: LD_VAR 0 5
20535: NOT
20536: IFFALSE 20540
// exit ;
20538: GO 20606
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20540: LD_ADDR_VAR 0 1
20544: PUSH
20545: LD_VAR 0 1
20549: PPUSH
20550: LD_VAR 0 2
20554: PPUSH
20555: LD_VAR 0 1
20559: PUSH
20560: LD_VAR 0 3
20564: ARRAY
20565: PPUSH
20566: CALL_OW 1
20570: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20571: LD_ADDR_VAR 0 1
20575: PUSH
20576: LD_VAR 0 1
20580: PPUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: LD_VAR 0 5
20590: PPUSH
20591: CALL_OW 1
20595: ST_TO_ADDR
// result := list ;
20596: LD_ADDR_VAR 0 4
20600: PUSH
20601: LD_VAR 0 1
20605: ST_TO_ADDR
// end ;
20606: LD_VAR 0 4
20610: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20611: LD_INT 0
20613: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20614: LD_ADDR_VAR 0 5
20618: PUSH
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 250
20628: PPUSH
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 251
20638: PPUSH
20639: LD_VAR 0 2
20643: PPUSH
20644: LD_VAR 0 3
20648: PPUSH
20649: LD_VAR 0 4
20653: PPUSH
20654: CALL 21032 0 5
20658: ST_TO_ADDR
// end ;
20659: LD_VAR 0 5
20663: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20664: LD_INT 0
20666: PPUSH
20667: PPUSH
20668: PPUSH
20669: PPUSH
// if not list or not unit then
20670: LD_VAR 0 2
20674: NOT
20675: PUSH
20676: LD_VAR 0 1
20680: NOT
20681: OR
20682: IFFALSE 20686
// exit ;
20684: GO 21027
// result := [ ] ;
20686: LD_ADDR_VAR 0 5
20690: PUSH
20691: EMPTY
20692: ST_TO_ADDR
// for i in list do
20693: LD_ADDR_VAR 0 6
20697: PUSH
20698: LD_VAR 0 2
20702: PUSH
20703: FOR_IN
20704: IFFALSE 20922
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20706: LD_ADDR_VAR 0 8
20710: PUSH
20711: LD_VAR 0 1
20715: PPUSH
20716: LD_VAR 0 6
20720: PUSH
20721: LD_INT 1
20723: ARRAY
20724: PPUSH
20725: LD_VAR 0 6
20729: PUSH
20730: LD_INT 2
20732: ARRAY
20733: PPUSH
20734: CALL_OW 297
20738: ST_TO_ADDR
// if not Count ( result ) then
20739: LD_VAR 0 5
20743: PPUSH
20744: CALL 17316 0 1
20748: NOT
20749: IFFALSE 20782
// begin result := Join ( result , [ i , tmp ] ) ;
20751: LD_ADDR_VAR 0 5
20755: PUSH
20756: LD_VAR 0 5
20760: PPUSH
20761: LD_VAR 0 6
20765: PUSH
20766: LD_VAR 0 8
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL 52905 0 2
20779: ST_TO_ADDR
// continue ;
20780: GO 20703
// end ; if result [ result ] [ 2 ] <= tmp then
20782: LD_VAR 0 5
20786: PUSH
20787: LD_VAR 0 5
20791: ARRAY
20792: PUSH
20793: LD_INT 2
20795: ARRAY
20796: PUSH
20797: LD_VAR 0 8
20801: LESSEQUAL
20802: IFFALSE 20835
// result := Join ( result , [ i , tmp ] ) else
20804: LD_ADDR_VAR 0 5
20808: PUSH
20809: LD_VAR 0 5
20813: PPUSH
20814: LD_VAR 0 6
20818: PUSH
20819: LD_VAR 0 8
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PPUSH
20828: CALL 52905 0 2
20832: ST_TO_ADDR
20833: GO 20920
// begin for j := 1 to Count ( result ) do
20835: LD_ADDR_VAR 0 7
20839: PUSH
20840: DOUBLE
20841: LD_INT 1
20843: DEC
20844: ST_TO_ADDR
20845: LD_VAR 0 5
20849: PPUSH
20850: CALL 17316 0 1
20854: PUSH
20855: FOR_TO
20856: IFFALSE 20918
// begin if tmp < result [ j ] [ 2 ] then
20858: LD_VAR 0 8
20862: PUSH
20863: LD_VAR 0 5
20867: PUSH
20868: LD_VAR 0 7
20872: ARRAY
20873: PUSH
20874: LD_INT 2
20876: ARRAY
20877: LESS
20878: IFFALSE 20916
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20880: LD_ADDR_VAR 0 5
20884: PUSH
20885: LD_VAR 0 5
20889: PPUSH
20890: LD_VAR 0 7
20894: PPUSH
20895: LD_VAR 0 6
20899: PUSH
20900: LD_VAR 0 8
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PPUSH
20909: CALL_OW 2
20913: ST_TO_ADDR
// break ;
20914: GO 20918
// end ; end ;
20916: GO 20855
20918: POP
20919: POP
// end ; end ;
20920: GO 20703
20922: POP
20923: POP
// if result and not asc then
20924: LD_VAR 0 5
20928: PUSH
20929: LD_VAR 0 3
20933: NOT
20934: AND
20935: IFFALSE 20952
// result := ReverseArray ( result ) ;
20937: LD_ADDR_VAR 0 5
20941: PUSH
20942: LD_VAR 0 5
20946: PPUSH
20947: CALL 48192 0 1
20951: ST_TO_ADDR
// tmp := [ ] ;
20952: LD_ADDR_VAR 0 8
20956: PUSH
20957: EMPTY
20958: ST_TO_ADDR
// if mode then
20959: LD_VAR 0 4
20963: IFFALSE 21027
// begin for i := 1 to result do
20965: LD_ADDR_VAR 0 6
20969: PUSH
20970: DOUBLE
20971: LD_INT 1
20973: DEC
20974: ST_TO_ADDR
20975: LD_VAR 0 5
20979: PUSH
20980: FOR_TO
20981: IFFALSE 21015
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20983: LD_ADDR_VAR 0 8
20987: PUSH
20988: LD_VAR 0 8
20992: PPUSH
20993: LD_VAR 0 5
20997: PUSH
20998: LD_VAR 0 6
21002: ARRAY
21003: PUSH
21004: LD_INT 1
21006: ARRAY
21007: PPUSH
21008: CALL 52905 0 2
21012: ST_TO_ADDR
21013: GO 20980
21015: POP
21016: POP
// result := tmp ;
21017: LD_ADDR_VAR 0 5
21021: PUSH
21022: LD_VAR 0 8
21026: ST_TO_ADDR
// end ; end ;
21027: LD_VAR 0 5
21031: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21032: LD_INT 0
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
// if not list then
21038: LD_VAR 0 3
21042: NOT
21043: IFFALSE 21047
// exit ;
21045: GO 21435
// result := [ ] ;
21047: LD_ADDR_VAR 0 6
21051: PUSH
21052: EMPTY
21053: ST_TO_ADDR
// for i in list do
21054: LD_ADDR_VAR 0 7
21058: PUSH
21059: LD_VAR 0 3
21063: PUSH
21064: FOR_IN
21065: IFFALSE 21267
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21067: LD_ADDR_VAR 0 9
21071: PUSH
21072: LD_VAR 0 7
21076: PPUSH
21077: LD_VAR 0 1
21081: PPUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: CALL_OW 297
21091: ST_TO_ADDR
// if not result then
21092: LD_VAR 0 6
21096: NOT
21097: IFFALSE 21123
// result := [ [ i , tmp ] ] else
21099: LD_ADDR_VAR 0 6
21103: PUSH
21104: LD_VAR 0 7
21108: PUSH
21109: LD_VAR 0 9
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: ST_TO_ADDR
21121: GO 21265
// begin if result [ result ] [ 2 ] < tmp then
21123: LD_VAR 0 6
21127: PUSH
21128: LD_VAR 0 6
21132: ARRAY
21133: PUSH
21134: LD_INT 2
21136: ARRAY
21137: PUSH
21138: LD_VAR 0 9
21142: LESS
21143: IFFALSE 21185
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21145: LD_ADDR_VAR 0 6
21149: PUSH
21150: LD_VAR 0 6
21154: PPUSH
21155: LD_VAR 0 6
21159: PUSH
21160: LD_INT 1
21162: PLUS
21163: PPUSH
21164: LD_VAR 0 7
21168: PUSH
21169: LD_VAR 0 9
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PPUSH
21178: CALL_OW 2
21182: ST_TO_ADDR
21183: GO 21265
// for j = 1 to result do
21185: LD_ADDR_VAR 0 8
21189: PUSH
21190: DOUBLE
21191: LD_INT 1
21193: DEC
21194: ST_TO_ADDR
21195: LD_VAR 0 6
21199: PUSH
21200: FOR_TO
21201: IFFALSE 21263
// begin if tmp < result [ j ] [ 2 ] then
21203: LD_VAR 0 9
21207: PUSH
21208: LD_VAR 0 6
21212: PUSH
21213: LD_VAR 0 8
21217: ARRAY
21218: PUSH
21219: LD_INT 2
21221: ARRAY
21222: LESS
21223: IFFALSE 21261
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21225: LD_ADDR_VAR 0 6
21229: PUSH
21230: LD_VAR 0 6
21234: PPUSH
21235: LD_VAR 0 8
21239: PPUSH
21240: LD_VAR 0 7
21244: PUSH
21245: LD_VAR 0 9
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PPUSH
21254: CALL_OW 2
21258: ST_TO_ADDR
// break ;
21259: GO 21263
// end ; end ;
21261: GO 21200
21263: POP
21264: POP
// end ; end ;
21265: GO 21064
21267: POP
21268: POP
// if result and not asc then
21269: LD_VAR 0 6
21273: PUSH
21274: LD_VAR 0 4
21278: NOT
21279: AND
21280: IFFALSE 21355
// begin tmp := result ;
21282: LD_ADDR_VAR 0 9
21286: PUSH
21287: LD_VAR 0 6
21291: ST_TO_ADDR
// for i = tmp downto 1 do
21292: LD_ADDR_VAR 0 7
21296: PUSH
21297: DOUBLE
21298: LD_VAR 0 9
21302: INC
21303: ST_TO_ADDR
21304: LD_INT 1
21306: PUSH
21307: FOR_DOWNTO
21308: IFFALSE 21353
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21310: LD_ADDR_VAR 0 6
21314: PUSH
21315: LD_VAR 0 6
21319: PPUSH
21320: LD_VAR 0 9
21324: PUSH
21325: LD_VAR 0 7
21329: MINUS
21330: PUSH
21331: LD_INT 1
21333: PLUS
21334: PPUSH
21335: LD_VAR 0 9
21339: PUSH
21340: LD_VAR 0 7
21344: ARRAY
21345: PPUSH
21346: CALL_OW 1
21350: ST_TO_ADDR
21351: GO 21307
21353: POP
21354: POP
// end ; tmp := [ ] ;
21355: LD_ADDR_VAR 0 9
21359: PUSH
21360: EMPTY
21361: ST_TO_ADDR
// if mode then
21362: LD_VAR 0 5
21366: IFFALSE 21435
// begin for i = 1 to result do
21368: LD_ADDR_VAR 0 7
21372: PUSH
21373: DOUBLE
21374: LD_INT 1
21376: DEC
21377: ST_TO_ADDR
21378: LD_VAR 0 6
21382: PUSH
21383: FOR_TO
21384: IFFALSE 21423
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21386: LD_ADDR_VAR 0 9
21390: PUSH
21391: LD_VAR 0 9
21395: PPUSH
21396: LD_VAR 0 7
21400: PPUSH
21401: LD_VAR 0 6
21405: PUSH
21406: LD_VAR 0 7
21410: ARRAY
21411: PUSH
21412: LD_INT 1
21414: ARRAY
21415: PPUSH
21416: CALL_OW 1
21420: ST_TO_ADDR
21421: GO 21383
21423: POP
21424: POP
// result := tmp ;
21425: LD_ADDR_VAR 0 6
21429: PUSH
21430: LD_VAR 0 9
21434: ST_TO_ADDR
// end ; end ;
21435: LD_VAR 0 6
21439: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21440: LD_INT 0
21442: PPUSH
21443: PPUSH
21444: PPUSH
21445: PPUSH
21446: PPUSH
21447: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21448: LD_ADDR_VAR 0 5
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: LD_INT 0
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: EMPTY
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: ST_TO_ADDR
// if not x or not y then
21470: LD_VAR 0 2
21474: NOT
21475: PUSH
21476: LD_VAR 0 3
21480: NOT
21481: OR
21482: IFFALSE 21486
// exit ;
21484: GO 23136
// if not range then
21486: LD_VAR 0 4
21490: NOT
21491: IFFALSE 21501
// range := 10 ;
21493: LD_ADDR_VAR 0 4
21497: PUSH
21498: LD_INT 10
21500: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21501: LD_ADDR_VAR 0 8
21505: PUSH
21506: LD_INT 81
21508: PUSH
21509: LD_VAR 0 1
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 92
21520: PUSH
21521: LD_VAR 0 2
21525: PUSH
21526: LD_VAR 0 3
21530: PUSH
21531: LD_VAR 0 4
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 3
21544: PUSH
21545: LD_INT 21
21547: PUSH
21548: LD_INT 3
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: ST_TO_ADDR
// if not tmp then
21569: LD_VAR 0 8
21573: NOT
21574: IFFALSE 21578
// exit ;
21576: GO 23136
// for i in tmp do
21578: LD_ADDR_VAR 0 6
21582: PUSH
21583: LD_VAR 0 8
21587: PUSH
21588: FOR_IN
21589: IFFALSE 23111
// begin points := [ 0 , 0 , 0 ] ;
21591: LD_ADDR_VAR 0 9
21595: PUSH
21596: LD_INT 0
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: LIST
21609: ST_TO_ADDR
// bpoints := 1 ;
21610: LD_ADDR_VAR 0 10
21614: PUSH
21615: LD_INT 1
21617: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21618: LD_VAR 0 6
21622: PPUSH
21623: CALL_OW 247
21627: PUSH
21628: LD_INT 1
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 22214
21636: POP
// begin if GetClass ( i ) = 1 then
21637: LD_VAR 0 6
21641: PPUSH
21642: CALL_OW 257
21646: PUSH
21647: LD_INT 1
21649: EQUAL
21650: IFFALSE 21671
// points := [ 10 , 5 , 3 ] ;
21652: LD_ADDR_VAR 0 9
21656: PUSH
21657: LD_INT 10
21659: PUSH
21660: LD_INT 5
21662: PUSH
21663: LD_INT 3
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21671: LD_VAR 0 6
21675: PPUSH
21676: CALL_OW 257
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 3
21686: PUSH
21687: LD_INT 4
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: IN
21695: IFFALSE 21716
// points := [ 3 , 2 , 1 ] ;
21697: LD_ADDR_VAR 0 9
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21716: LD_VAR 0 6
21720: PPUSH
21721: CALL_OW 257
21725: PUSH
21726: LD_INT 5
21728: EQUAL
21729: IFFALSE 21750
// points := [ 130 , 5 , 2 ] ;
21731: LD_ADDR_VAR 0 9
21735: PUSH
21736: LD_INT 130
21738: PUSH
21739: LD_INT 5
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21750: LD_VAR 0 6
21754: PPUSH
21755: CALL_OW 257
21759: PUSH
21760: LD_INT 8
21762: EQUAL
21763: IFFALSE 21784
// points := [ 35 , 35 , 30 ] ;
21765: LD_ADDR_VAR 0 9
21769: PUSH
21770: LD_INT 35
21772: PUSH
21773: LD_INT 35
21775: PUSH
21776: LD_INT 30
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21784: LD_VAR 0 6
21788: PPUSH
21789: CALL_OW 257
21793: PUSH
21794: LD_INT 9
21796: EQUAL
21797: IFFALSE 21818
// points := [ 20 , 55 , 40 ] ;
21799: LD_ADDR_VAR 0 9
21803: PUSH
21804: LD_INT 20
21806: PUSH
21807: LD_INT 55
21809: PUSH
21810: LD_INT 40
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21818: LD_VAR 0 6
21822: PPUSH
21823: CALL_OW 257
21827: PUSH
21828: LD_INT 12
21830: PUSH
21831: LD_INT 16
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: IN
21838: IFFALSE 21859
// points := [ 5 , 3 , 2 ] ;
21840: LD_ADDR_VAR 0 9
21844: PUSH
21845: LD_INT 5
21847: PUSH
21848: LD_INT 3
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: LIST
21858: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21859: LD_VAR 0 6
21863: PPUSH
21864: CALL_OW 257
21868: PUSH
21869: LD_INT 17
21871: EQUAL
21872: IFFALSE 21893
// points := [ 100 , 50 , 75 ] ;
21874: LD_ADDR_VAR 0 9
21878: PUSH
21879: LD_INT 100
21881: PUSH
21882: LD_INT 50
21884: PUSH
21885: LD_INT 75
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21893: LD_VAR 0 6
21897: PPUSH
21898: CALL_OW 257
21902: PUSH
21903: LD_INT 15
21905: EQUAL
21906: IFFALSE 21927
// points := [ 10 , 5 , 3 ] ;
21908: LD_ADDR_VAR 0 9
21912: PUSH
21913: LD_INT 10
21915: PUSH
21916: LD_INT 5
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21927: LD_VAR 0 6
21931: PPUSH
21932: CALL_OW 257
21936: PUSH
21937: LD_INT 14
21939: EQUAL
21940: IFFALSE 21961
// points := [ 10 , 0 , 0 ] ;
21942: LD_ADDR_VAR 0 9
21946: PUSH
21947: LD_INT 10
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21961: LD_VAR 0 6
21965: PPUSH
21966: CALL_OW 257
21970: PUSH
21971: LD_INT 11
21973: EQUAL
21974: IFFALSE 21995
// points := [ 30 , 10 , 5 ] ;
21976: LD_ADDR_VAR 0 9
21980: PUSH
21981: LD_INT 30
21983: PUSH
21984: LD_INT 10
21986: PUSH
21987: LD_INT 5
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21995: LD_VAR 0 1
21999: PPUSH
22000: LD_INT 5
22002: PPUSH
22003: CALL_OW 321
22007: PUSH
22008: LD_INT 2
22010: EQUAL
22011: IFFALSE 22028
// bpoints := bpoints * 1.8 ;
22013: LD_ADDR_VAR 0 10
22017: PUSH
22018: LD_VAR 0 10
22022: PUSH
22023: LD_REAL  1.80000000000000E+0000
22026: MUL
22027: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22028: LD_VAR 0 6
22032: PPUSH
22033: CALL_OW 257
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: LD_INT 3
22046: PUSH
22047: LD_INT 4
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: IN
22056: PUSH
22057: LD_VAR 0 1
22061: PPUSH
22062: LD_INT 51
22064: PPUSH
22065: CALL_OW 321
22069: PUSH
22070: LD_INT 2
22072: EQUAL
22073: AND
22074: IFFALSE 22091
// bpoints := bpoints * 1.2 ;
22076: LD_ADDR_VAR 0 10
22080: PUSH
22081: LD_VAR 0 10
22085: PUSH
22086: LD_REAL  1.20000000000000E+0000
22089: MUL
22090: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22091: LD_VAR 0 6
22095: PPUSH
22096: CALL_OW 257
22100: PUSH
22101: LD_INT 5
22103: PUSH
22104: LD_INT 7
22106: PUSH
22107: LD_INT 9
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: IN
22115: PUSH
22116: LD_VAR 0 1
22120: PPUSH
22121: LD_INT 52
22123: PPUSH
22124: CALL_OW 321
22128: PUSH
22129: LD_INT 2
22131: EQUAL
22132: AND
22133: IFFALSE 22150
// bpoints := bpoints * 1.5 ;
22135: LD_ADDR_VAR 0 10
22139: PUSH
22140: LD_VAR 0 10
22144: PUSH
22145: LD_REAL  1.50000000000000E+0000
22148: MUL
22149: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22150: LD_VAR 0 1
22154: PPUSH
22155: LD_INT 66
22157: PPUSH
22158: CALL_OW 321
22162: PUSH
22163: LD_INT 2
22165: EQUAL
22166: IFFALSE 22183
// bpoints := bpoints * 1.1 ;
22168: LD_ADDR_VAR 0 10
22172: PUSH
22173: LD_VAR 0 10
22177: PUSH
22178: LD_REAL  1.10000000000000E+0000
22181: MUL
22182: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22183: LD_ADDR_VAR 0 10
22187: PUSH
22188: LD_VAR 0 10
22192: PUSH
22193: LD_VAR 0 6
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: CALL_OW 259
22205: PUSH
22206: LD_REAL  1.15000000000000E+0000
22209: MUL
22210: MUL
22211: ST_TO_ADDR
// end ; unit_vehicle :
22212: GO 23040
22214: LD_INT 2
22216: DOUBLE
22217: EQUAL
22218: IFTRUE 22222
22220: GO 23028
22222: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22223: LD_VAR 0 6
22227: PPUSH
22228: CALL_OW 264
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 42
22238: PUSH
22239: LD_INT 24
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: IN
22247: IFFALSE 22268
// points := [ 25 , 5 , 3 ] ;
22249: LD_ADDR_VAR 0 9
22253: PUSH
22254: LD_INT 25
22256: PUSH
22257: LD_INT 5
22259: PUSH
22260: LD_INT 3
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22268: LD_VAR 0 6
22272: PPUSH
22273: CALL_OW 264
22277: PUSH
22278: LD_INT 4
22280: PUSH
22281: LD_INT 43
22283: PUSH
22284: LD_INT 25
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: IN
22292: IFFALSE 22313
// points := [ 40 , 15 , 5 ] ;
22294: LD_ADDR_VAR 0 9
22298: PUSH
22299: LD_INT 40
22301: PUSH
22302: LD_INT 15
22304: PUSH
22305: LD_INT 5
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22313: LD_VAR 0 6
22317: PPUSH
22318: CALL_OW 264
22322: PUSH
22323: LD_INT 3
22325: PUSH
22326: LD_INT 23
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: IN
22333: IFFALSE 22354
// points := [ 7 , 25 , 8 ] ;
22335: LD_ADDR_VAR 0 9
22339: PUSH
22340: LD_INT 7
22342: PUSH
22343: LD_INT 25
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22354: LD_VAR 0 6
22358: PPUSH
22359: CALL_OW 264
22363: PUSH
22364: LD_INT 5
22366: PUSH
22367: LD_INT 27
22369: PUSH
22370: LD_INT 44
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: IN
22378: IFFALSE 22399
// points := [ 14 , 50 , 16 ] ;
22380: LD_ADDR_VAR 0 9
22384: PUSH
22385: LD_INT 14
22387: PUSH
22388: LD_INT 50
22390: PUSH
22391: LD_INT 16
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22399: LD_VAR 0 6
22403: PPUSH
22404: CALL_OW 264
22408: PUSH
22409: LD_INT 6
22411: PUSH
22412: LD_INT 46
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: IN
22419: IFFALSE 22440
// points := [ 32 , 120 , 70 ] ;
22421: LD_ADDR_VAR 0 9
22425: PUSH
22426: LD_INT 32
22428: PUSH
22429: LD_INT 120
22431: PUSH
22432: LD_INT 70
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22440: LD_VAR 0 6
22444: PPUSH
22445: CALL_OW 264
22449: PUSH
22450: LD_INT 7
22452: PUSH
22453: LD_INT 28
22455: PUSH
22456: LD_INT 45
22458: PUSH
22459: LD_INT 92
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: IN
22468: IFFALSE 22489
// points := [ 35 , 20 , 45 ] ;
22470: LD_ADDR_VAR 0 9
22474: PUSH
22475: LD_INT 35
22477: PUSH
22478: LD_INT 20
22480: PUSH
22481: LD_INT 45
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: LIST
22488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22489: LD_VAR 0 6
22493: PPUSH
22494: CALL_OW 264
22498: PUSH
22499: LD_INT 47
22501: PUSH
22502: EMPTY
22503: LIST
22504: IN
22505: IFFALSE 22526
// points := [ 67 , 45 , 75 ] ;
22507: LD_ADDR_VAR 0 9
22511: PUSH
22512: LD_INT 67
22514: PUSH
22515: LD_INT 45
22517: PUSH
22518: LD_INT 75
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22526: LD_VAR 0 6
22530: PPUSH
22531: CALL_OW 264
22535: PUSH
22536: LD_INT 26
22538: PUSH
22539: EMPTY
22540: LIST
22541: IN
22542: IFFALSE 22563
// points := [ 120 , 30 , 80 ] ;
22544: LD_ADDR_VAR 0 9
22548: PUSH
22549: LD_INT 120
22551: PUSH
22552: LD_INT 30
22554: PUSH
22555: LD_INT 80
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22563: LD_VAR 0 6
22567: PPUSH
22568: CALL_OW 264
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: EMPTY
22577: LIST
22578: IN
22579: IFFALSE 22600
// points := [ 40 , 1 , 1 ] ;
22581: LD_ADDR_VAR 0 9
22585: PUSH
22586: LD_INT 40
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22600: LD_VAR 0 6
22604: PPUSH
22605: CALL_OW 264
22609: PUSH
22610: LD_INT 29
22612: PUSH
22613: EMPTY
22614: LIST
22615: IN
22616: IFFALSE 22637
// points := [ 70 , 200 , 400 ] ;
22618: LD_ADDR_VAR 0 9
22622: PUSH
22623: LD_INT 70
22625: PUSH
22626: LD_INT 200
22628: PUSH
22629: LD_INT 400
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22637: LD_VAR 0 6
22641: PPUSH
22642: CALL_OW 264
22646: PUSH
22647: LD_INT 14
22649: PUSH
22650: LD_INT 53
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: IN
22657: IFFALSE 22678
// points := [ 40 , 10 , 20 ] ;
22659: LD_ADDR_VAR 0 9
22663: PUSH
22664: LD_INT 40
22666: PUSH
22667: LD_INT 10
22669: PUSH
22670: LD_INT 20
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22678: LD_VAR 0 6
22682: PPUSH
22683: CALL_OW 264
22687: PUSH
22688: LD_INT 9
22690: PUSH
22691: EMPTY
22692: LIST
22693: IN
22694: IFFALSE 22715
// points := [ 5 , 70 , 20 ] ;
22696: LD_ADDR_VAR 0 9
22700: PUSH
22701: LD_INT 5
22703: PUSH
22704: LD_INT 70
22706: PUSH
22707: LD_INT 20
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: LIST
22714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22715: LD_VAR 0 6
22719: PPUSH
22720: CALL_OW 264
22724: PUSH
22725: LD_INT 10
22727: PUSH
22728: EMPTY
22729: LIST
22730: IN
22731: IFFALSE 22752
// points := [ 35 , 110 , 70 ] ;
22733: LD_ADDR_VAR 0 9
22737: PUSH
22738: LD_INT 35
22740: PUSH
22741: LD_INT 110
22743: PUSH
22744: LD_INT 70
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22752: LD_VAR 0 6
22756: PPUSH
22757: CALL_OW 265
22761: PUSH
22762: LD_INT 25
22764: EQUAL
22765: IFFALSE 22786
// points := [ 80 , 65 , 100 ] ;
22767: LD_ADDR_VAR 0 9
22771: PUSH
22772: LD_INT 80
22774: PUSH
22775: LD_INT 65
22777: PUSH
22778: LD_INT 100
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22786: LD_VAR 0 6
22790: PPUSH
22791: CALL_OW 263
22795: PUSH
22796: LD_INT 1
22798: EQUAL
22799: IFFALSE 22834
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22801: LD_ADDR_VAR 0 10
22805: PUSH
22806: LD_VAR 0 10
22810: PUSH
22811: LD_VAR 0 6
22815: PPUSH
22816: CALL_OW 311
22820: PPUSH
22821: LD_INT 3
22823: PPUSH
22824: CALL_OW 259
22828: PUSH
22829: LD_INT 4
22831: MUL
22832: MUL
22833: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22834: LD_VAR 0 6
22838: PPUSH
22839: CALL_OW 263
22843: PUSH
22844: LD_INT 2
22846: EQUAL
22847: IFFALSE 22898
// begin j := IsControledBy ( i ) ;
22849: LD_ADDR_VAR 0 7
22853: PUSH
22854: LD_VAR 0 6
22858: PPUSH
22859: CALL_OW 312
22863: ST_TO_ADDR
// if j then
22864: LD_VAR 0 7
22868: IFFALSE 22898
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22870: LD_ADDR_VAR 0 10
22874: PUSH
22875: LD_VAR 0 10
22879: PUSH
22880: LD_VAR 0 7
22884: PPUSH
22885: LD_INT 3
22887: PPUSH
22888: CALL_OW 259
22892: PUSH
22893: LD_INT 3
22895: MUL
22896: MUL
22897: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22898: LD_VAR 0 6
22902: PPUSH
22903: CALL_OW 264
22907: PUSH
22908: LD_INT 5
22910: PUSH
22911: LD_INT 6
22913: PUSH
22914: LD_INT 46
22916: PUSH
22917: LD_INT 44
22919: PUSH
22920: LD_INT 47
22922: PUSH
22923: LD_INT 45
22925: PUSH
22926: LD_INT 28
22928: PUSH
22929: LD_INT 7
22931: PUSH
22932: LD_INT 27
22934: PUSH
22935: LD_INT 29
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: IN
22950: PUSH
22951: LD_VAR 0 1
22955: PPUSH
22956: LD_INT 52
22958: PPUSH
22959: CALL_OW 321
22963: PUSH
22964: LD_INT 2
22966: EQUAL
22967: AND
22968: IFFALSE 22985
// bpoints := bpoints * 1.2 ;
22970: LD_ADDR_VAR 0 10
22974: PUSH
22975: LD_VAR 0 10
22979: PUSH
22980: LD_REAL  1.20000000000000E+0000
22983: MUL
22984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22985: LD_VAR 0 6
22989: PPUSH
22990: CALL_OW 264
22994: PUSH
22995: LD_INT 6
22997: PUSH
22998: LD_INT 46
23000: PUSH
23001: LD_INT 47
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: IN
23009: IFFALSE 23026
// bpoints := bpoints * 1.2 ;
23011: LD_ADDR_VAR 0 10
23015: PUSH
23016: LD_VAR 0 10
23020: PUSH
23021: LD_REAL  1.20000000000000E+0000
23024: MUL
23025: ST_TO_ADDR
// end ; unit_building :
23026: GO 23040
23028: LD_INT 3
23030: DOUBLE
23031: EQUAL
23032: IFTRUE 23036
23034: GO 23039
23036: POP
// ; end ;
23037: GO 23040
23039: POP
// for j = 1 to 3 do
23040: LD_ADDR_VAR 0 7
23044: PUSH
23045: DOUBLE
23046: LD_INT 1
23048: DEC
23049: ST_TO_ADDR
23050: LD_INT 3
23052: PUSH
23053: FOR_TO
23054: IFFALSE 23107
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23056: LD_ADDR_VAR 0 5
23060: PUSH
23061: LD_VAR 0 5
23065: PPUSH
23066: LD_VAR 0 7
23070: PPUSH
23071: LD_VAR 0 5
23075: PUSH
23076: LD_VAR 0 7
23080: ARRAY
23081: PUSH
23082: LD_VAR 0 9
23086: PUSH
23087: LD_VAR 0 7
23091: ARRAY
23092: PUSH
23093: LD_VAR 0 10
23097: MUL
23098: PLUS
23099: PPUSH
23100: CALL_OW 1
23104: ST_TO_ADDR
23105: GO 23053
23107: POP
23108: POP
// end ;
23109: GO 21588
23111: POP
23112: POP
// result := Replace ( result , 4 , tmp ) ;
23113: LD_ADDR_VAR 0 5
23117: PUSH
23118: LD_VAR 0 5
23122: PPUSH
23123: LD_INT 4
23125: PPUSH
23126: LD_VAR 0 8
23130: PPUSH
23131: CALL_OW 1
23135: ST_TO_ADDR
// end ;
23136: LD_VAR 0 5
23140: RET
// export function DangerAtRange ( unit , range ) ; begin
23141: LD_INT 0
23143: PPUSH
// if not unit then
23144: LD_VAR 0 1
23148: NOT
23149: IFFALSE 23153
// exit ;
23151: GO 23198
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: LD_VAR 0 1
23162: PPUSH
23163: CALL_OW 255
23167: PPUSH
23168: LD_VAR 0 1
23172: PPUSH
23173: CALL_OW 250
23177: PPUSH
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 251
23187: PPUSH
23188: LD_VAR 0 2
23192: PPUSH
23193: CALL 21440 0 4
23197: ST_TO_ADDR
// end ;
23198: LD_VAR 0 3
23202: RET
// export function DangerInArea ( side , area ) ; begin
23203: LD_INT 0
23205: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23206: LD_ADDR_VAR 0 3
23210: PUSH
23211: LD_VAR 0 2
23215: PPUSH
23216: LD_INT 81
23218: PUSH
23219: LD_VAR 0 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PPUSH
23228: CALL_OW 70
23232: ST_TO_ADDR
// end ;
23233: LD_VAR 0 3
23237: RET
// export function IsExtension ( b ) ; begin
23238: LD_INT 0
23240: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23241: LD_ADDR_VAR 0 2
23245: PUSH
23246: LD_VAR 0 1
23250: PUSH
23251: LD_INT 23
23253: PUSH
23254: LD_INT 20
23256: PUSH
23257: LD_INT 22
23259: PUSH
23260: LD_INT 17
23262: PUSH
23263: LD_INT 24
23265: PUSH
23266: LD_INT 21
23268: PUSH
23269: LD_INT 19
23271: PUSH
23272: LD_INT 16
23274: PUSH
23275: LD_INT 25
23277: PUSH
23278: LD_INT 18
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: IN
23293: ST_TO_ADDR
// end ;
23294: LD_VAR 0 2
23298: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23299: LD_INT 0
23301: PPUSH
23302: PPUSH
23303: PPUSH
// result := [ ] ;
23304: LD_ADDR_VAR 0 4
23308: PUSH
23309: EMPTY
23310: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23311: LD_ADDR_VAR 0 5
23315: PUSH
23316: LD_VAR 0 2
23320: PPUSH
23321: LD_INT 21
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PPUSH
23331: CALL_OW 70
23335: ST_TO_ADDR
// if not tmp then
23336: LD_VAR 0 5
23340: NOT
23341: IFFALSE 23345
// exit ;
23343: GO 23409
// if checkLink then
23345: LD_VAR 0 3
23349: IFFALSE 23399
// begin for i in tmp do
23351: LD_ADDR_VAR 0 6
23355: PUSH
23356: LD_VAR 0 5
23360: PUSH
23361: FOR_IN
23362: IFFALSE 23397
// if GetBase ( i ) <> base then
23364: LD_VAR 0 6
23368: PPUSH
23369: CALL_OW 274
23373: PUSH
23374: LD_VAR 0 1
23378: NONEQUAL
23379: IFFALSE 23395
// ComLinkToBase ( base , i ) ;
23381: LD_VAR 0 1
23385: PPUSH
23386: LD_VAR 0 6
23390: PPUSH
23391: CALL_OW 169
23395: GO 23361
23397: POP
23398: POP
// end ; result := tmp ;
23399: LD_ADDR_VAR 0 4
23403: PUSH
23404: LD_VAR 0 5
23408: ST_TO_ADDR
// end ;
23409: LD_VAR 0 4
23413: RET
// export function ComComplete ( units , b ) ; var i ; begin
23414: LD_INT 0
23416: PPUSH
23417: PPUSH
// if not units then
23418: LD_VAR 0 1
23422: NOT
23423: IFFALSE 23427
// exit ;
23425: GO 23517
// for i in units do
23427: LD_ADDR_VAR 0 4
23431: PUSH
23432: LD_VAR 0 1
23436: PUSH
23437: FOR_IN
23438: IFFALSE 23515
// if BuildingStatus ( b ) = bs_build then
23440: LD_VAR 0 2
23444: PPUSH
23445: CALL_OW 461
23449: PUSH
23450: LD_INT 1
23452: EQUAL
23453: IFFALSE 23513
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23455: LD_VAR 0 4
23459: PPUSH
23460: LD_STRING h
23462: PUSH
23463: LD_VAR 0 2
23467: PPUSH
23468: CALL_OW 250
23472: PUSH
23473: LD_VAR 0 2
23477: PPUSH
23478: CALL_OW 251
23482: PUSH
23483: LD_VAR 0 2
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: PUSH
23506: EMPTY
23507: LIST
23508: PPUSH
23509: CALL_OW 446
23513: GO 23437
23515: POP
23516: POP
// end ;
23517: LD_VAR 0 3
23521: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23522: LD_INT 0
23524: PPUSH
23525: PPUSH
23526: PPUSH
23527: PPUSH
23528: PPUSH
23529: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23530: LD_VAR 0 1
23534: NOT
23535: PUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 263
23545: PUSH
23546: LD_INT 2
23548: NONEQUAL
23549: OR
23550: IFFALSE 23554
// exit ;
23552: GO 23870
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23554: LD_ADDR_VAR 0 6
23558: PUSH
23559: LD_INT 22
23561: PUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL_OW 255
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: LD_INT 30
23581: PUSH
23582: LD_INT 36
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 34
23591: PUSH
23592: LD_INT 31
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PPUSH
23608: CALL_OW 69
23612: ST_TO_ADDR
// if not tmp then
23613: LD_VAR 0 6
23617: NOT
23618: IFFALSE 23622
// exit ;
23620: GO 23870
// result := [ ] ;
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: EMPTY
23628: ST_TO_ADDR
// for i in tmp do
23629: LD_ADDR_VAR 0 3
23633: PUSH
23634: LD_VAR 0 6
23638: PUSH
23639: FOR_IN
23640: IFFALSE 23711
// begin t := UnitsInside ( i ) ;
23642: LD_ADDR_VAR 0 4
23646: PUSH
23647: LD_VAR 0 3
23651: PPUSH
23652: CALL_OW 313
23656: ST_TO_ADDR
// if t then
23657: LD_VAR 0 4
23661: IFFALSE 23709
// for j in t do
23663: LD_ADDR_VAR 0 7
23667: PUSH
23668: LD_VAR 0 4
23672: PUSH
23673: FOR_IN
23674: IFFALSE 23707
// result := Replace ( result , result + 1 , j ) ;
23676: LD_ADDR_VAR 0 2
23680: PUSH
23681: LD_VAR 0 2
23685: PPUSH
23686: LD_VAR 0 2
23690: PUSH
23691: LD_INT 1
23693: PLUS
23694: PPUSH
23695: LD_VAR 0 7
23699: PPUSH
23700: CALL_OW 1
23704: ST_TO_ADDR
23705: GO 23673
23707: POP
23708: POP
// end ;
23709: GO 23639
23711: POP
23712: POP
// if not result then
23713: LD_VAR 0 2
23717: NOT
23718: IFFALSE 23722
// exit ;
23720: GO 23870
// mech := result [ 1 ] ;
23722: LD_ADDR_VAR 0 5
23726: PUSH
23727: LD_VAR 0 2
23731: PUSH
23732: LD_INT 1
23734: ARRAY
23735: ST_TO_ADDR
// if result > 1 then
23736: LD_VAR 0 2
23740: PUSH
23741: LD_INT 1
23743: GREATER
23744: IFFALSE 23856
// begin for i = 2 to result do
23746: LD_ADDR_VAR 0 3
23750: PUSH
23751: DOUBLE
23752: LD_INT 2
23754: DEC
23755: ST_TO_ADDR
23756: LD_VAR 0 2
23760: PUSH
23761: FOR_TO
23762: IFFALSE 23854
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23764: LD_ADDR_VAR 0 4
23768: PUSH
23769: LD_VAR 0 2
23773: PUSH
23774: LD_VAR 0 3
23778: ARRAY
23779: PPUSH
23780: LD_INT 3
23782: PPUSH
23783: CALL_OW 259
23787: PUSH
23788: LD_VAR 0 2
23792: PUSH
23793: LD_VAR 0 3
23797: ARRAY
23798: PPUSH
23799: CALL_OW 432
23803: MINUS
23804: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23805: LD_VAR 0 4
23809: PUSH
23810: LD_VAR 0 5
23814: PPUSH
23815: LD_INT 3
23817: PPUSH
23818: CALL_OW 259
23822: PUSH
23823: LD_VAR 0 5
23827: PPUSH
23828: CALL_OW 432
23832: MINUS
23833: GREATEREQUAL
23834: IFFALSE 23852
// mech := result [ i ] ;
23836: LD_ADDR_VAR 0 5
23840: PUSH
23841: LD_VAR 0 2
23845: PUSH
23846: LD_VAR 0 3
23850: ARRAY
23851: ST_TO_ADDR
// end ;
23852: GO 23761
23854: POP
23855: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23856: LD_VAR 0 1
23860: PPUSH
23861: LD_VAR 0 5
23865: PPUSH
23866: CALL_OW 135
// end ;
23870: LD_VAR 0 2
23874: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23875: LD_INT 0
23877: PPUSH
23878: PPUSH
23879: PPUSH
23880: PPUSH
23881: PPUSH
23882: PPUSH
23883: PPUSH
23884: PPUSH
23885: PPUSH
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
// result := [ ] ;
23890: LD_ADDR_VAR 0 7
23894: PUSH
23895: EMPTY
23896: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 266
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: IN
23917: NOT
23918: IFFALSE 23922
// exit ;
23920: GO 25556
// if name then
23922: LD_VAR 0 3
23926: IFFALSE 23942
// SetBName ( base_dep , name ) ;
23928: LD_VAR 0 1
23932: PPUSH
23933: LD_VAR 0 3
23937: PPUSH
23938: CALL_OW 500
// base := GetBase ( base_dep ) ;
23942: LD_ADDR_VAR 0 15
23946: PUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: CALL_OW 274
23956: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23957: LD_ADDR_VAR 0 16
23961: PUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 255
23971: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23972: LD_ADDR_VAR 0 17
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 248
23986: ST_TO_ADDR
// if sources then
23987: LD_VAR 0 5
23991: IFFALSE 24038
// for i = 1 to 3 do
23993: LD_ADDR_VAR 0 8
23997: PUSH
23998: DOUBLE
23999: LD_INT 1
24001: DEC
24002: ST_TO_ADDR
24003: LD_INT 3
24005: PUSH
24006: FOR_TO
24007: IFFALSE 24036
// AddResourceType ( base , i , sources [ i ] ) ;
24009: LD_VAR 0 15
24013: PPUSH
24014: LD_VAR 0 8
24018: PPUSH
24019: LD_VAR 0 5
24023: PUSH
24024: LD_VAR 0 8
24028: ARRAY
24029: PPUSH
24030: CALL_OW 276
24034: GO 24006
24036: POP
24037: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24038: LD_ADDR_VAR 0 18
24042: PUSH
24043: LD_VAR 0 15
24047: PPUSH
24048: LD_VAR 0 2
24052: PPUSH
24053: LD_INT 1
24055: PPUSH
24056: CALL 23299 0 3
24060: ST_TO_ADDR
// InitHc ;
24061: CALL_OW 19
// InitUc ;
24065: CALL_OW 18
// uc_side := side ;
24069: LD_ADDR_OWVAR 20
24073: PUSH
24074: LD_VAR 0 16
24078: ST_TO_ADDR
// uc_nation := nation ;
24079: LD_ADDR_OWVAR 21
24083: PUSH
24084: LD_VAR 0 17
24088: ST_TO_ADDR
// if buildings then
24089: LD_VAR 0 18
24093: IFFALSE 25415
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24095: LD_ADDR_VAR 0 19
24099: PUSH
24100: LD_VAR 0 18
24104: PPUSH
24105: LD_INT 2
24107: PUSH
24108: LD_INT 30
24110: PUSH
24111: LD_INT 29
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 30
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: LIST
24132: PPUSH
24133: CALL_OW 72
24137: ST_TO_ADDR
// if tmp then
24138: LD_VAR 0 19
24142: IFFALSE 24190
// for i in tmp do
24144: LD_ADDR_VAR 0 8
24148: PUSH
24149: LD_VAR 0 19
24153: PUSH
24154: FOR_IN
24155: IFFALSE 24188
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24157: LD_VAR 0 8
24161: PPUSH
24162: CALL_OW 250
24166: PPUSH
24167: LD_VAR 0 8
24171: PPUSH
24172: CALL_OW 251
24176: PPUSH
24177: LD_VAR 0 16
24181: PPUSH
24182: CALL_OW 441
24186: GO 24154
24188: POP
24189: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24190: LD_VAR 0 18
24194: PPUSH
24195: LD_INT 2
24197: PUSH
24198: LD_INT 30
24200: PUSH
24201: LD_INT 32
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 30
24210: PUSH
24211: LD_INT 33
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: PPUSH
24223: CALL_OW 72
24227: IFFALSE 24315
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24229: LD_ADDR_VAR 0 8
24233: PUSH
24234: LD_VAR 0 18
24238: PPUSH
24239: LD_INT 2
24241: PUSH
24242: LD_INT 30
24244: PUSH
24245: LD_INT 32
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 30
24254: PUSH
24255: LD_INT 33
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: PPUSH
24267: CALL_OW 72
24271: PUSH
24272: FOR_IN
24273: IFFALSE 24313
// begin if not GetBWeapon ( i ) then
24275: LD_VAR 0 8
24279: PPUSH
24280: CALL_OW 269
24284: NOT
24285: IFFALSE 24311
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24287: LD_VAR 0 8
24291: PPUSH
24292: LD_VAR 0 8
24296: PPUSH
24297: LD_VAR 0 2
24301: PPUSH
24302: CALL 25561 0 2
24306: PPUSH
24307: CALL_OW 431
// end ;
24311: GO 24272
24313: POP
24314: POP
// end ; for i = 1 to personel do
24315: LD_ADDR_VAR 0 8
24319: PUSH
24320: DOUBLE
24321: LD_INT 1
24323: DEC
24324: ST_TO_ADDR
24325: LD_VAR 0 6
24329: PUSH
24330: FOR_TO
24331: IFFALSE 25395
// begin if i > 4 then
24333: LD_VAR 0 8
24337: PUSH
24338: LD_INT 4
24340: GREATER
24341: IFFALSE 24345
// break ;
24343: GO 25395
// case i of 1 :
24345: LD_VAR 0 8
24349: PUSH
24350: LD_INT 1
24352: DOUBLE
24353: EQUAL
24354: IFTRUE 24358
24356: GO 24438
24358: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24359: LD_ADDR_VAR 0 12
24363: PUSH
24364: LD_VAR 0 18
24368: PPUSH
24369: LD_INT 22
24371: PUSH
24372: LD_VAR 0 16
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 58
24383: PUSH
24384: EMPTY
24385: LIST
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: LD_INT 30
24392: PUSH
24393: LD_INT 32
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 30
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 30
24412: PUSH
24413: LD_INT 5
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: PPUSH
24431: CALL_OW 72
24435: ST_TO_ADDR
24436: GO 24660
24438: LD_INT 2
24440: DOUBLE
24441: EQUAL
24442: IFTRUE 24446
24444: GO 24508
24446: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24447: LD_ADDR_VAR 0 12
24451: PUSH
24452: LD_VAR 0 18
24456: PPUSH
24457: LD_INT 22
24459: PUSH
24460: LD_VAR 0 16
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 30
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 30
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 72
24505: ST_TO_ADDR
24506: GO 24660
24508: LD_INT 3
24510: DOUBLE
24511: EQUAL
24512: IFTRUE 24516
24514: GO 24578
24516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24517: LD_ADDR_VAR 0 12
24521: PUSH
24522: LD_VAR 0 18
24526: PPUSH
24527: LD_INT 22
24529: PUSH
24530: LD_VAR 0 16
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: LD_INT 30
24544: PUSH
24545: LD_INT 2
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 30
24554: PUSH
24555: LD_INT 3
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL_OW 72
24575: ST_TO_ADDR
24576: GO 24660
24578: LD_INT 4
24580: DOUBLE
24581: EQUAL
24582: IFTRUE 24586
24584: GO 24659
24586: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24587: LD_ADDR_VAR 0 12
24591: PUSH
24592: LD_VAR 0 18
24596: PPUSH
24597: LD_INT 22
24599: PUSH
24600: LD_VAR 0 16
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 30
24614: PUSH
24615: LD_INT 6
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 30
24624: PUSH
24625: LD_INT 7
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 30
24634: PUSH
24635: LD_INT 8
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PPUSH
24652: CALL_OW 72
24656: ST_TO_ADDR
24657: GO 24660
24659: POP
// if i = 1 then
24660: LD_VAR 0 8
24664: PUSH
24665: LD_INT 1
24667: EQUAL
24668: IFFALSE 24779
// begin tmp := [ ] ;
24670: LD_ADDR_VAR 0 19
24674: PUSH
24675: EMPTY
24676: ST_TO_ADDR
// for j in f do
24677: LD_ADDR_VAR 0 9
24681: PUSH
24682: LD_VAR 0 12
24686: PUSH
24687: FOR_IN
24688: IFFALSE 24761
// if GetBType ( j ) = b_bunker then
24690: LD_VAR 0 9
24694: PPUSH
24695: CALL_OW 266
24699: PUSH
24700: LD_INT 32
24702: EQUAL
24703: IFFALSE 24730
// tmp := Insert ( tmp , 1 , j ) else
24705: LD_ADDR_VAR 0 19
24709: PUSH
24710: LD_VAR 0 19
24714: PPUSH
24715: LD_INT 1
24717: PPUSH
24718: LD_VAR 0 9
24722: PPUSH
24723: CALL_OW 2
24727: ST_TO_ADDR
24728: GO 24759
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24730: LD_ADDR_VAR 0 19
24734: PUSH
24735: LD_VAR 0 19
24739: PPUSH
24740: LD_VAR 0 19
24744: PUSH
24745: LD_INT 1
24747: PLUS
24748: PPUSH
24749: LD_VAR 0 9
24753: PPUSH
24754: CALL_OW 2
24758: ST_TO_ADDR
24759: GO 24687
24761: POP
24762: POP
// if tmp then
24763: LD_VAR 0 19
24767: IFFALSE 24779
// f := tmp ;
24769: LD_ADDR_VAR 0 12
24773: PUSH
24774: LD_VAR 0 19
24778: ST_TO_ADDR
// end ; x := personel [ i ] ;
24779: LD_ADDR_VAR 0 13
24783: PUSH
24784: LD_VAR 0 6
24788: PUSH
24789: LD_VAR 0 8
24793: ARRAY
24794: ST_TO_ADDR
// if x = - 1 then
24795: LD_VAR 0 13
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: EQUAL
24804: IFFALSE 25013
// begin for j in f do
24806: LD_ADDR_VAR 0 9
24810: PUSH
24811: LD_VAR 0 12
24815: PUSH
24816: FOR_IN
24817: IFFALSE 25009
// repeat InitHc ;
24819: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24823: LD_VAR 0 9
24827: PPUSH
24828: CALL_OW 266
24832: PUSH
24833: LD_INT 5
24835: EQUAL
24836: IFFALSE 24906
// begin if UnitsInside ( j ) < 3 then
24838: LD_VAR 0 9
24842: PPUSH
24843: CALL_OW 313
24847: PUSH
24848: LD_INT 3
24850: LESS
24851: IFFALSE 24887
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24853: LD_INT 0
24855: PPUSH
24856: LD_INT 5
24858: PUSH
24859: LD_INT 8
24861: PUSH
24862: LD_INT 9
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: PUSH
24870: LD_VAR 0 17
24874: ARRAY
24875: PPUSH
24876: LD_VAR 0 4
24880: PPUSH
24881: CALL_OW 380
24885: GO 24904
// PrepareHuman ( false , i , skill ) ;
24887: LD_INT 0
24889: PPUSH
24890: LD_VAR 0 8
24894: PPUSH
24895: LD_VAR 0 4
24899: PPUSH
24900: CALL_OW 380
// end else
24904: GO 24923
// PrepareHuman ( false , i , skill ) ;
24906: LD_INT 0
24908: PPUSH
24909: LD_VAR 0 8
24913: PPUSH
24914: LD_VAR 0 4
24918: PPUSH
24919: CALL_OW 380
// un := CreateHuman ;
24923: LD_ADDR_VAR 0 14
24927: PUSH
24928: CALL_OW 44
24932: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24933: LD_ADDR_VAR 0 7
24937: PUSH
24938: LD_VAR 0 7
24942: PPUSH
24943: LD_INT 1
24945: PPUSH
24946: LD_VAR 0 14
24950: PPUSH
24951: CALL_OW 2
24955: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24956: LD_VAR 0 14
24960: PPUSH
24961: LD_VAR 0 9
24965: PPUSH
24966: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24970: LD_VAR 0 9
24974: PPUSH
24975: CALL_OW 313
24979: PUSH
24980: LD_INT 6
24982: EQUAL
24983: PUSH
24984: LD_VAR 0 9
24988: PPUSH
24989: CALL_OW 266
24993: PUSH
24994: LD_INT 32
24996: PUSH
24997: LD_INT 31
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: IN
25004: OR
25005: IFFALSE 24819
25007: GO 24816
25009: POP
25010: POP
// end else
25011: GO 25393
// for j = 1 to x do
25013: LD_ADDR_VAR 0 9
25017: PUSH
25018: DOUBLE
25019: LD_INT 1
25021: DEC
25022: ST_TO_ADDR
25023: LD_VAR 0 13
25027: PUSH
25028: FOR_TO
25029: IFFALSE 25391
// begin InitHc ;
25031: CALL_OW 19
// if not f then
25035: LD_VAR 0 12
25039: NOT
25040: IFFALSE 25129
// begin PrepareHuman ( false , i , skill ) ;
25042: LD_INT 0
25044: PPUSH
25045: LD_VAR 0 8
25049: PPUSH
25050: LD_VAR 0 4
25054: PPUSH
25055: CALL_OW 380
// un := CreateHuman ;
25059: LD_ADDR_VAR 0 14
25063: PUSH
25064: CALL_OW 44
25068: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25069: LD_ADDR_VAR 0 7
25073: PUSH
25074: LD_VAR 0 7
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: LD_VAR 0 14
25086: PPUSH
25087: CALL_OW 2
25091: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25092: LD_VAR 0 14
25096: PPUSH
25097: LD_VAR 0 1
25101: PPUSH
25102: CALL_OW 250
25106: PPUSH
25107: LD_VAR 0 1
25111: PPUSH
25112: CALL_OW 251
25116: PPUSH
25117: LD_INT 10
25119: PPUSH
25120: LD_INT 0
25122: PPUSH
25123: CALL_OW 50
// continue ;
25127: GO 25028
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25129: LD_VAR 0 12
25133: PUSH
25134: LD_INT 1
25136: ARRAY
25137: PPUSH
25138: CALL_OW 313
25142: PUSH
25143: LD_VAR 0 12
25147: PUSH
25148: LD_INT 1
25150: ARRAY
25151: PPUSH
25152: CALL_OW 266
25156: PUSH
25157: LD_INT 32
25159: PUSH
25160: LD_INT 31
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: IN
25167: AND
25168: PUSH
25169: LD_VAR 0 12
25173: PUSH
25174: LD_INT 1
25176: ARRAY
25177: PPUSH
25178: CALL_OW 313
25182: PUSH
25183: LD_INT 6
25185: EQUAL
25186: OR
25187: IFFALSE 25207
// f := Delete ( f , 1 ) ;
25189: LD_ADDR_VAR 0 12
25193: PUSH
25194: LD_VAR 0 12
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: CALL_OW 3
25206: ST_TO_ADDR
// if not f then
25207: LD_VAR 0 12
25211: NOT
25212: IFFALSE 25230
// begin x := x + 2 ;
25214: LD_ADDR_VAR 0 13
25218: PUSH
25219: LD_VAR 0 13
25223: PUSH
25224: LD_INT 2
25226: PLUS
25227: ST_TO_ADDR
// continue ;
25228: GO 25028
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25230: LD_VAR 0 12
25234: PUSH
25235: LD_INT 1
25237: ARRAY
25238: PPUSH
25239: CALL_OW 266
25243: PUSH
25244: LD_INT 5
25246: EQUAL
25247: IFFALSE 25321
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25249: LD_VAR 0 12
25253: PUSH
25254: LD_INT 1
25256: ARRAY
25257: PPUSH
25258: CALL_OW 313
25262: PUSH
25263: LD_INT 3
25265: LESS
25266: IFFALSE 25302
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25268: LD_INT 0
25270: PPUSH
25271: LD_INT 5
25273: PUSH
25274: LD_INT 8
25276: PUSH
25277: LD_INT 9
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: LIST
25284: PUSH
25285: LD_VAR 0 17
25289: ARRAY
25290: PPUSH
25291: LD_VAR 0 4
25295: PPUSH
25296: CALL_OW 380
25300: GO 25319
// PrepareHuman ( false , i , skill ) ;
25302: LD_INT 0
25304: PPUSH
25305: LD_VAR 0 8
25309: PPUSH
25310: LD_VAR 0 4
25314: PPUSH
25315: CALL_OW 380
// end else
25319: GO 25338
// PrepareHuman ( false , i , skill ) ;
25321: LD_INT 0
25323: PPUSH
25324: LD_VAR 0 8
25328: PPUSH
25329: LD_VAR 0 4
25333: PPUSH
25334: CALL_OW 380
// un := CreateHuman ;
25338: LD_ADDR_VAR 0 14
25342: PUSH
25343: CALL_OW 44
25347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25348: LD_ADDR_VAR 0 7
25352: PUSH
25353: LD_VAR 0 7
25357: PPUSH
25358: LD_INT 1
25360: PPUSH
25361: LD_VAR 0 14
25365: PPUSH
25366: CALL_OW 2
25370: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25371: LD_VAR 0 14
25375: PPUSH
25376: LD_VAR 0 12
25380: PUSH
25381: LD_INT 1
25383: ARRAY
25384: PPUSH
25385: CALL_OW 52
// end ;
25389: GO 25028
25391: POP
25392: POP
// end ;
25393: GO 24330
25395: POP
25396: POP
// result := result ^ buildings ;
25397: LD_ADDR_VAR 0 7
25401: PUSH
25402: LD_VAR 0 7
25406: PUSH
25407: LD_VAR 0 18
25411: ADD
25412: ST_TO_ADDR
// end else
25413: GO 25556
// begin for i = 1 to personel do
25415: LD_ADDR_VAR 0 8
25419: PUSH
25420: DOUBLE
25421: LD_INT 1
25423: DEC
25424: ST_TO_ADDR
25425: LD_VAR 0 6
25429: PUSH
25430: FOR_TO
25431: IFFALSE 25554
// begin if i > 4 then
25433: LD_VAR 0 8
25437: PUSH
25438: LD_INT 4
25440: GREATER
25441: IFFALSE 25445
// break ;
25443: GO 25554
// x := personel [ i ] ;
25445: LD_ADDR_VAR 0 13
25449: PUSH
25450: LD_VAR 0 6
25454: PUSH
25455: LD_VAR 0 8
25459: ARRAY
25460: ST_TO_ADDR
// if x = - 1 then
25461: LD_VAR 0 13
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: EQUAL
25470: IFFALSE 25474
// continue ;
25472: GO 25430
// PrepareHuman ( false , i , skill ) ;
25474: LD_INT 0
25476: PPUSH
25477: LD_VAR 0 8
25481: PPUSH
25482: LD_VAR 0 4
25486: PPUSH
25487: CALL_OW 380
// un := CreateHuman ;
25491: LD_ADDR_VAR 0 14
25495: PUSH
25496: CALL_OW 44
25500: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25501: LD_VAR 0 14
25505: PPUSH
25506: LD_VAR 0 1
25510: PPUSH
25511: CALL_OW 250
25515: PPUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL_OW 251
25525: PPUSH
25526: LD_INT 10
25528: PPUSH
25529: LD_INT 0
25531: PPUSH
25532: CALL_OW 50
// result := result ^ un ;
25536: LD_ADDR_VAR 0 7
25540: PUSH
25541: LD_VAR 0 7
25545: PUSH
25546: LD_VAR 0 14
25550: ADD
25551: ST_TO_ADDR
// end ;
25552: GO 25430
25554: POP
25555: POP
// end ; end ;
25556: LD_VAR 0 7
25560: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25561: LD_INT 0
25563: PPUSH
25564: PPUSH
25565: PPUSH
25566: PPUSH
25567: PPUSH
25568: PPUSH
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
25575: PPUSH
25576: PPUSH
25577: PPUSH
25578: PPUSH
// result := false ;
25579: LD_ADDR_VAR 0 3
25583: PUSH
25584: LD_INT 0
25586: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25587: LD_VAR 0 1
25591: NOT
25592: PUSH
25593: LD_VAR 0 1
25597: PPUSH
25598: CALL_OW 266
25602: PUSH
25603: LD_INT 32
25605: PUSH
25606: LD_INT 33
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: IN
25613: NOT
25614: OR
25615: IFFALSE 25619
// exit ;
25617: GO 26728
// nat := GetNation ( tower ) ;
25619: LD_ADDR_VAR 0 12
25623: PUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: CALL_OW 248
25633: ST_TO_ADDR
// side := GetSide ( tower ) ;
25634: LD_ADDR_VAR 0 16
25638: PUSH
25639: LD_VAR 0 1
25643: PPUSH
25644: CALL_OW 255
25648: ST_TO_ADDR
// x := GetX ( tower ) ;
25649: LD_ADDR_VAR 0 10
25653: PUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 250
25663: ST_TO_ADDR
// y := GetY ( tower ) ;
25664: LD_ADDR_VAR 0 11
25668: PUSH
25669: LD_VAR 0 1
25673: PPUSH
25674: CALL_OW 251
25678: ST_TO_ADDR
// if not x or not y then
25679: LD_VAR 0 10
25683: NOT
25684: PUSH
25685: LD_VAR 0 11
25689: NOT
25690: OR
25691: IFFALSE 25695
// exit ;
25693: GO 26728
// weapon := 0 ;
25695: LD_ADDR_VAR 0 18
25699: PUSH
25700: LD_INT 0
25702: ST_TO_ADDR
// fac_list := [ ] ;
25703: LD_ADDR_VAR 0 17
25707: PUSH
25708: EMPTY
25709: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25710: LD_ADDR_VAR 0 6
25714: PUSH
25715: LD_VAR 0 1
25719: PPUSH
25720: CALL_OW 274
25724: PPUSH
25725: LD_VAR 0 2
25729: PPUSH
25730: LD_INT 0
25732: PPUSH
25733: CALL 23299 0 3
25737: PPUSH
25738: LD_INT 30
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PPUSH
25748: CALL_OW 72
25752: ST_TO_ADDR
// if not factories then
25753: LD_VAR 0 6
25757: NOT
25758: IFFALSE 25762
// exit ;
25760: GO 26728
// for i in factories do
25762: LD_ADDR_VAR 0 8
25766: PUSH
25767: LD_VAR 0 6
25771: PUSH
25772: FOR_IN
25773: IFFALSE 25798
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25775: LD_ADDR_VAR 0 17
25779: PUSH
25780: LD_VAR 0 17
25784: PUSH
25785: LD_VAR 0 8
25789: PPUSH
25790: CALL_OW 478
25794: UNION
25795: ST_TO_ADDR
25796: GO 25772
25798: POP
25799: POP
// if not fac_list then
25800: LD_VAR 0 17
25804: NOT
25805: IFFALSE 25809
// exit ;
25807: GO 26728
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25809: LD_ADDR_VAR 0 5
25813: PUSH
25814: LD_INT 4
25816: PUSH
25817: LD_INT 5
25819: PUSH
25820: LD_INT 9
25822: PUSH
25823: LD_INT 10
25825: PUSH
25826: LD_INT 6
25828: PUSH
25829: LD_INT 7
25831: PUSH
25832: LD_INT 11
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 27
25846: PUSH
25847: LD_INT 28
25849: PUSH
25850: LD_INT 26
25852: PUSH
25853: LD_INT 30
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 43
25864: PUSH
25865: LD_INT 44
25867: PUSH
25868: LD_INT 46
25870: PUSH
25871: LD_INT 45
25873: PUSH
25874: LD_INT 47
25876: PUSH
25877: LD_INT 49
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: PUSH
25893: LD_VAR 0 12
25897: ARRAY
25898: ST_TO_ADDR
// list := list isect fac_list ;
25899: LD_ADDR_VAR 0 5
25903: PUSH
25904: LD_VAR 0 5
25908: PUSH
25909: LD_VAR 0 17
25913: ISECT
25914: ST_TO_ADDR
// if not list then
25915: LD_VAR 0 5
25919: NOT
25920: IFFALSE 25924
// exit ;
25922: GO 26728
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25924: LD_VAR 0 12
25928: PUSH
25929: LD_INT 3
25931: EQUAL
25932: PUSH
25933: LD_INT 49
25935: PUSH
25936: LD_VAR 0 5
25940: IN
25941: AND
25942: PUSH
25943: LD_INT 31
25945: PPUSH
25946: LD_VAR 0 16
25950: PPUSH
25951: CALL_OW 321
25955: PUSH
25956: LD_INT 2
25958: EQUAL
25959: AND
25960: IFFALSE 26020
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25962: LD_INT 22
25964: PUSH
25965: LD_VAR 0 16
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 35
25976: PUSH
25977: LD_INT 49
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 91
25986: PUSH
25987: LD_VAR 0 1
25991: PUSH
25992: LD_INT 10
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL_OW 69
26009: NOT
26010: IFFALSE 26020
// weapon := ru_time_lapser ;
26012: LD_ADDR_VAR 0 18
26016: PUSH
26017: LD_INT 49
26019: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26020: LD_VAR 0 12
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: IN
26035: PUSH
26036: LD_INT 11
26038: PUSH
26039: LD_VAR 0 5
26043: IN
26044: PUSH
26045: LD_INT 30
26047: PUSH
26048: LD_VAR 0 5
26052: IN
26053: OR
26054: AND
26055: PUSH
26056: LD_INT 6
26058: PPUSH
26059: LD_VAR 0 16
26063: PPUSH
26064: CALL_OW 321
26068: PUSH
26069: LD_INT 2
26071: EQUAL
26072: AND
26073: IFFALSE 26238
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26075: LD_INT 22
26077: PUSH
26078: LD_VAR 0 16
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 35
26092: PUSH
26093: LD_INT 11
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 35
26102: PUSH
26103: LD_INT 30
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 91
26117: PUSH
26118: LD_VAR 0 1
26122: PUSH
26123: LD_INT 18
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: PPUSH
26136: CALL_OW 69
26140: NOT
26141: PUSH
26142: LD_INT 22
26144: PUSH
26145: LD_VAR 0 16
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 30
26159: PUSH
26160: LD_INT 32
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 30
26169: PUSH
26170: LD_INT 33
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 91
26184: PUSH
26185: LD_VAR 0 1
26189: PUSH
26190: LD_INT 12
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: PUSH
26203: EMPTY
26204: LIST
26205: PPUSH
26206: CALL_OW 69
26210: PUSH
26211: LD_INT 2
26213: GREATER
26214: AND
26215: IFFALSE 26238
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26217: LD_ADDR_VAR 0 18
26221: PUSH
26222: LD_INT 11
26224: PUSH
26225: LD_INT 30
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_VAR 0 12
26236: ARRAY
26237: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26238: LD_VAR 0 18
26242: NOT
26243: PUSH
26244: LD_INT 40
26246: PPUSH
26247: LD_VAR 0 16
26251: PPUSH
26252: CALL_OW 321
26256: PUSH
26257: LD_INT 2
26259: EQUAL
26260: AND
26261: PUSH
26262: LD_INT 7
26264: PUSH
26265: LD_VAR 0 5
26269: IN
26270: PUSH
26271: LD_INT 28
26273: PUSH
26274: LD_VAR 0 5
26278: IN
26279: OR
26280: PUSH
26281: LD_INT 45
26283: PUSH
26284: LD_VAR 0 5
26288: IN
26289: OR
26290: AND
26291: IFFALSE 26545
// begin hex := GetHexInfo ( x , y ) ;
26293: LD_ADDR_VAR 0 4
26297: PUSH
26298: LD_VAR 0 10
26302: PPUSH
26303: LD_VAR 0 11
26307: PPUSH
26308: CALL_OW 546
26312: ST_TO_ADDR
// if hex [ 1 ] then
26313: LD_VAR 0 4
26317: PUSH
26318: LD_INT 1
26320: ARRAY
26321: IFFALSE 26325
// exit ;
26323: GO 26728
// height := hex [ 2 ] ;
26325: LD_ADDR_VAR 0 15
26329: PUSH
26330: LD_VAR 0 4
26334: PUSH
26335: LD_INT 2
26337: ARRAY
26338: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26339: LD_ADDR_VAR 0 14
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: LD_INT 3
26352: PUSH
26353: LD_INT 5
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: ST_TO_ADDR
// for i in tmp do
26362: LD_ADDR_VAR 0 8
26366: PUSH
26367: LD_VAR 0 14
26371: PUSH
26372: FOR_IN
26373: IFFALSE 26543
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26375: LD_ADDR_VAR 0 9
26379: PUSH
26380: LD_VAR 0 10
26384: PPUSH
26385: LD_VAR 0 8
26389: PPUSH
26390: LD_INT 5
26392: PPUSH
26393: CALL_OW 272
26397: PUSH
26398: LD_VAR 0 11
26402: PPUSH
26403: LD_VAR 0 8
26407: PPUSH
26408: LD_INT 5
26410: PPUSH
26411: CALL_OW 273
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26420: LD_VAR 0 9
26424: PUSH
26425: LD_INT 1
26427: ARRAY
26428: PPUSH
26429: LD_VAR 0 9
26433: PUSH
26434: LD_INT 2
26436: ARRAY
26437: PPUSH
26438: CALL_OW 488
26442: IFFALSE 26541
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26444: LD_ADDR_VAR 0 4
26448: PUSH
26449: LD_VAR 0 9
26453: PUSH
26454: LD_INT 1
26456: ARRAY
26457: PPUSH
26458: LD_VAR 0 9
26462: PUSH
26463: LD_INT 2
26465: ARRAY
26466: PPUSH
26467: CALL_OW 546
26471: ST_TO_ADDR
// if hex [ 1 ] then
26472: LD_VAR 0 4
26476: PUSH
26477: LD_INT 1
26479: ARRAY
26480: IFFALSE 26484
// continue ;
26482: GO 26372
// h := hex [ 2 ] ;
26484: LD_ADDR_VAR 0 13
26488: PUSH
26489: LD_VAR 0 4
26493: PUSH
26494: LD_INT 2
26496: ARRAY
26497: ST_TO_ADDR
// if h + 7 < height then
26498: LD_VAR 0 13
26502: PUSH
26503: LD_INT 7
26505: PLUS
26506: PUSH
26507: LD_VAR 0 15
26511: LESS
26512: IFFALSE 26541
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26514: LD_ADDR_VAR 0 18
26518: PUSH
26519: LD_INT 7
26521: PUSH
26522: LD_INT 28
26524: PUSH
26525: LD_INT 45
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: PUSH
26533: LD_VAR 0 12
26537: ARRAY
26538: ST_TO_ADDR
// break ;
26539: GO 26543
// end ; end ; end ;
26541: GO 26372
26543: POP
26544: POP
// end ; if not weapon then
26545: LD_VAR 0 18
26549: NOT
26550: IFFALSE 26610
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26552: LD_ADDR_VAR 0 5
26556: PUSH
26557: LD_VAR 0 5
26561: PUSH
26562: LD_INT 11
26564: PUSH
26565: LD_INT 30
26567: PUSH
26568: LD_INT 49
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: DIFF
26576: ST_TO_ADDR
// if not list then
26577: LD_VAR 0 5
26581: NOT
26582: IFFALSE 26586
// exit ;
26584: GO 26728
// weapon := list [ rand ( 1 , list ) ] ;
26586: LD_ADDR_VAR 0 18
26590: PUSH
26591: LD_VAR 0 5
26595: PUSH
26596: LD_INT 1
26598: PPUSH
26599: LD_VAR 0 5
26603: PPUSH
26604: CALL_OW 12
26608: ARRAY
26609: ST_TO_ADDR
// end ; if weapon then
26610: LD_VAR 0 18
26614: IFFALSE 26728
// begin tmp := CostOfWeapon ( weapon ) ;
26616: LD_ADDR_VAR 0 14
26620: PUSH
26621: LD_VAR 0 18
26625: PPUSH
26626: CALL_OW 451
26630: ST_TO_ADDR
// j := GetBase ( tower ) ;
26631: LD_ADDR_VAR 0 9
26635: PUSH
26636: LD_VAR 0 1
26640: PPUSH
26641: CALL_OW 274
26645: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26646: LD_VAR 0 9
26650: PPUSH
26651: LD_INT 1
26653: PPUSH
26654: CALL_OW 275
26658: PUSH
26659: LD_VAR 0 14
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: GREATEREQUAL
26668: PUSH
26669: LD_VAR 0 9
26673: PPUSH
26674: LD_INT 2
26676: PPUSH
26677: CALL_OW 275
26681: PUSH
26682: LD_VAR 0 14
26686: PUSH
26687: LD_INT 2
26689: ARRAY
26690: GREATEREQUAL
26691: AND
26692: PUSH
26693: LD_VAR 0 9
26697: PPUSH
26698: LD_INT 3
26700: PPUSH
26701: CALL_OW 275
26705: PUSH
26706: LD_VAR 0 14
26710: PUSH
26711: LD_INT 3
26713: ARRAY
26714: GREATEREQUAL
26715: AND
26716: IFFALSE 26728
// result := weapon ;
26718: LD_ADDR_VAR 0 3
26722: PUSH
26723: LD_VAR 0 18
26727: ST_TO_ADDR
// end ; end ;
26728: LD_VAR 0 3
26732: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26733: LD_INT 0
26735: PPUSH
26736: PPUSH
// result := true ;
26737: LD_ADDR_VAR 0 3
26741: PUSH
26742: LD_INT 1
26744: ST_TO_ADDR
// if array1 = array2 then
26745: LD_VAR 0 1
26749: PUSH
26750: LD_VAR 0 2
26754: EQUAL
26755: IFFALSE 26815
// begin for i = 1 to array1 do
26757: LD_ADDR_VAR 0 4
26761: PUSH
26762: DOUBLE
26763: LD_INT 1
26765: DEC
26766: ST_TO_ADDR
26767: LD_VAR 0 1
26771: PUSH
26772: FOR_TO
26773: IFFALSE 26811
// if array1 [ i ] <> array2 [ i ] then
26775: LD_VAR 0 1
26779: PUSH
26780: LD_VAR 0 4
26784: ARRAY
26785: PUSH
26786: LD_VAR 0 2
26790: PUSH
26791: LD_VAR 0 4
26795: ARRAY
26796: NONEQUAL
26797: IFFALSE 26809
// begin result := false ;
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: LD_INT 0
26806: ST_TO_ADDR
// break ;
26807: GO 26811
// end ;
26809: GO 26772
26811: POP
26812: POP
// end else
26813: GO 26823
// result := false ;
26815: LD_ADDR_VAR 0 3
26819: PUSH
26820: LD_INT 0
26822: ST_TO_ADDR
// end ;
26823: LD_VAR 0 3
26827: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26828: LD_INT 0
26830: PPUSH
26831: PPUSH
// if not array1 or not array2 then
26832: LD_VAR 0 1
26836: NOT
26837: PUSH
26838: LD_VAR 0 2
26842: NOT
26843: OR
26844: IFFALSE 26848
// exit ;
26846: GO 26912
// result := true ;
26848: LD_ADDR_VAR 0 3
26852: PUSH
26853: LD_INT 1
26855: ST_TO_ADDR
// for i = 1 to array1 do
26856: LD_ADDR_VAR 0 4
26860: PUSH
26861: DOUBLE
26862: LD_INT 1
26864: DEC
26865: ST_TO_ADDR
26866: LD_VAR 0 1
26870: PUSH
26871: FOR_TO
26872: IFFALSE 26910
// if array1 [ i ] <> array2 [ i ] then
26874: LD_VAR 0 1
26878: PUSH
26879: LD_VAR 0 4
26883: ARRAY
26884: PUSH
26885: LD_VAR 0 2
26889: PUSH
26890: LD_VAR 0 4
26894: ARRAY
26895: NONEQUAL
26896: IFFALSE 26908
// begin result := false ;
26898: LD_ADDR_VAR 0 3
26902: PUSH
26903: LD_INT 0
26905: ST_TO_ADDR
// break ;
26906: GO 26910
// end ;
26908: GO 26871
26910: POP
26911: POP
// end ;
26912: LD_VAR 0 3
26916: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26917: LD_INT 0
26919: PPUSH
26920: PPUSH
26921: PPUSH
// pom := GetBase ( fac ) ;
26922: LD_ADDR_VAR 0 5
26926: PUSH
26927: LD_VAR 0 1
26931: PPUSH
26932: CALL_OW 274
26936: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26937: LD_ADDR_VAR 0 4
26941: PUSH
26942: LD_VAR 0 2
26946: PUSH
26947: LD_INT 1
26949: ARRAY
26950: PPUSH
26951: LD_VAR 0 2
26955: PUSH
26956: LD_INT 2
26958: ARRAY
26959: PPUSH
26960: LD_VAR 0 2
26964: PUSH
26965: LD_INT 3
26967: ARRAY
26968: PPUSH
26969: LD_VAR 0 2
26973: PUSH
26974: LD_INT 4
26976: ARRAY
26977: PPUSH
26978: CALL_OW 449
26982: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26983: LD_ADDR_VAR 0 3
26987: PUSH
26988: LD_VAR 0 5
26992: PPUSH
26993: LD_INT 1
26995: PPUSH
26996: CALL_OW 275
27000: PUSH
27001: LD_VAR 0 4
27005: PUSH
27006: LD_INT 1
27008: ARRAY
27009: GREATEREQUAL
27010: PUSH
27011: LD_VAR 0 5
27015: PPUSH
27016: LD_INT 2
27018: PPUSH
27019: CALL_OW 275
27023: PUSH
27024: LD_VAR 0 4
27028: PUSH
27029: LD_INT 2
27031: ARRAY
27032: GREATEREQUAL
27033: AND
27034: PUSH
27035: LD_VAR 0 5
27039: PPUSH
27040: LD_INT 3
27042: PPUSH
27043: CALL_OW 275
27047: PUSH
27048: LD_VAR 0 4
27052: PUSH
27053: LD_INT 3
27055: ARRAY
27056: GREATEREQUAL
27057: AND
27058: ST_TO_ADDR
// end ;
27059: LD_VAR 0 3
27063: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
27068: PPUSH
27069: PPUSH
// pom := GetBase ( building ) ;
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_VAR 0 1
27079: PPUSH
27080: CALL_OW 274
27084: ST_TO_ADDR
// if not pom then
27085: LD_VAR 0 3
27089: NOT
27090: IFFALSE 27094
// exit ;
27092: GO 27264
// btype := GetBType ( building ) ;
27094: LD_ADDR_VAR 0 5
27098: PUSH
27099: LD_VAR 0 1
27103: PPUSH
27104: CALL_OW 266
27108: ST_TO_ADDR
// if btype = b_armoury then
27109: LD_VAR 0 5
27113: PUSH
27114: LD_INT 4
27116: EQUAL
27117: IFFALSE 27127
// btype := b_barracks ;
27119: LD_ADDR_VAR 0 5
27123: PUSH
27124: LD_INT 5
27126: ST_TO_ADDR
// if btype = b_depot then
27127: LD_VAR 0 5
27131: PUSH
27132: LD_INT 0
27134: EQUAL
27135: IFFALSE 27145
// btype := b_warehouse ;
27137: LD_ADDR_VAR 0 5
27141: PUSH
27142: LD_INT 1
27144: ST_TO_ADDR
// if btype = b_workshop then
27145: LD_VAR 0 5
27149: PUSH
27150: LD_INT 2
27152: EQUAL
27153: IFFALSE 27163
// btype := b_factory ;
27155: LD_ADDR_VAR 0 5
27159: PUSH
27160: LD_INT 3
27162: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27163: LD_ADDR_VAR 0 4
27167: PUSH
27168: LD_VAR 0 5
27172: PPUSH
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL_OW 248
27182: PPUSH
27183: CALL_OW 450
27187: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27188: LD_ADDR_VAR 0 2
27192: PUSH
27193: LD_VAR 0 3
27197: PPUSH
27198: LD_INT 1
27200: PPUSH
27201: CALL_OW 275
27205: PUSH
27206: LD_VAR 0 4
27210: PUSH
27211: LD_INT 1
27213: ARRAY
27214: GREATEREQUAL
27215: PUSH
27216: LD_VAR 0 3
27220: PPUSH
27221: LD_INT 2
27223: PPUSH
27224: CALL_OW 275
27228: PUSH
27229: LD_VAR 0 4
27233: PUSH
27234: LD_INT 2
27236: ARRAY
27237: GREATEREQUAL
27238: AND
27239: PUSH
27240: LD_VAR 0 3
27244: PPUSH
27245: LD_INT 3
27247: PPUSH
27248: CALL_OW 275
27252: PUSH
27253: LD_VAR 0 4
27257: PUSH
27258: LD_INT 3
27260: ARRAY
27261: GREATEREQUAL
27262: AND
27263: ST_TO_ADDR
// end ;
27264: LD_VAR 0 2
27268: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27269: LD_INT 0
27271: PPUSH
27272: PPUSH
27273: PPUSH
// pom := GetBase ( building ) ;
27274: LD_ADDR_VAR 0 4
27278: PUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL_OW 274
27288: ST_TO_ADDR
// if not pom then
27289: LD_VAR 0 4
27293: NOT
27294: IFFALSE 27298
// exit ;
27296: GO 27399
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27298: LD_ADDR_VAR 0 5
27302: PUSH
27303: LD_VAR 0 2
27307: PPUSH
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL_OW 248
27317: PPUSH
27318: CALL_OW 450
27322: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_VAR 0 4
27332: PPUSH
27333: LD_INT 1
27335: PPUSH
27336: CALL_OW 275
27340: PUSH
27341: LD_VAR 0 5
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: GREATEREQUAL
27350: PUSH
27351: LD_VAR 0 4
27355: PPUSH
27356: LD_INT 2
27358: PPUSH
27359: CALL_OW 275
27363: PUSH
27364: LD_VAR 0 5
27368: PUSH
27369: LD_INT 2
27371: ARRAY
27372: GREATEREQUAL
27373: AND
27374: PUSH
27375: LD_VAR 0 4
27379: PPUSH
27380: LD_INT 3
27382: PPUSH
27383: CALL_OW 275
27387: PUSH
27388: LD_VAR 0 5
27392: PUSH
27393: LD_INT 3
27395: ARRAY
27396: GREATEREQUAL
27397: AND
27398: ST_TO_ADDR
// end ;
27399: LD_VAR 0 3
27403: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27404: LD_INT 0
27406: PPUSH
27407: PPUSH
27408: PPUSH
27409: PPUSH
27410: PPUSH
27411: PPUSH
27412: PPUSH
27413: PPUSH
27414: PPUSH
27415: PPUSH
27416: PPUSH
// result := false ;
27417: LD_ADDR_VAR 0 8
27421: PUSH
27422: LD_INT 0
27424: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27425: LD_VAR 0 5
27429: NOT
27430: PUSH
27431: LD_VAR 0 1
27435: NOT
27436: OR
27437: PUSH
27438: LD_VAR 0 2
27442: NOT
27443: OR
27444: PUSH
27445: LD_VAR 0 3
27449: NOT
27450: OR
27451: IFFALSE 27455
// exit ;
27453: GO 28269
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27455: LD_ADDR_VAR 0 14
27459: PUSH
27460: LD_VAR 0 1
27464: PPUSH
27465: LD_VAR 0 2
27469: PPUSH
27470: LD_VAR 0 3
27474: PPUSH
27475: LD_VAR 0 4
27479: PPUSH
27480: LD_VAR 0 5
27484: PUSH
27485: LD_INT 1
27487: ARRAY
27488: PPUSH
27489: CALL_OW 248
27493: PPUSH
27494: LD_INT 0
27496: PPUSH
27497: CALL 29522 0 6
27501: ST_TO_ADDR
// if not hexes then
27502: LD_VAR 0 14
27506: NOT
27507: IFFALSE 27511
// exit ;
27509: GO 28269
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27511: LD_ADDR_VAR 0 17
27515: PUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: LD_INT 22
27523: PUSH
27524: LD_VAR 0 13
27528: PPUSH
27529: CALL_OW 255
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: LD_INT 30
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 30
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PPUSH
27570: CALL_OW 72
27574: ST_TO_ADDR
// for i = 1 to hexes do
27575: LD_ADDR_VAR 0 9
27579: PUSH
27580: DOUBLE
27581: LD_INT 1
27583: DEC
27584: ST_TO_ADDR
27585: LD_VAR 0 14
27589: PUSH
27590: FOR_TO
27591: IFFALSE 28267
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27593: LD_ADDR_VAR 0 13
27597: PUSH
27598: LD_VAR 0 14
27602: PUSH
27603: LD_VAR 0 9
27607: ARRAY
27608: PUSH
27609: LD_INT 1
27611: ARRAY
27612: PPUSH
27613: LD_VAR 0 14
27617: PUSH
27618: LD_VAR 0 9
27622: ARRAY
27623: PUSH
27624: LD_INT 2
27626: ARRAY
27627: PPUSH
27628: CALL_OW 428
27632: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27633: LD_VAR 0 14
27637: PUSH
27638: LD_VAR 0 9
27642: ARRAY
27643: PUSH
27644: LD_INT 1
27646: ARRAY
27647: PPUSH
27648: LD_VAR 0 14
27652: PUSH
27653: LD_VAR 0 9
27657: ARRAY
27658: PUSH
27659: LD_INT 2
27661: ARRAY
27662: PPUSH
27663: CALL_OW 351
27667: PUSH
27668: LD_VAR 0 14
27672: PUSH
27673: LD_VAR 0 9
27677: ARRAY
27678: PUSH
27679: LD_INT 1
27681: ARRAY
27682: PPUSH
27683: LD_VAR 0 14
27687: PUSH
27688: LD_VAR 0 9
27692: ARRAY
27693: PUSH
27694: LD_INT 2
27696: ARRAY
27697: PPUSH
27698: CALL_OW 488
27702: NOT
27703: OR
27704: PUSH
27705: LD_VAR 0 13
27709: PPUSH
27710: CALL_OW 247
27714: PUSH
27715: LD_INT 3
27717: EQUAL
27718: OR
27719: IFFALSE 27725
// exit ;
27721: POP
27722: POP
27723: GO 28269
// if not tmp then
27725: LD_VAR 0 13
27729: NOT
27730: IFFALSE 27734
// continue ;
27732: GO 27590
// result := true ;
27734: LD_ADDR_VAR 0 8
27738: PUSH
27739: LD_INT 1
27741: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27742: LD_VAR 0 6
27746: PUSH
27747: LD_VAR 0 13
27751: PPUSH
27752: CALL_OW 247
27756: PUSH
27757: LD_INT 2
27759: EQUAL
27760: AND
27761: PUSH
27762: LD_VAR 0 13
27766: PPUSH
27767: CALL_OW 263
27771: PUSH
27772: LD_INT 1
27774: EQUAL
27775: AND
27776: IFFALSE 27940
// begin if IsDrivenBy ( tmp ) then
27778: LD_VAR 0 13
27782: PPUSH
27783: CALL_OW 311
27787: IFFALSE 27791
// continue ;
27789: GO 27590
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27791: LD_VAR 0 6
27795: PPUSH
27796: LD_INT 3
27798: PUSH
27799: LD_INT 60
27801: PUSH
27802: EMPTY
27803: LIST
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: PUSH
27812: LD_INT 55
27814: PUSH
27815: EMPTY
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 72
27830: IFFALSE 27938
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27832: LD_ADDR_VAR 0 18
27836: PUSH
27837: LD_VAR 0 6
27841: PPUSH
27842: LD_INT 3
27844: PUSH
27845: LD_INT 60
27847: PUSH
27848: EMPTY
27849: LIST
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 3
27857: PUSH
27858: LD_INT 55
27860: PUSH
27861: EMPTY
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PPUSH
27872: CALL_OW 72
27876: PUSH
27877: LD_INT 1
27879: ARRAY
27880: ST_TO_ADDR
// if IsInUnit ( driver ) then
27881: LD_VAR 0 18
27885: PPUSH
27886: CALL_OW 310
27890: IFFALSE 27901
// ComExit ( driver ) ;
27892: LD_VAR 0 18
27896: PPUSH
27897: CALL 53303 0 1
// AddComEnterUnit ( driver , tmp ) ;
27901: LD_VAR 0 18
27905: PPUSH
27906: LD_VAR 0 13
27910: PPUSH
27911: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27915: LD_VAR 0 18
27919: PPUSH
27920: LD_VAR 0 7
27924: PPUSH
27925: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27929: LD_VAR 0 18
27933: PPUSH
27934: CALL_OW 181
// end ; continue ;
27938: GO 27590
// end ; if not cleaners or not tmp in cleaners then
27940: LD_VAR 0 6
27944: NOT
27945: PUSH
27946: LD_VAR 0 13
27950: PUSH
27951: LD_VAR 0 6
27955: IN
27956: NOT
27957: OR
27958: IFFALSE 28265
// begin if dep then
27960: LD_VAR 0 17
27964: IFFALSE 28100
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27966: LD_ADDR_VAR 0 16
27970: PUSH
27971: LD_VAR 0 17
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: PPUSH
27980: CALL_OW 250
27984: PPUSH
27985: LD_VAR 0 17
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: PPUSH
27994: CALL_OW 254
27998: PPUSH
27999: LD_INT 5
28001: PPUSH
28002: CALL_OW 272
28006: PUSH
28007: LD_VAR 0 17
28011: PUSH
28012: LD_INT 1
28014: ARRAY
28015: PPUSH
28016: CALL_OW 251
28020: PPUSH
28021: LD_VAR 0 17
28025: PUSH
28026: LD_INT 1
28028: ARRAY
28029: PPUSH
28030: CALL_OW 254
28034: PPUSH
28035: LD_INT 5
28037: PPUSH
28038: CALL_OW 273
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28047: LD_VAR 0 16
28051: PUSH
28052: LD_INT 1
28054: ARRAY
28055: PPUSH
28056: LD_VAR 0 16
28060: PUSH
28061: LD_INT 2
28063: ARRAY
28064: PPUSH
28065: CALL_OW 488
28069: IFFALSE 28100
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28071: LD_VAR 0 13
28075: PPUSH
28076: LD_VAR 0 16
28080: PUSH
28081: LD_INT 1
28083: ARRAY
28084: PPUSH
28085: LD_VAR 0 16
28089: PUSH
28090: LD_INT 2
28092: ARRAY
28093: PPUSH
28094: CALL_OW 111
// continue ;
28098: GO 27590
// end ; end ; r := GetDir ( tmp ) ;
28100: LD_ADDR_VAR 0 15
28104: PUSH
28105: LD_VAR 0 13
28109: PPUSH
28110: CALL_OW 254
28114: ST_TO_ADDR
// if r = 5 then
28115: LD_VAR 0 15
28119: PUSH
28120: LD_INT 5
28122: EQUAL
28123: IFFALSE 28133
// r := 0 ;
28125: LD_ADDR_VAR 0 15
28129: PUSH
28130: LD_INT 0
28132: ST_TO_ADDR
// for j = r to 5 do
28133: LD_ADDR_VAR 0 10
28137: PUSH
28138: DOUBLE
28139: LD_VAR 0 15
28143: DEC
28144: ST_TO_ADDR
28145: LD_INT 5
28147: PUSH
28148: FOR_TO
28149: IFFALSE 28263
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28151: LD_ADDR_VAR 0 11
28155: PUSH
28156: LD_VAR 0 13
28160: PPUSH
28161: CALL_OW 250
28165: PPUSH
28166: LD_VAR 0 10
28170: PPUSH
28171: LD_INT 2
28173: PPUSH
28174: CALL_OW 272
28178: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28179: LD_ADDR_VAR 0 12
28183: PUSH
28184: LD_VAR 0 13
28188: PPUSH
28189: CALL_OW 251
28193: PPUSH
28194: LD_VAR 0 10
28198: PPUSH
28199: LD_INT 2
28201: PPUSH
28202: CALL_OW 273
28206: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28207: LD_VAR 0 11
28211: PPUSH
28212: LD_VAR 0 12
28216: PPUSH
28217: CALL_OW 488
28221: PUSH
28222: LD_VAR 0 11
28226: PPUSH
28227: LD_VAR 0 12
28231: PPUSH
28232: CALL_OW 428
28236: NOT
28237: AND
28238: IFFALSE 28261
// begin ComMoveXY ( tmp , _x , _y ) ;
28240: LD_VAR 0 13
28244: PPUSH
28245: LD_VAR 0 11
28249: PPUSH
28250: LD_VAR 0 12
28254: PPUSH
28255: CALL_OW 111
// break ;
28259: GO 28263
// end ; end ;
28261: GO 28148
28263: POP
28264: POP
// end ; end ;
28265: GO 27590
28267: POP
28268: POP
// end ;
28269: LD_VAR 0 8
28273: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28274: LD_INT 0
28276: PPUSH
// result := true ;
28277: LD_ADDR_VAR 0 3
28281: PUSH
28282: LD_INT 1
28284: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28285: LD_VAR 0 2
28289: PUSH
28290: LD_INT 24
28292: DOUBLE
28293: EQUAL
28294: IFTRUE 28304
28296: LD_INT 33
28298: DOUBLE
28299: EQUAL
28300: IFTRUE 28304
28302: GO 28329
28304: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28305: LD_ADDR_VAR 0 3
28309: PUSH
28310: LD_INT 32
28312: PPUSH
28313: LD_VAR 0 1
28317: PPUSH
28318: CALL_OW 321
28322: PUSH
28323: LD_INT 2
28325: EQUAL
28326: ST_TO_ADDR
28327: GO 28645
28329: LD_INT 20
28331: DOUBLE
28332: EQUAL
28333: IFTRUE 28337
28335: GO 28362
28337: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28338: LD_ADDR_VAR 0 3
28342: PUSH
28343: LD_INT 6
28345: PPUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 321
28355: PUSH
28356: LD_INT 2
28358: EQUAL
28359: ST_TO_ADDR
28360: GO 28645
28362: LD_INT 22
28364: DOUBLE
28365: EQUAL
28366: IFTRUE 28376
28368: LD_INT 36
28370: DOUBLE
28371: EQUAL
28372: IFTRUE 28376
28374: GO 28401
28376: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28377: LD_ADDR_VAR 0 3
28381: PUSH
28382: LD_INT 15
28384: PPUSH
28385: LD_VAR 0 1
28389: PPUSH
28390: CALL_OW 321
28394: PUSH
28395: LD_INT 2
28397: EQUAL
28398: ST_TO_ADDR
28399: GO 28645
28401: LD_INT 30
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28434
28409: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28410: LD_ADDR_VAR 0 3
28414: PUSH
28415: LD_INT 20
28417: PPUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 321
28427: PUSH
28428: LD_INT 2
28430: EQUAL
28431: ST_TO_ADDR
28432: GO 28645
28434: LD_INT 28
28436: DOUBLE
28437: EQUAL
28438: IFTRUE 28448
28440: LD_INT 21
28442: DOUBLE
28443: EQUAL
28444: IFTRUE 28448
28446: GO 28473
28448: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28449: LD_ADDR_VAR 0 3
28453: PUSH
28454: LD_INT 21
28456: PPUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL_OW 321
28466: PUSH
28467: LD_INT 2
28469: EQUAL
28470: ST_TO_ADDR
28471: GO 28645
28473: LD_INT 16
28475: DOUBLE
28476: EQUAL
28477: IFTRUE 28481
28479: GO 28506
28481: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28482: LD_ADDR_VAR 0 3
28486: PUSH
28487: LD_INT 84
28489: PPUSH
28490: LD_VAR 0 1
28494: PPUSH
28495: CALL_OW 321
28499: PUSH
28500: LD_INT 2
28502: EQUAL
28503: ST_TO_ADDR
28504: GO 28645
28506: LD_INT 19
28508: DOUBLE
28509: EQUAL
28510: IFTRUE 28520
28512: LD_INT 23
28514: DOUBLE
28515: EQUAL
28516: IFTRUE 28520
28518: GO 28545
28520: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28521: LD_ADDR_VAR 0 3
28525: PUSH
28526: LD_INT 83
28528: PPUSH
28529: LD_VAR 0 1
28533: PPUSH
28534: CALL_OW 321
28538: PUSH
28539: LD_INT 2
28541: EQUAL
28542: ST_TO_ADDR
28543: GO 28645
28545: LD_INT 17
28547: DOUBLE
28548: EQUAL
28549: IFTRUE 28553
28551: GO 28578
28553: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28554: LD_ADDR_VAR 0 3
28558: PUSH
28559: LD_INT 39
28561: PPUSH
28562: LD_VAR 0 1
28566: PPUSH
28567: CALL_OW 321
28571: PUSH
28572: LD_INT 2
28574: EQUAL
28575: ST_TO_ADDR
28576: GO 28645
28578: LD_INT 18
28580: DOUBLE
28581: EQUAL
28582: IFTRUE 28586
28584: GO 28611
28586: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28587: LD_ADDR_VAR 0 3
28591: PUSH
28592: LD_INT 40
28594: PPUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 321
28604: PUSH
28605: LD_INT 2
28607: EQUAL
28608: ST_TO_ADDR
28609: GO 28645
28611: LD_INT 27
28613: DOUBLE
28614: EQUAL
28615: IFTRUE 28619
28617: GO 28644
28619: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28620: LD_ADDR_VAR 0 3
28624: PUSH
28625: LD_INT 35
28627: PPUSH
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 321
28637: PUSH
28638: LD_INT 2
28640: EQUAL
28641: ST_TO_ADDR
28642: GO 28645
28644: POP
// end ;
28645: LD_VAR 0 3
28649: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28650: LD_INT 0
28652: PPUSH
28653: PPUSH
28654: PPUSH
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
// result := false ;
28663: LD_ADDR_VAR 0 6
28667: PUSH
28668: LD_INT 0
28670: ST_TO_ADDR
// if btype = b_depot then
28671: LD_VAR 0 2
28675: PUSH
28676: LD_INT 0
28678: EQUAL
28679: IFFALSE 28691
// begin result := true ;
28681: LD_ADDR_VAR 0 6
28685: PUSH
28686: LD_INT 1
28688: ST_TO_ADDR
// exit ;
28689: GO 29517
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28691: LD_VAR 0 1
28695: NOT
28696: PUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL_OW 266
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: IN
28717: NOT
28718: OR
28719: PUSH
28720: LD_VAR 0 2
28724: NOT
28725: OR
28726: PUSH
28727: LD_VAR 0 5
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: LD_INT 5
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: IN
28758: NOT
28759: OR
28760: PUSH
28761: LD_VAR 0 3
28765: PPUSH
28766: LD_VAR 0 4
28770: PPUSH
28771: CALL_OW 488
28775: NOT
28776: OR
28777: IFFALSE 28781
// exit ;
28779: GO 29517
// side := GetSide ( depot ) ;
28781: LD_ADDR_VAR 0 9
28785: PUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 255
28795: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28796: LD_VAR 0 9
28800: PPUSH
28801: LD_VAR 0 2
28805: PPUSH
28806: CALL 28274 0 2
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 29517
// pom := GetBase ( depot ) ;
28815: LD_ADDR_VAR 0 10
28819: PUSH
28820: LD_VAR 0 1
28824: PPUSH
28825: CALL_OW 274
28829: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28830: LD_ADDR_VAR 0 11
28834: PUSH
28835: LD_VAR 0 2
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 248
28849: PPUSH
28850: CALL_OW 450
28854: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28855: LD_VAR 0 10
28859: PPUSH
28860: LD_INT 1
28862: PPUSH
28863: CALL_OW 275
28867: PUSH
28868: LD_VAR 0 11
28872: PUSH
28873: LD_INT 1
28875: ARRAY
28876: GREATEREQUAL
28877: PUSH
28878: LD_VAR 0 10
28882: PPUSH
28883: LD_INT 2
28885: PPUSH
28886: CALL_OW 275
28890: PUSH
28891: LD_VAR 0 11
28895: PUSH
28896: LD_INT 2
28898: ARRAY
28899: GREATEREQUAL
28900: AND
28901: PUSH
28902: LD_VAR 0 10
28906: PPUSH
28907: LD_INT 3
28909: PPUSH
28910: CALL_OW 275
28914: PUSH
28915: LD_VAR 0 11
28919: PUSH
28920: LD_INT 3
28922: ARRAY
28923: GREATEREQUAL
28924: AND
28925: NOT
28926: IFFALSE 28930
// exit ;
28928: GO 29517
// if GetBType ( depot ) = b_depot then
28930: LD_VAR 0 1
28934: PPUSH
28935: CALL_OW 266
28939: PUSH
28940: LD_INT 0
28942: EQUAL
28943: IFFALSE 28955
// dist := 28 else
28945: LD_ADDR_VAR 0 14
28949: PUSH
28950: LD_INT 28
28952: ST_TO_ADDR
28953: GO 28963
// dist := 36 ;
28955: LD_ADDR_VAR 0 14
28959: PUSH
28960: LD_INT 36
28962: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28963: LD_VAR 0 1
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: LD_VAR 0 4
28977: PPUSH
28978: CALL_OW 297
28982: PUSH
28983: LD_VAR 0 14
28987: GREATER
28988: IFFALSE 28992
// exit ;
28990: GO 29517
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28992: LD_ADDR_VAR 0 12
28996: PUSH
28997: LD_VAR 0 2
29001: PPUSH
29002: LD_VAR 0 3
29006: PPUSH
29007: LD_VAR 0 4
29011: PPUSH
29012: LD_VAR 0 5
29016: PPUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 248
29026: PPUSH
29027: LD_INT 0
29029: PPUSH
29030: CALL 29522 0 6
29034: ST_TO_ADDR
// if not hexes then
29035: LD_VAR 0 12
29039: NOT
29040: IFFALSE 29044
// exit ;
29042: GO 29517
// hex := GetHexInfo ( x , y ) ;
29044: LD_ADDR_VAR 0 15
29048: PUSH
29049: LD_VAR 0 3
29053: PPUSH
29054: LD_VAR 0 4
29058: PPUSH
29059: CALL_OW 546
29063: ST_TO_ADDR
// if hex [ 1 ] then
29064: LD_VAR 0 15
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: IFFALSE 29076
// exit ;
29074: GO 29517
// height := hex [ 2 ] ;
29076: LD_ADDR_VAR 0 13
29080: PUSH
29081: LD_VAR 0 15
29085: PUSH
29086: LD_INT 2
29088: ARRAY
29089: ST_TO_ADDR
// for i = 1 to hexes do
29090: LD_ADDR_VAR 0 7
29094: PUSH
29095: DOUBLE
29096: LD_INT 1
29098: DEC
29099: ST_TO_ADDR
29100: LD_VAR 0 12
29104: PUSH
29105: FOR_TO
29106: IFFALSE 29436
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29108: LD_VAR 0 12
29112: PUSH
29113: LD_VAR 0 7
29117: ARRAY
29118: PUSH
29119: LD_INT 1
29121: ARRAY
29122: PPUSH
29123: LD_VAR 0 12
29127: PUSH
29128: LD_VAR 0 7
29132: ARRAY
29133: PUSH
29134: LD_INT 2
29136: ARRAY
29137: PPUSH
29138: CALL_OW 488
29142: NOT
29143: PUSH
29144: LD_VAR 0 12
29148: PUSH
29149: LD_VAR 0 7
29153: ARRAY
29154: PUSH
29155: LD_INT 1
29157: ARRAY
29158: PPUSH
29159: LD_VAR 0 12
29163: PUSH
29164: LD_VAR 0 7
29168: ARRAY
29169: PUSH
29170: LD_INT 2
29172: ARRAY
29173: PPUSH
29174: CALL_OW 428
29178: PUSH
29179: LD_INT 0
29181: GREATER
29182: OR
29183: PUSH
29184: LD_VAR 0 12
29188: PUSH
29189: LD_VAR 0 7
29193: ARRAY
29194: PUSH
29195: LD_INT 1
29197: ARRAY
29198: PPUSH
29199: LD_VAR 0 12
29203: PUSH
29204: LD_VAR 0 7
29208: ARRAY
29209: PUSH
29210: LD_INT 2
29212: ARRAY
29213: PPUSH
29214: CALL_OW 351
29218: OR
29219: IFFALSE 29225
// exit ;
29221: POP
29222: POP
29223: GO 29517
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29225: LD_ADDR_VAR 0 8
29229: PUSH
29230: LD_VAR 0 12
29234: PUSH
29235: LD_VAR 0 7
29239: ARRAY
29240: PUSH
29241: LD_INT 1
29243: ARRAY
29244: PPUSH
29245: LD_VAR 0 12
29249: PUSH
29250: LD_VAR 0 7
29254: ARRAY
29255: PUSH
29256: LD_INT 2
29258: ARRAY
29259: PPUSH
29260: CALL_OW 546
29264: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29265: LD_VAR 0 8
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PUSH
29274: LD_VAR 0 8
29278: PUSH
29279: LD_INT 2
29281: ARRAY
29282: PUSH
29283: LD_VAR 0 13
29287: PUSH
29288: LD_INT 2
29290: PLUS
29291: GREATER
29292: OR
29293: PUSH
29294: LD_VAR 0 8
29298: PUSH
29299: LD_INT 2
29301: ARRAY
29302: PUSH
29303: LD_VAR 0 13
29307: PUSH
29308: LD_INT 2
29310: MINUS
29311: LESS
29312: OR
29313: PUSH
29314: LD_VAR 0 8
29318: PUSH
29319: LD_INT 3
29321: ARRAY
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 8
29328: PUSH
29329: LD_INT 9
29331: PUSH
29332: LD_INT 10
29334: PUSH
29335: LD_INT 11
29337: PUSH
29338: LD_INT 12
29340: PUSH
29341: LD_INT 13
29343: PUSH
29344: LD_INT 16
29346: PUSH
29347: LD_INT 17
29349: PUSH
29350: LD_INT 18
29352: PUSH
29353: LD_INT 19
29355: PUSH
29356: LD_INT 20
29358: PUSH
29359: LD_INT 21
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: IN
29377: NOT
29378: OR
29379: PUSH
29380: LD_VAR 0 8
29384: PUSH
29385: LD_INT 5
29387: ARRAY
29388: NOT
29389: OR
29390: PUSH
29391: LD_VAR 0 8
29395: PUSH
29396: LD_INT 6
29398: ARRAY
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 7
29408: PUSH
29409: LD_INT 9
29411: PUSH
29412: LD_INT 10
29414: PUSH
29415: LD_INT 11
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: IN
29426: NOT
29427: OR
29428: IFFALSE 29434
// exit ;
29430: POP
29431: POP
29432: GO 29517
// end ;
29434: GO 29105
29436: POP
29437: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29438: LD_VAR 0 9
29442: PPUSH
29443: LD_VAR 0 3
29447: PPUSH
29448: LD_VAR 0 4
29452: PPUSH
29453: LD_INT 20
29455: PPUSH
29456: CALL 21440 0 4
29460: PUSH
29461: LD_INT 4
29463: ARRAY
29464: IFFALSE 29468
// exit ;
29466: GO 29517
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29468: LD_VAR 0 2
29472: PUSH
29473: LD_INT 29
29475: PUSH
29476: LD_INT 30
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: IN
29483: PUSH
29484: LD_VAR 0 3
29488: PPUSH
29489: LD_VAR 0 4
29493: PPUSH
29494: LD_VAR 0 9
29498: PPUSH
29499: CALL_OW 440
29503: NOT
29504: AND
29505: IFFALSE 29509
// exit ;
29507: GO 29517
// result := true ;
29509: LD_ADDR_VAR 0 6
29513: PUSH
29514: LD_INT 1
29516: ST_TO_ADDR
// end ;
29517: LD_VAR 0 6
29521: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29522: LD_INT 0
29524: PPUSH
29525: PPUSH
29526: PPUSH
29527: PPUSH
29528: PPUSH
29529: PPUSH
29530: PPUSH
29531: PPUSH
29532: PPUSH
29533: PPUSH
29534: PPUSH
29535: PPUSH
29536: PPUSH
29537: PPUSH
29538: PPUSH
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
29550: PPUSH
29551: PPUSH
29552: PPUSH
29553: PPUSH
29554: PPUSH
29555: PPUSH
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
29566: PPUSH
29567: PPUSH
29568: PPUSH
29569: PPUSH
29570: PPUSH
29571: PPUSH
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
29576: PPUSH
29577: PPUSH
29578: PPUSH
29579: PPUSH
29580: PPUSH
29581: PPUSH
// result = [ ] ;
29582: LD_ADDR_VAR 0 7
29586: PUSH
29587: EMPTY
29588: ST_TO_ADDR
// temp_list = [ ] ;
29589: LD_ADDR_VAR 0 9
29593: PUSH
29594: EMPTY
29595: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29596: LD_VAR 0 4
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: LD_INT 4
29615: PUSH
29616: LD_INT 5
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: IN
29627: NOT
29628: PUSH
29629: LD_VAR 0 1
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: IN
29644: PUSH
29645: LD_VAR 0 5
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: LD_INT 2
29655: PUSH
29656: LD_INT 3
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: LIST
29663: IN
29664: NOT
29665: AND
29666: OR
29667: IFFALSE 29671
// exit ;
29669: GO 48062
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29671: LD_VAR 0 1
29675: PUSH
29676: LD_INT 6
29678: PUSH
29679: LD_INT 7
29681: PUSH
29682: LD_INT 8
29684: PUSH
29685: LD_INT 13
29687: PUSH
29688: LD_INT 12
29690: PUSH
29691: LD_INT 15
29693: PUSH
29694: LD_INT 11
29696: PUSH
29697: LD_INT 14
29699: PUSH
29700: LD_INT 10
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: IN
29714: IFFALSE 29724
// btype = b_lab ;
29716: LD_ADDR_VAR 0 1
29720: PUSH
29721: LD_INT 6
29723: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29724: LD_VAR 0 6
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: IN
29743: NOT
29744: PUSH
29745: LD_VAR 0 1
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: LD_INT 2
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: LD_INT 6
29764: PUSH
29765: LD_INT 36
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: LD_INT 5
29773: PUSH
29774: LD_INT 31
29776: PUSH
29777: LD_INT 32
29779: PUSH
29780: LD_INT 33
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: IN
29796: NOT
29797: PUSH
29798: LD_VAR 0 6
29802: PUSH
29803: LD_INT 1
29805: EQUAL
29806: AND
29807: OR
29808: PUSH
29809: LD_VAR 0 1
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: IN
29824: NOT
29825: PUSH
29826: LD_VAR 0 6
29830: PUSH
29831: LD_INT 2
29833: EQUAL
29834: AND
29835: OR
29836: IFFALSE 29846
// mode = 0 ;
29838: LD_ADDR_VAR 0 6
29842: PUSH
29843: LD_INT 0
29845: ST_TO_ADDR
// case mode of 0 :
29846: LD_VAR 0 6
29850: PUSH
29851: LD_INT 0
29853: DOUBLE
29854: EQUAL
29855: IFTRUE 29859
29857: GO 41312
29859: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29860: LD_ADDR_VAR 0 11
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: LD_INT 2
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 2
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 3
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 3
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30053: LD_ADDR_VAR 0 12
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 3
30210: NEG
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 3
30221: NEG
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30249: LD_ADDR_VAR 0 13
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: LD_INT 2
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: NEG
30397: PUSH
30398: LD_INT 3
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 3
30408: NEG
30409: PUSH
30410: LD_INT 2
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 3
30420: NEG
30421: PUSH
30422: LD_INT 3
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30448: LD_ADDR_VAR 0 14
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 3
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: LD_INT 3
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30644: LD_ADDR_VAR 0 15
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: NEG
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 1
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 2
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: NEG
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: LD_INT 1
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30837: LD_ADDR_VAR 0 16
30841: PUSH
30842: LD_INT 0
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: LD_INT 2
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: NEG
30973: PUSH
30974: LD_INT 2
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 3
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: PUSH
31005: LD_INT 3
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31030: LD_ADDR_VAR 0 17
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31260: LD_ADDR_VAR 0 18
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: LD_INT 2
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: LD_INT 2
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: NEG
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31490: LD_ADDR_VAR 0 19
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31720: LD_ADDR_VAR 0 20
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: LD_INT 2
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: NEG
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31950: LD_ADDR_VAR 0 21
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: NEG
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32180: LD_ADDR_VAR 0 22
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 2
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: NEG
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32410: LD_ADDR_VAR 0 23
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: LD_INT 2
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 3
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32690: LD_ADDR_VAR 0 24
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: LD_INT 2
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 3
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: LD_INT 2
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32966: LD_ADDR_VAR 0 25
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33240: LD_ADDR_VAR 0 26
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: NEG
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: LD_INT 2
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 2
33482: NEG
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33516: LD_ADDR_VAR 0 27
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 2
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 2
33715: NEG
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 2
33738: NEG
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 3
33761: NEG
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33796: LD_ADDR_VAR 0 28
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: LD_INT 2
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: LD_INT 2
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: LD_INT 3
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 3
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 3
34031: NEG
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 3
34043: NEG
34044: PUSH
34045: LD_INT 2
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34078: LD_ADDR_VAR 0 29
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: NEG
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 2
34244: NEG
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: LD_INT 2
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: LD_INT 3
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: LD_INT 2
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34357: LD_ADDR_VAR 0 30
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 3
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 2
34589: NEG
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 3
34600: NEG
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34635: LD_ADDR_VAR 0 31
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: LD_INT 1
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: LD_INT 3
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 3
34878: NEG
34879: PUSH
34880: LD_INT 2
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34913: LD_ADDR_VAR 0 32
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: LD_INT 2
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 3
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 3
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 3
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 3
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35191: LD_ADDR_VAR 0 33
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: NEG
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 3
35435: NEG
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35470: LD_ADDR_VAR 0 34
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 2
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: NEG
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: LD_INT 3
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 3
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: LD_INT 3
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 3
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35750: LD_ADDR_VAR 0 35
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35862: LD_ADDR_VAR 0 36
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 2
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35974: LD_ADDR_VAR 0 37
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36086: LD_ADDR_VAR 0 38
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36198: LD_ADDR_VAR 0 39
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36310: LD_ADDR_VAR 0 40
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36422: LD_ADDR_VAR 0 41
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 2
36577: NEG
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: LD_INT 1
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: LD_INT 2
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: NEG
36613: PUSH
36614: LD_INT 3
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 3
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 3
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: LD_INT 3
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 3
36696: NEG
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 3
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 3
36731: NEG
36732: PUSH
36733: LD_INT 3
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36772: LD_ADDR_VAR 0 42
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 2
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: NEG
36963: PUSH
36964: LD_INT 3
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 3
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 3
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 3
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 3
37081: NEG
37082: PUSH
37083: LD_INT 3
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37122: LD_ADDR_VAR 0 43
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 2
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 3
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 3
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 3
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: NEG
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 3
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 3
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37470: LD_ADDR_VAR 0 44
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 2
37625: NEG
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: LD_INT 3
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 3
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 3
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 3
37744: NEG
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 3
37755: NEG
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 3
37767: NEG
37768: PUSH
37769: LD_INT 2
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 3
37779: NEG
37780: PUSH
37781: LD_INT 3
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37820: LD_ADDR_VAR 0 45
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: LD_INT 3
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 3
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: LD_INT 3
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 3
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: NEG
38118: PUSH
38119: LD_INT 2
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 3
38129: NEG
38130: PUSH
38131: LD_INT 3
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38170: LD_ADDR_VAR 0 46
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: LD_INT 1
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: NEG
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 3
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 3
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 3
38466: NEG
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38518: LD_ADDR_VAR 0 47
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 2
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38669: LD_ADDR_VAR 0 48
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38816: LD_ADDR_VAR 0 49
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38960: LD_ADDR_VAR 0 50
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39104: LD_ADDR_VAR 0 51
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39251: LD_ADDR_VAR 0 52
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39402: LD_ADDR_VAR 0 53
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39632: LD_ADDR_VAR 0 54
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 2
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39862: LD_ADDR_VAR 0 55
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40092: LD_ADDR_VAR 0 56
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: LD_INT 2
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: LD_INT 2
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40322: LD_ADDR_VAR 0 57
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40552: LD_ADDR_VAR 0 58
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40782: LD_ADDR_VAR 0 59
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40870: LD_ADDR_VAR 0 60
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40958: LD_ADDR_VAR 0 61
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41046: LD_ADDR_VAR 0 62
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41134: LD_ADDR_VAR 0 63
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41222: LD_ADDR_VAR 0 64
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
// end ; 1 :
41310: GO 47207
41312: LD_INT 1
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41320
41318: GO 43943
41320: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41321: LD_ADDR_VAR 0 11
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 3
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 3
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: LIST
41364: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41365: LD_ADDR_VAR 0 12
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 3
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41406: LD_ADDR_VAR 0 13
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 3
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41446: LD_ADDR_VAR 0 14
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41487: LD_ADDR_VAR 0 15
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: NEG
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 3
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41531: LD_ADDR_VAR 0 16
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: LD_INT 3
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 3
41550: NEG
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 3
41562: NEG
41563: PUSH
41564: LD_INT 3
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41577: LD_ADDR_VAR 0 17
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: LD_INT 3
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41621: LD_ADDR_VAR 0 18
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 3
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41662: LD_ADDR_VAR 0 19
41666: PUSH
41667: LD_INT 3
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 3
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 3
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41702: LD_ADDR_VAR 0 20
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 3
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41743: LD_ADDR_VAR 0 21
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 3
41761: NEG
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 3
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41787: LD_ADDR_VAR 0 22
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: LD_INT 3
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 3
41818: NEG
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41833: LD_ADDR_VAR 0 23
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 3
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 4
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 3
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41877: LD_ADDR_VAR 0 24
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 4
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41918: LD_ADDR_VAR 0 25
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: LD_INT 3
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 4
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 3
41945: PUSH
41946: LD_INT 4
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41958: LD_ADDR_VAR 0 26
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 3
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 4
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41999: LD_ADDR_VAR 0 27
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 3
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 4
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42043: LD_ADDR_VAR 0 28
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 3
42062: NEG
42063: PUSH
42064: LD_INT 4
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 4
42074: NEG
42075: PUSH
42076: LD_INT 3
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42089: LD_ADDR_VAR 0 29
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 4
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 4
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: LD_INT 5
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 5
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 4
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: LD_INT 6
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 6
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 5
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42244: LD_ADDR_VAR 0 30
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 4
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 4
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 5
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 5
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 5
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 6
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 6
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42387: LD_ADDR_VAR 0 31
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 3
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 4
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 4
42434: PUSH
42435: LD_INT 4
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: LD_INT 4
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 5
42454: PUSH
42455: LD_INT 4
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 5
42464: PUSH
42465: LD_INT 5
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 4
42474: PUSH
42475: LD_INT 5
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 6
42484: PUSH
42485: LD_INT 5
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 6
42494: PUSH
42495: LD_INT 6
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 5
42504: PUSH
42505: LD_INT 6
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42526: LD_ADDR_VAR 0 32
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: LD_INT 3
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 4
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 4
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 5
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 6
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 6
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 5
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42669: LD_ADDR_VAR 0 33
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 3
42687: NEG
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 3
42710: NEG
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 4
42721: NEG
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 4
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 4
42744: NEG
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 5
42755: NEG
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 5
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 5
42778: NEG
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 6
42789: NEG
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 6
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42824: LD_ADDR_VAR 0 34
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 3
42843: NEG
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 3
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 3
42867: NEG
42868: PUSH
42869: LD_INT 4
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 4
42879: NEG
42880: PUSH
42881: LD_INT 3
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 4
42891: NEG
42892: PUSH
42893: LD_INT 4
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 4
42903: NEG
42904: PUSH
42905: LD_INT 5
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 5
42915: NEG
42916: PUSH
42917: LD_INT 4
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 5
42927: NEG
42928: PUSH
42929: LD_INT 5
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 5
42939: NEG
42940: PUSH
42941: LD_INT 6
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 6
42951: NEG
42952: PUSH
42953: LD_INT 5
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 6
42963: NEG
42964: PUSH
42965: LD_INT 6
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42987: LD_ADDR_VAR 0 41
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 3
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43031: LD_ADDR_VAR 0 42
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43072: LD_ADDR_VAR 0 43
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43112: LD_ADDR_VAR 0 44
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43153: LD_ADDR_VAR 0 45
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43197: LD_ADDR_VAR 0 46
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 3
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43243: LD_ADDR_VAR 0 47
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 3
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43276: LD_ADDR_VAR 0 48
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43307: LD_ADDR_VAR 0 49
43311: PUSH
43312: LD_INT 3
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 3
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43336: LD_ADDR_VAR 0 50
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43365: LD_ADDR_VAR 0 51
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43396: LD_ADDR_VAR 0 52
43400: PUSH
43401: LD_INT 3
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 3
43415: NEG
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43429: LD_ADDR_VAR 0 53
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 3
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43473: LD_ADDR_VAR 0 54
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43514: LD_ADDR_VAR 0 55
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43554: LD_ADDR_VAR 0 56
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43595: LD_ADDR_VAR 0 57
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 3
43613: NEG
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43639: LD_ADDR_VAR 0 58
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 3
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: LD_INT 3
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43685: LD_ADDR_VAR 0 59
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43729: LD_ADDR_VAR 0 60
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43770: LD_ADDR_VAR 0 61
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43810: LD_ADDR_VAR 0 62
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43851: LD_ADDR_VAR 0 63
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43895: LD_ADDR_VAR 0 64
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: ST_TO_ADDR
// end ; 2 :
43941: GO 47207
43943: LD_INT 2
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 43951
43949: GO 47206
43951: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43952: LD_ADDR_VAR 0 29
43956: PUSH
43957: LD_INT 4
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 4
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 5
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 5
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 4
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 5
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 4
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 4
44082: PUSH
44083: LD_INT 4
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: LD_INT 4
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 4
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: LD_INT 4
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 4
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 4
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 5
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 5
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 4
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 3
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 5
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 3
44246: NEG
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 3
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 4
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 4
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 4
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 4
44337: NEG
44338: PUSH
44339: LD_INT 4
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 4
44349: NEG
44350: PUSH
44351: LD_INT 5
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 3
44361: NEG
44362: PUSH
44363: LD_INT 4
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: LD_INT 3
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 4
44385: NEG
44386: PUSH
44387: LD_INT 3
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 5
44397: NEG
44398: PUSH
44399: LD_INT 4
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 5
44409: NEG
44410: PUSH
44411: LD_INT 5
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: NEG
44422: PUSH
44423: LD_INT 5
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 5
44433: NEG
44434: PUSH
44435: LD_INT 3
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44490: LD_ADDR_VAR 0 30
44494: PUSH
44495: LD_INT 4
44497: PUSH
44498: LD_INT 4
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 4
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 5
44517: PUSH
44518: LD_INT 4
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 5
44527: PUSH
44528: LD_INT 5
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 4
44537: PUSH
44538: LD_INT 5
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: LD_INT 4
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 5
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 3
44577: PUSH
44578: LD_INT 5
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 3
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 4
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 4
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 4
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 4
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 4
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 3
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 3
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 4
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 5
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 5
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 5
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: LD_INT 3
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: LD_INT 4
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 3
44830: NEG
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 4
44842: NEG
44843: PUSH
44844: LD_INT 3
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 4
44854: NEG
44855: PUSH
44856: LD_INT 4
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 4
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 4
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 4
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 5
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 4
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 4
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 5
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 5
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45037: LD_ADDR_VAR 0 31
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 4
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 4
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 5
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 5
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 4
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 5
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: LD_INT 3
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 3
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 4
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 4
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 4
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 4
45239: NEG
45240: PUSH
45241: LD_INT 4
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 4
45251: NEG
45252: PUSH
45253: LD_INT 5
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: LD_INT 4
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 3
45275: NEG
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 4
45287: NEG
45288: PUSH
45289: LD_INT 3
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 5
45299: NEG
45300: PUSH
45301: LD_INT 4
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 5
45311: NEG
45312: PUSH
45313: LD_INT 5
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: LD_INT 5
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 5
45335: NEG
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 4
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 4
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: LD_INT 4
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 4
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 4
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 5
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 5
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 5
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45587: LD_ADDR_VAR 0 32
45591: PUSH
45592: LD_INT 4
45594: NEG
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 4
45605: NEG
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 3
45617: NEG
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 3
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 4
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 5
45650: NEG
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 5
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 5
45673: NEG
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 3
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: LD_INT 4
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 3
45744: NEG
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 4
45756: NEG
45757: PUSH
45758: LD_INT 3
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 4
45768: NEG
45769: PUSH
45770: LD_INT 4
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 4
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 4
45792: NEG
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 4
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 5
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 4
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 4
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 5
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: LD_INT 5
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 4
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 4
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 4
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 4
45999: PUSH
46000: LD_INT 4
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 4
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 5
46019: PUSH
46020: LD_INT 4
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 5
46029: PUSH
46030: LD_INT 5
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 4
46039: PUSH
46040: LD_INT 5
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: LD_INT 4
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: LD_INT 3
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 5
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: LD_INT 5
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46134: LD_ADDR_VAR 0 33
46138: PUSH
46139: LD_INT 4
46141: NEG
46142: PUSH
46143: LD_INT 4
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 4
46153: NEG
46154: PUSH
46155: LD_INT 5
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 4
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: NEG
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 4
46189: NEG
46190: PUSH
46191: LD_INT 3
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 5
46201: NEG
46202: PUSH
46203: LD_INT 4
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 5
46213: NEG
46214: PUSH
46215: LD_INT 5
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 3
46225: NEG
46226: PUSH
46227: LD_INT 5
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 5
46237: NEG
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 4
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 3
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 4
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 4
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 4
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 4
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 5
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 5
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 4
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 5
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 3
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 3
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 4
46464: PUSH
46465: LD_INT 3
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 4
46474: PUSH
46475: LD_INT 4
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 3
46484: PUSH
46485: LD_INT 4
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 4
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 4
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 4
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 4
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 5
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 5
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 4
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: LD_INT 5
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46672: LD_ADDR_VAR 0 34
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 4
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 5
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 4
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 3
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 3
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 4
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 5
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 5
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 4
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 4
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 4
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 4
46874: PUSH
46875: LD_INT 4
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 4
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 5
46894: PUSH
46895: LD_INT 4
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 5
46904: PUSH
46905: LD_INT 5
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 4
46914: PUSH
46915: LD_INT 5
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 4
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 5
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: PUSH
46955: LD_INT 5
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 4
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 4
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 3
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: LD_INT 4
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 4
47057: NEG
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 4
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 3
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 4
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 5
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 5
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 5
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: ST_TO_ADDR
// end ; end ;
47204: GO 47207
47206: POP
// case btype of b_depot , b_warehouse :
47207: LD_VAR 0 1
47211: PUSH
47212: LD_INT 0
47214: DOUBLE
47215: EQUAL
47216: IFTRUE 47226
47218: LD_INT 1
47220: DOUBLE
47221: EQUAL
47222: IFTRUE 47226
47224: GO 47427
47226: POP
// case nation of nation_american :
47227: LD_VAR 0 5
47231: PUSH
47232: LD_INT 1
47234: DOUBLE
47235: EQUAL
47236: IFTRUE 47240
47238: GO 47296
47240: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47241: LD_ADDR_VAR 0 9
47245: PUSH
47246: LD_VAR 0 11
47250: PUSH
47251: LD_VAR 0 12
47255: PUSH
47256: LD_VAR 0 13
47260: PUSH
47261: LD_VAR 0 14
47265: PUSH
47266: LD_VAR 0 15
47270: PUSH
47271: LD_VAR 0 16
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 4
47288: PUSH
47289: LD_INT 1
47291: PLUS
47292: ARRAY
47293: ST_TO_ADDR
47294: GO 47425
47296: LD_INT 2
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47304
47302: GO 47360
47304: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47305: LD_ADDR_VAR 0 9
47309: PUSH
47310: LD_VAR 0 17
47314: PUSH
47315: LD_VAR 0 18
47319: PUSH
47320: LD_VAR 0 19
47324: PUSH
47325: LD_VAR 0 20
47329: PUSH
47330: LD_VAR 0 21
47334: PUSH
47335: LD_VAR 0 22
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: PUSH
47348: LD_VAR 0 4
47352: PUSH
47353: LD_INT 1
47355: PLUS
47356: ARRAY
47357: ST_TO_ADDR
47358: GO 47425
47360: LD_INT 3
47362: DOUBLE
47363: EQUAL
47364: IFTRUE 47368
47366: GO 47424
47368: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47369: LD_ADDR_VAR 0 9
47373: PUSH
47374: LD_VAR 0 23
47378: PUSH
47379: LD_VAR 0 24
47383: PUSH
47384: LD_VAR 0 25
47388: PUSH
47389: LD_VAR 0 26
47393: PUSH
47394: LD_VAR 0 27
47398: PUSH
47399: LD_VAR 0 28
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: PUSH
47412: LD_VAR 0 4
47416: PUSH
47417: LD_INT 1
47419: PLUS
47420: ARRAY
47421: ST_TO_ADDR
47422: GO 47425
47424: POP
47425: GO 47980
47427: LD_INT 2
47429: DOUBLE
47430: EQUAL
47431: IFTRUE 47441
47433: LD_INT 3
47435: DOUBLE
47436: EQUAL
47437: IFTRUE 47441
47439: GO 47497
47441: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47442: LD_ADDR_VAR 0 9
47446: PUSH
47447: LD_VAR 0 29
47451: PUSH
47452: LD_VAR 0 30
47456: PUSH
47457: LD_VAR 0 31
47461: PUSH
47462: LD_VAR 0 32
47466: PUSH
47467: LD_VAR 0 33
47471: PUSH
47472: LD_VAR 0 34
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: PUSH
47485: LD_VAR 0 4
47489: PUSH
47490: LD_INT 1
47492: PLUS
47493: ARRAY
47494: ST_TO_ADDR
47495: GO 47980
47497: LD_INT 16
47499: DOUBLE
47500: EQUAL
47501: IFTRUE 47559
47503: LD_INT 17
47505: DOUBLE
47506: EQUAL
47507: IFTRUE 47559
47509: LD_INT 18
47511: DOUBLE
47512: EQUAL
47513: IFTRUE 47559
47515: LD_INT 19
47517: DOUBLE
47518: EQUAL
47519: IFTRUE 47559
47521: LD_INT 22
47523: DOUBLE
47524: EQUAL
47525: IFTRUE 47559
47527: LD_INT 20
47529: DOUBLE
47530: EQUAL
47531: IFTRUE 47559
47533: LD_INT 21
47535: DOUBLE
47536: EQUAL
47537: IFTRUE 47559
47539: LD_INT 23
47541: DOUBLE
47542: EQUAL
47543: IFTRUE 47559
47545: LD_INT 24
47547: DOUBLE
47548: EQUAL
47549: IFTRUE 47559
47551: LD_INT 25
47553: DOUBLE
47554: EQUAL
47555: IFTRUE 47559
47557: GO 47615
47559: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47560: LD_ADDR_VAR 0 9
47564: PUSH
47565: LD_VAR 0 35
47569: PUSH
47570: LD_VAR 0 36
47574: PUSH
47575: LD_VAR 0 37
47579: PUSH
47580: LD_VAR 0 38
47584: PUSH
47585: LD_VAR 0 39
47589: PUSH
47590: LD_VAR 0 40
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: PUSH
47603: LD_VAR 0 4
47607: PUSH
47608: LD_INT 1
47610: PLUS
47611: ARRAY
47612: ST_TO_ADDR
47613: GO 47980
47615: LD_INT 6
47617: DOUBLE
47618: EQUAL
47619: IFTRUE 47671
47621: LD_INT 7
47623: DOUBLE
47624: EQUAL
47625: IFTRUE 47671
47627: LD_INT 8
47629: DOUBLE
47630: EQUAL
47631: IFTRUE 47671
47633: LD_INT 13
47635: DOUBLE
47636: EQUAL
47637: IFTRUE 47671
47639: LD_INT 12
47641: DOUBLE
47642: EQUAL
47643: IFTRUE 47671
47645: LD_INT 15
47647: DOUBLE
47648: EQUAL
47649: IFTRUE 47671
47651: LD_INT 11
47653: DOUBLE
47654: EQUAL
47655: IFTRUE 47671
47657: LD_INT 14
47659: DOUBLE
47660: EQUAL
47661: IFTRUE 47671
47663: LD_INT 10
47665: DOUBLE
47666: EQUAL
47667: IFTRUE 47671
47669: GO 47727
47671: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47672: LD_ADDR_VAR 0 9
47676: PUSH
47677: LD_VAR 0 41
47681: PUSH
47682: LD_VAR 0 42
47686: PUSH
47687: LD_VAR 0 43
47691: PUSH
47692: LD_VAR 0 44
47696: PUSH
47697: LD_VAR 0 45
47701: PUSH
47702: LD_VAR 0 46
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: PUSH
47715: LD_VAR 0 4
47719: PUSH
47720: LD_INT 1
47722: PLUS
47723: ARRAY
47724: ST_TO_ADDR
47725: GO 47980
47727: LD_INT 36
47729: DOUBLE
47730: EQUAL
47731: IFTRUE 47735
47733: GO 47791
47735: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47736: LD_ADDR_VAR 0 9
47740: PUSH
47741: LD_VAR 0 47
47745: PUSH
47746: LD_VAR 0 48
47750: PUSH
47751: LD_VAR 0 49
47755: PUSH
47756: LD_VAR 0 50
47760: PUSH
47761: LD_VAR 0 51
47765: PUSH
47766: LD_VAR 0 52
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: PUSH
47779: LD_VAR 0 4
47783: PUSH
47784: LD_INT 1
47786: PLUS
47787: ARRAY
47788: ST_TO_ADDR
47789: GO 47980
47791: LD_INT 4
47793: DOUBLE
47794: EQUAL
47795: IFTRUE 47817
47797: LD_INT 5
47799: DOUBLE
47800: EQUAL
47801: IFTRUE 47817
47803: LD_INT 34
47805: DOUBLE
47806: EQUAL
47807: IFTRUE 47817
47809: LD_INT 37
47811: DOUBLE
47812: EQUAL
47813: IFTRUE 47817
47815: GO 47873
47817: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47818: LD_ADDR_VAR 0 9
47822: PUSH
47823: LD_VAR 0 53
47827: PUSH
47828: LD_VAR 0 54
47832: PUSH
47833: LD_VAR 0 55
47837: PUSH
47838: LD_VAR 0 56
47842: PUSH
47843: LD_VAR 0 57
47847: PUSH
47848: LD_VAR 0 58
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: PUSH
47861: LD_VAR 0 4
47865: PUSH
47866: LD_INT 1
47868: PLUS
47869: ARRAY
47870: ST_TO_ADDR
47871: GO 47980
47873: LD_INT 31
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47923
47879: LD_INT 32
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47923
47885: LD_INT 33
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47923
47891: LD_INT 27
47893: DOUBLE
47894: EQUAL
47895: IFTRUE 47923
47897: LD_INT 26
47899: DOUBLE
47900: EQUAL
47901: IFTRUE 47923
47903: LD_INT 28
47905: DOUBLE
47906: EQUAL
47907: IFTRUE 47923
47909: LD_INT 29
47911: DOUBLE
47912: EQUAL
47913: IFTRUE 47923
47915: LD_INT 30
47917: DOUBLE
47918: EQUAL
47919: IFTRUE 47923
47921: GO 47979
47923: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47924: LD_ADDR_VAR 0 9
47928: PUSH
47929: LD_VAR 0 59
47933: PUSH
47934: LD_VAR 0 60
47938: PUSH
47939: LD_VAR 0 61
47943: PUSH
47944: LD_VAR 0 62
47948: PUSH
47949: LD_VAR 0 63
47953: PUSH
47954: LD_VAR 0 64
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: PUSH
47967: LD_VAR 0 4
47971: PUSH
47972: LD_INT 1
47974: PLUS
47975: ARRAY
47976: ST_TO_ADDR
47977: GO 47980
47979: POP
// temp_list2 = [ ] ;
47980: LD_ADDR_VAR 0 10
47984: PUSH
47985: EMPTY
47986: ST_TO_ADDR
// for i in temp_list do
47987: LD_ADDR_VAR 0 8
47991: PUSH
47992: LD_VAR 0 9
47996: PUSH
47997: FOR_IN
47998: IFFALSE 48050
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48000: LD_ADDR_VAR 0 10
48004: PUSH
48005: LD_VAR 0 10
48009: PUSH
48010: LD_VAR 0 8
48014: PUSH
48015: LD_INT 1
48017: ARRAY
48018: PUSH
48019: LD_VAR 0 2
48023: PLUS
48024: PUSH
48025: LD_VAR 0 8
48029: PUSH
48030: LD_INT 2
48032: ARRAY
48033: PUSH
48034: LD_VAR 0 3
48038: PLUS
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: ADD
48047: ST_TO_ADDR
48048: GO 47997
48050: POP
48051: POP
// result = temp_list2 ;
48052: LD_ADDR_VAR 0 7
48056: PUSH
48057: LD_VAR 0 10
48061: ST_TO_ADDR
// end ;
48062: LD_VAR 0 7
48066: RET
// export function EnemyInRange ( unit , dist ) ; begin
48067: LD_INT 0
48069: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48070: LD_ADDR_VAR 0 3
48074: PUSH
48075: LD_VAR 0 1
48079: PPUSH
48080: CALL_OW 255
48084: PPUSH
48085: LD_VAR 0 1
48089: PPUSH
48090: CALL_OW 250
48094: PPUSH
48095: LD_VAR 0 1
48099: PPUSH
48100: CALL_OW 251
48104: PPUSH
48105: LD_VAR 0 2
48109: PPUSH
48110: CALL 21440 0 4
48114: PUSH
48115: LD_INT 4
48117: ARRAY
48118: ST_TO_ADDR
// end ;
48119: LD_VAR 0 3
48123: RET
// export function PlayerSeeMe ( unit ) ; begin
48124: LD_INT 0
48126: PPUSH
// result := See ( your_side , unit ) ;
48127: LD_ADDR_VAR 0 2
48131: PUSH
48132: LD_OWVAR 2
48136: PPUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 292
48146: ST_TO_ADDR
// end ;
48147: LD_VAR 0 2
48151: RET
// export function ReverseDir ( unit ) ; begin
48152: LD_INT 0
48154: PPUSH
// if not unit then
48155: LD_VAR 0 1
48159: NOT
48160: IFFALSE 48164
// exit ;
48162: GO 48187
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48164: LD_ADDR_VAR 0 2
48168: PUSH
48169: LD_VAR 0 1
48173: PPUSH
48174: CALL_OW 254
48178: PUSH
48179: LD_INT 3
48181: PLUS
48182: PUSH
48183: LD_INT 6
48185: MOD
48186: ST_TO_ADDR
// end ;
48187: LD_VAR 0 2
48191: RET
// export function ReverseArray ( array ) ; var i ; begin
48192: LD_INT 0
48194: PPUSH
48195: PPUSH
// if not array then
48196: LD_VAR 0 1
48200: NOT
48201: IFFALSE 48205
// exit ;
48203: GO 48260
// result := [ ] ;
48205: LD_ADDR_VAR 0 2
48209: PUSH
48210: EMPTY
48211: ST_TO_ADDR
// for i := array downto 1 do
48212: LD_ADDR_VAR 0 3
48216: PUSH
48217: DOUBLE
48218: LD_VAR 0 1
48222: INC
48223: ST_TO_ADDR
48224: LD_INT 1
48226: PUSH
48227: FOR_DOWNTO
48228: IFFALSE 48258
// result := Join ( result , array [ i ] ) ;
48230: LD_ADDR_VAR 0 2
48234: PUSH
48235: LD_VAR 0 2
48239: PPUSH
48240: LD_VAR 0 1
48244: PUSH
48245: LD_VAR 0 3
48249: ARRAY
48250: PPUSH
48251: CALL 52905 0 2
48255: ST_TO_ADDR
48256: GO 48227
48258: POP
48259: POP
// end ;
48260: LD_VAR 0 2
48264: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48265: LD_INT 0
48267: PPUSH
48268: PPUSH
48269: PPUSH
48270: PPUSH
48271: PPUSH
48272: PPUSH
// if not unit or not hexes then
48273: LD_VAR 0 1
48277: NOT
48278: PUSH
48279: LD_VAR 0 2
48283: NOT
48284: OR
48285: IFFALSE 48289
// exit ;
48287: GO 48412
// dist := 9999 ;
48289: LD_ADDR_VAR 0 5
48293: PUSH
48294: LD_INT 9999
48296: ST_TO_ADDR
// for i = 1 to hexes do
48297: LD_ADDR_VAR 0 4
48301: PUSH
48302: DOUBLE
48303: LD_INT 1
48305: DEC
48306: ST_TO_ADDR
48307: LD_VAR 0 2
48311: PUSH
48312: FOR_TO
48313: IFFALSE 48400
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48315: LD_ADDR_VAR 0 6
48319: PUSH
48320: LD_VAR 0 1
48324: PPUSH
48325: LD_VAR 0 2
48329: PUSH
48330: LD_VAR 0 4
48334: ARRAY
48335: PUSH
48336: LD_INT 1
48338: ARRAY
48339: PPUSH
48340: LD_VAR 0 2
48344: PUSH
48345: LD_VAR 0 4
48349: ARRAY
48350: PUSH
48351: LD_INT 2
48353: ARRAY
48354: PPUSH
48355: CALL_OW 297
48359: ST_TO_ADDR
// if tdist < dist then
48360: LD_VAR 0 6
48364: PUSH
48365: LD_VAR 0 5
48369: LESS
48370: IFFALSE 48398
// begin hex := hexes [ i ] ;
48372: LD_ADDR_VAR 0 8
48376: PUSH
48377: LD_VAR 0 2
48381: PUSH
48382: LD_VAR 0 4
48386: ARRAY
48387: ST_TO_ADDR
// dist := tdist ;
48388: LD_ADDR_VAR 0 5
48392: PUSH
48393: LD_VAR 0 6
48397: ST_TO_ADDR
// end ; end ;
48398: GO 48312
48400: POP
48401: POP
// result := hex ;
48402: LD_ADDR_VAR 0 3
48406: PUSH
48407: LD_VAR 0 8
48411: ST_TO_ADDR
// end ;
48412: LD_VAR 0 3
48416: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48417: LD_INT 0
48419: PPUSH
48420: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48421: LD_VAR 0 1
48425: NOT
48426: PUSH
48427: LD_VAR 0 1
48431: PUSH
48432: LD_INT 21
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 23
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PPUSH
48456: CALL_OW 69
48460: IN
48461: NOT
48462: OR
48463: IFFALSE 48467
// exit ;
48465: GO 48514
// for i = 1 to 3 do
48467: LD_ADDR_VAR 0 3
48471: PUSH
48472: DOUBLE
48473: LD_INT 1
48475: DEC
48476: ST_TO_ADDR
48477: LD_INT 3
48479: PUSH
48480: FOR_TO
48481: IFFALSE 48512
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48483: LD_VAR 0 1
48487: PPUSH
48488: CALL_OW 250
48492: PPUSH
48493: LD_VAR 0 1
48497: PPUSH
48498: CALL_OW 251
48502: PPUSH
48503: LD_INT 1
48505: PPUSH
48506: CALL_OW 453
48510: GO 48480
48512: POP
48513: POP
// end ;
48514: LD_VAR 0 2
48518: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48519: LD_INT 0
48521: PPUSH
48522: PPUSH
48523: PPUSH
48524: PPUSH
48525: PPUSH
48526: PPUSH
// if not unit or not enemy_unit then
48527: LD_VAR 0 1
48531: NOT
48532: PUSH
48533: LD_VAR 0 2
48537: NOT
48538: OR
48539: IFFALSE 48543
// exit ;
48541: GO 49010
// if GetLives ( i ) < 250 then
48543: LD_VAR 0 4
48547: PPUSH
48548: CALL_OW 256
48552: PUSH
48553: LD_INT 250
48555: LESS
48556: IFFALSE 48569
// begin ComAutodestruct ( i ) ;
48558: LD_VAR 0 4
48562: PPUSH
48563: CALL 48417 0 1
// exit ;
48567: GO 49010
// end ; x := GetX ( enemy_unit ) ;
48569: LD_ADDR_VAR 0 7
48573: PUSH
48574: LD_VAR 0 2
48578: PPUSH
48579: CALL_OW 250
48583: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48584: LD_ADDR_VAR 0 8
48588: PUSH
48589: LD_VAR 0 2
48593: PPUSH
48594: CALL_OW 251
48598: ST_TO_ADDR
// if not x or not y then
48599: LD_VAR 0 7
48603: NOT
48604: PUSH
48605: LD_VAR 0 8
48609: NOT
48610: OR
48611: IFFALSE 48615
// exit ;
48613: GO 49010
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48615: LD_ADDR_VAR 0 6
48619: PUSH
48620: LD_VAR 0 7
48624: PPUSH
48625: LD_INT 0
48627: PPUSH
48628: LD_INT 4
48630: PPUSH
48631: CALL_OW 272
48635: PUSH
48636: LD_VAR 0 8
48640: PPUSH
48641: LD_INT 0
48643: PPUSH
48644: LD_INT 4
48646: PPUSH
48647: CALL_OW 273
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_VAR 0 7
48660: PPUSH
48661: LD_INT 1
48663: PPUSH
48664: LD_INT 4
48666: PPUSH
48667: CALL_OW 272
48671: PUSH
48672: LD_VAR 0 8
48676: PPUSH
48677: LD_INT 1
48679: PPUSH
48680: LD_INT 4
48682: PPUSH
48683: CALL_OW 273
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_VAR 0 7
48696: PPUSH
48697: LD_INT 2
48699: PPUSH
48700: LD_INT 4
48702: PPUSH
48703: CALL_OW 272
48707: PUSH
48708: LD_VAR 0 8
48712: PPUSH
48713: LD_INT 2
48715: PPUSH
48716: LD_INT 4
48718: PPUSH
48719: CALL_OW 273
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_VAR 0 7
48732: PPUSH
48733: LD_INT 3
48735: PPUSH
48736: LD_INT 4
48738: PPUSH
48739: CALL_OW 272
48743: PUSH
48744: LD_VAR 0 8
48748: PPUSH
48749: LD_INT 3
48751: PPUSH
48752: LD_INT 4
48754: PPUSH
48755: CALL_OW 273
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_VAR 0 7
48768: PPUSH
48769: LD_INT 4
48771: PPUSH
48772: LD_INT 4
48774: PPUSH
48775: CALL_OW 272
48779: PUSH
48780: LD_VAR 0 8
48784: PPUSH
48785: LD_INT 4
48787: PPUSH
48788: LD_INT 4
48790: PPUSH
48791: CALL_OW 273
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_VAR 0 7
48804: PPUSH
48805: LD_INT 5
48807: PPUSH
48808: LD_INT 4
48810: PPUSH
48811: CALL_OW 272
48815: PUSH
48816: LD_VAR 0 8
48820: PPUSH
48821: LD_INT 5
48823: PPUSH
48824: LD_INT 4
48826: PPUSH
48827: CALL_OW 273
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: ST_TO_ADDR
// for i = tmp downto 1 do
48844: LD_ADDR_VAR 0 4
48848: PUSH
48849: DOUBLE
48850: LD_VAR 0 6
48854: INC
48855: ST_TO_ADDR
48856: LD_INT 1
48858: PUSH
48859: FOR_DOWNTO
48860: IFFALSE 48961
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48862: LD_VAR 0 6
48866: PUSH
48867: LD_VAR 0 4
48871: ARRAY
48872: PUSH
48873: LD_INT 1
48875: ARRAY
48876: PPUSH
48877: LD_VAR 0 6
48881: PUSH
48882: LD_VAR 0 4
48886: ARRAY
48887: PUSH
48888: LD_INT 2
48890: ARRAY
48891: PPUSH
48892: CALL_OW 488
48896: NOT
48897: PUSH
48898: LD_VAR 0 6
48902: PUSH
48903: LD_VAR 0 4
48907: ARRAY
48908: PUSH
48909: LD_INT 1
48911: ARRAY
48912: PPUSH
48913: LD_VAR 0 6
48917: PUSH
48918: LD_VAR 0 4
48922: ARRAY
48923: PUSH
48924: LD_INT 2
48926: ARRAY
48927: PPUSH
48928: CALL_OW 428
48932: PUSH
48933: LD_INT 0
48935: NONEQUAL
48936: OR
48937: IFFALSE 48959
// tmp := Delete ( tmp , i ) ;
48939: LD_ADDR_VAR 0 6
48943: PUSH
48944: LD_VAR 0 6
48948: PPUSH
48949: LD_VAR 0 4
48953: PPUSH
48954: CALL_OW 3
48958: ST_TO_ADDR
48959: GO 48859
48961: POP
48962: POP
// j := GetClosestHex ( unit , tmp ) ;
48963: LD_ADDR_VAR 0 5
48967: PUSH
48968: LD_VAR 0 1
48972: PPUSH
48973: LD_VAR 0 6
48977: PPUSH
48978: CALL 48265 0 2
48982: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48983: LD_VAR 0 1
48987: PPUSH
48988: LD_VAR 0 5
48992: PUSH
48993: LD_INT 1
48995: ARRAY
48996: PPUSH
48997: LD_VAR 0 5
49001: PUSH
49002: LD_INT 2
49004: ARRAY
49005: PPUSH
49006: CALL_OW 111
// end ;
49010: LD_VAR 0 3
49014: RET
// export function PrepareApemanSoldier ( ) ; begin
49015: LD_INT 0
49017: PPUSH
// uc_nation := 0 ;
49018: LD_ADDR_OWVAR 21
49022: PUSH
49023: LD_INT 0
49025: ST_TO_ADDR
// hc_sex := sex_male ;
49026: LD_ADDR_OWVAR 27
49030: PUSH
49031: LD_INT 1
49033: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49034: LD_ADDR_OWVAR 28
49038: PUSH
49039: LD_INT 15
49041: ST_TO_ADDR
// hc_gallery :=  ;
49042: LD_ADDR_OWVAR 33
49046: PUSH
49047: LD_STRING 
49049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49050: LD_ADDR_OWVAR 31
49054: PUSH
49055: LD_INT 0
49057: PPUSH
49058: LD_INT 3
49060: PPUSH
49061: CALL_OW 12
49065: PUSH
49066: LD_INT 0
49068: PPUSH
49069: LD_INT 3
49071: PPUSH
49072: CALL_OW 12
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: ST_TO_ADDR
// end ;
49089: LD_VAR 0 1
49093: RET
// export function PrepareApemanEngineer ( ) ; begin
49094: LD_INT 0
49096: PPUSH
// uc_nation := 0 ;
49097: LD_ADDR_OWVAR 21
49101: PUSH
49102: LD_INT 0
49104: ST_TO_ADDR
// hc_sex := sex_male ;
49105: LD_ADDR_OWVAR 27
49109: PUSH
49110: LD_INT 1
49112: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49113: LD_ADDR_OWVAR 28
49117: PUSH
49118: LD_INT 16
49120: ST_TO_ADDR
// hc_gallery :=  ;
49121: LD_ADDR_OWVAR 33
49125: PUSH
49126: LD_STRING 
49128: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49129: LD_ADDR_OWVAR 31
49133: PUSH
49134: LD_INT 0
49136: PPUSH
49137: LD_INT 3
49139: PPUSH
49140: CALL_OW 12
49144: PUSH
49145: LD_INT 0
49147: PPUSH
49148: LD_INT 3
49150: PPUSH
49151: CALL_OW 12
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: ST_TO_ADDR
// end ;
49168: LD_VAR 0 1
49172: RET
// export function PrepareApeman ( agressivity ) ; begin
49173: LD_INT 0
49175: PPUSH
// uc_side := 0 ;
49176: LD_ADDR_OWVAR 20
49180: PUSH
49181: LD_INT 0
49183: ST_TO_ADDR
// uc_nation := 0 ;
49184: LD_ADDR_OWVAR 21
49188: PUSH
49189: LD_INT 0
49191: ST_TO_ADDR
// hc_sex := sex_male ;
49192: LD_ADDR_OWVAR 27
49196: PUSH
49197: LD_INT 1
49199: ST_TO_ADDR
// hc_class := class_apeman ;
49200: LD_ADDR_OWVAR 28
49204: PUSH
49205: LD_INT 12
49207: ST_TO_ADDR
// hc_gallery :=  ;
49208: LD_ADDR_OWVAR 33
49212: PUSH
49213: LD_STRING 
49215: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49216: LD_ADDR_OWVAR 35
49220: PUSH
49221: LD_VAR 0 1
49225: NEG
49226: PPUSH
49227: LD_VAR 0 1
49231: PPUSH
49232: CALL_OW 12
49236: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49237: LD_ADDR_OWVAR 31
49241: PUSH
49242: LD_INT 0
49244: PPUSH
49245: LD_INT 3
49247: PPUSH
49248: CALL_OW 12
49252: PUSH
49253: LD_INT 0
49255: PPUSH
49256: LD_INT 3
49258: PPUSH
49259: CALL_OW 12
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: ST_TO_ADDR
// end ;
49276: LD_VAR 0 2
49280: RET
// export function PrepareTiger ( agressivity ) ; begin
49281: LD_INT 0
49283: PPUSH
// uc_side := 0 ;
49284: LD_ADDR_OWVAR 20
49288: PUSH
49289: LD_INT 0
49291: ST_TO_ADDR
// uc_nation := 0 ;
49292: LD_ADDR_OWVAR 21
49296: PUSH
49297: LD_INT 0
49299: ST_TO_ADDR
// hc_class := class_tiger ;
49300: LD_ADDR_OWVAR 28
49304: PUSH
49305: LD_INT 14
49307: ST_TO_ADDR
// hc_gallery :=  ;
49308: LD_ADDR_OWVAR 33
49312: PUSH
49313: LD_STRING 
49315: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49316: LD_ADDR_OWVAR 35
49320: PUSH
49321: LD_VAR 0 1
49325: NEG
49326: PPUSH
49327: LD_VAR 0 1
49331: PPUSH
49332: CALL_OW 12
49336: ST_TO_ADDR
// end ;
49337: LD_VAR 0 2
49341: RET
// export function PrepareEnchidna ( ) ; begin
49342: LD_INT 0
49344: PPUSH
// uc_side := 0 ;
49345: LD_ADDR_OWVAR 20
49349: PUSH
49350: LD_INT 0
49352: ST_TO_ADDR
// uc_nation := 0 ;
49353: LD_ADDR_OWVAR 21
49357: PUSH
49358: LD_INT 0
49360: ST_TO_ADDR
// hc_class := class_baggie ;
49361: LD_ADDR_OWVAR 28
49365: PUSH
49366: LD_INT 13
49368: ST_TO_ADDR
// hc_gallery :=  ;
49369: LD_ADDR_OWVAR 33
49373: PUSH
49374: LD_STRING 
49376: ST_TO_ADDR
// end ;
49377: LD_VAR 0 1
49381: RET
// export function PrepareFrog ( ) ; begin
49382: LD_INT 0
49384: PPUSH
// uc_side := 0 ;
49385: LD_ADDR_OWVAR 20
49389: PUSH
49390: LD_INT 0
49392: ST_TO_ADDR
// uc_nation := 0 ;
49393: LD_ADDR_OWVAR 21
49397: PUSH
49398: LD_INT 0
49400: ST_TO_ADDR
// hc_class := class_frog ;
49401: LD_ADDR_OWVAR 28
49405: PUSH
49406: LD_INT 19
49408: ST_TO_ADDR
// hc_gallery :=  ;
49409: LD_ADDR_OWVAR 33
49413: PUSH
49414: LD_STRING 
49416: ST_TO_ADDR
// end ;
49417: LD_VAR 0 1
49421: RET
// export function PrepareFish ( ) ; begin
49422: LD_INT 0
49424: PPUSH
// uc_side := 0 ;
49425: LD_ADDR_OWVAR 20
49429: PUSH
49430: LD_INT 0
49432: ST_TO_ADDR
// uc_nation := 0 ;
49433: LD_ADDR_OWVAR 21
49437: PUSH
49438: LD_INT 0
49440: ST_TO_ADDR
// hc_class := class_fish ;
49441: LD_ADDR_OWVAR 28
49445: PUSH
49446: LD_INT 20
49448: ST_TO_ADDR
// hc_gallery :=  ;
49449: LD_ADDR_OWVAR 33
49453: PUSH
49454: LD_STRING 
49456: ST_TO_ADDR
// end ;
49457: LD_VAR 0 1
49461: RET
// export function PrepareBird ( ) ; begin
49462: LD_INT 0
49464: PPUSH
// uc_side := 0 ;
49465: LD_ADDR_OWVAR 20
49469: PUSH
49470: LD_INT 0
49472: ST_TO_ADDR
// uc_nation := 0 ;
49473: LD_ADDR_OWVAR 21
49477: PUSH
49478: LD_INT 0
49480: ST_TO_ADDR
// hc_class := class_phororhacos ;
49481: LD_ADDR_OWVAR 28
49485: PUSH
49486: LD_INT 18
49488: ST_TO_ADDR
// hc_gallery :=  ;
49489: LD_ADDR_OWVAR 33
49493: PUSH
49494: LD_STRING 
49496: ST_TO_ADDR
// end ;
49497: LD_VAR 0 1
49501: RET
// export function PrepareHorse ( ) ; begin
49502: LD_INT 0
49504: PPUSH
// uc_side := 0 ;
49505: LD_ADDR_OWVAR 20
49509: PUSH
49510: LD_INT 0
49512: ST_TO_ADDR
// uc_nation := 0 ;
49513: LD_ADDR_OWVAR 21
49517: PUSH
49518: LD_INT 0
49520: ST_TO_ADDR
// hc_class := class_horse ;
49521: LD_ADDR_OWVAR 28
49525: PUSH
49526: LD_INT 21
49528: ST_TO_ADDR
// hc_gallery :=  ;
49529: LD_ADDR_OWVAR 33
49533: PUSH
49534: LD_STRING 
49536: ST_TO_ADDR
// end ;
49537: LD_VAR 0 1
49541: RET
// export function PrepareMastodont ( ) ; begin
49542: LD_INT 0
49544: PPUSH
// uc_side := 0 ;
49545: LD_ADDR_OWVAR 20
49549: PUSH
49550: LD_INT 0
49552: ST_TO_ADDR
// uc_nation := 0 ;
49553: LD_ADDR_OWVAR 21
49557: PUSH
49558: LD_INT 0
49560: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49561: LD_ADDR_OWVAR 37
49565: PUSH
49566: LD_INT 31
49568: ST_TO_ADDR
// vc_control := control_rider ;
49569: LD_ADDR_OWVAR 38
49573: PUSH
49574: LD_INT 4
49576: ST_TO_ADDR
// end ;
49577: LD_VAR 0 1
49581: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49582: LD_INT 0
49584: PPUSH
49585: PPUSH
49586: PPUSH
// uc_side = 0 ;
49587: LD_ADDR_OWVAR 20
49591: PUSH
49592: LD_INT 0
49594: ST_TO_ADDR
// uc_nation = 0 ;
49595: LD_ADDR_OWVAR 21
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// InitHc_All ( ) ;
49603: CALL_OW 584
// InitVc ;
49607: CALL_OW 20
// if mastodonts then
49611: LD_VAR 0 6
49615: IFFALSE 49682
// for i = 1 to mastodonts do
49617: LD_ADDR_VAR 0 11
49621: PUSH
49622: DOUBLE
49623: LD_INT 1
49625: DEC
49626: ST_TO_ADDR
49627: LD_VAR 0 6
49631: PUSH
49632: FOR_TO
49633: IFFALSE 49680
// begin vc_chassis := 31 ;
49635: LD_ADDR_OWVAR 37
49639: PUSH
49640: LD_INT 31
49642: ST_TO_ADDR
// vc_control := control_rider ;
49643: LD_ADDR_OWVAR 38
49647: PUSH
49648: LD_INT 4
49650: ST_TO_ADDR
// animal := CreateVehicle ;
49651: LD_ADDR_VAR 0 12
49655: PUSH
49656: CALL_OW 45
49660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49661: LD_VAR 0 12
49665: PPUSH
49666: LD_VAR 0 8
49670: PPUSH
49671: LD_INT 0
49673: PPUSH
49674: CALL 51810 0 3
// end ;
49678: GO 49632
49680: POP
49681: POP
// if horses then
49682: LD_VAR 0 5
49686: IFFALSE 49753
// for i = 1 to horses do
49688: LD_ADDR_VAR 0 11
49692: PUSH
49693: DOUBLE
49694: LD_INT 1
49696: DEC
49697: ST_TO_ADDR
49698: LD_VAR 0 5
49702: PUSH
49703: FOR_TO
49704: IFFALSE 49751
// begin hc_class := 21 ;
49706: LD_ADDR_OWVAR 28
49710: PUSH
49711: LD_INT 21
49713: ST_TO_ADDR
// hc_gallery :=  ;
49714: LD_ADDR_OWVAR 33
49718: PUSH
49719: LD_STRING 
49721: ST_TO_ADDR
// animal := CreateHuman ;
49722: LD_ADDR_VAR 0 12
49726: PUSH
49727: CALL_OW 44
49731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49732: LD_VAR 0 12
49736: PPUSH
49737: LD_VAR 0 8
49741: PPUSH
49742: LD_INT 0
49744: PPUSH
49745: CALL 51810 0 3
// end ;
49749: GO 49703
49751: POP
49752: POP
// if birds then
49753: LD_VAR 0 1
49757: IFFALSE 49824
// for i = 1 to birds do
49759: LD_ADDR_VAR 0 11
49763: PUSH
49764: DOUBLE
49765: LD_INT 1
49767: DEC
49768: ST_TO_ADDR
49769: LD_VAR 0 1
49773: PUSH
49774: FOR_TO
49775: IFFALSE 49822
// begin hc_class := 18 ;
49777: LD_ADDR_OWVAR 28
49781: PUSH
49782: LD_INT 18
49784: ST_TO_ADDR
// hc_gallery =  ;
49785: LD_ADDR_OWVAR 33
49789: PUSH
49790: LD_STRING 
49792: ST_TO_ADDR
// animal := CreateHuman ;
49793: LD_ADDR_VAR 0 12
49797: PUSH
49798: CALL_OW 44
49802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49803: LD_VAR 0 12
49807: PPUSH
49808: LD_VAR 0 8
49812: PPUSH
49813: LD_INT 0
49815: PPUSH
49816: CALL 51810 0 3
// end ;
49820: GO 49774
49822: POP
49823: POP
// if tigers then
49824: LD_VAR 0 2
49828: IFFALSE 49912
// for i = 1 to tigers do
49830: LD_ADDR_VAR 0 11
49834: PUSH
49835: DOUBLE
49836: LD_INT 1
49838: DEC
49839: ST_TO_ADDR
49840: LD_VAR 0 2
49844: PUSH
49845: FOR_TO
49846: IFFALSE 49910
// begin hc_class = class_tiger ;
49848: LD_ADDR_OWVAR 28
49852: PUSH
49853: LD_INT 14
49855: ST_TO_ADDR
// hc_gallery =  ;
49856: LD_ADDR_OWVAR 33
49860: PUSH
49861: LD_STRING 
49863: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49864: LD_ADDR_OWVAR 35
49868: PUSH
49869: LD_INT 7
49871: NEG
49872: PPUSH
49873: LD_INT 7
49875: PPUSH
49876: CALL_OW 12
49880: ST_TO_ADDR
// animal := CreateHuman ;
49881: LD_ADDR_VAR 0 12
49885: PUSH
49886: CALL_OW 44
49890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49891: LD_VAR 0 12
49895: PPUSH
49896: LD_VAR 0 8
49900: PPUSH
49901: LD_INT 0
49903: PPUSH
49904: CALL 51810 0 3
// end ;
49908: GO 49845
49910: POP
49911: POP
// if apemans then
49912: LD_VAR 0 3
49916: IFFALSE 50039
// for i = 1 to apemans do
49918: LD_ADDR_VAR 0 11
49922: PUSH
49923: DOUBLE
49924: LD_INT 1
49926: DEC
49927: ST_TO_ADDR
49928: LD_VAR 0 3
49932: PUSH
49933: FOR_TO
49934: IFFALSE 50037
// begin hc_class = class_apeman ;
49936: LD_ADDR_OWVAR 28
49940: PUSH
49941: LD_INT 12
49943: ST_TO_ADDR
// hc_gallery =  ;
49944: LD_ADDR_OWVAR 33
49948: PUSH
49949: LD_STRING 
49951: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49952: LD_ADDR_OWVAR 35
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PPUSH
49961: LD_INT 2
49963: PPUSH
49964: CALL_OW 12
49968: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49969: LD_ADDR_OWVAR 31
49973: PUSH
49974: LD_INT 1
49976: PPUSH
49977: LD_INT 3
49979: PPUSH
49980: CALL_OW 12
49984: PUSH
49985: LD_INT 1
49987: PPUSH
49988: LD_INT 3
49990: PPUSH
49991: CALL_OW 12
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: ST_TO_ADDR
// animal := CreateHuman ;
50008: LD_ADDR_VAR 0 12
50012: PUSH
50013: CALL_OW 44
50017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50018: LD_VAR 0 12
50022: PPUSH
50023: LD_VAR 0 8
50027: PPUSH
50028: LD_INT 0
50030: PPUSH
50031: CALL 51810 0 3
// end ;
50035: GO 49933
50037: POP
50038: POP
// if enchidnas then
50039: LD_VAR 0 4
50043: IFFALSE 50110
// for i = 1 to enchidnas do
50045: LD_ADDR_VAR 0 11
50049: PUSH
50050: DOUBLE
50051: LD_INT 1
50053: DEC
50054: ST_TO_ADDR
50055: LD_VAR 0 4
50059: PUSH
50060: FOR_TO
50061: IFFALSE 50108
// begin hc_class = 13 ;
50063: LD_ADDR_OWVAR 28
50067: PUSH
50068: LD_INT 13
50070: ST_TO_ADDR
// hc_gallery =  ;
50071: LD_ADDR_OWVAR 33
50075: PUSH
50076: LD_STRING 
50078: ST_TO_ADDR
// animal := CreateHuman ;
50079: LD_ADDR_VAR 0 12
50083: PUSH
50084: CALL_OW 44
50088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50089: LD_VAR 0 12
50093: PPUSH
50094: LD_VAR 0 8
50098: PPUSH
50099: LD_INT 0
50101: PPUSH
50102: CALL 51810 0 3
// end ;
50106: GO 50060
50108: POP
50109: POP
// if fishes then
50110: LD_VAR 0 7
50114: IFFALSE 50181
// for i = 1 to fishes do
50116: LD_ADDR_VAR 0 11
50120: PUSH
50121: DOUBLE
50122: LD_INT 1
50124: DEC
50125: ST_TO_ADDR
50126: LD_VAR 0 7
50130: PUSH
50131: FOR_TO
50132: IFFALSE 50179
// begin hc_class = 20 ;
50134: LD_ADDR_OWVAR 28
50138: PUSH
50139: LD_INT 20
50141: ST_TO_ADDR
// hc_gallery =  ;
50142: LD_ADDR_OWVAR 33
50146: PUSH
50147: LD_STRING 
50149: ST_TO_ADDR
// animal := CreateHuman ;
50150: LD_ADDR_VAR 0 12
50154: PUSH
50155: CALL_OW 44
50159: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50160: LD_VAR 0 12
50164: PPUSH
50165: LD_VAR 0 9
50169: PPUSH
50170: LD_INT 0
50172: PPUSH
50173: CALL 51810 0 3
// end ;
50177: GO 50131
50179: POP
50180: POP
// end ;
50181: LD_VAR 0 10
50185: RET
// export function WantHeal ( sci , unit ) ; begin
50186: LD_INT 0
50188: PPUSH
// if GetTaskList ( sci ) > 0 then
50189: LD_VAR 0 1
50193: PPUSH
50194: CALL_OW 437
50198: PUSH
50199: LD_INT 0
50201: GREATER
50202: IFFALSE 50272
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50204: LD_VAR 0 1
50208: PPUSH
50209: CALL_OW 437
50213: PUSH
50214: LD_INT 1
50216: ARRAY
50217: PUSH
50218: LD_INT 1
50220: ARRAY
50221: PUSH
50222: LD_STRING l
50224: EQUAL
50225: PUSH
50226: LD_VAR 0 1
50230: PPUSH
50231: CALL_OW 437
50235: PUSH
50236: LD_INT 1
50238: ARRAY
50239: PUSH
50240: LD_INT 4
50242: ARRAY
50243: PUSH
50244: LD_VAR 0 2
50248: EQUAL
50249: AND
50250: IFFALSE 50262
// result := true else
50252: LD_ADDR_VAR 0 3
50256: PUSH
50257: LD_INT 1
50259: ST_TO_ADDR
50260: GO 50270
// result := false ;
50262: LD_ADDR_VAR 0 3
50266: PUSH
50267: LD_INT 0
50269: ST_TO_ADDR
// end else
50270: GO 50280
// result := false ;
50272: LD_ADDR_VAR 0 3
50276: PUSH
50277: LD_INT 0
50279: ST_TO_ADDR
// end ;
50280: LD_VAR 0 3
50284: RET
// export function HealTarget ( sci ) ; begin
50285: LD_INT 0
50287: PPUSH
// if not sci then
50288: LD_VAR 0 1
50292: NOT
50293: IFFALSE 50297
// exit ;
50295: GO 50362
// result := 0 ;
50297: LD_ADDR_VAR 0 2
50301: PUSH
50302: LD_INT 0
50304: ST_TO_ADDR
// if GetTaskList ( sci ) then
50305: LD_VAR 0 1
50309: PPUSH
50310: CALL_OW 437
50314: IFFALSE 50362
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50316: LD_VAR 0 1
50320: PPUSH
50321: CALL_OW 437
50325: PUSH
50326: LD_INT 1
50328: ARRAY
50329: PUSH
50330: LD_INT 1
50332: ARRAY
50333: PUSH
50334: LD_STRING l
50336: EQUAL
50337: IFFALSE 50362
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50339: LD_ADDR_VAR 0 2
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: CALL_OW 437
50353: PUSH
50354: LD_INT 1
50356: ARRAY
50357: PUSH
50358: LD_INT 4
50360: ARRAY
50361: ST_TO_ADDR
// end ;
50362: LD_VAR 0 2
50366: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50367: LD_INT 0
50369: PPUSH
50370: PPUSH
50371: PPUSH
50372: PPUSH
// if not base_units then
50373: LD_VAR 0 1
50377: NOT
50378: IFFALSE 50382
// exit ;
50380: GO 50469
// result := false ;
50382: LD_ADDR_VAR 0 2
50386: PUSH
50387: LD_INT 0
50389: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50390: LD_ADDR_VAR 0 5
50394: PUSH
50395: LD_VAR 0 1
50399: PPUSH
50400: LD_INT 21
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PPUSH
50410: CALL_OW 72
50414: ST_TO_ADDR
// if not tmp then
50415: LD_VAR 0 5
50419: NOT
50420: IFFALSE 50424
// exit ;
50422: GO 50469
// for i in tmp do
50424: LD_ADDR_VAR 0 3
50428: PUSH
50429: LD_VAR 0 5
50433: PUSH
50434: FOR_IN
50435: IFFALSE 50467
// begin result := EnemyInRange ( i , 22 ) ;
50437: LD_ADDR_VAR 0 2
50441: PUSH
50442: LD_VAR 0 3
50446: PPUSH
50447: LD_INT 22
50449: PPUSH
50450: CALL 48067 0 2
50454: ST_TO_ADDR
// if result then
50455: LD_VAR 0 2
50459: IFFALSE 50465
// exit ;
50461: POP
50462: POP
50463: GO 50469
// end ;
50465: GO 50434
50467: POP
50468: POP
// end ;
50469: LD_VAR 0 2
50473: RET
// export function FilterByTag ( units , tag ) ; begin
50474: LD_INT 0
50476: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50477: LD_ADDR_VAR 0 3
50481: PUSH
50482: LD_VAR 0 1
50486: PPUSH
50487: LD_INT 120
50489: PUSH
50490: LD_VAR 0 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PPUSH
50499: CALL_OW 72
50503: ST_TO_ADDR
// end ;
50504: LD_VAR 0 3
50508: RET
// export function IsDriver ( un ) ; begin
50509: LD_INT 0
50511: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50512: LD_ADDR_VAR 0 2
50516: PUSH
50517: LD_VAR 0 1
50521: PUSH
50522: LD_INT 55
50524: PUSH
50525: EMPTY
50526: LIST
50527: PPUSH
50528: CALL_OW 69
50532: IN
50533: ST_TO_ADDR
// end ;
50534: LD_VAR 0 2
50538: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50539: LD_INT 0
50541: PPUSH
50542: PPUSH
// list := [ ] ;
50543: LD_ADDR_VAR 0 5
50547: PUSH
50548: EMPTY
50549: ST_TO_ADDR
// case d of 0 :
50550: LD_VAR 0 3
50554: PUSH
50555: LD_INT 0
50557: DOUBLE
50558: EQUAL
50559: IFTRUE 50563
50561: GO 50696
50563: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50564: LD_ADDR_VAR 0 5
50568: PUSH
50569: LD_VAR 0 1
50573: PUSH
50574: LD_INT 4
50576: MINUS
50577: PUSH
50578: LD_VAR 0 2
50582: PUSH
50583: LD_INT 4
50585: MINUS
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: PUSH
50595: LD_VAR 0 1
50599: PUSH
50600: LD_INT 3
50602: MINUS
50603: PUSH
50604: LD_VAR 0 2
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: PUSH
50617: LD_VAR 0 1
50621: PUSH
50622: LD_INT 4
50624: PLUS
50625: PUSH
50626: LD_VAR 0 2
50630: PUSH
50631: LD_INT 4
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: PUSH
50639: LD_VAR 0 1
50643: PUSH
50644: LD_INT 3
50646: PLUS
50647: PUSH
50648: LD_VAR 0 2
50652: PUSH
50653: LD_INT 3
50655: PLUS
50656: PUSH
50657: LD_INT 5
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: PUSH
50665: LD_VAR 0 1
50669: PUSH
50670: LD_VAR 0 2
50674: PUSH
50675: LD_INT 4
50677: PLUS
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: ST_TO_ADDR
// end ; 1 :
50694: GO 51394
50696: LD_INT 1
50698: DOUBLE
50699: EQUAL
50700: IFTRUE 50704
50702: GO 50837
50704: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50705: LD_ADDR_VAR 0 5
50709: PUSH
50710: LD_VAR 0 1
50714: PUSH
50715: LD_VAR 0 2
50719: PUSH
50720: LD_INT 4
50722: MINUS
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: PUSH
50732: LD_VAR 0 1
50736: PUSH
50737: LD_INT 3
50739: MINUS
50740: PUSH
50741: LD_VAR 0 2
50745: PUSH
50746: LD_INT 3
50748: MINUS
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: PUSH
50758: LD_VAR 0 1
50762: PUSH
50763: LD_INT 4
50765: MINUS
50766: PUSH
50767: LD_VAR 0 2
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: PUSH
50780: LD_VAR 0 1
50784: PUSH
50785: LD_VAR 0 2
50789: PUSH
50790: LD_INT 3
50792: PLUS
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: PUSH
50802: LD_VAR 0 1
50806: PUSH
50807: LD_INT 4
50809: PLUS
50810: PUSH
50811: LD_VAR 0 2
50815: PUSH
50816: LD_INT 4
50818: PLUS
50819: PUSH
50820: LD_INT 5
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: ST_TO_ADDR
// end ; 2 :
50835: GO 51394
50837: LD_INT 2
50839: DOUBLE
50840: EQUAL
50841: IFTRUE 50845
50843: GO 50974
50845: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50846: LD_ADDR_VAR 0 5
50850: PUSH
50851: LD_VAR 0 1
50855: PUSH
50856: LD_VAR 0 2
50860: PUSH
50861: LD_INT 3
50863: MINUS
50864: PUSH
50865: LD_INT 3
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: PUSH
50873: LD_VAR 0 1
50877: PUSH
50878: LD_INT 4
50880: PLUS
50881: PUSH
50882: LD_VAR 0 2
50886: PUSH
50887: LD_INT 4
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: PUSH
50895: LD_VAR 0 1
50899: PUSH
50900: LD_VAR 0 2
50904: PUSH
50905: LD_INT 4
50907: PLUS
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: PUSH
50917: LD_VAR 0 1
50921: PUSH
50922: LD_INT 3
50924: MINUS
50925: PUSH
50926: LD_VAR 0 2
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: LIST
50938: PUSH
50939: LD_VAR 0 1
50943: PUSH
50944: LD_INT 4
50946: MINUS
50947: PUSH
50948: LD_VAR 0 2
50952: PUSH
50953: LD_INT 4
50955: MINUS
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: ST_TO_ADDR
// end ; 3 :
50972: GO 51394
50974: LD_INT 3
50976: DOUBLE
50977: EQUAL
50978: IFTRUE 50982
50980: GO 51115
50982: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50983: LD_ADDR_VAR 0 5
50987: PUSH
50988: LD_VAR 0 1
50992: PUSH
50993: LD_INT 3
50995: PLUS
50996: PUSH
50997: LD_VAR 0 2
51001: PUSH
51002: LD_INT 4
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: PUSH
51010: LD_VAR 0 1
51014: PUSH
51015: LD_INT 4
51017: PLUS
51018: PUSH
51019: LD_VAR 0 2
51023: PUSH
51024: LD_INT 4
51026: PLUS
51027: PUSH
51028: LD_INT 5
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: PUSH
51036: LD_VAR 0 1
51040: PUSH
51041: LD_INT 4
51043: MINUS
51044: PUSH
51045: LD_VAR 0 2
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: PUSH
51058: LD_VAR 0 1
51062: PUSH
51063: LD_VAR 0 2
51067: PUSH
51068: LD_INT 4
51070: MINUS
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: PUSH
51080: LD_VAR 0 1
51084: PUSH
51085: LD_INT 3
51087: MINUS
51088: PUSH
51089: LD_VAR 0 2
51093: PUSH
51094: LD_INT 3
51096: MINUS
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// end ; 4 :
51113: GO 51394
51115: LD_INT 4
51117: DOUBLE
51118: EQUAL
51119: IFTRUE 51123
51121: GO 51256
51123: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51124: LD_ADDR_VAR 0 5
51128: PUSH
51129: LD_VAR 0 1
51133: PUSH
51134: LD_VAR 0 2
51138: PUSH
51139: LD_INT 4
51141: PLUS
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: PUSH
51151: LD_VAR 0 1
51155: PUSH
51156: LD_INT 3
51158: PLUS
51159: PUSH
51160: LD_VAR 0 2
51164: PUSH
51165: LD_INT 3
51167: PLUS
51168: PUSH
51169: LD_INT 5
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: PUSH
51177: LD_VAR 0 1
51181: PUSH
51182: LD_INT 4
51184: PLUS
51185: PUSH
51186: LD_VAR 0 2
51190: PUSH
51191: LD_INT 4
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: LIST
51198: PUSH
51199: LD_VAR 0 1
51203: PUSH
51204: LD_VAR 0 2
51208: PUSH
51209: LD_INT 3
51211: MINUS
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: PUSH
51221: LD_VAR 0 1
51225: PUSH
51226: LD_INT 4
51228: MINUS
51229: PUSH
51230: LD_VAR 0 2
51234: PUSH
51235: LD_INT 4
51237: MINUS
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
// end ; 5 :
51254: GO 51394
51256: LD_INT 5
51258: DOUBLE
51259: EQUAL
51260: IFTRUE 51264
51262: GO 51393
51264: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51265: LD_ADDR_VAR 0 5
51269: PUSH
51270: LD_VAR 0 1
51274: PUSH
51275: LD_INT 4
51277: MINUS
51278: PUSH
51279: LD_VAR 0 2
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: PUSH
51292: LD_VAR 0 1
51296: PUSH
51297: LD_VAR 0 2
51301: PUSH
51302: LD_INT 4
51304: MINUS
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: PUSH
51314: LD_VAR 0 1
51318: PUSH
51319: LD_INT 4
51321: PLUS
51322: PUSH
51323: LD_VAR 0 2
51327: PUSH
51328: LD_INT 4
51330: PLUS
51331: PUSH
51332: LD_INT 5
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: PUSH
51340: LD_VAR 0 1
51344: PUSH
51345: LD_INT 3
51347: PLUS
51348: PUSH
51349: LD_VAR 0 2
51353: PUSH
51354: LD_INT 4
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: PUSH
51362: LD_VAR 0 1
51366: PUSH
51367: LD_VAR 0 2
51371: PUSH
51372: LD_INT 3
51374: PLUS
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// end ; end ;
51391: GO 51394
51393: POP
// result := list ;
51394: LD_ADDR_VAR 0 4
51398: PUSH
51399: LD_VAR 0 5
51403: ST_TO_ADDR
// end ;
51404: LD_VAR 0 4
51408: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51409: LD_INT 0
51411: PPUSH
51412: PPUSH
51413: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51414: LD_VAR 0 1
51418: NOT
51419: PUSH
51420: LD_VAR 0 2
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: IN
51443: NOT
51444: OR
51445: IFFALSE 51449
// exit ;
51447: GO 51532
// tmp := [ ] ;
51449: LD_ADDR_VAR 0 5
51453: PUSH
51454: EMPTY
51455: ST_TO_ADDR
// for i in units do
51456: LD_ADDR_VAR 0 4
51460: PUSH
51461: LD_VAR 0 1
51465: PUSH
51466: FOR_IN
51467: IFFALSE 51501
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51469: LD_ADDR_VAR 0 5
51473: PUSH
51474: LD_VAR 0 5
51478: PPUSH
51479: LD_VAR 0 4
51483: PPUSH
51484: LD_VAR 0 2
51488: PPUSH
51489: CALL_OW 259
51493: PPUSH
51494: CALL 52905 0 2
51498: ST_TO_ADDR
51499: GO 51466
51501: POP
51502: POP
// if not tmp then
51503: LD_VAR 0 5
51507: NOT
51508: IFFALSE 51512
// exit ;
51510: GO 51532
// result := SortListByListDesc ( units , tmp ) ;
51512: LD_ADDR_VAR 0 3
51516: PUSH
51517: LD_VAR 0 1
51521: PPUSH
51522: LD_VAR 0 5
51526: PPUSH
51527: CALL_OW 77
51531: ST_TO_ADDR
// end ;
51532: LD_VAR 0 3
51536: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51537: LD_INT 0
51539: PPUSH
51540: PPUSH
51541: PPUSH
// result := false ;
51542: LD_ADDR_VAR 0 3
51546: PUSH
51547: LD_INT 0
51549: ST_TO_ADDR
// if not building then
51550: LD_VAR 0 2
51554: NOT
51555: IFFALSE 51559
// exit ;
51557: GO 51697
// x := GetX ( building ) ;
51559: LD_ADDR_VAR 0 4
51563: PUSH
51564: LD_VAR 0 2
51568: PPUSH
51569: CALL_OW 250
51573: ST_TO_ADDR
// y := GetY ( building ) ;
51574: LD_ADDR_VAR 0 5
51578: PUSH
51579: LD_VAR 0 2
51583: PPUSH
51584: CALL_OW 251
51588: ST_TO_ADDR
// if not x or not y then
51589: LD_VAR 0 4
51593: NOT
51594: PUSH
51595: LD_VAR 0 5
51599: NOT
51600: OR
51601: IFFALSE 51605
// exit ;
51603: GO 51697
// if GetTaskList ( unit ) then
51605: LD_VAR 0 1
51609: PPUSH
51610: CALL_OW 437
51614: IFFALSE 51697
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51616: LD_STRING e
51618: PUSH
51619: LD_VAR 0 1
51623: PPUSH
51624: CALL_OW 437
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: PUSH
51633: LD_INT 1
51635: ARRAY
51636: EQUAL
51637: PUSH
51638: LD_VAR 0 4
51642: PUSH
51643: LD_VAR 0 1
51647: PPUSH
51648: CALL_OW 437
51652: PUSH
51653: LD_INT 1
51655: ARRAY
51656: PUSH
51657: LD_INT 2
51659: ARRAY
51660: EQUAL
51661: AND
51662: PUSH
51663: LD_VAR 0 5
51667: PUSH
51668: LD_VAR 0 1
51672: PPUSH
51673: CALL_OW 437
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: PUSH
51682: LD_INT 3
51684: ARRAY
51685: EQUAL
51686: AND
51687: IFFALSE 51697
// result := true end ;
51689: LD_ADDR_VAR 0 3
51693: PUSH
51694: LD_INT 1
51696: ST_TO_ADDR
// end ;
51697: LD_VAR 0 3
51701: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51702: LD_INT 0
51704: PPUSH
// result := false ;
51705: LD_ADDR_VAR 0 4
51709: PUSH
51710: LD_INT 0
51712: ST_TO_ADDR
// if GetTaskList ( unit ) then
51713: LD_VAR 0 1
51717: PPUSH
51718: CALL_OW 437
51722: IFFALSE 51805
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51724: LD_STRING M
51726: PUSH
51727: LD_VAR 0 1
51731: PPUSH
51732: CALL_OW 437
51736: PUSH
51737: LD_INT 1
51739: ARRAY
51740: PUSH
51741: LD_INT 1
51743: ARRAY
51744: EQUAL
51745: PUSH
51746: LD_VAR 0 2
51750: PUSH
51751: LD_VAR 0 1
51755: PPUSH
51756: CALL_OW 437
51760: PUSH
51761: LD_INT 1
51763: ARRAY
51764: PUSH
51765: LD_INT 2
51767: ARRAY
51768: EQUAL
51769: AND
51770: PUSH
51771: LD_VAR 0 3
51775: PUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: CALL_OW 437
51785: PUSH
51786: LD_INT 1
51788: ARRAY
51789: PUSH
51790: LD_INT 3
51792: ARRAY
51793: EQUAL
51794: AND
51795: IFFALSE 51805
// result := true ;
51797: LD_ADDR_VAR 0 4
51801: PUSH
51802: LD_INT 1
51804: ST_TO_ADDR
// end ; end ;
51805: LD_VAR 0 4
51809: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51810: LD_INT 0
51812: PPUSH
51813: PPUSH
51814: PPUSH
51815: PPUSH
// if not unit or not area then
51816: LD_VAR 0 1
51820: NOT
51821: PUSH
51822: LD_VAR 0 2
51826: NOT
51827: OR
51828: IFFALSE 51832
// exit ;
51830: GO 52008
// tmp := AreaToList ( area , i ) ;
51832: LD_ADDR_VAR 0 6
51836: PUSH
51837: LD_VAR 0 2
51841: PPUSH
51842: LD_VAR 0 5
51846: PPUSH
51847: CALL_OW 517
51851: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51852: LD_ADDR_VAR 0 5
51856: PUSH
51857: DOUBLE
51858: LD_INT 1
51860: DEC
51861: ST_TO_ADDR
51862: LD_VAR 0 6
51866: PUSH
51867: LD_INT 1
51869: ARRAY
51870: PUSH
51871: FOR_TO
51872: IFFALSE 52006
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51874: LD_ADDR_VAR 0 7
51878: PUSH
51879: LD_VAR 0 6
51883: PUSH
51884: LD_INT 1
51886: ARRAY
51887: PUSH
51888: LD_VAR 0 5
51892: ARRAY
51893: PUSH
51894: LD_VAR 0 6
51898: PUSH
51899: LD_INT 2
51901: ARRAY
51902: PUSH
51903: LD_VAR 0 5
51907: ARRAY
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51913: LD_INT 92
51915: PUSH
51916: LD_VAR 0 7
51920: PUSH
51921: LD_INT 1
51923: ARRAY
51924: PUSH
51925: LD_VAR 0 7
51929: PUSH
51930: LD_INT 2
51932: ARRAY
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: PPUSH
51943: CALL_OW 69
51947: PUSH
51948: LD_INT 0
51950: EQUAL
51951: IFFALSE 52004
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51953: LD_VAR 0 1
51957: PPUSH
51958: LD_VAR 0 7
51962: PUSH
51963: LD_INT 1
51965: ARRAY
51966: PPUSH
51967: LD_VAR 0 7
51971: PUSH
51972: LD_INT 2
51974: ARRAY
51975: PPUSH
51976: LD_VAR 0 3
51980: PPUSH
51981: CALL_OW 48
// result := IsPlaced ( unit ) ;
51985: LD_ADDR_VAR 0 4
51989: PUSH
51990: LD_VAR 0 1
51994: PPUSH
51995: CALL_OW 305
51999: ST_TO_ADDR
// exit ;
52000: POP
52001: POP
52002: GO 52008
// end ; end ;
52004: GO 51871
52006: POP
52007: POP
// end ;
52008: LD_VAR 0 4
52012: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52013: LD_INT 0
52015: PPUSH
52016: PPUSH
52017: PPUSH
// if not side or side > 8 then
52018: LD_VAR 0 1
52022: NOT
52023: PUSH
52024: LD_VAR 0 1
52028: PUSH
52029: LD_INT 8
52031: GREATER
52032: OR
52033: IFFALSE 52037
// exit ;
52035: GO 52224
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52037: LD_ADDR_VAR 0 4
52041: PUSH
52042: LD_INT 22
52044: PUSH
52045: LD_VAR 0 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 21
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PPUSH
52068: CALL_OW 69
52072: ST_TO_ADDR
// if not tmp then
52073: LD_VAR 0 4
52077: NOT
52078: IFFALSE 52082
// exit ;
52080: GO 52224
// enable_addtolog := true ;
52082: LD_ADDR_OWVAR 81
52086: PUSH
52087: LD_INT 1
52089: ST_TO_ADDR
// AddToLog ( [ ) ;
52090: LD_STRING [
52092: PPUSH
52093: CALL_OW 561
// for i in tmp do
52097: LD_ADDR_VAR 0 3
52101: PUSH
52102: LD_VAR 0 4
52106: PUSH
52107: FOR_IN
52108: IFFALSE 52215
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52110: LD_STRING [
52112: PUSH
52113: LD_VAR 0 3
52117: PPUSH
52118: CALL_OW 266
52122: STR
52123: PUSH
52124: LD_STRING , 
52126: STR
52127: PUSH
52128: LD_VAR 0 3
52132: PPUSH
52133: CALL_OW 250
52137: STR
52138: PUSH
52139: LD_STRING , 
52141: STR
52142: PUSH
52143: LD_VAR 0 3
52147: PPUSH
52148: CALL_OW 251
52152: STR
52153: PUSH
52154: LD_STRING , 
52156: STR
52157: PUSH
52158: LD_VAR 0 3
52162: PPUSH
52163: CALL_OW 254
52167: STR
52168: PUSH
52169: LD_STRING , 
52171: STR
52172: PUSH
52173: LD_VAR 0 3
52177: PPUSH
52178: LD_INT 1
52180: PPUSH
52181: CALL_OW 268
52185: STR
52186: PUSH
52187: LD_STRING , 
52189: STR
52190: PUSH
52191: LD_VAR 0 3
52195: PPUSH
52196: LD_INT 2
52198: PPUSH
52199: CALL_OW 268
52203: STR
52204: PUSH
52205: LD_STRING ],
52207: STR
52208: PPUSH
52209: CALL_OW 561
// end ;
52213: GO 52107
52215: POP
52216: POP
// AddToLog ( ]; ) ;
52217: LD_STRING ];
52219: PPUSH
52220: CALL_OW 561
// end ;
52224: LD_VAR 0 2
52228: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52229: LD_INT 0
52231: PPUSH
52232: PPUSH
52233: PPUSH
52234: PPUSH
52235: PPUSH
// if not area or not rate or not max then
52236: LD_VAR 0 1
52240: NOT
52241: PUSH
52242: LD_VAR 0 2
52246: NOT
52247: OR
52248: PUSH
52249: LD_VAR 0 4
52253: NOT
52254: OR
52255: IFFALSE 52259
// exit ;
52257: GO 52448
// while 1 do
52259: LD_INT 1
52261: IFFALSE 52448
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52263: LD_ADDR_VAR 0 9
52267: PUSH
52268: LD_VAR 0 1
52272: PPUSH
52273: LD_INT 1
52275: PPUSH
52276: CALL_OW 287
52280: PUSH
52281: LD_INT 10
52283: MUL
52284: ST_TO_ADDR
// r := rate / 10 ;
52285: LD_ADDR_VAR 0 7
52289: PUSH
52290: LD_VAR 0 2
52294: PUSH
52295: LD_INT 10
52297: DIVREAL
52298: ST_TO_ADDR
// time := 1 1$00 ;
52299: LD_ADDR_VAR 0 8
52303: PUSH
52304: LD_INT 2100
52306: ST_TO_ADDR
// if amount < min then
52307: LD_VAR 0 9
52311: PUSH
52312: LD_VAR 0 3
52316: LESS
52317: IFFALSE 52335
// r := r * 2 else
52319: LD_ADDR_VAR 0 7
52323: PUSH
52324: LD_VAR 0 7
52328: PUSH
52329: LD_INT 2
52331: MUL
52332: ST_TO_ADDR
52333: GO 52361
// if amount > max then
52335: LD_VAR 0 9
52339: PUSH
52340: LD_VAR 0 4
52344: GREATER
52345: IFFALSE 52361
// r := r / 2 ;
52347: LD_ADDR_VAR 0 7
52351: PUSH
52352: LD_VAR 0 7
52356: PUSH
52357: LD_INT 2
52359: DIVREAL
52360: ST_TO_ADDR
// time := time / r ;
52361: LD_ADDR_VAR 0 8
52365: PUSH
52366: LD_VAR 0 8
52370: PUSH
52371: LD_VAR 0 7
52375: DIVREAL
52376: ST_TO_ADDR
// if time < 0 then
52377: LD_VAR 0 8
52381: PUSH
52382: LD_INT 0
52384: LESS
52385: IFFALSE 52402
// time := time * - 1 ;
52387: LD_ADDR_VAR 0 8
52391: PUSH
52392: LD_VAR 0 8
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: MUL
52401: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52402: LD_VAR 0 8
52406: PUSH
52407: LD_INT 35
52409: PPUSH
52410: LD_INT 875
52412: PPUSH
52413: CALL_OW 12
52417: PLUS
52418: PPUSH
52419: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52423: LD_INT 1
52425: PPUSH
52426: LD_INT 5
52428: PPUSH
52429: CALL_OW 12
52433: PPUSH
52434: LD_VAR 0 1
52438: PPUSH
52439: LD_INT 1
52441: PPUSH
52442: CALL_OW 55
// end ;
52446: GO 52259
// end ;
52448: LD_VAR 0 5
52452: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52453: LD_INT 0
52455: PPUSH
52456: PPUSH
52457: PPUSH
52458: PPUSH
52459: PPUSH
52460: PPUSH
52461: PPUSH
52462: PPUSH
// if not turrets or not factories then
52463: LD_VAR 0 1
52467: NOT
52468: PUSH
52469: LD_VAR 0 2
52473: NOT
52474: OR
52475: IFFALSE 52479
// exit ;
52477: GO 52786
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52479: LD_ADDR_VAR 0 10
52483: PUSH
52484: LD_INT 5
52486: PUSH
52487: LD_INT 6
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: LD_INT 4
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: LD_INT 5
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 24
52521: PUSH
52522: LD_INT 25
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 23
52531: PUSH
52532: LD_INT 27
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 42
52545: PUSH
52546: LD_INT 43
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 44
52555: PUSH
52556: LD_INT 46
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 45
52565: PUSH
52566: LD_INT 47
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: ST_TO_ADDR
// result := [ ] ;
52583: LD_ADDR_VAR 0 3
52587: PUSH
52588: EMPTY
52589: ST_TO_ADDR
// for i in turrets do
52590: LD_ADDR_VAR 0 4
52594: PUSH
52595: LD_VAR 0 1
52599: PUSH
52600: FOR_IN
52601: IFFALSE 52784
// begin nat := GetNation ( i ) ;
52603: LD_ADDR_VAR 0 7
52607: PUSH
52608: LD_VAR 0 4
52612: PPUSH
52613: CALL_OW 248
52617: ST_TO_ADDR
// weapon := 0 ;
52618: LD_ADDR_VAR 0 8
52622: PUSH
52623: LD_INT 0
52625: ST_TO_ADDR
// if not nat then
52626: LD_VAR 0 7
52630: NOT
52631: IFFALSE 52635
// continue ;
52633: GO 52600
// for j in list [ nat ] do
52635: LD_ADDR_VAR 0 5
52639: PUSH
52640: LD_VAR 0 10
52644: PUSH
52645: LD_VAR 0 7
52649: ARRAY
52650: PUSH
52651: FOR_IN
52652: IFFALSE 52693
// if GetBWeapon ( i ) = j [ 1 ] then
52654: LD_VAR 0 4
52658: PPUSH
52659: CALL_OW 269
52663: PUSH
52664: LD_VAR 0 5
52668: PUSH
52669: LD_INT 1
52671: ARRAY
52672: EQUAL
52673: IFFALSE 52691
// begin weapon := j [ 2 ] ;
52675: LD_ADDR_VAR 0 8
52679: PUSH
52680: LD_VAR 0 5
52684: PUSH
52685: LD_INT 2
52687: ARRAY
52688: ST_TO_ADDR
// break ;
52689: GO 52693
// end ;
52691: GO 52651
52693: POP
52694: POP
// if not weapon then
52695: LD_VAR 0 8
52699: NOT
52700: IFFALSE 52704
// continue ;
52702: GO 52600
// for k in factories do
52704: LD_ADDR_VAR 0 6
52708: PUSH
52709: LD_VAR 0 2
52713: PUSH
52714: FOR_IN
52715: IFFALSE 52780
// begin weapons := AvailableWeaponList ( k ) ;
52717: LD_ADDR_VAR 0 9
52721: PUSH
52722: LD_VAR 0 6
52726: PPUSH
52727: CALL_OW 478
52731: ST_TO_ADDR
// if not weapons then
52732: LD_VAR 0 9
52736: NOT
52737: IFFALSE 52741
// continue ;
52739: GO 52714
// if weapon in weapons then
52741: LD_VAR 0 8
52745: PUSH
52746: LD_VAR 0 9
52750: IN
52751: IFFALSE 52778
// begin result := [ i , weapon ] ;
52753: LD_ADDR_VAR 0 3
52757: PUSH
52758: LD_VAR 0 4
52762: PUSH
52763: LD_VAR 0 8
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: ST_TO_ADDR
// exit ;
52772: POP
52773: POP
52774: POP
52775: POP
52776: GO 52786
// end ; end ;
52778: GO 52714
52780: POP
52781: POP
// end ;
52782: GO 52600
52784: POP
52785: POP
// end ;
52786: LD_VAR 0 3
52790: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52791: LD_INT 0
52793: PPUSH
// if not side or side > 8 then
52794: LD_VAR 0 3
52798: NOT
52799: PUSH
52800: LD_VAR 0 3
52804: PUSH
52805: LD_INT 8
52807: GREATER
52808: OR
52809: IFFALSE 52813
// exit ;
52811: GO 52872
// if not range then
52813: LD_VAR 0 4
52817: NOT
52818: IFFALSE 52829
// range := - 12 ;
52820: LD_ADDR_VAR 0 4
52824: PUSH
52825: LD_INT 12
52827: NEG
52828: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52829: LD_VAR 0 1
52833: PPUSH
52834: LD_VAR 0 2
52838: PPUSH
52839: LD_VAR 0 3
52843: PPUSH
52844: LD_VAR 0 4
52848: PPUSH
52849: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52853: LD_VAR 0 1
52857: PPUSH
52858: LD_VAR 0 2
52862: PPUSH
52863: LD_VAR 0 3
52867: PPUSH
52868: CALL_OW 331
// end ;
52872: LD_VAR 0 5
52876: RET
// export function Video ( mode ) ; begin
52877: LD_INT 0
52879: PPUSH
// ingame_video = mode ;
52880: LD_ADDR_OWVAR 52
52884: PUSH
52885: LD_VAR 0 1
52889: ST_TO_ADDR
// interface_hidden = mode ;
52890: LD_ADDR_OWVAR 54
52894: PUSH
52895: LD_VAR 0 1
52899: ST_TO_ADDR
// end ;
52900: LD_VAR 0 2
52904: RET
// export function Join ( array , element ) ; begin
52905: LD_INT 0
52907: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52908: LD_ADDR_VAR 0 3
52912: PUSH
52913: LD_VAR 0 1
52917: PPUSH
52918: LD_VAR 0 1
52922: PUSH
52923: LD_INT 1
52925: PLUS
52926: PPUSH
52927: LD_VAR 0 2
52931: PPUSH
52932: CALL_OW 1
52936: ST_TO_ADDR
// end ;
52937: LD_VAR 0 3
52941: RET
// export function JoinUnion ( array , element ) ; begin
52942: LD_INT 0
52944: PPUSH
// result := array union element ;
52945: LD_ADDR_VAR 0 3
52949: PUSH
52950: LD_VAR 0 1
52954: PUSH
52955: LD_VAR 0 2
52959: UNION
52960: ST_TO_ADDR
// end ;
52961: LD_VAR 0 3
52965: RET
// export function GetBehemoths ( side ) ; begin
52966: LD_INT 0
52968: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52969: LD_ADDR_VAR 0 2
52973: PUSH
52974: LD_INT 22
52976: PUSH
52977: LD_VAR 0 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 31
52988: PUSH
52989: LD_INT 25
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PPUSH
53000: CALL_OW 69
53004: ST_TO_ADDR
// end ;
53005: LD_VAR 0 2
53009: RET
// export function Shuffle ( array ) ; var i , index ; begin
53010: LD_INT 0
53012: PPUSH
53013: PPUSH
53014: PPUSH
// result := [ ] ;
53015: LD_ADDR_VAR 0 2
53019: PUSH
53020: EMPTY
53021: ST_TO_ADDR
// if not array then
53022: LD_VAR 0 1
53026: NOT
53027: IFFALSE 53031
// exit ;
53029: GO 53130
// Randomize ;
53031: CALL_OW 10
// for i = array downto 1 do
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: DOUBLE
53041: LD_VAR 0 1
53045: INC
53046: ST_TO_ADDR
53047: LD_INT 1
53049: PUSH
53050: FOR_DOWNTO
53051: IFFALSE 53128
// begin index := rand ( 1 , array ) ;
53053: LD_ADDR_VAR 0 4
53057: PUSH
53058: LD_INT 1
53060: PPUSH
53061: LD_VAR 0 1
53065: PPUSH
53066: CALL_OW 12
53070: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53071: LD_ADDR_VAR 0 2
53075: PUSH
53076: LD_VAR 0 2
53080: PPUSH
53081: LD_VAR 0 2
53085: PUSH
53086: LD_INT 1
53088: PLUS
53089: PPUSH
53090: LD_VAR 0 1
53094: PUSH
53095: LD_VAR 0 4
53099: ARRAY
53100: PPUSH
53101: CALL_OW 2
53105: ST_TO_ADDR
// array := Delete ( array , index ) ;
53106: LD_ADDR_VAR 0 1
53110: PUSH
53111: LD_VAR 0 1
53115: PPUSH
53116: LD_VAR 0 4
53120: PPUSH
53121: CALL_OW 3
53125: ST_TO_ADDR
// end ;
53126: GO 53050
53128: POP
53129: POP
// end ;
53130: LD_VAR 0 2
53134: RET
// export function GetBaseMaterials ( base ) ; begin
53135: LD_INT 0
53137: PPUSH
// result := [ 0 , 0 , 0 ] ;
53138: LD_ADDR_VAR 0 2
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: ST_TO_ADDR
// if not base then
53157: LD_VAR 0 1
53161: NOT
53162: IFFALSE 53166
// exit ;
53164: GO 53215
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53166: LD_ADDR_VAR 0 2
53170: PUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: LD_INT 1
53178: PPUSH
53179: CALL_OW 275
53183: PUSH
53184: LD_VAR 0 1
53188: PPUSH
53189: LD_INT 2
53191: PPUSH
53192: CALL_OW 275
53196: PUSH
53197: LD_VAR 0 1
53201: PPUSH
53202: LD_INT 3
53204: PPUSH
53205: CALL_OW 275
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: ST_TO_ADDR
// end ;
53215: LD_VAR 0 2
53219: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53220: LD_INT 0
53222: PPUSH
53223: PPUSH
// result := array ;
53224: LD_ADDR_VAR 0 3
53228: PUSH
53229: LD_VAR 0 1
53233: ST_TO_ADDR
// if size >= result then
53234: LD_VAR 0 2
53238: PUSH
53239: LD_VAR 0 3
53243: GREATEREQUAL
53244: IFFALSE 53248
// exit ;
53246: GO 53298
// if size then
53248: LD_VAR 0 2
53252: IFFALSE 53298
// for i := array downto size do
53254: LD_ADDR_VAR 0 4
53258: PUSH
53259: DOUBLE
53260: LD_VAR 0 1
53264: INC
53265: ST_TO_ADDR
53266: LD_VAR 0 2
53270: PUSH
53271: FOR_DOWNTO
53272: IFFALSE 53296
// result := Delete ( result , result ) ;
53274: LD_ADDR_VAR 0 3
53278: PUSH
53279: LD_VAR 0 3
53283: PPUSH
53284: LD_VAR 0 3
53288: PPUSH
53289: CALL_OW 3
53293: ST_TO_ADDR
53294: GO 53271
53296: POP
53297: POP
// end ;
53298: LD_VAR 0 3
53302: RET
// export function ComExit ( unit ) ; var tmp ; begin
53303: LD_INT 0
53305: PPUSH
53306: PPUSH
// if not IsInUnit ( unit ) then
53307: LD_VAR 0 1
53311: PPUSH
53312: CALL_OW 310
53316: NOT
53317: IFFALSE 53321
// exit ;
53319: GO 53381
// tmp := IsInUnit ( unit ) ;
53321: LD_ADDR_VAR 0 3
53325: PUSH
53326: LD_VAR 0 1
53330: PPUSH
53331: CALL_OW 310
53335: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53336: LD_VAR 0 3
53340: PPUSH
53341: CALL_OW 247
53345: PUSH
53346: LD_INT 2
53348: EQUAL
53349: IFFALSE 53362
// ComExitVehicle ( unit ) else
53351: LD_VAR 0 1
53355: PPUSH
53356: CALL_OW 121
53360: GO 53371
// ComExitBuilding ( unit ) ;
53362: LD_VAR 0 1
53366: PPUSH
53367: CALL_OW 122
// result := tmp ;
53371: LD_ADDR_VAR 0 2
53375: PUSH
53376: LD_VAR 0 3
53380: ST_TO_ADDR
// end ;
53381: LD_VAR 0 2
53385: RET
// export function ComExitAll ( units ) ; var i ; begin
53386: LD_INT 0
53388: PPUSH
53389: PPUSH
// if not units then
53390: LD_VAR 0 1
53394: NOT
53395: IFFALSE 53399
// exit ;
53397: GO 53425
// for i in units do
53399: LD_ADDR_VAR 0 3
53403: PUSH
53404: LD_VAR 0 1
53408: PUSH
53409: FOR_IN
53410: IFFALSE 53423
// ComExit ( i ) ;
53412: LD_VAR 0 3
53416: PPUSH
53417: CALL 53303 0 1
53421: GO 53409
53423: POP
53424: POP
// end ;
53425: LD_VAR 0 2
53429: RET
// export function ResetHc ; begin
53430: LD_INT 0
53432: PPUSH
// InitHc ;
53433: CALL_OW 19
// hc_importance := 0 ;
53437: LD_ADDR_OWVAR 32
53441: PUSH
53442: LD_INT 0
53444: ST_TO_ADDR
// end ;
53445: LD_VAR 0 1
53449: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53450: LD_INT 0
53452: PPUSH
53453: PPUSH
53454: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53455: LD_ADDR_VAR 0 6
53459: PUSH
53460: LD_VAR 0 1
53464: PUSH
53465: LD_VAR 0 3
53469: PLUS
53470: PUSH
53471: LD_INT 2
53473: DIV
53474: ST_TO_ADDR
// if _x < 0 then
53475: LD_VAR 0 6
53479: PUSH
53480: LD_INT 0
53482: LESS
53483: IFFALSE 53500
// _x := _x * - 1 ;
53485: LD_ADDR_VAR 0 6
53489: PUSH
53490: LD_VAR 0 6
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: MUL
53499: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53500: LD_ADDR_VAR 0 7
53504: PUSH
53505: LD_VAR 0 2
53509: PUSH
53510: LD_VAR 0 4
53514: PLUS
53515: PUSH
53516: LD_INT 2
53518: DIV
53519: ST_TO_ADDR
// if _y < 0 then
53520: LD_VAR 0 7
53524: PUSH
53525: LD_INT 0
53527: LESS
53528: IFFALSE 53545
// _y := _y * - 1 ;
53530: LD_ADDR_VAR 0 7
53534: PUSH
53535: LD_VAR 0 7
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: MUL
53544: ST_TO_ADDR
// result := [ _x , _y ] ;
53545: LD_ADDR_VAR 0 5
53549: PUSH
53550: LD_VAR 0 6
53554: PUSH
53555: LD_VAR 0 7
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: ST_TO_ADDR
// end ;
53564: LD_VAR 0 5
53568: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53569: LD_INT 0
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
// task := GetTaskList ( unit ) ;
53575: LD_ADDR_VAR 0 7
53579: PUSH
53580: LD_VAR 0 1
53584: PPUSH
53585: CALL_OW 437
53589: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53590: LD_VAR 0 7
53594: NOT
53595: PUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: LD_VAR 0 2
53605: PPUSH
53606: CALL_OW 308
53610: NOT
53611: AND
53612: IFFALSE 53616
// exit ;
53614: GO 53734
// if IsInArea ( unit , area ) then
53616: LD_VAR 0 1
53620: PPUSH
53621: LD_VAR 0 2
53625: PPUSH
53626: CALL_OW 308
53630: IFFALSE 53648
// begin ComMoveToArea ( unit , goAway ) ;
53632: LD_VAR 0 1
53636: PPUSH
53637: LD_VAR 0 3
53641: PPUSH
53642: CALL_OW 113
// exit ;
53646: GO 53734
// end ; if task [ 1 ] [ 1 ] <> M then
53648: LD_VAR 0 7
53652: PUSH
53653: LD_INT 1
53655: ARRAY
53656: PUSH
53657: LD_INT 1
53659: ARRAY
53660: PUSH
53661: LD_STRING M
53663: NONEQUAL
53664: IFFALSE 53668
// exit ;
53666: GO 53734
// x := task [ 1 ] [ 2 ] ;
53668: LD_ADDR_VAR 0 5
53672: PUSH
53673: LD_VAR 0 7
53677: PUSH
53678: LD_INT 1
53680: ARRAY
53681: PUSH
53682: LD_INT 2
53684: ARRAY
53685: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53686: LD_ADDR_VAR 0 6
53690: PUSH
53691: LD_VAR 0 7
53695: PUSH
53696: LD_INT 1
53698: ARRAY
53699: PUSH
53700: LD_INT 3
53702: ARRAY
53703: ST_TO_ADDR
// if InArea ( x , y , area ) then
53704: LD_VAR 0 5
53708: PPUSH
53709: LD_VAR 0 6
53713: PPUSH
53714: LD_VAR 0 2
53718: PPUSH
53719: CALL_OW 309
53723: IFFALSE 53734
// ComStop ( unit ) ;
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL_OW 141
// end ;
53734: LD_VAR 0 4
53738: RET
// export function Abs ( value ) ; begin
53739: LD_INT 0
53741: PPUSH
// result := value ;
53742: LD_ADDR_VAR 0 2
53746: PUSH
53747: LD_VAR 0 1
53751: ST_TO_ADDR
// if value < 0 then
53752: LD_VAR 0 1
53756: PUSH
53757: LD_INT 0
53759: LESS
53760: IFFALSE 53777
// result := value * - 1 ;
53762: LD_ADDR_VAR 0 2
53766: PUSH
53767: LD_VAR 0 1
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: MUL
53776: ST_TO_ADDR
// end ;
53777: LD_VAR 0 2
53781: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53782: LD_INT 0
53784: PPUSH
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
53789: PPUSH
53790: PPUSH
53791: PPUSH
// if not unit or not building then
53792: LD_VAR 0 1
53796: NOT
53797: PUSH
53798: LD_VAR 0 2
53802: NOT
53803: OR
53804: IFFALSE 53808
// exit ;
53806: GO 54034
// x := GetX ( building ) ;
53808: LD_ADDR_VAR 0 4
53812: PUSH
53813: LD_VAR 0 2
53817: PPUSH
53818: CALL_OW 250
53822: ST_TO_ADDR
// y := GetY ( building ) ;
53823: LD_ADDR_VAR 0 6
53827: PUSH
53828: LD_VAR 0 2
53832: PPUSH
53833: CALL_OW 251
53837: ST_TO_ADDR
// d := GetDir ( building ) ;
53838: LD_ADDR_VAR 0 8
53842: PUSH
53843: LD_VAR 0 2
53847: PPUSH
53848: CALL_OW 254
53852: ST_TO_ADDR
// r := 4 ;
53853: LD_ADDR_VAR 0 9
53857: PUSH
53858: LD_INT 4
53860: ST_TO_ADDR
// for i := 1 to 5 do
53861: LD_ADDR_VAR 0 10
53865: PUSH
53866: DOUBLE
53867: LD_INT 1
53869: DEC
53870: ST_TO_ADDR
53871: LD_INT 5
53873: PUSH
53874: FOR_TO
53875: IFFALSE 54032
// begin _x := ShiftX ( x , d , r + i ) ;
53877: LD_ADDR_VAR 0 5
53881: PUSH
53882: LD_VAR 0 4
53886: PPUSH
53887: LD_VAR 0 8
53891: PPUSH
53892: LD_VAR 0 9
53896: PUSH
53897: LD_VAR 0 10
53901: PLUS
53902: PPUSH
53903: CALL_OW 272
53907: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53908: LD_ADDR_VAR 0 7
53912: PUSH
53913: LD_VAR 0 6
53917: PPUSH
53918: LD_VAR 0 8
53922: PPUSH
53923: LD_VAR 0 9
53927: PUSH
53928: LD_VAR 0 10
53932: PLUS
53933: PPUSH
53934: CALL_OW 273
53938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53939: LD_VAR 0 5
53943: PPUSH
53944: LD_VAR 0 7
53948: PPUSH
53949: CALL_OW 488
53953: PUSH
53954: LD_VAR 0 5
53958: PPUSH
53959: LD_VAR 0 7
53963: PPUSH
53964: CALL_OW 428
53968: PPUSH
53969: CALL_OW 247
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: IN
53984: NOT
53985: AND
53986: IFFALSE 54030
// begin ComMoveXY ( unit , _x , _y ) ;
53988: LD_VAR 0 1
53992: PPUSH
53993: LD_VAR 0 5
53997: PPUSH
53998: LD_VAR 0 7
54002: PPUSH
54003: CALL_OW 111
// result := [ _x , _y ] ;
54007: LD_ADDR_VAR 0 3
54011: PUSH
54012: LD_VAR 0 5
54016: PUSH
54017: LD_VAR 0 7
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// exit ;
54026: POP
54027: POP
54028: GO 54034
// end ; end ;
54030: GO 53874
54032: POP
54033: POP
// end ;
54034: LD_VAR 0 3
54038: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54039: LD_INT 0
54041: PPUSH
54042: PPUSH
54043: PPUSH
// result := 0 ;
54044: LD_ADDR_VAR 0 3
54048: PUSH
54049: LD_INT 0
54051: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54052: LD_VAR 0 1
54056: PUSH
54057: LD_INT 0
54059: LESS
54060: PUSH
54061: LD_VAR 0 1
54065: PUSH
54066: LD_INT 8
54068: GREATER
54069: OR
54070: PUSH
54071: LD_VAR 0 2
54075: PUSH
54076: LD_INT 0
54078: LESS
54079: OR
54080: PUSH
54081: LD_VAR 0 2
54085: PUSH
54086: LD_INT 8
54088: GREATER
54089: OR
54090: IFFALSE 54094
// exit ;
54092: GO 54169
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54094: LD_ADDR_VAR 0 4
54098: PUSH
54099: LD_INT 22
54101: PUSH
54102: LD_VAR 0 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PPUSH
54111: CALL_OW 69
54115: PUSH
54116: FOR_IN
54117: IFFALSE 54167
// begin un := UnitShoot ( i ) ;
54119: LD_ADDR_VAR 0 5
54123: PUSH
54124: LD_VAR 0 4
54128: PPUSH
54129: CALL_OW 504
54133: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54134: LD_VAR 0 5
54138: PPUSH
54139: CALL_OW 255
54143: PUSH
54144: LD_VAR 0 1
54148: EQUAL
54149: IFFALSE 54165
// begin result := un ;
54151: LD_ADDR_VAR 0 3
54155: PUSH
54156: LD_VAR 0 5
54160: ST_TO_ADDR
// exit ;
54161: POP
54162: POP
54163: GO 54169
// end ; end ;
54165: GO 54116
54167: POP
54168: POP
// end ;
54169: LD_VAR 0 3
54173: RET
// export function GetCargoBay ( units ) ; begin
54174: LD_INT 0
54176: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54177: LD_ADDR_VAR 0 2
54181: PUSH
54182: LD_VAR 0 1
54186: PPUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 34
54192: PUSH
54193: LD_INT 12
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 34
54202: PUSH
54203: LD_INT 51
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 34
54212: PUSH
54213: LD_INT 32
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 34
54222: PUSH
54223: LD_INT 89
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: PPUSH
54237: CALL_OW 72
54241: ST_TO_ADDR
// end ;
54242: LD_VAR 0 2
54246: RET
// export function Negate ( value ) ; begin
54247: LD_INT 0
54249: PPUSH
// result := not value ;
54250: LD_ADDR_VAR 0 2
54254: PUSH
54255: LD_VAR 0 1
54259: NOT
54260: ST_TO_ADDR
// end ;
54261: LD_VAR 0 2
54265: RET
// export function Inc ( value ) ; begin
54266: LD_INT 0
54268: PPUSH
// result := value + 1 ;
54269: LD_ADDR_VAR 0 2
54273: PUSH
54274: LD_VAR 0 1
54278: PUSH
54279: LD_INT 1
54281: PLUS
54282: ST_TO_ADDR
// end ;
54283: LD_VAR 0 2
54287: RET
// export function Dec ( value ) ; begin
54288: LD_INT 0
54290: PPUSH
// result := value - 1 ;
54291: LD_ADDR_VAR 0 2
54295: PUSH
54296: LD_VAR 0 1
54300: PUSH
54301: LD_INT 1
54303: MINUS
54304: ST_TO_ADDR
// end ;
54305: LD_VAR 0 2
54309: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54310: LD_INT 0
54312: PPUSH
54313: PPUSH
54314: PPUSH
54315: PPUSH
54316: PPUSH
54317: PPUSH
54318: PPUSH
54319: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54320: LD_VAR 0 1
54324: PPUSH
54325: LD_VAR 0 2
54329: PPUSH
54330: CALL_OW 488
54334: NOT
54335: PUSH
54336: LD_VAR 0 3
54340: PPUSH
54341: LD_VAR 0 4
54345: PPUSH
54346: CALL_OW 488
54350: NOT
54351: OR
54352: IFFALSE 54365
// begin result := - 1 ;
54354: LD_ADDR_VAR 0 5
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: ST_TO_ADDR
// exit ;
54363: GO 54600
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54365: LD_ADDR_VAR 0 12
54369: PUSH
54370: LD_VAR 0 1
54374: PPUSH
54375: LD_VAR 0 2
54379: PPUSH
54380: LD_VAR 0 3
54384: PPUSH
54385: LD_VAR 0 4
54389: PPUSH
54390: CALL 53450 0 4
54394: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54395: LD_ADDR_VAR 0 11
54399: PUSH
54400: LD_VAR 0 1
54404: PPUSH
54405: LD_VAR 0 2
54409: PPUSH
54410: LD_VAR 0 12
54414: PUSH
54415: LD_INT 1
54417: ARRAY
54418: PPUSH
54419: LD_VAR 0 12
54423: PUSH
54424: LD_INT 2
54426: ARRAY
54427: PPUSH
54428: CALL_OW 298
54432: ST_TO_ADDR
// distance := 9999 ;
54433: LD_ADDR_VAR 0 10
54437: PUSH
54438: LD_INT 9999
54440: ST_TO_ADDR
// for i := 0 to 5 do
54441: LD_ADDR_VAR 0 6
54445: PUSH
54446: DOUBLE
54447: LD_INT 0
54449: DEC
54450: ST_TO_ADDR
54451: LD_INT 5
54453: PUSH
54454: FOR_TO
54455: IFFALSE 54598
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54457: LD_ADDR_VAR 0 7
54461: PUSH
54462: LD_VAR 0 1
54466: PPUSH
54467: LD_VAR 0 6
54471: PPUSH
54472: LD_VAR 0 11
54476: PPUSH
54477: CALL_OW 272
54481: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54482: LD_ADDR_VAR 0 8
54486: PUSH
54487: LD_VAR 0 2
54491: PPUSH
54492: LD_VAR 0 6
54496: PPUSH
54497: LD_VAR 0 11
54501: PPUSH
54502: CALL_OW 273
54506: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54507: LD_VAR 0 7
54511: PPUSH
54512: LD_VAR 0 8
54516: PPUSH
54517: CALL_OW 488
54521: NOT
54522: IFFALSE 54526
// continue ;
54524: GO 54454
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54526: LD_ADDR_VAR 0 9
54530: PUSH
54531: LD_VAR 0 12
54535: PUSH
54536: LD_INT 1
54538: ARRAY
54539: PPUSH
54540: LD_VAR 0 12
54544: PUSH
54545: LD_INT 2
54547: ARRAY
54548: PPUSH
54549: LD_VAR 0 7
54553: PPUSH
54554: LD_VAR 0 8
54558: PPUSH
54559: CALL_OW 298
54563: ST_TO_ADDR
// if tmp < distance then
54564: LD_VAR 0 9
54568: PUSH
54569: LD_VAR 0 10
54573: LESS
54574: IFFALSE 54596
// begin result := i ;
54576: LD_ADDR_VAR 0 5
54580: PUSH
54581: LD_VAR 0 6
54585: ST_TO_ADDR
// distance := tmp ;
54586: LD_ADDR_VAR 0 10
54590: PUSH
54591: LD_VAR 0 9
54595: ST_TO_ADDR
// end ; end ;
54596: GO 54454
54598: POP
54599: POP
// end ;
54600: LD_VAR 0 5
54604: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54605: LD_INT 0
54607: PPUSH
54608: PPUSH
// if not driver or not IsInUnit ( driver ) then
54609: LD_VAR 0 1
54613: NOT
54614: PUSH
54615: LD_VAR 0 1
54619: PPUSH
54620: CALL_OW 310
54624: NOT
54625: OR
54626: IFFALSE 54630
// exit ;
54628: GO 54720
// vehicle := IsInUnit ( driver ) ;
54630: LD_ADDR_VAR 0 3
54634: PUSH
54635: LD_VAR 0 1
54639: PPUSH
54640: CALL_OW 310
54644: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54645: LD_VAR 0 1
54649: PPUSH
54650: LD_STRING \
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: PUSH
54680: LD_STRING E
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_VAR 0 3
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PPUSH
54716: CALL_OW 446
// end ;
54720: LD_VAR 0 2
54724: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54725: LD_INT 0
54727: PPUSH
54728: PPUSH
// if not driver or not IsInUnit ( driver ) then
54729: LD_VAR 0 1
54733: NOT
54734: PUSH
54735: LD_VAR 0 1
54739: PPUSH
54740: CALL_OW 310
54744: NOT
54745: OR
54746: IFFALSE 54750
// exit ;
54748: GO 54840
// vehicle := IsInUnit ( driver ) ;
54750: LD_ADDR_VAR 0 3
54754: PUSH
54755: LD_VAR 0 1
54759: PPUSH
54760: CALL_OW 310
54764: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54765: LD_VAR 0 1
54769: PPUSH
54770: LD_STRING \
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: PUSH
54800: LD_STRING E
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_VAR 0 3
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PPUSH
54836: CALL_OW 447
// end ;
54840: LD_VAR 0 2
54844: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54845: LD_INT 0
54847: PPUSH
54848: PPUSH
54849: PPUSH
// tmp := [ ] ;
54850: LD_ADDR_VAR 0 5
54854: PUSH
54855: EMPTY
54856: ST_TO_ADDR
// for i in units do
54857: LD_ADDR_VAR 0 4
54861: PUSH
54862: LD_VAR 0 1
54866: PUSH
54867: FOR_IN
54868: IFFALSE 54906
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54870: LD_ADDR_VAR 0 5
54874: PUSH
54875: LD_VAR 0 5
54879: PPUSH
54880: LD_VAR 0 5
54884: PUSH
54885: LD_INT 1
54887: PLUS
54888: PPUSH
54889: LD_VAR 0 4
54893: PPUSH
54894: CALL_OW 256
54898: PPUSH
54899: CALL_OW 2
54903: ST_TO_ADDR
54904: GO 54867
54906: POP
54907: POP
// if not tmp then
54908: LD_VAR 0 5
54912: NOT
54913: IFFALSE 54917
// exit ;
54915: GO 54965
// if asc then
54917: LD_VAR 0 2
54921: IFFALSE 54945
// result := SortListByListAsc ( units , tmp ) else
54923: LD_ADDR_VAR 0 3
54927: PUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: LD_VAR 0 5
54937: PPUSH
54938: CALL_OW 76
54942: ST_TO_ADDR
54943: GO 54965
// result := SortListByListDesc ( units , tmp ) ;
54945: LD_ADDR_VAR 0 3
54949: PUSH
54950: LD_VAR 0 1
54954: PPUSH
54955: LD_VAR 0 5
54959: PPUSH
54960: CALL_OW 77
54964: ST_TO_ADDR
// end ;
54965: LD_VAR 0 3
54969: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54970: LD_INT 0
54972: PPUSH
54973: PPUSH
// task := GetTaskList ( mech ) ;
54974: LD_ADDR_VAR 0 4
54978: PUSH
54979: LD_VAR 0 1
54983: PPUSH
54984: CALL_OW 437
54988: ST_TO_ADDR
// if not task then
54989: LD_VAR 0 4
54993: NOT
54994: IFFALSE 54998
// exit ;
54996: GO 55040
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54998: LD_ADDR_VAR 0 3
55002: PUSH
55003: LD_VAR 0 4
55007: PUSH
55008: LD_INT 1
55010: ARRAY
55011: PUSH
55012: LD_INT 1
55014: ARRAY
55015: PUSH
55016: LD_STRING r
55018: EQUAL
55019: PUSH
55020: LD_VAR 0 4
55024: PUSH
55025: LD_INT 1
55027: ARRAY
55028: PUSH
55029: LD_INT 4
55031: ARRAY
55032: PUSH
55033: LD_VAR 0 2
55037: EQUAL
55038: AND
55039: ST_TO_ADDR
// end ;
55040: LD_VAR 0 3
55044: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55045: LD_INT 0
55047: PPUSH
// SetDir ( unit , d ) ;
55048: LD_VAR 0 1
55052: PPUSH
55053: LD_VAR 0 4
55057: PPUSH
55058: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55062: LD_VAR 0 1
55066: PPUSH
55067: LD_VAR 0 2
55071: PPUSH
55072: LD_VAR 0 3
55076: PPUSH
55077: LD_VAR 0 5
55081: PPUSH
55082: CALL_OW 48
// end ;
55086: LD_VAR 0 6
55090: RET
// export function ToNaturalNumber ( number ) ; begin
55091: LD_INT 0
55093: PPUSH
// result := number div 1 ;
55094: LD_ADDR_VAR 0 2
55098: PUSH
55099: LD_VAR 0 1
55103: PUSH
55104: LD_INT 1
55106: DIV
55107: ST_TO_ADDR
// if number < 0 then
55108: LD_VAR 0 1
55112: PUSH
55113: LD_INT 0
55115: LESS
55116: IFFALSE 55126
// result := 0 ;
55118: LD_ADDR_VAR 0 2
55122: PUSH
55123: LD_INT 0
55125: ST_TO_ADDR
// end ;
55126: LD_VAR 0 2
55130: RET
// export function SortByClass ( units , class ) ; var un ; begin
55131: LD_INT 0
55133: PPUSH
55134: PPUSH
// if not units or not class then
55135: LD_VAR 0 1
55139: NOT
55140: PUSH
55141: LD_VAR 0 2
55145: NOT
55146: OR
55147: IFFALSE 55151
// exit ;
55149: GO 55246
// result := [ ] ;
55151: LD_ADDR_VAR 0 3
55155: PUSH
55156: EMPTY
55157: ST_TO_ADDR
// for un in units do
55158: LD_ADDR_VAR 0 4
55162: PUSH
55163: LD_VAR 0 1
55167: PUSH
55168: FOR_IN
55169: IFFALSE 55244
// if GetClass ( un ) = class then
55171: LD_VAR 0 4
55175: PPUSH
55176: CALL_OW 257
55180: PUSH
55181: LD_VAR 0 2
55185: EQUAL
55186: IFFALSE 55213
// result := Insert ( result , 1 , un ) else
55188: LD_ADDR_VAR 0 3
55192: PUSH
55193: LD_VAR 0 3
55197: PPUSH
55198: LD_INT 1
55200: PPUSH
55201: LD_VAR 0 4
55205: PPUSH
55206: CALL_OW 2
55210: ST_TO_ADDR
55211: GO 55242
// result := Replace ( result , result + 1 , un ) ;
55213: LD_ADDR_VAR 0 3
55217: PUSH
55218: LD_VAR 0 3
55222: PPUSH
55223: LD_VAR 0 3
55227: PUSH
55228: LD_INT 1
55230: PLUS
55231: PPUSH
55232: LD_VAR 0 4
55236: PPUSH
55237: CALL_OW 1
55241: ST_TO_ADDR
55242: GO 55168
55244: POP
55245: POP
// end ;
55246: LD_VAR 0 3
55250: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55251: LD_INT 0
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
// result := [ ] ;
55260: LD_ADDR_VAR 0 4
55264: PUSH
55265: EMPTY
55266: ST_TO_ADDR
// if x - r < 0 then
55267: LD_VAR 0 1
55271: PUSH
55272: LD_VAR 0 3
55276: MINUS
55277: PUSH
55278: LD_INT 0
55280: LESS
55281: IFFALSE 55293
// min_x := 0 else
55283: LD_ADDR_VAR 0 8
55287: PUSH
55288: LD_INT 0
55290: ST_TO_ADDR
55291: GO 55309
// min_x := x - r ;
55293: LD_ADDR_VAR 0 8
55297: PUSH
55298: LD_VAR 0 1
55302: PUSH
55303: LD_VAR 0 3
55307: MINUS
55308: ST_TO_ADDR
// if y - r < 0 then
55309: LD_VAR 0 2
55313: PUSH
55314: LD_VAR 0 3
55318: MINUS
55319: PUSH
55320: LD_INT 0
55322: LESS
55323: IFFALSE 55335
// min_y := 0 else
55325: LD_ADDR_VAR 0 7
55329: PUSH
55330: LD_INT 0
55332: ST_TO_ADDR
55333: GO 55351
// min_y := y - r ;
55335: LD_ADDR_VAR 0 7
55339: PUSH
55340: LD_VAR 0 2
55344: PUSH
55345: LD_VAR 0 3
55349: MINUS
55350: ST_TO_ADDR
// max_x := x + r ;
55351: LD_ADDR_VAR 0 9
55355: PUSH
55356: LD_VAR 0 1
55360: PUSH
55361: LD_VAR 0 3
55365: PLUS
55366: ST_TO_ADDR
// max_y := y + r ;
55367: LD_ADDR_VAR 0 10
55371: PUSH
55372: LD_VAR 0 2
55376: PUSH
55377: LD_VAR 0 3
55381: PLUS
55382: ST_TO_ADDR
// for _x = min_x to max_x do
55383: LD_ADDR_VAR 0 5
55387: PUSH
55388: DOUBLE
55389: LD_VAR 0 8
55393: DEC
55394: ST_TO_ADDR
55395: LD_VAR 0 9
55399: PUSH
55400: FOR_TO
55401: IFFALSE 55502
// for _y = min_y to max_y do
55403: LD_ADDR_VAR 0 6
55407: PUSH
55408: DOUBLE
55409: LD_VAR 0 7
55413: DEC
55414: ST_TO_ADDR
55415: LD_VAR 0 10
55419: PUSH
55420: FOR_TO
55421: IFFALSE 55498
// begin if not ValidHex ( _x , _y ) then
55423: LD_VAR 0 5
55427: PPUSH
55428: LD_VAR 0 6
55432: PPUSH
55433: CALL_OW 488
55437: NOT
55438: IFFALSE 55442
// continue ;
55440: GO 55420
// if GetResourceTypeXY ( _x , _y ) then
55442: LD_VAR 0 5
55446: PPUSH
55447: LD_VAR 0 6
55451: PPUSH
55452: CALL_OW 283
55456: IFFALSE 55496
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55458: LD_ADDR_VAR 0 4
55462: PUSH
55463: LD_VAR 0 4
55467: PPUSH
55468: LD_VAR 0 4
55472: PUSH
55473: LD_INT 1
55475: PLUS
55476: PPUSH
55477: LD_VAR 0 5
55481: PUSH
55482: LD_VAR 0 6
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PPUSH
55491: CALL_OW 1
55495: ST_TO_ADDR
// end ;
55496: GO 55420
55498: POP
55499: POP
55500: GO 55400
55502: POP
55503: POP
// end ;
55504: LD_VAR 0 4
55508: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55509: LD_INT 0
55511: PPUSH
55512: PPUSH
55513: PPUSH
55514: PPUSH
55515: PPUSH
55516: PPUSH
55517: PPUSH
55518: PPUSH
// if not units then
55519: LD_VAR 0 1
55523: NOT
55524: IFFALSE 55528
// exit ;
55526: GO 56056
// result := UnitFilter ( units , [ f_ok ] ) ;
55528: LD_ADDR_VAR 0 3
55532: PUSH
55533: LD_VAR 0 1
55537: PPUSH
55538: LD_INT 50
55540: PUSH
55541: EMPTY
55542: LIST
55543: PPUSH
55544: CALL_OW 72
55548: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55549: LD_ADDR_VAR 0 8
55553: PUSH
55554: LD_VAR 0 1
55558: PUSH
55559: LD_INT 1
55561: ARRAY
55562: PPUSH
55563: CALL_OW 255
55567: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55568: LD_ADDR_VAR 0 10
55572: PUSH
55573: LD_INT 29
55575: PUSH
55576: LD_INT 91
55578: PUSH
55579: LD_INT 49
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: ST_TO_ADDR
// if not result then
55587: LD_VAR 0 3
55591: NOT
55592: IFFALSE 55596
// exit ;
55594: GO 56056
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55596: LD_ADDR_VAR 0 5
55600: PUSH
55601: LD_INT 81
55603: PUSH
55604: LD_VAR 0 8
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PPUSH
55613: CALL_OW 69
55617: ST_TO_ADDR
// for i in result do
55618: LD_ADDR_VAR 0 4
55622: PUSH
55623: LD_VAR 0 3
55627: PUSH
55628: FOR_IN
55629: IFFALSE 56054
// begin tag := GetTag ( i ) + 1 ;
55631: LD_ADDR_VAR 0 9
55635: PUSH
55636: LD_VAR 0 4
55640: PPUSH
55641: CALL_OW 110
55645: PUSH
55646: LD_INT 1
55648: PLUS
55649: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55650: LD_ADDR_VAR 0 7
55654: PUSH
55655: LD_VAR 0 4
55659: PPUSH
55660: CALL_OW 250
55664: PPUSH
55665: LD_VAR 0 4
55669: PPUSH
55670: CALL_OW 251
55674: PPUSH
55675: LD_INT 4
55677: PPUSH
55678: CALL 55251 0 3
55682: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55683: LD_VAR 0 4
55687: PPUSH
55688: CALL_OW 247
55692: PUSH
55693: LD_INT 2
55695: EQUAL
55696: PUSH
55697: LD_VAR 0 7
55701: PUSH
55702: LD_INT 2
55704: GREATER
55705: AND
55706: PUSH
55707: LD_VAR 0 4
55711: PPUSH
55712: CALL_OW 264
55716: PUSH
55717: LD_VAR 0 10
55721: IN
55722: NOT
55723: AND
55724: IFFALSE 55763
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55726: LD_VAR 0 4
55730: PPUSH
55731: LD_VAR 0 7
55735: PUSH
55736: LD_INT 1
55738: ARRAY
55739: PUSH
55740: LD_INT 1
55742: ARRAY
55743: PPUSH
55744: LD_VAR 0 7
55748: PUSH
55749: LD_INT 1
55751: ARRAY
55752: PUSH
55753: LD_INT 2
55755: ARRAY
55756: PPUSH
55757: CALL_OW 116
55761: GO 56052
// if path > tag then
55763: LD_VAR 0 2
55767: PUSH
55768: LD_VAR 0 9
55772: GREATER
55773: IFFALSE 55981
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55775: LD_ADDR_VAR 0 6
55779: PUSH
55780: LD_VAR 0 5
55784: PPUSH
55785: LD_INT 91
55787: PUSH
55788: LD_VAR 0 4
55792: PUSH
55793: LD_INT 8
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: PPUSH
55801: CALL_OW 72
55805: ST_TO_ADDR
// if nearEnemy then
55806: LD_VAR 0 6
55810: IFFALSE 55879
// begin if GetWeapon ( i ) = ru_time_lapser then
55812: LD_VAR 0 4
55816: PPUSH
55817: CALL_OW 264
55821: PUSH
55822: LD_INT 49
55824: EQUAL
55825: IFFALSE 55853
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55827: LD_VAR 0 4
55831: PPUSH
55832: LD_VAR 0 6
55836: PPUSH
55837: LD_VAR 0 4
55841: PPUSH
55842: CALL_OW 74
55846: PPUSH
55847: CALL_OW 112
55851: GO 55877
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55853: LD_VAR 0 4
55857: PPUSH
55858: LD_VAR 0 6
55862: PPUSH
55863: LD_VAR 0 4
55867: PPUSH
55868: CALL_OW 74
55872: PPUSH
55873: CALL 57127 0 2
// end else
55877: GO 55979
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55879: LD_VAR 0 4
55883: PPUSH
55884: LD_VAR 0 2
55888: PUSH
55889: LD_VAR 0 9
55893: ARRAY
55894: PUSH
55895: LD_INT 1
55897: ARRAY
55898: PPUSH
55899: LD_VAR 0 2
55903: PUSH
55904: LD_VAR 0 9
55908: ARRAY
55909: PUSH
55910: LD_INT 2
55912: ARRAY
55913: PPUSH
55914: CALL_OW 297
55918: PUSH
55919: LD_INT 6
55921: GREATER
55922: IFFALSE 55965
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55924: LD_VAR 0 4
55928: PPUSH
55929: LD_VAR 0 2
55933: PUSH
55934: LD_VAR 0 9
55938: ARRAY
55939: PUSH
55940: LD_INT 1
55942: ARRAY
55943: PPUSH
55944: LD_VAR 0 2
55948: PUSH
55949: LD_VAR 0 9
55953: ARRAY
55954: PUSH
55955: LD_INT 2
55957: ARRAY
55958: PPUSH
55959: CALL_OW 114
55963: GO 55979
// SetTag ( i , tag ) ;
55965: LD_VAR 0 4
55969: PPUSH
55970: LD_VAR 0 9
55974: PPUSH
55975: CALL_OW 109
// end else
55979: GO 56052
// if enemy then
55981: LD_VAR 0 5
55985: IFFALSE 56052
// begin if GetWeapon ( i ) = ru_time_lapser then
55987: LD_VAR 0 4
55991: PPUSH
55992: CALL_OW 264
55996: PUSH
55997: LD_INT 49
55999: EQUAL
56000: IFFALSE 56028
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56002: LD_VAR 0 4
56006: PPUSH
56007: LD_VAR 0 5
56011: PPUSH
56012: LD_VAR 0 4
56016: PPUSH
56017: CALL_OW 74
56021: PPUSH
56022: CALL_OW 112
56026: GO 56052
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56028: LD_VAR 0 4
56032: PPUSH
56033: LD_VAR 0 5
56037: PPUSH
56038: LD_VAR 0 4
56042: PPUSH
56043: CALL_OW 74
56047: PPUSH
56048: CALL 57127 0 2
// end ; end ;
56052: GO 55628
56054: POP
56055: POP
// end ;
56056: LD_VAR 0 3
56060: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56061: LD_INT 0
56063: PPUSH
56064: PPUSH
56065: PPUSH
// if not unit or IsInUnit ( unit ) then
56066: LD_VAR 0 1
56070: NOT
56071: PUSH
56072: LD_VAR 0 1
56076: PPUSH
56077: CALL_OW 310
56081: OR
56082: IFFALSE 56086
// exit ;
56084: GO 56177
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56086: LD_ADDR_VAR 0 4
56090: PUSH
56091: LD_VAR 0 1
56095: PPUSH
56096: CALL_OW 250
56100: PPUSH
56101: LD_VAR 0 2
56105: PPUSH
56106: LD_INT 1
56108: PPUSH
56109: CALL_OW 272
56113: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56114: LD_ADDR_VAR 0 5
56118: PUSH
56119: LD_VAR 0 1
56123: PPUSH
56124: CALL_OW 251
56128: PPUSH
56129: LD_VAR 0 2
56133: PPUSH
56134: LD_INT 1
56136: PPUSH
56137: CALL_OW 273
56141: ST_TO_ADDR
// if ValidHex ( x , y ) then
56142: LD_VAR 0 4
56146: PPUSH
56147: LD_VAR 0 5
56151: PPUSH
56152: CALL_OW 488
56156: IFFALSE 56177
// ComTurnXY ( unit , x , y ) ;
56158: LD_VAR 0 1
56162: PPUSH
56163: LD_VAR 0 4
56167: PPUSH
56168: LD_VAR 0 5
56172: PPUSH
56173: CALL_OW 118
// end ;
56177: LD_VAR 0 3
56181: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56182: LD_INT 0
56184: PPUSH
56185: PPUSH
// result := false ;
56186: LD_ADDR_VAR 0 3
56190: PUSH
56191: LD_INT 0
56193: ST_TO_ADDR
// if not units then
56194: LD_VAR 0 2
56198: NOT
56199: IFFALSE 56203
// exit ;
56201: GO 56248
// for i in units do
56203: LD_ADDR_VAR 0 4
56207: PUSH
56208: LD_VAR 0 2
56212: PUSH
56213: FOR_IN
56214: IFFALSE 56246
// if See ( side , i ) then
56216: LD_VAR 0 1
56220: PPUSH
56221: LD_VAR 0 4
56225: PPUSH
56226: CALL_OW 292
56230: IFFALSE 56244
// begin result := true ;
56232: LD_ADDR_VAR 0 3
56236: PUSH
56237: LD_INT 1
56239: ST_TO_ADDR
// exit ;
56240: POP
56241: POP
56242: GO 56248
// end ;
56244: GO 56213
56246: POP
56247: POP
// end ;
56248: LD_VAR 0 3
56252: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56253: LD_INT 0
56255: PPUSH
56256: PPUSH
56257: PPUSH
56258: PPUSH
// if not unit or not points then
56259: LD_VAR 0 1
56263: NOT
56264: PUSH
56265: LD_VAR 0 2
56269: NOT
56270: OR
56271: IFFALSE 56275
// exit ;
56273: GO 56365
// dist := 99999 ;
56275: LD_ADDR_VAR 0 5
56279: PUSH
56280: LD_INT 99999
56282: ST_TO_ADDR
// for i in points do
56283: LD_ADDR_VAR 0 4
56287: PUSH
56288: LD_VAR 0 2
56292: PUSH
56293: FOR_IN
56294: IFFALSE 56363
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56296: LD_ADDR_VAR 0 6
56300: PUSH
56301: LD_VAR 0 1
56305: PPUSH
56306: LD_VAR 0 4
56310: PUSH
56311: LD_INT 1
56313: ARRAY
56314: PPUSH
56315: LD_VAR 0 4
56319: PUSH
56320: LD_INT 2
56322: ARRAY
56323: PPUSH
56324: CALL_OW 297
56328: ST_TO_ADDR
// if tmpDist < dist then
56329: LD_VAR 0 6
56333: PUSH
56334: LD_VAR 0 5
56338: LESS
56339: IFFALSE 56361
// begin result := i ;
56341: LD_ADDR_VAR 0 3
56345: PUSH
56346: LD_VAR 0 4
56350: ST_TO_ADDR
// dist := tmpDist ;
56351: LD_ADDR_VAR 0 5
56355: PUSH
56356: LD_VAR 0 6
56360: ST_TO_ADDR
// end ; end ;
56361: GO 56293
56363: POP
56364: POP
// end ;
56365: LD_VAR 0 3
56369: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56370: LD_INT 0
56372: PPUSH
// uc_side := side ;
56373: LD_ADDR_OWVAR 20
56377: PUSH
56378: LD_VAR 0 1
56382: ST_TO_ADDR
// uc_nation := 3 ;
56383: LD_ADDR_OWVAR 21
56387: PUSH
56388: LD_INT 3
56390: ST_TO_ADDR
// vc_chassis := 25 ;
56391: LD_ADDR_OWVAR 37
56395: PUSH
56396: LD_INT 25
56398: ST_TO_ADDR
// vc_engine := engine_siberite ;
56399: LD_ADDR_OWVAR 39
56403: PUSH
56404: LD_INT 3
56406: ST_TO_ADDR
// vc_control := control_computer ;
56407: LD_ADDR_OWVAR 38
56411: PUSH
56412: LD_INT 3
56414: ST_TO_ADDR
// vc_weapon := 59 ;
56415: LD_ADDR_OWVAR 40
56419: PUSH
56420: LD_INT 59
56422: ST_TO_ADDR
// result := CreateVehicle ;
56423: LD_ADDR_VAR 0 5
56427: PUSH
56428: CALL_OW 45
56432: ST_TO_ADDR
// SetDir ( result , d ) ;
56433: LD_VAR 0 5
56437: PPUSH
56438: LD_VAR 0 4
56442: PPUSH
56443: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56447: LD_VAR 0 5
56451: PPUSH
56452: LD_VAR 0 2
56456: PPUSH
56457: LD_VAR 0 3
56461: PPUSH
56462: LD_INT 0
56464: PPUSH
56465: CALL_OW 48
// end ;
56469: LD_VAR 0 5
56473: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56474: LD_INT 0
56476: PPUSH
56477: PPUSH
56478: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56479: LD_ADDR_VAR 0 2
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56502: LD_VAR 0 1
56506: NOT
56507: PUSH
56508: LD_VAR 0 1
56512: PPUSH
56513: CALL_OW 264
56517: PUSH
56518: LD_INT 12
56520: PUSH
56521: LD_INT 51
56523: PUSH
56524: LD_INT 32
56526: PUSH
56527: LD_INT 89
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: IN
56536: NOT
56537: OR
56538: IFFALSE 56542
// exit ;
56540: GO 56640
// for i := 1 to 3 do
56542: LD_ADDR_VAR 0 3
56546: PUSH
56547: DOUBLE
56548: LD_INT 1
56550: DEC
56551: ST_TO_ADDR
56552: LD_INT 3
56554: PUSH
56555: FOR_TO
56556: IFFALSE 56638
// begin tmp := GetCargo ( cargo , i ) ;
56558: LD_ADDR_VAR 0 4
56562: PUSH
56563: LD_VAR 0 1
56567: PPUSH
56568: LD_VAR 0 3
56572: PPUSH
56573: CALL_OW 289
56577: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56578: LD_ADDR_VAR 0 2
56582: PUSH
56583: LD_VAR 0 2
56587: PPUSH
56588: LD_VAR 0 3
56592: PPUSH
56593: LD_VAR 0 4
56597: PPUSH
56598: CALL_OW 1
56602: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56603: LD_ADDR_VAR 0 2
56607: PUSH
56608: LD_VAR 0 2
56612: PPUSH
56613: LD_INT 4
56615: PPUSH
56616: LD_VAR 0 2
56620: PUSH
56621: LD_INT 4
56623: ARRAY
56624: PUSH
56625: LD_VAR 0 4
56629: PLUS
56630: PPUSH
56631: CALL_OW 1
56635: ST_TO_ADDR
// end ;
56636: GO 56555
56638: POP
56639: POP
// end ;
56640: LD_VAR 0 2
56644: RET
// export function Length ( array ) ; begin
56645: LD_INT 0
56647: PPUSH
// result := array + 0 ;
56648: LD_ADDR_VAR 0 2
56652: PUSH
56653: LD_VAR 0 1
56657: PUSH
56658: LD_INT 0
56660: PLUS
56661: ST_TO_ADDR
// end ;
56662: LD_VAR 0 2
56666: RET
// export function PrepareArray ( array ) ; begin
56667: LD_INT 0
56669: PPUSH
// result := array diff 0 ;
56670: LD_ADDR_VAR 0 2
56674: PUSH
56675: LD_VAR 0 1
56679: PUSH
56680: LD_INT 0
56682: DIFF
56683: ST_TO_ADDR
// if not result [ 1 ] then
56684: LD_VAR 0 2
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: NOT
56693: IFFALSE 56713
// result := Delete ( result , 1 ) ;
56695: LD_ADDR_VAR 0 2
56699: PUSH
56700: LD_VAR 0 2
56704: PPUSH
56705: LD_INT 1
56707: PPUSH
56708: CALL_OW 3
56712: ST_TO_ADDR
// end ;
56713: LD_VAR 0 2
56717: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56718: LD_INT 0
56720: PPUSH
56721: PPUSH
56722: PPUSH
56723: PPUSH
// sibRocketRange := 25 ;
56724: LD_ADDR_VAR 0 6
56728: PUSH
56729: LD_INT 25
56731: ST_TO_ADDR
// result := false ;
56732: LD_ADDR_VAR 0 4
56736: PUSH
56737: LD_INT 0
56739: ST_TO_ADDR
// for i := 0 to 5 do
56740: LD_ADDR_VAR 0 5
56744: PUSH
56745: DOUBLE
56746: LD_INT 0
56748: DEC
56749: ST_TO_ADDR
56750: LD_INT 5
56752: PUSH
56753: FOR_TO
56754: IFFALSE 56821
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56756: LD_VAR 0 1
56760: PPUSH
56761: LD_VAR 0 5
56765: PPUSH
56766: LD_VAR 0 6
56770: PPUSH
56771: CALL_OW 272
56775: PPUSH
56776: LD_VAR 0 2
56780: PPUSH
56781: LD_VAR 0 5
56785: PPUSH
56786: LD_VAR 0 6
56790: PPUSH
56791: CALL_OW 273
56795: PPUSH
56796: LD_VAR 0 3
56800: PPUSH
56801: CALL_OW 309
56805: IFFALSE 56819
// begin result := true ;
56807: LD_ADDR_VAR 0 4
56811: PUSH
56812: LD_INT 1
56814: ST_TO_ADDR
// exit ;
56815: POP
56816: POP
56817: GO 56823
// end ;
56819: GO 56753
56821: POP
56822: POP
// end ;
56823: LD_VAR 0 4
56827: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56828: LD_INT 0
56830: PPUSH
56831: PPUSH
56832: PPUSH
// if btype = b_depot then
56833: LD_VAR 0 2
56837: PUSH
56838: LD_INT 0
56840: EQUAL
56841: IFFALSE 56853
// begin result := true ;
56843: LD_ADDR_VAR 0 3
56847: PUSH
56848: LD_INT 1
56850: ST_TO_ADDR
// exit ;
56851: GO 56969
// end ; pom := GetBase ( depot ) ;
56853: LD_ADDR_VAR 0 4
56857: PUSH
56858: LD_VAR 0 1
56862: PPUSH
56863: CALL_OW 274
56867: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56868: LD_ADDR_VAR 0 5
56872: PUSH
56873: LD_VAR 0 2
56877: PPUSH
56878: LD_VAR 0 1
56882: PPUSH
56883: CALL_OW 248
56887: PPUSH
56888: CALL_OW 450
56892: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56893: LD_ADDR_VAR 0 3
56897: PUSH
56898: LD_VAR 0 4
56902: PPUSH
56903: LD_INT 1
56905: PPUSH
56906: CALL_OW 275
56910: PUSH
56911: LD_VAR 0 5
56915: PUSH
56916: LD_INT 1
56918: ARRAY
56919: GREATEREQUAL
56920: PUSH
56921: LD_VAR 0 4
56925: PPUSH
56926: LD_INT 2
56928: PPUSH
56929: CALL_OW 275
56933: PUSH
56934: LD_VAR 0 5
56938: PUSH
56939: LD_INT 2
56941: ARRAY
56942: GREATEREQUAL
56943: AND
56944: PUSH
56945: LD_VAR 0 4
56949: PPUSH
56950: LD_INT 3
56952: PPUSH
56953: CALL_OW 275
56957: PUSH
56958: LD_VAR 0 5
56962: PUSH
56963: LD_INT 3
56965: ARRAY
56966: GREATEREQUAL
56967: AND
56968: ST_TO_ADDR
// end ;
56969: LD_VAR 0 3
56973: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56974: LD_INT 0
56976: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56977: LD_VAR 0 1
56981: PPUSH
56982: LD_VAR 0 2
56986: PPUSH
56987: LD_INT 0
56989: PPUSH
56990: LD_INT 0
56992: PPUSH
56993: LD_INT 1
56995: PPUSH
56996: LD_INT 0
56998: PPUSH
56999: CALL_OW 587
// end ;
57003: LD_VAR 0 3
57007: RET
// export function CenterOnNow ( unit ) ; begin
57008: LD_INT 0
57010: PPUSH
// result := IsInUnit ( unit ) ;
57011: LD_ADDR_VAR 0 2
57015: PUSH
57016: LD_VAR 0 1
57020: PPUSH
57021: CALL_OW 310
57025: ST_TO_ADDR
// if not result then
57026: LD_VAR 0 2
57030: NOT
57031: IFFALSE 57043
// result := unit ;
57033: LD_ADDR_VAR 0 2
57037: PUSH
57038: LD_VAR 0 1
57042: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57043: LD_VAR 0 1
57047: PPUSH
57048: CALL_OW 87
// end ;
57052: LD_VAR 0 2
57056: RET
// export function ComMoveHex ( unit , hex ) ; begin
57057: LD_INT 0
57059: PPUSH
// if not hex then
57060: LD_VAR 0 2
57064: NOT
57065: IFFALSE 57069
// exit ;
57067: GO 57122
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57069: LD_VAR 0 2
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PPUSH
57078: LD_VAR 0 2
57082: PUSH
57083: LD_INT 2
57085: ARRAY
57086: PPUSH
57087: CALL_OW 428
57091: IFFALSE 57095
// exit ;
57093: GO 57122
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57095: LD_VAR 0 1
57099: PPUSH
57100: LD_VAR 0 2
57104: PUSH
57105: LD_INT 1
57107: ARRAY
57108: PPUSH
57109: LD_VAR 0 2
57113: PUSH
57114: LD_INT 2
57116: ARRAY
57117: PPUSH
57118: CALL_OW 111
// end ;
57122: LD_VAR 0 3
57126: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57127: LD_INT 0
57129: PPUSH
57130: PPUSH
57131: PPUSH
// if not unit or not enemy then
57132: LD_VAR 0 1
57136: NOT
57137: PUSH
57138: LD_VAR 0 2
57142: NOT
57143: OR
57144: IFFALSE 57148
// exit ;
57146: GO 57272
// x := GetX ( enemy ) ;
57148: LD_ADDR_VAR 0 4
57152: PUSH
57153: LD_VAR 0 2
57157: PPUSH
57158: CALL_OW 250
57162: ST_TO_ADDR
// y := GetY ( enemy ) ;
57163: LD_ADDR_VAR 0 5
57167: PUSH
57168: LD_VAR 0 2
57172: PPUSH
57173: CALL_OW 251
57177: ST_TO_ADDR
// if ValidHex ( x , y ) then
57178: LD_VAR 0 4
57182: PPUSH
57183: LD_VAR 0 5
57187: PPUSH
57188: CALL_OW 488
57192: IFFALSE 57272
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57194: LD_VAR 0 2
57198: PPUSH
57199: CALL_OW 247
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: IN
57214: PUSH
57215: LD_VAR 0 1
57219: PPUSH
57220: CALL_OW 255
57224: PPUSH
57225: LD_VAR 0 2
57229: PPUSH
57230: CALL_OW 292
57234: OR
57235: IFFALSE 57253
// ComAttackUnit ( unit , enemy ) else
57237: LD_VAR 0 1
57241: PPUSH
57242: LD_VAR 0 2
57246: PPUSH
57247: CALL_OW 115
57251: GO 57272
// ComAgressiveMove ( unit , x , y ) ;
57253: LD_VAR 0 1
57257: PPUSH
57258: LD_VAR 0 4
57262: PPUSH
57263: LD_VAR 0 5
57267: PPUSH
57268: CALL_OW 114
// end ;
57272: LD_VAR 0 3
57276: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57277: LD_INT 0
57279: PPUSH
57280: PPUSH
57281: PPUSH
// list := AreaToList ( area , 0 ) ;
57282: LD_ADDR_VAR 0 5
57286: PUSH
57287: LD_VAR 0 1
57291: PPUSH
57292: LD_INT 0
57294: PPUSH
57295: CALL_OW 517
57299: ST_TO_ADDR
// if not list then
57300: LD_VAR 0 5
57304: NOT
57305: IFFALSE 57309
// exit ;
57307: GO 57439
// if all then
57309: LD_VAR 0 2
57313: IFFALSE 57401
// begin for i := 1 to list [ 1 ] do
57315: LD_ADDR_VAR 0 4
57319: PUSH
57320: DOUBLE
57321: LD_INT 1
57323: DEC
57324: ST_TO_ADDR
57325: LD_VAR 0 5
57329: PUSH
57330: LD_INT 1
57332: ARRAY
57333: PUSH
57334: FOR_TO
57335: IFFALSE 57397
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57337: LD_ADDR_VAR 0 3
57341: PUSH
57342: LD_VAR 0 3
57346: PPUSH
57347: LD_VAR 0 3
57351: PUSH
57352: LD_INT 1
57354: PLUS
57355: PPUSH
57356: LD_VAR 0 5
57360: PUSH
57361: LD_INT 1
57363: ARRAY
57364: PUSH
57365: LD_VAR 0 4
57369: ARRAY
57370: PUSH
57371: LD_VAR 0 5
57375: PUSH
57376: LD_INT 2
57378: ARRAY
57379: PUSH
57380: LD_VAR 0 4
57384: ARRAY
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PPUSH
57390: CALL_OW 1
57394: ST_TO_ADDR
57395: GO 57334
57397: POP
57398: POP
// exit ;
57399: GO 57439
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57401: LD_ADDR_VAR 0 3
57405: PUSH
57406: LD_VAR 0 5
57410: PUSH
57411: LD_INT 1
57413: ARRAY
57414: PUSH
57415: LD_INT 1
57417: ARRAY
57418: PUSH
57419: LD_VAR 0 5
57423: PUSH
57424: LD_INT 2
57426: ARRAY
57427: PUSH
57428: LD_INT 1
57430: ARRAY
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: ST_TO_ADDR
// end ;
57439: LD_VAR 0 3
57443: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57444: LD_INT 0
57446: PPUSH
57447: PPUSH
// list := AreaToList ( area , 0 ) ;
57448: LD_ADDR_VAR 0 4
57452: PUSH
57453: LD_VAR 0 1
57457: PPUSH
57458: LD_INT 0
57460: PPUSH
57461: CALL_OW 517
57465: ST_TO_ADDR
// if not list then
57466: LD_VAR 0 4
57470: NOT
57471: IFFALSE 57475
// exit ;
57473: GO 57516
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57475: LD_ADDR_VAR 0 3
57479: PUSH
57480: LD_VAR 0 4
57484: PUSH
57485: LD_INT 1
57487: ARRAY
57488: PUSH
57489: LD_INT 1
57491: ARRAY
57492: PUSH
57493: LD_VAR 0 4
57497: PUSH
57498: LD_INT 2
57500: ARRAY
57501: PUSH
57502: LD_INT 1
57504: ARRAY
57505: PUSH
57506: LD_VAR 0 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// end ;
57516: LD_VAR 0 3
57520: RET
// export function First ( array ) ; begin
57521: LD_INT 0
57523: PPUSH
// if not array then
57524: LD_VAR 0 1
57528: NOT
57529: IFFALSE 57533
// exit ;
57531: GO 57547
// result := array [ 1 ] ;
57533: LD_ADDR_VAR 0 2
57537: PUSH
57538: LD_VAR 0 1
57542: PUSH
57543: LD_INT 1
57545: ARRAY
57546: ST_TO_ADDR
// end ;
57547: LD_VAR 0 2
57551: RET
// export function Last ( array ) ; begin
57552: LD_INT 0
57554: PPUSH
// if not array then
57555: LD_VAR 0 1
57559: NOT
57560: IFFALSE 57564
// exit ;
57562: GO 57580
// result := array [ array ] ;
57564: LD_ADDR_VAR 0 2
57568: PUSH
57569: LD_VAR 0 1
57573: PUSH
57574: LD_VAR 0 1
57578: ARRAY
57579: ST_TO_ADDR
// end ;
57580: LD_VAR 0 2
57584: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57585: LD_INT 0
57587: PPUSH
57588: PPUSH
// result := [ ] ;
57589: LD_ADDR_VAR 0 5
57593: PUSH
57594: EMPTY
57595: ST_TO_ADDR
// if not array then
57596: LD_VAR 0 1
57600: NOT
57601: IFFALSE 57605
// exit ;
57603: GO 57717
// for i := 1 to array do
57605: LD_ADDR_VAR 0 6
57609: PUSH
57610: DOUBLE
57611: LD_INT 1
57613: DEC
57614: ST_TO_ADDR
57615: LD_VAR 0 1
57619: PUSH
57620: FOR_TO
57621: IFFALSE 57715
// if array [ i ] [ index ] = value then
57623: LD_VAR 0 1
57627: PUSH
57628: LD_VAR 0 6
57632: ARRAY
57633: PUSH
57634: LD_VAR 0 2
57638: ARRAY
57639: PUSH
57640: LD_VAR 0 3
57644: EQUAL
57645: IFFALSE 57713
// begin if indexColumn then
57647: LD_VAR 0 4
57651: IFFALSE 57687
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57653: LD_ADDR_VAR 0 5
57657: PUSH
57658: LD_VAR 0 5
57662: PPUSH
57663: LD_VAR 0 1
57667: PUSH
57668: LD_VAR 0 6
57672: ARRAY
57673: PUSH
57674: LD_VAR 0 4
57678: ARRAY
57679: PPUSH
57680: CALL 52905 0 2
57684: ST_TO_ADDR
57685: GO 57713
// result := Join ( result , array [ i ] ) ;
57687: LD_ADDR_VAR 0 5
57691: PUSH
57692: LD_VAR 0 5
57696: PPUSH
57697: LD_VAR 0 1
57701: PUSH
57702: LD_VAR 0 6
57706: ARRAY
57707: PPUSH
57708: CALL 52905 0 2
57712: ST_TO_ADDR
// end ;
57713: GO 57620
57715: POP
57716: POP
// end ;
57717: LD_VAR 0 5
57721: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57722: LD_INT 0
57724: PPUSH
// if not vehicles or not parkingPoint then
57725: LD_VAR 0 1
57729: NOT
57730: PUSH
57731: LD_VAR 0 2
57735: NOT
57736: OR
57737: IFFALSE 57741
// exit ;
57739: GO 57839
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57741: LD_ADDR_VAR 0 1
57745: PUSH
57746: LD_VAR 0 1
57750: PPUSH
57751: LD_INT 50
57753: PUSH
57754: EMPTY
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: LD_INT 92
57762: PUSH
57763: LD_VAR 0 2
57767: PUSH
57768: LD_INT 1
57770: ARRAY
57771: PUSH
57772: LD_VAR 0 2
57776: PUSH
57777: LD_INT 2
57779: ARRAY
57780: PUSH
57781: LD_INT 8
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PPUSH
57798: CALL_OW 72
57802: ST_TO_ADDR
// if not vehicles then
57803: LD_VAR 0 1
57807: NOT
57808: IFFALSE 57812
// exit ;
57810: GO 57839
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57812: LD_VAR 0 1
57816: PPUSH
57817: LD_VAR 0 2
57821: PUSH
57822: LD_INT 1
57824: ARRAY
57825: PPUSH
57826: LD_VAR 0 2
57830: PUSH
57831: LD_INT 2
57833: ARRAY
57834: PPUSH
57835: CALL_OW 111
// end ;
57839: LD_VAR 0 3
57843: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57844: LD_INT 0
57846: PPUSH
57847: PPUSH
57848: PPUSH
// if not side or not area then
57849: LD_VAR 0 1
57853: NOT
57854: PUSH
57855: LD_VAR 0 2
57859: NOT
57860: OR
57861: IFFALSE 57865
// exit ;
57863: GO 57984
// tmp := AreaToList ( area , 0 ) ;
57865: LD_ADDR_VAR 0 5
57869: PUSH
57870: LD_VAR 0 2
57874: PPUSH
57875: LD_INT 0
57877: PPUSH
57878: CALL_OW 517
57882: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57883: LD_ADDR_VAR 0 4
57887: PUSH
57888: DOUBLE
57889: LD_INT 1
57891: DEC
57892: ST_TO_ADDR
57893: LD_VAR 0 5
57897: PUSH
57898: LD_INT 1
57900: ARRAY
57901: PUSH
57902: FOR_TO
57903: IFFALSE 57982
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57905: LD_VAR 0 5
57909: PUSH
57910: LD_INT 1
57912: ARRAY
57913: PUSH
57914: LD_VAR 0 4
57918: ARRAY
57919: PPUSH
57920: LD_VAR 0 5
57924: PUSH
57925: LD_INT 2
57927: ARRAY
57928: PUSH
57929: LD_VAR 0 4
57933: ARRAY
57934: PPUSH
57935: CALL_OW 351
57939: IFFALSE 57980
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57941: LD_VAR 0 5
57945: PUSH
57946: LD_INT 1
57948: ARRAY
57949: PUSH
57950: LD_VAR 0 4
57954: ARRAY
57955: PPUSH
57956: LD_VAR 0 5
57960: PUSH
57961: LD_INT 2
57963: ARRAY
57964: PUSH
57965: LD_VAR 0 4
57969: ARRAY
57970: PPUSH
57971: LD_VAR 0 1
57975: PPUSH
57976: CALL_OW 244
// end ;
57980: GO 57902
57982: POP
57983: POP
// end ; end_of_file
57984: LD_VAR 0 3
57988: RET
// export globalGameSaveCounter ; every 0 0$1 do
57989: GO 57991
57991: DISABLE
// begin enable ;
57992: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57993: LD_STRING updateTimer(
57995: PUSH
57996: LD_OWVAR 1
58000: STR
58001: PUSH
58002: LD_STRING );
58004: STR
58005: PPUSH
58006: CALL_OW 559
// end ;
58010: END
// every 0 0$1 do
58011: GO 58013
58013: DISABLE
// begin globalGameSaveCounter := 0 ;
58014: LD_ADDR_EXP 45
58018: PUSH
58019: LD_INT 0
58021: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58022: LD_STRING setGameSaveCounter(0)
58024: PPUSH
58025: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58029: LD_STRING initStreamRollete();
58031: PPUSH
58032: CALL_OW 559
// InitStreamMode ;
58036: CALL 59379 0 0
// DefineStreamItems ( false ) ;
58040: LD_INT 0
58042: PPUSH
58043: CALL 59843 0 1
// end ;
58047: END
// export function SOS_MapStart ( ) ; begin
58048: LD_INT 0
58050: PPUSH
// if streamModeActive then
58051: LD_EXP 46
58055: IFFALSE 58064
// DefineStreamItems ( true ) ;
58057: LD_INT 1
58059: PPUSH
58060: CALL 59843 0 1
// UpdateLuaVariables ( ) ;
58064: CALL 58081 0 0
// UpdateFactoryWaypoints ( ) ;
58068: CALL 72712 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58072: CALL 72969 0 0
// end ;
58076: LD_VAR 0 1
58080: RET
// function UpdateLuaVariables ( ) ; begin
58081: LD_INT 0
58083: PPUSH
// if globalGameSaveCounter then
58084: LD_EXP 45
58088: IFFALSE 58122
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58090: LD_ADDR_EXP 45
58094: PUSH
58095: LD_EXP 45
58099: PPUSH
58100: CALL 54266 0 1
58104: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58105: LD_STRING setGameSaveCounter(
58107: PUSH
58108: LD_EXP 45
58112: STR
58113: PUSH
58114: LD_STRING )
58116: STR
58117: PPUSH
58118: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58122: LD_STRING setGameDifficulty(
58124: PUSH
58125: LD_OWVAR 67
58129: STR
58130: PUSH
58131: LD_STRING )
58133: STR
58134: PPUSH
58135: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58139: LD_STRING displayDifficulty(
58141: PUSH
58142: LD_OWVAR 67
58146: STR
58147: PUSH
58148: LD_STRING )
58150: STR
58151: PPUSH
58152: CALL_OW 559
// end ;
58156: LD_VAR 0 1
58160: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58161: LD_INT 0
58163: PPUSH
// if p2 = stream_mode then
58164: LD_VAR 0 2
58168: PUSH
58169: LD_INT 100
58171: EQUAL
58172: IFFALSE 59175
// begin if not StreamModeActive then
58174: LD_EXP 46
58178: NOT
58179: IFFALSE 58189
// StreamModeActive := true ;
58181: LD_ADDR_EXP 46
58185: PUSH
58186: LD_INT 1
58188: ST_TO_ADDR
// if p3 = 0 then
58189: LD_VAR 0 3
58193: PUSH
58194: LD_INT 0
58196: EQUAL
58197: IFFALSE 58203
// InitStreamMode ;
58199: CALL 59379 0 0
// if p3 = 1 then
58203: LD_VAR 0 3
58207: PUSH
58208: LD_INT 1
58210: EQUAL
58211: IFFALSE 58221
// sRocket := true ;
58213: LD_ADDR_EXP 51
58217: PUSH
58218: LD_INT 1
58220: ST_TO_ADDR
// if p3 = 2 then
58221: LD_VAR 0 3
58225: PUSH
58226: LD_INT 2
58228: EQUAL
58229: IFFALSE 58239
// sSpeed := true ;
58231: LD_ADDR_EXP 50
58235: PUSH
58236: LD_INT 1
58238: ST_TO_ADDR
// if p3 = 3 then
58239: LD_VAR 0 3
58243: PUSH
58244: LD_INT 3
58246: EQUAL
58247: IFFALSE 58257
// sEngine := true ;
58249: LD_ADDR_EXP 52
58253: PUSH
58254: LD_INT 1
58256: ST_TO_ADDR
// if p3 = 4 then
58257: LD_VAR 0 3
58261: PUSH
58262: LD_INT 4
58264: EQUAL
58265: IFFALSE 58275
// sSpec := true ;
58267: LD_ADDR_EXP 49
58271: PUSH
58272: LD_INT 1
58274: ST_TO_ADDR
// if p3 = 5 then
58275: LD_VAR 0 3
58279: PUSH
58280: LD_INT 5
58282: EQUAL
58283: IFFALSE 58293
// sLevel := true ;
58285: LD_ADDR_EXP 53
58289: PUSH
58290: LD_INT 1
58292: ST_TO_ADDR
// if p3 = 6 then
58293: LD_VAR 0 3
58297: PUSH
58298: LD_INT 6
58300: EQUAL
58301: IFFALSE 58311
// sArmoury := true ;
58303: LD_ADDR_EXP 54
58307: PUSH
58308: LD_INT 1
58310: ST_TO_ADDR
// if p3 = 7 then
58311: LD_VAR 0 3
58315: PUSH
58316: LD_INT 7
58318: EQUAL
58319: IFFALSE 58329
// sRadar := true ;
58321: LD_ADDR_EXP 55
58325: PUSH
58326: LD_INT 1
58328: ST_TO_ADDR
// if p3 = 8 then
58329: LD_VAR 0 3
58333: PUSH
58334: LD_INT 8
58336: EQUAL
58337: IFFALSE 58347
// sBunker := true ;
58339: LD_ADDR_EXP 56
58343: PUSH
58344: LD_INT 1
58346: ST_TO_ADDR
// if p3 = 9 then
58347: LD_VAR 0 3
58351: PUSH
58352: LD_INT 9
58354: EQUAL
58355: IFFALSE 58365
// sHack := true ;
58357: LD_ADDR_EXP 57
58361: PUSH
58362: LD_INT 1
58364: ST_TO_ADDR
// if p3 = 10 then
58365: LD_VAR 0 3
58369: PUSH
58370: LD_INT 10
58372: EQUAL
58373: IFFALSE 58383
// sFire := true ;
58375: LD_ADDR_EXP 58
58379: PUSH
58380: LD_INT 1
58382: ST_TO_ADDR
// if p3 = 11 then
58383: LD_VAR 0 3
58387: PUSH
58388: LD_INT 11
58390: EQUAL
58391: IFFALSE 58401
// sRefresh := true ;
58393: LD_ADDR_EXP 59
58397: PUSH
58398: LD_INT 1
58400: ST_TO_ADDR
// if p3 = 12 then
58401: LD_VAR 0 3
58405: PUSH
58406: LD_INT 12
58408: EQUAL
58409: IFFALSE 58419
// sExp := true ;
58411: LD_ADDR_EXP 60
58415: PUSH
58416: LD_INT 1
58418: ST_TO_ADDR
// if p3 = 13 then
58419: LD_VAR 0 3
58423: PUSH
58424: LD_INT 13
58426: EQUAL
58427: IFFALSE 58437
// sDepot := true ;
58429: LD_ADDR_EXP 61
58433: PUSH
58434: LD_INT 1
58436: ST_TO_ADDR
// if p3 = 14 then
58437: LD_VAR 0 3
58441: PUSH
58442: LD_INT 14
58444: EQUAL
58445: IFFALSE 58455
// sFlag := true ;
58447: LD_ADDR_EXP 62
58451: PUSH
58452: LD_INT 1
58454: ST_TO_ADDR
// if p3 = 15 then
58455: LD_VAR 0 3
58459: PUSH
58460: LD_INT 15
58462: EQUAL
58463: IFFALSE 58473
// sKamikadze := true ;
58465: LD_ADDR_EXP 70
58469: PUSH
58470: LD_INT 1
58472: ST_TO_ADDR
// if p3 = 16 then
58473: LD_VAR 0 3
58477: PUSH
58478: LD_INT 16
58480: EQUAL
58481: IFFALSE 58491
// sTroll := true ;
58483: LD_ADDR_EXP 71
58487: PUSH
58488: LD_INT 1
58490: ST_TO_ADDR
// if p3 = 17 then
58491: LD_VAR 0 3
58495: PUSH
58496: LD_INT 17
58498: EQUAL
58499: IFFALSE 58509
// sSlow := true ;
58501: LD_ADDR_EXP 72
58505: PUSH
58506: LD_INT 1
58508: ST_TO_ADDR
// if p3 = 18 then
58509: LD_VAR 0 3
58513: PUSH
58514: LD_INT 18
58516: EQUAL
58517: IFFALSE 58527
// sLack := true ;
58519: LD_ADDR_EXP 73
58523: PUSH
58524: LD_INT 1
58526: ST_TO_ADDR
// if p3 = 19 then
58527: LD_VAR 0 3
58531: PUSH
58532: LD_INT 19
58534: EQUAL
58535: IFFALSE 58545
// sTank := true ;
58537: LD_ADDR_EXP 75
58541: PUSH
58542: LD_INT 1
58544: ST_TO_ADDR
// if p3 = 20 then
58545: LD_VAR 0 3
58549: PUSH
58550: LD_INT 20
58552: EQUAL
58553: IFFALSE 58563
// sRemote := true ;
58555: LD_ADDR_EXP 76
58559: PUSH
58560: LD_INT 1
58562: ST_TO_ADDR
// if p3 = 21 then
58563: LD_VAR 0 3
58567: PUSH
58568: LD_INT 21
58570: EQUAL
58571: IFFALSE 58581
// sPowell := true ;
58573: LD_ADDR_EXP 77
58577: PUSH
58578: LD_INT 1
58580: ST_TO_ADDR
// if p3 = 22 then
58581: LD_VAR 0 3
58585: PUSH
58586: LD_INT 22
58588: EQUAL
58589: IFFALSE 58599
// sTeleport := true ;
58591: LD_ADDR_EXP 80
58595: PUSH
58596: LD_INT 1
58598: ST_TO_ADDR
// if p3 = 23 then
58599: LD_VAR 0 3
58603: PUSH
58604: LD_INT 23
58606: EQUAL
58607: IFFALSE 58617
// sOilTower := true ;
58609: LD_ADDR_EXP 82
58613: PUSH
58614: LD_INT 1
58616: ST_TO_ADDR
// if p3 = 24 then
58617: LD_VAR 0 3
58621: PUSH
58622: LD_INT 24
58624: EQUAL
58625: IFFALSE 58635
// sShovel := true ;
58627: LD_ADDR_EXP 83
58631: PUSH
58632: LD_INT 1
58634: ST_TO_ADDR
// if p3 = 25 then
58635: LD_VAR 0 3
58639: PUSH
58640: LD_INT 25
58642: EQUAL
58643: IFFALSE 58653
// sSheik := true ;
58645: LD_ADDR_EXP 84
58649: PUSH
58650: LD_INT 1
58652: ST_TO_ADDR
// if p3 = 26 then
58653: LD_VAR 0 3
58657: PUSH
58658: LD_INT 26
58660: EQUAL
58661: IFFALSE 58671
// sEarthquake := true ;
58663: LD_ADDR_EXP 86
58667: PUSH
58668: LD_INT 1
58670: ST_TO_ADDR
// if p3 = 27 then
58671: LD_VAR 0 3
58675: PUSH
58676: LD_INT 27
58678: EQUAL
58679: IFFALSE 58689
// sAI := true ;
58681: LD_ADDR_EXP 87
58685: PUSH
58686: LD_INT 1
58688: ST_TO_ADDR
// if p3 = 28 then
58689: LD_VAR 0 3
58693: PUSH
58694: LD_INT 28
58696: EQUAL
58697: IFFALSE 58707
// sCargo := true ;
58699: LD_ADDR_EXP 90
58703: PUSH
58704: LD_INT 1
58706: ST_TO_ADDR
// if p3 = 29 then
58707: LD_VAR 0 3
58711: PUSH
58712: LD_INT 29
58714: EQUAL
58715: IFFALSE 58725
// sDLaser := true ;
58717: LD_ADDR_EXP 91
58721: PUSH
58722: LD_INT 1
58724: ST_TO_ADDR
// if p3 = 30 then
58725: LD_VAR 0 3
58729: PUSH
58730: LD_INT 30
58732: EQUAL
58733: IFFALSE 58743
// sExchange := true ;
58735: LD_ADDR_EXP 92
58739: PUSH
58740: LD_INT 1
58742: ST_TO_ADDR
// if p3 = 31 then
58743: LD_VAR 0 3
58747: PUSH
58748: LD_INT 31
58750: EQUAL
58751: IFFALSE 58761
// sFac := true ;
58753: LD_ADDR_EXP 93
58757: PUSH
58758: LD_INT 1
58760: ST_TO_ADDR
// if p3 = 32 then
58761: LD_VAR 0 3
58765: PUSH
58766: LD_INT 32
58768: EQUAL
58769: IFFALSE 58779
// sPower := true ;
58771: LD_ADDR_EXP 94
58775: PUSH
58776: LD_INT 1
58778: ST_TO_ADDR
// if p3 = 33 then
58779: LD_VAR 0 3
58783: PUSH
58784: LD_INT 33
58786: EQUAL
58787: IFFALSE 58797
// sRandom := true ;
58789: LD_ADDR_EXP 95
58793: PUSH
58794: LD_INT 1
58796: ST_TO_ADDR
// if p3 = 34 then
58797: LD_VAR 0 3
58801: PUSH
58802: LD_INT 34
58804: EQUAL
58805: IFFALSE 58815
// sShield := true ;
58807: LD_ADDR_EXP 96
58811: PUSH
58812: LD_INT 1
58814: ST_TO_ADDR
// if p3 = 35 then
58815: LD_VAR 0 3
58819: PUSH
58820: LD_INT 35
58822: EQUAL
58823: IFFALSE 58833
// sTime := true ;
58825: LD_ADDR_EXP 97
58829: PUSH
58830: LD_INT 1
58832: ST_TO_ADDR
// if p3 = 36 then
58833: LD_VAR 0 3
58837: PUSH
58838: LD_INT 36
58840: EQUAL
58841: IFFALSE 58851
// sTools := true ;
58843: LD_ADDR_EXP 98
58847: PUSH
58848: LD_INT 1
58850: ST_TO_ADDR
// if p3 = 101 then
58851: LD_VAR 0 3
58855: PUSH
58856: LD_INT 101
58858: EQUAL
58859: IFFALSE 58869
// sSold := true ;
58861: LD_ADDR_EXP 63
58865: PUSH
58866: LD_INT 1
58868: ST_TO_ADDR
// if p3 = 102 then
58869: LD_VAR 0 3
58873: PUSH
58874: LD_INT 102
58876: EQUAL
58877: IFFALSE 58887
// sDiff := true ;
58879: LD_ADDR_EXP 64
58883: PUSH
58884: LD_INT 1
58886: ST_TO_ADDR
// if p3 = 103 then
58887: LD_VAR 0 3
58891: PUSH
58892: LD_INT 103
58894: EQUAL
58895: IFFALSE 58905
// sFog := true ;
58897: LD_ADDR_EXP 67
58901: PUSH
58902: LD_INT 1
58904: ST_TO_ADDR
// if p3 = 104 then
58905: LD_VAR 0 3
58909: PUSH
58910: LD_INT 104
58912: EQUAL
58913: IFFALSE 58923
// sReset := true ;
58915: LD_ADDR_EXP 68
58919: PUSH
58920: LD_INT 1
58922: ST_TO_ADDR
// if p3 = 105 then
58923: LD_VAR 0 3
58927: PUSH
58928: LD_INT 105
58930: EQUAL
58931: IFFALSE 58941
// sSun := true ;
58933: LD_ADDR_EXP 69
58937: PUSH
58938: LD_INT 1
58940: ST_TO_ADDR
// if p3 = 106 then
58941: LD_VAR 0 3
58945: PUSH
58946: LD_INT 106
58948: EQUAL
58949: IFFALSE 58959
// sTiger := true ;
58951: LD_ADDR_EXP 65
58955: PUSH
58956: LD_INT 1
58958: ST_TO_ADDR
// if p3 = 107 then
58959: LD_VAR 0 3
58963: PUSH
58964: LD_INT 107
58966: EQUAL
58967: IFFALSE 58977
// sBomb := true ;
58969: LD_ADDR_EXP 66
58973: PUSH
58974: LD_INT 1
58976: ST_TO_ADDR
// if p3 = 108 then
58977: LD_VAR 0 3
58981: PUSH
58982: LD_INT 108
58984: EQUAL
58985: IFFALSE 58995
// sWound := true ;
58987: LD_ADDR_EXP 74
58991: PUSH
58992: LD_INT 1
58994: ST_TO_ADDR
// if p3 = 109 then
58995: LD_VAR 0 3
58999: PUSH
59000: LD_INT 109
59002: EQUAL
59003: IFFALSE 59013
// sBetray := true ;
59005: LD_ADDR_EXP 78
59009: PUSH
59010: LD_INT 1
59012: ST_TO_ADDR
// if p3 = 110 then
59013: LD_VAR 0 3
59017: PUSH
59018: LD_INT 110
59020: EQUAL
59021: IFFALSE 59031
// sContamin := true ;
59023: LD_ADDR_EXP 79
59027: PUSH
59028: LD_INT 1
59030: ST_TO_ADDR
// if p3 = 111 then
59031: LD_VAR 0 3
59035: PUSH
59036: LD_INT 111
59038: EQUAL
59039: IFFALSE 59049
// sOil := true ;
59041: LD_ADDR_EXP 81
59045: PUSH
59046: LD_INT 1
59048: ST_TO_ADDR
// if p3 = 112 then
59049: LD_VAR 0 3
59053: PUSH
59054: LD_INT 112
59056: EQUAL
59057: IFFALSE 59067
// sStu := true ;
59059: LD_ADDR_EXP 85
59063: PUSH
59064: LD_INT 1
59066: ST_TO_ADDR
// if p3 = 113 then
59067: LD_VAR 0 3
59071: PUSH
59072: LD_INT 113
59074: EQUAL
59075: IFFALSE 59085
// sBazooka := true ;
59077: LD_ADDR_EXP 88
59081: PUSH
59082: LD_INT 1
59084: ST_TO_ADDR
// if p3 = 114 then
59085: LD_VAR 0 3
59089: PUSH
59090: LD_INT 114
59092: EQUAL
59093: IFFALSE 59103
// sMortar := true ;
59095: LD_ADDR_EXP 89
59099: PUSH
59100: LD_INT 1
59102: ST_TO_ADDR
// if p3 = 115 then
59103: LD_VAR 0 3
59107: PUSH
59108: LD_INT 115
59110: EQUAL
59111: IFFALSE 59121
// sRanger := true ;
59113: LD_ADDR_EXP 99
59117: PUSH
59118: LD_INT 1
59120: ST_TO_ADDR
// if p3 = 116 then
59121: LD_VAR 0 3
59125: PUSH
59126: LD_INT 116
59128: EQUAL
59129: IFFALSE 59139
// sComputer := true ;
59131: LD_ADDR_EXP 100
59135: PUSH
59136: LD_INT 1
59138: ST_TO_ADDR
// if p3 = 117 then
59139: LD_VAR 0 3
59143: PUSH
59144: LD_INT 117
59146: EQUAL
59147: IFFALSE 59157
// s30 := true ;
59149: LD_ADDR_EXP 101
59153: PUSH
59154: LD_INT 1
59156: ST_TO_ADDR
// if p3 = 118 then
59157: LD_VAR 0 3
59161: PUSH
59162: LD_INT 118
59164: EQUAL
59165: IFFALSE 59175
// s60 := true ;
59167: LD_ADDR_EXP 102
59171: PUSH
59172: LD_INT 1
59174: ST_TO_ADDR
// end ; if p2 = hack_mode then
59175: LD_VAR 0 2
59179: PUSH
59180: LD_INT 101
59182: EQUAL
59183: IFFALSE 59311
// begin case p3 of 1 :
59185: LD_VAR 0 3
59189: PUSH
59190: LD_INT 1
59192: DOUBLE
59193: EQUAL
59194: IFTRUE 59198
59196: GO 59205
59198: POP
// hHackUnlimitedResources ; 2 :
59199: CALL 71458 0 0
59203: GO 59311
59205: LD_INT 2
59207: DOUBLE
59208: EQUAL
59209: IFTRUE 59213
59211: GO 59220
59213: POP
// hHackSetLevel10 ; 3 :
59214: CALL 71591 0 0
59218: GO 59311
59220: LD_INT 3
59222: DOUBLE
59223: EQUAL
59224: IFTRUE 59228
59226: GO 59235
59228: POP
// hHackSetLevel10YourUnits ; 4 :
59229: CALL 71676 0 0
59233: GO 59311
59235: LD_INT 4
59237: DOUBLE
59238: EQUAL
59239: IFTRUE 59243
59241: GO 59250
59243: POP
// hHackInvincible ; 5 :
59244: CALL 72124 0 0
59248: GO 59311
59250: LD_INT 5
59252: DOUBLE
59253: EQUAL
59254: IFTRUE 59258
59256: GO 59265
59258: POP
// hHackInvisible ; 6 :
59259: CALL 72235 0 0
59263: GO 59311
59265: LD_INT 6
59267: DOUBLE
59268: EQUAL
59269: IFTRUE 59273
59271: GO 59280
59273: POP
// hHackChangeYourSide ; 7 :
59274: CALL 72292 0 0
59278: GO 59311
59280: LD_INT 7
59282: DOUBLE
59283: EQUAL
59284: IFTRUE 59288
59286: GO 59295
59288: POP
// hHackChangeUnitSide ; 8 :
59289: CALL 72334 0 0
59293: GO 59311
59295: LD_INT 8
59297: DOUBLE
59298: EQUAL
59299: IFTRUE 59303
59301: GO 59310
59303: POP
// hHackFog ; end ;
59304: CALL 72435 0 0
59308: GO 59311
59310: POP
// end ; if p2 = game_save_mode then
59311: LD_VAR 0 2
59315: PUSH
59316: LD_INT 102
59318: EQUAL
59319: IFFALSE 59374
// begin if p3 = 1 then
59321: LD_VAR 0 3
59325: PUSH
59326: LD_INT 1
59328: EQUAL
59329: IFFALSE 59341
// globalGameSaveCounter := p4 ;
59331: LD_ADDR_EXP 45
59335: PUSH
59336: LD_VAR 0 4
59340: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59341: LD_VAR 0 3
59345: PUSH
59346: LD_INT 2
59348: EQUAL
59349: PUSH
59350: LD_EXP 45
59354: AND
59355: IFFALSE 59374
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59357: LD_STRING setGameSaveCounter(
59359: PUSH
59360: LD_EXP 45
59364: STR
59365: PUSH
59366: LD_STRING )
59368: STR
59369: PPUSH
59370: CALL_OW 559
// end ; end ;
59374: LD_VAR 0 7
59378: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59379: LD_INT 0
59381: PPUSH
// streamModeActive := false ;
59382: LD_ADDR_EXP 46
59386: PUSH
59387: LD_INT 0
59389: ST_TO_ADDR
// normalCounter := 36 ;
59390: LD_ADDR_EXP 47
59394: PUSH
59395: LD_INT 36
59397: ST_TO_ADDR
// hardcoreCounter := 18 ;
59398: LD_ADDR_EXP 48
59402: PUSH
59403: LD_INT 18
59405: ST_TO_ADDR
// sRocket := false ;
59406: LD_ADDR_EXP 51
59410: PUSH
59411: LD_INT 0
59413: ST_TO_ADDR
// sSpeed := false ;
59414: LD_ADDR_EXP 50
59418: PUSH
59419: LD_INT 0
59421: ST_TO_ADDR
// sEngine := false ;
59422: LD_ADDR_EXP 52
59426: PUSH
59427: LD_INT 0
59429: ST_TO_ADDR
// sSpec := false ;
59430: LD_ADDR_EXP 49
59434: PUSH
59435: LD_INT 0
59437: ST_TO_ADDR
// sLevel := false ;
59438: LD_ADDR_EXP 53
59442: PUSH
59443: LD_INT 0
59445: ST_TO_ADDR
// sArmoury := false ;
59446: LD_ADDR_EXP 54
59450: PUSH
59451: LD_INT 0
59453: ST_TO_ADDR
// sRadar := false ;
59454: LD_ADDR_EXP 55
59458: PUSH
59459: LD_INT 0
59461: ST_TO_ADDR
// sBunker := false ;
59462: LD_ADDR_EXP 56
59466: PUSH
59467: LD_INT 0
59469: ST_TO_ADDR
// sHack := false ;
59470: LD_ADDR_EXP 57
59474: PUSH
59475: LD_INT 0
59477: ST_TO_ADDR
// sFire := false ;
59478: LD_ADDR_EXP 58
59482: PUSH
59483: LD_INT 0
59485: ST_TO_ADDR
// sRefresh := false ;
59486: LD_ADDR_EXP 59
59490: PUSH
59491: LD_INT 0
59493: ST_TO_ADDR
// sExp := false ;
59494: LD_ADDR_EXP 60
59498: PUSH
59499: LD_INT 0
59501: ST_TO_ADDR
// sDepot := false ;
59502: LD_ADDR_EXP 61
59506: PUSH
59507: LD_INT 0
59509: ST_TO_ADDR
// sFlag := false ;
59510: LD_ADDR_EXP 62
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// sKamikadze := false ;
59518: LD_ADDR_EXP 70
59522: PUSH
59523: LD_INT 0
59525: ST_TO_ADDR
// sTroll := false ;
59526: LD_ADDR_EXP 71
59530: PUSH
59531: LD_INT 0
59533: ST_TO_ADDR
// sSlow := false ;
59534: LD_ADDR_EXP 72
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// sLack := false ;
59542: LD_ADDR_EXP 73
59546: PUSH
59547: LD_INT 0
59549: ST_TO_ADDR
// sTank := false ;
59550: LD_ADDR_EXP 75
59554: PUSH
59555: LD_INT 0
59557: ST_TO_ADDR
// sRemote := false ;
59558: LD_ADDR_EXP 76
59562: PUSH
59563: LD_INT 0
59565: ST_TO_ADDR
// sPowell := false ;
59566: LD_ADDR_EXP 77
59570: PUSH
59571: LD_INT 0
59573: ST_TO_ADDR
// sTeleport := false ;
59574: LD_ADDR_EXP 80
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// sOilTower := false ;
59582: LD_ADDR_EXP 82
59586: PUSH
59587: LD_INT 0
59589: ST_TO_ADDR
// sShovel := false ;
59590: LD_ADDR_EXP 83
59594: PUSH
59595: LD_INT 0
59597: ST_TO_ADDR
// sSheik := false ;
59598: LD_ADDR_EXP 84
59602: PUSH
59603: LD_INT 0
59605: ST_TO_ADDR
// sEarthquake := false ;
59606: LD_ADDR_EXP 86
59610: PUSH
59611: LD_INT 0
59613: ST_TO_ADDR
// sAI := false ;
59614: LD_ADDR_EXP 87
59618: PUSH
59619: LD_INT 0
59621: ST_TO_ADDR
// sCargo := false ;
59622: LD_ADDR_EXP 90
59626: PUSH
59627: LD_INT 0
59629: ST_TO_ADDR
// sDLaser := false ;
59630: LD_ADDR_EXP 91
59634: PUSH
59635: LD_INT 0
59637: ST_TO_ADDR
// sExchange := false ;
59638: LD_ADDR_EXP 92
59642: PUSH
59643: LD_INT 0
59645: ST_TO_ADDR
// sFac := false ;
59646: LD_ADDR_EXP 93
59650: PUSH
59651: LD_INT 0
59653: ST_TO_ADDR
// sPower := false ;
59654: LD_ADDR_EXP 94
59658: PUSH
59659: LD_INT 0
59661: ST_TO_ADDR
// sRandom := false ;
59662: LD_ADDR_EXP 95
59666: PUSH
59667: LD_INT 0
59669: ST_TO_ADDR
// sShield := false ;
59670: LD_ADDR_EXP 96
59674: PUSH
59675: LD_INT 0
59677: ST_TO_ADDR
// sTime := false ;
59678: LD_ADDR_EXP 97
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// sTools := false ;
59686: LD_ADDR_EXP 98
59690: PUSH
59691: LD_INT 0
59693: ST_TO_ADDR
// sSold := false ;
59694: LD_ADDR_EXP 63
59698: PUSH
59699: LD_INT 0
59701: ST_TO_ADDR
// sDiff := false ;
59702: LD_ADDR_EXP 64
59706: PUSH
59707: LD_INT 0
59709: ST_TO_ADDR
// sFog := false ;
59710: LD_ADDR_EXP 67
59714: PUSH
59715: LD_INT 0
59717: ST_TO_ADDR
// sReset := false ;
59718: LD_ADDR_EXP 68
59722: PUSH
59723: LD_INT 0
59725: ST_TO_ADDR
// sSun := false ;
59726: LD_ADDR_EXP 69
59730: PUSH
59731: LD_INT 0
59733: ST_TO_ADDR
// sTiger := false ;
59734: LD_ADDR_EXP 65
59738: PUSH
59739: LD_INT 0
59741: ST_TO_ADDR
// sBomb := false ;
59742: LD_ADDR_EXP 66
59746: PUSH
59747: LD_INT 0
59749: ST_TO_ADDR
// sWound := false ;
59750: LD_ADDR_EXP 74
59754: PUSH
59755: LD_INT 0
59757: ST_TO_ADDR
// sBetray := false ;
59758: LD_ADDR_EXP 78
59762: PUSH
59763: LD_INT 0
59765: ST_TO_ADDR
// sContamin := false ;
59766: LD_ADDR_EXP 79
59770: PUSH
59771: LD_INT 0
59773: ST_TO_ADDR
// sOil := false ;
59774: LD_ADDR_EXP 81
59778: PUSH
59779: LD_INT 0
59781: ST_TO_ADDR
// sStu := false ;
59782: LD_ADDR_EXP 85
59786: PUSH
59787: LD_INT 0
59789: ST_TO_ADDR
// sBazooka := false ;
59790: LD_ADDR_EXP 88
59794: PUSH
59795: LD_INT 0
59797: ST_TO_ADDR
// sMortar := false ;
59798: LD_ADDR_EXP 89
59802: PUSH
59803: LD_INT 0
59805: ST_TO_ADDR
// sRanger := false ;
59806: LD_ADDR_EXP 99
59810: PUSH
59811: LD_INT 0
59813: ST_TO_ADDR
// sComputer := false ;
59814: LD_ADDR_EXP 100
59818: PUSH
59819: LD_INT 0
59821: ST_TO_ADDR
// s30 := false ;
59822: LD_ADDR_EXP 101
59826: PUSH
59827: LD_INT 0
59829: ST_TO_ADDR
// s60 := false ;
59830: LD_ADDR_EXP 102
59834: PUSH
59835: LD_INT 0
59837: ST_TO_ADDR
// end ;
59838: LD_VAR 0 1
59842: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59843: LD_INT 0
59845: PPUSH
59846: PPUSH
59847: PPUSH
59848: PPUSH
59849: PPUSH
59850: PPUSH
59851: PPUSH
// result := [ ] ;
59852: LD_ADDR_VAR 0 2
59856: PUSH
59857: EMPTY
59858: ST_TO_ADDR
// if campaign_id = 1 then
59859: LD_OWVAR 69
59863: PUSH
59864: LD_INT 1
59866: EQUAL
59867: IFFALSE 63033
// begin case mission_number of 1 :
59869: LD_OWVAR 70
59873: PUSH
59874: LD_INT 1
59876: DOUBLE
59877: EQUAL
59878: IFTRUE 59882
59880: GO 59958
59882: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59883: LD_ADDR_VAR 0 2
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: LD_INT 4
59893: PUSH
59894: LD_INT 11
59896: PUSH
59897: LD_INT 12
59899: PUSH
59900: LD_INT 15
59902: PUSH
59903: LD_INT 16
59905: PUSH
59906: LD_INT 22
59908: PUSH
59909: LD_INT 23
59911: PUSH
59912: LD_INT 26
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 101
59928: PUSH
59929: LD_INT 102
59931: PUSH
59932: LD_INT 106
59934: PUSH
59935: LD_INT 116
59937: PUSH
59938: LD_INT 117
59940: PUSH
59941: LD_INT 118
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: ST_TO_ADDR
59956: GO 63031
59958: LD_INT 2
59960: DOUBLE
59961: EQUAL
59962: IFTRUE 59966
59964: GO 60050
59966: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59967: LD_ADDR_VAR 0 2
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 4
59977: PUSH
59978: LD_INT 11
59980: PUSH
59981: LD_INT 12
59983: PUSH
59984: LD_INT 15
59986: PUSH
59987: LD_INT 16
59989: PUSH
59990: LD_INT 22
59992: PUSH
59993: LD_INT 23
59995: PUSH
59996: LD_INT 26
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 101
60012: PUSH
60013: LD_INT 102
60015: PUSH
60016: LD_INT 105
60018: PUSH
60019: LD_INT 106
60021: PUSH
60022: LD_INT 108
60024: PUSH
60025: LD_INT 116
60027: PUSH
60028: LD_INT 117
60030: PUSH
60031: LD_INT 118
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: ST_TO_ADDR
60048: GO 63031
60050: LD_INT 3
60052: DOUBLE
60053: EQUAL
60054: IFTRUE 60058
60056: GO 60146
60058: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60059: LD_ADDR_VAR 0 2
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 4
60069: PUSH
60070: LD_INT 5
60072: PUSH
60073: LD_INT 11
60075: PUSH
60076: LD_INT 12
60078: PUSH
60079: LD_INT 15
60081: PUSH
60082: LD_INT 16
60084: PUSH
60085: LD_INT 22
60087: PUSH
60088: LD_INT 26
60090: PUSH
60091: LD_INT 36
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 101
60108: PUSH
60109: LD_INT 102
60111: PUSH
60112: LD_INT 105
60114: PUSH
60115: LD_INT 106
60117: PUSH
60118: LD_INT 108
60120: PUSH
60121: LD_INT 116
60123: PUSH
60124: LD_INT 117
60126: PUSH
60127: LD_INT 118
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: ST_TO_ADDR
60144: GO 63031
60146: LD_INT 4
60148: DOUBLE
60149: EQUAL
60150: IFTRUE 60154
60152: GO 60250
60154: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60155: LD_ADDR_VAR 0 2
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: LD_INT 4
60165: PUSH
60166: LD_INT 5
60168: PUSH
60169: LD_INT 8
60171: PUSH
60172: LD_INT 11
60174: PUSH
60175: LD_INT 12
60177: PUSH
60178: LD_INT 15
60180: PUSH
60181: LD_INT 16
60183: PUSH
60184: LD_INT 22
60186: PUSH
60187: LD_INT 23
60189: PUSH
60190: LD_INT 26
60192: PUSH
60193: LD_INT 36
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 101
60212: PUSH
60213: LD_INT 102
60215: PUSH
60216: LD_INT 105
60218: PUSH
60219: LD_INT 106
60221: PUSH
60222: LD_INT 108
60224: PUSH
60225: LD_INT 116
60227: PUSH
60228: LD_INT 117
60230: PUSH
60231: LD_INT 118
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: ST_TO_ADDR
60248: GO 63031
60250: LD_INT 5
60252: DOUBLE
60253: EQUAL
60254: IFTRUE 60258
60256: GO 60370
60258: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60259: LD_ADDR_VAR 0 2
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: LD_INT 4
60269: PUSH
60270: LD_INT 5
60272: PUSH
60273: LD_INT 6
60275: PUSH
60276: LD_INT 8
60278: PUSH
60279: LD_INT 11
60281: PUSH
60282: LD_INT 12
60284: PUSH
60285: LD_INT 15
60287: PUSH
60288: LD_INT 16
60290: PUSH
60291: LD_INT 22
60293: PUSH
60294: LD_INT 23
60296: PUSH
60297: LD_INT 25
60299: PUSH
60300: LD_INT 26
60302: PUSH
60303: LD_INT 36
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 101
60324: PUSH
60325: LD_INT 102
60327: PUSH
60328: LD_INT 105
60330: PUSH
60331: LD_INT 106
60333: PUSH
60334: LD_INT 108
60336: PUSH
60337: LD_INT 109
60339: PUSH
60340: LD_INT 112
60342: PUSH
60343: LD_INT 116
60345: PUSH
60346: LD_INT 117
60348: PUSH
60349: LD_INT 118
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: ST_TO_ADDR
60368: GO 63031
60370: LD_INT 6
60372: DOUBLE
60373: EQUAL
60374: IFTRUE 60378
60376: GO 60510
60378: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60379: LD_ADDR_VAR 0 2
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: LD_INT 5
60392: PUSH
60393: LD_INT 6
60395: PUSH
60396: LD_INT 8
60398: PUSH
60399: LD_INT 11
60401: PUSH
60402: LD_INT 12
60404: PUSH
60405: LD_INT 15
60407: PUSH
60408: LD_INT 16
60410: PUSH
60411: LD_INT 20
60413: PUSH
60414: LD_INT 21
60416: PUSH
60417: LD_INT 22
60419: PUSH
60420: LD_INT 23
60422: PUSH
60423: LD_INT 25
60425: PUSH
60426: LD_INT 26
60428: PUSH
60429: LD_INT 30
60431: PUSH
60432: LD_INT 31
60434: PUSH
60435: LD_INT 32
60437: PUSH
60438: LD_INT 36
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 101
60464: PUSH
60465: LD_INT 102
60467: PUSH
60468: LD_INT 105
60470: PUSH
60471: LD_INT 106
60473: PUSH
60474: LD_INT 108
60476: PUSH
60477: LD_INT 109
60479: PUSH
60480: LD_INT 112
60482: PUSH
60483: LD_INT 116
60485: PUSH
60486: LD_INT 117
60488: PUSH
60489: LD_INT 118
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: ST_TO_ADDR
60508: GO 63031
60510: LD_INT 7
60512: DOUBLE
60513: EQUAL
60514: IFTRUE 60518
60516: GO 60630
60518: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60519: LD_ADDR_VAR 0 2
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: LD_INT 4
60529: PUSH
60530: LD_INT 5
60532: PUSH
60533: LD_INT 7
60535: PUSH
60536: LD_INT 11
60538: PUSH
60539: LD_INT 12
60541: PUSH
60542: LD_INT 15
60544: PUSH
60545: LD_INT 16
60547: PUSH
60548: LD_INT 20
60550: PUSH
60551: LD_INT 21
60553: PUSH
60554: LD_INT 22
60556: PUSH
60557: LD_INT 23
60559: PUSH
60560: LD_INT 25
60562: PUSH
60563: LD_INT 26
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 101
60584: PUSH
60585: LD_INT 102
60587: PUSH
60588: LD_INT 103
60590: PUSH
60591: LD_INT 105
60593: PUSH
60594: LD_INT 106
60596: PUSH
60597: LD_INT 108
60599: PUSH
60600: LD_INT 112
60602: PUSH
60603: LD_INT 116
60605: PUSH
60606: LD_INT 117
60608: PUSH
60609: LD_INT 118
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: ST_TO_ADDR
60628: GO 63031
60630: LD_INT 8
60632: DOUBLE
60633: EQUAL
60634: IFTRUE 60638
60636: GO 60778
60638: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60639: LD_ADDR_VAR 0 2
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: LD_INT 4
60649: PUSH
60650: LD_INT 5
60652: PUSH
60653: LD_INT 6
60655: PUSH
60656: LD_INT 7
60658: PUSH
60659: LD_INT 8
60661: PUSH
60662: LD_INT 11
60664: PUSH
60665: LD_INT 12
60667: PUSH
60668: LD_INT 15
60670: PUSH
60671: LD_INT 16
60673: PUSH
60674: LD_INT 20
60676: PUSH
60677: LD_INT 21
60679: PUSH
60680: LD_INT 22
60682: PUSH
60683: LD_INT 23
60685: PUSH
60686: LD_INT 25
60688: PUSH
60689: LD_INT 26
60691: PUSH
60692: LD_INT 30
60694: PUSH
60695: LD_INT 31
60697: PUSH
60698: LD_INT 32
60700: PUSH
60701: LD_INT 36
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 101
60728: PUSH
60729: LD_INT 102
60731: PUSH
60732: LD_INT 103
60734: PUSH
60735: LD_INT 105
60737: PUSH
60738: LD_INT 106
60740: PUSH
60741: LD_INT 108
60743: PUSH
60744: LD_INT 109
60746: PUSH
60747: LD_INT 112
60749: PUSH
60750: LD_INT 116
60752: PUSH
60753: LD_INT 117
60755: PUSH
60756: LD_INT 118
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: ST_TO_ADDR
60776: GO 63031
60778: LD_INT 9
60780: DOUBLE
60781: EQUAL
60782: IFTRUE 60786
60784: GO 60934
60786: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60787: LD_ADDR_VAR 0 2
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 4
60797: PUSH
60798: LD_INT 5
60800: PUSH
60801: LD_INT 6
60803: PUSH
60804: LD_INT 7
60806: PUSH
60807: LD_INT 8
60809: PUSH
60810: LD_INT 11
60812: PUSH
60813: LD_INT 12
60815: PUSH
60816: LD_INT 15
60818: PUSH
60819: LD_INT 16
60821: PUSH
60822: LD_INT 20
60824: PUSH
60825: LD_INT 21
60827: PUSH
60828: LD_INT 22
60830: PUSH
60831: LD_INT 23
60833: PUSH
60834: LD_INT 25
60836: PUSH
60837: LD_INT 26
60839: PUSH
60840: LD_INT 28
60842: PUSH
60843: LD_INT 30
60845: PUSH
60846: LD_INT 31
60848: PUSH
60849: LD_INT 32
60851: PUSH
60852: LD_INT 36
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 101
60880: PUSH
60881: LD_INT 102
60883: PUSH
60884: LD_INT 103
60886: PUSH
60887: LD_INT 105
60889: PUSH
60890: LD_INT 106
60892: PUSH
60893: LD_INT 108
60895: PUSH
60896: LD_INT 109
60898: PUSH
60899: LD_INT 112
60901: PUSH
60902: LD_INT 114
60904: PUSH
60905: LD_INT 116
60907: PUSH
60908: LD_INT 117
60910: PUSH
60911: LD_INT 118
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: ST_TO_ADDR
60932: GO 63031
60934: LD_INT 10
60936: DOUBLE
60937: EQUAL
60938: IFTRUE 60942
60940: GO 61138
60942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60943: LD_ADDR_VAR 0 2
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 4
60953: PUSH
60954: LD_INT 5
60956: PUSH
60957: LD_INT 6
60959: PUSH
60960: LD_INT 7
60962: PUSH
60963: LD_INT 8
60965: PUSH
60966: LD_INT 9
60968: PUSH
60969: LD_INT 10
60971: PUSH
60972: LD_INT 11
60974: PUSH
60975: LD_INT 12
60977: PUSH
60978: LD_INT 13
60980: PUSH
60981: LD_INT 14
60983: PUSH
60984: LD_INT 15
60986: PUSH
60987: LD_INT 16
60989: PUSH
60990: LD_INT 17
60992: PUSH
60993: LD_INT 18
60995: PUSH
60996: LD_INT 19
60998: PUSH
60999: LD_INT 20
61001: PUSH
61002: LD_INT 21
61004: PUSH
61005: LD_INT 22
61007: PUSH
61008: LD_INT 23
61010: PUSH
61011: LD_INT 24
61013: PUSH
61014: LD_INT 25
61016: PUSH
61017: LD_INT 26
61019: PUSH
61020: LD_INT 28
61022: PUSH
61023: LD_INT 30
61025: PUSH
61026: LD_INT 31
61028: PUSH
61029: LD_INT 32
61031: PUSH
61032: LD_INT 36
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 101
61068: PUSH
61069: LD_INT 102
61071: PUSH
61072: LD_INT 103
61074: PUSH
61075: LD_INT 104
61077: PUSH
61078: LD_INT 105
61080: PUSH
61081: LD_INT 106
61083: PUSH
61084: LD_INT 107
61086: PUSH
61087: LD_INT 108
61089: PUSH
61090: LD_INT 109
61092: PUSH
61093: LD_INT 110
61095: PUSH
61096: LD_INT 111
61098: PUSH
61099: LD_INT 112
61101: PUSH
61102: LD_INT 114
61104: PUSH
61105: LD_INT 116
61107: PUSH
61108: LD_INT 117
61110: PUSH
61111: LD_INT 118
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: ST_TO_ADDR
61136: GO 63031
61138: LD_INT 11
61140: DOUBLE
61141: EQUAL
61142: IFTRUE 61146
61144: GO 61350
61146: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61147: LD_ADDR_VAR 0 2
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: LD_INT 5
61163: PUSH
61164: LD_INT 6
61166: PUSH
61167: LD_INT 7
61169: PUSH
61170: LD_INT 8
61172: PUSH
61173: LD_INT 9
61175: PUSH
61176: LD_INT 10
61178: PUSH
61179: LD_INT 11
61181: PUSH
61182: LD_INT 12
61184: PUSH
61185: LD_INT 13
61187: PUSH
61188: LD_INT 14
61190: PUSH
61191: LD_INT 15
61193: PUSH
61194: LD_INT 16
61196: PUSH
61197: LD_INT 17
61199: PUSH
61200: LD_INT 18
61202: PUSH
61203: LD_INT 19
61205: PUSH
61206: LD_INT 20
61208: PUSH
61209: LD_INT 21
61211: PUSH
61212: LD_INT 22
61214: PUSH
61215: LD_INT 23
61217: PUSH
61218: LD_INT 24
61220: PUSH
61221: LD_INT 25
61223: PUSH
61224: LD_INT 26
61226: PUSH
61227: LD_INT 28
61229: PUSH
61230: LD_INT 30
61232: PUSH
61233: LD_INT 31
61235: PUSH
61236: LD_INT 32
61238: PUSH
61239: LD_INT 34
61241: PUSH
61242: LD_INT 36
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 101
61280: PUSH
61281: LD_INT 102
61283: PUSH
61284: LD_INT 103
61286: PUSH
61287: LD_INT 104
61289: PUSH
61290: LD_INT 105
61292: PUSH
61293: LD_INT 106
61295: PUSH
61296: LD_INT 107
61298: PUSH
61299: LD_INT 108
61301: PUSH
61302: LD_INT 109
61304: PUSH
61305: LD_INT 110
61307: PUSH
61308: LD_INT 111
61310: PUSH
61311: LD_INT 112
61313: PUSH
61314: LD_INT 114
61316: PUSH
61317: LD_INT 116
61319: PUSH
61320: LD_INT 117
61322: PUSH
61323: LD_INT 118
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: ST_TO_ADDR
61348: GO 63031
61350: LD_INT 12
61352: DOUBLE
61353: EQUAL
61354: IFTRUE 61358
61356: GO 61578
61358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61359: LD_ADDR_VAR 0 2
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: LD_INT 4
61375: PUSH
61376: LD_INT 5
61378: PUSH
61379: LD_INT 6
61381: PUSH
61382: LD_INT 7
61384: PUSH
61385: LD_INT 8
61387: PUSH
61388: LD_INT 9
61390: PUSH
61391: LD_INT 10
61393: PUSH
61394: LD_INT 11
61396: PUSH
61397: LD_INT 12
61399: PUSH
61400: LD_INT 13
61402: PUSH
61403: LD_INT 14
61405: PUSH
61406: LD_INT 15
61408: PUSH
61409: LD_INT 16
61411: PUSH
61412: LD_INT 17
61414: PUSH
61415: LD_INT 18
61417: PUSH
61418: LD_INT 19
61420: PUSH
61421: LD_INT 20
61423: PUSH
61424: LD_INT 21
61426: PUSH
61427: LD_INT 22
61429: PUSH
61430: LD_INT 23
61432: PUSH
61433: LD_INT 24
61435: PUSH
61436: LD_INT 25
61438: PUSH
61439: LD_INT 26
61441: PUSH
61442: LD_INT 27
61444: PUSH
61445: LD_INT 28
61447: PUSH
61448: LD_INT 30
61450: PUSH
61451: LD_INT 31
61453: PUSH
61454: LD_INT 32
61456: PUSH
61457: LD_INT 33
61459: PUSH
61460: LD_INT 34
61462: PUSH
61463: LD_INT 36
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 101
61504: PUSH
61505: LD_INT 102
61507: PUSH
61508: LD_INT 103
61510: PUSH
61511: LD_INT 104
61513: PUSH
61514: LD_INT 105
61516: PUSH
61517: LD_INT 106
61519: PUSH
61520: LD_INT 107
61522: PUSH
61523: LD_INT 108
61525: PUSH
61526: LD_INT 109
61528: PUSH
61529: LD_INT 110
61531: PUSH
61532: LD_INT 111
61534: PUSH
61535: LD_INT 112
61537: PUSH
61538: LD_INT 113
61540: PUSH
61541: LD_INT 114
61543: PUSH
61544: LD_INT 116
61546: PUSH
61547: LD_INT 117
61549: PUSH
61550: LD_INT 118
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: ST_TO_ADDR
61576: GO 63031
61578: LD_INT 13
61580: DOUBLE
61581: EQUAL
61582: IFTRUE 61586
61584: GO 61794
61586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61587: LD_ADDR_VAR 0 2
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 4
61603: PUSH
61604: LD_INT 5
61606: PUSH
61607: LD_INT 8
61609: PUSH
61610: LD_INT 9
61612: PUSH
61613: LD_INT 10
61615: PUSH
61616: LD_INT 11
61618: PUSH
61619: LD_INT 12
61621: PUSH
61622: LD_INT 14
61624: PUSH
61625: LD_INT 15
61627: PUSH
61628: LD_INT 16
61630: PUSH
61631: LD_INT 17
61633: PUSH
61634: LD_INT 18
61636: PUSH
61637: LD_INT 19
61639: PUSH
61640: LD_INT 20
61642: PUSH
61643: LD_INT 21
61645: PUSH
61646: LD_INT 22
61648: PUSH
61649: LD_INT 23
61651: PUSH
61652: LD_INT 24
61654: PUSH
61655: LD_INT 25
61657: PUSH
61658: LD_INT 26
61660: PUSH
61661: LD_INT 27
61663: PUSH
61664: LD_INT 28
61666: PUSH
61667: LD_INT 30
61669: PUSH
61670: LD_INT 31
61672: PUSH
61673: LD_INT 32
61675: PUSH
61676: LD_INT 33
61678: PUSH
61679: LD_INT 34
61681: PUSH
61682: LD_INT 36
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 101
61720: PUSH
61721: LD_INT 102
61723: PUSH
61724: LD_INT 103
61726: PUSH
61727: LD_INT 104
61729: PUSH
61730: LD_INT 105
61732: PUSH
61733: LD_INT 106
61735: PUSH
61736: LD_INT 107
61738: PUSH
61739: LD_INT 108
61741: PUSH
61742: LD_INT 109
61744: PUSH
61745: LD_INT 110
61747: PUSH
61748: LD_INT 111
61750: PUSH
61751: LD_INT 112
61753: PUSH
61754: LD_INT 113
61756: PUSH
61757: LD_INT 114
61759: PUSH
61760: LD_INT 116
61762: PUSH
61763: LD_INT 117
61765: PUSH
61766: LD_INT 118
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: ST_TO_ADDR
61792: GO 63031
61794: LD_INT 14
61796: DOUBLE
61797: EQUAL
61798: IFTRUE 61802
61800: GO 62026
61802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61803: LD_ADDR_VAR 0 2
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: LD_INT 3
61816: PUSH
61817: LD_INT 4
61819: PUSH
61820: LD_INT 5
61822: PUSH
61823: LD_INT 6
61825: PUSH
61826: LD_INT 7
61828: PUSH
61829: LD_INT 8
61831: PUSH
61832: LD_INT 9
61834: PUSH
61835: LD_INT 10
61837: PUSH
61838: LD_INT 11
61840: PUSH
61841: LD_INT 12
61843: PUSH
61844: LD_INT 13
61846: PUSH
61847: LD_INT 14
61849: PUSH
61850: LD_INT 15
61852: PUSH
61853: LD_INT 16
61855: PUSH
61856: LD_INT 17
61858: PUSH
61859: LD_INT 18
61861: PUSH
61862: LD_INT 19
61864: PUSH
61865: LD_INT 20
61867: PUSH
61868: LD_INT 21
61870: PUSH
61871: LD_INT 22
61873: PUSH
61874: LD_INT 23
61876: PUSH
61877: LD_INT 24
61879: PUSH
61880: LD_INT 25
61882: PUSH
61883: LD_INT 26
61885: PUSH
61886: LD_INT 27
61888: PUSH
61889: LD_INT 28
61891: PUSH
61892: LD_INT 29
61894: PUSH
61895: LD_INT 30
61897: PUSH
61898: LD_INT 31
61900: PUSH
61901: LD_INT 32
61903: PUSH
61904: LD_INT 33
61906: PUSH
61907: LD_INT 34
61909: PUSH
61910: LD_INT 36
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 101
61952: PUSH
61953: LD_INT 102
61955: PUSH
61956: LD_INT 103
61958: PUSH
61959: LD_INT 104
61961: PUSH
61962: LD_INT 105
61964: PUSH
61965: LD_INT 106
61967: PUSH
61968: LD_INT 107
61970: PUSH
61971: LD_INT 108
61973: PUSH
61974: LD_INT 109
61976: PUSH
61977: LD_INT 110
61979: PUSH
61980: LD_INT 111
61982: PUSH
61983: LD_INT 112
61985: PUSH
61986: LD_INT 113
61988: PUSH
61989: LD_INT 114
61991: PUSH
61992: LD_INT 116
61994: PUSH
61995: LD_INT 117
61997: PUSH
61998: LD_INT 118
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: ST_TO_ADDR
62024: GO 63031
62026: LD_INT 15
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62034
62032: GO 62258
62034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62035: LD_ADDR_VAR 0 2
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 4
62051: PUSH
62052: LD_INT 5
62054: PUSH
62055: LD_INT 6
62057: PUSH
62058: LD_INT 7
62060: PUSH
62061: LD_INT 8
62063: PUSH
62064: LD_INT 9
62066: PUSH
62067: LD_INT 10
62069: PUSH
62070: LD_INT 11
62072: PUSH
62073: LD_INT 12
62075: PUSH
62076: LD_INT 13
62078: PUSH
62079: LD_INT 14
62081: PUSH
62082: LD_INT 15
62084: PUSH
62085: LD_INT 16
62087: PUSH
62088: LD_INT 17
62090: PUSH
62091: LD_INT 18
62093: PUSH
62094: LD_INT 19
62096: PUSH
62097: LD_INT 20
62099: PUSH
62100: LD_INT 21
62102: PUSH
62103: LD_INT 22
62105: PUSH
62106: LD_INT 23
62108: PUSH
62109: LD_INT 24
62111: PUSH
62112: LD_INT 25
62114: PUSH
62115: LD_INT 26
62117: PUSH
62118: LD_INT 27
62120: PUSH
62121: LD_INT 28
62123: PUSH
62124: LD_INT 29
62126: PUSH
62127: LD_INT 30
62129: PUSH
62130: LD_INT 31
62132: PUSH
62133: LD_INT 32
62135: PUSH
62136: LD_INT 33
62138: PUSH
62139: LD_INT 34
62141: PUSH
62142: LD_INT 36
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 101
62184: PUSH
62185: LD_INT 102
62187: PUSH
62188: LD_INT 103
62190: PUSH
62191: LD_INT 104
62193: PUSH
62194: LD_INT 105
62196: PUSH
62197: LD_INT 106
62199: PUSH
62200: LD_INT 107
62202: PUSH
62203: LD_INT 108
62205: PUSH
62206: LD_INT 109
62208: PUSH
62209: LD_INT 110
62211: PUSH
62212: LD_INT 111
62214: PUSH
62215: LD_INT 112
62217: PUSH
62218: LD_INT 113
62220: PUSH
62221: LD_INT 114
62223: PUSH
62224: LD_INT 116
62226: PUSH
62227: LD_INT 117
62229: PUSH
62230: LD_INT 118
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: ST_TO_ADDR
62256: GO 63031
62258: LD_INT 16
62260: DOUBLE
62261: EQUAL
62262: IFTRUE 62266
62264: GO 62402
62266: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62267: LD_ADDR_VAR 0 2
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 4
62277: PUSH
62278: LD_INT 5
62280: PUSH
62281: LD_INT 7
62283: PUSH
62284: LD_INT 11
62286: PUSH
62287: LD_INT 12
62289: PUSH
62290: LD_INT 15
62292: PUSH
62293: LD_INT 16
62295: PUSH
62296: LD_INT 20
62298: PUSH
62299: LD_INT 21
62301: PUSH
62302: LD_INT 22
62304: PUSH
62305: LD_INT 23
62307: PUSH
62308: LD_INT 25
62310: PUSH
62311: LD_INT 26
62313: PUSH
62314: LD_INT 30
62316: PUSH
62317: LD_INT 31
62319: PUSH
62320: LD_INT 32
62322: PUSH
62323: LD_INT 33
62325: PUSH
62326: LD_INT 34
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 101
62352: PUSH
62353: LD_INT 102
62355: PUSH
62356: LD_INT 103
62358: PUSH
62359: LD_INT 106
62361: PUSH
62362: LD_INT 108
62364: PUSH
62365: LD_INT 112
62367: PUSH
62368: LD_INT 113
62370: PUSH
62371: LD_INT 114
62373: PUSH
62374: LD_INT 116
62376: PUSH
62377: LD_INT 117
62379: PUSH
62380: LD_INT 118
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: ST_TO_ADDR
62400: GO 63031
62402: LD_INT 17
62404: DOUBLE
62405: EQUAL
62406: IFTRUE 62410
62408: GO 62634
62410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62411: LD_ADDR_VAR 0 2
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: LD_INT 4
62427: PUSH
62428: LD_INT 5
62430: PUSH
62431: LD_INT 6
62433: PUSH
62434: LD_INT 7
62436: PUSH
62437: LD_INT 8
62439: PUSH
62440: LD_INT 9
62442: PUSH
62443: LD_INT 10
62445: PUSH
62446: LD_INT 11
62448: PUSH
62449: LD_INT 12
62451: PUSH
62452: LD_INT 13
62454: PUSH
62455: LD_INT 14
62457: PUSH
62458: LD_INT 15
62460: PUSH
62461: LD_INT 16
62463: PUSH
62464: LD_INT 17
62466: PUSH
62467: LD_INT 18
62469: PUSH
62470: LD_INT 19
62472: PUSH
62473: LD_INT 20
62475: PUSH
62476: LD_INT 21
62478: PUSH
62479: LD_INT 22
62481: PUSH
62482: LD_INT 23
62484: PUSH
62485: LD_INT 24
62487: PUSH
62488: LD_INT 25
62490: PUSH
62491: LD_INT 26
62493: PUSH
62494: LD_INT 27
62496: PUSH
62497: LD_INT 28
62499: PUSH
62500: LD_INT 29
62502: PUSH
62503: LD_INT 30
62505: PUSH
62506: LD_INT 31
62508: PUSH
62509: LD_INT 32
62511: PUSH
62512: LD_INT 33
62514: PUSH
62515: LD_INT 34
62517: PUSH
62518: LD_INT 36
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 101
62560: PUSH
62561: LD_INT 102
62563: PUSH
62564: LD_INT 103
62566: PUSH
62567: LD_INT 104
62569: PUSH
62570: LD_INT 105
62572: PUSH
62573: LD_INT 106
62575: PUSH
62576: LD_INT 107
62578: PUSH
62579: LD_INT 108
62581: PUSH
62582: LD_INT 109
62584: PUSH
62585: LD_INT 110
62587: PUSH
62588: LD_INT 111
62590: PUSH
62591: LD_INT 112
62593: PUSH
62594: LD_INT 113
62596: PUSH
62597: LD_INT 114
62599: PUSH
62600: LD_INT 116
62602: PUSH
62603: LD_INT 117
62605: PUSH
62606: LD_INT 118
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: ST_TO_ADDR
62632: GO 63031
62634: LD_INT 18
62636: DOUBLE
62637: EQUAL
62638: IFTRUE 62642
62640: GO 62790
62642: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62643: LD_ADDR_VAR 0 2
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: LD_INT 4
62653: PUSH
62654: LD_INT 5
62656: PUSH
62657: LD_INT 7
62659: PUSH
62660: LD_INT 11
62662: PUSH
62663: LD_INT 12
62665: PUSH
62666: LD_INT 15
62668: PUSH
62669: LD_INT 16
62671: PUSH
62672: LD_INT 20
62674: PUSH
62675: LD_INT 21
62677: PUSH
62678: LD_INT 22
62680: PUSH
62681: LD_INT 23
62683: PUSH
62684: LD_INT 25
62686: PUSH
62687: LD_INT 26
62689: PUSH
62690: LD_INT 30
62692: PUSH
62693: LD_INT 31
62695: PUSH
62696: LD_INT 32
62698: PUSH
62699: LD_INT 33
62701: PUSH
62702: LD_INT 34
62704: PUSH
62705: LD_INT 35
62707: PUSH
62708: LD_INT 36
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 101
62736: PUSH
62737: LD_INT 102
62739: PUSH
62740: LD_INT 103
62742: PUSH
62743: LD_INT 106
62745: PUSH
62746: LD_INT 108
62748: PUSH
62749: LD_INT 112
62751: PUSH
62752: LD_INT 113
62754: PUSH
62755: LD_INT 114
62757: PUSH
62758: LD_INT 115
62760: PUSH
62761: LD_INT 116
62763: PUSH
62764: LD_INT 117
62766: PUSH
62767: LD_INT 118
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: ST_TO_ADDR
62788: GO 63031
62790: LD_INT 19
62792: DOUBLE
62793: EQUAL
62794: IFTRUE 62798
62796: GO 63030
62798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62799: LD_ADDR_VAR 0 2
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 4
62815: PUSH
62816: LD_INT 5
62818: PUSH
62819: LD_INT 6
62821: PUSH
62822: LD_INT 7
62824: PUSH
62825: LD_INT 8
62827: PUSH
62828: LD_INT 9
62830: PUSH
62831: LD_INT 10
62833: PUSH
62834: LD_INT 11
62836: PUSH
62837: LD_INT 12
62839: PUSH
62840: LD_INT 13
62842: PUSH
62843: LD_INT 14
62845: PUSH
62846: LD_INT 15
62848: PUSH
62849: LD_INT 16
62851: PUSH
62852: LD_INT 17
62854: PUSH
62855: LD_INT 18
62857: PUSH
62858: LD_INT 19
62860: PUSH
62861: LD_INT 20
62863: PUSH
62864: LD_INT 21
62866: PUSH
62867: LD_INT 22
62869: PUSH
62870: LD_INT 23
62872: PUSH
62873: LD_INT 24
62875: PUSH
62876: LD_INT 25
62878: PUSH
62879: LD_INT 26
62881: PUSH
62882: LD_INT 27
62884: PUSH
62885: LD_INT 28
62887: PUSH
62888: LD_INT 29
62890: PUSH
62891: LD_INT 30
62893: PUSH
62894: LD_INT 31
62896: PUSH
62897: LD_INT 32
62899: PUSH
62900: LD_INT 33
62902: PUSH
62903: LD_INT 34
62905: PUSH
62906: LD_INT 35
62908: PUSH
62909: LD_INT 36
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 101
62952: PUSH
62953: LD_INT 102
62955: PUSH
62956: LD_INT 103
62958: PUSH
62959: LD_INT 104
62961: PUSH
62962: LD_INT 105
62964: PUSH
62965: LD_INT 106
62967: PUSH
62968: LD_INT 107
62970: PUSH
62971: LD_INT 108
62973: PUSH
62974: LD_INT 109
62976: PUSH
62977: LD_INT 110
62979: PUSH
62980: LD_INT 111
62982: PUSH
62983: LD_INT 112
62985: PUSH
62986: LD_INT 113
62988: PUSH
62989: LD_INT 114
62991: PUSH
62992: LD_INT 115
62994: PUSH
62995: LD_INT 116
62997: PUSH
62998: LD_INT 117
63000: PUSH
63001: LD_INT 118
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: ST_TO_ADDR
63028: GO 63031
63030: POP
// end else
63031: GO 63262
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63033: LD_ADDR_VAR 0 2
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: LD_INT 4
63049: PUSH
63050: LD_INT 5
63052: PUSH
63053: LD_INT 6
63055: PUSH
63056: LD_INT 7
63058: PUSH
63059: LD_INT 8
63061: PUSH
63062: LD_INT 9
63064: PUSH
63065: LD_INT 10
63067: PUSH
63068: LD_INT 11
63070: PUSH
63071: LD_INT 12
63073: PUSH
63074: LD_INT 13
63076: PUSH
63077: LD_INT 14
63079: PUSH
63080: LD_INT 15
63082: PUSH
63083: LD_INT 16
63085: PUSH
63086: LD_INT 17
63088: PUSH
63089: LD_INT 18
63091: PUSH
63092: LD_INT 19
63094: PUSH
63095: LD_INT 20
63097: PUSH
63098: LD_INT 21
63100: PUSH
63101: LD_INT 22
63103: PUSH
63104: LD_INT 23
63106: PUSH
63107: LD_INT 24
63109: PUSH
63110: LD_INT 25
63112: PUSH
63113: LD_INT 26
63115: PUSH
63116: LD_INT 27
63118: PUSH
63119: LD_INT 28
63121: PUSH
63122: LD_INT 29
63124: PUSH
63125: LD_INT 30
63127: PUSH
63128: LD_INT 31
63130: PUSH
63131: LD_INT 32
63133: PUSH
63134: LD_INT 33
63136: PUSH
63137: LD_INT 34
63139: PUSH
63140: LD_INT 35
63142: PUSH
63143: LD_INT 36
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 101
63186: PUSH
63187: LD_INT 102
63189: PUSH
63190: LD_INT 103
63192: PUSH
63193: LD_INT 104
63195: PUSH
63196: LD_INT 105
63198: PUSH
63199: LD_INT 106
63201: PUSH
63202: LD_INT 107
63204: PUSH
63205: LD_INT 108
63207: PUSH
63208: LD_INT 109
63210: PUSH
63211: LD_INT 110
63213: PUSH
63214: LD_INT 111
63216: PUSH
63217: LD_INT 112
63219: PUSH
63220: LD_INT 113
63222: PUSH
63223: LD_INT 114
63225: PUSH
63226: LD_INT 115
63228: PUSH
63229: LD_INT 116
63231: PUSH
63232: LD_INT 117
63234: PUSH
63235: LD_INT 118
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// if result then
63262: LD_VAR 0 2
63266: IFFALSE 64052
// begin normal :=  ;
63268: LD_ADDR_VAR 0 5
63272: PUSH
63273: LD_STRING 
63275: ST_TO_ADDR
// hardcore :=  ;
63276: LD_ADDR_VAR 0 6
63280: PUSH
63281: LD_STRING 
63283: ST_TO_ADDR
// active :=  ;
63284: LD_ADDR_VAR 0 7
63288: PUSH
63289: LD_STRING 
63291: ST_TO_ADDR
// for i = 1 to normalCounter do
63292: LD_ADDR_VAR 0 8
63296: PUSH
63297: DOUBLE
63298: LD_INT 1
63300: DEC
63301: ST_TO_ADDR
63302: LD_EXP 47
63306: PUSH
63307: FOR_TO
63308: IFFALSE 63409
// begin tmp := 0 ;
63310: LD_ADDR_VAR 0 3
63314: PUSH
63315: LD_STRING 0
63317: ST_TO_ADDR
// if result [ 1 ] then
63318: LD_VAR 0 2
63322: PUSH
63323: LD_INT 1
63325: ARRAY
63326: IFFALSE 63391
// if result [ 1 ] [ 1 ] = i then
63328: LD_VAR 0 2
63332: PUSH
63333: LD_INT 1
63335: ARRAY
63336: PUSH
63337: LD_INT 1
63339: ARRAY
63340: PUSH
63341: LD_VAR 0 8
63345: EQUAL
63346: IFFALSE 63391
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63348: LD_ADDR_VAR 0 2
63352: PUSH
63353: LD_VAR 0 2
63357: PPUSH
63358: LD_INT 1
63360: PPUSH
63361: LD_VAR 0 2
63365: PUSH
63366: LD_INT 1
63368: ARRAY
63369: PPUSH
63370: LD_INT 1
63372: PPUSH
63373: CALL_OW 3
63377: PPUSH
63378: CALL_OW 1
63382: ST_TO_ADDR
// tmp := 1 ;
63383: LD_ADDR_VAR 0 3
63387: PUSH
63388: LD_STRING 1
63390: ST_TO_ADDR
// end ; normal := normal & tmp ;
63391: LD_ADDR_VAR 0 5
63395: PUSH
63396: LD_VAR 0 5
63400: PUSH
63401: LD_VAR 0 3
63405: STR
63406: ST_TO_ADDR
// end ;
63407: GO 63307
63409: POP
63410: POP
// for i = 1 to hardcoreCounter do
63411: LD_ADDR_VAR 0 8
63415: PUSH
63416: DOUBLE
63417: LD_INT 1
63419: DEC
63420: ST_TO_ADDR
63421: LD_EXP 48
63425: PUSH
63426: FOR_TO
63427: IFFALSE 63532
// begin tmp := 0 ;
63429: LD_ADDR_VAR 0 3
63433: PUSH
63434: LD_STRING 0
63436: ST_TO_ADDR
// if result [ 2 ] then
63437: LD_VAR 0 2
63441: PUSH
63442: LD_INT 2
63444: ARRAY
63445: IFFALSE 63514
// if result [ 2 ] [ 1 ] = 100 + i then
63447: LD_VAR 0 2
63451: PUSH
63452: LD_INT 2
63454: ARRAY
63455: PUSH
63456: LD_INT 1
63458: ARRAY
63459: PUSH
63460: LD_INT 100
63462: PUSH
63463: LD_VAR 0 8
63467: PLUS
63468: EQUAL
63469: IFFALSE 63514
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63471: LD_ADDR_VAR 0 2
63475: PUSH
63476: LD_VAR 0 2
63480: PPUSH
63481: LD_INT 2
63483: PPUSH
63484: LD_VAR 0 2
63488: PUSH
63489: LD_INT 2
63491: ARRAY
63492: PPUSH
63493: LD_INT 1
63495: PPUSH
63496: CALL_OW 3
63500: PPUSH
63501: CALL_OW 1
63505: ST_TO_ADDR
// tmp := 1 ;
63506: LD_ADDR_VAR 0 3
63510: PUSH
63511: LD_STRING 1
63513: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63514: LD_ADDR_VAR 0 6
63518: PUSH
63519: LD_VAR 0 6
63523: PUSH
63524: LD_VAR 0 3
63528: STR
63529: ST_TO_ADDR
// end ;
63530: GO 63426
63532: POP
63533: POP
// if isGameLoad then
63534: LD_VAR 0 1
63538: IFFALSE 64013
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63540: LD_ADDR_VAR 0 4
63544: PUSH
63545: LD_EXP 51
63549: PUSH
63550: LD_EXP 50
63554: PUSH
63555: LD_EXP 52
63559: PUSH
63560: LD_EXP 49
63564: PUSH
63565: LD_EXP 53
63569: PUSH
63570: LD_EXP 54
63574: PUSH
63575: LD_EXP 55
63579: PUSH
63580: LD_EXP 56
63584: PUSH
63585: LD_EXP 57
63589: PUSH
63590: LD_EXP 58
63594: PUSH
63595: LD_EXP 59
63599: PUSH
63600: LD_EXP 60
63604: PUSH
63605: LD_EXP 61
63609: PUSH
63610: LD_EXP 62
63614: PUSH
63615: LD_EXP 70
63619: PUSH
63620: LD_EXP 71
63624: PUSH
63625: LD_EXP 72
63629: PUSH
63630: LD_EXP 73
63634: PUSH
63635: LD_EXP 75
63639: PUSH
63640: LD_EXP 76
63644: PUSH
63645: LD_EXP 77
63649: PUSH
63650: LD_EXP 80
63654: PUSH
63655: LD_EXP 82
63659: PUSH
63660: LD_EXP 83
63664: PUSH
63665: LD_EXP 84
63669: PUSH
63670: LD_EXP 86
63674: PUSH
63675: LD_EXP 87
63679: PUSH
63680: LD_EXP 90
63684: PUSH
63685: LD_EXP 91
63689: PUSH
63690: LD_EXP 92
63694: PUSH
63695: LD_EXP 93
63699: PUSH
63700: LD_EXP 94
63704: PUSH
63705: LD_EXP 95
63709: PUSH
63710: LD_EXP 96
63714: PUSH
63715: LD_EXP 97
63719: PUSH
63720: LD_EXP 98
63724: PUSH
63725: LD_EXP 63
63729: PUSH
63730: LD_EXP 64
63734: PUSH
63735: LD_EXP 67
63739: PUSH
63740: LD_EXP 68
63744: PUSH
63745: LD_EXP 69
63749: PUSH
63750: LD_EXP 65
63754: PUSH
63755: LD_EXP 66
63759: PUSH
63760: LD_EXP 74
63764: PUSH
63765: LD_EXP 78
63769: PUSH
63770: LD_EXP 79
63774: PUSH
63775: LD_EXP 81
63779: PUSH
63780: LD_EXP 85
63784: PUSH
63785: LD_EXP 88
63789: PUSH
63790: LD_EXP 89
63794: PUSH
63795: LD_EXP 99
63799: PUSH
63800: LD_EXP 100
63804: PUSH
63805: LD_EXP 101
63809: PUSH
63810: LD_EXP 102
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// tmp :=  ;
63871: LD_ADDR_VAR 0 3
63875: PUSH
63876: LD_STRING 
63878: ST_TO_ADDR
// for i = 1 to normalCounter do
63879: LD_ADDR_VAR 0 8
63883: PUSH
63884: DOUBLE
63885: LD_INT 1
63887: DEC
63888: ST_TO_ADDR
63889: LD_EXP 47
63893: PUSH
63894: FOR_TO
63895: IFFALSE 63931
// begin if flags [ i ] then
63897: LD_VAR 0 4
63901: PUSH
63902: LD_VAR 0 8
63906: ARRAY
63907: IFFALSE 63929
// tmp := tmp & i & ; ;
63909: LD_ADDR_VAR 0 3
63913: PUSH
63914: LD_VAR 0 3
63918: PUSH
63919: LD_VAR 0 8
63923: STR
63924: PUSH
63925: LD_STRING ;
63927: STR
63928: ST_TO_ADDR
// end ;
63929: GO 63894
63931: POP
63932: POP
// for i = 1 to hardcoreCounter do
63933: LD_ADDR_VAR 0 8
63937: PUSH
63938: DOUBLE
63939: LD_INT 1
63941: DEC
63942: ST_TO_ADDR
63943: LD_EXP 48
63947: PUSH
63948: FOR_TO
63949: IFFALSE 63995
// begin if flags [ normalCounter + i ] then
63951: LD_VAR 0 4
63955: PUSH
63956: LD_EXP 47
63960: PUSH
63961: LD_VAR 0 8
63965: PLUS
63966: ARRAY
63967: IFFALSE 63993
// tmp := tmp & ( 100 + i ) & ; ;
63969: LD_ADDR_VAR 0 3
63973: PUSH
63974: LD_VAR 0 3
63978: PUSH
63979: LD_INT 100
63981: PUSH
63982: LD_VAR 0 8
63986: PLUS
63987: STR
63988: PUSH
63989: LD_STRING ;
63991: STR
63992: ST_TO_ADDR
// end ;
63993: GO 63948
63995: POP
63996: POP
// if tmp then
63997: LD_VAR 0 3
64001: IFFALSE 64013
// active := tmp ;
64003: LD_ADDR_VAR 0 7
64007: PUSH
64008: LD_VAR 0 3
64012: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64013: LD_STRING getStreamItemsFromMission("
64015: PUSH
64016: LD_VAR 0 5
64020: STR
64021: PUSH
64022: LD_STRING ","
64024: STR
64025: PUSH
64026: LD_VAR 0 6
64030: STR
64031: PUSH
64032: LD_STRING ","
64034: STR
64035: PUSH
64036: LD_VAR 0 7
64040: STR
64041: PUSH
64042: LD_STRING ")
64044: STR
64045: PPUSH
64046: CALL_OW 559
// end else
64050: GO 64059
// ToLua ( getStreamItemsFromMission("","","") ) ;
64052: LD_STRING getStreamItemsFromMission("","","")
64054: PPUSH
64055: CALL_OW 559
// end ;
64059: LD_VAR 0 2
64063: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64064: LD_EXP 46
64068: PUSH
64069: LD_EXP 51
64073: AND
64074: IFFALSE 64198
64076: GO 64078
64078: DISABLE
64079: LD_INT 0
64081: PPUSH
64082: PPUSH
// begin enable ;
64083: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64084: LD_ADDR_VAR 0 2
64088: PUSH
64089: LD_INT 22
64091: PUSH
64092: LD_OWVAR 2
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: LD_INT 34
64106: PUSH
64107: LD_INT 7
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 34
64116: PUSH
64117: LD_INT 45
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 34
64126: PUSH
64127: LD_INT 28
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 34
64136: PUSH
64137: LD_INT 47
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PPUSH
64155: CALL_OW 69
64159: ST_TO_ADDR
// if not tmp then
64160: LD_VAR 0 2
64164: NOT
64165: IFFALSE 64169
// exit ;
64167: GO 64198
// for i in tmp do
64169: LD_ADDR_VAR 0 1
64173: PUSH
64174: LD_VAR 0 2
64178: PUSH
64179: FOR_IN
64180: IFFALSE 64196
// begin SetLives ( i , 0 ) ;
64182: LD_VAR 0 1
64186: PPUSH
64187: LD_INT 0
64189: PPUSH
64190: CALL_OW 234
// end ;
64194: GO 64179
64196: POP
64197: POP
// end ;
64198: PPOPN 2
64200: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64201: LD_EXP 46
64205: PUSH
64206: LD_EXP 52
64210: AND
64211: IFFALSE 64295
64213: GO 64215
64215: DISABLE
64216: LD_INT 0
64218: PPUSH
64219: PPUSH
// begin enable ;
64220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64221: LD_ADDR_VAR 0 2
64225: PUSH
64226: LD_INT 22
64228: PUSH
64229: LD_OWVAR 2
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 32
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PPUSH
64252: CALL_OW 69
64256: ST_TO_ADDR
// if not tmp then
64257: LD_VAR 0 2
64261: NOT
64262: IFFALSE 64266
// exit ;
64264: GO 64295
// for i in tmp do
64266: LD_ADDR_VAR 0 1
64270: PUSH
64271: LD_VAR 0 2
64275: PUSH
64276: FOR_IN
64277: IFFALSE 64293
// begin SetLives ( i , 0 ) ;
64279: LD_VAR 0 1
64283: PPUSH
64284: LD_INT 0
64286: PPUSH
64287: CALL_OW 234
// end ;
64291: GO 64276
64293: POP
64294: POP
// end ;
64295: PPOPN 2
64297: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64298: LD_EXP 46
64302: PUSH
64303: LD_EXP 49
64307: AND
64308: IFFALSE 64401
64310: GO 64312
64312: DISABLE
64313: LD_INT 0
64315: PPUSH
// begin enable ;
64316: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64317: LD_ADDR_VAR 0 1
64321: PUSH
64322: LD_INT 22
64324: PUSH
64325: LD_OWVAR 2
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 25
64339: PUSH
64340: LD_INT 5
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 25
64349: PUSH
64350: LD_INT 9
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 25
64359: PUSH
64360: LD_INT 8
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PPUSH
64377: CALL_OW 69
64381: PUSH
64382: FOR_IN
64383: IFFALSE 64399
// begin SetClass ( i , 1 ) ;
64385: LD_VAR 0 1
64389: PPUSH
64390: LD_INT 1
64392: PPUSH
64393: CALL_OW 336
// end ;
64397: GO 64382
64399: POP
64400: POP
// end ;
64401: PPOPN 1
64403: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64404: LD_EXP 46
64408: PUSH
64409: LD_EXP 50
64413: AND
64414: PUSH
64415: LD_OWVAR 65
64419: PUSH
64420: LD_INT 7
64422: LESS
64423: AND
64424: IFFALSE 64438
64426: GO 64428
64428: DISABLE
// begin enable ;
64429: ENABLE
// game_speed := 7 ;
64430: LD_ADDR_OWVAR 65
64434: PUSH
64435: LD_INT 7
64437: ST_TO_ADDR
// end ;
64438: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64439: LD_EXP 46
64443: PUSH
64444: LD_EXP 53
64448: AND
64449: IFFALSE 64651
64451: GO 64453
64453: DISABLE
64454: LD_INT 0
64456: PPUSH
64457: PPUSH
64458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64459: LD_ADDR_VAR 0 3
64463: PUSH
64464: LD_INT 81
64466: PUSH
64467: LD_OWVAR 2
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 21
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PPUSH
64490: CALL_OW 69
64494: ST_TO_ADDR
// if not tmp then
64495: LD_VAR 0 3
64499: NOT
64500: IFFALSE 64504
// exit ;
64502: GO 64651
// if tmp > 5 then
64504: LD_VAR 0 3
64508: PUSH
64509: LD_INT 5
64511: GREATER
64512: IFFALSE 64524
// k := 5 else
64514: LD_ADDR_VAR 0 2
64518: PUSH
64519: LD_INT 5
64521: ST_TO_ADDR
64522: GO 64534
// k := tmp ;
64524: LD_ADDR_VAR 0 2
64528: PUSH
64529: LD_VAR 0 3
64533: ST_TO_ADDR
// for i := 1 to k do
64534: LD_ADDR_VAR 0 1
64538: PUSH
64539: DOUBLE
64540: LD_INT 1
64542: DEC
64543: ST_TO_ADDR
64544: LD_VAR 0 2
64548: PUSH
64549: FOR_TO
64550: IFFALSE 64649
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64552: LD_VAR 0 3
64556: PUSH
64557: LD_VAR 0 1
64561: ARRAY
64562: PPUSH
64563: LD_VAR 0 1
64567: PUSH
64568: LD_INT 4
64570: MOD
64571: PUSH
64572: LD_INT 1
64574: PLUS
64575: PPUSH
64576: CALL_OW 259
64580: PUSH
64581: LD_INT 10
64583: LESS
64584: IFFALSE 64647
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64586: LD_VAR 0 3
64590: PUSH
64591: LD_VAR 0 1
64595: ARRAY
64596: PPUSH
64597: LD_VAR 0 1
64601: PUSH
64602: LD_INT 4
64604: MOD
64605: PUSH
64606: LD_INT 1
64608: PLUS
64609: PPUSH
64610: LD_VAR 0 3
64614: PUSH
64615: LD_VAR 0 1
64619: ARRAY
64620: PPUSH
64621: LD_VAR 0 1
64625: PUSH
64626: LD_INT 4
64628: MOD
64629: PUSH
64630: LD_INT 1
64632: PLUS
64633: PPUSH
64634: CALL_OW 259
64638: PUSH
64639: LD_INT 1
64641: PLUS
64642: PPUSH
64643: CALL_OW 237
64647: GO 64549
64649: POP
64650: POP
// end ;
64651: PPOPN 3
64653: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64654: LD_EXP 46
64658: PUSH
64659: LD_EXP 54
64663: AND
64664: IFFALSE 64684
64666: GO 64668
64668: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64669: LD_INT 4
64671: PPUSH
64672: LD_OWVAR 2
64676: PPUSH
64677: LD_INT 0
64679: PPUSH
64680: CALL_OW 324
64684: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64685: LD_EXP 46
64689: PUSH
64690: LD_EXP 83
64694: AND
64695: IFFALSE 64715
64697: GO 64699
64699: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64700: LD_INT 19
64702: PPUSH
64703: LD_OWVAR 2
64707: PPUSH
64708: LD_INT 0
64710: PPUSH
64711: CALL_OW 324
64715: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64716: LD_EXP 46
64720: PUSH
64721: LD_EXP 55
64725: AND
64726: IFFALSE 64828
64728: GO 64730
64730: DISABLE
64731: LD_INT 0
64733: PPUSH
64734: PPUSH
// begin enable ;
64735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64736: LD_ADDR_VAR 0 2
64740: PUSH
64741: LD_INT 22
64743: PUSH
64744: LD_OWVAR 2
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 2
64755: PUSH
64756: LD_INT 34
64758: PUSH
64759: LD_INT 11
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 34
64768: PUSH
64769: LD_INT 30
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PPUSH
64785: CALL_OW 69
64789: ST_TO_ADDR
// if not tmp then
64790: LD_VAR 0 2
64794: NOT
64795: IFFALSE 64799
// exit ;
64797: GO 64828
// for i in tmp do
64799: LD_ADDR_VAR 0 1
64803: PUSH
64804: LD_VAR 0 2
64808: PUSH
64809: FOR_IN
64810: IFFALSE 64826
// begin SetLives ( i , 0 ) ;
64812: LD_VAR 0 1
64816: PPUSH
64817: LD_INT 0
64819: PPUSH
64820: CALL_OW 234
// end ;
64824: GO 64809
64826: POP
64827: POP
// end ;
64828: PPOPN 2
64830: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64831: LD_EXP 46
64835: PUSH
64836: LD_EXP 56
64840: AND
64841: IFFALSE 64861
64843: GO 64845
64845: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64846: LD_INT 32
64848: PPUSH
64849: LD_OWVAR 2
64853: PPUSH
64854: LD_INT 0
64856: PPUSH
64857: CALL_OW 324
64861: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64862: LD_EXP 46
64866: PUSH
64867: LD_EXP 57
64871: AND
64872: IFFALSE 65053
64874: GO 64876
64876: DISABLE
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
64881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64882: LD_ADDR_VAR 0 2
64886: PUSH
64887: LD_INT 22
64889: PUSH
64890: LD_OWVAR 2
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 33
64901: PUSH
64902: LD_INT 3
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PPUSH
64913: CALL_OW 69
64917: ST_TO_ADDR
// if not tmp then
64918: LD_VAR 0 2
64922: NOT
64923: IFFALSE 64927
// exit ;
64925: GO 65053
// side := 0 ;
64927: LD_ADDR_VAR 0 3
64931: PUSH
64932: LD_INT 0
64934: ST_TO_ADDR
// for i := 1 to 8 do
64935: LD_ADDR_VAR 0 1
64939: PUSH
64940: DOUBLE
64941: LD_INT 1
64943: DEC
64944: ST_TO_ADDR
64945: LD_INT 8
64947: PUSH
64948: FOR_TO
64949: IFFALSE 64997
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64951: LD_OWVAR 2
64955: PUSH
64956: LD_VAR 0 1
64960: NONEQUAL
64961: PUSH
64962: LD_OWVAR 2
64966: PPUSH
64967: LD_VAR 0 1
64971: PPUSH
64972: CALL_OW 81
64976: PUSH
64977: LD_INT 2
64979: EQUAL
64980: AND
64981: IFFALSE 64995
// begin side := i ;
64983: LD_ADDR_VAR 0 3
64987: PUSH
64988: LD_VAR 0 1
64992: ST_TO_ADDR
// break ;
64993: GO 64997
// end ;
64995: GO 64948
64997: POP
64998: POP
// if not side then
64999: LD_VAR 0 3
65003: NOT
65004: IFFALSE 65008
// exit ;
65006: GO 65053
// for i := 1 to tmp do
65008: LD_ADDR_VAR 0 1
65012: PUSH
65013: DOUBLE
65014: LD_INT 1
65016: DEC
65017: ST_TO_ADDR
65018: LD_VAR 0 2
65022: PUSH
65023: FOR_TO
65024: IFFALSE 65051
// if Prob ( 60 ) then
65026: LD_INT 60
65028: PPUSH
65029: CALL_OW 13
65033: IFFALSE 65049
// SetSide ( i , side ) ;
65035: LD_VAR 0 1
65039: PPUSH
65040: LD_VAR 0 3
65044: PPUSH
65045: CALL_OW 235
65049: GO 65023
65051: POP
65052: POP
// end ;
65053: PPOPN 3
65055: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65056: LD_EXP 46
65060: PUSH
65061: LD_EXP 59
65065: AND
65066: IFFALSE 65185
65068: GO 65070
65070: DISABLE
65071: LD_INT 0
65073: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65074: LD_ADDR_VAR 0 1
65078: PUSH
65079: LD_INT 22
65081: PUSH
65082: LD_OWVAR 2
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 21
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: LD_INT 23
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: PPUSH
65123: CALL_OW 69
65127: PUSH
65128: FOR_IN
65129: IFFALSE 65183
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65131: LD_VAR 0 1
65135: PPUSH
65136: CALL_OW 257
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: LD_INT 3
65149: PUSH
65150: LD_INT 4
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: IN
65159: IFFALSE 65181
// SetClass ( un , rand ( 1 , 4 ) ) ;
65161: LD_VAR 0 1
65165: PPUSH
65166: LD_INT 1
65168: PPUSH
65169: LD_INT 4
65171: PPUSH
65172: CALL_OW 12
65176: PPUSH
65177: CALL_OW 336
65181: GO 65128
65183: POP
65184: POP
// end ;
65185: PPOPN 1
65187: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65188: LD_EXP 46
65192: PUSH
65193: LD_EXP 58
65197: AND
65198: IFFALSE 65277
65200: GO 65202
65202: DISABLE
65203: LD_INT 0
65205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65206: LD_ADDR_VAR 0 1
65210: PUSH
65211: LD_INT 22
65213: PUSH
65214: LD_OWVAR 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 21
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PPUSH
65237: CALL_OW 69
65241: ST_TO_ADDR
// if not tmp then
65242: LD_VAR 0 1
65246: NOT
65247: IFFALSE 65251
// exit ;
65249: GO 65277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65251: LD_VAR 0 1
65255: PUSH
65256: LD_INT 1
65258: PPUSH
65259: LD_VAR 0 1
65263: PPUSH
65264: CALL_OW 12
65268: ARRAY
65269: PPUSH
65270: LD_INT 100
65272: PPUSH
65273: CALL_OW 234
// end ;
65277: PPOPN 1
65279: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65280: LD_EXP 46
65284: PUSH
65285: LD_EXP 60
65289: AND
65290: IFFALSE 65388
65292: GO 65294
65294: DISABLE
65295: LD_INT 0
65297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65298: LD_ADDR_VAR 0 1
65302: PUSH
65303: LD_INT 22
65305: PUSH
65306: LD_OWVAR 2
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 21
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PPUSH
65329: CALL_OW 69
65333: ST_TO_ADDR
// if not tmp then
65334: LD_VAR 0 1
65338: NOT
65339: IFFALSE 65343
// exit ;
65341: GO 65388
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65343: LD_VAR 0 1
65347: PUSH
65348: LD_INT 1
65350: PPUSH
65351: LD_VAR 0 1
65355: PPUSH
65356: CALL_OW 12
65360: ARRAY
65361: PPUSH
65362: LD_INT 1
65364: PPUSH
65365: LD_INT 4
65367: PPUSH
65368: CALL_OW 12
65372: PPUSH
65373: LD_INT 3000
65375: PPUSH
65376: LD_INT 9000
65378: PPUSH
65379: CALL_OW 12
65383: PPUSH
65384: CALL_OW 492
// end ;
65388: PPOPN 1
65390: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65391: LD_EXP 46
65395: PUSH
65396: LD_EXP 61
65400: AND
65401: IFFALSE 65421
65403: GO 65405
65405: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65406: LD_INT 1
65408: PPUSH
65409: LD_OWVAR 2
65413: PPUSH
65414: LD_INT 0
65416: PPUSH
65417: CALL_OW 324
65421: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65422: LD_EXP 46
65426: PUSH
65427: LD_EXP 62
65431: AND
65432: IFFALSE 65515
65434: GO 65436
65436: DISABLE
65437: LD_INT 0
65439: PPUSH
65440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65441: LD_ADDR_VAR 0 2
65445: PUSH
65446: LD_INT 22
65448: PUSH
65449: LD_OWVAR 2
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 21
65460: PUSH
65461: LD_INT 3
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PPUSH
65472: CALL_OW 69
65476: ST_TO_ADDR
// if not tmp then
65477: LD_VAR 0 2
65481: NOT
65482: IFFALSE 65486
// exit ;
65484: GO 65515
// for i in tmp do
65486: LD_ADDR_VAR 0 1
65490: PUSH
65491: LD_VAR 0 2
65495: PUSH
65496: FOR_IN
65497: IFFALSE 65513
// SetBLevel ( i , 10 ) ;
65499: LD_VAR 0 1
65503: PPUSH
65504: LD_INT 10
65506: PPUSH
65507: CALL_OW 241
65511: GO 65496
65513: POP
65514: POP
// end ;
65515: PPOPN 2
65517: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65518: LD_EXP 46
65522: PUSH
65523: LD_EXP 63
65527: AND
65528: IFFALSE 65639
65530: GO 65532
65532: DISABLE
65533: LD_INT 0
65535: PPUSH
65536: PPUSH
65537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: LD_INT 22
65545: PUSH
65546: LD_OWVAR 2
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 25
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PPUSH
65569: CALL_OW 69
65573: ST_TO_ADDR
// if not tmp then
65574: LD_VAR 0 3
65578: NOT
65579: IFFALSE 65583
// exit ;
65581: GO 65639
// un := tmp [ rand ( 1 , tmp ) ] ;
65583: LD_ADDR_VAR 0 2
65587: PUSH
65588: LD_VAR 0 3
65592: PUSH
65593: LD_INT 1
65595: PPUSH
65596: LD_VAR 0 3
65600: PPUSH
65601: CALL_OW 12
65605: ARRAY
65606: ST_TO_ADDR
// if Crawls ( un ) then
65607: LD_VAR 0 2
65611: PPUSH
65612: CALL_OW 318
65616: IFFALSE 65627
// ComWalk ( un ) ;
65618: LD_VAR 0 2
65622: PPUSH
65623: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65627: LD_VAR 0 2
65631: PPUSH
65632: LD_INT 5
65634: PPUSH
65635: CALL_OW 336
// end ;
65639: PPOPN 3
65641: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65642: LD_EXP 46
65646: PUSH
65647: LD_EXP 64
65651: AND
65652: PUSH
65653: LD_OWVAR 67
65657: PUSH
65658: LD_INT 4
65660: LESS
65661: AND
65662: IFFALSE 65681
65664: GO 65666
65666: DISABLE
// begin Difficulty := Difficulty + 1 ;
65667: LD_ADDR_OWVAR 67
65671: PUSH
65672: LD_OWVAR 67
65676: PUSH
65677: LD_INT 1
65679: PLUS
65680: ST_TO_ADDR
// end ;
65681: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65682: LD_EXP 46
65686: PUSH
65687: LD_EXP 65
65691: AND
65692: IFFALSE 65795
65694: GO 65696
65696: DISABLE
65697: LD_INT 0
65699: PPUSH
// begin for i := 1 to 5 do
65700: LD_ADDR_VAR 0 1
65704: PUSH
65705: DOUBLE
65706: LD_INT 1
65708: DEC
65709: ST_TO_ADDR
65710: LD_INT 5
65712: PUSH
65713: FOR_TO
65714: IFFALSE 65793
// begin uc_nation := nation_nature ;
65716: LD_ADDR_OWVAR 21
65720: PUSH
65721: LD_INT 0
65723: ST_TO_ADDR
// uc_side := 0 ;
65724: LD_ADDR_OWVAR 20
65728: PUSH
65729: LD_INT 0
65731: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65732: LD_ADDR_OWVAR 29
65736: PUSH
65737: LD_INT 12
65739: PUSH
65740: LD_INT 12
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: ST_TO_ADDR
// hc_agressivity := 20 ;
65747: LD_ADDR_OWVAR 35
65751: PUSH
65752: LD_INT 20
65754: ST_TO_ADDR
// hc_class := class_tiger ;
65755: LD_ADDR_OWVAR 28
65759: PUSH
65760: LD_INT 14
65762: ST_TO_ADDR
// hc_gallery :=  ;
65763: LD_ADDR_OWVAR 33
65767: PUSH
65768: LD_STRING 
65770: ST_TO_ADDR
// hc_name :=  ;
65771: LD_ADDR_OWVAR 26
65775: PUSH
65776: LD_STRING 
65778: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65779: CALL_OW 44
65783: PPUSH
65784: LD_INT 0
65786: PPUSH
65787: CALL_OW 51
// end ;
65791: GO 65713
65793: POP
65794: POP
// end ;
65795: PPOPN 1
65797: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65798: LD_EXP 46
65802: PUSH
65803: LD_EXP 66
65807: AND
65808: IFFALSE 65817
65810: GO 65812
65812: DISABLE
// StreamSibBomb ;
65813: CALL 65818 0 0
65817: END
// export function StreamSibBomb ; var i , x , y ; begin
65818: LD_INT 0
65820: PPUSH
65821: PPUSH
65822: PPUSH
65823: PPUSH
// result := false ;
65824: LD_ADDR_VAR 0 1
65828: PUSH
65829: LD_INT 0
65831: ST_TO_ADDR
// for i := 1 to 16 do
65832: LD_ADDR_VAR 0 2
65836: PUSH
65837: DOUBLE
65838: LD_INT 1
65840: DEC
65841: ST_TO_ADDR
65842: LD_INT 16
65844: PUSH
65845: FOR_TO
65846: IFFALSE 66045
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65848: LD_ADDR_VAR 0 3
65852: PUSH
65853: LD_INT 10
65855: PUSH
65856: LD_INT 20
65858: PUSH
65859: LD_INT 30
65861: PUSH
65862: LD_INT 40
65864: PUSH
65865: LD_INT 50
65867: PUSH
65868: LD_INT 60
65870: PUSH
65871: LD_INT 70
65873: PUSH
65874: LD_INT 80
65876: PUSH
65877: LD_INT 90
65879: PUSH
65880: LD_INT 100
65882: PUSH
65883: LD_INT 110
65885: PUSH
65886: LD_INT 120
65888: PUSH
65889: LD_INT 130
65891: PUSH
65892: LD_INT 140
65894: PUSH
65895: LD_INT 150
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 1
65917: PPUSH
65918: LD_INT 15
65920: PPUSH
65921: CALL_OW 12
65925: ARRAY
65926: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65927: LD_ADDR_VAR 0 4
65931: PUSH
65932: LD_INT 10
65934: PUSH
65935: LD_INT 20
65937: PUSH
65938: LD_INT 30
65940: PUSH
65941: LD_INT 40
65943: PUSH
65944: LD_INT 50
65946: PUSH
65947: LD_INT 60
65949: PUSH
65950: LD_INT 70
65952: PUSH
65953: LD_INT 80
65955: PUSH
65956: LD_INT 90
65958: PUSH
65959: LD_INT 100
65961: PUSH
65962: LD_INT 110
65964: PUSH
65965: LD_INT 120
65967: PUSH
65968: LD_INT 130
65970: PUSH
65971: LD_INT 140
65973: PUSH
65974: LD_INT 150
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: PPUSH
65997: LD_INT 15
65999: PPUSH
66000: CALL_OW 12
66004: ARRAY
66005: ST_TO_ADDR
// if ValidHex ( x , y ) then
66006: LD_VAR 0 3
66010: PPUSH
66011: LD_VAR 0 4
66015: PPUSH
66016: CALL_OW 488
66020: IFFALSE 66043
// begin result := [ x , y ] ;
66022: LD_ADDR_VAR 0 1
66026: PUSH
66027: LD_VAR 0 3
66031: PUSH
66032: LD_VAR 0 4
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: ST_TO_ADDR
// break ;
66041: GO 66045
// end ; end ;
66043: GO 65845
66045: POP
66046: POP
// if result then
66047: LD_VAR 0 1
66051: IFFALSE 66111
// begin ToLua ( playSibBomb() ) ;
66053: LD_STRING playSibBomb()
66055: PPUSH
66056: CALL_OW 559
// wait ( 0 0$14 ) ;
66060: LD_INT 490
66062: PPUSH
66063: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66067: LD_VAR 0 1
66071: PUSH
66072: LD_INT 1
66074: ARRAY
66075: PPUSH
66076: LD_VAR 0 1
66080: PUSH
66081: LD_INT 2
66083: ARRAY
66084: PPUSH
66085: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66089: LD_VAR 0 1
66093: PUSH
66094: LD_INT 1
66096: ARRAY
66097: PPUSH
66098: LD_VAR 0 1
66102: PUSH
66103: LD_INT 2
66105: ARRAY
66106: PPUSH
66107: CALL_OW 429
// end ; end ;
66111: LD_VAR 0 1
66115: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66116: LD_EXP 46
66120: PUSH
66121: LD_EXP 68
66125: AND
66126: IFFALSE 66138
66128: GO 66130
66130: DISABLE
// YouLost (  ) ;
66131: LD_STRING 
66133: PPUSH
66134: CALL_OW 104
66138: END
// every 0 0$1 trigger StreamModeActive and sFog do
66139: LD_EXP 46
66143: PUSH
66144: LD_EXP 67
66148: AND
66149: IFFALSE 66163
66151: GO 66153
66153: DISABLE
// FogOff ( your_side ) ;
66154: LD_OWVAR 2
66158: PPUSH
66159: CALL_OW 344
66163: END
// every 0 0$1 trigger StreamModeActive and sSun do
66164: LD_EXP 46
66168: PUSH
66169: LD_EXP 69
66173: AND
66174: IFFALSE 66202
66176: GO 66178
66178: DISABLE
// begin solar_recharge_percent := 0 ;
66179: LD_ADDR_OWVAR 79
66183: PUSH
66184: LD_INT 0
66186: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66187: LD_INT 10500
66189: PPUSH
66190: CALL_OW 67
// solar_recharge_percent := 100 ;
66194: LD_ADDR_OWVAR 79
66198: PUSH
66199: LD_INT 100
66201: ST_TO_ADDR
// end ;
66202: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66203: LD_EXP 46
66207: PUSH
66208: LD_EXP 70
66212: AND
66213: IFFALSE 66452
66215: GO 66217
66217: DISABLE
66218: LD_INT 0
66220: PPUSH
66221: PPUSH
66222: PPUSH
// begin tmp := [ ] ;
66223: LD_ADDR_VAR 0 3
66227: PUSH
66228: EMPTY
66229: ST_TO_ADDR
// for i := 1 to 6 do
66230: LD_ADDR_VAR 0 1
66234: PUSH
66235: DOUBLE
66236: LD_INT 1
66238: DEC
66239: ST_TO_ADDR
66240: LD_INT 6
66242: PUSH
66243: FOR_TO
66244: IFFALSE 66349
// begin uc_nation := nation_nature ;
66246: LD_ADDR_OWVAR 21
66250: PUSH
66251: LD_INT 0
66253: ST_TO_ADDR
// uc_side := 0 ;
66254: LD_ADDR_OWVAR 20
66258: PUSH
66259: LD_INT 0
66261: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66262: LD_ADDR_OWVAR 29
66266: PUSH
66267: LD_INT 12
66269: PUSH
66270: LD_INT 12
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: ST_TO_ADDR
// hc_agressivity := 20 ;
66277: LD_ADDR_OWVAR 35
66281: PUSH
66282: LD_INT 20
66284: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66285: LD_ADDR_OWVAR 28
66289: PUSH
66290: LD_INT 17
66292: ST_TO_ADDR
// hc_gallery :=  ;
66293: LD_ADDR_OWVAR 33
66297: PUSH
66298: LD_STRING 
66300: ST_TO_ADDR
// hc_name :=  ;
66301: LD_ADDR_OWVAR 26
66305: PUSH
66306: LD_STRING 
66308: ST_TO_ADDR
// un := CreateHuman ;
66309: LD_ADDR_VAR 0 2
66313: PUSH
66314: CALL_OW 44
66318: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66319: LD_VAR 0 2
66323: PPUSH
66324: LD_INT 1
66326: PPUSH
66327: CALL_OW 51
// tmp := tmp ^ un ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_VAR 0 3
66340: PUSH
66341: LD_VAR 0 2
66345: ADD
66346: ST_TO_ADDR
// end ;
66347: GO 66243
66349: POP
66350: POP
// repeat wait ( 0 0$1 ) ;
66351: LD_INT 35
66353: PPUSH
66354: CALL_OW 67
// for un in tmp do
66358: LD_ADDR_VAR 0 2
66362: PUSH
66363: LD_VAR 0 3
66367: PUSH
66368: FOR_IN
66369: IFFALSE 66443
// begin if IsDead ( un ) then
66371: LD_VAR 0 2
66375: PPUSH
66376: CALL_OW 301
66380: IFFALSE 66400
// begin tmp := tmp diff un ;
66382: LD_ADDR_VAR 0 3
66386: PUSH
66387: LD_VAR 0 3
66391: PUSH
66392: LD_VAR 0 2
66396: DIFF
66397: ST_TO_ADDR
// continue ;
66398: GO 66368
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66400: LD_VAR 0 2
66404: PPUSH
66405: LD_INT 3
66407: PUSH
66408: LD_INT 22
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PPUSH
66422: CALL_OW 69
66426: PPUSH
66427: LD_VAR 0 2
66431: PPUSH
66432: CALL_OW 74
66436: PPUSH
66437: CALL_OW 115
// end ;
66441: GO 66368
66443: POP
66444: POP
// until not tmp ;
66445: LD_VAR 0 3
66449: NOT
66450: IFFALSE 66351
// end ;
66452: PPOPN 3
66454: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66455: LD_EXP 46
66459: PUSH
66460: LD_EXP 71
66464: AND
66465: IFFALSE 66519
66467: GO 66469
66469: DISABLE
// begin ToLua ( displayTroll(); ) ;
66470: LD_STRING displayTroll();
66472: PPUSH
66473: CALL_OW 559
// wait ( 3 3$00 ) ;
66477: LD_INT 6300
66479: PPUSH
66480: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66484: LD_STRING hideTroll();
66486: PPUSH
66487: CALL_OW 559
// wait ( 1 1$00 ) ;
66491: LD_INT 2100
66493: PPUSH
66494: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66498: LD_STRING displayTroll();
66500: PPUSH
66501: CALL_OW 559
// wait ( 1 1$00 ) ;
66505: LD_INT 2100
66507: PPUSH
66508: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66512: LD_STRING hideTroll();
66514: PPUSH
66515: CALL_OW 559
// end ;
66519: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66520: LD_EXP 46
66524: PUSH
66525: LD_EXP 72
66529: AND
66530: IFFALSE 66593
66532: GO 66534
66534: DISABLE
66535: LD_INT 0
66537: PPUSH
// begin p := 0 ;
66538: LD_ADDR_VAR 0 1
66542: PUSH
66543: LD_INT 0
66545: ST_TO_ADDR
// repeat game_speed := 1 ;
66546: LD_ADDR_OWVAR 65
66550: PUSH
66551: LD_INT 1
66553: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66554: LD_INT 35
66556: PPUSH
66557: CALL_OW 67
// p := p + 1 ;
66561: LD_ADDR_VAR 0 1
66565: PUSH
66566: LD_VAR 0 1
66570: PUSH
66571: LD_INT 1
66573: PLUS
66574: ST_TO_ADDR
// until p >= 60 ;
66575: LD_VAR 0 1
66579: PUSH
66580: LD_INT 60
66582: GREATEREQUAL
66583: IFFALSE 66546
// game_speed := 4 ;
66585: LD_ADDR_OWVAR 65
66589: PUSH
66590: LD_INT 4
66592: ST_TO_ADDR
// end ;
66593: PPOPN 1
66595: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66596: LD_EXP 46
66600: PUSH
66601: LD_EXP 73
66605: AND
66606: IFFALSE 66752
66608: GO 66610
66610: DISABLE
66611: LD_INT 0
66613: PPUSH
66614: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66615: LD_ADDR_VAR 0 1
66619: PUSH
66620: LD_INT 22
66622: PUSH
66623: LD_OWVAR 2
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: PUSH
66635: LD_INT 30
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 30
66647: PUSH
66648: LD_INT 1
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PPUSH
66664: CALL_OW 69
66668: ST_TO_ADDR
// if not depot then
66669: LD_VAR 0 1
66673: NOT
66674: IFFALSE 66678
// exit ;
66676: GO 66752
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66678: LD_ADDR_VAR 0 2
66682: PUSH
66683: LD_VAR 0 1
66687: PUSH
66688: LD_INT 1
66690: PPUSH
66691: LD_VAR 0 1
66695: PPUSH
66696: CALL_OW 12
66700: ARRAY
66701: PPUSH
66702: CALL_OW 274
66706: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66707: LD_VAR 0 2
66711: PPUSH
66712: LD_INT 1
66714: PPUSH
66715: LD_INT 0
66717: PPUSH
66718: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66722: LD_VAR 0 2
66726: PPUSH
66727: LD_INT 2
66729: PPUSH
66730: LD_INT 0
66732: PPUSH
66733: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66737: LD_VAR 0 2
66741: PPUSH
66742: LD_INT 3
66744: PPUSH
66745: LD_INT 0
66747: PPUSH
66748: CALL_OW 277
// end ;
66752: PPOPN 2
66754: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66755: LD_EXP 46
66759: PUSH
66760: LD_EXP 74
66764: AND
66765: IFFALSE 66862
66767: GO 66769
66769: DISABLE
66770: LD_INT 0
66772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66773: LD_ADDR_VAR 0 1
66777: PUSH
66778: LD_INT 22
66780: PUSH
66781: LD_OWVAR 2
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 21
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 3
66802: PUSH
66803: LD_INT 23
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: PPUSH
66822: CALL_OW 69
66826: ST_TO_ADDR
// if not tmp then
66827: LD_VAR 0 1
66831: NOT
66832: IFFALSE 66836
// exit ;
66834: GO 66862
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66836: LD_VAR 0 1
66840: PUSH
66841: LD_INT 1
66843: PPUSH
66844: LD_VAR 0 1
66848: PPUSH
66849: CALL_OW 12
66853: ARRAY
66854: PPUSH
66855: LD_INT 200
66857: PPUSH
66858: CALL_OW 234
// end ;
66862: PPOPN 1
66864: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66865: LD_EXP 46
66869: PUSH
66870: LD_EXP 75
66874: AND
66875: IFFALSE 66954
66877: GO 66879
66879: DISABLE
66880: LD_INT 0
66882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66883: LD_ADDR_VAR 0 1
66887: PUSH
66888: LD_INT 22
66890: PUSH
66891: LD_OWVAR 2
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 21
66902: PUSH
66903: LD_INT 2
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PPUSH
66914: CALL_OW 69
66918: ST_TO_ADDR
// if not tmp then
66919: LD_VAR 0 1
66923: NOT
66924: IFFALSE 66928
// exit ;
66926: GO 66954
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66928: LD_VAR 0 1
66932: PUSH
66933: LD_INT 1
66935: PPUSH
66936: LD_VAR 0 1
66940: PPUSH
66941: CALL_OW 12
66945: ARRAY
66946: PPUSH
66947: LD_INT 60
66949: PPUSH
66950: CALL_OW 234
// end ;
66954: PPOPN 1
66956: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66957: LD_EXP 46
66961: PUSH
66962: LD_EXP 76
66966: AND
66967: IFFALSE 67066
66969: GO 66971
66971: DISABLE
66972: LD_INT 0
66974: PPUSH
66975: PPUSH
// begin enable ;
66976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66977: LD_ADDR_VAR 0 1
66981: PUSH
66982: LD_INT 22
66984: PUSH
66985: LD_OWVAR 2
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 61
66996: PUSH
66997: EMPTY
66998: LIST
66999: PUSH
67000: LD_INT 33
67002: PUSH
67003: LD_INT 2
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: PPUSH
67015: CALL_OW 69
67019: ST_TO_ADDR
// if not tmp then
67020: LD_VAR 0 1
67024: NOT
67025: IFFALSE 67029
// exit ;
67027: GO 67066
// for i in tmp do
67029: LD_ADDR_VAR 0 2
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: FOR_IN
67040: IFFALSE 67064
// if IsControledBy ( i ) then
67042: LD_VAR 0 2
67046: PPUSH
67047: CALL_OW 312
67051: IFFALSE 67062
// ComUnlink ( i ) ;
67053: LD_VAR 0 2
67057: PPUSH
67058: CALL_OW 136
67062: GO 67039
67064: POP
67065: POP
// end ;
67066: PPOPN 2
67068: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67069: LD_EXP 46
67073: PUSH
67074: LD_EXP 77
67078: AND
67079: IFFALSE 67219
67081: GO 67083
67083: DISABLE
67084: LD_INT 0
67086: PPUSH
67087: PPUSH
// begin ToLua ( displayPowell(); ) ;
67088: LD_STRING displayPowell();
67090: PPUSH
67091: CALL_OW 559
// uc_side := 0 ;
67095: LD_ADDR_OWVAR 20
67099: PUSH
67100: LD_INT 0
67102: ST_TO_ADDR
// uc_nation := 2 ;
67103: LD_ADDR_OWVAR 21
67107: PUSH
67108: LD_INT 2
67110: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67111: LD_ADDR_OWVAR 37
67115: PUSH
67116: LD_INT 14
67118: ST_TO_ADDR
// vc_engine := engine_siberite ;
67119: LD_ADDR_OWVAR 39
67123: PUSH
67124: LD_INT 3
67126: ST_TO_ADDR
// vc_control := control_apeman ;
67127: LD_ADDR_OWVAR 38
67131: PUSH
67132: LD_INT 5
67134: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67135: LD_ADDR_OWVAR 40
67139: PUSH
67140: LD_INT 29
67142: ST_TO_ADDR
// un := CreateVehicle ;
67143: LD_ADDR_VAR 0 2
67147: PUSH
67148: CALL_OW 45
67152: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67153: LD_VAR 0 2
67157: PPUSH
67158: LD_INT 1
67160: PPUSH
67161: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67165: LD_INT 35
67167: PPUSH
67168: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67172: LD_VAR 0 2
67176: PPUSH
67177: LD_INT 22
67179: PUSH
67180: LD_OWVAR 2
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PPUSH
67189: CALL_OW 69
67193: PPUSH
67194: LD_VAR 0 2
67198: PPUSH
67199: CALL_OW 74
67203: PPUSH
67204: CALL_OW 115
// until IsDead ( un ) ;
67208: LD_VAR 0 2
67212: PPUSH
67213: CALL_OW 301
67217: IFFALSE 67165
// end ;
67219: PPOPN 2
67221: END
// every 0 0$1 trigger StreamModeActive and sStu do
67222: LD_EXP 46
67226: PUSH
67227: LD_EXP 85
67231: AND
67232: IFFALSE 67248
67234: GO 67236
67236: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67237: LD_STRING displayStucuk();
67239: PPUSH
67240: CALL_OW 559
// ResetFog ;
67244: CALL_OW 335
// end ;
67248: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67249: LD_EXP 46
67253: PUSH
67254: LD_EXP 78
67258: AND
67259: IFFALSE 67400
67261: GO 67263
67263: DISABLE
67264: LD_INT 0
67266: PPUSH
67267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67268: LD_ADDR_VAR 0 2
67272: PUSH
67273: LD_INT 22
67275: PUSH
67276: LD_OWVAR 2
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 21
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PPUSH
67299: CALL_OW 69
67303: ST_TO_ADDR
// if not tmp then
67304: LD_VAR 0 2
67308: NOT
67309: IFFALSE 67313
// exit ;
67311: GO 67400
// un := tmp [ rand ( 1 , tmp ) ] ;
67313: LD_ADDR_VAR 0 1
67317: PUSH
67318: LD_VAR 0 2
67322: PUSH
67323: LD_INT 1
67325: PPUSH
67326: LD_VAR 0 2
67330: PPUSH
67331: CALL_OW 12
67335: ARRAY
67336: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67337: LD_VAR 0 1
67341: PPUSH
67342: LD_INT 0
67344: PPUSH
67345: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67349: LD_VAR 0 1
67353: PPUSH
67354: LD_OWVAR 3
67358: PUSH
67359: LD_VAR 0 1
67363: DIFF
67364: PPUSH
67365: LD_VAR 0 1
67369: PPUSH
67370: CALL_OW 74
67374: PPUSH
67375: CALL_OW 115
// wait ( 0 0$20 ) ;
67379: LD_INT 700
67381: PPUSH
67382: CALL_OW 67
// SetSide ( un , your_side ) ;
67386: LD_VAR 0 1
67390: PPUSH
67391: LD_OWVAR 2
67395: PPUSH
67396: CALL_OW 235
// end ;
67400: PPOPN 2
67402: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67403: LD_EXP 46
67407: PUSH
67408: LD_EXP 79
67412: AND
67413: IFFALSE 67519
67415: GO 67417
67417: DISABLE
67418: LD_INT 0
67420: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67421: LD_ADDR_VAR 0 1
67425: PUSH
67426: LD_INT 22
67428: PUSH
67429: LD_OWVAR 2
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 2
67440: PUSH
67441: LD_INT 30
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 30
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PPUSH
67470: CALL_OW 69
67474: ST_TO_ADDR
// if not depot then
67475: LD_VAR 0 1
67479: NOT
67480: IFFALSE 67484
// exit ;
67482: GO 67519
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67484: LD_VAR 0 1
67488: PUSH
67489: LD_INT 1
67491: ARRAY
67492: PPUSH
67493: CALL_OW 250
67497: PPUSH
67498: LD_VAR 0 1
67502: PUSH
67503: LD_INT 1
67505: ARRAY
67506: PPUSH
67507: CALL_OW 251
67511: PPUSH
67512: LD_INT 70
67514: PPUSH
67515: CALL_OW 495
// end ;
67519: PPOPN 1
67521: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67522: LD_EXP 46
67526: PUSH
67527: LD_EXP 80
67531: AND
67532: IFFALSE 67743
67534: GO 67536
67536: DISABLE
67537: LD_INT 0
67539: PPUSH
67540: PPUSH
67541: PPUSH
67542: PPUSH
67543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67544: LD_ADDR_VAR 0 5
67548: PUSH
67549: LD_INT 22
67551: PUSH
67552: LD_OWVAR 2
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 21
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PPUSH
67575: CALL_OW 69
67579: ST_TO_ADDR
// if not tmp then
67580: LD_VAR 0 5
67584: NOT
67585: IFFALSE 67589
// exit ;
67587: GO 67743
// for i in tmp do
67589: LD_ADDR_VAR 0 1
67593: PUSH
67594: LD_VAR 0 5
67598: PUSH
67599: FOR_IN
67600: IFFALSE 67741
// begin d := rand ( 0 , 5 ) ;
67602: LD_ADDR_VAR 0 4
67606: PUSH
67607: LD_INT 0
67609: PPUSH
67610: LD_INT 5
67612: PPUSH
67613: CALL_OW 12
67617: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67618: LD_ADDR_VAR 0 2
67622: PUSH
67623: LD_VAR 0 1
67627: PPUSH
67628: CALL_OW 250
67632: PPUSH
67633: LD_VAR 0 4
67637: PPUSH
67638: LD_INT 3
67640: PPUSH
67641: LD_INT 12
67643: PPUSH
67644: CALL_OW 12
67648: PPUSH
67649: CALL_OW 272
67653: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67654: LD_ADDR_VAR 0 3
67658: PUSH
67659: LD_VAR 0 1
67663: PPUSH
67664: CALL_OW 251
67668: PPUSH
67669: LD_VAR 0 4
67673: PPUSH
67674: LD_INT 3
67676: PPUSH
67677: LD_INT 12
67679: PPUSH
67680: CALL_OW 12
67684: PPUSH
67685: CALL_OW 273
67689: ST_TO_ADDR
// if ValidHex ( x , y ) then
67690: LD_VAR 0 2
67694: PPUSH
67695: LD_VAR 0 3
67699: PPUSH
67700: CALL_OW 488
67704: IFFALSE 67739
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67706: LD_VAR 0 1
67710: PPUSH
67711: LD_VAR 0 2
67715: PPUSH
67716: LD_VAR 0 3
67720: PPUSH
67721: LD_INT 3
67723: PPUSH
67724: LD_INT 6
67726: PPUSH
67727: CALL_OW 12
67731: PPUSH
67732: LD_INT 1
67734: PPUSH
67735: CALL_OW 483
// end ;
67739: GO 67599
67741: POP
67742: POP
// end ;
67743: PPOPN 5
67745: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67746: LD_EXP 46
67750: PUSH
67751: LD_EXP 81
67755: AND
67756: IFFALSE 67850
67758: GO 67760
67760: DISABLE
67761: LD_INT 0
67763: PPUSH
67764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67765: LD_ADDR_VAR 0 2
67769: PUSH
67770: LD_INT 22
67772: PUSH
67773: LD_OWVAR 2
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 32
67784: PUSH
67785: LD_INT 1
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 21
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: PPUSH
67807: CALL_OW 69
67811: ST_TO_ADDR
// if not tmp then
67812: LD_VAR 0 2
67816: NOT
67817: IFFALSE 67821
// exit ;
67819: GO 67850
// for i in tmp do
67821: LD_ADDR_VAR 0 1
67825: PUSH
67826: LD_VAR 0 2
67830: PUSH
67831: FOR_IN
67832: IFFALSE 67848
// SetFuel ( i , 0 ) ;
67834: LD_VAR 0 1
67838: PPUSH
67839: LD_INT 0
67841: PPUSH
67842: CALL_OW 240
67846: GO 67831
67848: POP
67849: POP
// end ;
67850: PPOPN 2
67852: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67853: LD_EXP 46
67857: PUSH
67858: LD_EXP 82
67862: AND
67863: IFFALSE 67929
67865: GO 67867
67867: DISABLE
67868: LD_INT 0
67870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67871: LD_ADDR_VAR 0 1
67875: PUSH
67876: LD_INT 22
67878: PUSH
67879: LD_OWVAR 2
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 30
67890: PUSH
67891: LD_INT 29
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PPUSH
67902: CALL_OW 69
67906: ST_TO_ADDR
// if not tmp then
67907: LD_VAR 0 1
67911: NOT
67912: IFFALSE 67916
// exit ;
67914: GO 67929
// DestroyUnit ( tmp [ 1 ] ) ;
67916: LD_VAR 0 1
67920: PUSH
67921: LD_INT 1
67923: ARRAY
67924: PPUSH
67925: CALL_OW 65
// end ;
67929: PPOPN 1
67931: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67932: LD_EXP 46
67936: PUSH
67937: LD_EXP 84
67941: AND
67942: IFFALSE 68071
67944: GO 67946
67946: DISABLE
67947: LD_INT 0
67949: PPUSH
// begin uc_side := 0 ;
67950: LD_ADDR_OWVAR 20
67954: PUSH
67955: LD_INT 0
67957: ST_TO_ADDR
// uc_nation := nation_arabian ;
67958: LD_ADDR_OWVAR 21
67962: PUSH
67963: LD_INT 2
67965: ST_TO_ADDR
// hc_gallery :=  ;
67966: LD_ADDR_OWVAR 33
67970: PUSH
67971: LD_STRING 
67973: ST_TO_ADDR
// hc_name :=  ;
67974: LD_ADDR_OWVAR 26
67978: PUSH
67979: LD_STRING 
67981: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67982: LD_INT 1
67984: PPUSH
67985: LD_INT 11
67987: PPUSH
67988: LD_INT 10
67990: PPUSH
67991: CALL_OW 380
// un := CreateHuman ;
67995: LD_ADDR_VAR 0 1
67999: PUSH
68000: CALL_OW 44
68004: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68005: LD_VAR 0 1
68009: PPUSH
68010: LD_INT 1
68012: PPUSH
68013: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68017: LD_INT 35
68019: PPUSH
68020: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68024: LD_VAR 0 1
68028: PPUSH
68029: LD_INT 22
68031: PUSH
68032: LD_OWVAR 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PPUSH
68041: CALL_OW 69
68045: PPUSH
68046: LD_VAR 0 1
68050: PPUSH
68051: CALL_OW 74
68055: PPUSH
68056: CALL_OW 115
// until IsDead ( un ) ;
68060: LD_VAR 0 1
68064: PPUSH
68065: CALL_OW 301
68069: IFFALSE 68017
// end ;
68071: PPOPN 1
68073: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68074: LD_EXP 46
68078: PUSH
68079: LD_EXP 86
68083: AND
68084: IFFALSE 68096
68086: GO 68088
68088: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68089: LD_STRING earthquake(getX(game), 0, 32)
68091: PPUSH
68092: CALL_OW 559
68096: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68097: LD_EXP 46
68101: PUSH
68102: LD_EXP 87
68106: AND
68107: IFFALSE 68198
68109: GO 68111
68111: DISABLE
68112: LD_INT 0
68114: PPUSH
// begin enable ;
68115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68116: LD_ADDR_VAR 0 1
68120: PUSH
68121: LD_INT 22
68123: PUSH
68124: LD_OWVAR 2
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 21
68135: PUSH
68136: LD_INT 2
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 33
68145: PUSH
68146: LD_INT 3
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: PPUSH
68158: CALL_OW 69
68162: ST_TO_ADDR
// if not tmp then
68163: LD_VAR 0 1
68167: NOT
68168: IFFALSE 68172
// exit ;
68170: GO 68198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68172: LD_VAR 0 1
68176: PUSH
68177: LD_INT 1
68179: PPUSH
68180: LD_VAR 0 1
68184: PPUSH
68185: CALL_OW 12
68189: ARRAY
68190: PPUSH
68191: LD_INT 1
68193: PPUSH
68194: CALL_OW 234
// end ;
68198: PPOPN 1
68200: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68201: LD_EXP 46
68205: PUSH
68206: LD_EXP 88
68210: AND
68211: IFFALSE 68352
68213: GO 68215
68215: DISABLE
68216: LD_INT 0
68218: PPUSH
68219: PPUSH
68220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68221: LD_ADDR_VAR 0 3
68225: PUSH
68226: LD_INT 22
68228: PUSH
68229: LD_OWVAR 2
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 25
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PPUSH
68252: CALL_OW 69
68256: ST_TO_ADDR
// if not tmp then
68257: LD_VAR 0 3
68261: NOT
68262: IFFALSE 68266
// exit ;
68264: GO 68352
// un := tmp [ rand ( 1 , tmp ) ] ;
68266: LD_ADDR_VAR 0 2
68270: PUSH
68271: LD_VAR 0 3
68275: PUSH
68276: LD_INT 1
68278: PPUSH
68279: LD_VAR 0 3
68283: PPUSH
68284: CALL_OW 12
68288: ARRAY
68289: ST_TO_ADDR
// if Crawls ( un ) then
68290: LD_VAR 0 2
68294: PPUSH
68295: CALL_OW 318
68299: IFFALSE 68310
// ComWalk ( un ) ;
68301: LD_VAR 0 2
68305: PPUSH
68306: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68310: LD_VAR 0 2
68314: PPUSH
68315: LD_INT 9
68317: PPUSH
68318: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68322: LD_INT 28
68324: PPUSH
68325: LD_OWVAR 2
68329: PPUSH
68330: LD_INT 2
68332: PPUSH
68333: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68337: LD_INT 29
68339: PPUSH
68340: LD_OWVAR 2
68344: PPUSH
68345: LD_INT 2
68347: PPUSH
68348: CALL_OW 322
// end ;
68352: PPOPN 3
68354: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68355: LD_EXP 46
68359: PUSH
68360: LD_EXP 89
68364: AND
68365: IFFALSE 68476
68367: GO 68369
68369: DISABLE
68370: LD_INT 0
68372: PPUSH
68373: PPUSH
68374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68375: LD_ADDR_VAR 0 3
68379: PUSH
68380: LD_INT 22
68382: PUSH
68383: LD_OWVAR 2
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 25
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PPUSH
68406: CALL_OW 69
68410: ST_TO_ADDR
// if not tmp then
68411: LD_VAR 0 3
68415: NOT
68416: IFFALSE 68420
// exit ;
68418: GO 68476
// un := tmp [ rand ( 1 , tmp ) ] ;
68420: LD_ADDR_VAR 0 2
68424: PUSH
68425: LD_VAR 0 3
68429: PUSH
68430: LD_INT 1
68432: PPUSH
68433: LD_VAR 0 3
68437: PPUSH
68438: CALL_OW 12
68442: ARRAY
68443: ST_TO_ADDR
// if Crawls ( un ) then
68444: LD_VAR 0 2
68448: PPUSH
68449: CALL_OW 318
68453: IFFALSE 68464
// ComWalk ( un ) ;
68455: LD_VAR 0 2
68459: PPUSH
68460: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68464: LD_VAR 0 2
68468: PPUSH
68469: LD_INT 8
68471: PPUSH
68472: CALL_OW 336
// end ;
68476: PPOPN 3
68478: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68479: LD_EXP 46
68483: PUSH
68484: LD_EXP 90
68488: AND
68489: IFFALSE 68633
68491: GO 68493
68493: DISABLE
68494: LD_INT 0
68496: PPUSH
68497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68498: LD_ADDR_VAR 0 2
68502: PUSH
68503: LD_INT 22
68505: PUSH
68506: LD_OWVAR 2
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 21
68517: PUSH
68518: LD_INT 2
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 2
68527: PUSH
68528: LD_INT 34
68530: PUSH
68531: LD_INT 12
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 34
68540: PUSH
68541: LD_INT 51
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 34
68550: PUSH
68551: LD_INT 32
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: PPUSH
68569: CALL_OW 69
68573: ST_TO_ADDR
// if not tmp then
68574: LD_VAR 0 2
68578: NOT
68579: IFFALSE 68583
// exit ;
68581: GO 68633
// for i in tmp do
68583: LD_ADDR_VAR 0 1
68587: PUSH
68588: LD_VAR 0 2
68592: PUSH
68593: FOR_IN
68594: IFFALSE 68631
// if GetCargo ( i , mat_artifact ) = 0 then
68596: LD_VAR 0 1
68600: PPUSH
68601: LD_INT 4
68603: PPUSH
68604: CALL_OW 289
68608: PUSH
68609: LD_INT 0
68611: EQUAL
68612: IFFALSE 68629
// SetCargo ( i , mat_siberit , 100 ) ;
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_INT 3
68621: PPUSH
68622: LD_INT 100
68624: PPUSH
68625: CALL_OW 290
68629: GO 68593
68631: POP
68632: POP
// end ;
68633: PPOPN 2
68635: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68636: LD_EXP 46
68640: PUSH
68641: LD_EXP 91
68645: AND
68646: IFFALSE 68829
68648: GO 68650
68650: DISABLE
68651: LD_INT 0
68653: PPUSH
68654: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68655: LD_ADDR_VAR 0 2
68659: PUSH
68660: LD_INT 22
68662: PUSH
68663: LD_OWVAR 2
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PPUSH
68672: CALL_OW 69
68676: ST_TO_ADDR
// if not tmp then
68677: LD_VAR 0 2
68681: NOT
68682: IFFALSE 68686
// exit ;
68684: GO 68829
// for i := 1 to 2 do
68686: LD_ADDR_VAR 0 1
68690: PUSH
68691: DOUBLE
68692: LD_INT 1
68694: DEC
68695: ST_TO_ADDR
68696: LD_INT 2
68698: PUSH
68699: FOR_TO
68700: IFFALSE 68827
// begin uc_side := your_side ;
68702: LD_ADDR_OWVAR 20
68706: PUSH
68707: LD_OWVAR 2
68711: ST_TO_ADDR
// uc_nation := nation_american ;
68712: LD_ADDR_OWVAR 21
68716: PUSH
68717: LD_INT 1
68719: ST_TO_ADDR
// vc_chassis := us_morphling ;
68720: LD_ADDR_OWVAR 37
68724: PUSH
68725: LD_INT 5
68727: ST_TO_ADDR
// vc_engine := engine_siberite ;
68728: LD_ADDR_OWVAR 39
68732: PUSH
68733: LD_INT 3
68735: ST_TO_ADDR
// vc_control := control_computer ;
68736: LD_ADDR_OWVAR 38
68740: PUSH
68741: LD_INT 3
68743: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68744: LD_ADDR_OWVAR 40
68748: PUSH
68749: LD_INT 10
68751: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68752: LD_VAR 0 2
68756: PUSH
68757: LD_INT 1
68759: ARRAY
68760: PPUSH
68761: CALL_OW 310
68765: NOT
68766: IFFALSE 68813
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68768: CALL_OW 45
68772: PPUSH
68773: LD_VAR 0 2
68777: PUSH
68778: LD_INT 1
68780: ARRAY
68781: PPUSH
68782: CALL_OW 250
68786: PPUSH
68787: LD_VAR 0 2
68791: PUSH
68792: LD_INT 1
68794: ARRAY
68795: PPUSH
68796: CALL_OW 251
68800: PPUSH
68801: LD_INT 12
68803: PPUSH
68804: LD_INT 1
68806: PPUSH
68807: CALL_OW 50
68811: GO 68825
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68813: CALL_OW 45
68817: PPUSH
68818: LD_INT 1
68820: PPUSH
68821: CALL_OW 51
// end ;
68825: GO 68699
68827: POP
68828: POP
// end ;
68829: PPOPN 2
68831: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68832: LD_EXP 46
68836: PUSH
68837: LD_EXP 92
68841: AND
68842: IFFALSE 69064
68844: GO 68846
68846: DISABLE
68847: LD_INT 0
68849: PPUSH
68850: PPUSH
68851: PPUSH
68852: PPUSH
68853: PPUSH
68854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68855: LD_ADDR_VAR 0 6
68859: PUSH
68860: LD_INT 22
68862: PUSH
68863: LD_OWVAR 2
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 21
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 23
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: LIST
68903: PPUSH
68904: CALL_OW 69
68908: ST_TO_ADDR
// if not tmp then
68909: LD_VAR 0 6
68913: NOT
68914: IFFALSE 68918
// exit ;
68916: GO 69064
// s1 := rand ( 1 , 4 ) ;
68918: LD_ADDR_VAR 0 2
68922: PUSH
68923: LD_INT 1
68925: PPUSH
68926: LD_INT 4
68928: PPUSH
68929: CALL_OW 12
68933: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68934: LD_ADDR_VAR 0 4
68938: PUSH
68939: LD_VAR 0 6
68943: PUSH
68944: LD_INT 1
68946: ARRAY
68947: PPUSH
68948: LD_VAR 0 2
68952: PPUSH
68953: CALL_OW 259
68957: ST_TO_ADDR
// if s1 = 1 then
68958: LD_VAR 0 2
68962: PUSH
68963: LD_INT 1
68965: EQUAL
68966: IFFALSE 68986
// s2 := rand ( 2 , 4 ) else
68968: LD_ADDR_VAR 0 3
68972: PUSH
68973: LD_INT 2
68975: PPUSH
68976: LD_INT 4
68978: PPUSH
68979: CALL_OW 12
68983: ST_TO_ADDR
68984: GO 68994
// s2 := 1 ;
68986: LD_ADDR_VAR 0 3
68990: PUSH
68991: LD_INT 1
68993: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68994: LD_ADDR_VAR 0 5
68998: PUSH
68999: LD_VAR 0 6
69003: PUSH
69004: LD_INT 1
69006: ARRAY
69007: PPUSH
69008: LD_VAR 0 3
69012: PPUSH
69013: CALL_OW 259
69017: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69018: LD_VAR 0 6
69022: PUSH
69023: LD_INT 1
69025: ARRAY
69026: PPUSH
69027: LD_VAR 0 2
69031: PPUSH
69032: LD_VAR 0 5
69036: PPUSH
69037: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69041: LD_VAR 0 6
69045: PUSH
69046: LD_INT 1
69048: ARRAY
69049: PPUSH
69050: LD_VAR 0 3
69054: PPUSH
69055: LD_VAR 0 4
69059: PPUSH
69060: CALL_OW 237
// end ;
69064: PPOPN 6
69066: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69067: LD_EXP 46
69071: PUSH
69072: LD_EXP 93
69076: AND
69077: IFFALSE 69156
69079: GO 69081
69081: DISABLE
69082: LD_INT 0
69084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69085: LD_ADDR_VAR 0 1
69089: PUSH
69090: LD_INT 22
69092: PUSH
69093: LD_OWVAR 2
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 30
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PPUSH
69116: CALL_OW 69
69120: ST_TO_ADDR
// if not tmp then
69121: LD_VAR 0 1
69125: NOT
69126: IFFALSE 69130
// exit ;
69128: GO 69156
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69130: LD_VAR 0 1
69134: PUSH
69135: LD_INT 1
69137: PPUSH
69138: LD_VAR 0 1
69142: PPUSH
69143: CALL_OW 12
69147: ARRAY
69148: PPUSH
69149: LD_INT 1
69151: PPUSH
69152: CALL_OW 234
// end ;
69156: PPOPN 1
69158: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69159: LD_EXP 46
69163: PUSH
69164: LD_EXP 94
69168: AND
69169: IFFALSE 69281
69171: GO 69173
69173: DISABLE
69174: LD_INT 0
69176: PPUSH
69177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69178: LD_ADDR_VAR 0 2
69182: PUSH
69183: LD_INT 22
69185: PUSH
69186: LD_OWVAR 2
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 2
69197: PUSH
69198: LD_INT 30
69200: PUSH
69201: LD_INT 27
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 30
69210: PUSH
69211: LD_INT 26
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 30
69220: PUSH
69221: LD_INT 28
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PPUSH
69238: CALL_OW 69
69242: ST_TO_ADDR
// if not tmp then
69243: LD_VAR 0 2
69247: NOT
69248: IFFALSE 69252
// exit ;
69250: GO 69281
// for i in tmp do
69252: LD_ADDR_VAR 0 1
69256: PUSH
69257: LD_VAR 0 2
69261: PUSH
69262: FOR_IN
69263: IFFALSE 69279
// SetLives ( i , 1 ) ;
69265: LD_VAR 0 1
69269: PPUSH
69270: LD_INT 1
69272: PPUSH
69273: CALL_OW 234
69277: GO 69262
69279: POP
69280: POP
// end ;
69281: PPOPN 2
69283: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69284: LD_EXP 46
69288: PUSH
69289: LD_EXP 95
69293: AND
69294: IFFALSE 69581
69296: GO 69298
69298: DISABLE
69299: LD_INT 0
69301: PPUSH
69302: PPUSH
69303: PPUSH
// begin i := rand ( 1 , 7 ) ;
69304: LD_ADDR_VAR 0 1
69308: PUSH
69309: LD_INT 1
69311: PPUSH
69312: LD_INT 7
69314: PPUSH
69315: CALL_OW 12
69319: ST_TO_ADDR
// case i of 1 :
69320: LD_VAR 0 1
69324: PUSH
69325: LD_INT 1
69327: DOUBLE
69328: EQUAL
69329: IFTRUE 69333
69331: GO 69343
69333: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69334: LD_STRING earthquake(getX(game), 0, 32)
69336: PPUSH
69337: CALL_OW 559
69341: GO 69581
69343: LD_INT 2
69345: DOUBLE
69346: EQUAL
69347: IFTRUE 69351
69349: GO 69365
69351: POP
// begin ToLua ( displayStucuk(); ) ;
69352: LD_STRING displayStucuk();
69354: PPUSH
69355: CALL_OW 559
// ResetFog ;
69359: CALL_OW 335
// end ; 3 :
69363: GO 69581
69365: LD_INT 3
69367: DOUBLE
69368: EQUAL
69369: IFTRUE 69373
69371: GO 69477
69373: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69374: LD_ADDR_VAR 0 2
69378: PUSH
69379: LD_INT 22
69381: PUSH
69382: LD_OWVAR 2
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 25
69393: PUSH
69394: LD_INT 1
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PPUSH
69405: CALL_OW 69
69409: ST_TO_ADDR
// if not tmp then
69410: LD_VAR 0 2
69414: NOT
69415: IFFALSE 69419
// exit ;
69417: GO 69581
// un := tmp [ rand ( 1 , tmp ) ] ;
69419: LD_ADDR_VAR 0 3
69423: PUSH
69424: LD_VAR 0 2
69428: PUSH
69429: LD_INT 1
69431: PPUSH
69432: LD_VAR 0 2
69436: PPUSH
69437: CALL_OW 12
69441: ARRAY
69442: ST_TO_ADDR
// if Crawls ( un ) then
69443: LD_VAR 0 3
69447: PPUSH
69448: CALL_OW 318
69452: IFFALSE 69463
// ComWalk ( un ) ;
69454: LD_VAR 0 3
69458: PPUSH
69459: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69463: LD_VAR 0 3
69467: PPUSH
69468: LD_INT 8
69470: PPUSH
69471: CALL_OW 336
// end ; 4 :
69475: GO 69581
69477: LD_INT 4
69479: DOUBLE
69480: EQUAL
69481: IFTRUE 69485
69483: GO 69559
69485: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69486: LD_ADDR_VAR 0 2
69490: PUSH
69491: LD_INT 22
69493: PUSH
69494: LD_OWVAR 2
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 30
69505: PUSH
69506: LD_INT 29
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PPUSH
69517: CALL_OW 69
69521: ST_TO_ADDR
// if not tmp then
69522: LD_VAR 0 2
69526: NOT
69527: IFFALSE 69531
// exit ;
69529: GO 69581
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69531: LD_VAR 0 2
69535: PUSH
69536: LD_INT 1
69538: ARRAY
69539: PPUSH
69540: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69544: LD_VAR 0 2
69548: PUSH
69549: LD_INT 1
69551: ARRAY
69552: PPUSH
69553: CALL_OW 65
// end ; 5 .. 7 :
69557: GO 69581
69559: LD_INT 5
69561: DOUBLE
69562: GREATEREQUAL
69563: IFFALSE 69571
69565: LD_INT 7
69567: DOUBLE
69568: LESSEQUAL
69569: IFTRUE 69573
69571: GO 69580
69573: POP
// StreamSibBomb ; end ;
69574: CALL 65818 0 0
69578: GO 69581
69580: POP
// end ;
69581: PPOPN 3
69583: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69584: LD_EXP 46
69588: PUSH
69589: LD_EXP 96
69593: AND
69594: IFFALSE 69750
69596: GO 69598
69598: DISABLE
69599: LD_INT 0
69601: PPUSH
69602: PPUSH
69603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69604: LD_ADDR_VAR 0 2
69608: PUSH
69609: LD_INT 81
69611: PUSH
69612: LD_OWVAR 2
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: LD_INT 21
69626: PUSH
69627: LD_INT 1
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 21
69636: PUSH
69637: LD_INT 2
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: LIST
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PPUSH
69653: CALL_OW 69
69657: ST_TO_ADDR
// if not tmp then
69658: LD_VAR 0 2
69662: NOT
69663: IFFALSE 69667
// exit ;
69665: GO 69750
// p := 0 ;
69667: LD_ADDR_VAR 0 3
69671: PUSH
69672: LD_INT 0
69674: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69675: LD_INT 35
69677: PPUSH
69678: CALL_OW 67
// p := p + 1 ;
69682: LD_ADDR_VAR 0 3
69686: PUSH
69687: LD_VAR 0 3
69691: PUSH
69692: LD_INT 1
69694: PLUS
69695: ST_TO_ADDR
// for i in tmp do
69696: LD_ADDR_VAR 0 1
69700: PUSH
69701: LD_VAR 0 2
69705: PUSH
69706: FOR_IN
69707: IFFALSE 69738
// if GetLives ( i ) < 1000 then
69709: LD_VAR 0 1
69713: PPUSH
69714: CALL_OW 256
69718: PUSH
69719: LD_INT 1000
69721: LESS
69722: IFFALSE 69736
// SetLives ( i , 1000 ) ;
69724: LD_VAR 0 1
69728: PPUSH
69729: LD_INT 1000
69731: PPUSH
69732: CALL_OW 234
69736: GO 69706
69738: POP
69739: POP
// until p > 20 ;
69740: LD_VAR 0 3
69744: PUSH
69745: LD_INT 20
69747: GREATER
69748: IFFALSE 69675
// end ;
69750: PPOPN 3
69752: END
// every 0 0$1 trigger StreamModeActive and sTime do
69753: LD_EXP 46
69757: PUSH
69758: LD_EXP 97
69762: AND
69763: IFFALSE 69798
69765: GO 69767
69767: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69768: LD_INT 28
69770: PPUSH
69771: LD_OWVAR 2
69775: PPUSH
69776: LD_INT 2
69778: PPUSH
69779: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69783: LD_INT 30
69785: PPUSH
69786: LD_OWVAR 2
69790: PPUSH
69791: LD_INT 2
69793: PPUSH
69794: CALL_OW 322
// end ;
69798: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69799: LD_EXP 46
69803: PUSH
69804: LD_EXP 98
69808: AND
69809: IFFALSE 69930
69811: GO 69813
69813: DISABLE
69814: LD_INT 0
69816: PPUSH
69817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69818: LD_ADDR_VAR 0 2
69822: PUSH
69823: LD_INT 22
69825: PUSH
69826: LD_OWVAR 2
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 21
69837: PUSH
69838: LD_INT 1
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: LD_INT 23
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: LIST
69866: PPUSH
69867: CALL_OW 69
69871: ST_TO_ADDR
// if not tmp then
69872: LD_VAR 0 2
69876: NOT
69877: IFFALSE 69881
// exit ;
69879: GO 69930
// for i in tmp do
69881: LD_ADDR_VAR 0 1
69885: PUSH
69886: LD_VAR 0 2
69890: PUSH
69891: FOR_IN
69892: IFFALSE 69928
// begin if Crawls ( i ) then
69894: LD_VAR 0 1
69898: PPUSH
69899: CALL_OW 318
69903: IFFALSE 69914
// ComWalk ( i ) ;
69905: LD_VAR 0 1
69909: PPUSH
69910: CALL_OW 138
// SetClass ( i , 2 ) ;
69914: LD_VAR 0 1
69918: PPUSH
69919: LD_INT 2
69921: PPUSH
69922: CALL_OW 336
// end ;
69926: GO 69891
69928: POP
69929: POP
// end ;
69930: PPOPN 2
69932: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69933: LD_EXP 46
69937: PUSH
69938: LD_EXP 99
69942: AND
69943: IFFALSE 70231
69945: GO 69947
69947: DISABLE
69948: LD_INT 0
69950: PPUSH
69951: PPUSH
69952: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69953: LD_OWVAR 2
69957: PPUSH
69958: LD_INT 9
69960: PPUSH
69961: LD_INT 1
69963: PPUSH
69964: LD_INT 1
69966: PPUSH
69967: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69971: LD_INT 9
69973: PPUSH
69974: LD_OWVAR 2
69978: PPUSH
69979: CALL_OW 343
// uc_side := 9 ;
69983: LD_ADDR_OWVAR 20
69987: PUSH
69988: LD_INT 9
69990: ST_TO_ADDR
// uc_nation := 2 ;
69991: LD_ADDR_OWVAR 21
69995: PUSH
69996: LD_INT 2
69998: ST_TO_ADDR
// hc_name := Dark Warrior ;
69999: LD_ADDR_OWVAR 26
70003: PUSH
70004: LD_STRING Dark Warrior
70006: ST_TO_ADDR
// hc_gallery :=  ;
70007: LD_ADDR_OWVAR 33
70011: PUSH
70012: LD_STRING 
70014: ST_TO_ADDR
// hc_noskilllimit := true ;
70015: LD_ADDR_OWVAR 76
70019: PUSH
70020: LD_INT 1
70022: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70023: LD_ADDR_OWVAR 31
70027: PUSH
70028: LD_INT 30
70030: PUSH
70031: LD_INT 30
70033: PUSH
70034: LD_INT 30
70036: PUSH
70037: LD_INT 30
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: ST_TO_ADDR
// un := CreateHuman ;
70046: LD_ADDR_VAR 0 3
70050: PUSH
70051: CALL_OW 44
70055: ST_TO_ADDR
// hc_noskilllimit := false ;
70056: LD_ADDR_OWVAR 76
70060: PUSH
70061: LD_INT 0
70063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70064: LD_VAR 0 3
70068: PPUSH
70069: LD_INT 1
70071: PPUSH
70072: CALL_OW 51
// ToLua ( playRanger() ) ;
70076: LD_STRING playRanger()
70078: PPUSH
70079: CALL_OW 559
// p := 0 ;
70083: LD_ADDR_VAR 0 2
70087: PUSH
70088: LD_INT 0
70090: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70091: LD_INT 35
70093: PPUSH
70094: CALL_OW 67
// p := p + 1 ;
70098: LD_ADDR_VAR 0 2
70102: PUSH
70103: LD_VAR 0 2
70107: PUSH
70108: LD_INT 1
70110: PLUS
70111: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70112: LD_VAR 0 3
70116: PPUSH
70117: CALL_OW 256
70121: PUSH
70122: LD_INT 1000
70124: LESS
70125: IFFALSE 70139
// SetLives ( un , 1000 ) ;
70127: LD_VAR 0 3
70131: PPUSH
70132: LD_INT 1000
70134: PPUSH
70135: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70139: LD_VAR 0 3
70143: PPUSH
70144: LD_INT 81
70146: PUSH
70147: LD_OWVAR 2
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 91
70158: PUSH
70159: LD_VAR 0 3
70163: PUSH
70164: LD_INT 30
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: LIST
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PPUSH
70176: CALL_OW 69
70180: PPUSH
70181: LD_VAR 0 3
70185: PPUSH
70186: CALL_OW 74
70190: PPUSH
70191: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70195: LD_VAR 0 2
70199: PUSH
70200: LD_INT 80
70202: GREATER
70203: PUSH
70204: LD_VAR 0 3
70208: PPUSH
70209: CALL_OW 301
70213: OR
70214: IFFALSE 70091
// if un then
70216: LD_VAR 0 3
70220: IFFALSE 70231
// RemoveUnit ( un ) ;
70222: LD_VAR 0 3
70226: PPUSH
70227: CALL_OW 64
// end ;
70231: PPOPN 3
70233: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70234: LD_EXP 100
70238: IFFALSE 70354
70240: GO 70242
70242: DISABLE
70243: LD_INT 0
70245: PPUSH
70246: PPUSH
70247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70248: LD_ADDR_VAR 0 2
70252: PUSH
70253: LD_INT 81
70255: PUSH
70256: LD_OWVAR 2
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 21
70267: PUSH
70268: LD_INT 1
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PPUSH
70279: CALL_OW 69
70283: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70284: LD_STRING playComputer()
70286: PPUSH
70287: CALL_OW 559
// if not tmp then
70291: LD_VAR 0 2
70295: NOT
70296: IFFALSE 70300
// exit ;
70298: GO 70354
// for i in tmp do
70300: LD_ADDR_VAR 0 1
70304: PUSH
70305: LD_VAR 0 2
70309: PUSH
70310: FOR_IN
70311: IFFALSE 70352
// for j := 1 to 4 do
70313: LD_ADDR_VAR 0 3
70317: PUSH
70318: DOUBLE
70319: LD_INT 1
70321: DEC
70322: ST_TO_ADDR
70323: LD_INT 4
70325: PUSH
70326: FOR_TO
70327: IFFALSE 70348
// SetSkill ( i , j , 10 ) ;
70329: LD_VAR 0 1
70333: PPUSH
70334: LD_VAR 0 3
70338: PPUSH
70339: LD_INT 10
70341: PPUSH
70342: CALL_OW 237
70346: GO 70326
70348: POP
70349: POP
70350: GO 70310
70352: POP
70353: POP
// end ;
70354: PPOPN 3
70356: END
// every 0 0$1 trigger s30 do var i , tmp ;
70357: LD_EXP 101
70361: IFFALSE 70430
70363: GO 70365
70365: DISABLE
70366: LD_INT 0
70368: PPUSH
70369: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70370: LD_ADDR_VAR 0 2
70374: PUSH
70375: LD_INT 22
70377: PUSH
70378: LD_OWVAR 2
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PPUSH
70387: CALL_OW 69
70391: ST_TO_ADDR
// if not tmp then
70392: LD_VAR 0 2
70396: NOT
70397: IFFALSE 70401
// exit ;
70399: GO 70430
// for i in tmp do
70401: LD_ADDR_VAR 0 1
70405: PUSH
70406: LD_VAR 0 2
70410: PUSH
70411: FOR_IN
70412: IFFALSE 70428
// SetLives ( i , 300 ) ;
70414: LD_VAR 0 1
70418: PPUSH
70419: LD_INT 300
70421: PPUSH
70422: CALL_OW 234
70426: GO 70411
70428: POP
70429: POP
// end ;
70430: PPOPN 2
70432: END
// every 0 0$1 trigger s60 do var i , tmp ;
70433: LD_EXP 102
70437: IFFALSE 70506
70439: GO 70441
70441: DISABLE
70442: LD_INT 0
70444: PPUSH
70445: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70446: LD_ADDR_VAR 0 2
70450: PUSH
70451: LD_INT 22
70453: PUSH
70454: LD_OWVAR 2
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PPUSH
70463: CALL_OW 69
70467: ST_TO_ADDR
// if not tmp then
70468: LD_VAR 0 2
70472: NOT
70473: IFFALSE 70477
// exit ;
70475: GO 70506
// for i in tmp do
70477: LD_ADDR_VAR 0 1
70481: PUSH
70482: LD_VAR 0 2
70486: PUSH
70487: FOR_IN
70488: IFFALSE 70504
// SetLives ( i , 600 ) ;
70490: LD_VAR 0 1
70494: PPUSH
70495: LD_INT 600
70497: PPUSH
70498: CALL_OW 234
70502: GO 70487
70504: POP
70505: POP
// end ;
70506: PPOPN 2
70508: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70509: LD_INT 0
70511: PPUSH
// case cmd of 301 :
70512: LD_VAR 0 1
70516: PUSH
70517: LD_INT 301
70519: DOUBLE
70520: EQUAL
70521: IFTRUE 70525
70523: GO 70557
70525: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70526: LD_VAR 0 6
70530: PPUSH
70531: LD_VAR 0 7
70535: PPUSH
70536: LD_VAR 0 8
70540: PPUSH
70541: LD_VAR 0 4
70545: PPUSH
70546: LD_VAR 0 5
70550: PPUSH
70551: CALL 71766 0 5
70555: GO 70678
70557: LD_INT 302
70559: DOUBLE
70560: EQUAL
70561: IFTRUE 70565
70563: GO 70602
70565: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70566: LD_VAR 0 6
70570: PPUSH
70571: LD_VAR 0 7
70575: PPUSH
70576: LD_VAR 0 8
70580: PPUSH
70581: LD_VAR 0 9
70585: PPUSH
70586: LD_VAR 0 4
70590: PPUSH
70591: LD_VAR 0 5
70595: PPUSH
70596: CALL 71857 0 6
70600: GO 70678
70602: LD_INT 303
70604: DOUBLE
70605: EQUAL
70606: IFTRUE 70610
70608: GO 70647
70610: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70611: LD_VAR 0 6
70615: PPUSH
70616: LD_VAR 0 7
70620: PPUSH
70621: LD_VAR 0 8
70625: PPUSH
70626: LD_VAR 0 9
70630: PPUSH
70631: LD_VAR 0 4
70635: PPUSH
70636: LD_VAR 0 5
70640: PPUSH
70641: CALL 70683 0 6
70645: GO 70678
70647: LD_INT 304
70649: DOUBLE
70650: EQUAL
70651: IFTRUE 70655
70653: GO 70677
70655: POP
// hHackTeleport ( unit , x , y ) ; end ;
70656: LD_VAR 0 2
70660: PPUSH
70661: LD_VAR 0 4
70665: PPUSH
70666: LD_VAR 0 5
70670: PPUSH
70671: CALL 72450 0 3
70675: GO 70678
70677: POP
// end ;
70678: LD_VAR 0 12
70682: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70683: LD_INT 0
70685: PPUSH
70686: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70687: LD_VAR 0 1
70691: PUSH
70692: LD_INT 1
70694: LESS
70695: PUSH
70696: LD_VAR 0 1
70700: PUSH
70701: LD_INT 3
70703: GREATER
70704: OR
70705: PUSH
70706: LD_VAR 0 5
70710: PPUSH
70711: LD_VAR 0 6
70715: PPUSH
70716: CALL_OW 428
70720: OR
70721: IFFALSE 70725
// exit ;
70723: GO 71453
// uc_side := your_side ;
70725: LD_ADDR_OWVAR 20
70729: PUSH
70730: LD_OWVAR 2
70734: ST_TO_ADDR
// uc_nation := nation ;
70735: LD_ADDR_OWVAR 21
70739: PUSH
70740: LD_VAR 0 1
70744: ST_TO_ADDR
// bc_level = 1 ;
70745: LD_ADDR_OWVAR 43
70749: PUSH
70750: LD_INT 1
70752: ST_TO_ADDR
// case btype of 1 :
70753: LD_VAR 0 2
70757: PUSH
70758: LD_INT 1
70760: DOUBLE
70761: EQUAL
70762: IFTRUE 70766
70764: GO 70777
70766: POP
// bc_type := b_depot ; 2 :
70767: LD_ADDR_OWVAR 42
70771: PUSH
70772: LD_INT 0
70774: ST_TO_ADDR
70775: GO 71397
70777: LD_INT 2
70779: DOUBLE
70780: EQUAL
70781: IFTRUE 70785
70783: GO 70796
70785: POP
// bc_type := b_warehouse ; 3 :
70786: LD_ADDR_OWVAR 42
70790: PUSH
70791: LD_INT 1
70793: ST_TO_ADDR
70794: GO 71397
70796: LD_INT 3
70798: DOUBLE
70799: EQUAL
70800: IFTRUE 70804
70802: GO 70815
70804: POP
// bc_type := b_lab ; 4 .. 9 :
70805: LD_ADDR_OWVAR 42
70809: PUSH
70810: LD_INT 6
70812: ST_TO_ADDR
70813: GO 71397
70815: LD_INT 4
70817: DOUBLE
70818: GREATEREQUAL
70819: IFFALSE 70827
70821: LD_INT 9
70823: DOUBLE
70824: LESSEQUAL
70825: IFTRUE 70829
70827: GO 70889
70829: POP
// begin bc_type := b_lab_half ;
70830: LD_ADDR_OWVAR 42
70834: PUSH
70835: LD_INT 7
70837: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70838: LD_ADDR_OWVAR 44
70842: PUSH
70843: LD_INT 10
70845: PUSH
70846: LD_INT 11
70848: PUSH
70849: LD_INT 12
70851: PUSH
70852: LD_INT 15
70854: PUSH
70855: LD_INT 14
70857: PUSH
70858: LD_INT 13
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: PUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_INT 3
70876: MINUS
70877: ARRAY
70878: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70879: LD_ADDR_OWVAR 45
70883: PUSH
70884: LD_INT 9
70886: ST_TO_ADDR
// end ; 10 .. 13 :
70887: GO 71397
70889: LD_INT 10
70891: DOUBLE
70892: GREATEREQUAL
70893: IFFALSE 70901
70895: LD_INT 13
70897: DOUBLE
70898: LESSEQUAL
70899: IFTRUE 70903
70901: GO 70980
70903: POP
// begin bc_type := b_lab_full ;
70904: LD_ADDR_OWVAR 42
70908: PUSH
70909: LD_INT 8
70911: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70912: LD_ADDR_OWVAR 44
70916: PUSH
70917: LD_INT 10
70919: PUSH
70920: LD_INT 12
70922: PUSH
70923: LD_INT 14
70925: PUSH
70926: LD_INT 13
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: PUSH
70935: LD_VAR 0 2
70939: PUSH
70940: LD_INT 9
70942: MINUS
70943: ARRAY
70944: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70945: LD_ADDR_OWVAR 45
70949: PUSH
70950: LD_INT 11
70952: PUSH
70953: LD_INT 15
70955: PUSH
70956: LD_INT 12
70958: PUSH
70959: LD_INT 15
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: PUSH
70968: LD_VAR 0 2
70972: PUSH
70973: LD_INT 9
70975: MINUS
70976: ARRAY
70977: ST_TO_ADDR
// end ; 14 :
70978: GO 71397
70980: LD_INT 14
70982: DOUBLE
70983: EQUAL
70984: IFTRUE 70988
70986: GO 70999
70988: POP
// bc_type := b_workshop ; 15 :
70989: LD_ADDR_OWVAR 42
70993: PUSH
70994: LD_INT 2
70996: ST_TO_ADDR
70997: GO 71397
70999: LD_INT 15
71001: DOUBLE
71002: EQUAL
71003: IFTRUE 71007
71005: GO 71018
71007: POP
// bc_type := b_factory ; 16 :
71008: LD_ADDR_OWVAR 42
71012: PUSH
71013: LD_INT 3
71015: ST_TO_ADDR
71016: GO 71397
71018: LD_INT 16
71020: DOUBLE
71021: EQUAL
71022: IFTRUE 71026
71024: GO 71037
71026: POP
// bc_type := b_ext_gun ; 17 :
71027: LD_ADDR_OWVAR 42
71031: PUSH
71032: LD_INT 17
71034: ST_TO_ADDR
71035: GO 71397
71037: LD_INT 17
71039: DOUBLE
71040: EQUAL
71041: IFTRUE 71045
71043: GO 71073
71045: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71046: LD_ADDR_OWVAR 42
71050: PUSH
71051: LD_INT 19
71053: PUSH
71054: LD_INT 23
71056: PUSH
71057: LD_INT 19
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: LIST
71064: PUSH
71065: LD_VAR 0 1
71069: ARRAY
71070: ST_TO_ADDR
71071: GO 71397
71073: LD_INT 18
71075: DOUBLE
71076: EQUAL
71077: IFTRUE 71081
71079: GO 71092
71081: POP
// bc_type := b_ext_radar ; 19 :
71082: LD_ADDR_OWVAR 42
71086: PUSH
71087: LD_INT 20
71089: ST_TO_ADDR
71090: GO 71397
71092: LD_INT 19
71094: DOUBLE
71095: EQUAL
71096: IFTRUE 71100
71098: GO 71111
71100: POP
// bc_type := b_ext_radio ; 20 :
71101: LD_ADDR_OWVAR 42
71105: PUSH
71106: LD_INT 22
71108: ST_TO_ADDR
71109: GO 71397
71111: LD_INT 20
71113: DOUBLE
71114: EQUAL
71115: IFTRUE 71119
71117: GO 71130
71119: POP
// bc_type := b_ext_siberium ; 21 :
71120: LD_ADDR_OWVAR 42
71124: PUSH
71125: LD_INT 21
71127: ST_TO_ADDR
71128: GO 71397
71130: LD_INT 21
71132: DOUBLE
71133: EQUAL
71134: IFTRUE 71138
71136: GO 71149
71138: POP
// bc_type := b_ext_computer ; 22 :
71139: LD_ADDR_OWVAR 42
71143: PUSH
71144: LD_INT 24
71146: ST_TO_ADDR
71147: GO 71397
71149: LD_INT 22
71151: DOUBLE
71152: EQUAL
71153: IFTRUE 71157
71155: GO 71168
71157: POP
// bc_type := b_ext_track ; 23 :
71158: LD_ADDR_OWVAR 42
71162: PUSH
71163: LD_INT 16
71165: ST_TO_ADDR
71166: GO 71397
71168: LD_INT 23
71170: DOUBLE
71171: EQUAL
71172: IFTRUE 71176
71174: GO 71187
71176: POP
// bc_type := b_ext_laser ; 24 :
71177: LD_ADDR_OWVAR 42
71181: PUSH
71182: LD_INT 25
71184: ST_TO_ADDR
71185: GO 71397
71187: LD_INT 24
71189: DOUBLE
71190: EQUAL
71191: IFTRUE 71195
71193: GO 71206
71195: POP
// bc_type := b_control_tower ; 25 :
71196: LD_ADDR_OWVAR 42
71200: PUSH
71201: LD_INT 36
71203: ST_TO_ADDR
71204: GO 71397
71206: LD_INT 25
71208: DOUBLE
71209: EQUAL
71210: IFTRUE 71214
71212: GO 71225
71214: POP
// bc_type := b_breastwork ; 26 :
71215: LD_ADDR_OWVAR 42
71219: PUSH
71220: LD_INT 31
71222: ST_TO_ADDR
71223: GO 71397
71225: LD_INT 26
71227: DOUBLE
71228: EQUAL
71229: IFTRUE 71233
71231: GO 71244
71233: POP
// bc_type := b_bunker ; 27 :
71234: LD_ADDR_OWVAR 42
71238: PUSH
71239: LD_INT 32
71241: ST_TO_ADDR
71242: GO 71397
71244: LD_INT 27
71246: DOUBLE
71247: EQUAL
71248: IFTRUE 71252
71250: GO 71263
71252: POP
// bc_type := b_turret ; 28 :
71253: LD_ADDR_OWVAR 42
71257: PUSH
71258: LD_INT 33
71260: ST_TO_ADDR
71261: GO 71397
71263: LD_INT 28
71265: DOUBLE
71266: EQUAL
71267: IFTRUE 71271
71269: GO 71282
71271: POP
// bc_type := b_armoury ; 29 :
71272: LD_ADDR_OWVAR 42
71276: PUSH
71277: LD_INT 4
71279: ST_TO_ADDR
71280: GO 71397
71282: LD_INT 29
71284: DOUBLE
71285: EQUAL
71286: IFTRUE 71290
71288: GO 71301
71290: POP
// bc_type := b_barracks ; 30 :
71291: LD_ADDR_OWVAR 42
71295: PUSH
71296: LD_INT 5
71298: ST_TO_ADDR
71299: GO 71397
71301: LD_INT 30
71303: DOUBLE
71304: EQUAL
71305: IFTRUE 71309
71307: GO 71320
71309: POP
// bc_type := b_solar_power ; 31 :
71310: LD_ADDR_OWVAR 42
71314: PUSH
71315: LD_INT 27
71317: ST_TO_ADDR
71318: GO 71397
71320: LD_INT 31
71322: DOUBLE
71323: EQUAL
71324: IFTRUE 71328
71326: GO 71339
71328: POP
// bc_type := b_oil_power ; 32 :
71329: LD_ADDR_OWVAR 42
71333: PUSH
71334: LD_INT 26
71336: ST_TO_ADDR
71337: GO 71397
71339: LD_INT 32
71341: DOUBLE
71342: EQUAL
71343: IFTRUE 71347
71345: GO 71358
71347: POP
// bc_type := b_siberite_power ; 33 :
71348: LD_ADDR_OWVAR 42
71352: PUSH
71353: LD_INT 28
71355: ST_TO_ADDR
71356: GO 71397
71358: LD_INT 33
71360: DOUBLE
71361: EQUAL
71362: IFTRUE 71366
71364: GO 71377
71366: POP
// bc_type := b_oil_mine ; 34 :
71367: LD_ADDR_OWVAR 42
71371: PUSH
71372: LD_INT 29
71374: ST_TO_ADDR
71375: GO 71397
71377: LD_INT 34
71379: DOUBLE
71380: EQUAL
71381: IFTRUE 71385
71383: GO 71396
71385: POP
// bc_type := b_siberite_mine ; end ;
71386: LD_ADDR_OWVAR 42
71390: PUSH
71391: LD_INT 30
71393: ST_TO_ADDR
71394: GO 71397
71396: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71397: LD_ADDR_VAR 0 8
71401: PUSH
71402: LD_VAR 0 5
71406: PPUSH
71407: LD_VAR 0 6
71411: PPUSH
71412: LD_VAR 0 3
71416: PPUSH
71417: CALL_OW 47
71421: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71422: LD_OWVAR 42
71426: PUSH
71427: LD_INT 32
71429: PUSH
71430: LD_INT 33
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: IN
71437: IFFALSE 71453
// PlaceWeaponTurret ( b , weapon ) ;
71439: LD_VAR 0 8
71443: PPUSH
71444: LD_VAR 0 4
71448: PPUSH
71449: CALL_OW 431
// end ;
71453: LD_VAR 0 7
71457: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71458: LD_INT 0
71460: PPUSH
71461: PPUSH
71462: PPUSH
71463: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71464: LD_ADDR_VAR 0 4
71468: PUSH
71469: LD_INT 22
71471: PUSH
71472: LD_OWVAR 2
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: PUSH
71484: LD_INT 30
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 30
71496: PUSH
71497: LD_INT 1
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: LIST
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PPUSH
71513: CALL_OW 69
71517: ST_TO_ADDR
// if not tmp then
71518: LD_VAR 0 4
71522: NOT
71523: IFFALSE 71527
// exit ;
71525: GO 71586
// for i in tmp do
71527: LD_ADDR_VAR 0 2
71531: PUSH
71532: LD_VAR 0 4
71536: PUSH
71537: FOR_IN
71538: IFFALSE 71584
// for j = 1 to 3 do
71540: LD_ADDR_VAR 0 3
71544: PUSH
71545: DOUBLE
71546: LD_INT 1
71548: DEC
71549: ST_TO_ADDR
71550: LD_INT 3
71552: PUSH
71553: FOR_TO
71554: IFFALSE 71580
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71556: LD_VAR 0 2
71560: PPUSH
71561: CALL_OW 274
71565: PPUSH
71566: LD_VAR 0 3
71570: PPUSH
71571: LD_INT 99999
71573: PPUSH
71574: CALL_OW 277
71578: GO 71553
71580: POP
71581: POP
71582: GO 71537
71584: POP
71585: POP
// end ;
71586: LD_VAR 0 1
71590: RET
// export function hHackSetLevel10 ; var i , j ; begin
71591: LD_INT 0
71593: PPUSH
71594: PPUSH
71595: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71596: LD_ADDR_VAR 0 2
71600: PUSH
71601: LD_INT 21
71603: PUSH
71604: LD_INT 1
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PPUSH
71611: CALL_OW 69
71615: PUSH
71616: FOR_IN
71617: IFFALSE 71669
// if IsSelected ( i ) then
71619: LD_VAR 0 2
71623: PPUSH
71624: CALL_OW 306
71628: IFFALSE 71667
// begin for j := 1 to 4 do
71630: LD_ADDR_VAR 0 3
71634: PUSH
71635: DOUBLE
71636: LD_INT 1
71638: DEC
71639: ST_TO_ADDR
71640: LD_INT 4
71642: PUSH
71643: FOR_TO
71644: IFFALSE 71665
// SetSkill ( i , j , 10 ) ;
71646: LD_VAR 0 2
71650: PPUSH
71651: LD_VAR 0 3
71655: PPUSH
71656: LD_INT 10
71658: PPUSH
71659: CALL_OW 237
71663: GO 71643
71665: POP
71666: POP
// end ;
71667: GO 71616
71669: POP
71670: POP
// end ;
71671: LD_VAR 0 1
71675: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71676: LD_INT 0
71678: PPUSH
71679: PPUSH
71680: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71681: LD_ADDR_VAR 0 2
71685: PUSH
71686: LD_INT 22
71688: PUSH
71689: LD_OWVAR 2
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 21
71700: PUSH
71701: LD_INT 1
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PPUSH
71712: CALL_OW 69
71716: PUSH
71717: FOR_IN
71718: IFFALSE 71759
// begin for j := 1 to 4 do
71720: LD_ADDR_VAR 0 3
71724: PUSH
71725: DOUBLE
71726: LD_INT 1
71728: DEC
71729: ST_TO_ADDR
71730: LD_INT 4
71732: PUSH
71733: FOR_TO
71734: IFFALSE 71755
// SetSkill ( i , j , 10 ) ;
71736: LD_VAR 0 2
71740: PPUSH
71741: LD_VAR 0 3
71745: PPUSH
71746: LD_INT 10
71748: PPUSH
71749: CALL_OW 237
71753: GO 71733
71755: POP
71756: POP
// end ;
71757: GO 71717
71759: POP
71760: POP
// end ;
71761: LD_VAR 0 1
71765: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71766: LD_INT 0
71768: PPUSH
// uc_side := your_side ;
71769: LD_ADDR_OWVAR 20
71773: PUSH
71774: LD_OWVAR 2
71778: ST_TO_ADDR
// uc_nation := nation ;
71779: LD_ADDR_OWVAR 21
71783: PUSH
71784: LD_VAR 0 1
71788: ST_TO_ADDR
// InitHc ;
71789: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71793: LD_INT 0
71795: PPUSH
71796: LD_VAR 0 2
71800: PPUSH
71801: LD_VAR 0 3
71805: PPUSH
71806: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71810: LD_VAR 0 4
71814: PPUSH
71815: LD_VAR 0 5
71819: PPUSH
71820: CALL_OW 428
71824: PUSH
71825: LD_INT 0
71827: EQUAL
71828: IFFALSE 71852
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71830: CALL_OW 44
71834: PPUSH
71835: LD_VAR 0 4
71839: PPUSH
71840: LD_VAR 0 5
71844: PPUSH
71845: LD_INT 1
71847: PPUSH
71848: CALL_OW 48
// end ;
71852: LD_VAR 0 6
71856: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71857: LD_INT 0
71859: PPUSH
71860: PPUSH
// uc_side := your_side ;
71861: LD_ADDR_OWVAR 20
71865: PUSH
71866: LD_OWVAR 2
71870: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71871: LD_VAR 0 1
71875: PUSH
71876: LD_INT 1
71878: PUSH
71879: LD_INT 2
71881: PUSH
71882: LD_INT 3
71884: PUSH
71885: LD_INT 4
71887: PUSH
71888: LD_INT 5
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: IN
71898: IFFALSE 71910
// uc_nation := nation_american else
71900: LD_ADDR_OWVAR 21
71904: PUSH
71905: LD_INT 1
71907: ST_TO_ADDR
71908: GO 71953
// if chassis in [ 11 , 12 , 13 , 14 ] then
71910: LD_VAR 0 1
71914: PUSH
71915: LD_INT 11
71917: PUSH
71918: LD_INT 12
71920: PUSH
71921: LD_INT 13
71923: PUSH
71924: LD_INT 14
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: IN
71933: IFFALSE 71945
// uc_nation := nation_arabian else
71935: LD_ADDR_OWVAR 21
71939: PUSH
71940: LD_INT 2
71942: ST_TO_ADDR
71943: GO 71953
// uc_nation := nation_russian ;
71945: LD_ADDR_OWVAR 21
71949: PUSH
71950: LD_INT 3
71952: ST_TO_ADDR
// vc_chassis := chassis ;
71953: LD_ADDR_OWVAR 37
71957: PUSH
71958: LD_VAR 0 1
71962: ST_TO_ADDR
// vc_engine := engine ;
71963: LD_ADDR_OWVAR 39
71967: PUSH
71968: LD_VAR 0 2
71972: ST_TO_ADDR
// vc_control := control ;
71973: LD_ADDR_OWVAR 38
71977: PUSH
71978: LD_VAR 0 3
71982: ST_TO_ADDR
// vc_weapon := weapon ;
71983: LD_ADDR_OWVAR 40
71987: PUSH
71988: LD_VAR 0 4
71992: ST_TO_ADDR
// un := CreateVehicle ;
71993: LD_ADDR_VAR 0 8
71997: PUSH
71998: CALL_OW 45
72002: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72003: LD_VAR 0 8
72007: PPUSH
72008: LD_INT 0
72010: PPUSH
72011: LD_INT 5
72013: PPUSH
72014: CALL_OW 12
72018: PPUSH
72019: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72023: LD_VAR 0 8
72027: PPUSH
72028: LD_VAR 0 5
72032: PPUSH
72033: LD_VAR 0 6
72037: PPUSH
72038: LD_INT 1
72040: PPUSH
72041: CALL_OW 48
// end ;
72045: LD_VAR 0 7
72049: RET
// export hInvincible ; every 1 do
72050: GO 72052
72052: DISABLE
// hInvincible := [ ] ;
72053: LD_ADDR_EXP 103
72057: PUSH
72058: EMPTY
72059: ST_TO_ADDR
72060: END
// every 10 do var i ;
72061: GO 72063
72063: DISABLE
72064: LD_INT 0
72066: PPUSH
// begin enable ;
72067: ENABLE
// if not hInvincible then
72068: LD_EXP 103
72072: NOT
72073: IFFALSE 72077
// exit ;
72075: GO 72121
// for i in hInvincible do
72077: LD_ADDR_VAR 0 1
72081: PUSH
72082: LD_EXP 103
72086: PUSH
72087: FOR_IN
72088: IFFALSE 72119
// if GetLives ( i ) < 1000 then
72090: LD_VAR 0 1
72094: PPUSH
72095: CALL_OW 256
72099: PUSH
72100: LD_INT 1000
72102: LESS
72103: IFFALSE 72117
// SetLives ( i , 1000 ) ;
72105: LD_VAR 0 1
72109: PPUSH
72110: LD_INT 1000
72112: PPUSH
72113: CALL_OW 234
72117: GO 72087
72119: POP
72120: POP
// end ;
72121: PPOPN 1
72123: END
// export function hHackInvincible ; var i ; begin
72124: LD_INT 0
72126: PPUSH
72127: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72128: LD_ADDR_VAR 0 2
72132: PUSH
72133: LD_INT 2
72135: PUSH
72136: LD_INT 21
72138: PUSH
72139: LD_INT 1
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 21
72148: PUSH
72149: LD_INT 2
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: PPUSH
72161: CALL_OW 69
72165: PUSH
72166: FOR_IN
72167: IFFALSE 72228
// if IsSelected ( i ) then
72169: LD_VAR 0 2
72173: PPUSH
72174: CALL_OW 306
72178: IFFALSE 72226
// begin if i in hInvincible then
72180: LD_VAR 0 2
72184: PUSH
72185: LD_EXP 103
72189: IN
72190: IFFALSE 72210
// hInvincible := hInvincible diff i else
72192: LD_ADDR_EXP 103
72196: PUSH
72197: LD_EXP 103
72201: PUSH
72202: LD_VAR 0 2
72206: DIFF
72207: ST_TO_ADDR
72208: GO 72226
// hInvincible := hInvincible union i ;
72210: LD_ADDR_EXP 103
72214: PUSH
72215: LD_EXP 103
72219: PUSH
72220: LD_VAR 0 2
72224: UNION
72225: ST_TO_ADDR
// end ;
72226: GO 72166
72228: POP
72229: POP
// end ;
72230: LD_VAR 0 1
72234: RET
// export function hHackInvisible ; var i , j ; begin
72235: LD_INT 0
72237: PPUSH
72238: PPUSH
72239: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72240: LD_ADDR_VAR 0 2
72244: PUSH
72245: LD_INT 21
72247: PUSH
72248: LD_INT 1
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PPUSH
72255: CALL_OW 69
72259: PUSH
72260: FOR_IN
72261: IFFALSE 72285
// if IsSelected ( i ) then
72263: LD_VAR 0 2
72267: PPUSH
72268: CALL_OW 306
72272: IFFALSE 72283
// ComForceInvisible ( i ) ;
72274: LD_VAR 0 2
72278: PPUSH
72279: CALL_OW 496
72283: GO 72260
72285: POP
72286: POP
// end ;
72287: LD_VAR 0 1
72291: RET
// export function hHackChangeYourSide ; begin
72292: LD_INT 0
72294: PPUSH
// if your_side = 8 then
72295: LD_OWVAR 2
72299: PUSH
72300: LD_INT 8
72302: EQUAL
72303: IFFALSE 72315
// your_side := 0 else
72305: LD_ADDR_OWVAR 2
72309: PUSH
72310: LD_INT 0
72312: ST_TO_ADDR
72313: GO 72329
// your_side := your_side + 1 ;
72315: LD_ADDR_OWVAR 2
72319: PUSH
72320: LD_OWVAR 2
72324: PUSH
72325: LD_INT 1
72327: PLUS
72328: ST_TO_ADDR
// end ;
72329: LD_VAR 0 1
72333: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72334: LD_INT 0
72336: PPUSH
72337: PPUSH
72338: PPUSH
// for i in all_units do
72339: LD_ADDR_VAR 0 2
72343: PUSH
72344: LD_OWVAR 3
72348: PUSH
72349: FOR_IN
72350: IFFALSE 72428
// if IsSelected ( i ) then
72352: LD_VAR 0 2
72356: PPUSH
72357: CALL_OW 306
72361: IFFALSE 72426
// begin j := GetSide ( i ) ;
72363: LD_ADDR_VAR 0 3
72367: PUSH
72368: LD_VAR 0 2
72372: PPUSH
72373: CALL_OW 255
72377: ST_TO_ADDR
// if j = 8 then
72378: LD_VAR 0 3
72382: PUSH
72383: LD_INT 8
72385: EQUAL
72386: IFFALSE 72398
// j := 0 else
72388: LD_ADDR_VAR 0 3
72392: PUSH
72393: LD_INT 0
72395: ST_TO_ADDR
72396: GO 72412
// j := j + 1 ;
72398: LD_ADDR_VAR 0 3
72402: PUSH
72403: LD_VAR 0 3
72407: PUSH
72408: LD_INT 1
72410: PLUS
72411: ST_TO_ADDR
// SetSide ( i , j ) ;
72412: LD_VAR 0 2
72416: PPUSH
72417: LD_VAR 0 3
72421: PPUSH
72422: CALL_OW 235
// end ;
72426: GO 72349
72428: POP
72429: POP
// end ;
72430: LD_VAR 0 1
72434: RET
// export function hHackFog ; begin
72435: LD_INT 0
72437: PPUSH
// FogOff ( true ) ;
72438: LD_INT 1
72440: PPUSH
72441: CALL_OW 344
// end ;
72445: LD_VAR 0 1
72449: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72450: LD_INT 0
72452: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72453: LD_VAR 0 1
72457: PPUSH
72458: LD_VAR 0 2
72462: PPUSH
72463: LD_VAR 0 3
72467: PPUSH
72468: LD_INT 1
72470: PPUSH
72471: LD_INT 1
72473: PPUSH
72474: CALL_OW 483
// CenterOnXY ( x , y ) ;
72478: LD_VAR 0 2
72482: PPUSH
72483: LD_VAR 0 3
72487: PPUSH
72488: CALL_OW 84
// end ;
72492: LD_VAR 0 4
72496: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72497: LD_INT 0
72499: PPUSH
72500: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72501: LD_VAR 0 1
72505: NOT
72506: PUSH
72507: LD_VAR 0 2
72511: PPUSH
72512: LD_VAR 0 3
72516: PPUSH
72517: CALL_OW 488
72521: NOT
72522: OR
72523: PUSH
72524: LD_VAR 0 1
72528: PPUSH
72529: CALL_OW 266
72533: PUSH
72534: LD_INT 3
72536: NONEQUAL
72537: PUSH
72538: LD_VAR 0 1
72542: PPUSH
72543: CALL_OW 247
72547: PUSH
72548: LD_INT 1
72550: EQUAL
72551: NOT
72552: AND
72553: OR
72554: IFFALSE 72558
// exit ;
72556: GO 72707
// if GetType ( factory ) = unit_human then
72558: LD_VAR 0 1
72562: PPUSH
72563: CALL_OW 247
72567: PUSH
72568: LD_INT 1
72570: EQUAL
72571: IFFALSE 72588
// factory := IsInUnit ( factory ) ;
72573: LD_ADDR_VAR 0 1
72577: PUSH
72578: LD_VAR 0 1
72582: PPUSH
72583: CALL_OW 310
72587: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72588: LD_VAR 0 1
72592: PPUSH
72593: CALL_OW 266
72597: PUSH
72598: LD_INT 3
72600: NONEQUAL
72601: IFFALSE 72605
// exit ;
72603: GO 72707
// if HexInfo ( x , y ) = factory then
72605: LD_VAR 0 2
72609: PPUSH
72610: LD_VAR 0 3
72614: PPUSH
72615: CALL_OW 428
72619: PUSH
72620: LD_VAR 0 1
72624: EQUAL
72625: IFFALSE 72652
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72627: LD_ADDR_EXP 104
72631: PUSH
72632: LD_EXP 104
72636: PPUSH
72637: LD_VAR 0 1
72641: PPUSH
72642: LD_INT 0
72644: PPUSH
72645: CALL_OW 1
72649: ST_TO_ADDR
72650: GO 72703
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72652: LD_ADDR_EXP 104
72656: PUSH
72657: LD_EXP 104
72661: PPUSH
72662: LD_VAR 0 1
72666: PPUSH
72667: LD_VAR 0 1
72671: PPUSH
72672: CALL_OW 255
72676: PUSH
72677: LD_VAR 0 1
72681: PUSH
72682: LD_VAR 0 2
72686: PUSH
72687: LD_VAR 0 3
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: PPUSH
72698: CALL_OW 1
72702: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72703: CALL 72712 0 0
// end ;
72707: LD_VAR 0 4
72711: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72712: LD_INT 0
72714: PPUSH
72715: PPUSH
72716: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72717: LD_STRING resetFactoryWaypoint();
72719: PPUSH
72720: CALL_OW 559
// if factoryWaypoints then
72724: LD_EXP 104
72728: IFFALSE 72854
// begin list := PrepareArray ( factoryWaypoints ) ;
72730: LD_ADDR_VAR 0 3
72734: PUSH
72735: LD_EXP 104
72739: PPUSH
72740: CALL 56667 0 1
72744: ST_TO_ADDR
// for i := 1 to list do
72745: LD_ADDR_VAR 0 2
72749: PUSH
72750: DOUBLE
72751: LD_INT 1
72753: DEC
72754: ST_TO_ADDR
72755: LD_VAR 0 3
72759: PUSH
72760: FOR_TO
72761: IFFALSE 72852
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72763: LD_STRING setFactoryWaypointXY(
72765: PUSH
72766: LD_VAR 0 3
72770: PUSH
72771: LD_VAR 0 2
72775: ARRAY
72776: PUSH
72777: LD_INT 1
72779: ARRAY
72780: STR
72781: PUSH
72782: LD_STRING ,
72784: STR
72785: PUSH
72786: LD_VAR 0 3
72790: PUSH
72791: LD_VAR 0 2
72795: ARRAY
72796: PUSH
72797: LD_INT 2
72799: ARRAY
72800: STR
72801: PUSH
72802: LD_STRING ,
72804: STR
72805: PUSH
72806: LD_VAR 0 3
72810: PUSH
72811: LD_VAR 0 2
72815: ARRAY
72816: PUSH
72817: LD_INT 3
72819: ARRAY
72820: STR
72821: PUSH
72822: LD_STRING ,
72824: STR
72825: PUSH
72826: LD_VAR 0 3
72830: PUSH
72831: LD_VAR 0 2
72835: ARRAY
72836: PUSH
72837: LD_INT 4
72839: ARRAY
72840: STR
72841: PUSH
72842: LD_STRING )
72844: STR
72845: PPUSH
72846: CALL_OW 559
72850: GO 72760
72852: POP
72853: POP
// end ; end ;
72854: LD_VAR 0 1
72858: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72859: LD_INT 0
72861: PPUSH
// if HexInfo ( x , y ) = warehouse then
72862: LD_VAR 0 2
72866: PPUSH
72867: LD_VAR 0 3
72871: PPUSH
72872: CALL_OW 428
72876: PUSH
72877: LD_VAR 0 1
72881: EQUAL
72882: IFFALSE 72909
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72884: LD_ADDR_EXP 105
72888: PUSH
72889: LD_EXP 105
72893: PPUSH
72894: LD_VAR 0 1
72898: PPUSH
72899: LD_INT 0
72901: PPUSH
72902: CALL_OW 1
72906: ST_TO_ADDR
72907: GO 72960
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72909: LD_ADDR_EXP 105
72913: PUSH
72914: LD_EXP 105
72918: PPUSH
72919: LD_VAR 0 1
72923: PPUSH
72924: LD_VAR 0 1
72928: PPUSH
72929: CALL_OW 255
72933: PUSH
72934: LD_VAR 0 1
72938: PUSH
72939: LD_VAR 0 2
72943: PUSH
72944: LD_VAR 0 3
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: PPUSH
72955: CALL_OW 1
72959: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72960: CALL 72969 0 0
// end ;
72964: LD_VAR 0 4
72968: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72969: LD_INT 0
72971: PPUSH
72972: PPUSH
72973: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72974: LD_STRING resetWarehouseGatheringPoints();
72976: PPUSH
72977: CALL_OW 559
// if warehouseGatheringPoints then
72981: LD_EXP 105
72985: IFFALSE 73111
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72987: LD_ADDR_VAR 0 3
72991: PUSH
72992: LD_EXP 105
72996: PPUSH
72997: CALL 56667 0 1
73001: ST_TO_ADDR
// for i := 1 to list do
73002: LD_ADDR_VAR 0 2
73006: PUSH
73007: DOUBLE
73008: LD_INT 1
73010: DEC
73011: ST_TO_ADDR
73012: LD_VAR 0 3
73016: PUSH
73017: FOR_TO
73018: IFFALSE 73109
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73020: LD_STRING setWarehouseGatheringPointXY(
73022: PUSH
73023: LD_VAR 0 3
73027: PUSH
73028: LD_VAR 0 2
73032: ARRAY
73033: PUSH
73034: LD_INT 1
73036: ARRAY
73037: STR
73038: PUSH
73039: LD_STRING ,
73041: STR
73042: PUSH
73043: LD_VAR 0 3
73047: PUSH
73048: LD_VAR 0 2
73052: ARRAY
73053: PUSH
73054: LD_INT 2
73056: ARRAY
73057: STR
73058: PUSH
73059: LD_STRING ,
73061: STR
73062: PUSH
73063: LD_VAR 0 3
73067: PUSH
73068: LD_VAR 0 2
73072: ARRAY
73073: PUSH
73074: LD_INT 3
73076: ARRAY
73077: STR
73078: PUSH
73079: LD_STRING ,
73081: STR
73082: PUSH
73083: LD_VAR 0 3
73087: PUSH
73088: LD_VAR 0 2
73092: ARRAY
73093: PUSH
73094: LD_INT 4
73096: ARRAY
73097: STR
73098: PUSH
73099: LD_STRING )
73101: STR
73102: PPUSH
73103: CALL_OW 559
73107: GO 73017
73109: POP
73110: POP
// end ; end ;
73111: LD_VAR 0 1
73115: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73116: LD_EXP 105
73120: IFFALSE 73805
73122: GO 73124
73124: DISABLE
73125: LD_INT 0
73127: PPUSH
73128: PPUSH
73129: PPUSH
73130: PPUSH
73131: PPUSH
73132: PPUSH
73133: PPUSH
73134: PPUSH
73135: PPUSH
// begin enable ;
73136: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73137: LD_ADDR_VAR 0 3
73141: PUSH
73142: LD_EXP 105
73146: PPUSH
73147: CALL 56667 0 1
73151: ST_TO_ADDR
// if not list then
73152: LD_VAR 0 3
73156: NOT
73157: IFFALSE 73161
// exit ;
73159: GO 73805
// for i := 1 to list do
73161: LD_ADDR_VAR 0 1
73165: PUSH
73166: DOUBLE
73167: LD_INT 1
73169: DEC
73170: ST_TO_ADDR
73171: LD_VAR 0 3
73175: PUSH
73176: FOR_TO
73177: IFFALSE 73803
// begin depot := list [ i ] [ 2 ] ;
73179: LD_ADDR_VAR 0 8
73183: PUSH
73184: LD_VAR 0 3
73188: PUSH
73189: LD_VAR 0 1
73193: ARRAY
73194: PUSH
73195: LD_INT 2
73197: ARRAY
73198: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73199: LD_ADDR_VAR 0 5
73203: PUSH
73204: LD_VAR 0 3
73208: PUSH
73209: LD_VAR 0 1
73213: ARRAY
73214: PUSH
73215: LD_INT 1
73217: ARRAY
73218: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73219: LD_VAR 0 8
73223: PPUSH
73224: CALL_OW 301
73228: PUSH
73229: LD_VAR 0 5
73233: PUSH
73234: LD_VAR 0 8
73238: PPUSH
73239: CALL_OW 255
73243: NONEQUAL
73244: OR
73245: IFFALSE 73274
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73247: LD_ADDR_EXP 105
73251: PUSH
73252: LD_EXP 105
73256: PPUSH
73257: LD_VAR 0 8
73261: PPUSH
73262: LD_INT 0
73264: PPUSH
73265: CALL_OW 1
73269: ST_TO_ADDR
// exit ;
73270: POP
73271: POP
73272: GO 73805
// end ; x := list [ i ] [ 3 ] ;
73274: LD_ADDR_VAR 0 6
73278: PUSH
73279: LD_VAR 0 3
73283: PUSH
73284: LD_VAR 0 1
73288: ARRAY
73289: PUSH
73290: LD_INT 3
73292: ARRAY
73293: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73294: LD_ADDR_VAR 0 7
73298: PUSH
73299: LD_VAR 0 3
73303: PUSH
73304: LD_VAR 0 1
73308: ARRAY
73309: PUSH
73310: LD_INT 4
73312: ARRAY
73313: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73314: LD_ADDR_VAR 0 9
73318: PUSH
73319: LD_VAR 0 6
73323: PPUSH
73324: LD_VAR 0 7
73328: PPUSH
73329: LD_INT 16
73331: PPUSH
73332: CALL 55251 0 3
73336: ST_TO_ADDR
// if not cratesNearbyPoint then
73337: LD_VAR 0 9
73341: NOT
73342: IFFALSE 73348
// exit ;
73344: POP
73345: POP
73346: GO 73805
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73348: LD_ADDR_VAR 0 4
73352: PUSH
73353: LD_INT 22
73355: PUSH
73356: LD_VAR 0 5
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 3
73367: PUSH
73368: LD_INT 60
73370: PUSH
73371: EMPTY
73372: LIST
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 91
73380: PUSH
73381: LD_VAR 0 8
73385: PUSH
73386: LD_INT 6
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 2
73396: PUSH
73397: LD_INT 25
73399: PUSH
73400: LD_INT 2
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 25
73409: PUSH
73410: LD_INT 16
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: LIST
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: PPUSH
73428: CALL_OW 69
73432: PUSH
73433: LD_VAR 0 8
73437: PPUSH
73438: CALL_OW 313
73442: PPUSH
73443: LD_INT 3
73445: PUSH
73446: LD_INT 60
73448: PUSH
73449: EMPTY
73450: LIST
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 2
73458: PUSH
73459: LD_INT 25
73461: PUSH
73462: LD_INT 2
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 25
73471: PUSH
73472: LD_INT 16
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: LIST
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PPUSH
73488: CALL_OW 72
73492: UNION
73493: ST_TO_ADDR
// if tmp then
73494: LD_VAR 0 4
73498: IFFALSE 73578
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73500: LD_ADDR_VAR 0 4
73504: PUSH
73505: LD_VAR 0 4
73509: PPUSH
73510: LD_INT 3
73512: PPUSH
73513: CALL 53220 0 2
73517: ST_TO_ADDR
// for j in tmp do
73518: LD_ADDR_VAR 0 2
73522: PUSH
73523: LD_VAR 0 4
73527: PUSH
73528: FOR_IN
73529: IFFALSE 73572
// begin if IsInUnit ( j ) then
73531: LD_VAR 0 2
73535: PPUSH
73536: CALL_OW 310
73540: IFFALSE 73551
// ComExit ( j ) ;
73542: LD_VAR 0 2
73546: PPUSH
73547: CALL 53303 0 1
// AddComCollect ( j , x , y ) ;
73551: LD_VAR 0 2
73555: PPUSH
73556: LD_VAR 0 6
73560: PPUSH
73561: LD_VAR 0 7
73565: PPUSH
73566: CALL_OW 177
// end ;
73570: GO 73528
73572: POP
73573: POP
// exit ;
73574: POP
73575: POP
73576: GO 73805
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73578: LD_ADDR_VAR 0 4
73582: PUSH
73583: LD_INT 22
73585: PUSH
73586: LD_VAR 0 5
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 91
73597: PUSH
73598: LD_VAR 0 8
73602: PUSH
73603: LD_INT 8
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 2
73613: PUSH
73614: LD_INT 34
73616: PUSH
73617: LD_INT 12
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 34
73626: PUSH
73627: LD_INT 51
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 34
73636: PUSH
73637: LD_INT 32
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 34
73646: PUSH
73647: LD_INT 89
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: PPUSH
73666: CALL_OW 69
73670: ST_TO_ADDR
// if tmp then
73671: LD_VAR 0 4
73675: IFFALSE 73801
// begin for j in tmp do
73677: LD_ADDR_VAR 0 2
73681: PUSH
73682: LD_VAR 0 4
73686: PUSH
73687: FOR_IN
73688: IFFALSE 73799
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73690: LD_VAR 0 2
73694: PPUSH
73695: CALL_OW 262
73699: PUSH
73700: LD_INT 3
73702: EQUAL
73703: PUSH
73704: LD_VAR 0 2
73708: PPUSH
73709: CALL_OW 261
73713: PUSH
73714: LD_INT 20
73716: GREATER
73717: OR
73718: PUSH
73719: LD_VAR 0 2
73723: PPUSH
73724: CALL_OW 314
73728: NOT
73729: AND
73730: PUSH
73731: LD_VAR 0 2
73735: PPUSH
73736: CALL_OW 263
73740: PUSH
73741: LD_INT 1
73743: NONEQUAL
73744: PUSH
73745: LD_VAR 0 2
73749: PPUSH
73750: CALL_OW 311
73754: OR
73755: AND
73756: IFFALSE 73797
// begin ComCollect ( j , x , y ) ;
73758: LD_VAR 0 2
73762: PPUSH
73763: LD_VAR 0 6
73767: PPUSH
73768: LD_VAR 0 7
73772: PPUSH
73773: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73777: LD_VAR 0 2
73781: PPUSH
73782: LD_VAR 0 8
73786: PPUSH
73787: CALL_OW 172
// exit ;
73791: POP
73792: POP
73793: POP
73794: POP
73795: GO 73805
// end ;
73797: GO 73687
73799: POP
73800: POP
// end ; end ;
73801: GO 73176
73803: POP
73804: POP
// end ; end_of_file
73805: PPOPN 9
73807: END
// export function SOS_UnitDestroyed ( un ) ; begin
73808: LD_INT 0
73810: PPUSH
// ComRadiation ( un ) ;
73811: LD_VAR 0 1
73815: PPUSH
73816: CALL 74701 0 1
// end ;
73820: LD_VAR 0 2
73824: RET
// export function SOS_UnitKamikazed ( un ) ; begin
73825: LD_INT 0
73827: PPUSH
// ComRadiation ( un ) ;
73828: LD_VAR 0 1
73832: PPUSH
73833: CALL 74701 0 1
// end ;
73837: LD_VAR 0 2
73841: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73842: LD_INT 0
73844: PPUSH
// end ;
73845: LD_VAR 0 4
73849: RET
// export function SOS_Command ( cmd ) ; begin
73850: LD_INT 0
73852: PPUSH
// end ;
73853: LD_VAR 0 2
73857: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73858: LD_INT 0
73860: PPUSH
// end ;
73861: LD_VAR 0 6
73865: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
73866: LD_INT 0
73868: PPUSH
73869: PPUSH
73870: PPUSH
73871: PPUSH
// if not vehicle or not factory then
73872: LD_VAR 0 1
73876: NOT
73877: PUSH
73878: LD_VAR 0 2
73882: NOT
73883: OR
73884: IFFALSE 73888
// exit ;
73886: GO 74292
// if factoryWaypoints >= factory then
73888: LD_EXP 104
73892: PUSH
73893: LD_VAR 0 2
73897: GREATEREQUAL
73898: IFFALSE 74292
// if factoryWaypoints [ factory ] then
73900: LD_EXP 104
73904: PUSH
73905: LD_VAR 0 2
73909: ARRAY
73910: IFFALSE 74292
// begin if GetControl ( vehicle ) = control_manual then
73912: LD_VAR 0 1
73916: PPUSH
73917: CALL_OW 263
73921: PUSH
73922: LD_INT 1
73924: EQUAL
73925: IFFALSE 74179
// begin driver := IsDrivenBy ( vehicle ) ;
73927: LD_ADDR_VAR 0 5
73931: PUSH
73932: LD_VAR 0 1
73936: PPUSH
73937: CALL_OW 311
73941: ST_TO_ADDR
// tag := GetTag ( driver ) ;
73942: LD_ADDR_VAR 0 4
73946: PUSH
73947: LD_VAR 0 5
73951: PPUSH
73952: CALL_OW 110
73956: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
73957: LD_VAR 0 4
73961: PUSH
73962: LD_INT 501
73964: EQUAL
73965: PUSH
73966: LD_VAR 0 1
73970: PPUSH
73971: CALL_OW 110
73975: PUSH
73976: LD_INT 501
73978: EQUAL
73979: OR
73980: IFFALSE 73984
// exit ;
73982: GO 74292
// if not HasTask ( driver ) then
73984: LD_VAR 0 5
73988: PPUSH
73989: CALL_OW 314
73993: NOT
73994: IFFALSE 74177
// begin SetTag ( driver , tDriver ) ;
73996: LD_VAR 0 5
74000: PPUSH
74001: LD_INT 501
74003: PPUSH
74004: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
74008: LD_VAR 0 1
74012: PPUSH
74013: LD_INT 501
74015: PPUSH
74016: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74020: LD_ADDR_VAR 0 6
74024: PUSH
74025: LD_EXP 104
74029: PUSH
74030: LD_VAR 0 2
74034: ARRAY
74035: PUSH
74036: LD_INT 3
74038: ARRAY
74039: PPUSH
74040: LD_EXP 104
74044: PUSH
74045: LD_VAR 0 2
74049: ARRAY
74050: PUSH
74051: LD_INT 4
74053: ARRAY
74054: PPUSH
74055: CALL_OW 428
74059: ST_TO_ADDR
// if hex then
74060: LD_VAR 0 6
74064: IFFALSE 74082
// ComMoveUnit ( driver , hex ) else
74066: LD_VAR 0 5
74070: PPUSH
74071: LD_VAR 0 6
74075: PPUSH
74076: CALL_OW 112
74080: GO 74121
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74082: LD_VAR 0 5
74086: PPUSH
74087: LD_EXP 104
74091: PUSH
74092: LD_VAR 0 2
74096: ARRAY
74097: PUSH
74098: LD_INT 3
74100: ARRAY
74101: PPUSH
74102: LD_EXP 104
74106: PUSH
74107: LD_VAR 0 2
74111: ARRAY
74112: PUSH
74113: LD_INT 4
74115: ARRAY
74116: PPUSH
74117: CALL_OW 111
// AddComExitVehicle ( driver ) ;
74121: LD_VAR 0 5
74125: PPUSH
74126: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
74130: LD_VAR 0 5
74134: PPUSH
74135: LD_VAR 0 2
74139: PPUSH
74140: CALL_OW 180
// wait ( 0 0$1 ) ;
74144: LD_INT 35
74146: PPUSH
74147: CALL_OW 67
// SetTag ( driver , tag ) ;
74151: LD_VAR 0 5
74155: PPUSH
74156: LD_VAR 0 4
74160: PPUSH
74161: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
74165: LD_VAR 0 1
74169: PPUSH
74170: LD_INT 0
74172: PPUSH
74173: CALL_OW 109
// end ; end else
74177: GO 74292
// if GetControl ( vehicle ) = control_remote then
74179: LD_VAR 0 1
74183: PPUSH
74184: CALL_OW 263
74188: PUSH
74189: LD_INT 2
74191: EQUAL
74192: IFFALSE 74253
// begin wait ( 0 0$2 ) ;
74194: LD_INT 70
74196: PPUSH
74197: CALL_OW 67
// if Connect ( vehicle ) then
74201: LD_VAR 0 1
74205: PPUSH
74206: CALL 23522 0 1
74210: IFFALSE 74251
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74212: LD_VAR 0 1
74216: PPUSH
74217: LD_EXP 104
74221: PUSH
74222: LD_VAR 0 2
74226: ARRAY
74227: PUSH
74228: LD_INT 3
74230: ARRAY
74231: PPUSH
74232: LD_EXP 104
74236: PUSH
74237: LD_VAR 0 2
74241: ARRAY
74242: PUSH
74243: LD_INT 4
74245: ARRAY
74246: PPUSH
74247: CALL_OW 171
// end else
74251: GO 74292
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74253: LD_VAR 0 1
74257: PPUSH
74258: LD_EXP 104
74262: PUSH
74263: LD_VAR 0 2
74267: ARRAY
74268: PUSH
74269: LD_INT 3
74271: ARRAY
74272: PPUSH
74273: LD_EXP 104
74277: PUSH
74278: LD_VAR 0 2
74282: ARRAY
74283: PUSH
74284: LD_INT 4
74286: ARRAY
74287: PPUSH
74288: CALL_OW 171
// end ; end ;
74292: LD_VAR 0 3
74296: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74297: LD_INT 0
74299: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74300: LD_VAR 0 1
74304: PUSH
74305: LD_INT 250
74307: EQUAL
74308: PUSH
74309: LD_VAR 0 2
74313: PPUSH
74314: CALL_OW 264
74318: PUSH
74319: LD_INT 81
74321: EQUAL
74322: AND
74323: IFFALSE 74344
// MinerPlaceMine ( unit , x , y ) ;
74325: LD_VAR 0 2
74329: PPUSH
74330: LD_VAR 0 4
74334: PPUSH
74335: LD_VAR 0 5
74339: PPUSH
74340: CALL 77436 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74344: LD_VAR 0 1
74348: PUSH
74349: LD_INT 251
74351: EQUAL
74352: PUSH
74353: LD_VAR 0 2
74357: PPUSH
74358: CALL_OW 264
74362: PUSH
74363: LD_INT 81
74365: EQUAL
74366: AND
74367: IFFALSE 74388
// MinerDetonateMine ( unit , x , y ) ;
74369: LD_VAR 0 2
74373: PPUSH
74374: LD_VAR 0 4
74378: PPUSH
74379: LD_VAR 0 5
74383: PPUSH
74384: CALL 77711 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74388: LD_VAR 0 1
74392: PUSH
74393: LD_INT 252
74395: EQUAL
74396: PUSH
74397: LD_VAR 0 2
74401: PPUSH
74402: CALL_OW 264
74406: PUSH
74407: LD_INT 81
74409: EQUAL
74410: AND
74411: IFFALSE 74432
// MinerCreateMinefield ( unit , x , y ) ;
74413: LD_VAR 0 2
74417: PPUSH
74418: LD_VAR 0 4
74422: PPUSH
74423: LD_VAR 0 5
74427: PPUSH
74428: CALL 78128 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74432: LD_VAR 0 1
74436: PUSH
74437: LD_INT 253
74439: EQUAL
74440: PUSH
74441: LD_VAR 0 2
74445: PPUSH
74446: CALL_OW 257
74450: PUSH
74451: LD_INT 5
74453: EQUAL
74454: AND
74455: IFFALSE 74476
// ComBinocular ( unit , x , y ) ;
74457: LD_VAR 0 2
74461: PPUSH
74462: LD_VAR 0 4
74466: PPUSH
74467: LD_VAR 0 5
74471: PPUSH
74472: CALL 78497 0 3
// if selectedUnit then
74476: LD_VAR 0 3
74480: IFFALSE 74536
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74482: LD_VAR 0 1
74486: PUSH
74487: LD_INT 254
74489: EQUAL
74490: PUSH
74491: LD_VAR 0 2
74495: PPUSH
74496: CALL_OW 264
74500: PUSH
74501: LD_INT 99
74503: EQUAL
74504: AND
74505: PUSH
74506: LD_VAR 0 3
74510: PPUSH
74511: CALL_OW 263
74515: PUSH
74516: LD_INT 3
74518: EQUAL
74519: AND
74520: IFFALSE 74536
// HackDestroyVehicle ( unit , selectedUnit ) ;
74522: LD_VAR 0 2
74526: PPUSH
74527: LD_VAR 0 3
74531: PPUSH
74532: CALL 76800 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74536: LD_VAR 0 1
74540: PUSH
74541: LD_INT 255
74543: EQUAL
74544: PUSH
74545: LD_VAR 0 2
74549: PPUSH
74550: CALL_OW 264
74554: PUSH
74555: LD_INT 14
74557: PUSH
74558: LD_INT 53
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: IN
74565: AND
74566: PUSH
74567: LD_VAR 0 4
74571: PPUSH
74572: LD_VAR 0 5
74576: PPUSH
74577: CALL_OW 488
74581: AND
74582: IFFALSE 74606
// CutTreeXYR ( unit , x , y , 12 ) ;
74584: LD_VAR 0 2
74588: PPUSH
74589: LD_VAR 0 4
74593: PPUSH
74594: LD_VAR 0 5
74598: PPUSH
74599: LD_INT 12
74601: PPUSH
74602: CALL 74797 0 4
// if cmd = 256 then
74606: LD_VAR 0 1
74610: PUSH
74611: LD_INT 256
74613: EQUAL
74614: IFFALSE 74635
// SetFactoryWaypoint ( unit , x , y ) ;
74616: LD_VAR 0 2
74620: PPUSH
74621: LD_VAR 0 4
74625: PPUSH
74626: LD_VAR 0 5
74630: PPUSH
74631: CALL 72497 0 3
// if cmd = 257 then
74635: LD_VAR 0 1
74639: PUSH
74640: LD_INT 257
74642: EQUAL
74643: IFFALSE 74664
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74645: LD_VAR 0 2
74649: PPUSH
74650: LD_VAR 0 4
74654: PPUSH
74655: LD_VAR 0 5
74659: PPUSH
74660: CALL 72859 0 3
// if cmd = 258 then
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 258
74671: EQUAL
74672: IFFALSE 74696
// BurnTreeXYR ( unit , x , y , 8 ) ;
74674: LD_VAR 0 2
74678: PPUSH
74679: LD_VAR 0 4
74683: PPUSH
74684: LD_VAR 0 5
74688: PPUSH
74689: LD_INT 8
74691: PPUSH
74692: CALL 75191 0 4
// end ;
74696: LD_VAR 0 6
74700: RET
// export function ComRadiation ( un ) ; var eff ; begin
74701: LD_INT 0
74703: PPUSH
74704: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
74705: LD_VAR 0 1
74709: PPUSH
74710: CALL_OW 264
74714: PUSH
74715: LD_INT 91
74717: NONEQUAL
74718: IFFALSE 74722
// exit ;
74720: GO 74792
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74722: LD_INT 68
74724: PPUSH
74725: LD_VAR 0 1
74729: PPUSH
74730: CALL_OW 255
74734: PPUSH
74735: CALL_OW 321
74739: PUSH
74740: LD_INT 2
74742: EQUAL
74743: IFFALSE 74755
// eff := 70 else
74745: LD_ADDR_VAR 0 3
74749: PUSH
74750: LD_INT 70
74752: ST_TO_ADDR
74753: GO 74763
// eff := 30 ;
74755: LD_ADDR_VAR 0 3
74759: PUSH
74760: LD_INT 30
74762: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74763: LD_VAR 0 1
74767: PPUSH
74768: CALL_OW 250
74772: PPUSH
74773: LD_VAR 0 1
74777: PPUSH
74778: CALL_OW 251
74782: PPUSH
74783: LD_VAR 0 3
74787: PPUSH
74788: CALL_OW 495
// end ;
74792: LD_VAR 0 2
74796: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74797: LD_INT 0
74799: PPUSH
74800: PPUSH
74801: PPUSH
74802: PPUSH
74803: PPUSH
74804: PPUSH
74805: PPUSH
74806: PPUSH
74807: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74808: LD_VAR 0 1
74812: PPUSH
74813: CALL_OW 302
74817: NOT
74818: PUSH
74819: LD_VAR 0 2
74823: PPUSH
74824: LD_VAR 0 3
74828: PPUSH
74829: CALL_OW 488
74833: NOT
74834: OR
74835: PUSH
74836: LD_VAR 0 4
74840: NOT
74841: OR
74842: IFFALSE 74846
// exit ;
74844: GO 75186
// list := [ ] ;
74846: LD_ADDR_VAR 0 13
74850: PUSH
74851: EMPTY
74852: ST_TO_ADDR
// if x - r < 0 then
74853: LD_VAR 0 2
74857: PUSH
74858: LD_VAR 0 4
74862: MINUS
74863: PUSH
74864: LD_INT 0
74866: LESS
74867: IFFALSE 74879
// min_x := 0 else
74869: LD_ADDR_VAR 0 7
74873: PUSH
74874: LD_INT 0
74876: ST_TO_ADDR
74877: GO 74895
// min_x := x - r ;
74879: LD_ADDR_VAR 0 7
74883: PUSH
74884: LD_VAR 0 2
74888: PUSH
74889: LD_VAR 0 4
74893: MINUS
74894: ST_TO_ADDR
// if y - r < 0 then
74895: LD_VAR 0 3
74899: PUSH
74900: LD_VAR 0 4
74904: MINUS
74905: PUSH
74906: LD_INT 0
74908: LESS
74909: IFFALSE 74921
// min_y := 0 else
74911: LD_ADDR_VAR 0 8
74915: PUSH
74916: LD_INT 0
74918: ST_TO_ADDR
74919: GO 74937
// min_y := y - r ;
74921: LD_ADDR_VAR 0 8
74925: PUSH
74926: LD_VAR 0 3
74930: PUSH
74931: LD_VAR 0 4
74935: MINUS
74936: ST_TO_ADDR
// max_x := x + r ;
74937: LD_ADDR_VAR 0 9
74941: PUSH
74942: LD_VAR 0 2
74946: PUSH
74947: LD_VAR 0 4
74951: PLUS
74952: ST_TO_ADDR
// max_y := y + r ;
74953: LD_ADDR_VAR 0 10
74957: PUSH
74958: LD_VAR 0 3
74962: PUSH
74963: LD_VAR 0 4
74967: PLUS
74968: ST_TO_ADDR
// for _x = min_x to max_x do
74969: LD_ADDR_VAR 0 11
74973: PUSH
74974: DOUBLE
74975: LD_VAR 0 7
74979: DEC
74980: ST_TO_ADDR
74981: LD_VAR 0 9
74985: PUSH
74986: FOR_TO
74987: IFFALSE 75104
// for _y = min_y to max_y do
74989: LD_ADDR_VAR 0 12
74993: PUSH
74994: DOUBLE
74995: LD_VAR 0 8
74999: DEC
75000: ST_TO_ADDR
75001: LD_VAR 0 10
75005: PUSH
75006: FOR_TO
75007: IFFALSE 75100
// begin if not ValidHex ( _x , _y ) then
75009: LD_VAR 0 11
75013: PPUSH
75014: LD_VAR 0 12
75018: PPUSH
75019: CALL_OW 488
75023: NOT
75024: IFFALSE 75028
// continue ;
75026: GO 75006
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75028: LD_VAR 0 11
75032: PPUSH
75033: LD_VAR 0 12
75037: PPUSH
75038: CALL_OW 351
75042: PUSH
75043: LD_VAR 0 11
75047: PPUSH
75048: LD_VAR 0 12
75052: PPUSH
75053: CALL_OW 554
75057: AND
75058: IFFALSE 75098
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75060: LD_ADDR_VAR 0 13
75064: PUSH
75065: LD_VAR 0 13
75069: PPUSH
75070: LD_VAR 0 13
75074: PUSH
75075: LD_INT 1
75077: PLUS
75078: PPUSH
75079: LD_VAR 0 11
75083: PUSH
75084: LD_VAR 0 12
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PPUSH
75093: CALL_OW 2
75097: ST_TO_ADDR
// end ;
75098: GO 75006
75100: POP
75101: POP
75102: GO 74986
75104: POP
75105: POP
// if not list then
75106: LD_VAR 0 13
75110: NOT
75111: IFFALSE 75115
// exit ;
75113: GO 75186
// for i in list do
75115: LD_ADDR_VAR 0 6
75119: PUSH
75120: LD_VAR 0 13
75124: PUSH
75125: FOR_IN
75126: IFFALSE 75184
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75128: LD_VAR 0 1
75132: PPUSH
75133: LD_STRING M
75135: PUSH
75136: LD_VAR 0 6
75140: PUSH
75141: LD_INT 1
75143: ARRAY
75144: PUSH
75145: LD_VAR 0 6
75149: PUSH
75150: LD_INT 2
75152: ARRAY
75153: PUSH
75154: LD_INT 0
75156: PUSH
75157: LD_INT 0
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: PUSH
75175: EMPTY
75176: LIST
75177: PPUSH
75178: CALL_OW 447
75182: GO 75125
75184: POP
75185: POP
// end ;
75186: LD_VAR 0 5
75190: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
75191: LD_INT 0
75193: PPUSH
75194: PPUSH
75195: PPUSH
75196: PPUSH
75197: PPUSH
75198: PPUSH
75199: PPUSH
75200: PPUSH
75201: PPUSH
75202: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
75203: LD_VAR 0 1
75207: PPUSH
75208: CALL_OW 302
75212: NOT
75213: PUSH
75214: LD_VAR 0 2
75218: PPUSH
75219: LD_VAR 0 3
75223: PPUSH
75224: CALL_OW 488
75228: NOT
75229: OR
75230: PUSH
75231: LD_VAR 0 4
75235: NOT
75236: OR
75237: IFFALSE 75241
// exit ;
75239: GO 75754
// list := [ ] ;
75241: LD_ADDR_VAR 0 13
75245: PUSH
75246: EMPTY
75247: ST_TO_ADDR
// if x - r < 0 then
75248: LD_VAR 0 2
75252: PUSH
75253: LD_VAR 0 4
75257: MINUS
75258: PUSH
75259: LD_INT 0
75261: LESS
75262: IFFALSE 75274
// min_x := 0 else
75264: LD_ADDR_VAR 0 7
75268: PUSH
75269: LD_INT 0
75271: ST_TO_ADDR
75272: GO 75290
// min_x := x - r ;
75274: LD_ADDR_VAR 0 7
75278: PUSH
75279: LD_VAR 0 2
75283: PUSH
75284: LD_VAR 0 4
75288: MINUS
75289: ST_TO_ADDR
// if y - r < 0 then
75290: LD_VAR 0 3
75294: PUSH
75295: LD_VAR 0 4
75299: MINUS
75300: PUSH
75301: LD_INT 0
75303: LESS
75304: IFFALSE 75316
// min_y := 0 else
75306: LD_ADDR_VAR 0 8
75310: PUSH
75311: LD_INT 0
75313: ST_TO_ADDR
75314: GO 75332
// min_y := y - r ;
75316: LD_ADDR_VAR 0 8
75320: PUSH
75321: LD_VAR 0 3
75325: PUSH
75326: LD_VAR 0 4
75330: MINUS
75331: ST_TO_ADDR
// max_x := x + r ;
75332: LD_ADDR_VAR 0 9
75336: PUSH
75337: LD_VAR 0 2
75341: PUSH
75342: LD_VAR 0 4
75346: PLUS
75347: ST_TO_ADDR
// max_y := y + r ;
75348: LD_ADDR_VAR 0 10
75352: PUSH
75353: LD_VAR 0 3
75357: PUSH
75358: LD_VAR 0 4
75362: PLUS
75363: ST_TO_ADDR
// for _x = min_x to max_x do
75364: LD_ADDR_VAR 0 11
75368: PUSH
75369: DOUBLE
75370: LD_VAR 0 7
75374: DEC
75375: ST_TO_ADDR
75376: LD_VAR 0 9
75380: PUSH
75381: FOR_TO
75382: IFFALSE 75499
// for _y = min_y to max_y do
75384: LD_ADDR_VAR 0 12
75388: PUSH
75389: DOUBLE
75390: LD_VAR 0 8
75394: DEC
75395: ST_TO_ADDR
75396: LD_VAR 0 10
75400: PUSH
75401: FOR_TO
75402: IFFALSE 75495
// begin if not ValidHex ( _x , _y ) then
75404: LD_VAR 0 11
75408: PPUSH
75409: LD_VAR 0 12
75413: PPUSH
75414: CALL_OW 488
75418: NOT
75419: IFFALSE 75423
// continue ;
75421: GO 75401
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75423: LD_VAR 0 11
75427: PPUSH
75428: LD_VAR 0 12
75432: PPUSH
75433: CALL_OW 351
75437: PUSH
75438: LD_VAR 0 11
75442: PPUSH
75443: LD_VAR 0 12
75447: PPUSH
75448: CALL_OW 554
75452: AND
75453: IFFALSE 75493
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75455: LD_ADDR_VAR 0 13
75459: PUSH
75460: LD_VAR 0 13
75464: PPUSH
75465: LD_VAR 0 13
75469: PUSH
75470: LD_INT 1
75472: PLUS
75473: PPUSH
75474: LD_VAR 0 11
75478: PUSH
75479: LD_VAR 0 12
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PPUSH
75488: CALL_OW 2
75492: ST_TO_ADDR
// end ;
75493: GO 75401
75495: POP
75496: POP
75497: GO 75381
75499: POP
75500: POP
// if not list then
75501: LD_VAR 0 13
75505: NOT
75506: IFFALSE 75510
// exit ;
75508: GO 75754
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75510: LD_ADDR_VAR 0 13
75514: PUSH
75515: LD_VAR 0 1
75519: PPUSH
75520: LD_VAR 0 13
75524: PPUSH
75525: LD_INT 1
75527: PPUSH
75528: LD_INT 1
75530: PPUSH
75531: CALL 20664 0 4
75535: ST_TO_ADDR
// ComStop ( flame ) ;
75536: LD_VAR 0 1
75540: PPUSH
75541: CALL_OW 141
// for i in list do
75545: LD_ADDR_VAR 0 6
75549: PUSH
75550: LD_VAR 0 13
75554: PUSH
75555: FOR_IN
75556: IFFALSE 75587
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75558: LD_VAR 0 1
75562: PPUSH
75563: LD_VAR 0 6
75567: PUSH
75568: LD_INT 1
75570: ARRAY
75571: PPUSH
75572: LD_VAR 0 6
75576: PUSH
75577: LD_INT 2
75579: ARRAY
75580: PPUSH
75581: CALL_OW 176
75585: GO 75555
75587: POP
75588: POP
// repeat wait ( 0 0$1 ) ;
75589: LD_INT 35
75591: PPUSH
75592: CALL_OW 67
// task := GetTaskList ( flame ) ;
75596: LD_ADDR_VAR 0 14
75600: PUSH
75601: LD_VAR 0 1
75605: PPUSH
75606: CALL_OW 437
75610: ST_TO_ADDR
// if not task then
75611: LD_VAR 0 14
75615: NOT
75616: IFFALSE 75620
// exit ;
75618: GO 75754
// if task [ 1 ] [ 1 ] <> | then
75620: LD_VAR 0 14
75624: PUSH
75625: LD_INT 1
75627: ARRAY
75628: PUSH
75629: LD_INT 1
75631: ARRAY
75632: PUSH
75633: LD_STRING |
75635: NONEQUAL
75636: IFFALSE 75640
// exit ;
75638: GO 75754
// _x := task [ 1 ] [ 2 ] ;
75640: LD_ADDR_VAR 0 11
75644: PUSH
75645: LD_VAR 0 14
75649: PUSH
75650: LD_INT 1
75652: ARRAY
75653: PUSH
75654: LD_INT 2
75656: ARRAY
75657: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75658: LD_ADDR_VAR 0 12
75662: PUSH
75663: LD_VAR 0 14
75667: PUSH
75668: LD_INT 1
75670: ARRAY
75671: PUSH
75672: LD_INT 3
75674: ARRAY
75675: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75676: LD_VAR 0 11
75680: PPUSH
75681: LD_VAR 0 12
75685: PPUSH
75686: CALL_OW 351
75690: NOT
75691: PUSH
75692: LD_VAR 0 11
75696: PPUSH
75697: LD_VAR 0 12
75701: PPUSH
75702: CALL_OW 554
75706: NOT
75707: OR
75708: IFFALSE 75742
// begin task := Delete ( task , 1 ) ;
75710: LD_ADDR_VAR 0 14
75714: PUSH
75715: LD_VAR 0 14
75719: PPUSH
75720: LD_INT 1
75722: PPUSH
75723: CALL_OW 3
75727: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75728: LD_VAR 0 1
75732: PPUSH
75733: LD_VAR 0 14
75737: PPUSH
75738: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75742: LD_VAR 0 1
75746: PPUSH
75747: CALL_OW 314
75751: NOT
75752: IFFALSE 75589
// end ;
75754: LD_VAR 0 5
75758: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75759: LD_EXP 107
75763: NOT
75764: IFFALSE 75814
75766: GO 75768
75768: DISABLE
// begin initHack := true ;
75769: LD_ADDR_EXP 107
75773: PUSH
75774: LD_INT 1
75776: ST_TO_ADDR
// hackTanks := [ ] ;
75777: LD_ADDR_EXP 108
75781: PUSH
75782: EMPTY
75783: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75784: LD_ADDR_EXP 109
75788: PUSH
75789: EMPTY
75790: ST_TO_ADDR
// hackLimit := 3 ;
75791: LD_ADDR_EXP 110
75795: PUSH
75796: LD_INT 3
75798: ST_TO_ADDR
// hackDist := 12 ;
75799: LD_ADDR_EXP 111
75803: PUSH
75804: LD_INT 12
75806: ST_TO_ADDR
// hackCounter := [ ] ;
75807: LD_ADDR_EXP 112
75811: PUSH
75812: EMPTY
75813: ST_TO_ADDR
// end ;
75814: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75815: LD_EXP 107
75819: PUSH
75820: LD_INT 34
75822: PUSH
75823: LD_INT 99
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PPUSH
75830: CALL_OW 69
75834: AND
75835: IFFALSE 76088
75837: GO 75839
75839: DISABLE
75840: LD_INT 0
75842: PPUSH
75843: PPUSH
// begin enable ;
75844: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75845: LD_ADDR_VAR 0 1
75849: PUSH
75850: LD_INT 34
75852: PUSH
75853: LD_INT 99
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PPUSH
75860: CALL_OW 69
75864: PUSH
75865: FOR_IN
75866: IFFALSE 76086
// begin if not i in hackTanks then
75868: LD_VAR 0 1
75872: PUSH
75873: LD_EXP 108
75877: IN
75878: NOT
75879: IFFALSE 75962
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75881: LD_ADDR_EXP 108
75885: PUSH
75886: LD_EXP 108
75890: PPUSH
75891: LD_EXP 108
75895: PUSH
75896: LD_INT 1
75898: PLUS
75899: PPUSH
75900: LD_VAR 0 1
75904: PPUSH
75905: CALL_OW 1
75909: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75910: LD_ADDR_EXP 109
75914: PUSH
75915: LD_EXP 109
75919: PPUSH
75920: LD_EXP 109
75924: PUSH
75925: LD_INT 1
75927: PLUS
75928: PPUSH
75929: EMPTY
75930: PPUSH
75931: CALL_OW 1
75935: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75936: LD_ADDR_EXP 112
75940: PUSH
75941: LD_EXP 112
75945: PPUSH
75946: LD_EXP 112
75950: PUSH
75951: LD_INT 1
75953: PLUS
75954: PPUSH
75955: EMPTY
75956: PPUSH
75957: CALL_OW 1
75961: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75962: LD_VAR 0 1
75966: PPUSH
75967: CALL_OW 302
75971: NOT
75972: IFFALSE 75985
// begin HackUnlinkAll ( i ) ;
75974: LD_VAR 0 1
75978: PPUSH
75979: CALL 76091 0 1
// continue ;
75983: GO 75865
// end ; HackCheckCapturedStatus ( i ) ;
75985: LD_VAR 0 1
75989: PPUSH
75990: CALL 76534 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75994: LD_ADDR_VAR 0 2
75998: PUSH
75999: LD_INT 81
76001: PUSH
76002: LD_VAR 0 1
76006: PPUSH
76007: CALL_OW 255
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PUSH
76016: LD_INT 33
76018: PUSH
76019: LD_INT 3
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 91
76028: PUSH
76029: LD_VAR 0 1
76033: PUSH
76034: LD_EXP 111
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: LIST
76043: PUSH
76044: LD_INT 50
76046: PUSH
76047: EMPTY
76048: LIST
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: PPUSH
76056: CALL_OW 69
76060: ST_TO_ADDR
// if not tmp then
76061: LD_VAR 0 2
76065: NOT
76066: IFFALSE 76070
// continue ;
76068: GO 75865
// HackLink ( i , tmp ) ;
76070: LD_VAR 0 1
76074: PPUSH
76075: LD_VAR 0 2
76079: PPUSH
76080: CALL 76227 0 2
// end ;
76084: GO 75865
76086: POP
76087: POP
// end ;
76088: PPOPN 2
76090: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
76091: LD_INT 0
76093: PPUSH
76094: PPUSH
76095: PPUSH
// if not hack in hackTanks then
76096: LD_VAR 0 1
76100: PUSH
76101: LD_EXP 108
76105: IN
76106: NOT
76107: IFFALSE 76111
// exit ;
76109: GO 76222
// index := GetElementIndex ( hackTanks , hack ) ;
76111: LD_ADDR_VAR 0 4
76115: PUSH
76116: LD_EXP 108
76120: PPUSH
76121: LD_VAR 0 1
76125: PPUSH
76126: CALL 19961 0 2
76130: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
76131: LD_EXP 109
76135: PUSH
76136: LD_VAR 0 4
76140: ARRAY
76141: IFFALSE 76222
// begin for i in hackTanksCaptured [ index ] do
76143: LD_ADDR_VAR 0 3
76147: PUSH
76148: LD_EXP 109
76152: PUSH
76153: LD_VAR 0 4
76157: ARRAY
76158: PUSH
76159: FOR_IN
76160: IFFALSE 76186
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
76162: LD_VAR 0 3
76166: PUSH
76167: LD_INT 1
76169: ARRAY
76170: PPUSH
76171: LD_VAR 0 3
76175: PUSH
76176: LD_INT 2
76178: ARRAY
76179: PPUSH
76180: CALL_OW 235
76184: GO 76159
76186: POP
76187: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
76188: LD_ADDR_EXP 109
76192: PUSH
76193: LD_EXP 109
76197: PPUSH
76198: LD_VAR 0 4
76202: PPUSH
76203: EMPTY
76204: PPUSH
76205: CALL_OW 1
76209: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
76210: LD_VAR 0 1
76214: PPUSH
76215: LD_INT 0
76217: PPUSH
76218: CALL_OW 505
// end ; end ;
76222: LD_VAR 0 2
76226: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
76227: LD_INT 0
76229: PPUSH
76230: PPUSH
76231: PPUSH
// if not hack in hackTanks or not vehicles then
76232: LD_VAR 0 1
76236: PUSH
76237: LD_EXP 108
76241: IN
76242: NOT
76243: PUSH
76244: LD_VAR 0 2
76248: NOT
76249: OR
76250: IFFALSE 76254
// exit ;
76252: GO 76529
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
76254: LD_ADDR_VAR 0 2
76258: PUSH
76259: LD_VAR 0 1
76263: PPUSH
76264: LD_VAR 0 2
76268: PPUSH
76269: LD_INT 1
76271: PPUSH
76272: LD_INT 1
76274: PPUSH
76275: CALL 20611 0 4
76279: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76280: LD_ADDR_VAR 0 5
76284: PUSH
76285: LD_EXP 108
76289: PPUSH
76290: LD_VAR 0 1
76294: PPUSH
76295: CALL 19961 0 2
76299: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76300: LD_EXP 109
76304: PUSH
76305: LD_VAR 0 5
76309: ARRAY
76310: PUSH
76311: LD_EXP 110
76315: LESS
76316: IFFALSE 76505
// begin for i := 1 to vehicles do
76318: LD_ADDR_VAR 0 4
76322: PUSH
76323: DOUBLE
76324: LD_INT 1
76326: DEC
76327: ST_TO_ADDR
76328: LD_VAR 0 2
76332: PUSH
76333: FOR_TO
76334: IFFALSE 76503
// begin if hackTanksCaptured [ index ] = hackLimit then
76336: LD_EXP 109
76340: PUSH
76341: LD_VAR 0 5
76345: ARRAY
76346: PUSH
76347: LD_EXP 110
76351: EQUAL
76352: IFFALSE 76356
// break ;
76354: GO 76503
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76356: LD_ADDR_EXP 112
76360: PUSH
76361: LD_EXP 112
76365: PPUSH
76366: LD_VAR 0 5
76370: PPUSH
76371: LD_EXP 112
76375: PUSH
76376: LD_VAR 0 5
76380: ARRAY
76381: PUSH
76382: LD_INT 1
76384: PLUS
76385: PPUSH
76386: CALL_OW 1
76390: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76391: LD_ADDR_EXP 109
76395: PUSH
76396: LD_EXP 109
76400: PPUSH
76401: LD_VAR 0 5
76405: PUSH
76406: LD_EXP 109
76410: PUSH
76411: LD_VAR 0 5
76415: ARRAY
76416: PUSH
76417: LD_INT 1
76419: PLUS
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: PPUSH
76425: LD_VAR 0 2
76429: PUSH
76430: LD_VAR 0 4
76434: ARRAY
76435: PUSH
76436: LD_VAR 0 2
76440: PUSH
76441: LD_VAR 0 4
76445: ARRAY
76446: PPUSH
76447: CALL_OW 255
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PPUSH
76456: CALL 20176 0 3
76460: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76461: LD_VAR 0 2
76465: PUSH
76466: LD_VAR 0 4
76470: ARRAY
76471: PPUSH
76472: LD_VAR 0 1
76476: PPUSH
76477: CALL_OW 255
76481: PPUSH
76482: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76486: LD_VAR 0 2
76490: PUSH
76491: LD_VAR 0 4
76495: ARRAY
76496: PPUSH
76497: CALL_OW 141
// end ;
76501: GO 76333
76503: POP
76504: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76505: LD_VAR 0 1
76509: PPUSH
76510: LD_EXP 109
76514: PUSH
76515: LD_VAR 0 5
76519: ARRAY
76520: PUSH
76521: LD_INT 0
76523: PLUS
76524: PPUSH
76525: CALL_OW 505
// end ;
76529: LD_VAR 0 3
76533: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76534: LD_INT 0
76536: PPUSH
76537: PPUSH
76538: PPUSH
76539: PPUSH
// if not hack in hackTanks then
76540: LD_VAR 0 1
76544: PUSH
76545: LD_EXP 108
76549: IN
76550: NOT
76551: IFFALSE 76555
// exit ;
76553: GO 76795
// index := GetElementIndex ( hackTanks , hack ) ;
76555: LD_ADDR_VAR 0 4
76559: PUSH
76560: LD_EXP 108
76564: PPUSH
76565: LD_VAR 0 1
76569: PPUSH
76570: CALL 19961 0 2
76574: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76575: LD_ADDR_VAR 0 3
76579: PUSH
76580: DOUBLE
76581: LD_EXP 109
76585: PUSH
76586: LD_VAR 0 4
76590: ARRAY
76591: INC
76592: ST_TO_ADDR
76593: LD_INT 1
76595: PUSH
76596: FOR_DOWNTO
76597: IFFALSE 76769
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76599: LD_ADDR_VAR 0 5
76603: PUSH
76604: LD_EXP 109
76608: PUSH
76609: LD_VAR 0 4
76613: ARRAY
76614: PUSH
76615: LD_VAR 0 3
76619: ARRAY
76620: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76621: LD_VAR 0 5
76625: PUSH
76626: LD_INT 1
76628: ARRAY
76629: PPUSH
76630: CALL_OW 302
76634: NOT
76635: PUSH
76636: LD_VAR 0 5
76640: PUSH
76641: LD_INT 1
76643: ARRAY
76644: PPUSH
76645: CALL_OW 255
76649: PUSH
76650: LD_VAR 0 1
76654: PPUSH
76655: CALL_OW 255
76659: NONEQUAL
76660: OR
76661: IFFALSE 76767
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76663: LD_VAR 0 5
76667: PUSH
76668: LD_INT 1
76670: ARRAY
76671: PPUSH
76672: CALL_OW 305
76676: PUSH
76677: LD_VAR 0 5
76681: PUSH
76682: LD_INT 1
76684: ARRAY
76685: PPUSH
76686: CALL_OW 255
76690: PUSH
76691: LD_VAR 0 1
76695: PPUSH
76696: CALL_OW 255
76700: EQUAL
76701: AND
76702: IFFALSE 76726
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76704: LD_VAR 0 5
76708: PUSH
76709: LD_INT 1
76711: ARRAY
76712: PPUSH
76713: LD_VAR 0 5
76717: PUSH
76718: LD_INT 2
76720: ARRAY
76721: PPUSH
76722: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76726: LD_ADDR_EXP 109
76730: PUSH
76731: LD_EXP 109
76735: PPUSH
76736: LD_VAR 0 4
76740: PPUSH
76741: LD_EXP 109
76745: PUSH
76746: LD_VAR 0 4
76750: ARRAY
76751: PPUSH
76752: LD_VAR 0 3
76756: PPUSH
76757: CALL_OW 3
76761: PPUSH
76762: CALL_OW 1
76766: ST_TO_ADDR
// end ; end ;
76767: GO 76596
76769: POP
76770: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76771: LD_VAR 0 1
76775: PPUSH
76776: LD_EXP 109
76780: PUSH
76781: LD_VAR 0 4
76785: ARRAY
76786: PUSH
76787: LD_INT 0
76789: PLUS
76790: PPUSH
76791: CALL_OW 505
// end ;
76795: LD_VAR 0 2
76799: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76800: LD_INT 0
76802: PPUSH
76803: PPUSH
76804: PPUSH
76805: PPUSH
// if not hack in hackTanks then
76806: LD_VAR 0 1
76810: PUSH
76811: LD_EXP 108
76815: IN
76816: NOT
76817: IFFALSE 76821
// exit ;
76819: GO 76906
// index := GetElementIndex ( hackTanks , hack ) ;
76821: LD_ADDR_VAR 0 5
76825: PUSH
76826: LD_EXP 108
76830: PPUSH
76831: LD_VAR 0 1
76835: PPUSH
76836: CALL 19961 0 2
76840: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76841: LD_ADDR_VAR 0 4
76845: PUSH
76846: DOUBLE
76847: LD_INT 1
76849: DEC
76850: ST_TO_ADDR
76851: LD_EXP 109
76855: PUSH
76856: LD_VAR 0 5
76860: ARRAY
76861: PUSH
76862: FOR_TO
76863: IFFALSE 76904
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76865: LD_EXP 109
76869: PUSH
76870: LD_VAR 0 5
76874: ARRAY
76875: PUSH
76876: LD_VAR 0 4
76880: ARRAY
76881: PUSH
76882: LD_INT 1
76884: ARRAY
76885: PUSH
76886: LD_VAR 0 2
76890: EQUAL
76891: IFFALSE 76902
// KillUnit ( vehicle ) ;
76893: LD_VAR 0 2
76897: PPUSH
76898: CALL_OW 66
76902: GO 76862
76904: POP
76905: POP
// end ;
76906: LD_VAR 0 3
76910: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76911: LD_EXP 113
76915: NOT
76916: IFFALSE 76951
76918: GO 76920
76920: DISABLE
// begin initMiner := true ;
76921: LD_ADDR_EXP 113
76925: PUSH
76926: LD_INT 1
76928: ST_TO_ADDR
// minersList := [ ] ;
76929: LD_ADDR_EXP 114
76933: PUSH
76934: EMPTY
76935: ST_TO_ADDR
// minerMinesList := [ ] ;
76936: LD_ADDR_EXP 115
76940: PUSH
76941: EMPTY
76942: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76943: LD_ADDR_EXP 116
76947: PUSH
76948: LD_INT 5
76950: ST_TO_ADDR
// end ;
76951: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76952: LD_EXP 113
76956: PUSH
76957: LD_INT 34
76959: PUSH
76960: LD_INT 81
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: PPUSH
76967: CALL_OW 69
76971: AND
76972: IFFALSE 77433
76974: GO 76976
76976: DISABLE
76977: LD_INT 0
76979: PPUSH
76980: PPUSH
76981: PPUSH
76982: PPUSH
// begin enable ;
76983: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76984: LD_ADDR_VAR 0 1
76988: PUSH
76989: LD_INT 34
76991: PUSH
76992: LD_INT 81
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PPUSH
76999: CALL_OW 69
77003: PUSH
77004: FOR_IN
77005: IFFALSE 77077
// begin if not i in minersList then
77007: LD_VAR 0 1
77011: PUSH
77012: LD_EXP 114
77016: IN
77017: NOT
77018: IFFALSE 77075
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
77020: LD_ADDR_EXP 114
77024: PUSH
77025: LD_EXP 114
77029: PPUSH
77030: LD_EXP 114
77034: PUSH
77035: LD_INT 1
77037: PLUS
77038: PPUSH
77039: LD_VAR 0 1
77043: PPUSH
77044: CALL_OW 1
77048: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77049: LD_ADDR_EXP 115
77053: PUSH
77054: LD_EXP 115
77058: PPUSH
77059: LD_EXP 115
77063: PUSH
77064: LD_INT 1
77066: PLUS
77067: PPUSH
77068: EMPTY
77069: PPUSH
77070: CALL_OW 1
77074: ST_TO_ADDR
// end end ;
77075: GO 77004
77077: POP
77078: POP
// for i := minerMinesList downto 1 do
77079: LD_ADDR_VAR 0 1
77083: PUSH
77084: DOUBLE
77085: LD_EXP 115
77089: INC
77090: ST_TO_ADDR
77091: LD_INT 1
77093: PUSH
77094: FOR_DOWNTO
77095: IFFALSE 77431
// begin if IsLive ( minersList [ i ] ) then
77097: LD_EXP 114
77101: PUSH
77102: LD_VAR 0 1
77106: ARRAY
77107: PPUSH
77108: CALL_OW 300
77112: IFFALSE 77140
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
77114: LD_EXP 114
77118: PUSH
77119: LD_VAR 0 1
77123: ARRAY
77124: PPUSH
77125: LD_EXP 115
77129: PUSH
77130: LD_VAR 0 1
77134: ARRAY
77135: PPUSH
77136: CALL_OW 505
// if not minerMinesList [ i ] then
77140: LD_EXP 115
77144: PUSH
77145: LD_VAR 0 1
77149: ARRAY
77150: NOT
77151: IFFALSE 77155
// continue ;
77153: GO 77094
// for j := minerMinesList [ i ] downto 1 do
77155: LD_ADDR_VAR 0 2
77159: PUSH
77160: DOUBLE
77161: LD_EXP 115
77165: PUSH
77166: LD_VAR 0 1
77170: ARRAY
77171: INC
77172: ST_TO_ADDR
77173: LD_INT 1
77175: PUSH
77176: FOR_DOWNTO
77177: IFFALSE 77427
// begin side := GetSide ( minersList [ i ] ) ;
77179: LD_ADDR_VAR 0 3
77183: PUSH
77184: LD_EXP 114
77188: PUSH
77189: LD_VAR 0 1
77193: ARRAY
77194: PPUSH
77195: CALL_OW 255
77199: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
77200: LD_ADDR_VAR 0 4
77204: PUSH
77205: LD_EXP 115
77209: PUSH
77210: LD_VAR 0 1
77214: ARRAY
77215: PUSH
77216: LD_VAR 0 2
77220: ARRAY
77221: PUSH
77222: LD_INT 1
77224: ARRAY
77225: PPUSH
77226: LD_EXP 115
77230: PUSH
77231: LD_VAR 0 1
77235: ARRAY
77236: PUSH
77237: LD_VAR 0 2
77241: ARRAY
77242: PUSH
77243: LD_INT 2
77245: ARRAY
77246: PPUSH
77247: CALL_OW 428
77251: ST_TO_ADDR
// if not tmp then
77252: LD_VAR 0 4
77256: NOT
77257: IFFALSE 77261
// continue ;
77259: GO 77176
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
77261: LD_VAR 0 4
77265: PUSH
77266: LD_INT 81
77268: PUSH
77269: LD_VAR 0 3
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: PPUSH
77278: CALL_OW 69
77282: IN
77283: PUSH
77284: LD_EXP 115
77288: PUSH
77289: LD_VAR 0 1
77293: ARRAY
77294: PUSH
77295: LD_VAR 0 2
77299: ARRAY
77300: PUSH
77301: LD_INT 1
77303: ARRAY
77304: PPUSH
77305: LD_EXP 115
77309: PUSH
77310: LD_VAR 0 1
77314: ARRAY
77315: PUSH
77316: LD_VAR 0 2
77320: ARRAY
77321: PUSH
77322: LD_INT 2
77324: ARRAY
77325: PPUSH
77326: CALL_OW 458
77330: AND
77331: IFFALSE 77425
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77333: LD_EXP 115
77337: PUSH
77338: LD_VAR 0 1
77342: ARRAY
77343: PUSH
77344: LD_VAR 0 2
77348: ARRAY
77349: PUSH
77350: LD_INT 1
77352: ARRAY
77353: PPUSH
77354: LD_EXP 115
77358: PUSH
77359: LD_VAR 0 1
77363: ARRAY
77364: PUSH
77365: LD_VAR 0 2
77369: ARRAY
77370: PUSH
77371: LD_INT 2
77373: ARRAY
77374: PPUSH
77375: LD_VAR 0 3
77379: PPUSH
77380: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77384: LD_ADDR_EXP 115
77388: PUSH
77389: LD_EXP 115
77393: PPUSH
77394: LD_VAR 0 1
77398: PPUSH
77399: LD_EXP 115
77403: PUSH
77404: LD_VAR 0 1
77408: ARRAY
77409: PPUSH
77410: LD_VAR 0 2
77414: PPUSH
77415: CALL_OW 3
77419: PPUSH
77420: CALL_OW 1
77424: ST_TO_ADDR
// end ; end ;
77425: GO 77176
77427: POP
77428: POP
// end ;
77429: GO 77094
77431: POP
77432: POP
// end ;
77433: PPOPN 4
77435: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77436: LD_INT 0
77438: PPUSH
77439: PPUSH
// result := false ;
77440: LD_ADDR_VAR 0 4
77444: PUSH
77445: LD_INT 0
77447: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77448: LD_VAR 0 1
77452: PPUSH
77453: CALL_OW 264
77457: PUSH
77458: LD_INT 81
77460: EQUAL
77461: NOT
77462: IFFALSE 77466
// exit ;
77464: GO 77706
// index := GetElementIndex ( minersList , unit ) ;
77466: LD_ADDR_VAR 0 5
77470: PUSH
77471: LD_EXP 114
77475: PPUSH
77476: LD_VAR 0 1
77480: PPUSH
77481: CALL 19961 0 2
77485: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77486: LD_EXP 115
77490: PUSH
77491: LD_VAR 0 5
77495: ARRAY
77496: PUSH
77497: LD_EXP 116
77501: GREATEREQUAL
77502: IFFALSE 77506
// exit ;
77504: GO 77706
// ComMoveXY ( unit , x , y ) ;
77506: LD_VAR 0 1
77510: PPUSH
77511: LD_VAR 0 2
77515: PPUSH
77516: LD_VAR 0 3
77520: PPUSH
77521: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77525: LD_INT 35
77527: PPUSH
77528: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77532: LD_VAR 0 1
77536: PPUSH
77537: LD_VAR 0 2
77541: PPUSH
77542: LD_VAR 0 3
77546: PPUSH
77547: CALL 51702 0 3
77551: NOT
77552: PUSH
77553: LD_VAR 0 1
77557: PPUSH
77558: CALL_OW 314
77562: AND
77563: IFFALSE 77567
// exit ;
77565: GO 77706
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77567: LD_VAR 0 2
77571: PPUSH
77572: LD_VAR 0 3
77576: PPUSH
77577: CALL_OW 428
77581: PUSH
77582: LD_VAR 0 1
77586: EQUAL
77587: PUSH
77588: LD_VAR 0 1
77592: PPUSH
77593: CALL_OW 314
77597: NOT
77598: AND
77599: IFFALSE 77525
// PlaySoundXY ( x , y , PlantMine ) ;
77601: LD_VAR 0 2
77605: PPUSH
77606: LD_VAR 0 3
77610: PPUSH
77611: LD_STRING PlantMine
77613: PPUSH
77614: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77618: LD_VAR 0 2
77622: PPUSH
77623: LD_VAR 0 3
77627: PPUSH
77628: LD_VAR 0 1
77632: PPUSH
77633: CALL_OW 255
77637: PPUSH
77638: LD_INT 0
77640: PPUSH
77641: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77645: LD_ADDR_EXP 115
77649: PUSH
77650: LD_EXP 115
77654: PPUSH
77655: LD_VAR 0 5
77659: PUSH
77660: LD_EXP 115
77664: PUSH
77665: LD_VAR 0 5
77669: ARRAY
77670: PUSH
77671: LD_INT 1
77673: PLUS
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: PPUSH
77679: LD_VAR 0 2
77683: PUSH
77684: LD_VAR 0 3
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PPUSH
77693: CALL 20176 0 3
77697: ST_TO_ADDR
// result := true ;
77698: LD_ADDR_VAR 0 4
77702: PUSH
77703: LD_INT 1
77705: ST_TO_ADDR
// end ;
77706: LD_VAR 0 4
77710: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77711: LD_INT 0
77713: PPUSH
77714: PPUSH
77715: PPUSH
// if not unit in minersList then
77716: LD_VAR 0 1
77720: PUSH
77721: LD_EXP 114
77725: IN
77726: NOT
77727: IFFALSE 77731
// exit ;
77729: GO 78123
// index := GetElementIndex ( minersList , unit ) ;
77731: LD_ADDR_VAR 0 6
77735: PUSH
77736: LD_EXP 114
77740: PPUSH
77741: LD_VAR 0 1
77745: PPUSH
77746: CALL 19961 0 2
77750: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77751: LD_ADDR_VAR 0 5
77755: PUSH
77756: DOUBLE
77757: LD_EXP 115
77761: PUSH
77762: LD_VAR 0 6
77766: ARRAY
77767: INC
77768: ST_TO_ADDR
77769: LD_INT 1
77771: PUSH
77772: FOR_DOWNTO
77773: IFFALSE 77934
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77775: LD_EXP 115
77779: PUSH
77780: LD_VAR 0 6
77784: ARRAY
77785: PUSH
77786: LD_VAR 0 5
77790: ARRAY
77791: PUSH
77792: LD_INT 1
77794: ARRAY
77795: PUSH
77796: LD_VAR 0 2
77800: EQUAL
77801: PUSH
77802: LD_EXP 115
77806: PUSH
77807: LD_VAR 0 6
77811: ARRAY
77812: PUSH
77813: LD_VAR 0 5
77817: ARRAY
77818: PUSH
77819: LD_INT 2
77821: ARRAY
77822: PUSH
77823: LD_VAR 0 3
77827: EQUAL
77828: AND
77829: IFFALSE 77932
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77831: LD_EXP 115
77835: PUSH
77836: LD_VAR 0 6
77840: ARRAY
77841: PUSH
77842: LD_VAR 0 5
77846: ARRAY
77847: PUSH
77848: LD_INT 1
77850: ARRAY
77851: PPUSH
77852: LD_EXP 115
77856: PUSH
77857: LD_VAR 0 6
77861: ARRAY
77862: PUSH
77863: LD_VAR 0 5
77867: ARRAY
77868: PUSH
77869: LD_INT 2
77871: ARRAY
77872: PPUSH
77873: LD_VAR 0 1
77877: PPUSH
77878: CALL_OW 255
77882: PPUSH
77883: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77887: LD_ADDR_EXP 115
77891: PUSH
77892: LD_EXP 115
77896: PPUSH
77897: LD_VAR 0 6
77901: PPUSH
77902: LD_EXP 115
77906: PUSH
77907: LD_VAR 0 6
77911: ARRAY
77912: PPUSH
77913: LD_VAR 0 5
77917: PPUSH
77918: CALL_OW 3
77922: PPUSH
77923: CALL_OW 1
77927: ST_TO_ADDR
// exit ;
77928: POP
77929: POP
77930: GO 78123
// end ; end ;
77932: GO 77772
77934: POP
77935: POP
// for i := minerMinesList [ index ] downto 1 do
77936: LD_ADDR_VAR 0 5
77940: PUSH
77941: DOUBLE
77942: LD_EXP 115
77946: PUSH
77947: LD_VAR 0 6
77951: ARRAY
77952: INC
77953: ST_TO_ADDR
77954: LD_INT 1
77956: PUSH
77957: FOR_DOWNTO
77958: IFFALSE 78121
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77960: LD_EXP 115
77964: PUSH
77965: LD_VAR 0 6
77969: ARRAY
77970: PUSH
77971: LD_VAR 0 5
77975: ARRAY
77976: PUSH
77977: LD_INT 1
77979: ARRAY
77980: PPUSH
77981: LD_EXP 115
77985: PUSH
77986: LD_VAR 0 6
77990: ARRAY
77991: PUSH
77992: LD_VAR 0 5
77996: ARRAY
77997: PUSH
77998: LD_INT 2
78000: ARRAY
78001: PPUSH
78002: LD_VAR 0 2
78006: PPUSH
78007: LD_VAR 0 3
78011: PPUSH
78012: CALL_OW 298
78016: PUSH
78017: LD_INT 6
78019: LESS
78020: IFFALSE 78119
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78022: LD_EXP 115
78026: PUSH
78027: LD_VAR 0 6
78031: ARRAY
78032: PUSH
78033: LD_VAR 0 5
78037: ARRAY
78038: PUSH
78039: LD_INT 1
78041: ARRAY
78042: PPUSH
78043: LD_EXP 115
78047: PUSH
78048: LD_VAR 0 6
78052: ARRAY
78053: PUSH
78054: LD_VAR 0 5
78058: ARRAY
78059: PUSH
78060: LD_INT 2
78062: ARRAY
78063: PPUSH
78064: LD_VAR 0 1
78068: PPUSH
78069: CALL_OW 255
78073: PPUSH
78074: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78078: LD_ADDR_EXP 115
78082: PUSH
78083: LD_EXP 115
78087: PPUSH
78088: LD_VAR 0 6
78092: PPUSH
78093: LD_EXP 115
78097: PUSH
78098: LD_VAR 0 6
78102: ARRAY
78103: PPUSH
78104: LD_VAR 0 5
78108: PPUSH
78109: CALL_OW 3
78113: PPUSH
78114: CALL_OW 1
78118: ST_TO_ADDR
// end ; end ;
78119: GO 77957
78121: POP
78122: POP
// end ;
78123: LD_VAR 0 4
78127: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
78128: LD_INT 0
78130: PPUSH
78131: PPUSH
78132: PPUSH
78133: PPUSH
78134: PPUSH
78135: PPUSH
78136: PPUSH
78137: PPUSH
78138: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
78139: LD_VAR 0 1
78143: PPUSH
78144: CALL_OW 264
78148: PUSH
78149: LD_INT 81
78151: EQUAL
78152: NOT
78153: PUSH
78154: LD_VAR 0 1
78158: PUSH
78159: LD_EXP 114
78163: IN
78164: NOT
78165: OR
78166: IFFALSE 78170
// exit ;
78168: GO 78492
// index := GetElementIndex ( minersList , unit ) ;
78170: LD_ADDR_VAR 0 6
78174: PUSH
78175: LD_EXP 114
78179: PPUSH
78180: LD_VAR 0 1
78184: PPUSH
78185: CALL 19961 0 2
78189: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
78190: LD_ADDR_VAR 0 8
78194: PUSH
78195: LD_EXP 116
78199: PUSH
78200: LD_EXP 115
78204: PUSH
78205: LD_VAR 0 6
78209: ARRAY
78210: MINUS
78211: ST_TO_ADDR
// if not minesFreeAmount then
78212: LD_VAR 0 8
78216: NOT
78217: IFFALSE 78221
// exit ;
78219: GO 78492
// tmp := [ ] ;
78221: LD_ADDR_VAR 0 7
78225: PUSH
78226: EMPTY
78227: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
78228: LD_ADDR_VAR 0 5
78232: PUSH
78233: DOUBLE
78234: LD_INT 1
78236: DEC
78237: ST_TO_ADDR
78238: LD_VAR 0 8
78242: PUSH
78243: FOR_TO
78244: IFFALSE 78439
// begin _d := rand ( 0 , 5 ) ;
78246: LD_ADDR_VAR 0 11
78250: PUSH
78251: LD_INT 0
78253: PPUSH
78254: LD_INT 5
78256: PPUSH
78257: CALL_OW 12
78261: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
78262: LD_ADDR_VAR 0 12
78266: PUSH
78267: LD_INT 2
78269: PPUSH
78270: LD_INT 6
78272: PPUSH
78273: CALL_OW 12
78277: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
78278: LD_ADDR_VAR 0 9
78282: PUSH
78283: LD_VAR 0 2
78287: PPUSH
78288: LD_VAR 0 11
78292: PPUSH
78293: LD_VAR 0 12
78297: PPUSH
78298: CALL_OW 272
78302: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78303: LD_ADDR_VAR 0 10
78307: PUSH
78308: LD_VAR 0 3
78312: PPUSH
78313: LD_VAR 0 11
78317: PPUSH
78318: LD_VAR 0 12
78322: PPUSH
78323: CALL_OW 273
78327: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78328: LD_VAR 0 9
78332: PPUSH
78333: LD_VAR 0 10
78337: PPUSH
78338: CALL_OW 488
78342: PUSH
78343: LD_VAR 0 9
78347: PUSH
78348: LD_VAR 0 10
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_VAR 0 7
78361: IN
78362: NOT
78363: AND
78364: PUSH
78365: LD_VAR 0 9
78369: PPUSH
78370: LD_VAR 0 10
78374: PPUSH
78375: CALL_OW 458
78379: NOT
78380: AND
78381: IFFALSE 78423
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78383: LD_ADDR_VAR 0 7
78387: PUSH
78388: LD_VAR 0 7
78392: PPUSH
78393: LD_VAR 0 7
78397: PUSH
78398: LD_INT 1
78400: PLUS
78401: PPUSH
78402: LD_VAR 0 9
78406: PUSH
78407: LD_VAR 0 10
78411: PUSH
78412: EMPTY
78413: LIST
78414: LIST
78415: PPUSH
78416: CALL_OW 1
78420: ST_TO_ADDR
78421: GO 78437
// i := i - 1 ;
78423: LD_ADDR_VAR 0 5
78427: PUSH
78428: LD_VAR 0 5
78432: PUSH
78433: LD_INT 1
78435: MINUS
78436: ST_TO_ADDR
// end ;
78437: GO 78243
78439: POP
78440: POP
// for i in tmp do
78441: LD_ADDR_VAR 0 5
78445: PUSH
78446: LD_VAR 0 7
78450: PUSH
78451: FOR_IN
78452: IFFALSE 78490
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78454: LD_VAR 0 1
78458: PPUSH
78459: LD_VAR 0 5
78463: PUSH
78464: LD_INT 1
78466: ARRAY
78467: PPUSH
78468: LD_VAR 0 5
78472: PUSH
78473: LD_INT 2
78475: ARRAY
78476: PPUSH
78477: CALL 77436 0 3
78481: NOT
78482: IFFALSE 78488
// exit ;
78484: POP
78485: POP
78486: GO 78492
78488: GO 78451
78490: POP
78491: POP
// end ;
78492: LD_VAR 0 4
78496: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
78497: LD_INT 0
78499: PPUSH
78500: PPUSH
78501: PPUSH
78502: PPUSH
78503: PPUSH
78504: PPUSH
78505: PPUSH
78506: PPUSH
78507: PPUSH
// if GetClass ( unit ) <> class_sniper then
78508: LD_VAR 0 1
78512: PPUSH
78513: CALL_OW 257
78517: PUSH
78518: LD_INT 5
78520: NONEQUAL
78521: IFFALSE 78525
// exit ;
78523: GO 78991
// dist := 8 ;
78525: LD_ADDR_VAR 0 5
78529: PUSH
78530: LD_INT 8
78532: ST_TO_ADDR
// viewRange := 12 ;
78533: LD_ADDR_VAR 0 8
78537: PUSH
78538: LD_INT 12
78540: ST_TO_ADDR
// side := GetSide ( unit ) ;
78541: LD_ADDR_VAR 0 6
78545: PUSH
78546: LD_VAR 0 1
78550: PPUSH
78551: CALL_OW 255
78555: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78556: LD_INT 61
78558: PPUSH
78559: LD_VAR 0 6
78563: PPUSH
78564: CALL_OW 321
78568: PUSH
78569: LD_INT 2
78571: EQUAL
78572: IFFALSE 78582
// viewRange := 16 ;
78574: LD_ADDR_VAR 0 8
78578: PUSH
78579: LD_INT 16
78581: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78582: LD_VAR 0 1
78586: PPUSH
78587: LD_VAR 0 2
78591: PPUSH
78592: LD_VAR 0 3
78596: PPUSH
78597: CALL_OW 297
78601: PUSH
78602: LD_VAR 0 5
78606: GREATER
78607: IFFALSE 78686
// begin ComMoveXY ( unit , x , y ) ;
78609: LD_VAR 0 1
78613: PPUSH
78614: LD_VAR 0 2
78618: PPUSH
78619: LD_VAR 0 3
78623: PPUSH
78624: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78628: LD_INT 35
78630: PPUSH
78631: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78635: LD_VAR 0 1
78639: PPUSH
78640: LD_VAR 0 2
78644: PPUSH
78645: LD_VAR 0 3
78649: PPUSH
78650: CALL 51702 0 3
78654: NOT
78655: IFFALSE 78659
// exit ;
78657: GO 78991
// until GetDistUnitXY ( unit , x , y ) < dist ;
78659: LD_VAR 0 1
78663: PPUSH
78664: LD_VAR 0 2
78668: PPUSH
78669: LD_VAR 0 3
78673: PPUSH
78674: CALL_OW 297
78678: PUSH
78679: LD_VAR 0 5
78683: LESS
78684: IFFALSE 78628
// end ; ComTurnXY ( unit , x , y ) ;
78686: LD_VAR 0 1
78690: PPUSH
78691: LD_VAR 0 2
78695: PPUSH
78696: LD_VAR 0 3
78700: PPUSH
78701: CALL_OW 118
// repeat if Multiplayer then
78705: LD_OWVAR 4
78709: IFFALSE 78720
// wait ( 35 ) else
78711: LD_INT 35
78713: PPUSH
78714: CALL_OW 67
78718: GO 78727
// wait ( 5 ) ;
78720: LD_INT 5
78722: PPUSH
78723: CALL_OW 67
// _d := GetDir ( unit ) ;
78727: LD_ADDR_VAR 0 11
78731: PUSH
78732: LD_VAR 0 1
78736: PPUSH
78737: CALL_OW 254
78741: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
78742: LD_ADDR_VAR 0 7
78746: PUSH
78747: LD_VAR 0 1
78751: PPUSH
78752: CALL_OW 250
78756: PPUSH
78757: LD_VAR 0 1
78761: PPUSH
78762: CALL_OW 251
78766: PPUSH
78767: LD_VAR 0 2
78771: PPUSH
78772: LD_VAR 0 3
78776: PPUSH
78777: CALL 54310 0 4
78781: ST_TO_ADDR
// until dir = _d ;
78782: LD_VAR 0 7
78786: PUSH
78787: LD_VAR 0 11
78791: EQUAL
78792: IFFALSE 78705
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
78794: LD_ADDR_VAR 0 9
78798: PUSH
78799: LD_VAR 0 1
78803: PPUSH
78804: CALL_OW 250
78808: PPUSH
78809: LD_VAR 0 7
78813: PPUSH
78814: LD_VAR 0 5
78818: PPUSH
78819: CALL_OW 272
78823: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
78824: LD_ADDR_VAR 0 10
78828: PUSH
78829: LD_VAR 0 1
78833: PPUSH
78834: CALL_OW 251
78838: PPUSH
78839: LD_VAR 0 7
78843: PPUSH
78844: LD_VAR 0 5
78848: PPUSH
78849: CALL_OW 273
78853: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78854: LD_VAR 0 9
78858: PPUSH
78859: LD_VAR 0 10
78863: PPUSH
78864: CALL_OW 488
78868: NOT
78869: IFFALSE 78873
// exit ;
78871: GO 78991
// ComAnimCustom ( unit , 1 ) ;
78873: LD_VAR 0 1
78877: PPUSH
78878: LD_INT 1
78880: PPUSH
78881: CALL_OW 592
// p := 0 ;
78885: LD_ADDR_VAR 0 12
78889: PUSH
78890: LD_INT 0
78892: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78893: LD_VAR 0 9
78897: PPUSH
78898: LD_VAR 0 10
78902: PPUSH
78903: LD_VAR 0 6
78907: PPUSH
78908: LD_VAR 0 8
78912: PPUSH
78913: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
78917: LD_INT 35
78919: PPUSH
78920: CALL_OW 67
// p := Inc ( p ) ;
78924: LD_ADDR_VAR 0 12
78928: PUSH
78929: LD_VAR 0 12
78933: PPUSH
78934: CALL 54266 0 1
78938: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
78939: LD_VAR 0 12
78943: PUSH
78944: LD_INT 3
78946: EQUAL
78947: PUSH
78948: LD_VAR 0 1
78952: PPUSH
78953: CALL_OW 302
78957: NOT
78958: OR
78959: PUSH
78960: LD_VAR 0 1
78964: PPUSH
78965: CALL_OW 301
78969: OR
78970: IFFALSE 78917
// RemoveSeeing ( _x , _y , side ) ;
78972: LD_VAR 0 9
78976: PPUSH
78977: LD_VAR 0 10
78981: PPUSH
78982: LD_VAR 0 6
78986: PPUSH
78987: CALL_OW 331
// end ; end_of_file
78991: LD_VAR 0 4
78995: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78996: LD_VAR 0 1
79000: PPUSH
79001: LD_VAR 0 2
79005: PPUSH
79006: LD_VAR 0 3
79010: PPUSH
79011: LD_VAR 0 4
79015: PPUSH
79016: LD_VAR 0 5
79020: PPUSH
79021: LD_VAR 0 6
79025: PPUSH
79026: CALL 58161 0 6
// end ;
79030: PPOPN 6
79032: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79033: LD_INT 0
79035: PPUSH
// begin if not units then
79036: LD_VAR 0 1
79040: NOT
79041: IFFALSE 79045
// exit ;
79043: GO 79045
// end ;
79045: PPOPN 7
79047: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79048: CALL 58048 0 0
// end ; end_of_file
79052: PPOPN 1
79054: END
