// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5912 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7279 0 1
  44: PPUSH
  45: CALL 135 0 1
// Multiplayer_Start ;
  49: CALL 9356 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9472 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: IFFALSE 118
 111: PUSH
 112: LD_OWVAR 48
 116: NOT
 117: AND
 118: IFFALSE 134
 120: GO 122
 122: DISABLE
// begin enable ;
 123: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 124: LD_ADDR_OWVAR 47
 128: PUSH
 129: CALL 10104 0 0
 133: ST_TO_ADDR
// end ; end_of_file
 134: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 135: LD_INT 0
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
 144: PPUSH
 145: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 146: LD_ADDR_EXP 5
 150: PUSH
 151: LD_VAR 0 1
 155: PPUSH
 156: LD_INT 2
 158: PPUSH
 159: LD_INT 1
 161: PPUSH
 162: CALL 16185 0 3
 166: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 167: LD_ADDR_EXP 6
 171: PUSH
 172: LD_INT 13
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: LD_INT 27
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 13
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 13
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 28
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 13
 228: PUSH
 229: LD_INT 1
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 25
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: LD_INT 13
 246: PUSH
 247: LD_INT 1
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 27
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// arBuildings := [ ] ;
 269: LD_ADDR_EXP 7
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// arVehicles := [ ] ;
 276: LD_ADDR_EXP 8
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 283: LD_ADDR_EXP 9
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// arRVehicles := [ ] ;
 290: LD_ADDR_EXP 16
 294: PUSH
 295: EMPTY
 296: ST_TO_ADDR
// arDrivers := [ ] ;
 297: LD_ADDR_EXP 10
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 304: LD_ADDR_EXP 12
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// arMinesList := [ ] ;
 312: LD_ADDR_EXP 13
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 319: LD_ADDR_EXP 11
 323: PUSH
 324: LD_INT 8
 326: PUSH
 327: LD_INT 11
 329: PUSH
 330: LD_INT 12
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PUSH
 338: LD_OWVAR 67
 342: ARRAY
 343: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 3
 351: PPUSH
 352: CALL 59359 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 356: LD_INT 4
 358: PPUSH
 359: LD_INT 24
 361: PUSH
 362: LD_INT 36
 364: PUSH
 365: LD_INT 48
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_OWVAR 67
 377: ARRAY
 378: PPUSH
 379: CALL 987 0 2
// PlaceMines ( extraMinefield , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 383: LD_INT 24
 385: PPUSH
 386: LD_INT 6
 388: PUSH
 389: LD_INT 8
 391: PUSH
 392: LD_INT 10
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: PPUSH
 406: CALL 987 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 410: LD_ADDR_VAR 0 8
 414: PUSH
 415: LD_INT 3
 417: PUSH
 418: LD_INT 5
 420: PUSH
 421: LD_INT 7
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: LIST
 428: PUSH
 429: LD_OWVAR 67
 433: ARRAY
 434: ST_TO_ADDR
// uc_side := side ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_VAR 0 1
 444: ST_TO_ADDR
// uc_nation := 2 ;
 445: LD_ADDR_OWVAR 21
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 8000 , 1200 , 400 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 453: LD_ADDR_EXP 14
 457: PUSH
 458: LD_INT 2
 460: PPUSH
 461: LD_INT 1
 463: PPUSH
 464: LD_STRING 
 466: PPUSH
 467: LD_VAR 0 8
 471: PPUSH
 472: LD_INT 8000
 474: PUSH
 475: LD_INT 1200
 477: PUSH
 478: LD_INT 400
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PPUSH
 486: LD_INT 10
 488: PUSH
 489: LD_INT 11
 491: PUSH
 492: LD_INT 12
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: PUSH
 500: LD_OWVAR 67
 504: ARRAY
 505: PUSH
 506: LD_INT 4
 508: PUSH
 509: LD_INT 6
 511: PUSH
 512: LD_INT 3
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: PPUSH
 521: CALL 24895 0 6
 525: ST_TO_ADDR
// arForceTmp := [ ] ;
 526: LD_ADDR_EXP 15
 530: PUSH
 531: EMPTY
 532: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_INT 22
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 30
 552: PUSH
 553: LD_INT 31
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 95
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 58
 579: PUSH
 580: EMPTY
 581: LIST
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: PPUSH
 589: CALL_OW 69
 593: PUSH
 594: FOR_IN
 595: IFFALSE 724
// begin d := GetDir ( i ) ;
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: LD_VAR 0 3
 606: PPUSH
 607: CALL_OW 254
 611: ST_TO_ADDR
// if d < 3 then
 612: LD_VAR 0 4
 616: PUSH
 617: LD_INT 3
 619: LESS
 620: IFFALSE 638
// d := d + 3 else
 622: LD_ADDR_VAR 0 4
 626: PUSH
 627: LD_VAR 0 4
 631: PUSH
 632: LD_INT 3
 634: PLUS
 635: ST_TO_ADDR
 636: GO 652
// d := d - 3 ;
 638: LD_ADDR_VAR 0 4
 642: PUSH
 643: LD_VAR 0 4
 647: PUSH
 648: LD_INT 3
 650: MINUS
 651: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_VAR 0 8
 659: PPUSH
 660: CALL_OW 381
// un := CreateHuman ;
 664: LD_ADDR_VAR 0 6
 668: PUSH
 669: CALL_OW 44
 673: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 674: LD_ADDR_EXP 15
 678: PUSH
 679: LD_EXP 15
 683: PPUSH
 684: LD_VAR 0 6
 688: PPUSH
 689: CALL 54238 0 2
 693: ST_TO_ADDR
// SetDir ( un , d ) ;
 694: LD_VAR 0 6
 698: PPUSH
 699: LD_VAR 0 4
 703: PPUSH
 704: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 708: LD_VAR 0 6
 712: PPUSH
 713: LD_VAR 0 3
 717: PPUSH
 718: CALL_OW 52
// end ;
 722: GO 594
 724: POP
 725: POP
// for i := 1 to 2 do
 726: LD_ADDR_VAR 0 3
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_INT 2
 738: PUSH
 739: FOR_TO
 740: IFFALSE 824
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 742: LD_INT 14
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_INT 31
 753: PPUSH
 754: LD_INT 100
 756: PPUSH
 757: CALL 21058 0 5
// un := CreateVehicle ;
 761: LD_ADDR_VAR 0 6
 765: PUSH
 766: CALL_OW 45
 770: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 771: LD_VAR 0 6
 775: PPUSH
 776: LD_INT 102
 778: PPUSH
 779: LD_INT 31
 781: PPUSH
 782: LD_INT 6
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 792: LD_INT 0
 794: PPUSH
 795: LD_VAR 0 8
 799: PUSH
 800: LD_INT 2
 802: PLUS
 803: PPUSH
 804: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 808: CALL_OW 44
 812: PPUSH
 813: LD_VAR 0 6
 817: PPUSH
 818: CALL_OW 52
// end ;
 822: GO 739
 824: POP
 825: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_INT 22
 833: PUSH
 834: LD_VAR 0 1
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 21
 845: PUSH
 846: LD_INT 3
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: CALL_OW 69
 861: PUSH
 862: FOR_IN
 863: IFFALSE 896
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 865: LD_VAR 0 3
 869: PPUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 5
 875: PUSH
 876: LD_INT 7
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_OWVAR 67
 888: ARRAY
 889: PPUSH
 890: CALL_OW 241
 894: GO 862
 896: POP
 897: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 898: LD_ADDR_VAR 0 3
 902: PUSH
 903: LD_INT 22
 905: PUSH
 906: LD_VAR 0 1
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 30
 917: PUSH
 918: LD_INT 32
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 69
 933: PUSH
 934: FOR_IN
 935: IFFALSE 980
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 937: LD_VAR 0 3
 941: PPUSH
 942: LD_INT 27
 944: PUSH
 945: LD_INT 25
 947: PUSH
 948: LD_INT 28
 950: PUSH
 951: LD_INT 27
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: PUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 4
 967: MOD
 968: PUSH
 969: LD_INT 1
 971: PLUS
 972: ARRAY
 973: PPUSH
 974: CALL_OW 431
 978: GO 934
 980: POP
 981: POP
// end ;
 982: LD_VAR 0 2
 986: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
 991: PPUSH
 992: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 993: LD_ADDR_VAR 0 5
 997: PUSH
 998: LD_VAR 0 1
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL_OW 517
1010: ST_TO_ADDR
// if not tmp then
1011: LD_VAR 0 5
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1262
// for i := 1 to n do
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: DOUBLE
1026: LD_INT 1
1028: DEC
1029: ST_TO_ADDR
1030: LD_VAR 0 2
1034: PUSH
1035: FOR_TO
1036: IFFALSE 1260
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1038: LD_ADDR_VAR 0 6
1042: PUSH
1043: LD_INT 1
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: CALL_OW 12
1059: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1060: LD_VAR 0 5
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PUSH
1069: LD_VAR 0 6
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 5
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PUSH
1084: LD_VAR 0 6
1088: ARRAY
1089: PPUSH
1090: LD_EXP 3
1094: PUSH
1095: LD_INT 1
1097: ARRAY
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1106: LD_ADDR_EXP 13
1110: PUSH
1111: LD_EXP 13
1115: PPUSH
1116: LD_EXP 13
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: PPUSH
1125: LD_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PUSH
1134: LD_VAR 0 6
1138: ARRAY
1139: PPUSH
1140: CALL_OW 2
1144: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1145: LD_ADDR_EXP 13
1149: PUSH
1150: LD_EXP 13
1154: PPUSH
1155: LD_EXP 13
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: LD_VAR 0 5
1168: PUSH
1169: LD_INT 2
1171: ARRAY
1172: PUSH
1173: LD_VAR 0 6
1177: ARRAY
1178: PPUSH
1179: CALL_OW 2
1183: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1184: LD_ADDR_VAR 0 5
1188: PUSH
1189: LD_VAR 0 5
1193: PPUSH
1194: LD_INT 1
1196: PPUSH
1197: LD_VAR 0 5
1201: PUSH
1202: LD_INT 1
1204: ARRAY
1205: PPUSH
1206: LD_VAR 0 6
1210: PPUSH
1211: CALL_OW 3
1215: PPUSH
1216: CALL_OW 1
1220: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_VAR 0 5
1230: PPUSH
1231: LD_INT 2
1233: PPUSH
1234: LD_VAR 0 5
1238: PUSH
1239: LD_INT 2
1241: ARRAY
1242: PPUSH
1243: LD_VAR 0 6
1247: PPUSH
1248: CALL_OW 3
1252: PPUSH
1253: CALL_OW 1
1257: ST_TO_ADDR
// end ;
1258: GO 1035
1260: POP
1261: POP
// end ;
1262: LD_VAR 0 3
1266: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1267: LD_INT 0
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
1299: PPUSH
// enable ;
1300: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1301: LD_ADDR_VAR 0 11
1305: PUSH
1306: LD_INT 81
1308: PUSH
1309: LD_VAR 0 1
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PPUSH
1318: CALL_OW 69
1322: ST_TO_ADDR
// if tmp then
1323: LD_VAR 0 11
1327: IFFALSE 1348
// enemySide := GetSide ( tmp [ 1 ] ) ;
1329: LD_ADDR_VAR 0 38
1333: PUSH
1334: LD_VAR 0 11
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: CALL_OW 255
1347: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1348: LD_ADDR_VAR 0 26
1352: PUSH
1353: LD_VAR 0 3
1357: PPUSH
1358: LD_INT 81
1360: PUSH
1361: LD_VAR 0 1
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: PPUSH
1370: CALL_OW 70
1374: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1375: LD_ADDR_VAR 0 27
1379: PUSH
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 81
1387: PUSH
1388: LD_VAR 0 1
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1402: LD_ADDR_VAR 0 13
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_VAR 0 1
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 50
1421: PUSH
1422: EMPTY
1423: LIST
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 31
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PPUSH
1440: CALL_OW 69
1444: ST_TO_ADDR
// if ct then
1445: LD_VAR 0 13
1449: IFFALSE 1540
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1451: LD_ADDR_VAR 0 15
1455: PUSH
1456: LD_INT 22
1458: PUSH
1459: LD_VAR 0 1
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 3
1470: PUSH
1471: LD_INT 61
1473: PUSH
1474: EMPTY
1475: LIST
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 50
1483: PUSH
1484: EMPTY
1485: LIST
1486: PUSH
1487: LD_INT 33
1489: PUSH
1490: LD_INT 2
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: PPUSH
1503: CALL_OW 69
1507: ST_TO_ADDR
// if veh then
1508: LD_VAR 0 15
1512: IFFALSE 1540
// for i in veh do
1514: LD_ADDR_VAR 0 9
1518: PUSH
1519: LD_VAR 0 15
1523: PUSH
1524: FOR_IN
1525: IFFALSE 1538
// Connect ( i ) ;
1527: LD_VAR 0 9
1531: PPUSH
1532: CALL 24540 0 1
1536: GO 1524
1538: POP
1539: POP
// end ; vehicles := arVehicles ;
1540: LD_ADDR_VAR 0 30
1544: PUSH
1545: LD_EXP 8
1549: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1550: LD_ADDR_VAR 0 36
1554: PUSH
1555: LD_VAR 0 3
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_VAR 0 1
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 2
1574: PUSH
1575: LD_INT 30
1577: PUSH
1578: LD_INT 0
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 30
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: ST_TO_ADDR
// if depot then
1609: LD_VAR 0 36
1613: IFFALSE 1629
// depot := depot [ 1 ] ;
1615: LD_ADDR_VAR 0 36
1619: PUSH
1620: LD_VAR 0 36
1624: PUSH
1625: LD_INT 1
1627: ARRAY
1628: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1629: LD_ADDR_VAR 0 22
1633: PUSH
1634: LD_VAR 0 5
1638: PPUSH
1639: LD_INT 25
1641: PUSH
1642: LD_INT 4
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 50
1651: PUSH
1652: EMPTY
1653: LIST
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PPUSH
1659: CALL_OW 72
1663: ST_TO_ADDR
// if arTech then
1664: LD_EXP 5
1668: IFFALSE 2032
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1670: LD_ADDR_VAR 0 16
1674: PUSH
1675: LD_VAR 0 3
1679: PPUSH
1680: LD_INT 22
1682: PUSH
1683: LD_VAR 0 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 50
1694: PUSH
1695: EMPTY
1696: LIST
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 30
1713: PUSH
1714: LD_INT 7
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 30
1723: PUSH
1724: LD_INT 8
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: PPUSH
1742: CALL_OW 70
1746: ST_TO_ADDR
// if lab then
1747: LD_VAR 0 16
1751: IFFALSE 2032
// begin for j := 1 to Count ( lab ) do
1753: LD_ADDR_VAR 0 10
1757: PUSH
1758: DOUBLE
1759: LD_INT 1
1761: DEC
1762: ST_TO_ADDR
1763: LD_VAR 0 16
1767: PPUSH
1768: CALL 18262 0 1
1772: PUSH
1773: FOR_TO
1774: IFFALSE 2030
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1776: LD_VAR 0 16
1780: PUSH
1781: LD_VAR 0 10
1785: ARRAY
1786: PPUSH
1787: CALL_OW 461
1791: PUSH
1792: LD_INT 2
1794: EQUAL
1795: IFFALSE 1880
// begin for i in arTech do
1797: LD_ADDR_VAR 0 9
1801: PUSH
1802: LD_EXP 5
1806: PUSH
1807: FOR_IN
1808: IFFALSE 1876
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1810: LD_VAR 0 16
1814: PUSH
1815: LD_VAR 0 10
1819: ARRAY
1820: PPUSH
1821: LD_VAR 0 9
1825: PPUSH
1826: CALL_OW 430
1830: IFFALSE 1852
1832: PUSH
1833: LD_VAR 0 9
1837: PPUSH
1838: LD_VAR 0 1
1842: PPUSH
1843: CALL_OW 321
1847: PUSH
1848: LD_INT 1
1850: EQUAL
1851: AND
1852: IFFALSE 1874
// begin AddComResearch ( lab [ j ] , i ) ;
1854: LD_VAR 0 16
1858: PUSH
1859: LD_VAR 0 10
1863: ARRAY
1864: PPUSH
1865: LD_VAR 0 9
1869: PPUSH
1870: CALL_OW 184
// end ;
1874: GO 1807
1876: POP
1877: POP
// end else
1878: GO 2028
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1880: LD_VAR 0 16
1884: PUSH
1885: LD_VAR 0 10
1889: ARRAY
1890: PPUSH
1891: CALL_OW 461
1895: PUSH
1896: LD_INT 6
1898: EQUAL
1899: IFFALSE 2028
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1901: LD_ADDR_VAR 0 9
1905: PUSH
1906: LD_VAR 0 22
1910: PPUSH
1911: LD_INT 3
1913: PUSH
1914: LD_INT 120
1916: PUSH
1917: LD_INT 10
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 72
1932: PUSH
1933: FOR_IN
1934: IFFALSE 2026
// begin inside := IsInUnit ( i ) ;
1936: LD_ADDR_VAR 0 14
1940: PUSH
1941: LD_VAR 0 9
1945: PPUSH
1946: CALL_OW 310
1950: ST_TO_ADDR
// if not inside then
1951: LD_VAR 0 14
1955: NOT
1956: IFFALSE 1980
// ComEnterUnit ( i , lab [ j ] ) else
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 16
1967: PUSH
1968: LD_VAR 0 10
1972: ARRAY
1973: PPUSH
1974: CALL_OW 120
1978: GO 2024
// if BuildingStatus ( inside ) = bs_idle then
1980: LD_VAR 0 14
1984: PPUSH
1985: CALL_OW 461
1989: PUSH
1990: LD_INT 2
1992: EQUAL
1993: IFFALSE 2024
// begin ComExitBuilding ( i ) ;
1995: LD_VAR 0 9
1999: PPUSH
2000: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
2004: LD_VAR 0 9
2008: PPUSH
2009: LD_VAR 0 16
2013: PUSH
2014: LD_VAR 0 10
2018: ARRAY
2019: PPUSH
2020: CALL_OW 180
// end ; end ;
2024: GO 1933
2026: POP
2027: POP
// end ;
2028: GO 1773
2030: POP
2031: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2032: LD_ADDR_VAR 0 33
2036: PUSH
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 22
2044: PUSH
2045: LD_VAR 0 1
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 30
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 50
2066: PUSH
2067: EMPTY
2068: LIST
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: PPUSH
2075: CALL_OW 70
2079: ST_TO_ADDR
// if fac then
2080: LD_VAR 0 33
2084: IFFALSE 2419
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2086: LD_VAR 0 33
2090: PUSH
2091: LD_INT 1
2093: ARRAY
2094: PPUSH
2095: CALL_OW 461
2099: PUSH
2100: LD_INT 2
2102: EQUAL
2103: IFFALSE 2419
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2105: LD_ADDR_VAR 0 34
2109: PUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 2
2117: PUSH
2118: LD_INT 30
2120: PUSH
2121: LD_INT 32
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 33
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 35
2145: PUSH
2146: LD_INT 0
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 70
2161: ST_TO_ADDR
// if emptyTowers then
2162: LD_VAR 0 34
2166: IFFALSE 2216
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2168: LD_ADDR_VAR 0 35
2172: PUSH
2173: LD_VAR 0 34
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PPUSH
2182: LD_VAR 0 3
2186: PPUSH
2187: CALL 26587 0 2
2191: ST_TO_ADDR
// if weapon then
2192: LD_VAR 0 35
2196: IFFALSE 2216
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2198: LD_VAR 0 34
2202: PUSH
2203: LD_INT 1
2205: ARRAY
2206: PPUSH
2207: LD_VAR 0 35
2211: PPUSH
2212: CALL_OW 148
// end ; if arConstructList then
2216: LD_EXP 6
2220: IFFALSE 2419
// for i := 1 to Count ( arConstructList ) do
2222: LD_ADDR_VAR 0 9
2226: PUSH
2227: DOUBLE
2228: LD_INT 1
2230: DEC
2231: ST_TO_ADDR
2232: LD_EXP 6
2236: PPUSH
2237: CALL 18262 0 1
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2417
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2245: LD_VAR 0 33
2249: PUSH
2250: LD_INT 1
2252: ARRAY
2253: PPUSH
2254: LD_EXP 6
2258: PUSH
2259: LD_VAR 0 9
2263: ARRAY
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: PPUSH
2269: LD_EXP 6
2273: PUSH
2274: LD_VAR 0 9
2278: ARRAY
2279: PUSH
2280: LD_INT 2
2282: ARRAY
2283: PPUSH
2284: LD_EXP 6
2288: PUSH
2289: LD_VAR 0 9
2293: ARRAY
2294: PUSH
2295: LD_INT 3
2297: ARRAY
2298: PPUSH
2299: LD_EXP 6
2303: PUSH
2304: LD_VAR 0 9
2308: ARRAY
2309: PUSH
2310: LD_INT 4
2312: ARRAY
2313: PPUSH
2314: CALL_OW 448
2318: IFFALSE 2415
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2320: LD_VAR 0 33
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PPUSH
2329: LD_EXP 6
2333: PUSH
2334: LD_VAR 0 9
2338: ARRAY
2339: PUSH
2340: LD_INT 1
2342: ARRAY
2343: PPUSH
2344: LD_EXP 6
2348: PUSH
2349: LD_VAR 0 9
2353: ARRAY
2354: PUSH
2355: LD_INT 2
2357: ARRAY
2358: PPUSH
2359: LD_EXP 6
2363: PUSH
2364: LD_VAR 0 9
2368: ARRAY
2369: PUSH
2370: LD_INT 3
2372: ARRAY
2373: PPUSH
2374: LD_EXP 6
2378: PUSH
2379: LD_VAR 0 9
2383: ARRAY
2384: PUSH
2385: LD_INT 4
2387: ARRAY
2388: PPUSH
2389: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2393: LD_ADDR_EXP 6
2397: PUSH
2398: LD_EXP 6
2402: PPUSH
2403: LD_VAR 0 9
2407: PPUSH
2408: CALL_OW 3
2412: ST_TO_ADDR
// break ;
2413: GO 2417
// end ; end ;
2415: GO 2242
2417: POP
2418: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2419: LD_ADDR_VAR 0 11
2423: PUSH
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 22
2431: PUSH
2432: LD_VAR 0 1
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 21
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 57
2456: PUSH
2457: EMPTY
2458: LIST
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 3
2466: PUSH
2467: LD_INT 24
2469: PUSH
2470: LD_INT 1000
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PPUSH
2487: CALL_OW 70
2491: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2492: LD_ADDR_VAR 0 21
2496: PUSH
2497: LD_VAR 0 3
2501: PPUSH
2502: CALL_OW 435
2506: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2507: LD_ADDR_VAR 0 18
2511: PUSH
2512: LD_VAR 0 5
2516: PPUSH
2517: LD_INT 25
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 50
2529: PUSH
2530: EMPTY
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2542: LD_VAR 0 18
2546: PPUSH
2547: LD_INT 3
2549: PUSH
2550: LD_INT 120
2552: PUSH
2553: LD_INT 7
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 54
2569: PUSH
2570: EMPTY
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PPUSH
2581: CALL_OW 72
2585: IFFALSE 2602
2587: PUSH
2588: LD_VAR 0 33
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: CALL_OW 302
2601: AND
2602: IFFALSE 2661
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2604: LD_VAR 0 18
2608: PPUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 120
2614: PUSH
2615: LD_INT 7
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: LD_INT 54
2631: PUSH
2632: EMPTY
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 72
2647: PPUSH
2648: LD_VAR 0 33
2652: PUSH
2653: LD_INT 1
2655: ARRAY
2656: PPUSH
2657: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2661: LD_ADDR_VAR 0 16
2665: PUSH
2666: LD_VAR 0 3
2670: PPUSH
2671: LD_INT 2
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 6
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 30
2686: PUSH
2687: LD_INT 7
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 30
2696: PUSH
2697: LD_INT 8
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 70
2714: ST_TO_ADDR
// if sci then
2715: LD_VAR 0 22
2719: IFFALSE 2964
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2721: LD_ADDR_VAR 0 24
2725: PUSH
2726: LD_VAR 0 5
2730: PPUSH
2731: LD_INT 95
2733: PUSH
2734: LD_VAR 0 3
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 120
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 72
2761: ST_TO_ADDR
// if hurtUnits then
2762: LD_VAR 0 24
2766: IFFALSE 2861
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2768: LD_ADDR_VAR 0 9
2772: PUSH
2773: LD_VAR 0 22
2777: PPUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 120
2783: PUSH
2784: LD_INT 10
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PPUSH
2795: CALL_OW 72
2799: PUSH
2800: FOR_IN
2801: IFFALSE 2857
// begin SetTag ( i , tHealer ) ;
2803: LD_VAR 0 9
2807: PPUSH
2808: LD_INT 10
2810: PPUSH
2811: CALL_OW 109
// if IsInUnit ( i ) then
2815: LD_VAR 0 9
2819: PPUSH
2820: CALL_OW 310
2824: IFFALSE 2837
// ComExitBuilding ( i ) else
2826: LD_VAR 0 9
2830: PPUSH
2831: CALL_OW 122
2835: GO 2855
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2837: LD_VAR 0 9
2841: PPUSH
2842: LD_VAR 0 24
2846: PUSH
2847: LD_INT 1
2849: ARRAY
2850: PPUSH
2851: CALL_OW 128
// end ;
2855: GO 2800
2857: POP
2858: POP
// end else
2859: GO 2964
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2861: LD_VAR 0 16
2865: IFFALSE 2888
2867: PUSH
2868: LD_VAR 0 22
2872: PPUSH
2873: LD_INT 120
2875: PUSH
2876: LD_INT 10
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PPUSH
2883: CALL_OW 72
2887: AND
2888: IFFALSE 2964
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2890: LD_ADDR_VAR 0 9
2894: PUSH
2895: LD_VAR 0 22
2899: PPUSH
2900: LD_INT 120
2902: PUSH
2903: LD_INT 10
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 72
2914: PUSH
2915: FOR_IN
2916: IFFALSE 2962
// begin SetTag ( i , 0 ) ;
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: CALL_OW 109
// if not IsInUnit ( i ) then
2930: LD_VAR 0 9
2934: PPUSH
2935: CALL_OW 310
2939: NOT
2940: IFFALSE 2960
// ComEnterUnit ( i , lab [ 1 ] ) ;
2942: LD_VAR 0 9
2946: PPUSH
2947: LD_VAR 0 16
2951: PUSH
2952: LD_INT 1
2954: ARRAY
2955: PPUSH
2956: CALL_OW 120
// end ;
2960: GO 2915
2962: POP
2963: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2964: LD_ADDR_VAR 0 17
2968: PUSH
2969: LD_VAR 0 5
2973: PPUSH
2974: LD_INT 25
2976: PUSH
2977: LD_INT 2
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 72
2988: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2989: LD_ADDR_VAR 0 37
2993: PUSH
2994: LD_EXP 7
2998: ST_TO_ADDR
// if eng then
2999: LD_VAR 0 17
3003: IFFALSE 3851
// begin for i in eng do
3005: LD_ADDR_VAR 0 9
3009: PUSH
3010: LD_VAR 0 17
3014: PUSH
3015: FOR_IN
3016: IFFALSE 3849
// begin tag := GetTag ( i ) ;
3018: LD_ADDR_VAR 0 19
3022: PUSH
3023: LD_VAR 0 9
3027: PPUSH
3028: CALL_OW 110
3032: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
3033: LD_VAR 0 9
3037: PPUSH
3038: LD_VAR 0 4
3042: PPUSH
3043: CALL_OW 308
3047: IFFALSE 3078
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3049: LD_VAR 0 9
3053: PPUSH
3054: LD_VAR 0 7
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_VAR 0 7
3067: PUSH
3068: LD_INT 2
3070: ARRAY
3071: PPUSH
3072: CALL_OW 111
// continue ;
3076: GO 3015
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3078: LD_VAR 0 9
3082: PPUSH
3083: CALL_OW 256
3087: PUSH
3088: LD_INT 800
3090: LESS
3091: IFFALSE 3103
3093: PUSH
3094: LD_VAR 0 19
3098: PUSH
3099: LD_INT 1
3101: NONEQUAL
3102: AND
3103: IFFALSE 3153
// begin SetTag ( i , tHeal ) ;
3105: LD_VAR 0 9
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3117: LD_VAR 0 9
3121: PPUSH
3122: LD_VAR 0 6
3126: PUSH
3127: LD_INT 1
3129: ARRAY
3130: PPUSH
3131: LD_VAR 0 6
3135: PUSH
3136: LD_INT 2
3138: ARRAY
3139: PPUSH
3140: CALL_OW 111
// AddComHold ( i ) ;
3144: LD_VAR 0 9
3148: PPUSH
3149: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3153: LD_VAR 0 19
3157: PUSH
3158: LD_INT 1
3160: EQUAL
3161: IFFALSE 3178
3163: PUSH
3164: LD_VAR 0 9
3168: PPUSH
3169: CALL_OW 256
3173: PUSH
3174: LD_INT 1000
3176: EQUAL
3177: AND
3178: IFFALSE 3192
// SetTag ( i , 0 ) ;
3180: LD_VAR 0 9
3184: PPUSH
3185: LD_INT 0
3187: PPUSH
3188: CALL_OW 109
// if not tag then
3192: LD_VAR 0 19
3196: NOT
3197: IFFALSE 3368
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3199: LD_ADDR_VAR 0 12
3203: PUSH
3204: LD_VAR 0 3
3208: PPUSH
3209: LD_INT 57
3211: PUSH
3212: EMPTY
3213: LIST
3214: PPUSH
3215: CALL_OW 70
3219: ST_TO_ADDR
// if undone then
3220: LD_VAR 0 12
3224: IFFALSE 3246
// begin ComComplete ( i , undone [ 1 ] ) ;
3226: LD_VAR 0 9
3230: PPUSH
3231: LD_VAR 0 12
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: CALL 24432 0 2
// continue ;
3244: GO 3015
// end ; if cr or tmp or buildingsToBuild then
3246: LD_VAR 0 21
3250: IFTRUE 3258
3252: PUSH
3253: LD_VAR 0 11
3257: OR
3258: IFTRUE 3266
3260: PUSH
3261: LD_VAR 0 37
3265: OR
3266: IFFALSE 3342
// begin if IsInUnit ( i ) then
3268: LD_VAR 0 9
3272: PPUSH
3273: CALL_OW 310
3277: IFFALSE 3288
// ComExitBuilding ( i ) ;
3279: LD_VAR 0 9
3283: PPUSH
3284: CALL_OW 122
// if tmp then
3288: LD_VAR 0 11
3292: IFFALSE 3308
// SetTag ( i , tRepair ) else
3294: LD_VAR 0 9
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: CALL_OW 109
3306: GO 3340
// if cr then
3308: LD_VAR 0 21
3312: IFFALSE 3328
// SetTag ( i , tCrates ) else
3314: LD_VAR 0 9
3318: PPUSH
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 109
3326: GO 3340
// SetTag ( i , tBuild ) ;
3328: LD_VAR 0 9
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: CALL_OW 109
// end else
3340: GO 3368
// if not IsInUnit ( i ) then
3342: LD_VAR 0 9
3346: PPUSH
3347: CALL_OW 310
3351: NOT
3352: IFFALSE 3368
// ComEnterUnit ( i , depot ) ;
3354: LD_VAR 0 9
3358: PPUSH
3359: LD_VAR 0 36
3363: PPUSH
3364: CALL_OW 120
// end ; if tag = tRepair then
3368: LD_VAR 0 19
3372: PUSH
3373: LD_INT 3
3375: EQUAL
3376: IFFALSE 3482
// begin if IsInUnit ( i ) then
3378: LD_VAR 0 9
3382: PPUSH
3383: CALL_OW 310
3387: IFFALSE 3400
// begin ComExitBuilding ( i ) ;
3389: LD_VAR 0 9
3393: PPUSH
3394: CALL_OW 122
// continue ;
3398: GO 3015
// end ; if not tmp then
3400: LD_VAR 0 11
3404: NOT
3405: IFFALSE 3421
// begin SetTag ( i , 0 ) ;
3407: LD_VAR 0 9
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: CALL_OW 109
// continue ;
3419: GO 3015
// end ; if not HasTask ( i ) then
3421: LD_VAR 0 9
3425: PPUSH
3426: CALL_OW 314
3430: NOT
3431: IFFALSE 3451
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3433: LD_VAR 0 9
3437: PPUSH
3438: LD_VAR 0 11
3442: PUSH
3443: LD_INT 1
3445: ARRAY
3446: PPUSH
3447: CALL_OW 130
// if not IsInArea ( i , area ) then
3451: LD_VAR 0 9
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 308
3465: NOT
3466: IFFALSE 3482
// ComMoveToArea ( i , area ) ;
3468: LD_VAR 0 9
3472: PPUSH
3473: LD_VAR 0 3
3477: PPUSH
3478: CALL_OW 113
// end ; if tag = tBuild then
3482: LD_VAR 0 19
3486: PUSH
3487: LD_INT 5
3489: EQUAL
3490: IFFALSE 3700
// begin if IsInUnit ( i ) then
3492: LD_VAR 0 9
3496: PPUSH
3497: CALL_OW 310
3501: IFFALSE 3514
// begin ComExitBuilding ( i ) ;
3503: LD_VAR 0 9
3507: PPUSH
3508: CALL_OW 122
// continue ;
3512: GO 3015
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3514: LD_VAR 0 37
3518: NOT
3519: IFTRUE 3527
3521: PUSH
3522: LD_VAR 0 26
3526: OR
3527: IFTRUE 3535
3529: PUSH
3530: LD_VAR 0 27
3534: OR
3535: IFFALSE 3553
// begin SetTag ( i , 0 ) ;
3537: LD_VAR 0 9
3541: PPUSH
3542: LD_INT 0
3544: PPUSH
3545: CALL_OW 109
// continue ;
3549: GO 3015
// end else
3551: GO 3592
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3553: LD_VAR 0 36
3557: PPUSH
3558: LD_VAR 0 37
3562: PUSH
3563: LD_INT 1
3565: ARRAY
3566: PUSH
3567: LD_INT 1
3569: ARRAY
3570: PPUSH
3571: CALL 58333 0 2
3575: NOT
3576: IFFALSE 3592
// begin SetTag ( i , 0 ) ;
3578: LD_VAR 0 9
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 109
// continue ;
3590: GO 3015
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3592: LD_ADDR_VAR 0 12
3596: PUSH
3597: LD_VAR 0 3
3601: PPUSH
3602: LD_INT 57
3604: PUSH
3605: EMPTY
3606: LIST
3607: PPUSH
3608: CALL_OW 70
3612: ST_TO_ADDR
// if undone then
3613: LD_VAR 0 12
3617: IFFALSE 3639
// begin ComComplete ( i , undone [ 1 ] ) ;
3619: LD_VAR 0 9
3623: PPUSH
3624: LD_VAR 0 12
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PPUSH
3633: CALL 24432 0 2
// continue ;
3637: GO 3015
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3639: LD_VAR 0 9
3643: PPUSH
3644: LD_VAR 0 37
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: LD_VAR 0 37
3661: PUSH
3662: LD_INT 1
3664: ARRAY
3665: PUSH
3666: LD_INT 2
3668: ARRAY
3669: PPUSH
3670: LD_VAR 0 37
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PUSH
3679: LD_INT 3
3681: ARRAY
3682: PPUSH
3683: LD_VAR 0 37
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: PUSH
3692: LD_INT 4
3694: ARRAY
3695: PPUSH
3696: CALL_OW 145
// end ; if tag = tCrates then
3700: LD_VAR 0 19
3704: PUSH
3705: LD_INT 2
3707: EQUAL
3708: IFFALSE 3847
// begin if IsInUnit ( i ) then
3710: LD_VAR 0 9
3714: PPUSH
3715: CALL_OW 310
3719: IFFALSE 3732
// begin ComExitBuilding ( i ) ;
3721: LD_VAR 0 9
3725: PPUSH
3726: CALL_OW 122
// continue ;
3730: GO 3015
// end ; if not cr then
3732: LD_VAR 0 21
3736: NOT
3737: IFFALSE 3753
// begin SetTag ( i , 0 ) ;
3739: LD_VAR 0 9
3743: PPUSH
3744: LD_INT 0
3746: PPUSH
3747: CALL_OW 109
// continue ;
3751: GO 3015
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3753: LD_VAR 0 9
3757: PPUSH
3758: CALL_OW 314
3762: NOT
3763: IFFALSE 3818
3765: PUSH
3766: LD_INT 81
3768: PUSH
3769: LD_VAR 0 1
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 92
3780: PUSH
3781: LD_VAR 0 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PUSH
3790: LD_VAR 0 21
3794: PUSH
3795: LD_INT 2
3797: ARRAY
3798: PUSH
3799: LD_INT 12
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 69
3816: NOT
3817: AND
3818: IFFALSE 3847
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3820: LD_VAR 0 9
3824: PPUSH
3825: LD_VAR 0 21
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_VAR 0 21
3838: PUSH
3839: LD_INT 2
3841: ARRAY
3842: PPUSH
3843: CALL_OW 117
// end ; end ;
3847: GO 3015
3849: POP
3850: POP
// end ; if vehicles then
3851: LD_VAR 0 30
3855: IFFALSE 4667
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3857: LD_ADDR_VAR 0 30
3861: PUSH
3862: LD_VAR 0 30
3866: PPUSH
3867: LD_INT 3
3869: PUSH
3870: LD_INT 2
3872: PUSH
3873: LD_INT 34
3875: PUSH
3876: LD_INT 88
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 34
3885: PUSH
3886: LD_INT 32
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 50
3904: PUSH
3905: EMPTY
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PPUSH
3912: CALL_OW 72
3916: ST_TO_ADDR
// if vehicles then
3917: LD_VAR 0 30
3921: IFFALSE 4667
// begin for i in vehicles do
3923: LD_ADDR_VAR 0 9
3927: PUSH
3928: LD_VAR 0 30
3932: PUSH
3933: FOR_IN
3934: IFFALSE 4665
// begin tag := GetTag ( i ) ;
3936: LD_ADDR_VAR 0 19
3940: PUSH
3941: LD_VAR 0 9
3945: PPUSH
3946: CALL_OW 110
3950: ST_TO_ADDR
// if not tag then
3951: LD_VAR 0 19
3955: NOT
3956: IFFALSE 4102
// begin if GetControl ( i ) = control_manual then
3958: LD_VAR 0 9
3962: PPUSH
3963: CALL_OW 263
3967: PUSH
3968: LD_INT 1
3970: EQUAL
3971: IFFALSE 4088
// begin drivers := arDrivers ;
3973: LD_ADDR_VAR 0 28
3977: PUSH
3978: LD_EXP 10
3982: ST_TO_ADDR
// if not drivers then
3983: LD_VAR 0 28
3987: NOT
3988: IFFALSE 4068
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3990: LD_ADDR_VAR 0 28
3994: PUSH
3995: LD_VAR 0 18
3999: PPUSH
4000: LD_INT 3
4002: PUSH
4003: LD_INT 120
4005: PUSH
4006: LD_INT 7
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: ST_TO_ADDR
// if drivers then
4022: LD_VAR 0 28
4026: IFFALSE 4068
// begin SetTag ( drivers [ 1 ] , tMech ) ;
4028: LD_VAR 0 28
4032: PUSH
4033: LD_INT 1
4035: ARRAY
4036: PPUSH
4037: LD_INT 7
4039: PPUSH
4040: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
4044: LD_ADDR_EXP 10
4048: PUSH
4049: LD_EXP 10
4053: PPUSH
4054: LD_VAR 0 28
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PPUSH
4063: CALL 54238 0 2
4067: ST_TO_ADDR
// end ; end ; if drivers then
4068: LD_VAR 0 28
4072: IFFALSE 4086
// SetTag ( i , tBusy ) ;
4074: LD_VAR 0 9
4078: PPUSH
4079: LD_INT 8
4081: PPUSH
4082: CALL_OW 109
// continue ;
4086: GO 3933
// end ; SetTag ( i , tBusy ) ;
4088: LD_VAR 0 9
4092: PPUSH
4093: LD_INT 8
4095: PPUSH
4096: CALL_OW 109
// end else
4100: GO 4663
// if tag = tBusy then
4102: LD_VAR 0 19
4106: PUSH
4107: LD_INT 8
4109: EQUAL
4110: IFFALSE 4330
// begin if GetLives ( i ) = 1000 then
4112: LD_VAR 0 9
4116: PPUSH
4117: CALL_OW 256
4121: PUSH
4122: LD_INT 1000
4124: EQUAL
4125: IFFALSE 4328
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4127: LD_VAR 0 9
4131: PPUSH
4132: CALL_OW 263
4136: PUSH
4137: LD_INT 1
4139: EQUAL
4140: IFFALSE 4154
4142: PUSH
4143: LD_VAR 0 9
4147: PPUSH
4148: CALL_OW 311
4152: NOT
4153: AND
4154: IFFALSE 4316
// begin drivers := arDrivers ;
4156: LD_ADDR_VAR 0 28
4160: PUSH
4161: LD_EXP 10
4165: ST_TO_ADDR
// if not drivers then
4166: LD_VAR 0 28
4170: NOT
4171: IFFALSE 4187
// begin SetTag ( i , 0 ) ;
4173: LD_VAR 0 9
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 109
// continue ;
4185: GO 3933
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 310
4200: IFFALSE 4218
4202: PUSH
4203: LD_VAR 0 28
4207: PUSH
4208: LD_INT 1
4210: ARRAY
4211: PPUSH
4212: CALL 51818 0 1
4216: NOT
4217: AND
4218: IFFALSE 4233
// ComExitBuilding ( drivers [ 1 ] ) ;
4220: LD_VAR 0 28
4224: PUSH
4225: LD_INT 1
4227: ARRAY
4228: PPUSH
4229: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4233: LD_VAR 0 30
4237: PPUSH
4238: LD_INT 120
4240: PUSH
4241: LD_INT 3
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PPUSH
4248: CALL_OW 72
4252: IFFALSE 4270
4254: PUSH
4255: LD_VAR 0 28
4259: PUSH
4260: LD_INT 1
4262: ARRAY
4263: PPUSH
4264: CALL_OW 314
4268: NOT
4269: AND
4270: IFTRUE 4294
4272: PUSH
4273: LD_VAR 0 30
4277: PPUSH
4278: LD_INT 120
4280: PUSH
4281: LD_INT 3
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PPUSH
4288: CALL_OW 72
4292: NOT
4293: OR
4294: IFFALSE 4314
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4296: LD_VAR 0 28
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: PPUSH
4305: LD_VAR 0 9
4309: PPUSH
4310: CALL_OW 120
// continue ;
4314: GO 3933
// end ; SetTag ( i , tAttack ) ;
4316: LD_VAR 0 9
4320: PPUSH
4321: LD_INT 13
4323: PPUSH
4324: CALL_OW 109
// end ; end else
4328: GO 4663
// if tag = tAttack then
4330: LD_VAR 0 19
4334: PUSH
4335: LD_INT 13
4337: EQUAL
4338: IFFALSE 4520
// begin enemy := enemyInBase ;
4340: LD_ADDR_VAR 0 25
4344: PUSH
4345: LD_VAR 0 26
4349: ST_TO_ADDR
// if not enemy then
4350: LD_VAR 0 25
4354: NOT
4355: IFFALSE 4367
// enemy := enemyOuterBase ;
4357: LD_ADDR_VAR 0 25
4361: PUSH
4362: LD_VAR 0 27
4366: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4367: LD_VAR 0 25
4371: NOT
4372: IFFALSE 4407
4374: PUSH
4375: LD_VAR 0 9
4379: PPUSH
4380: LD_VAR 0 7
4384: PUSH
4385: LD_INT 1
4387: ARRAY
4388: PPUSH
4389: LD_VAR 0 7
4393: PUSH
4394: LD_INT 2
4396: ARRAY
4397: PPUSH
4398: CALL_OW 297
4402: PUSH
4403: LD_INT 10
4405: GREATER
4406: AND
4407: IFFALSE 4438
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4409: LD_VAR 0 9
4413: PPUSH
4414: LD_VAR 0 7
4418: PUSH
4419: LD_INT 1
4421: ARRAY
4422: PPUSH
4423: LD_VAR 0 7
4427: PUSH
4428: LD_INT 2
4430: ARRAY
4431: PPUSH
4432: CALL_OW 111
// continue ;
4436: GO 3933
// end ; if GetLives ( i ) < 650 then
4438: LD_VAR 0 9
4442: PPUSH
4443: CALL_OW 256
4447: PUSH
4448: LD_INT 650
4450: LESS
4451: IFFALSE 4494
// begin SetTag ( i , tVehRepair ) ;
4453: LD_VAR 0 9
4457: PPUSH
4458: LD_INT 9
4460: PPUSH
4461: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4465: LD_VAR 0 9
4469: PPUSH
4470: LD_VAR 0 7
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: LD_VAR 0 7
4483: PUSH
4484: LD_INT 2
4486: ARRAY
4487: PPUSH
4488: CALL_OW 111
// continue ;
4492: GO 3933
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4494: LD_VAR 0 9
4498: PPUSH
4499: LD_VAR 0 25
4503: PPUSH
4504: LD_VAR 0 9
4508: PPUSH
4509: CALL_OW 74
4513: PPUSH
4514: CALL_OW 115
// end else
4518: GO 4663
// if tag = tVehRepair then
4520: LD_VAR 0 19
4524: PUSH
4525: LD_INT 9
4527: EQUAL
4528: IFFALSE 4663
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4530: LD_VAR 0 9
4534: PPUSH
4535: LD_VAR 0 7
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: LD_VAR 0 7
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PPUSH
4553: CALL_OW 297
4557: PUSH
4558: LD_INT 10
4560: GREATER
4561: IFFALSE 4592
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4563: LD_VAR 0 9
4567: PPUSH
4568: LD_VAR 0 7
4572: PUSH
4573: LD_INT 1
4575: ARRAY
4576: PPUSH
4577: LD_VAR 0 7
4581: PUSH
4582: LD_INT 2
4584: ARRAY
4585: PPUSH
4586: CALL_OW 111
// continue ;
4590: GO 3933
// end ; if GetLives ( i ) = 1000 then
4592: LD_VAR 0 9
4596: PPUSH
4597: CALL_OW 256
4601: PUSH
4602: LD_INT 1000
4604: EQUAL
4605: IFFALSE 4621
// begin SetTag ( i , tBusy ) ;
4607: LD_VAR 0 9
4611: PPUSH
4612: LD_INT 8
4614: PPUSH
4615: CALL_OW 109
// continue ;
4619: GO 3933
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4621: LD_VAR 0 9
4625: PPUSH
4626: CALL_OW 263
4630: PUSH
4631: LD_INT 1
4633: EQUAL
4634: IFFALSE 4647
4636: PUSH
4637: LD_VAR 0 9
4641: PPUSH
4642: CALL_OW 311
4646: AND
4647: IFFALSE 4663
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4649: LD_VAR 0 9
4653: PPUSH
4654: CALL_OW 311
4658: PPUSH
4659: CALL 55952 0 1
// end ; end ;
4663: GO 3933
4665: POP
4666: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4667: LD_ADDR_VAR 0 23
4671: PUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: LD_INT 2
4679: PUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 1
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 25
4692: PUSH
4693: LD_INT 8
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: LD_INT 5
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 25
4712: PUSH
4713: LD_INT 9
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 50
4729: PUSH
4730: EMPTY
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 72
4741: ST_TO_ADDR
// if sol then
4742: LD_VAR 0 23
4746: IFFALSE 5262
// begin if enemyInBase then
4748: LD_VAR 0 26
4752: IFFALSE 4931
// begin for i in sol do
4754: LD_ADDR_VAR 0 9
4758: PUSH
4759: LD_VAR 0 23
4763: PUSH
4764: FOR_IN
4765: IFFALSE 4927
// begin tw := IsInUnit ( i ) ;
4767: LD_ADDR_VAR 0 20
4771: PUSH
4772: LD_VAR 0 9
4776: PPUSH
4777: CALL_OW 310
4781: ST_TO_ADDR
// if tw then
4782: LD_VAR 0 20
4786: IFFALSE 4869
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4788: LD_VAR 0 20
4792: PUSH
4793: LD_INT 22
4795: PUSH
4796: LD_VAR 0 1
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 101
4807: PUSH
4808: LD_VAR 0 38
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 30
4822: PUSH
4823: LD_INT 32
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 30
4832: PUSH
4833: LD_INT 31
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 69
4854: IN
4855: NOT
4856: IFFALSE 4867
// ComExitBuilding ( i ) ;
4858: LD_VAR 0 9
4862: PPUSH
4863: CALL_OW 122
// end else
4867: GO 4925
// if IsInArea ( i , area ) then
4869: LD_VAR 0 9
4873: PPUSH
4874: LD_VAR 0 3
4878: PPUSH
4879: CALL_OW 308
4883: IFFALSE 4911
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4885: LD_VAR 0 9
4889: PPUSH
4890: LD_VAR 0 26
4894: PPUSH
4895: LD_VAR 0 9
4899: PPUSH
4900: CALL_OW 74
4904: PPUSH
4905: CALL_OW 115
4909: GO 4925
// ComMoveToArea ( i , area ) ;
4911: LD_VAR 0 9
4915: PPUSH
4916: LD_VAR 0 3
4920: PPUSH
4921: CALL_OW 113
// end ;
4925: GO 4764
4927: POP
4928: POP
// end else
4929: GO 5262
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4931: LD_ADDR_VAR 0 32
4935: PUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 3
4943: PUSH
4944: LD_INT 62
4946: PUSH
4947: EMPTY
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 2
4956: PUSH
4957: LD_INT 30
4959: PUSH
4960: LD_INT 32
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 30
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 30
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 30
4989: PUSH
4990: LD_INT 31
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: CALL_OW 70
5012: ST_TO_ADDR
// if empty then
5013: LD_VAR 0 32
5017: IFFALSE 5034
// empty := ReverseArray ( empty ) ;
5019: LD_ADDR_VAR 0 32
5023: PUSH
5024: LD_VAR 0 32
5028: PPUSH
5029: CALL 49318 0 1
5033: ST_TO_ADDR
// for i in sol do
5034: LD_ADDR_VAR 0 9
5038: PUSH
5039: LD_VAR 0 23
5043: PUSH
5044: FOR_IN
5045: IFFALSE 5260
// begin tag := GetTag ( i ) ;
5047: LD_ADDR_VAR 0 19
5051: PUSH
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 110
5061: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
5062: LD_VAR 0 9
5066: PPUSH
5067: CALL_OW 256
5071: PUSH
5072: LD_INT 1000
5074: LESS
5075: IFFALSE 5087
5077: PUSH
5078: LD_VAR 0 19
5082: PUSH
5083: LD_INT 1
5085: NONEQUAL
5086: AND
5087: IFFALSE 5139
// begin SetTag ( i , tHeal ) ;
5089: LD_VAR 0 9
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5101: LD_VAR 0 9
5105: PPUSH
5106: LD_VAR 0 6
5110: PUSH
5111: LD_INT 1
5113: ARRAY
5114: PPUSH
5115: LD_VAR 0 6
5119: PUSH
5120: LD_INT 2
5122: ARRAY
5123: PPUSH
5124: CALL_OW 111
// AddComHold ( i ) ;
5128: LD_VAR 0 9
5132: PPUSH
5133: CALL_OW 200
// continue ;
5137: GO 5044
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5139: LD_VAR 0 9
5143: PPUSH
5144: CALL_OW 256
5148: PUSH
5149: LD_INT 1000
5151: EQUAL
5152: IFFALSE 5164
5154: PUSH
5155: LD_VAR 0 19
5159: PUSH
5160: LD_INT 1
5162: EQUAL
5163: AND
5164: IFFALSE 5180
// begin SetTag ( i , 0 ) ;
5166: LD_VAR 0 9
5170: PPUSH
5171: LD_INT 0
5173: PPUSH
5174: CALL_OW 109
// continue ;
5178: GO 5044
// end ; if HasTask ( i ) then
5180: LD_VAR 0 9
5184: PPUSH
5185: CALL_OW 314
5189: IFFALSE 5193
// continue ;
5191: GO 5044
// if not IsInUnit ( i ) and not tag and empty then
5193: LD_VAR 0 9
5197: PPUSH
5198: CALL_OW 310
5202: NOT
5203: IFFALSE 5212
5205: PUSH
5206: LD_VAR 0 19
5210: NOT
5211: AND
5212: IFFALSE 5220
5214: PUSH
5215: LD_VAR 0 32
5219: AND
5220: IFFALSE 5258
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5222: LD_VAR 0 9
5226: PPUSH
5227: LD_VAR 0 32
5231: PUSH
5232: LD_INT 1
5234: ARRAY
5235: PPUSH
5236: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5240: LD_ADDR_VAR 0 32
5244: PUSH
5245: LD_VAR 0 32
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: CALL_OW 3
5257: ST_TO_ADDR
// end ; end ;
5258: GO 5044
5260: POP
5261: POP
// end ; end ; end ;
5262: LD_VAR 0 8
5266: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5267: LD_EXP 14
5271: PPUSH
5272: LD_INT 50
5274: PUSH
5275: EMPTY
5276: LIST
5277: PPUSH
5278: CALL_OW 72
5282: IFFALSE 5335
5284: GO 5286
5286: DISABLE
// begin enable ;
5287: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5288: LD_EXP 3
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: LD_EXP 14
5310: PPUSH
5311: LD_INT 109
5313: PUSH
5314: LD_INT 43
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: LD_INT 112
5323: PUSH
5324: LD_INT 52
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PPUSH
5331: CALL 1267 0 7
// end ;
5335: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
5336: LD_EXP 13
5340: IFFALSE 5568
5342: GO 5344
5344: DISABLE
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
// begin enable ;
5350: ENABLE
// p := 1 ;
5351: LD_ADDR_VAR 0 2
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5359: LD_ADDR_VAR 0 1
5363: PUSH
5364: DOUBLE
5365: LD_INT 1
5367: DEC
5368: ST_TO_ADDR
5369: LD_EXP 13
5373: PPUSH
5374: CALL 18262 0 1
5378: PUSH
5379: LD_INT 2
5381: DIV
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5566
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_EXP 13
5395: PUSH
5396: LD_VAR 0 2
5400: ARRAY
5401: PPUSH
5402: LD_EXP 13
5406: PUSH
5407: LD_VAR 0 2
5411: PUSH
5412: LD_INT 1
5414: PLUS
5415: ARRAY
5416: PPUSH
5417: CALL_OW 428
5421: ST_TO_ADDR
// if tmp then
5422: LD_VAR 0 3
5426: IFFALSE 5550
// begin if not GetSide ( tmp ) in [ 0 , botSides [ 1 ] ] then
5428: LD_VAR 0 3
5432: PPUSH
5433: CALL_OW 255
5437: PUSH
5438: LD_INT 0
5440: PUSH
5441: LD_EXP 3
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: IN
5454: NOT
5455: IFFALSE 5550
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5457: LD_EXP 13
5461: PUSH
5462: LD_VAR 0 2
5466: ARRAY
5467: PPUSH
5468: LD_EXP 13
5472: PUSH
5473: LD_VAR 0 2
5477: PUSH
5478: LD_INT 1
5480: PLUS
5481: ARRAY
5482: PPUSH
5483: LD_EXP 3
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: PPUSH
5492: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5496: LD_ADDR_EXP 13
5500: PUSH
5501: LD_EXP 13
5505: PPUSH
5506: LD_VAR 0 2
5510: PPUSH
5511: CALL_OW 3
5515: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5516: LD_ADDR_EXP 13
5520: PUSH
5521: LD_EXP 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// p := p - 2 ;
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_VAR 0 2
5545: PUSH
5546: LD_INT 2
5548: MINUS
5549: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5550: LD_ADDR_VAR 0 2
5554: PUSH
5555: LD_VAR 0 2
5559: PUSH
5560: LD_INT 2
5562: PLUS
5563: ST_TO_ADDR
// end ;
5564: GO 5383
5566: POP
5567: POP
// end ;
5568: PPOPN 3
5570: END
// every 15 15$00 trigger IsOk ( arDep ) do var un ;
5571: LD_INT 2
5573: PPUSH
5574: CALL_OW 302
5578: IFFALSE 5909
5580: GO 5582
5582: DISABLE
5583: LD_INT 0
5585: PPUSH
// begin enable ;
5586: ENABLE
// if UnitsInside ( arFac ) < 3 and arMechSpawnCounter then
5587: LD_INT 12
5589: PPUSH
5590: CALL_OW 313
5594: PUSH
5595: LD_INT 3
5597: LESS
5598: IFFALSE 5606
5600: PUSH
5601: LD_EXP 11
5605: AND
5606: IFFALSE 5735
// begin arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
5608: LD_ADDR_EXP 11
5612: PUSH
5613: LD_EXP 11
5617: PPUSH
5618: CALL 55633 0 1
5622: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
5623: LD_ADDR_OWVAR 20
5627: PUSH
5628: LD_EXP 3
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: ST_TO_ADDR
// uc_nation := nation_arabian ;
5637: LD_ADDR_OWVAR 21
5641: PUSH
5642: LD_INT 2
5644: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
5645: LD_INT 0
5647: PPUSH
5648: LD_INT 3
5650: PUSH
5651: LD_INT 6
5653: PUSH
5654: LD_INT 9
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_OWVAR 67
5666: ARRAY
5667: PPUSH
5668: CALL_OW 383
// un := CreateHuman ;
5672: LD_ADDR_VAR 0 1
5676: PUSH
5677: CALL_OW 44
5681: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
5682: LD_VAR 0 1
5686: PPUSH
5687: LD_INT 143
5689: PPUSH
5690: LD_INT 29
5692: PPUSH
5693: LD_INT 0
5695: PPUSH
5696: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
5700: LD_VAR 0 1
5704: PPUSH
5705: LD_INT 115
5707: PPUSH
5708: LD_INT 52
5710: PPUSH
5711: CALL_OW 111
// arForce := Join ( arForce , un ) ;
5715: LD_ADDR_EXP 14
5719: PUSH
5720: LD_EXP 14
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL 54238 0 2
5734: ST_TO_ADDR
// end ; arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5735: LD_ADDR_EXP 6
5739: PUSH
5740: LD_EXP 6
5744: PUSH
5745: LD_INT 14
5747: PUSH
5748: LD_INT 1
5750: PUSH
5751: LD_INT 2
5753: PUSH
5754: LD_INT 27
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 14
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 28
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 14
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 28
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: ADD
5804: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5805: LD_OWVAR 67
5809: PUSH
5810: LD_INT 1
5812: GREATER
5813: IFFALSE 5837
5815: PUSH
5816: LD_INT 72
5818: PPUSH
5819: LD_EXP 3
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: CALL_OW 321
5832: PUSH
5833: LD_INT 2
5835: EQUAL
5836: AND
5837: IFFALSE 5909
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5839: LD_ADDR_EXP 6
5843: PUSH
5844: LD_EXP 6
5848: PUSH
5849: LD_INT 14
5851: PUSH
5852: LD_INT 3
5854: PUSH
5855: LD_INT 2
5857: PUSH
5858: LD_INT 29
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 14
5869: PUSH
5870: LD_INT 3
5872: PUSH
5873: LD_INT 2
5875: PUSH
5876: LD_INT 29
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 14
5887: PUSH
5888: LD_INT 3
5890: PUSH
5891: LD_INT 2
5893: PUSH
5894: LD_INT 29
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: LIST
5907: ADD
5908: ST_TO_ADDR
// end ; end_of_file
5909: PPOPN 1
5911: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5912: LD_INT 0
5914: PPUSH
5915: PPUSH
5916: PPUSH
5917: PPUSH
5918: PPUSH
// mpGameType := GameTypeCoop ;
5919: LD_ADDR_EXP 41
5923: PUSH
5924: LD_INT 4
5926: ST_TO_ADDR
// multi_settings_counter := 6 ;
5927: LD_ADDR_EXP 29
5931: PUSH
5932: LD_INT 6
5934: ST_TO_ADDR
// multi_settings := [ ] ;
5935: LD_ADDR_EXP 28
5939: PUSH
5940: EMPTY
5941: ST_TO_ADDR
// if Multiplayer then
5942: LD_OWVAR 4
5946: IFFALSE 6126
// begin your_side := mp_player_side ;
5948: LD_ADDR_OWVAR 2
5952: PUSH
5953: LD_OWVAR 7
5957: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5958: LD_ADDR_EXP 17
5962: PUSH
5963: LD_OWVAR 6
5967: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5968: LD_ADDR_EXP 18
5972: PUSH
5973: LD_OWVAR 17
5977: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5978: LD_ADDR_EXP 19
5982: PUSH
5983: LD_OWVAR 15
5987: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5988: LD_ADDR_EXP 20
5992: PUSH
5993: LD_OWVAR 16
5997: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5998: LD_ADDR_EXP 21
6002: PUSH
6003: EMPTY
6004: PUSH
6005: EMPTY
6006: LIST
6007: ST_TO_ADDR
// for i in mp_teams do
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_OWVAR 12
6017: PUSH
6018: FOR_IN
6019: IFFALSE 6062
// if i then
6021: LD_VAR 0 2
6025: IFFALSE 6060
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
6027: LD_ADDR_EXP 21
6031: PUSH
6032: LD_EXP 21
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: LD_EXP 21
6044: PUSH
6045: LD_INT 1
6047: ARRAY
6048: PUSH
6049: LD_VAR 0 2
6053: UNION
6054: PPUSH
6055: CALL_OW 1
6059: ST_TO_ADDR
6060: GO 6018
6062: POP
6063: POP
// for i := 1 to multi_settings_counter do
6064: LD_ADDR_VAR 0 2
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_EXP 29
6078: PUSH
6079: FOR_TO
6080: IFFALSE 6122
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
6082: LD_ADDR_EXP 28
6086: PUSH
6087: LD_EXP 28
6091: PPUSH
6092: LD_EXP 28
6096: PUSH
6097: LD_INT 1
6099: PLUS
6100: PPUSH
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 426
6110: PUSH
6111: LD_INT 1
6113: PLUS
6114: PPUSH
6115: CALL_OW 1
6119: ST_TO_ADDR
6120: GO 6079
6122: POP
6123: POP
// end else
6124: GO 6312
// begin your_side := 3 ;
6126: LD_ADDR_OWVAR 2
6130: PUSH
6131: LD_INT 3
6133: ST_TO_ADDR
// multi_gametype := 1 ;
6134: LD_ADDR_EXP 17
6138: PUSH
6139: LD_INT 1
6141: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 0 , 0 , 0 , 3 ] ;
6142: LD_ADDR_EXP 18
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 1
6155: PUSH
6156: LD_INT 2
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 ] ;
6181: LD_ADDR_EXP 19
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 0 , 0 , 0 , 3 ] ;
6220: LD_ADDR_EXP 20
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: LD_INT 0
6230: PUSH
6231: LD_INT 3
6233: PUSH
6234: LD_INT 3
6236: PUSH
6237: LD_INT 0
6239: PUSH
6240: LD_INT 0
6242: PUSH
6243: LD_INT 0
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 8 ] ] ;
6259: LD_ADDR_EXP 21
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: LD_INT 8
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6281: LD_ADDR_EXP 28
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 4
6291: PUSH
6292: LD_INT 4
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
6312: LD_ADDR_EXP 42
6316: PUSH
6317: LD_EXP 18
6321: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6322: LD_ADDR_EXP 22
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: LD_INT 0
6338: PUSH
6339: LD_INT 0
6341: PUSH
6342: LD_INT 0
6344: PUSH
6345: LD_INT 0
6347: PUSH
6348: LD_INT 0
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6361: LD_ADDR_EXP 25
6365: PUSH
6366: LD_INT 0
6368: PUSH
6369: LD_INT 0
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: LD_INT 0
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: LD_INT 0
6386: PUSH
6387: LD_INT 0
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6400: LD_ADDR_EXP 36
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: LD_INT 0
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: ST_TO_ADDR
// multi_teamgame := true ;
6439: LD_ADDR_EXP 26
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6447: LD_ADDR_EXP 24
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: ST_TO_ADDR
// multi_custom_commanders := true ;
6458: LD_ADDR_EXP 27
6462: PUSH
6463: LD_INT 1
6465: ST_TO_ADDR
// multi_commanders := [ ] ;
6466: LD_ADDR_EXP 35
6470: PUSH
6471: EMPTY
6472: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6473: LD_ADDR_EXP 38
6477: PUSH
6478: EMPTY
6479: ST_TO_ADDR
// multi_players_amount := 0 ;
6480: LD_ADDR_EXP 37
6484: PUSH
6485: LD_INT 0
6487: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6488: LD_ADDR_EXP 23
6492: PUSH
6493: LD_INT 5
6495: PUSH
6496: LD_INT 6
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 7
6505: PUSH
6506: LD_INT 8
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 9
6515: PUSH
6516: LD_INT 10
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6528: LD_ADDR_EXP 40
6532: PUSH
6533: EMPTY
6534: PUSH
6535: EMPTY
6536: PUSH
6537: EMPTY
6538: PUSH
6539: EMPTY
6540: PUSH
6541: EMPTY
6542: PUSH
6543: EMPTY
6544: PUSH
6545: EMPTY
6546: PUSH
6547: EMPTY
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: ST_TO_ADDR
// for i := 1 to 8 do
6559: LD_ADDR_VAR 0 2
6563: PUSH
6564: DOUBLE
6565: LD_INT 1
6567: DEC
6568: ST_TO_ADDR
6569: LD_INT 8
6571: PUSH
6572: FOR_TO
6573: IFFALSE 6908
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6575: LD_VAR 0 2
6579: PPUSH
6580: CALL_OW 530
6584: IFFALSE 6742
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6586: LD_ADDR_EXP 22
6590: PUSH
6591: LD_EXP 22
6595: PPUSH
6596: LD_VAR 0 2
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 1
6608: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6609: LD_ADDR_EXP 20
6613: PUSH
6614: LD_EXP 20
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: LD_INT 0
6626: PPUSH
6627: CALL_OW 1
6631: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6632: LD_ADDR_EXP 18
6636: PUSH
6637: LD_EXP 18
6641: PPUSH
6642: LD_VAR 0 2
6646: PPUSH
6647: LD_INT 0
6649: PPUSH
6650: CALL_OW 1
6654: ST_TO_ADDR
// for j := 1 to multi_teams do
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: DOUBLE
6661: LD_INT 1
6663: DEC
6664: ST_TO_ADDR
6665: LD_EXP 21
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6740
// begin if i in multi_teams [ j ] then
6673: LD_VAR 0 2
6677: PUSH
6678: LD_EXP 21
6682: PUSH
6683: LD_VAR 0 3
6687: ARRAY
6688: IN
6689: IFFALSE 6738
// begin tmp := multi_teams [ j ] diff i ;
6691: LD_ADDR_VAR 0 5
6695: PUSH
6696: LD_EXP 21
6700: PUSH
6701: LD_VAR 0 3
6705: ARRAY
6706: PUSH
6707: LD_VAR 0 2
6711: DIFF
6712: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6713: LD_ADDR_EXP 21
6717: PUSH
6718: LD_EXP 21
6722: PPUSH
6723: LD_VAR 0 3
6727: PPUSH
6728: LD_VAR 0 5
6732: PPUSH
6733: CALL_OW 1
6737: ST_TO_ADDR
// end ; end ;
6738: GO 6670
6740: POP
6741: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6742: LD_EXP 20
6746: PUSH
6747: LD_VAR 0 2
6751: ARRAY
6752: IFFALSE 6773
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_VAR 0 2
6764: ARRAY
6765: PUSH
6766: LD_EXP 24
6770: IN
6771: NOT
6772: AND
6773: IFFALSE 6814
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6775: LD_ADDR_EXP 20
6779: PUSH
6780: LD_EXP 20
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_EXP 24
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_EXP 24
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: PPUSH
6809: CALL_OW 1
6813: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6814: LD_EXP 20
6818: PUSH
6819: LD_VAR 0 2
6823: ARRAY
6824: NOT
6825: IFFALSE 6840
6827: PUSH
6828: LD_EXP 18
6832: PUSH
6833: LD_VAR 0 2
6837: ARRAY
6838: NOT
6839: AND
6840: IFFALSE 6855
6842: PUSH
6843: LD_EXP 22
6847: PUSH
6848: LD_VAR 0 2
6852: ARRAY
6853: NOT
6854: AND
6855: IFFALSE 6880
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6857: LD_ADDR_EXP 25
6861: PUSH
6862: LD_EXP 25
6866: PPUSH
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_INT 1
6874: PPUSH
6875: CALL_OW 1
6879: ST_TO_ADDR
// if multi_sides [ i ] then
6880: LD_EXP 18
6884: PUSH
6885: LD_VAR 0 2
6889: ARRAY
6890: IFFALSE 6906
// multi_players_amount := multi_players_amount + 1 ;
6892: LD_ADDR_EXP 37
6896: PUSH
6897: LD_EXP 37
6901: PUSH
6902: LD_INT 1
6904: PLUS
6905: ST_TO_ADDR
// end ;
6906: GO 6572
6908: POP
6909: POP
// for i in multi_teams do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_EXP 21
6919: PUSH
6920: FOR_IN
6921: IFFALSE 7029
// begin for j := 2 to i do
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: DOUBLE
6929: LD_INT 2
6931: DEC
6932: ST_TO_ADDR
6933: LD_VAR 0 2
6937: PUSH
6938: FOR_TO
6939: IFFALSE 7025
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6941: LD_VAR 0 2
6945: PUSH
6946: LD_VAR 0 3
6950: ARRAY
6951: PPUSH
6952: LD_VAR 0 2
6956: PUSH
6957: LD_INT 1
6959: ARRAY
6960: PPUSH
6961: CALL_OW 343
// for x := 1 to j - 1 do
6965: LD_ADDR_VAR 0 4
6969: PUSH
6970: DOUBLE
6971: LD_INT 1
6973: DEC
6974: ST_TO_ADDR
6975: LD_VAR 0 3
6979: PUSH
6980: LD_INT 1
6982: MINUS
6983: PUSH
6984: FOR_TO
6985: IFFALSE 7021
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6987: LD_VAR 0 2
6991: PUSH
6992: LD_VAR 0 3
6996: ARRAY
6997: PPUSH
6998: LD_VAR 0 2
7002: PUSH
7003: LD_VAR 0 4
7007: ARRAY
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 1
7014: PPUSH
7015: CALL_OW 80
7019: GO 6984
7021: POP
7022: POP
// end ;
7023: GO 6938
7025: POP
7026: POP
// end ;
7027: GO 6920
7029: POP
7030: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
7031: LD_ADDR_OWVAR 67
7035: PUSH
7036: LD_INT 1
7038: PUSH
7039: LD_INT 2
7041: PUSH
7042: LD_INT 3
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_EXP 28
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: ARRAY
7059: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
7060: LD_ADDR_EXP 30
7064: PUSH
7065: LD_INT 9
7067: PUSH
7068: LD_INT 12
7070: PUSH
7071: LD_INT 15
7073: PUSH
7074: LD_INT 18
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: LD_EXP 28
7087: PUSH
7088: LD_INT 2
7090: ARRAY
7091: ARRAY
7092: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
7093: LD_ADDR_EXP 31
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: LD_EXP 28
7120: PUSH
7121: LD_INT 3
7123: ARRAY
7124: ARRAY
7125: ST_TO_ADDR
// multi_crates_spawn := [ [ 9000 , 0 0$18 ] , [ 11000 , 0 0$16 ] , [ 13000 , 0 0$14 ] , [ 15000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
7126: LD_ADDR_EXP 32
7130: PUSH
7131: LD_INT 9000
7133: PUSH
7134: LD_INT 630
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 11000
7143: PUSH
7144: LD_INT 560
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 13000
7153: PUSH
7154: LD_INT 490
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 15000
7163: PUSH
7164: LD_INT 420
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_EXP 28
7181: PUSH
7182: LD_INT 4
7184: ARRAY
7185: ARRAY
7186: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
7187: LD_ADDR_EXP 33
7191: PUSH
7192: LD_INT 0
7194: PUSH
7195: LD_INT 1
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: LD_EXP 28
7214: PUSH
7215: LD_INT 5
7217: ARRAY
7218: ARRAY
7219: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
7220: LD_ADDR_EXP 34
7224: PUSH
7225: LD_INT 0
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: LD_INT 2
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: LIST
7238: PUSH
7239: LD_EXP 28
7243: PUSH
7244: LD_INT 6
7246: ARRAY
7247: ARRAY
7248: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7249: LD_ADDR_EXP 39
7253: PUSH
7254: LD_INT 10500
7256: PUSH
7257: LD_INT 31500
7259: PUSH
7260: LD_INT 52500
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: PUSH
7268: LD_OWVAR 67
7272: ARRAY
7273: ST_TO_ADDR
// end ;
7274: LD_VAR 0 1
7278: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7279: LD_INT 0
7281: PPUSH
7282: PPUSH
// if not multi_sides [ preferSide ] then
7283: LD_EXP 18
7287: PUSH
7288: LD_VAR 0 1
7292: ARRAY
7293: NOT
7294: IFFALSE 7308
// begin result := preferSide ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 1
7305: ST_TO_ADDR
// exit ;
7306: GO 7355
// end ; for i := 1 to 8 do
7308: LD_ADDR_VAR 0 3
7312: PUSH
7313: DOUBLE
7314: LD_INT 1
7316: DEC
7317: ST_TO_ADDR
7318: LD_INT 8
7320: PUSH
7321: FOR_TO
7322: IFFALSE 7353
// if not multi_sides [ i ] then
7324: LD_EXP 18
7328: PUSH
7329: LD_VAR 0 3
7333: ARRAY
7334: NOT
7335: IFFALSE 7351
// begin result := i ;
7337: LD_ADDR_VAR 0 2
7341: PUSH
7342: LD_VAR 0 3
7346: ST_TO_ADDR
// exit ;
7347: POP
7348: POP
7349: GO 7355
// end ;
7351: GO 7321
7353: POP
7354: POP
// end ;
7355: LD_VAR 0 2
7359: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7360: LD_INT 0
7362: PPUSH
// uc_side := side ;
7363: LD_ADDR_OWVAR 20
7367: PUSH
7368: LD_VAR 0 1
7372: ST_TO_ADDR
// uc_nation := nation_russian ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 3
7380: ST_TO_ADDR
// hc_importance := 100 ;
7381: LD_ADDR_OWVAR 32
7385: PUSH
7386: LD_INT 100
7388: ST_TO_ADDR
// if num = 1 then
7389: LD_VAR 0 2
7393: PUSH
7394: LD_INT 1
7396: EQUAL
7397: IFFALSE 7464
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7399: LD_INT 1
7401: PPUSH
7402: LD_EXP 31
7406: PUSH
7407: LD_INT 1
7409: PLUS
7410: PPUSH
7411: CALL_OW 381
// hc_gallery := ru ;
7415: LD_ADDR_OWVAR 33
7419: PUSH
7420: LD_STRING ru
7422: ST_TO_ADDR
// hc_face_number := 25 ;
7423: LD_ADDR_OWVAR 34
7427: PUSH
7428: LD_INT 25
7430: ST_TO_ADDR
// hc_name := Xavier ;
7431: LD_ADDR_OWVAR 26
7435: PUSH
7436: LD_STRING Xavier
7438: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7439: LD_ADDR_OWVAR 29
7443: PUSH
7444: LD_INT 12
7446: PUSH
7447: LD_INT 10
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: ST_TO_ADDR
// result := CreateHuman ;
7454: LD_ADDR_VAR 0 3
7458: PUSH
7459: CALL_OW 44
7463: ST_TO_ADDR
// end ; if num = 2 then
7464: LD_VAR 0 2
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: IFFALSE 7539
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7474: LD_INT 1
7476: PPUSH
7477: LD_EXP 31
7481: PUSH
7482: LD_INT 2
7484: PLUS
7485: PPUSH
7486: CALL_OW 383
// hc_gallery := ru ;
7490: LD_ADDR_OWVAR 33
7494: PUSH
7495: LD_STRING ru
7497: ST_TO_ADDR
// hc_face_number := 1 ;
7498: LD_ADDR_OWVAR 34
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// hc_name := Burlak ;
7506: LD_ADDR_OWVAR 26
7510: PUSH
7511: LD_STRING Burlak
7513: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7514: LD_ADDR_OWVAR 29
7518: PUSH
7519: LD_INT 10
7521: PUSH
7522: LD_INT 11
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// result := CreateHuman ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// end ; if num = 3 then
7539: LD_VAR 0 2
7543: PUSH
7544: LD_INT 3
7546: EQUAL
7547: IFFALSE 7614
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7549: LD_INT 1
7551: PPUSH
7552: LD_EXP 31
7556: PUSH
7557: LD_INT 1
7559: PLUS
7560: PPUSH
7561: CALL_OW 381
// hc_gallery := ru ;
7565: LD_ADDR_OWVAR 33
7569: PUSH
7570: LD_STRING ru
7572: ST_TO_ADDR
// hc_face_number := 18 ;
7573: LD_ADDR_OWVAR 34
7577: PUSH
7578: LD_INT 18
7580: ST_TO_ADDR
// hc_name := Vsevolod ;
7581: LD_ADDR_OWVAR 26
7585: PUSH
7586: LD_STRING Vsevolod
7588: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7589: LD_ADDR_OWVAR 29
7593: PUSH
7594: LD_INT 12
7596: PUSH
7597: LD_INT 11
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: ST_TO_ADDR
// result := CreateHuman ;
7604: LD_ADDR_VAR 0 3
7608: PUSH
7609: CALL_OW 44
7613: ST_TO_ADDR
// end ; end ;
7614: LD_VAR 0 3
7618: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7619: LD_INT 0
7621: PPUSH
7622: PPUSH
7623: PPUSH
// if not multi_apeman then
7624: LD_EXP 33
7628: NOT
7629: IFFALSE 7633
// exit ;
7631: GO 7711
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 6
7640: PUSH
7641: LD_INT 9
7643: PUSH
7644: LD_INT 12
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: PUSH
7652: LD_EXP 33
7656: ARRAY
7657: ST_TO_ADDR
// for i := 1 to tmp do
7658: LD_ADDR_VAR 0 2
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 3
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7709
// begin uc_side := 0 ;
7676: LD_ADDR_OWVAR 20
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7684: LD_INT 5
7686: NEG
7687: PPUSH
7688: CALL 50365 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7692: CALL_OW 44
7696: PPUSH
7697: LD_INT 21
7699: PPUSH
7700: LD_INT 0
7702: PPUSH
7703: CALL_OW 49
// end ;
7707: GO 7673
7709: POP
7710: POP
// end ;
7711: LD_VAR 0 1
7715: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount , hasBulldozer ; begin
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i := 1 to 8 do
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_INT 8
7741: PUSH
7742: FOR_TO
7743: IFFALSE 9041
// begin if not multi_sides [ i ] then
7745: LD_EXP 18
7749: PUSH
7750: LD_VAR 0 2
7754: ARRAY
7755: NOT
7756: IFFALSE 7760
// continue ;
7758: GO 7742
// if multi_buildings [ multi_sides [ i ] ] then
7760: LD_EXP 40
7764: PUSH
7765: LD_EXP 18
7769: PUSH
7770: LD_VAR 0 2
7774: ARRAY
7775: ARRAY
7776: IFFALSE 8010
// begin uc_side := i ;
7778: LD_ADDR_OWVAR 20
7782: PUSH
7783: LD_VAR 0 2
7787: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7788: LD_ADDR_OWVAR 21
7792: PUSH
7793: LD_EXP 20
7797: PUSH
7798: LD_VAR 0 2
7802: ARRAY
7803: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7804: LD_ADDR_VAR 0 3
7808: PUSH
7809: LD_EXP 40
7813: PUSH
7814: LD_EXP 18
7818: PUSH
7819: LD_VAR 0 2
7823: ARRAY
7824: ARRAY
7825: PUSH
7826: FOR_IN
7827: IFFALSE 8008
// begin bc_type := j [ 1 ] ;
7829: LD_ADDR_OWVAR 42
7833: PUSH
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 1
7841: ARRAY
7842: ST_TO_ADDR
// bc_level := 2 ;
7843: LD_ADDR_OWVAR 43
7847: PUSH
7848: LD_INT 2
7850: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7851: LD_ADDR_VAR 0 4
7855: PUSH
7856: LD_VAR 0 3
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: PUSH
7865: LD_INT 1
7867: ARRAY
7868: PPUSH
7869: LD_VAR 0 3
7873: PUSH
7874: LD_INT 2
7876: ARRAY
7877: PUSH
7878: LD_INT 2
7880: ARRAY
7881: PPUSH
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 2
7889: ARRAY
7890: PUSH
7891: LD_INT 3
7893: ARRAY
7894: PPUSH
7895: CALL_OW 47
7899: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 1
7907: ARRAY
7908: PUSH
7909: LD_INT 0
7911: EQUAL
7912: IFFALSE 8006
// begin SetBName ( b , j [ 3 ] ) ;
7914: LD_VAR 0 4
7918: PPUSH
7919: LD_VAR 0 3
7923: PUSH
7924: LD_INT 3
7926: ARRAY
7927: PPUSH
7928: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7932: LD_VAR 0 4
7936: PPUSH
7937: CALL_OW 274
7941: PPUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_INT 120
7947: PUSH
7948: LD_INT 100
7950: PUSH
7951: LD_INT 80
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_OWVAR 67
7963: ARRAY
7964: PPUSH
7965: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7969: LD_VAR 0 4
7973: PPUSH
7974: CALL_OW 274
7978: PPUSH
7979: LD_INT 2
7981: PPUSH
7982: LD_INT 90
7984: PUSH
7985: LD_INT 60
7987: PUSH
7988: LD_INT 30
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: LD_OWVAR 67
8000: ARRAY
8001: PPUSH
8002: CALL_OW 277
// end ; end ;
8006: GO 7826
8008: POP
8009: POP
// end ; if multi_custom_commanders then
8010: LD_EXP 27
8014: IFFALSE 8223
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_VAR 0 2
8025: PPUSH
8026: LD_EXP 18
8030: PUSH
8031: LD_VAR 0 2
8035: ARRAY
8036: PPUSH
8037: CALL 7360 0 2
8041: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
8042: LD_ADDR_EXP 35
8046: PUSH
8047: LD_EXP 35
8051: PPUSH
8052: LD_EXP 35
8056: PUSH
8057: LD_INT 1
8059: PLUS
8060: PPUSH
8061: LD_VAR 0 6
8065: PPUSH
8066: CALL_OW 2
8070: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
8071: LD_VAR 0 6
8075: PPUSH
8076: CALL_OW 257
8080: PUSH
8081: LD_INT 3
8083: EQUAL
8084: IFFALSE 8188
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
8086: LD_INT 23
8088: PPUSH
8089: LD_INT 1
8091: PPUSH
8092: LD_INT 1
8094: PPUSH
8095: LD_INT 46
8097: PPUSH
8098: LD_INT 80
8100: PPUSH
8101: CALL 21058 0 5
// veh := CreateVehicle ;
8105: LD_ADDR_VAR 0 7
8109: PUSH
8110: CALL_OW 45
8114: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
8115: LD_VAR 0 7
8119: PPUSH
8120: LD_VAR 0 6
8124: PPUSH
8125: CALL_OW 255
8129: PUSH
8130: LD_INT 1
8132: NEG
8133: MUL
8134: PPUSH
8135: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_EXP 23
8148: PUSH
8149: LD_EXP 18
8153: PUSH
8154: LD_VAR 0 2
8158: ARRAY
8159: ARRAY
8160: PUSH
8161: LD_INT 2
8163: ARRAY
8164: PPUSH
8165: LD_INT 0
8167: PPUSH
8168: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8172: LD_VAR 0 6
8176: PPUSH
8177: LD_VAR 0 7
8181: PPUSH
8182: CALL_OW 52
// end else
8186: GO 8221
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8188: LD_VAR 0 6
8192: PPUSH
8193: LD_EXP 23
8197: PUSH
8198: LD_EXP 18
8202: PUSH
8203: LD_VAR 0 2
8207: ARRAY
8208: ARRAY
8209: PUSH
8210: LD_INT 1
8212: ARRAY
8213: PPUSH
8214: LD_INT 0
8216: PPUSH
8217: CALL_OW 49
// end else
8221: GO 8434
// begin uc_side := i ;
8223: LD_ADDR_OWVAR 20
8227: PUSH
8228: LD_VAR 0 2
8232: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8233: LD_ADDR_OWVAR 21
8237: PUSH
8238: LD_EXP 20
8242: PUSH
8243: LD_VAR 0 2
8247: ARRAY
8248: ST_TO_ADDR
// hc_importance := 100 ;
8249: LD_ADDR_OWVAR 32
8253: PUSH
8254: LD_INT 100
8256: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8257: LD_INT 0
8259: PPUSH
8260: LD_INT 1
8262: PPUSH
8263: LD_EXP 31
8267: PPUSH
8268: CALL_OW 380
// if multiplayer then
8272: LD_OWVAR 4
8276: IFFALSE 8334
// begin hc_name := mp_sides_players_names [ i ] ;
8278: LD_ADDR_OWVAR 26
8282: PUSH
8283: LD_OWVAR 19
8287: PUSH
8288: LD_VAR 0 2
8292: ARRAY
8293: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8294: LD_ADDR_OWVAR 33
8298: PUSH
8299: LD_STRING MULTIAVATARS
8301: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8302: LD_ADDR_OWVAR 34
8306: PUSH
8307: LD_VAR 0 2
8311: PPUSH
8312: CALL_OW 525
8316: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8317: LD_ADDR_OWVAR 27
8321: PUSH
8322: LD_VAR 0 2
8326: PPUSH
8327: CALL_OW 526
8331: ST_TO_ADDR
// end else
8332: GO 8366
// begin hc_gallery :=  ;
8334: LD_ADDR_OWVAR 33
8338: PUSH
8339: LD_STRING 
8341: ST_TO_ADDR
// hc_name :=  ;
8342: LD_ADDR_OWVAR 26
8346: PUSH
8347: LD_STRING 
8349: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8350: LD_ADDR_OWVAR 27
8354: PUSH
8355: LD_INT 1
8357: PPUSH
8358: LD_INT 2
8360: PPUSH
8361: CALL_OW 12
8365: ST_TO_ADDR
// end ; un := CreateHuman ;
8366: LD_ADDR_VAR 0 6
8370: PUSH
8371: CALL_OW 44
8375: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8376: LD_VAR 0 6
8380: PPUSH
8381: LD_EXP 23
8385: PUSH
8386: LD_EXP 18
8390: PUSH
8391: LD_VAR 0 2
8395: ARRAY
8396: ARRAY
8397: PUSH
8398: LD_INT 1
8400: ARRAY
8401: PPUSH
8402: LD_INT 0
8404: PPUSH
8405: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8409: LD_ADDR_EXP 35
8413: PUSH
8414: LD_EXP 35
8418: PPUSH
8419: LD_VAR 0 2
8423: PPUSH
8424: LD_VAR 0 6
8428: PPUSH
8429: CALL_OW 1
8433: ST_TO_ADDR
// end ; InitHc ;
8434: CALL_OW 19
// InitUc ;
8438: CALL_OW 18
// uc_side := i ;
8442: LD_ADDR_OWVAR 20
8446: PUSH
8447: LD_VAR 0 2
8451: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8452: LD_ADDR_OWVAR 21
8456: PUSH
8457: LD_EXP 20
8461: PUSH
8462: LD_VAR 0 2
8466: ARRAY
8467: ST_TO_ADDR
// hc_gallery :=  ;
8468: LD_ADDR_OWVAR 33
8472: PUSH
8473: LD_STRING 
8475: ST_TO_ADDR
// hc_name :=  ;
8476: LD_ADDR_OWVAR 26
8480: PUSH
8481: LD_STRING 
8483: ST_TO_ADDR
// hc_importance := 0 ;
8484: LD_ADDR_OWVAR 32
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// cl := 1 ;
8492: LD_ADDR_VAR 0 5
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// hasBulldozer := false ;
8500: LD_ADDR_VAR 0 11
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8508: LD_ADDR_VAR 0 3
8512: PUSH
8513: DOUBLE
8514: LD_INT 2
8516: DEC
8517: ST_TO_ADDR
8518: LD_EXP 30
8522: PUSH
8523: FOR_TO
8524: IFFALSE 9037
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8526: LD_VAR 0 3
8530: PUSH
8531: LD_INT 1
8533: MINUS
8534: PUSH
8535: LD_EXP 30
8539: PUSH
8540: LD_INT 1
8542: MINUS
8543: PUSH
8544: LD_INT 4
8546: DIVREAL
8547: MOD
8548: PUSH
8549: LD_INT 0
8551: EQUAL
8552: IFFALSE 8568
// cl := cl + 1 ;
8554: LD_ADDR_VAR 0 5
8558: PUSH
8559: LD_VAR 0 5
8563: PUSH
8564: LD_INT 1
8566: PLUS
8567: ST_TO_ADDR
// if cl > 4 then
8568: LD_VAR 0 5
8572: PUSH
8573: LD_INT 4
8575: GREATER
8576: IFFALSE 8586
// cl := 1 ;
8578: LD_ADDR_VAR 0 5
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8586: LD_INT 0
8588: PPUSH
8589: LD_VAR 0 5
8593: PPUSH
8594: LD_EXP 31
8598: PPUSH
8599: CALL_OW 380
// un := CreateHuman ;
8603: LD_ADDR_VAR 0 6
8607: PUSH
8608: CALL_OW 44
8612: ST_TO_ADDR
// if j > copy then
8613: LD_VAR 0 3
8617: PUSH
8618: LD_VAR 0 9
8622: GREATER
8623: IFFALSE 8652
// copy := Replace ( copy , j , un ) else
8625: LD_ADDR_VAR 0 9
8629: PUSH
8630: LD_VAR 0 9
8634: PPUSH
8635: LD_VAR 0 3
8639: PPUSH
8640: LD_VAR 0 6
8644: PPUSH
8645: CALL_OW 1
8649: ST_TO_ADDR
8650: GO 8734
// begin CopySkills ( copy [ j ] , un ) ;
8652: LD_VAR 0 9
8656: PUSH
8657: LD_VAR 0 3
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PPUSH
8668: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8672: LD_VAR 0 6
8676: PPUSH
8677: LD_INT 2
8679: PPUSH
8680: LD_VAR 0 9
8684: PUSH
8685: LD_VAR 0 3
8689: ARRAY
8690: PPUSH
8691: LD_INT 2
8693: PPUSH
8694: CALL_OW 260
8698: PPUSH
8699: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8703: LD_VAR 0 6
8707: PPUSH
8708: LD_INT 1
8710: PPUSH
8711: LD_VAR 0 9
8715: PUSH
8716: LD_VAR 0 3
8720: ARRAY
8721: PPUSH
8722: LD_INT 1
8724: PPUSH
8725: CALL_OW 260
8729: PPUSH
8730: CALL_OW 239
// end ; if multi_pos_area then
8734: LD_EXP 23
8738: IFFALSE 9035
// begin if GetClass ( un ) = 2 and not hasBulldozer then
8740: LD_VAR 0 6
8744: PPUSH
8745: CALL_OW 257
8749: PUSH
8750: LD_INT 2
8752: EQUAL
8753: IFFALSE 8762
8755: PUSH
8756: LD_VAR 0 11
8760: NOT
8761: AND
8762: IFFALSE 8850
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer , 80 ) ;
8764: LD_INT 24
8766: PPUSH
8767: LD_INT 1
8769: PPUSH
8770: LD_INT 1
8772: PPUSH
8773: LD_INT 53
8775: PPUSH
8776: LD_INT 80
8778: PPUSH
8779: CALL 21058 0 5
// veh := CreateVehicle ;
8783: LD_ADDR_VAR 0 7
8787: PUSH
8788: CALL_OW 45
8792: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8793: LD_VAR 0 7
8797: PPUSH
8798: LD_EXP 23
8802: PUSH
8803: LD_EXP 18
8807: PUSH
8808: LD_VAR 0 2
8812: ARRAY
8813: ARRAY
8814: PUSH
8815: LD_INT 2
8817: ARRAY
8818: PPUSH
8819: LD_INT 0
8821: PPUSH
8822: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8826: LD_VAR 0 6
8830: PPUSH
8831: LD_VAR 0 7
8835: PPUSH
8836: CALL_OW 52
// hasBulldozer := true ;
8840: LD_ADDR_VAR 0 11
8844: PUSH
8845: LD_INT 1
8847: ST_TO_ADDR
// continue ;
8848: GO 8523
// end ; if GetClass ( un ) = 3 then
8850: LD_VAR 0 6
8854: PPUSH
8855: CALL_OW 257
8859: PUSH
8860: LD_INT 3
8862: EQUAL
8863: IFFALSE 9002
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8865: LD_INT 22
8867: PPUSH
8868: LD_INT 1
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: LD_INT 45
8876: PUSH
8877: LD_INT 44
8879: PUSH
8880: LD_INT 43
8882: PUSH
8883: LD_INT 51
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: PUSH
8892: LD_VAR 0 3
8896: PUSH
8897: LD_INT 4
8899: MOD
8900: PUSH
8901: LD_INT 1
8903: PLUS
8904: ARRAY
8905: PPUSH
8906: LD_INT 80
8908: PPUSH
8909: CALL 21058 0 5
// veh := CreateVehicle ;
8913: LD_ADDR_VAR 0 7
8917: PUSH
8918: CALL_OW 45
8922: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8923: LD_VAR 0 7
8927: PPUSH
8928: LD_EXP 23
8932: PUSH
8933: LD_EXP 18
8937: PUSH
8938: LD_VAR 0 2
8942: ARRAY
8943: ARRAY
8944: PUSH
8945: LD_INT 2
8947: ARRAY
8948: PPUSH
8949: LD_INT 0
8951: PPUSH
8952: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8956: LD_VAR 0 6
8960: PPUSH
8961: LD_VAR 0 7
8965: PPUSH
8966: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8970: LD_VAR 0 7
8974: PPUSH
8975: CALL_OW 264
8979: PUSH
8980: LD_INT 51
8982: EQUAL
8983: IFFALSE 9000
// SetCargo ( veh , mat_cans , 100 ) ;
8985: LD_VAR 0 7
8989: PPUSH
8990: LD_INT 1
8992: PPUSH
8993: LD_INT 100
8995: PPUSH
8996: CALL_OW 290
// continue ;
9000: GO 8523
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
9002: LD_VAR 0 6
9006: PPUSH
9007: LD_EXP 23
9011: PUSH
9012: LD_EXP 18
9016: PUSH
9017: LD_VAR 0 2
9021: ARRAY
9022: ARRAY
9023: PUSH
9024: LD_INT 1
9026: ARRAY
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 49
// end ; end ;
9035: GO 8523
9037: POP
9038: POP
// end ;
9039: GO 7742
9041: POP
9042: POP
// end ;
9043: LD_VAR 0 1
9047: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
9052: PPUSH
9053: PPUSH
9054: PPUSH
// if not multi_support then
9055: LD_EXP 34
9059: NOT
9060: IFFALSE 9064
// exit ;
9062: GO 9351
// result := [ ] ;
9064: LD_ADDR_VAR 0 1
9068: PUSH
9069: EMPTY
9070: ST_TO_ADDR
// for i := 1 to 8 do
9071: LD_ADDR_VAR 0 2
9075: PUSH
9076: DOUBLE
9077: LD_INT 1
9079: DEC
9080: ST_TO_ADDR
9081: LD_INT 8
9083: PUSH
9084: FOR_TO
9085: IFFALSE 9349
// begin result := Replace ( result , i , [ ] ) ;
9087: LD_ADDR_VAR 0 1
9091: PUSH
9092: LD_VAR 0 1
9096: PPUSH
9097: LD_VAR 0 2
9101: PPUSH
9102: EMPTY
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// if multi_sides [ i ] then
9109: LD_EXP 18
9113: PUSH
9114: LD_VAR 0 2
9118: ARRAY
9119: IFFALSE 9347
// begin tmp := [ ] ;
9121: LD_ADDR_VAR 0 5
9125: PUSH
9126: EMPTY
9127: ST_TO_ADDR
// if multi_support = 1 then
9128: LD_EXP 34
9132: PUSH
9133: LD_INT 1
9135: EQUAL
9136: IFFALSE 9225
// begin uc_side := i ;
9138: LD_ADDR_OWVAR 20
9142: PUSH
9143: LD_VAR 0 2
9147: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9148: LD_ADDR_OWVAR 21
9152: PUSH
9153: LD_EXP 20
9157: PUSH
9158: LD_VAR 0 2
9162: ARRAY
9163: ST_TO_ADDR
// for j := 1 to 2 do
9164: LD_ADDR_VAR 0 3
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_INT 2
9176: PUSH
9177: FOR_TO
9178: IFFALSE 9223
// begin InitHC_All ( ) ;
9180: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 3 ) ;
9184: LD_INT 0
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: LD_INT 4
9192: PPUSH
9193: CALL_OW 12
9197: PPUSH
9198: LD_INT 3
9200: PPUSH
9201: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9205: LD_ADDR_VAR 0 5
9209: PUSH
9210: LD_VAR 0 5
9214: PUSH
9215: CALL_OW 44
9219: ADD
9220: ST_TO_ADDR
// end ;
9221: GO 9177
9223: POP
9224: POP
// end ; if multi_support = 2 then
9225: LD_EXP 34
9229: PUSH
9230: LD_INT 2
9232: EQUAL
9233: IFFALSE 9322
// begin uc_side := i ;
9235: LD_ADDR_OWVAR 20
9239: PUSH
9240: LD_VAR 0 2
9244: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9245: LD_ADDR_OWVAR 21
9249: PUSH
9250: LD_EXP 20
9254: PUSH
9255: LD_VAR 0 2
9259: ARRAY
9260: ST_TO_ADDR
// for j := 1 to 4 do
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: DOUBLE
9267: LD_INT 1
9269: DEC
9270: ST_TO_ADDR
9271: LD_INT 4
9273: PUSH
9274: FOR_TO
9275: IFFALSE 9320
// begin InitHC_All ( ) ;
9277: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
9281: LD_INT 0
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: LD_INT 4
9289: PPUSH
9290: CALL_OW 12
9294: PPUSH
9295: LD_INT 5
9297: PPUSH
9298: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9302: LD_ADDR_VAR 0 5
9306: PUSH
9307: LD_VAR 0 5
9311: PUSH
9312: CALL_OW 44
9316: ADD
9317: ST_TO_ADDR
// end ;
9318: GO 9274
9320: POP
9321: POP
// end ; result := Replace ( result , i , tmp ) ;
9322: LD_ADDR_VAR 0 1
9326: PUSH
9327: LD_VAR 0 1
9331: PPUSH
9332: LD_VAR 0 2
9336: PPUSH
9337: LD_VAR 0 5
9341: PPUSH
9342: CALL_OW 1
9346: ST_TO_ADDR
// end ; end ;
9347: GO 9084
9349: POP
9350: POP
// end ;
9351: LD_VAR 0 1
9355: RET
// export function Multiplayer_Start ( ) ; begin
9356: LD_INT 0
9358: PPUSH
// Multiplayer_PrepareApemans ( ) ;
9359: CALL 7619 0 0
// Multiplayer_PreparePlayers ( ) ;
9363: CALL 7716 0 0
// Multiplayer_InitPointSystem ( ) ;
9367: CALL 10193 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9371: LD_INT 20
9373: PPUSH
9374: CALL 10377 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9378: LD_INT 150
9380: PPUSH
9381: CALL 10377 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9385: LD_INT 5
9387: PPUSH
9388: CALL 10377 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9392: LD_INT 40
9394: NEG
9395: PPUSH
9396: CALL 10377 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9400: LD_INT 200
9402: PPUSH
9403: CALL 10377 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9407: LD_INT 2
9409: PPUSH
9410: CALL 10377 0 1
// if multi_support then
9414: LD_EXP 34
9418: IFFALSE 9430
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9420: LD_ADDR_EXP 38
9424: PUSH
9425: CALL 9048 0 0
9429: ST_TO_ADDR
// if multi_sides [ your_side ] then
9430: LD_EXP 18
9434: PUSH
9435: LD_OWVAR 2
9439: ARRAY
9440: IFFALSE 9467
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9442: LD_INT 22
9444: PUSH
9445: LD_OWVAR 2
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 69
9458: PUSH
9459: LD_INT 1
9461: ARRAY
9462: PPUSH
9463: CALL_OW 87
// end ;
9467: LD_VAR 0 1
9471: RET
// export function Multiplayer_End ( ) ; var i , j , s , tmp ; begin
9472: LD_INT 0
9474: PPUSH
9475: PPUSH
9476: PPUSH
9477: PPUSH
9478: PPUSH
// tmp := [ ] ;
9479: LD_ADDR_VAR 0 5
9483: PUSH
9484: EMPTY
9485: ST_TO_ADDR
// for i := 1 to 8 do
9486: LD_ADDR_VAR 0 2
9490: PUSH
9491: DOUBLE
9492: LD_INT 1
9494: DEC
9495: ST_TO_ADDR
9496: LD_INT 8
9498: PUSH
9499: FOR_TO
9500: IFFALSE 9536
// if multi_sides [ i ] then
9502: LD_EXP 18
9506: PUSH
9507: LD_VAR 0 2
9511: ARRAY
9512: IFFALSE 9534
// tmp := Join ( tmp , i ) ;
9514: LD_ADDR_VAR 0 5
9518: PUSH
9519: LD_VAR 0 5
9523: PPUSH
9524: LD_VAR 0 2
9528: PPUSH
9529: CALL 54238 0 2
9533: ST_TO_ADDR
9534: GO 9499
9536: POP
9537: POP
// repeat wait ( 0 0$1 ) ;
9538: LD_INT 35
9540: PPUSH
9541: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9545: LD_OWVAR 1
9549: PUSH
9550: LD_EXP 39
9554: GREATER
9555: IFFALSE 9563
9557: PUSH
9558: LD_EXP 34
9562: AND
9563: IFFALSE 9755
// begin if tick mod 2 2$00 = 0 then
9565: LD_OWVAR 1
9569: PUSH
9570: LD_INT 4200
9572: MOD
9573: PUSH
9574: LD_INT 0
9576: EQUAL
9577: IFFALSE 9755
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
9579: LD_ADDR_VAR 0 5
9583: PUSH
9584: LD_VAR 0 5
9588: PPUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 5
9596: PPUSH
9597: CALL 18262 0 1
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL 20588 0 4
9609: ST_TO_ADDR
// for s := 1 to tmp do
9610: LD_ADDR_VAR 0 4
9614: PUSH
9615: DOUBLE
9616: LD_INT 1
9618: DEC
9619: ST_TO_ADDR
9620: LD_VAR 0 5
9624: PUSH
9625: FOR_TO
9626: IFFALSE 9753
// begin i := tmp [ s ] ;
9628: LD_ADDR_VAR 0 2
9632: PUSH
9633: LD_VAR 0 5
9637: PUSH
9638: LD_VAR 0 4
9642: ARRAY
9643: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
9644: LD_EXP 18
9648: PUSH
9649: LD_VAR 0 2
9653: ARRAY
9654: IFFALSE 9669
9656: PUSH
9657: LD_EXP 36
9661: PUSH
9662: LD_VAR 0 2
9666: ARRAY
9667: NOT
9668: AND
9669: IFFALSE 9683
9671: PUSH
9672: LD_EXP 38
9676: PUSH
9677: LD_VAR 0 2
9681: ARRAY
9682: AND
9683: IFFALSE 9751
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9685: LD_EXP 38
9689: PUSH
9690: LD_VAR 0 2
9694: ARRAY
9695: PUSH
9696: LD_INT 1
9698: ARRAY
9699: PPUSH
9700: LD_INT 11
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9710: LD_ADDR_EXP 38
9714: PUSH
9715: LD_EXP 38
9719: PPUSH
9720: LD_VAR 0 2
9724: PPUSH
9725: LD_EXP 38
9729: PUSH
9730: LD_VAR 0 2
9734: ARRAY
9735: PPUSH
9736: LD_INT 1
9738: PPUSH
9739: CALL_OW 3
9743: PPUSH
9744: CALL_OW 1
9748: ST_TO_ADDR
// break ;
9749: GO 9753
// end ; end ;
9751: GO 9625
9753: POP
9754: POP
// end ; end ; if not multi_custom_commanders then
9755: LD_EXP 27
9759: NOT
9760: IFFALSE 9875
// begin for i := 1 to 8 do
9762: LD_ADDR_VAR 0 2
9766: PUSH
9767: DOUBLE
9768: LD_INT 1
9770: DEC
9771: ST_TO_ADDR
9772: LD_INT 8
9774: PUSH
9775: FOR_TO
9776: IFFALSE 9849
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9778: LD_INT 22
9780: PUSH
9781: LD_VAR 0 2
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PPUSH
9790: CALL_OW 69
9794: PUSH
9795: LD_INT 0
9797: EQUAL
9798: IFFALSE 9813
9800: PUSH
9801: LD_EXP 36
9805: PUSH
9806: LD_VAR 0 2
9810: ARRAY
9811: NOT
9812: AND
9813: IFFALSE 9847
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9815: LD_ADDR_EXP 36
9819: PUSH
9820: LD_EXP 36
9824: PPUSH
9825: LD_VAR 0 2
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: CALL_OW 1
9837: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9838: LD_VAR 0 2
9842: PPUSH
9843: CALL 10447 0 1
// end ; end ;
9847: GO 9775
9849: POP
9850: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9851: LD_EXP 36
9855: PPUSH
9856: CALL 18262 0 1
9860: PUSH
9861: LD_EXP 18
9865: PPUSH
9866: CALL 18262 0 1
9870: EQUAL
9871: IFFALSE 9875
// break ;
9873: GO 9899
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9875: CALL 10013 0 0
9879: NOT
9880: IFFALSE 9888
9882: PUSH
9883: LD_EXP 2
9887: AND
9888: IFTRUE 9897
9890: PUSH
9891: LD_EXP 35
9895: NOT
9896: OR
9897: IFFALSE 9538
// game := false ;
9899: LD_ADDR_EXP 2
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// for i := 1 to 8 do
9907: LD_ADDR_VAR 0 2
9911: PUSH
9912: DOUBLE
9913: LD_INT 1
9915: DEC
9916: ST_TO_ADDR
9917: LD_INT 8
9919: PUSH
9920: FOR_TO
9921: IFFALSE 9957
// begin if multi_sides [ i ] then
9923: LD_EXP 18
9927: PUSH
9928: LD_VAR 0 2
9932: ARRAY
9933: IFFALSE 9955
// SetMultiScore ( i , multi_points [ i ] ) ;
9935: LD_VAR 0 2
9939: PPUSH
9940: LD_EXP 43
9944: PUSH
9945: LD_VAR 0 2
9949: ARRAY
9950: PPUSH
9951: CALL_OW 506
// end ;
9955: GO 9920
9957: POP
9958: POP
// if multi_loosers [ your_side ] then
9959: LD_EXP 36
9963: PUSH
9964: LD_OWVAR 2
9968: ARRAY
9969: IFFALSE 9992
// begin if Multiplayer then
9971: LD_OWVAR 4
9975: IFFALSE 9983
// YouLostInMultiplayer else
9977: CALL_OW 107
9981: GO 9990
// YouLost (  ) ;
9983: LD_STRING 
9985: PPUSH
9986: CALL_OW 104
// end else
9990: GO 10008
// begin if Multiplayer then
9992: LD_OWVAR 4
9996: IFFALSE 10004
// YouWinInMultiplayer else
9998: CALL_OW 106
10002: GO 10008
// YouWin ;
10004: CALL_OW 103
// end ; end ;
10008: LD_VAR 0 1
10012: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
10013: LD_INT 0
10015: PPUSH
10016: PPUSH
// result := false ;
10017: LD_ADDR_VAR 0 1
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// for side in botSides do
10025: LD_ADDR_VAR 0 2
10029: PUSH
10030: LD_EXP 3
10034: PUSH
10035: FOR_IN
10036: IFFALSE 10097
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
10038: LD_ADDR_VAR 0 1
10042: PUSH
10043: LD_INT 22
10045: PUSH
10046: LD_VAR 0 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 50
10067: PUSH
10068: EMPTY
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 69
10080: PUSH
10081: LD_INT 0
10083: GREATER
10084: ST_TO_ADDR
// if result then
10085: LD_VAR 0 1
10089: IFFALSE 10095
// exit ;
10091: POP
10092: POP
10093: GO 10099
// end ;
10095: GO 10035
10097: POP
10098: POP
// end ;
10099: LD_VAR 0 1
10103: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
10104: LD_INT 0
10106: PPUSH
10107: PPUSH
// result := [ ] ;
10108: LD_ADDR_VAR 0 1
10112: PUSH
10113: EMPTY
10114: ST_TO_ADDR
// for i := 1 to 8 do
10115: LD_ADDR_VAR 0 2
10119: PUSH
10120: DOUBLE
10121: LD_INT 1
10123: DEC
10124: ST_TO_ADDR
10125: LD_INT 8
10127: PUSH
10128: FOR_TO
10129: IFFALSE 10186
// begin if multi_sides [ i ] then
10131: LD_EXP 18
10135: PUSH
10136: LD_VAR 0 2
10140: ARRAY
10141: IFFALSE 10184
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
10143: LD_ADDR_VAR 0 1
10147: PUSH
10148: LD_VAR 0 1
10152: PUSH
10153: LD_STRING #coop-points
10155: PUSH
10156: LD_VAR 0 2
10160: PUSH
10161: LD_VAR 0 2
10165: PUSH
10166: LD_EXP 43
10170: PUSH
10171: LD_VAR 0 2
10175: ARRAY
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: ADD
10183: ST_TO_ADDR
// end ; end ;
10184: GO 10128
10186: POP
10187: POP
// end ;
10188: LD_VAR 0 1
10192: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
10193: LD_INT 0
10195: PPUSH
10196: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10197: LD_ADDR_EXP 43
10201: PUSH
10202: LD_INT 0
10204: PUSH
10205: LD_INT 0
10207: PUSH
10208: LD_INT 0
10210: PUSH
10211: LD_INT 0
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: LD_INT 0
10219: PUSH
10220: LD_INT 0
10222: PUSH
10223: LD_INT 0
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: ST_TO_ADDR
// multi_points_conditions := [ ] ;
10236: LD_ADDR_EXP 44
10240: PUSH
10241: EMPTY
10242: ST_TO_ADDR
// end ;
10243: LD_VAR 0 1
10247: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
10248: LD_INT 0
10250: PPUSH
// if not multi_points or not side or side > 8 then
10251: LD_EXP 43
10255: NOT
10256: IFTRUE 10265
10258: PUSH
10259: LD_VAR 0 1
10263: NOT
10264: OR
10265: IFTRUE 10277
10267: PUSH
10268: LD_VAR 0 1
10272: PUSH
10273: LD_INT 8
10275: GREATER
10276: OR
10277: IFFALSE 10281
// exit ;
10279: GO 10318
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
10281: LD_ADDR_EXP 43
10285: PUSH
10286: LD_EXP 43
10290: PPUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: LD_EXP 43
10300: PUSH
10301: LD_VAR 0 1
10305: ARRAY
10306: PUSH
10307: LD_VAR 0 2
10311: PLUS
10312: PPUSH
10313: CALL_OW 1
10317: ST_TO_ADDR
// end ;
10318: LD_VAR 0 3
10322: RET
// export function Multiplayer_GetPoints ( side ) ; begin
10323: LD_INT 0
10325: PPUSH
// if not multi_points or not side or side > 8 then
10326: LD_EXP 43
10330: NOT
10331: IFTRUE 10340
10333: PUSH
10334: LD_VAR 0 1
10338: NOT
10339: OR
10340: IFTRUE 10352
10342: PUSH
10343: LD_VAR 0 1
10347: PUSH
10348: LD_INT 8
10350: GREATER
10351: OR
10352: IFFALSE 10356
// exit ;
10354: GO 10372
// result := multi_points [ side ] ;
10356: LD_ADDR_VAR 0 2
10360: PUSH
10361: LD_EXP 43
10365: PUSH
10366: LD_VAR 0 1
10370: ARRAY
10371: ST_TO_ADDR
// end ;
10372: LD_VAR 0 2
10376: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
10377: LD_INT 0
10379: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
10380: LD_ADDR_EXP 44
10384: PUSH
10385: LD_EXP 44
10389: PPUSH
10390: LD_EXP 44
10394: PUSH
10395: LD_INT 1
10397: PLUS
10398: PPUSH
10399: LD_VAR 0 1
10403: PPUSH
10404: CALL_OW 1
10408: ST_TO_ADDR
// end ;
10409: LD_VAR 0 2
10413: RET
// export function Multiplayer_GetCondition ( id ) ; begin
10414: LD_INT 0
10416: PPUSH
// if not id then
10417: LD_VAR 0 1
10421: NOT
10422: IFFALSE 10426
// exit ;
10424: GO 10442
// result := multi_points_conditions [ id ] ;
10426: LD_ADDR_VAR 0 2
10430: PUSH
10431: LD_EXP 44
10435: PUSH
10436: LD_VAR 0 1
10440: ARRAY
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 2
10446: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
10447: LD_INT 0
10449: PPUSH
10450: PPUSH
10451: PPUSH
10452: PPUSH
10453: PPUSH
// players := [ ] ;
10454: LD_ADDR_VAR 0 3
10458: PUSH
10459: EMPTY
10460: ST_TO_ADDR
// for i = 1 to 8 do
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: DOUBLE
10467: LD_INT 1
10469: DEC
10470: ST_TO_ADDR
10471: LD_INT 8
10473: PUSH
10474: FOR_TO
10475: IFFALSE 10536
// begin if i = side then
10477: LD_VAR 0 4
10481: PUSH
10482: LD_VAR 0 1
10486: EQUAL
10487: IFFALSE 10491
// continue ;
10489: GO 10474
// if multi_sides [ i ] and not multi_loosers [ i ] then
10491: LD_EXP 18
10495: PUSH
10496: LD_VAR 0 4
10500: ARRAY
10501: IFFALSE 10516
10503: PUSH
10504: LD_EXP 36
10508: PUSH
10509: LD_VAR 0 4
10513: ARRAY
10514: NOT
10515: AND
10516: IFFALSE 10534
// players := players ^ i ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_VAR 0 3
10527: PUSH
10528: LD_VAR 0 4
10532: ADD
10533: ST_TO_ADDR
// end ;
10534: GO 10474
10536: POP
10537: POP
// if not players then
10538: LD_VAR 0 3
10542: NOT
10543: IFFALSE 10547
// exit ;
10545: GO 10814
// if players = 1 then
10547: LD_VAR 0 3
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: IFFALSE 10616
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 51
10576: PUSH
10577: EMPTY
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 69
10588: PUSH
10589: FOR_IN
10590: IFFALSE 10612
// SetSide ( i , players [ 1 ] ) ;
10592: LD_VAR 0 4
10596: PPUSH
10597: LD_VAR 0 3
10601: PUSH
10602: LD_INT 1
10604: ARRAY
10605: PPUSH
10606: CALL_OW 235
10610: GO 10589
10612: POP
10613: POP
// end else
10614: GO 10814
// begin j := 1 ;
10616: LD_ADDR_VAR 0 5
10620: PUSH
10621: LD_INT 1
10623: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10624: LD_ADDR_VAR 0 4
10628: PUSH
10629: LD_INT 22
10631: PUSH
10632: LD_VAR 0 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 2
10643: PUSH
10644: LD_INT 21
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 51
10656: PUSH
10657: EMPTY
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: PUSH
10688: FOR_IN
10689: IFFALSE 10812
// begin SetSide ( i , players [ j ] ) ;
10691: LD_VAR 0 4
10695: PPUSH
10696: LD_VAR 0 3
10700: PUSH
10701: LD_VAR 0 5
10705: ARRAY
10706: PPUSH
10707: CALL_OW 235
// if IsDrivenBy ( i ) then
10711: LD_VAR 0 4
10715: PPUSH
10716: CALL_OW 311
10720: IFFALSE 10747
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10722: LD_VAR 0 4
10726: PPUSH
10727: CALL_OW 311
10731: PPUSH
10732: LD_VAR 0 3
10736: PUSH
10737: LD_VAR 0 5
10741: ARRAY
10742: PPUSH
10743: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10747: LD_VAR 0 4
10751: PPUSH
10752: CALL_OW 310
10756: PPUSH
10757: CALL_OW 247
10761: PUSH
10762: LD_INT 3
10764: EQUAL
10765: IFFALSE 10776
// ComExitBuilding ( i ) ;
10767: LD_VAR 0 4
10771: PPUSH
10772: CALL_OW 122
// j := j + 1 ;
10776: LD_ADDR_VAR 0 5
10780: PUSH
10781: LD_VAR 0 5
10785: PUSH
10786: LD_INT 1
10788: PLUS
10789: ST_TO_ADDR
// if j > players then
10790: LD_VAR 0 5
10794: PUSH
10795: LD_VAR 0 3
10799: GREATER
10800: IFFALSE 10810
// j := 1 ;
10802: LD_ADDR_VAR 0 5
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// end ;
10810: GO 10688
10812: POP
10813: POP
// end ; end ;
10814: LD_VAR 0 2
10818: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10819: LD_INT 0
10821: PPUSH
10822: PPUSH
10823: PPUSH
// i := 3 ;
10824: LD_ADDR_VAR 0 2
10828: PUSH
10829: LD_INT 3
10831: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_INT 5
10839: PUSH
10840: LD_INT 10
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 120
10849: PUSH
10850: LD_INT 2
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 101
10859: PUSH
10860: LD_INT 8
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 27
10869: PUSH
10870: LD_INT 4
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10883: LD_INT 4
10885: PPUSH
10886: LD_INT 5
10888: PPUSH
10889: LD_VAR 0 3
10893: PUSH
10894: LD_VAR 0 2
10898: ARRAY
10899: PUSH
10900: LD_INT 1
10902: ARRAY
10903: PPUSH
10904: LD_VAR 0 3
10908: PUSH
10909: LD_VAR 0 2
10913: ARRAY
10914: PUSH
10915: LD_INT 2
10917: ARRAY
10918: PPUSH
10919: LD_INT 0
10921: PPUSH
10922: CALL_OW 58
// end ;
10926: LD_VAR 0 1
10930: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10931: LD_INT 0
10933: PPUSH
// if not side or side > 8 then
10934: LD_VAR 0 1
10938: NOT
10939: IFTRUE 10951
10941: PUSH
10942: LD_VAR 0 1
10946: PUSH
10947: LD_INT 8
10949: GREATER
10950: OR
10951: IFFALSE 10955
// exit ;
10953: GO 10972
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_INT 6
10962: PPUSH
10963: CALL 10414 0 1
10967: PPUSH
10968: CALL 10248 0 2
// end ;
10972: LD_VAR 0 2
10976: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10977: LD_INT 0
10979: PPUSH
// if not side or side > 8 then
10980: LD_VAR 0 1
10984: NOT
10985: IFTRUE 10997
10987: PUSH
10988: LD_VAR 0 1
10992: PUSH
10993: LD_INT 8
10995: GREATER
10996: OR
10997: IFFALSE 11001
// exit ;
10999: GO 11018
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
11001: LD_VAR 0 1
11005: PPUSH
11006: LD_INT 4
11008: PPUSH
11009: CALL 10414 0 1
11013: PPUSH
11014: CALL 10248 0 2
// end ;
11018: LD_VAR 0 2
11022: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
11023: LD_INT 0
11025: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
11026: LD_VAR 0 1
11030: NOT
11031: IFTRUE 11043
11033: PUSH
11034: LD_VAR 0 1
11038: PUSH
11039: LD_INT 8
11041: GREATER
11042: OR
11043: IFTRUE 11071
11045: PUSH
11046: LD_VAR 0 2
11050: PUSH
11051: LD_INT 2
11053: PUSH
11054: LD_INT 6
11056: PUSH
11057: LD_INT 36
11059: PUSH
11060: LD_INT 0
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: IN
11069: NOT
11070: OR
11071: IFFALSE 11075
// exit ;
11073: GO 11092
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: LD_INT 3
11082: PPUSH
11083: CALL 10414 0 1
11087: PPUSH
11088: CALL 10248 0 2
// end ;
11092: LD_VAR 0 3
11096: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
11097: LD_INT 0
11099: PPUSH
11100: PPUSH
// if not un then
11101: LD_VAR 0 1
11105: NOT
11106: IFFALSE 11110
// exit ;
11108: GO 11156
// if not points then
11110: LD_VAR 0 3
11114: NOT
11115: IFFALSE 11132
// gained_points := Multiplayer_GetCondition ( 1 ) else
11117: LD_ADDR_VAR 0 5
11121: PUSH
11122: LD_INT 1
11124: PPUSH
11125: CALL 10414 0 1
11129: ST_TO_ADDR
11130: GO 11142
// gained_points := points ;
11132: LD_ADDR_VAR 0 5
11136: PUSH
11137: LD_VAR 0 3
11141: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
11142: LD_VAR 0 2
11146: PPUSH
11147: LD_VAR 0 5
11151: PPUSH
11152: CALL 10248 0 2
11156: LD_VAR 0 4
11160: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
11161: LD_INT 0
11163: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
11164: LD_VAR 0 1
11168: PPUSH
11169: LD_INT 2
11171: PPUSH
11172: CALL 10414 0 1
11176: PPUSH
11177: CALL 10248 0 2
// end ; end_of_file
11181: LD_VAR 0 2
11185: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
11186: LD_VAR 0 1
11190: PPUSH
11191: CALL_OW 255
11195: PUSH
11196: LD_EXP 3
11200: IN
11201: NOT
11202: IFFALSE 11206
// exit ;
11204: GO 11223
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
11206: LD_VAR 0 1
11210: PPUSH
11211: LD_VAR 0 2
11215: PPUSH
11216: LD_INT 0
11218: PPUSH
11219: CALL 11097 0 3
// end ;
11223: PPOPN 3
11225: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
11226: LD_INT 0
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11238: LD_VAR 0 1
11242: PPUSH
11243: CALL 59592 0 1
// side := GetSide ( un ) ;
11247: LD_ADDR_VAR 0 3
11251: PUSH
11252: LD_VAR 0 1
11256: PPUSH
11257: CALL_OW 255
11261: ST_TO_ADDR
// if multi_sides [ side ] then
11262: LD_EXP 18
11266: PUSH
11267: LD_VAR 0 3
11271: ARRAY
11272: IFFALSE 11298
// if GetType ( un ) = unit_human then
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 247
11283: PUSH
11284: LD_INT 1
11286: EQUAL
11287: IFFALSE 11298
// MultiplayerEvent_HumanLost ( side ) ;
11289: LD_VAR 0 3
11293: PPUSH
11294: CALL 10977 0 1
// if side in botSides then
11298: LD_VAR 0 3
11302: PUSH
11303: LD_EXP 3
11307: IN
11308: IFFALSE 11819
// begin if side = botSides [ 1 ] then
11310: LD_VAR 0 3
11314: PUSH
11315: LD_EXP 3
11319: PUSH
11320: LD_INT 1
11322: ARRAY
11323: EQUAL
11324: IFFALSE 11819
// begin if un in arForce then
11326: LD_VAR 0 1
11330: PUSH
11331: LD_EXP 14
11335: IN
11336: IFFALSE 11354
// arForce := arForce diff un ;
11338: LD_ADDR_EXP 14
11342: PUSH
11343: LD_EXP 14
11347: PUSH
11348: LD_VAR 0 1
11352: DIFF
11353: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
11354: LD_VAR 0 1
11358: PUSH
11359: LD_EXP 8
11363: IN
11364: IFTRUE 11378
11366: PUSH
11367: LD_VAR 0 1
11371: PUSH
11372: LD_EXP 9
11376: IN
11377: OR
11378: IFFALSE 11472
// begin arVehicles := arVehicles diff un ;
11380: LD_ADDR_EXP 8
11384: PUSH
11385: LD_EXP 8
11389: PUSH
11390: LD_VAR 0 1
11394: DIFF
11395: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
11396: LD_ADDR_EXP 9
11400: PUSH
11401: LD_EXP 9
11405: PUSH
11406: LD_VAR 0 1
11410: DIFF
11411: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
11412: LD_ADDR_EXP 6
11416: PUSH
11417: LD_EXP 6
11421: PUSH
11422: LD_VAR 0 1
11426: PPUSH
11427: CALL_OW 265
11431: PUSH
11432: LD_VAR 0 1
11436: PPUSH
11437: CALL_OW 262
11441: PUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 263
11451: PUSH
11452: LD_VAR 0 1
11456: PPUSH
11457: CALL_OW 264
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: ADD
11471: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
11472: LD_VAR 0 1
11476: PPUSH
11477: CALL_OW 257
11481: PUSH
11482: LD_INT 3
11484: EQUAL
11485: IFFALSE 11502
11487: PUSH
11488: LD_VAR 0 1
11492: PPUSH
11493: CALL_OW 110
11497: PUSH
11498: LD_INT 999
11500: LESS
11501: AND
11502: IFFALSE 11510
11504: PUSH
11505: LD_EXP 11
11509: AND
11510: IFFALSE 11651
// begin if not IsOk ( arDep ) then
11512: LD_INT 2
11514: PPUSH
11515: CALL_OW 302
11519: NOT
11520: IFFALSE 11524
// exit ;
11522: GO 11924
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11524: LD_ADDR_EXP 11
11528: PUSH
11529: LD_EXP 11
11533: PPUSH
11534: CALL 55633 0 1
11538: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11539: LD_ADDR_OWVAR 20
11543: PUSH
11544: LD_EXP 3
11548: PUSH
11549: LD_INT 1
11551: ARRAY
11552: ST_TO_ADDR
// uc_nation := nation_arabian ;
11553: LD_ADDR_OWVAR 21
11557: PUSH
11558: LD_INT 2
11560: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
11561: LD_INT 0
11563: PPUSH
11564: LD_INT 3
11566: PUSH
11567: LD_INT 6
11569: PUSH
11570: LD_INT 9
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: LD_OWVAR 67
11582: ARRAY
11583: PPUSH
11584: CALL_OW 383
// un := CreateHuman ;
11588: LD_ADDR_VAR 0 1
11592: PUSH
11593: CALL_OW 44
11597: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11598: LD_VAR 0 1
11602: PPUSH
11603: LD_INT 143
11605: PPUSH
11606: LD_INT 29
11608: PPUSH
11609: LD_INT 0
11611: PPUSH
11612: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11616: LD_VAR 0 1
11620: PPUSH
11621: LD_INT 115
11623: PPUSH
11624: LD_INT 52
11626: PPUSH
11627: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11631: LD_ADDR_EXP 14
11635: PUSH
11636: LD_EXP 14
11640: PPUSH
11641: LD_VAR 0 1
11645: PPUSH
11646: CALL 54238 0 2
11650: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11651: LD_VAR 0 1
11655: PPUSH
11656: CALL_OW 247
11660: PUSH
11661: LD_INT 3
11663: EQUAL
11664: IFFALSE 11819
// begin btype := GetBType ( un ) ;
11666: LD_ADDR_VAR 0 11
11670: PUSH
11671: LD_VAR 0 1
11675: PPUSH
11676: CALL_OW 266
11680: ST_TO_ADDR
// if btype = b_breastwork then
11681: LD_VAR 0 11
11685: PUSH
11686: LD_INT 31
11688: EQUAL
11689: IFFALSE 11693
// exit ;
11691: GO 11924
// if btype = b_barracks then
11693: LD_VAR 0 11
11697: PUSH
11698: LD_INT 5
11700: EQUAL
11701: IFFALSE 11711
// btype := b_armoury ;
11703: LD_ADDR_VAR 0 11
11707: PUSH
11708: LD_INT 4
11710: ST_TO_ADDR
// if btype = b_factory then
11711: LD_VAR 0 11
11715: PUSH
11716: LD_INT 3
11718: EQUAL
11719: IFFALSE 11729
// btype := b_workshop ;
11721: LD_ADDR_VAR 0 11
11725: PUSH
11726: LD_INT 2
11728: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11729: LD_VAR 0 11
11733: PUSH
11734: LD_INT 8
11736: PUSH
11737: LD_INT 7
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: IN
11744: IFFALSE 11754
// btype := b_lab ;
11746: LD_ADDR_VAR 0 11
11750: PUSH
11751: LD_INT 6
11753: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11754: LD_ADDR_EXP 7
11758: PUSH
11759: LD_EXP 7
11763: PPUSH
11764: LD_EXP 7
11768: PUSH
11769: LD_INT 1
11771: PLUS
11772: PPUSH
11773: LD_VAR 0 11
11777: PUSH
11778: LD_VAR 0 1
11782: PPUSH
11783: CALL_OW 250
11787: PUSH
11788: LD_VAR 0 1
11792: PPUSH
11793: CALL_OW 251
11797: PUSH
11798: LD_VAR 0 1
11802: PPUSH
11803: CALL_OW 254
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PPUSH
11814: CALL_OW 1
11818: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
11819: LD_EXP 35
11823: IFFALSE 11831
11825: PUSH
11826: LD_EXP 27
11830: AND
11831: IFFALSE 11846
11833: PUSH
11834: LD_EXP 36
11838: PUSH
11839: LD_VAR 0 3
11843: ARRAY
11844: NOT
11845: AND
11846: IFFALSE 11924
// if un in multi_commanders then
11848: LD_VAR 0 1
11852: PUSH
11853: LD_EXP 35
11857: IN
11858: IFFALSE 11924
// begin if side = your_side then
11860: LD_VAR 0 3
11864: PUSH
11865: LD_OWVAR 2
11869: EQUAL
11870: IFFALSE 11876
// Multiplayer_Loose_Message ;
11872: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11876: LD_ADDR_EXP 36
11880: PUSH
11881: LD_EXP 36
11885: PPUSH
11886: LD_VAR 0 3
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 1
11898: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11899: LD_ADDR_EXP 35
11903: PUSH
11904: LD_EXP 35
11908: PUSH
11909: LD_VAR 0 1
11913: DIFF
11914: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11915: LD_VAR 0 3
11919: PPUSH
11920: CALL 10447 0 1
// end ; end ;
11924: PPOPN 11
11926: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11927: LD_INT 0
11929: PPUSH
11930: PPUSH
11931: PPUSH
11932: PPUSH
// begin side := GetSide ( building ) ;
11933: LD_ADDR_VAR 0 4
11937: PUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 255
11947: ST_TO_ADDR
// if multi_sides [ side ] then
11948: LD_EXP 18
11952: PUSH
11953: LD_VAR 0 4
11957: ARRAY
11958: IFFALSE 11979
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11960: LD_VAR 0 4
11964: PPUSH
11965: LD_VAR 0 1
11969: PPUSH
11970: CALL_OW 266
11974: PPUSH
11975: CALL 11023 0 2
// if side = botSides [ 1 ] then
11979: LD_VAR 0 4
11983: PUSH
11984: LD_EXP 3
11988: PUSH
11989: LD_INT 1
11991: ARRAY
11992: EQUAL
11993: IFFALSE 12089
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11995: LD_ADDR_EXP 7
11999: PUSH
12000: LD_EXP 7
12004: PPUSH
12005: LD_INT 1
12007: PPUSH
12008: CALL_OW 3
12012: ST_TO_ADDR
// btype := GetBType ( building ) ;
12013: LD_ADDR_VAR 0 5
12017: PUSH
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 266
12027: ST_TO_ADDR
// case btype of b_workshop :
12028: LD_VAR 0 5
12032: PUSH
12033: LD_INT 2
12035: DOUBLE
12036: EQUAL
12037: IFTRUE 12041
12039: GO 12053
12041: POP
// ComUpgrade ( building ) ; b_lab :
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 146
12051: GO 12089
12053: LD_INT 6
12055: DOUBLE
12056: EQUAL
12057: IFTRUE 12061
12059: GO 12088
12061: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
12062: LD_VAR 0 1
12066: PPUSH
12067: LD_INT 10
12069: PPUSH
12070: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
12074: LD_VAR 0 1
12078: PPUSH
12079: LD_INT 15
12081: PPUSH
12082: CALL_OW 207
// end ; end ;
12086: GO 12089
12088: POP
// end ; end ;
12089: PPOPN 5
12091: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
12092: LD_VAR 0 1
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_EXP 3
12104: PUSH
12105: LD_INT 1
12107: ARRAY
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 33
12115: PUSH
12116: LD_INT 2
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: IN
12132: IFFALSE 12143
// ComUnlink ( un ) ;
12134: LD_VAR 0 1
12138: PPUSH
12139: CALL_OW 136
// end ;
12143: PPOPN 1
12145: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
12146: LD_VAR 0 2
12150: PPUSH
12151: CALL_OW 255
12155: PUSH
12156: LD_EXP 3
12160: IN
12161: NOT
12162: IFFALSE 12166
// exit ;
12164: GO 12229
// if unit in arForceTmp then
12166: LD_VAR 0 2
12170: PUSH
12171: LD_EXP 15
12175: IN
12176: IFFALSE 12229
// begin arForceTmp := arForceTmp diff unit ;
12178: LD_ADDR_EXP 15
12182: PUSH
12183: LD_EXP 15
12187: PUSH
12188: LD_VAR 0 2
12192: DIFF
12193: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
12194: LD_ADDR_EXP 14
12198: PUSH
12199: LD_EXP 14
12203: PPUSH
12204: LD_VAR 0 2
12208: PPUSH
12209: CALL 54238 0 2
12213: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
12214: LD_VAR 0 2
12218: PPUSH
12219: LD_INT 103
12221: PPUSH
12222: LD_INT 54
12224: PPUSH
12225: CALL_OW 111
// end ; end ;
12229: PPOPN 2
12231: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
12232: LD_INT 0
12234: PPUSH
12235: PPUSH
12236: PPUSH
12237: PPUSH
12238: PPUSH
12239: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
12240: LD_VAR 0 1
12244: PPUSH
12245: LD_VAR 0 2
12249: PPUSH
12250: CALL 59650 0 2
// side := GetSide ( vehicle ) ;
12254: LD_ADDR_VAR 0 4
12258: PUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: CALL_OW 255
12268: ST_TO_ADDR
// if multi_sides [ side ] then
12269: LD_EXP 18
12273: PUSH
12274: LD_VAR 0 4
12278: ARRAY
12279: IFFALSE 12290
// MultiplayerEvent_Produced ( side ) ;
12281: LD_VAR 0 4
12285: PPUSH
12286: CALL 10931 0 1
// if side = botSides [ 1 ] then
12290: LD_VAR 0 4
12294: PUSH
12295: LD_EXP 3
12299: PUSH
12300: LD_INT 1
12302: ARRAY
12303: EQUAL
12304: IFFALSE 12504
// begin driver := IsDrivenBy ( vehicle ) ;
12306: LD_ADDR_VAR 0 8
12310: PUSH
12311: LD_VAR 0 1
12315: PPUSH
12316: CALL_OW 311
12320: ST_TO_ADDR
// if driver then
12321: LD_VAR 0 8
12325: IFFALSE 12359
// begin SetTag ( driver , tMech ) ;
12327: LD_VAR 0 8
12331: PPUSH
12332: LD_INT 7
12334: PPUSH
12335: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
12339: LD_ADDR_EXP 10
12343: PUSH
12344: LD_EXP 10
12348: PPUSH
12349: LD_VAR 0 8
12353: PPUSH
12354: CALL 54238 0 2
12358: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 263
12368: PUSH
12369: LD_INT 2
12371: EQUAL
12372: IFFALSE 12397
12374: PUSH
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL_OW 264
12384: PUSH
12385: LD_INT 32
12387: PUSH
12388: LD_INT 88
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: IN
12395: NOT
12396: AND
12397: IFFALSE 12421
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
12399: LD_ADDR_EXP 16
12403: PUSH
12404: LD_EXP 16
12408: PPUSH
12409: LD_VAR 0 1
12413: PPUSH
12414: CALL 54238 0 2
12418: ST_TO_ADDR
// exit ;
12419: GO 12504
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12421: LD_EXP 12
12425: PUSH
12426: LD_EXP 8
12430: PPUSH
12431: CALL 18262 0 1
12435: GREATER
12436: IFTRUE 12460
12438: PUSH
12439: LD_VAR 0 1
12443: PPUSH
12444: CALL_OW 264
12448: PUSH
12449: LD_INT 32
12451: PUSH
12452: LD_INT 88
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: IN
12459: OR
12460: IFFALSE 12484
// arVehicles := Join ( arVehicles , vehicle ) else
12462: LD_ADDR_EXP 8
12466: PUSH
12467: LD_EXP 8
12471: PPUSH
12472: LD_VAR 0 1
12476: PPUSH
12477: CALL 54238 0 2
12481: ST_TO_ADDR
12482: GO 12504
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
12484: LD_ADDR_EXP 9
12488: PUSH
12489: LD_EXP 9
12493: PPUSH
12494: LD_VAR 0 1
12498: PPUSH
12499: CALL 54238 0 2
12503: ST_TO_ADDR
// end ; end ;
12504: PPOPN 8
12506: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
12507: LD_VAR 0 1
12511: PPUSH
12512: CALL_OW 110
12516: PUSH
12517: LD_INT 7
12519: EQUAL
12520: IFFALSE 12534
// SetTag ( driver , 0 ) ;
12522: LD_VAR 0 1
12526: PPUSH
12527: LD_INT 0
12529: PPUSH
12530: CALL_OW 109
// end ;
12534: PPOPN 4
12536: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12537: LD_VAR 0 2
12541: PPUSH
12542: CALL_OW 255
12546: PUSH
12547: LD_EXP 3
12551: PUSH
12552: LD_INT 1
12554: ARRAY
12555: EQUAL
12556: IFFALSE 12586
// if tech in arTech then
12558: LD_VAR 0 1
12562: PUSH
12563: LD_EXP 5
12567: IN
12568: IFFALSE 12586
// arTech := arTech diff tech ;
12570: LD_ADDR_EXP 5
12574: PUSH
12575: LD_EXP 5
12579: PUSH
12580: LD_VAR 0 1
12584: DIFF
12585: ST_TO_ADDR
// end ;
12586: PPOPN 2
12588: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
12589: LD_VAR 0 1
12593: PPUSH
12594: CALL 59609 0 1
// end ;
12598: PPOPN 1
12600: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do var side ;
12601: LD_INT 0
12603: PPUSH
// begin side := GetSide ( factory ) ;
12604: LD_ADDR_VAR 0 6
12608: PUSH
12609: LD_VAR 0 1
12613: PPUSH
12614: CALL_OW 255
12618: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
12619: LD_VAR 0 5
12623: PUSH
12624: LD_INT 81
12626: EQUAL
12627: IFFALSE 12665
12629: PUSH
12630: LD_INT 22
12632: PUSH
12633: LD_VAR 0 6
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 34
12644: PUSH
12645: LD_INT 81
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PPUSH
12656: CALL_OW 69
12660: PUSH
12661: LD_INT 0
12663: GREATER
12664: AND
12665: IFFALSE 12686
// begin ComCancel ( factory ) ;
12667: LD_VAR 0 1
12671: PPUSH
12672: CALL_OW 127
// HintSpec ( VehLimit , 2 ) ;
12676: LD_STRING VehLimit
12678: PPUSH
12679: LD_INT 2
12681: PPUSH
12682: CALL_OW 338
// end ; end ; end_of_file
12686: PPOPN 6
12688: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12689: LD_INT 2
12691: PPUSH
12692: CALL_OW 302
12696: IFFALSE 12717
12698: PUSH
12699: LD_INT 2
12701: PPUSH
12702: CALL_OW 255
12706: PUSH
12707: LD_EXP 3
12711: PUSH
12712: LD_INT 1
12714: ARRAY
12715: EQUAL
12716: AND
12717: IFFALSE 12754
12719: GO 12721
12721: DISABLE
// begin wait ( 5 5$00 - ( 2 2$00 * Difficulty ) ) ;
12722: LD_INT 10500
12724: PUSH
12725: LD_INT 4200
12727: PUSH
12728: LD_OWVAR 67
12732: MUL
12733: MINUS
12734: PPUSH
12735: CALL_OW 67
// activeArabAttacks := true ;
12739: LD_ADDR_EXP 4
12743: PUSH
12744: LD_INT 1
12746: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12747: LD_INT 0
12749: PPUSH
12750: CALL 13028 0 1
// end ;
12754: END
// every 40 40$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12755: LD_INT 2
12757: PPUSH
12758: CALL_OW 302
12762: IFFALSE 12783
12764: PUSH
12765: LD_INT 2
12767: PPUSH
12768: CALL_OW 255
12772: PUSH
12773: LD_EXP 3
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: EQUAL
12782: AND
12783: IFFALSE 12797
12785: GO 12787
12787: DISABLE
// ArabAttack ( Difficulty ) ;
12788: LD_OWVAR 67
12792: PPUSH
12793: CALL 13028 0 1
12797: END
// every 65 65$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12798: LD_INT 2
12800: PPUSH
12801: CALL_OW 302
12805: IFFALSE 12826
12807: PUSH
12808: LD_INT 2
12810: PPUSH
12811: CALL_OW 255
12815: PUSH
12816: LD_EXP 3
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: EQUAL
12825: AND
12826: IFFALSE 12844
12828: GO 12830
12830: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12831: LD_OWVAR 67
12835: PUSH
12836: LD_INT 1
12838: PLUS
12839: PPUSH
12840: CALL 13028 0 1
12844: END
// every 85 85$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12845: LD_INT 2
12847: PPUSH
12848: CALL_OW 302
12852: IFFALSE 12873
12854: PUSH
12855: LD_INT 2
12857: PPUSH
12858: CALL_OW 255
12862: PUSH
12863: LD_EXP 3
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: EQUAL
12872: AND
12873: IFFALSE 12891
12875: GO 12877
12877: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12878: LD_OWVAR 67
12882: PUSH
12883: LD_INT 2
12885: PLUS
12886: PPUSH
12887: CALL 13028 0 1
12891: END
// every 115 115$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12892: LD_INT 2
12894: PPUSH
12895: CALL_OW 302
12899: IFFALSE 12920
12901: PUSH
12902: LD_INT 2
12904: PPUSH
12905: CALL_OW 255
12909: PUSH
12910: LD_EXP 3
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: EQUAL
12919: AND
12920: IFFALSE 12938
12922: GO 12924
12924: DISABLE
// ArabAttack ( Difficulty + 3 ) ;
12925: LD_OWVAR 67
12929: PUSH
12930: LD_INT 3
12932: PLUS
12933: PPUSH
12934: CALL 13028 0 1
12938: END
// every 145 145$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12939: LD_INT 2
12941: PPUSH
12942: CALL_OW 302
12946: IFFALSE 12967
12948: PUSH
12949: LD_INT 2
12951: PPUSH
12952: CALL_OW 255
12956: PUSH
12957: LD_EXP 3
12961: PUSH
12962: LD_INT 1
12964: ARRAY
12965: EQUAL
12966: AND
12967: IFFALSE 12985
12969: GO 12971
12971: DISABLE
// ArabAttack ( Difficulty + 4 ) ;
12972: LD_OWVAR 67
12976: PUSH
12977: LD_INT 4
12979: PLUS
12980: PPUSH
12981: CALL 13028 0 1
12985: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12986: LD_INT 2
12988: PPUSH
12989: LD_INT 81
12991: PUSH
12992: LD_EXP 3
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PPUSH
13005: CALL_OW 70
13009: IFFALSE 13027
13011: GO 13013
13013: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
13014: LD_OWVAR 67
13018: PUSH
13019: LD_INT 2
13021: PLUS
13022: PPUSH
13023: CALL 13028 0 1
13027: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
13028: LD_INT 0
13030: PPUSH
13031: PPUSH
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
// uc_side := botSides [ 1 ] ;
13037: LD_ADDR_OWVAR 20
13041: PUSH
13042: LD_EXP 3
13046: PUSH
13047: LD_INT 1
13049: ARRAY
13050: ST_TO_ADDR
// uc_nation := nation_arabian ;
13051: LD_ADDR_OWVAR 21
13055: PUSH
13056: LD_INT 2
13058: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
13059: LD_ADDR_VAR 0 4
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 7
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_OWVAR 67
13082: ARRAY
13083: ST_TO_ADDR
// arAttackersInf := [ ] ;
13084: LD_ADDR_EXP 45
13088: PUSH
13089: EMPTY
13090: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13091: LD_ADDR_EXP 46
13095: PUSH
13096: EMPTY
13097: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
13098: LD_ADDR_VAR 0 7
13102: PUSH
13103: LD_INT 48
13105: PUSH
13106: LD_INT 52
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 135
13115: PUSH
13116: LD_INT 48
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_VAR 0 1
13131: PUSH
13132: LD_INT 2
13134: MOD
13135: PUSH
13136: LD_INT 1
13138: PLUS
13139: ARRAY
13140: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
13141: LD_ADDR_VAR 0 8
13145: PUSH
13146: LD_INT 12
13148: PUSH
13149: LD_INT 13
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 23
13158: PUSH
13159: LD_INT 22
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_VAR 0 1
13174: PUSH
13175: LD_INT 2
13177: MOD
13178: PUSH
13179: LD_INT 1
13181: PLUS
13182: ARRAY
13183: ST_TO_ADDR
// InitHC_All ( ) ;
13184: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: DOUBLE
13194: LD_INT 1
13196: DEC
13197: ST_TO_ADDR
13198: LD_INT 3
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: LD_INT 6
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_OWVAR 67
13216: ARRAY
13217: PUSH
13218: LD_VAR 0 1
13222: PLUS
13223: PUSH
13224: FOR_TO
13225: IFFALSE 13366
// begin PrepareSoldier ( false , skill ) ;
13227: LD_INT 0
13229: PPUSH
13230: LD_VAR 0 4
13234: PPUSH
13235: CALL_OW 381
// un := CreateHuman ;
13239: LD_ADDR_VAR 0 5
13243: PUSH
13244: CALL_OW 44
13248: ST_TO_ADDR
// if i mod 2 = 0 then
13249: LD_VAR 0 3
13253: PUSH
13254: LD_INT 2
13256: MOD
13257: PUSH
13258: LD_INT 0
13260: EQUAL
13261: IFFALSE 13275
// SetClass ( un , class_mortar ) ;
13263: LD_VAR 0 5
13267: PPUSH
13268: LD_INT 8
13270: PPUSH
13271: CALL_OW 336
// SetDir ( un , 1 ) ;
13275: LD_VAR 0 5
13279: PPUSH
13280: LD_INT 1
13282: PPUSH
13283: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13287: LD_INT 35
13289: PPUSH
13290: CALL_OW 67
// until PlaceUnitArea ( un , area [ 1 ] , false ) ;
13294: LD_VAR 0 5
13298: PPUSH
13299: LD_VAR 0 8
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PPUSH
13308: LD_INT 0
13310: PPUSH
13311: CALL_OW 49
13315: IFFALSE 13287
// arAttackersInf := Join ( arAttackersInf , un ) ;
13317: LD_ADDR_EXP 45
13321: PUSH
13322: LD_EXP 45
13326: PPUSH
13327: LD_VAR 0 5
13331: PPUSH
13332: CALL 54238 0 2
13336: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
13337: LD_VAR 0 5
13341: PPUSH
13342: LD_VAR 0 7
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PPUSH
13351: LD_VAR 0 7
13355: PUSH
13356: LD_INT 2
13358: ARRAY
13359: PPUSH
13360: CALL_OW 114
// end ;
13364: GO 13224
13366: POP
13367: POP
// for i := 1 to 3 + v do
13368: LD_ADDR_VAR 0 3
13372: PUSH
13373: DOUBLE
13374: LD_INT 1
13376: DEC
13377: ST_TO_ADDR
13378: LD_INT 3
13380: PUSH
13381: LD_VAR 0 1
13385: PLUS
13386: PUSH
13387: FOR_TO
13388: IFFALSE 13594
// begin PrepareMechanic ( false , skill ) ;
13390: LD_INT 0
13392: PPUSH
13393: LD_VAR 0 4
13397: PPUSH
13398: CALL_OW 383
// un := CreateHuman ;
13402: LD_ADDR_VAR 0 5
13406: PUSH
13407: CALL_OW 44
13411: ST_TO_ADDR
// SetTag ( un , 999 ) ;
13412: LD_VAR 0 5
13416: PPUSH
13417: LD_INT 999
13419: PPUSH
13420: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
13424: LD_INT 14
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: LD_INT 27
13435: PUSH
13436: LD_INT 25
13438: PUSH
13439: LD_INT 28
13441: PUSH
13442: LD_INT 26
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: LD_VAR 0 3
13455: PUSH
13456: LD_INT 4
13458: MOD
13459: PUSH
13460: LD_INT 1
13462: PLUS
13463: ARRAY
13464: PPUSH
13465: LD_INT 80
13467: PPUSH
13468: CALL 21058 0 5
// veh := CreateVehicle ;
13472: LD_ADDR_VAR 0 6
13476: PUSH
13477: CALL_OW 45
13481: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13482: LD_VAR 0 6
13486: PPUSH
13487: LD_INT 1
13489: PPUSH
13490: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13494: LD_INT 35
13496: PPUSH
13497: CALL_OW 67
// until PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13501: LD_VAR 0 6
13505: PPUSH
13506: LD_VAR 0 8
13510: PUSH
13511: LD_INT 2
13513: ARRAY
13514: PPUSH
13515: LD_INT 0
13517: PPUSH
13518: CALL_OW 49
13522: IFFALSE 13494
// PlaceHumanInUnit ( un , veh ) ;
13524: LD_VAR 0 5
13528: PPUSH
13529: LD_VAR 0 6
13533: PPUSH
13534: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13538: LD_VAR 0 5
13542: PPUSH
13543: LD_VAR 0 7
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: LD_VAR 0 7
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13565: LD_ADDR_EXP 46
13569: PUSH
13570: LD_EXP 46
13574: PPUSH
13575: LD_VAR 0 6
13579: PPUSH
13580: CALL 54238 0 2
13584: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13585: LD_INT 70
13587: PPUSH
13588: CALL_OW 67
// end ;
13592: GO 13387
13594: POP
13595: POP
// wait ( 0 0$2 ) ;
13596: LD_INT 70
13598: PPUSH
13599: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] + ( v div 2 ) do
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: DOUBLE
13609: LD_INT 1
13611: DEC
13612: ST_TO_ADDR
13613: LD_INT 1
13615: PUSH
13616: LD_INT 2
13618: PUSH
13619: LD_INT 3
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: PUSH
13627: LD_OWVAR 67
13631: ARRAY
13632: PUSH
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 2
13640: DIV
13641: PLUS
13642: PUSH
13643: FOR_TO
13644: IFFALSE 13766
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
13646: LD_INT 14
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: LD_INT 5
13654: PPUSH
13655: LD_INT 29
13657: PPUSH
13658: LD_INT 80
13660: PPUSH
13661: CALL 21058 0 5
// veh := CreateVehicle ;
13665: LD_ADDR_VAR 0 6
13669: PUSH
13670: CALL_OW 45
13674: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13675: LD_VAR 0 6
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13687: LD_INT 35
13689: PPUSH
13690: CALL_OW 67
// until PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13694: LD_VAR 0 6
13698: PPUSH
13699: LD_VAR 0 8
13703: PUSH
13704: LD_INT 2
13706: ARRAY
13707: PPUSH
13708: LD_INT 0
13710: PPUSH
13711: CALL_OW 49
13715: IFFALSE 13687
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13717: LD_VAR 0 5
13721: PPUSH
13722: LD_VAR 0 7
13726: PUSH
13727: LD_INT 1
13729: ARRAY
13730: PPUSH
13731: LD_VAR 0 7
13735: PUSH
13736: LD_INT 2
13738: ARRAY
13739: PPUSH
13740: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13744: LD_ADDR_EXP 46
13748: PUSH
13749: LD_EXP 46
13753: PPUSH
13754: LD_VAR 0 6
13758: PPUSH
13759: CALL 54238 0 2
13763: ST_TO_ADDR
// end ;
13764: GO 13643
13766: POP
13767: POP
// end ;
13768: LD_VAR 0 2
13772: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
13773: LD_EXP 45
13777: IFFALSE 14307
13779: GO 13781
13781: DISABLE
13782: LD_INT 0
13784: PPUSH
13785: PPUSH
13786: PPUSH
13787: PPUSH
13788: PPUSH
// begin enable ;
13789: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13790: LD_ADDR_VAR 0 1
13794: PUSH
13795: LD_INT 120
13797: PUSH
13798: LD_INT 11
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PPUSH
13805: CALL_OW 69
13809: PUSH
13810: FOR_IN
13811: IFFALSE 13827
// SetTag ( i , 0 ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_INT 0
13820: PPUSH
13821: CALL_OW 109
13825: GO 13810
13827: POP
13828: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13829: LD_ADDR_VAR 0 2
13833: PUSH
13834: LD_EXP 45
13838: PPUSH
13839: LD_INT 50
13841: PUSH
13842: EMPTY
13843: LIST
13844: PPUSH
13845: CALL_OW 72
13849: ST_TO_ADDR
// arAttackersInf := [ ] ;
13850: LD_ADDR_EXP 45
13854: PUSH
13855: EMPTY
13856: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13857: LD_ADDR_VAR 0 1
13861: PUSH
13862: LD_VAR 0 2
13866: PPUSH
13867: LD_INT 25
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 72
13881: PUSH
13882: FOR_IN
13883: IFFALSE 14014
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13885: LD_ADDR_VAR 0 3
13889: PUSH
13890: LD_INT 81
13892: PUSH
13893: LD_EXP 3
13897: PUSH
13898: LD_INT 1
13900: ARRAY
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: LD_INT 120
13911: PUSH
13912: LD_INT 11
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 2
13925: PUSH
13926: LD_INT 21
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 21
13938: PUSH
13939: LD_INT 3
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: PPUSH
13956: CALL_OW 69
13960: PPUSH
13961: LD_VAR 0 1
13965: PPUSH
13966: CALL_OW 74
13970: ST_TO_ADDR
// if not nearest then
13971: LD_VAR 0 3
13975: NOT
13976: IFFALSE 13980
// break ;
13978: GO 14014
// SetTag ( nearest , tMined ) ;
13980: LD_VAR 0 3
13984: PPUSH
13985: LD_INT 11
13987: PPUSH
13988: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13992: LD_VAR 0 1
13996: PPUSH
13997: LD_INT 0
13999: PPUSH
14000: LD_INT 0
14002: PPUSH
14003: LD_VAR 0 3
14007: PPUSH
14008: CALL_OW 192
// end ;
14012: GO 13882
14014: POP
14015: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14016: LD_ADDR_VAR 0 2
14020: PUSH
14021: LD_VAR 0 2
14025: PPUSH
14026: LD_INT 50
14028: PUSH
14029: EMPTY
14030: LIST
14031: PPUSH
14032: CALL_OW 72
14036: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14037: LD_INT 70
14039: PPUSH
14040: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_VAR 0 2
14053: PPUSH
14054: LD_INT 50
14056: PUSH
14057: EMPTY
14058: LIST
14059: PPUSH
14060: CALL_OW 72
14064: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14065: LD_ADDR_VAR 0 4
14069: PUSH
14070: LD_INT 81
14072: PUSH
14073: LD_EXP 3
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: ST_TO_ADDR
// for i in tmp do
14091: LD_ADDR_VAR 0 1
14095: PUSH
14096: LD_VAR 0 2
14100: PUSH
14101: FOR_IN
14102: IFFALSE 14298
// if GetClass ( i ) <> 1 then
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 257
14113: PUSH
14114: LD_INT 1
14116: NONEQUAL
14117: IFFALSE 14145
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
14119: LD_VAR 0 1
14123: PPUSH
14124: LD_VAR 0 4
14128: PPUSH
14129: LD_VAR 0 1
14133: PPUSH
14134: CALL_OW 74
14138: PPUSH
14139: CALL_OW 115
14143: GO 14296
// if not HasTask ( i ) then
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 314
14154: NOT
14155: IFFALSE 14296
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PUSH
14170: LD_INT 120
14172: PUSH
14173: LD_INT 11
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 2
14186: PUSH
14187: LD_INT 21
14189: PUSH
14190: LD_INT 2
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 21
14199: PUSH
14200: LD_INT 3
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PPUSH
14216: CALL_OW 72
14220: PPUSH
14221: LD_VAR 0 1
14225: PPUSH
14226: CALL_OW 74
14230: ST_TO_ADDR
// if not nearest then
14231: LD_VAR 0 3
14235: NOT
14236: IFFALSE 14264
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
14238: LD_VAR 0 1
14242: PPUSH
14243: LD_VAR 0 4
14247: PPUSH
14248: LD_VAR 0 1
14252: PPUSH
14253: CALL_OW 74
14257: PPUSH
14258: CALL_OW 115
14262: GO 14296
// begin SetTag ( nearest , tMined ) ;
14264: LD_VAR 0 3
14268: PPUSH
14269: LD_INT 11
14271: PPUSH
14272: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
14276: LD_VAR 0 1
14280: PPUSH
14281: LD_INT 0
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: LD_VAR 0 3
14291: PPUSH
14292: CALL_OW 132
// end ; end ;
14296: GO 14101
14298: POP
14299: POP
// until not tmp ;
14300: LD_VAR 0 2
14304: NOT
14305: IFFALSE 14037
// end ;
14307: PPOPN 5
14309: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
14310: LD_EXP 46
14314: IFFALSE 14537
14316: GO 14318
14318: DISABLE
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
14323: PPUSH
// begin enable ;
14324: ENABLE
// tmp := arAttackersVeh ;
14325: LD_ADDR_VAR 0 2
14329: PUSH
14330: LD_EXP 46
14334: ST_TO_ADDR
// arAttackersVeh := [ ] ;
14335: LD_ADDR_EXP 46
14339: PUSH
14340: EMPTY
14341: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
14342: LD_ADDR_VAR 0 3
14346: PUSH
14347: LD_INT 139
14349: PUSH
14350: LD_INT 55
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 155
14359: PUSH
14360: LD_INT 92
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 53
14373: PUSH
14374: LD_INT 61
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 74
14383: PUSH
14384: LD_INT 98
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
14399: LD_VAR 0 2
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: PPUSH
14408: LD_INT 139
14410: PPUSH
14411: LD_INT 55
14413: PPUSH
14414: CALL_OW 297
14418: PUSH
14419: LD_VAR 0 2
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PPUSH
14428: LD_INT 53
14430: PPUSH
14431: LD_INT 61
14433: PPUSH
14434: CALL_OW 297
14438: LESS
14439: IFFALSE 14457
// path := path [ 1 ] else
14441: LD_ADDR_VAR 0 3
14445: PUSH
14446: LD_VAR 0 3
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: ST_TO_ADDR
14455: GO 14471
// path := path [ 2 ] ;
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_VAR 0 3
14466: PUSH
14467: LD_INT 2
14469: ARRAY
14470: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14471: LD_INT 70
14473: PPUSH
14474: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14478: LD_ADDR_VAR 0 2
14482: PUSH
14483: LD_VAR 0 2
14487: PPUSH
14488: LD_INT 50
14490: PUSH
14491: EMPTY
14492: LIST
14493: PPUSH
14494: CALL_OW 72
14498: ST_TO_ADDR
// for i in tmp do
14499: LD_ADDR_VAR 0 1
14503: PUSH
14504: LD_VAR 0 2
14508: PUSH
14509: FOR_IN
14510: IFFALSE 14528
// AgressiveMove ( i , path ) until not tmp ;
14512: LD_VAR 0 1
14516: PPUSH
14517: LD_VAR 0 3
14521: PPUSH
14522: CALL 57004 0 2
14526: GO 14509
14528: POP
14529: POP
14530: LD_VAR 0 2
14534: NOT
14535: IFFALSE 14471
// end ;
14537: PPOPN 3
14539: END
// every 2 2$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
14540: LD_EXP 16
14544: PPUSH
14545: CALL 18262 0 1
14549: PUSH
14550: LD_INT 3
14552: GREATEREQUAL
14553: IFFALSE 14674
14555: GO 14557
14557: DISABLE
14558: LD_INT 0
14560: PPUSH
14561: PPUSH
// begin enable ;
14562: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
14563: LD_ADDR_VAR 0 2
14567: PUSH
14568: LD_EXP 16
14572: PPUSH
14573: LD_INT 61
14575: PUSH
14576: EMPTY
14577: LIST
14578: PPUSH
14579: CALL_OW 72
14583: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
14584: LD_ADDR_EXP 16
14588: PUSH
14589: LD_EXP 16
14593: PUSH
14594: LD_VAR 0 2
14598: DIFF
14599: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14600: LD_INT 70
14602: PPUSH
14603: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14607: LD_ADDR_VAR 0 2
14611: PUSH
14612: LD_VAR 0 2
14616: PPUSH
14617: LD_INT 50
14619: PUSH
14620: EMPTY
14621: LIST
14622: PPUSH
14623: CALL_OW 72
14627: ST_TO_ADDR
// for i in tmp do
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_VAR 0 2
14637: PUSH
14638: FOR_IN
14639: IFFALSE 14665
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
14641: LD_VAR 0 1
14645: PPUSH
14646: LD_INT 98
14648: PUSH
14649: LD_INT 63
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: PPUSH
14659: CALL 57004 0 2
14663: GO 14638
14665: POP
14666: POP
14667: LD_VAR 0 2
14671: NOT
14672: IFFALSE 14600
// end ;
14674: PPOPN 2
14676: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
14677: LD_EXP 9
14681: IFFALSE 14689
14683: PUSH
14684: LD_EXP 4
14688: AND
14689: IFFALSE 15248
14691: GO 14693
14693: DISABLE
14694: LD_INT 0
14696: PPUSH
14697: PPUSH
14698: PPUSH
// begin enable ;
14699: ENABLE
// if not arVehiclesAtttackers then
14700: LD_EXP 9
14704: NOT
14705: IFFALSE 14709
// exit ;
14707: GO 15248
// for i in arVehiclesAtttackers do
14709: LD_ADDR_VAR 0 1
14713: PUSH
14714: LD_EXP 9
14718: PUSH
14719: FOR_IN
14720: IFFALSE 15246
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
14722: LD_VAR 0 1
14726: PPUSH
14727: CALL_OW 302
14731: NOT
14732: IFTRUE 14755
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 255
14744: PUSH
14745: LD_EXP 3
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: NONEQUAL
14754: OR
14755: IFFALSE 14775
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
14757: LD_ADDR_EXP 9
14761: PUSH
14762: LD_EXP 9
14766: PUSH
14767: LD_VAR 0 1
14771: DIFF
14772: ST_TO_ADDR
// continue ;
14773: GO 14719
// end ; if GetTag ( i ) = 300 then
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL_OW 110
14784: PUSH
14785: LD_INT 300
14787: EQUAL
14788: IFFALSE 14903
// begin if GetFuel ( i ) < 50 then
14790: LD_VAR 0 1
14794: PPUSH
14795: CALL_OW 261
14799: PUSH
14800: LD_INT 50
14802: LESS
14803: IFFALSE 14862
// begin ComMoveXY ( i , 102 , 47 ) ;
14805: LD_VAR 0 1
14809: PPUSH
14810: LD_INT 102
14812: PPUSH
14813: LD_INT 47
14815: PPUSH
14816: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14820: LD_INT 35
14822: PPUSH
14823: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_INT 102
14834: PPUSH
14835: LD_INT 47
14837: PPUSH
14838: CALL_OW 297
14842: PUSH
14843: LD_INT 4
14845: LESS
14846: IFFALSE 14820
// SetFuel ( i , 100 ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 100
14855: PPUSH
14856: CALL_OW 240
// end else
14860: GO 14903
// if not IsInArea ( i , arParkingArea ) then
14862: LD_VAR 0 1
14866: PPUSH
14867: LD_INT 14
14869: PPUSH
14870: CALL_OW 308
14874: NOT
14875: IFFALSE 14891
// ComMoveToArea ( i , arParkingArea ) else
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_INT 14
14884: PPUSH
14885: CALL_OW 113
14889: GO 14903
// SetTag ( i , 301 ) ;
14891: LD_VAR 0 1
14895: PPUSH
14896: LD_INT 301
14898: PPUSH
14899: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14903: LD_VAR 0 1
14907: PPUSH
14908: CALL_OW 110
14912: PUSH
14913: LD_INT 301
14915: EQUAL
14916: IFFALSE 15058
// begin if GetLives ( i ) < 1000 then
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 256
14927: PUSH
14928: LD_INT 1000
14930: LESS
14931: IFFALSE 15035
// begin if not IsDrivenBy ( i ) then
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 311
14942: NOT
14943: IFFALSE 14947
// continue ;
14945: GO 14719
// mech := IsDrivenBy ( i ) ;
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 311
14961: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14962: LD_VAR 0 2
14966: PPUSH
14967: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14971: LD_VAR 0 2
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14985: LD_INT 35
14987: PPUSH
14988: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14992: LD_VAR 0 1
14996: PPUSH
14997: CALL_OW 256
15001: PUSH
15002: LD_INT 1000
15004: EQUAL
15005: IFFALSE 14985
// SetLives ( mech , 1000 ) ;
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_INT 1000
15014: PPUSH
15015: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
15019: LD_VAR 0 2
15023: PPUSH
15024: LD_VAR 0 1
15028: PPUSH
15029: CALL_OW 120
// end else
15033: GO 15058
// if IsDrivenBy ( i ) then
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 311
15044: IFFALSE 15058
// SetTag ( i , 0 ) ;
15046: LD_VAR 0 1
15050: PPUSH
15051: LD_INT 0
15053: PPUSH
15054: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 110
15067: PUSH
15068: LD_INT 300
15070: LESS
15071: IFFALSE 15244
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_INT 1
15080: PPUSH
15081: LD_INT 81
15083: PUSH
15084: LD_EXP 3
15088: PUSH
15089: LD_INT 1
15091: ARRAY
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 70
15101: ST_TO_ADDR
// if GetLives ( i ) < 650 then
15102: LD_VAR 0 1
15106: PPUSH
15107: CALL_OW 256
15111: PUSH
15112: LD_INT 650
15114: LESS
15115: IFFALSE 15140
// begin ComStop ( i ) ;
15117: LD_VAR 0 1
15121: PPUSH
15122: CALL_OW 141
// SetTag ( i , 300 ) ;
15126: LD_VAR 0 1
15130: PPUSH
15131: LD_INT 300
15133: PPUSH
15134: CALL_OW 109
// continue ;
15138: GO 14719
// end ; if enemy then
15140: LD_VAR 0 3
15144: IFFALSE 15184
// begin if not HasTask ( i ) then
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 314
15155: NOT
15156: IFFALSE 15182
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
15158: LD_VAR 0 1
15162: PPUSH
15163: LD_VAR 0 3
15167: PPUSH
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 74
15177: PPUSH
15178: CALL_OW 115
// end else
15182: GO 15244
// if arVehiclesAtttackers then
15184: LD_EXP 9
15188: IFFALSE 15244
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
15190: LD_ADDR_VAR 0 3
15194: PUSH
15195: LD_INT 81
15197: PUSH
15198: LD_EXP 3
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 69
15215: ST_TO_ADDR
// if enemy then
15216: LD_VAR 0 3
15220: IFFALSE 15244
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: LD_INT 99
15229: PUSH
15230: LD_INT 66
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: PPUSH
15240: CALL 57004 0 2
// end ; end ; end ;
15244: GO 14719
15246: POP
15247: POP
// end ;
15248: PPOPN 3
15250: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15251: LD_INT 22
15253: PUSH
15254: LD_EXP 3
15258: PUSH
15259: LD_INT 1
15261: ARRAY
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 32
15269: PUSH
15270: LD_INT 1
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 69
15285: IFFALSE 15368
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
// begin enable ;
15293: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_INT 22
15301: PUSH
15302: LD_EXP 3
15306: PUSH
15307: LD_INT 1
15309: ARRAY
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: FOR_IN
15335: IFFALSE 15366
// if GetFuel ( i ) < 3 then
15337: LD_VAR 0 1
15341: PPUSH
15342: CALL_OW 261
15346: PUSH
15347: LD_INT 3
15349: LESS
15350: IFFALSE 15364
// SetFuel ( i , 3 ) ;
15352: LD_VAR 0 1
15356: PPUSH
15357: LD_INT 3
15359: PPUSH
15360: CALL_OW 240
15364: GO 15334
15366: POP
15367: POP
// end ; end_of_file
15368: PPOPN 1
15370: END
// every 0 0$20 trigger game do
15371: LD_EXP 2
15375: IFFALSE 15424
15377: GO 15379
15379: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , cratesSouthArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
15380: LD_INT 15
15382: PUSH
15383: LD_INT 17
15385: PUSH
15386: LD_INT 16
15388: PUSH
15389: LD_INT 25
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: PPUSH
15402: LD_EXP 32
15406: PUSH
15407: LD_INT 2
15409: ARRAY
15410: PPUSH
15411: LD_EXP 32
15415: PUSH
15416: LD_INT 1
15418: ARRAY
15419: PPUSH
15420: CALL 15425 0 3
15424: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
15425: LD_INT 0
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
// if not areas then
15431: LD_VAR 0 1
15435: NOT
15436: IFFALSE 15440
// exit ;
15438: GO 15819
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
15440: LD_ADDR_VAR 0 7
15444: PUSH
15445: LD_INT 18
15447: PUSH
15448: LD_INT 19
15450: PUSH
15451: LD_INT 20
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: ST_TO_ADDR
// x := 5 ;
15459: LD_ADDR_VAR 0 6
15463: PUSH
15464: LD_INT 5
15466: ST_TO_ADDR
// repeat wait ( time ) ;
15467: LD_VAR 0 2
15471: PPUSH
15472: CALL_OW 67
// if tick < [ 30 30$00 , 25 25$00 , 20 20$00 ] [ Difficulty ] then
15476: LD_OWVAR 1
15480: PUSH
15481: LD_INT 63000
15483: PUSH
15484: LD_INT 52500
15486: PUSH
15487: LD_INT 42000
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: LIST
15494: PUSH
15495: LD_OWVAR 67
15499: ARRAY
15500: LESS
15501: IFFALSE 15640
// begin for i := 1 to multi_sides do
15503: LD_ADDR_VAR 0 5
15507: PUSH
15508: DOUBLE
15509: LD_INT 1
15511: DEC
15512: ST_TO_ADDR
15513: LD_EXP 18
15517: PUSH
15518: FOR_TO
15519: IFFALSE 15631
// if multi_sides [ i ] then
15521: LD_EXP 18
15525: PUSH
15526: LD_VAR 0 5
15530: ARRAY
15531: IFFALSE 15629
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
15533: LD_VAR 0 7
15537: PUSH
15538: LD_EXP 18
15542: PUSH
15543: LD_VAR 0 5
15547: ARRAY
15548: ARRAY
15549: PPUSH
15550: LD_INT 1
15552: PPUSH
15553: CALL_OW 287
15557: PUSH
15558: LD_INT 32
15560: PUSH
15561: LD_INT 25
15563: PUSH
15564: LD_INT 23
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: LD_OWVAR 67
15576: ARRAY
15577: LESS
15578: IFFALSE 15629
// begin amount := amount - ( x * 10 ) ;
15580: LD_ADDR_VAR 0 3
15584: PUSH
15585: LD_VAR 0 3
15589: PUSH
15590: LD_VAR 0 6
15594: PUSH
15595: LD_INT 10
15597: MUL
15598: MINUS
15599: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
15600: LD_VAR 0 6
15604: PPUSH
15605: LD_VAR 0 7
15609: PUSH
15610: LD_EXP 18
15614: PUSH
15615: LD_VAR 0 5
15619: ARRAY
15620: ARRAY
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 55
// end ; end ;
15629: GO 15518
15631: POP
15632: POP
// wait ( 0 0$2 ) ;
15633: LD_INT 70
15635: PPUSH
15636: CALL_OW 67
// end ; for i in areas do
15640: LD_ADDR_VAR 0 5
15644: PUSH
15645: LD_VAR 0 1
15649: PUSH
15650: FOR_IN
15651: IFFALSE 15734
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
15653: LD_VAR 0 5
15657: PPUSH
15658: LD_INT 1
15660: PPUSH
15661: CALL_OW 287
15665: PUSH
15666: LD_INT 25
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_INT 20
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: LIST
15679: PUSH
15680: LD_OWVAR 67
15684: ARRAY
15685: LESS
15686: IFFALSE 15732
// begin wait ( 0 0$5 ) ;
15688: LD_INT 175
15690: PPUSH
15691: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15695: LD_VAR 0 6
15699: PPUSH
15700: LD_VAR 0 5
15704: PPUSH
15705: LD_INT 1
15707: PPUSH
15708: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: LD_VAR 0 3
15721: PUSH
15722: LD_VAR 0 6
15726: PUSH
15727: LD_INT 10
15729: MUL
15730: MINUS
15731: ST_TO_ADDR
// end ; end ;
15732: GO 15650
15734: POP
15735: POP
// time := time + 0 0$1 ;
15736: LD_ADDR_VAR 0 2
15740: PUSH
15741: LD_VAR 0 2
15745: PUSH
15746: LD_INT 35
15748: PLUS
15749: ST_TO_ADDR
// x := x - 1 ;
15750: LD_ADDR_VAR 0 6
15754: PUSH
15755: LD_VAR 0 6
15759: PUSH
15760: LD_INT 1
15762: MINUS
15763: ST_TO_ADDR
// if x = 0 then
15764: LD_VAR 0 6
15768: PUSH
15769: LD_INT 0
15771: EQUAL
15772: IFFALSE 15782
// x := 5 ;
15774: LD_ADDR_VAR 0 6
15778: PUSH
15779: LD_INT 5
15781: ST_TO_ADDR
// if time > 1 1$00 then
15782: LD_VAR 0 2
15786: PUSH
15787: LD_INT 2100
15789: GREATER
15790: IFFALSE 15800
// time := 0 0$30 ;
15792: LD_ADDR_VAR 0 2
15796: PUSH
15797: LD_INT 1050
15799: ST_TO_ADDR
// until not game or amount <= 0 ;
15800: LD_EXP 2
15804: NOT
15805: IFTRUE 15817
15807: PUSH
15808: LD_VAR 0 3
15812: PUSH
15813: LD_INT 0
15815: LESSEQUAL
15816: OR
15817: IFFALSE 15467
// end ;
15819: LD_VAR 0 4
15823: RET
// every 0 0$40 trigger GetResourceArea ( cratesSouthArea , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] do
15824: LD_INT 25
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 287
15834: PUSH
15835: LD_INT 32
15837: PUSH
15838: LD_INT 25
15840: PUSH
15841: LD_INT 23
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: PUSH
15849: LD_OWVAR 67
15853: ARRAY
15854: LESS
15855: IFFALSE 15874
15857: GO 15859
15859: DISABLE
// begin enable ;
15860: ENABLE
// CreateCratesArea ( 5 , cratesSouthArea , true ) ;
15861: LD_INT 5
15863: PPUSH
15864: LD_INT 25
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: CALL_OW 55
// end ; end_of_file
15874: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15875: LD_VAR 0 1
15879: PUSH
15880: LD_INT 200
15882: DOUBLE
15883: GREATEREQUAL
15884: IFFALSE 15892
15886: LD_INT 299
15888: DOUBLE
15889: LESSEQUAL
15890: IFTRUE 15894
15892: GO 15926
15894: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15895: LD_VAR 0 1
15899: PPUSH
15900: LD_VAR 0 2
15904: PPUSH
15905: LD_VAR 0 3
15909: PPUSH
15910: LD_VAR 0 4
15914: PPUSH
15915: LD_VAR 0 5
15919: PPUSH
15920: CALL 60342 0 5
15924: GO 16003
15926: LD_INT 300
15928: DOUBLE
15929: GREATEREQUAL
15930: IFFALSE 15938
15932: LD_INT 399
15934: DOUBLE
15935: LESSEQUAL
15936: IFTRUE 15940
15938: GO 16002
15940: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15941: LD_VAR 0 1
15945: PPUSH
15946: LD_VAR 0 2
15950: PPUSH
15951: LD_VAR 0 3
15955: PPUSH
15956: LD_VAR 0 4
15960: PPUSH
15961: LD_VAR 0 5
15965: PPUSH
15966: LD_VAR 0 6
15970: PPUSH
15971: LD_VAR 0 7
15975: PPUSH
15976: LD_VAR 0 8
15980: PPUSH
15981: LD_VAR 0 9
15985: PPUSH
15986: LD_VAR 0 10
15990: PPUSH
15991: LD_VAR 0 11
15995: PPUSH
15996: CALL 66770 0 11
16000: GO 16003
16002: POP
// end ;
16003: PPOPN 11
16005: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
16006: LD_VAR 0 1
16010: PPUSH
16011: LD_VAR 0 2
16015: PPUSH
16016: LD_VAR 0 3
16020: PPUSH
16021: LD_VAR 0 4
16025: PPUSH
16026: LD_VAR 0 5
16030: PPUSH
16031: CALL 59642 0 5
// end ; end_of_file
16035: PPOPN 5
16037: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16038: LD_INT 0
16040: PPUSH
16041: PPUSH
// if exist_mode then
16042: LD_VAR 0 2
16046: IFFALSE 16092
// begin unit := CreateCharacter ( prefix & ident ) ;
16048: LD_ADDR_VAR 0 5
16052: PUSH
16053: LD_VAR 0 3
16057: PUSH
16058: LD_VAR 0 1
16062: STR
16063: PPUSH
16064: CALL_OW 34
16068: ST_TO_ADDR
// if unit then
16069: LD_VAR 0 5
16073: IFFALSE 16090
// DeleteCharacters ( prefix & ident ) ;
16075: LD_VAR 0 3
16079: PUSH
16080: LD_VAR 0 1
16084: STR
16085: PPUSH
16086: CALL_OW 40
// end else
16090: GO 16107
// unit := NewCharacter ( ident ) ;
16092: LD_ADDR_VAR 0 5
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 25
16106: ST_TO_ADDR
// result := unit ;
16107: LD_ADDR_VAR 0 4
16111: PUSH
16112: LD_VAR 0 5
16116: ST_TO_ADDR
// end ;
16117: LD_VAR 0 4
16121: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16122: LD_INT 0
16124: PPUSH
16125: PPUSH
// if exist_mode then
16126: LD_VAR 0 2
16130: IFFALSE 16155
// unit := CreateCharacter ( prefix & ident ) else
16132: LD_ADDR_VAR 0 5
16136: PUSH
16137: LD_VAR 0 3
16141: PUSH
16142: LD_VAR 0 1
16146: STR
16147: PPUSH
16148: CALL_OW 34
16152: ST_TO_ADDR
16153: GO 16170
// unit := NewCharacter ( ident ) ;
16155: LD_ADDR_VAR 0 5
16159: PUSH
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 25
16169: ST_TO_ADDR
// result := unit ;
16170: LD_ADDR_VAR 0 4
16174: PUSH
16175: LD_VAR 0 5
16179: ST_TO_ADDR
// end ;
16180: LD_VAR 0 4
16184: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
// if not side or not nation then
16189: LD_VAR 0 1
16193: NOT
16194: IFTRUE 16203
16196: PUSH
16197: LD_VAR 0 2
16201: NOT
16202: OR
16203: IFFALSE 16207
// exit ;
16205: GO 17001
// case nation of nation_american :
16207: LD_VAR 0 2
16211: PUSH
16212: LD_INT 1
16214: DOUBLE
16215: EQUAL
16216: IFTRUE 16220
16218: GO 16442
16220: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
16221: LD_ADDR_VAR 0 4
16225: PUSH
16226: LD_INT 35
16228: PUSH
16229: LD_INT 45
16231: PUSH
16232: LD_INT 46
16234: PUSH
16235: LD_INT 47
16237: PUSH
16238: LD_INT 82
16240: PUSH
16241: LD_INT 83
16243: PUSH
16244: LD_INT 84
16246: PUSH
16247: LD_INT 85
16249: PUSH
16250: LD_INT 86
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: LD_INT 2
16258: PUSH
16259: LD_INT 6
16261: PUSH
16262: LD_INT 15
16264: PUSH
16265: LD_INT 16
16267: PUSH
16268: LD_INT 7
16270: PUSH
16271: LD_INT 12
16273: PUSH
16274: LD_INT 13
16276: PUSH
16277: LD_INT 10
16279: PUSH
16280: LD_INT 14
16282: PUSH
16283: LD_INT 20
16285: PUSH
16286: LD_INT 21
16288: PUSH
16289: LD_INT 22
16291: PUSH
16292: LD_INT 25
16294: PUSH
16295: LD_INT 32
16297: PUSH
16298: LD_INT 27
16300: PUSH
16301: LD_INT 36
16303: PUSH
16304: LD_INT 69
16306: PUSH
16307: LD_INT 39
16309: PUSH
16310: LD_INT 34
16312: PUSH
16313: LD_INT 40
16315: PUSH
16316: LD_INT 48
16318: PUSH
16319: LD_INT 49
16321: PUSH
16322: LD_INT 50
16324: PUSH
16325: LD_INT 51
16327: PUSH
16328: LD_INT 52
16330: PUSH
16331: LD_INT 53
16333: PUSH
16334: LD_INT 54
16336: PUSH
16337: LD_INT 55
16339: PUSH
16340: LD_INT 56
16342: PUSH
16343: LD_INT 57
16345: PUSH
16346: LD_INT 58
16348: PUSH
16349: LD_INT 59
16351: PUSH
16352: LD_INT 60
16354: PUSH
16355: LD_INT 61
16357: PUSH
16358: LD_INT 62
16360: PUSH
16361: LD_INT 80
16363: PUSH
16364: LD_INT 82
16366: PUSH
16367: LD_INT 83
16369: PUSH
16370: LD_INT 84
16372: PUSH
16373: LD_INT 85
16375: PUSH
16376: LD_INT 86
16378: PUSH
16379: LD_INT 90
16381: PUSH
16382: LD_INT 93
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: ST_TO_ADDR
16440: GO 16923
16442: LD_INT 2
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16684
16450: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16451: LD_ADDR_VAR 0 4
16455: PUSH
16456: LD_INT 35
16458: PUSH
16459: LD_INT 45
16461: PUSH
16462: LD_INT 46
16464: PUSH
16465: LD_INT 47
16467: PUSH
16468: LD_INT 82
16470: PUSH
16471: LD_INT 83
16473: PUSH
16474: LD_INT 84
16476: PUSH
16477: LD_INT 85
16479: PUSH
16480: LD_INT 87
16482: PUSH
16483: LD_INT 70
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: LD_INT 11
16491: PUSH
16492: LD_INT 3
16494: PUSH
16495: LD_INT 4
16497: PUSH
16498: LD_INT 5
16500: PUSH
16501: LD_INT 6
16503: PUSH
16504: LD_INT 15
16506: PUSH
16507: LD_INT 18
16509: PUSH
16510: LD_INT 7
16512: PUSH
16513: LD_INT 17
16515: PUSH
16516: LD_INT 8
16518: PUSH
16519: LD_INT 20
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_INT 72
16530: PUSH
16531: LD_INT 26
16533: PUSH
16534: LD_INT 69
16536: PUSH
16537: LD_INT 39
16539: PUSH
16540: LD_INT 40
16542: PUSH
16543: LD_INT 41
16545: PUSH
16546: LD_INT 42
16548: PUSH
16549: LD_INT 43
16551: PUSH
16552: LD_INT 48
16554: PUSH
16555: LD_INT 49
16557: PUSH
16558: LD_INT 50
16560: PUSH
16561: LD_INT 51
16563: PUSH
16564: LD_INT 52
16566: PUSH
16567: LD_INT 53
16569: PUSH
16570: LD_INT 54
16572: PUSH
16573: LD_INT 55
16575: PUSH
16576: LD_INT 56
16578: PUSH
16579: LD_INT 60
16581: PUSH
16582: LD_INT 61
16584: PUSH
16585: LD_INT 62
16587: PUSH
16588: LD_INT 66
16590: PUSH
16591: LD_INT 67
16593: PUSH
16594: LD_INT 68
16596: PUSH
16597: LD_INT 81
16599: PUSH
16600: LD_INT 82
16602: PUSH
16603: LD_INT 83
16605: PUSH
16606: LD_INT 84
16608: PUSH
16609: LD_INT 85
16611: PUSH
16612: LD_INT 87
16614: PUSH
16615: LD_INT 88
16617: PUSH
16618: LD_INT 92
16620: PUSH
16621: LD_INT 94
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: ST_TO_ADDR
16682: GO 16923
16684: LD_INT 3
16686: DOUBLE
16687: EQUAL
16688: IFTRUE 16692
16690: GO 16922
16692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16693: LD_ADDR_VAR 0 4
16697: PUSH
16698: LD_INT 46
16700: PUSH
16701: LD_INT 47
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: LD_INT 2
16709: PUSH
16710: LD_INT 82
16712: PUSH
16713: LD_INT 83
16715: PUSH
16716: LD_INT 84
16718: PUSH
16719: LD_INT 85
16721: PUSH
16722: LD_INT 86
16724: PUSH
16725: LD_INT 11
16727: PUSH
16728: LD_INT 9
16730: PUSH
16731: LD_INT 20
16733: PUSH
16734: LD_INT 19
16736: PUSH
16737: LD_INT 21
16739: PUSH
16740: LD_INT 24
16742: PUSH
16743: LD_INT 22
16745: PUSH
16746: LD_INT 25
16748: PUSH
16749: LD_INT 28
16751: PUSH
16752: LD_INT 29
16754: PUSH
16755: LD_INT 30
16757: PUSH
16758: LD_INT 31
16760: PUSH
16761: LD_INT 37
16763: PUSH
16764: LD_INT 38
16766: PUSH
16767: LD_INT 32
16769: PUSH
16770: LD_INT 27
16772: PUSH
16773: LD_INT 33
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 39
16781: PUSH
16782: LD_INT 34
16784: PUSH
16785: LD_INT 40
16787: PUSH
16788: LD_INT 71
16790: PUSH
16791: LD_INT 23
16793: PUSH
16794: LD_INT 44
16796: PUSH
16797: LD_INT 48
16799: PUSH
16800: LD_INT 49
16802: PUSH
16803: LD_INT 50
16805: PUSH
16806: LD_INT 51
16808: PUSH
16809: LD_INT 52
16811: PUSH
16812: LD_INT 53
16814: PUSH
16815: LD_INT 54
16817: PUSH
16818: LD_INT 55
16820: PUSH
16821: LD_INT 56
16823: PUSH
16824: LD_INT 57
16826: PUSH
16827: LD_INT 58
16829: PUSH
16830: LD_INT 59
16832: PUSH
16833: LD_INT 63
16835: PUSH
16836: LD_INT 64
16838: PUSH
16839: LD_INT 65
16841: PUSH
16842: LD_INT 82
16844: PUSH
16845: LD_INT 83
16847: PUSH
16848: LD_INT 84
16850: PUSH
16851: LD_INT 85
16853: PUSH
16854: LD_INT 86
16856: PUSH
16857: LD_INT 89
16859: PUSH
16860: LD_INT 91
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: ST_TO_ADDR
16920: GO 16923
16922: POP
// if state > - 1 and state < 3 then
16923: LD_VAR 0 3
16927: PUSH
16928: LD_INT 1
16930: NEG
16931: GREATER
16932: IFFALSE 16944
16934: PUSH
16935: LD_VAR 0 3
16939: PUSH
16940: LD_INT 3
16942: LESS
16943: AND
16944: IFFALSE 17001
// for i in result do
16946: LD_ADDR_VAR 0 5
16950: PUSH
16951: LD_VAR 0 4
16955: PUSH
16956: FOR_IN
16957: IFFALSE 16999
// if GetTech ( i , side ) <> state then
16959: LD_VAR 0 5
16963: PPUSH
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 321
16973: PUSH
16974: LD_VAR 0 3
16978: NONEQUAL
16979: IFFALSE 16997
// result := result diff i ;
16981: LD_ADDR_VAR 0 4
16985: PUSH
16986: LD_VAR 0 4
16990: PUSH
16991: LD_VAR 0 5
16995: DIFF
16996: ST_TO_ADDR
16997: GO 16956
16999: POP
17000: POP
// end ;
17001: LD_VAR 0 4
17005: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
17010: PPUSH
// result := true ;
17011: LD_ADDR_VAR 0 3
17015: PUSH
17016: LD_INT 1
17018: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17019: LD_ADDR_VAR 0 5
17023: PUSH
17024: LD_VAR 0 2
17028: PPUSH
17029: CALL_OW 480
17033: ST_TO_ADDR
// if not tmp then
17034: LD_VAR 0 5
17038: NOT
17039: IFFALSE 17043
// exit ;
17041: GO 17092
// for i in tmp do
17043: LD_ADDR_VAR 0 4
17047: PUSH
17048: LD_VAR 0 5
17052: PUSH
17053: FOR_IN
17054: IFFALSE 17090
// if GetTech ( i , side ) <> state_researched then
17056: LD_VAR 0 4
17060: PPUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 321
17070: PUSH
17071: LD_INT 2
17073: NONEQUAL
17074: IFFALSE 17088
// begin result := false ;
17076: LD_ADDR_VAR 0 3
17080: PUSH
17081: LD_INT 0
17083: ST_TO_ADDR
// exit ;
17084: POP
17085: POP
17086: GO 17092
// end ;
17088: GO 17053
17090: POP
17091: POP
// end ;
17092: LD_VAR 0 3
17096: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17097: LD_INT 0
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
17109: PPUSH
17110: PPUSH
17111: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17112: LD_VAR 0 1
17116: NOT
17117: IFTRUE 17134
17119: PUSH
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 257
17129: PUSH
17130: LD_INT 9
17132: NONEQUAL
17133: OR
17134: IFFALSE 17138
// exit ;
17136: GO 17717
// side := GetSide ( unit ) ;
17138: LD_ADDR_VAR 0 9
17142: PUSH
17143: LD_VAR 0 1
17147: PPUSH
17148: CALL_OW 255
17152: ST_TO_ADDR
// tech_space := tech_spacanom ;
17153: LD_ADDR_VAR 0 12
17157: PUSH
17158: LD_INT 29
17160: ST_TO_ADDR
// tech_time := tech_taurad ;
17161: LD_ADDR_VAR 0 13
17165: PUSH
17166: LD_INT 28
17168: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17169: LD_ADDR_VAR 0 11
17173: PUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 310
17183: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17184: LD_VAR 0 11
17188: PPUSH
17189: CALL_OW 247
17193: PUSH
17194: LD_INT 2
17196: EQUAL
17197: IFFALSE 17201
// exit ;
17199: GO 17717
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17201: LD_ADDR_VAR 0 8
17205: PUSH
17206: LD_INT 81
17208: PUSH
17209: LD_VAR 0 9
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 3
17220: PUSH
17221: LD_INT 21
17223: PUSH
17224: LD_INT 3
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PPUSH
17239: CALL_OW 69
17243: ST_TO_ADDR
// if not tmp then
17244: LD_VAR 0 8
17248: NOT
17249: IFFALSE 17253
// exit ;
17251: GO 17717
// if in_unit then
17253: LD_VAR 0 11
17257: IFFALSE 17281
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17259: LD_ADDR_VAR 0 10
17263: PUSH
17264: LD_VAR 0 8
17268: PPUSH
17269: LD_VAR 0 11
17273: PPUSH
17274: CALL_OW 74
17278: ST_TO_ADDR
17279: GO 17301
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17281: LD_ADDR_VAR 0 10
17285: PUSH
17286: LD_VAR 0 8
17290: PPUSH
17291: LD_VAR 0 1
17295: PPUSH
17296: CALL_OW 74
17300: ST_TO_ADDR
// if not enemy then
17301: LD_VAR 0 10
17305: NOT
17306: IFFALSE 17310
// exit ;
17308: GO 17717
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17310: LD_VAR 0 11
17314: IFFALSE 17336
17316: PUSH
17317: LD_VAR 0 11
17321: PPUSH
17322: LD_VAR 0 10
17326: PPUSH
17327: CALL_OW 296
17331: PUSH
17332: LD_INT 13
17334: GREATER
17335: AND
17336: IFTRUE 17358
17338: PUSH
17339: LD_VAR 0 1
17343: PPUSH
17344: LD_VAR 0 10
17348: PPUSH
17349: CALL_OW 296
17353: PUSH
17354: LD_INT 12
17356: GREATER
17357: OR
17358: IFFALSE 17362
// exit ;
17360: GO 17717
// missile := [ 1 ] ;
17362: LD_ADDR_VAR 0 14
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: EMPTY
17371: LIST
17372: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17373: LD_VAR 0 9
17377: PPUSH
17378: LD_VAR 0 12
17382: PPUSH
17383: CALL_OW 325
17387: IFFALSE 17416
// missile := Replace ( missile , missile + 1 , 2 ) ;
17389: LD_ADDR_VAR 0 14
17393: PUSH
17394: LD_VAR 0 14
17398: PPUSH
17399: LD_VAR 0 14
17403: PUSH
17404: LD_INT 1
17406: PLUS
17407: PPUSH
17408: LD_INT 2
17410: PPUSH
17411: CALL_OW 1
17415: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17416: LD_VAR 0 9
17420: PPUSH
17421: LD_VAR 0 13
17425: PPUSH
17426: CALL_OW 325
17430: IFFALSE 17454
17432: PUSH
17433: LD_VAR 0 10
17437: PPUSH
17438: CALL_OW 255
17442: PPUSH
17443: LD_VAR 0 13
17447: PPUSH
17448: CALL_OW 325
17452: NOT
17453: AND
17454: IFFALSE 17483
// missile := Replace ( missile , missile + 1 , 3 ) ;
17456: LD_ADDR_VAR 0 14
17460: PUSH
17461: LD_VAR 0 14
17465: PPUSH
17466: LD_VAR 0 14
17470: PUSH
17471: LD_INT 1
17473: PLUS
17474: PPUSH
17475: LD_INT 3
17477: PPUSH
17478: CALL_OW 1
17482: ST_TO_ADDR
// if missile < 2 then
17483: LD_VAR 0 14
17487: PUSH
17488: LD_INT 2
17490: LESS
17491: IFFALSE 17495
// exit ;
17493: GO 17717
// x := GetX ( enemy ) ;
17495: LD_ADDR_VAR 0 4
17499: PUSH
17500: LD_VAR 0 10
17504: PPUSH
17505: CALL_OW 250
17509: ST_TO_ADDR
// y := GetY ( enemy ) ;
17510: LD_ADDR_VAR 0 5
17514: PUSH
17515: LD_VAR 0 10
17519: PPUSH
17520: CALL_OW 251
17524: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17525: LD_ADDR_VAR 0 6
17529: PUSH
17530: LD_VAR 0 4
17534: PUSH
17535: LD_INT 1
17537: NEG
17538: PPUSH
17539: LD_INT 1
17541: PPUSH
17542: CALL_OW 12
17546: PLUS
17547: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17548: LD_ADDR_VAR 0 7
17552: PUSH
17553: LD_VAR 0 5
17557: PUSH
17558: LD_INT 1
17560: NEG
17561: PPUSH
17562: LD_INT 1
17564: PPUSH
17565: CALL_OW 12
17569: PLUS
17570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17571: LD_VAR 0 6
17575: PPUSH
17576: LD_VAR 0 7
17580: PPUSH
17581: CALL_OW 488
17585: NOT
17586: IFFALSE 17608
// begin _x := x ;
17588: LD_ADDR_VAR 0 6
17592: PUSH
17593: LD_VAR 0 4
17597: ST_TO_ADDR
// _y := y ;
17598: LD_ADDR_VAR 0 7
17602: PUSH
17603: LD_VAR 0 5
17607: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17608: LD_ADDR_VAR 0 3
17612: PUSH
17613: LD_INT 1
17615: PPUSH
17616: LD_VAR 0 14
17620: PPUSH
17621: CALL_OW 12
17625: ST_TO_ADDR
// case i of 1 :
17626: LD_VAR 0 3
17630: PUSH
17631: LD_INT 1
17633: DOUBLE
17634: EQUAL
17635: IFTRUE 17639
17637: GO 17656
17639: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17640: LD_VAR 0 1
17644: PPUSH
17645: LD_VAR 0 10
17649: PPUSH
17650: CALL_OW 115
17654: GO 17717
17656: LD_INT 2
17658: DOUBLE
17659: EQUAL
17660: IFTRUE 17664
17662: GO 17686
17664: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17665: LD_VAR 0 1
17669: PPUSH
17670: LD_VAR 0 6
17674: PPUSH
17675: LD_VAR 0 7
17679: PPUSH
17680: CALL_OW 153
17684: GO 17717
17686: LD_INT 3
17688: DOUBLE
17689: EQUAL
17690: IFTRUE 17694
17692: GO 17716
17694: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17695: LD_VAR 0 1
17699: PPUSH
17700: LD_VAR 0 6
17704: PPUSH
17705: LD_VAR 0 7
17709: PPUSH
17710: CALL_OW 154
17714: GO 17717
17716: POP
// end ;
17717: LD_VAR 0 2
17721: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17722: LD_INT 0
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
// if not unit or not building then
17730: LD_VAR 0 1
17734: NOT
17735: IFTRUE 17744
17737: PUSH
17738: LD_VAR 0 2
17742: NOT
17743: OR
17744: IFFALSE 17748
// exit ;
17746: GO 17906
// x := GetX ( building ) ;
17748: LD_ADDR_VAR 0 5
17752: PUSH
17753: LD_VAR 0 2
17757: PPUSH
17758: CALL_OW 250
17762: ST_TO_ADDR
// y := GetY ( building ) ;
17763: LD_ADDR_VAR 0 6
17767: PUSH
17768: LD_VAR 0 2
17772: PPUSH
17773: CALL_OW 251
17777: ST_TO_ADDR
// for i := 0 to 5 do
17778: LD_ADDR_VAR 0 4
17782: PUSH
17783: DOUBLE
17784: LD_INT 0
17786: DEC
17787: ST_TO_ADDR
17788: LD_INT 5
17790: PUSH
17791: FOR_TO
17792: IFFALSE 17904
// begin _x := ShiftX ( x , i , 3 ) ;
17794: LD_ADDR_VAR 0 7
17798: PUSH
17799: LD_VAR 0 5
17803: PPUSH
17804: LD_VAR 0 4
17808: PPUSH
17809: LD_INT 3
17811: PPUSH
17812: CALL_OW 272
17816: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17817: LD_ADDR_VAR 0 8
17821: PUSH
17822: LD_VAR 0 6
17826: PPUSH
17827: LD_VAR 0 4
17831: PPUSH
17832: LD_INT 3
17834: PPUSH
17835: CALL_OW 273
17839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17840: LD_VAR 0 7
17844: PPUSH
17845: LD_VAR 0 8
17849: PPUSH
17850: CALL_OW 488
17854: NOT
17855: IFFALSE 17859
// continue ;
17857: GO 17791
// if HexInfo ( _x , _y ) = 0 then
17859: LD_VAR 0 7
17863: PPUSH
17864: LD_VAR 0 8
17868: PPUSH
17869: CALL_OW 428
17873: PUSH
17874: LD_INT 0
17876: EQUAL
17877: IFFALSE 17902
// begin ComMoveXY ( unit , _x , _y ) ;
17879: LD_VAR 0 1
17883: PPUSH
17884: LD_VAR 0 7
17888: PPUSH
17889: LD_VAR 0 8
17893: PPUSH
17894: CALL_OW 111
// exit ;
17898: POP
17899: POP
17900: GO 17906
// end ; end ;
17902: GO 17791
17904: POP
17905: POP
// end ;
17906: LD_VAR 0 3
17910: RET
// export function ScanBase ( side , base_area ) ; begin
17911: LD_INT 0
17913: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17914: LD_ADDR_VAR 0 3
17918: PUSH
17919: LD_VAR 0 2
17923: PPUSH
17924: LD_INT 81
17926: PUSH
17927: LD_VAR 0 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 70
17940: ST_TO_ADDR
// end ;
17941: LD_VAR 0 3
17945: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17946: LD_INT 0
17948: PPUSH
17949: PPUSH
17950: PPUSH
17951: PPUSH
// result := false ;
17952: LD_ADDR_VAR 0 2
17956: PUSH
17957: LD_INT 0
17959: ST_TO_ADDR
// side := GetSide ( unit ) ;
17960: LD_ADDR_VAR 0 3
17964: PUSH
17965: LD_VAR 0 1
17969: PPUSH
17970: CALL_OW 255
17974: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17975: LD_ADDR_VAR 0 4
17979: PUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 248
17989: ST_TO_ADDR
// case nat of 1 :
17990: LD_VAR 0 4
17994: PUSH
17995: LD_INT 1
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18014
18003: POP
// tech := tech_lassight ; 2 :
18004: LD_ADDR_VAR 0 5
18008: PUSH
18009: LD_INT 12
18011: ST_TO_ADDR
18012: GO 18053
18014: LD_INT 2
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18033
18022: POP
// tech := tech_mortar ; 3 :
18023: LD_ADDR_VAR 0 5
18027: PUSH
18028: LD_INT 41
18030: ST_TO_ADDR
18031: GO 18053
18033: LD_INT 3
18035: DOUBLE
18036: EQUAL
18037: IFTRUE 18041
18039: GO 18052
18041: POP
// tech := tech_bazooka ; end ;
18042: LD_ADDR_VAR 0 5
18046: PUSH
18047: LD_INT 44
18049: ST_TO_ADDR
18050: GO 18053
18052: POP
// if Researched ( side , tech ) then
18053: LD_VAR 0 3
18057: PPUSH
18058: LD_VAR 0 5
18062: PPUSH
18063: CALL_OW 325
18067: IFFALSE 18094
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: LD_INT 5
18076: PUSH
18077: LD_INT 8
18079: PUSH
18080: LD_INT 9
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: PUSH
18088: LD_VAR 0 4
18092: ARRAY
18093: ST_TO_ADDR
// end ;
18094: LD_VAR 0 2
18098: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18099: LD_INT 0
18101: PPUSH
18102: PPUSH
18103: PPUSH
// if not mines then
18104: LD_VAR 0 2
18108: NOT
18109: IFFALSE 18113
// exit ;
18111: GO 18257
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18113: LD_ADDR_VAR 0 5
18117: PUSH
18118: LD_INT 81
18120: PUSH
18121: LD_VAR 0 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: LD_INT 21
18135: PUSH
18136: LD_INT 3
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: ST_TO_ADDR
// for i in mines do
18156: LD_ADDR_VAR 0 4
18160: PUSH
18161: LD_VAR 0 2
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18255
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18169: LD_VAR 0 4
18173: PUSH
18174: LD_INT 1
18176: ARRAY
18177: PPUSH
18178: LD_VAR 0 4
18182: PUSH
18183: LD_INT 2
18185: ARRAY
18186: PPUSH
18187: CALL_OW 458
18191: NOT
18192: IFFALSE 18196
// continue ;
18194: GO 18166
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18196: LD_VAR 0 4
18200: PUSH
18201: LD_INT 1
18203: ARRAY
18204: PPUSH
18205: LD_VAR 0 4
18209: PUSH
18210: LD_INT 2
18212: ARRAY
18213: PPUSH
18214: CALL_OW 428
18218: PUSH
18219: LD_VAR 0 5
18223: IN
18224: IFFALSE 18253
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18226: LD_VAR 0 4
18230: PUSH
18231: LD_INT 1
18233: ARRAY
18234: PPUSH
18235: LD_VAR 0 4
18239: PUSH
18240: LD_INT 2
18242: ARRAY
18243: PPUSH
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 456
// end ;
18253: GO 18166
18255: POP
18256: POP
// end ;
18257: LD_VAR 0 3
18261: RET
// export function Count ( array ) ; begin
18262: LD_INT 0
18264: PPUSH
// result := array + 0 ;
18265: LD_ADDR_VAR 0 2
18269: PUSH
18270: LD_VAR 0 1
18274: PUSH
18275: LD_INT 0
18277: PLUS
18278: ST_TO_ADDR
// end ;
18279: LD_VAR 0 2
18283: RET
// export function IsEmpty ( building ) ; begin
18284: LD_INT 0
18286: PPUSH
// if not building then
18287: LD_VAR 0 1
18291: NOT
18292: IFFALSE 18296
// exit ;
18294: GO 18339
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18296: LD_ADDR_VAR 0 2
18300: PUSH
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: CALL_OW 255
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 58
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: IN
18338: ST_TO_ADDR
// end ;
18339: LD_VAR 0 2
18343: RET
// export function IsNotFull ( building ) ; var places ; begin
18344: LD_INT 0
18346: PPUSH
18347: PPUSH
// if not building then
18348: LD_VAR 0 1
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18385
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18357: LD_ADDR_VAR 0 2
18361: PUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: LD_INT 3
18369: PUSH
18370: LD_INT 62
18372: PUSH
18373: EMPTY
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PPUSH
18380: CALL_OW 72
18384: ST_TO_ADDR
// end ;
18385: LD_VAR 0 2
18389: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18390: LD_INT 0
18392: PPUSH
18393: PPUSH
18394: PPUSH
18395: PPUSH
// tmp := [ ] ;
18396: LD_ADDR_VAR 0 3
18400: PUSH
18401: EMPTY
18402: ST_TO_ADDR
// list := [ ] ;
18403: LD_ADDR_VAR 0 5
18407: PUSH
18408: EMPTY
18409: ST_TO_ADDR
// for i = 16 to 25 do
18410: LD_ADDR_VAR 0 4
18414: PUSH
18415: DOUBLE
18416: LD_INT 16
18418: DEC
18419: ST_TO_ADDR
18420: LD_INT 25
18422: PUSH
18423: FOR_TO
18424: IFFALSE 18497
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18426: LD_ADDR_VAR 0 3
18430: PUSH
18431: LD_VAR 0 3
18435: PUSH
18436: LD_INT 22
18438: PUSH
18439: LD_VAR 0 1
18443: PPUSH
18444: CALL_OW 255
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 91
18455: PUSH
18456: LD_VAR 0 1
18460: PUSH
18461: LD_INT 6
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 30
18471: PUSH
18472: LD_VAR 0 4
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: ADD
18494: ST_TO_ADDR
18495: GO 18423
18497: POP
18498: POP
// for i = 1 to tmp do
18499: LD_ADDR_VAR 0 4
18503: PUSH
18504: DOUBLE
18505: LD_INT 1
18507: DEC
18508: ST_TO_ADDR
18509: LD_VAR 0 3
18513: PUSH
18514: FOR_TO
18515: IFFALSE 18603
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18517: LD_ADDR_VAR 0 5
18521: PUSH
18522: LD_VAR 0 5
18526: PUSH
18527: LD_VAR 0 3
18531: PUSH
18532: LD_VAR 0 4
18536: ARRAY
18537: PPUSH
18538: CALL_OW 266
18542: PUSH
18543: LD_VAR 0 3
18547: PUSH
18548: LD_VAR 0 4
18552: ARRAY
18553: PPUSH
18554: CALL_OW 250
18558: PUSH
18559: LD_VAR 0 3
18563: PUSH
18564: LD_VAR 0 4
18568: ARRAY
18569: PPUSH
18570: CALL_OW 251
18574: PUSH
18575: LD_VAR 0 3
18579: PUSH
18580: LD_VAR 0 4
18584: ARRAY
18585: PPUSH
18586: CALL_OW 254
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: ADD
18600: ST_TO_ADDR
18601: GO 18514
18603: POP
18604: POP
// result := list ;
18605: LD_ADDR_VAR 0 2
18609: PUSH
18610: LD_VAR 0 5
18614: ST_TO_ADDR
// end ;
18615: LD_VAR 0 2
18619: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18620: LD_INT 0
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
18628: PPUSH
// if not factory then
18629: LD_VAR 0 1
18633: NOT
18634: IFFALSE 18638
// exit ;
18636: GO 19241
// if control = control_apeman then
18638: LD_VAR 0 4
18642: PUSH
18643: LD_INT 5
18645: EQUAL
18646: IFFALSE 18755
// begin tmp := UnitsInside ( factory ) ;
18648: LD_ADDR_VAR 0 8
18652: PUSH
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL_OW 313
18662: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18663: LD_VAR 0 8
18667: PPUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 12
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 72
18682: NOT
18683: IFFALSE 18693
// control := control_manual ;
18685: LD_ADDR_VAR 0 4
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18693: LD_ADDR_VAR 0 8
18697: PUSH
18698: LD_VAR 0 1
18702: PPUSH
18703: CALL 18390 0 1
18707: ST_TO_ADDR
// if tmp then
18708: LD_VAR 0 8
18712: IFFALSE 18755
// begin for i in tmp do
18714: LD_ADDR_VAR 0 7
18718: PUSH
18719: LD_VAR 0 8
18723: PUSH
18724: FOR_IN
18725: IFFALSE 18753
// if i [ 1 ] = b_ext_radio then
18727: LD_VAR 0 7
18731: PUSH
18732: LD_INT 1
18734: ARRAY
18735: PUSH
18736: LD_INT 22
18738: EQUAL
18739: IFFALSE 18751
// begin control := control_remote ;
18741: LD_ADDR_VAR 0 4
18745: PUSH
18746: LD_INT 2
18748: ST_TO_ADDR
// break ;
18749: GO 18753
// end ;
18751: GO 18724
18753: POP
18754: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18755: LD_VAR 0 1
18759: PPUSH
18760: LD_VAR 0 2
18764: PPUSH
18765: LD_VAR 0 3
18769: PPUSH
18770: LD_VAR 0 4
18774: PPUSH
18775: LD_VAR 0 5
18779: PPUSH
18780: CALL_OW 448
18784: IFFALSE 18819
// begin result := [ chassis , engine , control , weapon ] ;
18786: LD_ADDR_VAR 0 6
18790: PUSH
18791: LD_VAR 0 2
18795: PUSH
18796: LD_VAR 0 3
18800: PUSH
18801: LD_VAR 0 4
18805: PUSH
18806: LD_VAR 0 5
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
// exit ;
18817: GO 19241
// end ; _chassis := AvailableChassisList ( factory ) ;
18819: LD_ADDR_VAR 0 9
18823: PUSH
18824: LD_VAR 0 1
18828: PPUSH
18829: CALL_OW 475
18833: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18834: LD_ADDR_VAR 0 11
18838: PUSH
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 476
18848: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18849: LD_ADDR_VAR 0 12
18853: PUSH
18854: LD_VAR 0 1
18858: PPUSH
18859: CALL_OW 477
18863: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18864: LD_ADDR_VAR 0 10
18868: PUSH
18869: LD_VAR 0 1
18873: PPUSH
18874: CALL_OW 478
18878: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18879: LD_VAR 0 9
18883: NOT
18884: IFTRUE 18893
18886: PUSH
18887: LD_VAR 0 11
18891: NOT
18892: OR
18893: IFTRUE 18902
18895: PUSH
18896: LD_VAR 0 12
18900: NOT
18901: OR
18902: IFTRUE 18911
18904: PUSH
18905: LD_VAR 0 10
18909: NOT
18910: OR
18911: IFFALSE 18946
// begin result := [ chassis , engine , control , weapon ] ;
18913: LD_ADDR_VAR 0 6
18917: PUSH
18918: LD_VAR 0 2
18922: PUSH
18923: LD_VAR 0 3
18927: PUSH
18928: LD_VAR 0 4
18932: PUSH
18933: LD_VAR 0 5
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: ST_TO_ADDR
// exit ;
18944: GO 19241
// end ; if not chassis in _chassis then
18946: LD_VAR 0 2
18950: PUSH
18951: LD_VAR 0 9
18955: IN
18956: NOT
18957: IFFALSE 18983
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18959: LD_ADDR_VAR 0 2
18963: PUSH
18964: LD_VAR 0 9
18968: PUSH
18969: LD_INT 1
18971: PPUSH
18972: LD_VAR 0 9
18976: PPUSH
18977: CALL_OW 12
18981: ARRAY
18982: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18983: LD_VAR 0 2
18987: PPUSH
18988: LD_VAR 0 3
18992: PPUSH
18993: CALL 19246 0 2
18997: NOT
18998: IFFALSE 19059
// repeat engine := _engine [ 1 ] ;
19000: LD_ADDR_VAR 0 3
19004: PUSH
19005: LD_VAR 0 11
19009: PUSH
19010: LD_INT 1
19012: ARRAY
19013: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19014: LD_ADDR_VAR 0 11
19018: PUSH
19019: LD_VAR 0 11
19023: PPUSH
19024: LD_INT 1
19026: PPUSH
19027: CALL_OW 3
19031: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19032: LD_VAR 0 2
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: CALL 19246 0 2
19046: IFTRUE 19057
19048: PUSH
19049: LD_VAR 0 11
19053: PUSH
19054: EMPTY
19055: EQUAL
19056: OR
19057: IFFALSE 19000
// if not control in _control then
19059: LD_VAR 0 4
19063: PUSH
19064: LD_VAR 0 12
19068: IN
19069: NOT
19070: IFFALSE 19096
// control := _control [ rand ( 1 , _control ) ] ;
19072: LD_ADDR_VAR 0 4
19076: PUSH
19077: LD_VAR 0 12
19081: PUSH
19082: LD_INT 1
19084: PPUSH
19085: LD_VAR 0 12
19089: PPUSH
19090: CALL_OW 12
19094: ARRAY
19095: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19096: LD_VAR 0 2
19100: PPUSH
19101: LD_VAR 0 5
19105: PPUSH
19106: CALL 19468 0 2
19110: NOT
19111: IFFALSE 19172
// repeat weapon := _weapon [ 1 ] ;
19113: LD_ADDR_VAR 0 5
19117: PUSH
19118: LD_VAR 0 10
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19127: LD_ADDR_VAR 0 10
19131: PUSH
19132: LD_VAR 0 10
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 3
19144: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19145: LD_VAR 0 2
19149: PPUSH
19150: LD_VAR 0 5
19154: PPUSH
19155: CALL 19468 0 2
19159: IFTRUE 19170
19161: PUSH
19162: LD_VAR 0 10
19166: PUSH
19167: EMPTY
19168: EQUAL
19169: OR
19170: IFFALSE 19113
// result := [ ] ;
19172: LD_ADDR_VAR 0 6
19176: PUSH
19177: EMPTY
19178: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19179: LD_VAR 0 1
19183: PPUSH
19184: LD_VAR 0 2
19188: PPUSH
19189: LD_VAR 0 3
19193: PPUSH
19194: LD_VAR 0 4
19198: PPUSH
19199: LD_VAR 0 5
19203: PPUSH
19204: CALL_OW 448
19208: IFFALSE 19241
// result := [ chassis , engine , control , weapon ] ;
19210: LD_ADDR_VAR 0 6
19214: PUSH
19215: LD_VAR 0 2
19219: PUSH
19220: LD_VAR 0 3
19224: PUSH
19225: LD_VAR 0 4
19229: PUSH
19230: LD_VAR 0 5
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: ST_TO_ADDR
// end ;
19241: LD_VAR 0 6
19245: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19246: LD_INT 0
19248: PPUSH
// if not chassis or not engine then
19249: LD_VAR 0 1
19253: NOT
19254: IFTRUE 19263
19256: PUSH
19257: LD_VAR 0 2
19261: NOT
19262: OR
19263: IFFALSE 19267
// exit ;
19265: GO 19463
// case engine of engine_solar :
19267: LD_VAR 0 2
19271: PUSH
19272: LD_INT 2
19274: DOUBLE
19275: EQUAL
19276: IFTRUE 19280
19278: GO 19318
19280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19281: LD_ADDR_VAR 0 3
19285: PUSH
19286: LD_INT 11
19288: PUSH
19289: LD_INT 12
19291: PUSH
19292: LD_INT 13
19294: PUSH
19295: LD_INT 14
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: ST_TO_ADDR
19316: GO 19447
19318: LD_INT 1
19320: DOUBLE
19321: EQUAL
19322: IFTRUE 19326
19324: GO 19388
19326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19327: LD_ADDR_VAR 0 3
19331: PUSH
19332: LD_INT 11
19334: PUSH
19335: LD_INT 12
19337: PUSH
19338: LD_INT 13
19340: PUSH
19341: LD_INT 14
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: LD_INT 4
19355: PUSH
19356: LD_INT 5
19358: PUSH
19359: LD_INT 21
19361: PUSH
19362: LD_INT 23
19364: PUSH
19365: LD_INT 22
19367: PUSH
19368: LD_INT 24
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: ST_TO_ADDR
19386: GO 19447
19388: LD_INT 3
19390: DOUBLE
19391: EQUAL
19392: IFTRUE 19396
19394: GO 19446
19396: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: LD_INT 13
19404: PUSH
19405: LD_INT 14
19407: PUSH
19408: LD_INT 2
19410: PUSH
19411: LD_INT 3
19413: PUSH
19414: LD_INT 4
19416: PUSH
19417: LD_INT 5
19419: PUSH
19420: LD_INT 21
19422: PUSH
19423: LD_INT 22
19425: PUSH
19426: LD_INT 23
19428: PUSH
19429: LD_INT 24
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: ST_TO_ADDR
19444: GO 19447
19446: POP
// result := ( chassis in result ) ;
19447: LD_ADDR_VAR 0 3
19451: PUSH
19452: LD_VAR 0 1
19456: PUSH
19457: LD_VAR 0 3
19461: IN
19462: ST_TO_ADDR
// end ;
19463: LD_VAR 0 3
19467: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19468: LD_INT 0
19470: PPUSH
// if not chassis or not weapon then
19471: LD_VAR 0 1
19475: NOT
19476: IFTRUE 19485
19478: PUSH
19479: LD_VAR 0 2
19483: NOT
19484: OR
19485: IFFALSE 19489
// exit ;
19487: GO 20583
// case weapon of us_machine_gun :
19489: LD_VAR 0 2
19493: PUSH
19494: LD_INT 2
19496: DOUBLE
19497: EQUAL
19498: IFTRUE 19502
19500: GO 19532
19502: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19503: LD_ADDR_VAR 0 3
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 3
19516: PUSH
19517: LD_INT 4
19519: PUSH
19520: LD_INT 5
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: ST_TO_ADDR
19530: GO 20567
19532: LD_INT 3
19534: DOUBLE
19535: EQUAL
19536: IFTRUE 19540
19538: GO 19570
19540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19541: LD_ADDR_VAR 0 3
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 3
19554: PUSH
19555: LD_INT 4
19557: PUSH
19558: LD_INT 5
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 20567
19570: LD_INT 11
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19608
19578: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 3
19592: PUSH
19593: LD_INT 4
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
19606: GO 20567
19608: LD_INT 4
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19642
19616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19617: LD_ADDR_VAR 0 3
19621: PUSH
19622: LD_INT 2
19624: PUSH
19625: LD_INT 3
19627: PUSH
19628: LD_INT 4
19630: PUSH
19631: LD_INT 5
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: ST_TO_ADDR
19640: GO 20567
19642: LD_INT 5
19644: DOUBLE
19645: EQUAL
19646: IFTRUE 19650
19648: GO 19676
19650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19651: LD_ADDR_VAR 0 3
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: LD_INT 3
19661: PUSH
19662: LD_INT 4
19664: PUSH
19665: LD_INT 5
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: ST_TO_ADDR
19674: GO 20567
19676: LD_INT 9
19678: DOUBLE
19679: EQUAL
19680: IFTRUE 19684
19682: GO 19710
19684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19685: LD_ADDR_VAR 0 3
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: LD_INT 3
19695: PUSH
19696: LD_INT 4
19698: PUSH
19699: LD_INT 5
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: ST_TO_ADDR
19708: GO 20567
19710: LD_INT 7
19712: DOUBLE
19713: EQUAL
19714: IFTRUE 19718
19716: GO 19744
19718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19719: LD_ADDR_VAR 0 3
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: LD_INT 3
19729: PUSH
19730: LD_INT 4
19732: PUSH
19733: LD_INT 5
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: ST_TO_ADDR
19742: GO 20567
19744: LD_INT 12
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19778
19752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: LD_INT 3
19763: PUSH
19764: LD_INT 4
19766: PUSH
19767: LD_INT 5
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: ST_TO_ADDR
19776: GO 20567
19778: LD_INT 13
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19812
19786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19787: LD_ADDR_VAR 0 3
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: LD_INT 4
19800: PUSH
19801: LD_INT 5
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: ST_TO_ADDR
19810: GO 20567
19812: LD_INT 14
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 19838
19820: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19821: LD_ADDR_VAR 0 3
19825: PUSH
19826: LD_INT 4
19828: PUSH
19829: LD_INT 5
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: ST_TO_ADDR
19836: GO 20567
19838: LD_INT 6
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19864
19846: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19847: LD_ADDR_VAR 0 3
19851: PUSH
19852: LD_INT 4
19854: PUSH
19855: LD_INT 5
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: ST_TO_ADDR
19862: GO 20567
19864: LD_INT 10
19866: DOUBLE
19867: EQUAL
19868: IFTRUE 19872
19870: GO 19890
19872: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19873: LD_ADDR_VAR 0 3
19877: PUSH
19878: LD_INT 4
19880: PUSH
19881: LD_INT 5
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: ST_TO_ADDR
19888: GO 20567
19890: LD_INT 22
19892: DOUBLE
19893: EQUAL
19894: IFTRUE 19898
19896: GO 19924
19898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19899: LD_ADDR_VAR 0 3
19903: PUSH
19904: LD_INT 11
19906: PUSH
19907: LD_INT 12
19909: PUSH
19910: LD_INT 13
19912: PUSH
19913: LD_INT 14
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: ST_TO_ADDR
19922: GO 20567
19924: LD_INT 23
19926: DOUBLE
19927: EQUAL
19928: IFTRUE 19932
19930: GO 19958
19932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19933: LD_ADDR_VAR 0 3
19937: PUSH
19938: LD_INT 11
19940: PUSH
19941: LD_INT 12
19943: PUSH
19944: LD_INT 13
19946: PUSH
19947: LD_INT 14
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: ST_TO_ADDR
19956: GO 20567
19958: LD_INT 24
19960: DOUBLE
19961: EQUAL
19962: IFTRUE 19966
19964: GO 19992
19966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19967: LD_ADDR_VAR 0 3
19971: PUSH
19972: LD_INT 11
19974: PUSH
19975: LD_INT 12
19977: PUSH
19978: LD_INT 13
19980: PUSH
19981: LD_INT 14
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: ST_TO_ADDR
19990: GO 20567
19992: LD_INT 30
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20026
20000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20001: LD_ADDR_VAR 0 3
20005: PUSH
20006: LD_INT 11
20008: PUSH
20009: LD_INT 12
20011: PUSH
20012: LD_INT 13
20014: PUSH
20015: LD_INT 14
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: ST_TO_ADDR
20024: GO 20567
20026: LD_INT 25
20028: DOUBLE
20029: EQUAL
20030: IFTRUE 20034
20032: GO 20052
20034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20035: LD_ADDR_VAR 0 3
20039: PUSH
20040: LD_INT 13
20042: PUSH
20043: LD_INT 14
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: ST_TO_ADDR
20050: GO 20567
20052: LD_INT 27
20054: DOUBLE
20055: EQUAL
20056: IFTRUE 20060
20058: GO 20078
20060: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20061: LD_ADDR_VAR 0 3
20065: PUSH
20066: LD_INT 13
20068: PUSH
20069: LD_INT 14
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: ST_TO_ADDR
20076: GO 20567
20078: LD_INT 92
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20112
20086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20087: LD_ADDR_VAR 0 3
20091: PUSH
20092: LD_INT 11
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: LD_INT 13
20100: PUSH
20101: LD_INT 14
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: ST_TO_ADDR
20110: GO 20567
20112: LD_INT 28
20114: DOUBLE
20115: EQUAL
20116: IFTRUE 20120
20118: GO 20138
20120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20121: LD_ADDR_VAR 0 3
20125: PUSH
20126: LD_INT 13
20128: PUSH
20129: LD_INT 14
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: ST_TO_ADDR
20136: GO 20567
20138: LD_INT 29
20140: DOUBLE
20141: EQUAL
20142: IFTRUE 20146
20144: GO 20164
20146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20147: LD_ADDR_VAR 0 3
20151: PUSH
20152: LD_INT 13
20154: PUSH
20155: LD_INT 14
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: ST_TO_ADDR
20162: GO 20567
20164: LD_INT 31
20166: DOUBLE
20167: EQUAL
20168: IFTRUE 20172
20170: GO 20190
20172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20173: LD_ADDR_VAR 0 3
20177: PUSH
20178: LD_INT 13
20180: PUSH
20181: LD_INT 14
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: ST_TO_ADDR
20188: GO 20567
20190: LD_INT 26
20192: DOUBLE
20193: EQUAL
20194: IFTRUE 20198
20196: GO 20216
20198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_INT 13
20206: PUSH
20207: LD_INT 14
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: ST_TO_ADDR
20214: GO 20567
20216: LD_INT 42
20218: DOUBLE
20219: EQUAL
20220: IFTRUE 20224
20222: GO 20250
20224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20225: LD_ADDR_VAR 0 3
20229: PUSH
20230: LD_INT 21
20232: PUSH
20233: LD_INT 22
20235: PUSH
20236: LD_INT 23
20238: PUSH
20239: LD_INT 24
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: ST_TO_ADDR
20248: GO 20567
20250: LD_INT 43
20252: DOUBLE
20253: EQUAL
20254: IFTRUE 20258
20256: GO 20284
20258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20259: LD_ADDR_VAR 0 3
20263: PUSH
20264: LD_INT 21
20266: PUSH
20267: LD_INT 22
20269: PUSH
20270: LD_INT 23
20272: PUSH
20273: LD_INT 24
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: ST_TO_ADDR
20282: GO 20567
20284: LD_INT 44
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20318
20292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20293: LD_ADDR_VAR 0 3
20297: PUSH
20298: LD_INT 21
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_INT 23
20306: PUSH
20307: LD_INT 24
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 20567
20318: LD_INT 45
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20352
20326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20327: LD_ADDR_VAR 0 3
20331: PUSH
20332: LD_INT 21
20334: PUSH
20335: LD_INT 22
20337: PUSH
20338: LD_INT 23
20340: PUSH
20341: LD_INT 24
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: ST_TO_ADDR
20350: GO 20567
20352: LD_INT 49
20354: DOUBLE
20355: EQUAL
20356: IFTRUE 20360
20358: GO 20386
20360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20361: LD_ADDR_VAR 0 3
20365: PUSH
20366: LD_INT 21
20368: PUSH
20369: LD_INT 22
20371: PUSH
20372: LD_INT 23
20374: PUSH
20375: LD_INT 24
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: ST_TO_ADDR
20384: GO 20567
20386: LD_INT 51
20388: DOUBLE
20389: EQUAL
20390: IFTRUE 20394
20392: GO 20420
20394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20395: LD_ADDR_VAR 0 3
20399: PUSH
20400: LD_INT 21
20402: PUSH
20403: LD_INT 22
20405: PUSH
20406: LD_INT 23
20408: PUSH
20409: LD_INT 24
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: ST_TO_ADDR
20418: GO 20567
20420: LD_INT 52
20422: DOUBLE
20423: EQUAL
20424: IFTRUE 20428
20426: GO 20454
20428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20429: LD_ADDR_VAR 0 3
20433: PUSH
20434: LD_INT 21
20436: PUSH
20437: LD_INT 22
20439: PUSH
20440: LD_INT 23
20442: PUSH
20443: LD_INT 24
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: ST_TO_ADDR
20452: GO 20567
20454: LD_INT 53
20456: DOUBLE
20457: EQUAL
20458: IFTRUE 20462
20460: GO 20480
20462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20463: LD_ADDR_VAR 0 3
20467: PUSH
20468: LD_INT 23
20470: PUSH
20471: LD_INT 24
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: ST_TO_ADDR
20478: GO 20567
20480: LD_INT 46
20482: DOUBLE
20483: EQUAL
20484: IFTRUE 20488
20486: GO 20506
20488: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20489: LD_ADDR_VAR 0 3
20493: PUSH
20494: LD_INT 23
20496: PUSH
20497: LD_INT 24
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: ST_TO_ADDR
20504: GO 20567
20506: LD_INT 47
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20532
20514: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20515: LD_ADDR_VAR 0 3
20519: PUSH
20520: LD_INT 23
20522: PUSH
20523: LD_INT 24
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: ST_TO_ADDR
20530: GO 20567
20532: LD_INT 98
20534: DOUBLE
20535: EQUAL
20536: IFTRUE 20540
20538: GO 20566
20540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20541: LD_ADDR_VAR 0 3
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 24
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: ST_TO_ADDR
20564: GO 20567
20566: POP
// result := ( chassis in result ) ;
20567: LD_ADDR_VAR 0 3
20571: PUSH
20572: LD_VAR 0 1
20576: PUSH
20577: LD_VAR 0 3
20581: IN
20582: ST_TO_ADDR
// end ;
20583: LD_VAR 0 3
20587: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20588: LD_INT 0
20590: PPUSH
20591: PPUSH
20592: PPUSH
20593: PPUSH
20594: PPUSH
20595: PPUSH
20596: PPUSH
// result := array ;
20597: LD_ADDR_VAR 0 5
20601: PUSH
20602: LD_VAR 0 1
20606: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20607: LD_VAR 0 1
20611: NOT
20612: IFTRUE 20621
20614: PUSH
20615: LD_VAR 0 2
20619: NOT
20620: OR
20621: IFTRUE 20630
20623: PUSH
20624: LD_VAR 0 3
20628: NOT
20629: OR
20630: IFTRUE 20644
20632: PUSH
20633: LD_VAR 0 2
20637: PUSH
20638: LD_VAR 0 1
20642: GREATER
20643: OR
20644: IFTRUE 20658
20646: PUSH
20647: LD_VAR 0 3
20651: PUSH
20652: LD_VAR 0 1
20656: GREATER
20657: OR
20658: IFFALSE 20662
// exit ;
20660: GO 20958
// if direction then
20662: LD_VAR 0 4
20666: IFFALSE 20730
// begin d := 1 ;
20668: LD_ADDR_VAR 0 9
20672: PUSH
20673: LD_INT 1
20675: ST_TO_ADDR
// if i_from > i_to then
20676: LD_VAR 0 2
20680: PUSH
20681: LD_VAR 0 3
20685: GREATER
20686: IFFALSE 20712
// length := ( array - i_from ) + i_to else
20688: LD_ADDR_VAR 0 11
20692: PUSH
20693: LD_VAR 0 1
20697: PUSH
20698: LD_VAR 0 2
20702: MINUS
20703: PUSH
20704: LD_VAR 0 3
20708: PLUS
20709: ST_TO_ADDR
20710: GO 20728
// length := i_to - i_from ;
20712: LD_ADDR_VAR 0 11
20716: PUSH
20717: LD_VAR 0 3
20721: PUSH
20722: LD_VAR 0 2
20726: MINUS
20727: ST_TO_ADDR
// end else
20728: GO 20791
// begin d := - 1 ;
20730: LD_ADDR_VAR 0 9
20734: PUSH
20735: LD_INT 1
20737: NEG
20738: ST_TO_ADDR
// if i_from > i_to then
20739: LD_VAR 0 2
20743: PUSH
20744: LD_VAR 0 3
20748: GREATER
20749: IFFALSE 20769
// length := i_from - i_to else
20751: LD_ADDR_VAR 0 11
20755: PUSH
20756: LD_VAR 0 2
20760: PUSH
20761: LD_VAR 0 3
20765: MINUS
20766: ST_TO_ADDR
20767: GO 20791
// length := ( array - i_to ) + i_from ;
20769: LD_ADDR_VAR 0 11
20773: PUSH
20774: LD_VAR 0 1
20778: PUSH
20779: LD_VAR 0 3
20783: MINUS
20784: PUSH
20785: LD_VAR 0 2
20789: PLUS
20790: ST_TO_ADDR
// end ; if not length then
20791: LD_VAR 0 11
20795: NOT
20796: IFFALSE 20800
// exit ;
20798: GO 20958
// tmp := array ;
20800: LD_ADDR_VAR 0 10
20804: PUSH
20805: LD_VAR 0 1
20809: ST_TO_ADDR
// for i = 1 to length do
20810: LD_ADDR_VAR 0 6
20814: PUSH
20815: DOUBLE
20816: LD_INT 1
20818: DEC
20819: ST_TO_ADDR
20820: LD_VAR 0 11
20824: PUSH
20825: FOR_TO
20826: IFFALSE 20946
// begin for j = 1 to array do
20828: LD_ADDR_VAR 0 7
20832: PUSH
20833: DOUBLE
20834: LD_INT 1
20836: DEC
20837: ST_TO_ADDR
20838: LD_VAR 0 1
20842: PUSH
20843: FOR_TO
20844: IFFALSE 20932
// begin k := j + d ;
20846: LD_ADDR_VAR 0 8
20850: PUSH
20851: LD_VAR 0 7
20855: PUSH
20856: LD_VAR 0 9
20860: PLUS
20861: ST_TO_ADDR
// if k > array then
20862: LD_VAR 0 8
20866: PUSH
20867: LD_VAR 0 1
20871: GREATER
20872: IFFALSE 20882
// k := 1 ;
20874: LD_ADDR_VAR 0 8
20878: PUSH
20879: LD_INT 1
20881: ST_TO_ADDR
// if not k then
20882: LD_VAR 0 8
20886: NOT
20887: IFFALSE 20899
// k := array ;
20889: LD_ADDR_VAR 0 8
20893: PUSH
20894: LD_VAR 0 1
20898: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20899: LD_ADDR_VAR 0 10
20903: PUSH
20904: LD_VAR 0 10
20908: PPUSH
20909: LD_VAR 0 8
20913: PPUSH
20914: LD_VAR 0 1
20918: PUSH
20919: LD_VAR 0 7
20923: ARRAY
20924: PPUSH
20925: CALL_OW 1
20929: ST_TO_ADDR
// end ;
20930: GO 20843
20932: POP
20933: POP
// array := tmp ;
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_VAR 0 10
20943: ST_TO_ADDR
// end ;
20944: GO 20825
20946: POP
20947: POP
// result := array ;
20948: LD_ADDR_VAR 0 5
20952: PUSH
20953: LD_VAR 0 1
20957: ST_TO_ADDR
// end ;
20958: LD_VAR 0 5
20962: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20963: LD_INT 0
20965: PPUSH
20966: PPUSH
// result := 0 ;
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// if not array or not value in array then
20975: LD_VAR 0 1
20979: NOT
20980: IFTRUE 20995
20982: PUSH
20983: LD_VAR 0 2
20987: PUSH
20988: LD_VAR 0 1
20992: IN
20993: NOT
20994: OR
20995: IFFALSE 20999
// exit ;
20997: GO 21053
// for i = 1 to array do
20999: LD_ADDR_VAR 0 4
21003: PUSH
21004: DOUBLE
21005: LD_INT 1
21007: DEC
21008: ST_TO_ADDR
21009: LD_VAR 0 1
21013: PUSH
21014: FOR_TO
21015: IFFALSE 21051
// if value = array [ i ] then
21017: LD_VAR 0 2
21021: PUSH
21022: LD_VAR 0 1
21026: PUSH
21027: LD_VAR 0 4
21031: ARRAY
21032: EQUAL
21033: IFFALSE 21049
// begin result := i ;
21035: LD_ADDR_VAR 0 3
21039: PUSH
21040: LD_VAR 0 4
21044: ST_TO_ADDR
// exit ;
21045: POP
21046: POP
21047: GO 21053
// end ;
21049: GO 21014
21051: POP
21052: POP
// end ;
21053: LD_VAR 0 3
21057: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21058: LD_INT 0
21060: PPUSH
// vc_chassis := chassis ;
21061: LD_ADDR_OWVAR 37
21065: PUSH
21066: LD_VAR 0 1
21070: ST_TO_ADDR
// vc_engine := engine ;
21071: LD_ADDR_OWVAR 39
21075: PUSH
21076: LD_VAR 0 2
21080: ST_TO_ADDR
// vc_control := control ;
21081: LD_ADDR_OWVAR 38
21085: PUSH
21086: LD_VAR 0 3
21090: ST_TO_ADDR
// vc_weapon := weapon ;
21091: LD_ADDR_OWVAR 40
21095: PUSH
21096: LD_VAR 0 4
21100: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21101: LD_ADDR_OWVAR 41
21105: PUSH
21106: LD_VAR 0 5
21110: ST_TO_ADDR
// end ;
21111: LD_VAR 0 6
21115: RET
// export function WantPlant ( unit ) ; var task ; begin
21116: LD_INT 0
21118: PPUSH
21119: PPUSH
// result := false ;
21120: LD_ADDR_VAR 0 2
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21128: LD_ADDR_VAR 0 3
21132: PUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 437
21142: ST_TO_ADDR
// if task then
21143: LD_VAR 0 3
21147: IFFALSE 21175
// if task [ 1 ] [ 1 ] = p then
21149: LD_VAR 0 3
21153: PUSH
21154: LD_INT 1
21156: ARRAY
21157: PUSH
21158: LD_INT 1
21160: ARRAY
21161: PUSH
21162: LD_STRING p
21164: EQUAL
21165: IFFALSE 21175
// result := true ;
21167: LD_ADDR_VAR 0 2
21171: PUSH
21172: LD_INT 1
21174: ST_TO_ADDR
// end ;
21175: LD_VAR 0 2
21179: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21180: LD_INT 0
21182: PPUSH
21183: PPUSH
21184: PPUSH
21185: PPUSH
// if pos < 1 then
21186: LD_VAR 0 2
21190: PUSH
21191: LD_INT 1
21193: LESS
21194: IFFALSE 21198
// exit ;
21196: GO 21501
// if pos = 1 then
21198: LD_VAR 0 2
21202: PUSH
21203: LD_INT 1
21205: EQUAL
21206: IFFALSE 21239
// result := Replace ( arr , pos [ 1 ] , value ) else
21208: LD_ADDR_VAR 0 4
21212: PUSH
21213: LD_VAR 0 1
21217: PPUSH
21218: LD_VAR 0 2
21222: PUSH
21223: LD_INT 1
21225: ARRAY
21226: PPUSH
21227: LD_VAR 0 3
21231: PPUSH
21232: CALL_OW 1
21236: ST_TO_ADDR
21237: GO 21501
// begin tmp := arr ;
21239: LD_ADDR_VAR 0 6
21243: PUSH
21244: LD_VAR 0 1
21248: ST_TO_ADDR
// s_arr := [ tmp ] ;
21249: LD_ADDR_VAR 0 7
21253: PUSH
21254: LD_VAR 0 6
21258: PUSH
21259: EMPTY
21260: LIST
21261: ST_TO_ADDR
// for i = 1 to pos - 1 do
21262: LD_ADDR_VAR 0 5
21266: PUSH
21267: DOUBLE
21268: LD_INT 1
21270: DEC
21271: ST_TO_ADDR
21272: LD_VAR 0 2
21276: PUSH
21277: LD_INT 1
21279: MINUS
21280: PUSH
21281: FOR_TO
21282: IFFALSE 21327
// begin tmp := tmp [ pos [ i ] ] ;
21284: LD_ADDR_VAR 0 6
21288: PUSH
21289: LD_VAR 0 6
21293: PUSH
21294: LD_VAR 0 2
21298: PUSH
21299: LD_VAR 0 5
21303: ARRAY
21304: ARRAY
21305: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21306: LD_ADDR_VAR 0 7
21310: PUSH
21311: LD_VAR 0 7
21315: PUSH
21316: LD_VAR 0 6
21320: PUSH
21321: EMPTY
21322: LIST
21323: ADD
21324: ST_TO_ADDR
// end ;
21325: GO 21281
21327: POP
21328: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21329: LD_ADDR_VAR 0 6
21333: PUSH
21334: LD_VAR 0 6
21338: PPUSH
21339: LD_VAR 0 2
21343: PUSH
21344: LD_VAR 0 2
21348: ARRAY
21349: PPUSH
21350: LD_VAR 0 3
21354: PPUSH
21355: CALL_OW 1
21359: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21360: LD_ADDR_VAR 0 7
21364: PUSH
21365: LD_VAR 0 7
21369: PPUSH
21370: LD_VAR 0 7
21374: PPUSH
21375: LD_VAR 0 6
21379: PPUSH
21380: CALL_OW 1
21384: ST_TO_ADDR
// for i = s_arr downto 2 do
21385: LD_ADDR_VAR 0 5
21389: PUSH
21390: DOUBLE
21391: LD_VAR 0 7
21395: INC
21396: ST_TO_ADDR
21397: LD_INT 2
21399: PUSH
21400: FOR_DOWNTO
21401: IFFALSE 21485
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21403: LD_ADDR_VAR 0 6
21407: PUSH
21408: LD_VAR 0 7
21412: PUSH
21413: LD_VAR 0 5
21417: PUSH
21418: LD_INT 1
21420: MINUS
21421: ARRAY
21422: PPUSH
21423: LD_VAR 0 2
21427: PUSH
21428: LD_VAR 0 5
21432: PUSH
21433: LD_INT 1
21435: MINUS
21436: ARRAY
21437: PPUSH
21438: LD_VAR 0 7
21442: PUSH
21443: LD_VAR 0 5
21447: ARRAY
21448: PPUSH
21449: CALL_OW 1
21453: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21454: LD_ADDR_VAR 0 7
21458: PUSH
21459: LD_VAR 0 7
21463: PPUSH
21464: LD_VAR 0 5
21468: PUSH
21469: LD_INT 1
21471: MINUS
21472: PPUSH
21473: LD_VAR 0 6
21477: PPUSH
21478: CALL_OW 1
21482: ST_TO_ADDR
// end ;
21483: GO 21400
21485: POP
21486: POP
// result := s_arr [ 1 ] ;
21487: LD_ADDR_VAR 0 4
21491: PUSH
21492: LD_VAR 0 7
21496: PUSH
21497: LD_INT 1
21499: ARRAY
21500: ST_TO_ADDR
// end ; end ;
21501: LD_VAR 0 4
21505: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21506: LD_INT 0
21508: PPUSH
21509: PPUSH
// if not list then
21510: LD_VAR 0 1
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21610
// i := list [ pos1 ] ;
21519: LD_ADDR_VAR 0 5
21523: PUSH
21524: LD_VAR 0 1
21528: PUSH
21529: LD_VAR 0 2
21533: ARRAY
21534: ST_TO_ADDR
// if not i then
21535: LD_VAR 0 5
21539: NOT
21540: IFFALSE 21544
// exit ;
21542: GO 21610
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21544: LD_ADDR_VAR 0 1
21548: PUSH
21549: LD_VAR 0 1
21553: PPUSH
21554: LD_VAR 0 2
21558: PPUSH
21559: LD_VAR 0 1
21563: PUSH
21564: LD_VAR 0 3
21568: ARRAY
21569: PPUSH
21570: CALL_OW 1
21574: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21575: LD_ADDR_VAR 0 1
21579: PUSH
21580: LD_VAR 0 1
21584: PPUSH
21585: LD_VAR 0 3
21589: PPUSH
21590: LD_VAR 0 5
21594: PPUSH
21595: CALL_OW 1
21599: ST_TO_ADDR
// result := list ;
21600: LD_ADDR_VAR 0 4
21604: PUSH
21605: LD_VAR 0 1
21609: ST_TO_ADDR
// end ;
21610: LD_VAR 0 4
21614: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21615: LD_INT 0
21617: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21618: LD_ADDR_VAR 0 5
21622: PUSH
21623: LD_VAR 0 1
21627: PPUSH
21628: CALL_OW 250
21632: PPUSH
21633: LD_VAR 0 1
21637: PPUSH
21638: CALL_OW 251
21642: PPUSH
21643: LD_VAR 0 2
21647: PPUSH
21648: LD_VAR 0 3
21652: PPUSH
21653: LD_VAR 0 4
21657: PPUSH
21658: CALL 22040 0 5
21662: ST_TO_ADDR
// end ;
21663: LD_VAR 0 5
21667: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
21673: PPUSH
// if not list or not unit then
21674: LD_VAR 0 2
21678: NOT
21679: IFTRUE 21688
21681: PUSH
21682: LD_VAR 0 1
21686: NOT
21687: OR
21688: IFFALSE 21692
// exit ;
21690: GO 22035
// result := [ ] ;
21692: LD_ADDR_VAR 0 5
21696: PUSH
21697: EMPTY
21698: ST_TO_ADDR
// for i in list do
21699: LD_ADDR_VAR 0 6
21703: PUSH
21704: LD_VAR 0 2
21708: PUSH
21709: FOR_IN
21710: IFFALSE 21928
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21712: LD_ADDR_VAR 0 8
21716: PUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: LD_VAR 0 6
21726: PUSH
21727: LD_INT 1
21729: ARRAY
21730: PPUSH
21731: LD_VAR 0 6
21735: PUSH
21736: LD_INT 2
21738: ARRAY
21739: PPUSH
21740: CALL_OW 297
21744: ST_TO_ADDR
// if not Count ( result ) then
21745: LD_VAR 0 5
21749: PPUSH
21750: CALL 18262 0 1
21754: NOT
21755: IFFALSE 21788
// begin result := Join ( result , [ i , tmp ] ) ;
21757: LD_ADDR_VAR 0 5
21761: PUSH
21762: LD_VAR 0 5
21766: PPUSH
21767: LD_VAR 0 6
21771: PUSH
21772: LD_VAR 0 8
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PPUSH
21781: CALL 54238 0 2
21785: ST_TO_ADDR
// continue ;
21786: GO 21709
// end ; if result [ result ] [ 2 ] <= tmp then
21788: LD_VAR 0 5
21792: PUSH
21793: LD_VAR 0 5
21797: ARRAY
21798: PUSH
21799: LD_INT 2
21801: ARRAY
21802: PUSH
21803: LD_VAR 0 8
21807: LESSEQUAL
21808: IFFALSE 21841
// result := Join ( result , [ i , tmp ] ) else
21810: LD_ADDR_VAR 0 5
21814: PUSH
21815: LD_VAR 0 5
21819: PPUSH
21820: LD_VAR 0 6
21824: PUSH
21825: LD_VAR 0 8
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PPUSH
21834: CALL 54238 0 2
21838: ST_TO_ADDR
21839: GO 21926
// begin for j := 1 to Count ( result ) do
21841: LD_ADDR_VAR 0 7
21845: PUSH
21846: DOUBLE
21847: LD_INT 1
21849: DEC
21850: ST_TO_ADDR
21851: LD_VAR 0 5
21855: PPUSH
21856: CALL 18262 0 1
21860: PUSH
21861: FOR_TO
21862: IFFALSE 21924
// begin if tmp < result [ j ] [ 2 ] then
21864: LD_VAR 0 8
21868: PUSH
21869: LD_VAR 0 5
21873: PUSH
21874: LD_VAR 0 7
21878: ARRAY
21879: PUSH
21880: LD_INT 2
21882: ARRAY
21883: LESS
21884: IFFALSE 21922
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21886: LD_ADDR_VAR 0 5
21890: PUSH
21891: LD_VAR 0 5
21895: PPUSH
21896: LD_VAR 0 7
21900: PPUSH
21901: LD_VAR 0 6
21905: PUSH
21906: LD_VAR 0 8
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PPUSH
21915: CALL_OW 2
21919: ST_TO_ADDR
// break ;
21920: GO 21924
// end ; end ;
21922: GO 21861
21924: POP
21925: POP
// end ; end ;
21926: GO 21709
21928: POP
21929: POP
// if result and not asc then
21930: LD_VAR 0 5
21934: IFFALSE 21943
21936: PUSH
21937: LD_VAR 0 3
21941: NOT
21942: AND
21943: IFFALSE 21960
// result := ReverseArray ( result ) ;
21945: LD_ADDR_VAR 0 5
21949: PUSH
21950: LD_VAR 0 5
21954: PPUSH
21955: CALL 49318 0 1
21959: ST_TO_ADDR
// tmp := [ ] ;
21960: LD_ADDR_VAR 0 8
21964: PUSH
21965: EMPTY
21966: ST_TO_ADDR
// if mode then
21967: LD_VAR 0 4
21971: IFFALSE 22035
// begin for i := 1 to result do
21973: LD_ADDR_VAR 0 6
21977: PUSH
21978: DOUBLE
21979: LD_INT 1
21981: DEC
21982: ST_TO_ADDR
21983: LD_VAR 0 5
21987: PUSH
21988: FOR_TO
21989: IFFALSE 22023
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21991: LD_ADDR_VAR 0 8
21995: PUSH
21996: LD_VAR 0 8
22000: PPUSH
22001: LD_VAR 0 5
22005: PUSH
22006: LD_VAR 0 6
22010: ARRAY
22011: PUSH
22012: LD_INT 1
22014: ARRAY
22015: PPUSH
22016: CALL 54238 0 2
22020: ST_TO_ADDR
22021: GO 21988
22023: POP
22024: POP
// result := tmp ;
22025: LD_ADDR_VAR 0 5
22029: PUSH
22030: LD_VAR 0 8
22034: ST_TO_ADDR
// end ; end ;
22035: LD_VAR 0 5
22039: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22040: LD_INT 0
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
// if not list then
22046: LD_VAR 0 3
22050: NOT
22051: IFFALSE 22055
// exit ;
22053: GO 22445
// result := [ ] ;
22055: LD_ADDR_VAR 0 6
22059: PUSH
22060: EMPTY
22061: ST_TO_ADDR
// for i in list do
22062: LD_ADDR_VAR 0 7
22066: PUSH
22067: LD_VAR 0 3
22071: PUSH
22072: FOR_IN
22073: IFFALSE 22275
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22075: LD_ADDR_VAR 0 9
22079: PUSH
22080: LD_VAR 0 7
22084: PPUSH
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_VAR 0 2
22094: PPUSH
22095: CALL_OW 297
22099: ST_TO_ADDR
// if not result then
22100: LD_VAR 0 6
22104: NOT
22105: IFFALSE 22131
// result := [ [ i , tmp ] ] else
22107: LD_ADDR_VAR 0 6
22111: PUSH
22112: LD_VAR 0 7
22116: PUSH
22117: LD_VAR 0 9
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: ST_TO_ADDR
22129: GO 22273
// begin if result [ result ] [ 2 ] <= tmp then
22131: LD_VAR 0 6
22135: PUSH
22136: LD_VAR 0 6
22140: ARRAY
22141: PUSH
22142: LD_INT 2
22144: ARRAY
22145: PUSH
22146: LD_VAR 0 9
22150: LESSEQUAL
22151: IFFALSE 22193
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22153: LD_ADDR_VAR 0 6
22157: PUSH
22158: LD_VAR 0 6
22162: PPUSH
22163: LD_VAR 0 6
22167: PUSH
22168: LD_INT 1
22170: PLUS
22171: PPUSH
22172: LD_VAR 0 7
22176: PUSH
22177: LD_VAR 0 9
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PPUSH
22186: CALL_OW 2
22190: ST_TO_ADDR
22191: GO 22273
// for j := 1 to result do
22193: LD_ADDR_VAR 0 8
22197: PUSH
22198: DOUBLE
22199: LD_INT 1
22201: DEC
22202: ST_TO_ADDR
22203: LD_VAR 0 6
22207: PUSH
22208: FOR_TO
22209: IFFALSE 22271
// begin if tmp < result [ j ] [ 2 ] then
22211: LD_VAR 0 9
22215: PUSH
22216: LD_VAR 0 6
22220: PUSH
22221: LD_VAR 0 8
22225: ARRAY
22226: PUSH
22227: LD_INT 2
22229: ARRAY
22230: LESS
22231: IFFALSE 22269
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22233: LD_ADDR_VAR 0 6
22237: PUSH
22238: LD_VAR 0 6
22242: PPUSH
22243: LD_VAR 0 8
22247: PPUSH
22248: LD_VAR 0 7
22252: PUSH
22253: LD_VAR 0 9
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PPUSH
22262: CALL_OW 2
22266: ST_TO_ADDR
// break ;
22267: GO 22271
// end ; end ;
22269: GO 22208
22271: POP
22272: POP
// end ; end ;
22273: GO 22072
22275: POP
22276: POP
// if result and not asc then
22277: LD_VAR 0 6
22281: IFFALSE 22290
22283: PUSH
22284: LD_VAR 0 4
22288: NOT
22289: AND
22290: IFFALSE 22365
// begin tmp := result ;
22292: LD_ADDR_VAR 0 9
22296: PUSH
22297: LD_VAR 0 6
22301: ST_TO_ADDR
// for i = tmp downto 1 do
22302: LD_ADDR_VAR 0 7
22306: PUSH
22307: DOUBLE
22308: LD_VAR 0 9
22312: INC
22313: ST_TO_ADDR
22314: LD_INT 1
22316: PUSH
22317: FOR_DOWNTO
22318: IFFALSE 22363
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22320: LD_ADDR_VAR 0 6
22324: PUSH
22325: LD_VAR 0 6
22329: PPUSH
22330: LD_VAR 0 9
22334: PUSH
22335: LD_VAR 0 7
22339: MINUS
22340: PUSH
22341: LD_INT 1
22343: PLUS
22344: PPUSH
22345: LD_VAR 0 9
22349: PUSH
22350: LD_VAR 0 7
22354: ARRAY
22355: PPUSH
22356: CALL_OW 1
22360: ST_TO_ADDR
22361: GO 22317
22363: POP
22364: POP
// end ; tmp := [ ] ;
22365: LD_ADDR_VAR 0 9
22369: PUSH
22370: EMPTY
22371: ST_TO_ADDR
// if mode then
22372: LD_VAR 0 5
22376: IFFALSE 22445
// begin for i = 1 to result do
22378: LD_ADDR_VAR 0 7
22382: PUSH
22383: DOUBLE
22384: LD_INT 1
22386: DEC
22387: ST_TO_ADDR
22388: LD_VAR 0 6
22392: PUSH
22393: FOR_TO
22394: IFFALSE 22433
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22396: LD_ADDR_VAR 0 9
22400: PUSH
22401: LD_VAR 0 9
22405: PPUSH
22406: LD_VAR 0 7
22410: PPUSH
22411: LD_VAR 0 6
22415: PUSH
22416: LD_VAR 0 7
22420: ARRAY
22421: PUSH
22422: LD_INT 1
22424: ARRAY
22425: PPUSH
22426: CALL_OW 1
22430: ST_TO_ADDR
22431: GO 22393
22433: POP
22434: POP
// result := tmp ;
22435: LD_ADDR_VAR 0 6
22439: PUSH
22440: LD_VAR 0 9
22444: ST_TO_ADDR
// end ; end ;
22445: LD_VAR 0 6
22449: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22450: LD_INT 0
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
22457: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22458: LD_ADDR_VAR 0 5
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: EMPTY
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: ST_TO_ADDR
// if not x or not y then
22480: LD_VAR 0 2
22484: NOT
22485: IFTRUE 22494
22487: PUSH
22488: LD_VAR 0 3
22492: NOT
22493: OR
22494: IFFALSE 22498
// exit ;
22496: GO 24154
// if not range then
22498: LD_VAR 0 4
22502: NOT
22503: IFFALSE 22513
// range := 10 ;
22505: LD_ADDR_VAR 0 4
22509: PUSH
22510: LD_INT 10
22512: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22513: LD_ADDR_VAR 0 8
22517: PUSH
22518: LD_INT 81
22520: PUSH
22521: LD_VAR 0 1
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 92
22532: PUSH
22533: LD_VAR 0 2
22537: PUSH
22538: LD_VAR 0 3
22542: PUSH
22543: LD_VAR 0 4
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 3
22556: PUSH
22557: LD_INT 21
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 69
22580: ST_TO_ADDR
// if not tmp then
22581: LD_VAR 0 8
22585: NOT
22586: IFFALSE 22590
// exit ;
22588: GO 24154
// for i in tmp do
22590: LD_ADDR_VAR 0 6
22594: PUSH
22595: LD_VAR 0 8
22599: PUSH
22600: FOR_IN
22601: IFFALSE 24129
// begin points := [ 0 , 0 , 0 ] ;
22603: LD_ADDR_VAR 0 9
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 0
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: ST_TO_ADDR
// bpoints := 1 ;
22622: LD_ADDR_VAR 0 10
22626: PUSH
22627: LD_INT 1
22629: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22630: LD_VAR 0 6
22634: PPUSH
22635: CALL_OW 247
22639: PUSH
22640: LD_INT 1
22642: DOUBLE
22643: EQUAL
22644: IFTRUE 22648
22646: GO 23230
22648: POP
// begin if GetClass ( i ) = 1 then
22649: LD_VAR 0 6
22653: PPUSH
22654: CALL_OW 257
22658: PUSH
22659: LD_INT 1
22661: EQUAL
22662: IFFALSE 22683
// points := [ 10 , 5 , 3 ] ;
22664: LD_ADDR_VAR 0 9
22668: PUSH
22669: LD_INT 10
22671: PUSH
22672: LD_INT 5
22674: PUSH
22675: LD_INT 3
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22683: LD_VAR 0 6
22687: PPUSH
22688: CALL_OW 257
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: LD_INT 3
22698: PUSH
22699: LD_INT 4
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: IN
22707: IFFALSE 22728
// points := [ 3 , 2 , 1 ] ;
22709: LD_ADDR_VAR 0 9
22713: PUSH
22714: LD_INT 3
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22728: LD_VAR 0 6
22732: PPUSH
22733: CALL_OW 257
22737: PUSH
22738: LD_INT 5
22740: EQUAL
22741: IFFALSE 22762
// points := [ 130 , 5 , 2 ] ;
22743: LD_ADDR_VAR 0 9
22747: PUSH
22748: LD_INT 130
22750: PUSH
22751: LD_INT 5
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22762: LD_VAR 0 6
22766: PPUSH
22767: CALL_OW 257
22771: PUSH
22772: LD_INT 8
22774: EQUAL
22775: IFFALSE 22796
// points := [ 35 , 35 , 30 ] ;
22777: LD_ADDR_VAR 0 9
22781: PUSH
22782: LD_INT 35
22784: PUSH
22785: LD_INT 35
22787: PUSH
22788: LD_INT 30
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22796: LD_VAR 0 6
22800: PPUSH
22801: CALL_OW 257
22805: PUSH
22806: LD_INT 9
22808: EQUAL
22809: IFFALSE 22830
// points := [ 20 , 55 , 40 ] ;
22811: LD_ADDR_VAR 0 9
22815: PUSH
22816: LD_INT 20
22818: PUSH
22819: LD_INT 55
22821: PUSH
22822: LD_INT 40
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22830: LD_VAR 0 6
22834: PPUSH
22835: CALL_OW 257
22839: PUSH
22840: LD_INT 12
22842: PUSH
22843: LD_INT 16
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: IN
22850: IFFALSE 22871
// points := [ 5 , 3 , 2 ] ;
22852: LD_ADDR_VAR 0 9
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: LD_INT 3
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22871: LD_VAR 0 6
22875: PPUSH
22876: CALL_OW 257
22880: PUSH
22881: LD_INT 17
22883: EQUAL
22884: IFFALSE 22905
// points := [ 100 , 50 , 75 ] ;
22886: LD_ADDR_VAR 0 9
22890: PUSH
22891: LD_INT 100
22893: PUSH
22894: LD_INT 50
22896: PUSH
22897: LD_INT 75
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22905: LD_VAR 0 6
22909: PPUSH
22910: CALL_OW 257
22914: PUSH
22915: LD_INT 15
22917: EQUAL
22918: IFFALSE 22939
// points := [ 10 , 5 , 3 ] ;
22920: LD_ADDR_VAR 0 9
22924: PUSH
22925: LD_INT 10
22927: PUSH
22928: LD_INT 5
22930: PUSH
22931: LD_INT 3
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22939: LD_VAR 0 6
22943: PPUSH
22944: CALL_OW 257
22948: PUSH
22949: LD_INT 14
22951: EQUAL
22952: IFFALSE 22973
// points := [ 10 , 0 , 0 ] ;
22954: LD_ADDR_VAR 0 9
22958: PUSH
22959: LD_INT 10
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22973: LD_VAR 0 6
22977: PPUSH
22978: CALL_OW 257
22982: PUSH
22983: LD_INT 11
22985: EQUAL
22986: IFFALSE 23007
// points := [ 30 , 10 , 5 ] ;
22988: LD_ADDR_VAR 0 9
22992: PUSH
22993: LD_INT 30
22995: PUSH
22996: LD_INT 10
22998: PUSH
22999: LD_INT 5
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23007: LD_VAR 0 1
23011: PPUSH
23012: LD_INT 5
23014: PPUSH
23015: CALL_OW 321
23019: PUSH
23020: LD_INT 2
23022: EQUAL
23023: IFFALSE 23040
// bpoints := bpoints * 1.8 ;
23025: LD_ADDR_VAR 0 10
23029: PUSH
23030: LD_VAR 0 10
23034: PUSH
23035: LD_REAL  1.80000000000000E+0000
23038: MUL
23039: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23040: LD_VAR 0 6
23044: PPUSH
23045: CALL_OW 257
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 2
23055: PUSH
23056: LD_INT 3
23058: PUSH
23059: LD_INT 4
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: IN
23068: IFFALSE 23088
23070: PUSH
23071: LD_VAR 0 1
23075: PPUSH
23076: LD_INT 51
23078: PPUSH
23079: CALL_OW 321
23083: PUSH
23084: LD_INT 2
23086: EQUAL
23087: AND
23088: IFFALSE 23105
// bpoints := bpoints * 1.2 ;
23090: LD_ADDR_VAR 0 10
23094: PUSH
23095: LD_VAR 0 10
23099: PUSH
23100: LD_REAL  1.20000000000000E+0000
23103: MUL
23104: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23105: LD_VAR 0 6
23109: PPUSH
23110: CALL_OW 257
23114: PUSH
23115: LD_INT 5
23117: PUSH
23118: LD_INT 7
23120: PUSH
23121: LD_INT 9
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: IN
23129: IFFALSE 23149
23131: PUSH
23132: LD_VAR 0 1
23136: PPUSH
23137: LD_INT 52
23139: PPUSH
23140: CALL_OW 321
23144: PUSH
23145: LD_INT 2
23147: EQUAL
23148: AND
23149: IFFALSE 23166
// bpoints := bpoints * 1.5 ;
23151: LD_ADDR_VAR 0 10
23155: PUSH
23156: LD_VAR 0 10
23160: PUSH
23161: LD_REAL  1.50000000000000E+0000
23164: MUL
23165: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_INT 66
23173: PPUSH
23174: CALL_OW 321
23178: PUSH
23179: LD_INT 2
23181: EQUAL
23182: IFFALSE 23199
// bpoints := bpoints * 1.1 ;
23184: LD_ADDR_VAR 0 10
23188: PUSH
23189: LD_VAR 0 10
23193: PUSH
23194: LD_REAL  1.10000000000000E+0000
23197: MUL
23198: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23199: LD_ADDR_VAR 0 10
23203: PUSH
23204: LD_VAR 0 10
23208: PUSH
23209: LD_VAR 0 6
23213: PPUSH
23214: LD_INT 1
23216: PPUSH
23217: CALL_OW 259
23221: PUSH
23222: LD_REAL  1.15000000000000E+0000
23225: MUL
23226: MUL
23227: ST_TO_ADDR
// end ; unit_vehicle :
23228: GO 24058
23230: LD_INT 2
23232: DOUBLE
23233: EQUAL
23234: IFTRUE 23238
23236: GO 24046
23238: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23239: LD_VAR 0 6
23243: PPUSH
23244: CALL_OW 264
23248: PUSH
23249: LD_INT 2
23251: PUSH
23252: LD_INT 42
23254: PUSH
23255: LD_INT 24
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: IN
23263: IFFALSE 23284
// points := [ 25 , 5 , 3 ] ;
23265: LD_ADDR_VAR 0 9
23269: PUSH
23270: LD_INT 25
23272: PUSH
23273: LD_INT 5
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23284: LD_VAR 0 6
23288: PPUSH
23289: CALL_OW 264
23293: PUSH
23294: LD_INT 4
23296: PUSH
23297: LD_INT 43
23299: PUSH
23300: LD_INT 25
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: IN
23308: IFFALSE 23329
// points := [ 40 , 15 , 5 ] ;
23310: LD_ADDR_VAR 0 9
23314: PUSH
23315: LD_INT 40
23317: PUSH
23318: LD_INT 15
23320: PUSH
23321: LD_INT 5
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23329: LD_VAR 0 6
23333: PPUSH
23334: CALL_OW 264
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: LD_INT 23
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: IN
23349: IFFALSE 23370
// points := [ 7 , 25 , 8 ] ;
23351: LD_ADDR_VAR 0 9
23355: PUSH
23356: LD_INT 7
23358: PUSH
23359: LD_INT 25
23361: PUSH
23362: LD_INT 8
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23370: LD_VAR 0 6
23374: PPUSH
23375: CALL_OW 264
23379: PUSH
23380: LD_INT 5
23382: PUSH
23383: LD_INT 27
23385: PUSH
23386: LD_INT 44
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: IN
23394: IFFALSE 23415
// points := [ 14 , 50 , 16 ] ;
23396: LD_ADDR_VAR 0 9
23400: PUSH
23401: LD_INT 14
23403: PUSH
23404: LD_INT 50
23406: PUSH
23407: LD_INT 16
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23415: LD_VAR 0 6
23419: PPUSH
23420: CALL_OW 264
23424: PUSH
23425: LD_INT 6
23427: PUSH
23428: LD_INT 46
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: IN
23435: IFFALSE 23456
// points := [ 32 , 120 , 70 ] ;
23437: LD_ADDR_VAR 0 9
23441: PUSH
23442: LD_INT 32
23444: PUSH
23445: LD_INT 120
23447: PUSH
23448: LD_INT 70
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23456: LD_VAR 0 6
23460: PPUSH
23461: CALL_OW 264
23465: PUSH
23466: LD_INT 7
23468: PUSH
23469: LD_INT 28
23471: PUSH
23472: LD_INT 45
23474: PUSH
23475: LD_INT 92
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: IN
23484: IFFALSE 23505
// points := [ 35 , 20 , 45 ] ;
23486: LD_ADDR_VAR 0 9
23490: PUSH
23491: LD_INT 35
23493: PUSH
23494: LD_INT 20
23496: PUSH
23497: LD_INT 45
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23505: LD_VAR 0 6
23509: PPUSH
23510: CALL_OW 264
23514: PUSH
23515: LD_INT 47
23517: PUSH
23518: EMPTY
23519: LIST
23520: IN
23521: IFFALSE 23542
// points := [ 67 , 45 , 75 ] ;
23523: LD_ADDR_VAR 0 9
23527: PUSH
23528: LD_INT 67
23530: PUSH
23531: LD_INT 45
23533: PUSH
23534: LD_INT 75
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: LIST
23541: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23542: LD_VAR 0 6
23546: PPUSH
23547: CALL_OW 264
23551: PUSH
23552: LD_INT 26
23554: PUSH
23555: EMPTY
23556: LIST
23557: IN
23558: IFFALSE 23579
// points := [ 120 , 30 , 80 ] ;
23560: LD_ADDR_VAR 0 9
23564: PUSH
23565: LD_INT 120
23567: PUSH
23568: LD_INT 30
23570: PUSH
23571: LD_INT 80
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23579: LD_VAR 0 6
23583: PPUSH
23584: CALL_OW 264
23588: PUSH
23589: LD_INT 22
23591: PUSH
23592: EMPTY
23593: LIST
23594: IN
23595: IFFALSE 23616
// points := [ 40 , 1 , 1 ] ;
23597: LD_ADDR_VAR 0 9
23601: PUSH
23602: LD_INT 40
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23616: LD_VAR 0 6
23620: PPUSH
23621: CALL_OW 264
23625: PUSH
23626: LD_INT 29
23628: PUSH
23629: EMPTY
23630: LIST
23631: IN
23632: IFFALSE 23653
// points := [ 70 , 200 , 400 ] ;
23634: LD_ADDR_VAR 0 9
23638: PUSH
23639: LD_INT 70
23641: PUSH
23642: LD_INT 200
23644: PUSH
23645: LD_INT 400
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23653: LD_VAR 0 6
23657: PPUSH
23658: CALL_OW 264
23662: PUSH
23663: LD_INT 14
23665: PUSH
23666: LD_INT 53
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: IN
23673: IFFALSE 23694
// points := [ 40 , 10 , 20 ] ;
23675: LD_ADDR_VAR 0 9
23679: PUSH
23680: LD_INT 40
23682: PUSH
23683: LD_INT 10
23685: PUSH
23686: LD_INT 20
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23694: LD_VAR 0 6
23698: PPUSH
23699: CALL_OW 264
23703: PUSH
23704: LD_INT 9
23706: PUSH
23707: EMPTY
23708: LIST
23709: IN
23710: IFFALSE 23731
// points := [ 5 , 70 , 20 ] ;
23712: LD_ADDR_VAR 0 9
23716: PUSH
23717: LD_INT 5
23719: PUSH
23720: LD_INT 70
23722: PUSH
23723: LD_INT 20
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23731: LD_VAR 0 6
23735: PPUSH
23736: CALL_OW 264
23740: PUSH
23741: LD_INT 10
23743: PUSH
23744: EMPTY
23745: LIST
23746: IN
23747: IFFALSE 23768
// points := [ 35 , 110 , 70 ] ;
23749: LD_ADDR_VAR 0 9
23753: PUSH
23754: LD_INT 35
23756: PUSH
23757: LD_INT 110
23759: PUSH
23760: LD_INT 70
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23768: LD_VAR 0 6
23772: PPUSH
23773: CALL_OW 265
23777: PUSH
23778: LD_INT 25
23780: EQUAL
23781: IFFALSE 23802
// points := [ 80 , 65 , 100 ] ;
23783: LD_ADDR_VAR 0 9
23787: PUSH
23788: LD_INT 80
23790: PUSH
23791: LD_INT 65
23793: PUSH
23794: LD_INT 100
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23802: LD_VAR 0 6
23806: PPUSH
23807: CALL_OW 263
23811: PUSH
23812: LD_INT 1
23814: EQUAL
23815: IFFALSE 23850
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23817: LD_ADDR_VAR 0 10
23821: PUSH
23822: LD_VAR 0 10
23826: PUSH
23827: LD_VAR 0 6
23831: PPUSH
23832: CALL_OW 311
23836: PPUSH
23837: LD_INT 3
23839: PPUSH
23840: CALL_OW 259
23844: PUSH
23845: LD_INT 4
23847: MUL
23848: MUL
23849: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23850: LD_VAR 0 6
23854: PPUSH
23855: CALL_OW 263
23859: PUSH
23860: LD_INT 2
23862: EQUAL
23863: IFFALSE 23914
// begin j := IsControledBy ( i ) ;
23865: LD_ADDR_VAR 0 7
23869: PUSH
23870: LD_VAR 0 6
23874: PPUSH
23875: CALL_OW 312
23879: ST_TO_ADDR
// if j then
23880: LD_VAR 0 7
23884: IFFALSE 23914
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23886: LD_ADDR_VAR 0 10
23890: PUSH
23891: LD_VAR 0 10
23895: PUSH
23896: LD_VAR 0 7
23900: PPUSH
23901: LD_INT 3
23903: PPUSH
23904: CALL_OW 259
23908: PUSH
23909: LD_INT 3
23911: MUL
23912: MUL
23913: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23914: LD_VAR 0 6
23918: PPUSH
23919: CALL_OW 264
23923: PUSH
23924: LD_INT 5
23926: PUSH
23927: LD_INT 6
23929: PUSH
23930: LD_INT 46
23932: PUSH
23933: LD_INT 44
23935: PUSH
23936: LD_INT 47
23938: PUSH
23939: LD_INT 45
23941: PUSH
23942: LD_INT 28
23944: PUSH
23945: LD_INT 7
23947: PUSH
23948: LD_INT 27
23950: PUSH
23951: LD_INT 29
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: IN
23966: IFFALSE 23986
23968: PUSH
23969: LD_VAR 0 1
23973: PPUSH
23974: LD_INT 52
23976: PPUSH
23977: CALL_OW 321
23981: PUSH
23982: LD_INT 2
23984: EQUAL
23985: AND
23986: IFFALSE 24003
// bpoints := bpoints * 1.2 ;
23988: LD_ADDR_VAR 0 10
23992: PUSH
23993: LD_VAR 0 10
23997: PUSH
23998: LD_REAL  1.20000000000000E+0000
24001: MUL
24002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24003: LD_VAR 0 6
24007: PPUSH
24008: CALL_OW 264
24012: PUSH
24013: LD_INT 6
24015: PUSH
24016: LD_INT 46
24018: PUSH
24019: LD_INT 47
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: IN
24027: IFFALSE 24044
// bpoints := bpoints * 1.2 ;
24029: LD_ADDR_VAR 0 10
24033: PUSH
24034: LD_VAR 0 10
24038: PUSH
24039: LD_REAL  1.20000000000000E+0000
24042: MUL
24043: ST_TO_ADDR
// end ; unit_building :
24044: GO 24058
24046: LD_INT 3
24048: DOUBLE
24049: EQUAL
24050: IFTRUE 24054
24052: GO 24057
24054: POP
// ; end ;
24055: GO 24058
24057: POP
// for j = 1 to 3 do
24058: LD_ADDR_VAR 0 7
24062: PUSH
24063: DOUBLE
24064: LD_INT 1
24066: DEC
24067: ST_TO_ADDR
24068: LD_INT 3
24070: PUSH
24071: FOR_TO
24072: IFFALSE 24125
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24074: LD_ADDR_VAR 0 5
24078: PUSH
24079: LD_VAR 0 5
24083: PPUSH
24084: LD_VAR 0 7
24088: PPUSH
24089: LD_VAR 0 5
24093: PUSH
24094: LD_VAR 0 7
24098: ARRAY
24099: PUSH
24100: LD_VAR 0 9
24104: PUSH
24105: LD_VAR 0 7
24109: ARRAY
24110: PUSH
24111: LD_VAR 0 10
24115: MUL
24116: PLUS
24117: PPUSH
24118: CALL_OW 1
24122: ST_TO_ADDR
24123: GO 24071
24125: POP
24126: POP
// end ;
24127: GO 22600
24129: POP
24130: POP
// result := Replace ( result , 4 , tmp ) ;
24131: LD_ADDR_VAR 0 5
24135: PUSH
24136: LD_VAR 0 5
24140: PPUSH
24141: LD_INT 4
24143: PPUSH
24144: LD_VAR 0 8
24148: PPUSH
24149: CALL_OW 1
24153: ST_TO_ADDR
// end ;
24154: LD_VAR 0 5
24158: RET
// export function DangerAtRange ( unit , range ) ; begin
24159: LD_INT 0
24161: PPUSH
// if not unit then
24162: LD_VAR 0 1
24166: NOT
24167: IFFALSE 24171
// exit ;
24169: GO 24216
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24171: LD_ADDR_VAR 0 3
24175: PUSH
24176: LD_VAR 0 1
24180: PPUSH
24181: CALL_OW 255
24185: PPUSH
24186: LD_VAR 0 1
24190: PPUSH
24191: CALL_OW 250
24195: PPUSH
24196: LD_VAR 0 1
24200: PPUSH
24201: CALL_OW 251
24205: PPUSH
24206: LD_VAR 0 2
24210: PPUSH
24211: CALL 22450 0 4
24215: ST_TO_ADDR
// end ;
24216: LD_VAR 0 3
24220: RET
// export function DangerInArea ( side , area ) ; begin
24221: LD_INT 0
24223: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24224: LD_ADDR_VAR 0 3
24228: PUSH
24229: LD_VAR 0 2
24233: PPUSH
24234: LD_INT 81
24236: PUSH
24237: LD_VAR 0 1
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PPUSH
24246: CALL_OW 70
24250: ST_TO_ADDR
// end ;
24251: LD_VAR 0 3
24255: RET
// export function IsExtension ( b ) ; begin
24256: LD_INT 0
24258: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24259: LD_ADDR_VAR 0 2
24263: PUSH
24264: LD_VAR 0 1
24268: PUSH
24269: LD_INT 23
24271: PUSH
24272: LD_INT 20
24274: PUSH
24275: LD_INT 22
24277: PUSH
24278: LD_INT 17
24280: PUSH
24281: LD_INT 24
24283: PUSH
24284: LD_INT 21
24286: PUSH
24287: LD_INT 19
24289: PUSH
24290: LD_INT 16
24292: PUSH
24293: LD_INT 25
24295: PUSH
24296: LD_INT 18
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: IN
24311: ST_TO_ADDR
// end ;
24312: LD_VAR 0 2
24316: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24317: LD_INT 0
24319: PPUSH
24320: PPUSH
24321: PPUSH
// result := [ ] ;
24322: LD_ADDR_VAR 0 4
24326: PUSH
24327: EMPTY
24328: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24329: LD_ADDR_VAR 0 5
24333: PUSH
24334: LD_VAR 0 2
24338: PPUSH
24339: LD_INT 21
24341: PUSH
24342: LD_INT 3
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PPUSH
24349: CALL_OW 70
24353: ST_TO_ADDR
// if not tmp then
24354: LD_VAR 0 5
24358: NOT
24359: IFFALSE 24363
// exit ;
24361: GO 24427
// if checkLink then
24363: LD_VAR 0 3
24367: IFFALSE 24417
// begin for i in tmp do
24369: LD_ADDR_VAR 0 6
24373: PUSH
24374: LD_VAR 0 5
24378: PUSH
24379: FOR_IN
24380: IFFALSE 24415
// if GetBase ( i ) <> base then
24382: LD_VAR 0 6
24386: PPUSH
24387: CALL_OW 274
24391: PUSH
24392: LD_VAR 0 1
24396: NONEQUAL
24397: IFFALSE 24413
// ComLinkToBase ( base , i ) ;
24399: LD_VAR 0 1
24403: PPUSH
24404: LD_VAR 0 6
24408: PPUSH
24409: CALL_OW 169
24413: GO 24379
24415: POP
24416: POP
// end ; result := tmp ;
24417: LD_ADDR_VAR 0 4
24421: PUSH
24422: LD_VAR 0 5
24426: ST_TO_ADDR
// end ;
24427: LD_VAR 0 4
24431: RET
// export function ComComplete ( units , b ) ; var i ; begin
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
// if not units then
24436: LD_VAR 0 1
24440: NOT
24441: IFFALSE 24445
// exit ;
24443: GO 24535
// for i in units do
24445: LD_ADDR_VAR 0 4
24449: PUSH
24450: LD_VAR 0 1
24454: PUSH
24455: FOR_IN
24456: IFFALSE 24533
// if BuildingStatus ( b ) = bs_build then
24458: LD_VAR 0 2
24462: PPUSH
24463: CALL_OW 461
24467: PUSH
24468: LD_INT 1
24470: EQUAL
24471: IFFALSE 24531
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24473: LD_VAR 0 4
24477: PPUSH
24478: LD_STRING h
24480: PUSH
24481: LD_VAR 0 2
24485: PPUSH
24486: CALL_OW 250
24490: PUSH
24491: LD_VAR 0 2
24495: PPUSH
24496: CALL_OW 251
24500: PUSH
24501: LD_VAR 0 2
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: PUSH
24524: EMPTY
24525: LIST
24526: PPUSH
24527: CALL_OW 446
24531: GO 24455
24533: POP
24534: POP
// end ;
24535: LD_VAR 0 3
24539: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24540: LD_INT 0
24542: PPUSH
24543: PPUSH
24544: PPUSH
24545: PPUSH
24546: PPUSH
24547: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24548: LD_VAR 0 1
24552: NOT
24553: IFTRUE 24570
24555: PUSH
24556: LD_VAR 0 1
24560: PPUSH
24561: CALL_OW 263
24565: PUSH
24566: LD_INT 2
24568: NONEQUAL
24569: OR
24570: IFFALSE 24574
// exit ;
24572: GO 24890
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24574: LD_ADDR_VAR 0 6
24578: PUSH
24579: LD_INT 22
24581: PUSH
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 255
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 30
24601: PUSH
24602: LD_INT 36
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 34
24611: PUSH
24612: LD_INT 31
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PPUSH
24628: CALL_OW 69
24632: ST_TO_ADDR
// if not tmp then
24633: LD_VAR 0 6
24637: NOT
24638: IFFALSE 24642
// exit ;
24640: GO 24890
// result := [ ] ;
24642: LD_ADDR_VAR 0 2
24646: PUSH
24647: EMPTY
24648: ST_TO_ADDR
// for i in tmp do
24649: LD_ADDR_VAR 0 3
24653: PUSH
24654: LD_VAR 0 6
24658: PUSH
24659: FOR_IN
24660: IFFALSE 24731
// begin t := UnitsInside ( i ) ;
24662: LD_ADDR_VAR 0 4
24666: PUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: CALL_OW 313
24676: ST_TO_ADDR
// if t then
24677: LD_VAR 0 4
24681: IFFALSE 24729
// for j in t do
24683: LD_ADDR_VAR 0 7
24687: PUSH
24688: LD_VAR 0 4
24692: PUSH
24693: FOR_IN
24694: IFFALSE 24727
// result := Replace ( result , result + 1 , j ) ;
24696: LD_ADDR_VAR 0 2
24700: PUSH
24701: LD_VAR 0 2
24705: PPUSH
24706: LD_VAR 0 2
24710: PUSH
24711: LD_INT 1
24713: PLUS
24714: PPUSH
24715: LD_VAR 0 7
24719: PPUSH
24720: CALL_OW 1
24724: ST_TO_ADDR
24725: GO 24693
24727: POP
24728: POP
// end ;
24729: GO 24659
24731: POP
24732: POP
// if not result then
24733: LD_VAR 0 2
24737: NOT
24738: IFFALSE 24742
// exit ;
24740: GO 24890
// mech := result [ 1 ] ;
24742: LD_ADDR_VAR 0 5
24746: PUSH
24747: LD_VAR 0 2
24751: PUSH
24752: LD_INT 1
24754: ARRAY
24755: ST_TO_ADDR
// if result > 1 then
24756: LD_VAR 0 2
24760: PUSH
24761: LD_INT 1
24763: GREATER
24764: IFFALSE 24876
// begin for i = 2 to result do
24766: LD_ADDR_VAR 0 3
24770: PUSH
24771: DOUBLE
24772: LD_INT 2
24774: DEC
24775: ST_TO_ADDR
24776: LD_VAR 0 2
24780: PUSH
24781: FOR_TO
24782: IFFALSE 24874
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24784: LD_ADDR_VAR 0 4
24788: PUSH
24789: LD_VAR 0 2
24793: PUSH
24794: LD_VAR 0 3
24798: ARRAY
24799: PPUSH
24800: LD_INT 3
24802: PPUSH
24803: CALL_OW 259
24807: PUSH
24808: LD_VAR 0 2
24812: PUSH
24813: LD_VAR 0 3
24817: ARRAY
24818: PPUSH
24819: CALL_OW 432
24823: MINUS
24824: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24825: LD_VAR 0 4
24829: PUSH
24830: LD_VAR 0 5
24834: PPUSH
24835: LD_INT 3
24837: PPUSH
24838: CALL_OW 259
24842: PUSH
24843: LD_VAR 0 5
24847: PPUSH
24848: CALL_OW 432
24852: MINUS
24853: GREATEREQUAL
24854: IFFALSE 24872
// mech := result [ i ] ;
24856: LD_ADDR_VAR 0 5
24860: PUSH
24861: LD_VAR 0 2
24865: PUSH
24866: LD_VAR 0 3
24870: ARRAY
24871: ST_TO_ADDR
// end ;
24872: GO 24781
24874: POP
24875: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24876: LD_VAR 0 1
24880: PPUSH
24881: LD_VAR 0 5
24885: PPUSH
24886: CALL_OW 135
// end ;
24890: LD_VAR 0 2
24894: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
24899: PPUSH
24900: PPUSH
24901: PPUSH
24902: PPUSH
24903: PPUSH
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
// result := [ ] ;
24910: LD_ADDR_VAR 0 7
24914: PUSH
24915: EMPTY
24916: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 266
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: IN
24937: NOT
24938: IFFALSE 24942
// exit ;
24940: GO 26582
// if name then
24942: LD_VAR 0 3
24946: IFFALSE 24962
// SetBName ( base_dep , name ) ;
24948: LD_VAR 0 1
24952: PPUSH
24953: LD_VAR 0 3
24957: PPUSH
24958: CALL_OW 500
// base := GetBase ( base_dep ) ;
24962: LD_ADDR_VAR 0 15
24966: PUSH
24967: LD_VAR 0 1
24971: PPUSH
24972: CALL_OW 274
24976: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24977: LD_ADDR_VAR 0 16
24981: PUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 255
24991: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24992: LD_ADDR_VAR 0 17
24996: PUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 248
25006: ST_TO_ADDR
// if sources then
25007: LD_VAR 0 5
25011: IFFALSE 25058
// for i = 1 to 3 do
25013: LD_ADDR_VAR 0 8
25017: PUSH
25018: DOUBLE
25019: LD_INT 1
25021: DEC
25022: ST_TO_ADDR
25023: LD_INT 3
25025: PUSH
25026: FOR_TO
25027: IFFALSE 25056
// AddResourceType ( base , i , sources [ i ] ) ;
25029: LD_VAR 0 15
25033: PPUSH
25034: LD_VAR 0 8
25038: PPUSH
25039: LD_VAR 0 5
25043: PUSH
25044: LD_VAR 0 8
25048: ARRAY
25049: PPUSH
25050: CALL_OW 276
25054: GO 25026
25056: POP
25057: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25058: LD_ADDR_VAR 0 18
25062: PUSH
25063: LD_VAR 0 15
25067: PPUSH
25068: LD_VAR 0 2
25072: PPUSH
25073: LD_INT 1
25075: PPUSH
25076: CALL 24317 0 3
25080: ST_TO_ADDR
// InitHc ;
25081: CALL_OW 19
// InitUc ;
25085: CALL_OW 18
// uc_side := side ;
25089: LD_ADDR_OWVAR 20
25093: PUSH
25094: LD_VAR 0 16
25098: ST_TO_ADDR
// uc_nation := nation ;
25099: LD_ADDR_OWVAR 21
25103: PUSH
25104: LD_VAR 0 17
25108: ST_TO_ADDR
// if buildings then
25109: LD_VAR 0 18
25113: IFFALSE 26441
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25115: LD_ADDR_VAR 0 19
25119: PUSH
25120: LD_VAR 0 18
25124: PPUSH
25125: LD_INT 2
25127: PUSH
25128: LD_INT 30
25130: PUSH
25131: LD_INT 29
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 30
25140: PUSH
25141: LD_INT 30
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: PPUSH
25153: CALL_OW 72
25157: ST_TO_ADDR
// if tmp then
25158: LD_VAR 0 19
25162: IFFALSE 25210
// for i in tmp do
25164: LD_ADDR_VAR 0 8
25168: PUSH
25169: LD_VAR 0 19
25173: PUSH
25174: FOR_IN
25175: IFFALSE 25208
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25177: LD_VAR 0 8
25181: PPUSH
25182: CALL_OW 250
25186: PPUSH
25187: LD_VAR 0 8
25191: PPUSH
25192: CALL_OW 251
25196: PPUSH
25197: LD_VAR 0 16
25201: PPUSH
25202: CALL_OW 441
25206: GO 25174
25208: POP
25209: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25210: LD_VAR 0 18
25214: PPUSH
25215: LD_INT 2
25217: PUSH
25218: LD_INT 30
25220: PUSH
25221: LD_INT 32
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 30
25230: PUSH
25231: LD_INT 33
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: LIST
25242: PPUSH
25243: CALL_OW 72
25247: IFFALSE 25335
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25249: LD_ADDR_VAR 0 8
25253: PUSH
25254: LD_VAR 0 18
25258: PPUSH
25259: LD_INT 2
25261: PUSH
25262: LD_INT 30
25264: PUSH
25265: LD_INT 32
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 30
25274: PUSH
25275: LD_INT 33
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: PPUSH
25287: CALL_OW 72
25291: PUSH
25292: FOR_IN
25293: IFFALSE 25333
// begin if not GetBWeapon ( i ) then
25295: LD_VAR 0 8
25299: PPUSH
25300: CALL_OW 269
25304: NOT
25305: IFFALSE 25331
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25307: LD_VAR 0 8
25311: PPUSH
25312: LD_VAR 0 8
25316: PPUSH
25317: LD_VAR 0 2
25321: PPUSH
25322: CALL 26587 0 2
25326: PPUSH
25327: CALL_OW 431
// end ;
25331: GO 25292
25333: POP
25334: POP
// end ; for i = 1 to personel do
25335: LD_ADDR_VAR 0 8
25339: PUSH
25340: DOUBLE
25341: LD_INT 1
25343: DEC
25344: ST_TO_ADDR
25345: LD_VAR 0 6
25349: PUSH
25350: FOR_TO
25351: IFFALSE 26421
// begin if i > 4 then
25353: LD_VAR 0 8
25357: PUSH
25358: LD_INT 4
25360: GREATER
25361: IFFALSE 25365
// break ;
25363: GO 26421
// case i of 1 :
25365: LD_VAR 0 8
25369: PUSH
25370: LD_INT 1
25372: DOUBLE
25373: EQUAL
25374: IFTRUE 25378
25376: GO 25458
25378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25379: LD_ADDR_VAR 0 12
25383: PUSH
25384: LD_VAR 0 18
25388: PPUSH
25389: LD_INT 22
25391: PUSH
25392: LD_VAR 0 16
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 58
25403: PUSH
25404: EMPTY
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: LD_INT 30
25412: PUSH
25413: LD_INT 32
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 30
25422: PUSH
25423: LD_INT 4
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 30
25432: PUSH
25433: LD_INT 5
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 72
25455: ST_TO_ADDR
25456: GO 25680
25458: LD_INT 2
25460: DOUBLE
25461: EQUAL
25462: IFTRUE 25466
25464: GO 25528
25466: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25467: LD_ADDR_VAR 0 12
25471: PUSH
25472: LD_VAR 0 18
25476: PPUSH
25477: LD_INT 22
25479: PUSH
25480: LD_VAR 0 16
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 30
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 30
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PPUSH
25521: CALL_OW 72
25525: ST_TO_ADDR
25526: GO 25680
25528: LD_INT 3
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25536
25534: GO 25598
25536: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25537: LD_ADDR_VAR 0 12
25541: PUSH
25542: LD_VAR 0 18
25546: PPUSH
25547: LD_INT 22
25549: PUSH
25550: LD_VAR 0 16
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: LD_INT 30
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 30
25574: PUSH
25575: LD_INT 3
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PPUSH
25591: CALL_OW 72
25595: ST_TO_ADDR
25596: GO 25680
25598: LD_INT 4
25600: DOUBLE
25601: EQUAL
25602: IFTRUE 25606
25604: GO 25679
25606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25607: LD_ADDR_VAR 0 12
25611: PUSH
25612: LD_VAR 0 18
25616: PPUSH
25617: LD_INT 22
25619: PUSH
25620: LD_VAR 0 16
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 2
25631: PUSH
25632: LD_INT 30
25634: PUSH
25635: LD_INT 6
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 30
25644: PUSH
25645: LD_INT 7
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 30
25654: PUSH
25655: LD_INT 8
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PPUSH
25672: CALL_OW 72
25676: ST_TO_ADDR
25677: GO 25680
25679: POP
// if i = 1 then
25680: LD_VAR 0 8
25684: PUSH
25685: LD_INT 1
25687: EQUAL
25688: IFFALSE 25799
// begin tmp := [ ] ;
25690: LD_ADDR_VAR 0 19
25694: PUSH
25695: EMPTY
25696: ST_TO_ADDR
// for j in f do
25697: LD_ADDR_VAR 0 9
25701: PUSH
25702: LD_VAR 0 12
25706: PUSH
25707: FOR_IN
25708: IFFALSE 25781
// if GetBType ( j ) = b_bunker then
25710: LD_VAR 0 9
25714: PPUSH
25715: CALL_OW 266
25719: PUSH
25720: LD_INT 32
25722: EQUAL
25723: IFFALSE 25750
// tmp := Insert ( tmp , 1 , j ) else
25725: LD_ADDR_VAR 0 19
25729: PUSH
25730: LD_VAR 0 19
25734: PPUSH
25735: LD_INT 1
25737: PPUSH
25738: LD_VAR 0 9
25742: PPUSH
25743: CALL_OW 2
25747: ST_TO_ADDR
25748: GO 25779
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25750: LD_ADDR_VAR 0 19
25754: PUSH
25755: LD_VAR 0 19
25759: PPUSH
25760: LD_VAR 0 19
25764: PUSH
25765: LD_INT 1
25767: PLUS
25768: PPUSH
25769: LD_VAR 0 9
25773: PPUSH
25774: CALL_OW 2
25778: ST_TO_ADDR
25779: GO 25707
25781: POP
25782: POP
// if tmp then
25783: LD_VAR 0 19
25787: IFFALSE 25799
// f := tmp ;
25789: LD_ADDR_VAR 0 12
25793: PUSH
25794: LD_VAR 0 19
25798: ST_TO_ADDR
// end ; x := personel [ i ] ;
25799: LD_ADDR_VAR 0 13
25803: PUSH
25804: LD_VAR 0 6
25808: PUSH
25809: LD_VAR 0 8
25813: ARRAY
25814: ST_TO_ADDR
// if x = - 1 then
25815: LD_VAR 0 13
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: EQUAL
25824: IFFALSE 26035
// begin for j in f do
25826: LD_ADDR_VAR 0 9
25830: PUSH
25831: LD_VAR 0 12
25835: PUSH
25836: FOR_IN
25837: IFFALSE 26031
// repeat InitHc ;
25839: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25843: LD_VAR 0 9
25847: PPUSH
25848: CALL_OW 266
25852: PUSH
25853: LD_INT 5
25855: EQUAL
25856: IFFALSE 25926
// begin if UnitsInside ( j ) < 3 then
25858: LD_VAR 0 9
25862: PPUSH
25863: CALL_OW 313
25867: PUSH
25868: LD_INT 3
25870: LESS
25871: IFFALSE 25907
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25873: LD_INT 0
25875: PPUSH
25876: LD_INT 5
25878: PUSH
25879: LD_INT 8
25881: PUSH
25882: LD_INT 9
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: LIST
25889: PUSH
25890: LD_VAR 0 17
25894: ARRAY
25895: PPUSH
25896: LD_VAR 0 4
25900: PPUSH
25901: CALL_OW 380
25905: GO 25924
// PrepareHuman ( false , i , skill ) ;
25907: LD_INT 0
25909: PPUSH
25910: LD_VAR 0 8
25914: PPUSH
25915: LD_VAR 0 4
25919: PPUSH
25920: CALL_OW 380
// end else
25924: GO 25943
// PrepareHuman ( false , i , skill ) ;
25926: LD_INT 0
25928: PPUSH
25929: LD_VAR 0 8
25933: PPUSH
25934: LD_VAR 0 4
25938: PPUSH
25939: CALL_OW 380
// un := CreateHuman ;
25943: LD_ADDR_VAR 0 14
25947: PUSH
25948: CALL_OW 44
25952: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25953: LD_ADDR_VAR 0 7
25957: PUSH
25958: LD_VAR 0 7
25962: PPUSH
25963: LD_INT 1
25965: PPUSH
25966: LD_VAR 0 14
25970: PPUSH
25971: CALL_OW 2
25975: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25976: LD_VAR 0 14
25980: PPUSH
25981: LD_VAR 0 9
25985: PPUSH
25986: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25990: LD_VAR 0 9
25994: PPUSH
25995: CALL_OW 313
25999: PUSH
26000: LD_INT 6
26002: EQUAL
26003: IFTRUE 26027
26005: PUSH
26006: LD_VAR 0 9
26010: PPUSH
26011: CALL_OW 266
26015: PUSH
26016: LD_INT 32
26018: PUSH
26019: LD_INT 31
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: IN
26026: OR
26027: IFFALSE 25839
26029: GO 25836
26031: POP
26032: POP
// end else
26033: GO 26419
// for j = 1 to x do
26035: LD_ADDR_VAR 0 9
26039: PUSH
26040: DOUBLE
26041: LD_INT 1
26043: DEC
26044: ST_TO_ADDR
26045: LD_VAR 0 13
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26417
// begin InitHc ;
26053: CALL_OW 19
// if not f then
26057: LD_VAR 0 12
26061: NOT
26062: IFFALSE 26151
// begin PrepareHuman ( false , i , skill ) ;
26064: LD_INT 0
26066: PPUSH
26067: LD_VAR 0 8
26071: PPUSH
26072: LD_VAR 0 4
26076: PPUSH
26077: CALL_OW 380
// un := CreateHuman ;
26081: LD_ADDR_VAR 0 14
26085: PUSH
26086: CALL_OW 44
26090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26091: LD_ADDR_VAR 0 7
26095: PUSH
26096: LD_VAR 0 7
26100: PPUSH
26101: LD_INT 1
26103: PPUSH
26104: LD_VAR 0 14
26108: PPUSH
26109: CALL_OW 2
26113: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26114: LD_VAR 0 14
26118: PPUSH
26119: LD_VAR 0 1
26123: PPUSH
26124: CALL_OW 250
26128: PPUSH
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 251
26138: PPUSH
26139: LD_INT 10
26141: PPUSH
26142: LD_INT 0
26144: PPUSH
26145: CALL_OW 50
// continue ;
26149: GO 26050
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26151: LD_VAR 0 12
26155: PUSH
26156: LD_INT 1
26158: ARRAY
26159: PPUSH
26160: CALL_OW 313
26164: IFFALSE 26192
26166: PUSH
26167: LD_VAR 0 12
26171: PUSH
26172: LD_INT 1
26174: ARRAY
26175: PPUSH
26176: CALL_OW 266
26180: PUSH
26181: LD_INT 32
26183: PUSH
26184: LD_INT 31
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: IN
26191: AND
26192: IFTRUE 26213
26194: PUSH
26195: LD_VAR 0 12
26199: PUSH
26200: LD_INT 1
26202: ARRAY
26203: PPUSH
26204: CALL_OW 313
26208: PUSH
26209: LD_INT 6
26211: EQUAL
26212: OR
26213: IFFALSE 26233
// f := Delete ( f , 1 ) ;
26215: LD_ADDR_VAR 0 12
26219: PUSH
26220: LD_VAR 0 12
26224: PPUSH
26225: LD_INT 1
26227: PPUSH
26228: CALL_OW 3
26232: ST_TO_ADDR
// if not f then
26233: LD_VAR 0 12
26237: NOT
26238: IFFALSE 26256
// begin x := x + 2 ;
26240: LD_ADDR_VAR 0 13
26244: PUSH
26245: LD_VAR 0 13
26249: PUSH
26250: LD_INT 2
26252: PLUS
26253: ST_TO_ADDR
// continue ;
26254: GO 26050
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26256: LD_VAR 0 12
26260: PUSH
26261: LD_INT 1
26263: ARRAY
26264: PPUSH
26265: CALL_OW 266
26269: PUSH
26270: LD_INT 5
26272: EQUAL
26273: IFFALSE 26347
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26275: LD_VAR 0 12
26279: PUSH
26280: LD_INT 1
26282: ARRAY
26283: PPUSH
26284: CALL_OW 313
26288: PUSH
26289: LD_INT 3
26291: LESS
26292: IFFALSE 26328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26294: LD_INT 0
26296: PPUSH
26297: LD_INT 5
26299: PUSH
26300: LD_INT 8
26302: PUSH
26303: LD_INT 9
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: PUSH
26311: LD_VAR 0 17
26315: ARRAY
26316: PPUSH
26317: LD_VAR 0 4
26321: PPUSH
26322: CALL_OW 380
26326: GO 26345
// PrepareHuman ( false , i , skill ) ;
26328: LD_INT 0
26330: PPUSH
26331: LD_VAR 0 8
26335: PPUSH
26336: LD_VAR 0 4
26340: PPUSH
26341: CALL_OW 380
// end else
26345: GO 26364
// PrepareHuman ( false , i , skill ) ;
26347: LD_INT 0
26349: PPUSH
26350: LD_VAR 0 8
26354: PPUSH
26355: LD_VAR 0 4
26359: PPUSH
26360: CALL_OW 380
// un := CreateHuman ;
26364: LD_ADDR_VAR 0 14
26368: PUSH
26369: CALL_OW 44
26373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26374: LD_ADDR_VAR 0 7
26378: PUSH
26379: LD_VAR 0 7
26383: PPUSH
26384: LD_INT 1
26386: PPUSH
26387: LD_VAR 0 14
26391: PPUSH
26392: CALL_OW 2
26396: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26397: LD_VAR 0 14
26401: PPUSH
26402: LD_VAR 0 12
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: CALL_OW 52
// end ;
26415: GO 26050
26417: POP
26418: POP
// end ;
26419: GO 25350
26421: POP
26422: POP
// result := result ^ buildings ;
26423: LD_ADDR_VAR 0 7
26427: PUSH
26428: LD_VAR 0 7
26432: PUSH
26433: LD_VAR 0 18
26437: ADD
26438: ST_TO_ADDR
// end else
26439: GO 26582
// begin for i = 1 to personel do
26441: LD_ADDR_VAR 0 8
26445: PUSH
26446: DOUBLE
26447: LD_INT 1
26449: DEC
26450: ST_TO_ADDR
26451: LD_VAR 0 6
26455: PUSH
26456: FOR_TO
26457: IFFALSE 26580
// begin if i > 4 then
26459: LD_VAR 0 8
26463: PUSH
26464: LD_INT 4
26466: GREATER
26467: IFFALSE 26471
// break ;
26469: GO 26580
// x := personel [ i ] ;
26471: LD_ADDR_VAR 0 13
26475: PUSH
26476: LD_VAR 0 6
26480: PUSH
26481: LD_VAR 0 8
26485: ARRAY
26486: ST_TO_ADDR
// if x = - 1 then
26487: LD_VAR 0 13
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: EQUAL
26496: IFFALSE 26500
// continue ;
26498: GO 26456
// PrepareHuman ( false , i , skill ) ;
26500: LD_INT 0
26502: PPUSH
26503: LD_VAR 0 8
26507: PPUSH
26508: LD_VAR 0 4
26512: PPUSH
26513: CALL_OW 380
// un := CreateHuman ;
26517: LD_ADDR_VAR 0 14
26521: PUSH
26522: CALL_OW 44
26526: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26527: LD_VAR 0 14
26531: PPUSH
26532: LD_VAR 0 1
26536: PPUSH
26537: CALL_OW 250
26541: PPUSH
26542: LD_VAR 0 1
26546: PPUSH
26547: CALL_OW 251
26551: PPUSH
26552: LD_INT 10
26554: PPUSH
26555: LD_INT 0
26557: PPUSH
26558: CALL_OW 50
// result := result ^ un ;
26562: LD_ADDR_VAR 0 7
26566: PUSH
26567: LD_VAR 0 7
26571: PUSH
26572: LD_VAR 0 14
26576: ADD
26577: ST_TO_ADDR
// end ;
26578: GO 26456
26580: POP
26581: POP
// end ; end ;
26582: LD_VAR 0 7
26586: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26587: LD_INT 0
26589: PPUSH
26590: PPUSH
26591: PPUSH
26592: PPUSH
26593: PPUSH
26594: PPUSH
26595: PPUSH
26596: PPUSH
26597: PPUSH
26598: PPUSH
26599: PPUSH
26600: PPUSH
26601: PPUSH
26602: PPUSH
26603: PPUSH
26604: PPUSH
// result := false ;
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_INT 0
26612: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26613: LD_VAR 0 1
26617: NOT
26618: IFTRUE 26643
26620: PUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL_OW 266
26630: PUSH
26631: LD_INT 32
26633: PUSH
26634: LD_INT 33
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: IN
26641: NOT
26642: OR
26643: IFFALSE 26647
// exit ;
26645: GO 27782
// nat := GetNation ( tower ) ;
26647: LD_ADDR_VAR 0 12
26651: PUSH
26652: LD_VAR 0 1
26656: PPUSH
26657: CALL_OW 248
26661: ST_TO_ADDR
// side := GetSide ( tower ) ;
26662: LD_ADDR_VAR 0 16
26666: PUSH
26667: LD_VAR 0 1
26671: PPUSH
26672: CALL_OW 255
26676: ST_TO_ADDR
// x := GetX ( tower ) ;
26677: LD_ADDR_VAR 0 10
26681: PUSH
26682: LD_VAR 0 1
26686: PPUSH
26687: CALL_OW 250
26691: ST_TO_ADDR
// y := GetY ( tower ) ;
26692: LD_ADDR_VAR 0 11
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: CALL_OW 251
26706: ST_TO_ADDR
// if not x or not y then
26707: LD_VAR 0 10
26711: NOT
26712: IFTRUE 26721
26714: PUSH
26715: LD_VAR 0 11
26719: NOT
26720: OR
26721: IFFALSE 26725
// exit ;
26723: GO 27782
// weapon := 0 ;
26725: LD_ADDR_VAR 0 18
26729: PUSH
26730: LD_INT 0
26732: ST_TO_ADDR
// fac_list := [ ] ;
26733: LD_ADDR_VAR 0 17
26737: PUSH
26738: EMPTY
26739: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26740: LD_ADDR_VAR 0 6
26744: PUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 274
26754: PPUSH
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_INT 0
26762: PPUSH
26763: CALL 24317 0 3
26767: PPUSH
26768: LD_INT 30
26770: PUSH
26771: LD_INT 3
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 72
26782: ST_TO_ADDR
// if not factories then
26783: LD_VAR 0 6
26787: NOT
26788: IFFALSE 26792
// exit ;
26790: GO 27782
// for i in factories do
26792: LD_ADDR_VAR 0 8
26796: PUSH
26797: LD_VAR 0 6
26801: PUSH
26802: FOR_IN
26803: IFFALSE 26828
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26805: LD_ADDR_VAR 0 17
26809: PUSH
26810: LD_VAR 0 17
26814: PUSH
26815: LD_VAR 0 8
26819: PPUSH
26820: CALL_OW 478
26824: UNION
26825: ST_TO_ADDR
26826: GO 26802
26828: POP
26829: POP
// if not fac_list then
26830: LD_VAR 0 17
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 27782
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26839: LD_ADDR_VAR 0 5
26843: PUSH
26844: LD_INT 4
26846: PUSH
26847: LD_INT 5
26849: PUSH
26850: LD_INT 9
26852: PUSH
26853: LD_INT 10
26855: PUSH
26856: LD_INT 6
26858: PUSH
26859: LD_INT 7
26861: PUSH
26862: LD_INT 11
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 27
26876: PUSH
26877: LD_INT 28
26879: PUSH
26880: LD_INT 26
26882: PUSH
26883: LD_INT 30
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 43
26894: PUSH
26895: LD_INT 44
26897: PUSH
26898: LD_INT 46
26900: PUSH
26901: LD_INT 45
26903: PUSH
26904: LD_INT 47
26906: PUSH
26907: LD_INT 49
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: LD_VAR 0 12
26927: ARRAY
26928: ST_TO_ADDR
// list := list isect fac_list ;
26929: LD_ADDR_VAR 0 5
26933: PUSH
26934: LD_VAR 0 5
26938: PUSH
26939: LD_VAR 0 17
26943: ISECT
26944: ST_TO_ADDR
// if not list then
26945: LD_VAR 0 5
26949: NOT
26950: IFFALSE 26954
// exit ;
26952: GO 27782
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26954: LD_VAR 0 12
26958: PUSH
26959: LD_INT 3
26961: EQUAL
26962: IFFALSE 26974
26964: PUSH
26965: LD_INT 49
26967: PUSH
26968: LD_VAR 0 5
26972: IN
26973: AND
26974: IFFALSE 26994
26976: PUSH
26977: LD_INT 31
26979: PPUSH
26980: LD_VAR 0 16
26984: PPUSH
26985: CALL_OW 321
26989: PUSH
26990: LD_INT 2
26992: EQUAL
26993: AND
26994: IFFALSE 27054
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26996: LD_INT 22
26998: PUSH
26999: LD_VAR 0 16
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 35
27010: PUSH
27011: LD_INT 49
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 91
27020: PUSH
27021: LD_VAR 0 1
27025: PUSH
27026: LD_INT 10
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: NOT
27044: IFFALSE 27054
// weapon := ru_time_lapser ;
27046: LD_ADDR_VAR 0 18
27050: PUSH
27051: LD_INT 49
27053: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27054: LD_VAR 0 12
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: IN
27069: IFFALSE 27093
27071: PUSH
27072: LD_INT 11
27074: PUSH
27075: LD_VAR 0 5
27079: IN
27080: IFTRUE 27092
27082: PUSH
27083: LD_INT 30
27085: PUSH
27086: LD_VAR 0 5
27090: IN
27091: OR
27092: AND
27093: IFFALSE 27113
27095: PUSH
27096: LD_INT 6
27098: PPUSH
27099: LD_VAR 0 16
27103: PPUSH
27104: CALL_OW 321
27108: PUSH
27109: LD_INT 2
27111: EQUAL
27112: AND
27113: IFFALSE 27280
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27115: LD_INT 22
27117: PUSH
27118: LD_VAR 0 16
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 35
27132: PUSH
27133: LD_INT 11
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 35
27142: PUSH
27143: LD_INT 30
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 91
27157: PUSH
27158: LD_VAR 0 1
27162: PUSH
27163: LD_INT 18
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: PPUSH
27176: CALL_OW 69
27180: NOT
27181: IFFALSE 27257
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_VAR 0 16
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: LD_INT 30
27201: PUSH
27202: LD_INT 32
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 30
27211: PUSH
27212: LD_INT 33
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 91
27226: PUSH
27227: LD_VAR 0 1
27231: PUSH
27232: LD_INT 12
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: PPUSH
27248: CALL_OW 69
27252: PUSH
27253: LD_INT 2
27255: GREATER
27256: AND
27257: IFFALSE 27280
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27259: LD_ADDR_VAR 0 18
27263: PUSH
27264: LD_INT 11
27266: PUSH
27267: LD_INT 30
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_VAR 0 12
27278: ARRAY
27279: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27280: LD_VAR 0 18
27284: NOT
27285: IFFALSE 27305
27287: PUSH
27288: LD_INT 40
27290: PPUSH
27291: LD_VAR 0 16
27295: PPUSH
27296: CALL_OW 321
27300: PUSH
27301: LD_INT 2
27303: EQUAL
27304: AND
27305: IFFALSE 27341
27307: PUSH
27308: LD_INT 7
27310: PUSH
27311: LD_VAR 0 5
27315: IN
27316: IFTRUE 27328
27318: PUSH
27319: LD_INT 28
27321: PUSH
27322: LD_VAR 0 5
27326: IN
27327: OR
27328: IFTRUE 27340
27330: PUSH
27331: LD_INT 45
27333: PUSH
27334: LD_VAR 0 5
27338: IN
27339: OR
27340: AND
27341: IFFALSE 27595
// begin hex := GetHexInfo ( x , y ) ;
27343: LD_ADDR_VAR 0 4
27347: PUSH
27348: LD_VAR 0 10
27352: PPUSH
27353: LD_VAR 0 11
27357: PPUSH
27358: CALL_OW 546
27362: ST_TO_ADDR
// if hex [ 1 ] then
27363: LD_VAR 0 4
27367: PUSH
27368: LD_INT 1
27370: ARRAY
27371: IFFALSE 27375
// exit ;
27373: GO 27782
// height := hex [ 2 ] ;
27375: LD_ADDR_VAR 0 15
27379: PUSH
27380: LD_VAR 0 4
27384: PUSH
27385: LD_INT 2
27387: ARRAY
27388: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27389: LD_ADDR_VAR 0 14
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 2
27399: PUSH
27400: LD_INT 3
27402: PUSH
27403: LD_INT 5
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// for i in tmp do
27412: LD_ADDR_VAR 0 8
27416: PUSH
27417: LD_VAR 0 14
27421: PUSH
27422: FOR_IN
27423: IFFALSE 27593
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27425: LD_ADDR_VAR 0 9
27429: PUSH
27430: LD_VAR 0 10
27434: PPUSH
27435: LD_VAR 0 8
27439: PPUSH
27440: LD_INT 5
27442: PPUSH
27443: CALL_OW 272
27447: PUSH
27448: LD_VAR 0 11
27452: PPUSH
27453: LD_VAR 0 8
27457: PPUSH
27458: LD_INT 5
27460: PPUSH
27461: CALL_OW 273
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27470: LD_VAR 0 9
27474: PUSH
27475: LD_INT 1
27477: ARRAY
27478: PPUSH
27479: LD_VAR 0 9
27483: PUSH
27484: LD_INT 2
27486: ARRAY
27487: PPUSH
27488: CALL_OW 488
27492: IFFALSE 27591
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27494: LD_ADDR_VAR 0 4
27498: PUSH
27499: LD_VAR 0 9
27503: PUSH
27504: LD_INT 1
27506: ARRAY
27507: PPUSH
27508: LD_VAR 0 9
27512: PUSH
27513: LD_INT 2
27515: ARRAY
27516: PPUSH
27517: CALL_OW 546
27521: ST_TO_ADDR
// if hex [ 1 ] then
27522: LD_VAR 0 4
27526: PUSH
27527: LD_INT 1
27529: ARRAY
27530: IFFALSE 27534
// continue ;
27532: GO 27422
// h := hex [ 2 ] ;
27534: LD_ADDR_VAR 0 13
27538: PUSH
27539: LD_VAR 0 4
27543: PUSH
27544: LD_INT 2
27546: ARRAY
27547: ST_TO_ADDR
// if h + 7 < height then
27548: LD_VAR 0 13
27552: PUSH
27553: LD_INT 7
27555: PLUS
27556: PUSH
27557: LD_VAR 0 15
27561: LESS
27562: IFFALSE 27591
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27564: LD_ADDR_VAR 0 18
27568: PUSH
27569: LD_INT 7
27571: PUSH
27572: LD_INT 28
27574: PUSH
27575: LD_INT 45
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: PUSH
27583: LD_VAR 0 12
27587: ARRAY
27588: ST_TO_ADDR
// break ;
27589: GO 27593
// end ; end ; end ;
27591: GO 27422
27593: POP
27594: POP
// end ; if not weapon then
27595: LD_VAR 0 18
27599: NOT
27600: IFFALSE 27660
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27602: LD_ADDR_VAR 0 5
27606: PUSH
27607: LD_VAR 0 5
27611: PUSH
27612: LD_INT 11
27614: PUSH
27615: LD_INT 30
27617: PUSH
27618: LD_INT 49
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: DIFF
27626: ST_TO_ADDR
// if not list then
27627: LD_VAR 0 5
27631: NOT
27632: IFFALSE 27636
// exit ;
27634: GO 27782
// weapon := list [ rand ( 1 , list ) ] ;
27636: LD_ADDR_VAR 0 18
27640: PUSH
27641: LD_VAR 0 5
27645: PUSH
27646: LD_INT 1
27648: PPUSH
27649: LD_VAR 0 5
27653: PPUSH
27654: CALL_OW 12
27658: ARRAY
27659: ST_TO_ADDR
// end ; if weapon then
27660: LD_VAR 0 18
27664: IFFALSE 27782
// begin tmp := CostOfWeapon ( weapon ) ;
27666: LD_ADDR_VAR 0 14
27670: PUSH
27671: LD_VAR 0 18
27675: PPUSH
27676: CALL_OW 451
27680: ST_TO_ADDR
// j := GetBase ( tower ) ;
27681: LD_ADDR_VAR 0 9
27685: PUSH
27686: LD_VAR 0 1
27690: PPUSH
27691: CALL_OW 274
27695: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27696: LD_VAR 0 9
27700: PPUSH
27701: LD_INT 1
27703: PPUSH
27704: CALL_OW 275
27708: PUSH
27709: LD_VAR 0 14
27713: PUSH
27714: LD_INT 1
27716: ARRAY
27717: GREATEREQUAL
27718: IFFALSE 27744
27720: PUSH
27721: LD_VAR 0 9
27725: PPUSH
27726: LD_INT 2
27728: PPUSH
27729: CALL_OW 275
27733: PUSH
27734: LD_VAR 0 14
27738: PUSH
27739: LD_INT 2
27741: ARRAY
27742: GREATEREQUAL
27743: AND
27744: IFFALSE 27770
27746: PUSH
27747: LD_VAR 0 9
27751: PPUSH
27752: LD_INT 3
27754: PPUSH
27755: CALL_OW 275
27759: PUSH
27760: LD_VAR 0 14
27764: PUSH
27765: LD_INT 3
27767: ARRAY
27768: GREATEREQUAL
27769: AND
27770: IFFALSE 27782
// result := weapon ;
27772: LD_ADDR_VAR 0 3
27776: PUSH
27777: LD_VAR 0 18
27781: ST_TO_ADDR
// end ; end ;
27782: LD_VAR 0 3
27786: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27787: LD_INT 0
27789: PPUSH
27790: PPUSH
// result := true ;
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: LD_INT 1
27798: ST_TO_ADDR
// if array1 = array2 then
27799: LD_VAR 0 1
27803: PUSH
27804: LD_VAR 0 2
27808: EQUAL
27809: IFFALSE 27869
// begin for i = 1 to array1 do
27811: LD_ADDR_VAR 0 4
27815: PUSH
27816: DOUBLE
27817: LD_INT 1
27819: DEC
27820: ST_TO_ADDR
27821: LD_VAR 0 1
27825: PUSH
27826: FOR_TO
27827: IFFALSE 27865
// if array1 [ i ] <> array2 [ i ] then
27829: LD_VAR 0 1
27833: PUSH
27834: LD_VAR 0 4
27838: ARRAY
27839: PUSH
27840: LD_VAR 0 2
27844: PUSH
27845: LD_VAR 0 4
27849: ARRAY
27850: NONEQUAL
27851: IFFALSE 27863
// begin result := false ;
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_INT 0
27860: ST_TO_ADDR
// break ;
27861: GO 27865
// end ;
27863: GO 27826
27865: POP
27866: POP
// end else
27867: GO 27877
// result := false ;
27869: LD_ADDR_VAR 0 3
27873: PUSH
27874: LD_INT 0
27876: ST_TO_ADDR
// end ;
27877: LD_VAR 0 3
27881: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27882: LD_INT 0
27884: PPUSH
27885: PPUSH
// if not array1 or not array2 then
27886: LD_VAR 0 1
27890: NOT
27891: IFTRUE 27900
27893: PUSH
27894: LD_VAR 0 2
27898: NOT
27899: OR
27900: IFFALSE 27904
// exit ;
27902: GO 27968
// result := true ;
27904: LD_ADDR_VAR 0 3
27908: PUSH
27909: LD_INT 1
27911: ST_TO_ADDR
// for i = 1 to array1 do
27912: LD_ADDR_VAR 0 4
27916: PUSH
27917: DOUBLE
27918: LD_INT 1
27920: DEC
27921: ST_TO_ADDR
27922: LD_VAR 0 1
27926: PUSH
27927: FOR_TO
27928: IFFALSE 27966
// if array1 [ i ] <> array2 [ i ] then
27930: LD_VAR 0 1
27934: PUSH
27935: LD_VAR 0 4
27939: ARRAY
27940: PUSH
27941: LD_VAR 0 2
27945: PUSH
27946: LD_VAR 0 4
27950: ARRAY
27951: NONEQUAL
27952: IFFALSE 27964
// begin result := false ;
27954: LD_ADDR_VAR 0 3
27958: PUSH
27959: LD_INT 0
27961: ST_TO_ADDR
// break ;
27962: GO 27966
// end ;
27964: GO 27927
27966: POP
27967: POP
// end ;
27968: LD_VAR 0 3
27972: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27973: LD_INT 0
27975: PPUSH
27976: PPUSH
27977: PPUSH
// pom := GetBase ( fac ) ;
27978: LD_ADDR_VAR 0 5
27982: PUSH
27983: LD_VAR 0 1
27987: PPUSH
27988: CALL_OW 274
27992: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27993: LD_ADDR_VAR 0 4
27997: PUSH
27998: LD_VAR 0 2
28002: PUSH
28003: LD_INT 1
28005: ARRAY
28006: PPUSH
28007: LD_VAR 0 2
28011: PUSH
28012: LD_INT 2
28014: ARRAY
28015: PPUSH
28016: LD_VAR 0 2
28020: PUSH
28021: LD_INT 3
28023: ARRAY
28024: PPUSH
28025: LD_VAR 0 2
28029: PUSH
28030: LD_INT 4
28032: ARRAY
28033: PPUSH
28034: CALL_OW 449
28038: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_VAR 0 5
28048: PPUSH
28049: LD_INT 1
28051: PPUSH
28052: CALL_OW 275
28056: PUSH
28057: LD_VAR 0 4
28061: PUSH
28062: LD_INT 1
28064: ARRAY
28065: GREATEREQUAL
28066: IFFALSE 28092
28068: PUSH
28069: LD_VAR 0 5
28073: PPUSH
28074: LD_INT 2
28076: PPUSH
28077: CALL_OW 275
28081: PUSH
28082: LD_VAR 0 4
28086: PUSH
28087: LD_INT 2
28089: ARRAY
28090: GREATEREQUAL
28091: AND
28092: IFFALSE 28118
28094: PUSH
28095: LD_VAR 0 5
28099: PPUSH
28100: LD_INT 3
28102: PPUSH
28103: CALL_OW 275
28107: PUSH
28108: LD_VAR 0 4
28112: PUSH
28113: LD_INT 3
28115: ARRAY
28116: GREATEREQUAL
28117: AND
28118: ST_TO_ADDR
// end ;
28119: LD_VAR 0 3
28123: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28124: LD_INT 0
28126: PPUSH
28127: PPUSH
28128: PPUSH
28129: PPUSH
// pom := GetBase ( building ) ;
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_VAR 0 1
28139: PPUSH
28140: CALL_OW 274
28144: ST_TO_ADDR
// if not pom then
28145: LD_VAR 0 3
28149: NOT
28150: IFFALSE 28154
// exit ;
28152: GO 28328
// btype := GetBType ( building ) ;
28154: LD_ADDR_VAR 0 5
28158: PUSH
28159: LD_VAR 0 1
28163: PPUSH
28164: CALL_OW 266
28168: ST_TO_ADDR
// if btype = b_armoury then
28169: LD_VAR 0 5
28173: PUSH
28174: LD_INT 4
28176: EQUAL
28177: IFFALSE 28187
// btype := b_barracks ;
28179: LD_ADDR_VAR 0 5
28183: PUSH
28184: LD_INT 5
28186: ST_TO_ADDR
// if btype = b_depot then
28187: LD_VAR 0 5
28191: PUSH
28192: LD_INT 0
28194: EQUAL
28195: IFFALSE 28205
// btype := b_warehouse ;
28197: LD_ADDR_VAR 0 5
28201: PUSH
28202: LD_INT 1
28204: ST_TO_ADDR
// if btype = b_workshop then
28205: LD_VAR 0 5
28209: PUSH
28210: LD_INT 2
28212: EQUAL
28213: IFFALSE 28223
// btype := b_factory ;
28215: LD_ADDR_VAR 0 5
28219: PUSH
28220: LD_INT 3
28222: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28223: LD_ADDR_VAR 0 4
28227: PUSH
28228: LD_VAR 0 5
28232: PPUSH
28233: LD_VAR 0 1
28237: PPUSH
28238: CALL_OW 248
28242: PPUSH
28243: CALL_OW 450
28247: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28248: LD_ADDR_VAR 0 2
28252: PUSH
28253: LD_VAR 0 3
28257: PPUSH
28258: LD_INT 1
28260: PPUSH
28261: CALL_OW 275
28265: PUSH
28266: LD_VAR 0 4
28270: PUSH
28271: LD_INT 1
28273: ARRAY
28274: GREATEREQUAL
28275: IFFALSE 28301
28277: PUSH
28278: LD_VAR 0 3
28282: PPUSH
28283: LD_INT 2
28285: PPUSH
28286: CALL_OW 275
28290: PUSH
28291: LD_VAR 0 4
28295: PUSH
28296: LD_INT 2
28298: ARRAY
28299: GREATEREQUAL
28300: AND
28301: IFFALSE 28327
28303: PUSH
28304: LD_VAR 0 3
28308: PPUSH
28309: LD_INT 3
28311: PPUSH
28312: CALL_OW 275
28316: PUSH
28317: LD_VAR 0 4
28321: PUSH
28322: LD_INT 3
28324: ARRAY
28325: GREATEREQUAL
28326: AND
28327: ST_TO_ADDR
// end ;
28328: LD_VAR 0 2
28332: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28333: LD_INT 0
28335: PPUSH
28336: PPUSH
28337: PPUSH
// pom := GetBase ( building ) ;
28338: LD_ADDR_VAR 0 4
28342: PUSH
28343: LD_VAR 0 1
28347: PPUSH
28348: CALL_OW 274
28352: ST_TO_ADDR
// if not pom then
28353: LD_VAR 0 4
28357: NOT
28358: IFFALSE 28362
// exit ;
28360: GO 28467
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28362: LD_ADDR_VAR 0 5
28366: PUSH
28367: LD_VAR 0 2
28371: PPUSH
28372: LD_VAR 0 1
28376: PPUSH
28377: CALL_OW 248
28381: PPUSH
28382: CALL_OW 450
28386: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28387: LD_ADDR_VAR 0 3
28391: PUSH
28392: LD_VAR 0 4
28396: PPUSH
28397: LD_INT 1
28399: PPUSH
28400: CALL_OW 275
28404: PUSH
28405: LD_VAR 0 5
28409: PUSH
28410: LD_INT 1
28412: ARRAY
28413: GREATEREQUAL
28414: IFFALSE 28440
28416: PUSH
28417: LD_VAR 0 4
28421: PPUSH
28422: LD_INT 2
28424: PPUSH
28425: CALL_OW 275
28429: PUSH
28430: LD_VAR 0 5
28434: PUSH
28435: LD_INT 2
28437: ARRAY
28438: GREATEREQUAL
28439: AND
28440: IFFALSE 28466
28442: PUSH
28443: LD_VAR 0 4
28447: PPUSH
28448: LD_INT 3
28450: PPUSH
28451: CALL_OW 275
28455: PUSH
28456: LD_VAR 0 5
28460: PUSH
28461: LD_INT 3
28463: ARRAY
28464: GREATEREQUAL
28465: AND
28466: ST_TO_ADDR
// end ;
28467: LD_VAR 0 3
28471: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28472: LD_INT 0
28474: PPUSH
28475: PPUSH
28476: PPUSH
28477: PPUSH
28478: PPUSH
28479: PPUSH
28480: PPUSH
28481: PPUSH
28482: PPUSH
28483: PPUSH
28484: PPUSH
// result := false ;
28485: LD_ADDR_VAR 0 8
28489: PUSH
28490: LD_INT 0
28492: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28493: LD_VAR 0 5
28497: NOT
28498: IFTRUE 28507
28500: PUSH
28501: LD_VAR 0 1
28505: NOT
28506: OR
28507: IFTRUE 28516
28509: PUSH
28510: LD_VAR 0 2
28514: NOT
28515: OR
28516: IFTRUE 28525
28518: PUSH
28519: LD_VAR 0 3
28523: NOT
28524: OR
28525: IFFALSE 28529
// exit ;
28527: GO 29355
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28529: LD_ADDR_VAR 0 14
28533: PUSH
28534: LD_VAR 0 1
28538: PPUSH
28539: LD_VAR 0 2
28543: PPUSH
28544: LD_VAR 0 3
28548: PPUSH
28549: LD_VAR 0 4
28553: PPUSH
28554: LD_VAR 0 5
28558: PUSH
28559: LD_INT 1
28561: ARRAY
28562: PPUSH
28563: CALL_OW 248
28567: PPUSH
28568: LD_INT 0
28570: PPUSH
28571: CALL 30636 0 6
28575: ST_TO_ADDR
// if not hexes then
28576: LD_VAR 0 14
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 29355
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28585: LD_ADDR_VAR 0 17
28589: PUSH
28590: LD_VAR 0 5
28594: PPUSH
28595: LD_INT 22
28597: PUSH
28598: LD_VAR 0 13
28602: PPUSH
28603: CALL_OW 255
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: LD_INT 30
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 30
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PPUSH
28644: CALL_OW 72
28648: ST_TO_ADDR
// for i = 1 to hexes do
28649: LD_ADDR_VAR 0 9
28653: PUSH
28654: DOUBLE
28655: LD_INT 1
28657: DEC
28658: ST_TO_ADDR
28659: LD_VAR 0 14
28663: PUSH
28664: FOR_TO
28665: IFFALSE 29353
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28667: LD_ADDR_VAR 0 13
28671: PUSH
28672: LD_VAR 0 14
28676: PUSH
28677: LD_VAR 0 9
28681: ARRAY
28682: PUSH
28683: LD_INT 1
28685: ARRAY
28686: PPUSH
28687: LD_VAR 0 14
28691: PUSH
28692: LD_VAR 0 9
28696: ARRAY
28697: PUSH
28698: LD_INT 2
28700: ARRAY
28701: PPUSH
28702: CALL_OW 428
28706: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28707: LD_VAR 0 14
28711: PUSH
28712: LD_VAR 0 9
28716: ARRAY
28717: PUSH
28718: LD_INT 1
28720: ARRAY
28721: PPUSH
28722: LD_VAR 0 14
28726: PUSH
28727: LD_VAR 0 9
28731: ARRAY
28732: PUSH
28733: LD_INT 2
28735: ARRAY
28736: PPUSH
28737: CALL_OW 351
28741: IFTRUE 28780
28743: PUSH
28744: LD_VAR 0 14
28748: PUSH
28749: LD_VAR 0 9
28753: ARRAY
28754: PUSH
28755: LD_INT 1
28757: ARRAY
28758: PPUSH
28759: LD_VAR 0 14
28763: PUSH
28764: LD_VAR 0 9
28768: ARRAY
28769: PUSH
28770: LD_INT 2
28772: ARRAY
28773: PPUSH
28774: CALL_OW 488
28778: NOT
28779: OR
28780: IFTRUE 28797
28782: PUSH
28783: LD_VAR 0 13
28787: PPUSH
28788: CALL_OW 247
28792: PUSH
28793: LD_INT 3
28795: EQUAL
28796: OR
28797: IFFALSE 28803
// exit ;
28799: POP
28800: POP
28801: GO 29355
// if not tmp then
28803: LD_VAR 0 13
28807: NOT
28808: IFFALSE 28812
// continue ;
28810: GO 28664
// result := true ;
28812: LD_ADDR_VAR 0 8
28816: PUSH
28817: LD_INT 1
28819: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28820: LD_VAR 0 6
28824: IFFALSE 28841
28826: PUSH
28827: LD_VAR 0 13
28831: PPUSH
28832: CALL_OW 247
28836: PUSH
28837: LD_INT 2
28839: EQUAL
28840: AND
28841: IFFALSE 28858
28843: PUSH
28844: LD_VAR 0 13
28848: PPUSH
28849: CALL_OW 263
28853: PUSH
28854: LD_INT 1
28856: EQUAL
28857: AND
28858: IFFALSE 29022
// begin if IsDrivenBy ( tmp ) then
28860: LD_VAR 0 13
28864: PPUSH
28865: CALL_OW 311
28869: IFFALSE 28873
// continue ;
28871: GO 28664
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28873: LD_VAR 0 6
28877: PPUSH
28878: LD_INT 3
28880: PUSH
28881: LD_INT 60
28883: PUSH
28884: EMPTY
28885: LIST
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 3
28893: PUSH
28894: LD_INT 55
28896: PUSH
28897: EMPTY
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PPUSH
28908: CALL_OW 72
28912: IFFALSE 29020
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28914: LD_ADDR_VAR 0 18
28918: PUSH
28919: LD_VAR 0 6
28923: PPUSH
28924: LD_INT 3
28926: PUSH
28927: LD_INT 60
28929: PUSH
28930: EMPTY
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 55
28942: PUSH
28943: EMPTY
28944: LIST
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PPUSH
28954: CALL_OW 72
28958: PUSH
28959: LD_INT 1
28961: ARRAY
28962: ST_TO_ADDR
// if IsInUnit ( driver ) then
28963: LD_VAR 0 18
28967: PPUSH
28968: CALL_OW 310
28972: IFFALSE 28983
// ComExit ( driver ) ;
28974: LD_VAR 0 18
28978: PPUSH
28979: CALL 54636 0 1
// AddComEnterUnit ( driver , tmp ) ;
28983: LD_VAR 0 18
28987: PPUSH
28988: LD_VAR 0 13
28992: PPUSH
28993: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28997: LD_VAR 0 18
29001: PPUSH
29002: LD_VAR 0 7
29006: PPUSH
29007: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29011: LD_VAR 0 18
29015: PPUSH
29016: CALL_OW 181
// end ; continue ;
29020: GO 28664
// end ; if not cleaners or not tmp in cleaners then
29022: LD_VAR 0 6
29026: NOT
29027: IFTRUE 29042
29029: PUSH
29030: LD_VAR 0 13
29034: PUSH
29035: LD_VAR 0 6
29039: IN
29040: NOT
29041: OR
29042: IFFALSE 29351
// begin if dep then
29044: LD_VAR 0 17
29048: IFFALSE 29184
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29050: LD_ADDR_VAR 0 16
29054: PUSH
29055: LD_VAR 0 17
29059: PUSH
29060: LD_INT 1
29062: ARRAY
29063: PPUSH
29064: CALL_OW 250
29068: PPUSH
29069: LD_VAR 0 17
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PPUSH
29078: CALL_OW 254
29082: PPUSH
29083: LD_INT 5
29085: PPUSH
29086: CALL_OW 272
29090: PUSH
29091: LD_VAR 0 17
29095: PUSH
29096: LD_INT 1
29098: ARRAY
29099: PPUSH
29100: CALL_OW 251
29104: PPUSH
29105: LD_VAR 0 17
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: PPUSH
29114: CALL_OW 254
29118: PPUSH
29119: LD_INT 5
29121: PPUSH
29122: CALL_OW 273
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29131: LD_VAR 0 16
29135: PUSH
29136: LD_INT 1
29138: ARRAY
29139: PPUSH
29140: LD_VAR 0 16
29144: PUSH
29145: LD_INT 2
29147: ARRAY
29148: PPUSH
29149: CALL_OW 488
29153: IFFALSE 29184
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29155: LD_VAR 0 13
29159: PPUSH
29160: LD_VAR 0 16
29164: PUSH
29165: LD_INT 1
29167: ARRAY
29168: PPUSH
29169: LD_VAR 0 16
29173: PUSH
29174: LD_INT 2
29176: ARRAY
29177: PPUSH
29178: CALL_OW 111
// continue ;
29182: GO 28664
// end ; end ; r := GetDir ( tmp ) ;
29184: LD_ADDR_VAR 0 15
29188: PUSH
29189: LD_VAR 0 13
29193: PPUSH
29194: CALL_OW 254
29198: ST_TO_ADDR
// if r = 5 then
29199: LD_VAR 0 15
29203: PUSH
29204: LD_INT 5
29206: EQUAL
29207: IFFALSE 29217
// r := 0 ;
29209: LD_ADDR_VAR 0 15
29213: PUSH
29214: LD_INT 0
29216: ST_TO_ADDR
// for j = r to 5 do
29217: LD_ADDR_VAR 0 10
29221: PUSH
29222: DOUBLE
29223: LD_VAR 0 15
29227: DEC
29228: ST_TO_ADDR
29229: LD_INT 5
29231: PUSH
29232: FOR_TO
29233: IFFALSE 29349
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29235: LD_ADDR_VAR 0 11
29239: PUSH
29240: LD_VAR 0 13
29244: PPUSH
29245: CALL_OW 250
29249: PPUSH
29250: LD_VAR 0 10
29254: PPUSH
29255: LD_INT 2
29257: PPUSH
29258: CALL_OW 272
29262: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29263: LD_ADDR_VAR 0 12
29267: PUSH
29268: LD_VAR 0 13
29272: PPUSH
29273: CALL_OW 251
29277: PPUSH
29278: LD_VAR 0 10
29282: PPUSH
29283: LD_INT 2
29285: PPUSH
29286: CALL_OW 273
29290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29291: LD_VAR 0 11
29295: PPUSH
29296: LD_VAR 0 12
29300: PPUSH
29301: CALL_OW 488
29305: IFFALSE 29324
29307: PUSH
29308: LD_VAR 0 11
29312: PPUSH
29313: LD_VAR 0 12
29317: PPUSH
29318: CALL_OW 428
29322: NOT
29323: AND
29324: IFFALSE 29347
// begin ComMoveXY ( tmp , _x , _y ) ;
29326: LD_VAR 0 13
29330: PPUSH
29331: LD_VAR 0 11
29335: PPUSH
29336: LD_VAR 0 12
29340: PPUSH
29341: CALL_OW 111
// break ;
29345: GO 29349
// end ; end ;
29347: GO 29232
29349: POP
29350: POP
// end ; end ;
29351: GO 28664
29353: POP
29354: POP
// end ;
29355: LD_VAR 0 8
29359: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29360: LD_INT 0
29362: PPUSH
// result := true ;
29363: LD_ADDR_VAR 0 3
29367: PUSH
29368: LD_INT 1
29370: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29371: LD_VAR 0 2
29375: PUSH
29376: LD_INT 24
29378: DOUBLE
29379: EQUAL
29380: IFTRUE 29390
29382: LD_INT 33
29384: DOUBLE
29385: EQUAL
29386: IFTRUE 29390
29388: GO 29415
29390: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29391: LD_ADDR_VAR 0 3
29395: PUSH
29396: LD_INT 32
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 321
29408: PUSH
29409: LD_INT 2
29411: EQUAL
29412: ST_TO_ADDR
29413: GO 29731
29415: LD_INT 20
29417: DOUBLE
29418: EQUAL
29419: IFTRUE 29423
29421: GO 29448
29423: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_INT 6
29431: PPUSH
29432: LD_VAR 0 1
29436: PPUSH
29437: CALL_OW 321
29441: PUSH
29442: LD_INT 2
29444: EQUAL
29445: ST_TO_ADDR
29446: GO 29731
29448: LD_INT 22
29450: DOUBLE
29451: EQUAL
29452: IFTRUE 29462
29454: LD_INT 36
29456: DOUBLE
29457: EQUAL
29458: IFTRUE 29462
29460: GO 29487
29462: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_INT 15
29470: PPUSH
29471: LD_VAR 0 1
29475: PPUSH
29476: CALL_OW 321
29480: PUSH
29481: LD_INT 2
29483: EQUAL
29484: ST_TO_ADDR
29485: GO 29731
29487: LD_INT 30
29489: DOUBLE
29490: EQUAL
29491: IFTRUE 29495
29493: GO 29520
29495: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29496: LD_ADDR_VAR 0 3
29500: PUSH
29501: LD_INT 20
29503: PPUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 321
29513: PUSH
29514: LD_INT 2
29516: EQUAL
29517: ST_TO_ADDR
29518: GO 29731
29520: LD_INT 28
29522: DOUBLE
29523: EQUAL
29524: IFTRUE 29534
29526: LD_INT 21
29528: DOUBLE
29529: EQUAL
29530: IFTRUE 29534
29532: GO 29559
29534: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: LD_INT 21
29542: PPUSH
29543: LD_VAR 0 1
29547: PPUSH
29548: CALL_OW 321
29552: PUSH
29553: LD_INT 2
29555: EQUAL
29556: ST_TO_ADDR
29557: GO 29731
29559: LD_INT 16
29561: DOUBLE
29562: EQUAL
29563: IFTRUE 29567
29565: GO 29592
29567: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29568: LD_ADDR_VAR 0 3
29572: PUSH
29573: LD_INT 84
29575: PPUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL_OW 321
29585: PUSH
29586: LD_INT 2
29588: EQUAL
29589: ST_TO_ADDR
29590: GO 29731
29592: LD_INT 19
29594: DOUBLE
29595: EQUAL
29596: IFTRUE 29606
29598: LD_INT 23
29600: DOUBLE
29601: EQUAL
29602: IFTRUE 29606
29604: GO 29631
29606: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29607: LD_ADDR_VAR 0 3
29611: PUSH
29612: LD_INT 83
29614: PPUSH
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 321
29624: PUSH
29625: LD_INT 2
29627: EQUAL
29628: ST_TO_ADDR
29629: GO 29731
29631: LD_INT 17
29633: DOUBLE
29634: EQUAL
29635: IFTRUE 29639
29637: GO 29664
29639: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29640: LD_ADDR_VAR 0 3
29644: PUSH
29645: LD_INT 39
29647: PPUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 321
29657: PUSH
29658: LD_INT 2
29660: EQUAL
29661: ST_TO_ADDR
29662: GO 29731
29664: LD_INT 18
29666: DOUBLE
29667: EQUAL
29668: IFTRUE 29672
29670: GO 29697
29672: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29673: LD_ADDR_VAR 0 3
29677: PUSH
29678: LD_INT 40
29680: PPUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 321
29690: PUSH
29691: LD_INT 2
29693: EQUAL
29694: ST_TO_ADDR
29695: GO 29731
29697: LD_INT 27
29699: DOUBLE
29700: EQUAL
29701: IFTRUE 29705
29703: GO 29730
29705: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29706: LD_ADDR_VAR 0 3
29710: PUSH
29711: LD_INT 35
29713: PPUSH
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 321
29723: PUSH
29724: LD_INT 2
29726: EQUAL
29727: ST_TO_ADDR
29728: GO 29731
29730: POP
// end ;
29731: LD_VAR 0 3
29735: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29736: LD_INT 0
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
29743: PPUSH
29744: PPUSH
29745: PPUSH
29746: PPUSH
29747: PPUSH
29748: PPUSH
// result := false ;
29749: LD_ADDR_VAR 0 6
29753: PUSH
29754: LD_INT 0
29756: ST_TO_ADDR
// if btype = b_depot then
29757: LD_VAR 0 2
29761: PUSH
29762: LD_INT 0
29764: EQUAL
29765: IFFALSE 29777
// begin result := true ;
29767: LD_ADDR_VAR 0 6
29771: PUSH
29772: LD_INT 1
29774: ST_TO_ADDR
// exit ;
29775: GO 30631
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29777: LD_VAR 0 1
29781: NOT
29782: IFTRUE 29807
29784: PUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: CALL_OW 266
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: IN
29805: NOT
29806: OR
29807: IFTRUE 29816
29809: PUSH
29810: LD_VAR 0 2
29814: NOT
29815: OR
29816: IFTRUE 29852
29818: PUSH
29819: LD_VAR 0 5
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 3
29835: PUSH
29836: LD_INT 4
29838: PUSH
29839: LD_INT 5
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: IN
29850: NOT
29851: OR
29852: IFTRUE 29871
29854: PUSH
29855: LD_VAR 0 3
29859: PPUSH
29860: LD_VAR 0 4
29864: PPUSH
29865: CALL_OW 488
29869: NOT
29870: OR
29871: IFFALSE 29875
// exit ;
29873: GO 30631
// side := GetSide ( depot ) ;
29875: LD_ADDR_VAR 0 9
29879: PUSH
29880: LD_VAR 0 1
29884: PPUSH
29885: CALL_OW 255
29889: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29890: LD_VAR 0 9
29894: PPUSH
29895: LD_VAR 0 2
29899: PPUSH
29900: CALL 29360 0 2
29904: NOT
29905: IFFALSE 29909
// exit ;
29907: GO 30631
// pom := GetBase ( depot ) ;
29909: LD_ADDR_VAR 0 10
29913: PUSH
29914: LD_VAR 0 1
29918: PPUSH
29919: CALL_OW 274
29923: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29924: LD_ADDR_VAR 0 11
29928: PUSH
29929: LD_VAR 0 2
29933: PPUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 248
29943: PPUSH
29944: CALL_OW 450
29948: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29949: LD_VAR 0 10
29953: PPUSH
29954: LD_INT 1
29956: PPUSH
29957: CALL_OW 275
29961: PUSH
29962: LD_VAR 0 11
29966: PUSH
29967: LD_INT 1
29969: ARRAY
29970: GREATEREQUAL
29971: IFFALSE 29997
29973: PUSH
29974: LD_VAR 0 10
29978: PPUSH
29979: LD_INT 2
29981: PPUSH
29982: CALL_OW 275
29986: PUSH
29987: LD_VAR 0 11
29991: PUSH
29992: LD_INT 2
29994: ARRAY
29995: GREATEREQUAL
29996: AND
29997: IFFALSE 30023
29999: PUSH
30000: LD_VAR 0 10
30004: PPUSH
30005: LD_INT 3
30007: PPUSH
30008: CALL_OW 275
30012: PUSH
30013: LD_VAR 0 11
30017: PUSH
30018: LD_INT 3
30020: ARRAY
30021: GREATEREQUAL
30022: AND
30023: NOT
30024: IFFALSE 30028
// exit ;
30026: GO 30631
// if GetBType ( depot ) = b_depot then
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 266
30037: PUSH
30038: LD_INT 0
30040: EQUAL
30041: IFFALSE 30053
// dist := 28 else
30043: LD_ADDR_VAR 0 14
30047: PUSH
30048: LD_INT 28
30050: ST_TO_ADDR
30051: GO 30061
// dist := 36 ;
30053: LD_ADDR_VAR 0 14
30057: PUSH
30058: LD_INT 36
30060: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30061: LD_VAR 0 1
30065: PPUSH
30066: LD_VAR 0 3
30070: PPUSH
30071: LD_VAR 0 4
30075: PPUSH
30076: CALL_OW 297
30080: PUSH
30081: LD_VAR 0 14
30085: GREATER
30086: IFFALSE 30090
// exit ;
30088: GO 30631
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30090: LD_ADDR_VAR 0 12
30094: PUSH
30095: LD_VAR 0 2
30099: PPUSH
30100: LD_VAR 0 3
30104: PPUSH
30105: LD_VAR 0 4
30109: PPUSH
30110: LD_VAR 0 5
30114: PPUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL_OW 248
30124: PPUSH
30125: LD_INT 0
30127: PPUSH
30128: CALL 30636 0 6
30132: ST_TO_ADDR
// if not hexes then
30133: LD_VAR 0 12
30137: NOT
30138: IFFALSE 30142
// exit ;
30140: GO 30631
// hex := GetHexInfo ( x , y ) ;
30142: LD_ADDR_VAR 0 15
30146: PUSH
30147: LD_VAR 0 3
30151: PPUSH
30152: LD_VAR 0 4
30156: PPUSH
30157: CALL_OW 546
30161: ST_TO_ADDR
// if hex [ 1 ] then
30162: LD_VAR 0 15
30166: PUSH
30167: LD_INT 1
30169: ARRAY
30170: IFFALSE 30174
// exit ;
30172: GO 30631
// height := hex [ 2 ] ;
30174: LD_ADDR_VAR 0 13
30178: PUSH
30179: LD_VAR 0 15
30183: PUSH
30184: LD_INT 2
30186: ARRAY
30187: ST_TO_ADDR
// for i = 1 to hexes do
30188: LD_ADDR_VAR 0 7
30192: PUSH
30193: DOUBLE
30194: LD_INT 1
30196: DEC
30197: ST_TO_ADDR
30198: LD_VAR 0 12
30202: PUSH
30203: FOR_TO
30204: IFFALSE 30548
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30206: LD_VAR 0 12
30210: PUSH
30211: LD_VAR 0 7
30215: ARRAY
30216: PUSH
30217: LD_INT 1
30219: ARRAY
30220: PPUSH
30221: LD_VAR 0 12
30225: PUSH
30226: LD_VAR 0 7
30230: ARRAY
30231: PUSH
30232: LD_INT 2
30234: ARRAY
30235: PPUSH
30236: CALL_OW 488
30240: NOT
30241: IFTRUE 30283
30243: PUSH
30244: LD_VAR 0 12
30248: PUSH
30249: LD_VAR 0 7
30253: ARRAY
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PPUSH
30259: LD_VAR 0 12
30263: PUSH
30264: LD_VAR 0 7
30268: ARRAY
30269: PUSH
30270: LD_INT 2
30272: ARRAY
30273: PPUSH
30274: CALL_OW 428
30278: PUSH
30279: LD_INT 0
30281: GREATER
30282: OR
30283: IFTRUE 30321
30285: PUSH
30286: LD_VAR 0 12
30290: PUSH
30291: LD_VAR 0 7
30295: ARRAY
30296: PUSH
30297: LD_INT 1
30299: ARRAY
30300: PPUSH
30301: LD_VAR 0 12
30305: PUSH
30306: LD_VAR 0 7
30310: ARRAY
30311: PUSH
30312: LD_INT 2
30314: ARRAY
30315: PPUSH
30316: CALL_OW 351
30320: OR
30321: IFFALSE 30327
// exit ;
30323: POP
30324: POP
30325: GO 30631
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30327: LD_ADDR_VAR 0 8
30331: PUSH
30332: LD_VAR 0 12
30336: PUSH
30337: LD_VAR 0 7
30341: ARRAY
30342: PUSH
30343: LD_INT 1
30345: ARRAY
30346: PPUSH
30347: LD_VAR 0 12
30351: PUSH
30352: LD_VAR 0 7
30356: ARRAY
30357: PUSH
30358: LD_INT 2
30360: ARRAY
30361: PPUSH
30362: CALL_OW 546
30366: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30367: LD_VAR 0 8
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: IFTRUE 30397
30377: PUSH
30378: LD_VAR 0 8
30382: PUSH
30383: LD_INT 2
30385: ARRAY
30386: PUSH
30387: LD_VAR 0 13
30391: PUSH
30392: LD_INT 2
30394: PLUS
30395: GREATER
30396: OR
30397: IFTRUE 30419
30399: PUSH
30400: LD_VAR 0 8
30404: PUSH
30405: LD_INT 2
30407: ARRAY
30408: PUSH
30409: LD_VAR 0 13
30413: PUSH
30414: LD_INT 2
30416: MINUS
30417: LESS
30418: OR
30419: IFTRUE 30487
30421: PUSH
30422: LD_VAR 0 8
30426: PUSH
30427: LD_INT 3
30429: ARRAY
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 8
30436: PUSH
30437: LD_INT 9
30439: PUSH
30440: LD_INT 10
30442: PUSH
30443: LD_INT 11
30445: PUSH
30446: LD_INT 12
30448: PUSH
30449: LD_INT 13
30451: PUSH
30452: LD_INT 16
30454: PUSH
30455: LD_INT 17
30457: PUSH
30458: LD_INT 18
30460: PUSH
30461: LD_INT 19
30463: PUSH
30464: LD_INT 20
30466: PUSH
30467: LD_INT 21
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: IN
30485: NOT
30486: OR
30487: IFTRUE 30500
30489: PUSH
30490: LD_VAR 0 8
30494: PUSH
30495: LD_INT 5
30497: ARRAY
30498: NOT
30499: OR
30500: IFTRUE 30540
30502: PUSH
30503: LD_VAR 0 8
30507: PUSH
30508: LD_INT 6
30510: ARRAY
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: LD_INT 7
30520: PUSH
30521: LD_INT 9
30523: PUSH
30524: LD_INT 10
30526: PUSH
30527: LD_INT 11
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: IN
30538: NOT
30539: OR
30540: IFFALSE 30546
// exit ;
30542: POP
30543: POP
30544: GO 30631
// end ;
30546: GO 30203
30548: POP
30549: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30550: LD_VAR 0 9
30554: PPUSH
30555: LD_VAR 0 3
30559: PPUSH
30560: LD_VAR 0 4
30564: PPUSH
30565: LD_INT 20
30567: PPUSH
30568: CALL 22450 0 4
30572: PUSH
30573: LD_INT 4
30575: ARRAY
30576: IFFALSE 30580
// exit ;
30578: GO 30631
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30580: LD_VAR 0 2
30584: PUSH
30585: LD_INT 29
30587: PUSH
30588: LD_INT 30
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: IN
30595: IFFALSE 30619
30597: PUSH
30598: LD_VAR 0 3
30602: PPUSH
30603: LD_VAR 0 4
30607: PPUSH
30608: LD_VAR 0 9
30612: PPUSH
30613: CALL_OW 440
30617: NOT
30618: AND
30619: IFFALSE 30623
// exit ;
30621: GO 30631
// result := true ;
30623: LD_ADDR_VAR 0 6
30627: PUSH
30628: LD_INT 1
30630: ST_TO_ADDR
// end ;
30631: LD_VAR 0 6
30635: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30636: LD_INT 0
30638: PPUSH
30639: PPUSH
30640: PPUSH
30641: PPUSH
30642: PPUSH
30643: PPUSH
30644: PPUSH
30645: PPUSH
30646: PPUSH
30647: PPUSH
30648: PPUSH
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
// result = [ ] ;
30696: LD_ADDR_VAR 0 7
30700: PUSH
30701: EMPTY
30702: ST_TO_ADDR
// temp_list = [ ] ;
30703: LD_ADDR_VAR 0 9
30707: PUSH
30708: EMPTY
30709: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30710: LD_VAR 0 4
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: LD_INT 4
30729: PUSH
30730: LD_INT 5
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: IN
30741: NOT
30742: IFTRUE 30785
30744: PUSH
30745: LD_VAR 0 1
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: IN
30760: IFFALSE 30784
30762: PUSH
30763: LD_VAR 0 5
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 3
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: LIST
30781: IN
30782: NOT
30783: AND
30784: OR
30785: IFFALSE 30789
// exit ;
30787: GO 49188
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30789: LD_VAR 0 1
30793: PUSH
30794: LD_INT 6
30796: PUSH
30797: LD_INT 7
30799: PUSH
30800: LD_INT 8
30802: PUSH
30803: LD_INT 13
30805: PUSH
30806: LD_INT 12
30808: PUSH
30809: LD_INT 15
30811: PUSH
30812: LD_INT 11
30814: PUSH
30815: LD_INT 14
30817: PUSH
30818: LD_INT 10
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: IN
30832: IFFALSE 30842
// btype = b_lab ;
30834: LD_ADDR_VAR 0 1
30838: PUSH
30839: LD_INT 6
30841: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30842: LD_VAR 0 6
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: IN
30861: NOT
30862: IFTRUE 30930
30864: PUSH
30865: LD_VAR 0 1
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: LD_INT 6
30884: PUSH
30885: LD_INT 36
30887: PUSH
30888: LD_INT 4
30890: PUSH
30891: LD_INT 5
30893: PUSH
30894: LD_INT 31
30896: PUSH
30897: LD_INT 32
30899: PUSH
30900: LD_INT 33
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: IN
30916: NOT
30917: IFFALSE 30929
30919: PUSH
30920: LD_VAR 0 6
30924: PUSH
30925: LD_INT 1
30927: EQUAL
30928: AND
30929: OR
30930: IFTRUE 30962
30932: PUSH
30933: LD_VAR 0 1
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: IN
30948: NOT
30949: IFFALSE 30961
30951: PUSH
30952: LD_VAR 0 6
30956: PUSH
30957: LD_INT 2
30959: EQUAL
30960: AND
30961: OR
30962: IFFALSE 30972
// mode = 0 ;
30964: LD_ADDR_VAR 0 6
30968: PUSH
30969: LD_INT 0
30971: ST_TO_ADDR
// case mode of 0 :
30972: LD_VAR 0 6
30976: PUSH
30977: LD_INT 0
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 42438
30985: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30986: LD_ADDR_VAR 0 11
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: NEG
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31179: LD_ADDR_VAR 0 12
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31375: LD_ADDR_VAR 0 13
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 2
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 3
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31574: LD_ADDR_VAR 0 14
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 3
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 3
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31770: LD_ADDR_VAR 0 15
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: LD_INT 1
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 3
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31963: LD_ADDR_VAR 0 16
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32156: LD_ADDR_VAR 0 17
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: LD_INT 0
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32386: LD_ADDR_VAR 0 18
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32616: LD_ADDR_VAR 0 19
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32846: LD_ADDR_VAR 0 20
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33076: LD_ADDR_VAR 0 21
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33306: LD_ADDR_VAR 0 22
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 2
33482: NEG
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33536: LD_ADDR_VAR 0 23
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: LD_INT 3
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 3
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33816: LD_ADDR_VAR 0 24
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 2
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 2
33992: NEG
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 2
34003: NEG
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 2
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 3
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34092: LD_ADDR_VAR 0 25
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 3
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34366: LD_ADDR_VAR 0 26
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 2
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: LD_INT 2
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: LD_INT 3
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34642: LD_ADDR_VAR 0 27
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: NEG
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34922: LD_ADDR_VAR 0 28
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 2
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 2
35098: NEG
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: LD_INT 3
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 3
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 3
35157: NEG
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 3
35169: NEG
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35204: LD_ADDR_VAR 0 29
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 2
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 2
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: LD_INT 3
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35483: LD_ADDR_VAR 0 30
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: LD_INT 3
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 3
35726: NEG
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35761: LD_ADDR_VAR 0 31
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 3
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 3
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: LD_INT 3
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 3
36004: NEG
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36039: LD_ADDR_VAR 0 32
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 2
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 3
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 3
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 3
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 2
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36317: LD_ADDR_VAR 0 33
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: LD_INT 3
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 3
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 3
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 3
36561: NEG
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36596: LD_ADDR_VAR 0 34
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 3
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 3
36841: NEG
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36876: LD_ADDR_VAR 0 35
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: NEG
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36988: LD_ADDR_VAR 0 36
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37100: LD_ADDR_VAR 0 37
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37212: LD_ADDR_VAR 0 38
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37324: LD_ADDR_VAR 0 39
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37436: LD_ADDR_VAR 0 40
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37548: LD_ADDR_VAR 0 41
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 2
37738: NEG
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 3
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 3
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 3
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: NEG
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 3
37833: NEG
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: NEG
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: NEG
37858: PUSH
37859: LD_INT 3
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37898: LD_ADDR_VAR 0 42
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: LD_INT 3
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 3
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38248: LD_ADDR_VAR 0 43
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 3
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 3
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 3
38544: NEG
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 3
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38596: LD_ADDR_VAR 0 44
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 2
38774: NEG
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: LD_INT 3
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: NEG
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 3
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 3
38893: NEG
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 3
38905: NEG
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38946: LD_ADDR_VAR 0 45
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: LD_INT 3
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 3
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 3
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39296: LD_ADDR_VAR 0 46
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 3
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 3
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: LD_INT 2
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 3
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39644: LD_ADDR_VAR 0 47
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39795: LD_ADDR_VAR 0 48
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39942: LD_ADDR_VAR 0 49
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40086: LD_ADDR_VAR 0 50
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40230: LD_ADDR_VAR 0 51
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40377: LD_ADDR_VAR 0 52
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40528: LD_ADDR_VAR 0 53
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40758: LD_ADDR_VAR 0 54
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40988: LD_ADDR_VAR 0 55
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41218: LD_ADDR_VAR 0 56
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41448: LD_ADDR_VAR 0 57
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41678: LD_ADDR_VAR 0 58
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41908: LD_ADDR_VAR 0 59
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41996: LD_ADDR_VAR 0 60
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42084: LD_ADDR_VAR 0 61
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42172: LD_ADDR_VAR 0 62
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42260: LD_ADDR_VAR 0 63
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42348: LD_ADDR_VAR 0 64
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// end ; 1 :
42436: GO 48333
42438: LD_INT 1
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42446
42444: GO 45069
42446: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42447: LD_ADDR_VAR 0 11
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: LIST
42490: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42491: LD_ADDR_VAR 0 12
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42532: LD_ADDR_VAR 0 13
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42572: LD_ADDR_VAR 0 14
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42613: LD_ADDR_VAR 0 15
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 3
42642: NEG
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42657: LD_ADDR_VAR 0 16
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 3
42676: NEG
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 3
42688: NEG
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42703: LD_ADDR_VAR 0 17
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 3
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42747: LD_ADDR_VAR 0 18
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42788: LD_ADDR_VAR 0 19
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 3
42805: PUSH
42806: LD_INT 3
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42828: LD_ADDR_VAR 0 20
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42869: LD_ADDR_VAR 0 21
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: NEG
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 3
42898: NEG
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42913: LD_ADDR_VAR 0 22
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 3
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: NEG
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42959: LD_ADDR_VAR 0 23
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 4
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 3
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43003: LD_ADDR_VAR 0 24
43007: PUSH
43008: LD_INT 3
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 4
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43044: LD_ADDR_VAR 0 25
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 4
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: LD_INT 4
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43084: LD_ADDR_VAR 0 26
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 3
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 4
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43125: LD_ADDR_VAR 0 27
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 4
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43169: LD_ADDR_VAR 0 28
43173: PUSH
43174: LD_INT 3
43176: NEG
43177: PUSH
43178: LD_INT 3
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: LD_INT 4
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 4
43200: NEG
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43215: LD_ADDR_VAR 0 29
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 3
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 4
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 4
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 5
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 5
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 4
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 6
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 6
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 5
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43370: LD_ADDR_VAR 0 30
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 4
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 4
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 4
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 5
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 5
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 5
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 6
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 6
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43513: LD_ADDR_VAR 0 31
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 3
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 4
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 4
43560: PUSH
43561: LD_INT 4
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: LD_INT 4
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 5
43580: PUSH
43581: LD_INT 4
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 5
43590: PUSH
43591: LD_INT 5
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 5
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 6
43610: PUSH
43611: LD_INT 5
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 6
43620: PUSH
43621: LD_INT 6
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 5
43630: PUSH
43631: LD_INT 6
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43652: LD_ADDR_VAR 0 32
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 4
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 4
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 3
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 5
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 5
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 6
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 6
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 5
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43795: LD_ADDR_VAR 0 33
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 4
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 4
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 4
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 5
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 5
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 5
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 6
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 6
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43950: LD_ADDR_VAR 0 34
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: NEG
43994: PUSH
43995: LD_INT 4
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 4
44005: NEG
44006: PUSH
44007: LD_INT 3
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 4
44017: NEG
44018: PUSH
44019: LD_INT 4
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 4
44029: NEG
44030: PUSH
44031: LD_INT 5
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 5
44041: NEG
44042: PUSH
44043: LD_INT 4
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 5
44053: NEG
44054: PUSH
44055: LD_INT 5
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 5
44065: NEG
44066: PUSH
44067: LD_INT 6
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 6
44077: NEG
44078: PUSH
44079: LD_INT 5
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 6
44089: NEG
44090: PUSH
44091: LD_INT 6
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44113: LD_ADDR_VAR 0 41
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 3
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44157: LD_ADDR_VAR 0 42
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44198: LD_ADDR_VAR 0 43
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44238: LD_ADDR_VAR 0 44
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44279: LD_ADDR_VAR 0 45
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44323: LD_ADDR_VAR 0 46
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44369: LD_ADDR_VAR 0 47
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44402: LD_ADDR_VAR 0 48
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44433: LD_ADDR_VAR 0 49
44437: PUSH
44438: LD_INT 3
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44462: LD_ADDR_VAR 0 50
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 3
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44491: LD_ADDR_VAR 0 51
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44522: LD_ADDR_VAR 0 52
44526: PUSH
44527: LD_INT 3
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44555: LD_ADDR_VAR 0 53
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 3
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44599: LD_ADDR_VAR 0 54
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44640: LD_ADDR_VAR 0 55
44644: PUSH
44645: LD_INT 3
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 3
44657: PUSH
44658: LD_INT 3
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44680: LD_ADDR_VAR 0 56
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44721: LD_ADDR_VAR 0 57
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: NEG
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44765: LD_ADDR_VAR 0 58
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 3
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44811: LD_ADDR_VAR 0 59
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44855: LD_ADDR_VAR 0 60
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44896: LD_ADDR_VAR 0 61
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44936: LD_ADDR_VAR 0 62
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44977: LD_ADDR_VAR 0 63
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45021: LD_ADDR_VAR 0 64
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
// end ; 2 :
45067: GO 48333
45069: LD_INT 2
45071: DOUBLE
45072: EQUAL
45073: IFTRUE 45077
45075: GO 48332
45077: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45078: LD_ADDR_VAR 0 29
45082: PUSH
45083: LD_INT 4
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 4
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 5
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 5
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 4
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 5
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 3
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 3
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 4
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 4
45208: PUSH
45209: LD_INT 4
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: LD_INT 4
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 4
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 4
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 4
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 5
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 5
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 3
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 4
45417: NEG
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 4
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 4
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 4
45463: NEG
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 4
45475: NEG
45476: PUSH
45477: LD_INT 5
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: LD_INT 4
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 4
45511: NEG
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 5
45523: NEG
45524: PUSH
45525: LD_INT 4
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 5
45535: NEG
45536: PUSH
45537: LD_INT 5
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 3
45547: NEG
45548: PUSH
45549: LD_INT 5
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 5
45559: NEG
45560: PUSH
45561: LD_INT 3
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45616: LD_ADDR_VAR 0 30
45620: PUSH
45621: LD_INT 4
45623: PUSH
45624: LD_INT 4
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 4
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 5
45643: PUSH
45644: LD_INT 4
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 5
45653: PUSH
45654: LD_INT 5
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 4
45663: PUSH
45664: LD_INT 5
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: LD_INT 4
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 3
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 5
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 5
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 4
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 4
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 4
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 4
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 4
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 5
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 5
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 5
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 3
45908: NEG
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: LD_INT 4
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 4
45968: NEG
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 4
45980: NEG
45981: PUSH
45982: LD_INT 4
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 4
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 4
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 4
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 5
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 4
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: LD_INT 5
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 5
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46163: LD_ADDR_VAR 0 31
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 4
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 3
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 4
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 5
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 5
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 4
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 5
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 3
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 4
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 4
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 4
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 4
46365: NEG
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 4
46377: NEG
46378: PUSH
46379: LD_INT 5
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: LD_INT 4
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 4
46413: NEG
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 5
46425: NEG
46426: PUSH
46427: LD_INT 4
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 5
46437: NEG
46438: PUSH
46439: LD_INT 5
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: NEG
46450: PUSH
46451: LD_INT 5
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 5
46461: NEG
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 4
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 4
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 4
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 4
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 4
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 5
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 5
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 5
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46713: LD_ADDR_VAR 0 32
46717: PUSH
46718: LD_INT 4
46720: NEG
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 5
46776: NEG
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 5
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 5
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 3
46822: NEG
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: NEG
46835: PUSH
46836: LD_INT 4
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 4
46882: NEG
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 4
46894: NEG
46895: PUSH
46896: LD_INT 4
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 4
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 4
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 4
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 5
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 5
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 5
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 4
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 4
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 4
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 4
47125: PUSH
47126: LD_INT 4
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: PUSH
47136: LD_INT 3
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 5
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 5
47155: PUSH
47156: LD_INT 5
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: PUSH
47166: LD_INT 5
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 4
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 5
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: LD_INT 5
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47260: LD_ADDR_VAR 0 33
47264: PUSH
47265: LD_INT 4
47267: NEG
47268: PUSH
47269: LD_INT 4
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 4
47279: NEG
47280: PUSH
47281: LD_INT 5
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: LD_INT 4
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 4
47315: NEG
47316: PUSH
47317: LD_INT 3
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 5
47327: NEG
47328: PUSH
47329: LD_INT 4
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 5
47339: NEG
47340: PUSH
47341: LD_INT 5
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 3
47351: NEG
47352: PUSH
47353: LD_INT 5
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 5
47363: NEG
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 4
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 4
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: LD_INT 4
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 4
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 4
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 5
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 4
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 5
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 4
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 4
47600: PUSH
47601: LD_INT 4
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 3
47610: PUSH
47611: LD_INT 4
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 4
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 4
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 4
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 4
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 5
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47798: LD_ADDR_VAR 0 34
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 4
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 5
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 4
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 4
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 5
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 5
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 4
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 4
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 4
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 4
48000: PUSH
48001: LD_INT 4
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 4
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 5
48020: PUSH
48021: LD_INT 4
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 5
48030: PUSH
48031: LD_INT 5
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: LD_INT 5
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: LD_INT 4
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 5
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 4
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 4
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 4
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 4
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 4
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 4
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 5
48239: NEG
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 5
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 5
48262: NEG
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// end ; end ;
48330: GO 48333
48332: POP
// case btype of b_depot , b_warehouse :
48333: LD_VAR 0 1
48337: PUSH
48338: LD_INT 0
48340: DOUBLE
48341: EQUAL
48342: IFTRUE 48352
48344: LD_INT 1
48346: DOUBLE
48347: EQUAL
48348: IFTRUE 48352
48350: GO 48553
48352: POP
// case nation of nation_american :
48353: LD_VAR 0 5
48357: PUSH
48358: LD_INT 1
48360: DOUBLE
48361: EQUAL
48362: IFTRUE 48366
48364: GO 48422
48366: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48367: LD_ADDR_VAR 0 9
48371: PUSH
48372: LD_VAR 0 11
48376: PUSH
48377: LD_VAR 0 12
48381: PUSH
48382: LD_VAR 0 13
48386: PUSH
48387: LD_VAR 0 14
48391: PUSH
48392: LD_VAR 0 15
48396: PUSH
48397: LD_VAR 0 16
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: PUSH
48410: LD_VAR 0 4
48414: PUSH
48415: LD_INT 1
48417: PLUS
48418: ARRAY
48419: ST_TO_ADDR
48420: GO 48551
48422: LD_INT 2
48424: DOUBLE
48425: EQUAL
48426: IFTRUE 48430
48428: GO 48486
48430: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48431: LD_ADDR_VAR 0 9
48435: PUSH
48436: LD_VAR 0 17
48440: PUSH
48441: LD_VAR 0 18
48445: PUSH
48446: LD_VAR 0 19
48450: PUSH
48451: LD_VAR 0 20
48455: PUSH
48456: LD_VAR 0 21
48460: PUSH
48461: LD_VAR 0 22
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: PUSH
48474: LD_VAR 0 4
48478: PUSH
48479: LD_INT 1
48481: PLUS
48482: ARRAY
48483: ST_TO_ADDR
48484: GO 48551
48486: LD_INT 3
48488: DOUBLE
48489: EQUAL
48490: IFTRUE 48494
48492: GO 48550
48494: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48495: LD_ADDR_VAR 0 9
48499: PUSH
48500: LD_VAR 0 23
48504: PUSH
48505: LD_VAR 0 24
48509: PUSH
48510: LD_VAR 0 25
48514: PUSH
48515: LD_VAR 0 26
48519: PUSH
48520: LD_VAR 0 27
48524: PUSH
48525: LD_VAR 0 28
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: PUSH
48538: LD_VAR 0 4
48542: PUSH
48543: LD_INT 1
48545: PLUS
48546: ARRAY
48547: ST_TO_ADDR
48548: GO 48551
48550: POP
48551: GO 49106
48553: LD_INT 2
48555: DOUBLE
48556: EQUAL
48557: IFTRUE 48567
48559: LD_INT 3
48561: DOUBLE
48562: EQUAL
48563: IFTRUE 48567
48565: GO 48623
48567: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48568: LD_ADDR_VAR 0 9
48572: PUSH
48573: LD_VAR 0 29
48577: PUSH
48578: LD_VAR 0 30
48582: PUSH
48583: LD_VAR 0 31
48587: PUSH
48588: LD_VAR 0 32
48592: PUSH
48593: LD_VAR 0 33
48597: PUSH
48598: LD_VAR 0 34
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: PUSH
48611: LD_VAR 0 4
48615: PUSH
48616: LD_INT 1
48618: PLUS
48619: ARRAY
48620: ST_TO_ADDR
48621: GO 49106
48623: LD_INT 16
48625: DOUBLE
48626: EQUAL
48627: IFTRUE 48685
48629: LD_INT 17
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48685
48635: LD_INT 18
48637: DOUBLE
48638: EQUAL
48639: IFTRUE 48685
48641: LD_INT 19
48643: DOUBLE
48644: EQUAL
48645: IFTRUE 48685
48647: LD_INT 22
48649: DOUBLE
48650: EQUAL
48651: IFTRUE 48685
48653: LD_INT 20
48655: DOUBLE
48656: EQUAL
48657: IFTRUE 48685
48659: LD_INT 21
48661: DOUBLE
48662: EQUAL
48663: IFTRUE 48685
48665: LD_INT 23
48667: DOUBLE
48668: EQUAL
48669: IFTRUE 48685
48671: LD_INT 24
48673: DOUBLE
48674: EQUAL
48675: IFTRUE 48685
48677: LD_INT 25
48679: DOUBLE
48680: EQUAL
48681: IFTRUE 48685
48683: GO 48741
48685: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48686: LD_ADDR_VAR 0 9
48690: PUSH
48691: LD_VAR 0 35
48695: PUSH
48696: LD_VAR 0 36
48700: PUSH
48701: LD_VAR 0 37
48705: PUSH
48706: LD_VAR 0 38
48710: PUSH
48711: LD_VAR 0 39
48715: PUSH
48716: LD_VAR 0 40
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: PUSH
48729: LD_VAR 0 4
48733: PUSH
48734: LD_INT 1
48736: PLUS
48737: ARRAY
48738: ST_TO_ADDR
48739: GO 49106
48741: LD_INT 6
48743: DOUBLE
48744: EQUAL
48745: IFTRUE 48797
48747: LD_INT 7
48749: DOUBLE
48750: EQUAL
48751: IFTRUE 48797
48753: LD_INT 8
48755: DOUBLE
48756: EQUAL
48757: IFTRUE 48797
48759: LD_INT 13
48761: DOUBLE
48762: EQUAL
48763: IFTRUE 48797
48765: LD_INT 12
48767: DOUBLE
48768: EQUAL
48769: IFTRUE 48797
48771: LD_INT 15
48773: DOUBLE
48774: EQUAL
48775: IFTRUE 48797
48777: LD_INT 11
48779: DOUBLE
48780: EQUAL
48781: IFTRUE 48797
48783: LD_INT 14
48785: DOUBLE
48786: EQUAL
48787: IFTRUE 48797
48789: LD_INT 10
48791: DOUBLE
48792: EQUAL
48793: IFTRUE 48797
48795: GO 48853
48797: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48798: LD_ADDR_VAR 0 9
48802: PUSH
48803: LD_VAR 0 41
48807: PUSH
48808: LD_VAR 0 42
48812: PUSH
48813: LD_VAR 0 43
48817: PUSH
48818: LD_VAR 0 44
48822: PUSH
48823: LD_VAR 0 45
48827: PUSH
48828: LD_VAR 0 46
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: PUSH
48841: LD_VAR 0 4
48845: PUSH
48846: LD_INT 1
48848: PLUS
48849: ARRAY
48850: ST_TO_ADDR
48851: GO 49106
48853: LD_INT 36
48855: DOUBLE
48856: EQUAL
48857: IFTRUE 48861
48859: GO 48917
48861: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48862: LD_ADDR_VAR 0 9
48866: PUSH
48867: LD_VAR 0 47
48871: PUSH
48872: LD_VAR 0 48
48876: PUSH
48877: LD_VAR 0 49
48881: PUSH
48882: LD_VAR 0 50
48886: PUSH
48887: LD_VAR 0 51
48891: PUSH
48892: LD_VAR 0 52
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: PUSH
48905: LD_VAR 0 4
48909: PUSH
48910: LD_INT 1
48912: PLUS
48913: ARRAY
48914: ST_TO_ADDR
48915: GO 49106
48917: LD_INT 4
48919: DOUBLE
48920: EQUAL
48921: IFTRUE 48943
48923: LD_INT 5
48925: DOUBLE
48926: EQUAL
48927: IFTRUE 48943
48929: LD_INT 34
48931: DOUBLE
48932: EQUAL
48933: IFTRUE 48943
48935: LD_INT 37
48937: DOUBLE
48938: EQUAL
48939: IFTRUE 48943
48941: GO 48999
48943: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48944: LD_ADDR_VAR 0 9
48948: PUSH
48949: LD_VAR 0 53
48953: PUSH
48954: LD_VAR 0 54
48958: PUSH
48959: LD_VAR 0 55
48963: PUSH
48964: LD_VAR 0 56
48968: PUSH
48969: LD_VAR 0 57
48973: PUSH
48974: LD_VAR 0 58
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: PUSH
48987: LD_VAR 0 4
48991: PUSH
48992: LD_INT 1
48994: PLUS
48995: ARRAY
48996: ST_TO_ADDR
48997: GO 49106
48999: LD_INT 31
49001: DOUBLE
49002: EQUAL
49003: IFTRUE 49049
49005: LD_INT 32
49007: DOUBLE
49008: EQUAL
49009: IFTRUE 49049
49011: LD_INT 33
49013: DOUBLE
49014: EQUAL
49015: IFTRUE 49049
49017: LD_INT 27
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49049
49023: LD_INT 26
49025: DOUBLE
49026: EQUAL
49027: IFTRUE 49049
49029: LD_INT 28
49031: DOUBLE
49032: EQUAL
49033: IFTRUE 49049
49035: LD_INT 29
49037: DOUBLE
49038: EQUAL
49039: IFTRUE 49049
49041: LD_INT 30
49043: DOUBLE
49044: EQUAL
49045: IFTRUE 49049
49047: GO 49105
49049: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49050: LD_ADDR_VAR 0 9
49054: PUSH
49055: LD_VAR 0 59
49059: PUSH
49060: LD_VAR 0 60
49064: PUSH
49065: LD_VAR 0 61
49069: PUSH
49070: LD_VAR 0 62
49074: PUSH
49075: LD_VAR 0 63
49079: PUSH
49080: LD_VAR 0 64
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: PUSH
49093: LD_VAR 0 4
49097: PUSH
49098: LD_INT 1
49100: PLUS
49101: ARRAY
49102: ST_TO_ADDR
49103: GO 49106
49105: POP
// temp_list2 = [ ] ;
49106: LD_ADDR_VAR 0 10
49110: PUSH
49111: EMPTY
49112: ST_TO_ADDR
// for i in temp_list do
49113: LD_ADDR_VAR 0 8
49117: PUSH
49118: LD_VAR 0 9
49122: PUSH
49123: FOR_IN
49124: IFFALSE 49176
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49126: LD_ADDR_VAR 0 10
49130: PUSH
49131: LD_VAR 0 10
49135: PUSH
49136: LD_VAR 0 8
49140: PUSH
49141: LD_INT 1
49143: ARRAY
49144: PUSH
49145: LD_VAR 0 2
49149: PLUS
49150: PUSH
49151: LD_VAR 0 8
49155: PUSH
49156: LD_INT 2
49158: ARRAY
49159: PUSH
49160: LD_VAR 0 3
49164: PLUS
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: ADD
49173: ST_TO_ADDR
49174: GO 49123
49176: POP
49177: POP
// result = temp_list2 ;
49178: LD_ADDR_VAR 0 7
49182: PUSH
49183: LD_VAR 0 10
49187: ST_TO_ADDR
// end ;
49188: LD_VAR 0 7
49192: RET
// export function EnemyInRange ( unit , dist ) ; begin
49193: LD_INT 0
49195: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49196: LD_ADDR_VAR 0 3
49200: PUSH
49201: LD_VAR 0 1
49205: PPUSH
49206: CALL_OW 255
49210: PPUSH
49211: LD_VAR 0 1
49215: PPUSH
49216: CALL_OW 250
49220: PPUSH
49221: LD_VAR 0 1
49225: PPUSH
49226: CALL_OW 251
49230: PPUSH
49231: LD_VAR 0 2
49235: PPUSH
49236: CALL 22450 0 4
49240: PUSH
49241: LD_INT 4
49243: ARRAY
49244: ST_TO_ADDR
// end ;
49245: LD_VAR 0 3
49249: RET
// export function PlayerSeeMe ( unit ) ; begin
49250: LD_INT 0
49252: PPUSH
// result := See ( your_side , unit ) ;
49253: LD_ADDR_VAR 0 2
49257: PUSH
49258: LD_OWVAR 2
49262: PPUSH
49263: LD_VAR 0 1
49267: PPUSH
49268: CALL_OW 292
49272: ST_TO_ADDR
// end ;
49273: LD_VAR 0 2
49277: RET
// export function ReverseDir ( unit ) ; begin
49278: LD_INT 0
49280: PPUSH
// if not unit then
49281: LD_VAR 0 1
49285: NOT
49286: IFFALSE 49290
// exit ;
49288: GO 49313
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49290: LD_ADDR_VAR 0 2
49294: PUSH
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 254
49304: PUSH
49305: LD_INT 3
49307: PLUS
49308: PUSH
49309: LD_INT 6
49311: MOD
49312: ST_TO_ADDR
// end ;
49313: LD_VAR 0 2
49317: RET
// export function ReverseArray ( array ) ; var i ; begin
49318: LD_INT 0
49320: PPUSH
49321: PPUSH
// if not array then
49322: LD_VAR 0 1
49326: NOT
49327: IFFALSE 49331
// exit ;
49329: GO 49386
// result := [ ] ;
49331: LD_ADDR_VAR 0 2
49335: PUSH
49336: EMPTY
49337: ST_TO_ADDR
// for i := array downto 1 do
49338: LD_ADDR_VAR 0 3
49342: PUSH
49343: DOUBLE
49344: LD_VAR 0 1
49348: INC
49349: ST_TO_ADDR
49350: LD_INT 1
49352: PUSH
49353: FOR_DOWNTO
49354: IFFALSE 49384
// result := Join ( result , array [ i ] ) ;
49356: LD_ADDR_VAR 0 2
49360: PUSH
49361: LD_VAR 0 2
49365: PPUSH
49366: LD_VAR 0 1
49370: PUSH
49371: LD_VAR 0 3
49375: ARRAY
49376: PPUSH
49377: CALL 54238 0 2
49381: ST_TO_ADDR
49382: GO 49353
49384: POP
49385: POP
// end ;
49386: LD_VAR 0 2
49390: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49391: LD_INT 0
49393: PPUSH
49394: PPUSH
49395: PPUSH
49396: PPUSH
49397: PPUSH
49398: PPUSH
// if not unit or not hexes then
49399: LD_VAR 0 1
49403: NOT
49404: IFTRUE 49413
49406: PUSH
49407: LD_VAR 0 2
49411: NOT
49412: OR
49413: IFFALSE 49417
// exit ;
49415: GO 49540
// dist := 9999 ;
49417: LD_ADDR_VAR 0 5
49421: PUSH
49422: LD_INT 9999
49424: ST_TO_ADDR
// for i = 1 to hexes do
49425: LD_ADDR_VAR 0 4
49429: PUSH
49430: DOUBLE
49431: LD_INT 1
49433: DEC
49434: ST_TO_ADDR
49435: LD_VAR 0 2
49439: PUSH
49440: FOR_TO
49441: IFFALSE 49528
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49443: LD_ADDR_VAR 0 6
49447: PUSH
49448: LD_VAR 0 1
49452: PPUSH
49453: LD_VAR 0 2
49457: PUSH
49458: LD_VAR 0 4
49462: ARRAY
49463: PUSH
49464: LD_INT 1
49466: ARRAY
49467: PPUSH
49468: LD_VAR 0 2
49472: PUSH
49473: LD_VAR 0 4
49477: ARRAY
49478: PUSH
49479: LD_INT 2
49481: ARRAY
49482: PPUSH
49483: CALL_OW 297
49487: ST_TO_ADDR
// if tdist < dist then
49488: LD_VAR 0 6
49492: PUSH
49493: LD_VAR 0 5
49497: LESS
49498: IFFALSE 49526
// begin hex := hexes [ i ] ;
49500: LD_ADDR_VAR 0 8
49504: PUSH
49505: LD_VAR 0 2
49509: PUSH
49510: LD_VAR 0 4
49514: ARRAY
49515: ST_TO_ADDR
// dist := tdist ;
49516: LD_ADDR_VAR 0 5
49520: PUSH
49521: LD_VAR 0 6
49525: ST_TO_ADDR
// end ; end ;
49526: GO 49440
49528: POP
49529: POP
// result := hex ;
49530: LD_ADDR_VAR 0 3
49534: PUSH
49535: LD_VAR 0 8
49539: ST_TO_ADDR
// end ;
49540: LD_VAR 0 3
49544: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49545: LD_INT 0
49547: PPUSH
49548: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49549: LD_VAR 0 1
49553: NOT
49554: IFTRUE 49593
49556: PUSH
49557: LD_VAR 0 1
49561: PUSH
49562: LD_INT 21
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 23
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PPUSH
49586: CALL_OW 69
49590: IN
49591: NOT
49592: OR
49593: IFFALSE 49597
// exit ;
49595: GO 49644
// for i = 1 to 3 do
49597: LD_ADDR_VAR 0 3
49601: PUSH
49602: DOUBLE
49603: LD_INT 1
49605: DEC
49606: ST_TO_ADDR
49607: LD_INT 3
49609: PUSH
49610: FOR_TO
49611: IFFALSE 49642
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49613: LD_VAR 0 1
49617: PPUSH
49618: CALL_OW 250
49622: PPUSH
49623: LD_VAR 0 1
49627: PPUSH
49628: CALL_OW 251
49632: PPUSH
49633: LD_INT 1
49635: PPUSH
49636: CALL_OW 453
49640: GO 49610
49642: POP
49643: POP
// end ;
49644: LD_VAR 0 2
49648: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49649: LD_INT 0
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
// if not unit or not enemy_unit then
49657: LD_VAR 0 1
49661: NOT
49662: IFTRUE 49671
49664: PUSH
49665: LD_VAR 0 2
49669: NOT
49670: OR
49671: IFFALSE 49675
// exit ;
49673: GO 50156
// if GetLives ( i ) < 250 then
49675: LD_VAR 0 4
49679: PPUSH
49680: CALL_OW 256
49684: PUSH
49685: LD_INT 250
49687: LESS
49688: IFFALSE 49701
// begin ComAutodestruct ( i ) ;
49690: LD_VAR 0 4
49694: PPUSH
49695: CALL 49545 0 1
// exit ;
49699: GO 50156
// end ; x := GetX ( enemy_unit ) ;
49701: LD_ADDR_VAR 0 7
49705: PUSH
49706: LD_VAR 0 2
49710: PPUSH
49711: CALL_OW 250
49715: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49716: LD_ADDR_VAR 0 8
49720: PUSH
49721: LD_VAR 0 2
49725: PPUSH
49726: CALL_OW 251
49730: ST_TO_ADDR
// if not x or not y then
49731: LD_VAR 0 7
49735: NOT
49736: IFTRUE 49745
49738: PUSH
49739: LD_VAR 0 8
49743: NOT
49744: OR
49745: IFFALSE 49749
// exit ;
49747: GO 50156
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49749: LD_ADDR_VAR 0 6
49753: PUSH
49754: LD_VAR 0 7
49758: PPUSH
49759: LD_INT 0
49761: PPUSH
49762: LD_INT 4
49764: PPUSH
49765: CALL_OW 272
49769: PUSH
49770: LD_VAR 0 8
49774: PPUSH
49775: LD_INT 0
49777: PPUSH
49778: LD_INT 4
49780: PPUSH
49781: CALL_OW 273
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_VAR 0 7
49794: PPUSH
49795: LD_INT 1
49797: PPUSH
49798: LD_INT 4
49800: PPUSH
49801: CALL_OW 272
49805: PUSH
49806: LD_VAR 0 8
49810: PPUSH
49811: LD_INT 1
49813: PPUSH
49814: LD_INT 4
49816: PPUSH
49817: CALL_OW 273
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_VAR 0 7
49830: PPUSH
49831: LD_INT 2
49833: PPUSH
49834: LD_INT 4
49836: PPUSH
49837: CALL_OW 272
49841: PUSH
49842: LD_VAR 0 8
49846: PPUSH
49847: LD_INT 2
49849: PPUSH
49850: LD_INT 4
49852: PPUSH
49853: CALL_OW 273
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_VAR 0 7
49866: PPUSH
49867: LD_INT 3
49869: PPUSH
49870: LD_INT 4
49872: PPUSH
49873: CALL_OW 272
49877: PUSH
49878: LD_VAR 0 8
49882: PPUSH
49883: LD_INT 3
49885: PPUSH
49886: LD_INT 4
49888: PPUSH
49889: CALL_OW 273
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_VAR 0 7
49902: PPUSH
49903: LD_INT 4
49905: PPUSH
49906: LD_INT 4
49908: PPUSH
49909: CALL_OW 272
49913: PUSH
49914: LD_VAR 0 8
49918: PPUSH
49919: LD_INT 4
49921: PPUSH
49922: LD_INT 4
49924: PPUSH
49925: CALL_OW 273
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_VAR 0 7
49938: PPUSH
49939: LD_INT 5
49941: PPUSH
49942: LD_INT 4
49944: PPUSH
49945: CALL_OW 272
49949: PUSH
49950: LD_VAR 0 8
49954: PPUSH
49955: LD_INT 5
49957: PPUSH
49958: LD_INT 4
49960: PPUSH
49961: CALL_OW 273
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: ST_TO_ADDR
// for i = tmp downto 1 do
49978: LD_ADDR_VAR 0 4
49982: PUSH
49983: DOUBLE
49984: LD_VAR 0 6
49988: INC
49989: ST_TO_ADDR
49990: LD_INT 1
49992: PUSH
49993: FOR_DOWNTO
49994: IFFALSE 50097
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49996: LD_VAR 0 6
50000: PUSH
50001: LD_VAR 0 4
50005: ARRAY
50006: PUSH
50007: LD_INT 1
50009: ARRAY
50010: PPUSH
50011: LD_VAR 0 6
50015: PUSH
50016: LD_VAR 0 4
50020: ARRAY
50021: PUSH
50022: LD_INT 2
50024: ARRAY
50025: PPUSH
50026: CALL_OW 488
50030: NOT
50031: IFTRUE 50073
50033: PUSH
50034: LD_VAR 0 6
50038: PUSH
50039: LD_VAR 0 4
50043: ARRAY
50044: PUSH
50045: LD_INT 1
50047: ARRAY
50048: PPUSH
50049: LD_VAR 0 6
50053: PUSH
50054: LD_VAR 0 4
50058: ARRAY
50059: PUSH
50060: LD_INT 2
50062: ARRAY
50063: PPUSH
50064: CALL_OW 428
50068: PUSH
50069: LD_INT 0
50071: NONEQUAL
50072: OR
50073: IFFALSE 50095
// tmp := Delete ( tmp , i ) ;
50075: LD_ADDR_VAR 0 6
50079: PUSH
50080: LD_VAR 0 6
50084: PPUSH
50085: LD_VAR 0 4
50089: PPUSH
50090: CALL_OW 3
50094: ST_TO_ADDR
50095: GO 49993
50097: POP
50098: POP
// j := GetClosestHex ( unit , tmp ) ;
50099: LD_ADDR_VAR 0 5
50103: PUSH
50104: LD_VAR 0 1
50108: PPUSH
50109: LD_VAR 0 6
50113: PPUSH
50114: CALL 49391 0 2
50118: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50119: LD_VAR 0 1
50123: PPUSH
50124: LD_VAR 0 5
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: PPUSH
50133: LD_VAR 0 5
50137: PUSH
50138: LD_INT 2
50140: ARRAY
50141: PPUSH
50142: CALL_OW 111
// result := j ;
50146: LD_ADDR_VAR 0 3
50150: PUSH
50151: LD_VAR 0 5
50155: ST_TO_ADDR
// end ;
50156: LD_VAR 0 3
50160: RET
// export function PrepareApemanSoldier ( ) ; begin
50161: LD_INT 0
50163: PPUSH
// uc_nation := 0 ;
50164: LD_ADDR_OWVAR 21
50168: PUSH
50169: LD_INT 0
50171: ST_TO_ADDR
// hc_sex := sex_male ;
50172: LD_ADDR_OWVAR 27
50176: PUSH
50177: LD_INT 1
50179: ST_TO_ADDR
// hc_name :=  ;
50180: LD_ADDR_OWVAR 26
50184: PUSH
50185: LD_STRING 
50187: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50188: LD_ADDR_OWVAR 28
50192: PUSH
50193: LD_INT 15
50195: ST_TO_ADDR
// hc_gallery :=  ;
50196: LD_ADDR_OWVAR 33
50200: PUSH
50201: LD_STRING 
50203: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50204: LD_ADDR_OWVAR 31
50208: PUSH
50209: LD_INT 0
50211: PPUSH
50212: LD_INT 3
50214: PPUSH
50215: CALL_OW 12
50219: PUSH
50220: LD_INT 0
50222: PPUSH
50223: LD_INT 3
50225: PPUSH
50226: CALL_OW 12
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50243: LD_ADDR_OWVAR 29
50247: PUSH
50248: LD_INT 10
50250: PUSH
50251: LD_INT 12
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: ST_TO_ADDR
// end ;
50258: LD_VAR 0 1
50262: RET
// export function PrepareApemanEngineer ( ) ; begin
50263: LD_INT 0
50265: PPUSH
// uc_nation := 0 ;
50266: LD_ADDR_OWVAR 21
50270: PUSH
50271: LD_INT 0
50273: ST_TO_ADDR
// hc_sex := sex_male ;
50274: LD_ADDR_OWVAR 27
50278: PUSH
50279: LD_INT 1
50281: ST_TO_ADDR
// hc_name :=  ;
50282: LD_ADDR_OWVAR 26
50286: PUSH
50287: LD_STRING 
50289: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50290: LD_ADDR_OWVAR 28
50294: PUSH
50295: LD_INT 16
50297: ST_TO_ADDR
// hc_gallery :=  ;
50298: LD_ADDR_OWVAR 33
50302: PUSH
50303: LD_STRING 
50305: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50306: LD_ADDR_OWVAR 31
50310: PUSH
50311: LD_INT 0
50313: PPUSH
50314: LD_INT 3
50316: PPUSH
50317: CALL_OW 12
50321: PUSH
50322: LD_INT 0
50324: PPUSH
50325: LD_INT 3
50327: PPUSH
50328: CALL_OW 12
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50345: LD_ADDR_OWVAR 29
50349: PUSH
50350: LD_INT 10
50352: PUSH
50353: LD_INT 12
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// end ;
50360: LD_VAR 0 1
50364: RET
// export function PrepareApeman ( agressivity ) ; begin
50365: LD_INT 0
50367: PPUSH
// uc_side := 0 ;
50368: LD_ADDR_OWVAR 20
50372: PUSH
50373: LD_INT 0
50375: ST_TO_ADDR
// uc_nation := 0 ;
50376: LD_ADDR_OWVAR 21
50380: PUSH
50381: LD_INT 0
50383: ST_TO_ADDR
// hc_sex := sex_male ;
50384: LD_ADDR_OWVAR 27
50388: PUSH
50389: LD_INT 1
50391: ST_TO_ADDR
// hc_class := class_apeman ;
50392: LD_ADDR_OWVAR 28
50396: PUSH
50397: LD_INT 12
50399: ST_TO_ADDR
// hc_gallery :=  ;
50400: LD_ADDR_OWVAR 33
50404: PUSH
50405: LD_STRING 
50407: ST_TO_ADDR
// hc_name :=  ;
50408: LD_ADDR_OWVAR 26
50412: PUSH
50413: LD_STRING 
50415: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50416: LD_ADDR_OWVAR 29
50420: PUSH
50421: LD_INT 10
50423: PUSH
50424: LD_INT 12
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// if agressivity = 0 then
50431: LD_VAR 0 1
50435: PUSH
50436: LD_INT 0
50438: EQUAL
50439: IFFALSE 50451
// hc_agressivity := 0 else
50441: LD_ADDR_OWVAR 35
50445: PUSH
50446: LD_INT 0
50448: ST_TO_ADDR
50449: GO 50472
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50451: LD_ADDR_OWVAR 35
50455: PUSH
50456: LD_VAR 0 1
50460: NEG
50461: PPUSH
50462: LD_VAR 0 1
50466: PPUSH
50467: CALL_OW 12
50471: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50472: LD_ADDR_OWVAR 31
50476: PUSH
50477: LD_INT 0
50479: PPUSH
50480: LD_INT 3
50482: PPUSH
50483: CALL_OW 12
50487: PUSH
50488: LD_INT 0
50490: PPUSH
50491: LD_INT 3
50493: PPUSH
50494: CALL_OW 12
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: ST_TO_ADDR
// end ;
50511: LD_VAR 0 2
50515: RET
// export function PrepareTiger ( agressivity ) ; begin
50516: LD_INT 0
50518: PPUSH
// uc_side := 0 ;
50519: LD_ADDR_OWVAR 20
50523: PUSH
50524: LD_INT 0
50526: ST_TO_ADDR
// uc_nation := 0 ;
50527: LD_ADDR_OWVAR 21
50531: PUSH
50532: LD_INT 0
50534: ST_TO_ADDR
// InitHc ;
50535: CALL_OW 19
// hc_class := class_tiger ;
50539: LD_ADDR_OWVAR 28
50543: PUSH
50544: LD_INT 14
50546: ST_TO_ADDR
// hc_gallery :=  ;
50547: LD_ADDR_OWVAR 33
50551: PUSH
50552: LD_STRING 
50554: ST_TO_ADDR
// hc_name :=  ;
50555: LD_ADDR_OWVAR 26
50559: PUSH
50560: LD_STRING 
50562: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50563: LD_ADDR_OWVAR 35
50567: PUSH
50568: LD_VAR 0 1
50572: NEG
50573: PPUSH
50574: LD_VAR 0 1
50578: PPUSH
50579: CALL_OW 12
50583: ST_TO_ADDR
// end ;
50584: LD_VAR 0 2
50588: RET
// export function PrepareEnchidna ( ) ; begin
50589: LD_INT 0
50591: PPUSH
// uc_side := 0 ;
50592: LD_ADDR_OWVAR 20
50596: PUSH
50597: LD_INT 0
50599: ST_TO_ADDR
// uc_nation := 0 ;
50600: LD_ADDR_OWVAR 21
50604: PUSH
50605: LD_INT 0
50607: ST_TO_ADDR
// InitHc ;
50608: CALL_OW 19
// hc_class := class_baggie ;
50612: LD_ADDR_OWVAR 28
50616: PUSH
50617: LD_INT 13
50619: ST_TO_ADDR
// hc_gallery :=  ;
50620: LD_ADDR_OWVAR 33
50624: PUSH
50625: LD_STRING 
50627: ST_TO_ADDR
// hc_name :=  ;
50628: LD_ADDR_OWVAR 26
50632: PUSH
50633: LD_STRING 
50635: ST_TO_ADDR
// end ;
50636: LD_VAR 0 1
50640: RET
// export function PrepareFrog ( ) ; begin
50641: LD_INT 0
50643: PPUSH
// uc_side := 0 ;
50644: LD_ADDR_OWVAR 20
50648: PUSH
50649: LD_INT 0
50651: ST_TO_ADDR
// uc_nation := 0 ;
50652: LD_ADDR_OWVAR 21
50656: PUSH
50657: LD_INT 0
50659: ST_TO_ADDR
// InitHc ;
50660: CALL_OW 19
// hc_class := class_frog ;
50664: LD_ADDR_OWVAR 28
50668: PUSH
50669: LD_INT 19
50671: ST_TO_ADDR
// hc_gallery :=  ;
50672: LD_ADDR_OWVAR 33
50676: PUSH
50677: LD_STRING 
50679: ST_TO_ADDR
// hc_name :=  ;
50680: LD_ADDR_OWVAR 26
50684: PUSH
50685: LD_STRING 
50687: ST_TO_ADDR
// end ;
50688: LD_VAR 0 1
50692: RET
// export function PrepareFish ( ) ; begin
50693: LD_INT 0
50695: PPUSH
// uc_side := 0 ;
50696: LD_ADDR_OWVAR 20
50700: PUSH
50701: LD_INT 0
50703: ST_TO_ADDR
// uc_nation := 0 ;
50704: LD_ADDR_OWVAR 21
50708: PUSH
50709: LD_INT 0
50711: ST_TO_ADDR
// InitHc ;
50712: CALL_OW 19
// hc_class := class_fish ;
50716: LD_ADDR_OWVAR 28
50720: PUSH
50721: LD_INT 20
50723: ST_TO_ADDR
// hc_gallery :=  ;
50724: LD_ADDR_OWVAR 33
50728: PUSH
50729: LD_STRING 
50731: ST_TO_ADDR
// hc_name :=  ;
50732: LD_ADDR_OWVAR 26
50736: PUSH
50737: LD_STRING 
50739: ST_TO_ADDR
// end ;
50740: LD_VAR 0 1
50744: RET
// export function PrepareBird ( ) ; begin
50745: LD_INT 0
50747: PPUSH
// uc_side := 0 ;
50748: LD_ADDR_OWVAR 20
50752: PUSH
50753: LD_INT 0
50755: ST_TO_ADDR
// uc_nation := 0 ;
50756: LD_ADDR_OWVAR 21
50760: PUSH
50761: LD_INT 0
50763: ST_TO_ADDR
// InitHc ;
50764: CALL_OW 19
// hc_class := class_phororhacos ;
50768: LD_ADDR_OWVAR 28
50772: PUSH
50773: LD_INT 18
50775: ST_TO_ADDR
// hc_gallery :=  ;
50776: LD_ADDR_OWVAR 33
50780: PUSH
50781: LD_STRING 
50783: ST_TO_ADDR
// hc_name :=  ;
50784: LD_ADDR_OWVAR 26
50788: PUSH
50789: LD_STRING 
50791: ST_TO_ADDR
// end ;
50792: LD_VAR 0 1
50796: RET
// export function PrepareHorse ( ) ; begin
50797: LD_INT 0
50799: PPUSH
// uc_side := 0 ;
50800: LD_ADDR_OWVAR 20
50804: PUSH
50805: LD_INT 0
50807: ST_TO_ADDR
// uc_nation := 0 ;
50808: LD_ADDR_OWVAR 21
50812: PUSH
50813: LD_INT 0
50815: ST_TO_ADDR
// InitHc ;
50816: CALL_OW 19
// hc_class := class_horse ;
50820: LD_ADDR_OWVAR 28
50824: PUSH
50825: LD_INT 21
50827: ST_TO_ADDR
// hc_gallery :=  ;
50828: LD_ADDR_OWVAR 33
50832: PUSH
50833: LD_STRING 
50835: ST_TO_ADDR
// hc_name :=  ;
50836: LD_ADDR_OWVAR 26
50840: PUSH
50841: LD_STRING 
50843: ST_TO_ADDR
// end ;
50844: LD_VAR 0 1
50848: RET
// export function PrepareMastodont ( ) ; begin
50849: LD_INT 0
50851: PPUSH
// uc_side := 0 ;
50852: LD_ADDR_OWVAR 20
50856: PUSH
50857: LD_INT 0
50859: ST_TO_ADDR
// uc_nation := 0 ;
50860: LD_ADDR_OWVAR 21
50864: PUSH
50865: LD_INT 0
50867: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50868: LD_ADDR_OWVAR 37
50872: PUSH
50873: LD_INT 31
50875: ST_TO_ADDR
// vc_control := control_rider ;
50876: LD_ADDR_OWVAR 38
50880: PUSH
50881: LD_INT 4
50883: ST_TO_ADDR
// end ;
50884: LD_VAR 0 1
50888: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50889: LD_INT 0
50891: PPUSH
50892: PPUSH
50893: PPUSH
// uc_side = 0 ;
50894: LD_ADDR_OWVAR 20
50898: PUSH
50899: LD_INT 0
50901: ST_TO_ADDR
// uc_nation = 0 ;
50902: LD_ADDR_OWVAR 21
50906: PUSH
50907: LD_INT 0
50909: ST_TO_ADDR
// InitHc_All ( ) ;
50910: CALL_OW 584
// InitVc ;
50914: CALL_OW 20
// if mastodonts then
50918: LD_VAR 0 6
50922: IFFALSE 50989
// for i = 1 to mastodonts do
50924: LD_ADDR_VAR 0 11
50928: PUSH
50929: DOUBLE
50930: LD_INT 1
50932: DEC
50933: ST_TO_ADDR
50934: LD_VAR 0 6
50938: PUSH
50939: FOR_TO
50940: IFFALSE 50987
// begin vc_chassis := 31 ;
50942: LD_ADDR_OWVAR 37
50946: PUSH
50947: LD_INT 31
50949: ST_TO_ADDR
// vc_control := control_rider ;
50950: LD_ADDR_OWVAR 38
50954: PUSH
50955: LD_INT 4
50957: ST_TO_ADDR
// animal := CreateVehicle ;
50958: LD_ADDR_VAR 0 12
50962: PUSH
50963: CALL_OW 45
50967: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50968: LD_VAR 0 12
50972: PPUSH
50973: LD_VAR 0 8
50977: PPUSH
50978: LD_INT 0
50980: PPUSH
50981: CALL 53131 0 3
// end ;
50985: GO 50939
50987: POP
50988: POP
// if horses then
50989: LD_VAR 0 5
50993: IFFALSE 51060
// for i = 1 to horses do
50995: LD_ADDR_VAR 0 11
50999: PUSH
51000: DOUBLE
51001: LD_INT 1
51003: DEC
51004: ST_TO_ADDR
51005: LD_VAR 0 5
51009: PUSH
51010: FOR_TO
51011: IFFALSE 51058
// begin hc_class := 21 ;
51013: LD_ADDR_OWVAR 28
51017: PUSH
51018: LD_INT 21
51020: ST_TO_ADDR
// hc_gallery :=  ;
51021: LD_ADDR_OWVAR 33
51025: PUSH
51026: LD_STRING 
51028: ST_TO_ADDR
// animal := CreateHuman ;
51029: LD_ADDR_VAR 0 12
51033: PUSH
51034: CALL_OW 44
51038: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51039: LD_VAR 0 12
51043: PPUSH
51044: LD_VAR 0 8
51048: PPUSH
51049: LD_INT 0
51051: PPUSH
51052: CALL 53131 0 3
// end ;
51056: GO 51010
51058: POP
51059: POP
// if birds then
51060: LD_VAR 0 1
51064: IFFALSE 51131
// for i = 1 to birds do
51066: LD_ADDR_VAR 0 11
51070: PUSH
51071: DOUBLE
51072: LD_INT 1
51074: DEC
51075: ST_TO_ADDR
51076: LD_VAR 0 1
51080: PUSH
51081: FOR_TO
51082: IFFALSE 51129
// begin hc_class := 18 ;
51084: LD_ADDR_OWVAR 28
51088: PUSH
51089: LD_INT 18
51091: ST_TO_ADDR
// hc_gallery =  ;
51092: LD_ADDR_OWVAR 33
51096: PUSH
51097: LD_STRING 
51099: ST_TO_ADDR
// animal := CreateHuman ;
51100: LD_ADDR_VAR 0 12
51104: PUSH
51105: CALL_OW 44
51109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51110: LD_VAR 0 12
51114: PPUSH
51115: LD_VAR 0 8
51119: PPUSH
51120: LD_INT 0
51122: PPUSH
51123: CALL 53131 0 3
// end ;
51127: GO 51081
51129: POP
51130: POP
// if tigers then
51131: LD_VAR 0 2
51135: IFFALSE 51219
// for i = 1 to tigers do
51137: LD_ADDR_VAR 0 11
51141: PUSH
51142: DOUBLE
51143: LD_INT 1
51145: DEC
51146: ST_TO_ADDR
51147: LD_VAR 0 2
51151: PUSH
51152: FOR_TO
51153: IFFALSE 51217
// begin hc_class = class_tiger ;
51155: LD_ADDR_OWVAR 28
51159: PUSH
51160: LD_INT 14
51162: ST_TO_ADDR
// hc_gallery =  ;
51163: LD_ADDR_OWVAR 33
51167: PUSH
51168: LD_STRING 
51170: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51171: LD_ADDR_OWVAR 35
51175: PUSH
51176: LD_INT 7
51178: NEG
51179: PPUSH
51180: LD_INT 7
51182: PPUSH
51183: CALL_OW 12
51187: ST_TO_ADDR
// animal := CreateHuman ;
51188: LD_ADDR_VAR 0 12
51192: PUSH
51193: CALL_OW 44
51197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51198: LD_VAR 0 12
51202: PPUSH
51203: LD_VAR 0 8
51207: PPUSH
51208: LD_INT 0
51210: PPUSH
51211: CALL 53131 0 3
// end ;
51215: GO 51152
51217: POP
51218: POP
// if apemans then
51219: LD_VAR 0 3
51223: IFFALSE 51346
// for i = 1 to apemans do
51225: LD_ADDR_VAR 0 11
51229: PUSH
51230: DOUBLE
51231: LD_INT 1
51233: DEC
51234: ST_TO_ADDR
51235: LD_VAR 0 3
51239: PUSH
51240: FOR_TO
51241: IFFALSE 51344
// begin hc_class = class_apeman ;
51243: LD_ADDR_OWVAR 28
51247: PUSH
51248: LD_INT 12
51250: ST_TO_ADDR
// hc_gallery =  ;
51251: LD_ADDR_OWVAR 33
51255: PUSH
51256: LD_STRING 
51258: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51259: LD_ADDR_OWVAR 35
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PPUSH
51268: LD_INT 2
51270: PPUSH
51271: CALL_OW 12
51275: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51276: LD_ADDR_OWVAR 31
51280: PUSH
51281: LD_INT 1
51283: PPUSH
51284: LD_INT 3
51286: PPUSH
51287: CALL_OW 12
51291: PUSH
51292: LD_INT 1
51294: PPUSH
51295: LD_INT 3
51297: PPUSH
51298: CALL_OW 12
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: ST_TO_ADDR
// animal := CreateHuman ;
51315: LD_ADDR_VAR 0 12
51319: PUSH
51320: CALL_OW 44
51324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51325: LD_VAR 0 12
51329: PPUSH
51330: LD_VAR 0 8
51334: PPUSH
51335: LD_INT 0
51337: PPUSH
51338: CALL 53131 0 3
// end ;
51342: GO 51240
51344: POP
51345: POP
// if enchidnas then
51346: LD_VAR 0 4
51350: IFFALSE 51417
// for i = 1 to enchidnas do
51352: LD_ADDR_VAR 0 11
51356: PUSH
51357: DOUBLE
51358: LD_INT 1
51360: DEC
51361: ST_TO_ADDR
51362: LD_VAR 0 4
51366: PUSH
51367: FOR_TO
51368: IFFALSE 51415
// begin hc_class = 13 ;
51370: LD_ADDR_OWVAR 28
51374: PUSH
51375: LD_INT 13
51377: ST_TO_ADDR
// hc_gallery =  ;
51378: LD_ADDR_OWVAR 33
51382: PUSH
51383: LD_STRING 
51385: ST_TO_ADDR
// animal := CreateHuman ;
51386: LD_ADDR_VAR 0 12
51390: PUSH
51391: CALL_OW 44
51395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51396: LD_VAR 0 12
51400: PPUSH
51401: LD_VAR 0 8
51405: PPUSH
51406: LD_INT 0
51408: PPUSH
51409: CALL 53131 0 3
// end ;
51413: GO 51367
51415: POP
51416: POP
// if fishes then
51417: LD_VAR 0 7
51421: IFFALSE 51488
// for i = 1 to fishes do
51423: LD_ADDR_VAR 0 11
51427: PUSH
51428: DOUBLE
51429: LD_INT 1
51431: DEC
51432: ST_TO_ADDR
51433: LD_VAR 0 7
51437: PUSH
51438: FOR_TO
51439: IFFALSE 51486
// begin hc_class = 20 ;
51441: LD_ADDR_OWVAR 28
51445: PUSH
51446: LD_INT 20
51448: ST_TO_ADDR
// hc_gallery =  ;
51449: LD_ADDR_OWVAR 33
51453: PUSH
51454: LD_STRING 
51456: ST_TO_ADDR
// animal := CreateHuman ;
51457: LD_ADDR_VAR 0 12
51461: PUSH
51462: CALL_OW 44
51466: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51467: LD_VAR 0 12
51471: PPUSH
51472: LD_VAR 0 9
51476: PPUSH
51477: LD_INT 0
51479: PPUSH
51480: CALL 53131 0 3
// end ;
51484: GO 51438
51486: POP
51487: POP
// end ;
51488: LD_VAR 0 10
51492: RET
// export function WantHeal ( sci , unit ) ; begin
51493: LD_INT 0
51495: PPUSH
// if GetTaskList ( sci ) > 0 then
51496: LD_VAR 0 1
51500: PPUSH
51501: CALL_OW 437
51505: PUSH
51506: LD_INT 0
51508: GREATER
51509: IFFALSE 51581
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51511: LD_VAR 0 1
51515: PPUSH
51516: CALL_OW 437
51520: PUSH
51521: LD_INT 1
51523: ARRAY
51524: PUSH
51525: LD_INT 1
51527: ARRAY
51528: PUSH
51529: LD_STRING l
51531: EQUAL
51532: IFFALSE 51559
51534: PUSH
51535: LD_VAR 0 1
51539: PPUSH
51540: CALL_OW 437
51544: PUSH
51545: LD_INT 1
51547: ARRAY
51548: PUSH
51549: LD_INT 4
51551: ARRAY
51552: PUSH
51553: LD_VAR 0 2
51557: EQUAL
51558: AND
51559: IFFALSE 51571
// result := true else
51561: LD_ADDR_VAR 0 3
51565: PUSH
51566: LD_INT 1
51568: ST_TO_ADDR
51569: GO 51579
// result := false ;
51571: LD_ADDR_VAR 0 3
51575: PUSH
51576: LD_INT 0
51578: ST_TO_ADDR
// end else
51579: GO 51589
// result := false ;
51581: LD_ADDR_VAR 0 3
51585: PUSH
51586: LD_INT 0
51588: ST_TO_ADDR
// end ;
51589: LD_VAR 0 3
51593: RET
// export function HealTarget ( sci ) ; begin
51594: LD_INT 0
51596: PPUSH
// if not sci then
51597: LD_VAR 0 1
51601: NOT
51602: IFFALSE 51606
// exit ;
51604: GO 51671
// result := 0 ;
51606: LD_ADDR_VAR 0 2
51610: PUSH
51611: LD_INT 0
51613: ST_TO_ADDR
// if GetTaskList ( sci ) then
51614: LD_VAR 0 1
51618: PPUSH
51619: CALL_OW 437
51623: IFFALSE 51671
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51625: LD_VAR 0 1
51629: PPUSH
51630: CALL_OW 437
51634: PUSH
51635: LD_INT 1
51637: ARRAY
51638: PUSH
51639: LD_INT 1
51641: ARRAY
51642: PUSH
51643: LD_STRING l
51645: EQUAL
51646: IFFALSE 51671
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51648: LD_ADDR_VAR 0 2
51652: PUSH
51653: LD_VAR 0 1
51657: PPUSH
51658: CALL_OW 437
51662: PUSH
51663: LD_INT 1
51665: ARRAY
51666: PUSH
51667: LD_INT 4
51669: ARRAY
51670: ST_TO_ADDR
// end ;
51671: LD_VAR 0 2
51675: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51676: LD_INT 0
51678: PPUSH
51679: PPUSH
51680: PPUSH
51681: PPUSH
// if not base_units then
51682: LD_VAR 0 1
51686: NOT
51687: IFFALSE 51691
// exit ;
51689: GO 51778
// result := false ;
51691: LD_ADDR_VAR 0 2
51695: PUSH
51696: LD_INT 0
51698: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51699: LD_ADDR_VAR 0 5
51703: PUSH
51704: LD_VAR 0 1
51708: PPUSH
51709: LD_INT 21
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PPUSH
51719: CALL_OW 72
51723: ST_TO_ADDR
// if not tmp then
51724: LD_VAR 0 5
51728: NOT
51729: IFFALSE 51733
// exit ;
51731: GO 51778
// for i in tmp do
51733: LD_ADDR_VAR 0 3
51737: PUSH
51738: LD_VAR 0 5
51742: PUSH
51743: FOR_IN
51744: IFFALSE 51776
// begin result := EnemyInRange ( i , 22 ) ;
51746: LD_ADDR_VAR 0 2
51750: PUSH
51751: LD_VAR 0 3
51755: PPUSH
51756: LD_INT 22
51758: PPUSH
51759: CALL 49193 0 2
51763: ST_TO_ADDR
// if result then
51764: LD_VAR 0 2
51768: IFFALSE 51774
// exit ;
51770: POP
51771: POP
51772: GO 51778
// end ;
51774: GO 51743
51776: POP
51777: POP
// end ;
51778: LD_VAR 0 2
51782: RET
// export function FilterByTag ( units , tag ) ; begin
51783: LD_INT 0
51785: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51786: LD_ADDR_VAR 0 3
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: LD_INT 120
51798: PUSH
51799: LD_VAR 0 2
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PPUSH
51808: CALL_OW 72
51812: ST_TO_ADDR
// end ;
51813: LD_VAR 0 3
51817: RET
// export function IsDriver ( un ) ; begin
51818: LD_INT 0
51820: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51821: LD_ADDR_VAR 0 2
51825: PUSH
51826: LD_VAR 0 1
51830: PUSH
51831: LD_INT 55
51833: PUSH
51834: EMPTY
51835: LIST
51836: PPUSH
51837: CALL_OW 69
51841: IN
51842: ST_TO_ADDR
// end ;
51843: LD_VAR 0 2
51847: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51848: LD_INT 0
51850: PPUSH
51851: PPUSH
// list := [ ] ;
51852: LD_ADDR_VAR 0 5
51856: PUSH
51857: EMPTY
51858: ST_TO_ADDR
// case d of 0 :
51859: LD_VAR 0 3
51863: PUSH
51864: LD_INT 0
51866: DOUBLE
51867: EQUAL
51868: IFTRUE 51872
51870: GO 52005
51872: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51873: LD_ADDR_VAR 0 5
51877: PUSH
51878: LD_VAR 0 1
51882: PUSH
51883: LD_INT 4
51885: MINUS
51886: PUSH
51887: LD_VAR 0 2
51891: PUSH
51892: LD_INT 4
51894: MINUS
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: PUSH
51904: LD_VAR 0 1
51908: PUSH
51909: LD_INT 3
51911: MINUS
51912: PUSH
51913: LD_VAR 0 2
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: PUSH
51926: LD_VAR 0 1
51930: PUSH
51931: LD_INT 4
51933: PLUS
51934: PUSH
51935: LD_VAR 0 2
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: PUSH
51948: LD_VAR 0 1
51952: PUSH
51953: LD_INT 3
51955: PLUS
51956: PUSH
51957: LD_VAR 0 2
51961: PUSH
51962: LD_INT 3
51964: PLUS
51965: PUSH
51966: LD_INT 5
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: LD_VAR 0 1
51978: PUSH
51979: LD_VAR 0 2
51983: PUSH
51984: LD_INT 4
51986: PLUS
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// end ; 1 :
52003: GO 52703
52005: LD_INT 1
52007: DOUBLE
52008: EQUAL
52009: IFTRUE 52013
52011: GO 52146
52013: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52014: LD_ADDR_VAR 0 5
52018: PUSH
52019: LD_VAR 0 1
52023: PUSH
52024: LD_VAR 0 2
52028: PUSH
52029: LD_INT 4
52031: MINUS
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: PUSH
52041: LD_VAR 0 1
52045: PUSH
52046: LD_INT 3
52048: MINUS
52049: PUSH
52050: LD_VAR 0 2
52054: PUSH
52055: LD_INT 3
52057: MINUS
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: PUSH
52067: LD_VAR 0 1
52071: PUSH
52072: LD_INT 4
52074: MINUS
52075: PUSH
52076: LD_VAR 0 2
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: PUSH
52089: LD_VAR 0 1
52093: PUSH
52094: LD_VAR 0 2
52098: PUSH
52099: LD_INT 3
52101: PLUS
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: PUSH
52111: LD_VAR 0 1
52115: PUSH
52116: LD_INT 4
52118: PLUS
52119: PUSH
52120: LD_VAR 0 2
52124: PUSH
52125: LD_INT 4
52127: PLUS
52128: PUSH
52129: LD_INT 5
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: ST_TO_ADDR
// end ; 2 :
52144: GO 52703
52146: LD_INT 2
52148: DOUBLE
52149: EQUAL
52150: IFTRUE 52154
52152: GO 52283
52154: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52155: LD_ADDR_VAR 0 5
52159: PUSH
52160: LD_VAR 0 1
52164: PUSH
52165: LD_VAR 0 2
52169: PUSH
52170: LD_INT 3
52172: MINUS
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: PUSH
52182: LD_VAR 0 1
52186: PUSH
52187: LD_INT 4
52189: PLUS
52190: PUSH
52191: LD_VAR 0 2
52195: PUSH
52196: LD_INT 4
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: PUSH
52204: LD_VAR 0 1
52208: PUSH
52209: LD_VAR 0 2
52213: PUSH
52214: LD_INT 4
52216: PLUS
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: PUSH
52226: LD_VAR 0 1
52230: PUSH
52231: LD_INT 3
52233: MINUS
52234: PUSH
52235: LD_VAR 0 2
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: PUSH
52248: LD_VAR 0 1
52252: PUSH
52253: LD_INT 4
52255: MINUS
52256: PUSH
52257: LD_VAR 0 2
52261: PUSH
52262: LD_INT 4
52264: MINUS
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// end ; 3 :
52281: GO 52703
52283: LD_INT 3
52285: DOUBLE
52286: EQUAL
52287: IFTRUE 52291
52289: GO 52424
52291: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52292: LD_ADDR_VAR 0 5
52296: PUSH
52297: LD_VAR 0 1
52301: PUSH
52302: LD_INT 3
52304: PLUS
52305: PUSH
52306: LD_VAR 0 2
52310: PUSH
52311: LD_INT 4
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: PUSH
52319: LD_VAR 0 1
52323: PUSH
52324: LD_INT 4
52326: PLUS
52327: PUSH
52328: LD_VAR 0 2
52332: PUSH
52333: LD_INT 4
52335: PLUS
52336: PUSH
52337: LD_INT 5
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: LD_VAR 0 1
52349: PUSH
52350: LD_INT 4
52352: MINUS
52353: PUSH
52354: LD_VAR 0 2
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: PUSH
52367: LD_VAR 0 1
52371: PUSH
52372: LD_VAR 0 2
52376: PUSH
52377: LD_INT 4
52379: MINUS
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: PUSH
52389: LD_VAR 0 1
52393: PUSH
52394: LD_INT 3
52396: MINUS
52397: PUSH
52398: LD_VAR 0 2
52402: PUSH
52403: LD_INT 3
52405: MINUS
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: ST_TO_ADDR
// end ; 4 :
52422: GO 52703
52424: LD_INT 4
52426: DOUBLE
52427: EQUAL
52428: IFTRUE 52432
52430: GO 52565
52432: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52433: LD_ADDR_VAR 0 5
52437: PUSH
52438: LD_VAR 0 1
52442: PUSH
52443: LD_VAR 0 2
52447: PUSH
52448: LD_INT 4
52450: PLUS
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: PUSH
52460: LD_VAR 0 1
52464: PUSH
52465: LD_INT 3
52467: PLUS
52468: PUSH
52469: LD_VAR 0 2
52473: PUSH
52474: LD_INT 3
52476: PLUS
52477: PUSH
52478: LD_INT 5
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: PUSH
52486: LD_VAR 0 1
52490: PUSH
52491: LD_INT 4
52493: PLUS
52494: PUSH
52495: LD_VAR 0 2
52499: PUSH
52500: LD_INT 4
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: PUSH
52508: LD_VAR 0 1
52512: PUSH
52513: LD_VAR 0 2
52517: PUSH
52518: LD_INT 3
52520: MINUS
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: PUSH
52530: LD_VAR 0 1
52534: PUSH
52535: LD_INT 4
52537: MINUS
52538: PUSH
52539: LD_VAR 0 2
52543: PUSH
52544: LD_INT 4
52546: MINUS
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// end ; 5 :
52563: GO 52703
52565: LD_INT 5
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52573
52571: GO 52702
52573: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52574: LD_ADDR_VAR 0 5
52578: PUSH
52579: LD_VAR 0 1
52583: PUSH
52584: LD_INT 4
52586: MINUS
52587: PUSH
52588: LD_VAR 0 2
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: PUSH
52601: LD_VAR 0 1
52605: PUSH
52606: LD_VAR 0 2
52610: PUSH
52611: LD_INT 4
52613: MINUS
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: PUSH
52623: LD_VAR 0 1
52627: PUSH
52628: LD_INT 4
52630: PLUS
52631: PUSH
52632: LD_VAR 0 2
52636: PUSH
52637: LD_INT 4
52639: PLUS
52640: PUSH
52641: LD_INT 5
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: PUSH
52649: LD_VAR 0 1
52653: PUSH
52654: LD_INT 3
52656: PLUS
52657: PUSH
52658: LD_VAR 0 2
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: PUSH
52671: LD_VAR 0 1
52675: PUSH
52676: LD_VAR 0 2
52680: PUSH
52681: LD_INT 3
52683: PLUS
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// end ; end ;
52700: GO 52703
52702: POP
// result := list ;
52703: LD_ADDR_VAR 0 4
52707: PUSH
52708: LD_VAR 0 5
52712: ST_TO_ADDR
// end ;
52713: LD_VAR 0 4
52717: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52718: LD_INT 0
52720: PPUSH
52721: PPUSH
52722: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52723: LD_VAR 0 1
52727: NOT
52728: IFTRUE 52756
52730: PUSH
52731: LD_VAR 0 2
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 4
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: IN
52754: NOT
52755: OR
52756: IFFALSE 52760
// exit ;
52758: GO 52843
// tmp := [ ] ;
52760: LD_ADDR_VAR 0 5
52764: PUSH
52765: EMPTY
52766: ST_TO_ADDR
// for i in units do
52767: LD_ADDR_VAR 0 4
52771: PUSH
52772: LD_VAR 0 1
52776: PUSH
52777: FOR_IN
52778: IFFALSE 52812
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52780: LD_ADDR_VAR 0 5
52784: PUSH
52785: LD_VAR 0 5
52789: PPUSH
52790: LD_VAR 0 4
52794: PPUSH
52795: LD_VAR 0 2
52799: PPUSH
52800: CALL_OW 259
52804: PPUSH
52805: CALL 54238 0 2
52809: ST_TO_ADDR
52810: GO 52777
52812: POP
52813: POP
// if not tmp then
52814: LD_VAR 0 5
52818: NOT
52819: IFFALSE 52823
// exit ;
52821: GO 52843
// result := SortListByListDesc ( units , tmp ) ;
52823: LD_ADDR_VAR 0 3
52827: PUSH
52828: LD_VAR 0 1
52832: PPUSH
52833: LD_VAR 0 5
52837: PPUSH
52838: CALL_OW 77
52842: ST_TO_ADDR
// end ;
52843: LD_VAR 0 3
52847: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52848: LD_INT 0
52850: PPUSH
52851: PPUSH
52852: PPUSH
// result := false ;
52853: LD_ADDR_VAR 0 3
52857: PUSH
52858: LD_INT 0
52860: ST_TO_ADDR
// if not building then
52861: LD_VAR 0 2
52865: NOT
52866: IFFALSE 52870
// exit ;
52868: GO 53014
// x := GetX ( building ) ;
52870: LD_ADDR_VAR 0 4
52874: PUSH
52875: LD_VAR 0 2
52879: PPUSH
52880: CALL_OW 250
52884: ST_TO_ADDR
// y := GetY ( building ) ;
52885: LD_ADDR_VAR 0 5
52889: PUSH
52890: LD_VAR 0 2
52894: PPUSH
52895: CALL_OW 251
52899: ST_TO_ADDR
// if not x or not y then
52900: LD_VAR 0 4
52904: NOT
52905: IFTRUE 52914
52907: PUSH
52908: LD_VAR 0 5
52912: NOT
52913: OR
52914: IFFALSE 52918
// exit ;
52916: GO 53014
// if GetTaskList ( unit ) then
52918: LD_VAR 0 1
52922: PPUSH
52923: CALL_OW 437
52927: IFFALSE 53014
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52929: LD_STRING e
52931: PUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: CALL_OW 437
52941: PUSH
52942: LD_INT 1
52944: ARRAY
52945: PUSH
52946: LD_INT 1
52948: ARRAY
52949: EQUAL
52950: IFFALSE 52977
52952: PUSH
52953: LD_VAR 0 4
52957: PUSH
52958: LD_VAR 0 1
52962: PPUSH
52963: CALL_OW 437
52967: PUSH
52968: LD_INT 1
52970: ARRAY
52971: PUSH
52972: LD_INT 2
52974: ARRAY
52975: EQUAL
52976: AND
52977: IFFALSE 53004
52979: PUSH
52980: LD_VAR 0 5
52984: PUSH
52985: LD_VAR 0 1
52989: PPUSH
52990: CALL_OW 437
52994: PUSH
52995: LD_INT 1
52997: ARRAY
52998: PUSH
52999: LD_INT 3
53001: ARRAY
53002: EQUAL
53003: AND
53004: IFFALSE 53014
// result := true end ;
53006: LD_ADDR_VAR 0 3
53010: PUSH
53011: LD_INT 1
53013: ST_TO_ADDR
// end ;
53014: LD_VAR 0 3
53018: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53019: LD_INT 0
53021: PPUSH
// result := false ;
53022: LD_ADDR_VAR 0 4
53026: PUSH
53027: LD_INT 0
53029: ST_TO_ADDR
// if GetTaskList ( unit ) then
53030: LD_VAR 0 1
53034: PPUSH
53035: CALL_OW 437
53039: IFFALSE 53126
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53041: LD_STRING M
53043: PUSH
53044: LD_VAR 0 1
53048: PPUSH
53049: CALL_OW 437
53053: PUSH
53054: LD_INT 1
53056: ARRAY
53057: PUSH
53058: LD_INT 1
53060: ARRAY
53061: EQUAL
53062: IFFALSE 53089
53064: PUSH
53065: LD_VAR 0 2
53069: PUSH
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL_OW 437
53079: PUSH
53080: LD_INT 1
53082: ARRAY
53083: PUSH
53084: LD_INT 2
53086: ARRAY
53087: EQUAL
53088: AND
53089: IFFALSE 53116
53091: PUSH
53092: LD_VAR 0 3
53096: PUSH
53097: LD_VAR 0 1
53101: PPUSH
53102: CALL_OW 437
53106: PUSH
53107: LD_INT 1
53109: ARRAY
53110: PUSH
53111: LD_INT 3
53113: ARRAY
53114: EQUAL
53115: AND
53116: IFFALSE 53126
// result := true ;
53118: LD_ADDR_VAR 0 4
53122: PUSH
53123: LD_INT 1
53125: ST_TO_ADDR
// end ; end ;
53126: LD_VAR 0 4
53130: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53131: LD_INT 0
53133: PPUSH
53134: PPUSH
53135: PPUSH
53136: PPUSH
// if not unit or not area then
53137: LD_VAR 0 1
53141: NOT
53142: IFTRUE 53151
53144: PUSH
53145: LD_VAR 0 2
53149: NOT
53150: OR
53151: IFFALSE 53155
// exit ;
53153: GO 53331
// tmp := AreaToList ( area , i ) ;
53155: LD_ADDR_VAR 0 6
53159: PUSH
53160: LD_VAR 0 2
53164: PPUSH
53165: LD_VAR 0 5
53169: PPUSH
53170: CALL_OW 517
53174: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53175: LD_ADDR_VAR 0 5
53179: PUSH
53180: DOUBLE
53181: LD_INT 1
53183: DEC
53184: ST_TO_ADDR
53185: LD_VAR 0 6
53189: PUSH
53190: LD_INT 1
53192: ARRAY
53193: PUSH
53194: FOR_TO
53195: IFFALSE 53329
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53197: LD_ADDR_VAR 0 7
53201: PUSH
53202: LD_VAR 0 6
53206: PUSH
53207: LD_INT 1
53209: ARRAY
53210: PUSH
53211: LD_VAR 0 5
53215: ARRAY
53216: PUSH
53217: LD_VAR 0 6
53221: PUSH
53222: LD_INT 2
53224: ARRAY
53225: PUSH
53226: LD_VAR 0 5
53230: ARRAY
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53236: LD_INT 92
53238: PUSH
53239: LD_VAR 0 7
53243: PUSH
53244: LD_INT 1
53246: ARRAY
53247: PUSH
53248: LD_VAR 0 7
53252: PUSH
53253: LD_INT 2
53255: ARRAY
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: PPUSH
53266: CALL_OW 69
53270: PUSH
53271: LD_INT 0
53273: EQUAL
53274: IFFALSE 53327
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53276: LD_VAR 0 1
53280: PPUSH
53281: LD_VAR 0 7
53285: PUSH
53286: LD_INT 1
53288: ARRAY
53289: PPUSH
53290: LD_VAR 0 7
53294: PUSH
53295: LD_INT 2
53297: ARRAY
53298: PPUSH
53299: LD_VAR 0 3
53303: PPUSH
53304: CALL_OW 48
// result := IsPlaced ( unit ) ;
53308: LD_ADDR_VAR 0 4
53312: PUSH
53313: LD_VAR 0 1
53317: PPUSH
53318: CALL_OW 305
53322: ST_TO_ADDR
// exit ;
53323: POP
53324: POP
53325: GO 53331
// end ; end ;
53327: GO 53194
53329: POP
53330: POP
// end ;
53331: LD_VAR 0 4
53335: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53336: LD_INT 0
53338: PPUSH
53339: PPUSH
53340: PPUSH
// if not side or side > 8 then
53341: LD_VAR 0 1
53345: NOT
53346: IFTRUE 53358
53348: PUSH
53349: LD_VAR 0 1
53353: PUSH
53354: LD_INT 8
53356: GREATER
53357: OR
53358: IFFALSE 53362
// exit ;
53360: GO 53549
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53362: LD_ADDR_VAR 0 4
53366: PUSH
53367: LD_INT 22
53369: PUSH
53370: LD_VAR 0 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 21
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PPUSH
53393: CALL_OW 69
53397: ST_TO_ADDR
// if not tmp then
53398: LD_VAR 0 4
53402: NOT
53403: IFFALSE 53407
// exit ;
53405: GO 53549
// enable_addtolog := true ;
53407: LD_ADDR_OWVAR 81
53411: PUSH
53412: LD_INT 1
53414: ST_TO_ADDR
// AddToLog ( [ ) ;
53415: LD_STRING [
53417: PPUSH
53418: CALL_OW 561
// for i in tmp do
53422: LD_ADDR_VAR 0 3
53426: PUSH
53427: LD_VAR 0 4
53431: PUSH
53432: FOR_IN
53433: IFFALSE 53540
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53435: LD_STRING [
53437: PUSH
53438: LD_VAR 0 3
53442: PPUSH
53443: CALL_OW 266
53447: STR
53448: PUSH
53449: LD_STRING , 
53451: STR
53452: PUSH
53453: LD_VAR 0 3
53457: PPUSH
53458: CALL_OW 250
53462: STR
53463: PUSH
53464: LD_STRING , 
53466: STR
53467: PUSH
53468: LD_VAR 0 3
53472: PPUSH
53473: CALL_OW 251
53477: STR
53478: PUSH
53479: LD_STRING , 
53481: STR
53482: PUSH
53483: LD_VAR 0 3
53487: PPUSH
53488: CALL_OW 254
53492: STR
53493: PUSH
53494: LD_STRING , 
53496: STR
53497: PUSH
53498: LD_VAR 0 3
53502: PPUSH
53503: LD_INT 1
53505: PPUSH
53506: CALL_OW 268
53510: STR
53511: PUSH
53512: LD_STRING , 
53514: STR
53515: PUSH
53516: LD_VAR 0 3
53520: PPUSH
53521: LD_INT 2
53523: PPUSH
53524: CALL_OW 268
53528: STR
53529: PUSH
53530: LD_STRING ],
53532: STR
53533: PPUSH
53534: CALL_OW 561
// end ;
53538: GO 53432
53540: POP
53541: POP
// AddToLog ( ]; ) ;
53542: LD_STRING ];
53544: PPUSH
53545: CALL_OW 561
// end ;
53549: LD_VAR 0 2
53553: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53554: LD_INT 0
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
53560: PPUSH
// if not area or not rate or not max then
53561: LD_VAR 0 1
53565: NOT
53566: IFTRUE 53575
53568: PUSH
53569: LD_VAR 0 2
53573: NOT
53574: OR
53575: IFTRUE 53584
53577: PUSH
53578: LD_VAR 0 4
53582: NOT
53583: OR
53584: IFFALSE 53588
// exit ;
53586: GO 53777
// while 1 do
53588: LD_INT 1
53590: IFFALSE 53777
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53592: LD_ADDR_VAR 0 9
53596: PUSH
53597: LD_VAR 0 1
53601: PPUSH
53602: LD_INT 1
53604: PPUSH
53605: CALL_OW 287
53609: PUSH
53610: LD_INT 10
53612: MUL
53613: ST_TO_ADDR
// r := rate / 10 ;
53614: LD_ADDR_VAR 0 7
53618: PUSH
53619: LD_VAR 0 2
53623: PUSH
53624: LD_INT 10
53626: DIVREAL
53627: ST_TO_ADDR
// time := 1 1$00 ;
53628: LD_ADDR_VAR 0 8
53632: PUSH
53633: LD_INT 2100
53635: ST_TO_ADDR
// if amount < min then
53636: LD_VAR 0 9
53640: PUSH
53641: LD_VAR 0 3
53645: LESS
53646: IFFALSE 53664
// r := r * 2 else
53648: LD_ADDR_VAR 0 7
53652: PUSH
53653: LD_VAR 0 7
53657: PUSH
53658: LD_INT 2
53660: MUL
53661: ST_TO_ADDR
53662: GO 53690
// if amount > max then
53664: LD_VAR 0 9
53668: PUSH
53669: LD_VAR 0 4
53673: GREATER
53674: IFFALSE 53690
// r := r / 2 ;
53676: LD_ADDR_VAR 0 7
53680: PUSH
53681: LD_VAR 0 7
53685: PUSH
53686: LD_INT 2
53688: DIVREAL
53689: ST_TO_ADDR
// time := time / r ;
53690: LD_ADDR_VAR 0 8
53694: PUSH
53695: LD_VAR 0 8
53699: PUSH
53700: LD_VAR 0 7
53704: DIVREAL
53705: ST_TO_ADDR
// if time < 0 then
53706: LD_VAR 0 8
53710: PUSH
53711: LD_INT 0
53713: LESS
53714: IFFALSE 53731
// time := time * - 1 ;
53716: LD_ADDR_VAR 0 8
53720: PUSH
53721: LD_VAR 0 8
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: MUL
53730: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53731: LD_VAR 0 8
53735: PUSH
53736: LD_INT 35
53738: PPUSH
53739: LD_INT 875
53741: PPUSH
53742: CALL_OW 12
53746: PLUS
53747: PPUSH
53748: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53752: LD_INT 1
53754: PPUSH
53755: LD_INT 5
53757: PPUSH
53758: CALL_OW 12
53762: PPUSH
53763: LD_VAR 0 1
53767: PPUSH
53768: LD_INT 1
53770: PPUSH
53771: CALL_OW 55
// end ;
53775: GO 53588
// end ;
53777: LD_VAR 0 5
53781: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53782: LD_INT 0
53784: PPUSH
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
53789: PPUSH
53790: PPUSH
53791: PPUSH
// if not turrets or not factories then
53792: LD_VAR 0 1
53796: NOT
53797: IFTRUE 53806
53799: PUSH
53800: LD_VAR 0 2
53804: NOT
53805: OR
53806: IFFALSE 53810
// exit ;
53808: GO 54117
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53810: LD_ADDR_VAR 0 10
53814: PUSH
53815: LD_INT 5
53817: PUSH
53818: LD_INT 6
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: LD_INT 4
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: LD_INT 5
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 24
53852: PUSH
53853: LD_INT 25
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 23
53862: PUSH
53863: LD_INT 27
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 42
53876: PUSH
53877: LD_INT 43
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 44
53886: PUSH
53887: LD_INT 46
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 45
53896: PUSH
53897: LD_INT 47
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: ST_TO_ADDR
// result := [ ] ;
53914: LD_ADDR_VAR 0 3
53918: PUSH
53919: EMPTY
53920: ST_TO_ADDR
// for i in turrets do
53921: LD_ADDR_VAR 0 4
53925: PUSH
53926: LD_VAR 0 1
53930: PUSH
53931: FOR_IN
53932: IFFALSE 54115
// begin nat := GetNation ( i ) ;
53934: LD_ADDR_VAR 0 7
53938: PUSH
53939: LD_VAR 0 4
53943: PPUSH
53944: CALL_OW 248
53948: ST_TO_ADDR
// weapon := 0 ;
53949: LD_ADDR_VAR 0 8
53953: PUSH
53954: LD_INT 0
53956: ST_TO_ADDR
// if not nat then
53957: LD_VAR 0 7
53961: NOT
53962: IFFALSE 53966
// continue ;
53964: GO 53931
// for j in list [ nat ] do
53966: LD_ADDR_VAR 0 5
53970: PUSH
53971: LD_VAR 0 10
53975: PUSH
53976: LD_VAR 0 7
53980: ARRAY
53981: PUSH
53982: FOR_IN
53983: IFFALSE 54024
// if GetBWeapon ( i ) = j [ 1 ] then
53985: LD_VAR 0 4
53989: PPUSH
53990: CALL_OW 269
53994: PUSH
53995: LD_VAR 0 5
53999: PUSH
54000: LD_INT 1
54002: ARRAY
54003: EQUAL
54004: IFFALSE 54022
// begin weapon := j [ 2 ] ;
54006: LD_ADDR_VAR 0 8
54010: PUSH
54011: LD_VAR 0 5
54015: PUSH
54016: LD_INT 2
54018: ARRAY
54019: ST_TO_ADDR
// break ;
54020: GO 54024
// end ;
54022: GO 53982
54024: POP
54025: POP
// if not weapon then
54026: LD_VAR 0 8
54030: NOT
54031: IFFALSE 54035
// continue ;
54033: GO 53931
// for k in factories do
54035: LD_ADDR_VAR 0 6
54039: PUSH
54040: LD_VAR 0 2
54044: PUSH
54045: FOR_IN
54046: IFFALSE 54111
// begin weapons := AvailableWeaponList ( k ) ;
54048: LD_ADDR_VAR 0 9
54052: PUSH
54053: LD_VAR 0 6
54057: PPUSH
54058: CALL_OW 478
54062: ST_TO_ADDR
// if not weapons then
54063: LD_VAR 0 9
54067: NOT
54068: IFFALSE 54072
// continue ;
54070: GO 54045
// if weapon in weapons then
54072: LD_VAR 0 8
54076: PUSH
54077: LD_VAR 0 9
54081: IN
54082: IFFALSE 54109
// begin result := [ i , weapon ] ;
54084: LD_ADDR_VAR 0 3
54088: PUSH
54089: LD_VAR 0 4
54093: PUSH
54094: LD_VAR 0 8
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: ST_TO_ADDR
// exit ;
54103: POP
54104: POP
54105: POP
54106: POP
54107: GO 54117
// end ; end ;
54109: GO 54045
54111: POP
54112: POP
// end ;
54113: GO 53931
54115: POP
54116: POP
// end ;
54117: LD_VAR 0 3
54121: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54122: LD_INT 0
54124: PPUSH
// if not side or side > 8 then
54125: LD_VAR 0 3
54129: NOT
54130: IFTRUE 54142
54132: PUSH
54133: LD_VAR 0 3
54137: PUSH
54138: LD_INT 8
54140: GREATER
54141: OR
54142: IFFALSE 54146
// exit ;
54144: GO 54205
// if not range then
54146: LD_VAR 0 4
54150: NOT
54151: IFFALSE 54162
// range := - 12 ;
54153: LD_ADDR_VAR 0 4
54157: PUSH
54158: LD_INT 12
54160: NEG
54161: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54162: LD_VAR 0 1
54166: PPUSH
54167: LD_VAR 0 2
54171: PPUSH
54172: LD_VAR 0 3
54176: PPUSH
54177: LD_VAR 0 4
54181: PPUSH
54182: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54186: LD_VAR 0 1
54190: PPUSH
54191: LD_VAR 0 2
54195: PPUSH
54196: LD_VAR 0 3
54200: PPUSH
54201: CALL_OW 331
// end ;
54205: LD_VAR 0 5
54209: RET
// export function Video ( mode ) ; begin
54210: LD_INT 0
54212: PPUSH
// ingame_video = mode ;
54213: LD_ADDR_OWVAR 52
54217: PUSH
54218: LD_VAR 0 1
54222: ST_TO_ADDR
// interface_hidden = mode ;
54223: LD_ADDR_OWVAR 54
54227: PUSH
54228: LD_VAR 0 1
54232: ST_TO_ADDR
// end ;
54233: LD_VAR 0 2
54237: RET
// export function Join ( array , element ) ; begin
54238: LD_INT 0
54240: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54241: LD_ADDR_VAR 0 3
54245: PUSH
54246: LD_VAR 0 1
54250: PPUSH
54251: LD_VAR 0 1
54255: PUSH
54256: LD_INT 1
54258: PLUS
54259: PPUSH
54260: LD_VAR 0 2
54264: PPUSH
54265: CALL_OW 1
54269: ST_TO_ADDR
// end ;
54270: LD_VAR 0 3
54274: RET
// export function JoinUnion ( array , element ) ; begin
54275: LD_INT 0
54277: PPUSH
// result := array union element ;
54278: LD_ADDR_VAR 0 3
54282: PUSH
54283: LD_VAR 0 1
54287: PUSH
54288: LD_VAR 0 2
54292: UNION
54293: ST_TO_ADDR
// end ;
54294: LD_VAR 0 3
54298: RET
// export function GetBehemoths ( side ) ; begin
54299: LD_INT 0
54301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54302: LD_ADDR_VAR 0 2
54306: PUSH
54307: LD_INT 22
54309: PUSH
54310: LD_VAR 0 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 31
54321: PUSH
54322: LD_INT 25
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PPUSH
54333: CALL_OW 69
54337: ST_TO_ADDR
// end ;
54338: LD_VAR 0 2
54342: RET
// export function Shuffle ( array ) ; var i , index ; begin
54343: LD_INT 0
54345: PPUSH
54346: PPUSH
54347: PPUSH
// result := [ ] ;
54348: LD_ADDR_VAR 0 2
54352: PUSH
54353: EMPTY
54354: ST_TO_ADDR
// if not array then
54355: LD_VAR 0 1
54359: NOT
54360: IFFALSE 54364
// exit ;
54362: GO 54463
// Randomize ;
54364: CALL_OW 10
// for i = array downto 1 do
54368: LD_ADDR_VAR 0 3
54372: PUSH
54373: DOUBLE
54374: LD_VAR 0 1
54378: INC
54379: ST_TO_ADDR
54380: LD_INT 1
54382: PUSH
54383: FOR_DOWNTO
54384: IFFALSE 54461
// begin index := rand ( 1 , array ) ;
54386: LD_ADDR_VAR 0 4
54390: PUSH
54391: LD_INT 1
54393: PPUSH
54394: LD_VAR 0 1
54398: PPUSH
54399: CALL_OW 12
54403: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54404: LD_ADDR_VAR 0 2
54408: PUSH
54409: LD_VAR 0 2
54413: PPUSH
54414: LD_VAR 0 2
54418: PUSH
54419: LD_INT 1
54421: PLUS
54422: PPUSH
54423: LD_VAR 0 1
54427: PUSH
54428: LD_VAR 0 4
54432: ARRAY
54433: PPUSH
54434: CALL_OW 2
54438: ST_TO_ADDR
// array := Delete ( array , index ) ;
54439: LD_ADDR_VAR 0 1
54443: PUSH
54444: LD_VAR 0 1
54448: PPUSH
54449: LD_VAR 0 4
54453: PPUSH
54454: CALL_OW 3
54458: ST_TO_ADDR
// end ;
54459: GO 54383
54461: POP
54462: POP
// end ;
54463: LD_VAR 0 2
54467: RET
// export function GetBaseMaterials ( base ) ; begin
54468: LD_INT 0
54470: PPUSH
// result := [ 0 , 0 , 0 ] ;
54471: LD_ADDR_VAR 0 2
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: LIST
54489: ST_TO_ADDR
// if not base then
54490: LD_VAR 0 1
54494: NOT
54495: IFFALSE 54499
// exit ;
54497: GO 54548
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54499: LD_ADDR_VAR 0 2
54503: PUSH
54504: LD_VAR 0 1
54508: PPUSH
54509: LD_INT 1
54511: PPUSH
54512: CALL_OW 275
54516: PUSH
54517: LD_VAR 0 1
54521: PPUSH
54522: LD_INT 2
54524: PPUSH
54525: CALL_OW 275
54529: PUSH
54530: LD_VAR 0 1
54534: PPUSH
54535: LD_INT 3
54537: PPUSH
54538: CALL_OW 275
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// end ;
54548: LD_VAR 0 2
54552: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54553: LD_INT 0
54555: PPUSH
54556: PPUSH
// result := array ;
54557: LD_ADDR_VAR 0 3
54561: PUSH
54562: LD_VAR 0 1
54566: ST_TO_ADDR
// if size >= result then
54567: LD_VAR 0 2
54571: PUSH
54572: LD_VAR 0 3
54576: GREATEREQUAL
54577: IFFALSE 54581
// exit ;
54579: GO 54631
// if size then
54581: LD_VAR 0 2
54585: IFFALSE 54631
// for i := array downto size do
54587: LD_ADDR_VAR 0 4
54591: PUSH
54592: DOUBLE
54593: LD_VAR 0 1
54597: INC
54598: ST_TO_ADDR
54599: LD_VAR 0 2
54603: PUSH
54604: FOR_DOWNTO
54605: IFFALSE 54629
// result := Delete ( result , result ) ;
54607: LD_ADDR_VAR 0 3
54611: PUSH
54612: LD_VAR 0 3
54616: PPUSH
54617: LD_VAR 0 3
54621: PPUSH
54622: CALL_OW 3
54626: ST_TO_ADDR
54627: GO 54604
54629: POP
54630: POP
// end ;
54631: LD_VAR 0 3
54635: RET
// export function ComExit ( unit ) ; var tmp ; begin
54636: LD_INT 0
54638: PPUSH
54639: PPUSH
// if not IsInUnit ( unit ) then
54640: LD_VAR 0 1
54644: PPUSH
54645: CALL_OW 310
54649: NOT
54650: IFFALSE 54654
// exit ;
54652: GO 54714
// tmp := IsInUnit ( unit ) ;
54654: LD_ADDR_VAR 0 3
54658: PUSH
54659: LD_VAR 0 1
54663: PPUSH
54664: CALL_OW 310
54668: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54669: LD_VAR 0 3
54673: PPUSH
54674: CALL_OW 247
54678: PUSH
54679: LD_INT 2
54681: EQUAL
54682: IFFALSE 54695
// ComExitVehicle ( unit ) else
54684: LD_VAR 0 1
54688: PPUSH
54689: CALL_OW 121
54693: GO 54704
// ComExitBuilding ( unit ) ;
54695: LD_VAR 0 1
54699: PPUSH
54700: CALL_OW 122
// result := tmp ;
54704: LD_ADDR_VAR 0 2
54708: PUSH
54709: LD_VAR 0 3
54713: ST_TO_ADDR
// end ;
54714: LD_VAR 0 2
54718: RET
// export function ComExitAll ( units ) ; var i ; begin
54719: LD_INT 0
54721: PPUSH
54722: PPUSH
// if not units then
54723: LD_VAR 0 1
54727: NOT
54728: IFFALSE 54732
// exit ;
54730: GO 54758
// for i in units do
54732: LD_ADDR_VAR 0 3
54736: PUSH
54737: LD_VAR 0 1
54741: PUSH
54742: FOR_IN
54743: IFFALSE 54756
// ComExit ( i ) ;
54745: LD_VAR 0 3
54749: PPUSH
54750: CALL 54636 0 1
54754: GO 54742
54756: POP
54757: POP
// end ;
54758: LD_VAR 0 2
54762: RET
// export function ResetHc ; begin
54763: LD_INT 0
54765: PPUSH
// InitHc ;
54766: CALL_OW 19
// hc_importance := 0 ;
54770: LD_ADDR_OWVAR 32
54774: PUSH
54775: LD_INT 0
54777: ST_TO_ADDR
// end ;
54778: LD_VAR 0 1
54782: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54783: LD_INT 0
54785: PPUSH
54786: PPUSH
54787: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54788: LD_ADDR_VAR 0 6
54792: PUSH
54793: LD_VAR 0 1
54797: PUSH
54798: LD_VAR 0 3
54802: PLUS
54803: PUSH
54804: LD_INT 2
54806: DIV
54807: ST_TO_ADDR
// if _x < 0 then
54808: LD_VAR 0 6
54812: PUSH
54813: LD_INT 0
54815: LESS
54816: IFFALSE 54833
// _x := _x * - 1 ;
54818: LD_ADDR_VAR 0 6
54822: PUSH
54823: LD_VAR 0 6
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: MUL
54832: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54833: LD_ADDR_VAR 0 7
54837: PUSH
54838: LD_VAR 0 2
54842: PUSH
54843: LD_VAR 0 4
54847: PLUS
54848: PUSH
54849: LD_INT 2
54851: DIV
54852: ST_TO_ADDR
// if _y < 0 then
54853: LD_VAR 0 7
54857: PUSH
54858: LD_INT 0
54860: LESS
54861: IFFALSE 54878
// _y := _y * - 1 ;
54863: LD_ADDR_VAR 0 7
54867: PUSH
54868: LD_VAR 0 7
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: MUL
54877: ST_TO_ADDR
// result := [ _x , _y ] ;
54878: LD_ADDR_VAR 0 5
54882: PUSH
54883: LD_VAR 0 6
54887: PUSH
54888: LD_VAR 0 7
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: ST_TO_ADDR
// end ;
54897: LD_VAR 0 5
54901: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54902: LD_INT 0
54904: PPUSH
54905: PPUSH
54906: PPUSH
54907: PPUSH
// task := GetTaskList ( unit ) ;
54908: LD_ADDR_VAR 0 7
54912: PUSH
54913: LD_VAR 0 1
54917: PPUSH
54918: CALL_OW 437
54922: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54923: LD_VAR 0 7
54927: NOT
54928: IFFALSE 54947
54930: PUSH
54931: LD_VAR 0 1
54935: PPUSH
54936: LD_VAR 0 2
54940: PPUSH
54941: CALL_OW 308
54945: NOT
54946: AND
54947: IFFALSE 54951
// exit ;
54949: GO 55069
// if IsInArea ( unit , area ) then
54951: LD_VAR 0 1
54955: PPUSH
54956: LD_VAR 0 2
54960: PPUSH
54961: CALL_OW 308
54965: IFFALSE 54983
// begin ComMoveToArea ( unit , goAway ) ;
54967: LD_VAR 0 1
54971: PPUSH
54972: LD_VAR 0 3
54976: PPUSH
54977: CALL_OW 113
// exit ;
54981: GO 55069
// end ; if task [ 1 ] [ 1 ] <> M then
54983: LD_VAR 0 7
54987: PUSH
54988: LD_INT 1
54990: ARRAY
54991: PUSH
54992: LD_INT 1
54994: ARRAY
54995: PUSH
54996: LD_STRING M
54998: NONEQUAL
54999: IFFALSE 55003
// exit ;
55001: GO 55069
// x := task [ 1 ] [ 2 ] ;
55003: LD_ADDR_VAR 0 5
55007: PUSH
55008: LD_VAR 0 7
55012: PUSH
55013: LD_INT 1
55015: ARRAY
55016: PUSH
55017: LD_INT 2
55019: ARRAY
55020: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55021: LD_ADDR_VAR 0 6
55025: PUSH
55026: LD_VAR 0 7
55030: PUSH
55031: LD_INT 1
55033: ARRAY
55034: PUSH
55035: LD_INT 3
55037: ARRAY
55038: ST_TO_ADDR
// if InArea ( x , y , area ) then
55039: LD_VAR 0 5
55043: PPUSH
55044: LD_VAR 0 6
55048: PPUSH
55049: LD_VAR 0 2
55053: PPUSH
55054: CALL_OW 309
55058: IFFALSE 55069
// ComStop ( unit ) ;
55060: LD_VAR 0 1
55064: PPUSH
55065: CALL_OW 141
// end ;
55069: LD_VAR 0 4
55073: RET
// export function Abs ( value ) ; begin
55074: LD_INT 0
55076: PPUSH
// result := value ;
55077: LD_ADDR_VAR 0 2
55081: PUSH
55082: LD_VAR 0 1
55086: ST_TO_ADDR
// if value < 0 then
55087: LD_VAR 0 1
55091: PUSH
55092: LD_INT 0
55094: LESS
55095: IFFALSE 55112
// result := value * - 1 ;
55097: LD_ADDR_VAR 0 2
55101: PUSH
55102: LD_VAR 0 1
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: MUL
55111: ST_TO_ADDR
// end ;
55112: LD_VAR 0 2
55116: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55117: LD_INT 0
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
// if not unit or not building then
55127: LD_VAR 0 1
55131: NOT
55132: IFTRUE 55141
55134: PUSH
55135: LD_VAR 0 2
55139: NOT
55140: OR
55141: IFFALSE 55145
// exit ;
55143: GO 55373
// x := GetX ( building ) ;
55145: LD_ADDR_VAR 0 4
55149: PUSH
55150: LD_VAR 0 2
55154: PPUSH
55155: CALL_OW 250
55159: ST_TO_ADDR
// y := GetY ( building ) ;
55160: LD_ADDR_VAR 0 6
55164: PUSH
55165: LD_VAR 0 2
55169: PPUSH
55170: CALL_OW 251
55174: ST_TO_ADDR
// d := GetDir ( building ) ;
55175: LD_ADDR_VAR 0 8
55179: PUSH
55180: LD_VAR 0 2
55184: PPUSH
55185: CALL_OW 254
55189: ST_TO_ADDR
// r := 4 ;
55190: LD_ADDR_VAR 0 9
55194: PUSH
55195: LD_INT 4
55197: ST_TO_ADDR
// for i := 1 to 5 do
55198: LD_ADDR_VAR 0 10
55202: PUSH
55203: DOUBLE
55204: LD_INT 1
55206: DEC
55207: ST_TO_ADDR
55208: LD_INT 5
55210: PUSH
55211: FOR_TO
55212: IFFALSE 55371
// begin _x := ShiftX ( x , d , r + i ) ;
55214: LD_ADDR_VAR 0 5
55218: PUSH
55219: LD_VAR 0 4
55223: PPUSH
55224: LD_VAR 0 8
55228: PPUSH
55229: LD_VAR 0 9
55233: PUSH
55234: LD_VAR 0 10
55238: PLUS
55239: PPUSH
55240: CALL_OW 272
55244: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55245: LD_ADDR_VAR 0 7
55249: PUSH
55250: LD_VAR 0 6
55254: PPUSH
55255: LD_VAR 0 8
55259: PPUSH
55260: LD_VAR 0 9
55264: PUSH
55265: LD_VAR 0 10
55269: PLUS
55270: PPUSH
55271: CALL_OW 273
55275: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55276: LD_VAR 0 5
55280: PPUSH
55281: LD_VAR 0 7
55285: PPUSH
55286: CALL_OW 488
55290: IFFALSE 55325
55292: PUSH
55293: LD_VAR 0 5
55297: PPUSH
55298: LD_VAR 0 7
55302: PPUSH
55303: CALL_OW 428
55307: PPUSH
55308: CALL_OW 247
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: IN
55323: NOT
55324: AND
55325: IFFALSE 55369
// begin ComMoveXY ( unit , _x , _y ) ;
55327: LD_VAR 0 1
55331: PPUSH
55332: LD_VAR 0 5
55336: PPUSH
55337: LD_VAR 0 7
55341: PPUSH
55342: CALL_OW 111
// result := [ _x , _y ] ;
55346: LD_ADDR_VAR 0 3
55350: PUSH
55351: LD_VAR 0 5
55355: PUSH
55356: LD_VAR 0 7
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: ST_TO_ADDR
// exit ;
55365: POP
55366: POP
55367: GO 55373
// end ; end ;
55369: GO 55211
55371: POP
55372: POP
// end ;
55373: LD_VAR 0 3
55377: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55378: LD_INT 0
55380: PPUSH
55381: PPUSH
55382: PPUSH
// result := 0 ;
55383: LD_ADDR_VAR 0 3
55387: PUSH
55388: LD_INT 0
55390: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55391: LD_VAR 0 1
55395: PUSH
55396: LD_INT 0
55398: LESS
55399: IFTRUE 55411
55401: PUSH
55402: LD_VAR 0 1
55406: PUSH
55407: LD_INT 8
55409: GREATER
55410: OR
55411: IFTRUE 55423
55413: PUSH
55414: LD_VAR 0 2
55418: PUSH
55419: LD_INT 0
55421: LESS
55422: OR
55423: IFTRUE 55435
55425: PUSH
55426: LD_VAR 0 2
55430: PUSH
55431: LD_INT 8
55433: GREATER
55434: OR
55435: IFFALSE 55439
// exit ;
55437: GO 55514
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55439: LD_ADDR_VAR 0 4
55443: PUSH
55444: LD_INT 22
55446: PUSH
55447: LD_VAR 0 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PPUSH
55456: CALL_OW 69
55460: PUSH
55461: FOR_IN
55462: IFFALSE 55512
// begin un := UnitShoot ( i ) ;
55464: LD_ADDR_VAR 0 5
55468: PUSH
55469: LD_VAR 0 4
55473: PPUSH
55474: CALL_OW 504
55478: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55479: LD_VAR 0 5
55483: PPUSH
55484: CALL_OW 255
55488: PUSH
55489: LD_VAR 0 1
55493: EQUAL
55494: IFFALSE 55510
// begin result := un ;
55496: LD_ADDR_VAR 0 3
55500: PUSH
55501: LD_VAR 0 5
55505: ST_TO_ADDR
// exit ;
55506: POP
55507: POP
55508: GO 55514
// end ; end ;
55510: GO 55461
55512: POP
55513: POP
// end ;
55514: LD_VAR 0 3
55518: RET
// export function GetCargoBay ( units ) ; begin
55519: LD_INT 0
55521: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55522: LD_ADDR_VAR 0 2
55526: PUSH
55527: LD_VAR 0 1
55531: PPUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 34
55537: PUSH
55538: LD_INT 12
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 34
55547: PUSH
55548: LD_INT 51
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 34
55557: PUSH
55558: LD_INT 32
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 34
55567: PUSH
55568: LD_INT 89
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: PPUSH
55582: CALL_OW 72
55586: ST_TO_ADDR
// end ;
55587: LD_VAR 0 2
55591: RET
// export function Negate ( value ) ; begin
55592: LD_INT 0
55594: PPUSH
// result := not value ;
55595: LD_ADDR_VAR 0 2
55599: PUSH
55600: LD_VAR 0 1
55604: NOT
55605: ST_TO_ADDR
// end ;
55606: LD_VAR 0 2
55610: RET
// export function Inc ( value ) ; begin
55611: LD_INT 0
55613: PPUSH
// result := value + 1 ;
55614: LD_ADDR_VAR 0 2
55618: PUSH
55619: LD_VAR 0 1
55623: PUSH
55624: LD_INT 1
55626: PLUS
55627: ST_TO_ADDR
// end ;
55628: LD_VAR 0 2
55632: RET
// export function Dec ( value ) ; begin
55633: LD_INT 0
55635: PPUSH
// result := value - 1 ;
55636: LD_ADDR_VAR 0 2
55640: PUSH
55641: LD_VAR 0 1
55645: PUSH
55646: LD_INT 1
55648: MINUS
55649: ST_TO_ADDR
// end ;
55650: LD_VAR 0 2
55654: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55655: LD_INT 0
55657: PPUSH
55658: PPUSH
55659: PPUSH
55660: PPUSH
55661: PPUSH
55662: PPUSH
55663: PPUSH
55664: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55665: LD_VAR 0 1
55669: PPUSH
55670: LD_VAR 0 2
55674: PPUSH
55675: CALL_OW 488
55679: NOT
55680: IFTRUE 55699
55682: PUSH
55683: LD_VAR 0 3
55687: PPUSH
55688: LD_VAR 0 4
55692: PPUSH
55693: CALL_OW 488
55697: NOT
55698: OR
55699: IFFALSE 55712
// begin result := - 1 ;
55701: LD_ADDR_VAR 0 5
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: ST_TO_ADDR
// exit ;
55710: GO 55947
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55712: LD_ADDR_VAR 0 12
55716: PUSH
55717: LD_VAR 0 1
55721: PPUSH
55722: LD_VAR 0 2
55726: PPUSH
55727: LD_VAR 0 3
55731: PPUSH
55732: LD_VAR 0 4
55736: PPUSH
55737: CALL 54783 0 4
55741: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55742: LD_ADDR_VAR 0 11
55746: PUSH
55747: LD_VAR 0 1
55751: PPUSH
55752: LD_VAR 0 2
55756: PPUSH
55757: LD_VAR 0 12
55761: PUSH
55762: LD_INT 1
55764: ARRAY
55765: PPUSH
55766: LD_VAR 0 12
55770: PUSH
55771: LD_INT 2
55773: ARRAY
55774: PPUSH
55775: CALL_OW 298
55779: ST_TO_ADDR
// distance := 9999 ;
55780: LD_ADDR_VAR 0 10
55784: PUSH
55785: LD_INT 9999
55787: ST_TO_ADDR
// for i := 0 to 5 do
55788: LD_ADDR_VAR 0 6
55792: PUSH
55793: DOUBLE
55794: LD_INT 0
55796: DEC
55797: ST_TO_ADDR
55798: LD_INT 5
55800: PUSH
55801: FOR_TO
55802: IFFALSE 55945
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55804: LD_ADDR_VAR 0 7
55808: PUSH
55809: LD_VAR 0 1
55813: PPUSH
55814: LD_VAR 0 6
55818: PPUSH
55819: LD_VAR 0 11
55823: PPUSH
55824: CALL_OW 272
55828: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55829: LD_ADDR_VAR 0 8
55833: PUSH
55834: LD_VAR 0 2
55838: PPUSH
55839: LD_VAR 0 6
55843: PPUSH
55844: LD_VAR 0 11
55848: PPUSH
55849: CALL_OW 273
55853: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55854: LD_VAR 0 7
55858: PPUSH
55859: LD_VAR 0 8
55863: PPUSH
55864: CALL_OW 488
55868: NOT
55869: IFFALSE 55873
// continue ;
55871: GO 55801
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55873: LD_ADDR_VAR 0 9
55877: PUSH
55878: LD_VAR 0 12
55882: PUSH
55883: LD_INT 1
55885: ARRAY
55886: PPUSH
55887: LD_VAR 0 12
55891: PUSH
55892: LD_INT 2
55894: ARRAY
55895: PPUSH
55896: LD_VAR 0 7
55900: PPUSH
55901: LD_VAR 0 8
55905: PPUSH
55906: CALL_OW 298
55910: ST_TO_ADDR
// if tmp < distance then
55911: LD_VAR 0 9
55915: PUSH
55916: LD_VAR 0 10
55920: LESS
55921: IFFALSE 55943
// begin result := i ;
55923: LD_ADDR_VAR 0 5
55927: PUSH
55928: LD_VAR 0 6
55932: ST_TO_ADDR
// distance := tmp ;
55933: LD_ADDR_VAR 0 10
55937: PUSH
55938: LD_VAR 0 9
55942: ST_TO_ADDR
// end ; end ;
55943: GO 55801
55945: POP
55946: POP
// end ;
55947: LD_VAR 0 5
55951: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55952: LD_INT 0
55954: PPUSH
55955: PPUSH
// if not driver or not IsInUnit ( driver ) then
55956: LD_VAR 0 1
55960: NOT
55961: IFTRUE 55975
55963: PUSH
55964: LD_VAR 0 1
55968: PPUSH
55969: CALL_OW 310
55973: NOT
55974: OR
55975: IFFALSE 55979
// exit ;
55977: GO 56069
// vehicle := IsInUnit ( driver ) ;
55979: LD_ADDR_VAR 0 3
55983: PUSH
55984: LD_VAR 0 1
55988: PPUSH
55989: CALL_OW 310
55993: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55994: LD_VAR 0 1
55998: PPUSH
55999: LD_STRING \
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: PUSH
56029: LD_STRING E
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_VAR 0 3
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PPUSH
56065: CALL_OW 446
// end ;
56069: LD_VAR 0 2
56073: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56074: LD_INT 0
56076: PPUSH
56077: PPUSH
// if not driver or not IsInUnit ( driver ) then
56078: LD_VAR 0 1
56082: NOT
56083: IFTRUE 56097
56085: PUSH
56086: LD_VAR 0 1
56090: PPUSH
56091: CALL_OW 310
56095: NOT
56096: OR
56097: IFFALSE 56101
// exit ;
56099: GO 56191
// vehicle := IsInUnit ( driver ) ;
56101: LD_ADDR_VAR 0 3
56105: PUSH
56106: LD_VAR 0 1
56110: PPUSH
56111: CALL_OW 310
56115: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56116: LD_VAR 0 1
56120: PPUSH
56121: LD_STRING \
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: PUSH
56151: LD_STRING E
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_VAR 0 3
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PPUSH
56187: CALL_OW 447
// end ;
56191: LD_VAR 0 2
56195: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56196: LD_INT 0
56198: PPUSH
56199: PPUSH
56200: PPUSH
// tmp := [ ] ;
56201: LD_ADDR_VAR 0 5
56205: PUSH
56206: EMPTY
56207: ST_TO_ADDR
// for i in units do
56208: LD_ADDR_VAR 0 4
56212: PUSH
56213: LD_VAR 0 1
56217: PUSH
56218: FOR_IN
56219: IFFALSE 56257
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56221: LD_ADDR_VAR 0 5
56225: PUSH
56226: LD_VAR 0 5
56230: PPUSH
56231: LD_VAR 0 5
56235: PUSH
56236: LD_INT 1
56238: PLUS
56239: PPUSH
56240: LD_VAR 0 4
56244: PPUSH
56245: CALL_OW 256
56249: PPUSH
56250: CALL_OW 2
56254: ST_TO_ADDR
56255: GO 56218
56257: POP
56258: POP
// if not tmp then
56259: LD_VAR 0 5
56263: NOT
56264: IFFALSE 56268
// exit ;
56266: GO 56316
// if asc then
56268: LD_VAR 0 2
56272: IFFALSE 56296
// result := SortListByListAsc ( units , tmp ) else
56274: LD_ADDR_VAR 0 3
56278: PUSH
56279: LD_VAR 0 1
56283: PPUSH
56284: LD_VAR 0 5
56288: PPUSH
56289: CALL_OW 76
56293: ST_TO_ADDR
56294: GO 56316
// result := SortListByListDesc ( units , tmp ) ;
56296: LD_ADDR_VAR 0 3
56300: PUSH
56301: LD_VAR 0 1
56305: PPUSH
56306: LD_VAR 0 5
56310: PPUSH
56311: CALL_OW 77
56315: ST_TO_ADDR
// end ;
56316: LD_VAR 0 3
56320: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56321: LD_INT 0
56323: PPUSH
56324: PPUSH
// task := GetTaskList ( mech ) ;
56325: LD_ADDR_VAR 0 4
56329: PUSH
56330: LD_VAR 0 1
56334: PPUSH
56335: CALL_OW 437
56339: ST_TO_ADDR
// if not task then
56340: LD_VAR 0 4
56344: NOT
56345: IFFALSE 56349
// exit ;
56347: GO 56393
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56349: LD_ADDR_VAR 0 3
56353: PUSH
56354: LD_VAR 0 4
56358: PUSH
56359: LD_INT 1
56361: ARRAY
56362: PUSH
56363: LD_INT 1
56365: ARRAY
56366: PUSH
56367: LD_STRING r
56369: EQUAL
56370: IFFALSE 56392
56372: PUSH
56373: LD_VAR 0 4
56377: PUSH
56378: LD_INT 1
56380: ARRAY
56381: PUSH
56382: LD_INT 4
56384: ARRAY
56385: PUSH
56386: LD_VAR 0 2
56390: EQUAL
56391: AND
56392: ST_TO_ADDR
// end ;
56393: LD_VAR 0 3
56397: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56398: LD_INT 0
56400: PPUSH
// SetDir ( unit , d ) ;
56401: LD_VAR 0 1
56405: PPUSH
56406: LD_VAR 0 4
56410: PPUSH
56411: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56415: LD_ADDR_VAR 0 6
56419: PUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: LD_VAR 0 2
56429: PPUSH
56430: LD_VAR 0 3
56434: PPUSH
56435: LD_VAR 0 5
56439: PPUSH
56440: CALL_OW 48
56444: ST_TO_ADDR
// end ;
56445: LD_VAR 0 6
56449: RET
// export function ToNaturalNumber ( number ) ; begin
56450: LD_INT 0
56452: PPUSH
// result := number div 1 ;
56453: LD_ADDR_VAR 0 2
56457: PUSH
56458: LD_VAR 0 1
56462: PUSH
56463: LD_INT 1
56465: DIV
56466: ST_TO_ADDR
// if number < 0 then
56467: LD_VAR 0 1
56471: PUSH
56472: LD_INT 0
56474: LESS
56475: IFFALSE 56485
// result := 0 ;
56477: LD_ADDR_VAR 0 2
56481: PUSH
56482: LD_INT 0
56484: ST_TO_ADDR
// end ;
56485: LD_VAR 0 2
56489: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56490: LD_INT 0
56492: PPUSH
56493: PPUSH
56494: PPUSH
// if not buildings then
56495: LD_VAR 0 1
56499: NOT
56500: IFFALSE 56504
// exit ;
56502: GO 56619
// tmp := [ ] ;
56504: LD_ADDR_VAR 0 5
56508: PUSH
56509: EMPTY
56510: ST_TO_ADDR
// for b in buildings do
56511: LD_ADDR_VAR 0 4
56515: PUSH
56516: LD_VAR 0 1
56520: PUSH
56521: FOR_IN
56522: IFFALSE 56560
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56524: LD_ADDR_VAR 0 5
56528: PUSH
56529: LD_VAR 0 5
56533: PPUSH
56534: LD_VAR 0 5
56538: PUSH
56539: LD_INT 1
56541: PLUS
56542: PPUSH
56543: LD_VAR 0 4
56547: PPUSH
56548: CALL_OW 266
56552: PPUSH
56553: CALL_OW 1
56557: ST_TO_ADDR
56558: GO 56521
56560: POP
56561: POP
// if not tmp then
56562: LD_VAR 0 5
56566: NOT
56567: IFFALSE 56571
// exit ;
56569: GO 56619
// if asc then
56571: LD_VAR 0 2
56575: IFFALSE 56599
// result := SortListByListAsc ( buildings , tmp ) else
56577: LD_ADDR_VAR 0 3
56581: PUSH
56582: LD_VAR 0 1
56586: PPUSH
56587: LD_VAR 0 5
56591: PPUSH
56592: CALL_OW 76
56596: ST_TO_ADDR
56597: GO 56619
// result := SortListByListDesc ( buildings , tmp ) ;
56599: LD_ADDR_VAR 0 3
56603: PUSH
56604: LD_VAR 0 1
56608: PPUSH
56609: LD_VAR 0 5
56613: PPUSH
56614: CALL_OW 77
56618: ST_TO_ADDR
// end ;
56619: LD_VAR 0 3
56623: RET
// export function SortByClass ( units , class ) ; var un ; begin
56624: LD_INT 0
56626: PPUSH
56627: PPUSH
// if not units or not class then
56628: LD_VAR 0 1
56632: NOT
56633: IFTRUE 56642
56635: PUSH
56636: LD_VAR 0 2
56640: NOT
56641: OR
56642: IFFALSE 56646
// exit ;
56644: GO 56741
// result := [ ] ;
56646: LD_ADDR_VAR 0 3
56650: PUSH
56651: EMPTY
56652: ST_TO_ADDR
// for un in units do
56653: LD_ADDR_VAR 0 4
56657: PUSH
56658: LD_VAR 0 1
56662: PUSH
56663: FOR_IN
56664: IFFALSE 56739
// if GetClass ( un ) = class then
56666: LD_VAR 0 4
56670: PPUSH
56671: CALL_OW 257
56675: PUSH
56676: LD_VAR 0 2
56680: EQUAL
56681: IFFALSE 56708
// result := Insert ( result , 1 , un ) else
56683: LD_ADDR_VAR 0 3
56687: PUSH
56688: LD_VAR 0 3
56692: PPUSH
56693: LD_INT 1
56695: PPUSH
56696: LD_VAR 0 4
56700: PPUSH
56701: CALL_OW 2
56705: ST_TO_ADDR
56706: GO 56737
// result := Replace ( result , result + 1 , un ) ;
56708: LD_ADDR_VAR 0 3
56712: PUSH
56713: LD_VAR 0 3
56717: PPUSH
56718: LD_VAR 0 3
56722: PUSH
56723: LD_INT 1
56725: PLUS
56726: PPUSH
56727: LD_VAR 0 4
56731: PPUSH
56732: CALL_OW 1
56736: ST_TO_ADDR
56737: GO 56663
56739: POP
56740: POP
// end ;
56741: LD_VAR 0 3
56745: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56746: LD_INT 0
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
// result := [ ] ;
56755: LD_ADDR_VAR 0 4
56759: PUSH
56760: EMPTY
56761: ST_TO_ADDR
// if x - r < 0 then
56762: LD_VAR 0 1
56766: PUSH
56767: LD_VAR 0 3
56771: MINUS
56772: PUSH
56773: LD_INT 0
56775: LESS
56776: IFFALSE 56788
// min_x := 0 else
56778: LD_ADDR_VAR 0 8
56782: PUSH
56783: LD_INT 0
56785: ST_TO_ADDR
56786: GO 56804
// min_x := x - r ;
56788: LD_ADDR_VAR 0 8
56792: PUSH
56793: LD_VAR 0 1
56797: PUSH
56798: LD_VAR 0 3
56802: MINUS
56803: ST_TO_ADDR
// if y - r < 0 then
56804: LD_VAR 0 2
56808: PUSH
56809: LD_VAR 0 3
56813: MINUS
56814: PUSH
56815: LD_INT 0
56817: LESS
56818: IFFALSE 56830
// min_y := 0 else
56820: LD_ADDR_VAR 0 7
56824: PUSH
56825: LD_INT 0
56827: ST_TO_ADDR
56828: GO 56846
// min_y := y - r ;
56830: LD_ADDR_VAR 0 7
56834: PUSH
56835: LD_VAR 0 2
56839: PUSH
56840: LD_VAR 0 3
56844: MINUS
56845: ST_TO_ADDR
// max_x := x + r ;
56846: LD_ADDR_VAR 0 9
56850: PUSH
56851: LD_VAR 0 1
56855: PUSH
56856: LD_VAR 0 3
56860: PLUS
56861: ST_TO_ADDR
// max_y := y + r ;
56862: LD_ADDR_VAR 0 10
56866: PUSH
56867: LD_VAR 0 2
56871: PUSH
56872: LD_VAR 0 3
56876: PLUS
56877: ST_TO_ADDR
// for _x = min_x to max_x do
56878: LD_ADDR_VAR 0 5
56882: PUSH
56883: DOUBLE
56884: LD_VAR 0 8
56888: DEC
56889: ST_TO_ADDR
56890: LD_VAR 0 9
56894: PUSH
56895: FOR_TO
56896: IFFALSE 56997
// for _y = min_y to max_y do
56898: LD_ADDR_VAR 0 6
56902: PUSH
56903: DOUBLE
56904: LD_VAR 0 7
56908: DEC
56909: ST_TO_ADDR
56910: LD_VAR 0 10
56914: PUSH
56915: FOR_TO
56916: IFFALSE 56993
// begin if not ValidHex ( _x , _y ) then
56918: LD_VAR 0 5
56922: PPUSH
56923: LD_VAR 0 6
56927: PPUSH
56928: CALL_OW 488
56932: NOT
56933: IFFALSE 56937
// continue ;
56935: GO 56915
// if GetResourceTypeXY ( _x , _y ) then
56937: LD_VAR 0 5
56941: PPUSH
56942: LD_VAR 0 6
56946: PPUSH
56947: CALL_OW 283
56951: IFFALSE 56991
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56953: LD_ADDR_VAR 0 4
56957: PUSH
56958: LD_VAR 0 4
56962: PPUSH
56963: LD_VAR 0 4
56967: PUSH
56968: LD_INT 1
56970: PLUS
56971: PPUSH
56972: LD_VAR 0 5
56976: PUSH
56977: LD_VAR 0 6
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PPUSH
56986: CALL_OW 1
56990: ST_TO_ADDR
// end ;
56991: GO 56915
56993: POP
56994: POP
56995: GO 56895
56997: POP
56998: POP
// end ;
56999: LD_VAR 0 4
57003: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57004: LD_INT 0
57006: PPUSH
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
57012: PPUSH
57013: PPUSH
// if not units then
57014: LD_VAR 0 1
57018: NOT
57019: IFFALSE 57023
// exit ;
57021: GO 57555
// result := UnitFilter ( units , [ f_ok ] ) ;
57023: LD_ADDR_VAR 0 3
57027: PUSH
57028: LD_VAR 0 1
57032: PPUSH
57033: LD_INT 50
57035: PUSH
57036: EMPTY
57037: LIST
57038: PPUSH
57039: CALL_OW 72
57043: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57044: LD_ADDR_VAR 0 8
57048: PUSH
57049: LD_VAR 0 1
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: PPUSH
57058: CALL_OW 255
57062: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57063: LD_ADDR_VAR 0 10
57067: PUSH
57068: LD_INT 29
57070: PUSH
57071: LD_INT 91
57073: PUSH
57074: LD_INT 49
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: ST_TO_ADDR
// if not result then
57082: LD_VAR 0 3
57086: NOT
57087: IFFALSE 57091
// exit ;
57089: GO 57555
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57091: LD_ADDR_VAR 0 5
57095: PUSH
57096: LD_INT 81
57098: PUSH
57099: LD_VAR 0 8
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PPUSH
57108: CALL_OW 69
57112: ST_TO_ADDR
// for i in result do
57113: LD_ADDR_VAR 0 4
57117: PUSH
57118: LD_VAR 0 3
57122: PUSH
57123: FOR_IN
57124: IFFALSE 57553
// begin tag := GetTag ( i ) + 1 ;
57126: LD_ADDR_VAR 0 9
57130: PUSH
57131: LD_VAR 0 4
57135: PPUSH
57136: CALL_OW 110
57140: PUSH
57141: LD_INT 1
57143: PLUS
57144: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57145: LD_ADDR_VAR 0 7
57149: PUSH
57150: LD_VAR 0 4
57154: PPUSH
57155: CALL_OW 250
57159: PPUSH
57160: LD_VAR 0 4
57164: PPUSH
57165: CALL_OW 251
57169: PPUSH
57170: LD_INT 4
57172: PPUSH
57173: CALL 56746 0 3
57177: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57178: LD_VAR 0 4
57182: PPUSH
57183: CALL_OW 247
57187: PUSH
57188: LD_INT 2
57190: EQUAL
57191: IFFALSE 57203
57193: PUSH
57194: LD_VAR 0 7
57198: PUSH
57199: LD_INT 2
57201: GREATER
57202: AND
57203: IFFALSE 57223
57205: PUSH
57206: LD_VAR 0 4
57210: PPUSH
57211: CALL_OW 264
57215: PUSH
57216: LD_VAR 0 10
57220: IN
57221: NOT
57222: AND
57223: IFFALSE 57262
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57225: LD_VAR 0 4
57229: PPUSH
57230: LD_VAR 0 7
57234: PUSH
57235: LD_INT 1
57237: ARRAY
57238: PUSH
57239: LD_INT 1
57241: ARRAY
57242: PPUSH
57243: LD_VAR 0 7
57247: PUSH
57248: LD_INT 1
57250: ARRAY
57251: PUSH
57252: LD_INT 2
57254: ARRAY
57255: PPUSH
57256: CALL_OW 116
57260: GO 57551
// if path > tag then
57262: LD_VAR 0 2
57266: PUSH
57267: LD_VAR 0 9
57271: GREATER
57272: IFFALSE 57480
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57274: LD_ADDR_VAR 0 6
57278: PUSH
57279: LD_VAR 0 5
57283: PPUSH
57284: LD_INT 91
57286: PUSH
57287: LD_VAR 0 4
57291: PUSH
57292: LD_INT 8
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: PPUSH
57300: CALL_OW 72
57304: ST_TO_ADDR
// if nearEnemy then
57305: LD_VAR 0 6
57309: IFFALSE 57378
// begin if GetWeapon ( i ) = ru_time_lapser then
57311: LD_VAR 0 4
57315: PPUSH
57316: CALL_OW 264
57320: PUSH
57321: LD_INT 49
57323: EQUAL
57324: IFFALSE 57352
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57326: LD_VAR 0 4
57330: PPUSH
57331: LD_VAR 0 6
57335: PPUSH
57336: LD_VAR 0 4
57340: PPUSH
57341: CALL_OW 74
57345: PPUSH
57346: CALL_OW 112
57350: GO 57376
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57352: LD_VAR 0 4
57356: PPUSH
57357: LD_VAR 0 6
57361: PPUSH
57362: LD_VAR 0 4
57366: PPUSH
57367: CALL_OW 74
57371: PPUSH
57372: CALL 58636 0 2
// end else
57376: GO 57478
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57378: LD_VAR 0 4
57382: PPUSH
57383: LD_VAR 0 2
57387: PUSH
57388: LD_VAR 0 9
57392: ARRAY
57393: PUSH
57394: LD_INT 1
57396: ARRAY
57397: PPUSH
57398: LD_VAR 0 2
57402: PUSH
57403: LD_VAR 0 9
57407: ARRAY
57408: PUSH
57409: LD_INT 2
57411: ARRAY
57412: PPUSH
57413: CALL_OW 297
57417: PUSH
57418: LD_INT 6
57420: GREATER
57421: IFFALSE 57464
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57423: LD_VAR 0 4
57427: PPUSH
57428: LD_VAR 0 2
57432: PUSH
57433: LD_VAR 0 9
57437: ARRAY
57438: PUSH
57439: LD_INT 1
57441: ARRAY
57442: PPUSH
57443: LD_VAR 0 2
57447: PUSH
57448: LD_VAR 0 9
57452: ARRAY
57453: PUSH
57454: LD_INT 2
57456: ARRAY
57457: PPUSH
57458: CALL_OW 114
57462: GO 57478
// SetTag ( i , tag ) ;
57464: LD_VAR 0 4
57468: PPUSH
57469: LD_VAR 0 9
57473: PPUSH
57474: CALL_OW 109
// end else
57478: GO 57551
// if enemy then
57480: LD_VAR 0 5
57484: IFFALSE 57551
// begin if GetWeapon ( i ) = ru_time_lapser then
57486: LD_VAR 0 4
57490: PPUSH
57491: CALL_OW 264
57495: PUSH
57496: LD_INT 49
57498: EQUAL
57499: IFFALSE 57527
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57501: LD_VAR 0 4
57505: PPUSH
57506: LD_VAR 0 5
57510: PPUSH
57511: LD_VAR 0 4
57515: PPUSH
57516: CALL_OW 74
57520: PPUSH
57521: CALL_OW 112
57525: GO 57551
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57527: LD_VAR 0 4
57531: PPUSH
57532: LD_VAR 0 5
57536: PPUSH
57537: LD_VAR 0 4
57541: PPUSH
57542: CALL_OW 74
57546: PPUSH
57547: CALL 58636 0 2
// end ; end ;
57551: GO 57123
57553: POP
57554: POP
// end ;
57555: LD_VAR 0 3
57559: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57560: LD_INT 0
57562: PPUSH
57563: PPUSH
57564: PPUSH
// if not unit or IsInUnit ( unit ) then
57565: LD_VAR 0 1
57569: NOT
57570: IFTRUE 57583
57572: PUSH
57573: LD_VAR 0 1
57577: PPUSH
57578: CALL_OW 310
57582: OR
57583: IFFALSE 57587
// exit ;
57585: GO 57678
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57587: LD_ADDR_VAR 0 4
57591: PUSH
57592: LD_VAR 0 1
57596: PPUSH
57597: CALL_OW 250
57601: PPUSH
57602: LD_VAR 0 2
57606: PPUSH
57607: LD_INT 1
57609: PPUSH
57610: CALL_OW 272
57614: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57615: LD_ADDR_VAR 0 5
57619: PUSH
57620: LD_VAR 0 1
57624: PPUSH
57625: CALL_OW 251
57629: PPUSH
57630: LD_VAR 0 2
57634: PPUSH
57635: LD_INT 1
57637: PPUSH
57638: CALL_OW 273
57642: ST_TO_ADDR
// if ValidHex ( x , y ) then
57643: LD_VAR 0 4
57647: PPUSH
57648: LD_VAR 0 5
57652: PPUSH
57653: CALL_OW 488
57657: IFFALSE 57678
// ComTurnXY ( unit , x , y ) ;
57659: LD_VAR 0 1
57663: PPUSH
57664: LD_VAR 0 4
57668: PPUSH
57669: LD_VAR 0 5
57673: PPUSH
57674: CALL_OW 118
// end ;
57678: LD_VAR 0 3
57682: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57683: LD_INT 0
57685: PPUSH
57686: PPUSH
// result := false ;
57687: LD_ADDR_VAR 0 3
57691: PUSH
57692: LD_INT 0
57694: ST_TO_ADDR
// if not units then
57695: LD_VAR 0 2
57699: NOT
57700: IFFALSE 57704
// exit ;
57702: GO 57749
// for i in units do
57704: LD_ADDR_VAR 0 4
57708: PUSH
57709: LD_VAR 0 2
57713: PUSH
57714: FOR_IN
57715: IFFALSE 57747
// if See ( side , i ) then
57717: LD_VAR 0 1
57721: PPUSH
57722: LD_VAR 0 4
57726: PPUSH
57727: CALL_OW 292
57731: IFFALSE 57745
// begin result := true ;
57733: LD_ADDR_VAR 0 3
57737: PUSH
57738: LD_INT 1
57740: ST_TO_ADDR
// exit ;
57741: POP
57742: POP
57743: GO 57749
// end ;
57745: GO 57714
57747: POP
57748: POP
// end ;
57749: LD_VAR 0 3
57753: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57754: LD_INT 0
57756: PPUSH
57757: PPUSH
57758: PPUSH
57759: PPUSH
// if not unit or not points then
57760: LD_VAR 0 1
57764: NOT
57765: IFTRUE 57774
57767: PUSH
57768: LD_VAR 0 2
57772: NOT
57773: OR
57774: IFFALSE 57778
// exit ;
57776: GO 57868
// dist := 99999 ;
57778: LD_ADDR_VAR 0 5
57782: PUSH
57783: LD_INT 99999
57785: ST_TO_ADDR
// for i in points do
57786: LD_ADDR_VAR 0 4
57790: PUSH
57791: LD_VAR 0 2
57795: PUSH
57796: FOR_IN
57797: IFFALSE 57866
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57799: LD_ADDR_VAR 0 6
57803: PUSH
57804: LD_VAR 0 1
57808: PPUSH
57809: LD_VAR 0 4
57813: PUSH
57814: LD_INT 1
57816: ARRAY
57817: PPUSH
57818: LD_VAR 0 4
57822: PUSH
57823: LD_INT 2
57825: ARRAY
57826: PPUSH
57827: CALL_OW 297
57831: ST_TO_ADDR
// if tmpDist < dist then
57832: LD_VAR 0 6
57836: PUSH
57837: LD_VAR 0 5
57841: LESS
57842: IFFALSE 57864
// begin result := i ;
57844: LD_ADDR_VAR 0 3
57848: PUSH
57849: LD_VAR 0 4
57853: ST_TO_ADDR
// dist := tmpDist ;
57854: LD_ADDR_VAR 0 5
57858: PUSH
57859: LD_VAR 0 6
57863: ST_TO_ADDR
// end ; end ;
57864: GO 57796
57866: POP
57867: POP
// end ;
57868: LD_VAR 0 3
57872: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57873: LD_INT 0
57875: PPUSH
// uc_side := side ;
57876: LD_ADDR_OWVAR 20
57880: PUSH
57881: LD_VAR 0 1
57885: ST_TO_ADDR
// uc_nation := 3 ;
57886: LD_ADDR_OWVAR 21
57890: PUSH
57891: LD_INT 3
57893: ST_TO_ADDR
// vc_chassis := 25 ;
57894: LD_ADDR_OWVAR 37
57898: PUSH
57899: LD_INT 25
57901: ST_TO_ADDR
// vc_engine := engine_siberite ;
57902: LD_ADDR_OWVAR 39
57906: PUSH
57907: LD_INT 3
57909: ST_TO_ADDR
// vc_control := control_computer ;
57910: LD_ADDR_OWVAR 38
57914: PUSH
57915: LD_INT 3
57917: ST_TO_ADDR
// vc_weapon := 59 ;
57918: LD_ADDR_OWVAR 40
57922: PUSH
57923: LD_INT 59
57925: ST_TO_ADDR
// result := CreateVehicle ;
57926: LD_ADDR_VAR 0 5
57930: PUSH
57931: CALL_OW 45
57935: ST_TO_ADDR
// SetDir ( result , d ) ;
57936: LD_VAR 0 5
57940: PPUSH
57941: LD_VAR 0 4
57945: PPUSH
57946: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57950: LD_VAR 0 5
57954: PPUSH
57955: LD_VAR 0 2
57959: PPUSH
57960: LD_VAR 0 3
57964: PPUSH
57965: LD_INT 0
57967: PPUSH
57968: CALL_OW 48
// end ;
57972: LD_VAR 0 5
57976: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57977: LD_INT 0
57979: PPUSH
57980: PPUSH
57981: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57982: LD_ADDR_VAR 0 2
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58005: LD_VAR 0 1
58009: NOT
58010: IFTRUE 58043
58012: PUSH
58013: LD_VAR 0 1
58017: PPUSH
58018: CALL_OW 264
58022: PUSH
58023: LD_INT 12
58025: PUSH
58026: LD_INT 51
58028: PUSH
58029: LD_INT 32
58031: PUSH
58032: LD_INT 89
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: IN
58041: NOT
58042: OR
58043: IFFALSE 58047
// exit ;
58045: GO 58145
// for i := 1 to 3 do
58047: LD_ADDR_VAR 0 3
58051: PUSH
58052: DOUBLE
58053: LD_INT 1
58055: DEC
58056: ST_TO_ADDR
58057: LD_INT 3
58059: PUSH
58060: FOR_TO
58061: IFFALSE 58143
// begin tmp := GetCargo ( cargo , i ) ;
58063: LD_ADDR_VAR 0 4
58067: PUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: LD_VAR 0 3
58077: PPUSH
58078: CALL_OW 289
58082: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58083: LD_ADDR_VAR 0 2
58087: PUSH
58088: LD_VAR 0 2
58092: PPUSH
58093: LD_VAR 0 3
58097: PPUSH
58098: LD_VAR 0 4
58102: PPUSH
58103: CALL_OW 1
58107: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58108: LD_ADDR_VAR 0 2
58112: PUSH
58113: LD_VAR 0 2
58117: PPUSH
58118: LD_INT 4
58120: PPUSH
58121: LD_VAR 0 2
58125: PUSH
58126: LD_INT 4
58128: ARRAY
58129: PUSH
58130: LD_VAR 0 4
58134: PLUS
58135: PPUSH
58136: CALL_OW 1
58140: ST_TO_ADDR
// end ;
58141: GO 58060
58143: POP
58144: POP
// end ;
58145: LD_VAR 0 2
58149: RET
// export function Length ( array ) ; begin
58150: LD_INT 0
58152: PPUSH
// result := array + 0 ;
58153: LD_ADDR_VAR 0 2
58157: PUSH
58158: LD_VAR 0 1
58162: PUSH
58163: LD_INT 0
58165: PLUS
58166: ST_TO_ADDR
// end ;
58167: LD_VAR 0 2
58171: RET
// export function PrepareArray ( array ) ; begin
58172: LD_INT 0
58174: PPUSH
// result := array diff 0 ;
58175: LD_ADDR_VAR 0 2
58179: PUSH
58180: LD_VAR 0 1
58184: PUSH
58185: LD_INT 0
58187: DIFF
58188: ST_TO_ADDR
// if not result [ 1 ] then
58189: LD_VAR 0 2
58193: PUSH
58194: LD_INT 1
58196: ARRAY
58197: NOT
58198: IFFALSE 58218
// result := Delete ( result , 1 ) ;
58200: LD_ADDR_VAR 0 2
58204: PUSH
58205: LD_VAR 0 2
58209: PPUSH
58210: LD_INT 1
58212: PPUSH
58213: CALL_OW 3
58217: ST_TO_ADDR
// end ;
58218: LD_VAR 0 2
58222: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58223: LD_INT 0
58225: PPUSH
58226: PPUSH
58227: PPUSH
58228: PPUSH
// sibRocketRange := 25 ;
58229: LD_ADDR_VAR 0 6
58233: PUSH
58234: LD_INT 25
58236: ST_TO_ADDR
// result := false ;
58237: LD_ADDR_VAR 0 4
58241: PUSH
58242: LD_INT 0
58244: ST_TO_ADDR
// for i := 0 to 5 do
58245: LD_ADDR_VAR 0 5
58249: PUSH
58250: DOUBLE
58251: LD_INT 0
58253: DEC
58254: ST_TO_ADDR
58255: LD_INT 5
58257: PUSH
58258: FOR_TO
58259: IFFALSE 58326
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58261: LD_VAR 0 1
58265: PPUSH
58266: LD_VAR 0 5
58270: PPUSH
58271: LD_VAR 0 6
58275: PPUSH
58276: CALL_OW 272
58280: PPUSH
58281: LD_VAR 0 2
58285: PPUSH
58286: LD_VAR 0 5
58290: PPUSH
58291: LD_VAR 0 6
58295: PPUSH
58296: CALL_OW 273
58300: PPUSH
58301: LD_VAR 0 3
58305: PPUSH
58306: CALL_OW 309
58310: IFFALSE 58324
// begin result := true ;
58312: LD_ADDR_VAR 0 4
58316: PUSH
58317: LD_INT 1
58319: ST_TO_ADDR
// exit ;
58320: POP
58321: POP
58322: GO 58328
// end ;
58324: GO 58258
58326: POP
58327: POP
// end ;
58328: LD_VAR 0 4
58332: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58333: LD_INT 0
58335: PPUSH
58336: PPUSH
58337: PPUSH
// if btype = b_depot then
58338: LD_VAR 0 2
58342: PUSH
58343: LD_INT 0
58345: EQUAL
58346: IFFALSE 58358
// begin result := true ;
58348: LD_ADDR_VAR 0 3
58352: PUSH
58353: LD_INT 1
58355: ST_TO_ADDR
// exit ;
58356: GO 58478
// end ; pom := GetBase ( depot ) ;
58358: LD_ADDR_VAR 0 4
58362: PUSH
58363: LD_VAR 0 1
58367: PPUSH
58368: CALL_OW 274
58372: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58373: LD_ADDR_VAR 0 5
58377: PUSH
58378: LD_VAR 0 2
58382: PPUSH
58383: LD_VAR 0 1
58387: PPUSH
58388: CALL_OW 248
58392: PPUSH
58393: CALL_OW 450
58397: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58398: LD_ADDR_VAR 0 3
58402: PUSH
58403: LD_VAR 0 4
58407: PPUSH
58408: LD_INT 1
58410: PPUSH
58411: CALL_OW 275
58415: PUSH
58416: LD_VAR 0 5
58420: PUSH
58421: LD_INT 1
58423: ARRAY
58424: GREATEREQUAL
58425: IFFALSE 58451
58427: PUSH
58428: LD_VAR 0 4
58432: PPUSH
58433: LD_INT 2
58435: PPUSH
58436: CALL_OW 275
58440: PUSH
58441: LD_VAR 0 5
58445: PUSH
58446: LD_INT 2
58448: ARRAY
58449: GREATEREQUAL
58450: AND
58451: IFFALSE 58477
58453: PUSH
58454: LD_VAR 0 4
58458: PPUSH
58459: LD_INT 3
58461: PPUSH
58462: CALL_OW 275
58466: PUSH
58467: LD_VAR 0 5
58471: PUSH
58472: LD_INT 3
58474: ARRAY
58475: GREATEREQUAL
58476: AND
58477: ST_TO_ADDR
// end ;
58478: LD_VAR 0 3
58482: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58483: LD_INT 0
58485: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58486: LD_VAR 0 1
58490: PPUSH
58491: LD_VAR 0 2
58495: PPUSH
58496: LD_INT 0
58498: PPUSH
58499: LD_INT 0
58501: PPUSH
58502: LD_INT 1
58504: PPUSH
58505: LD_INT 0
58507: PPUSH
58508: CALL_OW 587
// end ;
58512: LD_VAR 0 3
58516: RET
// export function CenterOnNow ( unit ) ; begin
58517: LD_INT 0
58519: PPUSH
// result := IsInUnit ( unit ) ;
58520: LD_ADDR_VAR 0 2
58524: PUSH
58525: LD_VAR 0 1
58529: PPUSH
58530: CALL_OW 310
58534: ST_TO_ADDR
// if not result then
58535: LD_VAR 0 2
58539: NOT
58540: IFFALSE 58552
// result := unit ;
58542: LD_ADDR_VAR 0 2
58546: PUSH
58547: LD_VAR 0 1
58551: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58552: LD_VAR 0 1
58556: PPUSH
58557: CALL_OW 87
// end ;
58561: LD_VAR 0 2
58565: RET
// export function ComMoveHex ( unit , hex ) ; begin
58566: LD_INT 0
58568: PPUSH
// if not hex then
58569: LD_VAR 0 2
58573: NOT
58574: IFFALSE 58578
// exit ;
58576: GO 58631
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58578: LD_VAR 0 2
58582: PUSH
58583: LD_INT 1
58585: ARRAY
58586: PPUSH
58587: LD_VAR 0 2
58591: PUSH
58592: LD_INT 2
58594: ARRAY
58595: PPUSH
58596: CALL_OW 428
58600: IFFALSE 58604
// exit ;
58602: GO 58631
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58604: LD_VAR 0 1
58608: PPUSH
58609: LD_VAR 0 2
58613: PUSH
58614: LD_INT 1
58616: ARRAY
58617: PPUSH
58618: LD_VAR 0 2
58622: PUSH
58623: LD_INT 2
58625: ARRAY
58626: PPUSH
58627: CALL_OW 111
// end ;
58631: LD_VAR 0 3
58635: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58636: LD_INT 0
58638: PPUSH
58639: PPUSH
58640: PPUSH
// if not unit or not enemy then
58641: LD_VAR 0 1
58645: NOT
58646: IFTRUE 58655
58648: PUSH
58649: LD_VAR 0 2
58653: NOT
58654: OR
58655: IFFALSE 58659
// exit ;
58657: GO 58785
// x := GetX ( enemy ) ;
58659: LD_ADDR_VAR 0 4
58663: PUSH
58664: LD_VAR 0 2
58668: PPUSH
58669: CALL_OW 250
58673: ST_TO_ADDR
// y := GetY ( enemy ) ;
58674: LD_ADDR_VAR 0 5
58678: PUSH
58679: LD_VAR 0 2
58683: PPUSH
58684: CALL_OW 251
58688: ST_TO_ADDR
// if ValidHex ( x , y ) then
58689: LD_VAR 0 4
58693: PPUSH
58694: LD_VAR 0 5
58698: PPUSH
58699: CALL_OW 488
58703: IFFALSE 58785
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58705: LD_VAR 0 2
58709: PPUSH
58710: CALL_OW 247
58714: PUSH
58715: LD_INT 3
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: IN
58725: IFTRUE 58748
58727: PUSH
58728: LD_VAR 0 1
58732: PPUSH
58733: CALL_OW 255
58737: PPUSH
58738: LD_VAR 0 2
58742: PPUSH
58743: CALL_OW 292
58747: OR
58748: IFFALSE 58766
// ComAttackUnit ( unit , enemy ) else
58750: LD_VAR 0 1
58754: PPUSH
58755: LD_VAR 0 2
58759: PPUSH
58760: CALL_OW 115
58764: GO 58785
// ComAgressiveMove ( unit , x , y ) ;
58766: LD_VAR 0 1
58770: PPUSH
58771: LD_VAR 0 4
58775: PPUSH
58776: LD_VAR 0 5
58780: PPUSH
58781: CALL_OW 114
// end ;
58785: LD_VAR 0 3
58789: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58790: LD_INT 0
58792: PPUSH
58793: PPUSH
58794: PPUSH
// list := AreaToList ( area , 0 ) ;
58795: LD_ADDR_VAR 0 5
58799: PUSH
58800: LD_VAR 0 1
58804: PPUSH
58805: LD_INT 0
58807: PPUSH
58808: CALL_OW 517
58812: ST_TO_ADDR
// if not list then
58813: LD_VAR 0 5
58817: NOT
58818: IFFALSE 58822
// exit ;
58820: GO 58952
// if all then
58822: LD_VAR 0 2
58826: IFFALSE 58914
// begin for i := 1 to list [ 1 ] do
58828: LD_ADDR_VAR 0 4
58832: PUSH
58833: DOUBLE
58834: LD_INT 1
58836: DEC
58837: ST_TO_ADDR
58838: LD_VAR 0 5
58842: PUSH
58843: LD_INT 1
58845: ARRAY
58846: PUSH
58847: FOR_TO
58848: IFFALSE 58910
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58850: LD_ADDR_VAR 0 3
58854: PUSH
58855: LD_VAR 0 3
58859: PPUSH
58860: LD_VAR 0 3
58864: PUSH
58865: LD_INT 1
58867: PLUS
58868: PPUSH
58869: LD_VAR 0 5
58873: PUSH
58874: LD_INT 1
58876: ARRAY
58877: PUSH
58878: LD_VAR 0 4
58882: ARRAY
58883: PUSH
58884: LD_VAR 0 5
58888: PUSH
58889: LD_INT 2
58891: ARRAY
58892: PUSH
58893: LD_VAR 0 4
58897: ARRAY
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PPUSH
58903: CALL_OW 1
58907: ST_TO_ADDR
58908: GO 58847
58910: POP
58911: POP
// exit ;
58912: GO 58952
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58914: LD_ADDR_VAR 0 3
58918: PUSH
58919: LD_VAR 0 5
58923: PUSH
58924: LD_INT 1
58926: ARRAY
58927: PUSH
58928: LD_INT 1
58930: ARRAY
58931: PUSH
58932: LD_VAR 0 5
58936: PUSH
58937: LD_INT 2
58939: ARRAY
58940: PUSH
58941: LD_INT 1
58943: ARRAY
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: ST_TO_ADDR
// end ;
58952: LD_VAR 0 3
58956: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58957: LD_INT 0
58959: PPUSH
58960: PPUSH
// list := AreaToList ( area , 0 ) ;
58961: LD_ADDR_VAR 0 4
58965: PUSH
58966: LD_VAR 0 1
58970: PPUSH
58971: LD_INT 0
58973: PPUSH
58974: CALL_OW 517
58978: ST_TO_ADDR
// if not list then
58979: LD_VAR 0 4
58983: NOT
58984: IFFALSE 58988
// exit ;
58986: GO 59029
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58988: LD_ADDR_VAR 0 3
58992: PUSH
58993: LD_VAR 0 4
58997: PUSH
58998: LD_INT 1
59000: ARRAY
59001: PUSH
59002: LD_INT 1
59004: ARRAY
59005: PUSH
59006: LD_VAR 0 4
59010: PUSH
59011: LD_INT 2
59013: ARRAY
59014: PUSH
59015: LD_INT 1
59017: ARRAY
59018: PUSH
59019: LD_VAR 0 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// end ;
59029: LD_VAR 0 3
59033: RET
// export function First ( array ) ; begin
59034: LD_INT 0
59036: PPUSH
// if not array then
59037: LD_VAR 0 1
59041: NOT
59042: IFFALSE 59046
// exit ;
59044: GO 59060
// result := array [ 1 ] ;
59046: LD_ADDR_VAR 0 2
59050: PUSH
59051: LD_VAR 0 1
59055: PUSH
59056: LD_INT 1
59058: ARRAY
59059: ST_TO_ADDR
// end ;
59060: LD_VAR 0 2
59064: RET
// export function Last ( array ) ; begin
59065: LD_INT 0
59067: PPUSH
// if not array then
59068: LD_VAR 0 1
59072: NOT
59073: IFFALSE 59077
// exit ;
59075: GO 59093
// result := array [ array ] ;
59077: LD_ADDR_VAR 0 2
59081: PUSH
59082: LD_VAR 0 1
59086: PUSH
59087: LD_VAR 0 1
59091: ARRAY
59092: ST_TO_ADDR
// end ;
59093: LD_VAR 0 2
59097: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59098: LD_INT 0
59100: PPUSH
59101: PPUSH
// result := [ ] ;
59102: LD_ADDR_VAR 0 5
59106: PUSH
59107: EMPTY
59108: ST_TO_ADDR
// if not array then
59109: LD_VAR 0 1
59113: NOT
59114: IFFALSE 59118
// exit ;
59116: GO 59230
// for i := 1 to array do
59118: LD_ADDR_VAR 0 6
59122: PUSH
59123: DOUBLE
59124: LD_INT 1
59126: DEC
59127: ST_TO_ADDR
59128: LD_VAR 0 1
59132: PUSH
59133: FOR_TO
59134: IFFALSE 59228
// if array [ i ] [ index ] = value then
59136: LD_VAR 0 1
59140: PUSH
59141: LD_VAR 0 6
59145: ARRAY
59146: PUSH
59147: LD_VAR 0 2
59151: ARRAY
59152: PUSH
59153: LD_VAR 0 3
59157: EQUAL
59158: IFFALSE 59226
// begin if indexColumn then
59160: LD_VAR 0 4
59164: IFFALSE 59200
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59166: LD_ADDR_VAR 0 5
59170: PUSH
59171: LD_VAR 0 5
59175: PPUSH
59176: LD_VAR 0 1
59180: PUSH
59181: LD_VAR 0 6
59185: ARRAY
59186: PUSH
59187: LD_VAR 0 4
59191: ARRAY
59192: PPUSH
59193: CALL 54238 0 2
59197: ST_TO_ADDR
59198: GO 59226
// result := Join ( result , array [ i ] ) ;
59200: LD_ADDR_VAR 0 5
59204: PUSH
59205: LD_VAR 0 5
59209: PPUSH
59210: LD_VAR 0 1
59214: PUSH
59215: LD_VAR 0 6
59219: ARRAY
59220: PPUSH
59221: CALL 54238 0 2
59225: ST_TO_ADDR
// end ;
59226: GO 59133
59228: POP
59229: POP
// end ;
59230: LD_VAR 0 5
59234: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59235: LD_INT 0
59237: PPUSH
// if not vehicles or not parkingPoint then
59238: LD_VAR 0 1
59242: NOT
59243: IFTRUE 59252
59245: PUSH
59246: LD_VAR 0 2
59250: NOT
59251: OR
59252: IFFALSE 59256
// exit ;
59254: GO 59354
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59256: LD_ADDR_VAR 0 1
59260: PUSH
59261: LD_VAR 0 1
59265: PPUSH
59266: LD_INT 50
59268: PUSH
59269: EMPTY
59270: LIST
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: LD_INT 92
59277: PUSH
59278: LD_VAR 0 2
59282: PUSH
59283: LD_INT 1
59285: ARRAY
59286: PUSH
59287: LD_VAR 0 2
59291: PUSH
59292: LD_INT 2
59294: ARRAY
59295: PUSH
59296: LD_INT 8
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PPUSH
59313: CALL_OW 72
59317: ST_TO_ADDR
// if not vehicles then
59318: LD_VAR 0 1
59322: NOT
59323: IFFALSE 59327
// exit ;
59325: GO 59354
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59327: LD_VAR 0 1
59331: PPUSH
59332: LD_VAR 0 2
59336: PUSH
59337: LD_INT 1
59339: ARRAY
59340: PPUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 2
59348: ARRAY
59349: PPUSH
59350: CALL_OW 111
// end ;
59354: LD_VAR 0 3
59358: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59359: LD_INT 0
59361: PPUSH
59362: PPUSH
59363: PPUSH
// if not side or not area then
59364: LD_VAR 0 1
59368: NOT
59369: IFTRUE 59378
59371: PUSH
59372: LD_VAR 0 2
59376: NOT
59377: OR
59378: IFFALSE 59382
// exit ;
59380: GO 59501
// tmp := AreaToList ( area , 0 ) ;
59382: LD_ADDR_VAR 0 5
59386: PUSH
59387: LD_VAR 0 2
59391: PPUSH
59392: LD_INT 0
59394: PPUSH
59395: CALL_OW 517
59399: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59400: LD_ADDR_VAR 0 4
59404: PUSH
59405: DOUBLE
59406: LD_INT 1
59408: DEC
59409: ST_TO_ADDR
59410: LD_VAR 0 5
59414: PUSH
59415: LD_INT 1
59417: ARRAY
59418: PUSH
59419: FOR_TO
59420: IFFALSE 59499
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59422: LD_VAR 0 5
59426: PUSH
59427: LD_INT 1
59429: ARRAY
59430: PUSH
59431: LD_VAR 0 4
59435: ARRAY
59436: PPUSH
59437: LD_VAR 0 5
59441: PUSH
59442: LD_INT 2
59444: ARRAY
59445: PUSH
59446: LD_VAR 0 4
59450: ARRAY
59451: PPUSH
59452: CALL_OW 351
59456: IFFALSE 59497
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59458: LD_VAR 0 5
59462: PUSH
59463: LD_INT 1
59465: ARRAY
59466: PUSH
59467: LD_VAR 0 4
59471: ARRAY
59472: PPUSH
59473: LD_VAR 0 5
59477: PUSH
59478: LD_INT 2
59480: ARRAY
59481: PUSH
59482: LD_VAR 0 4
59486: ARRAY
59487: PPUSH
59488: LD_VAR 0 1
59492: PPUSH
59493: CALL_OW 244
// end ;
59497: GO 59419
59499: POP
59500: POP
// end ;
59501: LD_VAR 0 3
59505: RET
// export function UniqueArray ( array ) ; var i ; begin
59506: LD_INT 0
59508: PPUSH
59509: PPUSH
// result := [ ] ;
59510: LD_ADDR_VAR 0 2
59514: PUSH
59515: EMPTY
59516: ST_TO_ADDR
// if not array then
59517: LD_VAR 0 1
59521: NOT
59522: IFFALSE 59526
// exit ;
59524: GO 59587
// for i := 1 to array do
59526: LD_ADDR_VAR 0 3
59530: PUSH
59531: DOUBLE
59532: LD_INT 1
59534: DEC
59535: ST_TO_ADDR
59536: LD_VAR 0 1
59540: PUSH
59541: FOR_TO
59542: IFFALSE 59585
// if not array [ i ] in result then
59544: LD_VAR 0 1
59548: PUSH
59549: LD_VAR 0 3
59553: ARRAY
59554: PUSH
59555: LD_VAR 0 2
59559: IN
59560: NOT
59561: IFFALSE 59583
// result := Join ( result , i ) ;
59563: LD_ADDR_VAR 0 2
59567: PUSH
59568: LD_VAR 0 2
59572: PPUSH
59573: LD_VAR 0 3
59577: PPUSH
59578: CALL 54238 0 2
59582: ST_TO_ADDR
59583: GO 59541
59585: POP
59586: POP
// end ; end_of_file
59587: LD_VAR 0 2
59591: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59592: LD_INT 0
59594: PPUSH
// ComRadiation ( un ) ;
59595: LD_VAR 0 1
59599: PPUSH
59600: CALL 60762 0 1
// end ;
59604: LD_VAR 0 2
59608: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59609: LD_INT 0
59611: PPUSH
// ComRadiation ( un ) ;
59612: LD_VAR 0 1
59616: PPUSH
59617: CALL 60762 0 1
// end ;
59621: LD_VAR 0 2
59625: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59626: LD_INT 0
59628: PPUSH
// end ;
59629: LD_VAR 0 4
59633: RET
// export function SOS_Command ( cmd ) ; begin
59634: LD_INT 0
59636: PPUSH
// end ;
59637: LD_VAR 0 2
59641: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59642: LD_INT 0
59644: PPUSH
// end ;
59645: LD_VAR 0 6
59649: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
59650: LD_INT 0
59652: PPUSH
59653: PPUSH
59654: PPUSH
59655: PPUSH
59656: PPUSH
// if not vehicle or not factory then
59657: LD_VAR 0 1
59661: NOT
59662: IFTRUE 59671
59664: PUSH
59665: LD_VAR 0 2
59669: NOT
59670: OR
59671: IFFALSE 59675
// exit ;
59673: GO 60337
// weapon := GetWeapon ( vehicle ) ;
59675: LD_ADDR_VAR 0 7
59679: PUSH
59680: LD_VAR 0 1
59684: PPUSH
59685: CALL_OW 264
59689: ST_TO_ADDR
// if weapon = ar_miner then
59690: LD_VAR 0 7
59694: PUSH
59695: LD_INT 81
59697: EQUAL
59698: IFFALSE 59755
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
59700: LD_ADDR_EXP 54
59704: PUSH
59705: LD_EXP 54
59709: PPUSH
59710: LD_EXP 54
59714: PUSH
59715: LD_INT 1
59717: PLUS
59718: PPUSH
59719: LD_VAR 0 1
59723: PPUSH
59724: CALL_OW 1
59728: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59729: LD_ADDR_EXP 55
59733: PUSH
59734: LD_EXP 55
59738: PPUSH
59739: LD_EXP 55
59743: PUSH
59744: LD_INT 1
59746: PLUS
59747: PPUSH
59748: EMPTY
59749: PPUSH
59750: CALL_OW 1
59754: ST_TO_ADDR
// end ; if not factoryWaypoints then
59755: LD_EXP 57
59759: NOT
59760: IFFALSE 59764
// exit ;
59762: GO 60337
// for i := 1 to Count ( factoryWaypoints ) do
59764: LD_ADDR_VAR 0 4
59768: PUSH
59769: DOUBLE
59770: LD_INT 1
59772: DEC
59773: ST_TO_ADDR
59774: LD_EXP 57
59778: PPUSH
59779: CALL 18262 0 1
59783: PUSH
59784: FOR_TO
59785: IFFALSE 60335
// if factoryWaypoints [ i ] [ 2 ] = factory then
59787: LD_EXP 57
59791: PUSH
59792: LD_VAR 0 4
59796: ARRAY
59797: PUSH
59798: LD_INT 2
59800: ARRAY
59801: PUSH
59802: LD_VAR 0 2
59806: EQUAL
59807: IFFALSE 60333
// begin if GetControl ( vehicle ) = control_manual then
59809: LD_VAR 0 1
59813: PPUSH
59814: CALL_OW 263
59818: PUSH
59819: LD_INT 1
59821: EQUAL
59822: IFFALSE 60186
// begin driver := IsDrivenBy ( vehicle ) ;
59824: LD_ADDR_VAR 0 5
59828: PUSH
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 311
59838: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59839: LD_VAR 0 5
59843: PUSH
59844: LD_EXP 58
59848: IN
59849: IFTRUE 59863
59851: PUSH
59852: LD_VAR 0 1
59856: PUSH
59857: LD_EXP 58
59861: IN
59862: OR
59863: IFFALSE 59869
// exit ;
59865: POP
59866: POP
59867: GO 60337
// if not HasTask ( driver ) then
59869: LD_VAR 0 5
59873: PPUSH
59874: CALL_OW 314
59878: NOT
59879: IFFALSE 60184
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59881: LD_ADDR_EXP 58
59885: PUSH
59886: LD_EXP 58
59890: PPUSH
59891: LD_VAR 0 5
59895: PPUSH
59896: CALL 54238 0 2
59900: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59901: LD_ADDR_EXP 58
59905: PUSH
59906: LD_EXP 58
59910: PPUSH
59911: LD_VAR 0 1
59915: PPUSH
59916: CALL 54238 0 2
59920: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59921: LD_ADDR_VAR 0 6
59925: PUSH
59926: LD_EXP 57
59930: PUSH
59931: LD_VAR 0 4
59935: ARRAY
59936: PUSH
59937: LD_INT 3
59939: ARRAY
59940: PPUSH
59941: LD_EXP 57
59945: PUSH
59946: LD_VAR 0 4
59950: ARRAY
59951: PUSH
59952: LD_INT 4
59954: ARRAY
59955: PPUSH
59956: CALL_OW 428
59960: ST_TO_ADDR
// if hex then
59961: LD_VAR 0 6
59965: IFFALSE 59983
// ComMoveUnit ( driver , hex ) else
59967: LD_VAR 0 5
59971: PPUSH
59972: LD_VAR 0 6
59976: PPUSH
59977: CALL_OW 112
59981: GO 60067
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59983: LD_VAR 0 1
59987: PPUSH
59988: LD_EXP 57
59992: PUSH
59993: LD_VAR 0 4
59997: ARRAY
59998: PUSH
59999: LD_INT 3
60001: ARRAY
60002: PPUSH
60003: LD_EXP 57
60007: PUSH
60008: LD_VAR 0 4
60012: ARRAY
60013: PUSH
60014: LD_INT 4
60016: ARRAY
60017: PPUSH
60018: CALL_OW 297
60022: PUSH
60023: LD_INT 0
60025: GREATER
60026: IFFALSE 60067
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60028: LD_VAR 0 5
60032: PPUSH
60033: LD_EXP 57
60037: PUSH
60038: LD_VAR 0 4
60042: ARRAY
60043: PUSH
60044: LD_INT 3
60046: ARRAY
60047: PPUSH
60048: LD_EXP 57
60052: PUSH
60053: LD_VAR 0 4
60057: ARRAY
60058: PUSH
60059: LD_INT 4
60061: ARRAY
60062: PPUSH
60063: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60067: LD_VAR 0 5
60071: PPUSH
60072: CALL_OW 181
// if Multiplayer then
60076: LD_OWVAR 4
60080: IFFALSE 60129
// begin repeat wait ( 10 ) ;
60082: LD_INT 10
60084: PPUSH
60085: CALL_OW 67
// until not IsInUnit ( driver ) ;
60089: LD_VAR 0 5
60093: PPUSH
60094: CALL_OW 310
60098: NOT
60099: IFFALSE 60082
// if not HasTask ( driver ) then
60101: LD_VAR 0 5
60105: PPUSH
60106: CALL_OW 314
60110: NOT
60111: IFFALSE 60127
// ComEnterUnit ( driver , factory ) ;
60113: LD_VAR 0 5
60117: PPUSH
60118: LD_VAR 0 2
60122: PPUSH
60123: CALL_OW 120
// end else
60127: GO 60143
// AddComEnterUnit ( driver , factory ) ;
60129: LD_VAR 0 5
60133: PPUSH
60134: LD_VAR 0 2
60138: PPUSH
60139: CALL_OW 180
// wait ( 0 0$1 ) ;
60143: LD_INT 35
60145: PPUSH
60146: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60150: LD_ADDR_EXP 58
60154: PUSH
60155: LD_EXP 58
60159: PUSH
60160: LD_VAR 0 5
60164: DIFF
60165: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60166: LD_ADDR_EXP 58
60170: PUSH
60171: LD_EXP 58
60175: PUSH
60176: LD_VAR 0 1
60180: DIFF
60181: ST_TO_ADDR
// break ;
60182: GO 60335
// end ; end else
60184: GO 60333
// if GetControl ( vehicle ) = control_remote then
60186: LD_VAR 0 1
60190: PPUSH
60191: CALL_OW 263
60195: PUSH
60196: LD_INT 2
60198: EQUAL
60199: IFFALSE 60285
// begin wait ( 0 0$2 ) ;
60201: LD_INT 70
60203: PPUSH
60204: CALL_OW 67
// repeat wait ( 10 ) ;
60208: LD_INT 10
60210: PPUSH
60211: CALL_OW 67
// Connect ( vehicle ) ;
60215: LD_VAR 0 1
60219: PPUSH
60220: CALL 24540 0 1
// until IsControledBy ( vehicle ) ;
60224: LD_VAR 0 1
60228: PPUSH
60229: CALL_OW 312
60233: IFFALSE 60208
// wait ( 10 ) ;
60235: LD_INT 10
60237: PPUSH
60238: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60242: LD_VAR 0 1
60246: PPUSH
60247: LD_EXP 57
60251: PUSH
60252: LD_VAR 0 4
60256: ARRAY
60257: PUSH
60258: LD_INT 3
60260: ARRAY
60261: PPUSH
60262: LD_EXP 57
60266: PUSH
60267: LD_VAR 0 4
60271: ARRAY
60272: PUSH
60273: LD_INT 4
60275: ARRAY
60276: PPUSH
60277: CALL_OW 111
// break ;
60281: GO 60335
// end else
60283: GO 60333
// begin wait ( 0 0$3 ) ;
60285: LD_INT 105
60287: PPUSH
60288: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60292: LD_VAR 0 1
60296: PPUSH
60297: LD_EXP 57
60301: PUSH
60302: LD_VAR 0 4
60306: ARRAY
60307: PUSH
60308: LD_INT 3
60310: ARRAY
60311: PPUSH
60312: LD_EXP 57
60316: PUSH
60317: LD_VAR 0 4
60321: ARRAY
60322: PUSH
60323: LD_INT 4
60325: ARRAY
60326: PPUSH
60327: CALL_OW 111
// break ;
60331: GO 60335
// end ; end ;
60333: GO 59784
60335: POP
60336: POP
// end ;
60337: LD_VAR 0 3
60341: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60342: LD_INT 0
60344: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60345: LD_VAR 0 1
60349: PUSH
60350: LD_INT 250
60352: EQUAL
60353: IFFALSE 60370
60355: PUSH
60356: LD_VAR 0 2
60360: PPUSH
60361: CALL_OW 264
60365: PUSH
60366: LD_INT 81
60368: EQUAL
60369: AND
60370: IFFALSE 60391
// MinerPlaceMine ( unit , x , y ) ;
60372: LD_VAR 0 2
60376: PPUSH
60377: LD_VAR 0 4
60381: PPUSH
60382: LD_VAR 0 5
60386: PPUSH
60387: CALL 63737 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60391: LD_VAR 0 1
60395: PUSH
60396: LD_INT 251
60398: EQUAL
60399: IFFALSE 60416
60401: PUSH
60402: LD_VAR 0 2
60406: PPUSH
60407: CALL_OW 264
60411: PUSH
60412: LD_INT 81
60414: EQUAL
60415: AND
60416: IFFALSE 60437
// MinerDetonateMine ( unit , x , y ) ;
60418: LD_VAR 0 2
60422: PPUSH
60423: LD_VAR 0 4
60427: PPUSH
60428: LD_VAR 0 5
60432: PPUSH
60433: CALL 64144 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60437: LD_VAR 0 1
60441: PUSH
60442: LD_INT 252
60444: EQUAL
60445: IFFALSE 60462
60447: PUSH
60448: LD_VAR 0 2
60452: PPUSH
60453: CALL_OW 264
60457: PUSH
60458: LD_INT 81
60460: EQUAL
60461: AND
60462: IFFALSE 60483
// MinerCreateMinefield ( unit , x , y ) ;
60464: LD_VAR 0 2
60468: PPUSH
60469: LD_VAR 0 4
60473: PPUSH
60474: LD_VAR 0 5
60478: PPUSH
60479: CALL 64376 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60483: LD_VAR 0 1
60487: PUSH
60488: LD_INT 253
60490: EQUAL
60491: IFFALSE 60508
60493: PUSH
60494: LD_VAR 0 2
60498: PPUSH
60499: CALL_OW 257
60503: PUSH
60504: LD_INT 5
60506: EQUAL
60507: AND
60508: IFFALSE 60529
// ComBinocular ( unit , x , y ) ;
60510: LD_VAR 0 2
60514: PPUSH
60515: LD_VAR 0 4
60519: PPUSH
60520: LD_VAR 0 5
60524: PPUSH
60525: CALL 64751 0 3
// if selectedUnit then
60529: LD_VAR 0 3
60533: IFFALSE 60593
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60535: LD_VAR 0 1
60539: PUSH
60540: LD_INT 254
60542: EQUAL
60543: IFFALSE 60560
60545: PUSH
60546: LD_VAR 0 2
60550: PPUSH
60551: CALL_OW 264
60555: PUSH
60556: LD_INT 99
60558: EQUAL
60559: AND
60560: IFFALSE 60577
60562: PUSH
60563: LD_VAR 0 3
60567: PPUSH
60568: CALL_OW 263
60572: PUSH
60573: LD_INT 3
60575: EQUAL
60576: AND
60577: IFFALSE 60593
// HackDestroyVehicle ( unit , selectedUnit ) ;
60579: LD_VAR 0 2
60583: PPUSH
60584: LD_VAR 0 3
60588: PPUSH
60589: CALL 62927 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60593: LD_VAR 0 1
60597: PUSH
60598: LD_INT 255
60600: EQUAL
60601: IFFALSE 60625
60603: PUSH
60604: LD_VAR 0 2
60608: PPUSH
60609: CALL_OW 264
60613: PUSH
60614: LD_INT 14
60616: PUSH
60617: LD_INT 53
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: IN
60624: AND
60625: IFFALSE 60643
60627: PUSH
60628: LD_VAR 0 4
60632: PPUSH
60633: LD_VAR 0 5
60637: PPUSH
60638: CALL_OW 488
60642: AND
60643: IFFALSE 60667
// CutTreeXYR ( unit , x , y , 12 ) ;
60645: LD_VAR 0 2
60649: PPUSH
60650: LD_VAR 0 4
60654: PPUSH
60655: LD_VAR 0 5
60659: PPUSH
60660: LD_INT 12
60662: PPUSH
60663: CALL 60858 0 4
// if cmd = 256 then
60667: LD_VAR 0 1
60671: PUSH
60672: LD_INT 256
60674: EQUAL
60675: IFFALSE 60696
// SetFactoryWaypoint ( unit , x , y ) ;
60677: LD_VAR 0 2
60681: PPUSH
60682: LD_VAR 0 4
60686: PPUSH
60687: LD_VAR 0 5
60691: PPUSH
60692: CALL 66778 0 3
// if cmd = 257 then
60696: LD_VAR 0 1
60700: PUSH
60701: LD_INT 257
60703: EQUAL
60704: IFFALSE 60725
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60706: LD_VAR 0 2
60710: PPUSH
60711: LD_VAR 0 4
60715: PPUSH
60716: LD_VAR 0 5
60720: PPUSH
60721: CALL 67274 0 3
// if cmd = 258 then
60725: LD_VAR 0 1
60729: PUSH
60730: LD_INT 258
60732: EQUAL
60733: IFFALSE 60757
// BurnTreeXYR ( unit , x , y , 8 ) ;
60735: LD_VAR 0 2
60739: PPUSH
60740: LD_VAR 0 4
60744: PPUSH
60745: LD_VAR 0 5
60749: PPUSH
60750: LD_INT 8
60752: PPUSH
60753: CALL 61280 0 4
// end ;
60757: LD_VAR 0 6
60761: RET
// export function ComRadiation ( un ) ; var eff ; begin
60762: LD_INT 0
60764: PPUSH
60765: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60766: LD_VAR 0 1
60770: PPUSH
60771: CALL_OW 264
60775: PUSH
60776: LD_INT 91
60778: NONEQUAL
60779: IFFALSE 60783
// exit ;
60781: GO 60853
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60783: LD_INT 68
60785: PPUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: CALL_OW 255
60795: PPUSH
60796: CALL_OW 321
60800: PUSH
60801: LD_INT 2
60803: EQUAL
60804: IFFALSE 60816
// eff := 50 else
60806: LD_ADDR_VAR 0 3
60810: PUSH
60811: LD_INT 50
60813: ST_TO_ADDR
60814: GO 60824
// eff := 25 ;
60816: LD_ADDR_VAR 0 3
60820: PUSH
60821: LD_INT 25
60823: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 250
60833: PPUSH
60834: LD_VAR 0 1
60838: PPUSH
60839: CALL_OW 251
60843: PPUSH
60844: LD_VAR 0 3
60848: PPUSH
60849: CALL_OW 495
// end ;
60853: LD_VAR 0 2
60857: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60858: LD_INT 0
60860: PPUSH
60861: PPUSH
60862: PPUSH
60863: PPUSH
60864: PPUSH
60865: PPUSH
60866: PPUSH
60867: PPUSH
60868: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60869: LD_VAR 0 1
60873: PPUSH
60874: CALL_OW 302
60878: NOT
60879: IFTRUE 60898
60881: PUSH
60882: LD_VAR 0 2
60886: PPUSH
60887: LD_VAR 0 3
60891: PPUSH
60892: CALL_OW 488
60896: NOT
60897: OR
60898: IFTRUE 60907
60900: PUSH
60901: LD_VAR 0 4
60905: NOT
60906: OR
60907: IFFALSE 60911
// exit ;
60909: GO 61275
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
60911: LD_VAR 0 1
60915: PPUSH
60916: CALL_OW 437
60920: PPUSH
60921: CALL 18262 0 1
60925: PUSH
60926: LD_INT 10
60928: GREATER
60929: IFFALSE 60933
// exit ;
60931: GO 61275
// list := [ ] ;
60933: LD_ADDR_VAR 0 13
60937: PUSH
60938: EMPTY
60939: ST_TO_ADDR
// if x - r < 0 then
60940: LD_VAR 0 2
60944: PUSH
60945: LD_VAR 0 4
60949: MINUS
60950: PUSH
60951: LD_INT 0
60953: LESS
60954: IFFALSE 60966
// min_x := 0 else
60956: LD_ADDR_VAR 0 7
60960: PUSH
60961: LD_INT 0
60963: ST_TO_ADDR
60964: GO 60982
// min_x := x - r ;
60966: LD_ADDR_VAR 0 7
60970: PUSH
60971: LD_VAR 0 2
60975: PUSH
60976: LD_VAR 0 4
60980: MINUS
60981: ST_TO_ADDR
// if y - r < 0 then
60982: LD_VAR 0 3
60986: PUSH
60987: LD_VAR 0 4
60991: MINUS
60992: PUSH
60993: LD_INT 0
60995: LESS
60996: IFFALSE 61008
// min_y := 0 else
60998: LD_ADDR_VAR 0 8
61002: PUSH
61003: LD_INT 0
61005: ST_TO_ADDR
61006: GO 61024
// min_y := y - r ;
61008: LD_ADDR_VAR 0 8
61012: PUSH
61013: LD_VAR 0 3
61017: PUSH
61018: LD_VAR 0 4
61022: MINUS
61023: ST_TO_ADDR
// max_x := x + r ;
61024: LD_ADDR_VAR 0 9
61028: PUSH
61029: LD_VAR 0 2
61033: PUSH
61034: LD_VAR 0 4
61038: PLUS
61039: ST_TO_ADDR
// max_y := y + r ;
61040: LD_ADDR_VAR 0 10
61044: PUSH
61045: LD_VAR 0 3
61049: PUSH
61050: LD_VAR 0 4
61054: PLUS
61055: ST_TO_ADDR
// for _x = min_x to max_x do
61056: LD_ADDR_VAR 0 11
61060: PUSH
61061: DOUBLE
61062: LD_VAR 0 7
61066: DEC
61067: ST_TO_ADDR
61068: LD_VAR 0 9
61072: PUSH
61073: FOR_TO
61074: IFFALSE 61193
// for _y = min_y to max_y do
61076: LD_ADDR_VAR 0 12
61080: PUSH
61081: DOUBLE
61082: LD_VAR 0 8
61086: DEC
61087: ST_TO_ADDR
61088: LD_VAR 0 10
61092: PUSH
61093: FOR_TO
61094: IFFALSE 61189
// begin if not ValidHex ( _x , _y ) then
61096: LD_VAR 0 11
61100: PPUSH
61101: LD_VAR 0 12
61105: PPUSH
61106: CALL_OW 488
61110: NOT
61111: IFFALSE 61115
// continue ;
61113: GO 61093
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61115: LD_VAR 0 11
61119: PPUSH
61120: LD_VAR 0 12
61124: PPUSH
61125: CALL_OW 351
61129: IFFALSE 61147
61131: PUSH
61132: LD_VAR 0 11
61136: PPUSH
61137: LD_VAR 0 12
61141: PPUSH
61142: CALL_OW 554
61146: AND
61147: IFFALSE 61187
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61149: LD_ADDR_VAR 0 13
61153: PUSH
61154: LD_VAR 0 13
61158: PPUSH
61159: LD_VAR 0 13
61163: PUSH
61164: LD_INT 1
61166: PLUS
61167: PPUSH
61168: LD_VAR 0 11
61172: PUSH
61173: LD_VAR 0 12
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PPUSH
61182: CALL_OW 2
61186: ST_TO_ADDR
// end ;
61187: GO 61093
61189: POP
61190: POP
61191: GO 61073
61193: POP
61194: POP
// if not list then
61195: LD_VAR 0 13
61199: NOT
61200: IFFALSE 61204
// exit ;
61202: GO 61275
// for i in list do
61204: LD_ADDR_VAR 0 6
61208: PUSH
61209: LD_VAR 0 13
61213: PUSH
61214: FOR_IN
61215: IFFALSE 61273
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61217: LD_VAR 0 1
61221: PPUSH
61222: LD_STRING M
61224: PUSH
61225: LD_VAR 0 6
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PUSH
61234: LD_VAR 0 6
61238: PUSH
61239: LD_INT 2
61241: ARRAY
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: PUSH
61264: EMPTY
61265: LIST
61266: PPUSH
61267: CALL_OW 447
61271: GO 61214
61273: POP
61274: POP
// end ;
61275: LD_VAR 0 5
61279: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61280: LD_INT 0
61282: PPUSH
61283: PPUSH
61284: PPUSH
61285: PPUSH
61286: PPUSH
61287: PPUSH
61288: PPUSH
61289: PPUSH
61290: PPUSH
61291: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61292: LD_VAR 0 1
61296: PPUSH
61297: CALL_OW 302
61301: NOT
61302: IFTRUE 61321
61304: PUSH
61305: LD_VAR 0 2
61309: PPUSH
61310: LD_VAR 0 3
61314: PPUSH
61315: CALL_OW 488
61319: NOT
61320: OR
61321: IFTRUE 61330
61323: PUSH
61324: LD_VAR 0 4
61328: NOT
61329: OR
61330: IFFALSE 61334
// exit ;
61332: GO 61873
// if Count ( GetTaskList ( flame ) ) > 10 then
61334: LD_VAR 0 1
61338: PPUSH
61339: CALL_OW 437
61343: PPUSH
61344: CALL 18262 0 1
61348: PUSH
61349: LD_INT 10
61351: GREATER
61352: IFFALSE 61356
// exit ;
61354: GO 61873
// list := [ ] ;
61356: LD_ADDR_VAR 0 13
61360: PUSH
61361: EMPTY
61362: ST_TO_ADDR
// if x - r < 0 then
61363: LD_VAR 0 2
61367: PUSH
61368: LD_VAR 0 4
61372: MINUS
61373: PUSH
61374: LD_INT 0
61376: LESS
61377: IFFALSE 61389
// min_x := 0 else
61379: LD_ADDR_VAR 0 7
61383: PUSH
61384: LD_INT 0
61386: ST_TO_ADDR
61387: GO 61405
// min_x := x - r ;
61389: LD_ADDR_VAR 0 7
61393: PUSH
61394: LD_VAR 0 2
61398: PUSH
61399: LD_VAR 0 4
61403: MINUS
61404: ST_TO_ADDR
// if y - r < 0 then
61405: LD_VAR 0 3
61409: PUSH
61410: LD_VAR 0 4
61414: MINUS
61415: PUSH
61416: LD_INT 0
61418: LESS
61419: IFFALSE 61431
// min_y := 0 else
61421: LD_ADDR_VAR 0 8
61425: PUSH
61426: LD_INT 0
61428: ST_TO_ADDR
61429: GO 61447
// min_y := y - r ;
61431: LD_ADDR_VAR 0 8
61435: PUSH
61436: LD_VAR 0 3
61440: PUSH
61441: LD_VAR 0 4
61445: MINUS
61446: ST_TO_ADDR
// max_x := x + r ;
61447: LD_ADDR_VAR 0 9
61451: PUSH
61452: LD_VAR 0 2
61456: PUSH
61457: LD_VAR 0 4
61461: PLUS
61462: ST_TO_ADDR
// max_y := y + r ;
61463: LD_ADDR_VAR 0 10
61467: PUSH
61468: LD_VAR 0 3
61472: PUSH
61473: LD_VAR 0 4
61477: PLUS
61478: ST_TO_ADDR
// for _x = min_x to max_x do
61479: LD_ADDR_VAR 0 11
61483: PUSH
61484: DOUBLE
61485: LD_VAR 0 7
61489: DEC
61490: ST_TO_ADDR
61491: LD_VAR 0 9
61495: PUSH
61496: FOR_TO
61497: IFFALSE 61616
// for _y = min_y to max_y do
61499: LD_ADDR_VAR 0 12
61503: PUSH
61504: DOUBLE
61505: LD_VAR 0 8
61509: DEC
61510: ST_TO_ADDR
61511: LD_VAR 0 10
61515: PUSH
61516: FOR_TO
61517: IFFALSE 61612
// begin if not ValidHex ( _x , _y ) then
61519: LD_VAR 0 11
61523: PPUSH
61524: LD_VAR 0 12
61528: PPUSH
61529: CALL_OW 488
61533: NOT
61534: IFFALSE 61538
// continue ;
61536: GO 61516
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61538: LD_VAR 0 11
61542: PPUSH
61543: LD_VAR 0 12
61547: PPUSH
61548: CALL_OW 351
61552: IFFALSE 61570
61554: PUSH
61555: LD_VAR 0 11
61559: PPUSH
61560: LD_VAR 0 12
61564: PPUSH
61565: CALL_OW 554
61569: AND
61570: IFFALSE 61610
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61572: LD_ADDR_VAR 0 13
61576: PUSH
61577: LD_VAR 0 13
61581: PPUSH
61582: LD_VAR 0 13
61586: PUSH
61587: LD_INT 1
61589: PLUS
61590: PPUSH
61591: LD_VAR 0 11
61595: PUSH
61596: LD_VAR 0 12
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PPUSH
61605: CALL_OW 2
61609: ST_TO_ADDR
// end ;
61610: GO 61516
61612: POP
61613: POP
61614: GO 61496
61616: POP
61617: POP
// if not list then
61618: LD_VAR 0 13
61622: NOT
61623: IFFALSE 61627
// exit ;
61625: GO 61873
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61627: LD_ADDR_VAR 0 13
61631: PUSH
61632: LD_VAR 0 1
61636: PPUSH
61637: LD_VAR 0 13
61641: PPUSH
61642: LD_INT 1
61644: PPUSH
61645: LD_INT 1
61647: PPUSH
61648: CALL 21668 0 4
61652: ST_TO_ADDR
// ComStop ( flame ) ;
61653: LD_VAR 0 1
61657: PPUSH
61658: CALL_OW 141
// for i in list do
61662: LD_ADDR_VAR 0 6
61666: PUSH
61667: LD_VAR 0 13
61671: PUSH
61672: FOR_IN
61673: IFFALSE 61704
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_VAR 0 6
61684: PUSH
61685: LD_INT 1
61687: ARRAY
61688: PPUSH
61689: LD_VAR 0 6
61693: PUSH
61694: LD_INT 2
61696: ARRAY
61697: PPUSH
61698: CALL_OW 176
61702: GO 61672
61704: POP
61705: POP
// repeat wait ( 0 0$1 ) ;
61706: LD_INT 35
61708: PPUSH
61709: CALL_OW 67
// task := GetTaskList ( flame ) ;
61713: LD_ADDR_VAR 0 14
61717: PUSH
61718: LD_VAR 0 1
61722: PPUSH
61723: CALL_OW 437
61727: ST_TO_ADDR
// if not task then
61728: LD_VAR 0 14
61732: NOT
61733: IFFALSE 61737
// exit ;
61735: GO 61873
// if task [ 1 ] [ 1 ] <> | then
61737: LD_VAR 0 14
61741: PUSH
61742: LD_INT 1
61744: ARRAY
61745: PUSH
61746: LD_INT 1
61748: ARRAY
61749: PUSH
61750: LD_STRING |
61752: NONEQUAL
61753: IFFALSE 61757
// exit ;
61755: GO 61873
// _x := task [ 1 ] [ 2 ] ;
61757: LD_ADDR_VAR 0 11
61761: PUSH
61762: LD_VAR 0 14
61766: PUSH
61767: LD_INT 1
61769: ARRAY
61770: PUSH
61771: LD_INT 2
61773: ARRAY
61774: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61775: LD_ADDR_VAR 0 12
61779: PUSH
61780: LD_VAR 0 14
61784: PUSH
61785: LD_INT 1
61787: ARRAY
61788: PUSH
61789: LD_INT 3
61791: ARRAY
61792: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61793: LD_VAR 0 11
61797: PPUSH
61798: LD_VAR 0 12
61802: PPUSH
61803: CALL_OW 351
61807: NOT
61808: IFTRUE 61827
61810: PUSH
61811: LD_VAR 0 11
61815: PPUSH
61816: LD_VAR 0 12
61820: PPUSH
61821: CALL_OW 554
61825: NOT
61826: OR
61827: IFFALSE 61861
// begin task := Delete ( task , 1 ) ;
61829: LD_ADDR_VAR 0 14
61833: PUSH
61834: LD_VAR 0 14
61838: PPUSH
61839: LD_INT 1
61841: PPUSH
61842: CALL_OW 3
61846: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61847: LD_VAR 0 1
61851: PPUSH
61852: LD_VAR 0 14
61856: PPUSH
61857: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61861: LD_VAR 0 1
61865: PPUSH
61866: CALL_OW 314
61870: NOT
61871: IFFALSE 61706
// end ;
61873: LD_VAR 0 5
61877: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61878: LD_EXP 47
61882: NOT
61883: IFFALSE 61933
61885: GO 61887
61887: DISABLE
// begin initHack := true ;
61888: LD_ADDR_EXP 47
61892: PUSH
61893: LD_INT 1
61895: ST_TO_ADDR
// hackTanks := [ ] ;
61896: LD_ADDR_EXP 48
61900: PUSH
61901: EMPTY
61902: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61903: LD_ADDR_EXP 49
61907: PUSH
61908: EMPTY
61909: ST_TO_ADDR
// hackLimit := 3 ;
61910: LD_ADDR_EXP 50
61914: PUSH
61915: LD_INT 3
61917: ST_TO_ADDR
// hackDist := 12 ;
61918: LD_ADDR_EXP 51
61922: PUSH
61923: LD_INT 12
61925: ST_TO_ADDR
// hackCounter := [ ] ;
61926: LD_ADDR_EXP 52
61930: PUSH
61931: EMPTY
61932: ST_TO_ADDR
// end ;
61933: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61934: LD_EXP 47
61938: IFFALSE 61956
61940: PUSH
61941: LD_INT 34
61943: PUSH
61944: LD_INT 99
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PPUSH
61951: CALL_OW 69
61955: AND
61956: IFFALSE 62209
61958: GO 61960
61960: DISABLE
61961: LD_INT 0
61963: PPUSH
61964: PPUSH
// begin enable ;
61965: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61966: LD_ADDR_VAR 0 1
61970: PUSH
61971: LD_INT 34
61973: PUSH
61974: LD_INT 99
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PPUSH
61981: CALL_OW 69
61985: PUSH
61986: FOR_IN
61987: IFFALSE 62207
// begin if not i in hackTanks then
61989: LD_VAR 0 1
61993: PUSH
61994: LD_EXP 48
61998: IN
61999: NOT
62000: IFFALSE 62083
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62002: LD_ADDR_EXP 48
62006: PUSH
62007: LD_EXP 48
62011: PPUSH
62012: LD_EXP 48
62016: PUSH
62017: LD_INT 1
62019: PLUS
62020: PPUSH
62021: LD_VAR 0 1
62025: PPUSH
62026: CALL_OW 1
62030: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62031: LD_ADDR_EXP 49
62035: PUSH
62036: LD_EXP 49
62040: PPUSH
62041: LD_EXP 49
62045: PUSH
62046: LD_INT 1
62048: PLUS
62049: PPUSH
62050: EMPTY
62051: PPUSH
62052: CALL_OW 1
62056: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62057: LD_ADDR_EXP 52
62061: PUSH
62062: LD_EXP 52
62066: PPUSH
62067: LD_EXP 52
62071: PUSH
62072: LD_INT 1
62074: PLUS
62075: PPUSH
62076: EMPTY
62077: PPUSH
62078: CALL_OW 1
62082: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62083: LD_VAR 0 1
62087: PPUSH
62088: CALL_OW 302
62092: NOT
62093: IFFALSE 62106
// begin HackUnlinkAll ( i ) ;
62095: LD_VAR 0 1
62099: PPUSH
62100: CALL 62212 0 1
// continue ;
62104: GO 61986
// end ; HackCheckCapturedStatus ( i ) ;
62106: LD_VAR 0 1
62110: PPUSH
62111: CALL 62657 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62115: LD_ADDR_VAR 0 2
62119: PUSH
62120: LD_INT 81
62122: PUSH
62123: LD_VAR 0 1
62127: PPUSH
62128: CALL_OW 255
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 33
62139: PUSH
62140: LD_INT 3
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 91
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_EXP 51
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 50
62167: PUSH
62168: EMPTY
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: PPUSH
62177: CALL_OW 69
62181: ST_TO_ADDR
// if not tmp then
62182: LD_VAR 0 2
62186: NOT
62187: IFFALSE 62191
// continue ;
62189: GO 61986
// HackLink ( i , tmp ) ;
62191: LD_VAR 0 1
62195: PPUSH
62196: LD_VAR 0 2
62200: PPUSH
62201: CALL 62348 0 2
// end ;
62205: GO 61986
62207: POP
62208: POP
// end ;
62209: PPOPN 2
62211: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62212: LD_INT 0
62214: PPUSH
62215: PPUSH
62216: PPUSH
// if not hack in hackTanks then
62217: LD_VAR 0 1
62221: PUSH
62222: LD_EXP 48
62226: IN
62227: NOT
62228: IFFALSE 62232
// exit ;
62230: GO 62343
// index := GetElementIndex ( hackTanks , hack ) ;
62232: LD_ADDR_VAR 0 4
62236: PUSH
62237: LD_EXP 48
62241: PPUSH
62242: LD_VAR 0 1
62246: PPUSH
62247: CALL 20963 0 2
62251: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62252: LD_EXP 49
62256: PUSH
62257: LD_VAR 0 4
62261: ARRAY
62262: IFFALSE 62343
// begin for i in hackTanksCaptured [ index ] do
62264: LD_ADDR_VAR 0 3
62268: PUSH
62269: LD_EXP 49
62273: PUSH
62274: LD_VAR 0 4
62278: ARRAY
62279: PUSH
62280: FOR_IN
62281: IFFALSE 62307
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62283: LD_VAR 0 3
62287: PUSH
62288: LD_INT 1
62290: ARRAY
62291: PPUSH
62292: LD_VAR 0 3
62296: PUSH
62297: LD_INT 2
62299: ARRAY
62300: PPUSH
62301: CALL_OW 235
62305: GO 62280
62307: POP
62308: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62309: LD_ADDR_EXP 49
62313: PUSH
62314: LD_EXP 49
62318: PPUSH
62319: LD_VAR 0 4
62323: PPUSH
62324: EMPTY
62325: PPUSH
62326: CALL_OW 1
62330: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62331: LD_VAR 0 1
62335: PPUSH
62336: LD_INT 0
62338: PPUSH
62339: CALL_OW 505
// end ; end ;
62343: LD_VAR 0 2
62347: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62348: LD_INT 0
62350: PPUSH
62351: PPUSH
62352: PPUSH
// if not hack in hackTanks or not vehicles then
62353: LD_VAR 0 1
62357: PUSH
62358: LD_EXP 48
62362: IN
62363: NOT
62364: IFTRUE 62373
62366: PUSH
62367: LD_VAR 0 2
62371: NOT
62372: OR
62373: IFFALSE 62377
// exit ;
62375: GO 62652
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62377: LD_ADDR_VAR 0 2
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: LD_VAR 0 2
62391: PPUSH
62392: LD_INT 1
62394: PPUSH
62395: LD_INT 1
62397: PPUSH
62398: CALL 21615 0 4
62402: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62403: LD_ADDR_VAR 0 5
62407: PUSH
62408: LD_EXP 48
62412: PPUSH
62413: LD_VAR 0 1
62417: PPUSH
62418: CALL 20963 0 2
62422: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62423: LD_EXP 49
62427: PUSH
62428: LD_VAR 0 5
62432: ARRAY
62433: PUSH
62434: LD_EXP 50
62438: LESS
62439: IFFALSE 62628
// begin for i := 1 to vehicles do
62441: LD_ADDR_VAR 0 4
62445: PUSH
62446: DOUBLE
62447: LD_INT 1
62449: DEC
62450: ST_TO_ADDR
62451: LD_VAR 0 2
62455: PUSH
62456: FOR_TO
62457: IFFALSE 62626
// begin if hackTanksCaptured [ index ] = hackLimit then
62459: LD_EXP 49
62463: PUSH
62464: LD_VAR 0 5
62468: ARRAY
62469: PUSH
62470: LD_EXP 50
62474: EQUAL
62475: IFFALSE 62479
// break ;
62477: GO 62626
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62479: LD_ADDR_EXP 52
62483: PUSH
62484: LD_EXP 52
62488: PPUSH
62489: LD_VAR 0 5
62493: PPUSH
62494: LD_EXP 52
62498: PUSH
62499: LD_VAR 0 5
62503: ARRAY
62504: PUSH
62505: LD_INT 1
62507: PLUS
62508: PPUSH
62509: CALL_OW 1
62513: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62514: LD_ADDR_EXP 49
62518: PUSH
62519: LD_EXP 49
62523: PPUSH
62524: LD_VAR 0 5
62528: PUSH
62529: LD_EXP 49
62533: PUSH
62534: LD_VAR 0 5
62538: ARRAY
62539: PUSH
62540: LD_INT 1
62542: PLUS
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PPUSH
62548: LD_VAR 0 2
62552: PUSH
62553: LD_VAR 0 4
62557: ARRAY
62558: PUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_VAR 0 4
62568: ARRAY
62569: PPUSH
62570: CALL_OW 255
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PPUSH
62579: CALL 21180 0 3
62583: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62584: LD_VAR 0 2
62588: PUSH
62589: LD_VAR 0 4
62593: ARRAY
62594: PPUSH
62595: LD_VAR 0 1
62599: PPUSH
62600: CALL_OW 255
62604: PPUSH
62605: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62609: LD_VAR 0 2
62613: PUSH
62614: LD_VAR 0 4
62618: ARRAY
62619: PPUSH
62620: CALL_OW 141
// end ;
62624: GO 62456
62626: POP
62627: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62628: LD_VAR 0 1
62632: PPUSH
62633: LD_EXP 49
62637: PUSH
62638: LD_VAR 0 5
62642: ARRAY
62643: PUSH
62644: LD_INT 0
62646: PLUS
62647: PPUSH
62648: CALL_OW 505
// end ;
62652: LD_VAR 0 3
62656: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62657: LD_INT 0
62659: PPUSH
62660: PPUSH
62661: PPUSH
62662: PPUSH
// if not hack in hackTanks then
62663: LD_VAR 0 1
62667: PUSH
62668: LD_EXP 48
62672: IN
62673: NOT
62674: IFFALSE 62678
// exit ;
62676: GO 62922
// index := GetElementIndex ( hackTanks , hack ) ;
62678: LD_ADDR_VAR 0 4
62682: PUSH
62683: LD_EXP 48
62687: PPUSH
62688: LD_VAR 0 1
62692: PPUSH
62693: CALL 20963 0 2
62697: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62698: LD_ADDR_VAR 0 3
62702: PUSH
62703: DOUBLE
62704: LD_EXP 49
62708: PUSH
62709: LD_VAR 0 4
62713: ARRAY
62714: INC
62715: ST_TO_ADDR
62716: LD_INT 1
62718: PUSH
62719: FOR_DOWNTO
62720: IFFALSE 62896
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62722: LD_ADDR_VAR 0 5
62726: PUSH
62727: LD_EXP 49
62731: PUSH
62732: LD_VAR 0 4
62736: ARRAY
62737: PUSH
62738: LD_VAR 0 3
62742: ARRAY
62743: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62744: LD_VAR 0 5
62748: PUSH
62749: LD_INT 1
62751: ARRAY
62752: PPUSH
62753: CALL_OW 302
62757: NOT
62758: IFTRUE 62786
62760: PUSH
62761: LD_VAR 0 5
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PPUSH
62770: CALL_OW 255
62774: PUSH
62775: LD_VAR 0 1
62779: PPUSH
62780: CALL_OW 255
62784: NONEQUAL
62785: OR
62786: IFFALSE 62894
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62788: LD_VAR 0 5
62792: PUSH
62793: LD_INT 1
62795: ARRAY
62796: PPUSH
62797: CALL_OW 305
62801: IFFALSE 62829
62803: PUSH
62804: LD_VAR 0 5
62808: PUSH
62809: LD_INT 1
62811: ARRAY
62812: PPUSH
62813: CALL_OW 255
62817: PUSH
62818: LD_VAR 0 1
62822: PPUSH
62823: CALL_OW 255
62827: EQUAL
62828: AND
62829: IFFALSE 62853
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62831: LD_VAR 0 5
62835: PUSH
62836: LD_INT 1
62838: ARRAY
62839: PPUSH
62840: LD_VAR 0 5
62844: PUSH
62845: LD_INT 2
62847: ARRAY
62848: PPUSH
62849: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62853: LD_ADDR_EXP 49
62857: PUSH
62858: LD_EXP 49
62862: PPUSH
62863: LD_VAR 0 4
62867: PPUSH
62868: LD_EXP 49
62872: PUSH
62873: LD_VAR 0 4
62877: ARRAY
62878: PPUSH
62879: LD_VAR 0 3
62883: PPUSH
62884: CALL_OW 3
62888: PPUSH
62889: CALL_OW 1
62893: ST_TO_ADDR
// end ; end ;
62894: GO 62719
62896: POP
62897: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62898: LD_VAR 0 1
62902: PPUSH
62903: LD_EXP 49
62907: PUSH
62908: LD_VAR 0 4
62912: ARRAY
62913: PUSH
62914: LD_INT 0
62916: PLUS
62917: PPUSH
62918: CALL_OW 505
// end ;
62922: LD_VAR 0 2
62926: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62927: LD_INT 0
62929: PPUSH
62930: PPUSH
62931: PPUSH
62932: PPUSH
// if not hack in hackTanks then
62933: LD_VAR 0 1
62937: PUSH
62938: LD_EXP 48
62942: IN
62943: NOT
62944: IFFALSE 62948
// exit ;
62946: GO 63033
// index := GetElementIndex ( hackTanks , hack ) ;
62948: LD_ADDR_VAR 0 5
62952: PUSH
62953: LD_EXP 48
62957: PPUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: CALL 20963 0 2
62967: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62968: LD_ADDR_VAR 0 4
62972: PUSH
62973: DOUBLE
62974: LD_INT 1
62976: DEC
62977: ST_TO_ADDR
62978: LD_EXP 49
62982: PUSH
62983: LD_VAR 0 5
62987: ARRAY
62988: PUSH
62989: FOR_TO
62990: IFFALSE 63031
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62992: LD_EXP 49
62996: PUSH
62997: LD_VAR 0 5
63001: ARRAY
63002: PUSH
63003: LD_VAR 0 4
63007: ARRAY
63008: PUSH
63009: LD_INT 1
63011: ARRAY
63012: PUSH
63013: LD_VAR 0 2
63017: EQUAL
63018: IFFALSE 63029
// KillUnit ( vehicle ) ;
63020: LD_VAR 0 2
63024: PPUSH
63025: CALL_OW 66
63029: GO 62989
63031: POP
63032: POP
// end ;
63033: LD_VAR 0 3
63037: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
63038: LD_EXP 53
63042: NOT
63043: IFFALSE 63176
63045: GO 63047
63047: DISABLE
63048: LD_INT 0
63050: PPUSH
// begin initMiner := true ;
63051: LD_ADDR_EXP 53
63055: PUSH
63056: LD_INT 1
63058: ST_TO_ADDR
// minersList := [ ] ;
63059: LD_ADDR_EXP 54
63063: PUSH
63064: EMPTY
63065: ST_TO_ADDR
// minerMinesList := [ ] ;
63066: LD_ADDR_EXP 55
63070: PUSH
63071: EMPTY
63072: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
63073: LD_ADDR_EXP 56
63077: PUSH
63078: LD_INT 10
63080: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63081: LD_ADDR_VAR 0 1
63085: PUSH
63086: LD_INT 34
63088: PUSH
63089: LD_INT 81
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PPUSH
63096: CALL_OW 69
63100: PUSH
63101: FOR_IN
63102: IFFALSE 63174
// begin if not i in minersList then
63104: LD_VAR 0 1
63108: PUSH
63109: LD_EXP 54
63113: IN
63114: NOT
63115: IFFALSE 63172
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63117: LD_ADDR_EXP 54
63121: PUSH
63122: LD_EXP 54
63126: PPUSH
63127: LD_EXP 54
63131: PUSH
63132: LD_INT 1
63134: PLUS
63135: PPUSH
63136: LD_VAR 0 1
63140: PPUSH
63141: CALL_OW 1
63145: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63146: LD_ADDR_EXP 55
63150: PUSH
63151: LD_EXP 55
63155: PPUSH
63156: LD_EXP 55
63160: PUSH
63161: LD_INT 1
63163: PLUS
63164: PPUSH
63165: EMPTY
63166: PPUSH
63167: CALL_OW 1
63171: ST_TO_ADDR
// end end ;
63172: GO 63101
63174: POP
63175: POP
// end ;
63176: PPOPN 1
63178: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
63179: LD_EXP 53
63183: IFFALSE 63214
63185: PUSH
63186: LD_EXP 55
63190: PPUSH
63191: CALL 18262 0 1
63195: IFTRUE 63213
63197: PUSH
63198: LD_INT 34
63200: PUSH
63201: LD_INT 81
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PPUSH
63208: CALL_OW 69
63212: OR
63213: AND
63214: IFFALSE 63734
63216: GO 63218
63218: DISABLE
63219: LD_INT 0
63221: PPUSH
63222: PPUSH
63223: PPUSH
63224: PPUSH
// begin enable ;
63225: ENABLE
// for i := minerMinesList downto 1 do
63226: LD_ADDR_VAR 0 1
63230: PUSH
63231: DOUBLE
63232: LD_EXP 55
63236: INC
63237: ST_TO_ADDR
63238: LD_INT 1
63240: PUSH
63241: FOR_DOWNTO
63242: IFFALSE 63732
// begin side := GetSide ( minersList [ i ] ) ;
63244: LD_ADDR_VAR 0 3
63248: PUSH
63249: LD_EXP 54
63253: PUSH
63254: LD_VAR 0 1
63258: ARRAY
63259: PPUSH
63260: CALL_OW 255
63264: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
63265: LD_EXP 54
63269: PUSH
63270: LD_VAR 0 1
63274: ARRAY
63275: PPUSH
63276: CALL_OW 300
63280: IFFALSE 63301
63282: PUSH
63283: LD_VAR 0 3
63287: PUSH
63288: LD_OWVAR 2
63292: PUSH
63293: LD_INT 9
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: IN
63300: AND
63301: IFFALSE 63334
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
63303: LD_EXP 54
63307: PUSH
63308: LD_VAR 0 1
63312: ARRAY
63313: PPUSH
63314: LD_EXP 55
63318: PUSH
63319: LD_VAR 0 1
63323: ARRAY
63324: PPUSH
63325: CALL 18262 0 1
63329: PPUSH
63330: CALL_OW 505
// if not minerMinesList [ i ] then
63334: LD_EXP 55
63338: PUSH
63339: LD_VAR 0 1
63343: ARRAY
63344: NOT
63345: IFFALSE 63349
// continue ;
63347: GO 63241
// for j := minerMinesList [ i ] downto 1 do
63349: LD_ADDR_VAR 0 2
63353: PUSH
63354: DOUBLE
63355: LD_EXP 55
63359: PUSH
63360: LD_VAR 0 1
63364: ARRAY
63365: INC
63366: ST_TO_ADDR
63367: LD_INT 1
63369: PUSH
63370: FOR_DOWNTO
63371: IFFALSE 63728
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
63373: LD_EXP 54
63377: PUSH
63378: LD_VAR 0 1
63382: ARRAY
63383: PPUSH
63384: CALL_OW 301
63388: IFTRUE 63408
63390: PUSH
63391: LD_EXP 54
63395: PUSH
63396: LD_VAR 0 1
63400: ARRAY
63401: PPUSH
63402: CALL_OW 305
63406: NOT
63407: OR
63408: IFFALSE 63499
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63410: LD_EXP 55
63414: PUSH
63415: LD_VAR 0 1
63419: ARRAY
63420: PUSH
63421: LD_VAR 0 2
63425: ARRAY
63426: PUSH
63427: LD_INT 1
63429: ARRAY
63430: PPUSH
63431: LD_EXP 55
63435: PUSH
63436: LD_VAR 0 1
63440: ARRAY
63441: PUSH
63442: LD_VAR 0 2
63446: ARRAY
63447: PUSH
63448: LD_INT 2
63450: ARRAY
63451: PPUSH
63452: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63456: LD_ADDR_EXP 55
63460: PUSH
63461: LD_EXP 55
63465: PPUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_EXP 55
63475: PUSH
63476: LD_VAR 0 1
63480: ARRAY
63481: PPUSH
63482: LD_VAR 0 2
63486: PPUSH
63487: CALL_OW 3
63491: PPUSH
63492: CALL_OW 1
63496: ST_TO_ADDR
// continue ;
63497: GO 63370
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63499: LD_ADDR_VAR 0 4
63503: PUSH
63504: LD_EXP 55
63508: PUSH
63509: LD_VAR 0 1
63513: ARRAY
63514: PUSH
63515: LD_VAR 0 2
63519: ARRAY
63520: PUSH
63521: LD_INT 1
63523: ARRAY
63524: PPUSH
63525: LD_EXP 55
63529: PUSH
63530: LD_VAR 0 1
63534: ARRAY
63535: PUSH
63536: LD_VAR 0 2
63540: ARRAY
63541: PUSH
63542: LD_INT 2
63544: ARRAY
63545: PPUSH
63546: CALL_OW 428
63550: ST_TO_ADDR
// if not tmp then
63551: LD_VAR 0 4
63555: NOT
63556: IFFALSE 63560
// continue ;
63558: GO 63370
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63560: LD_VAR 0 4
63564: PUSH
63565: LD_INT 81
63567: PUSH
63568: LD_VAR 0 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PPUSH
63577: CALL_OW 69
63581: IN
63582: IFFALSE 63632
63584: PUSH
63585: LD_EXP 55
63589: PUSH
63590: LD_VAR 0 1
63594: ARRAY
63595: PUSH
63596: LD_VAR 0 2
63600: ARRAY
63601: PUSH
63602: LD_INT 1
63604: ARRAY
63605: PPUSH
63606: LD_EXP 55
63610: PUSH
63611: LD_VAR 0 1
63615: ARRAY
63616: PUSH
63617: LD_VAR 0 2
63621: ARRAY
63622: PUSH
63623: LD_INT 2
63625: ARRAY
63626: PPUSH
63627: CALL_OW 458
63631: AND
63632: IFFALSE 63726
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63634: LD_EXP 55
63638: PUSH
63639: LD_VAR 0 1
63643: ARRAY
63644: PUSH
63645: LD_VAR 0 2
63649: ARRAY
63650: PUSH
63651: LD_INT 1
63653: ARRAY
63654: PPUSH
63655: LD_EXP 55
63659: PUSH
63660: LD_VAR 0 1
63664: ARRAY
63665: PUSH
63666: LD_VAR 0 2
63670: ARRAY
63671: PUSH
63672: LD_INT 2
63674: ARRAY
63675: PPUSH
63676: LD_VAR 0 3
63680: PPUSH
63681: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63685: LD_ADDR_EXP 55
63689: PUSH
63690: LD_EXP 55
63694: PPUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: LD_EXP 55
63704: PUSH
63705: LD_VAR 0 1
63709: ARRAY
63710: PPUSH
63711: LD_VAR 0 2
63715: PPUSH
63716: CALL_OW 3
63720: PPUSH
63721: CALL_OW 1
63725: ST_TO_ADDR
// end ; end ;
63726: GO 63370
63728: POP
63729: POP
// end ;
63730: GO 63241
63732: POP
63733: POP
// end ;
63734: PPOPN 4
63736: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
63737: LD_INT 0
63739: PPUSH
63740: PPUSH
63741: PPUSH
63742: PPUSH
// result := false ;
63743: LD_ADDR_VAR 0 4
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63751: LD_VAR 0 1
63755: PPUSH
63756: CALL_OW 264
63760: PUSH
63761: LD_INT 81
63763: EQUAL
63764: NOT
63765: IFFALSE 63769
// exit ;
63767: GO 64139
// side := GetSide ( unit ) ;
63769: LD_ADDR_VAR 0 6
63773: PUSH
63774: LD_VAR 0 1
63778: PPUSH
63779: CALL_OW 255
63783: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
63784: LD_ADDR_VAR 0 5
63788: PUSH
63789: LD_EXP 54
63793: PPUSH
63794: LD_VAR 0 1
63798: PPUSH
63799: CALL 20963 0 2
63803: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63804: LD_EXP 55
63808: PUSH
63809: LD_VAR 0 5
63813: ARRAY
63814: PUSH
63815: LD_EXP 56
63819: GREATEREQUAL
63820: IFFALSE 63824
// exit ;
63822: GO 64139
// ComMoveXY ( unit , x , y ) ;
63824: LD_VAR 0 1
63828: PPUSH
63829: LD_VAR 0 2
63833: PPUSH
63834: LD_VAR 0 3
63838: PPUSH
63839: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63843: LD_INT 35
63845: PPUSH
63846: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63850: LD_VAR 0 1
63854: PPUSH
63855: LD_VAR 0 2
63859: PPUSH
63860: LD_VAR 0 3
63864: PPUSH
63865: CALL 53019 0 3
63869: NOT
63870: IFFALSE 63883
63872: PUSH
63873: LD_VAR 0 1
63877: PPUSH
63878: CALL_OW 314
63882: AND
63883: IFFALSE 63887
// exit ;
63885: GO 64139
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63887: LD_VAR 0 2
63891: PPUSH
63892: LD_VAR 0 3
63896: PPUSH
63897: CALL_OW 428
63901: PUSH
63902: LD_VAR 0 1
63906: EQUAL
63907: IFFALSE 63921
63909: PUSH
63910: LD_VAR 0 1
63914: PPUSH
63915: CALL_OW 314
63919: NOT
63920: AND
63921: IFFALSE 63843
// if MineAtPos ( x , y ) then
63923: LD_VAR 0 2
63927: PPUSH
63928: LD_VAR 0 3
63932: PPUSH
63933: CALL_OW 458
63937: IFFALSE 63941
// exit ;
63939: GO 64139
// if your_side = side then
63941: LD_OWVAR 2
63945: PUSH
63946: LD_VAR 0 6
63950: EQUAL
63951: IFFALSE 63970
// PlaySoundXY ( x , y , PlantMine ) ;
63953: LD_VAR 0 2
63957: PPUSH
63958: LD_VAR 0 3
63962: PPUSH
63963: LD_STRING PlantMine
63965: PPUSH
63966: CALL_OW 366
// repeat wait ( 1 ) ;
63970: LD_INT 1
63972: PPUSH
63973: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
63977: LD_VAR 0 2
63981: PPUSH
63982: LD_VAR 0 3
63986: PPUSH
63987: LD_VAR 0 6
63991: PPUSH
63992: LD_INT 0
63994: PPUSH
63995: CALL_OW 454
63999: IFFALSE 63970
// if MineAtPos ( x , y ) then
64001: LD_VAR 0 2
64005: PPUSH
64006: LD_VAR 0 3
64010: PPUSH
64011: CALL_OW 458
64015: IFFALSE 64131
// begin for i in minerMinesList [ index ] do
64017: LD_ADDR_VAR 0 7
64021: PUSH
64022: LD_EXP 55
64026: PUSH
64027: LD_VAR 0 5
64031: ARRAY
64032: PUSH
64033: FOR_IN
64034: IFFALSE 64076
// if i [ 1 ] = x and i [ 2 ] = y then
64036: LD_VAR 0 7
64040: PUSH
64041: LD_INT 1
64043: ARRAY
64044: PUSH
64045: LD_VAR 0 2
64049: EQUAL
64050: IFFALSE 64068
64052: PUSH
64053: LD_VAR 0 7
64057: PUSH
64058: LD_INT 2
64060: ARRAY
64061: PUSH
64062: LD_VAR 0 3
64066: EQUAL
64067: AND
64068: IFFALSE 64074
// exit ;
64070: POP
64071: POP
64072: GO 64139
64074: GO 64033
64076: POP
64077: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64078: LD_ADDR_EXP 55
64082: PUSH
64083: LD_EXP 55
64087: PPUSH
64088: LD_VAR 0 5
64092: PUSH
64093: LD_EXP 55
64097: PUSH
64098: LD_VAR 0 5
64102: ARRAY
64103: PUSH
64104: LD_INT 1
64106: PLUS
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PPUSH
64112: LD_VAR 0 2
64116: PUSH
64117: LD_VAR 0 3
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PPUSH
64126: CALL 21180 0 3
64130: ST_TO_ADDR
// end ; result := true ;
64131: LD_ADDR_VAR 0 4
64135: PUSH
64136: LD_INT 1
64138: ST_TO_ADDR
// end ;
64139: LD_VAR 0 4
64143: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64144: LD_INT 0
64146: PPUSH
64147: PPUSH
64148: PPUSH
// if not unit in minersList then
64149: LD_VAR 0 1
64153: PUSH
64154: LD_EXP 54
64158: IN
64159: NOT
64160: IFFALSE 64164
// exit ;
64162: GO 64371
// index := GetElementIndex ( minersList , unit ) ;
64164: LD_ADDR_VAR 0 6
64168: PUSH
64169: LD_EXP 54
64173: PPUSH
64174: LD_VAR 0 1
64178: PPUSH
64179: CALL 20963 0 2
64183: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64184: LD_ADDR_VAR 0 5
64188: PUSH
64189: DOUBLE
64190: LD_EXP 55
64194: PUSH
64195: LD_VAR 0 6
64199: ARRAY
64200: INC
64201: ST_TO_ADDR
64202: LD_INT 1
64204: PUSH
64205: FOR_DOWNTO
64206: IFFALSE 64369
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64208: LD_EXP 55
64212: PUSH
64213: LD_VAR 0 6
64217: ARRAY
64218: PUSH
64219: LD_VAR 0 5
64223: ARRAY
64224: PUSH
64225: LD_INT 1
64227: ARRAY
64228: PPUSH
64229: LD_EXP 55
64233: PUSH
64234: LD_VAR 0 6
64238: ARRAY
64239: PUSH
64240: LD_VAR 0 5
64244: ARRAY
64245: PUSH
64246: LD_INT 2
64248: ARRAY
64249: PPUSH
64250: LD_VAR 0 2
64254: PPUSH
64255: LD_VAR 0 3
64259: PPUSH
64260: CALL_OW 298
64264: PUSH
64265: LD_INT 6
64267: LESS
64268: IFFALSE 64367
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64270: LD_EXP 55
64274: PUSH
64275: LD_VAR 0 6
64279: ARRAY
64280: PUSH
64281: LD_VAR 0 5
64285: ARRAY
64286: PUSH
64287: LD_INT 1
64289: ARRAY
64290: PPUSH
64291: LD_EXP 55
64295: PUSH
64296: LD_VAR 0 6
64300: ARRAY
64301: PUSH
64302: LD_VAR 0 5
64306: ARRAY
64307: PUSH
64308: LD_INT 2
64310: ARRAY
64311: PPUSH
64312: LD_VAR 0 1
64316: PPUSH
64317: CALL_OW 255
64321: PPUSH
64322: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64326: LD_ADDR_EXP 55
64330: PUSH
64331: LD_EXP 55
64335: PPUSH
64336: LD_VAR 0 6
64340: PPUSH
64341: LD_EXP 55
64345: PUSH
64346: LD_VAR 0 6
64350: ARRAY
64351: PPUSH
64352: LD_VAR 0 5
64356: PPUSH
64357: CALL_OW 3
64361: PPUSH
64362: CALL_OW 1
64366: ST_TO_ADDR
// end ; end ;
64367: GO 64205
64369: POP
64370: POP
// end ;
64371: LD_VAR 0 4
64375: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64376: LD_INT 0
64378: PPUSH
64379: PPUSH
64380: PPUSH
64381: PPUSH
64382: PPUSH
64383: PPUSH
64384: PPUSH
64385: PPUSH
64386: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64387: LD_VAR 0 1
64391: PPUSH
64392: CALL_OW 264
64396: PUSH
64397: LD_INT 81
64399: EQUAL
64400: NOT
64401: IFTRUE 64416
64403: PUSH
64404: LD_VAR 0 1
64408: PUSH
64409: LD_EXP 54
64413: IN
64414: NOT
64415: OR
64416: IFFALSE 64420
// exit ;
64418: GO 64746
// index := GetElementIndex ( minersList , unit ) ;
64420: LD_ADDR_VAR 0 6
64424: PUSH
64425: LD_EXP 54
64429: PPUSH
64430: LD_VAR 0 1
64434: PPUSH
64435: CALL 20963 0 2
64439: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64440: LD_ADDR_VAR 0 8
64444: PUSH
64445: LD_EXP 56
64449: PUSH
64450: LD_EXP 55
64454: PUSH
64455: LD_VAR 0 6
64459: ARRAY
64460: MINUS
64461: ST_TO_ADDR
// if not minesFreeAmount then
64462: LD_VAR 0 8
64466: NOT
64467: IFFALSE 64471
// exit ;
64469: GO 64746
// tmp := [ ] ;
64471: LD_ADDR_VAR 0 7
64475: PUSH
64476: EMPTY
64477: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64478: LD_ADDR_VAR 0 5
64482: PUSH
64483: DOUBLE
64484: LD_INT 1
64486: DEC
64487: ST_TO_ADDR
64488: LD_VAR 0 8
64492: PUSH
64493: FOR_TO
64494: IFFALSE 64693
// begin _d := rand ( 0 , 5 ) ;
64496: LD_ADDR_VAR 0 11
64500: PUSH
64501: LD_INT 0
64503: PPUSH
64504: LD_INT 5
64506: PPUSH
64507: CALL_OW 12
64511: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64512: LD_ADDR_VAR 0 12
64516: PUSH
64517: LD_INT 2
64519: PPUSH
64520: LD_INT 6
64522: PPUSH
64523: CALL_OW 12
64527: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64528: LD_ADDR_VAR 0 9
64532: PUSH
64533: LD_VAR 0 2
64537: PPUSH
64538: LD_VAR 0 11
64542: PPUSH
64543: LD_VAR 0 12
64547: PPUSH
64548: CALL_OW 272
64552: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64553: LD_ADDR_VAR 0 10
64557: PUSH
64558: LD_VAR 0 3
64562: PPUSH
64563: LD_VAR 0 11
64567: PPUSH
64568: LD_VAR 0 12
64572: PPUSH
64573: CALL_OW 273
64577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64578: LD_VAR 0 9
64582: PPUSH
64583: LD_VAR 0 10
64587: PPUSH
64588: CALL_OW 488
64592: IFFALSE 64616
64594: PUSH
64595: LD_VAR 0 9
64599: PUSH
64600: LD_VAR 0 10
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_VAR 0 7
64613: IN
64614: NOT
64615: AND
64616: IFFALSE 64635
64618: PUSH
64619: LD_VAR 0 9
64623: PPUSH
64624: LD_VAR 0 10
64628: PPUSH
64629: CALL_OW 458
64633: NOT
64634: AND
64635: IFFALSE 64677
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64637: LD_ADDR_VAR 0 7
64641: PUSH
64642: LD_VAR 0 7
64646: PPUSH
64647: LD_VAR 0 7
64651: PUSH
64652: LD_INT 1
64654: PLUS
64655: PPUSH
64656: LD_VAR 0 9
64660: PUSH
64661: LD_VAR 0 10
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PPUSH
64670: CALL_OW 1
64674: ST_TO_ADDR
64675: GO 64691
// i := i - 1 ;
64677: LD_ADDR_VAR 0 5
64681: PUSH
64682: LD_VAR 0 5
64686: PUSH
64687: LD_INT 1
64689: MINUS
64690: ST_TO_ADDR
// end ;
64691: GO 64493
64693: POP
64694: POP
// for i in tmp do
64695: LD_ADDR_VAR 0 5
64699: PUSH
64700: LD_VAR 0 7
64704: PUSH
64705: FOR_IN
64706: IFFALSE 64744
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64708: LD_VAR 0 1
64712: PPUSH
64713: LD_VAR 0 5
64717: PUSH
64718: LD_INT 1
64720: ARRAY
64721: PPUSH
64722: LD_VAR 0 5
64726: PUSH
64727: LD_INT 2
64729: ARRAY
64730: PPUSH
64731: CALL 63737 0 3
64735: NOT
64736: IFFALSE 64742
// exit ;
64738: POP
64739: POP
64740: GO 64746
64742: GO 64705
64744: POP
64745: POP
// end ;
64746: LD_VAR 0 4
64750: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64751: LD_INT 0
64753: PPUSH
64754: PPUSH
64755: PPUSH
64756: PPUSH
64757: PPUSH
64758: PPUSH
64759: PPUSH
64760: PPUSH
64761: PPUSH
// if GetClass ( unit ) <> class_sniper then
64762: LD_VAR 0 1
64766: PPUSH
64767: CALL_OW 257
64771: PUSH
64772: LD_INT 5
64774: NONEQUAL
64775: IFFALSE 64779
// exit ;
64777: GO 65249
// dist := 8 ;
64779: LD_ADDR_VAR 0 5
64783: PUSH
64784: LD_INT 8
64786: ST_TO_ADDR
// viewRange := 12 ;
64787: LD_ADDR_VAR 0 8
64791: PUSH
64792: LD_INT 12
64794: ST_TO_ADDR
// side := GetSide ( unit ) ;
64795: LD_ADDR_VAR 0 6
64799: PUSH
64800: LD_VAR 0 1
64804: PPUSH
64805: CALL_OW 255
64809: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64810: LD_INT 61
64812: PPUSH
64813: LD_VAR 0 6
64817: PPUSH
64818: CALL_OW 321
64822: PUSH
64823: LD_INT 2
64825: EQUAL
64826: IFFALSE 64836
// viewRange := 16 ;
64828: LD_ADDR_VAR 0 8
64832: PUSH
64833: LD_INT 16
64835: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64836: LD_VAR 0 1
64840: PPUSH
64841: LD_VAR 0 2
64845: PPUSH
64846: LD_VAR 0 3
64850: PPUSH
64851: CALL_OW 297
64855: PUSH
64856: LD_VAR 0 5
64860: GREATER
64861: IFFALSE 64940
// begin ComMoveXY ( unit , x , y ) ;
64863: LD_VAR 0 1
64867: PPUSH
64868: LD_VAR 0 2
64872: PPUSH
64873: LD_VAR 0 3
64877: PPUSH
64878: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64882: LD_INT 35
64884: PPUSH
64885: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64889: LD_VAR 0 1
64893: PPUSH
64894: LD_VAR 0 2
64898: PPUSH
64899: LD_VAR 0 3
64903: PPUSH
64904: CALL 53019 0 3
64908: NOT
64909: IFFALSE 64913
// exit ;
64911: GO 65249
// until GetDistUnitXY ( unit , x , y ) < dist ;
64913: LD_VAR 0 1
64917: PPUSH
64918: LD_VAR 0 2
64922: PPUSH
64923: LD_VAR 0 3
64927: PPUSH
64928: CALL_OW 297
64932: PUSH
64933: LD_VAR 0 5
64937: LESS
64938: IFFALSE 64882
// end ; ComTurnXY ( unit , x , y ) ;
64940: LD_VAR 0 1
64944: PPUSH
64945: LD_VAR 0 2
64949: PPUSH
64950: LD_VAR 0 3
64954: PPUSH
64955: CALL_OW 118
// repeat if Multiplayer then
64959: LD_OWVAR 4
64963: IFFALSE 64974
// wait ( 35 ) else
64965: LD_INT 35
64967: PPUSH
64968: CALL_OW 67
64972: GO 64981
// wait ( 5 ) ;
64974: LD_INT 5
64976: PPUSH
64977: CALL_OW 67
// _d := GetDir ( unit ) ;
64981: LD_ADDR_VAR 0 11
64985: PUSH
64986: LD_VAR 0 1
64990: PPUSH
64991: CALL_OW 254
64995: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64996: LD_ADDR_VAR 0 7
65000: PUSH
65001: LD_VAR 0 1
65005: PPUSH
65006: CALL_OW 250
65010: PPUSH
65011: LD_VAR 0 1
65015: PPUSH
65016: CALL_OW 251
65020: PPUSH
65021: LD_VAR 0 2
65025: PPUSH
65026: LD_VAR 0 3
65030: PPUSH
65031: CALL 55655 0 4
65035: ST_TO_ADDR
// until dir = _d ;
65036: LD_VAR 0 7
65040: PUSH
65041: LD_VAR 0 11
65045: EQUAL
65046: IFFALSE 64959
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65048: LD_ADDR_VAR 0 9
65052: PUSH
65053: LD_VAR 0 1
65057: PPUSH
65058: CALL_OW 250
65062: PPUSH
65063: LD_VAR 0 7
65067: PPUSH
65068: LD_VAR 0 5
65072: PPUSH
65073: CALL_OW 272
65077: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65078: LD_ADDR_VAR 0 10
65082: PUSH
65083: LD_VAR 0 1
65087: PPUSH
65088: CALL_OW 251
65092: PPUSH
65093: LD_VAR 0 7
65097: PPUSH
65098: LD_VAR 0 5
65102: PPUSH
65103: CALL_OW 273
65107: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65108: LD_VAR 0 9
65112: PPUSH
65113: LD_VAR 0 10
65117: PPUSH
65118: CALL_OW 488
65122: NOT
65123: IFFALSE 65127
// exit ;
65125: GO 65249
// ComAnimCustom ( unit , 1 ) ;
65127: LD_VAR 0 1
65131: PPUSH
65132: LD_INT 1
65134: PPUSH
65135: CALL_OW 592
// p := 0 ;
65139: LD_ADDR_VAR 0 12
65143: PUSH
65144: LD_INT 0
65146: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65147: LD_VAR 0 9
65151: PPUSH
65152: LD_VAR 0 10
65156: PPUSH
65157: LD_VAR 0 6
65161: PPUSH
65162: LD_VAR 0 8
65166: PPUSH
65167: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65171: LD_INT 35
65173: PPUSH
65174: CALL_OW 67
// p := Inc ( p ) ;
65178: LD_ADDR_VAR 0 12
65182: PUSH
65183: LD_VAR 0 12
65187: PPUSH
65188: CALL 55611 0 1
65192: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65193: LD_VAR 0 12
65197: PUSH
65198: LD_INT 3
65200: EQUAL
65201: IFTRUE 65215
65203: PUSH
65204: LD_VAR 0 1
65208: PPUSH
65209: CALL_OW 302
65213: NOT
65214: OR
65215: IFTRUE 65228
65217: PUSH
65218: LD_VAR 0 1
65222: PPUSH
65223: CALL_OW 301
65227: OR
65228: IFFALSE 65171
// RemoveSeeing ( _x , _y , side ) ;
65230: LD_VAR 0 9
65234: PPUSH
65235: LD_VAR 0 10
65239: PPUSH
65240: LD_VAR 0 6
65244: PPUSH
65245: CALL_OW 331
// end ;
65249: LD_VAR 0 4
65253: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
65258: PPUSH
65259: PPUSH
65260: PPUSH
65261: PPUSH
65262: PPUSH
65263: PPUSH
65264: PPUSH
65265: PPUSH
65266: PPUSH
// if not unit then
65267: LD_VAR 0 1
65271: NOT
65272: IFFALSE 65276
// exit ;
65274: GO 65547
// side := GetSide ( unit ) ;
65276: LD_ADDR_VAR 0 3
65280: PUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 255
65290: ST_TO_ADDR
// x := GetX ( unit ) ;
65291: LD_ADDR_VAR 0 5
65295: PUSH
65296: LD_VAR 0 1
65300: PPUSH
65301: CALL_OW 250
65305: ST_TO_ADDR
// y := GetY ( unit ) ;
65306: LD_ADDR_VAR 0 6
65310: PUSH
65311: LD_VAR 0 1
65315: PPUSH
65316: CALL_OW 251
65320: ST_TO_ADDR
// r := 8 ;
65321: LD_ADDR_VAR 0 4
65325: PUSH
65326: LD_INT 8
65328: ST_TO_ADDR
// if x - r < 0 then
65329: LD_VAR 0 5
65333: PUSH
65334: LD_VAR 0 4
65338: MINUS
65339: PUSH
65340: LD_INT 0
65342: LESS
65343: IFFALSE 65355
// min_x := 0 else
65345: LD_ADDR_VAR 0 7
65349: PUSH
65350: LD_INT 0
65352: ST_TO_ADDR
65353: GO 65371
// min_x := x - r ;
65355: LD_ADDR_VAR 0 7
65359: PUSH
65360: LD_VAR 0 5
65364: PUSH
65365: LD_VAR 0 4
65369: MINUS
65370: ST_TO_ADDR
// if y - r < 0 then
65371: LD_VAR 0 6
65375: PUSH
65376: LD_VAR 0 4
65380: MINUS
65381: PUSH
65382: LD_INT 0
65384: LESS
65385: IFFALSE 65397
// min_y := 0 else
65387: LD_ADDR_VAR 0 8
65391: PUSH
65392: LD_INT 0
65394: ST_TO_ADDR
65395: GO 65413
// min_y := y - r ;
65397: LD_ADDR_VAR 0 8
65401: PUSH
65402: LD_VAR 0 6
65406: PUSH
65407: LD_VAR 0 4
65411: MINUS
65412: ST_TO_ADDR
// max_x := x + r ;
65413: LD_ADDR_VAR 0 9
65417: PUSH
65418: LD_VAR 0 5
65422: PUSH
65423: LD_VAR 0 4
65427: PLUS
65428: ST_TO_ADDR
// max_y := y + r ;
65429: LD_ADDR_VAR 0 10
65433: PUSH
65434: LD_VAR 0 6
65438: PUSH
65439: LD_VAR 0 4
65443: PLUS
65444: ST_TO_ADDR
// for _x = min_x to max_x do
65445: LD_ADDR_VAR 0 11
65449: PUSH
65450: DOUBLE
65451: LD_VAR 0 7
65455: DEC
65456: ST_TO_ADDR
65457: LD_VAR 0 9
65461: PUSH
65462: FOR_TO
65463: IFFALSE 65545
// for _y = min_y to max_y do
65465: LD_ADDR_VAR 0 12
65469: PUSH
65470: DOUBLE
65471: LD_VAR 0 8
65475: DEC
65476: ST_TO_ADDR
65477: LD_VAR 0 10
65481: PUSH
65482: FOR_TO
65483: IFFALSE 65541
// begin if not ValidHex ( _x , _y ) then
65485: LD_VAR 0 11
65489: PPUSH
65490: LD_VAR 0 12
65494: PPUSH
65495: CALL_OW 488
65499: NOT
65500: IFFALSE 65504
// continue ;
65502: GO 65482
// if MineAtPos ( _x , _y ) then
65504: LD_VAR 0 11
65508: PPUSH
65509: LD_VAR 0 12
65513: PPUSH
65514: CALL_OW 458
65518: IFFALSE 65539
// ViewMineAtPos ( _x , _y , side ) ;
65520: LD_VAR 0 11
65524: PPUSH
65525: LD_VAR 0 12
65529: PPUSH
65530: LD_VAR 0 3
65534: PPUSH
65535: CALL_OW 457
// end ;
65539: GO 65482
65541: POP
65542: POP
65543: GO 65462
65545: POP
65546: POP
// end ;
65547: LD_VAR 0 2
65551: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
65552: LD_INT 0
65554: PPUSH
65555: PPUSH
65556: PPUSH
65557: PPUSH
65558: PPUSH
65559: PPUSH
65560: PPUSH
// if not units then
65561: LD_VAR 0 1
65565: NOT
65566: IFFALSE 65570
// exit ;
65568: GO 66034
// scaners := [ ] ;
65570: LD_ADDR_VAR 0 6
65574: PUSH
65575: EMPTY
65576: ST_TO_ADDR
// for i in units do
65577: LD_ADDR_VAR 0 3
65581: PUSH
65582: LD_VAR 0 1
65586: PUSH
65587: FOR_IN
65588: IFFALSE 65745
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65590: LD_VAR 0 3
65594: PPUSH
65595: CALL_OW 264
65599: PUSH
65600: LD_INT 11
65602: NONEQUAL
65603: IFTRUE 65617
65605: PUSH
65606: LD_VAR 0 3
65610: PPUSH
65611: CALL_OW 302
65615: NOT
65616: OR
65617: IFTRUE 65634
65619: PUSH
65620: LD_VAR 0 3
65624: PPUSH
65625: CALL_OW 110
65629: PUSH
65630: LD_INT 502
65632: EQUAL
65633: OR
65634: IFFALSE 65638
// continue ;
65636: GO 65587
// ComStop ( i ) ;
65638: LD_VAR 0 3
65642: PPUSH
65643: CALL_OW 141
// x := GetX ( i ) ;
65647: LD_ADDR_VAR 0 4
65651: PUSH
65652: LD_VAR 0 3
65656: PPUSH
65657: CALL_OW 250
65661: ST_TO_ADDR
// y := GetY ( i ) ;
65662: LD_ADDR_VAR 0 5
65666: PUSH
65667: LD_VAR 0 3
65671: PPUSH
65672: CALL_OW 251
65676: ST_TO_ADDR
// if GetSide ( i ) = your_side then
65677: LD_VAR 0 3
65681: PPUSH
65682: CALL_OW 255
65686: PUSH
65687: LD_OWVAR 2
65691: EQUAL
65692: IFFALSE 65711
// PlaySoundXY ( x , y , mineDetector ) ;
65694: LD_VAR 0 4
65698: PPUSH
65699: LD_VAR 0 5
65703: PPUSH
65704: LD_STRING mineDetector
65706: PPUSH
65707: CALL_OW 366
// scaners := Join ( scaners , i ) ;
65711: LD_ADDR_VAR 0 6
65715: PUSH
65716: LD_VAR 0 6
65720: PPUSH
65721: LD_VAR 0 3
65725: PPUSH
65726: CALL 54238 0 2
65730: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
65731: LD_VAR 0 3
65735: PPUSH
65736: LD_INT 502
65738: PPUSH
65739: CALL_OW 109
// end ;
65743: GO 65587
65745: POP
65746: POP
// if not scaners then
65747: LD_VAR 0 6
65751: NOT
65752: IFFALSE 65756
// exit ;
65754: GO 66034
// wait ( 3 ) ;
65756: LD_INT 3
65758: PPUSH
65759: CALL_OW 67
// timer := 6 ;
65763: LD_ADDR_VAR 0 7
65767: PUSH
65768: LD_INT 6
65770: ST_TO_ADDR
// repeat for i in scaners do
65771: LD_ADDR_VAR 0 3
65775: PUSH
65776: LD_VAR 0 6
65780: PUSH
65781: FOR_IN
65782: IFFALSE 65932
// begin side := GetSide ( i ) ;
65784: LD_ADDR_VAR 0 8
65788: PUSH
65789: LD_VAR 0 3
65793: PPUSH
65794: CALL_OW 255
65798: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
65799: LD_VAR 0 3
65803: PPUSH
65804: CALL_OW 302
65808: NOT
65809: IFTRUE 65822
65811: PUSH
65812: LD_VAR 0 3
65816: PPUSH
65817: CALL_OW 314
65821: OR
65822: IFTRUE 65853
65824: PUSH
65825: LD_VAR 0 3
65829: PPUSH
65830: CALL_OW 263
65834: PUSH
65835: LD_INT 1
65837: EQUAL
65838: IFFALSE 65852
65840: PUSH
65841: LD_VAR 0 3
65845: PPUSH
65846: CALL_OW 311
65850: NOT
65851: AND
65852: OR
65853: IFFALSE 65897
// begin SetUnitDisplayNumber ( i , 0 ) ;
65855: LD_VAR 0 3
65859: PPUSH
65860: LD_INT 0
65862: PPUSH
65863: CALL_OW 505
// SetTag ( i , 0 ) ;
65867: LD_VAR 0 3
65871: PPUSH
65872: LD_INT 0
65874: PPUSH
65875: CALL_OW 109
// scaners := scaners diff i ;
65879: LD_ADDR_VAR 0 6
65883: PUSH
65884: LD_VAR 0 6
65888: PUSH
65889: LD_VAR 0 3
65893: DIFF
65894: ST_TO_ADDR
// continue ;
65895: GO 65781
// end ; if side in [ your_side , 9 ] then
65897: LD_VAR 0 8
65901: PUSH
65902: LD_OWVAR 2
65906: PUSH
65907: LD_INT 9
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: IN
65914: IFFALSE 65930
// SetUnitDisplayNumber ( i , timer ) ;
65916: LD_VAR 0 3
65920: PPUSH
65921: LD_VAR 0 7
65925: PPUSH
65926: CALL_OW 505
// end ;
65930: GO 65781
65932: POP
65933: POP
// if not scaners then
65934: LD_VAR 0 6
65938: NOT
65939: IFFALSE 65943
// exit ;
65941: GO 66034
// timer := Dec ( timer ) ;
65943: LD_ADDR_VAR 0 7
65947: PUSH
65948: LD_VAR 0 7
65952: PPUSH
65953: CALL 55633 0 1
65957: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65958: LD_INT 35
65960: PPUSH
65961: CALL_OW 67
// until timer = 0 ;
65965: LD_VAR 0 7
65969: PUSH
65970: LD_INT 0
65972: EQUAL
65973: IFFALSE 65771
// if not scaners then
65975: LD_VAR 0 6
65979: NOT
65980: IFFALSE 65984
// exit ;
65982: GO 66034
// for i in scaners do
65984: LD_ADDR_VAR 0 3
65988: PUSH
65989: LD_VAR 0 6
65993: PUSH
65994: FOR_IN
65995: IFFALSE 66032
// begin SetUnitDisplayNumber ( i , 0 ) ;
65997: LD_VAR 0 3
66001: PPUSH
66002: LD_INT 0
66004: PPUSH
66005: CALL_OW 505
// SetTag ( i , 0 ) ;
66009: LD_VAR 0 3
66013: PPUSH
66014: LD_INT 0
66016: PPUSH
66017: CALL_OW 109
// RevealDetectorMine ( i ) ;
66021: LD_VAR 0 3
66025: PPUSH
66026: CALL 65254 0 1
// end ;
66030: GO 65994
66032: POP
66033: POP
// end ;
66034: LD_VAR 0 2
66038: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
66039: LD_INT 0
66041: PPUSH
// if p1 = mine_detector_mode then
66042: LD_VAR 0 2
66046: PUSH
66047: LD_INT 103
66049: EQUAL
66050: IFFALSE 66061
// DetectMine ( units ) ;
66052: LD_VAR 0 1
66056: PPUSH
66057: CALL 65552 0 1
// end ; end_of_file end_of_file
66061: LD_VAR 0 7
66065: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
66066: PPOPN 6
66068: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66069: LD_INT 0
66071: PPUSH
// begin if not units then
66072: LD_VAR 0 1
66076: NOT
66077: IFFALSE 66081
// exit ;
66079: GO 66115
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
66081: LD_VAR 0 1
66085: PPUSH
66086: LD_VAR 0 2
66090: PPUSH
66091: LD_VAR 0 3
66095: PPUSH
66096: LD_VAR 0 4
66100: PPUSH
66101: LD_VAR 0 5
66105: PPUSH
66106: LD_VAR 0 6
66110: PPUSH
66111: CALL 66039 0 6
// end ;
66115: PPOPN 7
66117: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
66118: LD_EXP 41
66122: PUSH
66123: LD_INT 4
66125: EQUAL
66126: IFFALSE 66162
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
66128: LD_STRING setGameDifficulty(
66130: PUSH
66131: LD_OWVAR 67
66135: STR
66136: PUSH
66137: LD_STRING )
66139: STR
66140: PPUSH
66141: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
66145: LD_STRING displayDifficulty(
66147: PUSH
66148: LD_OWVAR 67
66152: STR
66153: PUSH
66154: LD_STRING )
66156: STR
66157: PPUSH
66158: CALL_OW 559
// end ; SOS_MapStart ( ) ;
66162: CALL 66191 0 0
// end ; end_of_file
66166: PPOPN 1
66168: END
// every 0 0$1 do
66169: GO 66171
66171: DISABLE
// begin enable ;
66172: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66173: LD_STRING updateTimer(
66175: PUSH
66176: LD_OWVAR 1
66180: STR
66181: PUSH
66182: LD_STRING );
66184: STR
66185: PPUSH
66186: CALL_OW 559
// end ;
66190: END
// export function SOS_MapStart ( ) ; begin
66191: LD_INT 0
66193: PPUSH
// UpdateFactoryWaypoints ( ) ;
66194: CALL 67132 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66198: CALL 67384 0 0
// ParseMultiDataToLua ( ) ;
66202: CALL 67531 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
66206: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
66208: PPUSH
66209: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
66213: LD_STRING setSpecLogoNumber(
66215: PUSH
66216: LD_INT 2
66218: STR
66219: PUSH
66220: LD_STRING ,
66222: STR
66223: PUSH
66224: LD_INT 1
66226: STR
66227: PUSH
66228: LD_STRING )
66230: STR
66231: PPUSH
66232: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
66236: LD_STRING setSpecLogoNumber(
66238: PUSH
66239: LD_INT 3
66241: STR
66242: PUSH
66243: LD_STRING ,
66245: STR
66246: PUSH
66247: LD_INT 2
66249: STR
66250: PUSH
66251: LD_STRING )
66253: STR
66254: PPUSH
66255: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
66259: LD_STRING setSpecLogoNumber(
66261: PUSH
66262: LD_INT 4
66264: STR
66265: PUSH
66266: LD_STRING ,
66268: STR
66269: PUSH
66270: LD_INT 3
66272: STR
66273: PUSH
66274: LD_STRING )
66276: STR
66277: PPUSH
66278: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
66282: LD_STRING setSpecLogoNumber(
66284: PUSH
66285: LD_INT 5
66287: STR
66288: PUSH
66289: LD_STRING ,
66291: STR
66292: PUSH
66293: LD_INT 4
66295: STR
66296: PUSH
66297: LD_STRING )
66299: STR
66300: PPUSH
66301: CALL_OW 559
// end ;
66305: LD_VAR 0 1
66309: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
66310: LD_INT 0
66312: PPUSH
66313: PPUSH
66314: PPUSH
66315: PPUSH
66316: PPUSH
66317: PPUSH
66318: PPUSH
66319: PPUSH
66320: PPUSH
// for i := 1 to 8 do
66321: LD_ADDR_VAR 0 2
66325: PUSH
66326: DOUBLE
66327: LD_INT 1
66329: DEC
66330: ST_TO_ADDR
66331: LD_INT 8
66333: PUSH
66334: FOR_TO
66335: IFFALSE 66720
// begin if mpSidePositions [ i ] then
66337: LD_EXP 42
66341: PUSH
66342: LD_VAR 0 2
66346: ARRAY
66347: IFFALSE 66718
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
66349: LD_ADDR_VAR 0 7
66353: PUSH
66354: LD_INT 22
66356: PUSH
66357: LD_VAR 0 2
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 21
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PPUSH
66380: CALL_OW 69
66384: PPUSH
66385: CALL 18262 0 1
66389: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66390: LD_ADDR_VAR 0 9
66394: PUSH
66395: LD_INT 22
66397: PUSH
66398: LD_VAR 0 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: PUSH
66410: LD_INT 30
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 30
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PPUSH
66439: CALL_OW 69
66443: ST_TO_ADDR
// crates := 0 ;
66444: LD_ADDR_VAR 0 4
66448: PUSH
66449: LD_INT 0
66451: ST_TO_ADDR
// oil := 0 ;
66452: LD_ADDR_VAR 0 5
66456: PUSH
66457: LD_INT 0
66459: ST_TO_ADDR
// sib := 0 ;
66460: LD_ADDR_VAR 0 6
66464: PUSH
66465: LD_INT 0
66467: ST_TO_ADDR
// if bases then
66468: LD_VAR 0 9
66472: IFFALSE 66578
// begin for j in bases do
66474: LD_ADDR_VAR 0 3
66478: PUSH
66479: LD_VAR 0 9
66483: PUSH
66484: FOR_IN
66485: IFFALSE 66576
// begin base := GetBase ( j ) ;
66487: LD_ADDR_VAR 0 8
66491: PUSH
66492: LD_VAR 0 3
66496: PPUSH
66497: CALL_OW 274
66501: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66502: LD_ADDR_VAR 0 4
66506: PUSH
66507: LD_VAR 0 4
66511: PUSH
66512: LD_VAR 0 8
66516: PPUSH
66517: LD_INT 1
66519: PPUSH
66520: CALL_OW 275
66524: PLUS
66525: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66526: LD_ADDR_VAR 0 5
66530: PUSH
66531: LD_VAR 0 5
66535: PUSH
66536: LD_VAR 0 8
66540: PPUSH
66541: LD_INT 2
66543: PPUSH
66544: CALL_OW 275
66548: PLUS
66549: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66550: LD_ADDR_VAR 0 6
66554: PUSH
66555: LD_VAR 0 6
66559: PUSH
66560: LD_VAR 0 8
66564: PPUSH
66565: LD_INT 3
66567: PPUSH
66568: CALL_OW 275
66572: PLUS
66573: ST_TO_ADDR
// end ;
66574: GO 66484
66576: POP
66577: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
66578: LD_STRING setSpecText(
66580: PUSH
66581: LD_VAR 0 2
66585: STR
66586: PUSH
66587: LD_STRING ,
66589: STR
66590: PUSH
66591: LD_INT 2
66593: STR
66594: PUSH
66595: LD_STRING ,
66597: STR
66598: PUSH
66599: LD_VAR 0 4
66603: STR
66604: PUSH
66605: LD_STRING )
66607: STR
66608: PPUSH
66609: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
66613: LD_STRING setSpecText(
66615: PUSH
66616: LD_VAR 0 2
66620: STR
66621: PUSH
66622: LD_STRING ,
66624: STR
66625: PUSH
66626: LD_INT 3
66628: STR
66629: PUSH
66630: LD_STRING ,
66632: STR
66633: PUSH
66634: LD_VAR 0 5
66638: STR
66639: PUSH
66640: LD_STRING )
66642: STR
66643: PPUSH
66644: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
66648: LD_STRING setSpecText(
66650: PUSH
66651: LD_VAR 0 2
66655: STR
66656: PUSH
66657: LD_STRING ,
66659: STR
66660: PUSH
66661: LD_INT 4
66663: STR
66664: PUSH
66665: LD_STRING ,
66667: STR
66668: PUSH
66669: LD_VAR 0 6
66673: STR
66674: PUSH
66675: LD_STRING )
66677: STR
66678: PPUSH
66679: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
66683: LD_STRING setSpecText(
66685: PUSH
66686: LD_VAR 0 2
66690: STR
66691: PUSH
66692: LD_STRING ,
66694: STR
66695: PUSH
66696: LD_INT 5
66698: STR
66699: PUSH
66700: LD_STRING ,
66702: STR
66703: PUSH
66704: LD_VAR 0 7
66708: STR
66709: PUSH
66710: LD_STRING )
66712: STR
66713: PPUSH
66714: CALL_OW 559
// end ; end ;
66718: GO 66334
66720: POP
66721: POP
// end ;
66722: LD_VAR 0 1
66726: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
66727: LD_INT 2
66729: PUSH
66730: LD_INT 30
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 30
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: LIST
66754: PPUSH
66755: CALL_OW 69
66759: IFFALSE 66769
66761: GO 66763
66763: DISABLE
// begin enable ;
66764: ENABLE
// UpdateSpectatorBar ;
66765: CALL 66310 0 0
// end ;
66769: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66770: LD_INT 0
66772: PPUSH
// end ;
66773: LD_VAR 0 12
66777: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66782: LD_VAR 0 1
66786: NOT
66787: IFTRUE 66806
66789: PUSH
66790: LD_VAR 0 2
66794: PPUSH
66795: LD_VAR 0 3
66799: PPUSH
66800: CALL_OW 488
66804: NOT
66805: OR
66806: IFTRUE 66841
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: CALL_OW 266
66818: PUSH
66819: LD_INT 3
66821: NONEQUAL
66822: IFFALSE 66840
66824: PUSH
66825: LD_VAR 0 1
66829: PPUSH
66830: CALL_OW 247
66834: PUSH
66835: LD_INT 1
66837: EQUAL
66838: NOT
66839: AND
66840: OR
66841: IFFALSE 66845
// exit ;
66843: GO 67127
// if GetType ( factory ) = unit_human then
66845: LD_VAR 0 1
66849: PPUSH
66850: CALL_OW 247
66854: PUSH
66855: LD_INT 1
66857: EQUAL
66858: IFFALSE 66875
// factory := IsInUnit ( factory ) ;
66860: LD_ADDR_VAR 0 1
66864: PUSH
66865: LD_VAR 0 1
66869: PPUSH
66870: CALL_OW 310
66874: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66875: LD_VAR 0 1
66879: PPUSH
66880: CALL_OW 266
66884: PUSH
66885: LD_INT 3
66887: NONEQUAL
66888: IFFALSE 66892
// exit ;
66890: GO 67127
// for i := 1 to Count ( factoryWaypoints ) do
66892: LD_ADDR_VAR 0 5
66896: PUSH
66897: DOUBLE
66898: LD_INT 1
66900: DEC
66901: ST_TO_ADDR
66902: LD_EXP 57
66906: PPUSH
66907: CALL 18262 0 1
66911: PUSH
66912: FOR_TO
66913: IFFALSE 67075
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
66915: LD_VAR 0 2
66919: PPUSH
66920: LD_VAR 0 3
66924: PPUSH
66925: CALL_OW 428
66929: PUSH
66930: LD_EXP 57
66934: PUSH
66935: LD_VAR 0 5
66939: ARRAY
66940: PUSH
66941: LD_INT 2
66943: ARRAY
66944: EQUAL
66945: IFFALSE 66977
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66947: LD_ADDR_EXP 57
66951: PUSH
66952: LD_EXP 57
66956: PPUSH
66957: LD_VAR 0 5
66961: PPUSH
66962: CALL_OW 3
66966: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66967: CALL 67132 0 0
// exit ;
66971: POP
66972: POP
66973: GO 67127
// end else
66975: GO 67073
// if factory = factoryWaypoints [ i ] [ 2 ] then
66977: LD_VAR 0 1
66981: PUSH
66982: LD_EXP 57
66986: PUSH
66987: LD_VAR 0 5
66991: ARRAY
66992: PUSH
66993: LD_INT 2
66995: ARRAY
66996: EQUAL
66997: IFFALSE 67073
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66999: LD_ADDR_EXP 57
67003: PUSH
67004: LD_EXP 57
67008: PPUSH
67009: LD_VAR 0 5
67013: PPUSH
67014: CALL_OW 3
67018: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67019: LD_ADDR_EXP 57
67023: PUSH
67024: LD_EXP 57
67028: PPUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 255
67038: PUSH
67039: LD_VAR 0 1
67043: PUSH
67044: LD_VAR 0 2
67048: PUSH
67049: LD_VAR 0 3
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: PPUSH
67060: CALL 54238 0 2
67064: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67065: CALL 67132 0 0
// exit ;
67069: POP
67070: POP
67071: GO 67127
// end ; end ;
67073: GO 66912
67075: POP
67076: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67077: LD_ADDR_EXP 57
67081: PUSH
67082: LD_EXP 57
67086: PPUSH
67087: LD_VAR 0 1
67091: PPUSH
67092: CALL_OW 255
67096: PUSH
67097: LD_VAR 0 1
67101: PUSH
67102: LD_VAR 0 2
67106: PUSH
67107: LD_VAR 0 3
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: PPUSH
67118: CALL 54238 0 2
67122: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67123: CALL 67132 0 0
// end ;
67127: LD_VAR 0 4
67131: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67132: LD_INT 0
67134: PPUSH
67135: PPUSH
67136: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67137: LD_STRING resetFactoryWaypoint();
67139: PPUSH
67140: CALL_OW 559
// if factoryWaypoints then
67144: LD_EXP 57
67148: IFFALSE 67269
// begin list := factoryWaypoints ;
67150: LD_ADDR_VAR 0 3
67154: PUSH
67155: LD_EXP 57
67159: ST_TO_ADDR
// for i := 1 to list do
67160: LD_ADDR_VAR 0 2
67164: PUSH
67165: DOUBLE
67166: LD_INT 1
67168: DEC
67169: ST_TO_ADDR
67170: LD_VAR 0 3
67174: PUSH
67175: FOR_TO
67176: IFFALSE 67267
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67178: LD_STRING setFactoryWaypointXY(
67180: PUSH
67181: LD_VAR 0 3
67185: PUSH
67186: LD_VAR 0 2
67190: ARRAY
67191: PUSH
67192: LD_INT 1
67194: ARRAY
67195: STR
67196: PUSH
67197: LD_STRING ,
67199: STR
67200: PUSH
67201: LD_VAR 0 3
67205: PUSH
67206: LD_VAR 0 2
67210: ARRAY
67211: PUSH
67212: LD_INT 2
67214: ARRAY
67215: STR
67216: PUSH
67217: LD_STRING ,
67219: STR
67220: PUSH
67221: LD_VAR 0 3
67225: PUSH
67226: LD_VAR 0 2
67230: ARRAY
67231: PUSH
67232: LD_INT 3
67234: ARRAY
67235: STR
67236: PUSH
67237: LD_STRING ,
67239: STR
67240: PUSH
67241: LD_VAR 0 3
67245: PUSH
67246: LD_VAR 0 2
67250: ARRAY
67251: PUSH
67252: LD_INT 4
67254: ARRAY
67255: STR
67256: PUSH
67257: LD_STRING )
67259: STR
67260: PPUSH
67261: CALL_OW 559
67265: GO 67175
67267: POP
67268: POP
// end ; end ;
67269: LD_VAR 0 1
67273: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67274: LD_INT 0
67276: PPUSH
// if HexInfo ( x , y ) = warehouse then
67277: LD_VAR 0 2
67281: PPUSH
67282: LD_VAR 0 3
67286: PPUSH
67287: CALL_OW 428
67291: PUSH
67292: LD_VAR 0 1
67296: EQUAL
67297: IFFALSE 67324
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67299: LD_ADDR_EXP 59
67303: PUSH
67304: LD_EXP 59
67308: PPUSH
67309: LD_VAR 0 1
67313: PPUSH
67314: LD_INT 0
67316: PPUSH
67317: CALL_OW 1
67321: ST_TO_ADDR
67322: GO 67375
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67324: LD_ADDR_EXP 59
67328: PUSH
67329: LD_EXP 59
67333: PPUSH
67334: LD_VAR 0 1
67338: PPUSH
67339: LD_VAR 0 1
67343: PPUSH
67344: CALL_OW 255
67348: PUSH
67349: LD_VAR 0 1
67353: PUSH
67354: LD_VAR 0 2
67358: PUSH
67359: LD_VAR 0 3
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: PPUSH
67370: CALL_OW 1
67374: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67375: CALL 67384 0 0
// end ;
67379: LD_VAR 0 4
67383: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67384: LD_INT 0
67386: PPUSH
67387: PPUSH
67388: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67389: LD_STRING resetWarehouseGatheringPoints();
67391: PPUSH
67392: CALL_OW 559
// if warehouseGatheringPoints then
67396: LD_EXP 59
67400: IFFALSE 67526
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67402: LD_ADDR_VAR 0 3
67406: PUSH
67407: LD_EXP 59
67411: PPUSH
67412: CALL 58172 0 1
67416: ST_TO_ADDR
// for i := 1 to list do
67417: LD_ADDR_VAR 0 2
67421: PUSH
67422: DOUBLE
67423: LD_INT 1
67425: DEC
67426: ST_TO_ADDR
67427: LD_VAR 0 3
67431: PUSH
67432: FOR_TO
67433: IFFALSE 67524
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67435: LD_STRING setWarehouseGatheringPointXY(
67437: PUSH
67438: LD_VAR 0 3
67442: PUSH
67443: LD_VAR 0 2
67447: ARRAY
67448: PUSH
67449: LD_INT 1
67451: ARRAY
67452: STR
67453: PUSH
67454: LD_STRING ,
67456: STR
67457: PUSH
67458: LD_VAR 0 3
67462: PUSH
67463: LD_VAR 0 2
67467: ARRAY
67468: PUSH
67469: LD_INT 2
67471: ARRAY
67472: STR
67473: PUSH
67474: LD_STRING ,
67476: STR
67477: PUSH
67478: LD_VAR 0 3
67482: PUSH
67483: LD_VAR 0 2
67487: ARRAY
67488: PUSH
67489: LD_INT 3
67491: ARRAY
67492: STR
67493: PUSH
67494: LD_STRING ,
67496: STR
67497: PUSH
67498: LD_VAR 0 3
67502: PUSH
67503: LD_VAR 0 2
67507: ARRAY
67508: PUSH
67509: LD_INT 4
67511: ARRAY
67512: STR
67513: PUSH
67514: LD_STRING )
67516: STR
67517: PPUSH
67518: CALL_OW 559
67522: GO 67432
67524: POP
67525: POP
// end ; end ;
67526: LD_VAR 0 1
67530: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67531: LD_INT 0
67533: PPUSH
67534: PPUSH
// if not mpSidePositions then
67535: LD_EXP 42
67539: NOT
67540: IFFALSE 67544
// exit ;
67542: GO 67615
// result :=  ;
67544: LD_ADDR_VAR 0 1
67548: PUSH
67549: LD_STRING 
67551: ST_TO_ADDR
// for i := 1 to 8 do
67552: LD_ADDR_VAR 0 2
67556: PUSH
67557: DOUBLE
67558: LD_INT 1
67560: DEC
67561: ST_TO_ADDR
67562: LD_INT 8
67564: PUSH
67565: FOR_TO
67566: IFFALSE 67596
// begin result := result & mpSidePositions [ i ] & ; ;
67568: LD_ADDR_VAR 0 1
67572: PUSH
67573: LD_VAR 0 1
67577: PUSH
67578: LD_EXP 42
67582: PUSH
67583: LD_VAR 0 2
67587: ARRAY
67588: STR
67589: PUSH
67590: LD_STRING ;
67592: STR
67593: ST_TO_ADDR
// end ;
67594: GO 67565
67596: POP
67597: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
67598: LD_STRING setMultiplayerRealPosition("
67600: PUSH
67601: LD_VAR 0 1
67605: STR
67606: PUSH
67607: LD_STRING ");
67609: STR
67610: PPUSH
67611: CALL_OW 559
// end ;
67615: LD_VAR 0 1
67619: RET
