// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5860 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7203 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 9161 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9277 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9897 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 15650 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 58237 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 24
 359: PUSH
 360: LD_INT 36
 362: PUSH
 363: LD_INT 48
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 985 0 2
// PlaceMines ( extraMinefield , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 381: LD_INT 24
 383: PPUSH
 384: LD_INT 6
 386: PUSH
 387: LD_INT 8
 389: PUSH
 390: LD_INT 10
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: LD_OWVAR 67
 402: ARRAY
 403: PPUSH
 404: CALL 985 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 408: LD_ADDR_VAR 0 8
 412: PUSH
 413: LD_INT 3
 415: PUSH
 416: LD_INT 5
 418: PUSH
 419: LD_INT 7
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: PUSH
 427: LD_OWVAR 67
 431: ARRAY
 432: ST_TO_ADDR
// uc_side := side ;
 433: LD_ADDR_OWVAR 20
 437: PUSH
 438: LD_VAR 0 1
 442: ST_TO_ADDR
// uc_nation := 2 ;
 443: LD_ADDR_OWVAR 21
 447: PUSH
 448: LD_INT 2
 450: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 8000 , 1200 , 400 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 451: LD_ADDR_EXP 14
 455: PUSH
 456: LD_INT 2
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: LD_STRING 
 464: PPUSH
 465: LD_VAR 0 8
 469: PPUSH
 470: LD_INT 8000
 472: PUSH
 473: LD_INT 1200
 475: PUSH
 476: LD_INT 400
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PPUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 11
 489: PUSH
 490: LD_INT 12
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: PUSH
 507: LD_INT 6
 509: PUSH
 510: LD_INT 3
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL 24248 0 6
 523: ST_TO_ADDR
// arForceTmp := [ ] ;
 524: LD_ADDR_EXP 15
 528: PUSH
 529: EMPTY
 530: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 22
 538: PUSH
 539: LD_VAR 0 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 30
 550: PUSH
 551: LD_INT 31
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PUSH
 558: LD_INT 3
 560: PUSH
 561: LD_INT 95
 563: PUSH
 564: LD_INT 1
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: LD_INT 58
 577: PUSH
 578: EMPTY
 579: LIST
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PPUSH
 587: CALL_OW 69
 591: PUSH
 592: FOR_IN
 593: IFFALSE 722
// begin d := GetDir ( i ) ;
 595: LD_ADDR_VAR 0 4
 599: PUSH
 600: LD_VAR 0 3
 604: PPUSH
 605: CALL_OW 254
 609: ST_TO_ADDR
// if d < 3 then
 610: LD_VAR 0 4
 614: PUSH
 615: LD_INT 3
 617: LESS
 618: IFFALSE 636
// d := d + 3 else
 620: LD_ADDR_VAR 0 4
 624: PUSH
 625: LD_VAR 0 4
 629: PUSH
 630: LD_INT 3
 632: PLUS
 633: ST_TO_ADDR
 634: GO 650
// d := d - 3 ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_VAR 0 4
 645: PUSH
 646: LD_INT 3
 648: MINUS
 649: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 650: LD_INT 0
 652: PPUSH
 653: LD_VAR 0 8
 657: PPUSH
 658: CALL_OW 381
// un := CreateHuman ;
 662: LD_ADDR_VAR 0 6
 666: PUSH
 667: CALL_OW 44
 671: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 672: LD_ADDR_EXP 15
 676: PUSH
 677: LD_EXP 15
 681: PPUSH
 682: LD_VAR 0 6
 686: PPUSH
 687: CALL 53298 0 2
 691: ST_TO_ADDR
// SetDir ( un , d ) ;
 692: LD_VAR 0 6
 696: PPUSH
 697: LD_VAR 0 4
 701: PPUSH
 702: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 706: LD_VAR 0 6
 710: PPUSH
 711: LD_VAR 0 3
 715: PPUSH
 716: CALL_OW 52
// end ;
 720: GO 592
 722: POP
 723: POP
// for i := 1 to 2 do
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: DOUBLE
 730: LD_INT 1
 732: DEC
 733: ST_TO_ADDR
 734: LD_INT 2
 736: PUSH
 737: FOR_TO
 738: IFFALSE 822
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 740: LD_INT 14
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 31
 751: PPUSH
 752: LD_INT 100
 754: PPUSH
 755: CALL 20427 0 5
// un := CreateVehicle ;
 759: LD_ADDR_VAR 0 6
 763: PUSH
 764: CALL_OW 45
 768: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 769: LD_VAR 0 6
 773: PPUSH
 774: LD_INT 102
 776: PPUSH
 777: LD_INT 31
 779: PPUSH
 780: LD_INT 6
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 790: LD_INT 0
 792: PPUSH
 793: LD_VAR 0 8
 797: PUSH
 798: LD_INT 2
 800: PLUS
 801: PPUSH
 802: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_VAR 0 6
 815: PPUSH
 816: CALL_OW 52
// end ;
 820: GO 737
 822: POP
 823: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 824: LD_ADDR_VAR 0 3
 828: PUSH
 829: LD_INT 22
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 3
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PPUSH
 855: CALL_OW 69
 859: PUSH
 860: FOR_IN
 861: IFFALSE 894
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 863: LD_VAR 0 3
 867: PPUSH
 868: LD_INT 3
 870: PUSH
 871: LD_INT 5
 873: PUSH
 874: LD_INT 7
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL_OW 241
 892: GO 860
 894: POP
 895: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 896: LD_ADDR_VAR 0 3
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_VAR 0 1
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 32
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PPUSH
 927: CALL_OW 69
 931: PUSH
 932: FOR_IN
 933: IFFALSE 978
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 935: LD_VAR 0 3
 939: PPUSH
 940: LD_INT 27
 942: PUSH
 943: LD_INT 25
 945: PUSH
 946: LD_INT 28
 948: PUSH
 949: LD_INT 27
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: PUSH
 958: LD_VAR 0 3
 962: PUSH
 963: LD_INT 4
 965: MOD
 966: PUSH
 967: LD_INT 1
 969: PLUS
 970: ARRAY
 971: PPUSH
 972: CALL_OW 431
 976: GO 932
 978: POP
 979: POP
// end ;
 980: LD_VAR 0 2
 984: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 985: LD_INT 0
 987: PPUSH
 988: PPUSH
 989: PPUSH
 990: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 991: LD_ADDR_VAR 0 5
 995: PUSH
 996: LD_VAR 0 1
1000: PPUSH
1001: LD_INT 0
1003: PPUSH
1004: CALL_OW 517
1008: ST_TO_ADDR
// if not tmp then
1009: LD_VAR 0 5
1013: NOT
1014: IFFALSE 1018
// exit ;
1016: GO 1260
// for i := 1 to n do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_VAR 0 2
1032: PUSH
1033: FOR_TO
1034: IFFALSE 1258
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1036: LD_ADDR_VAR 0 6
1040: PUSH
1041: LD_INT 1
1043: PPUSH
1044: LD_VAR 0 5
1048: PUSH
1049: LD_INT 1
1051: ARRAY
1052: PPUSH
1053: CALL_OW 12
1057: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1058: LD_VAR 0 5
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PUSH
1067: LD_VAR 0 6
1071: ARRAY
1072: PPUSH
1073: LD_VAR 0 5
1077: PUSH
1078: LD_INT 2
1080: ARRAY
1081: PUSH
1082: LD_VAR 0 6
1086: ARRAY
1087: PPUSH
1088: LD_EXP 3
1092: PUSH
1093: LD_INT 1
1095: ARRAY
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1104: LD_ADDR_EXP 13
1108: PUSH
1109: LD_EXP 13
1113: PPUSH
1114: LD_EXP 13
1118: PUSH
1119: LD_INT 1
1121: PLUS
1122: PPUSH
1123: LD_VAR 0 5
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PUSH
1132: LD_VAR 0 6
1136: ARRAY
1137: PPUSH
1138: CALL_OW 2
1142: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1143: LD_ADDR_EXP 13
1147: PUSH
1148: LD_EXP 13
1152: PPUSH
1153: LD_EXP 13
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: PPUSH
1162: LD_VAR 0 5
1166: PUSH
1167: LD_INT 2
1169: ARRAY
1170: PUSH
1171: LD_VAR 0 6
1175: ARRAY
1176: PPUSH
1177: CALL_OW 2
1181: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1182: LD_ADDR_VAR 0 5
1186: PUSH
1187: LD_VAR 0 5
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_VAR 0 5
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_VAR 0 6
1208: PPUSH
1209: CALL_OW 3
1213: PPUSH
1214: CALL_OW 1
1218: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1219: LD_ADDR_VAR 0 5
1223: PUSH
1224: LD_VAR 0 5
1228: PPUSH
1229: LD_INT 2
1231: PPUSH
1232: LD_VAR 0 5
1236: PUSH
1237: LD_INT 2
1239: ARRAY
1240: PPUSH
1241: LD_VAR 0 6
1245: PPUSH
1246: CALL_OW 3
1250: PPUSH
1251: CALL_OW 1
1255: ST_TO_ADDR
// end ;
1256: GO 1033
1258: POP
1259: POP
// end ;
1260: LD_VAR 0 3
1264: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1265: LD_INT 0
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// enable ;
1298: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1299: LD_ADDR_VAR 0 11
1303: PUSH
1304: LD_INT 81
1306: PUSH
1307: LD_VAR 0 1
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: PPUSH
1316: CALL_OW 69
1320: ST_TO_ADDR
// if tmp then
1321: LD_VAR 0 11
1325: IFFALSE 1346
// enemySide := GetSide ( tmp [ 1 ] ) ;
1327: LD_ADDR_VAR 0 38
1331: PUSH
1332: LD_VAR 0 11
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: PPUSH
1341: CALL_OW 255
1345: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 26
1350: PUSH
1351: LD_VAR 0 3
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1373: LD_ADDR_VAR 0 27
1377: PUSH
1378: LD_VAR 0 4
1382: PPUSH
1383: LD_INT 81
1385: PUSH
1386: LD_VAR 0 1
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: PPUSH
1395: CALL_OW 70
1399: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1400: LD_ADDR_VAR 0 13
1404: PUSH
1405: LD_INT 22
1407: PUSH
1408: LD_VAR 0 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 50
1419: PUSH
1420: EMPTY
1421: LIST
1422: PUSH
1423: LD_INT 34
1425: PUSH
1426: LD_INT 31
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: PPUSH
1438: CALL_OW 69
1442: ST_TO_ADDR
// if ct then
1443: LD_VAR 0 13
1447: IFFALSE 1538
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1449: LD_ADDR_VAR 0 15
1453: PUSH
1454: LD_INT 22
1456: PUSH
1457: LD_VAR 0 1
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 61
1471: PUSH
1472: EMPTY
1473: LIST
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 50
1481: PUSH
1482: EMPTY
1483: LIST
1484: PUSH
1485: LD_INT 33
1487: PUSH
1488: LD_INT 2
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: PPUSH
1501: CALL_OW 69
1505: ST_TO_ADDR
// if veh then
1506: LD_VAR 0 15
1510: IFFALSE 1538
// for i in veh do
1512: LD_ADDR_VAR 0 9
1516: PUSH
1517: LD_VAR 0 15
1521: PUSH
1522: FOR_IN
1523: IFFALSE 1536
// Connect ( i ) ;
1525: LD_VAR 0 9
1529: PPUSH
1530: CALL 23895 0 1
1534: GO 1522
1536: POP
1537: POP
// end ; vehicles := arVehicles ;
1538: LD_ADDR_VAR 0 30
1542: PUSH
1543: LD_EXP 8
1547: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1548: LD_ADDR_VAR 0 36
1552: PUSH
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 22
1560: PUSH
1561: LD_VAR 0 1
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 30
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PPUSH
1602: CALL_OW 70
1606: ST_TO_ADDR
// if depot then
1607: LD_VAR 0 36
1611: IFFALSE 1627
// depot := depot [ 1 ] ;
1613: LD_ADDR_VAR 0 36
1617: PUSH
1618: LD_VAR 0 36
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1627: LD_ADDR_VAR 0 22
1631: PUSH
1632: LD_VAR 0 5
1636: PPUSH
1637: LD_INT 25
1639: PUSH
1640: LD_INT 4
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 50
1649: PUSH
1650: EMPTY
1651: LIST
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 72
1661: ST_TO_ADDR
// if arTech then
1662: LD_EXP 5
1666: IFFALSE 2028
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1668: LD_ADDR_VAR 0 16
1672: PUSH
1673: LD_VAR 0 3
1677: PPUSH
1678: LD_INT 22
1680: PUSH
1681: LD_VAR 0 1
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 50
1692: PUSH
1693: EMPTY
1694: LIST
1695: PUSH
1696: LD_INT 2
1698: PUSH
1699: LD_INT 30
1701: PUSH
1702: LD_INT 6
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 7
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 30
1721: PUSH
1722: LD_INT 8
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 70
1744: ST_TO_ADDR
// if lab then
1745: LD_VAR 0 16
1749: IFFALSE 2028
// begin for j := 1 to Count ( lab ) do
1751: LD_ADDR_VAR 0 10
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 16
1765: PPUSH
1766: CALL 17689 0 1
1770: PUSH
1771: FOR_TO
1772: IFFALSE 2026
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1774: LD_VAR 0 16
1778: PUSH
1779: LD_VAR 0 10
1783: ARRAY
1784: PPUSH
1785: CALL_OW 461
1789: PUSH
1790: LD_INT 2
1792: EQUAL
1793: IFFALSE 1876
// begin for i in arTech do
1795: LD_ADDR_VAR 0 9
1799: PUSH
1800: LD_EXP 5
1804: PUSH
1805: FOR_IN
1806: IFFALSE 1872
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1808: LD_VAR 0 16
1812: PUSH
1813: LD_VAR 0 10
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 9
1823: PPUSH
1824: CALL_OW 430
1828: PUSH
1829: LD_VAR 0 9
1833: PPUSH
1834: LD_VAR 0 1
1838: PPUSH
1839: CALL_OW 321
1843: PUSH
1844: LD_INT 1
1846: EQUAL
1847: AND
1848: IFFALSE 1870
// begin AddComResearch ( lab [ j ] , i ) ;
1850: LD_VAR 0 16
1854: PUSH
1855: LD_VAR 0 10
1859: ARRAY
1860: PPUSH
1861: LD_VAR 0 9
1865: PPUSH
1866: CALL_OW 184
// end ;
1870: GO 1805
1872: POP
1873: POP
// end else
1874: GO 2024
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1876: LD_VAR 0 16
1880: PUSH
1881: LD_VAR 0 10
1885: ARRAY
1886: PPUSH
1887: CALL_OW 461
1891: PUSH
1892: LD_INT 6
1894: EQUAL
1895: IFFALSE 2024
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1897: LD_ADDR_VAR 0 9
1901: PUSH
1902: LD_VAR 0 22
1906: PPUSH
1907: LD_INT 3
1909: PUSH
1910: LD_INT 120
1912: PUSH
1913: LD_INT 10
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PPUSH
1924: CALL_OW 72
1928: PUSH
1929: FOR_IN
1930: IFFALSE 2022
// begin inside := IsInUnit ( i ) ;
1932: LD_ADDR_VAR 0 14
1936: PUSH
1937: LD_VAR 0 9
1941: PPUSH
1942: CALL_OW 310
1946: ST_TO_ADDR
// if not inside then
1947: LD_VAR 0 14
1951: NOT
1952: IFFALSE 1976
// ComEnterUnit ( i , lab [ j ] ) else
1954: LD_VAR 0 9
1958: PPUSH
1959: LD_VAR 0 16
1963: PUSH
1964: LD_VAR 0 10
1968: ARRAY
1969: PPUSH
1970: CALL_OW 120
1974: GO 2020
// if BuildingStatus ( inside ) = bs_idle then
1976: LD_VAR 0 14
1980: PPUSH
1981: CALL_OW 461
1985: PUSH
1986: LD_INT 2
1988: EQUAL
1989: IFFALSE 2020
// begin ComExitBuilding ( i ) ;
1991: LD_VAR 0 9
1995: PPUSH
1996: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
2000: LD_VAR 0 9
2004: PPUSH
2005: LD_VAR 0 16
2009: PUSH
2010: LD_VAR 0 10
2014: ARRAY
2015: PPUSH
2016: CALL_OW 180
// end ; end ;
2020: GO 1929
2022: POP
2023: POP
// end ;
2024: GO 1771
2026: POP
2027: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2028: LD_ADDR_VAR 0 33
2032: PUSH
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_INT 22
2040: PUSH
2041: LD_VAR 0 1
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 30
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 50
2062: PUSH
2063: EMPTY
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: PPUSH
2071: CALL_OW 70
2075: ST_TO_ADDR
// if fac then
2076: LD_VAR 0 33
2080: IFFALSE 2415
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2082: LD_VAR 0 33
2086: PUSH
2087: LD_INT 1
2089: ARRAY
2090: PPUSH
2091: CALL_OW 461
2095: PUSH
2096: LD_INT 2
2098: EQUAL
2099: IFFALSE 2415
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2101: LD_ADDR_VAR 0 34
2105: PUSH
2106: LD_VAR 0 3
2110: PPUSH
2111: LD_INT 2
2113: PUSH
2114: LD_INT 30
2116: PUSH
2117: LD_INT 32
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 33
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 35
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PPUSH
2153: CALL_OW 70
2157: ST_TO_ADDR
// if emptyTowers then
2158: LD_VAR 0 34
2162: IFFALSE 2212
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2164: LD_ADDR_VAR 0 35
2168: PUSH
2169: LD_VAR 0 34
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PPUSH
2178: LD_VAR 0 3
2182: PPUSH
2183: CALL 25934 0 2
2187: ST_TO_ADDR
// if weapon then
2188: LD_VAR 0 35
2192: IFFALSE 2212
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2194: LD_VAR 0 34
2198: PUSH
2199: LD_INT 1
2201: ARRAY
2202: PPUSH
2203: LD_VAR 0 35
2207: PPUSH
2208: CALL_OW 148
// end ; if arConstructList then
2212: LD_EXP 6
2216: IFFALSE 2415
// for i := 1 to Count ( arConstructList ) do
2218: LD_ADDR_VAR 0 9
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_EXP 6
2232: PPUSH
2233: CALL 17689 0 1
2237: PUSH
2238: FOR_TO
2239: IFFALSE 2413
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2241: LD_VAR 0 33
2245: PUSH
2246: LD_INT 1
2248: ARRAY
2249: PPUSH
2250: LD_EXP 6
2254: PUSH
2255: LD_VAR 0 9
2259: ARRAY
2260: PUSH
2261: LD_INT 1
2263: ARRAY
2264: PPUSH
2265: LD_EXP 6
2269: PUSH
2270: LD_VAR 0 9
2274: ARRAY
2275: PUSH
2276: LD_INT 2
2278: ARRAY
2279: PPUSH
2280: LD_EXP 6
2284: PUSH
2285: LD_VAR 0 9
2289: ARRAY
2290: PUSH
2291: LD_INT 3
2293: ARRAY
2294: PPUSH
2295: LD_EXP 6
2299: PUSH
2300: LD_VAR 0 9
2304: ARRAY
2305: PUSH
2306: LD_INT 4
2308: ARRAY
2309: PPUSH
2310: CALL_OW 448
2314: IFFALSE 2411
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2316: LD_VAR 0 33
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 6
2329: PUSH
2330: LD_VAR 0 9
2334: ARRAY
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 6
2344: PUSH
2345: LD_VAR 0 9
2349: ARRAY
2350: PUSH
2351: LD_INT 2
2353: ARRAY
2354: PPUSH
2355: LD_EXP 6
2359: PUSH
2360: LD_VAR 0 9
2364: ARRAY
2365: PUSH
2366: LD_INT 3
2368: ARRAY
2369: PPUSH
2370: LD_EXP 6
2374: PUSH
2375: LD_VAR 0 9
2379: ARRAY
2380: PUSH
2381: LD_INT 4
2383: ARRAY
2384: PPUSH
2385: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2389: LD_ADDR_EXP 6
2393: PUSH
2394: LD_EXP 6
2398: PPUSH
2399: LD_VAR 0 9
2403: PPUSH
2404: CALL_OW 3
2408: ST_TO_ADDR
// break ;
2409: GO 2413
// end ; end ;
2411: GO 2238
2413: POP
2414: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2415: LD_ADDR_VAR 0 11
2419: PUSH
2420: LD_VAR 0 3
2424: PPUSH
2425: LD_INT 22
2427: PUSH
2428: LD_VAR 0 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 21
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 57
2452: PUSH
2453: EMPTY
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 3
2462: PUSH
2463: LD_INT 24
2465: PUSH
2466: LD_INT 1000
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2488: LD_ADDR_VAR 0 21
2492: PUSH
2493: LD_VAR 0 3
2497: PPUSH
2498: CALL_OW 435
2502: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2503: LD_ADDR_VAR 0 18
2507: PUSH
2508: LD_VAR 0 5
2512: PPUSH
2513: LD_INT 25
2515: PUSH
2516: LD_INT 3
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 50
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2538: LD_VAR 0 18
2542: PPUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 120
2548: PUSH
2549: LD_INT 7
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 54
2565: PUSH
2566: EMPTY
2567: LIST
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PPUSH
2577: CALL_OW 72
2581: PUSH
2582: LD_VAR 0 33
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: CALL_OW 302
2595: AND
2596: IFFALSE 2655
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2598: LD_VAR 0 18
2602: PPUSH
2603: LD_INT 3
2605: PUSH
2606: LD_INT 120
2608: PUSH
2609: LD_INT 7
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 54
2625: PUSH
2626: EMPTY
2627: LIST
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 72
2641: PPUSH
2642: LD_VAR 0 33
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2655: LD_ADDR_VAR 0 16
2659: PUSH
2660: LD_VAR 0 3
2664: PPUSH
2665: LD_INT 2
2667: PUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 6
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 7
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 8
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PPUSH
2704: CALL_OW 70
2708: ST_TO_ADDR
// if sci then
2709: LD_VAR 0 22
2713: IFFALSE 2956
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2715: LD_ADDR_VAR 0 24
2719: PUSH
2720: LD_VAR 0 5
2724: PPUSH
2725: LD_INT 95
2727: PUSH
2728: LD_VAR 0 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 120
2739: PUSH
2740: LD_INT 1
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 72
2755: ST_TO_ADDR
// if hurtUnits then
2756: LD_VAR 0 24
2760: IFFALSE 2855
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2762: LD_ADDR_VAR 0 9
2766: PUSH
2767: LD_VAR 0 22
2771: PPUSH
2772: LD_INT 3
2774: PUSH
2775: LD_INT 120
2777: PUSH
2778: LD_INT 10
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 72
2793: PUSH
2794: FOR_IN
2795: IFFALSE 2851
// begin SetTag ( i , tHealer ) ;
2797: LD_VAR 0 9
2801: PPUSH
2802: LD_INT 10
2804: PPUSH
2805: CALL_OW 109
// if IsInUnit ( i ) then
2809: LD_VAR 0 9
2813: PPUSH
2814: CALL_OW 310
2818: IFFALSE 2831
// ComExitBuilding ( i ) else
2820: LD_VAR 0 9
2824: PPUSH
2825: CALL_OW 122
2829: GO 2849
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2831: LD_VAR 0 9
2835: PPUSH
2836: LD_VAR 0 24
2840: PUSH
2841: LD_INT 1
2843: ARRAY
2844: PPUSH
2845: CALL_OW 128
// end ;
2849: GO 2794
2851: POP
2852: POP
// end else
2853: GO 2956
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2855: LD_VAR 0 16
2859: PUSH
2860: LD_VAR 0 22
2864: PPUSH
2865: LD_INT 120
2867: PUSH
2868: LD_INT 10
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 72
2879: AND
2880: IFFALSE 2956
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2882: LD_ADDR_VAR 0 9
2886: PUSH
2887: LD_VAR 0 22
2891: PPUSH
2892: LD_INT 120
2894: PUSH
2895: LD_INT 10
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 72
2906: PUSH
2907: FOR_IN
2908: IFFALSE 2954
// begin SetTag ( i , 0 ) ;
2910: LD_VAR 0 9
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 109
// if not IsInUnit ( i ) then
2922: LD_VAR 0 9
2926: PPUSH
2927: CALL_OW 310
2931: NOT
2932: IFFALSE 2952
// ComEnterUnit ( i , lab [ 1 ] ) ;
2934: LD_VAR 0 9
2938: PPUSH
2939: LD_VAR 0 16
2943: PUSH
2944: LD_INT 1
2946: ARRAY
2947: PPUSH
2948: CALL_OW 120
// end ;
2952: GO 2907
2954: POP
2955: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2956: LD_ADDR_VAR 0 17
2960: PUSH
2961: LD_VAR 0 5
2965: PPUSH
2966: LD_INT 25
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: CALL_OW 72
2980: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2981: LD_ADDR_VAR 0 37
2985: PUSH
2986: LD_EXP 7
2990: ST_TO_ADDR
// if eng then
2991: LD_VAR 0 17
2995: IFFALSE 3829
// begin for i in eng do
2997: LD_ADDR_VAR 0 9
3001: PUSH
3002: LD_VAR 0 17
3006: PUSH
3007: FOR_IN
3008: IFFALSE 3827
// begin tag := GetTag ( i ) ;
3010: LD_ADDR_VAR 0 19
3014: PUSH
3015: LD_VAR 0 9
3019: PPUSH
3020: CALL_OW 110
3024: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
3025: LD_VAR 0 9
3029: PPUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: CALL_OW 308
3039: IFFALSE 3070
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3041: LD_VAR 0 9
3045: PPUSH
3046: LD_VAR 0 7
3050: PUSH
3051: LD_INT 1
3053: ARRAY
3054: PPUSH
3055: LD_VAR 0 7
3059: PUSH
3060: LD_INT 2
3062: ARRAY
3063: PPUSH
3064: CALL_OW 111
// continue ;
3068: GO 3007
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3070: LD_VAR 0 9
3074: PPUSH
3075: CALL_OW 256
3079: PUSH
3080: LD_INT 800
3082: LESS
3083: PUSH
3084: LD_VAR 0 19
3088: PUSH
3089: LD_INT 1
3091: NONEQUAL
3092: AND
3093: IFFALSE 3143
// begin SetTag ( i , tHeal ) ;
3095: LD_VAR 0 9
3099: PPUSH
3100: LD_INT 1
3102: PPUSH
3103: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3107: LD_VAR 0 9
3111: PPUSH
3112: LD_VAR 0 6
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: PPUSH
3121: LD_VAR 0 6
3125: PUSH
3126: LD_INT 2
3128: ARRAY
3129: PPUSH
3130: CALL_OW 111
// AddComHold ( i ) ;
3134: LD_VAR 0 9
3138: PPUSH
3139: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3143: LD_VAR 0 19
3147: PUSH
3148: LD_INT 1
3150: EQUAL
3151: PUSH
3152: LD_VAR 0 9
3156: PPUSH
3157: CALL_OW 256
3161: PUSH
3162: LD_INT 1000
3164: EQUAL
3165: AND
3166: IFFALSE 3180
// SetTag ( i , 0 ) ;
3168: LD_VAR 0 9
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 109
// if not tag then
3180: LD_VAR 0 19
3184: NOT
3185: IFFALSE 3352
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3187: LD_ADDR_VAR 0 12
3191: PUSH
3192: LD_VAR 0 3
3196: PPUSH
3197: LD_INT 57
3199: PUSH
3200: EMPTY
3201: LIST
3202: PPUSH
3203: CALL_OW 70
3207: ST_TO_ADDR
// if undone then
3208: LD_VAR 0 12
3212: IFFALSE 3234
// begin ComComplete ( i , undone [ 1 ] ) ;
3214: LD_VAR 0 9
3218: PPUSH
3219: LD_VAR 0 12
3223: PUSH
3224: LD_INT 1
3226: ARRAY
3227: PPUSH
3228: CALL 23787 0 2
// continue ;
3232: GO 3007
// end ; if cr or tmp or buildingsToBuild then
3234: LD_VAR 0 21
3238: PUSH
3239: LD_VAR 0 11
3243: OR
3244: PUSH
3245: LD_VAR 0 37
3249: OR
3250: IFFALSE 3326
// begin if IsInUnit ( i ) then
3252: LD_VAR 0 9
3256: PPUSH
3257: CALL_OW 310
3261: IFFALSE 3272
// ComExitBuilding ( i ) ;
3263: LD_VAR 0 9
3267: PPUSH
3268: CALL_OW 122
// if tmp then
3272: LD_VAR 0 11
3276: IFFALSE 3292
// SetTag ( i , tRepair ) else
3278: LD_VAR 0 9
3282: PPUSH
3283: LD_INT 3
3285: PPUSH
3286: CALL_OW 109
3290: GO 3324
// if cr then
3292: LD_VAR 0 21
3296: IFFALSE 3312
// SetTag ( i , tCrates ) else
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_INT 2
3305: PPUSH
3306: CALL_OW 109
3310: GO 3324
// SetTag ( i , tBuild ) ;
3312: LD_VAR 0 9
3316: PPUSH
3317: LD_INT 5
3319: PPUSH
3320: CALL_OW 109
// end else
3324: GO 3352
// if not IsInUnit ( i ) then
3326: LD_VAR 0 9
3330: PPUSH
3331: CALL_OW 310
3335: NOT
3336: IFFALSE 3352
// ComEnterUnit ( i , depot ) ;
3338: LD_VAR 0 9
3342: PPUSH
3343: LD_VAR 0 36
3347: PPUSH
3348: CALL_OW 120
// end ; if tag = tRepair then
3352: LD_VAR 0 19
3356: PUSH
3357: LD_INT 3
3359: EQUAL
3360: IFFALSE 3466
// begin if IsInUnit ( i ) then
3362: LD_VAR 0 9
3366: PPUSH
3367: CALL_OW 310
3371: IFFALSE 3384
// begin ComExitBuilding ( i ) ;
3373: LD_VAR 0 9
3377: PPUSH
3378: CALL_OW 122
// continue ;
3382: GO 3007
// end ; if not tmp then
3384: LD_VAR 0 11
3388: NOT
3389: IFFALSE 3405
// begin SetTag ( i , 0 ) ;
3391: LD_VAR 0 9
3395: PPUSH
3396: LD_INT 0
3398: PPUSH
3399: CALL_OW 109
// continue ;
3403: GO 3007
// end ; if not HasTask ( i ) then
3405: LD_VAR 0 9
3409: PPUSH
3410: CALL_OW 314
3414: NOT
3415: IFFALSE 3435
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3417: LD_VAR 0 9
3421: PPUSH
3422: LD_VAR 0 11
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: PPUSH
3431: CALL_OW 130
// if not IsInArea ( i , area ) then
3435: LD_VAR 0 9
3439: PPUSH
3440: LD_VAR 0 3
3444: PPUSH
3445: CALL_OW 308
3449: NOT
3450: IFFALSE 3466
// ComMoveToArea ( i , area ) ;
3452: LD_VAR 0 9
3456: PPUSH
3457: LD_VAR 0 3
3461: PPUSH
3462: CALL_OW 113
// end ; if tag = tBuild then
3466: LD_VAR 0 19
3470: PUSH
3471: LD_INT 5
3473: EQUAL
3474: IFFALSE 3680
// begin if IsInUnit ( i ) then
3476: LD_VAR 0 9
3480: PPUSH
3481: CALL_OW 310
3485: IFFALSE 3498
// begin ComExitBuilding ( i ) ;
3487: LD_VAR 0 9
3491: PPUSH
3492: CALL_OW 122
// continue ;
3496: GO 3007
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3498: LD_VAR 0 37
3502: NOT
3503: PUSH
3504: LD_VAR 0 26
3508: OR
3509: PUSH
3510: LD_VAR 0 27
3514: OR
3515: IFFALSE 3533
// begin SetTag ( i , 0 ) ;
3517: LD_VAR 0 9
3521: PPUSH
3522: LD_INT 0
3524: PPUSH
3525: CALL_OW 109
// continue ;
3529: GO 3007
// end else
3531: GO 3572
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3533: LD_VAR 0 36
3537: PPUSH
3538: LD_VAR 0 37
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: PPUSH
3551: CALL 57221 0 2
3555: NOT
3556: IFFALSE 3572
// begin SetTag ( i , 0 ) ;
3558: LD_VAR 0 9
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 109
// continue ;
3570: GO 3007
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3572: LD_ADDR_VAR 0 12
3576: PUSH
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 57
3584: PUSH
3585: EMPTY
3586: LIST
3587: PPUSH
3588: CALL_OW 70
3592: ST_TO_ADDR
// if undone then
3593: LD_VAR 0 12
3597: IFFALSE 3619
// begin ComComplete ( i , undone [ 1 ] ) ;
3599: LD_VAR 0 9
3603: PPUSH
3604: LD_VAR 0 12
3608: PUSH
3609: LD_INT 1
3611: ARRAY
3612: PPUSH
3613: CALL 23787 0 2
// continue ;
3617: GO 3007
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3619: LD_VAR 0 9
3623: PPUSH
3624: LD_VAR 0 37
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: PPUSH
3637: LD_VAR 0 37
3641: PUSH
3642: LD_INT 1
3644: ARRAY
3645: PUSH
3646: LD_INT 2
3648: ARRAY
3649: PPUSH
3650: LD_VAR 0 37
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PUSH
3659: LD_INT 3
3661: ARRAY
3662: PPUSH
3663: LD_VAR 0 37
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PUSH
3672: LD_INT 4
3674: ARRAY
3675: PPUSH
3676: CALL_OW 145
// end ; if tag = tCrates then
3680: LD_VAR 0 19
3684: PUSH
3685: LD_INT 2
3687: EQUAL
3688: IFFALSE 3825
// begin if IsInUnit ( i ) then
3690: LD_VAR 0 9
3694: PPUSH
3695: CALL_OW 310
3699: IFFALSE 3712
// begin ComExitBuilding ( i ) ;
3701: LD_VAR 0 9
3705: PPUSH
3706: CALL_OW 122
// continue ;
3710: GO 3007
// end ; if not cr then
3712: LD_VAR 0 21
3716: NOT
3717: IFFALSE 3733
// begin SetTag ( i , 0 ) ;
3719: LD_VAR 0 9
3723: PPUSH
3724: LD_INT 0
3726: PPUSH
3727: CALL_OW 109
// continue ;
3731: GO 3007
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3733: LD_VAR 0 9
3737: PPUSH
3738: CALL_OW 314
3742: NOT
3743: PUSH
3744: LD_INT 81
3746: PUSH
3747: LD_VAR 0 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 92
3758: PUSH
3759: LD_VAR 0 21
3763: PUSH
3764: LD_INT 1
3766: ARRAY
3767: PUSH
3768: LD_VAR 0 21
3772: PUSH
3773: LD_INT 2
3775: ARRAY
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 69
3794: NOT
3795: AND
3796: IFFALSE 3825
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3798: LD_VAR 0 9
3802: PPUSH
3803: LD_VAR 0 21
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_VAR 0 21
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 117
// end ; end ;
3825: GO 3007
3827: POP
3828: POP
// end ; if vehicles then
3829: LD_VAR 0 30
3833: IFFALSE 4633
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3835: LD_ADDR_VAR 0 30
3839: PUSH
3840: LD_VAR 0 30
3844: PPUSH
3845: LD_INT 3
3847: PUSH
3848: LD_INT 2
3850: PUSH
3851: LD_INT 34
3853: PUSH
3854: LD_INT 88
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 34
3863: PUSH
3864: LD_INT 32
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 50
3882: PUSH
3883: EMPTY
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 72
3894: ST_TO_ADDR
// if vehicles then
3895: LD_VAR 0 30
3899: IFFALSE 4633
// begin for i in vehicles do
3901: LD_ADDR_VAR 0 9
3905: PUSH
3906: LD_VAR 0 30
3910: PUSH
3911: FOR_IN
3912: IFFALSE 4631
// begin tag := GetTag ( i ) ;
3914: LD_ADDR_VAR 0 19
3918: PUSH
3919: LD_VAR 0 9
3923: PPUSH
3924: CALL_OW 110
3928: ST_TO_ADDR
// if not tag then
3929: LD_VAR 0 19
3933: NOT
3934: IFFALSE 4080
// begin if GetControl ( i ) = control_manual then
3936: LD_VAR 0 9
3940: PPUSH
3941: CALL_OW 263
3945: PUSH
3946: LD_INT 1
3948: EQUAL
3949: IFFALSE 4066
// begin drivers := arDrivers ;
3951: LD_ADDR_VAR 0 28
3955: PUSH
3956: LD_EXP 10
3960: ST_TO_ADDR
// if not drivers then
3961: LD_VAR 0 28
3965: NOT
3966: IFFALSE 4046
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3968: LD_ADDR_VAR 0 28
3972: PUSH
3973: LD_VAR 0 18
3977: PPUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 120
3983: PUSH
3984: LD_INT 7
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: ST_TO_ADDR
// if drivers then
4000: LD_VAR 0 28
4004: IFFALSE 4046
// begin SetTag ( drivers [ 1 ] , tMech ) ;
4006: LD_VAR 0 28
4010: PUSH
4011: LD_INT 1
4013: ARRAY
4014: PPUSH
4015: LD_INT 7
4017: PPUSH
4018: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
4022: LD_ADDR_EXP 10
4026: PUSH
4027: LD_EXP 10
4031: PPUSH
4032: LD_VAR 0 28
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: CALL 53298 0 2
4045: ST_TO_ADDR
// end ; end ; if drivers then
4046: LD_VAR 0 28
4050: IFFALSE 4064
// SetTag ( i , tBusy ) ;
4052: LD_VAR 0 9
4056: PPUSH
4057: LD_INT 8
4059: PPUSH
4060: CALL_OW 109
// continue ;
4064: GO 3911
// end ; SetTag ( i , tBusy ) ;
4066: LD_VAR 0 9
4070: PPUSH
4071: LD_INT 8
4073: PPUSH
4074: CALL_OW 109
// end else
4078: GO 4629
// if tag = tBusy then
4080: LD_VAR 0 19
4084: PUSH
4085: LD_INT 8
4087: EQUAL
4088: IFFALSE 4300
// begin if GetLives ( i ) = 1000 then
4090: LD_VAR 0 9
4094: PPUSH
4095: CALL_OW 256
4099: PUSH
4100: LD_INT 1000
4102: EQUAL
4103: IFFALSE 4298
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4105: LD_VAR 0 9
4109: PPUSH
4110: CALL_OW 263
4114: PUSH
4115: LD_INT 1
4117: EQUAL
4118: PUSH
4119: LD_VAR 0 9
4123: PPUSH
4124: CALL_OW 311
4128: NOT
4129: AND
4130: IFFALSE 4286
// begin drivers := arDrivers ;
4132: LD_ADDR_VAR 0 28
4136: PUSH
4137: LD_EXP 10
4141: ST_TO_ADDR
// if not drivers then
4142: LD_VAR 0 28
4146: NOT
4147: IFFALSE 4163
// begin SetTag ( i , 0 ) ;
4149: LD_VAR 0 9
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: CALL_OW 109
// continue ;
4161: GO 3911
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4163: LD_VAR 0 28
4167: PUSH
4168: LD_INT 1
4170: ARRAY
4171: PPUSH
4172: CALL_OW 310
4176: PUSH
4177: LD_VAR 0 28
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: CALL 50902 0 1
4190: NOT
4191: AND
4192: IFFALSE 4207
// ComExitBuilding ( drivers [ 1 ] ) ;
4194: LD_VAR 0 28
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4207: LD_VAR 0 30
4211: PPUSH
4212: LD_INT 120
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 72
4226: PUSH
4227: LD_VAR 0 28
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: CALL_OW 314
4240: NOT
4241: AND
4242: PUSH
4243: LD_VAR 0 30
4247: PPUSH
4248: LD_INT 120
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PPUSH
4258: CALL_OW 72
4262: NOT
4263: OR
4264: IFFALSE 4284
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4266: LD_VAR 0 28
4270: PUSH
4271: LD_INT 1
4273: ARRAY
4274: PPUSH
4275: LD_VAR 0 9
4279: PPUSH
4280: CALL_OW 120
// continue ;
4284: GO 3911
// end ; SetTag ( i , tAttack ) ;
4286: LD_VAR 0 9
4290: PPUSH
4291: LD_INT 13
4293: PPUSH
4294: CALL_OW 109
// end ; end else
4298: GO 4629
// if tag = tAttack then
4300: LD_VAR 0 19
4304: PUSH
4305: LD_INT 13
4307: EQUAL
4308: IFFALSE 4488
// begin enemy := enemyInBase ;
4310: LD_ADDR_VAR 0 25
4314: PUSH
4315: LD_VAR 0 26
4319: ST_TO_ADDR
// if not enemy then
4320: LD_VAR 0 25
4324: NOT
4325: IFFALSE 4337
// enemy := enemyOuterBase ;
4327: LD_ADDR_VAR 0 25
4331: PUSH
4332: LD_VAR 0 27
4336: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4337: LD_VAR 0 25
4341: NOT
4342: PUSH
4343: LD_VAR 0 9
4347: PPUSH
4348: LD_VAR 0 7
4352: PUSH
4353: LD_INT 1
4355: ARRAY
4356: PPUSH
4357: LD_VAR 0 7
4361: PUSH
4362: LD_INT 2
4364: ARRAY
4365: PPUSH
4366: CALL_OW 297
4370: PUSH
4371: LD_INT 10
4373: GREATER
4374: AND
4375: IFFALSE 4406
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4377: LD_VAR 0 9
4381: PPUSH
4382: LD_VAR 0 7
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: LD_VAR 0 7
4395: PUSH
4396: LD_INT 2
4398: ARRAY
4399: PPUSH
4400: CALL_OW 111
// continue ;
4404: GO 3911
// end ; if GetLives ( i ) < 650 then
4406: LD_VAR 0 9
4410: PPUSH
4411: CALL_OW 256
4415: PUSH
4416: LD_INT 650
4418: LESS
4419: IFFALSE 4462
// begin SetTag ( i , tVehRepair ) ;
4421: LD_VAR 0 9
4425: PPUSH
4426: LD_INT 9
4428: PPUSH
4429: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4433: LD_VAR 0 9
4437: PPUSH
4438: LD_VAR 0 7
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_VAR 0 7
4451: PUSH
4452: LD_INT 2
4454: ARRAY
4455: PPUSH
4456: CALL_OW 111
// continue ;
4460: GO 3911
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4462: LD_VAR 0 9
4466: PPUSH
4467: LD_VAR 0 25
4471: PPUSH
4472: LD_VAR 0 9
4476: PPUSH
4477: CALL_OW 74
4481: PPUSH
4482: CALL_OW 115
// end else
4486: GO 4629
// if tag = tVehRepair then
4488: LD_VAR 0 19
4492: PUSH
4493: LD_INT 9
4495: EQUAL
4496: IFFALSE 4629
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4498: LD_VAR 0 9
4502: PPUSH
4503: LD_VAR 0 7
4507: PUSH
4508: LD_INT 1
4510: ARRAY
4511: PPUSH
4512: LD_VAR 0 7
4516: PUSH
4517: LD_INT 2
4519: ARRAY
4520: PPUSH
4521: CALL_OW 297
4525: PUSH
4526: LD_INT 10
4528: GREATER
4529: IFFALSE 4560
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4531: LD_VAR 0 9
4535: PPUSH
4536: LD_VAR 0 7
4540: PUSH
4541: LD_INT 1
4543: ARRAY
4544: PPUSH
4545: LD_VAR 0 7
4549: PUSH
4550: LD_INT 2
4552: ARRAY
4553: PPUSH
4554: CALL_OW 111
// continue ;
4558: GO 3911
// end ; if GetLives ( i ) = 1000 then
4560: LD_VAR 0 9
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4589
// begin SetTag ( i , tBusy ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: LD_INT 8
4582: PPUSH
4583: CALL_OW 109
// continue ;
4587: GO 3911
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4589: LD_VAR 0 9
4593: PPUSH
4594: CALL_OW 263
4598: PUSH
4599: LD_INT 1
4601: EQUAL
4602: PUSH
4603: LD_VAR 0 9
4607: PPUSH
4608: CALL_OW 311
4612: AND
4613: IFFALSE 4629
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4615: LD_VAR 0 9
4619: PPUSH
4620: CALL_OW 311
4624: PPUSH
4625: CALL 54998 0 1
// end ; end ;
4629: GO 3911
4631: POP
4632: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4633: LD_ADDR_VAR 0 23
4637: PUSH
4638: LD_VAR 0 5
4642: PPUSH
4643: LD_INT 2
4645: PUSH
4646: LD_INT 25
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 25
4658: PUSH
4659: LD_INT 8
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 25
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 9
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 50
4695: PUSH
4696: EMPTY
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 72
4707: ST_TO_ADDR
// if sol then
4708: LD_VAR 0 23
4712: IFFALSE 5220
// begin if enemyInBase then
4714: LD_VAR 0 26
4718: IFFALSE 4897
// begin for i in sol do
4720: LD_ADDR_VAR 0 9
4724: PUSH
4725: LD_VAR 0 23
4729: PUSH
4730: FOR_IN
4731: IFFALSE 4893
// begin tw := IsInUnit ( i ) ;
4733: LD_ADDR_VAR 0 20
4737: PUSH
4738: LD_VAR 0 9
4742: PPUSH
4743: CALL_OW 310
4747: ST_TO_ADDR
// if tw then
4748: LD_VAR 0 20
4752: IFFALSE 4835
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4754: LD_VAR 0 20
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 101
4773: PUSH
4774: LD_VAR 0 38
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: LD_INT 32
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 30
4798: PUSH
4799: LD_INT 31
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PPUSH
4816: CALL_OW 69
4820: IN
4821: NOT
4822: IFFALSE 4833
// ComExitBuilding ( i ) ;
4824: LD_VAR 0 9
4828: PPUSH
4829: CALL_OW 122
// end else
4833: GO 4891
// if IsInArea ( i , area ) then
4835: LD_VAR 0 9
4839: PPUSH
4840: LD_VAR 0 3
4844: PPUSH
4845: CALL_OW 308
4849: IFFALSE 4877
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4851: LD_VAR 0 9
4855: PPUSH
4856: LD_VAR 0 26
4860: PPUSH
4861: LD_VAR 0 9
4865: PPUSH
4866: CALL_OW 74
4870: PPUSH
4871: CALL_OW 115
4875: GO 4891
// ComMoveToArea ( i , area ) ;
4877: LD_VAR 0 9
4881: PPUSH
4882: LD_VAR 0 3
4886: PPUSH
4887: CALL_OW 113
// end ;
4891: GO 4730
4893: POP
4894: POP
// end else
4895: GO 5220
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4897: LD_ADDR_VAR 0 32
4901: PUSH
4902: LD_VAR 0 3
4906: PPUSH
4907: LD_INT 3
4909: PUSH
4910: LD_INT 62
4912: PUSH
4913: EMPTY
4914: LIST
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 2
4922: PUSH
4923: LD_INT 30
4925: PUSH
4926: LD_INT 32
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 30
4935: PUSH
4936: LD_INT 4
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: LD_INT 30
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 30
4955: PUSH
4956: LD_INT 31
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: ST_TO_ADDR
// if empty then
4979: LD_VAR 0 32
4983: IFFALSE 5000
// empty := ReverseArray ( empty ) ;
4985: LD_ADDR_VAR 0 32
4989: PUSH
4990: LD_VAR 0 32
4994: PPUSH
4995: CALL 48565 0 1
4999: ST_TO_ADDR
// for i in sol do
5000: LD_ADDR_VAR 0 9
5004: PUSH
5005: LD_VAR 0 23
5009: PUSH
5010: FOR_IN
5011: IFFALSE 5218
// begin tag := GetTag ( i ) ;
5013: LD_ADDR_VAR 0 19
5017: PUSH
5018: LD_VAR 0 9
5022: PPUSH
5023: CALL_OW 110
5027: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
5028: LD_VAR 0 9
5032: PPUSH
5033: CALL_OW 256
5037: PUSH
5038: LD_INT 1000
5040: LESS
5041: PUSH
5042: LD_VAR 0 19
5046: PUSH
5047: LD_INT 1
5049: NONEQUAL
5050: AND
5051: IFFALSE 5103
// begin SetTag ( i , tHeal ) ;
5053: LD_VAR 0 9
5057: PPUSH
5058: LD_INT 1
5060: PPUSH
5061: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5065: LD_VAR 0 9
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: ARRAY
5078: PPUSH
5079: LD_VAR 0 6
5083: PUSH
5084: LD_INT 2
5086: ARRAY
5087: PPUSH
5088: CALL_OW 111
// AddComHold ( i ) ;
5092: LD_VAR 0 9
5096: PPUSH
5097: CALL_OW 200
// continue ;
5101: GO 5010
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5103: LD_VAR 0 9
5107: PPUSH
5108: CALL_OW 256
5112: PUSH
5113: LD_INT 1000
5115: EQUAL
5116: PUSH
5117: LD_VAR 0 19
5121: PUSH
5122: LD_INT 1
5124: EQUAL
5125: AND
5126: IFFALSE 5142
// begin SetTag ( i , 0 ) ;
5128: LD_VAR 0 9
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL_OW 109
// continue ;
5140: GO 5010
// end ; if HasTask ( i ) then
5142: LD_VAR 0 9
5146: PPUSH
5147: CALL_OW 314
5151: IFFALSE 5155
// continue ;
5153: GO 5010
// if not IsInUnit ( i ) and not tag and empty then
5155: LD_VAR 0 9
5159: PPUSH
5160: CALL_OW 310
5164: NOT
5165: PUSH
5166: LD_VAR 0 19
5170: NOT
5171: AND
5172: PUSH
5173: LD_VAR 0 32
5177: AND
5178: IFFALSE 5216
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5180: LD_VAR 0 9
5184: PPUSH
5185: LD_VAR 0 32
5189: PUSH
5190: LD_INT 1
5192: ARRAY
5193: PPUSH
5194: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5198: LD_ADDR_VAR 0 32
5202: PUSH
5203: LD_VAR 0 32
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 3
5215: ST_TO_ADDR
// end ; end ;
5216: GO 5010
5218: POP
5219: POP
// end ; end ; end ;
5220: LD_VAR 0 8
5224: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5225: LD_EXP 14
5229: PPUSH
5230: LD_INT 50
5232: PUSH
5233: EMPTY
5234: LIST
5235: PPUSH
5236: CALL_OW 72
5240: IFFALSE 5293
5242: GO 5244
5244: DISABLE
// begin enable ;
5245: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5246: LD_EXP 3
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_EXP 14
5268: PPUSH
5269: LD_INT 109
5271: PUSH
5272: LD_INT 43
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: LD_INT 112
5281: PUSH
5282: LD_INT 52
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PPUSH
5289: CALL 1265 0 7
// end ;
5293: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
5294: LD_EXP 13
5298: IFFALSE 5526
5300: GO 5302
5302: DISABLE
5303: LD_INT 0
5305: PPUSH
5306: PPUSH
5307: PPUSH
// begin enable ;
5308: ENABLE
// p := 1 ;
5309: LD_ADDR_VAR 0 2
5313: PUSH
5314: LD_INT 1
5316: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_EXP 13
5331: PPUSH
5332: CALL 17689 0 1
5336: PUSH
5337: LD_INT 2
5339: DIV
5340: PUSH
5341: FOR_TO
5342: IFFALSE 5524
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_EXP 13
5353: PUSH
5354: LD_VAR 0 2
5358: ARRAY
5359: PPUSH
5360: LD_EXP 13
5364: PUSH
5365: LD_VAR 0 2
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: ARRAY
5374: PPUSH
5375: CALL_OW 428
5379: ST_TO_ADDR
// if tmp then
5380: LD_VAR 0 3
5384: IFFALSE 5508
// begin if not GetSide ( tmp ) in [ 0 , botSides [ 1 ] ] then
5386: LD_VAR 0 3
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_INT 0
5398: PUSH
5399: LD_EXP 3
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: IN
5412: NOT
5413: IFFALSE 5508
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5415: LD_EXP 13
5419: PUSH
5420: LD_VAR 0 2
5424: ARRAY
5425: PPUSH
5426: LD_EXP 13
5430: PUSH
5431: LD_VAR 0 2
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: ARRAY
5440: PPUSH
5441: LD_EXP 3
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5454: LD_ADDR_EXP 13
5458: PUSH
5459: LD_EXP 13
5463: PPUSH
5464: LD_VAR 0 2
5468: PPUSH
5469: CALL_OW 3
5473: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5474: LD_ADDR_EXP 13
5478: PUSH
5479: LD_EXP 13
5483: PPUSH
5484: LD_VAR 0 2
5488: PPUSH
5489: CALL_OW 3
5493: ST_TO_ADDR
// p := p - 2 ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: LD_VAR 0 2
5503: PUSH
5504: LD_INT 2
5506: MINUS
5507: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_VAR 0 2
5517: PUSH
5518: LD_INT 2
5520: PLUS
5521: ST_TO_ADDR
// end ;
5522: GO 5341
5524: POP
5525: POP
// end ;
5526: PPOPN 3
5528: END
// every 6 6$00 trigger IsOk ( arDep ) do var un ;
5529: LD_INT 2
5531: PPUSH
5532: CALL_OW 302
5536: IFFALSE 5857
5538: GO 5540
5540: DISABLE
5541: LD_INT 0
5543: PPUSH
// begin enable ;
5544: ENABLE
// if UnitsInside ( arFac ) < 3 then
5545: LD_INT 12
5547: PPUSH
5548: CALL_OW 313
5552: PUSH
5553: LD_INT 3
5555: LESS
5556: IFFALSE 5685
// begin arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
5558: LD_ADDR_EXP 11
5562: PUSH
5563: LD_EXP 11
5567: PPUSH
5568: CALL 54681 0 1
5572: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
5573: LD_ADDR_OWVAR 20
5577: PUSH
5578: LD_EXP 3
5582: PUSH
5583: LD_INT 1
5585: ARRAY
5586: ST_TO_ADDR
// uc_nation := nation_arabian ;
5587: LD_ADDR_OWVAR 21
5591: PUSH
5592: LD_INT 2
5594: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
5595: LD_INT 0
5597: PPUSH
5598: LD_INT 3
5600: PUSH
5601: LD_INT 6
5603: PUSH
5604: LD_INT 9
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: PUSH
5612: LD_OWVAR 67
5616: ARRAY
5617: PPUSH
5618: CALL_OW 383
// un := CreateHuman ;
5622: LD_ADDR_VAR 0 1
5626: PUSH
5627: CALL_OW 44
5631: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
5632: LD_VAR 0 1
5636: PPUSH
5637: LD_INT 143
5639: PPUSH
5640: LD_INT 29
5642: PPUSH
5643: LD_INT 0
5645: PPUSH
5646: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: LD_INT 115
5657: PPUSH
5658: LD_INT 52
5660: PPUSH
5661: CALL_OW 111
// arForce := Join ( arForce , un ) ;
5665: LD_ADDR_EXP 14
5669: PUSH
5670: LD_EXP 14
5674: PPUSH
5675: LD_VAR 0 1
5679: PPUSH
5680: CALL 53298 0 2
5684: ST_TO_ADDR
// end ; arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5685: LD_ADDR_EXP 6
5689: PUSH
5690: LD_EXP 6
5694: PUSH
5695: LD_INT 14
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: LD_INT 2
5703: PUSH
5704: LD_INT 27
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 14
5715: PUSH
5716: LD_INT 1
5718: PUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 28
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: PUSH
5731: LD_INT 14
5733: PUSH
5734: LD_INT 1
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: LD_INT 28
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: ADD
5754: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5755: LD_OWVAR 67
5759: PUSH
5760: LD_INT 1
5762: GREATER
5763: PUSH
5764: LD_INT 72
5766: PPUSH
5767: LD_EXP 3
5771: PUSH
5772: LD_INT 1
5774: ARRAY
5775: PPUSH
5776: CALL_OW 321
5780: PUSH
5781: LD_INT 2
5783: EQUAL
5784: AND
5785: IFFALSE 5857
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5787: LD_ADDR_EXP 6
5791: PUSH
5792: LD_EXP 6
5796: PUSH
5797: LD_INT 14
5799: PUSH
5800: LD_INT 3
5802: PUSH
5803: LD_INT 2
5805: PUSH
5806: LD_INT 29
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 14
5817: PUSH
5818: LD_INT 3
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: LD_INT 29
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 14
5835: PUSH
5836: LD_INT 3
5838: PUSH
5839: LD_INT 2
5841: PUSH
5842: LD_INT 29
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: ADD
5856: ST_TO_ADDR
// end ; end_of_file
5857: PPOPN 1
5859: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5860: LD_INT 0
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// multi_settings_counter := 6 ;
5867: LD_ADDR_EXP 29
5871: PUSH
5872: LD_INT 6
5874: ST_TO_ADDR
// multi_settings := [ ] ;
5875: LD_ADDR_EXP 28
5879: PUSH
5880: EMPTY
5881: ST_TO_ADDR
// if Multiplayer then
5882: LD_OWVAR 4
5886: IFFALSE 6066
// begin your_side := mp_player_side ;
5888: LD_ADDR_OWVAR 2
5892: PUSH
5893: LD_OWVAR 7
5897: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5898: LD_ADDR_EXP 17
5902: PUSH
5903: LD_OWVAR 6
5907: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5908: LD_ADDR_EXP 18
5912: PUSH
5913: LD_OWVAR 17
5917: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5918: LD_ADDR_EXP 19
5922: PUSH
5923: LD_OWVAR 15
5927: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5928: LD_ADDR_EXP 20
5932: PUSH
5933: LD_OWVAR 16
5937: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5938: LD_ADDR_EXP 21
5942: PUSH
5943: EMPTY
5944: PUSH
5945: EMPTY
5946: LIST
5947: ST_TO_ADDR
// for i in mp_teams do
5948: LD_ADDR_VAR 0 2
5952: PUSH
5953: LD_OWVAR 12
5957: PUSH
5958: FOR_IN
5959: IFFALSE 6002
// if i then
5961: LD_VAR 0 2
5965: IFFALSE 6000
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5967: LD_ADDR_EXP 21
5971: PUSH
5972: LD_EXP 21
5976: PPUSH
5977: LD_INT 1
5979: PPUSH
5980: LD_EXP 21
5984: PUSH
5985: LD_INT 1
5987: ARRAY
5988: PUSH
5989: LD_VAR 0 2
5993: UNION
5994: PPUSH
5995: CALL_OW 1
5999: ST_TO_ADDR
6000: GO 5958
6002: POP
6003: POP
// for i := 1 to multi_settings_counter do
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: DOUBLE
6010: LD_INT 1
6012: DEC
6013: ST_TO_ADDR
6014: LD_EXP 29
6018: PUSH
6019: FOR_TO
6020: IFFALSE 6062
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
6022: LD_ADDR_EXP 28
6026: PUSH
6027: LD_EXP 28
6031: PPUSH
6032: LD_EXP 28
6036: PUSH
6037: LD_INT 1
6039: PLUS
6040: PPUSH
6041: LD_VAR 0 2
6045: PPUSH
6046: CALL_OW 426
6050: PUSH
6051: LD_INT 1
6053: PLUS
6054: PPUSH
6055: CALL_OW 1
6059: ST_TO_ADDR
6060: GO 6019
6062: POP
6063: POP
// end else
6064: GO 6252
// begin your_side := 3 ;
6066: LD_ADDR_OWVAR 2
6070: PUSH
6071: LD_INT 3
6073: ST_TO_ADDR
// multi_gametype := 1 ;
6074: LD_ADDR_EXP 17
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
6082: LD_ADDR_EXP 18
6086: PUSH
6087: LD_INT 0
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: LD_INT 1
6095: PUSH
6096: LD_INT 2
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
6121: LD_ADDR_EXP 19
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: LD_INT 0
6131: PUSH
6132: LD_INT 1
6134: PUSH
6135: LD_INT 1
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: LD_INT 0
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
6160: LD_ADDR_EXP 20
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 0
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: LD_INT 3
6179: PUSH
6180: LD_INT 0
6182: PUSH
6183: LD_INT 0
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6199: LD_ADDR_EXP 21
6203: PUSH
6204: LD_INT 3
6206: PUSH
6207: LD_INT 4
6209: PUSH
6210: LD_INT 5
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6221: LD_ADDR_EXP 28
6225: PUSH
6226: LD_INT 2
6228: PUSH
6229: LD_INT 4
6231: PUSH
6232: LD_INT 4
6234: PUSH
6235: LD_INT 3
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6252: LD_ADDR_EXP 22
6256: PUSH
6257: LD_INT 0
6259: PUSH
6260: LD_INT 0
6262: PUSH
6263: LD_INT 0
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 0
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6291: LD_ADDR_EXP 25
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: LD_INT 0
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6330: LD_ADDR_EXP 36
6334: PUSH
6335: LD_INT 0
6337: PUSH
6338: LD_INT 0
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: LD_INT 0
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: ST_TO_ADDR
// multi_teamgame := true ;
6369: LD_ADDR_EXP 26
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6377: LD_ADDR_EXP 24
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: ST_TO_ADDR
// multi_custom_commanders := true ;
6388: LD_ADDR_EXP 27
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// multi_commanders := [ ] ;
6396: LD_ADDR_EXP 35
6400: PUSH
6401: EMPTY
6402: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6403: LD_ADDR_EXP 38
6407: PUSH
6408: EMPTY
6409: ST_TO_ADDR
// multi_players_amount := 0 ;
6410: LD_ADDR_EXP 37
6414: PUSH
6415: LD_INT 0
6417: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6418: LD_ADDR_EXP 23
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 6
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 7
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 9
6445: PUSH
6446: LD_INT 10
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: LIST
6457: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6458: LD_ADDR_EXP 40
6462: PUSH
6463: EMPTY
6464: PUSH
6465: EMPTY
6466: PUSH
6467: EMPTY
6468: PUSH
6469: EMPTY
6470: PUSH
6471: EMPTY
6472: PUSH
6473: EMPTY
6474: PUSH
6475: EMPTY
6476: PUSH
6477: EMPTY
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: ST_TO_ADDR
// for i := 1 to 8 do
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: DOUBLE
6495: LD_INT 1
6497: DEC
6498: ST_TO_ADDR
6499: LD_INT 8
6501: PUSH
6502: FOR_TO
6503: IFFALSE 6832
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6505: LD_VAR 0 2
6509: PPUSH
6510: CALL_OW 530
6514: IFFALSE 6672
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6516: LD_ADDR_EXP 22
6520: PUSH
6521: LD_EXP 22
6525: PPUSH
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 1
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6539: LD_ADDR_EXP 20
6543: PUSH
6544: LD_EXP 20
6548: PPUSH
6549: LD_VAR 0 2
6553: PPUSH
6554: LD_INT 0
6556: PPUSH
6557: CALL_OW 1
6561: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6562: LD_ADDR_EXP 18
6566: PUSH
6567: LD_EXP 18
6571: PPUSH
6572: LD_VAR 0 2
6576: PPUSH
6577: LD_INT 0
6579: PPUSH
6580: CALL_OW 1
6584: ST_TO_ADDR
// for j = 1 to multi_teams do
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: DOUBLE
6591: LD_INT 1
6593: DEC
6594: ST_TO_ADDR
6595: LD_EXP 21
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6670
// begin if i in multi_teams [ j ] then
6603: LD_VAR 0 2
6607: PUSH
6608: LD_EXP 21
6612: PUSH
6613: LD_VAR 0 3
6617: ARRAY
6618: IN
6619: IFFALSE 6668
// begin tmp := multi_teams [ j ] diff i ;
6621: LD_ADDR_VAR 0 5
6625: PUSH
6626: LD_EXP 21
6630: PUSH
6631: LD_VAR 0 3
6635: ARRAY
6636: PUSH
6637: LD_VAR 0 2
6641: DIFF
6642: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6643: LD_ADDR_EXP 21
6647: PUSH
6648: LD_EXP 21
6652: PPUSH
6653: LD_VAR 0 3
6657: PPUSH
6658: LD_VAR 0 5
6662: PPUSH
6663: CALL_OW 1
6667: ST_TO_ADDR
// end ; end ;
6668: GO 6600
6670: POP
6671: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6672: LD_EXP 20
6676: PUSH
6677: LD_VAR 0 2
6681: ARRAY
6682: PUSH
6683: LD_EXP 20
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PUSH
6694: LD_EXP 24
6698: IN
6699: NOT
6700: AND
6701: IFFALSE 6742
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6703: LD_ADDR_EXP 20
6707: PUSH
6708: LD_EXP 20
6712: PPUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: LD_EXP 24
6722: PUSH
6723: LD_INT 1
6725: PPUSH
6726: LD_EXP 24
6730: PPUSH
6731: CALL_OW 12
6735: ARRAY
6736: PPUSH
6737: CALL_OW 1
6741: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6742: LD_EXP 20
6746: PUSH
6747: LD_VAR 0 2
6751: ARRAY
6752: NOT
6753: PUSH
6754: LD_EXP 18
6758: PUSH
6759: LD_VAR 0 2
6763: ARRAY
6764: NOT
6765: AND
6766: PUSH
6767: LD_EXP 22
6771: PUSH
6772: LD_VAR 0 2
6776: ARRAY
6777: NOT
6778: AND
6779: IFFALSE 6804
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6781: LD_ADDR_EXP 25
6785: PUSH
6786: LD_EXP 25
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 1
6803: ST_TO_ADDR
// if multi_sides [ i ] then
6804: LD_EXP 18
6808: PUSH
6809: LD_VAR 0 2
6813: ARRAY
6814: IFFALSE 6830
// multi_players_amount := multi_players_amount + 1 ;
6816: LD_ADDR_EXP 37
6820: PUSH
6821: LD_EXP 37
6825: PUSH
6826: LD_INT 1
6828: PLUS
6829: ST_TO_ADDR
// end ;
6830: GO 6502
6832: POP
6833: POP
// for i in multi_teams do
6834: LD_ADDR_VAR 0 2
6838: PUSH
6839: LD_EXP 21
6843: PUSH
6844: FOR_IN
6845: IFFALSE 6953
// begin for j = 2 to i do
6847: LD_ADDR_VAR 0 3
6851: PUSH
6852: DOUBLE
6853: LD_INT 2
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 2
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6949
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6865: LD_VAR 0 2
6869: PUSH
6870: LD_VAR 0 3
6874: ARRAY
6875: PPUSH
6876: LD_VAR 0 2
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: CALL_OW 343
// for x = 1 to j - 1 do
6889: LD_ADDR_VAR 0 4
6893: PUSH
6894: DOUBLE
6895: LD_INT 1
6897: DEC
6898: ST_TO_ADDR
6899: LD_VAR 0 3
6903: PUSH
6904: LD_INT 1
6906: MINUS
6907: PUSH
6908: FOR_TO
6909: IFFALSE 6945
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6911: LD_VAR 0 2
6915: PUSH
6916: LD_VAR 0 3
6920: ARRAY
6921: PPUSH
6922: LD_VAR 0 2
6926: PUSH
6927: LD_VAR 0 4
6931: ARRAY
6932: PPUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_INT 1
6938: PPUSH
6939: CALL_OW 80
6943: GO 6908
6945: POP
6946: POP
// end ;
6947: GO 6862
6949: POP
6950: POP
// end ;
6951: GO 6844
6953: POP
6954: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6955: LD_ADDR_OWVAR 67
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: LD_INT 3
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: LIST
6973: PUSH
6974: LD_EXP 28
6978: PUSH
6979: LD_INT 1
6981: ARRAY
6982: ARRAY
6983: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
6984: LD_ADDR_EXP 30
6988: PUSH
6989: LD_INT 9
6991: PUSH
6992: LD_INT 12
6994: PUSH
6995: LD_INT 15
6997: PUSH
6998: LD_INT 18
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: LD_EXP 28
7011: PUSH
7012: LD_INT 2
7014: ARRAY
7015: ARRAY
7016: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
7017: LD_ADDR_EXP 31
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: LD_INT 2
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 5
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: PUSH
7040: LD_EXP 28
7044: PUSH
7045: LD_INT 3
7047: ARRAY
7048: ARRAY
7049: ST_TO_ADDR
// multi_crates_spawn := [ [ 5000 , 0 0$32 ] , [ 8000 , 0 0$22 ] , [ 11000 , 0 0$14 ] , [ 14000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
7050: LD_ADDR_EXP 32
7054: PUSH
7055: LD_INT 5000
7057: PUSH
7058: LD_INT 1120
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 8000
7067: PUSH
7068: LD_INT 770
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 11000
7077: PUSH
7078: LD_INT 490
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 14000
7087: PUSH
7088: LD_INT 420
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: LD_EXP 28
7105: PUSH
7106: LD_INT 4
7108: ARRAY
7109: ARRAY
7110: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
7111: LD_ADDR_EXP 33
7115: PUSH
7116: LD_INT 0
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: LD_INT 2
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_EXP 28
7138: PUSH
7139: LD_INT 5
7141: ARRAY
7142: ARRAY
7143: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
7144: LD_ADDR_EXP 34
7148: PUSH
7149: LD_INT 0
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: LD_INT 2
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: PUSH
7163: LD_EXP 28
7167: PUSH
7168: LD_INT 6
7170: ARRAY
7171: ARRAY
7172: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7173: LD_ADDR_EXP 39
7177: PUSH
7178: LD_INT 10500
7180: PUSH
7181: LD_INT 31500
7183: PUSH
7184: LD_INT 52500
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: LD_OWVAR 67
7196: ARRAY
7197: ST_TO_ADDR
// end ;
7198: LD_VAR 0 1
7202: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7203: LD_INT 0
7205: PPUSH
7206: PPUSH
// if not multi_sides [ preferSide ] then
7207: LD_EXP 18
7211: PUSH
7212: LD_VAR 0 1
7216: ARRAY
7217: NOT
7218: IFFALSE 7232
// begin result := preferSide ;
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: LD_VAR 0 1
7229: ST_TO_ADDR
// exit ;
7230: GO 7279
// end ; for i := 1 to 8 do
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: DOUBLE
7238: LD_INT 1
7240: DEC
7241: ST_TO_ADDR
7242: LD_INT 8
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7277
// if not multi_sides [ i ] then
7248: LD_EXP 18
7252: PUSH
7253: LD_VAR 0 3
7257: ARRAY
7258: NOT
7259: IFFALSE 7275
// begin result := i ;
7261: LD_ADDR_VAR 0 2
7265: PUSH
7266: LD_VAR 0 3
7270: ST_TO_ADDR
// exit ;
7271: POP
7272: POP
7273: GO 7279
// end ;
7275: GO 7245
7277: POP
7278: POP
// end ;
7279: LD_VAR 0 2
7283: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7284: LD_INT 0
7286: PPUSH
// uc_side := side ;
7287: LD_ADDR_OWVAR 20
7291: PUSH
7292: LD_VAR 0 1
7296: ST_TO_ADDR
// uc_nation := nation_russian ;
7297: LD_ADDR_OWVAR 21
7301: PUSH
7302: LD_INT 3
7304: ST_TO_ADDR
// hc_importance := 100 ;
7305: LD_ADDR_OWVAR 32
7309: PUSH
7310: LD_INT 100
7312: ST_TO_ADDR
// if num = 1 then
7313: LD_VAR 0 2
7317: PUSH
7318: LD_INT 1
7320: EQUAL
7321: IFFALSE 7388
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7323: LD_INT 1
7325: PPUSH
7326: LD_EXP 31
7330: PUSH
7331: LD_INT 1
7333: PLUS
7334: PPUSH
7335: CALL_OW 381
// hc_gallery := ru ;
7339: LD_ADDR_OWVAR 33
7343: PUSH
7344: LD_STRING ru
7346: ST_TO_ADDR
// hc_face_number := 25 ;
7347: LD_ADDR_OWVAR 34
7351: PUSH
7352: LD_INT 25
7354: ST_TO_ADDR
// hc_name := Xavier ;
7355: LD_ADDR_OWVAR 26
7359: PUSH
7360: LD_STRING Xavier
7362: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7363: LD_ADDR_OWVAR 29
7367: PUSH
7368: LD_INT 12
7370: PUSH
7371: LD_INT 10
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: ST_TO_ADDR
// result := CreateHuman ;
7378: LD_ADDR_VAR 0 3
7382: PUSH
7383: CALL_OW 44
7387: ST_TO_ADDR
// end ; if num = 2 then
7388: LD_VAR 0 2
7392: PUSH
7393: LD_INT 2
7395: EQUAL
7396: IFFALSE 7463
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_EXP 31
7405: PUSH
7406: LD_INT 2
7408: PLUS
7409: PPUSH
7410: CALL_OW 383
// hc_gallery := ru ;
7414: LD_ADDR_OWVAR 33
7418: PUSH
7419: LD_STRING ru
7421: ST_TO_ADDR
// hc_face_number := 1 ;
7422: LD_ADDR_OWVAR 34
7426: PUSH
7427: LD_INT 1
7429: ST_TO_ADDR
// hc_name := Burlak ;
7430: LD_ADDR_OWVAR 26
7434: PUSH
7435: LD_STRING Burlak
7437: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7438: LD_ADDR_OWVAR 29
7442: PUSH
7443: LD_INT 10
7445: PUSH
7446: LD_INT 11
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: ST_TO_ADDR
// result := CreateHuman ;
7453: LD_ADDR_VAR 0 3
7457: PUSH
7458: CALL_OW 44
7462: ST_TO_ADDR
// end ; if num = 3 then
7463: LD_VAR 0 2
7467: PUSH
7468: LD_INT 3
7470: EQUAL
7471: IFFALSE 7538
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7473: LD_INT 1
7475: PPUSH
7476: LD_EXP 31
7480: PUSH
7481: LD_INT 1
7483: PLUS
7484: PPUSH
7485: CALL_OW 381
// hc_gallery := ru ;
7489: LD_ADDR_OWVAR 33
7493: PUSH
7494: LD_STRING ru
7496: ST_TO_ADDR
// hc_face_number := 18 ;
7497: LD_ADDR_OWVAR 34
7501: PUSH
7502: LD_INT 18
7504: ST_TO_ADDR
// hc_name := Vsevolod ;
7505: LD_ADDR_OWVAR 26
7509: PUSH
7510: LD_STRING Vsevolod
7512: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7513: LD_ADDR_OWVAR 29
7517: PUSH
7518: LD_INT 12
7520: PUSH
7521: LD_INT 11
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: ST_TO_ADDR
// result := CreateHuman ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: CALL_OW 44
7537: ST_TO_ADDR
// end ; end ;
7538: LD_VAR 0 3
7542: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7543: LD_INT 0
7545: PPUSH
7546: PPUSH
7547: PPUSH
// if not multi_apeman then
7548: LD_EXP 33
7552: NOT
7553: IFFALSE 7557
// exit ;
7555: GO 7635
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7557: LD_ADDR_VAR 0 3
7561: PUSH
7562: LD_INT 6
7564: PUSH
7565: LD_INT 9
7567: PUSH
7568: LD_INT 12
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: PUSH
7576: LD_EXP 33
7580: ARRAY
7581: ST_TO_ADDR
// for i := 1 to tmp do
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: DOUBLE
7588: LD_INT 1
7590: DEC
7591: ST_TO_ADDR
7592: LD_VAR 0 3
7596: PUSH
7597: FOR_TO
7598: IFFALSE 7633
// begin uc_side := 0 ;
7600: LD_ADDR_OWVAR 20
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7608: LD_INT 5
7610: NEG
7611: PPUSH
7612: CALL 49546 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7616: CALL_OW 44
7620: PPUSH
7621: LD_INT 21
7623: PPUSH
7624: LD_INT 0
7626: PPUSH
7627: CALL_OW 49
// end ;
7631: GO 7597
7633: POP
7634: POP
// end ;
7635: LD_VAR 0 1
7639: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7640: LD_INT 0
7642: PPUSH
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
7647: PPUSH
7648: PPUSH
7649: PPUSH
7650: PPUSH
7651: PPUSH
// for i := 1 to 8 do
7652: LD_ADDR_VAR 0 2
7656: PUSH
7657: DOUBLE
7658: LD_INT 1
7660: DEC
7661: ST_TO_ADDR
7662: LD_INT 8
7664: PUSH
7665: FOR_TO
7666: IFFALSE 8846
// begin if not multi_sides [ i ] then
7668: LD_EXP 18
7672: PUSH
7673: LD_VAR 0 2
7677: ARRAY
7678: NOT
7679: IFFALSE 7683
// continue ;
7681: GO 7665
// if multi_buildings [ multi_sides [ i ] ] then
7683: LD_EXP 40
7687: PUSH
7688: LD_EXP 18
7692: PUSH
7693: LD_VAR 0 2
7697: ARRAY
7698: ARRAY
7699: IFFALSE 7933
// begin uc_side := i ;
7701: LD_ADDR_OWVAR 20
7705: PUSH
7706: LD_VAR 0 2
7710: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7711: LD_ADDR_OWVAR 21
7715: PUSH
7716: LD_EXP 20
7720: PUSH
7721: LD_VAR 0 2
7725: ARRAY
7726: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_EXP 40
7736: PUSH
7737: LD_EXP 18
7741: PUSH
7742: LD_VAR 0 2
7746: ARRAY
7747: ARRAY
7748: PUSH
7749: FOR_IN
7750: IFFALSE 7931
// begin bc_type := j [ 1 ] ;
7752: LD_ADDR_OWVAR 42
7756: PUSH
7757: LD_VAR 0 3
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: ST_TO_ADDR
// bc_level := 2 ;
7766: LD_ADDR_OWVAR 43
7770: PUSH
7771: LD_INT 2
7773: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7774: LD_ADDR_VAR 0 4
7778: PUSH
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 2
7786: ARRAY
7787: PUSH
7788: LD_INT 1
7790: ARRAY
7791: PPUSH
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 2
7799: ARRAY
7800: PUSH
7801: LD_INT 2
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 3
7809: PUSH
7810: LD_INT 2
7812: ARRAY
7813: PUSH
7814: LD_INT 3
7816: ARRAY
7817: PPUSH
7818: CALL_OW 47
7822: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7823: LD_VAR 0 3
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: IFFALSE 7929
// begin SetBName ( b , j [ 3 ] ) ;
7837: LD_VAR 0 4
7841: PPUSH
7842: LD_VAR 0 3
7846: PUSH
7847: LD_INT 3
7849: ARRAY
7850: PPUSH
7851: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7855: LD_VAR 0 4
7859: PPUSH
7860: CALL_OW 274
7864: PPUSH
7865: LD_INT 1
7867: PPUSH
7868: LD_INT 120
7870: PUSH
7871: LD_INT 100
7873: PUSH
7874: LD_INT 80
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: LD_OWVAR 67
7886: ARRAY
7887: PPUSH
7888: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7892: LD_VAR 0 4
7896: PPUSH
7897: CALL_OW 274
7901: PPUSH
7902: LD_INT 2
7904: PPUSH
7905: LD_INT 90
7907: PUSH
7908: LD_INT 60
7910: PUSH
7911: LD_INT 30
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: LIST
7918: PUSH
7919: LD_OWVAR 67
7923: ARRAY
7924: PPUSH
7925: CALL_OW 277
// end ; end ;
7929: GO 7749
7931: POP
7932: POP
// end ; if multi_custom_commanders then
7933: LD_EXP 27
7937: IFFALSE 8146
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7939: LD_ADDR_VAR 0 6
7943: PUSH
7944: LD_VAR 0 2
7948: PPUSH
7949: LD_EXP 18
7953: PUSH
7954: LD_VAR 0 2
7958: ARRAY
7959: PPUSH
7960: CALL 7284 0 2
7964: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7965: LD_ADDR_EXP 35
7969: PUSH
7970: LD_EXP 35
7974: PPUSH
7975: LD_EXP 35
7979: PUSH
7980: LD_INT 1
7982: PLUS
7983: PPUSH
7984: LD_VAR 0 6
7988: PPUSH
7989: CALL_OW 2
7993: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
7994: LD_VAR 0 6
7998: PPUSH
7999: CALL_OW 257
8003: PUSH
8004: LD_INT 3
8006: EQUAL
8007: IFFALSE 8111
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
8009: LD_INT 23
8011: PPUSH
8012: LD_INT 1
8014: PPUSH
8015: LD_INT 1
8017: PPUSH
8018: LD_INT 46
8020: PPUSH
8021: LD_INT 80
8023: PPUSH
8024: CALL 20427 0 5
// veh := CreateVehicle ;
8028: LD_ADDR_VAR 0 7
8032: PUSH
8033: CALL_OW 45
8037: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
8038: LD_VAR 0 7
8042: PPUSH
8043: LD_VAR 0 6
8047: PPUSH
8048: CALL_OW 255
8052: PUSH
8053: LD_INT 1
8055: NEG
8056: MUL
8057: PPUSH
8058: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8062: LD_VAR 0 7
8066: PPUSH
8067: LD_EXP 23
8071: PUSH
8072: LD_EXP 18
8076: PUSH
8077: LD_VAR 0 2
8081: ARRAY
8082: ARRAY
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PPUSH
8088: LD_INT 0
8090: PPUSH
8091: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8095: LD_VAR 0 6
8099: PPUSH
8100: LD_VAR 0 7
8104: PPUSH
8105: CALL_OW 52
// end else
8109: GO 8144
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8111: LD_VAR 0 6
8115: PPUSH
8116: LD_EXP 23
8120: PUSH
8121: LD_EXP 18
8125: PUSH
8126: LD_VAR 0 2
8130: ARRAY
8131: ARRAY
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: PPUSH
8137: LD_INT 0
8139: PPUSH
8140: CALL_OW 49
// end else
8144: GO 8357
// begin uc_side := i ;
8146: LD_ADDR_OWVAR 20
8150: PUSH
8151: LD_VAR 0 2
8155: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8156: LD_ADDR_OWVAR 21
8160: PUSH
8161: LD_EXP 20
8165: PUSH
8166: LD_VAR 0 2
8170: ARRAY
8171: ST_TO_ADDR
// hc_importance := 100 ;
8172: LD_ADDR_OWVAR 32
8176: PUSH
8177: LD_INT 100
8179: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8180: LD_INT 0
8182: PPUSH
8183: LD_INT 1
8185: PPUSH
8186: LD_EXP 31
8190: PPUSH
8191: CALL_OW 380
// if multiplayer then
8195: LD_OWVAR 4
8199: IFFALSE 8257
// begin hc_name := mp_sides_players_names [ i ] ;
8201: LD_ADDR_OWVAR 26
8205: PUSH
8206: LD_OWVAR 19
8210: PUSH
8211: LD_VAR 0 2
8215: ARRAY
8216: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8217: LD_ADDR_OWVAR 33
8221: PUSH
8222: LD_STRING MULTIAVATARS
8224: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8225: LD_ADDR_OWVAR 34
8229: PUSH
8230: LD_VAR 0 2
8234: PPUSH
8235: CALL_OW 525
8239: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8240: LD_ADDR_OWVAR 27
8244: PUSH
8245: LD_VAR 0 2
8249: PPUSH
8250: CALL_OW 526
8254: ST_TO_ADDR
// end else
8255: GO 8289
// begin hc_gallery :=  ;
8257: LD_ADDR_OWVAR 33
8261: PUSH
8262: LD_STRING 
8264: ST_TO_ADDR
// hc_name :=  ;
8265: LD_ADDR_OWVAR 26
8269: PUSH
8270: LD_STRING 
8272: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8273: LD_ADDR_OWVAR 27
8277: PUSH
8278: LD_INT 1
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: CALL_OW 12
8288: ST_TO_ADDR
// end ; un := CreateHuman ;
8289: LD_ADDR_VAR 0 6
8293: PUSH
8294: CALL_OW 44
8298: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8299: LD_VAR 0 6
8303: PPUSH
8304: LD_EXP 23
8308: PUSH
8309: LD_EXP 18
8313: PUSH
8314: LD_VAR 0 2
8318: ARRAY
8319: ARRAY
8320: PUSH
8321: LD_INT 1
8323: ARRAY
8324: PPUSH
8325: LD_INT 0
8327: PPUSH
8328: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8332: LD_ADDR_EXP 35
8336: PUSH
8337: LD_EXP 35
8341: PPUSH
8342: LD_VAR 0 2
8346: PPUSH
8347: LD_VAR 0 6
8351: PPUSH
8352: CALL_OW 1
8356: ST_TO_ADDR
// end ; InitHc ;
8357: CALL_OW 19
// InitUc ;
8361: CALL_OW 18
// uc_side := i ;
8365: LD_ADDR_OWVAR 20
8369: PUSH
8370: LD_VAR 0 2
8374: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8375: LD_ADDR_OWVAR 21
8379: PUSH
8380: LD_EXP 20
8384: PUSH
8385: LD_VAR 0 2
8389: ARRAY
8390: ST_TO_ADDR
// hc_gallery :=  ;
8391: LD_ADDR_OWVAR 33
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// hc_name :=  ;
8399: LD_ADDR_OWVAR 26
8403: PUSH
8404: LD_STRING 
8406: ST_TO_ADDR
// hc_importance := 0 ;
8407: LD_ADDR_OWVAR 32
8411: PUSH
8412: LD_INT 0
8414: ST_TO_ADDR
// cl := 1 ;
8415: LD_ADDR_VAR 0 5
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8423: LD_ADDR_VAR 0 3
8427: PUSH
8428: DOUBLE
8429: LD_INT 2
8431: DEC
8432: ST_TO_ADDR
8433: LD_EXP 30
8437: PUSH
8438: FOR_TO
8439: IFFALSE 8842
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8441: LD_VAR 0 3
8445: PUSH
8446: LD_INT 1
8448: MINUS
8449: PUSH
8450: LD_EXP 30
8454: PUSH
8455: LD_INT 1
8457: MINUS
8458: PUSH
8459: LD_INT 4
8461: DIVREAL
8462: MOD
8463: PUSH
8464: LD_INT 0
8466: EQUAL
8467: IFFALSE 8483
// cl := cl + 1 ;
8469: LD_ADDR_VAR 0 5
8473: PUSH
8474: LD_VAR 0 5
8478: PUSH
8479: LD_INT 1
8481: PLUS
8482: ST_TO_ADDR
// if cl > 4 then
8483: LD_VAR 0 5
8487: PUSH
8488: LD_INT 4
8490: GREATER
8491: IFFALSE 8501
// cl := 1 ;
8493: LD_ADDR_VAR 0 5
8497: PUSH
8498: LD_INT 1
8500: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8501: LD_INT 0
8503: PPUSH
8504: LD_VAR 0 5
8508: PPUSH
8509: LD_EXP 31
8513: PPUSH
8514: CALL_OW 380
// un := CreateHuman ;
8518: LD_ADDR_VAR 0 6
8522: PUSH
8523: CALL_OW 44
8527: ST_TO_ADDR
// if j > copy then
8528: LD_VAR 0 3
8532: PUSH
8533: LD_VAR 0 9
8537: GREATER
8538: IFFALSE 8567
// copy := Replace ( copy , j , un ) else
8540: LD_ADDR_VAR 0 9
8544: PUSH
8545: LD_VAR 0 9
8549: PPUSH
8550: LD_VAR 0 3
8554: PPUSH
8555: LD_VAR 0 6
8559: PPUSH
8560: CALL_OW 1
8564: ST_TO_ADDR
8565: GO 8649
// begin CopySkills ( copy [ j ] , un ) ;
8567: LD_VAR 0 9
8571: PUSH
8572: LD_VAR 0 3
8576: ARRAY
8577: PPUSH
8578: LD_VAR 0 6
8582: PPUSH
8583: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8587: LD_VAR 0 6
8591: PPUSH
8592: LD_INT 2
8594: PPUSH
8595: LD_VAR 0 9
8599: PUSH
8600: LD_VAR 0 3
8604: ARRAY
8605: PPUSH
8606: LD_INT 2
8608: PPUSH
8609: CALL_OW 260
8613: PPUSH
8614: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8618: LD_VAR 0 6
8622: PPUSH
8623: LD_INT 1
8625: PPUSH
8626: LD_VAR 0 9
8630: PUSH
8631: LD_VAR 0 3
8635: ARRAY
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: CALL_OW 260
8644: PPUSH
8645: CALL_OW 239
// end ; if multi_pos_area then
8649: LD_EXP 23
8653: IFFALSE 8840
// begin if GetClass ( un ) = 3 then
8655: LD_VAR 0 6
8659: PPUSH
8660: CALL_OW 257
8664: PUSH
8665: LD_INT 3
8667: EQUAL
8668: IFFALSE 8807
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_INT 44
8681: PUSH
8682: LD_INT 44
8684: PUSH
8685: LD_INT 43
8687: PUSH
8688: LD_INT 51
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: PUSH
8697: LD_VAR 0 3
8701: PUSH
8702: LD_INT 4
8704: MOD
8705: PUSH
8706: LD_INT 1
8708: PLUS
8709: ARRAY
8710: PPUSH
8711: LD_INT 80
8713: PPUSH
8714: CALL 20427 0 5
// veh := CreateVehicle ;
8718: LD_ADDR_VAR 0 7
8722: PUSH
8723: CALL_OW 45
8727: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8728: LD_VAR 0 7
8732: PPUSH
8733: LD_EXP 23
8737: PUSH
8738: LD_EXP 18
8742: PUSH
8743: LD_VAR 0 2
8747: ARRAY
8748: ARRAY
8749: PUSH
8750: LD_INT 2
8752: ARRAY
8753: PPUSH
8754: LD_INT 0
8756: PPUSH
8757: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8761: LD_VAR 0 6
8765: PPUSH
8766: LD_VAR 0 7
8770: PPUSH
8771: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8775: LD_VAR 0 7
8779: PPUSH
8780: CALL_OW 264
8784: PUSH
8785: LD_INT 51
8787: EQUAL
8788: IFFALSE 8805
// SetCargo ( veh , mat_cans , 100 ) ;
8790: LD_VAR 0 7
8794: PPUSH
8795: LD_INT 1
8797: PPUSH
8798: LD_INT 100
8800: PPUSH
8801: CALL_OW 290
// continue ;
8805: GO 8438
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8807: LD_VAR 0 6
8811: PPUSH
8812: LD_EXP 23
8816: PUSH
8817: LD_EXP 18
8821: PUSH
8822: LD_VAR 0 2
8826: ARRAY
8827: ARRAY
8828: PUSH
8829: LD_INT 1
8831: ARRAY
8832: PPUSH
8833: LD_INT 0
8835: PPUSH
8836: CALL_OW 49
// end ; end ;
8840: GO 8438
8842: POP
8843: POP
// end ;
8844: GO 7665
8846: POP
8847: POP
// end ;
8848: LD_VAR 0 1
8852: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8853: LD_INT 0
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
// if not multi_support then
8860: LD_EXP 34
8864: NOT
8865: IFFALSE 8869
// exit ;
8867: GO 9156
// result := [ ] ;
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: EMPTY
8875: ST_TO_ADDR
// for i := 1 to 8 do
8876: LD_ADDR_VAR 0 2
8880: PUSH
8881: DOUBLE
8882: LD_INT 1
8884: DEC
8885: ST_TO_ADDR
8886: LD_INT 8
8888: PUSH
8889: FOR_TO
8890: IFFALSE 9154
// begin result := Replace ( result , i , [ ] ) ;
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_VAR 0 1
8901: PPUSH
8902: LD_VAR 0 2
8906: PPUSH
8907: EMPTY
8908: PPUSH
8909: CALL_OW 1
8913: ST_TO_ADDR
// if multi_sides [ i ] then
8914: LD_EXP 18
8918: PUSH
8919: LD_VAR 0 2
8923: ARRAY
8924: IFFALSE 9152
// begin tmp := [ ] ;
8926: LD_ADDR_VAR 0 5
8930: PUSH
8931: EMPTY
8932: ST_TO_ADDR
// if multi_support = 1 then
8933: LD_EXP 34
8937: PUSH
8938: LD_INT 1
8940: EQUAL
8941: IFFALSE 9030
// begin uc_side := i ;
8943: LD_ADDR_OWVAR 20
8947: PUSH
8948: LD_VAR 0 2
8952: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8953: LD_ADDR_OWVAR 21
8957: PUSH
8958: LD_EXP 20
8962: PUSH
8963: LD_VAR 0 2
8967: ARRAY
8968: ST_TO_ADDR
// for j := 1 to 2 do
8969: LD_ADDR_VAR 0 3
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_INT 2
8981: PUSH
8982: FOR_TO
8983: IFFALSE 9028
// begin InitHC_All ( ) ;
8985: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
8989: LD_INT 0
8991: PPUSH
8992: LD_INT 1
8994: PPUSH
8995: LD_INT 4
8997: PPUSH
8998: CALL_OW 12
9002: PPUSH
9003: LD_INT 1
9005: PPUSH
9006: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9010: LD_ADDR_VAR 0 5
9014: PUSH
9015: LD_VAR 0 5
9019: PUSH
9020: CALL_OW 44
9024: ADD
9025: ST_TO_ADDR
// end ;
9026: GO 8982
9028: POP
9029: POP
// end ; if multi_support = 2 then
9030: LD_EXP 34
9034: PUSH
9035: LD_INT 2
9037: EQUAL
9038: IFFALSE 9127
// begin uc_side := i ;
9040: LD_ADDR_OWVAR 20
9044: PUSH
9045: LD_VAR 0 2
9049: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9050: LD_ADDR_OWVAR 21
9054: PUSH
9055: LD_EXP 20
9059: PUSH
9060: LD_VAR 0 2
9064: ARRAY
9065: ST_TO_ADDR
// for j := 1 to 4 do
9066: LD_ADDR_VAR 0 3
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_INT 4
9078: PUSH
9079: FOR_TO
9080: IFFALSE 9125
// begin InitHC_All ( ) ;
9082: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
9086: LD_INT 0
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: LD_INT 4
9094: PPUSH
9095: CALL_OW 12
9099: PPUSH
9100: LD_INT 2
9102: PPUSH
9103: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9107: LD_ADDR_VAR 0 5
9111: PUSH
9112: LD_VAR 0 5
9116: PUSH
9117: CALL_OW 44
9121: ADD
9122: ST_TO_ADDR
// end ;
9123: GO 9079
9125: POP
9126: POP
// end ; result := Replace ( result , i , tmp ) ;
9127: LD_ADDR_VAR 0 1
9131: PUSH
9132: LD_VAR 0 1
9136: PPUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: LD_VAR 0 5
9146: PPUSH
9147: CALL_OW 1
9151: ST_TO_ADDR
// end ; end ;
9152: GO 8889
9154: POP
9155: POP
// end ;
9156: LD_VAR 0 1
9160: RET
// export function Multiplayer_Start ( ) ; begin
9161: LD_INT 0
9163: PPUSH
// Multiplayer_PrepareApemans ( ) ;
9164: CALL 7543 0 0
// Multiplayer_PreparePlayers ( ) ;
9168: CALL 7640 0 0
// Multiplayer_InitPointSystem ( ) ;
9172: CALL 9986 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9176: LD_INT 20
9178: PPUSH
9179: CALL 10162 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9183: LD_INT 150
9185: PPUSH
9186: CALL 10162 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9190: LD_INT 5
9192: PPUSH
9193: CALL 10162 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9197: LD_INT 40
9199: NEG
9200: PPUSH
9201: CALL 10162 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9205: LD_INT 200
9207: PPUSH
9208: CALL 10162 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9212: LD_INT 2
9214: PPUSH
9215: CALL 10162 0 1
// if multi_support then
9219: LD_EXP 34
9223: IFFALSE 9235
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9225: LD_ADDR_EXP 38
9229: PUSH
9230: CALL 8853 0 0
9234: ST_TO_ADDR
// if multi_sides [ your_side ] then
9235: LD_EXP 18
9239: PUSH
9240: LD_OWVAR 2
9244: ARRAY
9245: IFFALSE 9272
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9247: LD_INT 22
9249: PUSH
9250: LD_OWVAR 2
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PPUSH
9259: CALL_OW 69
9263: PUSH
9264: LD_INT 1
9266: ARRAY
9267: PPUSH
9268: CALL_OW 87
// end ;
9272: LD_VAR 0 1
9276: RET
// export function Multiplayer_End ( ) ; var i , j , s , tmp ; begin
9277: LD_INT 0
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
// tmp := [ ] ;
9284: LD_ADDR_VAR 0 5
9288: PUSH
9289: EMPTY
9290: ST_TO_ADDR
// for i := 1 to 8 do
9291: LD_ADDR_VAR 0 2
9295: PUSH
9296: DOUBLE
9297: LD_INT 1
9299: DEC
9300: ST_TO_ADDR
9301: LD_INT 8
9303: PUSH
9304: FOR_TO
9305: IFFALSE 9341
// if multi_sides [ i ] then
9307: LD_EXP 18
9311: PUSH
9312: LD_VAR 0 2
9316: ARRAY
9317: IFFALSE 9339
// tmp := Join ( tmp , i ) ;
9319: LD_ADDR_VAR 0 5
9323: PUSH
9324: LD_VAR 0 5
9328: PPUSH
9329: LD_VAR 0 2
9333: PPUSH
9334: CALL 53298 0 2
9338: ST_TO_ADDR
9339: GO 9304
9341: POP
9342: POP
// repeat wait ( 0 0$1 ) ;
9343: LD_INT 35
9345: PPUSH
9346: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9350: LD_OWVAR 1
9354: PUSH
9355: LD_EXP 39
9359: GREATER
9360: PUSH
9361: LD_EXP 34
9365: AND
9366: IFFALSE 9554
// begin if tick mod 2 2$00 = 0 then
9368: LD_OWVAR 1
9372: PUSH
9373: LD_INT 4200
9375: MOD
9376: PUSH
9377: LD_INT 0
9379: EQUAL
9380: IFFALSE 9554
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 5
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: LD_VAR 0 5
9399: PPUSH
9400: CALL 17689 0 1
9404: PPUSH
9405: LD_INT 1
9407: PPUSH
9408: CALL 19967 0 4
9412: ST_TO_ADDR
// for s := 1 to tmp do
9413: LD_ADDR_VAR 0 4
9417: PUSH
9418: DOUBLE
9419: LD_INT 1
9421: DEC
9422: ST_TO_ADDR
9423: LD_VAR 0 5
9427: PUSH
9428: FOR_TO
9429: IFFALSE 9552
// begin i := tmp [ s ] ;
9431: LD_ADDR_VAR 0 2
9435: PUSH
9436: LD_VAR 0 5
9440: PUSH
9441: LD_VAR 0 4
9445: ARRAY
9446: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
9447: LD_EXP 18
9451: PUSH
9452: LD_VAR 0 2
9456: ARRAY
9457: PUSH
9458: LD_EXP 36
9462: PUSH
9463: LD_VAR 0 2
9467: ARRAY
9468: NOT
9469: AND
9470: PUSH
9471: LD_EXP 38
9475: PUSH
9476: LD_VAR 0 2
9480: ARRAY
9481: AND
9482: IFFALSE 9550
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9484: LD_EXP 38
9488: PUSH
9489: LD_VAR 0 2
9493: ARRAY
9494: PUSH
9495: LD_INT 1
9497: ARRAY
9498: PPUSH
9499: LD_INT 11
9501: PPUSH
9502: LD_INT 1
9504: PPUSH
9505: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9509: LD_ADDR_EXP 38
9513: PUSH
9514: LD_EXP 38
9518: PPUSH
9519: LD_VAR 0 2
9523: PPUSH
9524: LD_EXP 38
9528: PUSH
9529: LD_VAR 0 2
9533: ARRAY
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 3
9542: PPUSH
9543: CALL_OW 1
9547: ST_TO_ADDR
// break ;
9548: GO 9552
// end ; end ;
9550: GO 9428
9552: POP
9553: POP
// end ; end ; if not multi_custom_commanders then
9554: LD_EXP 27
9558: NOT
9559: IFFALSE 9672
// begin for i := 1 to 8 do
9561: LD_ADDR_VAR 0 2
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_INT 8
9573: PUSH
9574: FOR_TO
9575: IFFALSE 9646
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9577: LD_INT 22
9579: PUSH
9580: LD_VAR 0 2
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: PUSH
9594: LD_INT 0
9596: EQUAL
9597: PUSH
9598: LD_EXP 36
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: NOT
9609: AND
9610: IFFALSE 9644
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9612: LD_ADDR_EXP 36
9616: PUSH
9617: LD_EXP 36
9621: PPUSH
9622: LD_VAR 0 2
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: CALL_OW 1
9634: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9635: LD_VAR 0 2
9639: PPUSH
9640: CALL 10232 0 1
// end ; end ;
9644: GO 9574
9646: POP
9647: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9648: LD_EXP 36
9652: PPUSH
9653: CALL 17689 0 1
9657: PUSH
9658: LD_EXP 18
9662: PPUSH
9663: CALL 17689 0 1
9667: EQUAL
9668: IFFALSE 9672
// break ;
9670: GO 9692
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9672: CALL 9806 0 0
9676: NOT
9677: PUSH
9678: LD_EXP 2
9682: AND
9683: PUSH
9684: LD_EXP 35
9688: NOT
9689: OR
9690: IFFALSE 9343
// game := false ;
9692: LD_ADDR_EXP 2
9696: PUSH
9697: LD_INT 0
9699: ST_TO_ADDR
// for i := 1 to 8 do
9700: LD_ADDR_VAR 0 2
9704: PUSH
9705: DOUBLE
9706: LD_INT 1
9708: DEC
9709: ST_TO_ADDR
9710: LD_INT 8
9712: PUSH
9713: FOR_TO
9714: IFFALSE 9750
// begin if multi_sides [ i ] then
9716: LD_EXP 18
9720: PUSH
9721: LD_VAR 0 2
9725: ARRAY
9726: IFFALSE 9748
// SetMultiScore ( i , multi_points [ i ] ) ;
9728: LD_VAR 0 2
9732: PPUSH
9733: LD_EXP 41
9737: PUSH
9738: LD_VAR 0 2
9742: ARRAY
9743: PPUSH
9744: CALL_OW 506
// end ;
9748: GO 9713
9750: POP
9751: POP
// if multi_loosers [ your_side ] then
9752: LD_EXP 36
9756: PUSH
9757: LD_OWVAR 2
9761: ARRAY
9762: IFFALSE 9785
// begin if Multiplayer then
9764: LD_OWVAR 4
9768: IFFALSE 9776
// YouLostInMultiplayer else
9770: CALL_OW 107
9774: GO 9783
// YouLost (  ) ;
9776: LD_STRING 
9778: PPUSH
9779: CALL_OW 104
// end else
9783: GO 9801
// begin if Multiplayer then
9785: LD_OWVAR 4
9789: IFFALSE 9797
// YouWinInMultiplayer else
9791: CALL_OW 106
9795: GO 9801
// YouWin ;
9797: CALL_OW 103
// end ; end ;
9801: LD_VAR 0 1
9805: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9806: LD_INT 0
9808: PPUSH
9809: PPUSH
// result := false ;
9810: LD_ADDR_VAR 0 1
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// for side in botSides do
9818: LD_ADDR_VAR 0 2
9822: PUSH
9823: LD_EXP 3
9827: PUSH
9828: FOR_IN
9829: IFFALSE 9890
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9831: LD_ADDR_VAR 0 1
9835: PUSH
9836: LD_INT 22
9838: PUSH
9839: LD_VAR 0 2
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 21
9850: PUSH
9851: LD_INT 1
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 50
9860: PUSH
9861: EMPTY
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 69
9873: PUSH
9874: LD_INT 0
9876: GREATER
9877: ST_TO_ADDR
// if result then
9878: LD_VAR 0 1
9882: IFFALSE 9888
// exit ;
9884: POP
9885: POP
9886: GO 9892
// end ;
9888: GO 9828
9890: POP
9891: POP
// end ;
9892: LD_VAR 0 1
9896: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9897: LD_INT 0
9899: PPUSH
9900: PPUSH
// result := [ ] ;
9901: LD_ADDR_VAR 0 1
9905: PUSH
9906: EMPTY
9907: ST_TO_ADDR
// for i := 1 to 8 do
9908: LD_ADDR_VAR 0 2
9912: PUSH
9913: DOUBLE
9914: LD_INT 1
9916: DEC
9917: ST_TO_ADDR
9918: LD_INT 8
9920: PUSH
9921: FOR_TO
9922: IFFALSE 9979
// begin if multi_sides [ i ] then
9924: LD_EXP 18
9928: PUSH
9929: LD_VAR 0 2
9933: ARRAY
9934: IFFALSE 9977
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9936: LD_ADDR_VAR 0 1
9940: PUSH
9941: LD_VAR 0 1
9945: PUSH
9946: LD_STRING #coop-points
9948: PUSH
9949: LD_VAR 0 2
9953: PUSH
9954: LD_VAR 0 2
9958: PUSH
9959: LD_EXP 41
9963: PUSH
9964: LD_VAR 0 2
9968: ARRAY
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: ADD
9976: ST_TO_ADDR
// end ; end ;
9977: GO 9921
9979: POP
9980: POP
// end ;
9981: LD_VAR 0 1
9985: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9990: LD_ADDR_EXP 41
9994: PUSH
9995: LD_INT 0
9997: PUSH
9998: LD_INT 0
10000: PUSH
10001: LD_INT 0
10003: PUSH
10004: LD_INT 0
10006: PUSH
10007: LD_INT 0
10009: PUSH
10010: LD_INT 0
10012: PUSH
10013: LD_INT 0
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: ST_TO_ADDR
// multi_points_conditions := [ ] ;
10029: LD_ADDR_EXP 42
10033: PUSH
10034: EMPTY
10035: ST_TO_ADDR
// end ;
10036: LD_VAR 0 1
10040: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
10041: LD_INT 0
10043: PPUSH
// if not multi_points or not side or side > 8 then
10044: LD_EXP 41
10048: NOT
10049: PUSH
10050: LD_VAR 0 1
10054: NOT
10055: OR
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: LD_INT 8
10064: GREATER
10065: OR
10066: IFFALSE 10070
// exit ;
10068: GO 10107
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
10070: LD_ADDR_EXP 41
10074: PUSH
10075: LD_EXP 41
10079: PPUSH
10080: LD_VAR 0 1
10084: PPUSH
10085: LD_EXP 41
10089: PUSH
10090: LD_VAR 0 1
10094: ARRAY
10095: PUSH
10096: LD_VAR 0 2
10100: PLUS
10101: PPUSH
10102: CALL_OW 1
10106: ST_TO_ADDR
// end ;
10107: LD_VAR 0 3
10111: RET
// export function Multiplayer_GetPoints ( side ) ; begin
10112: LD_INT 0
10114: PPUSH
// if not multi_points or not side or side > 8 then
10115: LD_EXP 41
10119: NOT
10120: PUSH
10121: LD_VAR 0 1
10125: NOT
10126: OR
10127: PUSH
10128: LD_VAR 0 1
10132: PUSH
10133: LD_INT 8
10135: GREATER
10136: OR
10137: IFFALSE 10141
// exit ;
10139: GO 10157
// result := multi_points [ side ] ;
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_EXP 41
10150: PUSH
10151: LD_VAR 0 1
10155: ARRAY
10156: ST_TO_ADDR
// end ;
10157: LD_VAR 0 2
10161: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
10162: LD_INT 0
10164: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
10165: LD_ADDR_EXP 42
10169: PUSH
10170: LD_EXP 42
10174: PPUSH
10175: LD_EXP 42
10179: PUSH
10180: LD_INT 1
10182: PLUS
10183: PPUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: CALL_OW 1
10193: ST_TO_ADDR
// end ;
10194: LD_VAR 0 2
10198: RET
// export function Multiplayer_GetCondition ( id ) ; begin
10199: LD_INT 0
10201: PPUSH
// if not id then
10202: LD_VAR 0 1
10206: NOT
10207: IFFALSE 10211
// exit ;
10209: GO 10227
// result := multi_points_conditions [ id ] ;
10211: LD_ADDR_VAR 0 2
10215: PUSH
10216: LD_EXP 42
10220: PUSH
10221: LD_VAR 0 1
10225: ARRAY
10226: ST_TO_ADDR
// end ;
10227: LD_VAR 0 2
10231: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
// players := [ ] ;
10239: LD_ADDR_VAR 0 3
10243: PUSH
10244: EMPTY
10245: ST_TO_ADDR
// for i = 1 to 8 do
10246: LD_ADDR_VAR 0 4
10250: PUSH
10251: DOUBLE
10252: LD_INT 1
10254: DEC
10255: ST_TO_ADDR
10256: LD_INT 8
10258: PUSH
10259: FOR_TO
10260: IFFALSE 10319
// begin if i = side then
10262: LD_VAR 0 4
10266: PUSH
10267: LD_VAR 0 1
10271: EQUAL
10272: IFFALSE 10276
// continue ;
10274: GO 10259
// if multi_sides [ i ] and not multi_loosers [ i ] then
10276: LD_EXP 18
10280: PUSH
10281: LD_VAR 0 4
10285: ARRAY
10286: PUSH
10287: LD_EXP 36
10291: PUSH
10292: LD_VAR 0 4
10296: ARRAY
10297: NOT
10298: AND
10299: IFFALSE 10317
// players := players ^ i ;
10301: LD_ADDR_VAR 0 3
10305: PUSH
10306: LD_VAR 0 3
10310: PUSH
10311: LD_VAR 0 4
10315: ADD
10316: ST_TO_ADDR
// end ;
10317: GO 10259
10319: POP
10320: POP
// if not players then
10321: LD_VAR 0 3
10325: NOT
10326: IFFALSE 10330
// exit ;
10328: GO 10597
// if players = 1 then
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 1
10337: EQUAL
10338: IFFALSE 10399
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10340: LD_ADDR_VAR 0 4
10344: PUSH
10345: LD_INT 22
10347: PUSH
10348: LD_VAR 0 1
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 51
10359: PUSH
10360: EMPTY
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: PUSH
10372: FOR_IN
10373: IFFALSE 10395
// SetSide ( i , players [ 1 ] ) ;
10375: LD_VAR 0 4
10379: PPUSH
10380: LD_VAR 0 3
10384: PUSH
10385: LD_INT 1
10387: ARRAY
10388: PPUSH
10389: CALL_OW 235
10393: GO 10372
10395: POP
10396: POP
// end else
10397: GO 10597
// begin j := 1 ;
10399: LD_ADDR_VAR 0 5
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10407: LD_ADDR_VAR 0 4
10411: PUSH
10412: LD_INT 22
10414: PUSH
10415: LD_VAR 0 1
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 2
10426: PUSH
10427: LD_INT 21
10429: PUSH
10430: LD_INT 1
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 51
10439: PUSH
10440: EMPTY
10441: LIST
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: LD_INT 21
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: PUSH
10471: FOR_IN
10472: IFFALSE 10595
// begin SetSide ( i , players [ j ] ) ;
10474: LD_VAR 0 4
10478: PPUSH
10479: LD_VAR 0 3
10483: PUSH
10484: LD_VAR 0 5
10488: ARRAY
10489: PPUSH
10490: CALL_OW 235
// if IsDrivenBy ( i ) then
10494: LD_VAR 0 4
10498: PPUSH
10499: CALL_OW 311
10503: IFFALSE 10530
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10505: LD_VAR 0 4
10509: PPUSH
10510: CALL_OW 311
10514: PPUSH
10515: LD_VAR 0 3
10519: PUSH
10520: LD_VAR 0 5
10524: ARRAY
10525: PPUSH
10526: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10530: LD_VAR 0 4
10534: PPUSH
10535: CALL_OW 310
10539: PPUSH
10540: CALL_OW 247
10544: PUSH
10545: LD_INT 3
10547: EQUAL
10548: IFFALSE 10559
// ComExitBuilding ( i ) ;
10550: LD_VAR 0 4
10554: PPUSH
10555: CALL_OW 122
// j := j + 1 ;
10559: LD_ADDR_VAR 0 5
10563: PUSH
10564: LD_VAR 0 5
10568: PUSH
10569: LD_INT 1
10571: PLUS
10572: ST_TO_ADDR
// if j > players then
10573: LD_VAR 0 5
10577: PUSH
10578: LD_VAR 0 3
10582: GREATER
10583: IFFALSE 10593
// j := 1 ;
10585: LD_ADDR_VAR 0 5
10589: PUSH
10590: LD_INT 1
10592: ST_TO_ADDR
// end ;
10593: GO 10471
10595: POP
10596: POP
// end ; end ;
10597: LD_VAR 0 2
10601: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
10606: PPUSH
// i := 3 ;
10607: LD_ADDR_VAR 0 2
10611: PUSH
10612: LD_INT 3
10614: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10615: LD_ADDR_VAR 0 3
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: LD_INT 10
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 120
10632: PUSH
10633: LD_INT 2
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 101
10642: PUSH
10643: LD_INT 8
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 27
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10666: LD_INT 4
10668: PPUSH
10669: LD_INT 5
10671: PPUSH
10672: LD_VAR 0 3
10676: PUSH
10677: LD_VAR 0 2
10681: ARRAY
10682: PUSH
10683: LD_INT 1
10685: ARRAY
10686: PPUSH
10687: LD_VAR 0 3
10691: PUSH
10692: LD_VAR 0 2
10696: ARRAY
10697: PUSH
10698: LD_INT 2
10700: ARRAY
10701: PPUSH
10702: LD_INT 0
10704: PPUSH
10705: CALL_OW 58
// end ;
10709: LD_VAR 0 1
10713: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10714: LD_INT 0
10716: PPUSH
// if not side or side > 8 then
10717: LD_VAR 0 1
10721: NOT
10722: PUSH
10723: LD_VAR 0 1
10727: PUSH
10728: LD_INT 8
10730: GREATER
10731: OR
10732: IFFALSE 10736
// exit ;
10734: GO 10753
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10736: LD_VAR 0 1
10740: PPUSH
10741: LD_INT 6
10743: PPUSH
10744: CALL 10199 0 1
10748: PPUSH
10749: CALL 10041 0 2
// end ;
10753: LD_VAR 0 2
10757: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10758: LD_INT 0
10760: PPUSH
// if not side or side > 8 then
10761: LD_VAR 0 1
10765: NOT
10766: PUSH
10767: LD_VAR 0 1
10771: PUSH
10772: LD_INT 8
10774: GREATER
10775: OR
10776: IFFALSE 10780
// exit ;
10778: GO 10797
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10780: LD_VAR 0 1
10784: PPUSH
10785: LD_INT 4
10787: PPUSH
10788: CALL 10199 0 1
10792: PPUSH
10793: CALL 10041 0 2
// end ;
10797: LD_VAR 0 2
10801: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10802: LD_INT 0
10804: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10805: LD_VAR 0 1
10809: NOT
10810: PUSH
10811: LD_VAR 0 1
10815: PUSH
10816: LD_INT 8
10818: GREATER
10819: OR
10820: PUSH
10821: LD_VAR 0 2
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: LD_INT 6
10831: PUSH
10832: LD_INT 36
10834: PUSH
10835: LD_INT 0
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: IN
10844: NOT
10845: OR
10846: IFFALSE 10850
// exit ;
10848: GO 10867
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10850: LD_VAR 0 1
10854: PPUSH
10855: LD_INT 3
10857: PPUSH
10858: CALL 10199 0 1
10862: PPUSH
10863: CALL 10041 0 2
// end ;
10867: LD_VAR 0 3
10871: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10872: LD_INT 0
10874: PPUSH
10875: PPUSH
// if not un then
10876: LD_VAR 0 1
10880: NOT
10881: IFFALSE 10885
// exit ;
10883: GO 10931
// if not points then
10885: LD_VAR 0 3
10889: NOT
10890: IFFALSE 10907
// gained_points := Multiplayer_GetCondition ( 1 ) else
10892: LD_ADDR_VAR 0 5
10896: PUSH
10897: LD_INT 1
10899: PPUSH
10900: CALL 10199 0 1
10904: ST_TO_ADDR
10905: GO 10917
// gained_points := points ;
10907: LD_ADDR_VAR 0 5
10911: PUSH
10912: LD_VAR 0 3
10916: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10917: LD_VAR 0 2
10921: PPUSH
10922: LD_VAR 0 5
10926: PPUSH
10927: CALL 10041 0 2
10931: LD_VAR 0 4
10935: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10936: LD_INT 0
10938: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10939: LD_VAR 0 1
10943: PPUSH
10944: LD_INT 2
10946: PPUSH
10947: CALL 10199 0 1
10951: PPUSH
10952: CALL 10041 0 2
// end ; end_of_file
10956: LD_VAR 0 2
10960: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10961: LD_VAR 0 1
10965: PPUSH
10966: CALL_OW 255
10970: PUSH
10971: LD_EXP 3
10975: IN
10976: NOT
10977: IFFALSE 10981
// exit ;
10979: GO 10998
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10981: LD_VAR 0 1
10985: PPUSH
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL 10872 0 3
// end ;
10998: PPOPN 3
11000: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
11001: LD_INT 0
11003: PPUSH
11004: PPUSH
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
11010: PPUSH
11011: PPUSH
11012: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL 58382 0 1
// side := GetSide ( un ) ;
11022: LD_ADDR_VAR 0 3
11026: PUSH
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL_OW 255
11036: ST_TO_ADDR
// if multi_sides [ side ] then
11037: LD_EXP 18
11041: PUSH
11042: LD_VAR 0 3
11046: ARRAY
11047: IFFALSE 11073
// if GetType ( un ) = unit_human then
11049: LD_VAR 0 1
11053: PPUSH
11054: CALL_OW 247
11058: PUSH
11059: LD_INT 1
11061: EQUAL
11062: IFFALSE 11073
// MultiplayerEvent_HumanLost ( side ) ;
11064: LD_VAR 0 3
11068: PPUSH
11069: CALL 10758 0 1
// if side in botSides then
11073: LD_VAR 0 3
11077: PUSH
11078: LD_EXP 3
11082: IN
11083: IFFALSE 11588
// begin if side = botSides [ 1 ] then
11085: LD_VAR 0 3
11089: PUSH
11090: LD_EXP 3
11094: PUSH
11095: LD_INT 1
11097: ARRAY
11098: EQUAL
11099: IFFALSE 11588
// begin if un in arForce then
11101: LD_VAR 0 1
11105: PUSH
11106: LD_EXP 14
11110: IN
11111: IFFALSE 11129
// arForce := arForce diff un ;
11113: LD_ADDR_EXP 14
11117: PUSH
11118: LD_EXP 14
11122: PUSH
11123: LD_VAR 0 1
11127: DIFF
11128: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
11129: LD_VAR 0 1
11133: PUSH
11134: LD_EXP 8
11138: IN
11139: PUSH
11140: LD_VAR 0 1
11144: PUSH
11145: LD_EXP 9
11149: IN
11150: OR
11151: IFFALSE 11245
// begin arVehicles := arVehicles diff un ;
11153: LD_ADDR_EXP 8
11157: PUSH
11158: LD_EXP 8
11162: PUSH
11163: LD_VAR 0 1
11167: DIFF
11168: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
11169: LD_ADDR_EXP 9
11173: PUSH
11174: LD_EXP 9
11178: PUSH
11179: LD_VAR 0 1
11183: DIFF
11184: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
11185: LD_ADDR_EXP 6
11189: PUSH
11190: LD_EXP 6
11194: PUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: CALL_OW 265
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 262
11214: PUSH
11215: LD_VAR 0 1
11219: PPUSH
11220: CALL_OW 263
11224: PUSH
11225: LD_VAR 0 1
11229: PPUSH
11230: CALL_OW 264
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: ADD
11244: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
11245: LD_VAR 0 1
11249: PPUSH
11250: CALL_OW 257
11254: PUSH
11255: LD_INT 3
11257: EQUAL
11258: PUSH
11259: LD_VAR 0 1
11263: PPUSH
11264: CALL_OW 110
11268: PUSH
11269: LD_INT 999
11271: LESS
11272: AND
11273: PUSH
11274: LD_EXP 11
11278: AND
11279: IFFALSE 11420
// begin if not IsOk ( arDep ) then
11281: LD_INT 2
11283: PPUSH
11284: CALL_OW 302
11288: NOT
11289: IFFALSE 11293
// exit ;
11291: GO 11689
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11293: LD_ADDR_EXP 11
11297: PUSH
11298: LD_EXP 11
11302: PPUSH
11303: CALL 54681 0 1
11307: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11308: LD_ADDR_OWVAR 20
11312: PUSH
11313: LD_EXP 3
11317: PUSH
11318: LD_INT 1
11320: ARRAY
11321: ST_TO_ADDR
// uc_nation := nation_arabian ;
11322: LD_ADDR_OWVAR 21
11326: PUSH
11327: LD_INT 2
11329: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
11330: LD_INT 0
11332: PPUSH
11333: LD_INT 3
11335: PUSH
11336: LD_INT 6
11338: PUSH
11339: LD_INT 9
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: LD_OWVAR 67
11351: ARRAY
11352: PPUSH
11353: CALL_OW 383
// un := CreateHuman ;
11357: LD_ADDR_VAR 0 1
11361: PUSH
11362: CALL_OW 44
11366: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11367: LD_VAR 0 1
11371: PPUSH
11372: LD_INT 143
11374: PPUSH
11375: LD_INT 29
11377: PPUSH
11378: LD_INT 0
11380: PPUSH
11381: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 115
11392: PPUSH
11393: LD_INT 52
11395: PPUSH
11396: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11400: LD_ADDR_EXP 14
11404: PUSH
11405: LD_EXP 14
11409: PPUSH
11410: LD_VAR 0 1
11414: PPUSH
11415: CALL 53298 0 2
11419: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 247
11429: PUSH
11430: LD_INT 3
11432: EQUAL
11433: IFFALSE 11588
// begin btype := GetBType ( un ) ;
11435: LD_ADDR_VAR 0 11
11439: PUSH
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 266
11449: ST_TO_ADDR
// if btype = b_breastwork then
11450: LD_VAR 0 11
11454: PUSH
11455: LD_INT 31
11457: EQUAL
11458: IFFALSE 11462
// exit ;
11460: GO 11689
// if btype = b_barracks then
11462: LD_VAR 0 11
11466: PUSH
11467: LD_INT 5
11469: EQUAL
11470: IFFALSE 11480
// btype := b_armoury ;
11472: LD_ADDR_VAR 0 11
11476: PUSH
11477: LD_INT 4
11479: ST_TO_ADDR
// if btype = b_factory then
11480: LD_VAR 0 11
11484: PUSH
11485: LD_INT 3
11487: EQUAL
11488: IFFALSE 11498
// btype := b_workshop ;
11490: LD_ADDR_VAR 0 11
11494: PUSH
11495: LD_INT 2
11497: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11498: LD_VAR 0 11
11502: PUSH
11503: LD_INT 8
11505: PUSH
11506: LD_INT 7
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: IN
11513: IFFALSE 11523
// btype := b_lab ;
11515: LD_ADDR_VAR 0 11
11519: PUSH
11520: LD_INT 6
11522: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11523: LD_ADDR_EXP 7
11527: PUSH
11528: LD_EXP 7
11532: PPUSH
11533: LD_EXP 7
11537: PUSH
11538: LD_INT 1
11540: PLUS
11541: PPUSH
11542: LD_VAR 0 11
11546: PUSH
11547: LD_VAR 0 1
11551: PPUSH
11552: CALL_OW 250
11556: PUSH
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 251
11566: PUSH
11567: LD_VAR 0 1
11571: PPUSH
11572: CALL_OW 254
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 1
11587: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
11588: LD_EXP 35
11592: PUSH
11593: LD_EXP 27
11597: AND
11598: PUSH
11599: LD_EXP 36
11603: PUSH
11604: LD_VAR 0 3
11608: ARRAY
11609: NOT
11610: AND
11611: IFFALSE 11689
// if un in multi_commanders then
11613: LD_VAR 0 1
11617: PUSH
11618: LD_EXP 35
11622: IN
11623: IFFALSE 11689
// begin if side = your_side then
11625: LD_VAR 0 3
11629: PUSH
11630: LD_OWVAR 2
11634: EQUAL
11635: IFFALSE 11641
// Multiplayer_Loose_Message ;
11637: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11641: LD_ADDR_EXP 36
11645: PUSH
11646: LD_EXP 36
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL_OW 1
11663: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11664: LD_ADDR_EXP 35
11668: PUSH
11669: LD_EXP 35
11673: PUSH
11674: LD_VAR 0 1
11678: DIFF
11679: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11680: LD_VAR 0 3
11684: PPUSH
11685: CALL 10232 0 1
// end ; end ;
11689: PPOPN 11
11691: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
11696: PPUSH
11697: PPUSH
// begin side := GetSide ( building ) ;
11698: LD_ADDR_VAR 0 4
11702: PUSH
11703: LD_VAR 0 1
11707: PPUSH
11708: CALL_OW 255
11712: ST_TO_ADDR
// if multi_sides [ side ] then
11713: LD_EXP 18
11717: PUSH
11718: LD_VAR 0 4
11722: ARRAY
11723: IFFALSE 11744
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11725: LD_VAR 0 4
11729: PPUSH
11730: LD_VAR 0 1
11734: PPUSH
11735: CALL_OW 266
11739: PPUSH
11740: CALL 10802 0 2
// if side = botSides [ 1 ] then
11744: LD_VAR 0 4
11748: PUSH
11749: LD_EXP 3
11753: PUSH
11754: LD_INT 1
11756: ARRAY
11757: EQUAL
11758: IFFALSE 11854
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11760: LD_ADDR_EXP 7
11764: PUSH
11765: LD_EXP 7
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 3
11777: ST_TO_ADDR
// btype := GetBType ( building ) ;
11778: LD_ADDR_VAR 0 5
11782: PUSH
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 266
11792: ST_TO_ADDR
// case btype of b_workshop :
11793: LD_VAR 0 5
11797: PUSH
11798: LD_INT 2
11800: DOUBLE
11801: EQUAL
11802: IFTRUE 11806
11804: GO 11818
11806: POP
// ComUpgrade ( building ) ; b_lab :
11807: LD_VAR 0 1
11811: PPUSH
11812: CALL_OW 146
11816: GO 11854
11818: LD_INT 6
11820: DOUBLE
11821: EQUAL
11822: IFTRUE 11826
11824: GO 11853
11826: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_INT 10
11834: PPUSH
11835: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11839: LD_VAR 0 1
11843: PPUSH
11844: LD_INT 15
11846: PPUSH
11847: CALL_OW 207
// end ; end ;
11851: GO 11854
11853: POP
// end ; end ;
11854: PPOPN 5
11856: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11857: LD_VAR 0 1
11861: PUSH
11862: LD_INT 22
11864: PUSH
11865: LD_EXP 3
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 33
11880: PUSH
11881: LD_INT 2
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PPUSH
11892: CALL_OW 69
11896: IN
11897: IFFALSE 11908
// ComUnlink ( un ) ;
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 136
// end ;
11908: PPOPN 1
11910: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11911: LD_VAR 0 2
11915: PPUSH
11916: CALL_OW 255
11920: PUSH
11921: LD_EXP 3
11925: IN
11926: NOT
11927: IFFALSE 11931
// exit ;
11929: GO 11994
// if unit in arForceTmp then
11931: LD_VAR 0 2
11935: PUSH
11936: LD_EXP 15
11940: IN
11941: IFFALSE 11994
// begin arForceTmp := arForceTmp diff unit ;
11943: LD_ADDR_EXP 15
11947: PUSH
11948: LD_EXP 15
11952: PUSH
11953: LD_VAR 0 2
11957: DIFF
11958: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11959: LD_ADDR_EXP 14
11963: PUSH
11964: LD_EXP 14
11968: PPUSH
11969: LD_VAR 0 2
11973: PPUSH
11974: CALL 53298 0 2
11978: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11979: LD_VAR 0 2
11983: PPUSH
11984: LD_INT 103
11986: PPUSH
11987: LD_INT 54
11989: PPUSH
11990: CALL_OW 111
// end ; end ;
11994: PPOPN 2
11996: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
11997: LD_INT 0
11999: PPUSH
12000: PPUSH
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_VAR 0 2
12014: PPUSH
12015: CALL 58440 0 2
// side := GetSide ( vehicle ) ;
12019: LD_ADDR_VAR 0 4
12023: PUSH
12024: LD_VAR 0 1
12028: PPUSH
12029: CALL_OW 255
12033: ST_TO_ADDR
// if multi_sides [ side ] then
12034: LD_EXP 18
12038: PUSH
12039: LD_VAR 0 4
12043: ARRAY
12044: IFFALSE 12055
// MultiplayerEvent_Produced ( side ) ;
12046: LD_VAR 0 4
12050: PPUSH
12051: CALL 10714 0 1
// if side = botSides [ 1 ] then
12055: LD_VAR 0 4
12059: PUSH
12060: LD_EXP 3
12064: PUSH
12065: LD_INT 1
12067: ARRAY
12068: EQUAL
12069: IFFALSE 12265
// begin driver := IsDrivenBy ( vehicle ) ;
12071: LD_ADDR_VAR 0 8
12075: PUSH
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 311
12085: ST_TO_ADDR
// if driver then
12086: LD_VAR 0 8
12090: IFFALSE 12124
// begin SetTag ( driver , tMech ) ;
12092: LD_VAR 0 8
12096: PPUSH
12097: LD_INT 7
12099: PPUSH
12100: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
12104: LD_ADDR_EXP 10
12108: PUSH
12109: LD_EXP 10
12113: PPUSH
12114: LD_VAR 0 8
12118: PPUSH
12119: CALL 53298 0 2
12123: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12124: LD_VAR 0 1
12128: PPUSH
12129: CALL_OW 263
12133: PUSH
12134: LD_INT 2
12136: EQUAL
12137: PUSH
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 264
12147: PUSH
12148: LD_INT 32
12150: PUSH
12151: LD_INT 88
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: IN
12158: NOT
12159: AND
12160: IFFALSE 12184
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
12162: LD_ADDR_EXP 16
12166: PUSH
12167: LD_EXP 16
12171: PPUSH
12172: LD_VAR 0 1
12176: PPUSH
12177: CALL 53298 0 2
12181: ST_TO_ADDR
// exit ;
12182: GO 12265
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12184: LD_EXP 12
12188: PUSH
12189: LD_EXP 8
12193: PPUSH
12194: CALL 17689 0 1
12198: GREATER
12199: PUSH
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 264
12209: PUSH
12210: LD_INT 32
12212: PUSH
12213: LD_INT 88
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: IN
12220: OR
12221: IFFALSE 12245
// arVehicles := Join ( arVehicles , vehicle ) else
12223: LD_ADDR_EXP 8
12227: PUSH
12228: LD_EXP 8
12232: PPUSH
12233: LD_VAR 0 1
12237: PPUSH
12238: CALL 53298 0 2
12242: ST_TO_ADDR
12243: GO 12265
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
12245: LD_ADDR_EXP 9
12249: PUSH
12250: LD_EXP 9
12254: PPUSH
12255: LD_VAR 0 1
12259: PPUSH
12260: CALL 53298 0 2
12264: ST_TO_ADDR
// end ; end ;
12265: PPOPN 8
12267: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 110
12277: PUSH
12278: LD_INT 7
12280: EQUAL
12281: IFFALSE 12295
// SetTag ( driver , 0 ) ;
12283: LD_VAR 0 1
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL_OW 109
// end ;
12295: PPOPN 4
12297: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 255
12307: PUSH
12308: LD_EXP 3
12312: PUSH
12313: LD_INT 1
12315: ARRAY
12316: EQUAL
12317: IFFALSE 12347
// if tech in arTech then
12319: LD_VAR 0 1
12323: PUSH
12324: LD_EXP 5
12328: IN
12329: IFFALSE 12347
// arTech := arTech diff tech ;
12331: LD_ADDR_EXP 5
12335: PUSH
12336: LD_EXP 5
12340: PUSH
12341: LD_VAR 0 1
12345: DIFF
12346: ST_TO_ADDR
// end ;
12347: PPOPN 2
12349: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
12350: LD_VAR 0 1
12354: PPUSH
12355: CALL 58399 0 1
// end ; end_of_file
12359: PPOPN 1
12361: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12362: LD_INT 2
12364: PPUSH
12365: CALL_OW 302
12369: PUSH
12370: LD_INT 2
12372: PPUSH
12373: CALL_OW 255
12377: PUSH
12378: LD_EXP 3
12382: PUSH
12383: LD_INT 1
12385: ARRAY
12386: EQUAL
12387: AND
12388: IFFALSE 12425
12390: GO 12392
12392: DISABLE
// begin wait ( 5 5$00 - ( 2 2$00 * Difficulty ) ) ;
12393: LD_INT 10500
12395: PUSH
12396: LD_INT 4200
12398: PUSH
12399: LD_OWVAR 67
12403: MUL
12404: MINUS
12405: PPUSH
12406: CALL_OW 67
// activeArabAttacks := true ;
12410: LD_ADDR_EXP 4
12414: PUSH
12415: LD_INT 1
12417: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12418: LD_INT 0
12420: PPUSH
12421: CALL 12644 0 1
// end ;
12425: END
// every 35 35$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12426: LD_INT 2
12428: PPUSH
12429: CALL_OW 302
12433: PUSH
12434: LD_INT 2
12436: PPUSH
12437: CALL_OW 255
12441: PUSH
12442: LD_EXP 3
12446: PUSH
12447: LD_INT 1
12449: ARRAY
12450: EQUAL
12451: AND
12452: IFFALSE 12466
12454: GO 12456
12456: DISABLE
// ArabAttack ( Difficulty ) ;
12457: LD_OWVAR 67
12461: PPUSH
12462: CALL 12644 0 1
12466: END
// every 55 55$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12467: LD_INT 2
12469: PPUSH
12470: CALL_OW 302
12474: PUSH
12475: LD_INT 2
12477: PPUSH
12478: CALL_OW 255
12482: PUSH
12483: LD_EXP 3
12487: PUSH
12488: LD_INT 1
12490: ARRAY
12491: EQUAL
12492: AND
12493: IFFALSE 12511
12495: GO 12497
12497: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12498: LD_OWVAR 67
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: PPUSH
12507: CALL 12644 0 1
12511: END
// every 85 85$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12512: LD_INT 2
12514: PPUSH
12515: CALL_OW 302
12519: PUSH
12520: LD_INT 2
12522: PPUSH
12523: CALL_OW 255
12527: PUSH
12528: LD_EXP 3
12532: PUSH
12533: LD_INT 1
12535: ARRAY
12536: EQUAL
12537: AND
12538: IFFALSE 12556
12540: GO 12542
12542: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12543: LD_OWVAR 67
12547: PUSH
12548: LD_INT 2
12550: PLUS
12551: PPUSH
12552: CALL 12644 0 1
12556: END
// every 115 115$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12557: LD_INT 2
12559: PPUSH
12560: CALL_OW 302
12564: PUSH
12565: LD_INT 2
12567: PPUSH
12568: CALL_OW 255
12572: PUSH
12573: LD_EXP 3
12577: PUSH
12578: LD_INT 1
12580: ARRAY
12581: EQUAL
12582: AND
12583: IFFALSE 12601
12585: GO 12587
12587: DISABLE
// ArabAttack ( Difficulty + 3 ) ;
12588: LD_OWVAR 67
12592: PUSH
12593: LD_INT 3
12595: PLUS
12596: PPUSH
12597: CALL 12644 0 1
12601: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12602: LD_INT 2
12604: PPUSH
12605: LD_INT 81
12607: PUSH
12608: LD_EXP 3
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 70
12625: IFFALSE 12643
12627: GO 12629
12629: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12630: LD_OWVAR 67
12634: PUSH
12635: LD_INT 2
12637: PLUS
12638: PPUSH
12639: CALL 12644 0 1
12643: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12644: LD_INT 0
12646: PPUSH
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
// uc_side := botSides [ 1 ] ;
12653: LD_ADDR_OWVAR 20
12657: PUSH
12658: LD_EXP 3
12662: PUSH
12663: LD_INT 1
12665: ARRAY
12666: ST_TO_ADDR
// uc_nation := nation_arabian ;
12667: LD_ADDR_OWVAR 21
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12675: LD_ADDR_VAR 0 4
12679: PUSH
12680: LD_INT 3
12682: PUSH
12683: LD_INT 5
12685: PUSH
12686: LD_INT 7
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_OWVAR 67
12698: ARRAY
12699: ST_TO_ADDR
// arAttackersInf := [ ] ;
12700: LD_ADDR_EXP 43
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12707: LD_ADDR_EXP 44
12711: PUSH
12712: EMPTY
12713: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12714: LD_ADDR_VAR 0 7
12718: PUSH
12719: LD_INT 48
12721: PUSH
12722: LD_INT 52
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 135
12731: PUSH
12732: LD_INT 48
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_VAR 0 1
12747: PUSH
12748: LD_INT 2
12750: MOD
12751: PUSH
12752: LD_INT 1
12754: PLUS
12755: ARRAY
12756: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12757: LD_ADDR_VAR 0 8
12761: PUSH
12762: LD_INT 12
12764: PUSH
12765: LD_INT 13
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 23
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_VAR 0 1
12790: PUSH
12791: LD_INT 2
12793: MOD
12794: PUSH
12795: LD_INT 1
12797: PLUS
12798: ARRAY
12799: ST_TO_ADDR
// InitHC_All ( ) ;
12800: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12804: LD_ADDR_VAR 0 3
12808: PUSH
12809: DOUBLE
12810: LD_INT 1
12812: DEC
12813: ST_TO_ADDR
12814: LD_INT 3
12816: PUSH
12817: LD_INT 4
12819: PUSH
12820: LD_INT 6
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: PUSH
12828: LD_OWVAR 67
12832: ARRAY
12833: PUSH
12834: LD_VAR 0 1
12838: PLUS
12839: PUSH
12840: FOR_TO
12841: IFFALSE 12973
// begin PrepareSoldier ( false , skill ) ;
12843: LD_INT 0
12845: PPUSH
12846: LD_VAR 0 4
12850: PPUSH
12851: CALL_OW 381
// un := CreateHuman ;
12855: LD_ADDR_VAR 0 5
12859: PUSH
12860: CALL_OW 44
12864: ST_TO_ADDR
// if i mod 2 = 0 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 2
12872: MOD
12873: PUSH
12874: LD_INT 0
12876: EQUAL
12877: IFFALSE 12891
// SetClass ( un , class_mortar ) ;
12879: LD_VAR 0 5
12883: PPUSH
12884: LD_INT 8
12886: PPUSH
12887: CALL_OW 336
// SetDir ( un , 1 ) ;
12891: LD_VAR 0 5
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
12903: LD_VAR 0 5
12907: PPUSH
12908: LD_VAR 0 8
12912: PUSH
12913: LD_INT 1
12915: ARRAY
12916: PPUSH
12917: LD_INT 0
12919: PPUSH
12920: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12924: LD_ADDR_EXP 43
12928: PUSH
12929: LD_EXP 43
12933: PPUSH
12934: LD_VAR 0 5
12938: PPUSH
12939: CALL 53298 0 2
12943: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
12944: LD_VAR 0 5
12948: PPUSH
12949: LD_VAR 0 7
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PPUSH
12958: LD_VAR 0 7
12962: PUSH
12963: LD_INT 2
12965: ARRAY
12966: PPUSH
12967: CALL_OW 114
// end ;
12971: GO 12840
12973: POP
12974: POP
// for i := 1 to 3 + v do
12975: LD_ADDR_VAR 0 3
12979: PUSH
12980: DOUBLE
12981: LD_INT 1
12983: DEC
12984: ST_TO_ADDR
12985: LD_INT 3
12987: PUSH
12988: LD_VAR 0 1
12992: PLUS
12993: PUSH
12994: FOR_TO
12995: IFFALSE 13192
// begin PrepareMechanic ( false , skill ) ;
12997: LD_INT 0
12999: PPUSH
13000: LD_VAR 0 4
13004: PPUSH
13005: CALL_OW 383
// un := CreateHuman ;
13009: LD_ADDR_VAR 0 5
13013: PUSH
13014: CALL_OW 44
13018: ST_TO_ADDR
// SetTag ( un , 999 ) ;
13019: LD_VAR 0 5
13023: PPUSH
13024: LD_INT 999
13026: PPUSH
13027: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
13031: LD_INT 14
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: LD_INT 27
13042: PUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 28
13048: PUSH
13049: LD_INT 26
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: PUSH
13058: LD_VAR 0 3
13062: PUSH
13063: LD_INT 4
13065: MOD
13066: PUSH
13067: LD_INT 1
13069: PLUS
13070: ARRAY
13071: PPUSH
13072: LD_INT 80
13074: PPUSH
13075: CALL 20427 0 5
// veh := CreateVehicle ;
13079: LD_ADDR_VAR 0 6
13083: PUSH
13084: CALL_OW 45
13088: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13089: LD_VAR 0 6
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13101: LD_VAR 0 6
13105: PPUSH
13106: LD_VAR 0 8
13110: PUSH
13111: LD_INT 2
13113: ARRAY
13114: PPUSH
13115: LD_INT 0
13117: PPUSH
13118: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13122: LD_VAR 0 5
13126: PPUSH
13127: LD_VAR 0 6
13131: PPUSH
13132: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13136: LD_VAR 0 5
13140: PPUSH
13141: LD_VAR 0 7
13145: PUSH
13146: LD_INT 1
13148: ARRAY
13149: PPUSH
13150: LD_VAR 0 7
13154: PUSH
13155: LD_INT 2
13157: ARRAY
13158: PPUSH
13159: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13163: LD_ADDR_EXP 44
13167: PUSH
13168: LD_EXP 44
13172: PPUSH
13173: LD_VAR 0 6
13177: PPUSH
13178: CALL 53298 0 2
13182: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13183: LD_INT 70
13185: PPUSH
13186: CALL_OW 67
// end ;
13190: GO 12994
13192: POP
13193: POP
// wait ( 0 0$2 ) ;
13194: LD_INT 70
13196: PPUSH
13197: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] + ( v div 2 ) do
13201: LD_ADDR_VAR 0 3
13205: PUSH
13206: DOUBLE
13207: LD_INT 1
13209: DEC
13210: ST_TO_ADDR
13211: LD_INT 1
13213: PUSH
13214: LD_INT 2
13216: PUSH
13217: LD_INT 3
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: LD_OWVAR 67
13229: ARRAY
13230: PUSH
13231: LD_VAR 0 1
13235: PUSH
13236: LD_INT 2
13238: DIV
13239: PLUS
13240: PUSH
13241: FOR_TO
13242: IFFALSE 13355
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
13244: LD_INT 14
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: LD_INT 5
13252: PPUSH
13253: LD_INT 29
13255: PPUSH
13256: LD_INT 80
13258: PPUSH
13259: CALL 20427 0 5
// veh := CreateVehicle ;
13263: LD_ADDR_VAR 0 6
13267: PUSH
13268: CALL_OW 45
13272: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13273: LD_VAR 0 6
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13285: LD_VAR 0 6
13289: PPUSH
13290: LD_VAR 0 8
13294: PUSH
13295: LD_INT 2
13297: ARRAY
13298: PPUSH
13299: LD_INT 0
13301: PPUSH
13302: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13306: LD_VAR 0 5
13310: PPUSH
13311: LD_VAR 0 7
13315: PUSH
13316: LD_INT 1
13318: ARRAY
13319: PPUSH
13320: LD_VAR 0 7
13324: PUSH
13325: LD_INT 2
13327: ARRAY
13328: PPUSH
13329: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13333: LD_ADDR_EXP 44
13337: PUSH
13338: LD_EXP 44
13342: PPUSH
13343: LD_VAR 0 6
13347: PPUSH
13348: CALL 53298 0 2
13352: ST_TO_ADDR
// end ;
13353: GO 13241
13355: POP
13356: POP
// end ;
13357: LD_VAR 0 2
13361: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
13362: LD_EXP 43
13366: IFFALSE 13896
13368: GO 13370
13370: DISABLE
13371: LD_INT 0
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
13377: PPUSH
// begin enable ;
13378: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 120
13386: PUSH
13387: LD_INT 11
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PPUSH
13394: CALL_OW 69
13398: PUSH
13399: FOR_IN
13400: IFFALSE 13416
// SetTag ( i , 0 ) ;
13402: LD_VAR 0 1
13406: PPUSH
13407: LD_INT 0
13409: PPUSH
13410: CALL_OW 109
13414: GO 13399
13416: POP
13417: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13418: LD_ADDR_VAR 0 2
13422: PUSH
13423: LD_EXP 43
13427: PPUSH
13428: LD_INT 50
13430: PUSH
13431: EMPTY
13432: LIST
13433: PPUSH
13434: CALL_OW 72
13438: ST_TO_ADDR
// arAttackersInf := [ ] ;
13439: LD_ADDR_EXP 43
13443: PUSH
13444: EMPTY
13445: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13446: LD_ADDR_VAR 0 1
13450: PUSH
13451: LD_VAR 0 2
13455: PPUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PPUSH
13466: CALL_OW 72
13470: PUSH
13471: FOR_IN
13472: IFFALSE 13603
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13474: LD_ADDR_VAR 0 3
13478: PUSH
13479: LD_INT 81
13481: PUSH
13482: LD_EXP 3
13486: PUSH
13487: LD_INT 1
13489: ARRAY
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 120
13500: PUSH
13501: LD_INT 11
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 21
13517: PUSH
13518: LD_INT 2
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 21
13527: PUSH
13528: LD_INT 3
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: PPUSH
13545: CALL_OW 69
13549: PPUSH
13550: LD_VAR 0 1
13554: PPUSH
13555: CALL_OW 74
13559: ST_TO_ADDR
// if not nearest then
13560: LD_VAR 0 3
13564: NOT
13565: IFFALSE 13569
// break ;
13567: GO 13603
// SetTag ( nearest , tMined ) ;
13569: LD_VAR 0 3
13573: PPUSH
13574: LD_INT 11
13576: PPUSH
13577: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13581: LD_VAR 0 1
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: LD_INT 0
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: CALL_OW 192
// end ;
13601: GO 13471
13603: POP
13604: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13605: LD_ADDR_VAR 0 2
13609: PUSH
13610: LD_VAR 0 2
13614: PPUSH
13615: LD_INT 50
13617: PUSH
13618: EMPTY
13619: LIST
13620: PPUSH
13621: CALL_OW 72
13625: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13626: LD_INT 70
13628: PPUSH
13629: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13633: LD_ADDR_VAR 0 2
13637: PUSH
13638: LD_VAR 0 2
13642: PPUSH
13643: LD_INT 50
13645: PUSH
13646: EMPTY
13647: LIST
13648: PPUSH
13649: CALL_OW 72
13653: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13654: LD_ADDR_VAR 0 4
13658: PUSH
13659: LD_INT 81
13661: PUSH
13662: LD_EXP 3
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 69
13679: ST_TO_ADDR
// for i in tmp do
13680: LD_ADDR_VAR 0 1
13684: PUSH
13685: LD_VAR 0 2
13689: PUSH
13690: FOR_IN
13691: IFFALSE 13887
// if GetClass ( i ) <> 1 then
13693: LD_VAR 0 1
13697: PPUSH
13698: CALL_OW 257
13702: PUSH
13703: LD_INT 1
13705: NONEQUAL
13706: IFFALSE 13734
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13708: LD_VAR 0 1
13712: PPUSH
13713: LD_VAR 0 4
13717: PPUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 74
13727: PPUSH
13728: CALL_OW 115
13732: GO 13885
// if not HasTask ( i ) then
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 314
13743: NOT
13744: IFFALSE 13885
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13746: LD_ADDR_VAR 0 3
13750: PUSH
13751: LD_VAR 0 4
13755: PPUSH
13756: LD_INT 3
13758: PUSH
13759: LD_INT 120
13761: PUSH
13762: LD_INT 11
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 2
13775: PUSH
13776: LD_INT 21
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 21
13788: PUSH
13789: LD_INT 3
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PPUSH
13805: CALL_OW 72
13809: PPUSH
13810: LD_VAR 0 1
13814: PPUSH
13815: CALL_OW 74
13819: ST_TO_ADDR
// if not nearest then
13820: LD_VAR 0 3
13824: NOT
13825: IFFALSE 13853
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_VAR 0 4
13836: PPUSH
13837: LD_VAR 0 1
13841: PPUSH
13842: CALL_OW 74
13846: PPUSH
13847: CALL_OW 115
13851: GO 13885
// begin SetTag ( nearest , tMined ) ;
13853: LD_VAR 0 3
13857: PPUSH
13858: LD_INT 11
13860: PPUSH
13861: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13865: LD_VAR 0 1
13869: PPUSH
13870: LD_INT 0
13872: PPUSH
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 3
13880: PPUSH
13881: CALL_OW 132
// end ; end ;
13885: GO 13690
13887: POP
13888: POP
// until not tmp ;
13889: LD_VAR 0 2
13893: NOT
13894: IFFALSE 13626
// end ;
13896: PPOPN 5
13898: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
13899: LD_EXP 44
13903: IFFALSE 14126
13905: GO 13907
13907: DISABLE
13908: LD_INT 0
13910: PPUSH
13911: PPUSH
13912: PPUSH
// begin enable ;
13913: ENABLE
// tmp := arAttackersVeh ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_EXP 44
13923: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13924: LD_ADDR_EXP 44
13928: PUSH
13929: EMPTY
13930: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
13931: LD_ADDR_VAR 0 3
13935: PUSH
13936: LD_INT 139
13938: PUSH
13939: LD_INT 55
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 155
13948: PUSH
13949: LD_INT 92
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 53
13962: PUSH
13963: LD_INT 61
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 74
13972: PUSH
13973: LD_INT 98
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
13988: LD_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: ARRAY
13996: PPUSH
13997: LD_INT 139
13999: PPUSH
14000: LD_INT 55
14002: PPUSH
14003: CALL_OW 297
14007: PUSH
14008: LD_VAR 0 2
14012: PUSH
14013: LD_INT 1
14015: ARRAY
14016: PPUSH
14017: LD_INT 53
14019: PPUSH
14020: LD_INT 61
14022: PPUSH
14023: CALL_OW 297
14027: LESS
14028: IFFALSE 14046
// path := path [ 1 ] else
14030: LD_ADDR_VAR 0 3
14034: PUSH
14035: LD_VAR 0 3
14039: PUSH
14040: LD_INT 1
14042: ARRAY
14043: ST_TO_ADDR
14044: GO 14060
// path := path [ 2 ] ;
14046: LD_ADDR_VAR 0 3
14050: PUSH
14051: LD_VAR 0 3
14055: PUSH
14056: LD_INT 2
14058: ARRAY
14059: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14060: LD_INT 70
14062: PPUSH
14063: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14067: LD_ADDR_VAR 0 2
14071: PUSH
14072: LD_VAR 0 2
14076: PPUSH
14077: LD_INT 50
14079: PUSH
14080: EMPTY
14081: LIST
14082: PPUSH
14083: CALL_OW 72
14087: ST_TO_ADDR
// for i in tmp do
14088: LD_ADDR_VAR 0 1
14092: PUSH
14093: LD_VAR 0 2
14097: PUSH
14098: FOR_IN
14099: IFFALSE 14117
// AgressiveMove ( i , path ) until not tmp ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: CALL 55902 0 2
14115: GO 14098
14117: POP
14118: POP
14119: LD_VAR 0 2
14123: NOT
14124: IFFALSE 14060
// end ;
14126: PPOPN 3
14128: END
// every 1 1$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
14129: LD_EXP 16
14133: PPUSH
14134: CALL 17689 0 1
14138: PUSH
14139: LD_INT 3
14141: GREATEREQUAL
14142: IFFALSE 14263
14144: GO 14146
14146: DISABLE
14147: LD_INT 0
14149: PPUSH
14150: PPUSH
// begin enable ;
14151: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
14152: LD_ADDR_VAR 0 2
14156: PUSH
14157: LD_EXP 16
14161: PPUSH
14162: LD_INT 61
14164: PUSH
14165: EMPTY
14166: LIST
14167: PPUSH
14168: CALL_OW 72
14172: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
14173: LD_ADDR_EXP 16
14177: PUSH
14178: LD_EXP 16
14182: PUSH
14183: LD_VAR 0 2
14187: DIFF
14188: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14189: LD_INT 70
14191: PPUSH
14192: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14196: LD_ADDR_VAR 0 2
14200: PUSH
14201: LD_VAR 0 2
14205: PPUSH
14206: LD_INT 50
14208: PUSH
14209: EMPTY
14210: LIST
14211: PPUSH
14212: CALL_OW 72
14216: ST_TO_ADDR
// for i in tmp do
14217: LD_ADDR_VAR 0 1
14221: PUSH
14222: LD_VAR 0 2
14226: PUSH
14227: FOR_IN
14228: IFFALSE 14254
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
14230: LD_VAR 0 1
14234: PPUSH
14235: LD_INT 98
14237: PUSH
14238: LD_INT 63
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: PPUSH
14248: CALL 55902 0 2
14252: GO 14227
14254: POP
14255: POP
14256: LD_VAR 0 2
14260: NOT
14261: IFFALSE 14189
// end ;
14263: PPOPN 2
14265: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
14266: LD_EXP 9
14270: PUSH
14271: LD_EXP 4
14275: AND
14276: IFFALSE 14833
14278: GO 14280
14280: DISABLE
14281: LD_INT 0
14283: PPUSH
14284: PPUSH
14285: PPUSH
// begin enable ;
14286: ENABLE
// if not arVehiclesAtttackers then
14287: LD_EXP 9
14291: NOT
14292: IFFALSE 14296
// exit ;
14294: GO 14833
// for i in arVehiclesAtttackers do
14296: LD_ADDR_VAR 0 1
14300: PUSH
14301: LD_EXP 9
14305: PUSH
14306: FOR_IN
14307: IFFALSE 14831
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
14309: LD_VAR 0 1
14313: PPUSH
14314: CALL_OW 302
14318: NOT
14319: PUSH
14320: LD_VAR 0 1
14324: PPUSH
14325: CALL_OW 255
14329: PUSH
14330: LD_EXP 3
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: NONEQUAL
14339: OR
14340: IFFALSE 14360
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
14342: LD_ADDR_EXP 9
14346: PUSH
14347: LD_EXP 9
14351: PUSH
14352: LD_VAR 0 1
14356: DIFF
14357: ST_TO_ADDR
// continue ;
14358: GO 14306
// end ; if GetTag ( i ) = 300 then
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 110
14369: PUSH
14370: LD_INT 300
14372: EQUAL
14373: IFFALSE 14488
// begin if GetFuel ( i ) < 50 then
14375: LD_VAR 0 1
14379: PPUSH
14380: CALL_OW 261
14384: PUSH
14385: LD_INT 50
14387: LESS
14388: IFFALSE 14447
// begin ComMoveXY ( i , 102 , 47 ) ;
14390: LD_VAR 0 1
14394: PPUSH
14395: LD_INT 102
14397: PPUSH
14398: LD_INT 47
14400: PPUSH
14401: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14405: LD_INT 35
14407: PPUSH
14408: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14412: LD_VAR 0 1
14416: PPUSH
14417: LD_INT 102
14419: PPUSH
14420: LD_INT 47
14422: PPUSH
14423: CALL_OW 297
14427: PUSH
14428: LD_INT 4
14430: LESS
14431: IFFALSE 14405
// SetFuel ( i , 100 ) ;
14433: LD_VAR 0 1
14437: PPUSH
14438: LD_INT 100
14440: PPUSH
14441: CALL_OW 240
// end else
14445: GO 14488
// if not IsInArea ( i , arParkingArea ) then
14447: LD_VAR 0 1
14451: PPUSH
14452: LD_INT 14
14454: PPUSH
14455: CALL_OW 308
14459: NOT
14460: IFFALSE 14476
// ComMoveToArea ( i , arParkingArea ) else
14462: LD_VAR 0 1
14466: PPUSH
14467: LD_INT 14
14469: PPUSH
14470: CALL_OW 113
14474: GO 14488
// SetTag ( i , 301 ) ;
14476: LD_VAR 0 1
14480: PPUSH
14481: LD_INT 301
14483: PPUSH
14484: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14488: LD_VAR 0 1
14492: PPUSH
14493: CALL_OW 110
14497: PUSH
14498: LD_INT 301
14500: EQUAL
14501: IFFALSE 14643
// begin if GetLives ( i ) < 1000 then
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 256
14512: PUSH
14513: LD_INT 1000
14515: LESS
14516: IFFALSE 14620
// begin if not IsDrivenBy ( i ) then
14518: LD_VAR 0 1
14522: PPUSH
14523: CALL_OW 311
14527: NOT
14528: IFFALSE 14532
// continue ;
14530: GO 14306
// mech := IsDrivenBy ( i ) ;
14532: LD_ADDR_VAR 0 2
14536: PUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL_OW 311
14546: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14547: LD_VAR 0 2
14551: PPUSH
14552: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14556: LD_VAR 0 2
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14570: LD_INT 35
14572: PPUSH
14573: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 256
14586: PUSH
14587: LD_INT 1000
14589: EQUAL
14590: IFFALSE 14570
// SetLives ( mech , 1000 ) ;
14592: LD_VAR 0 2
14596: PPUSH
14597: LD_INT 1000
14599: PPUSH
14600: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14604: LD_VAR 0 2
14608: PPUSH
14609: LD_VAR 0 1
14613: PPUSH
14614: CALL_OW 120
// end else
14618: GO 14643
// if IsDrivenBy ( i ) then
14620: LD_VAR 0 1
14624: PPUSH
14625: CALL_OW 311
14629: IFFALSE 14643
// SetTag ( i , 0 ) ;
14631: LD_VAR 0 1
14635: PPUSH
14636: LD_INT 0
14638: PPUSH
14639: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 110
14652: PUSH
14653: LD_INT 300
14655: LESS
14656: IFFALSE 14829
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14658: LD_ADDR_VAR 0 3
14662: PUSH
14663: LD_INT 1
14665: PPUSH
14666: LD_INT 81
14668: PUSH
14669: LD_EXP 3
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 70
14686: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 256
14696: PUSH
14697: LD_INT 650
14699: LESS
14700: IFFALSE 14725
// begin ComStop ( i ) ;
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 141
// SetTag ( i , 300 ) ;
14711: LD_VAR 0 1
14715: PPUSH
14716: LD_INT 300
14718: PPUSH
14719: CALL_OW 109
// continue ;
14723: GO 14306
// end ; if enemy then
14725: LD_VAR 0 3
14729: IFFALSE 14769
// begin if not HasTask ( i ) then
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 314
14740: NOT
14741: IFFALSE 14767
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14743: LD_VAR 0 1
14747: PPUSH
14748: LD_VAR 0 3
14752: PPUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 74
14762: PPUSH
14763: CALL_OW 115
// end else
14767: GO 14829
// if arVehiclesAtttackers then
14769: LD_EXP 9
14773: IFFALSE 14829
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_INT 81
14782: PUSH
14783: LD_EXP 3
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PPUSH
14796: CALL_OW 69
14800: ST_TO_ADDR
// if enemy then
14801: LD_VAR 0 3
14805: IFFALSE 14829
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_INT 99
14814: PUSH
14815: LD_INT 66
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: PPUSH
14825: CALL 55902 0 2
// end ; end ; end ;
14829: GO 14306
14831: POP
14832: POP
// end ;
14833: PPOPN 3
14835: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14836: LD_INT 22
14838: PUSH
14839: LD_EXP 3
14843: PUSH
14844: LD_INT 1
14846: ARRAY
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 32
14854: PUSH
14855: LD_INT 1
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: IFFALSE 14953
14872: GO 14874
14874: DISABLE
14875: LD_INT 0
14877: PPUSH
// begin enable ;
14878: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14879: LD_ADDR_VAR 0 1
14883: PUSH
14884: LD_INT 22
14886: PUSH
14887: LD_EXP 3
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 32
14902: PUSH
14903: LD_INT 1
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PPUSH
14914: CALL_OW 69
14918: PUSH
14919: FOR_IN
14920: IFFALSE 14951
// if GetFuel ( i ) < 3 then
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 261
14931: PUSH
14932: LD_INT 3
14934: LESS
14935: IFFALSE 14949
// SetFuel ( i , 3 ) ;
14937: LD_VAR 0 1
14941: PPUSH
14942: LD_INT 3
14944: PPUSH
14945: CALL_OW 240
14949: GO 14919
14951: POP
14952: POP
// end ; end_of_file
14953: PPOPN 1
14955: END
// every 0 0$20 trigger game do
14956: LD_EXP 2
14960: IFFALSE 15005
14962: GO 14964
14964: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14965: LD_INT 15
14967: PUSH
14968: LD_INT 17
14970: PUSH
14971: LD_INT 16
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PPUSH
14983: LD_EXP 32
14987: PUSH
14988: LD_INT 2
14990: ARRAY
14991: PPUSH
14992: LD_EXP 32
14996: PUSH
14997: LD_INT 1
14999: ARRAY
15000: PPUSH
15001: CALL 15006 0 3
15005: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
15006: LD_INT 0
15008: PPUSH
15009: PPUSH
15010: PPUSH
15011: PPUSH
// if not areas then
15012: LD_VAR 0 1
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15398
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
15021: LD_ADDR_VAR 0 7
15025: PUSH
15026: LD_INT 18
15028: PUSH
15029: LD_INT 19
15031: PUSH
15032: LD_INT 20
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: ST_TO_ADDR
// x := 5 ;
15040: LD_ADDR_VAR 0 6
15044: PUSH
15045: LD_INT 5
15047: ST_TO_ADDR
// repeat wait ( time ) ;
15048: LD_VAR 0 2
15052: PPUSH
15053: CALL_OW 67
// if tick < [ 22 22$00 , 19 19$00 , 15 15$00 ] [ Difficulty ] then
15057: LD_OWVAR 1
15061: PUSH
15062: LD_INT 46200
15064: PUSH
15065: LD_INT 39900
15067: PUSH
15068: LD_INT 31500
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: PUSH
15076: LD_OWVAR 67
15080: ARRAY
15081: LESS
15082: IFFALSE 15221
// begin for i := 1 to multi_sides do
15084: LD_ADDR_VAR 0 5
15088: PUSH
15089: DOUBLE
15090: LD_INT 1
15092: DEC
15093: ST_TO_ADDR
15094: LD_EXP 18
15098: PUSH
15099: FOR_TO
15100: IFFALSE 15212
// if multi_sides [ i ] then
15102: LD_EXP 18
15106: PUSH
15107: LD_VAR 0 5
15111: ARRAY
15112: IFFALSE 15210
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
15114: LD_VAR 0 7
15118: PUSH
15119: LD_EXP 18
15123: PUSH
15124: LD_VAR 0 5
15128: ARRAY
15129: ARRAY
15130: PPUSH
15131: LD_INT 1
15133: PPUSH
15134: CALL_OW 287
15138: PUSH
15139: LD_INT 32
15141: PUSH
15142: LD_INT 25
15144: PUSH
15145: LD_INT 23
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: PUSH
15153: LD_OWVAR 67
15157: ARRAY
15158: LESS
15159: IFFALSE 15210
// begin amount := amount - ( x * 10 ) ;
15161: LD_ADDR_VAR 0 3
15165: PUSH
15166: LD_VAR 0 3
15170: PUSH
15171: LD_VAR 0 6
15175: PUSH
15176: LD_INT 10
15178: MUL
15179: MINUS
15180: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
15181: LD_VAR 0 6
15185: PPUSH
15186: LD_VAR 0 7
15190: PUSH
15191: LD_EXP 18
15195: PUSH
15196: LD_VAR 0 5
15200: ARRAY
15201: ARRAY
15202: PPUSH
15203: LD_INT 1
15205: PPUSH
15206: CALL_OW 55
// end ; end ;
15210: GO 15099
15212: POP
15213: POP
// wait ( 0 0$2 ) ;
15214: LD_INT 70
15216: PPUSH
15217: CALL_OW 67
// end ; for i in areas do
15221: LD_ADDR_VAR 0 5
15225: PUSH
15226: LD_VAR 0 1
15230: PUSH
15231: FOR_IN
15232: IFFALSE 15315
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
15234: LD_VAR 0 5
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: CALL_OW 287
15246: PUSH
15247: LD_INT 25
15249: PUSH
15250: LD_INT 22
15252: PUSH
15253: LD_INT 20
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: PUSH
15261: LD_OWVAR 67
15265: ARRAY
15266: LESS
15267: IFFALSE 15313
// begin wait ( 0 0$5 ) ;
15269: LD_INT 175
15271: PPUSH
15272: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15276: LD_VAR 0 6
15280: PPUSH
15281: LD_VAR 0 5
15285: PPUSH
15286: LD_INT 1
15288: PPUSH
15289: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15293: LD_ADDR_VAR 0 3
15297: PUSH
15298: LD_VAR 0 3
15302: PUSH
15303: LD_VAR 0 6
15307: PUSH
15308: LD_INT 10
15310: MUL
15311: MINUS
15312: ST_TO_ADDR
// end ; end ;
15313: GO 15231
15315: POP
15316: POP
// time := time + 0 0$2 ;
15317: LD_ADDR_VAR 0 2
15321: PUSH
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 70
15329: PLUS
15330: ST_TO_ADDR
// x := x - 1 ;
15331: LD_ADDR_VAR 0 6
15335: PUSH
15336: LD_VAR 0 6
15340: PUSH
15341: LD_INT 1
15343: MINUS
15344: ST_TO_ADDR
// if x = 0 then
15345: LD_VAR 0 6
15349: PUSH
15350: LD_INT 0
15352: EQUAL
15353: IFFALSE 15363
// x := 5 ;
15355: LD_ADDR_VAR 0 6
15359: PUSH
15360: LD_INT 5
15362: ST_TO_ADDR
// if time > 1 1$00 then
15363: LD_VAR 0 2
15367: PUSH
15368: LD_INT 2100
15370: GREATER
15371: IFFALSE 15381
// time := 0 0$30 ;
15373: LD_ADDR_VAR 0 2
15377: PUSH
15378: LD_INT 1050
15380: ST_TO_ADDR
// until not game or amount <= 0 ;
15381: LD_EXP 2
15385: NOT
15386: PUSH
15387: LD_VAR 0 3
15391: PUSH
15392: LD_INT 0
15394: LESSEQUAL
15395: OR
15396: IFFALSE 15048
// end ; end_of_file
15398: LD_VAR 0 4
15402: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15403: LD_VAR 0 1
15407: PUSH
15408: LD_INT 200
15410: DOUBLE
15411: GREATEREQUAL
15412: IFFALSE 15420
15414: LD_INT 299
15416: DOUBLE
15417: LESSEQUAL
15418: IFTRUE 15422
15420: GO 15454
15422: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15423: LD_VAR 0 1
15427: PPUSH
15428: LD_VAR 0 2
15432: PPUSH
15433: LD_VAR 0 3
15437: PPUSH
15438: LD_VAR 0 4
15442: PPUSH
15443: LD_VAR 0 5
15447: PPUSH
15448: CALL 58967 0 5
15452: GO 15531
15454: LD_INT 300
15456: DOUBLE
15457: GREATEREQUAL
15458: IFFALSE 15466
15460: LD_INT 399
15462: DOUBLE
15463: LESSEQUAL
15464: IFTRUE 15468
15466: GO 15530
15468: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15469: LD_VAR 0 1
15473: PPUSH
15474: LD_VAR 0 2
15478: PPUSH
15479: LD_VAR 0 3
15483: PPUSH
15484: LD_VAR 0 4
15488: PPUSH
15489: LD_VAR 0 5
15493: PPUSH
15494: LD_VAR 0 6
15498: PPUSH
15499: LD_VAR 0 7
15503: PPUSH
15504: LD_VAR 0 8
15508: PPUSH
15509: LD_VAR 0 9
15513: PPUSH
15514: LD_VAR 0 10
15518: PPUSH
15519: LD_VAR 0 11
15523: PPUSH
15524: CALL 63714 0 11
15528: GO 15531
15530: POP
// end ;
15531: PPOPN 11
15533: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15534: LD_VAR 0 1
15538: PPUSH
15539: LD_VAR 0 2
15543: PPUSH
15544: LD_VAR 0 3
15548: PPUSH
15549: LD_VAR 0 4
15553: PPUSH
15554: LD_VAR 0 5
15558: PPUSH
15559: CALL 58432 0 5
// end ; end_of_file
15563: PPOPN 5
15565: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15566: LD_INT 0
15568: PPUSH
15569: PPUSH
// if exist_mode then
15570: LD_VAR 0 2
15574: IFFALSE 15620
// begin unit := CreateCharacter ( prefix & ident ) ;
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 1
15590: STR
15591: PPUSH
15592: CALL_OW 34
15596: ST_TO_ADDR
// if unit then
15597: LD_VAR 0 5
15601: IFFALSE 15618
// DeleteCharacters ( prefix & ident ) ;
15603: LD_VAR 0 3
15607: PUSH
15608: LD_VAR 0 1
15612: STR
15613: PPUSH
15614: CALL_OW 40
// end else
15618: GO 15635
// unit := NewCharacter ( ident ) ;
15620: LD_ADDR_VAR 0 5
15624: PUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 25
15634: ST_TO_ADDR
// result := unit ;
15635: LD_ADDR_VAR 0 4
15639: PUSH
15640: LD_VAR 0 5
15644: ST_TO_ADDR
// end ;
15645: LD_VAR 0 4
15649: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
// if not side or not nation then
15654: LD_VAR 0 1
15658: NOT
15659: PUSH
15660: LD_VAR 0 2
15664: NOT
15665: OR
15666: IFFALSE 15670
// exit ;
15668: GO 16438
// case nation of nation_american :
15670: LD_VAR 0 2
15674: PUSH
15675: LD_INT 1
15677: DOUBLE
15678: EQUAL
15679: IFTRUE 15683
15681: GO 15897
15683: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15684: LD_ADDR_VAR 0 4
15688: PUSH
15689: LD_INT 35
15691: PUSH
15692: LD_INT 45
15694: PUSH
15695: LD_INT 46
15697: PUSH
15698: LD_INT 47
15700: PUSH
15701: LD_INT 82
15703: PUSH
15704: LD_INT 83
15706: PUSH
15707: LD_INT 84
15709: PUSH
15710: LD_INT 85
15712: PUSH
15713: LD_INT 86
15715: PUSH
15716: LD_INT 1
15718: PUSH
15719: LD_INT 2
15721: PUSH
15722: LD_INT 6
15724: PUSH
15725: LD_INT 15
15727: PUSH
15728: LD_INT 16
15730: PUSH
15731: LD_INT 7
15733: PUSH
15734: LD_INT 12
15736: PUSH
15737: LD_INT 13
15739: PUSH
15740: LD_INT 10
15742: PUSH
15743: LD_INT 14
15745: PUSH
15746: LD_INT 20
15748: PUSH
15749: LD_INT 21
15751: PUSH
15752: LD_INT 22
15754: PUSH
15755: LD_INT 25
15757: PUSH
15758: LD_INT 32
15760: PUSH
15761: LD_INT 27
15763: PUSH
15764: LD_INT 36
15766: PUSH
15767: LD_INT 69
15769: PUSH
15770: LD_INT 39
15772: PUSH
15773: LD_INT 34
15775: PUSH
15776: LD_INT 40
15778: PUSH
15779: LD_INT 48
15781: PUSH
15782: LD_INT 49
15784: PUSH
15785: LD_INT 50
15787: PUSH
15788: LD_INT 51
15790: PUSH
15791: LD_INT 52
15793: PUSH
15794: LD_INT 53
15796: PUSH
15797: LD_INT 54
15799: PUSH
15800: LD_INT 55
15802: PUSH
15803: LD_INT 56
15805: PUSH
15806: LD_INT 57
15808: PUSH
15809: LD_INT 58
15811: PUSH
15812: LD_INT 59
15814: PUSH
15815: LD_INT 60
15817: PUSH
15818: LD_INT 61
15820: PUSH
15821: LD_INT 62
15823: PUSH
15824: LD_INT 80
15826: PUSH
15827: LD_INT 82
15829: PUSH
15830: LD_INT 83
15832: PUSH
15833: LD_INT 84
15835: PUSH
15836: LD_INT 85
15838: PUSH
15839: LD_INT 86
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 16362
15897: LD_INT 2
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 16131
15905: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15906: LD_ADDR_VAR 0 4
15910: PUSH
15911: LD_INT 35
15913: PUSH
15914: LD_INT 45
15916: PUSH
15917: LD_INT 46
15919: PUSH
15920: LD_INT 47
15922: PUSH
15923: LD_INT 82
15925: PUSH
15926: LD_INT 83
15928: PUSH
15929: LD_INT 84
15931: PUSH
15932: LD_INT 85
15934: PUSH
15935: LD_INT 87
15937: PUSH
15938: LD_INT 70
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: LD_INT 11
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: LD_INT 4
15952: PUSH
15953: LD_INT 5
15955: PUSH
15956: LD_INT 6
15958: PUSH
15959: LD_INT 15
15961: PUSH
15962: LD_INT 18
15964: PUSH
15965: LD_INT 7
15967: PUSH
15968: LD_INT 17
15970: PUSH
15971: LD_INT 8
15973: PUSH
15974: LD_INT 20
15976: PUSH
15977: LD_INT 21
15979: PUSH
15980: LD_INT 22
15982: PUSH
15983: LD_INT 72
15985: PUSH
15986: LD_INT 26
15988: PUSH
15989: LD_INT 69
15991: PUSH
15992: LD_INT 39
15994: PUSH
15995: LD_INT 40
15997: PUSH
15998: LD_INT 41
16000: PUSH
16001: LD_INT 42
16003: PUSH
16004: LD_INT 43
16006: PUSH
16007: LD_INT 48
16009: PUSH
16010: LD_INT 49
16012: PUSH
16013: LD_INT 50
16015: PUSH
16016: LD_INT 51
16018: PUSH
16019: LD_INT 52
16021: PUSH
16022: LD_INT 53
16024: PUSH
16025: LD_INT 54
16027: PUSH
16028: LD_INT 55
16030: PUSH
16031: LD_INT 56
16033: PUSH
16034: LD_INT 60
16036: PUSH
16037: LD_INT 61
16039: PUSH
16040: LD_INT 62
16042: PUSH
16043: LD_INT 66
16045: PUSH
16046: LD_INT 67
16048: PUSH
16049: LD_INT 68
16051: PUSH
16052: LD_INT 81
16054: PUSH
16055: LD_INT 82
16057: PUSH
16058: LD_INT 83
16060: PUSH
16061: LD_INT 84
16063: PUSH
16064: LD_INT 85
16066: PUSH
16067: LD_INT 87
16069: PUSH
16070: LD_INT 88
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: ST_TO_ADDR
16129: GO 16362
16131: LD_INT 3
16133: DOUBLE
16134: EQUAL
16135: IFTRUE 16139
16137: GO 16361
16139: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16140: LD_ADDR_VAR 0 4
16144: PUSH
16145: LD_INT 46
16147: PUSH
16148: LD_INT 47
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 82
16159: PUSH
16160: LD_INT 83
16162: PUSH
16163: LD_INT 84
16165: PUSH
16166: LD_INT 85
16168: PUSH
16169: LD_INT 86
16171: PUSH
16172: LD_INT 11
16174: PUSH
16175: LD_INT 9
16177: PUSH
16178: LD_INT 20
16180: PUSH
16181: LD_INT 19
16183: PUSH
16184: LD_INT 21
16186: PUSH
16187: LD_INT 24
16189: PUSH
16190: LD_INT 22
16192: PUSH
16193: LD_INT 25
16195: PUSH
16196: LD_INT 28
16198: PUSH
16199: LD_INT 29
16201: PUSH
16202: LD_INT 30
16204: PUSH
16205: LD_INT 31
16207: PUSH
16208: LD_INT 37
16210: PUSH
16211: LD_INT 38
16213: PUSH
16214: LD_INT 32
16216: PUSH
16217: LD_INT 27
16219: PUSH
16220: LD_INT 33
16222: PUSH
16223: LD_INT 69
16225: PUSH
16226: LD_INT 39
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 40
16234: PUSH
16235: LD_INT 71
16237: PUSH
16238: LD_INT 23
16240: PUSH
16241: LD_INT 44
16243: PUSH
16244: LD_INT 48
16246: PUSH
16247: LD_INT 49
16249: PUSH
16250: LD_INT 50
16252: PUSH
16253: LD_INT 51
16255: PUSH
16256: LD_INT 52
16258: PUSH
16259: LD_INT 53
16261: PUSH
16262: LD_INT 54
16264: PUSH
16265: LD_INT 55
16267: PUSH
16268: LD_INT 56
16270: PUSH
16271: LD_INT 57
16273: PUSH
16274: LD_INT 58
16276: PUSH
16277: LD_INT 59
16279: PUSH
16280: LD_INT 63
16282: PUSH
16283: LD_INT 64
16285: PUSH
16286: LD_INT 65
16288: PUSH
16289: LD_INT 82
16291: PUSH
16292: LD_INT 83
16294: PUSH
16295: LD_INT 84
16297: PUSH
16298: LD_INT 85
16300: PUSH
16301: LD_INT 86
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: ST_TO_ADDR
16359: GO 16362
16361: POP
// if state > - 1 and state < 3 then
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 1
16369: NEG
16370: GREATER
16371: PUSH
16372: LD_VAR 0 3
16376: PUSH
16377: LD_INT 3
16379: LESS
16380: AND
16381: IFFALSE 16438
// for i in result do
16383: LD_ADDR_VAR 0 5
16387: PUSH
16388: LD_VAR 0 4
16392: PUSH
16393: FOR_IN
16394: IFFALSE 16436
// if GetTech ( i , side ) <> state then
16396: LD_VAR 0 5
16400: PPUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 321
16410: PUSH
16411: LD_VAR 0 3
16415: NONEQUAL
16416: IFFALSE 16434
// result := result diff i ;
16418: LD_ADDR_VAR 0 4
16422: PUSH
16423: LD_VAR 0 4
16427: PUSH
16428: LD_VAR 0 5
16432: DIFF
16433: ST_TO_ADDR
16434: GO 16393
16436: POP
16437: POP
// end ;
16438: LD_VAR 0 4
16442: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16443: LD_INT 0
16445: PPUSH
16446: PPUSH
16447: PPUSH
// result := true ;
16448: LD_ADDR_VAR 0 3
16452: PUSH
16453: LD_INT 1
16455: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16456: LD_ADDR_VAR 0 5
16460: PUSH
16461: LD_VAR 0 2
16465: PPUSH
16466: CALL_OW 480
16470: ST_TO_ADDR
// if not tmp then
16471: LD_VAR 0 5
16475: NOT
16476: IFFALSE 16480
// exit ;
16478: GO 16529
// for i in tmp do
16480: LD_ADDR_VAR 0 4
16484: PUSH
16485: LD_VAR 0 5
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16527
// if GetTech ( i , side ) <> state_researched then
16493: LD_VAR 0 4
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 321
16507: PUSH
16508: LD_INT 2
16510: NONEQUAL
16511: IFFALSE 16525
// begin result := false ;
16513: LD_ADDR_VAR 0 3
16517: PUSH
16518: LD_INT 0
16520: ST_TO_ADDR
// exit ;
16521: POP
16522: POP
16523: GO 16529
// end ;
16525: GO 16490
16527: POP
16528: POP
// end ;
16529: LD_VAR 0 3
16533: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16534: LD_INT 0
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
16543: PPUSH
16544: PPUSH
16545: PPUSH
16546: PPUSH
16547: PPUSH
16548: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16549: LD_VAR 0 1
16553: NOT
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 257
16564: PUSH
16565: LD_INT 9
16567: NONEQUAL
16568: OR
16569: IFFALSE 16573
// exit ;
16571: GO 17146
// side := GetSide ( unit ) ;
16573: LD_ADDR_VAR 0 9
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 255
16587: ST_TO_ADDR
// tech_space := tech_spacanom ;
16588: LD_ADDR_VAR 0 12
16592: PUSH
16593: LD_INT 29
16595: ST_TO_ADDR
// tech_time := tech_taurad ;
16596: LD_ADDR_VAR 0 13
16600: PUSH
16601: LD_INT 28
16603: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16604: LD_ADDR_VAR 0 11
16608: PUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 310
16618: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16619: LD_VAR 0 11
16623: PPUSH
16624: CALL_OW 247
16628: PUSH
16629: LD_INT 2
16631: EQUAL
16632: IFFALSE 16636
// exit ;
16634: GO 17146
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16636: LD_ADDR_VAR 0 8
16640: PUSH
16641: LD_INT 81
16643: PUSH
16644: LD_VAR 0 9
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 3
16655: PUSH
16656: LD_INT 21
16658: PUSH
16659: LD_INT 3
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
// if not tmp then
16679: LD_VAR 0 8
16683: NOT
16684: IFFALSE 16688
// exit ;
16686: GO 17146
// if in_unit then
16688: LD_VAR 0 11
16692: IFFALSE 16716
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16694: LD_ADDR_VAR 0 10
16698: PUSH
16699: LD_VAR 0 8
16703: PPUSH
16704: LD_VAR 0 11
16708: PPUSH
16709: CALL_OW 74
16713: ST_TO_ADDR
16714: GO 16736
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16716: LD_ADDR_VAR 0 10
16720: PUSH
16721: LD_VAR 0 8
16725: PPUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 74
16735: ST_TO_ADDR
// if not enemy then
16736: LD_VAR 0 10
16740: NOT
16741: IFFALSE 16745
// exit ;
16743: GO 17146
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16745: LD_VAR 0 11
16749: PUSH
16750: LD_VAR 0 11
16754: PPUSH
16755: LD_VAR 0 10
16759: PPUSH
16760: CALL_OW 296
16764: PUSH
16765: LD_INT 13
16767: GREATER
16768: AND
16769: PUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: LD_VAR 0 10
16779: PPUSH
16780: CALL_OW 296
16784: PUSH
16785: LD_INT 12
16787: GREATER
16788: OR
16789: IFFALSE 16793
// exit ;
16791: GO 17146
// missile := [ 1 ] ;
16793: LD_ADDR_VAR 0 14
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: EMPTY
16802: LIST
16803: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16804: LD_VAR 0 9
16808: PPUSH
16809: LD_VAR 0 12
16813: PPUSH
16814: CALL_OW 325
16818: IFFALSE 16847
// missile := Replace ( missile , missile + 1 , 2 ) ;
16820: LD_ADDR_VAR 0 14
16824: PUSH
16825: LD_VAR 0 14
16829: PPUSH
16830: LD_VAR 0 14
16834: PUSH
16835: LD_INT 1
16837: PLUS
16838: PPUSH
16839: LD_INT 2
16841: PPUSH
16842: CALL_OW 1
16846: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16847: LD_VAR 0 9
16851: PPUSH
16852: LD_VAR 0 13
16856: PPUSH
16857: CALL_OW 325
16861: PUSH
16862: LD_VAR 0 10
16866: PPUSH
16867: CALL_OW 255
16871: PPUSH
16872: LD_VAR 0 13
16876: PPUSH
16877: CALL_OW 325
16881: NOT
16882: AND
16883: IFFALSE 16912
// missile := Replace ( missile , missile + 1 , 3 ) ;
16885: LD_ADDR_VAR 0 14
16889: PUSH
16890: LD_VAR 0 14
16894: PPUSH
16895: LD_VAR 0 14
16899: PUSH
16900: LD_INT 1
16902: PLUS
16903: PPUSH
16904: LD_INT 3
16906: PPUSH
16907: CALL_OW 1
16911: ST_TO_ADDR
// if missile < 2 then
16912: LD_VAR 0 14
16916: PUSH
16917: LD_INT 2
16919: LESS
16920: IFFALSE 16924
// exit ;
16922: GO 17146
// x := GetX ( enemy ) ;
16924: LD_ADDR_VAR 0 4
16928: PUSH
16929: LD_VAR 0 10
16933: PPUSH
16934: CALL_OW 250
16938: ST_TO_ADDR
// y := GetY ( enemy ) ;
16939: LD_ADDR_VAR 0 5
16943: PUSH
16944: LD_VAR 0 10
16948: PPUSH
16949: CALL_OW 251
16953: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16954: LD_ADDR_VAR 0 6
16958: PUSH
16959: LD_VAR 0 4
16963: PUSH
16964: LD_INT 1
16966: NEG
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 12
16975: PLUS
16976: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16977: LD_ADDR_VAR 0 7
16981: PUSH
16982: LD_VAR 0 5
16986: PUSH
16987: LD_INT 1
16989: NEG
16990: PPUSH
16991: LD_INT 1
16993: PPUSH
16994: CALL_OW 12
16998: PLUS
16999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17000: LD_VAR 0 6
17004: PPUSH
17005: LD_VAR 0 7
17009: PPUSH
17010: CALL_OW 488
17014: NOT
17015: IFFALSE 17037
// begin _x := x ;
17017: LD_ADDR_VAR 0 6
17021: PUSH
17022: LD_VAR 0 4
17026: ST_TO_ADDR
// _y := y ;
17027: LD_ADDR_VAR 0 7
17031: PUSH
17032: LD_VAR 0 5
17036: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17037: LD_ADDR_VAR 0 3
17041: PUSH
17042: LD_INT 1
17044: PPUSH
17045: LD_VAR 0 14
17049: PPUSH
17050: CALL_OW 12
17054: ST_TO_ADDR
// case i of 1 :
17055: LD_VAR 0 3
17059: PUSH
17060: LD_INT 1
17062: DOUBLE
17063: EQUAL
17064: IFTRUE 17068
17066: GO 17085
17068: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17069: LD_VAR 0 1
17073: PPUSH
17074: LD_VAR 0 10
17078: PPUSH
17079: CALL_OW 115
17083: GO 17146
17085: LD_INT 2
17087: DOUBLE
17088: EQUAL
17089: IFTRUE 17093
17091: GO 17115
17093: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17094: LD_VAR 0 1
17098: PPUSH
17099: LD_VAR 0 6
17103: PPUSH
17104: LD_VAR 0 7
17108: PPUSH
17109: CALL_OW 153
17113: GO 17146
17115: LD_INT 3
17117: DOUBLE
17118: EQUAL
17119: IFTRUE 17123
17121: GO 17145
17123: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17124: LD_VAR 0 1
17128: PPUSH
17129: LD_VAR 0 6
17133: PPUSH
17134: LD_VAR 0 7
17138: PPUSH
17139: CALL_OW 154
17143: GO 17146
17145: POP
// end ;
17146: LD_VAR 0 2
17150: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17151: LD_INT 0
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
// if not unit or not building then
17159: LD_VAR 0 1
17163: NOT
17164: PUSH
17165: LD_VAR 0 2
17169: NOT
17170: OR
17171: IFFALSE 17175
// exit ;
17173: GO 17333
// x := GetX ( building ) ;
17175: LD_ADDR_VAR 0 5
17179: PUSH
17180: LD_VAR 0 2
17184: PPUSH
17185: CALL_OW 250
17189: ST_TO_ADDR
// y := GetY ( building ) ;
17190: LD_ADDR_VAR 0 6
17194: PUSH
17195: LD_VAR 0 2
17199: PPUSH
17200: CALL_OW 251
17204: ST_TO_ADDR
// for i = 0 to 5 do
17205: LD_ADDR_VAR 0 4
17209: PUSH
17210: DOUBLE
17211: LD_INT 0
17213: DEC
17214: ST_TO_ADDR
17215: LD_INT 5
17217: PUSH
17218: FOR_TO
17219: IFFALSE 17331
// begin _x := ShiftX ( x , i , 3 ) ;
17221: LD_ADDR_VAR 0 7
17225: PUSH
17226: LD_VAR 0 5
17230: PPUSH
17231: LD_VAR 0 4
17235: PPUSH
17236: LD_INT 3
17238: PPUSH
17239: CALL_OW 272
17243: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17244: LD_ADDR_VAR 0 8
17248: PUSH
17249: LD_VAR 0 6
17253: PPUSH
17254: LD_VAR 0 4
17258: PPUSH
17259: LD_INT 3
17261: PPUSH
17262: CALL_OW 273
17266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17267: LD_VAR 0 7
17271: PPUSH
17272: LD_VAR 0 8
17276: PPUSH
17277: CALL_OW 488
17281: NOT
17282: IFFALSE 17286
// continue ;
17284: GO 17218
// if HexInfo ( _x , _y ) = 0 then
17286: LD_VAR 0 7
17290: PPUSH
17291: LD_VAR 0 8
17295: PPUSH
17296: CALL_OW 428
17300: PUSH
17301: LD_INT 0
17303: EQUAL
17304: IFFALSE 17329
// begin ComMoveXY ( unit , _x , _y ) ;
17306: LD_VAR 0 1
17310: PPUSH
17311: LD_VAR 0 7
17315: PPUSH
17316: LD_VAR 0 8
17320: PPUSH
17321: CALL_OW 111
// exit ;
17325: POP
17326: POP
17327: GO 17333
// end ; end ;
17329: GO 17218
17331: POP
17332: POP
// end ;
17333: LD_VAR 0 3
17337: RET
// export function ScanBase ( side , base_area ) ; begin
17338: LD_INT 0
17340: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17341: LD_ADDR_VAR 0 3
17345: PUSH
17346: LD_VAR 0 2
17350: PPUSH
17351: LD_INT 81
17353: PUSH
17354: LD_VAR 0 1
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PPUSH
17363: CALL_OW 70
17367: ST_TO_ADDR
// end ;
17368: LD_VAR 0 3
17372: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17373: LD_INT 0
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
// result := false ;
17379: LD_ADDR_VAR 0 2
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// side := GetSide ( unit ) ;
17387: LD_ADDR_VAR 0 3
17391: PUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 255
17401: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17402: LD_ADDR_VAR 0 4
17406: PUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 248
17416: ST_TO_ADDR
// case nat of 1 :
17417: LD_VAR 0 4
17421: PUSH
17422: LD_INT 1
17424: DOUBLE
17425: EQUAL
17426: IFTRUE 17430
17428: GO 17441
17430: POP
// tech := tech_lassight ; 2 :
17431: LD_ADDR_VAR 0 5
17435: PUSH
17436: LD_INT 12
17438: ST_TO_ADDR
17439: GO 17480
17441: LD_INT 2
17443: DOUBLE
17444: EQUAL
17445: IFTRUE 17449
17447: GO 17460
17449: POP
// tech := tech_mortar ; 3 :
17450: LD_ADDR_VAR 0 5
17454: PUSH
17455: LD_INT 41
17457: ST_TO_ADDR
17458: GO 17480
17460: LD_INT 3
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 17479
17468: POP
// tech := tech_bazooka ; end ;
17469: LD_ADDR_VAR 0 5
17473: PUSH
17474: LD_INT 44
17476: ST_TO_ADDR
17477: GO 17480
17479: POP
// if Researched ( side , tech ) then
17480: LD_VAR 0 3
17484: PPUSH
17485: LD_VAR 0 5
17489: PPUSH
17490: CALL_OW 325
17494: IFFALSE 17521
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_INT 5
17503: PUSH
17504: LD_INT 8
17506: PUSH
17507: LD_INT 9
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PUSH
17515: LD_VAR 0 4
17519: ARRAY
17520: ST_TO_ADDR
// end ;
17521: LD_VAR 0 2
17525: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
17530: PPUSH
// if not mines then
17531: LD_VAR 0 2
17535: NOT
17536: IFFALSE 17540
// exit ;
17538: GO 17684
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17540: LD_ADDR_VAR 0 5
17544: PUSH
17545: LD_INT 81
17547: PUSH
17548: LD_VAR 0 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 3
17559: PUSH
17560: LD_INT 21
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: ST_TO_ADDR
// for i in mines do
17583: LD_ADDR_VAR 0 4
17587: PUSH
17588: LD_VAR 0 2
17592: PUSH
17593: FOR_IN
17594: IFFALSE 17682
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17596: LD_VAR 0 4
17600: PUSH
17601: LD_INT 1
17603: ARRAY
17604: PPUSH
17605: LD_VAR 0 4
17609: PUSH
17610: LD_INT 2
17612: ARRAY
17613: PPUSH
17614: CALL_OW 458
17618: NOT
17619: IFFALSE 17623
// continue ;
17621: GO 17593
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17623: LD_VAR 0 4
17627: PUSH
17628: LD_INT 1
17630: ARRAY
17631: PPUSH
17632: LD_VAR 0 4
17636: PUSH
17637: LD_INT 2
17639: ARRAY
17640: PPUSH
17641: CALL_OW 428
17645: PUSH
17646: LD_VAR 0 5
17650: IN
17651: IFFALSE 17680
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17653: LD_VAR 0 4
17657: PUSH
17658: LD_INT 1
17660: ARRAY
17661: PPUSH
17662: LD_VAR 0 4
17666: PUSH
17667: LD_INT 2
17669: ARRAY
17670: PPUSH
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 456
// end ;
17680: GO 17593
17682: POP
17683: POP
// end ;
17684: LD_VAR 0 3
17688: RET
// export function Count ( array ) ; begin
17689: LD_INT 0
17691: PPUSH
// result := array + 0 ;
17692: LD_ADDR_VAR 0 2
17696: PUSH
17697: LD_VAR 0 1
17701: PUSH
17702: LD_INT 0
17704: PLUS
17705: ST_TO_ADDR
// end ;
17706: LD_VAR 0 2
17710: RET
// export function IsEmpty ( building ) ; begin
17711: LD_INT 0
17713: PPUSH
// if not building then
17714: LD_VAR 0 1
17718: NOT
17719: IFFALSE 17723
// exit ;
17721: GO 17766
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17723: LD_ADDR_VAR 0 2
17727: PUSH
17728: LD_VAR 0 1
17732: PUSH
17733: LD_INT 22
17735: PUSH
17736: LD_VAR 0 1
17740: PPUSH
17741: CALL_OW 255
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 58
17752: PUSH
17753: EMPTY
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 69
17764: IN
17765: ST_TO_ADDR
// end ;
17766: LD_VAR 0 2
17770: RET
// export function IsNotFull ( building ) ; var places ; begin
17771: LD_INT 0
17773: PPUSH
17774: PPUSH
// if not building then
17775: LD_VAR 0 1
17779: NOT
17780: IFFALSE 17784
// exit ;
17782: GO 17812
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17784: LD_ADDR_VAR 0 2
17788: PUSH
17789: LD_VAR 0 1
17793: PPUSH
17794: LD_INT 3
17796: PUSH
17797: LD_INT 62
17799: PUSH
17800: EMPTY
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 72
17811: ST_TO_ADDR
// end ;
17812: LD_VAR 0 2
17816: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17817: LD_INT 0
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
// tmp := [ ] ;
17823: LD_ADDR_VAR 0 3
17827: PUSH
17828: EMPTY
17829: ST_TO_ADDR
// list := [ ] ;
17830: LD_ADDR_VAR 0 5
17834: PUSH
17835: EMPTY
17836: ST_TO_ADDR
// for i = 16 to 25 do
17837: LD_ADDR_VAR 0 4
17841: PUSH
17842: DOUBLE
17843: LD_INT 16
17845: DEC
17846: ST_TO_ADDR
17847: LD_INT 25
17849: PUSH
17850: FOR_TO
17851: IFFALSE 17924
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 22
17865: PUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 255
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 91
17882: PUSH
17883: LD_VAR 0 1
17887: PUSH
17888: LD_INT 6
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 30
17898: PUSH
17899: LD_VAR 0 4
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ADD
17921: ST_TO_ADDR
17922: GO 17850
17924: POP
17925: POP
// for i = 1 to tmp do
17926: LD_ADDR_VAR 0 4
17930: PUSH
17931: DOUBLE
17932: LD_INT 1
17934: DEC
17935: ST_TO_ADDR
17936: LD_VAR 0 3
17940: PUSH
17941: FOR_TO
17942: IFFALSE 18030
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17944: LD_ADDR_VAR 0 5
17948: PUSH
17949: LD_VAR 0 5
17953: PUSH
17954: LD_VAR 0 3
17958: PUSH
17959: LD_VAR 0 4
17963: ARRAY
17964: PPUSH
17965: CALL_OW 266
17969: PUSH
17970: LD_VAR 0 3
17974: PUSH
17975: LD_VAR 0 4
17979: ARRAY
17980: PPUSH
17981: CALL_OW 250
17985: PUSH
17986: LD_VAR 0 3
17990: PUSH
17991: LD_VAR 0 4
17995: ARRAY
17996: PPUSH
17997: CALL_OW 251
18001: PUSH
18002: LD_VAR 0 3
18006: PUSH
18007: LD_VAR 0 4
18011: ARRAY
18012: PPUSH
18013: CALL_OW 254
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: ADD
18027: ST_TO_ADDR
18028: GO 17941
18030: POP
18031: POP
// result := list ;
18032: LD_ADDR_VAR 0 2
18036: PUSH
18037: LD_VAR 0 5
18041: ST_TO_ADDR
// end ;
18042: LD_VAR 0 2
18046: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18047: LD_INT 0
18049: PPUSH
18050: PPUSH
18051: PPUSH
18052: PPUSH
18053: PPUSH
18054: PPUSH
18055: PPUSH
// if not factory then
18056: LD_VAR 0 1
18060: NOT
18061: IFFALSE 18065
// exit ;
18063: GO 18658
// if control = control_apeman then
18065: LD_VAR 0 4
18069: PUSH
18070: LD_INT 5
18072: EQUAL
18073: IFFALSE 18182
// begin tmp := UnitsInside ( factory ) ;
18075: LD_ADDR_VAR 0 8
18079: PUSH
18080: LD_VAR 0 1
18084: PPUSH
18085: CALL_OW 313
18089: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18090: LD_VAR 0 8
18094: PPUSH
18095: LD_INT 25
18097: PUSH
18098: LD_INT 12
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 72
18109: NOT
18110: IFFALSE 18120
// control := control_manual ;
18112: LD_ADDR_VAR 0 4
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18120: LD_ADDR_VAR 0 8
18124: PUSH
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL 17817 0 1
18134: ST_TO_ADDR
// if tmp then
18135: LD_VAR 0 8
18139: IFFALSE 18182
// begin for i in tmp do
18141: LD_ADDR_VAR 0 7
18145: PUSH
18146: LD_VAR 0 8
18150: PUSH
18151: FOR_IN
18152: IFFALSE 18180
// if i [ 1 ] = b_ext_radio then
18154: LD_VAR 0 7
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PUSH
18163: LD_INT 22
18165: EQUAL
18166: IFFALSE 18178
// begin control := control_remote ;
18168: LD_ADDR_VAR 0 4
18172: PUSH
18173: LD_INT 2
18175: ST_TO_ADDR
// break ;
18176: GO 18180
// end ;
18178: GO 18151
18180: POP
18181: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_VAR 0 2
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_VAR 0 4
18201: PPUSH
18202: LD_VAR 0 5
18206: PPUSH
18207: CALL_OW 448
18211: IFFALSE 18246
// begin result := [ chassis , engine , control , weapon ] ;
18213: LD_ADDR_VAR 0 6
18217: PUSH
18218: LD_VAR 0 2
18222: PUSH
18223: LD_VAR 0 3
18227: PUSH
18228: LD_VAR 0 4
18232: PUSH
18233: LD_VAR 0 5
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: ST_TO_ADDR
// exit ;
18244: GO 18658
// end ; _chassis := AvailableChassisList ( factory ) ;
18246: LD_ADDR_VAR 0 9
18250: PUSH
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 475
18260: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18261: LD_ADDR_VAR 0 11
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 476
18275: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18276: LD_ADDR_VAR 0 12
18280: PUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 477
18290: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18291: LD_ADDR_VAR 0 10
18295: PUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 478
18305: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18306: LD_VAR 0 9
18310: NOT
18311: PUSH
18312: LD_VAR 0 11
18316: NOT
18317: OR
18318: PUSH
18319: LD_VAR 0 12
18323: NOT
18324: OR
18325: PUSH
18326: LD_VAR 0 10
18330: NOT
18331: OR
18332: IFFALSE 18367
// begin result := [ chassis , engine , control , weapon ] ;
18334: LD_ADDR_VAR 0 6
18338: PUSH
18339: LD_VAR 0 2
18343: PUSH
18344: LD_VAR 0 3
18348: PUSH
18349: LD_VAR 0 4
18353: PUSH
18354: LD_VAR 0 5
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: ST_TO_ADDR
// exit ;
18365: GO 18658
// end ; if not chassis in _chassis then
18367: LD_VAR 0 2
18371: PUSH
18372: LD_VAR 0 9
18376: IN
18377: NOT
18378: IFFALSE 18404
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_VAR 0 9
18389: PUSH
18390: LD_INT 1
18392: PPUSH
18393: LD_VAR 0 9
18397: PPUSH
18398: CALL_OW 12
18402: ARRAY
18403: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18404: LD_VAR 0 2
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: CALL 18663 0 2
18418: NOT
18419: IFFALSE 18478
// repeat engine := _engine [ 1 ] ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 11
18430: PUSH
18431: LD_INT 1
18433: ARRAY
18434: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18435: LD_ADDR_VAR 0 11
18439: PUSH
18440: LD_VAR 0 11
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: CALL_OW 3
18452: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18453: LD_VAR 0 2
18457: PPUSH
18458: LD_VAR 0 3
18462: PPUSH
18463: CALL 18663 0 2
18467: PUSH
18468: LD_VAR 0 11
18472: PUSH
18473: EMPTY
18474: EQUAL
18475: OR
18476: IFFALSE 18421
// if not control in _control then
18478: LD_VAR 0 4
18482: PUSH
18483: LD_VAR 0 12
18487: IN
18488: NOT
18489: IFFALSE 18515
// control := _control [ rand ( 1 , _control ) ] ;
18491: LD_ADDR_VAR 0 4
18495: PUSH
18496: LD_VAR 0 12
18500: PUSH
18501: LD_INT 1
18503: PPUSH
18504: LD_VAR 0 12
18508: PPUSH
18509: CALL_OW 12
18513: ARRAY
18514: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18515: LD_VAR 0 2
18519: PPUSH
18520: LD_VAR 0 5
18524: PPUSH
18525: CALL 18883 0 2
18529: NOT
18530: IFFALSE 18589
// repeat weapon := _weapon [ 1 ] ;
18532: LD_ADDR_VAR 0 5
18536: PUSH
18537: LD_VAR 0 10
18541: PUSH
18542: LD_INT 1
18544: ARRAY
18545: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18546: LD_ADDR_VAR 0 10
18550: PUSH
18551: LD_VAR 0 10
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: CALL_OW 3
18563: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18564: LD_VAR 0 2
18568: PPUSH
18569: LD_VAR 0 5
18573: PPUSH
18574: CALL 18883 0 2
18578: PUSH
18579: LD_VAR 0 10
18583: PUSH
18584: EMPTY
18585: EQUAL
18586: OR
18587: IFFALSE 18532
// result := [ ] ;
18589: LD_ADDR_VAR 0 6
18593: PUSH
18594: EMPTY
18595: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_VAR 0 2
18605: PPUSH
18606: LD_VAR 0 3
18610: PPUSH
18611: LD_VAR 0 4
18615: PPUSH
18616: LD_VAR 0 5
18620: PPUSH
18621: CALL_OW 448
18625: IFFALSE 18658
// result := [ chassis , engine , control , weapon ] ;
18627: LD_ADDR_VAR 0 6
18631: PUSH
18632: LD_VAR 0 2
18636: PUSH
18637: LD_VAR 0 3
18641: PUSH
18642: LD_VAR 0 4
18646: PUSH
18647: LD_VAR 0 5
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: ST_TO_ADDR
// end ;
18658: LD_VAR 0 6
18662: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18663: LD_INT 0
18665: PPUSH
// if not chassis or not engine then
18666: LD_VAR 0 1
18670: NOT
18671: PUSH
18672: LD_VAR 0 2
18676: NOT
18677: OR
18678: IFFALSE 18682
// exit ;
18680: GO 18878
// case engine of engine_solar :
18682: LD_VAR 0 2
18686: PUSH
18687: LD_INT 2
18689: DOUBLE
18690: EQUAL
18691: IFTRUE 18695
18693: GO 18733
18695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18696: LD_ADDR_VAR 0 3
18700: PUSH
18701: LD_INT 11
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: LD_INT 13
18709: PUSH
18710: LD_INT 14
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 3
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: ST_TO_ADDR
18731: GO 18862
18733: LD_INT 1
18735: DOUBLE
18736: EQUAL
18737: IFTRUE 18741
18739: GO 18803
18741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18742: LD_ADDR_VAR 0 3
18746: PUSH
18747: LD_INT 11
18749: PUSH
18750: LD_INT 12
18752: PUSH
18753: LD_INT 13
18755: PUSH
18756: LD_INT 14
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: LD_INT 3
18767: PUSH
18768: LD_INT 4
18770: PUSH
18771: LD_INT 5
18773: PUSH
18774: LD_INT 21
18776: PUSH
18777: LD_INT 23
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_INT 24
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: ST_TO_ADDR
18801: GO 18862
18803: LD_INT 3
18805: DOUBLE
18806: EQUAL
18807: IFTRUE 18811
18809: GO 18861
18811: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18812: LD_ADDR_VAR 0 3
18816: PUSH
18817: LD_INT 13
18819: PUSH
18820: LD_INT 14
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 3
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: LD_INT 5
18834: PUSH
18835: LD_INT 21
18837: PUSH
18838: LD_INT 22
18840: PUSH
18841: LD_INT 23
18843: PUSH
18844: LD_INT 24
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: ST_TO_ADDR
18859: GO 18862
18861: POP
// result := ( chassis in result ) ;
18862: LD_ADDR_VAR 0 3
18866: PUSH
18867: LD_VAR 0 1
18871: PUSH
18872: LD_VAR 0 3
18876: IN
18877: ST_TO_ADDR
// end ;
18878: LD_VAR 0 3
18882: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18883: LD_INT 0
18885: PPUSH
// if not chassis or not weapon then
18886: LD_VAR 0 1
18890: NOT
18891: PUSH
18892: LD_VAR 0 2
18896: NOT
18897: OR
18898: IFFALSE 18902
// exit ;
18900: GO 19962
// case weapon of us_machine_gun :
18902: LD_VAR 0 2
18906: PUSH
18907: LD_INT 2
18909: DOUBLE
18910: EQUAL
18911: IFTRUE 18915
18913: GO 18945
18915: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18916: LD_ADDR_VAR 0 3
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: LD_INT 3
18929: PUSH
18930: LD_INT 4
18932: PUSH
18933: LD_INT 5
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: ST_TO_ADDR
18943: GO 19946
18945: LD_INT 3
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18983
18953: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18954: LD_ADDR_VAR 0 3
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: LD_INT 3
18967: PUSH
18968: LD_INT 4
18970: PUSH
18971: LD_INT 5
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: ST_TO_ADDR
18981: GO 19946
18983: LD_INT 11
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 19021
18991: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18992: LD_ADDR_VAR 0 3
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: LD_INT 3
19005: PUSH
19006: LD_INT 4
19008: PUSH
19009: LD_INT 5
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: ST_TO_ADDR
19019: GO 19946
19021: LD_INT 4
19023: DOUBLE
19024: EQUAL
19025: IFTRUE 19029
19027: GO 19055
19029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19030: LD_ADDR_VAR 0 3
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 3
19040: PUSH
19041: LD_INT 4
19043: PUSH
19044: LD_INT 5
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: ST_TO_ADDR
19053: GO 19946
19055: LD_INT 5
19057: DOUBLE
19058: EQUAL
19059: IFTRUE 19063
19061: GO 19089
19063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19064: LD_ADDR_VAR 0 3
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 3
19074: PUSH
19075: LD_INT 4
19077: PUSH
19078: LD_INT 5
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: ST_TO_ADDR
19087: GO 19946
19089: LD_INT 9
19091: DOUBLE
19092: EQUAL
19093: IFTRUE 19097
19095: GO 19123
19097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19098: LD_ADDR_VAR 0 3
19102: PUSH
19103: LD_INT 2
19105: PUSH
19106: LD_INT 3
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: ST_TO_ADDR
19121: GO 19946
19123: LD_INT 7
19125: DOUBLE
19126: EQUAL
19127: IFTRUE 19131
19129: GO 19157
19131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19132: LD_ADDR_VAR 0 3
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: LD_INT 3
19142: PUSH
19143: LD_INT 4
19145: PUSH
19146: LD_INT 5
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: ST_TO_ADDR
19155: GO 19946
19157: LD_INT 12
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19191
19165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19166: LD_ADDR_VAR 0 3
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 4
19179: PUSH
19180: LD_INT 5
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: ST_TO_ADDR
19189: GO 19946
19191: LD_INT 13
19193: DOUBLE
19194: EQUAL
19195: IFTRUE 19199
19197: GO 19225
19199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19200: LD_ADDR_VAR 0 3
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: LD_INT 3
19210: PUSH
19211: LD_INT 4
19213: PUSH
19214: LD_INT 5
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: ST_TO_ADDR
19223: GO 19946
19225: LD_INT 14
19227: DOUBLE
19228: EQUAL
19229: IFTRUE 19233
19231: GO 19251
19233: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19234: LD_ADDR_VAR 0 3
19238: PUSH
19239: LD_INT 4
19241: PUSH
19242: LD_INT 5
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: ST_TO_ADDR
19249: GO 19946
19251: LD_INT 6
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19277
19259: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19260: LD_ADDR_VAR 0 3
19264: PUSH
19265: LD_INT 4
19267: PUSH
19268: LD_INT 5
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: ST_TO_ADDR
19275: GO 19946
19277: LD_INT 10
19279: DOUBLE
19280: EQUAL
19281: IFTRUE 19285
19283: GO 19303
19285: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19286: LD_ADDR_VAR 0 3
19290: PUSH
19291: LD_INT 4
19293: PUSH
19294: LD_INT 5
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: ST_TO_ADDR
19301: GO 19946
19303: LD_INT 22
19305: DOUBLE
19306: EQUAL
19307: IFTRUE 19311
19309: GO 19337
19311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19312: LD_ADDR_VAR 0 3
19316: PUSH
19317: LD_INT 11
19319: PUSH
19320: LD_INT 12
19322: PUSH
19323: LD_INT 13
19325: PUSH
19326: LD_INT 14
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: ST_TO_ADDR
19335: GO 19946
19337: LD_INT 23
19339: DOUBLE
19340: EQUAL
19341: IFTRUE 19345
19343: GO 19371
19345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19346: LD_ADDR_VAR 0 3
19350: PUSH
19351: LD_INT 11
19353: PUSH
19354: LD_INT 12
19356: PUSH
19357: LD_INT 13
19359: PUSH
19360: LD_INT 14
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: ST_TO_ADDR
19369: GO 19946
19371: LD_INT 24
19373: DOUBLE
19374: EQUAL
19375: IFTRUE 19379
19377: GO 19405
19379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19380: LD_ADDR_VAR 0 3
19384: PUSH
19385: LD_INT 11
19387: PUSH
19388: LD_INT 12
19390: PUSH
19391: LD_INT 13
19393: PUSH
19394: LD_INT 14
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: ST_TO_ADDR
19403: GO 19946
19405: LD_INT 30
19407: DOUBLE
19408: EQUAL
19409: IFTRUE 19413
19411: GO 19439
19413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19414: LD_ADDR_VAR 0 3
19418: PUSH
19419: LD_INT 11
19421: PUSH
19422: LD_INT 12
19424: PUSH
19425: LD_INT 13
19427: PUSH
19428: LD_INT 14
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: ST_TO_ADDR
19437: GO 19946
19439: LD_INT 25
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19465
19447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19448: LD_ADDR_VAR 0 3
19452: PUSH
19453: LD_INT 13
19455: PUSH
19456: LD_INT 14
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: ST_TO_ADDR
19463: GO 19946
19465: LD_INT 27
19467: DOUBLE
19468: EQUAL
19469: IFTRUE 19473
19471: GO 19491
19473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: LD_INT 13
19481: PUSH
19482: LD_INT 14
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: ST_TO_ADDR
19489: GO 19946
19491: LD_INT 92
19493: DOUBLE
19494: EQUAL
19495: IFTRUE 19499
19497: GO 19525
19499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19500: LD_ADDR_VAR 0 3
19504: PUSH
19505: LD_INT 11
19507: PUSH
19508: LD_INT 12
19510: PUSH
19511: LD_INT 13
19513: PUSH
19514: LD_INT 14
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: ST_TO_ADDR
19523: GO 19946
19525: LD_INT 28
19527: DOUBLE
19528: EQUAL
19529: IFTRUE 19533
19531: GO 19551
19533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: LD_INT 13
19541: PUSH
19542: LD_INT 14
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: ST_TO_ADDR
19549: GO 19946
19551: LD_INT 29
19553: DOUBLE
19554: EQUAL
19555: IFTRUE 19559
19557: GO 19577
19559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19560: LD_ADDR_VAR 0 3
19564: PUSH
19565: LD_INT 13
19567: PUSH
19568: LD_INT 14
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: ST_TO_ADDR
19575: GO 19946
19577: LD_INT 31
19579: DOUBLE
19580: EQUAL
19581: IFTRUE 19585
19583: GO 19603
19585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19586: LD_ADDR_VAR 0 3
19590: PUSH
19591: LD_INT 13
19593: PUSH
19594: LD_INT 14
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: ST_TO_ADDR
19601: GO 19946
19603: LD_INT 26
19605: DOUBLE
19606: EQUAL
19607: IFTRUE 19611
19609: GO 19629
19611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19612: LD_ADDR_VAR 0 3
19616: PUSH
19617: LD_INT 13
19619: PUSH
19620: LD_INT 14
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: ST_TO_ADDR
19627: GO 19946
19629: LD_INT 42
19631: DOUBLE
19632: EQUAL
19633: IFTRUE 19637
19635: GO 19663
19637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19638: LD_ADDR_VAR 0 3
19642: PUSH
19643: LD_INT 21
19645: PUSH
19646: LD_INT 22
19648: PUSH
19649: LD_INT 23
19651: PUSH
19652: LD_INT 24
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: ST_TO_ADDR
19661: GO 19946
19663: LD_INT 43
19665: DOUBLE
19666: EQUAL
19667: IFTRUE 19671
19669: GO 19697
19671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19672: LD_ADDR_VAR 0 3
19676: PUSH
19677: LD_INT 21
19679: PUSH
19680: LD_INT 22
19682: PUSH
19683: LD_INT 23
19685: PUSH
19686: LD_INT 24
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: ST_TO_ADDR
19695: GO 19946
19697: LD_INT 44
19699: DOUBLE
19700: EQUAL
19701: IFTRUE 19705
19703: GO 19731
19705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19706: LD_ADDR_VAR 0 3
19710: PUSH
19711: LD_INT 21
19713: PUSH
19714: LD_INT 22
19716: PUSH
19717: LD_INT 23
19719: PUSH
19720: LD_INT 24
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: ST_TO_ADDR
19729: GO 19946
19731: LD_INT 45
19733: DOUBLE
19734: EQUAL
19735: IFTRUE 19739
19737: GO 19765
19739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19740: LD_ADDR_VAR 0 3
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_INT 23
19753: PUSH
19754: LD_INT 24
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: ST_TO_ADDR
19763: GO 19946
19765: LD_INT 49
19767: DOUBLE
19768: EQUAL
19769: IFTRUE 19773
19771: GO 19799
19773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_INT 21
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_INT 23
19787: PUSH
19788: LD_INT 24
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: ST_TO_ADDR
19797: GO 19946
19799: LD_INT 51
19801: DOUBLE
19802: EQUAL
19803: IFTRUE 19807
19805: GO 19833
19807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19808: LD_ADDR_VAR 0 3
19812: PUSH
19813: LD_INT 21
19815: PUSH
19816: LD_INT 22
19818: PUSH
19819: LD_INT 23
19821: PUSH
19822: LD_INT 24
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: ST_TO_ADDR
19831: GO 19946
19833: LD_INT 52
19835: DOUBLE
19836: EQUAL
19837: IFTRUE 19841
19839: GO 19867
19841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19842: LD_ADDR_VAR 0 3
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 22
19852: PUSH
19853: LD_INT 23
19855: PUSH
19856: LD_INT 24
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: ST_TO_ADDR
19865: GO 19946
19867: LD_INT 53
19869: DOUBLE
19870: EQUAL
19871: IFTRUE 19875
19873: GO 19893
19875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19876: LD_ADDR_VAR 0 3
19880: PUSH
19881: LD_INT 23
19883: PUSH
19884: LD_INT 24
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: ST_TO_ADDR
19891: GO 19946
19893: LD_INT 46
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19919
19901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_INT 23
19909: PUSH
19910: LD_INT 24
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: ST_TO_ADDR
19917: GO 19946
19919: LD_INT 47
19921: DOUBLE
19922: EQUAL
19923: IFTRUE 19927
19925: GO 19945
19927: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19928: LD_ADDR_VAR 0 3
19932: PUSH
19933: LD_INT 23
19935: PUSH
19936: LD_INT 24
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: ST_TO_ADDR
19943: GO 19946
19945: POP
// result := ( chassis in result ) ;
19946: LD_ADDR_VAR 0 3
19950: PUSH
19951: LD_VAR 0 1
19955: PUSH
19956: LD_VAR 0 3
19960: IN
19961: ST_TO_ADDR
// end ;
19962: LD_VAR 0 3
19966: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19967: LD_INT 0
19969: PPUSH
19970: PPUSH
19971: PPUSH
19972: PPUSH
19973: PPUSH
19974: PPUSH
19975: PPUSH
// result := array ;
19976: LD_ADDR_VAR 0 5
19980: PUSH
19981: LD_VAR 0 1
19985: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19986: LD_VAR 0 1
19990: NOT
19991: PUSH
19992: LD_VAR 0 2
19996: NOT
19997: OR
19998: PUSH
19999: LD_VAR 0 3
20003: NOT
20004: OR
20005: PUSH
20006: LD_VAR 0 2
20010: PUSH
20011: LD_VAR 0 1
20015: GREATER
20016: OR
20017: PUSH
20018: LD_VAR 0 3
20022: PUSH
20023: LD_VAR 0 1
20027: GREATER
20028: OR
20029: IFFALSE 20033
// exit ;
20031: GO 20329
// if direction then
20033: LD_VAR 0 4
20037: IFFALSE 20101
// begin d := 1 ;
20039: LD_ADDR_VAR 0 9
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if i_from > i_to then
20047: LD_VAR 0 2
20051: PUSH
20052: LD_VAR 0 3
20056: GREATER
20057: IFFALSE 20083
// length := ( array - i_from ) + i_to else
20059: LD_ADDR_VAR 0 11
20063: PUSH
20064: LD_VAR 0 1
20068: PUSH
20069: LD_VAR 0 2
20073: MINUS
20074: PUSH
20075: LD_VAR 0 3
20079: PLUS
20080: ST_TO_ADDR
20081: GO 20099
// length := i_to - i_from ;
20083: LD_ADDR_VAR 0 11
20087: PUSH
20088: LD_VAR 0 3
20092: PUSH
20093: LD_VAR 0 2
20097: MINUS
20098: ST_TO_ADDR
// end else
20099: GO 20162
// begin d := - 1 ;
20101: LD_ADDR_VAR 0 9
20105: PUSH
20106: LD_INT 1
20108: NEG
20109: ST_TO_ADDR
// if i_from > i_to then
20110: LD_VAR 0 2
20114: PUSH
20115: LD_VAR 0 3
20119: GREATER
20120: IFFALSE 20140
// length := i_from - i_to else
20122: LD_ADDR_VAR 0 11
20126: PUSH
20127: LD_VAR 0 2
20131: PUSH
20132: LD_VAR 0 3
20136: MINUS
20137: ST_TO_ADDR
20138: GO 20162
// length := ( array - i_to ) + i_from ;
20140: LD_ADDR_VAR 0 11
20144: PUSH
20145: LD_VAR 0 1
20149: PUSH
20150: LD_VAR 0 3
20154: MINUS
20155: PUSH
20156: LD_VAR 0 2
20160: PLUS
20161: ST_TO_ADDR
// end ; if not length then
20162: LD_VAR 0 11
20166: NOT
20167: IFFALSE 20171
// exit ;
20169: GO 20329
// tmp := array ;
20171: LD_ADDR_VAR 0 10
20175: PUSH
20176: LD_VAR 0 1
20180: ST_TO_ADDR
// for i = 1 to length do
20181: LD_ADDR_VAR 0 6
20185: PUSH
20186: DOUBLE
20187: LD_INT 1
20189: DEC
20190: ST_TO_ADDR
20191: LD_VAR 0 11
20195: PUSH
20196: FOR_TO
20197: IFFALSE 20317
// begin for j = 1 to array do
20199: LD_ADDR_VAR 0 7
20203: PUSH
20204: DOUBLE
20205: LD_INT 1
20207: DEC
20208: ST_TO_ADDR
20209: LD_VAR 0 1
20213: PUSH
20214: FOR_TO
20215: IFFALSE 20303
// begin k := j + d ;
20217: LD_ADDR_VAR 0 8
20221: PUSH
20222: LD_VAR 0 7
20226: PUSH
20227: LD_VAR 0 9
20231: PLUS
20232: ST_TO_ADDR
// if k > array then
20233: LD_VAR 0 8
20237: PUSH
20238: LD_VAR 0 1
20242: GREATER
20243: IFFALSE 20253
// k := 1 ;
20245: LD_ADDR_VAR 0 8
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if not k then
20253: LD_VAR 0 8
20257: NOT
20258: IFFALSE 20270
// k := array ;
20260: LD_ADDR_VAR 0 8
20264: PUSH
20265: LD_VAR 0 1
20269: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20270: LD_ADDR_VAR 0 10
20274: PUSH
20275: LD_VAR 0 10
20279: PPUSH
20280: LD_VAR 0 8
20284: PPUSH
20285: LD_VAR 0 1
20289: PUSH
20290: LD_VAR 0 7
20294: ARRAY
20295: PPUSH
20296: CALL_OW 1
20300: ST_TO_ADDR
// end ;
20301: GO 20214
20303: POP
20304: POP
// array := tmp ;
20305: LD_ADDR_VAR 0 1
20309: PUSH
20310: LD_VAR 0 10
20314: ST_TO_ADDR
// end ;
20315: GO 20196
20317: POP
20318: POP
// result := array ;
20319: LD_ADDR_VAR 0 5
20323: PUSH
20324: LD_VAR 0 1
20328: ST_TO_ADDR
// end ;
20329: LD_VAR 0 5
20333: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
// result := 0 ;
20338: LD_ADDR_VAR 0 3
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
// if not array or not value in array then
20346: LD_VAR 0 1
20350: NOT
20351: PUSH
20352: LD_VAR 0 2
20356: PUSH
20357: LD_VAR 0 1
20361: IN
20362: NOT
20363: OR
20364: IFFALSE 20368
// exit ;
20366: GO 20422
// for i = 1 to array do
20368: LD_ADDR_VAR 0 4
20372: PUSH
20373: DOUBLE
20374: LD_INT 1
20376: DEC
20377: ST_TO_ADDR
20378: LD_VAR 0 1
20382: PUSH
20383: FOR_TO
20384: IFFALSE 20420
// if value = array [ i ] then
20386: LD_VAR 0 2
20390: PUSH
20391: LD_VAR 0 1
20395: PUSH
20396: LD_VAR 0 4
20400: ARRAY
20401: EQUAL
20402: IFFALSE 20418
// begin result := i ;
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: LD_VAR 0 4
20413: ST_TO_ADDR
// exit ;
20414: POP
20415: POP
20416: GO 20422
// end ;
20418: GO 20383
20420: POP
20421: POP
// end ;
20422: LD_VAR 0 3
20426: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20427: LD_INT 0
20429: PPUSH
// vc_chassis := chassis ;
20430: LD_ADDR_OWVAR 37
20434: PUSH
20435: LD_VAR 0 1
20439: ST_TO_ADDR
// vc_engine := engine ;
20440: LD_ADDR_OWVAR 39
20444: PUSH
20445: LD_VAR 0 2
20449: ST_TO_ADDR
// vc_control := control ;
20450: LD_ADDR_OWVAR 38
20454: PUSH
20455: LD_VAR 0 3
20459: ST_TO_ADDR
// vc_weapon := weapon ;
20460: LD_ADDR_OWVAR 40
20464: PUSH
20465: LD_VAR 0 4
20469: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20470: LD_ADDR_OWVAR 41
20474: PUSH
20475: LD_VAR 0 5
20479: ST_TO_ADDR
// end ;
20480: LD_VAR 0 6
20484: RET
// export function WantPlant ( unit ) ; var task ; begin
20485: LD_INT 0
20487: PPUSH
20488: PPUSH
// result := false ;
20489: LD_ADDR_VAR 0 2
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20497: LD_ADDR_VAR 0 3
20501: PUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: CALL_OW 437
20511: ST_TO_ADDR
// if task then
20512: LD_VAR 0 3
20516: IFFALSE 20544
// if task [ 1 ] [ 1 ] = p then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 1
20525: ARRAY
20526: PUSH
20527: LD_INT 1
20529: ARRAY
20530: PUSH
20531: LD_STRING p
20533: EQUAL
20534: IFFALSE 20544
// result := true ;
20536: LD_ADDR_VAR 0 2
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// end ;
20544: LD_VAR 0 2
20548: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20549: LD_INT 0
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
// if pos < 1 then
20555: LD_VAR 0 2
20559: PUSH
20560: LD_INT 1
20562: LESS
20563: IFFALSE 20567
// exit ;
20565: GO 20870
// if pos = 1 then
20567: LD_VAR 0 2
20571: PUSH
20572: LD_INT 1
20574: EQUAL
20575: IFFALSE 20608
// result := Replace ( arr , pos [ 1 ] , value ) else
20577: LD_ADDR_VAR 0 4
20581: PUSH
20582: LD_VAR 0 1
20586: PPUSH
20587: LD_VAR 0 2
20591: PUSH
20592: LD_INT 1
20594: ARRAY
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: CALL_OW 1
20605: ST_TO_ADDR
20606: GO 20870
// begin tmp := arr ;
20608: LD_ADDR_VAR 0 6
20612: PUSH
20613: LD_VAR 0 1
20617: ST_TO_ADDR
// s_arr := [ tmp ] ;
20618: LD_ADDR_VAR 0 7
20622: PUSH
20623: LD_VAR 0 6
20627: PUSH
20628: EMPTY
20629: LIST
20630: ST_TO_ADDR
// for i = 1 to pos - 1 do
20631: LD_ADDR_VAR 0 5
20635: PUSH
20636: DOUBLE
20637: LD_INT 1
20639: DEC
20640: ST_TO_ADDR
20641: LD_VAR 0 2
20645: PUSH
20646: LD_INT 1
20648: MINUS
20649: PUSH
20650: FOR_TO
20651: IFFALSE 20696
// begin tmp := tmp [ pos [ i ] ] ;
20653: LD_ADDR_VAR 0 6
20657: PUSH
20658: LD_VAR 0 6
20662: PUSH
20663: LD_VAR 0 2
20667: PUSH
20668: LD_VAR 0 5
20672: ARRAY
20673: ARRAY
20674: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20675: LD_ADDR_VAR 0 7
20679: PUSH
20680: LD_VAR 0 7
20684: PUSH
20685: LD_VAR 0 6
20689: PUSH
20690: EMPTY
20691: LIST
20692: ADD
20693: ST_TO_ADDR
// end ;
20694: GO 20650
20696: POP
20697: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20698: LD_ADDR_VAR 0 6
20702: PUSH
20703: LD_VAR 0 6
20707: PPUSH
20708: LD_VAR 0 2
20712: PUSH
20713: LD_VAR 0 2
20717: ARRAY
20718: PPUSH
20719: LD_VAR 0 3
20723: PPUSH
20724: CALL_OW 1
20728: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20729: LD_ADDR_VAR 0 7
20733: PUSH
20734: LD_VAR 0 7
20738: PPUSH
20739: LD_VAR 0 7
20743: PPUSH
20744: LD_VAR 0 6
20748: PPUSH
20749: CALL_OW 1
20753: ST_TO_ADDR
// for i = s_arr downto 2 do
20754: LD_ADDR_VAR 0 5
20758: PUSH
20759: DOUBLE
20760: LD_VAR 0 7
20764: INC
20765: ST_TO_ADDR
20766: LD_INT 2
20768: PUSH
20769: FOR_DOWNTO
20770: IFFALSE 20854
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20772: LD_ADDR_VAR 0 6
20776: PUSH
20777: LD_VAR 0 7
20781: PUSH
20782: LD_VAR 0 5
20786: PUSH
20787: LD_INT 1
20789: MINUS
20790: ARRAY
20791: PPUSH
20792: LD_VAR 0 2
20796: PUSH
20797: LD_VAR 0 5
20801: PUSH
20802: LD_INT 1
20804: MINUS
20805: ARRAY
20806: PPUSH
20807: LD_VAR 0 7
20811: PUSH
20812: LD_VAR 0 5
20816: ARRAY
20817: PPUSH
20818: CALL_OW 1
20822: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20823: LD_ADDR_VAR 0 7
20827: PUSH
20828: LD_VAR 0 7
20832: PPUSH
20833: LD_VAR 0 5
20837: PUSH
20838: LD_INT 1
20840: MINUS
20841: PPUSH
20842: LD_VAR 0 6
20846: PPUSH
20847: CALL_OW 1
20851: ST_TO_ADDR
// end ;
20852: GO 20769
20854: POP
20855: POP
// result := s_arr [ 1 ] ;
20856: LD_ADDR_VAR 0 4
20860: PUSH
20861: LD_VAR 0 7
20865: PUSH
20866: LD_INT 1
20868: ARRAY
20869: ST_TO_ADDR
// end ; end ;
20870: LD_VAR 0 4
20874: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
// if not list then
20879: LD_VAR 0 1
20883: NOT
20884: IFFALSE 20888
// exit ;
20886: GO 20979
// i := list [ pos1 ] ;
20888: LD_ADDR_VAR 0 5
20892: PUSH
20893: LD_VAR 0 1
20897: PUSH
20898: LD_VAR 0 2
20902: ARRAY
20903: ST_TO_ADDR
// if not i then
20904: LD_VAR 0 5
20908: NOT
20909: IFFALSE 20913
// exit ;
20911: GO 20979
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20913: LD_ADDR_VAR 0 1
20917: PUSH
20918: LD_VAR 0 1
20922: PPUSH
20923: LD_VAR 0 2
20927: PPUSH
20928: LD_VAR 0 1
20932: PUSH
20933: LD_VAR 0 3
20937: ARRAY
20938: PPUSH
20939: CALL_OW 1
20943: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20944: LD_ADDR_VAR 0 1
20948: PUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: LD_VAR 0 3
20958: PPUSH
20959: LD_VAR 0 5
20963: PPUSH
20964: CALL_OW 1
20968: ST_TO_ADDR
// result := list ;
20969: LD_ADDR_VAR 0 4
20973: PUSH
20974: LD_VAR 0 1
20978: ST_TO_ADDR
// end ;
20979: LD_VAR 0 4
20983: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20984: LD_INT 0
20986: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20987: LD_ADDR_VAR 0 5
20991: PUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 250
21001: PPUSH
21002: LD_VAR 0 1
21006: PPUSH
21007: CALL_OW 251
21011: PPUSH
21012: LD_VAR 0 2
21016: PPUSH
21017: LD_VAR 0 3
21021: PPUSH
21022: LD_VAR 0 4
21026: PPUSH
21027: CALL 21405 0 5
21031: ST_TO_ADDR
// end ;
21032: LD_VAR 0 5
21036: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21037: LD_INT 0
21039: PPUSH
21040: PPUSH
21041: PPUSH
21042: PPUSH
// if not list or not unit then
21043: LD_VAR 0 2
21047: NOT
21048: PUSH
21049: LD_VAR 0 1
21053: NOT
21054: OR
21055: IFFALSE 21059
// exit ;
21057: GO 21400
// result := [ ] ;
21059: LD_ADDR_VAR 0 5
21063: PUSH
21064: EMPTY
21065: ST_TO_ADDR
// for i in list do
21066: LD_ADDR_VAR 0 6
21070: PUSH
21071: LD_VAR 0 2
21075: PUSH
21076: FOR_IN
21077: IFFALSE 21295
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21079: LD_ADDR_VAR 0 8
21083: PUSH
21084: LD_VAR 0 1
21088: PPUSH
21089: LD_VAR 0 6
21093: PUSH
21094: LD_INT 1
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 6
21102: PUSH
21103: LD_INT 2
21105: ARRAY
21106: PPUSH
21107: CALL_OW 297
21111: ST_TO_ADDR
// if not Count ( result ) then
21112: LD_VAR 0 5
21116: PPUSH
21117: CALL 17689 0 1
21121: NOT
21122: IFFALSE 21155
// begin result := Join ( result , [ i , tmp ] ) ;
21124: LD_ADDR_VAR 0 5
21128: PUSH
21129: LD_VAR 0 5
21133: PPUSH
21134: LD_VAR 0 6
21138: PUSH
21139: LD_VAR 0 8
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PPUSH
21148: CALL 53298 0 2
21152: ST_TO_ADDR
// continue ;
21153: GO 21076
// end ; if result [ result ] [ 2 ] <= tmp then
21155: LD_VAR 0 5
21159: PUSH
21160: LD_VAR 0 5
21164: ARRAY
21165: PUSH
21166: LD_INT 2
21168: ARRAY
21169: PUSH
21170: LD_VAR 0 8
21174: LESSEQUAL
21175: IFFALSE 21208
// result := Join ( result , [ i , tmp ] ) else
21177: LD_ADDR_VAR 0 5
21181: PUSH
21182: LD_VAR 0 5
21186: PPUSH
21187: LD_VAR 0 6
21191: PUSH
21192: LD_VAR 0 8
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PPUSH
21201: CALL 53298 0 2
21205: ST_TO_ADDR
21206: GO 21293
// begin for j := 1 to Count ( result ) do
21208: LD_ADDR_VAR 0 7
21212: PUSH
21213: DOUBLE
21214: LD_INT 1
21216: DEC
21217: ST_TO_ADDR
21218: LD_VAR 0 5
21222: PPUSH
21223: CALL 17689 0 1
21227: PUSH
21228: FOR_TO
21229: IFFALSE 21291
// begin if tmp < result [ j ] [ 2 ] then
21231: LD_VAR 0 8
21235: PUSH
21236: LD_VAR 0 5
21240: PUSH
21241: LD_VAR 0 7
21245: ARRAY
21246: PUSH
21247: LD_INT 2
21249: ARRAY
21250: LESS
21251: IFFALSE 21289
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21253: LD_ADDR_VAR 0 5
21257: PUSH
21258: LD_VAR 0 5
21262: PPUSH
21263: LD_VAR 0 7
21267: PPUSH
21268: LD_VAR 0 6
21272: PUSH
21273: LD_VAR 0 8
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 2
21286: ST_TO_ADDR
// break ;
21287: GO 21291
// end ; end ;
21289: GO 21228
21291: POP
21292: POP
// end ; end ;
21293: GO 21076
21295: POP
21296: POP
// if result and not asc then
21297: LD_VAR 0 5
21301: PUSH
21302: LD_VAR 0 3
21306: NOT
21307: AND
21308: IFFALSE 21325
// result := ReverseArray ( result ) ;
21310: LD_ADDR_VAR 0 5
21314: PUSH
21315: LD_VAR 0 5
21319: PPUSH
21320: CALL 48565 0 1
21324: ST_TO_ADDR
// tmp := [ ] ;
21325: LD_ADDR_VAR 0 8
21329: PUSH
21330: EMPTY
21331: ST_TO_ADDR
// if mode then
21332: LD_VAR 0 4
21336: IFFALSE 21400
// begin for i := 1 to result do
21338: LD_ADDR_VAR 0 6
21342: PUSH
21343: DOUBLE
21344: LD_INT 1
21346: DEC
21347: ST_TO_ADDR
21348: LD_VAR 0 5
21352: PUSH
21353: FOR_TO
21354: IFFALSE 21388
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21356: LD_ADDR_VAR 0 8
21360: PUSH
21361: LD_VAR 0 8
21365: PPUSH
21366: LD_VAR 0 5
21370: PUSH
21371: LD_VAR 0 6
21375: ARRAY
21376: PUSH
21377: LD_INT 1
21379: ARRAY
21380: PPUSH
21381: CALL 53298 0 2
21385: ST_TO_ADDR
21386: GO 21353
21388: POP
21389: POP
// result := tmp ;
21390: LD_ADDR_VAR 0 5
21394: PUSH
21395: LD_VAR 0 8
21399: ST_TO_ADDR
// end ; end ;
21400: LD_VAR 0 5
21404: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21405: LD_INT 0
21407: PPUSH
21408: PPUSH
21409: PPUSH
21410: PPUSH
// if not list then
21411: LD_VAR 0 3
21415: NOT
21416: IFFALSE 21420
// exit ;
21418: GO 21808
// result := [ ] ;
21420: LD_ADDR_VAR 0 6
21424: PUSH
21425: EMPTY
21426: ST_TO_ADDR
// for i in list do
21427: LD_ADDR_VAR 0 7
21431: PUSH
21432: LD_VAR 0 3
21436: PUSH
21437: FOR_IN
21438: IFFALSE 21640
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21440: LD_ADDR_VAR 0 9
21444: PUSH
21445: LD_VAR 0 7
21449: PPUSH
21450: LD_VAR 0 1
21454: PPUSH
21455: LD_VAR 0 2
21459: PPUSH
21460: CALL_OW 297
21464: ST_TO_ADDR
// if not result then
21465: LD_VAR 0 6
21469: NOT
21470: IFFALSE 21496
// result := [ [ i , tmp ] ] else
21472: LD_ADDR_VAR 0 6
21476: PUSH
21477: LD_VAR 0 7
21481: PUSH
21482: LD_VAR 0 9
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: ST_TO_ADDR
21494: GO 21638
// begin if result [ result ] [ 2 ] <= tmp then
21496: LD_VAR 0 6
21500: PUSH
21501: LD_VAR 0 6
21505: ARRAY
21506: PUSH
21507: LD_INT 2
21509: ARRAY
21510: PUSH
21511: LD_VAR 0 9
21515: LESSEQUAL
21516: IFFALSE 21558
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21518: LD_ADDR_VAR 0 6
21522: PUSH
21523: LD_VAR 0 6
21527: PPUSH
21528: LD_VAR 0 6
21532: PUSH
21533: LD_INT 1
21535: PLUS
21536: PPUSH
21537: LD_VAR 0 7
21541: PUSH
21542: LD_VAR 0 9
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PPUSH
21551: CALL_OW 2
21555: ST_TO_ADDR
21556: GO 21638
// for j := 1 to result do
21558: LD_ADDR_VAR 0 8
21562: PUSH
21563: DOUBLE
21564: LD_INT 1
21566: DEC
21567: ST_TO_ADDR
21568: LD_VAR 0 6
21572: PUSH
21573: FOR_TO
21574: IFFALSE 21636
// begin if tmp < result [ j ] [ 2 ] then
21576: LD_VAR 0 9
21580: PUSH
21581: LD_VAR 0 6
21585: PUSH
21586: LD_VAR 0 8
21590: ARRAY
21591: PUSH
21592: LD_INT 2
21594: ARRAY
21595: LESS
21596: IFFALSE 21634
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21598: LD_ADDR_VAR 0 6
21602: PUSH
21603: LD_VAR 0 6
21607: PPUSH
21608: LD_VAR 0 8
21612: PPUSH
21613: LD_VAR 0 7
21617: PUSH
21618: LD_VAR 0 9
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PPUSH
21627: CALL_OW 2
21631: ST_TO_ADDR
// break ;
21632: GO 21636
// end ; end ;
21634: GO 21573
21636: POP
21637: POP
// end ; end ;
21638: GO 21437
21640: POP
21641: POP
// if result and not asc then
21642: LD_VAR 0 6
21646: PUSH
21647: LD_VAR 0 4
21651: NOT
21652: AND
21653: IFFALSE 21728
// begin tmp := result ;
21655: LD_ADDR_VAR 0 9
21659: PUSH
21660: LD_VAR 0 6
21664: ST_TO_ADDR
// for i = tmp downto 1 do
21665: LD_ADDR_VAR 0 7
21669: PUSH
21670: DOUBLE
21671: LD_VAR 0 9
21675: INC
21676: ST_TO_ADDR
21677: LD_INT 1
21679: PUSH
21680: FOR_DOWNTO
21681: IFFALSE 21726
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21683: LD_ADDR_VAR 0 6
21687: PUSH
21688: LD_VAR 0 6
21692: PPUSH
21693: LD_VAR 0 9
21697: PUSH
21698: LD_VAR 0 7
21702: MINUS
21703: PUSH
21704: LD_INT 1
21706: PLUS
21707: PPUSH
21708: LD_VAR 0 9
21712: PUSH
21713: LD_VAR 0 7
21717: ARRAY
21718: PPUSH
21719: CALL_OW 1
21723: ST_TO_ADDR
21724: GO 21680
21726: POP
21727: POP
// end ; tmp := [ ] ;
21728: LD_ADDR_VAR 0 9
21732: PUSH
21733: EMPTY
21734: ST_TO_ADDR
// if mode then
21735: LD_VAR 0 5
21739: IFFALSE 21808
// begin for i = 1 to result do
21741: LD_ADDR_VAR 0 7
21745: PUSH
21746: DOUBLE
21747: LD_INT 1
21749: DEC
21750: ST_TO_ADDR
21751: LD_VAR 0 6
21755: PUSH
21756: FOR_TO
21757: IFFALSE 21796
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21759: LD_ADDR_VAR 0 9
21763: PUSH
21764: LD_VAR 0 9
21768: PPUSH
21769: LD_VAR 0 7
21773: PPUSH
21774: LD_VAR 0 6
21778: PUSH
21779: LD_VAR 0 7
21783: ARRAY
21784: PUSH
21785: LD_INT 1
21787: ARRAY
21788: PPUSH
21789: CALL_OW 1
21793: ST_TO_ADDR
21794: GO 21756
21796: POP
21797: POP
// result := tmp ;
21798: LD_ADDR_VAR 0 6
21802: PUSH
21803: LD_VAR 0 9
21807: ST_TO_ADDR
// end ; end ;
21808: LD_VAR 0 6
21812: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21813: LD_INT 0
21815: PPUSH
21816: PPUSH
21817: PPUSH
21818: PPUSH
21819: PPUSH
21820: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21821: LD_ADDR_VAR 0 5
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: LD_INT 0
21834: PUSH
21835: EMPTY
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: ST_TO_ADDR
// if not x or not y then
21843: LD_VAR 0 2
21847: NOT
21848: PUSH
21849: LD_VAR 0 3
21853: NOT
21854: OR
21855: IFFALSE 21859
// exit ;
21857: GO 23509
// if not range then
21859: LD_VAR 0 4
21863: NOT
21864: IFFALSE 21874
// range := 10 ;
21866: LD_ADDR_VAR 0 4
21870: PUSH
21871: LD_INT 10
21873: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21874: LD_ADDR_VAR 0 8
21878: PUSH
21879: LD_INT 81
21881: PUSH
21882: LD_VAR 0 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 92
21893: PUSH
21894: LD_VAR 0 2
21898: PUSH
21899: LD_VAR 0 3
21903: PUSH
21904: LD_VAR 0 4
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: LD_INT 21
21920: PUSH
21921: LD_INT 3
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: PPUSH
21937: CALL_OW 69
21941: ST_TO_ADDR
// if not tmp then
21942: LD_VAR 0 8
21946: NOT
21947: IFFALSE 21951
// exit ;
21949: GO 23509
// for i in tmp do
21951: LD_ADDR_VAR 0 6
21955: PUSH
21956: LD_VAR 0 8
21960: PUSH
21961: FOR_IN
21962: IFFALSE 23484
// begin points := [ 0 , 0 , 0 ] ;
21964: LD_ADDR_VAR 0 9
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: LD_INT 0
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: ST_TO_ADDR
// bpoints := 1 ;
21983: LD_ADDR_VAR 0 10
21987: PUSH
21988: LD_INT 1
21990: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21991: LD_VAR 0 6
21995: PPUSH
21996: CALL_OW 247
22000: PUSH
22001: LD_INT 1
22003: DOUBLE
22004: EQUAL
22005: IFTRUE 22009
22007: GO 22587
22009: POP
// begin if GetClass ( i ) = 1 then
22010: LD_VAR 0 6
22014: PPUSH
22015: CALL_OW 257
22019: PUSH
22020: LD_INT 1
22022: EQUAL
22023: IFFALSE 22044
// points := [ 10 , 5 , 3 ] ;
22025: LD_ADDR_VAR 0 9
22029: PUSH
22030: LD_INT 10
22032: PUSH
22033: LD_INT 5
22035: PUSH
22036: LD_INT 3
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22044: LD_VAR 0 6
22048: PPUSH
22049: CALL_OW 257
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: LD_INT 3
22059: PUSH
22060: LD_INT 4
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: IN
22068: IFFALSE 22089
// points := [ 3 , 2 , 1 ] ;
22070: LD_ADDR_VAR 0 9
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22089: LD_VAR 0 6
22093: PPUSH
22094: CALL_OW 257
22098: PUSH
22099: LD_INT 5
22101: EQUAL
22102: IFFALSE 22123
// points := [ 130 , 5 , 2 ] ;
22104: LD_ADDR_VAR 0 9
22108: PUSH
22109: LD_INT 130
22111: PUSH
22112: LD_INT 5
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22123: LD_VAR 0 6
22127: PPUSH
22128: CALL_OW 257
22132: PUSH
22133: LD_INT 8
22135: EQUAL
22136: IFFALSE 22157
// points := [ 35 , 35 , 30 ] ;
22138: LD_ADDR_VAR 0 9
22142: PUSH
22143: LD_INT 35
22145: PUSH
22146: LD_INT 35
22148: PUSH
22149: LD_INT 30
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22157: LD_VAR 0 6
22161: PPUSH
22162: CALL_OW 257
22166: PUSH
22167: LD_INT 9
22169: EQUAL
22170: IFFALSE 22191
// points := [ 20 , 55 , 40 ] ;
22172: LD_ADDR_VAR 0 9
22176: PUSH
22177: LD_INT 20
22179: PUSH
22180: LD_INT 55
22182: PUSH
22183: LD_INT 40
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22191: LD_VAR 0 6
22195: PPUSH
22196: CALL_OW 257
22200: PUSH
22201: LD_INT 12
22203: PUSH
22204: LD_INT 16
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: IN
22211: IFFALSE 22232
// points := [ 5 , 3 , 2 ] ;
22213: LD_ADDR_VAR 0 9
22217: PUSH
22218: LD_INT 5
22220: PUSH
22221: LD_INT 3
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: LIST
22231: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22232: LD_VAR 0 6
22236: PPUSH
22237: CALL_OW 257
22241: PUSH
22242: LD_INT 17
22244: EQUAL
22245: IFFALSE 22266
// points := [ 100 , 50 , 75 ] ;
22247: LD_ADDR_VAR 0 9
22251: PUSH
22252: LD_INT 100
22254: PUSH
22255: LD_INT 50
22257: PUSH
22258: LD_INT 75
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22266: LD_VAR 0 6
22270: PPUSH
22271: CALL_OW 257
22275: PUSH
22276: LD_INT 15
22278: EQUAL
22279: IFFALSE 22300
// points := [ 10 , 5 , 3 ] ;
22281: LD_ADDR_VAR 0 9
22285: PUSH
22286: LD_INT 10
22288: PUSH
22289: LD_INT 5
22291: PUSH
22292: LD_INT 3
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22300: LD_VAR 0 6
22304: PPUSH
22305: CALL_OW 257
22309: PUSH
22310: LD_INT 14
22312: EQUAL
22313: IFFALSE 22334
// points := [ 10 , 0 , 0 ] ;
22315: LD_ADDR_VAR 0 9
22319: PUSH
22320: LD_INT 10
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22334: LD_VAR 0 6
22338: PPUSH
22339: CALL_OW 257
22343: PUSH
22344: LD_INT 11
22346: EQUAL
22347: IFFALSE 22368
// points := [ 30 , 10 , 5 ] ;
22349: LD_ADDR_VAR 0 9
22353: PUSH
22354: LD_INT 30
22356: PUSH
22357: LD_INT 10
22359: PUSH
22360: LD_INT 5
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_INT 5
22375: PPUSH
22376: CALL_OW 321
22380: PUSH
22381: LD_INT 2
22383: EQUAL
22384: IFFALSE 22401
// bpoints := bpoints * 1.8 ;
22386: LD_ADDR_VAR 0 10
22390: PUSH
22391: LD_VAR 0 10
22395: PUSH
22396: LD_REAL  1.80000000000000E+0000
22399: MUL
22400: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22401: LD_VAR 0 6
22405: PPUSH
22406: CALL_OW 257
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: LD_INT 3
22419: PUSH
22420: LD_INT 4
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: IN
22429: PUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: LD_INT 51
22437: PPUSH
22438: CALL_OW 321
22442: PUSH
22443: LD_INT 2
22445: EQUAL
22446: AND
22447: IFFALSE 22464
// bpoints := bpoints * 1.2 ;
22449: LD_ADDR_VAR 0 10
22453: PUSH
22454: LD_VAR 0 10
22458: PUSH
22459: LD_REAL  1.20000000000000E+0000
22462: MUL
22463: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22464: LD_VAR 0 6
22468: PPUSH
22469: CALL_OW 257
22473: PUSH
22474: LD_INT 5
22476: PUSH
22477: LD_INT 7
22479: PUSH
22480: LD_INT 9
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: IN
22488: PUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: LD_INT 52
22496: PPUSH
22497: CALL_OW 321
22501: PUSH
22502: LD_INT 2
22504: EQUAL
22505: AND
22506: IFFALSE 22523
// bpoints := bpoints * 1.5 ;
22508: LD_ADDR_VAR 0 10
22512: PUSH
22513: LD_VAR 0 10
22517: PUSH
22518: LD_REAL  1.50000000000000E+0000
22521: MUL
22522: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22523: LD_VAR 0 1
22527: PPUSH
22528: LD_INT 66
22530: PPUSH
22531: CALL_OW 321
22535: PUSH
22536: LD_INT 2
22538: EQUAL
22539: IFFALSE 22556
// bpoints := bpoints * 1.1 ;
22541: LD_ADDR_VAR 0 10
22545: PUSH
22546: LD_VAR 0 10
22550: PUSH
22551: LD_REAL  1.10000000000000E+0000
22554: MUL
22555: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22556: LD_ADDR_VAR 0 10
22560: PUSH
22561: LD_VAR 0 10
22565: PUSH
22566: LD_VAR 0 6
22570: PPUSH
22571: LD_INT 1
22573: PPUSH
22574: CALL_OW 259
22578: PUSH
22579: LD_REAL  1.15000000000000E+0000
22582: MUL
22583: MUL
22584: ST_TO_ADDR
// end ; unit_vehicle :
22585: GO 23413
22587: LD_INT 2
22589: DOUBLE
22590: EQUAL
22591: IFTRUE 22595
22593: GO 23401
22595: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22596: LD_VAR 0 6
22600: PPUSH
22601: CALL_OW 264
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 42
22611: PUSH
22612: LD_INT 24
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: IN
22620: IFFALSE 22641
// points := [ 25 , 5 , 3 ] ;
22622: LD_ADDR_VAR 0 9
22626: PUSH
22627: LD_INT 25
22629: PUSH
22630: LD_INT 5
22632: PUSH
22633: LD_INT 3
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22641: LD_VAR 0 6
22645: PPUSH
22646: CALL_OW 264
22650: PUSH
22651: LD_INT 4
22653: PUSH
22654: LD_INT 43
22656: PUSH
22657: LD_INT 25
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: IN
22665: IFFALSE 22686
// points := [ 40 , 15 , 5 ] ;
22667: LD_ADDR_VAR 0 9
22671: PUSH
22672: LD_INT 40
22674: PUSH
22675: LD_INT 15
22677: PUSH
22678: LD_INT 5
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22686: LD_VAR 0 6
22690: PPUSH
22691: CALL_OW 264
22695: PUSH
22696: LD_INT 3
22698: PUSH
22699: LD_INT 23
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: IN
22706: IFFALSE 22727
// points := [ 7 , 25 , 8 ] ;
22708: LD_ADDR_VAR 0 9
22712: PUSH
22713: LD_INT 7
22715: PUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 8
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22727: LD_VAR 0 6
22731: PPUSH
22732: CALL_OW 264
22736: PUSH
22737: LD_INT 5
22739: PUSH
22740: LD_INT 27
22742: PUSH
22743: LD_INT 44
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: IN
22751: IFFALSE 22772
// points := [ 14 , 50 , 16 ] ;
22753: LD_ADDR_VAR 0 9
22757: PUSH
22758: LD_INT 14
22760: PUSH
22761: LD_INT 50
22763: PUSH
22764: LD_INT 16
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22772: LD_VAR 0 6
22776: PPUSH
22777: CALL_OW 264
22781: PUSH
22782: LD_INT 6
22784: PUSH
22785: LD_INT 46
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: IN
22792: IFFALSE 22813
// points := [ 32 , 120 , 70 ] ;
22794: LD_ADDR_VAR 0 9
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: LD_INT 120
22804: PUSH
22805: LD_INT 70
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22813: LD_VAR 0 6
22817: PPUSH
22818: CALL_OW 264
22822: PUSH
22823: LD_INT 7
22825: PUSH
22826: LD_INT 28
22828: PUSH
22829: LD_INT 45
22831: PUSH
22832: LD_INT 92
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: IN
22841: IFFALSE 22862
// points := [ 35 , 20 , 45 ] ;
22843: LD_ADDR_VAR 0 9
22847: PUSH
22848: LD_INT 35
22850: PUSH
22851: LD_INT 20
22853: PUSH
22854: LD_INT 45
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22862: LD_VAR 0 6
22866: PPUSH
22867: CALL_OW 264
22871: PUSH
22872: LD_INT 47
22874: PUSH
22875: EMPTY
22876: LIST
22877: IN
22878: IFFALSE 22899
// points := [ 67 , 45 , 75 ] ;
22880: LD_ADDR_VAR 0 9
22884: PUSH
22885: LD_INT 67
22887: PUSH
22888: LD_INT 45
22890: PUSH
22891: LD_INT 75
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22899: LD_VAR 0 6
22903: PPUSH
22904: CALL_OW 264
22908: PUSH
22909: LD_INT 26
22911: PUSH
22912: EMPTY
22913: LIST
22914: IN
22915: IFFALSE 22936
// points := [ 120 , 30 , 80 ] ;
22917: LD_ADDR_VAR 0 9
22921: PUSH
22922: LD_INT 120
22924: PUSH
22925: LD_INT 30
22927: PUSH
22928: LD_INT 80
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22936: LD_VAR 0 6
22940: PPUSH
22941: CALL_OW 264
22945: PUSH
22946: LD_INT 22
22948: PUSH
22949: EMPTY
22950: LIST
22951: IN
22952: IFFALSE 22973
// points := [ 40 , 1 , 1 ] ;
22954: LD_ADDR_VAR 0 9
22958: PUSH
22959: LD_INT 40
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22973: LD_VAR 0 6
22977: PPUSH
22978: CALL_OW 264
22982: PUSH
22983: LD_INT 29
22985: PUSH
22986: EMPTY
22987: LIST
22988: IN
22989: IFFALSE 23010
// points := [ 70 , 200 , 400 ] ;
22991: LD_ADDR_VAR 0 9
22995: PUSH
22996: LD_INT 70
22998: PUSH
22999: LD_INT 200
23001: PUSH
23002: LD_INT 400
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23010: LD_VAR 0 6
23014: PPUSH
23015: CALL_OW 264
23019: PUSH
23020: LD_INT 14
23022: PUSH
23023: LD_INT 53
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: IN
23030: IFFALSE 23051
// points := [ 40 , 10 , 20 ] ;
23032: LD_ADDR_VAR 0 9
23036: PUSH
23037: LD_INT 40
23039: PUSH
23040: LD_INT 10
23042: PUSH
23043: LD_INT 20
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: LIST
23050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23051: LD_VAR 0 6
23055: PPUSH
23056: CALL_OW 264
23060: PUSH
23061: LD_INT 9
23063: PUSH
23064: EMPTY
23065: LIST
23066: IN
23067: IFFALSE 23088
// points := [ 5 , 70 , 20 ] ;
23069: LD_ADDR_VAR 0 9
23073: PUSH
23074: LD_INT 5
23076: PUSH
23077: LD_INT 70
23079: PUSH
23080: LD_INT 20
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23088: LD_VAR 0 6
23092: PPUSH
23093: CALL_OW 264
23097: PUSH
23098: LD_INT 10
23100: PUSH
23101: EMPTY
23102: LIST
23103: IN
23104: IFFALSE 23125
// points := [ 35 , 110 , 70 ] ;
23106: LD_ADDR_VAR 0 9
23110: PUSH
23111: LD_INT 35
23113: PUSH
23114: LD_INT 110
23116: PUSH
23117: LD_INT 70
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23125: LD_VAR 0 6
23129: PPUSH
23130: CALL_OW 265
23134: PUSH
23135: LD_INT 25
23137: EQUAL
23138: IFFALSE 23159
// points := [ 80 , 65 , 100 ] ;
23140: LD_ADDR_VAR 0 9
23144: PUSH
23145: LD_INT 80
23147: PUSH
23148: LD_INT 65
23150: PUSH
23151: LD_INT 100
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23159: LD_VAR 0 6
23163: PPUSH
23164: CALL_OW 263
23168: PUSH
23169: LD_INT 1
23171: EQUAL
23172: IFFALSE 23207
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23174: LD_ADDR_VAR 0 10
23178: PUSH
23179: LD_VAR 0 10
23183: PUSH
23184: LD_VAR 0 6
23188: PPUSH
23189: CALL_OW 311
23193: PPUSH
23194: LD_INT 3
23196: PPUSH
23197: CALL_OW 259
23201: PUSH
23202: LD_INT 4
23204: MUL
23205: MUL
23206: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23207: LD_VAR 0 6
23211: PPUSH
23212: CALL_OW 263
23216: PUSH
23217: LD_INT 2
23219: EQUAL
23220: IFFALSE 23271
// begin j := IsControledBy ( i ) ;
23222: LD_ADDR_VAR 0 7
23226: PUSH
23227: LD_VAR 0 6
23231: PPUSH
23232: CALL_OW 312
23236: ST_TO_ADDR
// if j then
23237: LD_VAR 0 7
23241: IFFALSE 23271
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23243: LD_ADDR_VAR 0 10
23247: PUSH
23248: LD_VAR 0 10
23252: PUSH
23253: LD_VAR 0 7
23257: PPUSH
23258: LD_INT 3
23260: PPUSH
23261: CALL_OW 259
23265: PUSH
23266: LD_INT 3
23268: MUL
23269: MUL
23270: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23271: LD_VAR 0 6
23275: PPUSH
23276: CALL_OW 264
23280: PUSH
23281: LD_INT 5
23283: PUSH
23284: LD_INT 6
23286: PUSH
23287: LD_INT 46
23289: PUSH
23290: LD_INT 44
23292: PUSH
23293: LD_INT 47
23295: PUSH
23296: LD_INT 45
23298: PUSH
23299: LD_INT 28
23301: PUSH
23302: LD_INT 7
23304: PUSH
23305: LD_INT 27
23307: PUSH
23308: LD_INT 29
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: IN
23323: PUSH
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_INT 52
23331: PPUSH
23332: CALL_OW 321
23336: PUSH
23337: LD_INT 2
23339: EQUAL
23340: AND
23341: IFFALSE 23358
// bpoints := bpoints * 1.2 ;
23343: LD_ADDR_VAR 0 10
23347: PUSH
23348: LD_VAR 0 10
23352: PUSH
23353: LD_REAL  1.20000000000000E+0000
23356: MUL
23357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23358: LD_VAR 0 6
23362: PPUSH
23363: CALL_OW 264
23367: PUSH
23368: LD_INT 6
23370: PUSH
23371: LD_INT 46
23373: PUSH
23374: LD_INT 47
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: IN
23382: IFFALSE 23399
// bpoints := bpoints * 1.2 ;
23384: LD_ADDR_VAR 0 10
23388: PUSH
23389: LD_VAR 0 10
23393: PUSH
23394: LD_REAL  1.20000000000000E+0000
23397: MUL
23398: ST_TO_ADDR
// end ; unit_building :
23399: GO 23413
23401: LD_INT 3
23403: DOUBLE
23404: EQUAL
23405: IFTRUE 23409
23407: GO 23412
23409: POP
// ; end ;
23410: GO 23413
23412: POP
// for j = 1 to 3 do
23413: LD_ADDR_VAR 0 7
23417: PUSH
23418: DOUBLE
23419: LD_INT 1
23421: DEC
23422: ST_TO_ADDR
23423: LD_INT 3
23425: PUSH
23426: FOR_TO
23427: IFFALSE 23480
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23429: LD_ADDR_VAR 0 5
23433: PUSH
23434: LD_VAR 0 5
23438: PPUSH
23439: LD_VAR 0 7
23443: PPUSH
23444: LD_VAR 0 5
23448: PUSH
23449: LD_VAR 0 7
23453: ARRAY
23454: PUSH
23455: LD_VAR 0 9
23459: PUSH
23460: LD_VAR 0 7
23464: ARRAY
23465: PUSH
23466: LD_VAR 0 10
23470: MUL
23471: PLUS
23472: PPUSH
23473: CALL_OW 1
23477: ST_TO_ADDR
23478: GO 23426
23480: POP
23481: POP
// end ;
23482: GO 21961
23484: POP
23485: POP
// result := Replace ( result , 4 , tmp ) ;
23486: LD_ADDR_VAR 0 5
23490: PUSH
23491: LD_VAR 0 5
23495: PPUSH
23496: LD_INT 4
23498: PPUSH
23499: LD_VAR 0 8
23503: PPUSH
23504: CALL_OW 1
23508: ST_TO_ADDR
// end ;
23509: LD_VAR 0 5
23513: RET
// export function DangerAtRange ( unit , range ) ; begin
23514: LD_INT 0
23516: PPUSH
// if not unit then
23517: LD_VAR 0 1
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 23571
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_VAR 0 1
23535: PPUSH
23536: CALL_OW 255
23540: PPUSH
23541: LD_VAR 0 1
23545: PPUSH
23546: CALL_OW 250
23550: PPUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: CALL_OW 251
23560: PPUSH
23561: LD_VAR 0 2
23565: PPUSH
23566: CALL 21813 0 4
23570: ST_TO_ADDR
// end ;
23571: LD_VAR 0 3
23575: RET
// export function DangerInArea ( side , area ) ; begin
23576: LD_INT 0
23578: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23579: LD_ADDR_VAR 0 3
23583: PUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_INT 81
23591: PUSH
23592: LD_VAR 0 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PPUSH
23601: CALL_OW 70
23605: ST_TO_ADDR
// end ;
23606: LD_VAR 0 3
23610: RET
// export function IsExtension ( b ) ; begin
23611: LD_INT 0
23613: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: LD_VAR 0 1
23623: PUSH
23624: LD_INT 23
23626: PUSH
23627: LD_INT 20
23629: PUSH
23630: LD_INT 22
23632: PUSH
23633: LD_INT 17
23635: PUSH
23636: LD_INT 24
23638: PUSH
23639: LD_INT 21
23641: PUSH
23642: LD_INT 19
23644: PUSH
23645: LD_INT 16
23647: PUSH
23648: LD_INT 25
23650: PUSH
23651: LD_INT 18
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: IN
23666: ST_TO_ADDR
// end ;
23667: LD_VAR 0 2
23671: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23672: LD_INT 0
23674: PPUSH
23675: PPUSH
23676: PPUSH
// result := [ ] ;
23677: LD_ADDR_VAR 0 4
23681: PUSH
23682: EMPTY
23683: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23684: LD_ADDR_VAR 0 5
23688: PUSH
23689: LD_VAR 0 2
23693: PPUSH
23694: LD_INT 21
23696: PUSH
23697: LD_INT 3
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PPUSH
23704: CALL_OW 70
23708: ST_TO_ADDR
// if not tmp then
23709: LD_VAR 0 5
23713: NOT
23714: IFFALSE 23718
// exit ;
23716: GO 23782
// if checkLink then
23718: LD_VAR 0 3
23722: IFFALSE 23772
// begin for i in tmp do
23724: LD_ADDR_VAR 0 6
23728: PUSH
23729: LD_VAR 0 5
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23770
// if GetBase ( i ) <> base then
23737: LD_VAR 0 6
23741: PPUSH
23742: CALL_OW 274
23746: PUSH
23747: LD_VAR 0 1
23751: NONEQUAL
23752: IFFALSE 23768
// ComLinkToBase ( base , i ) ;
23754: LD_VAR 0 1
23758: PPUSH
23759: LD_VAR 0 6
23763: PPUSH
23764: CALL_OW 169
23768: GO 23734
23770: POP
23771: POP
// end ; result := tmp ;
23772: LD_ADDR_VAR 0 4
23776: PUSH
23777: LD_VAR 0 5
23781: ST_TO_ADDR
// end ;
23782: LD_VAR 0 4
23786: RET
// export function ComComplete ( units , b ) ; var i ; begin
23787: LD_INT 0
23789: PPUSH
23790: PPUSH
// if not units then
23791: LD_VAR 0 1
23795: NOT
23796: IFFALSE 23800
// exit ;
23798: GO 23890
// for i in units do
23800: LD_ADDR_VAR 0 4
23804: PUSH
23805: LD_VAR 0 1
23809: PUSH
23810: FOR_IN
23811: IFFALSE 23888
// if BuildingStatus ( b ) = bs_build then
23813: LD_VAR 0 2
23817: PPUSH
23818: CALL_OW 461
23822: PUSH
23823: LD_INT 1
23825: EQUAL
23826: IFFALSE 23886
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23828: LD_VAR 0 4
23832: PPUSH
23833: LD_STRING h
23835: PUSH
23836: LD_VAR 0 2
23840: PPUSH
23841: CALL_OW 250
23845: PUSH
23846: LD_VAR 0 2
23850: PPUSH
23851: CALL_OW 251
23855: PUSH
23856: LD_VAR 0 2
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: PPUSH
23882: CALL_OW 446
23886: GO 23810
23888: POP
23889: POP
// end ;
23890: LD_VAR 0 3
23894: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23895: LD_INT 0
23897: PPUSH
23898: PPUSH
23899: PPUSH
23900: PPUSH
23901: PPUSH
23902: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23903: LD_VAR 0 1
23907: NOT
23908: PUSH
23909: LD_VAR 0 1
23913: PPUSH
23914: CALL_OW 263
23918: PUSH
23919: LD_INT 2
23921: NONEQUAL
23922: OR
23923: IFFALSE 23927
// exit ;
23925: GO 24243
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23927: LD_ADDR_VAR 0 6
23931: PUSH
23932: LD_INT 22
23934: PUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 255
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: LD_INT 30
23954: PUSH
23955: LD_INT 36
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 34
23964: PUSH
23965: LD_INT 31
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PPUSH
23981: CALL_OW 69
23985: ST_TO_ADDR
// if not tmp then
23986: LD_VAR 0 6
23990: NOT
23991: IFFALSE 23995
// exit ;
23993: GO 24243
// result := [ ] ;
23995: LD_ADDR_VAR 0 2
23999: PUSH
24000: EMPTY
24001: ST_TO_ADDR
// for i in tmp do
24002: LD_ADDR_VAR 0 3
24006: PUSH
24007: LD_VAR 0 6
24011: PUSH
24012: FOR_IN
24013: IFFALSE 24084
// begin t := UnitsInside ( i ) ;
24015: LD_ADDR_VAR 0 4
24019: PUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: CALL_OW 313
24029: ST_TO_ADDR
// if t then
24030: LD_VAR 0 4
24034: IFFALSE 24082
// for j in t do
24036: LD_ADDR_VAR 0 7
24040: PUSH
24041: LD_VAR 0 4
24045: PUSH
24046: FOR_IN
24047: IFFALSE 24080
// result := Replace ( result , result + 1 , j ) ;
24049: LD_ADDR_VAR 0 2
24053: PUSH
24054: LD_VAR 0 2
24058: PPUSH
24059: LD_VAR 0 2
24063: PUSH
24064: LD_INT 1
24066: PLUS
24067: PPUSH
24068: LD_VAR 0 7
24072: PPUSH
24073: CALL_OW 1
24077: ST_TO_ADDR
24078: GO 24046
24080: POP
24081: POP
// end ;
24082: GO 24012
24084: POP
24085: POP
// if not result then
24086: LD_VAR 0 2
24090: NOT
24091: IFFALSE 24095
// exit ;
24093: GO 24243
// mech := result [ 1 ] ;
24095: LD_ADDR_VAR 0 5
24099: PUSH
24100: LD_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: ARRAY
24108: ST_TO_ADDR
// if result > 1 then
24109: LD_VAR 0 2
24113: PUSH
24114: LD_INT 1
24116: GREATER
24117: IFFALSE 24229
// begin for i = 2 to result do
24119: LD_ADDR_VAR 0 3
24123: PUSH
24124: DOUBLE
24125: LD_INT 2
24127: DEC
24128: ST_TO_ADDR
24129: LD_VAR 0 2
24133: PUSH
24134: FOR_TO
24135: IFFALSE 24227
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24137: LD_ADDR_VAR 0 4
24141: PUSH
24142: LD_VAR 0 2
24146: PUSH
24147: LD_VAR 0 3
24151: ARRAY
24152: PPUSH
24153: LD_INT 3
24155: PPUSH
24156: CALL_OW 259
24160: PUSH
24161: LD_VAR 0 2
24165: PUSH
24166: LD_VAR 0 3
24170: ARRAY
24171: PPUSH
24172: CALL_OW 432
24176: MINUS
24177: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24178: LD_VAR 0 4
24182: PUSH
24183: LD_VAR 0 5
24187: PPUSH
24188: LD_INT 3
24190: PPUSH
24191: CALL_OW 259
24195: PUSH
24196: LD_VAR 0 5
24200: PPUSH
24201: CALL_OW 432
24205: MINUS
24206: GREATEREQUAL
24207: IFFALSE 24225
// mech := result [ i ] ;
24209: LD_ADDR_VAR 0 5
24213: PUSH
24214: LD_VAR 0 2
24218: PUSH
24219: LD_VAR 0 3
24223: ARRAY
24224: ST_TO_ADDR
// end ;
24225: GO 24134
24227: POP
24228: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24229: LD_VAR 0 1
24233: PPUSH
24234: LD_VAR 0 5
24238: PPUSH
24239: CALL_OW 135
// end ;
24243: LD_VAR 0 2
24247: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
24252: PPUSH
24253: PPUSH
24254: PPUSH
24255: PPUSH
24256: PPUSH
24257: PPUSH
24258: PPUSH
24259: PPUSH
24260: PPUSH
24261: PPUSH
24262: PPUSH
// result := [ ] ;
24263: LD_ADDR_VAR 0 7
24267: PUSH
24268: EMPTY
24269: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24270: LD_VAR 0 1
24274: PPUSH
24275: CALL_OW 266
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: IN
24290: NOT
24291: IFFALSE 24295
// exit ;
24293: GO 25929
// if name then
24295: LD_VAR 0 3
24299: IFFALSE 24315
// SetBName ( base_dep , name ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_VAR 0 3
24310: PPUSH
24311: CALL_OW 500
// base := GetBase ( base_dep ) ;
24315: LD_ADDR_VAR 0 15
24319: PUSH
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL_OW 274
24329: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24330: LD_ADDR_VAR 0 16
24334: PUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 255
24344: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24345: LD_ADDR_VAR 0 17
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 248
24359: ST_TO_ADDR
// if sources then
24360: LD_VAR 0 5
24364: IFFALSE 24411
// for i = 1 to 3 do
24366: LD_ADDR_VAR 0 8
24370: PUSH
24371: DOUBLE
24372: LD_INT 1
24374: DEC
24375: ST_TO_ADDR
24376: LD_INT 3
24378: PUSH
24379: FOR_TO
24380: IFFALSE 24409
// AddResourceType ( base , i , sources [ i ] ) ;
24382: LD_VAR 0 15
24386: PPUSH
24387: LD_VAR 0 8
24391: PPUSH
24392: LD_VAR 0 5
24396: PUSH
24397: LD_VAR 0 8
24401: ARRAY
24402: PPUSH
24403: CALL_OW 276
24407: GO 24379
24409: POP
24410: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24411: LD_ADDR_VAR 0 18
24415: PUSH
24416: LD_VAR 0 15
24420: PPUSH
24421: LD_VAR 0 2
24425: PPUSH
24426: LD_INT 1
24428: PPUSH
24429: CALL 23672 0 3
24433: ST_TO_ADDR
// InitHc ;
24434: CALL_OW 19
// InitUc ;
24438: CALL_OW 18
// uc_side := side ;
24442: LD_ADDR_OWVAR 20
24446: PUSH
24447: LD_VAR 0 16
24451: ST_TO_ADDR
// uc_nation := nation ;
24452: LD_ADDR_OWVAR 21
24456: PUSH
24457: LD_VAR 0 17
24461: ST_TO_ADDR
// if buildings then
24462: LD_VAR 0 18
24466: IFFALSE 25788
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24468: LD_ADDR_VAR 0 19
24472: PUSH
24473: LD_VAR 0 18
24477: PPUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: LD_INT 29
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 30
24493: PUSH
24494: LD_INT 30
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: PPUSH
24506: CALL_OW 72
24510: ST_TO_ADDR
// if tmp then
24511: LD_VAR 0 19
24515: IFFALSE 24563
// for i in tmp do
24517: LD_ADDR_VAR 0 8
24521: PUSH
24522: LD_VAR 0 19
24526: PUSH
24527: FOR_IN
24528: IFFALSE 24561
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24530: LD_VAR 0 8
24534: PPUSH
24535: CALL_OW 250
24539: PPUSH
24540: LD_VAR 0 8
24544: PPUSH
24545: CALL_OW 251
24549: PPUSH
24550: LD_VAR 0 16
24554: PPUSH
24555: CALL_OW 441
24559: GO 24527
24561: POP
24562: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24563: LD_VAR 0 18
24567: PPUSH
24568: LD_INT 2
24570: PUSH
24571: LD_INT 30
24573: PUSH
24574: LD_INT 32
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 30
24583: PUSH
24584: LD_INT 33
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: PPUSH
24596: CALL_OW 72
24600: IFFALSE 24688
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24602: LD_ADDR_VAR 0 8
24606: PUSH
24607: LD_VAR 0 18
24611: PPUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 30
24617: PUSH
24618: LD_INT 32
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 30
24627: PUSH
24628: LD_INT 33
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: LIST
24639: PPUSH
24640: CALL_OW 72
24644: PUSH
24645: FOR_IN
24646: IFFALSE 24686
// begin if not GetBWeapon ( i ) then
24648: LD_VAR 0 8
24652: PPUSH
24653: CALL_OW 269
24657: NOT
24658: IFFALSE 24684
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24660: LD_VAR 0 8
24664: PPUSH
24665: LD_VAR 0 8
24669: PPUSH
24670: LD_VAR 0 2
24674: PPUSH
24675: CALL 25934 0 2
24679: PPUSH
24680: CALL_OW 431
// end ;
24684: GO 24645
24686: POP
24687: POP
// end ; for i = 1 to personel do
24688: LD_ADDR_VAR 0 8
24692: PUSH
24693: DOUBLE
24694: LD_INT 1
24696: DEC
24697: ST_TO_ADDR
24698: LD_VAR 0 6
24702: PUSH
24703: FOR_TO
24704: IFFALSE 25768
// begin if i > 4 then
24706: LD_VAR 0 8
24710: PUSH
24711: LD_INT 4
24713: GREATER
24714: IFFALSE 24718
// break ;
24716: GO 25768
// case i of 1 :
24718: LD_VAR 0 8
24722: PUSH
24723: LD_INT 1
24725: DOUBLE
24726: EQUAL
24727: IFTRUE 24731
24729: GO 24811
24731: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24732: LD_ADDR_VAR 0 12
24736: PUSH
24737: LD_VAR 0 18
24741: PPUSH
24742: LD_INT 22
24744: PUSH
24745: LD_VAR 0 16
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 58
24756: PUSH
24757: EMPTY
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: LD_INT 30
24765: PUSH
24766: LD_INT 32
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 30
24775: PUSH
24776: LD_INT 4
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 30
24785: PUSH
24786: LD_INT 5
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: PPUSH
24804: CALL_OW 72
24808: ST_TO_ADDR
24809: GO 25033
24811: LD_INT 2
24813: DOUBLE
24814: EQUAL
24815: IFTRUE 24819
24817: GO 24881
24819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24820: LD_ADDR_VAR 0 12
24824: PUSH
24825: LD_VAR 0 18
24829: PPUSH
24830: LD_INT 22
24832: PUSH
24833: LD_VAR 0 16
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: LD_INT 30
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 30
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PPUSH
24874: CALL_OW 72
24878: ST_TO_ADDR
24879: GO 25033
24881: LD_INT 3
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 24951
24889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24890: LD_ADDR_VAR 0 12
24894: PUSH
24895: LD_VAR 0 18
24899: PPUSH
24900: LD_INT 22
24902: PUSH
24903: LD_VAR 0 16
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: PUSH
24915: LD_INT 30
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 30
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PPUSH
24944: CALL_OW 72
24948: ST_TO_ADDR
24949: GO 25033
24951: LD_INT 4
24953: DOUBLE
24954: EQUAL
24955: IFTRUE 24959
24957: GO 25032
24959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24960: LD_ADDR_VAR 0 12
24964: PUSH
24965: LD_VAR 0 18
24969: PPUSH
24970: LD_INT 22
24972: PUSH
24973: LD_VAR 0 16
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 30
24987: PUSH
24988: LD_INT 6
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 30
24997: PUSH
24998: LD_INT 7
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 30
25007: PUSH
25008: LD_INT 8
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 72
25029: ST_TO_ADDR
25030: GO 25033
25032: POP
// if i = 1 then
25033: LD_VAR 0 8
25037: PUSH
25038: LD_INT 1
25040: EQUAL
25041: IFFALSE 25152
// begin tmp := [ ] ;
25043: LD_ADDR_VAR 0 19
25047: PUSH
25048: EMPTY
25049: ST_TO_ADDR
// for j in f do
25050: LD_ADDR_VAR 0 9
25054: PUSH
25055: LD_VAR 0 12
25059: PUSH
25060: FOR_IN
25061: IFFALSE 25134
// if GetBType ( j ) = b_bunker then
25063: LD_VAR 0 9
25067: PPUSH
25068: CALL_OW 266
25072: PUSH
25073: LD_INT 32
25075: EQUAL
25076: IFFALSE 25103
// tmp := Insert ( tmp , 1 , j ) else
25078: LD_ADDR_VAR 0 19
25082: PUSH
25083: LD_VAR 0 19
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: LD_VAR 0 9
25095: PPUSH
25096: CALL_OW 2
25100: ST_TO_ADDR
25101: GO 25132
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25103: LD_ADDR_VAR 0 19
25107: PUSH
25108: LD_VAR 0 19
25112: PPUSH
25113: LD_VAR 0 19
25117: PUSH
25118: LD_INT 1
25120: PLUS
25121: PPUSH
25122: LD_VAR 0 9
25126: PPUSH
25127: CALL_OW 2
25131: ST_TO_ADDR
25132: GO 25060
25134: POP
25135: POP
// if tmp then
25136: LD_VAR 0 19
25140: IFFALSE 25152
// f := tmp ;
25142: LD_ADDR_VAR 0 12
25146: PUSH
25147: LD_VAR 0 19
25151: ST_TO_ADDR
// end ; x := personel [ i ] ;
25152: LD_ADDR_VAR 0 13
25156: PUSH
25157: LD_VAR 0 6
25161: PUSH
25162: LD_VAR 0 8
25166: ARRAY
25167: ST_TO_ADDR
// if x = - 1 then
25168: LD_VAR 0 13
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: EQUAL
25177: IFFALSE 25386
// begin for j in f do
25179: LD_ADDR_VAR 0 9
25183: PUSH
25184: LD_VAR 0 12
25188: PUSH
25189: FOR_IN
25190: IFFALSE 25382
// repeat InitHc ;
25192: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25196: LD_VAR 0 9
25200: PPUSH
25201: CALL_OW 266
25205: PUSH
25206: LD_INT 5
25208: EQUAL
25209: IFFALSE 25279
// begin if UnitsInside ( j ) < 3 then
25211: LD_VAR 0 9
25215: PPUSH
25216: CALL_OW 313
25220: PUSH
25221: LD_INT 3
25223: LESS
25224: IFFALSE 25260
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25226: LD_INT 0
25228: PPUSH
25229: LD_INT 5
25231: PUSH
25232: LD_INT 8
25234: PUSH
25235: LD_INT 9
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: LIST
25242: PUSH
25243: LD_VAR 0 17
25247: ARRAY
25248: PPUSH
25249: LD_VAR 0 4
25253: PPUSH
25254: CALL_OW 380
25258: GO 25277
// PrepareHuman ( false , i , skill ) ;
25260: LD_INT 0
25262: PPUSH
25263: LD_VAR 0 8
25267: PPUSH
25268: LD_VAR 0 4
25272: PPUSH
25273: CALL_OW 380
// end else
25277: GO 25296
// PrepareHuman ( false , i , skill ) ;
25279: LD_INT 0
25281: PPUSH
25282: LD_VAR 0 8
25286: PPUSH
25287: LD_VAR 0 4
25291: PPUSH
25292: CALL_OW 380
// un := CreateHuman ;
25296: LD_ADDR_VAR 0 14
25300: PUSH
25301: CALL_OW 44
25305: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25306: LD_ADDR_VAR 0 7
25310: PUSH
25311: LD_VAR 0 7
25315: PPUSH
25316: LD_INT 1
25318: PPUSH
25319: LD_VAR 0 14
25323: PPUSH
25324: CALL_OW 2
25328: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25329: LD_VAR 0 14
25333: PPUSH
25334: LD_VAR 0 9
25338: PPUSH
25339: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25343: LD_VAR 0 9
25347: PPUSH
25348: CALL_OW 313
25352: PUSH
25353: LD_INT 6
25355: EQUAL
25356: PUSH
25357: LD_VAR 0 9
25361: PPUSH
25362: CALL_OW 266
25366: PUSH
25367: LD_INT 32
25369: PUSH
25370: LD_INT 31
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: IN
25377: OR
25378: IFFALSE 25192
25380: GO 25189
25382: POP
25383: POP
// end else
25384: GO 25766
// for j = 1 to x do
25386: LD_ADDR_VAR 0 9
25390: PUSH
25391: DOUBLE
25392: LD_INT 1
25394: DEC
25395: ST_TO_ADDR
25396: LD_VAR 0 13
25400: PUSH
25401: FOR_TO
25402: IFFALSE 25764
// begin InitHc ;
25404: CALL_OW 19
// if not f then
25408: LD_VAR 0 12
25412: NOT
25413: IFFALSE 25502
// begin PrepareHuman ( false , i , skill ) ;
25415: LD_INT 0
25417: PPUSH
25418: LD_VAR 0 8
25422: PPUSH
25423: LD_VAR 0 4
25427: PPUSH
25428: CALL_OW 380
// un := CreateHuman ;
25432: LD_ADDR_VAR 0 14
25436: PUSH
25437: CALL_OW 44
25441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25442: LD_ADDR_VAR 0 7
25446: PUSH
25447: LD_VAR 0 7
25451: PPUSH
25452: LD_INT 1
25454: PPUSH
25455: LD_VAR 0 14
25459: PPUSH
25460: CALL_OW 2
25464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25465: LD_VAR 0 14
25469: PPUSH
25470: LD_VAR 0 1
25474: PPUSH
25475: CALL_OW 250
25479: PPUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: CALL_OW 251
25489: PPUSH
25490: LD_INT 10
25492: PPUSH
25493: LD_INT 0
25495: PPUSH
25496: CALL_OW 50
// continue ;
25500: GO 25401
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25502: LD_VAR 0 12
25506: PUSH
25507: LD_INT 1
25509: ARRAY
25510: PPUSH
25511: CALL_OW 313
25515: PUSH
25516: LD_VAR 0 12
25520: PUSH
25521: LD_INT 1
25523: ARRAY
25524: PPUSH
25525: CALL_OW 266
25529: PUSH
25530: LD_INT 32
25532: PUSH
25533: LD_INT 31
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: IN
25540: AND
25541: PUSH
25542: LD_VAR 0 12
25546: PUSH
25547: LD_INT 1
25549: ARRAY
25550: PPUSH
25551: CALL_OW 313
25555: PUSH
25556: LD_INT 6
25558: EQUAL
25559: OR
25560: IFFALSE 25580
// f := Delete ( f , 1 ) ;
25562: LD_ADDR_VAR 0 12
25566: PUSH
25567: LD_VAR 0 12
25571: PPUSH
25572: LD_INT 1
25574: PPUSH
25575: CALL_OW 3
25579: ST_TO_ADDR
// if not f then
25580: LD_VAR 0 12
25584: NOT
25585: IFFALSE 25603
// begin x := x + 2 ;
25587: LD_ADDR_VAR 0 13
25591: PUSH
25592: LD_VAR 0 13
25596: PUSH
25597: LD_INT 2
25599: PLUS
25600: ST_TO_ADDR
// continue ;
25601: GO 25401
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25603: LD_VAR 0 12
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: PPUSH
25612: CALL_OW 266
25616: PUSH
25617: LD_INT 5
25619: EQUAL
25620: IFFALSE 25694
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25622: LD_VAR 0 12
25626: PUSH
25627: LD_INT 1
25629: ARRAY
25630: PPUSH
25631: CALL_OW 313
25635: PUSH
25636: LD_INT 3
25638: LESS
25639: IFFALSE 25675
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25641: LD_INT 0
25643: PPUSH
25644: LD_INT 5
25646: PUSH
25647: LD_INT 8
25649: PUSH
25650: LD_INT 9
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: LIST
25657: PUSH
25658: LD_VAR 0 17
25662: ARRAY
25663: PPUSH
25664: LD_VAR 0 4
25668: PPUSH
25669: CALL_OW 380
25673: GO 25692
// PrepareHuman ( false , i , skill ) ;
25675: LD_INT 0
25677: PPUSH
25678: LD_VAR 0 8
25682: PPUSH
25683: LD_VAR 0 4
25687: PPUSH
25688: CALL_OW 380
// end else
25692: GO 25711
// PrepareHuman ( false , i , skill ) ;
25694: LD_INT 0
25696: PPUSH
25697: LD_VAR 0 8
25701: PPUSH
25702: LD_VAR 0 4
25706: PPUSH
25707: CALL_OW 380
// un := CreateHuman ;
25711: LD_ADDR_VAR 0 14
25715: PUSH
25716: CALL_OW 44
25720: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25721: LD_ADDR_VAR 0 7
25725: PUSH
25726: LD_VAR 0 7
25730: PPUSH
25731: LD_INT 1
25733: PPUSH
25734: LD_VAR 0 14
25738: PPUSH
25739: CALL_OW 2
25743: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25744: LD_VAR 0 14
25748: PPUSH
25749: LD_VAR 0 12
25753: PUSH
25754: LD_INT 1
25756: ARRAY
25757: PPUSH
25758: CALL_OW 52
// end ;
25762: GO 25401
25764: POP
25765: POP
// end ;
25766: GO 24703
25768: POP
25769: POP
// result := result ^ buildings ;
25770: LD_ADDR_VAR 0 7
25774: PUSH
25775: LD_VAR 0 7
25779: PUSH
25780: LD_VAR 0 18
25784: ADD
25785: ST_TO_ADDR
// end else
25786: GO 25929
// begin for i = 1 to personel do
25788: LD_ADDR_VAR 0 8
25792: PUSH
25793: DOUBLE
25794: LD_INT 1
25796: DEC
25797: ST_TO_ADDR
25798: LD_VAR 0 6
25802: PUSH
25803: FOR_TO
25804: IFFALSE 25927
// begin if i > 4 then
25806: LD_VAR 0 8
25810: PUSH
25811: LD_INT 4
25813: GREATER
25814: IFFALSE 25818
// break ;
25816: GO 25927
// x := personel [ i ] ;
25818: LD_ADDR_VAR 0 13
25822: PUSH
25823: LD_VAR 0 6
25827: PUSH
25828: LD_VAR 0 8
25832: ARRAY
25833: ST_TO_ADDR
// if x = - 1 then
25834: LD_VAR 0 13
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: EQUAL
25843: IFFALSE 25847
// continue ;
25845: GO 25803
// PrepareHuman ( false , i , skill ) ;
25847: LD_INT 0
25849: PPUSH
25850: LD_VAR 0 8
25854: PPUSH
25855: LD_VAR 0 4
25859: PPUSH
25860: CALL_OW 380
// un := CreateHuman ;
25864: LD_ADDR_VAR 0 14
25868: PUSH
25869: CALL_OW 44
25873: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25874: LD_VAR 0 14
25878: PPUSH
25879: LD_VAR 0 1
25883: PPUSH
25884: CALL_OW 250
25888: PPUSH
25889: LD_VAR 0 1
25893: PPUSH
25894: CALL_OW 251
25898: PPUSH
25899: LD_INT 10
25901: PPUSH
25902: LD_INT 0
25904: PPUSH
25905: CALL_OW 50
// result := result ^ un ;
25909: LD_ADDR_VAR 0 7
25913: PUSH
25914: LD_VAR 0 7
25918: PUSH
25919: LD_VAR 0 14
25923: ADD
25924: ST_TO_ADDR
// end ;
25925: GO 25803
25927: POP
25928: POP
// end ; end ;
25929: LD_VAR 0 7
25933: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25934: LD_INT 0
25936: PPUSH
25937: PPUSH
25938: PPUSH
25939: PPUSH
25940: PPUSH
25941: PPUSH
25942: PPUSH
25943: PPUSH
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
// result := false ;
25952: LD_ADDR_VAR 0 3
25956: PUSH
25957: LD_INT 0
25959: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25960: LD_VAR 0 1
25964: NOT
25965: PUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 266
25975: PUSH
25976: LD_INT 32
25978: PUSH
25979: LD_INT 33
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: IN
25986: NOT
25987: OR
25988: IFFALSE 25992
// exit ;
25990: GO 27101
// nat := GetNation ( tower ) ;
25992: LD_ADDR_VAR 0 12
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 248
26006: ST_TO_ADDR
// side := GetSide ( tower ) ;
26007: LD_ADDR_VAR 0 16
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 255
26021: ST_TO_ADDR
// x := GetX ( tower ) ;
26022: LD_ADDR_VAR 0 10
26026: PUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 250
26036: ST_TO_ADDR
// y := GetY ( tower ) ;
26037: LD_ADDR_VAR 0 11
26041: PUSH
26042: LD_VAR 0 1
26046: PPUSH
26047: CALL_OW 251
26051: ST_TO_ADDR
// if not x or not y then
26052: LD_VAR 0 10
26056: NOT
26057: PUSH
26058: LD_VAR 0 11
26062: NOT
26063: OR
26064: IFFALSE 26068
// exit ;
26066: GO 27101
// weapon := 0 ;
26068: LD_ADDR_VAR 0 18
26072: PUSH
26073: LD_INT 0
26075: ST_TO_ADDR
// fac_list := [ ] ;
26076: LD_ADDR_VAR 0 17
26080: PUSH
26081: EMPTY
26082: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26083: LD_ADDR_VAR 0 6
26087: PUSH
26088: LD_VAR 0 1
26092: PPUSH
26093: CALL_OW 274
26097: PPUSH
26098: LD_VAR 0 2
26102: PPUSH
26103: LD_INT 0
26105: PPUSH
26106: CALL 23672 0 3
26110: PPUSH
26111: LD_INT 30
26113: PUSH
26114: LD_INT 3
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PPUSH
26121: CALL_OW 72
26125: ST_TO_ADDR
// if not factories then
26126: LD_VAR 0 6
26130: NOT
26131: IFFALSE 26135
// exit ;
26133: GO 27101
// for i in factories do
26135: LD_ADDR_VAR 0 8
26139: PUSH
26140: LD_VAR 0 6
26144: PUSH
26145: FOR_IN
26146: IFFALSE 26171
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26148: LD_ADDR_VAR 0 17
26152: PUSH
26153: LD_VAR 0 17
26157: PUSH
26158: LD_VAR 0 8
26162: PPUSH
26163: CALL_OW 478
26167: UNION
26168: ST_TO_ADDR
26169: GO 26145
26171: POP
26172: POP
// if not fac_list then
26173: LD_VAR 0 17
26177: NOT
26178: IFFALSE 26182
// exit ;
26180: GO 27101
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26182: LD_ADDR_VAR 0 5
26186: PUSH
26187: LD_INT 4
26189: PUSH
26190: LD_INT 5
26192: PUSH
26193: LD_INT 9
26195: PUSH
26196: LD_INT 10
26198: PUSH
26199: LD_INT 6
26201: PUSH
26202: LD_INT 7
26204: PUSH
26205: LD_INT 11
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 27
26219: PUSH
26220: LD_INT 28
26222: PUSH
26223: LD_INT 26
26225: PUSH
26226: LD_INT 30
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 43
26237: PUSH
26238: LD_INT 44
26240: PUSH
26241: LD_INT 46
26243: PUSH
26244: LD_INT 45
26246: PUSH
26247: LD_INT 47
26249: PUSH
26250: LD_INT 49
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: LIST
26265: PUSH
26266: LD_VAR 0 12
26270: ARRAY
26271: ST_TO_ADDR
// list := list isect fac_list ;
26272: LD_ADDR_VAR 0 5
26276: PUSH
26277: LD_VAR 0 5
26281: PUSH
26282: LD_VAR 0 17
26286: ISECT
26287: ST_TO_ADDR
// if not list then
26288: LD_VAR 0 5
26292: NOT
26293: IFFALSE 26297
// exit ;
26295: GO 27101
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26297: LD_VAR 0 12
26301: PUSH
26302: LD_INT 3
26304: EQUAL
26305: PUSH
26306: LD_INT 49
26308: PUSH
26309: LD_VAR 0 5
26313: IN
26314: AND
26315: PUSH
26316: LD_INT 31
26318: PPUSH
26319: LD_VAR 0 16
26323: PPUSH
26324: CALL_OW 321
26328: PUSH
26329: LD_INT 2
26331: EQUAL
26332: AND
26333: IFFALSE 26393
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26335: LD_INT 22
26337: PUSH
26338: LD_VAR 0 16
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 35
26349: PUSH
26350: LD_INT 49
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 91
26359: PUSH
26360: LD_VAR 0 1
26364: PUSH
26365: LD_INT 10
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: LIST
26377: PPUSH
26378: CALL_OW 69
26382: NOT
26383: IFFALSE 26393
// weapon := ru_time_lapser ;
26385: LD_ADDR_VAR 0 18
26389: PUSH
26390: LD_INT 49
26392: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26393: LD_VAR 0 12
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: IN
26408: PUSH
26409: LD_INT 11
26411: PUSH
26412: LD_VAR 0 5
26416: IN
26417: PUSH
26418: LD_INT 30
26420: PUSH
26421: LD_VAR 0 5
26425: IN
26426: OR
26427: AND
26428: PUSH
26429: LD_INT 6
26431: PPUSH
26432: LD_VAR 0 16
26436: PPUSH
26437: CALL_OW 321
26441: PUSH
26442: LD_INT 2
26444: EQUAL
26445: AND
26446: IFFALSE 26611
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26448: LD_INT 22
26450: PUSH
26451: LD_VAR 0 16
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 35
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 35
26475: PUSH
26476: LD_INT 30
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 91
26490: PUSH
26491: LD_VAR 0 1
26495: PUSH
26496: LD_INT 18
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: LIST
26508: PPUSH
26509: CALL_OW 69
26513: NOT
26514: PUSH
26515: LD_INT 22
26517: PUSH
26518: LD_VAR 0 16
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 30
26532: PUSH
26533: LD_INT 32
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 30
26542: PUSH
26543: LD_INT 33
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 91
26557: PUSH
26558: LD_VAR 0 1
26562: PUSH
26563: LD_INT 12
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: PPUSH
26579: CALL_OW 69
26583: PUSH
26584: LD_INT 2
26586: GREATER
26587: AND
26588: IFFALSE 26611
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26590: LD_ADDR_VAR 0 18
26594: PUSH
26595: LD_INT 11
26597: PUSH
26598: LD_INT 30
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_VAR 0 12
26609: ARRAY
26610: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26611: LD_VAR 0 18
26615: NOT
26616: PUSH
26617: LD_INT 40
26619: PPUSH
26620: LD_VAR 0 16
26624: PPUSH
26625: CALL_OW 321
26629: PUSH
26630: LD_INT 2
26632: EQUAL
26633: AND
26634: PUSH
26635: LD_INT 7
26637: PUSH
26638: LD_VAR 0 5
26642: IN
26643: PUSH
26644: LD_INT 28
26646: PUSH
26647: LD_VAR 0 5
26651: IN
26652: OR
26653: PUSH
26654: LD_INT 45
26656: PUSH
26657: LD_VAR 0 5
26661: IN
26662: OR
26663: AND
26664: IFFALSE 26918
// begin hex := GetHexInfo ( x , y ) ;
26666: LD_ADDR_VAR 0 4
26670: PUSH
26671: LD_VAR 0 10
26675: PPUSH
26676: LD_VAR 0 11
26680: PPUSH
26681: CALL_OW 546
26685: ST_TO_ADDR
// if hex [ 1 ] then
26686: LD_VAR 0 4
26690: PUSH
26691: LD_INT 1
26693: ARRAY
26694: IFFALSE 26698
// exit ;
26696: GO 27101
// height := hex [ 2 ] ;
26698: LD_ADDR_VAR 0 15
26702: PUSH
26703: LD_VAR 0 4
26707: PUSH
26708: LD_INT 2
26710: ARRAY
26711: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26712: LD_ADDR_VAR 0 14
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: LD_INT 5
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: ST_TO_ADDR
// for i in tmp do
26735: LD_ADDR_VAR 0 8
26739: PUSH
26740: LD_VAR 0 14
26744: PUSH
26745: FOR_IN
26746: IFFALSE 26916
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26748: LD_ADDR_VAR 0 9
26752: PUSH
26753: LD_VAR 0 10
26757: PPUSH
26758: LD_VAR 0 8
26762: PPUSH
26763: LD_INT 5
26765: PPUSH
26766: CALL_OW 272
26770: PUSH
26771: LD_VAR 0 11
26775: PPUSH
26776: LD_VAR 0 8
26780: PPUSH
26781: LD_INT 5
26783: PPUSH
26784: CALL_OW 273
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26793: LD_VAR 0 9
26797: PUSH
26798: LD_INT 1
26800: ARRAY
26801: PPUSH
26802: LD_VAR 0 9
26806: PUSH
26807: LD_INT 2
26809: ARRAY
26810: PPUSH
26811: CALL_OW 488
26815: IFFALSE 26914
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26817: LD_ADDR_VAR 0 4
26821: PUSH
26822: LD_VAR 0 9
26826: PUSH
26827: LD_INT 1
26829: ARRAY
26830: PPUSH
26831: LD_VAR 0 9
26835: PUSH
26836: LD_INT 2
26838: ARRAY
26839: PPUSH
26840: CALL_OW 546
26844: ST_TO_ADDR
// if hex [ 1 ] then
26845: LD_VAR 0 4
26849: PUSH
26850: LD_INT 1
26852: ARRAY
26853: IFFALSE 26857
// continue ;
26855: GO 26745
// h := hex [ 2 ] ;
26857: LD_ADDR_VAR 0 13
26861: PUSH
26862: LD_VAR 0 4
26866: PUSH
26867: LD_INT 2
26869: ARRAY
26870: ST_TO_ADDR
// if h + 7 < height then
26871: LD_VAR 0 13
26875: PUSH
26876: LD_INT 7
26878: PLUS
26879: PUSH
26880: LD_VAR 0 15
26884: LESS
26885: IFFALSE 26914
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26887: LD_ADDR_VAR 0 18
26891: PUSH
26892: LD_INT 7
26894: PUSH
26895: LD_INT 28
26897: PUSH
26898: LD_INT 45
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: PUSH
26906: LD_VAR 0 12
26910: ARRAY
26911: ST_TO_ADDR
// break ;
26912: GO 26916
// end ; end ; end ;
26914: GO 26745
26916: POP
26917: POP
// end ; if not weapon then
26918: LD_VAR 0 18
26922: NOT
26923: IFFALSE 26983
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26925: LD_ADDR_VAR 0 5
26929: PUSH
26930: LD_VAR 0 5
26934: PUSH
26935: LD_INT 11
26937: PUSH
26938: LD_INT 30
26940: PUSH
26941: LD_INT 49
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: DIFF
26949: ST_TO_ADDR
// if not list then
26950: LD_VAR 0 5
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 27101
// weapon := list [ rand ( 1 , list ) ] ;
26959: LD_ADDR_VAR 0 18
26963: PUSH
26964: LD_VAR 0 5
26968: PUSH
26969: LD_INT 1
26971: PPUSH
26972: LD_VAR 0 5
26976: PPUSH
26977: CALL_OW 12
26981: ARRAY
26982: ST_TO_ADDR
// end ; if weapon then
26983: LD_VAR 0 18
26987: IFFALSE 27101
// begin tmp := CostOfWeapon ( weapon ) ;
26989: LD_ADDR_VAR 0 14
26993: PUSH
26994: LD_VAR 0 18
26998: PPUSH
26999: CALL_OW 451
27003: ST_TO_ADDR
// j := GetBase ( tower ) ;
27004: LD_ADDR_VAR 0 9
27008: PUSH
27009: LD_VAR 0 1
27013: PPUSH
27014: CALL_OW 274
27018: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27019: LD_VAR 0 9
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 275
27031: PUSH
27032: LD_VAR 0 14
27036: PUSH
27037: LD_INT 1
27039: ARRAY
27040: GREATEREQUAL
27041: PUSH
27042: LD_VAR 0 9
27046: PPUSH
27047: LD_INT 2
27049: PPUSH
27050: CALL_OW 275
27054: PUSH
27055: LD_VAR 0 14
27059: PUSH
27060: LD_INT 2
27062: ARRAY
27063: GREATEREQUAL
27064: AND
27065: PUSH
27066: LD_VAR 0 9
27070: PPUSH
27071: LD_INT 3
27073: PPUSH
27074: CALL_OW 275
27078: PUSH
27079: LD_VAR 0 14
27083: PUSH
27084: LD_INT 3
27086: ARRAY
27087: GREATEREQUAL
27088: AND
27089: IFFALSE 27101
// result := weapon ;
27091: LD_ADDR_VAR 0 3
27095: PUSH
27096: LD_VAR 0 18
27100: ST_TO_ADDR
// end ; end ;
27101: LD_VAR 0 3
27105: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27106: LD_INT 0
27108: PPUSH
27109: PPUSH
// result := true ;
27110: LD_ADDR_VAR 0 3
27114: PUSH
27115: LD_INT 1
27117: ST_TO_ADDR
// if array1 = array2 then
27118: LD_VAR 0 1
27122: PUSH
27123: LD_VAR 0 2
27127: EQUAL
27128: IFFALSE 27188
// begin for i = 1 to array1 do
27130: LD_ADDR_VAR 0 4
27134: PUSH
27135: DOUBLE
27136: LD_INT 1
27138: DEC
27139: ST_TO_ADDR
27140: LD_VAR 0 1
27144: PUSH
27145: FOR_TO
27146: IFFALSE 27184
// if array1 [ i ] <> array2 [ i ] then
27148: LD_VAR 0 1
27152: PUSH
27153: LD_VAR 0 4
27157: ARRAY
27158: PUSH
27159: LD_VAR 0 2
27163: PUSH
27164: LD_VAR 0 4
27168: ARRAY
27169: NONEQUAL
27170: IFFALSE 27182
// begin result := false ;
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 0
27179: ST_TO_ADDR
// break ;
27180: GO 27184
// end ;
27182: GO 27145
27184: POP
27185: POP
// end else
27186: GO 27196
// result := false ;
27188: LD_ADDR_VAR 0 3
27192: PUSH
27193: LD_INT 0
27195: ST_TO_ADDR
// end ;
27196: LD_VAR 0 3
27200: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27201: LD_INT 0
27203: PPUSH
27204: PPUSH
// if not array1 or not array2 then
27205: LD_VAR 0 1
27209: NOT
27210: PUSH
27211: LD_VAR 0 2
27215: NOT
27216: OR
27217: IFFALSE 27221
// exit ;
27219: GO 27285
// result := true ;
27221: LD_ADDR_VAR 0 3
27225: PUSH
27226: LD_INT 1
27228: ST_TO_ADDR
// for i = 1 to array1 do
27229: LD_ADDR_VAR 0 4
27233: PUSH
27234: DOUBLE
27235: LD_INT 1
27237: DEC
27238: ST_TO_ADDR
27239: LD_VAR 0 1
27243: PUSH
27244: FOR_TO
27245: IFFALSE 27283
// if array1 [ i ] <> array2 [ i ] then
27247: LD_VAR 0 1
27251: PUSH
27252: LD_VAR 0 4
27256: ARRAY
27257: PUSH
27258: LD_VAR 0 2
27262: PUSH
27263: LD_VAR 0 4
27267: ARRAY
27268: NONEQUAL
27269: IFFALSE 27281
// begin result := false ;
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: LD_INT 0
27278: ST_TO_ADDR
// break ;
27279: GO 27283
// end ;
27281: GO 27244
27283: POP
27284: POP
// end ;
27285: LD_VAR 0 3
27289: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
// pom := GetBase ( fac ) ;
27295: LD_ADDR_VAR 0 5
27299: PUSH
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL_OW 274
27309: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27310: LD_ADDR_VAR 0 4
27314: PUSH
27315: LD_VAR 0 2
27319: PUSH
27320: LD_INT 1
27322: ARRAY
27323: PPUSH
27324: LD_VAR 0 2
27328: PUSH
27329: LD_INT 2
27331: ARRAY
27332: PPUSH
27333: LD_VAR 0 2
27337: PUSH
27338: LD_INT 3
27340: ARRAY
27341: PPUSH
27342: LD_VAR 0 2
27346: PUSH
27347: LD_INT 4
27349: ARRAY
27350: PPUSH
27351: CALL_OW 449
27355: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27356: LD_ADDR_VAR 0 3
27360: PUSH
27361: LD_VAR 0 5
27365: PPUSH
27366: LD_INT 1
27368: PPUSH
27369: CALL_OW 275
27373: PUSH
27374: LD_VAR 0 4
27378: PUSH
27379: LD_INT 1
27381: ARRAY
27382: GREATEREQUAL
27383: PUSH
27384: LD_VAR 0 5
27388: PPUSH
27389: LD_INT 2
27391: PPUSH
27392: CALL_OW 275
27396: PUSH
27397: LD_VAR 0 4
27401: PUSH
27402: LD_INT 2
27404: ARRAY
27405: GREATEREQUAL
27406: AND
27407: PUSH
27408: LD_VAR 0 5
27412: PPUSH
27413: LD_INT 3
27415: PPUSH
27416: CALL_OW 275
27420: PUSH
27421: LD_VAR 0 4
27425: PUSH
27426: LD_INT 3
27428: ARRAY
27429: GREATEREQUAL
27430: AND
27431: ST_TO_ADDR
// end ;
27432: LD_VAR 0 3
27436: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27437: LD_INT 0
27439: PPUSH
27440: PPUSH
27441: PPUSH
27442: PPUSH
// pom := GetBase ( building ) ;
27443: LD_ADDR_VAR 0 3
27447: PUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL_OW 274
27457: ST_TO_ADDR
// if not pom then
27458: LD_VAR 0 3
27462: NOT
27463: IFFALSE 27467
// exit ;
27465: GO 27637
// btype := GetBType ( building ) ;
27467: LD_ADDR_VAR 0 5
27471: PUSH
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 266
27481: ST_TO_ADDR
// if btype = b_armoury then
27482: LD_VAR 0 5
27486: PUSH
27487: LD_INT 4
27489: EQUAL
27490: IFFALSE 27500
// btype := b_barracks ;
27492: LD_ADDR_VAR 0 5
27496: PUSH
27497: LD_INT 5
27499: ST_TO_ADDR
// if btype = b_depot then
27500: LD_VAR 0 5
27504: PUSH
27505: LD_INT 0
27507: EQUAL
27508: IFFALSE 27518
// btype := b_warehouse ;
27510: LD_ADDR_VAR 0 5
27514: PUSH
27515: LD_INT 1
27517: ST_TO_ADDR
// if btype = b_workshop then
27518: LD_VAR 0 5
27522: PUSH
27523: LD_INT 2
27525: EQUAL
27526: IFFALSE 27536
// btype := b_factory ;
27528: LD_ADDR_VAR 0 5
27532: PUSH
27533: LD_INT 3
27535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27536: LD_ADDR_VAR 0 4
27540: PUSH
27541: LD_VAR 0 5
27545: PPUSH
27546: LD_VAR 0 1
27550: PPUSH
27551: CALL_OW 248
27555: PPUSH
27556: CALL_OW 450
27560: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27561: LD_ADDR_VAR 0 2
27565: PUSH
27566: LD_VAR 0 3
27570: PPUSH
27571: LD_INT 1
27573: PPUSH
27574: CALL_OW 275
27578: PUSH
27579: LD_VAR 0 4
27583: PUSH
27584: LD_INT 1
27586: ARRAY
27587: GREATEREQUAL
27588: PUSH
27589: LD_VAR 0 3
27593: PPUSH
27594: LD_INT 2
27596: PPUSH
27597: CALL_OW 275
27601: PUSH
27602: LD_VAR 0 4
27606: PUSH
27607: LD_INT 2
27609: ARRAY
27610: GREATEREQUAL
27611: AND
27612: PUSH
27613: LD_VAR 0 3
27617: PPUSH
27618: LD_INT 3
27620: PPUSH
27621: CALL_OW 275
27625: PUSH
27626: LD_VAR 0 4
27630: PUSH
27631: LD_INT 3
27633: ARRAY
27634: GREATEREQUAL
27635: AND
27636: ST_TO_ADDR
// end ;
27637: LD_VAR 0 2
27641: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27642: LD_INT 0
27644: PPUSH
27645: PPUSH
27646: PPUSH
// pom := GetBase ( building ) ;
27647: LD_ADDR_VAR 0 4
27651: PUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 274
27661: ST_TO_ADDR
// if not pom then
27662: LD_VAR 0 4
27666: NOT
27667: IFFALSE 27671
// exit ;
27669: GO 27772
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27671: LD_ADDR_VAR 0 5
27675: PUSH
27676: LD_VAR 0 2
27680: PPUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 248
27690: PPUSH
27691: CALL_OW 450
27695: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_VAR 0 4
27705: PPUSH
27706: LD_INT 1
27708: PPUSH
27709: CALL_OW 275
27713: PUSH
27714: LD_VAR 0 5
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: GREATEREQUAL
27723: PUSH
27724: LD_VAR 0 4
27728: PPUSH
27729: LD_INT 2
27731: PPUSH
27732: CALL_OW 275
27736: PUSH
27737: LD_VAR 0 5
27741: PUSH
27742: LD_INT 2
27744: ARRAY
27745: GREATEREQUAL
27746: AND
27747: PUSH
27748: LD_VAR 0 4
27752: PPUSH
27753: LD_INT 3
27755: PPUSH
27756: CALL_OW 275
27760: PUSH
27761: LD_VAR 0 5
27765: PUSH
27766: LD_INT 3
27768: ARRAY
27769: GREATEREQUAL
27770: AND
27771: ST_TO_ADDR
// end ;
27772: LD_VAR 0 3
27776: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27777: LD_INT 0
27779: PPUSH
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
27784: PPUSH
27785: PPUSH
27786: PPUSH
27787: PPUSH
27788: PPUSH
27789: PPUSH
// result := false ;
27790: LD_ADDR_VAR 0 8
27794: PUSH
27795: LD_INT 0
27797: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27798: LD_VAR 0 5
27802: NOT
27803: PUSH
27804: LD_VAR 0 1
27808: NOT
27809: OR
27810: PUSH
27811: LD_VAR 0 2
27815: NOT
27816: OR
27817: PUSH
27818: LD_VAR 0 3
27822: NOT
27823: OR
27824: IFFALSE 27828
// exit ;
27826: GO 28642
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27828: LD_ADDR_VAR 0 14
27832: PUSH
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_VAR 0 2
27842: PPUSH
27843: LD_VAR 0 3
27847: PPUSH
27848: LD_VAR 0 4
27852: PPUSH
27853: LD_VAR 0 5
27857: PUSH
27858: LD_INT 1
27860: ARRAY
27861: PPUSH
27862: CALL_OW 248
27866: PPUSH
27867: LD_INT 0
27869: PPUSH
27870: CALL 29895 0 6
27874: ST_TO_ADDR
// if not hexes then
27875: LD_VAR 0 14
27879: NOT
27880: IFFALSE 27884
// exit ;
27882: GO 28642
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27884: LD_ADDR_VAR 0 17
27888: PUSH
27889: LD_VAR 0 5
27893: PPUSH
27894: LD_INT 22
27896: PUSH
27897: LD_VAR 0 13
27901: PPUSH
27902: CALL_OW 255
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 30
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 30
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: LIST
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PPUSH
27943: CALL_OW 72
27947: ST_TO_ADDR
// for i = 1 to hexes do
27948: LD_ADDR_VAR 0 9
27952: PUSH
27953: DOUBLE
27954: LD_INT 1
27956: DEC
27957: ST_TO_ADDR
27958: LD_VAR 0 14
27962: PUSH
27963: FOR_TO
27964: IFFALSE 28640
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27966: LD_ADDR_VAR 0 13
27970: PUSH
27971: LD_VAR 0 14
27975: PUSH
27976: LD_VAR 0 9
27980: ARRAY
27981: PUSH
27982: LD_INT 1
27984: ARRAY
27985: PPUSH
27986: LD_VAR 0 14
27990: PUSH
27991: LD_VAR 0 9
27995: ARRAY
27996: PUSH
27997: LD_INT 2
27999: ARRAY
28000: PPUSH
28001: CALL_OW 428
28005: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28006: LD_VAR 0 14
28010: PUSH
28011: LD_VAR 0 9
28015: ARRAY
28016: PUSH
28017: LD_INT 1
28019: ARRAY
28020: PPUSH
28021: LD_VAR 0 14
28025: PUSH
28026: LD_VAR 0 9
28030: ARRAY
28031: PUSH
28032: LD_INT 2
28034: ARRAY
28035: PPUSH
28036: CALL_OW 351
28040: PUSH
28041: LD_VAR 0 14
28045: PUSH
28046: LD_VAR 0 9
28050: ARRAY
28051: PUSH
28052: LD_INT 1
28054: ARRAY
28055: PPUSH
28056: LD_VAR 0 14
28060: PUSH
28061: LD_VAR 0 9
28065: ARRAY
28066: PUSH
28067: LD_INT 2
28069: ARRAY
28070: PPUSH
28071: CALL_OW 488
28075: NOT
28076: OR
28077: PUSH
28078: LD_VAR 0 13
28082: PPUSH
28083: CALL_OW 247
28087: PUSH
28088: LD_INT 3
28090: EQUAL
28091: OR
28092: IFFALSE 28098
// exit ;
28094: POP
28095: POP
28096: GO 28642
// if not tmp then
28098: LD_VAR 0 13
28102: NOT
28103: IFFALSE 28107
// continue ;
28105: GO 27963
// result := true ;
28107: LD_ADDR_VAR 0 8
28111: PUSH
28112: LD_INT 1
28114: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28115: LD_VAR 0 6
28119: PUSH
28120: LD_VAR 0 13
28124: PPUSH
28125: CALL_OW 247
28129: PUSH
28130: LD_INT 2
28132: EQUAL
28133: AND
28134: PUSH
28135: LD_VAR 0 13
28139: PPUSH
28140: CALL_OW 263
28144: PUSH
28145: LD_INT 1
28147: EQUAL
28148: AND
28149: IFFALSE 28313
// begin if IsDrivenBy ( tmp ) then
28151: LD_VAR 0 13
28155: PPUSH
28156: CALL_OW 311
28160: IFFALSE 28164
// continue ;
28162: GO 27963
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28164: LD_VAR 0 6
28168: PPUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 60
28174: PUSH
28175: EMPTY
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 3
28184: PUSH
28185: LD_INT 55
28187: PUSH
28188: EMPTY
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PPUSH
28199: CALL_OW 72
28203: IFFALSE 28311
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28205: LD_ADDR_VAR 0 18
28209: PUSH
28210: LD_VAR 0 6
28214: PPUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 60
28220: PUSH
28221: EMPTY
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: LD_INT 55
28233: PUSH
28234: EMPTY
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PPUSH
28245: CALL_OW 72
28249: PUSH
28250: LD_INT 1
28252: ARRAY
28253: ST_TO_ADDR
// if IsInUnit ( driver ) then
28254: LD_VAR 0 18
28258: PPUSH
28259: CALL_OW 310
28263: IFFALSE 28274
// ComExit ( driver ) ;
28265: LD_VAR 0 18
28269: PPUSH
28270: CALL 53696 0 1
// AddComEnterUnit ( driver , tmp ) ;
28274: LD_VAR 0 18
28278: PPUSH
28279: LD_VAR 0 13
28283: PPUSH
28284: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28288: LD_VAR 0 18
28292: PPUSH
28293: LD_VAR 0 7
28297: PPUSH
28298: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28302: LD_VAR 0 18
28306: PPUSH
28307: CALL_OW 181
// end ; continue ;
28311: GO 27963
// end ; if not cleaners or not tmp in cleaners then
28313: LD_VAR 0 6
28317: NOT
28318: PUSH
28319: LD_VAR 0 13
28323: PUSH
28324: LD_VAR 0 6
28328: IN
28329: NOT
28330: OR
28331: IFFALSE 28638
// begin if dep then
28333: LD_VAR 0 17
28337: IFFALSE 28473
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28339: LD_ADDR_VAR 0 16
28343: PUSH
28344: LD_VAR 0 17
28348: PUSH
28349: LD_INT 1
28351: ARRAY
28352: PPUSH
28353: CALL_OW 250
28357: PPUSH
28358: LD_VAR 0 17
28362: PUSH
28363: LD_INT 1
28365: ARRAY
28366: PPUSH
28367: CALL_OW 254
28371: PPUSH
28372: LD_INT 5
28374: PPUSH
28375: CALL_OW 272
28379: PUSH
28380: LD_VAR 0 17
28384: PUSH
28385: LD_INT 1
28387: ARRAY
28388: PPUSH
28389: CALL_OW 251
28393: PPUSH
28394: LD_VAR 0 17
28398: PUSH
28399: LD_INT 1
28401: ARRAY
28402: PPUSH
28403: CALL_OW 254
28407: PPUSH
28408: LD_INT 5
28410: PPUSH
28411: CALL_OW 273
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28420: LD_VAR 0 16
28424: PUSH
28425: LD_INT 1
28427: ARRAY
28428: PPUSH
28429: LD_VAR 0 16
28433: PUSH
28434: LD_INT 2
28436: ARRAY
28437: PPUSH
28438: CALL_OW 488
28442: IFFALSE 28473
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28444: LD_VAR 0 13
28448: PPUSH
28449: LD_VAR 0 16
28453: PUSH
28454: LD_INT 1
28456: ARRAY
28457: PPUSH
28458: LD_VAR 0 16
28462: PUSH
28463: LD_INT 2
28465: ARRAY
28466: PPUSH
28467: CALL_OW 111
// continue ;
28471: GO 27963
// end ; end ; r := GetDir ( tmp ) ;
28473: LD_ADDR_VAR 0 15
28477: PUSH
28478: LD_VAR 0 13
28482: PPUSH
28483: CALL_OW 254
28487: ST_TO_ADDR
// if r = 5 then
28488: LD_VAR 0 15
28492: PUSH
28493: LD_INT 5
28495: EQUAL
28496: IFFALSE 28506
// r := 0 ;
28498: LD_ADDR_VAR 0 15
28502: PUSH
28503: LD_INT 0
28505: ST_TO_ADDR
// for j = r to 5 do
28506: LD_ADDR_VAR 0 10
28510: PUSH
28511: DOUBLE
28512: LD_VAR 0 15
28516: DEC
28517: ST_TO_ADDR
28518: LD_INT 5
28520: PUSH
28521: FOR_TO
28522: IFFALSE 28636
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28524: LD_ADDR_VAR 0 11
28528: PUSH
28529: LD_VAR 0 13
28533: PPUSH
28534: CALL_OW 250
28538: PPUSH
28539: LD_VAR 0 10
28543: PPUSH
28544: LD_INT 2
28546: PPUSH
28547: CALL_OW 272
28551: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28552: LD_ADDR_VAR 0 12
28556: PUSH
28557: LD_VAR 0 13
28561: PPUSH
28562: CALL_OW 251
28566: PPUSH
28567: LD_VAR 0 10
28571: PPUSH
28572: LD_INT 2
28574: PPUSH
28575: CALL_OW 273
28579: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28580: LD_VAR 0 11
28584: PPUSH
28585: LD_VAR 0 12
28589: PPUSH
28590: CALL_OW 488
28594: PUSH
28595: LD_VAR 0 11
28599: PPUSH
28600: LD_VAR 0 12
28604: PPUSH
28605: CALL_OW 428
28609: NOT
28610: AND
28611: IFFALSE 28634
// begin ComMoveXY ( tmp , _x , _y ) ;
28613: LD_VAR 0 13
28617: PPUSH
28618: LD_VAR 0 11
28622: PPUSH
28623: LD_VAR 0 12
28627: PPUSH
28628: CALL_OW 111
// break ;
28632: GO 28636
// end ; end ;
28634: GO 28521
28636: POP
28637: POP
// end ; end ;
28638: GO 27963
28640: POP
28641: POP
// end ;
28642: LD_VAR 0 8
28646: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28647: LD_INT 0
28649: PPUSH
// result := true ;
28650: LD_ADDR_VAR 0 3
28654: PUSH
28655: LD_INT 1
28657: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28658: LD_VAR 0 2
28662: PUSH
28663: LD_INT 24
28665: DOUBLE
28666: EQUAL
28667: IFTRUE 28677
28669: LD_INT 33
28671: DOUBLE
28672: EQUAL
28673: IFTRUE 28677
28675: GO 28702
28677: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28678: LD_ADDR_VAR 0 3
28682: PUSH
28683: LD_INT 32
28685: PPUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL_OW 321
28695: PUSH
28696: LD_INT 2
28698: EQUAL
28699: ST_TO_ADDR
28700: GO 29018
28702: LD_INT 20
28704: DOUBLE
28705: EQUAL
28706: IFTRUE 28710
28708: GO 28735
28710: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: LD_INT 6
28718: PPUSH
28719: LD_VAR 0 1
28723: PPUSH
28724: CALL_OW 321
28728: PUSH
28729: LD_INT 2
28731: EQUAL
28732: ST_TO_ADDR
28733: GO 29018
28735: LD_INT 22
28737: DOUBLE
28738: EQUAL
28739: IFTRUE 28749
28741: LD_INT 36
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28774
28749: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: LD_INT 15
28757: PPUSH
28758: LD_VAR 0 1
28762: PPUSH
28763: CALL_OW 321
28767: PUSH
28768: LD_INT 2
28770: EQUAL
28771: ST_TO_ADDR
28772: GO 29018
28774: LD_INT 30
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28782
28780: GO 28807
28782: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28783: LD_ADDR_VAR 0 3
28787: PUSH
28788: LD_INT 20
28790: PPUSH
28791: LD_VAR 0 1
28795: PPUSH
28796: CALL_OW 321
28800: PUSH
28801: LD_INT 2
28803: EQUAL
28804: ST_TO_ADDR
28805: GO 29018
28807: LD_INT 28
28809: DOUBLE
28810: EQUAL
28811: IFTRUE 28821
28813: LD_INT 21
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28846
28821: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28822: LD_ADDR_VAR 0 3
28826: PUSH
28827: LD_INT 21
28829: PPUSH
28830: LD_VAR 0 1
28834: PPUSH
28835: CALL_OW 321
28839: PUSH
28840: LD_INT 2
28842: EQUAL
28843: ST_TO_ADDR
28844: GO 29018
28846: LD_INT 16
28848: DOUBLE
28849: EQUAL
28850: IFTRUE 28854
28852: GO 28879
28854: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_INT 84
28862: PPUSH
28863: LD_VAR 0 1
28867: PPUSH
28868: CALL_OW 321
28872: PUSH
28873: LD_INT 2
28875: EQUAL
28876: ST_TO_ADDR
28877: GO 29018
28879: LD_INT 19
28881: DOUBLE
28882: EQUAL
28883: IFTRUE 28893
28885: LD_INT 23
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28918
28893: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_INT 83
28901: PPUSH
28902: LD_VAR 0 1
28906: PPUSH
28907: CALL_OW 321
28911: PUSH
28912: LD_INT 2
28914: EQUAL
28915: ST_TO_ADDR
28916: GO 29018
28918: LD_INT 17
28920: DOUBLE
28921: EQUAL
28922: IFTRUE 28926
28924: GO 28951
28926: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28927: LD_ADDR_VAR 0 3
28931: PUSH
28932: LD_INT 39
28934: PPUSH
28935: LD_VAR 0 1
28939: PPUSH
28940: CALL_OW 321
28944: PUSH
28945: LD_INT 2
28947: EQUAL
28948: ST_TO_ADDR
28949: GO 29018
28951: LD_INT 18
28953: DOUBLE
28954: EQUAL
28955: IFTRUE 28959
28957: GO 28984
28959: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: LD_INT 40
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 321
28977: PUSH
28978: LD_INT 2
28980: EQUAL
28981: ST_TO_ADDR
28982: GO 29018
28984: LD_INT 27
28986: DOUBLE
28987: EQUAL
28988: IFTRUE 28992
28990: GO 29017
28992: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28993: LD_ADDR_VAR 0 3
28997: PUSH
28998: LD_INT 35
29000: PPUSH
29001: LD_VAR 0 1
29005: PPUSH
29006: CALL_OW 321
29010: PUSH
29011: LD_INT 2
29013: EQUAL
29014: ST_TO_ADDR
29015: GO 29018
29017: POP
// end ;
29018: LD_VAR 0 3
29022: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29023: LD_INT 0
29025: PPUSH
29026: PPUSH
29027: PPUSH
29028: PPUSH
29029: PPUSH
29030: PPUSH
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
// result := false ;
29036: LD_ADDR_VAR 0 6
29040: PUSH
29041: LD_INT 0
29043: ST_TO_ADDR
// if btype = b_depot then
29044: LD_VAR 0 2
29048: PUSH
29049: LD_INT 0
29051: EQUAL
29052: IFFALSE 29064
// begin result := true ;
29054: LD_ADDR_VAR 0 6
29058: PUSH
29059: LD_INT 1
29061: ST_TO_ADDR
// exit ;
29062: GO 29890
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29064: LD_VAR 0 1
29068: NOT
29069: PUSH
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 266
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: IN
29090: NOT
29091: OR
29092: PUSH
29093: LD_VAR 0 2
29097: NOT
29098: OR
29099: PUSH
29100: LD_VAR 0 5
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: LD_INT 4
29119: PUSH
29120: LD_INT 5
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: IN
29131: NOT
29132: OR
29133: PUSH
29134: LD_VAR 0 3
29138: PPUSH
29139: LD_VAR 0 4
29143: PPUSH
29144: CALL_OW 488
29148: NOT
29149: OR
29150: IFFALSE 29154
// exit ;
29152: GO 29890
// side := GetSide ( depot ) ;
29154: LD_ADDR_VAR 0 9
29158: PUSH
29159: LD_VAR 0 1
29163: PPUSH
29164: CALL_OW 255
29168: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29169: LD_VAR 0 9
29173: PPUSH
29174: LD_VAR 0 2
29178: PPUSH
29179: CALL 28647 0 2
29183: NOT
29184: IFFALSE 29188
// exit ;
29186: GO 29890
// pom := GetBase ( depot ) ;
29188: LD_ADDR_VAR 0 10
29192: PUSH
29193: LD_VAR 0 1
29197: PPUSH
29198: CALL_OW 274
29202: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29203: LD_ADDR_VAR 0 11
29207: PUSH
29208: LD_VAR 0 2
29212: PPUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 248
29222: PPUSH
29223: CALL_OW 450
29227: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29228: LD_VAR 0 10
29232: PPUSH
29233: LD_INT 1
29235: PPUSH
29236: CALL_OW 275
29240: PUSH
29241: LD_VAR 0 11
29245: PUSH
29246: LD_INT 1
29248: ARRAY
29249: GREATEREQUAL
29250: PUSH
29251: LD_VAR 0 10
29255: PPUSH
29256: LD_INT 2
29258: PPUSH
29259: CALL_OW 275
29263: PUSH
29264: LD_VAR 0 11
29268: PUSH
29269: LD_INT 2
29271: ARRAY
29272: GREATEREQUAL
29273: AND
29274: PUSH
29275: LD_VAR 0 10
29279: PPUSH
29280: LD_INT 3
29282: PPUSH
29283: CALL_OW 275
29287: PUSH
29288: LD_VAR 0 11
29292: PUSH
29293: LD_INT 3
29295: ARRAY
29296: GREATEREQUAL
29297: AND
29298: NOT
29299: IFFALSE 29303
// exit ;
29301: GO 29890
// if GetBType ( depot ) = b_depot then
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 266
29312: PUSH
29313: LD_INT 0
29315: EQUAL
29316: IFFALSE 29328
// dist := 28 else
29318: LD_ADDR_VAR 0 14
29322: PUSH
29323: LD_INT 28
29325: ST_TO_ADDR
29326: GO 29336
// dist := 36 ;
29328: LD_ADDR_VAR 0 14
29332: PUSH
29333: LD_INT 36
29335: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29336: LD_VAR 0 1
29340: PPUSH
29341: LD_VAR 0 3
29345: PPUSH
29346: LD_VAR 0 4
29350: PPUSH
29351: CALL_OW 297
29355: PUSH
29356: LD_VAR 0 14
29360: GREATER
29361: IFFALSE 29365
// exit ;
29363: GO 29890
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29365: LD_ADDR_VAR 0 12
29369: PUSH
29370: LD_VAR 0 2
29374: PPUSH
29375: LD_VAR 0 3
29379: PPUSH
29380: LD_VAR 0 4
29384: PPUSH
29385: LD_VAR 0 5
29389: PPUSH
29390: LD_VAR 0 1
29394: PPUSH
29395: CALL_OW 248
29399: PPUSH
29400: LD_INT 0
29402: PPUSH
29403: CALL 29895 0 6
29407: ST_TO_ADDR
// if not hexes then
29408: LD_VAR 0 12
29412: NOT
29413: IFFALSE 29417
// exit ;
29415: GO 29890
// hex := GetHexInfo ( x , y ) ;
29417: LD_ADDR_VAR 0 15
29421: PUSH
29422: LD_VAR 0 3
29426: PPUSH
29427: LD_VAR 0 4
29431: PPUSH
29432: CALL_OW 546
29436: ST_TO_ADDR
// if hex [ 1 ] then
29437: LD_VAR 0 15
29441: PUSH
29442: LD_INT 1
29444: ARRAY
29445: IFFALSE 29449
// exit ;
29447: GO 29890
// height := hex [ 2 ] ;
29449: LD_ADDR_VAR 0 13
29453: PUSH
29454: LD_VAR 0 15
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: ST_TO_ADDR
// for i = 1 to hexes do
29463: LD_ADDR_VAR 0 7
29467: PUSH
29468: DOUBLE
29469: LD_INT 1
29471: DEC
29472: ST_TO_ADDR
29473: LD_VAR 0 12
29477: PUSH
29478: FOR_TO
29479: IFFALSE 29809
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29481: LD_VAR 0 12
29485: PUSH
29486: LD_VAR 0 7
29490: ARRAY
29491: PUSH
29492: LD_INT 1
29494: ARRAY
29495: PPUSH
29496: LD_VAR 0 12
29500: PUSH
29501: LD_VAR 0 7
29505: ARRAY
29506: PUSH
29507: LD_INT 2
29509: ARRAY
29510: PPUSH
29511: CALL_OW 488
29515: NOT
29516: PUSH
29517: LD_VAR 0 12
29521: PUSH
29522: LD_VAR 0 7
29526: ARRAY
29527: PUSH
29528: LD_INT 1
29530: ARRAY
29531: PPUSH
29532: LD_VAR 0 12
29536: PUSH
29537: LD_VAR 0 7
29541: ARRAY
29542: PUSH
29543: LD_INT 2
29545: ARRAY
29546: PPUSH
29547: CALL_OW 428
29551: PUSH
29552: LD_INT 0
29554: GREATER
29555: OR
29556: PUSH
29557: LD_VAR 0 12
29561: PUSH
29562: LD_VAR 0 7
29566: ARRAY
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: PPUSH
29572: LD_VAR 0 12
29576: PUSH
29577: LD_VAR 0 7
29581: ARRAY
29582: PUSH
29583: LD_INT 2
29585: ARRAY
29586: PPUSH
29587: CALL_OW 351
29591: OR
29592: IFFALSE 29598
// exit ;
29594: POP
29595: POP
29596: GO 29890
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29598: LD_ADDR_VAR 0 8
29602: PUSH
29603: LD_VAR 0 12
29607: PUSH
29608: LD_VAR 0 7
29612: ARRAY
29613: PUSH
29614: LD_INT 1
29616: ARRAY
29617: PPUSH
29618: LD_VAR 0 12
29622: PUSH
29623: LD_VAR 0 7
29627: ARRAY
29628: PUSH
29629: LD_INT 2
29631: ARRAY
29632: PPUSH
29633: CALL_OW 546
29637: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29638: LD_VAR 0 8
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: PUSH
29647: LD_VAR 0 8
29651: PUSH
29652: LD_INT 2
29654: ARRAY
29655: PUSH
29656: LD_VAR 0 13
29660: PUSH
29661: LD_INT 2
29663: PLUS
29664: GREATER
29665: OR
29666: PUSH
29667: LD_VAR 0 8
29671: PUSH
29672: LD_INT 2
29674: ARRAY
29675: PUSH
29676: LD_VAR 0 13
29680: PUSH
29681: LD_INT 2
29683: MINUS
29684: LESS
29685: OR
29686: PUSH
29687: LD_VAR 0 8
29691: PUSH
29692: LD_INT 3
29694: ARRAY
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 8
29701: PUSH
29702: LD_INT 9
29704: PUSH
29705: LD_INT 10
29707: PUSH
29708: LD_INT 11
29710: PUSH
29711: LD_INT 12
29713: PUSH
29714: LD_INT 13
29716: PUSH
29717: LD_INT 16
29719: PUSH
29720: LD_INT 17
29722: PUSH
29723: LD_INT 18
29725: PUSH
29726: LD_INT 19
29728: PUSH
29729: LD_INT 20
29731: PUSH
29732: LD_INT 21
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: IN
29750: NOT
29751: OR
29752: PUSH
29753: LD_VAR 0 8
29757: PUSH
29758: LD_INT 5
29760: ARRAY
29761: NOT
29762: OR
29763: PUSH
29764: LD_VAR 0 8
29768: PUSH
29769: LD_INT 6
29771: ARRAY
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: LD_INT 7
29781: PUSH
29782: LD_INT 9
29784: PUSH
29785: LD_INT 10
29787: PUSH
29788: LD_INT 11
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: IN
29799: NOT
29800: OR
29801: IFFALSE 29807
// exit ;
29803: POP
29804: POP
29805: GO 29890
// end ;
29807: GO 29478
29809: POP
29810: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29811: LD_VAR 0 9
29815: PPUSH
29816: LD_VAR 0 3
29820: PPUSH
29821: LD_VAR 0 4
29825: PPUSH
29826: LD_INT 20
29828: PPUSH
29829: CALL 21813 0 4
29833: PUSH
29834: LD_INT 4
29836: ARRAY
29837: IFFALSE 29841
// exit ;
29839: GO 29890
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29841: LD_VAR 0 2
29845: PUSH
29846: LD_INT 29
29848: PUSH
29849: LD_INT 30
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: IN
29856: PUSH
29857: LD_VAR 0 3
29861: PPUSH
29862: LD_VAR 0 4
29866: PPUSH
29867: LD_VAR 0 9
29871: PPUSH
29872: CALL_OW 440
29876: NOT
29877: AND
29878: IFFALSE 29882
// exit ;
29880: GO 29890
// result := true ;
29882: LD_ADDR_VAR 0 6
29886: PUSH
29887: LD_INT 1
29889: ST_TO_ADDR
// end ;
29890: LD_VAR 0 6
29894: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29895: LD_INT 0
29897: PPUSH
29898: PPUSH
29899: PPUSH
29900: PPUSH
29901: PPUSH
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
29911: PPUSH
29912: PPUSH
29913: PPUSH
29914: PPUSH
29915: PPUSH
29916: PPUSH
29917: PPUSH
29918: PPUSH
29919: PPUSH
29920: PPUSH
29921: PPUSH
29922: PPUSH
29923: PPUSH
29924: PPUSH
29925: PPUSH
29926: PPUSH
29927: PPUSH
29928: PPUSH
29929: PPUSH
29930: PPUSH
29931: PPUSH
29932: PPUSH
29933: PPUSH
29934: PPUSH
29935: PPUSH
29936: PPUSH
29937: PPUSH
29938: PPUSH
29939: PPUSH
29940: PPUSH
29941: PPUSH
29942: PPUSH
29943: PPUSH
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
29949: PPUSH
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
29954: PPUSH
// result = [ ] ;
29955: LD_ADDR_VAR 0 7
29959: PUSH
29960: EMPTY
29961: ST_TO_ADDR
// temp_list = [ ] ;
29962: LD_ADDR_VAR 0 9
29966: PUSH
29967: EMPTY
29968: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29969: LD_VAR 0 4
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: LD_INT 3
29985: PUSH
29986: LD_INT 4
29988: PUSH
29989: LD_INT 5
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: IN
30000: NOT
30001: PUSH
30002: LD_VAR 0 1
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: IN
30017: PUSH
30018: LD_VAR 0 5
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: LIST
30036: IN
30037: NOT
30038: AND
30039: OR
30040: IFFALSE 30044
// exit ;
30042: GO 48435
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30044: LD_VAR 0 1
30048: PUSH
30049: LD_INT 6
30051: PUSH
30052: LD_INT 7
30054: PUSH
30055: LD_INT 8
30057: PUSH
30058: LD_INT 13
30060: PUSH
30061: LD_INT 12
30063: PUSH
30064: LD_INT 15
30066: PUSH
30067: LD_INT 11
30069: PUSH
30070: LD_INT 14
30072: PUSH
30073: LD_INT 10
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: IN
30087: IFFALSE 30097
// btype = b_lab ;
30089: LD_ADDR_VAR 0 1
30093: PUSH
30094: LD_INT 6
30096: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30097: LD_VAR 0 6
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: IN
30116: NOT
30117: PUSH
30118: LD_VAR 0 1
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 3
30134: PUSH
30135: LD_INT 6
30137: PUSH
30138: LD_INT 36
30140: PUSH
30141: LD_INT 4
30143: PUSH
30144: LD_INT 5
30146: PUSH
30147: LD_INT 31
30149: PUSH
30150: LD_INT 32
30152: PUSH
30153: LD_INT 33
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: IN
30169: NOT
30170: PUSH
30171: LD_VAR 0 6
30175: PUSH
30176: LD_INT 1
30178: EQUAL
30179: AND
30180: OR
30181: PUSH
30182: LD_VAR 0 1
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: LD_INT 3
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: IN
30197: NOT
30198: PUSH
30199: LD_VAR 0 6
30203: PUSH
30204: LD_INT 2
30206: EQUAL
30207: AND
30208: OR
30209: IFFALSE 30219
// mode = 0 ;
30211: LD_ADDR_VAR 0 6
30215: PUSH
30216: LD_INT 0
30218: ST_TO_ADDR
// case mode of 0 :
30219: LD_VAR 0 6
30223: PUSH
30224: LD_INT 0
30226: DOUBLE
30227: EQUAL
30228: IFTRUE 30232
30230: GO 41685
30232: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30233: LD_ADDR_VAR 0 11
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30426: LD_ADDR_VAR 0 12
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: NEG
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30622: LD_ADDR_VAR 0 13
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 2
30745: NEG
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: NEG
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 3
30781: NEG
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: NEG
30794: PUSH
30795: LD_INT 3
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30821: LD_ADDR_VAR 0 14
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: LD_INT 3
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 2
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31017: LD_ADDR_VAR 0 15
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 3
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31210: LD_ADDR_VAR 0 16
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: LD_INT 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 3
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31403: LD_ADDR_VAR 0 17
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: LD_INT 2
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 2
31579: NEG
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 2
31602: NEG
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31633: LD_ADDR_VAR 0 18
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: LD_INT 2
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: PUSH
31769: LD_INT 2
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 2
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: LD_INT 2
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31863: LD_ADDR_VAR 0 19
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: NEG
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 2
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32093: LD_ADDR_VAR 0 20
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: LD_INT 2
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 2
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: NEG
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32323: LD_ADDR_VAR 0 21
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 2
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: NEG
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 2
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32553: LD_ADDR_VAR 0 22
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: LD_INT 1
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: LD_INT 2
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 2
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 2
32729: NEG
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32783: LD_ADDR_VAR 0 23
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 1
32852: NEG
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: LD_INT 2
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: LD_INT 2
32879: NEG
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 2
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 2
32959: NEG
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: LD_INT 2
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 3
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33063: LD_ADDR_VAR 0 24
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: LD_INT 2
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: NEG
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 2
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33339: LD_ADDR_VAR 0 25
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 2
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 2
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: LD_INT 2
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: LD_INT 2
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 3
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 3
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: LD_INT 3
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33613: LD_ADDR_VAR 0 26
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: PUSH
33696: LD_INT 2
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33889: LD_ADDR_VAR 0 27
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 2
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 2
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: LD_INT 2
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 3
34122: NEG
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 3
34134: NEG
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34169: LD_ADDR_VAR 0 28
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 2
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 2
34345: NEG
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 2
34356: NEG
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: LD_INT 2
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: LD_INT 3
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: LD_INT 3
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: NEG
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34451: LD_ADDR_VAR 0 29
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 2
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 2
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: NEG
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 2
34629: NEG
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 3
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 3
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 3
34695: NEG
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34730: LD_ADDR_VAR 0 30
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 3
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: LD_INT 2
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: LD_INT 2
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: NEG
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 3
34973: NEG
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35008: LD_ADDR_VAR 0 31
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: LD_INT 2
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: LD_INT 3
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 3
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 3
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 3
35251: NEG
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35286: LD_ADDR_VAR 0 32
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: LD_INT 3
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 3
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: LD_INT 3
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: LD_INT 1
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 3
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35564: LD_ADDR_VAR 0 33
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: LD_INT 1
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: NEG
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: NEG
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 2
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: LD_INT 3
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 3
35808: NEG
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35843: LD_ADDR_VAR 0 34
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: NEG
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: LD_INT 3
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 3
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 2
36077: NEG
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 3
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36123: LD_ADDR_VAR 0 35
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36235: LD_ADDR_VAR 0 36
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 2
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36347: LD_ADDR_VAR 0 37
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36459: LD_ADDR_VAR 0 38
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: NEG
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36571: LD_ADDR_VAR 0 39
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: LD_INT 2
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36683: LD_ADDR_VAR 0 40
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36795: LD_ADDR_VAR 0 41
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: LD_INT 3
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 2
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 3
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: NEG
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 3
37080: NEG
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 3
37092: NEG
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: LD_INT 3
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37145: LD_ADDR_VAR 0 42
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: LD_INT 3
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 3
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 3
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 3
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: LD_INT 3
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 3
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 3
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 3
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 3
37442: NEG
37443: PUSH
37444: LD_INT 2
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: NEG
37455: PUSH
37456: LD_INT 3
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37495: LD_ADDR_VAR 0 43
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 3
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 3
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 3
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 3
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: LD_INT 2
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 3
37791: NEG
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 3
37802: NEG
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37843: LD_ADDR_VAR 0 44
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 2
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: NEG
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 3
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 3
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: NEG
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 3
38140: NEG
38141: PUSH
38142: LD_INT 2
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 3
38152: NEG
38153: PUSH
38154: LD_INT 3
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38193: LD_ADDR_VAR 0 45
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: NEG
38396: PUSH
38397: LD_INT 3
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 3
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 3
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 3
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 3
38490: NEG
38491: PUSH
38492: LD_INT 2
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 3
38502: NEG
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38543: LD_ADDR_VAR 0 46
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 3
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: NEG
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38891: LD_ADDR_VAR 0 47
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39042: LD_ADDR_VAR 0 48
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39189: LD_ADDR_VAR 0 49
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39333: LD_ADDR_VAR 0 50
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39477: LD_ADDR_VAR 0 51
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39624: LD_ADDR_VAR 0 52
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39775: LD_ADDR_VAR 0 53
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 2
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40005: LD_ADDR_VAR 0 54
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 2
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: NEG
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40235: LD_ADDR_VAR 0 55
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 2
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: NEG
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40465: LD_ADDR_VAR 0 56
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40695: LD_ADDR_VAR 0 57
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40925: LD_ADDR_VAR 0 58
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41155: LD_ADDR_VAR 0 59
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41243: LD_ADDR_VAR 0 60
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41331: LD_ADDR_VAR 0 61
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41419: LD_ADDR_VAR 0 62
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41507: LD_ADDR_VAR 0 63
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41595: LD_ADDR_VAR 0 64
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
// end ; 1 :
41683: GO 47580
41685: LD_INT 1
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41693
41691: GO 44316
41693: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41694: LD_ADDR_VAR 0 11
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 3
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 3
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41738: LD_ADDR_VAR 0 12
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41779: LD_ADDR_VAR 0 13
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 3
41796: PUSH
41797: LD_INT 3
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41819: LD_ADDR_VAR 0 14
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41860: LD_ADDR_VAR 0 15
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 3
41878: NEG
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 3
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41904: LD_ADDR_VAR 0 16
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 3
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: LD_INT 3
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41950: LD_ADDR_VAR 0 17
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41994: LD_ADDR_VAR 0 18
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42035: LD_ADDR_VAR 0 19
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42075: LD_ADDR_VAR 0 20
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42116: LD_ADDR_VAR 0 21
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: NEG
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 3
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42160: LD_ADDR_VAR 0 22
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: LD_INT 3
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 3
42179: NEG
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 3
42191: NEG
42192: PUSH
42193: LD_INT 3
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42206: LD_ADDR_VAR 0 23
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 3
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 4
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 3
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42250: LD_ADDR_VAR 0 24
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 4
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42291: LD_ADDR_VAR 0 25
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 4
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: PUSH
42319: LD_INT 4
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: LIST
42330: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42331: LD_ADDR_VAR 0 26
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 3
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: LD_INT 4
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42372: LD_ADDR_VAR 0 27
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 3
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 4
42401: NEG
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42416: LD_ADDR_VAR 0 28
42420: PUSH
42421: LD_INT 3
42423: NEG
42424: PUSH
42425: LD_INT 3
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 3
42435: NEG
42436: PUSH
42437: LD_INT 4
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 4
42447: NEG
42448: PUSH
42449: LD_INT 3
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42462: LD_ADDR_VAR 0 29
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 3
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 4
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 4
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 3
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 5
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 5
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 4
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 6
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 6
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 5
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42617: LD_ADDR_VAR 0 30
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 4
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 4
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 4
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 5
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 5
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 5
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 6
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 6
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42760: LD_ADDR_VAR 0 31
42764: PUSH
42765: LD_INT 3
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 4
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 4
42807: PUSH
42808: LD_INT 4
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 4
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 5
42827: PUSH
42828: LD_INT 4
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 5
42837: PUSH
42838: LD_INT 5
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 4
42847: PUSH
42848: LD_INT 5
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 6
42857: PUSH
42858: LD_INT 5
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 6
42867: PUSH
42868: LD_INT 6
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 5
42877: PUSH
42878: LD_INT 6
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42899: LD_ADDR_VAR 0 32
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 3
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 4
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 4
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 3
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 5
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 5
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 4
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 6
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 6
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 5
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43042: LD_ADDR_VAR 0 33
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: NEG
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 4
43094: NEG
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 4
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 4
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 5
43128: NEG
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 5
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 5
43151: NEG
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 6
43162: NEG
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 6
43173: NEG
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43197: LD_ADDR_VAR 0 34
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 3
43228: NEG
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: NEG
43241: PUSH
43242: LD_INT 4
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 4
43252: NEG
43253: PUSH
43254: LD_INT 3
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 4
43264: NEG
43265: PUSH
43266: LD_INT 4
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 4
43276: NEG
43277: PUSH
43278: LD_INT 5
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 5
43288: NEG
43289: PUSH
43290: LD_INT 4
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 5
43300: NEG
43301: PUSH
43302: LD_INT 5
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 5
43312: NEG
43313: PUSH
43314: LD_INT 6
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 6
43324: NEG
43325: PUSH
43326: LD_INT 5
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 6
43336: NEG
43337: PUSH
43338: LD_INT 6
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43360: LD_ADDR_VAR 0 41
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 3
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43404: LD_ADDR_VAR 0 42
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43445: LD_ADDR_VAR 0 43
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 3
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 3
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43485: LD_ADDR_VAR 0 44
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 3
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43526: LD_ADDR_VAR 0 45
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 3
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43570: LD_ADDR_VAR 0 46
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: LD_INT 3
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: LD_INT 2
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43616: LD_ADDR_VAR 0 47
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 3
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 3
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43649: LD_ADDR_VAR 0 48
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43680: LD_ADDR_VAR 0 49
43684: PUSH
43685: LD_INT 3
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43709: LD_ADDR_VAR 0 50
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 3
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43738: LD_ADDR_VAR 0 51
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43769: LD_ADDR_VAR 0 52
43773: PUSH
43774: LD_INT 3
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43802: LD_ADDR_VAR 0 53
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43846: LD_ADDR_VAR 0 54
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43887: LD_ADDR_VAR 0 55
43891: PUSH
43892: LD_INT 3
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: PUSH
43905: LD_INT 3
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: LD_INT 3
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43927: LD_ADDR_VAR 0 56
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43968: LD_ADDR_VAR 0 57
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 3
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: LIST
44011: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44012: LD_ADDR_VAR 0 58
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: LD_INT 3
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: LD_INT 3
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44058: LD_ADDR_VAR 0 59
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44102: LD_ADDR_VAR 0 60
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44143: LD_ADDR_VAR 0 61
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44183: LD_ADDR_VAR 0 62
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44224: LD_ADDR_VAR 0 63
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44268: LD_ADDR_VAR 0 64
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// end ; 2 :
44314: GO 47580
44316: LD_INT 2
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44324
44322: GO 47579
44324: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44325: LD_ADDR_VAR 0 29
44329: PUSH
44330: LD_INT 4
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 4
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 5
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 5
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 4
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 3
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 3
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 5
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 3
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 4
44445: PUSH
44446: LD_INT 3
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 4
44455: PUSH
44456: LD_INT 4
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: PUSH
44466: LD_INT 4
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 4
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 4
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 4
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 4
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 5
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 5
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 4
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 3
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 5
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 3
44608: NEG
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 3
44619: NEG
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 4
44664: NEG
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 4
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 4
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 4
44710: NEG
44711: PUSH
44712: LD_INT 4
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 4
44722: NEG
44723: PUSH
44724: LD_INT 5
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 3
44734: NEG
44735: PUSH
44736: LD_INT 4
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 4
44758: NEG
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 5
44770: NEG
44771: PUSH
44772: LD_INT 4
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 5
44782: NEG
44783: PUSH
44784: LD_INT 5
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: LD_INT 5
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 5
44806: NEG
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44863: LD_ADDR_VAR 0 30
44867: PUSH
44868: LD_INT 4
44870: PUSH
44871: LD_INT 4
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 4
44880: PUSH
44881: LD_INT 3
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 5
44890: PUSH
44891: LD_INT 4
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 5
44900: PUSH
44901: LD_INT 5
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 4
44910: PUSH
44911: LD_INT 5
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 4
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 3
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 5
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 3
44950: PUSH
44951: LD_INT 5
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 4
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 4
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 4
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 4
45053: NEG
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 4
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 3
45087: NEG
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 4
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 5
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 5
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 5
45132: NEG
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 3
45144: NEG
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 3
45155: NEG
45156: PUSH
45157: LD_INT 3
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 3
45167: NEG
45168: PUSH
45169: LD_INT 4
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 3
45203: NEG
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 4
45215: NEG
45216: PUSH
45217: LD_INT 3
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 4
45227: NEG
45228: PUSH
45229: LD_INT 4
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 4
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 4
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 4
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 5
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 4
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 3
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 3
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 4
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 5
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 3
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 5
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45410: LD_ADDR_VAR 0 31
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 4
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 4
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 5
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 5
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 4
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 5
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 3
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 4
45566: NEG
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 4
45577: NEG
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 4
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 4
45612: NEG
45613: PUSH
45614: LD_INT 4
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 4
45624: NEG
45625: PUSH
45626: LD_INT 5
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: LD_INT 4
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: LD_INT 3
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 4
45660: NEG
45661: PUSH
45662: LD_INT 3
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 5
45672: NEG
45673: PUSH
45674: LD_INT 4
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 5
45684: NEG
45685: PUSH
45686: LD_INT 5
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 5
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 5
45708: NEG
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 4
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 4
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: LD_INT 4
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 4
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 4
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 5
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 5
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 4
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 5
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45960: LD_ADDR_VAR 0 32
45964: PUSH
45965: LD_INT 4
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 4
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: NEG
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 3
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 4
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 5
46023: NEG
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 5
46034: NEG
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 5
46046: NEG
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 3
46069: NEG
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 3
46081: NEG
46082: PUSH
46083: LD_INT 4
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 4
46129: NEG
46130: PUSH
46131: LD_INT 3
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 4
46141: NEG
46142: PUSH
46143: LD_INT 4
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 4
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 4
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 4
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 5
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 4
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 3
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 4
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 5
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: LD_INT 5
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 4
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 4
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 4
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 4
46372: PUSH
46373: LD_INT 4
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: LD_INT 3
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 5
46392: PUSH
46393: LD_INT 4
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 5
46402: PUSH
46403: LD_INT 5
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 4
46412: PUSH
46413: LD_INT 5
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: LD_INT 4
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 5
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: LD_INT 5
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46507: LD_ADDR_VAR 0 33
46511: PUSH
46512: LD_INT 4
46514: NEG
46515: PUSH
46516: LD_INT 4
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 4
46526: NEG
46527: PUSH
46528: LD_INT 5
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 3
46550: NEG
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 4
46562: NEG
46563: PUSH
46564: LD_INT 3
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 5
46574: NEG
46575: PUSH
46576: LD_INT 4
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 5
46586: NEG
46587: PUSH
46588: LD_INT 5
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: LD_INT 5
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 5
46610: NEG
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 4
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 3
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 4
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 4
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 4
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 4
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 5
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 3
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 5
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 4
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 4
46847: PUSH
46848: LD_INT 4
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: LD_INT 4
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 4
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: LD_INT 4
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 4
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 4
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 5
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 5
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 4
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: LD_INT 5
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47045: LD_ADDR_VAR 0 34
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 4
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 5
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 4
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 4
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 5
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 5
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 4
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 4
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 4
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 4
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 5
47267: PUSH
47268: LD_INT 4
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 5
47277: PUSH
47278: LD_INT 5
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: LD_INT 5
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: LD_INT 4
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 5
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 5
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 3
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 4
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 4
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 4
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 4
47430: NEG
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 4
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: NEG
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 4
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 5
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 5
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 5
47509: NEG
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: ST_TO_ADDR
// end ; end ;
47577: GO 47580
47579: POP
// case btype of b_depot , b_warehouse :
47580: LD_VAR 0 1
47584: PUSH
47585: LD_INT 0
47587: DOUBLE
47588: EQUAL
47589: IFTRUE 47599
47591: LD_INT 1
47593: DOUBLE
47594: EQUAL
47595: IFTRUE 47599
47597: GO 47800
47599: POP
// case nation of nation_american :
47600: LD_VAR 0 5
47604: PUSH
47605: LD_INT 1
47607: DOUBLE
47608: EQUAL
47609: IFTRUE 47613
47611: GO 47669
47613: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47614: LD_ADDR_VAR 0 9
47618: PUSH
47619: LD_VAR 0 11
47623: PUSH
47624: LD_VAR 0 12
47628: PUSH
47629: LD_VAR 0 13
47633: PUSH
47634: LD_VAR 0 14
47638: PUSH
47639: LD_VAR 0 15
47643: PUSH
47644: LD_VAR 0 16
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: PUSH
47657: LD_VAR 0 4
47661: PUSH
47662: LD_INT 1
47664: PLUS
47665: ARRAY
47666: ST_TO_ADDR
47667: GO 47798
47669: LD_INT 2
47671: DOUBLE
47672: EQUAL
47673: IFTRUE 47677
47675: GO 47733
47677: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47678: LD_ADDR_VAR 0 9
47682: PUSH
47683: LD_VAR 0 17
47687: PUSH
47688: LD_VAR 0 18
47692: PUSH
47693: LD_VAR 0 19
47697: PUSH
47698: LD_VAR 0 20
47702: PUSH
47703: LD_VAR 0 21
47707: PUSH
47708: LD_VAR 0 22
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: PUSH
47721: LD_VAR 0 4
47725: PUSH
47726: LD_INT 1
47728: PLUS
47729: ARRAY
47730: ST_TO_ADDR
47731: GO 47798
47733: LD_INT 3
47735: DOUBLE
47736: EQUAL
47737: IFTRUE 47741
47739: GO 47797
47741: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47742: LD_ADDR_VAR 0 9
47746: PUSH
47747: LD_VAR 0 23
47751: PUSH
47752: LD_VAR 0 24
47756: PUSH
47757: LD_VAR 0 25
47761: PUSH
47762: LD_VAR 0 26
47766: PUSH
47767: LD_VAR 0 27
47771: PUSH
47772: LD_VAR 0 28
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: PUSH
47785: LD_VAR 0 4
47789: PUSH
47790: LD_INT 1
47792: PLUS
47793: ARRAY
47794: ST_TO_ADDR
47795: GO 47798
47797: POP
47798: GO 48353
47800: LD_INT 2
47802: DOUBLE
47803: EQUAL
47804: IFTRUE 47814
47806: LD_INT 3
47808: DOUBLE
47809: EQUAL
47810: IFTRUE 47814
47812: GO 47870
47814: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47815: LD_ADDR_VAR 0 9
47819: PUSH
47820: LD_VAR 0 29
47824: PUSH
47825: LD_VAR 0 30
47829: PUSH
47830: LD_VAR 0 31
47834: PUSH
47835: LD_VAR 0 32
47839: PUSH
47840: LD_VAR 0 33
47844: PUSH
47845: LD_VAR 0 34
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: PUSH
47858: LD_VAR 0 4
47862: PUSH
47863: LD_INT 1
47865: PLUS
47866: ARRAY
47867: ST_TO_ADDR
47868: GO 48353
47870: LD_INT 16
47872: DOUBLE
47873: EQUAL
47874: IFTRUE 47932
47876: LD_INT 17
47878: DOUBLE
47879: EQUAL
47880: IFTRUE 47932
47882: LD_INT 18
47884: DOUBLE
47885: EQUAL
47886: IFTRUE 47932
47888: LD_INT 19
47890: DOUBLE
47891: EQUAL
47892: IFTRUE 47932
47894: LD_INT 22
47896: DOUBLE
47897: EQUAL
47898: IFTRUE 47932
47900: LD_INT 20
47902: DOUBLE
47903: EQUAL
47904: IFTRUE 47932
47906: LD_INT 21
47908: DOUBLE
47909: EQUAL
47910: IFTRUE 47932
47912: LD_INT 23
47914: DOUBLE
47915: EQUAL
47916: IFTRUE 47932
47918: LD_INT 24
47920: DOUBLE
47921: EQUAL
47922: IFTRUE 47932
47924: LD_INT 25
47926: DOUBLE
47927: EQUAL
47928: IFTRUE 47932
47930: GO 47988
47932: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47933: LD_ADDR_VAR 0 9
47937: PUSH
47938: LD_VAR 0 35
47942: PUSH
47943: LD_VAR 0 36
47947: PUSH
47948: LD_VAR 0 37
47952: PUSH
47953: LD_VAR 0 38
47957: PUSH
47958: LD_VAR 0 39
47962: PUSH
47963: LD_VAR 0 40
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: PUSH
47976: LD_VAR 0 4
47980: PUSH
47981: LD_INT 1
47983: PLUS
47984: ARRAY
47985: ST_TO_ADDR
47986: GO 48353
47988: LD_INT 6
47990: DOUBLE
47991: EQUAL
47992: IFTRUE 48044
47994: LD_INT 7
47996: DOUBLE
47997: EQUAL
47998: IFTRUE 48044
48000: LD_INT 8
48002: DOUBLE
48003: EQUAL
48004: IFTRUE 48044
48006: LD_INT 13
48008: DOUBLE
48009: EQUAL
48010: IFTRUE 48044
48012: LD_INT 12
48014: DOUBLE
48015: EQUAL
48016: IFTRUE 48044
48018: LD_INT 15
48020: DOUBLE
48021: EQUAL
48022: IFTRUE 48044
48024: LD_INT 11
48026: DOUBLE
48027: EQUAL
48028: IFTRUE 48044
48030: LD_INT 14
48032: DOUBLE
48033: EQUAL
48034: IFTRUE 48044
48036: LD_INT 10
48038: DOUBLE
48039: EQUAL
48040: IFTRUE 48044
48042: GO 48100
48044: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48045: LD_ADDR_VAR 0 9
48049: PUSH
48050: LD_VAR 0 41
48054: PUSH
48055: LD_VAR 0 42
48059: PUSH
48060: LD_VAR 0 43
48064: PUSH
48065: LD_VAR 0 44
48069: PUSH
48070: LD_VAR 0 45
48074: PUSH
48075: LD_VAR 0 46
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: LD_VAR 0 4
48092: PUSH
48093: LD_INT 1
48095: PLUS
48096: ARRAY
48097: ST_TO_ADDR
48098: GO 48353
48100: LD_INT 36
48102: DOUBLE
48103: EQUAL
48104: IFTRUE 48108
48106: GO 48164
48108: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48109: LD_ADDR_VAR 0 9
48113: PUSH
48114: LD_VAR 0 47
48118: PUSH
48119: LD_VAR 0 48
48123: PUSH
48124: LD_VAR 0 49
48128: PUSH
48129: LD_VAR 0 50
48133: PUSH
48134: LD_VAR 0 51
48138: PUSH
48139: LD_VAR 0 52
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: PUSH
48152: LD_VAR 0 4
48156: PUSH
48157: LD_INT 1
48159: PLUS
48160: ARRAY
48161: ST_TO_ADDR
48162: GO 48353
48164: LD_INT 4
48166: DOUBLE
48167: EQUAL
48168: IFTRUE 48190
48170: LD_INT 5
48172: DOUBLE
48173: EQUAL
48174: IFTRUE 48190
48176: LD_INT 34
48178: DOUBLE
48179: EQUAL
48180: IFTRUE 48190
48182: LD_INT 37
48184: DOUBLE
48185: EQUAL
48186: IFTRUE 48190
48188: GO 48246
48190: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48191: LD_ADDR_VAR 0 9
48195: PUSH
48196: LD_VAR 0 53
48200: PUSH
48201: LD_VAR 0 54
48205: PUSH
48206: LD_VAR 0 55
48210: PUSH
48211: LD_VAR 0 56
48215: PUSH
48216: LD_VAR 0 57
48220: PUSH
48221: LD_VAR 0 58
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: PUSH
48234: LD_VAR 0 4
48238: PUSH
48239: LD_INT 1
48241: PLUS
48242: ARRAY
48243: ST_TO_ADDR
48244: GO 48353
48246: LD_INT 31
48248: DOUBLE
48249: EQUAL
48250: IFTRUE 48296
48252: LD_INT 32
48254: DOUBLE
48255: EQUAL
48256: IFTRUE 48296
48258: LD_INT 33
48260: DOUBLE
48261: EQUAL
48262: IFTRUE 48296
48264: LD_INT 27
48266: DOUBLE
48267: EQUAL
48268: IFTRUE 48296
48270: LD_INT 26
48272: DOUBLE
48273: EQUAL
48274: IFTRUE 48296
48276: LD_INT 28
48278: DOUBLE
48279: EQUAL
48280: IFTRUE 48296
48282: LD_INT 29
48284: DOUBLE
48285: EQUAL
48286: IFTRUE 48296
48288: LD_INT 30
48290: DOUBLE
48291: EQUAL
48292: IFTRUE 48296
48294: GO 48352
48296: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48297: LD_ADDR_VAR 0 9
48301: PUSH
48302: LD_VAR 0 59
48306: PUSH
48307: LD_VAR 0 60
48311: PUSH
48312: LD_VAR 0 61
48316: PUSH
48317: LD_VAR 0 62
48321: PUSH
48322: LD_VAR 0 63
48326: PUSH
48327: LD_VAR 0 64
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: PUSH
48340: LD_VAR 0 4
48344: PUSH
48345: LD_INT 1
48347: PLUS
48348: ARRAY
48349: ST_TO_ADDR
48350: GO 48353
48352: POP
// temp_list2 = [ ] ;
48353: LD_ADDR_VAR 0 10
48357: PUSH
48358: EMPTY
48359: ST_TO_ADDR
// for i in temp_list do
48360: LD_ADDR_VAR 0 8
48364: PUSH
48365: LD_VAR 0 9
48369: PUSH
48370: FOR_IN
48371: IFFALSE 48423
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48373: LD_ADDR_VAR 0 10
48377: PUSH
48378: LD_VAR 0 10
48382: PUSH
48383: LD_VAR 0 8
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: PUSH
48392: LD_VAR 0 2
48396: PLUS
48397: PUSH
48398: LD_VAR 0 8
48402: PUSH
48403: LD_INT 2
48405: ARRAY
48406: PUSH
48407: LD_VAR 0 3
48411: PLUS
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: ADD
48420: ST_TO_ADDR
48421: GO 48370
48423: POP
48424: POP
// result = temp_list2 ;
48425: LD_ADDR_VAR 0 7
48429: PUSH
48430: LD_VAR 0 10
48434: ST_TO_ADDR
// end ;
48435: LD_VAR 0 7
48439: RET
// export function EnemyInRange ( unit , dist ) ; begin
48440: LD_INT 0
48442: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48443: LD_ADDR_VAR 0 3
48447: PUSH
48448: LD_VAR 0 1
48452: PPUSH
48453: CALL_OW 255
48457: PPUSH
48458: LD_VAR 0 1
48462: PPUSH
48463: CALL_OW 250
48467: PPUSH
48468: LD_VAR 0 1
48472: PPUSH
48473: CALL_OW 251
48477: PPUSH
48478: LD_VAR 0 2
48482: PPUSH
48483: CALL 21813 0 4
48487: PUSH
48488: LD_INT 4
48490: ARRAY
48491: ST_TO_ADDR
// end ;
48492: LD_VAR 0 3
48496: RET
// export function PlayerSeeMe ( unit ) ; begin
48497: LD_INT 0
48499: PPUSH
// result := See ( your_side , unit ) ;
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: LD_OWVAR 2
48509: PPUSH
48510: LD_VAR 0 1
48514: PPUSH
48515: CALL_OW 292
48519: ST_TO_ADDR
// end ;
48520: LD_VAR 0 2
48524: RET
// export function ReverseDir ( unit ) ; begin
48525: LD_INT 0
48527: PPUSH
// if not unit then
48528: LD_VAR 0 1
48532: NOT
48533: IFFALSE 48537
// exit ;
48535: GO 48560
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48537: LD_ADDR_VAR 0 2
48541: PUSH
48542: LD_VAR 0 1
48546: PPUSH
48547: CALL_OW 254
48551: PUSH
48552: LD_INT 3
48554: PLUS
48555: PUSH
48556: LD_INT 6
48558: MOD
48559: ST_TO_ADDR
// end ;
48560: LD_VAR 0 2
48564: RET
// export function ReverseArray ( array ) ; var i ; begin
48565: LD_INT 0
48567: PPUSH
48568: PPUSH
// if not array then
48569: LD_VAR 0 1
48573: NOT
48574: IFFALSE 48578
// exit ;
48576: GO 48633
// result := [ ] ;
48578: LD_ADDR_VAR 0 2
48582: PUSH
48583: EMPTY
48584: ST_TO_ADDR
// for i := array downto 1 do
48585: LD_ADDR_VAR 0 3
48589: PUSH
48590: DOUBLE
48591: LD_VAR 0 1
48595: INC
48596: ST_TO_ADDR
48597: LD_INT 1
48599: PUSH
48600: FOR_DOWNTO
48601: IFFALSE 48631
// result := Join ( result , array [ i ] ) ;
48603: LD_ADDR_VAR 0 2
48607: PUSH
48608: LD_VAR 0 2
48612: PPUSH
48613: LD_VAR 0 1
48617: PUSH
48618: LD_VAR 0 3
48622: ARRAY
48623: PPUSH
48624: CALL 53298 0 2
48628: ST_TO_ADDR
48629: GO 48600
48631: POP
48632: POP
// end ;
48633: LD_VAR 0 2
48637: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48638: LD_INT 0
48640: PPUSH
48641: PPUSH
48642: PPUSH
48643: PPUSH
48644: PPUSH
48645: PPUSH
// if not unit or not hexes then
48646: LD_VAR 0 1
48650: NOT
48651: PUSH
48652: LD_VAR 0 2
48656: NOT
48657: OR
48658: IFFALSE 48662
// exit ;
48660: GO 48785
// dist := 9999 ;
48662: LD_ADDR_VAR 0 5
48666: PUSH
48667: LD_INT 9999
48669: ST_TO_ADDR
// for i = 1 to hexes do
48670: LD_ADDR_VAR 0 4
48674: PUSH
48675: DOUBLE
48676: LD_INT 1
48678: DEC
48679: ST_TO_ADDR
48680: LD_VAR 0 2
48684: PUSH
48685: FOR_TO
48686: IFFALSE 48773
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48688: LD_ADDR_VAR 0 6
48692: PUSH
48693: LD_VAR 0 1
48697: PPUSH
48698: LD_VAR 0 2
48702: PUSH
48703: LD_VAR 0 4
48707: ARRAY
48708: PUSH
48709: LD_INT 1
48711: ARRAY
48712: PPUSH
48713: LD_VAR 0 2
48717: PUSH
48718: LD_VAR 0 4
48722: ARRAY
48723: PUSH
48724: LD_INT 2
48726: ARRAY
48727: PPUSH
48728: CALL_OW 297
48732: ST_TO_ADDR
// if tdist < dist then
48733: LD_VAR 0 6
48737: PUSH
48738: LD_VAR 0 5
48742: LESS
48743: IFFALSE 48771
// begin hex := hexes [ i ] ;
48745: LD_ADDR_VAR 0 8
48749: PUSH
48750: LD_VAR 0 2
48754: PUSH
48755: LD_VAR 0 4
48759: ARRAY
48760: ST_TO_ADDR
// dist := tdist ;
48761: LD_ADDR_VAR 0 5
48765: PUSH
48766: LD_VAR 0 6
48770: ST_TO_ADDR
// end ; end ;
48771: GO 48685
48773: POP
48774: POP
// result := hex ;
48775: LD_ADDR_VAR 0 3
48779: PUSH
48780: LD_VAR 0 8
48784: ST_TO_ADDR
// end ;
48785: LD_VAR 0 3
48789: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48790: LD_INT 0
48792: PPUSH
48793: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48794: LD_VAR 0 1
48798: NOT
48799: PUSH
48800: LD_VAR 0 1
48804: PUSH
48805: LD_INT 21
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 23
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PPUSH
48829: CALL_OW 69
48833: IN
48834: NOT
48835: OR
48836: IFFALSE 48840
// exit ;
48838: GO 48887
// for i = 1 to 3 do
48840: LD_ADDR_VAR 0 3
48844: PUSH
48845: DOUBLE
48846: LD_INT 1
48848: DEC
48849: ST_TO_ADDR
48850: LD_INT 3
48852: PUSH
48853: FOR_TO
48854: IFFALSE 48885
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48856: LD_VAR 0 1
48860: PPUSH
48861: CALL_OW 250
48865: PPUSH
48866: LD_VAR 0 1
48870: PPUSH
48871: CALL_OW 251
48875: PPUSH
48876: LD_INT 1
48878: PPUSH
48879: CALL_OW 453
48883: GO 48853
48885: POP
48886: POP
// end ;
48887: LD_VAR 0 2
48891: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48892: LD_INT 0
48894: PPUSH
48895: PPUSH
48896: PPUSH
48897: PPUSH
48898: PPUSH
48899: PPUSH
// if not unit or not enemy_unit then
48900: LD_VAR 0 1
48904: NOT
48905: PUSH
48906: LD_VAR 0 2
48910: NOT
48911: OR
48912: IFFALSE 48916
// exit ;
48914: GO 49383
// if GetLives ( i ) < 250 then
48916: LD_VAR 0 4
48920: PPUSH
48921: CALL_OW 256
48925: PUSH
48926: LD_INT 250
48928: LESS
48929: IFFALSE 48942
// begin ComAutodestruct ( i ) ;
48931: LD_VAR 0 4
48935: PPUSH
48936: CALL 48790 0 1
// exit ;
48940: GO 49383
// end ; x := GetX ( enemy_unit ) ;
48942: LD_ADDR_VAR 0 7
48946: PUSH
48947: LD_VAR 0 2
48951: PPUSH
48952: CALL_OW 250
48956: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48957: LD_ADDR_VAR 0 8
48961: PUSH
48962: LD_VAR 0 2
48966: PPUSH
48967: CALL_OW 251
48971: ST_TO_ADDR
// if not x or not y then
48972: LD_VAR 0 7
48976: NOT
48977: PUSH
48978: LD_VAR 0 8
48982: NOT
48983: OR
48984: IFFALSE 48988
// exit ;
48986: GO 49383
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48988: LD_ADDR_VAR 0 6
48992: PUSH
48993: LD_VAR 0 7
48997: PPUSH
48998: LD_INT 0
49000: PPUSH
49001: LD_INT 4
49003: PPUSH
49004: CALL_OW 272
49008: PUSH
49009: LD_VAR 0 8
49013: PPUSH
49014: LD_INT 0
49016: PPUSH
49017: LD_INT 4
49019: PPUSH
49020: CALL_OW 273
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_VAR 0 7
49033: PPUSH
49034: LD_INT 1
49036: PPUSH
49037: LD_INT 4
49039: PPUSH
49040: CALL_OW 272
49044: PUSH
49045: LD_VAR 0 8
49049: PPUSH
49050: LD_INT 1
49052: PPUSH
49053: LD_INT 4
49055: PPUSH
49056: CALL_OW 273
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_VAR 0 7
49069: PPUSH
49070: LD_INT 2
49072: PPUSH
49073: LD_INT 4
49075: PPUSH
49076: CALL_OW 272
49080: PUSH
49081: LD_VAR 0 8
49085: PPUSH
49086: LD_INT 2
49088: PPUSH
49089: LD_INT 4
49091: PPUSH
49092: CALL_OW 273
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_VAR 0 7
49105: PPUSH
49106: LD_INT 3
49108: PPUSH
49109: LD_INT 4
49111: PPUSH
49112: CALL_OW 272
49116: PUSH
49117: LD_VAR 0 8
49121: PPUSH
49122: LD_INT 3
49124: PPUSH
49125: LD_INT 4
49127: PPUSH
49128: CALL_OW 273
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_VAR 0 7
49141: PPUSH
49142: LD_INT 4
49144: PPUSH
49145: LD_INT 4
49147: PPUSH
49148: CALL_OW 272
49152: PUSH
49153: LD_VAR 0 8
49157: PPUSH
49158: LD_INT 4
49160: PPUSH
49161: LD_INT 4
49163: PPUSH
49164: CALL_OW 273
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_VAR 0 7
49177: PPUSH
49178: LD_INT 5
49180: PPUSH
49181: LD_INT 4
49183: PPUSH
49184: CALL_OW 272
49188: PUSH
49189: LD_VAR 0 8
49193: PPUSH
49194: LD_INT 5
49196: PPUSH
49197: LD_INT 4
49199: PPUSH
49200: CALL_OW 273
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// for i = tmp downto 1 do
49217: LD_ADDR_VAR 0 4
49221: PUSH
49222: DOUBLE
49223: LD_VAR 0 6
49227: INC
49228: ST_TO_ADDR
49229: LD_INT 1
49231: PUSH
49232: FOR_DOWNTO
49233: IFFALSE 49334
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49235: LD_VAR 0 6
49239: PUSH
49240: LD_VAR 0 4
49244: ARRAY
49245: PUSH
49246: LD_INT 1
49248: ARRAY
49249: PPUSH
49250: LD_VAR 0 6
49254: PUSH
49255: LD_VAR 0 4
49259: ARRAY
49260: PUSH
49261: LD_INT 2
49263: ARRAY
49264: PPUSH
49265: CALL_OW 488
49269: NOT
49270: PUSH
49271: LD_VAR 0 6
49275: PUSH
49276: LD_VAR 0 4
49280: ARRAY
49281: PUSH
49282: LD_INT 1
49284: ARRAY
49285: PPUSH
49286: LD_VAR 0 6
49290: PUSH
49291: LD_VAR 0 4
49295: ARRAY
49296: PUSH
49297: LD_INT 2
49299: ARRAY
49300: PPUSH
49301: CALL_OW 428
49305: PUSH
49306: LD_INT 0
49308: NONEQUAL
49309: OR
49310: IFFALSE 49332
// tmp := Delete ( tmp , i ) ;
49312: LD_ADDR_VAR 0 6
49316: PUSH
49317: LD_VAR 0 6
49321: PPUSH
49322: LD_VAR 0 4
49326: PPUSH
49327: CALL_OW 3
49331: ST_TO_ADDR
49332: GO 49232
49334: POP
49335: POP
// j := GetClosestHex ( unit , tmp ) ;
49336: LD_ADDR_VAR 0 5
49340: PUSH
49341: LD_VAR 0 1
49345: PPUSH
49346: LD_VAR 0 6
49350: PPUSH
49351: CALL 48638 0 2
49355: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49356: LD_VAR 0 1
49360: PPUSH
49361: LD_VAR 0 5
49365: PUSH
49366: LD_INT 1
49368: ARRAY
49369: PPUSH
49370: LD_VAR 0 5
49374: PUSH
49375: LD_INT 2
49377: ARRAY
49378: PPUSH
49379: CALL_OW 111
// end ;
49383: LD_VAR 0 3
49387: RET
// export function PrepareApemanSoldier ( ) ; begin
49388: LD_INT 0
49390: PPUSH
// uc_nation := 0 ;
49391: LD_ADDR_OWVAR 21
49395: PUSH
49396: LD_INT 0
49398: ST_TO_ADDR
// hc_sex := sex_male ;
49399: LD_ADDR_OWVAR 27
49403: PUSH
49404: LD_INT 1
49406: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49407: LD_ADDR_OWVAR 28
49411: PUSH
49412: LD_INT 15
49414: ST_TO_ADDR
// hc_gallery :=  ;
49415: LD_ADDR_OWVAR 33
49419: PUSH
49420: LD_STRING 
49422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49423: LD_ADDR_OWVAR 31
49427: PUSH
49428: LD_INT 0
49430: PPUSH
49431: LD_INT 3
49433: PPUSH
49434: CALL_OW 12
49438: PUSH
49439: LD_INT 0
49441: PPUSH
49442: LD_INT 3
49444: PPUSH
49445: CALL_OW 12
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: ST_TO_ADDR
// end ;
49462: LD_VAR 0 1
49466: RET
// export function PrepareApemanEngineer ( ) ; begin
49467: LD_INT 0
49469: PPUSH
// uc_nation := 0 ;
49470: LD_ADDR_OWVAR 21
49474: PUSH
49475: LD_INT 0
49477: ST_TO_ADDR
// hc_sex := sex_male ;
49478: LD_ADDR_OWVAR 27
49482: PUSH
49483: LD_INT 1
49485: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49486: LD_ADDR_OWVAR 28
49490: PUSH
49491: LD_INT 16
49493: ST_TO_ADDR
// hc_gallery :=  ;
49494: LD_ADDR_OWVAR 33
49498: PUSH
49499: LD_STRING 
49501: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49502: LD_ADDR_OWVAR 31
49506: PUSH
49507: LD_INT 0
49509: PPUSH
49510: LD_INT 3
49512: PPUSH
49513: CALL_OW 12
49517: PUSH
49518: LD_INT 0
49520: PPUSH
49521: LD_INT 3
49523: PPUSH
49524: CALL_OW 12
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// end ;
49541: LD_VAR 0 1
49545: RET
// export function PrepareApeman ( agressivity ) ; begin
49546: LD_INT 0
49548: PPUSH
// uc_side := 0 ;
49549: LD_ADDR_OWVAR 20
49553: PUSH
49554: LD_INT 0
49556: ST_TO_ADDR
// uc_nation := 0 ;
49557: LD_ADDR_OWVAR 21
49561: PUSH
49562: LD_INT 0
49564: ST_TO_ADDR
// hc_sex := sex_male ;
49565: LD_ADDR_OWVAR 27
49569: PUSH
49570: LD_INT 1
49572: ST_TO_ADDR
// hc_class := class_apeman ;
49573: LD_ADDR_OWVAR 28
49577: PUSH
49578: LD_INT 12
49580: ST_TO_ADDR
// hc_gallery :=  ;
49581: LD_ADDR_OWVAR 33
49585: PUSH
49586: LD_STRING 
49588: ST_TO_ADDR
// if agressivity = 0 then
49589: LD_VAR 0 1
49593: PUSH
49594: LD_INT 0
49596: EQUAL
49597: IFFALSE 49609
// hc_agressivity := 0 else
49599: LD_ADDR_OWVAR 35
49603: PUSH
49604: LD_INT 0
49606: ST_TO_ADDR
49607: GO 49630
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49609: LD_ADDR_OWVAR 35
49613: PUSH
49614: LD_VAR 0 1
49618: NEG
49619: PPUSH
49620: LD_VAR 0 1
49624: PPUSH
49625: CALL_OW 12
49629: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49630: LD_ADDR_OWVAR 31
49634: PUSH
49635: LD_INT 0
49637: PPUSH
49638: LD_INT 3
49640: PPUSH
49641: CALL_OW 12
49645: PUSH
49646: LD_INT 0
49648: PPUSH
49649: LD_INT 3
49651: PPUSH
49652: CALL_OW 12
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: ST_TO_ADDR
// end ;
49669: LD_VAR 0 2
49673: RET
// export function PrepareTiger ( agressivity ) ; begin
49674: LD_INT 0
49676: PPUSH
// uc_side := 0 ;
49677: LD_ADDR_OWVAR 20
49681: PUSH
49682: LD_INT 0
49684: ST_TO_ADDR
// uc_nation := 0 ;
49685: LD_ADDR_OWVAR 21
49689: PUSH
49690: LD_INT 0
49692: ST_TO_ADDR
// hc_class := class_tiger ;
49693: LD_ADDR_OWVAR 28
49697: PUSH
49698: LD_INT 14
49700: ST_TO_ADDR
// hc_gallery :=  ;
49701: LD_ADDR_OWVAR 33
49705: PUSH
49706: LD_STRING 
49708: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49709: LD_ADDR_OWVAR 35
49713: PUSH
49714: LD_VAR 0 1
49718: NEG
49719: PPUSH
49720: LD_VAR 0 1
49724: PPUSH
49725: CALL_OW 12
49729: ST_TO_ADDR
// end ;
49730: LD_VAR 0 2
49734: RET
// export function PrepareEnchidna ( ) ; begin
49735: LD_INT 0
49737: PPUSH
// uc_side := 0 ;
49738: LD_ADDR_OWVAR 20
49742: PUSH
49743: LD_INT 0
49745: ST_TO_ADDR
// uc_nation := 0 ;
49746: LD_ADDR_OWVAR 21
49750: PUSH
49751: LD_INT 0
49753: ST_TO_ADDR
// hc_class := class_baggie ;
49754: LD_ADDR_OWVAR 28
49758: PUSH
49759: LD_INT 13
49761: ST_TO_ADDR
// hc_gallery :=  ;
49762: LD_ADDR_OWVAR 33
49766: PUSH
49767: LD_STRING 
49769: ST_TO_ADDR
// end ;
49770: LD_VAR 0 1
49774: RET
// export function PrepareFrog ( ) ; begin
49775: LD_INT 0
49777: PPUSH
// uc_side := 0 ;
49778: LD_ADDR_OWVAR 20
49782: PUSH
49783: LD_INT 0
49785: ST_TO_ADDR
// uc_nation := 0 ;
49786: LD_ADDR_OWVAR 21
49790: PUSH
49791: LD_INT 0
49793: ST_TO_ADDR
// hc_class := class_frog ;
49794: LD_ADDR_OWVAR 28
49798: PUSH
49799: LD_INT 19
49801: ST_TO_ADDR
// hc_gallery :=  ;
49802: LD_ADDR_OWVAR 33
49806: PUSH
49807: LD_STRING 
49809: ST_TO_ADDR
// end ;
49810: LD_VAR 0 1
49814: RET
// export function PrepareFish ( ) ; begin
49815: LD_INT 0
49817: PPUSH
// uc_side := 0 ;
49818: LD_ADDR_OWVAR 20
49822: PUSH
49823: LD_INT 0
49825: ST_TO_ADDR
// uc_nation := 0 ;
49826: LD_ADDR_OWVAR 21
49830: PUSH
49831: LD_INT 0
49833: ST_TO_ADDR
// hc_class := class_fish ;
49834: LD_ADDR_OWVAR 28
49838: PUSH
49839: LD_INT 20
49841: ST_TO_ADDR
// hc_gallery :=  ;
49842: LD_ADDR_OWVAR 33
49846: PUSH
49847: LD_STRING 
49849: ST_TO_ADDR
// end ;
49850: LD_VAR 0 1
49854: RET
// export function PrepareBird ( ) ; begin
49855: LD_INT 0
49857: PPUSH
// uc_side := 0 ;
49858: LD_ADDR_OWVAR 20
49862: PUSH
49863: LD_INT 0
49865: ST_TO_ADDR
// uc_nation := 0 ;
49866: LD_ADDR_OWVAR 21
49870: PUSH
49871: LD_INT 0
49873: ST_TO_ADDR
// hc_class := class_phororhacos ;
49874: LD_ADDR_OWVAR 28
49878: PUSH
49879: LD_INT 18
49881: ST_TO_ADDR
// hc_gallery :=  ;
49882: LD_ADDR_OWVAR 33
49886: PUSH
49887: LD_STRING 
49889: ST_TO_ADDR
// end ;
49890: LD_VAR 0 1
49894: RET
// export function PrepareHorse ( ) ; begin
49895: LD_INT 0
49897: PPUSH
// uc_side := 0 ;
49898: LD_ADDR_OWVAR 20
49902: PUSH
49903: LD_INT 0
49905: ST_TO_ADDR
// uc_nation := 0 ;
49906: LD_ADDR_OWVAR 21
49910: PUSH
49911: LD_INT 0
49913: ST_TO_ADDR
// hc_class := class_horse ;
49914: LD_ADDR_OWVAR 28
49918: PUSH
49919: LD_INT 21
49921: ST_TO_ADDR
// hc_gallery :=  ;
49922: LD_ADDR_OWVAR 33
49926: PUSH
49927: LD_STRING 
49929: ST_TO_ADDR
// end ;
49930: LD_VAR 0 1
49934: RET
// export function PrepareMastodont ( ) ; begin
49935: LD_INT 0
49937: PPUSH
// uc_side := 0 ;
49938: LD_ADDR_OWVAR 20
49942: PUSH
49943: LD_INT 0
49945: ST_TO_ADDR
// uc_nation := 0 ;
49946: LD_ADDR_OWVAR 21
49950: PUSH
49951: LD_INT 0
49953: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49954: LD_ADDR_OWVAR 37
49958: PUSH
49959: LD_INT 31
49961: ST_TO_ADDR
// vc_control := control_rider ;
49962: LD_ADDR_OWVAR 38
49966: PUSH
49967: LD_INT 4
49969: ST_TO_ADDR
// end ;
49970: LD_VAR 0 1
49974: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49975: LD_INT 0
49977: PPUSH
49978: PPUSH
49979: PPUSH
// uc_side = 0 ;
49980: LD_ADDR_OWVAR 20
49984: PUSH
49985: LD_INT 0
49987: ST_TO_ADDR
// uc_nation = 0 ;
49988: LD_ADDR_OWVAR 21
49992: PUSH
49993: LD_INT 0
49995: ST_TO_ADDR
// InitHc_All ( ) ;
49996: CALL_OW 584
// InitVc ;
50000: CALL_OW 20
// if mastodonts then
50004: LD_VAR 0 6
50008: IFFALSE 50075
// for i = 1 to mastodonts do
50010: LD_ADDR_VAR 0 11
50014: PUSH
50015: DOUBLE
50016: LD_INT 1
50018: DEC
50019: ST_TO_ADDR
50020: LD_VAR 0 6
50024: PUSH
50025: FOR_TO
50026: IFFALSE 50073
// begin vc_chassis := 31 ;
50028: LD_ADDR_OWVAR 37
50032: PUSH
50033: LD_INT 31
50035: ST_TO_ADDR
// vc_control := control_rider ;
50036: LD_ADDR_OWVAR 38
50040: PUSH
50041: LD_INT 4
50043: ST_TO_ADDR
// animal := CreateVehicle ;
50044: LD_ADDR_VAR 0 12
50048: PUSH
50049: CALL_OW 45
50053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50054: LD_VAR 0 12
50058: PPUSH
50059: LD_VAR 0 8
50063: PPUSH
50064: LD_INT 0
50066: PPUSH
50067: CALL 52203 0 3
// end ;
50071: GO 50025
50073: POP
50074: POP
// if horses then
50075: LD_VAR 0 5
50079: IFFALSE 50146
// for i = 1 to horses do
50081: LD_ADDR_VAR 0 11
50085: PUSH
50086: DOUBLE
50087: LD_INT 1
50089: DEC
50090: ST_TO_ADDR
50091: LD_VAR 0 5
50095: PUSH
50096: FOR_TO
50097: IFFALSE 50144
// begin hc_class := 21 ;
50099: LD_ADDR_OWVAR 28
50103: PUSH
50104: LD_INT 21
50106: ST_TO_ADDR
// hc_gallery :=  ;
50107: LD_ADDR_OWVAR 33
50111: PUSH
50112: LD_STRING 
50114: ST_TO_ADDR
// animal := CreateHuman ;
50115: LD_ADDR_VAR 0 12
50119: PUSH
50120: CALL_OW 44
50124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50125: LD_VAR 0 12
50129: PPUSH
50130: LD_VAR 0 8
50134: PPUSH
50135: LD_INT 0
50137: PPUSH
50138: CALL 52203 0 3
// end ;
50142: GO 50096
50144: POP
50145: POP
// if birds then
50146: LD_VAR 0 1
50150: IFFALSE 50217
// for i = 1 to birds do
50152: LD_ADDR_VAR 0 11
50156: PUSH
50157: DOUBLE
50158: LD_INT 1
50160: DEC
50161: ST_TO_ADDR
50162: LD_VAR 0 1
50166: PUSH
50167: FOR_TO
50168: IFFALSE 50215
// begin hc_class := 18 ;
50170: LD_ADDR_OWVAR 28
50174: PUSH
50175: LD_INT 18
50177: ST_TO_ADDR
// hc_gallery =  ;
50178: LD_ADDR_OWVAR 33
50182: PUSH
50183: LD_STRING 
50185: ST_TO_ADDR
// animal := CreateHuman ;
50186: LD_ADDR_VAR 0 12
50190: PUSH
50191: CALL_OW 44
50195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50196: LD_VAR 0 12
50200: PPUSH
50201: LD_VAR 0 8
50205: PPUSH
50206: LD_INT 0
50208: PPUSH
50209: CALL 52203 0 3
// end ;
50213: GO 50167
50215: POP
50216: POP
// if tigers then
50217: LD_VAR 0 2
50221: IFFALSE 50305
// for i = 1 to tigers do
50223: LD_ADDR_VAR 0 11
50227: PUSH
50228: DOUBLE
50229: LD_INT 1
50231: DEC
50232: ST_TO_ADDR
50233: LD_VAR 0 2
50237: PUSH
50238: FOR_TO
50239: IFFALSE 50303
// begin hc_class = class_tiger ;
50241: LD_ADDR_OWVAR 28
50245: PUSH
50246: LD_INT 14
50248: ST_TO_ADDR
// hc_gallery =  ;
50249: LD_ADDR_OWVAR 33
50253: PUSH
50254: LD_STRING 
50256: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50257: LD_ADDR_OWVAR 35
50261: PUSH
50262: LD_INT 7
50264: NEG
50265: PPUSH
50266: LD_INT 7
50268: PPUSH
50269: CALL_OW 12
50273: ST_TO_ADDR
// animal := CreateHuman ;
50274: LD_ADDR_VAR 0 12
50278: PUSH
50279: CALL_OW 44
50283: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50284: LD_VAR 0 12
50288: PPUSH
50289: LD_VAR 0 8
50293: PPUSH
50294: LD_INT 0
50296: PPUSH
50297: CALL 52203 0 3
// end ;
50301: GO 50238
50303: POP
50304: POP
// if apemans then
50305: LD_VAR 0 3
50309: IFFALSE 50432
// for i = 1 to apemans do
50311: LD_ADDR_VAR 0 11
50315: PUSH
50316: DOUBLE
50317: LD_INT 1
50319: DEC
50320: ST_TO_ADDR
50321: LD_VAR 0 3
50325: PUSH
50326: FOR_TO
50327: IFFALSE 50430
// begin hc_class = class_apeman ;
50329: LD_ADDR_OWVAR 28
50333: PUSH
50334: LD_INT 12
50336: ST_TO_ADDR
// hc_gallery =  ;
50337: LD_ADDR_OWVAR 33
50341: PUSH
50342: LD_STRING 
50344: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50345: LD_ADDR_OWVAR 35
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PPUSH
50354: LD_INT 2
50356: PPUSH
50357: CALL_OW 12
50361: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50362: LD_ADDR_OWVAR 31
50366: PUSH
50367: LD_INT 1
50369: PPUSH
50370: LD_INT 3
50372: PPUSH
50373: CALL_OW 12
50377: PUSH
50378: LD_INT 1
50380: PPUSH
50381: LD_INT 3
50383: PPUSH
50384: CALL_OW 12
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// animal := CreateHuman ;
50401: LD_ADDR_VAR 0 12
50405: PUSH
50406: CALL_OW 44
50410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50411: LD_VAR 0 12
50415: PPUSH
50416: LD_VAR 0 8
50420: PPUSH
50421: LD_INT 0
50423: PPUSH
50424: CALL 52203 0 3
// end ;
50428: GO 50326
50430: POP
50431: POP
// if enchidnas then
50432: LD_VAR 0 4
50436: IFFALSE 50503
// for i = 1 to enchidnas do
50438: LD_ADDR_VAR 0 11
50442: PUSH
50443: DOUBLE
50444: LD_INT 1
50446: DEC
50447: ST_TO_ADDR
50448: LD_VAR 0 4
50452: PUSH
50453: FOR_TO
50454: IFFALSE 50501
// begin hc_class = 13 ;
50456: LD_ADDR_OWVAR 28
50460: PUSH
50461: LD_INT 13
50463: ST_TO_ADDR
// hc_gallery =  ;
50464: LD_ADDR_OWVAR 33
50468: PUSH
50469: LD_STRING 
50471: ST_TO_ADDR
// animal := CreateHuman ;
50472: LD_ADDR_VAR 0 12
50476: PUSH
50477: CALL_OW 44
50481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50482: LD_VAR 0 12
50486: PPUSH
50487: LD_VAR 0 8
50491: PPUSH
50492: LD_INT 0
50494: PPUSH
50495: CALL 52203 0 3
// end ;
50499: GO 50453
50501: POP
50502: POP
// if fishes then
50503: LD_VAR 0 7
50507: IFFALSE 50574
// for i = 1 to fishes do
50509: LD_ADDR_VAR 0 11
50513: PUSH
50514: DOUBLE
50515: LD_INT 1
50517: DEC
50518: ST_TO_ADDR
50519: LD_VAR 0 7
50523: PUSH
50524: FOR_TO
50525: IFFALSE 50572
// begin hc_class = 20 ;
50527: LD_ADDR_OWVAR 28
50531: PUSH
50532: LD_INT 20
50534: ST_TO_ADDR
// hc_gallery =  ;
50535: LD_ADDR_OWVAR 33
50539: PUSH
50540: LD_STRING 
50542: ST_TO_ADDR
// animal := CreateHuman ;
50543: LD_ADDR_VAR 0 12
50547: PUSH
50548: CALL_OW 44
50552: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50553: LD_VAR 0 12
50557: PPUSH
50558: LD_VAR 0 9
50562: PPUSH
50563: LD_INT 0
50565: PPUSH
50566: CALL 52203 0 3
// end ;
50570: GO 50524
50572: POP
50573: POP
// end ;
50574: LD_VAR 0 10
50578: RET
// export function WantHeal ( sci , unit ) ; begin
50579: LD_INT 0
50581: PPUSH
// if GetTaskList ( sci ) > 0 then
50582: LD_VAR 0 1
50586: PPUSH
50587: CALL_OW 437
50591: PUSH
50592: LD_INT 0
50594: GREATER
50595: IFFALSE 50665
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50597: LD_VAR 0 1
50601: PPUSH
50602: CALL_OW 437
50606: PUSH
50607: LD_INT 1
50609: ARRAY
50610: PUSH
50611: LD_INT 1
50613: ARRAY
50614: PUSH
50615: LD_STRING l
50617: EQUAL
50618: PUSH
50619: LD_VAR 0 1
50623: PPUSH
50624: CALL_OW 437
50628: PUSH
50629: LD_INT 1
50631: ARRAY
50632: PUSH
50633: LD_INT 4
50635: ARRAY
50636: PUSH
50637: LD_VAR 0 2
50641: EQUAL
50642: AND
50643: IFFALSE 50655
// result := true else
50645: LD_ADDR_VAR 0 3
50649: PUSH
50650: LD_INT 1
50652: ST_TO_ADDR
50653: GO 50663
// result := false ;
50655: LD_ADDR_VAR 0 3
50659: PUSH
50660: LD_INT 0
50662: ST_TO_ADDR
// end else
50663: GO 50673
// result := false ;
50665: LD_ADDR_VAR 0 3
50669: PUSH
50670: LD_INT 0
50672: ST_TO_ADDR
// end ;
50673: LD_VAR 0 3
50677: RET
// export function HealTarget ( sci ) ; begin
50678: LD_INT 0
50680: PPUSH
// if not sci then
50681: LD_VAR 0 1
50685: NOT
50686: IFFALSE 50690
// exit ;
50688: GO 50755
// result := 0 ;
50690: LD_ADDR_VAR 0 2
50694: PUSH
50695: LD_INT 0
50697: ST_TO_ADDR
// if GetTaskList ( sci ) then
50698: LD_VAR 0 1
50702: PPUSH
50703: CALL_OW 437
50707: IFFALSE 50755
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50709: LD_VAR 0 1
50713: PPUSH
50714: CALL_OW 437
50718: PUSH
50719: LD_INT 1
50721: ARRAY
50722: PUSH
50723: LD_INT 1
50725: ARRAY
50726: PUSH
50727: LD_STRING l
50729: EQUAL
50730: IFFALSE 50755
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50732: LD_ADDR_VAR 0 2
50736: PUSH
50737: LD_VAR 0 1
50741: PPUSH
50742: CALL_OW 437
50746: PUSH
50747: LD_INT 1
50749: ARRAY
50750: PUSH
50751: LD_INT 4
50753: ARRAY
50754: ST_TO_ADDR
// end ;
50755: LD_VAR 0 2
50759: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50760: LD_INT 0
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
// if not base_units then
50766: LD_VAR 0 1
50770: NOT
50771: IFFALSE 50775
// exit ;
50773: GO 50862
// result := false ;
50775: LD_ADDR_VAR 0 2
50779: PUSH
50780: LD_INT 0
50782: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50783: LD_ADDR_VAR 0 5
50787: PUSH
50788: LD_VAR 0 1
50792: PPUSH
50793: LD_INT 21
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PPUSH
50803: CALL_OW 72
50807: ST_TO_ADDR
// if not tmp then
50808: LD_VAR 0 5
50812: NOT
50813: IFFALSE 50817
// exit ;
50815: GO 50862
// for i in tmp do
50817: LD_ADDR_VAR 0 3
50821: PUSH
50822: LD_VAR 0 5
50826: PUSH
50827: FOR_IN
50828: IFFALSE 50860
// begin result := EnemyInRange ( i , 22 ) ;
50830: LD_ADDR_VAR 0 2
50834: PUSH
50835: LD_VAR 0 3
50839: PPUSH
50840: LD_INT 22
50842: PPUSH
50843: CALL 48440 0 2
50847: ST_TO_ADDR
// if result then
50848: LD_VAR 0 2
50852: IFFALSE 50858
// exit ;
50854: POP
50855: POP
50856: GO 50862
// end ;
50858: GO 50827
50860: POP
50861: POP
// end ;
50862: LD_VAR 0 2
50866: RET
// export function FilterByTag ( units , tag ) ; begin
50867: LD_INT 0
50869: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50870: LD_ADDR_VAR 0 3
50874: PUSH
50875: LD_VAR 0 1
50879: PPUSH
50880: LD_INT 120
50882: PUSH
50883: LD_VAR 0 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PPUSH
50892: CALL_OW 72
50896: ST_TO_ADDR
// end ;
50897: LD_VAR 0 3
50901: RET
// export function IsDriver ( un ) ; begin
50902: LD_INT 0
50904: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50905: LD_ADDR_VAR 0 2
50909: PUSH
50910: LD_VAR 0 1
50914: PUSH
50915: LD_INT 55
50917: PUSH
50918: EMPTY
50919: LIST
50920: PPUSH
50921: CALL_OW 69
50925: IN
50926: ST_TO_ADDR
// end ;
50927: LD_VAR 0 2
50931: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50932: LD_INT 0
50934: PPUSH
50935: PPUSH
// list := [ ] ;
50936: LD_ADDR_VAR 0 5
50940: PUSH
50941: EMPTY
50942: ST_TO_ADDR
// case d of 0 :
50943: LD_VAR 0 3
50947: PUSH
50948: LD_INT 0
50950: DOUBLE
50951: EQUAL
50952: IFTRUE 50956
50954: GO 51089
50956: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50957: LD_ADDR_VAR 0 5
50961: PUSH
50962: LD_VAR 0 1
50966: PUSH
50967: LD_INT 4
50969: MINUS
50970: PUSH
50971: LD_VAR 0 2
50975: PUSH
50976: LD_INT 4
50978: MINUS
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: PUSH
50988: LD_VAR 0 1
50992: PUSH
50993: LD_INT 3
50995: MINUS
50996: PUSH
50997: LD_VAR 0 2
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: PUSH
51010: LD_VAR 0 1
51014: PUSH
51015: LD_INT 4
51017: PLUS
51018: PUSH
51019: LD_VAR 0 2
51023: PUSH
51024: LD_INT 4
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: PUSH
51032: LD_VAR 0 1
51036: PUSH
51037: LD_INT 3
51039: PLUS
51040: PUSH
51041: LD_VAR 0 2
51045: PUSH
51046: LD_INT 3
51048: PLUS
51049: PUSH
51050: LD_INT 5
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: PUSH
51058: LD_VAR 0 1
51062: PUSH
51063: LD_VAR 0 2
51067: PUSH
51068: LD_INT 4
51070: PLUS
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: ST_TO_ADDR
// end ; 1 :
51087: GO 51787
51089: LD_INT 1
51091: DOUBLE
51092: EQUAL
51093: IFTRUE 51097
51095: GO 51230
51097: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51098: LD_ADDR_VAR 0 5
51102: PUSH
51103: LD_VAR 0 1
51107: PUSH
51108: LD_VAR 0 2
51112: PUSH
51113: LD_INT 4
51115: MINUS
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: PUSH
51125: LD_VAR 0 1
51129: PUSH
51130: LD_INT 3
51132: MINUS
51133: PUSH
51134: LD_VAR 0 2
51138: PUSH
51139: LD_INT 3
51141: MINUS
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: PUSH
51151: LD_VAR 0 1
51155: PUSH
51156: LD_INT 4
51158: MINUS
51159: PUSH
51160: LD_VAR 0 2
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: PUSH
51173: LD_VAR 0 1
51177: PUSH
51178: LD_VAR 0 2
51182: PUSH
51183: LD_INT 3
51185: PLUS
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: PUSH
51195: LD_VAR 0 1
51199: PUSH
51200: LD_INT 4
51202: PLUS
51203: PUSH
51204: LD_VAR 0 2
51208: PUSH
51209: LD_INT 4
51211: PLUS
51212: PUSH
51213: LD_INT 5
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: ST_TO_ADDR
// end ; 2 :
51228: GO 51787
51230: LD_INT 2
51232: DOUBLE
51233: EQUAL
51234: IFTRUE 51238
51236: GO 51367
51238: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51239: LD_ADDR_VAR 0 5
51243: PUSH
51244: LD_VAR 0 1
51248: PUSH
51249: LD_VAR 0 2
51253: PUSH
51254: LD_INT 3
51256: MINUS
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: PUSH
51266: LD_VAR 0 1
51270: PUSH
51271: LD_INT 4
51273: PLUS
51274: PUSH
51275: LD_VAR 0 2
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: PUSH
51288: LD_VAR 0 1
51292: PUSH
51293: LD_VAR 0 2
51297: PUSH
51298: LD_INT 4
51300: PLUS
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: PUSH
51310: LD_VAR 0 1
51314: PUSH
51315: LD_INT 3
51317: MINUS
51318: PUSH
51319: LD_VAR 0 2
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: LIST
51331: PUSH
51332: LD_VAR 0 1
51336: PUSH
51337: LD_INT 4
51339: MINUS
51340: PUSH
51341: LD_VAR 0 2
51345: PUSH
51346: LD_INT 4
51348: MINUS
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
// end ; 3 :
51365: GO 51787
51367: LD_INT 3
51369: DOUBLE
51370: EQUAL
51371: IFTRUE 51375
51373: GO 51508
51375: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51376: LD_ADDR_VAR 0 5
51380: PUSH
51381: LD_VAR 0 1
51385: PUSH
51386: LD_INT 3
51388: PLUS
51389: PUSH
51390: LD_VAR 0 2
51394: PUSH
51395: LD_INT 4
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: PUSH
51403: LD_VAR 0 1
51407: PUSH
51408: LD_INT 4
51410: PLUS
51411: PUSH
51412: LD_VAR 0 2
51416: PUSH
51417: LD_INT 4
51419: PLUS
51420: PUSH
51421: LD_INT 5
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: PUSH
51429: LD_VAR 0 1
51433: PUSH
51434: LD_INT 4
51436: MINUS
51437: PUSH
51438: LD_VAR 0 2
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: PUSH
51451: LD_VAR 0 1
51455: PUSH
51456: LD_VAR 0 2
51460: PUSH
51461: LD_INT 4
51463: MINUS
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: PUSH
51473: LD_VAR 0 1
51477: PUSH
51478: LD_INT 3
51480: MINUS
51481: PUSH
51482: LD_VAR 0 2
51486: PUSH
51487: LD_INT 3
51489: MINUS
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: ST_TO_ADDR
// end ; 4 :
51506: GO 51787
51508: LD_INT 4
51510: DOUBLE
51511: EQUAL
51512: IFTRUE 51516
51514: GO 51649
51516: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51517: LD_ADDR_VAR 0 5
51521: PUSH
51522: LD_VAR 0 1
51526: PUSH
51527: LD_VAR 0 2
51531: PUSH
51532: LD_INT 4
51534: PLUS
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: PUSH
51544: LD_VAR 0 1
51548: PUSH
51549: LD_INT 3
51551: PLUS
51552: PUSH
51553: LD_VAR 0 2
51557: PUSH
51558: LD_INT 3
51560: PLUS
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: PUSH
51570: LD_VAR 0 1
51574: PUSH
51575: LD_INT 4
51577: PLUS
51578: PUSH
51579: LD_VAR 0 2
51583: PUSH
51584: LD_INT 4
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: PUSH
51592: LD_VAR 0 1
51596: PUSH
51597: LD_VAR 0 2
51601: PUSH
51602: LD_INT 3
51604: MINUS
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: PUSH
51614: LD_VAR 0 1
51618: PUSH
51619: LD_INT 4
51621: MINUS
51622: PUSH
51623: LD_VAR 0 2
51627: PUSH
51628: LD_INT 4
51630: MINUS
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// end ; 5 :
51647: GO 51787
51649: LD_INT 5
51651: DOUBLE
51652: EQUAL
51653: IFTRUE 51657
51655: GO 51786
51657: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51658: LD_ADDR_VAR 0 5
51662: PUSH
51663: LD_VAR 0 1
51667: PUSH
51668: LD_INT 4
51670: MINUS
51671: PUSH
51672: LD_VAR 0 2
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: PUSH
51685: LD_VAR 0 1
51689: PUSH
51690: LD_VAR 0 2
51694: PUSH
51695: LD_INT 4
51697: MINUS
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: PUSH
51707: LD_VAR 0 1
51711: PUSH
51712: LD_INT 4
51714: PLUS
51715: PUSH
51716: LD_VAR 0 2
51720: PUSH
51721: LD_INT 4
51723: PLUS
51724: PUSH
51725: LD_INT 5
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: PUSH
51733: LD_VAR 0 1
51737: PUSH
51738: LD_INT 3
51740: PLUS
51741: PUSH
51742: LD_VAR 0 2
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: PUSH
51755: LD_VAR 0 1
51759: PUSH
51760: LD_VAR 0 2
51764: PUSH
51765: LD_INT 3
51767: PLUS
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: ST_TO_ADDR
// end ; end ;
51784: GO 51787
51786: POP
// result := list ;
51787: LD_ADDR_VAR 0 4
51791: PUSH
51792: LD_VAR 0 5
51796: ST_TO_ADDR
// end ;
51797: LD_VAR 0 4
51801: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51802: LD_INT 0
51804: PPUSH
51805: PPUSH
51806: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51807: LD_VAR 0 1
51811: NOT
51812: PUSH
51813: LD_VAR 0 2
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: LD_INT 3
51826: PUSH
51827: LD_INT 4
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: IN
51836: NOT
51837: OR
51838: IFFALSE 51842
// exit ;
51840: GO 51925
// tmp := [ ] ;
51842: LD_ADDR_VAR 0 5
51846: PUSH
51847: EMPTY
51848: ST_TO_ADDR
// for i in units do
51849: LD_ADDR_VAR 0 4
51853: PUSH
51854: LD_VAR 0 1
51858: PUSH
51859: FOR_IN
51860: IFFALSE 51894
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51862: LD_ADDR_VAR 0 5
51866: PUSH
51867: LD_VAR 0 5
51871: PPUSH
51872: LD_VAR 0 4
51876: PPUSH
51877: LD_VAR 0 2
51881: PPUSH
51882: CALL_OW 259
51886: PPUSH
51887: CALL 53298 0 2
51891: ST_TO_ADDR
51892: GO 51859
51894: POP
51895: POP
// if not tmp then
51896: LD_VAR 0 5
51900: NOT
51901: IFFALSE 51905
// exit ;
51903: GO 51925
// result := SortListByListDesc ( units , tmp ) ;
51905: LD_ADDR_VAR 0 3
51909: PUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: LD_VAR 0 5
51919: PPUSH
51920: CALL_OW 77
51924: ST_TO_ADDR
// end ;
51925: LD_VAR 0 3
51929: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51930: LD_INT 0
51932: PPUSH
51933: PPUSH
51934: PPUSH
// result := false ;
51935: LD_ADDR_VAR 0 3
51939: PUSH
51940: LD_INT 0
51942: ST_TO_ADDR
// if not building then
51943: LD_VAR 0 2
51947: NOT
51948: IFFALSE 51952
// exit ;
51950: GO 52090
// x := GetX ( building ) ;
51952: LD_ADDR_VAR 0 4
51956: PUSH
51957: LD_VAR 0 2
51961: PPUSH
51962: CALL_OW 250
51966: ST_TO_ADDR
// y := GetY ( building ) ;
51967: LD_ADDR_VAR 0 5
51971: PUSH
51972: LD_VAR 0 2
51976: PPUSH
51977: CALL_OW 251
51981: ST_TO_ADDR
// if not x or not y then
51982: LD_VAR 0 4
51986: NOT
51987: PUSH
51988: LD_VAR 0 5
51992: NOT
51993: OR
51994: IFFALSE 51998
// exit ;
51996: GO 52090
// if GetTaskList ( unit ) then
51998: LD_VAR 0 1
52002: PPUSH
52003: CALL_OW 437
52007: IFFALSE 52090
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52009: LD_STRING e
52011: PUSH
52012: LD_VAR 0 1
52016: PPUSH
52017: CALL_OW 437
52021: PUSH
52022: LD_INT 1
52024: ARRAY
52025: PUSH
52026: LD_INT 1
52028: ARRAY
52029: EQUAL
52030: PUSH
52031: LD_VAR 0 4
52035: PUSH
52036: LD_VAR 0 1
52040: PPUSH
52041: CALL_OW 437
52045: PUSH
52046: LD_INT 1
52048: ARRAY
52049: PUSH
52050: LD_INT 2
52052: ARRAY
52053: EQUAL
52054: AND
52055: PUSH
52056: LD_VAR 0 5
52060: PUSH
52061: LD_VAR 0 1
52065: PPUSH
52066: CALL_OW 437
52070: PUSH
52071: LD_INT 1
52073: ARRAY
52074: PUSH
52075: LD_INT 3
52077: ARRAY
52078: EQUAL
52079: AND
52080: IFFALSE 52090
// result := true end ;
52082: LD_ADDR_VAR 0 3
52086: PUSH
52087: LD_INT 1
52089: ST_TO_ADDR
// end ;
52090: LD_VAR 0 3
52094: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52095: LD_INT 0
52097: PPUSH
// result := false ;
52098: LD_ADDR_VAR 0 4
52102: PUSH
52103: LD_INT 0
52105: ST_TO_ADDR
// if GetTaskList ( unit ) then
52106: LD_VAR 0 1
52110: PPUSH
52111: CALL_OW 437
52115: IFFALSE 52198
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52117: LD_STRING M
52119: PUSH
52120: LD_VAR 0 1
52124: PPUSH
52125: CALL_OW 437
52129: PUSH
52130: LD_INT 1
52132: ARRAY
52133: PUSH
52134: LD_INT 1
52136: ARRAY
52137: EQUAL
52138: PUSH
52139: LD_VAR 0 2
52143: PUSH
52144: LD_VAR 0 1
52148: PPUSH
52149: CALL_OW 437
52153: PUSH
52154: LD_INT 1
52156: ARRAY
52157: PUSH
52158: LD_INT 2
52160: ARRAY
52161: EQUAL
52162: AND
52163: PUSH
52164: LD_VAR 0 3
52168: PUSH
52169: LD_VAR 0 1
52173: PPUSH
52174: CALL_OW 437
52178: PUSH
52179: LD_INT 1
52181: ARRAY
52182: PUSH
52183: LD_INT 3
52185: ARRAY
52186: EQUAL
52187: AND
52188: IFFALSE 52198
// result := true ;
52190: LD_ADDR_VAR 0 4
52194: PUSH
52195: LD_INT 1
52197: ST_TO_ADDR
// end ; end ;
52198: LD_VAR 0 4
52202: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52203: LD_INT 0
52205: PPUSH
52206: PPUSH
52207: PPUSH
52208: PPUSH
// if not unit or not area then
52209: LD_VAR 0 1
52213: NOT
52214: PUSH
52215: LD_VAR 0 2
52219: NOT
52220: OR
52221: IFFALSE 52225
// exit ;
52223: GO 52401
// tmp := AreaToList ( area , i ) ;
52225: LD_ADDR_VAR 0 6
52229: PUSH
52230: LD_VAR 0 2
52234: PPUSH
52235: LD_VAR 0 5
52239: PPUSH
52240: CALL_OW 517
52244: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52245: LD_ADDR_VAR 0 5
52249: PUSH
52250: DOUBLE
52251: LD_INT 1
52253: DEC
52254: ST_TO_ADDR
52255: LD_VAR 0 6
52259: PUSH
52260: LD_INT 1
52262: ARRAY
52263: PUSH
52264: FOR_TO
52265: IFFALSE 52399
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52267: LD_ADDR_VAR 0 7
52271: PUSH
52272: LD_VAR 0 6
52276: PUSH
52277: LD_INT 1
52279: ARRAY
52280: PUSH
52281: LD_VAR 0 5
52285: ARRAY
52286: PUSH
52287: LD_VAR 0 6
52291: PUSH
52292: LD_INT 2
52294: ARRAY
52295: PUSH
52296: LD_VAR 0 5
52300: ARRAY
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52306: LD_INT 92
52308: PUSH
52309: LD_VAR 0 7
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PUSH
52318: LD_VAR 0 7
52322: PUSH
52323: LD_INT 2
52325: ARRAY
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: PPUSH
52336: CALL_OW 69
52340: PUSH
52341: LD_INT 0
52343: EQUAL
52344: IFFALSE 52397
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52346: LD_VAR 0 1
52350: PPUSH
52351: LD_VAR 0 7
52355: PUSH
52356: LD_INT 1
52358: ARRAY
52359: PPUSH
52360: LD_VAR 0 7
52364: PUSH
52365: LD_INT 2
52367: ARRAY
52368: PPUSH
52369: LD_VAR 0 3
52373: PPUSH
52374: CALL_OW 48
// result := IsPlaced ( unit ) ;
52378: LD_ADDR_VAR 0 4
52382: PUSH
52383: LD_VAR 0 1
52387: PPUSH
52388: CALL_OW 305
52392: ST_TO_ADDR
// exit ;
52393: POP
52394: POP
52395: GO 52401
// end ; end ;
52397: GO 52264
52399: POP
52400: POP
// end ;
52401: LD_VAR 0 4
52405: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52406: LD_INT 0
52408: PPUSH
52409: PPUSH
52410: PPUSH
// if not side or side > 8 then
52411: LD_VAR 0 1
52415: NOT
52416: PUSH
52417: LD_VAR 0 1
52421: PUSH
52422: LD_INT 8
52424: GREATER
52425: OR
52426: IFFALSE 52430
// exit ;
52428: GO 52617
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52430: LD_ADDR_VAR 0 4
52434: PUSH
52435: LD_INT 22
52437: PUSH
52438: LD_VAR 0 1
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 21
52449: PUSH
52450: LD_INT 3
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PPUSH
52461: CALL_OW 69
52465: ST_TO_ADDR
// if not tmp then
52466: LD_VAR 0 4
52470: NOT
52471: IFFALSE 52475
// exit ;
52473: GO 52617
// enable_addtolog := true ;
52475: LD_ADDR_OWVAR 81
52479: PUSH
52480: LD_INT 1
52482: ST_TO_ADDR
// AddToLog ( [ ) ;
52483: LD_STRING [
52485: PPUSH
52486: CALL_OW 561
// for i in tmp do
52490: LD_ADDR_VAR 0 3
52494: PUSH
52495: LD_VAR 0 4
52499: PUSH
52500: FOR_IN
52501: IFFALSE 52608
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52503: LD_STRING [
52505: PUSH
52506: LD_VAR 0 3
52510: PPUSH
52511: CALL_OW 266
52515: STR
52516: PUSH
52517: LD_STRING , 
52519: STR
52520: PUSH
52521: LD_VAR 0 3
52525: PPUSH
52526: CALL_OW 250
52530: STR
52531: PUSH
52532: LD_STRING , 
52534: STR
52535: PUSH
52536: LD_VAR 0 3
52540: PPUSH
52541: CALL_OW 251
52545: STR
52546: PUSH
52547: LD_STRING , 
52549: STR
52550: PUSH
52551: LD_VAR 0 3
52555: PPUSH
52556: CALL_OW 254
52560: STR
52561: PUSH
52562: LD_STRING , 
52564: STR
52565: PUSH
52566: LD_VAR 0 3
52570: PPUSH
52571: LD_INT 1
52573: PPUSH
52574: CALL_OW 268
52578: STR
52579: PUSH
52580: LD_STRING , 
52582: STR
52583: PUSH
52584: LD_VAR 0 3
52588: PPUSH
52589: LD_INT 2
52591: PPUSH
52592: CALL_OW 268
52596: STR
52597: PUSH
52598: LD_STRING ],
52600: STR
52601: PPUSH
52602: CALL_OW 561
// end ;
52606: GO 52500
52608: POP
52609: POP
// AddToLog ( ]; ) ;
52610: LD_STRING ];
52612: PPUSH
52613: CALL_OW 561
// end ;
52617: LD_VAR 0 2
52621: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52622: LD_INT 0
52624: PPUSH
52625: PPUSH
52626: PPUSH
52627: PPUSH
52628: PPUSH
// if not area or not rate or not max then
52629: LD_VAR 0 1
52633: NOT
52634: PUSH
52635: LD_VAR 0 2
52639: NOT
52640: OR
52641: PUSH
52642: LD_VAR 0 4
52646: NOT
52647: OR
52648: IFFALSE 52652
// exit ;
52650: GO 52841
// while 1 do
52652: LD_INT 1
52654: IFFALSE 52841
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52656: LD_ADDR_VAR 0 9
52660: PUSH
52661: LD_VAR 0 1
52665: PPUSH
52666: LD_INT 1
52668: PPUSH
52669: CALL_OW 287
52673: PUSH
52674: LD_INT 10
52676: MUL
52677: ST_TO_ADDR
// r := rate / 10 ;
52678: LD_ADDR_VAR 0 7
52682: PUSH
52683: LD_VAR 0 2
52687: PUSH
52688: LD_INT 10
52690: DIVREAL
52691: ST_TO_ADDR
// time := 1 1$00 ;
52692: LD_ADDR_VAR 0 8
52696: PUSH
52697: LD_INT 2100
52699: ST_TO_ADDR
// if amount < min then
52700: LD_VAR 0 9
52704: PUSH
52705: LD_VAR 0 3
52709: LESS
52710: IFFALSE 52728
// r := r * 2 else
52712: LD_ADDR_VAR 0 7
52716: PUSH
52717: LD_VAR 0 7
52721: PUSH
52722: LD_INT 2
52724: MUL
52725: ST_TO_ADDR
52726: GO 52754
// if amount > max then
52728: LD_VAR 0 9
52732: PUSH
52733: LD_VAR 0 4
52737: GREATER
52738: IFFALSE 52754
// r := r / 2 ;
52740: LD_ADDR_VAR 0 7
52744: PUSH
52745: LD_VAR 0 7
52749: PUSH
52750: LD_INT 2
52752: DIVREAL
52753: ST_TO_ADDR
// time := time / r ;
52754: LD_ADDR_VAR 0 8
52758: PUSH
52759: LD_VAR 0 8
52763: PUSH
52764: LD_VAR 0 7
52768: DIVREAL
52769: ST_TO_ADDR
// if time < 0 then
52770: LD_VAR 0 8
52774: PUSH
52775: LD_INT 0
52777: LESS
52778: IFFALSE 52795
// time := time * - 1 ;
52780: LD_ADDR_VAR 0 8
52784: PUSH
52785: LD_VAR 0 8
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: MUL
52794: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52795: LD_VAR 0 8
52799: PUSH
52800: LD_INT 35
52802: PPUSH
52803: LD_INT 875
52805: PPUSH
52806: CALL_OW 12
52810: PLUS
52811: PPUSH
52812: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52816: LD_INT 1
52818: PPUSH
52819: LD_INT 5
52821: PPUSH
52822: CALL_OW 12
52826: PPUSH
52827: LD_VAR 0 1
52831: PPUSH
52832: LD_INT 1
52834: PPUSH
52835: CALL_OW 55
// end ;
52839: GO 52652
// end ;
52841: LD_VAR 0 5
52845: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52846: LD_INT 0
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
52853: PPUSH
52854: PPUSH
52855: PPUSH
// if not turrets or not factories then
52856: LD_VAR 0 1
52860: NOT
52861: PUSH
52862: LD_VAR 0 2
52866: NOT
52867: OR
52868: IFFALSE 52872
// exit ;
52870: GO 53179
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52872: LD_ADDR_VAR 0 10
52876: PUSH
52877: LD_INT 5
52879: PUSH
52880: LD_INT 6
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 4
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: LD_INT 5
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 24
52914: PUSH
52915: LD_INT 25
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 23
52924: PUSH
52925: LD_INT 27
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 42
52938: PUSH
52939: LD_INT 43
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 44
52948: PUSH
52949: LD_INT 46
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 45
52958: PUSH
52959: LD_INT 47
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// result := [ ] ;
52976: LD_ADDR_VAR 0 3
52980: PUSH
52981: EMPTY
52982: ST_TO_ADDR
// for i in turrets do
52983: LD_ADDR_VAR 0 4
52987: PUSH
52988: LD_VAR 0 1
52992: PUSH
52993: FOR_IN
52994: IFFALSE 53177
// begin nat := GetNation ( i ) ;
52996: LD_ADDR_VAR 0 7
53000: PUSH
53001: LD_VAR 0 4
53005: PPUSH
53006: CALL_OW 248
53010: ST_TO_ADDR
// weapon := 0 ;
53011: LD_ADDR_VAR 0 8
53015: PUSH
53016: LD_INT 0
53018: ST_TO_ADDR
// if not nat then
53019: LD_VAR 0 7
53023: NOT
53024: IFFALSE 53028
// continue ;
53026: GO 52993
// for j in list [ nat ] do
53028: LD_ADDR_VAR 0 5
53032: PUSH
53033: LD_VAR 0 10
53037: PUSH
53038: LD_VAR 0 7
53042: ARRAY
53043: PUSH
53044: FOR_IN
53045: IFFALSE 53086
// if GetBWeapon ( i ) = j [ 1 ] then
53047: LD_VAR 0 4
53051: PPUSH
53052: CALL_OW 269
53056: PUSH
53057: LD_VAR 0 5
53061: PUSH
53062: LD_INT 1
53064: ARRAY
53065: EQUAL
53066: IFFALSE 53084
// begin weapon := j [ 2 ] ;
53068: LD_ADDR_VAR 0 8
53072: PUSH
53073: LD_VAR 0 5
53077: PUSH
53078: LD_INT 2
53080: ARRAY
53081: ST_TO_ADDR
// break ;
53082: GO 53086
// end ;
53084: GO 53044
53086: POP
53087: POP
// if not weapon then
53088: LD_VAR 0 8
53092: NOT
53093: IFFALSE 53097
// continue ;
53095: GO 52993
// for k in factories do
53097: LD_ADDR_VAR 0 6
53101: PUSH
53102: LD_VAR 0 2
53106: PUSH
53107: FOR_IN
53108: IFFALSE 53173
// begin weapons := AvailableWeaponList ( k ) ;
53110: LD_ADDR_VAR 0 9
53114: PUSH
53115: LD_VAR 0 6
53119: PPUSH
53120: CALL_OW 478
53124: ST_TO_ADDR
// if not weapons then
53125: LD_VAR 0 9
53129: NOT
53130: IFFALSE 53134
// continue ;
53132: GO 53107
// if weapon in weapons then
53134: LD_VAR 0 8
53138: PUSH
53139: LD_VAR 0 9
53143: IN
53144: IFFALSE 53171
// begin result := [ i , weapon ] ;
53146: LD_ADDR_VAR 0 3
53150: PUSH
53151: LD_VAR 0 4
53155: PUSH
53156: LD_VAR 0 8
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: ST_TO_ADDR
// exit ;
53165: POP
53166: POP
53167: POP
53168: POP
53169: GO 53179
// end ; end ;
53171: GO 53107
53173: POP
53174: POP
// end ;
53175: GO 52993
53177: POP
53178: POP
// end ;
53179: LD_VAR 0 3
53183: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53184: LD_INT 0
53186: PPUSH
// if not side or side > 8 then
53187: LD_VAR 0 3
53191: NOT
53192: PUSH
53193: LD_VAR 0 3
53197: PUSH
53198: LD_INT 8
53200: GREATER
53201: OR
53202: IFFALSE 53206
// exit ;
53204: GO 53265
// if not range then
53206: LD_VAR 0 4
53210: NOT
53211: IFFALSE 53222
// range := - 12 ;
53213: LD_ADDR_VAR 0 4
53217: PUSH
53218: LD_INT 12
53220: NEG
53221: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53222: LD_VAR 0 1
53226: PPUSH
53227: LD_VAR 0 2
53231: PPUSH
53232: LD_VAR 0 3
53236: PPUSH
53237: LD_VAR 0 4
53241: PPUSH
53242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53246: LD_VAR 0 1
53250: PPUSH
53251: LD_VAR 0 2
53255: PPUSH
53256: LD_VAR 0 3
53260: PPUSH
53261: CALL_OW 331
// end ;
53265: LD_VAR 0 5
53269: RET
// export function Video ( mode ) ; begin
53270: LD_INT 0
53272: PPUSH
// ingame_video = mode ;
53273: LD_ADDR_OWVAR 52
53277: PUSH
53278: LD_VAR 0 1
53282: ST_TO_ADDR
// interface_hidden = mode ;
53283: LD_ADDR_OWVAR 54
53287: PUSH
53288: LD_VAR 0 1
53292: ST_TO_ADDR
// end ;
53293: LD_VAR 0 2
53297: RET
// export function Join ( array , element ) ; begin
53298: LD_INT 0
53300: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53301: LD_ADDR_VAR 0 3
53305: PUSH
53306: LD_VAR 0 1
53310: PPUSH
53311: LD_VAR 0 1
53315: PUSH
53316: LD_INT 1
53318: PLUS
53319: PPUSH
53320: LD_VAR 0 2
53324: PPUSH
53325: CALL_OW 1
53329: ST_TO_ADDR
// end ;
53330: LD_VAR 0 3
53334: RET
// export function JoinUnion ( array , element ) ; begin
53335: LD_INT 0
53337: PPUSH
// result := array union element ;
53338: LD_ADDR_VAR 0 3
53342: PUSH
53343: LD_VAR 0 1
53347: PUSH
53348: LD_VAR 0 2
53352: UNION
53353: ST_TO_ADDR
// end ;
53354: LD_VAR 0 3
53358: RET
// export function GetBehemoths ( side ) ; begin
53359: LD_INT 0
53361: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53362: LD_ADDR_VAR 0 2
53366: PUSH
53367: LD_INT 22
53369: PUSH
53370: LD_VAR 0 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 31
53381: PUSH
53382: LD_INT 25
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PPUSH
53393: CALL_OW 69
53397: ST_TO_ADDR
// end ;
53398: LD_VAR 0 2
53402: RET
// export function Shuffle ( array ) ; var i , index ; begin
53403: LD_INT 0
53405: PPUSH
53406: PPUSH
53407: PPUSH
// result := [ ] ;
53408: LD_ADDR_VAR 0 2
53412: PUSH
53413: EMPTY
53414: ST_TO_ADDR
// if not array then
53415: LD_VAR 0 1
53419: NOT
53420: IFFALSE 53424
// exit ;
53422: GO 53523
// Randomize ;
53424: CALL_OW 10
// for i = array downto 1 do
53428: LD_ADDR_VAR 0 3
53432: PUSH
53433: DOUBLE
53434: LD_VAR 0 1
53438: INC
53439: ST_TO_ADDR
53440: LD_INT 1
53442: PUSH
53443: FOR_DOWNTO
53444: IFFALSE 53521
// begin index := rand ( 1 , array ) ;
53446: LD_ADDR_VAR 0 4
53450: PUSH
53451: LD_INT 1
53453: PPUSH
53454: LD_VAR 0 1
53458: PPUSH
53459: CALL_OW 12
53463: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53464: LD_ADDR_VAR 0 2
53468: PUSH
53469: LD_VAR 0 2
53473: PPUSH
53474: LD_VAR 0 2
53478: PUSH
53479: LD_INT 1
53481: PLUS
53482: PPUSH
53483: LD_VAR 0 1
53487: PUSH
53488: LD_VAR 0 4
53492: ARRAY
53493: PPUSH
53494: CALL_OW 2
53498: ST_TO_ADDR
// array := Delete ( array , index ) ;
53499: LD_ADDR_VAR 0 1
53503: PUSH
53504: LD_VAR 0 1
53508: PPUSH
53509: LD_VAR 0 4
53513: PPUSH
53514: CALL_OW 3
53518: ST_TO_ADDR
// end ;
53519: GO 53443
53521: POP
53522: POP
// end ;
53523: LD_VAR 0 2
53527: RET
// export function GetBaseMaterials ( base ) ; begin
53528: LD_INT 0
53530: PPUSH
// result := [ 0 , 0 , 0 ] ;
53531: LD_ADDR_VAR 0 2
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// if not base then
53550: LD_VAR 0 1
53554: NOT
53555: IFFALSE 53559
// exit ;
53557: GO 53608
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53559: LD_ADDR_VAR 0 2
53563: PUSH
53564: LD_VAR 0 1
53568: PPUSH
53569: LD_INT 1
53571: PPUSH
53572: CALL_OW 275
53576: PUSH
53577: LD_VAR 0 1
53581: PPUSH
53582: LD_INT 2
53584: PPUSH
53585: CALL_OW 275
53589: PUSH
53590: LD_VAR 0 1
53594: PPUSH
53595: LD_INT 3
53597: PPUSH
53598: CALL_OW 275
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// end ;
53608: LD_VAR 0 2
53612: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53613: LD_INT 0
53615: PPUSH
53616: PPUSH
// result := array ;
53617: LD_ADDR_VAR 0 3
53621: PUSH
53622: LD_VAR 0 1
53626: ST_TO_ADDR
// if size >= result then
53627: LD_VAR 0 2
53631: PUSH
53632: LD_VAR 0 3
53636: GREATEREQUAL
53637: IFFALSE 53641
// exit ;
53639: GO 53691
// if size then
53641: LD_VAR 0 2
53645: IFFALSE 53691
// for i := array downto size do
53647: LD_ADDR_VAR 0 4
53651: PUSH
53652: DOUBLE
53653: LD_VAR 0 1
53657: INC
53658: ST_TO_ADDR
53659: LD_VAR 0 2
53663: PUSH
53664: FOR_DOWNTO
53665: IFFALSE 53689
// result := Delete ( result , result ) ;
53667: LD_ADDR_VAR 0 3
53671: PUSH
53672: LD_VAR 0 3
53676: PPUSH
53677: LD_VAR 0 3
53681: PPUSH
53682: CALL_OW 3
53686: ST_TO_ADDR
53687: GO 53664
53689: POP
53690: POP
// end ;
53691: LD_VAR 0 3
53695: RET
// export function ComExit ( unit ) ; var tmp ; begin
53696: LD_INT 0
53698: PPUSH
53699: PPUSH
// if not IsInUnit ( unit ) then
53700: LD_VAR 0 1
53704: PPUSH
53705: CALL_OW 310
53709: NOT
53710: IFFALSE 53714
// exit ;
53712: GO 53774
// tmp := IsInUnit ( unit ) ;
53714: LD_ADDR_VAR 0 3
53718: PUSH
53719: LD_VAR 0 1
53723: PPUSH
53724: CALL_OW 310
53728: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53729: LD_VAR 0 3
53733: PPUSH
53734: CALL_OW 247
53738: PUSH
53739: LD_INT 2
53741: EQUAL
53742: IFFALSE 53755
// ComExitVehicle ( unit ) else
53744: LD_VAR 0 1
53748: PPUSH
53749: CALL_OW 121
53753: GO 53764
// ComExitBuilding ( unit ) ;
53755: LD_VAR 0 1
53759: PPUSH
53760: CALL_OW 122
// result := tmp ;
53764: LD_ADDR_VAR 0 2
53768: PUSH
53769: LD_VAR 0 3
53773: ST_TO_ADDR
// end ;
53774: LD_VAR 0 2
53778: RET
// export function ComExitAll ( units ) ; var i ; begin
53779: LD_INT 0
53781: PPUSH
53782: PPUSH
// if not units then
53783: LD_VAR 0 1
53787: NOT
53788: IFFALSE 53792
// exit ;
53790: GO 53818
// for i in units do
53792: LD_ADDR_VAR 0 3
53796: PUSH
53797: LD_VAR 0 1
53801: PUSH
53802: FOR_IN
53803: IFFALSE 53816
// ComExit ( i ) ;
53805: LD_VAR 0 3
53809: PPUSH
53810: CALL 53696 0 1
53814: GO 53802
53816: POP
53817: POP
// end ;
53818: LD_VAR 0 2
53822: RET
// export function ResetHc ; begin
53823: LD_INT 0
53825: PPUSH
// InitHc ;
53826: CALL_OW 19
// hc_importance := 0 ;
53830: LD_ADDR_OWVAR 32
53834: PUSH
53835: LD_INT 0
53837: ST_TO_ADDR
// end ;
53838: LD_VAR 0 1
53842: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
53847: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53848: LD_ADDR_VAR 0 6
53852: PUSH
53853: LD_VAR 0 1
53857: PUSH
53858: LD_VAR 0 3
53862: PLUS
53863: PUSH
53864: LD_INT 2
53866: DIV
53867: ST_TO_ADDR
// if _x < 0 then
53868: LD_VAR 0 6
53872: PUSH
53873: LD_INT 0
53875: LESS
53876: IFFALSE 53893
// _x := _x * - 1 ;
53878: LD_ADDR_VAR 0 6
53882: PUSH
53883: LD_VAR 0 6
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: MUL
53892: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53893: LD_ADDR_VAR 0 7
53897: PUSH
53898: LD_VAR 0 2
53902: PUSH
53903: LD_VAR 0 4
53907: PLUS
53908: PUSH
53909: LD_INT 2
53911: DIV
53912: ST_TO_ADDR
// if _y < 0 then
53913: LD_VAR 0 7
53917: PUSH
53918: LD_INT 0
53920: LESS
53921: IFFALSE 53938
// _y := _y * - 1 ;
53923: LD_ADDR_VAR 0 7
53927: PUSH
53928: LD_VAR 0 7
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: MUL
53937: ST_TO_ADDR
// result := [ _x , _y ] ;
53938: LD_ADDR_VAR 0 5
53942: PUSH
53943: LD_VAR 0 6
53947: PUSH
53948: LD_VAR 0 7
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: ST_TO_ADDR
// end ;
53957: LD_VAR 0 5
53961: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53962: LD_INT 0
53964: PPUSH
53965: PPUSH
53966: PPUSH
53967: PPUSH
// task := GetTaskList ( unit ) ;
53968: LD_ADDR_VAR 0 7
53972: PUSH
53973: LD_VAR 0 1
53977: PPUSH
53978: CALL_OW 437
53982: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53983: LD_VAR 0 7
53987: NOT
53988: PUSH
53989: LD_VAR 0 1
53993: PPUSH
53994: LD_VAR 0 2
53998: PPUSH
53999: CALL_OW 308
54003: NOT
54004: AND
54005: IFFALSE 54009
// exit ;
54007: GO 54127
// if IsInArea ( unit , area ) then
54009: LD_VAR 0 1
54013: PPUSH
54014: LD_VAR 0 2
54018: PPUSH
54019: CALL_OW 308
54023: IFFALSE 54041
// begin ComMoveToArea ( unit , goAway ) ;
54025: LD_VAR 0 1
54029: PPUSH
54030: LD_VAR 0 3
54034: PPUSH
54035: CALL_OW 113
// exit ;
54039: GO 54127
// end ; if task [ 1 ] [ 1 ] <> M then
54041: LD_VAR 0 7
54045: PUSH
54046: LD_INT 1
54048: ARRAY
54049: PUSH
54050: LD_INT 1
54052: ARRAY
54053: PUSH
54054: LD_STRING M
54056: NONEQUAL
54057: IFFALSE 54061
// exit ;
54059: GO 54127
// x := task [ 1 ] [ 2 ] ;
54061: LD_ADDR_VAR 0 5
54065: PUSH
54066: LD_VAR 0 7
54070: PUSH
54071: LD_INT 1
54073: ARRAY
54074: PUSH
54075: LD_INT 2
54077: ARRAY
54078: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54079: LD_ADDR_VAR 0 6
54083: PUSH
54084: LD_VAR 0 7
54088: PUSH
54089: LD_INT 1
54091: ARRAY
54092: PUSH
54093: LD_INT 3
54095: ARRAY
54096: ST_TO_ADDR
// if InArea ( x , y , area ) then
54097: LD_VAR 0 5
54101: PPUSH
54102: LD_VAR 0 6
54106: PPUSH
54107: LD_VAR 0 2
54111: PPUSH
54112: CALL_OW 309
54116: IFFALSE 54127
// ComStop ( unit ) ;
54118: LD_VAR 0 1
54122: PPUSH
54123: CALL_OW 141
// end ;
54127: LD_VAR 0 4
54131: RET
// export function Abs ( value ) ; begin
54132: LD_INT 0
54134: PPUSH
// result := value ;
54135: LD_ADDR_VAR 0 2
54139: PUSH
54140: LD_VAR 0 1
54144: ST_TO_ADDR
// if value < 0 then
54145: LD_VAR 0 1
54149: PUSH
54150: LD_INT 0
54152: LESS
54153: IFFALSE 54170
// result := value * - 1 ;
54155: LD_ADDR_VAR 0 2
54159: PUSH
54160: LD_VAR 0 1
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: MUL
54169: ST_TO_ADDR
// end ;
54170: LD_VAR 0 2
54174: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54175: LD_INT 0
54177: PPUSH
54178: PPUSH
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
// if not unit or not building then
54185: LD_VAR 0 1
54189: NOT
54190: PUSH
54191: LD_VAR 0 2
54195: NOT
54196: OR
54197: IFFALSE 54201
// exit ;
54199: GO 54427
// x := GetX ( building ) ;
54201: LD_ADDR_VAR 0 4
54205: PUSH
54206: LD_VAR 0 2
54210: PPUSH
54211: CALL_OW 250
54215: ST_TO_ADDR
// y := GetY ( building ) ;
54216: LD_ADDR_VAR 0 6
54220: PUSH
54221: LD_VAR 0 2
54225: PPUSH
54226: CALL_OW 251
54230: ST_TO_ADDR
// d := GetDir ( building ) ;
54231: LD_ADDR_VAR 0 8
54235: PUSH
54236: LD_VAR 0 2
54240: PPUSH
54241: CALL_OW 254
54245: ST_TO_ADDR
// r := 4 ;
54246: LD_ADDR_VAR 0 9
54250: PUSH
54251: LD_INT 4
54253: ST_TO_ADDR
// for i := 1 to 5 do
54254: LD_ADDR_VAR 0 10
54258: PUSH
54259: DOUBLE
54260: LD_INT 1
54262: DEC
54263: ST_TO_ADDR
54264: LD_INT 5
54266: PUSH
54267: FOR_TO
54268: IFFALSE 54425
// begin _x := ShiftX ( x , d , r + i ) ;
54270: LD_ADDR_VAR 0 5
54274: PUSH
54275: LD_VAR 0 4
54279: PPUSH
54280: LD_VAR 0 8
54284: PPUSH
54285: LD_VAR 0 9
54289: PUSH
54290: LD_VAR 0 10
54294: PLUS
54295: PPUSH
54296: CALL_OW 272
54300: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54301: LD_ADDR_VAR 0 7
54305: PUSH
54306: LD_VAR 0 6
54310: PPUSH
54311: LD_VAR 0 8
54315: PPUSH
54316: LD_VAR 0 9
54320: PUSH
54321: LD_VAR 0 10
54325: PLUS
54326: PPUSH
54327: CALL_OW 273
54331: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54332: LD_VAR 0 5
54336: PPUSH
54337: LD_VAR 0 7
54341: PPUSH
54342: CALL_OW 488
54346: PUSH
54347: LD_VAR 0 5
54351: PPUSH
54352: LD_VAR 0 7
54356: PPUSH
54357: CALL_OW 428
54361: PPUSH
54362: CALL_OW 247
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: IN
54377: NOT
54378: AND
54379: IFFALSE 54423
// begin ComMoveXY ( unit , _x , _y ) ;
54381: LD_VAR 0 1
54385: PPUSH
54386: LD_VAR 0 5
54390: PPUSH
54391: LD_VAR 0 7
54395: PPUSH
54396: CALL_OW 111
// result := [ _x , _y ] ;
54400: LD_ADDR_VAR 0 3
54404: PUSH
54405: LD_VAR 0 5
54409: PUSH
54410: LD_VAR 0 7
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// exit ;
54419: POP
54420: POP
54421: GO 54427
// end ; end ;
54423: GO 54267
54425: POP
54426: POP
// end ;
54427: LD_VAR 0 3
54431: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54432: LD_INT 0
54434: PPUSH
54435: PPUSH
54436: PPUSH
// result := 0 ;
54437: LD_ADDR_VAR 0 3
54441: PUSH
54442: LD_INT 0
54444: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54445: LD_VAR 0 1
54449: PUSH
54450: LD_INT 0
54452: LESS
54453: PUSH
54454: LD_VAR 0 1
54458: PUSH
54459: LD_INT 8
54461: GREATER
54462: OR
54463: PUSH
54464: LD_VAR 0 2
54468: PUSH
54469: LD_INT 0
54471: LESS
54472: OR
54473: PUSH
54474: LD_VAR 0 2
54478: PUSH
54479: LD_INT 8
54481: GREATER
54482: OR
54483: IFFALSE 54487
// exit ;
54485: GO 54562
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54487: LD_ADDR_VAR 0 4
54491: PUSH
54492: LD_INT 22
54494: PUSH
54495: LD_VAR 0 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PPUSH
54504: CALL_OW 69
54508: PUSH
54509: FOR_IN
54510: IFFALSE 54560
// begin un := UnitShoot ( i ) ;
54512: LD_ADDR_VAR 0 5
54516: PUSH
54517: LD_VAR 0 4
54521: PPUSH
54522: CALL_OW 504
54526: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54527: LD_VAR 0 5
54531: PPUSH
54532: CALL_OW 255
54536: PUSH
54537: LD_VAR 0 1
54541: EQUAL
54542: IFFALSE 54558
// begin result := un ;
54544: LD_ADDR_VAR 0 3
54548: PUSH
54549: LD_VAR 0 5
54553: ST_TO_ADDR
// exit ;
54554: POP
54555: POP
54556: GO 54562
// end ; end ;
54558: GO 54509
54560: POP
54561: POP
// end ;
54562: LD_VAR 0 3
54566: RET
// export function GetCargoBay ( units ) ; begin
54567: LD_INT 0
54569: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54570: LD_ADDR_VAR 0 2
54574: PUSH
54575: LD_VAR 0 1
54579: PPUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 34
54585: PUSH
54586: LD_INT 12
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 34
54595: PUSH
54596: LD_INT 51
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 34
54605: PUSH
54606: LD_INT 32
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 34
54615: PUSH
54616: LD_INT 89
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: PPUSH
54630: CALL_OW 72
54634: ST_TO_ADDR
// end ;
54635: LD_VAR 0 2
54639: RET
// export function Negate ( value ) ; begin
54640: LD_INT 0
54642: PPUSH
// result := not value ;
54643: LD_ADDR_VAR 0 2
54647: PUSH
54648: LD_VAR 0 1
54652: NOT
54653: ST_TO_ADDR
// end ;
54654: LD_VAR 0 2
54658: RET
// export function Inc ( value ) ; begin
54659: LD_INT 0
54661: PPUSH
// result := value + 1 ;
54662: LD_ADDR_VAR 0 2
54666: PUSH
54667: LD_VAR 0 1
54671: PUSH
54672: LD_INT 1
54674: PLUS
54675: ST_TO_ADDR
// end ;
54676: LD_VAR 0 2
54680: RET
// export function Dec ( value ) ; begin
54681: LD_INT 0
54683: PPUSH
// result := value - 1 ;
54684: LD_ADDR_VAR 0 2
54688: PUSH
54689: LD_VAR 0 1
54693: PUSH
54694: LD_INT 1
54696: MINUS
54697: ST_TO_ADDR
// end ;
54698: LD_VAR 0 2
54702: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54703: LD_INT 0
54705: PPUSH
54706: PPUSH
54707: PPUSH
54708: PPUSH
54709: PPUSH
54710: PPUSH
54711: PPUSH
54712: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54713: LD_VAR 0 1
54717: PPUSH
54718: LD_VAR 0 2
54722: PPUSH
54723: CALL_OW 488
54727: NOT
54728: PUSH
54729: LD_VAR 0 3
54733: PPUSH
54734: LD_VAR 0 4
54738: PPUSH
54739: CALL_OW 488
54743: NOT
54744: OR
54745: IFFALSE 54758
// begin result := - 1 ;
54747: LD_ADDR_VAR 0 5
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: ST_TO_ADDR
// exit ;
54756: GO 54993
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54758: LD_ADDR_VAR 0 12
54762: PUSH
54763: LD_VAR 0 1
54767: PPUSH
54768: LD_VAR 0 2
54772: PPUSH
54773: LD_VAR 0 3
54777: PPUSH
54778: LD_VAR 0 4
54782: PPUSH
54783: CALL 53843 0 4
54787: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54788: LD_ADDR_VAR 0 11
54792: PUSH
54793: LD_VAR 0 1
54797: PPUSH
54798: LD_VAR 0 2
54802: PPUSH
54803: LD_VAR 0 12
54807: PUSH
54808: LD_INT 1
54810: ARRAY
54811: PPUSH
54812: LD_VAR 0 12
54816: PUSH
54817: LD_INT 2
54819: ARRAY
54820: PPUSH
54821: CALL_OW 298
54825: ST_TO_ADDR
// distance := 9999 ;
54826: LD_ADDR_VAR 0 10
54830: PUSH
54831: LD_INT 9999
54833: ST_TO_ADDR
// for i := 0 to 5 do
54834: LD_ADDR_VAR 0 6
54838: PUSH
54839: DOUBLE
54840: LD_INT 0
54842: DEC
54843: ST_TO_ADDR
54844: LD_INT 5
54846: PUSH
54847: FOR_TO
54848: IFFALSE 54991
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54850: LD_ADDR_VAR 0 7
54854: PUSH
54855: LD_VAR 0 1
54859: PPUSH
54860: LD_VAR 0 6
54864: PPUSH
54865: LD_VAR 0 11
54869: PPUSH
54870: CALL_OW 272
54874: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54875: LD_ADDR_VAR 0 8
54879: PUSH
54880: LD_VAR 0 2
54884: PPUSH
54885: LD_VAR 0 6
54889: PPUSH
54890: LD_VAR 0 11
54894: PPUSH
54895: CALL_OW 273
54899: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54900: LD_VAR 0 7
54904: PPUSH
54905: LD_VAR 0 8
54909: PPUSH
54910: CALL_OW 488
54914: NOT
54915: IFFALSE 54919
// continue ;
54917: GO 54847
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54919: LD_ADDR_VAR 0 9
54923: PUSH
54924: LD_VAR 0 12
54928: PUSH
54929: LD_INT 1
54931: ARRAY
54932: PPUSH
54933: LD_VAR 0 12
54937: PUSH
54938: LD_INT 2
54940: ARRAY
54941: PPUSH
54942: LD_VAR 0 7
54946: PPUSH
54947: LD_VAR 0 8
54951: PPUSH
54952: CALL_OW 298
54956: ST_TO_ADDR
// if tmp < distance then
54957: LD_VAR 0 9
54961: PUSH
54962: LD_VAR 0 10
54966: LESS
54967: IFFALSE 54989
// begin result := i ;
54969: LD_ADDR_VAR 0 5
54973: PUSH
54974: LD_VAR 0 6
54978: ST_TO_ADDR
// distance := tmp ;
54979: LD_ADDR_VAR 0 10
54983: PUSH
54984: LD_VAR 0 9
54988: ST_TO_ADDR
// end ; end ;
54989: GO 54847
54991: POP
54992: POP
// end ;
54993: LD_VAR 0 5
54997: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54998: LD_INT 0
55000: PPUSH
55001: PPUSH
// if not driver or not IsInUnit ( driver ) then
55002: LD_VAR 0 1
55006: NOT
55007: PUSH
55008: LD_VAR 0 1
55012: PPUSH
55013: CALL_OW 310
55017: NOT
55018: OR
55019: IFFALSE 55023
// exit ;
55021: GO 55113
// vehicle := IsInUnit ( driver ) ;
55023: LD_ADDR_VAR 0 3
55027: PUSH
55028: LD_VAR 0 1
55032: PPUSH
55033: CALL_OW 310
55037: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55038: LD_VAR 0 1
55042: PPUSH
55043: LD_STRING \
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: PUSH
55073: LD_STRING E
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_VAR 0 3
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PPUSH
55109: CALL_OW 446
// end ;
55113: LD_VAR 0 2
55117: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55118: LD_INT 0
55120: PPUSH
55121: PPUSH
// if not driver or not IsInUnit ( driver ) then
55122: LD_VAR 0 1
55126: NOT
55127: PUSH
55128: LD_VAR 0 1
55132: PPUSH
55133: CALL_OW 310
55137: NOT
55138: OR
55139: IFFALSE 55143
// exit ;
55141: GO 55233
// vehicle := IsInUnit ( driver ) ;
55143: LD_ADDR_VAR 0 3
55147: PUSH
55148: LD_VAR 0 1
55152: PPUSH
55153: CALL_OW 310
55157: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55158: LD_VAR 0 1
55162: PPUSH
55163: LD_STRING \
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: PUSH
55193: LD_STRING E
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_VAR 0 3
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PPUSH
55229: CALL_OW 447
// end ;
55233: LD_VAR 0 2
55237: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55238: LD_INT 0
55240: PPUSH
55241: PPUSH
55242: PPUSH
// tmp := [ ] ;
55243: LD_ADDR_VAR 0 5
55247: PUSH
55248: EMPTY
55249: ST_TO_ADDR
// for i in units do
55250: LD_ADDR_VAR 0 4
55254: PUSH
55255: LD_VAR 0 1
55259: PUSH
55260: FOR_IN
55261: IFFALSE 55299
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55263: LD_ADDR_VAR 0 5
55267: PUSH
55268: LD_VAR 0 5
55272: PPUSH
55273: LD_VAR 0 5
55277: PUSH
55278: LD_INT 1
55280: PLUS
55281: PPUSH
55282: LD_VAR 0 4
55286: PPUSH
55287: CALL_OW 256
55291: PPUSH
55292: CALL_OW 2
55296: ST_TO_ADDR
55297: GO 55260
55299: POP
55300: POP
// if not tmp then
55301: LD_VAR 0 5
55305: NOT
55306: IFFALSE 55310
// exit ;
55308: GO 55358
// if asc then
55310: LD_VAR 0 2
55314: IFFALSE 55338
// result := SortListByListAsc ( units , tmp ) else
55316: LD_ADDR_VAR 0 3
55320: PUSH
55321: LD_VAR 0 1
55325: PPUSH
55326: LD_VAR 0 5
55330: PPUSH
55331: CALL_OW 76
55335: ST_TO_ADDR
55336: GO 55358
// result := SortListByListDesc ( units , tmp ) ;
55338: LD_ADDR_VAR 0 3
55342: PUSH
55343: LD_VAR 0 1
55347: PPUSH
55348: LD_VAR 0 5
55352: PPUSH
55353: CALL_OW 77
55357: ST_TO_ADDR
// end ;
55358: LD_VAR 0 3
55362: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55363: LD_INT 0
55365: PPUSH
55366: PPUSH
// task := GetTaskList ( mech ) ;
55367: LD_ADDR_VAR 0 4
55371: PUSH
55372: LD_VAR 0 1
55376: PPUSH
55377: CALL_OW 437
55381: ST_TO_ADDR
// if not task then
55382: LD_VAR 0 4
55386: NOT
55387: IFFALSE 55391
// exit ;
55389: GO 55433
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55391: LD_ADDR_VAR 0 3
55395: PUSH
55396: LD_VAR 0 4
55400: PUSH
55401: LD_INT 1
55403: ARRAY
55404: PUSH
55405: LD_INT 1
55407: ARRAY
55408: PUSH
55409: LD_STRING r
55411: EQUAL
55412: PUSH
55413: LD_VAR 0 4
55417: PUSH
55418: LD_INT 1
55420: ARRAY
55421: PUSH
55422: LD_INT 4
55424: ARRAY
55425: PUSH
55426: LD_VAR 0 2
55430: EQUAL
55431: AND
55432: ST_TO_ADDR
// end ;
55433: LD_VAR 0 3
55437: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55438: LD_INT 0
55440: PPUSH
// SetDir ( unit , d ) ;
55441: LD_VAR 0 1
55445: PPUSH
55446: LD_VAR 0 4
55450: PPUSH
55451: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55455: LD_VAR 0 1
55459: PPUSH
55460: LD_VAR 0 2
55464: PPUSH
55465: LD_VAR 0 3
55469: PPUSH
55470: LD_VAR 0 5
55474: PPUSH
55475: CALL_OW 48
// end ;
55479: LD_VAR 0 6
55483: RET
// export function ToNaturalNumber ( number ) ; begin
55484: LD_INT 0
55486: PPUSH
// result := number div 1 ;
55487: LD_ADDR_VAR 0 2
55491: PUSH
55492: LD_VAR 0 1
55496: PUSH
55497: LD_INT 1
55499: DIV
55500: ST_TO_ADDR
// if number < 0 then
55501: LD_VAR 0 1
55505: PUSH
55506: LD_INT 0
55508: LESS
55509: IFFALSE 55519
// result := 0 ;
55511: LD_ADDR_VAR 0 2
55515: PUSH
55516: LD_INT 0
55518: ST_TO_ADDR
// end ;
55519: LD_VAR 0 2
55523: RET
// export function SortByClass ( units , class ) ; var un ; begin
55524: LD_INT 0
55526: PPUSH
55527: PPUSH
// if not units or not class then
55528: LD_VAR 0 1
55532: NOT
55533: PUSH
55534: LD_VAR 0 2
55538: NOT
55539: OR
55540: IFFALSE 55544
// exit ;
55542: GO 55639
// result := [ ] ;
55544: LD_ADDR_VAR 0 3
55548: PUSH
55549: EMPTY
55550: ST_TO_ADDR
// for un in units do
55551: LD_ADDR_VAR 0 4
55555: PUSH
55556: LD_VAR 0 1
55560: PUSH
55561: FOR_IN
55562: IFFALSE 55637
// if GetClass ( un ) = class then
55564: LD_VAR 0 4
55568: PPUSH
55569: CALL_OW 257
55573: PUSH
55574: LD_VAR 0 2
55578: EQUAL
55579: IFFALSE 55606
// result := Insert ( result , 1 , un ) else
55581: LD_ADDR_VAR 0 3
55585: PUSH
55586: LD_VAR 0 3
55590: PPUSH
55591: LD_INT 1
55593: PPUSH
55594: LD_VAR 0 4
55598: PPUSH
55599: CALL_OW 2
55603: ST_TO_ADDR
55604: GO 55635
// result := Replace ( result , result + 1 , un ) ;
55606: LD_ADDR_VAR 0 3
55610: PUSH
55611: LD_VAR 0 3
55615: PPUSH
55616: LD_VAR 0 3
55620: PUSH
55621: LD_INT 1
55623: PLUS
55624: PPUSH
55625: LD_VAR 0 4
55629: PPUSH
55630: CALL_OW 1
55634: ST_TO_ADDR
55635: GO 55561
55637: POP
55638: POP
// end ;
55639: LD_VAR 0 3
55643: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55644: LD_INT 0
55646: PPUSH
55647: PPUSH
55648: PPUSH
55649: PPUSH
55650: PPUSH
55651: PPUSH
55652: PPUSH
// result := [ ] ;
55653: LD_ADDR_VAR 0 4
55657: PUSH
55658: EMPTY
55659: ST_TO_ADDR
// if x - r < 0 then
55660: LD_VAR 0 1
55664: PUSH
55665: LD_VAR 0 3
55669: MINUS
55670: PUSH
55671: LD_INT 0
55673: LESS
55674: IFFALSE 55686
// min_x := 0 else
55676: LD_ADDR_VAR 0 8
55680: PUSH
55681: LD_INT 0
55683: ST_TO_ADDR
55684: GO 55702
// min_x := x - r ;
55686: LD_ADDR_VAR 0 8
55690: PUSH
55691: LD_VAR 0 1
55695: PUSH
55696: LD_VAR 0 3
55700: MINUS
55701: ST_TO_ADDR
// if y - r < 0 then
55702: LD_VAR 0 2
55706: PUSH
55707: LD_VAR 0 3
55711: MINUS
55712: PUSH
55713: LD_INT 0
55715: LESS
55716: IFFALSE 55728
// min_y := 0 else
55718: LD_ADDR_VAR 0 7
55722: PUSH
55723: LD_INT 0
55725: ST_TO_ADDR
55726: GO 55744
// min_y := y - r ;
55728: LD_ADDR_VAR 0 7
55732: PUSH
55733: LD_VAR 0 2
55737: PUSH
55738: LD_VAR 0 3
55742: MINUS
55743: ST_TO_ADDR
// max_x := x + r ;
55744: LD_ADDR_VAR 0 9
55748: PUSH
55749: LD_VAR 0 1
55753: PUSH
55754: LD_VAR 0 3
55758: PLUS
55759: ST_TO_ADDR
// max_y := y + r ;
55760: LD_ADDR_VAR 0 10
55764: PUSH
55765: LD_VAR 0 2
55769: PUSH
55770: LD_VAR 0 3
55774: PLUS
55775: ST_TO_ADDR
// for _x = min_x to max_x do
55776: LD_ADDR_VAR 0 5
55780: PUSH
55781: DOUBLE
55782: LD_VAR 0 8
55786: DEC
55787: ST_TO_ADDR
55788: LD_VAR 0 9
55792: PUSH
55793: FOR_TO
55794: IFFALSE 55895
// for _y = min_y to max_y do
55796: LD_ADDR_VAR 0 6
55800: PUSH
55801: DOUBLE
55802: LD_VAR 0 7
55806: DEC
55807: ST_TO_ADDR
55808: LD_VAR 0 10
55812: PUSH
55813: FOR_TO
55814: IFFALSE 55891
// begin if not ValidHex ( _x , _y ) then
55816: LD_VAR 0 5
55820: PPUSH
55821: LD_VAR 0 6
55825: PPUSH
55826: CALL_OW 488
55830: NOT
55831: IFFALSE 55835
// continue ;
55833: GO 55813
// if GetResourceTypeXY ( _x , _y ) then
55835: LD_VAR 0 5
55839: PPUSH
55840: LD_VAR 0 6
55844: PPUSH
55845: CALL_OW 283
55849: IFFALSE 55889
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55851: LD_ADDR_VAR 0 4
55855: PUSH
55856: LD_VAR 0 4
55860: PPUSH
55861: LD_VAR 0 4
55865: PUSH
55866: LD_INT 1
55868: PLUS
55869: PPUSH
55870: LD_VAR 0 5
55874: PUSH
55875: LD_VAR 0 6
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PPUSH
55884: CALL_OW 1
55888: ST_TO_ADDR
// end ;
55889: GO 55813
55891: POP
55892: POP
55893: GO 55793
55895: POP
55896: POP
// end ;
55897: LD_VAR 0 4
55901: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55902: LD_INT 0
55904: PPUSH
55905: PPUSH
55906: PPUSH
55907: PPUSH
55908: PPUSH
55909: PPUSH
55910: PPUSH
55911: PPUSH
// if not units then
55912: LD_VAR 0 1
55916: NOT
55917: IFFALSE 55921
// exit ;
55919: GO 56449
// result := UnitFilter ( units , [ f_ok ] ) ;
55921: LD_ADDR_VAR 0 3
55925: PUSH
55926: LD_VAR 0 1
55930: PPUSH
55931: LD_INT 50
55933: PUSH
55934: EMPTY
55935: LIST
55936: PPUSH
55937: CALL_OW 72
55941: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55942: LD_ADDR_VAR 0 8
55946: PUSH
55947: LD_VAR 0 1
55951: PUSH
55952: LD_INT 1
55954: ARRAY
55955: PPUSH
55956: CALL_OW 255
55960: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55961: LD_ADDR_VAR 0 10
55965: PUSH
55966: LD_INT 29
55968: PUSH
55969: LD_INT 91
55971: PUSH
55972: LD_INT 49
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// if not result then
55980: LD_VAR 0 3
55984: NOT
55985: IFFALSE 55989
// exit ;
55987: GO 56449
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55989: LD_ADDR_VAR 0 5
55993: PUSH
55994: LD_INT 81
55996: PUSH
55997: LD_VAR 0 8
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PPUSH
56006: CALL_OW 69
56010: ST_TO_ADDR
// for i in result do
56011: LD_ADDR_VAR 0 4
56015: PUSH
56016: LD_VAR 0 3
56020: PUSH
56021: FOR_IN
56022: IFFALSE 56447
// begin tag := GetTag ( i ) + 1 ;
56024: LD_ADDR_VAR 0 9
56028: PUSH
56029: LD_VAR 0 4
56033: PPUSH
56034: CALL_OW 110
56038: PUSH
56039: LD_INT 1
56041: PLUS
56042: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56043: LD_ADDR_VAR 0 7
56047: PUSH
56048: LD_VAR 0 4
56052: PPUSH
56053: CALL_OW 250
56057: PPUSH
56058: LD_VAR 0 4
56062: PPUSH
56063: CALL_OW 251
56067: PPUSH
56068: LD_INT 4
56070: PPUSH
56071: CALL 55644 0 3
56075: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56076: LD_VAR 0 4
56080: PPUSH
56081: CALL_OW 247
56085: PUSH
56086: LD_INT 2
56088: EQUAL
56089: PUSH
56090: LD_VAR 0 7
56094: PUSH
56095: LD_INT 2
56097: GREATER
56098: AND
56099: PUSH
56100: LD_VAR 0 4
56104: PPUSH
56105: CALL_OW 264
56109: PUSH
56110: LD_VAR 0 10
56114: IN
56115: NOT
56116: AND
56117: IFFALSE 56156
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56119: LD_VAR 0 4
56123: PPUSH
56124: LD_VAR 0 7
56128: PUSH
56129: LD_INT 1
56131: ARRAY
56132: PUSH
56133: LD_INT 1
56135: ARRAY
56136: PPUSH
56137: LD_VAR 0 7
56141: PUSH
56142: LD_INT 1
56144: ARRAY
56145: PUSH
56146: LD_INT 2
56148: ARRAY
56149: PPUSH
56150: CALL_OW 116
56154: GO 56445
// if path > tag then
56156: LD_VAR 0 2
56160: PUSH
56161: LD_VAR 0 9
56165: GREATER
56166: IFFALSE 56374
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56168: LD_ADDR_VAR 0 6
56172: PUSH
56173: LD_VAR 0 5
56177: PPUSH
56178: LD_INT 91
56180: PUSH
56181: LD_VAR 0 4
56185: PUSH
56186: LD_INT 8
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: PPUSH
56194: CALL_OW 72
56198: ST_TO_ADDR
// if nearEnemy then
56199: LD_VAR 0 6
56203: IFFALSE 56272
// begin if GetWeapon ( i ) = ru_time_lapser then
56205: LD_VAR 0 4
56209: PPUSH
56210: CALL_OW 264
56214: PUSH
56215: LD_INT 49
56217: EQUAL
56218: IFFALSE 56246
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56220: LD_VAR 0 4
56224: PPUSH
56225: LD_VAR 0 6
56229: PPUSH
56230: LD_VAR 0 4
56234: PPUSH
56235: CALL_OW 74
56239: PPUSH
56240: CALL_OW 112
56244: GO 56270
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56246: LD_VAR 0 4
56250: PPUSH
56251: LD_VAR 0 6
56255: PPUSH
56256: LD_VAR 0 4
56260: PPUSH
56261: CALL_OW 74
56265: PPUSH
56266: CALL 57520 0 2
// end else
56270: GO 56372
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56272: LD_VAR 0 4
56276: PPUSH
56277: LD_VAR 0 2
56281: PUSH
56282: LD_VAR 0 9
56286: ARRAY
56287: PUSH
56288: LD_INT 1
56290: ARRAY
56291: PPUSH
56292: LD_VAR 0 2
56296: PUSH
56297: LD_VAR 0 9
56301: ARRAY
56302: PUSH
56303: LD_INT 2
56305: ARRAY
56306: PPUSH
56307: CALL_OW 297
56311: PUSH
56312: LD_INT 6
56314: GREATER
56315: IFFALSE 56358
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56317: LD_VAR 0 4
56321: PPUSH
56322: LD_VAR 0 2
56326: PUSH
56327: LD_VAR 0 9
56331: ARRAY
56332: PUSH
56333: LD_INT 1
56335: ARRAY
56336: PPUSH
56337: LD_VAR 0 2
56341: PUSH
56342: LD_VAR 0 9
56346: ARRAY
56347: PUSH
56348: LD_INT 2
56350: ARRAY
56351: PPUSH
56352: CALL_OW 114
56356: GO 56372
// SetTag ( i , tag ) ;
56358: LD_VAR 0 4
56362: PPUSH
56363: LD_VAR 0 9
56367: PPUSH
56368: CALL_OW 109
// end else
56372: GO 56445
// if enemy then
56374: LD_VAR 0 5
56378: IFFALSE 56445
// begin if GetWeapon ( i ) = ru_time_lapser then
56380: LD_VAR 0 4
56384: PPUSH
56385: CALL_OW 264
56389: PUSH
56390: LD_INT 49
56392: EQUAL
56393: IFFALSE 56421
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56395: LD_VAR 0 4
56399: PPUSH
56400: LD_VAR 0 5
56404: PPUSH
56405: LD_VAR 0 4
56409: PPUSH
56410: CALL_OW 74
56414: PPUSH
56415: CALL_OW 112
56419: GO 56445
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56421: LD_VAR 0 4
56425: PPUSH
56426: LD_VAR 0 5
56430: PPUSH
56431: LD_VAR 0 4
56435: PPUSH
56436: CALL_OW 74
56440: PPUSH
56441: CALL 57520 0 2
// end ; end ;
56445: GO 56021
56447: POP
56448: POP
// end ;
56449: LD_VAR 0 3
56453: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
56458: PPUSH
// if not unit or IsInUnit ( unit ) then
56459: LD_VAR 0 1
56463: NOT
56464: PUSH
56465: LD_VAR 0 1
56469: PPUSH
56470: CALL_OW 310
56474: OR
56475: IFFALSE 56479
// exit ;
56477: GO 56570
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56479: LD_ADDR_VAR 0 4
56483: PUSH
56484: LD_VAR 0 1
56488: PPUSH
56489: CALL_OW 250
56493: PPUSH
56494: LD_VAR 0 2
56498: PPUSH
56499: LD_INT 1
56501: PPUSH
56502: CALL_OW 272
56506: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56507: LD_ADDR_VAR 0 5
56511: PUSH
56512: LD_VAR 0 1
56516: PPUSH
56517: CALL_OW 251
56521: PPUSH
56522: LD_VAR 0 2
56526: PPUSH
56527: LD_INT 1
56529: PPUSH
56530: CALL_OW 273
56534: ST_TO_ADDR
// if ValidHex ( x , y ) then
56535: LD_VAR 0 4
56539: PPUSH
56540: LD_VAR 0 5
56544: PPUSH
56545: CALL_OW 488
56549: IFFALSE 56570
// ComTurnXY ( unit , x , y ) ;
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_VAR 0 4
56560: PPUSH
56561: LD_VAR 0 5
56565: PPUSH
56566: CALL_OW 118
// end ;
56570: LD_VAR 0 3
56574: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56575: LD_INT 0
56577: PPUSH
56578: PPUSH
// result := false ;
56579: LD_ADDR_VAR 0 3
56583: PUSH
56584: LD_INT 0
56586: ST_TO_ADDR
// if not units then
56587: LD_VAR 0 2
56591: NOT
56592: IFFALSE 56596
// exit ;
56594: GO 56641
// for i in units do
56596: LD_ADDR_VAR 0 4
56600: PUSH
56601: LD_VAR 0 2
56605: PUSH
56606: FOR_IN
56607: IFFALSE 56639
// if See ( side , i ) then
56609: LD_VAR 0 1
56613: PPUSH
56614: LD_VAR 0 4
56618: PPUSH
56619: CALL_OW 292
56623: IFFALSE 56637
// begin result := true ;
56625: LD_ADDR_VAR 0 3
56629: PUSH
56630: LD_INT 1
56632: ST_TO_ADDR
// exit ;
56633: POP
56634: POP
56635: GO 56641
// end ;
56637: GO 56606
56639: POP
56640: POP
// end ;
56641: LD_VAR 0 3
56645: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56646: LD_INT 0
56648: PPUSH
56649: PPUSH
56650: PPUSH
56651: PPUSH
// if not unit or not points then
56652: LD_VAR 0 1
56656: NOT
56657: PUSH
56658: LD_VAR 0 2
56662: NOT
56663: OR
56664: IFFALSE 56668
// exit ;
56666: GO 56758
// dist := 99999 ;
56668: LD_ADDR_VAR 0 5
56672: PUSH
56673: LD_INT 99999
56675: ST_TO_ADDR
// for i in points do
56676: LD_ADDR_VAR 0 4
56680: PUSH
56681: LD_VAR 0 2
56685: PUSH
56686: FOR_IN
56687: IFFALSE 56756
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56689: LD_ADDR_VAR 0 6
56693: PUSH
56694: LD_VAR 0 1
56698: PPUSH
56699: LD_VAR 0 4
56703: PUSH
56704: LD_INT 1
56706: ARRAY
56707: PPUSH
56708: LD_VAR 0 4
56712: PUSH
56713: LD_INT 2
56715: ARRAY
56716: PPUSH
56717: CALL_OW 297
56721: ST_TO_ADDR
// if tmpDist < dist then
56722: LD_VAR 0 6
56726: PUSH
56727: LD_VAR 0 5
56731: LESS
56732: IFFALSE 56754
// begin result := i ;
56734: LD_ADDR_VAR 0 3
56738: PUSH
56739: LD_VAR 0 4
56743: ST_TO_ADDR
// dist := tmpDist ;
56744: LD_ADDR_VAR 0 5
56748: PUSH
56749: LD_VAR 0 6
56753: ST_TO_ADDR
// end ; end ;
56754: GO 56686
56756: POP
56757: POP
// end ;
56758: LD_VAR 0 3
56762: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56763: LD_INT 0
56765: PPUSH
// uc_side := side ;
56766: LD_ADDR_OWVAR 20
56770: PUSH
56771: LD_VAR 0 1
56775: ST_TO_ADDR
// uc_nation := 3 ;
56776: LD_ADDR_OWVAR 21
56780: PUSH
56781: LD_INT 3
56783: ST_TO_ADDR
// vc_chassis := 25 ;
56784: LD_ADDR_OWVAR 37
56788: PUSH
56789: LD_INT 25
56791: ST_TO_ADDR
// vc_engine := engine_siberite ;
56792: LD_ADDR_OWVAR 39
56796: PUSH
56797: LD_INT 3
56799: ST_TO_ADDR
// vc_control := control_computer ;
56800: LD_ADDR_OWVAR 38
56804: PUSH
56805: LD_INT 3
56807: ST_TO_ADDR
// vc_weapon := 59 ;
56808: LD_ADDR_OWVAR 40
56812: PUSH
56813: LD_INT 59
56815: ST_TO_ADDR
// result := CreateVehicle ;
56816: LD_ADDR_VAR 0 5
56820: PUSH
56821: CALL_OW 45
56825: ST_TO_ADDR
// SetDir ( result , d ) ;
56826: LD_VAR 0 5
56830: PPUSH
56831: LD_VAR 0 4
56835: PPUSH
56836: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56840: LD_VAR 0 5
56844: PPUSH
56845: LD_VAR 0 2
56849: PPUSH
56850: LD_VAR 0 3
56854: PPUSH
56855: LD_INT 0
56857: PPUSH
56858: CALL_OW 48
// end ;
56862: LD_VAR 0 5
56866: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56867: LD_INT 0
56869: PPUSH
56870: PPUSH
56871: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56872: LD_ADDR_VAR 0 2
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56895: LD_VAR 0 1
56899: NOT
56900: PUSH
56901: LD_VAR 0 1
56905: PPUSH
56906: CALL_OW 264
56910: PUSH
56911: LD_INT 12
56913: PUSH
56914: LD_INT 51
56916: PUSH
56917: LD_INT 32
56919: PUSH
56920: LD_INT 89
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: IN
56929: NOT
56930: OR
56931: IFFALSE 56935
// exit ;
56933: GO 57033
// for i := 1 to 3 do
56935: LD_ADDR_VAR 0 3
56939: PUSH
56940: DOUBLE
56941: LD_INT 1
56943: DEC
56944: ST_TO_ADDR
56945: LD_INT 3
56947: PUSH
56948: FOR_TO
56949: IFFALSE 57031
// begin tmp := GetCargo ( cargo , i ) ;
56951: LD_ADDR_VAR 0 4
56955: PUSH
56956: LD_VAR 0 1
56960: PPUSH
56961: LD_VAR 0 3
56965: PPUSH
56966: CALL_OW 289
56970: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56971: LD_ADDR_VAR 0 2
56975: PUSH
56976: LD_VAR 0 2
56980: PPUSH
56981: LD_VAR 0 3
56985: PPUSH
56986: LD_VAR 0 4
56990: PPUSH
56991: CALL_OW 1
56995: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56996: LD_ADDR_VAR 0 2
57000: PUSH
57001: LD_VAR 0 2
57005: PPUSH
57006: LD_INT 4
57008: PPUSH
57009: LD_VAR 0 2
57013: PUSH
57014: LD_INT 4
57016: ARRAY
57017: PUSH
57018: LD_VAR 0 4
57022: PLUS
57023: PPUSH
57024: CALL_OW 1
57028: ST_TO_ADDR
// end ;
57029: GO 56948
57031: POP
57032: POP
// end ;
57033: LD_VAR 0 2
57037: RET
// export function Length ( array ) ; begin
57038: LD_INT 0
57040: PPUSH
// result := array + 0 ;
57041: LD_ADDR_VAR 0 2
57045: PUSH
57046: LD_VAR 0 1
57050: PUSH
57051: LD_INT 0
57053: PLUS
57054: ST_TO_ADDR
// end ;
57055: LD_VAR 0 2
57059: RET
// export function PrepareArray ( array ) ; begin
57060: LD_INT 0
57062: PPUSH
// result := array diff 0 ;
57063: LD_ADDR_VAR 0 2
57067: PUSH
57068: LD_VAR 0 1
57072: PUSH
57073: LD_INT 0
57075: DIFF
57076: ST_TO_ADDR
// if not result [ 1 ] then
57077: LD_VAR 0 2
57081: PUSH
57082: LD_INT 1
57084: ARRAY
57085: NOT
57086: IFFALSE 57106
// result := Delete ( result , 1 ) ;
57088: LD_ADDR_VAR 0 2
57092: PUSH
57093: LD_VAR 0 2
57097: PPUSH
57098: LD_INT 1
57100: PPUSH
57101: CALL_OW 3
57105: ST_TO_ADDR
// end ;
57106: LD_VAR 0 2
57110: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57111: LD_INT 0
57113: PPUSH
57114: PPUSH
57115: PPUSH
57116: PPUSH
// sibRocketRange := 25 ;
57117: LD_ADDR_VAR 0 6
57121: PUSH
57122: LD_INT 25
57124: ST_TO_ADDR
// result := false ;
57125: LD_ADDR_VAR 0 4
57129: PUSH
57130: LD_INT 0
57132: ST_TO_ADDR
// for i := 0 to 5 do
57133: LD_ADDR_VAR 0 5
57137: PUSH
57138: DOUBLE
57139: LD_INT 0
57141: DEC
57142: ST_TO_ADDR
57143: LD_INT 5
57145: PUSH
57146: FOR_TO
57147: IFFALSE 57214
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57149: LD_VAR 0 1
57153: PPUSH
57154: LD_VAR 0 5
57158: PPUSH
57159: LD_VAR 0 6
57163: PPUSH
57164: CALL_OW 272
57168: PPUSH
57169: LD_VAR 0 2
57173: PPUSH
57174: LD_VAR 0 5
57178: PPUSH
57179: LD_VAR 0 6
57183: PPUSH
57184: CALL_OW 273
57188: PPUSH
57189: LD_VAR 0 3
57193: PPUSH
57194: CALL_OW 309
57198: IFFALSE 57212
// begin result := true ;
57200: LD_ADDR_VAR 0 4
57204: PUSH
57205: LD_INT 1
57207: ST_TO_ADDR
// exit ;
57208: POP
57209: POP
57210: GO 57216
// end ;
57212: GO 57146
57214: POP
57215: POP
// end ;
57216: LD_VAR 0 4
57220: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57221: LD_INT 0
57223: PPUSH
57224: PPUSH
57225: PPUSH
// if btype = b_depot then
57226: LD_VAR 0 2
57230: PUSH
57231: LD_INT 0
57233: EQUAL
57234: IFFALSE 57246
// begin result := true ;
57236: LD_ADDR_VAR 0 3
57240: PUSH
57241: LD_INT 1
57243: ST_TO_ADDR
// exit ;
57244: GO 57362
// end ; pom := GetBase ( depot ) ;
57246: LD_ADDR_VAR 0 4
57250: PUSH
57251: LD_VAR 0 1
57255: PPUSH
57256: CALL_OW 274
57260: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57261: LD_ADDR_VAR 0 5
57265: PUSH
57266: LD_VAR 0 2
57270: PPUSH
57271: LD_VAR 0 1
57275: PPUSH
57276: CALL_OW 248
57280: PPUSH
57281: CALL_OW 450
57285: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57286: LD_ADDR_VAR 0 3
57290: PUSH
57291: LD_VAR 0 4
57295: PPUSH
57296: LD_INT 1
57298: PPUSH
57299: CALL_OW 275
57303: PUSH
57304: LD_VAR 0 5
57308: PUSH
57309: LD_INT 1
57311: ARRAY
57312: GREATEREQUAL
57313: PUSH
57314: LD_VAR 0 4
57318: PPUSH
57319: LD_INT 2
57321: PPUSH
57322: CALL_OW 275
57326: PUSH
57327: LD_VAR 0 5
57331: PUSH
57332: LD_INT 2
57334: ARRAY
57335: GREATEREQUAL
57336: AND
57337: PUSH
57338: LD_VAR 0 4
57342: PPUSH
57343: LD_INT 3
57345: PPUSH
57346: CALL_OW 275
57350: PUSH
57351: LD_VAR 0 5
57355: PUSH
57356: LD_INT 3
57358: ARRAY
57359: GREATEREQUAL
57360: AND
57361: ST_TO_ADDR
// end ;
57362: LD_VAR 0 3
57366: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57367: LD_INT 0
57369: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57370: LD_VAR 0 1
57374: PPUSH
57375: LD_VAR 0 2
57379: PPUSH
57380: LD_INT 0
57382: PPUSH
57383: LD_INT 0
57385: PPUSH
57386: LD_INT 1
57388: PPUSH
57389: LD_INT 0
57391: PPUSH
57392: CALL_OW 587
// end ;
57396: LD_VAR 0 3
57400: RET
// export function CenterOnNow ( unit ) ; begin
57401: LD_INT 0
57403: PPUSH
// result := IsInUnit ( unit ) ;
57404: LD_ADDR_VAR 0 2
57408: PUSH
57409: LD_VAR 0 1
57413: PPUSH
57414: CALL_OW 310
57418: ST_TO_ADDR
// if not result then
57419: LD_VAR 0 2
57423: NOT
57424: IFFALSE 57436
// result := unit ;
57426: LD_ADDR_VAR 0 2
57430: PUSH
57431: LD_VAR 0 1
57435: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57436: LD_VAR 0 1
57440: PPUSH
57441: CALL_OW 87
// end ;
57445: LD_VAR 0 2
57449: RET
// export function ComMoveHex ( unit , hex ) ; begin
57450: LD_INT 0
57452: PPUSH
// if not hex then
57453: LD_VAR 0 2
57457: NOT
57458: IFFALSE 57462
// exit ;
57460: GO 57515
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57462: LD_VAR 0 2
57466: PUSH
57467: LD_INT 1
57469: ARRAY
57470: PPUSH
57471: LD_VAR 0 2
57475: PUSH
57476: LD_INT 2
57478: ARRAY
57479: PPUSH
57480: CALL_OW 428
57484: IFFALSE 57488
// exit ;
57486: GO 57515
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57488: LD_VAR 0 1
57492: PPUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_INT 1
57500: ARRAY
57501: PPUSH
57502: LD_VAR 0 2
57506: PUSH
57507: LD_INT 2
57509: ARRAY
57510: PPUSH
57511: CALL_OW 111
// end ;
57515: LD_VAR 0 3
57519: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57520: LD_INT 0
57522: PPUSH
57523: PPUSH
57524: PPUSH
// if not unit or not enemy then
57525: LD_VAR 0 1
57529: NOT
57530: PUSH
57531: LD_VAR 0 2
57535: NOT
57536: OR
57537: IFFALSE 57541
// exit ;
57539: GO 57665
// x := GetX ( enemy ) ;
57541: LD_ADDR_VAR 0 4
57545: PUSH
57546: LD_VAR 0 2
57550: PPUSH
57551: CALL_OW 250
57555: ST_TO_ADDR
// y := GetY ( enemy ) ;
57556: LD_ADDR_VAR 0 5
57560: PUSH
57561: LD_VAR 0 2
57565: PPUSH
57566: CALL_OW 251
57570: ST_TO_ADDR
// if ValidHex ( x , y ) then
57571: LD_VAR 0 4
57575: PPUSH
57576: LD_VAR 0 5
57580: PPUSH
57581: CALL_OW 488
57585: IFFALSE 57665
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57587: LD_VAR 0 2
57591: PPUSH
57592: CALL_OW 247
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: IN
57607: PUSH
57608: LD_VAR 0 1
57612: PPUSH
57613: CALL_OW 255
57617: PPUSH
57618: LD_VAR 0 2
57622: PPUSH
57623: CALL_OW 292
57627: OR
57628: IFFALSE 57646
// ComAttackUnit ( unit , enemy ) else
57630: LD_VAR 0 1
57634: PPUSH
57635: LD_VAR 0 2
57639: PPUSH
57640: CALL_OW 115
57644: GO 57665
// ComAgressiveMove ( unit , x , y ) ;
57646: LD_VAR 0 1
57650: PPUSH
57651: LD_VAR 0 4
57655: PPUSH
57656: LD_VAR 0 5
57660: PPUSH
57661: CALL_OW 114
// end ;
57665: LD_VAR 0 3
57669: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57670: LD_INT 0
57672: PPUSH
57673: PPUSH
57674: PPUSH
// list := AreaToList ( area , 0 ) ;
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: LD_VAR 0 1
57684: PPUSH
57685: LD_INT 0
57687: PPUSH
57688: CALL_OW 517
57692: ST_TO_ADDR
// if not list then
57693: LD_VAR 0 5
57697: NOT
57698: IFFALSE 57702
// exit ;
57700: GO 57832
// if all then
57702: LD_VAR 0 2
57706: IFFALSE 57794
// begin for i := 1 to list [ 1 ] do
57708: LD_ADDR_VAR 0 4
57712: PUSH
57713: DOUBLE
57714: LD_INT 1
57716: DEC
57717: ST_TO_ADDR
57718: LD_VAR 0 5
57722: PUSH
57723: LD_INT 1
57725: ARRAY
57726: PUSH
57727: FOR_TO
57728: IFFALSE 57790
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57730: LD_ADDR_VAR 0 3
57734: PUSH
57735: LD_VAR 0 3
57739: PPUSH
57740: LD_VAR 0 3
57744: PUSH
57745: LD_INT 1
57747: PLUS
57748: PPUSH
57749: LD_VAR 0 5
57753: PUSH
57754: LD_INT 1
57756: ARRAY
57757: PUSH
57758: LD_VAR 0 4
57762: ARRAY
57763: PUSH
57764: LD_VAR 0 5
57768: PUSH
57769: LD_INT 2
57771: ARRAY
57772: PUSH
57773: LD_VAR 0 4
57777: ARRAY
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PPUSH
57783: CALL_OW 1
57787: ST_TO_ADDR
57788: GO 57727
57790: POP
57791: POP
// exit ;
57792: GO 57832
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57794: LD_ADDR_VAR 0 3
57798: PUSH
57799: LD_VAR 0 5
57803: PUSH
57804: LD_INT 1
57806: ARRAY
57807: PUSH
57808: LD_INT 1
57810: ARRAY
57811: PUSH
57812: LD_VAR 0 5
57816: PUSH
57817: LD_INT 2
57819: ARRAY
57820: PUSH
57821: LD_INT 1
57823: ARRAY
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: ST_TO_ADDR
// end ;
57832: LD_VAR 0 3
57836: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57837: LD_INT 0
57839: PPUSH
57840: PPUSH
// list := AreaToList ( area , 0 ) ;
57841: LD_ADDR_VAR 0 4
57845: PUSH
57846: LD_VAR 0 1
57850: PPUSH
57851: LD_INT 0
57853: PPUSH
57854: CALL_OW 517
57858: ST_TO_ADDR
// if not list then
57859: LD_VAR 0 4
57863: NOT
57864: IFFALSE 57868
// exit ;
57866: GO 57909
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57868: LD_ADDR_VAR 0 3
57872: PUSH
57873: LD_VAR 0 4
57877: PUSH
57878: LD_INT 1
57880: ARRAY
57881: PUSH
57882: LD_INT 1
57884: ARRAY
57885: PUSH
57886: LD_VAR 0 4
57890: PUSH
57891: LD_INT 2
57893: ARRAY
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PUSH
57899: LD_VAR 0 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: ST_TO_ADDR
// end ;
57909: LD_VAR 0 3
57913: RET
// export function First ( array ) ; begin
57914: LD_INT 0
57916: PPUSH
// if not array then
57917: LD_VAR 0 1
57921: NOT
57922: IFFALSE 57926
// exit ;
57924: GO 57940
// result := array [ 1 ] ;
57926: LD_ADDR_VAR 0 2
57930: PUSH
57931: LD_VAR 0 1
57935: PUSH
57936: LD_INT 1
57938: ARRAY
57939: ST_TO_ADDR
// end ;
57940: LD_VAR 0 2
57944: RET
// export function Last ( array ) ; begin
57945: LD_INT 0
57947: PPUSH
// if not array then
57948: LD_VAR 0 1
57952: NOT
57953: IFFALSE 57957
// exit ;
57955: GO 57973
// result := array [ array ] ;
57957: LD_ADDR_VAR 0 2
57961: PUSH
57962: LD_VAR 0 1
57966: PUSH
57967: LD_VAR 0 1
57971: ARRAY
57972: ST_TO_ADDR
// end ;
57973: LD_VAR 0 2
57977: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57978: LD_INT 0
57980: PPUSH
57981: PPUSH
// result := [ ] ;
57982: LD_ADDR_VAR 0 5
57986: PUSH
57987: EMPTY
57988: ST_TO_ADDR
// if not array then
57989: LD_VAR 0 1
57993: NOT
57994: IFFALSE 57998
// exit ;
57996: GO 58110
// for i := 1 to array do
57998: LD_ADDR_VAR 0 6
58002: PUSH
58003: DOUBLE
58004: LD_INT 1
58006: DEC
58007: ST_TO_ADDR
58008: LD_VAR 0 1
58012: PUSH
58013: FOR_TO
58014: IFFALSE 58108
// if array [ i ] [ index ] = value then
58016: LD_VAR 0 1
58020: PUSH
58021: LD_VAR 0 6
58025: ARRAY
58026: PUSH
58027: LD_VAR 0 2
58031: ARRAY
58032: PUSH
58033: LD_VAR 0 3
58037: EQUAL
58038: IFFALSE 58106
// begin if indexColumn then
58040: LD_VAR 0 4
58044: IFFALSE 58080
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58046: LD_ADDR_VAR 0 5
58050: PUSH
58051: LD_VAR 0 5
58055: PPUSH
58056: LD_VAR 0 1
58060: PUSH
58061: LD_VAR 0 6
58065: ARRAY
58066: PUSH
58067: LD_VAR 0 4
58071: ARRAY
58072: PPUSH
58073: CALL 53298 0 2
58077: ST_TO_ADDR
58078: GO 58106
// result := Join ( result , array [ i ] ) ;
58080: LD_ADDR_VAR 0 5
58084: PUSH
58085: LD_VAR 0 5
58089: PPUSH
58090: LD_VAR 0 1
58094: PUSH
58095: LD_VAR 0 6
58099: ARRAY
58100: PPUSH
58101: CALL 53298 0 2
58105: ST_TO_ADDR
// end ;
58106: GO 58013
58108: POP
58109: POP
// end ;
58110: LD_VAR 0 5
58114: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58115: LD_INT 0
58117: PPUSH
// if not vehicles or not parkingPoint then
58118: LD_VAR 0 1
58122: NOT
58123: PUSH
58124: LD_VAR 0 2
58128: NOT
58129: OR
58130: IFFALSE 58134
// exit ;
58132: GO 58232
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58134: LD_ADDR_VAR 0 1
58138: PUSH
58139: LD_VAR 0 1
58143: PPUSH
58144: LD_INT 50
58146: PUSH
58147: EMPTY
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 92
58155: PUSH
58156: LD_VAR 0 2
58160: PUSH
58161: LD_INT 1
58163: ARRAY
58164: PUSH
58165: LD_VAR 0 2
58169: PUSH
58170: LD_INT 2
58172: ARRAY
58173: PUSH
58174: LD_INT 8
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PPUSH
58191: CALL_OW 72
58195: ST_TO_ADDR
// if not vehicles then
58196: LD_VAR 0 1
58200: NOT
58201: IFFALSE 58205
// exit ;
58203: GO 58232
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58205: LD_VAR 0 1
58209: PPUSH
58210: LD_VAR 0 2
58214: PUSH
58215: LD_INT 1
58217: ARRAY
58218: PPUSH
58219: LD_VAR 0 2
58223: PUSH
58224: LD_INT 2
58226: ARRAY
58227: PPUSH
58228: CALL_OW 111
// end ;
58232: LD_VAR 0 3
58236: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58237: LD_INT 0
58239: PPUSH
58240: PPUSH
58241: PPUSH
// if not side or not area then
58242: LD_VAR 0 1
58246: NOT
58247: PUSH
58248: LD_VAR 0 2
58252: NOT
58253: OR
58254: IFFALSE 58258
// exit ;
58256: GO 58377
// tmp := AreaToList ( area , 0 ) ;
58258: LD_ADDR_VAR 0 5
58262: PUSH
58263: LD_VAR 0 2
58267: PPUSH
58268: LD_INT 0
58270: PPUSH
58271: CALL_OW 517
58275: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58276: LD_ADDR_VAR 0 4
58280: PUSH
58281: DOUBLE
58282: LD_INT 1
58284: DEC
58285: ST_TO_ADDR
58286: LD_VAR 0 5
58290: PUSH
58291: LD_INT 1
58293: ARRAY
58294: PUSH
58295: FOR_TO
58296: IFFALSE 58375
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58298: LD_VAR 0 5
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PUSH
58307: LD_VAR 0 4
58311: ARRAY
58312: PPUSH
58313: LD_VAR 0 5
58317: PUSH
58318: LD_INT 2
58320: ARRAY
58321: PUSH
58322: LD_VAR 0 4
58326: ARRAY
58327: PPUSH
58328: CALL_OW 351
58332: IFFALSE 58373
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58334: LD_VAR 0 5
58338: PUSH
58339: LD_INT 1
58341: ARRAY
58342: PUSH
58343: LD_VAR 0 4
58347: ARRAY
58348: PPUSH
58349: LD_VAR 0 5
58353: PUSH
58354: LD_INT 2
58356: ARRAY
58357: PUSH
58358: LD_VAR 0 4
58362: ARRAY
58363: PPUSH
58364: LD_VAR 0 1
58368: PPUSH
58369: CALL_OW 244
// end ;
58373: GO 58295
58375: POP
58376: POP
// end ; end_of_file
58377: LD_VAR 0 3
58381: RET
// export function SOS_UnitDestroyed ( un ) ; begin
58382: LD_INT 0
58384: PPUSH
// ComRadiation ( un ) ;
58385: LD_VAR 0 1
58389: PPUSH
58390: CALL 59371 0 1
// end ;
58394: LD_VAR 0 2
58398: RET
// export function SOS_UnitKamikazed ( un ) ; begin
58399: LD_INT 0
58401: PPUSH
// ComRadiation ( un ) ;
58402: LD_VAR 0 1
58406: PPUSH
58407: CALL 59371 0 1
// end ;
58411: LD_VAR 0 2
58415: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58416: LD_INT 0
58418: PPUSH
// end ;
58419: LD_VAR 0 4
58423: RET
// export function SOS_Command ( cmd ) ; begin
58424: LD_INT 0
58426: PPUSH
// end ;
58427: LD_VAR 0 2
58431: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58432: LD_INT 0
58434: PPUSH
// end ;
58435: LD_VAR 0 6
58439: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
58440: LD_INT 0
58442: PPUSH
58443: PPUSH
58444: PPUSH
58445: PPUSH
58446: PPUSH
// if not vehicle or not factory then
58447: LD_VAR 0 1
58451: NOT
58452: PUSH
58453: LD_VAR 0 2
58457: NOT
58458: OR
58459: IFFALSE 58463
// exit ;
58461: GO 58962
// if not factoryWaypoints then
58463: LD_EXP 55
58467: NOT
58468: IFFALSE 58472
// exit ;
58470: GO 58962
// for i := 1 to Count ( factoryWaypoints ) do
58472: LD_ADDR_VAR 0 4
58476: PUSH
58477: DOUBLE
58478: LD_INT 1
58480: DEC
58481: ST_TO_ADDR
58482: LD_EXP 55
58486: PPUSH
58487: CALL 17689 0 1
58491: PUSH
58492: FOR_TO
58493: IFFALSE 58960
// if factoryWaypoints [ i ] [ 2 ] = factory then
58495: LD_EXP 55
58499: PUSH
58500: LD_VAR 0 4
58504: ARRAY
58505: PUSH
58506: LD_INT 2
58508: ARRAY
58509: PUSH
58510: LD_VAR 0 2
58514: EQUAL
58515: IFFALSE 58958
// begin if GetControl ( vehicle ) = control_manual then
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 263
58526: PUSH
58527: LD_INT 1
58529: EQUAL
58530: IFFALSE 58841
// begin driver := IsDrivenBy ( vehicle ) ;
58532: LD_ADDR_VAR 0 6
58536: PUSH
58537: LD_VAR 0 1
58541: PPUSH
58542: CALL_OW 311
58546: ST_TO_ADDR
// tag := GetTag ( driver ) ;
58547: LD_ADDR_VAR 0 5
58551: PUSH
58552: LD_VAR 0 6
58556: PPUSH
58557: CALL_OW 110
58561: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
58562: LD_VAR 0 5
58566: PUSH
58567: LD_INT 501
58569: EQUAL
58570: PUSH
58571: LD_VAR 0 1
58575: PPUSH
58576: CALL_OW 110
58580: PUSH
58581: LD_INT 501
58583: EQUAL
58584: OR
58585: IFFALSE 58591
// exit ;
58587: POP
58588: POP
58589: GO 58962
// if not HasTask ( driver ) then
58591: LD_VAR 0 6
58595: PPUSH
58596: CALL_OW 314
58600: NOT
58601: IFFALSE 58839
// begin SetTag ( driver , tDriver ) ;
58603: LD_VAR 0 6
58607: PPUSH
58608: LD_INT 501
58610: PPUSH
58611: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
58615: LD_VAR 0 1
58619: PPUSH
58620: LD_INT 501
58622: PPUSH
58623: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58627: LD_ADDR_VAR 0 7
58631: PUSH
58632: LD_EXP 55
58636: PUSH
58637: LD_VAR 0 4
58641: ARRAY
58642: PUSH
58643: LD_INT 3
58645: ARRAY
58646: PPUSH
58647: LD_EXP 55
58651: PUSH
58652: LD_VAR 0 4
58656: ARRAY
58657: PUSH
58658: LD_INT 4
58660: ARRAY
58661: PPUSH
58662: CALL_OW 428
58666: ST_TO_ADDR
// if hex then
58667: LD_VAR 0 7
58671: IFFALSE 58689
// ComMoveUnit ( driver , hex ) else
58673: LD_VAR 0 6
58677: PPUSH
58678: LD_VAR 0 7
58682: PPUSH
58683: CALL_OW 112
58687: GO 58728
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58689: LD_VAR 0 6
58693: PPUSH
58694: LD_EXP 55
58698: PUSH
58699: LD_VAR 0 4
58703: ARRAY
58704: PUSH
58705: LD_INT 3
58707: ARRAY
58708: PPUSH
58709: LD_EXP 55
58713: PUSH
58714: LD_VAR 0 4
58718: ARRAY
58719: PUSH
58720: LD_INT 4
58722: ARRAY
58723: PPUSH
58724: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58728: LD_VAR 0 6
58732: PPUSH
58733: CALL_OW 181
// if Multiplayer then
58737: LD_OWVAR 4
58741: IFFALSE 58790
// begin repeat wait ( 10 ) ;
58743: LD_INT 10
58745: PPUSH
58746: CALL_OW 67
// until not IsInUnit ( driver ) ;
58750: LD_VAR 0 6
58754: PPUSH
58755: CALL_OW 310
58759: NOT
58760: IFFALSE 58743
// if not HasTask ( driver ) then
58762: LD_VAR 0 6
58766: PPUSH
58767: CALL_OW 314
58771: NOT
58772: IFFALSE 58788
// ComEnterUnit ( driver , factory ) ;
58774: LD_VAR 0 6
58778: PPUSH
58779: LD_VAR 0 2
58783: PPUSH
58784: CALL_OW 120
// end else
58788: GO 58804
// AddComEnterUnit ( driver , factory ) ;
58790: LD_VAR 0 6
58794: PPUSH
58795: LD_VAR 0 2
58799: PPUSH
58800: CALL_OW 180
// wait ( 0 0$1 ) ;
58804: LD_INT 35
58806: PPUSH
58807: CALL_OW 67
// SetTag ( driver , tag ) ;
58811: LD_VAR 0 6
58815: PPUSH
58816: LD_VAR 0 5
58820: PPUSH
58821: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
58825: LD_VAR 0 1
58829: PPUSH
58830: LD_INT 0
58832: PPUSH
58833: CALL_OW 109
// break ;
58837: GO 58960
// end ; end else
58839: GO 58958
// if GetControl ( vehicle ) = control_remote then
58841: LD_VAR 0 1
58845: PPUSH
58846: CALL_OW 263
58850: PUSH
58851: LD_INT 2
58853: EQUAL
58854: IFFALSE 58917
// begin wait ( 0 0$2 ) ;
58856: LD_INT 70
58858: PPUSH
58859: CALL_OW 67
// if Connect ( vehicle ) then
58863: LD_VAR 0 1
58867: PPUSH
58868: CALL 23895 0 1
58872: IFFALSE 58913
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58874: LD_VAR 0 1
58878: PPUSH
58879: LD_EXP 55
58883: PUSH
58884: LD_VAR 0 4
58888: ARRAY
58889: PUSH
58890: LD_INT 3
58892: ARRAY
58893: PPUSH
58894: LD_EXP 55
58898: PUSH
58899: LD_VAR 0 4
58903: ARRAY
58904: PUSH
58905: LD_INT 4
58907: ARRAY
58908: PPUSH
58909: CALL_OW 171
// break ;
58913: GO 58960
// end else
58915: GO 58958
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58917: LD_VAR 0 1
58921: PPUSH
58922: LD_EXP 55
58926: PUSH
58927: LD_VAR 0 4
58931: ARRAY
58932: PUSH
58933: LD_INT 3
58935: ARRAY
58936: PPUSH
58937: LD_EXP 55
58941: PUSH
58942: LD_VAR 0 4
58946: ARRAY
58947: PUSH
58948: LD_INT 4
58950: ARRAY
58951: PPUSH
58952: CALL_OW 171
// break ;
58956: GO 58960
// end ; end ;
58958: GO 58492
58960: POP
58961: POP
// end ;
58962: LD_VAR 0 3
58966: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58967: LD_INT 0
58969: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58970: LD_VAR 0 1
58974: PUSH
58975: LD_INT 250
58977: EQUAL
58978: PUSH
58979: LD_VAR 0 2
58983: PPUSH
58984: CALL_OW 264
58988: PUSH
58989: LD_INT 81
58991: EQUAL
58992: AND
58993: IFFALSE 59014
// MinerPlaceMine ( unit , x , y ) ;
58995: LD_VAR 0 2
58999: PPUSH
59000: LD_VAR 0 4
59004: PPUSH
59005: LD_VAR 0 5
59009: PPUSH
59010: CALL 62106 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59014: LD_VAR 0 1
59018: PUSH
59019: LD_INT 251
59021: EQUAL
59022: PUSH
59023: LD_VAR 0 2
59027: PPUSH
59028: CALL_OW 264
59032: PUSH
59033: LD_INT 81
59035: EQUAL
59036: AND
59037: IFFALSE 59058
// MinerDetonateMine ( unit , x , y ) ;
59039: LD_VAR 0 2
59043: PPUSH
59044: LD_VAR 0 4
59048: PPUSH
59049: LD_VAR 0 5
59053: PPUSH
59054: CALL 62381 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59058: LD_VAR 0 1
59062: PUSH
59063: LD_INT 252
59065: EQUAL
59066: PUSH
59067: LD_VAR 0 2
59071: PPUSH
59072: CALL_OW 264
59076: PUSH
59077: LD_INT 81
59079: EQUAL
59080: AND
59081: IFFALSE 59102
// MinerCreateMinefield ( unit , x , y ) ;
59083: LD_VAR 0 2
59087: PPUSH
59088: LD_VAR 0 4
59092: PPUSH
59093: LD_VAR 0 5
59097: PPUSH
59098: CALL 62798 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59102: LD_VAR 0 1
59106: PUSH
59107: LD_INT 253
59109: EQUAL
59110: PUSH
59111: LD_VAR 0 2
59115: PPUSH
59116: CALL_OW 257
59120: PUSH
59121: LD_INT 5
59123: EQUAL
59124: AND
59125: IFFALSE 59146
// ComBinocular ( unit , x , y ) ;
59127: LD_VAR 0 2
59131: PPUSH
59132: LD_VAR 0 4
59136: PPUSH
59137: LD_VAR 0 5
59141: PPUSH
59142: CALL 63167 0 3
// if selectedUnit then
59146: LD_VAR 0 3
59150: IFFALSE 59206
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59152: LD_VAR 0 1
59156: PUSH
59157: LD_INT 254
59159: EQUAL
59160: PUSH
59161: LD_VAR 0 2
59165: PPUSH
59166: CALL_OW 264
59170: PUSH
59171: LD_INT 99
59173: EQUAL
59174: AND
59175: PUSH
59176: LD_VAR 0 3
59180: PPUSH
59181: CALL_OW 263
59185: PUSH
59186: LD_INT 3
59188: EQUAL
59189: AND
59190: IFFALSE 59206
// HackDestroyVehicle ( unit , selectedUnit ) ;
59192: LD_VAR 0 2
59196: PPUSH
59197: LD_VAR 0 3
59201: PPUSH
59202: CALL 61470 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59206: LD_VAR 0 1
59210: PUSH
59211: LD_INT 255
59213: EQUAL
59214: PUSH
59215: LD_VAR 0 2
59219: PPUSH
59220: CALL_OW 264
59224: PUSH
59225: LD_INT 14
59227: PUSH
59228: LD_INT 53
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: IN
59235: AND
59236: PUSH
59237: LD_VAR 0 4
59241: PPUSH
59242: LD_VAR 0 5
59246: PPUSH
59247: CALL_OW 488
59251: AND
59252: IFFALSE 59276
// CutTreeXYR ( unit , x , y , 12 ) ;
59254: LD_VAR 0 2
59258: PPUSH
59259: LD_VAR 0 4
59263: PPUSH
59264: LD_VAR 0 5
59268: PPUSH
59269: LD_INT 12
59271: PPUSH
59272: CALL 59467 0 4
// if cmd = 256 then
59276: LD_VAR 0 1
59280: PUSH
59281: LD_INT 256
59283: EQUAL
59284: IFFALSE 59305
// SetFactoryWaypoint ( unit , x , y ) ;
59286: LD_VAR 0 2
59290: PPUSH
59291: LD_VAR 0 4
59295: PPUSH
59296: LD_VAR 0 5
59300: PPUSH
59301: CALL 63722 0 3
// if cmd = 257 then
59305: LD_VAR 0 1
59309: PUSH
59310: LD_INT 257
59312: EQUAL
59313: IFFALSE 59334
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59315: LD_VAR 0 2
59319: PPUSH
59320: LD_VAR 0 4
59324: PPUSH
59325: LD_VAR 0 5
59329: PPUSH
59330: CALL 64212 0 3
// if cmd = 258 then
59334: LD_VAR 0 1
59338: PUSH
59339: LD_INT 258
59341: EQUAL
59342: IFFALSE 59366
// BurnTreeXYR ( unit , x , y , 8 ) ;
59344: LD_VAR 0 2
59348: PPUSH
59349: LD_VAR 0 4
59353: PPUSH
59354: LD_VAR 0 5
59358: PPUSH
59359: LD_INT 8
59361: PPUSH
59362: CALL 59861 0 4
// end ;
59366: LD_VAR 0 6
59370: RET
// export function ComRadiation ( un ) ; var eff ; begin
59371: LD_INT 0
59373: PPUSH
59374: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL_OW 264
59384: PUSH
59385: LD_INT 91
59387: NONEQUAL
59388: IFFALSE 59392
// exit ;
59390: GO 59462
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59392: LD_INT 68
59394: PPUSH
59395: LD_VAR 0 1
59399: PPUSH
59400: CALL_OW 255
59404: PPUSH
59405: CALL_OW 321
59409: PUSH
59410: LD_INT 2
59412: EQUAL
59413: IFFALSE 59425
// eff := 70 else
59415: LD_ADDR_VAR 0 3
59419: PUSH
59420: LD_INT 70
59422: ST_TO_ADDR
59423: GO 59433
// eff := 30 ;
59425: LD_ADDR_VAR 0 3
59429: PUSH
59430: LD_INT 30
59432: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 250
59442: PPUSH
59443: LD_VAR 0 1
59447: PPUSH
59448: CALL_OW 251
59452: PPUSH
59453: LD_VAR 0 3
59457: PPUSH
59458: CALL_OW 495
// end ;
59462: LD_VAR 0 2
59466: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59467: LD_INT 0
59469: PPUSH
59470: PPUSH
59471: PPUSH
59472: PPUSH
59473: PPUSH
59474: PPUSH
59475: PPUSH
59476: PPUSH
59477: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59478: LD_VAR 0 1
59482: PPUSH
59483: CALL_OW 302
59487: NOT
59488: PUSH
59489: LD_VAR 0 2
59493: PPUSH
59494: LD_VAR 0 3
59498: PPUSH
59499: CALL_OW 488
59503: NOT
59504: OR
59505: PUSH
59506: LD_VAR 0 4
59510: NOT
59511: OR
59512: IFFALSE 59516
// exit ;
59514: GO 59856
// list := [ ] ;
59516: LD_ADDR_VAR 0 13
59520: PUSH
59521: EMPTY
59522: ST_TO_ADDR
// if x - r < 0 then
59523: LD_VAR 0 2
59527: PUSH
59528: LD_VAR 0 4
59532: MINUS
59533: PUSH
59534: LD_INT 0
59536: LESS
59537: IFFALSE 59549
// min_x := 0 else
59539: LD_ADDR_VAR 0 7
59543: PUSH
59544: LD_INT 0
59546: ST_TO_ADDR
59547: GO 59565
// min_x := x - r ;
59549: LD_ADDR_VAR 0 7
59553: PUSH
59554: LD_VAR 0 2
59558: PUSH
59559: LD_VAR 0 4
59563: MINUS
59564: ST_TO_ADDR
// if y - r < 0 then
59565: LD_VAR 0 3
59569: PUSH
59570: LD_VAR 0 4
59574: MINUS
59575: PUSH
59576: LD_INT 0
59578: LESS
59579: IFFALSE 59591
// min_y := 0 else
59581: LD_ADDR_VAR 0 8
59585: PUSH
59586: LD_INT 0
59588: ST_TO_ADDR
59589: GO 59607
// min_y := y - r ;
59591: LD_ADDR_VAR 0 8
59595: PUSH
59596: LD_VAR 0 3
59600: PUSH
59601: LD_VAR 0 4
59605: MINUS
59606: ST_TO_ADDR
// max_x := x + r ;
59607: LD_ADDR_VAR 0 9
59611: PUSH
59612: LD_VAR 0 2
59616: PUSH
59617: LD_VAR 0 4
59621: PLUS
59622: ST_TO_ADDR
// max_y := y + r ;
59623: LD_ADDR_VAR 0 10
59627: PUSH
59628: LD_VAR 0 3
59632: PUSH
59633: LD_VAR 0 4
59637: PLUS
59638: ST_TO_ADDR
// for _x = min_x to max_x do
59639: LD_ADDR_VAR 0 11
59643: PUSH
59644: DOUBLE
59645: LD_VAR 0 7
59649: DEC
59650: ST_TO_ADDR
59651: LD_VAR 0 9
59655: PUSH
59656: FOR_TO
59657: IFFALSE 59774
// for _y = min_y to max_y do
59659: LD_ADDR_VAR 0 12
59663: PUSH
59664: DOUBLE
59665: LD_VAR 0 8
59669: DEC
59670: ST_TO_ADDR
59671: LD_VAR 0 10
59675: PUSH
59676: FOR_TO
59677: IFFALSE 59770
// begin if not ValidHex ( _x , _y ) then
59679: LD_VAR 0 11
59683: PPUSH
59684: LD_VAR 0 12
59688: PPUSH
59689: CALL_OW 488
59693: NOT
59694: IFFALSE 59698
// continue ;
59696: GO 59676
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59698: LD_VAR 0 11
59702: PPUSH
59703: LD_VAR 0 12
59707: PPUSH
59708: CALL_OW 351
59712: PUSH
59713: LD_VAR 0 11
59717: PPUSH
59718: LD_VAR 0 12
59722: PPUSH
59723: CALL_OW 554
59727: AND
59728: IFFALSE 59768
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59730: LD_ADDR_VAR 0 13
59734: PUSH
59735: LD_VAR 0 13
59739: PPUSH
59740: LD_VAR 0 13
59744: PUSH
59745: LD_INT 1
59747: PLUS
59748: PPUSH
59749: LD_VAR 0 11
59753: PUSH
59754: LD_VAR 0 12
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PPUSH
59763: CALL_OW 2
59767: ST_TO_ADDR
// end ;
59768: GO 59676
59770: POP
59771: POP
59772: GO 59656
59774: POP
59775: POP
// if not list then
59776: LD_VAR 0 13
59780: NOT
59781: IFFALSE 59785
// exit ;
59783: GO 59856
// for i in list do
59785: LD_ADDR_VAR 0 6
59789: PUSH
59790: LD_VAR 0 13
59794: PUSH
59795: FOR_IN
59796: IFFALSE 59854
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59798: LD_VAR 0 1
59802: PPUSH
59803: LD_STRING M
59805: PUSH
59806: LD_VAR 0 6
59810: PUSH
59811: LD_INT 1
59813: ARRAY
59814: PUSH
59815: LD_VAR 0 6
59819: PUSH
59820: LD_INT 2
59822: ARRAY
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: PUSH
59845: EMPTY
59846: LIST
59847: PPUSH
59848: CALL_OW 447
59852: GO 59795
59854: POP
59855: POP
// end ;
59856: LD_VAR 0 5
59860: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59861: LD_INT 0
59863: PPUSH
59864: PPUSH
59865: PPUSH
59866: PPUSH
59867: PPUSH
59868: PPUSH
59869: PPUSH
59870: PPUSH
59871: PPUSH
59872: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
59873: LD_VAR 0 1
59877: PPUSH
59878: CALL_OW 302
59882: NOT
59883: PUSH
59884: LD_VAR 0 2
59888: PPUSH
59889: LD_VAR 0 3
59893: PPUSH
59894: CALL_OW 488
59898: NOT
59899: OR
59900: PUSH
59901: LD_VAR 0 4
59905: NOT
59906: OR
59907: IFFALSE 59911
// exit ;
59909: GO 60424
// list := [ ] ;
59911: LD_ADDR_VAR 0 13
59915: PUSH
59916: EMPTY
59917: ST_TO_ADDR
// if x - r < 0 then
59918: LD_VAR 0 2
59922: PUSH
59923: LD_VAR 0 4
59927: MINUS
59928: PUSH
59929: LD_INT 0
59931: LESS
59932: IFFALSE 59944
// min_x := 0 else
59934: LD_ADDR_VAR 0 7
59938: PUSH
59939: LD_INT 0
59941: ST_TO_ADDR
59942: GO 59960
// min_x := x - r ;
59944: LD_ADDR_VAR 0 7
59948: PUSH
59949: LD_VAR 0 2
59953: PUSH
59954: LD_VAR 0 4
59958: MINUS
59959: ST_TO_ADDR
// if y - r < 0 then
59960: LD_VAR 0 3
59964: PUSH
59965: LD_VAR 0 4
59969: MINUS
59970: PUSH
59971: LD_INT 0
59973: LESS
59974: IFFALSE 59986
// min_y := 0 else
59976: LD_ADDR_VAR 0 8
59980: PUSH
59981: LD_INT 0
59983: ST_TO_ADDR
59984: GO 60002
// min_y := y - r ;
59986: LD_ADDR_VAR 0 8
59990: PUSH
59991: LD_VAR 0 3
59995: PUSH
59996: LD_VAR 0 4
60000: MINUS
60001: ST_TO_ADDR
// max_x := x + r ;
60002: LD_ADDR_VAR 0 9
60006: PUSH
60007: LD_VAR 0 2
60011: PUSH
60012: LD_VAR 0 4
60016: PLUS
60017: ST_TO_ADDR
// max_y := y + r ;
60018: LD_ADDR_VAR 0 10
60022: PUSH
60023: LD_VAR 0 3
60027: PUSH
60028: LD_VAR 0 4
60032: PLUS
60033: ST_TO_ADDR
// for _x = min_x to max_x do
60034: LD_ADDR_VAR 0 11
60038: PUSH
60039: DOUBLE
60040: LD_VAR 0 7
60044: DEC
60045: ST_TO_ADDR
60046: LD_VAR 0 9
60050: PUSH
60051: FOR_TO
60052: IFFALSE 60169
// for _y = min_y to max_y do
60054: LD_ADDR_VAR 0 12
60058: PUSH
60059: DOUBLE
60060: LD_VAR 0 8
60064: DEC
60065: ST_TO_ADDR
60066: LD_VAR 0 10
60070: PUSH
60071: FOR_TO
60072: IFFALSE 60165
// begin if not ValidHex ( _x , _y ) then
60074: LD_VAR 0 11
60078: PPUSH
60079: LD_VAR 0 12
60083: PPUSH
60084: CALL_OW 488
60088: NOT
60089: IFFALSE 60093
// continue ;
60091: GO 60071
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60093: LD_VAR 0 11
60097: PPUSH
60098: LD_VAR 0 12
60102: PPUSH
60103: CALL_OW 351
60107: PUSH
60108: LD_VAR 0 11
60112: PPUSH
60113: LD_VAR 0 12
60117: PPUSH
60118: CALL_OW 554
60122: AND
60123: IFFALSE 60163
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60125: LD_ADDR_VAR 0 13
60129: PUSH
60130: LD_VAR 0 13
60134: PPUSH
60135: LD_VAR 0 13
60139: PUSH
60140: LD_INT 1
60142: PLUS
60143: PPUSH
60144: LD_VAR 0 11
60148: PUSH
60149: LD_VAR 0 12
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PPUSH
60158: CALL_OW 2
60162: ST_TO_ADDR
// end ;
60163: GO 60071
60165: POP
60166: POP
60167: GO 60051
60169: POP
60170: POP
// if not list then
60171: LD_VAR 0 13
60175: NOT
60176: IFFALSE 60180
// exit ;
60178: GO 60424
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60180: LD_ADDR_VAR 0 13
60184: PUSH
60185: LD_VAR 0 1
60189: PPUSH
60190: LD_VAR 0 13
60194: PPUSH
60195: LD_INT 1
60197: PPUSH
60198: LD_INT 1
60200: PPUSH
60201: CALL 21037 0 4
60205: ST_TO_ADDR
// ComStop ( flame ) ;
60206: LD_VAR 0 1
60210: PPUSH
60211: CALL_OW 141
// for i in list do
60215: LD_ADDR_VAR 0 6
60219: PUSH
60220: LD_VAR 0 13
60224: PUSH
60225: FOR_IN
60226: IFFALSE 60257
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60228: LD_VAR 0 1
60232: PPUSH
60233: LD_VAR 0 6
60237: PUSH
60238: LD_INT 1
60240: ARRAY
60241: PPUSH
60242: LD_VAR 0 6
60246: PUSH
60247: LD_INT 2
60249: ARRAY
60250: PPUSH
60251: CALL_OW 176
60255: GO 60225
60257: POP
60258: POP
// repeat wait ( 0 0$1 ) ;
60259: LD_INT 35
60261: PPUSH
60262: CALL_OW 67
// task := GetTaskList ( flame ) ;
60266: LD_ADDR_VAR 0 14
60270: PUSH
60271: LD_VAR 0 1
60275: PPUSH
60276: CALL_OW 437
60280: ST_TO_ADDR
// if not task then
60281: LD_VAR 0 14
60285: NOT
60286: IFFALSE 60290
// exit ;
60288: GO 60424
// if task [ 1 ] [ 1 ] <> | then
60290: LD_VAR 0 14
60294: PUSH
60295: LD_INT 1
60297: ARRAY
60298: PUSH
60299: LD_INT 1
60301: ARRAY
60302: PUSH
60303: LD_STRING |
60305: NONEQUAL
60306: IFFALSE 60310
// exit ;
60308: GO 60424
// _x := task [ 1 ] [ 2 ] ;
60310: LD_ADDR_VAR 0 11
60314: PUSH
60315: LD_VAR 0 14
60319: PUSH
60320: LD_INT 1
60322: ARRAY
60323: PUSH
60324: LD_INT 2
60326: ARRAY
60327: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60328: LD_ADDR_VAR 0 12
60332: PUSH
60333: LD_VAR 0 14
60337: PUSH
60338: LD_INT 1
60340: ARRAY
60341: PUSH
60342: LD_INT 3
60344: ARRAY
60345: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60346: LD_VAR 0 11
60350: PPUSH
60351: LD_VAR 0 12
60355: PPUSH
60356: CALL_OW 351
60360: NOT
60361: PUSH
60362: LD_VAR 0 11
60366: PPUSH
60367: LD_VAR 0 12
60371: PPUSH
60372: CALL_OW 554
60376: NOT
60377: OR
60378: IFFALSE 60412
// begin task := Delete ( task , 1 ) ;
60380: LD_ADDR_VAR 0 14
60384: PUSH
60385: LD_VAR 0 14
60389: PPUSH
60390: LD_INT 1
60392: PPUSH
60393: CALL_OW 3
60397: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60398: LD_VAR 0 1
60402: PPUSH
60403: LD_VAR 0 14
60407: PPUSH
60408: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 314
60421: NOT
60422: IFFALSE 60259
// end ;
60424: LD_VAR 0 5
60428: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60429: LD_EXP 45
60433: NOT
60434: IFFALSE 60484
60436: GO 60438
60438: DISABLE
// begin initHack := true ;
60439: LD_ADDR_EXP 45
60443: PUSH
60444: LD_INT 1
60446: ST_TO_ADDR
// hackTanks := [ ] ;
60447: LD_ADDR_EXP 46
60451: PUSH
60452: EMPTY
60453: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60454: LD_ADDR_EXP 47
60458: PUSH
60459: EMPTY
60460: ST_TO_ADDR
// hackLimit := 3 ;
60461: LD_ADDR_EXP 48
60465: PUSH
60466: LD_INT 3
60468: ST_TO_ADDR
// hackDist := 12 ;
60469: LD_ADDR_EXP 49
60473: PUSH
60474: LD_INT 12
60476: ST_TO_ADDR
// hackCounter := [ ] ;
60477: LD_ADDR_EXP 50
60481: PUSH
60482: EMPTY
60483: ST_TO_ADDR
// end ;
60484: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60485: LD_EXP 45
60489: PUSH
60490: LD_INT 34
60492: PUSH
60493: LD_INT 99
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PPUSH
60500: CALL_OW 69
60504: AND
60505: IFFALSE 60758
60507: GO 60509
60509: DISABLE
60510: LD_INT 0
60512: PPUSH
60513: PPUSH
// begin enable ;
60514: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60515: LD_ADDR_VAR 0 1
60519: PUSH
60520: LD_INT 34
60522: PUSH
60523: LD_INT 99
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PPUSH
60530: CALL_OW 69
60534: PUSH
60535: FOR_IN
60536: IFFALSE 60756
// begin if not i in hackTanks then
60538: LD_VAR 0 1
60542: PUSH
60543: LD_EXP 46
60547: IN
60548: NOT
60549: IFFALSE 60632
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60551: LD_ADDR_EXP 46
60555: PUSH
60556: LD_EXP 46
60560: PPUSH
60561: LD_EXP 46
60565: PUSH
60566: LD_INT 1
60568: PLUS
60569: PPUSH
60570: LD_VAR 0 1
60574: PPUSH
60575: CALL_OW 1
60579: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60580: LD_ADDR_EXP 47
60584: PUSH
60585: LD_EXP 47
60589: PPUSH
60590: LD_EXP 47
60594: PUSH
60595: LD_INT 1
60597: PLUS
60598: PPUSH
60599: EMPTY
60600: PPUSH
60601: CALL_OW 1
60605: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60606: LD_ADDR_EXP 50
60610: PUSH
60611: LD_EXP 50
60615: PPUSH
60616: LD_EXP 50
60620: PUSH
60621: LD_INT 1
60623: PLUS
60624: PPUSH
60625: EMPTY
60626: PPUSH
60627: CALL_OW 1
60631: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60632: LD_VAR 0 1
60636: PPUSH
60637: CALL_OW 302
60641: NOT
60642: IFFALSE 60655
// begin HackUnlinkAll ( i ) ;
60644: LD_VAR 0 1
60648: PPUSH
60649: CALL 60761 0 1
// continue ;
60653: GO 60535
// end ; HackCheckCapturedStatus ( i ) ;
60655: LD_VAR 0 1
60659: PPUSH
60660: CALL 61204 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60664: LD_ADDR_VAR 0 2
60668: PUSH
60669: LD_INT 81
60671: PUSH
60672: LD_VAR 0 1
60676: PPUSH
60677: CALL_OW 255
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 33
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 91
60698: PUSH
60699: LD_VAR 0 1
60703: PUSH
60704: LD_EXP 49
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 50
60716: PUSH
60717: EMPTY
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: PPUSH
60726: CALL_OW 69
60730: ST_TO_ADDR
// if not tmp then
60731: LD_VAR 0 2
60735: NOT
60736: IFFALSE 60740
// continue ;
60738: GO 60535
// HackLink ( i , tmp ) ;
60740: LD_VAR 0 1
60744: PPUSH
60745: LD_VAR 0 2
60749: PPUSH
60750: CALL 60897 0 2
// end ;
60754: GO 60535
60756: POP
60757: POP
// end ;
60758: PPOPN 2
60760: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60761: LD_INT 0
60763: PPUSH
60764: PPUSH
60765: PPUSH
// if not hack in hackTanks then
60766: LD_VAR 0 1
60770: PUSH
60771: LD_EXP 46
60775: IN
60776: NOT
60777: IFFALSE 60781
// exit ;
60779: GO 60892
// index := GetElementIndex ( hackTanks , hack ) ;
60781: LD_ADDR_VAR 0 4
60785: PUSH
60786: LD_EXP 46
60790: PPUSH
60791: LD_VAR 0 1
60795: PPUSH
60796: CALL 20334 0 2
60800: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60801: LD_EXP 47
60805: PUSH
60806: LD_VAR 0 4
60810: ARRAY
60811: IFFALSE 60892
// begin for i in hackTanksCaptured [ index ] do
60813: LD_ADDR_VAR 0 3
60817: PUSH
60818: LD_EXP 47
60822: PUSH
60823: LD_VAR 0 4
60827: ARRAY
60828: PUSH
60829: FOR_IN
60830: IFFALSE 60856
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60832: LD_VAR 0 3
60836: PUSH
60837: LD_INT 1
60839: ARRAY
60840: PPUSH
60841: LD_VAR 0 3
60845: PUSH
60846: LD_INT 2
60848: ARRAY
60849: PPUSH
60850: CALL_OW 235
60854: GO 60829
60856: POP
60857: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60858: LD_ADDR_EXP 47
60862: PUSH
60863: LD_EXP 47
60867: PPUSH
60868: LD_VAR 0 4
60872: PPUSH
60873: EMPTY
60874: PPUSH
60875: CALL_OW 1
60879: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60880: LD_VAR 0 1
60884: PPUSH
60885: LD_INT 0
60887: PPUSH
60888: CALL_OW 505
// end ; end ;
60892: LD_VAR 0 2
60896: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60897: LD_INT 0
60899: PPUSH
60900: PPUSH
60901: PPUSH
// if not hack in hackTanks or not vehicles then
60902: LD_VAR 0 1
60906: PUSH
60907: LD_EXP 46
60911: IN
60912: NOT
60913: PUSH
60914: LD_VAR 0 2
60918: NOT
60919: OR
60920: IFFALSE 60924
// exit ;
60922: GO 61199
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60924: LD_ADDR_VAR 0 2
60928: PUSH
60929: LD_VAR 0 1
60933: PPUSH
60934: LD_VAR 0 2
60938: PPUSH
60939: LD_INT 1
60941: PPUSH
60942: LD_INT 1
60944: PPUSH
60945: CALL 20984 0 4
60949: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60950: LD_ADDR_VAR 0 5
60954: PUSH
60955: LD_EXP 46
60959: PPUSH
60960: LD_VAR 0 1
60964: PPUSH
60965: CALL 20334 0 2
60969: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60970: LD_EXP 47
60974: PUSH
60975: LD_VAR 0 5
60979: ARRAY
60980: PUSH
60981: LD_EXP 48
60985: LESS
60986: IFFALSE 61175
// begin for i := 1 to vehicles do
60988: LD_ADDR_VAR 0 4
60992: PUSH
60993: DOUBLE
60994: LD_INT 1
60996: DEC
60997: ST_TO_ADDR
60998: LD_VAR 0 2
61002: PUSH
61003: FOR_TO
61004: IFFALSE 61173
// begin if hackTanksCaptured [ index ] = hackLimit then
61006: LD_EXP 47
61010: PUSH
61011: LD_VAR 0 5
61015: ARRAY
61016: PUSH
61017: LD_EXP 48
61021: EQUAL
61022: IFFALSE 61026
// break ;
61024: GO 61173
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61026: LD_ADDR_EXP 50
61030: PUSH
61031: LD_EXP 50
61035: PPUSH
61036: LD_VAR 0 5
61040: PPUSH
61041: LD_EXP 50
61045: PUSH
61046: LD_VAR 0 5
61050: ARRAY
61051: PUSH
61052: LD_INT 1
61054: PLUS
61055: PPUSH
61056: CALL_OW 1
61060: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61061: LD_ADDR_EXP 47
61065: PUSH
61066: LD_EXP 47
61070: PPUSH
61071: LD_VAR 0 5
61075: PUSH
61076: LD_EXP 47
61080: PUSH
61081: LD_VAR 0 5
61085: ARRAY
61086: PUSH
61087: LD_INT 1
61089: PLUS
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PPUSH
61095: LD_VAR 0 2
61099: PUSH
61100: LD_VAR 0 4
61104: ARRAY
61105: PUSH
61106: LD_VAR 0 2
61110: PUSH
61111: LD_VAR 0 4
61115: ARRAY
61116: PPUSH
61117: CALL_OW 255
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PPUSH
61126: CALL 20549 0 3
61130: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61131: LD_VAR 0 2
61135: PUSH
61136: LD_VAR 0 4
61140: ARRAY
61141: PPUSH
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 255
61151: PPUSH
61152: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61156: LD_VAR 0 2
61160: PUSH
61161: LD_VAR 0 4
61165: ARRAY
61166: PPUSH
61167: CALL_OW 141
// end ;
61171: GO 61003
61173: POP
61174: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61175: LD_VAR 0 1
61179: PPUSH
61180: LD_EXP 47
61184: PUSH
61185: LD_VAR 0 5
61189: ARRAY
61190: PUSH
61191: LD_INT 0
61193: PLUS
61194: PPUSH
61195: CALL_OW 505
// end ;
61199: LD_VAR 0 3
61203: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61204: LD_INT 0
61206: PPUSH
61207: PPUSH
61208: PPUSH
61209: PPUSH
// if not hack in hackTanks then
61210: LD_VAR 0 1
61214: PUSH
61215: LD_EXP 46
61219: IN
61220: NOT
61221: IFFALSE 61225
// exit ;
61223: GO 61465
// index := GetElementIndex ( hackTanks , hack ) ;
61225: LD_ADDR_VAR 0 4
61229: PUSH
61230: LD_EXP 46
61234: PPUSH
61235: LD_VAR 0 1
61239: PPUSH
61240: CALL 20334 0 2
61244: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61245: LD_ADDR_VAR 0 3
61249: PUSH
61250: DOUBLE
61251: LD_EXP 47
61255: PUSH
61256: LD_VAR 0 4
61260: ARRAY
61261: INC
61262: ST_TO_ADDR
61263: LD_INT 1
61265: PUSH
61266: FOR_DOWNTO
61267: IFFALSE 61439
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61269: LD_ADDR_VAR 0 5
61273: PUSH
61274: LD_EXP 47
61278: PUSH
61279: LD_VAR 0 4
61283: ARRAY
61284: PUSH
61285: LD_VAR 0 3
61289: ARRAY
61290: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61291: LD_VAR 0 5
61295: PUSH
61296: LD_INT 1
61298: ARRAY
61299: PPUSH
61300: CALL_OW 302
61304: NOT
61305: PUSH
61306: LD_VAR 0 5
61310: PUSH
61311: LD_INT 1
61313: ARRAY
61314: PPUSH
61315: CALL_OW 255
61319: PUSH
61320: LD_VAR 0 1
61324: PPUSH
61325: CALL_OW 255
61329: NONEQUAL
61330: OR
61331: IFFALSE 61437
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61333: LD_VAR 0 5
61337: PUSH
61338: LD_INT 1
61340: ARRAY
61341: PPUSH
61342: CALL_OW 305
61346: PUSH
61347: LD_VAR 0 5
61351: PUSH
61352: LD_INT 1
61354: ARRAY
61355: PPUSH
61356: CALL_OW 255
61360: PUSH
61361: LD_VAR 0 1
61365: PPUSH
61366: CALL_OW 255
61370: EQUAL
61371: AND
61372: IFFALSE 61396
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61374: LD_VAR 0 5
61378: PUSH
61379: LD_INT 1
61381: ARRAY
61382: PPUSH
61383: LD_VAR 0 5
61387: PUSH
61388: LD_INT 2
61390: ARRAY
61391: PPUSH
61392: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61396: LD_ADDR_EXP 47
61400: PUSH
61401: LD_EXP 47
61405: PPUSH
61406: LD_VAR 0 4
61410: PPUSH
61411: LD_EXP 47
61415: PUSH
61416: LD_VAR 0 4
61420: ARRAY
61421: PPUSH
61422: LD_VAR 0 3
61426: PPUSH
61427: CALL_OW 3
61431: PPUSH
61432: CALL_OW 1
61436: ST_TO_ADDR
// end ; end ;
61437: GO 61266
61439: POP
61440: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61441: LD_VAR 0 1
61445: PPUSH
61446: LD_EXP 47
61450: PUSH
61451: LD_VAR 0 4
61455: ARRAY
61456: PUSH
61457: LD_INT 0
61459: PLUS
61460: PPUSH
61461: CALL_OW 505
// end ;
61465: LD_VAR 0 2
61469: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61470: LD_INT 0
61472: PPUSH
61473: PPUSH
61474: PPUSH
61475: PPUSH
// if not hack in hackTanks then
61476: LD_VAR 0 1
61480: PUSH
61481: LD_EXP 46
61485: IN
61486: NOT
61487: IFFALSE 61491
// exit ;
61489: GO 61576
// index := GetElementIndex ( hackTanks , hack ) ;
61491: LD_ADDR_VAR 0 5
61495: PUSH
61496: LD_EXP 46
61500: PPUSH
61501: LD_VAR 0 1
61505: PPUSH
61506: CALL 20334 0 2
61510: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61511: LD_ADDR_VAR 0 4
61515: PUSH
61516: DOUBLE
61517: LD_INT 1
61519: DEC
61520: ST_TO_ADDR
61521: LD_EXP 47
61525: PUSH
61526: LD_VAR 0 5
61530: ARRAY
61531: PUSH
61532: FOR_TO
61533: IFFALSE 61574
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61535: LD_EXP 47
61539: PUSH
61540: LD_VAR 0 5
61544: ARRAY
61545: PUSH
61546: LD_VAR 0 4
61550: ARRAY
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: PUSH
61556: LD_VAR 0 2
61560: EQUAL
61561: IFFALSE 61572
// KillUnit ( vehicle ) ;
61563: LD_VAR 0 2
61567: PPUSH
61568: CALL_OW 66
61572: GO 61532
61574: POP
61575: POP
// end ;
61576: LD_VAR 0 3
61580: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61581: LD_EXP 51
61585: NOT
61586: IFFALSE 61621
61588: GO 61590
61590: DISABLE
// begin initMiner := true ;
61591: LD_ADDR_EXP 51
61595: PUSH
61596: LD_INT 1
61598: ST_TO_ADDR
// minersList := [ ] ;
61599: LD_ADDR_EXP 52
61603: PUSH
61604: EMPTY
61605: ST_TO_ADDR
// minerMinesList := [ ] ;
61606: LD_ADDR_EXP 53
61610: PUSH
61611: EMPTY
61612: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61613: LD_ADDR_EXP 54
61617: PUSH
61618: LD_INT 5
61620: ST_TO_ADDR
// end ;
61621: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61622: LD_EXP 51
61626: PUSH
61627: LD_INT 34
61629: PUSH
61630: LD_INT 81
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PPUSH
61637: CALL_OW 69
61641: AND
61642: IFFALSE 62103
61644: GO 61646
61646: DISABLE
61647: LD_INT 0
61649: PPUSH
61650: PPUSH
61651: PPUSH
61652: PPUSH
// begin enable ;
61653: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61654: LD_ADDR_VAR 0 1
61658: PUSH
61659: LD_INT 34
61661: PUSH
61662: LD_INT 81
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PPUSH
61669: CALL_OW 69
61673: PUSH
61674: FOR_IN
61675: IFFALSE 61747
// begin if not i in minersList then
61677: LD_VAR 0 1
61681: PUSH
61682: LD_EXP 52
61686: IN
61687: NOT
61688: IFFALSE 61745
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61690: LD_ADDR_EXP 52
61694: PUSH
61695: LD_EXP 52
61699: PPUSH
61700: LD_EXP 52
61704: PUSH
61705: LD_INT 1
61707: PLUS
61708: PPUSH
61709: LD_VAR 0 1
61713: PPUSH
61714: CALL_OW 1
61718: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61719: LD_ADDR_EXP 53
61723: PUSH
61724: LD_EXP 53
61728: PPUSH
61729: LD_EXP 53
61733: PUSH
61734: LD_INT 1
61736: PLUS
61737: PPUSH
61738: EMPTY
61739: PPUSH
61740: CALL_OW 1
61744: ST_TO_ADDR
// end end ;
61745: GO 61674
61747: POP
61748: POP
// for i := minerMinesList downto 1 do
61749: LD_ADDR_VAR 0 1
61753: PUSH
61754: DOUBLE
61755: LD_EXP 53
61759: INC
61760: ST_TO_ADDR
61761: LD_INT 1
61763: PUSH
61764: FOR_DOWNTO
61765: IFFALSE 62101
// begin if IsLive ( minersList [ i ] ) then
61767: LD_EXP 52
61771: PUSH
61772: LD_VAR 0 1
61776: ARRAY
61777: PPUSH
61778: CALL_OW 300
61782: IFFALSE 61810
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61784: LD_EXP 52
61788: PUSH
61789: LD_VAR 0 1
61793: ARRAY
61794: PPUSH
61795: LD_EXP 53
61799: PUSH
61800: LD_VAR 0 1
61804: ARRAY
61805: PPUSH
61806: CALL_OW 505
// if not minerMinesList [ i ] then
61810: LD_EXP 53
61814: PUSH
61815: LD_VAR 0 1
61819: ARRAY
61820: NOT
61821: IFFALSE 61825
// continue ;
61823: GO 61764
// for j := minerMinesList [ i ] downto 1 do
61825: LD_ADDR_VAR 0 2
61829: PUSH
61830: DOUBLE
61831: LD_EXP 53
61835: PUSH
61836: LD_VAR 0 1
61840: ARRAY
61841: INC
61842: ST_TO_ADDR
61843: LD_INT 1
61845: PUSH
61846: FOR_DOWNTO
61847: IFFALSE 62097
// begin side := GetSide ( minersList [ i ] ) ;
61849: LD_ADDR_VAR 0 3
61853: PUSH
61854: LD_EXP 52
61858: PUSH
61859: LD_VAR 0 1
61863: ARRAY
61864: PPUSH
61865: CALL_OW 255
61869: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61870: LD_ADDR_VAR 0 4
61874: PUSH
61875: LD_EXP 53
61879: PUSH
61880: LD_VAR 0 1
61884: ARRAY
61885: PUSH
61886: LD_VAR 0 2
61890: ARRAY
61891: PUSH
61892: LD_INT 1
61894: ARRAY
61895: PPUSH
61896: LD_EXP 53
61900: PUSH
61901: LD_VAR 0 1
61905: ARRAY
61906: PUSH
61907: LD_VAR 0 2
61911: ARRAY
61912: PUSH
61913: LD_INT 2
61915: ARRAY
61916: PPUSH
61917: CALL_OW 428
61921: ST_TO_ADDR
// if not tmp then
61922: LD_VAR 0 4
61926: NOT
61927: IFFALSE 61931
// continue ;
61929: GO 61846
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61931: LD_VAR 0 4
61935: PUSH
61936: LD_INT 81
61938: PUSH
61939: LD_VAR 0 3
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PPUSH
61948: CALL_OW 69
61952: IN
61953: PUSH
61954: LD_EXP 53
61958: PUSH
61959: LD_VAR 0 1
61963: ARRAY
61964: PUSH
61965: LD_VAR 0 2
61969: ARRAY
61970: PUSH
61971: LD_INT 1
61973: ARRAY
61974: PPUSH
61975: LD_EXP 53
61979: PUSH
61980: LD_VAR 0 1
61984: ARRAY
61985: PUSH
61986: LD_VAR 0 2
61990: ARRAY
61991: PUSH
61992: LD_INT 2
61994: ARRAY
61995: PPUSH
61996: CALL_OW 458
62000: AND
62001: IFFALSE 62095
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62003: LD_EXP 53
62007: PUSH
62008: LD_VAR 0 1
62012: ARRAY
62013: PUSH
62014: LD_VAR 0 2
62018: ARRAY
62019: PUSH
62020: LD_INT 1
62022: ARRAY
62023: PPUSH
62024: LD_EXP 53
62028: PUSH
62029: LD_VAR 0 1
62033: ARRAY
62034: PUSH
62035: LD_VAR 0 2
62039: ARRAY
62040: PUSH
62041: LD_INT 2
62043: ARRAY
62044: PPUSH
62045: LD_VAR 0 3
62049: PPUSH
62050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62054: LD_ADDR_EXP 53
62058: PUSH
62059: LD_EXP 53
62063: PPUSH
62064: LD_VAR 0 1
62068: PPUSH
62069: LD_EXP 53
62073: PUSH
62074: LD_VAR 0 1
62078: ARRAY
62079: PPUSH
62080: LD_VAR 0 2
62084: PPUSH
62085: CALL_OW 3
62089: PPUSH
62090: CALL_OW 1
62094: ST_TO_ADDR
// end ; end ;
62095: GO 61846
62097: POP
62098: POP
// end ;
62099: GO 61764
62101: POP
62102: POP
// end ;
62103: PPOPN 4
62105: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62106: LD_INT 0
62108: PPUSH
62109: PPUSH
// result := false ;
62110: LD_ADDR_VAR 0 4
62114: PUSH
62115: LD_INT 0
62117: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62118: LD_VAR 0 1
62122: PPUSH
62123: CALL_OW 264
62127: PUSH
62128: LD_INT 81
62130: EQUAL
62131: NOT
62132: IFFALSE 62136
// exit ;
62134: GO 62376
// index := GetElementIndex ( minersList , unit ) ;
62136: LD_ADDR_VAR 0 5
62140: PUSH
62141: LD_EXP 52
62145: PPUSH
62146: LD_VAR 0 1
62150: PPUSH
62151: CALL 20334 0 2
62155: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62156: LD_EXP 53
62160: PUSH
62161: LD_VAR 0 5
62165: ARRAY
62166: PUSH
62167: LD_EXP 54
62171: GREATEREQUAL
62172: IFFALSE 62176
// exit ;
62174: GO 62376
// ComMoveXY ( unit , x , y ) ;
62176: LD_VAR 0 1
62180: PPUSH
62181: LD_VAR 0 2
62185: PPUSH
62186: LD_VAR 0 3
62190: PPUSH
62191: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62195: LD_INT 35
62197: PPUSH
62198: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62202: LD_VAR 0 1
62206: PPUSH
62207: LD_VAR 0 2
62211: PPUSH
62212: LD_VAR 0 3
62216: PPUSH
62217: CALL 52095 0 3
62221: NOT
62222: PUSH
62223: LD_VAR 0 1
62227: PPUSH
62228: CALL_OW 314
62232: AND
62233: IFFALSE 62237
// exit ;
62235: GO 62376
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62237: LD_VAR 0 2
62241: PPUSH
62242: LD_VAR 0 3
62246: PPUSH
62247: CALL_OW 428
62251: PUSH
62252: LD_VAR 0 1
62256: EQUAL
62257: PUSH
62258: LD_VAR 0 1
62262: PPUSH
62263: CALL_OW 314
62267: NOT
62268: AND
62269: IFFALSE 62195
// PlaySoundXY ( x , y , PlantMine ) ;
62271: LD_VAR 0 2
62275: PPUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: LD_STRING PlantMine
62283: PPUSH
62284: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62288: LD_VAR 0 2
62292: PPUSH
62293: LD_VAR 0 3
62297: PPUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 255
62307: PPUSH
62308: LD_INT 0
62310: PPUSH
62311: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62315: LD_ADDR_EXP 53
62319: PUSH
62320: LD_EXP 53
62324: PPUSH
62325: LD_VAR 0 5
62329: PUSH
62330: LD_EXP 53
62334: PUSH
62335: LD_VAR 0 5
62339: ARRAY
62340: PUSH
62341: LD_INT 1
62343: PLUS
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PPUSH
62349: LD_VAR 0 2
62353: PUSH
62354: LD_VAR 0 3
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PPUSH
62363: CALL 20549 0 3
62367: ST_TO_ADDR
// result := true ;
62368: LD_ADDR_VAR 0 4
62372: PUSH
62373: LD_INT 1
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 4
62380: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62381: LD_INT 0
62383: PPUSH
62384: PPUSH
62385: PPUSH
// if not unit in minersList then
62386: LD_VAR 0 1
62390: PUSH
62391: LD_EXP 52
62395: IN
62396: NOT
62397: IFFALSE 62401
// exit ;
62399: GO 62793
// index := GetElementIndex ( minersList , unit ) ;
62401: LD_ADDR_VAR 0 6
62405: PUSH
62406: LD_EXP 52
62410: PPUSH
62411: LD_VAR 0 1
62415: PPUSH
62416: CALL 20334 0 2
62420: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62421: LD_ADDR_VAR 0 5
62425: PUSH
62426: DOUBLE
62427: LD_EXP 53
62431: PUSH
62432: LD_VAR 0 6
62436: ARRAY
62437: INC
62438: ST_TO_ADDR
62439: LD_INT 1
62441: PUSH
62442: FOR_DOWNTO
62443: IFFALSE 62604
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62445: LD_EXP 53
62449: PUSH
62450: LD_VAR 0 6
62454: ARRAY
62455: PUSH
62456: LD_VAR 0 5
62460: ARRAY
62461: PUSH
62462: LD_INT 1
62464: ARRAY
62465: PUSH
62466: LD_VAR 0 2
62470: EQUAL
62471: PUSH
62472: LD_EXP 53
62476: PUSH
62477: LD_VAR 0 6
62481: ARRAY
62482: PUSH
62483: LD_VAR 0 5
62487: ARRAY
62488: PUSH
62489: LD_INT 2
62491: ARRAY
62492: PUSH
62493: LD_VAR 0 3
62497: EQUAL
62498: AND
62499: IFFALSE 62602
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62501: LD_EXP 53
62505: PUSH
62506: LD_VAR 0 6
62510: ARRAY
62511: PUSH
62512: LD_VAR 0 5
62516: ARRAY
62517: PUSH
62518: LD_INT 1
62520: ARRAY
62521: PPUSH
62522: LD_EXP 53
62526: PUSH
62527: LD_VAR 0 6
62531: ARRAY
62532: PUSH
62533: LD_VAR 0 5
62537: ARRAY
62538: PUSH
62539: LD_INT 2
62541: ARRAY
62542: PPUSH
62543: LD_VAR 0 1
62547: PPUSH
62548: CALL_OW 255
62552: PPUSH
62553: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62557: LD_ADDR_EXP 53
62561: PUSH
62562: LD_EXP 53
62566: PPUSH
62567: LD_VAR 0 6
62571: PPUSH
62572: LD_EXP 53
62576: PUSH
62577: LD_VAR 0 6
62581: ARRAY
62582: PPUSH
62583: LD_VAR 0 5
62587: PPUSH
62588: CALL_OW 3
62592: PPUSH
62593: CALL_OW 1
62597: ST_TO_ADDR
// exit ;
62598: POP
62599: POP
62600: GO 62793
// end ; end ;
62602: GO 62442
62604: POP
62605: POP
// for i := minerMinesList [ index ] downto 1 do
62606: LD_ADDR_VAR 0 5
62610: PUSH
62611: DOUBLE
62612: LD_EXP 53
62616: PUSH
62617: LD_VAR 0 6
62621: ARRAY
62622: INC
62623: ST_TO_ADDR
62624: LD_INT 1
62626: PUSH
62627: FOR_DOWNTO
62628: IFFALSE 62791
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62630: LD_EXP 53
62634: PUSH
62635: LD_VAR 0 6
62639: ARRAY
62640: PUSH
62641: LD_VAR 0 5
62645: ARRAY
62646: PUSH
62647: LD_INT 1
62649: ARRAY
62650: PPUSH
62651: LD_EXP 53
62655: PUSH
62656: LD_VAR 0 6
62660: ARRAY
62661: PUSH
62662: LD_VAR 0 5
62666: ARRAY
62667: PUSH
62668: LD_INT 2
62670: ARRAY
62671: PPUSH
62672: LD_VAR 0 2
62676: PPUSH
62677: LD_VAR 0 3
62681: PPUSH
62682: CALL_OW 298
62686: PUSH
62687: LD_INT 6
62689: LESS
62690: IFFALSE 62789
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62692: LD_EXP 53
62696: PUSH
62697: LD_VAR 0 6
62701: ARRAY
62702: PUSH
62703: LD_VAR 0 5
62707: ARRAY
62708: PUSH
62709: LD_INT 1
62711: ARRAY
62712: PPUSH
62713: LD_EXP 53
62717: PUSH
62718: LD_VAR 0 6
62722: ARRAY
62723: PUSH
62724: LD_VAR 0 5
62728: ARRAY
62729: PUSH
62730: LD_INT 2
62732: ARRAY
62733: PPUSH
62734: LD_VAR 0 1
62738: PPUSH
62739: CALL_OW 255
62743: PPUSH
62744: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62748: LD_ADDR_EXP 53
62752: PUSH
62753: LD_EXP 53
62757: PPUSH
62758: LD_VAR 0 6
62762: PPUSH
62763: LD_EXP 53
62767: PUSH
62768: LD_VAR 0 6
62772: ARRAY
62773: PPUSH
62774: LD_VAR 0 5
62778: PPUSH
62779: CALL_OW 3
62783: PPUSH
62784: CALL_OW 1
62788: ST_TO_ADDR
// end ; end ;
62789: GO 62627
62791: POP
62792: POP
// end ;
62793: LD_VAR 0 4
62797: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62798: LD_INT 0
62800: PPUSH
62801: PPUSH
62802: PPUSH
62803: PPUSH
62804: PPUSH
62805: PPUSH
62806: PPUSH
62807: PPUSH
62808: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62809: LD_VAR 0 1
62813: PPUSH
62814: CALL_OW 264
62818: PUSH
62819: LD_INT 81
62821: EQUAL
62822: NOT
62823: PUSH
62824: LD_VAR 0 1
62828: PUSH
62829: LD_EXP 52
62833: IN
62834: NOT
62835: OR
62836: IFFALSE 62840
// exit ;
62838: GO 63162
// index := GetElementIndex ( minersList , unit ) ;
62840: LD_ADDR_VAR 0 6
62844: PUSH
62845: LD_EXP 52
62849: PPUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: CALL 20334 0 2
62859: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62860: LD_ADDR_VAR 0 8
62864: PUSH
62865: LD_EXP 54
62869: PUSH
62870: LD_EXP 53
62874: PUSH
62875: LD_VAR 0 6
62879: ARRAY
62880: MINUS
62881: ST_TO_ADDR
// if not minesFreeAmount then
62882: LD_VAR 0 8
62886: NOT
62887: IFFALSE 62891
// exit ;
62889: GO 63162
// tmp := [ ] ;
62891: LD_ADDR_VAR 0 7
62895: PUSH
62896: EMPTY
62897: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62898: LD_ADDR_VAR 0 5
62902: PUSH
62903: DOUBLE
62904: LD_INT 1
62906: DEC
62907: ST_TO_ADDR
62908: LD_VAR 0 8
62912: PUSH
62913: FOR_TO
62914: IFFALSE 63109
// begin _d := rand ( 0 , 5 ) ;
62916: LD_ADDR_VAR 0 11
62920: PUSH
62921: LD_INT 0
62923: PPUSH
62924: LD_INT 5
62926: PPUSH
62927: CALL_OW 12
62931: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62932: LD_ADDR_VAR 0 12
62936: PUSH
62937: LD_INT 2
62939: PPUSH
62940: LD_INT 6
62942: PPUSH
62943: CALL_OW 12
62947: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62948: LD_ADDR_VAR 0 9
62952: PUSH
62953: LD_VAR 0 2
62957: PPUSH
62958: LD_VAR 0 11
62962: PPUSH
62963: LD_VAR 0 12
62967: PPUSH
62968: CALL_OW 272
62972: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62973: LD_ADDR_VAR 0 10
62977: PUSH
62978: LD_VAR 0 3
62982: PPUSH
62983: LD_VAR 0 11
62987: PPUSH
62988: LD_VAR 0 12
62992: PPUSH
62993: CALL_OW 273
62997: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62998: LD_VAR 0 9
63002: PPUSH
63003: LD_VAR 0 10
63007: PPUSH
63008: CALL_OW 488
63012: PUSH
63013: LD_VAR 0 9
63017: PUSH
63018: LD_VAR 0 10
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_VAR 0 7
63031: IN
63032: NOT
63033: AND
63034: PUSH
63035: LD_VAR 0 9
63039: PPUSH
63040: LD_VAR 0 10
63044: PPUSH
63045: CALL_OW 458
63049: NOT
63050: AND
63051: IFFALSE 63093
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63053: LD_ADDR_VAR 0 7
63057: PUSH
63058: LD_VAR 0 7
63062: PPUSH
63063: LD_VAR 0 7
63067: PUSH
63068: LD_INT 1
63070: PLUS
63071: PPUSH
63072: LD_VAR 0 9
63076: PUSH
63077: LD_VAR 0 10
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PPUSH
63086: CALL_OW 1
63090: ST_TO_ADDR
63091: GO 63107
// i := i - 1 ;
63093: LD_ADDR_VAR 0 5
63097: PUSH
63098: LD_VAR 0 5
63102: PUSH
63103: LD_INT 1
63105: MINUS
63106: ST_TO_ADDR
// end ;
63107: GO 62913
63109: POP
63110: POP
// for i in tmp do
63111: LD_ADDR_VAR 0 5
63115: PUSH
63116: LD_VAR 0 7
63120: PUSH
63121: FOR_IN
63122: IFFALSE 63160
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63124: LD_VAR 0 1
63128: PPUSH
63129: LD_VAR 0 5
63133: PUSH
63134: LD_INT 1
63136: ARRAY
63137: PPUSH
63138: LD_VAR 0 5
63142: PUSH
63143: LD_INT 2
63145: ARRAY
63146: PPUSH
63147: CALL 62106 0 3
63151: NOT
63152: IFFALSE 63158
// exit ;
63154: POP
63155: POP
63156: GO 63162
63158: GO 63121
63160: POP
63161: POP
// end ;
63162: LD_VAR 0 4
63166: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
63167: LD_INT 0
63169: PPUSH
63170: PPUSH
63171: PPUSH
63172: PPUSH
63173: PPUSH
63174: PPUSH
63175: PPUSH
63176: PPUSH
63177: PPUSH
// if GetClass ( unit ) <> class_sniper then
63178: LD_VAR 0 1
63182: PPUSH
63183: CALL_OW 257
63187: PUSH
63188: LD_INT 5
63190: NONEQUAL
63191: IFFALSE 63195
// exit ;
63193: GO 63661
// dist := 8 ;
63195: LD_ADDR_VAR 0 5
63199: PUSH
63200: LD_INT 8
63202: ST_TO_ADDR
// viewRange := 12 ;
63203: LD_ADDR_VAR 0 8
63207: PUSH
63208: LD_INT 12
63210: ST_TO_ADDR
// side := GetSide ( unit ) ;
63211: LD_ADDR_VAR 0 6
63215: PUSH
63216: LD_VAR 0 1
63220: PPUSH
63221: CALL_OW 255
63225: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63226: LD_INT 61
63228: PPUSH
63229: LD_VAR 0 6
63233: PPUSH
63234: CALL_OW 321
63238: PUSH
63239: LD_INT 2
63241: EQUAL
63242: IFFALSE 63252
// viewRange := 16 ;
63244: LD_ADDR_VAR 0 8
63248: PUSH
63249: LD_INT 16
63251: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63252: LD_VAR 0 1
63256: PPUSH
63257: LD_VAR 0 2
63261: PPUSH
63262: LD_VAR 0 3
63266: PPUSH
63267: CALL_OW 297
63271: PUSH
63272: LD_VAR 0 5
63276: GREATER
63277: IFFALSE 63356
// begin ComMoveXY ( unit , x , y ) ;
63279: LD_VAR 0 1
63283: PPUSH
63284: LD_VAR 0 2
63288: PPUSH
63289: LD_VAR 0 3
63293: PPUSH
63294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63298: LD_INT 35
63300: PPUSH
63301: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63305: LD_VAR 0 1
63309: PPUSH
63310: LD_VAR 0 2
63314: PPUSH
63315: LD_VAR 0 3
63319: PPUSH
63320: CALL 52095 0 3
63324: NOT
63325: IFFALSE 63329
// exit ;
63327: GO 63661
// until GetDistUnitXY ( unit , x , y ) < dist ;
63329: LD_VAR 0 1
63333: PPUSH
63334: LD_VAR 0 2
63338: PPUSH
63339: LD_VAR 0 3
63343: PPUSH
63344: CALL_OW 297
63348: PUSH
63349: LD_VAR 0 5
63353: LESS
63354: IFFALSE 63298
// end ; ComTurnXY ( unit , x , y ) ;
63356: LD_VAR 0 1
63360: PPUSH
63361: LD_VAR 0 2
63365: PPUSH
63366: LD_VAR 0 3
63370: PPUSH
63371: CALL_OW 118
// repeat if Multiplayer then
63375: LD_OWVAR 4
63379: IFFALSE 63390
// wait ( 35 ) else
63381: LD_INT 35
63383: PPUSH
63384: CALL_OW 67
63388: GO 63397
// wait ( 5 ) ;
63390: LD_INT 5
63392: PPUSH
63393: CALL_OW 67
// _d := GetDir ( unit ) ;
63397: LD_ADDR_VAR 0 11
63401: PUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: CALL_OW 254
63411: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
63412: LD_ADDR_VAR 0 7
63416: PUSH
63417: LD_VAR 0 1
63421: PPUSH
63422: CALL_OW 250
63426: PPUSH
63427: LD_VAR 0 1
63431: PPUSH
63432: CALL_OW 251
63436: PPUSH
63437: LD_VAR 0 2
63441: PPUSH
63442: LD_VAR 0 3
63446: PPUSH
63447: CALL 54703 0 4
63451: ST_TO_ADDR
// until dir = _d ;
63452: LD_VAR 0 7
63456: PUSH
63457: LD_VAR 0 11
63461: EQUAL
63462: IFFALSE 63375
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
63464: LD_ADDR_VAR 0 9
63468: PUSH
63469: LD_VAR 0 1
63473: PPUSH
63474: CALL_OW 250
63478: PPUSH
63479: LD_VAR 0 7
63483: PPUSH
63484: LD_VAR 0 5
63488: PPUSH
63489: CALL_OW 272
63493: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63494: LD_ADDR_VAR 0 10
63498: PUSH
63499: LD_VAR 0 1
63503: PPUSH
63504: CALL_OW 251
63508: PPUSH
63509: LD_VAR 0 7
63513: PPUSH
63514: LD_VAR 0 5
63518: PPUSH
63519: CALL_OW 273
63523: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63524: LD_VAR 0 9
63528: PPUSH
63529: LD_VAR 0 10
63533: PPUSH
63534: CALL_OW 488
63538: NOT
63539: IFFALSE 63543
// exit ;
63541: GO 63661
// ComAnimCustom ( unit , 1 ) ;
63543: LD_VAR 0 1
63547: PPUSH
63548: LD_INT 1
63550: PPUSH
63551: CALL_OW 592
// p := 0 ;
63555: LD_ADDR_VAR 0 12
63559: PUSH
63560: LD_INT 0
63562: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63563: LD_VAR 0 9
63567: PPUSH
63568: LD_VAR 0 10
63572: PPUSH
63573: LD_VAR 0 6
63577: PPUSH
63578: LD_VAR 0 8
63582: PPUSH
63583: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63587: LD_INT 35
63589: PPUSH
63590: CALL_OW 67
// p := Inc ( p ) ;
63594: LD_ADDR_VAR 0 12
63598: PUSH
63599: LD_VAR 0 12
63603: PPUSH
63604: CALL 54659 0 1
63608: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63609: LD_VAR 0 12
63613: PUSH
63614: LD_INT 3
63616: EQUAL
63617: PUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: CALL_OW 302
63627: NOT
63628: OR
63629: PUSH
63630: LD_VAR 0 1
63634: PPUSH
63635: CALL_OW 301
63639: OR
63640: IFFALSE 63587
// RemoveSeeing ( _x , _y , side ) ;
63642: LD_VAR 0 9
63646: PPUSH
63647: LD_VAR 0 10
63651: PPUSH
63652: LD_VAR 0 6
63656: PPUSH
63657: CALL_OW 331
// end ; end_of_file end_of_file
63661: LD_VAR 0 4
63665: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63666: PPOPN 6
63668: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63669: CALL 63698 0 0
// end ; end_of_file
63673: PPOPN 1
63675: END
// every 0 0$1 do
63676: GO 63678
63678: DISABLE
// begin enable ;
63679: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63680: LD_STRING updateTimer(
63682: PUSH
63683: LD_OWVAR 1
63687: STR
63688: PUSH
63689: LD_STRING );
63691: STR
63692: PPUSH
63693: CALL_OW 559
// end ;
63697: END
// export function SOS_MapStart ( ) ; begin
63698: LD_INT 0
63700: PPUSH
// UpdateFactoryWaypoints ( ) ;
63701: CALL 64070 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63705: CALL 64322 0 0
// end ;
63709: LD_VAR 0 1
63713: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63714: LD_INT 0
63716: PPUSH
// end ;
63717: LD_VAR 0 12
63721: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63722: LD_INT 0
63724: PPUSH
63725: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63726: LD_VAR 0 1
63730: NOT
63731: PUSH
63732: LD_VAR 0 2
63736: PPUSH
63737: LD_VAR 0 3
63741: PPUSH
63742: CALL_OW 488
63746: NOT
63747: OR
63748: PUSH
63749: LD_VAR 0 1
63753: PPUSH
63754: CALL_OW 266
63758: PUSH
63759: LD_INT 3
63761: NONEQUAL
63762: PUSH
63763: LD_VAR 0 1
63767: PPUSH
63768: CALL_OW 247
63772: PUSH
63773: LD_INT 1
63775: EQUAL
63776: NOT
63777: AND
63778: OR
63779: IFFALSE 63783
// exit ;
63781: GO 64065
// if GetType ( factory ) = unit_human then
63783: LD_VAR 0 1
63787: PPUSH
63788: CALL_OW 247
63792: PUSH
63793: LD_INT 1
63795: EQUAL
63796: IFFALSE 63813
// factory := IsInUnit ( factory ) ;
63798: LD_ADDR_VAR 0 1
63802: PUSH
63803: LD_VAR 0 1
63807: PPUSH
63808: CALL_OW 310
63812: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63813: LD_VAR 0 1
63817: PPUSH
63818: CALL_OW 266
63822: PUSH
63823: LD_INT 3
63825: NONEQUAL
63826: IFFALSE 63830
// exit ;
63828: GO 64065
// for i := 1 to Count ( factoryWaypoints ) do
63830: LD_ADDR_VAR 0 5
63834: PUSH
63835: DOUBLE
63836: LD_INT 1
63838: DEC
63839: ST_TO_ADDR
63840: LD_EXP 55
63844: PPUSH
63845: CALL 17689 0 1
63849: PUSH
63850: FOR_TO
63851: IFFALSE 64013
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63853: LD_VAR 0 2
63857: PPUSH
63858: LD_VAR 0 3
63862: PPUSH
63863: CALL_OW 428
63867: PUSH
63868: LD_EXP 55
63872: PUSH
63873: LD_VAR 0 5
63877: ARRAY
63878: PUSH
63879: LD_INT 2
63881: ARRAY
63882: EQUAL
63883: IFFALSE 63915
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63885: LD_ADDR_EXP 55
63889: PUSH
63890: LD_EXP 55
63894: PPUSH
63895: LD_VAR 0 5
63899: PPUSH
63900: CALL_OW 3
63904: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63905: CALL 64070 0 0
// exit ;
63909: POP
63910: POP
63911: GO 64065
// end else
63913: GO 64011
// if factory = factoryWaypoints [ i ] [ 2 ] then
63915: LD_VAR 0 1
63919: PUSH
63920: LD_EXP 55
63924: PUSH
63925: LD_VAR 0 5
63929: ARRAY
63930: PUSH
63931: LD_INT 2
63933: ARRAY
63934: EQUAL
63935: IFFALSE 64011
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63937: LD_ADDR_EXP 55
63941: PUSH
63942: LD_EXP 55
63946: PPUSH
63947: LD_VAR 0 5
63951: PPUSH
63952: CALL_OW 3
63956: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63957: LD_ADDR_EXP 55
63961: PUSH
63962: LD_EXP 55
63966: PPUSH
63967: LD_VAR 0 1
63971: PPUSH
63972: CALL_OW 255
63976: PUSH
63977: LD_VAR 0 1
63981: PUSH
63982: LD_VAR 0 2
63986: PUSH
63987: LD_VAR 0 3
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: PPUSH
63998: CALL 53298 0 2
64002: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64003: CALL 64070 0 0
// exit ;
64007: POP
64008: POP
64009: GO 64065
// end ; end ;
64011: GO 63850
64013: POP
64014: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64015: LD_ADDR_EXP 55
64019: PUSH
64020: LD_EXP 55
64024: PPUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 255
64034: PUSH
64035: LD_VAR 0 1
64039: PUSH
64040: LD_VAR 0 2
64044: PUSH
64045: LD_VAR 0 3
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: PPUSH
64056: CALL 53298 0 2
64060: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64061: CALL 64070 0 0
// end ;
64065: LD_VAR 0 4
64069: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64070: LD_INT 0
64072: PPUSH
64073: PPUSH
64074: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64075: LD_STRING resetFactoryWaypoint();
64077: PPUSH
64078: CALL_OW 559
// if factoryWaypoints then
64082: LD_EXP 55
64086: IFFALSE 64207
// begin list := factoryWaypoints ;
64088: LD_ADDR_VAR 0 3
64092: PUSH
64093: LD_EXP 55
64097: ST_TO_ADDR
// for i := 1 to list do
64098: LD_ADDR_VAR 0 2
64102: PUSH
64103: DOUBLE
64104: LD_INT 1
64106: DEC
64107: ST_TO_ADDR
64108: LD_VAR 0 3
64112: PUSH
64113: FOR_TO
64114: IFFALSE 64205
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64116: LD_STRING setFactoryWaypointXY(
64118: PUSH
64119: LD_VAR 0 3
64123: PUSH
64124: LD_VAR 0 2
64128: ARRAY
64129: PUSH
64130: LD_INT 1
64132: ARRAY
64133: STR
64134: PUSH
64135: LD_STRING ,
64137: STR
64138: PUSH
64139: LD_VAR 0 3
64143: PUSH
64144: LD_VAR 0 2
64148: ARRAY
64149: PUSH
64150: LD_INT 2
64152: ARRAY
64153: STR
64154: PUSH
64155: LD_STRING ,
64157: STR
64158: PUSH
64159: LD_VAR 0 3
64163: PUSH
64164: LD_VAR 0 2
64168: ARRAY
64169: PUSH
64170: LD_INT 3
64172: ARRAY
64173: STR
64174: PUSH
64175: LD_STRING ,
64177: STR
64178: PUSH
64179: LD_VAR 0 3
64183: PUSH
64184: LD_VAR 0 2
64188: ARRAY
64189: PUSH
64190: LD_INT 4
64192: ARRAY
64193: STR
64194: PUSH
64195: LD_STRING )
64197: STR
64198: PPUSH
64199: CALL_OW 559
64203: GO 64113
64205: POP
64206: POP
// end ; end ;
64207: LD_VAR 0 1
64211: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64212: LD_INT 0
64214: PPUSH
// if HexInfo ( x , y ) = warehouse then
64215: LD_VAR 0 2
64219: PPUSH
64220: LD_VAR 0 3
64224: PPUSH
64225: CALL_OW 428
64229: PUSH
64230: LD_VAR 0 1
64234: EQUAL
64235: IFFALSE 64262
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64237: LD_ADDR_EXP 56
64241: PUSH
64242: LD_EXP 56
64246: PPUSH
64247: LD_VAR 0 1
64251: PPUSH
64252: LD_INT 0
64254: PPUSH
64255: CALL_OW 1
64259: ST_TO_ADDR
64260: GO 64313
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64262: LD_ADDR_EXP 56
64266: PUSH
64267: LD_EXP 56
64271: PPUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: LD_VAR 0 1
64281: PPUSH
64282: CALL_OW 255
64286: PUSH
64287: LD_VAR 0 1
64291: PUSH
64292: LD_VAR 0 2
64296: PUSH
64297: LD_VAR 0 3
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: PPUSH
64308: CALL_OW 1
64312: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64313: CALL 64322 0 0
// end ;
64317: LD_VAR 0 4
64321: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64322: LD_INT 0
64324: PPUSH
64325: PPUSH
64326: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64327: LD_STRING resetWarehouseGatheringPoints();
64329: PPUSH
64330: CALL_OW 559
// if warehouseGatheringPoints then
64334: LD_EXP 56
64338: IFFALSE 64464
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64340: LD_ADDR_VAR 0 3
64344: PUSH
64345: LD_EXP 56
64349: PPUSH
64350: CALL 57060 0 1
64354: ST_TO_ADDR
// for i := 1 to list do
64355: LD_ADDR_VAR 0 2
64359: PUSH
64360: DOUBLE
64361: LD_INT 1
64363: DEC
64364: ST_TO_ADDR
64365: LD_VAR 0 3
64369: PUSH
64370: FOR_TO
64371: IFFALSE 64462
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64373: LD_STRING setWarehouseGatheringPointXY(
64375: PUSH
64376: LD_VAR 0 3
64380: PUSH
64381: LD_VAR 0 2
64385: ARRAY
64386: PUSH
64387: LD_INT 1
64389: ARRAY
64390: STR
64391: PUSH
64392: LD_STRING ,
64394: STR
64395: PUSH
64396: LD_VAR 0 3
64400: PUSH
64401: LD_VAR 0 2
64405: ARRAY
64406: PUSH
64407: LD_INT 2
64409: ARRAY
64410: STR
64411: PUSH
64412: LD_STRING ,
64414: STR
64415: PUSH
64416: LD_VAR 0 3
64420: PUSH
64421: LD_VAR 0 2
64425: ARRAY
64426: PUSH
64427: LD_INT 3
64429: ARRAY
64430: STR
64431: PUSH
64432: LD_STRING ,
64434: STR
64435: PUSH
64436: LD_VAR 0 3
64440: PUSH
64441: LD_VAR 0 2
64445: ARRAY
64446: PUSH
64447: LD_INT 4
64449: ARRAY
64450: STR
64451: PUSH
64452: LD_STRING )
64454: STR
64455: PPUSH
64456: CALL_OW 559
64460: GO 64370
64462: POP
64463: POP
// end ; end ;
64464: LD_VAR 0 1
64468: RET
