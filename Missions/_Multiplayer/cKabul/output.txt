// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5904 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7271 0 1
  44: PPUSH
  45: CALL 135 0 1
// Multiplayer_Start ;
  49: CALL 9229 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9345 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: IFFALSE 118
 111: PUSH
 112: LD_OWVAR 48
 116: NOT
 117: AND
 118: IFFALSE 134
 120: GO 122
 122: DISABLE
// begin enable ;
 123: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 124: LD_ADDR_OWVAR 47
 128: PUSH
 129: CALL 9977 0 0
 133: ST_TO_ADDR
// end ; end_of_file
 134: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 135: LD_INT 0
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
 144: PPUSH
 145: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 146: LD_ADDR_EXP 5
 150: PUSH
 151: LD_VAR 0 1
 155: PPUSH
 156: LD_INT 2
 158: PPUSH
 159: LD_INT 1
 161: PPUSH
 162: CALL 15841 0 3
 166: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 167: LD_ADDR_EXP 6
 171: PUSH
 172: LD_INT 13
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: LD_INT 27
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 13
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 13
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 28
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 13
 228: PUSH
 229: LD_INT 1
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 25
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: LD_INT 13
 246: PUSH
 247: LD_INT 1
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 27
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// arBuildings := [ ] ;
 269: LD_ADDR_EXP 7
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// arVehicles := [ ] ;
 276: LD_ADDR_EXP 8
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 283: LD_ADDR_EXP 9
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// arRVehicles := [ ] ;
 290: LD_ADDR_EXP 16
 294: PUSH
 295: EMPTY
 296: ST_TO_ADDR
// arDrivers := [ ] ;
 297: LD_ADDR_EXP 10
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 304: LD_ADDR_EXP 12
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// arMinesList := [ ] ;
 312: LD_ADDR_EXP 13
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 319: LD_ADDR_EXP 11
 323: PUSH
 324: LD_INT 8
 326: PUSH
 327: LD_INT 11
 329: PUSH
 330: LD_INT 12
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PUSH
 338: LD_OWVAR 67
 342: ARRAY
 343: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 3
 351: PPUSH
 352: CALL 58947 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 356: LD_INT 4
 358: PPUSH
 359: LD_INT 24
 361: PUSH
 362: LD_INT 36
 364: PUSH
 365: LD_INT 48
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_OWVAR 67
 377: ARRAY
 378: PPUSH
 379: CALL 987 0 2
// PlaceMines ( extraMinefield , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 383: LD_INT 24
 385: PPUSH
 386: LD_INT 6
 388: PUSH
 389: LD_INT 8
 391: PUSH
 392: LD_INT 10
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: PPUSH
 406: CALL 987 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 410: LD_ADDR_VAR 0 8
 414: PUSH
 415: LD_INT 3
 417: PUSH
 418: LD_INT 5
 420: PUSH
 421: LD_INT 7
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: LIST
 428: PUSH
 429: LD_OWVAR 67
 433: ARRAY
 434: ST_TO_ADDR
// uc_side := side ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_VAR 0 1
 444: ST_TO_ADDR
// uc_nation := 2 ;
 445: LD_ADDR_OWVAR 21
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 8000 , 1200 , 400 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 453: LD_ADDR_EXP 14
 457: PUSH
 458: LD_INT 2
 460: PPUSH
 461: LD_INT 1
 463: PPUSH
 464: LD_STRING 
 466: PPUSH
 467: LD_VAR 0 8
 471: PPUSH
 472: LD_INT 8000
 474: PUSH
 475: LD_INT 1200
 477: PUSH
 478: LD_INT 400
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PPUSH
 486: LD_INT 10
 488: PUSH
 489: LD_INT 11
 491: PUSH
 492: LD_INT 12
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: PUSH
 500: LD_OWVAR 67
 504: ARRAY
 505: PUSH
 506: LD_INT 4
 508: PUSH
 509: LD_INT 6
 511: PUSH
 512: LD_INT 3
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: PPUSH
 521: CALL 24493 0 6
 525: ST_TO_ADDR
// arForceTmp := [ ] ;
 526: LD_ADDR_EXP 15
 530: PUSH
 531: EMPTY
 532: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_INT 22
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 30
 552: PUSH
 553: LD_INT 31
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 95
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 58
 579: PUSH
 580: EMPTY
 581: LIST
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: PPUSH
 589: CALL_OW 69
 593: PUSH
 594: FOR_IN
 595: IFFALSE 724
// begin d := GetDir ( i ) ;
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: LD_VAR 0 3
 606: PPUSH
 607: CALL_OW 254
 611: ST_TO_ADDR
// if d < 3 then
 612: LD_VAR 0 4
 616: PUSH
 617: LD_INT 3
 619: LESS
 620: IFFALSE 638
// d := d + 3 else
 622: LD_ADDR_VAR 0 4
 626: PUSH
 627: LD_VAR 0 4
 631: PUSH
 632: LD_INT 3
 634: PLUS
 635: ST_TO_ADDR
 636: GO 652
// d := d - 3 ;
 638: LD_ADDR_VAR 0 4
 642: PUSH
 643: LD_VAR 0 4
 647: PUSH
 648: LD_INT 3
 650: MINUS
 651: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_VAR 0 8
 659: PPUSH
 660: CALL_OW 381
// un := CreateHuman ;
 664: LD_ADDR_VAR 0 6
 668: PUSH
 669: CALL_OW 44
 673: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 674: LD_ADDR_EXP 15
 678: PUSH
 679: LD_EXP 15
 683: PPUSH
 684: LD_VAR 0 6
 688: PPUSH
 689: CALL 53826 0 2
 693: ST_TO_ADDR
// SetDir ( un , d ) ;
 694: LD_VAR 0 6
 698: PPUSH
 699: LD_VAR 0 4
 703: PPUSH
 704: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 708: LD_VAR 0 6
 712: PPUSH
 713: LD_VAR 0 3
 717: PPUSH
 718: CALL_OW 52
// end ;
 722: GO 594
 724: POP
 725: POP
// for i := 1 to 2 do
 726: LD_ADDR_VAR 0 3
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_INT 2
 738: PUSH
 739: FOR_TO
 740: IFFALSE 824
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 742: LD_INT 14
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_INT 31
 753: PPUSH
 754: LD_INT 100
 756: PPUSH
 757: CALL 20656 0 5
// un := CreateVehicle ;
 761: LD_ADDR_VAR 0 6
 765: PUSH
 766: CALL_OW 45
 770: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 771: LD_VAR 0 6
 775: PPUSH
 776: LD_INT 102
 778: PPUSH
 779: LD_INT 31
 781: PPUSH
 782: LD_INT 6
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 792: LD_INT 0
 794: PPUSH
 795: LD_VAR 0 8
 799: PUSH
 800: LD_INT 2
 802: PLUS
 803: PPUSH
 804: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 808: CALL_OW 44
 812: PPUSH
 813: LD_VAR 0 6
 817: PPUSH
 818: CALL_OW 52
// end ;
 822: GO 739
 824: POP
 825: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_INT 22
 833: PUSH
 834: LD_VAR 0 1
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 21
 845: PUSH
 846: LD_INT 3
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: CALL_OW 69
 861: PUSH
 862: FOR_IN
 863: IFFALSE 896
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 865: LD_VAR 0 3
 869: PPUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 5
 875: PUSH
 876: LD_INT 7
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_OWVAR 67
 888: ARRAY
 889: PPUSH
 890: CALL_OW 241
 894: GO 862
 896: POP
 897: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 898: LD_ADDR_VAR 0 3
 902: PUSH
 903: LD_INT 22
 905: PUSH
 906: LD_VAR 0 1
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 30
 917: PUSH
 918: LD_INT 32
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 69
 933: PUSH
 934: FOR_IN
 935: IFFALSE 980
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 937: LD_VAR 0 3
 941: PPUSH
 942: LD_INT 27
 944: PUSH
 945: LD_INT 25
 947: PUSH
 948: LD_INT 28
 950: PUSH
 951: LD_INT 27
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: PUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 4
 967: MOD
 968: PUSH
 969: LD_INT 1
 971: PLUS
 972: ARRAY
 973: PPUSH
 974: CALL_OW 431
 978: GO 934
 980: POP
 981: POP
// end ;
 982: LD_VAR 0 2
 986: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
 991: PPUSH
 992: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 993: LD_ADDR_VAR 0 5
 997: PUSH
 998: LD_VAR 0 1
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL_OW 517
1010: ST_TO_ADDR
// if not tmp then
1011: LD_VAR 0 5
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1262
// for i := 1 to n do
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: DOUBLE
1026: LD_INT 1
1028: DEC
1029: ST_TO_ADDR
1030: LD_VAR 0 2
1034: PUSH
1035: FOR_TO
1036: IFFALSE 1260
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1038: LD_ADDR_VAR 0 6
1042: PUSH
1043: LD_INT 1
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: CALL_OW 12
1059: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1060: LD_VAR 0 5
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PUSH
1069: LD_VAR 0 6
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 5
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PUSH
1084: LD_VAR 0 6
1088: ARRAY
1089: PPUSH
1090: LD_EXP 3
1094: PUSH
1095: LD_INT 1
1097: ARRAY
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1106: LD_ADDR_EXP 13
1110: PUSH
1111: LD_EXP 13
1115: PPUSH
1116: LD_EXP 13
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: PPUSH
1125: LD_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PUSH
1134: LD_VAR 0 6
1138: ARRAY
1139: PPUSH
1140: CALL_OW 2
1144: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1145: LD_ADDR_EXP 13
1149: PUSH
1150: LD_EXP 13
1154: PPUSH
1155: LD_EXP 13
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: LD_VAR 0 5
1168: PUSH
1169: LD_INT 2
1171: ARRAY
1172: PUSH
1173: LD_VAR 0 6
1177: ARRAY
1178: PPUSH
1179: CALL_OW 2
1183: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1184: LD_ADDR_VAR 0 5
1188: PUSH
1189: LD_VAR 0 5
1193: PPUSH
1194: LD_INT 1
1196: PPUSH
1197: LD_VAR 0 5
1201: PUSH
1202: LD_INT 1
1204: ARRAY
1205: PPUSH
1206: LD_VAR 0 6
1210: PPUSH
1211: CALL_OW 3
1215: PPUSH
1216: CALL_OW 1
1220: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_VAR 0 5
1230: PPUSH
1231: LD_INT 2
1233: PPUSH
1234: LD_VAR 0 5
1238: PUSH
1239: LD_INT 2
1241: ARRAY
1242: PPUSH
1243: LD_VAR 0 6
1247: PPUSH
1248: CALL_OW 3
1252: PPUSH
1253: CALL_OW 1
1257: ST_TO_ADDR
// end ;
1258: GO 1035
1260: POP
1261: POP
// end ;
1262: LD_VAR 0 3
1266: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1267: LD_INT 0
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
1299: PPUSH
// enable ;
1300: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1301: LD_ADDR_VAR 0 11
1305: PUSH
1306: LD_INT 81
1308: PUSH
1309: LD_VAR 0 1
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PPUSH
1318: CALL_OW 69
1322: ST_TO_ADDR
// if tmp then
1323: LD_VAR 0 11
1327: IFFALSE 1348
// enemySide := GetSide ( tmp [ 1 ] ) ;
1329: LD_ADDR_VAR 0 38
1333: PUSH
1334: LD_VAR 0 11
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: CALL_OW 255
1347: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1348: LD_ADDR_VAR 0 26
1352: PUSH
1353: LD_VAR 0 3
1357: PPUSH
1358: LD_INT 81
1360: PUSH
1361: LD_VAR 0 1
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: PPUSH
1370: CALL_OW 70
1374: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1375: LD_ADDR_VAR 0 27
1379: PUSH
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 81
1387: PUSH
1388: LD_VAR 0 1
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1402: LD_ADDR_VAR 0 13
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_VAR 0 1
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 50
1421: PUSH
1422: EMPTY
1423: LIST
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 31
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PPUSH
1440: CALL_OW 69
1444: ST_TO_ADDR
// if ct then
1445: LD_VAR 0 13
1449: IFFALSE 1540
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1451: LD_ADDR_VAR 0 15
1455: PUSH
1456: LD_INT 22
1458: PUSH
1459: LD_VAR 0 1
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 3
1470: PUSH
1471: LD_INT 61
1473: PUSH
1474: EMPTY
1475: LIST
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 50
1483: PUSH
1484: EMPTY
1485: LIST
1486: PUSH
1487: LD_INT 33
1489: PUSH
1490: LD_INT 2
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: PPUSH
1503: CALL_OW 69
1507: ST_TO_ADDR
// if veh then
1508: LD_VAR 0 15
1512: IFFALSE 1540
// for i in veh do
1514: LD_ADDR_VAR 0 9
1518: PUSH
1519: LD_VAR 0 15
1523: PUSH
1524: FOR_IN
1525: IFFALSE 1538
// Connect ( i ) ;
1527: LD_VAR 0 9
1531: PPUSH
1532: CALL 24138 0 1
1536: GO 1524
1538: POP
1539: POP
// end ; vehicles := arVehicles ;
1540: LD_ADDR_VAR 0 30
1544: PUSH
1545: LD_EXP 8
1549: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1550: LD_ADDR_VAR 0 36
1554: PUSH
1555: LD_VAR 0 3
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_VAR 0 1
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 2
1574: PUSH
1575: LD_INT 30
1577: PUSH
1578: LD_INT 0
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 30
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: ST_TO_ADDR
// if depot then
1609: LD_VAR 0 36
1613: IFFALSE 1629
// depot := depot [ 1 ] ;
1615: LD_ADDR_VAR 0 36
1619: PUSH
1620: LD_VAR 0 36
1624: PUSH
1625: LD_INT 1
1627: ARRAY
1628: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1629: LD_ADDR_VAR 0 22
1633: PUSH
1634: LD_VAR 0 5
1638: PPUSH
1639: LD_INT 25
1641: PUSH
1642: LD_INT 4
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 50
1651: PUSH
1652: EMPTY
1653: LIST
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PPUSH
1659: CALL_OW 72
1663: ST_TO_ADDR
// if arTech then
1664: LD_EXP 5
1668: IFFALSE 2032
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1670: LD_ADDR_VAR 0 16
1674: PUSH
1675: LD_VAR 0 3
1679: PPUSH
1680: LD_INT 22
1682: PUSH
1683: LD_VAR 0 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 50
1694: PUSH
1695: EMPTY
1696: LIST
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 30
1713: PUSH
1714: LD_INT 7
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 30
1723: PUSH
1724: LD_INT 8
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: PPUSH
1742: CALL_OW 70
1746: ST_TO_ADDR
// if lab then
1747: LD_VAR 0 16
1751: IFFALSE 2032
// begin for j := 1 to Count ( lab ) do
1753: LD_ADDR_VAR 0 10
1757: PUSH
1758: DOUBLE
1759: LD_INT 1
1761: DEC
1762: ST_TO_ADDR
1763: LD_VAR 0 16
1767: PPUSH
1768: CALL 17894 0 1
1772: PUSH
1773: FOR_TO
1774: IFFALSE 2030
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1776: LD_VAR 0 16
1780: PUSH
1781: LD_VAR 0 10
1785: ARRAY
1786: PPUSH
1787: CALL_OW 461
1791: PUSH
1792: LD_INT 2
1794: EQUAL
1795: IFFALSE 1880
// begin for i in arTech do
1797: LD_ADDR_VAR 0 9
1801: PUSH
1802: LD_EXP 5
1806: PUSH
1807: FOR_IN
1808: IFFALSE 1876
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1810: LD_VAR 0 16
1814: PUSH
1815: LD_VAR 0 10
1819: ARRAY
1820: PPUSH
1821: LD_VAR 0 9
1825: PPUSH
1826: CALL_OW 430
1830: IFFALSE 1852
1832: PUSH
1833: LD_VAR 0 9
1837: PPUSH
1838: LD_VAR 0 1
1842: PPUSH
1843: CALL_OW 321
1847: PUSH
1848: LD_INT 1
1850: EQUAL
1851: AND
1852: IFFALSE 1874
// begin AddComResearch ( lab [ j ] , i ) ;
1854: LD_VAR 0 16
1858: PUSH
1859: LD_VAR 0 10
1863: ARRAY
1864: PPUSH
1865: LD_VAR 0 9
1869: PPUSH
1870: CALL_OW 184
// end ;
1874: GO 1807
1876: POP
1877: POP
// end else
1878: GO 2028
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1880: LD_VAR 0 16
1884: PUSH
1885: LD_VAR 0 10
1889: ARRAY
1890: PPUSH
1891: CALL_OW 461
1895: PUSH
1896: LD_INT 6
1898: EQUAL
1899: IFFALSE 2028
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1901: LD_ADDR_VAR 0 9
1905: PUSH
1906: LD_VAR 0 22
1910: PPUSH
1911: LD_INT 3
1913: PUSH
1914: LD_INT 120
1916: PUSH
1917: LD_INT 10
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 72
1932: PUSH
1933: FOR_IN
1934: IFFALSE 2026
// begin inside := IsInUnit ( i ) ;
1936: LD_ADDR_VAR 0 14
1940: PUSH
1941: LD_VAR 0 9
1945: PPUSH
1946: CALL_OW 310
1950: ST_TO_ADDR
// if not inside then
1951: LD_VAR 0 14
1955: NOT
1956: IFFALSE 1980
// ComEnterUnit ( i , lab [ j ] ) else
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 16
1967: PUSH
1968: LD_VAR 0 10
1972: ARRAY
1973: PPUSH
1974: CALL_OW 120
1978: GO 2024
// if BuildingStatus ( inside ) = bs_idle then
1980: LD_VAR 0 14
1984: PPUSH
1985: CALL_OW 461
1989: PUSH
1990: LD_INT 2
1992: EQUAL
1993: IFFALSE 2024
// begin ComExitBuilding ( i ) ;
1995: LD_VAR 0 9
1999: PPUSH
2000: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
2004: LD_VAR 0 9
2008: PPUSH
2009: LD_VAR 0 16
2013: PUSH
2014: LD_VAR 0 10
2018: ARRAY
2019: PPUSH
2020: CALL_OW 180
// end ; end ;
2024: GO 1933
2026: POP
2027: POP
// end ;
2028: GO 1773
2030: POP
2031: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2032: LD_ADDR_VAR 0 33
2036: PUSH
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 22
2044: PUSH
2045: LD_VAR 0 1
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 30
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 50
2066: PUSH
2067: EMPTY
2068: LIST
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: PPUSH
2075: CALL_OW 70
2079: ST_TO_ADDR
// if fac then
2080: LD_VAR 0 33
2084: IFFALSE 2419
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2086: LD_VAR 0 33
2090: PUSH
2091: LD_INT 1
2093: ARRAY
2094: PPUSH
2095: CALL_OW 461
2099: PUSH
2100: LD_INT 2
2102: EQUAL
2103: IFFALSE 2419
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2105: LD_ADDR_VAR 0 34
2109: PUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 2
2117: PUSH
2118: LD_INT 30
2120: PUSH
2121: LD_INT 32
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 33
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 35
2145: PUSH
2146: LD_INT 0
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 70
2161: ST_TO_ADDR
// if emptyTowers then
2162: LD_VAR 0 34
2166: IFFALSE 2216
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2168: LD_ADDR_VAR 0 35
2172: PUSH
2173: LD_VAR 0 34
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PPUSH
2182: LD_VAR 0 3
2186: PPUSH
2187: CALL 26185 0 2
2191: ST_TO_ADDR
// if weapon then
2192: LD_VAR 0 35
2196: IFFALSE 2216
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2198: LD_VAR 0 34
2202: PUSH
2203: LD_INT 1
2205: ARRAY
2206: PPUSH
2207: LD_VAR 0 35
2211: PPUSH
2212: CALL_OW 148
// end ; if arConstructList then
2216: LD_EXP 6
2220: IFFALSE 2419
// for i := 1 to Count ( arConstructList ) do
2222: LD_ADDR_VAR 0 9
2226: PUSH
2227: DOUBLE
2228: LD_INT 1
2230: DEC
2231: ST_TO_ADDR
2232: LD_EXP 6
2236: PPUSH
2237: CALL 17894 0 1
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2417
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2245: LD_VAR 0 33
2249: PUSH
2250: LD_INT 1
2252: ARRAY
2253: PPUSH
2254: LD_EXP 6
2258: PUSH
2259: LD_VAR 0 9
2263: ARRAY
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: PPUSH
2269: LD_EXP 6
2273: PUSH
2274: LD_VAR 0 9
2278: ARRAY
2279: PUSH
2280: LD_INT 2
2282: ARRAY
2283: PPUSH
2284: LD_EXP 6
2288: PUSH
2289: LD_VAR 0 9
2293: ARRAY
2294: PUSH
2295: LD_INT 3
2297: ARRAY
2298: PPUSH
2299: LD_EXP 6
2303: PUSH
2304: LD_VAR 0 9
2308: ARRAY
2309: PUSH
2310: LD_INT 4
2312: ARRAY
2313: PPUSH
2314: CALL_OW 448
2318: IFFALSE 2415
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2320: LD_VAR 0 33
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PPUSH
2329: LD_EXP 6
2333: PUSH
2334: LD_VAR 0 9
2338: ARRAY
2339: PUSH
2340: LD_INT 1
2342: ARRAY
2343: PPUSH
2344: LD_EXP 6
2348: PUSH
2349: LD_VAR 0 9
2353: ARRAY
2354: PUSH
2355: LD_INT 2
2357: ARRAY
2358: PPUSH
2359: LD_EXP 6
2363: PUSH
2364: LD_VAR 0 9
2368: ARRAY
2369: PUSH
2370: LD_INT 3
2372: ARRAY
2373: PPUSH
2374: LD_EXP 6
2378: PUSH
2379: LD_VAR 0 9
2383: ARRAY
2384: PUSH
2385: LD_INT 4
2387: ARRAY
2388: PPUSH
2389: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2393: LD_ADDR_EXP 6
2397: PUSH
2398: LD_EXP 6
2402: PPUSH
2403: LD_VAR 0 9
2407: PPUSH
2408: CALL_OW 3
2412: ST_TO_ADDR
// break ;
2413: GO 2417
// end ; end ;
2415: GO 2242
2417: POP
2418: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2419: LD_ADDR_VAR 0 11
2423: PUSH
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 22
2431: PUSH
2432: LD_VAR 0 1
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 21
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 57
2456: PUSH
2457: EMPTY
2458: LIST
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 3
2466: PUSH
2467: LD_INT 24
2469: PUSH
2470: LD_INT 1000
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PPUSH
2487: CALL_OW 70
2491: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2492: LD_ADDR_VAR 0 21
2496: PUSH
2497: LD_VAR 0 3
2501: PPUSH
2502: CALL_OW 435
2506: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2507: LD_ADDR_VAR 0 18
2511: PUSH
2512: LD_VAR 0 5
2516: PPUSH
2517: LD_INT 25
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 50
2529: PUSH
2530: EMPTY
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2542: LD_VAR 0 18
2546: PPUSH
2547: LD_INT 3
2549: PUSH
2550: LD_INT 120
2552: PUSH
2553: LD_INT 7
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 54
2569: PUSH
2570: EMPTY
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PPUSH
2581: CALL_OW 72
2585: IFFALSE 2602
2587: PUSH
2588: LD_VAR 0 33
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: CALL_OW 302
2601: AND
2602: IFFALSE 2661
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2604: LD_VAR 0 18
2608: PPUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 120
2614: PUSH
2615: LD_INT 7
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: LD_INT 54
2631: PUSH
2632: EMPTY
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 72
2647: PPUSH
2648: LD_VAR 0 33
2652: PUSH
2653: LD_INT 1
2655: ARRAY
2656: PPUSH
2657: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2661: LD_ADDR_VAR 0 16
2665: PUSH
2666: LD_VAR 0 3
2670: PPUSH
2671: LD_INT 2
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 6
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 30
2686: PUSH
2687: LD_INT 7
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 30
2696: PUSH
2697: LD_INT 8
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 70
2714: ST_TO_ADDR
// if sci then
2715: LD_VAR 0 22
2719: IFFALSE 2964
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2721: LD_ADDR_VAR 0 24
2725: PUSH
2726: LD_VAR 0 5
2730: PPUSH
2731: LD_INT 95
2733: PUSH
2734: LD_VAR 0 3
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 120
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 72
2761: ST_TO_ADDR
// if hurtUnits then
2762: LD_VAR 0 24
2766: IFFALSE 2861
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2768: LD_ADDR_VAR 0 9
2772: PUSH
2773: LD_VAR 0 22
2777: PPUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 120
2783: PUSH
2784: LD_INT 10
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PPUSH
2795: CALL_OW 72
2799: PUSH
2800: FOR_IN
2801: IFFALSE 2857
// begin SetTag ( i , tHealer ) ;
2803: LD_VAR 0 9
2807: PPUSH
2808: LD_INT 10
2810: PPUSH
2811: CALL_OW 109
// if IsInUnit ( i ) then
2815: LD_VAR 0 9
2819: PPUSH
2820: CALL_OW 310
2824: IFFALSE 2837
// ComExitBuilding ( i ) else
2826: LD_VAR 0 9
2830: PPUSH
2831: CALL_OW 122
2835: GO 2855
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2837: LD_VAR 0 9
2841: PPUSH
2842: LD_VAR 0 24
2846: PUSH
2847: LD_INT 1
2849: ARRAY
2850: PPUSH
2851: CALL_OW 128
// end ;
2855: GO 2800
2857: POP
2858: POP
// end else
2859: GO 2964
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2861: LD_VAR 0 16
2865: IFFALSE 2888
2867: PUSH
2868: LD_VAR 0 22
2872: PPUSH
2873: LD_INT 120
2875: PUSH
2876: LD_INT 10
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PPUSH
2883: CALL_OW 72
2887: AND
2888: IFFALSE 2964
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2890: LD_ADDR_VAR 0 9
2894: PUSH
2895: LD_VAR 0 22
2899: PPUSH
2900: LD_INT 120
2902: PUSH
2903: LD_INT 10
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 72
2914: PUSH
2915: FOR_IN
2916: IFFALSE 2962
// begin SetTag ( i , 0 ) ;
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: CALL_OW 109
// if not IsInUnit ( i ) then
2930: LD_VAR 0 9
2934: PPUSH
2935: CALL_OW 310
2939: NOT
2940: IFFALSE 2960
// ComEnterUnit ( i , lab [ 1 ] ) ;
2942: LD_VAR 0 9
2946: PPUSH
2947: LD_VAR 0 16
2951: PUSH
2952: LD_INT 1
2954: ARRAY
2955: PPUSH
2956: CALL_OW 120
// end ;
2960: GO 2915
2962: POP
2963: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2964: LD_ADDR_VAR 0 17
2968: PUSH
2969: LD_VAR 0 5
2973: PPUSH
2974: LD_INT 25
2976: PUSH
2977: LD_INT 2
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 72
2988: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2989: LD_ADDR_VAR 0 37
2993: PUSH
2994: LD_EXP 7
2998: ST_TO_ADDR
// if eng then
2999: LD_VAR 0 17
3003: IFFALSE 3851
// begin for i in eng do
3005: LD_ADDR_VAR 0 9
3009: PUSH
3010: LD_VAR 0 17
3014: PUSH
3015: FOR_IN
3016: IFFALSE 3849
// begin tag := GetTag ( i ) ;
3018: LD_ADDR_VAR 0 19
3022: PUSH
3023: LD_VAR 0 9
3027: PPUSH
3028: CALL_OW 110
3032: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
3033: LD_VAR 0 9
3037: PPUSH
3038: LD_VAR 0 4
3042: PPUSH
3043: CALL_OW 308
3047: IFFALSE 3078
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3049: LD_VAR 0 9
3053: PPUSH
3054: LD_VAR 0 7
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_VAR 0 7
3067: PUSH
3068: LD_INT 2
3070: ARRAY
3071: PPUSH
3072: CALL_OW 111
// continue ;
3076: GO 3015
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3078: LD_VAR 0 9
3082: PPUSH
3083: CALL_OW 256
3087: PUSH
3088: LD_INT 800
3090: LESS
3091: IFFALSE 3103
3093: PUSH
3094: LD_VAR 0 19
3098: PUSH
3099: LD_INT 1
3101: NONEQUAL
3102: AND
3103: IFFALSE 3153
// begin SetTag ( i , tHeal ) ;
3105: LD_VAR 0 9
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3117: LD_VAR 0 9
3121: PPUSH
3122: LD_VAR 0 6
3126: PUSH
3127: LD_INT 1
3129: ARRAY
3130: PPUSH
3131: LD_VAR 0 6
3135: PUSH
3136: LD_INT 2
3138: ARRAY
3139: PPUSH
3140: CALL_OW 111
// AddComHold ( i ) ;
3144: LD_VAR 0 9
3148: PPUSH
3149: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3153: LD_VAR 0 19
3157: PUSH
3158: LD_INT 1
3160: EQUAL
3161: IFFALSE 3178
3163: PUSH
3164: LD_VAR 0 9
3168: PPUSH
3169: CALL_OW 256
3173: PUSH
3174: LD_INT 1000
3176: EQUAL
3177: AND
3178: IFFALSE 3192
// SetTag ( i , 0 ) ;
3180: LD_VAR 0 9
3184: PPUSH
3185: LD_INT 0
3187: PPUSH
3188: CALL_OW 109
// if not tag then
3192: LD_VAR 0 19
3196: NOT
3197: IFFALSE 3368
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3199: LD_ADDR_VAR 0 12
3203: PUSH
3204: LD_VAR 0 3
3208: PPUSH
3209: LD_INT 57
3211: PUSH
3212: EMPTY
3213: LIST
3214: PPUSH
3215: CALL_OW 70
3219: ST_TO_ADDR
// if undone then
3220: LD_VAR 0 12
3224: IFFALSE 3246
// begin ComComplete ( i , undone [ 1 ] ) ;
3226: LD_VAR 0 9
3230: PPUSH
3231: LD_VAR 0 12
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: CALL 24030 0 2
// continue ;
3244: GO 3015
// end ; if cr or tmp or buildingsToBuild then
3246: LD_VAR 0 21
3250: IFTRUE 3258
3252: PUSH
3253: LD_VAR 0 11
3257: OR
3258: IFTRUE 3266
3260: PUSH
3261: LD_VAR 0 37
3265: OR
3266: IFFALSE 3342
// begin if IsInUnit ( i ) then
3268: LD_VAR 0 9
3272: PPUSH
3273: CALL_OW 310
3277: IFFALSE 3288
// ComExitBuilding ( i ) ;
3279: LD_VAR 0 9
3283: PPUSH
3284: CALL_OW 122
// if tmp then
3288: LD_VAR 0 11
3292: IFFALSE 3308
// SetTag ( i , tRepair ) else
3294: LD_VAR 0 9
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: CALL_OW 109
3306: GO 3340
// if cr then
3308: LD_VAR 0 21
3312: IFFALSE 3328
// SetTag ( i , tCrates ) else
3314: LD_VAR 0 9
3318: PPUSH
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 109
3326: GO 3340
// SetTag ( i , tBuild ) ;
3328: LD_VAR 0 9
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: CALL_OW 109
// end else
3340: GO 3368
// if not IsInUnit ( i ) then
3342: LD_VAR 0 9
3346: PPUSH
3347: CALL_OW 310
3351: NOT
3352: IFFALSE 3368
// ComEnterUnit ( i , depot ) ;
3354: LD_VAR 0 9
3358: PPUSH
3359: LD_VAR 0 36
3363: PPUSH
3364: CALL_OW 120
// end ; if tag = tRepair then
3368: LD_VAR 0 19
3372: PUSH
3373: LD_INT 3
3375: EQUAL
3376: IFFALSE 3482
// begin if IsInUnit ( i ) then
3378: LD_VAR 0 9
3382: PPUSH
3383: CALL_OW 310
3387: IFFALSE 3400
// begin ComExitBuilding ( i ) ;
3389: LD_VAR 0 9
3393: PPUSH
3394: CALL_OW 122
// continue ;
3398: GO 3015
// end ; if not tmp then
3400: LD_VAR 0 11
3404: NOT
3405: IFFALSE 3421
// begin SetTag ( i , 0 ) ;
3407: LD_VAR 0 9
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: CALL_OW 109
// continue ;
3419: GO 3015
// end ; if not HasTask ( i ) then
3421: LD_VAR 0 9
3425: PPUSH
3426: CALL_OW 314
3430: NOT
3431: IFFALSE 3451
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3433: LD_VAR 0 9
3437: PPUSH
3438: LD_VAR 0 11
3442: PUSH
3443: LD_INT 1
3445: ARRAY
3446: PPUSH
3447: CALL_OW 130
// if not IsInArea ( i , area ) then
3451: LD_VAR 0 9
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 308
3465: NOT
3466: IFFALSE 3482
// ComMoveToArea ( i , area ) ;
3468: LD_VAR 0 9
3472: PPUSH
3473: LD_VAR 0 3
3477: PPUSH
3478: CALL_OW 113
// end ; if tag = tBuild then
3482: LD_VAR 0 19
3486: PUSH
3487: LD_INT 5
3489: EQUAL
3490: IFFALSE 3700
// begin if IsInUnit ( i ) then
3492: LD_VAR 0 9
3496: PPUSH
3497: CALL_OW 310
3501: IFFALSE 3514
// begin ComExitBuilding ( i ) ;
3503: LD_VAR 0 9
3507: PPUSH
3508: CALL_OW 122
// continue ;
3512: GO 3015
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3514: LD_VAR 0 37
3518: NOT
3519: IFTRUE 3527
3521: PUSH
3522: LD_VAR 0 26
3526: OR
3527: IFTRUE 3535
3529: PUSH
3530: LD_VAR 0 27
3534: OR
3535: IFFALSE 3553
// begin SetTag ( i , 0 ) ;
3537: LD_VAR 0 9
3541: PPUSH
3542: LD_INT 0
3544: PPUSH
3545: CALL_OW 109
// continue ;
3549: GO 3015
// end else
3551: GO 3592
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3553: LD_VAR 0 36
3557: PPUSH
3558: LD_VAR 0 37
3562: PUSH
3563: LD_INT 1
3565: ARRAY
3566: PUSH
3567: LD_INT 1
3569: ARRAY
3570: PPUSH
3571: CALL 57921 0 2
3575: NOT
3576: IFFALSE 3592
// begin SetTag ( i , 0 ) ;
3578: LD_VAR 0 9
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 109
// continue ;
3590: GO 3015
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3592: LD_ADDR_VAR 0 12
3596: PUSH
3597: LD_VAR 0 3
3601: PPUSH
3602: LD_INT 57
3604: PUSH
3605: EMPTY
3606: LIST
3607: PPUSH
3608: CALL_OW 70
3612: ST_TO_ADDR
// if undone then
3613: LD_VAR 0 12
3617: IFFALSE 3639
// begin ComComplete ( i , undone [ 1 ] ) ;
3619: LD_VAR 0 9
3623: PPUSH
3624: LD_VAR 0 12
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PPUSH
3633: CALL 24030 0 2
// continue ;
3637: GO 3015
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3639: LD_VAR 0 9
3643: PPUSH
3644: LD_VAR 0 37
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: LD_VAR 0 37
3661: PUSH
3662: LD_INT 1
3664: ARRAY
3665: PUSH
3666: LD_INT 2
3668: ARRAY
3669: PPUSH
3670: LD_VAR 0 37
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PUSH
3679: LD_INT 3
3681: ARRAY
3682: PPUSH
3683: LD_VAR 0 37
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: PUSH
3692: LD_INT 4
3694: ARRAY
3695: PPUSH
3696: CALL_OW 145
// end ; if tag = tCrates then
3700: LD_VAR 0 19
3704: PUSH
3705: LD_INT 2
3707: EQUAL
3708: IFFALSE 3847
// begin if IsInUnit ( i ) then
3710: LD_VAR 0 9
3714: PPUSH
3715: CALL_OW 310
3719: IFFALSE 3732
// begin ComExitBuilding ( i ) ;
3721: LD_VAR 0 9
3725: PPUSH
3726: CALL_OW 122
// continue ;
3730: GO 3015
// end ; if not cr then
3732: LD_VAR 0 21
3736: NOT
3737: IFFALSE 3753
// begin SetTag ( i , 0 ) ;
3739: LD_VAR 0 9
3743: PPUSH
3744: LD_INT 0
3746: PPUSH
3747: CALL_OW 109
// continue ;
3751: GO 3015
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3753: LD_VAR 0 9
3757: PPUSH
3758: CALL_OW 314
3762: NOT
3763: IFFALSE 3818
3765: PUSH
3766: LD_INT 81
3768: PUSH
3769: LD_VAR 0 1
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 92
3780: PUSH
3781: LD_VAR 0 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PUSH
3790: LD_VAR 0 21
3794: PUSH
3795: LD_INT 2
3797: ARRAY
3798: PUSH
3799: LD_INT 12
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 69
3816: NOT
3817: AND
3818: IFFALSE 3847
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3820: LD_VAR 0 9
3824: PPUSH
3825: LD_VAR 0 21
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_VAR 0 21
3838: PUSH
3839: LD_INT 2
3841: ARRAY
3842: PPUSH
3843: CALL_OW 117
// end ; end ;
3847: GO 3015
3849: POP
3850: POP
// end ; if vehicles then
3851: LD_VAR 0 30
3855: IFFALSE 4667
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3857: LD_ADDR_VAR 0 30
3861: PUSH
3862: LD_VAR 0 30
3866: PPUSH
3867: LD_INT 3
3869: PUSH
3870: LD_INT 2
3872: PUSH
3873: LD_INT 34
3875: PUSH
3876: LD_INT 88
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 34
3885: PUSH
3886: LD_INT 32
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 50
3904: PUSH
3905: EMPTY
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PPUSH
3912: CALL_OW 72
3916: ST_TO_ADDR
// if vehicles then
3917: LD_VAR 0 30
3921: IFFALSE 4667
// begin for i in vehicles do
3923: LD_ADDR_VAR 0 9
3927: PUSH
3928: LD_VAR 0 30
3932: PUSH
3933: FOR_IN
3934: IFFALSE 4665
// begin tag := GetTag ( i ) ;
3936: LD_ADDR_VAR 0 19
3940: PUSH
3941: LD_VAR 0 9
3945: PPUSH
3946: CALL_OW 110
3950: ST_TO_ADDR
// if not tag then
3951: LD_VAR 0 19
3955: NOT
3956: IFFALSE 4102
// begin if GetControl ( i ) = control_manual then
3958: LD_VAR 0 9
3962: PPUSH
3963: CALL_OW 263
3967: PUSH
3968: LD_INT 1
3970: EQUAL
3971: IFFALSE 4088
// begin drivers := arDrivers ;
3973: LD_ADDR_VAR 0 28
3977: PUSH
3978: LD_EXP 10
3982: ST_TO_ADDR
// if not drivers then
3983: LD_VAR 0 28
3987: NOT
3988: IFFALSE 4068
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3990: LD_ADDR_VAR 0 28
3994: PUSH
3995: LD_VAR 0 18
3999: PPUSH
4000: LD_INT 3
4002: PUSH
4003: LD_INT 120
4005: PUSH
4006: LD_INT 7
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: ST_TO_ADDR
// if drivers then
4022: LD_VAR 0 28
4026: IFFALSE 4068
// begin SetTag ( drivers [ 1 ] , tMech ) ;
4028: LD_VAR 0 28
4032: PUSH
4033: LD_INT 1
4035: ARRAY
4036: PPUSH
4037: LD_INT 7
4039: PPUSH
4040: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
4044: LD_ADDR_EXP 10
4048: PUSH
4049: LD_EXP 10
4053: PPUSH
4054: LD_VAR 0 28
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PPUSH
4063: CALL 53826 0 2
4067: ST_TO_ADDR
// end ; end ; if drivers then
4068: LD_VAR 0 28
4072: IFFALSE 4086
// SetTag ( i , tBusy ) ;
4074: LD_VAR 0 9
4078: PPUSH
4079: LD_INT 8
4081: PPUSH
4082: CALL_OW 109
// continue ;
4086: GO 3933
// end ; SetTag ( i , tBusy ) ;
4088: LD_VAR 0 9
4092: PPUSH
4093: LD_INT 8
4095: PPUSH
4096: CALL_OW 109
// end else
4100: GO 4663
// if tag = tBusy then
4102: LD_VAR 0 19
4106: PUSH
4107: LD_INT 8
4109: EQUAL
4110: IFFALSE 4330
// begin if GetLives ( i ) = 1000 then
4112: LD_VAR 0 9
4116: PPUSH
4117: CALL_OW 256
4121: PUSH
4122: LD_INT 1000
4124: EQUAL
4125: IFFALSE 4328
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4127: LD_VAR 0 9
4131: PPUSH
4132: CALL_OW 263
4136: PUSH
4137: LD_INT 1
4139: EQUAL
4140: IFFALSE 4154
4142: PUSH
4143: LD_VAR 0 9
4147: PPUSH
4148: CALL_OW 311
4152: NOT
4153: AND
4154: IFFALSE 4316
// begin drivers := arDrivers ;
4156: LD_ADDR_VAR 0 28
4160: PUSH
4161: LD_EXP 10
4165: ST_TO_ADDR
// if not drivers then
4166: LD_VAR 0 28
4170: NOT
4171: IFFALSE 4187
// begin SetTag ( i , 0 ) ;
4173: LD_VAR 0 9
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 109
// continue ;
4185: GO 3933
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 310
4200: IFFALSE 4218
4202: PUSH
4203: LD_VAR 0 28
4207: PUSH
4208: LD_INT 1
4210: ARRAY
4211: PPUSH
4212: CALL 51406 0 1
4216: NOT
4217: AND
4218: IFFALSE 4233
// ComExitBuilding ( drivers [ 1 ] ) ;
4220: LD_VAR 0 28
4224: PUSH
4225: LD_INT 1
4227: ARRAY
4228: PPUSH
4229: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4233: LD_VAR 0 30
4237: PPUSH
4238: LD_INT 120
4240: PUSH
4241: LD_INT 3
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PPUSH
4248: CALL_OW 72
4252: IFFALSE 4270
4254: PUSH
4255: LD_VAR 0 28
4259: PUSH
4260: LD_INT 1
4262: ARRAY
4263: PPUSH
4264: CALL_OW 314
4268: NOT
4269: AND
4270: IFTRUE 4294
4272: PUSH
4273: LD_VAR 0 30
4277: PPUSH
4278: LD_INT 120
4280: PUSH
4281: LD_INT 3
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PPUSH
4288: CALL_OW 72
4292: NOT
4293: OR
4294: IFFALSE 4314
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4296: LD_VAR 0 28
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: PPUSH
4305: LD_VAR 0 9
4309: PPUSH
4310: CALL_OW 120
// continue ;
4314: GO 3933
// end ; SetTag ( i , tAttack ) ;
4316: LD_VAR 0 9
4320: PPUSH
4321: LD_INT 13
4323: PPUSH
4324: CALL_OW 109
// end ; end else
4328: GO 4663
// if tag = tAttack then
4330: LD_VAR 0 19
4334: PUSH
4335: LD_INT 13
4337: EQUAL
4338: IFFALSE 4520
// begin enemy := enemyInBase ;
4340: LD_ADDR_VAR 0 25
4344: PUSH
4345: LD_VAR 0 26
4349: ST_TO_ADDR
// if not enemy then
4350: LD_VAR 0 25
4354: NOT
4355: IFFALSE 4367
// enemy := enemyOuterBase ;
4357: LD_ADDR_VAR 0 25
4361: PUSH
4362: LD_VAR 0 27
4366: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4367: LD_VAR 0 25
4371: NOT
4372: IFFALSE 4407
4374: PUSH
4375: LD_VAR 0 9
4379: PPUSH
4380: LD_VAR 0 7
4384: PUSH
4385: LD_INT 1
4387: ARRAY
4388: PPUSH
4389: LD_VAR 0 7
4393: PUSH
4394: LD_INT 2
4396: ARRAY
4397: PPUSH
4398: CALL_OW 297
4402: PUSH
4403: LD_INT 10
4405: GREATER
4406: AND
4407: IFFALSE 4438
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4409: LD_VAR 0 9
4413: PPUSH
4414: LD_VAR 0 7
4418: PUSH
4419: LD_INT 1
4421: ARRAY
4422: PPUSH
4423: LD_VAR 0 7
4427: PUSH
4428: LD_INT 2
4430: ARRAY
4431: PPUSH
4432: CALL_OW 111
// continue ;
4436: GO 3933
// end ; if GetLives ( i ) < 650 then
4438: LD_VAR 0 9
4442: PPUSH
4443: CALL_OW 256
4447: PUSH
4448: LD_INT 650
4450: LESS
4451: IFFALSE 4494
// begin SetTag ( i , tVehRepair ) ;
4453: LD_VAR 0 9
4457: PPUSH
4458: LD_INT 9
4460: PPUSH
4461: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4465: LD_VAR 0 9
4469: PPUSH
4470: LD_VAR 0 7
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: LD_VAR 0 7
4483: PUSH
4484: LD_INT 2
4486: ARRAY
4487: PPUSH
4488: CALL_OW 111
// continue ;
4492: GO 3933
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4494: LD_VAR 0 9
4498: PPUSH
4499: LD_VAR 0 25
4503: PPUSH
4504: LD_VAR 0 9
4508: PPUSH
4509: CALL_OW 74
4513: PPUSH
4514: CALL_OW 115
// end else
4518: GO 4663
// if tag = tVehRepair then
4520: LD_VAR 0 19
4524: PUSH
4525: LD_INT 9
4527: EQUAL
4528: IFFALSE 4663
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4530: LD_VAR 0 9
4534: PPUSH
4535: LD_VAR 0 7
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: LD_VAR 0 7
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PPUSH
4553: CALL_OW 297
4557: PUSH
4558: LD_INT 10
4560: GREATER
4561: IFFALSE 4592
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4563: LD_VAR 0 9
4567: PPUSH
4568: LD_VAR 0 7
4572: PUSH
4573: LD_INT 1
4575: ARRAY
4576: PPUSH
4577: LD_VAR 0 7
4581: PUSH
4582: LD_INT 2
4584: ARRAY
4585: PPUSH
4586: CALL_OW 111
// continue ;
4590: GO 3933
// end ; if GetLives ( i ) = 1000 then
4592: LD_VAR 0 9
4596: PPUSH
4597: CALL_OW 256
4601: PUSH
4602: LD_INT 1000
4604: EQUAL
4605: IFFALSE 4621
// begin SetTag ( i , tBusy ) ;
4607: LD_VAR 0 9
4611: PPUSH
4612: LD_INT 8
4614: PPUSH
4615: CALL_OW 109
// continue ;
4619: GO 3933
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4621: LD_VAR 0 9
4625: PPUSH
4626: CALL_OW 263
4630: PUSH
4631: LD_INT 1
4633: EQUAL
4634: IFFALSE 4647
4636: PUSH
4637: LD_VAR 0 9
4641: PPUSH
4642: CALL_OW 311
4646: AND
4647: IFFALSE 4663
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4649: LD_VAR 0 9
4653: PPUSH
4654: CALL_OW 311
4658: PPUSH
4659: CALL 55540 0 1
// end ; end ;
4663: GO 3933
4665: POP
4666: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4667: LD_ADDR_VAR 0 23
4671: PUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: LD_INT 2
4679: PUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 1
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 25
4692: PUSH
4693: LD_INT 8
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: LD_INT 5
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 25
4712: PUSH
4713: LD_INT 9
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 50
4729: PUSH
4730: EMPTY
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 72
4741: ST_TO_ADDR
// if sol then
4742: LD_VAR 0 23
4746: IFFALSE 5262
// begin if enemyInBase then
4748: LD_VAR 0 26
4752: IFFALSE 4931
// begin for i in sol do
4754: LD_ADDR_VAR 0 9
4758: PUSH
4759: LD_VAR 0 23
4763: PUSH
4764: FOR_IN
4765: IFFALSE 4927
// begin tw := IsInUnit ( i ) ;
4767: LD_ADDR_VAR 0 20
4771: PUSH
4772: LD_VAR 0 9
4776: PPUSH
4777: CALL_OW 310
4781: ST_TO_ADDR
// if tw then
4782: LD_VAR 0 20
4786: IFFALSE 4869
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4788: LD_VAR 0 20
4792: PUSH
4793: LD_INT 22
4795: PUSH
4796: LD_VAR 0 1
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 101
4807: PUSH
4808: LD_VAR 0 38
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 30
4822: PUSH
4823: LD_INT 32
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 30
4832: PUSH
4833: LD_INT 31
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 69
4854: IN
4855: NOT
4856: IFFALSE 4867
// ComExitBuilding ( i ) ;
4858: LD_VAR 0 9
4862: PPUSH
4863: CALL_OW 122
// end else
4867: GO 4925
// if IsInArea ( i , area ) then
4869: LD_VAR 0 9
4873: PPUSH
4874: LD_VAR 0 3
4878: PPUSH
4879: CALL_OW 308
4883: IFFALSE 4911
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4885: LD_VAR 0 9
4889: PPUSH
4890: LD_VAR 0 26
4894: PPUSH
4895: LD_VAR 0 9
4899: PPUSH
4900: CALL_OW 74
4904: PPUSH
4905: CALL_OW 115
4909: GO 4925
// ComMoveToArea ( i , area ) ;
4911: LD_VAR 0 9
4915: PPUSH
4916: LD_VAR 0 3
4920: PPUSH
4921: CALL_OW 113
// end ;
4925: GO 4764
4927: POP
4928: POP
// end else
4929: GO 5262
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4931: LD_ADDR_VAR 0 32
4935: PUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 3
4943: PUSH
4944: LD_INT 62
4946: PUSH
4947: EMPTY
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 2
4956: PUSH
4957: LD_INT 30
4959: PUSH
4960: LD_INT 32
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 30
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 30
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 30
4989: PUSH
4990: LD_INT 31
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: CALL_OW 70
5012: ST_TO_ADDR
// if empty then
5013: LD_VAR 0 32
5017: IFFALSE 5034
// empty := ReverseArray ( empty ) ;
5019: LD_ADDR_VAR 0 32
5023: PUSH
5024: LD_VAR 0 32
5028: PPUSH
5029: CALL 48916 0 1
5033: ST_TO_ADDR
// for i in sol do
5034: LD_ADDR_VAR 0 9
5038: PUSH
5039: LD_VAR 0 23
5043: PUSH
5044: FOR_IN
5045: IFFALSE 5260
// begin tag := GetTag ( i ) ;
5047: LD_ADDR_VAR 0 19
5051: PUSH
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 110
5061: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
5062: LD_VAR 0 9
5066: PPUSH
5067: CALL_OW 256
5071: PUSH
5072: LD_INT 1000
5074: LESS
5075: IFFALSE 5087
5077: PUSH
5078: LD_VAR 0 19
5082: PUSH
5083: LD_INT 1
5085: NONEQUAL
5086: AND
5087: IFFALSE 5139
// begin SetTag ( i , tHeal ) ;
5089: LD_VAR 0 9
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5101: LD_VAR 0 9
5105: PPUSH
5106: LD_VAR 0 6
5110: PUSH
5111: LD_INT 1
5113: ARRAY
5114: PPUSH
5115: LD_VAR 0 6
5119: PUSH
5120: LD_INT 2
5122: ARRAY
5123: PPUSH
5124: CALL_OW 111
// AddComHold ( i ) ;
5128: LD_VAR 0 9
5132: PPUSH
5133: CALL_OW 200
// continue ;
5137: GO 5044
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5139: LD_VAR 0 9
5143: PPUSH
5144: CALL_OW 256
5148: PUSH
5149: LD_INT 1000
5151: EQUAL
5152: IFFALSE 5164
5154: PUSH
5155: LD_VAR 0 19
5159: PUSH
5160: LD_INT 1
5162: EQUAL
5163: AND
5164: IFFALSE 5180
// begin SetTag ( i , 0 ) ;
5166: LD_VAR 0 9
5170: PPUSH
5171: LD_INT 0
5173: PPUSH
5174: CALL_OW 109
// continue ;
5178: GO 5044
// end ; if HasTask ( i ) then
5180: LD_VAR 0 9
5184: PPUSH
5185: CALL_OW 314
5189: IFFALSE 5193
// continue ;
5191: GO 5044
// if not IsInUnit ( i ) and not tag and empty then
5193: LD_VAR 0 9
5197: PPUSH
5198: CALL_OW 310
5202: NOT
5203: IFFALSE 5212
5205: PUSH
5206: LD_VAR 0 19
5210: NOT
5211: AND
5212: IFFALSE 5220
5214: PUSH
5215: LD_VAR 0 32
5219: AND
5220: IFFALSE 5258
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5222: LD_VAR 0 9
5226: PPUSH
5227: LD_VAR 0 32
5231: PUSH
5232: LD_INT 1
5234: ARRAY
5235: PPUSH
5236: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5240: LD_ADDR_VAR 0 32
5244: PUSH
5245: LD_VAR 0 32
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: CALL_OW 3
5257: ST_TO_ADDR
// end ; end ;
5258: GO 5044
5260: POP
5261: POP
// end ; end ; end ;
5262: LD_VAR 0 8
5266: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5267: LD_EXP 14
5271: PPUSH
5272: LD_INT 50
5274: PUSH
5275: EMPTY
5276: LIST
5277: PPUSH
5278: CALL_OW 72
5282: IFFALSE 5335
5284: GO 5286
5286: DISABLE
// begin enable ;
5287: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5288: LD_EXP 3
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: LD_EXP 14
5310: PPUSH
5311: LD_INT 109
5313: PUSH
5314: LD_INT 43
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: LD_INT 112
5323: PUSH
5324: LD_INT 52
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PPUSH
5331: CALL 1267 0 7
// end ;
5335: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
5336: LD_EXP 13
5340: IFFALSE 5568
5342: GO 5344
5344: DISABLE
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
// begin enable ;
5350: ENABLE
// p := 1 ;
5351: LD_ADDR_VAR 0 2
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5359: LD_ADDR_VAR 0 1
5363: PUSH
5364: DOUBLE
5365: LD_INT 1
5367: DEC
5368: ST_TO_ADDR
5369: LD_EXP 13
5373: PPUSH
5374: CALL 17894 0 1
5378: PUSH
5379: LD_INT 2
5381: DIV
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5566
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_EXP 13
5395: PUSH
5396: LD_VAR 0 2
5400: ARRAY
5401: PPUSH
5402: LD_EXP 13
5406: PUSH
5407: LD_VAR 0 2
5411: PUSH
5412: LD_INT 1
5414: PLUS
5415: ARRAY
5416: PPUSH
5417: CALL_OW 428
5421: ST_TO_ADDR
// if tmp then
5422: LD_VAR 0 3
5426: IFFALSE 5550
// begin if not GetSide ( tmp ) in [ 0 , botSides [ 1 ] ] then
5428: LD_VAR 0 3
5432: PPUSH
5433: CALL_OW 255
5437: PUSH
5438: LD_INT 0
5440: PUSH
5441: LD_EXP 3
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: IN
5454: NOT
5455: IFFALSE 5550
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5457: LD_EXP 13
5461: PUSH
5462: LD_VAR 0 2
5466: ARRAY
5467: PPUSH
5468: LD_EXP 13
5472: PUSH
5473: LD_VAR 0 2
5477: PUSH
5478: LD_INT 1
5480: PLUS
5481: ARRAY
5482: PPUSH
5483: LD_EXP 3
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: PPUSH
5492: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5496: LD_ADDR_EXP 13
5500: PUSH
5501: LD_EXP 13
5505: PPUSH
5506: LD_VAR 0 2
5510: PPUSH
5511: CALL_OW 3
5515: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5516: LD_ADDR_EXP 13
5520: PUSH
5521: LD_EXP 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// p := p - 2 ;
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_VAR 0 2
5545: PUSH
5546: LD_INT 2
5548: MINUS
5549: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5550: LD_ADDR_VAR 0 2
5554: PUSH
5555: LD_VAR 0 2
5559: PUSH
5560: LD_INT 2
5562: PLUS
5563: ST_TO_ADDR
// end ;
5564: GO 5383
5566: POP
5567: POP
// end ;
5568: PPOPN 3
5570: END
// every 6 6$00 trigger IsOk ( arDep ) do var un ;
5571: LD_INT 2
5573: PPUSH
5574: CALL_OW 302
5578: IFFALSE 5901
5580: GO 5582
5582: DISABLE
5583: LD_INT 0
5585: PPUSH
// begin enable ;
5586: ENABLE
// if UnitsInside ( arFac ) < 3 then
5587: LD_INT 12
5589: PPUSH
5590: CALL_OW 313
5594: PUSH
5595: LD_INT 3
5597: LESS
5598: IFFALSE 5727
// begin arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
5600: LD_ADDR_EXP 11
5604: PUSH
5605: LD_EXP 11
5609: PPUSH
5610: CALL 55221 0 1
5614: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
5615: LD_ADDR_OWVAR 20
5619: PUSH
5620: LD_EXP 3
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: ST_TO_ADDR
// uc_nation := nation_arabian ;
5629: LD_ADDR_OWVAR 21
5633: PUSH
5634: LD_INT 2
5636: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
5637: LD_INT 0
5639: PPUSH
5640: LD_INT 3
5642: PUSH
5643: LD_INT 6
5645: PUSH
5646: LD_INT 9
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: PUSH
5654: LD_OWVAR 67
5658: ARRAY
5659: PPUSH
5660: CALL_OW 383
// un := CreateHuman ;
5664: LD_ADDR_VAR 0 1
5668: PUSH
5669: CALL_OW 44
5673: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
5674: LD_VAR 0 1
5678: PPUSH
5679: LD_INT 143
5681: PPUSH
5682: LD_INT 29
5684: PPUSH
5685: LD_INT 0
5687: PPUSH
5688: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
5692: LD_VAR 0 1
5696: PPUSH
5697: LD_INT 115
5699: PPUSH
5700: LD_INT 52
5702: PPUSH
5703: CALL_OW 111
// arForce := Join ( arForce , un ) ;
5707: LD_ADDR_EXP 14
5711: PUSH
5712: LD_EXP 14
5716: PPUSH
5717: LD_VAR 0 1
5721: PPUSH
5722: CALL 53826 0 2
5726: ST_TO_ADDR
// end ; arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5727: LD_ADDR_EXP 6
5731: PUSH
5732: LD_EXP 6
5736: PUSH
5737: LD_INT 14
5739: PUSH
5740: LD_INT 1
5742: PUSH
5743: LD_INT 2
5745: PUSH
5746: LD_INT 27
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: PUSH
5755: LD_INT 14
5757: PUSH
5758: LD_INT 1
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: LD_INT 28
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 14
5775: PUSH
5776: LD_INT 1
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_INT 28
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: ADD
5796: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5797: LD_OWVAR 67
5801: PUSH
5802: LD_INT 1
5804: GREATER
5805: IFFALSE 5829
5807: PUSH
5808: LD_INT 72
5810: PPUSH
5811: LD_EXP 3
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: PPUSH
5820: CALL_OW 321
5824: PUSH
5825: LD_INT 2
5827: EQUAL
5828: AND
5829: IFFALSE 5901
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5831: LD_ADDR_EXP 6
5835: PUSH
5836: LD_EXP 6
5840: PUSH
5841: LD_INT 14
5843: PUSH
5844: LD_INT 3
5846: PUSH
5847: LD_INT 2
5849: PUSH
5850: LD_INT 29
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: PUSH
5859: LD_INT 14
5861: PUSH
5862: LD_INT 3
5864: PUSH
5865: LD_INT 2
5867: PUSH
5868: LD_INT 29
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: PUSH
5877: LD_INT 14
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 2
5885: PUSH
5886: LD_INT 29
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: ADD
5900: ST_TO_ADDR
// end ; end_of_file
5901: PPOPN 1
5903: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
// mpGameType := GameTypeCoop ;
5911: LD_ADDR_EXP 41
5915: PUSH
5916: LD_INT 4
5918: ST_TO_ADDR
// multi_settings_counter := 6 ;
5919: LD_ADDR_EXP 29
5923: PUSH
5924: LD_INT 6
5926: ST_TO_ADDR
// multi_settings := [ ] ;
5927: LD_ADDR_EXP 28
5931: PUSH
5932: EMPTY
5933: ST_TO_ADDR
// if Multiplayer then
5934: LD_OWVAR 4
5938: IFFALSE 6118
// begin your_side := mp_player_side ;
5940: LD_ADDR_OWVAR 2
5944: PUSH
5945: LD_OWVAR 7
5949: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5950: LD_ADDR_EXP 17
5954: PUSH
5955: LD_OWVAR 6
5959: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5960: LD_ADDR_EXP 18
5964: PUSH
5965: LD_OWVAR 17
5969: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5970: LD_ADDR_EXP 19
5974: PUSH
5975: LD_OWVAR 15
5979: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5980: LD_ADDR_EXP 20
5984: PUSH
5985: LD_OWVAR 16
5989: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5990: LD_ADDR_EXP 21
5994: PUSH
5995: EMPTY
5996: PUSH
5997: EMPTY
5998: LIST
5999: ST_TO_ADDR
// for i in mp_teams do
6000: LD_ADDR_VAR 0 2
6004: PUSH
6005: LD_OWVAR 12
6009: PUSH
6010: FOR_IN
6011: IFFALSE 6054
// if i then
6013: LD_VAR 0 2
6017: IFFALSE 6052
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
6019: LD_ADDR_EXP 21
6023: PUSH
6024: LD_EXP 21
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: LD_EXP 21
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: UNION
6046: PPUSH
6047: CALL_OW 1
6051: ST_TO_ADDR
6052: GO 6010
6054: POP
6055: POP
// for i := 1 to multi_settings_counter do
6056: LD_ADDR_VAR 0 2
6060: PUSH
6061: DOUBLE
6062: LD_INT 1
6064: DEC
6065: ST_TO_ADDR
6066: LD_EXP 29
6070: PUSH
6071: FOR_TO
6072: IFFALSE 6114
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
6074: LD_ADDR_EXP 28
6078: PUSH
6079: LD_EXP 28
6083: PPUSH
6084: LD_EXP 28
6088: PUSH
6089: LD_INT 1
6091: PLUS
6092: PPUSH
6093: LD_VAR 0 2
6097: PPUSH
6098: CALL_OW 426
6102: PUSH
6103: LD_INT 1
6105: PLUS
6106: PPUSH
6107: CALL_OW 1
6111: ST_TO_ADDR
6112: GO 6071
6114: POP
6115: POP
// end else
6116: GO 6304
// begin your_side := 3 ;
6118: LD_ADDR_OWVAR 2
6122: PUSH
6123: LD_INT 3
6125: ST_TO_ADDR
// multi_gametype := 1 ;
6126: LD_ADDR_EXP 17
6130: PUSH
6131: LD_INT 1
6133: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 0 , 0 , 0 , 3 ] ;
6134: LD_ADDR_EXP 18
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 1
6147: PUSH
6148: LD_INT 2
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: LD_INT 0
6156: PUSH
6157: LD_INT 0
6159: PUSH
6160: LD_INT 3
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 ] ;
6173: LD_ADDR_EXP 19
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 1
6186: PUSH
6187: LD_INT 1
6189: PUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: LD_INT 1
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 0 , 0 , 0 , 3 ] ;
6212: LD_ADDR_EXP 20
6216: PUSH
6217: LD_INT 0
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 8 ] ] ;
6251: LD_ADDR_EXP 21
6255: PUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 4
6261: PUSH
6262: LD_INT 8
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6273: LD_ADDR_EXP 28
6277: PUSH
6278: LD_INT 2
6280: PUSH
6281: LD_INT 4
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
6304: LD_ADDR_EXP 42
6308: PUSH
6309: LD_EXP 18
6313: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6314: LD_ADDR_EXP 22
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: LD_INT 0
6339: PUSH
6340: LD_INT 0
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6353: LD_ADDR_EXP 25
6357: PUSH
6358: LD_INT 0
6360: PUSH
6361: LD_INT 0
6363: PUSH
6364: LD_INT 0
6366: PUSH
6367: LD_INT 0
6369: PUSH
6370: LD_INT 0
6372: PUSH
6373: LD_INT 0
6375: PUSH
6376: LD_INT 0
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6392: LD_ADDR_EXP 36
6396: PUSH
6397: LD_INT 0
6399: PUSH
6400: LD_INT 0
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: LD_INT 0
6417: PUSH
6418: LD_INT 0
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: ST_TO_ADDR
// multi_teamgame := true ;
6431: LD_ADDR_EXP 26
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6439: LD_ADDR_EXP 24
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: ST_TO_ADDR
// multi_custom_commanders := true ;
6450: LD_ADDR_EXP 27
6454: PUSH
6455: LD_INT 1
6457: ST_TO_ADDR
// multi_commanders := [ ] ;
6458: LD_ADDR_EXP 35
6462: PUSH
6463: EMPTY
6464: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6465: LD_ADDR_EXP 38
6469: PUSH
6470: EMPTY
6471: ST_TO_ADDR
// multi_players_amount := 0 ;
6472: LD_ADDR_EXP 37
6476: PUSH
6477: LD_INT 0
6479: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6480: LD_ADDR_EXP 23
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: LD_INT 6
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 7
6497: PUSH
6498: LD_INT 8
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 9
6507: PUSH
6508: LD_INT 10
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6520: LD_ADDR_EXP 40
6524: PUSH
6525: EMPTY
6526: PUSH
6527: EMPTY
6528: PUSH
6529: EMPTY
6530: PUSH
6531: EMPTY
6532: PUSH
6533: EMPTY
6534: PUSH
6535: EMPTY
6536: PUSH
6537: EMPTY
6538: PUSH
6539: EMPTY
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: ST_TO_ADDR
// for i := 1 to 8 do
6551: LD_ADDR_VAR 0 2
6555: PUSH
6556: DOUBLE
6557: LD_INT 1
6559: DEC
6560: ST_TO_ADDR
6561: LD_INT 8
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6900
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6567: LD_VAR 0 2
6571: PPUSH
6572: CALL_OW 530
6576: IFFALSE 6734
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6578: LD_ADDR_EXP 22
6582: PUSH
6583: LD_EXP 22
6587: PPUSH
6588: LD_VAR 0 2
6592: PPUSH
6593: LD_INT 1
6595: PPUSH
6596: CALL_OW 1
6600: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6601: LD_ADDR_EXP 20
6605: PUSH
6606: LD_EXP 20
6610: PPUSH
6611: LD_VAR 0 2
6615: PPUSH
6616: LD_INT 0
6618: PPUSH
6619: CALL_OW 1
6623: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6624: LD_ADDR_EXP 18
6628: PUSH
6629: LD_EXP 18
6633: PPUSH
6634: LD_VAR 0 2
6638: PPUSH
6639: LD_INT 0
6641: PPUSH
6642: CALL_OW 1
6646: ST_TO_ADDR
// for j := 1 to multi_teams do
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: DOUBLE
6653: LD_INT 1
6655: DEC
6656: ST_TO_ADDR
6657: LD_EXP 21
6661: PUSH
6662: FOR_TO
6663: IFFALSE 6732
// begin if i in multi_teams [ j ] then
6665: LD_VAR 0 2
6669: PUSH
6670: LD_EXP 21
6674: PUSH
6675: LD_VAR 0 3
6679: ARRAY
6680: IN
6681: IFFALSE 6730
// begin tmp := multi_teams [ j ] diff i ;
6683: LD_ADDR_VAR 0 5
6687: PUSH
6688: LD_EXP 21
6692: PUSH
6693: LD_VAR 0 3
6697: ARRAY
6698: PUSH
6699: LD_VAR 0 2
6703: DIFF
6704: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6705: LD_ADDR_EXP 21
6709: PUSH
6710: LD_EXP 21
6714: PPUSH
6715: LD_VAR 0 3
6719: PPUSH
6720: LD_VAR 0 5
6724: PPUSH
6725: CALL_OW 1
6729: ST_TO_ADDR
// end ; end ;
6730: GO 6662
6732: POP
6733: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6734: LD_EXP 20
6738: PUSH
6739: LD_VAR 0 2
6743: ARRAY
6744: IFFALSE 6765
6746: PUSH
6747: LD_EXP 20
6751: PUSH
6752: LD_VAR 0 2
6756: ARRAY
6757: PUSH
6758: LD_EXP 24
6762: IN
6763: NOT
6764: AND
6765: IFFALSE 6806
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6767: LD_ADDR_EXP 20
6771: PUSH
6772: LD_EXP 20
6776: PPUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_EXP 24
6786: PUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_EXP 24
6794: PPUSH
6795: CALL_OW 12
6799: ARRAY
6800: PPUSH
6801: CALL_OW 1
6805: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6806: LD_EXP 20
6810: PUSH
6811: LD_VAR 0 2
6815: ARRAY
6816: NOT
6817: IFFALSE 6832
6819: PUSH
6820: LD_EXP 18
6824: PUSH
6825: LD_VAR 0 2
6829: ARRAY
6830: NOT
6831: AND
6832: IFFALSE 6847
6834: PUSH
6835: LD_EXP 22
6839: PUSH
6840: LD_VAR 0 2
6844: ARRAY
6845: NOT
6846: AND
6847: IFFALSE 6872
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6849: LD_ADDR_EXP 25
6853: PUSH
6854: LD_EXP 25
6858: PPUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_INT 1
6866: PPUSH
6867: CALL_OW 1
6871: ST_TO_ADDR
// if multi_sides [ i ] then
6872: LD_EXP 18
6876: PUSH
6877: LD_VAR 0 2
6881: ARRAY
6882: IFFALSE 6898
// multi_players_amount := multi_players_amount + 1 ;
6884: LD_ADDR_EXP 37
6888: PUSH
6889: LD_EXP 37
6893: PUSH
6894: LD_INT 1
6896: PLUS
6897: ST_TO_ADDR
// end ;
6898: GO 6564
6900: POP
6901: POP
// for i in multi_teams do
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: LD_EXP 21
6911: PUSH
6912: FOR_IN
6913: IFFALSE 7021
// begin for j := 2 to i do
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: DOUBLE
6921: LD_INT 2
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 2
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7017
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6933: LD_VAR 0 2
6937: PUSH
6938: LD_VAR 0 3
6942: ARRAY
6943: PPUSH
6944: LD_VAR 0 2
6948: PUSH
6949: LD_INT 1
6951: ARRAY
6952: PPUSH
6953: CALL_OW 343
// for x := 1 to j - 1 do
6957: LD_ADDR_VAR 0 4
6961: PUSH
6962: DOUBLE
6963: LD_INT 1
6965: DEC
6966: ST_TO_ADDR
6967: LD_VAR 0 3
6971: PUSH
6972: LD_INT 1
6974: MINUS
6975: PUSH
6976: FOR_TO
6977: IFFALSE 7013
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6979: LD_VAR 0 2
6983: PUSH
6984: LD_VAR 0 3
6988: ARRAY
6989: PPUSH
6990: LD_VAR 0 2
6994: PUSH
6995: LD_VAR 0 4
6999: ARRAY
7000: PPUSH
7001: LD_INT 1
7003: PPUSH
7004: LD_INT 1
7006: PPUSH
7007: CALL_OW 80
7011: GO 6976
7013: POP
7014: POP
// end ;
7015: GO 6930
7017: POP
7018: POP
// end ;
7019: GO 6912
7021: POP
7022: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
7023: LD_ADDR_OWVAR 67
7027: PUSH
7028: LD_INT 1
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: PUSH
7042: LD_EXP 28
7046: PUSH
7047: LD_INT 1
7049: ARRAY
7050: ARRAY
7051: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
7052: LD_ADDR_EXP 30
7056: PUSH
7057: LD_INT 9
7059: PUSH
7060: LD_INT 12
7062: PUSH
7063: LD_INT 15
7065: PUSH
7066: LD_INT 18
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: LD_EXP 28
7079: PUSH
7080: LD_INT 2
7082: ARRAY
7083: ARRAY
7084: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
7085: LD_ADDR_EXP 31
7089: PUSH
7090: LD_INT 1
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: LD_INT 3
7098: PUSH
7099: LD_INT 5
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: PUSH
7108: LD_EXP 28
7112: PUSH
7113: LD_INT 3
7115: ARRAY
7116: ARRAY
7117: ST_TO_ADDR
// multi_crates_spawn := [ [ 5000 , 0 0$32 ] , [ 8000 , 0 0$22 ] , [ 11000 , 0 0$14 ] , [ 14000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
7118: LD_ADDR_EXP 32
7122: PUSH
7123: LD_INT 5000
7125: PUSH
7126: LD_INT 1120
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 8000
7135: PUSH
7136: LD_INT 770
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 11000
7145: PUSH
7146: LD_INT 490
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 14000
7155: PUSH
7156: LD_INT 420
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: PUSH
7169: LD_EXP 28
7173: PUSH
7174: LD_INT 4
7176: ARRAY
7177: ARRAY
7178: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
7179: LD_ADDR_EXP 33
7183: PUSH
7184: LD_INT 0
7186: PUSH
7187: LD_INT 1
7189: PUSH
7190: LD_INT 2
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: PUSH
7202: LD_EXP 28
7206: PUSH
7207: LD_INT 5
7209: ARRAY
7210: ARRAY
7211: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
7212: LD_ADDR_EXP 34
7216: PUSH
7217: LD_INT 0
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: LD_INT 2
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: LD_EXP 28
7235: PUSH
7236: LD_INT 6
7238: ARRAY
7239: ARRAY
7240: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7241: LD_ADDR_EXP 39
7245: PUSH
7246: LD_INT 10500
7248: PUSH
7249: LD_INT 31500
7251: PUSH
7252: LD_INT 52500
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: PUSH
7260: LD_OWVAR 67
7264: ARRAY
7265: ST_TO_ADDR
// end ;
7266: LD_VAR 0 1
7270: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7271: LD_INT 0
7273: PPUSH
7274: PPUSH
// if not multi_sides [ preferSide ] then
7275: LD_EXP 18
7279: PUSH
7280: LD_VAR 0 1
7284: ARRAY
7285: NOT
7286: IFFALSE 7300
// begin result := preferSide ;
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: LD_VAR 0 1
7297: ST_TO_ADDR
// exit ;
7298: GO 7347
// end ; for i := 1 to 8 do
7300: LD_ADDR_VAR 0 3
7304: PUSH
7305: DOUBLE
7306: LD_INT 1
7308: DEC
7309: ST_TO_ADDR
7310: LD_INT 8
7312: PUSH
7313: FOR_TO
7314: IFFALSE 7345
// if not multi_sides [ i ] then
7316: LD_EXP 18
7320: PUSH
7321: LD_VAR 0 3
7325: ARRAY
7326: NOT
7327: IFFALSE 7343
// begin result := i ;
7329: LD_ADDR_VAR 0 2
7333: PUSH
7334: LD_VAR 0 3
7338: ST_TO_ADDR
// exit ;
7339: POP
7340: POP
7341: GO 7347
// end ;
7343: GO 7313
7345: POP
7346: POP
// end ;
7347: LD_VAR 0 2
7351: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7352: LD_INT 0
7354: PPUSH
// uc_side := side ;
7355: LD_ADDR_OWVAR 20
7359: PUSH
7360: LD_VAR 0 1
7364: ST_TO_ADDR
// uc_nation := nation_russian ;
7365: LD_ADDR_OWVAR 21
7369: PUSH
7370: LD_INT 3
7372: ST_TO_ADDR
// hc_importance := 100 ;
7373: LD_ADDR_OWVAR 32
7377: PUSH
7378: LD_INT 100
7380: ST_TO_ADDR
// if num = 1 then
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: EQUAL
7389: IFFALSE 7456
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7391: LD_INT 1
7393: PPUSH
7394: LD_EXP 31
7398: PUSH
7399: LD_INT 1
7401: PLUS
7402: PPUSH
7403: CALL_OW 381
// hc_gallery := ru ;
7407: LD_ADDR_OWVAR 33
7411: PUSH
7412: LD_STRING ru
7414: ST_TO_ADDR
// hc_face_number := 25 ;
7415: LD_ADDR_OWVAR 34
7419: PUSH
7420: LD_INT 25
7422: ST_TO_ADDR
// hc_name := Xavier ;
7423: LD_ADDR_OWVAR 26
7427: PUSH
7428: LD_STRING Xavier
7430: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7431: LD_ADDR_OWVAR 29
7435: PUSH
7436: LD_INT 12
7438: PUSH
7439: LD_INT 10
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: ST_TO_ADDR
// result := CreateHuman ;
7446: LD_ADDR_VAR 0 3
7450: PUSH
7451: CALL_OW 44
7455: ST_TO_ADDR
// end ; if num = 2 then
7456: LD_VAR 0 2
7460: PUSH
7461: LD_INT 2
7463: EQUAL
7464: IFFALSE 7531
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7466: LD_INT 1
7468: PPUSH
7469: LD_EXP 31
7473: PUSH
7474: LD_INT 2
7476: PLUS
7477: PPUSH
7478: CALL_OW 383
// hc_gallery := ru ;
7482: LD_ADDR_OWVAR 33
7486: PUSH
7487: LD_STRING ru
7489: ST_TO_ADDR
// hc_face_number := 1 ;
7490: LD_ADDR_OWVAR 34
7494: PUSH
7495: LD_INT 1
7497: ST_TO_ADDR
// hc_name := Burlak ;
7498: LD_ADDR_OWVAR 26
7502: PUSH
7503: LD_STRING Burlak
7505: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7506: LD_ADDR_OWVAR 29
7510: PUSH
7511: LD_INT 10
7513: PUSH
7514: LD_INT 11
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// result := CreateHuman ;
7521: LD_ADDR_VAR 0 3
7525: PUSH
7526: CALL_OW 44
7530: ST_TO_ADDR
// end ; if num = 3 then
7531: LD_VAR 0 2
7535: PUSH
7536: LD_INT 3
7538: EQUAL
7539: IFFALSE 7606
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7541: LD_INT 1
7543: PPUSH
7544: LD_EXP 31
7548: PUSH
7549: LD_INT 1
7551: PLUS
7552: PPUSH
7553: CALL_OW 381
// hc_gallery := ru ;
7557: LD_ADDR_OWVAR 33
7561: PUSH
7562: LD_STRING ru
7564: ST_TO_ADDR
// hc_face_number := 18 ;
7565: LD_ADDR_OWVAR 34
7569: PUSH
7570: LD_INT 18
7572: ST_TO_ADDR
// hc_name := Vsevolod ;
7573: LD_ADDR_OWVAR 26
7577: PUSH
7578: LD_STRING Vsevolod
7580: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7581: LD_ADDR_OWVAR 29
7585: PUSH
7586: LD_INT 12
7588: PUSH
7589: LD_INT 11
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: ST_TO_ADDR
// result := CreateHuman ;
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: CALL_OW 44
7605: ST_TO_ADDR
// end ; end ;
7606: LD_VAR 0 3
7610: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
7615: PPUSH
// if not multi_apeman then
7616: LD_EXP 33
7620: NOT
7621: IFFALSE 7625
// exit ;
7623: GO 7703
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7625: LD_ADDR_VAR 0 3
7629: PUSH
7630: LD_INT 6
7632: PUSH
7633: LD_INT 9
7635: PUSH
7636: LD_INT 12
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: PUSH
7644: LD_EXP 33
7648: ARRAY
7649: ST_TO_ADDR
// for i := 1 to tmp do
7650: LD_ADDR_VAR 0 2
7654: PUSH
7655: DOUBLE
7656: LD_INT 1
7658: DEC
7659: ST_TO_ADDR
7660: LD_VAR 0 3
7664: PUSH
7665: FOR_TO
7666: IFFALSE 7701
// begin uc_side := 0 ;
7668: LD_ADDR_OWVAR 20
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7676: LD_INT 5
7678: NEG
7679: PPUSH
7680: CALL 49953 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7684: CALL_OW 44
7688: PPUSH
7689: LD_INT 21
7691: PPUSH
7692: LD_INT 0
7694: PPUSH
7695: CALL_OW 49
// end ;
7699: GO 7665
7701: POP
7702: POP
// end ;
7703: LD_VAR 0 1
7707: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
// for i := 1 to 8 do
7720: LD_ADDR_VAR 0 2
7724: PUSH
7725: DOUBLE
7726: LD_INT 1
7728: DEC
7729: ST_TO_ADDR
7730: LD_INT 8
7732: PUSH
7733: FOR_TO
7734: IFFALSE 8914
// begin if not multi_sides [ i ] then
7736: LD_EXP 18
7740: PUSH
7741: LD_VAR 0 2
7745: ARRAY
7746: NOT
7747: IFFALSE 7751
// continue ;
7749: GO 7733
// if multi_buildings [ multi_sides [ i ] ] then
7751: LD_EXP 40
7755: PUSH
7756: LD_EXP 18
7760: PUSH
7761: LD_VAR 0 2
7765: ARRAY
7766: ARRAY
7767: IFFALSE 8001
// begin uc_side := i ;
7769: LD_ADDR_OWVAR 20
7773: PUSH
7774: LD_VAR 0 2
7778: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7779: LD_ADDR_OWVAR 21
7783: PUSH
7784: LD_EXP 20
7788: PUSH
7789: LD_VAR 0 2
7793: ARRAY
7794: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7795: LD_ADDR_VAR 0 3
7799: PUSH
7800: LD_EXP 40
7804: PUSH
7805: LD_EXP 18
7809: PUSH
7810: LD_VAR 0 2
7814: ARRAY
7815: ARRAY
7816: PUSH
7817: FOR_IN
7818: IFFALSE 7999
// begin bc_type := j [ 1 ] ;
7820: LD_ADDR_OWVAR 42
7824: PUSH
7825: LD_VAR 0 3
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: ST_TO_ADDR
// bc_level := 2 ;
7834: LD_ADDR_OWVAR 43
7838: PUSH
7839: LD_INT 2
7841: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7842: LD_ADDR_VAR 0 4
7846: PUSH
7847: LD_VAR 0 3
7851: PUSH
7852: LD_INT 2
7854: ARRAY
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: PPUSH
7860: LD_VAR 0 3
7864: PUSH
7865: LD_INT 2
7867: ARRAY
7868: PUSH
7869: LD_INT 2
7871: ARRAY
7872: PPUSH
7873: LD_VAR 0 3
7877: PUSH
7878: LD_INT 2
7880: ARRAY
7881: PUSH
7882: LD_INT 3
7884: ARRAY
7885: PPUSH
7886: CALL_OW 47
7890: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7891: LD_VAR 0 3
7895: PUSH
7896: LD_INT 1
7898: ARRAY
7899: PUSH
7900: LD_INT 0
7902: EQUAL
7903: IFFALSE 7997
// begin SetBName ( b , j [ 3 ] ) ;
7905: LD_VAR 0 4
7909: PPUSH
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 3
7917: ARRAY
7918: PPUSH
7919: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7923: LD_VAR 0 4
7927: PPUSH
7928: CALL_OW 274
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: LD_INT 120
7938: PUSH
7939: LD_INT 100
7941: PUSH
7942: LD_INT 80
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: LD_OWVAR 67
7954: ARRAY
7955: PPUSH
7956: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7960: LD_VAR 0 4
7964: PPUSH
7965: CALL_OW 274
7969: PPUSH
7970: LD_INT 2
7972: PPUSH
7973: LD_INT 90
7975: PUSH
7976: LD_INT 60
7978: PUSH
7979: LD_INT 30
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: PPUSH
7993: CALL_OW 277
// end ; end ;
7997: GO 7817
7999: POP
8000: POP
// end ; if multi_custom_commanders then
8001: LD_EXP 27
8005: IFFALSE 8214
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
8007: LD_ADDR_VAR 0 6
8011: PUSH
8012: LD_VAR 0 2
8016: PPUSH
8017: LD_EXP 18
8021: PUSH
8022: LD_VAR 0 2
8026: ARRAY
8027: PPUSH
8028: CALL 7352 0 2
8032: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
8033: LD_ADDR_EXP 35
8037: PUSH
8038: LD_EXP 35
8042: PPUSH
8043: LD_EXP 35
8047: PUSH
8048: LD_INT 1
8050: PLUS
8051: PPUSH
8052: LD_VAR 0 6
8056: PPUSH
8057: CALL_OW 2
8061: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 257
8071: PUSH
8072: LD_INT 3
8074: EQUAL
8075: IFFALSE 8179
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
8077: LD_INT 23
8079: PPUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_INT 1
8085: PPUSH
8086: LD_INT 46
8088: PPUSH
8089: LD_INT 80
8091: PPUSH
8092: CALL 20656 0 5
// veh := CreateVehicle ;
8096: LD_ADDR_VAR 0 7
8100: PUSH
8101: CALL_OW 45
8105: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
8106: LD_VAR 0 7
8110: PPUSH
8111: LD_VAR 0 6
8115: PPUSH
8116: CALL_OW 255
8120: PUSH
8121: LD_INT 1
8123: NEG
8124: MUL
8125: PPUSH
8126: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8130: LD_VAR 0 7
8134: PPUSH
8135: LD_EXP 23
8139: PUSH
8140: LD_EXP 18
8144: PUSH
8145: LD_VAR 0 2
8149: ARRAY
8150: ARRAY
8151: PUSH
8152: LD_INT 2
8154: ARRAY
8155: PPUSH
8156: LD_INT 0
8158: PPUSH
8159: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8163: LD_VAR 0 6
8167: PPUSH
8168: LD_VAR 0 7
8172: PPUSH
8173: CALL_OW 52
// end else
8177: GO 8212
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8179: LD_VAR 0 6
8183: PPUSH
8184: LD_EXP 23
8188: PUSH
8189: LD_EXP 18
8193: PUSH
8194: LD_VAR 0 2
8198: ARRAY
8199: ARRAY
8200: PUSH
8201: LD_INT 1
8203: ARRAY
8204: PPUSH
8205: LD_INT 0
8207: PPUSH
8208: CALL_OW 49
// end else
8212: GO 8425
// begin uc_side := i ;
8214: LD_ADDR_OWVAR 20
8218: PUSH
8219: LD_VAR 0 2
8223: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8224: LD_ADDR_OWVAR 21
8228: PUSH
8229: LD_EXP 20
8233: PUSH
8234: LD_VAR 0 2
8238: ARRAY
8239: ST_TO_ADDR
// hc_importance := 100 ;
8240: LD_ADDR_OWVAR 32
8244: PUSH
8245: LD_INT 100
8247: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8248: LD_INT 0
8250: PPUSH
8251: LD_INT 1
8253: PPUSH
8254: LD_EXP 31
8258: PPUSH
8259: CALL_OW 380
// if multiplayer then
8263: LD_OWVAR 4
8267: IFFALSE 8325
// begin hc_name := mp_sides_players_names [ i ] ;
8269: LD_ADDR_OWVAR 26
8273: PUSH
8274: LD_OWVAR 19
8278: PUSH
8279: LD_VAR 0 2
8283: ARRAY
8284: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8285: LD_ADDR_OWVAR 33
8289: PUSH
8290: LD_STRING MULTIAVATARS
8292: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8293: LD_ADDR_OWVAR 34
8297: PUSH
8298: LD_VAR 0 2
8302: PPUSH
8303: CALL_OW 525
8307: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8308: LD_ADDR_OWVAR 27
8312: PUSH
8313: LD_VAR 0 2
8317: PPUSH
8318: CALL_OW 526
8322: ST_TO_ADDR
// end else
8323: GO 8357
// begin hc_gallery :=  ;
8325: LD_ADDR_OWVAR 33
8329: PUSH
8330: LD_STRING 
8332: ST_TO_ADDR
// hc_name :=  ;
8333: LD_ADDR_OWVAR 26
8337: PUSH
8338: LD_STRING 
8340: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8341: LD_ADDR_OWVAR 27
8345: PUSH
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 2
8351: PPUSH
8352: CALL_OW 12
8356: ST_TO_ADDR
// end ; un := CreateHuman ;
8357: LD_ADDR_VAR 0 6
8361: PUSH
8362: CALL_OW 44
8366: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8367: LD_VAR 0 6
8371: PPUSH
8372: LD_EXP 23
8376: PUSH
8377: LD_EXP 18
8381: PUSH
8382: LD_VAR 0 2
8386: ARRAY
8387: ARRAY
8388: PUSH
8389: LD_INT 1
8391: ARRAY
8392: PPUSH
8393: LD_INT 0
8395: PPUSH
8396: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8400: LD_ADDR_EXP 35
8404: PUSH
8405: LD_EXP 35
8409: PPUSH
8410: LD_VAR 0 2
8414: PPUSH
8415: LD_VAR 0 6
8419: PPUSH
8420: CALL_OW 1
8424: ST_TO_ADDR
// end ; InitHc ;
8425: CALL_OW 19
// InitUc ;
8429: CALL_OW 18
// uc_side := i ;
8433: LD_ADDR_OWVAR 20
8437: PUSH
8438: LD_VAR 0 2
8442: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8443: LD_ADDR_OWVAR 21
8447: PUSH
8448: LD_EXP 20
8452: PUSH
8453: LD_VAR 0 2
8457: ARRAY
8458: ST_TO_ADDR
// hc_gallery :=  ;
8459: LD_ADDR_OWVAR 33
8463: PUSH
8464: LD_STRING 
8466: ST_TO_ADDR
// hc_name :=  ;
8467: LD_ADDR_OWVAR 26
8471: PUSH
8472: LD_STRING 
8474: ST_TO_ADDR
// hc_importance := 0 ;
8475: LD_ADDR_OWVAR 32
8479: PUSH
8480: LD_INT 0
8482: ST_TO_ADDR
// cl := 1 ;
8483: LD_ADDR_VAR 0 5
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8491: LD_ADDR_VAR 0 3
8495: PUSH
8496: DOUBLE
8497: LD_INT 2
8499: DEC
8500: ST_TO_ADDR
8501: LD_EXP 30
8505: PUSH
8506: FOR_TO
8507: IFFALSE 8910
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 1
8516: MINUS
8517: PUSH
8518: LD_EXP 30
8522: PUSH
8523: LD_INT 1
8525: MINUS
8526: PUSH
8527: LD_INT 4
8529: DIVREAL
8530: MOD
8531: PUSH
8532: LD_INT 0
8534: EQUAL
8535: IFFALSE 8551
// cl := cl + 1 ;
8537: LD_ADDR_VAR 0 5
8541: PUSH
8542: LD_VAR 0 5
8546: PUSH
8547: LD_INT 1
8549: PLUS
8550: ST_TO_ADDR
// if cl > 4 then
8551: LD_VAR 0 5
8555: PUSH
8556: LD_INT 4
8558: GREATER
8559: IFFALSE 8569
// cl := 1 ;
8561: LD_ADDR_VAR 0 5
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8569: LD_INT 0
8571: PPUSH
8572: LD_VAR 0 5
8576: PPUSH
8577: LD_EXP 31
8581: PPUSH
8582: CALL_OW 380
// un := CreateHuman ;
8586: LD_ADDR_VAR 0 6
8590: PUSH
8591: CALL_OW 44
8595: ST_TO_ADDR
// if j > copy then
8596: LD_VAR 0 3
8600: PUSH
8601: LD_VAR 0 9
8605: GREATER
8606: IFFALSE 8635
// copy := Replace ( copy , j , un ) else
8608: LD_ADDR_VAR 0 9
8612: PUSH
8613: LD_VAR 0 9
8617: PPUSH
8618: LD_VAR 0 3
8622: PPUSH
8623: LD_VAR 0 6
8627: PPUSH
8628: CALL_OW 1
8632: ST_TO_ADDR
8633: GO 8717
// begin CopySkills ( copy [ j ] , un ) ;
8635: LD_VAR 0 9
8639: PUSH
8640: LD_VAR 0 3
8644: ARRAY
8645: PPUSH
8646: LD_VAR 0 6
8650: PPUSH
8651: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8655: LD_VAR 0 6
8659: PPUSH
8660: LD_INT 2
8662: PPUSH
8663: LD_VAR 0 9
8667: PUSH
8668: LD_VAR 0 3
8672: ARRAY
8673: PPUSH
8674: LD_INT 2
8676: PPUSH
8677: CALL_OW 260
8681: PPUSH
8682: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8686: LD_VAR 0 6
8690: PPUSH
8691: LD_INT 1
8693: PPUSH
8694: LD_VAR 0 9
8698: PUSH
8699: LD_VAR 0 3
8703: ARRAY
8704: PPUSH
8705: LD_INT 1
8707: PPUSH
8708: CALL_OW 260
8712: PPUSH
8713: CALL_OW 239
// end ; if multi_pos_area then
8717: LD_EXP 23
8721: IFFALSE 8908
// begin if GetClass ( un ) = 3 then
8723: LD_VAR 0 6
8727: PPUSH
8728: CALL_OW 257
8732: PUSH
8733: LD_INT 3
8735: EQUAL
8736: IFFALSE 8875
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8738: LD_INT 22
8740: PPUSH
8741: LD_INT 1
8743: PPUSH
8744: LD_INT 1
8746: PPUSH
8747: LD_INT 44
8749: PUSH
8750: LD_INT 44
8752: PUSH
8753: LD_INT 43
8755: PUSH
8756: LD_INT 51
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: PUSH
8765: LD_VAR 0 3
8769: PUSH
8770: LD_INT 4
8772: MOD
8773: PUSH
8774: LD_INT 1
8776: PLUS
8777: ARRAY
8778: PPUSH
8779: LD_INT 80
8781: PPUSH
8782: CALL 20656 0 5
// veh := CreateVehicle ;
8786: LD_ADDR_VAR 0 7
8790: PUSH
8791: CALL_OW 45
8795: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8796: LD_VAR 0 7
8800: PPUSH
8801: LD_EXP 23
8805: PUSH
8806: LD_EXP 18
8810: PUSH
8811: LD_VAR 0 2
8815: ARRAY
8816: ARRAY
8817: PUSH
8818: LD_INT 2
8820: ARRAY
8821: PPUSH
8822: LD_INT 0
8824: PPUSH
8825: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8829: LD_VAR 0 6
8833: PPUSH
8834: LD_VAR 0 7
8838: PPUSH
8839: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8843: LD_VAR 0 7
8847: PPUSH
8848: CALL_OW 264
8852: PUSH
8853: LD_INT 51
8855: EQUAL
8856: IFFALSE 8873
// SetCargo ( veh , mat_cans , 100 ) ;
8858: LD_VAR 0 7
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: LD_INT 100
8868: PPUSH
8869: CALL_OW 290
// continue ;
8873: GO 8506
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8875: LD_VAR 0 6
8879: PPUSH
8880: LD_EXP 23
8884: PUSH
8885: LD_EXP 18
8889: PUSH
8890: LD_VAR 0 2
8894: ARRAY
8895: ARRAY
8896: PUSH
8897: LD_INT 1
8899: ARRAY
8900: PPUSH
8901: LD_INT 0
8903: PPUSH
8904: CALL_OW 49
// end ; end ;
8908: GO 8506
8910: POP
8911: POP
// end ;
8912: GO 7733
8914: POP
8915: POP
// end ;
8916: LD_VAR 0 1
8920: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8921: LD_INT 0
8923: PPUSH
8924: PPUSH
8925: PPUSH
8926: PPUSH
8927: PPUSH
// if not multi_support then
8928: LD_EXP 34
8932: NOT
8933: IFFALSE 8937
// exit ;
8935: GO 9224
// result := [ ] ;
8937: LD_ADDR_VAR 0 1
8941: PUSH
8942: EMPTY
8943: ST_TO_ADDR
// for i := 1 to 8 do
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: DOUBLE
8950: LD_INT 1
8952: DEC
8953: ST_TO_ADDR
8954: LD_INT 8
8956: PUSH
8957: FOR_TO
8958: IFFALSE 9222
// begin result := Replace ( result , i , [ ] ) ;
8960: LD_ADDR_VAR 0 1
8964: PUSH
8965: LD_VAR 0 1
8969: PPUSH
8970: LD_VAR 0 2
8974: PPUSH
8975: EMPTY
8976: PPUSH
8977: CALL_OW 1
8981: ST_TO_ADDR
// if multi_sides [ i ] then
8982: LD_EXP 18
8986: PUSH
8987: LD_VAR 0 2
8991: ARRAY
8992: IFFALSE 9220
// begin tmp := [ ] ;
8994: LD_ADDR_VAR 0 5
8998: PUSH
8999: EMPTY
9000: ST_TO_ADDR
// if multi_support = 1 then
9001: LD_EXP 34
9005: PUSH
9006: LD_INT 1
9008: EQUAL
9009: IFFALSE 9098
// begin uc_side := i ;
9011: LD_ADDR_OWVAR 20
9015: PUSH
9016: LD_VAR 0 2
9020: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9021: LD_ADDR_OWVAR 21
9025: PUSH
9026: LD_EXP 20
9030: PUSH
9031: LD_VAR 0 2
9035: ARRAY
9036: ST_TO_ADDR
// for j := 1 to 2 do
9037: LD_ADDR_VAR 0 3
9041: PUSH
9042: DOUBLE
9043: LD_INT 1
9045: DEC
9046: ST_TO_ADDR
9047: LD_INT 2
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9096
// begin InitHC_All ( ) ;
9053: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
9057: LD_INT 0
9059: PPUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_INT 4
9065: PPUSH
9066: CALL_OW 12
9070: PPUSH
9071: LD_INT 1
9073: PPUSH
9074: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9078: LD_ADDR_VAR 0 5
9082: PUSH
9083: LD_VAR 0 5
9087: PUSH
9088: CALL_OW 44
9092: ADD
9093: ST_TO_ADDR
// end ;
9094: GO 9050
9096: POP
9097: POP
// end ; if multi_support = 2 then
9098: LD_EXP 34
9102: PUSH
9103: LD_INT 2
9105: EQUAL
9106: IFFALSE 9195
// begin uc_side := i ;
9108: LD_ADDR_OWVAR 20
9112: PUSH
9113: LD_VAR 0 2
9117: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9118: LD_ADDR_OWVAR 21
9122: PUSH
9123: LD_EXP 20
9127: PUSH
9128: LD_VAR 0 2
9132: ARRAY
9133: ST_TO_ADDR
// for j := 1 to 4 do
9134: LD_ADDR_VAR 0 3
9138: PUSH
9139: DOUBLE
9140: LD_INT 1
9142: DEC
9143: ST_TO_ADDR
9144: LD_INT 4
9146: PUSH
9147: FOR_TO
9148: IFFALSE 9193
// begin InitHC_All ( ) ;
9150: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
9154: LD_INT 0
9156: PPUSH
9157: LD_INT 1
9159: PPUSH
9160: LD_INT 4
9162: PPUSH
9163: CALL_OW 12
9167: PPUSH
9168: LD_INT 2
9170: PPUSH
9171: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9175: LD_ADDR_VAR 0 5
9179: PUSH
9180: LD_VAR 0 5
9184: PUSH
9185: CALL_OW 44
9189: ADD
9190: ST_TO_ADDR
// end ;
9191: GO 9147
9193: POP
9194: POP
// end ; result := Replace ( result , i , tmp ) ;
9195: LD_ADDR_VAR 0 1
9199: PUSH
9200: LD_VAR 0 1
9204: PPUSH
9205: LD_VAR 0 2
9209: PPUSH
9210: LD_VAR 0 5
9214: PPUSH
9215: CALL_OW 1
9219: ST_TO_ADDR
// end ; end ;
9220: GO 8957
9222: POP
9223: POP
// end ;
9224: LD_VAR 0 1
9228: RET
// export function Multiplayer_Start ( ) ; begin
9229: LD_INT 0
9231: PPUSH
// Multiplayer_PrepareApemans ( ) ;
9232: CALL 7611 0 0
// Multiplayer_PreparePlayers ( ) ;
9236: CALL 7708 0 0
// Multiplayer_InitPointSystem ( ) ;
9240: CALL 10066 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9244: LD_INT 20
9246: PPUSH
9247: CALL 10250 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9251: LD_INT 150
9253: PPUSH
9254: CALL 10250 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9258: LD_INT 5
9260: PPUSH
9261: CALL 10250 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9265: LD_INT 40
9267: NEG
9268: PPUSH
9269: CALL 10250 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9273: LD_INT 200
9275: PPUSH
9276: CALL 10250 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9280: LD_INT 2
9282: PPUSH
9283: CALL 10250 0 1
// if multi_support then
9287: LD_EXP 34
9291: IFFALSE 9303
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9293: LD_ADDR_EXP 38
9297: PUSH
9298: CALL 8921 0 0
9302: ST_TO_ADDR
// if multi_sides [ your_side ] then
9303: LD_EXP 18
9307: PUSH
9308: LD_OWVAR 2
9312: ARRAY
9313: IFFALSE 9340
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9315: LD_INT 22
9317: PUSH
9318: LD_OWVAR 2
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PPUSH
9327: CALL_OW 69
9331: PUSH
9332: LD_INT 1
9334: ARRAY
9335: PPUSH
9336: CALL_OW 87
// end ;
9340: LD_VAR 0 1
9344: RET
// export function Multiplayer_End ( ) ; var i , j , s , tmp ; begin
9345: LD_INT 0
9347: PPUSH
9348: PPUSH
9349: PPUSH
9350: PPUSH
9351: PPUSH
// tmp := [ ] ;
9352: LD_ADDR_VAR 0 5
9356: PUSH
9357: EMPTY
9358: ST_TO_ADDR
// for i := 1 to 8 do
9359: LD_ADDR_VAR 0 2
9363: PUSH
9364: DOUBLE
9365: LD_INT 1
9367: DEC
9368: ST_TO_ADDR
9369: LD_INT 8
9371: PUSH
9372: FOR_TO
9373: IFFALSE 9409
// if multi_sides [ i ] then
9375: LD_EXP 18
9379: PUSH
9380: LD_VAR 0 2
9384: ARRAY
9385: IFFALSE 9407
// tmp := Join ( tmp , i ) ;
9387: LD_ADDR_VAR 0 5
9391: PUSH
9392: LD_VAR 0 5
9396: PPUSH
9397: LD_VAR 0 2
9401: PPUSH
9402: CALL 53826 0 2
9406: ST_TO_ADDR
9407: GO 9372
9409: POP
9410: POP
// repeat wait ( 0 0$1 ) ;
9411: LD_INT 35
9413: PPUSH
9414: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9418: LD_OWVAR 1
9422: PUSH
9423: LD_EXP 39
9427: GREATER
9428: IFFALSE 9436
9430: PUSH
9431: LD_EXP 34
9435: AND
9436: IFFALSE 9628
// begin if tick mod 2 2$00 = 0 then
9438: LD_OWVAR 1
9442: PUSH
9443: LD_INT 4200
9445: MOD
9446: PUSH
9447: LD_INT 0
9449: EQUAL
9450: IFFALSE 9628
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
9452: LD_ADDR_VAR 0 5
9456: PUSH
9457: LD_VAR 0 5
9461: PPUSH
9462: LD_INT 1
9464: PPUSH
9465: LD_VAR 0 5
9469: PPUSH
9470: CALL 17894 0 1
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL 20186 0 4
9482: ST_TO_ADDR
// for s := 1 to tmp do
9483: LD_ADDR_VAR 0 4
9487: PUSH
9488: DOUBLE
9489: LD_INT 1
9491: DEC
9492: ST_TO_ADDR
9493: LD_VAR 0 5
9497: PUSH
9498: FOR_TO
9499: IFFALSE 9626
// begin i := tmp [ s ] ;
9501: LD_ADDR_VAR 0 2
9505: PUSH
9506: LD_VAR 0 5
9510: PUSH
9511: LD_VAR 0 4
9515: ARRAY
9516: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
9517: LD_EXP 18
9521: PUSH
9522: LD_VAR 0 2
9526: ARRAY
9527: IFFALSE 9542
9529: PUSH
9530: LD_EXP 36
9534: PUSH
9535: LD_VAR 0 2
9539: ARRAY
9540: NOT
9541: AND
9542: IFFALSE 9556
9544: PUSH
9545: LD_EXP 38
9549: PUSH
9550: LD_VAR 0 2
9554: ARRAY
9555: AND
9556: IFFALSE 9624
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9558: LD_EXP 38
9562: PUSH
9563: LD_VAR 0 2
9567: ARRAY
9568: PUSH
9569: LD_INT 1
9571: ARRAY
9572: PPUSH
9573: LD_INT 11
9575: PPUSH
9576: LD_INT 1
9578: PPUSH
9579: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9583: LD_ADDR_EXP 38
9587: PUSH
9588: LD_EXP 38
9592: PPUSH
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_EXP 38
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: PPUSH
9609: LD_INT 1
9611: PPUSH
9612: CALL_OW 3
9616: PPUSH
9617: CALL_OW 1
9621: ST_TO_ADDR
// break ;
9622: GO 9626
// end ; end ;
9624: GO 9498
9626: POP
9627: POP
// end ; end ; if not multi_custom_commanders then
9628: LD_EXP 27
9632: NOT
9633: IFFALSE 9748
// begin for i := 1 to 8 do
9635: LD_ADDR_VAR 0 2
9639: PUSH
9640: DOUBLE
9641: LD_INT 1
9643: DEC
9644: ST_TO_ADDR
9645: LD_INT 8
9647: PUSH
9648: FOR_TO
9649: IFFALSE 9722
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9651: LD_INT 22
9653: PUSH
9654: LD_VAR 0 2
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PPUSH
9663: CALL_OW 69
9667: PUSH
9668: LD_INT 0
9670: EQUAL
9671: IFFALSE 9686
9673: PUSH
9674: LD_EXP 36
9678: PUSH
9679: LD_VAR 0 2
9683: ARRAY
9684: NOT
9685: AND
9686: IFFALSE 9720
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9688: LD_ADDR_EXP 36
9692: PUSH
9693: LD_EXP 36
9697: PPUSH
9698: LD_VAR 0 2
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 1
9710: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9711: LD_VAR 0 2
9715: PPUSH
9716: CALL 10320 0 1
// end ; end ;
9720: GO 9648
9722: POP
9723: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9724: LD_EXP 36
9728: PPUSH
9729: CALL 17894 0 1
9733: PUSH
9734: LD_EXP 18
9738: PPUSH
9739: CALL 17894 0 1
9743: EQUAL
9744: IFFALSE 9748
// break ;
9746: GO 9772
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9748: CALL 9886 0 0
9752: NOT
9753: IFFALSE 9761
9755: PUSH
9756: LD_EXP 2
9760: AND
9761: IFTRUE 9770
9763: PUSH
9764: LD_EXP 35
9768: NOT
9769: OR
9770: IFFALSE 9411
// game := false ;
9772: LD_ADDR_EXP 2
9776: PUSH
9777: LD_INT 0
9779: ST_TO_ADDR
// for i := 1 to 8 do
9780: LD_ADDR_VAR 0 2
9784: PUSH
9785: DOUBLE
9786: LD_INT 1
9788: DEC
9789: ST_TO_ADDR
9790: LD_INT 8
9792: PUSH
9793: FOR_TO
9794: IFFALSE 9830
// begin if multi_sides [ i ] then
9796: LD_EXP 18
9800: PUSH
9801: LD_VAR 0 2
9805: ARRAY
9806: IFFALSE 9828
// SetMultiScore ( i , multi_points [ i ] ) ;
9808: LD_VAR 0 2
9812: PPUSH
9813: LD_EXP 43
9817: PUSH
9818: LD_VAR 0 2
9822: ARRAY
9823: PPUSH
9824: CALL_OW 506
// end ;
9828: GO 9793
9830: POP
9831: POP
// if multi_loosers [ your_side ] then
9832: LD_EXP 36
9836: PUSH
9837: LD_OWVAR 2
9841: ARRAY
9842: IFFALSE 9865
// begin if Multiplayer then
9844: LD_OWVAR 4
9848: IFFALSE 9856
// YouLostInMultiplayer else
9850: CALL_OW 107
9854: GO 9863
// YouLost (  ) ;
9856: LD_STRING 
9858: PPUSH
9859: CALL_OW 104
// end else
9863: GO 9881
// begin if Multiplayer then
9865: LD_OWVAR 4
9869: IFFALSE 9877
// YouWinInMultiplayer else
9871: CALL_OW 106
9875: GO 9881
// YouWin ;
9877: CALL_OW 103
// end ; end ;
9881: LD_VAR 0 1
9885: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
// result := false ;
9890: LD_ADDR_VAR 0 1
9894: PUSH
9895: LD_INT 0
9897: ST_TO_ADDR
// for side in botSides do
9898: LD_ADDR_VAR 0 2
9902: PUSH
9903: LD_EXP 3
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9970
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9911: LD_ADDR_VAR 0 1
9915: PUSH
9916: LD_INT 22
9918: PUSH
9919: LD_VAR 0 2
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 21
9930: PUSH
9931: LD_INT 1
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 50
9940: PUSH
9941: EMPTY
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PUSH
9954: LD_INT 0
9956: GREATER
9957: ST_TO_ADDR
// if result then
9958: LD_VAR 0 1
9962: IFFALSE 9968
// exit ;
9964: POP
9965: POP
9966: GO 9972
// end ;
9968: GO 9908
9970: POP
9971: POP
// end ;
9972: LD_VAR 0 1
9976: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9977: LD_INT 0
9979: PPUSH
9980: PPUSH
// result := [ ] ;
9981: LD_ADDR_VAR 0 1
9985: PUSH
9986: EMPTY
9987: ST_TO_ADDR
// for i := 1 to 8 do
9988: LD_ADDR_VAR 0 2
9992: PUSH
9993: DOUBLE
9994: LD_INT 1
9996: DEC
9997: ST_TO_ADDR
9998: LD_INT 8
10000: PUSH
10001: FOR_TO
10002: IFFALSE 10059
// begin if multi_sides [ i ] then
10004: LD_EXP 18
10008: PUSH
10009: LD_VAR 0 2
10013: ARRAY
10014: IFFALSE 10057
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
10016: LD_ADDR_VAR 0 1
10020: PUSH
10021: LD_VAR 0 1
10025: PUSH
10026: LD_STRING #coop-points
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: LD_VAR 0 2
10038: PUSH
10039: LD_EXP 43
10043: PUSH
10044: LD_VAR 0 2
10048: ARRAY
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: ADD
10056: ST_TO_ADDR
// end ; end ;
10057: GO 10001
10059: POP
10060: POP
// end ;
10061: LD_VAR 0 1
10065: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10070: LD_ADDR_EXP 43
10074: PUSH
10075: LD_INT 0
10077: PUSH
10078: LD_INT 0
10080: PUSH
10081: LD_INT 0
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: LD_INT 0
10092: PUSH
10093: LD_INT 0
10095: PUSH
10096: LD_INT 0
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// multi_points_conditions := [ ] ;
10109: LD_ADDR_EXP 44
10113: PUSH
10114: EMPTY
10115: ST_TO_ADDR
// end ;
10116: LD_VAR 0 1
10120: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
10121: LD_INT 0
10123: PPUSH
// if not multi_points or not side or side > 8 then
10124: LD_EXP 43
10128: NOT
10129: IFTRUE 10138
10131: PUSH
10132: LD_VAR 0 1
10136: NOT
10137: OR
10138: IFTRUE 10150
10140: PUSH
10141: LD_VAR 0 1
10145: PUSH
10146: LD_INT 8
10148: GREATER
10149: OR
10150: IFFALSE 10154
// exit ;
10152: GO 10191
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
10154: LD_ADDR_EXP 43
10158: PUSH
10159: LD_EXP 43
10163: PPUSH
10164: LD_VAR 0 1
10168: PPUSH
10169: LD_EXP 43
10173: PUSH
10174: LD_VAR 0 1
10178: ARRAY
10179: PUSH
10180: LD_VAR 0 2
10184: PLUS
10185: PPUSH
10186: CALL_OW 1
10190: ST_TO_ADDR
// end ;
10191: LD_VAR 0 3
10195: RET
// export function Multiplayer_GetPoints ( side ) ; begin
10196: LD_INT 0
10198: PPUSH
// if not multi_points or not side or side > 8 then
10199: LD_EXP 43
10203: NOT
10204: IFTRUE 10213
10206: PUSH
10207: LD_VAR 0 1
10211: NOT
10212: OR
10213: IFTRUE 10225
10215: PUSH
10216: LD_VAR 0 1
10220: PUSH
10221: LD_INT 8
10223: GREATER
10224: OR
10225: IFFALSE 10229
// exit ;
10227: GO 10245
// result := multi_points [ side ] ;
10229: LD_ADDR_VAR 0 2
10233: PUSH
10234: LD_EXP 43
10238: PUSH
10239: LD_VAR 0 1
10243: ARRAY
10244: ST_TO_ADDR
// end ;
10245: LD_VAR 0 2
10249: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
10250: LD_INT 0
10252: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
10253: LD_ADDR_EXP 44
10257: PUSH
10258: LD_EXP 44
10262: PPUSH
10263: LD_EXP 44
10267: PUSH
10268: LD_INT 1
10270: PLUS
10271: PPUSH
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 1
10281: ST_TO_ADDR
// end ;
10282: LD_VAR 0 2
10286: RET
// export function Multiplayer_GetCondition ( id ) ; begin
10287: LD_INT 0
10289: PPUSH
// if not id then
10290: LD_VAR 0 1
10294: NOT
10295: IFFALSE 10299
// exit ;
10297: GO 10315
// result := multi_points_conditions [ id ] ;
10299: LD_ADDR_VAR 0 2
10303: PUSH
10304: LD_EXP 44
10308: PUSH
10309: LD_VAR 0 1
10313: ARRAY
10314: ST_TO_ADDR
// end ;
10315: LD_VAR 0 2
10319: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
10320: LD_INT 0
10322: PPUSH
10323: PPUSH
10324: PPUSH
10325: PPUSH
10326: PPUSH
// players := [ ] ;
10327: LD_ADDR_VAR 0 3
10331: PUSH
10332: EMPTY
10333: ST_TO_ADDR
// for i = 1 to 8 do
10334: LD_ADDR_VAR 0 4
10338: PUSH
10339: DOUBLE
10340: LD_INT 1
10342: DEC
10343: ST_TO_ADDR
10344: LD_INT 8
10346: PUSH
10347: FOR_TO
10348: IFFALSE 10409
// begin if i = side then
10350: LD_VAR 0 4
10354: PUSH
10355: LD_VAR 0 1
10359: EQUAL
10360: IFFALSE 10364
// continue ;
10362: GO 10347
// if multi_sides [ i ] and not multi_loosers [ i ] then
10364: LD_EXP 18
10368: PUSH
10369: LD_VAR 0 4
10373: ARRAY
10374: IFFALSE 10389
10376: PUSH
10377: LD_EXP 36
10381: PUSH
10382: LD_VAR 0 4
10386: ARRAY
10387: NOT
10388: AND
10389: IFFALSE 10407
// players := players ^ i ;
10391: LD_ADDR_VAR 0 3
10395: PUSH
10396: LD_VAR 0 3
10400: PUSH
10401: LD_VAR 0 4
10405: ADD
10406: ST_TO_ADDR
// end ;
10407: GO 10347
10409: POP
10410: POP
// if not players then
10411: LD_VAR 0 3
10415: NOT
10416: IFFALSE 10420
// exit ;
10418: GO 10687
// if players = 1 then
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 1
10427: EQUAL
10428: IFFALSE 10489
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10430: LD_ADDR_VAR 0 4
10434: PUSH
10435: LD_INT 22
10437: PUSH
10438: LD_VAR 0 1
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: LD_INT 51
10449: PUSH
10450: EMPTY
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PPUSH
10457: CALL_OW 69
10461: PUSH
10462: FOR_IN
10463: IFFALSE 10485
// SetSide ( i , players [ 1 ] ) ;
10465: LD_VAR 0 4
10469: PPUSH
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 1
10477: ARRAY
10478: PPUSH
10479: CALL_OW 235
10483: GO 10462
10485: POP
10486: POP
// end else
10487: GO 10687
// begin j := 1 ;
10489: LD_ADDR_VAR 0 5
10493: PUSH
10494: LD_INT 1
10496: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10497: LD_ADDR_VAR 0 4
10501: PUSH
10502: LD_INT 22
10504: PUSH
10505: LD_VAR 0 1
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 2
10516: PUSH
10517: LD_INT 21
10519: PUSH
10520: LD_INT 1
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 51
10529: PUSH
10530: EMPTY
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 21
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 69
10560: PUSH
10561: FOR_IN
10562: IFFALSE 10685
// begin SetSide ( i , players [ j ] ) ;
10564: LD_VAR 0 4
10568: PPUSH
10569: LD_VAR 0 3
10573: PUSH
10574: LD_VAR 0 5
10578: ARRAY
10579: PPUSH
10580: CALL_OW 235
// if IsDrivenBy ( i ) then
10584: LD_VAR 0 4
10588: PPUSH
10589: CALL_OW 311
10593: IFFALSE 10620
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10595: LD_VAR 0 4
10599: PPUSH
10600: CALL_OW 311
10604: PPUSH
10605: LD_VAR 0 3
10609: PUSH
10610: LD_VAR 0 5
10614: ARRAY
10615: PPUSH
10616: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10620: LD_VAR 0 4
10624: PPUSH
10625: CALL_OW 310
10629: PPUSH
10630: CALL_OW 247
10634: PUSH
10635: LD_INT 3
10637: EQUAL
10638: IFFALSE 10649
// ComExitBuilding ( i ) ;
10640: LD_VAR 0 4
10644: PPUSH
10645: CALL_OW 122
// j := j + 1 ;
10649: LD_ADDR_VAR 0 5
10653: PUSH
10654: LD_VAR 0 5
10658: PUSH
10659: LD_INT 1
10661: PLUS
10662: ST_TO_ADDR
// if j > players then
10663: LD_VAR 0 5
10667: PUSH
10668: LD_VAR 0 3
10672: GREATER
10673: IFFALSE 10683
// j := 1 ;
10675: LD_ADDR_VAR 0 5
10679: PUSH
10680: LD_INT 1
10682: ST_TO_ADDR
// end ;
10683: GO 10561
10685: POP
10686: POP
// end ; end ;
10687: LD_VAR 0 2
10691: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10692: LD_INT 0
10694: PPUSH
10695: PPUSH
10696: PPUSH
// i := 3 ;
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: LD_INT 3
10704: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10705: LD_ADDR_VAR 0 3
10709: PUSH
10710: LD_INT 5
10712: PUSH
10713: LD_INT 10
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 120
10722: PUSH
10723: LD_INT 2
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 101
10732: PUSH
10733: LD_INT 8
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 27
10742: PUSH
10743: LD_INT 4
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10756: LD_INT 4
10758: PPUSH
10759: LD_INT 5
10761: PPUSH
10762: LD_VAR 0 3
10766: PUSH
10767: LD_VAR 0 2
10771: ARRAY
10772: PUSH
10773: LD_INT 1
10775: ARRAY
10776: PPUSH
10777: LD_VAR 0 3
10781: PUSH
10782: LD_VAR 0 2
10786: ARRAY
10787: PUSH
10788: LD_INT 2
10790: ARRAY
10791: PPUSH
10792: LD_INT 0
10794: PPUSH
10795: CALL_OW 58
// end ;
10799: LD_VAR 0 1
10803: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10804: LD_INT 0
10806: PPUSH
// if not side or side > 8 then
10807: LD_VAR 0 1
10811: NOT
10812: IFTRUE 10824
10814: PUSH
10815: LD_VAR 0 1
10819: PUSH
10820: LD_INT 8
10822: GREATER
10823: OR
10824: IFFALSE 10828
// exit ;
10826: GO 10845
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 6
10835: PPUSH
10836: CALL 10287 0 1
10840: PPUSH
10841: CALL 10121 0 2
// end ;
10845: LD_VAR 0 2
10849: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10850: LD_INT 0
10852: PPUSH
// if not side or side > 8 then
10853: LD_VAR 0 1
10857: NOT
10858: IFTRUE 10870
10860: PUSH
10861: LD_VAR 0 1
10865: PUSH
10866: LD_INT 8
10868: GREATER
10869: OR
10870: IFFALSE 10874
// exit ;
10872: GO 10891
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10874: LD_VAR 0 1
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL 10287 0 1
10886: PPUSH
10887: CALL 10121 0 2
// end ;
10891: LD_VAR 0 2
10895: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10896: LD_INT 0
10898: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10899: LD_VAR 0 1
10903: NOT
10904: IFTRUE 10916
10906: PUSH
10907: LD_VAR 0 1
10911: PUSH
10912: LD_INT 8
10914: GREATER
10915: OR
10916: IFTRUE 10944
10918: PUSH
10919: LD_VAR 0 2
10923: PUSH
10924: LD_INT 2
10926: PUSH
10927: LD_INT 6
10929: PUSH
10930: LD_INT 36
10932: PUSH
10933: LD_INT 0
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: IN
10942: NOT
10943: OR
10944: IFFALSE 10948
// exit ;
10946: GO 10965
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10948: LD_VAR 0 1
10952: PPUSH
10953: LD_INT 3
10955: PPUSH
10956: CALL 10287 0 1
10960: PPUSH
10961: CALL 10121 0 2
// end ;
10965: LD_VAR 0 3
10969: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10970: LD_INT 0
10972: PPUSH
10973: PPUSH
// if not un then
10974: LD_VAR 0 1
10978: NOT
10979: IFFALSE 10983
// exit ;
10981: GO 11029
// if not points then
10983: LD_VAR 0 3
10987: NOT
10988: IFFALSE 11005
// gained_points := Multiplayer_GetCondition ( 1 ) else
10990: LD_ADDR_VAR 0 5
10994: PUSH
10995: LD_INT 1
10997: PPUSH
10998: CALL 10287 0 1
11002: ST_TO_ADDR
11003: GO 11015
// gained_points := points ;
11005: LD_ADDR_VAR 0 5
11009: PUSH
11010: LD_VAR 0 3
11014: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
11015: LD_VAR 0 2
11019: PPUSH
11020: LD_VAR 0 5
11024: PPUSH
11025: CALL 10121 0 2
11029: LD_VAR 0 4
11033: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
11034: LD_INT 0
11036: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
11037: LD_VAR 0 1
11041: PPUSH
11042: LD_INT 2
11044: PPUSH
11045: CALL 10287 0 1
11049: PPUSH
11050: CALL 10121 0 2
// end ; end_of_file
11054: LD_VAR 0 2
11058: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
11059: LD_VAR 0 1
11063: PPUSH
11064: CALL_OW 255
11068: PUSH
11069: LD_EXP 3
11073: IN
11074: NOT
11075: IFFALSE 11079
// exit ;
11077: GO 11096
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
11079: LD_VAR 0 1
11083: PPUSH
11084: LD_VAR 0 2
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL 10970 0 3
// end ;
11096: PPOPN 3
11098: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
11099: LD_INT 0
11101: PPUSH
11102: PPUSH
11103: PPUSH
11104: PPUSH
11105: PPUSH
11106: PPUSH
11107: PPUSH
11108: PPUSH
11109: PPUSH
11110: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11111: LD_VAR 0 1
11115: PPUSH
11116: CALL 59180 0 1
// side := GetSide ( un ) ;
11120: LD_ADDR_VAR 0 3
11124: PUSH
11125: LD_VAR 0 1
11129: PPUSH
11130: CALL_OW 255
11134: ST_TO_ADDR
// if multi_sides [ side ] then
11135: LD_EXP 18
11139: PUSH
11140: LD_VAR 0 3
11144: ARRAY
11145: IFFALSE 11171
// if GetType ( un ) = unit_human then
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 247
11156: PUSH
11157: LD_INT 1
11159: EQUAL
11160: IFFALSE 11171
// MultiplayerEvent_HumanLost ( side ) ;
11162: LD_VAR 0 3
11166: PPUSH
11167: CALL 10850 0 1
// if side in botSides then
11171: LD_VAR 0 3
11175: PUSH
11176: LD_EXP 3
11180: IN
11181: IFFALSE 11692
// begin if side = botSides [ 1 ] then
11183: LD_VAR 0 3
11187: PUSH
11188: LD_EXP 3
11192: PUSH
11193: LD_INT 1
11195: ARRAY
11196: EQUAL
11197: IFFALSE 11692
// begin if un in arForce then
11199: LD_VAR 0 1
11203: PUSH
11204: LD_EXP 14
11208: IN
11209: IFFALSE 11227
// arForce := arForce diff un ;
11211: LD_ADDR_EXP 14
11215: PUSH
11216: LD_EXP 14
11220: PUSH
11221: LD_VAR 0 1
11225: DIFF
11226: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
11227: LD_VAR 0 1
11231: PUSH
11232: LD_EXP 8
11236: IN
11237: IFTRUE 11251
11239: PUSH
11240: LD_VAR 0 1
11244: PUSH
11245: LD_EXP 9
11249: IN
11250: OR
11251: IFFALSE 11345
// begin arVehicles := arVehicles diff un ;
11253: LD_ADDR_EXP 8
11257: PUSH
11258: LD_EXP 8
11262: PUSH
11263: LD_VAR 0 1
11267: DIFF
11268: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
11269: LD_ADDR_EXP 9
11273: PUSH
11274: LD_EXP 9
11278: PUSH
11279: LD_VAR 0 1
11283: DIFF
11284: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
11285: LD_ADDR_EXP 6
11289: PUSH
11290: LD_EXP 6
11294: PUSH
11295: LD_VAR 0 1
11299: PPUSH
11300: CALL_OW 265
11304: PUSH
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 262
11314: PUSH
11315: LD_VAR 0 1
11319: PPUSH
11320: CALL_OW 263
11324: PUSH
11325: LD_VAR 0 1
11329: PPUSH
11330: CALL_OW 264
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: ADD
11344: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
11345: LD_VAR 0 1
11349: PPUSH
11350: CALL_OW 257
11354: PUSH
11355: LD_INT 3
11357: EQUAL
11358: IFFALSE 11375
11360: PUSH
11361: LD_VAR 0 1
11365: PPUSH
11366: CALL_OW 110
11370: PUSH
11371: LD_INT 999
11373: LESS
11374: AND
11375: IFFALSE 11383
11377: PUSH
11378: LD_EXP 11
11382: AND
11383: IFFALSE 11524
// begin if not IsOk ( arDep ) then
11385: LD_INT 2
11387: PPUSH
11388: CALL_OW 302
11392: NOT
11393: IFFALSE 11397
// exit ;
11395: GO 11797
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11397: LD_ADDR_EXP 11
11401: PUSH
11402: LD_EXP 11
11406: PPUSH
11407: CALL 55221 0 1
11411: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11412: LD_ADDR_OWVAR 20
11416: PUSH
11417: LD_EXP 3
11421: PUSH
11422: LD_INT 1
11424: ARRAY
11425: ST_TO_ADDR
// uc_nation := nation_arabian ;
11426: LD_ADDR_OWVAR 21
11430: PUSH
11431: LD_INT 2
11433: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
11434: LD_INT 0
11436: PPUSH
11437: LD_INT 3
11439: PUSH
11440: LD_INT 6
11442: PUSH
11443: LD_INT 9
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: PUSH
11451: LD_OWVAR 67
11455: ARRAY
11456: PPUSH
11457: CALL_OW 383
// un := CreateHuman ;
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: CALL_OW 44
11470: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11471: LD_VAR 0 1
11475: PPUSH
11476: LD_INT 143
11478: PPUSH
11479: LD_INT 29
11481: PPUSH
11482: LD_INT 0
11484: PPUSH
11485: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11489: LD_VAR 0 1
11493: PPUSH
11494: LD_INT 115
11496: PPUSH
11497: LD_INT 52
11499: PPUSH
11500: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11504: LD_ADDR_EXP 14
11508: PUSH
11509: LD_EXP 14
11513: PPUSH
11514: LD_VAR 0 1
11518: PPUSH
11519: CALL 53826 0 2
11523: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11524: LD_VAR 0 1
11528: PPUSH
11529: CALL_OW 247
11533: PUSH
11534: LD_INT 3
11536: EQUAL
11537: IFFALSE 11692
// begin btype := GetBType ( un ) ;
11539: LD_ADDR_VAR 0 11
11543: PUSH
11544: LD_VAR 0 1
11548: PPUSH
11549: CALL_OW 266
11553: ST_TO_ADDR
// if btype = b_breastwork then
11554: LD_VAR 0 11
11558: PUSH
11559: LD_INT 31
11561: EQUAL
11562: IFFALSE 11566
// exit ;
11564: GO 11797
// if btype = b_barracks then
11566: LD_VAR 0 11
11570: PUSH
11571: LD_INT 5
11573: EQUAL
11574: IFFALSE 11584
// btype := b_armoury ;
11576: LD_ADDR_VAR 0 11
11580: PUSH
11581: LD_INT 4
11583: ST_TO_ADDR
// if btype = b_factory then
11584: LD_VAR 0 11
11588: PUSH
11589: LD_INT 3
11591: EQUAL
11592: IFFALSE 11602
// btype := b_workshop ;
11594: LD_ADDR_VAR 0 11
11598: PUSH
11599: LD_INT 2
11601: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11602: LD_VAR 0 11
11606: PUSH
11607: LD_INT 8
11609: PUSH
11610: LD_INT 7
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: IN
11617: IFFALSE 11627
// btype := b_lab ;
11619: LD_ADDR_VAR 0 11
11623: PUSH
11624: LD_INT 6
11626: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11627: LD_ADDR_EXP 7
11631: PUSH
11632: LD_EXP 7
11636: PPUSH
11637: LD_EXP 7
11641: PUSH
11642: LD_INT 1
11644: PLUS
11645: PPUSH
11646: LD_VAR 0 11
11650: PUSH
11651: LD_VAR 0 1
11655: PPUSH
11656: CALL_OW 250
11660: PUSH
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 251
11670: PUSH
11671: LD_VAR 0 1
11675: PPUSH
11676: CALL_OW 254
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 1
11691: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
11692: LD_EXP 35
11696: IFFALSE 11704
11698: PUSH
11699: LD_EXP 27
11703: AND
11704: IFFALSE 11719
11706: PUSH
11707: LD_EXP 36
11711: PUSH
11712: LD_VAR 0 3
11716: ARRAY
11717: NOT
11718: AND
11719: IFFALSE 11797
// if un in multi_commanders then
11721: LD_VAR 0 1
11725: PUSH
11726: LD_EXP 35
11730: IN
11731: IFFALSE 11797
// begin if side = your_side then
11733: LD_VAR 0 3
11737: PUSH
11738: LD_OWVAR 2
11742: EQUAL
11743: IFFALSE 11749
// Multiplayer_Loose_Message ;
11745: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11749: LD_ADDR_EXP 36
11753: PUSH
11754: LD_EXP 36
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 1
11771: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11772: LD_ADDR_EXP 35
11776: PUSH
11777: LD_EXP 35
11781: PUSH
11782: LD_VAR 0 1
11786: DIFF
11787: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11788: LD_VAR 0 3
11792: PPUSH
11793: CALL 10320 0 1
// end ; end ;
11797: PPOPN 11
11799: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11800: LD_INT 0
11802: PPUSH
11803: PPUSH
11804: PPUSH
11805: PPUSH
// begin side := GetSide ( building ) ;
11806: LD_ADDR_VAR 0 4
11810: PUSH
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL_OW 255
11820: ST_TO_ADDR
// if multi_sides [ side ] then
11821: LD_EXP 18
11825: PUSH
11826: LD_VAR 0 4
11830: ARRAY
11831: IFFALSE 11852
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11833: LD_VAR 0 4
11837: PPUSH
11838: LD_VAR 0 1
11842: PPUSH
11843: CALL_OW 266
11847: PPUSH
11848: CALL 10896 0 2
// if side = botSides [ 1 ] then
11852: LD_VAR 0 4
11856: PUSH
11857: LD_EXP 3
11861: PUSH
11862: LD_INT 1
11864: ARRAY
11865: EQUAL
11866: IFFALSE 11962
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11868: LD_ADDR_EXP 7
11872: PUSH
11873: LD_EXP 7
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: CALL_OW 3
11885: ST_TO_ADDR
// btype := GetBType ( building ) ;
11886: LD_ADDR_VAR 0 5
11890: PUSH
11891: LD_VAR 0 1
11895: PPUSH
11896: CALL_OW 266
11900: ST_TO_ADDR
// case btype of b_workshop :
11901: LD_VAR 0 5
11905: PUSH
11906: LD_INT 2
11908: DOUBLE
11909: EQUAL
11910: IFTRUE 11914
11912: GO 11926
11914: POP
// ComUpgrade ( building ) ; b_lab :
11915: LD_VAR 0 1
11919: PPUSH
11920: CALL_OW 146
11924: GO 11962
11926: LD_INT 6
11928: DOUBLE
11929: EQUAL
11930: IFTRUE 11934
11932: GO 11961
11934: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 10
11942: PPUSH
11943: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_INT 15
11954: PPUSH
11955: CALL_OW 207
// end ; end ;
11959: GO 11962
11961: POP
// end ; end ;
11962: PPOPN 5
11964: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: LD_EXP 3
11977: PUSH
11978: LD_INT 1
11980: ARRAY
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 33
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 69
12004: IN
12005: IFFALSE 12016
// ComUnlink ( un ) ;
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 136
// end ;
12016: PPOPN 1
12018: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
12019: LD_VAR 0 2
12023: PPUSH
12024: CALL_OW 255
12028: PUSH
12029: LD_EXP 3
12033: IN
12034: NOT
12035: IFFALSE 12039
// exit ;
12037: GO 12102
// if unit in arForceTmp then
12039: LD_VAR 0 2
12043: PUSH
12044: LD_EXP 15
12048: IN
12049: IFFALSE 12102
// begin arForceTmp := arForceTmp diff unit ;
12051: LD_ADDR_EXP 15
12055: PUSH
12056: LD_EXP 15
12060: PUSH
12061: LD_VAR 0 2
12065: DIFF
12066: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
12067: LD_ADDR_EXP 14
12071: PUSH
12072: LD_EXP 14
12076: PPUSH
12077: LD_VAR 0 2
12081: PPUSH
12082: CALL 53826 0 2
12086: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
12087: LD_VAR 0 2
12091: PPUSH
12092: LD_INT 103
12094: PPUSH
12095: LD_INT 54
12097: PPUSH
12098: CALL_OW 111
// end ; end ;
12102: PPOPN 2
12104: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
12113: LD_VAR 0 1
12117: PPUSH
12118: LD_VAR 0 2
12122: PPUSH
12123: CALL 59238 0 2
// side := GetSide ( vehicle ) ;
12127: LD_ADDR_VAR 0 4
12131: PUSH
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 255
12141: ST_TO_ADDR
// if multi_sides [ side ] then
12142: LD_EXP 18
12146: PUSH
12147: LD_VAR 0 4
12151: ARRAY
12152: IFFALSE 12163
// MultiplayerEvent_Produced ( side ) ;
12154: LD_VAR 0 4
12158: PPUSH
12159: CALL 10804 0 1
// if side = botSides [ 1 ] then
12163: LD_VAR 0 4
12167: PUSH
12168: LD_EXP 3
12172: PUSH
12173: LD_INT 1
12175: ARRAY
12176: EQUAL
12177: IFFALSE 12377
// begin driver := IsDrivenBy ( vehicle ) ;
12179: LD_ADDR_VAR 0 8
12183: PUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 311
12193: ST_TO_ADDR
// if driver then
12194: LD_VAR 0 8
12198: IFFALSE 12232
// begin SetTag ( driver , tMech ) ;
12200: LD_VAR 0 8
12204: PPUSH
12205: LD_INT 7
12207: PPUSH
12208: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
12212: LD_ADDR_EXP 10
12216: PUSH
12217: LD_EXP 10
12221: PPUSH
12222: LD_VAR 0 8
12226: PPUSH
12227: CALL 53826 0 2
12231: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12232: LD_VAR 0 1
12236: PPUSH
12237: CALL_OW 263
12241: PUSH
12242: LD_INT 2
12244: EQUAL
12245: IFFALSE 12270
12247: PUSH
12248: LD_VAR 0 1
12252: PPUSH
12253: CALL_OW 264
12257: PUSH
12258: LD_INT 32
12260: PUSH
12261: LD_INT 88
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: IN
12268: NOT
12269: AND
12270: IFFALSE 12294
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
12272: LD_ADDR_EXP 16
12276: PUSH
12277: LD_EXP 16
12281: PPUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL 53826 0 2
12291: ST_TO_ADDR
// exit ;
12292: GO 12377
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12294: LD_EXP 12
12298: PUSH
12299: LD_EXP 8
12303: PPUSH
12304: CALL 17894 0 1
12308: GREATER
12309: IFTRUE 12333
12311: PUSH
12312: LD_VAR 0 1
12316: PPUSH
12317: CALL_OW 264
12321: PUSH
12322: LD_INT 32
12324: PUSH
12325: LD_INT 88
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: IN
12332: OR
12333: IFFALSE 12357
// arVehicles := Join ( arVehicles , vehicle ) else
12335: LD_ADDR_EXP 8
12339: PUSH
12340: LD_EXP 8
12344: PPUSH
12345: LD_VAR 0 1
12349: PPUSH
12350: CALL 53826 0 2
12354: ST_TO_ADDR
12355: GO 12377
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
12357: LD_ADDR_EXP 9
12361: PUSH
12362: LD_EXP 9
12366: PPUSH
12367: LD_VAR 0 1
12371: PPUSH
12372: CALL 53826 0 2
12376: ST_TO_ADDR
// end ; end ;
12377: PPOPN 8
12379: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 110
12389: PUSH
12390: LD_INT 7
12392: EQUAL
12393: IFFALSE 12407
// SetTag ( driver , 0 ) ;
12395: LD_VAR 0 1
12399: PPUSH
12400: LD_INT 0
12402: PPUSH
12403: CALL_OW 109
// end ;
12407: PPOPN 4
12409: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12410: LD_VAR 0 2
12414: PPUSH
12415: CALL_OW 255
12419: PUSH
12420: LD_EXP 3
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: EQUAL
12429: IFFALSE 12459
// if tech in arTech then
12431: LD_VAR 0 1
12435: PUSH
12436: LD_EXP 5
12440: IN
12441: IFFALSE 12459
// arTech := arTech diff tech ;
12443: LD_ADDR_EXP 5
12447: PUSH
12448: LD_EXP 5
12452: PUSH
12453: LD_VAR 0 1
12457: DIFF
12458: ST_TO_ADDR
// end ;
12459: PPOPN 2
12461: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
12462: LD_VAR 0 1
12466: PPUSH
12467: CALL 59197 0 1
// end ; end_of_file
12471: PPOPN 1
12473: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12474: LD_INT 2
12476: PPUSH
12477: CALL_OW 302
12481: IFFALSE 12502
12483: PUSH
12484: LD_INT 2
12486: PPUSH
12487: CALL_OW 255
12491: PUSH
12492: LD_EXP 3
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: EQUAL
12501: AND
12502: IFFALSE 12539
12504: GO 12506
12506: DISABLE
// begin wait ( 5 5$00 - ( 2 2$00 * Difficulty ) ) ;
12507: LD_INT 10500
12509: PUSH
12510: LD_INT 4200
12512: PUSH
12513: LD_OWVAR 67
12517: MUL
12518: MINUS
12519: PPUSH
12520: CALL_OW 67
// activeArabAttacks := true ;
12524: LD_ADDR_EXP 4
12528: PUSH
12529: LD_INT 1
12531: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12532: LD_INT 0
12534: PPUSH
12535: CALL 12766 0 1
// end ;
12539: END
// every 35 35$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12540: LD_INT 2
12542: PPUSH
12543: CALL_OW 302
12547: IFFALSE 12568
12549: PUSH
12550: LD_INT 2
12552: PPUSH
12553: CALL_OW 255
12557: PUSH
12558: LD_EXP 3
12562: PUSH
12563: LD_INT 1
12565: ARRAY
12566: EQUAL
12567: AND
12568: IFFALSE 12582
12570: GO 12572
12572: DISABLE
// ArabAttack ( Difficulty ) ;
12573: LD_OWVAR 67
12577: PPUSH
12578: CALL 12766 0 1
12582: END
// every 55 55$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12583: LD_INT 2
12585: PPUSH
12586: CALL_OW 302
12590: IFFALSE 12611
12592: PUSH
12593: LD_INT 2
12595: PPUSH
12596: CALL_OW 255
12600: PUSH
12601: LD_EXP 3
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: EQUAL
12610: AND
12611: IFFALSE 12629
12613: GO 12615
12615: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12616: LD_OWVAR 67
12620: PUSH
12621: LD_INT 1
12623: PLUS
12624: PPUSH
12625: CALL 12766 0 1
12629: END
// every 85 85$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12630: LD_INT 2
12632: PPUSH
12633: CALL_OW 302
12637: IFFALSE 12658
12639: PUSH
12640: LD_INT 2
12642: PPUSH
12643: CALL_OW 255
12647: PUSH
12648: LD_EXP 3
12652: PUSH
12653: LD_INT 1
12655: ARRAY
12656: EQUAL
12657: AND
12658: IFFALSE 12676
12660: GO 12662
12662: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12663: LD_OWVAR 67
12667: PUSH
12668: LD_INT 2
12670: PLUS
12671: PPUSH
12672: CALL 12766 0 1
12676: END
// every 115 115$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12677: LD_INT 2
12679: PPUSH
12680: CALL_OW 302
12684: IFFALSE 12705
12686: PUSH
12687: LD_INT 2
12689: PPUSH
12690: CALL_OW 255
12694: PUSH
12695: LD_EXP 3
12699: PUSH
12700: LD_INT 1
12702: ARRAY
12703: EQUAL
12704: AND
12705: IFFALSE 12723
12707: GO 12709
12709: DISABLE
// ArabAttack ( Difficulty + 3 ) ;
12710: LD_OWVAR 67
12714: PUSH
12715: LD_INT 3
12717: PLUS
12718: PPUSH
12719: CALL 12766 0 1
12723: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12724: LD_INT 2
12726: PPUSH
12727: LD_INT 81
12729: PUSH
12730: LD_EXP 3
12734: PUSH
12735: LD_INT 1
12737: ARRAY
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 70
12747: IFFALSE 12765
12749: GO 12751
12751: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12752: LD_OWVAR 67
12756: PUSH
12757: LD_INT 2
12759: PLUS
12760: PPUSH
12761: CALL 12766 0 1
12765: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12766: LD_INT 0
12768: PPUSH
12769: PPUSH
12770: PPUSH
12771: PPUSH
12772: PPUSH
12773: PPUSH
12774: PPUSH
// uc_side := botSides [ 1 ] ;
12775: LD_ADDR_OWVAR 20
12779: PUSH
12780: LD_EXP 3
12784: PUSH
12785: LD_INT 1
12787: ARRAY
12788: ST_TO_ADDR
// uc_nation := nation_arabian ;
12789: LD_ADDR_OWVAR 21
12793: PUSH
12794: LD_INT 2
12796: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12797: LD_ADDR_VAR 0 4
12801: PUSH
12802: LD_INT 3
12804: PUSH
12805: LD_INT 5
12807: PUSH
12808: LD_INT 7
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: PUSH
12816: LD_OWVAR 67
12820: ARRAY
12821: ST_TO_ADDR
// arAttackersInf := [ ] ;
12822: LD_ADDR_EXP 45
12826: PUSH
12827: EMPTY
12828: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12829: LD_ADDR_EXP 46
12833: PUSH
12834: EMPTY
12835: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12836: LD_ADDR_VAR 0 7
12840: PUSH
12841: LD_INT 48
12843: PUSH
12844: LD_INT 52
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 135
12853: PUSH
12854: LD_INT 48
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_VAR 0 1
12869: PUSH
12870: LD_INT 2
12872: MOD
12873: PUSH
12874: LD_INT 1
12876: PLUS
12877: ARRAY
12878: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12879: LD_ADDR_VAR 0 8
12883: PUSH
12884: LD_INT 12
12886: PUSH
12887: LD_INT 13
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 23
12896: PUSH
12897: LD_INT 22
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_VAR 0 1
12912: PUSH
12913: LD_INT 2
12915: MOD
12916: PUSH
12917: LD_INT 1
12919: PLUS
12920: ARRAY
12921: ST_TO_ADDR
// InitHC_All ( ) ;
12922: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12926: LD_ADDR_VAR 0 3
12930: PUSH
12931: DOUBLE
12932: LD_INT 1
12934: DEC
12935: ST_TO_ADDR
12936: LD_INT 3
12938: PUSH
12939: LD_INT 4
12941: PUSH
12942: LD_INT 6
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: PUSH
12950: LD_OWVAR 67
12954: ARRAY
12955: PUSH
12956: LD_VAR 0 1
12960: PLUS
12961: PUSH
12962: FOR_TO
12963: IFFALSE 13095
// begin PrepareSoldier ( false , skill ) ;
12965: LD_INT 0
12967: PPUSH
12968: LD_VAR 0 4
12972: PPUSH
12973: CALL_OW 381
// un := CreateHuman ;
12977: LD_ADDR_VAR 0 5
12981: PUSH
12982: CALL_OW 44
12986: ST_TO_ADDR
// if i mod 2 = 0 then
12987: LD_VAR 0 3
12991: PUSH
12992: LD_INT 2
12994: MOD
12995: PUSH
12996: LD_INT 0
12998: EQUAL
12999: IFFALSE 13013
// SetClass ( un , class_mortar ) ;
13001: LD_VAR 0 5
13005: PPUSH
13006: LD_INT 8
13008: PPUSH
13009: CALL_OW 336
// SetDir ( un , 1 ) ;
13013: LD_VAR 0 5
13017: PPUSH
13018: LD_INT 1
13020: PPUSH
13021: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
13025: LD_VAR 0 5
13029: PPUSH
13030: LD_VAR 0 8
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PPUSH
13039: LD_INT 0
13041: PPUSH
13042: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
13046: LD_ADDR_EXP 45
13050: PUSH
13051: LD_EXP 45
13055: PPUSH
13056: LD_VAR 0 5
13060: PPUSH
13061: CALL 53826 0 2
13065: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
13066: LD_VAR 0 5
13070: PPUSH
13071: LD_VAR 0 7
13075: PUSH
13076: LD_INT 1
13078: ARRAY
13079: PPUSH
13080: LD_VAR 0 7
13084: PUSH
13085: LD_INT 2
13087: ARRAY
13088: PPUSH
13089: CALL_OW 114
// end ;
13093: GO 12962
13095: POP
13096: POP
// for i := 1 to 3 + v do
13097: LD_ADDR_VAR 0 3
13101: PUSH
13102: DOUBLE
13103: LD_INT 1
13105: DEC
13106: ST_TO_ADDR
13107: LD_INT 3
13109: PUSH
13110: LD_VAR 0 1
13114: PLUS
13115: PUSH
13116: FOR_TO
13117: IFFALSE 13314
// begin PrepareMechanic ( false , skill ) ;
13119: LD_INT 0
13121: PPUSH
13122: LD_VAR 0 4
13126: PPUSH
13127: CALL_OW 383
// un := CreateHuman ;
13131: LD_ADDR_VAR 0 5
13135: PUSH
13136: CALL_OW 44
13140: ST_TO_ADDR
// SetTag ( un , 999 ) ;
13141: LD_VAR 0 5
13145: PPUSH
13146: LD_INT 999
13148: PPUSH
13149: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
13153: LD_INT 14
13155: PPUSH
13156: LD_INT 1
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: LD_INT 27
13164: PUSH
13165: LD_INT 25
13167: PUSH
13168: LD_INT 28
13170: PUSH
13171: LD_INT 26
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: PUSH
13180: LD_VAR 0 3
13184: PUSH
13185: LD_INT 4
13187: MOD
13188: PUSH
13189: LD_INT 1
13191: PLUS
13192: ARRAY
13193: PPUSH
13194: LD_INT 80
13196: PPUSH
13197: CALL 20656 0 5
// veh := CreateVehicle ;
13201: LD_ADDR_VAR 0 6
13205: PUSH
13206: CALL_OW 45
13210: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13211: LD_VAR 0 6
13215: PPUSH
13216: LD_INT 1
13218: PPUSH
13219: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13223: LD_VAR 0 6
13227: PPUSH
13228: LD_VAR 0 8
13232: PUSH
13233: LD_INT 2
13235: ARRAY
13236: PPUSH
13237: LD_INT 0
13239: PPUSH
13240: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13244: LD_VAR 0 5
13248: PPUSH
13249: LD_VAR 0 6
13253: PPUSH
13254: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13258: LD_VAR 0 5
13262: PPUSH
13263: LD_VAR 0 7
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: PPUSH
13272: LD_VAR 0 7
13276: PUSH
13277: LD_INT 2
13279: ARRAY
13280: PPUSH
13281: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13285: LD_ADDR_EXP 46
13289: PUSH
13290: LD_EXP 46
13294: PPUSH
13295: LD_VAR 0 6
13299: PPUSH
13300: CALL 53826 0 2
13304: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13305: LD_INT 70
13307: PPUSH
13308: CALL_OW 67
// end ;
13312: GO 13116
13314: POP
13315: POP
// wait ( 0 0$2 ) ;
13316: LD_INT 70
13318: PPUSH
13319: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] + ( v div 2 ) do
13323: LD_ADDR_VAR 0 3
13327: PUSH
13328: DOUBLE
13329: LD_INT 1
13331: DEC
13332: ST_TO_ADDR
13333: LD_INT 1
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 3
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: LD_OWVAR 67
13351: ARRAY
13352: PUSH
13353: LD_VAR 0 1
13357: PUSH
13358: LD_INT 2
13360: DIV
13361: PLUS
13362: PUSH
13363: FOR_TO
13364: IFFALSE 13477
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
13366: LD_INT 14
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: LD_INT 5
13374: PPUSH
13375: LD_INT 29
13377: PPUSH
13378: LD_INT 80
13380: PPUSH
13381: CALL 20656 0 5
// veh := CreateVehicle ;
13385: LD_ADDR_VAR 0 6
13389: PUSH
13390: CALL_OW 45
13394: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13395: LD_VAR 0 6
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13407: LD_VAR 0 6
13411: PPUSH
13412: LD_VAR 0 8
13416: PUSH
13417: LD_INT 2
13419: ARRAY
13420: PPUSH
13421: LD_INT 0
13423: PPUSH
13424: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13428: LD_VAR 0 5
13432: PPUSH
13433: LD_VAR 0 7
13437: PUSH
13438: LD_INT 1
13440: ARRAY
13441: PPUSH
13442: LD_VAR 0 7
13446: PUSH
13447: LD_INT 2
13449: ARRAY
13450: PPUSH
13451: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13455: LD_ADDR_EXP 46
13459: PUSH
13460: LD_EXP 46
13464: PPUSH
13465: LD_VAR 0 6
13469: PPUSH
13470: CALL 53826 0 2
13474: ST_TO_ADDR
// end ;
13475: GO 13363
13477: POP
13478: POP
// end ;
13479: LD_VAR 0 2
13483: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
13484: LD_EXP 45
13488: IFFALSE 14018
13490: GO 13492
13492: DISABLE
13493: LD_INT 0
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
// begin enable ;
13500: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13501: LD_ADDR_VAR 0 1
13505: PUSH
13506: LD_INT 120
13508: PUSH
13509: LD_INT 11
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 69
13520: PUSH
13521: FOR_IN
13522: IFFALSE 13538
// SetTag ( i , 0 ) ;
13524: LD_VAR 0 1
13528: PPUSH
13529: LD_INT 0
13531: PPUSH
13532: CALL_OW 109
13536: GO 13521
13538: POP
13539: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: LD_EXP 45
13549: PPUSH
13550: LD_INT 50
13552: PUSH
13553: EMPTY
13554: LIST
13555: PPUSH
13556: CALL_OW 72
13560: ST_TO_ADDR
// arAttackersInf := [ ] ;
13561: LD_ADDR_EXP 45
13565: PUSH
13566: EMPTY
13567: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13568: LD_ADDR_VAR 0 1
13572: PUSH
13573: LD_VAR 0 2
13577: PPUSH
13578: LD_INT 25
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 72
13592: PUSH
13593: FOR_IN
13594: IFFALSE 13725
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13596: LD_ADDR_VAR 0 3
13600: PUSH
13601: LD_INT 81
13603: PUSH
13604: LD_EXP 3
13608: PUSH
13609: LD_INT 1
13611: ARRAY
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: LD_INT 120
13622: PUSH
13623: LD_INT 11
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 2
13636: PUSH
13637: LD_INT 21
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 21
13649: PUSH
13650: LD_INT 3
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL_OW 69
13671: PPUSH
13672: LD_VAR 0 1
13676: PPUSH
13677: CALL_OW 74
13681: ST_TO_ADDR
// if not nearest then
13682: LD_VAR 0 3
13686: NOT
13687: IFFALSE 13691
// break ;
13689: GO 13725
// SetTag ( nearest , tMined ) ;
13691: LD_VAR 0 3
13695: PPUSH
13696: LD_INT 11
13698: PPUSH
13699: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13703: LD_VAR 0 1
13707: PPUSH
13708: LD_INT 0
13710: PPUSH
13711: LD_INT 0
13713: PPUSH
13714: LD_VAR 0 3
13718: PPUSH
13719: CALL_OW 192
// end ;
13723: GO 13593
13725: POP
13726: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_VAR 0 2
13736: PPUSH
13737: LD_INT 50
13739: PUSH
13740: EMPTY
13741: LIST
13742: PPUSH
13743: CALL_OW 72
13747: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13748: LD_INT 70
13750: PPUSH
13751: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 50
13767: PUSH
13768: EMPTY
13769: LIST
13770: PPUSH
13771: CALL_OW 72
13775: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13776: LD_ADDR_VAR 0 4
13780: PUSH
13781: LD_INT 81
13783: PUSH
13784: LD_EXP 3
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ST_TO_ADDR
// for i in tmp do
13802: LD_ADDR_VAR 0 1
13806: PUSH
13807: LD_VAR 0 2
13811: PUSH
13812: FOR_IN
13813: IFFALSE 14009
// if GetClass ( i ) <> 1 then
13815: LD_VAR 0 1
13819: PPUSH
13820: CALL_OW 257
13824: PUSH
13825: LD_INT 1
13827: NONEQUAL
13828: IFFALSE 13856
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_VAR 0 4
13839: PPUSH
13840: LD_VAR 0 1
13844: PPUSH
13845: CALL_OW 74
13849: PPUSH
13850: CALL_OW 115
13854: GO 14007
// if not HasTask ( i ) then
13856: LD_VAR 0 1
13860: PPUSH
13861: CALL_OW 314
13865: NOT
13866: IFFALSE 14007
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13868: LD_ADDR_VAR 0 3
13872: PUSH
13873: LD_VAR 0 4
13877: PPUSH
13878: LD_INT 3
13880: PUSH
13881: LD_INT 120
13883: PUSH
13884: LD_INT 11
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: LD_INT 21
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 21
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PPUSH
13927: CALL_OW 72
13931: PPUSH
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 74
13941: ST_TO_ADDR
// if not nearest then
13942: LD_VAR 0 3
13946: NOT
13947: IFFALSE 13975
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13949: LD_VAR 0 1
13953: PPUSH
13954: LD_VAR 0 4
13958: PPUSH
13959: LD_VAR 0 1
13963: PPUSH
13964: CALL_OW 74
13968: PPUSH
13969: CALL_OW 115
13973: GO 14007
// begin SetTag ( nearest , tMined ) ;
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_INT 11
13982: PPUSH
13983: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13987: LD_VAR 0 1
13991: PPUSH
13992: LD_INT 0
13994: PPUSH
13995: LD_INT 0
13997: PPUSH
13998: LD_VAR 0 3
14002: PPUSH
14003: CALL_OW 132
// end ; end ;
14007: GO 13812
14009: POP
14010: POP
// until not tmp ;
14011: LD_VAR 0 2
14015: NOT
14016: IFFALSE 13748
// end ;
14018: PPOPN 5
14020: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
14021: LD_EXP 46
14025: IFFALSE 14248
14027: GO 14029
14029: DISABLE
14030: LD_INT 0
14032: PPUSH
14033: PPUSH
14034: PPUSH
// begin enable ;
14035: ENABLE
// tmp := arAttackersVeh ;
14036: LD_ADDR_VAR 0 2
14040: PUSH
14041: LD_EXP 46
14045: ST_TO_ADDR
// arAttackersVeh := [ ] ;
14046: LD_ADDR_EXP 46
14050: PUSH
14051: EMPTY
14052: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
14053: LD_ADDR_VAR 0 3
14057: PUSH
14058: LD_INT 139
14060: PUSH
14061: LD_INT 55
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 155
14070: PUSH
14071: LD_INT 92
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 53
14084: PUSH
14085: LD_INT 61
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 74
14094: PUSH
14095: LD_INT 98
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
14110: LD_VAR 0 2
14114: PUSH
14115: LD_INT 1
14117: ARRAY
14118: PPUSH
14119: LD_INT 139
14121: PPUSH
14122: LD_INT 55
14124: PPUSH
14125: CALL_OW 297
14129: PUSH
14130: LD_VAR 0 2
14134: PUSH
14135: LD_INT 1
14137: ARRAY
14138: PPUSH
14139: LD_INT 53
14141: PPUSH
14142: LD_INT 61
14144: PPUSH
14145: CALL_OW 297
14149: LESS
14150: IFFALSE 14168
// path := path [ 1 ] else
14152: LD_ADDR_VAR 0 3
14156: PUSH
14157: LD_VAR 0 3
14161: PUSH
14162: LD_INT 1
14164: ARRAY
14165: ST_TO_ADDR
14166: GO 14182
// path := path [ 2 ] ;
14168: LD_ADDR_VAR 0 3
14172: PUSH
14173: LD_VAR 0 3
14177: PUSH
14178: LD_INT 2
14180: ARRAY
14181: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14182: LD_INT 70
14184: PPUSH
14185: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14189: LD_ADDR_VAR 0 2
14193: PUSH
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_INT 50
14201: PUSH
14202: EMPTY
14203: LIST
14204: PPUSH
14205: CALL_OW 72
14209: ST_TO_ADDR
// for i in tmp do
14210: LD_ADDR_VAR 0 1
14214: PUSH
14215: LD_VAR 0 2
14219: PUSH
14220: FOR_IN
14221: IFFALSE 14239
// AgressiveMove ( i , path ) until not tmp ;
14223: LD_VAR 0 1
14227: PPUSH
14228: LD_VAR 0 3
14232: PPUSH
14233: CALL 56592 0 2
14237: GO 14220
14239: POP
14240: POP
14241: LD_VAR 0 2
14245: NOT
14246: IFFALSE 14182
// end ;
14248: PPOPN 3
14250: END
// every 1 1$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
14251: LD_EXP 16
14255: PPUSH
14256: CALL 17894 0 1
14260: PUSH
14261: LD_INT 3
14263: GREATEREQUAL
14264: IFFALSE 14385
14266: GO 14268
14268: DISABLE
14269: LD_INT 0
14271: PPUSH
14272: PPUSH
// begin enable ;
14273: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
14274: LD_ADDR_VAR 0 2
14278: PUSH
14279: LD_EXP 16
14283: PPUSH
14284: LD_INT 61
14286: PUSH
14287: EMPTY
14288: LIST
14289: PPUSH
14290: CALL_OW 72
14294: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
14295: LD_ADDR_EXP 16
14299: PUSH
14300: LD_EXP 16
14304: PUSH
14305: LD_VAR 0 2
14309: DIFF
14310: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14311: LD_INT 70
14313: PPUSH
14314: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_VAR 0 2
14327: PPUSH
14328: LD_INT 50
14330: PUSH
14331: EMPTY
14332: LIST
14333: PPUSH
14334: CALL_OW 72
14338: ST_TO_ADDR
// for i in tmp do
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_VAR 0 2
14348: PUSH
14349: FOR_IN
14350: IFFALSE 14376
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_INT 98
14359: PUSH
14360: LD_INT 63
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: PPUSH
14370: CALL 56592 0 2
14374: GO 14349
14376: POP
14377: POP
14378: LD_VAR 0 2
14382: NOT
14383: IFFALSE 14311
// end ;
14385: PPOPN 2
14387: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
14388: LD_EXP 9
14392: IFFALSE 14400
14394: PUSH
14395: LD_EXP 4
14399: AND
14400: IFFALSE 14959
14402: GO 14404
14404: DISABLE
14405: LD_INT 0
14407: PPUSH
14408: PPUSH
14409: PPUSH
// begin enable ;
14410: ENABLE
// if not arVehiclesAtttackers then
14411: LD_EXP 9
14415: NOT
14416: IFFALSE 14420
// exit ;
14418: GO 14959
// for i in arVehiclesAtttackers do
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: LD_EXP 9
14429: PUSH
14430: FOR_IN
14431: IFFALSE 14957
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 302
14442: NOT
14443: IFTRUE 14466
14445: PUSH
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 255
14455: PUSH
14456: LD_EXP 3
14460: PUSH
14461: LD_INT 1
14463: ARRAY
14464: NONEQUAL
14465: OR
14466: IFFALSE 14486
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
14468: LD_ADDR_EXP 9
14472: PUSH
14473: LD_EXP 9
14477: PUSH
14478: LD_VAR 0 1
14482: DIFF
14483: ST_TO_ADDR
// continue ;
14484: GO 14430
// end ; if GetTag ( i ) = 300 then
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 110
14495: PUSH
14496: LD_INT 300
14498: EQUAL
14499: IFFALSE 14614
// begin if GetFuel ( i ) < 50 then
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 261
14510: PUSH
14511: LD_INT 50
14513: LESS
14514: IFFALSE 14573
// begin ComMoveXY ( i , 102 , 47 ) ;
14516: LD_VAR 0 1
14520: PPUSH
14521: LD_INT 102
14523: PPUSH
14524: LD_INT 47
14526: PPUSH
14527: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14531: LD_INT 35
14533: PPUSH
14534: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14538: LD_VAR 0 1
14542: PPUSH
14543: LD_INT 102
14545: PPUSH
14546: LD_INT 47
14548: PPUSH
14549: CALL_OW 297
14553: PUSH
14554: LD_INT 4
14556: LESS
14557: IFFALSE 14531
// SetFuel ( i , 100 ) ;
14559: LD_VAR 0 1
14563: PPUSH
14564: LD_INT 100
14566: PPUSH
14567: CALL_OW 240
// end else
14571: GO 14614
// if not IsInArea ( i , arParkingArea ) then
14573: LD_VAR 0 1
14577: PPUSH
14578: LD_INT 14
14580: PPUSH
14581: CALL_OW 308
14585: NOT
14586: IFFALSE 14602
// ComMoveToArea ( i , arParkingArea ) else
14588: LD_VAR 0 1
14592: PPUSH
14593: LD_INT 14
14595: PPUSH
14596: CALL_OW 113
14600: GO 14614
// SetTag ( i , 301 ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: LD_INT 301
14609: PPUSH
14610: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 110
14623: PUSH
14624: LD_INT 301
14626: EQUAL
14627: IFFALSE 14769
// begin if GetLives ( i ) < 1000 then
14629: LD_VAR 0 1
14633: PPUSH
14634: CALL_OW 256
14638: PUSH
14639: LD_INT 1000
14641: LESS
14642: IFFALSE 14746
// begin if not IsDrivenBy ( i ) then
14644: LD_VAR 0 1
14648: PPUSH
14649: CALL_OW 311
14653: NOT
14654: IFFALSE 14658
// continue ;
14656: GO 14430
// mech := IsDrivenBy ( i ) ;
14658: LD_ADDR_VAR 0 2
14662: PUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: CALL_OW 311
14672: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14673: LD_VAR 0 2
14677: PPUSH
14678: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14682: LD_VAR 0 2
14686: PPUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14696: LD_INT 35
14698: PPUSH
14699: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 256
14712: PUSH
14713: LD_INT 1000
14715: EQUAL
14716: IFFALSE 14696
// SetLives ( mech , 1000 ) ;
14718: LD_VAR 0 2
14722: PPUSH
14723: LD_INT 1000
14725: PPUSH
14726: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14730: LD_VAR 0 2
14734: PPUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 120
// end else
14744: GO 14769
// if IsDrivenBy ( i ) then
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 311
14755: IFFALSE 14769
// SetTag ( i , 0 ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_INT 0
14764: PPUSH
14765: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 110
14778: PUSH
14779: LD_INT 300
14781: LESS
14782: IFFALSE 14955
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14784: LD_ADDR_VAR 0 3
14788: PUSH
14789: LD_INT 1
14791: PPUSH
14792: LD_INT 81
14794: PUSH
14795: LD_EXP 3
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 70
14812: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 256
14822: PUSH
14823: LD_INT 650
14825: LESS
14826: IFFALSE 14851
// begin ComStop ( i ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 141
// SetTag ( i , 300 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 300
14844: PPUSH
14845: CALL_OW 109
// continue ;
14849: GO 14430
// end ; if enemy then
14851: LD_VAR 0 3
14855: IFFALSE 14895
// begin if not HasTask ( i ) then
14857: LD_VAR 0 1
14861: PPUSH
14862: CALL_OW 314
14866: NOT
14867: IFFALSE 14893
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14869: LD_VAR 0 1
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_VAR 0 1
14883: PPUSH
14884: CALL_OW 74
14888: PPUSH
14889: CALL_OW 115
// end else
14893: GO 14955
// if arVehiclesAtttackers then
14895: LD_EXP 9
14899: IFFALSE 14955
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: LD_INT 81
14908: PUSH
14909: LD_EXP 3
14913: PUSH
14914: LD_INT 1
14916: ARRAY
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PPUSH
14922: CALL_OW 69
14926: ST_TO_ADDR
// if enemy then
14927: LD_VAR 0 3
14931: IFFALSE 14955
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_INT 99
14940: PUSH
14941: LD_INT 66
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: PPUSH
14951: CALL 56592 0 2
// end ; end ; end ;
14955: GO 14430
14957: POP
14958: POP
// end ;
14959: PPOPN 3
14961: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14962: LD_INT 22
14964: PUSH
14965: LD_EXP 3
14969: PUSH
14970: LD_INT 1
14972: ARRAY
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 32
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL_OW 69
14996: IFFALSE 15079
14998: GO 15000
15000: DISABLE
15001: LD_INT 0
15003: PPUSH
// begin enable ;
15004: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
15005: LD_ADDR_VAR 0 1
15009: PUSH
15010: LD_INT 22
15012: PUSH
15013: LD_EXP 3
15017: PUSH
15018: LD_INT 1
15020: ARRAY
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 32
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: PUSH
15045: FOR_IN
15046: IFFALSE 15077
// if GetFuel ( i ) < 3 then
15048: LD_VAR 0 1
15052: PPUSH
15053: CALL_OW 261
15057: PUSH
15058: LD_INT 3
15060: LESS
15061: IFFALSE 15075
// SetFuel ( i , 3 ) ;
15063: LD_VAR 0 1
15067: PPUSH
15068: LD_INT 3
15070: PPUSH
15071: CALL_OW 240
15075: GO 15045
15077: POP
15078: POP
// end ; end_of_file
15079: PPOPN 1
15081: END
// every 0 0$20 trigger game do
15082: LD_EXP 2
15086: IFFALSE 15131
15088: GO 15090
15090: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
15091: LD_INT 15
15093: PUSH
15094: LD_INT 17
15096: PUSH
15097: LD_INT 16
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: PPUSH
15109: LD_EXP 32
15113: PUSH
15114: LD_INT 2
15116: ARRAY
15117: PPUSH
15118: LD_EXP 32
15122: PUSH
15123: LD_INT 1
15125: ARRAY
15126: PPUSH
15127: CALL 15132 0 3
15131: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
15132: LD_INT 0
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
// if not areas then
15138: LD_VAR 0 1
15142: NOT
15143: IFFALSE 15147
// exit ;
15145: GO 15526
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
15147: LD_ADDR_VAR 0 7
15151: PUSH
15152: LD_INT 18
15154: PUSH
15155: LD_INT 19
15157: PUSH
15158: LD_INT 20
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: ST_TO_ADDR
// x := 5 ;
15166: LD_ADDR_VAR 0 6
15170: PUSH
15171: LD_INT 5
15173: ST_TO_ADDR
// repeat wait ( time ) ;
15174: LD_VAR 0 2
15178: PPUSH
15179: CALL_OW 67
// if tick < [ 22 22$00 , 19 19$00 , 15 15$00 ] [ Difficulty ] then
15183: LD_OWVAR 1
15187: PUSH
15188: LD_INT 46200
15190: PUSH
15191: LD_INT 39900
15193: PUSH
15194: LD_INT 31500
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PUSH
15202: LD_OWVAR 67
15206: ARRAY
15207: LESS
15208: IFFALSE 15347
// begin for i := 1 to multi_sides do
15210: LD_ADDR_VAR 0 5
15214: PUSH
15215: DOUBLE
15216: LD_INT 1
15218: DEC
15219: ST_TO_ADDR
15220: LD_EXP 18
15224: PUSH
15225: FOR_TO
15226: IFFALSE 15338
// if multi_sides [ i ] then
15228: LD_EXP 18
15232: PUSH
15233: LD_VAR 0 5
15237: ARRAY
15238: IFFALSE 15336
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
15240: LD_VAR 0 7
15244: PUSH
15245: LD_EXP 18
15249: PUSH
15250: LD_VAR 0 5
15254: ARRAY
15255: ARRAY
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 287
15264: PUSH
15265: LD_INT 32
15267: PUSH
15268: LD_INT 25
15270: PUSH
15271: LD_INT 23
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: LD_OWVAR 67
15283: ARRAY
15284: LESS
15285: IFFALSE 15336
// begin amount := amount - ( x * 10 ) ;
15287: LD_ADDR_VAR 0 3
15291: PUSH
15292: LD_VAR 0 3
15296: PUSH
15297: LD_VAR 0 6
15301: PUSH
15302: LD_INT 10
15304: MUL
15305: MINUS
15306: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
15307: LD_VAR 0 6
15311: PPUSH
15312: LD_VAR 0 7
15316: PUSH
15317: LD_EXP 18
15321: PUSH
15322: LD_VAR 0 5
15326: ARRAY
15327: ARRAY
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: CALL_OW 55
// end ; end ;
15336: GO 15225
15338: POP
15339: POP
// wait ( 0 0$2 ) ;
15340: LD_INT 70
15342: PPUSH
15343: CALL_OW 67
// end ; for i in areas do
15347: LD_ADDR_VAR 0 5
15351: PUSH
15352: LD_VAR 0 1
15356: PUSH
15357: FOR_IN
15358: IFFALSE 15441
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
15360: LD_VAR 0 5
15364: PPUSH
15365: LD_INT 1
15367: PPUSH
15368: CALL_OW 287
15372: PUSH
15373: LD_INT 25
15375: PUSH
15376: LD_INT 22
15378: PUSH
15379: LD_INT 20
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: PUSH
15387: LD_OWVAR 67
15391: ARRAY
15392: LESS
15393: IFFALSE 15439
// begin wait ( 0 0$5 ) ;
15395: LD_INT 175
15397: PPUSH
15398: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15402: LD_VAR 0 6
15406: PPUSH
15407: LD_VAR 0 5
15411: PPUSH
15412: LD_INT 1
15414: PPUSH
15415: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15419: LD_ADDR_VAR 0 3
15423: PUSH
15424: LD_VAR 0 3
15428: PUSH
15429: LD_VAR 0 6
15433: PUSH
15434: LD_INT 10
15436: MUL
15437: MINUS
15438: ST_TO_ADDR
// end ; end ;
15439: GO 15357
15441: POP
15442: POP
// time := time + 0 0$2 ;
15443: LD_ADDR_VAR 0 2
15447: PUSH
15448: LD_VAR 0 2
15452: PUSH
15453: LD_INT 70
15455: PLUS
15456: ST_TO_ADDR
// x := x - 1 ;
15457: LD_ADDR_VAR 0 6
15461: PUSH
15462: LD_VAR 0 6
15466: PUSH
15467: LD_INT 1
15469: MINUS
15470: ST_TO_ADDR
// if x = 0 then
15471: LD_VAR 0 6
15475: PUSH
15476: LD_INT 0
15478: EQUAL
15479: IFFALSE 15489
// x := 5 ;
15481: LD_ADDR_VAR 0 6
15485: PUSH
15486: LD_INT 5
15488: ST_TO_ADDR
// if time > 1 1$00 then
15489: LD_VAR 0 2
15493: PUSH
15494: LD_INT 2100
15496: GREATER
15497: IFFALSE 15507
// time := 0 0$30 ;
15499: LD_ADDR_VAR 0 2
15503: PUSH
15504: LD_INT 1050
15506: ST_TO_ADDR
// until not game or amount <= 0 ;
15507: LD_EXP 2
15511: NOT
15512: IFTRUE 15524
15514: PUSH
15515: LD_VAR 0 3
15519: PUSH
15520: LD_INT 0
15522: LESSEQUAL
15523: OR
15524: IFFALSE 15174
// end ; end_of_file
15526: LD_VAR 0 4
15530: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 200
15538: DOUBLE
15539: GREATEREQUAL
15540: IFFALSE 15548
15542: LD_INT 299
15544: DOUBLE
15545: LESSEQUAL
15546: IFTRUE 15550
15548: GO 15582
15550: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15551: LD_VAR 0 1
15555: PPUSH
15556: LD_VAR 0 2
15560: PPUSH
15561: LD_VAR 0 3
15565: PPUSH
15566: LD_VAR 0 4
15570: PPUSH
15571: LD_VAR 0 5
15575: PPUSH
15576: CALL 59849 0 5
15580: GO 15659
15582: LD_INT 300
15584: DOUBLE
15585: GREATEREQUAL
15586: IFFALSE 15594
15588: LD_INT 399
15590: DOUBLE
15591: LESSEQUAL
15592: IFTRUE 15596
15594: GO 15658
15596: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15597: LD_VAR 0 1
15601: PPUSH
15602: LD_VAR 0 2
15606: PPUSH
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_VAR 0 4
15616: PPUSH
15617: LD_VAR 0 5
15621: PPUSH
15622: LD_VAR 0 6
15626: PPUSH
15627: LD_VAR 0 7
15631: PPUSH
15632: LD_VAR 0 8
15636: PPUSH
15637: LD_VAR 0 9
15641: PPUSH
15642: LD_VAR 0 10
15646: PPUSH
15647: LD_VAR 0 11
15651: PPUSH
15652: CALL 65254 0 11
15656: GO 15659
15658: POP
// end ;
15659: PPOPN 11
15661: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15662: LD_VAR 0 1
15666: PPUSH
15667: LD_VAR 0 2
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_VAR 0 4
15681: PPUSH
15682: LD_VAR 0 5
15686: PPUSH
15687: CALL 59230 0 5
// end ; end_of_file
15691: PPOPN 5
15693: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15694: LD_INT 0
15696: PPUSH
15697: PPUSH
// if exist_mode then
15698: LD_VAR 0 2
15702: IFFALSE 15748
// begin unit := CreateCharacter ( prefix & ident ) ;
15704: LD_ADDR_VAR 0 5
15708: PUSH
15709: LD_VAR 0 3
15713: PUSH
15714: LD_VAR 0 1
15718: STR
15719: PPUSH
15720: CALL_OW 34
15724: ST_TO_ADDR
// if unit then
15725: LD_VAR 0 5
15729: IFFALSE 15746
// DeleteCharacters ( prefix & ident ) ;
15731: LD_VAR 0 3
15735: PUSH
15736: LD_VAR 0 1
15740: STR
15741: PPUSH
15742: CALL_OW 40
// end else
15746: GO 15763
// unit := NewCharacter ( ident ) ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_VAR 0 1
15757: PPUSH
15758: CALL_OW 25
15762: ST_TO_ADDR
// result := unit ;
15763: LD_ADDR_VAR 0 4
15767: PUSH
15768: LD_VAR 0 5
15772: ST_TO_ADDR
// end ;
15773: LD_VAR 0 4
15777: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15778: LD_INT 0
15780: PPUSH
15781: PPUSH
// if exist_mode then
15782: LD_VAR 0 2
15786: IFFALSE 15811
// unit := CreateCharacter ( prefix & ident ) else
15788: LD_ADDR_VAR 0 5
15792: PUSH
15793: LD_VAR 0 3
15797: PUSH
15798: LD_VAR 0 1
15802: STR
15803: PPUSH
15804: CALL_OW 34
15808: ST_TO_ADDR
15809: GO 15826
// unit := NewCharacter ( ident ) ;
15811: LD_ADDR_VAR 0 5
15815: PUSH
15816: LD_VAR 0 1
15820: PPUSH
15821: CALL_OW 25
15825: ST_TO_ADDR
// result := unit ;
15826: LD_ADDR_VAR 0 4
15830: PUSH
15831: LD_VAR 0 5
15835: ST_TO_ADDR
// end ;
15836: LD_VAR 0 4
15840: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
// if not side or not nation then
15845: LD_VAR 0 1
15849: NOT
15850: IFTRUE 15859
15852: PUSH
15853: LD_VAR 0 2
15857: NOT
15858: OR
15859: IFFALSE 15863
// exit ;
15861: GO 16633
// case nation of nation_american :
15863: LD_VAR 0 2
15867: PUSH
15868: LD_INT 1
15870: DOUBLE
15871: EQUAL
15872: IFTRUE 15876
15874: GO 16090
15876: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15877: LD_ADDR_VAR 0 4
15881: PUSH
15882: LD_INT 35
15884: PUSH
15885: LD_INT 45
15887: PUSH
15888: LD_INT 46
15890: PUSH
15891: LD_INT 47
15893: PUSH
15894: LD_INT 82
15896: PUSH
15897: LD_INT 83
15899: PUSH
15900: LD_INT 84
15902: PUSH
15903: LD_INT 85
15905: PUSH
15906: LD_INT 86
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: LD_INT 6
15917: PUSH
15918: LD_INT 15
15920: PUSH
15921: LD_INT 16
15923: PUSH
15924: LD_INT 7
15926: PUSH
15927: LD_INT 12
15929: PUSH
15930: LD_INT 13
15932: PUSH
15933: LD_INT 10
15935: PUSH
15936: LD_INT 14
15938: PUSH
15939: LD_INT 20
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 22
15947: PUSH
15948: LD_INT 25
15950: PUSH
15951: LD_INT 32
15953: PUSH
15954: LD_INT 27
15956: PUSH
15957: LD_INT 36
15959: PUSH
15960: LD_INT 69
15962: PUSH
15963: LD_INT 39
15965: PUSH
15966: LD_INT 34
15968: PUSH
15969: LD_INT 40
15971: PUSH
15972: LD_INT 48
15974: PUSH
15975: LD_INT 49
15977: PUSH
15978: LD_INT 50
15980: PUSH
15981: LD_INT 51
15983: PUSH
15984: LD_INT 52
15986: PUSH
15987: LD_INT 53
15989: PUSH
15990: LD_INT 54
15992: PUSH
15993: LD_INT 55
15995: PUSH
15996: LD_INT 56
15998: PUSH
15999: LD_INT 57
16001: PUSH
16002: LD_INT 58
16004: PUSH
16005: LD_INT 59
16007: PUSH
16008: LD_INT 60
16010: PUSH
16011: LD_INT 61
16013: PUSH
16014: LD_INT 62
16016: PUSH
16017: LD_INT 80
16019: PUSH
16020: LD_INT 82
16022: PUSH
16023: LD_INT 83
16025: PUSH
16026: LD_INT 84
16028: PUSH
16029: LD_INT 85
16031: PUSH
16032: LD_INT 86
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: ST_TO_ADDR
16088: GO 16555
16090: LD_INT 2
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16324
16098: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16099: LD_ADDR_VAR 0 4
16103: PUSH
16104: LD_INT 35
16106: PUSH
16107: LD_INT 45
16109: PUSH
16110: LD_INT 46
16112: PUSH
16113: LD_INT 47
16115: PUSH
16116: LD_INT 82
16118: PUSH
16119: LD_INT 83
16121: PUSH
16122: LD_INT 84
16124: PUSH
16125: LD_INT 85
16127: PUSH
16128: LD_INT 87
16130: PUSH
16131: LD_INT 70
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: LD_INT 11
16139: PUSH
16140: LD_INT 3
16142: PUSH
16143: LD_INT 4
16145: PUSH
16146: LD_INT 5
16148: PUSH
16149: LD_INT 6
16151: PUSH
16152: LD_INT 15
16154: PUSH
16155: LD_INT 18
16157: PUSH
16158: LD_INT 7
16160: PUSH
16161: LD_INT 17
16163: PUSH
16164: LD_INT 8
16166: PUSH
16167: LD_INT 20
16169: PUSH
16170: LD_INT 21
16172: PUSH
16173: LD_INT 22
16175: PUSH
16176: LD_INT 72
16178: PUSH
16179: LD_INT 26
16181: PUSH
16182: LD_INT 69
16184: PUSH
16185: LD_INT 39
16187: PUSH
16188: LD_INT 40
16190: PUSH
16191: LD_INT 41
16193: PUSH
16194: LD_INT 42
16196: PUSH
16197: LD_INT 43
16199: PUSH
16200: LD_INT 48
16202: PUSH
16203: LD_INT 49
16205: PUSH
16206: LD_INT 50
16208: PUSH
16209: LD_INT 51
16211: PUSH
16212: LD_INT 52
16214: PUSH
16215: LD_INT 53
16217: PUSH
16218: LD_INT 54
16220: PUSH
16221: LD_INT 55
16223: PUSH
16224: LD_INT 56
16226: PUSH
16227: LD_INT 60
16229: PUSH
16230: LD_INT 61
16232: PUSH
16233: LD_INT 62
16235: PUSH
16236: LD_INT 66
16238: PUSH
16239: LD_INT 67
16241: PUSH
16242: LD_INT 68
16244: PUSH
16245: LD_INT 81
16247: PUSH
16248: LD_INT 82
16250: PUSH
16251: LD_INT 83
16253: PUSH
16254: LD_INT 84
16256: PUSH
16257: LD_INT 85
16259: PUSH
16260: LD_INT 87
16262: PUSH
16263: LD_INT 88
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: ST_TO_ADDR
16322: GO 16555
16324: LD_INT 3
16326: DOUBLE
16327: EQUAL
16328: IFTRUE 16332
16330: GO 16554
16332: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16333: LD_ADDR_VAR 0 4
16337: PUSH
16338: LD_INT 46
16340: PUSH
16341: LD_INT 47
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 82
16352: PUSH
16353: LD_INT 83
16355: PUSH
16356: LD_INT 84
16358: PUSH
16359: LD_INT 85
16361: PUSH
16362: LD_INT 86
16364: PUSH
16365: LD_INT 11
16367: PUSH
16368: LD_INT 9
16370: PUSH
16371: LD_INT 20
16373: PUSH
16374: LD_INT 19
16376: PUSH
16377: LD_INT 21
16379: PUSH
16380: LD_INT 24
16382: PUSH
16383: LD_INT 22
16385: PUSH
16386: LD_INT 25
16388: PUSH
16389: LD_INT 28
16391: PUSH
16392: LD_INT 29
16394: PUSH
16395: LD_INT 30
16397: PUSH
16398: LD_INT 31
16400: PUSH
16401: LD_INT 37
16403: PUSH
16404: LD_INT 38
16406: PUSH
16407: LD_INT 32
16409: PUSH
16410: LD_INT 27
16412: PUSH
16413: LD_INT 33
16415: PUSH
16416: LD_INT 69
16418: PUSH
16419: LD_INT 39
16421: PUSH
16422: LD_INT 34
16424: PUSH
16425: LD_INT 40
16427: PUSH
16428: LD_INT 71
16430: PUSH
16431: LD_INT 23
16433: PUSH
16434: LD_INT 44
16436: PUSH
16437: LD_INT 48
16439: PUSH
16440: LD_INT 49
16442: PUSH
16443: LD_INT 50
16445: PUSH
16446: LD_INT 51
16448: PUSH
16449: LD_INT 52
16451: PUSH
16452: LD_INT 53
16454: PUSH
16455: LD_INT 54
16457: PUSH
16458: LD_INT 55
16460: PUSH
16461: LD_INT 56
16463: PUSH
16464: LD_INT 57
16466: PUSH
16467: LD_INT 58
16469: PUSH
16470: LD_INT 59
16472: PUSH
16473: LD_INT 63
16475: PUSH
16476: LD_INT 64
16478: PUSH
16479: LD_INT 65
16481: PUSH
16482: LD_INT 82
16484: PUSH
16485: LD_INT 83
16487: PUSH
16488: LD_INT 84
16490: PUSH
16491: LD_INT 85
16493: PUSH
16494: LD_INT 86
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: ST_TO_ADDR
16552: GO 16555
16554: POP
// if state > - 1 and state < 3 then
16555: LD_VAR 0 3
16559: PUSH
16560: LD_INT 1
16562: NEG
16563: GREATER
16564: IFFALSE 16576
16566: PUSH
16567: LD_VAR 0 3
16571: PUSH
16572: LD_INT 3
16574: LESS
16575: AND
16576: IFFALSE 16633
// for i in result do
16578: LD_ADDR_VAR 0 5
16582: PUSH
16583: LD_VAR 0 4
16587: PUSH
16588: FOR_IN
16589: IFFALSE 16631
// if GetTech ( i , side ) <> state then
16591: LD_VAR 0 5
16595: PPUSH
16596: LD_VAR 0 1
16600: PPUSH
16601: CALL_OW 321
16605: PUSH
16606: LD_VAR 0 3
16610: NONEQUAL
16611: IFFALSE 16629
// result := result diff i ;
16613: LD_ADDR_VAR 0 4
16617: PUSH
16618: LD_VAR 0 4
16622: PUSH
16623: LD_VAR 0 5
16627: DIFF
16628: ST_TO_ADDR
16629: GO 16588
16631: POP
16632: POP
// end ;
16633: LD_VAR 0 4
16637: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16638: LD_INT 0
16640: PPUSH
16641: PPUSH
16642: PPUSH
// result := true ;
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_INT 1
16650: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16651: LD_ADDR_VAR 0 5
16655: PUSH
16656: LD_VAR 0 2
16660: PPUSH
16661: CALL_OW 480
16665: ST_TO_ADDR
// if not tmp then
16666: LD_VAR 0 5
16670: NOT
16671: IFFALSE 16675
// exit ;
16673: GO 16724
// for i in tmp do
16675: LD_ADDR_VAR 0 4
16679: PUSH
16680: LD_VAR 0 5
16684: PUSH
16685: FOR_IN
16686: IFFALSE 16722
// if GetTech ( i , side ) <> state_researched then
16688: LD_VAR 0 4
16692: PPUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 321
16702: PUSH
16703: LD_INT 2
16705: NONEQUAL
16706: IFFALSE 16720
// begin result := false ;
16708: LD_ADDR_VAR 0 3
16712: PUSH
16713: LD_INT 0
16715: ST_TO_ADDR
// exit ;
16716: POP
16717: POP
16718: GO 16724
// end ;
16720: GO 16685
16722: POP
16723: POP
// end ;
16724: LD_VAR 0 3
16728: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16729: LD_INT 0
16731: PPUSH
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
16736: PPUSH
16737: PPUSH
16738: PPUSH
16739: PPUSH
16740: PPUSH
16741: PPUSH
16742: PPUSH
16743: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16744: LD_VAR 0 1
16748: NOT
16749: IFTRUE 16766
16751: PUSH
16752: LD_VAR 0 1
16756: PPUSH
16757: CALL_OW 257
16761: PUSH
16762: LD_INT 9
16764: NONEQUAL
16765: OR
16766: IFFALSE 16770
// exit ;
16768: GO 17349
// side := GetSide ( unit ) ;
16770: LD_ADDR_VAR 0 9
16774: PUSH
16775: LD_VAR 0 1
16779: PPUSH
16780: CALL_OW 255
16784: ST_TO_ADDR
// tech_space := tech_spacanom ;
16785: LD_ADDR_VAR 0 12
16789: PUSH
16790: LD_INT 29
16792: ST_TO_ADDR
// tech_time := tech_taurad ;
16793: LD_ADDR_VAR 0 13
16797: PUSH
16798: LD_INT 28
16800: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16801: LD_ADDR_VAR 0 11
16805: PUSH
16806: LD_VAR 0 1
16810: PPUSH
16811: CALL_OW 310
16815: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16816: LD_VAR 0 11
16820: PPUSH
16821: CALL_OW 247
16825: PUSH
16826: LD_INT 2
16828: EQUAL
16829: IFFALSE 16833
// exit ;
16831: GO 17349
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16833: LD_ADDR_VAR 0 8
16837: PUSH
16838: LD_INT 81
16840: PUSH
16841: LD_VAR 0 9
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: LD_INT 21
16855: PUSH
16856: LD_INT 3
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PPUSH
16871: CALL_OW 69
16875: ST_TO_ADDR
// if not tmp then
16876: LD_VAR 0 8
16880: NOT
16881: IFFALSE 16885
// exit ;
16883: GO 17349
// if in_unit then
16885: LD_VAR 0 11
16889: IFFALSE 16913
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16891: LD_ADDR_VAR 0 10
16895: PUSH
16896: LD_VAR 0 8
16900: PPUSH
16901: LD_VAR 0 11
16905: PPUSH
16906: CALL_OW 74
16910: ST_TO_ADDR
16911: GO 16933
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16913: LD_ADDR_VAR 0 10
16917: PUSH
16918: LD_VAR 0 8
16922: PPUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 74
16932: ST_TO_ADDR
// if not enemy then
16933: LD_VAR 0 10
16937: NOT
16938: IFFALSE 16942
// exit ;
16940: GO 17349
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16942: LD_VAR 0 11
16946: IFFALSE 16968
16948: PUSH
16949: LD_VAR 0 11
16953: PPUSH
16954: LD_VAR 0 10
16958: PPUSH
16959: CALL_OW 296
16963: PUSH
16964: LD_INT 13
16966: GREATER
16967: AND
16968: IFTRUE 16990
16970: PUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: LD_VAR 0 10
16980: PPUSH
16981: CALL_OW 296
16985: PUSH
16986: LD_INT 12
16988: GREATER
16989: OR
16990: IFFALSE 16994
// exit ;
16992: GO 17349
// missile := [ 1 ] ;
16994: LD_ADDR_VAR 0 14
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17005: LD_VAR 0 9
17009: PPUSH
17010: LD_VAR 0 12
17014: PPUSH
17015: CALL_OW 325
17019: IFFALSE 17048
// missile := Replace ( missile , missile + 1 , 2 ) ;
17021: LD_ADDR_VAR 0 14
17025: PUSH
17026: LD_VAR 0 14
17030: PPUSH
17031: LD_VAR 0 14
17035: PUSH
17036: LD_INT 1
17038: PLUS
17039: PPUSH
17040: LD_INT 2
17042: PPUSH
17043: CALL_OW 1
17047: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17048: LD_VAR 0 9
17052: PPUSH
17053: LD_VAR 0 13
17057: PPUSH
17058: CALL_OW 325
17062: IFFALSE 17086
17064: PUSH
17065: LD_VAR 0 10
17069: PPUSH
17070: CALL_OW 255
17074: PPUSH
17075: LD_VAR 0 13
17079: PPUSH
17080: CALL_OW 325
17084: NOT
17085: AND
17086: IFFALSE 17115
// missile := Replace ( missile , missile + 1 , 3 ) ;
17088: LD_ADDR_VAR 0 14
17092: PUSH
17093: LD_VAR 0 14
17097: PPUSH
17098: LD_VAR 0 14
17102: PUSH
17103: LD_INT 1
17105: PLUS
17106: PPUSH
17107: LD_INT 3
17109: PPUSH
17110: CALL_OW 1
17114: ST_TO_ADDR
// if missile < 2 then
17115: LD_VAR 0 14
17119: PUSH
17120: LD_INT 2
17122: LESS
17123: IFFALSE 17127
// exit ;
17125: GO 17349
// x := GetX ( enemy ) ;
17127: LD_ADDR_VAR 0 4
17131: PUSH
17132: LD_VAR 0 10
17136: PPUSH
17137: CALL_OW 250
17141: ST_TO_ADDR
// y := GetY ( enemy ) ;
17142: LD_ADDR_VAR 0 5
17146: PUSH
17147: LD_VAR 0 10
17151: PPUSH
17152: CALL_OW 251
17156: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17157: LD_ADDR_VAR 0 6
17161: PUSH
17162: LD_VAR 0 4
17166: PUSH
17167: LD_INT 1
17169: NEG
17170: PPUSH
17171: LD_INT 1
17173: PPUSH
17174: CALL_OW 12
17178: PLUS
17179: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17180: LD_ADDR_VAR 0 7
17184: PUSH
17185: LD_VAR 0 5
17189: PUSH
17190: LD_INT 1
17192: NEG
17193: PPUSH
17194: LD_INT 1
17196: PPUSH
17197: CALL_OW 12
17201: PLUS
17202: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17203: LD_VAR 0 6
17207: PPUSH
17208: LD_VAR 0 7
17212: PPUSH
17213: CALL_OW 488
17217: NOT
17218: IFFALSE 17240
// begin _x := x ;
17220: LD_ADDR_VAR 0 6
17224: PUSH
17225: LD_VAR 0 4
17229: ST_TO_ADDR
// _y := y ;
17230: LD_ADDR_VAR 0 7
17234: PUSH
17235: LD_VAR 0 5
17239: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17240: LD_ADDR_VAR 0 3
17244: PUSH
17245: LD_INT 1
17247: PPUSH
17248: LD_VAR 0 14
17252: PPUSH
17253: CALL_OW 12
17257: ST_TO_ADDR
// case i of 1 :
17258: LD_VAR 0 3
17262: PUSH
17263: LD_INT 1
17265: DOUBLE
17266: EQUAL
17267: IFTRUE 17271
17269: GO 17288
17271: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17272: LD_VAR 0 1
17276: PPUSH
17277: LD_VAR 0 10
17281: PPUSH
17282: CALL_OW 115
17286: GO 17349
17288: LD_INT 2
17290: DOUBLE
17291: EQUAL
17292: IFTRUE 17296
17294: GO 17318
17296: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17297: LD_VAR 0 1
17301: PPUSH
17302: LD_VAR 0 6
17306: PPUSH
17307: LD_VAR 0 7
17311: PPUSH
17312: CALL_OW 153
17316: GO 17349
17318: LD_INT 3
17320: DOUBLE
17321: EQUAL
17322: IFTRUE 17326
17324: GO 17348
17326: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17327: LD_VAR 0 1
17331: PPUSH
17332: LD_VAR 0 6
17336: PPUSH
17337: LD_VAR 0 7
17341: PPUSH
17342: CALL_OW 154
17346: GO 17349
17348: POP
// end ;
17349: LD_VAR 0 2
17353: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17354: LD_INT 0
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
// if not unit or not building then
17362: LD_VAR 0 1
17366: NOT
17367: IFTRUE 17376
17369: PUSH
17370: LD_VAR 0 2
17374: NOT
17375: OR
17376: IFFALSE 17380
// exit ;
17378: GO 17538
// x := GetX ( building ) ;
17380: LD_ADDR_VAR 0 5
17384: PUSH
17385: LD_VAR 0 2
17389: PPUSH
17390: CALL_OW 250
17394: ST_TO_ADDR
// y := GetY ( building ) ;
17395: LD_ADDR_VAR 0 6
17399: PUSH
17400: LD_VAR 0 2
17404: PPUSH
17405: CALL_OW 251
17409: ST_TO_ADDR
// for i := 0 to 5 do
17410: LD_ADDR_VAR 0 4
17414: PUSH
17415: DOUBLE
17416: LD_INT 0
17418: DEC
17419: ST_TO_ADDR
17420: LD_INT 5
17422: PUSH
17423: FOR_TO
17424: IFFALSE 17536
// begin _x := ShiftX ( x , i , 3 ) ;
17426: LD_ADDR_VAR 0 7
17430: PUSH
17431: LD_VAR 0 5
17435: PPUSH
17436: LD_VAR 0 4
17440: PPUSH
17441: LD_INT 3
17443: PPUSH
17444: CALL_OW 272
17448: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17449: LD_ADDR_VAR 0 8
17453: PUSH
17454: LD_VAR 0 6
17458: PPUSH
17459: LD_VAR 0 4
17463: PPUSH
17464: LD_INT 3
17466: PPUSH
17467: CALL_OW 273
17471: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17472: LD_VAR 0 7
17476: PPUSH
17477: LD_VAR 0 8
17481: PPUSH
17482: CALL_OW 488
17486: NOT
17487: IFFALSE 17491
// continue ;
17489: GO 17423
// if HexInfo ( _x , _y ) = 0 then
17491: LD_VAR 0 7
17495: PPUSH
17496: LD_VAR 0 8
17500: PPUSH
17501: CALL_OW 428
17505: PUSH
17506: LD_INT 0
17508: EQUAL
17509: IFFALSE 17534
// begin ComMoveXY ( unit , _x , _y ) ;
17511: LD_VAR 0 1
17515: PPUSH
17516: LD_VAR 0 7
17520: PPUSH
17521: LD_VAR 0 8
17525: PPUSH
17526: CALL_OW 111
// exit ;
17530: POP
17531: POP
17532: GO 17538
// end ; end ;
17534: GO 17423
17536: POP
17537: POP
// end ;
17538: LD_VAR 0 3
17542: RET
// export function ScanBase ( side , base_area ) ; begin
17543: LD_INT 0
17545: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17546: LD_ADDR_VAR 0 3
17550: PUSH
17551: LD_VAR 0 2
17555: PPUSH
17556: LD_INT 81
17558: PUSH
17559: LD_VAR 0 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 70
17572: ST_TO_ADDR
// end ;
17573: LD_VAR 0 3
17577: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17578: LD_INT 0
17580: PPUSH
17581: PPUSH
17582: PPUSH
17583: PPUSH
// result := false ;
17584: LD_ADDR_VAR 0 2
17588: PUSH
17589: LD_INT 0
17591: ST_TO_ADDR
// side := GetSide ( unit ) ;
17592: LD_ADDR_VAR 0 3
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: CALL_OW 255
17606: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17607: LD_ADDR_VAR 0 4
17611: PUSH
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 248
17621: ST_TO_ADDR
// case nat of 1 :
17622: LD_VAR 0 4
17626: PUSH
17627: LD_INT 1
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17646
17635: POP
// tech := tech_lassight ; 2 :
17636: LD_ADDR_VAR 0 5
17640: PUSH
17641: LD_INT 12
17643: ST_TO_ADDR
17644: GO 17685
17646: LD_INT 2
17648: DOUBLE
17649: EQUAL
17650: IFTRUE 17654
17652: GO 17665
17654: POP
// tech := tech_mortar ; 3 :
17655: LD_ADDR_VAR 0 5
17659: PUSH
17660: LD_INT 41
17662: ST_TO_ADDR
17663: GO 17685
17665: LD_INT 3
17667: DOUBLE
17668: EQUAL
17669: IFTRUE 17673
17671: GO 17684
17673: POP
// tech := tech_bazooka ; end ;
17674: LD_ADDR_VAR 0 5
17678: PUSH
17679: LD_INT 44
17681: ST_TO_ADDR
17682: GO 17685
17684: POP
// if Researched ( side , tech ) then
17685: LD_VAR 0 3
17689: PPUSH
17690: LD_VAR 0 5
17694: PPUSH
17695: CALL_OW 325
17699: IFFALSE 17726
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_INT 5
17708: PUSH
17709: LD_INT 8
17711: PUSH
17712: LD_INT 9
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: LD_VAR 0 4
17724: ARRAY
17725: ST_TO_ADDR
// end ;
17726: LD_VAR 0 2
17730: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17731: LD_INT 0
17733: PPUSH
17734: PPUSH
17735: PPUSH
// if not mines then
17736: LD_VAR 0 2
17740: NOT
17741: IFFALSE 17745
// exit ;
17743: GO 17889
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17745: LD_ADDR_VAR 0 5
17749: PUSH
17750: LD_INT 81
17752: PUSH
17753: LD_VAR 0 1
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 3
17764: PUSH
17765: LD_INT 21
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PPUSH
17783: CALL_OW 69
17787: ST_TO_ADDR
// for i in mines do
17788: LD_ADDR_VAR 0 4
17792: PUSH
17793: LD_VAR 0 2
17797: PUSH
17798: FOR_IN
17799: IFFALSE 17887
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17801: LD_VAR 0 4
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: LD_VAR 0 4
17814: PUSH
17815: LD_INT 2
17817: ARRAY
17818: PPUSH
17819: CALL_OW 458
17823: NOT
17824: IFFALSE 17828
// continue ;
17826: GO 17798
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17828: LD_VAR 0 4
17832: PUSH
17833: LD_INT 1
17835: ARRAY
17836: PPUSH
17837: LD_VAR 0 4
17841: PUSH
17842: LD_INT 2
17844: ARRAY
17845: PPUSH
17846: CALL_OW 428
17850: PUSH
17851: LD_VAR 0 5
17855: IN
17856: IFFALSE 17885
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17858: LD_VAR 0 4
17862: PUSH
17863: LD_INT 1
17865: ARRAY
17866: PPUSH
17867: LD_VAR 0 4
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_VAR 0 1
17880: PPUSH
17881: CALL_OW 456
// end ;
17885: GO 17798
17887: POP
17888: POP
// end ;
17889: LD_VAR 0 3
17893: RET
// export function Count ( array ) ; begin
17894: LD_INT 0
17896: PPUSH
// result := array + 0 ;
17897: LD_ADDR_VAR 0 2
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 0
17909: PLUS
17910: ST_TO_ADDR
// end ;
17911: LD_VAR 0 2
17915: RET
// export function IsEmpty ( building ) ; begin
17916: LD_INT 0
17918: PPUSH
// if not building then
17919: LD_VAR 0 1
17923: NOT
17924: IFFALSE 17928
// exit ;
17926: GO 17971
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17928: LD_ADDR_VAR 0 2
17932: PUSH
17933: LD_VAR 0 1
17937: PUSH
17938: LD_INT 22
17940: PUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 255
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 58
17957: PUSH
17958: EMPTY
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PPUSH
17965: CALL_OW 69
17969: IN
17970: ST_TO_ADDR
// end ;
17971: LD_VAR 0 2
17975: RET
// export function IsNotFull ( building ) ; var places ; begin
17976: LD_INT 0
17978: PPUSH
17979: PPUSH
// if not building then
17980: LD_VAR 0 1
17984: NOT
17985: IFFALSE 17989
// exit ;
17987: GO 18017
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17989: LD_ADDR_VAR 0 2
17993: PUSH
17994: LD_VAR 0 1
17998: PPUSH
17999: LD_INT 3
18001: PUSH
18002: LD_INT 62
18004: PUSH
18005: EMPTY
18006: LIST
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PPUSH
18012: CALL_OW 72
18016: ST_TO_ADDR
// end ;
18017: LD_VAR 0 2
18021: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18022: LD_INT 0
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
// tmp := [ ] ;
18028: LD_ADDR_VAR 0 3
18032: PUSH
18033: EMPTY
18034: ST_TO_ADDR
// list := [ ] ;
18035: LD_ADDR_VAR 0 5
18039: PUSH
18040: EMPTY
18041: ST_TO_ADDR
// for i = 16 to 25 do
18042: LD_ADDR_VAR 0 4
18046: PUSH
18047: DOUBLE
18048: LD_INT 16
18050: DEC
18051: ST_TO_ADDR
18052: LD_INT 25
18054: PUSH
18055: FOR_TO
18056: IFFALSE 18129
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18058: LD_ADDR_VAR 0 3
18062: PUSH
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 22
18070: PUSH
18071: LD_VAR 0 1
18075: PPUSH
18076: CALL_OW 255
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 91
18087: PUSH
18088: LD_VAR 0 1
18092: PUSH
18093: LD_INT 6
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 30
18103: PUSH
18104: LD_VAR 0 4
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: PPUSH
18121: CALL_OW 69
18125: ADD
18126: ST_TO_ADDR
18127: GO 18055
18129: POP
18130: POP
// for i = 1 to tmp do
18131: LD_ADDR_VAR 0 4
18135: PUSH
18136: DOUBLE
18137: LD_INT 1
18139: DEC
18140: ST_TO_ADDR
18141: LD_VAR 0 3
18145: PUSH
18146: FOR_TO
18147: IFFALSE 18235
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18149: LD_ADDR_VAR 0 5
18153: PUSH
18154: LD_VAR 0 5
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_VAR 0 4
18168: ARRAY
18169: PPUSH
18170: CALL_OW 266
18174: PUSH
18175: LD_VAR 0 3
18179: PUSH
18180: LD_VAR 0 4
18184: ARRAY
18185: PPUSH
18186: CALL_OW 250
18190: PUSH
18191: LD_VAR 0 3
18195: PUSH
18196: LD_VAR 0 4
18200: ARRAY
18201: PPUSH
18202: CALL_OW 251
18206: PUSH
18207: LD_VAR 0 3
18211: PUSH
18212: LD_VAR 0 4
18216: ARRAY
18217: PPUSH
18218: CALL_OW 254
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: ADD
18232: ST_TO_ADDR
18233: GO 18146
18235: POP
18236: POP
// result := list ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_VAR 0 5
18246: ST_TO_ADDR
// end ;
18247: LD_VAR 0 2
18251: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18252: LD_INT 0
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
18260: PPUSH
// if not factory then
18261: LD_VAR 0 1
18265: NOT
18266: IFFALSE 18270
// exit ;
18268: GO 18873
// if control = control_apeman then
18270: LD_VAR 0 4
18274: PUSH
18275: LD_INT 5
18277: EQUAL
18278: IFFALSE 18387
// begin tmp := UnitsInside ( factory ) ;
18280: LD_ADDR_VAR 0 8
18284: PUSH
18285: LD_VAR 0 1
18289: PPUSH
18290: CALL_OW 313
18294: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18295: LD_VAR 0 8
18299: PPUSH
18300: LD_INT 25
18302: PUSH
18303: LD_INT 12
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 72
18314: NOT
18315: IFFALSE 18325
// control := control_manual ;
18317: LD_ADDR_VAR 0 4
18321: PUSH
18322: LD_INT 1
18324: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18325: LD_ADDR_VAR 0 8
18329: PUSH
18330: LD_VAR 0 1
18334: PPUSH
18335: CALL 18022 0 1
18339: ST_TO_ADDR
// if tmp then
18340: LD_VAR 0 8
18344: IFFALSE 18387
// begin for i in tmp do
18346: LD_ADDR_VAR 0 7
18350: PUSH
18351: LD_VAR 0 8
18355: PUSH
18356: FOR_IN
18357: IFFALSE 18385
// if i [ 1 ] = b_ext_radio then
18359: LD_VAR 0 7
18363: PUSH
18364: LD_INT 1
18366: ARRAY
18367: PUSH
18368: LD_INT 22
18370: EQUAL
18371: IFFALSE 18383
// begin control := control_remote ;
18373: LD_ADDR_VAR 0 4
18377: PUSH
18378: LD_INT 2
18380: ST_TO_ADDR
// break ;
18381: GO 18385
// end ;
18383: GO 18356
18385: POP
18386: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18387: LD_VAR 0 1
18391: PPUSH
18392: LD_VAR 0 2
18396: PPUSH
18397: LD_VAR 0 3
18401: PPUSH
18402: LD_VAR 0 4
18406: PPUSH
18407: LD_VAR 0 5
18411: PPUSH
18412: CALL_OW 448
18416: IFFALSE 18451
// begin result := [ chassis , engine , control , weapon ] ;
18418: LD_ADDR_VAR 0 6
18422: PUSH
18423: LD_VAR 0 2
18427: PUSH
18428: LD_VAR 0 3
18432: PUSH
18433: LD_VAR 0 4
18437: PUSH
18438: LD_VAR 0 5
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: ST_TO_ADDR
// exit ;
18449: GO 18873
// end ; _chassis := AvailableChassisList ( factory ) ;
18451: LD_ADDR_VAR 0 9
18455: PUSH
18456: LD_VAR 0 1
18460: PPUSH
18461: CALL_OW 475
18465: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18466: LD_ADDR_VAR 0 11
18470: PUSH
18471: LD_VAR 0 1
18475: PPUSH
18476: CALL_OW 476
18480: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18481: LD_ADDR_VAR 0 12
18485: PUSH
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 477
18495: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18496: LD_ADDR_VAR 0 10
18500: PUSH
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 478
18510: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18511: LD_VAR 0 9
18515: NOT
18516: IFTRUE 18525
18518: PUSH
18519: LD_VAR 0 11
18523: NOT
18524: OR
18525: IFTRUE 18534
18527: PUSH
18528: LD_VAR 0 12
18532: NOT
18533: OR
18534: IFTRUE 18543
18536: PUSH
18537: LD_VAR 0 10
18541: NOT
18542: OR
18543: IFFALSE 18578
// begin result := [ chassis , engine , control , weapon ] ;
18545: LD_ADDR_VAR 0 6
18549: PUSH
18550: LD_VAR 0 2
18554: PUSH
18555: LD_VAR 0 3
18559: PUSH
18560: LD_VAR 0 4
18564: PUSH
18565: LD_VAR 0 5
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: ST_TO_ADDR
// exit ;
18576: GO 18873
// end ; if not chassis in _chassis then
18578: LD_VAR 0 2
18582: PUSH
18583: LD_VAR 0 9
18587: IN
18588: NOT
18589: IFFALSE 18615
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18591: LD_ADDR_VAR 0 2
18595: PUSH
18596: LD_VAR 0 9
18600: PUSH
18601: LD_INT 1
18603: PPUSH
18604: LD_VAR 0 9
18608: PPUSH
18609: CALL_OW 12
18613: ARRAY
18614: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18615: LD_VAR 0 2
18619: PPUSH
18620: LD_VAR 0 3
18624: PPUSH
18625: CALL 18878 0 2
18629: NOT
18630: IFFALSE 18691
// repeat engine := _engine [ 1 ] ;
18632: LD_ADDR_VAR 0 3
18636: PUSH
18637: LD_VAR 0 11
18641: PUSH
18642: LD_INT 1
18644: ARRAY
18645: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18646: LD_ADDR_VAR 0 11
18650: PUSH
18651: LD_VAR 0 11
18655: PPUSH
18656: LD_INT 1
18658: PPUSH
18659: CALL_OW 3
18663: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18664: LD_VAR 0 2
18668: PPUSH
18669: LD_VAR 0 3
18673: PPUSH
18674: CALL 18878 0 2
18678: IFTRUE 18689
18680: PUSH
18681: LD_VAR 0 11
18685: PUSH
18686: EMPTY
18687: EQUAL
18688: OR
18689: IFFALSE 18632
// if not control in _control then
18691: LD_VAR 0 4
18695: PUSH
18696: LD_VAR 0 12
18700: IN
18701: NOT
18702: IFFALSE 18728
// control := _control [ rand ( 1 , _control ) ] ;
18704: LD_ADDR_VAR 0 4
18708: PUSH
18709: LD_VAR 0 12
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_VAR 0 12
18721: PPUSH
18722: CALL_OW 12
18726: ARRAY
18727: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18728: LD_VAR 0 2
18732: PPUSH
18733: LD_VAR 0 5
18737: PPUSH
18738: CALL 19100 0 2
18742: NOT
18743: IFFALSE 18804
// repeat weapon := _weapon [ 1 ] ;
18745: LD_ADDR_VAR 0 5
18749: PUSH
18750: LD_VAR 0 10
18754: PUSH
18755: LD_INT 1
18757: ARRAY
18758: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18759: LD_ADDR_VAR 0 10
18763: PUSH
18764: LD_VAR 0 10
18768: PPUSH
18769: LD_INT 1
18771: PPUSH
18772: CALL_OW 3
18776: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18777: LD_VAR 0 2
18781: PPUSH
18782: LD_VAR 0 5
18786: PPUSH
18787: CALL 19100 0 2
18791: IFTRUE 18802
18793: PUSH
18794: LD_VAR 0 10
18798: PUSH
18799: EMPTY
18800: EQUAL
18801: OR
18802: IFFALSE 18745
// result := [ ] ;
18804: LD_ADDR_VAR 0 6
18808: PUSH
18809: EMPTY
18810: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18811: LD_VAR 0 1
18815: PPUSH
18816: LD_VAR 0 2
18820: PPUSH
18821: LD_VAR 0 3
18825: PPUSH
18826: LD_VAR 0 4
18830: PPUSH
18831: LD_VAR 0 5
18835: PPUSH
18836: CALL_OW 448
18840: IFFALSE 18873
// result := [ chassis , engine , control , weapon ] ;
18842: LD_ADDR_VAR 0 6
18846: PUSH
18847: LD_VAR 0 2
18851: PUSH
18852: LD_VAR 0 3
18856: PUSH
18857: LD_VAR 0 4
18861: PUSH
18862: LD_VAR 0 5
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: ST_TO_ADDR
// end ;
18873: LD_VAR 0 6
18877: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18878: LD_INT 0
18880: PPUSH
// if not chassis or not engine then
18881: LD_VAR 0 1
18885: NOT
18886: IFTRUE 18895
18888: PUSH
18889: LD_VAR 0 2
18893: NOT
18894: OR
18895: IFFALSE 18899
// exit ;
18897: GO 19095
// case engine of engine_solar :
18899: LD_VAR 0 2
18903: PUSH
18904: LD_INT 2
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 18950
18912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18913: LD_ADDR_VAR 0 3
18917: PUSH
18918: LD_INT 11
18920: PUSH
18921: LD_INT 12
18923: PUSH
18924: LD_INT 13
18926: PUSH
18927: LD_INT 14
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 3
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: ST_TO_ADDR
18948: GO 19079
18950: LD_INT 1
18952: DOUBLE
18953: EQUAL
18954: IFTRUE 18958
18956: GO 19020
18958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_INT 11
18966: PUSH
18967: LD_INT 12
18969: PUSH
18970: LD_INT 13
18972: PUSH
18973: LD_INT 14
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: LD_INT 4
18987: PUSH
18988: LD_INT 5
18990: PUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 23
18996: PUSH
18997: LD_INT 22
18999: PUSH
19000: LD_INT 24
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: ST_TO_ADDR
19018: GO 19079
19020: LD_INT 3
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19078
19028: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19029: LD_ADDR_VAR 0 3
19033: PUSH
19034: LD_INT 13
19036: PUSH
19037: LD_INT 14
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: LD_INT 4
19048: PUSH
19049: LD_INT 5
19051: PUSH
19052: LD_INT 21
19054: PUSH
19055: LD_INT 22
19057: PUSH
19058: LD_INT 23
19060: PUSH
19061: LD_INT 24
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: ST_TO_ADDR
19076: GO 19079
19078: POP
// result := ( chassis in result ) ;
19079: LD_ADDR_VAR 0 3
19083: PUSH
19084: LD_VAR 0 1
19088: PUSH
19089: LD_VAR 0 3
19093: IN
19094: ST_TO_ADDR
// end ;
19095: LD_VAR 0 3
19099: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19100: LD_INT 0
19102: PPUSH
// if not chassis or not weapon then
19103: LD_VAR 0 1
19107: NOT
19108: IFTRUE 19117
19110: PUSH
19111: LD_VAR 0 2
19115: NOT
19116: OR
19117: IFFALSE 19121
// exit ;
19119: GO 20181
// case weapon of us_machine_gun :
19121: LD_VAR 0 2
19125: PUSH
19126: LD_INT 2
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19164
19134: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 3
19148: PUSH
19149: LD_INT 4
19151: PUSH
19152: LD_INT 5
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: ST_TO_ADDR
19162: GO 20165
19164: LD_INT 3
19166: DOUBLE
19167: EQUAL
19168: IFTRUE 19172
19170: GO 19202
19172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19173: LD_ADDR_VAR 0 3
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: LD_INT 2
19183: PUSH
19184: LD_INT 3
19186: PUSH
19187: LD_INT 4
19189: PUSH
19190: LD_INT 5
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: ST_TO_ADDR
19200: GO 20165
19202: LD_INT 11
19204: DOUBLE
19205: EQUAL
19206: IFTRUE 19210
19208: GO 19240
19210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19211: LD_ADDR_VAR 0 3
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: LD_INT 2
19221: PUSH
19222: LD_INT 3
19224: PUSH
19225: LD_INT 4
19227: PUSH
19228: LD_INT 5
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: ST_TO_ADDR
19238: GO 20165
19240: LD_INT 4
19242: DOUBLE
19243: EQUAL
19244: IFTRUE 19248
19246: GO 19274
19248: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19249: LD_ADDR_VAR 0 3
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 3
19259: PUSH
19260: LD_INT 4
19262: PUSH
19263: LD_INT 5
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: ST_TO_ADDR
19272: GO 20165
19274: LD_INT 5
19276: DOUBLE
19277: EQUAL
19278: IFTRUE 19282
19280: GO 19308
19282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19283: LD_ADDR_VAR 0 3
19287: PUSH
19288: LD_INT 2
19290: PUSH
19291: LD_INT 3
19293: PUSH
19294: LD_INT 4
19296: PUSH
19297: LD_INT 5
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: ST_TO_ADDR
19306: GO 20165
19308: LD_INT 9
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19342
19316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19317: LD_ADDR_VAR 0 3
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 3
19327: PUSH
19328: LD_INT 4
19330: PUSH
19331: LD_INT 5
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: ST_TO_ADDR
19340: GO 20165
19342: LD_INT 7
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19376
19350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19351: LD_ADDR_VAR 0 3
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: LD_INT 4
19364: PUSH
19365: LD_INT 5
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: ST_TO_ADDR
19374: GO 20165
19376: LD_INT 12
19378: DOUBLE
19379: EQUAL
19380: IFTRUE 19384
19382: GO 19410
19384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19385: LD_ADDR_VAR 0 3
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: LD_INT 3
19395: PUSH
19396: LD_INT 4
19398: PUSH
19399: LD_INT 5
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: ST_TO_ADDR
19408: GO 20165
19410: LD_INT 13
19412: DOUBLE
19413: EQUAL
19414: IFTRUE 19418
19416: GO 19444
19418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19419: LD_ADDR_VAR 0 3
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: LD_INT 3
19429: PUSH
19430: LD_INT 4
19432: PUSH
19433: LD_INT 5
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: ST_TO_ADDR
19442: GO 20165
19444: LD_INT 14
19446: DOUBLE
19447: EQUAL
19448: IFTRUE 19452
19450: GO 19470
19452: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19453: LD_ADDR_VAR 0 3
19457: PUSH
19458: LD_INT 4
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: ST_TO_ADDR
19468: GO 20165
19470: LD_INT 6
19472: DOUBLE
19473: EQUAL
19474: IFTRUE 19478
19476: GO 19496
19478: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: LD_INT 4
19486: PUSH
19487: LD_INT 5
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: ST_TO_ADDR
19494: GO 20165
19496: LD_INT 10
19498: DOUBLE
19499: EQUAL
19500: IFTRUE 19504
19502: GO 19522
19504: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19505: LD_ADDR_VAR 0 3
19509: PUSH
19510: LD_INT 4
19512: PUSH
19513: LD_INT 5
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: ST_TO_ADDR
19520: GO 20165
19522: LD_INT 22
19524: DOUBLE
19525: EQUAL
19526: IFTRUE 19530
19528: GO 19556
19530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_INT 11
19538: PUSH
19539: LD_INT 12
19541: PUSH
19542: LD_INT 13
19544: PUSH
19545: LD_INT 14
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: ST_TO_ADDR
19554: GO 20165
19556: LD_INT 23
19558: DOUBLE
19559: EQUAL
19560: IFTRUE 19564
19562: GO 19590
19564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19565: LD_ADDR_VAR 0 3
19569: PUSH
19570: LD_INT 11
19572: PUSH
19573: LD_INT 12
19575: PUSH
19576: LD_INT 13
19578: PUSH
19579: LD_INT 14
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: ST_TO_ADDR
19588: GO 20165
19590: LD_INT 24
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19624
19598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19599: LD_ADDR_VAR 0 3
19603: PUSH
19604: LD_INT 11
19606: PUSH
19607: LD_INT 12
19609: PUSH
19610: LD_INT 13
19612: PUSH
19613: LD_INT 14
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: ST_TO_ADDR
19622: GO 20165
19624: LD_INT 30
19626: DOUBLE
19627: EQUAL
19628: IFTRUE 19632
19630: GO 19658
19632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19633: LD_ADDR_VAR 0 3
19637: PUSH
19638: LD_INT 11
19640: PUSH
19641: LD_INT 12
19643: PUSH
19644: LD_INT 13
19646: PUSH
19647: LD_INT 14
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
19656: GO 20165
19658: LD_INT 25
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19684
19666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: LD_INT 13
19674: PUSH
19675: LD_INT 14
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: ST_TO_ADDR
19682: GO 20165
19684: LD_INT 27
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19710
19692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19693: LD_ADDR_VAR 0 3
19697: PUSH
19698: LD_INT 13
19700: PUSH
19701: LD_INT 14
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: ST_TO_ADDR
19708: GO 20165
19710: LD_INT 92
19712: DOUBLE
19713: EQUAL
19714: IFTRUE 19718
19716: GO 19744
19718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19719: LD_ADDR_VAR 0 3
19723: PUSH
19724: LD_INT 11
19726: PUSH
19727: LD_INT 12
19729: PUSH
19730: LD_INT 13
19732: PUSH
19733: LD_INT 14
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: ST_TO_ADDR
19742: GO 20165
19744: LD_INT 28
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19770
19752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: LD_INT 13
19760: PUSH
19761: LD_INT 14
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: ST_TO_ADDR
19768: GO 20165
19770: LD_INT 29
19772: DOUBLE
19773: EQUAL
19774: IFTRUE 19778
19776: GO 19796
19778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19779: LD_ADDR_VAR 0 3
19783: PUSH
19784: LD_INT 13
19786: PUSH
19787: LD_INT 14
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: ST_TO_ADDR
19794: GO 20165
19796: LD_INT 31
19798: DOUBLE
19799: EQUAL
19800: IFTRUE 19804
19802: GO 19822
19804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19805: LD_ADDR_VAR 0 3
19809: PUSH
19810: LD_INT 13
19812: PUSH
19813: LD_INT 14
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: ST_TO_ADDR
19820: GO 20165
19822: LD_INT 26
19824: DOUBLE
19825: EQUAL
19826: IFTRUE 19830
19828: GO 19848
19830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19831: LD_ADDR_VAR 0 3
19835: PUSH
19836: LD_INT 13
19838: PUSH
19839: LD_INT 14
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: ST_TO_ADDR
19846: GO 20165
19848: LD_INT 42
19850: DOUBLE
19851: EQUAL
19852: IFTRUE 19856
19854: GO 19882
19856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_INT 21
19864: PUSH
19865: LD_INT 22
19867: PUSH
19868: LD_INT 23
19870: PUSH
19871: LD_INT 24
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: ST_TO_ADDR
19880: GO 20165
19882: LD_INT 43
19884: DOUBLE
19885: EQUAL
19886: IFTRUE 19890
19888: GO 19916
19890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19891: LD_ADDR_VAR 0 3
19895: PUSH
19896: LD_INT 21
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_INT 23
19904: PUSH
19905: LD_INT 24
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: ST_TO_ADDR
19914: GO 20165
19916: LD_INT 44
19918: DOUBLE
19919: EQUAL
19920: IFTRUE 19924
19922: GO 19950
19924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19925: LD_ADDR_VAR 0 3
19929: PUSH
19930: LD_INT 21
19932: PUSH
19933: LD_INT 22
19935: PUSH
19936: LD_INT 23
19938: PUSH
19939: LD_INT 24
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: ST_TO_ADDR
19948: GO 20165
19950: LD_INT 45
19952: DOUBLE
19953: EQUAL
19954: IFTRUE 19958
19956: GO 19984
19958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_INT 21
19966: PUSH
19967: LD_INT 22
19969: PUSH
19970: LD_INT 23
19972: PUSH
19973: LD_INT 24
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: ST_TO_ADDR
19982: GO 20165
19984: LD_INT 49
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 20018
19992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19993: LD_ADDR_VAR 0 3
19997: PUSH
19998: LD_INT 21
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 24
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: ST_TO_ADDR
20016: GO 20165
20018: LD_INT 51
20020: DOUBLE
20021: EQUAL
20022: IFTRUE 20026
20024: GO 20052
20026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20027: LD_ADDR_VAR 0 3
20031: PUSH
20032: LD_INT 21
20034: PUSH
20035: LD_INT 22
20037: PUSH
20038: LD_INT 23
20040: PUSH
20041: LD_INT 24
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: ST_TO_ADDR
20050: GO 20165
20052: LD_INT 52
20054: DOUBLE
20055: EQUAL
20056: IFTRUE 20060
20058: GO 20086
20060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20061: LD_ADDR_VAR 0 3
20065: PUSH
20066: LD_INT 21
20068: PUSH
20069: LD_INT 22
20071: PUSH
20072: LD_INT 23
20074: PUSH
20075: LD_INT 24
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: ST_TO_ADDR
20084: GO 20165
20086: LD_INT 53
20088: DOUBLE
20089: EQUAL
20090: IFTRUE 20094
20092: GO 20112
20094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20095: LD_ADDR_VAR 0 3
20099: PUSH
20100: LD_INT 23
20102: PUSH
20103: LD_INT 24
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: ST_TO_ADDR
20110: GO 20165
20112: LD_INT 46
20114: DOUBLE
20115: EQUAL
20116: IFTRUE 20120
20118: GO 20138
20120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20121: LD_ADDR_VAR 0 3
20125: PUSH
20126: LD_INT 23
20128: PUSH
20129: LD_INT 24
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: ST_TO_ADDR
20136: GO 20165
20138: LD_INT 47
20140: DOUBLE
20141: EQUAL
20142: IFTRUE 20146
20144: GO 20164
20146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20147: LD_ADDR_VAR 0 3
20151: PUSH
20152: LD_INT 23
20154: PUSH
20155: LD_INT 24
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: ST_TO_ADDR
20162: GO 20165
20164: POP
// result := ( chassis in result ) ;
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_VAR 0 1
20174: PUSH
20175: LD_VAR 0 3
20179: IN
20180: ST_TO_ADDR
// end ;
20181: LD_VAR 0 3
20185: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20186: LD_INT 0
20188: PPUSH
20189: PPUSH
20190: PPUSH
20191: PPUSH
20192: PPUSH
20193: PPUSH
20194: PPUSH
// result := array ;
20195: LD_ADDR_VAR 0 5
20199: PUSH
20200: LD_VAR 0 1
20204: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20205: LD_VAR 0 1
20209: NOT
20210: IFTRUE 20219
20212: PUSH
20213: LD_VAR 0 2
20217: NOT
20218: OR
20219: IFTRUE 20228
20221: PUSH
20222: LD_VAR 0 3
20226: NOT
20227: OR
20228: IFTRUE 20242
20230: PUSH
20231: LD_VAR 0 2
20235: PUSH
20236: LD_VAR 0 1
20240: GREATER
20241: OR
20242: IFTRUE 20256
20244: PUSH
20245: LD_VAR 0 3
20249: PUSH
20250: LD_VAR 0 1
20254: GREATER
20255: OR
20256: IFFALSE 20260
// exit ;
20258: GO 20556
// if direction then
20260: LD_VAR 0 4
20264: IFFALSE 20328
// begin d := 1 ;
20266: LD_ADDR_VAR 0 9
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if i_from > i_to then
20274: LD_VAR 0 2
20278: PUSH
20279: LD_VAR 0 3
20283: GREATER
20284: IFFALSE 20310
// length := ( array - i_from ) + i_to else
20286: LD_ADDR_VAR 0 11
20290: PUSH
20291: LD_VAR 0 1
20295: PUSH
20296: LD_VAR 0 2
20300: MINUS
20301: PUSH
20302: LD_VAR 0 3
20306: PLUS
20307: ST_TO_ADDR
20308: GO 20326
// length := i_to - i_from ;
20310: LD_ADDR_VAR 0 11
20314: PUSH
20315: LD_VAR 0 3
20319: PUSH
20320: LD_VAR 0 2
20324: MINUS
20325: ST_TO_ADDR
// end else
20326: GO 20389
// begin d := - 1 ;
20328: LD_ADDR_VAR 0 9
20332: PUSH
20333: LD_INT 1
20335: NEG
20336: ST_TO_ADDR
// if i_from > i_to then
20337: LD_VAR 0 2
20341: PUSH
20342: LD_VAR 0 3
20346: GREATER
20347: IFFALSE 20367
// length := i_from - i_to else
20349: LD_ADDR_VAR 0 11
20353: PUSH
20354: LD_VAR 0 2
20358: PUSH
20359: LD_VAR 0 3
20363: MINUS
20364: ST_TO_ADDR
20365: GO 20389
// length := ( array - i_to ) + i_from ;
20367: LD_ADDR_VAR 0 11
20371: PUSH
20372: LD_VAR 0 1
20376: PUSH
20377: LD_VAR 0 3
20381: MINUS
20382: PUSH
20383: LD_VAR 0 2
20387: PLUS
20388: ST_TO_ADDR
// end ; if not length then
20389: LD_VAR 0 11
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20556
// tmp := array ;
20398: LD_ADDR_VAR 0 10
20402: PUSH
20403: LD_VAR 0 1
20407: ST_TO_ADDR
// for i = 1 to length do
20408: LD_ADDR_VAR 0 6
20412: PUSH
20413: DOUBLE
20414: LD_INT 1
20416: DEC
20417: ST_TO_ADDR
20418: LD_VAR 0 11
20422: PUSH
20423: FOR_TO
20424: IFFALSE 20544
// begin for j = 1 to array do
20426: LD_ADDR_VAR 0 7
20430: PUSH
20431: DOUBLE
20432: LD_INT 1
20434: DEC
20435: ST_TO_ADDR
20436: LD_VAR 0 1
20440: PUSH
20441: FOR_TO
20442: IFFALSE 20530
// begin k := j + d ;
20444: LD_ADDR_VAR 0 8
20448: PUSH
20449: LD_VAR 0 7
20453: PUSH
20454: LD_VAR 0 9
20458: PLUS
20459: ST_TO_ADDR
// if k > array then
20460: LD_VAR 0 8
20464: PUSH
20465: LD_VAR 0 1
20469: GREATER
20470: IFFALSE 20480
// k := 1 ;
20472: LD_ADDR_VAR 0 8
20476: PUSH
20477: LD_INT 1
20479: ST_TO_ADDR
// if not k then
20480: LD_VAR 0 8
20484: NOT
20485: IFFALSE 20497
// k := array ;
20487: LD_ADDR_VAR 0 8
20491: PUSH
20492: LD_VAR 0 1
20496: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20497: LD_ADDR_VAR 0 10
20501: PUSH
20502: LD_VAR 0 10
20506: PPUSH
20507: LD_VAR 0 8
20511: PPUSH
20512: LD_VAR 0 1
20516: PUSH
20517: LD_VAR 0 7
20521: ARRAY
20522: PPUSH
20523: CALL_OW 1
20527: ST_TO_ADDR
// end ;
20528: GO 20441
20530: POP
20531: POP
// array := tmp ;
20532: LD_ADDR_VAR 0 1
20536: PUSH
20537: LD_VAR 0 10
20541: ST_TO_ADDR
// end ;
20542: GO 20423
20544: POP
20545: POP
// result := array ;
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: LD_VAR 0 1
20555: ST_TO_ADDR
// end ;
20556: LD_VAR 0 5
20560: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20561: LD_INT 0
20563: PPUSH
20564: PPUSH
// result := 0 ;
20565: LD_ADDR_VAR 0 3
20569: PUSH
20570: LD_INT 0
20572: ST_TO_ADDR
// if not array or not value in array then
20573: LD_VAR 0 1
20577: NOT
20578: IFTRUE 20593
20580: PUSH
20581: LD_VAR 0 2
20585: PUSH
20586: LD_VAR 0 1
20590: IN
20591: NOT
20592: OR
20593: IFFALSE 20597
// exit ;
20595: GO 20651
// for i = 1 to array do
20597: LD_ADDR_VAR 0 4
20601: PUSH
20602: DOUBLE
20603: LD_INT 1
20605: DEC
20606: ST_TO_ADDR
20607: LD_VAR 0 1
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20649
// if value = array [ i ] then
20615: LD_VAR 0 2
20619: PUSH
20620: LD_VAR 0 1
20624: PUSH
20625: LD_VAR 0 4
20629: ARRAY
20630: EQUAL
20631: IFFALSE 20647
// begin result := i ;
20633: LD_ADDR_VAR 0 3
20637: PUSH
20638: LD_VAR 0 4
20642: ST_TO_ADDR
// exit ;
20643: POP
20644: POP
20645: GO 20651
// end ;
20647: GO 20612
20649: POP
20650: POP
// end ;
20651: LD_VAR 0 3
20655: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20656: LD_INT 0
20658: PPUSH
// vc_chassis := chassis ;
20659: LD_ADDR_OWVAR 37
20663: PUSH
20664: LD_VAR 0 1
20668: ST_TO_ADDR
// vc_engine := engine ;
20669: LD_ADDR_OWVAR 39
20673: PUSH
20674: LD_VAR 0 2
20678: ST_TO_ADDR
// vc_control := control ;
20679: LD_ADDR_OWVAR 38
20683: PUSH
20684: LD_VAR 0 3
20688: ST_TO_ADDR
// vc_weapon := weapon ;
20689: LD_ADDR_OWVAR 40
20693: PUSH
20694: LD_VAR 0 4
20698: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20699: LD_ADDR_OWVAR 41
20703: PUSH
20704: LD_VAR 0 5
20708: ST_TO_ADDR
// end ;
20709: LD_VAR 0 6
20713: RET
// export function WantPlant ( unit ) ; var task ; begin
20714: LD_INT 0
20716: PPUSH
20717: PPUSH
// result := false ;
20718: LD_ADDR_VAR 0 2
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_VAR 0 1
20735: PPUSH
20736: CALL_OW 437
20740: ST_TO_ADDR
// if task then
20741: LD_VAR 0 3
20745: IFFALSE 20773
// if task [ 1 ] [ 1 ] = p then
20747: LD_VAR 0 3
20751: PUSH
20752: LD_INT 1
20754: ARRAY
20755: PUSH
20756: LD_INT 1
20758: ARRAY
20759: PUSH
20760: LD_STRING p
20762: EQUAL
20763: IFFALSE 20773
// result := true ;
20765: LD_ADDR_VAR 0 2
20769: PUSH
20770: LD_INT 1
20772: ST_TO_ADDR
// end ;
20773: LD_VAR 0 2
20777: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20778: LD_INT 0
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
// if pos < 1 then
20784: LD_VAR 0 2
20788: PUSH
20789: LD_INT 1
20791: LESS
20792: IFFALSE 20796
// exit ;
20794: GO 21099
// if pos = 1 then
20796: LD_VAR 0 2
20800: PUSH
20801: LD_INT 1
20803: EQUAL
20804: IFFALSE 20837
// result := Replace ( arr , pos [ 1 ] , value ) else
20806: LD_ADDR_VAR 0 4
20810: PUSH
20811: LD_VAR 0 1
20815: PPUSH
20816: LD_VAR 0 2
20820: PUSH
20821: LD_INT 1
20823: ARRAY
20824: PPUSH
20825: LD_VAR 0 3
20829: PPUSH
20830: CALL_OW 1
20834: ST_TO_ADDR
20835: GO 21099
// begin tmp := arr ;
20837: LD_ADDR_VAR 0 6
20841: PUSH
20842: LD_VAR 0 1
20846: ST_TO_ADDR
// s_arr := [ tmp ] ;
20847: LD_ADDR_VAR 0 7
20851: PUSH
20852: LD_VAR 0 6
20856: PUSH
20857: EMPTY
20858: LIST
20859: ST_TO_ADDR
// for i = 1 to pos - 1 do
20860: LD_ADDR_VAR 0 5
20864: PUSH
20865: DOUBLE
20866: LD_INT 1
20868: DEC
20869: ST_TO_ADDR
20870: LD_VAR 0 2
20874: PUSH
20875: LD_INT 1
20877: MINUS
20878: PUSH
20879: FOR_TO
20880: IFFALSE 20925
// begin tmp := tmp [ pos [ i ] ] ;
20882: LD_ADDR_VAR 0 6
20886: PUSH
20887: LD_VAR 0 6
20891: PUSH
20892: LD_VAR 0 2
20896: PUSH
20897: LD_VAR 0 5
20901: ARRAY
20902: ARRAY
20903: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20904: LD_ADDR_VAR 0 7
20908: PUSH
20909: LD_VAR 0 7
20913: PUSH
20914: LD_VAR 0 6
20918: PUSH
20919: EMPTY
20920: LIST
20921: ADD
20922: ST_TO_ADDR
// end ;
20923: GO 20879
20925: POP
20926: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20927: LD_ADDR_VAR 0 6
20931: PUSH
20932: LD_VAR 0 6
20936: PPUSH
20937: LD_VAR 0 2
20941: PUSH
20942: LD_VAR 0 2
20946: ARRAY
20947: PPUSH
20948: LD_VAR 0 3
20952: PPUSH
20953: CALL_OW 1
20957: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20958: LD_ADDR_VAR 0 7
20962: PUSH
20963: LD_VAR 0 7
20967: PPUSH
20968: LD_VAR 0 7
20972: PPUSH
20973: LD_VAR 0 6
20977: PPUSH
20978: CALL_OW 1
20982: ST_TO_ADDR
// for i = s_arr downto 2 do
20983: LD_ADDR_VAR 0 5
20987: PUSH
20988: DOUBLE
20989: LD_VAR 0 7
20993: INC
20994: ST_TO_ADDR
20995: LD_INT 2
20997: PUSH
20998: FOR_DOWNTO
20999: IFFALSE 21083
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21001: LD_ADDR_VAR 0 6
21005: PUSH
21006: LD_VAR 0 7
21010: PUSH
21011: LD_VAR 0 5
21015: PUSH
21016: LD_INT 1
21018: MINUS
21019: ARRAY
21020: PPUSH
21021: LD_VAR 0 2
21025: PUSH
21026: LD_VAR 0 5
21030: PUSH
21031: LD_INT 1
21033: MINUS
21034: ARRAY
21035: PPUSH
21036: LD_VAR 0 7
21040: PUSH
21041: LD_VAR 0 5
21045: ARRAY
21046: PPUSH
21047: CALL_OW 1
21051: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21052: LD_ADDR_VAR 0 7
21056: PUSH
21057: LD_VAR 0 7
21061: PPUSH
21062: LD_VAR 0 5
21066: PUSH
21067: LD_INT 1
21069: MINUS
21070: PPUSH
21071: LD_VAR 0 6
21075: PPUSH
21076: CALL_OW 1
21080: ST_TO_ADDR
// end ;
21081: GO 20998
21083: POP
21084: POP
// result := s_arr [ 1 ] ;
21085: LD_ADDR_VAR 0 4
21089: PUSH
21090: LD_VAR 0 7
21094: PUSH
21095: LD_INT 1
21097: ARRAY
21098: ST_TO_ADDR
// end ; end ;
21099: LD_VAR 0 4
21103: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21104: LD_INT 0
21106: PPUSH
21107: PPUSH
// if not list then
21108: LD_VAR 0 1
21112: NOT
21113: IFFALSE 21117
// exit ;
21115: GO 21208
// i := list [ pos1 ] ;
21117: LD_ADDR_VAR 0 5
21121: PUSH
21122: LD_VAR 0 1
21126: PUSH
21127: LD_VAR 0 2
21131: ARRAY
21132: ST_TO_ADDR
// if not i then
21133: LD_VAR 0 5
21137: NOT
21138: IFFALSE 21142
// exit ;
21140: GO 21208
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21142: LD_ADDR_VAR 0 1
21146: PUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: LD_VAR 0 2
21156: PPUSH
21157: LD_VAR 0 1
21161: PUSH
21162: LD_VAR 0 3
21166: ARRAY
21167: PPUSH
21168: CALL_OW 1
21172: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21173: LD_ADDR_VAR 0 1
21177: PUSH
21178: LD_VAR 0 1
21182: PPUSH
21183: LD_VAR 0 3
21187: PPUSH
21188: LD_VAR 0 5
21192: PPUSH
21193: CALL_OW 1
21197: ST_TO_ADDR
// result := list ;
21198: LD_ADDR_VAR 0 4
21202: PUSH
21203: LD_VAR 0 1
21207: ST_TO_ADDR
// end ;
21208: LD_VAR 0 4
21212: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21213: LD_INT 0
21215: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21216: LD_ADDR_VAR 0 5
21220: PUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 250
21230: PPUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 251
21240: PPUSH
21241: LD_VAR 0 2
21245: PPUSH
21246: LD_VAR 0 3
21250: PPUSH
21251: LD_VAR 0 4
21255: PPUSH
21256: CALL 21638 0 5
21260: ST_TO_ADDR
// end ;
21261: LD_VAR 0 5
21265: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
21271: PPUSH
// if not list or not unit then
21272: LD_VAR 0 2
21276: NOT
21277: IFTRUE 21286
21279: PUSH
21280: LD_VAR 0 1
21284: NOT
21285: OR
21286: IFFALSE 21290
// exit ;
21288: GO 21633
// result := [ ] ;
21290: LD_ADDR_VAR 0 5
21294: PUSH
21295: EMPTY
21296: ST_TO_ADDR
// for i in list do
21297: LD_ADDR_VAR 0 6
21301: PUSH
21302: LD_VAR 0 2
21306: PUSH
21307: FOR_IN
21308: IFFALSE 21526
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21310: LD_ADDR_VAR 0 8
21314: PUSH
21315: LD_VAR 0 1
21319: PPUSH
21320: LD_VAR 0 6
21324: PUSH
21325: LD_INT 1
21327: ARRAY
21328: PPUSH
21329: LD_VAR 0 6
21333: PUSH
21334: LD_INT 2
21336: ARRAY
21337: PPUSH
21338: CALL_OW 297
21342: ST_TO_ADDR
// if not Count ( result ) then
21343: LD_VAR 0 5
21347: PPUSH
21348: CALL 17894 0 1
21352: NOT
21353: IFFALSE 21386
// begin result := Join ( result , [ i , tmp ] ) ;
21355: LD_ADDR_VAR 0 5
21359: PUSH
21360: LD_VAR 0 5
21364: PPUSH
21365: LD_VAR 0 6
21369: PUSH
21370: LD_VAR 0 8
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PPUSH
21379: CALL 53826 0 2
21383: ST_TO_ADDR
// continue ;
21384: GO 21307
// end ; if result [ result ] [ 2 ] <= tmp then
21386: LD_VAR 0 5
21390: PUSH
21391: LD_VAR 0 5
21395: ARRAY
21396: PUSH
21397: LD_INT 2
21399: ARRAY
21400: PUSH
21401: LD_VAR 0 8
21405: LESSEQUAL
21406: IFFALSE 21439
// result := Join ( result , [ i , tmp ] ) else
21408: LD_ADDR_VAR 0 5
21412: PUSH
21413: LD_VAR 0 5
21417: PPUSH
21418: LD_VAR 0 6
21422: PUSH
21423: LD_VAR 0 8
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PPUSH
21432: CALL 53826 0 2
21436: ST_TO_ADDR
21437: GO 21524
// begin for j := 1 to Count ( result ) do
21439: LD_ADDR_VAR 0 7
21443: PUSH
21444: DOUBLE
21445: LD_INT 1
21447: DEC
21448: ST_TO_ADDR
21449: LD_VAR 0 5
21453: PPUSH
21454: CALL 17894 0 1
21458: PUSH
21459: FOR_TO
21460: IFFALSE 21522
// begin if tmp < result [ j ] [ 2 ] then
21462: LD_VAR 0 8
21466: PUSH
21467: LD_VAR 0 5
21471: PUSH
21472: LD_VAR 0 7
21476: ARRAY
21477: PUSH
21478: LD_INT 2
21480: ARRAY
21481: LESS
21482: IFFALSE 21520
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21484: LD_ADDR_VAR 0 5
21488: PUSH
21489: LD_VAR 0 5
21493: PPUSH
21494: LD_VAR 0 7
21498: PPUSH
21499: LD_VAR 0 6
21503: PUSH
21504: LD_VAR 0 8
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PPUSH
21513: CALL_OW 2
21517: ST_TO_ADDR
// break ;
21518: GO 21522
// end ; end ;
21520: GO 21459
21522: POP
21523: POP
// end ; end ;
21524: GO 21307
21526: POP
21527: POP
// if result and not asc then
21528: LD_VAR 0 5
21532: IFFALSE 21541
21534: PUSH
21535: LD_VAR 0 3
21539: NOT
21540: AND
21541: IFFALSE 21558
// result := ReverseArray ( result ) ;
21543: LD_ADDR_VAR 0 5
21547: PUSH
21548: LD_VAR 0 5
21552: PPUSH
21553: CALL 48916 0 1
21557: ST_TO_ADDR
// tmp := [ ] ;
21558: LD_ADDR_VAR 0 8
21562: PUSH
21563: EMPTY
21564: ST_TO_ADDR
// if mode then
21565: LD_VAR 0 4
21569: IFFALSE 21633
// begin for i := 1 to result do
21571: LD_ADDR_VAR 0 6
21575: PUSH
21576: DOUBLE
21577: LD_INT 1
21579: DEC
21580: ST_TO_ADDR
21581: LD_VAR 0 5
21585: PUSH
21586: FOR_TO
21587: IFFALSE 21621
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21589: LD_ADDR_VAR 0 8
21593: PUSH
21594: LD_VAR 0 8
21598: PPUSH
21599: LD_VAR 0 5
21603: PUSH
21604: LD_VAR 0 6
21608: ARRAY
21609: PUSH
21610: LD_INT 1
21612: ARRAY
21613: PPUSH
21614: CALL 53826 0 2
21618: ST_TO_ADDR
21619: GO 21586
21621: POP
21622: POP
// result := tmp ;
21623: LD_ADDR_VAR 0 5
21627: PUSH
21628: LD_VAR 0 8
21632: ST_TO_ADDR
// end ; end ;
21633: LD_VAR 0 5
21637: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21638: LD_INT 0
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
// if not list then
21644: LD_VAR 0 3
21648: NOT
21649: IFFALSE 21653
// exit ;
21651: GO 22043
// result := [ ] ;
21653: LD_ADDR_VAR 0 6
21657: PUSH
21658: EMPTY
21659: ST_TO_ADDR
// for i in list do
21660: LD_ADDR_VAR 0 7
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: FOR_IN
21671: IFFALSE 21873
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21673: LD_ADDR_VAR 0 9
21677: PUSH
21678: LD_VAR 0 7
21682: PPUSH
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: CALL_OW 297
21697: ST_TO_ADDR
// if not result then
21698: LD_VAR 0 6
21702: NOT
21703: IFFALSE 21729
// result := [ [ i , tmp ] ] else
21705: LD_ADDR_VAR 0 6
21709: PUSH
21710: LD_VAR 0 7
21714: PUSH
21715: LD_VAR 0 9
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: ST_TO_ADDR
21727: GO 21871
// begin if result [ result ] [ 2 ] <= tmp then
21729: LD_VAR 0 6
21733: PUSH
21734: LD_VAR 0 6
21738: ARRAY
21739: PUSH
21740: LD_INT 2
21742: ARRAY
21743: PUSH
21744: LD_VAR 0 9
21748: LESSEQUAL
21749: IFFALSE 21791
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21751: LD_ADDR_VAR 0 6
21755: PUSH
21756: LD_VAR 0 6
21760: PPUSH
21761: LD_VAR 0 6
21765: PUSH
21766: LD_INT 1
21768: PLUS
21769: PPUSH
21770: LD_VAR 0 7
21774: PUSH
21775: LD_VAR 0 9
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 2
21788: ST_TO_ADDR
21789: GO 21871
// for j := 1 to result do
21791: LD_ADDR_VAR 0 8
21795: PUSH
21796: DOUBLE
21797: LD_INT 1
21799: DEC
21800: ST_TO_ADDR
21801: LD_VAR 0 6
21805: PUSH
21806: FOR_TO
21807: IFFALSE 21869
// begin if tmp < result [ j ] [ 2 ] then
21809: LD_VAR 0 9
21813: PUSH
21814: LD_VAR 0 6
21818: PUSH
21819: LD_VAR 0 8
21823: ARRAY
21824: PUSH
21825: LD_INT 2
21827: ARRAY
21828: LESS
21829: IFFALSE 21867
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21831: LD_ADDR_VAR 0 6
21835: PUSH
21836: LD_VAR 0 6
21840: PPUSH
21841: LD_VAR 0 8
21845: PPUSH
21846: LD_VAR 0 7
21850: PUSH
21851: LD_VAR 0 9
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PPUSH
21860: CALL_OW 2
21864: ST_TO_ADDR
// break ;
21865: GO 21869
// end ; end ;
21867: GO 21806
21869: POP
21870: POP
// end ; end ;
21871: GO 21670
21873: POP
21874: POP
// if result and not asc then
21875: LD_VAR 0 6
21879: IFFALSE 21888
21881: PUSH
21882: LD_VAR 0 4
21886: NOT
21887: AND
21888: IFFALSE 21963
// begin tmp := result ;
21890: LD_ADDR_VAR 0 9
21894: PUSH
21895: LD_VAR 0 6
21899: ST_TO_ADDR
// for i = tmp downto 1 do
21900: LD_ADDR_VAR 0 7
21904: PUSH
21905: DOUBLE
21906: LD_VAR 0 9
21910: INC
21911: ST_TO_ADDR
21912: LD_INT 1
21914: PUSH
21915: FOR_DOWNTO
21916: IFFALSE 21961
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21918: LD_ADDR_VAR 0 6
21922: PUSH
21923: LD_VAR 0 6
21927: PPUSH
21928: LD_VAR 0 9
21932: PUSH
21933: LD_VAR 0 7
21937: MINUS
21938: PUSH
21939: LD_INT 1
21941: PLUS
21942: PPUSH
21943: LD_VAR 0 9
21947: PUSH
21948: LD_VAR 0 7
21952: ARRAY
21953: PPUSH
21954: CALL_OW 1
21958: ST_TO_ADDR
21959: GO 21915
21961: POP
21962: POP
// end ; tmp := [ ] ;
21963: LD_ADDR_VAR 0 9
21967: PUSH
21968: EMPTY
21969: ST_TO_ADDR
// if mode then
21970: LD_VAR 0 5
21974: IFFALSE 22043
// begin for i = 1 to result do
21976: LD_ADDR_VAR 0 7
21980: PUSH
21981: DOUBLE
21982: LD_INT 1
21984: DEC
21985: ST_TO_ADDR
21986: LD_VAR 0 6
21990: PUSH
21991: FOR_TO
21992: IFFALSE 22031
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21994: LD_ADDR_VAR 0 9
21998: PUSH
21999: LD_VAR 0 9
22003: PPUSH
22004: LD_VAR 0 7
22008: PPUSH
22009: LD_VAR 0 6
22013: PUSH
22014: LD_VAR 0 7
22018: ARRAY
22019: PUSH
22020: LD_INT 1
22022: ARRAY
22023: PPUSH
22024: CALL_OW 1
22028: ST_TO_ADDR
22029: GO 21991
22031: POP
22032: POP
// result := tmp ;
22033: LD_ADDR_VAR 0 6
22037: PUSH
22038: LD_VAR 0 9
22042: ST_TO_ADDR
// end ; end ;
22043: LD_VAR 0 6
22047: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22048: LD_INT 0
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
22054: PPUSH
22055: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22056: LD_ADDR_VAR 0 5
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: EMPTY
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: ST_TO_ADDR
// if not x or not y then
22078: LD_VAR 0 2
22082: NOT
22083: IFTRUE 22092
22085: PUSH
22086: LD_VAR 0 3
22090: NOT
22091: OR
22092: IFFALSE 22096
// exit ;
22094: GO 23752
// if not range then
22096: LD_VAR 0 4
22100: NOT
22101: IFFALSE 22111
// range := 10 ;
22103: LD_ADDR_VAR 0 4
22107: PUSH
22108: LD_INT 10
22110: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22111: LD_ADDR_VAR 0 8
22115: PUSH
22116: LD_INT 81
22118: PUSH
22119: LD_VAR 0 1
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 92
22130: PUSH
22131: LD_VAR 0 2
22135: PUSH
22136: LD_VAR 0 3
22140: PUSH
22141: LD_VAR 0 4
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: LD_INT 21
22157: PUSH
22158: LD_INT 3
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 69
22178: ST_TO_ADDR
// if not tmp then
22179: LD_VAR 0 8
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 23752
// for i in tmp do
22188: LD_ADDR_VAR 0 6
22192: PUSH
22193: LD_VAR 0 8
22197: PUSH
22198: FOR_IN
22199: IFFALSE 23727
// begin points := [ 0 , 0 , 0 ] ;
22201: LD_ADDR_VAR 0 9
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: ST_TO_ADDR
// bpoints := 1 ;
22220: LD_ADDR_VAR 0 10
22224: PUSH
22225: LD_INT 1
22227: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22228: LD_VAR 0 6
22232: PPUSH
22233: CALL_OW 247
22237: PUSH
22238: LD_INT 1
22240: DOUBLE
22241: EQUAL
22242: IFTRUE 22246
22244: GO 22828
22246: POP
// begin if GetClass ( i ) = 1 then
22247: LD_VAR 0 6
22251: PPUSH
22252: CALL_OW 257
22256: PUSH
22257: LD_INT 1
22259: EQUAL
22260: IFFALSE 22281
// points := [ 10 , 5 , 3 ] ;
22262: LD_ADDR_VAR 0 9
22266: PUSH
22267: LD_INT 10
22269: PUSH
22270: LD_INT 5
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22281: LD_VAR 0 6
22285: PPUSH
22286: CALL_OW 257
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 3
22296: PUSH
22297: LD_INT 4
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: IN
22305: IFFALSE 22326
// points := [ 3 , 2 , 1 ] ;
22307: LD_ADDR_VAR 0 9
22311: PUSH
22312: LD_INT 3
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22326: LD_VAR 0 6
22330: PPUSH
22331: CALL_OW 257
22335: PUSH
22336: LD_INT 5
22338: EQUAL
22339: IFFALSE 22360
// points := [ 130 , 5 , 2 ] ;
22341: LD_ADDR_VAR 0 9
22345: PUSH
22346: LD_INT 130
22348: PUSH
22349: LD_INT 5
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22360: LD_VAR 0 6
22364: PPUSH
22365: CALL_OW 257
22369: PUSH
22370: LD_INT 8
22372: EQUAL
22373: IFFALSE 22394
// points := [ 35 , 35 , 30 ] ;
22375: LD_ADDR_VAR 0 9
22379: PUSH
22380: LD_INT 35
22382: PUSH
22383: LD_INT 35
22385: PUSH
22386: LD_INT 30
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22394: LD_VAR 0 6
22398: PPUSH
22399: CALL_OW 257
22403: PUSH
22404: LD_INT 9
22406: EQUAL
22407: IFFALSE 22428
// points := [ 20 , 55 , 40 ] ;
22409: LD_ADDR_VAR 0 9
22413: PUSH
22414: LD_INT 20
22416: PUSH
22417: LD_INT 55
22419: PUSH
22420: LD_INT 40
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22428: LD_VAR 0 6
22432: PPUSH
22433: CALL_OW 257
22437: PUSH
22438: LD_INT 12
22440: PUSH
22441: LD_INT 16
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: IN
22448: IFFALSE 22469
// points := [ 5 , 3 , 2 ] ;
22450: LD_ADDR_VAR 0 9
22454: PUSH
22455: LD_INT 5
22457: PUSH
22458: LD_INT 3
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22469: LD_VAR 0 6
22473: PPUSH
22474: CALL_OW 257
22478: PUSH
22479: LD_INT 17
22481: EQUAL
22482: IFFALSE 22503
// points := [ 100 , 50 , 75 ] ;
22484: LD_ADDR_VAR 0 9
22488: PUSH
22489: LD_INT 100
22491: PUSH
22492: LD_INT 50
22494: PUSH
22495: LD_INT 75
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22503: LD_VAR 0 6
22507: PPUSH
22508: CALL_OW 257
22512: PUSH
22513: LD_INT 15
22515: EQUAL
22516: IFFALSE 22537
// points := [ 10 , 5 , 3 ] ;
22518: LD_ADDR_VAR 0 9
22522: PUSH
22523: LD_INT 10
22525: PUSH
22526: LD_INT 5
22528: PUSH
22529: LD_INT 3
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22537: LD_VAR 0 6
22541: PPUSH
22542: CALL_OW 257
22546: PUSH
22547: LD_INT 14
22549: EQUAL
22550: IFFALSE 22571
// points := [ 10 , 0 , 0 ] ;
22552: LD_ADDR_VAR 0 9
22556: PUSH
22557: LD_INT 10
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22571: LD_VAR 0 6
22575: PPUSH
22576: CALL_OW 257
22580: PUSH
22581: LD_INT 11
22583: EQUAL
22584: IFFALSE 22605
// points := [ 30 , 10 , 5 ] ;
22586: LD_ADDR_VAR 0 9
22590: PUSH
22591: LD_INT 30
22593: PUSH
22594: LD_INT 10
22596: PUSH
22597: LD_INT 5
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22605: LD_VAR 0 1
22609: PPUSH
22610: LD_INT 5
22612: PPUSH
22613: CALL_OW 321
22617: PUSH
22618: LD_INT 2
22620: EQUAL
22621: IFFALSE 22638
// bpoints := bpoints * 1.8 ;
22623: LD_ADDR_VAR 0 10
22627: PUSH
22628: LD_VAR 0 10
22632: PUSH
22633: LD_REAL  1.80000000000000E+0000
22636: MUL
22637: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22638: LD_VAR 0 6
22642: PPUSH
22643: CALL_OW 257
22647: PUSH
22648: LD_INT 1
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: LD_INT 4
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: IN
22666: IFFALSE 22686
22668: PUSH
22669: LD_VAR 0 1
22673: PPUSH
22674: LD_INT 51
22676: PPUSH
22677: CALL_OW 321
22681: PUSH
22682: LD_INT 2
22684: EQUAL
22685: AND
22686: IFFALSE 22703
// bpoints := bpoints * 1.2 ;
22688: LD_ADDR_VAR 0 10
22692: PUSH
22693: LD_VAR 0 10
22697: PUSH
22698: LD_REAL  1.20000000000000E+0000
22701: MUL
22702: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22703: LD_VAR 0 6
22707: PPUSH
22708: CALL_OW 257
22712: PUSH
22713: LD_INT 5
22715: PUSH
22716: LD_INT 7
22718: PUSH
22719: LD_INT 9
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: IN
22727: IFFALSE 22747
22729: PUSH
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_INT 52
22737: PPUSH
22738: CALL_OW 321
22742: PUSH
22743: LD_INT 2
22745: EQUAL
22746: AND
22747: IFFALSE 22764
// bpoints := bpoints * 1.5 ;
22749: LD_ADDR_VAR 0 10
22753: PUSH
22754: LD_VAR 0 10
22758: PUSH
22759: LD_REAL  1.50000000000000E+0000
22762: MUL
22763: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22764: LD_VAR 0 1
22768: PPUSH
22769: LD_INT 66
22771: PPUSH
22772: CALL_OW 321
22776: PUSH
22777: LD_INT 2
22779: EQUAL
22780: IFFALSE 22797
// bpoints := bpoints * 1.1 ;
22782: LD_ADDR_VAR 0 10
22786: PUSH
22787: LD_VAR 0 10
22791: PUSH
22792: LD_REAL  1.10000000000000E+0000
22795: MUL
22796: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22797: LD_ADDR_VAR 0 10
22801: PUSH
22802: LD_VAR 0 10
22806: PUSH
22807: LD_VAR 0 6
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: CALL_OW 259
22819: PUSH
22820: LD_REAL  1.15000000000000E+0000
22823: MUL
22824: MUL
22825: ST_TO_ADDR
// end ; unit_vehicle :
22826: GO 23656
22828: LD_INT 2
22830: DOUBLE
22831: EQUAL
22832: IFTRUE 22836
22834: GO 23644
22836: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22837: LD_VAR 0 6
22841: PPUSH
22842: CALL_OW 264
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: LD_INT 42
22852: PUSH
22853: LD_INT 24
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: IN
22861: IFFALSE 22882
// points := [ 25 , 5 , 3 ] ;
22863: LD_ADDR_VAR 0 9
22867: PUSH
22868: LD_INT 25
22870: PUSH
22871: LD_INT 5
22873: PUSH
22874: LD_INT 3
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22882: LD_VAR 0 6
22886: PPUSH
22887: CALL_OW 264
22891: PUSH
22892: LD_INT 4
22894: PUSH
22895: LD_INT 43
22897: PUSH
22898: LD_INT 25
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: IN
22906: IFFALSE 22927
// points := [ 40 , 15 , 5 ] ;
22908: LD_ADDR_VAR 0 9
22912: PUSH
22913: LD_INT 40
22915: PUSH
22916: LD_INT 15
22918: PUSH
22919: LD_INT 5
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22927: LD_VAR 0 6
22931: PPUSH
22932: CALL_OW 264
22936: PUSH
22937: LD_INT 3
22939: PUSH
22940: LD_INT 23
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: IN
22947: IFFALSE 22968
// points := [ 7 , 25 , 8 ] ;
22949: LD_ADDR_VAR 0 9
22953: PUSH
22954: LD_INT 7
22956: PUSH
22957: LD_INT 25
22959: PUSH
22960: LD_INT 8
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22968: LD_VAR 0 6
22972: PPUSH
22973: CALL_OW 264
22977: PUSH
22978: LD_INT 5
22980: PUSH
22981: LD_INT 27
22983: PUSH
22984: LD_INT 44
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: IN
22992: IFFALSE 23013
// points := [ 14 , 50 , 16 ] ;
22994: LD_ADDR_VAR 0 9
22998: PUSH
22999: LD_INT 14
23001: PUSH
23002: LD_INT 50
23004: PUSH
23005: LD_INT 16
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23013: LD_VAR 0 6
23017: PPUSH
23018: CALL_OW 264
23022: PUSH
23023: LD_INT 6
23025: PUSH
23026: LD_INT 46
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: IN
23033: IFFALSE 23054
// points := [ 32 , 120 , 70 ] ;
23035: LD_ADDR_VAR 0 9
23039: PUSH
23040: LD_INT 32
23042: PUSH
23043: LD_INT 120
23045: PUSH
23046: LD_INT 70
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23054: LD_VAR 0 6
23058: PPUSH
23059: CALL_OW 264
23063: PUSH
23064: LD_INT 7
23066: PUSH
23067: LD_INT 28
23069: PUSH
23070: LD_INT 45
23072: PUSH
23073: LD_INT 92
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: IN
23082: IFFALSE 23103
// points := [ 35 , 20 , 45 ] ;
23084: LD_ADDR_VAR 0 9
23088: PUSH
23089: LD_INT 35
23091: PUSH
23092: LD_INT 20
23094: PUSH
23095: LD_INT 45
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23103: LD_VAR 0 6
23107: PPUSH
23108: CALL_OW 264
23112: PUSH
23113: LD_INT 47
23115: PUSH
23116: EMPTY
23117: LIST
23118: IN
23119: IFFALSE 23140
// points := [ 67 , 45 , 75 ] ;
23121: LD_ADDR_VAR 0 9
23125: PUSH
23126: LD_INT 67
23128: PUSH
23129: LD_INT 45
23131: PUSH
23132: LD_INT 75
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: LIST
23139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23140: LD_VAR 0 6
23144: PPUSH
23145: CALL_OW 264
23149: PUSH
23150: LD_INT 26
23152: PUSH
23153: EMPTY
23154: LIST
23155: IN
23156: IFFALSE 23177
// points := [ 120 , 30 , 80 ] ;
23158: LD_ADDR_VAR 0 9
23162: PUSH
23163: LD_INT 120
23165: PUSH
23166: LD_INT 30
23168: PUSH
23169: LD_INT 80
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23177: LD_VAR 0 6
23181: PPUSH
23182: CALL_OW 264
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: EMPTY
23191: LIST
23192: IN
23193: IFFALSE 23214
// points := [ 40 , 1 , 1 ] ;
23195: LD_ADDR_VAR 0 9
23199: PUSH
23200: LD_INT 40
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23214: LD_VAR 0 6
23218: PPUSH
23219: CALL_OW 264
23223: PUSH
23224: LD_INT 29
23226: PUSH
23227: EMPTY
23228: LIST
23229: IN
23230: IFFALSE 23251
// points := [ 70 , 200 , 400 ] ;
23232: LD_ADDR_VAR 0 9
23236: PUSH
23237: LD_INT 70
23239: PUSH
23240: LD_INT 200
23242: PUSH
23243: LD_INT 400
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23251: LD_VAR 0 6
23255: PPUSH
23256: CALL_OW 264
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: LD_INT 53
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: IN
23271: IFFALSE 23292
// points := [ 40 , 10 , 20 ] ;
23273: LD_ADDR_VAR 0 9
23277: PUSH
23278: LD_INT 40
23280: PUSH
23281: LD_INT 10
23283: PUSH
23284: LD_INT 20
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23292: LD_VAR 0 6
23296: PPUSH
23297: CALL_OW 264
23301: PUSH
23302: LD_INT 9
23304: PUSH
23305: EMPTY
23306: LIST
23307: IN
23308: IFFALSE 23329
// points := [ 5 , 70 , 20 ] ;
23310: LD_ADDR_VAR 0 9
23314: PUSH
23315: LD_INT 5
23317: PUSH
23318: LD_INT 70
23320: PUSH
23321: LD_INT 20
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23329: LD_VAR 0 6
23333: PPUSH
23334: CALL_OW 264
23338: PUSH
23339: LD_INT 10
23341: PUSH
23342: EMPTY
23343: LIST
23344: IN
23345: IFFALSE 23366
// points := [ 35 , 110 , 70 ] ;
23347: LD_ADDR_VAR 0 9
23351: PUSH
23352: LD_INT 35
23354: PUSH
23355: LD_INT 110
23357: PUSH
23358: LD_INT 70
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23366: LD_VAR 0 6
23370: PPUSH
23371: CALL_OW 265
23375: PUSH
23376: LD_INT 25
23378: EQUAL
23379: IFFALSE 23400
// points := [ 80 , 65 , 100 ] ;
23381: LD_ADDR_VAR 0 9
23385: PUSH
23386: LD_INT 80
23388: PUSH
23389: LD_INT 65
23391: PUSH
23392: LD_INT 100
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23400: LD_VAR 0 6
23404: PPUSH
23405: CALL_OW 263
23409: PUSH
23410: LD_INT 1
23412: EQUAL
23413: IFFALSE 23448
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23415: LD_ADDR_VAR 0 10
23419: PUSH
23420: LD_VAR 0 10
23424: PUSH
23425: LD_VAR 0 6
23429: PPUSH
23430: CALL_OW 311
23434: PPUSH
23435: LD_INT 3
23437: PPUSH
23438: CALL_OW 259
23442: PUSH
23443: LD_INT 4
23445: MUL
23446: MUL
23447: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23448: LD_VAR 0 6
23452: PPUSH
23453: CALL_OW 263
23457: PUSH
23458: LD_INT 2
23460: EQUAL
23461: IFFALSE 23512
// begin j := IsControledBy ( i ) ;
23463: LD_ADDR_VAR 0 7
23467: PUSH
23468: LD_VAR 0 6
23472: PPUSH
23473: CALL_OW 312
23477: ST_TO_ADDR
// if j then
23478: LD_VAR 0 7
23482: IFFALSE 23512
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23484: LD_ADDR_VAR 0 10
23488: PUSH
23489: LD_VAR 0 10
23493: PUSH
23494: LD_VAR 0 7
23498: PPUSH
23499: LD_INT 3
23501: PPUSH
23502: CALL_OW 259
23506: PUSH
23507: LD_INT 3
23509: MUL
23510: MUL
23511: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23512: LD_VAR 0 6
23516: PPUSH
23517: CALL_OW 264
23521: PUSH
23522: LD_INT 5
23524: PUSH
23525: LD_INT 6
23527: PUSH
23528: LD_INT 46
23530: PUSH
23531: LD_INT 44
23533: PUSH
23534: LD_INT 47
23536: PUSH
23537: LD_INT 45
23539: PUSH
23540: LD_INT 28
23542: PUSH
23543: LD_INT 7
23545: PUSH
23546: LD_INT 27
23548: PUSH
23549: LD_INT 29
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: IN
23564: IFFALSE 23584
23566: PUSH
23567: LD_VAR 0 1
23571: PPUSH
23572: LD_INT 52
23574: PPUSH
23575: CALL_OW 321
23579: PUSH
23580: LD_INT 2
23582: EQUAL
23583: AND
23584: IFFALSE 23601
// bpoints := bpoints * 1.2 ;
23586: LD_ADDR_VAR 0 10
23590: PUSH
23591: LD_VAR 0 10
23595: PUSH
23596: LD_REAL  1.20000000000000E+0000
23599: MUL
23600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23601: LD_VAR 0 6
23605: PPUSH
23606: CALL_OW 264
23610: PUSH
23611: LD_INT 6
23613: PUSH
23614: LD_INT 46
23616: PUSH
23617: LD_INT 47
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: IN
23625: IFFALSE 23642
// bpoints := bpoints * 1.2 ;
23627: LD_ADDR_VAR 0 10
23631: PUSH
23632: LD_VAR 0 10
23636: PUSH
23637: LD_REAL  1.20000000000000E+0000
23640: MUL
23641: ST_TO_ADDR
// end ; unit_building :
23642: GO 23656
23644: LD_INT 3
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23655
23652: POP
// ; end ;
23653: GO 23656
23655: POP
// for j = 1 to 3 do
23656: LD_ADDR_VAR 0 7
23660: PUSH
23661: DOUBLE
23662: LD_INT 1
23664: DEC
23665: ST_TO_ADDR
23666: LD_INT 3
23668: PUSH
23669: FOR_TO
23670: IFFALSE 23723
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23672: LD_ADDR_VAR 0 5
23676: PUSH
23677: LD_VAR 0 5
23681: PPUSH
23682: LD_VAR 0 7
23686: PPUSH
23687: LD_VAR 0 5
23691: PUSH
23692: LD_VAR 0 7
23696: ARRAY
23697: PUSH
23698: LD_VAR 0 9
23702: PUSH
23703: LD_VAR 0 7
23707: ARRAY
23708: PUSH
23709: LD_VAR 0 10
23713: MUL
23714: PLUS
23715: PPUSH
23716: CALL_OW 1
23720: ST_TO_ADDR
23721: GO 23669
23723: POP
23724: POP
// end ;
23725: GO 22198
23727: POP
23728: POP
// result := Replace ( result , 4 , tmp ) ;
23729: LD_ADDR_VAR 0 5
23733: PUSH
23734: LD_VAR 0 5
23738: PPUSH
23739: LD_INT 4
23741: PPUSH
23742: LD_VAR 0 8
23746: PPUSH
23747: CALL_OW 1
23751: ST_TO_ADDR
// end ;
23752: LD_VAR 0 5
23756: RET
// export function DangerAtRange ( unit , range ) ; begin
23757: LD_INT 0
23759: PPUSH
// if not unit then
23760: LD_VAR 0 1
23764: NOT
23765: IFFALSE 23769
// exit ;
23767: GO 23814
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23769: LD_ADDR_VAR 0 3
23773: PUSH
23774: LD_VAR 0 1
23778: PPUSH
23779: CALL_OW 255
23783: PPUSH
23784: LD_VAR 0 1
23788: PPUSH
23789: CALL_OW 250
23793: PPUSH
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 251
23803: PPUSH
23804: LD_VAR 0 2
23808: PPUSH
23809: CALL 22048 0 4
23813: ST_TO_ADDR
// end ;
23814: LD_VAR 0 3
23818: RET
// export function DangerInArea ( side , area ) ; begin
23819: LD_INT 0
23821: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23822: LD_ADDR_VAR 0 3
23826: PUSH
23827: LD_VAR 0 2
23831: PPUSH
23832: LD_INT 81
23834: PUSH
23835: LD_VAR 0 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PPUSH
23844: CALL_OW 70
23848: ST_TO_ADDR
// end ;
23849: LD_VAR 0 3
23853: RET
// export function IsExtension ( b ) ; begin
23854: LD_INT 0
23856: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23857: LD_ADDR_VAR 0 2
23861: PUSH
23862: LD_VAR 0 1
23866: PUSH
23867: LD_INT 23
23869: PUSH
23870: LD_INT 20
23872: PUSH
23873: LD_INT 22
23875: PUSH
23876: LD_INT 17
23878: PUSH
23879: LD_INT 24
23881: PUSH
23882: LD_INT 21
23884: PUSH
23885: LD_INT 19
23887: PUSH
23888: LD_INT 16
23890: PUSH
23891: LD_INT 25
23893: PUSH
23894: LD_INT 18
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: IN
23909: ST_TO_ADDR
// end ;
23910: LD_VAR 0 2
23914: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23915: LD_INT 0
23917: PPUSH
23918: PPUSH
23919: PPUSH
// result := [ ] ;
23920: LD_ADDR_VAR 0 4
23924: PUSH
23925: EMPTY
23926: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23927: LD_ADDR_VAR 0 5
23931: PUSH
23932: LD_VAR 0 2
23936: PPUSH
23937: LD_INT 21
23939: PUSH
23940: LD_INT 3
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PPUSH
23947: CALL_OW 70
23951: ST_TO_ADDR
// if not tmp then
23952: LD_VAR 0 5
23956: NOT
23957: IFFALSE 23961
// exit ;
23959: GO 24025
// if checkLink then
23961: LD_VAR 0 3
23965: IFFALSE 24015
// begin for i in tmp do
23967: LD_ADDR_VAR 0 6
23971: PUSH
23972: LD_VAR 0 5
23976: PUSH
23977: FOR_IN
23978: IFFALSE 24013
// if GetBase ( i ) <> base then
23980: LD_VAR 0 6
23984: PPUSH
23985: CALL_OW 274
23989: PUSH
23990: LD_VAR 0 1
23994: NONEQUAL
23995: IFFALSE 24011
// ComLinkToBase ( base , i ) ;
23997: LD_VAR 0 1
24001: PPUSH
24002: LD_VAR 0 6
24006: PPUSH
24007: CALL_OW 169
24011: GO 23977
24013: POP
24014: POP
// end ; result := tmp ;
24015: LD_ADDR_VAR 0 4
24019: PUSH
24020: LD_VAR 0 5
24024: ST_TO_ADDR
// end ;
24025: LD_VAR 0 4
24029: RET
// export function ComComplete ( units , b ) ; var i ; begin
24030: LD_INT 0
24032: PPUSH
24033: PPUSH
// if not units then
24034: LD_VAR 0 1
24038: NOT
24039: IFFALSE 24043
// exit ;
24041: GO 24133
// for i in units do
24043: LD_ADDR_VAR 0 4
24047: PUSH
24048: LD_VAR 0 1
24052: PUSH
24053: FOR_IN
24054: IFFALSE 24131
// if BuildingStatus ( b ) = bs_build then
24056: LD_VAR 0 2
24060: PPUSH
24061: CALL_OW 461
24065: PUSH
24066: LD_INT 1
24068: EQUAL
24069: IFFALSE 24129
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24071: LD_VAR 0 4
24075: PPUSH
24076: LD_STRING h
24078: PUSH
24079: LD_VAR 0 2
24083: PPUSH
24084: CALL_OW 250
24088: PUSH
24089: LD_VAR 0 2
24093: PPUSH
24094: CALL_OW 251
24098: PUSH
24099: LD_VAR 0 2
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: PUSH
24122: EMPTY
24123: LIST
24124: PPUSH
24125: CALL_OW 446
24129: GO 24053
24131: POP
24132: POP
// end ;
24133: LD_VAR 0 3
24137: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24138: LD_INT 0
24140: PPUSH
24141: PPUSH
24142: PPUSH
24143: PPUSH
24144: PPUSH
24145: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24146: LD_VAR 0 1
24150: NOT
24151: IFTRUE 24168
24153: PUSH
24154: LD_VAR 0 1
24158: PPUSH
24159: CALL_OW 263
24163: PUSH
24164: LD_INT 2
24166: NONEQUAL
24167: OR
24168: IFFALSE 24172
// exit ;
24170: GO 24488
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24172: LD_ADDR_VAR 0 6
24176: PUSH
24177: LD_INT 22
24179: PUSH
24180: LD_VAR 0 1
24184: PPUSH
24185: CALL_OW 255
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 2
24196: PUSH
24197: LD_INT 30
24199: PUSH
24200: LD_INT 36
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 34
24209: PUSH
24210: LD_INT 31
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PPUSH
24226: CALL_OW 69
24230: ST_TO_ADDR
// if not tmp then
24231: LD_VAR 0 6
24235: NOT
24236: IFFALSE 24240
// exit ;
24238: GO 24488
// result := [ ] ;
24240: LD_ADDR_VAR 0 2
24244: PUSH
24245: EMPTY
24246: ST_TO_ADDR
// for i in tmp do
24247: LD_ADDR_VAR 0 3
24251: PUSH
24252: LD_VAR 0 6
24256: PUSH
24257: FOR_IN
24258: IFFALSE 24329
// begin t := UnitsInside ( i ) ;
24260: LD_ADDR_VAR 0 4
24264: PUSH
24265: LD_VAR 0 3
24269: PPUSH
24270: CALL_OW 313
24274: ST_TO_ADDR
// if t then
24275: LD_VAR 0 4
24279: IFFALSE 24327
// for j in t do
24281: LD_ADDR_VAR 0 7
24285: PUSH
24286: LD_VAR 0 4
24290: PUSH
24291: FOR_IN
24292: IFFALSE 24325
// result := Replace ( result , result + 1 , j ) ;
24294: LD_ADDR_VAR 0 2
24298: PUSH
24299: LD_VAR 0 2
24303: PPUSH
24304: LD_VAR 0 2
24308: PUSH
24309: LD_INT 1
24311: PLUS
24312: PPUSH
24313: LD_VAR 0 7
24317: PPUSH
24318: CALL_OW 1
24322: ST_TO_ADDR
24323: GO 24291
24325: POP
24326: POP
// end ;
24327: GO 24257
24329: POP
24330: POP
// if not result then
24331: LD_VAR 0 2
24335: NOT
24336: IFFALSE 24340
// exit ;
24338: GO 24488
// mech := result [ 1 ] ;
24340: LD_ADDR_VAR 0 5
24344: PUSH
24345: LD_VAR 0 2
24349: PUSH
24350: LD_INT 1
24352: ARRAY
24353: ST_TO_ADDR
// if result > 1 then
24354: LD_VAR 0 2
24358: PUSH
24359: LD_INT 1
24361: GREATER
24362: IFFALSE 24474
// begin for i = 2 to result do
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: DOUBLE
24370: LD_INT 2
24372: DEC
24373: ST_TO_ADDR
24374: LD_VAR 0 2
24378: PUSH
24379: FOR_TO
24380: IFFALSE 24472
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24382: LD_ADDR_VAR 0 4
24386: PUSH
24387: LD_VAR 0 2
24391: PUSH
24392: LD_VAR 0 3
24396: ARRAY
24397: PPUSH
24398: LD_INT 3
24400: PPUSH
24401: CALL_OW 259
24405: PUSH
24406: LD_VAR 0 2
24410: PUSH
24411: LD_VAR 0 3
24415: ARRAY
24416: PPUSH
24417: CALL_OW 432
24421: MINUS
24422: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24423: LD_VAR 0 4
24427: PUSH
24428: LD_VAR 0 5
24432: PPUSH
24433: LD_INT 3
24435: PPUSH
24436: CALL_OW 259
24440: PUSH
24441: LD_VAR 0 5
24445: PPUSH
24446: CALL_OW 432
24450: MINUS
24451: GREATEREQUAL
24452: IFFALSE 24470
// mech := result [ i ] ;
24454: LD_ADDR_VAR 0 5
24458: PUSH
24459: LD_VAR 0 2
24463: PUSH
24464: LD_VAR 0 3
24468: ARRAY
24469: ST_TO_ADDR
// end ;
24470: GO 24379
24472: POP
24473: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24474: LD_VAR 0 1
24478: PPUSH
24479: LD_VAR 0 5
24483: PPUSH
24484: CALL_OW 135
// end ;
24488: LD_VAR 0 2
24492: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24493: LD_INT 0
24495: PPUSH
24496: PPUSH
24497: PPUSH
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
24502: PPUSH
24503: PPUSH
24504: PPUSH
24505: PPUSH
24506: PPUSH
24507: PPUSH
// result := [ ] ;
24508: LD_ADDR_VAR 0 7
24512: PUSH
24513: EMPTY
24514: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24515: LD_VAR 0 1
24519: PPUSH
24520: CALL_OW 266
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: IN
24535: NOT
24536: IFFALSE 24540
// exit ;
24538: GO 26180
// if name then
24540: LD_VAR 0 3
24544: IFFALSE 24560
// SetBName ( base_dep , name ) ;
24546: LD_VAR 0 1
24550: PPUSH
24551: LD_VAR 0 3
24555: PPUSH
24556: CALL_OW 500
// base := GetBase ( base_dep ) ;
24560: LD_ADDR_VAR 0 15
24564: PUSH
24565: LD_VAR 0 1
24569: PPUSH
24570: CALL_OW 274
24574: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24575: LD_ADDR_VAR 0 16
24579: PUSH
24580: LD_VAR 0 1
24584: PPUSH
24585: CALL_OW 255
24589: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24590: LD_ADDR_VAR 0 17
24594: PUSH
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 248
24604: ST_TO_ADDR
// if sources then
24605: LD_VAR 0 5
24609: IFFALSE 24656
// for i = 1 to 3 do
24611: LD_ADDR_VAR 0 8
24615: PUSH
24616: DOUBLE
24617: LD_INT 1
24619: DEC
24620: ST_TO_ADDR
24621: LD_INT 3
24623: PUSH
24624: FOR_TO
24625: IFFALSE 24654
// AddResourceType ( base , i , sources [ i ] ) ;
24627: LD_VAR 0 15
24631: PPUSH
24632: LD_VAR 0 8
24636: PPUSH
24637: LD_VAR 0 5
24641: PUSH
24642: LD_VAR 0 8
24646: ARRAY
24647: PPUSH
24648: CALL_OW 276
24652: GO 24624
24654: POP
24655: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24656: LD_ADDR_VAR 0 18
24660: PUSH
24661: LD_VAR 0 15
24665: PPUSH
24666: LD_VAR 0 2
24670: PPUSH
24671: LD_INT 1
24673: PPUSH
24674: CALL 23915 0 3
24678: ST_TO_ADDR
// InitHc ;
24679: CALL_OW 19
// InitUc ;
24683: CALL_OW 18
// uc_side := side ;
24687: LD_ADDR_OWVAR 20
24691: PUSH
24692: LD_VAR 0 16
24696: ST_TO_ADDR
// uc_nation := nation ;
24697: LD_ADDR_OWVAR 21
24701: PUSH
24702: LD_VAR 0 17
24706: ST_TO_ADDR
// if buildings then
24707: LD_VAR 0 18
24711: IFFALSE 26039
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24713: LD_ADDR_VAR 0 19
24717: PUSH
24718: LD_VAR 0 18
24722: PPUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 30
24728: PUSH
24729: LD_INT 29
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 30
24738: PUSH
24739: LD_INT 30
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: PPUSH
24751: CALL_OW 72
24755: ST_TO_ADDR
// if tmp then
24756: LD_VAR 0 19
24760: IFFALSE 24808
// for i in tmp do
24762: LD_ADDR_VAR 0 8
24766: PUSH
24767: LD_VAR 0 19
24771: PUSH
24772: FOR_IN
24773: IFFALSE 24806
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24775: LD_VAR 0 8
24779: PPUSH
24780: CALL_OW 250
24784: PPUSH
24785: LD_VAR 0 8
24789: PPUSH
24790: CALL_OW 251
24794: PPUSH
24795: LD_VAR 0 16
24799: PPUSH
24800: CALL_OW 441
24804: GO 24772
24806: POP
24807: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24808: LD_VAR 0 18
24812: PPUSH
24813: LD_INT 2
24815: PUSH
24816: LD_INT 30
24818: PUSH
24819: LD_INT 32
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 30
24828: PUSH
24829: LD_INT 33
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: PPUSH
24841: CALL_OW 72
24845: IFFALSE 24933
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24847: LD_ADDR_VAR 0 8
24851: PUSH
24852: LD_VAR 0 18
24856: PPUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 30
24862: PUSH
24863: LD_INT 32
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 30
24872: PUSH
24873: LD_INT 33
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: PPUSH
24885: CALL_OW 72
24889: PUSH
24890: FOR_IN
24891: IFFALSE 24931
// begin if not GetBWeapon ( i ) then
24893: LD_VAR 0 8
24897: PPUSH
24898: CALL_OW 269
24902: NOT
24903: IFFALSE 24929
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24905: LD_VAR 0 8
24909: PPUSH
24910: LD_VAR 0 8
24914: PPUSH
24915: LD_VAR 0 2
24919: PPUSH
24920: CALL 26185 0 2
24924: PPUSH
24925: CALL_OW 431
// end ;
24929: GO 24890
24931: POP
24932: POP
// end ; for i = 1 to personel do
24933: LD_ADDR_VAR 0 8
24937: PUSH
24938: DOUBLE
24939: LD_INT 1
24941: DEC
24942: ST_TO_ADDR
24943: LD_VAR 0 6
24947: PUSH
24948: FOR_TO
24949: IFFALSE 26019
// begin if i > 4 then
24951: LD_VAR 0 8
24955: PUSH
24956: LD_INT 4
24958: GREATER
24959: IFFALSE 24963
// break ;
24961: GO 26019
// case i of 1 :
24963: LD_VAR 0 8
24967: PUSH
24968: LD_INT 1
24970: DOUBLE
24971: EQUAL
24972: IFTRUE 24976
24974: GO 25056
24976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24977: LD_ADDR_VAR 0 12
24981: PUSH
24982: LD_VAR 0 18
24986: PPUSH
24987: LD_INT 22
24989: PUSH
24990: LD_VAR 0 16
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 58
25001: PUSH
25002: EMPTY
25003: LIST
25004: PUSH
25005: LD_INT 2
25007: PUSH
25008: LD_INT 30
25010: PUSH
25011: LD_INT 32
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 30
25020: PUSH
25021: LD_INT 4
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 30
25030: PUSH
25031: LD_INT 5
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: PPUSH
25049: CALL_OW 72
25053: ST_TO_ADDR
25054: GO 25278
25056: LD_INT 2
25058: DOUBLE
25059: EQUAL
25060: IFTRUE 25064
25062: GO 25126
25064: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25065: LD_ADDR_VAR 0 12
25069: PUSH
25070: LD_VAR 0 18
25074: PPUSH
25075: LD_INT 22
25077: PUSH
25078: LD_VAR 0 16
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 30
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 30
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PPUSH
25119: CALL_OW 72
25123: ST_TO_ADDR
25124: GO 25278
25126: LD_INT 3
25128: DOUBLE
25129: EQUAL
25130: IFTRUE 25134
25132: GO 25196
25134: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25135: LD_ADDR_VAR 0 12
25139: PUSH
25140: LD_VAR 0 18
25144: PPUSH
25145: LD_INT 22
25147: PUSH
25148: LD_VAR 0 16
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: LD_INT 30
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 30
25172: PUSH
25173: LD_INT 3
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 72
25193: ST_TO_ADDR
25194: GO 25278
25196: LD_INT 4
25198: DOUBLE
25199: EQUAL
25200: IFTRUE 25204
25202: GO 25277
25204: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25205: LD_ADDR_VAR 0 12
25209: PUSH
25210: LD_VAR 0 18
25214: PPUSH
25215: LD_INT 22
25217: PUSH
25218: LD_VAR 0 16
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 30
25232: PUSH
25233: LD_INT 6
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 7
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 30
25252: PUSH
25253: LD_INT 8
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 72
25274: ST_TO_ADDR
25275: GO 25278
25277: POP
// if i = 1 then
25278: LD_VAR 0 8
25282: PUSH
25283: LD_INT 1
25285: EQUAL
25286: IFFALSE 25397
// begin tmp := [ ] ;
25288: LD_ADDR_VAR 0 19
25292: PUSH
25293: EMPTY
25294: ST_TO_ADDR
// for j in f do
25295: LD_ADDR_VAR 0 9
25299: PUSH
25300: LD_VAR 0 12
25304: PUSH
25305: FOR_IN
25306: IFFALSE 25379
// if GetBType ( j ) = b_bunker then
25308: LD_VAR 0 9
25312: PPUSH
25313: CALL_OW 266
25317: PUSH
25318: LD_INT 32
25320: EQUAL
25321: IFFALSE 25348
// tmp := Insert ( tmp , 1 , j ) else
25323: LD_ADDR_VAR 0 19
25327: PUSH
25328: LD_VAR 0 19
25332: PPUSH
25333: LD_INT 1
25335: PPUSH
25336: LD_VAR 0 9
25340: PPUSH
25341: CALL_OW 2
25345: ST_TO_ADDR
25346: GO 25377
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25348: LD_ADDR_VAR 0 19
25352: PUSH
25353: LD_VAR 0 19
25357: PPUSH
25358: LD_VAR 0 19
25362: PUSH
25363: LD_INT 1
25365: PLUS
25366: PPUSH
25367: LD_VAR 0 9
25371: PPUSH
25372: CALL_OW 2
25376: ST_TO_ADDR
25377: GO 25305
25379: POP
25380: POP
// if tmp then
25381: LD_VAR 0 19
25385: IFFALSE 25397
// f := tmp ;
25387: LD_ADDR_VAR 0 12
25391: PUSH
25392: LD_VAR 0 19
25396: ST_TO_ADDR
// end ; x := personel [ i ] ;
25397: LD_ADDR_VAR 0 13
25401: PUSH
25402: LD_VAR 0 6
25406: PUSH
25407: LD_VAR 0 8
25411: ARRAY
25412: ST_TO_ADDR
// if x = - 1 then
25413: LD_VAR 0 13
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: EQUAL
25422: IFFALSE 25633
// begin for j in f do
25424: LD_ADDR_VAR 0 9
25428: PUSH
25429: LD_VAR 0 12
25433: PUSH
25434: FOR_IN
25435: IFFALSE 25629
// repeat InitHc ;
25437: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25441: LD_VAR 0 9
25445: PPUSH
25446: CALL_OW 266
25450: PUSH
25451: LD_INT 5
25453: EQUAL
25454: IFFALSE 25524
// begin if UnitsInside ( j ) < 3 then
25456: LD_VAR 0 9
25460: PPUSH
25461: CALL_OW 313
25465: PUSH
25466: LD_INT 3
25468: LESS
25469: IFFALSE 25505
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25471: LD_INT 0
25473: PPUSH
25474: LD_INT 5
25476: PUSH
25477: LD_INT 8
25479: PUSH
25480: LD_INT 9
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: LIST
25487: PUSH
25488: LD_VAR 0 17
25492: ARRAY
25493: PPUSH
25494: LD_VAR 0 4
25498: PPUSH
25499: CALL_OW 380
25503: GO 25522
// PrepareHuman ( false , i , skill ) ;
25505: LD_INT 0
25507: PPUSH
25508: LD_VAR 0 8
25512: PPUSH
25513: LD_VAR 0 4
25517: PPUSH
25518: CALL_OW 380
// end else
25522: GO 25541
// PrepareHuman ( false , i , skill ) ;
25524: LD_INT 0
25526: PPUSH
25527: LD_VAR 0 8
25531: PPUSH
25532: LD_VAR 0 4
25536: PPUSH
25537: CALL_OW 380
// un := CreateHuman ;
25541: LD_ADDR_VAR 0 14
25545: PUSH
25546: CALL_OW 44
25550: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25551: LD_ADDR_VAR 0 7
25555: PUSH
25556: LD_VAR 0 7
25560: PPUSH
25561: LD_INT 1
25563: PPUSH
25564: LD_VAR 0 14
25568: PPUSH
25569: CALL_OW 2
25573: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25574: LD_VAR 0 14
25578: PPUSH
25579: LD_VAR 0 9
25583: PPUSH
25584: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25588: LD_VAR 0 9
25592: PPUSH
25593: CALL_OW 313
25597: PUSH
25598: LD_INT 6
25600: EQUAL
25601: IFTRUE 25625
25603: PUSH
25604: LD_VAR 0 9
25608: PPUSH
25609: CALL_OW 266
25613: PUSH
25614: LD_INT 32
25616: PUSH
25617: LD_INT 31
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: IN
25624: OR
25625: IFFALSE 25437
25627: GO 25434
25629: POP
25630: POP
// end else
25631: GO 26017
// for j = 1 to x do
25633: LD_ADDR_VAR 0 9
25637: PUSH
25638: DOUBLE
25639: LD_INT 1
25641: DEC
25642: ST_TO_ADDR
25643: LD_VAR 0 13
25647: PUSH
25648: FOR_TO
25649: IFFALSE 26015
// begin InitHc ;
25651: CALL_OW 19
// if not f then
25655: LD_VAR 0 12
25659: NOT
25660: IFFALSE 25749
// begin PrepareHuman ( false , i , skill ) ;
25662: LD_INT 0
25664: PPUSH
25665: LD_VAR 0 8
25669: PPUSH
25670: LD_VAR 0 4
25674: PPUSH
25675: CALL_OW 380
// un := CreateHuman ;
25679: LD_ADDR_VAR 0 14
25683: PUSH
25684: CALL_OW 44
25688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25689: LD_ADDR_VAR 0 7
25693: PUSH
25694: LD_VAR 0 7
25698: PPUSH
25699: LD_INT 1
25701: PPUSH
25702: LD_VAR 0 14
25706: PPUSH
25707: CALL_OW 2
25711: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25712: LD_VAR 0 14
25716: PPUSH
25717: LD_VAR 0 1
25721: PPUSH
25722: CALL_OW 250
25726: PPUSH
25727: LD_VAR 0 1
25731: PPUSH
25732: CALL_OW 251
25736: PPUSH
25737: LD_INT 10
25739: PPUSH
25740: LD_INT 0
25742: PPUSH
25743: CALL_OW 50
// continue ;
25747: GO 25648
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25749: LD_VAR 0 12
25753: PUSH
25754: LD_INT 1
25756: ARRAY
25757: PPUSH
25758: CALL_OW 313
25762: IFFALSE 25790
25764: PUSH
25765: LD_VAR 0 12
25769: PUSH
25770: LD_INT 1
25772: ARRAY
25773: PPUSH
25774: CALL_OW 266
25778: PUSH
25779: LD_INT 32
25781: PUSH
25782: LD_INT 31
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: IN
25789: AND
25790: IFTRUE 25811
25792: PUSH
25793: LD_VAR 0 12
25797: PUSH
25798: LD_INT 1
25800: ARRAY
25801: PPUSH
25802: CALL_OW 313
25806: PUSH
25807: LD_INT 6
25809: EQUAL
25810: OR
25811: IFFALSE 25831
// f := Delete ( f , 1 ) ;
25813: LD_ADDR_VAR 0 12
25817: PUSH
25818: LD_VAR 0 12
25822: PPUSH
25823: LD_INT 1
25825: PPUSH
25826: CALL_OW 3
25830: ST_TO_ADDR
// if not f then
25831: LD_VAR 0 12
25835: NOT
25836: IFFALSE 25854
// begin x := x + 2 ;
25838: LD_ADDR_VAR 0 13
25842: PUSH
25843: LD_VAR 0 13
25847: PUSH
25848: LD_INT 2
25850: PLUS
25851: ST_TO_ADDR
// continue ;
25852: GO 25648
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25854: LD_VAR 0 12
25858: PUSH
25859: LD_INT 1
25861: ARRAY
25862: PPUSH
25863: CALL_OW 266
25867: PUSH
25868: LD_INT 5
25870: EQUAL
25871: IFFALSE 25945
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25873: LD_VAR 0 12
25877: PUSH
25878: LD_INT 1
25880: ARRAY
25881: PPUSH
25882: CALL_OW 313
25886: PUSH
25887: LD_INT 3
25889: LESS
25890: IFFALSE 25926
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25892: LD_INT 0
25894: PPUSH
25895: LD_INT 5
25897: PUSH
25898: LD_INT 8
25900: PUSH
25901: LD_INT 9
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: PUSH
25909: LD_VAR 0 17
25913: ARRAY
25914: PPUSH
25915: LD_VAR 0 4
25919: PPUSH
25920: CALL_OW 380
25924: GO 25943
// PrepareHuman ( false , i , skill ) ;
25926: LD_INT 0
25928: PPUSH
25929: LD_VAR 0 8
25933: PPUSH
25934: LD_VAR 0 4
25938: PPUSH
25939: CALL_OW 380
// end else
25943: GO 25962
// PrepareHuman ( false , i , skill ) ;
25945: LD_INT 0
25947: PPUSH
25948: LD_VAR 0 8
25952: PPUSH
25953: LD_VAR 0 4
25957: PPUSH
25958: CALL_OW 380
// un := CreateHuman ;
25962: LD_ADDR_VAR 0 14
25966: PUSH
25967: CALL_OW 44
25971: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25972: LD_ADDR_VAR 0 7
25976: PUSH
25977: LD_VAR 0 7
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: LD_VAR 0 14
25989: PPUSH
25990: CALL_OW 2
25994: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25995: LD_VAR 0 14
25999: PPUSH
26000: LD_VAR 0 12
26004: PUSH
26005: LD_INT 1
26007: ARRAY
26008: PPUSH
26009: CALL_OW 52
// end ;
26013: GO 25648
26015: POP
26016: POP
// end ;
26017: GO 24948
26019: POP
26020: POP
// result := result ^ buildings ;
26021: LD_ADDR_VAR 0 7
26025: PUSH
26026: LD_VAR 0 7
26030: PUSH
26031: LD_VAR 0 18
26035: ADD
26036: ST_TO_ADDR
// end else
26037: GO 26180
// begin for i = 1 to personel do
26039: LD_ADDR_VAR 0 8
26043: PUSH
26044: DOUBLE
26045: LD_INT 1
26047: DEC
26048: ST_TO_ADDR
26049: LD_VAR 0 6
26053: PUSH
26054: FOR_TO
26055: IFFALSE 26178
// begin if i > 4 then
26057: LD_VAR 0 8
26061: PUSH
26062: LD_INT 4
26064: GREATER
26065: IFFALSE 26069
// break ;
26067: GO 26178
// x := personel [ i ] ;
26069: LD_ADDR_VAR 0 13
26073: PUSH
26074: LD_VAR 0 6
26078: PUSH
26079: LD_VAR 0 8
26083: ARRAY
26084: ST_TO_ADDR
// if x = - 1 then
26085: LD_VAR 0 13
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: EQUAL
26094: IFFALSE 26098
// continue ;
26096: GO 26054
// PrepareHuman ( false , i , skill ) ;
26098: LD_INT 0
26100: PPUSH
26101: LD_VAR 0 8
26105: PPUSH
26106: LD_VAR 0 4
26110: PPUSH
26111: CALL_OW 380
// un := CreateHuman ;
26115: LD_ADDR_VAR 0 14
26119: PUSH
26120: CALL_OW 44
26124: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26125: LD_VAR 0 14
26129: PPUSH
26130: LD_VAR 0 1
26134: PPUSH
26135: CALL_OW 250
26139: PPUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 251
26149: PPUSH
26150: LD_INT 10
26152: PPUSH
26153: LD_INT 0
26155: PPUSH
26156: CALL_OW 50
// result := result ^ un ;
26160: LD_ADDR_VAR 0 7
26164: PUSH
26165: LD_VAR 0 7
26169: PUSH
26170: LD_VAR 0 14
26174: ADD
26175: ST_TO_ADDR
// end ;
26176: GO 26054
26178: POP
26179: POP
// end ; end ;
26180: LD_VAR 0 7
26184: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26185: LD_INT 0
26187: PPUSH
26188: PPUSH
26189: PPUSH
26190: PPUSH
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
26195: PPUSH
26196: PPUSH
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
// result := false ;
26203: LD_ADDR_VAR 0 3
26207: PUSH
26208: LD_INT 0
26210: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26211: LD_VAR 0 1
26215: NOT
26216: IFTRUE 26241
26218: PUSH
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 266
26228: PUSH
26229: LD_INT 32
26231: PUSH
26232: LD_INT 33
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: IN
26239: NOT
26240: OR
26241: IFFALSE 26245
// exit ;
26243: GO 27380
// nat := GetNation ( tower ) ;
26245: LD_ADDR_VAR 0 12
26249: PUSH
26250: LD_VAR 0 1
26254: PPUSH
26255: CALL_OW 248
26259: ST_TO_ADDR
// side := GetSide ( tower ) ;
26260: LD_ADDR_VAR 0 16
26264: PUSH
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 255
26274: ST_TO_ADDR
// x := GetX ( tower ) ;
26275: LD_ADDR_VAR 0 10
26279: PUSH
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 250
26289: ST_TO_ADDR
// y := GetY ( tower ) ;
26290: LD_ADDR_VAR 0 11
26294: PUSH
26295: LD_VAR 0 1
26299: PPUSH
26300: CALL_OW 251
26304: ST_TO_ADDR
// if not x or not y then
26305: LD_VAR 0 10
26309: NOT
26310: IFTRUE 26319
26312: PUSH
26313: LD_VAR 0 11
26317: NOT
26318: OR
26319: IFFALSE 26323
// exit ;
26321: GO 27380
// weapon := 0 ;
26323: LD_ADDR_VAR 0 18
26327: PUSH
26328: LD_INT 0
26330: ST_TO_ADDR
// fac_list := [ ] ;
26331: LD_ADDR_VAR 0 17
26335: PUSH
26336: EMPTY
26337: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26338: LD_ADDR_VAR 0 6
26342: PUSH
26343: LD_VAR 0 1
26347: PPUSH
26348: CALL_OW 274
26352: PPUSH
26353: LD_VAR 0 2
26357: PPUSH
26358: LD_INT 0
26360: PPUSH
26361: CALL 23915 0 3
26365: PPUSH
26366: LD_INT 30
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 72
26380: ST_TO_ADDR
// if not factories then
26381: LD_VAR 0 6
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 27380
// for i in factories do
26390: LD_ADDR_VAR 0 8
26394: PUSH
26395: LD_VAR 0 6
26399: PUSH
26400: FOR_IN
26401: IFFALSE 26426
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26403: LD_ADDR_VAR 0 17
26407: PUSH
26408: LD_VAR 0 17
26412: PUSH
26413: LD_VAR 0 8
26417: PPUSH
26418: CALL_OW 478
26422: UNION
26423: ST_TO_ADDR
26424: GO 26400
26426: POP
26427: POP
// if not fac_list then
26428: LD_VAR 0 17
26432: NOT
26433: IFFALSE 26437
// exit ;
26435: GO 27380
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26437: LD_ADDR_VAR 0 5
26441: PUSH
26442: LD_INT 4
26444: PUSH
26445: LD_INT 5
26447: PUSH
26448: LD_INT 9
26450: PUSH
26451: LD_INT 10
26453: PUSH
26454: LD_INT 6
26456: PUSH
26457: LD_INT 7
26459: PUSH
26460: LD_INT 11
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 27
26474: PUSH
26475: LD_INT 28
26477: PUSH
26478: LD_INT 26
26480: PUSH
26481: LD_INT 30
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 43
26492: PUSH
26493: LD_INT 44
26495: PUSH
26496: LD_INT 46
26498: PUSH
26499: LD_INT 45
26501: PUSH
26502: LD_INT 47
26504: PUSH
26505: LD_INT 49
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: PUSH
26521: LD_VAR 0 12
26525: ARRAY
26526: ST_TO_ADDR
// list := list isect fac_list ;
26527: LD_ADDR_VAR 0 5
26531: PUSH
26532: LD_VAR 0 5
26536: PUSH
26537: LD_VAR 0 17
26541: ISECT
26542: ST_TO_ADDR
// if not list then
26543: LD_VAR 0 5
26547: NOT
26548: IFFALSE 26552
// exit ;
26550: GO 27380
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26552: LD_VAR 0 12
26556: PUSH
26557: LD_INT 3
26559: EQUAL
26560: IFFALSE 26572
26562: PUSH
26563: LD_INT 49
26565: PUSH
26566: LD_VAR 0 5
26570: IN
26571: AND
26572: IFFALSE 26592
26574: PUSH
26575: LD_INT 31
26577: PPUSH
26578: LD_VAR 0 16
26582: PPUSH
26583: CALL_OW 321
26587: PUSH
26588: LD_INT 2
26590: EQUAL
26591: AND
26592: IFFALSE 26652
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26594: LD_INT 22
26596: PUSH
26597: LD_VAR 0 16
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 35
26608: PUSH
26609: LD_INT 49
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 91
26618: PUSH
26619: LD_VAR 0 1
26623: PUSH
26624: LD_INT 10
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: LIST
26636: PPUSH
26637: CALL_OW 69
26641: NOT
26642: IFFALSE 26652
// weapon := ru_time_lapser ;
26644: LD_ADDR_VAR 0 18
26648: PUSH
26649: LD_INT 49
26651: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26652: LD_VAR 0 12
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: LD_INT 2
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: IN
26667: IFFALSE 26691
26669: PUSH
26670: LD_INT 11
26672: PUSH
26673: LD_VAR 0 5
26677: IN
26678: IFTRUE 26690
26680: PUSH
26681: LD_INT 30
26683: PUSH
26684: LD_VAR 0 5
26688: IN
26689: OR
26690: AND
26691: IFFALSE 26711
26693: PUSH
26694: LD_INT 6
26696: PPUSH
26697: LD_VAR 0 16
26701: PPUSH
26702: CALL_OW 321
26706: PUSH
26707: LD_INT 2
26709: EQUAL
26710: AND
26711: IFFALSE 26878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26713: LD_INT 22
26715: PUSH
26716: LD_VAR 0 16
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 35
26730: PUSH
26731: LD_INT 11
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 35
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 91
26755: PUSH
26756: LD_VAR 0 1
26760: PUSH
26761: LD_INT 18
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: PPUSH
26774: CALL_OW 69
26778: NOT
26779: IFFALSE 26855
26781: PUSH
26782: LD_INT 22
26784: PUSH
26785: LD_VAR 0 16
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 30
26799: PUSH
26800: LD_INT 32
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 30
26809: PUSH
26810: LD_INT 33
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 91
26824: PUSH
26825: LD_VAR 0 1
26829: PUSH
26830: LD_INT 12
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: PPUSH
26846: CALL_OW 69
26850: PUSH
26851: LD_INT 2
26853: GREATER
26854: AND
26855: IFFALSE 26878
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26857: LD_ADDR_VAR 0 18
26861: PUSH
26862: LD_INT 11
26864: PUSH
26865: LD_INT 30
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_VAR 0 12
26876: ARRAY
26877: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26878: LD_VAR 0 18
26882: NOT
26883: IFFALSE 26903
26885: PUSH
26886: LD_INT 40
26888: PPUSH
26889: LD_VAR 0 16
26893: PPUSH
26894: CALL_OW 321
26898: PUSH
26899: LD_INT 2
26901: EQUAL
26902: AND
26903: IFFALSE 26939
26905: PUSH
26906: LD_INT 7
26908: PUSH
26909: LD_VAR 0 5
26913: IN
26914: IFTRUE 26926
26916: PUSH
26917: LD_INT 28
26919: PUSH
26920: LD_VAR 0 5
26924: IN
26925: OR
26926: IFTRUE 26938
26928: PUSH
26929: LD_INT 45
26931: PUSH
26932: LD_VAR 0 5
26936: IN
26937: OR
26938: AND
26939: IFFALSE 27193
// begin hex := GetHexInfo ( x , y ) ;
26941: LD_ADDR_VAR 0 4
26945: PUSH
26946: LD_VAR 0 10
26950: PPUSH
26951: LD_VAR 0 11
26955: PPUSH
26956: CALL_OW 546
26960: ST_TO_ADDR
// if hex [ 1 ] then
26961: LD_VAR 0 4
26965: PUSH
26966: LD_INT 1
26968: ARRAY
26969: IFFALSE 26973
// exit ;
26971: GO 27380
// height := hex [ 2 ] ;
26973: LD_ADDR_VAR 0 15
26977: PUSH
26978: LD_VAR 0 4
26982: PUSH
26983: LD_INT 2
26985: ARRAY
26986: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26987: LD_ADDR_VAR 0 14
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 3
27000: PUSH
27001: LD_INT 5
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: ST_TO_ADDR
// for i in tmp do
27010: LD_ADDR_VAR 0 8
27014: PUSH
27015: LD_VAR 0 14
27019: PUSH
27020: FOR_IN
27021: IFFALSE 27191
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27023: LD_ADDR_VAR 0 9
27027: PUSH
27028: LD_VAR 0 10
27032: PPUSH
27033: LD_VAR 0 8
27037: PPUSH
27038: LD_INT 5
27040: PPUSH
27041: CALL_OW 272
27045: PUSH
27046: LD_VAR 0 11
27050: PPUSH
27051: LD_VAR 0 8
27055: PPUSH
27056: LD_INT 5
27058: PPUSH
27059: CALL_OW 273
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27068: LD_VAR 0 9
27072: PUSH
27073: LD_INT 1
27075: ARRAY
27076: PPUSH
27077: LD_VAR 0 9
27081: PUSH
27082: LD_INT 2
27084: ARRAY
27085: PPUSH
27086: CALL_OW 488
27090: IFFALSE 27189
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27092: LD_ADDR_VAR 0 4
27096: PUSH
27097: LD_VAR 0 9
27101: PUSH
27102: LD_INT 1
27104: ARRAY
27105: PPUSH
27106: LD_VAR 0 9
27110: PUSH
27111: LD_INT 2
27113: ARRAY
27114: PPUSH
27115: CALL_OW 546
27119: ST_TO_ADDR
// if hex [ 1 ] then
27120: LD_VAR 0 4
27124: PUSH
27125: LD_INT 1
27127: ARRAY
27128: IFFALSE 27132
// continue ;
27130: GO 27020
// h := hex [ 2 ] ;
27132: LD_ADDR_VAR 0 13
27136: PUSH
27137: LD_VAR 0 4
27141: PUSH
27142: LD_INT 2
27144: ARRAY
27145: ST_TO_ADDR
// if h + 7 < height then
27146: LD_VAR 0 13
27150: PUSH
27151: LD_INT 7
27153: PLUS
27154: PUSH
27155: LD_VAR 0 15
27159: LESS
27160: IFFALSE 27189
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27162: LD_ADDR_VAR 0 18
27166: PUSH
27167: LD_INT 7
27169: PUSH
27170: LD_INT 28
27172: PUSH
27173: LD_INT 45
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: PUSH
27181: LD_VAR 0 12
27185: ARRAY
27186: ST_TO_ADDR
// break ;
27187: GO 27191
// end ; end ; end ;
27189: GO 27020
27191: POP
27192: POP
// end ; if not weapon then
27193: LD_VAR 0 18
27197: NOT
27198: IFFALSE 27258
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27200: LD_ADDR_VAR 0 5
27204: PUSH
27205: LD_VAR 0 5
27209: PUSH
27210: LD_INT 11
27212: PUSH
27213: LD_INT 30
27215: PUSH
27216: LD_INT 49
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: DIFF
27224: ST_TO_ADDR
// if not list then
27225: LD_VAR 0 5
27229: NOT
27230: IFFALSE 27234
// exit ;
27232: GO 27380
// weapon := list [ rand ( 1 , list ) ] ;
27234: LD_ADDR_VAR 0 18
27238: PUSH
27239: LD_VAR 0 5
27243: PUSH
27244: LD_INT 1
27246: PPUSH
27247: LD_VAR 0 5
27251: PPUSH
27252: CALL_OW 12
27256: ARRAY
27257: ST_TO_ADDR
// end ; if weapon then
27258: LD_VAR 0 18
27262: IFFALSE 27380
// begin tmp := CostOfWeapon ( weapon ) ;
27264: LD_ADDR_VAR 0 14
27268: PUSH
27269: LD_VAR 0 18
27273: PPUSH
27274: CALL_OW 451
27278: ST_TO_ADDR
// j := GetBase ( tower ) ;
27279: LD_ADDR_VAR 0 9
27283: PUSH
27284: LD_VAR 0 1
27288: PPUSH
27289: CALL_OW 274
27293: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27294: LD_VAR 0 9
27298: PPUSH
27299: LD_INT 1
27301: PPUSH
27302: CALL_OW 275
27306: PUSH
27307: LD_VAR 0 14
27311: PUSH
27312: LD_INT 1
27314: ARRAY
27315: GREATEREQUAL
27316: IFFALSE 27342
27318: PUSH
27319: LD_VAR 0 9
27323: PPUSH
27324: LD_INT 2
27326: PPUSH
27327: CALL_OW 275
27331: PUSH
27332: LD_VAR 0 14
27336: PUSH
27337: LD_INT 2
27339: ARRAY
27340: GREATEREQUAL
27341: AND
27342: IFFALSE 27368
27344: PUSH
27345: LD_VAR 0 9
27349: PPUSH
27350: LD_INT 3
27352: PPUSH
27353: CALL_OW 275
27357: PUSH
27358: LD_VAR 0 14
27362: PUSH
27363: LD_INT 3
27365: ARRAY
27366: GREATEREQUAL
27367: AND
27368: IFFALSE 27380
// result := weapon ;
27370: LD_ADDR_VAR 0 3
27374: PUSH
27375: LD_VAR 0 18
27379: ST_TO_ADDR
// end ; end ;
27380: LD_VAR 0 3
27384: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27385: LD_INT 0
27387: PPUSH
27388: PPUSH
// result := true ;
27389: LD_ADDR_VAR 0 3
27393: PUSH
27394: LD_INT 1
27396: ST_TO_ADDR
// if array1 = array2 then
27397: LD_VAR 0 1
27401: PUSH
27402: LD_VAR 0 2
27406: EQUAL
27407: IFFALSE 27467
// begin for i = 1 to array1 do
27409: LD_ADDR_VAR 0 4
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_VAR 0 1
27423: PUSH
27424: FOR_TO
27425: IFFALSE 27463
// if array1 [ i ] <> array2 [ i ] then
27427: LD_VAR 0 1
27431: PUSH
27432: LD_VAR 0 4
27436: ARRAY
27437: PUSH
27438: LD_VAR 0 2
27442: PUSH
27443: LD_VAR 0 4
27447: ARRAY
27448: NONEQUAL
27449: IFFALSE 27461
// begin result := false ;
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 0
27458: ST_TO_ADDR
// break ;
27459: GO 27463
// end ;
27461: GO 27424
27463: POP
27464: POP
// end else
27465: GO 27475
// result := false ;
27467: LD_ADDR_VAR 0 3
27471: PUSH
27472: LD_INT 0
27474: ST_TO_ADDR
// end ;
27475: LD_VAR 0 3
27479: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27480: LD_INT 0
27482: PPUSH
27483: PPUSH
// if not array1 or not array2 then
27484: LD_VAR 0 1
27488: NOT
27489: IFTRUE 27498
27491: PUSH
27492: LD_VAR 0 2
27496: NOT
27497: OR
27498: IFFALSE 27502
// exit ;
27500: GO 27566
// result := true ;
27502: LD_ADDR_VAR 0 3
27506: PUSH
27507: LD_INT 1
27509: ST_TO_ADDR
// for i = 1 to array1 do
27510: LD_ADDR_VAR 0 4
27514: PUSH
27515: DOUBLE
27516: LD_INT 1
27518: DEC
27519: ST_TO_ADDR
27520: LD_VAR 0 1
27524: PUSH
27525: FOR_TO
27526: IFFALSE 27564
// if array1 [ i ] <> array2 [ i ] then
27528: LD_VAR 0 1
27532: PUSH
27533: LD_VAR 0 4
27537: ARRAY
27538: PUSH
27539: LD_VAR 0 2
27543: PUSH
27544: LD_VAR 0 4
27548: ARRAY
27549: NONEQUAL
27550: IFFALSE 27562
// begin result := false ;
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: LD_INT 0
27559: ST_TO_ADDR
// break ;
27560: GO 27564
// end ;
27562: GO 27525
27564: POP
27565: POP
// end ;
27566: LD_VAR 0 3
27570: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27571: LD_INT 0
27573: PPUSH
27574: PPUSH
27575: PPUSH
// pom := GetBase ( fac ) ;
27576: LD_ADDR_VAR 0 5
27580: PUSH
27581: LD_VAR 0 1
27585: PPUSH
27586: CALL_OW 274
27590: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27591: LD_ADDR_VAR 0 4
27595: PUSH
27596: LD_VAR 0 2
27600: PUSH
27601: LD_INT 1
27603: ARRAY
27604: PPUSH
27605: LD_VAR 0 2
27609: PUSH
27610: LD_INT 2
27612: ARRAY
27613: PPUSH
27614: LD_VAR 0 2
27618: PUSH
27619: LD_INT 3
27621: ARRAY
27622: PPUSH
27623: LD_VAR 0 2
27627: PUSH
27628: LD_INT 4
27630: ARRAY
27631: PPUSH
27632: CALL_OW 449
27636: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27637: LD_ADDR_VAR 0 3
27641: PUSH
27642: LD_VAR 0 5
27646: PPUSH
27647: LD_INT 1
27649: PPUSH
27650: CALL_OW 275
27654: PUSH
27655: LD_VAR 0 4
27659: PUSH
27660: LD_INT 1
27662: ARRAY
27663: GREATEREQUAL
27664: IFFALSE 27690
27666: PUSH
27667: LD_VAR 0 5
27671: PPUSH
27672: LD_INT 2
27674: PPUSH
27675: CALL_OW 275
27679: PUSH
27680: LD_VAR 0 4
27684: PUSH
27685: LD_INT 2
27687: ARRAY
27688: GREATEREQUAL
27689: AND
27690: IFFALSE 27716
27692: PUSH
27693: LD_VAR 0 5
27697: PPUSH
27698: LD_INT 3
27700: PPUSH
27701: CALL_OW 275
27705: PUSH
27706: LD_VAR 0 4
27710: PUSH
27711: LD_INT 3
27713: ARRAY
27714: GREATEREQUAL
27715: AND
27716: ST_TO_ADDR
// end ;
27717: LD_VAR 0 3
27721: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27722: LD_INT 0
27724: PPUSH
27725: PPUSH
27726: PPUSH
27727: PPUSH
// pom := GetBase ( building ) ;
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: LD_VAR 0 1
27737: PPUSH
27738: CALL_OW 274
27742: ST_TO_ADDR
// if not pom then
27743: LD_VAR 0 3
27747: NOT
27748: IFFALSE 27752
// exit ;
27750: GO 27926
// btype := GetBType ( building ) ;
27752: LD_ADDR_VAR 0 5
27756: PUSH
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 266
27766: ST_TO_ADDR
// if btype = b_armoury then
27767: LD_VAR 0 5
27771: PUSH
27772: LD_INT 4
27774: EQUAL
27775: IFFALSE 27785
// btype := b_barracks ;
27777: LD_ADDR_VAR 0 5
27781: PUSH
27782: LD_INT 5
27784: ST_TO_ADDR
// if btype = b_depot then
27785: LD_VAR 0 5
27789: PUSH
27790: LD_INT 0
27792: EQUAL
27793: IFFALSE 27803
// btype := b_warehouse ;
27795: LD_ADDR_VAR 0 5
27799: PUSH
27800: LD_INT 1
27802: ST_TO_ADDR
// if btype = b_workshop then
27803: LD_VAR 0 5
27807: PUSH
27808: LD_INT 2
27810: EQUAL
27811: IFFALSE 27821
// btype := b_factory ;
27813: LD_ADDR_VAR 0 5
27817: PUSH
27818: LD_INT 3
27820: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27821: LD_ADDR_VAR 0 4
27825: PUSH
27826: LD_VAR 0 5
27830: PPUSH
27831: LD_VAR 0 1
27835: PPUSH
27836: CALL_OW 248
27840: PPUSH
27841: CALL_OW 450
27845: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27846: LD_ADDR_VAR 0 2
27850: PUSH
27851: LD_VAR 0 3
27855: PPUSH
27856: LD_INT 1
27858: PPUSH
27859: CALL_OW 275
27863: PUSH
27864: LD_VAR 0 4
27868: PUSH
27869: LD_INT 1
27871: ARRAY
27872: GREATEREQUAL
27873: IFFALSE 27899
27875: PUSH
27876: LD_VAR 0 3
27880: PPUSH
27881: LD_INT 2
27883: PPUSH
27884: CALL_OW 275
27888: PUSH
27889: LD_VAR 0 4
27893: PUSH
27894: LD_INT 2
27896: ARRAY
27897: GREATEREQUAL
27898: AND
27899: IFFALSE 27925
27901: PUSH
27902: LD_VAR 0 3
27906: PPUSH
27907: LD_INT 3
27909: PPUSH
27910: CALL_OW 275
27914: PUSH
27915: LD_VAR 0 4
27919: PUSH
27920: LD_INT 3
27922: ARRAY
27923: GREATEREQUAL
27924: AND
27925: ST_TO_ADDR
// end ;
27926: LD_VAR 0 2
27930: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27931: LD_INT 0
27933: PPUSH
27934: PPUSH
27935: PPUSH
// pom := GetBase ( building ) ;
27936: LD_ADDR_VAR 0 4
27940: PUSH
27941: LD_VAR 0 1
27945: PPUSH
27946: CALL_OW 274
27950: ST_TO_ADDR
// if not pom then
27951: LD_VAR 0 4
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 28065
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27960: LD_ADDR_VAR 0 5
27964: PUSH
27965: LD_VAR 0 2
27969: PPUSH
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL_OW 248
27979: PPUSH
27980: CALL_OW 450
27984: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27985: LD_ADDR_VAR 0 3
27989: PUSH
27990: LD_VAR 0 4
27994: PPUSH
27995: LD_INT 1
27997: PPUSH
27998: CALL_OW 275
28002: PUSH
28003: LD_VAR 0 5
28007: PUSH
28008: LD_INT 1
28010: ARRAY
28011: GREATEREQUAL
28012: IFFALSE 28038
28014: PUSH
28015: LD_VAR 0 4
28019: PPUSH
28020: LD_INT 2
28022: PPUSH
28023: CALL_OW 275
28027: PUSH
28028: LD_VAR 0 5
28032: PUSH
28033: LD_INT 2
28035: ARRAY
28036: GREATEREQUAL
28037: AND
28038: IFFALSE 28064
28040: PUSH
28041: LD_VAR 0 4
28045: PPUSH
28046: LD_INT 3
28048: PPUSH
28049: CALL_OW 275
28053: PUSH
28054: LD_VAR 0 5
28058: PUSH
28059: LD_INT 3
28061: ARRAY
28062: GREATEREQUAL
28063: AND
28064: ST_TO_ADDR
// end ;
28065: LD_VAR 0 3
28069: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28070: LD_INT 0
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
28076: PPUSH
28077: PPUSH
28078: PPUSH
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
// result := false ;
28083: LD_ADDR_VAR 0 8
28087: PUSH
28088: LD_INT 0
28090: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28091: LD_VAR 0 5
28095: NOT
28096: IFTRUE 28105
28098: PUSH
28099: LD_VAR 0 1
28103: NOT
28104: OR
28105: IFTRUE 28114
28107: PUSH
28108: LD_VAR 0 2
28112: NOT
28113: OR
28114: IFTRUE 28123
28116: PUSH
28117: LD_VAR 0 3
28121: NOT
28122: OR
28123: IFFALSE 28127
// exit ;
28125: GO 28953
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28127: LD_ADDR_VAR 0 14
28131: PUSH
28132: LD_VAR 0 1
28136: PPUSH
28137: LD_VAR 0 2
28141: PPUSH
28142: LD_VAR 0 3
28146: PPUSH
28147: LD_VAR 0 4
28151: PPUSH
28152: LD_VAR 0 5
28156: PUSH
28157: LD_INT 1
28159: ARRAY
28160: PPUSH
28161: CALL_OW 248
28165: PPUSH
28166: LD_INT 0
28168: PPUSH
28169: CALL 30234 0 6
28173: ST_TO_ADDR
// if not hexes then
28174: LD_VAR 0 14
28178: NOT
28179: IFFALSE 28183
// exit ;
28181: GO 28953
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28183: LD_ADDR_VAR 0 17
28187: PUSH
28188: LD_VAR 0 5
28192: PPUSH
28193: LD_INT 22
28195: PUSH
28196: LD_VAR 0 13
28200: PPUSH
28201: CALL_OW 255
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: LD_INT 30
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 30
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PPUSH
28242: CALL_OW 72
28246: ST_TO_ADDR
// for i = 1 to hexes do
28247: LD_ADDR_VAR 0 9
28251: PUSH
28252: DOUBLE
28253: LD_INT 1
28255: DEC
28256: ST_TO_ADDR
28257: LD_VAR 0 14
28261: PUSH
28262: FOR_TO
28263: IFFALSE 28951
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28265: LD_ADDR_VAR 0 13
28269: PUSH
28270: LD_VAR 0 14
28274: PUSH
28275: LD_VAR 0 9
28279: ARRAY
28280: PUSH
28281: LD_INT 1
28283: ARRAY
28284: PPUSH
28285: LD_VAR 0 14
28289: PUSH
28290: LD_VAR 0 9
28294: ARRAY
28295: PUSH
28296: LD_INT 2
28298: ARRAY
28299: PPUSH
28300: CALL_OW 428
28304: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28305: LD_VAR 0 14
28309: PUSH
28310: LD_VAR 0 9
28314: ARRAY
28315: PUSH
28316: LD_INT 1
28318: ARRAY
28319: PPUSH
28320: LD_VAR 0 14
28324: PUSH
28325: LD_VAR 0 9
28329: ARRAY
28330: PUSH
28331: LD_INT 2
28333: ARRAY
28334: PPUSH
28335: CALL_OW 351
28339: IFTRUE 28378
28341: PUSH
28342: LD_VAR 0 14
28346: PUSH
28347: LD_VAR 0 9
28351: ARRAY
28352: PUSH
28353: LD_INT 1
28355: ARRAY
28356: PPUSH
28357: LD_VAR 0 14
28361: PUSH
28362: LD_VAR 0 9
28366: ARRAY
28367: PUSH
28368: LD_INT 2
28370: ARRAY
28371: PPUSH
28372: CALL_OW 488
28376: NOT
28377: OR
28378: IFTRUE 28395
28380: PUSH
28381: LD_VAR 0 13
28385: PPUSH
28386: CALL_OW 247
28390: PUSH
28391: LD_INT 3
28393: EQUAL
28394: OR
28395: IFFALSE 28401
// exit ;
28397: POP
28398: POP
28399: GO 28953
// if not tmp then
28401: LD_VAR 0 13
28405: NOT
28406: IFFALSE 28410
// continue ;
28408: GO 28262
// result := true ;
28410: LD_ADDR_VAR 0 8
28414: PUSH
28415: LD_INT 1
28417: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28418: LD_VAR 0 6
28422: IFFALSE 28439
28424: PUSH
28425: LD_VAR 0 13
28429: PPUSH
28430: CALL_OW 247
28434: PUSH
28435: LD_INT 2
28437: EQUAL
28438: AND
28439: IFFALSE 28456
28441: PUSH
28442: LD_VAR 0 13
28446: PPUSH
28447: CALL_OW 263
28451: PUSH
28452: LD_INT 1
28454: EQUAL
28455: AND
28456: IFFALSE 28620
// begin if IsDrivenBy ( tmp ) then
28458: LD_VAR 0 13
28462: PPUSH
28463: CALL_OW 311
28467: IFFALSE 28471
// continue ;
28469: GO 28262
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28471: LD_VAR 0 6
28475: PPUSH
28476: LD_INT 3
28478: PUSH
28479: LD_INT 60
28481: PUSH
28482: EMPTY
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 3
28491: PUSH
28492: LD_INT 55
28494: PUSH
28495: EMPTY
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PPUSH
28506: CALL_OW 72
28510: IFFALSE 28618
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28512: LD_ADDR_VAR 0 18
28516: PUSH
28517: LD_VAR 0 6
28521: PPUSH
28522: LD_INT 3
28524: PUSH
28525: LD_INT 60
28527: PUSH
28528: EMPTY
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 3
28537: PUSH
28538: LD_INT 55
28540: PUSH
28541: EMPTY
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PPUSH
28552: CALL_OW 72
28556: PUSH
28557: LD_INT 1
28559: ARRAY
28560: ST_TO_ADDR
// if IsInUnit ( driver ) then
28561: LD_VAR 0 18
28565: PPUSH
28566: CALL_OW 310
28570: IFFALSE 28581
// ComExit ( driver ) ;
28572: LD_VAR 0 18
28576: PPUSH
28577: CALL 54224 0 1
// AddComEnterUnit ( driver , tmp ) ;
28581: LD_VAR 0 18
28585: PPUSH
28586: LD_VAR 0 13
28590: PPUSH
28591: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28595: LD_VAR 0 18
28599: PPUSH
28600: LD_VAR 0 7
28604: PPUSH
28605: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28609: LD_VAR 0 18
28613: PPUSH
28614: CALL_OW 181
// end ; continue ;
28618: GO 28262
// end ; if not cleaners or not tmp in cleaners then
28620: LD_VAR 0 6
28624: NOT
28625: IFTRUE 28640
28627: PUSH
28628: LD_VAR 0 13
28632: PUSH
28633: LD_VAR 0 6
28637: IN
28638: NOT
28639: OR
28640: IFFALSE 28949
// begin if dep then
28642: LD_VAR 0 17
28646: IFFALSE 28782
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28648: LD_ADDR_VAR 0 16
28652: PUSH
28653: LD_VAR 0 17
28657: PUSH
28658: LD_INT 1
28660: ARRAY
28661: PPUSH
28662: CALL_OW 250
28666: PPUSH
28667: LD_VAR 0 17
28671: PUSH
28672: LD_INT 1
28674: ARRAY
28675: PPUSH
28676: CALL_OW 254
28680: PPUSH
28681: LD_INT 5
28683: PPUSH
28684: CALL_OW 272
28688: PUSH
28689: LD_VAR 0 17
28693: PUSH
28694: LD_INT 1
28696: ARRAY
28697: PPUSH
28698: CALL_OW 251
28702: PPUSH
28703: LD_VAR 0 17
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: CALL_OW 254
28716: PPUSH
28717: LD_INT 5
28719: PPUSH
28720: CALL_OW 273
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28729: LD_VAR 0 16
28733: PUSH
28734: LD_INT 1
28736: ARRAY
28737: PPUSH
28738: LD_VAR 0 16
28742: PUSH
28743: LD_INT 2
28745: ARRAY
28746: PPUSH
28747: CALL_OW 488
28751: IFFALSE 28782
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28753: LD_VAR 0 13
28757: PPUSH
28758: LD_VAR 0 16
28762: PUSH
28763: LD_INT 1
28765: ARRAY
28766: PPUSH
28767: LD_VAR 0 16
28771: PUSH
28772: LD_INT 2
28774: ARRAY
28775: PPUSH
28776: CALL_OW 111
// continue ;
28780: GO 28262
// end ; end ; r := GetDir ( tmp ) ;
28782: LD_ADDR_VAR 0 15
28786: PUSH
28787: LD_VAR 0 13
28791: PPUSH
28792: CALL_OW 254
28796: ST_TO_ADDR
// if r = 5 then
28797: LD_VAR 0 15
28801: PUSH
28802: LD_INT 5
28804: EQUAL
28805: IFFALSE 28815
// r := 0 ;
28807: LD_ADDR_VAR 0 15
28811: PUSH
28812: LD_INT 0
28814: ST_TO_ADDR
// for j = r to 5 do
28815: LD_ADDR_VAR 0 10
28819: PUSH
28820: DOUBLE
28821: LD_VAR 0 15
28825: DEC
28826: ST_TO_ADDR
28827: LD_INT 5
28829: PUSH
28830: FOR_TO
28831: IFFALSE 28947
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28833: LD_ADDR_VAR 0 11
28837: PUSH
28838: LD_VAR 0 13
28842: PPUSH
28843: CALL_OW 250
28847: PPUSH
28848: LD_VAR 0 10
28852: PPUSH
28853: LD_INT 2
28855: PPUSH
28856: CALL_OW 272
28860: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28861: LD_ADDR_VAR 0 12
28865: PUSH
28866: LD_VAR 0 13
28870: PPUSH
28871: CALL_OW 251
28875: PPUSH
28876: LD_VAR 0 10
28880: PPUSH
28881: LD_INT 2
28883: PPUSH
28884: CALL_OW 273
28888: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28889: LD_VAR 0 11
28893: PPUSH
28894: LD_VAR 0 12
28898: PPUSH
28899: CALL_OW 488
28903: IFFALSE 28922
28905: PUSH
28906: LD_VAR 0 11
28910: PPUSH
28911: LD_VAR 0 12
28915: PPUSH
28916: CALL_OW 428
28920: NOT
28921: AND
28922: IFFALSE 28945
// begin ComMoveXY ( tmp , _x , _y ) ;
28924: LD_VAR 0 13
28928: PPUSH
28929: LD_VAR 0 11
28933: PPUSH
28934: LD_VAR 0 12
28938: PPUSH
28939: CALL_OW 111
// break ;
28943: GO 28947
// end ; end ;
28945: GO 28830
28947: POP
28948: POP
// end ; end ;
28949: GO 28262
28951: POP
28952: POP
// end ;
28953: LD_VAR 0 8
28957: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28958: LD_INT 0
28960: PPUSH
// result := true ;
28961: LD_ADDR_VAR 0 3
28965: PUSH
28966: LD_INT 1
28968: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28969: LD_VAR 0 2
28973: PUSH
28974: LD_INT 24
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28988
28980: LD_INT 33
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28988
28986: GO 29013
28988: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28989: LD_ADDR_VAR 0 3
28993: PUSH
28994: LD_INT 32
28996: PPUSH
28997: LD_VAR 0 1
29001: PPUSH
29002: CALL_OW 321
29006: PUSH
29007: LD_INT 2
29009: EQUAL
29010: ST_TO_ADDR
29011: GO 29329
29013: LD_INT 20
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29046
29021: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_INT 6
29029: PPUSH
29030: LD_VAR 0 1
29034: PPUSH
29035: CALL_OW 321
29039: PUSH
29040: LD_INT 2
29042: EQUAL
29043: ST_TO_ADDR
29044: GO 29329
29046: LD_INT 22
29048: DOUBLE
29049: EQUAL
29050: IFTRUE 29060
29052: LD_INT 36
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29060
29058: GO 29085
29060: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_INT 15
29068: PPUSH
29069: LD_VAR 0 1
29073: PPUSH
29074: CALL_OW 321
29078: PUSH
29079: LD_INT 2
29081: EQUAL
29082: ST_TO_ADDR
29083: GO 29329
29085: LD_INT 30
29087: DOUBLE
29088: EQUAL
29089: IFTRUE 29093
29091: GO 29118
29093: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29094: LD_ADDR_VAR 0 3
29098: PUSH
29099: LD_INT 20
29101: PPUSH
29102: LD_VAR 0 1
29106: PPUSH
29107: CALL_OW 321
29111: PUSH
29112: LD_INT 2
29114: EQUAL
29115: ST_TO_ADDR
29116: GO 29329
29118: LD_INT 28
29120: DOUBLE
29121: EQUAL
29122: IFTRUE 29132
29124: LD_INT 21
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 29157
29132: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_INT 21
29140: PPUSH
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL_OW 321
29150: PUSH
29151: LD_INT 2
29153: EQUAL
29154: ST_TO_ADDR
29155: GO 29329
29157: LD_INT 16
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29190
29165: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_INT 84
29173: PPUSH
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 321
29183: PUSH
29184: LD_INT 2
29186: EQUAL
29187: ST_TO_ADDR
29188: GO 29329
29190: LD_INT 19
29192: DOUBLE
29193: EQUAL
29194: IFTRUE 29204
29196: LD_INT 23
29198: DOUBLE
29199: EQUAL
29200: IFTRUE 29204
29202: GO 29229
29204: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29205: LD_ADDR_VAR 0 3
29209: PUSH
29210: LD_INT 83
29212: PPUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 321
29222: PUSH
29223: LD_INT 2
29225: EQUAL
29226: ST_TO_ADDR
29227: GO 29329
29229: LD_INT 17
29231: DOUBLE
29232: EQUAL
29233: IFTRUE 29237
29235: GO 29262
29237: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29238: LD_ADDR_VAR 0 3
29242: PUSH
29243: LD_INT 39
29245: PPUSH
29246: LD_VAR 0 1
29250: PPUSH
29251: CALL_OW 321
29255: PUSH
29256: LD_INT 2
29258: EQUAL
29259: ST_TO_ADDR
29260: GO 29329
29262: LD_INT 18
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29295
29270: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29271: LD_ADDR_VAR 0 3
29275: PUSH
29276: LD_INT 40
29278: PPUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 321
29288: PUSH
29289: LD_INT 2
29291: EQUAL
29292: ST_TO_ADDR
29293: GO 29329
29295: LD_INT 27
29297: DOUBLE
29298: EQUAL
29299: IFTRUE 29303
29301: GO 29328
29303: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_INT 35
29311: PPUSH
29312: LD_VAR 0 1
29316: PPUSH
29317: CALL_OW 321
29321: PUSH
29322: LD_INT 2
29324: EQUAL
29325: ST_TO_ADDR
29326: GO 29329
29328: POP
// end ;
29329: LD_VAR 0 3
29333: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29334: LD_INT 0
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
// result := false ;
29347: LD_ADDR_VAR 0 6
29351: PUSH
29352: LD_INT 0
29354: ST_TO_ADDR
// if btype = b_depot then
29355: LD_VAR 0 2
29359: PUSH
29360: LD_INT 0
29362: EQUAL
29363: IFFALSE 29375
// begin result := true ;
29365: LD_ADDR_VAR 0 6
29369: PUSH
29370: LD_INT 1
29372: ST_TO_ADDR
// exit ;
29373: GO 30229
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29375: LD_VAR 0 1
29379: NOT
29380: IFTRUE 29405
29382: PUSH
29383: LD_VAR 0 1
29387: PPUSH
29388: CALL_OW 266
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: IN
29403: NOT
29404: OR
29405: IFTRUE 29414
29407: PUSH
29408: LD_VAR 0 2
29412: NOT
29413: OR
29414: IFTRUE 29450
29416: PUSH
29417: LD_VAR 0 5
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 2
29430: PUSH
29431: LD_INT 3
29433: PUSH
29434: LD_INT 4
29436: PUSH
29437: LD_INT 5
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: IN
29448: NOT
29449: OR
29450: IFTRUE 29469
29452: PUSH
29453: LD_VAR 0 3
29457: PPUSH
29458: LD_VAR 0 4
29462: PPUSH
29463: CALL_OW 488
29467: NOT
29468: OR
29469: IFFALSE 29473
// exit ;
29471: GO 30229
// side := GetSide ( depot ) ;
29473: LD_ADDR_VAR 0 9
29477: PUSH
29478: LD_VAR 0 1
29482: PPUSH
29483: CALL_OW 255
29487: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29488: LD_VAR 0 9
29492: PPUSH
29493: LD_VAR 0 2
29497: PPUSH
29498: CALL 28958 0 2
29502: NOT
29503: IFFALSE 29507
// exit ;
29505: GO 30229
// pom := GetBase ( depot ) ;
29507: LD_ADDR_VAR 0 10
29511: PUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL_OW 274
29521: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29522: LD_ADDR_VAR 0 11
29526: PUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: LD_VAR 0 1
29536: PPUSH
29537: CALL_OW 248
29541: PPUSH
29542: CALL_OW 450
29546: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29547: LD_VAR 0 10
29551: PPUSH
29552: LD_INT 1
29554: PPUSH
29555: CALL_OW 275
29559: PUSH
29560: LD_VAR 0 11
29564: PUSH
29565: LD_INT 1
29567: ARRAY
29568: GREATEREQUAL
29569: IFFALSE 29595
29571: PUSH
29572: LD_VAR 0 10
29576: PPUSH
29577: LD_INT 2
29579: PPUSH
29580: CALL_OW 275
29584: PUSH
29585: LD_VAR 0 11
29589: PUSH
29590: LD_INT 2
29592: ARRAY
29593: GREATEREQUAL
29594: AND
29595: IFFALSE 29621
29597: PUSH
29598: LD_VAR 0 10
29602: PPUSH
29603: LD_INT 3
29605: PPUSH
29606: CALL_OW 275
29610: PUSH
29611: LD_VAR 0 11
29615: PUSH
29616: LD_INT 3
29618: ARRAY
29619: GREATEREQUAL
29620: AND
29621: NOT
29622: IFFALSE 29626
// exit ;
29624: GO 30229
// if GetBType ( depot ) = b_depot then
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 266
29635: PUSH
29636: LD_INT 0
29638: EQUAL
29639: IFFALSE 29651
// dist := 28 else
29641: LD_ADDR_VAR 0 14
29645: PUSH
29646: LD_INT 28
29648: ST_TO_ADDR
29649: GO 29659
// dist := 36 ;
29651: LD_ADDR_VAR 0 14
29655: PUSH
29656: LD_INT 36
29658: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29659: LD_VAR 0 1
29663: PPUSH
29664: LD_VAR 0 3
29668: PPUSH
29669: LD_VAR 0 4
29673: PPUSH
29674: CALL_OW 297
29678: PUSH
29679: LD_VAR 0 14
29683: GREATER
29684: IFFALSE 29688
// exit ;
29686: GO 30229
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29688: LD_ADDR_VAR 0 12
29692: PUSH
29693: LD_VAR 0 2
29697: PPUSH
29698: LD_VAR 0 3
29702: PPUSH
29703: LD_VAR 0 4
29707: PPUSH
29708: LD_VAR 0 5
29712: PPUSH
29713: LD_VAR 0 1
29717: PPUSH
29718: CALL_OW 248
29722: PPUSH
29723: LD_INT 0
29725: PPUSH
29726: CALL 30234 0 6
29730: ST_TO_ADDR
// if not hexes then
29731: LD_VAR 0 12
29735: NOT
29736: IFFALSE 29740
// exit ;
29738: GO 30229
// hex := GetHexInfo ( x , y ) ;
29740: LD_ADDR_VAR 0 15
29744: PUSH
29745: LD_VAR 0 3
29749: PPUSH
29750: LD_VAR 0 4
29754: PPUSH
29755: CALL_OW 546
29759: ST_TO_ADDR
// if hex [ 1 ] then
29760: LD_VAR 0 15
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: IFFALSE 29772
// exit ;
29770: GO 30229
// height := hex [ 2 ] ;
29772: LD_ADDR_VAR 0 13
29776: PUSH
29777: LD_VAR 0 15
29781: PUSH
29782: LD_INT 2
29784: ARRAY
29785: ST_TO_ADDR
// for i = 1 to hexes do
29786: LD_ADDR_VAR 0 7
29790: PUSH
29791: DOUBLE
29792: LD_INT 1
29794: DEC
29795: ST_TO_ADDR
29796: LD_VAR 0 12
29800: PUSH
29801: FOR_TO
29802: IFFALSE 30146
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29804: LD_VAR 0 12
29808: PUSH
29809: LD_VAR 0 7
29813: ARRAY
29814: PUSH
29815: LD_INT 1
29817: ARRAY
29818: PPUSH
29819: LD_VAR 0 12
29823: PUSH
29824: LD_VAR 0 7
29828: ARRAY
29829: PUSH
29830: LD_INT 2
29832: ARRAY
29833: PPUSH
29834: CALL_OW 488
29838: NOT
29839: IFTRUE 29881
29841: PUSH
29842: LD_VAR 0 12
29846: PUSH
29847: LD_VAR 0 7
29851: ARRAY
29852: PUSH
29853: LD_INT 1
29855: ARRAY
29856: PPUSH
29857: LD_VAR 0 12
29861: PUSH
29862: LD_VAR 0 7
29866: ARRAY
29867: PUSH
29868: LD_INT 2
29870: ARRAY
29871: PPUSH
29872: CALL_OW 428
29876: PUSH
29877: LD_INT 0
29879: GREATER
29880: OR
29881: IFTRUE 29919
29883: PUSH
29884: LD_VAR 0 12
29888: PUSH
29889: LD_VAR 0 7
29893: ARRAY
29894: PUSH
29895: LD_INT 1
29897: ARRAY
29898: PPUSH
29899: LD_VAR 0 12
29903: PUSH
29904: LD_VAR 0 7
29908: ARRAY
29909: PUSH
29910: LD_INT 2
29912: ARRAY
29913: PPUSH
29914: CALL_OW 351
29918: OR
29919: IFFALSE 29925
// exit ;
29921: POP
29922: POP
29923: GO 30229
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29925: LD_ADDR_VAR 0 8
29929: PUSH
29930: LD_VAR 0 12
29934: PUSH
29935: LD_VAR 0 7
29939: ARRAY
29940: PUSH
29941: LD_INT 1
29943: ARRAY
29944: PPUSH
29945: LD_VAR 0 12
29949: PUSH
29950: LD_VAR 0 7
29954: ARRAY
29955: PUSH
29956: LD_INT 2
29958: ARRAY
29959: PPUSH
29960: CALL_OW 546
29964: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29965: LD_VAR 0 8
29969: PUSH
29970: LD_INT 1
29972: ARRAY
29973: IFTRUE 29995
29975: PUSH
29976: LD_VAR 0 8
29980: PUSH
29981: LD_INT 2
29983: ARRAY
29984: PUSH
29985: LD_VAR 0 13
29989: PUSH
29990: LD_INT 2
29992: PLUS
29993: GREATER
29994: OR
29995: IFTRUE 30017
29997: PUSH
29998: LD_VAR 0 8
30002: PUSH
30003: LD_INT 2
30005: ARRAY
30006: PUSH
30007: LD_VAR 0 13
30011: PUSH
30012: LD_INT 2
30014: MINUS
30015: LESS
30016: OR
30017: IFTRUE 30085
30019: PUSH
30020: LD_VAR 0 8
30024: PUSH
30025: LD_INT 3
30027: ARRAY
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 8
30034: PUSH
30035: LD_INT 9
30037: PUSH
30038: LD_INT 10
30040: PUSH
30041: LD_INT 11
30043: PUSH
30044: LD_INT 12
30046: PUSH
30047: LD_INT 13
30049: PUSH
30050: LD_INT 16
30052: PUSH
30053: LD_INT 17
30055: PUSH
30056: LD_INT 18
30058: PUSH
30059: LD_INT 19
30061: PUSH
30062: LD_INT 20
30064: PUSH
30065: LD_INT 21
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: IN
30083: NOT
30084: OR
30085: IFTRUE 30098
30087: PUSH
30088: LD_VAR 0 8
30092: PUSH
30093: LD_INT 5
30095: ARRAY
30096: NOT
30097: OR
30098: IFTRUE 30138
30100: PUSH
30101: LD_VAR 0 8
30105: PUSH
30106: LD_INT 6
30108: ARRAY
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: LD_INT 2
30115: PUSH
30116: LD_INT 7
30118: PUSH
30119: LD_INT 9
30121: PUSH
30122: LD_INT 10
30124: PUSH
30125: LD_INT 11
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: IN
30136: NOT
30137: OR
30138: IFFALSE 30144
// exit ;
30140: POP
30141: POP
30142: GO 30229
// end ;
30144: GO 29801
30146: POP
30147: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30148: LD_VAR 0 9
30152: PPUSH
30153: LD_VAR 0 3
30157: PPUSH
30158: LD_VAR 0 4
30162: PPUSH
30163: LD_INT 20
30165: PPUSH
30166: CALL 22048 0 4
30170: PUSH
30171: LD_INT 4
30173: ARRAY
30174: IFFALSE 30178
// exit ;
30176: GO 30229
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30178: LD_VAR 0 2
30182: PUSH
30183: LD_INT 29
30185: PUSH
30186: LD_INT 30
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: IN
30193: IFFALSE 30217
30195: PUSH
30196: LD_VAR 0 3
30200: PPUSH
30201: LD_VAR 0 4
30205: PPUSH
30206: LD_VAR 0 9
30210: PPUSH
30211: CALL_OW 440
30215: NOT
30216: AND
30217: IFFALSE 30221
// exit ;
30219: GO 30229
// result := true ;
30221: LD_ADDR_VAR 0 6
30225: PUSH
30226: LD_INT 1
30228: ST_TO_ADDR
// end ;
30229: LD_VAR 0 6
30233: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30234: LD_INT 0
30236: PPUSH
30237: PPUSH
30238: PPUSH
30239: PPUSH
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
// result = [ ] ;
30294: LD_ADDR_VAR 0 7
30298: PUSH
30299: EMPTY
30300: ST_TO_ADDR
// temp_list = [ ] ;
30301: LD_ADDR_VAR 0 9
30305: PUSH
30306: EMPTY
30307: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30308: LD_VAR 0 4
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: LD_INT 4
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: IN
30339: NOT
30340: IFTRUE 30383
30342: PUSH
30343: LD_VAR 0 1
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: IN
30358: IFFALSE 30382
30360: PUSH
30361: LD_VAR 0 5
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: IN
30380: NOT
30381: AND
30382: OR
30383: IFFALSE 30387
// exit ;
30385: GO 48786
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30387: LD_VAR 0 1
30391: PUSH
30392: LD_INT 6
30394: PUSH
30395: LD_INT 7
30397: PUSH
30398: LD_INT 8
30400: PUSH
30401: LD_INT 13
30403: PUSH
30404: LD_INT 12
30406: PUSH
30407: LD_INT 15
30409: PUSH
30410: LD_INT 11
30412: PUSH
30413: LD_INT 14
30415: PUSH
30416: LD_INT 10
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: IN
30430: IFFALSE 30440
// btype = b_lab ;
30432: LD_ADDR_VAR 0 1
30436: PUSH
30437: LD_INT 6
30439: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30440: LD_VAR 0 6
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: IN
30459: NOT
30460: IFTRUE 30528
30462: PUSH
30463: LD_VAR 0 1
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: LD_INT 3
30479: PUSH
30480: LD_INT 6
30482: PUSH
30483: LD_INT 36
30485: PUSH
30486: LD_INT 4
30488: PUSH
30489: LD_INT 5
30491: PUSH
30492: LD_INT 31
30494: PUSH
30495: LD_INT 32
30497: PUSH
30498: LD_INT 33
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: IN
30514: NOT
30515: IFFALSE 30527
30517: PUSH
30518: LD_VAR 0 6
30522: PUSH
30523: LD_INT 1
30525: EQUAL
30526: AND
30527: OR
30528: IFTRUE 30560
30530: PUSH
30531: LD_VAR 0 1
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: IN
30546: NOT
30547: IFFALSE 30559
30549: PUSH
30550: LD_VAR 0 6
30554: PUSH
30555: LD_INT 2
30557: EQUAL
30558: AND
30559: OR
30560: IFFALSE 30570
// mode = 0 ;
30562: LD_ADDR_VAR 0 6
30566: PUSH
30567: LD_INT 0
30569: ST_TO_ADDR
// case mode of 0 :
30570: LD_VAR 0 6
30574: PUSH
30575: LD_INT 0
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 42036
30583: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30584: LD_ADDR_VAR 0 11
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 2
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 2
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 3
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30777: LD_ADDR_VAR 0 12
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: LD_INT 1
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: NEG
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 3
30934: NEG
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30973: LD_ADDR_VAR 0 13
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: LD_INT 2
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: NEG
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 3
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 3
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 3
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31172: LD_ADDR_VAR 0 14
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: LD_INT 3
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31368: LD_ADDR_VAR 0 15
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 3
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31561: LD_ADDR_VAR 0 16
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: LD_INT 2
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: NEG
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 3
31708: PUSH
31709: LD_INT 2
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 3
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31754: LD_ADDR_VAR 0 17
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: LD_INT 2
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 0
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31984: LD_ADDR_VAR 0 18
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: NEG
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32214: LD_ADDR_VAR 0 19
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: LD_INT 2
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32444: LD_ADDR_VAR 0 20
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 2
32620: NEG
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: NEG
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32674: LD_ADDR_VAR 0 21
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32904: LD_ADDR_VAR 0 22
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: LD_INT 2
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: LD_INT 2
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: LD_INT 2
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33134: LD_ADDR_VAR 0 23
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 1
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 2
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 2
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 2
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: LD_INT 3
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: LD_INT 3
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33414: LD_ADDR_VAR 0 24
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 2
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: LD_INT 2
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33690: LD_ADDR_VAR 0 25
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 0
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 2
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 3
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33964: LD_ADDR_VAR 0 26
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 0
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: LD_INT 2
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: NEG
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34240: LD_ADDR_VAR 0 27
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 3
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34520: LD_ADDR_VAR 0 28
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: LD_INT 3
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 3
34767: NEG
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34802: LD_ADDR_VAR 0 29
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: LD_INT 2
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 2
34980: NEG
34981: PUSH
34982: LD_INT 2
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: LD_INT 3
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: LD_INT 3
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: NEG
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35081: LD_ADDR_VAR 0 30
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 2
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 2
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: LD_INT 3
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 3
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: LD_INT 3
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 3
35324: NEG
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35359: LD_ADDR_VAR 0 31
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: LD_INT 2
35444: NEG
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: NEG
35549: PUSH
35550: LD_INT 3
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 3
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 3
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 3
35602: NEG
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35637: LD_ADDR_VAR 0 32
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: NEG
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PUSH
35816: LD_INT 1
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: LD_INT 3
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 3
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 3
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 3
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35915: LD_ADDR_VAR 0 33
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: LD_INT 3
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 3
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 3
36159: NEG
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36194: LD_ADDR_VAR 0 34
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: NEG
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: LD_INT 3
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 3
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 3
36439: NEG
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36474: LD_ADDR_VAR 0 35
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36586: LD_ADDR_VAR 0 36
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: LD_INT 2
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36698: LD_ADDR_VAR 0 37
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36810: LD_ADDR_VAR 0 38
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36922: LD_ADDR_VAR 0 39
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37034: LD_ADDR_VAR 0 40
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37146: LD_ADDR_VAR 0 41
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: NEG
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 2
37336: NEG
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 3
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 3
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 3
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: LD_INT 3
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: NEG
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 3
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 3
37443: NEG
37444: PUSH
37445: LD_INT 2
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 3
37455: NEG
37456: PUSH
37457: LD_INT 3
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37496: LD_ADDR_VAR 0 42
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: LD_INT 3
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 3
37702: NEG
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 3
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: PUSH
37743: LD_INT 3
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 3
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 3
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 3
37793: NEG
37794: PUSH
37795: LD_INT 2
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 3
37805: NEG
37806: PUSH
37807: LD_INT 3
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37846: LD_ADDR_VAR 0 43
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 2
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 2
38012: NEG
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: LD_INT 3
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 3
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: LD_INT 3
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 3
38142: NEG
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 3
38153: NEG
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38194: LD_ADDR_VAR 0 44
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: LD_INT 3
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 3
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 3
38479: NEG
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 3
38491: NEG
38492: PUSH
38493: LD_INT 2
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 3
38503: NEG
38504: PUSH
38505: LD_INT 3
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38544: LD_ADDR_VAR 0 45
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: LD_INT 3
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 3
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 3
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 3
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: LD_INT 3
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 3
38841: NEG
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: NEG
38854: PUSH
38855: LD_INT 3
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38894: LD_ADDR_VAR 0 46
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: NEG
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 3
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 3
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 3
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 3
39190: NEG
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 3
39201: NEG
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39242: LD_ADDR_VAR 0 47
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39393: LD_ADDR_VAR 0 48
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39540: LD_ADDR_VAR 0 49
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 2
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39684: LD_ADDR_VAR 0 50
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39828: LD_ADDR_VAR 0 51
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39975: LD_ADDR_VAR 0 52
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40126: LD_ADDR_VAR 0 53
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40356: LD_ADDR_VAR 0 54
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: NEG
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40586: LD_ADDR_VAR 0 55
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40816: LD_ADDR_VAR 0 56
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41046: LD_ADDR_VAR 0 57
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41276: LD_ADDR_VAR 0 58
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41506: LD_ADDR_VAR 0 59
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41594: LD_ADDR_VAR 0 60
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41682: LD_ADDR_VAR 0 61
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41770: LD_ADDR_VAR 0 62
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41858: LD_ADDR_VAR 0 63
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41946: LD_ADDR_VAR 0 64
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: ST_TO_ADDR
// end ; 1 :
42034: GO 47931
42036: LD_INT 1
42038: DOUBLE
42039: EQUAL
42040: IFTRUE 42044
42042: GO 44667
42044: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42045: LD_ADDR_VAR 0 11
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42089: LD_ADDR_VAR 0 12
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42130: LD_ADDR_VAR 0 13
42134: PUSH
42135: LD_INT 3
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 3
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: LD_INT 3
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42170: LD_ADDR_VAR 0 14
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: LIST
42210: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42211: LD_ADDR_VAR 0 15
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: NEG
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 3
42240: NEG
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42255: LD_ADDR_VAR 0 16
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 3
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: LD_INT 3
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: LIST
42300: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42301: LD_ADDR_VAR 0 17
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 3
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 2
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42345: LD_ADDR_VAR 0 18
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 3
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42386: LD_ADDR_VAR 0 19
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 3
42403: PUSH
42404: LD_INT 3
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42426: LD_ADDR_VAR 0 20
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 3
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42467: LD_ADDR_VAR 0 21
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42511: LD_ADDR_VAR 0 22
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 3
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 3
42530: NEG
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: LD_INT 3
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42557: LD_ADDR_VAR 0 23
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 3
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 4
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 3
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42601: LD_ADDR_VAR 0 24
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 3
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 4
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42642: LD_ADDR_VAR 0 25
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 4
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: LD_INT 4
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42682: LD_ADDR_VAR 0 26
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 4
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42723: LD_ADDR_VAR 0 27
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 3
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 4
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42767: LD_ADDR_VAR 0 28
42771: PUSH
42772: LD_INT 3
42774: NEG
42775: PUSH
42776: LD_INT 3
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: NEG
42787: PUSH
42788: LD_INT 4
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 4
42798: NEG
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42813: LD_ADDR_VAR 0 29
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 3
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 4
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 4
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 3
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 5
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 5
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 4
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 6
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 6
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 5
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42968: LD_ADDR_VAR 0 30
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 3
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 4
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 4
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 4
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 5
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 5
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 5
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 6
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 6
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43111: LD_ADDR_VAR 0 31
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 4
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 4
43158: PUSH
43159: LD_INT 4
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 4
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 5
43178: PUSH
43179: LD_INT 4
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 5
43188: PUSH
43189: LD_INT 5
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 4
43198: PUSH
43199: LD_INT 5
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 6
43208: PUSH
43209: LD_INT 5
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 6
43218: PUSH
43219: LD_INT 6
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 5
43228: PUSH
43229: LD_INT 6
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43250: LD_ADDR_VAR 0 32
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 4
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: LD_INT 4
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 5
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 5
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 4
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 6
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 6
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 5
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43393: LD_ADDR_VAR 0 33
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 3
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 4
43445: NEG
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 4
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 4
43468: NEG
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 5
43479: NEG
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 5
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 5
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 6
43513: NEG
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 6
43524: NEG
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43548: LD_ADDR_VAR 0 34
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: LD_INT 3
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 3
43579: NEG
43580: PUSH
43581: LD_INT 3
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: LD_INT 4
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 4
43603: NEG
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 4
43615: NEG
43616: PUSH
43617: LD_INT 4
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 4
43627: NEG
43628: PUSH
43629: LD_INT 5
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 5
43639: NEG
43640: PUSH
43641: LD_INT 4
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 5
43651: NEG
43652: PUSH
43653: LD_INT 5
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 5
43663: NEG
43664: PUSH
43665: LD_INT 6
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 6
43675: NEG
43676: PUSH
43677: LD_INT 5
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 6
43687: NEG
43688: PUSH
43689: LD_INT 6
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43711: LD_ADDR_VAR 0 41
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 3
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43755: LD_ADDR_VAR 0 42
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43796: LD_ADDR_VAR 0 43
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43836: LD_ADDR_VAR 0 44
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 3
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43877: LD_ADDR_VAR 0 45
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: NEG
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43921: LD_ADDR_VAR 0 46
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: LD_INT 3
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 3
43952: NEG
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43967: LD_ADDR_VAR 0 47
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: LD_INT 3
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44000: LD_ADDR_VAR 0 48
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44031: LD_ADDR_VAR 0 49
44035: PUSH
44036: LD_INT 3
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44060: LD_ADDR_VAR 0 50
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 3
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44089: LD_ADDR_VAR 0 51
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44120: LD_ADDR_VAR 0 52
44124: PUSH
44125: LD_INT 3
44127: NEG
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 3
44139: NEG
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44153: LD_ADDR_VAR 0 53
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 3
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 3
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44197: LD_ADDR_VAR 0 54
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44238: LD_ADDR_VAR 0 55
44242: PUSH
44243: LD_INT 3
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44278: LD_ADDR_VAR 0 56
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 3
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: LIST
44318: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44319: LD_ADDR_VAR 0 57
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: LIST
44362: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44363: LD_ADDR_VAR 0 58
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 3
44394: NEG
44395: PUSH
44396: LD_INT 3
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44409: LD_ADDR_VAR 0 59
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44453: LD_ADDR_VAR 0 60
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44494: LD_ADDR_VAR 0 61
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44534: LD_ADDR_VAR 0 62
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44575: LD_ADDR_VAR 0 63
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44619: LD_ADDR_VAR 0 64
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: LIST
44664: ST_TO_ADDR
// end ; 2 :
44665: GO 47931
44667: LD_INT 2
44669: DOUBLE
44670: EQUAL
44671: IFTRUE 44675
44673: GO 47930
44675: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44676: LD_ADDR_VAR 0 29
44680: PUSH
44681: LD_INT 4
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 4
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 5
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 5
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 4
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 3
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 4
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 4
44806: PUSH
44807: LD_INT 4
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: LD_INT 4
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 4
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 4
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 4
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 4
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 5
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 5
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 4
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 5
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 3
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 3
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 4
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 4
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 4
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 4
45061: NEG
45062: PUSH
45063: LD_INT 4
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 4
45073: NEG
45074: PUSH
45075: LD_INT 5
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 3
45085: NEG
45086: PUSH
45087: LD_INT 4
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: LD_INT 3
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 4
45109: NEG
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 5
45121: NEG
45122: PUSH
45123: LD_INT 4
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 5
45133: NEG
45134: PUSH
45135: LD_INT 5
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 3
45145: NEG
45146: PUSH
45147: LD_INT 5
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 5
45157: NEG
45158: PUSH
45159: LD_INT 3
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45214: LD_ADDR_VAR 0 30
45218: PUSH
45219: LD_INT 4
45221: PUSH
45222: LD_INT 4
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 4
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 5
45241: PUSH
45242: LD_INT 4
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 5
45251: PUSH
45252: LD_INT 5
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 4
45261: PUSH
45262: LD_INT 5
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: LD_INT 4
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 5
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 5
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 4
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 4
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 4
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 4
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 4
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 4
45449: NEG
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 5
45460: NEG
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 5
45471: NEG
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 5
45483: NEG
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 3
45518: NEG
45519: PUSH
45520: LD_INT 4
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 4
45566: NEG
45567: PUSH
45568: LD_INT 3
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 4
45578: NEG
45579: PUSH
45580: LD_INT 4
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 4
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 4
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 4
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 5
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 4
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 3
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 4
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 5
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 5
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45761: LD_ADDR_VAR 0 31
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 4
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 4
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 5
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 5
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 4
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 3
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 5
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 3
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 4
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 4
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 4
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 4
45963: NEG
45964: PUSH
45965: LD_INT 4
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 4
45975: NEG
45976: PUSH
45977: LD_INT 5
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: NEG
45988: PUSH
45989: LD_INT 4
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 3
45999: NEG
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 4
46011: NEG
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 5
46023: NEG
46024: PUSH
46025: LD_INT 4
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 5
46035: NEG
46036: PUSH
46037: LD_INT 5
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 3
46047: NEG
46048: PUSH
46049: LD_INT 5
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 5
46059: NEG
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 4
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 3
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 4
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 4
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 4
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 4
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 5
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 5
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 4
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 3
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 3
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 5
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46311: LD_ADDR_VAR 0 32
46315: PUSH
46316: LD_INT 4
46318: NEG
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 4
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 4
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 5
46374: NEG
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 5
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 5
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 3
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: LD_INT 4
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 3
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 3
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 4
46480: NEG
46481: PUSH
46482: LD_INT 3
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 4
46492: NEG
46493: PUSH
46494: LD_INT 4
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 4
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 4
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 4
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 5
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 4
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 3
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 4
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 5
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: LD_INT 5
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 3
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 3
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 4
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 4
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 4
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 4
46723: PUSH
46724: LD_INT 4
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 4
46733: PUSH
46734: LD_INT 3
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 5
46743: PUSH
46744: LD_INT 4
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 5
46753: PUSH
46754: LD_INT 5
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 4
46763: PUSH
46764: LD_INT 5
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 3
46773: PUSH
46774: LD_INT 4
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 5
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 5
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46858: LD_ADDR_VAR 0 33
46862: PUSH
46863: LD_INT 4
46865: NEG
46866: PUSH
46867: LD_INT 4
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 4
46877: NEG
46878: PUSH
46879: LD_INT 5
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: LD_INT 4
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 4
46913: NEG
46914: PUSH
46915: LD_INT 3
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 5
46925: NEG
46926: PUSH
46927: LD_INT 4
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 5
46937: NEG
46938: PUSH
46939: LD_INT 5
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: LD_INT 5
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 5
46961: NEG
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 4
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 4
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 4
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 4
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 4
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 5
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 5
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 4
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 3
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 5
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 4
47198: PUSH
47199: LD_INT 4
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: LD_INT 4
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 3
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 4
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: LD_INT 4
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 4
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 4
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 5
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 5
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 4
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 3
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 5
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: LD_INT 3
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47396: LD_ADDR_VAR 0 34
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 4
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 5
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 4
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 3
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 3
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 4
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 5
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 5
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 4
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 4
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 4
47598: PUSH
47599: LD_INT 4
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 4
47608: PUSH
47609: LD_INT 3
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 5
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 5
47628: PUSH
47629: LD_INT 5
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 4
47638: PUSH
47639: LD_INT 5
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: LD_INT 4
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 5
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: LD_INT 5
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 4
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 4
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 4
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 4
47781: NEG
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 4
47792: NEG
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 3
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 4
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 5
47837: NEG
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 5
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 5
47860: NEG
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// end ; end ;
47928: GO 47931
47930: POP
// case btype of b_depot , b_warehouse :
47931: LD_VAR 0 1
47935: PUSH
47936: LD_INT 0
47938: DOUBLE
47939: EQUAL
47940: IFTRUE 47950
47942: LD_INT 1
47944: DOUBLE
47945: EQUAL
47946: IFTRUE 47950
47948: GO 48151
47950: POP
// case nation of nation_american :
47951: LD_VAR 0 5
47955: PUSH
47956: LD_INT 1
47958: DOUBLE
47959: EQUAL
47960: IFTRUE 47964
47962: GO 48020
47964: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47965: LD_ADDR_VAR 0 9
47969: PUSH
47970: LD_VAR 0 11
47974: PUSH
47975: LD_VAR 0 12
47979: PUSH
47980: LD_VAR 0 13
47984: PUSH
47985: LD_VAR 0 14
47989: PUSH
47990: LD_VAR 0 15
47994: PUSH
47995: LD_VAR 0 16
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: PUSH
48008: LD_VAR 0 4
48012: PUSH
48013: LD_INT 1
48015: PLUS
48016: ARRAY
48017: ST_TO_ADDR
48018: GO 48149
48020: LD_INT 2
48022: DOUBLE
48023: EQUAL
48024: IFTRUE 48028
48026: GO 48084
48028: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48029: LD_ADDR_VAR 0 9
48033: PUSH
48034: LD_VAR 0 17
48038: PUSH
48039: LD_VAR 0 18
48043: PUSH
48044: LD_VAR 0 19
48048: PUSH
48049: LD_VAR 0 20
48053: PUSH
48054: LD_VAR 0 21
48058: PUSH
48059: LD_VAR 0 22
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: PUSH
48072: LD_VAR 0 4
48076: PUSH
48077: LD_INT 1
48079: PLUS
48080: ARRAY
48081: ST_TO_ADDR
48082: GO 48149
48084: LD_INT 3
48086: DOUBLE
48087: EQUAL
48088: IFTRUE 48092
48090: GO 48148
48092: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48093: LD_ADDR_VAR 0 9
48097: PUSH
48098: LD_VAR 0 23
48102: PUSH
48103: LD_VAR 0 24
48107: PUSH
48108: LD_VAR 0 25
48112: PUSH
48113: LD_VAR 0 26
48117: PUSH
48118: LD_VAR 0 27
48122: PUSH
48123: LD_VAR 0 28
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: PUSH
48136: LD_VAR 0 4
48140: PUSH
48141: LD_INT 1
48143: PLUS
48144: ARRAY
48145: ST_TO_ADDR
48146: GO 48149
48148: POP
48149: GO 48704
48151: LD_INT 2
48153: DOUBLE
48154: EQUAL
48155: IFTRUE 48165
48157: LD_INT 3
48159: DOUBLE
48160: EQUAL
48161: IFTRUE 48165
48163: GO 48221
48165: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48166: LD_ADDR_VAR 0 9
48170: PUSH
48171: LD_VAR 0 29
48175: PUSH
48176: LD_VAR 0 30
48180: PUSH
48181: LD_VAR 0 31
48185: PUSH
48186: LD_VAR 0 32
48190: PUSH
48191: LD_VAR 0 33
48195: PUSH
48196: LD_VAR 0 34
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: PUSH
48209: LD_VAR 0 4
48213: PUSH
48214: LD_INT 1
48216: PLUS
48217: ARRAY
48218: ST_TO_ADDR
48219: GO 48704
48221: LD_INT 16
48223: DOUBLE
48224: EQUAL
48225: IFTRUE 48283
48227: LD_INT 17
48229: DOUBLE
48230: EQUAL
48231: IFTRUE 48283
48233: LD_INT 18
48235: DOUBLE
48236: EQUAL
48237: IFTRUE 48283
48239: LD_INT 19
48241: DOUBLE
48242: EQUAL
48243: IFTRUE 48283
48245: LD_INT 22
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48283
48251: LD_INT 20
48253: DOUBLE
48254: EQUAL
48255: IFTRUE 48283
48257: LD_INT 21
48259: DOUBLE
48260: EQUAL
48261: IFTRUE 48283
48263: LD_INT 23
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48283
48269: LD_INT 24
48271: DOUBLE
48272: EQUAL
48273: IFTRUE 48283
48275: LD_INT 25
48277: DOUBLE
48278: EQUAL
48279: IFTRUE 48283
48281: GO 48339
48283: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48284: LD_ADDR_VAR 0 9
48288: PUSH
48289: LD_VAR 0 35
48293: PUSH
48294: LD_VAR 0 36
48298: PUSH
48299: LD_VAR 0 37
48303: PUSH
48304: LD_VAR 0 38
48308: PUSH
48309: LD_VAR 0 39
48313: PUSH
48314: LD_VAR 0 40
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: PUSH
48327: LD_VAR 0 4
48331: PUSH
48332: LD_INT 1
48334: PLUS
48335: ARRAY
48336: ST_TO_ADDR
48337: GO 48704
48339: LD_INT 6
48341: DOUBLE
48342: EQUAL
48343: IFTRUE 48395
48345: LD_INT 7
48347: DOUBLE
48348: EQUAL
48349: IFTRUE 48395
48351: LD_INT 8
48353: DOUBLE
48354: EQUAL
48355: IFTRUE 48395
48357: LD_INT 13
48359: DOUBLE
48360: EQUAL
48361: IFTRUE 48395
48363: LD_INT 12
48365: DOUBLE
48366: EQUAL
48367: IFTRUE 48395
48369: LD_INT 15
48371: DOUBLE
48372: EQUAL
48373: IFTRUE 48395
48375: LD_INT 11
48377: DOUBLE
48378: EQUAL
48379: IFTRUE 48395
48381: LD_INT 14
48383: DOUBLE
48384: EQUAL
48385: IFTRUE 48395
48387: LD_INT 10
48389: DOUBLE
48390: EQUAL
48391: IFTRUE 48395
48393: GO 48451
48395: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48396: LD_ADDR_VAR 0 9
48400: PUSH
48401: LD_VAR 0 41
48405: PUSH
48406: LD_VAR 0 42
48410: PUSH
48411: LD_VAR 0 43
48415: PUSH
48416: LD_VAR 0 44
48420: PUSH
48421: LD_VAR 0 45
48425: PUSH
48426: LD_VAR 0 46
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: PUSH
48439: LD_VAR 0 4
48443: PUSH
48444: LD_INT 1
48446: PLUS
48447: ARRAY
48448: ST_TO_ADDR
48449: GO 48704
48451: LD_INT 36
48453: DOUBLE
48454: EQUAL
48455: IFTRUE 48459
48457: GO 48515
48459: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48460: LD_ADDR_VAR 0 9
48464: PUSH
48465: LD_VAR 0 47
48469: PUSH
48470: LD_VAR 0 48
48474: PUSH
48475: LD_VAR 0 49
48479: PUSH
48480: LD_VAR 0 50
48484: PUSH
48485: LD_VAR 0 51
48489: PUSH
48490: LD_VAR 0 52
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: PUSH
48503: LD_VAR 0 4
48507: PUSH
48508: LD_INT 1
48510: PLUS
48511: ARRAY
48512: ST_TO_ADDR
48513: GO 48704
48515: LD_INT 4
48517: DOUBLE
48518: EQUAL
48519: IFTRUE 48541
48521: LD_INT 5
48523: DOUBLE
48524: EQUAL
48525: IFTRUE 48541
48527: LD_INT 34
48529: DOUBLE
48530: EQUAL
48531: IFTRUE 48541
48533: LD_INT 37
48535: DOUBLE
48536: EQUAL
48537: IFTRUE 48541
48539: GO 48597
48541: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48542: LD_ADDR_VAR 0 9
48546: PUSH
48547: LD_VAR 0 53
48551: PUSH
48552: LD_VAR 0 54
48556: PUSH
48557: LD_VAR 0 55
48561: PUSH
48562: LD_VAR 0 56
48566: PUSH
48567: LD_VAR 0 57
48571: PUSH
48572: LD_VAR 0 58
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: PUSH
48585: LD_VAR 0 4
48589: PUSH
48590: LD_INT 1
48592: PLUS
48593: ARRAY
48594: ST_TO_ADDR
48595: GO 48704
48597: LD_INT 31
48599: DOUBLE
48600: EQUAL
48601: IFTRUE 48647
48603: LD_INT 32
48605: DOUBLE
48606: EQUAL
48607: IFTRUE 48647
48609: LD_INT 33
48611: DOUBLE
48612: EQUAL
48613: IFTRUE 48647
48615: LD_INT 27
48617: DOUBLE
48618: EQUAL
48619: IFTRUE 48647
48621: LD_INT 26
48623: DOUBLE
48624: EQUAL
48625: IFTRUE 48647
48627: LD_INT 28
48629: DOUBLE
48630: EQUAL
48631: IFTRUE 48647
48633: LD_INT 29
48635: DOUBLE
48636: EQUAL
48637: IFTRUE 48647
48639: LD_INT 30
48641: DOUBLE
48642: EQUAL
48643: IFTRUE 48647
48645: GO 48703
48647: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48648: LD_ADDR_VAR 0 9
48652: PUSH
48653: LD_VAR 0 59
48657: PUSH
48658: LD_VAR 0 60
48662: PUSH
48663: LD_VAR 0 61
48667: PUSH
48668: LD_VAR 0 62
48672: PUSH
48673: LD_VAR 0 63
48677: PUSH
48678: LD_VAR 0 64
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: PUSH
48691: LD_VAR 0 4
48695: PUSH
48696: LD_INT 1
48698: PLUS
48699: ARRAY
48700: ST_TO_ADDR
48701: GO 48704
48703: POP
// temp_list2 = [ ] ;
48704: LD_ADDR_VAR 0 10
48708: PUSH
48709: EMPTY
48710: ST_TO_ADDR
// for i in temp_list do
48711: LD_ADDR_VAR 0 8
48715: PUSH
48716: LD_VAR 0 9
48720: PUSH
48721: FOR_IN
48722: IFFALSE 48774
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48724: LD_ADDR_VAR 0 10
48728: PUSH
48729: LD_VAR 0 10
48733: PUSH
48734: LD_VAR 0 8
48738: PUSH
48739: LD_INT 1
48741: ARRAY
48742: PUSH
48743: LD_VAR 0 2
48747: PLUS
48748: PUSH
48749: LD_VAR 0 8
48753: PUSH
48754: LD_INT 2
48756: ARRAY
48757: PUSH
48758: LD_VAR 0 3
48762: PLUS
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: EMPTY
48769: LIST
48770: ADD
48771: ST_TO_ADDR
48772: GO 48721
48774: POP
48775: POP
// result = temp_list2 ;
48776: LD_ADDR_VAR 0 7
48780: PUSH
48781: LD_VAR 0 10
48785: ST_TO_ADDR
// end ;
48786: LD_VAR 0 7
48790: RET
// export function EnemyInRange ( unit , dist ) ; begin
48791: LD_INT 0
48793: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48794: LD_ADDR_VAR 0 3
48798: PUSH
48799: LD_VAR 0 1
48803: PPUSH
48804: CALL_OW 255
48808: PPUSH
48809: LD_VAR 0 1
48813: PPUSH
48814: CALL_OW 250
48818: PPUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 251
48828: PPUSH
48829: LD_VAR 0 2
48833: PPUSH
48834: CALL 22048 0 4
48838: PUSH
48839: LD_INT 4
48841: ARRAY
48842: ST_TO_ADDR
// end ;
48843: LD_VAR 0 3
48847: RET
// export function PlayerSeeMe ( unit ) ; begin
48848: LD_INT 0
48850: PPUSH
// result := See ( your_side , unit ) ;
48851: LD_ADDR_VAR 0 2
48855: PUSH
48856: LD_OWVAR 2
48860: PPUSH
48861: LD_VAR 0 1
48865: PPUSH
48866: CALL_OW 292
48870: ST_TO_ADDR
// end ;
48871: LD_VAR 0 2
48875: RET
// export function ReverseDir ( unit ) ; begin
48876: LD_INT 0
48878: PPUSH
// if not unit then
48879: LD_VAR 0 1
48883: NOT
48884: IFFALSE 48888
// exit ;
48886: GO 48911
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48888: LD_ADDR_VAR 0 2
48892: PUSH
48893: LD_VAR 0 1
48897: PPUSH
48898: CALL_OW 254
48902: PUSH
48903: LD_INT 3
48905: PLUS
48906: PUSH
48907: LD_INT 6
48909: MOD
48910: ST_TO_ADDR
// end ;
48911: LD_VAR 0 2
48915: RET
// export function ReverseArray ( array ) ; var i ; begin
48916: LD_INT 0
48918: PPUSH
48919: PPUSH
// if not array then
48920: LD_VAR 0 1
48924: NOT
48925: IFFALSE 48929
// exit ;
48927: GO 48984
// result := [ ] ;
48929: LD_ADDR_VAR 0 2
48933: PUSH
48934: EMPTY
48935: ST_TO_ADDR
// for i := array downto 1 do
48936: LD_ADDR_VAR 0 3
48940: PUSH
48941: DOUBLE
48942: LD_VAR 0 1
48946: INC
48947: ST_TO_ADDR
48948: LD_INT 1
48950: PUSH
48951: FOR_DOWNTO
48952: IFFALSE 48982
// result := Join ( result , array [ i ] ) ;
48954: LD_ADDR_VAR 0 2
48958: PUSH
48959: LD_VAR 0 2
48963: PPUSH
48964: LD_VAR 0 1
48968: PUSH
48969: LD_VAR 0 3
48973: ARRAY
48974: PPUSH
48975: CALL 53826 0 2
48979: ST_TO_ADDR
48980: GO 48951
48982: POP
48983: POP
// end ;
48984: LD_VAR 0 2
48988: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48989: LD_INT 0
48991: PPUSH
48992: PPUSH
48993: PPUSH
48994: PPUSH
48995: PPUSH
48996: PPUSH
// if not unit or not hexes then
48997: LD_VAR 0 1
49001: NOT
49002: IFTRUE 49011
49004: PUSH
49005: LD_VAR 0 2
49009: NOT
49010: OR
49011: IFFALSE 49015
// exit ;
49013: GO 49138
// dist := 9999 ;
49015: LD_ADDR_VAR 0 5
49019: PUSH
49020: LD_INT 9999
49022: ST_TO_ADDR
// for i = 1 to hexes do
49023: LD_ADDR_VAR 0 4
49027: PUSH
49028: DOUBLE
49029: LD_INT 1
49031: DEC
49032: ST_TO_ADDR
49033: LD_VAR 0 2
49037: PUSH
49038: FOR_TO
49039: IFFALSE 49126
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49041: LD_ADDR_VAR 0 6
49045: PUSH
49046: LD_VAR 0 1
49050: PPUSH
49051: LD_VAR 0 2
49055: PUSH
49056: LD_VAR 0 4
49060: ARRAY
49061: PUSH
49062: LD_INT 1
49064: ARRAY
49065: PPUSH
49066: LD_VAR 0 2
49070: PUSH
49071: LD_VAR 0 4
49075: ARRAY
49076: PUSH
49077: LD_INT 2
49079: ARRAY
49080: PPUSH
49081: CALL_OW 297
49085: ST_TO_ADDR
// if tdist < dist then
49086: LD_VAR 0 6
49090: PUSH
49091: LD_VAR 0 5
49095: LESS
49096: IFFALSE 49124
// begin hex := hexes [ i ] ;
49098: LD_ADDR_VAR 0 8
49102: PUSH
49103: LD_VAR 0 2
49107: PUSH
49108: LD_VAR 0 4
49112: ARRAY
49113: ST_TO_ADDR
// dist := tdist ;
49114: LD_ADDR_VAR 0 5
49118: PUSH
49119: LD_VAR 0 6
49123: ST_TO_ADDR
// end ; end ;
49124: GO 49038
49126: POP
49127: POP
// result := hex ;
49128: LD_ADDR_VAR 0 3
49132: PUSH
49133: LD_VAR 0 8
49137: ST_TO_ADDR
// end ;
49138: LD_VAR 0 3
49142: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49143: LD_INT 0
49145: PPUSH
49146: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49147: LD_VAR 0 1
49151: NOT
49152: IFTRUE 49191
49154: PUSH
49155: LD_VAR 0 1
49159: PUSH
49160: LD_INT 21
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 23
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PPUSH
49184: CALL_OW 69
49188: IN
49189: NOT
49190: OR
49191: IFFALSE 49195
// exit ;
49193: GO 49242
// for i = 1 to 3 do
49195: LD_ADDR_VAR 0 3
49199: PUSH
49200: DOUBLE
49201: LD_INT 1
49203: DEC
49204: ST_TO_ADDR
49205: LD_INT 3
49207: PUSH
49208: FOR_TO
49209: IFFALSE 49240
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49211: LD_VAR 0 1
49215: PPUSH
49216: CALL_OW 250
49220: PPUSH
49221: LD_VAR 0 1
49225: PPUSH
49226: CALL_OW 251
49230: PPUSH
49231: LD_INT 1
49233: PPUSH
49234: CALL_OW 453
49238: GO 49208
49240: POP
49241: POP
// end ;
49242: LD_VAR 0 2
49246: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49247: LD_INT 0
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
// if not unit or not enemy_unit then
49255: LD_VAR 0 1
49259: NOT
49260: IFTRUE 49269
49262: PUSH
49263: LD_VAR 0 2
49267: NOT
49268: OR
49269: IFFALSE 49273
// exit ;
49271: GO 49744
// if GetLives ( i ) < 250 then
49273: LD_VAR 0 4
49277: PPUSH
49278: CALL_OW 256
49282: PUSH
49283: LD_INT 250
49285: LESS
49286: IFFALSE 49299
// begin ComAutodestruct ( i ) ;
49288: LD_VAR 0 4
49292: PPUSH
49293: CALL 49143 0 1
// exit ;
49297: GO 49744
// end ; x := GetX ( enemy_unit ) ;
49299: LD_ADDR_VAR 0 7
49303: PUSH
49304: LD_VAR 0 2
49308: PPUSH
49309: CALL_OW 250
49313: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49314: LD_ADDR_VAR 0 8
49318: PUSH
49319: LD_VAR 0 2
49323: PPUSH
49324: CALL_OW 251
49328: ST_TO_ADDR
// if not x or not y then
49329: LD_VAR 0 7
49333: NOT
49334: IFTRUE 49343
49336: PUSH
49337: LD_VAR 0 8
49341: NOT
49342: OR
49343: IFFALSE 49347
// exit ;
49345: GO 49744
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49347: LD_ADDR_VAR 0 6
49351: PUSH
49352: LD_VAR 0 7
49356: PPUSH
49357: LD_INT 0
49359: PPUSH
49360: LD_INT 4
49362: PPUSH
49363: CALL_OW 272
49367: PUSH
49368: LD_VAR 0 8
49372: PPUSH
49373: LD_INT 0
49375: PPUSH
49376: LD_INT 4
49378: PPUSH
49379: CALL_OW 273
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_VAR 0 7
49392: PPUSH
49393: LD_INT 1
49395: PPUSH
49396: LD_INT 4
49398: PPUSH
49399: CALL_OW 272
49403: PUSH
49404: LD_VAR 0 8
49408: PPUSH
49409: LD_INT 1
49411: PPUSH
49412: LD_INT 4
49414: PPUSH
49415: CALL_OW 273
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_VAR 0 7
49428: PPUSH
49429: LD_INT 2
49431: PPUSH
49432: LD_INT 4
49434: PPUSH
49435: CALL_OW 272
49439: PUSH
49440: LD_VAR 0 8
49444: PPUSH
49445: LD_INT 2
49447: PPUSH
49448: LD_INT 4
49450: PPUSH
49451: CALL_OW 273
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_VAR 0 7
49464: PPUSH
49465: LD_INT 3
49467: PPUSH
49468: LD_INT 4
49470: PPUSH
49471: CALL_OW 272
49475: PUSH
49476: LD_VAR 0 8
49480: PPUSH
49481: LD_INT 3
49483: PPUSH
49484: LD_INT 4
49486: PPUSH
49487: CALL_OW 273
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_VAR 0 7
49500: PPUSH
49501: LD_INT 4
49503: PPUSH
49504: LD_INT 4
49506: PPUSH
49507: CALL_OW 272
49511: PUSH
49512: LD_VAR 0 8
49516: PPUSH
49517: LD_INT 4
49519: PPUSH
49520: LD_INT 4
49522: PPUSH
49523: CALL_OW 273
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_VAR 0 7
49536: PPUSH
49537: LD_INT 5
49539: PPUSH
49540: LD_INT 4
49542: PPUSH
49543: CALL_OW 272
49547: PUSH
49548: LD_VAR 0 8
49552: PPUSH
49553: LD_INT 5
49555: PPUSH
49556: LD_INT 4
49558: PPUSH
49559: CALL_OW 273
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: ST_TO_ADDR
// for i = tmp downto 1 do
49576: LD_ADDR_VAR 0 4
49580: PUSH
49581: DOUBLE
49582: LD_VAR 0 6
49586: INC
49587: ST_TO_ADDR
49588: LD_INT 1
49590: PUSH
49591: FOR_DOWNTO
49592: IFFALSE 49695
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49594: LD_VAR 0 6
49598: PUSH
49599: LD_VAR 0 4
49603: ARRAY
49604: PUSH
49605: LD_INT 1
49607: ARRAY
49608: PPUSH
49609: LD_VAR 0 6
49613: PUSH
49614: LD_VAR 0 4
49618: ARRAY
49619: PUSH
49620: LD_INT 2
49622: ARRAY
49623: PPUSH
49624: CALL_OW 488
49628: NOT
49629: IFTRUE 49671
49631: PUSH
49632: LD_VAR 0 6
49636: PUSH
49637: LD_VAR 0 4
49641: ARRAY
49642: PUSH
49643: LD_INT 1
49645: ARRAY
49646: PPUSH
49647: LD_VAR 0 6
49651: PUSH
49652: LD_VAR 0 4
49656: ARRAY
49657: PUSH
49658: LD_INT 2
49660: ARRAY
49661: PPUSH
49662: CALL_OW 428
49666: PUSH
49667: LD_INT 0
49669: NONEQUAL
49670: OR
49671: IFFALSE 49693
// tmp := Delete ( tmp , i ) ;
49673: LD_ADDR_VAR 0 6
49677: PUSH
49678: LD_VAR 0 6
49682: PPUSH
49683: LD_VAR 0 4
49687: PPUSH
49688: CALL_OW 3
49692: ST_TO_ADDR
49693: GO 49591
49695: POP
49696: POP
// j := GetClosestHex ( unit , tmp ) ;
49697: LD_ADDR_VAR 0 5
49701: PUSH
49702: LD_VAR 0 1
49706: PPUSH
49707: LD_VAR 0 6
49711: PPUSH
49712: CALL 48989 0 2
49716: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49717: LD_VAR 0 1
49721: PPUSH
49722: LD_VAR 0 5
49726: PUSH
49727: LD_INT 1
49729: ARRAY
49730: PPUSH
49731: LD_VAR 0 5
49735: PUSH
49736: LD_INT 2
49738: ARRAY
49739: PPUSH
49740: CALL_OW 111
// end ;
49744: LD_VAR 0 3
49748: RET
// export function PrepareApemanSoldier ( ) ; begin
49749: LD_INT 0
49751: PPUSH
// uc_nation := 0 ;
49752: LD_ADDR_OWVAR 21
49756: PUSH
49757: LD_INT 0
49759: ST_TO_ADDR
// hc_sex := sex_male ;
49760: LD_ADDR_OWVAR 27
49764: PUSH
49765: LD_INT 1
49767: ST_TO_ADDR
// hc_name :=  ;
49768: LD_ADDR_OWVAR 26
49772: PUSH
49773: LD_STRING 
49775: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49776: LD_ADDR_OWVAR 28
49780: PUSH
49781: LD_INT 15
49783: ST_TO_ADDR
// hc_gallery :=  ;
49784: LD_ADDR_OWVAR 33
49788: PUSH
49789: LD_STRING 
49791: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49792: LD_ADDR_OWVAR 31
49796: PUSH
49797: LD_INT 0
49799: PPUSH
49800: LD_INT 3
49802: PPUSH
49803: CALL_OW 12
49807: PUSH
49808: LD_INT 0
49810: PPUSH
49811: LD_INT 3
49813: PPUSH
49814: CALL_OW 12
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49831: LD_ADDR_OWVAR 29
49835: PUSH
49836: LD_INT 12
49838: PUSH
49839: LD_INT 12
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: ST_TO_ADDR
// end ;
49846: LD_VAR 0 1
49850: RET
// export function PrepareApemanEngineer ( ) ; begin
49851: LD_INT 0
49853: PPUSH
// uc_nation := 0 ;
49854: LD_ADDR_OWVAR 21
49858: PUSH
49859: LD_INT 0
49861: ST_TO_ADDR
// hc_sex := sex_male ;
49862: LD_ADDR_OWVAR 27
49866: PUSH
49867: LD_INT 1
49869: ST_TO_ADDR
// hc_name :=  ;
49870: LD_ADDR_OWVAR 26
49874: PUSH
49875: LD_STRING 
49877: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49878: LD_ADDR_OWVAR 28
49882: PUSH
49883: LD_INT 16
49885: ST_TO_ADDR
// hc_gallery :=  ;
49886: LD_ADDR_OWVAR 33
49890: PUSH
49891: LD_STRING 
49893: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49894: LD_ADDR_OWVAR 31
49898: PUSH
49899: LD_INT 0
49901: PPUSH
49902: LD_INT 3
49904: PPUSH
49905: CALL_OW 12
49909: PUSH
49910: LD_INT 0
49912: PPUSH
49913: LD_INT 3
49915: PPUSH
49916: CALL_OW 12
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49933: LD_ADDR_OWVAR 29
49937: PUSH
49938: LD_INT 12
49940: PUSH
49941: LD_INT 12
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: ST_TO_ADDR
// end ;
49948: LD_VAR 0 1
49952: RET
// export function PrepareApeman ( agressivity ) ; begin
49953: LD_INT 0
49955: PPUSH
// uc_side := 0 ;
49956: LD_ADDR_OWVAR 20
49960: PUSH
49961: LD_INT 0
49963: ST_TO_ADDR
// uc_nation := 0 ;
49964: LD_ADDR_OWVAR 21
49968: PUSH
49969: LD_INT 0
49971: ST_TO_ADDR
// hc_sex := sex_male ;
49972: LD_ADDR_OWVAR 27
49976: PUSH
49977: LD_INT 1
49979: ST_TO_ADDR
// hc_class := class_apeman ;
49980: LD_ADDR_OWVAR 28
49984: PUSH
49985: LD_INT 12
49987: ST_TO_ADDR
// hc_gallery :=  ;
49988: LD_ADDR_OWVAR 33
49992: PUSH
49993: LD_STRING 
49995: ST_TO_ADDR
// hc_name :=  ;
49996: LD_ADDR_OWVAR 26
50000: PUSH
50001: LD_STRING 
50003: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50004: LD_ADDR_OWVAR 29
50008: PUSH
50009: LD_INT 12
50011: PUSH
50012: LD_INT 12
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: ST_TO_ADDR
// if agressivity = 0 then
50019: LD_VAR 0 1
50023: PUSH
50024: LD_INT 0
50026: EQUAL
50027: IFFALSE 50039
// hc_agressivity := 0 else
50029: LD_ADDR_OWVAR 35
50033: PUSH
50034: LD_INT 0
50036: ST_TO_ADDR
50037: GO 50060
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50039: LD_ADDR_OWVAR 35
50043: PUSH
50044: LD_VAR 0 1
50048: NEG
50049: PPUSH
50050: LD_VAR 0 1
50054: PPUSH
50055: CALL_OW 12
50059: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50060: LD_ADDR_OWVAR 31
50064: PUSH
50065: LD_INT 0
50067: PPUSH
50068: LD_INT 3
50070: PPUSH
50071: CALL_OW 12
50075: PUSH
50076: LD_INT 0
50078: PPUSH
50079: LD_INT 3
50081: PPUSH
50082: CALL_OW 12
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// end ;
50099: LD_VAR 0 2
50103: RET
// export function PrepareTiger ( agressivity ) ; begin
50104: LD_INT 0
50106: PPUSH
// uc_side := 0 ;
50107: LD_ADDR_OWVAR 20
50111: PUSH
50112: LD_INT 0
50114: ST_TO_ADDR
// uc_nation := 0 ;
50115: LD_ADDR_OWVAR 21
50119: PUSH
50120: LD_INT 0
50122: ST_TO_ADDR
// InitHc ;
50123: CALL_OW 19
// hc_class := class_tiger ;
50127: LD_ADDR_OWVAR 28
50131: PUSH
50132: LD_INT 14
50134: ST_TO_ADDR
// hc_gallery :=  ;
50135: LD_ADDR_OWVAR 33
50139: PUSH
50140: LD_STRING 
50142: ST_TO_ADDR
// hc_name :=  ;
50143: LD_ADDR_OWVAR 26
50147: PUSH
50148: LD_STRING 
50150: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50151: LD_ADDR_OWVAR 35
50155: PUSH
50156: LD_VAR 0 1
50160: NEG
50161: PPUSH
50162: LD_VAR 0 1
50166: PPUSH
50167: CALL_OW 12
50171: ST_TO_ADDR
// end ;
50172: LD_VAR 0 2
50176: RET
// export function PrepareEnchidna ( ) ; begin
50177: LD_INT 0
50179: PPUSH
// uc_side := 0 ;
50180: LD_ADDR_OWVAR 20
50184: PUSH
50185: LD_INT 0
50187: ST_TO_ADDR
// uc_nation := 0 ;
50188: LD_ADDR_OWVAR 21
50192: PUSH
50193: LD_INT 0
50195: ST_TO_ADDR
// InitHc ;
50196: CALL_OW 19
// hc_class := class_baggie ;
50200: LD_ADDR_OWVAR 28
50204: PUSH
50205: LD_INT 13
50207: ST_TO_ADDR
// hc_gallery :=  ;
50208: LD_ADDR_OWVAR 33
50212: PUSH
50213: LD_STRING 
50215: ST_TO_ADDR
// hc_name :=  ;
50216: LD_ADDR_OWVAR 26
50220: PUSH
50221: LD_STRING 
50223: ST_TO_ADDR
// end ;
50224: LD_VAR 0 1
50228: RET
// export function PrepareFrog ( ) ; begin
50229: LD_INT 0
50231: PPUSH
// uc_side := 0 ;
50232: LD_ADDR_OWVAR 20
50236: PUSH
50237: LD_INT 0
50239: ST_TO_ADDR
// uc_nation := 0 ;
50240: LD_ADDR_OWVAR 21
50244: PUSH
50245: LD_INT 0
50247: ST_TO_ADDR
// InitHc ;
50248: CALL_OW 19
// hc_class := class_frog ;
50252: LD_ADDR_OWVAR 28
50256: PUSH
50257: LD_INT 19
50259: ST_TO_ADDR
// hc_gallery :=  ;
50260: LD_ADDR_OWVAR 33
50264: PUSH
50265: LD_STRING 
50267: ST_TO_ADDR
// hc_name :=  ;
50268: LD_ADDR_OWVAR 26
50272: PUSH
50273: LD_STRING 
50275: ST_TO_ADDR
// end ;
50276: LD_VAR 0 1
50280: RET
// export function PrepareFish ( ) ; begin
50281: LD_INT 0
50283: PPUSH
// uc_side := 0 ;
50284: LD_ADDR_OWVAR 20
50288: PUSH
50289: LD_INT 0
50291: ST_TO_ADDR
// uc_nation := 0 ;
50292: LD_ADDR_OWVAR 21
50296: PUSH
50297: LD_INT 0
50299: ST_TO_ADDR
// InitHc ;
50300: CALL_OW 19
// hc_class := class_fish ;
50304: LD_ADDR_OWVAR 28
50308: PUSH
50309: LD_INT 20
50311: ST_TO_ADDR
// hc_gallery :=  ;
50312: LD_ADDR_OWVAR 33
50316: PUSH
50317: LD_STRING 
50319: ST_TO_ADDR
// hc_name :=  ;
50320: LD_ADDR_OWVAR 26
50324: PUSH
50325: LD_STRING 
50327: ST_TO_ADDR
// end ;
50328: LD_VAR 0 1
50332: RET
// export function PrepareBird ( ) ; begin
50333: LD_INT 0
50335: PPUSH
// uc_side := 0 ;
50336: LD_ADDR_OWVAR 20
50340: PUSH
50341: LD_INT 0
50343: ST_TO_ADDR
// uc_nation := 0 ;
50344: LD_ADDR_OWVAR 21
50348: PUSH
50349: LD_INT 0
50351: ST_TO_ADDR
// InitHc ;
50352: CALL_OW 19
// hc_class := class_phororhacos ;
50356: LD_ADDR_OWVAR 28
50360: PUSH
50361: LD_INT 18
50363: ST_TO_ADDR
// hc_gallery :=  ;
50364: LD_ADDR_OWVAR 33
50368: PUSH
50369: LD_STRING 
50371: ST_TO_ADDR
// hc_name :=  ;
50372: LD_ADDR_OWVAR 26
50376: PUSH
50377: LD_STRING 
50379: ST_TO_ADDR
// end ;
50380: LD_VAR 0 1
50384: RET
// export function PrepareHorse ( ) ; begin
50385: LD_INT 0
50387: PPUSH
// uc_side := 0 ;
50388: LD_ADDR_OWVAR 20
50392: PUSH
50393: LD_INT 0
50395: ST_TO_ADDR
// uc_nation := 0 ;
50396: LD_ADDR_OWVAR 21
50400: PUSH
50401: LD_INT 0
50403: ST_TO_ADDR
// InitHc ;
50404: CALL_OW 19
// hc_class := class_horse ;
50408: LD_ADDR_OWVAR 28
50412: PUSH
50413: LD_INT 21
50415: ST_TO_ADDR
// hc_gallery :=  ;
50416: LD_ADDR_OWVAR 33
50420: PUSH
50421: LD_STRING 
50423: ST_TO_ADDR
// hc_name :=  ;
50424: LD_ADDR_OWVAR 26
50428: PUSH
50429: LD_STRING 
50431: ST_TO_ADDR
// end ;
50432: LD_VAR 0 1
50436: RET
// export function PrepareMastodont ( ) ; begin
50437: LD_INT 0
50439: PPUSH
// uc_side := 0 ;
50440: LD_ADDR_OWVAR 20
50444: PUSH
50445: LD_INT 0
50447: ST_TO_ADDR
// uc_nation := 0 ;
50448: LD_ADDR_OWVAR 21
50452: PUSH
50453: LD_INT 0
50455: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50456: LD_ADDR_OWVAR 37
50460: PUSH
50461: LD_INT 31
50463: ST_TO_ADDR
// vc_control := control_rider ;
50464: LD_ADDR_OWVAR 38
50468: PUSH
50469: LD_INT 4
50471: ST_TO_ADDR
// end ;
50472: LD_VAR 0 1
50476: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50477: LD_INT 0
50479: PPUSH
50480: PPUSH
50481: PPUSH
// uc_side = 0 ;
50482: LD_ADDR_OWVAR 20
50486: PUSH
50487: LD_INT 0
50489: ST_TO_ADDR
// uc_nation = 0 ;
50490: LD_ADDR_OWVAR 21
50494: PUSH
50495: LD_INT 0
50497: ST_TO_ADDR
// InitHc_All ( ) ;
50498: CALL_OW 584
// InitVc ;
50502: CALL_OW 20
// if mastodonts then
50506: LD_VAR 0 6
50510: IFFALSE 50577
// for i = 1 to mastodonts do
50512: LD_ADDR_VAR 0 11
50516: PUSH
50517: DOUBLE
50518: LD_INT 1
50520: DEC
50521: ST_TO_ADDR
50522: LD_VAR 0 6
50526: PUSH
50527: FOR_TO
50528: IFFALSE 50575
// begin vc_chassis := 31 ;
50530: LD_ADDR_OWVAR 37
50534: PUSH
50535: LD_INT 31
50537: ST_TO_ADDR
// vc_control := control_rider ;
50538: LD_ADDR_OWVAR 38
50542: PUSH
50543: LD_INT 4
50545: ST_TO_ADDR
// animal := CreateVehicle ;
50546: LD_ADDR_VAR 0 12
50550: PUSH
50551: CALL_OW 45
50555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50556: LD_VAR 0 12
50560: PPUSH
50561: LD_VAR 0 8
50565: PPUSH
50566: LD_INT 0
50568: PPUSH
50569: CALL 52719 0 3
// end ;
50573: GO 50527
50575: POP
50576: POP
// if horses then
50577: LD_VAR 0 5
50581: IFFALSE 50648
// for i = 1 to horses do
50583: LD_ADDR_VAR 0 11
50587: PUSH
50588: DOUBLE
50589: LD_INT 1
50591: DEC
50592: ST_TO_ADDR
50593: LD_VAR 0 5
50597: PUSH
50598: FOR_TO
50599: IFFALSE 50646
// begin hc_class := 21 ;
50601: LD_ADDR_OWVAR 28
50605: PUSH
50606: LD_INT 21
50608: ST_TO_ADDR
// hc_gallery :=  ;
50609: LD_ADDR_OWVAR 33
50613: PUSH
50614: LD_STRING 
50616: ST_TO_ADDR
// animal := CreateHuman ;
50617: LD_ADDR_VAR 0 12
50621: PUSH
50622: CALL_OW 44
50626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50627: LD_VAR 0 12
50631: PPUSH
50632: LD_VAR 0 8
50636: PPUSH
50637: LD_INT 0
50639: PPUSH
50640: CALL 52719 0 3
// end ;
50644: GO 50598
50646: POP
50647: POP
// if birds then
50648: LD_VAR 0 1
50652: IFFALSE 50719
// for i = 1 to birds do
50654: LD_ADDR_VAR 0 11
50658: PUSH
50659: DOUBLE
50660: LD_INT 1
50662: DEC
50663: ST_TO_ADDR
50664: LD_VAR 0 1
50668: PUSH
50669: FOR_TO
50670: IFFALSE 50717
// begin hc_class := 18 ;
50672: LD_ADDR_OWVAR 28
50676: PUSH
50677: LD_INT 18
50679: ST_TO_ADDR
// hc_gallery =  ;
50680: LD_ADDR_OWVAR 33
50684: PUSH
50685: LD_STRING 
50687: ST_TO_ADDR
// animal := CreateHuman ;
50688: LD_ADDR_VAR 0 12
50692: PUSH
50693: CALL_OW 44
50697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50698: LD_VAR 0 12
50702: PPUSH
50703: LD_VAR 0 8
50707: PPUSH
50708: LD_INT 0
50710: PPUSH
50711: CALL 52719 0 3
// end ;
50715: GO 50669
50717: POP
50718: POP
// if tigers then
50719: LD_VAR 0 2
50723: IFFALSE 50807
// for i = 1 to tigers do
50725: LD_ADDR_VAR 0 11
50729: PUSH
50730: DOUBLE
50731: LD_INT 1
50733: DEC
50734: ST_TO_ADDR
50735: LD_VAR 0 2
50739: PUSH
50740: FOR_TO
50741: IFFALSE 50805
// begin hc_class = class_tiger ;
50743: LD_ADDR_OWVAR 28
50747: PUSH
50748: LD_INT 14
50750: ST_TO_ADDR
// hc_gallery =  ;
50751: LD_ADDR_OWVAR 33
50755: PUSH
50756: LD_STRING 
50758: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50759: LD_ADDR_OWVAR 35
50763: PUSH
50764: LD_INT 7
50766: NEG
50767: PPUSH
50768: LD_INT 7
50770: PPUSH
50771: CALL_OW 12
50775: ST_TO_ADDR
// animal := CreateHuman ;
50776: LD_ADDR_VAR 0 12
50780: PUSH
50781: CALL_OW 44
50785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50786: LD_VAR 0 12
50790: PPUSH
50791: LD_VAR 0 8
50795: PPUSH
50796: LD_INT 0
50798: PPUSH
50799: CALL 52719 0 3
// end ;
50803: GO 50740
50805: POP
50806: POP
// if apemans then
50807: LD_VAR 0 3
50811: IFFALSE 50934
// for i = 1 to apemans do
50813: LD_ADDR_VAR 0 11
50817: PUSH
50818: DOUBLE
50819: LD_INT 1
50821: DEC
50822: ST_TO_ADDR
50823: LD_VAR 0 3
50827: PUSH
50828: FOR_TO
50829: IFFALSE 50932
// begin hc_class = class_apeman ;
50831: LD_ADDR_OWVAR 28
50835: PUSH
50836: LD_INT 12
50838: ST_TO_ADDR
// hc_gallery =  ;
50839: LD_ADDR_OWVAR 33
50843: PUSH
50844: LD_STRING 
50846: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50847: LD_ADDR_OWVAR 35
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PPUSH
50856: LD_INT 2
50858: PPUSH
50859: CALL_OW 12
50863: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50864: LD_ADDR_OWVAR 31
50868: PUSH
50869: LD_INT 1
50871: PPUSH
50872: LD_INT 3
50874: PPUSH
50875: CALL_OW 12
50879: PUSH
50880: LD_INT 1
50882: PPUSH
50883: LD_INT 3
50885: PPUSH
50886: CALL_OW 12
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: ST_TO_ADDR
// animal := CreateHuman ;
50903: LD_ADDR_VAR 0 12
50907: PUSH
50908: CALL_OW 44
50912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50913: LD_VAR 0 12
50917: PPUSH
50918: LD_VAR 0 8
50922: PPUSH
50923: LD_INT 0
50925: PPUSH
50926: CALL 52719 0 3
// end ;
50930: GO 50828
50932: POP
50933: POP
// if enchidnas then
50934: LD_VAR 0 4
50938: IFFALSE 51005
// for i = 1 to enchidnas do
50940: LD_ADDR_VAR 0 11
50944: PUSH
50945: DOUBLE
50946: LD_INT 1
50948: DEC
50949: ST_TO_ADDR
50950: LD_VAR 0 4
50954: PUSH
50955: FOR_TO
50956: IFFALSE 51003
// begin hc_class = 13 ;
50958: LD_ADDR_OWVAR 28
50962: PUSH
50963: LD_INT 13
50965: ST_TO_ADDR
// hc_gallery =  ;
50966: LD_ADDR_OWVAR 33
50970: PUSH
50971: LD_STRING 
50973: ST_TO_ADDR
// animal := CreateHuman ;
50974: LD_ADDR_VAR 0 12
50978: PUSH
50979: CALL_OW 44
50983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50984: LD_VAR 0 12
50988: PPUSH
50989: LD_VAR 0 8
50993: PPUSH
50994: LD_INT 0
50996: PPUSH
50997: CALL 52719 0 3
// end ;
51001: GO 50955
51003: POP
51004: POP
// if fishes then
51005: LD_VAR 0 7
51009: IFFALSE 51076
// for i = 1 to fishes do
51011: LD_ADDR_VAR 0 11
51015: PUSH
51016: DOUBLE
51017: LD_INT 1
51019: DEC
51020: ST_TO_ADDR
51021: LD_VAR 0 7
51025: PUSH
51026: FOR_TO
51027: IFFALSE 51074
// begin hc_class = 20 ;
51029: LD_ADDR_OWVAR 28
51033: PUSH
51034: LD_INT 20
51036: ST_TO_ADDR
// hc_gallery =  ;
51037: LD_ADDR_OWVAR 33
51041: PUSH
51042: LD_STRING 
51044: ST_TO_ADDR
// animal := CreateHuman ;
51045: LD_ADDR_VAR 0 12
51049: PUSH
51050: CALL_OW 44
51054: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51055: LD_VAR 0 12
51059: PPUSH
51060: LD_VAR 0 9
51064: PPUSH
51065: LD_INT 0
51067: PPUSH
51068: CALL 52719 0 3
// end ;
51072: GO 51026
51074: POP
51075: POP
// end ;
51076: LD_VAR 0 10
51080: RET
// export function WantHeal ( sci , unit ) ; begin
51081: LD_INT 0
51083: PPUSH
// if GetTaskList ( sci ) > 0 then
51084: LD_VAR 0 1
51088: PPUSH
51089: CALL_OW 437
51093: PUSH
51094: LD_INT 0
51096: GREATER
51097: IFFALSE 51169
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51099: LD_VAR 0 1
51103: PPUSH
51104: CALL_OW 437
51108: PUSH
51109: LD_INT 1
51111: ARRAY
51112: PUSH
51113: LD_INT 1
51115: ARRAY
51116: PUSH
51117: LD_STRING l
51119: EQUAL
51120: IFFALSE 51147
51122: PUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: CALL_OW 437
51132: PUSH
51133: LD_INT 1
51135: ARRAY
51136: PUSH
51137: LD_INT 4
51139: ARRAY
51140: PUSH
51141: LD_VAR 0 2
51145: EQUAL
51146: AND
51147: IFFALSE 51159
// result := true else
51149: LD_ADDR_VAR 0 3
51153: PUSH
51154: LD_INT 1
51156: ST_TO_ADDR
51157: GO 51167
// result := false ;
51159: LD_ADDR_VAR 0 3
51163: PUSH
51164: LD_INT 0
51166: ST_TO_ADDR
// end else
51167: GO 51177
// result := false ;
51169: LD_ADDR_VAR 0 3
51173: PUSH
51174: LD_INT 0
51176: ST_TO_ADDR
// end ;
51177: LD_VAR 0 3
51181: RET
// export function HealTarget ( sci ) ; begin
51182: LD_INT 0
51184: PPUSH
// if not sci then
51185: LD_VAR 0 1
51189: NOT
51190: IFFALSE 51194
// exit ;
51192: GO 51259
// result := 0 ;
51194: LD_ADDR_VAR 0 2
51198: PUSH
51199: LD_INT 0
51201: ST_TO_ADDR
// if GetTaskList ( sci ) then
51202: LD_VAR 0 1
51206: PPUSH
51207: CALL_OW 437
51211: IFFALSE 51259
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51213: LD_VAR 0 1
51217: PPUSH
51218: CALL_OW 437
51222: PUSH
51223: LD_INT 1
51225: ARRAY
51226: PUSH
51227: LD_INT 1
51229: ARRAY
51230: PUSH
51231: LD_STRING l
51233: EQUAL
51234: IFFALSE 51259
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51236: LD_ADDR_VAR 0 2
51240: PUSH
51241: LD_VAR 0 1
51245: PPUSH
51246: CALL_OW 437
51250: PUSH
51251: LD_INT 1
51253: ARRAY
51254: PUSH
51255: LD_INT 4
51257: ARRAY
51258: ST_TO_ADDR
// end ;
51259: LD_VAR 0 2
51263: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51264: LD_INT 0
51266: PPUSH
51267: PPUSH
51268: PPUSH
51269: PPUSH
// if not base_units then
51270: LD_VAR 0 1
51274: NOT
51275: IFFALSE 51279
// exit ;
51277: GO 51366
// result := false ;
51279: LD_ADDR_VAR 0 2
51283: PUSH
51284: LD_INT 0
51286: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51287: LD_ADDR_VAR 0 5
51291: PUSH
51292: LD_VAR 0 1
51296: PPUSH
51297: LD_INT 21
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PPUSH
51307: CALL_OW 72
51311: ST_TO_ADDR
// if not tmp then
51312: LD_VAR 0 5
51316: NOT
51317: IFFALSE 51321
// exit ;
51319: GO 51366
// for i in tmp do
51321: LD_ADDR_VAR 0 3
51325: PUSH
51326: LD_VAR 0 5
51330: PUSH
51331: FOR_IN
51332: IFFALSE 51364
// begin result := EnemyInRange ( i , 22 ) ;
51334: LD_ADDR_VAR 0 2
51338: PUSH
51339: LD_VAR 0 3
51343: PPUSH
51344: LD_INT 22
51346: PPUSH
51347: CALL 48791 0 2
51351: ST_TO_ADDR
// if result then
51352: LD_VAR 0 2
51356: IFFALSE 51362
// exit ;
51358: POP
51359: POP
51360: GO 51366
// end ;
51362: GO 51331
51364: POP
51365: POP
// end ;
51366: LD_VAR 0 2
51370: RET
// export function FilterByTag ( units , tag ) ; begin
51371: LD_INT 0
51373: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51374: LD_ADDR_VAR 0 3
51378: PUSH
51379: LD_VAR 0 1
51383: PPUSH
51384: LD_INT 120
51386: PUSH
51387: LD_VAR 0 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PPUSH
51396: CALL_OW 72
51400: ST_TO_ADDR
// end ;
51401: LD_VAR 0 3
51405: RET
// export function IsDriver ( un ) ; begin
51406: LD_INT 0
51408: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51409: LD_ADDR_VAR 0 2
51413: PUSH
51414: LD_VAR 0 1
51418: PUSH
51419: LD_INT 55
51421: PUSH
51422: EMPTY
51423: LIST
51424: PPUSH
51425: CALL_OW 69
51429: IN
51430: ST_TO_ADDR
// end ;
51431: LD_VAR 0 2
51435: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51436: LD_INT 0
51438: PPUSH
51439: PPUSH
// list := [ ] ;
51440: LD_ADDR_VAR 0 5
51444: PUSH
51445: EMPTY
51446: ST_TO_ADDR
// case d of 0 :
51447: LD_VAR 0 3
51451: PUSH
51452: LD_INT 0
51454: DOUBLE
51455: EQUAL
51456: IFTRUE 51460
51458: GO 51593
51460: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51461: LD_ADDR_VAR 0 5
51465: PUSH
51466: LD_VAR 0 1
51470: PUSH
51471: LD_INT 4
51473: MINUS
51474: PUSH
51475: LD_VAR 0 2
51479: PUSH
51480: LD_INT 4
51482: MINUS
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: PUSH
51492: LD_VAR 0 1
51496: PUSH
51497: LD_INT 3
51499: MINUS
51500: PUSH
51501: LD_VAR 0 2
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: PUSH
51514: LD_VAR 0 1
51518: PUSH
51519: LD_INT 4
51521: PLUS
51522: PUSH
51523: LD_VAR 0 2
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: PUSH
51536: LD_VAR 0 1
51540: PUSH
51541: LD_INT 3
51543: PLUS
51544: PUSH
51545: LD_VAR 0 2
51549: PUSH
51550: LD_INT 3
51552: PLUS
51553: PUSH
51554: LD_INT 5
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: PUSH
51562: LD_VAR 0 1
51566: PUSH
51567: LD_VAR 0 2
51571: PUSH
51572: LD_INT 4
51574: PLUS
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
// end ; 1 :
51591: GO 52291
51593: LD_INT 1
51595: DOUBLE
51596: EQUAL
51597: IFTRUE 51601
51599: GO 51734
51601: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51602: LD_ADDR_VAR 0 5
51606: PUSH
51607: LD_VAR 0 1
51611: PUSH
51612: LD_VAR 0 2
51616: PUSH
51617: LD_INT 4
51619: MINUS
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: PUSH
51629: LD_VAR 0 1
51633: PUSH
51634: LD_INT 3
51636: MINUS
51637: PUSH
51638: LD_VAR 0 2
51642: PUSH
51643: LD_INT 3
51645: MINUS
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: LD_VAR 0 1
51659: PUSH
51660: LD_INT 4
51662: MINUS
51663: PUSH
51664: LD_VAR 0 2
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: LIST
51676: PUSH
51677: LD_VAR 0 1
51681: PUSH
51682: LD_VAR 0 2
51686: PUSH
51687: LD_INT 3
51689: PLUS
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: PUSH
51699: LD_VAR 0 1
51703: PUSH
51704: LD_INT 4
51706: PLUS
51707: PUSH
51708: LD_VAR 0 2
51712: PUSH
51713: LD_INT 4
51715: PLUS
51716: PUSH
51717: LD_INT 5
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// end ; 2 :
51732: GO 52291
51734: LD_INT 2
51736: DOUBLE
51737: EQUAL
51738: IFTRUE 51742
51740: GO 51871
51742: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51743: LD_ADDR_VAR 0 5
51747: PUSH
51748: LD_VAR 0 1
51752: PUSH
51753: LD_VAR 0 2
51757: PUSH
51758: LD_INT 3
51760: MINUS
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: PUSH
51770: LD_VAR 0 1
51774: PUSH
51775: LD_INT 4
51777: PLUS
51778: PUSH
51779: LD_VAR 0 2
51783: PUSH
51784: LD_INT 4
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: PUSH
51792: LD_VAR 0 1
51796: PUSH
51797: LD_VAR 0 2
51801: PUSH
51802: LD_INT 4
51804: PLUS
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: PUSH
51814: LD_VAR 0 1
51818: PUSH
51819: LD_INT 3
51821: MINUS
51822: PUSH
51823: LD_VAR 0 2
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: PUSH
51836: LD_VAR 0 1
51840: PUSH
51841: LD_INT 4
51843: MINUS
51844: PUSH
51845: LD_VAR 0 2
51849: PUSH
51850: LD_INT 4
51852: MINUS
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: ST_TO_ADDR
// end ; 3 :
51869: GO 52291
51871: LD_INT 3
51873: DOUBLE
51874: EQUAL
51875: IFTRUE 51879
51877: GO 52012
51879: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51880: LD_ADDR_VAR 0 5
51884: PUSH
51885: LD_VAR 0 1
51889: PUSH
51890: LD_INT 3
51892: PLUS
51893: PUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 4
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: PUSH
51907: LD_VAR 0 1
51911: PUSH
51912: LD_INT 4
51914: PLUS
51915: PUSH
51916: LD_VAR 0 2
51920: PUSH
51921: LD_INT 4
51923: PLUS
51924: PUSH
51925: LD_INT 5
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: PUSH
51933: LD_VAR 0 1
51937: PUSH
51938: LD_INT 4
51940: MINUS
51941: PUSH
51942: LD_VAR 0 2
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: PUSH
51955: LD_VAR 0 1
51959: PUSH
51960: LD_VAR 0 2
51964: PUSH
51965: LD_INT 4
51967: MINUS
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: PUSH
51977: LD_VAR 0 1
51981: PUSH
51982: LD_INT 3
51984: MINUS
51985: PUSH
51986: LD_VAR 0 2
51990: PUSH
51991: LD_INT 3
51993: MINUS
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// end ; 4 :
52010: GO 52291
52012: LD_INT 4
52014: DOUBLE
52015: EQUAL
52016: IFTRUE 52020
52018: GO 52153
52020: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52021: LD_ADDR_VAR 0 5
52025: PUSH
52026: LD_VAR 0 1
52030: PUSH
52031: LD_VAR 0 2
52035: PUSH
52036: LD_INT 4
52038: PLUS
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: LD_VAR 0 1
52052: PUSH
52053: LD_INT 3
52055: PLUS
52056: PUSH
52057: LD_VAR 0 2
52061: PUSH
52062: LD_INT 3
52064: PLUS
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: PUSH
52074: LD_VAR 0 1
52078: PUSH
52079: LD_INT 4
52081: PLUS
52082: PUSH
52083: LD_VAR 0 2
52087: PUSH
52088: LD_INT 4
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: PUSH
52096: LD_VAR 0 1
52100: PUSH
52101: LD_VAR 0 2
52105: PUSH
52106: LD_INT 3
52108: MINUS
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: PUSH
52118: LD_VAR 0 1
52122: PUSH
52123: LD_INT 4
52125: MINUS
52126: PUSH
52127: LD_VAR 0 2
52131: PUSH
52132: LD_INT 4
52134: MINUS
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: ST_TO_ADDR
// end ; 5 :
52151: GO 52291
52153: LD_INT 5
52155: DOUBLE
52156: EQUAL
52157: IFTRUE 52161
52159: GO 52290
52161: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52162: LD_ADDR_VAR 0 5
52166: PUSH
52167: LD_VAR 0 1
52171: PUSH
52172: LD_INT 4
52174: MINUS
52175: PUSH
52176: LD_VAR 0 2
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: PUSH
52189: LD_VAR 0 1
52193: PUSH
52194: LD_VAR 0 2
52198: PUSH
52199: LD_INT 4
52201: MINUS
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: PUSH
52211: LD_VAR 0 1
52215: PUSH
52216: LD_INT 4
52218: PLUS
52219: PUSH
52220: LD_VAR 0 2
52224: PUSH
52225: LD_INT 4
52227: PLUS
52228: PUSH
52229: LD_INT 5
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: PUSH
52237: LD_VAR 0 1
52241: PUSH
52242: LD_INT 3
52244: PLUS
52245: PUSH
52246: LD_VAR 0 2
52250: PUSH
52251: LD_INT 4
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: PUSH
52259: LD_VAR 0 1
52263: PUSH
52264: LD_VAR 0 2
52268: PUSH
52269: LD_INT 3
52271: PLUS
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: ST_TO_ADDR
// end ; end ;
52288: GO 52291
52290: POP
// result := list ;
52291: LD_ADDR_VAR 0 4
52295: PUSH
52296: LD_VAR 0 5
52300: ST_TO_ADDR
// end ;
52301: LD_VAR 0 4
52305: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52306: LD_INT 0
52308: PPUSH
52309: PPUSH
52310: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52311: LD_VAR 0 1
52315: NOT
52316: IFTRUE 52344
52318: PUSH
52319: LD_VAR 0 2
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: LD_INT 4
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: IN
52342: NOT
52343: OR
52344: IFFALSE 52348
// exit ;
52346: GO 52431
// tmp := [ ] ;
52348: LD_ADDR_VAR 0 5
52352: PUSH
52353: EMPTY
52354: ST_TO_ADDR
// for i in units do
52355: LD_ADDR_VAR 0 4
52359: PUSH
52360: LD_VAR 0 1
52364: PUSH
52365: FOR_IN
52366: IFFALSE 52400
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52368: LD_ADDR_VAR 0 5
52372: PUSH
52373: LD_VAR 0 5
52377: PPUSH
52378: LD_VAR 0 4
52382: PPUSH
52383: LD_VAR 0 2
52387: PPUSH
52388: CALL_OW 259
52392: PPUSH
52393: CALL 53826 0 2
52397: ST_TO_ADDR
52398: GO 52365
52400: POP
52401: POP
// if not tmp then
52402: LD_VAR 0 5
52406: NOT
52407: IFFALSE 52411
// exit ;
52409: GO 52431
// result := SortListByListDesc ( units , tmp ) ;
52411: LD_ADDR_VAR 0 3
52415: PUSH
52416: LD_VAR 0 1
52420: PPUSH
52421: LD_VAR 0 5
52425: PPUSH
52426: CALL_OW 77
52430: ST_TO_ADDR
// end ;
52431: LD_VAR 0 3
52435: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52436: LD_INT 0
52438: PPUSH
52439: PPUSH
52440: PPUSH
// result := false ;
52441: LD_ADDR_VAR 0 3
52445: PUSH
52446: LD_INT 0
52448: ST_TO_ADDR
// if not building then
52449: LD_VAR 0 2
52453: NOT
52454: IFFALSE 52458
// exit ;
52456: GO 52602
// x := GetX ( building ) ;
52458: LD_ADDR_VAR 0 4
52462: PUSH
52463: LD_VAR 0 2
52467: PPUSH
52468: CALL_OW 250
52472: ST_TO_ADDR
// y := GetY ( building ) ;
52473: LD_ADDR_VAR 0 5
52477: PUSH
52478: LD_VAR 0 2
52482: PPUSH
52483: CALL_OW 251
52487: ST_TO_ADDR
// if not x or not y then
52488: LD_VAR 0 4
52492: NOT
52493: IFTRUE 52502
52495: PUSH
52496: LD_VAR 0 5
52500: NOT
52501: OR
52502: IFFALSE 52506
// exit ;
52504: GO 52602
// if GetTaskList ( unit ) then
52506: LD_VAR 0 1
52510: PPUSH
52511: CALL_OW 437
52515: IFFALSE 52602
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52517: LD_STRING e
52519: PUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: CALL_OW 437
52529: PUSH
52530: LD_INT 1
52532: ARRAY
52533: PUSH
52534: LD_INT 1
52536: ARRAY
52537: EQUAL
52538: IFFALSE 52565
52540: PUSH
52541: LD_VAR 0 4
52545: PUSH
52546: LD_VAR 0 1
52550: PPUSH
52551: CALL_OW 437
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: PUSH
52560: LD_INT 2
52562: ARRAY
52563: EQUAL
52564: AND
52565: IFFALSE 52592
52567: PUSH
52568: LD_VAR 0 5
52572: PUSH
52573: LD_VAR 0 1
52577: PPUSH
52578: CALL_OW 437
52582: PUSH
52583: LD_INT 1
52585: ARRAY
52586: PUSH
52587: LD_INT 3
52589: ARRAY
52590: EQUAL
52591: AND
52592: IFFALSE 52602
// result := true end ;
52594: LD_ADDR_VAR 0 3
52598: PUSH
52599: LD_INT 1
52601: ST_TO_ADDR
// end ;
52602: LD_VAR 0 3
52606: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52607: LD_INT 0
52609: PPUSH
// result := false ;
52610: LD_ADDR_VAR 0 4
52614: PUSH
52615: LD_INT 0
52617: ST_TO_ADDR
// if GetTaskList ( unit ) then
52618: LD_VAR 0 1
52622: PPUSH
52623: CALL_OW 437
52627: IFFALSE 52714
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52629: LD_STRING M
52631: PUSH
52632: LD_VAR 0 1
52636: PPUSH
52637: CALL_OW 437
52641: PUSH
52642: LD_INT 1
52644: ARRAY
52645: PUSH
52646: LD_INT 1
52648: ARRAY
52649: EQUAL
52650: IFFALSE 52677
52652: PUSH
52653: LD_VAR 0 2
52657: PUSH
52658: LD_VAR 0 1
52662: PPUSH
52663: CALL_OW 437
52667: PUSH
52668: LD_INT 1
52670: ARRAY
52671: PUSH
52672: LD_INT 2
52674: ARRAY
52675: EQUAL
52676: AND
52677: IFFALSE 52704
52679: PUSH
52680: LD_VAR 0 3
52684: PUSH
52685: LD_VAR 0 1
52689: PPUSH
52690: CALL_OW 437
52694: PUSH
52695: LD_INT 1
52697: ARRAY
52698: PUSH
52699: LD_INT 3
52701: ARRAY
52702: EQUAL
52703: AND
52704: IFFALSE 52714
// result := true ;
52706: LD_ADDR_VAR 0 4
52710: PUSH
52711: LD_INT 1
52713: ST_TO_ADDR
// end ; end ;
52714: LD_VAR 0 4
52718: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52719: LD_INT 0
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
// if not unit or not area then
52725: LD_VAR 0 1
52729: NOT
52730: IFTRUE 52739
52732: PUSH
52733: LD_VAR 0 2
52737: NOT
52738: OR
52739: IFFALSE 52743
// exit ;
52741: GO 52919
// tmp := AreaToList ( area , i ) ;
52743: LD_ADDR_VAR 0 6
52747: PUSH
52748: LD_VAR 0 2
52752: PPUSH
52753: LD_VAR 0 5
52757: PPUSH
52758: CALL_OW 517
52762: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52763: LD_ADDR_VAR 0 5
52767: PUSH
52768: DOUBLE
52769: LD_INT 1
52771: DEC
52772: ST_TO_ADDR
52773: LD_VAR 0 6
52777: PUSH
52778: LD_INT 1
52780: ARRAY
52781: PUSH
52782: FOR_TO
52783: IFFALSE 52917
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52785: LD_ADDR_VAR 0 7
52789: PUSH
52790: LD_VAR 0 6
52794: PUSH
52795: LD_INT 1
52797: ARRAY
52798: PUSH
52799: LD_VAR 0 5
52803: ARRAY
52804: PUSH
52805: LD_VAR 0 6
52809: PUSH
52810: LD_INT 2
52812: ARRAY
52813: PUSH
52814: LD_VAR 0 5
52818: ARRAY
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52824: LD_INT 92
52826: PUSH
52827: LD_VAR 0 7
52831: PUSH
52832: LD_INT 1
52834: ARRAY
52835: PUSH
52836: LD_VAR 0 7
52840: PUSH
52841: LD_INT 2
52843: ARRAY
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: PPUSH
52854: CALL_OW 69
52858: PUSH
52859: LD_INT 0
52861: EQUAL
52862: IFFALSE 52915
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52864: LD_VAR 0 1
52868: PPUSH
52869: LD_VAR 0 7
52873: PUSH
52874: LD_INT 1
52876: ARRAY
52877: PPUSH
52878: LD_VAR 0 7
52882: PUSH
52883: LD_INT 2
52885: ARRAY
52886: PPUSH
52887: LD_VAR 0 3
52891: PPUSH
52892: CALL_OW 48
// result := IsPlaced ( unit ) ;
52896: LD_ADDR_VAR 0 4
52900: PUSH
52901: LD_VAR 0 1
52905: PPUSH
52906: CALL_OW 305
52910: ST_TO_ADDR
// exit ;
52911: POP
52912: POP
52913: GO 52919
// end ; end ;
52915: GO 52782
52917: POP
52918: POP
// end ;
52919: LD_VAR 0 4
52923: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52924: LD_INT 0
52926: PPUSH
52927: PPUSH
52928: PPUSH
// if not side or side > 8 then
52929: LD_VAR 0 1
52933: NOT
52934: IFTRUE 52946
52936: PUSH
52937: LD_VAR 0 1
52941: PUSH
52942: LD_INT 8
52944: GREATER
52945: OR
52946: IFFALSE 52950
// exit ;
52948: GO 53137
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52950: LD_ADDR_VAR 0 4
52954: PUSH
52955: LD_INT 22
52957: PUSH
52958: LD_VAR 0 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 21
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PPUSH
52981: CALL_OW 69
52985: ST_TO_ADDR
// if not tmp then
52986: LD_VAR 0 4
52990: NOT
52991: IFFALSE 52995
// exit ;
52993: GO 53137
// enable_addtolog := true ;
52995: LD_ADDR_OWVAR 81
52999: PUSH
53000: LD_INT 1
53002: ST_TO_ADDR
// AddToLog ( [ ) ;
53003: LD_STRING [
53005: PPUSH
53006: CALL_OW 561
// for i in tmp do
53010: LD_ADDR_VAR 0 3
53014: PUSH
53015: LD_VAR 0 4
53019: PUSH
53020: FOR_IN
53021: IFFALSE 53128
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53023: LD_STRING [
53025: PUSH
53026: LD_VAR 0 3
53030: PPUSH
53031: CALL_OW 266
53035: STR
53036: PUSH
53037: LD_STRING , 
53039: STR
53040: PUSH
53041: LD_VAR 0 3
53045: PPUSH
53046: CALL_OW 250
53050: STR
53051: PUSH
53052: LD_STRING , 
53054: STR
53055: PUSH
53056: LD_VAR 0 3
53060: PPUSH
53061: CALL_OW 251
53065: STR
53066: PUSH
53067: LD_STRING , 
53069: STR
53070: PUSH
53071: LD_VAR 0 3
53075: PPUSH
53076: CALL_OW 254
53080: STR
53081: PUSH
53082: LD_STRING , 
53084: STR
53085: PUSH
53086: LD_VAR 0 3
53090: PPUSH
53091: LD_INT 1
53093: PPUSH
53094: CALL_OW 268
53098: STR
53099: PUSH
53100: LD_STRING , 
53102: STR
53103: PUSH
53104: LD_VAR 0 3
53108: PPUSH
53109: LD_INT 2
53111: PPUSH
53112: CALL_OW 268
53116: STR
53117: PUSH
53118: LD_STRING ],
53120: STR
53121: PPUSH
53122: CALL_OW 561
// end ;
53126: GO 53020
53128: POP
53129: POP
// AddToLog ( ]; ) ;
53130: LD_STRING ];
53132: PPUSH
53133: CALL_OW 561
// end ;
53137: LD_VAR 0 2
53141: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53142: LD_INT 0
53144: PPUSH
53145: PPUSH
53146: PPUSH
53147: PPUSH
53148: PPUSH
// if not area or not rate or not max then
53149: LD_VAR 0 1
53153: NOT
53154: IFTRUE 53163
53156: PUSH
53157: LD_VAR 0 2
53161: NOT
53162: OR
53163: IFTRUE 53172
53165: PUSH
53166: LD_VAR 0 4
53170: NOT
53171: OR
53172: IFFALSE 53176
// exit ;
53174: GO 53365
// while 1 do
53176: LD_INT 1
53178: IFFALSE 53365
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53180: LD_ADDR_VAR 0 9
53184: PUSH
53185: LD_VAR 0 1
53189: PPUSH
53190: LD_INT 1
53192: PPUSH
53193: CALL_OW 287
53197: PUSH
53198: LD_INT 10
53200: MUL
53201: ST_TO_ADDR
// r := rate / 10 ;
53202: LD_ADDR_VAR 0 7
53206: PUSH
53207: LD_VAR 0 2
53211: PUSH
53212: LD_INT 10
53214: DIVREAL
53215: ST_TO_ADDR
// time := 1 1$00 ;
53216: LD_ADDR_VAR 0 8
53220: PUSH
53221: LD_INT 2100
53223: ST_TO_ADDR
// if amount < min then
53224: LD_VAR 0 9
53228: PUSH
53229: LD_VAR 0 3
53233: LESS
53234: IFFALSE 53252
// r := r * 2 else
53236: LD_ADDR_VAR 0 7
53240: PUSH
53241: LD_VAR 0 7
53245: PUSH
53246: LD_INT 2
53248: MUL
53249: ST_TO_ADDR
53250: GO 53278
// if amount > max then
53252: LD_VAR 0 9
53256: PUSH
53257: LD_VAR 0 4
53261: GREATER
53262: IFFALSE 53278
// r := r / 2 ;
53264: LD_ADDR_VAR 0 7
53268: PUSH
53269: LD_VAR 0 7
53273: PUSH
53274: LD_INT 2
53276: DIVREAL
53277: ST_TO_ADDR
// time := time / r ;
53278: LD_ADDR_VAR 0 8
53282: PUSH
53283: LD_VAR 0 8
53287: PUSH
53288: LD_VAR 0 7
53292: DIVREAL
53293: ST_TO_ADDR
// if time < 0 then
53294: LD_VAR 0 8
53298: PUSH
53299: LD_INT 0
53301: LESS
53302: IFFALSE 53319
// time := time * - 1 ;
53304: LD_ADDR_VAR 0 8
53308: PUSH
53309: LD_VAR 0 8
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: MUL
53318: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53319: LD_VAR 0 8
53323: PUSH
53324: LD_INT 35
53326: PPUSH
53327: LD_INT 875
53329: PPUSH
53330: CALL_OW 12
53334: PLUS
53335: PPUSH
53336: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53340: LD_INT 1
53342: PPUSH
53343: LD_INT 5
53345: PPUSH
53346: CALL_OW 12
53350: PPUSH
53351: LD_VAR 0 1
53355: PPUSH
53356: LD_INT 1
53358: PPUSH
53359: CALL_OW 55
// end ;
53363: GO 53176
// end ;
53365: LD_VAR 0 5
53369: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53370: LD_INT 0
53372: PPUSH
53373: PPUSH
53374: PPUSH
53375: PPUSH
53376: PPUSH
53377: PPUSH
53378: PPUSH
53379: PPUSH
// if not turrets or not factories then
53380: LD_VAR 0 1
53384: NOT
53385: IFTRUE 53394
53387: PUSH
53388: LD_VAR 0 2
53392: NOT
53393: OR
53394: IFFALSE 53398
// exit ;
53396: GO 53705
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53398: LD_ADDR_VAR 0 10
53402: PUSH
53403: LD_INT 5
53405: PUSH
53406: LD_INT 6
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 4
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: LD_INT 5
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 24
53440: PUSH
53441: LD_INT 25
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 23
53450: PUSH
53451: LD_INT 27
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 42
53464: PUSH
53465: LD_INT 43
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 44
53474: PUSH
53475: LD_INT 46
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 45
53484: PUSH
53485: LD_INT 47
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// result := [ ] ;
53502: LD_ADDR_VAR 0 3
53506: PUSH
53507: EMPTY
53508: ST_TO_ADDR
// for i in turrets do
53509: LD_ADDR_VAR 0 4
53513: PUSH
53514: LD_VAR 0 1
53518: PUSH
53519: FOR_IN
53520: IFFALSE 53703
// begin nat := GetNation ( i ) ;
53522: LD_ADDR_VAR 0 7
53526: PUSH
53527: LD_VAR 0 4
53531: PPUSH
53532: CALL_OW 248
53536: ST_TO_ADDR
// weapon := 0 ;
53537: LD_ADDR_VAR 0 8
53541: PUSH
53542: LD_INT 0
53544: ST_TO_ADDR
// if not nat then
53545: LD_VAR 0 7
53549: NOT
53550: IFFALSE 53554
// continue ;
53552: GO 53519
// for j in list [ nat ] do
53554: LD_ADDR_VAR 0 5
53558: PUSH
53559: LD_VAR 0 10
53563: PUSH
53564: LD_VAR 0 7
53568: ARRAY
53569: PUSH
53570: FOR_IN
53571: IFFALSE 53612
// if GetBWeapon ( i ) = j [ 1 ] then
53573: LD_VAR 0 4
53577: PPUSH
53578: CALL_OW 269
53582: PUSH
53583: LD_VAR 0 5
53587: PUSH
53588: LD_INT 1
53590: ARRAY
53591: EQUAL
53592: IFFALSE 53610
// begin weapon := j [ 2 ] ;
53594: LD_ADDR_VAR 0 8
53598: PUSH
53599: LD_VAR 0 5
53603: PUSH
53604: LD_INT 2
53606: ARRAY
53607: ST_TO_ADDR
// break ;
53608: GO 53612
// end ;
53610: GO 53570
53612: POP
53613: POP
// if not weapon then
53614: LD_VAR 0 8
53618: NOT
53619: IFFALSE 53623
// continue ;
53621: GO 53519
// for k in factories do
53623: LD_ADDR_VAR 0 6
53627: PUSH
53628: LD_VAR 0 2
53632: PUSH
53633: FOR_IN
53634: IFFALSE 53699
// begin weapons := AvailableWeaponList ( k ) ;
53636: LD_ADDR_VAR 0 9
53640: PUSH
53641: LD_VAR 0 6
53645: PPUSH
53646: CALL_OW 478
53650: ST_TO_ADDR
// if not weapons then
53651: LD_VAR 0 9
53655: NOT
53656: IFFALSE 53660
// continue ;
53658: GO 53633
// if weapon in weapons then
53660: LD_VAR 0 8
53664: PUSH
53665: LD_VAR 0 9
53669: IN
53670: IFFALSE 53697
// begin result := [ i , weapon ] ;
53672: LD_ADDR_VAR 0 3
53676: PUSH
53677: LD_VAR 0 4
53681: PUSH
53682: LD_VAR 0 8
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: ST_TO_ADDR
// exit ;
53691: POP
53692: POP
53693: POP
53694: POP
53695: GO 53705
// end ; end ;
53697: GO 53633
53699: POP
53700: POP
// end ;
53701: GO 53519
53703: POP
53704: POP
// end ;
53705: LD_VAR 0 3
53709: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53710: LD_INT 0
53712: PPUSH
// if not side or side > 8 then
53713: LD_VAR 0 3
53717: NOT
53718: IFTRUE 53730
53720: PUSH
53721: LD_VAR 0 3
53725: PUSH
53726: LD_INT 8
53728: GREATER
53729: OR
53730: IFFALSE 53734
// exit ;
53732: GO 53793
// if not range then
53734: LD_VAR 0 4
53738: NOT
53739: IFFALSE 53750
// range := - 12 ;
53741: LD_ADDR_VAR 0 4
53745: PUSH
53746: LD_INT 12
53748: NEG
53749: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53750: LD_VAR 0 1
53754: PPUSH
53755: LD_VAR 0 2
53759: PPUSH
53760: LD_VAR 0 3
53764: PPUSH
53765: LD_VAR 0 4
53769: PPUSH
53770: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53774: LD_VAR 0 1
53778: PPUSH
53779: LD_VAR 0 2
53783: PPUSH
53784: LD_VAR 0 3
53788: PPUSH
53789: CALL_OW 331
// end ;
53793: LD_VAR 0 5
53797: RET
// export function Video ( mode ) ; begin
53798: LD_INT 0
53800: PPUSH
// ingame_video = mode ;
53801: LD_ADDR_OWVAR 52
53805: PUSH
53806: LD_VAR 0 1
53810: ST_TO_ADDR
// interface_hidden = mode ;
53811: LD_ADDR_OWVAR 54
53815: PUSH
53816: LD_VAR 0 1
53820: ST_TO_ADDR
// end ;
53821: LD_VAR 0 2
53825: RET
// export function Join ( array , element ) ; begin
53826: LD_INT 0
53828: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53829: LD_ADDR_VAR 0 3
53833: PUSH
53834: LD_VAR 0 1
53838: PPUSH
53839: LD_VAR 0 1
53843: PUSH
53844: LD_INT 1
53846: PLUS
53847: PPUSH
53848: LD_VAR 0 2
53852: PPUSH
53853: CALL_OW 1
53857: ST_TO_ADDR
// end ;
53858: LD_VAR 0 3
53862: RET
// export function JoinUnion ( array , element ) ; begin
53863: LD_INT 0
53865: PPUSH
// result := array union element ;
53866: LD_ADDR_VAR 0 3
53870: PUSH
53871: LD_VAR 0 1
53875: PUSH
53876: LD_VAR 0 2
53880: UNION
53881: ST_TO_ADDR
// end ;
53882: LD_VAR 0 3
53886: RET
// export function GetBehemoths ( side ) ; begin
53887: LD_INT 0
53889: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53890: LD_ADDR_VAR 0 2
53894: PUSH
53895: LD_INT 22
53897: PUSH
53898: LD_VAR 0 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 31
53909: PUSH
53910: LD_INT 25
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PPUSH
53921: CALL_OW 69
53925: ST_TO_ADDR
// end ;
53926: LD_VAR 0 2
53930: RET
// export function Shuffle ( array ) ; var i , index ; begin
53931: LD_INT 0
53933: PPUSH
53934: PPUSH
53935: PPUSH
// result := [ ] ;
53936: LD_ADDR_VAR 0 2
53940: PUSH
53941: EMPTY
53942: ST_TO_ADDR
// if not array then
53943: LD_VAR 0 1
53947: NOT
53948: IFFALSE 53952
// exit ;
53950: GO 54051
// Randomize ;
53952: CALL_OW 10
// for i = array downto 1 do
53956: LD_ADDR_VAR 0 3
53960: PUSH
53961: DOUBLE
53962: LD_VAR 0 1
53966: INC
53967: ST_TO_ADDR
53968: LD_INT 1
53970: PUSH
53971: FOR_DOWNTO
53972: IFFALSE 54049
// begin index := rand ( 1 , array ) ;
53974: LD_ADDR_VAR 0 4
53978: PUSH
53979: LD_INT 1
53981: PPUSH
53982: LD_VAR 0 1
53986: PPUSH
53987: CALL_OW 12
53991: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53992: LD_ADDR_VAR 0 2
53996: PUSH
53997: LD_VAR 0 2
54001: PPUSH
54002: LD_VAR 0 2
54006: PUSH
54007: LD_INT 1
54009: PLUS
54010: PPUSH
54011: LD_VAR 0 1
54015: PUSH
54016: LD_VAR 0 4
54020: ARRAY
54021: PPUSH
54022: CALL_OW 2
54026: ST_TO_ADDR
// array := Delete ( array , index ) ;
54027: LD_ADDR_VAR 0 1
54031: PUSH
54032: LD_VAR 0 1
54036: PPUSH
54037: LD_VAR 0 4
54041: PPUSH
54042: CALL_OW 3
54046: ST_TO_ADDR
// end ;
54047: GO 53971
54049: POP
54050: POP
// end ;
54051: LD_VAR 0 2
54055: RET
// export function GetBaseMaterials ( base ) ; begin
54056: LD_INT 0
54058: PPUSH
// result := [ 0 , 0 , 0 ] ;
54059: LD_ADDR_VAR 0 2
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// if not base then
54078: LD_VAR 0 1
54082: NOT
54083: IFFALSE 54087
// exit ;
54085: GO 54136
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54087: LD_ADDR_VAR 0 2
54091: PUSH
54092: LD_VAR 0 1
54096: PPUSH
54097: LD_INT 1
54099: PPUSH
54100: CALL_OW 275
54104: PUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: LD_INT 2
54112: PPUSH
54113: CALL_OW 275
54117: PUSH
54118: LD_VAR 0 1
54122: PPUSH
54123: LD_INT 3
54125: PPUSH
54126: CALL_OW 275
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// end ;
54136: LD_VAR 0 2
54140: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54141: LD_INT 0
54143: PPUSH
54144: PPUSH
// result := array ;
54145: LD_ADDR_VAR 0 3
54149: PUSH
54150: LD_VAR 0 1
54154: ST_TO_ADDR
// if size >= result then
54155: LD_VAR 0 2
54159: PUSH
54160: LD_VAR 0 3
54164: GREATEREQUAL
54165: IFFALSE 54169
// exit ;
54167: GO 54219
// if size then
54169: LD_VAR 0 2
54173: IFFALSE 54219
// for i := array downto size do
54175: LD_ADDR_VAR 0 4
54179: PUSH
54180: DOUBLE
54181: LD_VAR 0 1
54185: INC
54186: ST_TO_ADDR
54187: LD_VAR 0 2
54191: PUSH
54192: FOR_DOWNTO
54193: IFFALSE 54217
// result := Delete ( result , result ) ;
54195: LD_ADDR_VAR 0 3
54199: PUSH
54200: LD_VAR 0 3
54204: PPUSH
54205: LD_VAR 0 3
54209: PPUSH
54210: CALL_OW 3
54214: ST_TO_ADDR
54215: GO 54192
54217: POP
54218: POP
// end ;
54219: LD_VAR 0 3
54223: RET
// export function ComExit ( unit ) ; var tmp ; begin
54224: LD_INT 0
54226: PPUSH
54227: PPUSH
// if not IsInUnit ( unit ) then
54228: LD_VAR 0 1
54232: PPUSH
54233: CALL_OW 310
54237: NOT
54238: IFFALSE 54242
// exit ;
54240: GO 54302
// tmp := IsInUnit ( unit ) ;
54242: LD_ADDR_VAR 0 3
54246: PUSH
54247: LD_VAR 0 1
54251: PPUSH
54252: CALL_OW 310
54256: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54257: LD_VAR 0 3
54261: PPUSH
54262: CALL_OW 247
54266: PUSH
54267: LD_INT 2
54269: EQUAL
54270: IFFALSE 54283
// ComExitVehicle ( unit ) else
54272: LD_VAR 0 1
54276: PPUSH
54277: CALL_OW 121
54281: GO 54292
// ComExitBuilding ( unit ) ;
54283: LD_VAR 0 1
54287: PPUSH
54288: CALL_OW 122
// result := tmp ;
54292: LD_ADDR_VAR 0 2
54296: PUSH
54297: LD_VAR 0 3
54301: ST_TO_ADDR
// end ;
54302: LD_VAR 0 2
54306: RET
// export function ComExitAll ( units ) ; var i ; begin
54307: LD_INT 0
54309: PPUSH
54310: PPUSH
// if not units then
54311: LD_VAR 0 1
54315: NOT
54316: IFFALSE 54320
// exit ;
54318: GO 54346
// for i in units do
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: LD_VAR 0 1
54329: PUSH
54330: FOR_IN
54331: IFFALSE 54344
// ComExit ( i ) ;
54333: LD_VAR 0 3
54337: PPUSH
54338: CALL 54224 0 1
54342: GO 54330
54344: POP
54345: POP
// end ;
54346: LD_VAR 0 2
54350: RET
// export function ResetHc ; begin
54351: LD_INT 0
54353: PPUSH
// InitHc ;
54354: CALL_OW 19
// hc_importance := 0 ;
54358: LD_ADDR_OWVAR 32
54362: PUSH
54363: LD_INT 0
54365: ST_TO_ADDR
// end ;
54366: LD_VAR 0 1
54370: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54371: LD_INT 0
54373: PPUSH
54374: PPUSH
54375: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54376: LD_ADDR_VAR 0 6
54380: PUSH
54381: LD_VAR 0 1
54385: PUSH
54386: LD_VAR 0 3
54390: PLUS
54391: PUSH
54392: LD_INT 2
54394: DIV
54395: ST_TO_ADDR
// if _x < 0 then
54396: LD_VAR 0 6
54400: PUSH
54401: LD_INT 0
54403: LESS
54404: IFFALSE 54421
// _x := _x * - 1 ;
54406: LD_ADDR_VAR 0 6
54410: PUSH
54411: LD_VAR 0 6
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: MUL
54420: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54421: LD_ADDR_VAR 0 7
54425: PUSH
54426: LD_VAR 0 2
54430: PUSH
54431: LD_VAR 0 4
54435: PLUS
54436: PUSH
54437: LD_INT 2
54439: DIV
54440: ST_TO_ADDR
// if _y < 0 then
54441: LD_VAR 0 7
54445: PUSH
54446: LD_INT 0
54448: LESS
54449: IFFALSE 54466
// _y := _y * - 1 ;
54451: LD_ADDR_VAR 0 7
54455: PUSH
54456: LD_VAR 0 7
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: MUL
54465: ST_TO_ADDR
// result := [ _x , _y ] ;
54466: LD_ADDR_VAR 0 5
54470: PUSH
54471: LD_VAR 0 6
54475: PUSH
54476: LD_VAR 0 7
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// end ;
54485: LD_VAR 0 5
54489: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54490: LD_INT 0
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
// task := GetTaskList ( unit ) ;
54496: LD_ADDR_VAR 0 7
54500: PUSH
54501: LD_VAR 0 1
54505: PPUSH
54506: CALL_OW 437
54510: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54511: LD_VAR 0 7
54515: NOT
54516: IFFALSE 54535
54518: PUSH
54519: LD_VAR 0 1
54523: PPUSH
54524: LD_VAR 0 2
54528: PPUSH
54529: CALL_OW 308
54533: NOT
54534: AND
54535: IFFALSE 54539
// exit ;
54537: GO 54657
// if IsInArea ( unit , area ) then
54539: LD_VAR 0 1
54543: PPUSH
54544: LD_VAR 0 2
54548: PPUSH
54549: CALL_OW 308
54553: IFFALSE 54571
// begin ComMoveToArea ( unit , goAway ) ;
54555: LD_VAR 0 1
54559: PPUSH
54560: LD_VAR 0 3
54564: PPUSH
54565: CALL_OW 113
// exit ;
54569: GO 54657
// end ; if task [ 1 ] [ 1 ] <> M then
54571: LD_VAR 0 7
54575: PUSH
54576: LD_INT 1
54578: ARRAY
54579: PUSH
54580: LD_INT 1
54582: ARRAY
54583: PUSH
54584: LD_STRING M
54586: NONEQUAL
54587: IFFALSE 54591
// exit ;
54589: GO 54657
// x := task [ 1 ] [ 2 ] ;
54591: LD_ADDR_VAR 0 5
54595: PUSH
54596: LD_VAR 0 7
54600: PUSH
54601: LD_INT 1
54603: ARRAY
54604: PUSH
54605: LD_INT 2
54607: ARRAY
54608: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54609: LD_ADDR_VAR 0 6
54613: PUSH
54614: LD_VAR 0 7
54618: PUSH
54619: LD_INT 1
54621: ARRAY
54622: PUSH
54623: LD_INT 3
54625: ARRAY
54626: ST_TO_ADDR
// if InArea ( x , y , area ) then
54627: LD_VAR 0 5
54631: PPUSH
54632: LD_VAR 0 6
54636: PPUSH
54637: LD_VAR 0 2
54641: PPUSH
54642: CALL_OW 309
54646: IFFALSE 54657
// ComStop ( unit ) ;
54648: LD_VAR 0 1
54652: PPUSH
54653: CALL_OW 141
// end ;
54657: LD_VAR 0 4
54661: RET
// export function Abs ( value ) ; begin
54662: LD_INT 0
54664: PPUSH
// result := value ;
54665: LD_ADDR_VAR 0 2
54669: PUSH
54670: LD_VAR 0 1
54674: ST_TO_ADDR
// if value < 0 then
54675: LD_VAR 0 1
54679: PUSH
54680: LD_INT 0
54682: LESS
54683: IFFALSE 54700
// result := value * - 1 ;
54685: LD_ADDR_VAR 0 2
54689: PUSH
54690: LD_VAR 0 1
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: MUL
54699: ST_TO_ADDR
// end ;
54700: LD_VAR 0 2
54704: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54705: LD_INT 0
54707: PPUSH
54708: PPUSH
54709: PPUSH
54710: PPUSH
54711: PPUSH
54712: PPUSH
54713: PPUSH
54714: PPUSH
// if not unit or not building then
54715: LD_VAR 0 1
54719: NOT
54720: IFTRUE 54729
54722: PUSH
54723: LD_VAR 0 2
54727: NOT
54728: OR
54729: IFFALSE 54733
// exit ;
54731: GO 54961
// x := GetX ( building ) ;
54733: LD_ADDR_VAR 0 4
54737: PUSH
54738: LD_VAR 0 2
54742: PPUSH
54743: CALL_OW 250
54747: ST_TO_ADDR
// y := GetY ( building ) ;
54748: LD_ADDR_VAR 0 6
54752: PUSH
54753: LD_VAR 0 2
54757: PPUSH
54758: CALL_OW 251
54762: ST_TO_ADDR
// d := GetDir ( building ) ;
54763: LD_ADDR_VAR 0 8
54767: PUSH
54768: LD_VAR 0 2
54772: PPUSH
54773: CALL_OW 254
54777: ST_TO_ADDR
// r := 4 ;
54778: LD_ADDR_VAR 0 9
54782: PUSH
54783: LD_INT 4
54785: ST_TO_ADDR
// for i := 1 to 5 do
54786: LD_ADDR_VAR 0 10
54790: PUSH
54791: DOUBLE
54792: LD_INT 1
54794: DEC
54795: ST_TO_ADDR
54796: LD_INT 5
54798: PUSH
54799: FOR_TO
54800: IFFALSE 54959
// begin _x := ShiftX ( x , d , r + i ) ;
54802: LD_ADDR_VAR 0 5
54806: PUSH
54807: LD_VAR 0 4
54811: PPUSH
54812: LD_VAR 0 8
54816: PPUSH
54817: LD_VAR 0 9
54821: PUSH
54822: LD_VAR 0 10
54826: PLUS
54827: PPUSH
54828: CALL_OW 272
54832: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54833: LD_ADDR_VAR 0 7
54837: PUSH
54838: LD_VAR 0 6
54842: PPUSH
54843: LD_VAR 0 8
54847: PPUSH
54848: LD_VAR 0 9
54852: PUSH
54853: LD_VAR 0 10
54857: PLUS
54858: PPUSH
54859: CALL_OW 273
54863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54864: LD_VAR 0 5
54868: PPUSH
54869: LD_VAR 0 7
54873: PPUSH
54874: CALL_OW 488
54878: IFFALSE 54913
54880: PUSH
54881: LD_VAR 0 5
54885: PPUSH
54886: LD_VAR 0 7
54890: PPUSH
54891: CALL_OW 428
54895: PPUSH
54896: CALL_OW 247
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: IN
54911: NOT
54912: AND
54913: IFFALSE 54957
// begin ComMoveXY ( unit , _x , _y ) ;
54915: LD_VAR 0 1
54919: PPUSH
54920: LD_VAR 0 5
54924: PPUSH
54925: LD_VAR 0 7
54929: PPUSH
54930: CALL_OW 111
// result := [ _x , _y ] ;
54934: LD_ADDR_VAR 0 3
54938: PUSH
54939: LD_VAR 0 5
54943: PUSH
54944: LD_VAR 0 7
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// exit ;
54953: POP
54954: POP
54955: GO 54961
// end ; end ;
54957: GO 54799
54959: POP
54960: POP
// end ;
54961: LD_VAR 0 3
54965: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54966: LD_INT 0
54968: PPUSH
54969: PPUSH
54970: PPUSH
// result := 0 ;
54971: LD_ADDR_VAR 0 3
54975: PUSH
54976: LD_INT 0
54978: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54979: LD_VAR 0 1
54983: PUSH
54984: LD_INT 0
54986: LESS
54987: IFTRUE 54999
54989: PUSH
54990: LD_VAR 0 1
54994: PUSH
54995: LD_INT 8
54997: GREATER
54998: OR
54999: IFTRUE 55011
55001: PUSH
55002: LD_VAR 0 2
55006: PUSH
55007: LD_INT 0
55009: LESS
55010: OR
55011: IFTRUE 55023
55013: PUSH
55014: LD_VAR 0 2
55018: PUSH
55019: LD_INT 8
55021: GREATER
55022: OR
55023: IFFALSE 55027
// exit ;
55025: GO 55102
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55027: LD_ADDR_VAR 0 4
55031: PUSH
55032: LD_INT 22
55034: PUSH
55035: LD_VAR 0 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PPUSH
55044: CALL_OW 69
55048: PUSH
55049: FOR_IN
55050: IFFALSE 55100
// begin un := UnitShoot ( i ) ;
55052: LD_ADDR_VAR 0 5
55056: PUSH
55057: LD_VAR 0 4
55061: PPUSH
55062: CALL_OW 504
55066: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55067: LD_VAR 0 5
55071: PPUSH
55072: CALL_OW 255
55076: PUSH
55077: LD_VAR 0 1
55081: EQUAL
55082: IFFALSE 55098
// begin result := un ;
55084: LD_ADDR_VAR 0 3
55088: PUSH
55089: LD_VAR 0 5
55093: ST_TO_ADDR
// exit ;
55094: POP
55095: POP
55096: GO 55102
// end ; end ;
55098: GO 55049
55100: POP
55101: POP
// end ;
55102: LD_VAR 0 3
55106: RET
// export function GetCargoBay ( units ) ; begin
55107: LD_INT 0
55109: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55110: LD_ADDR_VAR 0 2
55114: PUSH
55115: LD_VAR 0 1
55119: PPUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 34
55125: PUSH
55126: LD_INT 12
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 34
55135: PUSH
55136: LD_INT 51
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 34
55145: PUSH
55146: LD_INT 32
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 34
55155: PUSH
55156: LD_INT 89
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: PPUSH
55170: CALL_OW 72
55174: ST_TO_ADDR
// end ;
55175: LD_VAR 0 2
55179: RET
// export function Negate ( value ) ; begin
55180: LD_INT 0
55182: PPUSH
// result := not value ;
55183: LD_ADDR_VAR 0 2
55187: PUSH
55188: LD_VAR 0 1
55192: NOT
55193: ST_TO_ADDR
// end ;
55194: LD_VAR 0 2
55198: RET
// export function Inc ( value ) ; begin
55199: LD_INT 0
55201: PPUSH
// result := value + 1 ;
55202: LD_ADDR_VAR 0 2
55206: PUSH
55207: LD_VAR 0 1
55211: PUSH
55212: LD_INT 1
55214: PLUS
55215: ST_TO_ADDR
// end ;
55216: LD_VAR 0 2
55220: RET
// export function Dec ( value ) ; begin
55221: LD_INT 0
55223: PPUSH
// result := value - 1 ;
55224: LD_ADDR_VAR 0 2
55228: PUSH
55229: LD_VAR 0 1
55233: PUSH
55234: LD_INT 1
55236: MINUS
55237: ST_TO_ADDR
// end ;
55238: LD_VAR 0 2
55242: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55243: LD_INT 0
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
55250: PPUSH
55251: PPUSH
55252: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55253: LD_VAR 0 1
55257: PPUSH
55258: LD_VAR 0 2
55262: PPUSH
55263: CALL_OW 488
55267: NOT
55268: IFTRUE 55287
55270: PUSH
55271: LD_VAR 0 3
55275: PPUSH
55276: LD_VAR 0 4
55280: PPUSH
55281: CALL_OW 488
55285: NOT
55286: OR
55287: IFFALSE 55300
// begin result := - 1 ;
55289: LD_ADDR_VAR 0 5
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: ST_TO_ADDR
// exit ;
55298: GO 55535
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55300: LD_ADDR_VAR 0 12
55304: PUSH
55305: LD_VAR 0 1
55309: PPUSH
55310: LD_VAR 0 2
55314: PPUSH
55315: LD_VAR 0 3
55319: PPUSH
55320: LD_VAR 0 4
55324: PPUSH
55325: CALL 54371 0 4
55329: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55330: LD_ADDR_VAR 0 11
55334: PUSH
55335: LD_VAR 0 1
55339: PPUSH
55340: LD_VAR 0 2
55344: PPUSH
55345: LD_VAR 0 12
55349: PUSH
55350: LD_INT 1
55352: ARRAY
55353: PPUSH
55354: LD_VAR 0 12
55358: PUSH
55359: LD_INT 2
55361: ARRAY
55362: PPUSH
55363: CALL_OW 298
55367: ST_TO_ADDR
// distance := 9999 ;
55368: LD_ADDR_VAR 0 10
55372: PUSH
55373: LD_INT 9999
55375: ST_TO_ADDR
// for i := 0 to 5 do
55376: LD_ADDR_VAR 0 6
55380: PUSH
55381: DOUBLE
55382: LD_INT 0
55384: DEC
55385: ST_TO_ADDR
55386: LD_INT 5
55388: PUSH
55389: FOR_TO
55390: IFFALSE 55533
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55392: LD_ADDR_VAR 0 7
55396: PUSH
55397: LD_VAR 0 1
55401: PPUSH
55402: LD_VAR 0 6
55406: PPUSH
55407: LD_VAR 0 11
55411: PPUSH
55412: CALL_OW 272
55416: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55417: LD_ADDR_VAR 0 8
55421: PUSH
55422: LD_VAR 0 2
55426: PPUSH
55427: LD_VAR 0 6
55431: PPUSH
55432: LD_VAR 0 11
55436: PPUSH
55437: CALL_OW 273
55441: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55442: LD_VAR 0 7
55446: PPUSH
55447: LD_VAR 0 8
55451: PPUSH
55452: CALL_OW 488
55456: NOT
55457: IFFALSE 55461
// continue ;
55459: GO 55389
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55461: LD_ADDR_VAR 0 9
55465: PUSH
55466: LD_VAR 0 12
55470: PUSH
55471: LD_INT 1
55473: ARRAY
55474: PPUSH
55475: LD_VAR 0 12
55479: PUSH
55480: LD_INT 2
55482: ARRAY
55483: PPUSH
55484: LD_VAR 0 7
55488: PPUSH
55489: LD_VAR 0 8
55493: PPUSH
55494: CALL_OW 298
55498: ST_TO_ADDR
// if tmp < distance then
55499: LD_VAR 0 9
55503: PUSH
55504: LD_VAR 0 10
55508: LESS
55509: IFFALSE 55531
// begin result := i ;
55511: LD_ADDR_VAR 0 5
55515: PUSH
55516: LD_VAR 0 6
55520: ST_TO_ADDR
// distance := tmp ;
55521: LD_ADDR_VAR 0 10
55525: PUSH
55526: LD_VAR 0 9
55530: ST_TO_ADDR
// end ; end ;
55531: GO 55389
55533: POP
55534: POP
// end ;
55535: LD_VAR 0 5
55539: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55540: LD_INT 0
55542: PPUSH
55543: PPUSH
// if not driver or not IsInUnit ( driver ) then
55544: LD_VAR 0 1
55548: NOT
55549: IFTRUE 55563
55551: PUSH
55552: LD_VAR 0 1
55556: PPUSH
55557: CALL_OW 310
55561: NOT
55562: OR
55563: IFFALSE 55567
// exit ;
55565: GO 55657
// vehicle := IsInUnit ( driver ) ;
55567: LD_ADDR_VAR 0 3
55571: PUSH
55572: LD_VAR 0 1
55576: PPUSH
55577: CALL_OW 310
55581: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55582: LD_VAR 0 1
55586: PPUSH
55587: LD_STRING \
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: PUSH
55617: LD_STRING E
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_VAR 0 3
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PPUSH
55653: CALL_OW 446
// end ;
55657: LD_VAR 0 2
55661: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55662: LD_INT 0
55664: PPUSH
55665: PPUSH
// if not driver or not IsInUnit ( driver ) then
55666: LD_VAR 0 1
55670: NOT
55671: IFTRUE 55685
55673: PUSH
55674: LD_VAR 0 1
55678: PPUSH
55679: CALL_OW 310
55683: NOT
55684: OR
55685: IFFALSE 55689
// exit ;
55687: GO 55779
// vehicle := IsInUnit ( driver ) ;
55689: LD_ADDR_VAR 0 3
55693: PUSH
55694: LD_VAR 0 1
55698: PPUSH
55699: CALL_OW 310
55703: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55704: LD_VAR 0 1
55708: PPUSH
55709: LD_STRING \
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: PUSH
55739: LD_STRING E
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_VAR 0 3
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PPUSH
55775: CALL_OW 447
// end ;
55779: LD_VAR 0 2
55783: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55784: LD_INT 0
55786: PPUSH
55787: PPUSH
55788: PPUSH
// tmp := [ ] ;
55789: LD_ADDR_VAR 0 5
55793: PUSH
55794: EMPTY
55795: ST_TO_ADDR
// for i in units do
55796: LD_ADDR_VAR 0 4
55800: PUSH
55801: LD_VAR 0 1
55805: PUSH
55806: FOR_IN
55807: IFFALSE 55845
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55809: LD_ADDR_VAR 0 5
55813: PUSH
55814: LD_VAR 0 5
55818: PPUSH
55819: LD_VAR 0 5
55823: PUSH
55824: LD_INT 1
55826: PLUS
55827: PPUSH
55828: LD_VAR 0 4
55832: PPUSH
55833: CALL_OW 256
55837: PPUSH
55838: CALL_OW 2
55842: ST_TO_ADDR
55843: GO 55806
55845: POP
55846: POP
// if not tmp then
55847: LD_VAR 0 5
55851: NOT
55852: IFFALSE 55856
// exit ;
55854: GO 55904
// if asc then
55856: LD_VAR 0 2
55860: IFFALSE 55884
// result := SortListByListAsc ( units , tmp ) else
55862: LD_ADDR_VAR 0 3
55866: PUSH
55867: LD_VAR 0 1
55871: PPUSH
55872: LD_VAR 0 5
55876: PPUSH
55877: CALL_OW 76
55881: ST_TO_ADDR
55882: GO 55904
// result := SortListByListDesc ( units , tmp ) ;
55884: LD_ADDR_VAR 0 3
55888: PUSH
55889: LD_VAR 0 1
55893: PPUSH
55894: LD_VAR 0 5
55898: PPUSH
55899: CALL_OW 77
55903: ST_TO_ADDR
// end ;
55904: LD_VAR 0 3
55908: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55909: LD_INT 0
55911: PPUSH
55912: PPUSH
// task := GetTaskList ( mech ) ;
55913: LD_ADDR_VAR 0 4
55917: PUSH
55918: LD_VAR 0 1
55922: PPUSH
55923: CALL_OW 437
55927: ST_TO_ADDR
// if not task then
55928: LD_VAR 0 4
55932: NOT
55933: IFFALSE 55937
// exit ;
55935: GO 55981
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55937: LD_ADDR_VAR 0 3
55941: PUSH
55942: LD_VAR 0 4
55946: PUSH
55947: LD_INT 1
55949: ARRAY
55950: PUSH
55951: LD_INT 1
55953: ARRAY
55954: PUSH
55955: LD_STRING r
55957: EQUAL
55958: IFFALSE 55980
55960: PUSH
55961: LD_VAR 0 4
55965: PUSH
55966: LD_INT 1
55968: ARRAY
55969: PUSH
55970: LD_INT 4
55972: ARRAY
55973: PUSH
55974: LD_VAR 0 2
55978: EQUAL
55979: AND
55980: ST_TO_ADDR
// end ;
55981: LD_VAR 0 3
55985: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55986: LD_INT 0
55988: PPUSH
// SetDir ( unit , d ) ;
55989: LD_VAR 0 1
55993: PPUSH
55994: LD_VAR 0 4
55998: PPUSH
55999: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56003: LD_ADDR_VAR 0 6
56007: PUSH
56008: LD_VAR 0 1
56012: PPUSH
56013: LD_VAR 0 2
56017: PPUSH
56018: LD_VAR 0 3
56022: PPUSH
56023: LD_VAR 0 5
56027: PPUSH
56028: CALL_OW 48
56032: ST_TO_ADDR
// end ;
56033: LD_VAR 0 6
56037: RET
// export function ToNaturalNumber ( number ) ; begin
56038: LD_INT 0
56040: PPUSH
// result := number div 1 ;
56041: LD_ADDR_VAR 0 2
56045: PUSH
56046: LD_VAR 0 1
56050: PUSH
56051: LD_INT 1
56053: DIV
56054: ST_TO_ADDR
// if number < 0 then
56055: LD_VAR 0 1
56059: PUSH
56060: LD_INT 0
56062: LESS
56063: IFFALSE 56073
// result := 0 ;
56065: LD_ADDR_VAR 0 2
56069: PUSH
56070: LD_INT 0
56072: ST_TO_ADDR
// end ;
56073: LD_VAR 0 2
56077: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56078: LD_INT 0
56080: PPUSH
56081: PPUSH
56082: PPUSH
// if not buildings then
56083: LD_VAR 0 1
56087: NOT
56088: IFFALSE 56092
// exit ;
56090: GO 56207
// tmp := [ ] ;
56092: LD_ADDR_VAR 0 5
56096: PUSH
56097: EMPTY
56098: ST_TO_ADDR
// for b in buildings do
56099: LD_ADDR_VAR 0 4
56103: PUSH
56104: LD_VAR 0 1
56108: PUSH
56109: FOR_IN
56110: IFFALSE 56148
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56112: LD_ADDR_VAR 0 5
56116: PUSH
56117: LD_VAR 0 5
56121: PPUSH
56122: LD_VAR 0 5
56126: PUSH
56127: LD_INT 1
56129: PLUS
56130: PPUSH
56131: LD_VAR 0 4
56135: PPUSH
56136: CALL_OW 266
56140: PPUSH
56141: CALL_OW 1
56145: ST_TO_ADDR
56146: GO 56109
56148: POP
56149: POP
// if not tmp then
56150: LD_VAR 0 5
56154: NOT
56155: IFFALSE 56159
// exit ;
56157: GO 56207
// if asc then
56159: LD_VAR 0 2
56163: IFFALSE 56187
// result := SortListByListAsc ( buildings , tmp ) else
56165: LD_ADDR_VAR 0 3
56169: PUSH
56170: LD_VAR 0 1
56174: PPUSH
56175: LD_VAR 0 5
56179: PPUSH
56180: CALL_OW 76
56184: ST_TO_ADDR
56185: GO 56207
// result := SortListByListDesc ( buildings , tmp ) ;
56187: LD_ADDR_VAR 0 3
56191: PUSH
56192: LD_VAR 0 1
56196: PPUSH
56197: LD_VAR 0 5
56201: PPUSH
56202: CALL_OW 77
56206: ST_TO_ADDR
// end ;
56207: LD_VAR 0 3
56211: RET
// export function SortByClass ( units , class ) ; var un ; begin
56212: LD_INT 0
56214: PPUSH
56215: PPUSH
// if not units or not class then
56216: LD_VAR 0 1
56220: NOT
56221: IFTRUE 56230
56223: PUSH
56224: LD_VAR 0 2
56228: NOT
56229: OR
56230: IFFALSE 56234
// exit ;
56232: GO 56329
// result := [ ] ;
56234: LD_ADDR_VAR 0 3
56238: PUSH
56239: EMPTY
56240: ST_TO_ADDR
// for un in units do
56241: LD_ADDR_VAR 0 4
56245: PUSH
56246: LD_VAR 0 1
56250: PUSH
56251: FOR_IN
56252: IFFALSE 56327
// if GetClass ( un ) = class then
56254: LD_VAR 0 4
56258: PPUSH
56259: CALL_OW 257
56263: PUSH
56264: LD_VAR 0 2
56268: EQUAL
56269: IFFALSE 56296
// result := Insert ( result , 1 , un ) else
56271: LD_ADDR_VAR 0 3
56275: PUSH
56276: LD_VAR 0 3
56280: PPUSH
56281: LD_INT 1
56283: PPUSH
56284: LD_VAR 0 4
56288: PPUSH
56289: CALL_OW 2
56293: ST_TO_ADDR
56294: GO 56325
// result := Replace ( result , result + 1 , un ) ;
56296: LD_ADDR_VAR 0 3
56300: PUSH
56301: LD_VAR 0 3
56305: PPUSH
56306: LD_VAR 0 3
56310: PUSH
56311: LD_INT 1
56313: PLUS
56314: PPUSH
56315: LD_VAR 0 4
56319: PPUSH
56320: CALL_OW 1
56324: ST_TO_ADDR
56325: GO 56251
56327: POP
56328: POP
// end ;
56329: LD_VAR 0 3
56333: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56334: LD_INT 0
56336: PPUSH
56337: PPUSH
56338: PPUSH
56339: PPUSH
56340: PPUSH
56341: PPUSH
56342: PPUSH
// result := [ ] ;
56343: LD_ADDR_VAR 0 4
56347: PUSH
56348: EMPTY
56349: ST_TO_ADDR
// if x - r < 0 then
56350: LD_VAR 0 1
56354: PUSH
56355: LD_VAR 0 3
56359: MINUS
56360: PUSH
56361: LD_INT 0
56363: LESS
56364: IFFALSE 56376
// min_x := 0 else
56366: LD_ADDR_VAR 0 8
56370: PUSH
56371: LD_INT 0
56373: ST_TO_ADDR
56374: GO 56392
// min_x := x - r ;
56376: LD_ADDR_VAR 0 8
56380: PUSH
56381: LD_VAR 0 1
56385: PUSH
56386: LD_VAR 0 3
56390: MINUS
56391: ST_TO_ADDR
// if y - r < 0 then
56392: LD_VAR 0 2
56396: PUSH
56397: LD_VAR 0 3
56401: MINUS
56402: PUSH
56403: LD_INT 0
56405: LESS
56406: IFFALSE 56418
// min_y := 0 else
56408: LD_ADDR_VAR 0 7
56412: PUSH
56413: LD_INT 0
56415: ST_TO_ADDR
56416: GO 56434
// min_y := y - r ;
56418: LD_ADDR_VAR 0 7
56422: PUSH
56423: LD_VAR 0 2
56427: PUSH
56428: LD_VAR 0 3
56432: MINUS
56433: ST_TO_ADDR
// max_x := x + r ;
56434: LD_ADDR_VAR 0 9
56438: PUSH
56439: LD_VAR 0 1
56443: PUSH
56444: LD_VAR 0 3
56448: PLUS
56449: ST_TO_ADDR
// max_y := y + r ;
56450: LD_ADDR_VAR 0 10
56454: PUSH
56455: LD_VAR 0 2
56459: PUSH
56460: LD_VAR 0 3
56464: PLUS
56465: ST_TO_ADDR
// for _x = min_x to max_x do
56466: LD_ADDR_VAR 0 5
56470: PUSH
56471: DOUBLE
56472: LD_VAR 0 8
56476: DEC
56477: ST_TO_ADDR
56478: LD_VAR 0 9
56482: PUSH
56483: FOR_TO
56484: IFFALSE 56585
// for _y = min_y to max_y do
56486: LD_ADDR_VAR 0 6
56490: PUSH
56491: DOUBLE
56492: LD_VAR 0 7
56496: DEC
56497: ST_TO_ADDR
56498: LD_VAR 0 10
56502: PUSH
56503: FOR_TO
56504: IFFALSE 56581
// begin if not ValidHex ( _x , _y ) then
56506: LD_VAR 0 5
56510: PPUSH
56511: LD_VAR 0 6
56515: PPUSH
56516: CALL_OW 488
56520: NOT
56521: IFFALSE 56525
// continue ;
56523: GO 56503
// if GetResourceTypeXY ( _x , _y ) then
56525: LD_VAR 0 5
56529: PPUSH
56530: LD_VAR 0 6
56534: PPUSH
56535: CALL_OW 283
56539: IFFALSE 56579
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56541: LD_ADDR_VAR 0 4
56545: PUSH
56546: LD_VAR 0 4
56550: PPUSH
56551: LD_VAR 0 4
56555: PUSH
56556: LD_INT 1
56558: PLUS
56559: PPUSH
56560: LD_VAR 0 5
56564: PUSH
56565: LD_VAR 0 6
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PPUSH
56574: CALL_OW 1
56578: ST_TO_ADDR
// end ;
56579: GO 56503
56581: POP
56582: POP
56583: GO 56483
56585: POP
56586: POP
// end ;
56587: LD_VAR 0 4
56591: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56592: LD_INT 0
56594: PPUSH
56595: PPUSH
56596: PPUSH
56597: PPUSH
56598: PPUSH
56599: PPUSH
56600: PPUSH
56601: PPUSH
// if not units then
56602: LD_VAR 0 1
56606: NOT
56607: IFFALSE 56611
// exit ;
56609: GO 57143
// result := UnitFilter ( units , [ f_ok ] ) ;
56611: LD_ADDR_VAR 0 3
56615: PUSH
56616: LD_VAR 0 1
56620: PPUSH
56621: LD_INT 50
56623: PUSH
56624: EMPTY
56625: LIST
56626: PPUSH
56627: CALL_OW 72
56631: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56632: LD_ADDR_VAR 0 8
56636: PUSH
56637: LD_VAR 0 1
56641: PUSH
56642: LD_INT 1
56644: ARRAY
56645: PPUSH
56646: CALL_OW 255
56650: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56651: LD_ADDR_VAR 0 10
56655: PUSH
56656: LD_INT 29
56658: PUSH
56659: LD_INT 91
56661: PUSH
56662: LD_INT 49
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// if not result then
56670: LD_VAR 0 3
56674: NOT
56675: IFFALSE 56679
// exit ;
56677: GO 57143
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56679: LD_ADDR_VAR 0 5
56683: PUSH
56684: LD_INT 81
56686: PUSH
56687: LD_VAR 0 8
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PPUSH
56696: CALL_OW 69
56700: ST_TO_ADDR
// for i in result do
56701: LD_ADDR_VAR 0 4
56705: PUSH
56706: LD_VAR 0 3
56710: PUSH
56711: FOR_IN
56712: IFFALSE 57141
// begin tag := GetTag ( i ) + 1 ;
56714: LD_ADDR_VAR 0 9
56718: PUSH
56719: LD_VAR 0 4
56723: PPUSH
56724: CALL_OW 110
56728: PUSH
56729: LD_INT 1
56731: PLUS
56732: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56733: LD_ADDR_VAR 0 7
56737: PUSH
56738: LD_VAR 0 4
56742: PPUSH
56743: CALL_OW 250
56747: PPUSH
56748: LD_VAR 0 4
56752: PPUSH
56753: CALL_OW 251
56757: PPUSH
56758: LD_INT 4
56760: PPUSH
56761: CALL 56334 0 3
56765: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56766: LD_VAR 0 4
56770: PPUSH
56771: CALL_OW 247
56775: PUSH
56776: LD_INT 2
56778: EQUAL
56779: IFFALSE 56791
56781: PUSH
56782: LD_VAR 0 7
56786: PUSH
56787: LD_INT 2
56789: GREATER
56790: AND
56791: IFFALSE 56811
56793: PUSH
56794: LD_VAR 0 4
56798: PPUSH
56799: CALL_OW 264
56803: PUSH
56804: LD_VAR 0 10
56808: IN
56809: NOT
56810: AND
56811: IFFALSE 56850
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56813: LD_VAR 0 4
56817: PPUSH
56818: LD_VAR 0 7
56822: PUSH
56823: LD_INT 1
56825: ARRAY
56826: PUSH
56827: LD_INT 1
56829: ARRAY
56830: PPUSH
56831: LD_VAR 0 7
56835: PUSH
56836: LD_INT 1
56838: ARRAY
56839: PUSH
56840: LD_INT 2
56842: ARRAY
56843: PPUSH
56844: CALL_OW 116
56848: GO 57139
// if path > tag then
56850: LD_VAR 0 2
56854: PUSH
56855: LD_VAR 0 9
56859: GREATER
56860: IFFALSE 57068
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56862: LD_ADDR_VAR 0 6
56866: PUSH
56867: LD_VAR 0 5
56871: PPUSH
56872: LD_INT 91
56874: PUSH
56875: LD_VAR 0 4
56879: PUSH
56880: LD_INT 8
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: PPUSH
56888: CALL_OW 72
56892: ST_TO_ADDR
// if nearEnemy then
56893: LD_VAR 0 6
56897: IFFALSE 56966
// begin if GetWeapon ( i ) = ru_time_lapser then
56899: LD_VAR 0 4
56903: PPUSH
56904: CALL_OW 264
56908: PUSH
56909: LD_INT 49
56911: EQUAL
56912: IFFALSE 56940
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56914: LD_VAR 0 4
56918: PPUSH
56919: LD_VAR 0 6
56923: PPUSH
56924: LD_VAR 0 4
56928: PPUSH
56929: CALL_OW 74
56933: PPUSH
56934: CALL_OW 112
56938: GO 56964
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56940: LD_VAR 0 4
56944: PPUSH
56945: LD_VAR 0 6
56949: PPUSH
56950: LD_VAR 0 4
56954: PPUSH
56955: CALL_OW 74
56959: PPUSH
56960: CALL 58224 0 2
// end else
56964: GO 57066
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56966: LD_VAR 0 4
56970: PPUSH
56971: LD_VAR 0 2
56975: PUSH
56976: LD_VAR 0 9
56980: ARRAY
56981: PUSH
56982: LD_INT 1
56984: ARRAY
56985: PPUSH
56986: LD_VAR 0 2
56990: PUSH
56991: LD_VAR 0 9
56995: ARRAY
56996: PUSH
56997: LD_INT 2
56999: ARRAY
57000: PPUSH
57001: CALL_OW 297
57005: PUSH
57006: LD_INT 6
57008: GREATER
57009: IFFALSE 57052
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57011: LD_VAR 0 4
57015: PPUSH
57016: LD_VAR 0 2
57020: PUSH
57021: LD_VAR 0 9
57025: ARRAY
57026: PUSH
57027: LD_INT 1
57029: ARRAY
57030: PPUSH
57031: LD_VAR 0 2
57035: PUSH
57036: LD_VAR 0 9
57040: ARRAY
57041: PUSH
57042: LD_INT 2
57044: ARRAY
57045: PPUSH
57046: CALL_OW 114
57050: GO 57066
// SetTag ( i , tag ) ;
57052: LD_VAR 0 4
57056: PPUSH
57057: LD_VAR 0 9
57061: PPUSH
57062: CALL_OW 109
// end else
57066: GO 57139
// if enemy then
57068: LD_VAR 0 5
57072: IFFALSE 57139
// begin if GetWeapon ( i ) = ru_time_lapser then
57074: LD_VAR 0 4
57078: PPUSH
57079: CALL_OW 264
57083: PUSH
57084: LD_INT 49
57086: EQUAL
57087: IFFALSE 57115
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57089: LD_VAR 0 4
57093: PPUSH
57094: LD_VAR 0 5
57098: PPUSH
57099: LD_VAR 0 4
57103: PPUSH
57104: CALL_OW 74
57108: PPUSH
57109: CALL_OW 112
57113: GO 57139
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57115: LD_VAR 0 4
57119: PPUSH
57120: LD_VAR 0 5
57124: PPUSH
57125: LD_VAR 0 4
57129: PPUSH
57130: CALL_OW 74
57134: PPUSH
57135: CALL 58224 0 2
// end ; end ;
57139: GO 56711
57141: POP
57142: POP
// end ;
57143: LD_VAR 0 3
57147: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57148: LD_INT 0
57150: PPUSH
57151: PPUSH
57152: PPUSH
// if not unit or IsInUnit ( unit ) then
57153: LD_VAR 0 1
57157: NOT
57158: IFTRUE 57171
57160: PUSH
57161: LD_VAR 0 1
57165: PPUSH
57166: CALL_OW 310
57170: OR
57171: IFFALSE 57175
// exit ;
57173: GO 57266
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57175: LD_ADDR_VAR 0 4
57179: PUSH
57180: LD_VAR 0 1
57184: PPUSH
57185: CALL_OW 250
57189: PPUSH
57190: LD_VAR 0 2
57194: PPUSH
57195: LD_INT 1
57197: PPUSH
57198: CALL_OW 272
57202: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57203: LD_ADDR_VAR 0 5
57207: PUSH
57208: LD_VAR 0 1
57212: PPUSH
57213: CALL_OW 251
57217: PPUSH
57218: LD_VAR 0 2
57222: PPUSH
57223: LD_INT 1
57225: PPUSH
57226: CALL_OW 273
57230: ST_TO_ADDR
// if ValidHex ( x , y ) then
57231: LD_VAR 0 4
57235: PPUSH
57236: LD_VAR 0 5
57240: PPUSH
57241: CALL_OW 488
57245: IFFALSE 57266
// ComTurnXY ( unit , x , y ) ;
57247: LD_VAR 0 1
57251: PPUSH
57252: LD_VAR 0 4
57256: PPUSH
57257: LD_VAR 0 5
57261: PPUSH
57262: CALL_OW 118
// end ;
57266: LD_VAR 0 3
57270: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57271: LD_INT 0
57273: PPUSH
57274: PPUSH
// result := false ;
57275: LD_ADDR_VAR 0 3
57279: PUSH
57280: LD_INT 0
57282: ST_TO_ADDR
// if not units then
57283: LD_VAR 0 2
57287: NOT
57288: IFFALSE 57292
// exit ;
57290: GO 57337
// for i in units do
57292: LD_ADDR_VAR 0 4
57296: PUSH
57297: LD_VAR 0 2
57301: PUSH
57302: FOR_IN
57303: IFFALSE 57335
// if See ( side , i ) then
57305: LD_VAR 0 1
57309: PPUSH
57310: LD_VAR 0 4
57314: PPUSH
57315: CALL_OW 292
57319: IFFALSE 57333
// begin result := true ;
57321: LD_ADDR_VAR 0 3
57325: PUSH
57326: LD_INT 1
57328: ST_TO_ADDR
// exit ;
57329: POP
57330: POP
57331: GO 57337
// end ;
57333: GO 57302
57335: POP
57336: POP
// end ;
57337: LD_VAR 0 3
57341: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57342: LD_INT 0
57344: PPUSH
57345: PPUSH
57346: PPUSH
57347: PPUSH
// if not unit or not points then
57348: LD_VAR 0 1
57352: NOT
57353: IFTRUE 57362
57355: PUSH
57356: LD_VAR 0 2
57360: NOT
57361: OR
57362: IFFALSE 57366
// exit ;
57364: GO 57456
// dist := 99999 ;
57366: LD_ADDR_VAR 0 5
57370: PUSH
57371: LD_INT 99999
57373: ST_TO_ADDR
// for i in points do
57374: LD_ADDR_VAR 0 4
57378: PUSH
57379: LD_VAR 0 2
57383: PUSH
57384: FOR_IN
57385: IFFALSE 57454
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57387: LD_ADDR_VAR 0 6
57391: PUSH
57392: LD_VAR 0 1
57396: PPUSH
57397: LD_VAR 0 4
57401: PUSH
57402: LD_INT 1
57404: ARRAY
57405: PPUSH
57406: LD_VAR 0 4
57410: PUSH
57411: LD_INT 2
57413: ARRAY
57414: PPUSH
57415: CALL_OW 297
57419: ST_TO_ADDR
// if tmpDist < dist then
57420: LD_VAR 0 6
57424: PUSH
57425: LD_VAR 0 5
57429: LESS
57430: IFFALSE 57452
// begin result := i ;
57432: LD_ADDR_VAR 0 3
57436: PUSH
57437: LD_VAR 0 4
57441: ST_TO_ADDR
// dist := tmpDist ;
57442: LD_ADDR_VAR 0 5
57446: PUSH
57447: LD_VAR 0 6
57451: ST_TO_ADDR
// end ; end ;
57452: GO 57384
57454: POP
57455: POP
// end ;
57456: LD_VAR 0 3
57460: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57461: LD_INT 0
57463: PPUSH
// uc_side := side ;
57464: LD_ADDR_OWVAR 20
57468: PUSH
57469: LD_VAR 0 1
57473: ST_TO_ADDR
// uc_nation := 3 ;
57474: LD_ADDR_OWVAR 21
57478: PUSH
57479: LD_INT 3
57481: ST_TO_ADDR
// vc_chassis := 25 ;
57482: LD_ADDR_OWVAR 37
57486: PUSH
57487: LD_INT 25
57489: ST_TO_ADDR
// vc_engine := engine_siberite ;
57490: LD_ADDR_OWVAR 39
57494: PUSH
57495: LD_INT 3
57497: ST_TO_ADDR
// vc_control := control_computer ;
57498: LD_ADDR_OWVAR 38
57502: PUSH
57503: LD_INT 3
57505: ST_TO_ADDR
// vc_weapon := 59 ;
57506: LD_ADDR_OWVAR 40
57510: PUSH
57511: LD_INT 59
57513: ST_TO_ADDR
// result := CreateVehicle ;
57514: LD_ADDR_VAR 0 5
57518: PUSH
57519: CALL_OW 45
57523: ST_TO_ADDR
// SetDir ( result , d ) ;
57524: LD_VAR 0 5
57528: PPUSH
57529: LD_VAR 0 4
57533: PPUSH
57534: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57538: LD_VAR 0 5
57542: PPUSH
57543: LD_VAR 0 2
57547: PPUSH
57548: LD_VAR 0 3
57552: PPUSH
57553: LD_INT 0
57555: PPUSH
57556: CALL_OW 48
// end ;
57560: LD_VAR 0 5
57564: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57565: LD_INT 0
57567: PPUSH
57568: PPUSH
57569: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57570: LD_ADDR_VAR 0 2
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57593: LD_VAR 0 1
57597: NOT
57598: IFTRUE 57631
57600: PUSH
57601: LD_VAR 0 1
57605: PPUSH
57606: CALL_OW 264
57610: PUSH
57611: LD_INT 12
57613: PUSH
57614: LD_INT 51
57616: PUSH
57617: LD_INT 32
57619: PUSH
57620: LD_INT 89
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: IN
57629: NOT
57630: OR
57631: IFFALSE 57635
// exit ;
57633: GO 57733
// for i := 1 to 3 do
57635: LD_ADDR_VAR 0 3
57639: PUSH
57640: DOUBLE
57641: LD_INT 1
57643: DEC
57644: ST_TO_ADDR
57645: LD_INT 3
57647: PUSH
57648: FOR_TO
57649: IFFALSE 57731
// begin tmp := GetCargo ( cargo , i ) ;
57651: LD_ADDR_VAR 0 4
57655: PUSH
57656: LD_VAR 0 1
57660: PPUSH
57661: LD_VAR 0 3
57665: PPUSH
57666: CALL_OW 289
57670: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57671: LD_ADDR_VAR 0 2
57675: PUSH
57676: LD_VAR 0 2
57680: PPUSH
57681: LD_VAR 0 3
57685: PPUSH
57686: LD_VAR 0 4
57690: PPUSH
57691: CALL_OW 1
57695: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57696: LD_ADDR_VAR 0 2
57700: PUSH
57701: LD_VAR 0 2
57705: PPUSH
57706: LD_INT 4
57708: PPUSH
57709: LD_VAR 0 2
57713: PUSH
57714: LD_INT 4
57716: ARRAY
57717: PUSH
57718: LD_VAR 0 4
57722: PLUS
57723: PPUSH
57724: CALL_OW 1
57728: ST_TO_ADDR
// end ;
57729: GO 57648
57731: POP
57732: POP
// end ;
57733: LD_VAR 0 2
57737: RET
// export function Length ( array ) ; begin
57738: LD_INT 0
57740: PPUSH
// result := array + 0 ;
57741: LD_ADDR_VAR 0 2
57745: PUSH
57746: LD_VAR 0 1
57750: PUSH
57751: LD_INT 0
57753: PLUS
57754: ST_TO_ADDR
// end ;
57755: LD_VAR 0 2
57759: RET
// export function PrepareArray ( array ) ; begin
57760: LD_INT 0
57762: PPUSH
// result := array diff 0 ;
57763: LD_ADDR_VAR 0 2
57767: PUSH
57768: LD_VAR 0 1
57772: PUSH
57773: LD_INT 0
57775: DIFF
57776: ST_TO_ADDR
// if not result [ 1 ] then
57777: LD_VAR 0 2
57781: PUSH
57782: LD_INT 1
57784: ARRAY
57785: NOT
57786: IFFALSE 57806
// result := Delete ( result , 1 ) ;
57788: LD_ADDR_VAR 0 2
57792: PUSH
57793: LD_VAR 0 2
57797: PPUSH
57798: LD_INT 1
57800: PPUSH
57801: CALL_OW 3
57805: ST_TO_ADDR
// end ;
57806: LD_VAR 0 2
57810: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57811: LD_INT 0
57813: PPUSH
57814: PPUSH
57815: PPUSH
57816: PPUSH
// sibRocketRange := 25 ;
57817: LD_ADDR_VAR 0 6
57821: PUSH
57822: LD_INT 25
57824: ST_TO_ADDR
// result := false ;
57825: LD_ADDR_VAR 0 4
57829: PUSH
57830: LD_INT 0
57832: ST_TO_ADDR
// for i := 0 to 5 do
57833: LD_ADDR_VAR 0 5
57837: PUSH
57838: DOUBLE
57839: LD_INT 0
57841: DEC
57842: ST_TO_ADDR
57843: LD_INT 5
57845: PUSH
57846: FOR_TO
57847: IFFALSE 57914
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57849: LD_VAR 0 1
57853: PPUSH
57854: LD_VAR 0 5
57858: PPUSH
57859: LD_VAR 0 6
57863: PPUSH
57864: CALL_OW 272
57868: PPUSH
57869: LD_VAR 0 2
57873: PPUSH
57874: LD_VAR 0 5
57878: PPUSH
57879: LD_VAR 0 6
57883: PPUSH
57884: CALL_OW 273
57888: PPUSH
57889: LD_VAR 0 3
57893: PPUSH
57894: CALL_OW 309
57898: IFFALSE 57912
// begin result := true ;
57900: LD_ADDR_VAR 0 4
57904: PUSH
57905: LD_INT 1
57907: ST_TO_ADDR
// exit ;
57908: POP
57909: POP
57910: GO 57916
// end ;
57912: GO 57846
57914: POP
57915: POP
// end ;
57916: LD_VAR 0 4
57920: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57921: LD_INT 0
57923: PPUSH
57924: PPUSH
57925: PPUSH
// if btype = b_depot then
57926: LD_VAR 0 2
57930: PUSH
57931: LD_INT 0
57933: EQUAL
57934: IFFALSE 57946
// begin result := true ;
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: LD_INT 1
57943: ST_TO_ADDR
// exit ;
57944: GO 58066
// end ; pom := GetBase ( depot ) ;
57946: LD_ADDR_VAR 0 4
57950: PUSH
57951: LD_VAR 0 1
57955: PPUSH
57956: CALL_OW 274
57960: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57961: LD_ADDR_VAR 0 5
57965: PUSH
57966: LD_VAR 0 2
57970: PPUSH
57971: LD_VAR 0 1
57975: PPUSH
57976: CALL_OW 248
57980: PPUSH
57981: CALL_OW 450
57985: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57986: LD_ADDR_VAR 0 3
57990: PUSH
57991: LD_VAR 0 4
57995: PPUSH
57996: LD_INT 1
57998: PPUSH
57999: CALL_OW 275
58003: PUSH
58004: LD_VAR 0 5
58008: PUSH
58009: LD_INT 1
58011: ARRAY
58012: GREATEREQUAL
58013: IFFALSE 58039
58015: PUSH
58016: LD_VAR 0 4
58020: PPUSH
58021: LD_INT 2
58023: PPUSH
58024: CALL_OW 275
58028: PUSH
58029: LD_VAR 0 5
58033: PUSH
58034: LD_INT 2
58036: ARRAY
58037: GREATEREQUAL
58038: AND
58039: IFFALSE 58065
58041: PUSH
58042: LD_VAR 0 4
58046: PPUSH
58047: LD_INT 3
58049: PPUSH
58050: CALL_OW 275
58054: PUSH
58055: LD_VAR 0 5
58059: PUSH
58060: LD_INT 3
58062: ARRAY
58063: GREATEREQUAL
58064: AND
58065: ST_TO_ADDR
// end ;
58066: LD_VAR 0 3
58070: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58071: LD_INT 0
58073: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58074: LD_VAR 0 1
58078: PPUSH
58079: LD_VAR 0 2
58083: PPUSH
58084: LD_INT 0
58086: PPUSH
58087: LD_INT 0
58089: PPUSH
58090: LD_INT 1
58092: PPUSH
58093: LD_INT 0
58095: PPUSH
58096: CALL_OW 587
// end ;
58100: LD_VAR 0 3
58104: RET
// export function CenterOnNow ( unit ) ; begin
58105: LD_INT 0
58107: PPUSH
// result := IsInUnit ( unit ) ;
58108: LD_ADDR_VAR 0 2
58112: PUSH
58113: LD_VAR 0 1
58117: PPUSH
58118: CALL_OW 310
58122: ST_TO_ADDR
// if not result then
58123: LD_VAR 0 2
58127: NOT
58128: IFFALSE 58140
// result := unit ;
58130: LD_ADDR_VAR 0 2
58134: PUSH
58135: LD_VAR 0 1
58139: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58140: LD_VAR 0 1
58144: PPUSH
58145: CALL_OW 87
// end ;
58149: LD_VAR 0 2
58153: RET
// export function ComMoveHex ( unit , hex ) ; begin
58154: LD_INT 0
58156: PPUSH
// if not hex then
58157: LD_VAR 0 2
58161: NOT
58162: IFFALSE 58166
// exit ;
58164: GO 58219
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58166: LD_VAR 0 2
58170: PUSH
58171: LD_INT 1
58173: ARRAY
58174: PPUSH
58175: LD_VAR 0 2
58179: PUSH
58180: LD_INT 2
58182: ARRAY
58183: PPUSH
58184: CALL_OW 428
58188: IFFALSE 58192
// exit ;
58190: GO 58219
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58192: LD_VAR 0 1
58196: PPUSH
58197: LD_VAR 0 2
58201: PUSH
58202: LD_INT 1
58204: ARRAY
58205: PPUSH
58206: LD_VAR 0 2
58210: PUSH
58211: LD_INT 2
58213: ARRAY
58214: PPUSH
58215: CALL_OW 111
// end ;
58219: LD_VAR 0 3
58223: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58224: LD_INT 0
58226: PPUSH
58227: PPUSH
58228: PPUSH
// if not unit or not enemy then
58229: LD_VAR 0 1
58233: NOT
58234: IFTRUE 58243
58236: PUSH
58237: LD_VAR 0 2
58241: NOT
58242: OR
58243: IFFALSE 58247
// exit ;
58245: GO 58373
// x := GetX ( enemy ) ;
58247: LD_ADDR_VAR 0 4
58251: PUSH
58252: LD_VAR 0 2
58256: PPUSH
58257: CALL_OW 250
58261: ST_TO_ADDR
// y := GetY ( enemy ) ;
58262: LD_ADDR_VAR 0 5
58266: PUSH
58267: LD_VAR 0 2
58271: PPUSH
58272: CALL_OW 251
58276: ST_TO_ADDR
// if ValidHex ( x , y ) then
58277: LD_VAR 0 4
58281: PPUSH
58282: LD_VAR 0 5
58286: PPUSH
58287: CALL_OW 488
58291: IFFALSE 58373
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58293: LD_VAR 0 2
58297: PPUSH
58298: CALL_OW 247
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: IN
58313: IFTRUE 58336
58315: PUSH
58316: LD_VAR 0 1
58320: PPUSH
58321: CALL_OW 255
58325: PPUSH
58326: LD_VAR 0 2
58330: PPUSH
58331: CALL_OW 292
58335: OR
58336: IFFALSE 58354
// ComAttackUnit ( unit , enemy ) else
58338: LD_VAR 0 1
58342: PPUSH
58343: LD_VAR 0 2
58347: PPUSH
58348: CALL_OW 115
58352: GO 58373
// ComAgressiveMove ( unit , x , y ) ;
58354: LD_VAR 0 1
58358: PPUSH
58359: LD_VAR 0 4
58363: PPUSH
58364: LD_VAR 0 5
58368: PPUSH
58369: CALL_OW 114
// end ;
58373: LD_VAR 0 3
58377: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58378: LD_INT 0
58380: PPUSH
58381: PPUSH
58382: PPUSH
// list := AreaToList ( area , 0 ) ;
58383: LD_ADDR_VAR 0 5
58387: PUSH
58388: LD_VAR 0 1
58392: PPUSH
58393: LD_INT 0
58395: PPUSH
58396: CALL_OW 517
58400: ST_TO_ADDR
// if not list then
58401: LD_VAR 0 5
58405: NOT
58406: IFFALSE 58410
// exit ;
58408: GO 58540
// if all then
58410: LD_VAR 0 2
58414: IFFALSE 58502
// begin for i := 1 to list [ 1 ] do
58416: LD_ADDR_VAR 0 4
58420: PUSH
58421: DOUBLE
58422: LD_INT 1
58424: DEC
58425: ST_TO_ADDR
58426: LD_VAR 0 5
58430: PUSH
58431: LD_INT 1
58433: ARRAY
58434: PUSH
58435: FOR_TO
58436: IFFALSE 58498
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58438: LD_ADDR_VAR 0 3
58442: PUSH
58443: LD_VAR 0 3
58447: PPUSH
58448: LD_VAR 0 3
58452: PUSH
58453: LD_INT 1
58455: PLUS
58456: PPUSH
58457: LD_VAR 0 5
58461: PUSH
58462: LD_INT 1
58464: ARRAY
58465: PUSH
58466: LD_VAR 0 4
58470: ARRAY
58471: PUSH
58472: LD_VAR 0 5
58476: PUSH
58477: LD_INT 2
58479: ARRAY
58480: PUSH
58481: LD_VAR 0 4
58485: ARRAY
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PPUSH
58491: CALL_OW 1
58495: ST_TO_ADDR
58496: GO 58435
58498: POP
58499: POP
// exit ;
58500: GO 58540
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58502: LD_ADDR_VAR 0 3
58506: PUSH
58507: LD_VAR 0 5
58511: PUSH
58512: LD_INT 1
58514: ARRAY
58515: PUSH
58516: LD_INT 1
58518: ARRAY
58519: PUSH
58520: LD_VAR 0 5
58524: PUSH
58525: LD_INT 2
58527: ARRAY
58528: PUSH
58529: LD_INT 1
58531: ARRAY
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: ST_TO_ADDR
// end ;
58540: LD_VAR 0 3
58544: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58545: LD_INT 0
58547: PPUSH
58548: PPUSH
// list := AreaToList ( area , 0 ) ;
58549: LD_ADDR_VAR 0 4
58553: PUSH
58554: LD_VAR 0 1
58558: PPUSH
58559: LD_INT 0
58561: PPUSH
58562: CALL_OW 517
58566: ST_TO_ADDR
// if not list then
58567: LD_VAR 0 4
58571: NOT
58572: IFFALSE 58576
// exit ;
58574: GO 58617
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58576: LD_ADDR_VAR 0 3
58580: PUSH
58581: LD_VAR 0 4
58585: PUSH
58586: LD_INT 1
58588: ARRAY
58589: PUSH
58590: LD_INT 1
58592: ARRAY
58593: PUSH
58594: LD_VAR 0 4
58598: PUSH
58599: LD_INT 2
58601: ARRAY
58602: PUSH
58603: LD_INT 1
58605: ARRAY
58606: PUSH
58607: LD_VAR 0 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: ST_TO_ADDR
// end ;
58617: LD_VAR 0 3
58621: RET
// export function First ( array ) ; begin
58622: LD_INT 0
58624: PPUSH
// if not array then
58625: LD_VAR 0 1
58629: NOT
58630: IFFALSE 58634
// exit ;
58632: GO 58648
// result := array [ 1 ] ;
58634: LD_ADDR_VAR 0 2
58638: PUSH
58639: LD_VAR 0 1
58643: PUSH
58644: LD_INT 1
58646: ARRAY
58647: ST_TO_ADDR
// end ;
58648: LD_VAR 0 2
58652: RET
// export function Last ( array ) ; begin
58653: LD_INT 0
58655: PPUSH
// if not array then
58656: LD_VAR 0 1
58660: NOT
58661: IFFALSE 58665
// exit ;
58663: GO 58681
// result := array [ array ] ;
58665: LD_ADDR_VAR 0 2
58669: PUSH
58670: LD_VAR 0 1
58674: PUSH
58675: LD_VAR 0 1
58679: ARRAY
58680: ST_TO_ADDR
// end ;
58681: LD_VAR 0 2
58685: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58686: LD_INT 0
58688: PPUSH
58689: PPUSH
// result := [ ] ;
58690: LD_ADDR_VAR 0 5
58694: PUSH
58695: EMPTY
58696: ST_TO_ADDR
// if not array then
58697: LD_VAR 0 1
58701: NOT
58702: IFFALSE 58706
// exit ;
58704: GO 58818
// for i := 1 to array do
58706: LD_ADDR_VAR 0 6
58710: PUSH
58711: DOUBLE
58712: LD_INT 1
58714: DEC
58715: ST_TO_ADDR
58716: LD_VAR 0 1
58720: PUSH
58721: FOR_TO
58722: IFFALSE 58816
// if array [ i ] [ index ] = value then
58724: LD_VAR 0 1
58728: PUSH
58729: LD_VAR 0 6
58733: ARRAY
58734: PUSH
58735: LD_VAR 0 2
58739: ARRAY
58740: PUSH
58741: LD_VAR 0 3
58745: EQUAL
58746: IFFALSE 58814
// begin if indexColumn then
58748: LD_VAR 0 4
58752: IFFALSE 58788
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58754: LD_ADDR_VAR 0 5
58758: PUSH
58759: LD_VAR 0 5
58763: PPUSH
58764: LD_VAR 0 1
58768: PUSH
58769: LD_VAR 0 6
58773: ARRAY
58774: PUSH
58775: LD_VAR 0 4
58779: ARRAY
58780: PPUSH
58781: CALL 53826 0 2
58785: ST_TO_ADDR
58786: GO 58814
// result := Join ( result , array [ i ] ) ;
58788: LD_ADDR_VAR 0 5
58792: PUSH
58793: LD_VAR 0 5
58797: PPUSH
58798: LD_VAR 0 1
58802: PUSH
58803: LD_VAR 0 6
58807: ARRAY
58808: PPUSH
58809: CALL 53826 0 2
58813: ST_TO_ADDR
// end ;
58814: GO 58721
58816: POP
58817: POP
// end ;
58818: LD_VAR 0 5
58822: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58823: LD_INT 0
58825: PPUSH
// if not vehicles or not parkingPoint then
58826: LD_VAR 0 1
58830: NOT
58831: IFTRUE 58840
58833: PUSH
58834: LD_VAR 0 2
58838: NOT
58839: OR
58840: IFFALSE 58844
// exit ;
58842: GO 58942
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58844: LD_ADDR_VAR 0 1
58848: PUSH
58849: LD_VAR 0 1
58853: PPUSH
58854: LD_INT 50
58856: PUSH
58857: EMPTY
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: LD_INT 92
58865: PUSH
58866: LD_VAR 0 2
58870: PUSH
58871: LD_INT 1
58873: ARRAY
58874: PUSH
58875: LD_VAR 0 2
58879: PUSH
58880: LD_INT 2
58882: ARRAY
58883: PUSH
58884: LD_INT 8
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PPUSH
58901: CALL_OW 72
58905: ST_TO_ADDR
// if not vehicles then
58906: LD_VAR 0 1
58910: NOT
58911: IFFALSE 58915
// exit ;
58913: GO 58942
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58915: LD_VAR 0 1
58919: PPUSH
58920: LD_VAR 0 2
58924: PUSH
58925: LD_INT 1
58927: ARRAY
58928: PPUSH
58929: LD_VAR 0 2
58933: PUSH
58934: LD_INT 2
58936: ARRAY
58937: PPUSH
58938: CALL_OW 111
// end ;
58942: LD_VAR 0 3
58946: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58947: LD_INT 0
58949: PPUSH
58950: PPUSH
58951: PPUSH
// if not side or not area then
58952: LD_VAR 0 1
58956: NOT
58957: IFTRUE 58966
58959: PUSH
58960: LD_VAR 0 2
58964: NOT
58965: OR
58966: IFFALSE 58970
// exit ;
58968: GO 59089
// tmp := AreaToList ( area , 0 ) ;
58970: LD_ADDR_VAR 0 5
58974: PUSH
58975: LD_VAR 0 2
58979: PPUSH
58980: LD_INT 0
58982: PPUSH
58983: CALL_OW 517
58987: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58988: LD_ADDR_VAR 0 4
58992: PUSH
58993: DOUBLE
58994: LD_INT 1
58996: DEC
58997: ST_TO_ADDR
58998: LD_VAR 0 5
59002: PUSH
59003: LD_INT 1
59005: ARRAY
59006: PUSH
59007: FOR_TO
59008: IFFALSE 59087
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59010: LD_VAR 0 5
59014: PUSH
59015: LD_INT 1
59017: ARRAY
59018: PUSH
59019: LD_VAR 0 4
59023: ARRAY
59024: PPUSH
59025: LD_VAR 0 5
59029: PUSH
59030: LD_INT 2
59032: ARRAY
59033: PUSH
59034: LD_VAR 0 4
59038: ARRAY
59039: PPUSH
59040: CALL_OW 351
59044: IFFALSE 59085
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59046: LD_VAR 0 5
59050: PUSH
59051: LD_INT 1
59053: ARRAY
59054: PUSH
59055: LD_VAR 0 4
59059: ARRAY
59060: PPUSH
59061: LD_VAR 0 5
59065: PUSH
59066: LD_INT 2
59068: ARRAY
59069: PUSH
59070: LD_VAR 0 4
59074: ARRAY
59075: PPUSH
59076: LD_VAR 0 1
59080: PPUSH
59081: CALL_OW 244
// end ;
59085: GO 59007
59087: POP
59088: POP
// end ;
59089: LD_VAR 0 3
59093: RET
// export function UniqueArray ( array ) ; var i ; begin
59094: LD_INT 0
59096: PPUSH
59097: PPUSH
// result := [ ] ;
59098: LD_ADDR_VAR 0 2
59102: PUSH
59103: EMPTY
59104: ST_TO_ADDR
// if not array then
59105: LD_VAR 0 1
59109: NOT
59110: IFFALSE 59114
// exit ;
59112: GO 59175
// for i := 1 to array do
59114: LD_ADDR_VAR 0 3
59118: PUSH
59119: DOUBLE
59120: LD_INT 1
59122: DEC
59123: ST_TO_ADDR
59124: LD_VAR 0 1
59128: PUSH
59129: FOR_TO
59130: IFFALSE 59173
// if not array [ i ] in result then
59132: LD_VAR 0 1
59136: PUSH
59137: LD_VAR 0 3
59141: ARRAY
59142: PUSH
59143: LD_VAR 0 2
59147: IN
59148: NOT
59149: IFFALSE 59171
// result := Join ( result , i ) ;
59151: LD_ADDR_VAR 0 2
59155: PUSH
59156: LD_VAR 0 2
59160: PPUSH
59161: LD_VAR 0 3
59165: PPUSH
59166: CALL 53826 0 2
59170: ST_TO_ADDR
59171: GO 59129
59173: POP
59174: POP
// end ; end_of_file
59175: LD_VAR 0 2
59179: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59180: LD_INT 0
59182: PPUSH
// ComRadiation ( un ) ;
59183: LD_VAR 0 1
59187: PPUSH
59188: CALL 60269 0 1
// end ;
59192: LD_VAR 0 2
59196: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59197: LD_INT 0
59199: PPUSH
// ComRadiation ( un ) ;
59200: LD_VAR 0 1
59204: PPUSH
59205: CALL 60269 0 1
// end ;
59209: LD_VAR 0 2
59213: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59214: LD_INT 0
59216: PPUSH
// end ;
59217: LD_VAR 0 4
59221: RET
// export function SOS_Command ( cmd ) ; begin
59222: LD_INT 0
59224: PPUSH
// end ;
59225: LD_VAR 0 2
59229: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59230: LD_INT 0
59232: PPUSH
// end ;
59233: LD_VAR 0 6
59237: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
59238: LD_INT 0
59240: PPUSH
59241: PPUSH
59242: PPUSH
59243: PPUSH
// if not vehicle or not factory then
59244: LD_VAR 0 1
59248: NOT
59249: IFTRUE 59258
59251: PUSH
59252: LD_VAR 0 2
59256: NOT
59257: OR
59258: IFFALSE 59262
// exit ;
59260: GO 59844
// if not factoryWaypoints then
59262: LD_EXP 57
59266: NOT
59267: IFFALSE 59271
// exit ;
59269: GO 59844
// for i := 1 to Count ( factoryWaypoints ) do
59271: LD_ADDR_VAR 0 4
59275: PUSH
59276: DOUBLE
59277: LD_INT 1
59279: DEC
59280: ST_TO_ADDR
59281: LD_EXP 57
59285: PPUSH
59286: CALL 17894 0 1
59290: PUSH
59291: FOR_TO
59292: IFFALSE 59842
// if factoryWaypoints [ i ] [ 2 ] = factory then
59294: LD_EXP 57
59298: PUSH
59299: LD_VAR 0 4
59303: ARRAY
59304: PUSH
59305: LD_INT 2
59307: ARRAY
59308: PUSH
59309: LD_VAR 0 2
59313: EQUAL
59314: IFFALSE 59840
// begin if GetControl ( vehicle ) = control_manual then
59316: LD_VAR 0 1
59320: PPUSH
59321: CALL_OW 263
59325: PUSH
59326: LD_INT 1
59328: EQUAL
59329: IFFALSE 59693
// begin driver := IsDrivenBy ( vehicle ) ;
59331: LD_ADDR_VAR 0 5
59335: PUSH
59336: LD_VAR 0 1
59340: PPUSH
59341: CALL_OW 311
59345: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59346: LD_VAR 0 5
59350: PUSH
59351: LD_EXP 58
59355: IN
59356: IFTRUE 59370
59358: PUSH
59359: LD_VAR 0 1
59363: PUSH
59364: LD_EXP 58
59368: IN
59369: OR
59370: IFFALSE 59376
// exit ;
59372: POP
59373: POP
59374: GO 59844
// if not HasTask ( driver ) then
59376: LD_VAR 0 5
59380: PPUSH
59381: CALL_OW 314
59385: NOT
59386: IFFALSE 59691
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59388: LD_ADDR_EXP 58
59392: PUSH
59393: LD_EXP 58
59397: PPUSH
59398: LD_VAR 0 5
59402: PPUSH
59403: CALL 53826 0 2
59407: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59408: LD_ADDR_EXP 58
59412: PUSH
59413: LD_EXP 58
59417: PPUSH
59418: LD_VAR 0 1
59422: PPUSH
59423: CALL 53826 0 2
59427: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59428: LD_ADDR_VAR 0 6
59432: PUSH
59433: LD_EXP 57
59437: PUSH
59438: LD_VAR 0 4
59442: ARRAY
59443: PUSH
59444: LD_INT 3
59446: ARRAY
59447: PPUSH
59448: LD_EXP 57
59452: PUSH
59453: LD_VAR 0 4
59457: ARRAY
59458: PUSH
59459: LD_INT 4
59461: ARRAY
59462: PPUSH
59463: CALL_OW 428
59467: ST_TO_ADDR
// if hex then
59468: LD_VAR 0 6
59472: IFFALSE 59490
// ComMoveUnit ( driver , hex ) else
59474: LD_VAR 0 5
59478: PPUSH
59479: LD_VAR 0 6
59483: PPUSH
59484: CALL_OW 112
59488: GO 59574
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59490: LD_VAR 0 1
59494: PPUSH
59495: LD_EXP 57
59499: PUSH
59500: LD_VAR 0 4
59504: ARRAY
59505: PUSH
59506: LD_INT 3
59508: ARRAY
59509: PPUSH
59510: LD_EXP 57
59514: PUSH
59515: LD_VAR 0 4
59519: ARRAY
59520: PUSH
59521: LD_INT 4
59523: ARRAY
59524: PPUSH
59525: CALL_OW 297
59529: PUSH
59530: LD_INT 0
59532: GREATER
59533: IFFALSE 59574
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59535: LD_VAR 0 5
59539: PPUSH
59540: LD_EXP 57
59544: PUSH
59545: LD_VAR 0 4
59549: ARRAY
59550: PUSH
59551: LD_INT 3
59553: ARRAY
59554: PPUSH
59555: LD_EXP 57
59559: PUSH
59560: LD_VAR 0 4
59564: ARRAY
59565: PUSH
59566: LD_INT 4
59568: ARRAY
59569: PPUSH
59570: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59574: LD_VAR 0 5
59578: PPUSH
59579: CALL_OW 181
// if Multiplayer then
59583: LD_OWVAR 4
59587: IFFALSE 59636
// begin repeat wait ( 10 ) ;
59589: LD_INT 10
59591: PPUSH
59592: CALL_OW 67
// until not IsInUnit ( driver ) ;
59596: LD_VAR 0 5
59600: PPUSH
59601: CALL_OW 310
59605: NOT
59606: IFFALSE 59589
// if not HasTask ( driver ) then
59608: LD_VAR 0 5
59612: PPUSH
59613: CALL_OW 314
59617: NOT
59618: IFFALSE 59634
// ComEnterUnit ( driver , factory ) ;
59620: LD_VAR 0 5
59624: PPUSH
59625: LD_VAR 0 2
59629: PPUSH
59630: CALL_OW 120
// end else
59634: GO 59650
// AddComEnterUnit ( driver , factory ) ;
59636: LD_VAR 0 5
59640: PPUSH
59641: LD_VAR 0 2
59645: PPUSH
59646: CALL_OW 180
// wait ( 0 0$1 ) ;
59650: LD_INT 35
59652: PPUSH
59653: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59657: LD_ADDR_EXP 58
59661: PUSH
59662: LD_EXP 58
59666: PUSH
59667: LD_VAR 0 5
59671: DIFF
59672: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59673: LD_ADDR_EXP 58
59677: PUSH
59678: LD_EXP 58
59682: PUSH
59683: LD_VAR 0 1
59687: DIFF
59688: ST_TO_ADDR
// break ;
59689: GO 59842
// end ; end else
59691: GO 59840
// if GetControl ( vehicle ) = control_remote then
59693: LD_VAR 0 1
59697: PPUSH
59698: CALL_OW 263
59702: PUSH
59703: LD_INT 2
59705: EQUAL
59706: IFFALSE 59792
// begin wait ( 0 0$2 ) ;
59708: LD_INT 70
59710: PPUSH
59711: CALL_OW 67
// repeat wait ( 10 ) ;
59715: LD_INT 10
59717: PPUSH
59718: CALL_OW 67
// Connect ( vehicle ) ;
59722: LD_VAR 0 1
59726: PPUSH
59727: CALL 24138 0 1
// until IsControledBy ( vehicle ) ;
59731: LD_VAR 0 1
59735: PPUSH
59736: CALL_OW 312
59740: IFFALSE 59715
// wait ( 10 ) ;
59742: LD_INT 10
59744: PPUSH
59745: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59749: LD_VAR 0 1
59753: PPUSH
59754: LD_EXP 57
59758: PUSH
59759: LD_VAR 0 4
59763: ARRAY
59764: PUSH
59765: LD_INT 3
59767: ARRAY
59768: PPUSH
59769: LD_EXP 57
59773: PUSH
59774: LD_VAR 0 4
59778: ARRAY
59779: PUSH
59780: LD_INT 4
59782: ARRAY
59783: PPUSH
59784: CALL_OW 111
// break ;
59788: GO 59842
// end else
59790: GO 59840
// begin wait ( 0 0$3 ) ;
59792: LD_INT 105
59794: PPUSH
59795: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59799: LD_VAR 0 1
59803: PPUSH
59804: LD_EXP 57
59808: PUSH
59809: LD_VAR 0 4
59813: ARRAY
59814: PUSH
59815: LD_INT 3
59817: ARRAY
59818: PPUSH
59819: LD_EXP 57
59823: PUSH
59824: LD_VAR 0 4
59828: ARRAY
59829: PUSH
59830: LD_INT 4
59832: ARRAY
59833: PPUSH
59834: CALL_OW 111
// break ;
59838: GO 59842
// end ; end ;
59840: GO 59291
59842: POP
59843: POP
// end ;
59844: LD_VAR 0 3
59848: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59849: LD_INT 0
59851: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59852: LD_VAR 0 1
59856: PUSH
59857: LD_INT 250
59859: EQUAL
59860: IFFALSE 59877
59862: PUSH
59863: LD_VAR 0 2
59867: PPUSH
59868: CALL_OW 264
59872: PUSH
59873: LD_INT 81
59875: EQUAL
59876: AND
59877: IFFALSE 59898
// MinerPlaceMine ( unit , x , y ) ;
59879: LD_VAR 0 2
59883: PPUSH
59884: LD_VAR 0 4
59888: PPUSH
59889: LD_VAR 0 5
59893: PPUSH
59894: CALL 63030 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59898: LD_VAR 0 1
59902: PUSH
59903: LD_INT 251
59905: EQUAL
59906: IFFALSE 59923
59908: PUSH
59909: LD_VAR 0 2
59913: PPUSH
59914: CALL_OW 264
59918: PUSH
59919: LD_INT 81
59921: EQUAL
59922: AND
59923: IFFALSE 59944
// MinerDetonateMine ( unit , x , y ) ;
59925: LD_VAR 0 2
59929: PPUSH
59930: LD_VAR 0 4
59934: PPUSH
59935: LD_VAR 0 5
59939: PPUSH
59940: CALL 63309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59944: LD_VAR 0 1
59948: PUSH
59949: LD_INT 252
59951: EQUAL
59952: IFFALSE 59969
59954: PUSH
59955: LD_VAR 0 2
59959: PPUSH
59960: CALL_OW 264
59964: PUSH
59965: LD_INT 81
59967: EQUAL
59968: AND
59969: IFFALSE 59990
// MinerCreateMinefield ( unit , x , y ) ;
59971: LD_VAR 0 2
59975: PPUSH
59976: LD_VAR 0 4
59980: PPUSH
59981: LD_VAR 0 5
59985: PPUSH
59986: CALL 63728 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59990: LD_VAR 0 1
59994: PUSH
59995: LD_INT 253
59997: EQUAL
59998: IFFALSE 60015
60000: PUSH
60001: LD_VAR 0 2
60005: PPUSH
60006: CALL_OW 257
60010: PUSH
60011: LD_INT 5
60013: EQUAL
60014: AND
60015: IFFALSE 60036
// ComBinocular ( unit , x , y ) ;
60017: LD_VAR 0 2
60021: PPUSH
60022: LD_VAR 0 4
60026: PPUSH
60027: LD_VAR 0 5
60031: PPUSH
60032: CALL 64103 0 3
// if selectedUnit then
60036: LD_VAR 0 3
60040: IFFALSE 60100
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60042: LD_VAR 0 1
60046: PUSH
60047: LD_INT 254
60049: EQUAL
60050: IFFALSE 60067
60052: PUSH
60053: LD_VAR 0 2
60057: PPUSH
60058: CALL_OW 264
60062: PUSH
60063: LD_INT 99
60065: EQUAL
60066: AND
60067: IFFALSE 60084
60069: PUSH
60070: LD_VAR 0 3
60074: PPUSH
60075: CALL_OW 263
60079: PUSH
60080: LD_INT 3
60082: EQUAL
60083: AND
60084: IFFALSE 60100
// HackDestroyVehicle ( unit , selectedUnit ) ;
60086: LD_VAR 0 2
60090: PPUSH
60091: LD_VAR 0 3
60095: PPUSH
60096: CALL 62390 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 255
60107: EQUAL
60108: IFFALSE 60132
60110: PUSH
60111: LD_VAR 0 2
60115: PPUSH
60116: CALL_OW 264
60120: PUSH
60121: LD_INT 14
60123: PUSH
60124: LD_INT 53
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: IN
60131: AND
60132: IFFALSE 60150
60134: PUSH
60135: LD_VAR 0 4
60139: PPUSH
60140: LD_VAR 0 5
60144: PPUSH
60145: CALL_OW 488
60149: AND
60150: IFFALSE 60174
// CutTreeXYR ( unit , x , y , 12 ) ;
60152: LD_VAR 0 2
60156: PPUSH
60157: LD_VAR 0 4
60161: PPUSH
60162: LD_VAR 0 5
60166: PPUSH
60167: LD_INT 12
60169: PPUSH
60170: CALL 60365 0 4
// if cmd = 256 then
60174: LD_VAR 0 1
60178: PUSH
60179: LD_INT 256
60181: EQUAL
60182: IFFALSE 60203
// SetFactoryWaypoint ( unit , x , y ) ;
60184: LD_VAR 0 2
60188: PPUSH
60189: LD_VAR 0 4
60193: PPUSH
60194: LD_VAR 0 5
60198: PPUSH
60199: CALL 65262 0 3
// if cmd = 257 then
60203: LD_VAR 0 1
60207: PUSH
60208: LD_INT 257
60210: EQUAL
60211: IFFALSE 60232
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60213: LD_VAR 0 2
60217: PPUSH
60218: LD_VAR 0 4
60222: PPUSH
60223: LD_VAR 0 5
60227: PPUSH
60228: CALL 65758 0 3
// if cmd = 258 then
60232: LD_VAR 0 1
60236: PUSH
60237: LD_INT 258
60239: EQUAL
60240: IFFALSE 60264
// BurnTreeXYR ( unit , x , y , 8 ) ;
60242: LD_VAR 0 2
60246: PPUSH
60247: LD_VAR 0 4
60251: PPUSH
60252: LD_VAR 0 5
60256: PPUSH
60257: LD_INT 8
60259: PPUSH
60260: CALL 60765 0 4
// end ;
60264: LD_VAR 0 6
60268: RET
// export function ComRadiation ( un ) ; var eff ; begin
60269: LD_INT 0
60271: PPUSH
60272: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL_OW 264
60282: PUSH
60283: LD_INT 91
60285: NONEQUAL
60286: IFFALSE 60290
// exit ;
60288: GO 60360
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60290: LD_INT 68
60292: PPUSH
60293: LD_VAR 0 1
60297: PPUSH
60298: CALL_OW 255
60302: PPUSH
60303: CALL_OW 321
60307: PUSH
60308: LD_INT 2
60310: EQUAL
60311: IFFALSE 60323
// eff := 50 else
60313: LD_ADDR_VAR 0 3
60317: PUSH
60318: LD_INT 50
60320: ST_TO_ADDR
60321: GO 60331
// eff := 25 ;
60323: LD_ADDR_VAR 0 3
60327: PUSH
60328: LD_INT 25
60330: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60331: LD_VAR 0 1
60335: PPUSH
60336: CALL_OW 250
60340: PPUSH
60341: LD_VAR 0 1
60345: PPUSH
60346: CALL_OW 251
60350: PPUSH
60351: LD_VAR 0 3
60355: PPUSH
60356: CALL_OW 495
// end ;
60360: LD_VAR 0 2
60364: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60365: LD_INT 0
60367: PPUSH
60368: PPUSH
60369: PPUSH
60370: PPUSH
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
60375: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60376: LD_VAR 0 1
60380: PPUSH
60381: CALL_OW 302
60385: NOT
60386: IFTRUE 60405
60388: PUSH
60389: LD_VAR 0 2
60393: PPUSH
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 488
60403: NOT
60404: OR
60405: IFTRUE 60414
60407: PUSH
60408: LD_VAR 0 4
60412: NOT
60413: OR
60414: IFFALSE 60418
// exit ;
60416: GO 60760
// list := [ ] ;
60418: LD_ADDR_VAR 0 13
60422: PUSH
60423: EMPTY
60424: ST_TO_ADDR
// if x - r < 0 then
60425: LD_VAR 0 2
60429: PUSH
60430: LD_VAR 0 4
60434: MINUS
60435: PUSH
60436: LD_INT 0
60438: LESS
60439: IFFALSE 60451
// min_x := 0 else
60441: LD_ADDR_VAR 0 7
60445: PUSH
60446: LD_INT 0
60448: ST_TO_ADDR
60449: GO 60467
// min_x := x - r ;
60451: LD_ADDR_VAR 0 7
60455: PUSH
60456: LD_VAR 0 2
60460: PUSH
60461: LD_VAR 0 4
60465: MINUS
60466: ST_TO_ADDR
// if y - r < 0 then
60467: LD_VAR 0 3
60471: PUSH
60472: LD_VAR 0 4
60476: MINUS
60477: PUSH
60478: LD_INT 0
60480: LESS
60481: IFFALSE 60493
// min_y := 0 else
60483: LD_ADDR_VAR 0 8
60487: PUSH
60488: LD_INT 0
60490: ST_TO_ADDR
60491: GO 60509
// min_y := y - r ;
60493: LD_ADDR_VAR 0 8
60497: PUSH
60498: LD_VAR 0 3
60502: PUSH
60503: LD_VAR 0 4
60507: MINUS
60508: ST_TO_ADDR
// max_x := x + r ;
60509: LD_ADDR_VAR 0 9
60513: PUSH
60514: LD_VAR 0 2
60518: PUSH
60519: LD_VAR 0 4
60523: PLUS
60524: ST_TO_ADDR
// max_y := y + r ;
60525: LD_ADDR_VAR 0 10
60529: PUSH
60530: LD_VAR 0 3
60534: PUSH
60535: LD_VAR 0 4
60539: PLUS
60540: ST_TO_ADDR
// for _x = min_x to max_x do
60541: LD_ADDR_VAR 0 11
60545: PUSH
60546: DOUBLE
60547: LD_VAR 0 7
60551: DEC
60552: ST_TO_ADDR
60553: LD_VAR 0 9
60557: PUSH
60558: FOR_TO
60559: IFFALSE 60678
// for _y = min_y to max_y do
60561: LD_ADDR_VAR 0 12
60565: PUSH
60566: DOUBLE
60567: LD_VAR 0 8
60571: DEC
60572: ST_TO_ADDR
60573: LD_VAR 0 10
60577: PUSH
60578: FOR_TO
60579: IFFALSE 60674
// begin if not ValidHex ( _x , _y ) then
60581: LD_VAR 0 11
60585: PPUSH
60586: LD_VAR 0 12
60590: PPUSH
60591: CALL_OW 488
60595: NOT
60596: IFFALSE 60600
// continue ;
60598: GO 60578
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60600: LD_VAR 0 11
60604: PPUSH
60605: LD_VAR 0 12
60609: PPUSH
60610: CALL_OW 351
60614: IFFALSE 60632
60616: PUSH
60617: LD_VAR 0 11
60621: PPUSH
60622: LD_VAR 0 12
60626: PPUSH
60627: CALL_OW 554
60631: AND
60632: IFFALSE 60672
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60634: LD_ADDR_VAR 0 13
60638: PUSH
60639: LD_VAR 0 13
60643: PPUSH
60644: LD_VAR 0 13
60648: PUSH
60649: LD_INT 1
60651: PLUS
60652: PPUSH
60653: LD_VAR 0 11
60657: PUSH
60658: LD_VAR 0 12
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PPUSH
60667: CALL_OW 2
60671: ST_TO_ADDR
// end ;
60672: GO 60578
60674: POP
60675: POP
60676: GO 60558
60678: POP
60679: POP
// if not list then
60680: LD_VAR 0 13
60684: NOT
60685: IFFALSE 60689
// exit ;
60687: GO 60760
// for i in list do
60689: LD_ADDR_VAR 0 6
60693: PUSH
60694: LD_VAR 0 13
60698: PUSH
60699: FOR_IN
60700: IFFALSE 60758
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60702: LD_VAR 0 1
60706: PPUSH
60707: LD_STRING M
60709: PUSH
60710: LD_VAR 0 6
60714: PUSH
60715: LD_INT 1
60717: ARRAY
60718: PUSH
60719: LD_VAR 0 6
60723: PUSH
60724: LD_INT 2
60726: ARRAY
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: PUSH
60749: EMPTY
60750: LIST
60751: PPUSH
60752: CALL_OW 447
60756: GO 60699
60758: POP
60759: POP
// end ;
60760: LD_VAR 0 5
60764: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60765: LD_INT 0
60767: PPUSH
60768: PPUSH
60769: PPUSH
60770: PPUSH
60771: PPUSH
60772: PPUSH
60773: PPUSH
60774: PPUSH
60775: PPUSH
60776: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60777: LD_VAR 0 1
60781: PPUSH
60782: CALL_OW 302
60786: NOT
60787: IFTRUE 60806
60789: PUSH
60790: LD_VAR 0 2
60794: PPUSH
60795: LD_VAR 0 3
60799: PPUSH
60800: CALL_OW 488
60804: NOT
60805: OR
60806: IFTRUE 60815
60808: PUSH
60809: LD_VAR 0 4
60813: NOT
60814: OR
60815: IFFALSE 60819
// exit ;
60817: GO 61336
// list := [ ] ;
60819: LD_ADDR_VAR 0 13
60823: PUSH
60824: EMPTY
60825: ST_TO_ADDR
// if x - r < 0 then
60826: LD_VAR 0 2
60830: PUSH
60831: LD_VAR 0 4
60835: MINUS
60836: PUSH
60837: LD_INT 0
60839: LESS
60840: IFFALSE 60852
// min_x := 0 else
60842: LD_ADDR_VAR 0 7
60846: PUSH
60847: LD_INT 0
60849: ST_TO_ADDR
60850: GO 60868
// min_x := x - r ;
60852: LD_ADDR_VAR 0 7
60856: PUSH
60857: LD_VAR 0 2
60861: PUSH
60862: LD_VAR 0 4
60866: MINUS
60867: ST_TO_ADDR
// if y - r < 0 then
60868: LD_VAR 0 3
60872: PUSH
60873: LD_VAR 0 4
60877: MINUS
60878: PUSH
60879: LD_INT 0
60881: LESS
60882: IFFALSE 60894
// min_y := 0 else
60884: LD_ADDR_VAR 0 8
60888: PUSH
60889: LD_INT 0
60891: ST_TO_ADDR
60892: GO 60910
// min_y := y - r ;
60894: LD_ADDR_VAR 0 8
60898: PUSH
60899: LD_VAR 0 3
60903: PUSH
60904: LD_VAR 0 4
60908: MINUS
60909: ST_TO_ADDR
// max_x := x + r ;
60910: LD_ADDR_VAR 0 9
60914: PUSH
60915: LD_VAR 0 2
60919: PUSH
60920: LD_VAR 0 4
60924: PLUS
60925: ST_TO_ADDR
// max_y := y + r ;
60926: LD_ADDR_VAR 0 10
60930: PUSH
60931: LD_VAR 0 3
60935: PUSH
60936: LD_VAR 0 4
60940: PLUS
60941: ST_TO_ADDR
// for _x = min_x to max_x do
60942: LD_ADDR_VAR 0 11
60946: PUSH
60947: DOUBLE
60948: LD_VAR 0 7
60952: DEC
60953: ST_TO_ADDR
60954: LD_VAR 0 9
60958: PUSH
60959: FOR_TO
60960: IFFALSE 61079
// for _y = min_y to max_y do
60962: LD_ADDR_VAR 0 12
60966: PUSH
60967: DOUBLE
60968: LD_VAR 0 8
60972: DEC
60973: ST_TO_ADDR
60974: LD_VAR 0 10
60978: PUSH
60979: FOR_TO
60980: IFFALSE 61075
// begin if not ValidHex ( _x , _y ) then
60982: LD_VAR 0 11
60986: PPUSH
60987: LD_VAR 0 12
60991: PPUSH
60992: CALL_OW 488
60996: NOT
60997: IFFALSE 61001
// continue ;
60999: GO 60979
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61001: LD_VAR 0 11
61005: PPUSH
61006: LD_VAR 0 12
61010: PPUSH
61011: CALL_OW 351
61015: IFFALSE 61033
61017: PUSH
61018: LD_VAR 0 11
61022: PPUSH
61023: LD_VAR 0 12
61027: PPUSH
61028: CALL_OW 554
61032: AND
61033: IFFALSE 61073
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61035: LD_ADDR_VAR 0 13
61039: PUSH
61040: LD_VAR 0 13
61044: PPUSH
61045: LD_VAR 0 13
61049: PUSH
61050: LD_INT 1
61052: PLUS
61053: PPUSH
61054: LD_VAR 0 11
61058: PUSH
61059: LD_VAR 0 12
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PPUSH
61068: CALL_OW 2
61072: ST_TO_ADDR
// end ;
61073: GO 60979
61075: POP
61076: POP
61077: GO 60959
61079: POP
61080: POP
// if not list then
61081: LD_VAR 0 13
61085: NOT
61086: IFFALSE 61090
// exit ;
61088: GO 61336
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61090: LD_ADDR_VAR 0 13
61094: PUSH
61095: LD_VAR 0 1
61099: PPUSH
61100: LD_VAR 0 13
61104: PPUSH
61105: LD_INT 1
61107: PPUSH
61108: LD_INT 1
61110: PPUSH
61111: CALL 21266 0 4
61115: ST_TO_ADDR
// ComStop ( flame ) ;
61116: LD_VAR 0 1
61120: PPUSH
61121: CALL_OW 141
// for i in list do
61125: LD_ADDR_VAR 0 6
61129: PUSH
61130: LD_VAR 0 13
61134: PUSH
61135: FOR_IN
61136: IFFALSE 61167
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61138: LD_VAR 0 1
61142: PPUSH
61143: LD_VAR 0 6
61147: PUSH
61148: LD_INT 1
61150: ARRAY
61151: PPUSH
61152: LD_VAR 0 6
61156: PUSH
61157: LD_INT 2
61159: ARRAY
61160: PPUSH
61161: CALL_OW 176
61165: GO 61135
61167: POP
61168: POP
// repeat wait ( 0 0$1 ) ;
61169: LD_INT 35
61171: PPUSH
61172: CALL_OW 67
// task := GetTaskList ( flame ) ;
61176: LD_ADDR_VAR 0 14
61180: PUSH
61181: LD_VAR 0 1
61185: PPUSH
61186: CALL_OW 437
61190: ST_TO_ADDR
// if not task then
61191: LD_VAR 0 14
61195: NOT
61196: IFFALSE 61200
// exit ;
61198: GO 61336
// if task [ 1 ] [ 1 ] <> | then
61200: LD_VAR 0 14
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: PUSH
61213: LD_STRING |
61215: NONEQUAL
61216: IFFALSE 61220
// exit ;
61218: GO 61336
// _x := task [ 1 ] [ 2 ] ;
61220: LD_ADDR_VAR 0 11
61224: PUSH
61225: LD_VAR 0 14
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PUSH
61234: LD_INT 2
61236: ARRAY
61237: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61238: LD_ADDR_VAR 0 12
61242: PUSH
61243: LD_VAR 0 14
61247: PUSH
61248: LD_INT 1
61250: ARRAY
61251: PUSH
61252: LD_INT 3
61254: ARRAY
61255: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61256: LD_VAR 0 11
61260: PPUSH
61261: LD_VAR 0 12
61265: PPUSH
61266: CALL_OW 351
61270: NOT
61271: IFTRUE 61290
61273: PUSH
61274: LD_VAR 0 11
61278: PPUSH
61279: LD_VAR 0 12
61283: PPUSH
61284: CALL_OW 554
61288: NOT
61289: OR
61290: IFFALSE 61324
// begin task := Delete ( task , 1 ) ;
61292: LD_ADDR_VAR 0 14
61296: PUSH
61297: LD_VAR 0 14
61301: PPUSH
61302: LD_INT 1
61304: PPUSH
61305: CALL_OW 3
61309: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61310: LD_VAR 0 1
61314: PPUSH
61315: LD_VAR 0 14
61319: PPUSH
61320: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61324: LD_VAR 0 1
61328: PPUSH
61329: CALL_OW 314
61333: NOT
61334: IFFALSE 61169
// end ;
61336: LD_VAR 0 5
61340: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61341: LD_EXP 47
61345: NOT
61346: IFFALSE 61396
61348: GO 61350
61350: DISABLE
// begin initHack := true ;
61351: LD_ADDR_EXP 47
61355: PUSH
61356: LD_INT 1
61358: ST_TO_ADDR
// hackTanks := [ ] ;
61359: LD_ADDR_EXP 48
61363: PUSH
61364: EMPTY
61365: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61366: LD_ADDR_EXP 49
61370: PUSH
61371: EMPTY
61372: ST_TO_ADDR
// hackLimit := 3 ;
61373: LD_ADDR_EXP 50
61377: PUSH
61378: LD_INT 3
61380: ST_TO_ADDR
// hackDist := 12 ;
61381: LD_ADDR_EXP 51
61385: PUSH
61386: LD_INT 12
61388: ST_TO_ADDR
// hackCounter := [ ] ;
61389: LD_ADDR_EXP 52
61393: PUSH
61394: EMPTY
61395: ST_TO_ADDR
// end ;
61396: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61397: LD_EXP 47
61401: IFFALSE 61419
61403: PUSH
61404: LD_INT 34
61406: PUSH
61407: LD_INT 99
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PPUSH
61414: CALL_OW 69
61418: AND
61419: IFFALSE 61672
61421: GO 61423
61423: DISABLE
61424: LD_INT 0
61426: PPUSH
61427: PPUSH
// begin enable ;
61428: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61429: LD_ADDR_VAR 0 1
61433: PUSH
61434: LD_INT 34
61436: PUSH
61437: LD_INT 99
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PPUSH
61444: CALL_OW 69
61448: PUSH
61449: FOR_IN
61450: IFFALSE 61670
// begin if not i in hackTanks then
61452: LD_VAR 0 1
61456: PUSH
61457: LD_EXP 48
61461: IN
61462: NOT
61463: IFFALSE 61546
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61465: LD_ADDR_EXP 48
61469: PUSH
61470: LD_EXP 48
61474: PPUSH
61475: LD_EXP 48
61479: PUSH
61480: LD_INT 1
61482: PLUS
61483: PPUSH
61484: LD_VAR 0 1
61488: PPUSH
61489: CALL_OW 1
61493: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61494: LD_ADDR_EXP 49
61498: PUSH
61499: LD_EXP 49
61503: PPUSH
61504: LD_EXP 49
61508: PUSH
61509: LD_INT 1
61511: PLUS
61512: PPUSH
61513: EMPTY
61514: PPUSH
61515: CALL_OW 1
61519: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61520: LD_ADDR_EXP 52
61524: PUSH
61525: LD_EXP 52
61529: PPUSH
61530: LD_EXP 52
61534: PUSH
61535: LD_INT 1
61537: PLUS
61538: PPUSH
61539: EMPTY
61540: PPUSH
61541: CALL_OW 1
61545: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61546: LD_VAR 0 1
61550: PPUSH
61551: CALL_OW 302
61555: NOT
61556: IFFALSE 61569
// begin HackUnlinkAll ( i ) ;
61558: LD_VAR 0 1
61562: PPUSH
61563: CALL 61675 0 1
// continue ;
61567: GO 61449
// end ; HackCheckCapturedStatus ( i ) ;
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL 62120 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61578: LD_ADDR_VAR 0 2
61582: PUSH
61583: LD_INT 81
61585: PUSH
61586: LD_VAR 0 1
61590: PPUSH
61591: CALL_OW 255
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 33
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 91
61612: PUSH
61613: LD_VAR 0 1
61617: PUSH
61618: LD_EXP 51
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 50
61630: PUSH
61631: EMPTY
61632: LIST
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: PPUSH
61640: CALL_OW 69
61644: ST_TO_ADDR
// if not tmp then
61645: LD_VAR 0 2
61649: NOT
61650: IFFALSE 61654
// continue ;
61652: GO 61449
// HackLink ( i , tmp ) ;
61654: LD_VAR 0 1
61658: PPUSH
61659: LD_VAR 0 2
61663: PPUSH
61664: CALL 61811 0 2
// end ;
61668: GO 61449
61670: POP
61671: POP
// end ;
61672: PPOPN 2
61674: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61675: LD_INT 0
61677: PPUSH
61678: PPUSH
61679: PPUSH
// if not hack in hackTanks then
61680: LD_VAR 0 1
61684: PUSH
61685: LD_EXP 48
61689: IN
61690: NOT
61691: IFFALSE 61695
// exit ;
61693: GO 61806
// index := GetElementIndex ( hackTanks , hack ) ;
61695: LD_ADDR_VAR 0 4
61699: PUSH
61700: LD_EXP 48
61704: PPUSH
61705: LD_VAR 0 1
61709: PPUSH
61710: CALL 20561 0 2
61714: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61715: LD_EXP 49
61719: PUSH
61720: LD_VAR 0 4
61724: ARRAY
61725: IFFALSE 61806
// begin for i in hackTanksCaptured [ index ] do
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: LD_EXP 49
61736: PUSH
61737: LD_VAR 0 4
61741: ARRAY
61742: PUSH
61743: FOR_IN
61744: IFFALSE 61770
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61746: LD_VAR 0 3
61750: PUSH
61751: LD_INT 1
61753: ARRAY
61754: PPUSH
61755: LD_VAR 0 3
61759: PUSH
61760: LD_INT 2
61762: ARRAY
61763: PPUSH
61764: CALL_OW 235
61768: GO 61743
61770: POP
61771: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61772: LD_ADDR_EXP 49
61776: PUSH
61777: LD_EXP 49
61781: PPUSH
61782: LD_VAR 0 4
61786: PPUSH
61787: EMPTY
61788: PPUSH
61789: CALL_OW 1
61793: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61794: LD_VAR 0 1
61798: PPUSH
61799: LD_INT 0
61801: PPUSH
61802: CALL_OW 505
// end ; end ;
61806: LD_VAR 0 2
61810: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61811: LD_INT 0
61813: PPUSH
61814: PPUSH
61815: PPUSH
// if not hack in hackTanks or not vehicles then
61816: LD_VAR 0 1
61820: PUSH
61821: LD_EXP 48
61825: IN
61826: NOT
61827: IFTRUE 61836
61829: PUSH
61830: LD_VAR 0 2
61834: NOT
61835: OR
61836: IFFALSE 61840
// exit ;
61838: GO 62115
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61840: LD_ADDR_VAR 0 2
61844: PUSH
61845: LD_VAR 0 1
61849: PPUSH
61850: LD_VAR 0 2
61854: PPUSH
61855: LD_INT 1
61857: PPUSH
61858: LD_INT 1
61860: PPUSH
61861: CALL 21213 0 4
61865: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61866: LD_ADDR_VAR 0 5
61870: PUSH
61871: LD_EXP 48
61875: PPUSH
61876: LD_VAR 0 1
61880: PPUSH
61881: CALL 20561 0 2
61885: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61886: LD_EXP 49
61890: PUSH
61891: LD_VAR 0 5
61895: ARRAY
61896: PUSH
61897: LD_EXP 50
61901: LESS
61902: IFFALSE 62091
// begin for i := 1 to vehicles do
61904: LD_ADDR_VAR 0 4
61908: PUSH
61909: DOUBLE
61910: LD_INT 1
61912: DEC
61913: ST_TO_ADDR
61914: LD_VAR 0 2
61918: PUSH
61919: FOR_TO
61920: IFFALSE 62089
// begin if hackTanksCaptured [ index ] = hackLimit then
61922: LD_EXP 49
61926: PUSH
61927: LD_VAR 0 5
61931: ARRAY
61932: PUSH
61933: LD_EXP 50
61937: EQUAL
61938: IFFALSE 61942
// break ;
61940: GO 62089
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61942: LD_ADDR_EXP 52
61946: PUSH
61947: LD_EXP 52
61951: PPUSH
61952: LD_VAR 0 5
61956: PPUSH
61957: LD_EXP 52
61961: PUSH
61962: LD_VAR 0 5
61966: ARRAY
61967: PUSH
61968: LD_INT 1
61970: PLUS
61971: PPUSH
61972: CALL_OW 1
61976: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61977: LD_ADDR_EXP 49
61981: PUSH
61982: LD_EXP 49
61986: PPUSH
61987: LD_VAR 0 5
61991: PUSH
61992: LD_EXP 49
61996: PUSH
61997: LD_VAR 0 5
62001: ARRAY
62002: PUSH
62003: LD_INT 1
62005: PLUS
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PPUSH
62011: LD_VAR 0 2
62015: PUSH
62016: LD_VAR 0 4
62020: ARRAY
62021: PUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_VAR 0 4
62031: ARRAY
62032: PPUSH
62033: CALL_OW 255
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PPUSH
62042: CALL 20778 0 3
62046: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62047: LD_VAR 0 2
62051: PUSH
62052: LD_VAR 0 4
62056: ARRAY
62057: PPUSH
62058: LD_VAR 0 1
62062: PPUSH
62063: CALL_OW 255
62067: PPUSH
62068: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62072: LD_VAR 0 2
62076: PUSH
62077: LD_VAR 0 4
62081: ARRAY
62082: PPUSH
62083: CALL_OW 141
// end ;
62087: GO 61919
62089: POP
62090: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62091: LD_VAR 0 1
62095: PPUSH
62096: LD_EXP 49
62100: PUSH
62101: LD_VAR 0 5
62105: ARRAY
62106: PUSH
62107: LD_INT 0
62109: PLUS
62110: PPUSH
62111: CALL_OW 505
// end ;
62115: LD_VAR 0 3
62119: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62120: LD_INT 0
62122: PPUSH
62123: PPUSH
62124: PPUSH
62125: PPUSH
// if not hack in hackTanks then
62126: LD_VAR 0 1
62130: PUSH
62131: LD_EXP 48
62135: IN
62136: NOT
62137: IFFALSE 62141
// exit ;
62139: GO 62385
// index := GetElementIndex ( hackTanks , hack ) ;
62141: LD_ADDR_VAR 0 4
62145: PUSH
62146: LD_EXP 48
62150: PPUSH
62151: LD_VAR 0 1
62155: PPUSH
62156: CALL 20561 0 2
62160: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: DOUBLE
62167: LD_EXP 49
62171: PUSH
62172: LD_VAR 0 4
62176: ARRAY
62177: INC
62178: ST_TO_ADDR
62179: LD_INT 1
62181: PUSH
62182: FOR_DOWNTO
62183: IFFALSE 62359
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62185: LD_ADDR_VAR 0 5
62189: PUSH
62190: LD_EXP 49
62194: PUSH
62195: LD_VAR 0 4
62199: ARRAY
62200: PUSH
62201: LD_VAR 0 3
62205: ARRAY
62206: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62207: LD_VAR 0 5
62211: PUSH
62212: LD_INT 1
62214: ARRAY
62215: PPUSH
62216: CALL_OW 302
62220: NOT
62221: IFTRUE 62249
62223: PUSH
62224: LD_VAR 0 5
62228: PUSH
62229: LD_INT 1
62231: ARRAY
62232: PPUSH
62233: CALL_OW 255
62237: PUSH
62238: LD_VAR 0 1
62242: PPUSH
62243: CALL_OW 255
62247: NONEQUAL
62248: OR
62249: IFFALSE 62357
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62251: LD_VAR 0 5
62255: PUSH
62256: LD_INT 1
62258: ARRAY
62259: PPUSH
62260: CALL_OW 305
62264: IFFALSE 62292
62266: PUSH
62267: LD_VAR 0 5
62271: PUSH
62272: LD_INT 1
62274: ARRAY
62275: PPUSH
62276: CALL_OW 255
62280: PUSH
62281: LD_VAR 0 1
62285: PPUSH
62286: CALL_OW 255
62290: EQUAL
62291: AND
62292: IFFALSE 62316
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62294: LD_VAR 0 5
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PPUSH
62303: LD_VAR 0 5
62307: PUSH
62308: LD_INT 2
62310: ARRAY
62311: PPUSH
62312: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62316: LD_ADDR_EXP 49
62320: PUSH
62321: LD_EXP 49
62325: PPUSH
62326: LD_VAR 0 4
62330: PPUSH
62331: LD_EXP 49
62335: PUSH
62336: LD_VAR 0 4
62340: ARRAY
62341: PPUSH
62342: LD_VAR 0 3
62346: PPUSH
62347: CALL_OW 3
62351: PPUSH
62352: CALL_OW 1
62356: ST_TO_ADDR
// end ; end ;
62357: GO 62182
62359: POP
62360: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62361: LD_VAR 0 1
62365: PPUSH
62366: LD_EXP 49
62370: PUSH
62371: LD_VAR 0 4
62375: ARRAY
62376: PUSH
62377: LD_INT 0
62379: PLUS
62380: PPUSH
62381: CALL_OW 505
// end ;
62385: LD_VAR 0 2
62389: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62390: LD_INT 0
62392: PPUSH
62393: PPUSH
62394: PPUSH
62395: PPUSH
// if not hack in hackTanks then
62396: LD_VAR 0 1
62400: PUSH
62401: LD_EXP 48
62405: IN
62406: NOT
62407: IFFALSE 62411
// exit ;
62409: GO 62496
// index := GetElementIndex ( hackTanks , hack ) ;
62411: LD_ADDR_VAR 0 5
62415: PUSH
62416: LD_EXP 48
62420: PPUSH
62421: LD_VAR 0 1
62425: PPUSH
62426: CALL 20561 0 2
62430: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62431: LD_ADDR_VAR 0 4
62435: PUSH
62436: DOUBLE
62437: LD_INT 1
62439: DEC
62440: ST_TO_ADDR
62441: LD_EXP 49
62445: PUSH
62446: LD_VAR 0 5
62450: ARRAY
62451: PUSH
62452: FOR_TO
62453: IFFALSE 62494
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62455: LD_EXP 49
62459: PUSH
62460: LD_VAR 0 5
62464: ARRAY
62465: PUSH
62466: LD_VAR 0 4
62470: ARRAY
62471: PUSH
62472: LD_INT 1
62474: ARRAY
62475: PUSH
62476: LD_VAR 0 2
62480: EQUAL
62481: IFFALSE 62492
// KillUnit ( vehicle ) ;
62483: LD_VAR 0 2
62487: PPUSH
62488: CALL_OW 66
62492: GO 62452
62494: POP
62495: POP
// end ;
62496: LD_VAR 0 3
62500: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62501: LD_EXP 53
62505: NOT
62506: IFFALSE 62541
62508: GO 62510
62510: DISABLE
// begin initMiner := true ;
62511: LD_ADDR_EXP 53
62515: PUSH
62516: LD_INT 1
62518: ST_TO_ADDR
// minersList := [ ] ;
62519: LD_ADDR_EXP 54
62523: PUSH
62524: EMPTY
62525: ST_TO_ADDR
// minerMinesList := [ ] ;
62526: LD_ADDR_EXP 55
62530: PUSH
62531: EMPTY
62532: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62533: LD_ADDR_EXP 56
62537: PUSH
62538: LD_INT 5
62540: ST_TO_ADDR
// end ;
62541: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62542: LD_EXP 53
62546: IFFALSE 62564
62548: PUSH
62549: LD_INT 34
62551: PUSH
62552: LD_INT 81
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PPUSH
62559: CALL_OW 69
62563: AND
62564: IFFALSE 63027
62566: GO 62568
62568: DISABLE
62569: LD_INT 0
62571: PPUSH
62572: PPUSH
62573: PPUSH
62574: PPUSH
// begin enable ;
62575: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62576: LD_ADDR_VAR 0 1
62580: PUSH
62581: LD_INT 34
62583: PUSH
62584: LD_INT 81
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PPUSH
62591: CALL_OW 69
62595: PUSH
62596: FOR_IN
62597: IFFALSE 62669
// begin if not i in minersList then
62599: LD_VAR 0 1
62603: PUSH
62604: LD_EXP 54
62608: IN
62609: NOT
62610: IFFALSE 62667
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62612: LD_ADDR_EXP 54
62616: PUSH
62617: LD_EXP 54
62621: PPUSH
62622: LD_EXP 54
62626: PUSH
62627: LD_INT 1
62629: PLUS
62630: PPUSH
62631: LD_VAR 0 1
62635: PPUSH
62636: CALL_OW 1
62640: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62641: LD_ADDR_EXP 55
62645: PUSH
62646: LD_EXP 55
62650: PPUSH
62651: LD_EXP 55
62655: PUSH
62656: LD_INT 1
62658: PLUS
62659: PPUSH
62660: EMPTY
62661: PPUSH
62662: CALL_OW 1
62666: ST_TO_ADDR
// end end ;
62667: GO 62596
62669: POP
62670: POP
// for i := minerMinesList downto 1 do
62671: LD_ADDR_VAR 0 1
62675: PUSH
62676: DOUBLE
62677: LD_EXP 55
62681: INC
62682: ST_TO_ADDR
62683: LD_INT 1
62685: PUSH
62686: FOR_DOWNTO
62687: IFFALSE 63025
// begin if IsLive ( minersList [ i ] ) then
62689: LD_EXP 54
62693: PUSH
62694: LD_VAR 0 1
62698: ARRAY
62699: PPUSH
62700: CALL_OW 300
62704: IFFALSE 62732
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62706: LD_EXP 54
62710: PUSH
62711: LD_VAR 0 1
62715: ARRAY
62716: PPUSH
62717: LD_EXP 55
62721: PUSH
62722: LD_VAR 0 1
62726: ARRAY
62727: PPUSH
62728: CALL_OW 505
// if not minerMinesList [ i ] then
62732: LD_EXP 55
62736: PUSH
62737: LD_VAR 0 1
62741: ARRAY
62742: NOT
62743: IFFALSE 62747
// continue ;
62745: GO 62686
// for j := minerMinesList [ i ] downto 1 do
62747: LD_ADDR_VAR 0 2
62751: PUSH
62752: DOUBLE
62753: LD_EXP 55
62757: PUSH
62758: LD_VAR 0 1
62762: ARRAY
62763: INC
62764: ST_TO_ADDR
62765: LD_INT 1
62767: PUSH
62768: FOR_DOWNTO
62769: IFFALSE 63021
// begin side := GetSide ( minersList [ i ] ) ;
62771: LD_ADDR_VAR 0 3
62775: PUSH
62776: LD_EXP 54
62780: PUSH
62781: LD_VAR 0 1
62785: ARRAY
62786: PPUSH
62787: CALL_OW 255
62791: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62792: LD_ADDR_VAR 0 4
62796: PUSH
62797: LD_EXP 55
62801: PUSH
62802: LD_VAR 0 1
62806: ARRAY
62807: PUSH
62808: LD_VAR 0 2
62812: ARRAY
62813: PUSH
62814: LD_INT 1
62816: ARRAY
62817: PPUSH
62818: LD_EXP 55
62822: PUSH
62823: LD_VAR 0 1
62827: ARRAY
62828: PUSH
62829: LD_VAR 0 2
62833: ARRAY
62834: PUSH
62835: LD_INT 2
62837: ARRAY
62838: PPUSH
62839: CALL_OW 428
62843: ST_TO_ADDR
// if not tmp then
62844: LD_VAR 0 4
62848: NOT
62849: IFFALSE 62853
// continue ;
62851: GO 62768
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62853: LD_VAR 0 4
62857: PUSH
62858: LD_INT 81
62860: PUSH
62861: LD_VAR 0 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PPUSH
62870: CALL_OW 69
62874: IN
62875: IFFALSE 62925
62877: PUSH
62878: LD_EXP 55
62882: PUSH
62883: LD_VAR 0 1
62887: ARRAY
62888: PUSH
62889: LD_VAR 0 2
62893: ARRAY
62894: PUSH
62895: LD_INT 1
62897: ARRAY
62898: PPUSH
62899: LD_EXP 55
62903: PUSH
62904: LD_VAR 0 1
62908: ARRAY
62909: PUSH
62910: LD_VAR 0 2
62914: ARRAY
62915: PUSH
62916: LD_INT 2
62918: ARRAY
62919: PPUSH
62920: CALL_OW 458
62924: AND
62925: IFFALSE 63019
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62927: LD_EXP 55
62931: PUSH
62932: LD_VAR 0 1
62936: ARRAY
62937: PUSH
62938: LD_VAR 0 2
62942: ARRAY
62943: PUSH
62944: LD_INT 1
62946: ARRAY
62947: PPUSH
62948: LD_EXP 55
62952: PUSH
62953: LD_VAR 0 1
62957: ARRAY
62958: PUSH
62959: LD_VAR 0 2
62963: ARRAY
62964: PUSH
62965: LD_INT 2
62967: ARRAY
62968: PPUSH
62969: LD_VAR 0 3
62973: PPUSH
62974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62978: LD_ADDR_EXP 55
62982: PUSH
62983: LD_EXP 55
62987: PPUSH
62988: LD_VAR 0 1
62992: PPUSH
62993: LD_EXP 55
62997: PUSH
62998: LD_VAR 0 1
63002: ARRAY
63003: PPUSH
63004: LD_VAR 0 2
63008: PPUSH
63009: CALL_OW 3
63013: PPUSH
63014: CALL_OW 1
63018: ST_TO_ADDR
// end ; end ;
63019: GO 62768
63021: POP
63022: POP
// end ;
63023: GO 62686
63025: POP
63026: POP
// end ;
63027: PPOPN 4
63029: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63030: LD_INT 0
63032: PPUSH
63033: PPUSH
// result := false ;
63034: LD_ADDR_VAR 0 4
63038: PUSH
63039: LD_INT 0
63041: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63042: LD_VAR 0 1
63046: PPUSH
63047: CALL_OW 264
63051: PUSH
63052: LD_INT 81
63054: EQUAL
63055: NOT
63056: IFFALSE 63060
// exit ;
63058: GO 63304
// index := GetElementIndex ( minersList , unit ) ;
63060: LD_ADDR_VAR 0 5
63064: PUSH
63065: LD_EXP 54
63069: PPUSH
63070: LD_VAR 0 1
63074: PPUSH
63075: CALL 20561 0 2
63079: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63080: LD_EXP 55
63084: PUSH
63085: LD_VAR 0 5
63089: ARRAY
63090: PUSH
63091: LD_EXP 56
63095: GREATEREQUAL
63096: IFFALSE 63100
// exit ;
63098: GO 63304
// ComMoveXY ( unit , x , y ) ;
63100: LD_VAR 0 1
63104: PPUSH
63105: LD_VAR 0 2
63109: PPUSH
63110: LD_VAR 0 3
63114: PPUSH
63115: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63119: LD_INT 35
63121: PPUSH
63122: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63126: LD_VAR 0 1
63130: PPUSH
63131: LD_VAR 0 2
63135: PPUSH
63136: LD_VAR 0 3
63140: PPUSH
63141: CALL 52607 0 3
63145: NOT
63146: IFFALSE 63159
63148: PUSH
63149: LD_VAR 0 1
63153: PPUSH
63154: CALL_OW 314
63158: AND
63159: IFFALSE 63163
// exit ;
63161: GO 63304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63163: LD_VAR 0 2
63167: PPUSH
63168: LD_VAR 0 3
63172: PPUSH
63173: CALL_OW 428
63177: PUSH
63178: LD_VAR 0 1
63182: EQUAL
63183: IFFALSE 63197
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: CALL_OW 314
63195: NOT
63196: AND
63197: IFFALSE 63119
// PlaySoundXY ( x , y , PlantMine ) ;
63199: LD_VAR 0 2
63203: PPUSH
63204: LD_VAR 0 3
63208: PPUSH
63209: LD_STRING PlantMine
63211: PPUSH
63212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63216: LD_VAR 0 2
63220: PPUSH
63221: LD_VAR 0 3
63225: PPUSH
63226: LD_VAR 0 1
63230: PPUSH
63231: CALL_OW 255
63235: PPUSH
63236: LD_INT 0
63238: PPUSH
63239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63243: LD_ADDR_EXP 55
63247: PUSH
63248: LD_EXP 55
63252: PPUSH
63253: LD_VAR 0 5
63257: PUSH
63258: LD_EXP 55
63262: PUSH
63263: LD_VAR 0 5
63267: ARRAY
63268: PUSH
63269: LD_INT 1
63271: PLUS
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PPUSH
63277: LD_VAR 0 2
63281: PUSH
63282: LD_VAR 0 3
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PPUSH
63291: CALL 20778 0 3
63295: ST_TO_ADDR
// result := true ;
63296: LD_ADDR_VAR 0 4
63300: PUSH
63301: LD_INT 1
63303: ST_TO_ADDR
// end ;
63304: LD_VAR 0 4
63308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63309: LD_INT 0
63311: PPUSH
63312: PPUSH
63313: PPUSH
// if not unit in minersList then
63314: LD_VAR 0 1
63318: PUSH
63319: LD_EXP 54
63323: IN
63324: NOT
63325: IFFALSE 63329
// exit ;
63327: GO 63723
// index := GetElementIndex ( minersList , unit ) ;
63329: LD_ADDR_VAR 0 6
63333: PUSH
63334: LD_EXP 54
63338: PPUSH
63339: LD_VAR 0 1
63343: PPUSH
63344: CALL 20561 0 2
63348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63349: LD_ADDR_VAR 0 5
63353: PUSH
63354: DOUBLE
63355: LD_EXP 55
63359: PUSH
63360: LD_VAR 0 6
63364: ARRAY
63365: INC
63366: ST_TO_ADDR
63367: LD_INT 1
63369: PUSH
63370: FOR_DOWNTO
63371: IFFALSE 63534
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63373: LD_EXP 55
63377: PUSH
63378: LD_VAR 0 6
63382: ARRAY
63383: PUSH
63384: LD_VAR 0 5
63388: ARRAY
63389: PUSH
63390: LD_INT 1
63392: ARRAY
63393: PUSH
63394: LD_VAR 0 2
63398: EQUAL
63399: IFFALSE 63429
63401: PUSH
63402: LD_EXP 55
63406: PUSH
63407: LD_VAR 0 6
63411: ARRAY
63412: PUSH
63413: LD_VAR 0 5
63417: ARRAY
63418: PUSH
63419: LD_INT 2
63421: ARRAY
63422: PUSH
63423: LD_VAR 0 3
63427: EQUAL
63428: AND
63429: IFFALSE 63532
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63431: LD_EXP 55
63435: PUSH
63436: LD_VAR 0 6
63440: ARRAY
63441: PUSH
63442: LD_VAR 0 5
63446: ARRAY
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: PPUSH
63452: LD_EXP 55
63456: PUSH
63457: LD_VAR 0 6
63461: ARRAY
63462: PUSH
63463: LD_VAR 0 5
63467: ARRAY
63468: PUSH
63469: LD_INT 2
63471: ARRAY
63472: PPUSH
63473: LD_VAR 0 1
63477: PPUSH
63478: CALL_OW 255
63482: PPUSH
63483: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63487: LD_ADDR_EXP 55
63491: PUSH
63492: LD_EXP 55
63496: PPUSH
63497: LD_VAR 0 6
63501: PPUSH
63502: LD_EXP 55
63506: PUSH
63507: LD_VAR 0 6
63511: ARRAY
63512: PPUSH
63513: LD_VAR 0 5
63517: PPUSH
63518: CALL_OW 3
63522: PPUSH
63523: CALL_OW 1
63527: ST_TO_ADDR
// exit ;
63528: POP
63529: POP
63530: GO 63723
// end ; end ;
63532: GO 63370
63534: POP
63535: POP
// for i := minerMinesList [ index ] downto 1 do
63536: LD_ADDR_VAR 0 5
63540: PUSH
63541: DOUBLE
63542: LD_EXP 55
63546: PUSH
63547: LD_VAR 0 6
63551: ARRAY
63552: INC
63553: ST_TO_ADDR
63554: LD_INT 1
63556: PUSH
63557: FOR_DOWNTO
63558: IFFALSE 63721
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63560: LD_EXP 55
63564: PUSH
63565: LD_VAR 0 6
63569: ARRAY
63570: PUSH
63571: LD_VAR 0 5
63575: ARRAY
63576: PUSH
63577: LD_INT 1
63579: ARRAY
63580: PPUSH
63581: LD_EXP 55
63585: PUSH
63586: LD_VAR 0 6
63590: ARRAY
63591: PUSH
63592: LD_VAR 0 5
63596: ARRAY
63597: PUSH
63598: LD_INT 2
63600: ARRAY
63601: PPUSH
63602: LD_VAR 0 2
63606: PPUSH
63607: LD_VAR 0 3
63611: PPUSH
63612: CALL_OW 298
63616: PUSH
63617: LD_INT 6
63619: LESS
63620: IFFALSE 63719
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63622: LD_EXP 55
63626: PUSH
63627: LD_VAR 0 6
63631: ARRAY
63632: PUSH
63633: LD_VAR 0 5
63637: ARRAY
63638: PUSH
63639: LD_INT 1
63641: ARRAY
63642: PPUSH
63643: LD_EXP 55
63647: PUSH
63648: LD_VAR 0 6
63652: ARRAY
63653: PUSH
63654: LD_VAR 0 5
63658: ARRAY
63659: PUSH
63660: LD_INT 2
63662: ARRAY
63663: PPUSH
63664: LD_VAR 0 1
63668: PPUSH
63669: CALL_OW 255
63673: PPUSH
63674: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63678: LD_ADDR_EXP 55
63682: PUSH
63683: LD_EXP 55
63687: PPUSH
63688: LD_VAR 0 6
63692: PPUSH
63693: LD_EXP 55
63697: PUSH
63698: LD_VAR 0 6
63702: ARRAY
63703: PPUSH
63704: LD_VAR 0 5
63708: PPUSH
63709: CALL_OW 3
63713: PPUSH
63714: CALL_OW 1
63718: ST_TO_ADDR
// end ; end ;
63719: GO 63557
63721: POP
63722: POP
// end ;
63723: LD_VAR 0 4
63727: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63728: LD_INT 0
63730: PPUSH
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
63735: PPUSH
63736: PPUSH
63737: PPUSH
63738: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63739: LD_VAR 0 1
63743: PPUSH
63744: CALL_OW 264
63748: PUSH
63749: LD_INT 81
63751: EQUAL
63752: NOT
63753: IFTRUE 63768
63755: PUSH
63756: LD_VAR 0 1
63760: PUSH
63761: LD_EXP 54
63765: IN
63766: NOT
63767: OR
63768: IFFALSE 63772
// exit ;
63770: GO 64098
// index := GetElementIndex ( minersList , unit ) ;
63772: LD_ADDR_VAR 0 6
63776: PUSH
63777: LD_EXP 54
63781: PPUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: CALL 20561 0 2
63791: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63792: LD_ADDR_VAR 0 8
63796: PUSH
63797: LD_EXP 56
63801: PUSH
63802: LD_EXP 55
63806: PUSH
63807: LD_VAR 0 6
63811: ARRAY
63812: MINUS
63813: ST_TO_ADDR
// if not minesFreeAmount then
63814: LD_VAR 0 8
63818: NOT
63819: IFFALSE 63823
// exit ;
63821: GO 64098
// tmp := [ ] ;
63823: LD_ADDR_VAR 0 7
63827: PUSH
63828: EMPTY
63829: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63830: LD_ADDR_VAR 0 5
63834: PUSH
63835: DOUBLE
63836: LD_INT 1
63838: DEC
63839: ST_TO_ADDR
63840: LD_VAR 0 8
63844: PUSH
63845: FOR_TO
63846: IFFALSE 64045
// begin _d := rand ( 0 , 5 ) ;
63848: LD_ADDR_VAR 0 11
63852: PUSH
63853: LD_INT 0
63855: PPUSH
63856: LD_INT 5
63858: PPUSH
63859: CALL_OW 12
63863: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63864: LD_ADDR_VAR 0 12
63868: PUSH
63869: LD_INT 2
63871: PPUSH
63872: LD_INT 6
63874: PPUSH
63875: CALL_OW 12
63879: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63880: LD_ADDR_VAR 0 9
63884: PUSH
63885: LD_VAR 0 2
63889: PPUSH
63890: LD_VAR 0 11
63894: PPUSH
63895: LD_VAR 0 12
63899: PPUSH
63900: CALL_OW 272
63904: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63905: LD_ADDR_VAR 0 10
63909: PUSH
63910: LD_VAR 0 3
63914: PPUSH
63915: LD_VAR 0 11
63919: PPUSH
63920: LD_VAR 0 12
63924: PPUSH
63925: CALL_OW 273
63929: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63930: LD_VAR 0 9
63934: PPUSH
63935: LD_VAR 0 10
63939: PPUSH
63940: CALL_OW 488
63944: IFFALSE 63968
63946: PUSH
63947: LD_VAR 0 9
63951: PUSH
63952: LD_VAR 0 10
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_VAR 0 7
63965: IN
63966: NOT
63967: AND
63968: IFFALSE 63987
63970: PUSH
63971: LD_VAR 0 9
63975: PPUSH
63976: LD_VAR 0 10
63980: PPUSH
63981: CALL_OW 458
63985: NOT
63986: AND
63987: IFFALSE 64029
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63989: LD_ADDR_VAR 0 7
63993: PUSH
63994: LD_VAR 0 7
63998: PPUSH
63999: LD_VAR 0 7
64003: PUSH
64004: LD_INT 1
64006: PLUS
64007: PPUSH
64008: LD_VAR 0 9
64012: PUSH
64013: LD_VAR 0 10
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PPUSH
64022: CALL_OW 1
64026: ST_TO_ADDR
64027: GO 64043
// i := i - 1 ;
64029: LD_ADDR_VAR 0 5
64033: PUSH
64034: LD_VAR 0 5
64038: PUSH
64039: LD_INT 1
64041: MINUS
64042: ST_TO_ADDR
// end ;
64043: GO 63845
64045: POP
64046: POP
// for i in tmp do
64047: LD_ADDR_VAR 0 5
64051: PUSH
64052: LD_VAR 0 7
64056: PUSH
64057: FOR_IN
64058: IFFALSE 64096
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64060: LD_VAR 0 1
64064: PPUSH
64065: LD_VAR 0 5
64069: PUSH
64070: LD_INT 1
64072: ARRAY
64073: PPUSH
64074: LD_VAR 0 5
64078: PUSH
64079: LD_INT 2
64081: ARRAY
64082: PPUSH
64083: CALL 63030 0 3
64087: NOT
64088: IFFALSE 64094
// exit ;
64090: POP
64091: POP
64092: GO 64098
64094: GO 64057
64096: POP
64097: POP
// end ;
64098: LD_VAR 0 4
64102: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
64111: PPUSH
64112: PPUSH
64113: PPUSH
// if GetClass ( unit ) <> class_sniper then
64114: LD_VAR 0 1
64118: PPUSH
64119: CALL_OW 257
64123: PUSH
64124: LD_INT 5
64126: NONEQUAL
64127: IFFALSE 64131
// exit ;
64129: GO 64601
// dist := 8 ;
64131: LD_ADDR_VAR 0 5
64135: PUSH
64136: LD_INT 8
64138: ST_TO_ADDR
// viewRange := 12 ;
64139: LD_ADDR_VAR 0 8
64143: PUSH
64144: LD_INT 12
64146: ST_TO_ADDR
// side := GetSide ( unit ) ;
64147: LD_ADDR_VAR 0 6
64151: PUSH
64152: LD_VAR 0 1
64156: PPUSH
64157: CALL_OW 255
64161: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64162: LD_INT 61
64164: PPUSH
64165: LD_VAR 0 6
64169: PPUSH
64170: CALL_OW 321
64174: PUSH
64175: LD_INT 2
64177: EQUAL
64178: IFFALSE 64188
// viewRange := 16 ;
64180: LD_ADDR_VAR 0 8
64184: PUSH
64185: LD_INT 16
64187: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64188: LD_VAR 0 1
64192: PPUSH
64193: LD_VAR 0 2
64197: PPUSH
64198: LD_VAR 0 3
64202: PPUSH
64203: CALL_OW 297
64207: PUSH
64208: LD_VAR 0 5
64212: GREATER
64213: IFFALSE 64292
// begin ComMoveXY ( unit , x , y ) ;
64215: LD_VAR 0 1
64219: PPUSH
64220: LD_VAR 0 2
64224: PPUSH
64225: LD_VAR 0 3
64229: PPUSH
64230: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64234: LD_INT 35
64236: PPUSH
64237: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64241: LD_VAR 0 1
64245: PPUSH
64246: LD_VAR 0 2
64250: PPUSH
64251: LD_VAR 0 3
64255: PPUSH
64256: CALL 52607 0 3
64260: NOT
64261: IFFALSE 64265
// exit ;
64263: GO 64601
// until GetDistUnitXY ( unit , x , y ) < dist ;
64265: LD_VAR 0 1
64269: PPUSH
64270: LD_VAR 0 2
64274: PPUSH
64275: LD_VAR 0 3
64279: PPUSH
64280: CALL_OW 297
64284: PUSH
64285: LD_VAR 0 5
64289: LESS
64290: IFFALSE 64234
// end ; ComTurnXY ( unit , x , y ) ;
64292: LD_VAR 0 1
64296: PPUSH
64297: LD_VAR 0 2
64301: PPUSH
64302: LD_VAR 0 3
64306: PPUSH
64307: CALL_OW 118
// repeat if Multiplayer then
64311: LD_OWVAR 4
64315: IFFALSE 64326
// wait ( 35 ) else
64317: LD_INT 35
64319: PPUSH
64320: CALL_OW 67
64324: GO 64333
// wait ( 5 ) ;
64326: LD_INT 5
64328: PPUSH
64329: CALL_OW 67
// _d := GetDir ( unit ) ;
64333: LD_ADDR_VAR 0 11
64337: PUSH
64338: LD_VAR 0 1
64342: PPUSH
64343: CALL_OW 254
64347: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64348: LD_ADDR_VAR 0 7
64352: PUSH
64353: LD_VAR 0 1
64357: PPUSH
64358: CALL_OW 250
64362: PPUSH
64363: LD_VAR 0 1
64367: PPUSH
64368: CALL_OW 251
64372: PPUSH
64373: LD_VAR 0 2
64377: PPUSH
64378: LD_VAR 0 3
64382: PPUSH
64383: CALL 55243 0 4
64387: ST_TO_ADDR
// until dir = _d ;
64388: LD_VAR 0 7
64392: PUSH
64393: LD_VAR 0 11
64397: EQUAL
64398: IFFALSE 64311
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64400: LD_ADDR_VAR 0 9
64404: PUSH
64405: LD_VAR 0 1
64409: PPUSH
64410: CALL_OW 250
64414: PPUSH
64415: LD_VAR 0 7
64419: PPUSH
64420: LD_VAR 0 5
64424: PPUSH
64425: CALL_OW 272
64429: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64430: LD_ADDR_VAR 0 10
64434: PUSH
64435: LD_VAR 0 1
64439: PPUSH
64440: CALL_OW 251
64444: PPUSH
64445: LD_VAR 0 7
64449: PPUSH
64450: LD_VAR 0 5
64454: PPUSH
64455: CALL_OW 273
64459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64460: LD_VAR 0 9
64464: PPUSH
64465: LD_VAR 0 10
64469: PPUSH
64470: CALL_OW 488
64474: NOT
64475: IFFALSE 64479
// exit ;
64477: GO 64601
// ComAnimCustom ( unit , 1 ) ;
64479: LD_VAR 0 1
64483: PPUSH
64484: LD_INT 1
64486: PPUSH
64487: CALL_OW 592
// p := 0 ;
64491: LD_ADDR_VAR 0 12
64495: PUSH
64496: LD_INT 0
64498: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64499: LD_VAR 0 9
64503: PPUSH
64504: LD_VAR 0 10
64508: PPUSH
64509: LD_VAR 0 6
64513: PPUSH
64514: LD_VAR 0 8
64518: PPUSH
64519: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64523: LD_INT 35
64525: PPUSH
64526: CALL_OW 67
// p := Inc ( p ) ;
64530: LD_ADDR_VAR 0 12
64534: PUSH
64535: LD_VAR 0 12
64539: PPUSH
64540: CALL 55199 0 1
64544: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64545: LD_VAR 0 12
64549: PUSH
64550: LD_INT 3
64552: EQUAL
64553: IFTRUE 64567
64555: PUSH
64556: LD_VAR 0 1
64560: PPUSH
64561: CALL_OW 302
64565: NOT
64566: OR
64567: IFTRUE 64580
64569: PUSH
64570: LD_VAR 0 1
64574: PPUSH
64575: CALL_OW 301
64579: OR
64580: IFFALSE 64523
// RemoveSeeing ( _x , _y , side ) ;
64582: LD_VAR 0 9
64586: PPUSH
64587: LD_VAR 0 10
64591: PPUSH
64592: LD_VAR 0 6
64596: PPUSH
64597: CALL_OW 331
// end ; end_of_file end_of_file
64601: LD_VAR 0 4
64605: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64606: PPOPN 6
64608: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64609: LD_EXP 41
64613: PUSH
64614: LD_INT 4
64616: EQUAL
64617: IFFALSE 64653
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64619: LD_STRING setGameDifficulty(
64621: PUSH
64622: LD_OWVAR 67
64626: STR
64627: PUSH
64628: LD_STRING )
64630: STR
64631: PPUSH
64632: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64636: LD_STRING displayDifficulty(
64638: PUSH
64639: LD_OWVAR 67
64643: STR
64644: PUSH
64645: LD_STRING )
64647: STR
64648: PPUSH
64649: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64653: CALL 64682 0 0
// end ; end_of_file
64657: PPOPN 1
64659: END
// every 0 0$1 do
64660: GO 64662
64662: DISABLE
// begin enable ;
64663: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64664: LD_STRING updateTimer(
64666: PUSH
64667: LD_OWVAR 1
64671: STR
64672: PUSH
64673: LD_STRING );
64675: STR
64676: PPUSH
64677: CALL_OW 559
// end ;
64681: END
// export function SOS_MapStart ( ) ; begin
64682: LD_INT 0
64684: PPUSH
// UpdateFactoryWaypoints ( ) ;
64685: CALL 65616 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64689: CALL 65868 0 0
// ParseMultiDataToLua ( ) ;
64693: CALL 66015 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
64697: LD_STRING setSpecLogoNumber(
64699: PUSH
64700: LD_INT 2
64702: STR
64703: PUSH
64704: LD_STRING ,
64706: STR
64707: PUSH
64708: LD_INT 1
64710: STR
64711: PUSH
64712: LD_STRING )
64714: STR
64715: PPUSH
64716: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
64720: LD_STRING setSpecLogoNumber(
64722: PUSH
64723: LD_INT 3
64725: STR
64726: PUSH
64727: LD_STRING ,
64729: STR
64730: PUSH
64731: LD_INT 2
64733: STR
64734: PUSH
64735: LD_STRING )
64737: STR
64738: PPUSH
64739: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
64743: LD_STRING setSpecLogoNumber(
64745: PUSH
64746: LD_INT 4
64748: STR
64749: PUSH
64750: LD_STRING ,
64752: STR
64753: PUSH
64754: LD_INT 3
64756: STR
64757: PUSH
64758: LD_STRING )
64760: STR
64761: PPUSH
64762: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
64766: LD_STRING setSpecLogoNumber(
64768: PUSH
64769: LD_INT 5
64771: STR
64772: PUSH
64773: LD_STRING ,
64775: STR
64776: PUSH
64777: LD_INT 4
64779: STR
64780: PUSH
64781: LD_STRING )
64783: STR
64784: PPUSH
64785: CALL_OW 559
// end ;
64789: LD_VAR 0 1
64793: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
64794: LD_INT 0
64796: PPUSH
64797: PPUSH
64798: PPUSH
64799: PPUSH
64800: PPUSH
64801: PPUSH
64802: PPUSH
64803: PPUSH
64804: PPUSH
// for i := 1 to 8 do
64805: LD_ADDR_VAR 0 2
64809: PUSH
64810: DOUBLE
64811: LD_INT 1
64813: DEC
64814: ST_TO_ADDR
64815: LD_INT 8
64817: PUSH
64818: FOR_TO
64819: IFFALSE 65204
// begin if mpSidePositions [ i ] then
64821: LD_EXP 42
64825: PUSH
64826: LD_VAR 0 2
64830: ARRAY
64831: IFFALSE 65202
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
64833: LD_ADDR_VAR 0 7
64837: PUSH
64838: LD_INT 22
64840: PUSH
64841: LD_VAR 0 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 21
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PPUSH
64864: CALL_OW 69
64868: PPUSH
64869: CALL 17894 0 1
64873: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64874: LD_ADDR_VAR 0 9
64878: PUSH
64879: LD_INT 22
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: LD_INT 30
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 30
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PPUSH
64923: CALL_OW 69
64927: ST_TO_ADDR
// crates := 0 ;
64928: LD_ADDR_VAR 0 4
64932: PUSH
64933: LD_INT 0
64935: ST_TO_ADDR
// oil := 0 ;
64936: LD_ADDR_VAR 0 5
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// sib := 0 ;
64944: LD_ADDR_VAR 0 6
64948: PUSH
64949: LD_INT 0
64951: ST_TO_ADDR
// if bases then
64952: LD_VAR 0 9
64956: IFFALSE 65062
// begin for j in bases do
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_VAR 0 9
64967: PUSH
64968: FOR_IN
64969: IFFALSE 65060
// begin base := GetBase ( j ) ;
64971: LD_ADDR_VAR 0 8
64975: PUSH
64976: LD_VAR 0 3
64980: PPUSH
64981: CALL_OW 274
64985: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64986: LD_ADDR_VAR 0 4
64990: PUSH
64991: LD_VAR 0 4
64995: PUSH
64996: LD_VAR 0 8
65000: PPUSH
65001: LD_INT 1
65003: PPUSH
65004: CALL_OW 275
65008: PLUS
65009: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
65010: LD_ADDR_VAR 0 5
65014: PUSH
65015: LD_VAR 0 5
65019: PUSH
65020: LD_VAR 0 8
65024: PPUSH
65025: LD_INT 2
65027: PPUSH
65028: CALL_OW 275
65032: PLUS
65033: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
65034: LD_ADDR_VAR 0 6
65038: PUSH
65039: LD_VAR 0 6
65043: PUSH
65044: LD_VAR 0 8
65048: PPUSH
65049: LD_INT 3
65051: PPUSH
65052: CALL_OW 275
65056: PLUS
65057: ST_TO_ADDR
// end ;
65058: GO 64968
65060: POP
65061: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
65062: LD_STRING setSpecText(
65064: PUSH
65065: LD_VAR 0 2
65069: STR
65070: PUSH
65071: LD_STRING ,
65073: STR
65074: PUSH
65075: LD_INT 2
65077: STR
65078: PUSH
65079: LD_STRING ,
65081: STR
65082: PUSH
65083: LD_VAR 0 4
65087: STR
65088: PUSH
65089: LD_STRING )
65091: STR
65092: PPUSH
65093: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
65097: LD_STRING setSpecText(
65099: PUSH
65100: LD_VAR 0 2
65104: STR
65105: PUSH
65106: LD_STRING ,
65108: STR
65109: PUSH
65110: LD_INT 3
65112: STR
65113: PUSH
65114: LD_STRING ,
65116: STR
65117: PUSH
65118: LD_VAR 0 5
65122: STR
65123: PUSH
65124: LD_STRING )
65126: STR
65127: PPUSH
65128: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
65132: LD_STRING setSpecText(
65134: PUSH
65135: LD_VAR 0 2
65139: STR
65140: PUSH
65141: LD_STRING ,
65143: STR
65144: PUSH
65145: LD_INT 4
65147: STR
65148: PUSH
65149: LD_STRING ,
65151: STR
65152: PUSH
65153: LD_VAR 0 6
65157: STR
65158: PUSH
65159: LD_STRING )
65161: STR
65162: PPUSH
65163: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
65167: LD_STRING setSpecText(
65169: PUSH
65170: LD_VAR 0 2
65174: STR
65175: PUSH
65176: LD_STRING ,
65178: STR
65179: PUSH
65180: LD_INT 5
65182: STR
65183: PUSH
65184: LD_STRING ,
65186: STR
65187: PUSH
65188: LD_VAR 0 7
65192: STR
65193: PUSH
65194: LD_STRING )
65196: STR
65197: PPUSH
65198: CALL_OW 559
// end ; end ;
65202: GO 64818
65204: POP
65205: POP
// end ;
65206: LD_VAR 0 1
65210: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
65211: LD_INT 2
65213: PUSH
65214: LD_INT 30
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 30
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: LIST
65238: PPUSH
65239: CALL_OW 69
65243: IFFALSE 65253
65245: GO 65247
65247: DISABLE
// begin enable ;
65248: ENABLE
// UpdateSpectatorBar ;
65249: CALL 64794 0 0
// end ;
65253: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65254: LD_INT 0
65256: PPUSH
// end ;
65257: LD_VAR 0 12
65261: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65262: LD_INT 0
65264: PPUSH
65265: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65266: LD_VAR 0 1
65270: NOT
65271: IFTRUE 65290
65273: PUSH
65274: LD_VAR 0 2
65278: PPUSH
65279: LD_VAR 0 3
65283: PPUSH
65284: CALL_OW 488
65288: NOT
65289: OR
65290: IFTRUE 65325
65292: PUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 266
65302: PUSH
65303: LD_INT 3
65305: NONEQUAL
65306: IFFALSE 65324
65308: PUSH
65309: LD_VAR 0 1
65313: PPUSH
65314: CALL_OW 247
65318: PUSH
65319: LD_INT 1
65321: EQUAL
65322: NOT
65323: AND
65324: OR
65325: IFFALSE 65329
// exit ;
65327: GO 65611
// if GetType ( factory ) = unit_human then
65329: LD_VAR 0 1
65333: PPUSH
65334: CALL_OW 247
65338: PUSH
65339: LD_INT 1
65341: EQUAL
65342: IFFALSE 65359
// factory := IsInUnit ( factory ) ;
65344: LD_ADDR_VAR 0 1
65348: PUSH
65349: LD_VAR 0 1
65353: PPUSH
65354: CALL_OW 310
65358: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65359: LD_VAR 0 1
65363: PPUSH
65364: CALL_OW 266
65368: PUSH
65369: LD_INT 3
65371: NONEQUAL
65372: IFFALSE 65376
// exit ;
65374: GO 65611
// for i := 1 to Count ( factoryWaypoints ) do
65376: LD_ADDR_VAR 0 5
65380: PUSH
65381: DOUBLE
65382: LD_INT 1
65384: DEC
65385: ST_TO_ADDR
65386: LD_EXP 57
65390: PPUSH
65391: CALL 17894 0 1
65395: PUSH
65396: FOR_TO
65397: IFFALSE 65559
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65399: LD_VAR 0 2
65403: PPUSH
65404: LD_VAR 0 3
65408: PPUSH
65409: CALL_OW 428
65413: PUSH
65414: LD_EXP 57
65418: PUSH
65419: LD_VAR 0 5
65423: ARRAY
65424: PUSH
65425: LD_INT 2
65427: ARRAY
65428: EQUAL
65429: IFFALSE 65461
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65431: LD_ADDR_EXP 57
65435: PUSH
65436: LD_EXP 57
65440: PPUSH
65441: LD_VAR 0 5
65445: PPUSH
65446: CALL_OW 3
65450: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65451: CALL 65616 0 0
// exit ;
65455: POP
65456: POP
65457: GO 65611
// end else
65459: GO 65557
// if factory = factoryWaypoints [ i ] [ 2 ] then
65461: LD_VAR 0 1
65465: PUSH
65466: LD_EXP 57
65470: PUSH
65471: LD_VAR 0 5
65475: ARRAY
65476: PUSH
65477: LD_INT 2
65479: ARRAY
65480: EQUAL
65481: IFFALSE 65557
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65483: LD_ADDR_EXP 57
65487: PUSH
65488: LD_EXP 57
65492: PPUSH
65493: LD_VAR 0 5
65497: PPUSH
65498: CALL_OW 3
65502: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65503: LD_ADDR_EXP 57
65507: PUSH
65508: LD_EXP 57
65512: PPUSH
65513: LD_VAR 0 1
65517: PPUSH
65518: CALL_OW 255
65522: PUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_VAR 0 2
65532: PUSH
65533: LD_VAR 0 3
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: PPUSH
65544: CALL 53826 0 2
65548: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65549: CALL 65616 0 0
// exit ;
65553: POP
65554: POP
65555: GO 65611
// end ; end ;
65557: GO 65396
65559: POP
65560: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65561: LD_ADDR_EXP 57
65565: PUSH
65566: LD_EXP 57
65570: PPUSH
65571: LD_VAR 0 1
65575: PPUSH
65576: CALL_OW 255
65580: PUSH
65581: LD_VAR 0 1
65585: PUSH
65586: LD_VAR 0 2
65590: PUSH
65591: LD_VAR 0 3
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: PPUSH
65602: CALL 53826 0 2
65606: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65607: CALL 65616 0 0
// end ;
65611: LD_VAR 0 4
65615: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65616: LD_INT 0
65618: PPUSH
65619: PPUSH
65620: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65621: LD_STRING resetFactoryWaypoint();
65623: PPUSH
65624: CALL_OW 559
// if factoryWaypoints then
65628: LD_EXP 57
65632: IFFALSE 65753
// begin list := factoryWaypoints ;
65634: LD_ADDR_VAR 0 3
65638: PUSH
65639: LD_EXP 57
65643: ST_TO_ADDR
// for i := 1 to list do
65644: LD_ADDR_VAR 0 2
65648: PUSH
65649: DOUBLE
65650: LD_INT 1
65652: DEC
65653: ST_TO_ADDR
65654: LD_VAR 0 3
65658: PUSH
65659: FOR_TO
65660: IFFALSE 65751
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65662: LD_STRING setFactoryWaypointXY(
65664: PUSH
65665: LD_VAR 0 3
65669: PUSH
65670: LD_VAR 0 2
65674: ARRAY
65675: PUSH
65676: LD_INT 1
65678: ARRAY
65679: STR
65680: PUSH
65681: LD_STRING ,
65683: STR
65684: PUSH
65685: LD_VAR 0 3
65689: PUSH
65690: LD_VAR 0 2
65694: ARRAY
65695: PUSH
65696: LD_INT 2
65698: ARRAY
65699: STR
65700: PUSH
65701: LD_STRING ,
65703: STR
65704: PUSH
65705: LD_VAR 0 3
65709: PUSH
65710: LD_VAR 0 2
65714: ARRAY
65715: PUSH
65716: LD_INT 3
65718: ARRAY
65719: STR
65720: PUSH
65721: LD_STRING ,
65723: STR
65724: PUSH
65725: LD_VAR 0 3
65729: PUSH
65730: LD_VAR 0 2
65734: ARRAY
65735: PUSH
65736: LD_INT 4
65738: ARRAY
65739: STR
65740: PUSH
65741: LD_STRING )
65743: STR
65744: PPUSH
65745: CALL_OW 559
65749: GO 65659
65751: POP
65752: POP
// end ; end ;
65753: LD_VAR 0 1
65757: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65758: LD_INT 0
65760: PPUSH
// if HexInfo ( x , y ) = warehouse then
65761: LD_VAR 0 2
65765: PPUSH
65766: LD_VAR 0 3
65770: PPUSH
65771: CALL_OW 428
65775: PUSH
65776: LD_VAR 0 1
65780: EQUAL
65781: IFFALSE 65808
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65783: LD_ADDR_EXP 59
65787: PUSH
65788: LD_EXP 59
65792: PPUSH
65793: LD_VAR 0 1
65797: PPUSH
65798: LD_INT 0
65800: PPUSH
65801: CALL_OW 1
65805: ST_TO_ADDR
65806: GO 65859
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65808: LD_ADDR_EXP 59
65812: PUSH
65813: LD_EXP 59
65817: PPUSH
65818: LD_VAR 0 1
65822: PPUSH
65823: LD_VAR 0 1
65827: PPUSH
65828: CALL_OW 255
65832: PUSH
65833: LD_VAR 0 1
65837: PUSH
65838: LD_VAR 0 2
65842: PUSH
65843: LD_VAR 0 3
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: PPUSH
65854: CALL_OW 1
65858: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65859: CALL 65868 0 0
// end ;
65863: LD_VAR 0 4
65867: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65868: LD_INT 0
65870: PPUSH
65871: PPUSH
65872: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65873: LD_STRING resetWarehouseGatheringPoints();
65875: PPUSH
65876: CALL_OW 559
// if warehouseGatheringPoints then
65880: LD_EXP 59
65884: IFFALSE 66010
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65886: LD_ADDR_VAR 0 3
65890: PUSH
65891: LD_EXP 59
65895: PPUSH
65896: CALL 57760 0 1
65900: ST_TO_ADDR
// for i := 1 to list do
65901: LD_ADDR_VAR 0 2
65905: PUSH
65906: DOUBLE
65907: LD_INT 1
65909: DEC
65910: ST_TO_ADDR
65911: LD_VAR 0 3
65915: PUSH
65916: FOR_TO
65917: IFFALSE 66008
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65919: LD_STRING setWarehouseGatheringPointXY(
65921: PUSH
65922: LD_VAR 0 3
65926: PUSH
65927: LD_VAR 0 2
65931: ARRAY
65932: PUSH
65933: LD_INT 1
65935: ARRAY
65936: STR
65937: PUSH
65938: LD_STRING ,
65940: STR
65941: PUSH
65942: LD_VAR 0 3
65946: PUSH
65947: LD_VAR 0 2
65951: ARRAY
65952: PUSH
65953: LD_INT 2
65955: ARRAY
65956: STR
65957: PUSH
65958: LD_STRING ,
65960: STR
65961: PUSH
65962: LD_VAR 0 3
65966: PUSH
65967: LD_VAR 0 2
65971: ARRAY
65972: PUSH
65973: LD_INT 3
65975: ARRAY
65976: STR
65977: PUSH
65978: LD_STRING ,
65980: STR
65981: PUSH
65982: LD_VAR 0 3
65986: PUSH
65987: LD_VAR 0 2
65991: ARRAY
65992: PUSH
65993: LD_INT 4
65995: ARRAY
65996: STR
65997: PUSH
65998: LD_STRING )
66000: STR
66001: PPUSH
66002: CALL_OW 559
66006: GO 65916
66008: POP
66009: POP
// end ; end ;
66010: LD_VAR 0 1
66014: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
66015: LD_INT 0
66017: PPUSH
66018: PPUSH
// if not mpSidePositions then
66019: LD_EXP 42
66023: NOT
66024: IFFALSE 66028
// exit ;
66026: GO 66099
// result :=  ;
66028: LD_ADDR_VAR 0 1
66032: PUSH
66033: LD_STRING 
66035: ST_TO_ADDR
// for i := 1 to 8 do
66036: LD_ADDR_VAR 0 2
66040: PUSH
66041: DOUBLE
66042: LD_INT 1
66044: DEC
66045: ST_TO_ADDR
66046: LD_INT 8
66048: PUSH
66049: FOR_TO
66050: IFFALSE 66080
// begin result := result & mpSidePositions [ i ] & ; ;
66052: LD_ADDR_VAR 0 1
66056: PUSH
66057: LD_VAR 0 1
66061: PUSH
66062: LD_EXP 42
66066: PUSH
66067: LD_VAR 0 2
66071: ARRAY
66072: STR
66073: PUSH
66074: LD_STRING ;
66076: STR
66077: ST_TO_ADDR
// end ;
66078: GO 66049
66080: POP
66081: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
66082: LD_STRING setMultiplayerRealPosition("
66084: PUSH
66085: LD_VAR 0 1
66089: STR
66090: PUSH
66091: LD_STRING ");
66093: STR
66094: PPUSH
66095: CALL_OW 559
// end ;
66099: LD_VAR 0 1
66103: RET
