// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5912 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7279 0 1
  44: PPUSH
  45: CALL 135 0 1
// Multiplayer_Start ;
  49: CALL 9237 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9353 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: IFFALSE 118
 111: PUSH
 112: LD_OWVAR 48
 116: NOT
 117: AND
 118: IFFALSE 134
 120: GO 122
 122: DISABLE
// begin enable ;
 123: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 124: LD_ADDR_OWVAR 47
 128: PUSH
 129: CALL 9985 0 0
 133: ST_TO_ADDR
// end ; end_of_file
 134: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 135: LD_INT 0
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
 144: PPUSH
 145: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 146: LD_ADDR_EXP 5
 150: PUSH
 151: LD_VAR 0 1
 155: PPUSH
 156: LD_INT 2
 158: PPUSH
 159: LD_INT 1
 161: PPUSH
 162: CALL 15849 0 3
 166: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 167: LD_ADDR_EXP 6
 171: PUSH
 172: LD_INT 13
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: LD_INT 27
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 13
 192: PUSH
 193: LD_INT 1
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: LD_INT 27
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 13
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 28
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 13
 228: PUSH
 229: LD_INT 1
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 25
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: LD_INT 13
 246: PUSH
 247: LD_INT 1
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 27
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// arBuildings := [ ] ;
 269: LD_ADDR_EXP 7
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// arVehicles := [ ] ;
 276: LD_ADDR_EXP 8
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 283: LD_ADDR_EXP 9
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// arRVehicles := [ ] ;
 290: LD_ADDR_EXP 16
 294: PUSH
 295: EMPTY
 296: ST_TO_ADDR
// arDrivers := [ ] ;
 297: LD_ADDR_EXP 10
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 304: LD_ADDR_EXP 12
 308: PUSH
 309: LD_INT 3
 311: ST_TO_ADDR
// arMinesList := [ ] ;
 312: LD_ADDR_EXP 13
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 319: LD_ADDR_EXP 11
 323: PUSH
 324: LD_INT 8
 326: PUSH
 327: LD_INT 11
 329: PUSH
 330: LD_INT 12
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PUSH
 338: LD_OWVAR 67
 342: ARRAY
 343: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 3
 351: PPUSH
 352: CALL 58955 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 356: LD_INT 4
 358: PPUSH
 359: LD_INT 24
 361: PUSH
 362: LD_INT 36
 364: PUSH
 365: LD_INT 48
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_OWVAR 67
 377: ARRAY
 378: PPUSH
 379: CALL 987 0 2
// PlaceMines ( extraMinefield , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 383: LD_INT 24
 385: PPUSH
 386: LD_INT 6
 388: PUSH
 389: LD_INT 8
 391: PUSH
 392: LD_INT 10
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: PPUSH
 406: CALL 987 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 410: LD_ADDR_VAR 0 8
 414: PUSH
 415: LD_INT 3
 417: PUSH
 418: LD_INT 5
 420: PUSH
 421: LD_INT 7
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: LIST
 428: PUSH
 429: LD_OWVAR 67
 433: ARRAY
 434: ST_TO_ADDR
// uc_side := side ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_VAR 0 1
 444: ST_TO_ADDR
// uc_nation := 2 ;
 445: LD_ADDR_OWVAR 21
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 8000 , 1200 , 400 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 453: LD_ADDR_EXP 14
 457: PUSH
 458: LD_INT 2
 460: PPUSH
 461: LD_INT 1
 463: PPUSH
 464: LD_STRING 
 466: PPUSH
 467: LD_VAR 0 8
 471: PPUSH
 472: LD_INT 8000
 474: PUSH
 475: LD_INT 1200
 477: PUSH
 478: LD_INT 400
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PPUSH
 486: LD_INT 10
 488: PUSH
 489: LD_INT 11
 491: PUSH
 492: LD_INT 12
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: PUSH
 500: LD_OWVAR 67
 504: ARRAY
 505: PUSH
 506: LD_INT 4
 508: PUSH
 509: LD_INT 6
 511: PUSH
 512: LD_INT 3
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: PPUSH
 521: CALL 24501 0 6
 525: ST_TO_ADDR
// arForceTmp := [ ] ;
 526: LD_ADDR_EXP 15
 530: PUSH
 531: EMPTY
 532: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_INT 22
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 30
 552: PUSH
 553: LD_INT 31
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 95
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 58
 579: PUSH
 580: EMPTY
 581: LIST
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: PPUSH
 589: CALL_OW 69
 593: PUSH
 594: FOR_IN
 595: IFFALSE 724
// begin d := GetDir ( i ) ;
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: LD_VAR 0 3
 606: PPUSH
 607: CALL_OW 254
 611: ST_TO_ADDR
// if d < 3 then
 612: LD_VAR 0 4
 616: PUSH
 617: LD_INT 3
 619: LESS
 620: IFFALSE 638
// d := d + 3 else
 622: LD_ADDR_VAR 0 4
 626: PUSH
 627: LD_VAR 0 4
 631: PUSH
 632: LD_INT 3
 634: PLUS
 635: ST_TO_ADDR
 636: GO 652
// d := d - 3 ;
 638: LD_ADDR_VAR 0 4
 642: PUSH
 643: LD_VAR 0 4
 647: PUSH
 648: LD_INT 3
 650: MINUS
 651: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_VAR 0 8
 659: PPUSH
 660: CALL_OW 381
// un := CreateHuman ;
 664: LD_ADDR_VAR 0 6
 668: PUSH
 669: CALL_OW 44
 673: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 674: LD_ADDR_EXP 15
 678: PUSH
 679: LD_EXP 15
 683: PPUSH
 684: LD_VAR 0 6
 688: PPUSH
 689: CALL 53834 0 2
 693: ST_TO_ADDR
// SetDir ( un , d ) ;
 694: LD_VAR 0 6
 698: PPUSH
 699: LD_VAR 0 4
 703: PPUSH
 704: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 708: LD_VAR 0 6
 712: PPUSH
 713: LD_VAR 0 3
 717: PPUSH
 718: CALL_OW 52
// end ;
 722: GO 594
 724: POP
 725: POP
// for i := 1 to 2 do
 726: LD_ADDR_VAR 0 3
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_INT 2
 738: PUSH
 739: FOR_TO
 740: IFFALSE 824
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 742: LD_INT 14
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_INT 31
 753: PPUSH
 754: LD_INT 100
 756: PPUSH
 757: CALL 20664 0 5
// un := CreateVehicle ;
 761: LD_ADDR_VAR 0 6
 765: PUSH
 766: CALL_OW 45
 770: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 771: LD_VAR 0 6
 775: PPUSH
 776: LD_INT 102
 778: PPUSH
 779: LD_INT 31
 781: PPUSH
 782: LD_INT 6
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 792: LD_INT 0
 794: PPUSH
 795: LD_VAR 0 8
 799: PUSH
 800: LD_INT 2
 802: PLUS
 803: PPUSH
 804: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 808: CALL_OW 44
 812: PPUSH
 813: LD_VAR 0 6
 817: PPUSH
 818: CALL_OW 52
// end ;
 822: GO 739
 824: POP
 825: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: LD_INT 22
 833: PUSH
 834: LD_VAR 0 1
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 21
 845: PUSH
 846: LD_INT 3
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: CALL_OW 69
 861: PUSH
 862: FOR_IN
 863: IFFALSE 896
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 865: LD_VAR 0 3
 869: PPUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 5
 875: PUSH
 876: LD_INT 7
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_OWVAR 67
 888: ARRAY
 889: PPUSH
 890: CALL_OW 241
 894: GO 862
 896: POP
 897: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 898: LD_ADDR_VAR 0 3
 902: PUSH
 903: LD_INT 22
 905: PUSH
 906: LD_VAR 0 1
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 30
 917: PUSH
 918: LD_INT 32
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 69
 933: PUSH
 934: FOR_IN
 935: IFFALSE 980
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 937: LD_VAR 0 3
 941: PPUSH
 942: LD_INT 27
 944: PUSH
 945: LD_INT 25
 947: PUSH
 948: LD_INT 28
 950: PUSH
 951: LD_INT 27
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: PUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 4
 967: MOD
 968: PUSH
 969: LD_INT 1
 971: PLUS
 972: ARRAY
 973: PPUSH
 974: CALL_OW 431
 978: GO 934
 980: POP
 981: POP
// end ;
 982: LD_VAR 0 2
 986: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
 991: PPUSH
 992: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 993: LD_ADDR_VAR 0 5
 997: PUSH
 998: LD_VAR 0 1
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL_OW 517
1010: ST_TO_ADDR
// if not tmp then
1011: LD_VAR 0 5
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1262
// for i := 1 to n do
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: DOUBLE
1026: LD_INT 1
1028: DEC
1029: ST_TO_ADDR
1030: LD_VAR 0 2
1034: PUSH
1035: FOR_TO
1036: IFFALSE 1260
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1038: LD_ADDR_VAR 0 6
1042: PUSH
1043: LD_INT 1
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: CALL_OW 12
1059: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1060: LD_VAR 0 5
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PUSH
1069: LD_VAR 0 6
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 5
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PUSH
1084: LD_VAR 0 6
1088: ARRAY
1089: PPUSH
1090: LD_EXP 3
1094: PUSH
1095: LD_INT 1
1097: ARRAY
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1106: LD_ADDR_EXP 13
1110: PUSH
1111: LD_EXP 13
1115: PPUSH
1116: LD_EXP 13
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: PPUSH
1125: LD_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PUSH
1134: LD_VAR 0 6
1138: ARRAY
1139: PPUSH
1140: CALL_OW 2
1144: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1145: LD_ADDR_EXP 13
1149: PUSH
1150: LD_EXP 13
1154: PPUSH
1155: LD_EXP 13
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: LD_VAR 0 5
1168: PUSH
1169: LD_INT 2
1171: ARRAY
1172: PUSH
1173: LD_VAR 0 6
1177: ARRAY
1178: PPUSH
1179: CALL_OW 2
1183: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1184: LD_ADDR_VAR 0 5
1188: PUSH
1189: LD_VAR 0 5
1193: PPUSH
1194: LD_INT 1
1196: PPUSH
1197: LD_VAR 0 5
1201: PUSH
1202: LD_INT 1
1204: ARRAY
1205: PPUSH
1206: LD_VAR 0 6
1210: PPUSH
1211: CALL_OW 3
1215: PPUSH
1216: CALL_OW 1
1220: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_VAR 0 5
1230: PPUSH
1231: LD_INT 2
1233: PPUSH
1234: LD_VAR 0 5
1238: PUSH
1239: LD_INT 2
1241: ARRAY
1242: PPUSH
1243: LD_VAR 0 6
1247: PPUSH
1248: CALL_OW 3
1252: PPUSH
1253: CALL_OW 1
1257: ST_TO_ADDR
// end ;
1258: GO 1035
1260: POP
1261: POP
// end ;
1262: LD_VAR 0 3
1266: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1267: LD_INT 0
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
1299: PPUSH
// enable ;
1300: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1301: LD_ADDR_VAR 0 11
1305: PUSH
1306: LD_INT 81
1308: PUSH
1309: LD_VAR 0 1
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PPUSH
1318: CALL_OW 69
1322: ST_TO_ADDR
// if tmp then
1323: LD_VAR 0 11
1327: IFFALSE 1348
// enemySide := GetSide ( tmp [ 1 ] ) ;
1329: LD_ADDR_VAR 0 38
1333: PUSH
1334: LD_VAR 0 11
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: CALL_OW 255
1347: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1348: LD_ADDR_VAR 0 26
1352: PUSH
1353: LD_VAR 0 3
1357: PPUSH
1358: LD_INT 81
1360: PUSH
1361: LD_VAR 0 1
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: PPUSH
1370: CALL_OW 70
1374: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1375: LD_ADDR_VAR 0 27
1379: PUSH
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 81
1387: PUSH
1388: LD_VAR 0 1
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1402: LD_ADDR_VAR 0 13
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_VAR 0 1
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 50
1421: PUSH
1422: EMPTY
1423: LIST
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 31
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PPUSH
1440: CALL_OW 69
1444: ST_TO_ADDR
// if ct then
1445: LD_VAR 0 13
1449: IFFALSE 1540
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1451: LD_ADDR_VAR 0 15
1455: PUSH
1456: LD_INT 22
1458: PUSH
1459: LD_VAR 0 1
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 3
1470: PUSH
1471: LD_INT 61
1473: PUSH
1474: EMPTY
1475: LIST
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 50
1483: PUSH
1484: EMPTY
1485: LIST
1486: PUSH
1487: LD_INT 33
1489: PUSH
1490: LD_INT 2
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: PPUSH
1503: CALL_OW 69
1507: ST_TO_ADDR
// if veh then
1508: LD_VAR 0 15
1512: IFFALSE 1540
// for i in veh do
1514: LD_ADDR_VAR 0 9
1518: PUSH
1519: LD_VAR 0 15
1523: PUSH
1524: FOR_IN
1525: IFFALSE 1538
// Connect ( i ) ;
1527: LD_VAR 0 9
1531: PPUSH
1532: CALL 24146 0 1
1536: GO 1524
1538: POP
1539: POP
// end ; vehicles := arVehicles ;
1540: LD_ADDR_VAR 0 30
1544: PUSH
1545: LD_EXP 8
1549: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1550: LD_ADDR_VAR 0 36
1554: PUSH
1555: LD_VAR 0 3
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_VAR 0 1
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 2
1574: PUSH
1575: LD_INT 30
1577: PUSH
1578: LD_INT 0
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 30
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: ST_TO_ADDR
// if depot then
1609: LD_VAR 0 36
1613: IFFALSE 1629
// depot := depot [ 1 ] ;
1615: LD_ADDR_VAR 0 36
1619: PUSH
1620: LD_VAR 0 36
1624: PUSH
1625: LD_INT 1
1627: ARRAY
1628: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1629: LD_ADDR_VAR 0 22
1633: PUSH
1634: LD_VAR 0 5
1638: PPUSH
1639: LD_INT 25
1641: PUSH
1642: LD_INT 4
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 50
1651: PUSH
1652: EMPTY
1653: LIST
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PPUSH
1659: CALL_OW 72
1663: ST_TO_ADDR
// if arTech then
1664: LD_EXP 5
1668: IFFALSE 2032
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1670: LD_ADDR_VAR 0 16
1674: PUSH
1675: LD_VAR 0 3
1679: PPUSH
1680: LD_INT 22
1682: PUSH
1683: LD_VAR 0 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 50
1694: PUSH
1695: EMPTY
1696: LIST
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 30
1713: PUSH
1714: LD_INT 7
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 30
1723: PUSH
1724: LD_INT 8
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: PPUSH
1742: CALL_OW 70
1746: ST_TO_ADDR
// if lab then
1747: LD_VAR 0 16
1751: IFFALSE 2032
// begin for j := 1 to Count ( lab ) do
1753: LD_ADDR_VAR 0 10
1757: PUSH
1758: DOUBLE
1759: LD_INT 1
1761: DEC
1762: ST_TO_ADDR
1763: LD_VAR 0 16
1767: PPUSH
1768: CALL 17902 0 1
1772: PUSH
1773: FOR_TO
1774: IFFALSE 2030
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1776: LD_VAR 0 16
1780: PUSH
1781: LD_VAR 0 10
1785: ARRAY
1786: PPUSH
1787: CALL_OW 461
1791: PUSH
1792: LD_INT 2
1794: EQUAL
1795: IFFALSE 1880
// begin for i in arTech do
1797: LD_ADDR_VAR 0 9
1801: PUSH
1802: LD_EXP 5
1806: PUSH
1807: FOR_IN
1808: IFFALSE 1876
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1810: LD_VAR 0 16
1814: PUSH
1815: LD_VAR 0 10
1819: ARRAY
1820: PPUSH
1821: LD_VAR 0 9
1825: PPUSH
1826: CALL_OW 430
1830: IFFALSE 1852
1832: PUSH
1833: LD_VAR 0 9
1837: PPUSH
1838: LD_VAR 0 1
1842: PPUSH
1843: CALL_OW 321
1847: PUSH
1848: LD_INT 1
1850: EQUAL
1851: AND
1852: IFFALSE 1874
// begin AddComResearch ( lab [ j ] , i ) ;
1854: LD_VAR 0 16
1858: PUSH
1859: LD_VAR 0 10
1863: ARRAY
1864: PPUSH
1865: LD_VAR 0 9
1869: PPUSH
1870: CALL_OW 184
// end ;
1874: GO 1807
1876: POP
1877: POP
// end else
1878: GO 2028
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1880: LD_VAR 0 16
1884: PUSH
1885: LD_VAR 0 10
1889: ARRAY
1890: PPUSH
1891: CALL_OW 461
1895: PUSH
1896: LD_INT 6
1898: EQUAL
1899: IFFALSE 2028
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1901: LD_ADDR_VAR 0 9
1905: PUSH
1906: LD_VAR 0 22
1910: PPUSH
1911: LD_INT 3
1913: PUSH
1914: LD_INT 120
1916: PUSH
1917: LD_INT 10
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 72
1932: PUSH
1933: FOR_IN
1934: IFFALSE 2026
// begin inside := IsInUnit ( i ) ;
1936: LD_ADDR_VAR 0 14
1940: PUSH
1941: LD_VAR 0 9
1945: PPUSH
1946: CALL_OW 310
1950: ST_TO_ADDR
// if not inside then
1951: LD_VAR 0 14
1955: NOT
1956: IFFALSE 1980
// ComEnterUnit ( i , lab [ j ] ) else
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 16
1967: PUSH
1968: LD_VAR 0 10
1972: ARRAY
1973: PPUSH
1974: CALL_OW 120
1978: GO 2024
// if BuildingStatus ( inside ) = bs_idle then
1980: LD_VAR 0 14
1984: PPUSH
1985: CALL_OW 461
1989: PUSH
1990: LD_INT 2
1992: EQUAL
1993: IFFALSE 2024
// begin ComExitBuilding ( i ) ;
1995: LD_VAR 0 9
1999: PPUSH
2000: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
2004: LD_VAR 0 9
2008: PPUSH
2009: LD_VAR 0 16
2013: PUSH
2014: LD_VAR 0 10
2018: ARRAY
2019: PPUSH
2020: CALL_OW 180
// end ; end ;
2024: GO 1933
2026: POP
2027: POP
// end ;
2028: GO 1773
2030: POP
2031: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2032: LD_ADDR_VAR 0 33
2036: PUSH
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 22
2044: PUSH
2045: LD_VAR 0 1
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 30
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 50
2066: PUSH
2067: EMPTY
2068: LIST
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: PPUSH
2075: CALL_OW 70
2079: ST_TO_ADDR
// if fac then
2080: LD_VAR 0 33
2084: IFFALSE 2419
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2086: LD_VAR 0 33
2090: PUSH
2091: LD_INT 1
2093: ARRAY
2094: PPUSH
2095: CALL_OW 461
2099: PUSH
2100: LD_INT 2
2102: EQUAL
2103: IFFALSE 2419
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2105: LD_ADDR_VAR 0 34
2109: PUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 2
2117: PUSH
2118: LD_INT 30
2120: PUSH
2121: LD_INT 32
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: LD_INT 33
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 35
2145: PUSH
2146: LD_INT 0
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 70
2161: ST_TO_ADDR
// if emptyTowers then
2162: LD_VAR 0 34
2166: IFFALSE 2216
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2168: LD_ADDR_VAR 0 35
2172: PUSH
2173: LD_VAR 0 34
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PPUSH
2182: LD_VAR 0 3
2186: PPUSH
2187: CALL 26193 0 2
2191: ST_TO_ADDR
// if weapon then
2192: LD_VAR 0 35
2196: IFFALSE 2216
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2198: LD_VAR 0 34
2202: PUSH
2203: LD_INT 1
2205: ARRAY
2206: PPUSH
2207: LD_VAR 0 35
2211: PPUSH
2212: CALL_OW 148
// end ; if arConstructList then
2216: LD_EXP 6
2220: IFFALSE 2419
// for i := 1 to Count ( arConstructList ) do
2222: LD_ADDR_VAR 0 9
2226: PUSH
2227: DOUBLE
2228: LD_INT 1
2230: DEC
2231: ST_TO_ADDR
2232: LD_EXP 6
2236: PPUSH
2237: CALL 17902 0 1
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2417
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2245: LD_VAR 0 33
2249: PUSH
2250: LD_INT 1
2252: ARRAY
2253: PPUSH
2254: LD_EXP 6
2258: PUSH
2259: LD_VAR 0 9
2263: ARRAY
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: PPUSH
2269: LD_EXP 6
2273: PUSH
2274: LD_VAR 0 9
2278: ARRAY
2279: PUSH
2280: LD_INT 2
2282: ARRAY
2283: PPUSH
2284: LD_EXP 6
2288: PUSH
2289: LD_VAR 0 9
2293: ARRAY
2294: PUSH
2295: LD_INT 3
2297: ARRAY
2298: PPUSH
2299: LD_EXP 6
2303: PUSH
2304: LD_VAR 0 9
2308: ARRAY
2309: PUSH
2310: LD_INT 4
2312: ARRAY
2313: PPUSH
2314: CALL_OW 448
2318: IFFALSE 2415
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2320: LD_VAR 0 33
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PPUSH
2329: LD_EXP 6
2333: PUSH
2334: LD_VAR 0 9
2338: ARRAY
2339: PUSH
2340: LD_INT 1
2342: ARRAY
2343: PPUSH
2344: LD_EXP 6
2348: PUSH
2349: LD_VAR 0 9
2353: ARRAY
2354: PUSH
2355: LD_INT 2
2357: ARRAY
2358: PPUSH
2359: LD_EXP 6
2363: PUSH
2364: LD_VAR 0 9
2368: ARRAY
2369: PUSH
2370: LD_INT 3
2372: ARRAY
2373: PPUSH
2374: LD_EXP 6
2378: PUSH
2379: LD_VAR 0 9
2383: ARRAY
2384: PUSH
2385: LD_INT 4
2387: ARRAY
2388: PPUSH
2389: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2393: LD_ADDR_EXP 6
2397: PUSH
2398: LD_EXP 6
2402: PPUSH
2403: LD_VAR 0 9
2407: PPUSH
2408: CALL_OW 3
2412: ST_TO_ADDR
// break ;
2413: GO 2417
// end ; end ;
2415: GO 2242
2417: POP
2418: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2419: LD_ADDR_VAR 0 11
2423: PUSH
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 22
2431: PUSH
2432: LD_VAR 0 1
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 21
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 57
2456: PUSH
2457: EMPTY
2458: LIST
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 3
2466: PUSH
2467: LD_INT 24
2469: PUSH
2470: LD_INT 1000
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PPUSH
2487: CALL_OW 70
2491: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2492: LD_ADDR_VAR 0 21
2496: PUSH
2497: LD_VAR 0 3
2501: PPUSH
2502: CALL_OW 435
2506: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2507: LD_ADDR_VAR 0 18
2511: PUSH
2512: LD_VAR 0 5
2516: PPUSH
2517: LD_INT 25
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 50
2529: PUSH
2530: EMPTY
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2542: LD_VAR 0 18
2546: PPUSH
2547: LD_INT 3
2549: PUSH
2550: LD_INT 120
2552: PUSH
2553: LD_INT 7
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 54
2569: PUSH
2570: EMPTY
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PPUSH
2581: CALL_OW 72
2585: IFFALSE 2602
2587: PUSH
2588: LD_VAR 0 33
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: CALL_OW 302
2601: AND
2602: IFFALSE 2661
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2604: LD_VAR 0 18
2608: PPUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 120
2614: PUSH
2615: LD_INT 7
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: LD_INT 54
2631: PUSH
2632: EMPTY
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 72
2647: PPUSH
2648: LD_VAR 0 33
2652: PUSH
2653: LD_INT 1
2655: ARRAY
2656: PPUSH
2657: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2661: LD_ADDR_VAR 0 16
2665: PUSH
2666: LD_VAR 0 3
2670: PPUSH
2671: LD_INT 2
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 6
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 30
2686: PUSH
2687: LD_INT 7
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 30
2696: PUSH
2697: LD_INT 8
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 70
2714: ST_TO_ADDR
// if sci then
2715: LD_VAR 0 22
2719: IFFALSE 2964
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2721: LD_ADDR_VAR 0 24
2725: PUSH
2726: LD_VAR 0 5
2730: PPUSH
2731: LD_INT 95
2733: PUSH
2734: LD_VAR 0 3
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 120
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 72
2761: ST_TO_ADDR
// if hurtUnits then
2762: LD_VAR 0 24
2766: IFFALSE 2861
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2768: LD_ADDR_VAR 0 9
2772: PUSH
2773: LD_VAR 0 22
2777: PPUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 120
2783: PUSH
2784: LD_INT 10
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PPUSH
2795: CALL_OW 72
2799: PUSH
2800: FOR_IN
2801: IFFALSE 2857
// begin SetTag ( i , tHealer ) ;
2803: LD_VAR 0 9
2807: PPUSH
2808: LD_INT 10
2810: PPUSH
2811: CALL_OW 109
// if IsInUnit ( i ) then
2815: LD_VAR 0 9
2819: PPUSH
2820: CALL_OW 310
2824: IFFALSE 2837
// ComExitBuilding ( i ) else
2826: LD_VAR 0 9
2830: PPUSH
2831: CALL_OW 122
2835: GO 2855
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2837: LD_VAR 0 9
2841: PPUSH
2842: LD_VAR 0 24
2846: PUSH
2847: LD_INT 1
2849: ARRAY
2850: PPUSH
2851: CALL_OW 128
// end ;
2855: GO 2800
2857: POP
2858: POP
// end else
2859: GO 2964
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2861: LD_VAR 0 16
2865: IFFALSE 2888
2867: PUSH
2868: LD_VAR 0 22
2872: PPUSH
2873: LD_INT 120
2875: PUSH
2876: LD_INT 10
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PPUSH
2883: CALL_OW 72
2887: AND
2888: IFFALSE 2964
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2890: LD_ADDR_VAR 0 9
2894: PUSH
2895: LD_VAR 0 22
2899: PPUSH
2900: LD_INT 120
2902: PUSH
2903: LD_INT 10
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 72
2914: PUSH
2915: FOR_IN
2916: IFFALSE 2962
// begin SetTag ( i , 0 ) ;
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: CALL_OW 109
// if not IsInUnit ( i ) then
2930: LD_VAR 0 9
2934: PPUSH
2935: CALL_OW 310
2939: NOT
2940: IFFALSE 2960
// ComEnterUnit ( i , lab [ 1 ] ) ;
2942: LD_VAR 0 9
2946: PPUSH
2947: LD_VAR 0 16
2951: PUSH
2952: LD_INT 1
2954: ARRAY
2955: PPUSH
2956: CALL_OW 120
// end ;
2960: GO 2915
2962: POP
2963: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2964: LD_ADDR_VAR 0 17
2968: PUSH
2969: LD_VAR 0 5
2973: PPUSH
2974: LD_INT 25
2976: PUSH
2977: LD_INT 2
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 72
2988: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2989: LD_ADDR_VAR 0 37
2993: PUSH
2994: LD_EXP 7
2998: ST_TO_ADDR
// if eng then
2999: LD_VAR 0 17
3003: IFFALSE 3851
// begin for i in eng do
3005: LD_ADDR_VAR 0 9
3009: PUSH
3010: LD_VAR 0 17
3014: PUSH
3015: FOR_IN
3016: IFFALSE 3849
// begin tag := GetTag ( i ) ;
3018: LD_ADDR_VAR 0 19
3022: PUSH
3023: LD_VAR 0 9
3027: PPUSH
3028: CALL_OW 110
3032: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
3033: LD_VAR 0 9
3037: PPUSH
3038: LD_VAR 0 4
3042: PPUSH
3043: CALL_OW 308
3047: IFFALSE 3078
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3049: LD_VAR 0 9
3053: PPUSH
3054: LD_VAR 0 7
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_VAR 0 7
3067: PUSH
3068: LD_INT 2
3070: ARRAY
3071: PPUSH
3072: CALL_OW 111
// continue ;
3076: GO 3015
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3078: LD_VAR 0 9
3082: PPUSH
3083: CALL_OW 256
3087: PUSH
3088: LD_INT 800
3090: LESS
3091: IFFALSE 3103
3093: PUSH
3094: LD_VAR 0 19
3098: PUSH
3099: LD_INT 1
3101: NONEQUAL
3102: AND
3103: IFFALSE 3153
// begin SetTag ( i , tHeal ) ;
3105: LD_VAR 0 9
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3117: LD_VAR 0 9
3121: PPUSH
3122: LD_VAR 0 6
3126: PUSH
3127: LD_INT 1
3129: ARRAY
3130: PPUSH
3131: LD_VAR 0 6
3135: PUSH
3136: LD_INT 2
3138: ARRAY
3139: PPUSH
3140: CALL_OW 111
// AddComHold ( i ) ;
3144: LD_VAR 0 9
3148: PPUSH
3149: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3153: LD_VAR 0 19
3157: PUSH
3158: LD_INT 1
3160: EQUAL
3161: IFFALSE 3178
3163: PUSH
3164: LD_VAR 0 9
3168: PPUSH
3169: CALL_OW 256
3173: PUSH
3174: LD_INT 1000
3176: EQUAL
3177: AND
3178: IFFALSE 3192
// SetTag ( i , 0 ) ;
3180: LD_VAR 0 9
3184: PPUSH
3185: LD_INT 0
3187: PPUSH
3188: CALL_OW 109
// if not tag then
3192: LD_VAR 0 19
3196: NOT
3197: IFFALSE 3368
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3199: LD_ADDR_VAR 0 12
3203: PUSH
3204: LD_VAR 0 3
3208: PPUSH
3209: LD_INT 57
3211: PUSH
3212: EMPTY
3213: LIST
3214: PPUSH
3215: CALL_OW 70
3219: ST_TO_ADDR
// if undone then
3220: LD_VAR 0 12
3224: IFFALSE 3246
// begin ComComplete ( i , undone [ 1 ] ) ;
3226: LD_VAR 0 9
3230: PPUSH
3231: LD_VAR 0 12
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: CALL 24038 0 2
// continue ;
3244: GO 3015
// end ; if cr or tmp or buildingsToBuild then
3246: LD_VAR 0 21
3250: IFTRUE 3258
3252: PUSH
3253: LD_VAR 0 11
3257: OR
3258: IFTRUE 3266
3260: PUSH
3261: LD_VAR 0 37
3265: OR
3266: IFFALSE 3342
// begin if IsInUnit ( i ) then
3268: LD_VAR 0 9
3272: PPUSH
3273: CALL_OW 310
3277: IFFALSE 3288
// ComExitBuilding ( i ) ;
3279: LD_VAR 0 9
3283: PPUSH
3284: CALL_OW 122
// if tmp then
3288: LD_VAR 0 11
3292: IFFALSE 3308
// SetTag ( i , tRepair ) else
3294: LD_VAR 0 9
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: CALL_OW 109
3306: GO 3340
// if cr then
3308: LD_VAR 0 21
3312: IFFALSE 3328
// SetTag ( i , tCrates ) else
3314: LD_VAR 0 9
3318: PPUSH
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 109
3326: GO 3340
// SetTag ( i , tBuild ) ;
3328: LD_VAR 0 9
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: CALL_OW 109
// end else
3340: GO 3368
// if not IsInUnit ( i ) then
3342: LD_VAR 0 9
3346: PPUSH
3347: CALL_OW 310
3351: NOT
3352: IFFALSE 3368
// ComEnterUnit ( i , depot ) ;
3354: LD_VAR 0 9
3358: PPUSH
3359: LD_VAR 0 36
3363: PPUSH
3364: CALL_OW 120
// end ; if tag = tRepair then
3368: LD_VAR 0 19
3372: PUSH
3373: LD_INT 3
3375: EQUAL
3376: IFFALSE 3482
// begin if IsInUnit ( i ) then
3378: LD_VAR 0 9
3382: PPUSH
3383: CALL_OW 310
3387: IFFALSE 3400
// begin ComExitBuilding ( i ) ;
3389: LD_VAR 0 9
3393: PPUSH
3394: CALL_OW 122
// continue ;
3398: GO 3015
// end ; if not tmp then
3400: LD_VAR 0 11
3404: NOT
3405: IFFALSE 3421
// begin SetTag ( i , 0 ) ;
3407: LD_VAR 0 9
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: CALL_OW 109
// continue ;
3419: GO 3015
// end ; if not HasTask ( i ) then
3421: LD_VAR 0 9
3425: PPUSH
3426: CALL_OW 314
3430: NOT
3431: IFFALSE 3451
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3433: LD_VAR 0 9
3437: PPUSH
3438: LD_VAR 0 11
3442: PUSH
3443: LD_INT 1
3445: ARRAY
3446: PPUSH
3447: CALL_OW 130
// if not IsInArea ( i , area ) then
3451: LD_VAR 0 9
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 308
3465: NOT
3466: IFFALSE 3482
// ComMoveToArea ( i , area ) ;
3468: LD_VAR 0 9
3472: PPUSH
3473: LD_VAR 0 3
3477: PPUSH
3478: CALL_OW 113
// end ; if tag = tBuild then
3482: LD_VAR 0 19
3486: PUSH
3487: LD_INT 5
3489: EQUAL
3490: IFFALSE 3700
// begin if IsInUnit ( i ) then
3492: LD_VAR 0 9
3496: PPUSH
3497: CALL_OW 310
3501: IFFALSE 3514
// begin ComExitBuilding ( i ) ;
3503: LD_VAR 0 9
3507: PPUSH
3508: CALL_OW 122
// continue ;
3512: GO 3015
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3514: LD_VAR 0 37
3518: NOT
3519: IFTRUE 3527
3521: PUSH
3522: LD_VAR 0 26
3526: OR
3527: IFTRUE 3535
3529: PUSH
3530: LD_VAR 0 27
3534: OR
3535: IFFALSE 3553
// begin SetTag ( i , 0 ) ;
3537: LD_VAR 0 9
3541: PPUSH
3542: LD_INT 0
3544: PPUSH
3545: CALL_OW 109
// continue ;
3549: GO 3015
// end else
3551: GO 3592
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3553: LD_VAR 0 36
3557: PPUSH
3558: LD_VAR 0 37
3562: PUSH
3563: LD_INT 1
3565: ARRAY
3566: PUSH
3567: LD_INT 1
3569: ARRAY
3570: PPUSH
3571: CALL 57929 0 2
3575: NOT
3576: IFFALSE 3592
// begin SetTag ( i , 0 ) ;
3578: LD_VAR 0 9
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 109
// continue ;
3590: GO 3015
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3592: LD_ADDR_VAR 0 12
3596: PUSH
3597: LD_VAR 0 3
3601: PPUSH
3602: LD_INT 57
3604: PUSH
3605: EMPTY
3606: LIST
3607: PPUSH
3608: CALL_OW 70
3612: ST_TO_ADDR
// if undone then
3613: LD_VAR 0 12
3617: IFFALSE 3639
// begin ComComplete ( i , undone [ 1 ] ) ;
3619: LD_VAR 0 9
3623: PPUSH
3624: LD_VAR 0 12
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: PPUSH
3633: CALL 24038 0 2
// continue ;
3637: GO 3015
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3639: LD_VAR 0 9
3643: PPUSH
3644: LD_VAR 0 37
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: LD_VAR 0 37
3661: PUSH
3662: LD_INT 1
3664: ARRAY
3665: PUSH
3666: LD_INT 2
3668: ARRAY
3669: PPUSH
3670: LD_VAR 0 37
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PUSH
3679: LD_INT 3
3681: ARRAY
3682: PPUSH
3683: LD_VAR 0 37
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: PUSH
3692: LD_INT 4
3694: ARRAY
3695: PPUSH
3696: CALL_OW 145
// end ; if tag = tCrates then
3700: LD_VAR 0 19
3704: PUSH
3705: LD_INT 2
3707: EQUAL
3708: IFFALSE 3847
// begin if IsInUnit ( i ) then
3710: LD_VAR 0 9
3714: PPUSH
3715: CALL_OW 310
3719: IFFALSE 3732
// begin ComExitBuilding ( i ) ;
3721: LD_VAR 0 9
3725: PPUSH
3726: CALL_OW 122
// continue ;
3730: GO 3015
// end ; if not cr then
3732: LD_VAR 0 21
3736: NOT
3737: IFFALSE 3753
// begin SetTag ( i , 0 ) ;
3739: LD_VAR 0 9
3743: PPUSH
3744: LD_INT 0
3746: PPUSH
3747: CALL_OW 109
// continue ;
3751: GO 3015
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3753: LD_VAR 0 9
3757: PPUSH
3758: CALL_OW 314
3762: NOT
3763: IFFALSE 3818
3765: PUSH
3766: LD_INT 81
3768: PUSH
3769: LD_VAR 0 1
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 92
3780: PUSH
3781: LD_VAR 0 21
3785: PUSH
3786: LD_INT 1
3788: ARRAY
3789: PUSH
3790: LD_VAR 0 21
3794: PUSH
3795: LD_INT 2
3797: ARRAY
3798: PUSH
3799: LD_INT 12
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 69
3816: NOT
3817: AND
3818: IFFALSE 3847
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3820: LD_VAR 0 9
3824: PPUSH
3825: LD_VAR 0 21
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_VAR 0 21
3838: PUSH
3839: LD_INT 2
3841: ARRAY
3842: PPUSH
3843: CALL_OW 117
// end ; end ;
3847: GO 3015
3849: POP
3850: POP
// end ; if vehicles then
3851: LD_VAR 0 30
3855: IFFALSE 4667
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3857: LD_ADDR_VAR 0 30
3861: PUSH
3862: LD_VAR 0 30
3866: PPUSH
3867: LD_INT 3
3869: PUSH
3870: LD_INT 2
3872: PUSH
3873: LD_INT 34
3875: PUSH
3876: LD_INT 88
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 34
3885: PUSH
3886: LD_INT 32
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 50
3904: PUSH
3905: EMPTY
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PPUSH
3912: CALL_OW 72
3916: ST_TO_ADDR
// if vehicles then
3917: LD_VAR 0 30
3921: IFFALSE 4667
// begin for i in vehicles do
3923: LD_ADDR_VAR 0 9
3927: PUSH
3928: LD_VAR 0 30
3932: PUSH
3933: FOR_IN
3934: IFFALSE 4665
// begin tag := GetTag ( i ) ;
3936: LD_ADDR_VAR 0 19
3940: PUSH
3941: LD_VAR 0 9
3945: PPUSH
3946: CALL_OW 110
3950: ST_TO_ADDR
// if not tag then
3951: LD_VAR 0 19
3955: NOT
3956: IFFALSE 4102
// begin if GetControl ( i ) = control_manual then
3958: LD_VAR 0 9
3962: PPUSH
3963: CALL_OW 263
3967: PUSH
3968: LD_INT 1
3970: EQUAL
3971: IFFALSE 4088
// begin drivers := arDrivers ;
3973: LD_ADDR_VAR 0 28
3977: PUSH
3978: LD_EXP 10
3982: ST_TO_ADDR
// if not drivers then
3983: LD_VAR 0 28
3987: NOT
3988: IFFALSE 4068
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3990: LD_ADDR_VAR 0 28
3994: PUSH
3995: LD_VAR 0 18
3999: PPUSH
4000: LD_INT 3
4002: PUSH
4003: LD_INT 120
4005: PUSH
4006: LD_INT 7
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: ST_TO_ADDR
// if drivers then
4022: LD_VAR 0 28
4026: IFFALSE 4068
// begin SetTag ( drivers [ 1 ] , tMech ) ;
4028: LD_VAR 0 28
4032: PUSH
4033: LD_INT 1
4035: ARRAY
4036: PPUSH
4037: LD_INT 7
4039: PPUSH
4040: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
4044: LD_ADDR_EXP 10
4048: PUSH
4049: LD_EXP 10
4053: PPUSH
4054: LD_VAR 0 28
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PPUSH
4063: CALL 53834 0 2
4067: ST_TO_ADDR
// end ; end ; if drivers then
4068: LD_VAR 0 28
4072: IFFALSE 4086
// SetTag ( i , tBusy ) ;
4074: LD_VAR 0 9
4078: PPUSH
4079: LD_INT 8
4081: PPUSH
4082: CALL_OW 109
// continue ;
4086: GO 3933
// end ; SetTag ( i , tBusy ) ;
4088: LD_VAR 0 9
4092: PPUSH
4093: LD_INT 8
4095: PPUSH
4096: CALL_OW 109
// end else
4100: GO 4663
// if tag = tBusy then
4102: LD_VAR 0 19
4106: PUSH
4107: LD_INT 8
4109: EQUAL
4110: IFFALSE 4330
// begin if GetLives ( i ) = 1000 then
4112: LD_VAR 0 9
4116: PPUSH
4117: CALL_OW 256
4121: PUSH
4122: LD_INT 1000
4124: EQUAL
4125: IFFALSE 4328
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4127: LD_VAR 0 9
4131: PPUSH
4132: CALL_OW 263
4136: PUSH
4137: LD_INT 1
4139: EQUAL
4140: IFFALSE 4154
4142: PUSH
4143: LD_VAR 0 9
4147: PPUSH
4148: CALL_OW 311
4152: NOT
4153: AND
4154: IFFALSE 4316
// begin drivers := arDrivers ;
4156: LD_ADDR_VAR 0 28
4160: PUSH
4161: LD_EXP 10
4165: ST_TO_ADDR
// if not drivers then
4166: LD_VAR 0 28
4170: NOT
4171: IFFALSE 4187
// begin SetTag ( i , 0 ) ;
4173: LD_VAR 0 9
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 109
// continue ;
4185: GO 3933
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 310
4200: IFFALSE 4218
4202: PUSH
4203: LD_VAR 0 28
4207: PUSH
4208: LD_INT 1
4210: ARRAY
4211: PPUSH
4212: CALL 51414 0 1
4216: NOT
4217: AND
4218: IFFALSE 4233
// ComExitBuilding ( drivers [ 1 ] ) ;
4220: LD_VAR 0 28
4224: PUSH
4225: LD_INT 1
4227: ARRAY
4228: PPUSH
4229: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4233: LD_VAR 0 30
4237: PPUSH
4238: LD_INT 120
4240: PUSH
4241: LD_INT 3
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PPUSH
4248: CALL_OW 72
4252: IFFALSE 4270
4254: PUSH
4255: LD_VAR 0 28
4259: PUSH
4260: LD_INT 1
4262: ARRAY
4263: PPUSH
4264: CALL_OW 314
4268: NOT
4269: AND
4270: IFTRUE 4294
4272: PUSH
4273: LD_VAR 0 30
4277: PPUSH
4278: LD_INT 120
4280: PUSH
4281: LD_INT 3
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PPUSH
4288: CALL_OW 72
4292: NOT
4293: OR
4294: IFFALSE 4314
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4296: LD_VAR 0 28
4300: PUSH
4301: LD_INT 1
4303: ARRAY
4304: PPUSH
4305: LD_VAR 0 9
4309: PPUSH
4310: CALL_OW 120
// continue ;
4314: GO 3933
// end ; SetTag ( i , tAttack ) ;
4316: LD_VAR 0 9
4320: PPUSH
4321: LD_INT 13
4323: PPUSH
4324: CALL_OW 109
// end ; end else
4328: GO 4663
// if tag = tAttack then
4330: LD_VAR 0 19
4334: PUSH
4335: LD_INT 13
4337: EQUAL
4338: IFFALSE 4520
// begin enemy := enemyInBase ;
4340: LD_ADDR_VAR 0 25
4344: PUSH
4345: LD_VAR 0 26
4349: ST_TO_ADDR
// if not enemy then
4350: LD_VAR 0 25
4354: NOT
4355: IFFALSE 4367
// enemy := enemyOuterBase ;
4357: LD_ADDR_VAR 0 25
4361: PUSH
4362: LD_VAR 0 27
4366: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4367: LD_VAR 0 25
4371: NOT
4372: IFFALSE 4407
4374: PUSH
4375: LD_VAR 0 9
4379: PPUSH
4380: LD_VAR 0 7
4384: PUSH
4385: LD_INT 1
4387: ARRAY
4388: PPUSH
4389: LD_VAR 0 7
4393: PUSH
4394: LD_INT 2
4396: ARRAY
4397: PPUSH
4398: CALL_OW 297
4402: PUSH
4403: LD_INT 10
4405: GREATER
4406: AND
4407: IFFALSE 4438
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4409: LD_VAR 0 9
4413: PPUSH
4414: LD_VAR 0 7
4418: PUSH
4419: LD_INT 1
4421: ARRAY
4422: PPUSH
4423: LD_VAR 0 7
4427: PUSH
4428: LD_INT 2
4430: ARRAY
4431: PPUSH
4432: CALL_OW 111
// continue ;
4436: GO 3933
// end ; if GetLives ( i ) < 650 then
4438: LD_VAR 0 9
4442: PPUSH
4443: CALL_OW 256
4447: PUSH
4448: LD_INT 650
4450: LESS
4451: IFFALSE 4494
// begin SetTag ( i , tVehRepair ) ;
4453: LD_VAR 0 9
4457: PPUSH
4458: LD_INT 9
4460: PPUSH
4461: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4465: LD_VAR 0 9
4469: PPUSH
4470: LD_VAR 0 7
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: LD_VAR 0 7
4483: PUSH
4484: LD_INT 2
4486: ARRAY
4487: PPUSH
4488: CALL_OW 111
// continue ;
4492: GO 3933
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4494: LD_VAR 0 9
4498: PPUSH
4499: LD_VAR 0 25
4503: PPUSH
4504: LD_VAR 0 9
4508: PPUSH
4509: CALL_OW 74
4513: PPUSH
4514: CALL_OW 115
// end else
4518: GO 4663
// if tag = tVehRepair then
4520: LD_VAR 0 19
4524: PUSH
4525: LD_INT 9
4527: EQUAL
4528: IFFALSE 4663
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4530: LD_VAR 0 9
4534: PPUSH
4535: LD_VAR 0 7
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: LD_VAR 0 7
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PPUSH
4553: CALL_OW 297
4557: PUSH
4558: LD_INT 10
4560: GREATER
4561: IFFALSE 4592
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4563: LD_VAR 0 9
4567: PPUSH
4568: LD_VAR 0 7
4572: PUSH
4573: LD_INT 1
4575: ARRAY
4576: PPUSH
4577: LD_VAR 0 7
4581: PUSH
4582: LD_INT 2
4584: ARRAY
4585: PPUSH
4586: CALL_OW 111
// continue ;
4590: GO 3933
// end ; if GetLives ( i ) = 1000 then
4592: LD_VAR 0 9
4596: PPUSH
4597: CALL_OW 256
4601: PUSH
4602: LD_INT 1000
4604: EQUAL
4605: IFFALSE 4621
// begin SetTag ( i , tBusy ) ;
4607: LD_VAR 0 9
4611: PPUSH
4612: LD_INT 8
4614: PPUSH
4615: CALL_OW 109
// continue ;
4619: GO 3933
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4621: LD_VAR 0 9
4625: PPUSH
4626: CALL_OW 263
4630: PUSH
4631: LD_INT 1
4633: EQUAL
4634: IFFALSE 4647
4636: PUSH
4637: LD_VAR 0 9
4641: PPUSH
4642: CALL_OW 311
4646: AND
4647: IFFALSE 4663
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4649: LD_VAR 0 9
4653: PPUSH
4654: CALL_OW 311
4658: PPUSH
4659: CALL 55548 0 1
// end ; end ;
4663: GO 3933
4665: POP
4666: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4667: LD_ADDR_VAR 0 23
4671: PUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: LD_INT 2
4679: PUSH
4680: LD_INT 25
4682: PUSH
4683: LD_INT 1
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 25
4692: PUSH
4693: LD_INT 8
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: LD_INT 5
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 25
4712: PUSH
4713: LD_INT 9
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 50
4729: PUSH
4730: EMPTY
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 72
4741: ST_TO_ADDR
// if sol then
4742: LD_VAR 0 23
4746: IFFALSE 5262
// begin if enemyInBase then
4748: LD_VAR 0 26
4752: IFFALSE 4931
// begin for i in sol do
4754: LD_ADDR_VAR 0 9
4758: PUSH
4759: LD_VAR 0 23
4763: PUSH
4764: FOR_IN
4765: IFFALSE 4927
// begin tw := IsInUnit ( i ) ;
4767: LD_ADDR_VAR 0 20
4771: PUSH
4772: LD_VAR 0 9
4776: PPUSH
4777: CALL_OW 310
4781: ST_TO_ADDR
// if tw then
4782: LD_VAR 0 20
4786: IFFALSE 4869
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4788: LD_VAR 0 20
4792: PUSH
4793: LD_INT 22
4795: PUSH
4796: LD_VAR 0 1
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 101
4807: PUSH
4808: LD_VAR 0 38
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 30
4822: PUSH
4823: LD_INT 32
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 30
4832: PUSH
4833: LD_INT 31
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 69
4854: IN
4855: NOT
4856: IFFALSE 4867
// ComExitBuilding ( i ) ;
4858: LD_VAR 0 9
4862: PPUSH
4863: CALL_OW 122
// end else
4867: GO 4925
// if IsInArea ( i , area ) then
4869: LD_VAR 0 9
4873: PPUSH
4874: LD_VAR 0 3
4878: PPUSH
4879: CALL_OW 308
4883: IFFALSE 4911
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4885: LD_VAR 0 9
4889: PPUSH
4890: LD_VAR 0 26
4894: PPUSH
4895: LD_VAR 0 9
4899: PPUSH
4900: CALL_OW 74
4904: PPUSH
4905: CALL_OW 115
4909: GO 4925
// ComMoveToArea ( i , area ) ;
4911: LD_VAR 0 9
4915: PPUSH
4916: LD_VAR 0 3
4920: PPUSH
4921: CALL_OW 113
// end ;
4925: GO 4764
4927: POP
4928: POP
// end else
4929: GO 5262
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4931: LD_ADDR_VAR 0 32
4935: PUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 3
4943: PUSH
4944: LD_INT 62
4946: PUSH
4947: EMPTY
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 2
4956: PUSH
4957: LD_INT 30
4959: PUSH
4960: LD_INT 32
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 30
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 30
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 30
4989: PUSH
4990: LD_INT 31
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: CALL_OW 70
5012: ST_TO_ADDR
// if empty then
5013: LD_VAR 0 32
5017: IFFALSE 5034
// empty := ReverseArray ( empty ) ;
5019: LD_ADDR_VAR 0 32
5023: PUSH
5024: LD_VAR 0 32
5028: PPUSH
5029: CALL 48924 0 1
5033: ST_TO_ADDR
// for i in sol do
5034: LD_ADDR_VAR 0 9
5038: PUSH
5039: LD_VAR 0 23
5043: PUSH
5044: FOR_IN
5045: IFFALSE 5260
// begin tag := GetTag ( i ) ;
5047: LD_ADDR_VAR 0 19
5051: PUSH
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 110
5061: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
5062: LD_VAR 0 9
5066: PPUSH
5067: CALL_OW 256
5071: PUSH
5072: LD_INT 1000
5074: LESS
5075: IFFALSE 5087
5077: PUSH
5078: LD_VAR 0 19
5082: PUSH
5083: LD_INT 1
5085: NONEQUAL
5086: AND
5087: IFFALSE 5139
// begin SetTag ( i , tHeal ) ;
5089: LD_VAR 0 9
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5101: LD_VAR 0 9
5105: PPUSH
5106: LD_VAR 0 6
5110: PUSH
5111: LD_INT 1
5113: ARRAY
5114: PPUSH
5115: LD_VAR 0 6
5119: PUSH
5120: LD_INT 2
5122: ARRAY
5123: PPUSH
5124: CALL_OW 111
// AddComHold ( i ) ;
5128: LD_VAR 0 9
5132: PPUSH
5133: CALL_OW 200
// continue ;
5137: GO 5044
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5139: LD_VAR 0 9
5143: PPUSH
5144: CALL_OW 256
5148: PUSH
5149: LD_INT 1000
5151: EQUAL
5152: IFFALSE 5164
5154: PUSH
5155: LD_VAR 0 19
5159: PUSH
5160: LD_INT 1
5162: EQUAL
5163: AND
5164: IFFALSE 5180
// begin SetTag ( i , 0 ) ;
5166: LD_VAR 0 9
5170: PPUSH
5171: LD_INT 0
5173: PPUSH
5174: CALL_OW 109
// continue ;
5178: GO 5044
// end ; if HasTask ( i ) then
5180: LD_VAR 0 9
5184: PPUSH
5185: CALL_OW 314
5189: IFFALSE 5193
// continue ;
5191: GO 5044
// if not IsInUnit ( i ) and not tag and empty then
5193: LD_VAR 0 9
5197: PPUSH
5198: CALL_OW 310
5202: NOT
5203: IFFALSE 5212
5205: PUSH
5206: LD_VAR 0 19
5210: NOT
5211: AND
5212: IFFALSE 5220
5214: PUSH
5215: LD_VAR 0 32
5219: AND
5220: IFFALSE 5258
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5222: LD_VAR 0 9
5226: PPUSH
5227: LD_VAR 0 32
5231: PUSH
5232: LD_INT 1
5234: ARRAY
5235: PPUSH
5236: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5240: LD_ADDR_VAR 0 32
5244: PUSH
5245: LD_VAR 0 32
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: CALL_OW 3
5257: ST_TO_ADDR
// end ; end ;
5258: GO 5044
5260: POP
5261: POP
// end ; end ; end ;
5262: LD_VAR 0 8
5266: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5267: LD_EXP 14
5271: PPUSH
5272: LD_INT 50
5274: PUSH
5275: EMPTY
5276: LIST
5277: PPUSH
5278: CALL_OW 72
5282: IFFALSE 5335
5284: GO 5286
5286: DISABLE
// begin enable ;
5287: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5288: LD_EXP 3
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: LD_EXP 14
5310: PPUSH
5311: LD_INT 109
5313: PUSH
5314: LD_INT 43
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: LD_INT 112
5323: PUSH
5324: LD_INT 52
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PPUSH
5331: CALL 1267 0 7
// end ;
5335: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
5336: LD_EXP 13
5340: IFFALSE 5568
5342: GO 5344
5344: DISABLE
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
// begin enable ;
5350: ENABLE
// p := 1 ;
5351: LD_ADDR_VAR 0 2
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5359: LD_ADDR_VAR 0 1
5363: PUSH
5364: DOUBLE
5365: LD_INT 1
5367: DEC
5368: ST_TO_ADDR
5369: LD_EXP 13
5373: PPUSH
5374: CALL 17902 0 1
5378: PUSH
5379: LD_INT 2
5381: DIV
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5566
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_EXP 13
5395: PUSH
5396: LD_VAR 0 2
5400: ARRAY
5401: PPUSH
5402: LD_EXP 13
5406: PUSH
5407: LD_VAR 0 2
5411: PUSH
5412: LD_INT 1
5414: PLUS
5415: ARRAY
5416: PPUSH
5417: CALL_OW 428
5421: ST_TO_ADDR
// if tmp then
5422: LD_VAR 0 3
5426: IFFALSE 5550
// begin if not GetSide ( tmp ) in [ 0 , botSides [ 1 ] ] then
5428: LD_VAR 0 3
5432: PPUSH
5433: CALL_OW 255
5437: PUSH
5438: LD_INT 0
5440: PUSH
5441: LD_EXP 3
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: IN
5454: NOT
5455: IFFALSE 5550
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5457: LD_EXP 13
5461: PUSH
5462: LD_VAR 0 2
5466: ARRAY
5467: PPUSH
5468: LD_EXP 13
5472: PUSH
5473: LD_VAR 0 2
5477: PUSH
5478: LD_INT 1
5480: PLUS
5481: ARRAY
5482: PPUSH
5483: LD_EXP 3
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: PPUSH
5492: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5496: LD_ADDR_EXP 13
5500: PUSH
5501: LD_EXP 13
5505: PPUSH
5506: LD_VAR 0 2
5510: PPUSH
5511: CALL_OW 3
5515: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5516: LD_ADDR_EXP 13
5520: PUSH
5521: LD_EXP 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// p := p - 2 ;
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_VAR 0 2
5545: PUSH
5546: LD_INT 2
5548: MINUS
5549: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5550: LD_ADDR_VAR 0 2
5554: PUSH
5555: LD_VAR 0 2
5559: PUSH
5560: LD_INT 2
5562: PLUS
5563: ST_TO_ADDR
// end ;
5564: GO 5383
5566: POP
5567: POP
// end ;
5568: PPOPN 3
5570: END
// every 15 15$00 trigger IsOk ( arDep ) do var un ;
5571: LD_INT 2
5573: PPUSH
5574: CALL_OW 302
5578: IFFALSE 5909
5580: GO 5582
5582: DISABLE
5583: LD_INT 0
5585: PPUSH
// begin enable ;
5586: ENABLE
// if UnitsInside ( arFac ) < 3 and arMechSpawnCounter then
5587: LD_INT 12
5589: PPUSH
5590: CALL_OW 313
5594: PUSH
5595: LD_INT 3
5597: LESS
5598: IFFALSE 5606
5600: PUSH
5601: LD_EXP 11
5605: AND
5606: IFFALSE 5735
// begin arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
5608: LD_ADDR_EXP 11
5612: PUSH
5613: LD_EXP 11
5617: PPUSH
5618: CALL 55229 0 1
5622: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
5623: LD_ADDR_OWVAR 20
5627: PUSH
5628: LD_EXP 3
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: ST_TO_ADDR
// uc_nation := nation_arabian ;
5637: LD_ADDR_OWVAR 21
5641: PUSH
5642: LD_INT 2
5644: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
5645: LD_INT 0
5647: PPUSH
5648: LD_INT 3
5650: PUSH
5651: LD_INT 6
5653: PUSH
5654: LD_INT 9
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_OWVAR 67
5666: ARRAY
5667: PPUSH
5668: CALL_OW 383
// un := CreateHuman ;
5672: LD_ADDR_VAR 0 1
5676: PUSH
5677: CALL_OW 44
5681: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
5682: LD_VAR 0 1
5686: PPUSH
5687: LD_INT 143
5689: PPUSH
5690: LD_INT 29
5692: PPUSH
5693: LD_INT 0
5695: PPUSH
5696: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
5700: LD_VAR 0 1
5704: PPUSH
5705: LD_INT 115
5707: PPUSH
5708: LD_INT 52
5710: PPUSH
5711: CALL_OW 111
// arForce := Join ( arForce , un ) ;
5715: LD_ADDR_EXP 14
5719: PUSH
5720: LD_EXP 14
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL 53834 0 2
5734: ST_TO_ADDR
// end ; arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5735: LD_ADDR_EXP 6
5739: PUSH
5740: LD_EXP 6
5744: PUSH
5745: LD_INT 14
5747: PUSH
5748: LD_INT 1
5750: PUSH
5751: LD_INT 2
5753: PUSH
5754: LD_INT 27
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 14
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 28
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 14
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 28
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: ADD
5804: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5805: LD_OWVAR 67
5809: PUSH
5810: LD_INT 1
5812: GREATER
5813: IFFALSE 5837
5815: PUSH
5816: LD_INT 72
5818: PPUSH
5819: LD_EXP 3
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: CALL_OW 321
5832: PUSH
5833: LD_INT 2
5835: EQUAL
5836: AND
5837: IFFALSE 5909
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5839: LD_ADDR_EXP 6
5843: PUSH
5844: LD_EXP 6
5848: PUSH
5849: LD_INT 14
5851: PUSH
5852: LD_INT 3
5854: PUSH
5855: LD_INT 2
5857: PUSH
5858: LD_INT 29
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 14
5869: PUSH
5870: LD_INT 3
5872: PUSH
5873: LD_INT 2
5875: PUSH
5876: LD_INT 29
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 14
5887: PUSH
5888: LD_INT 3
5890: PUSH
5891: LD_INT 2
5893: PUSH
5894: LD_INT 29
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: LIST
5907: ADD
5908: ST_TO_ADDR
// end ; end_of_file
5909: PPOPN 1
5911: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5912: LD_INT 0
5914: PPUSH
5915: PPUSH
5916: PPUSH
5917: PPUSH
5918: PPUSH
// mpGameType := GameTypeCoop ;
5919: LD_ADDR_EXP 41
5923: PUSH
5924: LD_INT 4
5926: ST_TO_ADDR
// multi_settings_counter := 6 ;
5927: LD_ADDR_EXP 29
5931: PUSH
5932: LD_INT 6
5934: ST_TO_ADDR
// multi_settings := [ ] ;
5935: LD_ADDR_EXP 28
5939: PUSH
5940: EMPTY
5941: ST_TO_ADDR
// if Multiplayer then
5942: LD_OWVAR 4
5946: IFFALSE 6126
// begin your_side := mp_player_side ;
5948: LD_ADDR_OWVAR 2
5952: PUSH
5953: LD_OWVAR 7
5957: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5958: LD_ADDR_EXP 17
5962: PUSH
5963: LD_OWVAR 6
5967: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5968: LD_ADDR_EXP 18
5972: PUSH
5973: LD_OWVAR 17
5977: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5978: LD_ADDR_EXP 19
5982: PUSH
5983: LD_OWVAR 15
5987: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5988: LD_ADDR_EXP 20
5992: PUSH
5993: LD_OWVAR 16
5997: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5998: LD_ADDR_EXP 21
6002: PUSH
6003: EMPTY
6004: PUSH
6005: EMPTY
6006: LIST
6007: ST_TO_ADDR
// for i in mp_teams do
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_OWVAR 12
6017: PUSH
6018: FOR_IN
6019: IFFALSE 6062
// if i then
6021: LD_VAR 0 2
6025: IFFALSE 6060
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
6027: LD_ADDR_EXP 21
6031: PUSH
6032: LD_EXP 21
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: LD_EXP 21
6044: PUSH
6045: LD_INT 1
6047: ARRAY
6048: PUSH
6049: LD_VAR 0 2
6053: UNION
6054: PPUSH
6055: CALL_OW 1
6059: ST_TO_ADDR
6060: GO 6018
6062: POP
6063: POP
// for i := 1 to multi_settings_counter do
6064: LD_ADDR_VAR 0 2
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_EXP 29
6078: PUSH
6079: FOR_TO
6080: IFFALSE 6122
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
6082: LD_ADDR_EXP 28
6086: PUSH
6087: LD_EXP 28
6091: PPUSH
6092: LD_EXP 28
6096: PUSH
6097: LD_INT 1
6099: PLUS
6100: PPUSH
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 426
6110: PUSH
6111: LD_INT 1
6113: PLUS
6114: PPUSH
6115: CALL_OW 1
6119: ST_TO_ADDR
6120: GO 6079
6122: POP
6123: POP
// end else
6124: GO 6312
// begin your_side := 3 ;
6126: LD_ADDR_OWVAR 2
6130: PUSH
6131: LD_INT 3
6133: ST_TO_ADDR
// multi_gametype := 1 ;
6134: LD_ADDR_EXP 17
6138: PUSH
6139: LD_INT 1
6141: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 0 , 0 , 0 , 3 ] ;
6142: LD_ADDR_EXP 18
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 1
6155: PUSH
6156: LD_INT 2
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 ] ;
6181: LD_ADDR_EXP 19
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 0 , 0 , 0 , 3 ] ;
6220: LD_ADDR_EXP 20
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: LD_INT 0
6230: PUSH
6231: LD_INT 3
6233: PUSH
6234: LD_INT 3
6236: PUSH
6237: LD_INT 0
6239: PUSH
6240: LD_INT 0
6242: PUSH
6243: LD_INT 0
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 8 ] ] ;
6259: LD_ADDR_EXP 21
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: LD_INT 8
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6281: LD_ADDR_EXP 28
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 4
6291: PUSH
6292: LD_INT 4
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
6312: LD_ADDR_EXP 42
6316: PUSH
6317: LD_EXP 18
6321: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6322: LD_ADDR_EXP 22
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: LD_INT 0
6338: PUSH
6339: LD_INT 0
6341: PUSH
6342: LD_INT 0
6344: PUSH
6345: LD_INT 0
6347: PUSH
6348: LD_INT 0
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6361: LD_ADDR_EXP 25
6365: PUSH
6366: LD_INT 0
6368: PUSH
6369: LD_INT 0
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: LD_INT 0
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: LD_INT 0
6386: PUSH
6387: LD_INT 0
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6400: LD_ADDR_EXP 36
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: LD_INT 0
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: ST_TO_ADDR
// multi_teamgame := true ;
6439: LD_ADDR_EXP 26
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6447: LD_ADDR_EXP 24
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: ST_TO_ADDR
// multi_custom_commanders := true ;
6458: LD_ADDR_EXP 27
6462: PUSH
6463: LD_INT 1
6465: ST_TO_ADDR
// multi_commanders := [ ] ;
6466: LD_ADDR_EXP 35
6470: PUSH
6471: EMPTY
6472: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6473: LD_ADDR_EXP 38
6477: PUSH
6478: EMPTY
6479: ST_TO_ADDR
// multi_players_amount := 0 ;
6480: LD_ADDR_EXP 37
6484: PUSH
6485: LD_INT 0
6487: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6488: LD_ADDR_EXP 23
6492: PUSH
6493: LD_INT 5
6495: PUSH
6496: LD_INT 6
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 7
6505: PUSH
6506: LD_INT 8
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 9
6515: PUSH
6516: LD_INT 10
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6528: LD_ADDR_EXP 40
6532: PUSH
6533: EMPTY
6534: PUSH
6535: EMPTY
6536: PUSH
6537: EMPTY
6538: PUSH
6539: EMPTY
6540: PUSH
6541: EMPTY
6542: PUSH
6543: EMPTY
6544: PUSH
6545: EMPTY
6546: PUSH
6547: EMPTY
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: ST_TO_ADDR
// for i := 1 to 8 do
6559: LD_ADDR_VAR 0 2
6563: PUSH
6564: DOUBLE
6565: LD_INT 1
6567: DEC
6568: ST_TO_ADDR
6569: LD_INT 8
6571: PUSH
6572: FOR_TO
6573: IFFALSE 6908
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6575: LD_VAR 0 2
6579: PPUSH
6580: CALL_OW 530
6584: IFFALSE 6742
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6586: LD_ADDR_EXP 22
6590: PUSH
6591: LD_EXP 22
6595: PPUSH
6596: LD_VAR 0 2
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 1
6608: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6609: LD_ADDR_EXP 20
6613: PUSH
6614: LD_EXP 20
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: LD_INT 0
6626: PPUSH
6627: CALL_OW 1
6631: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6632: LD_ADDR_EXP 18
6636: PUSH
6637: LD_EXP 18
6641: PPUSH
6642: LD_VAR 0 2
6646: PPUSH
6647: LD_INT 0
6649: PPUSH
6650: CALL_OW 1
6654: ST_TO_ADDR
// for j := 1 to multi_teams do
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: DOUBLE
6661: LD_INT 1
6663: DEC
6664: ST_TO_ADDR
6665: LD_EXP 21
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6740
// begin if i in multi_teams [ j ] then
6673: LD_VAR 0 2
6677: PUSH
6678: LD_EXP 21
6682: PUSH
6683: LD_VAR 0 3
6687: ARRAY
6688: IN
6689: IFFALSE 6738
// begin tmp := multi_teams [ j ] diff i ;
6691: LD_ADDR_VAR 0 5
6695: PUSH
6696: LD_EXP 21
6700: PUSH
6701: LD_VAR 0 3
6705: ARRAY
6706: PUSH
6707: LD_VAR 0 2
6711: DIFF
6712: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6713: LD_ADDR_EXP 21
6717: PUSH
6718: LD_EXP 21
6722: PPUSH
6723: LD_VAR 0 3
6727: PPUSH
6728: LD_VAR 0 5
6732: PPUSH
6733: CALL_OW 1
6737: ST_TO_ADDR
// end ; end ;
6738: GO 6670
6740: POP
6741: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6742: LD_EXP 20
6746: PUSH
6747: LD_VAR 0 2
6751: ARRAY
6752: IFFALSE 6773
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_VAR 0 2
6764: ARRAY
6765: PUSH
6766: LD_EXP 24
6770: IN
6771: NOT
6772: AND
6773: IFFALSE 6814
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6775: LD_ADDR_EXP 20
6779: PUSH
6780: LD_EXP 20
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_EXP 24
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_EXP 24
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: PPUSH
6809: CALL_OW 1
6813: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6814: LD_EXP 20
6818: PUSH
6819: LD_VAR 0 2
6823: ARRAY
6824: NOT
6825: IFFALSE 6840
6827: PUSH
6828: LD_EXP 18
6832: PUSH
6833: LD_VAR 0 2
6837: ARRAY
6838: NOT
6839: AND
6840: IFFALSE 6855
6842: PUSH
6843: LD_EXP 22
6847: PUSH
6848: LD_VAR 0 2
6852: ARRAY
6853: NOT
6854: AND
6855: IFFALSE 6880
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6857: LD_ADDR_EXP 25
6861: PUSH
6862: LD_EXP 25
6866: PPUSH
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_INT 1
6874: PPUSH
6875: CALL_OW 1
6879: ST_TO_ADDR
// if multi_sides [ i ] then
6880: LD_EXP 18
6884: PUSH
6885: LD_VAR 0 2
6889: ARRAY
6890: IFFALSE 6906
// multi_players_amount := multi_players_amount + 1 ;
6892: LD_ADDR_EXP 37
6896: PUSH
6897: LD_EXP 37
6901: PUSH
6902: LD_INT 1
6904: PLUS
6905: ST_TO_ADDR
// end ;
6906: GO 6572
6908: POP
6909: POP
// for i in multi_teams do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_EXP 21
6919: PUSH
6920: FOR_IN
6921: IFFALSE 7029
// begin for j := 2 to i do
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: DOUBLE
6929: LD_INT 2
6931: DEC
6932: ST_TO_ADDR
6933: LD_VAR 0 2
6937: PUSH
6938: FOR_TO
6939: IFFALSE 7025
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6941: LD_VAR 0 2
6945: PUSH
6946: LD_VAR 0 3
6950: ARRAY
6951: PPUSH
6952: LD_VAR 0 2
6956: PUSH
6957: LD_INT 1
6959: ARRAY
6960: PPUSH
6961: CALL_OW 343
// for x := 1 to j - 1 do
6965: LD_ADDR_VAR 0 4
6969: PUSH
6970: DOUBLE
6971: LD_INT 1
6973: DEC
6974: ST_TO_ADDR
6975: LD_VAR 0 3
6979: PUSH
6980: LD_INT 1
6982: MINUS
6983: PUSH
6984: FOR_TO
6985: IFFALSE 7021
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6987: LD_VAR 0 2
6991: PUSH
6992: LD_VAR 0 3
6996: ARRAY
6997: PPUSH
6998: LD_VAR 0 2
7002: PUSH
7003: LD_VAR 0 4
7007: ARRAY
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 1
7014: PPUSH
7015: CALL_OW 80
7019: GO 6984
7021: POP
7022: POP
// end ;
7023: GO 6938
7025: POP
7026: POP
// end ;
7027: GO 6920
7029: POP
7030: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
7031: LD_ADDR_OWVAR 67
7035: PUSH
7036: LD_INT 1
7038: PUSH
7039: LD_INT 2
7041: PUSH
7042: LD_INT 3
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: LD_EXP 28
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: ARRAY
7059: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
7060: LD_ADDR_EXP 30
7064: PUSH
7065: LD_INT 9
7067: PUSH
7068: LD_INT 12
7070: PUSH
7071: LD_INT 15
7073: PUSH
7074: LD_INT 18
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: LD_EXP 28
7087: PUSH
7088: LD_INT 2
7090: ARRAY
7091: ARRAY
7092: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
7093: LD_ADDR_EXP 31
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: LD_EXP 28
7120: PUSH
7121: LD_INT 3
7123: ARRAY
7124: ARRAY
7125: ST_TO_ADDR
// multi_crates_spawn := [ [ 5000 , 0 0$32 ] , [ 8000 , 0 0$22 ] , [ 11000 , 0 0$14 ] , [ 14000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
7126: LD_ADDR_EXP 32
7130: PUSH
7131: LD_INT 5000
7133: PUSH
7134: LD_INT 1120
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 8000
7143: PUSH
7144: LD_INT 770
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 11000
7153: PUSH
7154: LD_INT 490
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 14000
7163: PUSH
7164: LD_INT 420
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_EXP 28
7181: PUSH
7182: LD_INT 4
7184: ARRAY
7185: ARRAY
7186: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
7187: LD_ADDR_EXP 33
7191: PUSH
7192: LD_INT 0
7194: PUSH
7195: LD_INT 1
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: LD_EXP 28
7214: PUSH
7215: LD_INT 5
7217: ARRAY
7218: ARRAY
7219: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
7220: LD_ADDR_EXP 34
7224: PUSH
7225: LD_INT 0
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: LD_INT 2
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: LIST
7238: PUSH
7239: LD_EXP 28
7243: PUSH
7244: LD_INT 6
7246: ARRAY
7247: ARRAY
7248: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7249: LD_ADDR_EXP 39
7253: PUSH
7254: LD_INT 10500
7256: PUSH
7257: LD_INT 31500
7259: PUSH
7260: LD_INT 52500
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: PUSH
7268: LD_OWVAR 67
7272: ARRAY
7273: ST_TO_ADDR
// end ;
7274: LD_VAR 0 1
7278: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7279: LD_INT 0
7281: PPUSH
7282: PPUSH
// if not multi_sides [ preferSide ] then
7283: LD_EXP 18
7287: PUSH
7288: LD_VAR 0 1
7292: ARRAY
7293: NOT
7294: IFFALSE 7308
// begin result := preferSide ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 1
7305: ST_TO_ADDR
// exit ;
7306: GO 7355
// end ; for i := 1 to 8 do
7308: LD_ADDR_VAR 0 3
7312: PUSH
7313: DOUBLE
7314: LD_INT 1
7316: DEC
7317: ST_TO_ADDR
7318: LD_INT 8
7320: PUSH
7321: FOR_TO
7322: IFFALSE 7353
// if not multi_sides [ i ] then
7324: LD_EXP 18
7328: PUSH
7329: LD_VAR 0 3
7333: ARRAY
7334: NOT
7335: IFFALSE 7351
// begin result := i ;
7337: LD_ADDR_VAR 0 2
7341: PUSH
7342: LD_VAR 0 3
7346: ST_TO_ADDR
// exit ;
7347: POP
7348: POP
7349: GO 7355
// end ;
7351: GO 7321
7353: POP
7354: POP
// end ;
7355: LD_VAR 0 2
7359: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7360: LD_INT 0
7362: PPUSH
// uc_side := side ;
7363: LD_ADDR_OWVAR 20
7367: PUSH
7368: LD_VAR 0 1
7372: ST_TO_ADDR
// uc_nation := nation_russian ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 3
7380: ST_TO_ADDR
// hc_importance := 100 ;
7381: LD_ADDR_OWVAR 32
7385: PUSH
7386: LD_INT 100
7388: ST_TO_ADDR
// if num = 1 then
7389: LD_VAR 0 2
7393: PUSH
7394: LD_INT 1
7396: EQUAL
7397: IFFALSE 7464
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7399: LD_INT 1
7401: PPUSH
7402: LD_EXP 31
7406: PUSH
7407: LD_INT 1
7409: PLUS
7410: PPUSH
7411: CALL_OW 381
// hc_gallery := ru ;
7415: LD_ADDR_OWVAR 33
7419: PUSH
7420: LD_STRING ru
7422: ST_TO_ADDR
// hc_face_number := 25 ;
7423: LD_ADDR_OWVAR 34
7427: PUSH
7428: LD_INT 25
7430: ST_TO_ADDR
// hc_name := Xavier ;
7431: LD_ADDR_OWVAR 26
7435: PUSH
7436: LD_STRING Xavier
7438: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7439: LD_ADDR_OWVAR 29
7443: PUSH
7444: LD_INT 12
7446: PUSH
7447: LD_INT 10
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: ST_TO_ADDR
// result := CreateHuman ;
7454: LD_ADDR_VAR 0 3
7458: PUSH
7459: CALL_OW 44
7463: ST_TO_ADDR
// end ; if num = 2 then
7464: LD_VAR 0 2
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: IFFALSE 7539
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7474: LD_INT 1
7476: PPUSH
7477: LD_EXP 31
7481: PUSH
7482: LD_INT 2
7484: PLUS
7485: PPUSH
7486: CALL_OW 383
// hc_gallery := ru ;
7490: LD_ADDR_OWVAR 33
7494: PUSH
7495: LD_STRING ru
7497: ST_TO_ADDR
// hc_face_number := 1 ;
7498: LD_ADDR_OWVAR 34
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// hc_name := Burlak ;
7506: LD_ADDR_OWVAR 26
7510: PUSH
7511: LD_STRING Burlak
7513: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7514: LD_ADDR_OWVAR 29
7518: PUSH
7519: LD_INT 10
7521: PUSH
7522: LD_INT 11
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// result := CreateHuman ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// end ; if num = 3 then
7539: LD_VAR 0 2
7543: PUSH
7544: LD_INT 3
7546: EQUAL
7547: IFFALSE 7614
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7549: LD_INT 1
7551: PPUSH
7552: LD_EXP 31
7556: PUSH
7557: LD_INT 1
7559: PLUS
7560: PPUSH
7561: CALL_OW 381
// hc_gallery := ru ;
7565: LD_ADDR_OWVAR 33
7569: PUSH
7570: LD_STRING ru
7572: ST_TO_ADDR
// hc_face_number := 18 ;
7573: LD_ADDR_OWVAR 34
7577: PUSH
7578: LD_INT 18
7580: ST_TO_ADDR
// hc_name := Vsevolod ;
7581: LD_ADDR_OWVAR 26
7585: PUSH
7586: LD_STRING Vsevolod
7588: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7589: LD_ADDR_OWVAR 29
7593: PUSH
7594: LD_INT 12
7596: PUSH
7597: LD_INT 11
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: ST_TO_ADDR
// result := CreateHuman ;
7604: LD_ADDR_VAR 0 3
7608: PUSH
7609: CALL_OW 44
7613: ST_TO_ADDR
// end ; end ;
7614: LD_VAR 0 3
7618: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7619: LD_INT 0
7621: PPUSH
7622: PPUSH
7623: PPUSH
// if not multi_apeman then
7624: LD_EXP 33
7628: NOT
7629: IFFALSE 7633
// exit ;
7631: GO 7711
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 6
7640: PUSH
7641: LD_INT 9
7643: PUSH
7644: LD_INT 12
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: PUSH
7652: LD_EXP 33
7656: ARRAY
7657: ST_TO_ADDR
// for i := 1 to tmp do
7658: LD_ADDR_VAR 0 2
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 3
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7709
// begin uc_side := 0 ;
7676: LD_ADDR_OWVAR 20
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7684: LD_INT 5
7686: NEG
7687: PPUSH
7688: CALL 49961 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7692: CALL_OW 44
7696: PPUSH
7697: LD_INT 21
7699: PPUSH
7700: LD_INT 0
7702: PPUSH
7703: CALL_OW 49
// end ;
7707: GO 7673
7709: POP
7710: POP
// end ;
7711: LD_VAR 0 1
7715: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
// for i := 1 to 8 do
7728: LD_ADDR_VAR 0 2
7732: PUSH
7733: DOUBLE
7734: LD_INT 1
7736: DEC
7737: ST_TO_ADDR
7738: LD_INT 8
7740: PUSH
7741: FOR_TO
7742: IFFALSE 8922
// begin if not multi_sides [ i ] then
7744: LD_EXP 18
7748: PUSH
7749: LD_VAR 0 2
7753: ARRAY
7754: NOT
7755: IFFALSE 7759
// continue ;
7757: GO 7741
// if multi_buildings [ multi_sides [ i ] ] then
7759: LD_EXP 40
7763: PUSH
7764: LD_EXP 18
7768: PUSH
7769: LD_VAR 0 2
7773: ARRAY
7774: ARRAY
7775: IFFALSE 8009
// begin uc_side := i ;
7777: LD_ADDR_OWVAR 20
7781: PUSH
7782: LD_VAR 0 2
7786: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7787: LD_ADDR_OWVAR 21
7791: PUSH
7792: LD_EXP 20
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_EXP 40
7812: PUSH
7813: LD_EXP 18
7817: PUSH
7818: LD_VAR 0 2
7822: ARRAY
7823: ARRAY
7824: PUSH
7825: FOR_IN
7826: IFFALSE 8007
// begin bc_type := j [ 1 ] ;
7828: LD_ADDR_OWVAR 42
7832: PUSH
7833: LD_VAR 0 3
7837: PUSH
7838: LD_INT 1
7840: ARRAY
7841: ST_TO_ADDR
// bc_level := 2 ;
7842: LD_ADDR_OWVAR 43
7846: PUSH
7847: LD_INT 2
7849: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7850: LD_ADDR_VAR 0 4
7854: PUSH
7855: LD_VAR 0 3
7859: PUSH
7860: LD_INT 2
7862: ARRAY
7863: PUSH
7864: LD_INT 1
7866: ARRAY
7867: PPUSH
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 2
7875: ARRAY
7876: PUSH
7877: LD_INT 2
7879: ARRAY
7880: PPUSH
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 2
7888: ARRAY
7889: PUSH
7890: LD_INT 3
7892: ARRAY
7893: PPUSH
7894: CALL_OW 47
7898: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PUSH
7908: LD_INT 0
7910: EQUAL
7911: IFFALSE 8005
// begin SetBName ( b , j [ 3 ] ) ;
7913: LD_VAR 0 4
7917: PPUSH
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 3
7925: ARRAY
7926: PPUSH
7927: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7931: LD_VAR 0 4
7935: PPUSH
7936: CALL_OW 274
7940: PPUSH
7941: LD_INT 1
7943: PPUSH
7944: LD_INT 120
7946: PUSH
7947: LD_INT 100
7949: PUSH
7950: LD_INT 80
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: PUSH
7958: LD_OWVAR 67
7962: ARRAY
7963: PPUSH
7964: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7968: LD_VAR 0 4
7972: PPUSH
7973: CALL_OW 274
7977: PPUSH
7978: LD_INT 2
7980: PPUSH
7981: LD_INT 90
7983: PUSH
7984: LD_INT 60
7986: PUSH
7987: LD_INT 30
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: PUSH
7995: LD_OWVAR 67
7999: ARRAY
8000: PPUSH
8001: CALL_OW 277
// end ; end ;
8005: GO 7825
8007: POP
8008: POP
// end ; if multi_custom_commanders then
8009: LD_EXP 27
8013: IFFALSE 8222
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
8015: LD_ADDR_VAR 0 6
8019: PUSH
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_EXP 18
8029: PUSH
8030: LD_VAR 0 2
8034: ARRAY
8035: PPUSH
8036: CALL 7360 0 2
8040: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
8041: LD_ADDR_EXP 35
8045: PUSH
8046: LD_EXP 35
8050: PPUSH
8051: LD_EXP 35
8055: PUSH
8056: LD_INT 1
8058: PLUS
8059: PPUSH
8060: LD_VAR 0 6
8064: PPUSH
8065: CALL_OW 2
8069: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
8070: LD_VAR 0 6
8074: PPUSH
8075: CALL_OW 257
8079: PUSH
8080: LD_INT 3
8082: EQUAL
8083: IFFALSE 8187
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
8085: LD_INT 23
8087: PPUSH
8088: LD_INT 1
8090: PPUSH
8091: LD_INT 1
8093: PPUSH
8094: LD_INT 46
8096: PPUSH
8097: LD_INT 80
8099: PPUSH
8100: CALL 20664 0 5
// veh := CreateVehicle ;
8104: LD_ADDR_VAR 0 7
8108: PUSH
8109: CALL_OW 45
8113: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
8114: LD_VAR 0 7
8118: PPUSH
8119: LD_VAR 0 6
8123: PPUSH
8124: CALL_OW 255
8128: PUSH
8129: LD_INT 1
8131: NEG
8132: MUL
8133: PPUSH
8134: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8138: LD_VAR 0 7
8142: PPUSH
8143: LD_EXP 23
8147: PUSH
8148: LD_EXP 18
8152: PUSH
8153: LD_VAR 0 2
8157: ARRAY
8158: ARRAY
8159: PUSH
8160: LD_INT 2
8162: ARRAY
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8171: LD_VAR 0 6
8175: PPUSH
8176: LD_VAR 0 7
8180: PPUSH
8181: CALL_OW 52
// end else
8185: GO 8220
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8187: LD_VAR 0 6
8191: PPUSH
8192: LD_EXP 23
8196: PUSH
8197: LD_EXP 18
8201: PUSH
8202: LD_VAR 0 2
8206: ARRAY
8207: ARRAY
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: PPUSH
8213: LD_INT 0
8215: PPUSH
8216: CALL_OW 49
// end else
8220: GO 8433
// begin uc_side := i ;
8222: LD_ADDR_OWVAR 20
8226: PUSH
8227: LD_VAR 0 2
8231: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8232: LD_ADDR_OWVAR 21
8236: PUSH
8237: LD_EXP 20
8241: PUSH
8242: LD_VAR 0 2
8246: ARRAY
8247: ST_TO_ADDR
// hc_importance := 100 ;
8248: LD_ADDR_OWVAR 32
8252: PUSH
8253: LD_INT 100
8255: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8256: LD_INT 0
8258: PPUSH
8259: LD_INT 1
8261: PPUSH
8262: LD_EXP 31
8266: PPUSH
8267: CALL_OW 380
// if multiplayer then
8271: LD_OWVAR 4
8275: IFFALSE 8333
// begin hc_name := mp_sides_players_names [ i ] ;
8277: LD_ADDR_OWVAR 26
8281: PUSH
8282: LD_OWVAR 19
8286: PUSH
8287: LD_VAR 0 2
8291: ARRAY
8292: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8293: LD_ADDR_OWVAR 33
8297: PUSH
8298: LD_STRING MULTIAVATARS
8300: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8301: LD_ADDR_OWVAR 34
8305: PUSH
8306: LD_VAR 0 2
8310: PPUSH
8311: CALL_OW 525
8315: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8316: LD_ADDR_OWVAR 27
8320: PUSH
8321: LD_VAR 0 2
8325: PPUSH
8326: CALL_OW 526
8330: ST_TO_ADDR
// end else
8331: GO 8365
// begin hc_gallery :=  ;
8333: LD_ADDR_OWVAR 33
8337: PUSH
8338: LD_STRING 
8340: ST_TO_ADDR
// hc_name :=  ;
8341: LD_ADDR_OWVAR 26
8345: PUSH
8346: LD_STRING 
8348: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8349: LD_ADDR_OWVAR 27
8353: PUSH
8354: LD_INT 1
8356: PPUSH
8357: LD_INT 2
8359: PPUSH
8360: CALL_OW 12
8364: ST_TO_ADDR
// end ; un := CreateHuman ;
8365: LD_ADDR_VAR 0 6
8369: PUSH
8370: CALL_OW 44
8374: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8375: LD_VAR 0 6
8379: PPUSH
8380: LD_EXP 23
8384: PUSH
8385: LD_EXP 18
8389: PUSH
8390: LD_VAR 0 2
8394: ARRAY
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 0
8403: PPUSH
8404: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8408: LD_ADDR_EXP 35
8412: PUSH
8413: LD_EXP 35
8417: PPUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_VAR 0 6
8427: PPUSH
8428: CALL_OW 1
8432: ST_TO_ADDR
// end ; InitHc ;
8433: CALL_OW 19
// InitUc ;
8437: CALL_OW 18
// uc_side := i ;
8441: LD_ADDR_OWVAR 20
8445: PUSH
8446: LD_VAR 0 2
8450: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8451: LD_ADDR_OWVAR 21
8455: PUSH
8456: LD_EXP 20
8460: PUSH
8461: LD_VAR 0 2
8465: ARRAY
8466: ST_TO_ADDR
// hc_gallery :=  ;
8467: LD_ADDR_OWVAR 33
8471: PUSH
8472: LD_STRING 
8474: ST_TO_ADDR
// hc_name :=  ;
8475: LD_ADDR_OWVAR 26
8479: PUSH
8480: LD_STRING 
8482: ST_TO_ADDR
// hc_importance := 0 ;
8483: LD_ADDR_OWVAR 32
8487: PUSH
8488: LD_INT 0
8490: ST_TO_ADDR
// cl := 1 ;
8491: LD_ADDR_VAR 0 5
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8499: LD_ADDR_VAR 0 3
8503: PUSH
8504: DOUBLE
8505: LD_INT 2
8507: DEC
8508: ST_TO_ADDR
8509: LD_EXP 30
8513: PUSH
8514: FOR_TO
8515: IFFALSE 8918
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8517: LD_VAR 0 3
8521: PUSH
8522: LD_INT 1
8524: MINUS
8525: PUSH
8526: LD_EXP 30
8530: PUSH
8531: LD_INT 1
8533: MINUS
8534: PUSH
8535: LD_INT 4
8537: DIVREAL
8538: MOD
8539: PUSH
8540: LD_INT 0
8542: EQUAL
8543: IFFALSE 8559
// cl := cl + 1 ;
8545: LD_ADDR_VAR 0 5
8549: PUSH
8550: LD_VAR 0 5
8554: PUSH
8555: LD_INT 1
8557: PLUS
8558: ST_TO_ADDR
// if cl > 4 then
8559: LD_VAR 0 5
8563: PUSH
8564: LD_INT 4
8566: GREATER
8567: IFFALSE 8577
// cl := 1 ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 1
8576: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8577: LD_INT 0
8579: PPUSH
8580: LD_VAR 0 5
8584: PPUSH
8585: LD_EXP 31
8589: PPUSH
8590: CALL_OW 380
// un := CreateHuman ;
8594: LD_ADDR_VAR 0 6
8598: PUSH
8599: CALL_OW 44
8603: ST_TO_ADDR
// if j > copy then
8604: LD_VAR 0 3
8608: PUSH
8609: LD_VAR 0 9
8613: GREATER
8614: IFFALSE 8643
// copy := Replace ( copy , j , un ) else
8616: LD_ADDR_VAR 0 9
8620: PUSH
8621: LD_VAR 0 9
8625: PPUSH
8626: LD_VAR 0 3
8630: PPUSH
8631: LD_VAR 0 6
8635: PPUSH
8636: CALL_OW 1
8640: ST_TO_ADDR
8641: GO 8725
// begin CopySkills ( copy [ j ] , un ) ;
8643: LD_VAR 0 9
8647: PUSH
8648: LD_VAR 0 3
8652: ARRAY
8653: PPUSH
8654: LD_VAR 0 6
8658: PPUSH
8659: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8663: LD_VAR 0 6
8667: PPUSH
8668: LD_INT 2
8670: PPUSH
8671: LD_VAR 0 9
8675: PUSH
8676: LD_VAR 0 3
8680: ARRAY
8681: PPUSH
8682: LD_INT 2
8684: PPUSH
8685: CALL_OW 260
8689: PPUSH
8690: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8694: LD_VAR 0 6
8698: PPUSH
8699: LD_INT 1
8701: PPUSH
8702: LD_VAR 0 9
8706: PUSH
8707: LD_VAR 0 3
8711: ARRAY
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: CALL_OW 260
8720: PPUSH
8721: CALL_OW 239
// end ; if multi_pos_area then
8725: LD_EXP 23
8729: IFFALSE 8916
// begin if GetClass ( un ) = 3 then
8731: LD_VAR 0 6
8735: PPUSH
8736: CALL_OW 257
8740: PUSH
8741: LD_INT 3
8743: EQUAL
8744: IFFALSE 8883
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8746: LD_INT 22
8748: PPUSH
8749: LD_INT 1
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: LD_INT 44
8757: PUSH
8758: LD_INT 44
8760: PUSH
8761: LD_INT 43
8763: PUSH
8764: LD_INT 51
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: PUSH
8773: LD_VAR 0 3
8777: PUSH
8778: LD_INT 4
8780: MOD
8781: PUSH
8782: LD_INT 1
8784: PLUS
8785: ARRAY
8786: PPUSH
8787: LD_INT 80
8789: PPUSH
8790: CALL 20664 0 5
// veh := CreateVehicle ;
8794: LD_ADDR_VAR 0 7
8798: PUSH
8799: CALL_OW 45
8803: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8804: LD_VAR 0 7
8808: PPUSH
8809: LD_EXP 23
8813: PUSH
8814: LD_EXP 18
8818: PUSH
8819: LD_VAR 0 2
8823: ARRAY
8824: ARRAY
8825: PUSH
8826: LD_INT 2
8828: ARRAY
8829: PPUSH
8830: LD_INT 0
8832: PPUSH
8833: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8837: LD_VAR 0 6
8841: PPUSH
8842: LD_VAR 0 7
8846: PPUSH
8847: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8851: LD_VAR 0 7
8855: PPUSH
8856: CALL_OW 264
8860: PUSH
8861: LD_INT 51
8863: EQUAL
8864: IFFALSE 8881
// SetCargo ( veh , mat_cans , 100 ) ;
8866: LD_VAR 0 7
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: LD_INT 100
8876: PPUSH
8877: CALL_OW 290
// continue ;
8881: GO 8514
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8883: LD_VAR 0 6
8887: PPUSH
8888: LD_EXP 23
8892: PUSH
8893: LD_EXP 18
8897: PUSH
8898: LD_VAR 0 2
8902: ARRAY
8903: ARRAY
8904: PUSH
8905: LD_INT 1
8907: ARRAY
8908: PPUSH
8909: LD_INT 0
8911: PPUSH
8912: CALL_OW 49
// end ; end ;
8916: GO 8514
8918: POP
8919: POP
// end ;
8920: GO 7741
8922: POP
8923: POP
// end ;
8924: LD_VAR 0 1
8928: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8929: LD_INT 0
8931: PPUSH
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
// if not multi_support then
8936: LD_EXP 34
8940: NOT
8941: IFFALSE 8945
// exit ;
8943: GO 9232
// result := [ ] ;
8945: LD_ADDR_VAR 0 1
8949: PUSH
8950: EMPTY
8951: ST_TO_ADDR
// for i := 1 to 8 do
8952: LD_ADDR_VAR 0 2
8956: PUSH
8957: DOUBLE
8958: LD_INT 1
8960: DEC
8961: ST_TO_ADDR
8962: LD_INT 8
8964: PUSH
8965: FOR_TO
8966: IFFALSE 9230
// begin result := Replace ( result , i , [ ] ) ;
8968: LD_ADDR_VAR 0 1
8972: PUSH
8973: LD_VAR 0 1
8977: PPUSH
8978: LD_VAR 0 2
8982: PPUSH
8983: EMPTY
8984: PPUSH
8985: CALL_OW 1
8989: ST_TO_ADDR
// if multi_sides [ i ] then
8990: LD_EXP 18
8994: PUSH
8995: LD_VAR 0 2
8999: ARRAY
9000: IFFALSE 9228
// begin tmp := [ ] ;
9002: LD_ADDR_VAR 0 5
9006: PUSH
9007: EMPTY
9008: ST_TO_ADDR
// if multi_support = 1 then
9009: LD_EXP 34
9013: PUSH
9014: LD_INT 1
9016: EQUAL
9017: IFFALSE 9106
// begin uc_side := i ;
9019: LD_ADDR_OWVAR 20
9023: PUSH
9024: LD_VAR 0 2
9028: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9029: LD_ADDR_OWVAR 21
9033: PUSH
9034: LD_EXP 20
9038: PUSH
9039: LD_VAR 0 2
9043: ARRAY
9044: ST_TO_ADDR
// for j := 1 to 2 do
9045: LD_ADDR_VAR 0 3
9049: PUSH
9050: DOUBLE
9051: LD_INT 1
9053: DEC
9054: ST_TO_ADDR
9055: LD_INT 2
9057: PUSH
9058: FOR_TO
9059: IFFALSE 9104
// begin InitHC_All ( ) ;
9061: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
9065: LD_INT 0
9067: PPUSH
9068: LD_INT 1
9070: PPUSH
9071: LD_INT 4
9073: PPUSH
9074: CALL_OW 12
9078: PPUSH
9079: LD_INT 1
9081: PPUSH
9082: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9086: LD_ADDR_VAR 0 5
9090: PUSH
9091: LD_VAR 0 5
9095: PUSH
9096: CALL_OW 44
9100: ADD
9101: ST_TO_ADDR
// end ;
9102: GO 9058
9104: POP
9105: POP
// end ; if multi_support = 2 then
9106: LD_EXP 34
9110: PUSH
9111: LD_INT 2
9113: EQUAL
9114: IFFALSE 9203
// begin uc_side := i ;
9116: LD_ADDR_OWVAR 20
9120: PUSH
9121: LD_VAR 0 2
9125: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
9126: LD_ADDR_OWVAR 21
9130: PUSH
9131: LD_EXP 20
9135: PUSH
9136: LD_VAR 0 2
9140: ARRAY
9141: ST_TO_ADDR
// for j := 1 to 4 do
9142: LD_ADDR_VAR 0 3
9146: PUSH
9147: DOUBLE
9148: LD_INT 1
9150: DEC
9151: ST_TO_ADDR
9152: LD_INT 4
9154: PUSH
9155: FOR_TO
9156: IFFALSE 9201
// begin InitHC_All ( ) ;
9158: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
9162: LD_INT 0
9164: PPUSH
9165: LD_INT 1
9167: PPUSH
9168: LD_INT 4
9170: PPUSH
9171: CALL_OW 12
9175: PPUSH
9176: LD_INT 2
9178: PPUSH
9179: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: LD_VAR 0 5
9192: PUSH
9193: CALL_OW 44
9197: ADD
9198: ST_TO_ADDR
// end ;
9199: GO 9155
9201: POP
9202: POP
// end ; result := Replace ( result , i , tmp ) ;
9203: LD_ADDR_VAR 0 1
9207: PUSH
9208: LD_VAR 0 1
9212: PPUSH
9213: LD_VAR 0 2
9217: PPUSH
9218: LD_VAR 0 5
9222: PPUSH
9223: CALL_OW 1
9227: ST_TO_ADDR
// end ; end ;
9228: GO 8965
9230: POP
9231: POP
// end ;
9232: LD_VAR 0 1
9236: RET
// export function Multiplayer_Start ( ) ; begin
9237: LD_INT 0
9239: PPUSH
// Multiplayer_PrepareApemans ( ) ;
9240: CALL 7619 0 0
// Multiplayer_PreparePlayers ( ) ;
9244: CALL 7716 0 0
// Multiplayer_InitPointSystem ( ) ;
9248: CALL 10074 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9252: LD_INT 20
9254: PPUSH
9255: CALL 10258 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9259: LD_INT 150
9261: PPUSH
9262: CALL 10258 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9266: LD_INT 5
9268: PPUSH
9269: CALL 10258 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9273: LD_INT 40
9275: NEG
9276: PPUSH
9277: CALL 10258 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9281: LD_INT 200
9283: PPUSH
9284: CALL 10258 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9288: LD_INT 2
9290: PPUSH
9291: CALL 10258 0 1
// if multi_support then
9295: LD_EXP 34
9299: IFFALSE 9311
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9301: LD_ADDR_EXP 38
9305: PUSH
9306: CALL 8929 0 0
9310: ST_TO_ADDR
// if multi_sides [ your_side ] then
9311: LD_EXP 18
9315: PUSH
9316: LD_OWVAR 2
9320: ARRAY
9321: IFFALSE 9348
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9323: LD_INT 22
9325: PUSH
9326: LD_OWVAR 2
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PPUSH
9335: CALL_OW 69
9339: PUSH
9340: LD_INT 1
9342: ARRAY
9343: PPUSH
9344: CALL_OW 87
// end ;
9348: LD_VAR 0 1
9352: RET
// export function Multiplayer_End ( ) ; var i , j , s , tmp ; begin
9353: LD_INT 0
9355: PPUSH
9356: PPUSH
9357: PPUSH
9358: PPUSH
9359: PPUSH
// tmp := [ ] ;
9360: LD_ADDR_VAR 0 5
9364: PUSH
9365: EMPTY
9366: ST_TO_ADDR
// for i := 1 to 8 do
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: DOUBLE
9373: LD_INT 1
9375: DEC
9376: ST_TO_ADDR
9377: LD_INT 8
9379: PUSH
9380: FOR_TO
9381: IFFALSE 9417
// if multi_sides [ i ] then
9383: LD_EXP 18
9387: PUSH
9388: LD_VAR 0 2
9392: ARRAY
9393: IFFALSE 9415
// tmp := Join ( tmp , i ) ;
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_VAR 0 5
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL 53834 0 2
9414: ST_TO_ADDR
9415: GO 9380
9417: POP
9418: POP
// repeat wait ( 0 0$1 ) ;
9419: LD_INT 35
9421: PPUSH
9422: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9426: LD_OWVAR 1
9430: PUSH
9431: LD_EXP 39
9435: GREATER
9436: IFFALSE 9444
9438: PUSH
9439: LD_EXP 34
9443: AND
9444: IFFALSE 9636
// begin if tick mod 2 2$00 = 0 then
9446: LD_OWVAR 1
9450: PUSH
9451: LD_INT 4200
9453: MOD
9454: PUSH
9455: LD_INT 0
9457: EQUAL
9458: IFFALSE 9636
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
9460: LD_ADDR_VAR 0 5
9464: PUSH
9465: LD_VAR 0 5
9469: PPUSH
9470: LD_INT 1
9472: PPUSH
9473: LD_VAR 0 5
9477: PPUSH
9478: CALL 17902 0 1
9482: PPUSH
9483: LD_INT 1
9485: PPUSH
9486: CALL 20194 0 4
9490: ST_TO_ADDR
// for s := 1 to tmp do
9491: LD_ADDR_VAR 0 4
9495: PUSH
9496: DOUBLE
9497: LD_INT 1
9499: DEC
9500: ST_TO_ADDR
9501: LD_VAR 0 5
9505: PUSH
9506: FOR_TO
9507: IFFALSE 9634
// begin i := tmp [ s ] ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_VAR 0 5
9518: PUSH
9519: LD_VAR 0 4
9523: ARRAY
9524: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
9525: LD_EXP 18
9529: PUSH
9530: LD_VAR 0 2
9534: ARRAY
9535: IFFALSE 9550
9537: PUSH
9538: LD_EXP 36
9542: PUSH
9543: LD_VAR 0 2
9547: ARRAY
9548: NOT
9549: AND
9550: IFFALSE 9564
9552: PUSH
9553: LD_EXP 38
9557: PUSH
9558: LD_VAR 0 2
9562: ARRAY
9563: AND
9564: IFFALSE 9632
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9566: LD_EXP 38
9570: PUSH
9571: LD_VAR 0 2
9575: ARRAY
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: PPUSH
9581: LD_INT 11
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9591: LD_ADDR_EXP 38
9595: PUSH
9596: LD_EXP 38
9600: PPUSH
9601: LD_VAR 0 2
9605: PPUSH
9606: LD_EXP 38
9610: PUSH
9611: LD_VAR 0 2
9615: ARRAY
9616: PPUSH
9617: LD_INT 1
9619: PPUSH
9620: CALL_OW 3
9624: PPUSH
9625: CALL_OW 1
9629: ST_TO_ADDR
// break ;
9630: GO 9634
// end ; end ;
9632: GO 9506
9634: POP
9635: POP
// end ; end ; if not multi_custom_commanders then
9636: LD_EXP 27
9640: NOT
9641: IFFALSE 9756
// begin for i := 1 to 8 do
9643: LD_ADDR_VAR 0 2
9647: PUSH
9648: DOUBLE
9649: LD_INT 1
9651: DEC
9652: ST_TO_ADDR
9653: LD_INT 8
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9730
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9659: LD_INT 22
9661: PUSH
9662: LD_VAR 0 2
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PPUSH
9671: CALL_OW 69
9675: PUSH
9676: LD_INT 0
9678: EQUAL
9679: IFFALSE 9694
9681: PUSH
9682: LD_EXP 36
9686: PUSH
9687: LD_VAR 0 2
9691: ARRAY
9692: NOT
9693: AND
9694: IFFALSE 9728
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9696: LD_ADDR_EXP 36
9700: PUSH
9701: LD_EXP 36
9705: PPUSH
9706: LD_VAR 0 2
9710: PPUSH
9711: LD_INT 1
9713: PPUSH
9714: CALL_OW 1
9718: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9719: LD_VAR 0 2
9723: PPUSH
9724: CALL 10328 0 1
// end ; end ;
9728: GO 9656
9730: POP
9731: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9732: LD_EXP 36
9736: PPUSH
9737: CALL 17902 0 1
9741: PUSH
9742: LD_EXP 18
9746: PPUSH
9747: CALL 17902 0 1
9751: EQUAL
9752: IFFALSE 9756
// break ;
9754: GO 9780
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9756: CALL 9894 0 0
9760: NOT
9761: IFFALSE 9769
9763: PUSH
9764: LD_EXP 2
9768: AND
9769: IFTRUE 9778
9771: PUSH
9772: LD_EXP 35
9776: NOT
9777: OR
9778: IFFALSE 9419
// game := false ;
9780: LD_ADDR_EXP 2
9784: PUSH
9785: LD_INT 0
9787: ST_TO_ADDR
// for i := 1 to 8 do
9788: LD_ADDR_VAR 0 2
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_INT 8
9800: PUSH
9801: FOR_TO
9802: IFFALSE 9838
// begin if multi_sides [ i ] then
9804: LD_EXP 18
9808: PUSH
9809: LD_VAR 0 2
9813: ARRAY
9814: IFFALSE 9836
// SetMultiScore ( i , multi_points [ i ] ) ;
9816: LD_VAR 0 2
9820: PPUSH
9821: LD_EXP 43
9825: PUSH
9826: LD_VAR 0 2
9830: ARRAY
9831: PPUSH
9832: CALL_OW 506
// end ;
9836: GO 9801
9838: POP
9839: POP
// if multi_loosers [ your_side ] then
9840: LD_EXP 36
9844: PUSH
9845: LD_OWVAR 2
9849: ARRAY
9850: IFFALSE 9873
// begin if Multiplayer then
9852: LD_OWVAR 4
9856: IFFALSE 9864
// YouLostInMultiplayer else
9858: CALL_OW 107
9862: GO 9871
// YouLost (  ) ;
9864: LD_STRING 
9866: PPUSH
9867: CALL_OW 104
// end else
9871: GO 9889
// begin if Multiplayer then
9873: LD_OWVAR 4
9877: IFFALSE 9885
// YouWinInMultiplayer else
9879: CALL_OW 106
9883: GO 9889
// YouWin ;
9885: CALL_OW 103
// end ; end ;
9889: LD_VAR 0 1
9893: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
// result := false ;
9898: LD_ADDR_VAR 0 1
9902: PUSH
9903: LD_INT 0
9905: ST_TO_ADDR
// for side in botSides do
9906: LD_ADDR_VAR 0 2
9910: PUSH
9911: LD_EXP 3
9915: PUSH
9916: FOR_IN
9917: IFFALSE 9978
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9919: LD_ADDR_VAR 0 1
9923: PUSH
9924: LD_INT 22
9926: PUSH
9927: LD_VAR 0 2
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 21
9938: PUSH
9939: LD_INT 1
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 50
9948: PUSH
9949: EMPTY
9950: LIST
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: PPUSH
9957: CALL_OW 69
9961: PUSH
9962: LD_INT 0
9964: GREATER
9965: ST_TO_ADDR
// if result then
9966: LD_VAR 0 1
9970: IFFALSE 9976
// exit ;
9972: POP
9973: POP
9974: GO 9980
// end ;
9976: GO 9916
9978: POP
9979: POP
// end ;
9980: LD_VAR 0 1
9984: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9985: LD_INT 0
9987: PPUSH
9988: PPUSH
// result := [ ] ;
9989: LD_ADDR_VAR 0 1
9993: PUSH
9994: EMPTY
9995: ST_TO_ADDR
// for i := 1 to 8 do
9996: LD_ADDR_VAR 0 2
10000: PUSH
10001: DOUBLE
10002: LD_INT 1
10004: DEC
10005: ST_TO_ADDR
10006: LD_INT 8
10008: PUSH
10009: FOR_TO
10010: IFFALSE 10067
// begin if multi_sides [ i ] then
10012: LD_EXP 18
10016: PUSH
10017: LD_VAR 0 2
10021: ARRAY
10022: IFFALSE 10065
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
10024: LD_ADDR_VAR 0 1
10028: PUSH
10029: LD_VAR 0 1
10033: PUSH
10034: LD_STRING #coop-points
10036: PUSH
10037: LD_VAR 0 2
10041: PUSH
10042: LD_VAR 0 2
10046: PUSH
10047: LD_EXP 43
10051: PUSH
10052: LD_VAR 0 2
10056: ARRAY
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: ADD
10064: ST_TO_ADDR
// end ; end ;
10065: GO 10009
10067: POP
10068: POP
// end ;
10069: LD_VAR 0 1
10073: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
10074: LD_INT 0
10076: PPUSH
10077: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10078: LD_ADDR_EXP 43
10082: PUSH
10083: LD_INT 0
10085: PUSH
10086: LD_INT 0
10088: PUSH
10089: LD_INT 0
10091: PUSH
10092: LD_INT 0
10094: PUSH
10095: LD_INT 0
10097: PUSH
10098: LD_INT 0
10100: PUSH
10101: LD_INT 0
10103: PUSH
10104: LD_INT 0
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: ST_TO_ADDR
// multi_points_conditions := [ ] ;
10117: LD_ADDR_EXP 44
10121: PUSH
10122: EMPTY
10123: ST_TO_ADDR
// end ;
10124: LD_VAR 0 1
10128: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
10129: LD_INT 0
10131: PPUSH
// if not multi_points or not side or side > 8 then
10132: LD_EXP 43
10136: NOT
10137: IFTRUE 10146
10139: PUSH
10140: LD_VAR 0 1
10144: NOT
10145: OR
10146: IFTRUE 10158
10148: PUSH
10149: LD_VAR 0 1
10153: PUSH
10154: LD_INT 8
10156: GREATER
10157: OR
10158: IFFALSE 10162
// exit ;
10160: GO 10199
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
10162: LD_ADDR_EXP 43
10166: PUSH
10167: LD_EXP 43
10171: PPUSH
10172: LD_VAR 0 1
10176: PPUSH
10177: LD_EXP 43
10181: PUSH
10182: LD_VAR 0 1
10186: ARRAY
10187: PUSH
10188: LD_VAR 0 2
10192: PLUS
10193: PPUSH
10194: CALL_OW 1
10198: ST_TO_ADDR
// end ;
10199: LD_VAR 0 3
10203: RET
// export function Multiplayer_GetPoints ( side ) ; begin
10204: LD_INT 0
10206: PPUSH
// if not multi_points or not side or side > 8 then
10207: LD_EXP 43
10211: NOT
10212: IFTRUE 10221
10214: PUSH
10215: LD_VAR 0 1
10219: NOT
10220: OR
10221: IFTRUE 10233
10223: PUSH
10224: LD_VAR 0 1
10228: PUSH
10229: LD_INT 8
10231: GREATER
10232: OR
10233: IFFALSE 10237
// exit ;
10235: GO 10253
// result := multi_points [ side ] ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_EXP 43
10246: PUSH
10247: LD_VAR 0 1
10251: ARRAY
10252: ST_TO_ADDR
// end ;
10253: LD_VAR 0 2
10257: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
10258: LD_INT 0
10260: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
10261: LD_ADDR_EXP 44
10265: PUSH
10266: LD_EXP 44
10270: PPUSH
10271: LD_EXP 44
10275: PUSH
10276: LD_INT 1
10278: PLUS
10279: PPUSH
10280: LD_VAR 0 1
10284: PPUSH
10285: CALL_OW 1
10289: ST_TO_ADDR
// end ;
10290: LD_VAR 0 2
10294: RET
// export function Multiplayer_GetCondition ( id ) ; begin
10295: LD_INT 0
10297: PPUSH
// if not id then
10298: LD_VAR 0 1
10302: NOT
10303: IFFALSE 10307
// exit ;
10305: GO 10323
// result := multi_points_conditions [ id ] ;
10307: LD_ADDR_VAR 0 2
10311: PUSH
10312: LD_EXP 44
10316: PUSH
10317: LD_VAR 0 1
10321: ARRAY
10322: ST_TO_ADDR
// end ;
10323: LD_VAR 0 2
10327: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
10328: LD_INT 0
10330: PPUSH
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
// players := [ ] ;
10335: LD_ADDR_VAR 0 3
10339: PUSH
10340: EMPTY
10341: ST_TO_ADDR
// for i = 1 to 8 do
10342: LD_ADDR_VAR 0 4
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 8
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10417
// begin if i = side then
10358: LD_VAR 0 4
10362: PUSH
10363: LD_VAR 0 1
10367: EQUAL
10368: IFFALSE 10372
// continue ;
10370: GO 10355
// if multi_sides [ i ] and not multi_loosers [ i ] then
10372: LD_EXP 18
10376: PUSH
10377: LD_VAR 0 4
10381: ARRAY
10382: IFFALSE 10397
10384: PUSH
10385: LD_EXP 36
10389: PUSH
10390: LD_VAR 0 4
10394: ARRAY
10395: NOT
10396: AND
10397: IFFALSE 10415
// players := players ^ i ;
10399: LD_ADDR_VAR 0 3
10403: PUSH
10404: LD_VAR 0 3
10408: PUSH
10409: LD_VAR 0 4
10413: ADD
10414: ST_TO_ADDR
// end ;
10415: GO 10355
10417: POP
10418: POP
// if not players then
10419: LD_VAR 0 3
10423: NOT
10424: IFFALSE 10428
// exit ;
10426: GO 10695
// if players = 1 then
10428: LD_VAR 0 3
10432: PUSH
10433: LD_INT 1
10435: EQUAL
10436: IFFALSE 10497
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10438: LD_ADDR_VAR 0 4
10442: PUSH
10443: LD_INT 22
10445: PUSH
10446: LD_VAR 0 1
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 51
10457: PUSH
10458: EMPTY
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: PUSH
10470: FOR_IN
10471: IFFALSE 10493
// SetSide ( i , players [ 1 ] ) ;
10473: LD_VAR 0 4
10477: PPUSH
10478: LD_VAR 0 3
10482: PUSH
10483: LD_INT 1
10485: ARRAY
10486: PPUSH
10487: CALL_OW 235
10491: GO 10470
10493: POP
10494: POP
// end else
10495: GO 10695
// begin j := 1 ;
10497: LD_ADDR_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10505: LD_ADDR_VAR 0 4
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_VAR 0 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 51
10537: PUSH
10538: EMPTY
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 21
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PPUSH
10564: CALL_OW 69
10568: PUSH
10569: FOR_IN
10570: IFFALSE 10693
// begin SetSide ( i , players [ j ] ) ;
10572: LD_VAR 0 4
10576: PPUSH
10577: LD_VAR 0 3
10581: PUSH
10582: LD_VAR 0 5
10586: ARRAY
10587: PPUSH
10588: CALL_OW 235
// if IsDrivenBy ( i ) then
10592: LD_VAR 0 4
10596: PPUSH
10597: CALL_OW 311
10601: IFFALSE 10628
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10603: LD_VAR 0 4
10607: PPUSH
10608: CALL_OW 311
10612: PPUSH
10613: LD_VAR 0 3
10617: PUSH
10618: LD_VAR 0 5
10622: ARRAY
10623: PPUSH
10624: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10628: LD_VAR 0 4
10632: PPUSH
10633: CALL_OW 310
10637: PPUSH
10638: CALL_OW 247
10642: PUSH
10643: LD_INT 3
10645: EQUAL
10646: IFFALSE 10657
// ComExitBuilding ( i ) ;
10648: LD_VAR 0 4
10652: PPUSH
10653: CALL_OW 122
// j := j + 1 ;
10657: LD_ADDR_VAR 0 5
10661: PUSH
10662: LD_VAR 0 5
10666: PUSH
10667: LD_INT 1
10669: PLUS
10670: ST_TO_ADDR
// if j > players then
10671: LD_VAR 0 5
10675: PUSH
10676: LD_VAR 0 3
10680: GREATER
10681: IFFALSE 10691
// j := 1 ;
10683: LD_ADDR_VAR 0 5
10687: PUSH
10688: LD_INT 1
10690: ST_TO_ADDR
// end ;
10691: GO 10569
10693: POP
10694: POP
// end ; end ;
10695: LD_VAR 0 2
10699: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10700: LD_INT 0
10702: PPUSH
10703: PPUSH
10704: PPUSH
// i := 3 ;
10705: LD_ADDR_VAR 0 2
10709: PUSH
10710: LD_INT 3
10712: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10713: LD_ADDR_VAR 0 3
10717: PUSH
10718: LD_INT 5
10720: PUSH
10721: LD_INT 10
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 120
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 101
10740: PUSH
10741: LD_INT 8
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 27
10750: PUSH
10751: LD_INT 4
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10764: LD_INT 4
10766: PPUSH
10767: LD_INT 5
10769: PPUSH
10770: LD_VAR 0 3
10774: PUSH
10775: LD_VAR 0 2
10779: ARRAY
10780: PUSH
10781: LD_INT 1
10783: ARRAY
10784: PPUSH
10785: LD_VAR 0 3
10789: PUSH
10790: LD_VAR 0 2
10794: ARRAY
10795: PUSH
10796: LD_INT 2
10798: ARRAY
10799: PPUSH
10800: LD_INT 0
10802: PPUSH
10803: CALL_OW 58
// end ;
10807: LD_VAR 0 1
10811: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10812: LD_INT 0
10814: PPUSH
// if not side or side > 8 then
10815: LD_VAR 0 1
10819: NOT
10820: IFTRUE 10832
10822: PUSH
10823: LD_VAR 0 1
10827: PUSH
10828: LD_INT 8
10830: GREATER
10831: OR
10832: IFFALSE 10836
// exit ;
10834: GO 10853
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10836: LD_VAR 0 1
10840: PPUSH
10841: LD_INT 6
10843: PPUSH
10844: CALL 10295 0 1
10848: PPUSH
10849: CALL 10129 0 2
// end ;
10853: LD_VAR 0 2
10857: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10858: LD_INT 0
10860: PPUSH
// if not side or side > 8 then
10861: LD_VAR 0 1
10865: NOT
10866: IFTRUE 10878
10868: PUSH
10869: LD_VAR 0 1
10873: PUSH
10874: LD_INT 8
10876: GREATER
10877: OR
10878: IFFALSE 10882
// exit ;
10880: GO 10899
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 4
10889: PPUSH
10890: CALL 10295 0 1
10894: PPUSH
10895: CALL 10129 0 2
// end ;
10899: LD_VAR 0 2
10903: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10904: LD_INT 0
10906: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10907: LD_VAR 0 1
10911: NOT
10912: IFTRUE 10924
10914: PUSH
10915: LD_VAR 0 1
10919: PUSH
10920: LD_INT 8
10922: GREATER
10923: OR
10924: IFTRUE 10952
10926: PUSH
10927: LD_VAR 0 2
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: LD_INT 6
10937: PUSH
10938: LD_INT 36
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: IN
10950: NOT
10951: OR
10952: IFFALSE 10956
// exit ;
10954: GO 10973
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10956: LD_VAR 0 1
10960: PPUSH
10961: LD_INT 3
10963: PPUSH
10964: CALL 10295 0 1
10968: PPUSH
10969: CALL 10129 0 2
// end ;
10973: LD_VAR 0 3
10977: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10978: LD_INT 0
10980: PPUSH
10981: PPUSH
// if not un then
10982: LD_VAR 0 1
10986: NOT
10987: IFFALSE 10991
// exit ;
10989: GO 11037
// if not points then
10991: LD_VAR 0 3
10995: NOT
10996: IFFALSE 11013
// gained_points := Multiplayer_GetCondition ( 1 ) else
10998: LD_ADDR_VAR 0 5
11002: PUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL 10295 0 1
11010: ST_TO_ADDR
11011: GO 11023
// gained_points := points ;
11013: LD_ADDR_VAR 0 5
11017: PUSH
11018: LD_VAR 0 3
11022: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
11023: LD_VAR 0 2
11027: PPUSH
11028: LD_VAR 0 5
11032: PPUSH
11033: CALL 10129 0 2
11037: LD_VAR 0 4
11041: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
11042: LD_INT 0
11044: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_INT 2
11052: PPUSH
11053: CALL 10295 0 1
11057: PPUSH
11058: CALL 10129 0 2
// end ; end_of_file
11062: LD_VAR 0 2
11066: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 255
11076: PUSH
11077: LD_EXP 3
11081: IN
11082: NOT
11083: IFFALSE 11087
// exit ;
11085: GO 11104
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
11087: LD_VAR 0 1
11091: PPUSH
11092: LD_VAR 0 2
11096: PPUSH
11097: LD_INT 0
11099: PPUSH
11100: CALL 10978 0 3
// end ;
11104: PPOPN 3
11106: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
11114: PPUSH
11115: PPUSH
11116: PPUSH
11117: PPUSH
11118: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL 59188 0 1
// side := GetSide ( un ) ;
11128: LD_ADDR_VAR 0 3
11132: PUSH
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 255
11142: ST_TO_ADDR
// if multi_sides [ side ] then
11143: LD_EXP 18
11147: PUSH
11148: LD_VAR 0 3
11152: ARRAY
11153: IFFALSE 11179
// if GetType ( un ) = unit_human then
11155: LD_VAR 0 1
11159: PPUSH
11160: CALL_OW 247
11164: PUSH
11165: LD_INT 1
11167: EQUAL
11168: IFFALSE 11179
// MultiplayerEvent_HumanLost ( side ) ;
11170: LD_VAR 0 3
11174: PPUSH
11175: CALL 10858 0 1
// if side in botSides then
11179: LD_VAR 0 3
11183: PUSH
11184: LD_EXP 3
11188: IN
11189: IFFALSE 11700
// begin if side = botSides [ 1 ] then
11191: LD_VAR 0 3
11195: PUSH
11196: LD_EXP 3
11200: PUSH
11201: LD_INT 1
11203: ARRAY
11204: EQUAL
11205: IFFALSE 11700
// begin if un in arForce then
11207: LD_VAR 0 1
11211: PUSH
11212: LD_EXP 14
11216: IN
11217: IFFALSE 11235
// arForce := arForce diff un ;
11219: LD_ADDR_EXP 14
11223: PUSH
11224: LD_EXP 14
11228: PUSH
11229: LD_VAR 0 1
11233: DIFF
11234: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
11235: LD_VAR 0 1
11239: PUSH
11240: LD_EXP 8
11244: IN
11245: IFTRUE 11259
11247: PUSH
11248: LD_VAR 0 1
11252: PUSH
11253: LD_EXP 9
11257: IN
11258: OR
11259: IFFALSE 11353
// begin arVehicles := arVehicles diff un ;
11261: LD_ADDR_EXP 8
11265: PUSH
11266: LD_EXP 8
11270: PUSH
11271: LD_VAR 0 1
11275: DIFF
11276: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
11277: LD_ADDR_EXP 9
11281: PUSH
11282: LD_EXP 9
11286: PUSH
11287: LD_VAR 0 1
11291: DIFF
11292: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
11293: LD_ADDR_EXP 6
11297: PUSH
11298: LD_EXP 6
11302: PUSH
11303: LD_VAR 0 1
11307: PPUSH
11308: CALL_OW 265
11312: PUSH
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 262
11322: PUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 263
11332: PUSH
11333: LD_VAR 0 1
11337: PPUSH
11338: CALL_OW 264
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: ADD
11352: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
11353: LD_VAR 0 1
11357: PPUSH
11358: CALL_OW 257
11362: PUSH
11363: LD_INT 3
11365: EQUAL
11366: IFFALSE 11383
11368: PUSH
11369: LD_VAR 0 1
11373: PPUSH
11374: CALL_OW 110
11378: PUSH
11379: LD_INT 999
11381: LESS
11382: AND
11383: IFFALSE 11391
11385: PUSH
11386: LD_EXP 11
11390: AND
11391: IFFALSE 11532
// begin if not IsOk ( arDep ) then
11393: LD_INT 2
11395: PPUSH
11396: CALL_OW 302
11400: NOT
11401: IFFALSE 11405
// exit ;
11403: GO 11805
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11405: LD_ADDR_EXP 11
11409: PUSH
11410: LD_EXP 11
11414: PPUSH
11415: CALL 55229 0 1
11419: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11420: LD_ADDR_OWVAR 20
11424: PUSH
11425: LD_EXP 3
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: ST_TO_ADDR
// uc_nation := nation_arabian ;
11434: LD_ADDR_OWVAR 21
11438: PUSH
11439: LD_INT 2
11441: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 6 , 9 ] [ Difficulty ] ) ;
11442: LD_INT 0
11444: PPUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 6
11450: PUSH
11451: LD_INT 9
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: LD_OWVAR 67
11463: ARRAY
11464: PPUSH
11465: CALL_OW 383
// un := CreateHuman ;
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: CALL_OW 44
11478: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11479: LD_VAR 0 1
11483: PPUSH
11484: LD_INT 143
11486: PPUSH
11487: LD_INT 29
11489: PPUSH
11490: LD_INT 0
11492: PPUSH
11493: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_INT 115
11504: PPUSH
11505: LD_INT 52
11507: PPUSH
11508: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11512: LD_ADDR_EXP 14
11516: PUSH
11517: LD_EXP 14
11521: PPUSH
11522: LD_VAR 0 1
11526: PPUSH
11527: CALL 53834 0 2
11531: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11532: LD_VAR 0 1
11536: PPUSH
11537: CALL_OW 247
11541: PUSH
11542: LD_INT 3
11544: EQUAL
11545: IFFALSE 11700
// begin btype := GetBType ( un ) ;
11547: LD_ADDR_VAR 0 11
11551: PUSH
11552: LD_VAR 0 1
11556: PPUSH
11557: CALL_OW 266
11561: ST_TO_ADDR
// if btype = b_breastwork then
11562: LD_VAR 0 11
11566: PUSH
11567: LD_INT 31
11569: EQUAL
11570: IFFALSE 11574
// exit ;
11572: GO 11805
// if btype = b_barracks then
11574: LD_VAR 0 11
11578: PUSH
11579: LD_INT 5
11581: EQUAL
11582: IFFALSE 11592
// btype := b_armoury ;
11584: LD_ADDR_VAR 0 11
11588: PUSH
11589: LD_INT 4
11591: ST_TO_ADDR
// if btype = b_factory then
11592: LD_VAR 0 11
11596: PUSH
11597: LD_INT 3
11599: EQUAL
11600: IFFALSE 11610
// btype := b_workshop ;
11602: LD_ADDR_VAR 0 11
11606: PUSH
11607: LD_INT 2
11609: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11610: LD_VAR 0 11
11614: PUSH
11615: LD_INT 8
11617: PUSH
11618: LD_INT 7
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: IN
11625: IFFALSE 11635
// btype := b_lab ;
11627: LD_ADDR_VAR 0 11
11631: PUSH
11632: LD_INT 6
11634: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11635: LD_ADDR_EXP 7
11639: PUSH
11640: LD_EXP 7
11644: PPUSH
11645: LD_EXP 7
11649: PUSH
11650: LD_INT 1
11652: PLUS
11653: PPUSH
11654: LD_VAR 0 11
11658: PUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: CALL_OW 250
11668: PUSH
11669: LD_VAR 0 1
11673: PPUSH
11674: CALL_OW 251
11678: PUSH
11679: LD_VAR 0 1
11683: PPUSH
11684: CALL_OW 254
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PPUSH
11695: CALL_OW 1
11699: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
11700: LD_EXP 35
11704: IFFALSE 11712
11706: PUSH
11707: LD_EXP 27
11711: AND
11712: IFFALSE 11727
11714: PUSH
11715: LD_EXP 36
11719: PUSH
11720: LD_VAR 0 3
11724: ARRAY
11725: NOT
11726: AND
11727: IFFALSE 11805
// if un in multi_commanders then
11729: LD_VAR 0 1
11733: PUSH
11734: LD_EXP 35
11738: IN
11739: IFFALSE 11805
// begin if side = your_side then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_OWVAR 2
11750: EQUAL
11751: IFFALSE 11757
// Multiplayer_Loose_Message ;
11753: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11757: LD_ADDR_EXP 36
11761: PUSH
11762: LD_EXP 36
11766: PPUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: CALL_OW 1
11779: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11780: LD_ADDR_EXP 35
11784: PUSH
11785: LD_EXP 35
11789: PUSH
11790: LD_VAR 0 1
11794: DIFF
11795: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11796: LD_VAR 0 3
11800: PPUSH
11801: CALL 10328 0 1
// end ; end ;
11805: PPOPN 11
11807: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11808: LD_INT 0
11810: PPUSH
11811: PPUSH
11812: PPUSH
11813: PPUSH
// begin side := GetSide ( building ) ;
11814: LD_ADDR_VAR 0 4
11818: PUSH
11819: LD_VAR 0 1
11823: PPUSH
11824: CALL_OW 255
11828: ST_TO_ADDR
// if multi_sides [ side ] then
11829: LD_EXP 18
11833: PUSH
11834: LD_VAR 0 4
11838: ARRAY
11839: IFFALSE 11860
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11841: LD_VAR 0 4
11845: PPUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 266
11855: PPUSH
11856: CALL 10904 0 2
// if side = botSides [ 1 ] then
11860: LD_VAR 0 4
11864: PUSH
11865: LD_EXP 3
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: EQUAL
11874: IFFALSE 11970
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11876: LD_ADDR_EXP 7
11880: PUSH
11881: LD_EXP 7
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 3
11893: ST_TO_ADDR
// btype := GetBType ( building ) ;
11894: LD_ADDR_VAR 0 5
11898: PUSH
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 266
11908: ST_TO_ADDR
// case btype of b_workshop :
11909: LD_VAR 0 5
11913: PUSH
11914: LD_INT 2
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 11934
11922: POP
// ComUpgrade ( building ) ; b_lab :
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 146
11932: GO 11970
11934: LD_INT 6
11936: DOUBLE
11937: EQUAL
11938: IFTRUE 11942
11940: GO 11969
11942: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11943: LD_VAR 0 1
11947: PPUSH
11948: LD_INT 10
11950: PPUSH
11951: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_INT 15
11962: PPUSH
11963: CALL_OW 207
// end ; end ;
11967: GO 11970
11969: POP
// end ; end ;
11970: PPOPN 5
11972: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11973: LD_VAR 0 1
11977: PUSH
11978: LD_INT 22
11980: PUSH
11981: LD_EXP 3
11985: PUSH
11986: LD_INT 1
11988: ARRAY
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 33
11996: PUSH
11997: LD_INT 2
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PPUSH
12008: CALL_OW 69
12012: IN
12013: IFFALSE 12024
// ComUnlink ( un ) ;
12015: LD_VAR 0 1
12019: PPUSH
12020: CALL_OW 136
// end ;
12024: PPOPN 1
12026: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
12027: LD_VAR 0 2
12031: PPUSH
12032: CALL_OW 255
12036: PUSH
12037: LD_EXP 3
12041: IN
12042: NOT
12043: IFFALSE 12047
// exit ;
12045: GO 12110
// if unit in arForceTmp then
12047: LD_VAR 0 2
12051: PUSH
12052: LD_EXP 15
12056: IN
12057: IFFALSE 12110
// begin arForceTmp := arForceTmp diff unit ;
12059: LD_ADDR_EXP 15
12063: PUSH
12064: LD_EXP 15
12068: PUSH
12069: LD_VAR 0 2
12073: DIFF
12074: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
12075: LD_ADDR_EXP 14
12079: PUSH
12080: LD_EXP 14
12084: PPUSH
12085: LD_VAR 0 2
12089: PPUSH
12090: CALL 53834 0 2
12094: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
12095: LD_VAR 0 2
12099: PPUSH
12100: LD_INT 103
12102: PPUSH
12103: LD_INT 54
12105: PPUSH
12106: CALL_OW 111
// end ; end ;
12110: PPOPN 2
12112: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
12113: LD_INT 0
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
12121: LD_VAR 0 1
12125: PPUSH
12126: LD_VAR 0 2
12130: PPUSH
12131: CALL 59246 0 2
// side := GetSide ( vehicle ) ;
12135: LD_ADDR_VAR 0 4
12139: PUSH
12140: LD_VAR 0 1
12144: PPUSH
12145: CALL_OW 255
12149: ST_TO_ADDR
// if multi_sides [ side ] then
12150: LD_EXP 18
12154: PUSH
12155: LD_VAR 0 4
12159: ARRAY
12160: IFFALSE 12171
// MultiplayerEvent_Produced ( side ) ;
12162: LD_VAR 0 4
12166: PPUSH
12167: CALL 10812 0 1
// if side = botSides [ 1 ] then
12171: LD_VAR 0 4
12175: PUSH
12176: LD_EXP 3
12180: PUSH
12181: LD_INT 1
12183: ARRAY
12184: EQUAL
12185: IFFALSE 12385
// begin driver := IsDrivenBy ( vehicle ) ;
12187: LD_ADDR_VAR 0 8
12191: PUSH
12192: LD_VAR 0 1
12196: PPUSH
12197: CALL_OW 311
12201: ST_TO_ADDR
// if driver then
12202: LD_VAR 0 8
12206: IFFALSE 12240
// begin SetTag ( driver , tMech ) ;
12208: LD_VAR 0 8
12212: PPUSH
12213: LD_INT 7
12215: PPUSH
12216: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
12220: LD_ADDR_EXP 10
12224: PUSH
12225: LD_EXP 10
12229: PPUSH
12230: LD_VAR 0 8
12234: PPUSH
12235: CALL 53834 0 2
12239: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12240: LD_VAR 0 1
12244: PPUSH
12245: CALL_OW 263
12249: PUSH
12250: LD_INT 2
12252: EQUAL
12253: IFFALSE 12278
12255: PUSH
12256: LD_VAR 0 1
12260: PPUSH
12261: CALL_OW 264
12265: PUSH
12266: LD_INT 32
12268: PUSH
12269: LD_INT 88
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: IN
12276: NOT
12277: AND
12278: IFFALSE 12302
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
12280: LD_ADDR_EXP 16
12284: PUSH
12285: LD_EXP 16
12289: PPUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL 53834 0 2
12299: ST_TO_ADDR
// exit ;
12300: GO 12385
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
12302: LD_EXP 12
12306: PUSH
12307: LD_EXP 8
12311: PPUSH
12312: CALL 17902 0 1
12316: GREATER
12317: IFTRUE 12341
12319: PUSH
12320: LD_VAR 0 1
12324: PPUSH
12325: CALL_OW 264
12329: PUSH
12330: LD_INT 32
12332: PUSH
12333: LD_INT 88
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: IN
12340: OR
12341: IFFALSE 12365
// arVehicles := Join ( arVehicles , vehicle ) else
12343: LD_ADDR_EXP 8
12347: PUSH
12348: LD_EXP 8
12352: PPUSH
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL 53834 0 2
12362: ST_TO_ADDR
12363: GO 12385
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
12365: LD_ADDR_EXP 9
12369: PUSH
12370: LD_EXP 9
12374: PPUSH
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL 53834 0 2
12384: ST_TO_ADDR
// end ; end ;
12385: PPOPN 8
12387: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 110
12397: PUSH
12398: LD_INT 7
12400: EQUAL
12401: IFFALSE 12415
// SetTag ( driver , 0 ) ;
12403: LD_VAR 0 1
12407: PPUSH
12408: LD_INT 0
12410: PPUSH
12411: CALL_OW 109
// end ;
12415: PPOPN 4
12417: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12418: LD_VAR 0 2
12422: PPUSH
12423: CALL_OW 255
12427: PUSH
12428: LD_EXP 3
12432: PUSH
12433: LD_INT 1
12435: ARRAY
12436: EQUAL
12437: IFFALSE 12467
// if tech in arTech then
12439: LD_VAR 0 1
12443: PUSH
12444: LD_EXP 5
12448: IN
12449: IFFALSE 12467
// arTech := arTech diff tech ;
12451: LD_ADDR_EXP 5
12455: PUSH
12456: LD_EXP 5
12460: PUSH
12461: LD_VAR 0 1
12465: DIFF
12466: ST_TO_ADDR
// end ;
12467: PPOPN 2
12469: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
12470: LD_VAR 0 1
12474: PPUSH
12475: CALL 59205 0 1
// end ; end_of_file
12479: PPOPN 1
12481: END
// every 20 20$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12482: LD_INT 2
12484: PPUSH
12485: CALL_OW 302
12489: IFFALSE 12510
12491: PUSH
12492: LD_INT 2
12494: PPUSH
12495: CALL_OW 255
12499: PUSH
12500: LD_EXP 3
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: EQUAL
12509: AND
12510: IFFALSE 12547
12512: GO 12514
12514: DISABLE
// begin wait ( 5 5$00 - ( 2 2$00 * Difficulty ) ) ;
12515: LD_INT 10500
12517: PUSH
12518: LD_INT 4200
12520: PUSH
12521: LD_OWVAR 67
12525: MUL
12526: MINUS
12527: PPUSH
12528: CALL_OW 67
// activeArabAttacks := true ;
12532: LD_ADDR_EXP 4
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12540: LD_INT 0
12542: PPUSH
12543: CALL 12774 0 1
// end ;
12547: END
// every 40 40$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12548: LD_INT 2
12550: PPUSH
12551: CALL_OW 302
12555: IFFALSE 12576
12557: PUSH
12558: LD_INT 2
12560: PPUSH
12561: CALL_OW 255
12565: PUSH
12566: LD_EXP 3
12570: PUSH
12571: LD_INT 1
12573: ARRAY
12574: EQUAL
12575: AND
12576: IFFALSE 12590
12578: GO 12580
12580: DISABLE
// ArabAttack ( Difficulty ) ;
12581: LD_OWVAR 67
12585: PPUSH
12586: CALL 12774 0 1
12590: END
// every 65 65$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12591: LD_INT 2
12593: PPUSH
12594: CALL_OW 302
12598: IFFALSE 12619
12600: PUSH
12601: LD_INT 2
12603: PPUSH
12604: CALL_OW 255
12608: PUSH
12609: LD_EXP 3
12613: PUSH
12614: LD_INT 1
12616: ARRAY
12617: EQUAL
12618: AND
12619: IFFALSE 12637
12621: GO 12623
12623: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12624: LD_OWVAR 67
12628: PUSH
12629: LD_INT 1
12631: PLUS
12632: PPUSH
12633: CALL 12774 0 1
12637: END
// every 85 85$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 302
12645: IFFALSE 12666
12647: PUSH
12648: LD_INT 2
12650: PPUSH
12651: CALL_OW 255
12655: PUSH
12656: LD_EXP 3
12660: PUSH
12661: LD_INT 1
12663: ARRAY
12664: EQUAL
12665: AND
12666: IFFALSE 12684
12668: GO 12670
12670: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12671: LD_OWVAR 67
12675: PUSH
12676: LD_INT 2
12678: PLUS
12679: PPUSH
12680: CALL 12774 0 1
12684: END
// every 115 115$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12685: LD_INT 2
12687: PPUSH
12688: CALL_OW 302
12692: IFFALSE 12713
12694: PUSH
12695: LD_INT 2
12697: PPUSH
12698: CALL_OW 255
12702: PUSH
12703: LD_EXP 3
12707: PUSH
12708: LD_INT 1
12710: ARRAY
12711: EQUAL
12712: AND
12713: IFFALSE 12731
12715: GO 12717
12717: DISABLE
// ArabAttack ( Difficulty + 3 ) ;
12718: LD_OWVAR 67
12722: PUSH
12723: LD_INT 3
12725: PLUS
12726: PPUSH
12727: CALL 12774 0 1
12731: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12732: LD_INT 2
12734: PPUSH
12735: LD_INT 81
12737: PUSH
12738: LD_EXP 3
12742: PUSH
12743: LD_INT 1
12745: ARRAY
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PPUSH
12751: CALL_OW 70
12755: IFFALSE 12773
12757: GO 12759
12759: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12760: LD_OWVAR 67
12764: PUSH
12765: LD_INT 2
12767: PLUS
12768: PPUSH
12769: CALL 12774 0 1
12773: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
12781: PPUSH
12782: PPUSH
// uc_side := botSides [ 1 ] ;
12783: LD_ADDR_OWVAR 20
12787: PUSH
12788: LD_EXP 3
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: ST_TO_ADDR
// uc_nation := nation_arabian ;
12797: LD_ADDR_OWVAR 21
12801: PUSH
12802: LD_INT 2
12804: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12805: LD_ADDR_VAR 0 4
12809: PUSH
12810: LD_INT 3
12812: PUSH
12813: LD_INT 5
12815: PUSH
12816: LD_INT 7
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: PUSH
12824: LD_OWVAR 67
12828: ARRAY
12829: ST_TO_ADDR
// arAttackersInf := [ ] ;
12830: LD_ADDR_EXP 45
12834: PUSH
12835: EMPTY
12836: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12837: LD_ADDR_EXP 46
12841: PUSH
12842: EMPTY
12843: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12844: LD_ADDR_VAR 0 7
12848: PUSH
12849: LD_INT 48
12851: PUSH
12852: LD_INT 52
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 135
12861: PUSH
12862: LD_INT 48
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: LD_INT 2
12880: MOD
12881: PUSH
12882: LD_INT 1
12884: PLUS
12885: ARRAY
12886: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12887: LD_ADDR_VAR 0 8
12891: PUSH
12892: LD_INT 12
12894: PUSH
12895: LD_INT 13
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 23
12904: PUSH
12905: LD_INT 22
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 2
12923: MOD
12924: PUSH
12925: LD_INT 1
12927: PLUS
12928: ARRAY
12929: ST_TO_ADDR
// InitHC_All ( ) ;
12930: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12934: LD_ADDR_VAR 0 3
12938: PUSH
12939: DOUBLE
12940: LD_INT 1
12942: DEC
12943: ST_TO_ADDR
12944: LD_INT 3
12946: PUSH
12947: LD_INT 4
12949: PUSH
12950: LD_INT 6
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: PUSH
12958: LD_OWVAR 67
12962: ARRAY
12963: PUSH
12964: LD_VAR 0 1
12968: PLUS
12969: PUSH
12970: FOR_TO
12971: IFFALSE 13103
// begin PrepareSoldier ( false , skill ) ;
12973: LD_INT 0
12975: PPUSH
12976: LD_VAR 0 4
12980: PPUSH
12981: CALL_OW 381
// un := CreateHuman ;
12985: LD_ADDR_VAR 0 5
12989: PUSH
12990: CALL_OW 44
12994: ST_TO_ADDR
// if i mod 2 = 0 then
12995: LD_VAR 0 3
12999: PUSH
13000: LD_INT 2
13002: MOD
13003: PUSH
13004: LD_INT 0
13006: EQUAL
13007: IFFALSE 13021
// SetClass ( un , class_mortar ) ;
13009: LD_VAR 0 5
13013: PPUSH
13014: LD_INT 8
13016: PPUSH
13017: CALL_OW 336
// SetDir ( un , 1 ) ;
13021: LD_VAR 0 5
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
13033: LD_VAR 0 5
13037: PPUSH
13038: LD_VAR 0 8
13042: PUSH
13043: LD_INT 1
13045: ARRAY
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
13054: LD_ADDR_EXP 45
13058: PUSH
13059: LD_EXP 45
13063: PPUSH
13064: LD_VAR 0 5
13068: PPUSH
13069: CALL 53834 0 2
13073: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
13074: LD_VAR 0 5
13078: PPUSH
13079: LD_VAR 0 7
13083: PUSH
13084: LD_INT 1
13086: ARRAY
13087: PPUSH
13088: LD_VAR 0 7
13092: PUSH
13093: LD_INT 2
13095: ARRAY
13096: PPUSH
13097: CALL_OW 114
// end ;
13101: GO 12970
13103: POP
13104: POP
// for i := 1 to 3 + v do
13105: LD_ADDR_VAR 0 3
13109: PUSH
13110: DOUBLE
13111: LD_INT 1
13113: DEC
13114: ST_TO_ADDR
13115: LD_INT 3
13117: PUSH
13118: LD_VAR 0 1
13122: PLUS
13123: PUSH
13124: FOR_TO
13125: IFFALSE 13322
// begin PrepareMechanic ( false , skill ) ;
13127: LD_INT 0
13129: PPUSH
13130: LD_VAR 0 4
13134: PPUSH
13135: CALL_OW 383
// un := CreateHuman ;
13139: LD_ADDR_VAR 0 5
13143: PUSH
13144: CALL_OW 44
13148: ST_TO_ADDR
// SetTag ( un , 999 ) ;
13149: LD_VAR 0 5
13153: PPUSH
13154: LD_INT 999
13156: PPUSH
13157: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
13161: LD_INT 14
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: LD_INT 1
13169: PPUSH
13170: LD_INT 27
13172: PUSH
13173: LD_INT 25
13175: PUSH
13176: LD_INT 28
13178: PUSH
13179: LD_INT 26
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: PUSH
13188: LD_VAR 0 3
13192: PUSH
13193: LD_INT 4
13195: MOD
13196: PUSH
13197: LD_INT 1
13199: PLUS
13200: ARRAY
13201: PPUSH
13202: LD_INT 80
13204: PPUSH
13205: CALL 20664 0 5
// veh := CreateVehicle ;
13209: LD_ADDR_VAR 0 6
13213: PUSH
13214: CALL_OW 45
13218: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13219: LD_VAR 0 6
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13231: LD_VAR 0 6
13235: PPUSH
13236: LD_VAR 0 8
13240: PUSH
13241: LD_INT 2
13243: ARRAY
13244: PPUSH
13245: LD_INT 0
13247: PPUSH
13248: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13252: LD_VAR 0 5
13256: PPUSH
13257: LD_VAR 0 6
13261: PPUSH
13262: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13266: LD_VAR 0 5
13270: PPUSH
13271: LD_VAR 0 7
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: PPUSH
13280: LD_VAR 0 7
13284: PUSH
13285: LD_INT 2
13287: ARRAY
13288: PPUSH
13289: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13293: LD_ADDR_EXP 46
13297: PUSH
13298: LD_EXP 46
13302: PPUSH
13303: LD_VAR 0 6
13307: PPUSH
13308: CALL 53834 0 2
13312: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13313: LD_INT 70
13315: PPUSH
13316: CALL_OW 67
// end ;
13320: GO 13124
13322: POP
13323: POP
// wait ( 0 0$2 ) ;
13324: LD_INT 70
13326: PPUSH
13327: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] + ( v div 2 ) do
13331: LD_ADDR_VAR 0 3
13335: PUSH
13336: DOUBLE
13337: LD_INT 1
13339: DEC
13340: ST_TO_ADDR
13341: LD_INT 1
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: LD_INT 3
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: PUSH
13355: LD_OWVAR 67
13359: ARRAY
13360: PUSH
13361: LD_VAR 0 1
13365: PUSH
13366: LD_INT 2
13368: DIV
13369: PLUS
13370: PUSH
13371: FOR_TO
13372: IFFALSE 13485
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
13374: LD_INT 14
13376: PPUSH
13377: LD_INT 1
13379: PPUSH
13380: LD_INT 5
13382: PPUSH
13383: LD_INT 29
13385: PPUSH
13386: LD_INT 80
13388: PPUSH
13389: CALL 20664 0 5
// veh := CreateVehicle ;
13393: LD_ADDR_VAR 0 6
13397: PUSH
13398: CALL_OW 45
13402: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
13403: LD_VAR 0 6
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
13415: LD_VAR 0 6
13419: PPUSH
13420: LD_VAR 0 8
13424: PUSH
13425: LD_INT 2
13427: ARRAY
13428: PPUSH
13429: LD_INT 0
13431: PPUSH
13432: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
13436: LD_VAR 0 5
13440: PPUSH
13441: LD_VAR 0 7
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PPUSH
13450: LD_VAR 0 7
13454: PUSH
13455: LD_INT 2
13457: ARRAY
13458: PPUSH
13459: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
13463: LD_ADDR_EXP 46
13467: PUSH
13468: LD_EXP 46
13472: PPUSH
13473: LD_VAR 0 6
13477: PPUSH
13478: CALL 53834 0 2
13482: ST_TO_ADDR
// end ;
13483: GO 13371
13485: POP
13486: POP
// end ;
13487: LD_VAR 0 2
13491: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
13492: LD_EXP 45
13496: IFFALSE 14026
13498: GO 13500
13500: DISABLE
13501: LD_INT 0
13503: PPUSH
13504: PPUSH
13505: PPUSH
13506: PPUSH
13507: PPUSH
// begin enable ;
13508: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: LD_INT 120
13516: PUSH
13517: LD_INT 11
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 69
13528: PUSH
13529: FOR_IN
13530: IFFALSE 13546
// SetTag ( i , 0 ) ;
13532: LD_VAR 0 1
13536: PPUSH
13537: LD_INT 0
13539: PPUSH
13540: CALL_OW 109
13544: GO 13529
13546: POP
13547: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_EXP 45
13557: PPUSH
13558: LD_INT 50
13560: PUSH
13561: EMPTY
13562: LIST
13563: PPUSH
13564: CALL_OW 72
13568: ST_TO_ADDR
// arAttackersInf := [ ] ;
13569: LD_ADDR_EXP 45
13573: PUSH
13574: EMPTY
13575: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_VAR 0 2
13585: PPUSH
13586: LD_INT 25
13588: PUSH
13589: LD_INT 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 72
13600: PUSH
13601: FOR_IN
13602: IFFALSE 13733
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13604: LD_ADDR_VAR 0 3
13608: PUSH
13609: LD_INT 81
13611: PUSH
13612: LD_EXP 3
13616: PUSH
13617: LD_INT 1
13619: ARRAY
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 3
13627: PUSH
13628: LD_INT 120
13630: PUSH
13631: LD_INT 11
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: LD_INT 21
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 21
13657: PUSH
13658: LD_INT 3
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 69
13679: PPUSH
13680: LD_VAR 0 1
13684: PPUSH
13685: CALL_OW 74
13689: ST_TO_ADDR
// if not nearest then
13690: LD_VAR 0 3
13694: NOT
13695: IFFALSE 13699
// break ;
13697: GO 13733
// SetTag ( nearest , tMined ) ;
13699: LD_VAR 0 3
13703: PPUSH
13704: LD_INT 11
13706: PPUSH
13707: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13711: LD_VAR 0 1
13715: PPUSH
13716: LD_INT 0
13718: PPUSH
13719: LD_INT 0
13721: PPUSH
13722: LD_VAR 0 3
13726: PPUSH
13727: CALL_OW 192
// end ;
13731: GO 13601
13733: POP
13734: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13735: LD_ADDR_VAR 0 2
13739: PUSH
13740: LD_VAR 0 2
13744: PPUSH
13745: LD_INT 50
13747: PUSH
13748: EMPTY
13749: LIST
13750: PPUSH
13751: CALL_OW 72
13755: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13756: LD_INT 70
13758: PPUSH
13759: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13763: LD_ADDR_VAR 0 2
13767: PUSH
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 50
13775: PUSH
13776: EMPTY
13777: LIST
13778: PPUSH
13779: CALL_OW 72
13783: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13784: LD_ADDR_VAR 0 4
13788: PUSH
13789: LD_INT 81
13791: PUSH
13792: LD_EXP 3
13796: PUSH
13797: LD_INT 1
13799: ARRAY
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PPUSH
13805: CALL_OW 69
13809: ST_TO_ADDR
// for i in tmp do
13810: LD_ADDR_VAR 0 1
13814: PUSH
13815: LD_VAR 0 2
13819: PUSH
13820: FOR_IN
13821: IFFALSE 14017
// if GetClass ( i ) <> 1 then
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 257
13832: PUSH
13833: LD_INT 1
13835: NONEQUAL
13836: IFFALSE 13864
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13838: LD_VAR 0 1
13842: PPUSH
13843: LD_VAR 0 4
13847: PPUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 74
13857: PPUSH
13858: CALL_OW 115
13862: GO 14015
// if not HasTask ( i ) then
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 314
13873: NOT
13874: IFFALSE 14015
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13876: LD_ADDR_VAR 0 3
13880: PUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: LD_INT 3
13888: PUSH
13889: LD_INT 120
13891: PUSH
13892: LD_INT 11
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: LD_INT 21
13908: PUSH
13909: LD_INT 2
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PPUSH
13935: CALL_OW 72
13939: PPUSH
13940: LD_VAR 0 1
13944: PPUSH
13945: CALL_OW 74
13949: ST_TO_ADDR
// if not nearest then
13950: LD_VAR 0 3
13954: NOT
13955: IFFALSE 13983
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13957: LD_VAR 0 1
13961: PPUSH
13962: LD_VAR 0 4
13966: PPUSH
13967: LD_VAR 0 1
13971: PPUSH
13972: CALL_OW 74
13976: PPUSH
13977: CALL_OW 115
13981: GO 14015
// begin SetTag ( nearest , tMined ) ;
13983: LD_VAR 0 3
13987: PPUSH
13988: LD_INT 11
13990: PPUSH
13991: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13995: LD_VAR 0 1
13999: PPUSH
14000: LD_INT 0
14002: PPUSH
14003: LD_INT 0
14005: PPUSH
14006: LD_VAR 0 3
14010: PPUSH
14011: CALL_OW 132
// end ; end ;
14015: GO 13820
14017: POP
14018: POP
// until not tmp ;
14019: LD_VAR 0 2
14023: NOT
14024: IFFALSE 13756
// end ;
14026: PPOPN 5
14028: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
14029: LD_EXP 46
14033: IFFALSE 14256
14035: GO 14037
14037: DISABLE
14038: LD_INT 0
14040: PPUSH
14041: PPUSH
14042: PPUSH
// begin enable ;
14043: ENABLE
// tmp := arAttackersVeh ;
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_EXP 46
14053: ST_TO_ADDR
// arAttackersVeh := [ ] ;
14054: LD_ADDR_EXP 46
14058: PUSH
14059: EMPTY
14060: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
14061: LD_ADDR_VAR 0 3
14065: PUSH
14066: LD_INT 139
14068: PUSH
14069: LD_INT 55
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 155
14078: PUSH
14079: LD_INT 92
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 53
14092: PUSH
14093: LD_INT 61
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 74
14102: PUSH
14103: LD_INT 98
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
14118: LD_VAR 0 2
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: LD_INT 139
14129: PPUSH
14130: LD_INT 55
14132: PPUSH
14133: CALL_OW 297
14137: PUSH
14138: LD_VAR 0 2
14142: PUSH
14143: LD_INT 1
14145: ARRAY
14146: PPUSH
14147: LD_INT 53
14149: PPUSH
14150: LD_INT 61
14152: PPUSH
14153: CALL_OW 297
14157: LESS
14158: IFFALSE 14176
// path := path [ 1 ] else
14160: LD_ADDR_VAR 0 3
14164: PUSH
14165: LD_VAR 0 3
14169: PUSH
14170: LD_INT 1
14172: ARRAY
14173: ST_TO_ADDR
14174: GO 14190
// path := path [ 2 ] ;
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_VAR 0 3
14185: PUSH
14186: LD_INT 2
14188: ARRAY
14189: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14190: LD_INT 70
14192: PPUSH
14193: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: LD_VAR 0 2
14206: PPUSH
14207: LD_INT 50
14209: PUSH
14210: EMPTY
14211: LIST
14212: PPUSH
14213: CALL_OW 72
14217: ST_TO_ADDR
// for i in tmp do
14218: LD_ADDR_VAR 0 1
14222: PUSH
14223: LD_VAR 0 2
14227: PUSH
14228: FOR_IN
14229: IFFALSE 14247
// AgressiveMove ( i , path ) until not tmp ;
14231: LD_VAR 0 1
14235: PPUSH
14236: LD_VAR 0 3
14240: PPUSH
14241: CALL 56600 0 2
14245: GO 14228
14247: POP
14248: POP
14249: LD_VAR 0 2
14253: NOT
14254: IFFALSE 14190
// end ;
14256: PPOPN 3
14258: END
// every 2 2$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
14259: LD_EXP 16
14263: PPUSH
14264: CALL 17902 0 1
14268: PUSH
14269: LD_INT 3
14271: GREATEREQUAL
14272: IFFALSE 14393
14274: GO 14276
14276: DISABLE
14277: LD_INT 0
14279: PPUSH
14280: PPUSH
// begin enable ;
14281: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
14282: LD_ADDR_VAR 0 2
14286: PUSH
14287: LD_EXP 16
14291: PPUSH
14292: LD_INT 61
14294: PUSH
14295: EMPTY
14296: LIST
14297: PPUSH
14298: CALL_OW 72
14302: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
14303: LD_ADDR_EXP 16
14307: PUSH
14308: LD_EXP 16
14312: PUSH
14313: LD_VAR 0 2
14317: DIFF
14318: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14319: LD_INT 70
14321: PPUSH
14322: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_VAR 0 2
14335: PPUSH
14336: LD_INT 50
14338: PUSH
14339: EMPTY
14340: LIST
14341: PPUSH
14342: CALL_OW 72
14346: ST_TO_ADDR
// for i in tmp do
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_VAR 0 2
14356: PUSH
14357: FOR_IN
14358: IFFALSE 14384
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
14360: LD_VAR 0 1
14364: PPUSH
14365: LD_INT 98
14367: PUSH
14368: LD_INT 63
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: PPUSH
14378: CALL 56600 0 2
14382: GO 14357
14384: POP
14385: POP
14386: LD_VAR 0 2
14390: NOT
14391: IFFALSE 14319
// end ;
14393: PPOPN 2
14395: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
14396: LD_EXP 9
14400: IFFALSE 14408
14402: PUSH
14403: LD_EXP 4
14407: AND
14408: IFFALSE 14967
14410: GO 14412
14412: DISABLE
14413: LD_INT 0
14415: PPUSH
14416: PPUSH
14417: PPUSH
// begin enable ;
14418: ENABLE
// if not arVehiclesAtttackers then
14419: LD_EXP 9
14423: NOT
14424: IFFALSE 14428
// exit ;
14426: GO 14967
// for i in arVehiclesAtttackers do
14428: LD_ADDR_VAR 0 1
14432: PUSH
14433: LD_EXP 9
14437: PUSH
14438: FOR_IN
14439: IFFALSE 14965
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
14441: LD_VAR 0 1
14445: PPUSH
14446: CALL_OW 302
14450: NOT
14451: IFTRUE 14474
14453: PUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 255
14463: PUSH
14464: LD_EXP 3
14468: PUSH
14469: LD_INT 1
14471: ARRAY
14472: NONEQUAL
14473: OR
14474: IFFALSE 14494
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
14476: LD_ADDR_EXP 9
14480: PUSH
14481: LD_EXP 9
14485: PUSH
14486: LD_VAR 0 1
14490: DIFF
14491: ST_TO_ADDR
// continue ;
14492: GO 14438
// end ; if GetTag ( i ) = 300 then
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 110
14503: PUSH
14504: LD_INT 300
14506: EQUAL
14507: IFFALSE 14622
// begin if GetFuel ( i ) < 50 then
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 261
14518: PUSH
14519: LD_INT 50
14521: LESS
14522: IFFALSE 14581
// begin ComMoveXY ( i , 102 , 47 ) ;
14524: LD_VAR 0 1
14528: PPUSH
14529: LD_INT 102
14531: PPUSH
14532: LD_INT 47
14534: PPUSH
14535: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14539: LD_INT 35
14541: PPUSH
14542: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14546: LD_VAR 0 1
14550: PPUSH
14551: LD_INT 102
14553: PPUSH
14554: LD_INT 47
14556: PPUSH
14557: CALL_OW 297
14561: PUSH
14562: LD_INT 4
14564: LESS
14565: IFFALSE 14539
// SetFuel ( i , 100 ) ;
14567: LD_VAR 0 1
14571: PPUSH
14572: LD_INT 100
14574: PPUSH
14575: CALL_OW 240
// end else
14579: GO 14622
// if not IsInArea ( i , arParkingArea ) then
14581: LD_VAR 0 1
14585: PPUSH
14586: LD_INT 14
14588: PPUSH
14589: CALL_OW 308
14593: NOT
14594: IFFALSE 14610
// ComMoveToArea ( i , arParkingArea ) else
14596: LD_VAR 0 1
14600: PPUSH
14601: LD_INT 14
14603: PPUSH
14604: CALL_OW 113
14608: GO 14622
// SetTag ( i , 301 ) ;
14610: LD_VAR 0 1
14614: PPUSH
14615: LD_INT 301
14617: PPUSH
14618: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 110
14631: PUSH
14632: LD_INT 301
14634: EQUAL
14635: IFFALSE 14777
// begin if GetLives ( i ) < 1000 then
14637: LD_VAR 0 1
14641: PPUSH
14642: CALL_OW 256
14646: PUSH
14647: LD_INT 1000
14649: LESS
14650: IFFALSE 14754
// begin if not IsDrivenBy ( i ) then
14652: LD_VAR 0 1
14656: PPUSH
14657: CALL_OW 311
14661: NOT
14662: IFFALSE 14666
// continue ;
14664: GO 14438
// mech := IsDrivenBy ( i ) ;
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 311
14680: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14681: LD_VAR 0 2
14685: PPUSH
14686: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14690: LD_VAR 0 2
14694: PPUSH
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14704: LD_INT 35
14706: PPUSH
14707: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14711: LD_VAR 0 1
14715: PPUSH
14716: CALL_OW 256
14720: PUSH
14721: LD_INT 1000
14723: EQUAL
14724: IFFALSE 14704
// SetLives ( mech , 1000 ) ;
14726: LD_VAR 0 2
14730: PPUSH
14731: LD_INT 1000
14733: PPUSH
14734: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14738: LD_VAR 0 2
14742: PPUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 120
// end else
14752: GO 14777
// if IsDrivenBy ( i ) then
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 311
14763: IFFALSE 14777
// SetTag ( i , 0 ) ;
14765: LD_VAR 0 1
14769: PPUSH
14770: LD_INT 0
14772: PPUSH
14773: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 110
14786: PUSH
14787: LD_INT 300
14789: LESS
14790: IFFALSE 14963
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14792: LD_ADDR_VAR 0 3
14796: PUSH
14797: LD_INT 1
14799: PPUSH
14800: LD_INT 81
14802: PUSH
14803: LD_EXP 3
14807: PUSH
14808: LD_INT 1
14810: ARRAY
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 70
14820: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL_OW 256
14830: PUSH
14831: LD_INT 650
14833: LESS
14834: IFFALSE 14859
// begin ComStop ( i ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 141
// SetTag ( i , 300 ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 300
14852: PPUSH
14853: CALL_OW 109
// continue ;
14857: GO 14438
// end ; if enemy then
14859: LD_VAR 0 3
14863: IFFALSE 14903
// begin if not HasTask ( i ) then
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 314
14874: NOT
14875: IFFALSE 14901
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 74
14896: PPUSH
14897: CALL_OW 115
// end else
14901: GO 14963
// if arVehiclesAtttackers then
14903: LD_EXP 9
14907: IFFALSE 14963
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_INT 81
14916: PUSH
14917: LD_EXP 3
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: ST_TO_ADDR
// if enemy then
14935: LD_VAR 0 3
14939: IFFALSE 14963
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14941: LD_VAR 0 1
14945: PPUSH
14946: LD_INT 99
14948: PUSH
14949: LD_INT 66
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: PPUSH
14959: CALL 56600 0 2
// end ; end ; end ;
14963: GO 14438
14965: POP
14966: POP
// end ;
14967: PPOPN 3
14969: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14970: LD_INT 22
14972: PUSH
14973: LD_EXP 3
14977: PUSH
14978: LD_INT 1
14980: ARRAY
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 32
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PPUSH
15000: CALL_OW 69
15004: IFFALSE 15087
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
// begin enable ;
15012: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_EXP 3
15025: PUSH
15026: LD_INT 1
15028: ARRAY
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 32
15036: PUSH
15037: LD_INT 1
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PUSH
15053: FOR_IN
15054: IFFALSE 15085
// if GetFuel ( i ) < 3 then
15056: LD_VAR 0 1
15060: PPUSH
15061: CALL_OW 261
15065: PUSH
15066: LD_INT 3
15068: LESS
15069: IFFALSE 15083
// SetFuel ( i , 3 ) ;
15071: LD_VAR 0 1
15075: PPUSH
15076: LD_INT 3
15078: PPUSH
15079: CALL_OW 240
15083: GO 15053
15085: POP
15086: POP
// end ; end_of_file
15087: PPOPN 1
15089: END
// every 0 0$20 trigger game do
15090: LD_EXP 2
15094: IFFALSE 15139
15096: GO 15098
15098: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
15099: LD_INT 15
15101: PUSH
15102: LD_INT 17
15104: PUSH
15105: LD_INT 16
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: PPUSH
15117: LD_EXP 32
15121: PUSH
15122: LD_INT 2
15124: ARRAY
15125: PPUSH
15126: LD_EXP 32
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: CALL 15140 0 3
15139: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
// if not areas then
15146: LD_VAR 0 1
15150: NOT
15151: IFFALSE 15155
// exit ;
15153: GO 15534
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
15155: LD_ADDR_VAR 0 7
15159: PUSH
15160: LD_INT 18
15162: PUSH
15163: LD_INT 19
15165: PUSH
15166: LD_INT 20
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: ST_TO_ADDR
// x := 5 ;
15174: LD_ADDR_VAR 0 6
15178: PUSH
15179: LD_INT 5
15181: ST_TO_ADDR
// repeat wait ( time ) ;
15182: LD_VAR 0 2
15186: PPUSH
15187: CALL_OW 67
// if tick < [ 22 22$00 , 19 19$00 , 15 15$00 ] [ Difficulty ] then
15191: LD_OWVAR 1
15195: PUSH
15196: LD_INT 46200
15198: PUSH
15199: LD_INT 39900
15201: PUSH
15202: LD_INT 31500
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: PUSH
15210: LD_OWVAR 67
15214: ARRAY
15215: LESS
15216: IFFALSE 15355
// begin for i := 1 to multi_sides do
15218: LD_ADDR_VAR 0 5
15222: PUSH
15223: DOUBLE
15224: LD_INT 1
15226: DEC
15227: ST_TO_ADDR
15228: LD_EXP 18
15232: PUSH
15233: FOR_TO
15234: IFFALSE 15346
// if multi_sides [ i ] then
15236: LD_EXP 18
15240: PUSH
15241: LD_VAR 0 5
15245: ARRAY
15246: IFFALSE 15344
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
15248: LD_VAR 0 7
15252: PUSH
15253: LD_EXP 18
15257: PUSH
15258: LD_VAR 0 5
15262: ARRAY
15263: ARRAY
15264: PPUSH
15265: LD_INT 1
15267: PPUSH
15268: CALL_OW 287
15272: PUSH
15273: LD_INT 32
15275: PUSH
15276: LD_INT 25
15278: PUSH
15279: LD_INT 23
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PUSH
15287: LD_OWVAR 67
15291: ARRAY
15292: LESS
15293: IFFALSE 15344
// begin amount := amount - ( x * 10 ) ;
15295: LD_ADDR_VAR 0 3
15299: PUSH
15300: LD_VAR 0 3
15304: PUSH
15305: LD_VAR 0 6
15309: PUSH
15310: LD_INT 10
15312: MUL
15313: MINUS
15314: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
15315: LD_VAR 0 6
15319: PPUSH
15320: LD_VAR 0 7
15324: PUSH
15325: LD_EXP 18
15329: PUSH
15330: LD_VAR 0 5
15334: ARRAY
15335: ARRAY
15336: PPUSH
15337: LD_INT 1
15339: PPUSH
15340: CALL_OW 55
// end ; end ;
15344: GO 15233
15346: POP
15347: POP
// wait ( 0 0$2 ) ;
15348: LD_INT 70
15350: PPUSH
15351: CALL_OW 67
// end ; for i in areas do
15355: LD_ADDR_VAR 0 5
15359: PUSH
15360: LD_VAR 0 1
15364: PUSH
15365: FOR_IN
15366: IFFALSE 15449
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
15368: LD_VAR 0 5
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 287
15380: PUSH
15381: LD_INT 25
15383: PUSH
15384: LD_INT 22
15386: PUSH
15387: LD_INT 20
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: PUSH
15395: LD_OWVAR 67
15399: ARRAY
15400: LESS
15401: IFFALSE 15447
// begin wait ( 0 0$5 ) ;
15403: LD_INT 175
15405: PPUSH
15406: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15410: LD_VAR 0 6
15414: PPUSH
15415: LD_VAR 0 5
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15427: LD_ADDR_VAR 0 3
15431: PUSH
15432: LD_VAR 0 3
15436: PUSH
15437: LD_VAR 0 6
15441: PUSH
15442: LD_INT 10
15444: MUL
15445: MINUS
15446: ST_TO_ADDR
// end ; end ;
15447: GO 15365
15449: POP
15450: POP
// time := time + 0 0$2 ;
15451: LD_ADDR_VAR 0 2
15455: PUSH
15456: LD_VAR 0 2
15460: PUSH
15461: LD_INT 70
15463: PLUS
15464: ST_TO_ADDR
// x := x - 1 ;
15465: LD_ADDR_VAR 0 6
15469: PUSH
15470: LD_VAR 0 6
15474: PUSH
15475: LD_INT 1
15477: MINUS
15478: ST_TO_ADDR
// if x = 0 then
15479: LD_VAR 0 6
15483: PUSH
15484: LD_INT 0
15486: EQUAL
15487: IFFALSE 15497
// x := 5 ;
15489: LD_ADDR_VAR 0 6
15493: PUSH
15494: LD_INT 5
15496: ST_TO_ADDR
// if time > 1 1$00 then
15497: LD_VAR 0 2
15501: PUSH
15502: LD_INT 2100
15504: GREATER
15505: IFFALSE 15515
// time := 0 0$30 ;
15507: LD_ADDR_VAR 0 2
15511: PUSH
15512: LD_INT 1050
15514: ST_TO_ADDR
// until not game or amount <= 0 ;
15515: LD_EXP 2
15519: NOT
15520: IFTRUE 15532
15522: PUSH
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 0
15530: LESSEQUAL
15531: OR
15532: IFFALSE 15182
// end ; end_of_file
15534: LD_VAR 0 4
15538: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15539: LD_VAR 0 1
15543: PUSH
15544: LD_INT 200
15546: DOUBLE
15547: GREATEREQUAL
15548: IFFALSE 15556
15550: LD_INT 299
15552: DOUBLE
15553: LESSEQUAL
15554: IFTRUE 15558
15556: GO 15590
15558: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15559: LD_VAR 0 1
15563: PPUSH
15564: LD_VAR 0 2
15568: PPUSH
15569: LD_VAR 0 3
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: LD_VAR 0 5
15583: PPUSH
15584: CALL 59857 0 5
15588: GO 15667
15590: LD_INT 300
15592: DOUBLE
15593: GREATEREQUAL
15594: IFFALSE 15602
15596: LD_INT 399
15598: DOUBLE
15599: LESSEQUAL
15600: IFTRUE 15604
15602: GO 15666
15604: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15605: LD_VAR 0 1
15609: PPUSH
15610: LD_VAR 0 2
15614: PPUSH
15615: LD_VAR 0 3
15619: PPUSH
15620: LD_VAR 0 4
15624: PPUSH
15625: LD_VAR 0 5
15629: PPUSH
15630: LD_VAR 0 6
15634: PPUSH
15635: LD_VAR 0 7
15639: PPUSH
15640: LD_VAR 0 8
15644: PPUSH
15645: LD_VAR 0 9
15649: PPUSH
15650: LD_VAR 0 10
15654: PPUSH
15655: LD_VAR 0 11
15659: PPUSH
15660: CALL 65262 0 11
15664: GO 15667
15666: POP
// end ;
15667: PPOPN 11
15669: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15670: LD_VAR 0 1
15674: PPUSH
15675: LD_VAR 0 2
15679: PPUSH
15680: LD_VAR 0 3
15684: PPUSH
15685: LD_VAR 0 4
15689: PPUSH
15690: LD_VAR 0 5
15694: PPUSH
15695: CALL 59238 0 5
// end ; end_of_file
15699: PPOPN 5
15701: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
// if exist_mode then
15706: LD_VAR 0 2
15710: IFFALSE 15756
// begin unit := CreateCharacter ( prefix & ident ) ;
15712: LD_ADDR_VAR 0 5
15716: PUSH
15717: LD_VAR 0 3
15721: PUSH
15722: LD_VAR 0 1
15726: STR
15727: PPUSH
15728: CALL_OW 34
15732: ST_TO_ADDR
// if unit then
15733: LD_VAR 0 5
15737: IFFALSE 15754
// DeleteCharacters ( prefix & ident ) ;
15739: LD_VAR 0 3
15743: PUSH
15744: LD_VAR 0 1
15748: STR
15749: PPUSH
15750: CALL_OW 40
// end else
15754: GO 15771
// unit := NewCharacter ( ident ) ;
15756: LD_ADDR_VAR 0 5
15760: PUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 25
15770: ST_TO_ADDR
// result := unit ;
15771: LD_ADDR_VAR 0 4
15775: PUSH
15776: LD_VAR 0 5
15780: ST_TO_ADDR
// end ;
15781: LD_VAR 0 4
15785: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15786: LD_INT 0
15788: PPUSH
15789: PPUSH
// if exist_mode then
15790: LD_VAR 0 2
15794: IFFALSE 15819
// unit := CreateCharacter ( prefix & ident ) else
15796: LD_ADDR_VAR 0 5
15800: PUSH
15801: LD_VAR 0 3
15805: PUSH
15806: LD_VAR 0 1
15810: STR
15811: PPUSH
15812: CALL_OW 34
15816: ST_TO_ADDR
15817: GO 15834
// unit := NewCharacter ( ident ) ;
15819: LD_ADDR_VAR 0 5
15823: PUSH
15824: LD_VAR 0 1
15828: PPUSH
15829: CALL_OW 25
15833: ST_TO_ADDR
// result := unit ;
15834: LD_ADDR_VAR 0 4
15838: PUSH
15839: LD_VAR 0 5
15843: ST_TO_ADDR
// end ;
15844: LD_VAR 0 4
15848: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15849: LD_INT 0
15851: PPUSH
15852: PPUSH
// if not side or not nation then
15853: LD_VAR 0 1
15857: NOT
15858: IFTRUE 15867
15860: PUSH
15861: LD_VAR 0 2
15865: NOT
15866: OR
15867: IFFALSE 15871
// exit ;
15869: GO 16641
// case nation of nation_american :
15871: LD_VAR 0 2
15875: PUSH
15876: LD_INT 1
15878: DOUBLE
15879: EQUAL
15880: IFTRUE 15884
15882: GO 16098
15884: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15885: LD_ADDR_VAR 0 4
15889: PUSH
15890: LD_INT 35
15892: PUSH
15893: LD_INT 45
15895: PUSH
15896: LD_INT 46
15898: PUSH
15899: LD_INT 47
15901: PUSH
15902: LD_INT 82
15904: PUSH
15905: LD_INT 83
15907: PUSH
15908: LD_INT 84
15910: PUSH
15911: LD_INT 85
15913: PUSH
15914: LD_INT 86
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: LD_INT 2
15922: PUSH
15923: LD_INT 6
15925: PUSH
15926: LD_INT 15
15928: PUSH
15929: LD_INT 16
15931: PUSH
15932: LD_INT 7
15934: PUSH
15935: LD_INT 12
15937: PUSH
15938: LD_INT 13
15940: PUSH
15941: LD_INT 10
15943: PUSH
15944: LD_INT 14
15946: PUSH
15947: LD_INT 20
15949: PUSH
15950: LD_INT 21
15952: PUSH
15953: LD_INT 22
15955: PUSH
15956: LD_INT 25
15958: PUSH
15959: LD_INT 32
15961: PUSH
15962: LD_INT 27
15964: PUSH
15965: LD_INT 36
15967: PUSH
15968: LD_INT 69
15970: PUSH
15971: LD_INT 39
15973: PUSH
15974: LD_INT 34
15976: PUSH
15977: LD_INT 40
15979: PUSH
15980: LD_INT 48
15982: PUSH
15983: LD_INT 49
15985: PUSH
15986: LD_INT 50
15988: PUSH
15989: LD_INT 51
15991: PUSH
15992: LD_INT 52
15994: PUSH
15995: LD_INT 53
15997: PUSH
15998: LD_INT 54
16000: PUSH
16001: LD_INT 55
16003: PUSH
16004: LD_INT 56
16006: PUSH
16007: LD_INT 57
16009: PUSH
16010: LD_INT 58
16012: PUSH
16013: LD_INT 59
16015: PUSH
16016: LD_INT 60
16018: PUSH
16019: LD_INT 61
16021: PUSH
16022: LD_INT 62
16024: PUSH
16025: LD_INT 80
16027: PUSH
16028: LD_INT 82
16030: PUSH
16031: LD_INT 83
16033: PUSH
16034: LD_INT 84
16036: PUSH
16037: LD_INT 85
16039: PUSH
16040: LD_INT 86
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: ST_TO_ADDR
16096: GO 16563
16098: LD_INT 2
16100: DOUBLE
16101: EQUAL
16102: IFTRUE 16106
16104: GO 16332
16106: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16107: LD_ADDR_VAR 0 4
16111: PUSH
16112: LD_INT 35
16114: PUSH
16115: LD_INT 45
16117: PUSH
16118: LD_INT 46
16120: PUSH
16121: LD_INT 47
16123: PUSH
16124: LD_INT 82
16126: PUSH
16127: LD_INT 83
16129: PUSH
16130: LD_INT 84
16132: PUSH
16133: LD_INT 85
16135: PUSH
16136: LD_INT 87
16138: PUSH
16139: LD_INT 70
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: LD_INT 11
16147: PUSH
16148: LD_INT 3
16150: PUSH
16151: LD_INT 4
16153: PUSH
16154: LD_INT 5
16156: PUSH
16157: LD_INT 6
16159: PUSH
16160: LD_INT 15
16162: PUSH
16163: LD_INT 18
16165: PUSH
16166: LD_INT 7
16168: PUSH
16169: LD_INT 17
16171: PUSH
16172: LD_INT 8
16174: PUSH
16175: LD_INT 20
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_INT 72
16186: PUSH
16187: LD_INT 26
16189: PUSH
16190: LD_INT 69
16192: PUSH
16193: LD_INT 39
16195: PUSH
16196: LD_INT 40
16198: PUSH
16199: LD_INT 41
16201: PUSH
16202: LD_INT 42
16204: PUSH
16205: LD_INT 43
16207: PUSH
16208: LD_INT 48
16210: PUSH
16211: LD_INT 49
16213: PUSH
16214: LD_INT 50
16216: PUSH
16217: LD_INT 51
16219: PUSH
16220: LD_INT 52
16222: PUSH
16223: LD_INT 53
16225: PUSH
16226: LD_INT 54
16228: PUSH
16229: LD_INT 55
16231: PUSH
16232: LD_INT 56
16234: PUSH
16235: LD_INT 60
16237: PUSH
16238: LD_INT 61
16240: PUSH
16241: LD_INT 62
16243: PUSH
16244: LD_INT 66
16246: PUSH
16247: LD_INT 67
16249: PUSH
16250: LD_INT 68
16252: PUSH
16253: LD_INT 81
16255: PUSH
16256: LD_INT 82
16258: PUSH
16259: LD_INT 83
16261: PUSH
16262: LD_INT 84
16264: PUSH
16265: LD_INT 85
16267: PUSH
16268: LD_INT 87
16270: PUSH
16271: LD_INT 88
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: ST_TO_ADDR
16330: GO 16563
16332: LD_INT 3
16334: DOUBLE
16335: EQUAL
16336: IFTRUE 16340
16338: GO 16562
16340: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16341: LD_ADDR_VAR 0 4
16345: PUSH
16346: LD_INT 46
16348: PUSH
16349: LD_INT 47
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: LD_INT 82
16360: PUSH
16361: LD_INT 83
16363: PUSH
16364: LD_INT 84
16366: PUSH
16367: LD_INT 85
16369: PUSH
16370: LD_INT 86
16372: PUSH
16373: LD_INT 11
16375: PUSH
16376: LD_INT 9
16378: PUSH
16379: LD_INT 20
16381: PUSH
16382: LD_INT 19
16384: PUSH
16385: LD_INT 21
16387: PUSH
16388: LD_INT 24
16390: PUSH
16391: LD_INT 22
16393: PUSH
16394: LD_INT 25
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: LD_INT 29
16402: PUSH
16403: LD_INT 30
16405: PUSH
16406: LD_INT 31
16408: PUSH
16409: LD_INT 37
16411: PUSH
16412: LD_INT 38
16414: PUSH
16415: LD_INT 32
16417: PUSH
16418: LD_INT 27
16420: PUSH
16421: LD_INT 33
16423: PUSH
16424: LD_INT 69
16426: PUSH
16427: LD_INT 39
16429: PUSH
16430: LD_INT 34
16432: PUSH
16433: LD_INT 40
16435: PUSH
16436: LD_INT 71
16438: PUSH
16439: LD_INT 23
16441: PUSH
16442: LD_INT 44
16444: PUSH
16445: LD_INT 48
16447: PUSH
16448: LD_INT 49
16450: PUSH
16451: LD_INT 50
16453: PUSH
16454: LD_INT 51
16456: PUSH
16457: LD_INT 52
16459: PUSH
16460: LD_INT 53
16462: PUSH
16463: LD_INT 54
16465: PUSH
16466: LD_INT 55
16468: PUSH
16469: LD_INT 56
16471: PUSH
16472: LD_INT 57
16474: PUSH
16475: LD_INT 58
16477: PUSH
16478: LD_INT 59
16480: PUSH
16481: LD_INT 63
16483: PUSH
16484: LD_INT 64
16486: PUSH
16487: LD_INT 65
16489: PUSH
16490: LD_INT 82
16492: PUSH
16493: LD_INT 83
16495: PUSH
16496: LD_INT 84
16498: PUSH
16499: LD_INT 85
16501: PUSH
16502: LD_INT 86
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: ST_TO_ADDR
16560: GO 16563
16562: POP
// if state > - 1 and state < 3 then
16563: LD_VAR 0 3
16567: PUSH
16568: LD_INT 1
16570: NEG
16571: GREATER
16572: IFFALSE 16584
16574: PUSH
16575: LD_VAR 0 3
16579: PUSH
16580: LD_INT 3
16582: LESS
16583: AND
16584: IFFALSE 16641
// for i in result do
16586: LD_ADDR_VAR 0 5
16590: PUSH
16591: LD_VAR 0 4
16595: PUSH
16596: FOR_IN
16597: IFFALSE 16639
// if GetTech ( i , side ) <> state then
16599: LD_VAR 0 5
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 321
16613: PUSH
16614: LD_VAR 0 3
16618: NONEQUAL
16619: IFFALSE 16637
// result := result diff i ;
16621: LD_ADDR_VAR 0 4
16625: PUSH
16626: LD_VAR 0 4
16630: PUSH
16631: LD_VAR 0 5
16635: DIFF
16636: ST_TO_ADDR
16637: GO 16596
16639: POP
16640: POP
// end ;
16641: LD_VAR 0 4
16645: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16646: LD_INT 0
16648: PPUSH
16649: PPUSH
16650: PPUSH
// result := true ;
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: LD_INT 1
16658: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16659: LD_ADDR_VAR 0 5
16663: PUSH
16664: LD_VAR 0 2
16668: PPUSH
16669: CALL_OW 480
16673: ST_TO_ADDR
// if not tmp then
16674: LD_VAR 0 5
16678: NOT
16679: IFFALSE 16683
// exit ;
16681: GO 16732
// for i in tmp do
16683: LD_ADDR_VAR 0 4
16687: PUSH
16688: LD_VAR 0 5
16692: PUSH
16693: FOR_IN
16694: IFFALSE 16730
// if GetTech ( i , side ) <> state_researched then
16696: LD_VAR 0 4
16700: PPUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 321
16710: PUSH
16711: LD_INT 2
16713: NONEQUAL
16714: IFFALSE 16728
// begin result := false ;
16716: LD_ADDR_VAR 0 3
16720: PUSH
16721: LD_INT 0
16723: ST_TO_ADDR
// exit ;
16724: POP
16725: POP
16726: GO 16732
// end ;
16728: GO 16693
16730: POP
16731: POP
// end ;
16732: LD_VAR 0 3
16736: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
16742: PPUSH
16743: PPUSH
16744: PPUSH
16745: PPUSH
16746: PPUSH
16747: PPUSH
16748: PPUSH
16749: PPUSH
16750: PPUSH
16751: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16752: LD_VAR 0 1
16756: NOT
16757: IFTRUE 16774
16759: PUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 257
16769: PUSH
16770: LD_INT 9
16772: NONEQUAL
16773: OR
16774: IFFALSE 16778
// exit ;
16776: GO 17357
// side := GetSide ( unit ) ;
16778: LD_ADDR_VAR 0 9
16782: PUSH
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 255
16792: ST_TO_ADDR
// tech_space := tech_spacanom ;
16793: LD_ADDR_VAR 0 12
16797: PUSH
16798: LD_INT 29
16800: ST_TO_ADDR
// tech_time := tech_taurad ;
16801: LD_ADDR_VAR 0 13
16805: PUSH
16806: LD_INT 28
16808: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16809: LD_ADDR_VAR 0 11
16813: PUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 310
16823: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16824: LD_VAR 0 11
16828: PPUSH
16829: CALL_OW 247
16833: PUSH
16834: LD_INT 2
16836: EQUAL
16837: IFFALSE 16841
// exit ;
16839: GO 17357
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16841: LD_ADDR_VAR 0 8
16845: PUSH
16846: LD_INT 81
16848: PUSH
16849: LD_VAR 0 9
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 3
16860: PUSH
16861: LD_INT 21
16863: PUSH
16864: LD_INT 3
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PPUSH
16879: CALL_OW 69
16883: ST_TO_ADDR
// if not tmp then
16884: LD_VAR 0 8
16888: NOT
16889: IFFALSE 16893
// exit ;
16891: GO 17357
// if in_unit then
16893: LD_VAR 0 11
16897: IFFALSE 16921
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16899: LD_ADDR_VAR 0 10
16903: PUSH
16904: LD_VAR 0 8
16908: PPUSH
16909: LD_VAR 0 11
16913: PPUSH
16914: CALL_OW 74
16918: ST_TO_ADDR
16919: GO 16941
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16921: LD_ADDR_VAR 0 10
16925: PUSH
16926: LD_VAR 0 8
16930: PPUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 74
16940: ST_TO_ADDR
// if not enemy then
16941: LD_VAR 0 10
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 17357
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16950: LD_VAR 0 11
16954: IFFALSE 16976
16956: PUSH
16957: LD_VAR 0 11
16961: PPUSH
16962: LD_VAR 0 10
16966: PPUSH
16967: CALL_OW 296
16971: PUSH
16972: LD_INT 13
16974: GREATER
16975: AND
16976: IFTRUE 16998
16978: PUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_VAR 0 10
16988: PPUSH
16989: CALL_OW 296
16993: PUSH
16994: LD_INT 12
16996: GREATER
16997: OR
16998: IFFALSE 17002
// exit ;
17000: GO 17357
// missile := [ 1 ] ;
17002: LD_ADDR_VAR 0 14
17006: PUSH
17007: LD_INT 1
17009: PUSH
17010: EMPTY
17011: LIST
17012: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17013: LD_VAR 0 9
17017: PPUSH
17018: LD_VAR 0 12
17022: PPUSH
17023: CALL_OW 325
17027: IFFALSE 17056
// missile := Replace ( missile , missile + 1 , 2 ) ;
17029: LD_ADDR_VAR 0 14
17033: PUSH
17034: LD_VAR 0 14
17038: PPUSH
17039: LD_VAR 0 14
17043: PUSH
17044: LD_INT 1
17046: PLUS
17047: PPUSH
17048: LD_INT 2
17050: PPUSH
17051: CALL_OW 1
17055: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17056: LD_VAR 0 9
17060: PPUSH
17061: LD_VAR 0 13
17065: PPUSH
17066: CALL_OW 325
17070: IFFALSE 17094
17072: PUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 255
17082: PPUSH
17083: LD_VAR 0 13
17087: PPUSH
17088: CALL_OW 325
17092: NOT
17093: AND
17094: IFFALSE 17123
// missile := Replace ( missile , missile + 1 , 3 ) ;
17096: LD_ADDR_VAR 0 14
17100: PUSH
17101: LD_VAR 0 14
17105: PPUSH
17106: LD_VAR 0 14
17110: PUSH
17111: LD_INT 1
17113: PLUS
17114: PPUSH
17115: LD_INT 3
17117: PPUSH
17118: CALL_OW 1
17122: ST_TO_ADDR
// if missile < 2 then
17123: LD_VAR 0 14
17127: PUSH
17128: LD_INT 2
17130: LESS
17131: IFFALSE 17135
// exit ;
17133: GO 17357
// x := GetX ( enemy ) ;
17135: LD_ADDR_VAR 0 4
17139: PUSH
17140: LD_VAR 0 10
17144: PPUSH
17145: CALL_OW 250
17149: ST_TO_ADDR
// y := GetY ( enemy ) ;
17150: LD_ADDR_VAR 0 5
17154: PUSH
17155: LD_VAR 0 10
17159: PPUSH
17160: CALL_OW 251
17164: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17165: LD_ADDR_VAR 0 6
17169: PUSH
17170: LD_VAR 0 4
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PPUSH
17179: LD_INT 1
17181: PPUSH
17182: CALL_OW 12
17186: PLUS
17187: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17188: LD_ADDR_VAR 0 7
17192: PUSH
17193: LD_VAR 0 5
17197: PUSH
17198: LD_INT 1
17200: NEG
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: CALL_OW 12
17209: PLUS
17210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17211: LD_VAR 0 6
17215: PPUSH
17216: LD_VAR 0 7
17220: PPUSH
17221: CALL_OW 488
17225: NOT
17226: IFFALSE 17248
// begin _x := x ;
17228: LD_ADDR_VAR 0 6
17232: PUSH
17233: LD_VAR 0 4
17237: ST_TO_ADDR
// _y := y ;
17238: LD_ADDR_VAR 0 7
17242: PUSH
17243: LD_VAR 0 5
17247: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17248: LD_ADDR_VAR 0 3
17252: PUSH
17253: LD_INT 1
17255: PPUSH
17256: LD_VAR 0 14
17260: PPUSH
17261: CALL_OW 12
17265: ST_TO_ADDR
// case i of 1 :
17266: LD_VAR 0 3
17270: PUSH
17271: LD_INT 1
17273: DOUBLE
17274: EQUAL
17275: IFTRUE 17279
17277: GO 17296
17279: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_VAR 0 10
17289: PPUSH
17290: CALL_OW 115
17294: GO 17357
17296: LD_INT 2
17298: DOUBLE
17299: EQUAL
17300: IFTRUE 17304
17302: GO 17326
17304: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17305: LD_VAR 0 1
17309: PPUSH
17310: LD_VAR 0 6
17314: PPUSH
17315: LD_VAR 0 7
17319: PPUSH
17320: CALL_OW 153
17324: GO 17357
17326: LD_INT 3
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17334
17332: GO 17356
17334: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17335: LD_VAR 0 1
17339: PPUSH
17340: LD_VAR 0 6
17344: PPUSH
17345: LD_VAR 0 7
17349: PPUSH
17350: CALL_OW 154
17354: GO 17357
17356: POP
// end ;
17357: LD_VAR 0 2
17361: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17362: LD_INT 0
17364: PPUSH
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
// if not unit or not building then
17370: LD_VAR 0 1
17374: NOT
17375: IFTRUE 17384
17377: PUSH
17378: LD_VAR 0 2
17382: NOT
17383: OR
17384: IFFALSE 17388
// exit ;
17386: GO 17546
// x := GetX ( building ) ;
17388: LD_ADDR_VAR 0 5
17392: PUSH
17393: LD_VAR 0 2
17397: PPUSH
17398: CALL_OW 250
17402: ST_TO_ADDR
// y := GetY ( building ) ;
17403: LD_ADDR_VAR 0 6
17407: PUSH
17408: LD_VAR 0 2
17412: PPUSH
17413: CALL_OW 251
17417: ST_TO_ADDR
// for i := 0 to 5 do
17418: LD_ADDR_VAR 0 4
17422: PUSH
17423: DOUBLE
17424: LD_INT 0
17426: DEC
17427: ST_TO_ADDR
17428: LD_INT 5
17430: PUSH
17431: FOR_TO
17432: IFFALSE 17544
// begin _x := ShiftX ( x , i , 3 ) ;
17434: LD_ADDR_VAR 0 7
17438: PUSH
17439: LD_VAR 0 5
17443: PPUSH
17444: LD_VAR 0 4
17448: PPUSH
17449: LD_INT 3
17451: PPUSH
17452: CALL_OW 272
17456: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17457: LD_ADDR_VAR 0 8
17461: PUSH
17462: LD_VAR 0 6
17466: PPUSH
17467: LD_VAR 0 4
17471: PPUSH
17472: LD_INT 3
17474: PPUSH
17475: CALL_OW 273
17479: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17480: LD_VAR 0 7
17484: PPUSH
17485: LD_VAR 0 8
17489: PPUSH
17490: CALL_OW 488
17494: NOT
17495: IFFALSE 17499
// continue ;
17497: GO 17431
// if HexInfo ( _x , _y ) = 0 then
17499: LD_VAR 0 7
17503: PPUSH
17504: LD_VAR 0 8
17508: PPUSH
17509: CALL_OW 428
17513: PUSH
17514: LD_INT 0
17516: EQUAL
17517: IFFALSE 17542
// begin ComMoveXY ( unit , _x , _y ) ;
17519: LD_VAR 0 1
17523: PPUSH
17524: LD_VAR 0 7
17528: PPUSH
17529: LD_VAR 0 8
17533: PPUSH
17534: CALL_OW 111
// exit ;
17538: POP
17539: POP
17540: GO 17546
// end ; end ;
17542: GO 17431
17544: POP
17545: POP
// end ;
17546: LD_VAR 0 3
17550: RET
// export function ScanBase ( side , base_area ) ; begin
17551: LD_INT 0
17553: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17554: LD_ADDR_VAR 0 3
17558: PUSH
17559: LD_VAR 0 2
17563: PPUSH
17564: LD_INT 81
17566: PUSH
17567: LD_VAR 0 1
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 70
17580: ST_TO_ADDR
// end ;
17581: LD_VAR 0 3
17585: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17586: LD_INT 0
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
// result := false ;
17592: LD_ADDR_VAR 0 2
17596: PUSH
17597: LD_INT 0
17599: ST_TO_ADDR
// side := GetSide ( unit ) ;
17600: LD_ADDR_VAR 0 3
17604: PUSH
17605: LD_VAR 0 1
17609: PPUSH
17610: CALL_OW 255
17614: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17615: LD_ADDR_VAR 0 4
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 248
17629: ST_TO_ADDR
// case nat of 1 :
17630: LD_VAR 0 4
17634: PUSH
17635: LD_INT 1
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17643
17641: GO 17654
17643: POP
// tech := tech_lassight ; 2 :
17644: LD_ADDR_VAR 0 5
17648: PUSH
17649: LD_INT 12
17651: ST_TO_ADDR
17652: GO 17693
17654: LD_INT 2
17656: DOUBLE
17657: EQUAL
17658: IFTRUE 17662
17660: GO 17673
17662: POP
// tech := tech_mortar ; 3 :
17663: LD_ADDR_VAR 0 5
17667: PUSH
17668: LD_INT 41
17670: ST_TO_ADDR
17671: GO 17693
17673: LD_INT 3
17675: DOUBLE
17676: EQUAL
17677: IFTRUE 17681
17679: GO 17692
17681: POP
// tech := tech_bazooka ; end ;
17682: LD_ADDR_VAR 0 5
17686: PUSH
17687: LD_INT 44
17689: ST_TO_ADDR
17690: GO 17693
17692: POP
// if Researched ( side , tech ) then
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_VAR 0 5
17702: PPUSH
17703: CALL_OW 325
17707: IFFALSE 17734
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17709: LD_ADDR_VAR 0 2
17713: PUSH
17714: LD_INT 5
17716: PUSH
17717: LD_INT 8
17719: PUSH
17720: LD_INT 9
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: PUSH
17728: LD_VAR 0 4
17732: ARRAY
17733: ST_TO_ADDR
// end ;
17734: LD_VAR 0 2
17738: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17739: LD_INT 0
17741: PPUSH
17742: PPUSH
17743: PPUSH
// if not mines then
17744: LD_VAR 0 2
17748: NOT
17749: IFFALSE 17753
// exit ;
17751: GO 17897
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17753: LD_ADDR_VAR 0 5
17757: PUSH
17758: LD_INT 81
17760: PUSH
17761: LD_VAR 0 1
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: LD_INT 21
17775: PUSH
17776: LD_INT 3
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PPUSH
17791: CALL_OW 69
17795: ST_TO_ADDR
// for i in mines do
17796: LD_ADDR_VAR 0 4
17800: PUSH
17801: LD_VAR 0 2
17805: PUSH
17806: FOR_IN
17807: IFFALSE 17895
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17809: LD_VAR 0 4
17813: PUSH
17814: LD_INT 1
17816: ARRAY
17817: PPUSH
17818: LD_VAR 0 4
17822: PUSH
17823: LD_INT 2
17825: ARRAY
17826: PPUSH
17827: CALL_OW 458
17831: NOT
17832: IFFALSE 17836
// continue ;
17834: GO 17806
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17836: LD_VAR 0 4
17840: PUSH
17841: LD_INT 1
17843: ARRAY
17844: PPUSH
17845: LD_VAR 0 4
17849: PUSH
17850: LD_INT 2
17852: ARRAY
17853: PPUSH
17854: CALL_OW 428
17858: PUSH
17859: LD_VAR 0 5
17863: IN
17864: IFFALSE 17893
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17866: LD_VAR 0 4
17870: PUSH
17871: LD_INT 1
17873: ARRAY
17874: PPUSH
17875: LD_VAR 0 4
17879: PUSH
17880: LD_INT 2
17882: ARRAY
17883: PPUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 456
// end ;
17893: GO 17806
17895: POP
17896: POP
// end ;
17897: LD_VAR 0 3
17901: RET
// export function Count ( array ) ; begin
17902: LD_INT 0
17904: PPUSH
// result := array + 0 ;
17905: LD_ADDR_VAR 0 2
17909: PUSH
17910: LD_VAR 0 1
17914: PUSH
17915: LD_INT 0
17917: PLUS
17918: ST_TO_ADDR
// end ;
17919: LD_VAR 0 2
17923: RET
// export function IsEmpty ( building ) ; begin
17924: LD_INT 0
17926: PPUSH
// if not building then
17927: LD_VAR 0 1
17931: NOT
17932: IFFALSE 17936
// exit ;
17934: GO 17979
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17936: LD_ADDR_VAR 0 2
17940: PUSH
17941: LD_VAR 0 1
17945: PUSH
17946: LD_INT 22
17948: PUSH
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 255
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 58
17965: PUSH
17966: EMPTY
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PPUSH
17973: CALL_OW 69
17977: IN
17978: ST_TO_ADDR
// end ;
17979: LD_VAR 0 2
17983: RET
// export function IsNotFull ( building ) ; var places ; begin
17984: LD_INT 0
17986: PPUSH
17987: PPUSH
// if not building then
17988: LD_VAR 0 1
17992: NOT
17993: IFFALSE 17997
// exit ;
17995: GO 18025
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17997: LD_ADDR_VAR 0 2
18001: PUSH
18002: LD_VAR 0 1
18006: PPUSH
18007: LD_INT 3
18009: PUSH
18010: LD_INT 62
18012: PUSH
18013: EMPTY
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 72
18024: ST_TO_ADDR
// end ;
18025: LD_VAR 0 2
18029: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18030: LD_INT 0
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
// tmp := [ ] ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: EMPTY
18042: ST_TO_ADDR
// list := [ ] ;
18043: LD_ADDR_VAR 0 5
18047: PUSH
18048: EMPTY
18049: ST_TO_ADDR
// for i = 16 to 25 do
18050: LD_ADDR_VAR 0 4
18054: PUSH
18055: DOUBLE
18056: LD_INT 16
18058: DEC
18059: ST_TO_ADDR
18060: LD_INT 25
18062: PUSH
18063: FOR_TO
18064: IFFALSE 18137
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18066: LD_ADDR_VAR 0 3
18070: PUSH
18071: LD_VAR 0 3
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 255
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 91
18095: PUSH
18096: LD_VAR 0 1
18100: PUSH
18101: LD_INT 6
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 30
18111: PUSH
18112: LD_VAR 0 4
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: ADD
18134: ST_TO_ADDR
18135: GO 18063
18137: POP
18138: POP
// for i = 1 to tmp do
18139: LD_ADDR_VAR 0 4
18143: PUSH
18144: DOUBLE
18145: LD_INT 1
18147: DEC
18148: ST_TO_ADDR
18149: LD_VAR 0 3
18153: PUSH
18154: FOR_TO
18155: IFFALSE 18243
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18157: LD_ADDR_VAR 0 5
18161: PUSH
18162: LD_VAR 0 5
18166: PUSH
18167: LD_VAR 0 3
18171: PUSH
18172: LD_VAR 0 4
18176: ARRAY
18177: PPUSH
18178: CALL_OW 266
18182: PUSH
18183: LD_VAR 0 3
18187: PUSH
18188: LD_VAR 0 4
18192: ARRAY
18193: PPUSH
18194: CALL_OW 250
18198: PUSH
18199: LD_VAR 0 3
18203: PUSH
18204: LD_VAR 0 4
18208: ARRAY
18209: PPUSH
18210: CALL_OW 251
18214: PUSH
18215: LD_VAR 0 3
18219: PUSH
18220: LD_VAR 0 4
18224: ARRAY
18225: PPUSH
18226: CALL_OW 254
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: ADD
18240: ST_TO_ADDR
18241: GO 18154
18243: POP
18244: POP
// result := list ;
18245: LD_ADDR_VAR 0 2
18249: PUSH
18250: LD_VAR 0 5
18254: ST_TO_ADDR
// end ;
18255: LD_VAR 0 2
18259: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18260: LD_INT 0
18262: PPUSH
18263: PPUSH
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
// if not factory then
18269: LD_VAR 0 1
18273: NOT
18274: IFFALSE 18278
// exit ;
18276: GO 18881
// if control = control_apeman then
18278: LD_VAR 0 4
18282: PUSH
18283: LD_INT 5
18285: EQUAL
18286: IFFALSE 18395
// begin tmp := UnitsInside ( factory ) ;
18288: LD_ADDR_VAR 0 8
18292: PUSH
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 313
18302: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18303: LD_VAR 0 8
18307: PPUSH
18308: LD_INT 25
18310: PUSH
18311: LD_INT 12
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PPUSH
18318: CALL_OW 72
18322: NOT
18323: IFFALSE 18333
// control := control_manual ;
18325: LD_ADDR_VAR 0 4
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18333: LD_ADDR_VAR 0 8
18337: PUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL 18030 0 1
18347: ST_TO_ADDR
// if tmp then
18348: LD_VAR 0 8
18352: IFFALSE 18395
// begin for i in tmp do
18354: LD_ADDR_VAR 0 7
18358: PUSH
18359: LD_VAR 0 8
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18393
// if i [ 1 ] = b_ext_radio then
18367: LD_VAR 0 7
18371: PUSH
18372: LD_INT 1
18374: ARRAY
18375: PUSH
18376: LD_INT 22
18378: EQUAL
18379: IFFALSE 18391
// begin control := control_remote ;
18381: LD_ADDR_VAR 0 4
18385: PUSH
18386: LD_INT 2
18388: ST_TO_ADDR
// break ;
18389: GO 18393
// end ;
18391: GO 18364
18393: POP
18394: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18395: LD_VAR 0 1
18399: PPUSH
18400: LD_VAR 0 2
18404: PPUSH
18405: LD_VAR 0 3
18409: PPUSH
18410: LD_VAR 0 4
18414: PPUSH
18415: LD_VAR 0 5
18419: PPUSH
18420: CALL_OW 448
18424: IFFALSE 18459
// begin result := [ chassis , engine , control , weapon ] ;
18426: LD_ADDR_VAR 0 6
18430: PUSH
18431: LD_VAR 0 2
18435: PUSH
18436: LD_VAR 0 3
18440: PUSH
18441: LD_VAR 0 4
18445: PUSH
18446: LD_VAR 0 5
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: ST_TO_ADDR
// exit ;
18457: GO 18881
// end ; _chassis := AvailableChassisList ( factory ) ;
18459: LD_ADDR_VAR 0 9
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 475
18473: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18474: LD_ADDR_VAR 0 11
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 476
18488: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18489: LD_ADDR_VAR 0 12
18493: PUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 477
18503: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18504: LD_ADDR_VAR 0 10
18508: PUSH
18509: LD_VAR 0 1
18513: PPUSH
18514: CALL_OW 478
18518: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18519: LD_VAR 0 9
18523: NOT
18524: IFTRUE 18533
18526: PUSH
18527: LD_VAR 0 11
18531: NOT
18532: OR
18533: IFTRUE 18542
18535: PUSH
18536: LD_VAR 0 12
18540: NOT
18541: OR
18542: IFTRUE 18551
18544: PUSH
18545: LD_VAR 0 10
18549: NOT
18550: OR
18551: IFFALSE 18586
// begin result := [ chassis , engine , control , weapon ] ;
18553: LD_ADDR_VAR 0 6
18557: PUSH
18558: LD_VAR 0 2
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 4
18572: PUSH
18573: LD_VAR 0 5
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: ST_TO_ADDR
// exit ;
18584: GO 18881
// end ; if not chassis in _chassis then
18586: LD_VAR 0 2
18590: PUSH
18591: LD_VAR 0 9
18595: IN
18596: NOT
18597: IFFALSE 18623
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18599: LD_ADDR_VAR 0 2
18603: PUSH
18604: LD_VAR 0 9
18608: PUSH
18609: LD_INT 1
18611: PPUSH
18612: LD_VAR 0 9
18616: PPUSH
18617: CALL_OW 12
18621: ARRAY
18622: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18623: LD_VAR 0 2
18627: PPUSH
18628: LD_VAR 0 3
18632: PPUSH
18633: CALL 18886 0 2
18637: NOT
18638: IFFALSE 18699
// repeat engine := _engine [ 1 ] ;
18640: LD_ADDR_VAR 0 3
18644: PUSH
18645: LD_VAR 0 11
18649: PUSH
18650: LD_INT 1
18652: ARRAY
18653: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18654: LD_ADDR_VAR 0 11
18658: PUSH
18659: LD_VAR 0 11
18663: PPUSH
18664: LD_INT 1
18666: PPUSH
18667: CALL_OW 3
18671: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18672: LD_VAR 0 2
18676: PPUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: CALL 18886 0 2
18686: IFTRUE 18697
18688: PUSH
18689: LD_VAR 0 11
18693: PUSH
18694: EMPTY
18695: EQUAL
18696: OR
18697: IFFALSE 18640
// if not control in _control then
18699: LD_VAR 0 4
18703: PUSH
18704: LD_VAR 0 12
18708: IN
18709: NOT
18710: IFFALSE 18736
// control := _control [ rand ( 1 , _control ) ] ;
18712: LD_ADDR_VAR 0 4
18716: PUSH
18717: LD_VAR 0 12
18721: PUSH
18722: LD_INT 1
18724: PPUSH
18725: LD_VAR 0 12
18729: PPUSH
18730: CALL_OW 12
18734: ARRAY
18735: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18736: LD_VAR 0 2
18740: PPUSH
18741: LD_VAR 0 5
18745: PPUSH
18746: CALL 19108 0 2
18750: NOT
18751: IFFALSE 18812
// repeat weapon := _weapon [ 1 ] ;
18753: LD_ADDR_VAR 0 5
18757: PUSH
18758: LD_VAR 0 10
18762: PUSH
18763: LD_INT 1
18765: ARRAY
18766: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18767: LD_ADDR_VAR 0 10
18771: PUSH
18772: LD_VAR 0 10
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: CALL_OW 3
18784: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18785: LD_VAR 0 2
18789: PPUSH
18790: LD_VAR 0 5
18794: PPUSH
18795: CALL 19108 0 2
18799: IFTRUE 18810
18801: PUSH
18802: LD_VAR 0 10
18806: PUSH
18807: EMPTY
18808: EQUAL
18809: OR
18810: IFFALSE 18753
// result := [ ] ;
18812: LD_ADDR_VAR 0 6
18816: PUSH
18817: EMPTY
18818: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18819: LD_VAR 0 1
18823: PPUSH
18824: LD_VAR 0 2
18828: PPUSH
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_VAR 0 4
18838: PPUSH
18839: LD_VAR 0 5
18843: PPUSH
18844: CALL_OW 448
18848: IFFALSE 18881
// result := [ chassis , engine , control , weapon ] ;
18850: LD_ADDR_VAR 0 6
18854: PUSH
18855: LD_VAR 0 2
18859: PUSH
18860: LD_VAR 0 3
18864: PUSH
18865: LD_VAR 0 4
18869: PUSH
18870: LD_VAR 0 5
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: ST_TO_ADDR
// end ;
18881: LD_VAR 0 6
18885: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18886: LD_INT 0
18888: PPUSH
// if not chassis or not engine then
18889: LD_VAR 0 1
18893: NOT
18894: IFTRUE 18903
18896: PUSH
18897: LD_VAR 0 2
18901: NOT
18902: OR
18903: IFFALSE 18907
// exit ;
18905: GO 19103
// case engine of engine_solar :
18907: LD_VAR 0 2
18911: PUSH
18912: LD_INT 2
18914: DOUBLE
18915: EQUAL
18916: IFTRUE 18920
18918: GO 18958
18920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18921: LD_ADDR_VAR 0 3
18925: PUSH
18926: LD_INT 11
18928: PUSH
18929: LD_INT 12
18931: PUSH
18932: LD_INT 13
18934: PUSH
18935: LD_INT 14
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: LD_INT 3
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: ST_TO_ADDR
18956: GO 19087
18958: LD_INT 1
18960: DOUBLE
18961: EQUAL
18962: IFTRUE 18966
18964: GO 19028
18966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18967: LD_ADDR_VAR 0 3
18971: PUSH
18972: LD_INT 11
18974: PUSH
18975: LD_INT 12
18977: PUSH
18978: LD_INT 13
18980: PUSH
18981: LD_INT 14
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: LD_INT 3
18992: PUSH
18993: LD_INT 4
18995: PUSH
18996: LD_INT 5
18998: PUSH
18999: LD_INT 21
19001: PUSH
19002: LD_INT 23
19004: PUSH
19005: LD_INT 22
19007: PUSH
19008: LD_INT 24
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 19087
19028: LD_INT 3
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19086
19036: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19037: LD_ADDR_VAR 0 3
19041: PUSH
19042: LD_INT 13
19044: PUSH
19045: LD_INT 14
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: LD_INT 3
19053: PUSH
19054: LD_INT 4
19056: PUSH
19057: LD_INT 5
19059: PUSH
19060: LD_INT 21
19062: PUSH
19063: LD_INT 22
19065: PUSH
19066: LD_INT 23
19068: PUSH
19069: LD_INT 24
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: ST_TO_ADDR
19084: GO 19087
19086: POP
// result := ( chassis in result ) ;
19087: LD_ADDR_VAR 0 3
19091: PUSH
19092: LD_VAR 0 1
19096: PUSH
19097: LD_VAR 0 3
19101: IN
19102: ST_TO_ADDR
// end ;
19103: LD_VAR 0 3
19107: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19108: LD_INT 0
19110: PPUSH
// if not chassis or not weapon then
19111: LD_VAR 0 1
19115: NOT
19116: IFTRUE 19125
19118: PUSH
19119: LD_VAR 0 2
19123: NOT
19124: OR
19125: IFFALSE 19129
// exit ;
19127: GO 20189
// case weapon of us_machine_gun :
19129: LD_VAR 0 2
19133: PUSH
19134: LD_INT 2
19136: DOUBLE
19137: EQUAL
19138: IFTRUE 19142
19140: GO 19172
19142: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19143: LD_ADDR_VAR 0 3
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 3
19156: PUSH
19157: LD_INT 4
19159: PUSH
19160: LD_INT 5
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: ST_TO_ADDR
19170: GO 20173
19172: LD_INT 3
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19210
19180: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19181: LD_ADDR_VAR 0 3
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: LD_INT 4
19197: PUSH
19198: LD_INT 5
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
19208: GO 20173
19210: LD_INT 11
19212: DOUBLE
19213: EQUAL
19214: IFTRUE 19218
19216: GO 19248
19218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19219: LD_ADDR_VAR 0 3
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: LD_INT 3
19232: PUSH
19233: LD_INT 4
19235: PUSH
19236: LD_INT 5
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: ST_TO_ADDR
19246: GO 20173
19248: LD_INT 4
19250: DOUBLE
19251: EQUAL
19252: IFTRUE 19256
19254: GO 19282
19256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19257: LD_ADDR_VAR 0 3
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: LD_INT 3
19267: PUSH
19268: LD_INT 4
19270: PUSH
19271: LD_INT 5
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: ST_TO_ADDR
19280: GO 20173
19282: LD_INT 5
19284: DOUBLE
19285: EQUAL
19286: IFTRUE 19290
19288: GO 19316
19290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19291: LD_ADDR_VAR 0 3
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 3
19301: PUSH
19302: LD_INT 4
19304: PUSH
19305: LD_INT 5
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: ST_TO_ADDR
19314: GO 20173
19316: LD_INT 9
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19350
19324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19325: LD_ADDR_VAR 0 3
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 3
19335: PUSH
19336: LD_INT 4
19338: PUSH
19339: LD_INT 5
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: ST_TO_ADDR
19348: GO 20173
19350: LD_INT 7
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19384
19358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19359: LD_ADDR_VAR 0 3
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: LD_INT 3
19369: PUSH
19370: LD_INT 4
19372: PUSH
19373: LD_INT 5
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: ST_TO_ADDR
19382: GO 20173
19384: LD_INT 12
19386: DOUBLE
19387: EQUAL
19388: IFTRUE 19392
19390: GO 19418
19392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19393: LD_ADDR_VAR 0 3
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 3
19403: PUSH
19404: LD_INT 4
19406: PUSH
19407: LD_INT 5
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: ST_TO_ADDR
19416: GO 20173
19418: LD_INT 13
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19452
19426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: LD_INT 3
19437: PUSH
19438: LD_INT 4
19440: PUSH
19441: LD_INT 5
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: ST_TO_ADDR
19450: GO 20173
19452: LD_INT 14
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19478
19460: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_INT 4
19468: PUSH
19469: LD_INT 5
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: ST_TO_ADDR
19476: GO 20173
19478: LD_INT 6
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19504
19486: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19487: LD_ADDR_VAR 0 3
19491: PUSH
19492: LD_INT 4
19494: PUSH
19495: LD_INT 5
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: ST_TO_ADDR
19502: GO 20173
19504: LD_INT 10
19506: DOUBLE
19507: EQUAL
19508: IFTRUE 19512
19510: GO 19530
19512: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19513: LD_ADDR_VAR 0 3
19517: PUSH
19518: LD_INT 4
19520: PUSH
19521: LD_INT 5
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: ST_TO_ADDR
19528: GO 20173
19530: LD_INT 22
19532: DOUBLE
19533: EQUAL
19534: IFTRUE 19538
19536: GO 19564
19538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19539: LD_ADDR_VAR 0 3
19543: PUSH
19544: LD_INT 11
19546: PUSH
19547: LD_INT 12
19549: PUSH
19550: LD_INT 13
19552: PUSH
19553: LD_INT 14
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: ST_TO_ADDR
19562: GO 20173
19564: LD_INT 23
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19598
19572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: LD_INT 11
19580: PUSH
19581: LD_INT 12
19583: PUSH
19584: LD_INT 13
19586: PUSH
19587: LD_INT 14
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: ST_TO_ADDR
19596: GO 20173
19598: LD_INT 24
19600: DOUBLE
19601: EQUAL
19602: IFTRUE 19606
19604: GO 19632
19606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: LD_INT 11
19614: PUSH
19615: LD_INT 12
19617: PUSH
19618: LD_INT 13
19620: PUSH
19621: LD_INT 14
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: ST_TO_ADDR
19630: GO 20173
19632: LD_INT 30
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19666
19640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 11
19648: PUSH
19649: LD_INT 12
19651: PUSH
19652: LD_INT 13
19654: PUSH
19655: LD_INT 14
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: ST_TO_ADDR
19664: GO 20173
19666: LD_INT 25
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19692
19674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19675: LD_ADDR_VAR 0 3
19679: PUSH
19680: LD_INT 13
19682: PUSH
19683: LD_INT 14
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: ST_TO_ADDR
19690: GO 20173
19692: LD_INT 27
19694: DOUBLE
19695: EQUAL
19696: IFTRUE 19700
19698: GO 19718
19700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19701: LD_ADDR_VAR 0 3
19705: PUSH
19706: LD_INT 13
19708: PUSH
19709: LD_INT 14
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: ST_TO_ADDR
19716: GO 20173
19718: LD_INT 92
19720: DOUBLE
19721: EQUAL
19722: IFTRUE 19726
19724: GO 19752
19726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19727: LD_ADDR_VAR 0 3
19731: PUSH
19732: LD_INT 11
19734: PUSH
19735: LD_INT 12
19737: PUSH
19738: LD_INT 13
19740: PUSH
19741: LD_INT 14
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: ST_TO_ADDR
19750: GO 20173
19752: LD_INT 28
19754: DOUBLE
19755: EQUAL
19756: IFTRUE 19760
19758: GO 19778
19760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19761: LD_ADDR_VAR 0 3
19765: PUSH
19766: LD_INT 13
19768: PUSH
19769: LD_INT 14
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: ST_TO_ADDR
19776: GO 20173
19778: LD_INT 29
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19804
19786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19787: LD_ADDR_VAR 0 3
19791: PUSH
19792: LD_INT 13
19794: PUSH
19795: LD_INT 14
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: ST_TO_ADDR
19802: GO 20173
19804: LD_INT 31
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19830
19812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19813: LD_ADDR_VAR 0 3
19817: PUSH
19818: LD_INT 13
19820: PUSH
19821: LD_INT 14
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: ST_TO_ADDR
19828: GO 20173
19830: LD_INT 26
19832: DOUBLE
19833: EQUAL
19834: IFTRUE 19838
19836: GO 19856
19838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19839: LD_ADDR_VAR 0 3
19843: PUSH
19844: LD_INT 13
19846: PUSH
19847: LD_INT 14
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: ST_TO_ADDR
19854: GO 20173
19856: LD_INT 42
19858: DOUBLE
19859: EQUAL
19860: IFTRUE 19864
19862: GO 19890
19864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19865: LD_ADDR_VAR 0 3
19869: PUSH
19870: LD_INT 21
19872: PUSH
19873: LD_INT 22
19875: PUSH
19876: LD_INT 23
19878: PUSH
19879: LD_INT 24
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: ST_TO_ADDR
19888: GO 20173
19890: LD_INT 43
19892: DOUBLE
19893: EQUAL
19894: IFTRUE 19898
19896: GO 19924
19898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19899: LD_ADDR_VAR 0 3
19903: PUSH
19904: LD_INT 21
19906: PUSH
19907: LD_INT 22
19909: PUSH
19910: LD_INT 23
19912: PUSH
19913: LD_INT 24
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: ST_TO_ADDR
19922: GO 20173
19924: LD_INT 44
19926: DOUBLE
19927: EQUAL
19928: IFTRUE 19932
19930: GO 19958
19932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19933: LD_ADDR_VAR 0 3
19937: PUSH
19938: LD_INT 21
19940: PUSH
19941: LD_INT 22
19943: PUSH
19944: LD_INT 23
19946: PUSH
19947: LD_INT 24
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: ST_TO_ADDR
19956: GO 20173
19958: LD_INT 45
19960: DOUBLE
19961: EQUAL
19962: IFTRUE 19966
19964: GO 19992
19966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19967: LD_ADDR_VAR 0 3
19971: PUSH
19972: LD_INT 21
19974: PUSH
19975: LD_INT 22
19977: PUSH
19978: LD_INT 23
19980: PUSH
19981: LD_INT 24
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: ST_TO_ADDR
19990: GO 20173
19992: LD_INT 49
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20026
20000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20001: LD_ADDR_VAR 0 3
20005: PUSH
20006: LD_INT 21
20008: PUSH
20009: LD_INT 22
20011: PUSH
20012: LD_INT 23
20014: PUSH
20015: LD_INT 24
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: ST_TO_ADDR
20024: GO 20173
20026: LD_INT 51
20028: DOUBLE
20029: EQUAL
20030: IFTRUE 20034
20032: GO 20060
20034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20035: LD_ADDR_VAR 0 3
20039: PUSH
20040: LD_INT 21
20042: PUSH
20043: LD_INT 22
20045: PUSH
20046: LD_INT 23
20048: PUSH
20049: LD_INT 24
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: ST_TO_ADDR
20058: GO 20173
20060: LD_INT 52
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20094
20068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20069: LD_ADDR_VAR 0 3
20073: PUSH
20074: LD_INT 21
20076: PUSH
20077: LD_INT 22
20079: PUSH
20080: LD_INT 23
20082: PUSH
20083: LD_INT 24
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: ST_TO_ADDR
20092: GO 20173
20094: LD_INT 53
20096: DOUBLE
20097: EQUAL
20098: IFTRUE 20102
20100: GO 20120
20102: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20103: LD_ADDR_VAR 0 3
20107: PUSH
20108: LD_INT 23
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: ST_TO_ADDR
20118: GO 20173
20120: LD_INT 46
20122: DOUBLE
20123: EQUAL
20124: IFTRUE 20128
20126: GO 20146
20128: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20129: LD_ADDR_VAR 0 3
20133: PUSH
20134: LD_INT 23
20136: PUSH
20137: LD_INT 24
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: ST_TO_ADDR
20144: GO 20173
20146: LD_INT 47
20148: DOUBLE
20149: EQUAL
20150: IFTRUE 20154
20152: GO 20172
20154: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20155: LD_ADDR_VAR 0 3
20159: PUSH
20160: LD_INT 23
20162: PUSH
20163: LD_INT 24
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: ST_TO_ADDR
20170: GO 20173
20172: POP
// result := ( chassis in result ) ;
20173: LD_ADDR_VAR 0 3
20177: PUSH
20178: LD_VAR 0 1
20182: PUSH
20183: LD_VAR 0 3
20187: IN
20188: ST_TO_ADDR
// end ;
20189: LD_VAR 0 3
20193: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20194: LD_INT 0
20196: PPUSH
20197: PPUSH
20198: PPUSH
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
// result := array ;
20203: LD_ADDR_VAR 0 5
20207: PUSH
20208: LD_VAR 0 1
20212: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20213: LD_VAR 0 1
20217: NOT
20218: IFTRUE 20227
20220: PUSH
20221: LD_VAR 0 2
20225: NOT
20226: OR
20227: IFTRUE 20236
20229: PUSH
20230: LD_VAR 0 3
20234: NOT
20235: OR
20236: IFTRUE 20250
20238: PUSH
20239: LD_VAR 0 2
20243: PUSH
20244: LD_VAR 0 1
20248: GREATER
20249: OR
20250: IFTRUE 20264
20252: PUSH
20253: LD_VAR 0 3
20257: PUSH
20258: LD_VAR 0 1
20262: GREATER
20263: OR
20264: IFFALSE 20268
// exit ;
20266: GO 20564
// if direction then
20268: LD_VAR 0 4
20272: IFFALSE 20336
// begin d := 1 ;
20274: LD_ADDR_VAR 0 9
20278: PUSH
20279: LD_INT 1
20281: ST_TO_ADDR
// if i_from > i_to then
20282: LD_VAR 0 2
20286: PUSH
20287: LD_VAR 0 3
20291: GREATER
20292: IFFALSE 20318
// length := ( array - i_from ) + i_to else
20294: LD_ADDR_VAR 0 11
20298: PUSH
20299: LD_VAR 0 1
20303: PUSH
20304: LD_VAR 0 2
20308: MINUS
20309: PUSH
20310: LD_VAR 0 3
20314: PLUS
20315: ST_TO_ADDR
20316: GO 20334
// length := i_to - i_from ;
20318: LD_ADDR_VAR 0 11
20322: PUSH
20323: LD_VAR 0 3
20327: PUSH
20328: LD_VAR 0 2
20332: MINUS
20333: ST_TO_ADDR
// end else
20334: GO 20397
// begin d := - 1 ;
20336: LD_ADDR_VAR 0 9
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: ST_TO_ADDR
// if i_from > i_to then
20345: LD_VAR 0 2
20349: PUSH
20350: LD_VAR 0 3
20354: GREATER
20355: IFFALSE 20375
// length := i_from - i_to else
20357: LD_ADDR_VAR 0 11
20361: PUSH
20362: LD_VAR 0 2
20366: PUSH
20367: LD_VAR 0 3
20371: MINUS
20372: ST_TO_ADDR
20373: GO 20397
// length := ( array - i_to ) + i_from ;
20375: LD_ADDR_VAR 0 11
20379: PUSH
20380: LD_VAR 0 1
20384: PUSH
20385: LD_VAR 0 3
20389: MINUS
20390: PUSH
20391: LD_VAR 0 2
20395: PLUS
20396: ST_TO_ADDR
// end ; if not length then
20397: LD_VAR 0 11
20401: NOT
20402: IFFALSE 20406
// exit ;
20404: GO 20564
// tmp := array ;
20406: LD_ADDR_VAR 0 10
20410: PUSH
20411: LD_VAR 0 1
20415: ST_TO_ADDR
// for i = 1 to length do
20416: LD_ADDR_VAR 0 6
20420: PUSH
20421: DOUBLE
20422: LD_INT 1
20424: DEC
20425: ST_TO_ADDR
20426: LD_VAR 0 11
20430: PUSH
20431: FOR_TO
20432: IFFALSE 20552
// begin for j = 1 to array do
20434: LD_ADDR_VAR 0 7
20438: PUSH
20439: DOUBLE
20440: LD_INT 1
20442: DEC
20443: ST_TO_ADDR
20444: LD_VAR 0 1
20448: PUSH
20449: FOR_TO
20450: IFFALSE 20538
// begin k := j + d ;
20452: LD_ADDR_VAR 0 8
20456: PUSH
20457: LD_VAR 0 7
20461: PUSH
20462: LD_VAR 0 9
20466: PLUS
20467: ST_TO_ADDR
// if k > array then
20468: LD_VAR 0 8
20472: PUSH
20473: LD_VAR 0 1
20477: GREATER
20478: IFFALSE 20488
// k := 1 ;
20480: LD_ADDR_VAR 0 8
20484: PUSH
20485: LD_INT 1
20487: ST_TO_ADDR
// if not k then
20488: LD_VAR 0 8
20492: NOT
20493: IFFALSE 20505
// k := array ;
20495: LD_ADDR_VAR 0 8
20499: PUSH
20500: LD_VAR 0 1
20504: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20505: LD_ADDR_VAR 0 10
20509: PUSH
20510: LD_VAR 0 10
20514: PPUSH
20515: LD_VAR 0 8
20519: PPUSH
20520: LD_VAR 0 1
20524: PUSH
20525: LD_VAR 0 7
20529: ARRAY
20530: PPUSH
20531: CALL_OW 1
20535: ST_TO_ADDR
// end ;
20536: GO 20449
20538: POP
20539: POP
// array := tmp ;
20540: LD_ADDR_VAR 0 1
20544: PUSH
20545: LD_VAR 0 10
20549: ST_TO_ADDR
// end ;
20550: GO 20431
20552: POP
20553: POP
// result := array ;
20554: LD_ADDR_VAR 0 5
20558: PUSH
20559: LD_VAR 0 1
20563: ST_TO_ADDR
// end ;
20564: LD_VAR 0 5
20568: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20569: LD_INT 0
20571: PPUSH
20572: PPUSH
// result := 0 ;
20573: LD_ADDR_VAR 0 3
20577: PUSH
20578: LD_INT 0
20580: ST_TO_ADDR
// if not array or not value in array then
20581: LD_VAR 0 1
20585: NOT
20586: IFTRUE 20601
20588: PUSH
20589: LD_VAR 0 2
20593: PUSH
20594: LD_VAR 0 1
20598: IN
20599: NOT
20600: OR
20601: IFFALSE 20605
// exit ;
20603: GO 20659
// for i = 1 to array do
20605: LD_ADDR_VAR 0 4
20609: PUSH
20610: DOUBLE
20611: LD_INT 1
20613: DEC
20614: ST_TO_ADDR
20615: LD_VAR 0 1
20619: PUSH
20620: FOR_TO
20621: IFFALSE 20657
// if value = array [ i ] then
20623: LD_VAR 0 2
20627: PUSH
20628: LD_VAR 0 1
20632: PUSH
20633: LD_VAR 0 4
20637: ARRAY
20638: EQUAL
20639: IFFALSE 20655
// begin result := i ;
20641: LD_ADDR_VAR 0 3
20645: PUSH
20646: LD_VAR 0 4
20650: ST_TO_ADDR
// exit ;
20651: POP
20652: POP
20653: GO 20659
// end ;
20655: GO 20620
20657: POP
20658: POP
// end ;
20659: LD_VAR 0 3
20663: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20664: LD_INT 0
20666: PPUSH
// vc_chassis := chassis ;
20667: LD_ADDR_OWVAR 37
20671: PUSH
20672: LD_VAR 0 1
20676: ST_TO_ADDR
// vc_engine := engine ;
20677: LD_ADDR_OWVAR 39
20681: PUSH
20682: LD_VAR 0 2
20686: ST_TO_ADDR
// vc_control := control ;
20687: LD_ADDR_OWVAR 38
20691: PUSH
20692: LD_VAR 0 3
20696: ST_TO_ADDR
// vc_weapon := weapon ;
20697: LD_ADDR_OWVAR 40
20701: PUSH
20702: LD_VAR 0 4
20706: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20707: LD_ADDR_OWVAR 41
20711: PUSH
20712: LD_VAR 0 5
20716: ST_TO_ADDR
// end ;
20717: LD_VAR 0 6
20721: RET
// export function WantPlant ( unit ) ; var task ; begin
20722: LD_INT 0
20724: PPUSH
20725: PPUSH
// result := false ;
20726: LD_ADDR_VAR 0 2
20730: PUSH
20731: LD_INT 0
20733: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20734: LD_ADDR_VAR 0 3
20738: PUSH
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 437
20748: ST_TO_ADDR
// if task then
20749: LD_VAR 0 3
20753: IFFALSE 20781
// if task [ 1 ] [ 1 ] = p then
20755: LD_VAR 0 3
20759: PUSH
20760: LD_INT 1
20762: ARRAY
20763: PUSH
20764: LD_INT 1
20766: ARRAY
20767: PUSH
20768: LD_STRING p
20770: EQUAL
20771: IFFALSE 20781
// result := true ;
20773: LD_ADDR_VAR 0 2
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// end ;
20781: LD_VAR 0 2
20785: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// if pos < 1 then
20792: LD_VAR 0 2
20796: PUSH
20797: LD_INT 1
20799: LESS
20800: IFFALSE 20804
// exit ;
20802: GO 21107
// if pos = 1 then
20804: LD_VAR 0 2
20808: PUSH
20809: LD_INT 1
20811: EQUAL
20812: IFFALSE 20845
// result := Replace ( arr , pos [ 1 ] , value ) else
20814: LD_ADDR_VAR 0 4
20818: PUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: LD_VAR 0 2
20828: PUSH
20829: LD_INT 1
20831: ARRAY
20832: PPUSH
20833: LD_VAR 0 3
20837: PPUSH
20838: CALL_OW 1
20842: ST_TO_ADDR
20843: GO 21107
// begin tmp := arr ;
20845: LD_ADDR_VAR 0 6
20849: PUSH
20850: LD_VAR 0 1
20854: ST_TO_ADDR
// s_arr := [ tmp ] ;
20855: LD_ADDR_VAR 0 7
20859: PUSH
20860: LD_VAR 0 6
20864: PUSH
20865: EMPTY
20866: LIST
20867: ST_TO_ADDR
// for i = 1 to pos - 1 do
20868: LD_ADDR_VAR 0 5
20872: PUSH
20873: DOUBLE
20874: LD_INT 1
20876: DEC
20877: ST_TO_ADDR
20878: LD_VAR 0 2
20882: PUSH
20883: LD_INT 1
20885: MINUS
20886: PUSH
20887: FOR_TO
20888: IFFALSE 20933
// begin tmp := tmp [ pos [ i ] ] ;
20890: LD_ADDR_VAR 0 6
20894: PUSH
20895: LD_VAR 0 6
20899: PUSH
20900: LD_VAR 0 2
20904: PUSH
20905: LD_VAR 0 5
20909: ARRAY
20910: ARRAY
20911: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20912: LD_ADDR_VAR 0 7
20916: PUSH
20917: LD_VAR 0 7
20921: PUSH
20922: LD_VAR 0 6
20926: PUSH
20927: EMPTY
20928: LIST
20929: ADD
20930: ST_TO_ADDR
// end ;
20931: GO 20887
20933: POP
20934: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: LD_VAR 0 6
20944: PPUSH
20945: LD_VAR 0 2
20949: PUSH
20950: LD_VAR 0 2
20954: ARRAY
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: CALL_OW 1
20965: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20966: LD_ADDR_VAR 0 7
20970: PUSH
20971: LD_VAR 0 7
20975: PPUSH
20976: LD_VAR 0 7
20980: PPUSH
20981: LD_VAR 0 6
20985: PPUSH
20986: CALL_OW 1
20990: ST_TO_ADDR
// for i = s_arr downto 2 do
20991: LD_ADDR_VAR 0 5
20995: PUSH
20996: DOUBLE
20997: LD_VAR 0 7
21001: INC
21002: ST_TO_ADDR
21003: LD_INT 2
21005: PUSH
21006: FOR_DOWNTO
21007: IFFALSE 21091
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21009: LD_ADDR_VAR 0 6
21013: PUSH
21014: LD_VAR 0 7
21018: PUSH
21019: LD_VAR 0 5
21023: PUSH
21024: LD_INT 1
21026: MINUS
21027: ARRAY
21028: PPUSH
21029: LD_VAR 0 2
21033: PUSH
21034: LD_VAR 0 5
21038: PUSH
21039: LD_INT 1
21041: MINUS
21042: ARRAY
21043: PPUSH
21044: LD_VAR 0 7
21048: PUSH
21049: LD_VAR 0 5
21053: ARRAY
21054: PPUSH
21055: CALL_OW 1
21059: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21060: LD_ADDR_VAR 0 7
21064: PUSH
21065: LD_VAR 0 7
21069: PPUSH
21070: LD_VAR 0 5
21074: PUSH
21075: LD_INT 1
21077: MINUS
21078: PPUSH
21079: LD_VAR 0 6
21083: PPUSH
21084: CALL_OW 1
21088: ST_TO_ADDR
// end ;
21089: GO 21006
21091: POP
21092: POP
// result := s_arr [ 1 ] ;
21093: LD_ADDR_VAR 0 4
21097: PUSH
21098: LD_VAR 0 7
21102: PUSH
21103: LD_INT 1
21105: ARRAY
21106: ST_TO_ADDR
// end ; end ;
21107: LD_VAR 0 4
21111: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21112: LD_INT 0
21114: PPUSH
21115: PPUSH
// if not list then
21116: LD_VAR 0 1
21120: NOT
21121: IFFALSE 21125
// exit ;
21123: GO 21216
// i := list [ pos1 ] ;
21125: LD_ADDR_VAR 0 5
21129: PUSH
21130: LD_VAR 0 1
21134: PUSH
21135: LD_VAR 0 2
21139: ARRAY
21140: ST_TO_ADDR
// if not i then
21141: LD_VAR 0 5
21145: NOT
21146: IFFALSE 21150
// exit ;
21148: GO 21216
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21150: LD_ADDR_VAR 0 1
21154: PUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: LD_VAR 0 2
21164: PPUSH
21165: LD_VAR 0 1
21169: PUSH
21170: LD_VAR 0 3
21174: ARRAY
21175: PPUSH
21176: CALL_OW 1
21180: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21181: LD_ADDR_VAR 0 1
21185: PUSH
21186: LD_VAR 0 1
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: LD_VAR 0 5
21200: PPUSH
21201: CALL_OW 1
21205: ST_TO_ADDR
// result := list ;
21206: LD_ADDR_VAR 0 4
21210: PUSH
21211: LD_VAR 0 1
21215: ST_TO_ADDR
// end ;
21216: LD_VAR 0 4
21220: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21221: LD_INT 0
21223: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21224: LD_ADDR_VAR 0 5
21228: PUSH
21229: LD_VAR 0 1
21233: PPUSH
21234: CALL_OW 250
21238: PPUSH
21239: LD_VAR 0 1
21243: PPUSH
21244: CALL_OW 251
21248: PPUSH
21249: LD_VAR 0 2
21253: PPUSH
21254: LD_VAR 0 3
21258: PPUSH
21259: LD_VAR 0 4
21263: PPUSH
21264: CALL 21646 0 5
21268: ST_TO_ADDR
// end ;
21269: LD_VAR 0 5
21273: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21274: LD_INT 0
21276: PPUSH
21277: PPUSH
21278: PPUSH
21279: PPUSH
// if not list or not unit then
21280: LD_VAR 0 2
21284: NOT
21285: IFTRUE 21294
21287: PUSH
21288: LD_VAR 0 1
21292: NOT
21293: OR
21294: IFFALSE 21298
// exit ;
21296: GO 21641
// result := [ ] ;
21298: LD_ADDR_VAR 0 5
21302: PUSH
21303: EMPTY
21304: ST_TO_ADDR
// for i in list do
21305: LD_ADDR_VAR 0 6
21309: PUSH
21310: LD_VAR 0 2
21314: PUSH
21315: FOR_IN
21316: IFFALSE 21534
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21318: LD_ADDR_VAR 0 8
21322: PUSH
21323: LD_VAR 0 1
21327: PPUSH
21328: LD_VAR 0 6
21332: PUSH
21333: LD_INT 1
21335: ARRAY
21336: PPUSH
21337: LD_VAR 0 6
21341: PUSH
21342: LD_INT 2
21344: ARRAY
21345: PPUSH
21346: CALL_OW 297
21350: ST_TO_ADDR
// if not Count ( result ) then
21351: LD_VAR 0 5
21355: PPUSH
21356: CALL 17902 0 1
21360: NOT
21361: IFFALSE 21394
// begin result := Join ( result , [ i , tmp ] ) ;
21363: LD_ADDR_VAR 0 5
21367: PUSH
21368: LD_VAR 0 5
21372: PPUSH
21373: LD_VAR 0 6
21377: PUSH
21378: LD_VAR 0 8
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PPUSH
21387: CALL 53834 0 2
21391: ST_TO_ADDR
// continue ;
21392: GO 21315
// end ; if result [ result ] [ 2 ] <= tmp then
21394: LD_VAR 0 5
21398: PUSH
21399: LD_VAR 0 5
21403: ARRAY
21404: PUSH
21405: LD_INT 2
21407: ARRAY
21408: PUSH
21409: LD_VAR 0 8
21413: LESSEQUAL
21414: IFFALSE 21447
// result := Join ( result , [ i , tmp ] ) else
21416: LD_ADDR_VAR 0 5
21420: PUSH
21421: LD_VAR 0 5
21425: PPUSH
21426: LD_VAR 0 6
21430: PUSH
21431: LD_VAR 0 8
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PPUSH
21440: CALL 53834 0 2
21444: ST_TO_ADDR
21445: GO 21532
// begin for j := 1 to Count ( result ) do
21447: LD_ADDR_VAR 0 7
21451: PUSH
21452: DOUBLE
21453: LD_INT 1
21455: DEC
21456: ST_TO_ADDR
21457: LD_VAR 0 5
21461: PPUSH
21462: CALL 17902 0 1
21466: PUSH
21467: FOR_TO
21468: IFFALSE 21530
// begin if tmp < result [ j ] [ 2 ] then
21470: LD_VAR 0 8
21474: PUSH
21475: LD_VAR 0 5
21479: PUSH
21480: LD_VAR 0 7
21484: ARRAY
21485: PUSH
21486: LD_INT 2
21488: ARRAY
21489: LESS
21490: IFFALSE 21528
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21492: LD_ADDR_VAR 0 5
21496: PUSH
21497: LD_VAR 0 5
21501: PPUSH
21502: LD_VAR 0 7
21506: PPUSH
21507: LD_VAR 0 6
21511: PUSH
21512: LD_VAR 0 8
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PPUSH
21521: CALL_OW 2
21525: ST_TO_ADDR
// break ;
21526: GO 21530
// end ; end ;
21528: GO 21467
21530: POP
21531: POP
// end ; end ;
21532: GO 21315
21534: POP
21535: POP
// if result and not asc then
21536: LD_VAR 0 5
21540: IFFALSE 21549
21542: PUSH
21543: LD_VAR 0 3
21547: NOT
21548: AND
21549: IFFALSE 21566
// result := ReverseArray ( result ) ;
21551: LD_ADDR_VAR 0 5
21555: PUSH
21556: LD_VAR 0 5
21560: PPUSH
21561: CALL 48924 0 1
21565: ST_TO_ADDR
// tmp := [ ] ;
21566: LD_ADDR_VAR 0 8
21570: PUSH
21571: EMPTY
21572: ST_TO_ADDR
// if mode then
21573: LD_VAR 0 4
21577: IFFALSE 21641
// begin for i := 1 to result do
21579: LD_ADDR_VAR 0 6
21583: PUSH
21584: DOUBLE
21585: LD_INT 1
21587: DEC
21588: ST_TO_ADDR
21589: LD_VAR 0 5
21593: PUSH
21594: FOR_TO
21595: IFFALSE 21629
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21597: LD_ADDR_VAR 0 8
21601: PUSH
21602: LD_VAR 0 8
21606: PPUSH
21607: LD_VAR 0 5
21611: PUSH
21612: LD_VAR 0 6
21616: ARRAY
21617: PUSH
21618: LD_INT 1
21620: ARRAY
21621: PPUSH
21622: CALL 53834 0 2
21626: ST_TO_ADDR
21627: GO 21594
21629: POP
21630: POP
// result := tmp ;
21631: LD_ADDR_VAR 0 5
21635: PUSH
21636: LD_VAR 0 8
21640: ST_TO_ADDR
// end ; end ;
21641: LD_VAR 0 5
21645: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
// if not list then
21652: LD_VAR 0 3
21656: NOT
21657: IFFALSE 21661
// exit ;
21659: GO 22051
// result := [ ] ;
21661: LD_ADDR_VAR 0 6
21665: PUSH
21666: EMPTY
21667: ST_TO_ADDR
// for i in list do
21668: LD_ADDR_VAR 0 7
21672: PUSH
21673: LD_VAR 0 3
21677: PUSH
21678: FOR_IN
21679: IFFALSE 21881
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21681: LD_ADDR_VAR 0 9
21685: PUSH
21686: LD_VAR 0 7
21690: PPUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: LD_VAR 0 2
21700: PPUSH
21701: CALL_OW 297
21705: ST_TO_ADDR
// if not result then
21706: LD_VAR 0 6
21710: NOT
21711: IFFALSE 21737
// result := [ [ i , tmp ] ] else
21713: LD_ADDR_VAR 0 6
21717: PUSH
21718: LD_VAR 0 7
21722: PUSH
21723: LD_VAR 0 9
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: ST_TO_ADDR
21735: GO 21879
// begin if result [ result ] [ 2 ] <= tmp then
21737: LD_VAR 0 6
21741: PUSH
21742: LD_VAR 0 6
21746: ARRAY
21747: PUSH
21748: LD_INT 2
21750: ARRAY
21751: PUSH
21752: LD_VAR 0 9
21756: LESSEQUAL
21757: IFFALSE 21799
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21759: LD_ADDR_VAR 0 6
21763: PUSH
21764: LD_VAR 0 6
21768: PPUSH
21769: LD_VAR 0 6
21773: PUSH
21774: LD_INT 1
21776: PLUS
21777: PPUSH
21778: LD_VAR 0 7
21782: PUSH
21783: LD_VAR 0 9
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 2
21796: ST_TO_ADDR
21797: GO 21879
// for j := 1 to result do
21799: LD_ADDR_VAR 0 8
21803: PUSH
21804: DOUBLE
21805: LD_INT 1
21807: DEC
21808: ST_TO_ADDR
21809: LD_VAR 0 6
21813: PUSH
21814: FOR_TO
21815: IFFALSE 21877
// begin if tmp < result [ j ] [ 2 ] then
21817: LD_VAR 0 9
21821: PUSH
21822: LD_VAR 0 6
21826: PUSH
21827: LD_VAR 0 8
21831: ARRAY
21832: PUSH
21833: LD_INT 2
21835: ARRAY
21836: LESS
21837: IFFALSE 21875
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21839: LD_ADDR_VAR 0 6
21843: PUSH
21844: LD_VAR 0 6
21848: PPUSH
21849: LD_VAR 0 8
21853: PPUSH
21854: LD_VAR 0 7
21858: PUSH
21859: LD_VAR 0 9
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PPUSH
21868: CALL_OW 2
21872: ST_TO_ADDR
// break ;
21873: GO 21877
// end ; end ;
21875: GO 21814
21877: POP
21878: POP
// end ; end ;
21879: GO 21678
21881: POP
21882: POP
// if result and not asc then
21883: LD_VAR 0 6
21887: IFFALSE 21896
21889: PUSH
21890: LD_VAR 0 4
21894: NOT
21895: AND
21896: IFFALSE 21971
// begin tmp := result ;
21898: LD_ADDR_VAR 0 9
21902: PUSH
21903: LD_VAR 0 6
21907: ST_TO_ADDR
// for i = tmp downto 1 do
21908: LD_ADDR_VAR 0 7
21912: PUSH
21913: DOUBLE
21914: LD_VAR 0 9
21918: INC
21919: ST_TO_ADDR
21920: LD_INT 1
21922: PUSH
21923: FOR_DOWNTO
21924: IFFALSE 21969
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21926: LD_ADDR_VAR 0 6
21930: PUSH
21931: LD_VAR 0 6
21935: PPUSH
21936: LD_VAR 0 9
21940: PUSH
21941: LD_VAR 0 7
21945: MINUS
21946: PUSH
21947: LD_INT 1
21949: PLUS
21950: PPUSH
21951: LD_VAR 0 9
21955: PUSH
21956: LD_VAR 0 7
21960: ARRAY
21961: PPUSH
21962: CALL_OW 1
21966: ST_TO_ADDR
21967: GO 21923
21969: POP
21970: POP
// end ; tmp := [ ] ;
21971: LD_ADDR_VAR 0 9
21975: PUSH
21976: EMPTY
21977: ST_TO_ADDR
// if mode then
21978: LD_VAR 0 5
21982: IFFALSE 22051
// begin for i = 1 to result do
21984: LD_ADDR_VAR 0 7
21988: PUSH
21989: DOUBLE
21990: LD_INT 1
21992: DEC
21993: ST_TO_ADDR
21994: LD_VAR 0 6
21998: PUSH
21999: FOR_TO
22000: IFFALSE 22039
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22002: LD_ADDR_VAR 0 9
22006: PUSH
22007: LD_VAR 0 9
22011: PPUSH
22012: LD_VAR 0 7
22016: PPUSH
22017: LD_VAR 0 6
22021: PUSH
22022: LD_VAR 0 7
22026: ARRAY
22027: PUSH
22028: LD_INT 1
22030: ARRAY
22031: PPUSH
22032: CALL_OW 1
22036: ST_TO_ADDR
22037: GO 21999
22039: POP
22040: POP
// result := tmp ;
22041: LD_ADDR_VAR 0 6
22045: PUSH
22046: LD_VAR 0 9
22050: ST_TO_ADDR
// end ; end ;
22051: LD_VAR 0 6
22055: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22056: LD_INT 0
22058: PPUSH
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22064: LD_ADDR_VAR 0 5
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: ST_TO_ADDR
// if not x or not y then
22086: LD_VAR 0 2
22090: NOT
22091: IFTRUE 22100
22093: PUSH
22094: LD_VAR 0 3
22098: NOT
22099: OR
22100: IFFALSE 22104
// exit ;
22102: GO 23760
// if not range then
22104: LD_VAR 0 4
22108: NOT
22109: IFFALSE 22119
// range := 10 ;
22111: LD_ADDR_VAR 0 4
22115: PUSH
22116: LD_INT 10
22118: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22119: LD_ADDR_VAR 0 8
22123: PUSH
22124: LD_INT 81
22126: PUSH
22127: LD_VAR 0 1
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 92
22138: PUSH
22139: LD_VAR 0 2
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_VAR 0 4
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 3
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: PPUSH
22182: CALL_OW 69
22186: ST_TO_ADDR
// if not tmp then
22187: LD_VAR 0 8
22191: NOT
22192: IFFALSE 22196
// exit ;
22194: GO 23760
// for i in tmp do
22196: LD_ADDR_VAR 0 6
22200: PUSH
22201: LD_VAR 0 8
22205: PUSH
22206: FOR_IN
22207: IFFALSE 23735
// begin points := [ 0 , 0 , 0 ] ;
22209: LD_ADDR_VAR 0 9
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: ST_TO_ADDR
// bpoints := 1 ;
22228: LD_ADDR_VAR 0 10
22232: PUSH
22233: LD_INT 1
22235: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22236: LD_VAR 0 6
22240: PPUSH
22241: CALL_OW 247
22245: PUSH
22246: LD_INT 1
22248: DOUBLE
22249: EQUAL
22250: IFTRUE 22254
22252: GO 22836
22254: POP
// begin if GetClass ( i ) = 1 then
22255: LD_VAR 0 6
22259: PPUSH
22260: CALL_OW 257
22264: PUSH
22265: LD_INT 1
22267: EQUAL
22268: IFFALSE 22289
// points := [ 10 , 5 , 3 ] ;
22270: LD_ADDR_VAR 0 9
22274: PUSH
22275: LD_INT 10
22277: PUSH
22278: LD_INT 5
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22289: LD_VAR 0 6
22293: PPUSH
22294: CALL_OW 257
22298: PUSH
22299: LD_INT 2
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: LD_INT 4
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: IN
22313: IFFALSE 22334
// points := [ 3 , 2 , 1 ] ;
22315: LD_ADDR_VAR 0 9
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22334: LD_VAR 0 6
22338: PPUSH
22339: CALL_OW 257
22343: PUSH
22344: LD_INT 5
22346: EQUAL
22347: IFFALSE 22368
// points := [ 130 , 5 , 2 ] ;
22349: LD_ADDR_VAR 0 9
22353: PUSH
22354: LD_INT 130
22356: PUSH
22357: LD_INT 5
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22368: LD_VAR 0 6
22372: PPUSH
22373: CALL_OW 257
22377: PUSH
22378: LD_INT 8
22380: EQUAL
22381: IFFALSE 22402
// points := [ 35 , 35 , 30 ] ;
22383: LD_ADDR_VAR 0 9
22387: PUSH
22388: LD_INT 35
22390: PUSH
22391: LD_INT 35
22393: PUSH
22394: LD_INT 30
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22402: LD_VAR 0 6
22406: PPUSH
22407: CALL_OW 257
22411: PUSH
22412: LD_INT 9
22414: EQUAL
22415: IFFALSE 22436
// points := [ 20 , 55 , 40 ] ;
22417: LD_ADDR_VAR 0 9
22421: PUSH
22422: LD_INT 20
22424: PUSH
22425: LD_INT 55
22427: PUSH
22428: LD_INT 40
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22436: LD_VAR 0 6
22440: PPUSH
22441: CALL_OW 257
22445: PUSH
22446: LD_INT 12
22448: PUSH
22449: LD_INT 16
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: IN
22456: IFFALSE 22477
// points := [ 5 , 3 , 2 ] ;
22458: LD_ADDR_VAR 0 9
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 3
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22477: LD_VAR 0 6
22481: PPUSH
22482: CALL_OW 257
22486: PUSH
22487: LD_INT 17
22489: EQUAL
22490: IFFALSE 22511
// points := [ 100 , 50 , 75 ] ;
22492: LD_ADDR_VAR 0 9
22496: PUSH
22497: LD_INT 100
22499: PUSH
22500: LD_INT 50
22502: PUSH
22503: LD_INT 75
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22511: LD_VAR 0 6
22515: PPUSH
22516: CALL_OW 257
22520: PUSH
22521: LD_INT 15
22523: EQUAL
22524: IFFALSE 22545
// points := [ 10 , 5 , 3 ] ;
22526: LD_ADDR_VAR 0 9
22530: PUSH
22531: LD_INT 10
22533: PUSH
22534: LD_INT 5
22536: PUSH
22537: LD_INT 3
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22545: LD_VAR 0 6
22549: PPUSH
22550: CALL_OW 257
22554: PUSH
22555: LD_INT 14
22557: EQUAL
22558: IFFALSE 22579
// points := [ 10 , 0 , 0 ] ;
22560: LD_ADDR_VAR 0 9
22564: PUSH
22565: LD_INT 10
22567: PUSH
22568: LD_INT 0
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22579: LD_VAR 0 6
22583: PPUSH
22584: CALL_OW 257
22588: PUSH
22589: LD_INT 11
22591: EQUAL
22592: IFFALSE 22613
// points := [ 30 , 10 , 5 ] ;
22594: LD_ADDR_VAR 0 9
22598: PUSH
22599: LD_INT 30
22601: PUSH
22602: LD_INT 10
22604: PUSH
22605: LD_INT 5
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22613: LD_VAR 0 1
22617: PPUSH
22618: LD_INT 5
22620: PPUSH
22621: CALL_OW 321
22625: PUSH
22626: LD_INT 2
22628: EQUAL
22629: IFFALSE 22646
// bpoints := bpoints * 1.8 ;
22631: LD_ADDR_VAR 0 10
22635: PUSH
22636: LD_VAR 0 10
22640: PUSH
22641: LD_REAL  1.80000000000000E+0000
22644: MUL
22645: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22646: LD_VAR 0 6
22650: PPUSH
22651: CALL_OW 257
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: LD_INT 3
22664: PUSH
22665: LD_INT 4
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: IN
22674: IFFALSE 22694
22676: PUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: LD_INT 51
22684: PPUSH
22685: CALL_OW 321
22689: PUSH
22690: LD_INT 2
22692: EQUAL
22693: AND
22694: IFFALSE 22711
// bpoints := bpoints * 1.2 ;
22696: LD_ADDR_VAR 0 10
22700: PUSH
22701: LD_VAR 0 10
22705: PUSH
22706: LD_REAL  1.20000000000000E+0000
22709: MUL
22710: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22711: LD_VAR 0 6
22715: PPUSH
22716: CALL_OW 257
22720: PUSH
22721: LD_INT 5
22723: PUSH
22724: LD_INT 7
22726: PUSH
22727: LD_INT 9
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: IN
22735: IFFALSE 22755
22737: PUSH
22738: LD_VAR 0 1
22742: PPUSH
22743: LD_INT 52
22745: PPUSH
22746: CALL_OW 321
22750: PUSH
22751: LD_INT 2
22753: EQUAL
22754: AND
22755: IFFALSE 22772
// bpoints := bpoints * 1.5 ;
22757: LD_ADDR_VAR 0 10
22761: PUSH
22762: LD_VAR 0 10
22766: PUSH
22767: LD_REAL  1.50000000000000E+0000
22770: MUL
22771: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22772: LD_VAR 0 1
22776: PPUSH
22777: LD_INT 66
22779: PPUSH
22780: CALL_OW 321
22784: PUSH
22785: LD_INT 2
22787: EQUAL
22788: IFFALSE 22805
// bpoints := bpoints * 1.1 ;
22790: LD_ADDR_VAR 0 10
22794: PUSH
22795: LD_VAR 0 10
22799: PUSH
22800: LD_REAL  1.10000000000000E+0000
22803: MUL
22804: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22805: LD_ADDR_VAR 0 10
22809: PUSH
22810: LD_VAR 0 10
22814: PUSH
22815: LD_VAR 0 6
22819: PPUSH
22820: LD_INT 1
22822: PPUSH
22823: CALL_OW 259
22827: PUSH
22828: LD_REAL  1.15000000000000E+0000
22831: MUL
22832: MUL
22833: ST_TO_ADDR
// end ; unit_vehicle :
22834: GO 23664
22836: LD_INT 2
22838: DOUBLE
22839: EQUAL
22840: IFTRUE 22844
22842: GO 23652
22844: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22845: LD_VAR 0 6
22849: PPUSH
22850: CALL_OW 264
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: LD_INT 42
22860: PUSH
22861: LD_INT 24
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: LIST
22868: IN
22869: IFFALSE 22890
// points := [ 25 , 5 , 3 ] ;
22871: LD_ADDR_VAR 0 9
22875: PUSH
22876: LD_INT 25
22878: PUSH
22879: LD_INT 5
22881: PUSH
22882: LD_INT 3
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22890: LD_VAR 0 6
22894: PPUSH
22895: CALL_OW 264
22899: PUSH
22900: LD_INT 4
22902: PUSH
22903: LD_INT 43
22905: PUSH
22906: LD_INT 25
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: IN
22914: IFFALSE 22935
// points := [ 40 , 15 , 5 ] ;
22916: LD_ADDR_VAR 0 9
22920: PUSH
22921: LD_INT 40
22923: PUSH
22924: LD_INT 15
22926: PUSH
22927: LD_INT 5
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22935: LD_VAR 0 6
22939: PPUSH
22940: CALL_OW 264
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: LD_INT 23
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: IN
22955: IFFALSE 22976
// points := [ 7 , 25 , 8 ] ;
22957: LD_ADDR_VAR 0 9
22961: PUSH
22962: LD_INT 7
22964: PUSH
22965: LD_INT 25
22967: PUSH
22968: LD_INT 8
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22976: LD_VAR 0 6
22980: PPUSH
22981: CALL_OW 264
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: LD_INT 27
22991: PUSH
22992: LD_INT 44
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: IN
23000: IFFALSE 23021
// points := [ 14 , 50 , 16 ] ;
23002: LD_ADDR_VAR 0 9
23006: PUSH
23007: LD_INT 14
23009: PUSH
23010: LD_INT 50
23012: PUSH
23013: LD_INT 16
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23021: LD_VAR 0 6
23025: PPUSH
23026: CALL_OW 264
23030: PUSH
23031: LD_INT 6
23033: PUSH
23034: LD_INT 46
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: IN
23041: IFFALSE 23062
// points := [ 32 , 120 , 70 ] ;
23043: LD_ADDR_VAR 0 9
23047: PUSH
23048: LD_INT 32
23050: PUSH
23051: LD_INT 120
23053: PUSH
23054: LD_INT 70
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23062: LD_VAR 0 6
23066: PPUSH
23067: CALL_OW 264
23071: PUSH
23072: LD_INT 7
23074: PUSH
23075: LD_INT 28
23077: PUSH
23078: LD_INT 45
23080: PUSH
23081: LD_INT 92
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: IN
23090: IFFALSE 23111
// points := [ 35 , 20 , 45 ] ;
23092: LD_ADDR_VAR 0 9
23096: PUSH
23097: LD_INT 35
23099: PUSH
23100: LD_INT 20
23102: PUSH
23103: LD_INT 45
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23111: LD_VAR 0 6
23115: PPUSH
23116: CALL_OW 264
23120: PUSH
23121: LD_INT 47
23123: PUSH
23124: EMPTY
23125: LIST
23126: IN
23127: IFFALSE 23148
// points := [ 67 , 45 , 75 ] ;
23129: LD_ADDR_VAR 0 9
23133: PUSH
23134: LD_INT 67
23136: PUSH
23137: LD_INT 45
23139: PUSH
23140: LD_INT 75
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23148: LD_VAR 0 6
23152: PPUSH
23153: CALL_OW 264
23157: PUSH
23158: LD_INT 26
23160: PUSH
23161: EMPTY
23162: LIST
23163: IN
23164: IFFALSE 23185
// points := [ 120 , 30 , 80 ] ;
23166: LD_ADDR_VAR 0 9
23170: PUSH
23171: LD_INT 120
23173: PUSH
23174: LD_INT 30
23176: PUSH
23177: LD_INT 80
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23185: LD_VAR 0 6
23189: PPUSH
23190: CALL_OW 264
23194: PUSH
23195: LD_INT 22
23197: PUSH
23198: EMPTY
23199: LIST
23200: IN
23201: IFFALSE 23222
// points := [ 40 , 1 , 1 ] ;
23203: LD_ADDR_VAR 0 9
23207: PUSH
23208: LD_INT 40
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23222: LD_VAR 0 6
23226: PPUSH
23227: CALL_OW 264
23231: PUSH
23232: LD_INT 29
23234: PUSH
23235: EMPTY
23236: LIST
23237: IN
23238: IFFALSE 23259
// points := [ 70 , 200 , 400 ] ;
23240: LD_ADDR_VAR 0 9
23244: PUSH
23245: LD_INT 70
23247: PUSH
23248: LD_INT 200
23250: PUSH
23251: LD_INT 400
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23259: LD_VAR 0 6
23263: PPUSH
23264: CALL_OW 264
23268: PUSH
23269: LD_INT 14
23271: PUSH
23272: LD_INT 53
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: IN
23279: IFFALSE 23300
// points := [ 40 , 10 , 20 ] ;
23281: LD_ADDR_VAR 0 9
23285: PUSH
23286: LD_INT 40
23288: PUSH
23289: LD_INT 10
23291: PUSH
23292: LD_INT 20
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23300: LD_VAR 0 6
23304: PPUSH
23305: CALL_OW 264
23309: PUSH
23310: LD_INT 9
23312: PUSH
23313: EMPTY
23314: LIST
23315: IN
23316: IFFALSE 23337
// points := [ 5 , 70 , 20 ] ;
23318: LD_ADDR_VAR 0 9
23322: PUSH
23323: LD_INT 5
23325: PUSH
23326: LD_INT 70
23328: PUSH
23329: LD_INT 20
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23337: LD_VAR 0 6
23341: PPUSH
23342: CALL_OW 264
23346: PUSH
23347: LD_INT 10
23349: PUSH
23350: EMPTY
23351: LIST
23352: IN
23353: IFFALSE 23374
// points := [ 35 , 110 , 70 ] ;
23355: LD_ADDR_VAR 0 9
23359: PUSH
23360: LD_INT 35
23362: PUSH
23363: LD_INT 110
23365: PUSH
23366: LD_INT 70
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23374: LD_VAR 0 6
23378: PPUSH
23379: CALL_OW 265
23383: PUSH
23384: LD_INT 25
23386: EQUAL
23387: IFFALSE 23408
// points := [ 80 , 65 , 100 ] ;
23389: LD_ADDR_VAR 0 9
23393: PUSH
23394: LD_INT 80
23396: PUSH
23397: LD_INT 65
23399: PUSH
23400: LD_INT 100
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23408: LD_VAR 0 6
23412: PPUSH
23413: CALL_OW 263
23417: PUSH
23418: LD_INT 1
23420: EQUAL
23421: IFFALSE 23456
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23423: LD_ADDR_VAR 0 10
23427: PUSH
23428: LD_VAR 0 10
23432: PUSH
23433: LD_VAR 0 6
23437: PPUSH
23438: CALL_OW 311
23442: PPUSH
23443: LD_INT 3
23445: PPUSH
23446: CALL_OW 259
23450: PUSH
23451: LD_INT 4
23453: MUL
23454: MUL
23455: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23456: LD_VAR 0 6
23460: PPUSH
23461: CALL_OW 263
23465: PUSH
23466: LD_INT 2
23468: EQUAL
23469: IFFALSE 23520
// begin j := IsControledBy ( i ) ;
23471: LD_ADDR_VAR 0 7
23475: PUSH
23476: LD_VAR 0 6
23480: PPUSH
23481: CALL_OW 312
23485: ST_TO_ADDR
// if j then
23486: LD_VAR 0 7
23490: IFFALSE 23520
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23492: LD_ADDR_VAR 0 10
23496: PUSH
23497: LD_VAR 0 10
23501: PUSH
23502: LD_VAR 0 7
23506: PPUSH
23507: LD_INT 3
23509: PPUSH
23510: CALL_OW 259
23514: PUSH
23515: LD_INT 3
23517: MUL
23518: MUL
23519: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23520: LD_VAR 0 6
23524: PPUSH
23525: CALL_OW 264
23529: PUSH
23530: LD_INT 5
23532: PUSH
23533: LD_INT 6
23535: PUSH
23536: LD_INT 46
23538: PUSH
23539: LD_INT 44
23541: PUSH
23542: LD_INT 47
23544: PUSH
23545: LD_INT 45
23547: PUSH
23548: LD_INT 28
23550: PUSH
23551: LD_INT 7
23553: PUSH
23554: LD_INT 27
23556: PUSH
23557: LD_INT 29
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: IN
23572: IFFALSE 23592
23574: PUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_INT 52
23582: PPUSH
23583: CALL_OW 321
23587: PUSH
23588: LD_INT 2
23590: EQUAL
23591: AND
23592: IFFALSE 23609
// bpoints := bpoints * 1.2 ;
23594: LD_ADDR_VAR 0 10
23598: PUSH
23599: LD_VAR 0 10
23603: PUSH
23604: LD_REAL  1.20000000000000E+0000
23607: MUL
23608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23609: LD_VAR 0 6
23613: PPUSH
23614: CALL_OW 264
23618: PUSH
23619: LD_INT 6
23621: PUSH
23622: LD_INT 46
23624: PUSH
23625: LD_INT 47
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: LIST
23632: IN
23633: IFFALSE 23650
// bpoints := bpoints * 1.2 ;
23635: LD_ADDR_VAR 0 10
23639: PUSH
23640: LD_VAR 0 10
23644: PUSH
23645: LD_REAL  1.20000000000000E+0000
23648: MUL
23649: ST_TO_ADDR
// end ; unit_building :
23650: GO 23664
23652: LD_INT 3
23654: DOUBLE
23655: EQUAL
23656: IFTRUE 23660
23658: GO 23663
23660: POP
// ; end ;
23661: GO 23664
23663: POP
// for j = 1 to 3 do
23664: LD_ADDR_VAR 0 7
23668: PUSH
23669: DOUBLE
23670: LD_INT 1
23672: DEC
23673: ST_TO_ADDR
23674: LD_INT 3
23676: PUSH
23677: FOR_TO
23678: IFFALSE 23731
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23680: LD_ADDR_VAR 0 5
23684: PUSH
23685: LD_VAR 0 5
23689: PPUSH
23690: LD_VAR 0 7
23694: PPUSH
23695: LD_VAR 0 5
23699: PUSH
23700: LD_VAR 0 7
23704: ARRAY
23705: PUSH
23706: LD_VAR 0 9
23710: PUSH
23711: LD_VAR 0 7
23715: ARRAY
23716: PUSH
23717: LD_VAR 0 10
23721: MUL
23722: PLUS
23723: PPUSH
23724: CALL_OW 1
23728: ST_TO_ADDR
23729: GO 23677
23731: POP
23732: POP
// end ;
23733: GO 22206
23735: POP
23736: POP
// result := Replace ( result , 4 , tmp ) ;
23737: LD_ADDR_VAR 0 5
23741: PUSH
23742: LD_VAR 0 5
23746: PPUSH
23747: LD_INT 4
23749: PPUSH
23750: LD_VAR 0 8
23754: PPUSH
23755: CALL_OW 1
23759: ST_TO_ADDR
// end ;
23760: LD_VAR 0 5
23764: RET
// export function DangerAtRange ( unit , range ) ; begin
23765: LD_INT 0
23767: PPUSH
// if not unit then
23768: LD_VAR 0 1
23772: NOT
23773: IFFALSE 23777
// exit ;
23775: GO 23822
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23777: LD_ADDR_VAR 0 3
23781: PUSH
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 255
23791: PPUSH
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 250
23801: PPUSH
23802: LD_VAR 0 1
23806: PPUSH
23807: CALL_OW 251
23811: PPUSH
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL 22056 0 4
23821: ST_TO_ADDR
// end ;
23822: LD_VAR 0 3
23826: RET
// export function DangerInArea ( side , area ) ; begin
23827: LD_INT 0
23829: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23830: LD_ADDR_VAR 0 3
23834: PUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: LD_INT 81
23842: PUSH
23843: LD_VAR 0 1
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PPUSH
23852: CALL_OW 70
23856: ST_TO_ADDR
// end ;
23857: LD_VAR 0 3
23861: RET
// export function IsExtension ( b ) ; begin
23862: LD_INT 0
23864: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23865: LD_ADDR_VAR 0 2
23869: PUSH
23870: LD_VAR 0 1
23874: PUSH
23875: LD_INT 23
23877: PUSH
23878: LD_INT 20
23880: PUSH
23881: LD_INT 22
23883: PUSH
23884: LD_INT 17
23886: PUSH
23887: LD_INT 24
23889: PUSH
23890: LD_INT 21
23892: PUSH
23893: LD_INT 19
23895: PUSH
23896: LD_INT 16
23898: PUSH
23899: LD_INT 25
23901: PUSH
23902: LD_INT 18
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: IN
23917: ST_TO_ADDR
// end ;
23918: LD_VAR 0 2
23922: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23923: LD_INT 0
23925: PPUSH
23926: PPUSH
23927: PPUSH
// result := [ ] ;
23928: LD_ADDR_VAR 0 4
23932: PUSH
23933: EMPTY
23934: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23935: LD_ADDR_VAR 0 5
23939: PUSH
23940: LD_VAR 0 2
23944: PPUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 3
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PPUSH
23955: CALL_OW 70
23959: ST_TO_ADDR
// if not tmp then
23960: LD_VAR 0 5
23964: NOT
23965: IFFALSE 23969
// exit ;
23967: GO 24033
// if checkLink then
23969: LD_VAR 0 3
23973: IFFALSE 24023
// begin for i in tmp do
23975: LD_ADDR_VAR 0 6
23979: PUSH
23980: LD_VAR 0 5
23984: PUSH
23985: FOR_IN
23986: IFFALSE 24021
// if GetBase ( i ) <> base then
23988: LD_VAR 0 6
23992: PPUSH
23993: CALL_OW 274
23997: PUSH
23998: LD_VAR 0 1
24002: NONEQUAL
24003: IFFALSE 24019
// ComLinkToBase ( base , i ) ;
24005: LD_VAR 0 1
24009: PPUSH
24010: LD_VAR 0 6
24014: PPUSH
24015: CALL_OW 169
24019: GO 23985
24021: POP
24022: POP
// end ; result := tmp ;
24023: LD_ADDR_VAR 0 4
24027: PUSH
24028: LD_VAR 0 5
24032: ST_TO_ADDR
// end ;
24033: LD_VAR 0 4
24037: RET
// export function ComComplete ( units , b ) ; var i ; begin
24038: LD_INT 0
24040: PPUSH
24041: PPUSH
// if not units then
24042: LD_VAR 0 1
24046: NOT
24047: IFFALSE 24051
// exit ;
24049: GO 24141
// for i in units do
24051: LD_ADDR_VAR 0 4
24055: PUSH
24056: LD_VAR 0 1
24060: PUSH
24061: FOR_IN
24062: IFFALSE 24139
// if BuildingStatus ( b ) = bs_build then
24064: LD_VAR 0 2
24068: PPUSH
24069: CALL_OW 461
24073: PUSH
24074: LD_INT 1
24076: EQUAL
24077: IFFALSE 24137
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24079: LD_VAR 0 4
24083: PPUSH
24084: LD_STRING h
24086: PUSH
24087: LD_VAR 0 2
24091: PPUSH
24092: CALL_OW 250
24096: PUSH
24097: LD_VAR 0 2
24101: PPUSH
24102: CALL_OW 251
24106: PUSH
24107: LD_VAR 0 2
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: PUSH
24130: EMPTY
24131: LIST
24132: PPUSH
24133: CALL_OW 446
24137: GO 24061
24139: POP
24140: POP
// end ;
24141: LD_VAR 0 3
24145: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24146: LD_INT 0
24148: PPUSH
24149: PPUSH
24150: PPUSH
24151: PPUSH
24152: PPUSH
24153: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24154: LD_VAR 0 1
24158: NOT
24159: IFTRUE 24176
24161: PUSH
24162: LD_VAR 0 1
24166: PPUSH
24167: CALL_OW 263
24171: PUSH
24172: LD_INT 2
24174: NONEQUAL
24175: OR
24176: IFFALSE 24180
// exit ;
24178: GO 24496
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24180: LD_ADDR_VAR 0 6
24184: PUSH
24185: LD_INT 22
24187: PUSH
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 255
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 30
24207: PUSH
24208: LD_INT 36
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 34
24217: PUSH
24218: LD_INT 31
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PPUSH
24234: CALL_OW 69
24238: ST_TO_ADDR
// if not tmp then
24239: LD_VAR 0 6
24243: NOT
24244: IFFALSE 24248
// exit ;
24246: GO 24496
// result := [ ] ;
24248: LD_ADDR_VAR 0 2
24252: PUSH
24253: EMPTY
24254: ST_TO_ADDR
// for i in tmp do
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_VAR 0 6
24264: PUSH
24265: FOR_IN
24266: IFFALSE 24337
// begin t := UnitsInside ( i ) ;
24268: LD_ADDR_VAR 0 4
24272: PUSH
24273: LD_VAR 0 3
24277: PPUSH
24278: CALL_OW 313
24282: ST_TO_ADDR
// if t then
24283: LD_VAR 0 4
24287: IFFALSE 24335
// for j in t do
24289: LD_ADDR_VAR 0 7
24293: PUSH
24294: LD_VAR 0 4
24298: PUSH
24299: FOR_IN
24300: IFFALSE 24333
// result := Replace ( result , result + 1 , j ) ;
24302: LD_ADDR_VAR 0 2
24306: PUSH
24307: LD_VAR 0 2
24311: PPUSH
24312: LD_VAR 0 2
24316: PUSH
24317: LD_INT 1
24319: PLUS
24320: PPUSH
24321: LD_VAR 0 7
24325: PPUSH
24326: CALL_OW 1
24330: ST_TO_ADDR
24331: GO 24299
24333: POP
24334: POP
// end ;
24335: GO 24265
24337: POP
24338: POP
// if not result then
24339: LD_VAR 0 2
24343: NOT
24344: IFFALSE 24348
// exit ;
24346: GO 24496
// mech := result [ 1 ] ;
24348: LD_ADDR_VAR 0 5
24352: PUSH
24353: LD_VAR 0 2
24357: PUSH
24358: LD_INT 1
24360: ARRAY
24361: ST_TO_ADDR
// if result > 1 then
24362: LD_VAR 0 2
24366: PUSH
24367: LD_INT 1
24369: GREATER
24370: IFFALSE 24482
// begin for i = 2 to result do
24372: LD_ADDR_VAR 0 3
24376: PUSH
24377: DOUBLE
24378: LD_INT 2
24380: DEC
24381: ST_TO_ADDR
24382: LD_VAR 0 2
24386: PUSH
24387: FOR_TO
24388: IFFALSE 24480
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24390: LD_ADDR_VAR 0 4
24394: PUSH
24395: LD_VAR 0 2
24399: PUSH
24400: LD_VAR 0 3
24404: ARRAY
24405: PPUSH
24406: LD_INT 3
24408: PPUSH
24409: CALL_OW 259
24413: PUSH
24414: LD_VAR 0 2
24418: PUSH
24419: LD_VAR 0 3
24423: ARRAY
24424: PPUSH
24425: CALL_OW 432
24429: MINUS
24430: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24431: LD_VAR 0 4
24435: PUSH
24436: LD_VAR 0 5
24440: PPUSH
24441: LD_INT 3
24443: PPUSH
24444: CALL_OW 259
24448: PUSH
24449: LD_VAR 0 5
24453: PPUSH
24454: CALL_OW 432
24458: MINUS
24459: GREATEREQUAL
24460: IFFALSE 24478
// mech := result [ i ] ;
24462: LD_ADDR_VAR 0 5
24466: PUSH
24467: LD_VAR 0 2
24471: PUSH
24472: LD_VAR 0 3
24476: ARRAY
24477: ST_TO_ADDR
// end ;
24478: GO 24387
24480: POP
24481: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24482: LD_VAR 0 1
24486: PPUSH
24487: LD_VAR 0 5
24491: PPUSH
24492: CALL_OW 135
// end ;
24496: LD_VAR 0 2
24500: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24501: LD_INT 0
24503: PPUSH
24504: PPUSH
24505: PPUSH
24506: PPUSH
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
24511: PPUSH
24512: PPUSH
24513: PPUSH
24514: PPUSH
24515: PPUSH
// result := [ ] ;
24516: LD_ADDR_VAR 0 7
24520: PUSH
24521: EMPTY
24522: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 266
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: IN
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 26188
// if name then
24548: LD_VAR 0 3
24552: IFFALSE 24568
// SetBName ( base_dep , name ) ;
24554: LD_VAR 0 1
24558: PPUSH
24559: LD_VAR 0 3
24563: PPUSH
24564: CALL_OW 500
// base := GetBase ( base_dep ) ;
24568: LD_ADDR_VAR 0 15
24572: PUSH
24573: LD_VAR 0 1
24577: PPUSH
24578: CALL_OW 274
24582: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24583: LD_ADDR_VAR 0 16
24587: PUSH
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 255
24597: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24598: LD_ADDR_VAR 0 17
24602: PUSH
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 248
24612: ST_TO_ADDR
// if sources then
24613: LD_VAR 0 5
24617: IFFALSE 24664
// for i = 1 to 3 do
24619: LD_ADDR_VAR 0 8
24623: PUSH
24624: DOUBLE
24625: LD_INT 1
24627: DEC
24628: ST_TO_ADDR
24629: LD_INT 3
24631: PUSH
24632: FOR_TO
24633: IFFALSE 24662
// AddResourceType ( base , i , sources [ i ] ) ;
24635: LD_VAR 0 15
24639: PPUSH
24640: LD_VAR 0 8
24644: PPUSH
24645: LD_VAR 0 5
24649: PUSH
24650: LD_VAR 0 8
24654: ARRAY
24655: PPUSH
24656: CALL_OW 276
24660: GO 24632
24662: POP
24663: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24664: LD_ADDR_VAR 0 18
24668: PUSH
24669: LD_VAR 0 15
24673: PPUSH
24674: LD_VAR 0 2
24678: PPUSH
24679: LD_INT 1
24681: PPUSH
24682: CALL 23923 0 3
24686: ST_TO_ADDR
// InitHc ;
24687: CALL_OW 19
// InitUc ;
24691: CALL_OW 18
// uc_side := side ;
24695: LD_ADDR_OWVAR 20
24699: PUSH
24700: LD_VAR 0 16
24704: ST_TO_ADDR
// uc_nation := nation ;
24705: LD_ADDR_OWVAR 21
24709: PUSH
24710: LD_VAR 0 17
24714: ST_TO_ADDR
// if buildings then
24715: LD_VAR 0 18
24719: IFFALSE 26047
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24721: LD_ADDR_VAR 0 19
24725: PUSH
24726: LD_VAR 0 18
24730: PPUSH
24731: LD_INT 2
24733: PUSH
24734: LD_INT 30
24736: PUSH
24737: LD_INT 29
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 30
24746: PUSH
24747: LD_INT 30
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: PPUSH
24759: CALL_OW 72
24763: ST_TO_ADDR
// if tmp then
24764: LD_VAR 0 19
24768: IFFALSE 24816
// for i in tmp do
24770: LD_ADDR_VAR 0 8
24774: PUSH
24775: LD_VAR 0 19
24779: PUSH
24780: FOR_IN
24781: IFFALSE 24814
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24783: LD_VAR 0 8
24787: PPUSH
24788: CALL_OW 250
24792: PPUSH
24793: LD_VAR 0 8
24797: PPUSH
24798: CALL_OW 251
24802: PPUSH
24803: LD_VAR 0 16
24807: PPUSH
24808: CALL_OW 441
24812: GO 24780
24814: POP
24815: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24816: LD_VAR 0 18
24820: PPUSH
24821: LD_INT 2
24823: PUSH
24824: LD_INT 30
24826: PUSH
24827: LD_INT 32
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 30
24836: PUSH
24837: LD_INT 33
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: PPUSH
24849: CALL_OW 72
24853: IFFALSE 24941
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24855: LD_ADDR_VAR 0 8
24859: PUSH
24860: LD_VAR 0 18
24864: PPUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 30
24870: PUSH
24871: LD_INT 32
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 30
24880: PUSH
24881: LD_INT 33
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: PPUSH
24893: CALL_OW 72
24897: PUSH
24898: FOR_IN
24899: IFFALSE 24939
// begin if not GetBWeapon ( i ) then
24901: LD_VAR 0 8
24905: PPUSH
24906: CALL_OW 269
24910: NOT
24911: IFFALSE 24937
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24913: LD_VAR 0 8
24917: PPUSH
24918: LD_VAR 0 8
24922: PPUSH
24923: LD_VAR 0 2
24927: PPUSH
24928: CALL 26193 0 2
24932: PPUSH
24933: CALL_OW 431
// end ;
24937: GO 24898
24939: POP
24940: POP
// end ; for i = 1 to personel do
24941: LD_ADDR_VAR 0 8
24945: PUSH
24946: DOUBLE
24947: LD_INT 1
24949: DEC
24950: ST_TO_ADDR
24951: LD_VAR 0 6
24955: PUSH
24956: FOR_TO
24957: IFFALSE 26027
// begin if i > 4 then
24959: LD_VAR 0 8
24963: PUSH
24964: LD_INT 4
24966: GREATER
24967: IFFALSE 24971
// break ;
24969: GO 26027
// case i of 1 :
24971: LD_VAR 0 8
24975: PUSH
24976: LD_INT 1
24978: DOUBLE
24979: EQUAL
24980: IFTRUE 24984
24982: GO 25064
24984: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24985: LD_ADDR_VAR 0 12
24989: PUSH
24990: LD_VAR 0 18
24994: PPUSH
24995: LD_INT 22
24997: PUSH
24998: LD_VAR 0 16
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 58
25009: PUSH
25010: EMPTY
25011: LIST
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: LD_INT 30
25018: PUSH
25019: LD_INT 32
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 30
25028: PUSH
25029: LD_INT 4
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 30
25038: PUSH
25039: LD_INT 5
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: LIST
25056: PPUSH
25057: CALL_OW 72
25061: ST_TO_ADDR
25062: GO 25286
25064: LD_INT 2
25066: DOUBLE
25067: EQUAL
25068: IFTRUE 25072
25070: GO 25134
25072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25073: LD_ADDR_VAR 0 12
25077: PUSH
25078: LD_VAR 0 18
25082: PPUSH
25083: LD_INT 22
25085: PUSH
25086: LD_VAR 0 16
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: PUSH
25098: LD_INT 30
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 30
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PPUSH
25127: CALL_OW 72
25131: ST_TO_ADDR
25132: GO 25286
25134: LD_INT 3
25136: DOUBLE
25137: EQUAL
25138: IFTRUE 25142
25140: GO 25204
25142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25143: LD_ADDR_VAR 0 12
25147: PUSH
25148: LD_VAR 0 18
25152: PPUSH
25153: LD_INT 22
25155: PUSH
25156: LD_VAR 0 16
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: LD_INT 30
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 30
25180: PUSH
25181: LD_INT 3
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PPUSH
25197: CALL_OW 72
25201: ST_TO_ADDR
25202: GO 25286
25204: LD_INT 4
25206: DOUBLE
25207: EQUAL
25208: IFTRUE 25212
25210: GO 25285
25212: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25213: LD_ADDR_VAR 0 12
25217: PUSH
25218: LD_VAR 0 18
25222: PPUSH
25223: LD_INT 22
25225: PUSH
25226: LD_VAR 0 16
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 30
25240: PUSH
25241: LD_INT 6
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 30
25250: PUSH
25251: LD_INT 7
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 30
25260: PUSH
25261: LD_INT 8
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 72
25282: ST_TO_ADDR
25283: GO 25286
25285: POP
// if i = 1 then
25286: LD_VAR 0 8
25290: PUSH
25291: LD_INT 1
25293: EQUAL
25294: IFFALSE 25405
// begin tmp := [ ] ;
25296: LD_ADDR_VAR 0 19
25300: PUSH
25301: EMPTY
25302: ST_TO_ADDR
// for j in f do
25303: LD_ADDR_VAR 0 9
25307: PUSH
25308: LD_VAR 0 12
25312: PUSH
25313: FOR_IN
25314: IFFALSE 25387
// if GetBType ( j ) = b_bunker then
25316: LD_VAR 0 9
25320: PPUSH
25321: CALL_OW 266
25325: PUSH
25326: LD_INT 32
25328: EQUAL
25329: IFFALSE 25356
// tmp := Insert ( tmp , 1 , j ) else
25331: LD_ADDR_VAR 0 19
25335: PUSH
25336: LD_VAR 0 19
25340: PPUSH
25341: LD_INT 1
25343: PPUSH
25344: LD_VAR 0 9
25348: PPUSH
25349: CALL_OW 2
25353: ST_TO_ADDR
25354: GO 25385
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25356: LD_ADDR_VAR 0 19
25360: PUSH
25361: LD_VAR 0 19
25365: PPUSH
25366: LD_VAR 0 19
25370: PUSH
25371: LD_INT 1
25373: PLUS
25374: PPUSH
25375: LD_VAR 0 9
25379: PPUSH
25380: CALL_OW 2
25384: ST_TO_ADDR
25385: GO 25313
25387: POP
25388: POP
// if tmp then
25389: LD_VAR 0 19
25393: IFFALSE 25405
// f := tmp ;
25395: LD_ADDR_VAR 0 12
25399: PUSH
25400: LD_VAR 0 19
25404: ST_TO_ADDR
// end ; x := personel [ i ] ;
25405: LD_ADDR_VAR 0 13
25409: PUSH
25410: LD_VAR 0 6
25414: PUSH
25415: LD_VAR 0 8
25419: ARRAY
25420: ST_TO_ADDR
// if x = - 1 then
25421: LD_VAR 0 13
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: EQUAL
25430: IFFALSE 25641
// begin for j in f do
25432: LD_ADDR_VAR 0 9
25436: PUSH
25437: LD_VAR 0 12
25441: PUSH
25442: FOR_IN
25443: IFFALSE 25637
// repeat InitHc ;
25445: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25449: LD_VAR 0 9
25453: PPUSH
25454: CALL_OW 266
25458: PUSH
25459: LD_INT 5
25461: EQUAL
25462: IFFALSE 25532
// begin if UnitsInside ( j ) < 3 then
25464: LD_VAR 0 9
25468: PPUSH
25469: CALL_OW 313
25473: PUSH
25474: LD_INT 3
25476: LESS
25477: IFFALSE 25513
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25479: LD_INT 0
25481: PPUSH
25482: LD_INT 5
25484: PUSH
25485: LD_INT 8
25487: PUSH
25488: LD_INT 9
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: PUSH
25496: LD_VAR 0 17
25500: ARRAY
25501: PPUSH
25502: LD_VAR 0 4
25506: PPUSH
25507: CALL_OW 380
25511: GO 25530
// PrepareHuman ( false , i , skill ) ;
25513: LD_INT 0
25515: PPUSH
25516: LD_VAR 0 8
25520: PPUSH
25521: LD_VAR 0 4
25525: PPUSH
25526: CALL_OW 380
// end else
25530: GO 25549
// PrepareHuman ( false , i , skill ) ;
25532: LD_INT 0
25534: PPUSH
25535: LD_VAR 0 8
25539: PPUSH
25540: LD_VAR 0 4
25544: PPUSH
25545: CALL_OW 380
// un := CreateHuman ;
25549: LD_ADDR_VAR 0 14
25553: PUSH
25554: CALL_OW 44
25558: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25559: LD_ADDR_VAR 0 7
25563: PUSH
25564: LD_VAR 0 7
25568: PPUSH
25569: LD_INT 1
25571: PPUSH
25572: LD_VAR 0 14
25576: PPUSH
25577: CALL_OW 2
25581: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25582: LD_VAR 0 14
25586: PPUSH
25587: LD_VAR 0 9
25591: PPUSH
25592: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25596: LD_VAR 0 9
25600: PPUSH
25601: CALL_OW 313
25605: PUSH
25606: LD_INT 6
25608: EQUAL
25609: IFTRUE 25633
25611: PUSH
25612: LD_VAR 0 9
25616: PPUSH
25617: CALL_OW 266
25621: PUSH
25622: LD_INT 32
25624: PUSH
25625: LD_INT 31
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: IN
25632: OR
25633: IFFALSE 25445
25635: GO 25442
25637: POP
25638: POP
// end else
25639: GO 26025
// for j = 1 to x do
25641: LD_ADDR_VAR 0 9
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_VAR 0 13
25655: PUSH
25656: FOR_TO
25657: IFFALSE 26023
// begin InitHc ;
25659: CALL_OW 19
// if not f then
25663: LD_VAR 0 12
25667: NOT
25668: IFFALSE 25757
// begin PrepareHuman ( false , i , skill ) ;
25670: LD_INT 0
25672: PPUSH
25673: LD_VAR 0 8
25677: PPUSH
25678: LD_VAR 0 4
25682: PPUSH
25683: CALL_OW 380
// un := CreateHuman ;
25687: LD_ADDR_VAR 0 14
25691: PUSH
25692: CALL_OW 44
25696: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25697: LD_ADDR_VAR 0 7
25701: PUSH
25702: LD_VAR 0 7
25706: PPUSH
25707: LD_INT 1
25709: PPUSH
25710: LD_VAR 0 14
25714: PPUSH
25715: CALL_OW 2
25719: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25720: LD_VAR 0 14
25724: PPUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 250
25734: PPUSH
25735: LD_VAR 0 1
25739: PPUSH
25740: CALL_OW 251
25744: PPUSH
25745: LD_INT 10
25747: PPUSH
25748: LD_INT 0
25750: PPUSH
25751: CALL_OW 50
// continue ;
25755: GO 25656
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25757: LD_VAR 0 12
25761: PUSH
25762: LD_INT 1
25764: ARRAY
25765: PPUSH
25766: CALL_OW 313
25770: IFFALSE 25798
25772: PUSH
25773: LD_VAR 0 12
25777: PUSH
25778: LD_INT 1
25780: ARRAY
25781: PPUSH
25782: CALL_OW 266
25786: PUSH
25787: LD_INT 32
25789: PUSH
25790: LD_INT 31
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: IN
25797: AND
25798: IFTRUE 25819
25800: PUSH
25801: LD_VAR 0 12
25805: PUSH
25806: LD_INT 1
25808: ARRAY
25809: PPUSH
25810: CALL_OW 313
25814: PUSH
25815: LD_INT 6
25817: EQUAL
25818: OR
25819: IFFALSE 25839
// f := Delete ( f , 1 ) ;
25821: LD_ADDR_VAR 0 12
25825: PUSH
25826: LD_VAR 0 12
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: CALL_OW 3
25838: ST_TO_ADDR
// if not f then
25839: LD_VAR 0 12
25843: NOT
25844: IFFALSE 25862
// begin x := x + 2 ;
25846: LD_ADDR_VAR 0 13
25850: PUSH
25851: LD_VAR 0 13
25855: PUSH
25856: LD_INT 2
25858: PLUS
25859: ST_TO_ADDR
// continue ;
25860: GO 25656
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25862: LD_VAR 0 12
25866: PUSH
25867: LD_INT 1
25869: ARRAY
25870: PPUSH
25871: CALL_OW 266
25875: PUSH
25876: LD_INT 5
25878: EQUAL
25879: IFFALSE 25953
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25881: LD_VAR 0 12
25885: PUSH
25886: LD_INT 1
25888: ARRAY
25889: PPUSH
25890: CALL_OW 313
25894: PUSH
25895: LD_INT 3
25897: LESS
25898: IFFALSE 25934
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25900: LD_INT 0
25902: PPUSH
25903: LD_INT 5
25905: PUSH
25906: LD_INT 8
25908: PUSH
25909: LD_INT 9
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: PUSH
25917: LD_VAR 0 17
25921: ARRAY
25922: PPUSH
25923: LD_VAR 0 4
25927: PPUSH
25928: CALL_OW 380
25932: GO 25951
// PrepareHuman ( false , i , skill ) ;
25934: LD_INT 0
25936: PPUSH
25937: LD_VAR 0 8
25941: PPUSH
25942: LD_VAR 0 4
25946: PPUSH
25947: CALL_OW 380
// end else
25951: GO 25970
// PrepareHuman ( false , i , skill ) ;
25953: LD_INT 0
25955: PPUSH
25956: LD_VAR 0 8
25960: PPUSH
25961: LD_VAR 0 4
25965: PPUSH
25966: CALL_OW 380
// un := CreateHuman ;
25970: LD_ADDR_VAR 0 14
25974: PUSH
25975: CALL_OW 44
25979: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25980: LD_ADDR_VAR 0 7
25984: PUSH
25985: LD_VAR 0 7
25989: PPUSH
25990: LD_INT 1
25992: PPUSH
25993: LD_VAR 0 14
25997: PPUSH
25998: CALL_OW 2
26002: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26003: LD_VAR 0 14
26007: PPUSH
26008: LD_VAR 0 12
26012: PUSH
26013: LD_INT 1
26015: ARRAY
26016: PPUSH
26017: CALL_OW 52
// end ;
26021: GO 25656
26023: POP
26024: POP
// end ;
26025: GO 24956
26027: POP
26028: POP
// result := result ^ buildings ;
26029: LD_ADDR_VAR 0 7
26033: PUSH
26034: LD_VAR 0 7
26038: PUSH
26039: LD_VAR 0 18
26043: ADD
26044: ST_TO_ADDR
// end else
26045: GO 26188
// begin for i = 1 to personel do
26047: LD_ADDR_VAR 0 8
26051: PUSH
26052: DOUBLE
26053: LD_INT 1
26055: DEC
26056: ST_TO_ADDR
26057: LD_VAR 0 6
26061: PUSH
26062: FOR_TO
26063: IFFALSE 26186
// begin if i > 4 then
26065: LD_VAR 0 8
26069: PUSH
26070: LD_INT 4
26072: GREATER
26073: IFFALSE 26077
// break ;
26075: GO 26186
// x := personel [ i ] ;
26077: LD_ADDR_VAR 0 13
26081: PUSH
26082: LD_VAR 0 6
26086: PUSH
26087: LD_VAR 0 8
26091: ARRAY
26092: ST_TO_ADDR
// if x = - 1 then
26093: LD_VAR 0 13
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: EQUAL
26102: IFFALSE 26106
// continue ;
26104: GO 26062
// PrepareHuman ( false , i , skill ) ;
26106: LD_INT 0
26108: PPUSH
26109: LD_VAR 0 8
26113: PPUSH
26114: LD_VAR 0 4
26118: PPUSH
26119: CALL_OW 380
// un := CreateHuman ;
26123: LD_ADDR_VAR 0 14
26127: PUSH
26128: CALL_OW 44
26132: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26133: LD_VAR 0 14
26137: PPUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL_OW 250
26147: PPUSH
26148: LD_VAR 0 1
26152: PPUSH
26153: CALL_OW 251
26157: PPUSH
26158: LD_INT 10
26160: PPUSH
26161: LD_INT 0
26163: PPUSH
26164: CALL_OW 50
// result := result ^ un ;
26168: LD_ADDR_VAR 0 7
26172: PUSH
26173: LD_VAR 0 7
26177: PUSH
26178: LD_VAR 0 14
26182: ADD
26183: ST_TO_ADDR
// end ;
26184: GO 26062
26186: POP
26187: POP
// end ; end ;
26188: LD_VAR 0 7
26192: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26193: LD_INT 0
26195: PPUSH
26196: PPUSH
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
26210: PPUSH
// result := false ;
26211: LD_ADDR_VAR 0 3
26215: PUSH
26216: LD_INT 0
26218: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26219: LD_VAR 0 1
26223: NOT
26224: IFTRUE 26249
26226: PUSH
26227: LD_VAR 0 1
26231: PPUSH
26232: CALL_OW 266
26236: PUSH
26237: LD_INT 32
26239: PUSH
26240: LD_INT 33
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: IN
26247: NOT
26248: OR
26249: IFFALSE 26253
// exit ;
26251: GO 27388
// nat := GetNation ( tower ) ;
26253: LD_ADDR_VAR 0 12
26257: PUSH
26258: LD_VAR 0 1
26262: PPUSH
26263: CALL_OW 248
26267: ST_TO_ADDR
// side := GetSide ( tower ) ;
26268: LD_ADDR_VAR 0 16
26272: PUSH
26273: LD_VAR 0 1
26277: PPUSH
26278: CALL_OW 255
26282: ST_TO_ADDR
// x := GetX ( tower ) ;
26283: LD_ADDR_VAR 0 10
26287: PUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 250
26297: ST_TO_ADDR
// y := GetY ( tower ) ;
26298: LD_ADDR_VAR 0 11
26302: PUSH
26303: LD_VAR 0 1
26307: PPUSH
26308: CALL_OW 251
26312: ST_TO_ADDR
// if not x or not y then
26313: LD_VAR 0 10
26317: NOT
26318: IFTRUE 26327
26320: PUSH
26321: LD_VAR 0 11
26325: NOT
26326: OR
26327: IFFALSE 26331
// exit ;
26329: GO 27388
// weapon := 0 ;
26331: LD_ADDR_VAR 0 18
26335: PUSH
26336: LD_INT 0
26338: ST_TO_ADDR
// fac_list := [ ] ;
26339: LD_ADDR_VAR 0 17
26343: PUSH
26344: EMPTY
26345: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26346: LD_ADDR_VAR 0 6
26350: PUSH
26351: LD_VAR 0 1
26355: PPUSH
26356: CALL_OW 274
26360: PPUSH
26361: LD_VAR 0 2
26365: PPUSH
26366: LD_INT 0
26368: PPUSH
26369: CALL 23923 0 3
26373: PPUSH
26374: LD_INT 30
26376: PUSH
26377: LD_INT 3
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 72
26388: ST_TO_ADDR
// if not factories then
26389: LD_VAR 0 6
26393: NOT
26394: IFFALSE 26398
// exit ;
26396: GO 27388
// for i in factories do
26398: LD_ADDR_VAR 0 8
26402: PUSH
26403: LD_VAR 0 6
26407: PUSH
26408: FOR_IN
26409: IFFALSE 26434
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26411: LD_ADDR_VAR 0 17
26415: PUSH
26416: LD_VAR 0 17
26420: PUSH
26421: LD_VAR 0 8
26425: PPUSH
26426: CALL_OW 478
26430: UNION
26431: ST_TO_ADDR
26432: GO 26408
26434: POP
26435: POP
// if not fac_list then
26436: LD_VAR 0 17
26440: NOT
26441: IFFALSE 26445
// exit ;
26443: GO 27388
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26445: LD_ADDR_VAR 0 5
26449: PUSH
26450: LD_INT 4
26452: PUSH
26453: LD_INT 5
26455: PUSH
26456: LD_INT 9
26458: PUSH
26459: LD_INT 10
26461: PUSH
26462: LD_INT 6
26464: PUSH
26465: LD_INT 7
26467: PUSH
26468: LD_INT 11
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 27
26482: PUSH
26483: LD_INT 28
26485: PUSH
26486: LD_INT 26
26488: PUSH
26489: LD_INT 30
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 43
26500: PUSH
26501: LD_INT 44
26503: PUSH
26504: LD_INT 46
26506: PUSH
26507: LD_INT 45
26509: PUSH
26510: LD_INT 47
26512: PUSH
26513: LD_INT 49
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: PUSH
26529: LD_VAR 0 12
26533: ARRAY
26534: ST_TO_ADDR
// list := list isect fac_list ;
26535: LD_ADDR_VAR 0 5
26539: PUSH
26540: LD_VAR 0 5
26544: PUSH
26545: LD_VAR 0 17
26549: ISECT
26550: ST_TO_ADDR
// if not list then
26551: LD_VAR 0 5
26555: NOT
26556: IFFALSE 26560
// exit ;
26558: GO 27388
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26560: LD_VAR 0 12
26564: PUSH
26565: LD_INT 3
26567: EQUAL
26568: IFFALSE 26580
26570: PUSH
26571: LD_INT 49
26573: PUSH
26574: LD_VAR 0 5
26578: IN
26579: AND
26580: IFFALSE 26600
26582: PUSH
26583: LD_INT 31
26585: PPUSH
26586: LD_VAR 0 16
26590: PPUSH
26591: CALL_OW 321
26595: PUSH
26596: LD_INT 2
26598: EQUAL
26599: AND
26600: IFFALSE 26660
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26602: LD_INT 22
26604: PUSH
26605: LD_VAR 0 16
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 35
26616: PUSH
26617: LD_INT 49
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 91
26626: PUSH
26627: LD_VAR 0 1
26631: PUSH
26632: LD_INT 10
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: LIST
26644: PPUSH
26645: CALL_OW 69
26649: NOT
26650: IFFALSE 26660
// weapon := ru_time_lapser ;
26652: LD_ADDR_VAR 0 18
26656: PUSH
26657: LD_INT 49
26659: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26660: LD_VAR 0 12
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: IN
26675: IFFALSE 26699
26677: PUSH
26678: LD_INT 11
26680: PUSH
26681: LD_VAR 0 5
26685: IN
26686: IFTRUE 26698
26688: PUSH
26689: LD_INT 30
26691: PUSH
26692: LD_VAR 0 5
26696: IN
26697: OR
26698: AND
26699: IFFALSE 26719
26701: PUSH
26702: LD_INT 6
26704: PPUSH
26705: LD_VAR 0 16
26709: PPUSH
26710: CALL_OW 321
26714: PUSH
26715: LD_INT 2
26717: EQUAL
26718: AND
26719: IFFALSE 26886
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26721: LD_INT 22
26723: PUSH
26724: LD_VAR 0 16
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: LD_INT 35
26738: PUSH
26739: LD_INT 11
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 35
26748: PUSH
26749: LD_INT 30
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 91
26763: PUSH
26764: LD_VAR 0 1
26768: PUSH
26769: LD_INT 18
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: PPUSH
26782: CALL_OW 69
26786: NOT
26787: IFFALSE 26863
26789: PUSH
26790: LD_INT 22
26792: PUSH
26793: LD_VAR 0 16
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 30
26807: PUSH
26808: LD_INT 32
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 30
26817: PUSH
26818: LD_INT 33
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 91
26832: PUSH
26833: LD_VAR 0 1
26837: PUSH
26838: LD_INT 12
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: LIST
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: LIST
26850: PUSH
26851: EMPTY
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: PUSH
26859: LD_INT 2
26861: GREATER
26862: AND
26863: IFFALSE 26886
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26865: LD_ADDR_VAR 0 18
26869: PUSH
26870: LD_INT 11
26872: PUSH
26873: LD_INT 30
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_VAR 0 12
26884: ARRAY
26885: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26886: LD_VAR 0 18
26890: NOT
26891: IFFALSE 26911
26893: PUSH
26894: LD_INT 40
26896: PPUSH
26897: LD_VAR 0 16
26901: PPUSH
26902: CALL_OW 321
26906: PUSH
26907: LD_INT 2
26909: EQUAL
26910: AND
26911: IFFALSE 26947
26913: PUSH
26914: LD_INT 7
26916: PUSH
26917: LD_VAR 0 5
26921: IN
26922: IFTRUE 26934
26924: PUSH
26925: LD_INT 28
26927: PUSH
26928: LD_VAR 0 5
26932: IN
26933: OR
26934: IFTRUE 26946
26936: PUSH
26937: LD_INT 45
26939: PUSH
26940: LD_VAR 0 5
26944: IN
26945: OR
26946: AND
26947: IFFALSE 27201
// begin hex := GetHexInfo ( x , y ) ;
26949: LD_ADDR_VAR 0 4
26953: PUSH
26954: LD_VAR 0 10
26958: PPUSH
26959: LD_VAR 0 11
26963: PPUSH
26964: CALL_OW 546
26968: ST_TO_ADDR
// if hex [ 1 ] then
26969: LD_VAR 0 4
26973: PUSH
26974: LD_INT 1
26976: ARRAY
26977: IFFALSE 26981
// exit ;
26979: GO 27388
// height := hex [ 2 ] ;
26981: LD_ADDR_VAR 0 15
26985: PUSH
26986: LD_VAR 0 4
26990: PUSH
26991: LD_INT 2
26993: ARRAY
26994: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26995: LD_ADDR_VAR 0 14
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 3
27008: PUSH
27009: LD_INT 5
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
// for i in tmp do
27018: LD_ADDR_VAR 0 8
27022: PUSH
27023: LD_VAR 0 14
27027: PUSH
27028: FOR_IN
27029: IFFALSE 27199
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27031: LD_ADDR_VAR 0 9
27035: PUSH
27036: LD_VAR 0 10
27040: PPUSH
27041: LD_VAR 0 8
27045: PPUSH
27046: LD_INT 5
27048: PPUSH
27049: CALL_OW 272
27053: PUSH
27054: LD_VAR 0 11
27058: PPUSH
27059: LD_VAR 0 8
27063: PPUSH
27064: LD_INT 5
27066: PPUSH
27067: CALL_OW 273
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27076: LD_VAR 0 9
27080: PUSH
27081: LD_INT 1
27083: ARRAY
27084: PPUSH
27085: LD_VAR 0 9
27089: PUSH
27090: LD_INT 2
27092: ARRAY
27093: PPUSH
27094: CALL_OW 488
27098: IFFALSE 27197
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27100: LD_ADDR_VAR 0 4
27104: PUSH
27105: LD_VAR 0 9
27109: PUSH
27110: LD_INT 1
27112: ARRAY
27113: PPUSH
27114: LD_VAR 0 9
27118: PUSH
27119: LD_INT 2
27121: ARRAY
27122: PPUSH
27123: CALL_OW 546
27127: ST_TO_ADDR
// if hex [ 1 ] then
27128: LD_VAR 0 4
27132: PUSH
27133: LD_INT 1
27135: ARRAY
27136: IFFALSE 27140
// continue ;
27138: GO 27028
// h := hex [ 2 ] ;
27140: LD_ADDR_VAR 0 13
27144: PUSH
27145: LD_VAR 0 4
27149: PUSH
27150: LD_INT 2
27152: ARRAY
27153: ST_TO_ADDR
// if h + 7 < height then
27154: LD_VAR 0 13
27158: PUSH
27159: LD_INT 7
27161: PLUS
27162: PUSH
27163: LD_VAR 0 15
27167: LESS
27168: IFFALSE 27197
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27170: LD_ADDR_VAR 0 18
27174: PUSH
27175: LD_INT 7
27177: PUSH
27178: LD_INT 28
27180: PUSH
27181: LD_INT 45
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: LIST
27188: PUSH
27189: LD_VAR 0 12
27193: ARRAY
27194: ST_TO_ADDR
// break ;
27195: GO 27199
// end ; end ; end ;
27197: GO 27028
27199: POP
27200: POP
// end ; if not weapon then
27201: LD_VAR 0 18
27205: NOT
27206: IFFALSE 27266
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27208: LD_ADDR_VAR 0 5
27212: PUSH
27213: LD_VAR 0 5
27217: PUSH
27218: LD_INT 11
27220: PUSH
27221: LD_INT 30
27223: PUSH
27224: LD_INT 49
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: DIFF
27232: ST_TO_ADDR
// if not list then
27233: LD_VAR 0 5
27237: NOT
27238: IFFALSE 27242
// exit ;
27240: GO 27388
// weapon := list [ rand ( 1 , list ) ] ;
27242: LD_ADDR_VAR 0 18
27246: PUSH
27247: LD_VAR 0 5
27251: PUSH
27252: LD_INT 1
27254: PPUSH
27255: LD_VAR 0 5
27259: PPUSH
27260: CALL_OW 12
27264: ARRAY
27265: ST_TO_ADDR
// end ; if weapon then
27266: LD_VAR 0 18
27270: IFFALSE 27388
// begin tmp := CostOfWeapon ( weapon ) ;
27272: LD_ADDR_VAR 0 14
27276: PUSH
27277: LD_VAR 0 18
27281: PPUSH
27282: CALL_OW 451
27286: ST_TO_ADDR
// j := GetBase ( tower ) ;
27287: LD_ADDR_VAR 0 9
27291: PUSH
27292: LD_VAR 0 1
27296: PPUSH
27297: CALL_OW 274
27301: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27302: LD_VAR 0 9
27306: PPUSH
27307: LD_INT 1
27309: PPUSH
27310: CALL_OW 275
27314: PUSH
27315: LD_VAR 0 14
27319: PUSH
27320: LD_INT 1
27322: ARRAY
27323: GREATEREQUAL
27324: IFFALSE 27350
27326: PUSH
27327: LD_VAR 0 9
27331: PPUSH
27332: LD_INT 2
27334: PPUSH
27335: CALL_OW 275
27339: PUSH
27340: LD_VAR 0 14
27344: PUSH
27345: LD_INT 2
27347: ARRAY
27348: GREATEREQUAL
27349: AND
27350: IFFALSE 27376
27352: PUSH
27353: LD_VAR 0 9
27357: PPUSH
27358: LD_INT 3
27360: PPUSH
27361: CALL_OW 275
27365: PUSH
27366: LD_VAR 0 14
27370: PUSH
27371: LD_INT 3
27373: ARRAY
27374: GREATEREQUAL
27375: AND
27376: IFFALSE 27388
// result := weapon ;
27378: LD_ADDR_VAR 0 3
27382: PUSH
27383: LD_VAR 0 18
27387: ST_TO_ADDR
// end ; end ;
27388: LD_VAR 0 3
27392: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27393: LD_INT 0
27395: PPUSH
27396: PPUSH
// result := true ;
27397: LD_ADDR_VAR 0 3
27401: PUSH
27402: LD_INT 1
27404: ST_TO_ADDR
// if array1 = array2 then
27405: LD_VAR 0 1
27409: PUSH
27410: LD_VAR 0 2
27414: EQUAL
27415: IFFALSE 27475
// begin for i = 1 to array1 do
27417: LD_ADDR_VAR 0 4
27421: PUSH
27422: DOUBLE
27423: LD_INT 1
27425: DEC
27426: ST_TO_ADDR
27427: LD_VAR 0 1
27431: PUSH
27432: FOR_TO
27433: IFFALSE 27471
// if array1 [ i ] <> array2 [ i ] then
27435: LD_VAR 0 1
27439: PUSH
27440: LD_VAR 0 4
27444: ARRAY
27445: PUSH
27446: LD_VAR 0 2
27450: PUSH
27451: LD_VAR 0 4
27455: ARRAY
27456: NONEQUAL
27457: IFFALSE 27469
// begin result := false ;
27459: LD_ADDR_VAR 0 3
27463: PUSH
27464: LD_INT 0
27466: ST_TO_ADDR
// break ;
27467: GO 27471
// end ;
27469: GO 27432
27471: POP
27472: POP
// end else
27473: GO 27483
// result := false ;
27475: LD_ADDR_VAR 0 3
27479: PUSH
27480: LD_INT 0
27482: ST_TO_ADDR
// end ;
27483: LD_VAR 0 3
27487: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27488: LD_INT 0
27490: PPUSH
27491: PPUSH
// if not array1 or not array2 then
27492: LD_VAR 0 1
27496: NOT
27497: IFTRUE 27506
27499: PUSH
27500: LD_VAR 0 2
27504: NOT
27505: OR
27506: IFFALSE 27510
// exit ;
27508: GO 27574
// result := true ;
27510: LD_ADDR_VAR 0 3
27514: PUSH
27515: LD_INT 1
27517: ST_TO_ADDR
// for i = 1 to array1 do
27518: LD_ADDR_VAR 0 4
27522: PUSH
27523: DOUBLE
27524: LD_INT 1
27526: DEC
27527: ST_TO_ADDR
27528: LD_VAR 0 1
27532: PUSH
27533: FOR_TO
27534: IFFALSE 27572
// if array1 [ i ] <> array2 [ i ] then
27536: LD_VAR 0 1
27540: PUSH
27541: LD_VAR 0 4
27545: ARRAY
27546: PUSH
27547: LD_VAR 0 2
27551: PUSH
27552: LD_VAR 0 4
27556: ARRAY
27557: NONEQUAL
27558: IFFALSE 27570
// begin result := false ;
27560: LD_ADDR_VAR 0 3
27564: PUSH
27565: LD_INT 0
27567: ST_TO_ADDR
// break ;
27568: GO 27572
// end ;
27570: GO 27533
27572: POP
27573: POP
// end ;
27574: LD_VAR 0 3
27578: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27579: LD_INT 0
27581: PPUSH
27582: PPUSH
27583: PPUSH
// pom := GetBase ( fac ) ;
27584: LD_ADDR_VAR 0 5
27588: PUSH
27589: LD_VAR 0 1
27593: PPUSH
27594: CALL_OW 274
27598: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27599: LD_ADDR_VAR 0 4
27603: PUSH
27604: LD_VAR 0 2
27608: PUSH
27609: LD_INT 1
27611: ARRAY
27612: PPUSH
27613: LD_VAR 0 2
27617: PUSH
27618: LD_INT 2
27620: ARRAY
27621: PPUSH
27622: LD_VAR 0 2
27626: PUSH
27627: LD_INT 3
27629: ARRAY
27630: PPUSH
27631: LD_VAR 0 2
27635: PUSH
27636: LD_INT 4
27638: ARRAY
27639: PPUSH
27640: CALL_OW 449
27644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_VAR 0 5
27654: PPUSH
27655: LD_INT 1
27657: PPUSH
27658: CALL_OW 275
27662: PUSH
27663: LD_VAR 0 4
27667: PUSH
27668: LD_INT 1
27670: ARRAY
27671: GREATEREQUAL
27672: IFFALSE 27698
27674: PUSH
27675: LD_VAR 0 5
27679: PPUSH
27680: LD_INT 2
27682: PPUSH
27683: CALL_OW 275
27687: PUSH
27688: LD_VAR 0 4
27692: PUSH
27693: LD_INT 2
27695: ARRAY
27696: GREATEREQUAL
27697: AND
27698: IFFALSE 27724
27700: PUSH
27701: LD_VAR 0 5
27705: PPUSH
27706: LD_INT 3
27708: PPUSH
27709: CALL_OW 275
27713: PUSH
27714: LD_VAR 0 4
27718: PUSH
27719: LD_INT 3
27721: ARRAY
27722: GREATEREQUAL
27723: AND
27724: ST_TO_ADDR
// end ;
27725: LD_VAR 0 3
27729: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27730: LD_INT 0
27732: PPUSH
27733: PPUSH
27734: PPUSH
27735: PPUSH
// pom := GetBase ( building ) ;
27736: LD_ADDR_VAR 0 3
27740: PUSH
27741: LD_VAR 0 1
27745: PPUSH
27746: CALL_OW 274
27750: ST_TO_ADDR
// if not pom then
27751: LD_VAR 0 3
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27934
// btype := GetBType ( building ) ;
27760: LD_ADDR_VAR 0 5
27764: PUSH
27765: LD_VAR 0 1
27769: PPUSH
27770: CALL_OW 266
27774: ST_TO_ADDR
// if btype = b_armoury then
27775: LD_VAR 0 5
27779: PUSH
27780: LD_INT 4
27782: EQUAL
27783: IFFALSE 27793
// btype := b_barracks ;
27785: LD_ADDR_VAR 0 5
27789: PUSH
27790: LD_INT 5
27792: ST_TO_ADDR
// if btype = b_depot then
27793: LD_VAR 0 5
27797: PUSH
27798: LD_INT 0
27800: EQUAL
27801: IFFALSE 27811
// btype := b_warehouse ;
27803: LD_ADDR_VAR 0 5
27807: PUSH
27808: LD_INT 1
27810: ST_TO_ADDR
// if btype = b_workshop then
27811: LD_VAR 0 5
27815: PUSH
27816: LD_INT 2
27818: EQUAL
27819: IFFALSE 27829
// btype := b_factory ;
27821: LD_ADDR_VAR 0 5
27825: PUSH
27826: LD_INT 3
27828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27829: LD_ADDR_VAR 0 4
27833: PUSH
27834: LD_VAR 0 5
27838: PPUSH
27839: LD_VAR 0 1
27843: PPUSH
27844: CALL_OW 248
27848: PPUSH
27849: CALL_OW 450
27853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27854: LD_ADDR_VAR 0 2
27858: PUSH
27859: LD_VAR 0 3
27863: PPUSH
27864: LD_INT 1
27866: PPUSH
27867: CALL_OW 275
27871: PUSH
27872: LD_VAR 0 4
27876: PUSH
27877: LD_INT 1
27879: ARRAY
27880: GREATEREQUAL
27881: IFFALSE 27907
27883: PUSH
27884: LD_VAR 0 3
27888: PPUSH
27889: LD_INT 2
27891: PPUSH
27892: CALL_OW 275
27896: PUSH
27897: LD_VAR 0 4
27901: PUSH
27902: LD_INT 2
27904: ARRAY
27905: GREATEREQUAL
27906: AND
27907: IFFALSE 27933
27909: PUSH
27910: LD_VAR 0 3
27914: PPUSH
27915: LD_INT 3
27917: PPUSH
27918: CALL_OW 275
27922: PUSH
27923: LD_VAR 0 4
27927: PUSH
27928: LD_INT 3
27930: ARRAY
27931: GREATEREQUAL
27932: AND
27933: ST_TO_ADDR
// end ;
27934: LD_VAR 0 2
27938: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27939: LD_INT 0
27941: PPUSH
27942: PPUSH
27943: PPUSH
// pom := GetBase ( building ) ;
27944: LD_ADDR_VAR 0 4
27948: PUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 274
27958: ST_TO_ADDR
// if not pom then
27959: LD_VAR 0 4
27963: NOT
27964: IFFALSE 27968
// exit ;
27966: GO 28073
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27968: LD_ADDR_VAR 0 5
27972: PUSH
27973: LD_VAR 0 2
27977: PPUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: CALL_OW 248
27987: PPUSH
27988: CALL_OW 450
27992: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: LD_VAR 0 4
28002: PPUSH
28003: LD_INT 1
28005: PPUSH
28006: CALL_OW 275
28010: PUSH
28011: LD_VAR 0 5
28015: PUSH
28016: LD_INT 1
28018: ARRAY
28019: GREATEREQUAL
28020: IFFALSE 28046
28022: PUSH
28023: LD_VAR 0 4
28027: PPUSH
28028: LD_INT 2
28030: PPUSH
28031: CALL_OW 275
28035: PUSH
28036: LD_VAR 0 5
28040: PUSH
28041: LD_INT 2
28043: ARRAY
28044: GREATEREQUAL
28045: AND
28046: IFFALSE 28072
28048: PUSH
28049: LD_VAR 0 4
28053: PPUSH
28054: LD_INT 3
28056: PPUSH
28057: CALL_OW 275
28061: PUSH
28062: LD_VAR 0 5
28066: PUSH
28067: LD_INT 3
28069: ARRAY
28070: GREATEREQUAL
28071: AND
28072: ST_TO_ADDR
// end ;
28073: LD_VAR 0 3
28077: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28078: LD_INT 0
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
28084: PPUSH
28085: PPUSH
28086: PPUSH
28087: PPUSH
28088: PPUSH
28089: PPUSH
28090: PPUSH
// result := false ;
28091: LD_ADDR_VAR 0 8
28095: PUSH
28096: LD_INT 0
28098: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28099: LD_VAR 0 5
28103: NOT
28104: IFTRUE 28113
28106: PUSH
28107: LD_VAR 0 1
28111: NOT
28112: OR
28113: IFTRUE 28122
28115: PUSH
28116: LD_VAR 0 2
28120: NOT
28121: OR
28122: IFTRUE 28131
28124: PUSH
28125: LD_VAR 0 3
28129: NOT
28130: OR
28131: IFFALSE 28135
// exit ;
28133: GO 28961
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28135: LD_ADDR_VAR 0 14
28139: PUSH
28140: LD_VAR 0 1
28144: PPUSH
28145: LD_VAR 0 2
28149: PPUSH
28150: LD_VAR 0 3
28154: PPUSH
28155: LD_VAR 0 4
28159: PPUSH
28160: LD_VAR 0 5
28164: PUSH
28165: LD_INT 1
28167: ARRAY
28168: PPUSH
28169: CALL_OW 248
28173: PPUSH
28174: LD_INT 0
28176: PPUSH
28177: CALL 30242 0 6
28181: ST_TO_ADDR
// if not hexes then
28182: LD_VAR 0 14
28186: NOT
28187: IFFALSE 28191
// exit ;
28189: GO 28961
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28191: LD_ADDR_VAR 0 17
28195: PUSH
28196: LD_VAR 0 5
28200: PPUSH
28201: LD_INT 22
28203: PUSH
28204: LD_VAR 0 13
28208: PPUSH
28209: CALL_OW 255
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 30
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 30
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PPUSH
28250: CALL_OW 72
28254: ST_TO_ADDR
// for i = 1 to hexes do
28255: LD_ADDR_VAR 0 9
28259: PUSH
28260: DOUBLE
28261: LD_INT 1
28263: DEC
28264: ST_TO_ADDR
28265: LD_VAR 0 14
28269: PUSH
28270: FOR_TO
28271: IFFALSE 28959
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28273: LD_ADDR_VAR 0 13
28277: PUSH
28278: LD_VAR 0 14
28282: PUSH
28283: LD_VAR 0 9
28287: ARRAY
28288: PUSH
28289: LD_INT 1
28291: ARRAY
28292: PPUSH
28293: LD_VAR 0 14
28297: PUSH
28298: LD_VAR 0 9
28302: ARRAY
28303: PUSH
28304: LD_INT 2
28306: ARRAY
28307: PPUSH
28308: CALL_OW 428
28312: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28313: LD_VAR 0 14
28317: PUSH
28318: LD_VAR 0 9
28322: ARRAY
28323: PUSH
28324: LD_INT 1
28326: ARRAY
28327: PPUSH
28328: LD_VAR 0 14
28332: PUSH
28333: LD_VAR 0 9
28337: ARRAY
28338: PUSH
28339: LD_INT 2
28341: ARRAY
28342: PPUSH
28343: CALL_OW 351
28347: IFTRUE 28386
28349: PUSH
28350: LD_VAR 0 14
28354: PUSH
28355: LD_VAR 0 9
28359: ARRAY
28360: PUSH
28361: LD_INT 1
28363: ARRAY
28364: PPUSH
28365: LD_VAR 0 14
28369: PUSH
28370: LD_VAR 0 9
28374: ARRAY
28375: PUSH
28376: LD_INT 2
28378: ARRAY
28379: PPUSH
28380: CALL_OW 488
28384: NOT
28385: OR
28386: IFTRUE 28403
28388: PUSH
28389: LD_VAR 0 13
28393: PPUSH
28394: CALL_OW 247
28398: PUSH
28399: LD_INT 3
28401: EQUAL
28402: OR
28403: IFFALSE 28409
// exit ;
28405: POP
28406: POP
28407: GO 28961
// if not tmp then
28409: LD_VAR 0 13
28413: NOT
28414: IFFALSE 28418
// continue ;
28416: GO 28270
// result := true ;
28418: LD_ADDR_VAR 0 8
28422: PUSH
28423: LD_INT 1
28425: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28426: LD_VAR 0 6
28430: IFFALSE 28447
28432: PUSH
28433: LD_VAR 0 13
28437: PPUSH
28438: CALL_OW 247
28442: PUSH
28443: LD_INT 2
28445: EQUAL
28446: AND
28447: IFFALSE 28464
28449: PUSH
28450: LD_VAR 0 13
28454: PPUSH
28455: CALL_OW 263
28459: PUSH
28460: LD_INT 1
28462: EQUAL
28463: AND
28464: IFFALSE 28628
// begin if IsDrivenBy ( tmp ) then
28466: LD_VAR 0 13
28470: PPUSH
28471: CALL_OW 311
28475: IFFALSE 28479
// continue ;
28477: GO 28270
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28479: LD_VAR 0 6
28483: PPUSH
28484: LD_INT 3
28486: PUSH
28487: LD_INT 60
28489: PUSH
28490: EMPTY
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: LD_INT 55
28502: PUSH
28503: EMPTY
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PPUSH
28514: CALL_OW 72
28518: IFFALSE 28626
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28520: LD_ADDR_VAR 0 18
28524: PUSH
28525: LD_VAR 0 6
28529: PPUSH
28530: LD_INT 3
28532: PUSH
28533: LD_INT 60
28535: PUSH
28536: EMPTY
28537: LIST
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 3
28545: PUSH
28546: LD_INT 55
28548: PUSH
28549: EMPTY
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PPUSH
28560: CALL_OW 72
28564: PUSH
28565: LD_INT 1
28567: ARRAY
28568: ST_TO_ADDR
// if IsInUnit ( driver ) then
28569: LD_VAR 0 18
28573: PPUSH
28574: CALL_OW 310
28578: IFFALSE 28589
// ComExit ( driver ) ;
28580: LD_VAR 0 18
28584: PPUSH
28585: CALL 54232 0 1
// AddComEnterUnit ( driver , tmp ) ;
28589: LD_VAR 0 18
28593: PPUSH
28594: LD_VAR 0 13
28598: PPUSH
28599: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28603: LD_VAR 0 18
28607: PPUSH
28608: LD_VAR 0 7
28612: PPUSH
28613: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28617: LD_VAR 0 18
28621: PPUSH
28622: CALL_OW 181
// end ; continue ;
28626: GO 28270
// end ; if not cleaners or not tmp in cleaners then
28628: LD_VAR 0 6
28632: NOT
28633: IFTRUE 28648
28635: PUSH
28636: LD_VAR 0 13
28640: PUSH
28641: LD_VAR 0 6
28645: IN
28646: NOT
28647: OR
28648: IFFALSE 28957
// begin if dep then
28650: LD_VAR 0 17
28654: IFFALSE 28790
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28656: LD_ADDR_VAR 0 16
28660: PUSH
28661: LD_VAR 0 17
28665: PUSH
28666: LD_INT 1
28668: ARRAY
28669: PPUSH
28670: CALL_OW 250
28674: PPUSH
28675: LD_VAR 0 17
28679: PUSH
28680: LD_INT 1
28682: ARRAY
28683: PPUSH
28684: CALL_OW 254
28688: PPUSH
28689: LD_INT 5
28691: PPUSH
28692: CALL_OW 272
28696: PUSH
28697: LD_VAR 0 17
28701: PUSH
28702: LD_INT 1
28704: ARRAY
28705: PPUSH
28706: CALL_OW 251
28710: PPUSH
28711: LD_VAR 0 17
28715: PUSH
28716: LD_INT 1
28718: ARRAY
28719: PPUSH
28720: CALL_OW 254
28724: PPUSH
28725: LD_INT 5
28727: PPUSH
28728: CALL_OW 273
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28737: LD_VAR 0 16
28741: PUSH
28742: LD_INT 1
28744: ARRAY
28745: PPUSH
28746: LD_VAR 0 16
28750: PUSH
28751: LD_INT 2
28753: ARRAY
28754: PPUSH
28755: CALL_OW 488
28759: IFFALSE 28790
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28761: LD_VAR 0 13
28765: PPUSH
28766: LD_VAR 0 16
28770: PUSH
28771: LD_INT 1
28773: ARRAY
28774: PPUSH
28775: LD_VAR 0 16
28779: PUSH
28780: LD_INT 2
28782: ARRAY
28783: PPUSH
28784: CALL_OW 111
// continue ;
28788: GO 28270
// end ; end ; r := GetDir ( tmp ) ;
28790: LD_ADDR_VAR 0 15
28794: PUSH
28795: LD_VAR 0 13
28799: PPUSH
28800: CALL_OW 254
28804: ST_TO_ADDR
// if r = 5 then
28805: LD_VAR 0 15
28809: PUSH
28810: LD_INT 5
28812: EQUAL
28813: IFFALSE 28823
// r := 0 ;
28815: LD_ADDR_VAR 0 15
28819: PUSH
28820: LD_INT 0
28822: ST_TO_ADDR
// for j = r to 5 do
28823: LD_ADDR_VAR 0 10
28827: PUSH
28828: DOUBLE
28829: LD_VAR 0 15
28833: DEC
28834: ST_TO_ADDR
28835: LD_INT 5
28837: PUSH
28838: FOR_TO
28839: IFFALSE 28955
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28841: LD_ADDR_VAR 0 11
28845: PUSH
28846: LD_VAR 0 13
28850: PPUSH
28851: CALL_OW 250
28855: PPUSH
28856: LD_VAR 0 10
28860: PPUSH
28861: LD_INT 2
28863: PPUSH
28864: CALL_OW 272
28868: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28869: LD_ADDR_VAR 0 12
28873: PUSH
28874: LD_VAR 0 13
28878: PPUSH
28879: CALL_OW 251
28883: PPUSH
28884: LD_VAR 0 10
28888: PPUSH
28889: LD_INT 2
28891: PPUSH
28892: CALL_OW 273
28896: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28897: LD_VAR 0 11
28901: PPUSH
28902: LD_VAR 0 12
28906: PPUSH
28907: CALL_OW 488
28911: IFFALSE 28930
28913: PUSH
28914: LD_VAR 0 11
28918: PPUSH
28919: LD_VAR 0 12
28923: PPUSH
28924: CALL_OW 428
28928: NOT
28929: AND
28930: IFFALSE 28953
// begin ComMoveXY ( tmp , _x , _y ) ;
28932: LD_VAR 0 13
28936: PPUSH
28937: LD_VAR 0 11
28941: PPUSH
28942: LD_VAR 0 12
28946: PPUSH
28947: CALL_OW 111
// break ;
28951: GO 28955
// end ; end ;
28953: GO 28838
28955: POP
28956: POP
// end ; end ;
28957: GO 28270
28959: POP
28960: POP
// end ;
28961: LD_VAR 0 8
28965: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28966: LD_INT 0
28968: PPUSH
// result := true ;
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 1
28976: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28977: LD_VAR 0 2
28981: PUSH
28982: LD_INT 24
28984: DOUBLE
28985: EQUAL
28986: IFTRUE 28996
28988: LD_INT 33
28990: DOUBLE
28991: EQUAL
28992: IFTRUE 28996
28994: GO 29021
28996: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28997: LD_ADDR_VAR 0 3
29001: PUSH
29002: LD_INT 32
29004: PPUSH
29005: LD_VAR 0 1
29009: PPUSH
29010: CALL_OW 321
29014: PUSH
29015: LD_INT 2
29017: EQUAL
29018: ST_TO_ADDR
29019: GO 29337
29021: LD_INT 20
29023: DOUBLE
29024: EQUAL
29025: IFTRUE 29029
29027: GO 29054
29029: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29030: LD_ADDR_VAR 0 3
29034: PUSH
29035: LD_INT 6
29037: PPUSH
29038: LD_VAR 0 1
29042: PPUSH
29043: CALL_OW 321
29047: PUSH
29048: LD_INT 2
29050: EQUAL
29051: ST_TO_ADDR
29052: GO 29337
29054: LD_INT 22
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29068
29060: LD_INT 36
29062: DOUBLE
29063: EQUAL
29064: IFTRUE 29068
29066: GO 29093
29068: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_INT 15
29076: PPUSH
29077: LD_VAR 0 1
29081: PPUSH
29082: CALL_OW 321
29086: PUSH
29087: LD_INT 2
29089: EQUAL
29090: ST_TO_ADDR
29091: GO 29337
29093: LD_INT 30
29095: DOUBLE
29096: EQUAL
29097: IFTRUE 29101
29099: GO 29126
29101: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29102: LD_ADDR_VAR 0 3
29106: PUSH
29107: LD_INT 20
29109: PPUSH
29110: LD_VAR 0 1
29114: PPUSH
29115: CALL_OW 321
29119: PUSH
29120: LD_INT 2
29122: EQUAL
29123: ST_TO_ADDR
29124: GO 29337
29126: LD_INT 28
29128: DOUBLE
29129: EQUAL
29130: IFTRUE 29140
29132: LD_INT 21
29134: DOUBLE
29135: EQUAL
29136: IFTRUE 29140
29138: GO 29165
29140: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29141: LD_ADDR_VAR 0 3
29145: PUSH
29146: LD_INT 21
29148: PPUSH
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 321
29158: PUSH
29159: LD_INT 2
29161: EQUAL
29162: ST_TO_ADDR
29163: GO 29337
29165: LD_INT 16
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29198
29173: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 84
29181: PPUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 321
29191: PUSH
29192: LD_INT 2
29194: EQUAL
29195: ST_TO_ADDR
29196: GO 29337
29198: LD_INT 19
29200: DOUBLE
29201: EQUAL
29202: IFTRUE 29212
29204: LD_INT 23
29206: DOUBLE
29207: EQUAL
29208: IFTRUE 29212
29210: GO 29237
29212: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_INT 83
29220: PPUSH
29221: LD_VAR 0 1
29225: PPUSH
29226: CALL_OW 321
29230: PUSH
29231: LD_INT 2
29233: EQUAL
29234: ST_TO_ADDR
29235: GO 29337
29237: LD_INT 17
29239: DOUBLE
29240: EQUAL
29241: IFTRUE 29245
29243: GO 29270
29245: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: LD_INT 39
29253: PPUSH
29254: LD_VAR 0 1
29258: PPUSH
29259: CALL_OW 321
29263: PUSH
29264: LD_INT 2
29266: EQUAL
29267: ST_TO_ADDR
29268: GO 29337
29270: LD_INT 18
29272: DOUBLE
29273: EQUAL
29274: IFTRUE 29278
29276: GO 29303
29278: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29279: LD_ADDR_VAR 0 3
29283: PUSH
29284: LD_INT 40
29286: PPUSH
29287: LD_VAR 0 1
29291: PPUSH
29292: CALL_OW 321
29296: PUSH
29297: LD_INT 2
29299: EQUAL
29300: ST_TO_ADDR
29301: GO 29337
29303: LD_INT 27
29305: DOUBLE
29306: EQUAL
29307: IFTRUE 29311
29309: GO 29336
29311: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: LD_INT 35
29319: PPUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 321
29329: PUSH
29330: LD_INT 2
29332: EQUAL
29333: ST_TO_ADDR
29334: GO 29337
29336: POP
// end ;
29337: LD_VAR 0 3
29341: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29342: LD_INT 0
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
// result := false ;
29355: LD_ADDR_VAR 0 6
29359: PUSH
29360: LD_INT 0
29362: ST_TO_ADDR
// if btype = b_depot then
29363: LD_VAR 0 2
29367: PUSH
29368: LD_INT 0
29370: EQUAL
29371: IFFALSE 29383
// begin result := true ;
29373: LD_ADDR_VAR 0 6
29377: PUSH
29378: LD_INT 1
29380: ST_TO_ADDR
// exit ;
29381: GO 30237
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29383: LD_VAR 0 1
29387: NOT
29388: IFTRUE 29413
29390: PUSH
29391: LD_VAR 0 1
29395: PPUSH
29396: CALL_OW 266
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: IN
29411: NOT
29412: OR
29413: IFTRUE 29422
29415: PUSH
29416: LD_VAR 0 2
29420: NOT
29421: OR
29422: IFTRUE 29458
29424: PUSH
29425: LD_VAR 0 5
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 3
29441: PUSH
29442: LD_INT 4
29444: PUSH
29445: LD_INT 5
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: IN
29456: NOT
29457: OR
29458: IFTRUE 29477
29460: PUSH
29461: LD_VAR 0 3
29465: PPUSH
29466: LD_VAR 0 4
29470: PPUSH
29471: CALL_OW 488
29475: NOT
29476: OR
29477: IFFALSE 29481
// exit ;
29479: GO 30237
// side := GetSide ( depot ) ;
29481: LD_ADDR_VAR 0 9
29485: PUSH
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 255
29495: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29496: LD_VAR 0 9
29500: PPUSH
29501: LD_VAR 0 2
29505: PPUSH
29506: CALL 28966 0 2
29510: NOT
29511: IFFALSE 29515
// exit ;
29513: GO 30237
// pom := GetBase ( depot ) ;
29515: LD_ADDR_VAR 0 10
29519: PUSH
29520: LD_VAR 0 1
29524: PPUSH
29525: CALL_OW 274
29529: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29530: LD_ADDR_VAR 0 11
29534: PUSH
29535: LD_VAR 0 2
29539: PPUSH
29540: LD_VAR 0 1
29544: PPUSH
29545: CALL_OW 248
29549: PPUSH
29550: CALL_OW 450
29554: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29555: LD_VAR 0 10
29559: PPUSH
29560: LD_INT 1
29562: PPUSH
29563: CALL_OW 275
29567: PUSH
29568: LD_VAR 0 11
29572: PUSH
29573: LD_INT 1
29575: ARRAY
29576: GREATEREQUAL
29577: IFFALSE 29603
29579: PUSH
29580: LD_VAR 0 10
29584: PPUSH
29585: LD_INT 2
29587: PPUSH
29588: CALL_OW 275
29592: PUSH
29593: LD_VAR 0 11
29597: PUSH
29598: LD_INT 2
29600: ARRAY
29601: GREATEREQUAL
29602: AND
29603: IFFALSE 29629
29605: PUSH
29606: LD_VAR 0 10
29610: PPUSH
29611: LD_INT 3
29613: PPUSH
29614: CALL_OW 275
29618: PUSH
29619: LD_VAR 0 11
29623: PUSH
29624: LD_INT 3
29626: ARRAY
29627: GREATEREQUAL
29628: AND
29629: NOT
29630: IFFALSE 29634
// exit ;
29632: GO 30237
// if GetBType ( depot ) = b_depot then
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 266
29643: PUSH
29644: LD_INT 0
29646: EQUAL
29647: IFFALSE 29659
// dist := 28 else
29649: LD_ADDR_VAR 0 14
29653: PUSH
29654: LD_INT 28
29656: ST_TO_ADDR
29657: GO 29667
// dist := 36 ;
29659: LD_ADDR_VAR 0 14
29663: PUSH
29664: LD_INT 36
29666: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29667: LD_VAR 0 1
29671: PPUSH
29672: LD_VAR 0 3
29676: PPUSH
29677: LD_VAR 0 4
29681: PPUSH
29682: CALL_OW 297
29686: PUSH
29687: LD_VAR 0 14
29691: GREATER
29692: IFFALSE 29696
// exit ;
29694: GO 30237
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29696: LD_ADDR_VAR 0 12
29700: PUSH
29701: LD_VAR 0 2
29705: PPUSH
29706: LD_VAR 0 3
29710: PPUSH
29711: LD_VAR 0 4
29715: PPUSH
29716: LD_VAR 0 5
29720: PPUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 248
29730: PPUSH
29731: LD_INT 0
29733: PPUSH
29734: CALL 30242 0 6
29738: ST_TO_ADDR
// if not hexes then
29739: LD_VAR 0 12
29743: NOT
29744: IFFALSE 29748
// exit ;
29746: GO 30237
// hex := GetHexInfo ( x , y ) ;
29748: LD_ADDR_VAR 0 15
29752: PUSH
29753: LD_VAR 0 3
29757: PPUSH
29758: LD_VAR 0 4
29762: PPUSH
29763: CALL_OW 546
29767: ST_TO_ADDR
// if hex [ 1 ] then
29768: LD_VAR 0 15
29772: PUSH
29773: LD_INT 1
29775: ARRAY
29776: IFFALSE 29780
// exit ;
29778: GO 30237
// height := hex [ 2 ] ;
29780: LD_ADDR_VAR 0 13
29784: PUSH
29785: LD_VAR 0 15
29789: PUSH
29790: LD_INT 2
29792: ARRAY
29793: ST_TO_ADDR
// for i = 1 to hexes do
29794: LD_ADDR_VAR 0 7
29798: PUSH
29799: DOUBLE
29800: LD_INT 1
29802: DEC
29803: ST_TO_ADDR
29804: LD_VAR 0 12
29808: PUSH
29809: FOR_TO
29810: IFFALSE 30154
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29812: LD_VAR 0 12
29816: PUSH
29817: LD_VAR 0 7
29821: ARRAY
29822: PUSH
29823: LD_INT 1
29825: ARRAY
29826: PPUSH
29827: LD_VAR 0 12
29831: PUSH
29832: LD_VAR 0 7
29836: ARRAY
29837: PUSH
29838: LD_INT 2
29840: ARRAY
29841: PPUSH
29842: CALL_OW 488
29846: NOT
29847: IFTRUE 29889
29849: PUSH
29850: LD_VAR 0 12
29854: PUSH
29855: LD_VAR 0 7
29859: ARRAY
29860: PUSH
29861: LD_INT 1
29863: ARRAY
29864: PPUSH
29865: LD_VAR 0 12
29869: PUSH
29870: LD_VAR 0 7
29874: ARRAY
29875: PUSH
29876: LD_INT 2
29878: ARRAY
29879: PPUSH
29880: CALL_OW 428
29884: PUSH
29885: LD_INT 0
29887: GREATER
29888: OR
29889: IFTRUE 29927
29891: PUSH
29892: LD_VAR 0 12
29896: PUSH
29897: LD_VAR 0 7
29901: ARRAY
29902: PUSH
29903: LD_INT 1
29905: ARRAY
29906: PPUSH
29907: LD_VAR 0 12
29911: PUSH
29912: LD_VAR 0 7
29916: ARRAY
29917: PUSH
29918: LD_INT 2
29920: ARRAY
29921: PPUSH
29922: CALL_OW 351
29926: OR
29927: IFFALSE 29933
// exit ;
29929: POP
29930: POP
29931: GO 30237
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29933: LD_ADDR_VAR 0 8
29937: PUSH
29938: LD_VAR 0 12
29942: PUSH
29943: LD_VAR 0 7
29947: ARRAY
29948: PUSH
29949: LD_INT 1
29951: ARRAY
29952: PPUSH
29953: LD_VAR 0 12
29957: PUSH
29958: LD_VAR 0 7
29962: ARRAY
29963: PUSH
29964: LD_INT 2
29966: ARRAY
29967: PPUSH
29968: CALL_OW 546
29972: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29973: LD_VAR 0 8
29977: PUSH
29978: LD_INT 1
29980: ARRAY
29981: IFTRUE 30003
29983: PUSH
29984: LD_VAR 0 8
29988: PUSH
29989: LD_INT 2
29991: ARRAY
29992: PUSH
29993: LD_VAR 0 13
29997: PUSH
29998: LD_INT 2
30000: PLUS
30001: GREATER
30002: OR
30003: IFTRUE 30025
30005: PUSH
30006: LD_VAR 0 8
30010: PUSH
30011: LD_INT 2
30013: ARRAY
30014: PUSH
30015: LD_VAR 0 13
30019: PUSH
30020: LD_INT 2
30022: MINUS
30023: LESS
30024: OR
30025: IFTRUE 30093
30027: PUSH
30028: LD_VAR 0 8
30032: PUSH
30033: LD_INT 3
30035: ARRAY
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 8
30042: PUSH
30043: LD_INT 9
30045: PUSH
30046: LD_INT 10
30048: PUSH
30049: LD_INT 11
30051: PUSH
30052: LD_INT 12
30054: PUSH
30055: LD_INT 13
30057: PUSH
30058: LD_INT 16
30060: PUSH
30061: LD_INT 17
30063: PUSH
30064: LD_INT 18
30066: PUSH
30067: LD_INT 19
30069: PUSH
30070: LD_INT 20
30072: PUSH
30073: LD_INT 21
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: IN
30091: NOT
30092: OR
30093: IFTRUE 30106
30095: PUSH
30096: LD_VAR 0 8
30100: PUSH
30101: LD_INT 5
30103: ARRAY
30104: NOT
30105: OR
30106: IFTRUE 30146
30108: PUSH
30109: LD_VAR 0 8
30113: PUSH
30114: LD_INT 6
30116: ARRAY
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: LD_INT 7
30126: PUSH
30127: LD_INT 9
30129: PUSH
30130: LD_INT 10
30132: PUSH
30133: LD_INT 11
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: IN
30144: NOT
30145: OR
30146: IFFALSE 30152
// exit ;
30148: POP
30149: POP
30150: GO 30237
// end ;
30152: GO 29809
30154: POP
30155: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30156: LD_VAR 0 9
30160: PPUSH
30161: LD_VAR 0 3
30165: PPUSH
30166: LD_VAR 0 4
30170: PPUSH
30171: LD_INT 20
30173: PPUSH
30174: CALL 22056 0 4
30178: PUSH
30179: LD_INT 4
30181: ARRAY
30182: IFFALSE 30186
// exit ;
30184: GO 30237
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30186: LD_VAR 0 2
30190: PUSH
30191: LD_INT 29
30193: PUSH
30194: LD_INT 30
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: IN
30201: IFFALSE 30225
30203: PUSH
30204: LD_VAR 0 3
30208: PPUSH
30209: LD_VAR 0 4
30213: PPUSH
30214: LD_VAR 0 9
30218: PPUSH
30219: CALL_OW 440
30223: NOT
30224: AND
30225: IFFALSE 30229
// exit ;
30227: GO 30237
// result := true ;
30229: LD_ADDR_VAR 0 6
30233: PUSH
30234: LD_INT 1
30236: ST_TO_ADDR
// end ;
30237: LD_VAR 0 6
30241: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30242: LD_INT 0
30244: PPUSH
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
// result = [ ] ;
30302: LD_ADDR_VAR 0 7
30306: PUSH
30307: EMPTY
30308: ST_TO_ADDR
// temp_list = [ ] ;
30309: LD_ADDR_VAR 0 9
30313: PUSH
30314: EMPTY
30315: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30316: LD_VAR 0 4
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 2
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: LD_INT 4
30335: PUSH
30336: LD_INT 5
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: IN
30347: NOT
30348: IFTRUE 30391
30350: PUSH
30351: LD_VAR 0 1
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: IN
30366: IFFALSE 30390
30368: PUSH
30369: LD_VAR 0 5
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: IN
30388: NOT
30389: AND
30390: OR
30391: IFFALSE 30395
// exit ;
30393: GO 48794
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30395: LD_VAR 0 1
30399: PUSH
30400: LD_INT 6
30402: PUSH
30403: LD_INT 7
30405: PUSH
30406: LD_INT 8
30408: PUSH
30409: LD_INT 13
30411: PUSH
30412: LD_INT 12
30414: PUSH
30415: LD_INT 15
30417: PUSH
30418: LD_INT 11
30420: PUSH
30421: LD_INT 14
30423: PUSH
30424: LD_INT 10
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: IN
30438: IFFALSE 30448
// btype = b_lab ;
30440: LD_ADDR_VAR 0 1
30444: PUSH
30445: LD_INT 6
30447: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30448: LD_VAR 0 6
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: IN
30467: NOT
30468: IFTRUE 30536
30470: PUSH
30471: LD_VAR 0 1
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: LD_INT 6
30490: PUSH
30491: LD_INT 36
30493: PUSH
30494: LD_INT 4
30496: PUSH
30497: LD_INT 5
30499: PUSH
30500: LD_INT 31
30502: PUSH
30503: LD_INT 32
30505: PUSH
30506: LD_INT 33
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: IN
30522: NOT
30523: IFFALSE 30535
30525: PUSH
30526: LD_VAR 0 6
30530: PUSH
30531: LD_INT 1
30533: EQUAL
30534: AND
30535: OR
30536: IFTRUE 30568
30538: PUSH
30539: LD_VAR 0 1
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 3
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: IN
30554: NOT
30555: IFFALSE 30567
30557: PUSH
30558: LD_VAR 0 6
30562: PUSH
30563: LD_INT 2
30565: EQUAL
30566: AND
30567: OR
30568: IFFALSE 30578
// mode = 0 ;
30570: LD_ADDR_VAR 0 6
30574: PUSH
30575: LD_INT 0
30577: ST_TO_ADDR
// case mode of 0 :
30578: LD_VAR 0 6
30582: PUSH
30583: LD_INT 0
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 42044
30591: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30592: LD_ADDR_VAR 0 11
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 2
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30785: LD_ADDR_VAR 0 12
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 2
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 2
30908: NEG
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 2
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 3
30942: NEG
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30981: LD_ADDR_VAR 0 13
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: LD_INT 2
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: NEG
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: LD_INT 3
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 3
31140: NEG
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: LD_INT 3
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31180: LD_ADDR_VAR 0 14
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 2
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: LD_INT 3
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31376: LD_ADDR_VAR 0 15
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: LD_INT 0
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 3
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31569: LD_ADDR_VAR 0 16
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 0
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 2
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: LD_INT 3
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: LD_INT 3
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31762: LD_ADDR_VAR 0 17
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 2
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31992: LD_ADDR_VAR 0 18
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32222: LD_ADDR_VAR 0 19
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 2
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: NEG
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32452: LD_ADDR_VAR 0 20
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 2
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: NEG
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32682: LD_ADDR_VAR 0 21
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32912: LD_ADDR_VAR 0 22
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: LD_INT 2
32997: NEG
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 2
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 2
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33142: LD_ADDR_VAR 0 23
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 2
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: LD_INT 2
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 2
33341: NEG
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: LD_INT 3
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33422: LD_ADDR_VAR 0 24
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: NEG
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 2
33598: NEG
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 2
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 3
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33698: LD_ADDR_VAR 0 25
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 2
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33972: LD_ADDR_VAR 0 26
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 2
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: LD_INT 2
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: NEG
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: NEG
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34248: LD_ADDR_VAR 0 27
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: NEG
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 3
34481: NEG
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34528: LD_ADDR_VAR 0 28
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 2
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: LD_INT 3
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: NEG
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 3
34775: NEG
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34810: LD_ADDR_VAR 0 29
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: NEG
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: NEG
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 2
35000: NEG
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 3
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35089: LD_ADDR_VAR 0 30
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 3
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 3
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 3
35332: NEG
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35367: LD_ADDR_VAR 0 31
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 0
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 2
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 2
35556: NEG
35557: PUSH
35558: LD_INT 3
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 3
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 3
35610: NEG
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35645: LD_ADDR_VAR 0 32
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: LD_INT 2
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: LD_INT 2
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: LD_INT 2
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: NEG
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 3
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 3
35857: PUSH
35858: LD_INT 2
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 3
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 3
35888: NEG
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35923: LD_ADDR_VAR 0 33
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: NEG
36114: PUSH
36115: LD_INT 3
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 3
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 3
36167: NEG
36168: PUSH
36169: LD_INT 2
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36202: LD_ADDR_VAR 0 34
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 2
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: LD_INT 3
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 3
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: LD_INT 3
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 3
36447: NEG
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36482: LD_ADDR_VAR 0 35
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36594: LD_ADDR_VAR 0 36
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36706: LD_ADDR_VAR 0 37
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36818: LD_ADDR_VAR 0 38
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36930: LD_ADDR_VAR 0 39
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: LD_INT 2
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37042: LD_ADDR_VAR 0 40
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37154: LD_ADDR_VAR 0 41
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 2
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: LD_INT 2
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 3
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 3
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 3
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 3
37397: PUSH
37398: LD_INT 3
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 3
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 3
37428: NEG
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: NEG
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: NEG
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 3
37463: NEG
37464: PUSH
37465: LD_INT 3
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37504: LD_ADDR_VAR 0 42
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: NEG
37695: PUSH
37696: LD_INT 3
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: LD_INT 3
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 3
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 3
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: LD_INT 3
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: LD_INT 3
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 3
37801: NEG
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 3
37813: NEG
37814: PUSH
37815: LD_INT 3
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37854: LD_ADDR_VAR 0 43
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 2
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 3
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 3
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: LD_INT 3
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 3
38150: NEG
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: NEG
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38202: LD_ADDR_VAR 0 44
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: LD_INT 3
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: PUSH
38446: LD_INT 3
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 3
38487: NEG
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 3
38499: NEG
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: LD_INT 3
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38552: LD_ADDR_VAR 0 45
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 2
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: LD_INT 2
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 3
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: LD_INT 3
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 3
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 3
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 3
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 3
38849: NEG
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: LD_INT 3
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38902: LD_ADDR_VAR 0 46
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 2
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 3
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: NEG
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 3
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39250: LD_ADDR_VAR 0 47
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39401: LD_ADDR_VAR 0 48
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39548: LD_ADDR_VAR 0 49
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39692: LD_ADDR_VAR 0 50
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39836: LD_ADDR_VAR 0 51
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39983: LD_ADDR_VAR 0 52
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 2
40087: NEG
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 2
40110: NEG
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40134: LD_ADDR_VAR 0 53
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40364: LD_ADDR_VAR 0 54
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40594: LD_ADDR_VAR 0 55
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40824: LD_ADDR_VAR 0 56
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41054: LD_ADDR_VAR 0 57
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 2
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41284: LD_ADDR_VAR 0 58
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41514: LD_ADDR_VAR 0 59
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41602: LD_ADDR_VAR 0 60
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41690: LD_ADDR_VAR 0 61
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41778: LD_ADDR_VAR 0 62
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41866: LD_ADDR_VAR 0 63
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41954: LD_ADDR_VAR 0 64
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: ST_TO_ADDR
// end ; 1 :
42042: GO 47939
42044: LD_INT 1
42046: DOUBLE
42047: EQUAL
42048: IFTRUE 42052
42050: GO 44675
42052: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42053: LD_ADDR_VAR 0 11
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 3
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42097: LD_ADDR_VAR 0 12
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42138: LD_ADDR_VAR 0 13
42142: PUSH
42143: LD_INT 3
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 3
42155: PUSH
42156: LD_INT 3
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42178: LD_ADDR_VAR 0 14
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: LD_INT 3
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42219: LD_ADDR_VAR 0 15
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 3
42237: NEG
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 3
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42263: LD_ADDR_VAR 0 16
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: NEG
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 3
42294: NEG
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42309: LD_ADDR_VAR 0 17
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42353: LD_ADDR_VAR 0 18
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 3
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42394: LD_ADDR_VAR 0 19
42398: PUSH
42399: LD_INT 3
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 3
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42434: LD_ADDR_VAR 0 20
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42475: LD_ADDR_VAR 0 21
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 3
42493: NEG
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42519: LD_ADDR_VAR 0 22
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 3
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: NEG
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: LD_INT 3
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42565: LD_ADDR_VAR 0 23
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 3
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 4
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 3
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42609: LD_ADDR_VAR 0 24
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 4
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42650: LD_ADDR_VAR 0 25
42654: PUSH
42655: LD_INT 3
42657: PUSH
42658: LD_INT 3
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: LD_INT 3
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42690: LD_ADDR_VAR 0 26
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 4
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42731: LD_ADDR_VAR 0 27
42735: PUSH
42736: LD_INT 3
42738: NEG
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 4
42760: NEG
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42775: LD_ADDR_VAR 0 28
42779: PUSH
42780: LD_INT 3
42782: NEG
42783: PUSH
42784: LD_INT 3
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: LD_INT 4
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 4
42806: NEG
42807: PUSH
42808: LD_INT 3
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42821: LD_ADDR_VAR 0 29
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 3
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 4
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 4
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 5
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 5
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 4
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 6
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 6
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 5
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42976: LD_ADDR_VAR 0 30
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 4
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 4
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 4
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 5
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 5
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 5
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 6
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 6
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43119: LD_ADDR_VAR 0 31
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 3
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 4
43156: PUSH
43157: LD_INT 3
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: LD_INT 4
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: LD_INT 4
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 5
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 5
43196: PUSH
43197: LD_INT 5
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 4
43206: PUSH
43207: LD_INT 5
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 6
43216: PUSH
43217: LD_INT 5
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 6
43226: PUSH
43227: LD_INT 6
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 5
43236: PUSH
43237: LD_INT 6
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43258: LD_ADDR_VAR 0 32
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 4
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 4
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 3
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 5
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 5
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: LD_INT 4
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 6
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 6
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 5
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43401: LD_ADDR_VAR 0 33
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 3
43430: NEG
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 3
43442: NEG
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 4
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 4
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 4
43476: NEG
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 5
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 5
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 5
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 6
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 6
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43556: LD_ADDR_VAR 0 34
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 3
43575: NEG
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 3
43587: NEG
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 3
43599: NEG
43600: PUSH
43601: LD_INT 4
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 4
43611: NEG
43612: PUSH
43613: LD_INT 3
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 4
43623: NEG
43624: PUSH
43625: LD_INT 4
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 4
43635: NEG
43636: PUSH
43637: LD_INT 5
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 5
43647: NEG
43648: PUSH
43649: LD_INT 4
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 5
43659: NEG
43660: PUSH
43661: LD_INT 5
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 5
43671: NEG
43672: PUSH
43673: LD_INT 6
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 6
43683: NEG
43684: PUSH
43685: LD_INT 5
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 6
43695: NEG
43696: PUSH
43697: LD_INT 6
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43719: LD_ADDR_VAR 0 41
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: LD_INT 3
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43763: LD_ADDR_VAR 0 42
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43804: LD_ADDR_VAR 0 43
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43844: LD_ADDR_VAR 0 44
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43885: LD_ADDR_VAR 0 45
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 3
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43929: LD_ADDR_VAR 0 46
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: LD_INT 3
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 3
43960: NEG
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43975: LD_ADDR_VAR 0 47
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 3
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44008: LD_ADDR_VAR 0 48
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44039: LD_ADDR_VAR 0 49
44043: PUSH
44044: LD_INT 3
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44068: LD_ADDR_VAR 0 50
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44097: LD_ADDR_VAR 0 51
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44128: LD_ADDR_VAR 0 52
44132: PUSH
44133: LD_INT 3
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 3
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44161: LD_ADDR_VAR 0 53
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 3
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 3
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44205: LD_ADDR_VAR 0 54
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44246: LD_ADDR_VAR 0 55
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44286: LD_ADDR_VAR 0 56
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 3
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 3
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44327: LD_ADDR_VAR 0 57
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44371: LD_ADDR_VAR 0 58
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 3
44390: NEG
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: NEG
44403: PUSH
44404: LD_INT 3
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44417: LD_ADDR_VAR 0 59
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44461: LD_ADDR_VAR 0 60
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44502: LD_ADDR_VAR 0 61
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44542: LD_ADDR_VAR 0 62
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44583: LD_ADDR_VAR 0 63
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44627: LD_ADDR_VAR 0 64
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: LIST
44672: ST_TO_ADDR
// end ; 2 :
44673: GO 47939
44675: LD_INT 2
44677: DOUBLE
44678: EQUAL
44679: IFTRUE 44683
44681: GO 47938
44683: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44684: LD_ADDR_VAR 0 29
44688: PUSH
44689: LD_INT 4
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 4
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 5
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 5
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 4
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 3
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 5
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 3
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 4
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 4
44814: PUSH
44815: LD_INT 4
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 3
44824: PUSH
44825: LD_INT 4
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 4
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 4
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 4
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 4
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 5
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 4
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: LD_INT 5
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 3
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 3
44967: NEG
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 3
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 3
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 4
45023: NEG
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 4
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 4
45046: NEG
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 4
45069: NEG
45070: PUSH
45071: LD_INT 4
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 4
45081: NEG
45082: PUSH
45083: LD_INT 5
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 3
45093: NEG
45094: PUSH
45095: LD_INT 4
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 3
45105: NEG
45106: PUSH
45107: LD_INT 3
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 4
45117: NEG
45118: PUSH
45119: LD_INT 3
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 5
45129: NEG
45130: PUSH
45131: LD_INT 4
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 5
45141: NEG
45142: PUSH
45143: LD_INT 5
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: LD_INT 5
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 5
45165: NEG
45166: PUSH
45167: LD_INT 3
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45222: LD_ADDR_VAR 0 30
45226: PUSH
45227: LD_INT 4
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 4
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 5
45249: PUSH
45250: LD_INT 4
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 5
45259: PUSH
45260: LD_INT 5
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 4
45269: PUSH
45270: LD_INT 5
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: LD_INT 4
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 5
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 5
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 4
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 4
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 4
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 4
45412: NEG
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 4
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 4
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 5
45468: NEG
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 5
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 5
45491: NEG
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 3
45514: NEG
45515: PUSH
45516: LD_INT 3
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 3
45526: NEG
45527: PUSH
45528: LD_INT 4
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 3
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 4
45574: NEG
45575: PUSH
45576: LD_INT 3
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 4
45586: NEG
45587: PUSH
45588: LD_INT 4
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 4
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 4
45610: NEG
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 4
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 5
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 4
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 3
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 4
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 5
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: LD_INT 3
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 5
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45769: LD_ADDR_VAR 0 31
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 4
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 4
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 5
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 5
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 4
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 5
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 3
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 4
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 4
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 4
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 4
45971: NEG
45972: PUSH
45973: LD_INT 4
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 4
45983: NEG
45984: PUSH
45985: LD_INT 5
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: LD_INT 4
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: NEG
46008: PUSH
46009: LD_INT 3
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 4
46019: NEG
46020: PUSH
46021: LD_INT 3
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 5
46031: NEG
46032: PUSH
46033: LD_INT 4
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 5
46043: NEG
46044: PUSH
46045: LD_INT 5
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 3
46055: NEG
46056: PUSH
46057: LD_INT 5
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 5
46067: NEG
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 4
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 4
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 4
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 4
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 4
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 5
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 5
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 4
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 3
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 5
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46319: LD_ADDR_VAR 0 32
46323: PUSH
46324: LD_INT 4
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 4
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 4
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 5
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 5
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 5
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: NEG
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: LD_INT 4
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 4
46488: NEG
46489: PUSH
46490: LD_INT 3
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 4
46500: NEG
46501: PUSH
46502: LD_INT 4
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 4
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 4
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 4
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 5
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 4
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 3
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 4
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 5
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 3
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 5
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 3
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 4
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 4
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 4
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: PUSH
46732: LD_INT 4
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 4
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 5
46751: PUSH
46752: LD_INT 4
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 5
46761: PUSH
46762: LD_INT 5
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 4
46771: PUSH
46772: LD_INT 5
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 4
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: LD_INT 3
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 5
46801: PUSH
46802: LD_INT 3
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 5
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46866: LD_ADDR_VAR 0 33
46870: PUSH
46871: LD_INT 4
46873: NEG
46874: PUSH
46875: LD_INT 4
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 4
46885: NEG
46886: PUSH
46887: LD_INT 5
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: NEG
46898: PUSH
46899: LD_INT 4
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 3
46909: NEG
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 5
46933: NEG
46934: PUSH
46935: LD_INT 4
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 5
46945: NEG
46946: PUSH
46947: LD_INT 5
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: LD_INT 5
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 5
46969: NEG
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 3
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 4
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 4
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 4
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 4
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 4
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 5
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 5
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 4
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 2
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 5
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 4
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 4
47206: PUSH
47207: LD_INT 4
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: LD_INT 4
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 4
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 4
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 4
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 3
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 4
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 5
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 5
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 4
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: LD_INT 5
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47404: LD_ADDR_VAR 0 34
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 4
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 5
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 4
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 4
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 5
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 3
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 5
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 4
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 4
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 4
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 4
47606: PUSH
47607: LD_INT 4
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 4
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 5
47626: PUSH
47627: LD_INT 4
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 5
47636: PUSH
47637: LD_INT 5
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: LD_INT 5
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: LD_INT 4
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 5
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: LD_INT 5
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 4
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 4
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 4
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 4
47789: NEG
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 4
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 3
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 4
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 5
47845: NEG
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 5
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 5
47868: NEG
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 3
47880: NEG
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// end ; end ;
47936: GO 47939
47938: POP
// case btype of b_depot , b_warehouse :
47939: LD_VAR 0 1
47943: PUSH
47944: LD_INT 0
47946: DOUBLE
47947: EQUAL
47948: IFTRUE 47958
47950: LD_INT 1
47952: DOUBLE
47953: EQUAL
47954: IFTRUE 47958
47956: GO 48159
47958: POP
// case nation of nation_american :
47959: LD_VAR 0 5
47963: PUSH
47964: LD_INT 1
47966: DOUBLE
47967: EQUAL
47968: IFTRUE 47972
47970: GO 48028
47972: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47973: LD_ADDR_VAR 0 9
47977: PUSH
47978: LD_VAR 0 11
47982: PUSH
47983: LD_VAR 0 12
47987: PUSH
47988: LD_VAR 0 13
47992: PUSH
47993: LD_VAR 0 14
47997: PUSH
47998: LD_VAR 0 15
48002: PUSH
48003: LD_VAR 0 16
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: PUSH
48016: LD_VAR 0 4
48020: PUSH
48021: LD_INT 1
48023: PLUS
48024: ARRAY
48025: ST_TO_ADDR
48026: GO 48157
48028: LD_INT 2
48030: DOUBLE
48031: EQUAL
48032: IFTRUE 48036
48034: GO 48092
48036: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48037: LD_ADDR_VAR 0 9
48041: PUSH
48042: LD_VAR 0 17
48046: PUSH
48047: LD_VAR 0 18
48051: PUSH
48052: LD_VAR 0 19
48056: PUSH
48057: LD_VAR 0 20
48061: PUSH
48062: LD_VAR 0 21
48066: PUSH
48067: LD_VAR 0 22
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: PUSH
48080: LD_VAR 0 4
48084: PUSH
48085: LD_INT 1
48087: PLUS
48088: ARRAY
48089: ST_TO_ADDR
48090: GO 48157
48092: LD_INT 3
48094: DOUBLE
48095: EQUAL
48096: IFTRUE 48100
48098: GO 48156
48100: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48101: LD_ADDR_VAR 0 9
48105: PUSH
48106: LD_VAR 0 23
48110: PUSH
48111: LD_VAR 0 24
48115: PUSH
48116: LD_VAR 0 25
48120: PUSH
48121: LD_VAR 0 26
48125: PUSH
48126: LD_VAR 0 27
48130: PUSH
48131: LD_VAR 0 28
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: PUSH
48144: LD_VAR 0 4
48148: PUSH
48149: LD_INT 1
48151: PLUS
48152: ARRAY
48153: ST_TO_ADDR
48154: GO 48157
48156: POP
48157: GO 48712
48159: LD_INT 2
48161: DOUBLE
48162: EQUAL
48163: IFTRUE 48173
48165: LD_INT 3
48167: DOUBLE
48168: EQUAL
48169: IFTRUE 48173
48171: GO 48229
48173: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48174: LD_ADDR_VAR 0 9
48178: PUSH
48179: LD_VAR 0 29
48183: PUSH
48184: LD_VAR 0 30
48188: PUSH
48189: LD_VAR 0 31
48193: PUSH
48194: LD_VAR 0 32
48198: PUSH
48199: LD_VAR 0 33
48203: PUSH
48204: LD_VAR 0 34
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: PUSH
48217: LD_VAR 0 4
48221: PUSH
48222: LD_INT 1
48224: PLUS
48225: ARRAY
48226: ST_TO_ADDR
48227: GO 48712
48229: LD_INT 16
48231: DOUBLE
48232: EQUAL
48233: IFTRUE 48291
48235: LD_INT 17
48237: DOUBLE
48238: EQUAL
48239: IFTRUE 48291
48241: LD_INT 18
48243: DOUBLE
48244: EQUAL
48245: IFTRUE 48291
48247: LD_INT 19
48249: DOUBLE
48250: EQUAL
48251: IFTRUE 48291
48253: LD_INT 22
48255: DOUBLE
48256: EQUAL
48257: IFTRUE 48291
48259: LD_INT 20
48261: DOUBLE
48262: EQUAL
48263: IFTRUE 48291
48265: LD_INT 21
48267: DOUBLE
48268: EQUAL
48269: IFTRUE 48291
48271: LD_INT 23
48273: DOUBLE
48274: EQUAL
48275: IFTRUE 48291
48277: LD_INT 24
48279: DOUBLE
48280: EQUAL
48281: IFTRUE 48291
48283: LD_INT 25
48285: DOUBLE
48286: EQUAL
48287: IFTRUE 48291
48289: GO 48347
48291: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48292: LD_ADDR_VAR 0 9
48296: PUSH
48297: LD_VAR 0 35
48301: PUSH
48302: LD_VAR 0 36
48306: PUSH
48307: LD_VAR 0 37
48311: PUSH
48312: LD_VAR 0 38
48316: PUSH
48317: LD_VAR 0 39
48321: PUSH
48322: LD_VAR 0 40
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: PUSH
48335: LD_VAR 0 4
48339: PUSH
48340: LD_INT 1
48342: PLUS
48343: ARRAY
48344: ST_TO_ADDR
48345: GO 48712
48347: LD_INT 6
48349: DOUBLE
48350: EQUAL
48351: IFTRUE 48403
48353: LD_INT 7
48355: DOUBLE
48356: EQUAL
48357: IFTRUE 48403
48359: LD_INT 8
48361: DOUBLE
48362: EQUAL
48363: IFTRUE 48403
48365: LD_INT 13
48367: DOUBLE
48368: EQUAL
48369: IFTRUE 48403
48371: LD_INT 12
48373: DOUBLE
48374: EQUAL
48375: IFTRUE 48403
48377: LD_INT 15
48379: DOUBLE
48380: EQUAL
48381: IFTRUE 48403
48383: LD_INT 11
48385: DOUBLE
48386: EQUAL
48387: IFTRUE 48403
48389: LD_INT 14
48391: DOUBLE
48392: EQUAL
48393: IFTRUE 48403
48395: LD_INT 10
48397: DOUBLE
48398: EQUAL
48399: IFTRUE 48403
48401: GO 48459
48403: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48404: LD_ADDR_VAR 0 9
48408: PUSH
48409: LD_VAR 0 41
48413: PUSH
48414: LD_VAR 0 42
48418: PUSH
48419: LD_VAR 0 43
48423: PUSH
48424: LD_VAR 0 44
48428: PUSH
48429: LD_VAR 0 45
48433: PUSH
48434: LD_VAR 0 46
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: PUSH
48447: LD_VAR 0 4
48451: PUSH
48452: LD_INT 1
48454: PLUS
48455: ARRAY
48456: ST_TO_ADDR
48457: GO 48712
48459: LD_INT 36
48461: DOUBLE
48462: EQUAL
48463: IFTRUE 48467
48465: GO 48523
48467: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48468: LD_ADDR_VAR 0 9
48472: PUSH
48473: LD_VAR 0 47
48477: PUSH
48478: LD_VAR 0 48
48482: PUSH
48483: LD_VAR 0 49
48487: PUSH
48488: LD_VAR 0 50
48492: PUSH
48493: LD_VAR 0 51
48497: PUSH
48498: LD_VAR 0 52
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: PUSH
48511: LD_VAR 0 4
48515: PUSH
48516: LD_INT 1
48518: PLUS
48519: ARRAY
48520: ST_TO_ADDR
48521: GO 48712
48523: LD_INT 4
48525: DOUBLE
48526: EQUAL
48527: IFTRUE 48549
48529: LD_INT 5
48531: DOUBLE
48532: EQUAL
48533: IFTRUE 48549
48535: LD_INT 34
48537: DOUBLE
48538: EQUAL
48539: IFTRUE 48549
48541: LD_INT 37
48543: DOUBLE
48544: EQUAL
48545: IFTRUE 48549
48547: GO 48605
48549: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48550: LD_ADDR_VAR 0 9
48554: PUSH
48555: LD_VAR 0 53
48559: PUSH
48560: LD_VAR 0 54
48564: PUSH
48565: LD_VAR 0 55
48569: PUSH
48570: LD_VAR 0 56
48574: PUSH
48575: LD_VAR 0 57
48579: PUSH
48580: LD_VAR 0 58
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: PUSH
48593: LD_VAR 0 4
48597: PUSH
48598: LD_INT 1
48600: PLUS
48601: ARRAY
48602: ST_TO_ADDR
48603: GO 48712
48605: LD_INT 31
48607: DOUBLE
48608: EQUAL
48609: IFTRUE 48655
48611: LD_INT 32
48613: DOUBLE
48614: EQUAL
48615: IFTRUE 48655
48617: LD_INT 33
48619: DOUBLE
48620: EQUAL
48621: IFTRUE 48655
48623: LD_INT 27
48625: DOUBLE
48626: EQUAL
48627: IFTRUE 48655
48629: LD_INT 26
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48655
48635: LD_INT 28
48637: DOUBLE
48638: EQUAL
48639: IFTRUE 48655
48641: LD_INT 29
48643: DOUBLE
48644: EQUAL
48645: IFTRUE 48655
48647: LD_INT 30
48649: DOUBLE
48650: EQUAL
48651: IFTRUE 48655
48653: GO 48711
48655: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48656: LD_ADDR_VAR 0 9
48660: PUSH
48661: LD_VAR 0 59
48665: PUSH
48666: LD_VAR 0 60
48670: PUSH
48671: LD_VAR 0 61
48675: PUSH
48676: LD_VAR 0 62
48680: PUSH
48681: LD_VAR 0 63
48685: PUSH
48686: LD_VAR 0 64
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: PUSH
48699: LD_VAR 0 4
48703: PUSH
48704: LD_INT 1
48706: PLUS
48707: ARRAY
48708: ST_TO_ADDR
48709: GO 48712
48711: POP
// temp_list2 = [ ] ;
48712: LD_ADDR_VAR 0 10
48716: PUSH
48717: EMPTY
48718: ST_TO_ADDR
// for i in temp_list do
48719: LD_ADDR_VAR 0 8
48723: PUSH
48724: LD_VAR 0 9
48728: PUSH
48729: FOR_IN
48730: IFFALSE 48782
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48732: LD_ADDR_VAR 0 10
48736: PUSH
48737: LD_VAR 0 10
48741: PUSH
48742: LD_VAR 0 8
48746: PUSH
48747: LD_INT 1
48749: ARRAY
48750: PUSH
48751: LD_VAR 0 2
48755: PLUS
48756: PUSH
48757: LD_VAR 0 8
48761: PUSH
48762: LD_INT 2
48764: ARRAY
48765: PUSH
48766: LD_VAR 0 3
48770: PLUS
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: ADD
48779: ST_TO_ADDR
48780: GO 48729
48782: POP
48783: POP
// result = temp_list2 ;
48784: LD_ADDR_VAR 0 7
48788: PUSH
48789: LD_VAR 0 10
48793: ST_TO_ADDR
// end ;
48794: LD_VAR 0 7
48798: RET
// export function EnemyInRange ( unit , dist ) ; begin
48799: LD_INT 0
48801: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48802: LD_ADDR_VAR 0 3
48806: PUSH
48807: LD_VAR 0 1
48811: PPUSH
48812: CALL_OW 255
48816: PPUSH
48817: LD_VAR 0 1
48821: PPUSH
48822: CALL_OW 250
48826: PPUSH
48827: LD_VAR 0 1
48831: PPUSH
48832: CALL_OW 251
48836: PPUSH
48837: LD_VAR 0 2
48841: PPUSH
48842: CALL 22056 0 4
48846: PUSH
48847: LD_INT 4
48849: ARRAY
48850: ST_TO_ADDR
// end ;
48851: LD_VAR 0 3
48855: RET
// export function PlayerSeeMe ( unit ) ; begin
48856: LD_INT 0
48858: PPUSH
// result := See ( your_side , unit ) ;
48859: LD_ADDR_VAR 0 2
48863: PUSH
48864: LD_OWVAR 2
48868: PPUSH
48869: LD_VAR 0 1
48873: PPUSH
48874: CALL_OW 292
48878: ST_TO_ADDR
// end ;
48879: LD_VAR 0 2
48883: RET
// export function ReverseDir ( unit ) ; begin
48884: LD_INT 0
48886: PPUSH
// if not unit then
48887: LD_VAR 0 1
48891: NOT
48892: IFFALSE 48896
// exit ;
48894: GO 48919
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48896: LD_ADDR_VAR 0 2
48900: PUSH
48901: LD_VAR 0 1
48905: PPUSH
48906: CALL_OW 254
48910: PUSH
48911: LD_INT 3
48913: PLUS
48914: PUSH
48915: LD_INT 6
48917: MOD
48918: ST_TO_ADDR
// end ;
48919: LD_VAR 0 2
48923: RET
// export function ReverseArray ( array ) ; var i ; begin
48924: LD_INT 0
48926: PPUSH
48927: PPUSH
// if not array then
48928: LD_VAR 0 1
48932: NOT
48933: IFFALSE 48937
// exit ;
48935: GO 48992
// result := [ ] ;
48937: LD_ADDR_VAR 0 2
48941: PUSH
48942: EMPTY
48943: ST_TO_ADDR
// for i := array downto 1 do
48944: LD_ADDR_VAR 0 3
48948: PUSH
48949: DOUBLE
48950: LD_VAR 0 1
48954: INC
48955: ST_TO_ADDR
48956: LD_INT 1
48958: PUSH
48959: FOR_DOWNTO
48960: IFFALSE 48990
// result := Join ( result , array [ i ] ) ;
48962: LD_ADDR_VAR 0 2
48966: PUSH
48967: LD_VAR 0 2
48971: PPUSH
48972: LD_VAR 0 1
48976: PUSH
48977: LD_VAR 0 3
48981: ARRAY
48982: PPUSH
48983: CALL 53834 0 2
48987: ST_TO_ADDR
48988: GO 48959
48990: POP
48991: POP
// end ;
48992: LD_VAR 0 2
48996: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48997: LD_INT 0
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
49003: PPUSH
49004: PPUSH
// if not unit or not hexes then
49005: LD_VAR 0 1
49009: NOT
49010: IFTRUE 49019
49012: PUSH
49013: LD_VAR 0 2
49017: NOT
49018: OR
49019: IFFALSE 49023
// exit ;
49021: GO 49146
// dist := 9999 ;
49023: LD_ADDR_VAR 0 5
49027: PUSH
49028: LD_INT 9999
49030: ST_TO_ADDR
// for i = 1 to hexes do
49031: LD_ADDR_VAR 0 4
49035: PUSH
49036: DOUBLE
49037: LD_INT 1
49039: DEC
49040: ST_TO_ADDR
49041: LD_VAR 0 2
49045: PUSH
49046: FOR_TO
49047: IFFALSE 49134
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49049: LD_ADDR_VAR 0 6
49053: PUSH
49054: LD_VAR 0 1
49058: PPUSH
49059: LD_VAR 0 2
49063: PUSH
49064: LD_VAR 0 4
49068: ARRAY
49069: PUSH
49070: LD_INT 1
49072: ARRAY
49073: PPUSH
49074: LD_VAR 0 2
49078: PUSH
49079: LD_VAR 0 4
49083: ARRAY
49084: PUSH
49085: LD_INT 2
49087: ARRAY
49088: PPUSH
49089: CALL_OW 297
49093: ST_TO_ADDR
// if tdist < dist then
49094: LD_VAR 0 6
49098: PUSH
49099: LD_VAR 0 5
49103: LESS
49104: IFFALSE 49132
// begin hex := hexes [ i ] ;
49106: LD_ADDR_VAR 0 8
49110: PUSH
49111: LD_VAR 0 2
49115: PUSH
49116: LD_VAR 0 4
49120: ARRAY
49121: ST_TO_ADDR
// dist := tdist ;
49122: LD_ADDR_VAR 0 5
49126: PUSH
49127: LD_VAR 0 6
49131: ST_TO_ADDR
// end ; end ;
49132: GO 49046
49134: POP
49135: POP
// result := hex ;
49136: LD_ADDR_VAR 0 3
49140: PUSH
49141: LD_VAR 0 8
49145: ST_TO_ADDR
// end ;
49146: LD_VAR 0 3
49150: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49151: LD_INT 0
49153: PPUSH
49154: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49155: LD_VAR 0 1
49159: NOT
49160: IFTRUE 49199
49162: PUSH
49163: LD_VAR 0 1
49167: PUSH
49168: LD_INT 21
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 23
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PPUSH
49192: CALL_OW 69
49196: IN
49197: NOT
49198: OR
49199: IFFALSE 49203
// exit ;
49201: GO 49250
// for i = 1 to 3 do
49203: LD_ADDR_VAR 0 3
49207: PUSH
49208: DOUBLE
49209: LD_INT 1
49211: DEC
49212: ST_TO_ADDR
49213: LD_INT 3
49215: PUSH
49216: FOR_TO
49217: IFFALSE 49248
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49219: LD_VAR 0 1
49223: PPUSH
49224: CALL_OW 250
49228: PPUSH
49229: LD_VAR 0 1
49233: PPUSH
49234: CALL_OW 251
49238: PPUSH
49239: LD_INT 1
49241: PPUSH
49242: CALL_OW 453
49246: GO 49216
49248: POP
49249: POP
// end ;
49250: LD_VAR 0 2
49254: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49255: LD_INT 0
49257: PPUSH
49258: PPUSH
49259: PPUSH
49260: PPUSH
49261: PPUSH
49262: PPUSH
// if not unit or not enemy_unit then
49263: LD_VAR 0 1
49267: NOT
49268: IFTRUE 49277
49270: PUSH
49271: LD_VAR 0 2
49275: NOT
49276: OR
49277: IFFALSE 49281
// exit ;
49279: GO 49752
// if GetLives ( i ) < 250 then
49281: LD_VAR 0 4
49285: PPUSH
49286: CALL_OW 256
49290: PUSH
49291: LD_INT 250
49293: LESS
49294: IFFALSE 49307
// begin ComAutodestruct ( i ) ;
49296: LD_VAR 0 4
49300: PPUSH
49301: CALL 49151 0 1
// exit ;
49305: GO 49752
// end ; x := GetX ( enemy_unit ) ;
49307: LD_ADDR_VAR 0 7
49311: PUSH
49312: LD_VAR 0 2
49316: PPUSH
49317: CALL_OW 250
49321: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49322: LD_ADDR_VAR 0 8
49326: PUSH
49327: LD_VAR 0 2
49331: PPUSH
49332: CALL_OW 251
49336: ST_TO_ADDR
// if not x or not y then
49337: LD_VAR 0 7
49341: NOT
49342: IFTRUE 49351
49344: PUSH
49345: LD_VAR 0 8
49349: NOT
49350: OR
49351: IFFALSE 49355
// exit ;
49353: GO 49752
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49355: LD_ADDR_VAR 0 6
49359: PUSH
49360: LD_VAR 0 7
49364: PPUSH
49365: LD_INT 0
49367: PPUSH
49368: LD_INT 4
49370: PPUSH
49371: CALL_OW 272
49375: PUSH
49376: LD_VAR 0 8
49380: PPUSH
49381: LD_INT 0
49383: PPUSH
49384: LD_INT 4
49386: PPUSH
49387: CALL_OW 273
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_VAR 0 7
49400: PPUSH
49401: LD_INT 1
49403: PPUSH
49404: LD_INT 4
49406: PPUSH
49407: CALL_OW 272
49411: PUSH
49412: LD_VAR 0 8
49416: PPUSH
49417: LD_INT 1
49419: PPUSH
49420: LD_INT 4
49422: PPUSH
49423: CALL_OW 273
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_VAR 0 7
49436: PPUSH
49437: LD_INT 2
49439: PPUSH
49440: LD_INT 4
49442: PPUSH
49443: CALL_OW 272
49447: PUSH
49448: LD_VAR 0 8
49452: PPUSH
49453: LD_INT 2
49455: PPUSH
49456: LD_INT 4
49458: PPUSH
49459: CALL_OW 273
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_VAR 0 7
49472: PPUSH
49473: LD_INT 3
49475: PPUSH
49476: LD_INT 4
49478: PPUSH
49479: CALL_OW 272
49483: PUSH
49484: LD_VAR 0 8
49488: PPUSH
49489: LD_INT 3
49491: PPUSH
49492: LD_INT 4
49494: PPUSH
49495: CALL_OW 273
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_VAR 0 7
49508: PPUSH
49509: LD_INT 4
49511: PPUSH
49512: LD_INT 4
49514: PPUSH
49515: CALL_OW 272
49519: PUSH
49520: LD_VAR 0 8
49524: PPUSH
49525: LD_INT 4
49527: PPUSH
49528: LD_INT 4
49530: PPUSH
49531: CALL_OW 273
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_VAR 0 7
49544: PPUSH
49545: LD_INT 5
49547: PPUSH
49548: LD_INT 4
49550: PPUSH
49551: CALL_OW 272
49555: PUSH
49556: LD_VAR 0 8
49560: PPUSH
49561: LD_INT 5
49563: PPUSH
49564: LD_INT 4
49566: PPUSH
49567: CALL_OW 273
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: ST_TO_ADDR
// for i = tmp downto 1 do
49584: LD_ADDR_VAR 0 4
49588: PUSH
49589: DOUBLE
49590: LD_VAR 0 6
49594: INC
49595: ST_TO_ADDR
49596: LD_INT 1
49598: PUSH
49599: FOR_DOWNTO
49600: IFFALSE 49703
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49602: LD_VAR 0 6
49606: PUSH
49607: LD_VAR 0 4
49611: ARRAY
49612: PUSH
49613: LD_INT 1
49615: ARRAY
49616: PPUSH
49617: LD_VAR 0 6
49621: PUSH
49622: LD_VAR 0 4
49626: ARRAY
49627: PUSH
49628: LD_INT 2
49630: ARRAY
49631: PPUSH
49632: CALL_OW 488
49636: NOT
49637: IFTRUE 49679
49639: PUSH
49640: LD_VAR 0 6
49644: PUSH
49645: LD_VAR 0 4
49649: ARRAY
49650: PUSH
49651: LD_INT 1
49653: ARRAY
49654: PPUSH
49655: LD_VAR 0 6
49659: PUSH
49660: LD_VAR 0 4
49664: ARRAY
49665: PUSH
49666: LD_INT 2
49668: ARRAY
49669: PPUSH
49670: CALL_OW 428
49674: PUSH
49675: LD_INT 0
49677: NONEQUAL
49678: OR
49679: IFFALSE 49701
// tmp := Delete ( tmp , i ) ;
49681: LD_ADDR_VAR 0 6
49685: PUSH
49686: LD_VAR 0 6
49690: PPUSH
49691: LD_VAR 0 4
49695: PPUSH
49696: CALL_OW 3
49700: ST_TO_ADDR
49701: GO 49599
49703: POP
49704: POP
// j := GetClosestHex ( unit , tmp ) ;
49705: LD_ADDR_VAR 0 5
49709: PUSH
49710: LD_VAR 0 1
49714: PPUSH
49715: LD_VAR 0 6
49719: PPUSH
49720: CALL 48997 0 2
49724: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49725: LD_VAR 0 1
49729: PPUSH
49730: LD_VAR 0 5
49734: PUSH
49735: LD_INT 1
49737: ARRAY
49738: PPUSH
49739: LD_VAR 0 5
49743: PUSH
49744: LD_INT 2
49746: ARRAY
49747: PPUSH
49748: CALL_OW 111
// end ;
49752: LD_VAR 0 3
49756: RET
// export function PrepareApemanSoldier ( ) ; begin
49757: LD_INT 0
49759: PPUSH
// uc_nation := 0 ;
49760: LD_ADDR_OWVAR 21
49764: PUSH
49765: LD_INT 0
49767: ST_TO_ADDR
// hc_sex := sex_male ;
49768: LD_ADDR_OWVAR 27
49772: PUSH
49773: LD_INT 1
49775: ST_TO_ADDR
// hc_name :=  ;
49776: LD_ADDR_OWVAR 26
49780: PUSH
49781: LD_STRING 
49783: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49784: LD_ADDR_OWVAR 28
49788: PUSH
49789: LD_INT 15
49791: ST_TO_ADDR
// hc_gallery :=  ;
49792: LD_ADDR_OWVAR 33
49796: PUSH
49797: LD_STRING 
49799: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49800: LD_ADDR_OWVAR 31
49804: PUSH
49805: LD_INT 0
49807: PPUSH
49808: LD_INT 3
49810: PPUSH
49811: CALL_OW 12
49815: PUSH
49816: LD_INT 0
49818: PPUSH
49819: LD_INT 3
49821: PPUSH
49822: CALL_OW 12
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49839: LD_ADDR_OWVAR 29
49843: PUSH
49844: LD_INT 12
49846: PUSH
49847: LD_INT 12
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: ST_TO_ADDR
// end ;
49854: LD_VAR 0 1
49858: RET
// export function PrepareApemanEngineer ( ) ; begin
49859: LD_INT 0
49861: PPUSH
// uc_nation := 0 ;
49862: LD_ADDR_OWVAR 21
49866: PUSH
49867: LD_INT 0
49869: ST_TO_ADDR
// hc_sex := sex_male ;
49870: LD_ADDR_OWVAR 27
49874: PUSH
49875: LD_INT 1
49877: ST_TO_ADDR
// hc_name :=  ;
49878: LD_ADDR_OWVAR 26
49882: PUSH
49883: LD_STRING 
49885: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49886: LD_ADDR_OWVAR 28
49890: PUSH
49891: LD_INT 16
49893: ST_TO_ADDR
// hc_gallery :=  ;
49894: LD_ADDR_OWVAR 33
49898: PUSH
49899: LD_STRING 
49901: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49902: LD_ADDR_OWVAR 31
49906: PUSH
49907: LD_INT 0
49909: PPUSH
49910: LD_INT 3
49912: PPUSH
49913: CALL_OW 12
49917: PUSH
49918: LD_INT 0
49920: PPUSH
49921: LD_INT 3
49923: PPUSH
49924: CALL_OW 12
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49941: LD_ADDR_OWVAR 29
49945: PUSH
49946: LD_INT 12
49948: PUSH
49949: LD_INT 12
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: ST_TO_ADDR
// end ;
49956: LD_VAR 0 1
49960: RET
// export function PrepareApeman ( agressivity ) ; begin
49961: LD_INT 0
49963: PPUSH
// uc_side := 0 ;
49964: LD_ADDR_OWVAR 20
49968: PUSH
49969: LD_INT 0
49971: ST_TO_ADDR
// uc_nation := 0 ;
49972: LD_ADDR_OWVAR 21
49976: PUSH
49977: LD_INT 0
49979: ST_TO_ADDR
// hc_sex := sex_male ;
49980: LD_ADDR_OWVAR 27
49984: PUSH
49985: LD_INT 1
49987: ST_TO_ADDR
// hc_class := class_apeman ;
49988: LD_ADDR_OWVAR 28
49992: PUSH
49993: LD_INT 12
49995: ST_TO_ADDR
// hc_gallery :=  ;
49996: LD_ADDR_OWVAR 33
50000: PUSH
50001: LD_STRING 
50003: ST_TO_ADDR
// hc_name :=  ;
50004: LD_ADDR_OWVAR 26
50008: PUSH
50009: LD_STRING 
50011: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50012: LD_ADDR_OWVAR 29
50016: PUSH
50017: LD_INT 12
50019: PUSH
50020: LD_INT 12
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: ST_TO_ADDR
// if agressivity = 0 then
50027: LD_VAR 0 1
50031: PUSH
50032: LD_INT 0
50034: EQUAL
50035: IFFALSE 50047
// hc_agressivity := 0 else
50037: LD_ADDR_OWVAR 35
50041: PUSH
50042: LD_INT 0
50044: ST_TO_ADDR
50045: GO 50068
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50047: LD_ADDR_OWVAR 35
50051: PUSH
50052: LD_VAR 0 1
50056: NEG
50057: PPUSH
50058: LD_VAR 0 1
50062: PPUSH
50063: CALL_OW 12
50067: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50068: LD_ADDR_OWVAR 31
50072: PUSH
50073: LD_INT 0
50075: PPUSH
50076: LD_INT 3
50078: PPUSH
50079: CALL_OW 12
50083: PUSH
50084: LD_INT 0
50086: PPUSH
50087: LD_INT 3
50089: PPUSH
50090: CALL_OW 12
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: ST_TO_ADDR
// end ;
50107: LD_VAR 0 2
50111: RET
// export function PrepareTiger ( agressivity ) ; begin
50112: LD_INT 0
50114: PPUSH
// uc_side := 0 ;
50115: LD_ADDR_OWVAR 20
50119: PUSH
50120: LD_INT 0
50122: ST_TO_ADDR
// uc_nation := 0 ;
50123: LD_ADDR_OWVAR 21
50127: PUSH
50128: LD_INT 0
50130: ST_TO_ADDR
// InitHc ;
50131: CALL_OW 19
// hc_class := class_tiger ;
50135: LD_ADDR_OWVAR 28
50139: PUSH
50140: LD_INT 14
50142: ST_TO_ADDR
// hc_gallery :=  ;
50143: LD_ADDR_OWVAR 33
50147: PUSH
50148: LD_STRING 
50150: ST_TO_ADDR
// hc_name :=  ;
50151: LD_ADDR_OWVAR 26
50155: PUSH
50156: LD_STRING 
50158: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50159: LD_ADDR_OWVAR 35
50163: PUSH
50164: LD_VAR 0 1
50168: NEG
50169: PPUSH
50170: LD_VAR 0 1
50174: PPUSH
50175: CALL_OW 12
50179: ST_TO_ADDR
// end ;
50180: LD_VAR 0 2
50184: RET
// export function PrepareEnchidna ( ) ; begin
50185: LD_INT 0
50187: PPUSH
// uc_side := 0 ;
50188: LD_ADDR_OWVAR 20
50192: PUSH
50193: LD_INT 0
50195: ST_TO_ADDR
// uc_nation := 0 ;
50196: LD_ADDR_OWVAR 21
50200: PUSH
50201: LD_INT 0
50203: ST_TO_ADDR
// InitHc ;
50204: CALL_OW 19
// hc_class := class_baggie ;
50208: LD_ADDR_OWVAR 28
50212: PUSH
50213: LD_INT 13
50215: ST_TO_ADDR
// hc_gallery :=  ;
50216: LD_ADDR_OWVAR 33
50220: PUSH
50221: LD_STRING 
50223: ST_TO_ADDR
// hc_name :=  ;
50224: LD_ADDR_OWVAR 26
50228: PUSH
50229: LD_STRING 
50231: ST_TO_ADDR
// end ;
50232: LD_VAR 0 1
50236: RET
// export function PrepareFrog ( ) ; begin
50237: LD_INT 0
50239: PPUSH
// uc_side := 0 ;
50240: LD_ADDR_OWVAR 20
50244: PUSH
50245: LD_INT 0
50247: ST_TO_ADDR
// uc_nation := 0 ;
50248: LD_ADDR_OWVAR 21
50252: PUSH
50253: LD_INT 0
50255: ST_TO_ADDR
// InitHc ;
50256: CALL_OW 19
// hc_class := class_frog ;
50260: LD_ADDR_OWVAR 28
50264: PUSH
50265: LD_INT 19
50267: ST_TO_ADDR
// hc_gallery :=  ;
50268: LD_ADDR_OWVAR 33
50272: PUSH
50273: LD_STRING 
50275: ST_TO_ADDR
// hc_name :=  ;
50276: LD_ADDR_OWVAR 26
50280: PUSH
50281: LD_STRING 
50283: ST_TO_ADDR
// end ;
50284: LD_VAR 0 1
50288: RET
// export function PrepareFish ( ) ; begin
50289: LD_INT 0
50291: PPUSH
// uc_side := 0 ;
50292: LD_ADDR_OWVAR 20
50296: PUSH
50297: LD_INT 0
50299: ST_TO_ADDR
// uc_nation := 0 ;
50300: LD_ADDR_OWVAR 21
50304: PUSH
50305: LD_INT 0
50307: ST_TO_ADDR
// InitHc ;
50308: CALL_OW 19
// hc_class := class_fish ;
50312: LD_ADDR_OWVAR 28
50316: PUSH
50317: LD_INT 20
50319: ST_TO_ADDR
// hc_gallery :=  ;
50320: LD_ADDR_OWVAR 33
50324: PUSH
50325: LD_STRING 
50327: ST_TO_ADDR
// hc_name :=  ;
50328: LD_ADDR_OWVAR 26
50332: PUSH
50333: LD_STRING 
50335: ST_TO_ADDR
// end ;
50336: LD_VAR 0 1
50340: RET
// export function PrepareBird ( ) ; begin
50341: LD_INT 0
50343: PPUSH
// uc_side := 0 ;
50344: LD_ADDR_OWVAR 20
50348: PUSH
50349: LD_INT 0
50351: ST_TO_ADDR
// uc_nation := 0 ;
50352: LD_ADDR_OWVAR 21
50356: PUSH
50357: LD_INT 0
50359: ST_TO_ADDR
// InitHc ;
50360: CALL_OW 19
// hc_class := class_phororhacos ;
50364: LD_ADDR_OWVAR 28
50368: PUSH
50369: LD_INT 18
50371: ST_TO_ADDR
// hc_gallery :=  ;
50372: LD_ADDR_OWVAR 33
50376: PUSH
50377: LD_STRING 
50379: ST_TO_ADDR
// hc_name :=  ;
50380: LD_ADDR_OWVAR 26
50384: PUSH
50385: LD_STRING 
50387: ST_TO_ADDR
// end ;
50388: LD_VAR 0 1
50392: RET
// export function PrepareHorse ( ) ; begin
50393: LD_INT 0
50395: PPUSH
// uc_side := 0 ;
50396: LD_ADDR_OWVAR 20
50400: PUSH
50401: LD_INT 0
50403: ST_TO_ADDR
// uc_nation := 0 ;
50404: LD_ADDR_OWVAR 21
50408: PUSH
50409: LD_INT 0
50411: ST_TO_ADDR
// InitHc ;
50412: CALL_OW 19
// hc_class := class_horse ;
50416: LD_ADDR_OWVAR 28
50420: PUSH
50421: LD_INT 21
50423: ST_TO_ADDR
// hc_gallery :=  ;
50424: LD_ADDR_OWVAR 33
50428: PUSH
50429: LD_STRING 
50431: ST_TO_ADDR
// hc_name :=  ;
50432: LD_ADDR_OWVAR 26
50436: PUSH
50437: LD_STRING 
50439: ST_TO_ADDR
// end ;
50440: LD_VAR 0 1
50444: RET
// export function PrepareMastodont ( ) ; begin
50445: LD_INT 0
50447: PPUSH
// uc_side := 0 ;
50448: LD_ADDR_OWVAR 20
50452: PUSH
50453: LD_INT 0
50455: ST_TO_ADDR
// uc_nation := 0 ;
50456: LD_ADDR_OWVAR 21
50460: PUSH
50461: LD_INT 0
50463: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50464: LD_ADDR_OWVAR 37
50468: PUSH
50469: LD_INT 31
50471: ST_TO_ADDR
// vc_control := control_rider ;
50472: LD_ADDR_OWVAR 38
50476: PUSH
50477: LD_INT 4
50479: ST_TO_ADDR
// end ;
50480: LD_VAR 0 1
50484: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50485: LD_INT 0
50487: PPUSH
50488: PPUSH
50489: PPUSH
// uc_side = 0 ;
50490: LD_ADDR_OWVAR 20
50494: PUSH
50495: LD_INT 0
50497: ST_TO_ADDR
// uc_nation = 0 ;
50498: LD_ADDR_OWVAR 21
50502: PUSH
50503: LD_INT 0
50505: ST_TO_ADDR
// InitHc_All ( ) ;
50506: CALL_OW 584
// InitVc ;
50510: CALL_OW 20
// if mastodonts then
50514: LD_VAR 0 6
50518: IFFALSE 50585
// for i = 1 to mastodonts do
50520: LD_ADDR_VAR 0 11
50524: PUSH
50525: DOUBLE
50526: LD_INT 1
50528: DEC
50529: ST_TO_ADDR
50530: LD_VAR 0 6
50534: PUSH
50535: FOR_TO
50536: IFFALSE 50583
// begin vc_chassis := 31 ;
50538: LD_ADDR_OWVAR 37
50542: PUSH
50543: LD_INT 31
50545: ST_TO_ADDR
// vc_control := control_rider ;
50546: LD_ADDR_OWVAR 38
50550: PUSH
50551: LD_INT 4
50553: ST_TO_ADDR
// animal := CreateVehicle ;
50554: LD_ADDR_VAR 0 12
50558: PUSH
50559: CALL_OW 45
50563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50564: LD_VAR 0 12
50568: PPUSH
50569: LD_VAR 0 8
50573: PPUSH
50574: LD_INT 0
50576: PPUSH
50577: CALL 52727 0 3
// end ;
50581: GO 50535
50583: POP
50584: POP
// if horses then
50585: LD_VAR 0 5
50589: IFFALSE 50656
// for i = 1 to horses do
50591: LD_ADDR_VAR 0 11
50595: PUSH
50596: DOUBLE
50597: LD_INT 1
50599: DEC
50600: ST_TO_ADDR
50601: LD_VAR 0 5
50605: PUSH
50606: FOR_TO
50607: IFFALSE 50654
// begin hc_class := 21 ;
50609: LD_ADDR_OWVAR 28
50613: PUSH
50614: LD_INT 21
50616: ST_TO_ADDR
// hc_gallery :=  ;
50617: LD_ADDR_OWVAR 33
50621: PUSH
50622: LD_STRING 
50624: ST_TO_ADDR
// animal := CreateHuman ;
50625: LD_ADDR_VAR 0 12
50629: PUSH
50630: CALL_OW 44
50634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50635: LD_VAR 0 12
50639: PPUSH
50640: LD_VAR 0 8
50644: PPUSH
50645: LD_INT 0
50647: PPUSH
50648: CALL 52727 0 3
// end ;
50652: GO 50606
50654: POP
50655: POP
// if birds then
50656: LD_VAR 0 1
50660: IFFALSE 50727
// for i = 1 to birds do
50662: LD_ADDR_VAR 0 11
50666: PUSH
50667: DOUBLE
50668: LD_INT 1
50670: DEC
50671: ST_TO_ADDR
50672: LD_VAR 0 1
50676: PUSH
50677: FOR_TO
50678: IFFALSE 50725
// begin hc_class := 18 ;
50680: LD_ADDR_OWVAR 28
50684: PUSH
50685: LD_INT 18
50687: ST_TO_ADDR
// hc_gallery =  ;
50688: LD_ADDR_OWVAR 33
50692: PUSH
50693: LD_STRING 
50695: ST_TO_ADDR
// animal := CreateHuman ;
50696: LD_ADDR_VAR 0 12
50700: PUSH
50701: CALL_OW 44
50705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50706: LD_VAR 0 12
50710: PPUSH
50711: LD_VAR 0 8
50715: PPUSH
50716: LD_INT 0
50718: PPUSH
50719: CALL 52727 0 3
// end ;
50723: GO 50677
50725: POP
50726: POP
// if tigers then
50727: LD_VAR 0 2
50731: IFFALSE 50815
// for i = 1 to tigers do
50733: LD_ADDR_VAR 0 11
50737: PUSH
50738: DOUBLE
50739: LD_INT 1
50741: DEC
50742: ST_TO_ADDR
50743: LD_VAR 0 2
50747: PUSH
50748: FOR_TO
50749: IFFALSE 50813
// begin hc_class = class_tiger ;
50751: LD_ADDR_OWVAR 28
50755: PUSH
50756: LD_INT 14
50758: ST_TO_ADDR
// hc_gallery =  ;
50759: LD_ADDR_OWVAR 33
50763: PUSH
50764: LD_STRING 
50766: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50767: LD_ADDR_OWVAR 35
50771: PUSH
50772: LD_INT 7
50774: NEG
50775: PPUSH
50776: LD_INT 7
50778: PPUSH
50779: CALL_OW 12
50783: ST_TO_ADDR
// animal := CreateHuman ;
50784: LD_ADDR_VAR 0 12
50788: PUSH
50789: CALL_OW 44
50793: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50794: LD_VAR 0 12
50798: PPUSH
50799: LD_VAR 0 8
50803: PPUSH
50804: LD_INT 0
50806: PPUSH
50807: CALL 52727 0 3
// end ;
50811: GO 50748
50813: POP
50814: POP
// if apemans then
50815: LD_VAR 0 3
50819: IFFALSE 50942
// for i = 1 to apemans do
50821: LD_ADDR_VAR 0 11
50825: PUSH
50826: DOUBLE
50827: LD_INT 1
50829: DEC
50830: ST_TO_ADDR
50831: LD_VAR 0 3
50835: PUSH
50836: FOR_TO
50837: IFFALSE 50940
// begin hc_class = class_apeman ;
50839: LD_ADDR_OWVAR 28
50843: PUSH
50844: LD_INT 12
50846: ST_TO_ADDR
// hc_gallery =  ;
50847: LD_ADDR_OWVAR 33
50851: PUSH
50852: LD_STRING 
50854: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50855: LD_ADDR_OWVAR 35
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PPUSH
50864: LD_INT 2
50866: PPUSH
50867: CALL_OW 12
50871: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50872: LD_ADDR_OWVAR 31
50876: PUSH
50877: LD_INT 1
50879: PPUSH
50880: LD_INT 3
50882: PPUSH
50883: CALL_OW 12
50887: PUSH
50888: LD_INT 1
50890: PPUSH
50891: LD_INT 3
50893: PPUSH
50894: CALL_OW 12
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: ST_TO_ADDR
// animal := CreateHuman ;
50911: LD_ADDR_VAR 0 12
50915: PUSH
50916: CALL_OW 44
50920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50921: LD_VAR 0 12
50925: PPUSH
50926: LD_VAR 0 8
50930: PPUSH
50931: LD_INT 0
50933: PPUSH
50934: CALL 52727 0 3
// end ;
50938: GO 50836
50940: POP
50941: POP
// if enchidnas then
50942: LD_VAR 0 4
50946: IFFALSE 51013
// for i = 1 to enchidnas do
50948: LD_ADDR_VAR 0 11
50952: PUSH
50953: DOUBLE
50954: LD_INT 1
50956: DEC
50957: ST_TO_ADDR
50958: LD_VAR 0 4
50962: PUSH
50963: FOR_TO
50964: IFFALSE 51011
// begin hc_class = 13 ;
50966: LD_ADDR_OWVAR 28
50970: PUSH
50971: LD_INT 13
50973: ST_TO_ADDR
// hc_gallery =  ;
50974: LD_ADDR_OWVAR 33
50978: PUSH
50979: LD_STRING 
50981: ST_TO_ADDR
// animal := CreateHuman ;
50982: LD_ADDR_VAR 0 12
50986: PUSH
50987: CALL_OW 44
50991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50992: LD_VAR 0 12
50996: PPUSH
50997: LD_VAR 0 8
51001: PPUSH
51002: LD_INT 0
51004: PPUSH
51005: CALL 52727 0 3
// end ;
51009: GO 50963
51011: POP
51012: POP
// if fishes then
51013: LD_VAR 0 7
51017: IFFALSE 51084
// for i = 1 to fishes do
51019: LD_ADDR_VAR 0 11
51023: PUSH
51024: DOUBLE
51025: LD_INT 1
51027: DEC
51028: ST_TO_ADDR
51029: LD_VAR 0 7
51033: PUSH
51034: FOR_TO
51035: IFFALSE 51082
// begin hc_class = 20 ;
51037: LD_ADDR_OWVAR 28
51041: PUSH
51042: LD_INT 20
51044: ST_TO_ADDR
// hc_gallery =  ;
51045: LD_ADDR_OWVAR 33
51049: PUSH
51050: LD_STRING 
51052: ST_TO_ADDR
// animal := CreateHuman ;
51053: LD_ADDR_VAR 0 12
51057: PUSH
51058: CALL_OW 44
51062: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51063: LD_VAR 0 12
51067: PPUSH
51068: LD_VAR 0 9
51072: PPUSH
51073: LD_INT 0
51075: PPUSH
51076: CALL 52727 0 3
// end ;
51080: GO 51034
51082: POP
51083: POP
// end ;
51084: LD_VAR 0 10
51088: RET
// export function WantHeal ( sci , unit ) ; begin
51089: LD_INT 0
51091: PPUSH
// if GetTaskList ( sci ) > 0 then
51092: LD_VAR 0 1
51096: PPUSH
51097: CALL_OW 437
51101: PUSH
51102: LD_INT 0
51104: GREATER
51105: IFFALSE 51177
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51107: LD_VAR 0 1
51111: PPUSH
51112: CALL_OW 437
51116: PUSH
51117: LD_INT 1
51119: ARRAY
51120: PUSH
51121: LD_INT 1
51123: ARRAY
51124: PUSH
51125: LD_STRING l
51127: EQUAL
51128: IFFALSE 51155
51130: PUSH
51131: LD_VAR 0 1
51135: PPUSH
51136: CALL_OW 437
51140: PUSH
51141: LD_INT 1
51143: ARRAY
51144: PUSH
51145: LD_INT 4
51147: ARRAY
51148: PUSH
51149: LD_VAR 0 2
51153: EQUAL
51154: AND
51155: IFFALSE 51167
// result := true else
51157: LD_ADDR_VAR 0 3
51161: PUSH
51162: LD_INT 1
51164: ST_TO_ADDR
51165: GO 51175
// result := false ;
51167: LD_ADDR_VAR 0 3
51171: PUSH
51172: LD_INT 0
51174: ST_TO_ADDR
// end else
51175: GO 51185
// result := false ;
51177: LD_ADDR_VAR 0 3
51181: PUSH
51182: LD_INT 0
51184: ST_TO_ADDR
// end ;
51185: LD_VAR 0 3
51189: RET
// export function HealTarget ( sci ) ; begin
51190: LD_INT 0
51192: PPUSH
// if not sci then
51193: LD_VAR 0 1
51197: NOT
51198: IFFALSE 51202
// exit ;
51200: GO 51267
// result := 0 ;
51202: LD_ADDR_VAR 0 2
51206: PUSH
51207: LD_INT 0
51209: ST_TO_ADDR
// if GetTaskList ( sci ) then
51210: LD_VAR 0 1
51214: PPUSH
51215: CALL_OW 437
51219: IFFALSE 51267
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51221: LD_VAR 0 1
51225: PPUSH
51226: CALL_OW 437
51230: PUSH
51231: LD_INT 1
51233: ARRAY
51234: PUSH
51235: LD_INT 1
51237: ARRAY
51238: PUSH
51239: LD_STRING l
51241: EQUAL
51242: IFFALSE 51267
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51244: LD_ADDR_VAR 0 2
51248: PUSH
51249: LD_VAR 0 1
51253: PPUSH
51254: CALL_OW 437
51258: PUSH
51259: LD_INT 1
51261: ARRAY
51262: PUSH
51263: LD_INT 4
51265: ARRAY
51266: ST_TO_ADDR
// end ;
51267: LD_VAR 0 2
51271: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51272: LD_INT 0
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
// if not base_units then
51278: LD_VAR 0 1
51282: NOT
51283: IFFALSE 51287
// exit ;
51285: GO 51374
// result := false ;
51287: LD_ADDR_VAR 0 2
51291: PUSH
51292: LD_INT 0
51294: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51295: LD_ADDR_VAR 0 5
51299: PUSH
51300: LD_VAR 0 1
51304: PPUSH
51305: LD_INT 21
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PPUSH
51315: CALL_OW 72
51319: ST_TO_ADDR
// if not tmp then
51320: LD_VAR 0 5
51324: NOT
51325: IFFALSE 51329
// exit ;
51327: GO 51374
// for i in tmp do
51329: LD_ADDR_VAR 0 3
51333: PUSH
51334: LD_VAR 0 5
51338: PUSH
51339: FOR_IN
51340: IFFALSE 51372
// begin result := EnemyInRange ( i , 22 ) ;
51342: LD_ADDR_VAR 0 2
51346: PUSH
51347: LD_VAR 0 3
51351: PPUSH
51352: LD_INT 22
51354: PPUSH
51355: CALL 48799 0 2
51359: ST_TO_ADDR
// if result then
51360: LD_VAR 0 2
51364: IFFALSE 51370
// exit ;
51366: POP
51367: POP
51368: GO 51374
// end ;
51370: GO 51339
51372: POP
51373: POP
// end ;
51374: LD_VAR 0 2
51378: RET
// export function FilterByTag ( units , tag ) ; begin
51379: LD_INT 0
51381: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_VAR 0 1
51391: PPUSH
51392: LD_INT 120
51394: PUSH
51395: LD_VAR 0 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PPUSH
51404: CALL_OW 72
51408: ST_TO_ADDR
// end ;
51409: LD_VAR 0 3
51413: RET
// export function IsDriver ( un ) ; begin
51414: LD_INT 0
51416: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51417: LD_ADDR_VAR 0 2
51421: PUSH
51422: LD_VAR 0 1
51426: PUSH
51427: LD_INT 55
51429: PUSH
51430: EMPTY
51431: LIST
51432: PPUSH
51433: CALL_OW 69
51437: IN
51438: ST_TO_ADDR
// end ;
51439: LD_VAR 0 2
51443: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51444: LD_INT 0
51446: PPUSH
51447: PPUSH
// list := [ ] ;
51448: LD_ADDR_VAR 0 5
51452: PUSH
51453: EMPTY
51454: ST_TO_ADDR
// case d of 0 :
51455: LD_VAR 0 3
51459: PUSH
51460: LD_INT 0
51462: DOUBLE
51463: EQUAL
51464: IFTRUE 51468
51466: GO 51601
51468: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51469: LD_ADDR_VAR 0 5
51473: PUSH
51474: LD_VAR 0 1
51478: PUSH
51479: LD_INT 4
51481: MINUS
51482: PUSH
51483: LD_VAR 0 2
51487: PUSH
51488: LD_INT 4
51490: MINUS
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: PUSH
51500: LD_VAR 0 1
51504: PUSH
51505: LD_INT 3
51507: MINUS
51508: PUSH
51509: LD_VAR 0 2
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: PUSH
51522: LD_VAR 0 1
51526: PUSH
51527: LD_INT 4
51529: PLUS
51530: PUSH
51531: LD_VAR 0 2
51535: PUSH
51536: LD_INT 4
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: PUSH
51544: LD_VAR 0 1
51548: PUSH
51549: LD_INT 3
51551: PLUS
51552: PUSH
51553: LD_VAR 0 2
51557: PUSH
51558: LD_INT 3
51560: PLUS
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: PUSH
51570: LD_VAR 0 1
51574: PUSH
51575: LD_VAR 0 2
51579: PUSH
51580: LD_INT 4
51582: PLUS
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: ST_TO_ADDR
// end ; 1 :
51599: GO 52299
51601: LD_INT 1
51603: DOUBLE
51604: EQUAL
51605: IFTRUE 51609
51607: GO 51742
51609: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51610: LD_ADDR_VAR 0 5
51614: PUSH
51615: LD_VAR 0 1
51619: PUSH
51620: LD_VAR 0 2
51624: PUSH
51625: LD_INT 4
51627: MINUS
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: PUSH
51637: LD_VAR 0 1
51641: PUSH
51642: LD_INT 3
51644: MINUS
51645: PUSH
51646: LD_VAR 0 2
51650: PUSH
51651: LD_INT 3
51653: MINUS
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: LIST
51662: PUSH
51663: LD_VAR 0 1
51667: PUSH
51668: LD_INT 4
51670: MINUS
51671: PUSH
51672: LD_VAR 0 2
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: PUSH
51685: LD_VAR 0 1
51689: PUSH
51690: LD_VAR 0 2
51694: PUSH
51695: LD_INT 3
51697: PLUS
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: PUSH
51707: LD_VAR 0 1
51711: PUSH
51712: LD_INT 4
51714: PLUS
51715: PUSH
51716: LD_VAR 0 2
51720: PUSH
51721: LD_INT 4
51723: PLUS
51724: PUSH
51725: LD_INT 5
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: ST_TO_ADDR
// end ; 2 :
51740: GO 52299
51742: LD_INT 2
51744: DOUBLE
51745: EQUAL
51746: IFTRUE 51750
51748: GO 51879
51750: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51751: LD_ADDR_VAR 0 5
51755: PUSH
51756: LD_VAR 0 1
51760: PUSH
51761: LD_VAR 0 2
51765: PUSH
51766: LD_INT 3
51768: MINUS
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: PUSH
51778: LD_VAR 0 1
51782: PUSH
51783: LD_INT 4
51785: PLUS
51786: PUSH
51787: LD_VAR 0 2
51791: PUSH
51792: LD_INT 4
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: PUSH
51800: LD_VAR 0 1
51804: PUSH
51805: LD_VAR 0 2
51809: PUSH
51810: LD_INT 4
51812: PLUS
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: PUSH
51822: LD_VAR 0 1
51826: PUSH
51827: LD_INT 3
51829: MINUS
51830: PUSH
51831: LD_VAR 0 2
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: PUSH
51844: LD_VAR 0 1
51848: PUSH
51849: LD_INT 4
51851: MINUS
51852: PUSH
51853: LD_VAR 0 2
51857: PUSH
51858: LD_INT 4
51860: MINUS
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// end ; 3 :
51877: GO 52299
51879: LD_INT 3
51881: DOUBLE
51882: EQUAL
51883: IFTRUE 51887
51885: GO 52020
51887: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51888: LD_ADDR_VAR 0 5
51892: PUSH
51893: LD_VAR 0 1
51897: PUSH
51898: LD_INT 3
51900: PLUS
51901: PUSH
51902: LD_VAR 0 2
51906: PUSH
51907: LD_INT 4
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: PUSH
51915: LD_VAR 0 1
51919: PUSH
51920: LD_INT 4
51922: PLUS
51923: PUSH
51924: LD_VAR 0 2
51928: PUSH
51929: LD_INT 4
51931: PLUS
51932: PUSH
51933: LD_INT 5
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: PUSH
51941: LD_VAR 0 1
51945: PUSH
51946: LD_INT 4
51948: MINUS
51949: PUSH
51950: LD_VAR 0 2
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: PUSH
51963: LD_VAR 0 1
51967: PUSH
51968: LD_VAR 0 2
51972: PUSH
51973: LD_INT 4
51975: MINUS
51976: PUSH
51977: LD_INT 3
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: PUSH
51985: LD_VAR 0 1
51989: PUSH
51990: LD_INT 3
51992: MINUS
51993: PUSH
51994: LD_VAR 0 2
51998: PUSH
51999: LD_INT 3
52001: MINUS
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// end ; 4 :
52018: GO 52299
52020: LD_INT 4
52022: DOUBLE
52023: EQUAL
52024: IFTRUE 52028
52026: GO 52161
52028: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52029: LD_ADDR_VAR 0 5
52033: PUSH
52034: LD_VAR 0 1
52038: PUSH
52039: LD_VAR 0 2
52043: PUSH
52044: LD_INT 4
52046: PLUS
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: PUSH
52056: LD_VAR 0 1
52060: PUSH
52061: LD_INT 3
52063: PLUS
52064: PUSH
52065: LD_VAR 0 2
52069: PUSH
52070: LD_INT 3
52072: PLUS
52073: PUSH
52074: LD_INT 5
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: PUSH
52082: LD_VAR 0 1
52086: PUSH
52087: LD_INT 4
52089: PLUS
52090: PUSH
52091: LD_VAR 0 2
52095: PUSH
52096: LD_INT 4
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: PUSH
52104: LD_VAR 0 1
52108: PUSH
52109: LD_VAR 0 2
52113: PUSH
52114: LD_INT 3
52116: MINUS
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: PUSH
52126: LD_VAR 0 1
52130: PUSH
52131: LD_INT 4
52133: MINUS
52134: PUSH
52135: LD_VAR 0 2
52139: PUSH
52140: LD_INT 4
52142: MINUS
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// end ; 5 :
52159: GO 52299
52161: LD_INT 5
52163: DOUBLE
52164: EQUAL
52165: IFTRUE 52169
52167: GO 52298
52169: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52170: LD_ADDR_VAR 0 5
52174: PUSH
52175: LD_VAR 0 1
52179: PUSH
52180: LD_INT 4
52182: MINUS
52183: PUSH
52184: LD_VAR 0 2
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: PUSH
52197: LD_VAR 0 1
52201: PUSH
52202: LD_VAR 0 2
52206: PUSH
52207: LD_INT 4
52209: MINUS
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: PUSH
52219: LD_VAR 0 1
52223: PUSH
52224: LD_INT 4
52226: PLUS
52227: PUSH
52228: LD_VAR 0 2
52232: PUSH
52233: LD_INT 4
52235: PLUS
52236: PUSH
52237: LD_INT 5
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: LIST
52244: PUSH
52245: LD_VAR 0 1
52249: PUSH
52250: LD_INT 3
52252: PLUS
52253: PUSH
52254: LD_VAR 0 2
52258: PUSH
52259: LD_INT 4
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: LD_VAR 0 1
52271: PUSH
52272: LD_VAR 0 2
52276: PUSH
52277: LD_INT 3
52279: PLUS
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// end ; end ;
52296: GO 52299
52298: POP
// result := list ;
52299: LD_ADDR_VAR 0 4
52303: PUSH
52304: LD_VAR 0 5
52308: ST_TO_ADDR
// end ;
52309: LD_VAR 0 4
52313: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52314: LD_INT 0
52316: PPUSH
52317: PPUSH
52318: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52319: LD_VAR 0 1
52323: NOT
52324: IFTRUE 52352
52326: PUSH
52327: LD_VAR 0 2
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: LD_INT 4
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: IN
52350: NOT
52351: OR
52352: IFFALSE 52356
// exit ;
52354: GO 52439
// tmp := [ ] ;
52356: LD_ADDR_VAR 0 5
52360: PUSH
52361: EMPTY
52362: ST_TO_ADDR
// for i in units do
52363: LD_ADDR_VAR 0 4
52367: PUSH
52368: LD_VAR 0 1
52372: PUSH
52373: FOR_IN
52374: IFFALSE 52408
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52376: LD_ADDR_VAR 0 5
52380: PUSH
52381: LD_VAR 0 5
52385: PPUSH
52386: LD_VAR 0 4
52390: PPUSH
52391: LD_VAR 0 2
52395: PPUSH
52396: CALL_OW 259
52400: PPUSH
52401: CALL 53834 0 2
52405: ST_TO_ADDR
52406: GO 52373
52408: POP
52409: POP
// if not tmp then
52410: LD_VAR 0 5
52414: NOT
52415: IFFALSE 52419
// exit ;
52417: GO 52439
// result := SortListByListDesc ( units , tmp ) ;
52419: LD_ADDR_VAR 0 3
52423: PUSH
52424: LD_VAR 0 1
52428: PPUSH
52429: LD_VAR 0 5
52433: PPUSH
52434: CALL_OW 77
52438: ST_TO_ADDR
// end ;
52439: LD_VAR 0 3
52443: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52444: LD_INT 0
52446: PPUSH
52447: PPUSH
52448: PPUSH
// result := false ;
52449: LD_ADDR_VAR 0 3
52453: PUSH
52454: LD_INT 0
52456: ST_TO_ADDR
// if not building then
52457: LD_VAR 0 2
52461: NOT
52462: IFFALSE 52466
// exit ;
52464: GO 52610
// x := GetX ( building ) ;
52466: LD_ADDR_VAR 0 4
52470: PUSH
52471: LD_VAR 0 2
52475: PPUSH
52476: CALL_OW 250
52480: ST_TO_ADDR
// y := GetY ( building ) ;
52481: LD_ADDR_VAR 0 5
52485: PUSH
52486: LD_VAR 0 2
52490: PPUSH
52491: CALL_OW 251
52495: ST_TO_ADDR
// if not x or not y then
52496: LD_VAR 0 4
52500: NOT
52501: IFTRUE 52510
52503: PUSH
52504: LD_VAR 0 5
52508: NOT
52509: OR
52510: IFFALSE 52514
// exit ;
52512: GO 52610
// if GetTaskList ( unit ) then
52514: LD_VAR 0 1
52518: PPUSH
52519: CALL_OW 437
52523: IFFALSE 52610
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52525: LD_STRING e
52527: PUSH
52528: LD_VAR 0 1
52532: PPUSH
52533: CALL_OW 437
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: PUSH
52542: LD_INT 1
52544: ARRAY
52545: EQUAL
52546: IFFALSE 52573
52548: PUSH
52549: LD_VAR 0 4
52553: PUSH
52554: LD_VAR 0 1
52558: PPUSH
52559: CALL_OW 437
52563: PUSH
52564: LD_INT 1
52566: ARRAY
52567: PUSH
52568: LD_INT 2
52570: ARRAY
52571: EQUAL
52572: AND
52573: IFFALSE 52600
52575: PUSH
52576: LD_VAR 0 5
52580: PUSH
52581: LD_VAR 0 1
52585: PPUSH
52586: CALL_OW 437
52590: PUSH
52591: LD_INT 1
52593: ARRAY
52594: PUSH
52595: LD_INT 3
52597: ARRAY
52598: EQUAL
52599: AND
52600: IFFALSE 52610
// result := true end ;
52602: LD_ADDR_VAR 0 3
52606: PUSH
52607: LD_INT 1
52609: ST_TO_ADDR
// end ;
52610: LD_VAR 0 3
52614: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52615: LD_INT 0
52617: PPUSH
// result := false ;
52618: LD_ADDR_VAR 0 4
52622: PUSH
52623: LD_INT 0
52625: ST_TO_ADDR
// if GetTaskList ( unit ) then
52626: LD_VAR 0 1
52630: PPUSH
52631: CALL_OW 437
52635: IFFALSE 52722
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52637: LD_STRING M
52639: PUSH
52640: LD_VAR 0 1
52644: PPUSH
52645: CALL_OW 437
52649: PUSH
52650: LD_INT 1
52652: ARRAY
52653: PUSH
52654: LD_INT 1
52656: ARRAY
52657: EQUAL
52658: IFFALSE 52685
52660: PUSH
52661: LD_VAR 0 2
52665: PUSH
52666: LD_VAR 0 1
52670: PPUSH
52671: CALL_OW 437
52675: PUSH
52676: LD_INT 1
52678: ARRAY
52679: PUSH
52680: LD_INT 2
52682: ARRAY
52683: EQUAL
52684: AND
52685: IFFALSE 52712
52687: PUSH
52688: LD_VAR 0 3
52692: PUSH
52693: LD_VAR 0 1
52697: PPUSH
52698: CALL_OW 437
52702: PUSH
52703: LD_INT 1
52705: ARRAY
52706: PUSH
52707: LD_INT 3
52709: ARRAY
52710: EQUAL
52711: AND
52712: IFFALSE 52722
// result := true ;
52714: LD_ADDR_VAR 0 4
52718: PUSH
52719: LD_INT 1
52721: ST_TO_ADDR
// end ; end ;
52722: LD_VAR 0 4
52726: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52727: LD_INT 0
52729: PPUSH
52730: PPUSH
52731: PPUSH
52732: PPUSH
// if not unit or not area then
52733: LD_VAR 0 1
52737: NOT
52738: IFTRUE 52747
52740: PUSH
52741: LD_VAR 0 2
52745: NOT
52746: OR
52747: IFFALSE 52751
// exit ;
52749: GO 52927
// tmp := AreaToList ( area , i ) ;
52751: LD_ADDR_VAR 0 6
52755: PUSH
52756: LD_VAR 0 2
52760: PPUSH
52761: LD_VAR 0 5
52765: PPUSH
52766: CALL_OW 517
52770: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52771: LD_ADDR_VAR 0 5
52775: PUSH
52776: DOUBLE
52777: LD_INT 1
52779: DEC
52780: ST_TO_ADDR
52781: LD_VAR 0 6
52785: PUSH
52786: LD_INT 1
52788: ARRAY
52789: PUSH
52790: FOR_TO
52791: IFFALSE 52925
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52793: LD_ADDR_VAR 0 7
52797: PUSH
52798: LD_VAR 0 6
52802: PUSH
52803: LD_INT 1
52805: ARRAY
52806: PUSH
52807: LD_VAR 0 5
52811: ARRAY
52812: PUSH
52813: LD_VAR 0 6
52817: PUSH
52818: LD_INT 2
52820: ARRAY
52821: PUSH
52822: LD_VAR 0 5
52826: ARRAY
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52832: LD_INT 92
52834: PUSH
52835: LD_VAR 0 7
52839: PUSH
52840: LD_INT 1
52842: ARRAY
52843: PUSH
52844: LD_VAR 0 7
52848: PUSH
52849: LD_INT 2
52851: ARRAY
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: PPUSH
52862: CALL_OW 69
52866: PUSH
52867: LD_INT 0
52869: EQUAL
52870: IFFALSE 52923
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52872: LD_VAR 0 1
52876: PPUSH
52877: LD_VAR 0 7
52881: PUSH
52882: LD_INT 1
52884: ARRAY
52885: PPUSH
52886: LD_VAR 0 7
52890: PUSH
52891: LD_INT 2
52893: ARRAY
52894: PPUSH
52895: LD_VAR 0 3
52899: PPUSH
52900: CALL_OW 48
// result := IsPlaced ( unit ) ;
52904: LD_ADDR_VAR 0 4
52908: PUSH
52909: LD_VAR 0 1
52913: PPUSH
52914: CALL_OW 305
52918: ST_TO_ADDR
// exit ;
52919: POP
52920: POP
52921: GO 52927
// end ; end ;
52923: GO 52790
52925: POP
52926: POP
// end ;
52927: LD_VAR 0 4
52931: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52932: LD_INT 0
52934: PPUSH
52935: PPUSH
52936: PPUSH
// if not side or side > 8 then
52937: LD_VAR 0 1
52941: NOT
52942: IFTRUE 52954
52944: PUSH
52945: LD_VAR 0 1
52949: PUSH
52950: LD_INT 8
52952: GREATER
52953: OR
52954: IFFALSE 52958
// exit ;
52956: GO 53145
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52958: LD_ADDR_VAR 0 4
52962: PUSH
52963: LD_INT 22
52965: PUSH
52966: LD_VAR 0 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 21
52977: PUSH
52978: LD_INT 3
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PPUSH
52989: CALL_OW 69
52993: ST_TO_ADDR
// if not tmp then
52994: LD_VAR 0 4
52998: NOT
52999: IFFALSE 53003
// exit ;
53001: GO 53145
// enable_addtolog := true ;
53003: LD_ADDR_OWVAR 81
53007: PUSH
53008: LD_INT 1
53010: ST_TO_ADDR
// AddToLog ( [ ) ;
53011: LD_STRING [
53013: PPUSH
53014: CALL_OW 561
// for i in tmp do
53018: LD_ADDR_VAR 0 3
53022: PUSH
53023: LD_VAR 0 4
53027: PUSH
53028: FOR_IN
53029: IFFALSE 53136
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53031: LD_STRING [
53033: PUSH
53034: LD_VAR 0 3
53038: PPUSH
53039: CALL_OW 266
53043: STR
53044: PUSH
53045: LD_STRING , 
53047: STR
53048: PUSH
53049: LD_VAR 0 3
53053: PPUSH
53054: CALL_OW 250
53058: STR
53059: PUSH
53060: LD_STRING , 
53062: STR
53063: PUSH
53064: LD_VAR 0 3
53068: PPUSH
53069: CALL_OW 251
53073: STR
53074: PUSH
53075: LD_STRING , 
53077: STR
53078: PUSH
53079: LD_VAR 0 3
53083: PPUSH
53084: CALL_OW 254
53088: STR
53089: PUSH
53090: LD_STRING , 
53092: STR
53093: PUSH
53094: LD_VAR 0 3
53098: PPUSH
53099: LD_INT 1
53101: PPUSH
53102: CALL_OW 268
53106: STR
53107: PUSH
53108: LD_STRING , 
53110: STR
53111: PUSH
53112: LD_VAR 0 3
53116: PPUSH
53117: LD_INT 2
53119: PPUSH
53120: CALL_OW 268
53124: STR
53125: PUSH
53126: LD_STRING ],
53128: STR
53129: PPUSH
53130: CALL_OW 561
// end ;
53134: GO 53028
53136: POP
53137: POP
// AddToLog ( ]; ) ;
53138: LD_STRING ];
53140: PPUSH
53141: CALL_OW 561
// end ;
53145: LD_VAR 0 2
53149: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53150: LD_INT 0
53152: PPUSH
53153: PPUSH
53154: PPUSH
53155: PPUSH
53156: PPUSH
// if not area or not rate or not max then
53157: LD_VAR 0 1
53161: NOT
53162: IFTRUE 53171
53164: PUSH
53165: LD_VAR 0 2
53169: NOT
53170: OR
53171: IFTRUE 53180
53173: PUSH
53174: LD_VAR 0 4
53178: NOT
53179: OR
53180: IFFALSE 53184
// exit ;
53182: GO 53373
// while 1 do
53184: LD_INT 1
53186: IFFALSE 53373
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53188: LD_ADDR_VAR 0 9
53192: PUSH
53193: LD_VAR 0 1
53197: PPUSH
53198: LD_INT 1
53200: PPUSH
53201: CALL_OW 287
53205: PUSH
53206: LD_INT 10
53208: MUL
53209: ST_TO_ADDR
// r := rate / 10 ;
53210: LD_ADDR_VAR 0 7
53214: PUSH
53215: LD_VAR 0 2
53219: PUSH
53220: LD_INT 10
53222: DIVREAL
53223: ST_TO_ADDR
// time := 1 1$00 ;
53224: LD_ADDR_VAR 0 8
53228: PUSH
53229: LD_INT 2100
53231: ST_TO_ADDR
// if amount < min then
53232: LD_VAR 0 9
53236: PUSH
53237: LD_VAR 0 3
53241: LESS
53242: IFFALSE 53260
// r := r * 2 else
53244: LD_ADDR_VAR 0 7
53248: PUSH
53249: LD_VAR 0 7
53253: PUSH
53254: LD_INT 2
53256: MUL
53257: ST_TO_ADDR
53258: GO 53286
// if amount > max then
53260: LD_VAR 0 9
53264: PUSH
53265: LD_VAR 0 4
53269: GREATER
53270: IFFALSE 53286
// r := r / 2 ;
53272: LD_ADDR_VAR 0 7
53276: PUSH
53277: LD_VAR 0 7
53281: PUSH
53282: LD_INT 2
53284: DIVREAL
53285: ST_TO_ADDR
// time := time / r ;
53286: LD_ADDR_VAR 0 8
53290: PUSH
53291: LD_VAR 0 8
53295: PUSH
53296: LD_VAR 0 7
53300: DIVREAL
53301: ST_TO_ADDR
// if time < 0 then
53302: LD_VAR 0 8
53306: PUSH
53307: LD_INT 0
53309: LESS
53310: IFFALSE 53327
// time := time * - 1 ;
53312: LD_ADDR_VAR 0 8
53316: PUSH
53317: LD_VAR 0 8
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: MUL
53326: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53327: LD_VAR 0 8
53331: PUSH
53332: LD_INT 35
53334: PPUSH
53335: LD_INT 875
53337: PPUSH
53338: CALL_OW 12
53342: PLUS
53343: PPUSH
53344: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53348: LD_INT 1
53350: PPUSH
53351: LD_INT 5
53353: PPUSH
53354: CALL_OW 12
53358: PPUSH
53359: LD_VAR 0 1
53363: PPUSH
53364: LD_INT 1
53366: PPUSH
53367: CALL_OW 55
// end ;
53371: GO 53184
// end ;
53373: LD_VAR 0 5
53377: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53378: LD_INT 0
53380: PPUSH
53381: PPUSH
53382: PPUSH
53383: PPUSH
53384: PPUSH
53385: PPUSH
53386: PPUSH
53387: PPUSH
// if not turrets or not factories then
53388: LD_VAR 0 1
53392: NOT
53393: IFTRUE 53402
53395: PUSH
53396: LD_VAR 0 2
53400: NOT
53401: OR
53402: IFFALSE 53406
// exit ;
53404: GO 53713
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53406: LD_ADDR_VAR 0 10
53410: PUSH
53411: LD_INT 5
53413: PUSH
53414: LD_INT 6
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 4
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 5
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 24
53448: PUSH
53449: LD_INT 25
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 23
53458: PUSH
53459: LD_INT 27
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 42
53472: PUSH
53473: LD_INT 43
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 44
53482: PUSH
53483: LD_INT 46
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 45
53492: PUSH
53493: LD_INT 47
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// result := [ ] ;
53510: LD_ADDR_VAR 0 3
53514: PUSH
53515: EMPTY
53516: ST_TO_ADDR
// for i in turrets do
53517: LD_ADDR_VAR 0 4
53521: PUSH
53522: LD_VAR 0 1
53526: PUSH
53527: FOR_IN
53528: IFFALSE 53711
// begin nat := GetNation ( i ) ;
53530: LD_ADDR_VAR 0 7
53534: PUSH
53535: LD_VAR 0 4
53539: PPUSH
53540: CALL_OW 248
53544: ST_TO_ADDR
// weapon := 0 ;
53545: LD_ADDR_VAR 0 8
53549: PUSH
53550: LD_INT 0
53552: ST_TO_ADDR
// if not nat then
53553: LD_VAR 0 7
53557: NOT
53558: IFFALSE 53562
// continue ;
53560: GO 53527
// for j in list [ nat ] do
53562: LD_ADDR_VAR 0 5
53566: PUSH
53567: LD_VAR 0 10
53571: PUSH
53572: LD_VAR 0 7
53576: ARRAY
53577: PUSH
53578: FOR_IN
53579: IFFALSE 53620
// if GetBWeapon ( i ) = j [ 1 ] then
53581: LD_VAR 0 4
53585: PPUSH
53586: CALL_OW 269
53590: PUSH
53591: LD_VAR 0 5
53595: PUSH
53596: LD_INT 1
53598: ARRAY
53599: EQUAL
53600: IFFALSE 53618
// begin weapon := j [ 2 ] ;
53602: LD_ADDR_VAR 0 8
53606: PUSH
53607: LD_VAR 0 5
53611: PUSH
53612: LD_INT 2
53614: ARRAY
53615: ST_TO_ADDR
// break ;
53616: GO 53620
// end ;
53618: GO 53578
53620: POP
53621: POP
// if not weapon then
53622: LD_VAR 0 8
53626: NOT
53627: IFFALSE 53631
// continue ;
53629: GO 53527
// for k in factories do
53631: LD_ADDR_VAR 0 6
53635: PUSH
53636: LD_VAR 0 2
53640: PUSH
53641: FOR_IN
53642: IFFALSE 53707
// begin weapons := AvailableWeaponList ( k ) ;
53644: LD_ADDR_VAR 0 9
53648: PUSH
53649: LD_VAR 0 6
53653: PPUSH
53654: CALL_OW 478
53658: ST_TO_ADDR
// if not weapons then
53659: LD_VAR 0 9
53663: NOT
53664: IFFALSE 53668
// continue ;
53666: GO 53641
// if weapon in weapons then
53668: LD_VAR 0 8
53672: PUSH
53673: LD_VAR 0 9
53677: IN
53678: IFFALSE 53705
// begin result := [ i , weapon ] ;
53680: LD_ADDR_VAR 0 3
53684: PUSH
53685: LD_VAR 0 4
53689: PUSH
53690: LD_VAR 0 8
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: ST_TO_ADDR
// exit ;
53699: POP
53700: POP
53701: POP
53702: POP
53703: GO 53713
// end ; end ;
53705: GO 53641
53707: POP
53708: POP
// end ;
53709: GO 53527
53711: POP
53712: POP
// end ;
53713: LD_VAR 0 3
53717: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53718: LD_INT 0
53720: PPUSH
// if not side or side > 8 then
53721: LD_VAR 0 3
53725: NOT
53726: IFTRUE 53738
53728: PUSH
53729: LD_VAR 0 3
53733: PUSH
53734: LD_INT 8
53736: GREATER
53737: OR
53738: IFFALSE 53742
// exit ;
53740: GO 53801
// if not range then
53742: LD_VAR 0 4
53746: NOT
53747: IFFALSE 53758
// range := - 12 ;
53749: LD_ADDR_VAR 0 4
53753: PUSH
53754: LD_INT 12
53756: NEG
53757: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53758: LD_VAR 0 1
53762: PPUSH
53763: LD_VAR 0 2
53767: PPUSH
53768: LD_VAR 0 3
53772: PPUSH
53773: LD_VAR 0 4
53777: PPUSH
53778: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53782: LD_VAR 0 1
53786: PPUSH
53787: LD_VAR 0 2
53791: PPUSH
53792: LD_VAR 0 3
53796: PPUSH
53797: CALL_OW 331
// end ;
53801: LD_VAR 0 5
53805: RET
// export function Video ( mode ) ; begin
53806: LD_INT 0
53808: PPUSH
// ingame_video = mode ;
53809: LD_ADDR_OWVAR 52
53813: PUSH
53814: LD_VAR 0 1
53818: ST_TO_ADDR
// interface_hidden = mode ;
53819: LD_ADDR_OWVAR 54
53823: PUSH
53824: LD_VAR 0 1
53828: ST_TO_ADDR
// end ;
53829: LD_VAR 0 2
53833: RET
// export function Join ( array , element ) ; begin
53834: LD_INT 0
53836: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53837: LD_ADDR_VAR 0 3
53841: PUSH
53842: LD_VAR 0 1
53846: PPUSH
53847: LD_VAR 0 1
53851: PUSH
53852: LD_INT 1
53854: PLUS
53855: PPUSH
53856: LD_VAR 0 2
53860: PPUSH
53861: CALL_OW 1
53865: ST_TO_ADDR
// end ;
53866: LD_VAR 0 3
53870: RET
// export function JoinUnion ( array , element ) ; begin
53871: LD_INT 0
53873: PPUSH
// result := array union element ;
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: LD_VAR 0 1
53883: PUSH
53884: LD_VAR 0 2
53888: UNION
53889: ST_TO_ADDR
// end ;
53890: LD_VAR 0 3
53894: RET
// export function GetBehemoths ( side ) ; begin
53895: LD_INT 0
53897: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53898: LD_ADDR_VAR 0 2
53902: PUSH
53903: LD_INT 22
53905: PUSH
53906: LD_VAR 0 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 31
53917: PUSH
53918: LD_INT 25
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PPUSH
53929: CALL_OW 69
53933: ST_TO_ADDR
// end ;
53934: LD_VAR 0 2
53938: RET
// export function Shuffle ( array ) ; var i , index ; begin
53939: LD_INT 0
53941: PPUSH
53942: PPUSH
53943: PPUSH
// result := [ ] ;
53944: LD_ADDR_VAR 0 2
53948: PUSH
53949: EMPTY
53950: ST_TO_ADDR
// if not array then
53951: LD_VAR 0 1
53955: NOT
53956: IFFALSE 53960
// exit ;
53958: GO 54059
// Randomize ;
53960: CALL_OW 10
// for i = array downto 1 do
53964: LD_ADDR_VAR 0 3
53968: PUSH
53969: DOUBLE
53970: LD_VAR 0 1
53974: INC
53975: ST_TO_ADDR
53976: LD_INT 1
53978: PUSH
53979: FOR_DOWNTO
53980: IFFALSE 54057
// begin index := rand ( 1 , array ) ;
53982: LD_ADDR_VAR 0 4
53986: PUSH
53987: LD_INT 1
53989: PPUSH
53990: LD_VAR 0 1
53994: PPUSH
53995: CALL_OW 12
53999: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54000: LD_ADDR_VAR 0 2
54004: PUSH
54005: LD_VAR 0 2
54009: PPUSH
54010: LD_VAR 0 2
54014: PUSH
54015: LD_INT 1
54017: PLUS
54018: PPUSH
54019: LD_VAR 0 1
54023: PUSH
54024: LD_VAR 0 4
54028: ARRAY
54029: PPUSH
54030: CALL_OW 2
54034: ST_TO_ADDR
// array := Delete ( array , index ) ;
54035: LD_ADDR_VAR 0 1
54039: PUSH
54040: LD_VAR 0 1
54044: PPUSH
54045: LD_VAR 0 4
54049: PPUSH
54050: CALL_OW 3
54054: ST_TO_ADDR
// end ;
54055: GO 53979
54057: POP
54058: POP
// end ;
54059: LD_VAR 0 2
54063: RET
// export function GetBaseMaterials ( base ) ; begin
54064: LD_INT 0
54066: PPUSH
// result := [ 0 , 0 , 0 ] ;
54067: LD_ADDR_VAR 0 2
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: ST_TO_ADDR
// if not base then
54086: LD_VAR 0 1
54090: NOT
54091: IFFALSE 54095
// exit ;
54093: GO 54144
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54095: LD_ADDR_VAR 0 2
54099: PUSH
54100: LD_VAR 0 1
54104: PPUSH
54105: LD_INT 1
54107: PPUSH
54108: CALL_OW 275
54112: PUSH
54113: LD_VAR 0 1
54117: PPUSH
54118: LD_INT 2
54120: PPUSH
54121: CALL_OW 275
54125: PUSH
54126: LD_VAR 0 1
54130: PPUSH
54131: LD_INT 3
54133: PPUSH
54134: CALL_OW 275
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: LIST
54143: ST_TO_ADDR
// end ;
54144: LD_VAR 0 2
54148: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54149: LD_INT 0
54151: PPUSH
54152: PPUSH
// result := array ;
54153: LD_ADDR_VAR 0 3
54157: PUSH
54158: LD_VAR 0 1
54162: ST_TO_ADDR
// if size >= result then
54163: LD_VAR 0 2
54167: PUSH
54168: LD_VAR 0 3
54172: GREATEREQUAL
54173: IFFALSE 54177
// exit ;
54175: GO 54227
// if size then
54177: LD_VAR 0 2
54181: IFFALSE 54227
// for i := array downto size do
54183: LD_ADDR_VAR 0 4
54187: PUSH
54188: DOUBLE
54189: LD_VAR 0 1
54193: INC
54194: ST_TO_ADDR
54195: LD_VAR 0 2
54199: PUSH
54200: FOR_DOWNTO
54201: IFFALSE 54225
// result := Delete ( result , result ) ;
54203: LD_ADDR_VAR 0 3
54207: PUSH
54208: LD_VAR 0 3
54212: PPUSH
54213: LD_VAR 0 3
54217: PPUSH
54218: CALL_OW 3
54222: ST_TO_ADDR
54223: GO 54200
54225: POP
54226: POP
// end ;
54227: LD_VAR 0 3
54231: RET
// export function ComExit ( unit ) ; var tmp ; begin
54232: LD_INT 0
54234: PPUSH
54235: PPUSH
// if not IsInUnit ( unit ) then
54236: LD_VAR 0 1
54240: PPUSH
54241: CALL_OW 310
54245: NOT
54246: IFFALSE 54250
// exit ;
54248: GO 54310
// tmp := IsInUnit ( unit ) ;
54250: LD_ADDR_VAR 0 3
54254: PUSH
54255: LD_VAR 0 1
54259: PPUSH
54260: CALL_OW 310
54264: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54265: LD_VAR 0 3
54269: PPUSH
54270: CALL_OW 247
54274: PUSH
54275: LD_INT 2
54277: EQUAL
54278: IFFALSE 54291
// ComExitVehicle ( unit ) else
54280: LD_VAR 0 1
54284: PPUSH
54285: CALL_OW 121
54289: GO 54300
// ComExitBuilding ( unit ) ;
54291: LD_VAR 0 1
54295: PPUSH
54296: CALL_OW 122
// result := tmp ;
54300: LD_ADDR_VAR 0 2
54304: PUSH
54305: LD_VAR 0 3
54309: ST_TO_ADDR
// end ;
54310: LD_VAR 0 2
54314: RET
// export function ComExitAll ( units ) ; var i ; begin
54315: LD_INT 0
54317: PPUSH
54318: PPUSH
// if not units then
54319: LD_VAR 0 1
54323: NOT
54324: IFFALSE 54328
// exit ;
54326: GO 54354
// for i in units do
54328: LD_ADDR_VAR 0 3
54332: PUSH
54333: LD_VAR 0 1
54337: PUSH
54338: FOR_IN
54339: IFFALSE 54352
// ComExit ( i ) ;
54341: LD_VAR 0 3
54345: PPUSH
54346: CALL 54232 0 1
54350: GO 54338
54352: POP
54353: POP
// end ;
54354: LD_VAR 0 2
54358: RET
// export function ResetHc ; begin
54359: LD_INT 0
54361: PPUSH
// InitHc ;
54362: CALL_OW 19
// hc_importance := 0 ;
54366: LD_ADDR_OWVAR 32
54370: PUSH
54371: LD_INT 0
54373: ST_TO_ADDR
// end ;
54374: LD_VAR 0 1
54378: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54379: LD_INT 0
54381: PPUSH
54382: PPUSH
54383: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54384: LD_ADDR_VAR 0 6
54388: PUSH
54389: LD_VAR 0 1
54393: PUSH
54394: LD_VAR 0 3
54398: PLUS
54399: PUSH
54400: LD_INT 2
54402: DIV
54403: ST_TO_ADDR
// if _x < 0 then
54404: LD_VAR 0 6
54408: PUSH
54409: LD_INT 0
54411: LESS
54412: IFFALSE 54429
// _x := _x * - 1 ;
54414: LD_ADDR_VAR 0 6
54418: PUSH
54419: LD_VAR 0 6
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: MUL
54428: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54429: LD_ADDR_VAR 0 7
54433: PUSH
54434: LD_VAR 0 2
54438: PUSH
54439: LD_VAR 0 4
54443: PLUS
54444: PUSH
54445: LD_INT 2
54447: DIV
54448: ST_TO_ADDR
// if _y < 0 then
54449: LD_VAR 0 7
54453: PUSH
54454: LD_INT 0
54456: LESS
54457: IFFALSE 54474
// _y := _y * - 1 ;
54459: LD_ADDR_VAR 0 7
54463: PUSH
54464: LD_VAR 0 7
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: MUL
54473: ST_TO_ADDR
// result := [ _x , _y ] ;
54474: LD_ADDR_VAR 0 5
54478: PUSH
54479: LD_VAR 0 6
54483: PUSH
54484: LD_VAR 0 7
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// end ;
54493: LD_VAR 0 5
54497: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54498: LD_INT 0
54500: PPUSH
54501: PPUSH
54502: PPUSH
54503: PPUSH
// task := GetTaskList ( unit ) ;
54504: LD_ADDR_VAR 0 7
54508: PUSH
54509: LD_VAR 0 1
54513: PPUSH
54514: CALL_OW 437
54518: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54519: LD_VAR 0 7
54523: NOT
54524: IFFALSE 54543
54526: PUSH
54527: LD_VAR 0 1
54531: PPUSH
54532: LD_VAR 0 2
54536: PPUSH
54537: CALL_OW 308
54541: NOT
54542: AND
54543: IFFALSE 54547
// exit ;
54545: GO 54665
// if IsInArea ( unit , area ) then
54547: LD_VAR 0 1
54551: PPUSH
54552: LD_VAR 0 2
54556: PPUSH
54557: CALL_OW 308
54561: IFFALSE 54579
// begin ComMoveToArea ( unit , goAway ) ;
54563: LD_VAR 0 1
54567: PPUSH
54568: LD_VAR 0 3
54572: PPUSH
54573: CALL_OW 113
// exit ;
54577: GO 54665
// end ; if task [ 1 ] [ 1 ] <> M then
54579: LD_VAR 0 7
54583: PUSH
54584: LD_INT 1
54586: ARRAY
54587: PUSH
54588: LD_INT 1
54590: ARRAY
54591: PUSH
54592: LD_STRING M
54594: NONEQUAL
54595: IFFALSE 54599
// exit ;
54597: GO 54665
// x := task [ 1 ] [ 2 ] ;
54599: LD_ADDR_VAR 0 5
54603: PUSH
54604: LD_VAR 0 7
54608: PUSH
54609: LD_INT 1
54611: ARRAY
54612: PUSH
54613: LD_INT 2
54615: ARRAY
54616: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54617: LD_ADDR_VAR 0 6
54621: PUSH
54622: LD_VAR 0 7
54626: PUSH
54627: LD_INT 1
54629: ARRAY
54630: PUSH
54631: LD_INT 3
54633: ARRAY
54634: ST_TO_ADDR
// if InArea ( x , y , area ) then
54635: LD_VAR 0 5
54639: PPUSH
54640: LD_VAR 0 6
54644: PPUSH
54645: LD_VAR 0 2
54649: PPUSH
54650: CALL_OW 309
54654: IFFALSE 54665
// ComStop ( unit ) ;
54656: LD_VAR 0 1
54660: PPUSH
54661: CALL_OW 141
// end ;
54665: LD_VAR 0 4
54669: RET
// export function Abs ( value ) ; begin
54670: LD_INT 0
54672: PPUSH
// result := value ;
54673: LD_ADDR_VAR 0 2
54677: PUSH
54678: LD_VAR 0 1
54682: ST_TO_ADDR
// if value < 0 then
54683: LD_VAR 0 1
54687: PUSH
54688: LD_INT 0
54690: LESS
54691: IFFALSE 54708
// result := value * - 1 ;
54693: LD_ADDR_VAR 0 2
54697: PUSH
54698: LD_VAR 0 1
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: MUL
54707: ST_TO_ADDR
// end ;
54708: LD_VAR 0 2
54712: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54713: LD_INT 0
54715: PPUSH
54716: PPUSH
54717: PPUSH
54718: PPUSH
54719: PPUSH
54720: PPUSH
54721: PPUSH
54722: PPUSH
// if not unit or not building then
54723: LD_VAR 0 1
54727: NOT
54728: IFTRUE 54737
54730: PUSH
54731: LD_VAR 0 2
54735: NOT
54736: OR
54737: IFFALSE 54741
// exit ;
54739: GO 54969
// x := GetX ( building ) ;
54741: LD_ADDR_VAR 0 4
54745: PUSH
54746: LD_VAR 0 2
54750: PPUSH
54751: CALL_OW 250
54755: ST_TO_ADDR
// y := GetY ( building ) ;
54756: LD_ADDR_VAR 0 6
54760: PUSH
54761: LD_VAR 0 2
54765: PPUSH
54766: CALL_OW 251
54770: ST_TO_ADDR
// d := GetDir ( building ) ;
54771: LD_ADDR_VAR 0 8
54775: PUSH
54776: LD_VAR 0 2
54780: PPUSH
54781: CALL_OW 254
54785: ST_TO_ADDR
// r := 4 ;
54786: LD_ADDR_VAR 0 9
54790: PUSH
54791: LD_INT 4
54793: ST_TO_ADDR
// for i := 1 to 5 do
54794: LD_ADDR_VAR 0 10
54798: PUSH
54799: DOUBLE
54800: LD_INT 1
54802: DEC
54803: ST_TO_ADDR
54804: LD_INT 5
54806: PUSH
54807: FOR_TO
54808: IFFALSE 54967
// begin _x := ShiftX ( x , d , r + i ) ;
54810: LD_ADDR_VAR 0 5
54814: PUSH
54815: LD_VAR 0 4
54819: PPUSH
54820: LD_VAR 0 8
54824: PPUSH
54825: LD_VAR 0 9
54829: PUSH
54830: LD_VAR 0 10
54834: PLUS
54835: PPUSH
54836: CALL_OW 272
54840: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54841: LD_ADDR_VAR 0 7
54845: PUSH
54846: LD_VAR 0 6
54850: PPUSH
54851: LD_VAR 0 8
54855: PPUSH
54856: LD_VAR 0 9
54860: PUSH
54861: LD_VAR 0 10
54865: PLUS
54866: PPUSH
54867: CALL_OW 273
54871: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54872: LD_VAR 0 5
54876: PPUSH
54877: LD_VAR 0 7
54881: PPUSH
54882: CALL_OW 488
54886: IFFALSE 54921
54888: PUSH
54889: LD_VAR 0 5
54893: PPUSH
54894: LD_VAR 0 7
54898: PPUSH
54899: CALL_OW 428
54903: PPUSH
54904: CALL_OW 247
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: IN
54919: NOT
54920: AND
54921: IFFALSE 54965
// begin ComMoveXY ( unit , _x , _y ) ;
54923: LD_VAR 0 1
54927: PPUSH
54928: LD_VAR 0 5
54932: PPUSH
54933: LD_VAR 0 7
54937: PPUSH
54938: CALL_OW 111
// result := [ _x , _y ] ;
54942: LD_ADDR_VAR 0 3
54946: PUSH
54947: LD_VAR 0 5
54951: PUSH
54952: LD_VAR 0 7
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// exit ;
54961: POP
54962: POP
54963: GO 54969
// end ; end ;
54965: GO 54807
54967: POP
54968: POP
// end ;
54969: LD_VAR 0 3
54973: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54974: LD_INT 0
54976: PPUSH
54977: PPUSH
54978: PPUSH
// result := 0 ;
54979: LD_ADDR_VAR 0 3
54983: PUSH
54984: LD_INT 0
54986: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54987: LD_VAR 0 1
54991: PUSH
54992: LD_INT 0
54994: LESS
54995: IFTRUE 55007
54997: PUSH
54998: LD_VAR 0 1
55002: PUSH
55003: LD_INT 8
55005: GREATER
55006: OR
55007: IFTRUE 55019
55009: PUSH
55010: LD_VAR 0 2
55014: PUSH
55015: LD_INT 0
55017: LESS
55018: OR
55019: IFTRUE 55031
55021: PUSH
55022: LD_VAR 0 2
55026: PUSH
55027: LD_INT 8
55029: GREATER
55030: OR
55031: IFFALSE 55035
// exit ;
55033: GO 55110
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55035: LD_ADDR_VAR 0 4
55039: PUSH
55040: LD_INT 22
55042: PUSH
55043: LD_VAR 0 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PPUSH
55052: CALL_OW 69
55056: PUSH
55057: FOR_IN
55058: IFFALSE 55108
// begin un := UnitShoot ( i ) ;
55060: LD_ADDR_VAR 0 5
55064: PUSH
55065: LD_VAR 0 4
55069: PPUSH
55070: CALL_OW 504
55074: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55075: LD_VAR 0 5
55079: PPUSH
55080: CALL_OW 255
55084: PUSH
55085: LD_VAR 0 1
55089: EQUAL
55090: IFFALSE 55106
// begin result := un ;
55092: LD_ADDR_VAR 0 3
55096: PUSH
55097: LD_VAR 0 5
55101: ST_TO_ADDR
// exit ;
55102: POP
55103: POP
55104: GO 55110
// end ; end ;
55106: GO 55057
55108: POP
55109: POP
// end ;
55110: LD_VAR 0 3
55114: RET
// export function GetCargoBay ( units ) ; begin
55115: LD_INT 0
55117: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55118: LD_ADDR_VAR 0 2
55122: PUSH
55123: LD_VAR 0 1
55127: PPUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 34
55133: PUSH
55134: LD_INT 12
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 34
55143: PUSH
55144: LD_INT 51
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 34
55153: PUSH
55154: LD_INT 32
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 34
55163: PUSH
55164: LD_INT 89
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: PPUSH
55178: CALL_OW 72
55182: ST_TO_ADDR
// end ;
55183: LD_VAR 0 2
55187: RET
// export function Negate ( value ) ; begin
55188: LD_INT 0
55190: PPUSH
// result := not value ;
55191: LD_ADDR_VAR 0 2
55195: PUSH
55196: LD_VAR 0 1
55200: NOT
55201: ST_TO_ADDR
// end ;
55202: LD_VAR 0 2
55206: RET
// export function Inc ( value ) ; begin
55207: LD_INT 0
55209: PPUSH
// result := value + 1 ;
55210: LD_ADDR_VAR 0 2
55214: PUSH
55215: LD_VAR 0 1
55219: PUSH
55220: LD_INT 1
55222: PLUS
55223: ST_TO_ADDR
// end ;
55224: LD_VAR 0 2
55228: RET
// export function Dec ( value ) ; begin
55229: LD_INT 0
55231: PPUSH
// result := value - 1 ;
55232: LD_ADDR_VAR 0 2
55236: PUSH
55237: LD_VAR 0 1
55241: PUSH
55242: LD_INT 1
55244: MINUS
55245: ST_TO_ADDR
// end ;
55246: LD_VAR 0 2
55250: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55251: LD_INT 0
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
55260: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55261: LD_VAR 0 1
55265: PPUSH
55266: LD_VAR 0 2
55270: PPUSH
55271: CALL_OW 488
55275: NOT
55276: IFTRUE 55295
55278: PUSH
55279: LD_VAR 0 3
55283: PPUSH
55284: LD_VAR 0 4
55288: PPUSH
55289: CALL_OW 488
55293: NOT
55294: OR
55295: IFFALSE 55308
// begin result := - 1 ;
55297: LD_ADDR_VAR 0 5
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: ST_TO_ADDR
// exit ;
55306: GO 55543
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55308: LD_ADDR_VAR 0 12
55312: PUSH
55313: LD_VAR 0 1
55317: PPUSH
55318: LD_VAR 0 2
55322: PPUSH
55323: LD_VAR 0 3
55327: PPUSH
55328: LD_VAR 0 4
55332: PPUSH
55333: CALL 54379 0 4
55337: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55338: LD_ADDR_VAR 0 11
55342: PUSH
55343: LD_VAR 0 1
55347: PPUSH
55348: LD_VAR 0 2
55352: PPUSH
55353: LD_VAR 0 12
55357: PUSH
55358: LD_INT 1
55360: ARRAY
55361: PPUSH
55362: LD_VAR 0 12
55366: PUSH
55367: LD_INT 2
55369: ARRAY
55370: PPUSH
55371: CALL_OW 298
55375: ST_TO_ADDR
// distance := 9999 ;
55376: LD_ADDR_VAR 0 10
55380: PUSH
55381: LD_INT 9999
55383: ST_TO_ADDR
// for i := 0 to 5 do
55384: LD_ADDR_VAR 0 6
55388: PUSH
55389: DOUBLE
55390: LD_INT 0
55392: DEC
55393: ST_TO_ADDR
55394: LD_INT 5
55396: PUSH
55397: FOR_TO
55398: IFFALSE 55541
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55400: LD_ADDR_VAR 0 7
55404: PUSH
55405: LD_VAR 0 1
55409: PPUSH
55410: LD_VAR 0 6
55414: PPUSH
55415: LD_VAR 0 11
55419: PPUSH
55420: CALL_OW 272
55424: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55425: LD_ADDR_VAR 0 8
55429: PUSH
55430: LD_VAR 0 2
55434: PPUSH
55435: LD_VAR 0 6
55439: PPUSH
55440: LD_VAR 0 11
55444: PPUSH
55445: CALL_OW 273
55449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55450: LD_VAR 0 7
55454: PPUSH
55455: LD_VAR 0 8
55459: PPUSH
55460: CALL_OW 488
55464: NOT
55465: IFFALSE 55469
// continue ;
55467: GO 55397
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55469: LD_ADDR_VAR 0 9
55473: PUSH
55474: LD_VAR 0 12
55478: PUSH
55479: LD_INT 1
55481: ARRAY
55482: PPUSH
55483: LD_VAR 0 12
55487: PUSH
55488: LD_INT 2
55490: ARRAY
55491: PPUSH
55492: LD_VAR 0 7
55496: PPUSH
55497: LD_VAR 0 8
55501: PPUSH
55502: CALL_OW 298
55506: ST_TO_ADDR
// if tmp < distance then
55507: LD_VAR 0 9
55511: PUSH
55512: LD_VAR 0 10
55516: LESS
55517: IFFALSE 55539
// begin result := i ;
55519: LD_ADDR_VAR 0 5
55523: PUSH
55524: LD_VAR 0 6
55528: ST_TO_ADDR
// distance := tmp ;
55529: LD_ADDR_VAR 0 10
55533: PUSH
55534: LD_VAR 0 9
55538: ST_TO_ADDR
// end ; end ;
55539: GO 55397
55541: POP
55542: POP
// end ;
55543: LD_VAR 0 5
55547: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55548: LD_INT 0
55550: PPUSH
55551: PPUSH
// if not driver or not IsInUnit ( driver ) then
55552: LD_VAR 0 1
55556: NOT
55557: IFTRUE 55571
55559: PUSH
55560: LD_VAR 0 1
55564: PPUSH
55565: CALL_OW 310
55569: NOT
55570: OR
55571: IFFALSE 55575
// exit ;
55573: GO 55665
// vehicle := IsInUnit ( driver ) ;
55575: LD_ADDR_VAR 0 3
55579: PUSH
55580: LD_VAR 0 1
55584: PPUSH
55585: CALL_OW 310
55589: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55590: LD_VAR 0 1
55594: PPUSH
55595: LD_STRING \
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: PUSH
55625: LD_STRING E
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_VAR 0 3
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PPUSH
55661: CALL_OW 446
// end ;
55665: LD_VAR 0 2
55669: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55670: LD_INT 0
55672: PPUSH
55673: PPUSH
// if not driver or not IsInUnit ( driver ) then
55674: LD_VAR 0 1
55678: NOT
55679: IFTRUE 55693
55681: PUSH
55682: LD_VAR 0 1
55686: PPUSH
55687: CALL_OW 310
55691: NOT
55692: OR
55693: IFFALSE 55697
// exit ;
55695: GO 55787
// vehicle := IsInUnit ( driver ) ;
55697: LD_ADDR_VAR 0 3
55701: PUSH
55702: LD_VAR 0 1
55706: PPUSH
55707: CALL_OW 310
55711: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55712: LD_VAR 0 1
55716: PPUSH
55717: LD_STRING \
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: PUSH
55747: LD_STRING E
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_VAR 0 3
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PPUSH
55783: CALL_OW 447
// end ;
55787: LD_VAR 0 2
55791: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55792: LD_INT 0
55794: PPUSH
55795: PPUSH
55796: PPUSH
// tmp := [ ] ;
55797: LD_ADDR_VAR 0 5
55801: PUSH
55802: EMPTY
55803: ST_TO_ADDR
// for i in units do
55804: LD_ADDR_VAR 0 4
55808: PUSH
55809: LD_VAR 0 1
55813: PUSH
55814: FOR_IN
55815: IFFALSE 55853
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55817: LD_ADDR_VAR 0 5
55821: PUSH
55822: LD_VAR 0 5
55826: PPUSH
55827: LD_VAR 0 5
55831: PUSH
55832: LD_INT 1
55834: PLUS
55835: PPUSH
55836: LD_VAR 0 4
55840: PPUSH
55841: CALL_OW 256
55845: PPUSH
55846: CALL_OW 2
55850: ST_TO_ADDR
55851: GO 55814
55853: POP
55854: POP
// if not tmp then
55855: LD_VAR 0 5
55859: NOT
55860: IFFALSE 55864
// exit ;
55862: GO 55912
// if asc then
55864: LD_VAR 0 2
55868: IFFALSE 55892
// result := SortListByListAsc ( units , tmp ) else
55870: LD_ADDR_VAR 0 3
55874: PUSH
55875: LD_VAR 0 1
55879: PPUSH
55880: LD_VAR 0 5
55884: PPUSH
55885: CALL_OW 76
55889: ST_TO_ADDR
55890: GO 55912
// result := SortListByListDesc ( units , tmp ) ;
55892: LD_ADDR_VAR 0 3
55896: PUSH
55897: LD_VAR 0 1
55901: PPUSH
55902: LD_VAR 0 5
55906: PPUSH
55907: CALL_OW 77
55911: ST_TO_ADDR
// end ;
55912: LD_VAR 0 3
55916: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55917: LD_INT 0
55919: PPUSH
55920: PPUSH
// task := GetTaskList ( mech ) ;
55921: LD_ADDR_VAR 0 4
55925: PUSH
55926: LD_VAR 0 1
55930: PPUSH
55931: CALL_OW 437
55935: ST_TO_ADDR
// if not task then
55936: LD_VAR 0 4
55940: NOT
55941: IFFALSE 55945
// exit ;
55943: GO 55989
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55945: LD_ADDR_VAR 0 3
55949: PUSH
55950: LD_VAR 0 4
55954: PUSH
55955: LD_INT 1
55957: ARRAY
55958: PUSH
55959: LD_INT 1
55961: ARRAY
55962: PUSH
55963: LD_STRING r
55965: EQUAL
55966: IFFALSE 55988
55968: PUSH
55969: LD_VAR 0 4
55973: PUSH
55974: LD_INT 1
55976: ARRAY
55977: PUSH
55978: LD_INT 4
55980: ARRAY
55981: PUSH
55982: LD_VAR 0 2
55986: EQUAL
55987: AND
55988: ST_TO_ADDR
// end ;
55989: LD_VAR 0 3
55993: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55994: LD_INT 0
55996: PPUSH
// SetDir ( unit , d ) ;
55997: LD_VAR 0 1
56001: PPUSH
56002: LD_VAR 0 4
56006: PPUSH
56007: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56011: LD_ADDR_VAR 0 6
56015: PUSH
56016: LD_VAR 0 1
56020: PPUSH
56021: LD_VAR 0 2
56025: PPUSH
56026: LD_VAR 0 3
56030: PPUSH
56031: LD_VAR 0 5
56035: PPUSH
56036: CALL_OW 48
56040: ST_TO_ADDR
// end ;
56041: LD_VAR 0 6
56045: RET
// export function ToNaturalNumber ( number ) ; begin
56046: LD_INT 0
56048: PPUSH
// result := number div 1 ;
56049: LD_ADDR_VAR 0 2
56053: PUSH
56054: LD_VAR 0 1
56058: PUSH
56059: LD_INT 1
56061: DIV
56062: ST_TO_ADDR
// if number < 0 then
56063: LD_VAR 0 1
56067: PUSH
56068: LD_INT 0
56070: LESS
56071: IFFALSE 56081
// result := 0 ;
56073: LD_ADDR_VAR 0 2
56077: PUSH
56078: LD_INT 0
56080: ST_TO_ADDR
// end ;
56081: LD_VAR 0 2
56085: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56086: LD_INT 0
56088: PPUSH
56089: PPUSH
56090: PPUSH
// if not buildings then
56091: LD_VAR 0 1
56095: NOT
56096: IFFALSE 56100
// exit ;
56098: GO 56215
// tmp := [ ] ;
56100: LD_ADDR_VAR 0 5
56104: PUSH
56105: EMPTY
56106: ST_TO_ADDR
// for b in buildings do
56107: LD_ADDR_VAR 0 4
56111: PUSH
56112: LD_VAR 0 1
56116: PUSH
56117: FOR_IN
56118: IFFALSE 56156
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56120: LD_ADDR_VAR 0 5
56124: PUSH
56125: LD_VAR 0 5
56129: PPUSH
56130: LD_VAR 0 5
56134: PUSH
56135: LD_INT 1
56137: PLUS
56138: PPUSH
56139: LD_VAR 0 4
56143: PPUSH
56144: CALL_OW 266
56148: PPUSH
56149: CALL_OW 1
56153: ST_TO_ADDR
56154: GO 56117
56156: POP
56157: POP
// if not tmp then
56158: LD_VAR 0 5
56162: NOT
56163: IFFALSE 56167
// exit ;
56165: GO 56215
// if asc then
56167: LD_VAR 0 2
56171: IFFALSE 56195
// result := SortListByListAsc ( buildings , tmp ) else
56173: LD_ADDR_VAR 0 3
56177: PUSH
56178: LD_VAR 0 1
56182: PPUSH
56183: LD_VAR 0 5
56187: PPUSH
56188: CALL_OW 76
56192: ST_TO_ADDR
56193: GO 56215
// result := SortListByListDesc ( buildings , tmp ) ;
56195: LD_ADDR_VAR 0 3
56199: PUSH
56200: LD_VAR 0 1
56204: PPUSH
56205: LD_VAR 0 5
56209: PPUSH
56210: CALL_OW 77
56214: ST_TO_ADDR
// end ;
56215: LD_VAR 0 3
56219: RET
// export function SortByClass ( units , class ) ; var un ; begin
56220: LD_INT 0
56222: PPUSH
56223: PPUSH
// if not units or not class then
56224: LD_VAR 0 1
56228: NOT
56229: IFTRUE 56238
56231: PUSH
56232: LD_VAR 0 2
56236: NOT
56237: OR
56238: IFFALSE 56242
// exit ;
56240: GO 56337
// result := [ ] ;
56242: LD_ADDR_VAR 0 3
56246: PUSH
56247: EMPTY
56248: ST_TO_ADDR
// for un in units do
56249: LD_ADDR_VAR 0 4
56253: PUSH
56254: LD_VAR 0 1
56258: PUSH
56259: FOR_IN
56260: IFFALSE 56335
// if GetClass ( un ) = class then
56262: LD_VAR 0 4
56266: PPUSH
56267: CALL_OW 257
56271: PUSH
56272: LD_VAR 0 2
56276: EQUAL
56277: IFFALSE 56304
// result := Insert ( result , 1 , un ) else
56279: LD_ADDR_VAR 0 3
56283: PUSH
56284: LD_VAR 0 3
56288: PPUSH
56289: LD_INT 1
56291: PPUSH
56292: LD_VAR 0 4
56296: PPUSH
56297: CALL_OW 2
56301: ST_TO_ADDR
56302: GO 56333
// result := Replace ( result , result + 1 , un ) ;
56304: LD_ADDR_VAR 0 3
56308: PUSH
56309: LD_VAR 0 3
56313: PPUSH
56314: LD_VAR 0 3
56318: PUSH
56319: LD_INT 1
56321: PLUS
56322: PPUSH
56323: LD_VAR 0 4
56327: PPUSH
56328: CALL_OW 1
56332: ST_TO_ADDR
56333: GO 56259
56335: POP
56336: POP
// end ;
56337: LD_VAR 0 3
56341: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56342: LD_INT 0
56344: PPUSH
56345: PPUSH
56346: PPUSH
56347: PPUSH
56348: PPUSH
56349: PPUSH
56350: PPUSH
// result := [ ] ;
56351: LD_ADDR_VAR 0 4
56355: PUSH
56356: EMPTY
56357: ST_TO_ADDR
// if x - r < 0 then
56358: LD_VAR 0 1
56362: PUSH
56363: LD_VAR 0 3
56367: MINUS
56368: PUSH
56369: LD_INT 0
56371: LESS
56372: IFFALSE 56384
// min_x := 0 else
56374: LD_ADDR_VAR 0 8
56378: PUSH
56379: LD_INT 0
56381: ST_TO_ADDR
56382: GO 56400
// min_x := x - r ;
56384: LD_ADDR_VAR 0 8
56388: PUSH
56389: LD_VAR 0 1
56393: PUSH
56394: LD_VAR 0 3
56398: MINUS
56399: ST_TO_ADDR
// if y - r < 0 then
56400: LD_VAR 0 2
56404: PUSH
56405: LD_VAR 0 3
56409: MINUS
56410: PUSH
56411: LD_INT 0
56413: LESS
56414: IFFALSE 56426
// min_y := 0 else
56416: LD_ADDR_VAR 0 7
56420: PUSH
56421: LD_INT 0
56423: ST_TO_ADDR
56424: GO 56442
// min_y := y - r ;
56426: LD_ADDR_VAR 0 7
56430: PUSH
56431: LD_VAR 0 2
56435: PUSH
56436: LD_VAR 0 3
56440: MINUS
56441: ST_TO_ADDR
// max_x := x + r ;
56442: LD_ADDR_VAR 0 9
56446: PUSH
56447: LD_VAR 0 1
56451: PUSH
56452: LD_VAR 0 3
56456: PLUS
56457: ST_TO_ADDR
// max_y := y + r ;
56458: LD_ADDR_VAR 0 10
56462: PUSH
56463: LD_VAR 0 2
56467: PUSH
56468: LD_VAR 0 3
56472: PLUS
56473: ST_TO_ADDR
// for _x = min_x to max_x do
56474: LD_ADDR_VAR 0 5
56478: PUSH
56479: DOUBLE
56480: LD_VAR 0 8
56484: DEC
56485: ST_TO_ADDR
56486: LD_VAR 0 9
56490: PUSH
56491: FOR_TO
56492: IFFALSE 56593
// for _y = min_y to max_y do
56494: LD_ADDR_VAR 0 6
56498: PUSH
56499: DOUBLE
56500: LD_VAR 0 7
56504: DEC
56505: ST_TO_ADDR
56506: LD_VAR 0 10
56510: PUSH
56511: FOR_TO
56512: IFFALSE 56589
// begin if not ValidHex ( _x , _y ) then
56514: LD_VAR 0 5
56518: PPUSH
56519: LD_VAR 0 6
56523: PPUSH
56524: CALL_OW 488
56528: NOT
56529: IFFALSE 56533
// continue ;
56531: GO 56511
// if GetResourceTypeXY ( _x , _y ) then
56533: LD_VAR 0 5
56537: PPUSH
56538: LD_VAR 0 6
56542: PPUSH
56543: CALL_OW 283
56547: IFFALSE 56587
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56549: LD_ADDR_VAR 0 4
56553: PUSH
56554: LD_VAR 0 4
56558: PPUSH
56559: LD_VAR 0 4
56563: PUSH
56564: LD_INT 1
56566: PLUS
56567: PPUSH
56568: LD_VAR 0 5
56572: PUSH
56573: LD_VAR 0 6
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PPUSH
56582: CALL_OW 1
56586: ST_TO_ADDR
// end ;
56587: GO 56511
56589: POP
56590: POP
56591: GO 56491
56593: POP
56594: POP
// end ;
56595: LD_VAR 0 4
56599: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56600: LD_INT 0
56602: PPUSH
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
56607: PPUSH
56608: PPUSH
56609: PPUSH
// if not units then
56610: LD_VAR 0 1
56614: NOT
56615: IFFALSE 56619
// exit ;
56617: GO 57151
// result := UnitFilter ( units , [ f_ok ] ) ;
56619: LD_ADDR_VAR 0 3
56623: PUSH
56624: LD_VAR 0 1
56628: PPUSH
56629: LD_INT 50
56631: PUSH
56632: EMPTY
56633: LIST
56634: PPUSH
56635: CALL_OW 72
56639: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56640: LD_ADDR_VAR 0 8
56644: PUSH
56645: LD_VAR 0 1
56649: PUSH
56650: LD_INT 1
56652: ARRAY
56653: PPUSH
56654: CALL_OW 255
56658: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56659: LD_ADDR_VAR 0 10
56663: PUSH
56664: LD_INT 29
56666: PUSH
56667: LD_INT 91
56669: PUSH
56670: LD_INT 49
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: ST_TO_ADDR
// if not result then
56678: LD_VAR 0 3
56682: NOT
56683: IFFALSE 56687
// exit ;
56685: GO 57151
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56687: LD_ADDR_VAR 0 5
56691: PUSH
56692: LD_INT 81
56694: PUSH
56695: LD_VAR 0 8
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PPUSH
56704: CALL_OW 69
56708: ST_TO_ADDR
// for i in result do
56709: LD_ADDR_VAR 0 4
56713: PUSH
56714: LD_VAR 0 3
56718: PUSH
56719: FOR_IN
56720: IFFALSE 57149
// begin tag := GetTag ( i ) + 1 ;
56722: LD_ADDR_VAR 0 9
56726: PUSH
56727: LD_VAR 0 4
56731: PPUSH
56732: CALL_OW 110
56736: PUSH
56737: LD_INT 1
56739: PLUS
56740: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56741: LD_ADDR_VAR 0 7
56745: PUSH
56746: LD_VAR 0 4
56750: PPUSH
56751: CALL_OW 250
56755: PPUSH
56756: LD_VAR 0 4
56760: PPUSH
56761: CALL_OW 251
56765: PPUSH
56766: LD_INT 4
56768: PPUSH
56769: CALL 56342 0 3
56773: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56774: LD_VAR 0 4
56778: PPUSH
56779: CALL_OW 247
56783: PUSH
56784: LD_INT 2
56786: EQUAL
56787: IFFALSE 56799
56789: PUSH
56790: LD_VAR 0 7
56794: PUSH
56795: LD_INT 2
56797: GREATER
56798: AND
56799: IFFALSE 56819
56801: PUSH
56802: LD_VAR 0 4
56806: PPUSH
56807: CALL_OW 264
56811: PUSH
56812: LD_VAR 0 10
56816: IN
56817: NOT
56818: AND
56819: IFFALSE 56858
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56821: LD_VAR 0 4
56825: PPUSH
56826: LD_VAR 0 7
56830: PUSH
56831: LD_INT 1
56833: ARRAY
56834: PUSH
56835: LD_INT 1
56837: ARRAY
56838: PPUSH
56839: LD_VAR 0 7
56843: PUSH
56844: LD_INT 1
56846: ARRAY
56847: PUSH
56848: LD_INT 2
56850: ARRAY
56851: PPUSH
56852: CALL_OW 116
56856: GO 57147
// if path > tag then
56858: LD_VAR 0 2
56862: PUSH
56863: LD_VAR 0 9
56867: GREATER
56868: IFFALSE 57076
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56870: LD_ADDR_VAR 0 6
56874: PUSH
56875: LD_VAR 0 5
56879: PPUSH
56880: LD_INT 91
56882: PUSH
56883: LD_VAR 0 4
56887: PUSH
56888: LD_INT 8
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: PPUSH
56896: CALL_OW 72
56900: ST_TO_ADDR
// if nearEnemy then
56901: LD_VAR 0 6
56905: IFFALSE 56974
// begin if GetWeapon ( i ) = ru_time_lapser then
56907: LD_VAR 0 4
56911: PPUSH
56912: CALL_OW 264
56916: PUSH
56917: LD_INT 49
56919: EQUAL
56920: IFFALSE 56948
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56922: LD_VAR 0 4
56926: PPUSH
56927: LD_VAR 0 6
56931: PPUSH
56932: LD_VAR 0 4
56936: PPUSH
56937: CALL_OW 74
56941: PPUSH
56942: CALL_OW 112
56946: GO 56972
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56948: LD_VAR 0 4
56952: PPUSH
56953: LD_VAR 0 6
56957: PPUSH
56958: LD_VAR 0 4
56962: PPUSH
56963: CALL_OW 74
56967: PPUSH
56968: CALL 58232 0 2
// end else
56972: GO 57074
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56974: LD_VAR 0 4
56978: PPUSH
56979: LD_VAR 0 2
56983: PUSH
56984: LD_VAR 0 9
56988: ARRAY
56989: PUSH
56990: LD_INT 1
56992: ARRAY
56993: PPUSH
56994: LD_VAR 0 2
56998: PUSH
56999: LD_VAR 0 9
57003: ARRAY
57004: PUSH
57005: LD_INT 2
57007: ARRAY
57008: PPUSH
57009: CALL_OW 297
57013: PUSH
57014: LD_INT 6
57016: GREATER
57017: IFFALSE 57060
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57019: LD_VAR 0 4
57023: PPUSH
57024: LD_VAR 0 2
57028: PUSH
57029: LD_VAR 0 9
57033: ARRAY
57034: PUSH
57035: LD_INT 1
57037: ARRAY
57038: PPUSH
57039: LD_VAR 0 2
57043: PUSH
57044: LD_VAR 0 9
57048: ARRAY
57049: PUSH
57050: LD_INT 2
57052: ARRAY
57053: PPUSH
57054: CALL_OW 114
57058: GO 57074
// SetTag ( i , tag ) ;
57060: LD_VAR 0 4
57064: PPUSH
57065: LD_VAR 0 9
57069: PPUSH
57070: CALL_OW 109
// end else
57074: GO 57147
// if enemy then
57076: LD_VAR 0 5
57080: IFFALSE 57147
// begin if GetWeapon ( i ) = ru_time_lapser then
57082: LD_VAR 0 4
57086: PPUSH
57087: CALL_OW 264
57091: PUSH
57092: LD_INT 49
57094: EQUAL
57095: IFFALSE 57123
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57097: LD_VAR 0 4
57101: PPUSH
57102: LD_VAR 0 5
57106: PPUSH
57107: LD_VAR 0 4
57111: PPUSH
57112: CALL_OW 74
57116: PPUSH
57117: CALL_OW 112
57121: GO 57147
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57123: LD_VAR 0 4
57127: PPUSH
57128: LD_VAR 0 5
57132: PPUSH
57133: LD_VAR 0 4
57137: PPUSH
57138: CALL_OW 74
57142: PPUSH
57143: CALL 58232 0 2
// end ; end ;
57147: GO 56719
57149: POP
57150: POP
// end ;
57151: LD_VAR 0 3
57155: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57156: LD_INT 0
57158: PPUSH
57159: PPUSH
57160: PPUSH
// if not unit or IsInUnit ( unit ) then
57161: LD_VAR 0 1
57165: NOT
57166: IFTRUE 57179
57168: PUSH
57169: LD_VAR 0 1
57173: PPUSH
57174: CALL_OW 310
57178: OR
57179: IFFALSE 57183
// exit ;
57181: GO 57274
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57183: LD_ADDR_VAR 0 4
57187: PUSH
57188: LD_VAR 0 1
57192: PPUSH
57193: CALL_OW 250
57197: PPUSH
57198: LD_VAR 0 2
57202: PPUSH
57203: LD_INT 1
57205: PPUSH
57206: CALL_OW 272
57210: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57211: LD_ADDR_VAR 0 5
57215: PUSH
57216: LD_VAR 0 1
57220: PPUSH
57221: CALL_OW 251
57225: PPUSH
57226: LD_VAR 0 2
57230: PPUSH
57231: LD_INT 1
57233: PPUSH
57234: CALL_OW 273
57238: ST_TO_ADDR
// if ValidHex ( x , y ) then
57239: LD_VAR 0 4
57243: PPUSH
57244: LD_VAR 0 5
57248: PPUSH
57249: CALL_OW 488
57253: IFFALSE 57274
// ComTurnXY ( unit , x , y ) ;
57255: LD_VAR 0 1
57259: PPUSH
57260: LD_VAR 0 4
57264: PPUSH
57265: LD_VAR 0 5
57269: PPUSH
57270: CALL_OW 118
// end ;
57274: LD_VAR 0 3
57278: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57279: LD_INT 0
57281: PPUSH
57282: PPUSH
// result := false ;
57283: LD_ADDR_VAR 0 3
57287: PUSH
57288: LD_INT 0
57290: ST_TO_ADDR
// if not units then
57291: LD_VAR 0 2
57295: NOT
57296: IFFALSE 57300
// exit ;
57298: GO 57345
// for i in units do
57300: LD_ADDR_VAR 0 4
57304: PUSH
57305: LD_VAR 0 2
57309: PUSH
57310: FOR_IN
57311: IFFALSE 57343
// if See ( side , i ) then
57313: LD_VAR 0 1
57317: PPUSH
57318: LD_VAR 0 4
57322: PPUSH
57323: CALL_OW 292
57327: IFFALSE 57341
// begin result := true ;
57329: LD_ADDR_VAR 0 3
57333: PUSH
57334: LD_INT 1
57336: ST_TO_ADDR
// exit ;
57337: POP
57338: POP
57339: GO 57345
// end ;
57341: GO 57310
57343: POP
57344: POP
// end ;
57345: LD_VAR 0 3
57349: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57350: LD_INT 0
57352: PPUSH
57353: PPUSH
57354: PPUSH
57355: PPUSH
// if not unit or not points then
57356: LD_VAR 0 1
57360: NOT
57361: IFTRUE 57370
57363: PUSH
57364: LD_VAR 0 2
57368: NOT
57369: OR
57370: IFFALSE 57374
// exit ;
57372: GO 57464
// dist := 99999 ;
57374: LD_ADDR_VAR 0 5
57378: PUSH
57379: LD_INT 99999
57381: ST_TO_ADDR
// for i in points do
57382: LD_ADDR_VAR 0 4
57386: PUSH
57387: LD_VAR 0 2
57391: PUSH
57392: FOR_IN
57393: IFFALSE 57462
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57395: LD_ADDR_VAR 0 6
57399: PUSH
57400: LD_VAR 0 1
57404: PPUSH
57405: LD_VAR 0 4
57409: PUSH
57410: LD_INT 1
57412: ARRAY
57413: PPUSH
57414: LD_VAR 0 4
57418: PUSH
57419: LD_INT 2
57421: ARRAY
57422: PPUSH
57423: CALL_OW 297
57427: ST_TO_ADDR
// if tmpDist < dist then
57428: LD_VAR 0 6
57432: PUSH
57433: LD_VAR 0 5
57437: LESS
57438: IFFALSE 57460
// begin result := i ;
57440: LD_ADDR_VAR 0 3
57444: PUSH
57445: LD_VAR 0 4
57449: ST_TO_ADDR
// dist := tmpDist ;
57450: LD_ADDR_VAR 0 5
57454: PUSH
57455: LD_VAR 0 6
57459: ST_TO_ADDR
// end ; end ;
57460: GO 57392
57462: POP
57463: POP
// end ;
57464: LD_VAR 0 3
57468: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57469: LD_INT 0
57471: PPUSH
// uc_side := side ;
57472: LD_ADDR_OWVAR 20
57476: PUSH
57477: LD_VAR 0 1
57481: ST_TO_ADDR
// uc_nation := 3 ;
57482: LD_ADDR_OWVAR 21
57486: PUSH
57487: LD_INT 3
57489: ST_TO_ADDR
// vc_chassis := 25 ;
57490: LD_ADDR_OWVAR 37
57494: PUSH
57495: LD_INT 25
57497: ST_TO_ADDR
// vc_engine := engine_siberite ;
57498: LD_ADDR_OWVAR 39
57502: PUSH
57503: LD_INT 3
57505: ST_TO_ADDR
// vc_control := control_computer ;
57506: LD_ADDR_OWVAR 38
57510: PUSH
57511: LD_INT 3
57513: ST_TO_ADDR
// vc_weapon := 59 ;
57514: LD_ADDR_OWVAR 40
57518: PUSH
57519: LD_INT 59
57521: ST_TO_ADDR
// result := CreateVehicle ;
57522: LD_ADDR_VAR 0 5
57526: PUSH
57527: CALL_OW 45
57531: ST_TO_ADDR
// SetDir ( result , d ) ;
57532: LD_VAR 0 5
57536: PPUSH
57537: LD_VAR 0 4
57541: PPUSH
57542: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57546: LD_VAR 0 5
57550: PPUSH
57551: LD_VAR 0 2
57555: PPUSH
57556: LD_VAR 0 3
57560: PPUSH
57561: LD_INT 0
57563: PPUSH
57564: CALL_OW 48
// end ;
57568: LD_VAR 0 5
57572: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57573: LD_INT 0
57575: PPUSH
57576: PPUSH
57577: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57578: LD_ADDR_VAR 0 2
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57601: LD_VAR 0 1
57605: NOT
57606: IFTRUE 57639
57608: PUSH
57609: LD_VAR 0 1
57613: PPUSH
57614: CALL_OW 264
57618: PUSH
57619: LD_INT 12
57621: PUSH
57622: LD_INT 51
57624: PUSH
57625: LD_INT 32
57627: PUSH
57628: LD_INT 89
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: IN
57637: NOT
57638: OR
57639: IFFALSE 57643
// exit ;
57641: GO 57741
// for i := 1 to 3 do
57643: LD_ADDR_VAR 0 3
57647: PUSH
57648: DOUBLE
57649: LD_INT 1
57651: DEC
57652: ST_TO_ADDR
57653: LD_INT 3
57655: PUSH
57656: FOR_TO
57657: IFFALSE 57739
// begin tmp := GetCargo ( cargo , i ) ;
57659: LD_ADDR_VAR 0 4
57663: PUSH
57664: LD_VAR 0 1
57668: PPUSH
57669: LD_VAR 0 3
57673: PPUSH
57674: CALL_OW 289
57678: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57679: LD_ADDR_VAR 0 2
57683: PUSH
57684: LD_VAR 0 2
57688: PPUSH
57689: LD_VAR 0 3
57693: PPUSH
57694: LD_VAR 0 4
57698: PPUSH
57699: CALL_OW 1
57703: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57704: LD_ADDR_VAR 0 2
57708: PUSH
57709: LD_VAR 0 2
57713: PPUSH
57714: LD_INT 4
57716: PPUSH
57717: LD_VAR 0 2
57721: PUSH
57722: LD_INT 4
57724: ARRAY
57725: PUSH
57726: LD_VAR 0 4
57730: PLUS
57731: PPUSH
57732: CALL_OW 1
57736: ST_TO_ADDR
// end ;
57737: GO 57656
57739: POP
57740: POP
// end ;
57741: LD_VAR 0 2
57745: RET
// export function Length ( array ) ; begin
57746: LD_INT 0
57748: PPUSH
// result := array + 0 ;
57749: LD_ADDR_VAR 0 2
57753: PUSH
57754: LD_VAR 0 1
57758: PUSH
57759: LD_INT 0
57761: PLUS
57762: ST_TO_ADDR
// end ;
57763: LD_VAR 0 2
57767: RET
// export function PrepareArray ( array ) ; begin
57768: LD_INT 0
57770: PPUSH
// result := array diff 0 ;
57771: LD_ADDR_VAR 0 2
57775: PUSH
57776: LD_VAR 0 1
57780: PUSH
57781: LD_INT 0
57783: DIFF
57784: ST_TO_ADDR
// if not result [ 1 ] then
57785: LD_VAR 0 2
57789: PUSH
57790: LD_INT 1
57792: ARRAY
57793: NOT
57794: IFFALSE 57814
// result := Delete ( result , 1 ) ;
57796: LD_ADDR_VAR 0 2
57800: PUSH
57801: LD_VAR 0 2
57805: PPUSH
57806: LD_INT 1
57808: PPUSH
57809: CALL_OW 3
57813: ST_TO_ADDR
// end ;
57814: LD_VAR 0 2
57818: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57819: LD_INT 0
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
// sibRocketRange := 25 ;
57825: LD_ADDR_VAR 0 6
57829: PUSH
57830: LD_INT 25
57832: ST_TO_ADDR
// result := false ;
57833: LD_ADDR_VAR 0 4
57837: PUSH
57838: LD_INT 0
57840: ST_TO_ADDR
// for i := 0 to 5 do
57841: LD_ADDR_VAR 0 5
57845: PUSH
57846: DOUBLE
57847: LD_INT 0
57849: DEC
57850: ST_TO_ADDR
57851: LD_INT 5
57853: PUSH
57854: FOR_TO
57855: IFFALSE 57922
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57857: LD_VAR 0 1
57861: PPUSH
57862: LD_VAR 0 5
57866: PPUSH
57867: LD_VAR 0 6
57871: PPUSH
57872: CALL_OW 272
57876: PPUSH
57877: LD_VAR 0 2
57881: PPUSH
57882: LD_VAR 0 5
57886: PPUSH
57887: LD_VAR 0 6
57891: PPUSH
57892: CALL_OW 273
57896: PPUSH
57897: LD_VAR 0 3
57901: PPUSH
57902: CALL_OW 309
57906: IFFALSE 57920
// begin result := true ;
57908: LD_ADDR_VAR 0 4
57912: PUSH
57913: LD_INT 1
57915: ST_TO_ADDR
// exit ;
57916: POP
57917: POP
57918: GO 57924
// end ;
57920: GO 57854
57922: POP
57923: POP
// end ;
57924: LD_VAR 0 4
57928: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57929: LD_INT 0
57931: PPUSH
57932: PPUSH
57933: PPUSH
// if btype = b_depot then
57934: LD_VAR 0 2
57938: PUSH
57939: LD_INT 0
57941: EQUAL
57942: IFFALSE 57954
// begin result := true ;
57944: LD_ADDR_VAR 0 3
57948: PUSH
57949: LD_INT 1
57951: ST_TO_ADDR
// exit ;
57952: GO 58074
// end ; pom := GetBase ( depot ) ;
57954: LD_ADDR_VAR 0 4
57958: PUSH
57959: LD_VAR 0 1
57963: PPUSH
57964: CALL_OW 274
57968: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57969: LD_ADDR_VAR 0 5
57973: PUSH
57974: LD_VAR 0 2
57978: PPUSH
57979: LD_VAR 0 1
57983: PPUSH
57984: CALL_OW 248
57988: PPUSH
57989: CALL_OW 450
57993: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57994: LD_ADDR_VAR 0 3
57998: PUSH
57999: LD_VAR 0 4
58003: PPUSH
58004: LD_INT 1
58006: PPUSH
58007: CALL_OW 275
58011: PUSH
58012: LD_VAR 0 5
58016: PUSH
58017: LD_INT 1
58019: ARRAY
58020: GREATEREQUAL
58021: IFFALSE 58047
58023: PUSH
58024: LD_VAR 0 4
58028: PPUSH
58029: LD_INT 2
58031: PPUSH
58032: CALL_OW 275
58036: PUSH
58037: LD_VAR 0 5
58041: PUSH
58042: LD_INT 2
58044: ARRAY
58045: GREATEREQUAL
58046: AND
58047: IFFALSE 58073
58049: PUSH
58050: LD_VAR 0 4
58054: PPUSH
58055: LD_INT 3
58057: PPUSH
58058: CALL_OW 275
58062: PUSH
58063: LD_VAR 0 5
58067: PUSH
58068: LD_INT 3
58070: ARRAY
58071: GREATEREQUAL
58072: AND
58073: ST_TO_ADDR
// end ;
58074: LD_VAR 0 3
58078: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58079: LD_INT 0
58081: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58082: LD_VAR 0 1
58086: PPUSH
58087: LD_VAR 0 2
58091: PPUSH
58092: LD_INT 0
58094: PPUSH
58095: LD_INT 0
58097: PPUSH
58098: LD_INT 1
58100: PPUSH
58101: LD_INT 0
58103: PPUSH
58104: CALL_OW 587
// end ;
58108: LD_VAR 0 3
58112: RET
// export function CenterOnNow ( unit ) ; begin
58113: LD_INT 0
58115: PPUSH
// result := IsInUnit ( unit ) ;
58116: LD_ADDR_VAR 0 2
58120: PUSH
58121: LD_VAR 0 1
58125: PPUSH
58126: CALL_OW 310
58130: ST_TO_ADDR
// if not result then
58131: LD_VAR 0 2
58135: NOT
58136: IFFALSE 58148
// result := unit ;
58138: LD_ADDR_VAR 0 2
58142: PUSH
58143: LD_VAR 0 1
58147: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58148: LD_VAR 0 1
58152: PPUSH
58153: CALL_OW 87
// end ;
58157: LD_VAR 0 2
58161: RET
// export function ComMoveHex ( unit , hex ) ; begin
58162: LD_INT 0
58164: PPUSH
// if not hex then
58165: LD_VAR 0 2
58169: NOT
58170: IFFALSE 58174
// exit ;
58172: GO 58227
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58174: LD_VAR 0 2
58178: PUSH
58179: LD_INT 1
58181: ARRAY
58182: PPUSH
58183: LD_VAR 0 2
58187: PUSH
58188: LD_INT 2
58190: ARRAY
58191: PPUSH
58192: CALL_OW 428
58196: IFFALSE 58200
// exit ;
58198: GO 58227
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58200: LD_VAR 0 1
58204: PPUSH
58205: LD_VAR 0 2
58209: PUSH
58210: LD_INT 1
58212: ARRAY
58213: PPUSH
58214: LD_VAR 0 2
58218: PUSH
58219: LD_INT 2
58221: ARRAY
58222: PPUSH
58223: CALL_OW 111
// end ;
58227: LD_VAR 0 3
58231: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58232: LD_INT 0
58234: PPUSH
58235: PPUSH
58236: PPUSH
// if not unit or not enemy then
58237: LD_VAR 0 1
58241: NOT
58242: IFTRUE 58251
58244: PUSH
58245: LD_VAR 0 2
58249: NOT
58250: OR
58251: IFFALSE 58255
// exit ;
58253: GO 58381
// x := GetX ( enemy ) ;
58255: LD_ADDR_VAR 0 4
58259: PUSH
58260: LD_VAR 0 2
58264: PPUSH
58265: CALL_OW 250
58269: ST_TO_ADDR
// y := GetY ( enemy ) ;
58270: LD_ADDR_VAR 0 5
58274: PUSH
58275: LD_VAR 0 2
58279: PPUSH
58280: CALL_OW 251
58284: ST_TO_ADDR
// if ValidHex ( x , y ) then
58285: LD_VAR 0 4
58289: PPUSH
58290: LD_VAR 0 5
58294: PPUSH
58295: CALL_OW 488
58299: IFFALSE 58381
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58301: LD_VAR 0 2
58305: PPUSH
58306: CALL_OW 247
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: IN
58321: IFTRUE 58344
58323: PUSH
58324: LD_VAR 0 1
58328: PPUSH
58329: CALL_OW 255
58333: PPUSH
58334: LD_VAR 0 2
58338: PPUSH
58339: CALL_OW 292
58343: OR
58344: IFFALSE 58362
// ComAttackUnit ( unit , enemy ) else
58346: LD_VAR 0 1
58350: PPUSH
58351: LD_VAR 0 2
58355: PPUSH
58356: CALL_OW 115
58360: GO 58381
// ComAgressiveMove ( unit , x , y ) ;
58362: LD_VAR 0 1
58366: PPUSH
58367: LD_VAR 0 4
58371: PPUSH
58372: LD_VAR 0 5
58376: PPUSH
58377: CALL_OW 114
// end ;
58381: LD_VAR 0 3
58385: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58386: LD_INT 0
58388: PPUSH
58389: PPUSH
58390: PPUSH
// list := AreaToList ( area , 0 ) ;
58391: LD_ADDR_VAR 0 5
58395: PUSH
58396: LD_VAR 0 1
58400: PPUSH
58401: LD_INT 0
58403: PPUSH
58404: CALL_OW 517
58408: ST_TO_ADDR
// if not list then
58409: LD_VAR 0 5
58413: NOT
58414: IFFALSE 58418
// exit ;
58416: GO 58548
// if all then
58418: LD_VAR 0 2
58422: IFFALSE 58510
// begin for i := 1 to list [ 1 ] do
58424: LD_ADDR_VAR 0 4
58428: PUSH
58429: DOUBLE
58430: LD_INT 1
58432: DEC
58433: ST_TO_ADDR
58434: LD_VAR 0 5
58438: PUSH
58439: LD_INT 1
58441: ARRAY
58442: PUSH
58443: FOR_TO
58444: IFFALSE 58506
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58446: LD_ADDR_VAR 0 3
58450: PUSH
58451: LD_VAR 0 3
58455: PPUSH
58456: LD_VAR 0 3
58460: PUSH
58461: LD_INT 1
58463: PLUS
58464: PPUSH
58465: LD_VAR 0 5
58469: PUSH
58470: LD_INT 1
58472: ARRAY
58473: PUSH
58474: LD_VAR 0 4
58478: ARRAY
58479: PUSH
58480: LD_VAR 0 5
58484: PUSH
58485: LD_INT 2
58487: ARRAY
58488: PUSH
58489: LD_VAR 0 4
58493: ARRAY
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PPUSH
58499: CALL_OW 1
58503: ST_TO_ADDR
58504: GO 58443
58506: POP
58507: POP
// exit ;
58508: GO 58548
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58510: LD_ADDR_VAR 0 3
58514: PUSH
58515: LD_VAR 0 5
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PUSH
58524: LD_INT 1
58526: ARRAY
58527: PUSH
58528: LD_VAR 0 5
58532: PUSH
58533: LD_INT 2
58535: ARRAY
58536: PUSH
58537: LD_INT 1
58539: ARRAY
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: ST_TO_ADDR
// end ;
58548: LD_VAR 0 3
58552: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58553: LD_INT 0
58555: PPUSH
58556: PPUSH
// list := AreaToList ( area , 0 ) ;
58557: LD_ADDR_VAR 0 4
58561: PUSH
58562: LD_VAR 0 1
58566: PPUSH
58567: LD_INT 0
58569: PPUSH
58570: CALL_OW 517
58574: ST_TO_ADDR
// if not list then
58575: LD_VAR 0 4
58579: NOT
58580: IFFALSE 58584
// exit ;
58582: GO 58625
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58584: LD_ADDR_VAR 0 3
58588: PUSH
58589: LD_VAR 0 4
58593: PUSH
58594: LD_INT 1
58596: ARRAY
58597: PUSH
58598: LD_INT 1
58600: ARRAY
58601: PUSH
58602: LD_VAR 0 4
58606: PUSH
58607: LD_INT 2
58609: ARRAY
58610: PUSH
58611: LD_INT 1
58613: ARRAY
58614: PUSH
58615: LD_VAR 0 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// end ;
58625: LD_VAR 0 3
58629: RET
// export function First ( array ) ; begin
58630: LD_INT 0
58632: PPUSH
// if not array then
58633: LD_VAR 0 1
58637: NOT
58638: IFFALSE 58642
// exit ;
58640: GO 58656
// result := array [ 1 ] ;
58642: LD_ADDR_VAR 0 2
58646: PUSH
58647: LD_VAR 0 1
58651: PUSH
58652: LD_INT 1
58654: ARRAY
58655: ST_TO_ADDR
// end ;
58656: LD_VAR 0 2
58660: RET
// export function Last ( array ) ; begin
58661: LD_INT 0
58663: PPUSH
// if not array then
58664: LD_VAR 0 1
58668: NOT
58669: IFFALSE 58673
// exit ;
58671: GO 58689
// result := array [ array ] ;
58673: LD_ADDR_VAR 0 2
58677: PUSH
58678: LD_VAR 0 1
58682: PUSH
58683: LD_VAR 0 1
58687: ARRAY
58688: ST_TO_ADDR
// end ;
58689: LD_VAR 0 2
58693: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58694: LD_INT 0
58696: PPUSH
58697: PPUSH
// result := [ ] ;
58698: LD_ADDR_VAR 0 5
58702: PUSH
58703: EMPTY
58704: ST_TO_ADDR
// if not array then
58705: LD_VAR 0 1
58709: NOT
58710: IFFALSE 58714
// exit ;
58712: GO 58826
// for i := 1 to array do
58714: LD_ADDR_VAR 0 6
58718: PUSH
58719: DOUBLE
58720: LD_INT 1
58722: DEC
58723: ST_TO_ADDR
58724: LD_VAR 0 1
58728: PUSH
58729: FOR_TO
58730: IFFALSE 58824
// if array [ i ] [ index ] = value then
58732: LD_VAR 0 1
58736: PUSH
58737: LD_VAR 0 6
58741: ARRAY
58742: PUSH
58743: LD_VAR 0 2
58747: ARRAY
58748: PUSH
58749: LD_VAR 0 3
58753: EQUAL
58754: IFFALSE 58822
// begin if indexColumn then
58756: LD_VAR 0 4
58760: IFFALSE 58796
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58762: LD_ADDR_VAR 0 5
58766: PUSH
58767: LD_VAR 0 5
58771: PPUSH
58772: LD_VAR 0 1
58776: PUSH
58777: LD_VAR 0 6
58781: ARRAY
58782: PUSH
58783: LD_VAR 0 4
58787: ARRAY
58788: PPUSH
58789: CALL 53834 0 2
58793: ST_TO_ADDR
58794: GO 58822
// result := Join ( result , array [ i ] ) ;
58796: LD_ADDR_VAR 0 5
58800: PUSH
58801: LD_VAR 0 5
58805: PPUSH
58806: LD_VAR 0 1
58810: PUSH
58811: LD_VAR 0 6
58815: ARRAY
58816: PPUSH
58817: CALL 53834 0 2
58821: ST_TO_ADDR
// end ;
58822: GO 58729
58824: POP
58825: POP
// end ;
58826: LD_VAR 0 5
58830: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58831: LD_INT 0
58833: PPUSH
// if not vehicles or not parkingPoint then
58834: LD_VAR 0 1
58838: NOT
58839: IFTRUE 58848
58841: PUSH
58842: LD_VAR 0 2
58846: NOT
58847: OR
58848: IFFALSE 58852
// exit ;
58850: GO 58950
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58852: LD_ADDR_VAR 0 1
58856: PUSH
58857: LD_VAR 0 1
58861: PPUSH
58862: LD_INT 50
58864: PUSH
58865: EMPTY
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: LD_INT 92
58873: PUSH
58874: LD_VAR 0 2
58878: PUSH
58879: LD_INT 1
58881: ARRAY
58882: PUSH
58883: LD_VAR 0 2
58887: PUSH
58888: LD_INT 2
58890: ARRAY
58891: PUSH
58892: LD_INT 8
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PPUSH
58909: CALL_OW 72
58913: ST_TO_ADDR
// if not vehicles then
58914: LD_VAR 0 1
58918: NOT
58919: IFFALSE 58923
// exit ;
58921: GO 58950
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58923: LD_VAR 0 1
58927: PPUSH
58928: LD_VAR 0 2
58932: PUSH
58933: LD_INT 1
58935: ARRAY
58936: PPUSH
58937: LD_VAR 0 2
58941: PUSH
58942: LD_INT 2
58944: ARRAY
58945: PPUSH
58946: CALL_OW 111
// end ;
58950: LD_VAR 0 3
58954: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58955: LD_INT 0
58957: PPUSH
58958: PPUSH
58959: PPUSH
// if not side or not area then
58960: LD_VAR 0 1
58964: NOT
58965: IFTRUE 58974
58967: PUSH
58968: LD_VAR 0 2
58972: NOT
58973: OR
58974: IFFALSE 58978
// exit ;
58976: GO 59097
// tmp := AreaToList ( area , 0 ) ;
58978: LD_ADDR_VAR 0 5
58982: PUSH
58983: LD_VAR 0 2
58987: PPUSH
58988: LD_INT 0
58990: PPUSH
58991: CALL_OW 517
58995: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58996: LD_ADDR_VAR 0 4
59000: PUSH
59001: DOUBLE
59002: LD_INT 1
59004: DEC
59005: ST_TO_ADDR
59006: LD_VAR 0 5
59010: PUSH
59011: LD_INT 1
59013: ARRAY
59014: PUSH
59015: FOR_TO
59016: IFFALSE 59095
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59018: LD_VAR 0 5
59022: PUSH
59023: LD_INT 1
59025: ARRAY
59026: PUSH
59027: LD_VAR 0 4
59031: ARRAY
59032: PPUSH
59033: LD_VAR 0 5
59037: PUSH
59038: LD_INT 2
59040: ARRAY
59041: PUSH
59042: LD_VAR 0 4
59046: ARRAY
59047: PPUSH
59048: CALL_OW 351
59052: IFFALSE 59093
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59054: LD_VAR 0 5
59058: PUSH
59059: LD_INT 1
59061: ARRAY
59062: PUSH
59063: LD_VAR 0 4
59067: ARRAY
59068: PPUSH
59069: LD_VAR 0 5
59073: PUSH
59074: LD_INT 2
59076: ARRAY
59077: PUSH
59078: LD_VAR 0 4
59082: ARRAY
59083: PPUSH
59084: LD_VAR 0 1
59088: PPUSH
59089: CALL_OW 244
// end ;
59093: GO 59015
59095: POP
59096: POP
// end ;
59097: LD_VAR 0 3
59101: RET
// export function UniqueArray ( array ) ; var i ; begin
59102: LD_INT 0
59104: PPUSH
59105: PPUSH
// result := [ ] ;
59106: LD_ADDR_VAR 0 2
59110: PUSH
59111: EMPTY
59112: ST_TO_ADDR
// if not array then
59113: LD_VAR 0 1
59117: NOT
59118: IFFALSE 59122
// exit ;
59120: GO 59183
// for i := 1 to array do
59122: LD_ADDR_VAR 0 3
59126: PUSH
59127: DOUBLE
59128: LD_INT 1
59130: DEC
59131: ST_TO_ADDR
59132: LD_VAR 0 1
59136: PUSH
59137: FOR_TO
59138: IFFALSE 59181
// if not array [ i ] in result then
59140: LD_VAR 0 1
59144: PUSH
59145: LD_VAR 0 3
59149: ARRAY
59150: PUSH
59151: LD_VAR 0 2
59155: IN
59156: NOT
59157: IFFALSE 59179
// result := Join ( result , i ) ;
59159: LD_ADDR_VAR 0 2
59163: PUSH
59164: LD_VAR 0 2
59168: PPUSH
59169: LD_VAR 0 3
59173: PPUSH
59174: CALL 53834 0 2
59178: ST_TO_ADDR
59179: GO 59137
59181: POP
59182: POP
// end ; end_of_file
59183: LD_VAR 0 2
59187: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59188: LD_INT 0
59190: PPUSH
// ComRadiation ( un ) ;
59191: LD_VAR 0 1
59195: PPUSH
59196: CALL 60277 0 1
// end ;
59200: LD_VAR 0 2
59204: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59205: LD_INT 0
59207: PPUSH
// ComRadiation ( un ) ;
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL 60277 0 1
// end ;
59217: LD_VAR 0 2
59221: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59222: LD_INT 0
59224: PPUSH
// end ;
59225: LD_VAR 0 4
59229: RET
// export function SOS_Command ( cmd ) ; begin
59230: LD_INT 0
59232: PPUSH
// end ;
59233: LD_VAR 0 2
59237: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59238: LD_INT 0
59240: PPUSH
// end ;
59241: LD_VAR 0 6
59245: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
59246: LD_INT 0
59248: PPUSH
59249: PPUSH
59250: PPUSH
59251: PPUSH
// if not vehicle or not factory then
59252: LD_VAR 0 1
59256: NOT
59257: IFTRUE 59266
59259: PUSH
59260: LD_VAR 0 2
59264: NOT
59265: OR
59266: IFFALSE 59270
// exit ;
59268: GO 59852
// if not factoryWaypoints then
59270: LD_EXP 57
59274: NOT
59275: IFFALSE 59279
// exit ;
59277: GO 59852
// for i := 1 to Count ( factoryWaypoints ) do
59279: LD_ADDR_VAR 0 4
59283: PUSH
59284: DOUBLE
59285: LD_INT 1
59287: DEC
59288: ST_TO_ADDR
59289: LD_EXP 57
59293: PPUSH
59294: CALL 17902 0 1
59298: PUSH
59299: FOR_TO
59300: IFFALSE 59850
// if factoryWaypoints [ i ] [ 2 ] = factory then
59302: LD_EXP 57
59306: PUSH
59307: LD_VAR 0 4
59311: ARRAY
59312: PUSH
59313: LD_INT 2
59315: ARRAY
59316: PUSH
59317: LD_VAR 0 2
59321: EQUAL
59322: IFFALSE 59848
// begin if GetControl ( vehicle ) = control_manual then
59324: LD_VAR 0 1
59328: PPUSH
59329: CALL_OW 263
59333: PUSH
59334: LD_INT 1
59336: EQUAL
59337: IFFALSE 59701
// begin driver := IsDrivenBy ( vehicle ) ;
59339: LD_ADDR_VAR 0 5
59343: PUSH
59344: LD_VAR 0 1
59348: PPUSH
59349: CALL_OW 311
59353: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59354: LD_VAR 0 5
59358: PUSH
59359: LD_EXP 58
59363: IN
59364: IFTRUE 59378
59366: PUSH
59367: LD_VAR 0 1
59371: PUSH
59372: LD_EXP 58
59376: IN
59377: OR
59378: IFFALSE 59384
// exit ;
59380: POP
59381: POP
59382: GO 59852
// if not HasTask ( driver ) then
59384: LD_VAR 0 5
59388: PPUSH
59389: CALL_OW 314
59393: NOT
59394: IFFALSE 59699
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59396: LD_ADDR_EXP 58
59400: PUSH
59401: LD_EXP 58
59405: PPUSH
59406: LD_VAR 0 5
59410: PPUSH
59411: CALL 53834 0 2
59415: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59416: LD_ADDR_EXP 58
59420: PUSH
59421: LD_EXP 58
59425: PPUSH
59426: LD_VAR 0 1
59430: PPUSH
59431: CALL 53834 0 2
59435: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59436: LD_ADDR_VAR 0 6
59440: PUSH
59441: LD_EXP 57
59445: PUSH
59446: LD_VAR 0 4
59450: ARRAY
59451: PUSH
59452: LD_INT 3
59454: ARRAY
59455: PPUSH
59456: LD_EXP 57
59460: PUSH
59461: LD_VAR 0 4
59465: ARRAY
59466: PUSH
59467: LD_INT 4
59469: ARRAY
59470: PPUSH
59471: CALL_OW 428
59475: ST_TO_ADDR
// if hex then
59476: LD_VAR 0 6
59480: IFFALSE 59498
// ComMoveUnit ( driver , hex ) else
59482: LD_VAR 0 5
59486: PPUSH
59487: LD_VAR 0 6
59491: PPUSH
59492: CALL_OW 112
59496: GO 59582
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59498: LD_VAR 0 1
59502: PPUSH
59503: LD_EXP 57
59507: PUSH
59508: LD_VAR 0 4
59512: ARRAY
59513: PUSH
59514: LD_INT 3
59516: ARRAY
59517: PPUSH
59518: LD_EXP 57
59522: PUSH
59523: LD_VAR 0 4
59527: ARRAY
59528: PUSH
59529: LD_INT 4
59531: ARRAY
59532: PPUSH
59533: CALL_OW 297
59537: PUSH
59538: LD_INT 0
59540: GREATER
59541: IFFALSE 59582
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59543: LD_VAR 0 5
59547: PPUSH
59548: LD_EXP 57
59552: PUSH
59553: LD_VAR 0 4
59557: ARRAY
59558: PUSH
59559: LD_INT 3
59561: ARRAY
59562: PPUSH
59563: LD_EXP 57
59567: PUSH
59568: LD_VAR 0 4
59572: ARRAY
59573: PUSH
59574: LD_INT 4
59576: ARRAY
59577: PPUSH
59578: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59582: LD_VAR 0 5
59586: PPUSH
59587: CALL_OW 181
// if Multiplayer then
59591: LD_OWVAR 4
59595: IFFALSE 59644
// begin repeat wait ( 10 ) ;
59597: LD_INT 10
59599: PPUSH
59600: CALL_OW 67
// until not IsInUnit ( driver ) ;
59604: LD_VAR 0 5
59608: PPUSH
59609: CALL_OW 310
59613: NOT
59614: IFFALSE 59597
// if not HasTask ( driver ) then
59616: LD_VAR 0 5
59620: PPUSH
59621: CALL_OW 314
59625: NOT
59626: IFFALSE 59642
// ComEnterUnit ( driver , factory ) ;
59628: LD_VAR 0 5
59632: PPUSH
59633: LD_VAR 0 2
59637: PPUSH
59638: CALL_OW 120
// end else
59642: GO 59658
// AddComEnterUnit ( driver , factory ) ;
59644: LD_VAR 0 5
59648: PPUSH
59649: LD_VAR 0 2
59653: PPUSH
59654: CALL_OW 180
// wait ( 0 0$1 ) ;
59658: LD_INT 35
59660: PPUSH
59661: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59665: LD_ADDR_EXP 58
59669: PUSH
59670: LD_EXP 58
59674: PUSH
59675: LD_VAR 0 5
59679: DIFF
59680: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59681: LD_ADDR_EXP 58
59685: PUSH
59686: LD_EXP 58
59690: PUSH
59691: LD_VAR 0 1
59695: DIFF
59696: ST_TO_ADDR
// break ;
59697: GO 59850
// end ; end else
59699: GO 59848
// if GetControl ( vehicle ) = control_remote then
59701: LD_VAR 0 1
59705: PPUSH
59706: CALL_OW 263
59710: PUSH
59711: LD_INT 2
59713: EQUAL
59714: IFFALSE 59800
// begin wait ( 0 0$2 ) ;
59716: LD_INT 70
59718: PPUSH
59719: CALL_OW 67
// repeat wait ( 10 ) ;
59723: LD_INT 10
59725: PPUSH
59726: CALL_OW 67
// Connect ( vehicle ) ;
59730: LD_VAR 0 1
59734: PPUSH
59735: CALL 24146 0 1
// until IsControledBy ( vehicle ) ;
59739: LD_VAR 0 1
59743: PPUSH
59744: CALL_OW 312
59748: IFFALSE 59723
// wait ( 10 ) ;
59750: LD_INT 10
59752: PPUSH
59753: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59757: LD_VAR 0 1
59761: PPUSH
59762: LD_EXP 57
59766: PUSH
59767: LD_VAR 0 4
59771: ARRAY
59772: PUSH
59773: LD_INT 3
59775: ARRAY
59776: PPUSH
59777: LD_EXP 57
59781: PUSH
59782: LD_VAR 0 4
59786: ARRAY
59787: PUSH
59788: LD_INT 4
59790: ARRAY
59791: PPUSH
59792: CALL_OW 111
// break ;
59796: GO 59850
// end else
59798: GO 59848
// begin wait ( 0 0$3 ) ;
59800: LD_INT 105
59802: PPUSH
59803: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59807: LD_VAR 0 1
59811: PPUSH
59812: LD_EXP 57
59816: PUSH
59817: LD_VAR 0 4
59821: ARRAY
59822: PUSH
59823: LD_INT 3
59825: ARRAY
59826: PPUSH
59827: LD_EXP 57
59831: PUSH
59832: LD_VAR 0 4
59836: ARRAY
59837: PUSH
59838: LD_INT 4
59840: ARRAY
59841: PPUSH
59842: CALL_OW 111
// break ;
59846: GO 59850
// end ; end ;
59848: GO 59299
59850: POP
59851: POP
// end ;
59852: LD_VAR 0 3
59856: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59857: LD_INT 0
59859: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59860: LD_VAR 0 1
59864: PUSH
59865: LD_INT 250
59867: EQUAL
59868: IFFALSE 59885
59870: PUSH
59871: LD_VAR 0 2
59875: PPUSH
59876: CALL_OW 264
59880: PUSH
59881: LD_INT 81
59883: EQUAL
59884: AND
59885: IFFALSE 59906
// MinerPlaceMine ( unit , x , y ) ;
59887: LD_VAR 0 2
59891: PPUSH
59892: LD_VAR 0 4
59896: PPUSH
59897: LD_VAR 0 5
59901: PPUSH
59902: CALL 63038 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59906: LD_VAR 0 1
59910: PUSH
59911: LD_INT 251
59913: EQUAL
59914: IFFALSE 59931
59916: PUSH
59917: LD_VAR 0 2
59921: PPUSH
59922: CALL_OW 264
59926: PUSH
59927: LD_INT 81
59929: EQUAL
59930: AND
59931: IFFALSE 59952
// MinerDetonateMine ( unit , x , y ) ;
59933: LD_VAR 0 2
59937: PPUSH
59938: LD_VAR 0 4
59942: PPUSH
59943: LD_VAR 0 5
59947: PPUSH
59948: CALL 63317 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59952: LD_VAR 0 1
59956: PUSH
59957: LD_INT 252
59959: EQUAL
59960: IFFALSE 59977
59962: PUSH
59963: LD_VAR 0 2
59967: PPUSH
59968: CALL_OW 264
59972: PUSH
59973: LD_INT 81
59975: EQUAL
59976: AND
59977: IFFALSE 59998
// MinerCreateMinefield ( unit , x , y ) ;
59979: LD_VAR 0 2
59983: PPUSH
59984: LD_VAR 0 4
59988: PPUSH
59989: LD_VAR 0 5
59993: PPUSH
59994: CALL 63736 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59998: LD_VAR 0 1
60002: PUSH
60003: LD_INT 253
60005: EQUAL
60006: IFFALSE 60023
60008: PUSH
60009: LD_VAR 0 2
60013: PPUSH
60014: CALL_OW 257
60018: PUSH
60019: LD_INT 5
60021: EQUAL
60022: AND
60023: IFFALSE 60044
// ComBinocular ( unit , x , y ) ;
60025: LD_VAR 0 2
60029: PPUSH
60030: LD_VAR 0 4
60034: PPUSH
60035: LD_VAR 0 5
60039: PPUSH
60040: CALL 64111 0 3
// if selectedUnit then
60044: LD_VAR 0 3
60048: IFFALSE 60108
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60050: LD_VAR 0 1
60054: PUSH
60055: LD_INT 254
60057: EQUAL
60058: IFFALSE 60075
60060: PUSH
60061: LD_VAR 0 2
60065: PPUSH
60066: CALL_OW 264
60070: PUSH
60071: LD_INT 99
60073: EQUAL
60074: AND
60075: IFFALSE 60092
60077: PUSH
60078: LD_VAR 0 3
60082: PPUSH
60083: CALL_OW 263
60087: PUSH
60088: LD_INT 3
60090: EQUAL
60091: AND
60092: IFFALSE 60108
// HackDestroyVehicle ( unit , selectedUnit ) ;
60094: LD_VAR 0 2
60098: PPUSH
60099: LD_VAR 0 3
60103: PPUSH
60104: CALL 62398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60108: LD_VAR 0 1
60112: PUSH
60113: LD_INT 255
60115: EQUAL
60116: IFFALSE 60140
60118: PUSH
60119: LD_VAR 0 2
60123: PPUSH
60124: CALL_OW 264
60128: PUSH
60129: LD_INT 14
60131: PUSH
60132: LD_INT 53
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: IN
60139: AND
60140: IFFALSE 60158
60142: PUSH
60143: LD_VAR 0 4
60147: PPUSH
60148: LD_VAR 0 5
60152: PPUSH
60153: CALL_OW 488
60157: AND
60158: IFFALSE 60182
// CutTreeXYR ( unit , x , y , 12 ) ;
60160: LD_VAR 0 2
60164: PPUSH
60165: LD_VAR 0 4
60169: PPUSH
60170: LD_VAR 0 5
60174: PPUSH
60175: LD_INT 12
60177: PPUSH
60178: CALL 60373 0 4
// if cmd = 256 then
60182: LD_VAR 0 1
60186: PUSH
60187: LD_INT 256
60189: EQUAL
60190: IFFALSE 60211
// SetFactoryWaypoint ( unit , x , y ) ;
60192: LD_VAR 0 2
60196: PPUSH
60197: LD_VAR 0 4
60201: PPUSH
60202: LD_VAR 0 5
60206: PPUSH
60207: CALL 65270 0 3
// if cmd = 257 then
60211: LD_VAR 0 1
60215: PUSH
60216: LD_INT 257
60218: EQUAL
60219: IFFALSE 60240
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60221: LD_VAR 0 2
60225: PPUSH
60226: LD_VAR 0 4
60230: PPUSH
60231: LD_VAR 0 5
60235: PPUSH
60236: CALL 65766 0 3
// if cmd = 258 then
60240: LD_VAR 0 1
60244: PUSH
60245: LD_INT 258
60247: EQUAL
60248: IFFALSE 60272
// BurnTreeXYR ( unit , x , y , 8 ) ;
60250: LD_VAR 0 2
60254: PPUSH
60255: LD_VAR 0 4
60259: PPUSH
60260: LD_VAR 0 5
60264: PPUSH
60265: LD_INT 8
60267: PPUSH
60268: CALL 60773 0 4
// end ;
60272: LD_VAR 0 6
60276: RET
// export function ComRadiation ( un ) ; var eff ; begin
60277: LD_INT 0
60279: PPUSH
60280: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60281: LD_VAR 0 1
60285: PPUSH
60286: CALL_OW 264
60290: PUSH
60291: LD_INT 91
60293: NONEQUAL
60294: IFFALSE 60298
// exit ;
60296: GO 60368
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60298: LD_INT 68
60300: PPUSH
60301: LD_VAR 0 1
60305: PPUSH
60306: CALL_OW 255
60310: PPUSH
60311: CALL_OW 321
60315: PUSH
60316: LD_INT 2
60318: EQUAL
60319: IFFALSE 60331
// eff := 50 else
60321: LD_ADDR_VAR 0 3
60325: PUSH
60326: LD_INT 50
60328: ST_TO_ADDR
60329: GO 60339
// eff := 25 ;
60331: LD_ADDR_VAR 0 3
60335: PUSH
60336: LD_INT 25
60338: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60339: LD_VAR 0 1
60343: PPUSH
60344: CALL_OW 250
60348: PPUSH
60349: LD_VAR 0 1
60353: PPUSH
60354: CALL_OW 251
60358: PPUSH
60359: LD_VAR 0 3
60363: PPUSH
60364: CALL_OW 495
// end ;
60368: LD_VAR 0 2
60372: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60373: LD_INT 0
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
60379: PPUSH
60380: PPUSH
60381: PPUSH
60382: PPUSH
60383: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60384: LD_VAR 0 1
60388: PPUSH
60389: CALL_OW 302
60393: NOT
60394: IFTRUE 60413
60396: PUSH
60397: LD_VAR 0 2
60401: PPUSH
60402: LD_VAR 0 3
60406: PPUSH
60407: CALL_OW 488
60411: NOT
60412: OR
60413: IFTRUE 60422
60415: PUSH
60416: LD_VAR 0 4
60420: NOT
60421: OR
60422: IFFALSE 60426
// exit ;
60424: GO 60768
// list := [ ] ;
60426: LD_ADDR_VAR 0 13
60430: PUSH
60431: EMPTY
60432: ST_TO_ADDR
// if x - r < 0 then
60433: LD_VAR 0 2
60437: PUSH
60438: LD_VAR 0 4
60442: MINUS
60443: PUSH
60444: LD_INT 0
60446: LESS
60447: IFFALSE 60459
// min_x := 0 else
60449: LD_ADDR_VAR 0 7
60453: PUSH
60454: LD_INT 0
60456: ST_TO_ADDR
60457: GO 60475
// min_x := x - r ;
60459: LD_ADDR_VAR 0 7
60463: PUSH
60464: LD_VAR 0 2
60468: PUSH
60469: LD_VAR 0 4
60473: MINUS
60474: ST_TO_ADDR
// if y - r < 0 then
60475: LD_VAR 0 3
60479: PUSH
60480: LD_VAR 0 4
60484: MINUS
60485: PUSH
60486: LD_INT 0
60488: LESS
60489: IFFALSE 60501
// min_y := 0 else
60491: LD_ADDR_VAR 0 8
60495: PUSH
60496: LD_INT 0
60498: ST_TO_ADDR
60499: GO 60517
// min_y := y - r ;
60501: LD_ADDR_VAR 0 8
60505: PUSH
60506: LD_VAR 0 3
60510: PUSH
60511: LD_VAR 0 4
60515: MINUS
60516: ST_TO_ADDR
// max_x := x + r ;
60517: LD_ADDR_VAR 0 9
60521: PUSH
60522: LD_VAR 0 2
60526: PUSH
60527: LD_VAR 0 4
60531: PLUS
60532: ST_TO_ADDR
// max_y := y + r ;
60533: LD_ADDR_VAR 0 10
60537: PUSH
60538: LD_VAR 0 3
60542: PUSH
60543: LD_VAR 0 4
60547: PLUS
60548: ST_TO_ADDR
// for _x = min_x to max_x do
60549: LD_ADDR_VAR 0 11
60553: PUSH
60554: DOUBLE
60555: LD_VAR 0 7
60559: DEC
60560: ST_TO_ADDR
60561: LD_VAR 0 9
60565: PUSH
60566: FOR_TO
60567: IFFALSE 60686
// for _y = min_y to max_y do
60569: LD_ADDR_VAR 0 12
60573: PUSH
60574: DOUBLE
60575: LD_VAR 0 8
60579: DEC
60580: ST_TO_ADDR
60581: LD_VAR 0 10
60585: PUSH
60586: FOR_TO
60587: IFFALSE 60682
// begin if not ValidHex ( _x , _y ) then
60589: LD_VAR 0 11
60593: PPUSH
60594: LD_VAR 0 12
60598: PPUSH
60599: CALL_OW 488
60603: NOT
60604: IFFALSE 60608
// continue ;
60606: GO 60586
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60608: LD_VAR 0 11
60612: PPUSH
60613: LD_VAR 0 12
60617: PPUSH
60618: CALL_OW 351
60622: IFFALSE 60640
60624: PUSH
60625: LD_VAR 0 11
60629: PPUSH
60630: LD_VAR 0 12
60634: PPUSH
60635: CALL_OW 554
60639: AND
60640: IFFALSE 60680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60642: LD_ADDR_VAR 0 13
60646: PUSH
60647: LD_VAR 0 13
60651: PPUSH
60652: LD_VAR 0 13
60656: PUSH
60657: LD_INT 1
60659: PLUS
60660: PPUSH
60661: LD_VAR 0 11
60665: PUSH
60666: LD_VAR 0 12
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PPUSH
60675: CALL_OW 2
60679: ST_TO_ADDR
// end ;
60680: GO 60586
60682: POP
60683: POP
60684: GO 60566
60686: POP
60687: POP
// if not list then
60688: LD_VAR 0 13
60692: NOT
60693: IFFALSE 60697
// exit ;
60695: GO 60768
// for i in list do
60697: LD_ADDR_VAR 0 6
60701: PUSH
60702: LD_VAR 0 13
60706: PUSH
60707: FOR_IN
60708: IFFALSE 60766
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60710: LD_VAR 0 1
60714: PPUSH
60715: LD_STRING M
60717: PUSH
60718: LD_VAR 0 6
60722: PUSH
60723: LD_INT 1
60725: ARRAY
60726: PUSH
60727: LD_VAR 0 6
60731: PUSH
60732: LD_INT 2
60734: ARRAY
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: PUSH
60757: EMPTY
60758: LIST
60759: PPUSH
60760: CALL_OW 447
60764: GO 60707
60766: POP
60767: POP
// end ;
60768: LD_VAR 0 5
60772: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60773: LD_INT 0
60775: PPUSH
60776: PPUSH
60777: PPUSH
60778: PPUSH
60779: PPUSH
60780: PPUSH
60781: PPUSH
60782: PPUSH
60783: PPUSH
60784: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60785: LD_VAR 0 1
60789: PPUSH
60790: CALL_OW 302
60794: NOT
60795: IFTRUE 60814
60797: PUSH
60798: LD_VAR 0 2
60802: PPUSH
60803: LD_VAR 0 3
60807: PPUSH
60808: CALL_OW 488
60812: NOT
60813: OR
60814: IFTRUE 60823
60816: PUSH
60817: LD_VAR 0 4
60821: NOT
60822: OR
60823: IFFALSE 60827
// exit ;
60825: GO 61344
// list := [ ] ;
60827: LD_ADDR_VAR 0 13
60831: PUSH
60832: EMPTY
60833: ST_TO_ADDR
// if x - r < 0 then
60834: LD_VAR 0 2
60838: PUSH
60839: LD_VAR 0 4
60843: MINUS
60844: PUSH
60845: LD_INT 0
60847: LESS
60848: IFFALSE 60860
// min_x := 0 else
60850: LD_ADDR_VAR 0 7
60854: PUSH
60855: LD_INT 0
60857: ST_TO_ADDR
60858: GO 60876
// min_x := x - r ;
60860: LD_ADDR_VAR 0 7
60864: PUSH
60865: LD_VAR 0 2
60869: PUSH
60870: LD_VAR 0 4
60874: MINUS
60875: ST_TO_ADDR
// if y - r < 0 then
60876: LD_VAR 0 3
60880: PUSH
60881: LD_VAR 0 4
60885: MINUS
60886: PUSH
60887: LD_INT 0
60889: LESS
60890: IFFALSE 60902
// min_y := 0 else
60892: LD_ADDR_VAR 0 8
60896: PUSH
60897: LD_INT 0
60899: ST_TO_ADDR
60900: GO 60918
// min_y := y - r ;
60902: LD_ADDR_VAR 0 8
60906: PUSH
60907: LD_VAR 0 3
60911: PUSH
60912: LD_VAR 0 4
60916: MINUS
60917: ST_TO_ADDR
// max_x := x + r ;
60918: LD_ADDR_VAR 0 9
60922: PUSH
60923: LD_VAR 0 2
60927: PUSH
60928: LD_VAR 0 4
60932: PLUS
60933: ST_TO_ADDR
// max_y := y + r ;
60934: LD_ADDR_VAR 0 10
60938: PUSH
60939: LD_VAR 0 3
60943: PUSH
60944: LD_VAR 0 4
60948: PLUS
60949: ST_TO_ADDR
// for _x = min_x to max_x do
60950: LD_ADDR_VAR 0 11
60954: PUSH
60955: DOUBLE
60956: LD_VAR 0 7
60960: DEC
60961: ST_TO_ADDR
60962: LD_VAR 0 9
60966: PUSH
60967: FOR_TO
60968: IFFALSE 61087
// for _y = min_y to max_y do
60970: LD_ADDR_VAR 0 12
60974: PUSH
60975: DOUBLE
60976: LD_VAR 0 8
60980: DEC
60981: ST_TO_ADDR
60982: LD_VAR 0 10
60986: PUSH
60987: FOR_TO
60988: IFFALSE 61083
// begin if not ValidHex ( _x , _y ) then
60990: LD_VAR 0 11
60994: PPUSH
60995: LD_VAR 0 12
60999: PPUSH
61000: CALL_OW 488
61004: NOT
61005: IFFALSE 61009
// continue ;
61007: GO 60987
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61009: LD_VAR 0 11
61013: PPUSH
61014: LD_VAR 0 12
61018: PPUSH
61019: CALL_OW 351
61023: IFFALSE 61041
61025: PUSH
61026: LD_VAR 0 11
61030: PPUSH
61031: LD_VAR 0 12
61035: PPUSH
61036: CALL_OW 554
61040: AND
61041: IFFALSE 61081
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61043: LD_ADDR_VAR 0 13
61047: PUSH
61048: LD_VAR 0 13
61052: PPUSH
61053: LD_VAR 0 13
61057: PUSH
61058: LD_INT 1
61060: PLUS
61061: PPUSH
61062: LD_VAR 0 11
61066: PUSH
61067: LD_VAR 0 12
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PPUSH
61076: CALL_OW 2
61080: ST_TO_ADDR
// end ;
61081: GO 60987
61083: POP
61084: POP
61085: GO 60967
61087: POP
61088: POP
// if not list then
61089: LD_VAR 0 13
61093: NOT
61094: IFFALSE 61098
// exit ;
61096: GO 61344
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61098: LD_ADDR_VAR 0 13
61102: PUSH
61103: LD_VAR 0 1
61107: PPUSH
61108: LD_VAR 0 13
61112: PPUSH
61113: LD_INT 1
61115: PPUSH
61116: LD_INT 1
61118: PPUSH
61119: CALL 21274 0 4
61123: ST_TO_ADDR
// ComStop ( flame ) ;
61124: LD_VAR 0 1
61128: PPUSH
61129: CALL_OW 141
// for i in list do
61133: LD_ADDR_VAR 0 6
61137: PUSH
61138: LD_VAR 0 13
61142: PUSH
61143: FOR_IN
61144: IFFALSE 61175
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61146: LD_VAR 0 1
61150: PPUSH
61151: LD_VAR 0 6
61155: PUSH
61156: LD_INT 1
61158: ARRAY
61159: PPUSH
61160: LD_VAR 0 6
61164: PUSH
61165: LD_INT 2
61167: ARRAY
61168: PPUSH
61169: CALL_OW 176
61173: GO 61143
61175: POP
61176: POP
// repeat wait ( 0 0$1 ) ;
61177: LD_INT 35
61179: PPUSH
61180: CALL_OW 67
// task := GetTaskList ( flame ) ;
61184: LD_ADDR_VAR 0 14
61188: PUSH
61189: LD_VAR 0 1
61193: PPUSH
61194: CALL_OW 437
61198: ST_TO_ADDR
// if not task then
61199: LD_VAR 0 14
61203: NOT
61204: IFFALSE 61208
// exit ;
61206: GO 61344
// if task [ 1 ] [ 1 ] <> | then
61208: LD_VAR 0 14
61212: PUSH
61213: LD_INT 1
61215: ARRAY
61216: PUSH
61217: LD_INT 1
61219: ARRAY
61220: PUSH
61221: LD_STRING |
61223: NONEQUAL
61224: IFFALSE 61228
// exit ;
61226: GO 61344
// _x := task [ 1 ] [ 2 ] ;
61228: LD_ADDR_VAR 0 11
61232: PUSH
61233: LD_VAR 0 14
61237: PUSH
61238: LD_INT 1
61240: ARRAY
61241: PUSH
61242: LD_INT 2
61244: ARRAY
61245: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61246: LD_ADDR_VAR 0 12
61250: PUSH
61251: LD_VAR 0 14
61255: PUSH
61256: LD_INT 1
61258: ARRAY
61259: PUSH
61260: LD_INT 3
61262: ARRAY
61263: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61264: LD_VAR 0 11
61268: PPUSH
61269: LD_VAR 0 12
61273: PPUSH
61274: CALL_OW 351
61278: NOT
61279: IFTRUE 61298
61281: PUSH
61282: LD_VAR 0 11
61286: PPUSH
61287: LD_VAR 0 12
61291: PPUSH
61292: CALL_OW 554
61296: NOT
61297: OR
61298: IFFALSE 61332
// begin task := Delete ( task , 1 ) ;
61300: LD_ADDR_VAR 0 14
61304: PUSH
61305: LD_VAR 0 14
61309: PPUSH
61310: LD_INT 1
61312: PPUSH
61313: CALL_OW 3
61317: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61318: LD_VAR 0 1
61322: PPUSH
61323: LD_VAR 0 14
61327: PPUSH
61328: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61332: LD_VAR 0 1
61336: PPUSH
61337: CALL_OW 314
61341: NOT
61342: IFFALSE 61177
// end ;
61344: LD_VAR 0 5
61348: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61349: LD_EXP 47
61353: NOT
61354: IFFALSE 61404
61356: GO 61358
61358: DISABLE
// begin initHack := true ;
61359: LD_ADDR_EXP 47
61363: PUSH
61364: LD_INT 1
61366: ST_TO_ADDR
// hackTanks := [ ] ;
61367: LD_ADDR_EXP 48
61371: PUSH
61372: EMPTY
61373: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61374: LD_ADDR_EXP 49
61378: PUSH
61379: EMPTY
61380: ST_TO_ADDR
// hackLimit := 3 ;
61381: LD_ADDR_EXP 50
61385: PUSH
61386: LD_INT 3
61388: ST_TO_ADDR
// hackDist := 12 ;
61389: LD_ADDR_EXP 51
61393: PUSH
61394: LD_INT 12
61396: ST_TO_ADDR
// hackCounter := [ ] ;
61397: LD_ADDR_EXP 52
61401: PUSH
61402: EMPTY
61403: ST_TO_ADDR
// end ;
61404: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61405: LD_EXP 47
61409: IFFALSE 61427
61411: PUSH
61412: LD_INT 34
61414: PUSH
61415: LD_INT 99
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PPUSH
61422: CALL_OW 69
61426: AND
61427: IFFALSE 61680
61429: GO 61431
61431: DISABLE
61432: LD_INT 0
61434: PPUSH
61435: PPUSH
// begin enable ;
61436: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61437: LD_ADDR_VAR 0 1
61441: PUSH
61442: LD_INT 34
61444: PUSH
61445: LD_INT 99
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PPUSH
61452: CALL_OW 69
61456: PUSH
61457: FOR_IN
61458: IFFALSE 61678
// begin if not i in hackTanks then
61460: LD_VAR 0 1
61464: PUSH
61465: LD_EXP 48
61469: IN
61470: NOT
61471: IFFALSE 61554
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61473: LD_ADDR_EXP 48
61477: PUSH
61478: LD_EXP 48
61482: PPUSH
61483: LD_EXP 48
61487: PUSH
61488: LD_INT 1
61490: PLUS
61491: PPUSH
61492: LD_VAR 0 1
61496: PPUSH
61497: CALL_OW 1
61501: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61502: LD_ADDR_EXP 49
61506: PUSH
61507: LD_EXP 49
61511: PPUSH
61512: LD_EXP 49
61516: PUSH
61517: LD_INT 1
61519: PLUS
61520: PPUSH
61521: EMPTY
61522: PPUSH
61523: CALL_OW 1
61527: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61528: LD_ADDR_EXP 52
61532: PUSH
61533: LD_EXP 52
61537: PPUSH
61538: LD_EXP 52
61542: PUSH
61543: LD_INT 1
61545: PLUS
61546: PPUSH
61547: EMPTY
61548: PPUSH
61549: CALL_OW 1
61553: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61554: LD_VAR 0 1
61558: PPUSH
61559: CALL_OW 302
61563: NOT
61564: IFFALSE 61577
// begin HackUnlinkAll ( i ) ;
61566: LD_VAR 0 1
61570: PPUSH
61571: CALL 61683 0 1
// continue ;
61575: GO 61457
// end ; HackCheckCapturedStatus ( i ) ;
61577: LD_VAR 0 1
61581: PPUSH
61582: CALL 62128 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61586: LD_ADDR_VAR 0 2
61590: PUSH
61591: LD_INT 81
61593: PUSH
61594: LD_VAR 0 1
61598: PPUSH
61599: CALL_OW 255
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 33
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 91
61620: PUSH
61621: LD_VAR 0 1
61625: PUSH
61626: LD_EXP 51
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 50
61638: PUSH
61639: EMPTY
61640: LIST
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: PPUSH
61648: CALL_OW 69
61652: ST_TO_ADDR
// if not tmp then
61653: LD_VAR 0 2
61657: NOT
61658: IFFALSE 61662
// continue ;
61660: GO 61457
// HackLink ( i , tmp ) ;
61662: LD_VAR 0 1
61666: PPUSH
61667: LD_VAR 0 2
61671: PPUSH
61672: CALL 61819 0 2
// end ;
61676: GO 61457
61678: POP
61679: POP
// end ;
61680: PPOPN 2
61682: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61683: LD_INT 0
61685: PPUSH
61686: PPUSH
61687: PPUSH
// if not hack in hackTanks then
61688: LD_VAR 0 1
61692: PUSH
61693: LD_EXP 48
61697: IN
61698: NOT
61699: IFFALSE 61703
// exit ;
61701: GO 61814
// index := GetElementIndex ( hackTanks , hack ) ;
61703: LD_ADDR_VAR 0 4
61707: PUSH
61708: LD_EXP 48
61712: PPUSH
61713: LD_VAR 0 1
61717: PPUSH
61718: CALL 20569 0 2
61722: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61723: LD_EXP 49
61727: PUSH
61728: LD_VAR 0 4
61732: ARRAY
61733: IFFALSE 61814
// begin for i in hackTanksCaptured [ index ] do
61735: LD_ADDR_VAR 0 3
61739: PUSH
61740: LD_EXP 49
61744: PUSH
61745: LD_VAR 0 4
61749: ARRAY
61750: PUSH
61751: FOR_IN
61752: IFFALSE 61778
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61754: LD_VAR 0 3
61758: PUSH
61759: LD_INT 1
61761: ARRAY
61762: PPUSH
61763: LD_VAR 0 3
61767: PUSH
61768: LD_INT 2
61770: ARRAY
61771: PPUSH
61772: CALL_OW 235
61776: GO 61751
61778: POP
61779: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61780: LD_ADDR_EXP 49
61784: PUSH
61785: LD_EXP 49
61789: PPUSH
61790: LD_VAR 0 4
61794: PPUSH
61795: EMPTY
61796: PPUSH
61797: CALL_OW 1
61801: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61802: LD_VAR 0 1
61806: PPUSH
61807: LD_INT 0
61809: PPUSH
61810: CALL_OW 505
// end ; end ;
61814: LD_VAR 0 2
61818: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61819: LD_INT 0
61821: PPUSH
61822: PPUSH
61823: PPUSH
// if not hack in hackTanks or not vehicles then
61824: LD_VAR 0 1
61828: PUSH
61829: LD_EXP 48
61833: IN
61834: NOT
61835: IFTRUE 61844
61837: PUSH
61838: LD_VAR 0 2
61842: NOT
61843: OR
61844: IFFALSE 61848
// exit ;
61846: GO 62123
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61848: LD_ADDR_VAR 0 2
61852: PUSH
61853: LD_VAR 0 1
61857: PPUSH
61858: LD_VAR 0 2
61862: PPUSH
61863: LD_INT 1
61865: PPUSH
61866: LD_INT 1
61868: PPUSH
61869: CALL 21221 0 4
61873: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61874: LD_ADDR_VAR 0 5
61878: PUSH
61879: LD_EXP 48
61883: PPUSH
61884: LD_VAR 0 1
61888: PPUSH
61889: CALL 20569 0 2
61893: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61894: LD_EXP 49
61898: PUSH
61899: LD_VAR 0 5
61903: ARRAY
61904: PUSH
61905: LD_EXP 50
61909: LESS
61910: IFFALSE 62099
// begin for i := 1 to vehicles do
61912: LD_ADDR_VAR 0 4
61916: PUSH
61917: DOUBLE
61918: LD_INT 1
61920: DEC
61921: ST_TO_ADDR
61922: LD_VAR 0 2
61926: PUSH
61927: FOR_TO
61928: IFFALSE 62097
// begin if hackTanksCaptured [ index ] = hackLimit then
61930: LD_EXP 49
61934: PUSH
61935: LD_VAR 0 5
61939: ARRAY
61940: PUSH
61941: LD_EXP 50
61945: EQUAL
61946: IFFALSE 61950
// break ;
61948: GO 62097
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61950: LD_ADDR_EXP 52
61954: PUSH
61955: LD_EXP 52
61959: PPUSH
61960: LD_VAR 0 5
61964: PPUSH
61965: LD_EXP 52
61969: PUSH
61970: LD_VAR 0 5
61974: ARRAY
61975: PUSH
61976: LD_INT 1
61978: PLUS
61979: PPUSH
61980: CALL_OW 1
61984: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61985: LD_ADDR_EXP 49
61989: PUSH
61990: LD_EXP 49
61994: PPUSH
61995: LD_VAR 0 5
61999: PUSH
62000: LD_EXP 49
62004: PUSH
62005: LD_VAR 0 5
62009: ARRAY
62010: PUSH
62011: LD_INT 1
62013: PLUS
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PPUSH
62019: LD_VAR 0 2
62023: PUSH
62024: LD_VAR 0 4
62028: ARRAY
62029: PUSH
62030: LD_VAR 0 2
62034: PUSH
62035: LD_VAR 0 4
62039: ARRAY
62040: PPUSH
62041: CALL_OW 255
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PPUSH
62050: CALL 20786 0 3
62054: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62055: LD_VAR 0 2
62059: PUSH
62060: LD_VAR 0 4
62064: ARRAY
62065: PPUSH
62066: LD_VAR 0 1
62070: PPUSH
62071: CALL_OW 255
62075: PPUSH
62076: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62080: LD_VAR 0 2
62084: PUSH
62085: LD_VAR 0 4
62089: ARRAY
62090: PPUSH
62091: CALL_OW 141
// end ;
62095: GO 61927
62097: POP
62098: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62099: LD_VAR 0 1
62103: PPUSH
62104: LD_EXP 49
62108: PUSH
62109: LD_VAR 0 5
62113: ARRAY
62114: PUSH
62115: LD_INT 0
62117: PLUS
62118: PPUSH
62119: CALL_OW 505
// end ;
62123: LD_VAR 0 3
62127: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62128: LD_INT 0
62130: PPUSH
62131: PPUSH
62132: PPUSH
62133: PPUSH
// if not hack in hackTanks then
62134: LD_VAR 0 1
62138: PUSH
62139: LD_EXP 48
62143: IN
62144: NOT
62145: IFFALSE 62149
// exit ;
62147: GO 62393
// index := GetElementIndex ( hackTanks , hack ) ;
62149: LD_ADDR_VAR 0 4
62153: PUSH
62154: LD_EXP 48
62158: PPUSH
62159: LD_VAR 0 1
62163: PPUSH
62164: CALL 20569 0 2
62168: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62169: LD_ADDR_VAR 0 3
62173: PUSH
62174: DOUBLE
62175: LD_EXP 49
62179: PUSH
62180: LD_VAR 0 4
62184: ARRAY
62185: INC
62186: ST_TO_ADDR
62187: LD_INT 1
62189: PUSH
62190: FOR_DOWNTO
62191: IFFALSE 62367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62193: LD_ADDR_VAR 0 5
62197: PUSH
62198: LD_EXP 49
62202: PUSH
62203: LD_VAR 0 4
62207: ARRAY
62208: PUSH
62209: LD_VAR 0 3
62213: ARRAY
62214: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62215: LD_VAR 0 5
62219: PUSH
62220: LD_INT 1
62222: ARRAY
62223: PPUSH
62224: CALL_OW 302
62228: NOT
62229: IFTRUE 62257
62231: PUSH
62232: LD_VAR 0 5
62236: PUSH
62237: LD_INT 1
62239: ARRAY
62240: PPUSH
62241: CALL_OW 255
62245: PUSH
62246: LD_VAR 0 1
62250: PPUSH
62251: CALL_OW 255
62255: NONEQUAL
62256: OR
62257: IFFALSE 62365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62259: LD_VAR 0 5
62263: PUSH
62264: LD_INT 1
62266: ARRAY
62267: PPUSH
62268: CALL_OW 305
62272: IFFALSE 62300
62274: PUSH
62275: LD_VAR 0 5
62279: PUSH
62280: LD_INT 1
62282: ARRAY
62283: PPUSH
62284: CALL_OW 255
62288: PUSH
62289: LD_VAR 0 1
62293: PPUSH
62294: CALL_OW 255
62298: EQUAL
62299: AND
62300: IFFALSE 62324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62302: LD_VAR 0 5
62306: PUSH
62307: LD_INT 1
62309: ARRAY
62310: PPUSH
62311: LD_VAR 0 5
62315: PUSH
62316: LD_INT 2
62318: ARRAY
62319: PPUSH
62320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62324: LD_ADDR_EXP 49
62328: PUSH
62329: LD_EXP 49
62333: PPUSH
62334: LD_VAR 0 4
62338: PPUSH
62339: LD_EXP 49
62343: PUSH
62344: LD_VAR 0 4
62348: ARRAY
62349: PPUSH
62350: LD_VAR 0 3
62354: PPUSH
62355: CALL_OW 3
62359: PPUSH
62360: CALL_OW 1
62364: ST_TO_ADDR
// end ; end ;
62365: GO 62190
62367: POP
62368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62369: LD_VAR 0 1
62373: PPUSH
62374: LD_EXP 49
62378: PUSH
62379: LD_VAR 0 4
62383: ARRAY
62384: PUSH
62385: LD_INT 0
62387: PLUS
62388: PPUSH
62389: CALL_OW 505
// end ;
62393: LD_VAR 0 2
62397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62398: LD_INT 0
62400: PPUSH
62401: PPUSH
62402: PPUSH
62403: PPUSH
// if not hack in hackTanks then
62404: LD_VAR 0 1
62408: PUSH
62409: LD_EXP 48
62413: IN
62414: NOT
62415: IFFALSE 62419
// exit ;
62417: GO 62504
// index := GetElementIndex ( hackTanks , hack ) ;
62419: LD_ADDR_VAR 0 5
62423: PUSH
62424: LD_EXP 48
62428: PPUSH
62429: LD_VAR 0 1
62433: PPUSH
62434: CALL 20569 0 2
62438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62439: LD_ADDR_VAR 0 4
62443: PUSH
62444: DOUBLE
62445: LD_INT 1
62447: DEC
62448: ST_TO_ADDR
62449: LD_EXP 49
62453: PUSH
62454: LD_VAR 0 5
62458: ARRAY
62459: PUSH
62460: FOR_TO
62461: IFFALSE 62502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62463: LD_EXP 49
62467: PUSH
62468: LD_VAR 0 5
62472: ARRAY
62473: PUSH
62474: LD_VAR 0 4
62478: ARRAY
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PUSH
62484: LD_VAR 0 2
62488: EQUAL
62489: IFFALSE 62500
// KillUnit ( vehicle ) ;
62491: LD_VAR 0 2
62495: PPUSH
62496: CALL_OW 66
62500: GO 62460
62502: POP
62503: POP
// end ;
62504: LD_VAR 0 3
62508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62509: LD_EXP 53
62513: NOT
62514: IFFALSE 62549
62516: GO 62518
62518: DISABLE
// begin initMiner := true ;
62519: LD_ADDR_EXP 53
62523: PUSH
62524: LD_INT 1
62526: ST_TO_ADDR
// minersList := [ ] ;
62527: LD_ADDR_EXP 54
62531: PUSH
62532: EMPTY
62533: ST_TO_ADDR
// minerMinesList := [ ] ;
62534: LD_ADDR_EXP 55
62538: PUSH
62539: EMPTY
62540: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62541: LD_ADDR_EXP 56
62545: PUSH
62546: LD_INT 5
62548: ST_TO_ADDR
// end ;
62549: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62550: LD_EXP 53
62554: IFFALSE 62572
62556: PUSH
62557: LD_INT 34
62559: PUSH
62560: LD_INT 81
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PPUSH
62567: CALL_OW 69
62571: AND
62572: IFFALSE 63035
62574: GO 62576
62576: DISABLE
62577: LD_INT 0
62579: PPUSH
62580: PPUSH
62581: PPUSH
62582: PPUSH
// begin enable ;
62583: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62584: LD_ADDR_VAR 0 1
62588: PUSH
62589: LD_INT 34
62591: PUSH
62592: LD_INT 81
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PPUSH
62599: CALL_OW 69
62603: PUSH
62604: FOR_IN
62605: IFFALSE 62677
// begin if not i in minersList then
62607: LD_VAR 0 1
62611: PUSH
62612: LD_EXP 54
62616: IN
62617: NOT
62618: IFFALSE 62675
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62620: LD_ADDR_EXP 54
62624: PUSH
62625: LD_EXP 54
62629: PPUSH
62630: LD_EXP 54
62634: PUSH
62635: LD_INT 1
62637: PLUS
62638: PPUSH
62639: LD_VAR 0 1
62643: PPUSH
62644: CALL_OW 1
62648: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62649: LD_ADDR_EXP 55
62653: PUSH
62654: LD_EXP 55
62658: PPUSH
62659: LD_EXP 55
62663: PUSH
62664: LD_INT 1
62666: PLUS
62667: PPUSH
62668: EMPTY
62669: PPUSH
62670: CALL_OW 1
62674: ST_TO_ADDR
// end end ;
62675: GO 62604
62677: POP
62678: POP
// for i := minerMinesList downto 1 do
62679: LD_ADDR_VAR 0 1
62683: PUSH
62684: DOUBLE
62685: LD_EXP 55
62689: INC
62690: ST_TO_ADDR
62691: LD_INT 1
62693: PUSH
62694: FOR_DOWNTO
62695: IFFALSE 63033
// begin if IsLive ( minersList [ i ] ) then
62697: LD_EXP 54
62701: PUSH
62702: LD_VAR 0 1
62706: ARRAY
62707: PPUSH
62708: CALL_OW 300
62712: IFFALSE 62740
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62714: LD_EXP 54
62718: PUSH
62719: LD_VAR 0 1
62723: ARRAY
62724: PPUSH
62725: LD_EXP 55
62729: PUSH
62730: LD_VAR 0 1
62734: ARRAY
62735: PPUSH
62736: CALL_OW 505
// if not minerMinesList [ i ] then
62740: LD_EXP 55
62744: PUSH
62745: LD_VAR 0 1
62749: ARRAY
62750: NOT
62751: IFFALSE 62755
// continue ;
62753: GO 62694
// for j := minerMinesList [ i ] downto 1 do
62755: LD_ADDR_VAR 0 2
62759: PUSH
62760: DOUBLE
62761: LD_EXP 55
62765: PUSH
62766: LD_VAR 0 1
62770: ARRAY
62771: INC
62772: ST_TO_ADDR
62773: LD_INT 1
62775: PUSH
62776: FOR_DOWNTO
62777: IFFALSE 63029
// begin side := GetSide ( minersList [ i ] ) ;
62779: LD_ADDR_VAR 0 3
62783: PUSH
62784: LD_EXP 54
62788: PUSH
62789: LD_VAR 0 1
62793: ARRAY
62794: PPUSH
62795: CALL_OW 255
62799: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62800: LD_ADDR_VAR 0 4
62804: PUSH
62805: LD_EXP 55
62809: PUSH
62810: LD_VAR 0 1
62814: ARRAY
62815: PUSH
62816: LD_VAR 0 2
62820: ARRAY
62821: PUSH
62822: LD_INT 1
62824: ARRAY
62825: PPUSH
62826: LD_EXP 55
62830: PUSH
62831: LD_VAR 0 1
62835: ARRAY
62836: PUSH
62837: LD_VAR 0 2
62841: ARRAY
62842: PUSH
62843: LD_INT 2
62845: ARRAY
62846: PPUSH
62847: CALL_OW 428
62851: ST_TO_ADDR
// if not tmp then
62852: LD_VAR 0 4
62856: NOT
62857: IFFALSE 62861
// continue ;
62859: GO 62776
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62861: LD_VAR 0 4
62865: PUSH
62866: LD_INT 81
62868: PUSH
62869: LD_VAR 0 3
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PPUSH
62878: CALL_OW 69
62882: IN
62883: IFFALSE 62933
62885: PUSH
62886: LD_EXP 55
62890: PUSH
62891: LD_VAR 0 1
62895: ARRAY
62896: PUSH
62897: LD_VAR 0 2
62901: ARRAY
62902: PUSH
62903: LD_INT 1
62905: ARRAY
62906: PPUSH
62907: LD_EXP 55
62911: PUSH
62912: LD_VAR 0 1
62916: ARRAY
62917: PUSH
62918: LD_VAR 0 2
62922: ARRAY
62923: PUSH
62924: LD_INT 2
62926: ARRAY
62927: PPUSH
62928: CALL_OW 458
62932: AND
62933: IFFALSE 63027
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62935: LD_EXP 55
62939: PUSH
62940: LD_VAR 0 1
62944: ARRAY
62945: PUSH
62946: LD_VAR 0 2
62950: ARRAY
62951: PUSH
62952: LD_INT 1
62954: ARRAY
62955: PPUSH
62956: LD_EXP 55
62960: PUSH
62961: LD_VAR 0 1
62965: ARRAY
62966: PUSH
62967: LD_VAR 0 2
62971: ARRAY
62972: PUSH
62973: LD_INT 2
62975: ARRAY
62976: PPUSH
62977: LD_VAR 0 3
62981: PPUSH
62982: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62986: LD_ADDR_EXP 55
62990: PUSH
62991: LD_EXP 55
62995: PPUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: LD_EXP 55
63005: PUSH
63006: LD_VAR 0 1
63010: ARRAY
63011: PPUSH
63012: LD_VAR 0 2
63016: PPUSH
63017: CALL_OW 3
63021: PPUSH
63022: CALL_OW 1
63026: ST_TO_ADDR
// end ; end ;
63027: GO 62776
63029: POP
63030: POP
// end ;
63031: GO 62694
63033: POP
63034: POP
// end ;
63035: PPOPN 4
63037: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63038: LD_INT 0
63040: PPUSH
63041: PPUSH
// result := false ;
63042: LD_ADDR_VAR 0 4
63046: PUSH
63047: LD_INT 0
63049: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63050: LD_VAR 0 1
63054: PPUSH
63055: CALL_OW 264
63059: PUSH
63060: LD_INT 81
63062: EQUAL
63063: NOT
63064: IFFALSE 63068
// exit ;
63066: GO 63312
// index := GetElementIndex ( minersList , unit ) ;
63068: LD_ADDR_VAR 0 5
63072: PUSH
63073: LD_EXP 54
63077: PPUSH
63078: LD_VAR 0 1
63082: PPUSH
63083: CALL 20569 0 2
63087: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63088: LD_EXP 55
63092: PUSH
63093: LD_VAR 0 5
63097: ARRAY
63098: PUSH
63099: LD_EXP 56
63103: GREATEREQUAL
63104: IFFALSE 63108
// exit ;
63106: GO 63312
// ComMoveXY ( unit , x , y ) ;
63108: LD_VAR 0 1
63112: PPUSH
63113: LD_VAR 0 2
63117: PPUSH
63118: LD_VAR 0 3
63122: PPUSH
63123: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63127: LD_INT 35
63129: PPUSH
63130: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63134: LD_VAR 0 1
63138: PPUSH
63139: LD_VAR 0 2
63143: PPUSH
63144: LD_VAR 0 3
63148: PPUSH
63149: CALL 52615 0 3
63153: NOT
63154: IFFALSE 63167
63156: PUSH
63157: LD_VAR 0 1
63161: PPUSH
63162: CALL_OW 314
63166: AND
63167: IFFALSE 63171
// exit ;
63169: GO 63312
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63171: LD_VAR 0 2
63175: PPUSH
63176: LD_VAR 0 3
63180: PPUSH
63181: CALL_OW 428
63185: PUSH
63186: LD_VAR 0 1
63190: EQUAL
63191: IFFALSE 63205
63193: PUSH
63194: LD_VAR 0 1
63198: PPUSH
63199: CALL_OW 314
63203: NOT
63204: AND
63205: IFFALSE 63127
// PlaySoundXY ( x , y , PlantMine ) ;
63207: LD_VAR 0 2
63211: PPUSH
63212: LD_VAR 0 3
63216: PPUSH
63217: LD_STRING PlantMine
63219: PPUSH
63220: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63224: LD_VAR 0 2
63228: PPUSH
63229: LD_VAR 0 3
63233: PPUSH
63234: LD_VAR 0 1
63238: PPUSH
63239: CALL_OW 255
63243: PPUSH
63244: LD_INT 0
63246: PPUSH
63247: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63251: LD_ADDR_EXP 55
63255: PUSH
63256: LD_EXP 55
63260: PPUSH
63261: LD_VAR 0 5
63265: PUSH
63266: LD_EXP 55
63270: PUSH
63271: LD_VAR 0 5
63275: ARRAY
63276: PUSH
63277: LD_INT 1
63279: PLUS
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PPUSH
63285: LD_VAR 0 2
63289: PUSH
63290: LD_VAR 0 3
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PPUSH
63299: CALL 20786 0 3
63303: ST_TO_ADDR
// result := true ;
63304: LD_ADDR_VAR 0 4
63308: PUSH
63309: LD_INT 1
63311: ST_TO_ADDR
// end ;
63312: LD_VAR 0 4
63316: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63317: LD_INT 0
63319: PPUSH
63320: PPUSH
63321: PPUSH
// if not unit in minersList then
63322: LD_VAR 0 1
63326: PUSH
63327: LD_EXP 54
63331: IN
63332: NOT
63333: IFFALSE 63337
// exit ;
63335: GO 63731
// index := GetElementIndex ( minersList , unit ) ;
63337: LD_ADDR_VAR 0 6
63341: PUSH
63342: LD_EXP 54
63346: PPUSH
63347: LD_VAR 0 1
63351: PPUSH
63352: CALL 20569 0 2
63356: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63357: LD_ADDR_VAR 0 5
63361: PUSH
63362: DOUBLE
63363: LD_EXP 55
63367: PUSH
63368: LD_VAR 0 6
63372: ARRAY
63373: INC
63374: ST_TO_ADDR
63375: LD_INT 1
63377: PUSH
63378: FOR_DOWNTO
63379: IFFALSE 63542
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63381: LD_EXP 55
63385: PUSH
63386: LD_VAR 0 6
63390: ARRAY
63391: PUSH
63392: LD_VAR 0 5
63396: ARRAY
63397: PUSH
63398: LD_INT 1
63400: ARRAY
63401: PUSH
63402: LD_VAR 0 2
63406: EQUAL
63407: IFFALSE 63437
63409: PUSH
63410: LD_EXP 55
63414: PUSH
63415: LD_VAR 0 6
63419: ARRAY
63420: PUSH
63421: LD_VAR 0 5
63425: ARRAY
63426: PUSH
63427: LD_INT 2
63429: ARRAY
63430: PUSH
63431: LD_VAR 0 3
63435: EQUAL
63436: AND
63437: IFFALSE 63540
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63439: LD_EXP 55
63443: PUSH
63444: LD_VAR 0 6
63448: ARRAY
63449: PUSH
63450: LD_VAR 0 5
63454: ARRAY
63455: PUSH
63456: LD_INT 1
63458: ARRAY
63459: PPUSH
63460: LD_EXP 55
63464: PUSH
63465: LD_VAR 0 6
63469: ARRAY
63470: PUSH
63471: LD_VAR 0 5
63475: ARRAY
63476: PUSH
63477: LD_INT 2
63479: ARRAY
63480: PPUSH
63481: LD_VAR 0 1
63485: PPUSH
63486: CALL_OW 255
63490: PPUSH
63491: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63495: LD_ADDR_EXP 55
63499: PUSH
63500: LD_EXP 55
63504: PPUSH
63505: LD_VAR 0 6
63509: PPUSH
63510: LD_EXP 55
63514: PUSH
63515: LD_VAR 0 6
63519: ARRAY
63520: PPUSH
63521: LD_VAR 0 5
63525: PPUSH
63526: CALL_OW 3
63530: PPUSH
63531: CALL_OW 1
63535: ST_TO_ADDR
// exit ;
63536: POP
63537: POP
63538: GO 63731
// end ; end ;
63540: GO 63378
63542: POP
63543: POP
// for i := minerMinesList [ index ] downto 1 do
63544: LD_ADDR_VAR 0 5
63548: PUSH
63549: DOUBLE
63550: LD_EXP 55
63554: PUSH
63555: LD_VAR 0 6
63559: ARRAY
63560: INC
63561: ST_TO_ADDR
63562: LD_INT 1
63564: PUSH
63565: FOR_DOWNTO
63566: IFFALSE 63729
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63568: LD_EXP 55
63572: PUSH
63573: LD_VAR 0 6
63577: ARRAY
63578: PUSH
63579: LD_VAR 0 5
63583: ARRAY
63584: PUSH
63585: LD_INT 1
63587: ARRAY
63588: PPUSH
63589: LD_EXP 55
63593: PUSH
63594: LD_VAR 0 6
63598: ARRAY
63599: PUSH
63600: LD_VAR 0 5
63604: ARRAY
63605: PUSH
63606: LD_INT 2
63608: ARRAY
63609: PPUSH
63610: LD_VAR 0 2
63614: PPUSH
63615: LD_VAR 0 3
63619: PPUSH
63620: CALL_OW 298
63624: PUSH
63625: LD_INT 6
63627: LESS
63628: IFFALSE 63727
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63630: LD_EXP 55
63634: PUSH
63635: LD_VAR 0 6
63639: ARRAY
63640: PUSH
63641: LD_VAR 0 5
63645: ARRAY
63646: PUSH
63647: LD_INT 1
63649: ARRAY
63650: PPUSH
63651: LD_EXP 55
63655: PUSH
63656: LD_VAR 0 6
63660: ARRAY
63661: PUSH
63662: LD_VAR 0 5
63666: ARRAY
63667: PUSH
63668: LD_INT 2
63670: ARRAY
63671: PPUSH
63672: LD_VAR 0 1
63676: PPUSH
63677: CALL_OW 255
63681: PPUSH
63682: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63686: LD_ADDR_EXP 55
63690: PUSH
63691: LD_EXP 55
63695: PPUSH
63696: LD_VAR 0 6
63700: PPUSH
63701: LD_EXP 55
63705: PUSH
63706: LD_VAR 0 6
63710: ARRAY
63711: PPUSH
63712: LD_VAR 0 5
63716: PPUSH
63717: CALL_OW 3
63721: PPUSH
63722: CALL_OW 1
63726: ST_TO_ADDR
// end ; end ;
63727: GO 63565
63729: POP
63730: POP
// end ;
63731: LD_VAR 0 4
63735: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63736: LD_INT 0
63738: PPUSH
63739: PPUSH
63740: PPUSH
63741: PPUSH
63742: PPUSH
63743: PPUSH
63744: PPUSH
63745: PPUSH
63746: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63747: LD_VAR 0 1
63751: PPUSH
63752: CALL_OW 264
63756: PUSH
63757: LD_INT 81
63759: EQUAL
63760: NOT
63761: IFTRUE 63776
63763: PUSH
63764: LD_VAR 0 1
63768: PUSH
63769: LD_EXP 54
63773: IN
63774: NOT
63775: OR
63776: IFFALSE 63780
// exit ;
63778: GO 64106
// index := GetElementIndex ( minersList , unit ) ;
63780: LD_ADDR_VAR 0 6
63784: PUSH
63785: LD_EXP 54
63789: PPUSH
63790: LD_VAR 0 1
63794: PPUSH
63795: CALL 20569 0 2
63799: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63800: LD_ADDR_VAR 0 8
63804: PUSH
63805: LD_EXP 56
63809: PUSH
63810: LD_EXP 55
63814: PUSH
63815: LD_VAR 0 6
63819: ARRAY
63820: MINUS
63821: ST_TO_ADDR
// if not minesFreeAmount then
63822: LD_VAR 0 8
63826: NOT
63827: IFFALSE 63831
// exit ;
63829: GO 64106
// tmp := [ ] ;
63831: LD_ADDR_VAR 0 7
63835: PUSH
63836: EMPTY
63837: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: DOUBLE
63844: LD_INT 1
63846: DEC
63847: ST_TO_ADDR
63848: LD_VAR 0 8
63852: PUSH
63853: FOR_TO
63854: IFFALSE 64053
// begin _d := rand ( 0 , 5 ) ;
63856: LD_ADDR_VAR 0 11
63860: PUSH
63861: LD_INT 0
63863: PPUSH
63864: LD_INT 5
63866: PPUSH
63867: CALL_OW 12
63871: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63872: LD_ADDR_VAR 0 12
63876: PUSH
63877: LD_INT 2
63879: PPUSH
63880: LD_INT 6
63882: PPUSH
63883: CALL_OW 12
63887: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63888: LD_ADDR_VAR 0 9
63892: PUSH
63893: LD_VAR 0 2
63897: PPUSH
63898: LD_VAR 0 11
63902: PPUSH
63903: LD_VAR 0 12
63907: PPUSH
63908: CALL_OW 272
63912: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63913: LD_ADDR_VAR 0 10
63917: PUSH
63918: LD_VAR 0 3
63922: PPUSH
63923: LD_VAR 0 11
63927: PPUSH
63928: LD_VAR 0 12
63932: PPUSH
63933: CALL_OW 273
63937: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63938: LD_VAR 0 9
63942: PPUSH
63943: LD_VAR 0 10
63947: PPUSH
63948: CALL_OW 488
63952: IFFALSE 63976
63954: PUSH
63955: LD_VAR 0 9
63959: PUSH
63960: LD_VAR 0 10
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_VAR 0 7
63973: IN
63974: NOT
63975: AND
63976: IFFALSE 63995
63978: PUSH
63979: LD_VAR 0 9
63983: PPUSH
63984: LD_VAR 0 10
63988: PPUSH
63989: CALL_OW 458
63993: NOT
63994: AND
63995: IFFALSE 64037
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63997: LD_ADDR_VAR 0 7
64001: PUSH
64002: LD_VAR 0 7
64006: PPUSH
64007: LD_VAR 0 7
64011: PUSH
64012: LD_INT 1
64014: PLUS
64015: PPUSH
64016: LD_VAR 0 9
64020: PUSH
64021: LD_VAR 0 10
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PPUSH
64030: CALL_OW 1
64034: ST_TO_ADDR
64035: GO 64051
// i := i - 1 ;
64037: LD_ADDR_VAR 0 5
64041: PUSH
64042: LD_VAR 0 5
64046: PUSH
64047: LD_INT 1
64049: MINUS
64050: ST_TO_ADDR
// end ;
64051: GO 63853
64053: POP
64054: POP
// for i in tmp do
64055: LD_ADDR_VAR 0 5
64059: PUSH
64060: LD_VAR 0 7
64064: PUSH
64065: FOR_IN
64066: IFFALSE 64104
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64068: LD_VAR 0 1
64072: PPUSH
64073: LD_VAR 0 5
64077: PUSH
64078: LD_INT 1
64080: ARRAY
64081: PPUSH
64082: LD_VAR 0 5
64086: PUSH
64087: LD_INT 2
64089: ARRAY
64090: PPUSH
64091: CALL 63038 0 3
64095: NOT
64096: IFFALSE 64102
// exit ;
64098: POP
64099: POP
64100: GO 64106
64102: GO 64065
64104: POP
64105: POP
// end ;
64106: LD_VAR 0 4
64110: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64111: LD_INT 0
64113: PPUSH
64114: PPUSH
64115: PPUSH
64116: PPUSH
64117: PPUSH
64118: PPUSH
64119: PPUSH
64120: PPUSH
64121: PPUSH
// if GetClass ( unit ) <> class_sniper then
64122: LD_VAR 0 1
64126: PPUSH
64127: CALL_OW 257
64131: PUSH
64132: LD_INT 5
64134: NONEQUAL
64135: IFFALSE 64139
// exit ;
64137: GO 64609
// dist := 8 ;
64139: LD_ADDR_VAR 0 5
64143: PUSH
64144: LD_INT 8
64146: ST_TO_ADDR
// viewRange := 12 ;
64147: LD_ADDR_VAR 0 8
64151: PUSH
64152: LD_INT 12
64154: ST_TO_ADDR
// side := GetSide ( unit ) ;
64155: LD_ADDR_VAR 0 6
64159: PUSH
64160: LD_VAR 0 1
64164: PPUSH
64165: CALL_OW 255
64169: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64170: LD_INT 61
64172: PPUSH
64173: LD_VAR 0 6
64177: PPUSH
64178: CALL_OW 321
64182: PUSH
64183: LD_INT 2
64185: EQUAL
64186: IFFALSE 64196
// viewRange := 16 ;
64188: LD_ADDR_VAR 0 8
64192: PUSH
64193: LD_INT 16
64195: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64196: LD_VAR 0 1
64200: PPUSH
64201: LD_VAR 0 2
64205: PPUSH
64206: LD_VAR 0 3
64210: PPUSH
64211: CALL_OW 297
64215: PUSH
64216: LD_VAR 0 5
64220: GREATER
64221: IFFALSE 64300
// begin ComMoveXY ( unit , x , y ) ;
64223: LD_VAR 0 1
64227: PPUSH
64228: LD_VAR 0 2
64232: PPUSH
64233: LD_VAR 0 3
64237: PPUSH
64238: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64242: LD_INT 35
64244: PPUSH
64245: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64249: LD_VAR 0 1
64253: PPUSH
64254: LD_VAR 0 2
64258: PPUSH
64259: LD_VAR 0 3
64263: PPUSH
64264: CALL 52615 0 3
64268: NOT
64269: IFFALSE 64273
// exit ;
64271: GO 64609
// until GetDistUnitXY ( unit , x , y ) < dist ;
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_VAR 0 2
64282: PPUSH
64283: LD_VAR 0 3
64287: PPUSH
64288: CALL_OW 297
64292: PUSH
64293: LD_VAR 0 5
64297: LESS
64298: IFFALSE 64242
// end ; ComTurnXY ( unit , x , y ) ;
64300: LD_VAR 0 1
64304: PPUSH
64305: LD_VAR 0 2
64309: PPUSH
64310: LD_VAR 0 3
64314: PPUSH
64315: CALL_OW 118
// repeat if Multiplayer then
64319: LD_OWVAR 4
64323: IFFALSE 64334
// wait ( 35 ) else
64325: LD_INT 35
64327: PPUSH
64328: CALL_OW 67
64332: GO 64341
// wait ( 5 ) ;
64334: LD_INT 5
64336: PPUSH
64337: CALL_OW 67
// _d := GetDir ( unit ) ;
64341: LD_ADDR_VAR 0 11
64345: PUSH
64346: LD_VAR 0 1
64350: PPUSH
64351: CALL_OW 254
64355: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64356: LD_ADDR_VAR 0 7
64360: PUSH
64361: LD_VAR 0 1
64365: PPUSH
64366: CALL_OW 250
64370: PPUSH
64371: LD_VAR 0 1
64375: PPUSH
64376: CALL_OW 251
64380: PPUSH
64381: LD_VAR 0 2
64385: PPUSH
64386: LD_VAR 0 3
64390: PPUSH
64391: CALL 55251 0 4
64395: ST_TO_ADDR
// until dir = _d ;
64396: LD_VAR 0 7
64400: PUSH
64401: LD_VAR 0 11
64405: EQUAL
64406: IFFALSE 64319
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64408: LD_ADDR_VAR 0 9
64412: PUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: CALL_OW 250
64422: PPUSH
64423: LD_VAR 0 7
64427: PPUSH
64428: LD_VAR 0 5
64432: PPUSH
64433: CALL_OW 272
64437: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64438: LD_ADDR_VAR 0 10
64442: PUSH
64443: LD_VAR 0 1
64447: PPUSH
64448: CALL_OW 251
64452: PPUSH
64453: LD_VAR 0 7
64457: PPUSH
64458: LD_VAR 0 5
64462: PPUSH
64463: CALL_OW 273
64467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64468: LD_VAR 0 9
64472: PPUSH
64473: LD_VAR 0 10
64477: PPUSH
64478: CALL_OW 488
64482: NOT
64483: IFFALSE 64487
// exit ;
64485: GO 64609
// ComAnimCustom ( unit , 1 ) ;
64487: LD_VAR 0 1
64491: PPUSH
64492: LD_INT 1
64494: PPUSH
64495: CALL_OW 592
// p := 0 ;
64499: LD_ADDR_VAR 0 12
64503: PUSH
64504: LD_INT 0
64506: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64507: LD_VAR 0 9
64511: PPUSH
64512: LD_VAR 0 10
64516: PPUSH
64517: LD_VAR 0 6
64521: PPUSH
64522: LD_VAR 0 8
64526: PPUSH
64527: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64531: LD_INT 35
64533: PPUSH
64534: CALL_OW 67
// p := Inc ( p ) ;
64538: LD_ADDR_VAR 0 12
64542: PUSH
64543: LD_VAR 0 12
64547: PPUSH
64548: CALL 55207 0 1
64552: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64553: LD_VAR 0 12
64557: PUSH
64558: LD_INT 3
64560: EQUAL
64561: IFTRUE 64575
64563: PUSH
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 302
64573: NOT
64574: OR
64575: IFTRUE 64588
64577: PUSH
64578: LD_VAR 0 1
64582: PPUSH
64583: CALL_OW 301
64587: OR
64588: IFFALSE 64531
// RemoveSeeing ( _x , _y , side ) ;
64590: LD_VAR 0 9
64594: PPUSH
64595: LD_VAR 0 10
64599: PPUSH
64600: LD_VAR 0 6
64604: PPUSH
64605: CALL_OW 331
// end ; end_of_file end_of_file
64609: LD_VAR 0 4
64613: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64614: PPOPN 6
64616: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64617: LD_EXP 41
64621: PUSH
64622: LD_INT 4
64624: EQUAL
64625: IFFALSE 64661
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64627: LD_STRING setGameDifficulty(
64629: PUSH
64630: LD_OWVAR 67
64634: STR
64635: PUSH
64636: LD_STRING )
64638: STR
64639: PPUSH
64640: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64644: LD_STRING displayDifficulty(
64646: PUSH
64647: LD_OWVAR 67
64651: STR
64652: PUSH
64653: LD_STRING )
64655: STR
64656: PPUSH
64657: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64661: CALL 64690 0 0
// end ; end_of_file
64665: PPOPN 1
64667: END
// every 0 0$1 do
64668: GO 64670
64670: DISABLE
// begin enable ;
64671: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64672: LD_STRING updateTimer(
64674: PUSH
64675: LD_OWVAR 1
64679: STR
64680: PUSH
64681: LD_STRING );
64683: STR
64684: PPUSH
64685: CALL_OW 559
// end ;
64689: END
// export function SOS_MapStart ( ) ; begin
64690: LD_INT 0
64692: PPUSH
// UpdateFactoryWaypoints ( ) ;
64693: CALL 65624 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64697: CALL 65876 0 0
// ParseMultiDataToLua ( ) ;
64701: CALL 66023 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
64705: LD_STRING setSpecLogoNumber(
64707: PUSH
64708: LD_INT 2
64710: STR
64711: PUSH
64712: LD_STRING ,
64714: STR
64715: PUSH
64716: LD_INT 1
64718: STR
64719: PUSH
64720: LD_STRING )
64722: STR
64723: PPUSH
64724: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
64728: LD_STRING setSpecLogoNumber(
64730: PUSH
64731: LD_INT 3
64733: STR
64734: PUSH
64735: LD_STRING ,
64737: STR
64738: PUSH
64739: LD_INT 2
64741: STR
64742: PUSH
64743: LD_STRING )
64745: STR
64746: PPUSH
64747: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
64751: LD_STRING setSpecLogoNumber(
64753: PUSH
64754: LD_INT 4
64756: STR
64757: PUSH
64758: LD_STRING ,
64760: STR
64761: PUSH
64762: LD_INT 3
64764: STR
64765: PUSH
64766: LD_STRING )
64768: STR
64769: PPUSH
64770: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
64774: LD_STRING setSpecLogoNumber(
64776: PUSH
64777: LD_INT 5
64779: STR
64780: PUSH
64781: LD_STRING ,
64783: STR
64784: PUSH
64785: LD_INT 4
64787: STR
64788: PUSH
64789: LD_STRING )
64791: STR
64792: PPUSH
64793: CALL_OW 559
// end ;
64797: LD_VAR 0 1
64801: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
64802: LD_INT 0
64804: PPUSH
64805: PPUSH
64806: PPUSH
64807: PPUSH
64808: PPUSH
64809: PPUSH
64810: PPUSH
64811: PPUSH
64812: PPUSH
// for i := 1 to 8 do
64813: LD_ADDR_VAR 0 2
64817: PUSH
64818: DOUBLE
64819: LD_INT 1
64821: DEC
64822: ST_TO_ADDR
64823: LD_INT 8
64825: PUSH
64826: FOR_TO
64827: IFFALSE 65212
// begin if mpSidePositions [ i ] then
64829: LD_EXP 42
64833: PUSH
64834: LD_VAR 0 2
64838: ARRAY
64839: IFFALSE 65210
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
64841: LD_ADDR_VAR 0 7
64845: PUSH
64846: LD_INT 22
64848: PUSH
64849: LD_VAR 0 2
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 21
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PPUSH
64872: CALL_OW 69
64876: PPUSH
64877: CALL 17902 0 1
64881: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64882: LD_ADDR_VAR 0 9
64886: PUSH
64887: LD_INT 22
64889: PUSH
64890: LD_VAR 0 2
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: LD_INT 30
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 30
64914: PUSH
64915: LD_INT 1
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PPUSH
64931: CALL_OW 69
64935: ST_TO_ADDR
// crates := 0 ;
64936: LD_ADDR_VAR 0 4
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// oil := 0 ;
64944: LD_ADDR_VAR 0 5
64948: PUSH
64949: LD_INT 0
64951: ST_TO_ADDR
// sib := 0 ;
64952: LD_ADDR_VAR 0 6
64956: PUSH
64957: LD_INT 0
64959: ST_TO_ADDR
// if bases then
64960: LD_VAR 0 9
64964: IFFALSE 65070
// begin for j in bases do
64966: LD_ADDR_VAR 0 3
64970: PUSH
64971: LD_VAR 0 9
64975: PUSH
64976: FOR_IN
64977: IFFALSE 65068
// begin base := GetBase ( j ) ;
64979: LD_ADDR_VAR 0 8
64983: PUSH
64984: LD_VAR 0 3
64988: PPUSH
64989: CALL_OW 274
64993: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64994: LD_ADDR_VAR 0 4
64998: PUSH
64999: LD_VAR 0 4
65003: PUSH
65004: LD_VAR 0 8
65008: PPUSH
65009: LD_INT 1
65011: PPUSH
65012: CALL_OW 275
65016: PLUS
65017: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
65018: LD_ADDR_VAR 0 5
65022: PUSH
65023: LD_VAR 0 5
65027: PUSH
65028: LD_VAR 0 8
65032: PPUSH
65033: LD_INT 2
65035: PPUSH
65036: CALL_OW 275
65040: PLUS
65041: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
65042: LD_ADDR_VAR 0 6
65046: PUSH
65047: LD_VAR 0 6
65051: PUSH
65052: LD_VAR 0 8
65056: PPUSH
65057: LD_INT 3
65059: PPUSH
65060: CALL_OW 275
65064: PLUS
65065: ST_TO_ADDR
// end ;
65066: GO 64976
65068: POP
65069: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
65070: LD_STRING setSpecText(
65072: PUSH
65073: LD_VAR 0 2
65077: STR
65078: PUSH
65079: LD_STRING ,
65081: STR
65082: PUSH
65083: LD_INT 2
65085: STR
65086: PUSH
65087: LD_STRING ,
65089: STR
65090: PUSH
65091: LD_VAR 0 4
65095: STR
65096: PUSH
65097: LD_STRING )
65099: STR
65100: PPUSH
65101: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
65105: LD_STRING setSpecText(
65107: PUSH
65108: LD_VAR 0 2
65112: STR
65113: PUSH
65114: LD_STRING ,
65116: STR
65117: PUSH
65118: LD_INT 3
65120: STR
65121: PUSH
65122: LD_STRING ,
65124: STR
65125: PUSH
65126: LD_VAR 0 5
65130: STR
65131: PUSH
65132: LD_STRING )
65134: STR
65135: PPUSH
65136: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
65140: LD_STRING setSpecText(
65142: PUSH
65143: LD_VAR 0 2
65147: STR
65148: PUSH
65149: LD_STRING ,
65151: STR
65152: PUSH
65153: LD_INT 4
65155: STR
65156: PUSH
65157: LD_STRING ,
65159: STR
65160: PUSH
65161: LD_VAR 0 6
65165: STR
65166: PUSH
65167: LD_STRING )
65169: STR
65170: PPUSH
65171: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
65175: LD_STRING setSpecText(
65177: PUSH
65178: LD_VAR 0 2
65182: STR
65183: PUSH
65184: LD_STRING ,
65186: STR
65187: PUSH
65188: LD_INT 5
65190: STR
65191: PUSH
65192: LD_STRING ,
65194: STR
65195: PUSH
65196: LD_VAR 0 7
65200: STR
65201: PUSH
65202: LD_STRING )
65204: STR
65205: PPUSH
65206: CALL_OW 559
// end ; end ;
65210: GO 64826
65212: POP
65213: POP
// end ;
65214: LD_VAR 0 1
65218: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
65219: LD_INT 2
65221: PUSH
65222: LD_INT 30
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 30
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: LIST
65246: PPUSH
65247: CALL_OW 69
65251: IFFALSE 65261
65253: GO 65255
65255: DISABLE
// begin enable ;
65256: ENABLE
// UpdateSpectatorBar ;
65257: CALL 64802 0 0
// end ;
65261: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65262: LD_INT 0
65264: PPUSH
// end ;
65265: LD_VAR 0 12
65269: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65270: LD_INT 0
65272: PPUSH
65273: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65274: LD_VAR 0 1
65278: NOT
65279: IFTRUE 65298
65281: PUSH
65282: LD_VAR 0 2
65286: PPUSH
65287: LD_VAR 0 3
65291: PPUSH
65292: CALL_OW 488
65296: NOT
65297: OR
65298: IFTRUE 65333
65300: PUSH
65301: LD_VAR 0 1
65305: PPUSH
65306: CALL_OW 266
65310: PUSH
65311: LD_INT 3
65313: NONEQUAL
65314: IFFALSE 65332
65316: PUSH
65317: LD_VAR 0 1
65321: PPUSH
65322: CALL_OW 247
65326: PUSH
65327: LD_INT 1
65329: EQUAL
65330: NOT
65331: AND
65332: OR
65333: IFFALSE 65337
// exit ;
65335: GO 65619
// if GetType ( factory ) = unit_human then
65337: LD_VAR 0 1
65341: PPUSH
65342: CALL_OW 247
65346: PUSH
65347: LD_INT 1
65349: EQUAL
65350: IFFALSE 65367
// factory := IsInUnit ( factory ) ;
65352: LD_ADDR_VAR 0 1
65356: PUSH
65357: LD_VAR 0 1
65361: PPUSH
65362: CALL_OW 310
65366: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65367: LD_VAR 0 1
65371: PPUSH
65372: CALL_OW 266
65376: PUSH
65377: LD_INT 3
65379: NONEQUAL
65380: IFFALSE 65384
// exit ;
65382: GO 65619
// for i := 1 to Count ( factoryWaypoints ) do
65384: LD_ADDR_VAR 0 5
65388: PUSH
65389: DOUBLE
65390: LD_INT 1
65392: DEC
65393: ST_TO_ADDR
65394: LD_EXP 57
65398: PPUSH
65399: CALL 17902 0 1
65403: PUSH
65404: FOR_TO
65405: IFFALSE 65567
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65407: LD_VAR 0 2
65411: PPUSH
65412: LD_VAR 0 3
65416: PPUSH
65417: CALL_OW 428
65421: PUSH
65422: LD_EXP 57
65426: PUSH
65427: LD_VAR 0 5
65431: ARRAY
65432: PUSH
65433: LD_INT 2
65435: ARRAY
65436: EQUAL
65437: IFFALSE 65469
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65439: LD_ADDR_EXP 57
65443: PUSH
65444: LD_EXP 57
65448: PPUSH
65449: LD_VAR 0 5
65453: PPUSH
65454: CALL_OW 3
65458: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65459: CALL 65624 0 0
// exit ;
65463: POP
65464: POP
65465: GO 65619
// end else
65467: GO 65565
// if factory = factoryWaypoints [ i ] [ 2 ] then
65469: LD_VAR 0 1
65473: PUSH
65474: LD_EXP 57
65478: PUSH
65479: LD_VAR 0 5
65483: ARRAY
65484: PUSH
65485: LD_INT 2
65487: ARRAY
65488: EQUAL
65489: IFFALSE 65565
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65491: LD_ADDR_EXP 57
65495: PUSH
65496: LD_EXP 57
65500: PPUSH
65501: LD_VAR 0 5
65505: PPUSH
65506: CALL_OW 3
65510: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65511: LD_ADDR_EXP 57
65515: PUSH
65516: LD_EXP 57
65520: PPUSH
65521: LD_VAR 0 1
65525: PPUSH
65526: CALL_OW 255
65530: PUSH
65531: LD_VAR 0 1
65535: PUSH
65536: LD_VAR 0 2
65540: PUSH
65541: LD_VAR 0 3
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: PPUSH
65552: CALL 53834 0 2
65556: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65557: CALL 65624 0 0
// exit ;
65561: POP
65562: POP
65563: GO 65619
// end ; end ;
65565: GO 65404
65567: POP
65568: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65569: LD_ADDR_EXP 57
65573: PUSH
65574: LD_EXP 57
65578: PPUSH
65579: LD_VAR 0 1
65583: PPUSH
65584: CALL_OW 255
65588: PUSH
65589: LD_VAR 0 1
65593: PUSH
65594: LD_VAR 0 2
65598: PUSH
65599: LD_VAR 0 3
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: PPUSH
65610: CALL 53834 0 2
65614: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65615: CALL 65624 0 0
// end ;
65619: LD_VAR 0 4
65623: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65624: LD_INT 0
65626: PPUSH
65627: PPUSH
65628: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65629: LD_STRING resetFactoryWaypoint();
65631: PPUSH
65632: CALL_OW 559
// if factoryWaypoints then
65636: LD_EXP 57
65640: IFFALSE 65761
// begin list := factoryWaypoints ;
65642: LD_ADDR_VAR 0 3
65646: PUSH
65647: LD_EXP 57
65651: ST_TO_ADDR
// for i := 1 to list do
65652: LD_ADDR_VAR 0 2
65656: PUSH
65657: DOUBLE
65658: LD_INT 1
65660: DEC
65661: ST_TO_ADDR
65662: LD_VAR 0 3
65666: PUSH
65667: FOR_TO
65668: IFFALSE 65759
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65670: LD_STRING setFactoryWaypointXY(
65672: PUSH
65673: LD_VAR 0 3
65677: PUSH
65678: LD_VAR 0 2
65682: ARRAY
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: STR
65688: PUSH
65689: LD_STRING ,
65691: STR
65692: PUSH
65693: LD_VAR 0 3
65697: PUSH
65698: LD_VAR 0 2
65702: ARRAY
65703: PUSH
65704: LD_INT 2
65706: ARRAY
65707: STR
65708: PUSH
65709: LD_STRING ,
65711: STR
65712: PUSH
65713: LD_VAR 0 3
65717: PUSH
65718: LD_VAR 0 2
65722: ARRAY
65723: PUSH
65724: LD_INT 3
65726: ARRAY
65727: STR
65728: PUSH
65729: LD_STRING ,
65731: STR
65732: PUSH
65733: LD_VAR 0 3
65737: PUSH
65738: LD_VAR 0 2
65742: ARRAY
65743: PUSH
65744: LD_INT 4
65746: ARRAY
65747: STR
65748: PUSH
65749: LD_STRING )
65751: STR
65752: PPUSH
65753: CALL_OW 559
65757: GO 65667
65759: POP
65760: POP
// end ; end ;
65761: LD_VAR 0 1
65765: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65766: LD_INT 0
65768: PPUSH
// if HexInfo ( x , y ) = warehouse then
65769: LD_VAR 0 2
65773: PPUSH
65774: LD_VAR 0 3
65778: PPUSH
65779: CALL_OW 428
65783: PUSH
65784: LD_VAR 0 1
65788: EQUAL
65789: IFFALSE 65816
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65791: LD_ADDR_EXP 59
65795: PUSH
65796: LD_EXP 59
65800: PPUSH
65801: LD_VAR 0 1
65805: PPUSH
65806: LD_INT 0
65808: PPUSH
65809: CALL_OW 1
65813: ST_TO_ADDR
65814: GO 65867
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65816: LD_ADDR_EXP 59
65820: PUSH
65821: LD_EXP 59
65825: PPUSH
65826: LD_VAR 0 1
65830: PPUSH
65831: LD_VAR 0 1
65835: PPUSH
65836: CALL_OW 255
65840: PUSH
65841: LD_VAR 0 1
65845: PUSH
65846: LD_VAR 0 2
65850: PUSH
65851: LD_VAR 0 3
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: PPUSH
65862: CALL_OW 1
65866: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65867: CALL 65876 0 0
// end ;
65871: LD_VAR 0 4
65875: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65876: LD_INT 0
65878: PPUSH
65879: PPUSH
65880: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65881: LD_STRING resetWarehouseGatheringPoints();
65883: PPUSH
65884: CALL_OW 559
// if warehouseGatheringPoints then
65888: LD_EXP 59
65892: IFFALSE 66018
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65894: LD_ADDR_VAR 0 3
65898: PUSH
65899: LD_EXP 59
65903: PPUSH
65904: CALL 57768 0 1
65908: ST_TO_ADDR
// for i := 1 to list do
65909: LD_ADDR_VAR 0 2
65913: PUSH
65914: DOUBLE
65915: LD_INT 1
65917: DEC
65918: ST_TO_ADDR
65919: LD_VAR 0 3
65923: PUSH
65924: FOR_TO
65925: IFFALSE 66016
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65927: LD_STRING setWarehouseGatheringPointXY(
65929: PUSH
65930: LD_VAR 0 3
65934: PUSH
65935: LD_VAR 0 2
65939: ARRAY
65940: PUSH
65941: LD_INT 1
65943: ARRAY
65944: STR
65945: PUSH
65946: LD_STRING ,
65948: STR
65949: PUSH
65950: LD_VAR 0 3
65954: PUSH
65955: LD_VAR 0 2
65959: ARRAY
65960: PUSH
65961: LD_INT 2
65963: ARRAY
65964: STR
65965: PUSH
65966: LD_STRING ,
65968: STR
65969: PUSH
65970: LD_VAR 0 3
65974: PUSH
65975: LD_VAR 0 2
65979: ARRAY
65980: PUSH
65981: LD_INT 3
65983: ARRAY
65984: STR
65985: PUSH
65986: LD_STRING ,
65988: STR
65989: PUSH
65990: LD_VAR 0 3
65994: PUSH
65995: LD_VAR 0 2
65999: ARRAY
66000: PUSH
66001: LD_INT 4
66003: ARRAY
66004: STR
66005: PUSH
66006: LD_STRING )
66008: STR
66009: PPUSH
66010: CALL_OW 559
66014: GO 65924
66016: POP
66017: POP
// end ; end ;
66018: LD_VAR 0 1
66022: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
66023: LD_INT 0
66025: PPUSH
66026: PPUSH
// if not mpSidePositions then
66027: LD_EXP 42
66031: NOT
66032: IFFALSE 66036
// exit ;
66034: GO 66107
// result :=  ;
66036: LD_ADDR_VAR 0 1
66040: PUSH
66041: LD_STRING 
66043: ST_TO_ADDR
// for i := 1 to 8 do
66044: LD_ADDR_VAR 0 2
66048: PUSH
66049: DOUBLE
66050: LD_INT 1
66052: DEC
66053: ST_TO_ADDR
66054: LD_INT 8
66056: PUSH
66057: FOR_TO
66058: IFFALSE 66088
// begin result := result & mpSidePositions [ i ] & ; ;
66060: LD_ADDR_VAR 0 1
66064: PUSH
66065: LD_VAR 0 1
66069: PUSH
66070: LD_EXP 42
66074: PUSH
66075: LD_VAR 0 2
66079: ARRAY
66080: STR
66081: PUSH
66082: LD_STRING ;
66084: STR
66085: ST_TO_ADDR
// end ;
66086: GO 66057
66088: POP
66089: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
66090: LD_STRING setMultiplayerRealPosition("
66092: PUSH
66093: LD_VAR 0 1
66097: STR
66098: PUSH
66099: LD_STRING ");
66101: STR
66102: PPUSH
66103: CALL_OW 559
// end ;
66107: LD_VAR 0 1
66111: RET
