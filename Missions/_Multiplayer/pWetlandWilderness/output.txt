// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46545 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46929 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 230
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 35
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 36
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 33
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 16
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45910 0 2
1427: PUSH
1428: LD_INT 22
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45910 0 2
1438: PUSH
1439: LD_INT 28
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45910 0 2
1449: PUSH
1450: LD_INT 34
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45910 0 2
1460: PUSH
1461: LD_INT 40
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45910 0 2
1471: PUSH
1472: LD_INT 46
1474: PPUSH
1475: LD_INT 0
1477: PPUSH
1478: CALL 45910 0 2
1482: PUSH
1483: LD_INT 52
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45910 0 2
1493: PUSH
1494: LD_INT 58
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45910 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5225 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 45743 0 2
1683: PUSH
1684: LD_INT 23
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 45743 0 2
1696: PUSH
1697: LD_INT 29
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45743 0 2
1709: PUSH
1710: LD_INT 35
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45743 0 2
1722: PUSH
1723: LD_INT 41
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45743 0 2
1735: PUSH
1736: LD_INT 47
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45743 0 2
1748: PUSH
1749: LD_INT 53
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45743 0 2
1761: PUSH
1762: LD_INT 59
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45743 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 18
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 45743 0 2
1826: PUSH
1827: LD_INT 24
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 45743 0 2
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45743 0 2
1852: PUSH
1853: LD_INT 36
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45743 0 2
1865: PUSH
1866: LD_INT 42
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45743 0 2
1878: PUSH
1879: LD_INT 48
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45743 0 2
1891: PUSH
1892: LD_INT 54
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45743 0 2
1904: PUSH
1905: LD_INT 60
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45743 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 19
1968: PPUSH
1969: LD_INT 4
1971: PPUSH
1972: CALL 45910 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 20
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL 45910 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 21
1998: PPUSH
1999: LD_INT 5
2001: PPUSH
2002: CALL 45910 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 25
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL 45910 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 26
2033: PPUSH
2034: LD_INT 4
2036: PPUSH
2037: CALL 45910 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 27
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45910 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 31
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45910 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 32
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45910 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 33
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45910 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 37
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL 45910 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 38
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45910 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 39
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45910 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 43
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL 45910 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 44
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45910 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 45
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45910 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 49
2218: PPUSH
2219: LD_INT 4
2221: PPUSH
2222: CALL 45910 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 50
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: CALL 45910 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 51
2248: PPUSH
2249: LD_INT 3
2251: PPUSH
2252: CALL 45910 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 55
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45910 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 56
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL 45910 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 57
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45910 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 61
2318: PPUSH
2319: LD_INT 5
2321: PPUSH
2322: CALL 45910 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 62
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL 45910 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 63
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45910 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2855
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// x := 1 ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// repeat wait ( time ) ;
2719: LD_VAR 0 5
2723: PPUSH
2724: CALL_OW 67
// x := Inc ( x ) ;
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 42564 0 1
2742: ST_TO_ADDR
// if x > 5 then
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 5
2750: GREATER
2751: IFFALSE 2761
// x := 1 ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// for i in areas do
2761: LD_ADDR_VAR 0 1
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2811
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: CALL_OW 287
2786: PUSH
2787: LD_INT 30
2789: LESS
2790: IFFALSE 2809
// begin CreateCratesArea ( x , i , true ) ;
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL_OW 55
// end ; end ;
2809: GO 2771
2811: POP
2812: POP
// time := time + delayTime ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 5
2822: PUSH
2823: LD_VAR 0 7
2827: PLUS
2828: ST_TO_ADDR
// if time > maxTime then
2829: LD_VAR 0 5
2833: PUSH
2834: LD_VAR 0 8
2838: GREATER
2839: IFFALSE 2851
// time := normalTime ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 6
2850: ST_TO_ADDR
// until false ;
2851: LD_INT 0
2853: IFFALSE 2719
// end ; end_of_file
2855: PPOPN 8
2857: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 56274 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL 51831 0 1
// end ;
2876: PPOPN 1
2878: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL 56291 0 1
// end ;
2888: PPOPN 1
2890: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2891: LD_VAR 0 1
2895: PPUSH
2896: CALL 52538 0 1
2900: PPOPN 1
2902: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 56332 0 2
2917: PPOPN 2
2919: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL 52591 0 3
2939: PPOPN 3
2941: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_VAR 0 2
2951: PPUSH
2952: LD_VAR 0 3
2956: PPUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: LD_VAR 0 5
2966: PPUSH
2967: CALL 53230 0 5
2971: PPOPN 5
2973: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_VAR 0 2
2983: PPUSH
2984: LD_VAR 0 3
2988: PPUSH
2989: LD_VAR 0 4
2993: PPUSH
2994: CALL 53333 0 4
2998: PPOPN 4
3000: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3001: LD_INT 0
3003: PPUSH
3004: PPUSH
// if exist_mode then
3005: LD_VAR 0 2
3009: IFFALSE 3055
// begin unit := CreateCharacter ( prefix & ident ) ;
3011: LD_ADDR_VAR 0 5
3015: PUSH
3016: LD_VAR 0 3
3020: PUSH
3021: LD_VAR 0 1
3025: STR
3026: PPUSH
3027: CALL_OW 34
3031: ST_TO_ADDR
// if unit then
3032: LD_VAR 0 5
3036: IFFALSE 3053
// DeleteCharacters ( prefix & ident ) ;
3038: LD_VAR 0 3
3042: PUSH
3043: LD_VAR 0 1
3047: STR
3048: PPUSH
3049: CALL_OW 40
// end else
3053: GO 3070
// unit := NewCharacter ( ident ) ;
3055: LD_ADDR_VAR 0 5
3059: PUSH
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 25
3069: ST_TO_ADDR
// result := unit ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: LD_VAR 0 5
3079: ST_TO_ADDR
// end ;
3080: LD_VAR 0 4
3084: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
// if exist_mode then
3089: LD_VAR 0 2
3093: IFFALSE 3118
// unit := CreateCharacter ( prefix & ident ) else
3095: LD_ADDR_VAR 0 5
3099: PUSH
3100: LD_VAR 0 3
3104: PUSH
3105: LD_VAR 0 1
3109: STR
3110: PPUSH
3111: CALL_OW 34
3115: ST_TO_ADDR
3116: GO 3133
// unit := NewCharacter ( ident ) ;
3118: LD_ADDR_VAR 0 5
3122: PUSH
3123: LD_VAR 0 1
3127: PPUSH
3128: CALL_OW 25
3132: ST_TO_ADDR
// result := unit ;
3133: LD_ADDR_VAR 0 4
3137: PUSH
3138: LD_VAR 0 5
3142: ST_TO_ADDR
// end ;
3143: LD_VAR 0 4
3147: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3148: LD_INT 0
3150: PPUSH
3151: PPUSH
// if not side or not nation then
3152: LD_VAR 0 1
3156: NOT
3157: IFTRUE 3166
3159: PUSH
3160: LD_VAR 0 2
3164: NOT
3165: OR
3166: IFFALSE 3170
// exit ;
3168: GO 3964
// case nation of nation_american :
3170: LD_VAR 0 2
3174: PUSH
3175: LD_INT 1
3177: DOUBLE
3178: EQUAL
3179: IFTRUE 3183
3181: GO 3405
3183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_INT 35
3191: PUSH
3192: LD_INT 45
3194: PUSH
3195: LD_INT 46
3197: PUSH
3198: LD_INT 47
3200: PUSH
3201: LD_INT 82
3203: PUSH
3204: LD_INT 83
3206: PUSH
3207: LD_INT 84
3209: PUSH
3210: LD_INT 85
3212: PUSH
3213: LD_INT 86
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: LD_INT 2
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: LD_INT 15
3227: PUSH
3228: LD_INT 16
3230: PUSH
3231: LD_INT 7
3233: PUSH
3234: LD_INT 12
3236: PUSH
3237: LD_INT 13
3239: PUSH
3240: LD_INT 10
3242: PUSH
3243: LD_INT 14
3245: PUSH
3246: LD_INT 20
3248: PUSH
3249: LD_INT 21
3251: PUSH
3252: LD_INT 22
3254: PUSH
3255: LD_INT 25
3257: PUSH
3258: LD_INT 32
3260: PUSH
3261: LD_INT 27
3263: PUSH
3264: LD_INT 36
3266: PUSH
3267: LD_INT 69
3269: PUSH
3270: LD_INT 39
3272: PUSH
3273: LD_INT 34
3275: PUSH
3276: LD_INT 40
3278: PUSH
3279: LD_INT 48
3281: PUSH
3282: LD_INT 49
3284: PUSH
3285: LD_INT 50
3287: PUSH
3288: LD_INT 51
3290: PUSH
3291: LD_INT 52
3293: PUSH
3294: LD_INT 53
3296: PUSH
3297: LD_INT 54
3299: PUSH
3300: LD_INT 55
3302: PUSH
3303: LD_INT 56
3305: PUSH
3306: LD_INT 57
3308: PUSH
3309: LD_INT 58
3311: PUSH
3312: LD_INT 59
3314: PUSH
3315: LD_INT 60
3317: PUSH
3318: LD_INT 61
3320: PUSH
3321: LD_INT 62
3323: PUSH
3324: LD_INT 80
3326: PUSH
3327: LD_INT 82
3329: PUSH
3330: LD_INT 83
3332: PUSH
3333: LD_INT 84
3335: PUSH
3336: LD_INT 85
3338: PUSH
3339: LD_INT 86
3341: PUSH
3342: LD_INT 90
3344: PUSH
3345: LD_INT 93
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: ST_TO_ADDR
3403: GO 3886
3405: LD_INT 2
3407: DOUBLE
3408: EQUAL
3409: IFTRUE 3413
3411: GO 3647
3413: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3414: LD_ADDR_VAR 0 4
3418: PUSH
3419: LD_INT 35
3421: PUSH
3422: LD_INT 45
3424: PUSH
3425: LD_INT 46
3427: PUSH
3428: LD_INT 47
3430: PUSH
3431: LD_INT 82
3433: PUSH
3434: LD_INT 83
3436: PUSH
3437: LD_INT 84
3439: PUSH
3440: LD_INT 85
3442: PUSH
3443: LD_INT 87
3445: PUSH
3446: LD_INT 70
3448: PUSH
3449: LD_INT 1
3451: PUSH
3452: LD_INT 11
3454: PUSH
3455: LD_INT 3
3457: PUSH
3458: LD_INT 4
3460: PUSH
3461: LD_INT 5
3463: PUSH
3464: LD_INT 6
3466: PUSH
3467: LD_INT 15
3469: PUSH
3470: LD_INT 18
3472: PUSH
3473: LD_INT 7
3475: PUSH
3476: LD_INT 17
3478: PUSH
3479: LD_INT 8
3481: PUSH
3482: LD_INT 20
3484: PUSH
3485: LD_INT 21
3487: PUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 72
3493: PUSH
3494: LD_INT 26
3496: PUSH
3497: LD_INT 69
3499: PUSH
3500: LD_INT 39
3502: PUSH
3503: LD_INT 40
3505: PUSH
3506: LD_INT 41
3508: PUSH
3509: LD_INT 42
3511: PUSH
3512: LD_INT 43
3514: PUSH
3515: LD_INT 48
3517: PUSH
3518: LD_INT 49
3520: PUSH
3521: LD_INT 50
3523: PUSH
3524: LD_INT 51
3526: PUSH
3527: LD_INT 52
3529: PUSH
3530: LD_INT 53
3532: PUSH
3533: LD_INT 54
3535: PUSH
3536: LD_INT 55
3538: PUSH
3539: LD_INT 56
3541: PUSH
3542: LD_INT 60
3544: PUSH
3545: LD_INT 61
3547: PUSH
3548: LD_INT 62
3550: PUSH
3551: LD_INT 66
3553: PUSH
3554: LD_INT 67
3556: PUSH
3557: LD_INT 68
3559: PUSH
3560: LD_INT 81
3562: PUSH
3563: LD_INT 82
3565: PUSH
3566: LD_INT 83
3568: PUSH
3569: LD_INT 84
3571: PUSH
3572: LD_INT 85
3574: PUSH
3575: LD_INT 87
3577: PUSH
3578: LD_INT 88
3580: PUSH
3581: LD_INT 92
3583: PUSH
3584: LD_INT 94
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: ST_TO_ADDR
3645: GO 3886
3647: LD_INT 3
3649: DOUBLE
3650: EQUAL
3651: IFTRUE 3655
3653: GO 3885
3655: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3656: LD_ADDR_VAR 0 4
3660: PUSH
3661: LD_INT 46
3663: PUSH
3664: LD_INT 47
3666: PUSH
3667: LD_INT 1
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 82
3675: PUSH
3676: LD_INT 83
3678: PUSH
3679: LD_INT 84
3681: PUSH
3682: LD_INT 85
3684: PUSH
3685: LD_INT 86
3687: PUSH
3688: LD_INT 11
3690: PUSH
3691: LD_INT 9
3693: PUSH
3694: LD_INT 20
3696: PUSH
3697: LD_INT 19
3699: PUSH
3700: LD_INT 21
3702: PUSH
3703: LD_INT 24
3705: PUSH
3706: LD_INT 22
3708: PUSH
3709: LD_INT 25
3711: PUSH
3712: LD_INT 28
3714: PUSH
3715: LD_INT 29
3717: PUSH
3718: LD_INT 30
3720: PUSH
3721: LD_INT 31
3723: PUSH
3724: LD_INT 37
3726: PUSH
3727: LD_INT 38
3729: PUSH
3730: LD_INT 32
3732: PUSH
3733: LD_INT 27
3735: PUSH
3736: LD_INT 33
3738: PUSH
3739: LD_INT 69
3741: PUSH
3742: LD_INT 39
3744: PUSH
3745: LD_INT 34
3747: PUSH
3748: LD_INT 40
3750: PUSH
3751: LD_INT 71
3753: PUSH
3754: LD_INT 23
3756: PUSH
3757: LD_INT 44
3759: PUSH
3760: LD_INT 48
3762: PUSH
3763: LD_INT 49
3765: PUSH
3766: LD_INT 50
3768: PUSH
3769: LD_INT 51
3771: PUSH
3772: LD_INT 52
3774: PUSH
3775: LD_INT 53
3777: PUSH
3778: LD_INT 54
3780: PUSH
3781: LD_INT 55
3783: PUSH
3784: LD_INT 56
3786: PUSH
3787: LD_INT 57
3789: PUSH
3790: LD_INT 58
3792: PUSH
3793: LD_INT 59
3795: PUSH
3796: LD_INT 63
3798: PUSH
3799: LD_INT 64
3801: PUSH
3802: LD_INT 65
3804: PUSH
3805: LD_INT 82
3807: PUSH
3808: LD_INT 83
3810: PUSH
3811: LD_INT 84
3813: PUSH
3814: LD_INT 85
3816: PUSH
3817: LD_INT 86
3819: PUSH
3820: LD_INT 89
3822: PUSH
3823: LD_INT 91
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: ST_TO_ADDR
3883: GO 3886
3885: POP
// if state > - 1 and state < 3 then
3886: LD_VAR 0 3
3890: PUSH
3891: LD_INT 1
3893: NEG
3894: GREATER
3895: IFFALSE 3907
3897: PUSH
3898: LD_VAR 0 3
3902: PUSH
3903: LD_INT 3
3905: LESS
3906: AND
3907: IFFALSE 3964
// for i in result do
3909: LD_ADDR_VAR 0 5
3913: PUSH
3914: LD_VAR 0 4
3918: PUSH
3919: FOR_IN
3920: IFFALSE 3962
// if GetTech ( i , side ) <> state then
3922: LD_VAR 0 5
3926: PPUSH
3927: LD_VAR 0 1
3931: PPUSH
3932: CALL_OW 321
3936: PUSH
3937: LD_VAR 0 3
3941: NONEQUAL
3942: IFFALSE 3960
// result := result diff i ;
3944: LD_ADDR_VAR 0 4
3948: PUSH
3949: LD_VAR 0 4
3953: PUSH
3954: LD_VAR 0 5
3958: DIFF
3959: ST_TO_ADDR
3960: GO 3919
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 4
3968: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
// result := true ;
3974: LD_ADDR_VAR 0 3
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3982: LD_ADDR_VAR 0 5
3986: PUSH
3987: LD_VAR 0 2
3991: PPUSH
3992: CALL_OW 480
3996: ST_TO_ADDR
// if not tmp then
3997: LD_VAR 0 5
4001: NOT
4002: IFFALSE 4006
// exit ;
4004: GO 4055
// for i in tmp do
4006: LD_ADDR_VAR 0 4
4010: PUSH
4011: LD_VAR 0 5
4015: PUSH
4016: FOR_IN
4017: IFFALSE 4053
// if GetTech ( i , side ) <> state_researched then
4019: LD_VAR 0 4
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 321
4033: PUSH
4034: LD_INT 2
4036: NONEQUAL
4037: IFFALSE 4051
// begin result := false ;
4039: LD_ADDR_VAR 0 3
4043: PUSH
4044: LD_INT 0
4046: ST_TO_ADDR
// exit ;
4047: POP
4048: POP
4049: GO 4055
// end ;
4051: GO 4016
4053: POP
4054: POP
// end ;
4055: LD_VAR 0 3
4059: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4060: LD_INT 0
4062: PPUSH
4063: PPUSH
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
4072: PPUSH
4073: PPUSH
4074: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4075: LD_VAR 0 1
4079: NOT
4080: IFTRUE 4097
4082: PUSH
4083: LD_VAR 0 1
4087: PPUSH
4088: CALL_OW 257
4092: PUSH
4093: LD_INT 9
4095: NONEQUAL
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 4680
// side := GetSide ( unit ) ;
4101: LD_ADDR_VAR 0 9
4105: PUSH
4106: LD_VAR 0 1
4110: PPUSH
4111: CALL_OW 255
4115: ST_TO_ADDR
// tech_space := tech_spacanom ;
4116: LD_ADDR_VAR 0 12
4120: PUSH
4121: LD_INT 29
4123: ST_TO_ADDR
// tech_time := tech_taurad ;
4124: LD_ADDR_VAR 0 13
4128: PUSH
4129: LD_INT 28
4131: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4132: LD_ADDR_VAR 0 11
4136: PUSH
4137: LD_VAR 0 1
4141: PPUSH
4142: CALL_OW 310
4146: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4147: LD_VAR 0 11
4151: PPUSH
4152: CALL_OW 247
4156: PUSH
4157: LD_INT 2
4159: EQUAL
4160: IFFALSE 4164
// exit ;
4162: GO 4680
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4164: LD_ADDR_VAR 0 8
4168: PUSH
4169: LD_INT 81
4171: PUSH
4172: LD_VAR 0 9
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 21
4186: PUSH
4187: LD_INT 3
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PPUSH
4202: CALL_OW 69
4206: ST_TO_ADDR
// if not tmp then
4207: LD_VAR 0 8
4211: NOT
4212: IFFALSE 4216
// exit ;
4214: GO 4680
// if in_unit then
4216: LD_VAR 0 11
4220: IFFALSE 4244
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4222: LD_ADDR_VAR 0 10
4226: PUSH
4227: LD_VAR 0 8
4231: PPUSH
4232: LD_VAR 0 11
4236: PPUSH
4237: CALL_OW 74
4241: ST_TO_ADDR
4242: GO 4264
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4244: LD_ADDR_VAR 0 10
4248: PUSH
4249: LD_VAR 0 8
4253: PPUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 74
4263: ST_TO_ADDR
// if not enemy then
4264: LD_VAR 0 10
4268: NOT
4269: IFFALSE 4273
// exit ;
4271: GO 4680
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4273: LD_VAR 0 11
4277: IFFALSE 4299
4279: PUSH
4280: LD_VAR 0 11
4284: PPUSH
4285: LD_VAR 0 10
4289: PPUSH
4290: CALL_OW 296
4294: PUSH
4295: LD_INT 13
4297: GREATER
4298: AND
4299: IFTRUE 4321
4301: PUSH
4302: LD_VAR 0 1
4306: PPUSH
4307: LD_VAR 0 10
4311: PPUSH
4312: CALL_OW 296
4316: PUSH
4317: LD_INT 12
4319: GREATER
4320: OR
4321: IFFALSE 4325
// exit ;
4323: GO 4680
// missile := [ 1 ] ;
4325: LD_ADDR_VAR 0 14
4329: PUSH
4330: LD_INT 1
4332: PUSH
4333: EMPTY
4334: LIST
4335: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4336: LD_VAR 0 9
4340: PPUSH
4341: LD_VAR 0 12
4345: PPUSH
4346: CALL_OW 325
4350: IFFALSE 4379
// missile := Replace ( missile , missile + 1 , 2 ) ;
4352: LD_ADDR_VAR 0 14
4356: PUSH
4357: LD_VAR 0 14
4361: PPUSH
4362: LD_VAR 0 14
4366: PUSH
4367: LD_INT 1
4369: PLUS
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: CALL_OW 1
4378: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4379: LD_VAR 0 9
4383: PPUSH
4384: LD_VAR 0 13
4388: PPUSH
4389: CALL_OW 325
4393: IFFALSE 4417
4395: PUSH
4396: LD_VAR 0 10
4400: PPUSH
4401: CALL_OW 255
4405: PPUSH
4406: LD_VAR 0 13
4410: PPUSH
4411: CALL_OW 325
4415: NOT
4416: AND
4417: IFFALSE 4446
// missile := Replace ( missile , missile + 1 , 3 ) ;
4419: LD_ADDR_VAR 0 14
4423: PUSH
4424: LD_VAR 0 14
4428: PPUSH
4429: LD_VAR 0 14
4433: PUSH
4434: LD_INT 1
4436: PLUS
4437: PPUSH
4438: LD_INT 3
4440: PPUSH
4441: CALL_OW 1
4445: ST_TO_ADDR
// if missile < 2 then
4446: LD_VAR 0 14
4450: PUSH
4451: LD_INT 2
4453: LESS
4454: IFFALSE 4458
// exit ;
4456: GO 4680
// x := GetX ( enemy ) ;
4458: LD_ADDR_VAR 0 4
4462: PUSH
4463: LD_VAR 0 10
4467: PPUSH
4468: CALL_OW 250
4472: ST_TO_ADDR
// y := GetY ( enemy ) ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: LD_VAR 0 10
4482: PPUSH
4483: CALL_OW 251
4487: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4488: LD_ADDR_VAR 0 6
4492: PUSH
4493: LD_VAR 0 4
4497: PUSH
4498: LD_INT 1
4500: NEG
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 12
4509: PLUS
4510: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4511: LD_ADDR_VAR 0 7
4515: PUSH
4516: LD_VAR 0 5
4520: PUSH
4521: LD_INT 1
4523: NEG
4524: PPUSH
4525: LD_INT 1
4527: PPUSH
4528: CALL_OW 12
4532: PLUS
4533: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4534: LD_VAR 0 6
4538: PPUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: CALL_OW 488
4548: NOT
4549: IFFALSE 4571
// begin _x := x ;
4551: LD_ADDR_VAR 0 6
4555: PUSH
4556: LD_VAR 0 4
4560: ST_TO_ADDR
// _y := y ;
4561: LD_ADDR_VAR 0 7
4565: PUSH
4566: LD_VAR 0 5
4570: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 14
4583: PPUSH
4584: CALL_OW 12
4588: ST_TO_ADDR
// case i of 1 :
4589: LD_VAR 0 3
4593: PUSH
4594: LD_INT 1
4596: DOUBLE
4597: EQUAL
4598: IFTRUE 4602
4600: GO 4619
4602: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4603: LD_VAR 0 1
4607: PPUSH
4608: LD_VAR 0 10
4612: PPUSH
4613: CALL_OW 115
4617: GO 4680
4619: LD_INT 2
4621: DOUBLE
4622: EQUAL
4623: IFTRUE 4627
4625: GO 4649
4627: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4628: LD_VAR 0 1
4632: PPUSH
4633: LD_VAR 0 6
4637: PPUSH
4638: LD_VAR 0 7
4642: PPUSH
4643: CALL_OW 153
4647: GO 4680
4649: LD_INT 3
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4679
4657: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4658: LD_VAR 0 1
4662: PPUSH
4663: LD_VAR 0 6
4667: PPUSH
4668: LD_VAR 0 7
4672: PPUSH
4673: CALL_OW 154
4677: GO 4680
4679: POP
// end ;
4680: LD_VAR 0 2
4684: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4685: LD_INT 0
4687: PPUSH
4688: PPUSH
4689: PPUSH
4690: PPUSH
4691: PPUSH
4692: PPUSH
// if not unit or not building then
4693: LD_VAR 0 1
4697: NOT
4698: IFTRUE 4707
4700: PUSH
4701: LD_VAR 0 2
4705: NOT
4706: OR
4707: IFFALSE 4711
// exit ;
4709: GO 4869
// x := GetX ( building ) ;
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: LD_VAR 0 2
4720: PPUSH
4721: CALL_OW 250
4725: ST_TO_ADDR
// y := GetY ( building ) ;
4726: LD_ADDR_VAR 0 6
4730: PUSH
4731: LD_VAR 0 2
4735: PPUSH
4736: CALL_OW 251
4740: ST_TO_ADDR
// for i := 0 to 5 do
4741: LD_ADDR_VAR 0 4
4745: PUSH
4746: DOUBLE
4747: LD_INT 0
4749: DEC
4750: ST_TO_ADDR
4751: LD_INT 5
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4867
// begin _x := ShiftX ( x , i , 3 ) ;
4757: LD_ADDR_VAR 0 7
4761: PUSH
4762: LD_VAR 0 5
4766: PPUSH
4767: LD_VAR 0 4
4771: PPUSH
4772: LD_INT 3
4774: PPUSH
4775: CALL_OW 272
4779: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4780: LD_ADDR_VAR 0 8
4784: PUSH
4785: LD_VAR 0 6
4789: PPUSH
4790: LD_VAR 0 4
4794: PPUSH
4795: LD_INT 3
4797: PPUSH
4798: CALL_OW 273
4802: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4803: LD_VAR 0 7
4807: PPUSH
4808: LD_VAR 0 8
4812: PPUSH
4813: CALL_OW 488
4817: NOT
4818: IFFALSE 4822
// continue ;
4820: GO 4754
// if HexInfo ( _x , _y ) = 0 then
4822: LD_VAR 0 7
4826: PPUSH
4827: LD_VAR 0 8
4831: PPUSH
4832: CALL_OW 428
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: IFFALSE 4865
// begin ComMoveXY ( unit , _x , _y ) ;
4842: LD_VAR 0 1
4846: PPUSH
4847: LD_VAR 0 7
4851: PPUSH
4852: LD_VAR 0 8
4856: PPUSH
4857: CALL_OW 111
// exit ;
4861: POP
4862: POP
4863: GO 4869
// end ; end ;
4865: GO 4754
4867: POP
4868: POP
// end ;
4869: LD_VAR 0 3
4873: RET
// export function ScanBase ( side , base_area ) ; begin
4874: LD_INT 0
4876: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: PPUSH
4887: LD_INT 81
4889: PUSH
4890: LD_VAR 0 1
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PPUSH
4899: CALL_OW 70
4903: ST_TO_ADDR
// end ;
4904: LD_VAR 0 3
4908: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4909: LD_INT 0
4911: PPUSH
4912: PPUSH
4913: PPUSH
4914: PPUSH
// result := false ;
4915: LD_ADDR_VAR 0 2
4919: PUSH
4920: LD_INT 0
4922: ST_TO_ADDR
// side := GetSide ( unit ) ;
4923: LD_ADDR_VAR 0 3
4927: PUSH
4928: LD_VAR 0 1
4932: PPUSH
4933: CALL_OW 255
4937: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4938: LD_ADDR_VAR 0 4
4942: PUSH
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 248
4952: ST_TO_ADDR
// case nat of 1 :
4953: LD_VAR 0 4
4957: PUSH
4958: LD_INT 1
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 4977
4966: POP
// tech := tech_lassight ; 2 :
4967: LD_ADDR_VAR 0 5
4971: PUSH
4972: LD_INT 12
4974: ST_TO_ADDR
4975: GO 5016
4977: LD_INT 2
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 4996
4985: POP
// tech := tech_mortar ; 3 :
4986: LD_ADDR_VAR 0 5
4990: PUSH
4991: LD_INT 41
4993: ST_TO_ADDR
4994: GO 5016
4996: LD_INT 3
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5004
5002: GO 5015
5004: POP
// tech := tech_bazooka ; end ;
5005: LD_ADDR_VAR 0 5
5009: PUSH
5010: LD_INT 44
5012: ST_TO_ADDR
5013: GO 5016
5015: POP
// if Researched ( side , tech ) then
5016: LD_VAR 0 3
5020: PPUSH
5021: LD_VAR 0 5
5025: PPUSH
5026: CALL_OW 325
5030: IFFALSE 5057
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: LD_INT 5
5039: PUSH
5040: LD_INT 8
5042: PUSH
5043: LD_INT 9
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 4
5055: ARRAY
5056: ST_TO_ADDR
// end ;
5057: LD_VAR 0 2
5061: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5062: LD_INT 0
5064: PPUSH
5065: PPUSH
5066: PPUSH
// if not mines then
5067: LD_VAR 0 2
5071: NOT
5072: IFFALSE 5076
// exit ;
5074: GO 5220
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5076: LD_ADDR_VAR 0 5
5080: PUSH
5081: LD_INT 81
5083: PUSH
5084: LD_VAR 0 1
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 3
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 3
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: ST_TO_ADDR
// for i in mines do
5119: LD_ADDR_VAR 0 4
5123: PUSH
5124: LD_VAR 0 2
5128: PUSH
5129: FOR_IN
5130: IFFALSE 5218
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5132: LD_VAR 0 4
5136: PUSH
5137: LD_INT 1
5139: ARRAY
5140: PPUSH
5141: LD_VAR 0 4
5145: PUSH
5146: LD_INT 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 458
5154: NOT
5155: IFFALSE 5159
// continue ;
5157: GO 5129
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5159: LD_VAR 0 4
5163: PUSH
5164: LD_INT 1
5166: ARRAY
5167: PPUSH
5168: LD_VAR 0 4
5172: PUSH
5173: LD_INT 2
5175: ARRAY
5176: PPUSH
5177: CALL_OW 428
5181: PUSH
5182: LD_VAR 0 5
5186: IN
5187: IFFALSE 5216
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 1
5196: ARRAY
5197: PPUSH
5198: LD_VAR 0 4
5202: PUSH
5203: LD_INT 2
5205: ARRAY
5206: PPUSH
5207: LD_VAR 0 1
5211: PPUSH
5212: CALL_OW 456
// end ;
5216: GO 5129
5218: POP
5219: POP
// end ;
5220: LD_VAR 0 3
5224: RET
// export function Count ( array ) ; begin
5225: LD_INT 0
5227: PPUSH
// result := array + 0 ;
5228: LD_ADDR_VAR 0 2
5232: PUSH
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 0
5240: PLUS
5241: ST_TO_ADDR
// end ;
5242: LD_VAR 0 2
5246: RET
// export function IsEmpty ( building ) ; begin
5247: LD_INT 0
5249: PPUSH
// if not building then
5250: LD_VAR 0 1
5254: NOT
5255: IFFALSE 5259
// exit ;
5257: GO 5302
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5259: LD_ADDR_VAR 0 2
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 22
5271: PUSH
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 255
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 58
5288: PUSH
5289: EMPTY
5290: LIST
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PPUSH
5296: CALL_OW 69
5300: IN
5301: ST_TO_ADDR
// end ;
5302: LD_VAR 0 2
5306: RET
// export function IsNotFull ( building ) ; var places ; begin
5307: LD_INT 0
5309: PPUSH
5310: PPUSH
// if not building then
5311: LD_VAR 0 1
5315: NOT
5316: IFFALSE 5320
// exit ;
5318: GO 5348
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5320: LD_ADDR_VAR 0 2
5324: PUSH
5325: LD_VAR 0 1
5329: PPUSH
5330: LD_INT 3
5332: PUSH
5333: LD_INT 62
5335: PUSH
5336: EMPTY
5337: LIST
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PPUSH
5343: CALL_OW 72
5347: ST_TO_ADDR
// end ;
5348: LD_VAR 0 2
5352: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
// tmp := [ ] ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: EMPTY
5365: ST_TO_ADDR
// list := [ ] ;
5366: LD_ADDR_VAR 0 5
5370: PUSH
5371: EMPTY
5372: ST_TO_ADDR
// for i = 16 to 25 do
5373: LD_ADDR_VAR 0 4
5377: PUSH
5378: DOUBLE
5379: LD_INT 16
5381: DEC
5382: ST_TO_ADDR
5383: LD_INT 25
5385: PUSH
5386: FOR_TO
5387: IFFALSE 5460
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5389: LD_ADDR_VAR 0 3
5393: PUSH
5394: LD_VAR 0 3
5398: PUSH
5399: LD_INT 22
5401: PUSH
5402: LD_VAR 0 1
5406: PPUSH
5407: CALL_OW 255
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 91
5418: PUSH
5419: LD_VAR 0 1
5423: PUSH
5424: LD_INT 6
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 30
5434: PUSH
5435: LD_VAR 0 4
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: ADD
5457: ST_TO_ADDR
5458: GO 5386
5460: POP
5461: POP
// for i = 1 to tmp do
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: DOUBLE
5468: LD_INT 1
5470: DEC
5471: ST_TO_ADDR
5472: LD_VAR 0 3
5476: PUSH
5477: FOR_TO
5478: IFFALSE 5566
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5480: LD_ADDR_VAR 0 5
5484: PUSH
5485: LD_VAR 0 5
5489: PUSH
5490: LD_VAR 0 3
5494: PUSH
5495: LD_VAR 0 4
5499: ARRAY
5500: PPUSH
5501: CALL_OW 266
5505: PUSH
5506: LD_VAR 0 3
5510: PUSH
5511: LD_VAR 0 4
5515: ARRAY
5516: PPUSH
5517: CALL_OW 250
5521: PUSH
5522: LD_VAR 0 3
5526: PUSH
5527: LD_VAR 0 4
5531: ARRAY
5532: PPUSH
5533: CALL_OW 251
5537: PUSH
5538: LD_VAR 0 3
5542: PUSH
5543: LD_VAR 0 4
5547: ARRAY
5548: PPUSH
5549: CALL_OW 254
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: EMPTY
5561: LIST
5562: ADD
5563: ST_TO_ADDR
5564: GO 5477
5566: POP
5567: POP
// result := list ;
5568: LD_ADDR_VAR 0 2
5572: PUSH
5573: LD_VAR 0 5
5577: ST_TO_ADDR
// end ;
5578: LD_VAR 0 2
5582: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5583: LD_INT 0
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
5590: PPUSH
5591: PPUSH
// if not factory then
5592: LD_VAR 0 1
5596: NOT
5597: IFFALSE 5601
// exit ;
5599: GO 6204
// if control = control_apeman then
5601: LD_VAR 0 4
5605: PUSH
5606: LD_INT 5
5608: EQUAL
5609: IFFALSE 5718
// begin tmp := UnitsInside ( factory ) ;
5611: LD_ADDR_VAR 0 8
5615: PUSH
5616: LD_VAR 0 1
5620: PPUSH
5621: CALL_OW 313
5625: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5626: LD_VAR 0 8
5630: PPUSH
5631: LD_INT 25
5633: PUSH
5634: LD_INT 12
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 72
5645: NOT
5646: IFFALSE 5656
// control := control_manual ;
5648: LD_ADDR_VAR 0 4
5652: PUSH
5653: LD_INT 1
5655: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5656: LD_ADDR_VAR 0 8
5660: PUSH
5661: LD_VAR 0 1
5665: PPUSH
5666: CALL 5353 0 1
5670: ST_TO_ADDR
// if tmp then
5671: LD_VAR 0 8
5675: IFFALSE 5718
// begin for i in tmp do
5677: LD_ADDR_VAR 0 7
5681: PUSH
5682: LD_VAR 0 8
5686: PUSH
5687: FOR_IN
5688: IFFALSE 5716
// if i [ 1 ] = b_ext_radio then
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: PUSH
5699: LD_INT 22
5701: EQUAL
5702: IFFALSE 5714
// begin control := control_remote ;
5704: LD_ADDR_VAR 0 4
5708: PUSH
5709: LD_INT 2
5711: ST_TO_ADDR
// break ;
5712: GO 5716
// end ;
5714: GO 5687
5716: POP
5717: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: LD_VAR 0 4
5737: PPUSH
5738: LD_VAR 0 5
5742: PPUSH
5743: CALL_OW 448
5747: IFFALSE 5782
// begin result := [ chassis , engine , control , weapon ] ;
5749: LD_ADDR_VAR 0 6
5753: PUSH
5754: LD_VAR 0 2
5758: PUSH
5759: LD_VAR 0 3
5763: PUSH
5764: LD_VAR 0 4
5768: PUSH
5769: LD_VAR 0 5
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: ST_TO_ADDR
// exit ;
5780: GO 6204
// end ; _chassis := AvailableChassisList ( factory ) ;
5782: LD_ADDR_VAR 0 9
5786: PUSH
5787: LD_VAR 0 1
5791: PPUSH
5792: CALL_OW 475
5796: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5797: LD_ADDR_VAR 0 11
5801: PUSH
5802: LD_VAR 0 1
5806: PPUSH
5807: CALL_OW 476
5811: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5812: LD_ADDR_VAR 0 12
5816: PUSH
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 477
5826: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5827: LD_ADDR_VAR 0 10
5831: PUSH
5832: LD_VAR 0 1
5836: PPUSH
5837: CALL_OW 478
5841: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5842: LD_VAR 0 9
5846: NOT
5847: IFTRUE 5856
5849: PUSH
5850: LD_VAR 0 11
5854: NOT
5855: OR
5856: IFTRUE 5865
5858: PUSH
5859: LD_VAR 0 12
5863: NOT
5864: OR
5865: IFTRUE 5874
5867: PUSH
5868: LD_VAR 0 10
5872: NOT
5873: OR
5874: IFFALSE 5909
// begin result := [ chassis , engine , control , weapon ] ;
5876: LD_ADDR_VAR 0 6
5880: PUSH
5881: LD_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: LD_VAR 0 4
5895: PUSH
5896: LD_VAR 0 5
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: ST_TO_ADDR
// exit ;
5907: GO 6204
// end ; if not chassis in _chassis then
5909: LD_VAR 0 2
5913: PUSH
5914: LD_VAR 0 9
5918: IN
5919: NOT
5920: IFFALSE 5946
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5922: LD_ADDR_VAR 0 2
5926: PUSH
5927: LD_VAR 0 9
5931: PUSH
5932: LD_INT 1
5934: PPUSH
5935: LD_VAR 0 9
5939: PPUSH
5940: CALL_OW 12
5944: ARRAY
5945: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_VAR 0 3
5955: PPUSH
5956: CALL 6209 0 2
5960: NOT
5961: IFFALSE 6022
// repeat engine := _engine [ 1 ] ;
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_VAR 0 11
5972: PUSH
5973: LD_INT 1
5975: ARRAY
5976: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5977: LD_ADDR_VAR 0 11
5981: PUSH
5982: LD_VAR 0 11
5986: PPUSH
5987: LD_INT 1
5989: PPUSH
5990: CALL_OW 3
5994: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5995: LD_VAR 0 2
5999: PPUSH
6000: LD_VAR 0 3
6004: PPUSH
6005: CALL 6209 0 2
6009: IFTRUE 6020
6011: PUSH
6012: LD_VAR 0 11
6016: PUSH
6017: EMPTY
6018: EQUAL
6019: OR
6020: IFFALSE 5963
// if not control in _control then
6022: LD_VAR 0 4
6026: PUSH
6027: LD_VAR 0 12
6031: IN
6032: NOT
6033: IFFALSE 6059
// control := _control [ rand ( 1 , _control ) ] ;
6035: LD_ADDR_VAR 0 4
6039: PUSH
6040: LD_VAR 0 12
6044: PUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_VAR 0 12
6052: PPUSH
6053: CALL_OW 12
6057: ARRAY
6058: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 5
6068: PPUSH
6069: CALL 6431 0 2
6073: NOT
6074: IFFALSE 6135
// repeat weapon := _weapon [ 1 ] ;
6076: LD_ADDR_VAR 0 5
6080: PUSH
6081: LD_VAR 0 10
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6090: LD_ADDR_VAR 0 10
6094: PUSH
6095: LD_VAR 0 10
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: CALL_OW 3
6107: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6108: LD_VAR 0 2
6112: PPUSH
6113: LD_VAR 0 5
6117: PPUSH
6118: CALL 6431 0 2
6122: IFTRUE 6133
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: EMPTY
6131: EQUAL
6132: OR
6133: IFFALSE 6076
// result := [ ] ;
6135: LD_ADDR_VAR 0 6
6139: PUSH
6140: EMPTY
6141: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6142: LD_VAR 0 1
6146: PPUSH
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_VAR 0 3
6156: PPUSH
6157: LD_VAR 0 4
6161: PPUSH
6162: LD_VAR 0 5
6166: PPUSH
6167: CALL_OW 448
6171: IFFALSE 6204
// result := [ chassis , engine , control , weapon ] ;
6173: LD_ADDR_VAR 0 6
6177: PUSH
6178: LD_VAR 0 2
6182: PUSH
6183: LD_VAR 0 3
6187: PUSH
6188: LD_VAR 0 4
6192: PUSH
6193: LD_VAR 0 5
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 6
6208: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6209: LD_INT 0
6211: PPUSH
// if not chassis or not engine then
6212: LD_VAR 0 1
6216: NOT
6217: IFTRUE 6226
6219: PUSH
6220: LD_VAR 0 2
6224: NOT
6225: OR
6226: IFFALSE 6230
// exit ;
6228: GO 6426
// case engine of engine_solar :
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 2
6237: DOUBLE
6238: EQUAL
6239: IFTRUE 6243
6241: GO 6281
6243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_INT 11
6251: PUSH
6252: LD_INT 12
6254: PUSH
6255: LD_INT 13
6257: PUSH
6258: LD_INT 14
6260: PUSH
6261: LD_INT 1
6263: PUSH
6264: LD_INT 2
6266: PUSH
6267: LD_INT 3
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: ST_TO_ADDR
6279: GO 6410
6281: LD_INT 1
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6351
6289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 11
6297: PUSH
6298: LD_INT 12
6300: PUSH
6301: LD_INT 13
6303: PUSH
6304: LD_INT 14
6306: PUSH
6307: LD_INT 1
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 3
6315: PUSH
6316: LD_INT 4
6318: PUSH
6319: LD_INT 5
6321: PUSH
6322: LD_INT 21
6324: PUSH
6325: LD_INT 23
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: ST_TO_ADDR
6349: GO 6410
6351: LD_INT 3
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6409
6359: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_INT 13
6367: PUSH
6368: LD_INT 14
6370: PUSH
6371: LD_INT 2
6373: PUSH
6374: LD_INT 3
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: LD_INT 5
6382: PUSH
6383: LD_INT 21
6385: PUSH
6386: LD_INT 22
6388: PUSH
6389: LD_INT 23
6391: PUSH
6392: LD_INT 24
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: ST_TO_ADDR
6407: GO 6410
6409: POP
// result := ( chassis in result ) ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: LD_VAR 0 1
6419: PUSH
6420: LD_VAR 0 3
6424: IN
6425: ST_TO_ADDR
// end ;
6426: LD_VAR 0 3
6430: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6431: LD_INT 0
6433: PPUSH
// if not chassis or not weapon then
6434: LD_VAR 0 1
6438: NOT
6439: IFTRUE 6448
6441: PUSH
6442: LD_VAR 0 2
6446: NOT
6447: OR
6448: IFFALSE 6452
// exit ;
6450: GO 7546
// case weapon of us_machine_gun :
6452: LD_VAR 0 2
6456: PUSH
6457: LD_INT 2
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6495
6465: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6466: LD_ADDR_VAR 0 3
6470: PUSH
6471: LD_INT 1
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 4
6482: PUSH
6483: LD_INT 5
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: ST_TO_ADDR
6493: GO 7530
6495: LD_INT 3
6497: DOUBLE
6498: EQUAL
6499: IFTRUE 6503
6501: GO 6533
6503: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6504: LD_ADDR_VAR 0 3
6508: PUSH
6509: LD_INT 1
6511: PUSH
6512: LD_INT 2
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 4
6520: PUSH
6521: LD_INT 5
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: ST_TO_ADDR
6531: GO 7530
6533: LD_INT 11
6535: DOUBLE
6536: EQUAL
6537: IFTRUE 6541
6539: GO 6571
6541: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6542: LD_ADDR_VAR 0 3
6546: PUSH
6547: LD_INT 1
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: LD_INT 3
6555: PUSH
6556: LD_INT 4
6558: PUSH
6559: LD_INT 5
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
6569: GO 7530
6571: LD_INT 4
6573: DOUBLE
6574: EQUAL
6575: IFTRUE 6579
6577: GO 6605
6579: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6580: LD_ADDR_VAR 0 3
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: LD_INT 3
6590: PUSH
6591: LD_INT 4
6593: PUSH
6594: LD_INT 5
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: ST_TO_ADDR
6603: GO 7530
6605: LD_INT 5
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6639
6613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6614: LD_ADDR_VAR 0 3
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 3
6624: PUSH
6625: LD_INT 4
6627: PUSH
6628: LD_INT 5
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: ST_TO_ADDR
6637: GO 7530
6639: LD_INT 9
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6673
6647: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 3
6658: PUSH
6659: LD_INT 4
6661: PUSH
6662: LD_INT 5
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
6671: GO 7530
6673: LD_INT 7
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6681
6679: GO 6707
6681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 4
6695: PUSH
6696: LD_INT 5
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: ST_TO_ADDR
6705: GO 7530
6707: LD_INT 12
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 6741
6715: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: LD_INT 2
6723: PUSH
6724: LD_INT 3
6726: PUSH
6727: LD_INT 4
6729: PUSH
6730: LD_INT 5
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: ST_TO_ADDR
6739: GO 7530
6741: LD_INT 13
6743: DOUBLE
6744: EQUAL
6745: IFTRUE 6749
6747: GO 6775
6749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_INT 2
6757: PUSH
6758: LD_INT 3
6760: PUSH
6761: LD_INT 4
6763: PUSH
6764: LD_INT 5
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: ST_TO_ADDR
6773: GO 7530
6775: LD_INT 14
6777: DOUBLE
6778: EQUAL
6779: IFTRUE 6783
6781: GO 6801
6783: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: LD_INT 4
6791: PUSH
6792: LD_INT 5
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: ST_TO_ADDR
6799: GO 7530
6801: LD_INT 6
6803: DOUBLE
6804: EQUAL
6805: IFTRUE 6809
6807: GO 6827
6809: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6810: LD_ADDR_VAR 0 3
6814: PUSH
6815: LD_INT 4
6817: PUSH
6818: LD_INT 5
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: ST_TO_ADDR
6825: GO 7530
6827: LD_INT 10
6829: DOUBLE
6830: EQUAL
6831: IFTRUE 6835
6833: GO 6853
6835: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6836: LD_ADDR_VAR 0 3
6840: PUSH
6841: LD_INT 4
6843: PUSH
6844: LD_INT 5
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: ST_TO_ADDR
6851: GO 7530
6853: LD_INT 22
6855: DOUBLE
6856: EQUAL
6857: IFTRUE 6861
6859: GO 6887
6861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_INT 11
6869: PUSH
6870: LD_INT 12
6872: PUSH
6873: LD_INT 13
6875: PUSH
6876: LD_INT 14
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: ST_TO_ADDR
6885: GO 7530
6887: LD_INT 23
6889: DOUBLE
6890: EQUAL
6891: IFTRUE 6895
6893: GO 6921
6895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 11
6903: PUSH
6904: LD_INT 12
6906: PUSH
6907: LD_INT 13
6909: PUSH
6910: LD_INT 14
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: ST_TO_ADDR
6919: GO 7530
6921: LD_INT 24
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 6955
6929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_INT 11
6937: PUSH
6938: LD_INT 12
6940: PUSH
6941: LD_INT 13
6943: PUSH
6944: LD_INT 14
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: ST_TO_ADDR
6953: GO 7530
6955: LD_INT 30
6957: DOUBLE
6958: EQUAL
6959: IFTRUE 6963
6961: GO 6989
6963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6964: LD_ADDR_VAR 0 3
6968: PUSH
6969: LD_INT 11
6971: PUSH
6972: LD_INT 12
6974: PUSH
6975: LD_INT 13
6977: PUSH
6978: LD_INT 14
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: ST_TO_ADDR
6987: GO 7530
6989: LD_INT 25
6991: DOUBLE
6992: EQUAL
6993: IFTRUE 6997
6995: GO 7015
6997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6998: LD_ADDR_VAR 0 3
7002: PUSH
7003: LD_INT 13
7005: PUSH
7006: LD_INT 14
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: ST_TO_ADDR
7013: GO 7530
7015: LD_INT 27
7017: DOUBLE
7018: EQUAL
7019: IFTRUE 7023
7021: GO 7041
7023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7024: LD_ADDR_VAR 0 3
7028: PUSH
7029: LD_INT 13
7031: PUSH
7032: LD_INT 14
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: ST_TO_ADDR
7039: GO 7530
7041: LD_INT 92
7043: DOUBLE
7044: EQUAL
7045: IFTRUE 7049
7047: GO 7075
7049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7050: LD_ADDR_VAR 0 3
7054: PUSH
7055: LD_INT 11
7057: PUSH
7058: LD_INT 12
7060: PUSH
7061: LD_INT 13
7063: PUSH
7064: LD_INT 14
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: ST_TO_ADDR
7073: GO 7530
7075: LD_INT 28
7077: DOUBLE
7078: EQUAL
7079: IFTRUE 7083
7081: GO 7101
7083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: LD_INT 13
7091: PUSH
7092: LD_INT 14
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: ST_TO_ADDR
7099: GO 7530
7101: LD_INT 29
7103: DOUBLE
7104: EQUAL
7105: IFTRUE 7109
7107: GO 7127
7109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: LD_INT 13
7117: PUSH
7118: LD_INT 14
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: ST_TO_ADDR
7125: GO 7530
7127: LD_INT 31
7129: DOUBLE
7130: EQUAL
7131: IFTRUE 7135
7133: GO 7153
7135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7136: LD_ADDR_VAR 0 3
7140: PUSH
7141: LD_INT 13
7143: PUSH
7144: LD_INT 14
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: ST_TO_ADDR
7151: GO 7530
7153: LD_INT 26
7155: DOUBLE
7156: EQUAL
7157: IFTRUE 7161
7159: GO 7179
7161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7162: LD_ADDR_VAR 0 3
7166: PUSH
7167: LD_INT 13
7169: PUSH
7170: LD_INT 14
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: ST_TO_ADDR
7177: GO 7530
7179: LD_INT 42
7181: DOUBLE
7182: EQUAL
7183: IFTRUE 7187
7185: GO 7213
7187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7188: LD_ADDR_VAR 0 3
7192: PUSH
7193: LD_INT 21
7195: PUSH
7196: LD_INT 22
7198: PUSH
7199: LD_INT 23
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: ST_TO_ADDR
7211: GO 7530
7213: LD_INT 43
7215: DOUBLE
7216: EQUAL
7217: IFTRUE 7221
7219: GO 7247
7221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: LD_INT 21
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_INT 23
7235: PUSH
7236: LD_INT 24
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: ST_TO_ADDR
7245: GO 7530
7247: LD_INT 44
7249: DOUBLE
7250: EQUAL
7251: IFTRUE 7255
7253: GO 7281
7255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7256: LD_ADDR_VAR 0 3
7260: PUSH
7261: LD_INT 21
7263: PUSH
7264: LD_INT 22
7266: PUSH
7267: LD_INT 23
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: ST_TO_ADDR
7279: GO 7530
7281: LD_INT 45
7283: DOUBLE
7284: EQUAL
7285: IFTRUE 7289
7287: GO 7315
7289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_INT 21
7297: PUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 23
7303: PUSH
7304: LD_INT 24
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: ST_TO_ADDR
7313: GO 7530
7315: LD_INT 49
7317: DOUBLE
7318: EQUAL
7319: IFTRUE 7323
7321: GO 7349
7323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: LD_INT 21
7331: PUSH
7332: LD_INT 22
7334: PUSH
7335: LD_INT 23
7337: PUSH
7338: LD_INT 24
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: ST_TO_ADDR
7347: GO 7530
7349: LD_INT 51
7351: DOUBLE
7352: EQUAL
7353: IFTRUE 7357
7355: GO 7383
7357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7358: LD_ADDR_VAR 0 3
7362: PUSH
7363: LD_INT 21
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 23
7371: PUSH
7372: LD_INT 24
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7530
7383: LD_INT 52
7385: DOUBLE
7386: EQUAL
7387: IFTRUE 7391
7389: GO 7417
7391: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_INT 21
7399: PUSH
7400: LD_INT 22
7402: PUSH
7403: LD_INT 23
7405: PUSH
7406: LD_INT 24
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: ST_TO_ADDR
7415: GO 7530
7417: LD_INT 53
7419: DOUBLE
7420: EQUAL
7421: IFTRUE 7425
7423: GO 7443
7425: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_INT 23
7433: PUSH
7434: LD_INT 24
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 7530
7443: LD_INT 46
7445: DOUBLE
7446: EQUAL
7447: IFTRUE 7451
7449: GO 7469
7451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7452: LD_ADDR_VAR 0 3
7456: PUSH
7457: LD_INT 23
7459: PUSH
7460: LD_INT 24
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: ST_TO_ADDR
7467: GO 7530
7469: LD_INT 47
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7495
7477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 23
7485: PUSH
7486: LD_INT 24
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: ST_TO_ADDR
7493: GO 7530
7495: LD_INT 98
7497: DOUBLE
7498: EQUAL
7499: IFTRUE 7503
7501: GO 7529
7503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7504: LD_ADDR_VAR 0 3
7508: PUSH
7509: LD_INT 21
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 23
7517: PUSH
7518: LD_INT 24
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
7527: GO 7530
7529: POP
// result := ( chassis in result ) ;
7530: LD_ADDR_VAR 0 3
7534: PUSH
7535: LD_VAR 0 1
7539: PUSH
7540: LD_VAR 0 3
7544: IN
7545: ST_TO_ADDR
// end ;
7546: LD_VAR 0 3
7550: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
// result := array ;
7560: LD_ADDR_VAR 0 5
7564: PUSH
7565: LD_VAR 0 1
7569: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7570: LD_VAR 0 1
7574: NOT
7575: IFTRUE 7584
7577: PUSH
7578: LD_VAR 0 2
7582: NOT
7583: OR
7584: IFTRUE 7593
7586: PUSH
7587: LD_VAR 0 3
7591: NOT
7592: OR
7593: IFTRUE 7607
7595: PUSH
7596: LD_VAR 0 2
7600: PUSH
7601: LD_VAR 0 1
7605: GREATER
7606: OR
7607: IFTRUE 7621
7609: PUSH
7610: LD_VAR 0 3
7614: PUSH
7615: LD_VAR 0 1
7619: GREATER
7620: OR
7621: IFFALSE 7625
// exit ;
7623: GO 7921
// if direction then
7625: LD_VAR 0 4
7629: IFFALSE 7693
// begin d := 1 ;
7631: LD_ADDR_VAR 0 9
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// if i_from > i_to then
7639: LD_VAR 0 2
7643: PUSH
7644: LD_VAR 0 3
7648: GREATER
7649: IFFALSE 7675
// length := ( array - i_from ) + i_to else
7651: LD_ADDR_VAR 0 11
7655: PUSH
7656: LD_VAR 0 1
7660: PUSH
7661: LD_VAR 0 2
7665: MINUS
7666: PUSH
7667: LD_VAR 0 3
7671: PLUS
7672: ST_TO_ADDR
7673: GO 7691
// length := i_to - i_from ;
7675: LD_ADDR_VAR 0 11
7679: PUSH
7680: LD_VAR 0 3
7684: PUSH
7685: LD_VAR 0 2
7689: MINUS
7690: ST_TO_ADDR
// end else
7691: GO 7754
// begin d := - 1 ;
7693: LD_ADDR_VAR 0 9
7697: PUSH
7698: LD_INT 1
7700: NEG
7701: ST_TO_ADDR
// if i_from > i_to then
7702: LD_VAR 0 2
7706: PUSH
7707: LD_VAR 0 3
7711: GREATER
7712: IFFALSE 7732
// length := i_from - i_to else
7714: LD_ADDR_VAR 0 11
7718: PUSH
7719: LD_VAR 0 2
7723: PUSH
7724: LD_VAR 0 3
7728: MINUS
7729: ST_TO_ADDR
7730: GO 7754
// length := ( array - i_to ) + i_from ;
7732: LD_ADDR_VAR 0 11
7736: PUSH
7737: LD_VAR 0 1
7741: PUSH
7742: LD_VAR 0 3
7746: MINUS
7747: PUSH
7748: LD_VAR 0 2
7752: PLUS
7753: ST_TO_ADDR
// end ; if not length then
7754: LD_VAR 0 11
7758: NOT
7759: IFFALSE 7763
// exit ;
7761: GO 7921
// tmp := array ;
7763: LD_ADDR_VAR 0 10
7767: PUSH
7768: LD_VAR 0 1
7772: ST_TO_ADDR
// for i = 1 to length do
7773: LD_ADDR_VAR 0 6
7777: PUSH
7778: DOUBLE
7779: LD_INT 1
7781: DEC
7782: ST_TO_ADDR
7783: LD_VAR 0 11
7787: PUSH
7788: FOR_TO
7789: IFFALSE 7909
// begin for j = 1 to array do
7791: LD_ADDR_VAR 0 7
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 1
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7895
// begin k := j + d ;
7809: LD_ADDR_VAR 0 8
7813: PUSH
7814: LD_VAR 0 7
7818: PUSH
7819: LD_VAR 0 9
7823: PLUS
7824: ST_TO_ADDR
// if k > array then
7825: LD_VAR 0 8
7829: PUSH
7830: LD_VAR 0 1
7834: GREATER
7835: IFFALSE 7845
// k := 1 ;
7837: LD_ADDR_VAR 0 8
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if not k then
7845: LD_VAR 0 8
7849: NOT
7850: IFFALSE 7862
// k := array ;
7852: LD_ADDR_VAR 0 8
7856: PUSH
7857: LD_VAR 0 1
7861: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7862: LD_ADDR_VAR 0 10
7866: PUSH
7867: LD_VAR 0 10
7871: PPUSH
7872: LD_VAR 0 8
7876: PPUSH
7877: LD_VAR 0 1
7881: PUSH
7882: LD_VAR 0 7
7886: ARRAY
7887: PPUSH
7888: CALL_OW 1
7892: ST_TO_ADDR
// end ;
7893: GO 7806
7895: POP
7896: POP
// array := tmp ;
7897: LD_ADDR_VAR 0 1
7901: PUSH
7902: LD_VAR 0 10
7906: ST_TO_ADDR
// end ;
7907: GO 7788
7909: POP
7910: POP
// result := array ;
7911: LD_ADDR_VAR 0 5
7915: PUSH
7916: LD_VAR 0 1
7920: ST_TO_ADDR
// end ;
7921: LD_VAR 0 5
7925: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7926: LD_INT 0
7928: PPUSH
7929: PPUSH
// result := 0 ;
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// if not array or not value in array then
7938: LD_VAR 0 1
7942: NOT
7943: IFTRUE 7958
7945: PUSH
7946: LD_VAR 0 2
7950: PUSH
7951: LD_VAR 0 1
7955: IN
7956: NOT
7957: OR
7958: IFFALSE 7962
// exit ;
7960: GO 8016
// for i = 1 to array do
7962: LD_ADDR_VAR 0 4
7966: PUSH
7967: DOUBLE
7968: LD_INT 1
7970: DEC
7971: ST_TO_ADDR
7972: LD_VAR 0 1
7976: PUSH
7977: FOR_TO
7978: IFFALSE 8014
// if value = array [ i ] then
7980: LD_VAR 0 2
7984: PUSH
7985: LD_VAR 0 1
7989: PUSH
7990: LD_VAR 0 4
7994: ARRAY
7995: EQUAL
7996: IFFALSE 8012
// begin result := i ;
7998: LD_ADDR_VAR 0 3
8002: PUSH
8003: LD_VAR 0 4
8007: ST_TO_ADDR
// exit ;
8008: POP
8009: POP
8010: GO 8016
// end ;
8012: GO 7977
8014: POP
8015: POP
// end ;
8016: LD_VAR 0 3
8020: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8021: LD_INT 0
8023: PPUSH
// vc_chassis := chassis ;
8024: LD_ADDR_OWVAR 37
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// vc_engine := engine ;
8034: LD_ADDR_OWVAR 39
8038: PUSH
8039: LD_VAR 0 2
8043: ST_TO_ADDR
// vc_control := control ;
8044: LD_ADDR_OWVAR 38
8048: PUSH
8049: LD_VAR 0 3
8053: ST_TO_ADDR
// vc_weapon := weapon ;
8054: LD_ADDR_OWVAR 40
8058: PUSH
8059: LD_VAR 0 4
8063: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8064: LD_ADDR_OWVAR 41
8068: PUSH
8069: LD_VAR 0 5
8073: ST_TO_ADDR
// end ;
8074: LD_VAR 0 6
8078: RET
// export function WantPlant ( unit ) ; var task ; begin
8079: LD_INT 0
8081: PPUSH
8082: PPUSH
// result := false ;
8083: LD_ADDR_VAR 0 2
8087: PUSH
8088: LD_INT 0
8090: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8091: LD_ADDR_VAR 0 3
8095: PUSH
8096: LD_VAR 0 1
8100: PPUSH
8101: CALL_OW 437
8105: ST_TO_ADDR
// if task then
8106: LD_VAR 0 3
8110: IFFALSE 8138
// if task [ 1 ] [ 1 ] = p then
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PUSH
8121: LD_INT 1
8123: ARRAY
8124: PUSH
8125: LD_STRING p
8127: EQUAL
8128: IFFALSE 8138
// result := true ;
8130: LD_ADDR_VAR 0 2
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// end ;
8138: LD_VAR 0 2
8142: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8143: LD_INT 0
8145: PPUSH
8146: PPUSH
8147: PPUSH
8148: PPUSH
// if pos < 1 then
8149: LD_VAR 0 2
8153: PUSH
8154: LD_INT 1
8156: LESS
8157: IFFALSE 8161
// exit ;
8159: GO 8464
// if pos = 1 then
8161: LD_VAR 0 2
8165: PUSH
8166: LD_INT 1
8168: EQUAL
8169: IFFALSE 8202
// result := Replace ( arr , pos [ 1 ] , value ) else
8171: LD_ADDR_VAR 0 4
8175: PUSH
8176: LD_VAR 0 1
8180: PPUSH
8181: LD_VAR 0 2
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: PPUSH
8190: LD_VAR 0 3
8194: PPUSH
8195: CALL_OW 1
8199: ST_TO_ADDR
8200: GO 8464
// begin tmp := arr ;
8202: LD_ADDR_VAR 0 6
8206: PUSH
8207: LD_VAR 0 1
8211: ST_TO_ADDR
// s_arr := [ tmp ] ;
8212: LD_ADDR_VAR 0 7
8216: PUSH
8217: LD_VAR 0 6
8221: PUSH
8222: EMPTY
8223: LIST
8224: ST_TO_ADDR
// for i = 1 to pos - 1 do
8225: LD_ADDR_VAR 0 5
8229: PUSH
8230: DOUBLE
8231: LD_INT 1
8233: DEC
8234: ST_TO_ADDR
8235: LD_VAR 0 2
8239: PUSH
8240: LD_INT 1
8242: MINUS
8243: PUSH
8244: FOR_TO
8245: IFFALSE 8290
// begin tmp := tmp [ pos [ i ] ] ;
8247: LD_ADDR_VAR 0 6
8251: PUSH
8252: LD_VAR 0 6
8256: PUSH
8257: LD_VAR 0 2
8261: PUSH
8262: LD_VAR 0 5
8266: ARRAY
8267: ARRAY
8268: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8269: LD_ADDR_VAR 0 7
8273: PUSH
8274: LD_VAR 0 7
8278: PUSH
8279: LD_VAR 0 6
8283: PUSH
8284: EMPTY
8285: LIST
8286: ADD
8287: ST_TO_ADDR
// end ;
8288: GO 8244
8290: POP
8291: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8292: LD_ADDR_VAR 0 6
8296: PUSH
8297: LD_VAR 0 6
8301: PPUSH
8302: LD_VAR 0 2
8306: PUSH
8307: LD_VAR 0 2
8311: ARRAY
8312: PPUSH
8313: LD_VAR 0 3
8317: PPUSH
8318: CALL_OW 1
8322: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8323: LD_ADDR_VAR 0 7
8327: PUSH
8328: LD_VAR 0 7
8332: PPUSH
8333: LD_VAR 0 7
8337: PPUSH
8338: LD_VAR 0 6
8342: PPUSH
8343: CALL_OW 1
8347: ST_TO_ADDR
// for i = s_arr downto 2 do
8348: LD_ADDR_VAR 0 5
8352: PUSH
8353: DOUBLE
8354: LD_VAR 0 7
8358: INC
8359: ST_TO_ADDR
8360: LD_INT 2
8362: PUSH
8363: FOR_DOWNTO
8364: IFFALSE 8448
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8366: LD_ADDR_VAR 0 6
8370: PUSH
8371: LD_VAR 0 7
8375: PUSH
8376: LD_VAR 0 5
8380: PUSH
8381: LD_INT 1
8383: MINUS
8384: ARRAY
8385: PPUSH
8386: LD_VAR 0 2
8390: PUSH
8391: LD_VAR 0 5
8395: PUSH
8396: LD_INT 1
8398: MINUS
8399: ARRAY
8400: PPUSH
8401: LD_VAR 0 7
8405: PUSH
8406: LD_VAR 0 5
8410: ARRAY
8411: PPUSH
8412: CALL_OW 1
8416: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8417: LD_ADDR_VAR 0 7
8421: PUSH
8422: LD_VAR 0 7
8426: PPUSH
8427: LD_VAR 0 5
8431: PUSH
8432: LD_INT 1
8434: MINUS
8435: PPUSH
8436: LD_VAR 0 6
8440: PPUSH
8441: CALL_OW 1
8445: ST_TO_ADDR
// end ;
8446: GO 8363
8448: POP
8449: POP
// result := s_arr [ 1 ] ;
8450: LD_ADDR_VAR 0 4
8454: PUSH
8455: LD_VAR 0 7
8459: PUSH
8460: LD_INT 1
8462: ARRAY
8463: ST_TO_ADDR
// end ; end ;
8464: LD_VAR 0 4
8468: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8469: LD_INT 0
8471: PPUSH
8472: PPUSH
// if not list then
8473: LD_VAR 0 1
8477: NOT
8478: IFFALSE 8482
// exit ;
8480: GO 8573
// i := list [ pos1 ] ;
8482: LD_ADDR_VAR 0 5
8486: PUSH
8487: LD_VAR 0 1
8491: PUSH
8492: LD_VAR 0 2
8496: ARRAY
8497: ST_TO_ADDR
// if not i then
8498: LD_VAR 0 5
8502: NOT
8503: IFFALSE 8507
// exit ;
8505: GO 8573
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8507: LD_ADDR_VAR 0 1
8511: PUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: LD_VAR 0 2
8521: PPUSH
8522: LD_VAR 0 1
8526: PUSH
8527: LD_VAR 0 3
8531: ARRAY
8532: PPUSH
8533: CALL_OW 1
8537: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8538: LD_ADDR_VAR 0 1
8542: PUSH
8543: LD_VAR 0 1
8547: PPUSH
8548: LD_VAR 0 3
8552: PPUSH
8553: LD_VAR 0 5
8557: PPUSH
8558: CALL_OW 1
8562: ST_TO_ADDR
// result := list ;
8563: LD_ADDR_VAR 0 4
8567: PUSH
8568: LD_VAR 0 1
8572: ST_TO_ADDR
// end ;
8573: LD_VAR 0 4
8577: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8578: LD_INT 0
8580: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8581: LD_ADDR_VAR 0 5
8585: PUSH
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 250
8595: PPUSH
8596: LD_VAR 0 1
8600: PPUSH
8601: CALL_OW 251
8605: PPUSH
8606: LD_VAR 0 2
8610: PPUSH
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_VAR 0 4
8620: PPUSH
8621: CALL 9003 0 5
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 5
8630: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8631: LD_INT 0
8633: PPUSH
8634: PPUSH
8635: PPUSH
8636: PPUSH
// if not list or not unit then
8637: LD_VAR 0 2
8641: NOT
8642: IFTRUE 8651
8644: PUSH
8645: LD_VAR 0 1
8649: NOT
8650: OR
8651: IFFALSE 8655
// exit ;
8653: GO 8998
// result := [ ] ;
8655: LD_ADDR_VAR 0 5
8659: PUSH
8660: EMPTY
8661: ST_TO_ADDR
// for i in list do
8662: LD_ADDR_VAR 0 6
8666: PUSH
8667: LD_VAR 0 2
8671: PUSH
8672: FOR_IN
8673: IFFALSE 8891
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8675: LD_ADDR_VAR 0 8
8679: PUSH
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_VAR 0 6
8689: PUSH
8690: LD_INT 1
8692: ARRAY
8693: PPUSH
8694: LD_VAR 0 6
8698: PUSH
8699: LD_INT 2
8701: ARRAY
8702: PPUSH
8703: CALL_OW 297
8707: ST_TO_ADDR
// if not Count ( result ) then
8708: LD_VAR 0 5
8712: PPUSH
8713: CALL 5225 0 1
8717: NOT
8718: IFFALSE 8751
// begin result := Join ( result , [ i , tmp ] ) ;
8720: LD_ADDR_VAR 0 5
8724: PUSH
8725: LD_VAR 0 5
8729: PPUSH
8730: LD_VAR 0 6
8734: PUSH
8735: LD_VAR 0 8
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL 41191 0 2
8748: ST_TO_ADDR
// continue ;
8749: GO 8672
// end ; if result [ result ] [ 2 ] <= tmp then
8751: LD_VAR 0 5
8755: PUSH
8756: LD_VAR 0 5
8760: ARRAY
8761: PUSH
8762: LD_INT 2
8764: ARRAY
8765: PUSH
8766: LD_VAR 0 8
8770: LESSEQUAL
8771: IFFALSE 8804
// result := Join ( result , [ i , tmp ] ) else
8773: LD_ADDR_VAR 0 5
8777: PUSH
8778: LD_VAR 0 5
8782: PPUSH
8783: LD_VAR 0 6
8787: PUSH
8788: LD_VAR 0 8
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL 41191 0 2
8801: ST_TO_ADDR
8802: GO 8889
// begin for j := 1 to Count ( result ) do
8804: LD_ADDR_VAR 0 7
8808: PUSH
8809: DOUBLE
8810: LD_INT 1
8812: DEC
8813: ST_TO_ADDR
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 5225 0 1
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8887
// begin if tmp < result [ j ] [ 2 ] then
8827: LD_VAR 0 8
8831: PUSH
8832: LD_VAR 0 5
8836: PUSH
8837: LD_VAR 0 7
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: LESS
8847: IFFALSE 8885
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 5
8858: PPUSH
8859: LD_VAR 0 7
8863: PPUSH
8864: LD_VAR 0 6
8868: PUSH
8869: LD_VAR 0 8
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PPUSH
8878: CALL_OW 2
8882: ST_TO_ADDR
// break ;
8883: GO 8887
// end ; end ;
8885: GO 8824
8887: POP
8888: POP
// end ; end ;
8889: GO 8672
8891: POP
8892: POP
// if result and not asc then
8893: LD_VAR 0 5
8897: IFFALSE 8906
8899: PUSH
8900: LD_VAR 0 3
8904: NOT
8905: AND
8906: IFFALSE 8923
// result := ReverseArray ( result ) ;
8908: LD_ADDR_VAR 0 5
8912: PUSH
8913: LD_VAR 0 5
8917: PPUSH
8918: CALL 36281 0 1
8922: ST_TO_ADDR
// tmp := [ ] ;
8923: LD_ADDR_VAR 0 8
8927: PUSH
8928: EMPTY
8929: ST_TO_ADDR
// if mode then
8930: LD_VAR 0 4
8934: IFFALSE 8998
// begin for i := 1 to result do
8936: LD_ADDR_VAR 0 6
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 5
8950: PUSH
8951: FOR_TO
8952: IFFALSE 8986
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8954: LD_ADDR_VAR 0 8
8958: PUSH
8959: LD_VAR 0 8
8963: PPUSH
8964: LD_VAR 0 5
8968: PUSH
8969: LD_VAR 0 6
8973: ARRAY
8974: PUSH
8975: LD_INT 1
8977: ARRAY
8978: PPUSH
8979: CALL 41191 0 2
8983: ST_TO_ADDR
8984: GO 8951
8986: POP
8987: POP
// result := tmp ;
8988: LD_ADDR_VAR 0 5
8992: PUSH
8993: LD_VAR 0 8
8997: ST_TO_ADDR
// end ; end ;
8998: LD_VAR 0 5
9002: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9003: LD_INT 0
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// if not list then
9009: LD_VAR 0 3
9013: NOT
9014: IFFALSE 9018
// exit ;
9016: GO 9408
// result := [ ] ;
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: EMPTY
9024: ST_TO_ADDR
// for i in list do
9025: LD_ADDR_VAR 0 7
9029: PUSH
9030: LD_VAR 0 3
9034: PUSH
9035: FOR_IN
9036: IFFALSE 9238
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9038: LD_ADDR_VAR 0 9
9042: PUSH
9043: LD_VAR 0 7
9047: PPUSH
9048: LD_VAR 0 1
9052: PPUSH
9053: LD_VAR 0 2
9057: PPUSH
9058: CALL_OW 297
9062: ST_TO_ADDR
// if not result then
9063: LD_VAR 0 6
9067: NOT
9068: IFFALSE 9094
// result := [ [ i , tmp ] ] else
9070: LD_ADDR_VAR 0 6
9074: PUSH
9075: LD_VAR 0 7
9079: PUSH
9080: LD_VAR 0 9
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: ST_TO_ADDR
9092: GO 9236
// begin if result [ result ] [ 2 ] <= tmp then
9094: LD_VAR 0 6
9098: PUSH
9099: LD_VAR 0 6
9103: ARRAY
9104: PUSH
9105: LD_INT 2
9107: ARRAY
9108: PUSH
9109: LD_VAR 0 9
9113: LESSEQUAL
9114: IFFALSE 9156
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9116: LD_ADDR_VAR 0 6
9120: PUSH
9121: LD_VAR 0 6
9125: PPUSH
9126: LD_VAR 0 6
9130: PUSH
9131: LD_INT 1
9133: PLUS
9134: PPUSH
9135: LD_VAR 0 7
9139: PUSH
9140: LD_VAR 0 9
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PPUSH
9149: CALL_OW 2
9153: ST_TO_ADDR
9154: GO 9236
// for j := 1 to result do
9156: LD_ADDR_VAR 0 8
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_VAR 0 6
9170: PUSH
9171: FOR_TO
9172: IFFALSE 9234
// begin if tmp < result [ j ] [ 2 ] then
9174: LD_VAR 0 9
9178: PUSH
9179: LD_VAR 0 6
9183: PUSH
9184: LD_VAR 0 8
9188: ARRAY
9189: PUSH
9190: LD_INT 2
9192: ARRAY
9193: LESS
9194: IFFALSE 9232
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9196: LD_ADDR_VAR 0 6
9200: PUSH
9201: LD_VAR 0 6
9205: PPUSH
9206: LD_VAR 0 8
9210: PPUSH
9211: LD_VAR 0 7
9215: PUSH
9216: LD_VAR 0 9
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PPUSH
9225: CALL_OW 2
9229: ST_TO_ADDR
// break ;
9230: GO 9234
// end ; end ;
9232: GO 9171
9234: POP
9235: POP
// end ; end ;
9236: GO 9035
9238: POP
9239: POP
// if result and not asc then
9240: LD_VAR 0 6
9244: IFFALSE 9253
9246: PUSH
9247: LD_VAR 0 4
9251: NOT
9252: AND
9253: IFFALSE 9328
// begin tmp := result ;
9255: LD_ADDR_VAR 0 9
9259: PUSH
9260: LD_VAR 0 6
9264: ST_TO_ADDR
// for i = tmp downto 1 do
9265: LD_ADDR_VAR 0 7
9269: PUSH
9270: DOUBLE
9271: LD_VAR 0 9
9275: INC
9276: ST_TO_ADDR
9277: LD_INT 1
9279: PUSH
9280: FOR_DOWNTO
9281: IFFALSE 9326
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9283: LD_ADDR_VAR 0 6
9287: PUSH
9288: LD_VAR 0 6
9292: PPUSH
9293: LD_VAR 0 9
9297: PUSH
9298: LD_VAR 0 7
9302: MINUS
9303: PUSH
9304: LD_INT 1
9306: PLUS
9307: PPUSH
9308: LD_VAR 0 9
9312: PUSH
9313: LD_VAR 0 7
9317: ARRAY
9318: PPUSH
9319: CALL_OW 1
9323: ST_TO_ADDR
9324: GO 9280
9326: POP
9327: POP
// end ; tmp := [ ] ;
9328: LD_ADDR_VAR 0 9
9332: PUSH
9333: EMPTY
9334: ST_TO_ADDR
// if mode then
9335: LD_VAR 0 5
9339: IFFALSE 9408
// begin for i = 1 to result do
9341: LD_ADDR_VAR 0 7
9345: PUSH
9346: DOUBLE
9347: LD_INT 1
9349: DEC
9350: ST_TO_ADDR
9351: LD_VAR 0 6
9355: PUSH
9356: FOR_TO
9357: IFFALSE 9396
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9359: LD_ADDR_VAR 0 9
9363: PUSH
9364: LD_VAR 0 9
9368: PPUSH
9369: LD_VAR 0 7
9373: PPUSH
9374: LD_VAR 0 6
9378: PUSH
9379: LD_VAR 0 7
9383: ARRAY
9384: PUSH
9385: LD_INT 1
9387: ARRAY
9388: PPUSH
9389: CALL_OW 1
9393: ST_TO_ADDR
9394: GO 9356
9396: POP
9397: POP
// result := tmp ;
9398: LD_ADDR_VAR 0 6
9402: PUSH
9403: LD_VAR 0 9
9407: ST_TO_ADDR
// end ; end ;
9408: LD_VAR 0 6
9412: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9421: LD_ADDR_VAR 0 5
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: LD_INT 0
9434: PUSH
9435: EMPTY
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: ST_TO_ADDR
// if not x or not y then
9443: LD_VAR 0 2
9447: NOT
9448: IFTRUE 9457
9450: PUSH
9451: LD_VAR 0 3
9455: NOT
9456: OR
9457: IFFALSE 9461
// exit ;
9459: GO 11117
// if not range then
9461: LD_VAR 0 4
9465: NOT
9466: IFFALSE 9476
// range := 10 ;
9468: LD_ADDR_VAR 0 4
9472: PUSH
9473: LD_INT 10
9475: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9476: LD_ADDR_VAR 0 8
9480: PUSH
9481: LD_INT 81
9483: PUSH
9484: LD_VAR 0 1
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 92
9495: PUSH
9496: LD_VAR 0 2
9500: PUSH
9501: LD_VAR 0 3
9505: PUSH
9506: LD_VAR 0 4
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 3
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 3
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: PPUSH
9539: CALL_OW 69
9543: ST_TO_ADDR
// if not tmp then
9544: LD_VAR 0 8
9548: NOT
9549: IFFALSE 9553
// exit ;
9551: GO 11117
// for i in tmp do
9553: LD_ADDR_VAR 0 6
9557: PUSH
9558: LD_VAR 0 8
9562: PUSH
9563: FOR_IN
9564: IFFALSE 11092
// begin points := [ 0 , 0 , 0 ] ;
9566: LD_ADDR_VAR 0 9
9570: PUSH
9571: LD_INT 0
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: LD_INT 0
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: LIST
9584: ST_TO_ADDR
// bpoints := 1 ;
9585: LD_ADDR_VAR 0 10
9589: PUSH
9590: LD_INT 1
9592: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9593: LD_VAR 0 6
9597: PPUSH
9598: CALL_OW 247
9602: PUSH
9603: LD_INT 1
9605: DOUBLE
9606: EQUAL
9607: IFTRUE 9611
9609: GO 10193
9611: POP
// begin if GetClass ( i ) = 1 then
9612: LD_VAR 0 6
9616: PPUSH
9617: CALL_OW 257
9621: PUSH
9622: LD_INT 1
9624: EQUAL
9625: IFFALSE 9646
// points := [ 10 , 5 , 3 ] ;
9627: LD_ADDR_VAR 0 9
9631: PUSH
9632: LD_INT 10
9634: PUSH
9635: LD_INT 5
9637: PUSH
9638: LD_INT 3
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9646: LD_VAR 0 6
9650: PPUSH
9651: CALL_OW 257
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: LD_INT 4
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: IN
9670: IFFALSE 9691
// points := [ 3 , 2 , 1 ] ;
9672: LD_ADDR_VAR 0 9
9676: PUSH
9677: LD_INT 3
9679: PUSH
9680: LD_INT 2
9682: PUSH
9683: LD_INT 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9691: LD_VAR 0 6
9695: PPUSH
9696: CALL_OW 257
9700: PUSH
9701: LD_INT 5
9703: EQUAL
9704: IFFALSE 9725
// points := [ 130 , 5 , 2 ] ;
9706: LD_ADDR_VAR 0 9
9710: PUSH
9711: LD_INT 130
9713: PUSH
9714: LD_INT 5
9716: PUSH
9717: LD_INT 2
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9725: LD_VAR 0 6
9729: PPUSH
9730: CALL_OW 257
9734: PUSH
9735: LD_INT 8
9737: EQUAL
9738: IFFALSE 9759
// points := [ 35 , 35 , 30 ] ;
9740: LD_ADDR_VAR 0 9
9744: PUSH
9745: LD_INT 35
9747: PUSH
9748: LD_INT 35
9750: PUSH
9751: LD_INT 30
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9759: LD_VAR 0 6
9763: PPUSH
9764: CALL_OW 257
9768: PUSH
9769: LD_INT 9
9771: EQUAL
9772: IFFALSE 9793
// points := [ 20 , 55 , 40 ] ;
9774: LD_ADDR_VAR 0 9
9778: PUSH
9779: LD_INT 20
9781: PUSH
9782: LD_INT 55
9784: PUSH
9785: LD_INT 40
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9793: LD_VAR 0 6
9797: PPUSH
9798: CALL_OW 257
9802: PUSH
9803: LD_INT 12
9805: PUSH
9806: LD_INT 16
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: IN
9813: IFFALSE 9834
// points := [ 5 , 3 , 2 ] ;
9815: LD_ADDR_VAR 0 9
9819: PUSH
9820: LD_INT 5
9822: PUSH
9823: LD_INT 3
9825: PUSH
9826: LD_INT 2
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9834: LD_VAR 0 6
9838: PPUSH
9839: CALL_OW 257
9843: PUSH
9844: LD_INT 17
9846: EQUAL
9847: IFFALSE 9868
// points := [ 100 , 50 , 75 ] ;
9849: LD_ADDR_VAR 0 9
9853: PUSH
9854: LD_INT 100
9856: PUSH
9857: LD_INT 50
9859: PUSH
9860: LD_INT 75
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9868: LD_VAR 0 6
9872: PPUSH
9873: CALL_OW 257
9877: PUSH
9878: LD_INT 15
9880: EQUAL
9881: IFFALSE 9902
// points := [ 10 , 5 , 3 ] ;
9883: LD_ADDR_VAR 0 9
9887: PUSH
9888: LD_INT 10
9890: PUSH
9891: LD_INT 5
9893: PUSH
9894: LD_INT 3
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9902: LD_VAR 0 6
9906: PPUSH
9907: CALL_OW 257
9911: PUSH
9912: LD_INT 14
9914: EQUAL
9915: IFFALSE 9936
// points := [ 10 , 0 , 0 ] ;
9917: LD_ADDR_VAR 0 9
9921: PUSH
9922: LD_INT 10
9924: PUSH
9925: LD_INT 0
9927: PUSH
9928: LD_INT 0
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9936: LD_VAR 0 6
9940: PPUSH
9941: CALL_OW 257
9945: PUSH
9946: LD_INT 11
9948: EQUAL
9949: IFFALSE 9970
// points := [ 30 , 10 , 5 ] ;
9951: LD_ADDR_VAR 0 9
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: LD_INT 10
9961: PUSH
9962: LD_INT 5
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9970: LD_VAR 0 1
9974: PPUSH
9975: LD_INT 5
9977: PPUSH
9978: CALL_OW 321
9982: PUSH
9983: LD_INT 2
9985: EQUAL
9986: IFFALSE 10003
// bpoints := bpoints * 1.8 ;
9988: LD_ADDR_VAR 0 10
9992: PUSH
9993: LD_VAR 0 10
9997: PUSH
9998: LD_REAL  1.80000000000000E+0000
10001: MUL
10002: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10003: LD_VAR 0 6
10007: PPUSH
10008: CALL_OW 257
10012: PUSH
10013: LD_INT 1
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: IN
10031: IFFALSE 10051
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: LD_INT 51
10041: PPUSH
10042: CALL_OW 321
10046: PUSH
10047: LD_INT 2
10049: EQUAL
10050: AND
10051: IFFALSE 10068
// bpoints := bpoints * 1.2 ;
10053: LD_ADDR_VAR 0 10
10057: PUSH
10058: LD_VAR 0 10
10062: PUSH
10063: LD_REAL  1.20000000000000E+0000
10066: MUL
10067: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10068: LD_VAR 0 6
10072: PPUSH
10073: CALL_OW 257
10077: PUSH
10078: LD_INT 5
10080: PUSH
10081: LD_INT 7
10083: PUSH
10084: LD_INT 9
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: IN
10092: IFFALSE 10112
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: LD_INT 52
10102: PPUSH
10103: CALL_OW 321
10107: PUSH
10108: LD_INT 2
10110: EQUAL
10111: AND
10112: IFFALSE 10129
// bpoints := bpoints * 1.5 ;
10114: LD_ADDR_VAR 0 10
10118: PUSH
10119: LD_VAR 0 10
10123: PUSH
10124: LD_REAL  1.50000000000000E+0000
10127: MUL
10128: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 66
10136: PPUSH
10137: CALL_OW 321
10141: PUSH
10142: LD_INT 2
10144: EQUAL
10145: IFFALSE 10162
// bpoints := bpoints * 1.1 ;
10147: LD_ADDR_VAR 0 10
10151: PUSH
10152: LD_VAR 0 10
10156: PUSH
10157: LD_REAL  1.10000000000000E+0000
10160: MUL
10161: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10162: LD_ADDR_VAR 0 10
10166: PUSH
10167: LD_VAR 0 10
10171: PUSH
10172: LD_VAR 0 6
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 259
10184: PUSH
10185: LD_REAL  1.15000000000000E+0000
10188: MUL
10189: MUL
10190: ST_TO_ADDR
// end ; unit_vehicle :
10191: GO 11021
10193: LD_INT 2
10195: DOUBLE
10196: EQUAL
10197: IFTRUE 10201
10199: GO 11009
10201: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10202: LD_VAR 0 6
10206: PPUSH
10207: CALL_OW 264
10211: PUSH
10212: LD_INT 2
10214: PUSH
10215: LD_INT 42
10217: PUSH
10218: LD_INT 24
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: IN
10226: IFFALSE 10247
// points := [ 25 , 5 , 3 ] ;
10228: LD_ADDR_VAR 0 9
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 5
10238: PUSH
10239: LD_INT 3
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: LIST
10246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10247: LD_VAR 0 6
10251: PPUSH
10252: CALL_OW 264
10256: PUSH
10257: LD_INT 4
10259: PUSH
10260: LD_INT 43
10262: PUSH
10263: LD_INT 25
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: IN
10271: IFFALSE 10292
// points := [ 40 , 15 , 5 ] ;
10273: LD_ADDR_VAR 0 9
10277: PUSH
10278: LD_INT 40
10280: PUSH
10281: LD_INT 15
10283: PUSH
10284: LD_INT 5
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10292: LD_VAR 0 6
10296: PPUSH
10297: CALL_OW 264
10301: PUSH
10302: LD_INT 3
10304: PUSH
10305: LD_INT 23
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: IN
10312: IFFALSE 10333
// points := [ 7 , 25 , 8 ] ;
10314: LD_ADDR_VAR 0 9
10318: PUSH
10319: LD_INT 7
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 8
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10333: LD_VAR 0 6
10337: PPUSH
10338: CALL_OW 264
10342: PUSH
10343: LD_INT 5
10345: PUSH
10346: LD_INT 27
10348: PUSH
10349: LD_INT 44
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: IN
10357: IFFALSE 10378
// points := [ 14 , 50 , 16 ] ;
10359: LD_ADDR_VAR 0 9
10363: PUSH
10364: LD_INT 14
10366: PUSH
10367: LD_INT 50
10369: PUSH
10370: LD_INT 16
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10378: LD_VAR 0 6
10382: PPUSH
10383: CALL_OW 264
10387: PUSH
10388: LD_INT 6
10390: PUSH
10391: LD_INT 46
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: IN
10398: IFFALSE 10419
// points := [ 32 , 120 , 70 ] ;
10400: LD_ADDR_VAR 0 9
10404: PUSH
10405: LD_INT 32
10407: PUSH
10408: LD_INT 120
10410: PUSH
10411: LD_INT 70
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: LIST
10418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10419: LD_VAR 0 6
10423: PPUSH
10424: CALL_OW 264
10428: PUSH
10429: LD_INT 7
10431: PUSH
10432: LD_INT 28
10434: PUSH
10435: LD_INT 45
10437: PUSH
10438: LD_INT 92
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: IN
10447: IFFALSE 10468
// points := [ 35 , 20 , 45 ] ;
10449: LD_ADDR_VAR 0 9
10453: PUSH
10454: LD_INT 35
10456: PUSH
10457: LD_INT 20
10459: PUSH
10460: LD_INT 45
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10468: LD_VAR 0 6
10472: PPUSH
10473: CALL_OW 264
10477: PUSH
10478: LD_INT 47
10480: PUSH
10481: EMPTY
10482: LIST
10483: IN
10484: IFFALSE 10505
// points := [ 67 , 45 , 75 ] ;
10486: LD_ADDR_VAR 0 9
10490: PUSH
10491: LD_INT 67
10493: PUSH
10494: LD_INT 45
10496: PUSH
10497: LD_INT 75
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10505: LD_VAR 0 6
10509: PPUSH
10510: CALL_OW 264
10514: PUSH
10515: LD_INT 26
10517: PUSH
10518: EMPTY
10519: LIST
10520: IN
10521: IFFALSE 10542
// points := [ 120 , 30 , 80 ] ;
10523: LD_ADDR_VAR 0 9
10527: PUSH
10528: LD_INT 120
10530: PUSH
10531: LD_INT 30
10533: PUSH
10534: LD_INT 80
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: LIST
10541: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10542: LD_VAR 0 6
10546: PPUSH
10547: CALL_OW 264
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: EMPTY
10556: LIST
10557: IN
10558: IFFALSE 10579
// points := [ 40 , 1 , 1 ] ;
10560: LD_ADDR_VAR 0 9
10564: PUSH
10565: LD_INT 40
10567: PUSH
10568: LD_INT 1
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10579: LD_VAR 0 6
10583: PPUSH
10584: CALL_OW 264
10588: PUSH
10589: LD_INT 29
10591: PUSH
10592: EMPTY
10593: LIST
10594: IN
10595: IFFALSE 10616
// points := [ 70 , 200 , 400 ] ;
10597: LD_ADDR_VAR 0 9
10601: PUSH
10602: LD_INT 70
10604: PUSH
10605: LD_INT 200
10607: PUSH
10608: LD_INT 400
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: LIST
10615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10616: LD_VAR 0 6
10620: PPUSH
10621: CALL_OW 264
10625: PUSH
10626: LD_INT 14
10628: PUSH
10629: LD_INT 53
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: IN
10636: IFFALSE 10657
// points := [ 40 , 10 , 20 ] ;
10638: LD_ADDR_VAR 0 9
10642: PUSH
10643: LD_INT 40
10645: PUSH
10646: LD_INT 10
10648: PUSH
10649: LD_INT 20
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10657: LD_VAR 0 6
10661: PPUSH
10662: CALL_OW 264
10666: PUSH
10667: LD_INT 9
10669: PUSH
10670: EMPTY
10671: LIST
10672: IN
10673: IFFALSE 10694
// points := [ 5 , 70 , 20 ] ;
10675: LD_ADDR_VAR 0 9
10679: PUSH
10680: LD_INT 5
10682: PUSH
10683: LD_INT 70
10685: PUSH
10686: LD_INT 20
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10694: LD_VAR 0 6
10698: PPUSH
10699: CALL_OW 264
10703: PUSH
10704: LD_INT 10
10706: PUSH
10707: EMPTY
10708: LIST
10709: IN
10710: IFFALSE 10731
// points := [ 35 , 110 , 70 ] ;
10712: LD_ADDR_VAR 0 9
10716: PUSH
10717: LD_INT 35
10719: PUSH
10720: LD_INT 110
10722: PUSH
10723: LD_INT 70
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10731: LD_VAR 0 6
10735: PPUSH
10736: CALL_OW 265
10740: PUSH
10741: LD_INT 25
10743: EQUAL
10744: IFFALSE 10765
// points := [ 80 , 65 , 100 ] ;
10746: LD_ADDR_VAR 0 9
10750: PUSH
10751: LD_INT 80
10753: PUSH
10754: LD_INT 65
10756: PUSH
10757: LD_INT 100
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10765: LD_VAR 0 6
10769: PPUSH
10770: CALL_OW 263
10774: PUSH
10775: LD_INT 1
10777: EQUAL
10778: IFFALSE 10813
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10780: LD_ADDR_VAR 0 10
10784: PUSH
10785: LD_VAR 0 10
10789: PUSH
10790: LD_VAR 0 6
10794: PPUSH
10795: CALL_OW 311
10799: PPUSH
10800: LD_INT 3
10802: PPUSH
10803: CALL_OW 259
10807: PUSH
10808: LD_INT 4
10810: MUL
10811: MUL
10812: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10813: LD_VAR 0 6
10817: PPUSH
10818: CALL_OW 263
10822: PUSH
10823: LD_INT 2
10825: EQUAL
10826: IFFALSE 10877
// begin j := IsControledBy ( i ) ;
10828: LD_ADDR_VAR 0 7
10832: PUSH
10833: LD_VAR 0 6
10837: PPUSH
10838: CALL_OW 312
10842: ST_TO_ADDR
// if j then
10843: LD_VAR 0 7
10847: IFFALSE 10877
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10849: LD_ADDR_VAR 0 10
10853: PUSH
10854: LD_VAR 0 10
10858: PUSH
10859: LD_VAR 0 7
10863: PPUSH
10864: LD_INT 3
10866: PPUSH
10867: CALL_OW 259
10871: PUSH
10872: LD_INT 3
10874: MUL
10875: MUL
10876: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10877: LD_VAR 0 6
10881: PPUSH
10882: CALL_OW 264
10886: PUSH
10887: LD_INT 5
10889: PUSH
10890: LD_INT 6
10892: PUSH
10893: LD_INT 46
10895: PUSH
10896: LD_INT 44
10898: PUSH
10899: LD_INT 47
10901: PUSH
10902: LD_INT 45
10904: PUSH
10905: LD_INT 28
10907: PUSH
10908: LD_INT 7
10910: PUSH
10911: LD_INT 27
10913: PUSH
10914: LD_INT 29
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: IN
10929: IFFALSE 10949
10931: PUSH
10932: LD_VAR 0 1
10936: PPUSH
10937: LD_INT 52
10939: PPUSH
10940: CALL_OW 321
10944: PUSH
10945: LD_INT 2
10947: EQUAL
10948: AND
10949: IFFALSE 10966
// bpoints := bpoints * 1.2 ;
10951: LD_ADDR_VAR 0 10
10955: PUSH
10956: LD_VAR 0 10
10960: PUSH
10961: LD_REAL  1.20000000000000E+0000
10964: MUL
10965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10966: LD_VAR 0 6
10970: PPUSH
10971: CALL_OW 264
10975: PUSH
10976: LD_INT 6
10978: PUSH
10979: LD_INT 46
10981: PUSH
10982: LD_INT 47
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: LIST
10989: IN
10990: IFFALSE 11007
// bpoints := bpoints * 1.2 ;
10992: LD_ADDR_VAR 0 10
10996: PUSH
10997: LD_VAR 0 10
11001: PUSH
11002: LD_REAL  1.20000000000000E+0000
11005: MUL
11006: ST_TO_ADDR
// end ; unit_building :
11007: GO 11021
11009: LD_INT 3
11011: DOUBLE
11012: EQUAL
11013: IFTRUE 11017
11015: GO 11020
11017: POP
// ; end ;
11018: GO 11021
11020: POP
// for j = 1 to 3 do
11021: LD_ADDR_VAR 0 7
11025: PUSH
11026: DOUBLE
11027: LD_INT 1
11029: DEC
11030: ST_TO_ADDR
11031: LD_INT 3
11033: PUSH
11034: FOR_TO
11035: IFFALSE 11088
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11037: LD_ADDR_VAR 0 5
11041: PUSH
11042: LD_VAR 0 5
11046: PPUSH
11047: LD_VAR 0 7
11051: PPUSH
11052: LD_VAR 0 5
11056: PUSH
11057: LD_VAR 0 7
11061: ARRAY
11062: PUSH
11063: LD_VAR 0 9
11067: PUSH
11068: LD_VAR 0 7
11072: ARRAY
11073: PUSH
11074: LD_VAR 0 10
11078: MUL
11079: PLUS
11080: PPUSH
11081: CALL_OW 1
11085: ST_TO_ADDR
11086: GO 11034
11088: POP
11089: POP
// end ;
11090: GO 9563
11092: POP
11093: POP
// result := Replace ( result , 4 , tmp ) ;
11094: LD_ADDR_VAR 0 5
11098: PUSH
11099: LD_VAR 0 5
11103: PPUSH
11104: LD_INT 4
11106: PPUSH
11107: LD_VAR 0 8
11111: PPUSH
11112: CALL_OW 1
11116: ST_TO_ADDR
// end ;
11117: LD_VAR 0 5
11121: RET
// export function DangerAtRange ( unit , range ) ; begin
11122: LD_INT 0
11124: PPUSH
// if not unit then
11125: LD_VAR 0 1
11129: NOT
11130: IFFALSE 11134
// exit ;
11132: GO 11179
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11134: LD_ADDR_VAR 0 3
11138: PUSH
11139: LD_VAR 0 1
11143: PPUSH
11144: CALL_OW 255
11148: PPUSH
11149: LD_VAR 0 1
11153: PPUSH
11154: CALL_OW 250
11158: PPUSH
11159: LD_VAR 0 1
11163: PPUSH
11164: CALL_OW 251
11168: PPUSH
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL 9413 0 4
11178: ST_TO_ADDR
// end ;
11179: LD_VAR 0 3
11183: RET
// export function DangerInArea ( side , area ) ; begin
11184: LD_INT 0
11186: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11187: LD_ADDR_VAR 0 3
11191: PUSH
11192: LD_VAR 0 2
11196: PPUSH
11197: LD_INT 81
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PPUSH
11209: CALL_OW 70
11213: ST_TO_ADDR
// end ;
11214: LD_VAR 0 3
11218: RET
// export function IsExtension ( b ) ; begin
11219: LD_INT 0
11221: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11222: LD_ADDR_VAR 0 2
11226: PUSH
11227: LD_VAR 0 1
11231: PUSH
11232: LD_INT 23
11234: PUSH
11235: LD_INT 20
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 17
11243: PUSH
11244: LD_INT 24
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 19
11252: PUSH
11253: LD_INT 16
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 18
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: IN
11274: ST_TO_ADDR
// end ;
11275: LD_VAR 0 2
11279: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11280: LD_INT 0
11282: PPUSH
11283: PPUSH
11284: PPUSH
// result := [ ] ;
11285: LD_ADDR_VAR 0 4
11289: PUSH
11290: EMPTY
11291: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11292: LD_ADDR_VAR 0 5
11296: PUSH
11297: LD_VAR 0 2
11301: PPUSH
11302: LD_INT 21
11304: PUSH
11305: LD_INT 3
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 70
11316: ST_TO_ADDR
// if not tmp then
11317: LD_VAR 0 5
11321: NOT
11322: IFFALSE 11326
// exit ;
11324: GO 11390
// if checkLink then
11326: LD_VAR 0 3
11330: IFFALSE 11380
// begin for i in tmp do
11332: LD_ADDR_VAR 0 6
11336: PUSH
11337: LD_VAR 0 5
11341: PUSH
11342: FOR_IN
11343: IFFALSE 11378
// if GetBase ( i ) <> base then
11345: LD_VAR 0 6
11349: PPUSH
11350: CALL_OW 274
11354: PUSH
11355: LD_VAR 0 1
11359: NONEQUAL
11360: IFFALSE 11376
// ComLinkToBase ( base , i ) ;
11362: LD_VAR 0 1
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 169
11376: GO 11342
11378: POP
11379: POP
// end ; result := tmp ;
11380: LD_ADDR_VAR 0 4
11384: PUSH
11385: LD_VAR 0 5
11389: ST_TO_ADDR
// end ;
11390: LD_VAR 0 4
11394: RET
// export function ComComplete ( units , b ) ; var i ; begin
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
// if not units then
11399: LD_VAR 0 1
11403: NOT
11404: IFFALSE 11408
// exit ;
11406: GO 11498
// for i in units do
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_VAR 0 1
11417: PUSH
11418: FOR_IN
11419: IFFALSE 11496
// if BuildingStatus ( b ) = bs_build then
11421: LD_VAR 0 2
11425: PPUSH
11426: CALL_OW 461
11430: PUSH
11431: LD_INT 1
11433: EQUAL
11434: IFFALSE 11494
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11436: LD_VAR 0 4
11440: PPUSH
11441: LD_STRING h
11443: PUSH
11444: LD_VAR 0 2
11448: PPUSH
11449: CALL_OW 250
11453: PUSH
11454: LD_VAR 0 2
11458: PPUSH
11459: CALL_OW 251
11463: PUSH
11464: LD_VAR 0 2
11468: PUSH
11469: LD_INT 0
11471: PUSH
11472: LD_INT 0
11474: PUSH
11475: LD_INT 0
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: PPUSH
11490: CALL_OW 446
11494: GO 11418
11496: POP
11497: POP
// end ;
11498: LD_VAR 0 3
11502: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11503: LD_INT 0
11505: PPUSH
11506: PPUSH
11507: PPUSH
11508: PPUSH
11509: PPUSH
11510: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11511: LD_VAR 0 1
11515: NOT
11516: IFTRUE 11533
11518: PUSH
11519: LD_VAR 0 1
11523: PPUSH
11524: CALL_OW 263
11528: PUSH
11529: LD_INT 2
11531: NONEQUAL
11532: OR
11533: IFFALSE 11537
// exit ;
11535: GO 11853
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11537: LD_ADDR_VAR 0 6
11541: PUSH
11542: LD_INT 22
11544: PUSH
11545: LD_VAR 0 1
11549: PPUSH
11550: CALL_OW 255
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 2
11561: PUSH
11562: LD_INT 30
11564: PUSH
11565: LD_INT 36
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 31
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PPUSH
11591: CALL_OW 69
11595: ST_TO_ADDR
// if not tmp then
11596: LD_VAR 0 6
11600: NOT
11601: IFFALSE 11605
// exit ;
11603: GO 11853
// result := [ ] ;
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: EMPTY
11611: ST_TO_ADDR
// for i in tmp do
11612: LD_ADDR_VAR 0 3
11616: PUSH
11617: LD_VAR 0 6
11621: PUSH
11622: FOR_IN
11623: IFFALSE 11694
// begin t := UnitsInside ( i ) ;
11625: LD_ADDR_VAR 0 4
11629: PUSH
11630: LD_VAR 0 3
11634: PPUSH
11635: CALL_OW 313
11639: ST_TO_ADDR
// if t then
11640: LD_VAR 0 4
11644: IFFALSE 11692
// for j in t do
11646: LD_ADDR_VAR 0 7
11650: PUSH
11651: LD_VAR 0 4
11655: PUSH
11656: FOR_IN
11657: IFFALSE 11690
// result := Replace ( result , result + 1 , j ) ;
11659: LD_ADDR_VAR 0 2
11663: PUSH
11664: LD_VAR 0 2
11668: PPUSH
11669: LD_VAR 0 2
11673: PUSH
11674: LD_INT 1
11676: PLUS
11677: PPUSH
11678: LD_VAR 0 7
11682: PPUSH
11683: CALL_OW 1
11687: ST_TO_ADDR
11688: GO 11656
11690: POP
11691: POP
// end ;
11692: GO 11622
11694: POP
11695: POP
// if not result then
11696: LD_VAR 0 2
11700: NOT
11701: IFFALSE 11705
// exit ;
11703: GO 11853
// mech := result [ 1 ] ;
11705: LD_ADDR_VAR 0 5
11709: PUSH
11710: LD_VAR 0 2
11714: PUSH
11715: LD_INT 1
11717: ARRAY
11718: ST_TO_ADDR
// if result > 1 then
11719: LD_VAR 0 2
11723: PUSH
11724: LD_INT 1
11726: GREATER
11727: IFFALSE 11839
// begin for i = 2 to result do
11729: LD_ADDR_VAR 0 3
11733: PUSH
11734: DOUBLE
11735: LD_INT 2
11737: DEC
11738: ST_TO_ADDR
11739: LD_VAR 0 2
11743: PUSH
11744: FOR_TO
11745: IFFALSE 11837
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11747: LD_ADDR_VAR 0 4
11751: PUSH
11752: LD_VAR 0 2
11756: PUSH
11757: LD_VAR 0 3
11761: ARRAY
11762: PPUSH
11763: LD_INT 3
11765: PPUSH
11766: CALL_OW 259
11770: PUSH
11771: LD_VAR 0 2
11775: PUSH
11776: LD_VAR 0 3
11780: ARRAY
11781: PPUSH
11782: CALL_OW 432
11786: MINUS
11787: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11788: LD_VAR 0 4
11792: PUSH
11793: LD_VAR 0 5
11797: PPUSH
11798: LD_INT 3
11800: PPUSH
11801: CALL_OW 259
11805: PUSH
11806: LD_VAR 0 5
11810: PPUSH
11811: CALL_OW 432
11815: MINUS
11816: GREATEREQUAL
11817: IFFALSE 11835
// mech := result [ i ] ;
11819: LD_ADDR_VAR 0 5
11823: PUSH
11824: LD_VAR 0 2
11828: PUSH
11829: LD_VAR 0 3
11833: ARRAY
11834: ST_TO_ADDR
// end ;
11835: GO 11744
11837: POP
11838: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11839: LD_VAR 0 1
11843: PPUSH
11844: LD_VAR 0 5
11848: PPUSH
11849: CALL_OW 135
// end ;
11853: LD_VAR 0 2
11857: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11858: LD_INT 0
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
11864: PPUSH
11865: PPUSH
11866: PPUSH
11867: PPUSH
11868: PPUSH
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
// result := [ ] ;
11873: LD_ADDR_VAR 0 7
11877: PUSH
11878: EMPTY
11879: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 266
11889: PUSH
11890: LD_INT 0
11892: PUSH
11893: LD_INT 1
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: IN
11900: NOT
11901: IFFALSE 11905
// exit ;
11903: GO 13545
// if name then
11905: LD_VAR 0 3
11909: IFFALSE 11925
// SetBName ( base_dep , name ) ;
11911: LD_VAR 0 1
11915: PPUSH
11916: LD_VAR 0 3
11920: PPUSH
11921: CALL_OW 500
// base := GetBase ( base_dep ) ;
11925: LD_ADDR_VAR 0 15
11929: PUSH
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 274
11939: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11940: LD_ADDR_VAR 0 16
11944: PUSH
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL_OW 255
11954: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11955: LD_ADDR_VAR 0 17
11959: PUSH
11960: LD_VAR 0 1
11964: PPUSH
11965: CALL_OW 248
11969: ST_TO_ADDR
// if sources then
11970: LD_VAR 0 5
11974: IFFALSE 12021
// for i = 1 to 3 do
11976: LD_ADDR_VAR 0 8
11980: PUSH
11981: DOUBLE
11982: LD_INT 1
11984: DEC
11985: ST_TO_ADDR
11986: LD_INT 3
11988: PUSH
11989: FOR_TO
11990: IFFALSE 12019
// AddResourceType ( base , i , sources [ i ] ) ;
11992: LD_VAR 0 15
11996: PPUSH
11997: LD_VAR 0 8
12001: PPUSH
12002: LD_VAR 0 5
12006: PUSH
12007: LD_VAR 0 8
12011: ARRAY
12012: PPUSH
12013: CALL_OW 276
12017: GO 11989
12019: POP
12020: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12021: LD_ADDR_VAR 0 18
12025: PUSH
12026: LD_VAR 0 15
12030: PPUSH
12031: LD_VAR 0 2
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: CALL 11280 0 3
12043: ST_TO_ADDR
// InitHc ;
12044: CALL_OW 19
// InitUc ;
12048: CALL_OW 18
// uc_side := side ;
12052: LD_ADDR_OWVAR 20
12056: PUSH
12057: LD_VAR 0 16
12061: ST_TO_ADDR
// uc_nation := nation ;
12062: LD_ADDR_OWVAR 21
12066: PUSH
12067: LD_VAR 0 17
12071: ST_TO_ADDR
// if buildings then
12072: LD_VAR 0 18
12076: IFFALSE 13404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12078: LD_ADDR_VAR 0 19
12082: PUSH
12083: LD_VAR 0 18
12087: PPUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 30
12093: PUSH
12094: LD_INT 29
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 30
12103: PUSH
12104: LD_INT 30
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 72
12120: ST_TO_ADDR
// if tmp then
12121: LD_VAR 0 19
12125: IFFALSE 12173
// for i in tmp do
12127: LD_ADDR_VAR 0 8
12131: PUSH
12132: LD_VAR 0 19
12136: PUSH
12137: FOR_IN
12138: IFFALSE 12171
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12140: LD_VAR 0 8
12144: PPUSH
12145: CALL_OW 250
12149: PPUSH
12150: LD_VAR 0 8
12154: PPUSH
12155: CALL_OW 251
12159: PPUSH
12160: LD_VAR 0 16
12164: PPUSH
12165: CALL_OW 441
12169: GO 12137
12171: POP
12172: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12173: LD_VAR 0 18
12177: PPUSH
12178: LD_INT 2
12180: PUSH
12181: LD_INT 30
12183: PUSH
12184: LD_INT 32
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 30
12193: PUSH
12194: LD_INT 33
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 72
12210: IFFALSE 12298
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12212: LD_ADDR_VAR 0 8
12216: PUSH
12217: LD_VAR 0 18
12221: PPUSH
12222: LD_INT 2
12224: PUSH
12225: LD_INT 30
12227: PUSH
12228: LD_INT 32
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 30
12237: PUSH
12238: LD_INT 33
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 72
12254: PUSH
12255: FOR_IN
12256: IFFALSE 12296
// begin if not GetBWeapon ( i ) then
12258: LD_VAR 0 8
12262: PPUSH
12263: CALL_OW 269
12267: NOT
12268: IFFALSE 12294
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12270: LD_VAR 0 8
12274: PPUSH
12275: LD_VAR 0 8
12279: PPUSH
12280: LD_VAR 0 2
12284: PPUSH
12285: CALL 13550 0 2
12289: PPUSH
12290: CALL_OW 431
// end ;
12294: GO 12255
12296: POP
12297: POP
// end ; for i = 1 to personel do
12298: LD_ADDR_VAR 0 8
12302: PUSH
12303: DOUBLE
12304: LD_INT 1
12306: DEC
12307: ST_TO_ADDR
12308: LD_VAR 0 6
12312: PUSH
12313: FOR_TO
12314: IFFALSE 13384
// begin if i > 4 then
12316: LD_VAR 0 8
12320: PUSH
12321: LD_INT 4
12323: GREATER
12324: IFFALSE 12328
// break ;
12326: GO 13384
// case i of 1 :
12328: LD_VAR 0 8
12332: PUSH
12333: LD_INT 1
12335: DOUBLE
12336: EQUAL
12337: IFTRUE 12341
12339: GO 12421
12341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12342: LD_ADDR_VAR 0 12
12346: PUSH
12347: LD_VAR 0 18
12351: PPUSH
12352: LD_INT 22
12354: PUSH
12355: LD_VAR 0 16
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 58
12366: PUSH
12367: EMPTY
12368: LIST
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: LD_INT 30
12375: PUSH
12376: LD_INT 32
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 30
12385: PUSH
12386: LD_INT 4
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 30
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: PPUSH
12414: CALL_OW 72
12418: ST_TO_ADDR
12419: GO 12643
12421: LD_INT 2
12423: DOUBLE
12424: EQUAL
12425: IFTRUE 12429
12427: GO 12491
12429: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12430: LD_ADDR_VAR 0 12
12434: PUSH
12435: LD_VAR 0 18
12439: PPUSH
12440: LD_INT 22
12442: PUSH
12443: LD_VAR 0 16
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 2
12454: PUSH
12455: LD_INT 30
12457: PUSH
12458: LD_INT 0
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 30
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PPUSH
12484: CALL_OW 72
12488: ST_TO_ADDR
12489: GO 12643
12491: LD_INT 3
12493: DOUBLE
12494: EQUAL
12495: IFTRUE 12499
12497: GO 12561
12499: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12500: LD_ADDR_VAR 0 12
12504: PUSH
12505: LD_VAR 0 18
12509: PPUSH
12510: LD_INT 22
12512: PUSH
12513: LD_VAR 0 16
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 2
12524: PUSH
12525: LD_INT 30
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 30
12537: PUSH
12538: LD_INT 3
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 72
12558: ST_TO_ADDR
12559: GO 12643
12561: LD_INT 4
12563: DOUBLE
12564: EQUAL
12565: IFTRUE 12569
12567: GO 12642
12569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12570: LD_ADDR_VAR 0 12
12574: PUSH
12575: LD_VAR 0 18
12579: PPUSH
12580: LD_INT 22
12582: PUSH
12583: LD_VAR 0 16
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 2
12594: PUSH
12595: LD_INT 30
12597: PUSH
12598: LD_INT 6
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 30
12607: PUSH
12608: LD_INT 7
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 30
12617: PUSH
12618: LD_INT 8
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PPUSH
12635: CALL_OW 72
12639: ST_TO_ADDR
12640: GO 12643
12642: POP
// if i = 1 then
12643: LD_VAR 0 8
12647: PUSH
12648: LD_INT 1
12650: EQUAL
12651: IFFALSE 12762
// begin tmp := [ ] ;
12653: LD_ADDR_VAR 0 19
12657: PUSH
12658: EMPTY
12659: ST_TO_ADDR
// for j in f do
12660: LD_ADDR_VAR 0 9
12664: PUSH
12665: LD_VAR 0 12
12669: PUSH
12670: FOR_IN
12671: IFFALSE 12744
// if GetBType ( j ) = b_bunker then
12673: LD_VAR 0 9
12677: PPUSH
12678: CALL_OW 266
12682: PUSH
12683: LD_INT 32
12685: EQUAL
12686: IFFALSE 12713
// tmp := Insert ( tmp , 1 , j ) else
12688: LD_ADDR_VAR 0 19
12692: PUSH
12693: LD_VAR 0 19
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: LD_VAR 0 9
12705: PPUSH
12706: CALL_OW 2
12710: ST_TO_ADDR
12711: GO 12742
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12713: LD_ADDR_VAR 0 19
12717: PUSH
12718: LD_VAR 0 19
12722: PPUSH
12723: LD_VAR 0 19
12727: PUSH
12728: LD_INT 1
12730: PLUS
12731: PPUSH
12732: LD_VAR 0 9
12736: PPUSH
12737: CALL_OW 2
12741: ST_TO_ADDR
12742: GO 12670
12744: POP
12745: POP
// if tmp then
12746: LD_VAR 0 19
12750: IFFALSE 12762
// f := tmp ;
12752: LD_ADDR_VAR 0 12
12756: PUSH
12757: LD_VAR 0 19
12761: ST_TO_ADDR
// end ; x := personel [ i ] ;
12762: LD_ADDR_VAR 0 13
12766: PUSH
12767: LD_VAR 0 6
12771: PUSH
12772: LD_VAR 0 8
12776: ARRAY
12777: ST_TO_ADDR
// if x = - 1 then
12778: LD_VAR 0 13
12782: PUSH
12783: LD_INT 1
12785: NEG
12786: EQUAL
12787: IFFALSE 12998
// begin for j in f do
12789: LD_ADDR_VAR 0 9
12793: PUSH
12794: LD_VAR 0 12
12798: PUSH
12799: FOR_IN
12800: IFFALSE 12994
// repeat InitHc ;
12802: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12806: LD_VAR 0 9
12810: PPUSH
12811: CALL_OW 266
12815: PUSH
12816: LD_INT 5
12818: EQUAL
12819: IFFALSE 12889
// begin if UnitsInside ( j ) < 3 then
12821: LD_VAR 0 9
12825: PPUSH
12826: CALL_OW 313
12830: PUSH
12831: LD_INT 3
12833: LESS
12834: IFFALSE 12870
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12836: LD_INT 0
12838: PPUSH
12839: LD_INT 5
12841: PUSH
12842: LD_INT 8
12844: PUSH
12845: LD_INT 9
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PUSH
12853: LD_VAR 0 17
12857: ARRAY
12858: PPUSH
12859: LD_VAR 0 4
12863: PPUSH
12864: CALL_OW 380
12868: GO 12887
// PrepareHuman ( false , i , skill ) ;
12870: LD_INT 0
12872: PPUSH
12873: LD_VAR 0 8
12877: PPUSH
12878: LD_VAR 0 4
12882: PPUSH
12883: CALL_OW 380
// end else
12887: GO 12906
// PrepareHuman ( false , i , skill ) ;
12889: LD_INT 0
12891: PPUSH
12892: LD_VAR 0 8
12896: PPUSH
12897: LD_VAR 0 4
12901: PPUSH
12902: CALL_OW 380
// un := CreateHuman ;
12906: LD_ADDR_VAR 0 14
12910: PUSH
12911: CALL_OW 44
12915: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12916: LD_ADDR_VAR 0 7
12920: PUSH
12921: LD_VAR 0 7
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: LD_VAR 0 14
12933: PPUSH
12934: CALL_OW 2
12938: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12939: LD_VAR 0 14
12943: PPUSH
12944: LD_VAR 0 9
12948: PPUSH
12949: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12953: LD_VAR 0 9
12957: PPUSH
12958: CALL_OW 313
12962: PUSH
12963: LD_INT 6
12965: EQUAL
12966: IFTRUE 12990
12968: PUSH
12969: LD_VAR 0 9
12973: PPUSH
12974: CALL_OW 266
12978: PUSH
12979: LD_INT 32
12981: PUSH
12982: LD_INT 31
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: IN
12989: OR
12990: IFFALSE 12802
12992: GO 12799
12994: POP
12995: POP
// end else
12996: GO 13382
// for j = 1 to x do
12998: LD_ADDR_VAR 0 9
13002: PUSH
13003: DOUBLE
13004: LD_INT 1
13006: DEC
13007: ST_TO_ADDR
13008: LD_VAR 0 13
13012: PUSH
13013: FOR_TO
13014: IFFALSE 13380
// begin InitHc ;
13016: CALL_OW 19
// if not f then
13020: LD_VAR 0 12
13024: NOT
13025: IFFALSE 13114
// begin PrepareHuman ( false , i , skill ) ;
13027: LD_INT 0
13029: PPUSH
13030: LD_VAR 0 8
13034: PPUSH
13035: LD_VAR 0 4
13039: PPUSH
13040: CALL_OW 380
// un := CreateHuman ;
13044: LD_ADDR_VAR 0 14
13048: PUSH
13049: CALL_OW 44
13053: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13054: LD_ADDR_VAR 0 7
13058: PUSH
13059: LD_VAR 0 7
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: LD_VAR 0 14
13071: PPUSH
13072: CALL_OW 2
13076: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13077: LD_VAR 0 14
13081: PPUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 250
13091: PPUSH
13092: LD_VAR 0 1
13096: PPUSH
13097: CALL_OW 251
13101: PPUSH
13102: LD_INT 10
13104: PPUSH
13105: LD_INT 0
13107: PPUSH
13108: CALL_OW 50
// continue ;
13112: GO 13013
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13114: LD_VAR 0 12
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: CALL_OW 313
13127: IFFALSE 13155
13129: PUSH
13130: LD_VAR 0 12
13134: PUSH
13135: LD_INT 1
13137: ARRAY
13138: PPUSH
13139: CALL_OW 266
13143: PUSH
13144: LD_INT 32
13146: PUSH
13147: LD_INT 31
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: IN
13154: AND
13155: IFTRUE 13176
13157: PUSH
13158: LD_VAR 0 12
13162: PUSH
13163: LD_INT 1
13165: ARRAY
13166: PPUSH
13167: CALL_OW 313
13171: PUSH
13172: LD_INT 6
13174: EQUAL
13175: OR
13176: IFFALSE 13196
// f := Delete ( f , 1 ) ;
13178: LD_ADDR_VAR 0 12
13182: PUSH
13183: LD_VAR 0 12
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 3
13195: ST_TO_ADDR
// if not f then
13196: LD_VAR 0 12
13200: NOT
13201: IFFALSE 13219
// begin x := x + 2 ;
13203: LD_ADDR_VAR 0 13
13207: PUSH
13208: LD_VAR 0 13
13212: PUSH
13213: LD_INT 2
13215: PLUS
13216: ST_TO_ADDR
// continue ;
13217: GO 13013
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13219: LD_VAR 0 12
13223: PUSH
13224: LD_INT 1
13226: ARRAY
13227: PPUSH
13228: CALL_OW 266
13232: PUSH
13233: LD_INT 5
13235: EQUAL
13236: IFFALSE 13310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13238: LD_VAR 0 12
13242: PUSH
13243: LD_INT 1
13245: ARRAY
13246: PPUSH
13247: CALL_OW 313
13251: PUSH
13252: LD_INT 3
13254: LESS
13255: IFFALSE 13291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13257: LD_INT 0
13259: PPUSH
13260: LD_INT 5
13262: PUSH
13263: LD_INT 8
13265: PUSH
13266: LD_INT 9
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: PUSH
13274: LD_VAR 0 17
13278: ARRAY
13279: PPUSH
13280: LD_VAR 0 4
13284: PPUSH
13285: CALL_OW 380
13289: GO 13308
// PrepareHuman ( false , i , skill ) ;
13291: LD_INT 0
13293: PPUSH
13294: LD_VAR 0 8
13298: PPUSH
13299: LD_VAR 0 4
13303: PPUSH
13304: CALL_OW 380
// end else
13308: GO 13327
// PrepareHuman ( false , i , skill ) ;
13310: LD_INT 0
13312: PPUSH
13313: LD_VAR 0 8
13317: PPUSH
13318: LD_VAR 0 4
13322: PPUSH
13323: CALL_OW 380
// un := CreateHuman ;
13327: LD_ADDR_VAR 0 14
13331: PUSH
13332: CALL_OW 44
13336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13337: LD_ADDR_VAR 0 7
13341: PUSH
13342: LD_VAR 0 7
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: LD_VAR 0 14
13354: PPUSH
13355: CALL_OW 2
13359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13360: LD_VAR 0 14
13364: PPUSH
13365: LD_VAR 0 12
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PPUSH
13374: CALL_OW 52
// end ;
13378: GO 13013
13380: POP
13381: POP
// end ;
13382: GO 12313
13384: POP
13385: POP
// result := result ^ buildings ;
13386: LD_ADDR_VAR 0 7
13390: PUSH
13391: LD_VAR 0 7
13395: PUSH
13396: LD_VAR 0 18
13400: ADD
13401: ST_TO_ADDR
// end else
13402: GO 13545
// begin for i = 1 to personel do
13404: LD_ADDR_VAR 0 8
13408: PUSH
13409: DOUBLE
13410: LD_INT 1
13412: DEC
13413: ST_TO_ADDR
13414: LD_VAR 0 6
13418: PUSH
13419: FOR_TO
13420: IFFALSE 13543
// begin if i > 4 then
13422: LD_VAR 0 8
13426: PUSH
13427: LD_INT 4
13429: GREATER
13430: IFFALSE 13434
// break ;
13432: GO 13543
// x := personel [ i ] ;
13434: LD_ADDR_VAR 0 13
13438: PUSH
13439: LD_VAR 0 6
13443: PUSH
13444: LD_VAR 0 8
13448: ARRAY
13449: ST_TO_ADDR
// if x = - 1 then
13450: LD_VAR 0 13
13454: PUSH
13455: LD_INT 1
13457: NEG
13458: EQUAL
13459: IFFALSE 13463
// continue ;
13461: GO 13419
// PrepareHuman ( false , i , skill ) ;
13463: LD_INT 0
13465: PPUSH
13466: LD_VAR 0 8
13470: PPUSH
13471: LD_VAR 0 4
13475: PPUSH
13476: CALL_OW 380
// un := CreateHuman ;
13480: LD_ADDR_VAR 0 14
13484: PUSH
13485: CALL_OW 44
13489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13490: LD_VAR 0 14
13494: PPUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: CALL_OW 250
13504: PPUSH
13505: LD_VAR 0 1
13509: PPUSH
13510: CALL_OW 251
13514: PPUSH
13515: LD_INT 10
13517: PPUSH
13518: LD_INT 0
13520: PPUSH
13521: CALL_OW 50
// result := result ^ un ;
13525: LD_ADDR_VAR 0 7
13529: PUSH
13530: LD_VAR 0 7
13534: PUSH
13535: LD_VAR 0 14
13539: ADD
13540: ST_TO_ADDR
// end ;
13541: GO 13419
13543: POP
13544: POP
// end ; end ;
13545: LD_VAR 0 7
13549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13550: LD_INT 0
13552: PPUSH
13553: PPUSH
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
13559: PPUSH
13560: PPUSH
13561: PPUSH
13562: PPUSH
13563: PPUSH
13564: PPUSH
13565: PPUSH
13566: PPUSH
13567: PPUSH
// result := false ;
13568: LD_ADDR_VAR 0 3
13572: PUSH
13573: LD_INT 0
13575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13576: LD_VAR 0 1
13580: NOT
13581: IFTRUE 13606
13583: PUSH
13584: LD_VAR 0 1
13588: PPUSH
13589: CALL_OW 266
13593: PUSH
13594: LD_INT 32
13596: PUSH
13597: LD_INT 33
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: IN
13604: NOT
13605: OR
13606: IFFALSE 13610
// exit ;
13608: GO 14745
// nat := GetNation ( tower ) ;
13610: LD_ADDR_VAR 0 12
13614: PUSH
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 248
13624: ST_TO_ADDR
// side := GetSide ( tower ) ;
13625: LD_ADDR_VAR 0 16
13629: PUSH
13630: LD_VAR 0 1
13634: PPUSH
13635: CALL_OW 255
13639: ST_TO_ADDR
// x := GetX ( tower ) ;
13640: LD_ADDR_VAR 0 10
13644: PUSH
13645: LD_VAR 0 1
13649: PPUSH
13650: CALL_OW 250
13654: ST_TO_ADDR
// y := GetY ( tower ) ;
13655: LD_ADDR_VAR 0 11
13659: PUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: CALL_OW 251
13669: ST_TO_ADDR
// if not x or not y then
13670: LD_VAR 0 10
13674: NOT
13675: IFTRUE 13684
13677: PUSH
13678: LD_VAR 0 11
13682: NOT
13683: OR
13684: IFFALSE 13688
// exit ;
13686: GO 14745
// weapon := 0 ;
13688: LD_ADDR_VAR 0 18
13692: PUSH
13693: LD_INT 0
13695: ST_TO_ADDR
// fac_list := [ ] ;
13696: LD_ADDR_VAR 0 17
13700: PUSH
13701: EMPTY
13702: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13703: LD_ADDR_VAR 0 6
13707: PUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 274
13717: PPUSH
13718: LD_VAR 0 2
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL 11280 0 3
13730: PPUSH
13731: LD_INT 30
13733: PUSH
13734: LD_INT 3
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 72
13745: ST_TO_ADDR
// if not factories then
13746: LD_VAR 0 6
13750: NOT
13751: IFFALSE 13755
// exit ;
13753: GO 14745
// for i in factories do
13755: LD_ADDR_VAR 0 8
13759: PUSH
13760: LD_VAR 0 6
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13791
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13768: LD_ADDR_VAR 0 17
13772: PUSH
13773: LD_VAR 0 17
13777: PUSH
13778: LD_VAR 0 8
13782: PPUSH
13783: CALL_OW 478
13787: UNION
13788: ST_TO_ADDR
13789: GO 13765
13791: POP
13792: POP
// if not fac_list then
13793: LD_VAR 0 17
13797: NOT
13798: IFFALSE 13802
// exit ;
13800: GO 14745
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13802: LD_ADDR_VAR 0 5
13806: PUSH
13807: LD_INT 4
13809: PUSH
13810: LD_INT 5
13812: PUSH
13813: LD_INT 9
13815: PUSH
13816: LD_INT 10
13818: PUSH
13819: LD_INT 6
13821: PUSH
13822: LD_INT 7
13824: PUSH
13825: LD_INT 11
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 27
13839: PUSH
13840: LD_INT 28
13842: PUSH
13843: LD_INT 26
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 43
13857: PUSH
13858: LD_INT 44
13860: PUSH
13861: LD_INT 46
13863: PUSH
13864: LD_INT 45
13866: PUSH
13867: LD_INT 47
13869: PUSH
13870: LD_INT 49
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: PUSH
13886: LD_VAR 0 12
13890: ARRAY
13891: ST_TO_ADDR
// list := list isect fac_list ;
13892: LD_ADDR_VAR 0 5
13896: PUSH
13897: LD_VAR 0 5
13901: PUSH
13902: LD_VAR 0 17
13906: ISECT
13907: ST_TO_ADDR
// if not list then
13908: LD_VAR 0 5
13912: NOT
13913: IFFALSE 13917
// exit ;
13915: GO 14745
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13917: LD_VAR 0 12
13921: PUSH
13922: LD_INT 3
13924: EQUAL
13925: IFFALSE 13937
13927: PUSH
13928: LD_INT 49
13930: PUSH
13931: LD_VAR 0 5
13935: IN
13936: AND
13937: IFFALSE 13957
13939: PUSH
13940: LD_INT 31
13942: PPUSH
13943: LD_VAR 0 16
13947: PPUSH
13948: CALL_OW 321
13952: PUSH
13953: LD_INT 2
13955: EQUAL
13956: AND
13957: IFFALSE 14017
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13959: LD_INT 22
13961: PUSH
13962: LD_VAR 0 16
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 35
13973: PUSH
13974: LD_INT 49
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 91
13983: PUSH
13984: LD_VAR 0 1
13988: PUSH
13989: LD_INT 10
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: LIST
14001: PPUSH
14002: CALL_OW 69
14006: NOT
14007: IFFALSE 14017
// weapon := ru_time_lapser ;
14009: LD_ADDR_VAR 0 18
14013: PUSH
14014: LD_INT 49
14016: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14017: LD_VAR 0 12
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: IN
14032: IFFALSE 14056
14034: PUSH
14035: LD_INT 11
14037: PUSH
14038: LD_VAR 0 5
14042: IN
14043: IFTRUE 14055
14045: PUSH
14046: LD_INT 30
14048: PUSH
14049: LD_VAR 0 5
14053: IN
14054: OR
14055: AND
14056: IFFALSE 14076
14058: PUSH
14059: LD_INT 6
14061: PPUSH
14062: LD_VAR 0 16
14066: PPUSH
14067: CALL_OW 321
14071: PUSH
14072: LD_INT 2
14074: EQUAL
14075: AND
14076: IFFALSE 14243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14078: LD_INT 22
14080: PUSH
14081: LD_VAR 0 16
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 2
14092: PUSH
14093: LD_INT 35
14095: PUSH
14096: LD_INT 11
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 35
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 91
14120: PUSH
14121: LD_VAR 0 1
14125: PUSH
14126: LD_INT 18
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PPUSH
14139: CALL_OW 69
14143: NOT
14144: IFFALSE 14220
14146: PUSH
14147: LD_INT 22
14149: PUSH
14150: LD_VAR 0 16
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 30
14164: PUSH
14165: LD_INT 32
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 30
14174: PUSH
14175: LD_INT 33
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 91
14189: PUSH
14190: LD_VAR 0 1
14194: PUSH
14195: LD_INT 12
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PUSH
14216: LD_INT 2
14218: GREATER
14219: AND
14220: IFFALSE 14243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14222: LD_ADDR_VAR 0 18
14226: PUSH
14227: LD_INT 11
14229: PUSH
14230: LD_INT 30
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_VAR 0 12
14241: ARRAY
14242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14243: LD_VAR 0 18
14247: NOT
14248: IFFALSE 14268
14250: PUSH
14251: LD_INT 40
14253: PPUSH
14254: LD_VAR 0 16
14258: PPUSH
14259: CALL_OW 321
14263: PUSH
14264: LD_INT 2
14266: EQUAL
14267: AND
14268: IFFALSE 14304
14270: PUSH
14271: LD_INT 7
14273: PUSH
14274: LD_VAR 0 5
14278: IN
14279: IFTRUE 14291
14281: PUSH
14282: LD_INT 28
14284: PUSH
14285: LD_VAR 0 5
14289: IN
14290: OR
14291: IFTRUE 14303
14293: PUSH
14294: LD_INT 45
14296: PUSH
14297: LD_VAR 0 5
14301: IN
14302: OR
14303: AND
14304: IFFALSE 14558
// begin hex := GetHexInfo ( x , y ) ;
14306: LD_ADDR_VAR 0 4
14310: PUSH
14311: LD_VAR 0 10
14315: PPUSH
14316: LD_VAR 0 11
14320: PPUSH
14321: CALL_OW 546
14325: ST_TO_ADDR
// if hex [ 1 ] then
14326: LD_VAR 0 4
14330: PUSH
14331: LD_INT 1
14333: ARRAY
14334: IFFALSE 14338
// exit ;
14336: GO 14745
// height := hex [ 2 ] ;
14338: LD_ADDR_VAR 0 15
14342: PUSH
14343: LD_VAR 0 4
14347: PUSH
14348: LD_INT 2
14350: ARRAY
14351: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14352: LD_ADDR_VAR 0 14
14356: PUSH
14357: LD_INT 0
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: LD_INT 3
14365: PUSH
14366: LD_INT 5
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: ST_TO_ADDR
// for i in tmp do
14375: LD_ADDR_VAR 0 8
14379: PUSH
14380: LD_VAR 0 14
14384: PUSH
14385: FOR_IN
14386: IFFALSE 14556
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14388: LD_ADDR_VAR 0 9
14392: PUSH
14393: LD_VAR 0 10
14397: PPUSH
14398: LD_VAR 0 8
14402: PPUSH
14403: LD_INT 5
14405: PPUSH
14406: CALL_OW 272
14410: PUSH
14411: LD_VAR 0 11
14415: PPUSH
14416: LD_VAR 0 8
14420: PPUSH
14421: LD_INT 5
14423: PPUSH
14424: CALL_OW 273
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14433: LD_VAR 0 9
14437: PUSH
14438: LD_INT 1
14440: ARRAY
14441: PPUSH
14442: LD_VAR 0 9
14446: PUSH
14447: LD_INT 2
14449: ARRAY
14450: PPUSH
14451: CALL_OW 488
14455: IFFALSE 14554
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14457: LD_ADDR_VAR 0 4
14461: PUSH
14462: LD_VAR 0 9
14466: PUSH
14467: LD_INT 1
14469: ARRAY
14470: PPUSH
14471: LD_VAR 0 9
14475: PUSH
14476: LD_INT 2
14478: ARRAY
14479: PPUSH
14480: CALL_OW 546
14484: ST_TO_ADDR
// if hex [ 1 ] then
14485: LD_VAR 0 4
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: IFFALSE 14497
// continue ;
14495: GO 14385
// h := hex [ 2 ] ;
14497: LD_ADDR_VAR 0 13
14501: PUSH
14502: LD_VAR 0 4
14506: PUSH
14507: LD_INT 2
14509: ARRAY
14510: ST_TO_ADDR
// if h + 7 < height then
14511: LD_VAR 0 13
14515: PUSH
14516: LD_INT 7
14518: PLUS
14519: PUSH
14520: LD_VAR 0 15
14524: LESS
14525: IFFALSE 14554
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14527: LD_ADDR_VAR 0 18
14531: PUSH
14532: LD_INT 7
14534: PUSH
14535: LD_INT 28
14537: PUSH
14538: LD_INT 45
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: PUSH
14546: LD_VAR 0 12
14550: ARRAY
14551: ST_TO_ADDR
// break ;
14552: GO 14556
// end ; end ; end ;
14554: GO 14385
14556: POP
14557: POP
// end ; if not weapon then
14558: LD_VAR 0 18
14562: NOT
14563: IFFALSE 14623
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14565: LD_ADDR_VAR 0 5
14569: PUSH
14570: LD_VAR 0 5
14574: PUSH
14575: LD_INT 11
14577: PUSH
14578: LD_INT 30
14580: PUSH
14581: LD_INT 49
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: DIFF
14589: ST_TO_ADDR
// if not list then
14590: LD_VAR 0 5
14594: NOT
14595: IFFALSE 14599
// exit ;
14597: GO 14745
// weapon := list [ rand ( 1 , list ) ] ;
14599: LD_ADDR_VAR 0 18
14603: PUSH
14604: LD_VAR 0 5
14608: PUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_VAR 0 5
14616: PPUSH
14617: CALL_OW 12
14621: ARRAY
14622: ST_TO_ADDR
// end ; if weapon then
14623: LD_VAR 0 18
14627: IFFALSE 14745
// begin tmp := CostOfWeapon ( weapon ) ;
14629: LD_ADDR_VAR 0 14
14633: PUSH
14634: LD_VAR 0 18
14638: PPUSH
14639: CALL_OW 451
14643: ST_TO_ADDR
// j := GetBase ( tower ) ;
14644: LD_ADDR_VAR 0 9
14648: PUSH
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 274
14658: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14659: LD_VAR 0 9
14663: PPUSH
14664: LD_INT 1
14666: PPUSH
14667: CALL_OW 275
14671: PUSH
14672: LD_VAR 0 14
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: GREATEREQUAL
14681: IFFALSE 14707
14683: PUSH
14684: LD_VAR 0 9
14688: PPUSH
14689: LD_INT 2
14691: PPUSH
14692: CALL_OW 275
14696: PUSH
14697: LD_VAR 0 14
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: GREATEREQUAL
14706: AND
14707: IFFALSE 14733
14709: PUSH
14710: LD_VAR 0 9
14714: PPUSH
14715: LD_INT 3
14717: PPUSH
14718: CALL_OW 275
14722: PUSH
14723: LD_VAR 0 14
14727: PUSH
14728: LD_INT 3
14730: ARRAY
14731: GREATEREQUAL
14732: AND
14733: IFFALSE 14745
// result := weapon ;
14735: LD_ADDR_VAR 0 3
14739: PUSH
14740: LD_VAR 0 18
14744: ST_TO_ADDR
// end ; end ;
14745: LD_VAR 0 3
14749: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14750: LD_INT 0
14752: PPUSH
14753: PPUSH
// result := true ;
14754: LD_ADDR_VAR 0 3
14758: PUSH
14759: LD_INT 1
14761: ST_TO_ADDR
// if array1 = array2 then
14762: LD_VAR 0 1
14766: PUSH
14767: LD_VAR 0 2
14771: EQUAL
14772: IFFALSE 14832
// begin for i = 1 to array1 do
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_VAR 0 1
14788: PUSH
14789: FOR_TO
14790: IFFALSE 14828
// if array1 [ i ] <> array2 [ i ] then
14792: LD_VAR 0 1
14796: PUSH
14797: LD_VAR 0 4
14801: ARRAY
14802: PUSH
14803: LD_VAR 0 2
14807: PUSH
14808: LD_VAR 0 4
14812: ARRAY
14813: NONEQUAL
14814: IFFALSE 14826
// begin result := false ;
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 0
14823: ST_TO_ADDR
// break ;
14824: GO 14828
// end ;
14826: GO 14789
14828: POP
14829: POP
// end else
14830: GO 14840
// result := false ;
14832: LD_ADDR_VAR 0 3
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// end ;
14840: LD_VAR 0 3
14844: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
// if not array1 or not array2 then
14849: LD_VAR 0 1
14853: NOT
14854: IFTRUE 14863
14856: PUSH
14857: LD_VAR 0 2
14861: NOT
14862: OR
14863: IFFALSE 14867
// exit ;
14865: GO 14931
// result := true ;
14867: LD_ADDR_VAR 0 3
14871: PUSH
14872: LD_INT 1
14874: ST_TO_ADDR
// for i = 1 to array1 do
14875: LD_ADDR_VAR 0 4
14879: PUSH
14880: DOUBLE
14881: LD_INT 1
14883: DEC
14884: ST_TO_ADDR
14885: LD_VAR 0 1
14889: PUSH
14890: FOR_TO
14891: IFFALSE 14929
// if array1 [ i ] <> array2 [ i ] then
14893: LD_VAR 0 1
14897: PUSH
14898: LD_VAR 0 4
14902: ARRAY
14903: PUSH
14904: LD_VAR 0 2
14908: PUSH
14909: LD_VAR 0 4
14913: ARRAY
14914: NONEQUAL
14915: IFFALSE 14927
// begin result := false ;
14917: LD_ADDR_VAR 0 3
14921: PUSH
14922: LD_INT 0
14924: ST_TO_ADDR
// break ;
14925: GO 14929
// end ;
14927: GO 14890
14929: POP
14930: POP
// end ;
14931: LD_VAR 0 3
14935: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14936: LD_INT 0
14938: PPUSH
14939: PPUSH
14940: PPUSH
// pom := GetBase ( fac ) ;
14941: LD_ADDR_VAR 0 5
14945: PUSH
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 274
14955: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14956: LD_ADDR_VAR 0 4
14960: PUSH
14961: LD_VAR 0 2
14965: PUSH
14966: LD_INT 1
14968: ARRAY
14969: PPUSH
14970: LD_VAR 0 2
14974: PUSH
14975: LD_INT 2
14977: ARRAY
14978: PPUSH
14979: LD_VAR 0 2
14983: PUSH
14984: LD_INT 3
14986: ARRAY
14987: PPUSH
14988: LD_VAR 0 2
14992: PUSH
14993: LD_INT 4
14995: ARRAY
14996: PPUSH
14997: CALL_OW 449
15001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15002: LD_ADDR_VAR 0 3
15006: PUSH
15007: LD_VAR 0 5
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 275
15019: PUSH
15020: LD_VAR 0 4
15024: PUSH
15025: LD_INT 1
15027: ARRAY
15028: GREATEREQUAL
15029: IFFALSE 15055
15031: PUSH
15032: LD_VAR 0 5
15036: PPUSH
15037: LD_INT 2
15039: PPUSH
15040: CALL_OW 275
15044: PUSH
15045: LD_VAR 0 4
15049: PUSH
15050: LD_INT 2
15052: ARRAY
15053: GREATEREQUAL
15054: AND
15055: IFFALSE 15081
15057: PUSH
15058: LD_VAR 0 5
15062: PPUSH
15063: LD_INT 3
15065: PPUSH
15066: CALL_OW 275
15070: PUSH
15071: LD_VAR 0 4
15075: PUSH
15076: LD_INT 3
15078: ARRAY
15079: GREATEREQUAL
15080: AND
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 3
15086: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
// pom := GetBase ( building ) ;
15093: LD_ADDR_VAR 0 3
15097: PUSH
15098: LD_VAR 0 1
15102: PPUSH
15103: CALL_OW 274
15107: ST_TO_ADDR
// if not pom then
15108: LD_VAR 0 3
15112: NOT
15113: IFFALSE 15117
// exit ;
15115: GO 15291
// btype := GetBType ( building ) ;
15117: LD_ADDR_VAR 0 5
15121: PUSH
15122: LD_VAR 0 1
15126: PPUSH
15127: CALL_OW 266
15131: ST_TO_ADDR
// if btype = b_armoury then
15132: LD_VAR 0 5
15136: PUSH
15137: LD_INT 4
15139: EQUAL
15140: IFFALSE 15150
// btype := b_barracks ;
15142: LD_ADDR_VAR 0 5
15146: PUSH
15147: LD_INT 5
15149: ST_TO_ADDR
// if btype = b_depot then
15150: LD_VAR 0 5
15154: PUSH
15155: LD_INT 0
15157: EQUAL
15158: IFFALSE 15168
// btype := b_warehouse ;
15160: LD_ADDR_VAR 0 5
15164: PUSH
15165: LD_INT 1
15167: ST_TO_ADDR
// if btype = b_workshop then
15168: LD_VAR 0 5
15172: PUSH
15173: LD_INT 2
15175: EQUAL
15176: IFFALSE 15186
// btype := b_factory ;
15178: LD_ADDR_VAR 0 5
15182: PUSH
15183: LD_INT 3
15185: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15186: LD_ADDR_VAR 0 4
15190: PUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 248
15205: PPUSH
15206: CALL_OW 450
15210: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15211: LD_ADDR_VAR 0 2
15215: PUSH
15216: LD_VAR 0 3
15220: PPUSH
15221: LD_INT 1
15223: PPUSH
15224: CALL_OW 275
15228: PUSH
15229: LD_VAR 0 4
15233: PUSH
15234: LD_INT 1
15236: ARRAY
15237: GREATEREQUAL
15238: IFFALSE 15264
15240: PUSH
15241: LD_VAR 0 3
15245: PPUSH
15246: LD_INT 2
15248: PPUSH
15249: CALL_OW 275
15253: PUSH
15254: LD_VAR 0 4
15258: PUSH
15259: LD_INT 2
15261: ARRAY
15262: GREATEREQUAL
15263: AND
15264: IFFALSE 15290
15266: PUSH
15267: LD_VAR 0 3
15271: PPUSH
15272: LD_INT 3
15274: PPUSH
15275: CALL_OW 275
15279: PUSH
15280: LD_VAR 0 4
15284: PUSH
15285: LD_INT 3
15287: ARRAY
15288: GREATEREQUAL
15289: AND
15290: ST_TO_ADDR
// end ;
15291: LD_VAR 0 2
15295: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15296: LD_INT 0
15298: PPUSH
15299: PPUSH
15300: PPUSH
// pom := GetBase ( building ) ;
15301: LD_ADDR_VAR 0 4
15305: PUSH
15306: LD_VAR 0 1
15310: PPUSH
15311: CALL_OW 274
15315: ST_TO_ADDR
// if not pom then
15316: LD_VAR 0 4
15320: NOT
15321: IFFALSE 15325
// exit ;
15323: GO 15430
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15325: LD_ADDR_VAR 0 5
15329: PUSH
15330: LD_VAR 0 2
15334: PPUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 248
15344: PPUSH
15345: CALL_OW 450
15349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15350: LD_ADDR_VAR 0 3
15354: PUSH
15355: LD_VAR 0 4
15359: PPUSH
15360: LD_INT 1
15362: PPUSH
15363: CALL_OW 275
15367: PUSH
15368: LD_VAR 0 5
15372: PUSH
15373: LD_INT 1
15375: ARRAY
15376: GREATEREQUAL
15377: IFFALSE 15403
15379: PUSH
15380: LD_VAR 0 4
15384: PPUSH
15385: LD_INT 2
15387: PPUSH
15388: CALL_OW 275
15392: PUSH
15393: LD_VAR 0 5
15397: PUSH
15398: LD_INT 2
15400: ARRAY
15401: GREATEREQUAL
15402: AND
15403: IFFALSE 15429
15405: PUSH
15406: LD_VAR 0 4
15410: PPUSH
15411: LD_INT 3
15413: PPUSH
15414: CALL_OW 275
15418: PUSH
15419: LD_VAR 0 5
15423: PUSH
15424: LD_INT 3
15426: ARRAY
15427: GREATEREQUAL
15428: AND
15429: ST_TO_ADDR
// end ;
15430: LD_VAR 0 3
15434: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15435: LD_INT 0
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
// result := false ;
15448: LD_ADDR_VAR 0 8
15452: PUSH
15453: LD_INT 0
15455: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15456: LD_VAR 0 5
15460: NOT
15461: IFTRUE 15470
15463: PUSH
15464: LD_VAR 0 1
15468: NOT
15469: OR
15470: IFTRUE 15479
15472: PUSH
15473: LD_VAR 0 2
15477: NOT
15478: OR
15479: IFTRUE 15488
15481: PUSH
15482: LD_VAR 0 3
15486: NOT
15487: OR
15488: IFFALSE 15492
// exit ;
15490: GO 16318
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15492: LD_ADDR_VAR 0 14
15496: PUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_VAR 0 2
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_VAR 0 4
15516: PPUSH
15517: LD_VAR 0 5
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: CALL_OW 248
15530: PPUSH
15531: LD_INT 0
15533: PPUSH
15534: CALL 17599 0 6
15538: ST_TO_ADDR
// if not hexes then
15539: LD_VAR 0 14
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 16318
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15548: LD_ADDR_VAR 0 17
15552: PUSH
15553: LD_VAR 0 5
15557: PPUSH
15558: LD_INT 22
15560: PUSH
15561: LD_VAR 0 13
15565: PPUSH
15566: CALL_OW 255
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 2
15577: PUSH
15578: LD_INT 30
15580: PUSH
15581: LD_INT 0
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 30
15590: PUSH
15591: LD_INT 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PPUSH
15607: CALL_OW 72
15611: ST_TO_ADDR
// for i = 1 to hexes do
15612: LD_ADDR_VAR 0 9
15616: PUSH
15617: DOUBLE
15618: LD_INT 1
15620: DEC
15621: ST_TO_ADDR
15622: LD_VAR 0 14
15626: PUSH
15627: FOR_TO
15628: IFFALSE 16316
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15630: LD_ADDR_VAR 0 13
15634: PUSH
15635: LD_VAR 0 14
15639: PUSH
15640: LD_VAR 0 9
15644: ARRAY
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 14
15654: PUSH
15655: LD_VAR 0 9
15659: ARRAY
15660: PUSH
15661: LD_INT 2
15663: ARRAY
15664: PPUSH
15665: CALL_OW 428
15669: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15670: LD_VAR 0 14
15674: PUSH
15675: LD_VAR 0 9
15679: ARRAY
15680: PUSH
15681: LD_INT 1
15683: ARRAY
15684: PPUSH
15685: LD_VAR 0 14
15689: PUSH
15690: LD_VAR 0 9
15694: ARRAY
15695: PUSH
15696: LD_INT 2
15698: ARRAY
15699: PPUSH
15700: CALL_OW 351
15704: IFTRUE 15743
15706: PUSH
15707: LD_VAR 0 14
15711: PUSH
15712: LD_VAR 0 9
15716: ARRAY
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: PPUSH
15722: LD_VAR 0 14
15726: PUSH
15727: LD_VAR 0 9
15731: ARRAY
15732: PUSH
15733: LD_INT 2
15735: ARRAY
15736: PPUSH
15737: CALL_OW 488
15741: NOT
15742: OR
15743: IFTRUE 15760
15745: PUSH
15746: LD_VAR 0 13
15750: PPUSH
15751: CALL_OW 247
15755: PUSH
15756: LD_INT 3
15758: EQUAL
15759: OR
15760: IFFALSE 15766
// exit ;
15762: POP
15763: POP
15764: GO 16318
// if not tmp then
15766: LD_VAR 0 13
15770: NOT
15771: IFFALSE 15775
// continue ;
15773: GO 15627
// result := true ;
15775: LD_ADDR_VAR 0 8
15779: PUSH
15780: LD_INT 1
15782: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15783: LD_VAR 0 6
15787: IFFALSE 15804
15789: PUSH
15790: LD_VAR 0 13
15794: PPUSH
15795: CALL_OW 247
15799: PUSH
15800: LD_INT 2
15802: EQUAL
15803: AND
15804: IFFALSE 15821
15806: PUSH
15807: LD_VAR 0 13
15811: PPUSH
15812: CALL_OW 263
15816: PUSH
15817: LD_INT 1
15819: EQUAL
15820: AND
15821: IFFALSE 15985
// begin if IsDrivenBy ( tmp ) then
15823: LD_VAR 0 13
15827: PPUSH
15828: CALL_OW 311
15832: IFFALSE 15836
// continue ;
15834: GO 15627
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15836: LD_VAR 0 6
15840: PPUSH
15841: LD_INT 3
15843: PUSH
15844: LD_INT 60
15846: PUSH
15847: EMPTY
15848: LIST
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 55
15859: PUSH
15860: EMPTY
15861: LIST
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 72
15875: IFFALSE 15983
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15877: LD_ADDR_VAR 0 18
15881: PUSH
15882: LD_VAR 0 6
15886: PPUSH
15887: LD_INT 3
15889: PUSH
15890: LD_INT 60
15892: PUSH
15893: EMPTY
15894: LIST
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 3
15902: PUSH
15903: LD_INT 55
15905: PUSH
15906: EMPTY
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PPUSH
15917: CALL_OW 72
15921: PUSH
15922: LD_INT 1
15924: ARRAY
15925: ST_TO_ADDR
// if IsInUnit ( driver ) then
15926: LD_VAR 0 18
15930: PPUSH
15931: CALL_OW 310
15935: IFFALSE 15946
// ComExit ( driver ) ;
15937: LD_VAR 0 18
15941: PPUSH
15942: CALL 41589 0 1
// AddComEnterUnit ( driver , tmp ) ;
15946: LD_VAR 0 18
15950: PPUSH
15951: LD_VAR 0 13
15955: PPUSH
15956: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15960: LD_VAR 0 18
15964: PPUSH
15965: LD_VAR 0 7
15969: PPUSH
15970: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15974: LD_VAR 0 18
15978: PPUSH
15979: CALL_OW 181
// end ; continue ;
15983: GO 15627
// end ; if not cleaners or not tmp in cleaners then
15985: LD_VAR 0 6
15989: NOT
15990: IFTRUE 16005
15992: PUSH
15993: LD_VAR 0 13
15997: PUSH
15998: LD_VAR 0 6
16002: IN
16003: NOT
16004: OR
16005: IFFALSE 16314
// begin if dep then
16007: LD_VAR 0 17
16011: IFFALSE 16147
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16013: LD_ADDR_VAR 0 16
16017: PUSH
16018: LD_VAR 0 17
16022: PUSH
16023: LD_INT 1
16025: ARRAY
16026: PPUSH
16027: CALL_OW 250
16031: PPUSH
16032: LD_VAR 0 17
16036: PUSH
16037: LD_INT 1
16039: ARRAY
16040: PPUSH
16041: CALL_OW 254
16045: PPUSH
16046: LD_INT 5
16048: PPUSH
16049: CALL_OW 272
16053: PUSH
16054: LD_VAR 0 17
16058: PUSH
16059: LD_INT 1
16061: ARRAY
16062: PPUSH
16063: CALL_OW 251
16067: PPUSH
16068: LD_VAR 0 17
16072: PUSH
16073: LD_INT 1
16075: ARRAY
16076: PPUSH
16077: CALL_OW 254
16081: PPUSH
16082: LD_INT 5
16084: PPUSH
16085: CALL_OW 273
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16094: LD_VAR 0 16
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PPUSH
16103: LD_VAR 0 16
16107: PUSH
16108: LD_INT 2
16110: ARRAY
16111: PPUSH
16112: CALL_OW 488
16116: IFFALSE 16147
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16118: LD_VAR 0 13
16122: PPUSH
16123: LD_VAR 0 16
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: PPUSH
16132: LD_VAR 0 16
16136: PUSH
16137: LD_INT 2
16139: ARRAY
16140: PPUSH
16141: CALL_OW 111
// continue ;
16145: GO 15627
// end ; end ; r := GetDir ( tmp ) ;
16147: LD_ADDR_VAR 0 15
16151: PUSH
16152: LD_VAR 0 13
16156: PPUSH
16157: CALL_OW 254
16161: ST_TO_ADDR
// if r = 5 then
16162: LD_VAR 0 15
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16180
// r := 0 ;
16172: LD_ADDR_VAR 0 15
16176: PUSH
16177: LD_INT 0
16179: ST_TO_ADDR
// for j = r to 5 do
16180: LD_ADDR_VAR 0 10
16184: PUSH
16185: DOUBLE
16186: LD_VAR 0 15
16190: DEC
16191: ST_TO_ADDR
16192: LD_INT 5
16194: PUSH
16195: FOR_TO
16196: IFFALSE 16312
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16198: LD_ADDR_VAR 0 11
16202: PUSH
16203: LD_VAR 0 13
16207: PPUSH
16208: CALL_OW 250
16212: PPUSH
16213: LD_VAR 0 10
16217: PPUSH
16218: LD_INT 2
16220: PPUSH
16221: CALL_OW 272
16225: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16226: LD_ADDR_VAR 0 12
16230: PUSH
16231: LD_VAR 0 13
16235: PPUSH
16236: CALL_OW 251
16240: PPUSH
16241: LD_VAR 0 10
16245: PPUSH
16246: LD_INT 2
16248: PPUSH
16249: CALL_OW 273
16253: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16254: LD_VAR 0 11
16258: PPUSH
16259: LD_VAR 0 12
16263: PPUSH
16264: CALL_OW 488
16268: IFFALSE 16287
16270: PUSH
16271: LD_VAR 0 11
16275: PPUSH
16276: LD_VAR 0 12
16280: PPUSH
16281: CALL_OW 428
16285: NOT
16286: AND
16287: IFFALSE 16310
// begin ComMoveXY ( tmp , _x , _y ) ;
16289: LD_VAR 0 13
16293: PPUSH
16294: LD_VAR 0 11
16298: PPUSH
16299: LD_VAR 0 12
16303: PPUSH
16304: CALL_OW 111
// break ;
16308: GO 16312
// end ; end ;
16310: GO 16195
16312: POP
16313: POP
// end ; end ;
16314: GO 15627
16316: POP
16317: POP
// end ;
16318: LD_VAR 0 8
16322: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16323: LD_INT 0
16325: PPUSH
// result := true ;
16326: LD_ADDR_VAR 0 3
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16334: LD_VAR 0 2
16338: PUSH
16339: LD_INT 24
16341: DOUBLE
16342: EQUAL
16343: IFTRUE 16353
16345: LD_INT 33
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16378
16353: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: LD_INT 32
16361: PPUSH
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 321
16371: PUSH
16372: LD_INT 2
16374: EQUAL
16375: ST_TO_ADDR
16376: GO 16694
16378: LD_INT 20
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16411
16386: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: LD_INT 6
16394: PPUSH
16395: LD_VAR 0 1
16399: PPUSH
16400: CALL_OW 321
16404: PUSH
16405: LD_INT 2
16407: EQUAL
16408: ST_TO_ADDR
16409: GO 16694
16411: LD_INT 22
16413: DOUBLE
16414: EQUAL
16415: IFTRUE 16425
16417: LD_INT 36
16419: DOUBLE
16420: EQUAL
16421: IFTRUE 16425
16423: GO 16450
16425: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16426: LD_ADDR_VAR 0 3
16430: PUSH
16431: LD_INT 15
16433: PPUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 321
16443: PUSH
16444: LD_INT 2
16446: EQUAL
16447: ST_TO_ADDR
16448: GO 16694
16450: LD_INT 30
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16483
16458: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16459: LD_ADDR_VAR 0 3
16463: PUSH
16464: LD_INT 20
16466: PPUSH
16467: LD_VAR 0 1
16471: PPUSH
16472: CALL_OW 321
16476: PUSH
16477: LD_INT 2
16479: EQUAL
16480: ST_TO_ADDR
16481: GO 16694
16483: LD_INT 28
16485: DOUBLE
16486: EQUAL
16487: IFTRUE 16497
16489: LD_INT 21
16491: DOUBLE
16492: EQUAL
16493: IFTRUE 16497
16495: GO 16522
16497: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_INT 21
16505: PPUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 321
16515: PUSH
16516: LD_INT 2
16518: EQUAL
16519: ST_TO_ADDR
16520: GO 16694
16522: LD_INT 16
16524: DOUBLE
16525: EQUAL
16526: IFTRUE 16530
16528: GO 16555
16530: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16531: LD_ADDR_VAR 0 3
16535: PUSH
16536: LD_INT 84
16538: PPUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 321
16548: PUSH
16549: LD_INT 2
16551: EQUAL
16552: ST_TO_ADDR
16553: GO 16694
16555: LD_INT 19
16557: DOUBLE
16558: EQUAL
16559: IFTRUE 16569
16561: LD_INT 23
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16594
16569: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: LD_INT 83
16577: PPUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 321
16587: PUSH
16588: LD_INT 2
16590: EQUAL
16591: ST_TO_ADDR
16592: GO 16694
16594: LD_INT 17
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 16627
16602: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16603: LD_ADDR_VAR 0 3
16607: PUSH
16608: LD_INT 39
16610: PPUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 321
16620: PUSH
16621: LD_INT 2
16623: EQUAL
16624: ST_TO_ADDR
16625: GO 16694
16627: LD_INT 18
16629: DOUBLE
16630: EQUAL
16631: IFTRUE 16635
16633: GO 16660
16635: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16636: LD_ADDR_VAR 0 3
16640: PUSH
16641: LD_INT 40
16643: PPUSH
16644: LD_VAR 0 1
16648: PPUSH
16649: CALL_OW 321
16653: PUSH
16654: LD_INT 2
16656: EQUAL
16657: ST_TO_ADDR
16658: GO 16694
16660: LD_INT 27
16662: DOUBLE
16663: EQUAL
16664: IFTRUE 16668
16666: GO 16693
16668: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16669: LD_ADDR_VAR 0 3
16673: PUSH
16674: LD_INT 35
16676: PPUSH
16677: LD_VAR 0 1
16681: PPUSH
16682: CALL_OW 321
16686: PUSH
16687: LD_INT 2
16689: EQUAL
16690: ST_TO_ADDR
16691: GO 16694
16693: POP
// end ;
16694: LD_VAR 0 3
16698: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16699: LD_INT 0
16701: PPUSH
16702: PPUSH
16703: PPUSH
16704: PPUSH
16705: PPUSH
16706: PPUSH
16707: PPUSH
16708: PPUSH
16709: PPUSH
16710: PPUSH
16711: PPUSH
// result := false ;
16712: LD_ADDR_VAR 0 6
16716: PUSH
16717: LD_INT 0
16719: ST_TO_ADDR
// if btype = b_depot then
16720: LD_VAR 0 2
16724: PUSH
16725: LD_INT 0
16727: EQUAL
16728: IFFALSE 16740
// begin result := true ;
16730: LD_ADDR_VAR 0 6
16734: PUSH
16735: LD_INT 1
16737: ST_TO_ADDR
// exit ;
16738: GO 17594
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16740: LD_VAR 0 1
16744: NOT
16745: IFTRUE 16770
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 266
16757: PUSH
16758: LD_INT 0
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: IN
16768: NOT
16769: OR
16770: IFTRUE 16779
16772: PUSH
16773: LD_VAR 0 2
16777: NOT
16778: OR
16779: IFTRUE 16815
16781: PUSH
16782: LD_VAR 0 5
16786: PUSH
16787: LD_INT 0
16789: PUSH
16790: LD_INT 1
16792: PUSH
16793: LD_INT 2
16795: PUSH
16796: LD_INT 3
16798: PUSH
16799: LD_INT 4
16801: PUSH
16802: LD_INT 5
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: IN
16813: NOT
16814: OR
16815: IFTRUE 16834
16817: PUSH
16818: LD_VAR 0 3
16822: PPUSH
16823: LD_VAR 0 4
16827: PPUSH
16828: CALL_OW 488
16832: NOT
16833: OR
16834: IFFALSE 16838
// exit ;
16836: GO 17594
// side := GetSide ( depot ) ;
16838: LD_ADDR_VAR 0 9
16842: PUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: CALL_OW 255
16852: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16853: LD_VAR 0 9
16857: PPUSH
16858: LD_VAR 0 2
16862: PPUSH
16863: CALL 16323 0 2
16867: NOT
16868: IFFALSE 16872
// exit ;
16870: GO 17594
// pom := GetBase ( depot ) ;
16872: LD_ADDR_VAR 0 10
16876: PUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: CALL_OW 274
16886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16887: LD_ADDR_VAR 0 11
16891: PUSH
16892: LD_VAR 0 2
16896: PPUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 248
16906: PPUSH
16907: CALL_OW 450
16911: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16912: LD_VAR 0 10
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 275
16924: PUSH
16925: LD_VAR 0 11
16929: PUSH
16930: LD_INT 1
16932: ARRAY
16933: GREATEREQUAL
16934: IFFALSE 16960
16936: PUSH
16937: LD_VAR 0 10
16941: PPUSH
16942: LD_INT 2
16944: PPUSH
16945: CALL_OW 275
16949: PUSH
16950: LD_VAR 0 11
16954: PUSH
16955: LD_INT 2
16957: ARRAY
16958: GREATEREQUAL
16959: AND
16960: IFFALSE 16986
16962: PUSH
16963: LD_VAR 0 10
16967: PPUSH
16968: LD_INT 3
16970: PPUSH
16971: CALL_OW 275
16975: PUSH
16976: LD_VAR 0 11
16980: PUSH
16981: LD_INT 3
16983: ARRAY
16984: GREATEREQUAL
16985: AND
16986: NOT
16987: IFFALSE 16991
// exit ;
16989: GO 17594
// if GetBType ( depot ) = b_depot then
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 266
17000: PUSH
17001: LD_INT 0
17003: EQUAL
17004: IFFALSE 17016
// dist := 28 else
17006: LD_ADDR_VAR 0 14
17010: PUSH
17011: LD_INT 28
17013: ST_TO_ADDR
17014: GO 17024
// dist := 36 ;
17016: LD_ADDR_VAR 0 14
17020: PUSH
17021: LD_INT 36
17023: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17024: LD_VAR 0 1
17028: PPUSH
17029: LD_VAR 0 3
17033: PPUSH
17034: LD_VAR 0 4
17038: PPUSH
17039: CALL_OW 297
17043: PUSH
17044: LD_VAR 0 14
17048: GREATER
17049: IFFALSE 17053
// exit ;
17051: GO 17594
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17053: LD_ADDR_VAR 0 12
17057: PUSH
17058: LD_VAR 0 2
17062: PPUSH
17063: LD_VAR 0 3
17067: PPUSH
17068: LD_VAR 0 4
17072: PPUSH
17073: LD_VAR 0 5
17077: PPUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 248
17087: PPUSH
17088: LD_INT 0
17090: PPUSH
17091: CALL 17599 0 6
17095: ST_TO_ADDR
// if not hexes then
17096: LD_VAR 0 12
17100: NOT
17101: IFFALSE 17105
// exit ;
17103: GO 17594
// hex := GetHexInfo ( x , y ) ;
17105: LD_ADDR_VAR 0 15
17109: PUSH
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_VAR 0 4
17119: PPUSH
17120: CALL_OW 546
17124: ST_TO_ADDR
// if hex [ 1 ] then
17125: LD_VAR 0 15
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: IFFALSE 17137
// exit ;
17135: GO 17594
// height := hex [ 2 ] ;
17137: LD_ADDR_VAR 0 13
17141: PUSH
17142: LD_VAR 0 15
17146: PUSH
17147: LD_INT 2
17149: ARRAY
17150: ST_TO_ADDR
// for i = 1 to hexes do
17151: LD_ADDR_VAR 0 7
17155: PUSH
17156: DOUBLE
17157: LD_INT 1
17159: DEC
17160: ST_TO_ADDR
17161: LD_VAR 0 12
17165: PUSH
17166: FOR_TO
17167: IFFALSE 17511
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17169: LD_VAR 0 12
17173: PUSH
17174: LD_VAR 0 7
17178: ARRAY
17179: PUSH
17180: LD_INT 1
17182: ARRAY
17183: PPUSH
17184: LD_VAR 0 12
17188: PUSH
17189: LD_VAR 0 7
17193: ARRAY
17194: PUSH
17195: LD_INT 2
17197: ARRAY
17198: PPUSH
17199: CALL_OW 488
17203: NOT
17204: IFTRUE 17246
17206: PUSH
17207: LD_VAR 0 12
17211: PUSH
17212: LD_VAR 0 7
17216: ARRAY
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: PPUSH
17222: LD_VAR 0 12
17226: PUSH
17227: LD_VAR 0 7
17231: ARRAY
17232: PUSH
17233: LD_INT 2
17235: ARRAY
17236: PPUSH
17237: CALL_OW 428
17241: PUSH
17242: LD_INT 0
17244: GREATER
17245: OR
17246: IFTRUE 17284
17248: PUSH
17249: LD_VAR 0 12
17253: PUSH
17254: LD_VAR 0 7
17258: ARRAY
17259: PUSH
17260: LD_INT 1
17262: ARRAY
17263: PPUSH
17264: LD_VAR 0 12
17268: PUSH
17269: LD_VAR 0 7
17273: ARRAY
17274: PUSH
17275: LD_INT 2
17277: ARRAY
17278: PPUSH
17279: CALL_OW 351
17283: OR
17284: IFFALSE 17290
// exit ;
17286: POP
17287: POP
17288: GO 17594
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17290: LD_ADDR_VAR 0 8
17294: PUSH
17295: LD_VAR 0 12
17299: PUSH
17300: LD_VAR 0 7
17304: ARRAY
17305: PUSH
17306: LD_INT 1
17308: ARRAY
17309: PPUSH
17310: LD_VAR 0 12
17314: PUSH
17315: LD_VAR 0 7
17319: ARRAY
17320: PUSH
17321: LD_INT 2
17323: ARRAY
17324: PPUSH
17325: CALL_OW 546
17329: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17330: LD_VAR 0 8
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: IFTRUE 17360
17340: PUSH
17341: LD_VAR 0 8
17345: PUSH
17346: LD_INT 2
17348: ARRAY
17349: PUSH
17350: LD_VAR 0 13
17354: PUSH
17355: LD_INT 2
17357: PLUS
17358: GREATER
17359: OR
17360: IFTRUE 17382
17362: PUSH
17363: LD_VAR 0 8
17367: PUSH
17368: LD_INT 2
17370: ARRAY
17371: PUSH
17372: LD_VAR 0 13
17376: PUSH
17377: LD_INT 2
17379: MINUS
17380: LESS
17381: OR
17382: IFTRUE 17450
17384: PUSH
17385: LD_VAR 0 8
17389: PUSH
17390: LD_INT 3
17392: ARRAY
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: LD_INT 8
17399: PUSH
17400: LD_INT 9
17402: PUSH
17403: LD_INT 10
17405: PUSH
17406: LD_INT 11
17408: PUSH
17409: LD_INT 12
17411: PUSH
17412: LD_INT 13
17414: PUSH
17415: LD_INT 16
17417: PUSH
17418: LD_INT 17
17420: PUSH
17421: LD_INT 18
17423: PUSH
17424: LD_INT 19
17426: PUSH
17427: LD_INT 20
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: IN
17448: NOT
17449: OR
17450: IFTRUE 17463
17452: PUSH
17453: LD_VAR 0 8
17457: PUSH
17458: LD_INT 5
17460: ARRAY
17461: NOT
17462: OR
17463: IFTRUE 17503
17465: PUSH
17466: LD_VAR 0 8
17470: PUSH
17471: LD_INT 6
17473: ARRAY
17474: PUSH
17475: LD_INT 1
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: LD_INT 7
17483: PUSH
17484: LD_INT 9
17486: PUSH
17487: LD_INT 10
17489: PUSH
17490: LD_INT 11
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: IN
17501: NOT
17502: OR
17503: IFFALSE 17509
// exit ;
17505: POP
17506: POP
17507: GO 17594
// end ;
17509: GO 17166
17511: POP
17512: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17513: LD_VAR 0 9
17517: PPUSH
17518: LD_VAR 0 3
17522: PPUSH
17523: LD_VAR 0 4
17527: PPUSH
17528: LD_INT 20
17530: PPUSH
17531: CALL 9413 0 4
17535: PUSH
17536: LD_INT 4
17538: ARRAY
17539: IFFALSE 17543
// exit ;
17541: GO 17594
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17543: LD_VAR 0 2
17547: PUSH
17548: LD_INT 29
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: IN
17558: IFFALSE 17582
17560: PUSH
17561: LD_VAR 0 3
17565: PPUSH
17566: LD_VAR 0 4
17570: PPUSH
17571: LD_VAR 0 9
17575: PPUSH
17576: CALL_OW 440
17580: NOT
17581: AND
17582: IFFALSE 17586
// exit ;
17584: GO 17594
// result := true ;
17586: LD_ADDR_VAR 0 6
17590: PUSH
17591: LD_INT 1
17593: ST_TO_ADDR
// end ;
17594: LD_VAR 0 6
17598: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
// result = [ ] ;
17659: LD_ADDR_VAR 0 7
17663: PUSH
17664: EMPTY
17665: ST_TO_ADDR
// temp_list = [ ] ;
17666: LD_ADDR_VAR 0 9
17670: PUSH
17671: EMPTY
17672: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17673: LD_VAR 0 4
17677: PUSH
17678: LD_INT 0
17680: PUSH
17681: LD_INT 1
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 3
17689: PUSH
17690: LD_INT 4
17692: PUSH
17693: LD_INT 5
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: IN
17704: NOT
17705: IFTRUE 17748
17707: PUSH
17708: LD_VAR 0 1
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: IN
17723: IFFALSE 17747
17725: PUSH
17726: LD_VAR 0 5
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: IN
17745: NOT
17746: AND
17747: OR
17748: IFFALSE 17752
// exit ;
17750: GO 36151
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17752: LD_VAR 0 1
17756: PUSH
17757: LD_INT 6
17759: PUSH
17760: LD_INT 7
17762: PUSH
17763: LD_INT 8
17765: PUSH
17766: LD_INT 13
17768: PUSH
17769: LD_INT 12
17771: PUSH
17772: LD_INT 15
17774: PUSH
17775: LD_INT 11
17777: PUSH
17778: LD_INT 14
17780: PUSH
17781: LD_INT 10
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: IN
17795: IFFALSE 17805
// btype = b_lab ;
17797: LD_ADDR_VAR 0 1
17801: PUSH
17802: LD_INT 6
17804: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17805: LD_VAR 0 6
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: LD_INT 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: IN
17824: NOT
17825: IFTRUE 17893
17827: PUSH
17828: LD_VAR 0 1
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 3
17844: PUSH
17845: LD_INT 6
17847: PUSH
17848: LD_INT 36
17850: PUSH
17851: LD_INT 4
17853: PUSH
17854: LD_INT 5
17856: PUSH
17857: LD_INT 31
17859: PUSH
17860: LD_INT 32
17862: PUSH
17863: LD_INT 33
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: IN
17879: NOT
17880: IFFALSE 17892
17882: PUSH
17883: LD_VAR 0 6
17887: PUSH
17888: LD_INT 1
17890: EQUAL
17891: AND
17892: OR
17893: IFTRUE 17925
17895: PUSH
17896: LD_VAR 0 1
17900: PUSH
17901: LD_INT 2
17903: PUSH
17904: LD_INT 3
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: IN
17911: NOT
17912: IFFALSE 17924
17914: PUSH
17915: LD_VAR 0 6
17919: PUSH
17920: LD_INT 2
17922: EQUAL
17923: AND
17924: OR
17925: IFFALSE 17935
// mode = 0 ;
17927: LD_ADDR_VAR 0 6
17931: PUSH
17932: LD_INT 0
17934: ST_TO_ADDR
// case mode of 0 :
17935: LD_VAR 0 6
17939: PUSH
17940: LD_INT 0
17942: DOUBLE
17943: EQUAL
17944: IFTRUE 17948
17946: GO 29401
17948: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17949: LD_ADDR_VAR 0 11
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: LD_INT 1
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: LD_INT 0
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 1
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: LD_INT 1
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 1
18007: NEG
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 1
18018: NEG
18019: PUSH
18020: LD_INT 1
18022: NEG
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: LD_INT 2
18034: NEG
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 2
18045: NEG
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 1
18056: NEG
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: NEG
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: LD_INT 3
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 2
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18142: LD_ADDR_VAR 0 12
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: LD_INT 1
18162: NEG
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: LD_INT 0
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 1
18211: NEG
18212: PUSH
18213: LD_INT 1
18215: NEG
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: PUSH
18224: LD_INT 1
18226: NEG
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 2
18265: NEG
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: LD_INT 1
18280: NEG
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 2
18288: NEG
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 3
18299: NEG
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 3
18310: NEG
18311: PUSH
18312: LD_INT 1
18314: NEG
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18338: LD_ADDR_VAR 0 13
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: LD_INT 1
18358: NEG
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: LD_INT 1
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 1
18407: NEG
18408: PUSH
18409: LD_INT 1
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: LD_INT 2
18423: NEG
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 2
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: LD_INT 2
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 2
18461: NEG
18462: PUSH
18463: LD_INT 1
18465: NEG
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 2
18473: NEG
18474: PUSH
18475: LD_INT 2
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 2
18485: NEG
18486: PUSH
18487: LD_INT 3
18489: NEG
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 3
18497: NEG
18498: PUSH
18499: LD_INT 2
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 3
18509: NEG
18510: PUSH
18511: LD_INT 3
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18537: LD_ADDR_VAR 0 14
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: LD_INT 1
18557: NEG
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: LD_INT 0
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 0
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 1
18595: NEG
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 1
18606: NEG
18607: PUSH
18608: LD_INT 1
18610: NEG
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: LD_INT 2
18622: NEG
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: LD_INT 2
18633: NEG
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: NEG
18684: PUSH
18685: LD_INT 3
18687: NEG
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: LD_INT 3
18698: NEG
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18733: LD_ADDR_VAR 0 15
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: LD_INT 1
18753: NEG
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 1
18791: NEG
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: LD_INT 1
18806: NEG
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 1
18845: NEG
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 2
18856: NEG
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: NEG
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 3
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 3
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18926: LD_ADDR_VAR 0 16
18930: PUSH
18931: LD_INT 0
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: NEG
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 2
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 2
19049: NEG
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: NEG
19062: PUSH
19063: LD_INT 2
19065: NEG
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 3
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: LD_INT 3
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19119: LD_ADDR_VAR 0 17
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: NEG
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 2
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 2
19254: PUSH
19255: LD_INT 2
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 2
19318: NEG
19319: PUSH
19320: LD_INT 2
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19349: LD_ADDR_VAR 0 18
19353: PUSH
19354: LD_INT 0
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 0
19366: PUSH
19367: LD_INT 1
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: NEG
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: LD_INT 2
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: LD_INT 2
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: LD_INT 1
19456: NEG
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 2
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: LD_INT 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: LD_INT 0
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 2
19536: NEG
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 2
19548: NEG
19549: PUSH
19550: LD_INT 2
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19579: LD_ADDR_VAR 0 19
19583: PUSH
19584: LD_INT 0
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: LD_INT 1
19599: NEG
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 1
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: LD_INT 0
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: LD_INT 2
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: LD_INT 0
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: LD_INT 2
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: NEG
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 2
19766: NEG
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 2
19778: NEG
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19809: LD_ADDR_VAR 0 20
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: LD_INT 2
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: LD_INT 2
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 2
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: NEG
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 2
19996: NEG
19997: PUSH
19998: LD_INT 1
20000: NEG
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: LD_INT 2
20012: NEG
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20039: LD_ADDR_VAR 0 21
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: LD_INT 1
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: NEG
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 2
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 2
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: LD_INT 1
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 2
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 2
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 0
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 2
20226: NEG
20227: PUSH
20228: LD_INT 1
20230: NEG
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: LD_INT 2
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20269: LD_ADDR_VAR 0 22
20273: PUSH
20274: LD_INT 0
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: LD_INT 1
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: LD_INT 2
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 2
20456: NEG
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: LD_INT 2
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20499: LD_ADDR_VAR 0 23
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: NEG
20569: PUSH
20570: LD_INT 1
20572: NEG
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 2
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: LD_INT 2
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: LD_INT 1
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 2
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 1
20664: NEG
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 2
20686: NEG
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: LD_INT 2
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: LD_INT 3
20714: NEG
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: LD_INT 3
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20779: LD_ADDR_VAR 0 24
20783: PUSH
20784: LD_INT 0
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 1
20860: NEG
20861: PUSH
20862: LD_INT 2
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: LD_INT 2
20875: NEG
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_INT 1
20886: NEG
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 2
20914: PUSH
20915: LD_INT 2
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 1
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 2
20966: NEG
20967: PUSH
20968: LD_INT 1
20970: NEG
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 2
20978: NEG
20979: PUSH
20980: LD_INT 2
20982: NEG
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: LD_INT 2
20993: NEG
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 3
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 3
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21055: LD_ADDR_VAR 0 25
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: LD_INT 2
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: LD_INT 2
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: LD_INT 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 2
21242: NEG
21243: PUSH
21244: LD_INT 1
21246: NEG
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: NEG
21255: PUSH
21256: LD_INT 2
21258: NEG
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 3
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 3
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: LD_INT 3
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21329: LD_ADDR_VAR 0 26
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 1
21387: NEG
21388: PUSH
21389: LD_INT 0
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 1
21398: NEG
21399: PUSH
21400: LD_INT 1
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 2
21414: NEG
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: LD_INT 2
21425: NEG
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 2
21505: NEG
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: LD_INT 2
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 2
21540: PUSH
21541: LD_INT 3
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: LD_INT 3
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: LD_INT 2
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 2
21571: NEG
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21605: LD_ADDR_VAR 0 27
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 1
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 1
21663: NEG
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: NEG
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: LD_INT 2
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 2
21701: NEG
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: LD_INT 1
21712: NEG
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: LD_INT 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: NEG
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: LD_INT 2
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 1
21816: NEG
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 2
21827: NEG
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 3
21838: NEG
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 3
21850: NEG
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21885: LD_ADDR_VAR 0 28
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: LD_INT 0
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 0
21902: PUSH
21903: LD_INT 1
21905: NEG
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: NEG
21955: PUSH
21956: LD_INT 1
21958: NEG
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 2
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: LD_INT 2
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 2
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 2
22061: NEG
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: LD_INT 1
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 2
22084: NEG
22085: PUSH
22086: LD_INT 2
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 2
22096: NEG
22097: PUSH
22098: LD_INT 3
22100: NEG
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: LD_INT 3
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 3
22120: NEG
22121: PUSH
22122: LD_INT 1
22124: NEG
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 3
22132: NEG
22133: PUSH
22134: LD_INT 2
22136: NEG
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22167: LD_ADDR_VAR 0 29
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 0
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 1
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 1
22225: NEG
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: NEG
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 1
22248: NEG
22249: PUSH
22250: LD_INT 2
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: LD_INT 2
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 2
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: NEG
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: LD_INT 3
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 1
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: LD_INT 1
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: PUSH
22391: LD_INT 3
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 1
22400: NEG
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 3
22411: NEG
22412: PUSH
22413: LD_INT 2
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22446: LD_ADDR_VAR 0 30
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: NEG
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: LD_INT 2
22531: NEG
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: LD_INT 2
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 2
22612: NEG
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: NEG
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: LD_INT 3
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: LD_INT 2
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 2
22678: NEG
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 3
22689: NEG
22690: PUSH
22691: LD_INT 1
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22724: LD_ADDR_VAR 0 31
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 2
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 2
22901: NEG
22902: PUSH
22903: LD_INT 2
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 3
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 3
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 3
22967: NEG
22968: PUSH
22969: LD_INT 2
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23002: LD_ADDR_VAR 0 32
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 0
23019: PUSH
23020: LD_INT 1
23022: NEG
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: LD_INT 0
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: LD_INT 1
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: LD_INT 2
23087: NEG
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: LD_INT 2
23098: NEG
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 0
23147: PUSH
23148: LD_INT 2
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: NEG
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: LD_INT 3
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 3
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: LD_INT 3
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 2
23234: NEG
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 3
23245: NEG
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23280: LD_ADDR_VAR 0 33
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: NEG
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: NEG
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: NEG
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 2
23458: NEG
23459: PUSH
23460: LD_INT 2
23462: NEG
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: LD_INT 3
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 3
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 3
23524: NEG
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23559: LD_ADDR_VAR 0 34
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: NEG
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: LD_INT 2
23644: NEG
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: LD_INT 2
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 2
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 1
23704: NEG
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: NEG
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 2
23726: NEG
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: NEG
23739: PUSH
23740: LD_INT 2
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: LD_INT 3
23754: NEG
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: LD_INT 2
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: PUSH
23784: LD_INT 3
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 3
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23839: LD_ADDR_VAR 0 35
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: LD_INT 0
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: LD_INT 1
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: NEG
23931: PUSH
23932: LD_INT 1
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23951: LD_ADDR_VAR 0 36
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: LD_INT 1
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 1
24020: NEG
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: LD_INT 2
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24063: LD_ADDR_VAR 0 37
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24175: LD_ADDR_VAR 0 38
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24287: LD_ADDR_VAR 0 39
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: LD_INT 2
24372: NEG
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: LD_INT 2
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24399: LD_ADDR_VAR 0 40
24403: PUSH
24404: LD_INT 0
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24511: LD_ADDR_VAR 0 41
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 2
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: LD_INT 3
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 3
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 3
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 3
24744: PUSH
24745: LD_INT 2
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 3
24754: PUSH
24755: LD_INT 3
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 2
24764: PUSH
24765: LD_INT 3
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 3
24785: NEG
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 3
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 3
24820: NEG
24821: PUSH
24822: LD_INT 3
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24861: LD_ADDR_VAR 0 42
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: LD_INT 2
24957: NEG
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 2
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 2
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 2
25039: NEG
25040: PUSH
25041: LD_INT 2
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 2
25051: NEG
25052: PUSH
25053: LD_INT 3
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: LD_INT 3
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 3
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 3
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 3
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 3
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: LD_INT 3
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: LD_INT 3
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 3
25158: NEG
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 3
25170: NEG
25171: PUSH
25172: LD_INT 3
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25211: LD_ADDR_VAR 0 43
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 2
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 2
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 3
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 3
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: LD_INT 3
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: LD_INT 3
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: LD_INT 2
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: NEG
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 3
25507: NEG
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 3
25518: NEG
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25559: LD_ADDR_VAR 0 44
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: NEG
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 2
25725: NEG
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: LD_INT 2
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: LD_INT 3
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 3
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 3
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: LD_INT 3
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 3
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 3
25833: NEG
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 3
25844: NEG
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 3
25868: NEG
25869: PUSH
25870: LD_INT 3
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25909: LD_ADDR_VAR 0 45
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: LD_INT 2
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 2
26087: NEG
26088: PUSH
26089: LD_INT 2
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: LD_INT 3
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: LD_INT 3
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 3
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 3
26155: PUSH
26156: LD_INT 3
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 2
26165: PUSH
26166: LD_INT 3
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 3
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 3
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: LD_INT 2
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 3
26206: NEG
26207: PUSH
26208: LD_INT 2
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 3
26218: NEG
26219: PUSH
26220: LD_INT 3
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26259: LD_ADDR_VAR 0 46
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 2
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: NEG
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 2
26436: NEG
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 3
26452: NEG
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 3
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 3
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 3
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 3
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 3
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 3
26555: NEG
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 3
26566: NEG
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26607: LD_ADDR_VAR 0 47
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: NEG
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: LD_INT 2
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 2
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26758: LD_ADDR_VAR 0 48
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: NEG
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: LD_INT 2
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 2
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26905: LD_ADDR_VAR 0 49
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27049: LD_ADDR_VAR 0 50
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27193: LD_ADDR_VAR 0 51
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 2
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: NEG
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27340: LD_ADDR_VAR 0 52
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: LD_INT 2
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 2
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27491: LD_ADDR_VAR 0 53
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 2
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 2
27678: NEG
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 2
27690: NEG
27691: PUSH
27692: LD_INT 2
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27721: LD_ADDR_VAR 0 54
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: LD_INT 2
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: NEG
27909: PUSH
27910: LD_INT 1
27912: NEG
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: LD_INT 2
27924: NEG
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27951: LD_ADDR_VAR 0 55
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 2
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: LD_INT 1
28058: NEG
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 2
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 2
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 2
28138: NEG
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: LD_INT 2
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28181: LD_ADDR_VAR 0 56
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: LD_INT 2
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 2
28368: NEG
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: LD_INT 2
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28411: LD_ADDR_VAR 0 57
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: LD_INT 2
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: LD_INT 1
28518: NEG
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 2
28598: NEG
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: NEG
28611: PUSH
28612: LD_INT 2
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28641: LD_ADDR_VAR 0 58
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 2
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 2
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: LD_INT 2
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28871: LD_ADDR_VAR 0 59
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 0
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: LD_INT 0
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28959: LD_ADDR_VAR 0 60
28963: PUSH
28964: LD_INT 0
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 0
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29047: LD_ADDR_VAR 0 61
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: LD_INT 0
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29135: LD_ADDR_VAR 0 62
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 1
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29223: LD_ADDR_VAR 0 63
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: NEG
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29311: LD_ADDR_VAR 0 64
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: ST_TO_ADDR
// end ; 1 :
29399: GO 35296
29401: LD_INT 1
29403: DOUBLE
29404: EQUAL
29405: IFTRUE 29409
29407: GO 32032
29409: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29410: LD_ADDR_VAR 0 11
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: LD_INT 3
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 3
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 2
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29454: LD_ADDR_VAR 0 12
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29495: LD_ADDR_VAR 0 13
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: LD_INT 3
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29535: LD_ADDR_VAR 0 14
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 3
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29576: LD_ADDR_VAR 0 15
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 3
29594: NEG
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: NEG
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29620: LD_ADDR_VAR 0 16
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: LD_INT 3
29631: NEG
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: LD_INT 3
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29666: LD_ADDR_VAR 0 17
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 3
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: LD_INT 3
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 2
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29710: LD_ADDR_VAR 0 18
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29751: LD_ADDR_VAR 0 19
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: LD_INT 2
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: LD_INT 3
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29791: LD_ADDR_VAR 0 20
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: LD_INT 3
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29832: LD_ADDR_VAR 0 21
29836: PUSH
29837: LD_INT 2
29839: NEG
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 3
29850: NEG
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 3
29861: NEG
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: LIST
29875: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29876: LD_ADDR_VAR 0 22
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: LD_INT 3
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: LD_INT 2
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 3
29907: NEG
29908: PUSH
29909: LD_INT 3
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29922: LD_ADDR_VAR 0 23
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: LD_INT 4
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 3
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29966: LD_ADDR_VAR 0 24
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 4
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30007: LD_ADDR_VAR 0 25
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: LD_INT 3
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: LD_INT 4
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30047: LD_ADDR_VAR 0 26
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: LD_INT 4
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30088: LD_ADDR_VAR 0 27
30092: PUSH
30093: LD_INT 3
30095: NEG
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 3
30106: NEG
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 4
30117: NEG
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30132: LD_ADDR_VAR 0 28
30136: PUSH
30137: LD_INT 3
30139: NEG
30140: PUSH
30141: LD_INT 3
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 3
30151: NEG
30152: PUSH
30153: LD_INT 4
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: LD_INT 3
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30178: LD_ADDR_VAR 0 29
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: LD_INT 3
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 2
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: LD_INT 4
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: LD_INT 4
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: LD_INT 3
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: LD_INT 5
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: LD_INT 5
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: LD_INT 4
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 6
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: LD_INT 6
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: LD_INT 5
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30333: LD_ADDR_VAR 0 30
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 3
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 4
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 4
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 5
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 5
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 5
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 6
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 6
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30476: LD_ADDR_VAR 0 31
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 2
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 3
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: LD_INT 3
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 4
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 4
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: LD_INT 4
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 5
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 5
30553: PUSH
30554: LD_INT 5
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 4
30563: PUSH
30564: LD_INT 5
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 6
30573: PUSH
30574: LD_INT 5
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 6
30583: PUSH
30584: LD_INT 6
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 5
30593: PUSH
30594: LD_INT 6
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30615: LD_ADDR_VAR 0 32
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: LD_INT 4
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 4
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: LD_INT 5
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 5
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 4
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 6
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: LD_INT 6
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 5
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30758: LD_ADDR_VAR 0 33
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: NEG
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 4
30810: NEG
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 4
30821: NEG
30822: PUSH
30823: LD_INT 1
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 4
30833: NEG
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 5
30844: NEG
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 5
30855: NEG
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 5
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 6
30878: NEG
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 6
30889: NEG
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30913: LD_ADDR_VAR 0 34
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: LD_INT 3
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: LD_INT 4
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 4
30980: NEG
30981: PUSH
30982: LD_INT 4
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: LD_INT 5
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 5
31004: NEG
31005: PUSH
31006: LD_INT 4
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 5
31016: NEG
31017: PUSH
31018: LD_INT 5
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: LD_INT 6
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 6
31040: NEG
31041: PUSH
31042: LD_INT 5
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 6
31052: NEG
31053: PUSH
31054: LD_INT 6
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31076: LD_ADDR_VAR 0 41
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 2
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 3
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31120: LD_ADDR_VAR 0 42
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31161: LD_ADDR_VAR 0 43
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 3
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31201: LD_ADDR_VAR 0 44
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31242: LD_ADDR_VAR 0 45
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 3
31271: NEG
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31286: LD_ADDR_VAR 0 46
31290: PUSH
31291: LD_INT 2
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 2
31305: NEG
31306: PUSH
31307: LD_INT 3
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: LD_INT 2
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31332: LD_ADDR_VAR 0 47
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: LD_INT 3
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31365: LD_ADDR_VAR 0 48
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31396: LD_ADDR_VAR 0 49
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 3
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31425: LD_ADDR_VAR 0 50
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 3
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31454: LD_ADDR_VAR 0 51
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31485: LD_ADDR_VAR 0 52
31489: PUSH
31490: LD_INT 3
31492: NEG
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 3
31504: NEG
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31518: LD_ADDR_VAR 0 53
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31562: LD_ADDR_VAR 0 54
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 3
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31603: LD_ADDR_VAR 0 55
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 3
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: LD_INT 3
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31643: LD_ADDR_VAR 0 56
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 3
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31684: LD_ADDR_VAR 0 57
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 3
31702: NEG
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31728: LD_ADDR_VAR 0 58
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: LD_INT 3
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 3
31747: NEG
31748: PUSH
31749: LD_INT 2
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: NEG
31760: PUSH
31761: LD_INT 3
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31774: LD_ADDR_VAR 0 59
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31818: LD_ADDR_VAR 0 60
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31859: LD_ADDR_VAR 0 61
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: LD_INT 1
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31899: LD_ADDR_VAR 0 62
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31940: LD_ADDR_VAR 0 63
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31984: LD_ADDR_VAR 0 64
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: ST_TO_ADDR
// end ; 2 :
32030: GO 35296
32032: LD_INT 2
32034: DOUBLE
32035: EQUAL
32036: IFTRUE 32040
32038: GO 35295
32040: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32041: LD_ADDR_VAR 0 29
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 4
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 5
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 5
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 3
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 4
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 4
32171: PUSH
32172: LD_INT 4
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: LD_INT 4
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: LD_INT 3
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 4
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: LD_INT 4
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 5
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: LD_INT 5
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: LD_INT 4
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 2
32313: NEG
32314: PUSH
32315: LD_INT 3
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 3
32324: NEG
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 3
32335: NEG
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 3
32369: NEG
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 4
32380: NEG
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 4
32391: NEG
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 4
32403: NEG
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 2
32415: NEG
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 4
32426: NEG
32427: PUSH
32428: LD_INT 4
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 4
32438: NEG
32439: PUSH
32440: LD_INT 5
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 4
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 3
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 4
32474: NEG
32475: PUSH
32476: LD_INT 3
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 5
32486: NEG
32487: PUSH
32488: LD_INT 4
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 5
32498: NEG
32499: PUSH
32500: LD_INT 5
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: LD_INT 5
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 5
32522: NEG
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32579: LD_ADDR_VAR 0 30
32583: PUSH
32584: LD_INT 4
32586: PUSH
32587: LD_INT 4
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 4
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 5
32606: PUSH
32607: LD_INT 4
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 5
32616: PUSH
32617: LD_INT 5
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: LD_INT 4
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: LD_INT 3
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 5
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: LD_INT 5
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: LD_INT 3
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: LD_INT 4
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: LD_INT 4
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: LD_INT 3
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: LD_INT 4
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 4
32769: NEG
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 4
32780: NEG
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 3
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 4
32814: NEG
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 5
32825: NEG
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 5
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 5
32848: NEG
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: NEG
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: LD_INT 4
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 3
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: NEG
32920: PUSH
32921: LD_INT 2
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 4
32931: NEG
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 4
32943: NEG
32944: PUSH
32945: LD_INT 4
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: LD_INT 4
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 4
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 4
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 5
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: LD_INT 4
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: LD_INT 3
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 3
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: LD_INT 4
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: LD_INT 5
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: LD_INT 3
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: LD_INT 5
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33126: LD_ADDR_VAR 0 31
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 4
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 4
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: LD_INT 5
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 5
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: NEG
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 3
33226: NEG
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 3
33237: NEG
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 3
33271: NEG
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 4
33282: NEG
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: NEG
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 4
33305: NEG
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 4
33328: NEG
33329: PUSH
33330: LD_INT 4
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: LD_INT 5
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: NEG
33353: PUSH
33354: LD_INT 4
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: NEG
33365: PUSH
33366: LD_INT 3
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 4
33376: NEG
33377: PUSH
33378: LD_INT 3
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 5
33388: NEG
33389: PUSH
33390: LD_INT 4
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 5
33400: NEG
33401: PUSH
33402: LD_INT 5
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: LD_INT 5
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 5
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: LD_INT 3
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 4
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 3
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: LD_INT 3
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: LD_INT 4
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: LD_INT 4
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 4
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 4
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 5
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 5
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 4
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 3
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 3
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 3
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 5
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33676: LD_ADDR_VAR 0 32
33680: PUSH
33681: LD_INT 4
33683: NEG
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 4
33694: NEG
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 3
33706: NEG
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 3
33717: NEG
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 4
33728: NEG
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 5
33739: NEG
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 5
33750: NEG
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 5
33762: NEG
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 3
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: LD_INT 4
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: LD_INT 3
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: LD_INT 2
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 2
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 4
33845: NEG
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: LD_INT 4
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: LD_INT 4
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 4
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 5
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 4
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 3
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: LD_INT 3
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: NEG
33949: PUSH
33950: LD_INT 4
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: LD_INT 5
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: LD_INT 3
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 5
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 3
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 3
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 4
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 4
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 3
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 4
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 4
34088: PUSH
34089: LD_INT 4
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 4
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 5
34108: PUSH
34109: LD_INT 4
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 5
34118: PUSH
34119: LD_INT 5
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 4
34128: PUSH
34129: LD_INT 5
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 3
34138: PUSH
34139: LD_INT 4
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 3
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 5
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: LD_INT 5
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34223: LD_ADDR_VAR 0 33
34227: PUSH
34228: LD_INT 4
34230: NEG
34231: PUSH
34232: LD_INT 4
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 4
34242: NEG
34243: PUSH
34244: LD_INT 5
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: NEG
34255: PUSH
34256: LD_INT 4
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 3
34266: NEG
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 4
34278: NEG
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 5
34290: NEG
34291: PUSH
34292: LD_INT 4
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 5
34302: NEG
34303: PUSH
34304: LD_INT 5
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 3
34314: NEG
34315: PUSH
34316: LD_INT 5
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 5
34326: NEG
34327: PUSH
34328: LD_INT 3
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 3
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 4
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 3
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 3
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: LD_INT 4
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 4
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 4
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 4
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 5
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 5
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 2
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 5
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: LD_INT 3
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 4
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 3
34573: PUSH
34574: LD_INT 4
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: LD_INT 4
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 5
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 4
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 5
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34761: LD_ADDR_VAR 0 34
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 4
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 5
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 4
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: LD_INT 3
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 3
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: LD_INT 4
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: LD_INT 5
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: LD_INT 3
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 5
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 4
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 4
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 2
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 4
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 5
34983: PUSH
34984: LD_INT 4
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 5
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 4
35003: PUSH
35004: LD_INT 5
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 3
35013: PUSH
35014: LD_INT 4
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 3
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 5
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: LD_INT 5
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 3
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 4
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 4
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 4
35146: NEG
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 4
35157: NEG
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 3
35169: NEG
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 3
35180: NEG
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 4
35191: NEG
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 5
35202: NEG
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 5
35213: NEG
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 5
35225: NEG
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 3
35237: NEG
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: ST_TO_ADDR
// end ; end ;
35293: GO 35296
35295: POP
// case btype of b_depot , b_warehouse :
35296: LD_VAR 0 1
35300: PUSH
35301: LD_INT 0
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35315
35307: LD_INT 1
35309: DOUBLE
35310: EQUAL
35311: IFTRUE 35315
35313: GO 35516
35315: POP
// case nation of nation_american :
35316: LD_VAR 0 5
35320: PUSH
35321: LD_INT 1
35323: DOUBLE
35324: EQUAL
35325: IFTRUE 35329
35327: GO 35385
35329: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35330: LD_ADDR_VAR 0 9
35334: PUSH
35335: LD_VAR 0 11
35339: PUSH
35340: LD_VAR 0 12
35344: PUSH
35345: LD_VAR 0 13
35349: PUSH
35350: LD_VAR 0 14
35354: PUSH
35355: LD_VAR 0 15
35359: PUSH
35360: LD_VAR 0 16
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: PUSH
35373: LD_VAR 0 4
35377: PUSH
35378: LD_INT 1
35380: PLUS
35381: ARRAY
35382: ST_TO_ADDR
35383: GO 35514
35385: LD_INT 2
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35393
35391: GO 35449
35393: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35394: LD_ADDR_VAR 0 9
35398: PUSH
35399: LD_VAR 0 17
35403: PUSH
35404: LD_VAR 0 18
35408: PUSH
35409: LD_VAR 0 19
35413: PUSH
35414: LD_VAR 0 20
35418: PUSH
35419: LD_VAR 0 21
35423: PUSH
35424: LD_VAR 0 22
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: PUSH
35437: LD_VAR 0 4
35441: PUSH
35442: LD_INT 1
35444: PLUS
35445: ARRAY
35446: ST_TO_ADDR
35447: GO 35514
35449: LD_INT 3
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35513
35457: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: LD_VAR 0 23
35467: PUSH
35468: LD_VAR 0 24
35472: PUSH
35473: LD_VAR 0 25
35477: PUSH
35478: LD_VAR 0 26
35482: PUSH
35483: LD_VAR 0 27
35487: PUSH
35488: LD_VAR 0 28
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: PUSH
35501: LD_VAR 0 4
35505: PUSH
35506: LD_INT 1
35508: PLUS
35509: ARRAY
35510: ST_TO_ADDR
35511: GO 35514
35513: POP
35514: GO 36069
35516: LD_INT 2
35518: DOUBLE
35519: EQUAL
35520: IFTRUE 35530
35522: LD_INT 3
35524: DOUBLE
35525: EQUAL
35526: IFTRUE 35530
35528: GO 35586
35530: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35531: LD_ADDR_VAR 0 9
35535: PUSH
35536: LD_VAR 0 29
35540: PUSH
35541: LD_VAR 0 30
35545: PUSH
35546: LD_VAR 0 31
35550: PUSH
35551: LD_VAR 0 32
35555: PUSH
35556: LD_VAR 0 33
35560: PUSH
35561: LD_VAR 0 34
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: PUSH
35574: LD_VAR 0 4
35578: PUSH
35579: LD_INT 1
35581: PLUS
35582: ARRAY
35583: ST_TO_ADDR
35584: GO 36069
35586: LD_INT 16
35588: DOUBLE
35589: EQUAL
35590: IFTRUE 35648
35592: LD_INT 17
35594: DOUBLE
35595: EQUAL
35596: IFTRUE 35648
35598: LD_INT 18
35600: DOUBLE
35601: EQUAL
35602: IFTRUE 35648
35604: LD_INT 19
35606: DOUBLE
35607: EQUAL
35608: IFTRUE 35648
35610: LD_INT 22
35612: DOUBLE
35613: EQUAL
35614: IFTRUE 35648
35616: LD_INT 20
35618: DOUBLE
35619: EQUAL
35620: IFTRUE 35648
35622: LD_INT 21
35624: DOUBLE
35625: EQUAL
35626: IFTRUE 35648
35628: LD_INT 23
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35648
35634: LD_INT 24
35636: DOUBLE
35637: EQUAL
35638: IFTRUE 35648
35640: LD_INT 25
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35648
35646: GO 35704
35648: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35649: LD_ADDR_VAR 0 9
35653: PUSH
35654: LD_VAR 0 35
35658: PUSH
35659: LD_VAR 0 36
35663: PUSH
35664: LD_VAR 0 37
35668: PUSH
35669: LD_VAR 0 38
35673: PUSH
35674: LD_VAR 0 39
35678: PUSH
35679: LD_VAR 0 40
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: PUSH
35692: LD_VAR 0 4
35696: PUSH
35697: LD_INT 1
35699: PLUS
35700: ARRAY
35701: ST_TO_ADDR
35702: GO 36069
35704: LD_INT 6
35706: DOUBLE
35707: EQUAL
35708: IFTRUE 35760
35710: LD_INT 7
35712: DOUBLE
35713: EQUAL
35714: IFTRUE 35760
35716: LD_INT 8
35718: DOUBLE
35719: EQUAL
35720: IFTRUE 35760
35722: LD_INT 13
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35760
35728: LD_INT 12
35730: DOUBLE
35731: EQUAL
35732: IFTRUE 35760
35734: LD_INT 15
35736: DOUBLE
35737: EQUAL
35738: IFTRUE 35760
35740: LD_INT 11
35742: DOUBLE
35743: EQUAL
35744: IFTRUE 35760
35746: LD_INT 14
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35760
35752: LD_INT 10
35754: DOUBLE
35755: EQUAL
35756: IFTRUE 35760
35758: GO 35816
35760: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35761: LD_ADDR_VAR 0 9
35765: PUSH
35766: LD_VAR 0 41
35770: PUSH
35771: LD_VAR 0 42
35775: PUSH
35776: LD_VAR 0 43
35780: PUSH
35781: LD_VAR 0 44
35785: PUSH
35786: LD_VAR 0 45
35790: PUSH
35791: LD_VAR 0 46
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: PUSH
35804: LD_VAR 0 4
35808: PUSH
35809: LD_INT 1
35811: PLUS
35812: ARRAY
35813: ST_TO_ADDR
35814: GO 36069
35816: LD_INT 36
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35824
35822: GO 35880
35824: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_VAR 0 47
35834: PUSH
35835: LD_VAR 0 48
35839: PUSH
35840: LD_VAR 0 49
35844: PUSH
35845: LD_VAR 0 50
35849: PUSH
35850: LD_VAR 0 51
35854: PUSH
35855: LD_VAR 0 52
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: PUSH
35868: LD_VAR 0 4
35872: PUSH
35873: LD_INT 1
35875: PLUS
35876: ARRAY
35877: ST_TO_ADDR
35878: GO 36069
35880: LD_INT 4
35882: DOUBLE
35883: EQUAL
35884: IFTRUE 35906
35886: LD_INT 5
35888: DOUBLE
35889: EQUAL
35890: IFTRUE 35906
35892: LD_INT 34
35894: DOUBLE
35895: EQUAL
35896: IFTRUE 35906
35898: LD_INT 37
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 35962
35906: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35907: LD_ADDR_VAR 0 9
35911: PUSH
35912: LD_VAR 0 53
35916: PUSH
35917: LD_VAR 0 54
35921: PUSH
35922: LD_VAR 0 55
35926: PUSH
35927: LD_VAR 0 56
35931: PUSH
35932: LD_VAR 0 57
35936: PUSH
35937: LD_VAR 0 58
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: PUSH
35950: LD_VAR 0 4
35954: PUSH
35955: LD_INT 1
35957: PLUS
35958: ARRAY
35959: ST_TO_ADDR
35960: GO 36069
35962: LD_INT 31
35964: DOUBLE
35965: EQUAL
35966: IFTRUE 36012
35968: LD_INT 32
35970: DOUBLE
35971: EQUAL
35972: IFTRUE 36012
35974: LD_INT 33
35976: DOUBLE
35977: EQUAL
35978: IFTRUE 36012
35980: LD_INT 27
35982: DOUBLE
35983: EQUAL
35984: IFTRUE 36012
35986: LD_INT 26
35988: DOUBLE
35989: EQUAL
35990: IFTRUE 36012
35992: LD_INT 28
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36012
35998: LD_INT 29
36000: DOUBLE
36001: EQUAL
36002: IFTRUE 36012
36004: LD_INT 30
36006: DOUBLE
36007: EQUAL
36008: IFTRUE 36012
36010: GO 36068
36012: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36013: LD_ADDR_VAR 0 9
36017: PUSH
36018: LD_VAR 0 59
36022: PUSH
36023: LD_VAR 0 60
36027: PUSH
36028: LD_VAR 0 61
36032: PUSH
36033: LD_VAR 0 62
36037: PUSH
36038: LD_VAR 0 63
36042: PUSH
36043: LD_VAR 0 64
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: PUSH
36056: LD_VAR 0 4
36060: PUSH
36061: LD_INT 1
36063: PLUS
36064: ARRAY
36065: ST_TO_ADDR
36066: GO 36069
36068: POP
// temp_list2 = [ ] ;
36069: LD_ADDR_VAR 0 10
36073: PUSH
36074: EMPTY
36075: ST_TO_ADDR
// for i in temp_list do
36076: LD_ADDR_VAR 0 8
36080: PUSH
36081: LD_VAR 0 9
36085: PUSH
36086: FOR_IN
36087: IFFALSE 36139
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36089: LD_ADDR_VAR 0 10
36093: PUSH
36094: LD_VAR 0 10
36098: PUSH
36099: LD_VAR 0 8
36103: PUSH
36104: LD_INT 1
36106: ARRAY
36107: PUSH
36108: LD_VAR 0 2
36112: PLUS
36113: PUSH
36114: LD_VAR 0 8
36118: PUSH
36119: LD_INT 2
36121: ARRAY
36122: PUSH
36123: LD_VAR 0 3
36127: PLUS
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: ADD
36136: ST_TO_ADDR
36137: GO 36086
36139: POP
36140: POP
// result = temp_list2 ;
36141: LD_ADDR_VAR 0 7
36145: PUSH
36146: LD_VAR 0 10
36150: ST_TO_ADDR
// end ;
36151: LD_VAR 0 7
36155: RET
// export function EnemyInRange ( unit , dist ) ; begin
36156: LD_INT 0
36158: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36159: LD_ADDR_VAR 0 3
36163: PUSH
36164: LD_VAR 0 1
36168: PPUSH
36169: CALL_OW 255
36173: PPUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 250
36183: PPUSH
36184: LD_VAR 0 1
36188: PPUSH
36189: CALL_OW 251
36193: PPUSH
36194: LD_VAR 0 2
36198: PPUSH
36199: CALL 9413 0 4
36203: PUSH
36204: LD_INT 4
36206: ARRAY
36207: ST_TO_ADDR
// end ;
36208: LD_VAR 0 3
36212: RET
// export function PlayerSeeMe ( unit ) ; begin
36213: LD_INT 0
36215: PPUSH
// result := See ( your_side , unit ) ;
36216: LD_ADDR_VAR 0 2
36220: PUSH
36221: LD_OWVAR 2
36225: PPUSH
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 292
36235: ST_TO_ADDR
// end ;
36236: LD_VAR 0 2
36240: RET
// export function ReverseDir ( unit ) ; begin
36241: LD_INT 0
36243: PPUSH
// if not unit then
36244: LD_VAR 0 1
36248: NOT
36249: IFFALSE 36253
// exit ;
36251: GO 36276
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36253: LD_ADDR_VAR 0 2
36257: PUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 254
36267: PUSH
36268: LD_INT 3
36270: PLUS
36271: PUSH
36272: LD_INT 6
36274: MOD
36275: ST_TO_ADDR
// end ;
36276: LD_VAR 0 2
36280: RET
// export function ReverseArray ( array ) ; var i ; begin
36281: LD_INT 0
36283: PPUSH
36284: PPUSH
// if not array then
36285: LD_VAR 0 1
36289: NOT
36290: IFFALSE 36294
// exit ;
36292: GO 36349
// result := [ ] ;
36294: LD_ADDR_VAR 0 2
36298: PUSH
36299: EMPTY
36300: ST_TO_ADDR
// for i := array downto 1 do
36301: LD_ADDR_VAR 0 3
36305: PUSH
36306: DOUBLE
36307: LD_VAR 0 1
36311: INC
36312: ST_TO_ADDR
36313: LD_INT 1
36315: PUSH
36316: FOR_DOWNTO
36317: IFFALSE 36347
// result := Join ( result , array [ i ] ) ;
36319: LD_ADDR_VAR 0 2
36323: PUSH
36324: LD_VAR 0 2
36328: PPUSH
36329: LD_VAR 0 1
36333: PUSH
36334: LD_VAR 0 3
36338: ARRAY
36339: PPUSH
36340: CALL 41191 0 2
36344: ST_TO_ADDR
36345: GO 36316
36347: POP
36348: POP
// end ;
36349: LD_VAR 0 2
36353: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36354: LD_INT 0
36356: PPUSH
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
// if not unit or not hexes then
36362: LD_VAR 0 1
36366: NOT
36367: IFTRUE 36376
36369: PUSH
36370: LD_VAR 0 2
36374: NOT
36375: OR
36376: IFFALSE 36380
// exit ;
36378: GO 36503
// dist := 9999 ;
36380: LD_ADDR_VAR 0 5
36384: PUSH
36385: LD_INT 9999
36387: ST_TO_ADDR
// for i = 1 to hexes do
36388: LD_ADDR_VAR 0 4
36392: PUSH
36393: DOUBLE
36394: LD_INT 1
36396: DEC
36397: ST_TO_ADDR
36398: LD_VAR 0 2
36402: PUSH
36403: FOR_TO
36404: IFFALSE 36491
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36406: LD_ADDR_VAR 0 6
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 4
36425: ARRAY
36426: PUSH
36427: LD_INT 1
36429: ARRAY
36430: PPUSH
36431: LD_VAR 0 2
36435: PUSH
36436: LD_VAR 0 4
36440: ARRAY
36441: PUSH
36442: LD_INT 2
36444: ARRAY
36445: PPUSH
36446: CALL_OW 297
36450: ST_TO_ADDR
// if tdist < dist then
36451: LD_VAR 0 6
36455: PUSH
36456: LD_VAR 0 5
36460: LESS
36461: IFFALSE 36489
// begin hex := hexes [ i ] ;
36463: LD_ADDR_VAR 0 8
36467: PUSH
36468: LD_VAR 0 2
36472: PUSH
36473: LD_VAR 0 4
36477: ARRAY
36478: ST_TO_ADDR
// dist := tdist ;
36479: LD_ADDR_VAR 0 5
36483: PUSH
36484: LD_VAR 0 6
36488: ST_TO_ADDR
// end ; end ;
36489: GO 36403
36491: POP
36492: POP
// result := hex ;
36493: LD_ADDR_VAR 0 3
36497: PUSH
36498: LD_VAR 0 8
36502: ST_TO_ADDR
// end ;
36503: LD_VAR 0 3
36507: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36508: LD_INT 0
36510: PPUSH
36511: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36512: LD_VAR 0 1
36516: NOT
36517: IFTRUE 36556
36519: PUSH
36520: LD_VAR 0 1
36524: PUSH
36525: LD_INT 21
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 23
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PPUSH
36549: CALL_OW 69
36553: IN
36554: NOT
36555: OR
36556: IFFALSE 36560
// exit ;
36558: GO 36607
// for i = 1 to 3 do
36560: LD_ADDR_VAR 0 3
36564: PUSH
36565: DOUBLE
36566: LD_INT 1
36568: DEC
36569: ST_TO_ADDR
36570: LD_INT 3
36572: PUSH
36573: FOR_TO
36574: IFFALSE 36605
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36576: LD_VAR 0 1
36580: PPUSH
36581: CALL_OW 250
36585: PPUSH
36586: LD_VAR 0 1
36590: PPUSH
36591: CALL_OW 251
36595: PPUSH
36596: LD_INT 1
36598: PPUSH
36599: CALL_OW 453
36603: GO 36573
36605: POP
36606: POP
// end ;
36607: LD_VAR 0 2
36611: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36612: LD_INT 0
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
// if not unit or not enemy_unit then
36620: LD_VAR 0 1
36624: NOT
36625: IFTRUE 36634
36627: PUSH
36628: LD_VAR 0 2
36632: NOT
36633: OR
36634: IFFALSE 36638
// exit ;
36636: GO 37109
// if GetLives ( i ) < 250 then
36638: LD_VAR 0 4
36642: PPUSH
36643: CALL_OW 256
36647: PUSH
36648: LD_INT 250
36650: LESS
36651: IFFALSE 36664
// begin ComAutodestruct ( i ) ;
36653: LD_VAR 0 4
36657: PPUSH
36658: CALL 36508 0 1
// exit ;
36662: GO 37109
// end ; x := GetX ( enemy_unit ) ;
36664: LD_ADDR_VAR 0 7
36668: PUSH
36669: LD_VAR 0 2
36673: PPUSH
36674: CALL_OW 250
36678: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36679: LD_ADDR_VAR 0 8
36683: PUSH
36684: LD_VAR 0 2
36688: PPUSH
36689: CALL_OW 251
36693: ST_TO_ADDR
// if not x or not y then
36694: LD_VAR 0 7
36698: NOT
36699: IFTRUE 36708
36701: PUSH
36702: LD_VAR 0 8
36706: NOT
36707: OR
36708: IFFALSE 36712
// exit ;
36710: GO 37109
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36712: LD_ADDR_VAR 0 6
36716: PUSH
36717: LD_VAR 0 7
36721: PPUSH
36722: LD_INT 0
36724: PPUSH
36725: LD_INT 4
36727: PPUSH
36728: CALL_OW 272
36732: PUSH
36733: LD_VAR 0 8
36737: PPUSH
36738: LD_INT 0
36740: PPUSH
36741: LD_INT 4
36743: PPUSH
36744: CALL_OW 273
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_VAR 0 7
36757: PPUSH
36758: LD_INT 1
36760: PPUSH
36761: LD_INT 4
36763: PPUSH
36764: CALL_OW 272
36768: PUSH
36769: LD_VAR 0 8
36773: PPUSH
36774: LD_INT 1
36776: PPUSH
36777: LD_INT 4
36779: PPUSH
36780: CALL_OW 273
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_VAR 0 7
36793: PPUSH
36794: LD_INT 2
36796: PPUSH
36797: LD_INT 4
36799: PPUSH
36800: CALL_OW 272
36804: PUSH
36805: LD_VAR 0 8
36809: PPUSH
36810: LD_INT 2
36812: PPUSH
36813: LD_INT 4
36815: PPUSH
36816: CALL_OW 273
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_VAR 0 7
36829: PPUSH
36830: LD_INT 3
36832: PPUSH
36833: LD_INT 4
36835: PPUSH
36836: CALL_OW 272
36840: PUSH
36841: LD_VAR 0 8
36845: PPUSH
36846: LD_INT 3
36848: PPUSH
36849: LD_INT 4
36851: PPUSH
36852: CALL_OW 273
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_VAR 0 7
36865: PPUSH
36866: LD_INT 4
36868: PPUSH
36869: LD_INT 4
36871: PPUSH
36872: CALL_OW 272
36876: PUSH
36877: LD_VAR 0 8
36881: PPUSH
36882: LD_INT 4
36884: PPUSH
36885: LD_INT 4
36887: PPUSH
36888: CALL_OW 273
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_VAR 0 7
36901: PPUSH
36902: LD_INT 5
36904: PPUSH
36905: LD_INT 4
36907: PPUSH
36908: CALL_OW 272
36912: PUSH
36913: LD_VAR 0 8
36917: PPUSH
36918: LD_INT 5
36920: PPUSH
36921: LD_INT 4
36923: PPUSH
36924: CALL_OW 273
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: ST_TO_ADDR
// for i = tmp downto 1 do
36941: LD_ADDR_VAR 0 4
36945: PUSH
36946: DOUBLE
36947: LD_VAR 0 6
36951: INC
36952: ST_TO_ADDR
36953: LD_INT 1
36955: PUSH
36956: FOR_DOWNTO
36957: IFFALSE 37060
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36959: LD_VAR 0 6
36963: PUSH
36964: LD_VAR 0 4
36968: ARRAY
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: PPUSH
36974: LD_VAR 0 6
36978: PUSH
36979: LD_VAR 0 4
36983: ARRAY
36984: PUSH
36985: LD_INT 2
36987: ARRAY
36988: PPUSH
36989: CALL_OW 488
36993: NOT
36994: IFTRUE 37036
36996: PUSH
36997: LD_VAR 0 6
37001: PUSH
37002: LD_VAR 0 4
37006: ARRAY
37007: PUSH
37008: LD_INT 1
37010: ARRAY
37011: PPUSH
37012: LD_VAR 0 6
37016: PUSH
37017: LD_VAR 0 4
37021: ARRAY
37022: PUSH
37023: LD_INT 2
37025: ARRAY
37026: PPUSH
37027: CALL_OW 428
37031: PUSH
37032: LD_INT 0
37034: NONEQUAL
37035: OR
37036: IFFALSE 37058
// tmp := Delete ( tmp , i ) ;
37038: LD_ADDR_VAR 0 6
37042: PUSH
37043: LD_VAR 0 6
37047: PPUSH
37048: LD_VAR 0 4
37052: PPUSH
37053: CALL_OW 3
37057: ST_TO_ADDR
37058: GO 36956
37060: POP
37061: POP
// j := GetClosestHex ( unit , tmp ) ;
37062: LD_ADDR_VAR 0 5
37066: PUSH
37067: LD_VAR 0 1
37071: PPUSH
37072: LD_VAR 0 6
37076: PPUSH
37077: CALL 36354 0 2
37081: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37082: LD_VAR 0 1
37086: PPUSH
37087: LD_VAR 0 5
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PPUSH
37096: LD_VAR 0 5
37100: PUSH
37101: LD_INT 2
37103: ARRAY
37104: PPUSH
37105: CALL_OW 111
// end ;
37109: LD_VAR 0 3
37113: RET
// export function PrepareApemanSoldier ( ) ; begin
37114: LD_INT 0
37116: PPUSH
// uc_nation := 0 ;
37117: LD_ADDR_OWVAR 21
37121: PUSH
37122: LD_INT 0
37124: ST_TO_ADDR
// hc_sex := sex_male ;
37125: LD_ADDR_OWVAR 27
37129: PUSH
37130: LD_INT 1
37132: ST_TO_ADDR
// hc_name :=  ;
37133: LD_ADDR_OWVAR 26
37137: PUSH
37138: LD_STRING 
37140: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37141: LD_ADDR_OWVAR 28
37145: PUSH
37146: LD_INT 15
37148: ST_TO_ADDR
// hc_gallery :=  ;
37149: LD_ADDR_OWVAR 33
37153: PUSH
37154: LD_STRING 
37156: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37157: LD_ADDR_OWVAR 31
37161: PUSH
37162: LD_INT 0
37164: PPUSH
37165: LD_INT 3
37167: PPUSH
37168: CALL_OW 12
37172: PUSH
37173: LD_INT 0
37175: PPUSH
37176: LD_INT 3
37178: PPUSH
37179: CALL_OW 12
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37196: LD_ADDR_OWVAR 29
37200: PUSH
37201: LD_INT 12
37203: PUSH
37204: LD_INT 12
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: ST_TO_ADDR
// end ;
37211: LD_VAR 0 1
37215: RET
// export function PrepareApemanEngineer ( ) ; begin
37216: LD_INT 0
37218: PPUSH
// uc_nation := 0 ;
37219: LD_ADDR_OWVAR 21
37223: PUSH
37224: LD_INT 0
37226: ST_TO_ADDR
// hc_sex := sex_male ;
37227: LD_ADDR_OWVAR 27
37231: PUSH
37232: LD_INT 1
37234: ST_TO_ADDR
// hc_name :=  ;
37235: LD_ADDR_OWVAR 26
37239: PUSH
37240: LD_STRING 
37242: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37243: LD_ADDR_OWVAR 28
37247: PUSH
37248: LD_INT 16
37250: ST_TO_ADDR
// hc_gallery :=  ;
37251: LD_ADDR_OWVAR 33
37255: PUSH
37256: LD_STRING 
37258: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37259: LD_ADDR_OWVAR 31
37263: PUSH
37264: LD_INT 0
37266: PPUSH
37267: LD_INT 3
37269: PPUSH
37270: CALL_OW 12
37274: PUSH
37275: LD_INT 0
37277: PPUSH
37278: LD_INT 3
37280: PPUSH
37281: CALL_OW 12
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37298: LD_ADDR_OWVAR 29
37302: PUSH
37303: LD_INT 12
37305: PUSH
37306: LD_INT 12
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// end ;
37313: LD_VAR 0 1
37317: RET
// export function PrepareApeman ( agressivity ) ; begin
37318: LD_INT 0
37320: PPUSH
// uc_side := 0 ;
37321: LD_ADDR_OWVAR 20
37325: PUSH
37326: LD_INT 0
37328: ST_TO_ADDR
// uc_nation := 0 ;
37329: LD_ADDR_OWVAR 21
37333: PUSH
37334: LD_INT 0
37336: ST_TO_ADDR
// hc_sex := sex_male ;
37337: LD_ADDR_OWVAR 27
37341: PUSH
37342: LD_INT 1
37344: ST_TO_ADDR
// hc_class := class_apeman ;
37345: LD_ADDR_OWVAR 28
37349: PUSH
37350: LD_INT 12
37352: ST_TO_ADDR
// hc_gallery :=  ;
37353: LD_ADDR_OWVAR 33
37357: PUSH
37358: LD_STRING 
37360: ST_TO_ADDR
// hc_name :=  ;
37361: LD_ADDR_OWVAR 26
37365: PUSH
37366: LD_STRING 
37368: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37369: LD_ADDR_OWVAR 29
37373: PUSH
37374: LD_INT 12
37376: PUSH
37377: LD_INT 12
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: ST_TO_ADDR
// if agressivity = 0 then
37384: LD_VAR 0 1
37388: PUSH
37389: LD_INT 0
37391: EQUAL
37392: IFFALSE 37404
// hc_agressivity := 0 else
37394: LD_ADDR_OWVAR 35
37398: PUSH
37399: LD_INT 0
37401: ST_TO_ADDR
37402: GO 37425
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37404: LD_ADDR_OWVAR 35
37408: PUSH
37409: LD_VAR 0 1
37413: NEG
37414: PPUSH
37415: LD_VAR 0 1
37419: PPUSH
37420: CALL_OW 12
37424: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37425: LD_ADDR_OWVAR 31
37429: PUSH
37430: LD_INT 0
37432: PPUSH
37433: LD_INT 3
37435: PPUSH
37436: CALL_OW 12
37440: PUSH
37441: LD_INT 0
37443: PPUSH
37444: LD_INT 3
37446: PPUSH
37447: CALL_OW 12
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: ST_TO_ADDR
// end ;
37464: LD_VAR 0 2
37468: RET
// export function PrepareTiger ( agressivity ) ; begin
37469: LD_INT 0
37471: PPUSH
// uc_side := 0 ;
37472: LD_ADDR_OWVAR 20
37476: PUSH
37477: LD_INT 0
37479: ST_TO_ADDR
// uc_nation := 0 ;
37480: LD_ADDR_OWVAR 21
37484: PUSH
37485: LD_INT 0
37487: ST_TO_ADDR
// InitHc ;
37488: CALL_OW 19
// hc_class := class_tiger ;
37492: LD_ADDR_OWVAR 28
37496: PUSH
37497: LD_INT 14
37499: ST_TO_ADDR
// hc_gallery :=  ;
37500: LD_ADDR_OWVAR 33
37504: PUSH
37505: LD_STRING 
37507: ST_TO_ADDR
// hc_name :=  ;
37508: LD_ADDR_OWVAR 26
37512: PUSH
37513: LD_STRING 
37515: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37516: LD_ADDR_OWVAR 35
37520: PUSH
37521: LD_VAR 0 1
37525: NEG
37526: PPUSH
37527: LD_VAR 0 1
37531: PPUSH
37532: CALL_OW 12
37536: ST_TO_ADDR
// end ;
37537: LD_VAR 0 2
37541: RET
// export function PrepareEnchidna ( ) ; begin
37542: LD_INT 0
37544: PPUSH
// uc_side := 0 ;
37545: LD_ADDR_OWVAR 20
37549: PUSH
37550: LD_INT 0
37552: ST_TO_ADDR
// uc_nation := 0 ;
37553: LD_ADDR_OWVAR 21
37557: PUSH
37558: LD_INT 0
37560: ST_TO_ADDR
// InitHc ;
37561: CALL_OW 19
// hc_class := class_baggie ;
37565: LD_ADDR_OWVAR 28
37569: PUSH
37570: LD_INT 13
37572: ST_TO_ADDR
// hc_gallery :=  ;
37573: LD_ADDR_OWVAR 33
37577: PUSH
37578: LD_STRING 
37580: ST_TO_ADDR
// hc_name :=  ;
37581: LD_ADDR_OWVAR 26
37585: PUSH
37586: LD_STRING 
37588: ST_TO_ADDR
// end ;
37589: LD_VAR 0 1
37593: RET
// export function PrepareFrog ( ) ; begin
37594: LD_INT 0
37596: PPUSH
// uc_side := 0 ;
37597: LD_ADDR_OWVAR 20
37601: PUSH
37602: LD_INT 0
37604: ST_TO_ADDR
// uc_nation := 0 ;
37605: LD_ADDR_OWVAR 21
37609: PUSH
37610: LD_INT 0
37612: ST_TO_ADDR
// InitHc ;
37613: CALL_OW 19
// hc_class := class_frog ;
37617: LD_ADDR_OWVAR 28
37621: PUSH
37622: LD_INT 19
37624: ST_TO_ADDR
// hc_gallery :=  ;
37625: LD_ADDR_OWVAR 33
37629: PUSH
37630: LD_STRING 
37632: ST_TO_ADDR
// hc_name :=  ;
37633: LD_ADDR_OWVAR 26
37637: PUSH
37638: LD_STRING 
37640: ST_TO_ADDR
// end ;
37641: LD_VAR 0 1
37645: RET
// export function PrepareFish ( ) ; begin
37646: LD_INT 0
37648: PPUSH
// uc_side := 0 ;
37649: LD_ADDR_OWVAR 20
37653: PUSH
37654: LD_INT 0
37656: ST_TO_ADDR
// uc_nation := 0 ;
37657: LD_ADDR_OWVAR 21
37661: PUSH
37662: LD_INT 0
37664: ST_TO_ADDR
// InitHc ;
37665: CALL_OW 19
// hc_class := class_fish ;
37669: LD_ADDR_OWVAR 28
37673: PUSH
37674: LD_INT 20
37676: ST_TO_ADDR
// hc_gallery :=  ;
37677: LD_ADDR_OWVAR 33
37681: PUSH
37682: LD_STRING 
37684: ST_TO_ADDR
// hc_name :=  ;
37685: LD_ADDR_OWVAR 26
37689: PUSH
37690: LD_STRING 
37692: ST_TO_ADDR
// end ;
37693: LD_VAR 0 1
37697: RET
// export function PrepareBird ( ) ; begin
37698: LD_INT 0
37700: PPUSH
// uc_side := 0 ;
37701: LD_ADDR_OWVAR 20
37705: PUSH
37706: LD_INT 0
37708: ST_TO_ADDR
// uc_nation := 0 ;
37709: LD_ADDR_OWVAR 21
37713: PUSH
37714: LD_INT 0
37716: ST_TO_ADDR
// InitHc ;
37717: CALL_OW 19
// hc_class := class_phororhacos ;
37721: LD_ADDR_OWVAR 28
37725: PUSH
37726: LD_INT 18
37728: ST_TO_ADDR
// hc_gallery :=  ;
37729: LD_ADDR_OWVAR 33
37733: PUSH
37734: LD_STRING 
37736: ST_TO_ADDR
// hc_name :=  ;
37737: LD_ADDR_OWVAR 26
37741: PUSH
37742: LD_STRING 
37744: ST_TO_ADDR
// end ;
37745: LD_VAR 0 1
37749: RET
// export function PrepareHorse ( ) ; begin
37750: LD_INT 0
37752: PPUSH
// uc_side := 0 ;
37753: LD_ADDR_OWVAR 20
37757: PUSH
37758: LD_INT 0
37760: ST_TO_ADDR
// uc_nation := 0 ;
37761: LD_ADDR_OWVAR 21
37765: PUSH
37766: LD_INT 0
37768: ST_TO_ADDR
// InitHc ;
37769: CALL_OW 19
// hc_class := class_horse ;
37773: LD_ADDR_OWVAR 28
37777: PUSH
37778: LD_INT 21
37780: ST_TO_ADDR
// hc_gallery :=  ;
37781: LD_ADDR_OWVAR 33
37785: PUSH
37786: LD_STRING 
37788: ST_TO_ADDR
// hc_name :=  ;
37789: LD_ADDR_OWVAR 26
37793: PUSH
37794: LD_STRING 
37796: ST_TO_ADDR
// end ;
37797: LD_VAR 0 1
37801: RET
// export function PrepareMastodont ( ) ; begin
37802: LD_INT 0
37804: PPUSH
// uc_side := 0 ;
37805: LD_ADDR_OWVAR 20
37809: PUSH
37810: LD_INT 0
37812: ST_TO_ADDR
// uc_nation := 0 ;
37813: LD_ADDR_OWVAR 21
37817: PUSH
37818: LD_INT 0
37820: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37821: LD_ADDR_OWVAR 37
37825: PUSH
37826: LD_INT 31
37828: ST_TO_ADDR
// vc_control := control_rider ;
37829: LD_ADDR_OWVAR 38
37833: PUSH
37834: LD_INT 4
37836: ST_TO_ADDR
// end ;
37837: LD_VAR 0 1
37841: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37842: LD_INT 0
37844: PPUSH
37845: PPUSH
37846: PPUSH
// uc_side = 0 ;
37847: LD_ADDR_OWVAR 20
37851: PUSH
37852: LD_INT 0
37854: ST_TO_ADDR
// uc_nation = 0 ;
37855: LD_ADDR_OWVAR 21
37859: PUSH
37860: LD_INT 0
37862: ST_TO_ADDR
// InitHc_All ( ) ;
37863: CALL_OW 584
// InitVc ;
37867: CALL_OW 20
// if mastodonts then
37871: LD_VAR 0 6
37875: IFFALSE 37942
// for i = 1 to mastodonts do
37877: LD_ADDR_VAR 0 11
37881: PUSH
37882: DOUBLE
37883: LD_INT 1
37885: DEC
37886: ST_TO_ADDR
37887: LD_VAR 0 6
37891: PUSH
37892: FOR_TO
37893: IFFALSE 37940
// begin vc_chassis := 31 ;
37895: LD_ADDR_OWVAR 37
37899: PUSH
37900: LD_INT 31
37902: ST_TO_ADDR
// vc_control := control_rider ;
37903: LD_ADDR_OWVAR 38
37907: PUSH
37908: LD_INT 4
37910: ST_TO_ADDR
// animal := CreateVehicle ;
37911: LD_ADDR_VAR 0 12
37915: PUSH
37916: CALL_OW 45
37920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37921: LD_VAR 0 12
37925: PPUSH
37926: LD_VAR 0 8
37930: PPUSH
37931: LD_INT 0
37933: PPUSH
37934: CALL 40084 0 3
// end ;
37938: GO 37892
37940: POP
37941: POP
// if horses then
37942: LD_VAR 0 5
37946: IFFALSE 38013
// for i = 1 to horses do
37948: LD_ADDR_VAR 0 11
37952: PUSH
37953: DOUBLE
37954: LD_INT 1
37956: DEC
37957: ST_TO_ADDR
37958: LD_VAR 0 5
37962: PUSH
37963: FOR_TO
37964: IFFALSE 38011
// begin hc_class := 21 ;
37966: LD_ADDR_OWVAR 28
37970: PUSH
37971: LD_INT 21
37973: ST_TO_ADDR
// hc_gallery :=  ;
37974: LD_ADDR_OWVAR 33
37978: PUSH
37979: LD_STRING 
37981: ST_TO_ADDR
// animal := CreateHuman ;
37982: LD_ADDR_VAR 0 12
37986: PUSH
37987: CALL_OW 44
37991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37992: LD_VAR 0 12
37996: PPUSH
37997: LD_VAR 0 8
38001: PPUSH
38002: LD_INT 0
38004: PPUSH
38005: CALL 40084 0 3
// end ;
38009: GO 37963
38011: POP
38012: POP
// if birds then
38013: LD_VAR 0 1
38017: IFFALSE 38084
// for i = 1 to birds do
38019: LD_ADDR_VAR 0 11
38023: PUSH
38024: DOUBLE
38025: LD_INT 1
38027: DEC
38028: ST_TO_ADDR
38029: LD_VAR 0 1
38033: PUSH
38034: FOR_TO
38035: IFFALSE 38082
// begin hc_class := 18 ;
38037: LD_ADDR_OWVAR 28
38041: PUSH
38042: LD_INT 18
38044: ST_TO_ADDR
// hc_gallery =  ;
38045: LD_ADDR_OWVAR 33
38049: PUSH
38050: LD_STRING 
38052: ST_TO_ADDR
// animal := CreateHuman ;
38053: LD_ADDR_VAR 0 12
38057: PUSH
38058: CALL_OW 44
38062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38063: LD_VAR 0 12
38067: PPUSH
38068: LD_VAR 0 8
38072: PPUSH
38073: LD_INT 0
38075: PPUSH
38076: CALL 40084 0 3
// end ;
38080: GO 38034
38082: POP
38083: POP
// if tigers then
38084: LD_VAR 0 2
38088: IFFALSE 38172
// for i = 1 to tigers do
38090: LD_ADDR_VAR 0 11
38094: PUSH
38095: DOUBLE
38096: LD_INT 1
38098: DEC
38099: ST_TO_ADDR
38100: LD_VAR 0 2
38104: PUSH
38105: FOR_TO
38106: IFFALSE 38170
// begin hc_class = class_tiger ;
38108: LD_ADDR_OWVAR 28
38112: PUSH
38113: LD_INT 14
38115: ST_TO_ADDR
// hc_gallery =  ;
38116: LD_ADDR_OWVAR 33
38120: PUSH
38121: LD_STRING 
38123: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38124: LD_ADDR_OWVAR 35
38128: PUSH
38129: LD_INT 7
38131: NEG
38132: PPUSH
38133: LD_INT 7
38135: PPUSH
38136: CALL_OW 12
38140: ST_TO_ADDR
// animal := CreateHuman ;
38141: LD_ADDR_VAR 0 12
38145: PUSH
38146: CALL_OW 44
38150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38151: LD_VAR 0 12
38155: PPUSH
38156: LD_VAR 0 8
38160: PPUSH
38161: LD_INT 0
38163: PPUSH
38164: CALL 40084 0 3
// end ;
38168: GO 38105
38170: POP
38171: POP
// if apemans then
38172: LD_VAR 0 3
38176: IFFALSE 38299
// for i = 1 to apemans do
38178: LD_ADDR_VAR 0 11
38182: PUSH
38183: DOUBLE
38184: LD_INT 1
38186: DEC
38187: ST_TO_ADDR
38188: LD_VAR 0 3
38192: PUSH
38193: FOR_TO
38194: IFFALSE 38297
// begin hc_class = class_apeman ;
38196: LD_ADDR_OWVAR 28
38200: PUSH
38201: LD_INT 12
38203: ST_TO_ADDR
// hc_gallery =  ;
38204: LD_ADDR_OWVAR 33
38208: PUSH
38209: LD_STRING 
38211: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38212: LD_ADDR_OWVAR 35
38216: PUSH
38217: LD_INT 2
38219: NEG
38220: PPUSH
38221: LD_INT 2
38223: PPUSH
38224: CALL_OW 12
38228: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38229: LD_ADDR_OWVAR 31
38233: PUSH
38234: LD_INT 1
38236: PPUSH
38237: LD_INT 3
38239: PPUSH
38240: CALL_OW 12
38244: PUSH
38245: LD_INT 1
38247: PPUSH
38248: LD_INT 3
38250: PPUSH
38251: CALL_OW 12
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
// animal := CreateHuman ;
38268: LD_ADDR_VAR 0 12
38272: PUSH
38273: CALL_OW 44
38277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38278: LD_VAR 0 12
38282: PPUSH
38283: LD_VAR 0 8
38287: PPUSH
38288: LD_INT 0
38290: PPUSH
38291: CALL 40084 0 3
// end ;
38295: GO 38193
38297: POP
38298: POP
// if enchidnas then
38299: LD_VAR 0 4
38303: IFFALSE 38370
// for i = 1 to enchidnas do
38305: LD_ADDR_VAR 0 11
38309: PUSH
38310: DOUBLE
38311: LD_INT 1
38313: DEC
38314: ST_TO_ADDR
38315: LD_VAR 0 4
38319: PUSH
38320: FOR_TO
38321: IFFALSE 38368
// begin hc_class = 13 ;
38323: LD_ADDR_OWVAR 28
38327: PUSH
38328: LD_INT 13
38330: ST_TO_ADDR
// hc_gallery =  ;
38331: LD_ADDR_OWVAR 33
38335: PUSH
38336: LD_STRING 
38338: ST_TO_ADDR
// animal := CreateHuman ;
38339: LD_ADDR_VAR 0 12
38343: PUSH
38344: CALL_OW 44
38348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38349: LD_VAR 0 12
38353: PPUSH
38354: LD_VAR 0 8
38358: PPUSH
38359: LD_INT 0
38361: PPUSH
38362: CALL 40084 0 3
// end ;
38366: GO 38320
38368: POP
38369: POP
// if fishes then
38370: LD_VAR 0 7
38374: IFFALSE 38441
// for i = 1 to fishes do
38376: LD_ADDR_VAR 0 11
38380: PUSH
38381: DOUBLE
38382: LD_INT 1
38384: DEC
38385: ST_TO_ADDR
38386: LD_VAR 0 7
38390: PUSH
38391: FOR_TO
38392: IFFALSE 38439
// begin hc_class = 20 ;
38394: LD_ADDR_OWVAR 28
38398: PUSH
38399: LD_INT 20
38401: ST_TO_ADDR
// hc_gallery =  ;
38402: LD_ADDR_OWVAR 33
38406: PUSH
38407: LD_STRING 
38409: ST_TO_ADDR
// animal := CreateHuman ;
38410: LD_ADDR_VAR 0 12
38414: PUSH
38415: CALL_OW 44
38419: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38420: LD_VAR 0 12
38424: PPUSH
38425: LD_VAR 0 9
38429: PPUSH
38430: LD_INT 0
38432: PPUSH
38433: CALL 40084 0 3
// end ;
38437: GO 38391
38439: POP
38440: POP
// end ;
38441: LD_VAR 0 10
38445: RET
// export function WantHeal ( sci , unit ) ; begin
38446: LD_INT 0
38448: PPUSH
// if GetTaskList ( sci ) > 0 then
38449: LD_VAR 0 1
38453: PPUSH
38454: CALL_OW 437
38458: PUSH
38459: LD_INT 0
38461: GREATER
38462: IFFALSE 38534
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 437
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: PUSH
38478: LD_INT 1
38480: ARRAY
38481: PUSH
38482: LD_STRING l
38484: EQUAL
38485: IFFALSE 38512
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 437
38497: PUSH
38498: LD_INT 1
38500: ARRAY
38501: PUSH
38502: LD_INT 4
38504: ARRAY
38505: PUSH
38506: LD_VAR 0 2
38510: EQUAL
38511: AND
38512: IFFALSE 38524
// result := true else
38514: LD_ADDR_VAR 0 3
38518: PUSH
38519: LD_INT 1
38521: ST_TO_ADDR
38522: GO 38532
// result := false ;
38524: LD_ADDR_VAR 0 3
38528: PUSH
38529: LD_INT 0
38531: ST_TO_ADDR
// end else
38532: GO 38542
// result := false ;
38534: LD_ADDR_VAR 0 3
38538: PUSH
38539: LD_INT 0
38541: ST_TO_ADDR
// end ;
38542: LD_VAR 0 3
38546: RET
// export function HealTarget ( sci ) ; begin
38547: LD_INT 0
38549: PPUSH
// if not sci then
38550: LD_VAR 0 1
38554: NOT
38555: IFFALSE 38559
// exit ;
38557: GO 38624
// result := 0 ;
38559: LD_ADDR_VAR 0 2
38563: PUSH
38564: LD_INT 0
38566: ST_TO_ADDR
// if GetTaskList ( sci ) then
38567: LD_VAR 0 1
38571: PPUSH
38572: CALL_OW 437
38576: IFFALSE 38624
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 437
38587: PUSH
38588: LD_INT 1
38590: ARRAY
38591: PUSH
38592: LD_INT 1
38594: ARRAY
38595: PUSH
38596: LD_STRING l
38598: EQUAL
38599: IFFALSE 38624
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38601: LD_ADDR_VAR 0 2
38605: PUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 437
38615: PUSH
38616: LD_INT 1
38618: ARRAY
38619: PUSH
38620: LD_INT 4
38622: ARRAY
38623: ST_TO_ADDR
// end ;
38624: LD_VAR 0 2
38628: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38629: LD_INT 0
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
// if not base_units then
38635: LD_VAR 0 1
38639: NOT
38640: IFFALSE 38644
// exit ;
38642: GO 38731
// result := false ;
38644: LD_ADDR_VAR 0 2
38648: PUSH
38649: LD_INT 0
38651: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38652: LD_ADDR_VAR 0 5
38656: PUSH
38657: LD_VAR 0 1
38661: PPUSH
38662: LD_INT 21
38664: PUSH
38665: LD_INT 3
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PPUSH
38672: CALL_OW 72
38676: ST_TO_ADDR
// if not tmp then
38677: LD_VAR 0 5
38681: NOT
38682: IFFALSE 38686
// exit ;
38684: GO 38731
// for i in tmp do
38686: LD_ADDR_VAR 0 3
38690: PUSH
38691: LD_VAR 0 5
38695: PUSH
38696: FOR_IN
38697: IFFALSE 38729
// begin result := EnemyInRange ( i , 22 ) ;
38699: LD_ADDR_VAR 0 2
38703: PUSH
38704: LD_VAR 0 3
38708: PPUSH
38709: LD_INT 22
38711: PPUSH
38712: CALL 36156 0 2
38716: ST_TO_ADDR
// if result then
38717: LD_VAR 0 2
38721: IFFALSE 38727
// exit ;
38723: POP
38724: POP
38725: GO 38731
// end ;
38727: GO 38696
38729: POP
38730: POP
// end ;
38731: LD_VAR 0 2
38735: RET
// export function FilterByTag ( units , tag ) ; begin
38736: LD_INT 0
38738: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38739: LD_ADDR_VAR 0 3
38743: PUSH
38744: LD_VAR 0 1
38748: PPUSH
38749: LD_INT 120
38751: PUSH
38752: LD_VAR 0 2
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PPUSH
38761: CALL_OW 72
38765: ST_TO_ADDR
// end ;
38766: LD_VAR 0 3
38770: RET
// export function IsDriver ( un ) ; begin
38771: LD_INT 0
38773: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38774: LD_ADDR_VAR 0 2
38778: PUSH
38779: LD_VAR 0 1
38783: PUSH
38784: LD_INT 55
38786: PUSH
38787: EMPTY
38788: LIST
38789: PPUSH
38790: CALL_OW 69
38794: IN
38795: ST_TO_ADDR
// end ;
38796: LD_VAR 0 2
38800: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38801: LD_INT 0
38803: PPUSH
38804: PPUSH
// list := [ ] ;
38805: LD_ADDR_VAR 0 5
38809: PUSH
38810: EMPTY
38811: ST_TO_ADDR
// case d of 0 :
38812: LD_VAR 0 3
38816: PUSH
38817: LD_INT 0
38819: DOUBLE
38820: EQUAL
38821: IFTRUE 38825
38823: GO 38958
38825: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38826: LD_ADDR_VAR 0 5
38830: PUSH
38831: LD_VAR 0 1
38835: PUSH
38836: LD_INT 4
38838: MINUS
38839: PUSH
38840: LD_VAR 0 2
38844: PUSH
38845: LD_INT 4
38847: MINUS
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: LIST
38856: PUSH
38857: LD_VAR 0 1
38861: PUSH
38862: LD_INT 3
38864: MINUS
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: PUSH
38879: LD_VAR 0 1
38883: PUSH
38884: LD_INT 4
38886: PLUS
38887: PUSH
38888: LD_VAR 0 2
38892: PUSH
38893: LD_INT 4
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: PUSH
38901: LD_VAR 0 1
38905: PUSH
38906: LD_INT 3
38908: PLUS
38909: PUSH
38910: LD_VAR 0 2
38914: PUSH
38915: LD_INT 3
38917: PLUS
38918: PUSH
38919: LD_INT 5
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: LD_VAR 0 1
38931: PUSH
38932: LD_VAR 0 2
38936: PUSH
38937: LD_INT 4
38939: PLUS
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: ST_TO_ADDR
// end ; 1 :
38956: GO 39656
38958: LD_INT 1
38960: DOUBLE
38961: EQUAL
38962: IFTRUE 38966
38964: GO 39099
38966: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38967: LD_ADDR_VAR 0 5
38971: PUSH
38972: LD_VAR 0 1
38976: PUSH
38977: LD_VAR 0 2
38981: PUSH
38982: LD_INT 4
38984: MINUS
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: PUSH
38994: LD_VAR 0 1
38998: PUSH
38999: LD_INT 3
39001: MINUS
39002: PUSH
39003: LD_VAR 0 2
39007: PUSH
39008: LD_INT 3
39010: MINUS
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: PUSH
39020: LD_VAR 0 1
39024: PUSH
39025: LD_INT 4
39027: MINUS
39028: PUSH
39029: LD_VAR 0 2
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: PUSH
39042: LD_VAR 0 1
39046: PUSH
39047: LD_VAR 0 2
39051: PUSH
39052: LD_INT 3
39054: PLUS
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: PUSH
39064: LD_VAR 0 1
39068: PUSH
39069: LD_INT 4
39071: PLUS
39072: PUSH
39073: LD_VAR 0 2
39077: PUSH
39078: LD_INT 4
39080: PLUS
39081: PUSH
39082: LD_INT 5
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: ST_TO_ADDR
// end ; 2 :
39097: GO 39656
39099: LD_INT 2
39101: DOUBLE
39102: EQUAL
39103: IFTRUE 39107
39105: GO 39236
39107: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39108: LD_ADDR_VAR 0 5
39112: PUSH
39113: LD_VAR 0 1
39117: PUSH
39118: LD_VAR 0 2
39122: PUSH
39123: LD_INT 3
39125: MINUS
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: PUSH
39135: LD_VAR 0 1
39139: PUSH
39140: LD_INT 4
39142: PLUS
39143: PUSH
39144: LD_VAR 0 2
39148: PUSH
39149: LD_INT 4
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: PUSH
39157: LD_VAR 0 1
39161: PUSH
39162: LD_VAR 0 2
39166: PUSH
39167: LD_INT 4
39169: PLUS
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: PUSH
39179: LD_VAR 0 1
39183: PUSH
39184: LD_INT 3
39186: MINUS
39187: PUSH
39188: LD_VAR 0 2
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: PUSH
39201: LD_VAR 0 1
39205: PUSH
39206: LD_INT 4
39208: MINUS
39209: PUSH
39210: LD_VAR 0 2
39214: PUSH
39215: LD_INT 4
39217: MINUS
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// end ; 3 :
39234: GO 39656
39236: LD_INT 3
39238: DOUBLE
39239: EQUAL
39240: IFTRUE 39244
39242: GO 39377
39244: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39245: LD_ADDR_VAR 0 5
39249: PUSH
39250: LD_VAR 0 1
39254: PUSH
39255: LD_INT 3
39257: PLUS
39258: PUSH
39259: LD_VAR 0 2
39263: PUSH
39264: LD_INT 4
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: LD_VAR 0 1
39276: PUSH
39277: LD_INT 4
39279: PLUS
39280: PUSH
39281: LD_VAR 0 2
39285: PUSH
39286: LD_INT 4
39288: PLUS
39289: PUSH
39290: LD_INT 5
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: PUSH
39298: LD_VAR 0 1
39302: PUSH
39303: LD_INT 4
39305: MINUS
39306: PUSH
39307: LD_VAR 0 2
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: PUSH
39320: LD_VAR 0 1
39324: PUSH
39325: LD_VAR 0 2
39329: PUSH
39330: LD_INT 4
39332: MINUS
39333: PUSH
39334: LD_INT 3
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_VAR 0 1
39346: PUSH
39347: LD_INT 3
39349: MINUS
39350: PUSH
39351: LD_VAR 0 2
39355: PUSH
39356: LD_INT 3
39358: MINUS
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// end ; 4 :
39375: GO 39656
39377: LD_INT 4
39379: DOUBLE
39380: EQUAL
39381: IFTRUE 39385
39383: GO 39518
39385: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39386: LD_ADDR_VAR 0 5
39390: PUSH
39391: LD_VAR 0 1
39395: PUSH
39396: LD_VAR 0 2
39400: PUSH
39401: LD_INT 4
39403: PLUS
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: PUSH
39413: LD_VAR 0 1
39417: PUSH
39418: LD_INT 3
39420: PLUS
39421: PUSH
39422: LD_VAR 0 2
39426: PUSH
39427: LD_INT 3
39429: PLUS
39430: PUSH
39431: LD_INT 5
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: LIST
39438: PUSH
39439: LD_VAR 0 1
39443: PUSH
39444: LD_INT 4
39446: PLUS
39447: PUSH
39448: LD_VAR 0 2
39452: PUSH
39453: LD_INT 4
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: PUSH
39461: LD_VAR 0 1
39465: PUSH
39466: LD_VAR 0 2
39470: PUSH
39471: LD_INT 3
39473: MINUS
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: PUSH
39483: LD_VAR 0 1
39487: PUSH
39488: LD_INT 4
39490: MINUS
39491: PUSH
39492: LD_VAR 0 2
39496: PUSH
39497: LD_INT 4
39499: MINUS
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: ST_TO_ADDR
// end ; 5 :
39516: GO 39656
39518: LD_INT 5
39520: DOUBLE
39521: EQUAL
39522: IFTRUE 39526
39524: GO 39655
39526: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39527: LD_ADDR_VAR 0 5
39531: PUSH
39532: LD_VAR 0 1
39536: PUSH
39537: LD_INT 4
39539: MINUS
39540: PUSH
39541: LD_VAR 0 2
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: PUSH
39554: LD_VAR 0 1
39558: PUSH
39559: LD_VAR 0 2
39563: PUSH
39564: LD_INT 4
39566: MINUS
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: PUSH
39576: LD_VAR 0 1
39580: PUSH
39581: LD_INT 4
39583: PLUS
39584: PUSH
39585: LD_VAR 0 2
39589: PUSH
39590: LD_INT 4
39592: PLUS
39593: PUSH
39594: LD_INT 5
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: LIST
39601: PUSH
39602: LD_VAR 0 1
39606: PUSH
39607: LD_INT 3
39609: PLUS
39610: PUSH
39611: LD_VAR 0 2
39615: PUSH
39616: LD_INT 4
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: LIST
39623: PUSH
39624: LD_VAR 0 1
39628: PUSH
39629: LD_VAR 0 2
39633: PUSH
39634: LD_INT 3
39636: PLUS
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: ST_TO_ADDR
// end ; end ;
39653: GO 39656
39655: POP
// result := list ;
39656: LD_ADDR_VAR 0 4
39660: PUSH
39661: LD_VAR 0 5
39665: ST_TO_ADDR
// end ;
39666: LD_VAR 0 4
39670: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39671: LD_INT 0
39673: PPUSH
39674: PPUSH
39675: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39676: LD_VAR 0 1
39680: NOT
39681: IFTRUE 39709
39683: PUSH
39684: LD_VAR 0 2
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: LD_INT 4
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: IN
39707: NOT
39708: OR
39709: IFFALSE 39713
// exit ;
39711: GO 39796
// tmp := [ ] ;
39713: LD_ADDR_VAR 0 5
39717: PUSH
39718: EMPTY
39719: ST_TO_ADDR
// for i in units do
39720: LD_ADDR_VAR 0 4
39724: PUSH
39725: LD_VAR 0 1
39729: PUSH
39730: FOR_IN
39731: IFFALSE 39765
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39733: LD_ADDR_VAR 0 5
39737: PUSH
39738: LD_VAR 0 5
39742: PPUSH
39743: LD_VAR 0 4
39747: PPUSH
39748: LD_VAR 0 2
39752: PPUSH
39753: CALL_OW 259
39757: PPUSH
39758: CALL 41191 0 2
39762: ST_TO_ADDR
39763: GO 39730
39765: POP
39766: POP
// if not tmp then
39767: LD_VAR 0 5
39771: NOT
39772: IFFALSE 39776
// exit ;
39774: GO 39796
// result := SortListByListDesc ( units , tmp ) ;
39776: LD_ADDR_VAR 0 3
39780: PUSH
39781: LD_VAR 0 1
39785: PPUSH
39786: LD_VAR 0 5
39790: PPUSH
39791: CALL_OW 77
39795: ST_TO_ADDR
// end ;
39796: LD_VAR 0 3
39800: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39801: LD_INT 0
39803: PPUSH
39804: PPUSH
39805: PPUSH
// result := false ;
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_INT 0
39813: ST_TO_ADDR
// if not building then
39814: LD_VAR 0 2
39818: NOT
39819: IFFALSE 39823
// exit ;
39821: GO 39967
// x := GetX ( building ) ;
39823: LD_ADDR_VAR 0 4
39827: PUSH
39828: LD_VAR 0 2
39832: PPUSH
39833: CALL_OW 250
39837: ST_TO_ADDR
// y := GetY ( building ) ;
39838: LD_ADDR_VAR 0 5
39842: PUSH
39843: LD_VAR 0 2
39847: PPUSH
39848: CALL_OW 251
39852: ST_TO_ADDR
// if not x or not y then
39853: LD_VAR 0 4
39857: NOT
39858: IFTRUE 39867
39860: PUSH
39861: LD_VAR 0 5
39865: NOT
39866: OR
39867: IFFALSE 39871
// exit ;
39869: GO 39967
// if GetTaskList ( unit ) then
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 437
39880: IFFALSE 39967
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39882: LD_STRING e
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 437
39894: PUSH
39895: LD_INT 1
39897: ARRAY
39898: PUSH
39899: LD_INT 1
39901: ARRAY
39902: EQUAL
39903: IFFALSE 39930
39905: PUSH
39906: LD_VAR 0 4
39910: PUSH
39911: LD_VAR 0 1
39915: PPUSH
39916: CALL_OW 437
39920: PUSH
39921: LD_INT 1
39923: ARRAY
39924: PUSH
39925: LD_INT 2
39927: ARRAY
39928: EQUAL
39929: AND
39930: IFFALSE 39957
39932: PUSH
39933: LD_VAR 0 5
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 437
39947: PUSH
39948: LD_INT 1
39950: ARRAY
39951: PUSH
39952: LD_INT 3
39954: ARRAY
39955: EQUAL
39956: AND
39957: IFFALSE 39967
// result := true end ;
39959: LD_ADDR_VAR 0 3
39963: PUSH
39964: LD_INT 1
39966: ST_TO_ADDR
// end ;
39967: LD_VAR 0 3
39971: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39972: LD_INT 0
39974: PPUSH
// result := false ;
39975: LD_ADDR_VAR 0 4
39979: PUSH
39980: LD_INT 0
39982: ST_TO_ADDR
// if GetTaskList ( unit ) then
39983: LD_VAR 0 1
39987: PPUSH
39988: CALL_OW 437
39992: IFFALSE 40079
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39994: LD_STRING M
39996: PUSH
39997: LD_VAR 0 1
40001: PPUSH
40002: CALL_OW 437
40006: PUSH
40007: LD_INT 1
40009: ARRAY
40010: PUSH
40011: LD_INT 1
40013: ARRAY
40014: EQUAL
40015: IFFALSE 40042
40017: PUSH
40018: LD_VAR 0 2
40022: PUSH
40023: LD_VAR 0 1
40027: PPUSH
40028: CALL_OW 437
40032: PUSH
40033: LD_INT 1
40035: ARRAY
40036: PUSH
40037: LD_INT 2
40039: ARRAY
40040: EQUAL
40041: AND
40042: IFFALSE 40069
40044: PUSH
40045: LD_VAR 0 3
40049: PUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 437
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: PUSH
40064: LD_INT 3
40066: ARRAY
40067: EQUAL
40068: AND
40069: IFFALSE 40079
// result := true ;
40071: LD_ADDR_VAR 0 4
40075: PUSH
40076: LD_INT 1
40078: ST_TO_ADDR
// end ; end ;
40079: LD_VAR 0 4
40083: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40084: LD_INT 0
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
// if not unit or not area then
40090: LD_VAR 0 1
40094: NOT
40095: IFTRUE 40104
40097: PUSH
40098: LD_VAR 0 2
40102: NOT
40103: OR
40104: IFFALSE 40108
// exit ;
40106: GO 40284
// tmp := AreaToList ( area , i ) ;
40108: LD_ADDR_VAR 0 6
40112: PUSH
40113: LD_VAR 0 2
40117: PPUSH
40118: LD_VAR 0 5
40122: PPUSH
40123: CALL_OW 517
40127: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40128: LD_ADDR_VAR 0 5
40132: PUSH
40133: DOUBLE
40134: LD_INT 1
40136: DEC
40137: ST_TO_ADDR
40138: LD_VAR 0 6
40142: PUSH
40143: LD_INT 1
40145: ARRAY
40146: PUSH
40147: FOR_TO
40148: IFFALSE 40282
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40150: LD_ADDR_VAR 0 7
40154: PUSH
40155: LD_VAR 0 6
40159: PUSH
40160: LD_INT 1
40162: ARRAY
40163: PUSH
40164: LD_VAR 0 5
40168: ARRAY
40169: PUSH
40170: LD_VAR 0 6
40174: PUSH
40175: LD_INT 2
40177: ARRAY
40178: PUSH
40179: LD_VAR 0 5
40183: ARRAY
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40189: LD_INT 92
40191: PUSH
40192: LD_VAR 0 7
40196: PUSH
40197: LD_INT 1
40199: ARRAY
40200: PUSH
40201: LD_VAR 0 7
40205: PUSH
40206: LD_INT 2
40208: ARRAY
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: PPUSH
40219: CALL_OW 69
40223: PUSH
40224: LD_INT 0
40226: EQUAL
40227: IFFALSE 40280
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40229: LD_VAR 0 1
40233: PPUSH
40234: LD_VAR 0 7
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 7
40247: PUSH
40248: LD_INT 2
40250: ARRAY
40251: PPUSH
40252: LD_VAR 0 3
40256: PPUSH
40257: CALL_OW 48
// result := IsPlaced ( unit ) ;
40261: LD_ADDR_VAR 0 4
40265: PUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: CALL_OW 305
40275: ST_TO_ADDR
// exit ;
40276: POP
40277: POP
40278: GO 40284
// end ; end ;
40280: GO 40147
40282: POP
40283: POP
// end ;
40284: LD_VAR 0 4
40288: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40289: LD_INT 0
40291: PPUSH
40292: PPUSH
40293: PPUSH
// if not side or side > 8 then
40294: LD_VAR 0 1
40298: NOT
40299: IFTRUE 40311
40301: PUSH
40302: LD_VAR 0 1
40306: PUSH
40307: LD_INT 8
40309: GREATER
40310: OR
40311: IFFALSE 40315
// exit ;
40313: GO 40502
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40315: LD_ADDR_VAR 0 4
40319: PUSH
40320: LD_INT 22
40322: PUSH
40323: LD_VAR 0 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 21
40334: PUSH
40335: LD_INT 3
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PPUSH
40346: CALL_OW 69
40350: ST_TO_ADDR
// if not tmp then
40351: LD_VAR 0 4
40355: NOT
40356: IFFALSE 40360
// exit ;
40358: GO 40502
// enable_addtolog := true ;
40360: LD_ADDR_OWVAR 81
40364: PUSH
40365: LD_INT 1
40367: ST_TO_ADDR
// AddToLog ( [ ) ;
40368: LD_STRING [
40370: PPUSH
40371: CALL_OW 561
// for i in tmp do
40375: LD_ADDR_VAR 0 3
40379: PUSH
40380: LD_VAR 0 4
40384: PUSH
40385: FOR_IN
40386: IFFALSE 40493
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40388: LD_STRING [
40390: PUSH
40391: LD_VAR 0 3
40395: PPUSH
40396: CALL_OW 266
40400: STR
40401: PUSH
40402: LD_STRING , 
40404: STR
40405: PUSH
40406: LD_VAR 0 3
40410: PPUSH
40411: CALL_OW 250
40415: STR
40416: PUSH
40417: LD_STRING , 
40419: STR
40420: PUSH
40421: LD_VAR 0 3
40425: PPUSH
40426: CALL_OW 251
40430: STR
40431: PUSH
40432: LD_STRING , 
40434: STR
40435: PUSH
40436: LD_VAR 0 3
40440: PPUSH
40441: CALL_OW 254
40445: STR
40446: PUSH
40447: LD_STRING , 
40449: STR
40450: PUSH
40451: LD_VAR 0 3
40455: PPUSH
40456: LD_INT 1
40458: PPUSH
40459: CALL_OW 268
40463: STR
40464: PUSH
40465: LD_STRING , 
40467: STR
40468: PUSH
40469: LD_VAR 0 3
40473: PPUSH
40474: LD_INT 2
40476: PPUSH
40477: CALL_OW 268
40481: STR
40482: PUSH
40483: LD_STRING ],
40485: STR
40486: PPUSH
40487: CALL_OW 561
// end ;
40491: GO 40385
40493: POP
40494: POP
// AddToLog ( ]; ) ;
40495: LD_STRING ];
40497: PPUSH
40498: CALL_OW 561
// end ;
40502: LD_VAR 0 2
40506: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40507: LD_INT 0
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
// if not area or not rate or not max then
40514: LD_VAR 0 1
40518: NOT
40519: IFTRUE 40528
40521: PUSH
40522: LD_VAR 0 2
40526: NOT
40527: OR
40528: IFTRUE 40537
40530: PUSH
40531: LD_VAR 0 4
40535: NOT
40536: OR
40537: IFFALSE 40541
// exit ;
40539: GO 40730
// while 1 do
40541: LD_INT 1
40543: IFFALSE 40730
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40545: LD_ADDR_VAR 0 9
40549: PUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: LD_INT 1
40557: PPUSH
40558: CALL_OW 287
40562: PUSH
40563: LD_INT 10
40565: MUL
40566: ST_TO_ADDR
// r := rate / 10 ;
40567: LD_ADDR_VAR 0 7
40571: PUSH
40572: LD_VAR 0 2
40576: PUSH
40577: LD_INT 10
40579: DIVREAL
40580: ST_TO_ADDR
// time := 1 1$00 ;
40581: LD_ADDR_VAR 0 8
40585: PUSH
40586: LD_INT 2100
40588: ST_TO_ADDR
// if amount < min then
40589: LD_VAR 0 9
40593: PUSH
40594: LD_VAR 0 3
40598: LESS
40599: IFFALSE 40617
// r := r * 2 else
40601: LD_ADDR_VAR 0 7
40605: PUSH
40606: LD_VAR 0 7
40610: PUSH
40611: LD_INT 2
40613: MUL
40614: ST_TO_ADDR
40615: GO 40643
// if amount > max then
40617: LD_VAR 0 9
40621: PUSH
40622: LD_VAR 0 4
40626: GREATER
40627: IFFALSE 40643
// r := r / 2 ;
40629: LD_ADDR_VAR 0 7
40633: PUSH
40634: LD_VAR 0 7
40638: PUSH
40639: LD_INT 2
40641: DIVREAL
40642: ST_TO_ADDR
// time := time / r ;
40643: LD_ADDR_VAR 0 8
40647: PUSH
40648: LD_VAR 0 8
40652: PUSH
40653: LD_VAR 0 7
40657: DIVREAL
40658: ST_TO_ADDR
// if time < 0 then
40659: LD_VAR 0 8
40663: PUSH
40664: LD_INT 0
40666: LESS
40667: IFFALSE 40684
// time := time * - 1 ;
40669: LD_ADDR_VAR 0 8
40673: PUSH
40674: LD_VAR 0 8
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: MUL
40683: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40684: LD_VAR 0 8
40688: PUSH
40689: LD_INT 35
40691: PPUSH
40692: LD_INT 875
40694: PPUSH
40695: CALL_OW 12
40699: PLUS
40700: PPUSH
40701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40705: LD_INT 1
40707: PPUSH
40708: LD_INT 5
40710: PPUSH
40711: CALL_OW 12
40715: PPUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: LD_INT 1
40723: PPUSH
40724: CALL_OW 55
// end ;
40728: GO 40541
// end ;
40730: LD_VAR 0 5
40734: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40735: LD_INT 0
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
// if not turrets or not factories then
40745: LD_VAR 0 1
40749: NOT
40750: IFTRUE 40759
40752: PUSH
40753: LD_VAR 0 2
40757: NOT
40758: OR
40759: IFFALSE 40763
// exit ;
40761: GO 41070
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40763: LD_ADDR_VAR 0 10
40767: PUSH
40768: LD_INT 5
40770: PUSH
40771: LD_INT 6
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 4
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 3
40790: PUSH
40791: LD_INT 5
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 24
40805: PUSH
40806: LD_INT 25
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 23
40815: PUSH
40816: LD_INT 27
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 42
40829: PUSH
40830: LD_INT 43
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 44
40839: PUSH
40840: LD_INT 46
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 45
40849: PUSH
40850: LD_INT 47
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: ST_TO_ADDR
// result := [ ] ;
40867: LD_ADDR_VAR 0 3
40871: PUSH
40872: EMPTY
40873: ST_TO_ADDR
// for i in turrets do
40874: LD_ADDR_VAR 0 4
40878: PUSH
40879: LD_VAR 0 1
40883: PUSH
40884: FOR_IN
40885: IFFALSE 41068
// begin nat := GetNation ( i ) ;
40887: LD_ADDR_VAR 0 7
40891: PUSH
40892: LD_VAR 0 4
40896: PPUSH
40897: CALL_OW 248
40901: ST_TO_ADDR
// weapon := 0 ;
40902: LD_ADDR_VAR 0 8
40906: PUSH
40907: LD_INT 0
40909: ST_TO_ADDR
// if not nat then
40910: LD_VAR 0 7
40914: NOT
40915: IFFALSE 40919
// continue ;
40917: GO 40884
// for j in list [ nat ] do
40919: LD_ADDR_VAR 0 5
40923: PUSH
40924: LD_VAR 0 10
40928: PUSH
40929: LD_VAR 0 7
40933: ARRAY
40934: PUSH
40935: FOR_IN
40936: IFFALSE 40977
// if GetBWeapon ( i ) = j [ 1 ] then
40938: LD_VAR 0 4
40942: PPUSH
40943: CALL_OW 269
40947: PUSH
40948: LD_VAR 0 5
40952: PUSH
40953: LD_INT 1
40955: ARRAY
40956: EQUAL
40957: IFFALSE 40975
// begin weapon := j [ 2 ] ;
40959: LD_ADDR_VAR 0 8
40963: PUSH
40964: LD_VAR 0 5
40968: PUSH
40969: LD_INT 2
40971: ARRAY
40972: ST_TO_ADDR
// break ;
40973: GO 40977
// end ;
40975: GO 40935
40977: POP
40978: POP
// if not weapon then
40979: LD_VAR 0 8
40983: NOT
40984: IFFALSE 40988
// continue ;
40986: GO 40884
// for k in factories do
40988: LD_ADDR_VAR 0 6
40992: PUSH
40993: LD_VAR 0 2
40997: PUSH
40998: FOR_IN
40999: IFFALSE 41064
// begin weapons := AvailableWeaponList ( k ) ;
41001: LD_ADDR_VAR 0 9
41005: PUSH
41006: LD_VAR 0 6
41010: PPUSH
41011: CALL_OW 478
41015: ST_TO_ADDR
// if not weapons then
41016: LD_VAR 0 9
41020: NOT
41021: IFFALSE 41025
// continue ;
41023: GO 40998
// if weapon in weapons then
41025: LD_VAR 0 8
41029: PUSH
41030: LD_VAR 0 9
41034: IN
41035: IFFALSE 41062
// begin result := [ i , weapon ] ;
41037: LD_ADDR_VAR 0 3
41041: PUSH
41042: LD_VAR 0 4
41046: PUSH
41047: LD_VAR 0 8
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: ST_TO_ADDR
// exit ;
41056: POP
41057: POP
41058: POP
41059: POP
41060: GO 41070
// end ; end ;
41062: GO 40998
41064: POP
41065: POP
// end ;
41066: GO 40884
41068: POP
41069: POP
// end ;
41070: LD_VAR 0 3
41074: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41075: LD_INT 0
41077: PPUSH
// if not side or side > 8 then
41078: LD_VAR 0 3
41082: NOT
41083: IFTRUE 41095
41085: PUSH
41086: LD_VAR 0 3
41090: PUSH
41091: LD_INT 8
41093: GREATER
41094: OR
41095: IFFALSE 41099
// exit ;
41097: GO 41158
// if not range then
41099: LD_VAR 0 4
41103: NOT
41104: IFFALSE 41115
// range := - 12 ;
41106: LD_ADDR_VAR 0 4
41110: PUSH
41111: LD_INT 12
41113: NEG
41114: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41115: LD_VAR 0 1
41119: PPUSH
41120: LD_VAR 0 2
41124: PPUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 4
41134: PPUSH
41135: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41139: LD_VAR 0 1
41143: PPUSH
41144: LD_VAR 0 2
41148: PPUSH
41149: LD_VAR 0 3
41153: PPUSH
41154: CALL_OW 331
// end ;
41158: LD_VAR 0 5
41162: RET
// export function Video ( mode ) ; begin
41163: LD_INT 0
41165: PPUSH
// ingame_video = mode ;
41166: LD_ADDR_OWVAR 52
41170: PUSH
41171: LD_VAR 0 1
41175: ST_TO_ADDR
// interface_hidden = mode ;
41176: LD_ADDR_OWVAR 54
41180: PUSH
41181: LD_VAR 0 1
41185: ST_TO_ADDR
// end ;
41186: LD_VAR 0 2
41190: RET
// export function Join ( array , element ) ; begin
41191: LD_INT 0
41193: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: LD_VAR 0 1
41208: PUSH
41209: LD_INT 1
41211: PLUS
41212: PPUSH
41213: LD_VAR 0 2
41217: PPUSH
41218: CALL_OW 1
41222: ST_TO_ADDR
// end ;
41223: LD_VAR 0 3
41227: RET
// export function JoinUnion ( array , element ) ; begin
41228: LD_INT 0
41230: PPUSH
// result := array union element ;
41231: LD_ADDR_VAR 0 3
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: LD_VAR 0 2
41245: UNION
41246: ST_TO_ADDR
// end ;
41247: LD_VAR 0 3
41251: RET
// export function GetBehemoths ( side ) ; begin
41252: LD_INT 0
41254: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41255: LD_ADDR_VAR 0 2
41259: PUSH
41260: LD_INT 22
41262: PUSH
41263: LD_VAR 0 1
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 31
41274: PUSH
41275: LD_INT 25
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PPUSH
41286: CALL_OW 69
41290: ST_TO_ADDR
// end ;
41291: LD_VAR 0 2
41295: RET
// export function Shuffle ( array ) ; var i , index ; begin
41296: LD_INT 0
41298: PPUSH
41299: PPUSH
41300: PPUSH
// result := [ ] ;
41301: LD_ADDR_VAR 0 2
41305: PUSH
41306: EMPTY
41307: ST_TO_ADDR
// if not array then
41308: LD_VAR 0 1
41312: NOT
41313: IFFALSE 41317
// exit ;
41315: GO 41416
// Randomize ;
41317: CALL_OW 10
// for i = array downto 1 do
41321: LD_ADDR_VAR 0 3
41325: PUSH
41326: DOUBLE
41327: LD_VAR 0 1
41331: INC
41332: ST_TO_ADDR
41333: LD_INT 1
41335: PUSH
41336: FOR_DOWNTO
41337: IFFALSE 41414
// begin index := rand ( 1 , array ) ;
41339: LD_ADDR_VAR 0 4
41343: PUSH
41344: LD_INT 1
41346: PPUSH
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 12
41356: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41357: LD_ADDR_VAR 0 2
41361: PUSH
41362: LD_VAR 0 2
41366: PPUSH
41367: LD_VAR 0 2
41371: PUSH
41372: LD_INT 1
41374: PLUS
41375: PPUSH
41376: LD_VAR 0 1
41380: PUSH
41381: LD_VAR 0 4
41385: ARRAY
41386: PPUSH
41387: CALL_OW 2
41391: ST_TO_ADDR
// array := Delete ( array , index ) ;
41392: LD_ADDR_VAR 0 1
41396: PUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: LD_VAR 0 4
41406: PPUSH
41407: CALL_OW 3
41411: ST_TO_ADDR
// end ;
41412: GO 41336
41414: POP
41415: POP
// end ;
41416: LD_VAR 0 2
41420: RET
// export function GetBaseMaterials ( base ) ; begin
41421: LD_INT 0
41423: PPUSH
// result := [ 0 , 0 , 0 ] ;
41424: LD_ADDR_VAR 0 2
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// if not base then
41443: LD_VAR 0 1
41447: NOT
41448: IFFALSE 41452
// exit ;
41450: GO 41501
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41452: LD_ADDR_VAR 0 2
41456: PUSH
41457: LD_VAR 0 1
41461: PPUSH
41462: LD_INT 1
41464: PPUSH
41465: CALL_OW 275
41469: PUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: LD_INT 2
41477: PPUSH
41478: CALL_OW 275
41482: PUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_INT 3
41490: PPUSH
41491: CALL_OW 275
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: LIST
41500: ST_TO_ADDR
// end ;
41501: LD_VAR 0 2
41505: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41506: LD_INT 0
41508: PPUSH
41509: PPUSH
// result := array ;
41510: LD_ADDR_VAR 0 3
41514: PUSH
41515: LD_VAR 0 1
41519: ST_TO_ADDR
// if size >= result then
41520: LD_VAR 0 2
41524: PUSH
41525: LD_VAR 0 3
41529: GREATEREQUAL
41530: IFFALSE 41534
// exit ;
41532: GO 41584
// if size then
41534: LD_VAR 0 2
41538: IFFALSE 41584
// for i := array downto size do
41540: LD_ADDR_VAR 0 4
41544: PUSH
41545: DOUBLE
41546: LD_VAR 0 1
41550: INC
41551: ST_TO_ADDR
41552: LD_VAR 0 2
41556: PUSH
41557: FOR_DOWNTO
41558: IFFALSE 41582
// result := Delete ( result , result ) ;
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_VAR 0 3
41569: PPUSH
41570: LD_VAR 0 3
41574: PPUSH
41575: CALL_OW 3
41579: ST_TO_ADDR
41580: GO 41557
41582: POP
41583: POP
// end ;
41584: LD_VAR 0 3
41588: RET
// export function ComExit ( unit ) ; var tmp ; begin
41589: LD_INT 0
41591: PPUSH
41592: PPUSH
// if not IsInUnit ( unit ) then
41593: LD_VAR 0 1
41597: PPUSH
41598: CALL_OW 310
41602: NOT
41603: IFFALSE 41607
// exit ;
41605: GO 41667
// tmp := IsInUnit ( unit ) ;
41607: LD_ADDR_VAR 0 3
41611: PUSH
41612: LD_VAR 0 1
41616: PPUSH
41617: CALL_OW 310
41621: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41622: LD_VAR 0 3
41626: PPUSH
41627: CALL_OW 247
41631: PUSH
41632: LD_INT 2
41634: EQUAL
41635: IFFALSE 41648
// ComExitVehicle ( unit ) else
41637: LD_VAR 0 1
41641: PPUSH
41642: CALL_OW 121
41646: GO 41657
// ComExitBuilding ( unit ) ;
41648: LD_VAR 0 1
41652: PPUSH
41653: CALL_OW 122
// result := tmp ;
41657: LD_ADDR_VAR 0 2
41661: PUSH
41662: LD_VAR 0 3
41666: ST_TO_ADDR
// end ;
41667: LD_VAR 0 2
41671: RET
// export function ComExitAll ( units ) ; var i ; begin
41672: LD_INT 0
41674: PPUSH
41675: PPUSH
// if not units then
41676: LD_VAR 0 1
41680: NOT
41681: IFFALSE 41685
// exit ;
41683: GO 41711
// for i in units do
41685: LD_ADDR_VAR 0 3
41689: PUSH
41690: LD_VAR 0 1
41694: PUSH
41695: FOR_IN
41696: IFFALSE 41709
// ComExit ( i ) ;
41698: LD_VAR 0 3
41702: PPUSH
41703: CALL 41589 0 1
41707: GO 41695
41709: POP
41710: POP
// end ;
41711: LD_VAR 0 2
41715: RET
// export function ResetHc ; begin
41716: LD_INT 0
41718: PPUSH
// InitHc ;
41719: CALL_OW 19
// hc_importance := 0 ;
41723: LD_ADDR_OWVAR 32
41727: PUSH
41728: LD_INT 0
41730: ST_TO_ADDR
// end ;
41731: LD_VAR 0 1
41735: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41736: LD_INT 0
41738: PPUSH
41739: PPUSH
41740: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41741: LD_ADDR_VAR 0 6
41745: PUSH
41746: LD_VAR 0 1
41750: PUSH
41751: LD_VAR 0 3
41755: PLUS
41756: PUSH
41757: LD_INT 2
41759: DIV
41760: ST_TO_ADDR
// if _x < 0 then
41761: LD_VAR 0 6
41765: PUSH
41766: LD_INT 0
41768: LESS
41769: IFFALSE 41786
// _x := _x * - 1 ;
41771: LD_ADDR_VAR 0 6
41775: PUSH
41776: LD_VAR 0 6
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: MUL
41785: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41786: LD_ADDR_VAR 0 7
41790: PUSH
41791: LD_VAR 0 2
41795: PUSH
41796: LD_VAR 0 4
41800: PLUS
41801: PUSH
41802: LD_INT 2
41804: DIV
41805: ST_TO_ADDR
// if _y < 0 then
41806: LD_VAR 0 7
41810: PUSH
41811: LD_INT 0
41813: LESS
41814: IFFALSE 41831
// _y := _y * - 1 ;
41816: LD_ADDR_VAR 0 7
41820: PUSH
41821: LD_VAR 0 7
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: MUL
41830: ST_TO_ADDR
// result := [ _x , _y ] ;
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: LD_VAR 0 6
41840: PUSH
41841: LD_VAR 0 7
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: ST_TO_ADDR
// end ;
41850: LD_VAR 0 5
41854: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41855: LD_INT 0
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
// task := GetTaskList ( unit ) ;
41861: LD_ADDR_VAR 0 7
41865: PUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 437
41875: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41876: LD_VAR 0 7
41880: NOT
41881: IFFALSE 41900
41883: PUSH
41884: LD_VAR 0 1
41888: PPUSH
41889: LD_VAR 0 2
41893: PPUSH
41894: CALL_OW 308
41898: NOT
41899: AND
41900: IFFALSE 41904
// exit ;
41902: GO 42022
// if IsInArea ( unit , area ) then
41904: LD_VAR 0 1
41908: PPUSH
41909: LD_VAR 0 2
41913: PPUSH
41914: CALL_OW 308
41918: IFFALSE 41936
// begin ComMoveToArea ( unit , goAway ) ;
41920: LD_VAR 0 1
41924: PPUSH
41925: LD_VAR 0 3
41929: PPUSH
41930: CALL_OW 113
// exit ;
41934: GO 42022
// end ; if task [ 1 ] [ 1 ] <> M then
41936: LD_VAR 0 7
41940: PUSH
41941: LD_INT 1
41943: ARRAY
41944: PUSH
41945: LD_INT 1
41947: ARRAY
41948: PUSH
41949: LD_STRING M
41951: NONEQUAL
41952: IFFALSE 41956
// exit ;
41954: GO 42022
// x := task [ 1 ] [ 2 ] ;
41956: LD_ADDR_VAR 0 5
41960: PUSH
41961: LD_VAR 0 7
41965: PUSH
41966: LD_INT 1
41968: ARRAY
41969: PUSH
41970: LD_INT 2
41972: ARRAY
41973: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41974: LD_ADDR_VAR 0 6
41978: PUSH
41979: LD_VAR 0 7
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: PUSH
41988: LD_INT 3
41990: ARRAY
41991: ST_TO_ADDR
// if InArea ( x , y , area ) then
41992: LD_VAR 0 5
41996: PPUSH
41997: LD_VAR 0 6
42001: PPUSH
42002: LD_VAR 0 2
42006: PPUSH
42007: CALL_OW 309
42011: IFFALSE 42022
// ComStop ( unit ) ;
42013: LD_VAR 0 1
42017: PPUSH
42018: CALL_OW 141
// end ;
42022: LD_VAR 0 4
42026: RET
// export function Abs ( value ) ; begin
42027: LD_INT 0
42029: PPUSH
// result := value ;
42030: LD_ADDR_VAR 0 2
42034: PUSH
42035: LD_VAR 0 1
42039: ST_TO_ADDR
// if value < 0 then
42040: LD_VAR 0 1
42044: PUSH
42045: LD_INT 0
42047: LESS
42048: IFFALSE 42065
// result := value * - 1 ;
42050: LD_ADDR_VAR 0 2
42054: PUSH
42055: LD_VAR 0 1
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: MUL
42064: ST_TO_ADDR
// end ;
42065: LD_VAR 0 2
42069: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42070: LD_INT 0
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
// if not unit or not building then
42080: LD_VAR 0 1
42084: NOT
42085: IFTRUE 42094
42087: PUSH
42088: LD_VAR 0 2
42092: NOT
42093: OR
42094: IFFALSE 42098
// exit ;
42096: GO 42326
// x := GetX ( building ) ;
42098: LD_ADDR_VAR 0 4
42102: PUSH
42103: LD_VAR 0 2
42107: PPUSH
42108: CALL_OW 250
42112: ST_TO_ADDR
// y := GetY ( building ) ;
42113: LD_ADDR_VAR 0 6
42117: PUSH
42118: LD_VAR 0 2
42122: PPUSH
42123: CALL_OW 251
42127: ST_TO_ADDR
// d := GetDir ( building ) ;
42128: LD_ADDR_VAR 0 8
42132: PUSH
42133: LD_VAR 0 2
42137: PPUSH
42138: CALL_OW 254
42142: ST_TO_ADDR
// r := 4 ;
42143: LD_ADDR_VAR 0 9
42147: PUSH
42148: LD_INT 4
42150: ST_TO_ADDR
// for i := 1 to 5 do
42151: LD_ADDR_VAR 0 10
42155: PUSH
42156: DOUBLE
42157: LD_INT 1
42159: DEC
42160: ST_TO_ADDR
42161: LD_INT 5
42163: PUSH
42164: FOR_TO
42165: IFFALSE 42324
// begin _x := ShiftX ( x , d , r + i ) ;
42167: LD_ADDR_VAR 0 5
42171: PUSH
42172: LD_VAR 0 4
42176: PPUSH
42177: LD_VAR 0 8
42181: PPUSH
42182: LD_VAR 0 9
42186: PUSH
42187: LD_VAR 0 10
42191: PLUS
42192: PPUSH
42193: CALL_OW 272
42197: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42198: LD_ADDR_VAR 0 7
42202: PUSH
42203: LD_VAR 0 6
42207: PPUSH
42208: LD_VAR 0 8
42212: PPUSH
42213: LD_VAR 0 9
42217: PUSH
42218: LD_VAR 0 10
42222: PLUS
42223: PPUSH
42224: CALL_OW 273
42228: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42229: LD_VAR 0 5
42233: PPUSH
42234: LD_VAR 0 7
42238: PPUSH
42239: CALL_OW 488
42243: IFFALSE 42278
42245: PUSH
42246: LD_VAR 0 5
42250: PPUSH
42251: LD_VAR 0 7
42255: PPUSH
42256: CALL_OW 428
42260: PPUSH
42261: CALL_OW 247
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: IN
42276: NOT
42277: AND
42278: IFFALSE 42322
// begin ComMoveXY ( unit , _x , _y ) ;
42280: LD_VAR 0 1
42284: PPUSH
42285: LD_VAR 0 5
42289: PPUSH
42290: LD_VAR 0 7
42294: PPUSH
42295: CALL_OW 111
// result := [ _x , _y ] ;
42299: LD_ADDR_VAR 0 3
42303: PUSH
42304: LD_VAR 0 5
42308: PUSH
42309: LD_VAR 0 7
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: ST_TO_ADDR
// exit ;
42318: POP
42319: POP
42320: GO 42326
// end ; end ;
42322: GO 42164
42324: POP
42325: POP
// end ;
42326: LD_VAR 0 3
42330: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42331: LD_INT 0
42333: PPUSH
42334: PPUSH
42335: PPUSH
// result := 0 ;
42336: LD_ADDR_VAR 0 3
42340: PUSH
42341: LD_INT 0
42343: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42344: LD_VAR 0 1
42348: PUSH
42349: LD_INT 0
42351: LESS
42352: IFTRUE 42364
42354: PUSH
42355: LD_VAR 0 1
42359: PUSH
42360: LD_INT 8
42362: GREATER
42363: OR
42364: IFTRUE 42376
42366: PUSH
42367: LD_VAR 0 2
42371: PUSH
42372: LD_INT 0
42374: LESS
42375: OR
42376: IFTRUE 42388
42378: PUSH
42379: LD_VAR 0 2
42383: PUSH
42384: LD_INT 8
42386: GREATER
42387: OR
42388: IFFALSE 42392
// exit ;
42390: GO 42467
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42392: LD_ADDR_VAR 0 4
42396: PUSH
42397: LD_INT 22
42399: PUSH
42400: LD_VAR 0 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PPUSH
42409: CALL_OW 69
42413: PUSH
42414: FOR_IN
42415: IFFALSE 42465
// begin un := UnitShoot ( i ) ;
42417: LD_ADDR_VAR 0 5
42421: PUSH
42422: LD_VAR 0 4
42426: PPUSH
42427: CALL_OW 504
42431: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42432: LD_VAR 0 5
42436: PPUSH
42437: CALL_OW 255
42441: PUSH
42442: LD_VAR 0 1
42446: EQUAL
42447: IFFALSE 42463
// begin result := un ;
42449: LD_ADDR_VAR 0 3
42453: PUSH
42454: LD_VAR 0 5
42458: ST_TO_ADDR
// exit ;
42459: POP
42460: POP
42461: GO 42467
// end ; end ;
42463: GO 42414
42465: POP
42466: POP
// end ;
42467: LD_VAR 0 3
42471: RET
// export function GetCargoBay ( units ) ; begin
42472: LD_INT 0
42474: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42475: LD_ADDR_VAR 0 2
42479: PUSH
42480: LD_VAR 0 1
42484: PPUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 34
42490: PUSH
42491: LD_INT 12
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 34
42500: PUSH
42501: LD_INT 51
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 34
42510: PUSH
42511: LD_INT 32
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 34
42520: PUSH
42521: LD_INT 89
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: PPUSH
42535: CALL_OW 72
42539: ST_TO_ADDR
// end ;
42540: LD_VAR 0 2
42544: RET
// export function Negate ( value ) ; begin
42545: LD_INT 0
42547: PPUSH
// result := not value ;
42548: LD_ADDR_VAR 0 2
42552: PUSH
42553: LD_VAR 0 1
42557: NOT
42558: ST_TO_ADDR
// end ;
42559: LD_VAR 0 2
42563: RET
// export function Inc ( value ) ; begin
42564: LD_INT 0
42566: PPUSH
// result := value + 1 ;
42567: LD_ADDR_VAR 0 2
42571: PUSH
42572: LD_VAR 0 1
42576: PUSH
42577: LD_INT 1
42579: PLUS
42580: ST_TO_ADDR
// end ;
42581: LD_VAR 0 2
42585: RET
// export function Dec ( value ) ; begin
42586: LD_INT 0
42588: PPUSH
// result := value - 1 ;
42589: LD_ADDR_VAR 0 2
42593: PUSH
42594: LD_VAR 0 1
42598: PUSH
42599: LD_INT 1
42601: MINUS
42602: ST_TO_ADDR
// end ;
42603: LD_VAR 0 2
42607: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42608: LD_INT 0
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42618: LD_VAR 0 1
42622: PPUSH
42623: LD_VAR 0 2
42627: PPUSH
42628: CALL_OW 488
42632: NOT
42633: IFTRUE 42652
42635: PUSH
42636: LD_VAR 0 3
42640: PPUSH
42641: LD_VAR 0 4
42645: PPUSH
42646: CALL_OW 488
42650: NOT
42651: OR
42652: IFFALSE 42665
// begin result := - 1 ;
42654: LD_ADDR_VAR 0 5
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: ST_TO_ADDR
// exit ;
42663: GO 42900
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42665: LD_ADDR_VAR 0 12
42669: PUSH
42670: LD_VAR 0 1
42674: PPUSH
42675: LD_VAR 0 2
42679: PPUSH
42680: LD_VAR 0 3
42684: PPUSH
42685: LD_VAR 0 4
42689: PPUSH
42690: CALL 41736 0 4
42694: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42695: LD_ADDR_VAR 0 11
42699: PUSH
42700: LD_VAR 0 1
42704: PPUSH
42705: LD_VAR 0 2
42709: PPUSH
42710: LD_VAR 0 12
42714: PUSH
42715: LD_INT 1
42717: ARRAY
42718: PPUSH
42719: LD_VAR 0 12
42723: PUSH
42724: LD_INT 2
42726: ARRAY
42727: PPUSH
42728: CALL_OW 298
42732: ST_TO_ADDR
// distance := 9999 ;
42733: LD_ADDR_VAR 0 10
42737: PUSH
42738: LD_INT 9999
42740: ST_TO_ADDR
// for i := 0 to 5 do
42741: LD_ADDR_VAR 0 6
42745: PUSH
42746: DOUBLE
42747: LD_INT 0
42749: DEC
42750: ST_TO_ADDR
42751: LD_INT 5
42753: PUSH
42754: FOR_TO
42755: IFFALSE 42898
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42757: LD_ADDR_VAR 0 7
42761: PUSH
42762: LD_VAR 0 1
42766: PPUSH
42767: LD_VAR 0 6
42771: PPUSH
42772: LD_VAR 0 11
42776: PPUSH
42777: CALL_OW 272
42781: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42782: LD_ADDR_VAR 0 8
42786: PUSH
42787: LD_VAR 0 2
42791: PPUSH
42792: LD_VAR 0 6
42796: PPUSH
42797: LD_VAR 0 11
42801: PPUSH
42802: CALL_OW 273
42806: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42807: LD_VAR 0 7
42811: PPUSH
42812: LD_VAR 0 8
42816: PPUSH
42817: CALL_OW 488
42821: NOT
42822: IFFALSE 42826
// continue ;
42824: GO 42754
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_VAR 0 12
42835: PUSH
42836: LD_INT 1
42838: ARRAY
42839: PPUSH
42840: LD_VAR 0 12
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: PPUSH
42849: LD_VAR 0 7
42853: PPUSH
42854: LD_VAR 0 8
42858: PPUSH
42859: CALL_OW 298
42863: ST_TO_ADDR
// if tmp < distance then
42864: LD_VAR 0 9
42868: PUSH
42869: LD_VAR 0 10
42873: LESS
42874: IFFALSE 42896
// begin result := i ;
42876: LD_ADDR_VAR 0 5
42880: PUSH
42881: LD_VAR 0 6
42885: ST_TO_ADDR
// distance := tmp ;
42886: LD_ADDR_VAR 0 10
42890: PUSH
42891: LD_VAR 0 9
42895: ST_TO_ADDR
// end ; end ;
42896: GO 42754
42898: POP
42899: POP
// end ;
42900: LD_VAR 0 5
42904: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42905: LD_INT 0
42907: PPUSH
42908: PPUSH
// if not driver or not IsInUnit ( driver ) then
42909: LD_VAR 0 1
42913: NOT
42914: IFTRUE 42928
42916: PUSH
42917: LD_VAR 0 1
42921: PPUSH
42922: CALL_OW 310
42926: NOT
42927: OR
42928: IFFALSE 42932
// exit ;
42930: GO 43022
// vehicle := IsInUnit ( driver ) ;
42932: LD_ADDR_VAR 0 3
42936: PUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 310
42946: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42947: LD_VAR 0 1
42951: PPUSH
42952: LD_STRING \
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: PUSH
42982: LD_STRING E
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_VAR 0 3
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PPUSH
43018: CALL_OW 446
// end ;
43022: LD_VAR 0 2
43026: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43027: LD_INT 0
43029: PPUSH
43030: PPUSH
// if not driver or not IsInUnit ( driver ) then
43031: LD_VAR 0 1
43035: NOT
43036: IFTRUE 43050
43038: PUSH
43039: LD_VAR 0 1
43043: PPUSH
43044: CALL_OW 310
43048: NOT
43049: OR
43050: IFFALSE 43054
// exit ;
43052: GO 43144
// vehicle := IsInUnit ( driver ) ;
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_VAR 0 1
43063: PPUSH
43064: CALL_OW 310
43068: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43069: LD_VAR 0 1
43073: PPUSH
43074: LD_STRING \
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: PUSH
43104: LD_STRING E
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_VAR 0 3
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PPUSH
43140: CALL_OW 447
// end ;
43144: LD_VAR 0 2
43148: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43149: LD_INT 0
43151: PPUSH
43152: PPUSH
43153: PPUSH
// tmp := [ ] ;
43154: LD_ADDR_VAR 0 5
43158: PUSH
43159: EMPTY
43160: ST_TO_ADDR
// for i in units do
43161: LD_ADDR_VAR 0 4
43165: PUSH
43166: LD_VAR 0 1
43170: PUSH
43171: FOR_IN
43172: IFFALSE 43210
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43174: LD_ADDR_VAR 0 5
43178: PUSH
43179: LD_VAR 0 5
43183: PPUSH
43184: LD_VAR 0 5
43188: PUSH
43189: LD_INT 1
43191: PLUS
43192: PPUSH
43193: LD_VAR 0 4
43197: PPUSH
43198: CALL_OW 256
43202: PPUSH
43203: CALL_OW 2
43207: ST_TO_ADDR
43208: GO 43171
43210: POP
43211: POP
// if not tmp then
43212: LD_VAR 0 5
43216: NOT
43217: IFFALSE 43221
// exit ;
43219: GO 43269
// if asc then
43221: LD_VAR 0 2
43225: IFFALSE 43249
// result := SortListByListAsc ( units , tmp ) else
43227: LD_ADDR_VAR 0 3
43231: PUSH
43232: LD_VAR 0 1
43236: PPUSH
43237: LD_VAR 0 5
43241: PPUSH
43242: CALL_OW 76
43246: ST_TO_ADDR
43247: GO 43269
// result := SortListByListDesc ( units , tmp ) ;
43249: LD_ADDR_VAR 0 3
43253: PUSH
43254: LD_VAR 0 1
43258: PPUSH
43259: LD_VAR 0 5
43263: PPUSH
43264: CALL_OW 77
43268: ST_TO_ADDR
// end ;
43269: LD_VAR 0 3
43273: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43274: LD_INT 0
43276: PPUSH
43277: PPUSH
// task := GetTaskList ( mech ) ;
43278: LD_ADDR_VAR 0 4
43282: PUSH
43283: LD_VAR 0 1
43287: PPUSH
43288: CALL_OW 437
43292: ST_TO_ADDR
// if not task then
43293: LD_VAR 0 4
43297: NOT
43298: IFFALSE 43302
// exit ;
43300: GO 43346
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: LD_VAR 0 4
43311: PUSH
43312: LD_INT 1
43314: ARRAY
43315: PUSH
43316: LD_INT 1
43318: ARRAY
43319: PUSH
43320: LD_STRING r
43322: EQUAL
43323: IFFALSE 43345
43325: PUSH
43326: LD_VAR 0 4
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PUSH
43335: LD_INT 4
43337: ARRAY
43338: PUSH
43339: LD_VAR 0 2
43343: EQUAL
43344: AND
43345: ST_TO_ADDR
// end ;
43346: LD_VAR 0 3
43350: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43351: LD_INT 0
43353: PPUSH
// SetDir ( unit , d ) ;
43354: LD_VAR 0 1
43358: PPUSH
43359: LD_VAR 0 4
43363: PPUSH
43364: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43368: LD_ADDR_VAR 0 6
43372: PUSH
43373: LD_VAR 0 1
43377: PPUSH
43378: LD_VAR 0 2
43382: PPUSH
43383: LD_VAR 0 3
43387: PPUSH
43388: LD_VAR 0 5
43392: PPUSH
43393: CALL_OW 48
43397: ST_TO_ADDR
// end ;
43398: LD_VAR 0 6
43402: RET
// export function ToNaturalNumber ( number ) ; begin
43403: LD_INT 0
43405: PPUSH
// result := number div 1 ;
43406: LD_ADDR_VAR 0 2
43410: PUSH
43411: LD_VAR 0 1
43415: PUSH
43416: LD_INT 1
43418: DIV
43419: ST_TO_ADDR
// if number < 0 then
43420: LD_VAR 0 1
43424: PUSH
43425: LD_INT 0
43427: LESS
43428: IFFALSE 43438
// result := 0 ;
43430: LD_ADDR_VAR 0 2
43434: PUSH
43435: LD_INT 0
43437: ST_TO_ADDR
// end ;
43438: LD_VAR 0 2
43442: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43443: LD_INT 0
43445: PPUSH
43446: PPUSH
43447: PPUSH
// if not buildings then
43448: LD_VAR 0 1
43452: NOT
43453: IFFALSE 43457
// exit ;
43455: GO 43572
// tmp := [ ] ;
43457: LD_ADDR_VAR 0 5
43461: PUSH
43462: EMPTY
43463: ST_TO_ADDR
// for b in buildings do
43464: LD_ADDR_VAR 0 4
43468: PUSH
43469: LD_VAR 0 1
43473: PUSH
43474: FOR_IN
43475: IFFALSE 43513
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: LD_VAR 0 5
43486: PPUSH
43487: LD_VAR 0 5
43491: PUSH
43492: LD_INT 1
43494: PLUS
43495: PPUSH
43496: LD_VAR 0 4
43500: PPUSH
43501: CALL_OW 266
43505: PPUSH
43506: CALL_OW 1
43510: ST_TO_ADDR
43511: GO 43474
43513: POP
43514: POP
// if not tmp then
43515: LD_VAR 0 5
43519: NOT
43520: IFFALSE 43524
// exit ;
43522: GO 43572
// if asc then
43524: LD_VAR 0 2
43528: IFFALSE 43552
// result := SortListByListAsc ( buildings , tmp ) else
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_VAR 0 1
43539: PPUSH
43540: LD_VAR 0 5
43544: PPUSH
43545: CALL_OW 76
43549: ST_TO_ADDR
43550: GO 43572
// result := SortListByListDesc ( buildings , tmp ) ;
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_VAR 0 1
43561: PPUSH
43562: LD_VAR 0 5
43566: PPUSH
43567: CALL_OW 77
43571: ST_TO_ADDR
// end ;
43572: LD_VAR 0 3
43576: RET
// export function SortByClass ( units , class ) ; var un ; begin
43577: LD_INT 0
43579: PPUSH
43580: PPUSH
// if not units or not class then
43581: LD_VAR 0 1
43585: NOT
43586: IFTRUE 43595
43588: PUSH
43589: LD_VAR 0 2
43593: NOT
43594: OR
43595: IFFALSE 43599
// exit ;
43597: GO 43694
// result := [ ] ;
43599: LD_ADDR_VAR 0 3
43603: PUSH
43604: EMPTY
43605: ST_TO_ADDR
// for un in units do
43606: LD_ADDR_VAR 0 4
43610: PUSH
43611: LD_VAR 0 1
43615: PUSH
43616: FOR_IN
43617: IFFALSE 43692
// if GetClass ( un ) = class then
43619: LD_VAR 0 4
43623: PPUSH
43624: CALL_OW 257
43628: PUSH
43629: LD_VAR 0 2
43633: EQUAL
43634: IFFALSE 43661
// result := Insert ( result , 1 , un ) else
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_VAR 0 3
43645: PPUSH
43646: LD_INT 1
43648: PPUSH
43649: LD_VAR 0 4
43653: PPUSH
43654: CALL_OW 2
43658: ST_TO_ADDR
43659: GO 43690
// result := Replace ( result , result + 1 , un ) ;
43661: LD_ADDR_VAR 0 3
43665: PUSH
43666: LD_VAR 0 3
43670: PPUSH
43671: LD_VAR 0 3
43675: PUSH
43676: LD_INT 1
43678: PLUS
43679: PPUSH
43680: LD_VAR 0 4
43684: PPUSH
43685: CALL_OW 1
43689: ST_TO_ADDR
43690: GO 43616
43692: POP
43693: POP
// end ;
43694: LD_VAR 0 3
43698: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43699: LD_INT 0
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
// result := [ ] ;
43708: LD_ADDR_VAR 0 4
43712: PUSH
43713: EMPTY
43714: ST_TO_ADDR
// if x - r < 0 then
43715: LD_VAR 0 1
43719: PUSH
43720: LD_VAR 0 3
43724: MINUS
43725: PUSH
43726: LD_INT 0
43728: LESS
43729: IFFALSE 43741
// min_x := 0 else
43731: LD_ADDR_VAR 0 8
43735: PUSH
43736: LD_INT 0
43738: ST_TO_ADDR
43739: GO 43757
// min_x := x - r ;
43741: LD_ADDR_VAR 0 8
43745: PUSH
43746: LD_VAR 0 1
43750: PUSH
43751: LD_VAR 0 3
43755: MINUS
43756: ST_TO_ADDR
// if y - r < 0 then
43757: LD_VAR 0 2
43761: PUSH
43762: LD_VAR 0 3
43766: MINUS
43767: PUSH
43768: LD_INT 0
43770: LESS
43771: IFFALSE 43783
// min_y := 0 else
43773: LD_ADDR_VAR 0 7
43777: PUSH
43778: LD_INT 0
43780: ST_TO_ADDR
43781: GO 43799
// min_y := y - r ;
43783: LD_ADDR_VAR 0 7
43787: PUSH
43788: LD_VAR 0 2
43792: PUSH
43793: LD_VAR 0 3
43797: MINUS
43798: ST_TO_ADDR
// max_x := x + r ;
43799: LD_ADDR_VAR 0 9
43803: PUSH
43804: LD_VAR 0 1
43808: PUSH
43809: LD_VAR 0 3
43813: PLUS
43814: ST_TO_ADDR
// max_y := y + r ;
43815: LD_ADDR_VAR 0 10
43819: PUSH
43820: LD_VAR 0 2
43824: PUSH
43825: LD_VAR 0 3
43829: PLUS
43830: ST_TO_ADDR
// for _x = min_x to max_x do
43831: LD_ADDR_VAR 0 5
43835: PUSH
43836: DOUBLE
43837: LD_VAR 0 8
43841: DEC
43842: ST_TO_ADDR
43843: LD_VAR 0 9
43847: PUSH
43848: FOR_TO
43849: IFFALSE 43950
// for _y = min_y to max_y do
43851: LD_ADDR_VAR 0 6
43855: PUSH
43856: DOUBLE
43857: LD_VAR 0 7
43861: DEC
43862: ST_TO_ADDR
43863: LD_VAR 0 10
43867: PUSH
43868: FOR_TO
43869: IFFALSE 43946
// begin if not ValidHex ( _x , _y ) then
43871: LD_VAR 0 5
43875: PPUSH
43876: LD_VAR 0 6
43880: PPUSH
43881: CALL_OW 488
43885: NOT
43886: IFFALSE 43890
// continue ;
43888: GO 43868
// if GetResourceTypeXY ( _x , _y ) then
43890: LD_VAR 0 5
43894: PPUSH
43895: LD_VAR 0 6
43899: PPUSH
43900: CALL_OW 283
43904: IFFALSE 43944
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43906: LD_ADDR_VAR 0 4
43910: PUSH
43911: LD_VAR 0 4
43915: PPUSH
43916: LD_VAR 0 4
43920: PUSH
43921: LD_INT 1
43923: PLUS
43924: PPUSH
43925: LD_VAR 0 5
43929: PUSH
43930: LD_VAR 0 6
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PPUSH
43939: CALL_OW 1
43943: ST_TO_ADDR
// end ;
43944: GO 43868
43946: POP
43947: POP
43948: GO 43848
43950: POP
43951: POP
// end ;
43952: LD_VAR 0 4
43956: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43957: LD_INT 0
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
// if not units then
43967: LD_VAR 0 1
43971: NOT
43972: IFFALSE 43976
// exit ;
43974: GO 44508
// result := UnitFilter ( units , [ f_ok ] ) ;
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_VAR 0 1
43985: PPUSH
43986: LD_INT 50
43988: PUSH
43989: EMPTY
43990: LIST
43991: PPUSH
43992: CALL_OW 72
43996: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43997: LD_ADDR_VAR 0 8
44001: PUSH
44002: LD_VAR 0 1
44006: PUSH
44007: LD_INT 1
44009: ARRAY
44010: PPUSH
44011: CALL_OW 255
44015: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44016: LD_ADDR_VAR 0 10
44020: PUSH
44021: LD_INT 29
44023: PUSH
44024: LD_INT 91
44026: PUSH
44027: LD_INT 49
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: ST_TO_ADDR
// if not result then
44035: LD_VAR 0 3
44039: NOT
44040: IFFALSE 44044
// exit ;
44042: GO 44508
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44044: LD_ADDR_VAR 0 5
44048: PUSH
44049: LD_INT 81
44051: PUSH
44052: LD_VAR 0 8
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PPUSH
44061: CALL_OW 69
44065: ST_TO_ADDR
// for i in result do
44066: LD_ADDR_VAR 0 4
44070: PUSH
44071: LD_VAR 0 3
44075: PUSH
44076: FOR_IN
44077: IFFALSE 44506
// begin tag := GetTag ( i ) + 1 ;
44079: LD_ADDR_VAR 0 9
44083: PUSH
44084: LD_VAR 0 4
44088: PPUSH
44089: CALL_OW 110
44093: PUSH
44094: LD_INT 1
44096: PLUS
44097: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44098: LD_ADDR_VAR 0 7
44102: PUSH
44103: LD_VAR 0 4
44107: PPUSH
44108: CALL_OW 250
44112: PPUSH
44113: LD_VAR 0 4
44117: PPUSH
44118: CALL_OW 251
44122: PPUSH
44123: LD_INT 4
44125: PPUSH
44126: CALL 43699 0 3
44130: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44131: LD_VAR 0 4
44135: PPUSH
44136: CALL_OW 247
44140: PUSH
44141: LD_INT 2
44143: EQUAL
44144: IFFALSE 44156
44146: PUSH
44147: LD_VAR 0 7
44151: PUSH
44152: LD_INT 2
44154: GREATER
44155: AND
44156: IFFALSE 44176
44158: PUSH
44159: LD_VAR 0 4
44163: PPUSH
44164: CALL_OW 264
44168: PUSH
44169: LD_VAR 0 10
44173: IN
44174: NOT
44175: AND
44176: IFFALSE 44215
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44178: LD_VAR 0 4
44182: PPUSH
44183: LD_VAR 0 7
44187: PUSH
44188: LD_INT 1
44190: ARRAY
44191: PUSH
44192: LD_INT 1
44194: ARRAY
44195: PPUSH
44196: LD_VAR 0 7
44200: PUSH
44201: LD_INT 1
44203: ARRAY
44204: PUSH
44205: LD_INT 2
44207: ARRAY
44208: PPUSH
44209: CALL_OW 116
44213: GO 44504
// if path > tag then
44215: LD_VAR 0 2
44219: PUSH
44220: LD_VAR 0 9
44224: GREATER
44225: IFFALSE 44433
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44227: LD_ADDR_VAR 0 6
44231: PUSH
44232: LD_VAR 0 5
44236: PPUSH
44237: LD_INT 91
44239: PUSH
44240: LD_VAR 0 4
44244: PUSH
44245: LD_INT 8
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: PPUSH
44253: CALL_OW 72
44257: ST_TO_ADDR
// if nearEnemy then
44258: LD_VAR 0 6
44262: IFFALSE 44331
// begin if GetWeapon ( i ) = ru_time_lapser then
44264: LD_VAR 0 4
44268: PPUSH
44269: CALL_OW 264
44273: PUSH
44274: LD_INT 49
44276: EQUAL
44277: IFFALSE 44305
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44279: LD_VAR 0 4
44283: PPUSH
44284: LD_VAR 0 6
44288: PPUSH
44289: LD_VAR 0 4
44293: PPUSH
44294: CALL_OW 74
44298: PPUSH
44299: CALL_OW 112
44303: GO 44329
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44305: LD_VAR 0 4
44309: PPUSH
44310: LD_VAR 0 6
44314: PPUSH
44315: LD_VAR 0 4
44319: PPUSH
44320: CALL_OW 74
44324: PPUSH
44325: CALL 45589 0 2
// end else
44329: GO 44431
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44331: LD_VAR 0 4
44335: PPUSH
44336: LD_VAR 0 2
44340: PUSH
44341: LD_VAR 0 9
44345: ARRAY
44346: PUSH
44347: LD_INT 1
44349: ARRAY
44350: PPUSH
44351: LD_VAR 0 2
44355: PUSH
44356: LD_VAR 0 9
44360: ARRAY
44361: PUSH
44362: LD_INT 2
44364: ARRAY
44365: PPUSH
44366: CALL_OW 297
44370: PUSH
44371: LD_INT 6
44373: GREATER
44374: IFFALSE 44417
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44376: LD_VAR 0 4
44380: PPUSH
44381: LD_VAR 0 2
44385: PUSH
44386: LD_VAR 0 9
44390: ARRAY
44391: PUSH
44392: LD_INT 1
44394: ARRAY
44395: PPUSH
44396: LD_VAR 0 2
44400: PUSH
44401: LD_VAR 0 9
44405: ARRAY
44406: PUSH
44407: LD_INT 2
44409: ARRAY
44410: PPUSH
44411: CALL_OW 114
44415: GO 44431
// SetTag ( i , tag ) ;
44417: LD_VAR 0 4
44421: PPUSH
44422: LD_VAR 0 9
44426: PPUSH
44427: CALL_OW 109
// end else
44431: GO 44504
// if enemy then
44433: LD_VAR 0 5
44437: IFFALSE 44504
// begin if GetWeapon ( i ) = ru_time_lapser then
44439: LD_VAR 0 4
44443: PPUSH
44444: CALL_OW 264
44448: PUSH
44449: LD_INT 49
44451: EQUAL
44452: IFFALSE 44480
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44454: LD_VAR 0 4
44458: PPUSH
44459: LD_VAR 0 5
44463: PPUSH
44464: LD_VAR 0 4
44468: PPUSH
44469: CALL_OW 74
44473: PPUSH
44474: CALL_OW 112
44478: GO 44504
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44480: LD_VAR 0 4
44484: PPUSH
44485: LD_VAR 0 5
44489: PPUSH
44490: LD_VAR 0 4
44494: PPUSH
44495: CALL_OW 74
44499: PPUSH
44500: CALL 45589 0 2
// end ; end ;
44504: GO 44076
44506: POP
44507: POP
// end ;
44508: LD_VAR 0 3
44512: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44513: LD_INT 0
44515: PPUSH
44516: PPUSH
44517: PPUSH
// if not unit or IsInUnit ( unit ) then
44518: LD_VAR 0 1
44522: NOT
44523: IFTRUE 44536
44525: PUSH
44526: LD_VAR 0 1
44530: PPUSH
44531: CALL_OW 310
44535: OR
44536: IFFALSE 44540
// exit ;
44538: GO 44631
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44540: LD_ADDR_VAR 0 4
44544: PUSH
44545: LD_VAR 0 1
44549: PPUSH
44550: CALL_OW 250
44554: PPUSH
44555: LD_VAR 0 2
44559: PPUSH
44560: LD_INT 1
44562: PPUSH
44563: CALL_OW 272
44567: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44568: LD_ADDR_VAR 0 5
44572: PUSH
44573: LD_VAR 0 1
44577: PPUSH
44578: CALL_OW 251
44582: PPUSH
44583: LD_VAR 0 2
44587: PPUSH
44588: LD_INT 1
44590: PPUSH
44591: CALL_OW 273
44595: ST_TO_ADDR
// if ValidHex ( x , y ) then
44596: LD_VAR 0 4
44600: PPUSH
44601: LD_VAR 0 5
44605: PPUSH
44606: CALL_OW 488
44610: IFFALSE 44631
// ComTurnXY ( unit , x , y ) ;
44612: LD_VAR 0 1
44616: PPUSH
44617: LD_VAR 0 4
44621: PPUSH
44622: LD_VAR 0 5
44626: PPUSH
44627: CALL_OW 118
// end ;
44631: LD_VAR 0 3
44635: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44636: LD_INT 0
44638: PPUSH
44639: PPUSH
// result := false ;
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: LD_INT 0
44647: ST_TO_ADDR
// if not units then
44648: LD_VAR 0 2
44652: NOT
44653: IFFALSE 44657
// exit ;
44655: GO 44702
// for i in units do
44657: LD_ADDR_VAR 0 4
44661: PUSH
44662: LD_VAR 0 2
44666: PUSH
44667: FOR_IN
44668: IFFALSE 44700
// if See ( side , i ) then
44670: LD_VAR 0 1
44674: PPUSH
44675: LD_VAR 0 4
44679: PPUSH
44680: CALL_OW 292
44684: IFFALSE 44698
// begin result := true ;
44686: LD_ADDR_VAR 0 3
44690: PUSH
44691: LD_INT 1
44693: ST_TO_ADDR
// exit ;
44694: POP
44695: POP
44696: GO 44702
// end ;
44698: GO 44667
44700: POP
44701: POP
// end ;
44702: LD_VAR 0 3
44706: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44707: LD_INT 0
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
// if not unit or not points then
44713: LD_VAR 0 1
44717: NOT
44718: IFTRUE 44727
44720: PUSH
44721: LD_VAR 0 2
44725: NOT
44726: OR
44727: IFFALSE 44731
// exit ;
44729: GO 44821
// dist := 99999 ;
44731: LD_ADDR_VAR 0 5
44735: PUSH
44736: LD_INT 99999
44738: ST_TO_ADDR
// for i in points do
44739: LD_ADDR_VAR 0 4
44743: PUSH
44744: LD_VAR 0 2
44748: PUSH
44749: FOR_IN
44750: IFFALSE 44819
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44752: LD_ADDR_VAR 0 6
44756: PUSH
44757: LD_VAR 0 1
44761: PPUSH
44762: LD_VAR 0 4
44766: PUSH
44767: LD_INT 1
44769: ARRAY
44770: PPUSH
44771: LD_VAR 0 4
44775: PUSH
44776: LD_INT 2
44778: ARRAY
44779: PPUSH
44780: CALL_OW 297
44784: ST_TO_ADDR
// if tmpDist < dist then
44785: LD_VAR 0 6
44789: PUSH
44790: LD_VAR 0 5
44794: LESS
44795: IFFALSE 44817
// begin result := i ;
44797: LD_ADDR_VAR 0 3
44801: PUSH
44802: LD_VAR 0 4
44806: ST_TO_ADDR
// dist := tmpDist ;
44807: LD_ADDR_VAR 0 5
44811: PUSH
44812: LD_VAR 0 6
44816: ST_TO_ADDR
// end ; end ;
44817: GO 44749
44819: POP
44820: POP
// end ;
44821: LD_VAR 0 3
44825: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44826: LD_INT 0
44828: PPUSH
// uc_side := side ;
44829: LD_ADDR_OWVAR 20
44833: PUSH
44834: LD_VAR 0 1
44838: ST_TO_ADDR
// uc_nation := 3 ;
44839: LD_ADDR_OWVAR 21
44843: PUSH
44844: LD_INT 3
44846: ST_TO_ADDR
// vc_chassis := 25 ;
44847: LD_ADDR_OWVAR 37
44851: PUSH
44852: LD_INT 25
44854: ST_TO_ADDR
// vc_engine := engine_siberite ;
44855: LD_ADDR_OWVAR 39
44859: PUSH
44860: LD_INT 3
44862: ST_TO_ADDR
// vc_control := control_computer ;
44863: LD_ADDR_OWVAR 38
44867: PUSH
44868: LD_INT 3
44870: ST_TO_ADDR
// vc_weapon := 59 ;
44871: LD_ADDR_OWVAR 40
44875: PUSH
44876: LD_INT 59
44878: ST_TO_ADDR
// result := CreateVehicle ;
44879: LD_ADDR_VAR 0 5
44883: PUSH
44884: CALL_OW 45
44888: ST_TO_ADDR
// SetDir ( result , d ) ;
44889: LD_VAR 0 5
44893: PPUSH
44894: LD_VAR 0 4
44898: PPUSH
44899: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44903: LD_VAR 0 5
44907: PPUSH
44908: LD_VAR 0 2
44912: PPUSH
44913: LD_VAR 0 3
44917: PPUSH
44918: LD_INT 0
44920: PPUSH
44921: CALL_OW 48
// end ;
44925: LD_VAR 0 5
44929: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44930: LD_INT 0
44932: PPUSH
44933: PPUSH
44934: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44935: LD_ADDR_VAR 0 2
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44958: LD_VAR 0 1
44962: NOT
44963: IFTRUE 44996
44965: PUSH
44966: LD_VAR 0 1
44970: PPUSH
44971: CALL_OW 264
44975: PUSH
44976: LD_INT 12
44978: PUSH
44979: LD_INT 51
44981: PUSH
44982: LD_INT 32
44984: PUSH
44985: LD_INT 89
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: IN
44994: NOT
44995: OR
44996: IFFALSE 45000
// exit ;
44998: GO 45098
// for i := 1 to 3 do
45000: LD_ADDR_VAR 0 3
45004: PUSH
45005: DOUBLE
45006: LD_INT 1
45008: DEC
45009: ST_TO_ADDR
45010: LD_INT 3
45012: PUSH
45013: FOR_TO
45014: IFFALSE 45096
// begin tmp := GetCargo ( cargo , i ) ;
45016: LD_ADDR_VAR 0 4
45020: PUSH
45021: LD_VAR 0 1
45025: PPUSH
45026: LD_VAR 0 3
45030: PPUSH
45031: CALL_OW 289
45035: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45036: LD_ADDR_VAR 0 2
45040: PUSH
45041: LD_VAR 0 2
45045: PPUSH
45046: LD_VAR 0 3
45050: PPUSH
45051: LD_VAR 0 4
45055: PPUSH
45056: CALL_OW 1
45060: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45061: LD_ADDR_VAR 0 2
45065: PUSH
45066: LD_VAR 0 2
45070: PPUSH
45071: LD_INT 4
45073: PPUSH
45074: LD_VAR 0 2
45078: PUSH
45079: LD_INT 4
45081: ARRAY
45082: PUSH
45083: LD_VAR 0 4
45087: PLUS
45088: PPUSH
45089: CALL_OW 1
45093: ST_TO_ADDR
// end ;
45094: GO 45013
45096: POP
45097: POP
// end ;
45098: LD_VAR 0 2
45102: RET
// export function Length ( array ) ; begin
45103: LD_INT 0
45105: PPUSH
// result := array + 0 ;
45106: LD_ADDR_VAR 0 2
45110: PUSH
45111: LD_VAR 0 1
45115: PUSH
45116: LD_INT 0
45118: PLUS
45119: ST_TO_ADDR
// end ;
45120: LD_VAR 0 2
45124: RET
// export function PrepareArray ( array ) ; begin
45125: LD_INT 0
45127: PPUSH
// result := array diff 0 ;
45128: LD_ADDR_VAR 0 2
45132: PUSH
45133: LD_VAR 0 1
45137: PUSH
45138: LD_INT 0
45140: DIFF
45141: ST_TO_ADDR
// if not result [ 1 ] then
45142: LD_VAR 0 2
45146: PUSH
45147: LD_INT 1
45149: ARRAY
45150: NOT
45151: IFFALSE 45171
// result := Delete ( result , 1 ) ;
45153: LD_ADDR_VAR 0 2
45157: PUSH
45158: LD_VAR 0 2
45162: PPUSH
45163: LD_INT 1
45165: PPUSH
45166: CALL_OW 3
45170: ST_TO_ADDR
// end ;
45171: LD_VAR 0 2
45175: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45176: LD_INT 0
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
// sibRocketRange := 25 ;
45182: LD_ADDR_VAR 0 6
45186: PUSH
45187: LD_INT 25
45189: ST_TO_ADDR
// result := false ;
45190: LD_ADDR_VAR 0 4
45194: PUSH
45195: LD_INT 0
45197: ST_TO_ADDR
// for i := 0 to 5 do
45198: LD_ADDR_VAR 0 5
45202: PUSH
45203: DOUBLE
45204: LD_INT 0
45206: DEC
45207: ST_TO_ADDR
45208: LD_INT 5
45210: PUSH
45211: FOR_TO
45212: IFFALSE 45279
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45214: LD_VAR 0 1
45218: PPUSH
45219: LD_VAR 0 5
45223: PPUSH
45224: LD_VAR 0 6
45228: PPUSH
45229: CALL_OW 272
45233: PPUSH
45234: LD_VAR 0 2
45238: PPUSH
45239: LD_VAR 0 5
45243: PPUSH
45244: LD_VAR 0 6
45248: PPUSH
45249: CALL_OW 273
45253: PPUSH
45254: LD_VAR 0 3
45258: PPUSH
45259: CALL_OW 309
45263: IFFALSE 45277
// begin result := true ;
45265: LD_ADDR_VAR 0 4
45269: PUSH
45270: LD_INT 1
45272: ST_TO_ADDR
// exit ;
45273: POP
45274: POP
45275: GO 45281
// end ;
45277: GO 45211
45279: POP
45280: POP
// end ;
45281: LD_VAR 0 4
45285: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45286: LD_INT 0
45288: PPUSH
45289: PPUSH
45290: PPUSH
// if btype = b_depot then
45291: LD_VAR 0 2
45295: PUSH
45296: LD_INT 0
45298: EQUAL
45299: IFFALSE 45311
// begin result := true ;
45301: LD_ADDR_VAR 0 3
45305: PUSH
45306: LD_INT 1
45308: ST_TO_ADDR
// exit ;
45309: GO 45431
// end ; pom := GetBase ( depot ) ;
45311: LD_ADDR_VAR 0 4
45315: PUSH
45316: LD_VAR 0 1
45320: PPUSH
45321: CALL_OW 274
45325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45326: LD_ADDR_VAR 0 5
45330: PUSH
45331: LD_VAR 0 2
45335: PPUSH
45336: LD_VAR 0 1
45340: PPUSH
45341: CALL_OW 248
45345: PPUSH
45346: CALL_OW 450
45350: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45351: LD_ADDR_VAR 0 3
45355: PUSH
45356: LD_VAR 0 4
45360: PPUSH
45361: LD_INT 1
45363: PPUSH
45364: CALL_OW 275
45368: PUSH
45369: LD_VAR 0 5
45373: PUSH
45374: LD_INT 1
45376: ARRAY
45377: GREATEREQUAL
45378: IFFALSE 45404
45380: PUSH
45381: LD_VAR 0 4
45385: PPUSH
45386: LD_INT 2
45388: PPUSH
45389: CALL_OW 275
45393: PUSH
45394: LD_VAR 0 5
45398: PUSH
45399: LD_INT 2
45401: ARRAY
45402: GREATEREQUAL
45403: AND
45404: IFFALSE 45430
45406: PUSH
45407: LD_VAR 0 4
45411: PPUSH
45412: LD_INT 3
45414: PPUSH
45415: CALL_OW 275
45419: PUSH
45420: LD_VAR 0 5
45424: PUSH
45425: LD_INT 3
45427: ARRAY
45428: GREATEREQUAL
45429: AND
45430: ST_TO_ADDR
// end ;
45431: LD_VAR 0 3
45435: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45436: LD_INT 0
45438: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45439: LD_VAR 0 1
45443: PPUSH
45444: LD_VAR 0 2
45448: PPUSH
45449: LD_INT 0
45451: PPUSH
45452: LD_INT 0
45454: PPUSH
45455: LD_INT 1
45457: PPUSH
45458: LD_INT 0
45460: PPUSH
45461: CALL_OW 587
// end ;
45465: LD_VAR 0 3
45469: RET
// export function CenterOnNow ( unit ) ; begin
45470: LD_INT 0
45472: PPUSH
// result := IsInUnit ( unit ) ;
45473: LD_ADDR_VAR 0 2
45477: PUSH
45478: LD_VAR 0 1
45482: PPUSH
45483: CALL_OW 310
45487: ST_TO_ADDR
// if not result then
45488: LD_VAR 0 2
45492: NOT
45493: IFFALSE 45505
// result := unit ;
45495: LD_ADDR_VAR 0 2
45499: PUSH
45500: LD_VAR 0 1
45504: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45505: LD_VAR 0 1
45509: PPUSH
45510: CALL_OW 87
// end ;
45514: LD_VAR 0 2
45518: RET
// export function ComMoveHex ( unit , hex ) ; begin
45519: LD_INT 0
45521: PPUSH
// if not hex then
45522: LD_VAR 0 2
45526: NOT
45527: IFFALSE 45531
// exit ;
45529: GO 45584
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45531: LD_VAR 0 2
45535: PUSH
45536: LD_INT 1
45538: ARRAY
45539: PPUSH
45540: LD_VAR 0 2
45544: PUSH
45545: LD_INT 2
45547: ARRAY
45548: PPUSH
45549: CALL_OW 428
45553: IFFALSE 45557
// exit ;
45555: GO 45584
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45557: LD_VAR 0 1
45561: PPUSH
45562: LD_VAR 0 2
45566: PUSH
45567: LD_INT 1
45569: ARRAY
45570: PPUSH
45571: LD_VAR 0 2
45575: PUSH
45576: LD_INT 2
45578: ARRAY
45579: PPUSH
45580: CALL_OW 111
// end ;
45584: LD_VAR 0 3
45588: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45589: LD_INT 0
45591: PPUSH
45592: PPUSH
45593: PPUSH
// if not unit or not enemy then
45594: LD_VAR 0 1
45598: NOT
45599: IFTRUE 45608
45601: PUSH
45602: LD_VAR 0 2
45606: NOT
45607: OR
45608: IFFALSE 45612
// exit ;
45610: GO 45738
// x := GetX ( enemy ) ;
45612: LD_ADDR_VAR 0 4
45616: PUSH
45617: LD_VAR 0 2
45621: PPUSH
45622: CALL_OW 250
45626: ST_TO_ADDR
// y := GetY ( enemy ) ;
45627: LD_ADDR_VAR 0 5
45631: PUSH
45632: LD_VAR 0 2
45636: PPUSH
45637: CALL_OW 251
45641: ST_TO_ADDR
// if ValidHex ( x , y ) then
45642: LD_VAR 0 4
45646: PPUSH
45647: LD_VAR 0 5
45651: PPUSH
45652: CALL_OW 488
45656: IFFALSE 45738
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45658: LD_VAR 0 2
45662: PPUSH
45663: CALL_OW 247
45667: PUSH
45668: LD_INT 3
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: IN
45678: IFTRUE 45701
45680: PUSH
45681: LD_VAR 0 1
45685: PPUSH
45686: CALL_OW 255
45690: PPUSH
45691: LD_VAR 0 2
45695: PPUSH
45696: CALL_OW 292
45700: OR
45701: IFFALSE 45719
// ComAttackUnit ( unit , enemy ) else
45703: LD_VAR 0 1
45707: PPUSH
45708: LD_VAR 0 2
45712: PPUSH
45713: CALL_OW 115
45717: GO 45738
// ComAgressiveMove ( unit , x , y ) ;
45719: LD_VAR 0 1
45723: PPUSH
45724: LD_VAR 0 4
45728: PPUSH
45729: LD_VAR 0 5
45733: PPUSH
45734: CALL_OW 114
// end ;
45738: LD_VAR 0 3
45742: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45743: LD_INT 0
45745: PPUSH
45746: PPUSH
45747: PPUSH
// list := AreaToList ( area , 0 ) ;
45748: LD_ADDR_VAR 0 5
45752: PUSH
45753: LD_VAR 0 1
45757: PPUSH
45758: LD_INT 0
45760: PPUSH
45761: CALL_OW 517
45765: ST_TO_ADDR
// if not list then
45766: LD_VAR 0 5
45770: NOT
45771: IFFALSE 45775
// exit ;
45773: GO 45905
// if all then
45775: LD_VAR 0 2
45779: IFFALSE 45867
// begin for i := 1 to list [ 1 ] do
45781: LD_ADDR_VAR 0 4
45785: PUSH
45786: DOUBLE
45787: LD_INT 1
45789: DEC
45790: ST_TO_ADDR
45791: LD_VAR 0 5
45795: PUSH
45796: LD_INT 1
45798: ARRAY
45799: PUSH
45800: FOR_TO
45801: IFFALSE 45863
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45803: LD_ADDR_VAR 0 3
45807: PUSH
45808: LD_VAR 0 3
45812: PPUSH
45813: LD_VAR 0 3
45817: PUSH
45818: LD_INT 1
45820: PLUS
45821: PPUSH
45822: LD_VAR 0 5
45826: PUSH
45827: LD_INT 1
45829: ARRAY
45830: PUSH
45831: LD_VAR 0 4
45835: ARRAY
45836: PUSH
45837: LD_VAR 0 5
45841: PUSH
45842: LD_INT 2
45844: ARRAY
45845: PUSH
45846: LD_VAR 0 4
45850: ARRAY
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PPUSH
45856: CALL_OW 1
45860: ST_TO_ADDR
45861: GO 45800
45863: POP
45864: POP
// exit ;
45865: GO 45905
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45867: LD_ADDR_VAR 0 3
45871: PUSH
45872: LD_VAR 0 5
45876: PUSH
45877: LD_INT 1
45879: ARRAY
45880: PUSH
45881: LD_INT 1
45883: ARRAY
45884: PUSH
45885: LD_VAR 0 5
45889: PUSH
45890: LD_INT 2
45892: ARRAY
45893: PUSH
45894: LD_INT 1
45896: ARRAY
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: ST_TO_ADDR
// end ;
45905: LD_VAR 0 3
45909: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45910: LD_INT 0
45912: PPUSH
45913: PPUSH
// list := AreaToList ( area , 0 ) ;
45914: LD_ADDR_VAR 0 4
45918: PUSH
45919: LD_VAR 0 1
45923: PPUSH
45924: LD_INT 0
45926: PPUSH
45927: CALL_OW 517
45931: ST_TO_ADDR
// if not list then
45932: LD_VAR 0 4
45936: NOT
45937: IFFALSE 45941
// exit ;
45939: GO 45982
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45941: LD_ADDR_VAR 0 3
45945: PUSH
45946: LD_VAR 0 4
45950: PUSH
45951: LD_INT 1
45953: ARRAY
45954: PUSH
45955: LD_INT 1
45957: ARRAY
45958: PUSH
45959: LD_VAR 0 4
45963: PUSH
45964: LD_INT 2
45966: ARRAY
45967: PUSH
45968: LD_INT 1
45970: ARRAY
45971: PUSH
45972: LD_VAR 0 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// end ;
45982: LD_VAR 0 3
45986: RET
// export function First ( array ) ; begin
45987: LD_INT 0
45989: PPUSH
// if not array then
45990: LD_VAR 0 1
45994: NOT
45995: IFFALSE 45999
// exit ;
45997: GO 46013
// result := array [ 1 ] ;
45999: LD_ADDR_VAR 0 2
46003: PUSH
46004: LD_VAR 0 1
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: ST_TO_ADDR
// end ;
46013: LD_VAR 0 2
46017: RET
// export function Last ( array ) ; begin
46018: LD_INT 0
46020: PPUSH
// if not array then
46021: LD_VAR 0 1
46025: NOT
46026: IFFALSE 46030
// exit ;
46028: GO 46046
// result := array [ array ] ;
46030: LD_ADDR_VAR 0 2
46034: PUSH
46035: LD_VAR 0 1
46039: PUSH
46040: LD_VAR 0 1
46044: ARRAY
46045: ST_TO_ADDR
// end ;
46046: LD_VAR 0 2
46050: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46051: LD_INT 0
46053: PPUSH
46054: PPUSH
// result := [ ] ;
46055: LD_ADDR_VAR 0 5
46059: PUSH
46060: EMPTY
46061: ST_TO_ADDR
// if not array then
46062: LD_VAR 0 1
46066: NOT
46067: IFFALSE 46071
// exit ;
46069: GO 46183
// for i := 1 to array do
46071: LD_ADDR_VAR 0 6
46075: PUSH
46076: DOUBLE
46077: LD_INT 1
46079: DEC
46080: ST_TO_ADDR
46081: LD_VAR 0 1
46085: PUSH
46086: FOR_TO
46087: IFFALSE 46181
// if array [ i ] [ index ] = value then
46089: LD_VAR 0 1
46093: PUSH
46094: LD_VAR 0 6
46098: ARRAY
46099: PUSH
46100: LD_VAR 0 2
46104: ARRAY
46105: PUSH
46106: LD_VAR 0 3
46110: EQUAL
46111: IFFALSE 46179
// begin if indexColumn then
46113: LD_VAR 0 4
46117: IFFALSE 46153
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46119: LD_ADDR_VAR 0 5
46123: PUSH
46124: LD_VAR 0 5
46128: PPUSH
46129: LD_VAR 0 1
46133: PUSH
46134: LD_VAR 0 6
46138: ARRAY
46139: PUSH
46140: LD_VAR 0 4
46144: ARRAY
46145: PPUSH
46146: CALL 41191 0 2
46150: ST_TO_ADDR
46151: GO 46179
// result := Join ( result , array [ i ] ) ;
46153: LD_ADDR_VAR 0 5
46157: PUSH
46158: LD_VAR 0 5
46162: PPUSH
46163: LD_VAR 0 1
46167: PUSH
46168: LD_VAR 0 6
46172: ARRAY
46173: PPUSH
46174: CALL 41191 0 2
46178: ST_TO_ADDR
// end ;
46179: GO 46086
46181: POP
46182: POP
// end ;
46183: LD_VAR 0 5
46187: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46188: LD_INT 0
46190: PPUSH
// if not vehicles or not parkingPoint then
46191: LD_VAR 0 1
46195: NOT
46196: IFTRUE 46205
46198: PUSH
46199: LD_VAR 0 2
46203: NOT
46204: OR
46205: IFFALSE 46209
// exit ;
46207: GO 46307
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46209: LD_ADDR_VAR 0 1
46213: PUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: LD_INT 50
46221: PUSH
46222: EMPTY
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: LD_INT 92
46230: PUSH
46231: LD_VAR 0 2
46235: PUSH
46236: LD_INT 1
46238: ARRAY
46239: PUSH
46240: LD_VAR 0 2
46244: PUSH
46245: LD_INT 2
46247: ARRAY
46248: PUSH
46249: LD_INT 8
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PPUSH
46266: CALL_OW 72
46270: ST_TO_ADDR
// if not vehicles then
46271: LD_VAR 0 1
46275: NOT
46276: IFFALSE 46280
// exit ;
46278: GO 46307
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46280: LD_VAR 0 1
46284: PPUSH
46285: LD_VAR 0 2
46289: PUSH
46290: LD_INT 1
46292: ARRAY
46293: PPUSH
46294: LD_VAR 0 2
46298: PUSH
46299: LD_INT 2
46301: ARRAY
46302: PPUSH
46303: CALL_OW 111
// end ;
46307: LD_VAR 0 3
46311: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46312: LD_INT 0
46314: PPUSH
46315: PPUSH
46316: PPUSH
// if not side or not area then
46317: LD_VAR 0 1
46321: NOT
46322: IFTRUE 46331
46324: PUSH
46325: LD_VAR 0 2
46329: NOT
46330: OR
46331: IFFALSE 46335
// exit ;
46333: GO 46454
// tmp := AreaToList ( area , 0 ) ;
46335: LD_ADDR_VAR 0 5
46339: PUSH
46340: LD_VAR 0 2
46344: PPUSH
46345: LD_INT 0
46347: PPUSH
46348: CALL_OW 517
46352: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46353: LD_ADDR_VAR 0 4
46357: PUSH
46358: DOUBLE
46359: LD_INT 1
46361: DEC
46362: ST_TO_ADDR
46363: LD_VAR 0 5
46367: PUSH
46368: LD_INT 1
46370: ARRAY
46371: PUSH
46372: FOR_TO
46373: IFFALSE 46452
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46375: LD_VAR 0 5
46379: PUSH
46380: LD_INT 1
46382: ARRAY
46383: PUSH
46384: LD_VAR 0 4
46388: ARRAY
46389: PPUSH
46390: LD_VAR 0 5
46394: PUSH
46395: LD_INT 2
46397: ARRAY
46398: PUSH
46399: LD_VAR 0 4
46403: ARRAY
46404: PPUSH
46405: CALL_OW 351
46409: IFFALSE 46450
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46411: LD_VAR 0 5
46415: PUSH
46416: LD_INT 1
46418: ARRAY
46419: PUSH
46420: LD_VAR 0 4
46424: ARRAY
46425: PPUSH
46426: LD_VAR 0 5
46430: PUSH
46431: LD_INT 2
46433: ARRAY
46434: PUSH
46435: LD_VAR 0 4
46439: ARRAY
46440: PPUSH
46441: LD_VAR 0 1
46445: PPUSH
46446: CALL_OW 244
// end ;
46450: GO 46372
46452: POP
46453: POP
// end ;
46454: LD_VAR 0 3
46458: RET
// export function UniqueArray ( array ) ; var i ; begin
46459: LD_INT 0
46461: PPUSH
46462: PPUSH
// result := [ ] ;
46463: LD_ADDR_VAR 0 2
46467: PUSH
46468: EMPTY
46469: ST_TO_ADDR
// if not array then
46470: LD_VAR 0 1
46474: NOT
46475: IFFALSE 46479
// exit ;
46477: GO 46540
// for i := 1 to array do
46479: LD_ADDR_VAR 0 3
46483: PUSH
46484: DOUBLE
46485: LD_INT 1
46487: DEC
46488: ST_TO_ADDR
46489: LD_VAR 0 1
46493: PUSH
46494: FOR_TO
46495: IFFALSE 46538
// if not array [ i ] in result then
46497: LD_VAR 0 1
46501: PUSH
46502: LD_VAR 0 3
46506: ARRAY
46507: PUSH
46508: LD_VAR 0 2
46512: IN
46513: NOT
46514: IFFALSE 46536
// result := Join ( result , i ) ;
46516: LD_ADDR_VAR 0 2
46520: PUSH
46521: LD_VAR 0 2
46525: PPUSH
46526: LD_VAR 0 3
46530: PPUSH
46531: CALL 41191 0 2
46535: ST_TO_ADDR
46536: GO 46494
46538: POP
46539: POP
// end ; end_of_file
46540: LD_VAR 0 2
46544: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46545: LD_INT 0
46547: PPUSH
46548: PPUSH
// disable ( mpActive ) ;
46549: LD_INT 100
46551: DISABLE_MARKED
// disable ( mpWin ) ;
46552: LD_INT 101
46554: DISABLE_MARKED
// disable ( mpLose ) ;
46555: LD_INT 102
46557: DISABLE_MARKED
// mpGameType := 0 ;
46558: LD_ADDR_EXP 3
46562: PUSH
46563: LD_INT 0
46565: ST_TO_ADDR
// mpGameSettings := [ ] ;
46566: LD_ADDR_EXP 6
46570: PUSH
46571: EMPTY
46572: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46573: LD_ADDR_EXP 4
46577: PUSH
46578: EMPTY
46579: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46580: LD_ADDR_EXP 5
46584: PUSH
46585: EMPTY
46586: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46587: LD_ADDR_EXP 29
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46602: LD_ADDR_EXP 12
46606: PUSH
46607: EMPTY
46608: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46609: LD_ADDR_EXP 13
46613: PUSH
46614: EMPTY
46615: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46616: LD_ADDR_EXP 41
46620: PUSH
46621: EMPTY
46622: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46623: LD_ADDR_EXP 42
46627: PUSH
46628: EMPTY
46629: ST_TO_ADDR
// mpDepots := [ ] ;
46630: LD_ADDR_EXP 14
46634: PUSH
46635: EMPTY
46636: ST_TO_ADDR
// mpBuildings := [ ] ;
46637: LD_ADDR_EXP 17
46641: PUSH
46642: EMPTY
46643: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46644: LD_ADDR_EXP 18
46648: PUSH
46649: EMPTY
46650: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46651: LD_ADDR_EXP 19
46655: PUSH
46656: EMPTY
46657: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46658: LD_ADDR_EXP 20
46662: PUSH
46663: EMPTY
46664: ST_TO_ADDR
// mpStartingResources := [ ] ;
46665: LD_ADDR_EXP 15
46669: PUSH
46670: EMPTY
46671: ST_TO_ADDR
// mpStartPos := [ ] ;
46672: LD_ADDR_EXP 21
46676: PUSH
46677: EMPTY
46678: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46679: LD_ADDR_EXP 22
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46688: LD_ADDR_EXP 23
46692: PUSH
46693: EMPTY
46694: ST_TO_ADDR
// mpApemans := [ ] ;
46695: LD_ADDR_EXP 30
46699: PUSH
46700: EMPTY
46701: ST_TO_ADDR
// mpApemansArea := [ ] ;
46702: LD_ADDR_EXP 31
46706: PUSH
46707: EMPTY
46708: ST_TO_ADDR
// mpRespawn := [ ] ;
46709: LD_ADDR_EXP 33
46713: PUSH
46714: EMPTY
46715: ST_TO_ADDR
// mpKingArea := 0 ;
46716: LD_ADDR_EXP 34
46720: PUSH
46721: LD_INT 0
46723: ST_TO_ADDR
// mpPoints := [ ] ;
46724: LD_ADDR_EXP 35
46728: PUSH
46729: EMPTY
46730: ST_TO_ADDR
// mpVehicles := 0 ;
46731: LD_ADDR_EXP 36
46735: PUSH
46736: LD_INT 0
46738: ST_TO_ADDR
// mpShipments := 0 ;
46739: LD_ADDR_EXP 27
46743: PUSH
46744: LD_INT 0
46746: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46747: LD_ADDR_EXP 40
46751: PUSH
46752: EMPTY
46753: PUSH
46754: EMPTY
46755: PUSH
46756: EMPTY
46757: PUSH
46758: EMPTY
46759: PUSH
46760: EMPTY
46761: PUSH
46762: EMPTY
46763: PUSH
46764: EMPTY
46765: PUSH
46766: EMPTY
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46778: LD_ADDR_EXP 32
46782: PUSH
46783: EMPTY
46784: PUSH
46785: EMPTY
46786: PUSH
46787: EMPTY
46788: PUSH
46789: EMPTY
46790: PUSH
46791: EMPTY
46792: PUSH
46793: EMPTY
46794: PUSH
46795: EMPTY
46796: PUSH
46797: EMPTY
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// mpEmissions := 0 ;
46809: LD_ADDR_EXP 37
46813: PUSH
46814: LD_INT 0
46816: ST_TO_ADDR
// mpTeleports := 0 ;
46817: LD_ADDR_EXP 43
46821: PUSH
46822: LD_INT 0
46824: ST_TO_ADDR
// mpArtifacts := 0 ;
46825: LD_ADDR_EXP 44
46829: PUSH
46830: LD_INT 0
46832: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46833: LD_ADDR_EXP 45
46837: PUSH
46838: LD_INT 0
46840: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46841: LD_ADDR_EXP 25
46845: PUSH
46846: LD_INT 3
46848: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46849: LD_ADDR_EXP 24
46853: PUSH
46854: LD_INT 15
46856: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46857: LD_ADDR_EXP 38
46861: PUSH
46862: LD_INT 0
46864: ST_TO_ADDR
// mpGameActive := false ;
46865: LD_ADDR_EXP 39
46869: PUSH
46870: LD_INT 0
46872: ST_TO_ADDR
// mpBlockRespThread := false ;
46873: LD_ADDR_EXP 46
46877: PUSH
46878: LD_INT 0
46880: ST_TO_ADDR
// for i := 1 to 32 do
46881: LD_ADDR_VAR 0 2
46885: PUSH
46886: DOUBLE
46887: LD_INT 1
46889: DEC
46890: ST_TO_ADDR
46891: LD_INT 32
46893: PUSH
46894: FOR_TO
46895: IFFALSE 46922
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46897: LD_ADDR_EXP 6
46901: PUSH
46902: LD_EXP 6
46906: PPUSH
46907: LD_VAR 0 2
46911: PPUSH
46912: LD_INT 0
46914: PPUSH
46915: CALL_OW 1
46919: ST_TO_ADDR
46920: GO 46894
46922: POP
46923: POP
// end ;
46924: LD_VAR 0 1
46928: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46929: LD_INT 0
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
46935: PPUSH
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
46945: LD_ADDR_VAR 0 14
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: LD_INT 5
46961: PUSH
46962: LD_INT 6
46964: PUSH
46965: LD_INT 7
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// for i in gameTypes do
46976: LD_ADDR_VAR 0 2
46980: PUSH
46981: LD_VAR 0 14
46985: PUSH
46986: FOR_IN
46987: IFFALSE 46996
// disable ( i ) ;
46989: LD_VAR 0 2
46993: DISABLE_MARKED
46994: GO 46986
46996: POP
46997: POP
// if Multiplayer then
46998: LD_OWVAR 4
47002: IFFALSE 47186
// begin mpGameType := mp_game_type ;
47004: LD_ADDR_EXP 3
47008: PUSH
47009: LD_OWVAR 6
47013: ST_TO_ADDR
// your_side := mp_player_side ;
47014: LD_ADDR_OWVAR 2
47018: PUSH
47019: LD_OWVAR 7
47023: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47024: LD_ADDR_EXP 7
47028: PUSH
47029: LD_OWVAR 17
47033: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47034: LD_ADDR_EXP 8
47038: PUSH
47039: LD_OWVAR 15
47043: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47044: LD_ADDR_EXP 9
47048: PUSH
47049: LD_OWVAR 16
47053: ST_TO_ADDR
// mpTeams := mp_teams ;
47054: LD_ADDR_EXP 10
47058: PUSH
47059: LD_OWVAR 12
47063: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47064: LD_ADDR_VAR 0 2
47068: PUSH
47069: DOUBLE
47070: LD_INT 1
47072: DEC
47073: ST_TO_ADDR
47074: LD_EXP 4
47078: PPUSH
47079: CALL 5225 0 1
47083: PUSH
47084: FOR_TO
47085: IFFALSE 47161
// begin setting := mpGameSettingsKeys [ i ] ;
47087: LD_ADDR_VAR 0 12
47091: PUSH
47092: LD_EXP 4
47096: PUSH
47097: LD_VAR 0 2
47101: ARRAY
47102: ST_TO_ADDR
// if setting then
47103: LD_VAR 0 12
47107: IFFALSE 47159
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47109: LD_ADDR_EXP 6
47113: PUSH
47114: LD_EXP 6
47118: PPUSH
47119: LD_VAR 0 2
47123: PPUSH
47124: LD_EXP 5
47128: PUSH
47129: LD_VAR 0 2
47133: ARRAY
47134: PUSH
47135: LD_VAR 0 2
47139: PUSH
47140: LD_INT 1
47142: MINUS
47143: PPUSH
47144: CALL_OW 426
47148: PUSH
47149: LD_INT 1
47151: PLUS
47152: ARRAY
47153: PPUSH
47154: CALL_OW 1
47158: ST_TO_ADDR
// end ;
47159: GO 47084
47161: POP
47162: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47163: LD_ADDR_EXP 11
47167: PUSH
47168: LD_EXP 8
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: DIFF
47179: PUSH
47180: LD_INT 1
47182: GREATER
47183: ST_TO_ADDR
// end else
47184: GO 47186
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47186: LD_EXP 3
47190: PPUSH
47191: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47195: LD_EXP 18
47199: PPUSH
47200: CALL 5225 0 1
47204: IFFALSE 47235
// begin for i in mpMarkedAreas do
47206: LD_ADDR_VAR 0 2
47210: PUSH
47211: LD_EXP 18
47215: PUSH
47216: FOR_IN
47217: IFFALSE 47233
// SetAreaMapShow ( i , 0 ) ;
47219: LD_VAR 0 2
47223: PPUSH
47224: LD_INT 0
47226: PPUSH
47227: CALL_OW 424
47231: GO 47216
47233: POP
47234: POP
// end ; for i := 1 to 8 do
47235: LD_ADDR_VAR 0 2
47239: PUSH
47240: DOUBLE
47241: LD_INT 1
47243: DEC
47244: ST_TO_ADDR
47245: LD_INT 8
47247: PUSH
47248: FOR_TO
47249: IFFALSE 48684
// begin if not mpSidePositions [ i ] then
47251: LD_EXP 7
47255: PUSH
47256: LD_VAR 0 2
47260: ARRAY
47261: NOT
47262: IFFALSE 47266
// continue ;
47264: GO 47248
// side := i ;
47266: LD_ADDR_VAR 0 7
47270: PUSH
47271: LD_VAR 0 2
47275: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47276: LD_ADDR_VAR 0 9
47280: PUSH
47281: LD_EXP 9
47285: PUSH
47286: LD_VAR 0 2
47290: ARRAY
47291: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47292: LD_ADDR_VAR 0 8
47296: PUSH
47297: LD_EXP 7
47301: PUSH
47302: LD_VAR 0 2
47306: ARRAY
47307: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47308: LD_EXP 12
47312: PPUSH
47313: CALL 5225 0 1
47317: IFFALSE 47394
// begin for j in mpOilDeposits [ pos ] do
47319: LD_ADDR_VAR 0 3
47323: PUSH
47324: LD_EXP 12
47328: PUSH
47329: LD_VAR 0 8
47333: ARRAY
47334: PUSH
47335: FOR_IN
47336: IFFALSE 47392
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47338: LD_VAR 0 3
47342: PUSH
47343: LD_INT 1
47345: ARRAY
47346: PPUSH
47347: LD_VAR 0 3
47351: PUSH
47352: LD_INT 2
47354: ARRAY
47355: PPUSH
47356: LD_INT 2
47358: PPUSH
47359: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47363: LD_VAR 0 3
47367: PUSH
47368: LD_INT 1
47370: ARRAY
47371: PPUSH
47372: LD_VAR 0 3
47376: PUSH
47377: LD_INT 2
47379: ARRAY
47380: PPUSH
47381: LD_VAR 0 7
47385: PPUSH
47386: CALL_OW 441
// end ;
47390: GO 47335
47392: POP
47393: POP
// end ; if Count ( mpSibDeposits ) then
47394: LD_EXP 13
47398: PPUSH
47399: CALL 5225 0 1
47403: IFFALSE 47480
// begin for j in mpSibDeposits [ pos ] do
47405: LD_ADDR_VAR 0 3
47409: PUSH
47410: LD_EXP 13
47414: PUSH
47415: LD_VAR 0 8
47419: ARRAY
47420: PUSH
47421: FOR_IN
47422: IFFALSE 47478
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47424: LD_VAR 0 3
47428: PUSH
47429: LD_INT 1
47431: ARRAY
47432: PPUSH
47433: LD_VAR 0 3
47437: PUSH
47438: LD_INT 2
47440: ARRAY
47441: PPUSH
47442: LD_INT 3
47444: PPUSH
47445: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47449: LD_VAR 0 3
47453: PUSH
47454: LD_INT 1
47456: ARRAY
47457: PPUSH
47458: LD_VAR 0 3
47462: PUSH
47463: LD_INT 2
47465: ARRAY
47466: PPUSH
47467: LD_VAR 0 7
47471: PPUSH
47472: CALL_OW 441
// end ;
47476: GO 47421
47478: POP
47479: POP
// end ; InitBc ;
47480: CALL_OW 21
// InitUc ;
47484: CALL_OW 18
// uc_side := side ;
47488: LD_ADDR_OWVAR 20
47492: PUSH
47493: LD_VAR 0 7
47497: ST_TO_ADDR
// uc_nation := nation ;
47498: LD_ADDR_OWVAR 21
47502: PUSH
47503: LD_VAR 0 9
47507: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47508: LD_EXP 22
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: GREATER
47517: IFFALSE 47676
// begin x := mpStartPos [ pos ] [ 1 ] ;
47519: LD_ADDR_VAR 0 5
47523: PUSH
47524: LD_EXP 21
47528: PUSH
47529: LD_VAR 0 8
47533: ARRAY
47534: PUSH
47535: LD_INT 1
47537: ARRAY
47538: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47539: LD_ADDR_VAR 0 6
47543: PUSH
47544: LD_EXP 21
47548: PUSH
47549: LD_VAR 0 8
47553: ARRAY
47554: PUSH
47555: LD_INT 2
47557: ARRAY
47558: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47559: LD_VAR 0 5
47563: PPUSH
47564: LD_VAR 0 6
47568: PPUSH
47569: LD_INT 12
47571: PPUSH
47572: LD_INT 2
47574: PPUSH
47575: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47579: LD_ADDR_EXP 23
47583: PUSH
47584: LD_EXP 23
47588: PPUSH
47589: LD_VAR 0 7
47593: PPUSH
47594: LD_VAR 0 7
47598: PPUSH
47599: LD_VAR 0 5
47603: PPUSH
47604: LD_VAR 0 6
47608: PPUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 100
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 70
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: LD_INT 40
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 10
47641: PUSH
47642: LD_INT 25
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 20
47651: PUSH
47652: LD_INT 100
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: PPUSH
47666: CALL_OW 418
47670: PPUSH
47671: CALL_OW 1
47675: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47676: LD_EXP 14
47680: PPUSH
47681: CALL 5225 0 1
47685: IFFALSE 47880
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
47687: LD_EXP 3
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 6
47697: PUSH
47698: LD_INT 7
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: IN
47706: IFFALSE 47726
// begin bc_level := 10 ;
47708: LD_ADDR_OWVAR 43
47712: PUSH
47713: LD_INT 10
47715: ST_TO_ADDR
// bc_type := b_warehouse ;
47716: LD_ADDR_OWVAR 42
47720: PUSH
47721: LD_INT 1
47723: ST_TO_ADDR
// end else
47724: GO 47742
// begin bc_level := 0 ;
47726: LD_ADDR_OWVAR 43
47730: PUSH
47731: LD_INT 0
47733: ST_TO_ADDR
// bc_type := b_depot ;
47734: LD_ADDR_OWVAR 42
47738: PUSH
47739: LD_INT 0
47741: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47742: LD_ADDR_VAR 0 4
47746: PUSH
47747: LD_EXP 14
47751: PUSH
47752: LD_VAR 0 8
47756: ARRAY
47757: PUSH
47758: LD_INT 1
47760: ARRAY
47761: PPUSH
47762: LD_EXP 14
47766: PUSH
47767: LD_VAR 0 8
47771: ARRAY
47772: PUSH
47773: LD_INT 2
47775: ARRAY
47776: PPUSH
47777: LD_EXP 14
47781: PUSH
47782: LD_VAR 0 8
47786: ARRAY
47787: PUSH
47788: LD_INT 3
47790: ARRAY
47791: PPUSH
47792: CALL_OW 47
47796: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47797: LD_VAR 0 4
47801: PPUSH
47802: LD_STRING @
47804: PUSH
47805: LD_VAR 0 7
47809: STR
47810: PPUSH
47811: CALL_OW 500
// if Count ( mpStartingResources ) then
47815: LD_EXP 15
47819: PPUSH
47820: CALL 5225 0 1
47824: IFFALSE 47878
// begin for j := 1 to mpStartingResources do
47826: LD_ADDR_VAR 0 3
47830: PUSH
47831: DOUBLE
47832: LD_INT 1
47834: DEC
47835: ST_TO_ADDR
47836: LD_EXP 15
47840: PUSH
47841: FOR_TO
47842: IFFALSE 47876
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47844: LD_VAR 0 4
47848: PPUSH
47849: CALL_OW 274
47853: PPUSH
47854: LD_VAR 0 3
47858: PPUSH
47859: LD_EXP 15
47863: PUSH
47864: LD_VAR 0 3
47868: ARRAY
47869: PPUSH
47870: CALL_OW 277
47874: GO 47841
47876: POP
47877: POP
// end ; end else
47878: GO 48087
// if Count ( mpStartingResources ) then
47880: LD_EXP 15
47884: PPUSH
47885: CALL 5225 0 1
47889: IFFALSE 48087
// begin x := mpStartPos [ pos ] [ 1 ] ;
47891: LD_ADDR_VAR 0 5
47895: PUSH
47896: LD_EXP 21
47900: PUSH
47901: LD_VAR 0 8
47905: ARRAY
47906: PUSH
47907: LD_INT 1
47909: ARRAY
47910: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47911: LD_ADDR_VAR 0 6
47915: PUSH
47916: LD_EXP 21
47920: PUSH
47921: LD_VAR 0 8
47925: ARRAY
47926: PUSH
47927: LD_INT 2
47929: ARRAY
47930: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47931: LD_ADDR_VAR 0 3
47935: PUSH
47936: DOUBLE
47937: LD_INT 1
47939: DEC
47940: ST_TO_ADDR
47941: LD_EXP 15
47945: PUSH
47946: FOR_TO
47947: IFFALSE 48085
// begin resources := mpStartingResources [ j ] ;
47949: LD_ADDR_VAR 0 13
47953: PUSH
47954: LD_EXP 15
47958: PUSH
47959: LD_VAR 0 3
47963: ARRAY
47964: ST_TO_ADDR
// if resources = 0 then
47965: LD_VAR 0 13
47969: PUSH
47970: LD_INT 0
47972: EQUAL
47973: IFFALSE 47977
// continue ;
47975: GO 47946
// repeat if resources >= 50 then
47977: LD_VAR 0 13
47981: PUSH
47982: LD_INT 50
47984: GREATEREQUAL
47985: IFFALSE 48031
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47987: LD_VAR 0 3
47991: PPUSH
47992: LD_INT 5
47994: PPUSH
47995: LD_VAR 0 5
47999: PPUSH
48000: LD_VAR 0 6
48004: PPUSH
48005: LD_INT 6
48007: PPUSH
48008: LD_INT 0
48010: PPUSH
48011: CALL_OW 60
// resources := resources - 50 ;
48015: LD_ADDR_VAR 0 13
48019: PUSH
48020: LD_VAR 0 13
48024: PUSH
48025: LD_INT 50
48027: MINUS
48028: ST_TO_ADDR
// end else
48029: GO 48073
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48031: LD_VAR 0 3
48035: PPUSH
48036: LD_VAR 0 13
48040: PUSH
48041: LD_INT 10
48043: DIV
48044: PPUSH
48045: LD_VAR 0 5
48049: PPUSH
48050: LD_VAR 0 6
48054: PPUSH
48055: LD_INT 6
48057: PPUSH
48058: LD_INT 0
48060: PPUSH
48061: CALL_OW 60
// resources := 0 ;
48065: LD_ADDR_VAR 0 13
48069: PUSH
48070: LD_INT 0
48072: ST_TO_ADDR
// end ; until resources <= 0 ;
48073: LD_VAR 0 13
48077: PUSH
48078: LD_INT 0
48080: LESSEQUAL
48081: IFFALSE 47977
// end ;
48083: GO 47946
48085: POP
48086: POP
// end ; if Count ( mpBuildings ) then
48087: LD_EXP 17
48091: PPUSH
48092: CALL 5225 0 1
48096: IFFALSE 48174
// begin for j in mpBuildings [ pos ] do
48098: LD_ADDR_VAR 0 3
48102: PUSH
48103: LD_EXP 17
48107: PUSH
48108: LD_VAR 0 8
48112: ARRAY
48113: PUSH
48114: FOR_IN
48115: IFFALSE 48172
// begin bc_level := 0 ;
48117: LD_ADDR_OWVAR 43
48121: PUSH
48122: LD_INT 0
48124: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48125: LD_ADDR_OWVAR 42
48129: PUSH
48130: LD_VAR 0 3
48134: PUSH
48135: LD_INT 1
48137: ARRAY
48138: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48139: LD_VAR 0 3
48143: PUSH
48144: LD_INT 2
48146: ARRAY
48147: PPUSH
48148: LD_VAR 0 3
48152: PUSH
48153: LD_INT 3
48155: ARRAY
48156: PPUSH
48157: LD_VAR 0 3
48161: PUSH
48162: LD_INT 4
48164: ARRAY
48165: PPUSH
48166: CALL_OW 47
// end ;
48170: GO 48114
48172: POP
48173: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48174: LD_EXP 26
48178: IFFALSE 48198
48180: PUSH
48181: LD_INT 20
48183: PPUSH
48184: LD_VAR 0 7
48188: PPUSH
48189: CALL_OW 321
48193: PUSH
48194: LD_INT 1
48196: EQUAL
48197: AND
48198: IFFALSE 48215
// SetTech ( tech_SibDet , side , state_researched ) ;
48200: LD_INT 20
48202: PPUSH
48203: LD_VAR 0 7
48207: PPUSH
48208: LD_INT 2
48210: PPUSH
48211: CALL_OW 322
// if not mpArtifacts then
48215: LD_EXP 44
48219: NOT
48220: IFFALSE 48237
// SetTech ( tech_artifact , side , state_disabled ) ;
48222: LD_INT 24
48224: PPUSH
48225: LD_VAR 0 7
48229: PPUSH
48230: LD_INT 0
48232: PPUSH
48233: CALL_OW 322
// if mpSibBomb = 1 then
48237: LD_EXP 28
48241: PUSH
48242: LD_INT 1
48244: EQUAL
48245: IFFALSE 48264
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48247: LD_INT 25
48249: PPUSH
48250: LD_VAR 0 7
48254: PPUSH
48255: LD_INT 1
48257: PPUSH
48258: CALL_OW 322
// end else
48262: GO 48279
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48264: LD_INT 25
48266: PPUSH
48267: LD_VAR 0 7
48271: PPUSH
48272: LD_INT 0
48274: PPUSH
48275: CALL_OW 322
// end ; if mpVehicles then
48279: LD_EXP 36
48283: IFFALSE 48382
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48285: LD_ADDR_VAR 0 3
48289: PUSH
48290: LD_VAR 0 7
48294: PPUSH
48295: LD_VAR 0 9
48299: PPUSH
48300: LD_EXP 36
48304: PPUSH
48305: CALL 49605 0 3
48309: PUSH
48310: FOR_IN
48311: IFFALSE 48380
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48313: LD_VAR 0 3
48317: PPUSH
48318: LD_INT 0
48320: PPUSH
48321: LD_INT 5
48323: PPUSH
48324: CALL_OW 12
48328: PPUSH
48329: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48333: LD_VAR 0 3
48337: PPUSH
48338: LD_EXP 21
48342: PUSH
48343: LD_VAR 0 8
48347: ARRAY
48348: PUSH
48349: LD_INT 1
48351: ARRAY
48352: PPUSH
48353: LD_EXP 21
48357: PUSH
48358: LD_VAR 0 8
48362: ARRAY
48363: PUSH
48364: LD_INT 2
48366: ARRAY
48367: PPUSH
48368: LD_INT 12
48370: PPUSH
48371: LD_INT 0
48373: PPUSH
48374: CALL_OW 50
// end ;
48378: GO 48310
48380: POP
48381: POP
// end ; uc_nation := nation ;
48382: LD_ADDR_OWVAR 21
48386: PUSH
48387: LD_VAR 0 9
48391: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48392: LD_EXP 3
48396: PUSH
48397: LD_INT 6
48399: PUSH
48400: LD_INT 7
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: IN
48407: IFFALSE 48432
48409: PUSH
48410: LD_EXP 7
48414: PUSH
48415: LD_VAR 0 2
48419: ARRAY
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: IN
48431: AND
48432: IFFALSE 48480
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48434: LD_ADDR_VAR 0 11
48438: PUSH
48439: LD_VAR 0 7
48443: PPUSH
48444: LD_VAR 0 9
48448: PPUSH
48449: LD_EXP 24
48453: PUSH
48454: LD_EXP 24
48458: PUSH
48459: LD_INT 2
48461: DIV
48462: PLUS
48463: PPUSH
48464: LD_EXP 25
48468: PUSH
48469: LD_INT 1
48471: PLUS
48472: PPUSH
48473: CALL 49096 0 4
48477: ST_TO_ADDR
48478: GO 48510
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48480: LD_ADDR_VAR 0 11
48484: PUSH
48485: LD_VAR 0 7
48489: PPUSH
48490: LD_VAR 0 9
48494: PPUSH
48495: LD_EXP 24
48499: PPUSH
48500: LD_EXP 25
48504: PPUSH
48505: CALL 49096 0 4
48509: ST_TO_ADDR
// for j in team do
48510: LD_ADDR_VAR 0 3
48514: PUSH
48515: LD_VAR 0 11
48519: PUSH
48520: FOR_IN
48521: IFFALSE 48570
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48523: LD_VAR 0 3
48527: PPUSH
48528: LD_EXP 21
48532: PUSH
48533: LD_VAR 0 8
48537: ARRAY
48538: PUSH
48539: LD_INT 1
48541: ARRAY
48542: PPUSH
48543: LD_EXP 21
48547: PUSH
48548: LD_VAR 0 8
48552: ARRAY
48553: PUSH
48554: LD_INT 2
48556: ARRAY
48557: PPUSH
48558: LD_INT 12
48560: PPUSH
48561: LD_INT 0
48563: PPUSH
48564: CALL_OW 50
48568: GO 48520
48570: POP
48571: POP
// if mpApemans then
48572: LD_EXP 30
48576: IFFALSE 48682
// begin for j := 1 to mpApemans do
48578: LD_ADDR_VAR 0 3
48582: PUSH
48583: DOUBLE
48584: LD_INT 1
48586: DEC
48587: ST_TO_ADDR
48588: LD_EXP 30
48592: PUSH
48593: FOR_TO
48594: IFFALSE 48680
// begin PrepareApeman ( - 5 ) ;
48596: LD_INT 5
48598: NEG
48599: PPUSH
48600: CALL 37318 0 1
// ape := CreateHuman ;
48604: LD_ADDR_VAR 0 10
48608: PUSH
48609: CALL_OW 44
48613: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48614: LD_ADDR_EXP 32
48618: PUSH
48619: LD_EXP 32
48623: PPUSH
48624: LD_VAR 0 8
48628: PPUSH
48629: LD_EXP 32
48633: PUSH
48634: LD_VAR 0 8
48638: ARRAY
48639: PPUSH
48640: LD_VAR 0 10
48644: PPUSH
48645: CALL 41191 0 2
48649: PPUSH
48650: CALL_OW 1
48654: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48655: LD_VAR 0 10
48659: PPUSH
48660: LD_EXP 31
48664: PUSH
48665: LD_VAR 0 8
48669: ARRAY
48670: PPUSH
48671: LD_INT 0
48673: PPUSH
48674: CALL_OW 49
// end ;
48678: GO 48593
48680: POP
48681: POP
// end ; end ;
48682: GO 47248
48684: POP
48685: POP
// if not mpTeamGame then
48686: LD_EXP 11
48690: NOT
48691: IFFALSE 48789
// begin for i := 1 to 8 do
48693: LD_ADDR_VAR 0 2
48697: PUSH
48698: DOUBLE
48699: LD_INT 1
48701: DEC
48702: ST_TO_ADDR
48703: LD_INT 8
48705: PUSH
48706: FOR_TO
48707: IFFALSE 48785
// for j := 1 to 8 do
48709: LD_ADDR_VAR 0 3
48713: PUSH
48714: DOUBLE
48715: LD_INT 1
48717: DEC
48718: ST_TO_ADDR
48719: LD_INT 8
48721: PUSH
48722: FOR_TO
48723: IFFALSE 48781
// if i <> j then
48725: LD_VAR 0 2
48729: PUSH
48730: LD_VAR 0 3
48734: NONEQUAL
48735: IFFALSE 48759
// SetAttitude ( i , j , att_neutral , true ) else
48737: LD_VAR 0 2
48741: PPUSH
48742: LD_VAR 0 3
48746: PPUSH
48747: LD_INT 0
48749: PPUSH
48750: LD_INT 1
48752: PPUSH
48753: CALL_OW 80
48757: GO 48779
// SetAttitude ( i , j , att_friend , true ) ;
48759: LD_VAR 0 2
48763: PPUSH
48764: LD_VAR 0 3
48768: PPUSH
48769: LD_INT 1
48771: PPUSH
48772: LD_INT 1
48774: PPUSH
48775: CALL_OW 80
48779: GO 48722
48781: POP
48782: POP
48783: GO 48706
48785: POP
48786: POP
// end else
48787: GO 48964
// begin if mpSharedVision then
48789: LD_EXP 16
48793: IFFALSE 48858
// begin for i in mpTeams do
48795: LD_ADDR_VAR 0 2
48799: PUSH
48800: LD_EXP 10
48804: PUSH
48805: FOR_IN
48806: IFFALSE 48856
// for j := 2 to i do
48808: LD_ADDR_VAR 0 3
48812: PUSH
48813: DOUBLE
48814: LD_INT 2
48816: DEC
48817: ST_TO_ADDR
48818: LD_VAR 0 2
48822: PUSH
48823: FOR_TO
48824: IFFALSE 48852
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48826: LD_VAR 0 2
48830: PUSH
48831: LD_VAR 0 3
48835: ARRAY
48836: PPUSH
48837: LD_VAR 0 2
48841: PUSH
48842: LD_INT 1
48844: ARRAY
48845: PPUSH
48846: CALL_OW 343
48850: GO 48823
48852: POP
48853: POP
48854: GO 48805
48856: POP
48857: POP
// end ; for i := 1 to 8 do
48858: LD_ADDR_VAR 0 2
48862: PUSH
48863: DOUBLE
48864: LD_INT 1
48866: DEC
48867: ST_TO_ADDR
48868: LD_INT 8
48870: PUSH
48871: FOR_TO
48872: IFFALSE 48962
// for j := 1 to 8 do
48874: LD_ADDR_VAR 0 3
48878: PUSH
48879: DOUBLE
48880: LD_INT 1
48882: DEC
48883: ST_TO_ADDR
48884: LD_INT 8
48886: PUSH
48887: FOR_TO
48888: IFFALSE 48958
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48890: LD_EXP 8
48894: PUSH
48895: LD_VAR 0 2
48899: ARRAY
48900: PUSH
48901: LD_EXP 8
48905: PUSH
48906: LD_VAR 0 3
48910: ARRAY
48911: EQUAL
48912: IFFALSE 48936
// SetAttitude ( i , j , att_friend , true ) else
48914: LD_VAR 0 2
48918: PPUSH
48919: LD_VAR 0 3
48923: PPUSH
48924: LD_INT 1
48926: PPUSH
48927: LD_INT 1
48929: PPUSH
48930: CALL_OW 80
48934: GO 48956
// SetAttitude ( i , j , att_enemy , true ) ;
48936: LD_VAR 0 2
48940: PPUSH
48941: LD_VAR 0 3
48945: PPUSH
48946: LD_INT 2
48948: PPUSH
48949: LD_INT 1
48951: PPUSH
48952: CALL_OW 80
48956: GO 48887
48958: POP
48959: POP
48960: GO 48871
48962: POP
48963: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48964: LD_ADDR_OWVAR 71
48968: PUSH
48969: LD_EXP 9
48973: PUSH
48974: LD_OWVAR 2
48978: ARRAY
48979: ST_TO_ADDR
// if IAmSpec then
48980: CALL_OW 531
48984: IFFALSE 49025
// begin FogOff ( true ) ;
48986: LD_INT 1
48988: PPUSH
48989: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48993: LD_EXP 29
48997: PUSH
48998: LD_INT 1
49000: ARRAY
49001: PUSH
49002: LD_INT 2
49004: DIV
49005: PPUSH
49006: LD_EXP 29
49010: PUSH
49011: LD_INT 2
49013: ARRAY
49014: PUSH
49015: LD_INT 2
49017: DIV
49018: PPUSH
49019: CALL_OW 86
// end else
49023: GO 49071
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49025: LD_EXP 21
49029: PUSH
49030: LD_EXP 7
49034: PUSH
49035: LD_OWVAR 2
49039: ARRAY
49040: ARRAY
49041: PUSH
49042: LD_INT 1
49044: ARRAY
49045: PPUSH
49046: LD_EXP 21
49050: PUSH
49051: LD_EXP 7
49055: PUSH
49056: LD_OWVAR 2
49060: ARRAY
49061: ARRAY
49062: PUSH
49063: LD_INT 2
49065: ARRAY
49066: PPUSH
49067: CALL_OW 86
// end ; BeginBuildUp ;
49071: CALL 50138 0 0
// enable ( mpActive ) ;
49075: LD_INT 100
49077: ENABLE_MARKED
// enable ( mpGameType ) ;
49078: LD_EXP 3
49082: ENABLE_MARKED
// mpGameActive := true ;
49083: LD_ADDR_EXP 39
49087: PUSH
49088: LD_INT 1
49090: ST_TO_ADDR
// end ;
49091: LD_VAR 0 1
49095: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49096: LD_INT 0
49098: PPUSH
49099: PPUSH
49100: PPUSH
49101: PPUSH
// result := [ ] ;
49102: LD_ADDR_VAR 0 5
49106: PUSH
49107: EMPTY
49108: ST_TO_ADDR
// class := class_soldier ;
49109: LD_ADDR_VAR 0 8
49113: PUSH
49114: LD_INT 1
49116: ST_TO_ADDR
// uc_side := side ;
49117: LD_ADDR_OWVAR 20
49121: PUSH
49122: LD_VAR 0 1
49126: ST_TO_ADDR
// uc_nation := nation ;
49127: LD_ADDR_OWVAR 21
49131: PUSH
49132: LD_VAR 0 2
49136: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49137: LD_ADDR_OWVAR 26
49141: PUSH
49142: LD_OWVAR 19
49146: PUSH
49147: LD_VAR 0 1
49151: ARRAY
49152: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49153: LD_INT 1
49155: PPUSH
49156: LD_INT 2
49158: PPUSH
49159: CALL_OW 12
49163: PPUSH
49164: LD_VAR 0 8
49168: PPUSH
49169: LD_VAR 0 4
49173: PUSH
49174: LD_INT 2
49176: PLUS
49177: PPUSH
49178: CALL_OW 380
// hc_importance := 105 ;
49182: LD_ADDR_OWVAR 32
49186: PUSH
49187: LD_INT 105
49189: ST_TO_ADDR
// if Multiplayer then
49190: LD_OWVAR 4
49194: IFFALSE 49234
// begin hc_gallery := MULTIAVATARS ;
49196: LD_ADDR_OWVAR 33
49200: PUSH
49201: LD_STRING MULTIAVATARS
49203: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49204: LD_ADDR_OWVAR 34
49208: PUSH
49209: LD_VAR 0 1
49213: PPUSH
49214: CALL_OW 525
49218: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49219: LD_ADDR_OWVAR 27
49223: PUSH
49224: LD_VAR 0 1
49228: PPUSH
49229: CALL_OW 526
49233: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49234: LD_ADDR_VAR 0 5
49238: PUSH
49239: LD_VAR 0 5
49243: PPUSH
49244: CALL_OW 44
49248: PPUSH
49249: CALL 41191 0 2
49253: ST_TO_ADDR
// if mpTeamPreset then
49254: LD_LOC 1
49258: IFFALSE 49354
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49260: LD_LOC 1
49264: PUSH
49265: LD_INT 1
49267: ARRAY
49268: PPUSH
49269: LD_VAR 0 5
49273: PUSH
49274: LD_VAR 0 5
49278: ARRAY
49279: PPUSH
49280: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49284: LD_VAR 0 5
49288: PUSH
49289: LD_VAR 0 5
49293: ARRAY
49294: PPUSH
49295: LD_INT 1
49297: PPUSH
49298: LD_LOC 1
49302: PUSH
49303: LD_INT 1
49305: ARRAY
49306: PPUSH
49307: LD_INT 1
49309: PPUSH
49310: CALL_OW 260
49314: PPUSH
49315: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49319: LD_VAR 0 5
49323: PUSH
49324: LD_VAR 0 5
49328: ARRAY
49329: PPUSH
49330: LD_INT 2
49332: PPUSH
49333: LD_LOC 1
49337: PUSH
49338: LD_INT 1
49340: ARRAY
49341: PPUSH
49342: LD_INT 2
49344: PPUSH
49345: CALL_OW 260
49349: PPUSH
49350: CALL_OW 239
// end ; InitHc_All ( ) ;
49354: CALL_OW 584
// class := 2 ;
49358: LD_ADDR_VAR 0 8
49362: PUSH
49363: LD_INT 2
49365: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49366: LD_ADDR_VAR 0 6
49370: PUSH
49371: DOUBLE
49372: LD_INT 1
49374: DEC
49375: ST_TO_ADDR
49376: LD_VAR 0 3
49380: PUSH
49381: LD_INT 1
49383: MINUS
49384: PUSH
49385: FOR_TO
49386: IFFALSE 49581
// begin PrepareHuman ( false , class , skill ) ;
49388: LD_INT 0
49390: PPUSH
49391: LD_VAR 0 8
49395: PPUSH
49396: LD_VAR 0 4
49400: PPUSH
49401: CALL_OW 380
// un := CreateHuman ;
49405: LD_ADDR_VAR 0 7
49409: PUSH
49410: CALL_OW 44
49414: ST_TO_ADDR
// result := Join ( result , un ) ;
49415: LD_ADDR_VAR 0 5
49419: PUSH
49420: LD_VAR 0 5
49424: PPUSH
49425: LD_VAR 0 7
49429: PPUSH
49430: CALL 41191 0 2
49434: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49435: LD_LOC 1
49439: PPUSH
49440: CALL 5225 0 1
49444: PUSH
49445: LD_VAR 0 3
49449: GREATEREQUAL
49450: IFFALSE 49546
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49452: LD_LOC 1
49456: PUSH
49457: LD_VAR 0 6
49461: PUSH
49462: LD_INT 1
49464: PLUS
49465: ARRAY
49466: PPUSH
49467: LD_VAR 0 7
49471: PPUSH
49472: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49476: LD_VAR 0 7
49480: PPUSH
49481: LD_INT 1
49483: PPUSH
49484: LD_LOC 1
49488: PUSH
49489: LD_VAR 0 6
49493: PUSH
49494: LD_INT 1
49496: PLUS
49497: ARRAY
49498: PPUSH
49499: LD_INT 1
49501: PPUSH
49502: CALL_OW 260
49506: PPUSH
49507: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49511: LD_VAR 0 7
49515: PPUSH
49516: LD_INT 2
49518: PPUSH
49519: LD_LOC 1
49523: PUSH
49524: LD_VAR 0 6
49528: PUSH
49529: LD_INT 1
49531: PLUS
49532: ARRAY
49533: PPUSH
49534: LD_INT 2
49536: PPUSH
49537: CALL_OW 260
49541: PPUSH
49542: CALL_OW 239
// end ; class := Inc ( class ) ;
49546: LD_ADDR_VAR 0 8
49550: PUSH
49551: LD_VAR 0 8
49555: PPUSH
49556: CALL 42564 0 1
49560: ST_TO_ADDR
// if class = 5 then
49561: LD_VAR 0 8
49565: PUSH
49566: LD_INT 5
49568: EQUAL
49569: IFFALSE 49579
// class := 1 ;
49571: LD_ADDR_VAR 0 8
49575: PUSH
49576: LD_INT 1
49578: ST_TO_ADDR
// end ;
49579: GO 49385
49581: POP
49582: POP
// if not mpTeamPreset then
49583: LD_LOC 1
49587: NOT
49588: IFFALSE 49600
// mpTeamPreset := result ;
49590: LD_ADDR_LOC 1
49594: PUSH
49595: LD_VAR 0 5
49599: ST_TO_ADDR
// end ;
49600: LD_VAR 0 5
49604: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49605: LD_INT 0
49607: PPUSH
49608: PPUSH
// result := [ ] ;
49609: LD_ADDR_VAR 0 4
49613: PUSH
49614: EMPTY
49615: ST_TO_ADDR
// if not vehicles then
49616: LD_VAR 0 3
49620: NOT
49621: IFFALSE 49625
// exit ;
49623: GO 49839
// for i := 1 to vehicles [ nation ] do
49625: LD_ADDR_VAR 0 5
49629: PUSH
49630: DOUBLE
49631: LD_INT 1
49633: DEC
49634: ST_TO_ADDR
49635: LD_VAR 0 3
49639: PUSH
49640: LD_VAR 0 2
49644: ARRAY
49645: PUSH
49646: FOR_TO
49647: IFFALSE 49837
// begin uc_side := side ;
49649: LD_ADDR_OWVAR 20
49653: PUSH
49654: LD_VAR 0 1
49658: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49659: LD_VAR 0 3
49663: PUSH
49664: LD_VAR 0 2
49668: ARRAY
49669: PUSH
49670: LD_VAR 0 5
49674: ARRAY
49675: PPUSH
49676: CALL 5225 0 1
49680: PUSH
49681: LD_INT 4
49683: GREATER
49684: IFFALSE 49714
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49686: LD_ADDR_OWVAR 21
49690: PUSH
49691: LD_VAR 0 3
49695: PUSH
49696: LD_VAR 0 2
49700: ARRAY
49701: PUSH
49702: LD_VAR 0 5
49706: ARRAY
49707: PUSH
49708: LD_INT 5
49710: ARRAY
49711: ST_TO_ADDR
49712: GO 49724
// uc_nation := nation ;
49714: LD_ADDR_OWVAR 21
49718: PUSH
49719: LD_VAR 0 2
49723: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49724: LD_VAR 0 3
49728: PUSH
49729: LD_VAR 0 2
49733: ARRAY
49734: PUSH
49735: LD_VAR 0 5
49739: ARRAY
49740: PUSH
49741: LD_INT 1
49743: ARRAY
49744: PPUSH
49745: LD_VAR 0 3
49749: PUSH
49750: LD_VAR 0 2
49754: ARRAY
49755: PUSH
49756: LD_VAR 0 5
49760: ARRAY
49761: PUSH
49762: LD_INT 2
49764: ARRAY
49765: PPUSH
49766: LD_VAR 0 3
49770: PUSH
49771: LD_VAR 0 2
49775: ARRAY
49776: PUSH
49777: LD_VAR 0 5
49781: ARRAY
49782: PUSH
49783: LD_INT 3
49785: ARRAY
49786: PPUSH
49787: LD_VAR 0 3
49791: PUSH
49792: LD_VAR 0 2
49796: ARRAY
49797: PUSH
49798: LD_VAR 0 5
49802: ARRAY
49803: PUSH
49804: LD_INT 4
49806: ARRAY
49807: PPUSH
49808: LD_INT 80
49810: PPUSH
49811: CALL 8021 0 5
// result := Join ( result , CreateVehicle ) ;
49815: LD_ADDR_VAR 0 4
49819: PUSH
49820: LD_VAR 0 4
49824: PPUSH
49825: CALL_OW 45
49829: PPUSH
49830: CALL 41191 0 2
49834: ST_TO_ADDR
// end ;
49835: GO 49646
49837: POP
49838: POP
// end ;
49839: LD_VAR 0 4
49843: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49844: LD_INT 0
49846: PPUSH
49847: PPUSH
// for i in mpBattleFlags do
49848: LD_ADDR_VAR 0 3
49852: PUSH
49853: LD_EXP 23
49857: PUSH
49858: FOR_IN
49859: IFFALSE 49936
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49861: LD_VAR 0 3
49865: PPUSH
49866: LD_INT 1
49868: PUSH
49869: LD_VAR 0 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_VAR 0 1
49885: PUSH
49886: LD_REAL  7.00000000000000E-0001
49889: MUL
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: LD_VAR 0 1
49902: PUSH
49903: LD_REAL  4.00000000000000E-0001
49906: MUL
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 20
49914: PUSH
49915: LD_VAR 0 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: PPUSH
49930: CALL_OW 423
49934: GO 49858
49936: POP
49937: POP
// end ;
49938: LD_VAR 0 2
49942: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49943: LD_INT 100
49945: IFFALSE 50040
49947: GO 49949
49949: DISABLE
49950: LD_INT 0
49952: PPUSH
49953: PPUSH
// begin if mpBattleFlag <= 0 then
49954: LD_EXP 22
49958: PUSH
49959: LD_INT 0
49961: LESSEQUAL
49962: IFFALSE 49966
// exit ;
49964: GO 50040
// strength := 100 ;
49966: LD_ADDR_VAR 0 2
49970: PUSH
49971: LD_INT 100
49973: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49974: LD_EXP 22
49978: PPUSH
49979: CALL_OW 67
// strength := Dec ( strength ) ;
49983: LD_ADDR_VAR 0 2
49987: PUSH
49988: LD_VAR 0 2
49992: PPUSH
49993: CALL 42586 0 1
49997: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49998: LD_VAR 0 2
50002: PPUSH
50003: CALL 49844 0 1
// until not strength ;
50007: LD_VAR 0 2
50011: NOT
50012: IFFALSE 49974
// for i in mpBattleFlags do
50014: LD_ADDR_VAR 0 1
50018: PUSH
50019: LD_EXP 23
50023: PUSH
50024: FOR_IN
50025: IFFALSE 50038
// KillBattleFlag ( i ) ;
50027: LD_VAR 0 1
50031: PPUSH
50032: CALL_OW 419
50036: GO 50024
50038: POP
50039: POP
// end ;
50040: PPOPN 2
50042: END
// every 0 0$1 marked mpActive do var side , tmp ;
50043: GO 50045
50045: DISABLE
50046: LD_INT 0
50048: PPUSH
50049: PPUSH
// begin if mpSibBomb <= 1 then
50050: LD_EXP 28
50054: PUSH
50055: LD_INT 1
50057: LESSEQUAL
50058: IFFALSE 50062
// exit ;
50060: GO 50135
// tmp := mpSibBomb ;
50062: LD_ADDR_VAR 0 2
50066: PUSH
50067: LD_EXP 28
50071: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50072: LD_INT 35
50074: PPUSH
50075: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50079: LD_ADDR_VAR 0 2
50083: PUSH
50084: LD_VAR 0 2
50088: PUSH
50089: LD_INT 35
50091: MINUS
50092: ST_TO_ADDR
// until not tmp ;
50093: LD_VAR 0 2
50097: NOT
50098: IFFALSE 50072
// for side := 1 to 8 do
50100: LD_ADDR_VAR 0 1
50104: PUSH
50105: DOUBLE
50106: LD_INT 1
50108: DEC
50109: ST_TO_ADDR
50110: LD_INT 8
50112: PUSH
50113: FOR_TO
50114: IFFALSE 50133
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50116: LD_INT 25
50118: PPUSH
50119: LD_VAR 0 1
50123: PPUSH
50124: LD_INT 1
50126: PPUSH
50127: CALL_OW 322
50131: GO 50113
50133: POP
50134: POP
// end ;
50135: PPOPN 2
50137: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50138: LD_INT 0
50140: PPUSH
50141: PPUSH
50142: PPUSH
// mpBuildUpTimeDelay := 0 ;
50143: LD_ADDR_EXP 47
50147: PUSH
50148: LD_INT 0
50150: ST_TO_ADDR
// if not mpBuildUpTime then
50151: LD_EXP 20
50155: NOT
50156: IFFALSE 50160
// exit ;
50158: GO 50349
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50160: LD_ADDR_EXP 47
50164: PUSH
50165: LD_INT 8400
50167: PUSH
50168: LD_INT 2100
50170: PUSH
50171: LD_EXP 20
50175: MUL
50176: PLUS
50177: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50178: LD_ADDR_EXP 48
50182: PUSH
50183: LD_INT 1
50185: ST_TO_ADDR
// for i := 1 to 8 do
50186: LD_ADDR_VAR 0 2
50190: PUSH
50191: DOUBLE
50192: LD_INT 1
50194: DEC
50195: ST_TO_ADDR
50196: LD_INT 8
50198: PUSH
50199: FOR_TO
50200: IFFALSE 50347
// if mpSidePositions [ i ] then
50202: LD_EXP 7
50206: PUSH
50207: LD_VAR 0 2
50211: ARRAY
50212: IFFALSE 50345
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50214: LD_EXP 19
50218: PUSH
50219: LD_EXP 7
50223: PUSH
50224: LD_VAR 0 2
50228: ARRAY
50229: ARRAY
50230: PPUSH
50231: LD_INT 5
50233: PPUSH
50234: CALL_OW 424
// for j := 1 to 8 do
50238: LD_ADDR_VAR 0 3
50242: PUSH
50243: DOUBLE
50244: LD_INT 1
50246: DEC
50247: ST_TO_ADDR
50248: LD_INT 8
50250: PUSH
50251: FOR_TO
50252: IFFALSE 50343
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50254: LD_EXP 7
50258: PUSH
50259: LD_VAR 0 3
50263: ARRAY
50264: IFFALSE 50313
50266: PUSH
50267: LD_EXP 8
50271: PUSH
50272: LD_VAR 0 2
50276: ARRAY
50277: PUSH
50278: LD_EXP 8
50282: PUSH
50283: LD_VAR 0 3
50287: ARRAY
50288: NONEQUAL
50289: IFTRUE 50312
50291: PUSH
50292: LD_EXP 11
50296: NOT
50297: IFFALSE 50311
50299: PUSH
50300: LD_VAR 0 2
50304: PUSH
50305: LD_VAR 0 3
50309: NONEQUAL
50310: AND
50311: OR
50312: AND
50313: IFFALSE 50341
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50315: LD_VAR 0 3
50319: PPUSH
50320: LD_EXP 19
50324: PUSH
50325: LD_EXP 7
50329: PUSH
50330: LD_VAR 0 2
50334: ARRAY
50335: ARRAY
50336: PPUSH
50337: CALL_OW 333
50341: GO 50251
50343: POP
50344: POP
// end ;
50345: GO 50199
50347: POP
50348: POP
// end ;
50349: LD_VAR 0 1
50353: RET
// function EndBuildUp ; var i , j ; begin
50354: LD_INT 0
50356: PPUSH
50357: PPUSH
50358: PPUSH
// mpBuildUpTimeActive := false ;
50359: LD_ADDR_EXP 48
50363: PUSH
50364: LD_INT 0
50366: ST_TO_ADDR
// for i := 1 to 8 do
50367: LD_ADDR_VAR 0 2
50371: PUSH
50372: DOUBLE
50373: LD_INT 1
50375: DEC
50376: ST_TO_ADDR
50377: LD_INT 8
50379: PUSH
50380: FOR_TO
50381: IFFALSE 50528
// if mpSidePositions [ i ] then
50383: LD_EXP 7
50387: PUSH
50388: LD_VAR 0 2
50392: ARRAY
50393: IFFALSE 50526
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50395: LD_EXP 19
50399: PUSH
50400: LD_EXP 7
50404: PUSH
50405: LD_VAR 0 2
50409: ARRAY
50410: ARRAY
50411: PPUSH
50412: LD_INT 0
50414: PPUSH
50415: CALL_OW 424
// for j := 1 to 8 do
50419: LD_ADDR_VAR 0 3
50423: PUSH
50424: DOUBLE
50425: LD_INT 1
50427: DEC
50428: ST_TO_ADDR
50429: LD_INT 8
50431: PUSH
50432: FOR_TO
50433: IFFALSE 50524
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50435: LD_EXP 7
50439: PUSH
50440: LD_VAR 0 3
50444: ARRAY
50445: IFFALSE 50494
50447: PUSH
50448: LD_EXP 8
50452: PUSH
50453: LD_VAR 0 2
50457: ARRAY
50458: PUSH
50459: LD_EXP 8
50463: PUSH
50464: LD_VAR 0 3
50468: ARRAY
50469: NONEQUAL
50470: IFTRUE 50493
50472: PUSH
50473: LD_EXP 11
50477: NOT
50478: IFFALSE 50492
50480: PUSH
50481: LD_VAR 0 2
50485: PUSH
50486: LD_VAR 0 3
50490: NONEQUAL
50491: AND
50492: OR
50493: AND
50494: IFFALSE 50522
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50496: LD_VAR 0 3
50500: PPUSH
50501: LD_EXP 19
50505: PUSH
50506: LD_EXP 7
50510: PUSH
50511: LD_VAR 0 2
50515: ARRAY
50516: ARRAY
50517: PPUSH
50518: CALL_OW 334
50522: GO 50432
50524: POP
50525: POP
// end ;
50526: GO 50380
50528: POP
50529: POP
// end ;
50530: LD_VAR 0 1
50534: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50535: LD_EXP 48
50539: IFFALSE 50718
50541: GO 50543
50543: DISABLE
50544: LD_INT 0
50546: PPUSH
50547: PPUSH
// begin for i := 1 to 8 do
50548: LD_ADDR_VAR 0 1
50552: PUSH
50553: DOUBLE
50554: LD_INT 1
50556: DEC
50557: ST_TO_ADDR
50558: LD_INT 8
50560: PUSH
50561: FOR_TO
50562: IFFALSE 50715
// if mpSidePositions [ i ] then
50564: LD_EXP 7
50568: PUSH
50569: LD_VAR 0 1
50573: ARRAY
50574: IFFALSE 50713
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50576: LD_ADDR_VAR 0 2
50580: PUSH
50581: LD_EXP 19
50585: PUSH
50586: LD_EXP 7
50590: PUSH
50591: LD_VAR 0 1
50595: ARRAY
50596: ARRAY
50597: PPUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 21
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 21
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 22
50628: PUSH
50629: LD_OWVAR 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PPUSH
50642: CALL_OW 70
50646: PUSH
50647: FOR_IN
50648: IFFALSE 50711
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50650: LD_EXP 8
50654: PUSH
50655: LD_VAR 0 1
50659: ARRAY
50660: PUSH
50661: LD_EXP 8
50665: PUSH
50666: LD_OWVAR 2
50670: ARRAY
50671: NONEQUAL
50672: IFTRUE 50695
50674: PUSH
50675: LD_EXP 11
50679: NOT
50680: IFFALSE 50694
50682: PUSH
50683: LD_VAR 0 1
50687: PUSH
50688: LD_OWVAR 2
50692: NONEQUAL
50693: AND
50694: OR
50695: IFFALSE 50709
// ComMoveToArea ( un , BuildUpEscape ) ;
50697: LD_VAR 0 2
50701: PPUSH
50702: LD_INT 9
50704: PPUSH
50705: CALL_OW 113
50709: GO 50647
50711: POP
50712: POP
50713: GO 50561
50715: POP
50716: POP
// enable ;
50717: ENABLE
// end ;
50718: PPOPN 2
50720: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50721: LD_EXP 20
50725: IFFALSE 50775
50727: GO 50729
50729: DISABLE
50730: LD_INT 0
50732: PPUSH
// begin tmp := mpBuildUpTime ;
50733: LD_ADDR_VAR 0 1
50737: PUSH
50738: LD_EXP 20
50742: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50743: LD_INT 35
50745: PPUSH
50746: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50750: LD_ADDR_VAR 0 1
50754: PUSH
50755: LD_VAR 0 1
50759: PUSH
50760: LD_INT 35
50762: MINUS
50763: ST_TO_ADDR
// until not tmp ;
50764: LD_VAR 0 1
50768: NOT
50769: IFFALSE 50743
// EndBuildUp ;
50771: CALL 50354 0 0
// end ;
50775: PPOPN 1
50777: END
// every 0 0$1 trigger mpActive marked mpWin do
50778: LD_INT 100
50780: IFFALSE 50814
50782: GO 50784
50784: DISABLE
// begin if IAmServer then
50785: CALL_OW 518
50789: IFFALSE 50798
// wait ( 0 0$3 ) ;
50791: LD_INT 105
50793: PPUSH
50794: CALL_OW 67
// if Multiplayer then
50798: LD_OWVAR 4
50802: IFFALSE 50810
// YouWinInMultiplayer else
50804: CALL_OW 106
50808: GO 50814
// YouWin ;
50810: CALL_OW 103
// end ;
50814: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50815: LD_INT 0
50817: PPUSH
// result := false ;
50818: LD_ADDR_VAR 0 3
50822: PUSH
50823: LD_INT 0
50825: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50826: LD_VAR 0 1
50830: PUSH
50831: LD_INT 1
50833: DOUBLE
50834: EQUAL
50835: IFTRUE 50857
50837: LD_INT 5
50839: DOUBLE
50840: EQUAL
50841: IFTRUE 50857
50843: LD_INT 6
50845: DOUBLE
50846: EQUAL
50847: IFTRUE 50857
50849: LD_INT 7
50851: DOUBLE
50852: EQUAL
50853: IFTRUE 50857
50855: GO 50930
50857: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50858: LD_ADDR_VAR 0 3
50862: PUSH
50863: LD_INT 22
50865: PUSH
50866: LD_VAR 0 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 21
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 33
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 33
50900: PUSH
50901: LD_INT 5
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PPUSH
50918: CALL_OW 69
50922: PPUSH
50923: CALL 5225 0 1
50927: ST_TO_ADDR
// end ; GameTypeSurvival :
50928: GO 51169
50930: LD_INT 2
50932: DOUBLE
50933: EQUAL
50934: IFTRUE 50938
50936: GO 51068
50938: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: LD_INT 22
50946: PUSH
50947: LD_VAR 0 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 30
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 30
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PPUSH
50988: CALL_OW 69
50992: PPUSH
50993: CALL 5225 0 1
50997: IFFALSE 51065
50999: PUSH
51000: LD_INT 22
51002: PUSH
51003: LD_VAR 0 2
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 21
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 33
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 33
51037: PUSH
51038: LD_INT 5
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PPUSH
51055: CALL_OW 69
51059: PPUSH
51060: CALL 5225 0 1
51064: AND
51065: ST_TO_ADDR
// end ; GameTypeKing :
51066: GO 51169
51068: LD_INT 3
51070: DOUBLE
51071: EQUAL
51072: IFTRUE 51076
51074: GO 51168
51076: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51077: LD_ADDR_VAR 0 3
51081: PUSH
51082: LD_INT 22
51084: PUSH
51085: LD_VAR 0 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: LD_INT 21
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 33
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 33
51119: PUSH
51120: LD_INT 5
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PPUSH
51137: CALL_OW 69
51141: PPUSH
51142: CALL 5225 0 1
51146: IFFALSE 51165
51148: PUSH
51149: LD_VAR 0 2
51153: PPUSH
51154: CALL 55451 0 1
51158: PUSH
51159: LD_EXP 35
51163: LESS
51164: AND
51165: ST_TO_ADDR
// end ; end ;
51166: GO 51169
51168: POP
// end ;
51169: LD_VAR 0 3
51173: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51174: LD_INT 100
51176: IFFALSE 51406
51178: GO 51180
51180: DISABLE
51181: LD_INT 0
51183: PPUSH
51184: PPUSH
// begin if Multiplayer then
51185: LD_OWVAR 4
51189: IFFALSE 51197
// SetPlayerSpectator ( ) else
51191: CALL_OW 572
51195: GO 51206
// FogOff ( your_side ) ;
51197: LD_OWVAR 2
51201: PPUSH
51202: CALL_OW 344
// repeat gameIsOn := false ;
51206: LD_ADDR_VAR 0 1
51210: PUSH
51211: LD_INT 0
51213: ST_TO_ADDR
// for i := 1 to 8 do
51214: LD_ADDR_VAR 0 2
51218: PUSH
51219: DOUBLE
51220: LD_INT 1
51222: DEC
51223: ST_TO_ADDR
51224: LD_INT 8
51226: PUSH
51227: FOR_TO
51228: IFFALSE 51358
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51230: LD_EXP 7
51234: PUSH
51235: LD_VAR 0 2
51239: ARRAY
51240: IFFALSE 51253
51242: PUSH
51243: LD_VAR 0 2
51247: PPUSH
51248: CALL_OW 108
51252: AND
51253: IFFALSE 51267
51255: PUSH
51256: LD_VAR 0 2
51260: PUSH
51261: LD_OWVAR 2
51265: NONEQUAL
51266: AND
51267: IFFALSE 51356
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51269: LD_EXP 8
51273: PUSH
51274: LD_VAR 0 2
51278: ARRAY
51279: NOT
51280: IFTRUE 51328
51282: PUSH
51283: LD_EXP 8
51287: PUSH
51288: LD_VAR 0 2
51292: ARRAY
51293: PUSH
51294: LD_EXP 8
51298: PUSH
51299: LD_OWVAR 2
51303: ARRAY
51304: NONEQUAL
51305: IFFALSE 51327
51307: PUSH
51308: LD_OWVAR 2
51312: PPUSH
51313: LD_VAR 0 2
51317: PPUSH
51318: CALL_OW 81
51322: PUSH
51323: LD_INT 1
51325: NONEQUAL
51326: AND
51327: OR
51328: IFFALSE 51356
// if HasPowerByGameType ( mpGameType , i ) then
51330: LD_EXP 3
51334: PPUSH
51335: LD_VAR 0 2
51339: PPUSH
51340: CALL 50815 0 2
51344: IFFALSE 51356
// begin gameIsOn := true ;
51346: LD_ADDR_VAR 0 1
51350: PUSH
51351: LD_INT 1
51353: ST_TO_ADDR
// break ;
51354: GO 51358
// end ;
51356: GO 51227
51358: POP
51359: POP
// wait ( 100 ) ;
51360: LD_INT 100
51362: PPUSH
51363: CALL_OW 67
// until not gameIsOn ;
51367: LD_VAR 0 1
51371: NOT
51372: IFFALSE 51206
// if IAmServer then
51374: CALL_OW 518
51378: IFFALSE 51387
// wait ( 0 0$3 ) ;
51380: LD_INT 105
51382: PPUSH
51383: CALL_OW 67
// if Multiplayer then
51387: LD_OWVAR 4
51391: IFFALSE 51399
// YouLostInMultiplayer else
51393: CALL_OW 107
51397: GO 51406
// YouLost (  ) ;
51399: LD_STRING 
51401: PPUSH
51402: CALL_OW 104
// end ;
51406: PPOPN 2
51408: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51409: LD_EXP 33
51413: IFFALSE 51797
51415: GO 51417
51417: DISABLE
51418: LD_INT 0
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
51424: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51425: LD_ADDR_VAR 0 5
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: LD_INT 4
51441: PUSH
51442: LD_INT 5
51444: PUSH
51445: LD_INT 6
51447: PUSH
51448: LD_INT 7
51450: PUSH
51451: LD_INT 8
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51464: LD_INT 350
51466: PPUSH
51467: CALL_OW 67
// for i := 1 to 8 do
51471: LD_ADDR_VAR 0 1
51475: PUSH
51476: DOUBLE
51477: LD_INT 1
51479: DEC
51480: ST_TO_ADDR
51481: LD_INT 8
51483: PUSH
51484: FOR_TO
51485: IFFALSE 51767
// begin j := sides [ i ] ;
51487: LD_ADDR_VAR 0 2
51491: PUSH
51492: LD_VAR 0 5
51496: PUSH
51497: LD_VAR 0 1
51501: ARRAY
51502: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51503: LD_EXP 40
51507: PUSH
51508: LD_VAR 0 2
51512: ARRAY
51513: PPUSH
51514: CALL 5225 0 1
51518: IFFALSE 51531
51520: PUSH
51521: LD_VAR 0 2
51525: PPUSH
51526: CALL_OW 108
51530: AND
51531: IFFALSE 51549
51533: PUSH
51534: LD_EXP 3
51538: PPUSH
51539: LD_VAR 0 2
51543: PPUSH
51544: CALL 50815 0 2
51548: AND
51549: IFFALSE 51765
// begin wait ( mpRespawn div 2 ) ;
51551: LD_EXP 33
51555: PUSH
51556: LD_INT 2
51558: DIV
51559: PPUSH
51560: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51564: LD_ADDR_VAR 0 3
51568: PUSH
51569: LD_INT 22
51571: PUSH
51572: LD_VAR 0 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 50
51583: PUSH
51584: EMPTY
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 30
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 30
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: LIST
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: LIST
51619: PPUSH
51620: CALL_OW 69
51624: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51625: LD_VAR 0 3
51629: NOT
51630: IFTRUE 51644
51632: PUSH
51633: LD_VAR 0 2
51637: PPUSH
51638: CALL_OW 108
51642: NOT
51643: OR
51644: IFTRUE 51663
51646: PUSH
51647: LD_EXP 3
51651: PPUSH
51652: LD_VAR 0 2
51656: PPUSH
51657: CALL 50815 0 2
51661: NOT
51662: OR
51663: IFFALSE 51667
// continue ;
51665: GO 51484
// spawn := tmp [ 1 ] ;
51667: LD_ADDR_VAR 0 4
51671: PUSH
51672: LD_VAR 0 3
51676: PUSH
51677: LD_INT 1
51679: ARRAY
51680: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51681: LD_EXP 40
51685: PUSH
51686: LD_VAR 0 2
51690: ARRAY
51691: PUSH
51692: LD_INT 1
51694: ARRAY
51695: PPUSH
51696: LD_VAR 0 4
51700: PPUSH
51701: CALL_OW 250
51705: PPUSH
51706: LD_VAR 0 4
51710: PPUSH
51711: CALL_OW 251
51715: PPUSH
51716: LD_INT 32
51718: PPUSH
51719: LD_INT 1
51721: PPUSH
51722: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51726: LD_ADDR_EXP 40
51730: PUSH
51731: LD_EXP 40
51735: PPUSH
51736: LD_VAR 0 2
51740: PPUSH
51741: LD_EXP 40
51745: PUSH
51746: LD_VAR 0 2
51750: ARRAY
51751: PPUSH
51752: LD_INT 1
51754: PPUSH
51755: CALL_OW 3
51759: PPUSH
51760: CALL_OW 1
51764: ST_TO_ADDR
// end ; end ;
51765: GO 51484
51767: POP
51768: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51769: LD_ADDR_VAR 0 5
51773: PUSH
51774: LD_VAR 0 5
51778: PPUSH
51779: LD_INT 1
51781: PPUSH
51782: LD_INT 8
51784: PPUSH
51785: LD_INT 1
51787: PPUSH
51788: CALL 7551 0 4
51792: ST_TO_ADDR
// until false ;
51793: LD_INT 0
51795: IFFALSE 51464
// end ;
51797: PPOPN 5
51799: END
// every 0 0$1 marked mpActive do
51800: GO 51802
51802: DISABLE
// begin enable ;
51803: ENABLE
// if not mpDisplayStrings then
51804: LD_EXP 38
51808: NOT
51809: IFFALSE 51820
// begin display_strings := [ ] ;
51811: LD_ADDR_OWVAR 47
51815: PUSH
51816: EMPTY
51817: ST_TO_ADDR
// exit ;
51818: GO 51830
// end ; display_strings := mpDisplayStrings ;
51820: LD_ADDR_OWVAR 47
51824: PUSH
51825: LD_EXP 38
51829: ST_TO_ADDR
// end ; end_of_file
51830: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51831: LD_INT 0
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
// if GetType ( un ) = unit_vehicle then
51842: LD_VAR 0 1
51846: PPUSH
51847: CALL_OW 247
51851: PUSH
51852: LD_INT 2
51854: EQUAL
51855: IFFALSE 51859
// exit ;
51857: GO 52533
// side := GetSide ( un ) ;
51859: LD_ADDR_VAR 0 9
51863: PUSH
51864: LD_VAR 0 1
51868: PPUSH
51869: CALL_OW 255
51873: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51874: LD_EXP 3
51878: PUSH
51879: LD_INT 2
51881: EQUAL
51882: IFFALSE 51976
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51884: LD_VAR 0 1
51888: PPUSH
51889: CALL_OW 266
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: IN
51904: IFFALSE 51976
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51906: LD_ADDR_VAR 0 3
51910: PUSH
51911: LD_INT 22
51913: PUSH
51914: LD_VAR 0 9
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 21
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 33
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PPUSH
51955: CALL_OW 69
51959: PUSH
51960: FOR_IN
51961: IFFALSE 51974
// KillUnit ( i ) ;
51963: LD_VAR 0 3
51967: PPUSH
51968: CALL_OW 66
51972: GO 51960
51974: POP
51975: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51976: LD_VAR 0 1
51980: PPUSH
51981: CALL_OW 257
51985: PUSH
51986: LD_INT 12
51988: PUSH
51989: LD_INT 17
51991: PUSH
51992: LD_INT 15
51994: PUSH
51995: LD_INT 16
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: IN
52004: IFTRUE 52021
52006: PUSH
52007: LD_VAR 0 1
52011: PPUSH
52012: CALL_OW 263
52016: PUSH
52017: LD_INT 5
52019: EQUAL
52020: OR
52021: IFFALSE 52258
// begin tag := 0 ;
52023: LD_ADDR_VAR 0 5
52027: PUSH
52028: LD_INT 0
52030: ST_TO_ADDR
// for i := 1 to 8 do
52031: LD_ADDR_VAR 0 3
52035: PUSH
52036: DOUBLE
52037: LD_INT 1
52039: DEC
52040: ST_TO_ADDR
52041: LD_INT 8
52043: PUSH
52044: FOR_TO
52045: IFFALSE 52079
// if un in mpApePosIndex [ i ] then
52047: LD_VAR 0 1
52051: PUSH
52052: LD_EXP 32
52056: PUSH
52057: LD_VAR 0 3
52061: ARRAY
52062: IN
52063: IFFALSE 52077
// begin tag := i ;
52065: LD_ADDR_VAR 0 5
52069: PUSH
52070: LD_VAR 0 3
52074: ST_TO_ADDR
// break ;
52075: GO 52079
// end ;
52077: GO 52044
52079: POP
52080: POP
// if not tag then
52081: LD_VAR 0 5
52085: NOT
52086: IFFALSE 52090
// exit ;
52088: GO 52533
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52090: LD_ADDR_VAR 0 7
52094: PUSH
52095: LD_EXP 31
52099: PUSH
52100: LD_EXP 7
52104: PUSH
52105: LD_VAR 0 5
52109: ARRAY
52110: ARRAY
52111: ST_TO_ADDR
// if not area then
52112: LD_VAR 0 7
52116: NOT
52117: IFFALSE 52121
// exit ;
52119: GO 52533
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52121: LD_INT 14700
52123: PUSH
52124: LD_VAR 0 1
52128: PUSH
52129: LD_INT 5
52131: MOD
52132: PUSH
52133: LD_INT 1
52135: PLUS
52136: PUSH
52137: LD_INT 700
52139: MUL
52140: PLUS
52141: PPUSH
52142: CALL_OW 67
// repeat wait ( 10 ) ;
52146: LD_INT 10
52148: PPUSH
52149: CALL_OW 67
// until not mpBlockRespThread ;
52153: LD_EXP 46
52157: NOT
52158: IFFALSE 52146
// mpBlockRespThread := true ;
52160: LD_ADDR_EXP 46
52164: PUSH
52165: LD_INT 1
52167: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52168: LD_INT 0
52170: PPUSH
52171: CALL 37318 0 1
// ape := CreateHuman ;
52175: LD_ADDR_VAR 0 4
52179: PUSH
52180: CALL_OW 44
52184: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52185: LD_ADDR_EXP 32
52189: PUSH
52190: LD_EXP 32
52194: PPUSH
52195: LD_VAR 0 5
52199: PPUSH
52200: LD_EXP 32
52204: PUSH
52205: LD_VAR 0 5
52209: ARRAY
52210: PPUSH
52211: LD_VAR 0 4
52215: PPUSH
52216: CALL 41191 0 2
52220: PPUSH
52221: CALL_OW 1
52225: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52226: LD_VAR 0 4
52230: PPUSH
52231: LD_VAR 0 7
52235: PPUSH
52236: LD_INT 0
52238: PPUSH
52239: CALL_OW 49
// wait ( 10 ) ;
52243: LD_INT 10
52245: PPUSH
52246: CALL_OW 67
// mpBlockRespThread := false ;
52250: LD_ADDR_EXP 46
52254: PUSH
52255: LD_INT 0
52257: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52258: LD_VAR 0 1
52262: PPUSH
52263: CALL_OW 247
52267: PUSH
52268: LD_INT 1
52270: EQUAL
52271: IFFALSE 52288
52273: PUSH
52274: LD_VAR 0 1
52278: PPUSH
52279: CALL_OW 248
52283: PUSH
52284: LD_INT 0
52286: GREATER
52287: AND
52288: IFFALSE 52533
// begin if not mpRespawn then
52290: LD_EXP 33
52294: NOT
52295: IFFALSE 52299
// exit ;
52297: GO 52533
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52299: LD_VAR 0 9
52303: PPUSH
52304: CALL_OW 108
52308: NOT
52309: IFFALSE 52328
52311: PUSH
52312: LD_EXP 3
52316: PPUSH
52317: LD_VAR 0 9
52321: PPUSH
52322: CALL 50815 0 2
52326: NOT
52327: AND
52328: IFFALSE 52332
// exit ;
52330: GO 52533
// side := GetSide ( un ) ;
52332: LD_ADDR_VAR 0 9
52336: PUSH
52337: LD_VAR 0 1
52341: PPUSH
52342: CALL_OW 255
52346: ST_TO_ADDR
// nation := GetNation ( un ) ;
52347: LD_ADDR_VAR 0 8
52351: PUSH
52352: LD_VAR 0 1
52356: PPUSH
52357: CALL_OW 248
52361: ST_TO_ADDR
// class := GetClass ( un ) ;
52362: LD_ADDR_VAR 0 6
52366: PUSH
52367: LD_VAR 0 1
52371: PPUSH
52372: CALL_OW 257
52376: ST_TO_ADDR
// if class > 4 then
52377: LD_VAR 0 6
52381: PUSH
52382: LD_INT 4
52384: GREATER
52385: IFFALSE 52395
// class := 1 ;
52387: LD_ADDR_VAR 0 6
52391: PUSH
52392: LD_INT 1
52394: ST_TO_ADDR
// repeat wait ( 10 ) ;
52395: LD_INT 10
52397: PPUSH
52398: CALL_OW 67
// until not mpBlockRespThread ;
52402: LD_EXP 46
52406: NOT
52407: IFFALSE 52395
// mpBlockRespThread := true ;
52409: LD_ADDR_EXP 46
52413: PUSH
52414: LD_INT 1
52416: ST_TO_ADDR
// uc_side := side ;
52417: LD_ADDR_OWVAR 20
52421: PUSH
52422: LD_VAR 0 9
52426: ST_TO_ADDR
// uc_nation := nation ;
52427: LD_ADDR_OWVAR 21
52431: PUSH
52432: LD_VAR 0 8
52436: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52437: LD_INT 0
52439: PPUSH
52440: LD_VAR 0 6
52444: PPUSH
52445: LD_INT 2
52447: PPUSH
52448: CALL_OW 380
// un := CreateHuman ;
52452: LD_ADDR_VAR 0 1
52456: PUSH
52457: CALL_OW 44
52461: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52462: LD_ADDR_EXP 40
52466: PUSH
52467: LD_EXP 40
52471: PPUSH
52472: LD_VAR 0 9
52476: PPUSH
52477: LD_EXP 40
52481: PUSH
52482: LD_VAR 0 9
52486: ARRAY
52487: PPUSH
52488: LD_EXP 40
52492: PUSH
52493: LD_VAR 0 9
52497: ARRAY
52498: PUSH
52499: LD_INT 1
52501: PLUS
52502: PPUSH
52503: LD_VAR 0 1
52507: PPUSH
52508: CALL_OW 1
52512: PPUSH
52513: CALL_OW 1
52517: ST_TO_ADDR
// wait ( 10 ) ;
52518: LD_INT 10
52520: PPUSH
52521: CALL_OW 67
// mpBlockRespThread := false ;
52525: LD_ADDR_EXP 46
52529: PUSH
52530: LD_INT 0
52532: ST_TO_ADDR
// end ; end ;
52533: LD_VAR 0 2
52537: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52538: LD_INT 0
52540: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52541: LD_VAR 0 1
52545: PPUSH
52546: CALL_OW 266
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: IN
52561: IFFALSE 52586
// SetBName ( building , @ & GetSide ( building ) ) ;
52563: LD_VAR 0 1
52567: PPUSH
52568: LD_STRING @
52570: PUSH
52571: LD_VAR 0 1
52575: PPUSH
52576: CALL_OW 255
52580: STR
52581: PPUSH
52582: CALL_OW 500
// end ;
52586: LD_VAR 0 2
52590: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52591: LD_INT 0
52593: PPUSH
52594: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52595: LD_EXP 3
52599: PUSH
52600: LD_INT 2
52602: EQUAL
52603: IFFALSE 52627
52605: PUSH
52606: LD_VAR 0 1
52610: PPUSH
52611: CALL_OW 266
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: IN
52626: AND
52627: IFFALSE 52706
// begin SetSide ( building , oldSide ) ;
52629: LD_VAR 0 1
52633: PPUSH
52634: LD_VAR 0 2
52638: PPUSH
52639: CALL_OW 235
// KillUnit ( building ) ;
52643: LD_VAR 0 1
52647: PPUSH
52648: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52652: LD_ADDR_VAR 0 5
52656: PUSH
52657: LD_INT 22
52659: PUSH
52660: LD_VAR 0 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 21
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PPUSH
52683: CALL_OW 69
52687: PUSH
52688: FOR_IN
52689: IFFALSE 52702
// KillUnit ( i ) ;
52691: LD_VAR 0 5
52695: PPUSH
52696: CALL_OW 66
52700: GO 52688
52702: POP
52703: POP
// exit ;
52704: GO 52751
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52706: LD_VAR 0 1
52710: PPUSH
52711: CALL_OW 266
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: IN
52726: IFFALSE 52751
// SetBName ( building , @ & GetSide ( building ) ) ;
52728: LD_VAR 0 1
52732: PPUSH
52733: LD_STRING @
52735: PUSH
52736: LD_VAR 0 1
52740: PPUSH
52741: CALL_OW 255
52745: STR
52746: PPUSH
52747: CALL_OW 500
// end ;
52751: LD_VAR 0 4
52755: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52756: LD_INT 0
52758: PPUSH
52759: PPUSH
52760: PPUSH
// if mpGameType <> GameTypeFamine then
52761: LD_EXP 3
52765: PUSH
52766: LD_INT 5
52768: NONEQUAL
52769: IFFALSE 52773
// exit ;
52771: GO 52988
// for i := 1 to mpGlobalOilDeposits do
52773: LD_ADDR_VAR 0 6
52777: PUSH
52778: DOUBLE
52779: LD_INT 1
52781: DEC
52782: ST_TO_ADDR
52783: LD_EXP 41
52787: PUSH
52788: FOR_TO
52789: IFFALSE 52986
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52791: LD_EXP 41
52795: PUSH
52796: LD_VAR 0 6
52800: ARRAY
52801: PUSH
52802: LD_INT 1
52804: ARRAY
52805: PPUSH
52806: LD_EXP 41
52810: PUSH
52811: LD_VAR 0 6
52815: ARRAY
52816: PUSH
52817: LD_INT 2
52819: ARRAY
52820: PPUSH
52821: CALL_OW 428
52825: PUSH
52826: LD_VAR 0 1
52830: EQUAL
52831: IFFALSE 52984
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52833: LD_ADDR_VAR 0 7
52837: PUSH
52838: LD_EXP 41
52842: PUSH
52843: LD_VAR 0 6
52847: ARRAY
52848: PUSH
52849: LD_INT 3
52851: ARRAY
52852: ST_TO_ADDR
// value := value - amount ;
52853: LD_ADDR_VAR 0 7
52857: PUSH
52858: LD_VAR 0 7
52862: PUSH
52863: LD_VAR 0 4
52867: MINUS
52868: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52869: LD_ADDR_EXP 41
52873: PUSH
52874: LD_EXP 41
52878: PPUSH
52879: LD_VAR 0 6
52883: PPUSH
52884: LD_EXP 41
52888: PUSH
52889: LD_VAR 0 6
52893: ARRAY
52894: PPUSH
52895: LD_INT 3
52897: PPUSH
52898: LD_VAR 0 7
52902: PPUSH
52903: CALL_OW 1
52907: PPUSH
52908: CALL_OW 1
52912: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52913: LD_VAR 0 1
52917: PPUSH
52918: LD_VAR 0 7
52922: PPUSH
52923: CALL_OW 505
// if value <= 0 then
52927: LD_VAR 0 7
52931: PUSH
52932: LD_INT 0
52934: LESSEQUAL
52935: IFFALSE 52984
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52937: LD_EXP 41
52941: PUSH
52942: LD_VAR 0 6
52946: ARRAY
52947: PUSH
52948: LD_INT 1
52950: ARRAY
52951: PPUSH
52952: LD_EXP 41
52956: PUSH
52957: LD_VAR 0 6
52961: ARRAY
52962: PUSH
52963: LD_INT 2
52965: ARRAY
52966: PPUSH
52967: CALL_OW 63
// KillUnit ( building ) ;
52971: LD_VAR 0 1
52975: PPUSH
52976: CALL_OW 66
// exit ;
52980: POP
52981: POP
52982: GO 52988
// end ; end ; end ;
52984: GO 52788
52986: POP
52987: POP
// end ;
52988: LD_VAR 0 5
52992: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52993: LD_INT 0
52995: PPUSH
52996: PPUSH
52997: PPUSH
// if mpGameType <> GameTypeFamine then
52998: LD_EXP 3
53002: PUSH
53003: LD_INT 5
53005: NONEQUAL
53006: IFFALSE 53010
// exit ;
53008: GO 53225
// for i := 1 to mpGlobalSibDeposits do
53010: LD_ADDR_VAR 0 6
53014: PUSH
53015: DOUBLE
53016: LD_INT 1
53018: DEC
53019: ST_TO_ADDR
53020: LD_EXP 42
53024: PUSH
53025: FOR_TO
53026: IFFALSE 53223
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53028: LD_EXP 42
53032: PUSH
53033: LD_VAR 0 6
53037: ARRAY
53038: PUSH
53039: LD_INT 1
53041: ARRAY
53042: PPUSH
53043: LD_EXP 42
53047: PUSH
53048: LD_VAR 0 6
53052: ARRAY
53053: PUSH
53054: LD_INT 2
53056: ARRAY
53057: PPUSH
53058: CALL_OW 428
53062: PUSH
53063: LD_VAR 0 1
53067: EQUAL
53068: IFFALSE 53221
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53070: LD_ADDR_VAR 0 7
53074: PUSH
53075: LD_EXP 42
53079: PUSH
53080: LD_VAR 0 6
53084: ARRAY
53085: PUSH
53086: LD_INT 3
53088: ARRAY
53089: ST_TO_ADDR
// value := value - amount ;
53090: LD_ADDR_VAR 0 7
53094: PUSH
53095: LD_VAR 0 7
53099: PUSH
53100: LD_VAR 0 4
53104: MINUS
53105: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53106: LD_ADDR_EXP 42
53110: PUSH
53111: LD_EXP 42
53115: PPUSH
53116: LD_VAR 0 6
53120: PPUSH
53121: LD_EXP 42
53125: PUSH
53126: LD_VAR 0 6
53130: ARRAY
53131: PPUSH
53132: LD_INT 3
53134: PPUSH
53135: LD_VAR 0 7
53139: PPUSH
53140: CALL_OW 1
53144: PPUSH
53145: CALL_OW 1
53149: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53150: LD_VAR 0 1
53154: PPUSH
53155: LD_VAR 0 7
53159: PPUSH
53160: CALL_OW 505
// if value <= 0 then
53164: LD_VAR 0 7
53168: PUSH
53169: LD_INT 0
53171: LESSEQUAL
53172: IFFALSE 53221
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53174: LD_EXP 42
53178: PUSH
53179: LD_VAR 0 6
53183: ARRAY
53184: PUSH
53185: LD_INT 1
53187: ARRAY
53188: PPUSH
53189: LD_EXP 42
53193: PUSH
53194: LD_VAR 0 6
53198: ARRAY
53199: PUSH
53200: LD_INT 2
53202: ARRAY
53203: PPUSH
53204: CALL_OW 63
// KillUnit ( building ) ;
53208: LD_VAR 0 1
53212: PPUSH
53213: CALL_OW 66
// exit ;
53217: POP
53218: POP
53219: GO 53225
// end ; end ; end ;
53221: GO 53025
53223: POP
53224: POP
// end ;
53225: LD_VAR 0 5
53229: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53230: LD_INT 0
53232: PPUSH
53233: PPUSH
// side := GetSide ( factory ) ;
53234: LD_ADDR_VAR 0 7
53238: PUSH
53239: LD_VAR 0 1
53243: PPUSH
53244: CALL_OW 255
53248: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53249: LD_VAR 0 5
53253: PUSH
53254: LD_INT 81
53256: EQUAL
53257: IFFALSE 53295
53259: PUSH
53260: LD_INT 22
53262: PUSH
53263: LD_VAR 0 7
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 34
53274: PUSH
53275: LD_INT 81
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PPUSH
53286: CALL_OW 69
53290: PUSH
53291: LD_INT 0
53293: GREATER
53294: AND
53295: IFFALSE 53328
// begin ComCancel ( factory ) ;
53297: LD_VAR 0 1
53301: PPUSH
53302: CALL_OW 127
// if side = your_side then
53306: LD_VAR 0 7
53310: PUSH
53311: LD_OWVAR 2
53315: EQUAL
53316: IFFALSE 53328
// HintSpec ( VehLimit , 2 ) ;
53318: LD_STRING VehLimit
53320: PPUSH
53321: LD_INT 2
53323: PPUSH
53324: CALL_OW 338
// end ; end ;
53328: LD_VAR 0 6
53332: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53333: LD_INT 0
53335: PPUSH
53336: PPUSH
53337: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53338: LD_VAR 0 1
53342: PPUSH
53343: CALL_OW 264
53347: PUSH
53348: LD_INT 81
53350: EQUAL
53351: IFFALSE 53368
53353: PUSH
53354: LD_VAR 0 1
53358: PPUSH
53359: CALL_OW 263
53363: PUSH
53364: LD_INT 1
53366: EQUAL
53367: AND
53368: IFFALSE 53648
// begin for i := 1 to Count ( minersList ) do
53370: LD_ADDR_VAR 0 6
53374: PUSH
53375: DOUBLE
53376: LD_INT 1
53378: DEC
53379: ST_TO_ADDR
53380: LD_EXP 57
53384: PPUSH
53385: CALL 5225 0 1
53389: PUSH
53390: FOR_TO
53391: IFFALSE 53509
// begin if minersList [ i ] = oldId then
53393: LD_EXP 57
53397: PUSH
53398: LD_VAR 0 6
53402: ARRAY
53403: PUSH
53404: LD_VAR 0 2
53408: EQUAL
53409: IFFALSE 53507
// begin for j := 1 to minerMinesList [ i ] do
53411: LD_ADDR_VAR 0 7
53415: PUSH
53416: DOUBLE
53417: LD_INT 1
53419: DEC
53420: ST_TO_ADDR
53421: LD_EXP 58
53425: PUSH
53426: LD_VAR 0 6
53430: ARRAY
53431: PUSH
53432: FOR_TO
53433: IFFALSE 53483
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53435: LD_EXP 58
53439: PUSH
53440: LD_VAR 0 6
53444: ARRAY
53445: PUSH
53446: LD_VAR 0 7
53450: ARRAY
53451: PUSH
53452: LD_INT 1
53454: ARRAY
53455: PPUSH
53456: LD_EXP 58
53460: PUSH
53461: LD_VAR 0 6
53465: ARRAY
53466: PUSH
53467: LD_VAR 0 7
53471: ARRAY
53472: PUSH
53473: LD_INT 2
53475: ARRAY
53476: PPUSH
53477: CALL_OW 612
53481: GO 53432
53483: POP
53484: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53485: LD_ADDR_EXP 58
53489: PUSH
53490: LD_EXP 58
53494: PPUSH
53495: LD_VAR 0 6
53499: PPUSH
53500: CALL_OW 3
53504: ST_TO_ADDR
// break ;
53505: GO 53509
// end ; end ;
53507: GO 53390
53509: POP
53510: POP
// minersList := minersList diff oldId ;
53511: LD_ADDR_EXP 57
53515: PUSH
53516: LD_EXP 57
53520: PUSH
53521: LD_VAR 0 2
53525: DIFF
53526: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
53527: LD_INT 22
53529: PUSH
53530: LD_VAR 0 4
53534: PPUSH
53535: CALL_OW 255
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 34
53546: PUSH
53547: LD_INT 81
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PPUSH
53558: CALL_OW 69
53562: PUSH
53563: LD_INT 1
53565: GREATER
53566: IFFALSE 53593
// begin ComExit ( unit ) ;
53568: LD_VAR 0 4
53572: PPUSH
53573: CALL 41589 0 1
// SetSide ( newId , oldSide ) ;
53577: LD_VAR 0 1
53581: PPUSH
53582: LD_VAR 0 3
53586: PPUSH
53587: CALL_OW 235
// exit ;
53591: GO 53648
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
53593: LD_ADDR_EXP 57
53597: PUSH
53598: LD_EXP 57
53602: PPUSH
53603: LD_EXP 57
53607: PUSH
53608: LD_INT 1
53610: PLUS
53611: PPUSH
53612: LD_VAR 0 1
53616: PPUSH
53617: CALL_OW 1
53621: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53622: LD_ADDR_EXP 58
53626: PUSH
53627: LD_EXP 58
53631: PPUSH
53632: LD_EXP 58
53636: PUSH
53637: LD_INT 1
53639: PLUS
53640: PPUSH
53641: EMPTY
53642: PPUSH
53643: CALL_OW 1
53647: ST_TO_ADDR
// end ; end ; end_of_file
53648: LD_VAR 0 5
53652: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53653: LD_EXP 39
53657: IFFALSE 53665
53659: PUSH
53660: CALL 53875 0 0
53664: AND
53665: IFFALSE 53673
53667: PUSH
53668: LD_OWVAR 4
53672: AND
53673: IFFALSE 53872
53675: GO 53677
53677: DISABLE
53678: LD_INT 0
53680: PPUSH
53681: PPUSH
// begin canWin := false ;
53682: LD_ADDR_VAR 0 2
53686: PUSH
53687: LD_INT 0
53689: ST_TO_ADDR
// if not HasPower ( your_side ) then
53690: LD_OWVAR 2
53694: PPUSH
53695: CALL 53917 0 1
53699: NOT
53700: IFFALSE 53711
// begin Multiplayer_Loose_Message ;
53702: CALL_OW 521
// enable ( mpLose ) ;
53706: LD_INT 102
53708: ENABLE_MARKED
// end else
53709: GO 53872
// begin canWin := true ;
53711: LD_ADDR_VAR 0 2
53715: PUSH
53716: LD_INT 1
53718: ST_TO_ADDR
// for i := 1 to 8 do
53719: LD_ADDR_VAR 0 1
53723: PUSH
53724: DOUBLE
53725: LD_INT 1
53727: DEC
53728: ST_TO_ADDR
53729: LD_INT 8
53731: PUSH
53732: FOR_TO
53733: IFFALSE 53858
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53735: LD_EXP 7
53739: PUSH
53740: LD_VAR 0 1
53744: ARRAY
53745: IFFALSE 53758
53747: PUSH
53748: LD_VAR 0 1
53752: PPUSH
53753: CALL_OW 108
53757: AND
53758: IFFALSE 53772
53760: PUSH
53761: LD_VAR 0 1
53765: PUSH
53766: LD_OWVAR 2
53770: NONEQUAL
53771: AND
53772: IFFALSE 53856
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53774: LD_EXP 8
53778: PUSH
53779: LD_VAR 0 1
53783: ARRAY
53784: NOT
53785: IFTRUE 53833
53787: PUSH
53788: LD_EXP 8
53792: PUSH
53793: LD_VAR 0 1
53797: ARRAY
53798: PUSH
53799: LD_EXP 8
53803: PUSH
53804: LD_OWVAR 2
53808: ARRAY
53809: NONEQUAL
53810: IFFALSE 53832
53812: PUSH
53813: LD_OWVAR 2
53817: PPUSH
53818: LD_VAR 0 1
53822: PPUSH
53823: CALL_OW 81
53827: PUSH
53828: LD_INT 1
53830: NONEQUAL
53831: AND
53832: OR
53833: IFFALSE 53856
// if HasPower ( i ) then
53835: LD_VAR 0 1
53839: PPUSH
53840: CALL 53917 0 1
53844: IFFALSE 53856
// begin canWin := false ;
53846: LD_ADDR_VAR 0 2
53850: PUSH
53851: LD_INT 0
53853: ST_TO_ADDR
// break ;
53854: GO 53858
// end ;
53856: GO 53732
53858: POP
53859: POP
// if canWin then
53860: LD_VAR 0 2
53864: IFFALSE 53871
// enable ( mpWin ) else
53866: LD_INT 101
53868: ENABLE_MARKED
53869: GO 53872
// enable ;
53871: ENABLE
// end ; end ;
53872: PPOPN 2
53874: END
// function CanWinLoose ; begin
53875: LD_INT 0
53877: PPUSH
// result := true ;
53878: LD_ADDR_VAR 0 1
53882: PUSH
53883: LD_INT 1
53885: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53886: CALL_OW 531
53890: IFFALSE 53902
53892: PUSH
53893: CALL_OW 519
53897: PUSH
53898: LD_INT 1
53900: GREATER
53901: AND
53902: IFFALSE 53912
// result := false ;
53904: LD_ADDR_VAR 0 1
53908: PUSH
53909: LD_INT 0
53911: ST_TO_ADDR
// end ;
53912: LD_VAR 0 1
53916: RET
// function HasPower ( i ) ; begin
53917: LD_INT 0
53919: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53920: LD_ADDR_VAR 0 2
53924: PUSH
53925: LD_INT 22
53927: PUSH
53928: LD_VAR 0 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: LD_INT 21
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 33
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 33
53962: PUSH
53963: LD_INT 5
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PPUSH
53980: CALL_OW 69
53984: ST_TO_ADDR
// end ; end_of_file
53985: LD_VAR 0 2
53989: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53990: LD_EXP 39
53994: IFFALSE 54037
53996: GO 53998
53998: DISABLE
53999: LD_INT 0
54001: PPUSH
// begin for i := 1 to 8 do
54002: LD_ADDR_VAR 0 1
54006: PUSH
54007: DOUBLE
54008: LD_INT 1
54010: DEC
54011: ST_TO_ADDR
54012: LD_INT 8
54014: PUSH
54015: FOR_TO
54016: IFFALSE 54035
// SetRestrict ( b_depot , i , state_disabled ) ;
54018: LD_INT 0
54020: PPUSH
54021: LD_VAR 0 1
54025: PPUSH
54026: LD_INT 0
54028: PPUSH
54029: CALL_OW 324
54033: GO 54015
54035: POP
54036: POP
// end ;
54037: PPOPN 1
54039: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54040: LD_EXP 39
54044: IFFALSE 54052
54046: PUSH
54047: CALL 54262 0 0
54051: AND
54052: IFFALSE 54060
54054: PUSH
54055: LD_OWVAR 4
54059: AND
54060: IFFALSE 54259
54062: GO 54064
54064: DISABLE
54065: LD_INT 0
54067: PPUSH
54068: PPUSH
// begin canWin := false ;
54069: LD_ADDR_VAR 0 2
54073: PUSH
54074: LD_INT 0
54076: ST_TO_ADDR
// if not HasPower ( your_side ) then
54077: LD_OWVAR 2
54081: PPUSH
54082: CALL 54304 0 1
54086: NOT
54087: IFFALSE 54098
// begin Multiplayer_Loose_Message ;
54089: CALL_OW 521
// enable ( mpLose ) ;
54093: LD_INT 102
54095: ENABLE_MARKED
// end else
54096: GO 54259
// begin canWin := true ;
54098: LD_ADDR_VAR 0 2
54102: PUSH
54103: LD_INT 1
54105: ST_TO_ADDR
// for i := 1 to 8 do
54106: LD_ADDR_VAR 0 1
54110: PUSH
54111: DOUBLE
54112: LD_INT 1
54114: DEC
54115: ST_TO_ADDR
54116: LD_INT 8
54118: PUSH
54119: FOR_TO
54120: IFFALSE 54245
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54122: LD_EXP 7
54126: PUSH
54127: LD_VAR 0 1
54131: ARRAY
54132: IFFALSE 54145
54134: PUSH
54135: LD_VAR 0 1
54139: PPUSH
54140: CALL_OW 108
54144: AND
54145: IFFALSE 54159
54147: PUSH
54148: LD_VAR 0 1
54152: PUSH
54153: LD_OWVAR 2
54157: NONEQUAL
54158: AND
54159: IFFALSE 54243
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54161: LD_EXP 8
54165: PUSH
54166: LD_VAR 0 1
54170: ARRAY
54171: NOT
54172: IFTRUE 54220
54174: PUSH
54175: LD_EXP 8
54179: PUSH
54180: LD_VAR 0 1
54184: ARRAY
54185: PUSH
54186: LD_EXP 8
54190: PUSH
54191: LD_OWVAR 2
54195: ARRAY
54196: NONEQUAL
54197: IFFALSE 54219
54199: PUSH
54200: LD_OWVAR 2
54204: PPUSH
54205: LD_VAR 0 1
54209: PPUSH
54210: CALL_OW 81
54214: PUSH
54215: LD_INT 1
54217: NONEQUAL
54218: AND
54219: OR
54220: IFFALSE 54243
// if HasPower ( i ) then
54222: LD_VAR 0 1
54226: PPUSH
54227: CALL 54304 0 1
54231: IFFALSE 54243
// begin canWin := false ;
54233: LD_ADDR_VAR 0 2
54237: PUSH
54238: LD_INT 0
54240: ST_TO_ADDR
// break ;
54241: GO 54245
// end ;
54243: GO 54119
54245: POP
54246: POP
// if canWin then
54247: LD_VAR 0 2
54251: IFFALSE 54258
// enable ( mpWin ) else
54253: LD_INT 101
54255: ENABLE_MARKED
54256: GO 54259
// enable ;
54258: ENABLE
// end ; end ;
54259: PPOPN 2
54261: END
// function CanWinLoose ; begin
54262: LD_INT 0
54264: PPUSH
// result := true ;
54265: LD_ADDR_VAR 0 1
54269: PUSH
54270: LD_INT 1
54272: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54273: CALL_OW 531
54277: IFFALSE 54289
54279: PUSH
54280: CALL_OW 519
54284: PUSH
54285: LD_INT 1
54287: GREATER
54288: AND
54289: IFFALSE 54299
// result := false ;
54291: LD_ADDR_VAR 0 1
54295: PUSH
54296: LD_INT 0
54298: ST_TO_ADDR
// end ;
54299: LD_VAR 0 1
54303: RET
// function HasPower ( i ) ; begin
54304: LD_INT 0
54306: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54307: LD_INT 22
54309: PUSH
54310: LD_VAR 0 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 30
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 30
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PPUSH
54351: CALL_OW 69
54355: NOT
54356: IFFALSE 54360
// exit ;
54358: GO 54425
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54360: LD_ADDR_VAR 0 2
54364: PUSH
54365: LD_INT 22
54367: PUSH
54368: LD_VAR 0 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 21
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 33
54392: PUSH
54393: LD_INT 3
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 33
54402: PUSH
54403: LD_INT 5
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PPUSH
54420: CALL_OW 69
54424: ST_TO_ADDR
// end ; end_of_file
54425: LD_VAR 0 2
54429: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54430: LD_EXP 39
54434: IFFALSE 54775
54436: GO 54438
54438: DISABLE
54439: LD_INT 0
54441: PPUSH
54442: PPUSH
54443: PPUSH
// begin mpKingPoints := [ ] ;
54444: LD_ADDR_EXP 49
54448: PUSH
54449: EMPTY
54450: ST_TO_ADDR
// if mpTeamGame then
54451: LD_EXP 11
54455: IFFALSE 54509
// begin for i := 1 to Count ( mpTeams ) do
54457: LD_ADDR_VAR 0 1
54461: PUSH
54462: DOUBLE
54463: LD_INT 1
54465: DEC
54466: ST_TO_ADDR
54467: LD_EXP 10
54471: PPUSH
54472: CALL 5225 0 1
54476: PUSH
54477: FOR_TO
54478: IFFALSE 54505
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54480: LD_ADDR_EXP 49
54484: PUSH
54485: LD_EXP 49
54489: PPUSH
54490: LD_VAR 0 1
54494: PPUSH
54495: LD_INT 0
54497: PPUSH
54498: CALL_OW 1
54502: ST_TO_ADDR
54503: GO 54477
54505: POP
54506: POP
// end else
54507: GO 54552
// begin for i := 1 to 8 do
54509: LD_ADDR_VAR 0 1
54513: PUSH
54514: DOUBLE
54515: LD_INT 1
54517: DEC
54518: ST_TO_ADDR
54519: LD_INT 8
54521: PUSH
54522: FOR_TO
54523: IFFALSE 54550
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54525: LD_ADDR_EXP 49
54529: PUSH
54530: LD_EXP 49
54534: PPUSH
54535: LD_VAR 0 1
54539: PPUSH
54540: LD_INT 0
54542: PPUSH
54543: CALL_OW 1
54547: ST_TO_ADDR
54548: GO 54522
54550: POP
54551: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54552: LD_ADDR_VAR 0 3
54556: PUSH
54557: LD_EXP 2
54561: PPUSH
54562: LD_INT 0
54564: PPUSH
54565: CALL_OW 517
54569: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54570: LD_ADDR_VAR 0 1
54574: PUSH
54575: DOUBLE
54576: LD_INT 1
54578: DEC
54579: ST_TO_ADDR
54580: LD_VAR 0 3
54584: PUSH
54585: LD_INT 1
54587: ARRAY
54588: PUSH
54589: FOR_TO
54590: IFFALSE 54657
// for j := 1 to 8 do
54592: LD_ADDR_VAR 0 2
54596: PUSH
54597: DOUBLE
54598: LD_INT 1
54600: DEC
54601: ST_TO_ADDR
54602: LD_INT 8
54604: PUSH
54605: FOR_TO
54606: IFFALSE 54653
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54608: LD_VAR 0 3
54612: PUSH
54613: LD_INT 1
54615: ARRAY
54616: PUSH
54617: LD_VAR 0 1
54621: ARRAY
54622: PPUSH
54623: LD_VAR 0 3
54627: PUSH
54628: LD_INT 2
54630: ARRAY
54631: PUSH
54632: LD_VAR 0 1
54636: ARRAY
54637: PPUSH
54638: LD_VAR 0 2
54642: PPUSH
54643: LD_INT 12
54645: NEG
54646: PPUSH
54647: CALL_OW 330
54651: GO 54605
54653: POP
54654: POP
54655: GO 54589
54657: POP
54658: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54659: LD_EXP 34
54663: PPUSH
54664: LD_INT 1
54666: PPUSH
54667: CALL_OW 424
// UpdateCounter ;
54671: CALL 55281 0 0
// repeat wait ( 0 0$1 ) ;
54675: LD_INT 35
54677: PPUSH
54678: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54682: LD_ADDR_VAR 0 3
54686: PUSH
54687: LD_EXP 34
54691: PPUSH
54692: LD_INT 3
54694: PUSH
54695: LD_INT 57
54697: PUSH
54698: EMPTY
54699: LIST
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 50
54707: PUSH
54708: EMPTY
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 30
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 30
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: PPUSH
54744: CALL_OW 70
54748: ST_TO_ADDR
// if not tmp then
54749: LD_VAR 0 3
54753: NOT
54754: IFFALSE 54758
// continue ;
54756: GO 54675
// AddPoints ( tmp ) ;
54758: LD_VAR 0 3
54762: PPUSH
54763: CALL 54959 0 1
// UpdateCounter ;
54767: CALL 55281 0 0
// until false ;
54771: LD_INT 0
54773: IFFALSE 54675
// end ;
54775: PPOPN 3
54777: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54778: LD_EXP 39
54782: IFFALSE 54790
54784: PUSH
54785: LD_EXP 37
54789: AND
54790: IFFALSE 54956
54792: GO 54794
54794: DISABLE
54795: LD_INT 0
54797: PPUSH
54798: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54799: LD_ADDR_VAR 0 2
54803: PUSH
54804: LD_EXP 2
54808: PPUSH
54809: LD_INT 0
54811: PPUSH
54812: CALL_OW 517
54816: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54817: LD_ADDR_VAR 0 1
54821: PUSH
54822: DOUBLE
54823: LD_INT 1
54825: DEC
54826: ST_TO_ADDR
54827: LD_VAR 0 2
54831: PUSH
54832: LD_INT 1
54834: ARRAY
54835: PUSH
54836: FOR_TO
54837: IFFALSE 54878
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54839: LD_VAR 0 2
54843: PUSH
54844: LD_INT 1
54846: ARRAY
54847: PUSH
54848: LD_VAR 0 1
54852: ARRAY
54853: PPUSH
54854: LD_VAR 0 2
54858: PUSH
54859: LD_INT 2
54861: ARRAY
54862: PUSH
54863: LD_VAR 0 1
54867: ARRAY
54868: PPUSH
54869: LD_INT 125
54871: PPUSH
54872: CALL_OW 495
54876: GO 54836
54878: POP
54879: POP
// repeat wait ( mpEmissions ) ;
54880: LD_EXP 37
54884: PPUSH
54885: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54889: LD_ADDR_VAR 0 1
54893: PUSH
54894: DOUBLE
54895: LD_INT 1
54897: DEC
54898: ST_TO_ADDR
54899: LD_VAR 0 2
54903: PUSH
54904: LD_INT 1
54906: ARRAY
54907: PUSH
54908: FOR_TO
54909: IFFALSE 54950
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54911: LD_VAR 0 2
54915: PUSH
54916: LD_INT 1
54918: ARRAY
54919: PUSH
54920: LD_VAR 0 1
54924: ARRAY
54925: PPUSH
54926: LD_VAR 0 2
54930: PUSH
54931: LD_INT 2
54933: ARRAY
54934: PUSH
54935: LD_VAR 0 1
54939: ARRAY
54940: PPUSH
54941: LD_INT 15
54943: PPUSH
54944: CALL_OW 495
54948: GO 54908
54950: POP
54951: POP
// until false ;
54952: LD_INT 0
54954: IFFALSE 54880
// end ;
54956: PPOPN 2
54958: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54959: LD_INT 0
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
// if mpTeamGame then
54966: LD_EXP 11
54970: IFFALSE 55167
// begin first := depots [ 1 ] ;
54972: LD_ADDR_VAR 0 4
54976: PUSH
54977: LD_VAR 0 1
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: ST_TO_ADDR
// side := GetSide ( first ) ;
54986: LD_ADDR_VAR 0 6
54990: PUSH
54991: LD_VAR 0 4
54995: PPUSH
54996: CALL_OW 255
55000: ST_TO_ADDR
// for i := 1 to mpTeams do
55001: LD_ADDR_VAR 0 3
55005: PUSH
55006: DOUBLE
55007: LD_INT 1
55009: DEC
55010: ST_TO_ADDR
55011: LD_EXP 10
55015: PUSH
55016: FOR_TO
55017: IFFALSE 55051
// if side in mpTeams [ i ] then
55019: LD_VAR 0 6
55023: PUSH
55024: LD_EXP 10
55028: PUSH
55029: LD_VAR 0 3
55033: ARRAY
55034: IN
55035: IFFALSE 55049
// begin team := i ;
55037: LD_ADDR_VAR 0 5
55041: PUSH
55042: LD_VAR 0 3
55046: ST_TO_ADDR
// break ;
55047: GO 55051
// end ;
55049: GO 55016
55051: POP
55052: POP
// if not team then
55053: LD_VAR 0 5
55057: NOT
55058: IFFALSE 55062
// exit ;
55060: GO 55276
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55062: LD_EXP 34
55066: PPUSH
55067: LD_INT 81
55069: PUSH
55070: LD_VAR 0 6
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PPUSH
55079: CALL_OW 70
55083: IFFALSE 55087
// exit ;
55085: GO 55276
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55087: LD_ADDR_EXP 49
55091: PUSH
55092: LD_EXP 49
55096: PPUSH
55097: LD_VAR 0 5
55101: PPUSH
55102: LD_EXP 49
55106: PUSH
55107: LD_VAR 0 5
55111: ARRAY
55112: PUSH
55113: LD_INT 1
55115: PLUS
55116: PPUSH
55117: CALL_OW 1
55121: ST_TO_ADDR
// for i in mpTeams [ team ] do
55122: LD_ADDR_VAR 0 3
55126: PUSH
55127: LD_EXP 10
55131: PUSH
55132: LD_VAR 0 5
55136: ARRAY
55137: PUSH
55138: FOR_IN
55139: IFFALSE 55163
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55141: LD_VAR 0 3
55145: PPUSH
55146: LD_EXP 49
55150: PUSH
55151: LD_VAR 0 5
55155: ARRAY
55156: PPUSH
55157: CALL_OW 506
55161: GO 55138
55163: POP
55164: POP
// end else
55165: GO 55276
// begin first := depots [ 1 ] ;
55167: LD_ADDR_VAR 0 4
55171: PUSH
55172: LD_VAR 0 1
55176: PUSH
55177: LD_INT 1
55179: ARRAY
55180: ST_TO_ADDR
// side := GetSide ( first ) ;
55181: LD_ADDR_VAR 0 6
55185: PUSH
55186: LD_VAR 0 4
55190: PPUSH
55191: CALL_OW 255
55195: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55196: LD_EXP 34
55200: PPUSH
55201: LD_INT 81
55203: PUSH
55204: LD_VAR 0 6
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PPUSH
55213: CALL_OW 70
55217: IFFALSE 55221
// exit ;
55219: GO 55276
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55221: LD_ADDR_EXP 49
55225: PUSH
55226: LD_EXP 49
55230: PPUSH
55231: LD_VAR 0 6
55235: PPUSH
55236: LD_EXP 49
55240: PUSH
55241: LD_VAR 0 6
55245: ARRAY
55246: PUSH
55247: LD_INT 1
55249: PLUS
55250: PPUSH
55251: CALL_OW 1
55255: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55256: LD_VAR 0 6
55260: PPUSH
55261: LD_EXP 49
55265: PUSH
55266: LD_VAR 0 6
55270: ARRAY
55271: PPUSH
55272: CALL_OW 506
// end ; end ;
55276: LD_VAR 0 2
55280: RET
// function UpdateCounter ; var i ; begin
55281: LD_INT 0
55283: PPUSH
55284: PPUSH
// result := [ ] ;
55285: LD_ADDR_VAR 0 1
55289: PUSH
55290: EMPTY
55291: ST_TO_ADDR
// if mpTeamGame then
55292: LD_EXP 11
55296: IFFALSE 55363
// begin for i := 1 to mpTeams do
55298: LD_ADDR_VAR 0 2
55302: PUSH
55303: DOUBLE
55304: LD_INT 1
55306: DEC
55307: ST_TO_ADDR
55308: LD_EXP 10
55312: PUSH
55313: FOR_TO
55314: IFFALSE 55359
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55316: LD_ADDR_VAR 0 1
55320: PUSH
55321: LD_VAR 0 1
55325: PUSH
55326: LD_STRING #KingoftheHill-Team
55328: PUSH
55329: LD_VAR 0 2
55333: PUSH
55334: LD_EXP 49
55338: PUSH
55339: LD_VAR 0 2
55343: ARRAY
55344: PUSH
55345: LD_EXP 35
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: ADD
55356: ST_TO_ADDR
55357: GO 55313
55359: POP
55360: POP
// end else
55361: GO 55436
// begin for i := 1 to 8 do
55363: LD_ADDR_VAR 0 2
55367: PUSH
55368: DOUBLE
55369: LD_INT 1
55371: DEC
55372: ST_TO_ADDR
55373: LD_INT 8
55375: PUSH
55376: FOR_TO
55377: IFFALSE 55434
// if mpSidePositions [ i ] then
55379: LD_EXP 7
55383: PUSH
55384: LD_VAR 0 2
55388: ARRAY
55389: IFFALSE 55432
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55391: LD_ADDR_VAR 0 1
55395: PUSH
55396: LD_VAR 0 1
55400: PUSH
55401: LD_STRING #KingoftheHill-Player
55403: PUSH
55404: LD_VAR 0 2
55408: PUSH
55409: LD_EXP 49
55413: PUSH
55414: LD_VAR 0 2
55418: ARRAY
55419: PUSH
55420: LD_EXP 35
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: ADD
55431: ST_TO_ADDR
55432: GO 55376
55434: POP
55435: POP
// end ; mpDisplayStrings := result ;
55436: LD_ADDR_EXP 38
55440: PUSH
55441: LD_VAR 0 1
55445: ST_TO_ADDR
// end ;
55446: LD_VAR 0 1
55450: RET
// export function HowMuchPointsKing ( side ) ; begin
55451: LD_INT 0
55453: PPUSH
// result := HowMuchPoints ( side ) ;
55454: LD_ADDR_VAR 0 2
55458: PUSH
55459: LD_VAR 0 1
55463: PPUSH
55464: CALL 55474 0 1
55468: ST_TO_ADDR
// end ;
55469: LD_VAR 0 2
55473: RET
// function HowMuchPoints ( side ) ; var i ; begin
55474: LD_INT 0
55476: PPUSH
55477: PPUSH
// if mpTeamGame then
55478: LD_EXP 11
55482: IFFALSE 55551
// begin for i := 1 to Count ( mpTeams ) do
55484: LD_ADDR_VAR 0 3
55488: PUSH
55489: DOUBLE
55490: LD_INT 1
55492: DEC
55493: ST_TO_ADDR
55494: LD_EXP 10
55498: PPUSH
55499: CALL 5225 0 1
55503: PUSH
55504: FOR_TO
55505: IFFALSE 55547
// begin if side in mpTeams [ i ] then
55507: LD_VAR 0 1
55511: PUSH
55512: LD_EXP 10
55516: PUSH
55517: LD_VAR 0 3
55521: ARRAY
55522: IN
55523: IFFALSE 55545
// begin result := mpKingPoints [ i ] ;
55525: LD_ADDR_VAR 0 2
55529: PUSH
55530: LD_EXP 49
55534: PUSH
55535: LD_VAR 0 3
55539: ARRAY
55540: ST_TO_ADDR
// exit ;
55541: POP
55542: POP
55543: GO 55567
// end ; end ;
55545: GO 55504
55547: POP
55548: POP
// end else
55549: GO 55567
// result := mpKingPoints [ side ] ;
55551: LD_ADDR_VAR 0 2
55555: PUSH
55556: LD_EXP 49
55560: PUSH
55561: LD_VAR 0 1
55565: ARRAY
55566: ST_TO_ADDR
// end ;
55567: LD_VAR 0 2
55571: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55572: LD_EXP 39
55576: IFFALSE 55584
55578: PUSH
55579: CALL 55996 0 0
55583: AND
55584: IFFALSE 55592
55586: PUSH
55587: LD_OWVAR 4
55591: AND
55592: IFFALSE 55845
55594: GO 55596
55596: DISABLE
55597: LD_INT 0
55599: PPUSH
55600: PPUSH
// begin canWin := false ;
55601: LD_ADDR_VAR 0 2
55605: PUSH
55606: LD_INT 0
55608: ST_TO_ADDR
// if not HasPower ( your_side ) then
55609: LD_OWVAR 2
55613: PPUSH
55614: CALL 56038 0 1
55618: NOT
55619: IFFALSE 55630
// begin Multiplayer_Loose_Message ;
55621: CALL_OW 521
// enable ( mpLose ) ;
55625: LD_INT 102
55627: ENABLE_MARKED
// end else
55628: GO 55845
// begin if not EnemiesInGame then
55630: CALL 55848 0 0
55634: NOT
55635: IFFALSE 55642
// begin enable ( mpWin ) ;
55637: LD_INT 101
55639: ENABLE_MARKED
// exit ;
55640: GO 55845
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55642: LD_ADDR_VAR 0 2
55646: PUSH
55647: LD_OWVAR 2
55651: PPUSH
55652: CALL 55474 0 1
55656: PUSH
55657: LD_EXP 35
55661: GREATEREQUAL
55662: IFFALSE 55675
55664: PUSH
55665: LD_OWVAR 2
55669: PPUSH
55670: CALL 56038 0 1
55674: AND
55675: ST_TO_ADDR
// for i := 1 to 8 do
55676: LD_ADDR_VAR 0 1
55680: PUSH
55681: DOUBLE
55682: LD_INT 1
55684: DEC
55685: ST_TO_ADDR
55686: LD_INT 8
55688: PUSH
55689: FOR_TO
55690: IFFALSE 55831
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55692: LD_EXP 7
55696: PUSH
55697: LD_VAR 0 1
55701: ARRAY
55702: IFFALSE 55715
55704: PUSH
55705: LD_VAR 0 1
55709: PPUSH
55710: CALL_OW 108
55714: AND
55715: IFFALSE 55729
55717: PUSH
55718: LD_VAR 0 1
55722: PUSH
55723: LD_OWVAR 2
55727: NONEQUAL
55728: AND
55729: IFFALSE 55829
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55731: LD_EXP 8
55735: PUSH
55736: LD_VAR 0 1
55740: ARRAY
55741: NOT
55742: IFTRUE 55790
55744: PUSH
55745: LD_EXP 8
55749: PUSH
55750: LD_VAR 0 1
55754: ARRAY
55755: PUSH
55756: LD_EXP 8
55760: PUSH
55761: LD_OWVAR 2
55765: ARRAY
55766: NONEQUAL
55767: IFFALSE 55789
55769: PUSH
55770: LD_OWVAR 2
55774: PPUSH
55775: LD_VAR 0 1
55779: PPUSH
55780: CALL_OW 81
55784: PUSH
55785: LD_INT 1
55787: NONEQUAL
55788: AND
55789: OR
55790: IFFALSE 55829
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55792: LD_VAR 0 1
55796: PPUSH
55797: CALL 55474 0 1
55801: PUSH
55802: LD_EXP 35
55806: GREATEREQUAL
55807: IFFALSE 55820
55809: PUSH
55810: LD_VAR 0 1
55814: PPUSH
55815: CALL 56038 0 1
55819: AND
55820: IFFALSE 55829
// begin enable ( mpLose ) ;
55822: LD_INT 102
55824: ENABLE_MARKED
// exit ;
55825: POP
55826: POP
55827: GO 55845
// end ;
55829: GO 55689
55831: POP
55832: POP
// if canWin then
55833: LD_VAR 0 2
55837: IFFALSE 55844
// enable ( mpWin ) else
55839: LD_INT 101
55841: ENABLE_MARKED
55842: GO 55845
// enable ;
55844: ENABLE
// end ; end ;
55845: PPOPN 2
55847: END
// function EnemiesInGame ; var i ; begin
55848: LD_INT 0
55850: PPUSH
55851: PPUSH
// result := false ;
55852: LD_ADDR_VAR 0 1
55856: PUSH
55857: LD_INT 0
55859: ST_TO_ADDR
// for i := 1 to 8 do
55860: LD_ADDR_VAR 0 2
55864: PUSH
55865: DOUBLE
55866: LD_INT 1
55868: DEC
55869: ST_TO_ADDR
55870: LD_INT 8
55872: PUSH
55873: FOR_TO
55874: IFFALSE 55989
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55876: LD_VAR 0 2
55880: PUSH
55881: LD_OWVAR 2
55885: NONEQUAL
55886: IFFALSE 55899
55888: PUSH
55889: LD_VAR 0 2
55893: PPUSH
55894: CALL 56038 0 1
55898: AND
55899: IFFALSE 55912
55901: PUSH
55902: LD_VAR 0 2
55906: PPUSH
55907: CALL_OW 108
55911: AND
55912: IFFALSE 55987
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55914: LD_EXP 8
55918: PUSH
55919: LD_VAR 0 2
55923: ARRAY
55924: NOT
55925: IFTRUE 55973
55927: PUSH
55928: LD_EXP 8
55932: PUSH
55933: LD_VAR 0 2
55937: ARRAY
55938: PUSH
55939: LD_EXP 8
55943: PUSH
55944: LD_OWVAR 2
55948: ARRAY
55949: NONEQUAL
55950: IFFALSE 55972
55952: PUSH
55953: LD_OWVAR 2
55957: PPUSH
55958: LD_VAR 0 2
55962: PPUSH
55963: CALL_OW 81
55967: PUSH
55968: LD_INT 1
55970: NONEQUAL
55971: AND
55972: OR
55973: IFFALSE 55987
// begin result := true ;
55975: LD_ADDR_VAR 0 1
55979: PUSH
55980: LD_INT 1
55982: ST_TO_ADDR
// exit ;
55983: POP
55984: POP
55985: GO 55991
// end ;
55987: GO 55873
55989: POP
55990: POP
// end ;
55991: LD_VAR 0 1
55995: RET
// function CanWinLoose ; begin
55996: LD_INT 0
55998: PPUSH
// result := true ;
55999: LD_ADDR_VAR 0 1
56003: PUSH
56004: LD_INT 1
56006: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56007: CALL_OW 531
56011: IFFALSE 56023
56013: PUSH
56014: CALL_OW 519
56018: PUSH
56019: LD_INT 1
56021: GREATER
56022: AND
56023: IFFALSE 56033
// result := false ;
56025: LD_ADDR_VAR 0 1
56029: PUSH
56030: LD_INT 0
56032: ST_TO_ADDR
// end ;
56033: LD_VAR 0 1
56037: RET
// function HasPower ( i ) ; begin
56038: LD_INT 0
56040: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56041: LD_ADDR_VAR 0 2
56045: PUSH
56046: LD_INT 22
56048: PUSH
56049: LD_VAR 0 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: LD_INT 21
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 33
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 33
56083: PUSH
56084: LD_INT 5
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PPUSH
56101: CALL_OW 69
56105: ST_TO_ADDR
// end ; end_of_file end_of_file
56106: LD_VAR 0 2
56110: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56111: LD_VAR 0 1
56115: PUSH
56116: LD_INT 200
56118: DOUBLE
56119: GREATEREQUAL
56120: IFFALSE 56128
56122: LD_INT 299
56124: DOUBLE
56125: LESSEQUAL
56126: IFTRUE 56130
56128: GO 56162
56130: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56131: LD_VAR 0 1
56135: PPUSH
56136: LD_VAR 0 2
56140: PPUSH
56141: LD_VAR 0 3
56145: PPUSH
56146: LD_VAR 0 4
56150: PPUSH
56151: LD_VAR 0 5
56155: PPUSH
56156: CALL 57024 0 5
56160: GO 56239
56162: LD_INT 300
56164: DOUBLE
56165: GREATEREQUAL
56166: IFFALSE 56174
56168: LD_INT 399
56170: DOUBLE
56171: LESSEQUAL
56172: IFTRUE 56176
56174: GO 56238
56176: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56177: LD_VAR 0 1
56181: PPUSH
56182: LD_VAR 0 2
56186: PPUSH
56187: LD_VAR 0 3
56191: PPUSH
56192: LD_VAR 0 4
56196: PPUSH
56197: LD_VAR 0 5
56201: PPUSH
56202: LD_VAR 0 6
56206: PPUSH
56207: LD_VAR 0 7
56211: PPUSH
56212: LD_VAR 0 8
56216: PPUSH
56217: LD_VAR 0 9
56221: PPUSH
56222: LD_VAR 0 10
56226: PPUSH
56227: LD_VAR 0 11
56231: PPUSH
56232: CALL 63345 0 11
56236: GO 56239
56238: POP
// end ;
56239: PPOPN 11
56241: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56242: LD_VAR 0 1
56246: PPUSH
56247: LD_VAR 0 2
56251: PPUSH
56252: LD_VAR 0 3
56256: PPUSH
56257: LD_VAR 0 4
56261: PPUSH
56262: LD_VAR 0 5
56266: PPUSH
56267: CALL 56324 0 5
// end ; end_of_file
56271: PPOPN 5
56273: END
// export function SOS_UnitDestroyed ( un ) ; begin
56274: LD_INT 0
56276: PPUSH
// ComRadiation ( un ) ;
56277: LD_VAR 0 1
56281: PPUSH
56282: CALL 57444 0 1
// end ;
56286: LD_VAR 0 2
56290: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56291: LD_INT 0
56293: PPUSH
// ComRadiation ( un ) ;
56294: LD_VAR 0 1
56298: PPUSH
56299: CALL 57444 0 1
// end ;
56303: LD_VAR 0 2
56307: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56308: LD_INT 0
56310: PPUSH
// end ;
56311: LD_VAR 0 4
56315: RET
// export function SOS_Command ( cmd ) ; begin
56316: LD_INT 0
56318: PPUSH
// end ;
56319: LD_VAR 0 2
56323: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56324: LD_INT 0
56326: PPUSH
// end ;
56327: LD_VAR 0 6
56331: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56332: LD_INT 0
56334: PPUSH
56335: PPUSH
56336: PPUSH
56337: PPUSH
56338: PPUSH
// if not vehicle or not factory then
56339: LD_VAR 0 1
56343: NOT
56344: IFTRUE 56353
56346: PUSH
56347: LD_VAR 0 2
56351: NOT
56352: OR
56353: IFFALSE 56357
// exit ;
56355: GO 57019
// weapon := GetWeapon ( vehicle ) ;
56357: LD_ADDR_VAR 0 7
56361: PUSH
56362: LD_VAR 0 1
56366: PPUSH
56367: CALL_OW 264
56371: ST_TO_ADDR
// if weapon = ar_miner then
56372: LD_VAR 0 7
56376: PUSH
56377: LD_INT 81
56379: EQUAL
56380: IFFALSE 56437
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56382: LD_ADDR_EXP 57
56386: PUSH
56387: LD_EXP 57
56391: PPUSH
56392: LD_EXP 57
56396: PUSH
56397: LD_INT 1
56399: PLUS
56400: PPUSH
56401: LD_VAR 0 1
56405: PPUSH
56406: CALL_OW 1
56410: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56411: LD_ADDR_EXP 58
56415: PUSH
56416: LD_EXP 58
56420: PPUSH
56421: LD_EXP 58
56425: PUSH
56426: LD_INT 1
56428: PLUS
56429: PPUSH
56430: EMPTY
56431: PPUSH
56432: CALL_OW 1
56436: ST_TO_ADDR
// end ; if not factoryWaypoints then
56437: LD_EXP 60
56441: NOT
56442: IFFALSE 56446
// exit ;
56444: GO 57019
// for i := 1 to Count ( factoryWaypoints ) do
56446: LD_ADDR_VAR 0 4
56450: PUSH
56451: DOUBLE
56452: LD_INT 1
56454: DEC
56455: ST_TO_ADDR
56456: LD_EXP 60
56460: PPUSH
56461: CALL 5225 0 1
56465: PUSH
56466: FOR_TO
56467: IFFALSE 57017
// if factoryWaypoints [ i ] [ 2 ] = factory then
56469: LD_EXP 60
56473: PUSH
56474: LD_VAR 0 4
56478: ARRAY
56479: PUSH
56480: LD_INT 2
56482: ARRAY
56483: PUSH
56484: LD_VAR 0 2
56488: EQUAL
56489: IFFALSE 57015
// begin if GetControl ( vehicle ) = control_manual then
56491: LD_VAR 0 1
56495: PPUSH
56496: CALL_OW 263
56500: PUSH
56501: LD_INT 1
56503: EQUAL
56504: IFFALSE 56868
// begin driver := IsDrivenBy ( vehicle ) ;
56506: LD_ADDR_VAR 0 5
56510: PUSH
56511: LD_VAR 0 1
56515: PPUSH
56516: CALL_OW 311
56520: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56521: LD_VAR 0 5
56525: PUSH
56526: LD_EXP 61
56530: IN
56531: IFTRUE 56545
56533: PUSH
56534: LD_VAR 0 1
56538: PUSH
56539: LD_EXP 61
56543: IN
56544: OR
56545: IFFALSE 56551
// exit ;
56547: POP
56548: POP
56549: GO 57019
// if not HasTask ( driver ) then
56551: LD_VAR 0 5
56555: PPUSH
56556: CALL_OW 314
56560: NOT
56561: IFFALSE 56866
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56563: LD_ADDR_EXP 61
56567: PUSH
56568: LD_EXP 61
56572: PPUSH
56573: LD_VAR 0 5
56577: PPUSH
56578: CALL 41191 0 2
56582: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56583: LD_ADDR_EXP 61
56587: PUSH
56588: LD_EXP 61
56592: PPUSH
56593: LD_VAR 0 1
56597: PPUSH
56598: CALL 41191 0 2
56602: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56603: LD_ADDR_VAR 0 6
56607: PUSH
56608: LD_EXP 60
56612: PUSH
56613: LD_VAR 0 4
56617: ARRAY
56618: PUSH
56619: LD_INT 3
56621: ARRAY
56622: PPUSH
56623: LD_EXP 60
56627: PUSH
56628: LD_VAR 0 4
56632: ARRAY
56633: PUSH
56634: LD_INT 4
56636: ARRAY
56637: PPUSH
56638: CALL_OW 428
56642: ST_TO_ADDR
// if hex then
56643: LD_VAR 0 6
56647: IFFALSE 56665
// ComMoveUnit ( driver , hex ) else
56649: LD_VAR 0 5
56653: PPUSH
56654: LD_VAR 0 6
56658: PPUSH
56659: CALL_OW 112
56663: GO 56749
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56665: LD_VAR 0 1
56669: PPUSH
56670: LD_EXP 60
56674: PUSH
56675: LD_VAR 0 4
56679: ARRAY
56680: PUSH
56681: LD_INT 3
56683: ARRAY
56684: PPUSH
56685: LD_EXP 60
56689: PUSH
56690: LD_VAR 0 4
56694: ARRAY
56695: PUSH
56696: LD_INT 4
56698: ARRAY
56699: PPUSH
56700: CALL_OW 297
56704: PUSH
56705: LD_INT 0
56707: GREATER
56708: IFFALSE 56749
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56710: LD_VAR 0 5
56714: PPUSH
56715: LD_EXP 60
56719: PUSH
56720: LD_VAR 0 4
56724: ARRAY
56725: PUSH
56726: LD_INT 3
56728: ARRAY
56729: PPUSH
56730: LD_EXP 60
56734: PUSH
56735: LD_VAR 0 4
56739: ARRAY
56740: PUSH
56741: LD_INT 4
56743: ARRAY
56744: PPUSH
56745: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56749: LD_VAR 0 5
56753: PPUSH
56754: CALL_OW 181
// if Multiplayer then
56758: LD_OWVAR 4
56762: IFFALSE 56811
// begin repeat wait ( 10 ) ;
56764: LD_INT 10
56766: PPUSH
56767: CALL_OW 67
// until not IsInUnit ( driver ) ;
56771: LD_VAR 0 5
56775: PPUSH
56776: CALL_OW 310
56780: NOT
56781: IFFALSE 56764
// if not HasTask ( driver ) then
56783: LD_VAR 0 5
56787: PPUSH
56788: CALL_OW 314
56792: NOT
56793: IFFALSE 56809
// ComEnterUnit ( driver , factory ) ;
56795: LD_VAR 0 5
56799: PPUSH
56800: LD_VAR 0 2
56804: PPUSH
56805: CALL_OW 120
// end else
56809: GO 56825
// AddComEnterUnit ( driver , factory ) ;
56811: LD_VAR 0 5
56815: PPUSH
56816: LD_VAR 0 2
56820: PPUSH
56821: CALL_OW 180
// wait ( 0 0$1 ) ;
56825: LD_INT 35
56827: PPUSH
56828: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56832: LD_ADDR_EXP 61
56836: PUSH
56837: LD_EXP 61
56841: PUSH
56842: LD_VAR 0 5
56846: DIFF
56847: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56848: LD_ADDR_EXP 61
56852: PUSH
56853: LD_EXP 61
56857: PUSH
56858: LD_VAR 0 1
56862: DIFF
56863: ST_TO_ADDR
// break ;
56864: GO 57017
// end ; end else
56866: GO 57015
// if GetControl ( vehicle ) = control_remote then
56868: LD_VAR 0 1
56872: PPUSH
56873: CALL_OW 263
56877: PUSH
56878: LD_INT 2
56880: EQUAL
56881: IFFALSE 56967
// begin wait ( 0 0$2 ) ;
56883: LD_INT 70
56885: PPUSH
56886: CALL_OW 67
// repeat wait ( 10 ) ;
56890: LD_INT 10
56892: PPUSH
56893: CALL_OW 67
// Connect ( vehicle ) ;
56897: LD_VAR 0 1
56901: PPUSH
56902: CALL 11503 0 1
// until IsControledBy ( vehicle ) ;
56906: LD_VAR 0 1
56910: PPUSH
56911: CALL_OW 312
56915: IFFALSE 56890
// wait ( 10 ) ;
56917: LD_INT 10
56919: PPUSH
56920: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56924: LD_VAR 0 1
56928: PPUSH
56929: LD_EXP 60
56933: PUSH
56934: LD_VAR 0 4
56938: ARRAY
56939: PUSH
56940: LD_INT 3
56942: ARRAY
56943: PPUSH
56944: LD_EXP 60
56948: PUSH
56949: LD_VAR 0 4
56953: ARRAY
56954: PUSH
56955: LD_INT 4
56957: ARRAY
56958: PPUSH
56959: CALL_OW 111
// break ;
56963: GO 57017
// end else
56965: GO 57015
// begin wait ( 0 0$3 ) ;
56967: LD_INT 105
56969: PPUSH
56970: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56974: LD_VAR 0 1
56978: PPUSH
56979: LD_EXP 60
56983: PUSH
56984: LD_VAR 0 4
56988: ARRAY
56989: PUSH
56990: LD_INT 3
56992: ARRAY
56993: PPUSH
56994: LD_EXP 60
56998: PUSH
56999: LD_VAR 0 4
57003: ARRAY
57004: PUSH
57005: LD_INT 4
57007: ARRAY
57008: PPUSH
57009: CALL_OW 111
// break ;
57013: GO 57017
// end ; end ;
57015: GO 56466
57017: POP
57018: POP
// end ;
57019: LD_VAR 0 3
57023: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57024: LD_INT 0
57026: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57027: LD_VAR 0 1
57031: PUSH
57032: LD_INT 250
57034: EQUAL
57035: IFFALSE 57052
57037: PUSH
57038: LD_VAR 0 2
57042: PPUSH
57043: CALL_OW 264
57047: PUSH
57048: LD_INT 81
57050: EQUAL
57051: AND
57052: IFFALSE 57073
// MinerPlaceMine ( unit , x , y ) ;
57054: LD_VAR 0 2
57058: PPUSH
57059: LD_VAR 0 4
57063: PPUSH
57064: LD_VAR 0 5
57068: PPUSH
57069: CALL 60354 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57073: LD_VAR 0 1
57077: PUSH
57078: LD_INT 251
57080: EQUAL
57081: IFFALSE 57098
57083: PUSH
57084: LD_VAR 0 2
57088: PPUSH
57089: CALL_OW 264
57093: PUSH
57094: LD_INT 81
57096: EQUAL
57097: AND
57098: IFFALSE 57119
// MinerDetonateMine ( unit , x , y ) ;
57100: LD_VAR 0 2
57104: PPUSH
57105: LD_VAR 0 4
57109: PPUSH
57110: LD_VAR 0 5
57114: PPUSH
57115: CALL 60761 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57119: LD_VAR 0 1
57123: PUSH
57124: LD_INT 252
57126: EQUAL
57127: IFFALSE 57144
57129: PUSH
57130: LD_VAR 0 2
57134: PPUSH
57135: CALL_OW 264
57139: PUSH
57140: LD_INT 81
57142: EQUAL
57143: AND
57144: IFFALSE 57165
// MinerCreateMinefield ( unit , x , y ) ;
57146: LD_VAR 0 2
57150: PPUSH
57151: LD_VAR 0 4
57155: PPUSH
57156: LD_VAR 0 5
57160: PPUSH
57161: CALL 60993 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57165: LD_VAR 0 1
57169: PUSH
57170: LD_INT 253
57172: EQUAL
57173: IFFALSE 57190
57175: PUSH
57176: LD_VAR 0 2
57180: PPUSH
57181: CALL_OW 257
57185: PUSH
57186: LD_INT 5
57188: EQUAL
57189: AND
57190: IFFALSE 57211
// ComBinocular ( unit , x , y ) ;
57192: LD_VAR 0 2
57196: PPUSH
57197: LD_VAR 0 4
57201: PPUSH
57202: LD_VAR 0 5
57206: PPUSH
57207: CALL 61368 0 3
// if selectedUnit then
57211: LD_VAR 0 3
57215: IFFALSE 57275
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57217: LD_VAR 0 1
57221: PUSH
57222: LD_INT 254
57224: EQUAL
57225: IFFALSE 57242
57227: PUSH
57228: LD_VAR 0 2
57232: PPUSH
57233: CALL_OW 264
57237: PUSH
57238: LD_INT 99
57240: EQUAL
57241: AND
57242: IFFALSE 57259
57244: PUSH
57245: LD_VAR 0 3
57249: PPUSH
57250: CALL_OW 263
57254: PUSH
57255: LD_INT 3
57257: EQUAL
57258: AND
57259: IFFALSE 57275
// HackDestroyVehicle ( unit , selectedUnit ) ;
57261: LD_VAR 0 2
57265: PPUSH
57266: LD_VAR 0 3
57270: PPUSH
57271: CALL 59565 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57275: LD_VAR 0 1
57279: PUSH
57280: LD_INT 255
57282: EQUAL
57283: IFFALSE 57307
57285: PUSH
57286: LD_VAR 0 2
57290: PPUSH
57291: CALL_OW 264
57295: PUSH
57296: LD_INT 14
57298: PUSH
57299: LD_INT 53
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: IN
57306: AND
57307: IFFALSE 57325
57309: PUSH
57310: LD_VAR 0 4
57314: PPUSH
57315: LD_VAR 0 5
57319: PPUSH
57320: CALL_OW 488
57324: AND
57325: IFFALSE 57349
// CutTreeXYR ( unit , x , y , 12 ) ;
57327: LD_VAR 0 2
57331: PPUSH
57332: LD_VAR 0 4
57336: PPUSH
57337: LD_VAR 0 5
57341: PPUSH
57342: LD_INT 12
57344: PPUSH
57345: CALL 57540 0 4
// if cmd = 256 then
57349: LD_VAR 0 1
57353: PUSH
57354: LD_INT 256
57356: EQUAL
57357: IFFALSE 57378
// SetFactoryWaypoint ( unit , x , y ) ;
57359: LD_VAR 0 2
57363: PPUSH
57364: LD_VAR 0 4
57368: PPUSH
57369: LD_VAR 0 5
57373: PPUSH
57374: CALL 63353 0 3
// if cmd = 257 then
57378: LD_VAR 0 1
57382: PUSH
57383: LD_INT 257
57385: EQUAL
57386: IFFALSE 57407
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57388: LD_VAR 0 2
57392: PPUSH
57393: LD_VAR 0 4
57397: PPUSH
57398: LD_VAR 0 5
57402: PPUSH
57403: CALL 63849 0 3
// if cmd = 258 then
57407: LD_VAR 0 1
57411: PUSH
57412: LD_INT 258
57414: EQUAL
57415: IFFALSE 57439
// BurnTreeXYR ( unit , x , y , 8 ) ;
57417: LD_VAR 0 2
57421: PPUSH
57422: LD_VAR 0 4
57426: PPUSH
57427: LD_VAR 0 5
57431: PPUSH
57432: LD_INT 8
57434: PPUSH
57435: CALL 57940 0 4
// end ;
57439: LD_VAR 0 6
57443: RET
// export function ComRadiation ( un ) ; var eff ; begin
57444: LD_INT 0
57446: PPUSH
57447: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57448: LD_VAR 0 1
57452: PPUSH
57453: CALL_OW 264
57457: PUSH
57458: LD_INT 91
57460: NONEQUAL
57461: IFFALSE 57465
// exit ;
57463: GO 57535
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57465: LD_INT 68
57467: PPUSH
57468: LD_VAR 0 1
57472: PPUSH
57473: CALL_OW 255
57477: PPUSH
57478: CALL_OW 321
57482: PUSH
57483: LD_INT 2
57485: EQUAL
57486: IFFALSE 57498
// eff := 50 else
57488: LD_ADDR_VAR 0 3
57492: PUSH
57493: LD_INT 50
57495: ST_TO_ADDR
57496: GO 57506
// eff := 25 ;
57498: LD_ADDR_VAR 0 3
57502: PUSH
57503: LD_INT 25
57505: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57506: LD_VAR 0 1
57510: PPUSH
57511: CALL_OW 250
57515: PPUSH
57516: LD_VAR 0 1
57520: PPUSH
57521: CALL_OW 251
57525: PPUSH
57526: LD_VAR 0 3
57530: PPUSH
57531: CALL_OW 495
// end ;
57535: LD_VAR 0 2
57539: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57540: LD_INT 0
57542: PPUSH
57543: PPUSH
57544: PPUSH
57545: PPUSH
57546: PPUSH
57547: PPUSH
57548: PPUSH
57549: PPUSH
57550: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57551: LD_VAR 0 1
57555: PPUSH
57556: CALL_OW 302
57560: NOT
57561: IFTRUE 57580
57563: PUSH
57564: LD_VAR 0 2
57568: PPUSH
57569: LD_VAR 0 3
57573: PPUSH
57574: CALL_OW 488
57578: NOT
57579: OR
57580: IFTRUE 57589
57582: PUSH
57583: LD_VAR 0 4
57587: NOT
57588: OR
57589: IFFALSE 57593
// exit ;
57591: GO 57935
// list := [ ] ;
57593: LD_ADDR_VAR 0 13
57597: PUSH
57598: EMPTY
57599: ST_TO_ADDR
// if x - r < 0 then
57600: LD_VAR 0 2
57604: PUSH
57605: LD_VAR 0 4
57609: MINUS
57610: PUSH
57611: LD_INT 0
57613: LESS
57614: IFFALSE 57626
// min_x := 0 else
57616: LD_ADDR_VAR 0 7
57620: PUSH
57621: LD_INT 0
57623: ST_TO_ADDR
57624: GO 57642
// min_x := x - r ;
57626: LD_ADDR_VAR 0 7
57630: PUSH
57631: LD_VAR 0 2
57635: PUSH
57636: LD_VAR 0 4
57640: MINUS
57641: ST_TO_ADDR
// if y - r < 0 then
57642: LD_VAR 0 3
57646: PUSH
57647: LD_VAR 0 4
57651: MINUS
57652: PUSH
57653: LD_INT 0
57655: LESS
57656: IFFALSE 57668
// min_y := 0 else
57658: LD_ADDR_VAR 0 8
57662: PUSH
57663: LD_INT 0
57665: ST_TO_ADDR
57666: GO 57684
// min_y := y - r ;
57668: LD_ADDR_VAR 0 8
57672: PUSH
57673: LD_VAR 0 3
57677: PUSH
57678: LD_VAR 0 4
57682: MINUS
57683: ST_TO_ADDR
// max_x := x + r ;
57684: LD_ADDR_VAR 0 9
57688: PUSH
57689: LD_VAR 0 2
57693: PUSH
57694: LD_VAR 0 4
57698: PLUS
57699: ST_TO_ADDR
// max_y := y + r ;
57700: LD_ADDR_VAR 0 10
57704: PUSH
57705: LD_VAR 0 3
57709: PUSH
57710: LD_VAR 0 4
57714: PLUS
57715: ST_TO_ADDR
// for _x = min_x to max_x do
57716: LD_ADDR_VAR 0 11
57720: PUSH
57721: DOUBLE
57722: LD_VAR 0 7
57726: DEC
57727: ST_TO_ADDR
57728: LD_VAR 0 9
57732: PUSH
57733: FOR_TO
57734: IFFALSE 57853
// for _y = min_y to max_y do
57736: LD_ADDR_VAR 0 12
57740: PUSH
57741: DOUBLE
57742: LD_VAR 0 8
57746: DEC
57747: ST_TO_ADDR
57748: LD_VAR 0 10
57752: PUSH
57753: FOR_TO
57754: IFFALSE 57849
// begin if not ValidHex ( _x , _y ) then
57756: LD_VAR 0 11
57760: PPUSH
57761: LD_VAR 0 12
57765: PPUSH
57766: CALL_OW 488
57770: NOT
57771: IFFALSE 57775
// continue ;
57773: GO 57753
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57775: LD_VAR 0 11
57779: PPUSH
57780: LD_VAR 0 12
57784: PPUSH
57785: CALL_OW 351
57789: IFFALSE 57807
57791: PUSH
57792: LD_VAR 0 11
57796: PPUSH
57797: LD_VAR 0 12
57801: PPUSH
57802: CALL_OW 554
57806: AND
57807: IFFALSE 57847
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57809: LD_ADDR_VAR 0 13
57813: PUSH
57814: LD_VAR 0 13
57818: PPUSH
57819: LD_VAR 0 13
57823: PUSH
57824: LD_INT 1
57826: PLUS
57827: PPUSH
57828: LD_VAR 0 11
57832: PUSH
57833: LD_VAR 0 12
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PPUSH
57842: CALL_OW 2
57846: ST_TO_ADDR
// end ;
57847: GO 57753
57849: POP
57850: POP
57851: GO 57733
57853: POP
57854: POP
// if not list then
57855: LD_VAR 0 13
57859: NOT
57860: IFFALSE 57864
// exit ;
57862: GO 57935
// for i in list do
57864: LD_ADDR_VAR 0 6
57868: PUSH
57869: LD_VAR 0 13
57873: PUSH
57874: FOR_IN
57875: IFFALSE 57933
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57877: LD_VAR 0 1
57881: PPUSH
57882: LD_STRING M
57884: PUSH
57885: LD_VAR 0 6
57889: PUSH
57890: LD_INT 1
57892: ARRAY
57893: PUSH
57894: LD_VAR 0 6
57898: PUSH
57899: LD_INT 2
57901: ARRAY
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: PUSH
57924: EMPTY
57925: LIST
57926: PPUSH
57927: CALL_OW 447
57931: GO 57874
57933: POP
57934: POP
// end ;
57935: LD_VAR 0 5
57939: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57940: LD_INT 0
57942: PPUSH
57943: PPUSH
57944: PPUSH
57945: PPUSH
57946: PPUSH
57947: PPUSH
57948: PPUSH
57949: PPUSH
57950: PPUSH
57951: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57952: LD_VAR 0 1
57956: PPUSH
57957: CALL_OW 302
57961: NOT
57962: IFTRUE 57981
57964: PUSH
57965: LD_VAR 0 2
57969: PPUSH
57970: LD_VAR 0 3
57974: PPUSH
57975: CALL_OW 488
57979: NOT
57980: OR
57981: IFTRUE 57990
57983: PUSH
57984: LD_VAR 0 4
57988: NOT
57989: OR
57990: IFFALSE 57994
// exit ;
57992: GO 58511
// list := [ ] ;
57994: LD_ADDR_VAR 0 13
57998: PUSH
57999: EMPTY
58000: ST_TO_ADDR
// if x - r < 0 then
58001: LD_VAR 0 2
58005: PUSH
58006: LD_VAR 0 4
58010: MINUS
58011: PUSH
58012: LD_INT 0
58014: LESS
58015: IFFALSE 58027
// min_x := 0 else
58017: LD_ADDR_VAR 0 7
58021: PUSH
58022: LD_INT 0
58024: ST_TO_ADDR
58025: GO 58043
// min_x := x - r ;
58027: LD_ADDR_VAR 0 7
58031: PUSH
58032: LD_VAR 0 2
58036: PUSH
58037: LD_VAR 0 4
58041: MINUS
58042: ST_TO_ADDR
// if y - r < 0 then
58043: LD_VAR 0 3
58047: PUSH
58048: LD_VAR 0 4
58052: MINUS
58053: PUSH
58054: LD_INT 0
58056: LESS
58057: IFFALSE 58069
// min_y := 0 else
58059: LD_ADDR_VAR 0 8
58063: PUSH
58064: LD_INT 0
58066: ST_TO_ADDR
58067: GO 58085
// min_y := y - r ;
58069: LD_ADDR_VAR 0 8
58073: PUSH
58074: LD_VAR 0 3
58078: PUSH
58079: LD_VAR 0 4
58083: MINUS
58084: ST_TO_ADDR
// max_x := x + r ;
58085: LD_ADDR_VAR 0 9
58089: PUSH
58090: LD_VAR 0 2
58094: PUSH
58095: LD_VAR 0 4
58099: PLUS
58100: ST_TO_ADDR
// max_y := y + r ;
58101: LD_ADDR_VAR 0 10
58105: PUSH
58106: LD_VAR 0 3
58110: PUSH
58111: LD_VAR 0 4
58115: PLUS
58116: ST_TO_ADDR
// for _x = min_x to max_x do
58117: LD_ADDR_VAR 0 11
58121: PUSH
58122: DOUBLE
58123: LD_VAR 0 7
58127: DEC
58128: ST_TO_ADDR
58129: LD_VAR 0 9
58133: PUSH
58134: FOR_TO
58135: IFFALSE 58254
// for _y = min_y to max_y do
58137: LD_ADDR_VAR 0 12
58141: PUSH
58142: DOUBLE
58143: LD_VAR 0 8
58147: DEC
58148: ST_TO_ADDR
58149: LD_VAR 0 10
58153: PUSH
58154: FOR_TO
58155: IFFALSE 58250
// begin if not ValidHex ( _x , _y ) then
58157: LD_VAR 0 11
58161: PPUSH
58162: LD_VAR 0 12
58166: PPUSH
58167: CALL_OW 488
58171: NOT
58172: IFFALSE 58176
// continue ;
58174: GO 58154
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58176: LD_VAR 0 11
58180: PPUSH
58181: LD_VAR 0 12
58185: PPUSH
58186: CALL_OW 351
58190: IFFALSE 58208
58192: PUSH
58193: LD_VAR 0 11
58197: PPUSH
58198: LD_VAR 0 12
58202: PPUSH
58203: CALL_OW 554
58207: AND
58208: IFFALSE 58248
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58210: LD_ADDR_VAR 0 13
58214: PUSH
58215: LD_VAR 0 13
58219: PPUSH
58220: LD_VAR 0 13
58224: PUSH
58225: LD_INT 1
58227: PLUS
58228: PPUSH
58229: LD_VAR 0 11
58233: PUSH
58234: LD_VAR 0 12
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PPUSH
58243: CALL_OW 2
58247: ST_TO_ADDR
// end ;
58248: GO 58154
58250: POP
58251: POP
58252: GO 58134
58254: POP
58255: POP
// if not list then
58256: LD_VAR 0 13
58260: NOT
58261: IFFALSE 58265
// exit ;
58263: GO 58511
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58265: LD_ADDR_VAR 0 13
58269: PUSH
58270: LD_VAR 0 1
58274: PPUSH
58275: LD_VAR 0 13
58279: PPUSH
58280: LD_INT 1
58282: PPUSH
58283: LD_INT 1
58285: PPUSH
58286: CALL 8631 0 4
58290: ST_TO_ADDR
// ComStop ( flame ) ;
58291: LD_VAR 0 1
58295: PPUSH
58296: CALL_OW 141
// for i in list do
58300: LD_ADDR_VAR 0 6
58304: PUSH
58305: LD_VAR 0 13
58309: PUSH
58310: FOR_IN
58311: IFFALSE 58342
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58313: LD_VAR 0 1
58317: PPUSH
58318: LD_VAR 0 6
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PPUSH
58327: LD_VAR 0 6
58331: PUSH
58332: LD_INT 2
58334: ARRAY
58335: PPUSH
58336: CALL_OW 176
58340: GO 58310
58342: POP
58343: POP
// repeat wait ( 0 0$1 ) ;
58344: LD_INT 35
58346: PPUSH
58347: CALL_OW 67
// task := GetTaskList ( flame ) ;
58351: LD_ADDR_VAR 0 14
58355: PUSH
58356: LD_VAR 0 1
58360: PPUSH
58361: CALL_OW 437
58365: ST_TO_ADDR
// if not task then
58366: LD_VAR 0 14
58370: NOT
58371: IFFALSE 58375
// exit ;
58373: GO 58511
// if task [ 1 ] [ 1 ] <> | then
58375: LD_VAR 0 14
58379: PUSH
58380: LD_INT 1
58382: ARRAY
58383: PUSH
58384: LD_INT 1
58386: ARRAY
58387: PUSH
58388: LD_STRING |
58390: NONEQUAL
58391: IFFALSE 58395
// exit ;
58393: GO 58511
// _x := task [ 1 ] [ 2 ] ;
58395: LD_ADDR_VAR 0 11
58399: PUSH
58400: LD_VAR 0 14
58404: PUSH
58405: LD_INT 1
58407: ARRAY
58408: PUSH
58409: LD_INT 2
58411: ARRAY
58412: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58413: LD_ADDR_VAR 0 12
58417: PUSH
58418: LD_VAR 0 14
58422: PUSH
58423: LD_INT 1
58425: ARRAY
58426: PUSH
58427: LD_INT 3
58429: ARRAY
58430: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58431: LD_VAR 0 11
58435: PPUSH
58436: LD_VAR 0 12
58440: PPUSH
58441: CALL_OW 351
58445: NOT
58446: IFTRUE 58465
58448: PUSH
58449: LD_VAR 0 11
58453: PPUSH
58454: LD_VAR 0 12
58458: PPUSH
58459: CALL_OW 554
58463: NOT
58464: OR
58465: IFFALSE 58499
// begin task := Delete ( task , 1 ) ;
58467: LD_ADDR_VAR 0 14
58471: PUSH
58472: LD_VAR 0 14
58476: PPUSH
58477: LD_INT 1
58479: PPUSH
58480: CALL_OW 3
58484: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58485: LD_VAR 0 1
58489: PPUSH
58490: LD_VAR 0 14
58494: PPUSH
58495: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58499: LD_VAR 0 1
58503: PPUSH
58504: CALL_OW 314
58508: NOT
58509: IFFALSE 58344
// end ;
58511: LD_VAR 0 5
58515: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58516: LD_EXP 50
58520: NOT
58521: IFFALSE 58571
58523: GO 58525
58525: DISABLE
// begin initHack := true ;
58526: LD_ADDR_EXP 50
58530: PUSH
58531: LD_INT 1
58533: ST_TO_ADDR
// hackTanks := [ ] ;
58534: LD_ADDR_EXP 51
58538: PUSH
58539: EMPTY
58540: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58541: LD_ADDR_EXP 52
58545: PUSH
58546: EMPTY
58547: ST_TO_ADDR
// hackLimit := 3 ;
58548: LD_ADDR_EXP 53
58552: PUSH
58553: LD_INT 3
58555: ST_TO_ADDR
// hackDist := 12 ;
58556: LD_ADDR_EXP 54
58560: PUSH
58561: LD_INT 12
58563: ST_TO_ADDR
// hackCounter := [ ] ;
58564: LD_ADDR_EXP 55
58568: PUSH
58569: EMPTY
58570: ST_TO_ADDR
// end ;
58571: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58572: LD_EXP 50
58576: IFFALSE 58594
58578: PUSH
58579: LD_INT 34
58581: PUSH
58582: LD_INT 99
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PPUSH
58589: CALL_OW 69
58593: AND
58594: IFFALSE 58847
58596: GO 58598
58598: DISABLE
58599: LD_INT 0
58601: PPUSH
58602: PPUSH
// begin enable ;
58603: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58604: LD_ADDR_VAR 0 1
58608: PUSH
58609: LD_INT 34
58611: PUSH
58612: LD_INT 99
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PPUSH
58619: CALL_OW 69
58623: PUSH
58624: FOR_IN
58625: IFFALSE 58845
// begin if not i in hackTanks then
58627: LD_VAR 0 1
58631: PUSH
58632: LD_EXP 51
58636: IN
58637: NOT
58638: IFFALSE 58721
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58640: LD_ADDR_EXP 51
58644: PUSH
58645: LD_EXP 51
58649: PPUSH
58650: LD_EXP 51
58654: PUSH
58655: LD_INT 1
58657: PLUS
58658: PPUSH
58659: LD_VAR 0 1
58663: PPUSH
58664: CALL_OW 1
58668: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58669: LD_ADDR_EXP 52
58673: PUSH
58674: LD_EXP 52
58678: PPUSH
58679: LD_EXP 52
58683: PUSH
58684: LD_INT 1
58686: PLUS
58687: PPUSH
58688: EMPTY
58689: PPUSH
58690: CALL_OW 1
58694: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58695: LD_ADDR_EXP 55
58699: PUSH
58700: LD_EXP 55
58704: PPUSH
58705: LD_EXP 55
58709: PUSH
58710: LD_INT 1
58712: PLUS
58713: PPUSH
58714: EMPTY
58715: PPUSH
58716: CALL_OW 1
58720: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58721: LD_VAR 0 1
58725: PPUSH
58726: CALL_OW 302
58730: NOT
58731: IFFALSE 58744
// begin HackUnlinkAll ( i ) ;
58733: LD_VAR 0 1
58737: PPUSH
58738: CALL 58850 0 1
// continue ;
58742: GO 58624
// end ; HackCheckCapturedStatus ( i ) ;
58744: LD_VAR 0 1
58748: PPUSH
58749: CALL 59295 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58753: LD_ADDR_VAR 0 2
58757: PUSH
58758: LD_INT 81
58760: PUSH
58761: LD_VAR 0 1
58765: PPUSH
58766: CALL_OW 255
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 33
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 91
58787: PUSH
58788: LD_VAR 0 1
58792: PUSH
58793: LD_EXP 54
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 50
58805: PUSH
58806: EMPTY
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: PPUSH
58815: CALL_OW 69
58819: ST_TO_ADDR
// if not tmp then
58820: LD_VAR 0 2
58824: NOT
58825: IFFALSE 58829
// continue ;
58827: GO 58624
// HackLink ( i , tmp ) ;
58829: LD_VAR 0 1
58833: PPUSH
58834: LD_VAR 0 2
58838: PPUSH
58839: CALL 58986 0 2
// end ;
58843: GO 58624
58845: POP
58846: POP
// end ;
58847: PPOPN 2
58849: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58850: LD_INT 0
58852: PPUSH
58853: PPUSH
58854: PPUSH
// if not hack in hackTanks then
58855: LD_VAR 0 1
58859: PUSH
58860: LD_EXP 51
58864: IN
58865: NOT
58866: IFFALSE 58870
// exit ;
58868: GO 58981
// index := GetElementIndex ( hackTanks , hack ) ;
58870: LD_ADDR_VAR 0 4
58874: PUSH
58875: LD_EXP 51
58879: PPUSH
58880: LD_VAR 0 1
58884: PPUSH
58885: CALL 7926 0 2
58889: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58890: LD_EXP 52
58894: PUSH
58895: LD_VAR 0 4
58899: ARRAY
58900: IFFALSE 58981
// begin for i in hackTanksCaptured [ index ] do
58902: LD_ADDR_VAR 0 3
58906: PUSH
58907: LD_EXP 52
58911: PUSH
58912: LD_VAR 0 4
58916: ARRAY
58917: PUSH
58918: FOR_IN
58919: IFFALSE 58945
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58921: LD_VAR 0 3
58925: PUSH
58926: LD_INT 1
58928: ARRAY
58929: PPUSH
58930: LD_VAR 0 3
58934: PUSH
58935: LD_INT 2
58937: ARRAY
58938: PPUSH
58939: CALL_OW 235
58943: GO 58918
58945: POP
58946: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58947: LD_ADDR_EXP 52
58951: PUSH
58952: LD_EXP 52
58956: PPUSH
58957: LD_VAR 0 4
58961: PPUSH
58962: EMPTY
58963: PPUSH
58964: CALL_OW 1
58968: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58969: LD_VAR 0 1
58973: PPUSH
58974: LD_INT 0
58976: PPUSH
58977: CALL_OW 505
// end ; end ;
58981: LD_VAR 0 2
58985: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58986: LD_INT 0
58988: PPUSH
58989: PPUSH
58990: PPUSH
// if not hack in hackTanks or not vehicles then
58991: LD_VAR 0 1
58995: PUSH
58996: LD_EXP 51
59000: IN
59001: NOT
59002: IFTRUE 59011
59004: PUSH
59005: LD_VAR 0 2
59009: NOT
59010: OR
59011: IFFALSE 59015
// exit ;
59013: GO 59290
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59015: LD_ADDR_VAR 0 2
59019: PUSH
59020: LD_VAR 0 1
59024: PPUSH
59025: LD_VAR 0 2
59029: PPUSH
59030: LD_INT 1
59032: PPUSH
59033: LD_INT 1
59035: PPUSH
59036: CALL 8578 0 4
59040: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59041: LD_ADDR_VAR 0 5
59045: PUSH
59046: LD_EXP 51
59050: PPUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL 7926 0 2
59060: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59061: LD_EXP 52
59065: PUSH
59066: LD_VAR 0 5
59070: ARRAY
59071: PUSH
59072: LD_EXP 53
59076: LESS
59077: IFFALSE 59266
// begin for i := 1 to vehicles do
59079: LD_ADDR_VAR 0 4
59083: PUSH
59084: DOUBLE
59085: LD_INT 1
59087: DEC
59088: ST_TO_ADDR
59089: LD_VAR 0 2
59093: PUSH
59094: FOR_TO
59095: IFFALSE 59264
// begin if hackTanksCaptured [ index ] = hackLimit then
59097: LD_EXP 52
59101: PUSH
59102: LD_VAR 0 5
59106: ARRAY
59107: PUSH
59108: LD_EXP 53
59112: EQUAL
59113: IFFALSE 59117
// break ;
59115: GO 59264
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59117: LD_ADDR_EXP 55
59121: PUSH
59122: LD_EXP 55
59126: PPUSH
59127: LD_VAR 0 5
59131: PPUSH
59132: LD_EXP 55
59136: PUSH
59137: LD_VAR 0 5
59141: ARRAY
59142: PUSH
59143: LD_INT 1
59145: PLUS
59146: PPUSH
59147: CALL_OW 1
59151: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59152: LD_ADDR_EXP 52
59156: PUSH
59157: LD_EXP 52
59161: PPUSH
59162: LD_VAR 0 5
59166: PUSH
59167: LD_EXP 52
59171: PUSH
59172: LD_VAR 0 5
59176: ARRAY
59177: PUSH
59178: LD_INT 1
59180: PLUS
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PPUSH
59186: LD_VAR 0 2
59190: PUSH
59191: LD_VAR 0 4
59195: ARRAY
59196: PUSH
59197: LD_VAR 0 2
59201: PUSH
59202: LD_VAR 0 4
59206: ARRAY
59207: PPUSH
59208: CALL_OW 255
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PPUSH
59217: CALL 8143 0 3
59221: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59222: LD_VAR 0 2
59226: PUSH
59227: LD_VAR 0 4
59231: ARRAY
59232: PPUSH
59233: LD_VAR 0 1
59237: PPUSH
59238: CALL_OW 255
59242: PPUSH
59243: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59247: LD_VAR 0 2
59251: PUSH
59252: LD_VAR 0 4
59256: ARRAY
59257: PPUSH
59258: CALL_OW 141
// end ;
59262: GO 59094
59264: POP
59265: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59266: LD_VAR 0 1
59270: PPUSH
59271: LD_EXP 52
59275: PUSH
59276: LD_VAR 0 5
59280: ARRAY
59281: PUSH
59282: LD_INT 0
59284: PLUS
59285: PPUSH
59286: CALL_OW 505
// end ;
59290: LD_VAR 0 3
59294: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59295: LD_INT 0
59297: PPUSH
59298: PPUSH
59299: PPUSH
59300: PPUSH
// if not hack in hackTanks then
59301: LD_VAR 0 1
59305: PUSH
59306: LD_EXP 51
59310: IN
59311: NOT
59312: IFFALSE 59316
// exit ;
59314: GO 59560
// index := GetElementIndex ( hackTanks , hack ) ;
59316: LD_ADDR_VAR 0 4
59320: PUSH
59321: LD_EXP 51
59325: PPUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL 7926 0 2
59335: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59336: LD_ADDR_VAR 0 3
59340: PUSH
59341: DOUBLE
59342: LD_EXP 52
59346: PUSH
59347: LD_VAR 0 4
59351: ARRAY
59352: INC
59353: ST_TO_ADDR
59354: LD_INT 1
59356: PUSH
59357: FOR_DOWNTO
59358: IFFALSE 59534
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59360: LD_ADDR_VAR 0 5
59364: PUSH
59365: LD_EXP 52
59369: PUSH
59370: LD_VAR 0 4
59374: ARRAY
59375: PUSH
59376: LD_VAR 0 3
59380: ARRAY
59381: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59382: LD_VAR 0 5
59386: PUSH
59387: LD_INT 1
59389: ARRAY
59390: PPUSH
59391: CALL_OW 302
59395: NOT
59396: IFTRUE 59424
59398: PUSH
59399: LD_VAR 0 5
59403: PUSH
59404: LD_INT 1
59406: ARRAY
59407: PPUSH
59408: CALL_OW 255
59412: PUSH
59413: LD_VAR 0 1
59417: PPUSH
59418: CALL_OW 255
59422: NONEQUAL
59423: OR
59424: IFFALSE 59532
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59426: LD_VAR 0 5
59430: PUSH
59431: LD_INT 1
59433: ARRAY
59434: PPUSH
59435: CALL_OW 305
59439: IFFALSE 59467
59441: PUSH
59442: LD_VAR 0 5
59446: PUSH
59447: LD_INT 1
59449: ARRAY
59450: PPUSH
59451: CALL_OW 255
59455: PUSH
59456: LD_VAR 0 1
59460: PPUSH
59461: CALL_OW 255
59465: EQUAL
59466: AND
59467: IFFALSE 59491
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59469: LD_VAR 0 5
59473: PUSH
59474: LD_INT 1
59476: ARRAY
59477: PPUSH
59478: LD_VAR 0 5
59482: PUSH
59483: LD_INT 2
59485: ARRAY
59486: PPUSH
59487: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59491: LD_ADDR_EXP 52
59495: PUSH
59496: LD_EXP 52
59500: PPUSH
59501: LD_VAR 0 4
59505: PPUSH
59506: LD_EXP 52
59510: PUSH
59511: LD_VAR 0 4
59515: ARRAY
59516: PPUSH
59517: LD_VAR 0 3
59521: PPUSH
59522: CALL_OW 3
59526: PPUSH
59527: CALL_OW 1
59531: ST_TO_ADDR
// end ; end ;
59532: GO 59357
59534: POP
59535: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59536: LD_VAR 0 1
59540: PPUSH
59541: LD_EXP 52
59545: PUSH
59546: LD_VAR 0 4
59550: ARRAY
59551: PUSH
59552: LD_INT 0
59554: PLUS
59555: PPUSH
59556: CALL_OW 505
// end ;
59560: LD_VAR 0 2
59564: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59565: LD_INT 0
59567: PPUSH
59568: PPUSH
59569: PPUSH
59570: PPUSH
// if not hack in hackTanks then
59571: LD_VAR 0 1
59575: PUSH
59576: LD_EXP 51
59580: IN
59581: NOT
59582: IFFALSE 59586
// exit ;
59584: GO 59671
// index := GetElementIndex ( hackTanks , hack ) ;
59586: LD_ADDR_VAR 0 5
59590: PUSH
59591: LD_EXP 51
59595: PPUSH
59596: LD_VAR 0 1
59600: PPUSH
59601: CALL 7926 0 2
59605: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59606: LD_ADDR_VAR 0 4
59610: PUSH
59611: DOUBLE
59612: LD_INT 1
59614: DEC
59615: ST_TO_ADDR
59616: LD_EXP 52
59620: PUSH
59621: LD_VAR 0 5
59625: ARRAY
59626: PUSH
59627: FOR_TO
59628: IFFALSE 59669
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59630: LD_EXP 52
59634: PUSH
59635: LD_VAR 0 5
59639: ARRAY
59640: PUSH
59641: LD_VAR 0 4
59645: ARRAY
59646: PUSH
59647: LD_INT 1
59649: ARRAY
59650: PUSH
59651: LD_VAR 0 2
59655: EQUAL
59656: IFFALSE 59667
// KillUnit ( vehicle ) ;
59658: LD_VAR 0 2
59662: PPUSH
59663: CALL_OW 66
59667: GO 59627
59669: POP
59670: POP
// end ;
59671: LD_VAR 0 3
59675: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59676: LD_EXP 56
59680: NOT
59681: IFFALSE 59814
59683: GO 59685
59685: DISABLE
59686: LD_INT 0
59688: PPUSH
// begin initMiner := true ;
59689: LD_ADDR_EXP 56
59693: PUSH
59694: LD_INT 1
59696: ST_TO_ADDR
// minersList := [ ] ;
59697: LD_ADDR_EXP 57
59701: PUSH
59702: EMPTY
59703: ST_TO_ADDR
// minerMinesList := [ ] ;
59704: LD_ADDR_EXP 58
59708: PUSH
59709: EMPTY
59710: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59711: LD_ADDR_EXP 59
59715: PUSH
59716: LD_INT 6
59718: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59719: LD_ADDR_VAR 0 1
59723: PUSH
59724: LD_INT 34
59726: PUSH
59727: LD_INT 81
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PPUSH
59734: CALL_OW 69
59738: PUSH
59739: FOR_IN
59740: IFFALSE 59812
// begin if not i in minersList then
59742: LD_VAR 0 1
59746: PUSH
59747: LD_EXP 57
59751: IN
59752: NOT
59753: IFFALSE 59810
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59755: LD_ADDR_EXP 57
59759: PUSH
59760: LD_EXP 57
59764: PPUSH
59765: LD_EXP 57
59769: PUSH
59770: LD_INT 1
59772: PLUS
59773: PPUSH
59774: LD_VAR 0 1
59778: PPUSH
59779: CALL_OW 1
59783: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59784: LD_ADDR_EXP 58
59788: PUSH
59789: LD_EXP 58
59793: PPUSH
59794: LD_EXP 58
59798: PUSH
59799: LD_INT 1
59801: PLUS
59802: PPUSH
59803: EMPTY
59804: PPUSH
59805: CALL_OW 1
59809: ST_TO_ADDR
// end end ;
59810: GO 59739
59812: POP
59813: POP
// end ;
59814: PPOPN 1
59816: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
59817: LD_EXP 56
59821: IFFALSE 59852
59823: PUSH
59824: LD_EXP 58
59828: PPUSH
59829: CALL 5225 0 1
59833: IFTRUE 59851
59835: PUSH
59836: LD_INT 34
59838: PUSH
59839: LD_INT 81
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PPUSH
59846: CALL_OW 69
59850: OR
59851: AND
59852: IFFALSE 60351
59854: GO 59856
59856: DISABLE
59857: LD_INT 0
59859: PPUSH
59860: PPUSH
59861: PPUSH
59862: PPUSH
// begin enable ;
59863: ENABLE
// for i := minerMinesList downto 1 do
59864: LD_ADDR_VAR 0 1
59868: PUSH
59869: DOUBLE
59870: LD_EXP 58
59874: INC
59875: ST_TO_ADDR
59876: LD_INT 1
59878: PUSH
59879: FOR_DOWNTO
59880: IFFALSE 60349
// begin if IsLive ( minersList [ i ] ) then
59882: LD_EXP 57
59886: PUSH
59887: LD_VAR 0 1
59891: ARRAY
59892: PPUSH
59893: CALL_OW 300
59897: IFFALSE 59930
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59899: LD_EXP 57
59903: PUSH
59904: LD_VAR 0 1
59908: ARRAY
59909: PPUSH
59910: LD_EXP 58
59914: PUSH
59915: LD_VAR 0 1
59919: ARRAY
59920: PPUSH
59921: CALL 5225 0 1
59925: PPUSH
59926: CALL_OW 505
// if not minerMinesList [ i ] then
59930: LD_EXP 58
59934: PUSH
59935: LD_VAR 0 1
59939: ARRAY
59940: NOT
59941: IFFALSE 59945
// continue ;
59943: GO 59879
// for j := minerMinesList [ i ] downto 1 do
59945: LD_ADDR_VAR 0 2
59949: PUSH
59950: DOUBLE
59951: LD_EXP 58
59955: PUSH
59956: LD_VAR 0 1
59960: ARRAY
59961: INC
59962: ST_TO_ADDR
59963: LD_INT 1
59965: PUSH
59966: FOR_DOWNTO
59967: IFFALSE 60345
// begin side := GetSide ( minersList [ i ] ) ;
59969: LD_ADDR_VAR 0 3
59973: PUSH
59974: LD_EXP 57
59978: PUSH
59979: LD_VAR 0 1
59983: ARRAY
59984: PPUSH
59985: CALL_OW 255
59989: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59990: LD_EXP 57
59994: PUSH
59995: LD_VAR 0 1
59999: ARRAY
60000: PPUSH
60001: CALL_OW 301
60005: IFTRUE 60025
60007: PUSH
60008: LD_EXP 57
60012: PUSH
60013: LD_VAR 0 1
60017: ARRAY
60018: PPUSH
60019: CALL_OW 305
60023: NOT
60024: OR
60025: IFFALSE 60116
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60027: LD_EXP 58
60031: PUSH
60032: LD_VAR 0 1
60036: ARRAY
60037: PUSH
60038: LD_VAR 0 2
60042: ARRAY
60043: PUSH
60044: LD_INT 1
60046: ARRAY
60047: PPUSH
60048: LD_EXP 58
60052: PUSH
60053: LD_VAR 0 1
60057: ARRAY
60058: PUSH
60059: LD_VAR 0 2
60063: ARRAY
60064: PUSH
60065: LD_INT 2
60067: ARRAY
60068: PPUSH
60069: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60073: LD_ADDR_EXP 58
60077: PUSH
60078: LD_EXP 58
60082: PPUSH
60083: LD_VAR 0 1
60087: PPUSH
60088: LD_EXP 58
60092: PUSH
60093: LD_VAR 0 1
60097: ARRAY
60098: PPUSH
60099: LD_VAR 0 2
60103: PPUSH
60104: CALL_OW 3
60108: PPUSH
60109: CALL_OW 1
60113: ST_TO_ADDR
// continue ;
60114: GO 59966
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60116: LD_ADDR_VAR 0 4
60120: PUSH
60121: LD_EXP 58
60125: PUSH
60126: LD_VAR 0 1
60130: ARRAY
60131: PUSH
60132: LD_VAR 0 2
60136: ARRAY
60137: PUSH
60138: LD_INT 1
60140: ARRAY
60141: PPUSH
60142: LD_EXP 58
60146: PUSH
60147: LD_VAR 0 1
60151: ARRAY
60152: PUSH
60153: LD_VAR 0 2
60157: ARRAY
60158: PUSH
60159: LD_INT 2
60161: ARRAY
60162: PPUSH
60163: CALL_OW 428
60167: ST_TO_ADDR
// if not tmp then
60168: LD_VAR 0 4
60172: NOT
60173: IFFALSE 60177
// continue ;
60175: GO 59966
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60177: LD_VAR 0 4
60181: PUSH
60182: LD_INT 81
60184: PUSH
60185: LD_VAR 0 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PPUSH
60194: CALL_OW 69
60198: IN
60199: IFFALSE 60249
60201: PUSH
60202: LD_EXP 58
60206: PUSH
60207: LD_VAR 0 1
60211: ARRAY
60212: PUSH
60213: LD_VAR 0 2
60217: ARRAY
60218: PUSH
60219: LD_INT 1
60221: ARRAY
60222: PPUSH
60223: LD_EXP 58
60227: PUSH
60228: LD_VAR 0 1
60232: ARRAY
60233: PUSH
60234: LD_VAR 0 2
60238: ARRAY
60239: PUSH
60240: LD_INT 2
60242: ARRAY
60243: PPUSH
60244: CALL_OW 458
60248: AND
60249: IFFALSE 60343
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60251: LD_EXP 58
60255: PUSH
60256: LD_VAR 0 1
60260: ARRAY
60261: PUSH
60262: LD_VAR 0 2
60266: ARRAY
60267: PUSH
60268: LD_INT 1
60270: ARRAY
60271: PPUSH
60272: LD_EXP 58
60276: PUSH
60277: LD_VAR 0 1
60281: ARRAY
60282: PUSH
60283: LD_VAR 0 2
60287: ARRAY
60288: PUSH
60289: LD_INT 2
60291: ARRAY
60292: PPUSH
60293: LD_VAR 0 3
60297: PPUSH
60298: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60302: LD_ADDR_EXP 58
60306: PUSH
60307: LD_EXP 58
60311: PPUSH
60312: LD_VAR 0 1
60316: PPUSH
60317: LD_EXP 58
60321: PUSH
60322: LD_VAR 0 1
60326: ARRAY
60327: PPUSH
60328: LD_VAR 0 2
60332: PPUSH
60333: CALL_OW 3
60337: PPUSH
60338: CALL_OW 1
60342: ST_TO_ADDR
// end ; end ;
60343: GO 59966
60345: POP
60346: POP
// end ;
60347: GO 59879
60349: POP
60350: POP
// end ;
60351: PPOPN 4
60353: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60354: LD_INT 0
60356: PPUSH
60357: PPUSH
60358: PPUSH
60359: PPUSH
// result := false ;
60360: LD_ADDR_VAR 0 4
60364: PUSH
60365: LD_INT 0
60367: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60368: LD_VAR 0 1
60372: PPUSH
60373: CALL_OW 264
60377: PUSH
60378: LD_INT 81
60380: EQUAL
60381: NOT
60382: IFFALSE 60386
// exit ;
60384: GO 60756
// side := GetSide ( unit ) ;
60386: LD_ADDR_VAR 0 6
60390: PUSH
60391: LD_VAR 0 1
60395: PPUSH
60396: CALL_OW 255
60400: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60401: LD_ADDR_VAR 0 5
60405: PUSH
60406: LD_EXP 57
60410: PPUSH
60411: LD_VAR 0 1
60415: PPUSH
60416: CALL 7926 0 2
60420: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60421: LD_EXP 58
60425: PUSH
60426: LD_VAR 0 5
60430: ARRAY
60431: PUSH
60432: LD_EXP 59
60436: GREATEREQUAL
60437: IFFALSE 60441
// exit ;
60439: GO 60756
// ComMoveXY ( unit , x , y ) ;
60441: LD_VAR 0 1
60445: PPUSH
60446: LD_VAR 0 2
60450: PPUSH
60451: LD_VAR 0 3
60455: PPUSH
60456: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60460: LD_INT 35
60462: PPUSH
60463: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60467: LD_VAR 0 1
60471: PPUSH
60472: LD_VAR 0 2
60476: PPUSH
60477: LD_VAR 0 3
60481: PPUSH
60482: CALL 39972 0 3
60486: NOT
60487: IFFALSE 60500
60489: PUSH
60490: LD_VAR 0 1
60494: PPUSH
60495: CALL_OW 314
60499: AND
60500: IFFALSE 60504
// exit ;
60502: GO 60756
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60504: LD_VAR 0 2
60508: PPUSH
60509: LD_VAR 0 3
60513: PPUSH
60514: CALL_OW 428
60518: PUSH
60519: LD_VAR 0 1
60523: EQUAL
60524: IFFALSE 60538
60526: PUSH
60527: LD_VAR 0 1
60531: PPUSH
60532: CALL_OW 314
60536: NOT
60537: AND
60538: IFFALSE 60460
// if MineAtPos ( x , y ) then
60540: LD_VAR 0 2
60544: PPUSH
60545: LD_VAR 0 3
60549: PPUSH
60550: CALL_OW 458
60554: IFFALSE 60558
// exit ;
60556: GO 60756
// if your_side = side then
60558: LD_OWVAR 2
60562: PUSH
60563: LD_VAR 0 6
60567: EQUAL
60568: IFFALSE 60587
// PlaySoundXY ( x , y , PlantMine ) ;
60570: LD_VAR 0 2
60574: PPUSH
60575: LD_VAR 0 3
60579: PPUSH
60580: LD_STRING PlantMine
60582: PPUSH
60583: CALL_OW 366
// repeat wait ( 1 ) ;
60587: LD_INT 1
60589: PPUSH
60590: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60594: LD_VAR 0 2
60598: PPUSH
60599: LD_VAR 0 3
60603: PPUSH
60604: LD_VAR 0 6
60608: PPUSH
60609: LD_INT 0
60611: PPUSH
60612: CALL_OW 454
60616: IFFALSE 60587
// if MineAtPos ( x , y ) then
60618: LD_VAR 0 2
60622: PPUSH
60623: LD_VAR 0 3
60627: PPUSH
60628: CALL_OW 458
60632: IFFALSE 60748
// begin for i in minerMinesList [ index ] do
60634: LD_ADDR_VAR 0 7
60638: PUSH
60639: LD_EXP 58
60643: PUSH
60644: LD_VAR 0 5
60648: ARRAY
60649: PUSH
60650: FOR_IN
60651: IFFALSE 60693
// if i [ 1 ] = x and i [ 2 ] = y then
60653: LD_VAR 0 7
60657: PUSH
60658: LD_INT 1
60660: ARRAY
60661: PUSH
60662: LD_VAR 0 2
60666: EQUAL
60667: IFFALSE 60685
60669: PUSH
60670: LD_VAR 0 7
60674: PUSH
60675: LD_INT 2
60677: ARRAY
60678: PUSH
60679: LD_VAR 0 3
60683: EQUAL
60684: AND
60685: IFFALSE 60691
// exit ;
60687: POP
60688: POP
60689: GO 60756
60691: GO 60650
60693: POP
60694: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60695: LD_ADDR_EXP 58
60699: PUSH
60700: LD_EXP 58
60704: PPUSH
60705: LD_VAR 0 5
60709: PUSH
60710: LD_EXP 58
60714: PUSH
60715: LD_VAR 0 5
60719: ARRAY
60720: PUSH
60721: LD_INT 1
60723: PLUS
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PPUSH
60729: LD_VAR 0 2
60733: PUSH
60734: LD_VAR 0 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PPUSH
60743: CALL 8143 0 3
60747: ST_TO_ADDR
// end ; result := true ;
60748: LD_ADDR_VAR 0 4
60752: PUSH
60753: LD_INT 1
60755: ST_TO_ADDR
// end ;
60756: LD_VAR 0 4
60760: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60761: LD_INT 0
60763: PPUSH
60764: PPUSH
60765: PPUSH
// if not unit in minersList then
60766: LD_VAR 0 1
60770: PUSH
60771: LD_EXP 57
60775: IN
60776: NOT
60777: IFFALSE 60781
// exit ;
60779: GO 60988
// index := GetElementIndex ( minersList , unit ) ;
60781: LD_ADDR_VAR 0 6
60785: PUSH
60786: LD_EXP 57
60790: PPUSH
60791: LD_VAR 0 1
60795: PPUSH
60796: CALL 7926 0 2
60800: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60801: LD_ADDR_VAR 0 5
60805: PUSH
60806: DOUBLE
60807: LD_EXP 58
60811: PUSH
60812: LD_VAR 0 6
60816: ARRAY
60817: INC
60818: ST_TO_ADDR
60819: LD_INT 1
60821: PUSH
60822: FOR_DOWNTO
60823: IFFALSE 60986
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60825: LD_EXP 58
60829: PUSH
60830: LD_VAR 0 6
60834: ARRAY
60835: PUSH
60836: LD_VAR 0 5
60840: ARRAY
60841: PUSH
60842: LD_INT 1
60844: ARRAY
60845: PPUSH
60846: LD_EXP 58
60850: PUSH
60851: LD_VAR 0 6
60855: ARRAY
60856: PUSH
60857: LD_VAR 0 5
60861: ARRAY
60862: PUSH
60863: LD_INT 2
60865: ARRAY
60866: PPUSH
60867: LD_VAR 0 2
60871: PPUSH
60872: LD_VAR 0 3
60876: PPUSH
60877: CALL_OW 298
60881: PUSH
60882: LD_INT 6
60884: LESS
60885: IFFALSE 60984
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60887: LD_EXP 58
60891: PUSH
60892: LD_VAR 0 6
60896: ARRAY
60897: PUSH
60898: LD_VAR 0 5
60902: ARRAY
60903: PUSH
60904: LD_INT 1
60906: ARRAY
60907: PPUSH
60908: LD_EXP 58
60912: PUSH
60913: LD_VAR 0 6
60917: ARRAY
60918: PUSH
60919: LD_VAR 0 5
60923: ARRAY
60924: PUSH
60925: LD_INT 2
60927: ARRAY
60928: PPUSH
60929: LD_VAR 0 1
60933: PPUSH
60934: CALL_OW 255
60938: PPUSH
60939: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60943: LD_ADDR_EXP 58
60947: PUSH
60948: LD_EXP 58
60952: PPUSH
60953: LD_VAR 0 6
60957: PPUSH
60958: LD_EXP 58
60962: PUSH
60963: LD_VAR 0 6
60967: ARRAY
60968: PPUSH
60969: LD_VAR 0 5
60973: PPUSH
60974: CALL_OW 3
60978: PPUSH
60979: CALL_OW 1
60983: ST_TO_ADDR
// end ; end ;
60984: GO 60822
60986: POP
60987: POP
// end ;
60988: LD_VAR 0 4
60992: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60993: LD_INT 0
60995: PPUSH
60996: PPUSH
60997: PPUSH
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61004: LD_VAR 0 1
61008: PPUSH
61009: CALL_OW 264
61013: PUSH
61014: LD_INT 81
61016: EQUAL
61017: NOT
61018: IFTRUE 61033
61020: PUSH
61021: LD_VAR 0 1
61025: PUSH
61026: LD_EXP 57
61030: IN
61031: NOT
61032: OR
61033: IFFALSE 61037
// exit ;
61035: GO 61363
// index := GetElementIndex ( minersList , unit ) ;
61037: LD_ADDR_VAR 0 6
61041: PUSH
61042: LD_EXP 57
61046: PPUSH
61047: LD_VAR 0 1
61051: PPUSH
61052: CALL 7926 0 2
61056: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61057: LD_ADDR_VAR 0 8
61061: PUSH
61062: LD_EXP 59
61066: PUSH
61067: LD_EXP 58
61071: PUSH
61072: LD_VAR 0 6
61076: ARRAY
61077: MINUS
61078: ST_TO_ADDR
// if not minesFreeAmount then
61079: LD_VAR 0 8
61083: NOT
61084: IFFALSE 61088
// exit ;
61086: GO 61363
// tmp := [ ] ;
61088: LD_ADDR_VAR 0 7
61092: PUSH
61093: EMPTY
61094: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61095: LD_ADDR_VAR 0 5
61099: PUSH
61100: DOUBLE
61101: LD_INT 1
61103: DEC
61104: ST_TO_ADDR
61105: LD_VAR 0 8
61109: PUSH
61110: FOR_TO
61111: IFFALSE 61310
// begin _d := rand ( 0 , 5 ) ;
61113: LD_ADDR_VAR 0 11
61117: PUSH
61118: LD_INT 0
61120: PPUSH
61121: LD_INT 5
61123: PPUSH
61124: CALL_OW 12
61128: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61129: LD_ADDR_VAR 0 12
61133: PUSH
61134: LD_INT 2
61136: PPUSH
61137: LD_INT 6
61139: PPUSH
61140: CALL_OW 12
61144: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61145: LD_ADDR_VAR 0 9
61149: PUSH
61150: LD_VAR 0 2
61154: PPUSH
61155: LD_VAR 0 11
61159: PPUSH
61160: LD_VAR 0 12
61164: PPUSH
61165: CALL_OW 272
61169: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61170: LD_ADDR_VAR 0 10
61174: PUSH
61175: LD_VAR 0 3
61179: PPUSH
61180: LD_VAR 0 11
61184: PPUSH
61185: LD_VAR 0 12
61189: PPUSH
61190: CALL_OW 273
61194: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61195: LD_VAR 0 9
61199: PPUSH
61200: LD_VAR 0 10
61204: PPUSH
61205: CALL_OW 488
61209: IFFALSE 61233
61211: PUSH
61212: LD_VAR 0 9
61216: PUSH
61217: LD_VAR 0 10
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_VAR 0 7
61230: IN
61231: NOT
61232: AND
61233: IFFALSE 61252
61235: PUSH
61236: LD_VAR 0 9
61240: PPUSH
61241: LD_VAR 0 10
61245: PPUSH
61246: CALL_OW 458
61250: NOT
61251: AND
61252: IFFALSE 61294
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61254: LD_ADDR_VAR 0 7
61258: PUSH
61259: LD_VAR 0 7
61263: PPUSH
61264: LD_VAR 0 7
61268: PUSH
61269: LD_INT 1
61271: PLUS
61272: PPUSH
61273: LD_VAR 0 9
61277: PUSH
61278: LD_VAR 0 10
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PPUSH
61287: CALL_OW 1
61291: ST_TO_ADDR
61292: GO 61308
// i := i - 1 ;
61294: LD_ADDR_VAR 0 5
61298: PUSH
61299: LD_VAR 0 5
61303: PUSH
61304: LD_INT 1
61306: MINUS
61307: ST_TO_ADDR
// end ;
61308: GO 61110
61310: POP
61311: POP
// for i in tmp do
61312: LD_ADDR_VAR 0 5
61316: PUSH
61317: LD_VAR 0 7
61321: PUSH
61322: FOR_IN
61323: IFFALSE 61361
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61325: LD_VAR 0 1
61329: PPUSH
61330: LD_VAR 0 5
61334: PUSH
61335: LD_INT 1
61337: ARRAY
61338: PPUSH
61339: LD_VAR 0 5
61343: PUSH
61344: LD_INT 2
61346: ARRAY
61347: PPUSH
61348: CALL 60354 0 3
61352: NOT
61353: IFFALSE 61359
// exit ;
61355: POP
61356: POP
61357: GO 61363
61359: GO 61322
61361: POP
61362: POP
// end ;
61363: LD_VAR 0 4
61367: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61368: LD_INT 0
61370: PPUSH
61371: PPUSH
61372: PPUSH
61373: PPUSH
61374: PPUSH
61375: PPUSH
61376: PPUSH
61377: PPUSH
61378: PPUSH
// if GetClass ( unit ) <> class_sniper then
61379: LD_VAR 0 1
61383: PPUSH
61384: CALL_OW 257
61388: PUSH
61389: LD_INT 5
61391: NONEQUAL
61392: IFFALSE 61396
// exit ;
61394: GO 61866
// dist := 8 ;
61396: LD_ADDR_VAR 0 5
61400: PUSH
61401: LD_INT 8
61403: ST_TO_ADDR
// viewRange := 12 ;
61404: LD_ADDR_VAR 0 8
61408: PUSH
61409: LD_INT 12
61411: ST_TO_ADDR
// side := GetSide ( unit ) ;
61412: LD_ADDR_VAR 0 6
61416: PUSH
61417: LD_VAR 0 1
61421: PPUSH
61422: CALL_OW 255
61426: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61427: LD_INT 61
61429: PPUSH
61430: LD_VAR 0 6
61434: PPUSH
61435: CALL_OW 321
61439: PUSH
61440: LD_INT 2
61442: EQUAL
61443: IFFALSE 61453
// viewRange := 16 ;
61445: LD_ADDR_VAR 0 8
61449: PUSH
61450: LD_INT 16
61452: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61453: LD_VAR 0 1
61457: PPUSH
61458: LD_VAR 0 2
61462: PPUSH
61463: LD_VAR 0 3
61467: PPUSH
61468: CALL_OW 297
61472: PUSH
61473: LD_VAR 0 5
61477: GREATER
61478: IFFALSE 61557
// begin ComMoveXY ( unit , x , y ) ;
61480: LD_VAR 0 1
61484: PPUSH
61485: LD_VAR 0 2
61489: PPUSH
61490: LD_VAR 0 3
61494: PPUSH
61495: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61499: LD_INT 35
61501: PPUSH
61502: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61506: LD_VAR 0 1
61510: PPUSH
61511: LD_VAR 0 2
61515: PPUSH
61516: LD_VAR 0 3
61520: PPUSH
61521: CALL 39972 0 3
61525: NOT
61526: IFFALSE 61530
// exit ;
61528: GO 61866
// until GetDistUnitXY ( unit , x , y ) < dist ;
61530: LD_VAR 0 1
61534: PPUSH
61535: LD_VAR 0 2
61539: PPUSH
61540: LD_VAR 0 3
61544: PPUSH
61545: CALL_OW 297
61549: PUSH
61550: LD_VAR 0 5
61554: LESS
61555: IFFALSE 61499
// end ; ComTurnXY ( unit , x , y ) ;
61557: LD_VAR 0 1
61561: PPUSH
61562: LD_VAR 0 2
61566: PPUSH
61567: LD_VAR 0 3
61571: PPUSH
61572: CALL_OW 118
// repeat if Multiplayer then
61576: LD_OWVAR 4
61580: IFFALSE 61591
// wait ( 35 ) else
61582: LD_INT 35
61584: PPUSH
61585: CALL_OW 67
61589: GO 61598
// wait ( 5 ) ;
61591: LD_INT 5
61593: PPUSH
61594: CALL_OW 67
// _d := GetDir ( unit ) ;
61598: LD_ADDR_VAR 0 11
61602: PUSH
61603: LD_VAR 0 1
61607: PPUSH
61608: CALL_OW 254
61612: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61613: LD_ADDR_VAR 0 7
61617: PUSH
61618: LD_VAR 0 1
61622: PPUSH
61623: CALL_OW 250
61627: PPUSH
61628: LD_VAR 0 1
61632: PPUSH
61633: CALL_OW 251
61637: PPUSH
61638: LD_VAR 0 2
61642: PPUSH
61643: LD_VAR 0 3
61647: PPUSH
61648: CALL 42608 0 4
61652: ST_TO_ADDR
// until dir = _d ;
61653: LD_VAR 0 7
61657: PUSH
61658: LD_VAR 0 11
61662: EQUAL
61663: IFFALSE 61576
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61665: LD_ADDR_VAR 0 9
61669: PUSH
61670: LD_VAR 0 1
61674: PPUSH
61675: CALL_OW 250
61679: PPUSH
61680: LD_VAR 0 7
61684: PPUSH
61685: LD_VAR 0 5
61689: PPUSH
61690: CALL_OW 272
61694: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61695: LD_ADDR_VAR 0 10
61699: PUSH
61700: LD_VAR 0 1
61704: PPUSH
61705: CALL_OW 251
61709: PPUSH
61710: LD_VAR 0 7
61714: PPUSH
61715: LD_VAR 0 5
61719: PPUSH
61720: CALL_OW 273
61724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61725: LD_VAR 0 9
61729: PPUSH
61730: LD_VAR 0 10
61734: PPUSH
61735: CALL_OW 488
61739: NOT
61740: IFFALSE 61744
// exit ;
61742: GO 61866
// ComAnimCustom ( unit , 1 ) ;
61744: LD_VAR 0 1
61748: PPUSH
61749: LD_INT 1
61751: PPUSH
61752: CALL_OW 592
// p := 0 ;
61756: LD_ADDR_VAR 0 12
61760: PUSH
61761: LD_INT 0
61763: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61764: LD_VAR 0 9
61768: PPUSH
61769: LD_VAR 0 10
61773: PPUSH
61774: LD_VAR 0 6
61778: PPUSH
61779: LD_VAR 0 8
61783: PPUSH
61784: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61788: LD_INT 35
61790: PPUSH
61791: CALL_OW 67
// p := Inc ( p ) ;
61795: LD_ADDR_VAR 0 12
61799: PUSH
61800: LD_VAR 0 12
61804: PPUSH
61805: CALL 42564 0 1
61809: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61810: LD_VAR 0 12
61814: PUSH
61815: LD_INT 3
61817: EQUAL
61818: IFTRUE 61832
61820: PUSH
61821: LD_VAR 0 1
61825: PPUSH
61826: CALL_OW 302
61830: NOT
61831: OR
61832: IFTRUE 61845
61834: PUSH
61835: LD_VAR 0 1
61839: PPUSH
61840: CALL_OW 301
61844: OR
61845: IFFALSE 61788
// RemoveSeeing ( _x , _y , side ) ;
61847: LD_VAR 0 9
61851: PPUSH
61852: LD_VAR 0 10
61856: PPUSH
61857: LD_VAR 0 6
61861: PPUSH
61862: CALL_OW 331
// end ;
61866: LD_VAR 0 4
61870: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
61871: LD_INT 0
61873: PPUSH
61874: PPUSH
61875: PPUSH
61876: PPUSH
61877: PPUSH
61878: PPUSH
61879: PPUSH
61880: PPUSH
61881: PPUSH
61882: PPUSH
61883: PPUSH
// if not unit then
61884: LD_VAR 0 1
61888: NOT
61889: IFFALSE 61893
// exit ;
61891: GO 62164
// side := GetSide ( unit ) ;
61893: LD_ADDR_VAR 0 3
61897: PUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: CALL_OW 255
61907: ST_TO_ADDR
// x := GetX ( unit ) ;
61908: LD_ADDR_VAR 0 5
61912: PUSH
61913: LD_VAR 0 1
61917: PPUSH
61918: CALL_OW 250
61922: ST_TO_ADDR
// y := GetY ( unit ) ;
61923: LD_ADDR_VAR 0 6
61927: PUSH
61928: LD_VAR 0 1
61932: PPUSH
61933: CALL_OW 251
61937: ST_TO_ADDR
// r := 8 ;
61938: LD_ADDR_VAR 0 4
61942: PUSH
61943: LD_INT 8
61945: ST_TO_ADDR
// if x - r < 0 then
61946: LD_VAR 0 5
61950: PUSH
61951: LD_VAR 0 4
61955: MINUS
61956: PUSH
61957: LD_INT 0
61959: LESS
61960: IFFALSE 61972
// min_x := 0 else
61962: LD_ADDR_VAR 0 7
61966: PUSH
61967: LD_INT 0
61969: ST_TO_ADDR
61970: GO 61988
// min_x := x - r ;
61972: LD_ADDR_VAR 0 7
61976: PUSH
61977: LD_VAR 0 5
61981: PUSH
61982: LD_VAR 0 4
61986: MINUS
61987: ST_TO_ADDR
// if y - r < 0 then
61988: LD_VAR 0 6
61992: PUSH
61993: LD_VAR 0 4
61997: MINUS
61998: PUSH
61999: LD_INT 0
62001: LESS
62002: IFFALSE 62014
// min_y := 0 else
62004: LD_ADDR_VAR 0 8
62008: PUSH
62009: LD_INT 0
62011: ST_TO_ADDR
62012: GO 62030
// min_y := y - r ;
62014: LD_ADDR_VAR 0 8
62018: PUSH
62019: LD_VAR 0 6
62023: PUSH
62024: LD_VAR 0 4
62028: MINUS
62029: ST_TO_ADDR
// max_x := x + r ;
62030: LD_ADDR_VAR 0 9
62034: PUSH
62035: LD_VAR 0 5
62039: PUSH
62040: LD_VAR 0 4
62044: PLUS
62045: ST_TO_ADDR
// max_y := y + r ;
62046: LD_ADDR_VAR 0 10
62050: PUSH
62051: LD_VAR 0 6
62055: PUSH
62056: LD_VAR 0 4
62060: PLUS
62061: ST_TO_ADDR
// for _x = min_x to max_x do
62062: LD_ADDR_VAR 0 11
62066: PUSH
62067: DOUBLE
62068: LD_VAR 0 7
62072: DEC
62073: ST_TO_ADDR
62074: LD_VAR 0 9
62078: PUSH
62079: FOR_TO
62080: IFFALSE 62162
// for _y = min_y to max_y do
62082: LD_ADDR_VAR 0 12
62086: PUSH
62087: DOUBLE
62088: LD_VAR 0 8
62092: DEC
62093: ST_TO_ADDR
62094: LD_VAR 0 10
62098: PUSH
62099: FOR_TO
62100: IFFALSE 62158
// begin if not ValidHex ( _x , _y ) then
62102: LD_VAR 0 11
62106: PPUSH
62107: LD_VAR 0 12
62111: PPUSH
62112: CALL_OW 488
62116: NOT
62117: IFFALSE 62121
// continue ;
62119: GO 62099
// if MineAtPos ( _x , _y ) then
62121: LD_VAR 0 11
62125: PPUSH
62126: LD_VAR 0 12
62130: PPUSH
62131: CALL_OW 458
62135: IFFALSE 62156
// ViewMineAtPos ( _x , _y , side ) ;
62137: LD_VAR 0 11
62141: PPUSH
62142: LD_VAR 0 12
62146: PPUSH
62147: LD_VAR 0 3
62151: PPUSH
62152: CALL_OW 457
// end ;
62156: GO 62099
62158: POP
62159: POP
62160: GO 62079
62162: POP
62163: POP
// end ;
62164: LD_VAR 0 2
62168: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62169: LD_INT 0
62171: PPUSH
62172: PPUSH
62173: PPUSH
62174: PPUSH
62175: PPUSH
62176: PPUSH
// if not units then
62177: LD_VAR 0 1
62181: NOT
62182: IFFALSE 62186
// exit ;
62184: GO 62616
// scaners := [ ] ;
62186: LD_ADDR_VAR 0 6
62190: PUSH
62191: EMPTY
62192: ST_TO_ADDR
// for i in units do
62193: LD_ADDR_VAR 0 3
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: FOR_IN
62204: IFFALSE 62361
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62206: LD_VAR 0 3
62210: PPUSH
62211: CALL_OW 264
62215: PUSH
62216: LD_INT 11
62218: NONEQUAL
62219: IFTRUE 62233
62221: PUSH
62222: LD_VAR 0 3
62226: PPUSH
62227: CALL_OW 302
62231: NOT
62232: OR
62233: IFTRUE 62250
62235: PUSH
62236: LD_VAR 0 3
62240: PPUSH
62241: CALL_OW 110
62245: PUSH
62246: LD_INT 502
62248: EQUAL
62249: OR
62250: IFFALSE 62254
// continue ;
62252: GO 62203
// ComStop ( i ) ;
62254: LD_VAR 0 3
62258: PPUSH
62259: CALL_OW 141
// x := GetX ( i ) ;
62263: LD_ADDR_VAR 0 4
62267: PUSH
62268: LD_VAR 0 3
62272: PPUSH
62273: CALL_OW 250
62277: ST_TO_ADDR
// y := GetY ( i ) ;
62278: LD_ADDR_VAR 0 5
62282: PUSH
62283: LD_VAR 0 3
62287: PPUSH
62288: CALL_OW 251
62292: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62293: LD_VAR 0 3
62297: PPUSH
62298: CALL_OW 255
62302: PUSH
62303: LD_OWVAR 2
62307: EQUAL
62308: IFFALSE 62327
// PlaySoundXY ( x , y , mineDetector ) ;
62310: LD_VAR 0 4
62314: PPUSH
62315: LD_VAR 0 5
62319: PPUSH
62320: LD_STRING mineDetector
62322: PPUSH
62323: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62327: LD_ADDR_VAR 0 6
62331: PUSH
62332: LD_VAR 0 6
62336: PPUSH
62337: LD_VAR 0 3
62341: PPUSH
62342: CALL 41191 0 2
62346: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62347: LD_VAR 0 3
62351: PPUSH
62352: LD_INT 502
62354: PPUSH
62355: CALL_OW 109
// end ;
62359: GO 62203
62361: POP
62362: POP
// if not scaners then
62363: LD_VAR 0 6
62367: NOT
62368: IFFALSE 62372
// exit ;
62370: GO 62616
// wait ( 3 ) ;
62372: LD_INT 3
62374: PPUSH
62375: CALL_OW 67
// timer := 6 ;
62379: LD_ADDR_VAR 0 7
62383: PUSH
62384: LD_INT 6
62386: ST_TO_ADDR
// repeat for i in scaners do
62387: LD_ADDR_VAR 0 3
62391: PUSH
62392: LD_VAR 0 6
62396: PUSH
62397: FOR_IN
62398: IFFALSE 62514
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62400: LD_VAR 0 3
62404: PPUSH
62405: CALL_OW 302
62409: NOT
62410: IFTRUE 62423
62412: PUSH
62413: LD_VAR 0 3
62417: PPUSH
62418: CALL_OW 314
62422: OR
62423: IFTRUE 62454
62425: PUSH
62426: LD_VAR 0 3
62430: PPUSH
62431: CALL_OW 263
62435: PUSH
62436: LD_INT 1
62438: EQUAL
62439: IFFALSE 62453
62441: PUSH
62442: LD_VAR 0 3
62446: PPUSH
62447: CALL_OW 311
62451: NOT
62452: AND
62453: OR
62454: IFFALSE 62498
// begin SetUnitDisplayNumber ( i , 0 ) ;
62456: LD_VAR 0 3
62460: PPUSH
62461: LD_INT 0
62463: PPUSH
62464: CALL_OW 505
// SetTag ( i , 0 ) ;
62468: LD_VAR 0 3
62472: PPUSH
62473: LD_INT 0
62475: PPUSH
62476: CALL_OW 109
// scaners := scaners diff i ;
62480: LD_ADDR_VAR 0 6
62484: PUSH
62485: LD_VAR 0 6
62489: PUSH
62490: LD_VAR 0 3
62494: DIFF
62495: ST_TO_ADDR
// continue ;
62496: GO 62397
// end ; SetUnitDisplayNumber ( i , timer ) ;
62498: LD_VAR 0 3
62502: PPUSH
62503: LD_VAR 0 7
62507: PPUSH
62508: CALL_OW 505
// end ;
62512: GO 62397
62514: POP
62515: POP
// if not scaners then
62516: LD_VAR 0 6
62520: NOT
62521: IFFALSE 62525
// exit ;
62523: GO 62616
// timer := Dec ( timer ) ;
62525: LD_ADDR_VAR 0 7
62529: PUSH
62530: LD_VAR 0 7
62534: PPUSH
62535: CALL 42586 0 1
62539: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62540: LD_INT 35
62542: PPUSH
62543: CALL_OW 67
// until timer = 0 ;
62547: LD_VAR 0 7
62551: PUSH
62552: LD_INT 0
62554: EQUAL
62555: IFFALSE 62387
// if not scaners then
62557: LD_VAR 0 6
62561: NOT
62562: IFFALSE 62566
// exit ;
62564: GO 62616
// for i in scaners do
62566: LD_ADDR_VAR 0 3
62570: PUSH
62571: LD_VAR 0 6
62575: PUSH
62576: FOR_IN
62577: IFFALSE 62614
// begin SetUnitDisplayNumber ( i , 0 ) ;
62579: LD_VAR 0 3
62583: PPUSH
62584: LD_INT 0
62586: PPUSH
62587: CALL_OW 505
// SetTag ( i , 0 ) ;
62591: LD_VAR 0 3
62595: PPUSH
62596: LD_INT 0
62598: PPUSH
62599: CALL_OW 109
// RevealDetectorMine ( i ) ;
62603: LD_VAR 0 3
62607: PPUSH
62608: CALL 61871 0 1
// end ;
62612: GO 62576
62614: POP
62615: POP
// end ;
62616: LD_VAR 0 2
62620: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62621: LD_INT 0
62623: PPUSH
// if p1 = mine_detector_mode then
62624: LD_VAR 0 2
62628: PUSH
62629: LD_INT 103
62631: EQUAL
62632: IFFALSE 62643
// DetectMine ( units ) ;
62634: LD_VAR 0 1
62638: PPUSH
62639: CALL 62169 0 1
// end ; end_of_file
62643: LD_VAR 0 7
62647: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62648: PPOPN 6
62650: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62651: LD_INT 0
62653: PPUSH
// begin if not units then
62654: LD_VAR 0 1
62658: NOT
62659: IFFALSE 62663
// exit ;
62661: GO 62697
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62663: LD_VAR 0 1
62667: PPUSH
62668: LD_VAR 0 2
62672: PPUSH
62673: LD_VAR 0 3
62677: PPUSH
62678: LD_VAR 0 4
62682: PPUSH
62683: LD_VAR 0 5
62687: PPUSH
62688: LD_VAR 0 6
62692: PPUSH
62693: CALL 62621 0 6
// end ;
62697: PPOPN 7
62699: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62700: LD_EXP 3
62704: PUSH
62705: LD_INT 4
62707: EQUAL
62708: IFFALSE 62744
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62710: LD_STRING setGameDifficulty(
62712: PUSH
62713: LD_OWVAR 67
62717: STR
62718: PUSH
62719: LD_STRING )
62721: STR
62722: PPUSH
62723: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62727: LD_STRING displayDifficulty(
62729: PUSH
62730: LD_OWVAR 67
62734: STR
62735: PUSH
62736: LD_STRING )
62738: STR
62739: PPUSH
62740: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62744: CALL 62773 0 0
// end ; end_of_file
62748: PPOPN 1
62750: END
// every 0 0$1 do
62751: GO 62753
62753: DISABLE
// begin enable ;
62754: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62755: LD_STRING updateTimer(
62757: PUSH
62758: LD_OWVAR 1
62762: STR
62763: PUSH
62764: LD_STRING );
62766: STR
62767: PPUSH
62768: CALL_OW 559
// end ;
62772: END
// export function SOS_MapStart ( ) ; begin
62773: LD_INT 0
62775: PPUSH
// UpdateFactoryWaypoints ( ) ;
62776: CALL 63707 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62780: CALL 63959 0 0
// ParseMultiDataToLua ( ) ;
62784: CALL 64106 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62788: LD_STRING setSpecLogoNumber(
62790: PUSH
62791: LD_INT 2
62793: STR
62794: PUSH
62795: LD_STRING ,
62797: STR
62798: PUSH
62799: LD_INT 1
62801: STR
62802: PUSH
62803: LD_STRING )
62805: STR
62806: PPUSH
62807: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62811: LD_STRING setSpecLogoNumber(
62813: PUSH
62814: LD_INT 3
62816: STR
62817: PUSH
62818: LD_STRING ,
62820: STR
62821: PUSH
62822: LD_INT 2
62824: STR
62825: PUSH
62826: LD_STRING )
62828: STR
62829: PPUSH
62830: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62834: LD_STRING setSpecLogoNumber(
62836: PUSH
62837: LD_INT 4
62839: STR
62840: PUSH
62841: LD_STRING ,
62843: STR
62844: PUSH
62845: LD_INT 3
62847: STR
62848: PUSH
62849: LD_STRING )
62851: STR
62852: PPUSH
62853: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62857: LD_STRING setSpecLogoNumber(
62859: PUSH
62860: LD_INT 5
62862: STR
62863: PUSH
62864: LD_STRING ,
62866: STR
62867: PUSH
62868: LD_INT 4
62870: STR
62871: PUSH
62872: LD_STRING )
62874: STR
62875: PPUSH
62876: CALL_OW 559
// end ;
62880: LD_VAR 0 1
62884: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62885: LD_INT 0
62887: PPUSH
62888: PPUSH
62889: PPUSH
62890: PPUSH
62891: PPUSH
62892: PPUSH
62893: PPUSH
62894: PPUSH
62895: PPUSH
// for i := 1 to 8 do
62896: LD_ADDR_VAR 0 2
62900: PUSH
62901: DOUBLE
62902: LD_INT 1
62904: DEC
62905: ST_TO_ADDR
62906: LD_INT 8
62908: PUSH
62909: FOR_TO
62910: IFFALSE 63295
// begin if mpSidePositions [ i ] then
62912: LD_EXP 7
62916: PUSH
62917: LD_VAR 0 2
62921: ARRAY
62922: IFFALSE 63293
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62924: LD_ADDR_VAR 0 7
62928: PUSH
62929: LD_INT 22
62931: PUSH
62932: LD_VAR 0 2
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 21
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PPUSH
62955: CALL_OW 69
62959: PPUSH
62960: CALL 5225 0 1
62964: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62965: LD_ADDR_VAR 0 9
62969: PUSH
62970: LD_INT 22
62972: PUSH
62973: LD_VAR 0 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: LD_INT 30
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 30
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PPUSH
63014: CALL_OW 69
63018: ST_TO_ADDR
// crates := 0 ;
63019: LD_ADDR_VAR 0 4
63023: PUSH
63024: LD_INT 0
63026: ST_TO_ADDR
// oil := 0 ;
63027: LD_ADDR_VAR 0 5
63031: PUSH
63032: LD_INT 0
63034: ST_TO_ADDR
// sib := 0 ;
63035: LD_ADDR_VAR 0 6
63039: PUSH
63040: LD_INT 0
63042: ST_TO_ADDR
// if bases then
63043: LD_VAR 0 9
63047: IFFALSE 63153
// begin for j in bases do
63049: LD_ADDR_VAR 0 3
63053: PUSH
63054: LD_VAR 0 9
63058: PUSH
63059: FOR_IN
63060: IFFALSE 63151
// begin base := GetBase ( j ) ;
63062: LD_ADDR_VAR 0 8
63066: PUSH
63067: LD_VAR 0 3
63071: PPUSH
63072: CALL_OW 274
63076: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63077: LD_ADDR_VAR 0 4
63081: PUSH
63082: LD_VAR 0 4
63086: PUSH
63087: LD_VAR 0 8
63091: PPUSH
63092: LD_INT 1
63094: PPUSH
63095: CALL_OW 275
63099: PLUS
63100: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63101: LD_ADDR_VAR 0 5
63105: PUSH
63106: LD_VAR 0 5
63110: PUSH
63111: LD_VAR 0 8
63115: PPUSH
63116: LD_INT 2
63118: PPUSH
63119: CALL_OW 275
63123: PLUS
63124: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63125: LD_ADDR_VAR 0 6
63129: PUSH
63130: LD_VAR 0 6
63134: PUSH
63135: LD_VAR 0 8
63139: PPUSH
63140: LD_INT 3
63142: PPUSH
63143: CALL_OW 275
63147: PLUS
63148: ST_TO_ADDR
// end ;
63149: GO 63059
63151: POP
63152: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63153: LD_STRING setSpecText(
63155: PUSH
63156: LD_VAR 0 2
63160: STR
63161: PUSH
63162: LD_STRING ,
63164: STR
63165: PUSH
63166: LD_INT 2
63168: STR
63169: PUSH
63170: LD_STRING ,
63172: STR
63173: PUSH
63174: LD_VAR 0 4
63178: STR
63179: PUSH
63180: LD_STRING )
63182: STR
63183: PPUSH
63184: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63188: LD_STRING setSpecText(
63190: PUSH
63191: LD_VAR 0 2
63195: STR
63196: PUSH
63197: LD_STRING ,
63199: STR
63200: PUSH
63201: LD_INT 3
63203: STR
63204: PUSH
63205: LD_STRING ,
63207: STR
63208: PUSH
63209: LD_VAR 0 5
63213: STR
63214: PUSH
63215: LD_STRING )
63217: STR
63218: PPUSH
63219: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63223: LD_STRING setSpecText(
63225: PUSH
63226: LD_VAR 0 2
63230: STR
63231: PUSH
63232: LD_STRING ,
63234: STR
63235: PUSH
63236: LD_INT 4
63238: STR
63239: PUSH
63240: LD_STRING ,
63242: STR
63243: PUSH
63244: LD_VAR 0 6
63248: STR
63249: PUSH
63250: LD_STRING )
63252: STR
63253: PPUSH
63254: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63258: LD_STRING setSpecText(
63260: PUSH
63261: LD_VAR 0 2
63265: STR
63266: PUSH
63267: LD_STRING ,
63269: STR
63270: PUSH
63271: LD_INT 5
63273: STR
63274: PUSH
63275: LD_STRING ,
63277: STR
63278: PUSH
63279: LD_VAR 0 7
63283: STR
63284: PUSH
63285: LD_STRING )
63287: STR
63288: PPUSH
63289: CALL_OW 559
// end ; end ;
63293: GO 62909
63295: POP
63296: POP
// end ;
63297: LD_VAR 0 1
63301: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63302: LD_INT 2
63304: PUSH
63305: LD_INT 30
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 30
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: LIST
63329: PPUSH
63330: CALL_OW 69
63334: IFFALSE 63344
63336: GO 63338
63338: DISABLE
// begin enable ;
63339: ENABLE
// UpdateSpectatorBar ;
63340: CALL 62885 0 0
// end ;
63344: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63345: LD_INT 0
63347: PPUSH
// end ;
63348: LD_VAR 0 12
63352: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63353: LD_INT 0
63355: PPUSH
63356: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63357: LD_VAR 0 1
63361: NOT
63362: IFTRUE 63381
63364: PUSH
63365: LD_VAR 0 2
63369: PPUSH
63370: LD_VAR 0 3
63374: PPUSH
63375: CALL_OW 488
63379: NOT
63380: OR
63381: IFTRUE 63416
63383: PUSH
63384: LD_VAR 0 1
63388: PPUSH
63389: CALL_OW 266
63393: PUSH
63394: LD_INT 3
63396: NONEQUAL
63397: IFFALSE 63415
63399: PUSH
63400: LD_VAR 0 1
63404: PPUSH
63405: CALL_OW 247
63409: PUSH
63410: LD_INT 1
63412: EQUAL
63413: NOT
63414: AND
63415: OR
63416: IFFALSE 63420
// exit ;
63418: GO 63702
// if GetType ( factory ) = unit_human then
63420: LD_VAR 0 1
63424: PPUSH
63425: CALL_OW 247
63429: PUSH
63430: LD_INT 1
63432: EQUAL
63433: IFFALSE 63450
// factory := IsInUnit ( factory ) ;
63435: LD_ADDR_VAR 0 1
63439: PUSH
63440: LD_VAR 0 1
63444: PPUSH
63445: CALL_OW 310
63449: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 266
63459: PUSH
63460: LD_INT 3
63462: NONEQUAL
63463: IFFALSE 63467
// exit ;
63465: GO 63702
// for i := 1 to Count ( factoryWaypoints ) do
63467: LD_ADDR_VAR 0 5
63471: PUSH
63472: DOUBLE
63473: LD_INT 1
63475: DEC
63476: ST_TO_ADDR
63477: LD_EXP 60
63481: PPUSH
63482: CALL 5225 0 1
63486: PUSH
63487: FOR_TO
63488: IFFALSE 63650
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63490: LD_VAR 0 2
63494: PPUSH
63495: LD_VAR 0 3
63499: PPUSH
63500: CALL_OW 428
63504: PUSH
63505: LD_EXP 60
63509: PUSH
63510: LD_VAR 0 5
63514: ARRAY
63515: PUSH
63516: LD_INT 2
63518: ARRAY
63519: EQUAL
63520: IFFALSE 63552
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63522: LD_ADDR_EXP 60
63526: PUSH
63527: LD_EXP 60
63531: PPUSH
63532: LD_VAR 0 5
63536: PPUSH
63537: CALL_OW 3
63541: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63542: CALL 63707 0 0
// exit ;
63546: POP
63547: POP
63548: GO 63702
// end else
63550: GO 63648
// if factory = factoryWaypoints [ i ] [ 2 ] then
63552: LD_VAR 0 1
63556: PUSH
63557: LD_EXP 60
63561: PUSH
63562: LD_VAR 0 5
63566: ARRAY
63567: PUSH
63568: LD_INT 2
63570: ARRAY
63571: EQUAL
63572: IFFALSE 63648
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63574: LD_ADDR_EXP 60
63578: PUSH
63579: LD_EXP 60
63583: PPUSH
63584: LD_VAR 0 5
63588: PPUSH
63589: CALL_OW 3
63593: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63594: LD_ADDR_EXP 60
63598: PUSH
63599: LD_EXP 60
63603: PPUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 255
63613: PUSH
63614: LD_VAR 0 1
63618: PUSH
63619: LD_VAR 0 2
63623: PUSH
63624: LD_VAR 0 3
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: PPUSH
63635: CALL 41191 0 2
63639: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63640: CALL 63707 0 0
// exit ;
63644: POP
63645: POP
63646: GO 63702
// end ; end ;
63648: GO 63487
63650: POP
63651: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63652: LD_ADDR_EXP 60
63656: PUSH
63657: LD_EXP 60
63661: PPUSH
63662: LD_VAR 0 1
63666: PPUSH
63667: CALL_OW 255
63671: PUSH
63672: LD_VAR 0 1
63676: PUSH
63677: LD_VAR 0 2
63681: PUSH
63682: LD_VAR 0 3
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: PPUSH
63693: CALL 41191 0 2
63697: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63698: CALL 63707 0 0
// end ;
63702: LD_VAR 0 4
63706: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63707: LD_INT 0
63709: PPUSH
63710: PPUSH
63711: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63712: LD_STRING resetFactoryWaypoint();
63714: PPUSH
63715: CALL_OW 559
// if factoryWaypoints then
63719: LD_EXP 60
63723: IFFALSE 63844
// begin list := factoryWaypoints ;
63725: LD_ADDR_VAR 0 3
63729: PUSH
63730: LD_EXP 60
63734: ST_TO_ADDR
// for i := 1 to list do
63735: LD_ADDR_VAR 0 2
63739: PUSH
63740: DOUBLE
63741: LD_INT 1
63743: DEC
63744: ST_TO_ADDR
63745: LD_VAR 0 3
63749: PUSH
63750: FOR_TO
63751: IFFALSE 63842
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63753: LD_STRING setFactoryWaypointXY(
63755: PUSH
63756: LD_VAR 0 3
63760: PUSH
63761: LD_VAR 0 2
63765: ARRAY
63766: PUSH
63767: LD_INT 1
63769: ARRAY
63770: STR
63771: PUSH
63772: LD_STRING ,
63774: STR
63775: PUSH
63776: LD_VAR 0 3
63780: PUSH
63781: LD_VAR 0 2
63785: ARRAY
63786: PUSH
63787: LD_INT 2
63789: ARRAY
63790: STR
63791: PUSH
63792: LD_STRING ,
63794: STR
63795: PUSH
63796: LD_VAR 0 3
63800: PUSH
63801: LD_VAR 0 2
63805: ARRAY
63806: PUSH
63807: LD_INT 3
63809: ARRAY
63810: STR
63811: PUSH
63812: LD_STRING ,
63814: STR
63815: PUSH
63816: LD_VAR 0 3
63820: PUSH
63821: LD_VAR 0 2
63825: ARRAY
63826: PUSH
63827: LD_INT 4
63829: ARRAY
63830: STR
63831: PUSH
63832: LD_STRING )
63834: STR
63835: PPUSH
63836: CALL_OW 559
63840: GO 63750
63842: POP
63843: POP
// end ; end ;
63844: LD_VAR 0 1
63848: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63849: LD_INT 0
63851: PPUSH
// if HexInfo ( x , y ) = warehouse then
63852: LD_VAR 0 2
63856: PPUSH
63857: LD_VAR 0 3
63861: PPUSH
63862: CALL_OW 428
63866: PUSH
63867: LD_VAR 0 1
63871: EQUAL
63872: IFFALSE 63899
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63874: LD_ADDR_EXP 62
63878: PUSH
63879: LD_EXP 62
63883: PPUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_INT 0
63891: PPUSH
63892: CALL_OW 1
63896: ST_TO_ADDR
63897: GO 63950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63899: LD_ADDR_EXP 62
63903: PUSH
63904: LD_EXP 62
63908: PPUSH
63909: LD_VAR 0 1
63913: PPUSH
63914: LD_VAR 0 1
63918: PPUSH
63919: CALL_OW 255
63923: PUSH
63924: LD_VAR 0 1
63928: PUSH
63929: LD_VAR 0 2
63933: PUSH
63934: LD_VAR 0 3
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: PPUSH
63945: CALL_OW 1
63949: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63950: CALL 63959 0 0
// end ;
63954: LD_VAR 0 4
63958: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63959: LD_INT 0
63961: PPUSH
63962: PPUSH
63963: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63964: LD_STRING resetWarehouseGatheringPoints();
63966: PPUSH
63967: CALL_OW 559
// if warehouseGatheringPoints then
63971: LD_EXP 62
63975: IFFALSE 64101
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63977: LD_ADDR_VAR 0 3
63981: PUSH
63982: LD_EXP 62
63986: PPUSH
63987: CALL 45125 0 1
63991: ST_TO_ADDR
// for i := 1 to list do
63992: LD_ADDR_VAR 0 2
63996: PUSH
63997: DOUBLE
63998: LD_INT 1
64000: DEC
64001: ST_TO_ADDR
64002: LD_VAR 0 3
64006: PUSH
64007: FOR_TO
64008: IFFALSE 64099
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64010: LD_STRING setWarehouseGatheringPointXY(
64012: PUSH
64013: LD_VAR 0 3
64017: PUSH
64018: LD_VAR 0 2
64022: ARRAY
64023: PUSH
64024: LD_INT 1
64026: ARRAY
64027: STR
64028: PUSH
64029: LD_STRING ,
64031: STR
64032: PUSH
64033: LD_VAR 0 3
64037: PUSH
64038: LD_VAR 0 2
64042: ARRAY
64043: PUSH
64044: LD_INT 2
64046: ARRAY
64047: STR
64048: PUSH
64049: LD_STRING ,
64051: STR
64052: PUSH
64053: LD_VAR 0 3
64057: PUSH
64058: LD_VAR 0 2
64062: ARRAY
64063: PUSH
64064: LD_INT 3
64066: ARRAY
64067: STR
64068: PUSH
64069: LD_STRING ,
64071: STR
64072: PUSH
64073: LD_VAR 0 3
64077: PUSH
64078: LD_VAR 0 2
64082: ARRAY
64083: PUSH
64084: LD_INT 4
64086: ARRAY
64087: STR
64088: PUSH
64089: LD_STRING )
64091: STR
64092: PPUSH
64093: CALL_OW 559
64097: GO 64007
64099: POP
64100: POP
// end ; end ;
64101: LD_VAR 0 1
64105: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64106: LD_INT 0
64108: PPUSH
64109: PPUSH
// if not mpSidePositions then
64110: LD_EXP 7
64114: NOT
64115: IFFALSE 64119
// exit ;
64117: GO 64190
// result :=  ;
64119: LD_ADDR_VAR 0 1
64123: PUSH
64124: LD_STRING 
64126: ST_TO_ADDR
// for i := 1 to 8 do
64127: LD_ADDR_VAR 0 2
64131: PUSH
64132: DOUBLE
64133: LD_INT 1
64135: DEC
64136: ST_TO_ADDR
64137: LD_INT 8
64139: PUSH
64140: FOR_TO
64141: IFFALSE 64171
// begin result := result & mpSidePositions [ i ] & ; ;
64143: LD_ADDR_VAR 0 1
64147: PUSH
64148: LD_VAR 0 1
64152: PUSH
64153: LD_EXP 7
64157: PUSH
64158: LD_VAR 0 2
64162: ARRAY
64163: STR
64164: PUSH
64165: LD_STRING ;
64167: STR
64168: ST_TO_ADDR
// end ;
64169: GO 64140
64171: POP
64172: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64173: LD_STRING setMultiplayerRealPosition("
64175: PUSH
64176: LD_VAR 0 1
64180: STR
64181: PUSH
64182: LD_STRING ");
64184: STR
64185: PPUSH
64186: CALL_OW 559
// end ;
64190: LD_VAR 0 1
64194: RET
