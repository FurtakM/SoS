// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 149 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1739 0 1
  44: PPUSH
  45: CALL 5157 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1739 0 1
  56: PPUSH
  57: CALL 9719 0 1
// Multiplayer_Start ;
  61: CALL 3445 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 3557 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// end ;
 116: LD_VAR 0 1
 120: RET
// every 0 0$01 trigger game and not debug_strings do
 121: LD_EXP 2
 125: PUSH
 126: LD_OWVAR 48
 130: NOT
 131: AND
 132: IFFALSE 148
 134: GO 136
 136: DISABLE
// begin enable ;
 137: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 138: LD_ADDR_OWVAR 47
 142: PUSH
 143: CALL 4093 0 0
 147: ST_TO_ADDR
// end ; end_of_file
 148: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 149: LD_INT 0
 151: PPUSH
 152: PPUSH
 153: PPUSH
 154: PPUSH
 155: PPUSH
// multi_settings_counter := 6 ;
 156: LD_ADDR_EXP 17
 160: PUSH
 161: LD_INT 6
 163: ST_TO_ADDR
// multi_settings := [ ] ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: EMPTY
 170: ST_TO_ADDR
// if Multiplayer then
 171: LD_OWVAR 4
 175: IFFALSE 355
// begin your_side := mp_player_side ;
 177: LD_ADDR_OWVAR 2
 181: PUSH
 182: LD_OWVAR 7
 186: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 187: LD_ADDR_EXP 5
 191: PUSH
 192: LD_OWVAR 6
 196: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 197: LD_ADDR_EXP 6
 201: PUSH
 202: LD_OWVAR 17
 206: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 207: LD_ADDR_EXP 7
 211: PUSH
 212: LD_OWVAR 15
 216: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 217: LD_ADDR_EXP 8
 221: PUSH
 222: LD_OWVAR 16
 226: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 227: LD_ADDR_EXP 9
 231: PUSH
 232: EMPTY
 233: PUSH
 234: EMPTY
 235: LIST
 236: ST_TO_ADDR
// for i in mp_teams do
 237: LD_ADDR_VAR 0 2
 241: PUSH
 242: LD_OWVAR 12
 246: PUSH
 247: FOR_IN
 248: IFFALSE 291
// if i then
 250: LD_VAR 0 2
 254: IFFALSE 289
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 256: LD_ADDR_EXP 9
 260: PUSH
 261: LD_EXP 9
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_EXP 9
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PUSH
 278: LD_VAR 0 2
 282: UNION
 283: PPUSH
 284: CALL_OW 1
 288: ST_TO_ADDR
 289: GO 247
 291: POP
 292: POP
// for i := 1 to multi_settings_counter do
 293: LD_ADDR_VAR 0 2
 297: PUSH
 298: DOUBLE
 299: LD_INT 1
 301: DEC
 302: ST_TO_ADDR
 303: LD_EXP 17
 307: PUSH
 308: FOR_TO
 309: IFFALSE 351
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 311: LD_ADDR_EXP 16
 315: PUSH
 316: LD_EXP 16
 320: PPUSH
 321: LD_EXP 16
 325: PUSH
 326: LD_INT 1
 328: PLUS
 329: PPUSH
 330: LD_VAR 0 2
 334: PPUSH
 335: CALL_OW 426
 339: PUSH
 340: LD_INT 1
 342: PLUS
 343: PPUSH
 344: CALL_OW 1
 348: ST_TO_ADDR
 349: GO 308
 351: POP
 352: POP
// end else
 353: GO 541
// begin your_side := 3 ;
 355: LD_ADDR_OWVAR 2
 359: PUSH
 360: LD_INT 3
 362: ST_TO_ADDR
// multi_gametype := 1 ;
 363: LD_ADDR_EXP 5
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 371: LD_ADDR_EXP 6
 375: PUSH
 376: LD_INT 0
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 2
 387: PUSH
 388: LD_INT 3
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 410: LD_ADDR_EXP 7
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: LD_INT 0
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: LD_INT 1
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 449: LD_ADDR_EXP 8
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: LD_INT 3
 465: PUSH
 466: LD_INT 3
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 488: LD_ADDR_EXP 9
 492: PUSH
 493: LD_INT 3
 495: PUSH
 496: LD_INT 4
 498: PUSH
 499: LD_INT 5
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: EMPTY
 508: LIST
 509: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 510: LD_ADDR_EXP 16
 514: PUSH
 515: LD_INT 2
 517: PUSH
 518: LD_INT 4
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: LD_INT 1
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 580: LD_ADDR_EXP 13
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 0
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 619: LD_ADDR_EXP 24
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: LD_INT 0
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: ST_TO_ADDR
// multi_teamgame := true ;
 658: LD_ADDR_EXP 14
 662: PUSH
 663: LD_INT 1
 665: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 666: LD_ADDR_EXP 12
 670: PUSH
 671: LD_INT 3
 673: PUSH
 674: EMPTY
 675: LIST
 676: ST_TO_ADDR
// multi_custom_commanders := true ;
 677: LD_ADDR_EXP 15
 681: PUSH
 682: LD_INT 1
 684: ST_TO_ADDR
// multi_commanders := [ ] ;
 685: LD_ADDR_EXP 23
 689: PUSH
 690: EMPTY
 691: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 692: LD_ADDR_EXP 26
 696: PUSH
 697: EMPTY
 698: ST_TO_ADDR
// multi_players_amount := 0 ;
 699: LD_ADDR_EXP 25
 703: PUSH
 704: LD_INT 0
 706: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 707: LD_ADDR_EXP 11
 711: PUSH
 712: LD_INT 8
 714: PUSH
 715: LD_INT 9
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: LD_INT 10
 724: PUSH
 725: LD_INT 11
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_INT 12
 734: PUSH
 735: LD_INT 13
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] ] ] ;
 747: LD_ADDR_EXP 28
 751: PUSH
 752: LD_INT 0
 754: PUSH
 755: LD_INT 14
 757: PPUSH
 758: LD_INT 0
 760: PPUSH
 761: CALL 84010 0 2
 765: PUSH
 766: LD_STRING kagan
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 31
 776: PUSH
 777: LD_INT 67
 779: PUSH
 780: LD_INT 102
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: PUSH
 791: EMPTY
 792: LIST
 793: LIST
 794: PUSH
 795: LD_INT 31
 797: PUSH
 798: LD_INT 73
 800: PUSH
 801: LD_INT 103
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 0
 823: PUSH
 824: LD_INT 15
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL 84010 0 2
 834: PUSH
 835: LD_STRING beria
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 31
 845: PUSH
 846: LD_INT 102
 848: PUSH
 849: LD_INT 86
 851: PUSH
 852: LD_INT 2
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 31
 866: PUSH
 867: LD_INT 98
 869: PUSH
 870: LD_INT 96
 872: PUSH
 873: LD_INT 1
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 16
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: CALL 84010 0 2
 903: PUSH
 904: LD_STRING kirov
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 31
 914: PUSH
 915: LD_INT 169
 917: PUSH
 918: LD_INT 101
 920: PUSH
 921: LD_INT 4
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 31
 935: PUSH
 936: LD_INT 175
 938: PUSH
 939: LD_INT 123
 941: PUSH
 942: LD_INT 5
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: LIST
 963: ST_TO_ADDR
// for i := 1 to 8 do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 8
 976: PUSH
 977: FOR_TO
 978: IFFALSE 1307
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 980: LD_VAR 0 2
 984: PPUSH
 985: CALL_OW 530
 989: IFFALSE 1147
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 991: LD_ADDR_EXP 10
 995: PUSH
 996: LD_EXP 10
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1014: LD_ADDR_EXP 8
1018: PUSH
1019: LD_EXP 8
1023: PPUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 1
1036: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1037: LD_ADDR_EXP 6
1041: PUSH
1042: LD_EXP 6
1046: PPUSH
1047: LD_VAR 0 2
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL_OW 1
1059: ST_TO_ADDR
// for j = 1 to multi_teams do
1060: LD_ADDR_VAR 0 3
1064: PUSH
1065: DOUBLE
1066: LD_INT 1
1068: DEC
1069: ST_TO_ADDR
1070: LD_EXP 9
1074: PUSH
1075: FOR_TO
1076: IFFALSE 1145
// begin if i in multi_teams [ j ] then
1078: LD_VAR 0 2
1082: PUSH
1083: LD_EXP 9
1087: PUSH
1088: LD_VAR 0 3
1092: ARRAY
1093: IN
1094: IFFALSE 1143
// begin tmp := multi_teams [ j ] diff i ;
1096: LD_ADDR_VAR 0 5
1100: PUSH
1101: LD_EXP 9
1105: PUSH
1106: LD_VAR 0 3
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 2
1116: DIFF
1117: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1118: LD_ADDR_EXP 9
1122: PUSH
1123: LD_EXP 9
1127: PPUSH
1128: LD_VAR 0 3
1132: PPUSH
1133: LD_VAR 0 5
1137: PPUSH
1138: CALL_OW 1
1142: ST_TO_ADDR
// end ; end ;
1143: GO 1075
1145: POP
1146: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1147: LD_EXP 8
1151: PUSH
1152: LD_VAR 0 2
1156: ARRAY
1157: PUSH
1158: LD_EXP 8
1162: PUSH
1163: LD_VAR 0 2
1167: ARRAY
1168: PUSH
1169: LD_EXP 12
1173: IN
1174: NOT
1175: AND
1176: IFFALSE 1217
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1178: LD_ADDR_EXP 8
1182: PUSH
1183: LD_EXP 8
1187: PPUSH
1188: LD_VAR 0 2
1192: PPUSH
1193: LD_EXP 12
1197: PUSH
1198: LD_INT 1
1200: PPUSH
1201: LD_EXP 12
1205: PPUSH
1206: CALL_OW 12
1210: ARRAY
1211: PPUSH
1212: CALL_OW 1
1216: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1217: LD_EXP 8
1221: PUSH
1222: LD_VAR 0 2
1226: ARRAY
1227: NOT
1228: PUSH
1229: LD_EXP 6
1233: PUSH
1234: LD_VAR 0 2
1238: ARRAY
1239: NOT
1240: AND
1241: PUSH
1242: LD_EXP 10
1246: PUSH
1247: LD_VAR 0 2
1251: ARRAY
1252: NOT
1253: AND
1254: IFFALSE 1279
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1256: LD_ADDR_EXP 13
1260: PUSH
1261: LD_EXP 13
1265: PPUSH
1266: LD_VAR 0 2
1270: PPUSH
1271: LD_INT 1
1273: PPUSH
1274: CALL_OW 1
1278: ST_TO_ADDR
// if multi_sides [ i ] then
1279: LD_EXP 6
1283: PUSH
1284: LD_VAR 0 2
1288: ARRAY
1289: IFFALSE 1305
// multi_players_amount := multi_players_amount + 1 ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_EXP 25
1300: PUSH
1301: LD_INT 1
1303: PLUS
1304: ST_TO_ADDR
// end ;
1305: GO 977
1307: POP
1308: POP
// for i in multi_teams do
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_EXP 9
1318: PUSH
1319: FOR_IN
1320: IFFALSE 1428
// begin for j = 2 to i do
1322: LD_ADDR_VAR 0 3
1326: PUSH
1327: DOUBLE
1328: LD_INT 2
1330: DEC
1331: ST_TO_ADDR
1332: LD_VAR 0 2
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1424
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 3
1349: ARRAY
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_INT 1
1358: ARRAY
1359: PPUSH
1360: CALL_OW 343
// for x = 1 to j - 1 do
1364: LD_ADDR_VAR 0 4
1368: PUSH
1369: DOUBLE
1370: LD_INT 1
1372: DEC
1373: ST_TO_ADDR
1374: LD_VAR 0 3
1378: PUSH
1379: LD_INT 1
1381: MINUS
1382: PUSH
1383: FOR_TO
1384: IFFALSE 1420
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1386: LD_VAR 0 2
1390: PUSH
1391: LD_VAR 0 3
1395: ARRAY
1396: PPUSH
1397: LD_VAR 0 2
1401: PUSH
1402: LD_VAR 0 4
1406: ARRAY
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: LD_INT 1
1413: PPUSH
1414: CALL_OW 80
1418: GO 1383
1420: POP
1421: POP
// end ;
1422: GO 1337
1424: POP
1425: POP
// end ;
1426: GO 1319
1428: POP
1429: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1430: LD_ADDR_OWVAR 67
1434: PUSH
1435: LD_INT 1
1437: PUSH
1438: LD_INT 2
1440: PUSH
1441: LD_INT 3
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 16
1453: PUSH
1454: LD_INT 1
1456: ARRAY
1457: ARRAY
1458: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1459: LD_ADDR_EXP 18
1463: PUSH
1464: LD_INT 6
1466: PUSH
1467: LD_INT 7
1469: PUSH
1470: LD_INT 8
1472: PUSH
1473: LD_INT 9
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: PUSH
1482: LD_EXP 16
1486: PUSH
1487: LD_INT 2
1489: ARRAY
1490: ARRAY
1491: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1492: LD_ADDR_EXP 19
1496: PUSH
1497: LD_INT 2
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: PUSH
1515: LD_EXP 16
1519: PUSH
1520: LD_INT 3
1522: ARRAY
1523: ARRAY
1524: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1525: LD_ADDR_EXP 20
1529: PUSH
1530: LD_INT 3000
1532: PUSH
1533: LD_INT 1120
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 5000
1542: PUSH
1543: LD_INT 770
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 6000
1552: PUSH
1553: LD_INT 490
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 8000
1562: PUSH
1563: LD_INT 420
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_EXP 16
1580: PUSH
1581: LD_INT 4
1583: ARRAY
1584: ARRAY
1585: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1586: LD_ADDR_EXP 21
1590: PUSH
1591: LD_INT 0
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: LD_INT 2
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: PUSH
1605: LD_EXP 16
1609: PUSH
1610: LD_INT 5
1612: ARRAY
1613: ARRAY
1614: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1615: LD_ADDR_EXP 22
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: LD_INT 1
1625: PUSH
1626: LD_INT 2
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: LD_EXP 16
1638: PUSH
1639: LD_INT 6
1641: ARRAY
1642: ARRAY
1643: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1644: LD_ADDR_EXP 27
1648: PUSH
1649: LD_INT 10500
1651: PUSH
1652: LD_INT 31500
1654: PUSH
1655: LD_INT 52500
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_OWVAR 67
1667: ARRAY
1668: ST_TO_ADDR
// if multi_extra_oil then
1669: LD_EXP 21
1673: IFFALSE 1734
// begin if multi_extra_oil = 1 then
1675: LD_EXP 21
1679: PUSH
1680: LD_INT 1
1682: EQUAL
1683: IFFALSE 1698
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1685: LD_INT 109
1687: PPUSH
1688: LD_INT 130
1690: PPUSH
1691: LD_INT 2
1693: PPUSH
1694: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1698: LD_EXP 21
1702: PUSH
1703: LD_INT 2
1705: EQUAL
1706: IFFALSE 1734
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1708: LD_INT 109
1710: PPUSH
1711: LD_INT 130
1713: PPUSH
1714: LD_INT 2
1716: PPUSH
1717: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1721: LD_INT 150
1723: PPUSH
1724: LD_INT 112
1726: PPUSH
1727: LD_INT 2
1729: PPUSH
1730: CALL_OW 62
// end ; end ; end ;
1734: LD_VAR 0 1
1738: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1739: LD_INT 0
1741: PPUSH
1742: PPUSH
// if not multi_sides [ preferSide ] then
1743: LD_EXP 6
1747: PUSH
1748: LD_VAR 0 1
1752: ARRAY
1753: NOT
1754: IFFALSE 1768
// begin result := preferSide ;
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: LD_VAR 0 1
1765: ST_TO_ADDR
// exit ;
1766: GO 1815
// end ; for i := 1 to 8 do
1768: LD_ADDR_VAR 0 3
1772: PUSH
1773: DOUBLE
1774: LD_INT 1
1776: DEC
1777: ST_TO_ADDR
1778: LD_INT 8
1780: PUSH
1781: FOR_TO
1782: IFFALSE 1813
// if not multi_sides [ i ] then
1784: LD_EXP 6
1788: PUSH
1789: LD_VAR 0 3
1793: ARRAY
1794: NOT
1795: IFFALSE 1811
// begin result := i ;
1797: LD_ADDR_VAR 0 2
1801: PUSH
1802: LD_VAR 0 3
1806: ST_TO_ADDR
// exit ;
1807: POP
1808: POP
1809: GO 1815
// end ;
1811: GO 1781
1813: POP
1814: POP
// end ;
1815: LD_VAR 0 2
1819: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1820: LD_INT 0
1822: PPUSH
// uc_side := side ;
1823: LD_ADDR_OWVAR 20
1827: PUSH
1828: LD_VAR 0 1
1832: ST_TO_ADDR
// uc_nation := nation_russian ;
1833: LD_ADDR_OWVAR 21
1837: PUSH
1838: LD_INT 3
1840: ST_TO_ADDR
// hc_importance := 100 ;
1841: LD_ADDR_OWVAR 32
1845: PUSH
1846: LD_INT 100
1848: ST_TO_ADDR
// hc_class := class_soldier ;
1849: LD_ADDR_OWVAR 28
1853: PUSH
1854: LD_INT 1
1856: ST_TO_ADDR
// if num = 1 then
1857: LD_VAR 0 2
1861: PUSH
1862: LD_INT 1
1864: EQUAL
1865: IFFALSE 1928
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
1867: LD_INT 1
1869: PPUSH
1870: LD_EXP 19
1874: PPUSH
1875: CALL_OW 381
// hc_gallery := ru ;
1879: LD_ADDR_OWVAR 33
1883: PUSH
1884: LD_STRING ru
1886: ST_TO_ADDR
// hc_face_number := 10 ;
1887: LD_ADDR_OWVAR 34
1891: PUSH
1892: LD_INT 10
1894: ST_TO_ADDR
// hc_name := Popov ;
1895: LD_ADDR_OWVAR 26
1899: PUSH
1900: LD_STRING Popov
1902: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1903: LD_ADDR_OWVAR 29
1907: PUSH
1908: LD_INT 10
1910: PUSH
1911: LD_INT 10
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: ST_TO_ADDR
// result := CreateHuman ;
1918: LD_ADDR_VAR 0 3
1922: PUSH
1923: CALL_OW 44
1927: ST_TO_ADDR
// end ; if num = 2 then
1928: LD_VAR 0 2
1932: PUSH
1933: LD_INT 2
1935: EQUAL
1936: IFFALSE 2007
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
1938: LD_INT 1
1940: PPUSH
1941: LD_EXP 19
1945: PPUSH
1946: CALL_OW 383
// hc_class := class_mechanic ;
1950: LD_ADDR_OWVAR 28
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// hc_gallery := ru ;
1958: LD_ADDR_OWVAR 33
1962: PUSH
1963: LD_STRING ru
1965: ST_TO_ADDR
// hc_face_number := 1 ;
1966: LD_ADDR_OWVAR 34
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// hc_name := Burlak ;
1974: LD_ADDR_OWVAR 26
1978: PUSH
1979: LD_STRING Burlak
1981: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1982: LD_ADDR_OWVAR 29
1986: PUSH
1987: LD_INT 10
1989: PUSH
1990: LD_INT 11
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: ST_TO_ADDR
// result := CreateHuman ;
1997: LD_ADDR_VAR 0 3
2001: PUSH
2002: CALL_OW 44
2006: ST_TO_ADDR
// end ; if num = 3 then
2007: LD_VAR 0 2
2011: PUSH
2012: LD_INT 3
2014: EQUAL
2015: IFFALSE 2078
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2017: LD_INT 1
2019: PPUSH
2020: LD_EXP 19
2024: PPUSH
2025: CALL_OW 381
// hc_gallery := ru ;
2029: LD_ADDR_OWVAR 33
2033: PUSH
2034: LD_STRING ru
2036: ST_TO_ADDR
// hc_face_number := 8 ;
2037: LD_ADDR_OWVAR 34
2041: PUSH
2042: LD_INT 8
2044: ST_TO_ADDR
// hc_name := Kurin ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Kurin
2052: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 12
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// result := CreateHuman ;
2068: LD_ADDR_VAR 0 3
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// end ; end ;
2078: LD_VAR 0 3
2082: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2083: LD_INT 0
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
// for i := 1 to 8 do
2095: LD_ADDR_VAR 0 2
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_INT 8
2107: PUSH
2108: FOR_TO
2109: IFFALSE 3130
// begin if not multi_sides [ i ] then
2111: LD_EXP 6
2115: PUSH
2116: LD_VAR 0 2
2120: ARRAY
2121: NOT
2122: IFFALSE 2126
// continue ;
2124: GO 2108
// if multi_buildings [ multi_sides [ i ] ] then
2126: LD_EXP 28
2130: PUSH
2131: LD_EXP 6
2135: PUSH
2136: LD_VAR 0 2
2140: ARRAY
2141: ARRAY
2142: IFFALSE 2376
// begin uc_side := i ;
2144: LD_ADDR_OWVAR 20
2148: PUSH
2149: LD_VAR 0 2
2153: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2154: LD_ADDR_OWVAR 21
2158: PUSH
2159: LD_EXP 8
2163: PUSH
2164: LD_VAR 0 2
2168: ARRAY
2169: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2170: LD_ADDR_VAR 0 3
2174: PUSH
2175: LD_EXP 28
2179: PUSH
2180: LD_EXP 6
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: ARRAY
2191: PUSH
2192: FOR_IN
2193: IFFALSE 2374
// begin bc_type := j [ 1 ] ;
2195: LD_ADDR_OWVAR 42
2199: PUSH
2200: LD_VAR 0 3
2204: PUSH
2205: LD_INT 1
2207: ARRAY
2208: ST_TO_ADDR
// bc_level := 2 ;
2209: LD_ADDR_OWVAR 43
2213: PUSH
2214: LD_INT 2
2216: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2217: LD_ADDR_VAR 0 4
2221: PUSH
2222: LD_VAR 0 3
2226: PUSH
2227: LD_INT 2
2229: ARRAY
2230: PUSH
2231: LD_INT 1
2233: ARRAY
2234: PPUSH
2235: LD_VAR 0 3
2239: PUSH
2240: LD_INT 2
2242: ARRAY
2243: PUSH
2244: LD_INT 2
2246: ARRAY
2247: PPUSH
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PUSH
2257: LD_INT 3
2259: ARRAY
2260: PPUSH
2261: CALL_OW 47
2265: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2266: LD_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PUSH
2275: LD_INT 0
2277: EQUAL
2278: IFFALSE 2372
// begin SetBName ( b , j [ 3 ] ) ;
2280: LD_VAR 0 4
2284: PPUSH
2285: LD_VAR 0 3
2289: PUSH
2290: LD_INT 3
2292: ARRAY
2293: PPUSH
2294: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 220 , 200 , 150 ] [ Difficulty ] ) ;
2298: LD_VAR 0 4
2302: PPUSH
2303: CALL_OW 274
2307: PPUSH
2308: LD_INT 1
2310: PPUSH
2311: LD_INT 220
2313: PUSH
2314: LD_INT 200
2316: PUSH
2317: LD_INT 150
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_OWVAR 67
2329: ARRAY
2330: PPUSH
2331: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 150 , 120 , 90 ] [ Difficulty ] ) ;
2335: LD_VAR 0 4
2339: PPUSH
2340: CALL_OW 274
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: LD_INT 150
2350: PUSH
2351: LD_INT 120
2353: PUSH
2354: LD_INT 90
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: PPUSH
2368: CALL_OW 277
// end ; end ;
2372: GO 2192
2374: POP
2375: POP
// end ; if multi_custom_commanders then
2376: LD_EXP 15
2380: IFFALSE 2472
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2382: LD_ADDR_VAR 0 6
2386: PUSH
2387: LD_VAR 0 2
2391: PPUSH
2392: LD_EXP 6
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: PPUSH
2403: CALL 1820 0 2
2407: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2408: LD_ADDR_EXP 23
2412: PUSH
2413: LD_EXP 23
2417: PPUSH
2418: LD_EXP 23
2422: PUSH
2423: LD_INT 1
2425: PLUS
2426: PPUSH
2427: LD_VAR 0 6
2431: PPUSH
2432: CALL_OW 2
2436: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2437: LD_VAR 0 6
2441: PPUSH
2442: LD_EXP 11
2446: PUSH
2447: LD_EXP 6
2451: PUSH
2452: LD_VAR 0 2
2456: ARRAY
2457: ARRAY
2458: PUSH
2459: LD_INT 1
2461: ARRAY
2462: PPUSH
2463: LD_INT 0
2465: PPUSH
2466: CALL_OW 49
// end else
2470: GO 2683
// begin uc_side := i ;
2472: LD_ADDR_OWVAR 20
2476: PUSH
2477: LD_VAR 0 2
2481: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2482: LD_ADDR_OWVAR 21
2486: PUSH
2487: LD_EXP 8
2491: PUSH
2492: LD_VAR 0 2
2496: ARRAY
2497: ST_TO_ADDR
// hc_importance := 100 ;
2498: LD_ADDR_OWVAR 32
2502: PUSH
2503: LD_INT 100
2505: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 1
2511: PPUSH
2512: LD_EXP 19
2516: PPUSH
2517: CALL_OW 380
// if multiplayer then
2521: LD_OWVAR 4
2525: IFFALSE 2583
// begin hc_name := mp_sides_players_names [ i ] ;
2527: LD_ADDR_OWVAR 26
2531: PUSH
2532: LD_OWVAR 19
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2543: LD_ADDR_OWVAR 33
2547: PUSH
2548: LD_STRING MULTIAVATARS
2550: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2551: LD_ADDR_OWVAR 34
2555: PUSH
2556: LD_VAR 0 2
2560: PPUSH
2561: CALL_OW 525
2565: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2566: LD_ADDR_OWVAR 27
2570: PUSH
2571: LD_VAR 0 2
2575: PPUSH
2576: CALL_OW 526
2580: ST_TO_ADDR
// end else
2581: GO 2615
// begin hc_gallery :=  ;
2583: LD_ADDR_OWVAR 33
2587: PUSH
2588: LD_STRING 
2590: ST_TO_ADDR
// hc_name :=  ;
2591: LD_ADDR_OWVAR 26
2595: PUSH
2596: LD_STRING 
2598: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2599: LD_ADDR_OWVAR 27
2603: PUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_INT 2
2609: PPUSH
2610: CALL_OW 12
2614: ST_TO_ADDR
// end ; un := CreateHuman ;
2615: LD_ADDR_VAR 0 6
2619: PUSH
2620: CALL_OW 44
2624: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2625: LD_VAR 0 6
2629: PPUSH
2630: LD_EXP 11
2634: PUSH
2635: LD_EXP 6
2639: PUSH
2640: LD_VAR 0 2
2644: ARRAY
2645: ARRAY
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2658: LD_ADDR_EXP 23
2662: PUSH
2663: LD_EXP 23
2667: PPUSH
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_VAR 0 6
2677: PPUSH
2678: CALL_OW 1
2682: ST_TO_ADDR
// end ; InitHc ;
2683: CALL_OW 19
// InitUc ;
2687: CALL_OW 18
// uc_side := i ;
2691: LD_ADDR_OWVAR 20
2695: PUSH
2696: LD_VAR 0 2
2700: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2701: LD_ADDR_OWVAR 21
2705: PUSH
2706: LD_EXP 8
2710: PUSH
2711: LD_VAR 0 2
2715: ARRAY
2716: ST_TO_ADDR
// hc_gallery :=  ;
2717: LD_ADDR_OWVAR 33
2721: PUSH
2722: LD_STRING 
2724: ST_TO_ADDR
// hc_name :=  ;
2725: LD_ADDR_OWVAR 26
2729: PUSH
2730: LD_STRING 
2732: ST_TO_ADDR
// hc_importance := 0 ;
2733: LD_ADDR_OWVAR 32
2737: PUSH
2738: LD_INT 0
2740: ST_TO_ADDR
// cl := 1 ;
2741: LD_ADDR_VAR 0 5
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: DOUBLE
2755: LD_INT 2
2757: DEC
2758: ST_TO_ADDR
2759: LD_EXP 18
2763: PUSH
2764: FOR_TO
2765: IFFALSE 3126
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2767: LD_VAR 0 3
2771: PUSH
2772: LD_INT 1
2774: MINUS
2775: PUSH
2776: LD_EXP 18
2780: PUSH
2781: LD_INT 1
2783: MINUS
2784: PUSH
2785: LD_INT 4
2787: DIVREAL
2788: MOD
2789: PUSH
2790: LD_INT 0
2792: EQUAL
2793: IFFALSE 2809
// cl := cl + 1 ;
2795: LD_ADDR_VAR 0 5
2799: PUSH
2800: LD_VAR 0 5
2804: PUSH
2805: LD_INT 1
2807: PLUS
2808: ST_TO_ADDR
// if cl > 4 then
2809: LD_VAR 0 5
2813: PUSH
2814: LD_INT 4
2816: GREATER
2817: IFFALSE 2827
// cl := 1 ;
2819: LD_ADDR_VAR 0 5
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2827: LD_INT 0
2829: PPUSH
2830: LD_VAR 0 5
2834: PPUSH
2835: LD_EXP 19
2839: PPUSH
2840: CALL_OW 380
// un := CreateHuman ;
2844: LD_ADDR_VAR 0 6
2848: PUSH
2849: CALL_OW 44
2853: ST_TO_ADDR
// if j > copy then
2854: LD_VAR 0 3
2858: PUSH
2859: LD_VAR 0 9
2863: GREATER
2864: IFFALSE 2893
// copy := Replace ( copy , j , un ) else
2866: LD_ADDR_VAR 0 9
2870: PUSH
2871: LD_VAR 0 9
2875: PPUSH
2876: LD_VAR 0 3
2880: PPUSH
2881: LD_VAR 0 6
2885: PPUSH
2886: CALL_OW 1
2890: ST_TO_ADDR
2891: GO 2975
// begin CopySkills ( copy [ j ] , un ) ;
2893: LD_VAR 0 9
2897: PUSH
2898: LD_VAR 0 3
2902: ARRAY
2903: PPUSH
2904: LD_VAR 0 6
2908: PPUSH
2909: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2913: LD_VAR 0 6
2917: PPUSH
2918: LD_INT 2
2920: PPUSH
2921: LD_VAR 0 9
2925: PUSH
2926: LD_VAR 0 3
2930: ARRAY
2931: PPUSH
2932: LD_INT 2
2934: PPUSH
2935: CALL_OW 260
2939: PPUSH
2940: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2944: LD_VAR 0 6
2948: PPUSH
2949: LD_INT 1
2951: PPUSH
2952: LD_VAR 0 9
2956: PUSH
2957: LD_VAR 0 3
2961: ARRAY
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: CALL_OW 260
2970: PPUSH
2971: CALL_OW 239
// end ; if multi_pos_area then
2975: LD_EXP 11
2979: IFFALSE 3124
// begin if GetClass ( un ) = 3 then
2981: LD_VAR 0 6
2985: PPUSH
2986: CALL_OW 257
2990: PUSH
2991: LD_INT 3
2993: EQUAL
2994: IFFALSE 3091
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
2996: LD_INT 21
2998: PPUSH
2999: LD_INT 1
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 43
3007: PUSH
3008: LD_INT 42
3010: PUSH
3011: LD_INT 42
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_OWVAR 67
3023: ARRAY
3024: PPUSH
3025: LD_INT 80
3027: PPUSH
3028: CALL 46620 0 5
// veh := CreateVehicle ;
3032: LD_ADDR_VAR 0 7
3036: PUSH
3037: CALL_OW 45
3041: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3042: LD_VAR 0 7
3046: PPUSH
3047: LD_EXP 11
3051: PUSH
3052: LD_EXP 6
3056: PUSH
3057: LD_VAR 0 2
3061: ARRAY
3062: ARRAY
3063: PUSH
3064: LD_INT 2
3066: ARRAY
3067: PPUSH
3068: LD_INT 0
3070: PPUSH
3071: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3075: LD_VAR 0 6
3079: PPUSH
3080: LD_VAR 0 7
3084: PPUSH
3085: CALL_OW 52
// continue ;
3089: GO 2764
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3091: LD_VAR 0 6
3095: PPUSH
3096: LD_EXP 11
3100: PUSH
3101: LD_EXP 6
3105: PUSH
3106: LD_VAR 0 2
3110: ARRAY
3111: ARRAY
3112: PUSH
3113: LD_INT 1
3115: ARRAY
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 49
// end ; end ;
3124: GO 2764
3126: POP
3127: POP
// end ;
3128: GO 2108
3130: POP
3131: POP
// end ;
3132: LD_VAR 0 1
3136: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3137: LD_INT 0
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
3143: PPUSH
// if not multi_support then
3144: LD_EXP 22
3148: NOT
3149: IFFALSE 3153
// exit ;
3151: GO 3440
// result := [ ] ;
3153: LD_ADDR_VAR 0 1
3157: PUSH
3158: EMPTY
3159: ST_TO_ADDR
// for i := 1 to 8 do
3160: LD_ADDR_VAR 0 2
3164: PUSH
3165: DOUBLE
3166: LD_INT 1
3168: DEC
3169: ST_TO_ADDR
3170: LD_INT 8
3172: PUSH
3173: FOR_TO
3174: IFFALSE 3438
// begin result := Replace ( result , i , [ ] ) ;
3176: LD_ADDR_VAR 0 1
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: EMPTY
3192: PPUSH
3193: CALL_OW 1
3197: ST_TO_ADDR
// if multi_sides [ i ] then
3198: LD_EXP 6
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: IFFALSE 3436
// begin tmp := [ ] ;
3210: LD_ADDR_VAR 0 5
3214: PUSH
3215: EMPTY
3216: ST_TO_ADDR
// if multi_support = 1 then
3217: LD_EXP 22
3221: PUSH
3222: LD_INT 1
3224: EQUAL
3225: IFFALSE 3314
// begin uc_side := i ;
3227: LD_ADDR_OWVAR 20
3231: PUSH
3232: LD_VAR 0 2
3236: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3237: LD_ADDR_OWVAR 21
3241: PUSH
3242: LD_EXP 8
3246: PUSH
3247: LD_VAR 0 2
3251: ARRAY
3252: ST_TO_ADDR
// for j := 1 to 2 do
3253: LD_ADDR_VAR 0 3
3257: PUSH
3258: DOUBLE
3259: LD_INT 1
3261: DEC
3262: ST_TO_ADDR
3263: LD_INT 2
3265: PUSH
3266: FOR_TO
3267: IFFALSE 3312
// begin InitHC_All ( ) ;
3269: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
3273: LD_INT 0
3275: PPUSH
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: CALL_OW 12
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3294: LD_ADDR_VAR 0 5
3298: PUSH
3299: LD_VAR 0 5
3303: PUSH
3304: CALL_OW 44
3308: ADD
3309: ST_TO_ADDR
// end ;
3310: GO 3266
3312: POP
3313: POP
// end ; if multi_support = 2 then
3314: LD_EXP 22
3318: PUSH
3319: LD_INT 2
3321: EQUAL
3322: IFFALSE 3411
// begin uc_side := i ;
3324: LD_ADDR_OWVAR 20
3328: PUSH
3329: LD_VAR 0 2
3333: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3334: LD_ADDR_OWVAR 21
3338: PUSH
3339: LD_EXP 8
3343: PUSH
3344: LD_VAR 0 2
3348: ARRAY
3349: ST_TO_ADDR
// for j := 1 to 4 do
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: DOUBLE
3356: LD_INT 1
3358: DEC
3359: ST_TO_ADDR
3360: LD_INT 4
3362: PUSH
3363: FOR_TO
3364: IFFALSE 3409
// begin InitHC_All ( ) ;
3366: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
3370: LD_INT 0
3372: PPUSH
3373: LD_INT 1
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: CALL_OW 12
3383: PPUSH
3384: LD_INT 2
3386: PPUSH
3387: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3391: LD_ADDR_VAR 0 5
3395: PUSH
3396: LD_VAR 0 5
3400: PUSH
3401: CALL_OW 44
3405: ADD
3406: ST_TO_ADDR
// end ;
3407: GO 3363
3409: POP
3410: POP
// end ; result := Replace ( result , i , tmp ) ;
3411: LD_ADDR_VAR 0 1
3415: PUSH
3416: LD_VAR 0 1
3420: PPUSH
3421: LD_VAR 0 2
3425: PPUSH
3426: LD_VAR 0 5
3430: PPUSH
3431: CALL_OW 1
3435: ST_TO_ADDR
// end ; end ;
3436: GO 3173
3438: POP
3439: POP
// end ;
3440: LD_VAR 0 1
3444: RET
// export function Multiplayer_Start ( ) ; begin
3445: LD_INT 0
3447: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3448: CALL 2083 0 0
// Multiplayer_InitPointSystem ( ) ;
3452: CALL 4182 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3456: LD_INT 20
3458: PPUSH
3459: CALL 4358 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3463: LD_INT 150
3465: PPUSH
3466: CALL 4358 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3470: LD_INT 5
3472: PPUSH
3473: CALL 4358 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3477: LD_INT 40
3479: NEG
3480: PPUSH
3481: CALL 4358 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3485: LD_INT 200
3487: PPUSH
3488: CALL 4358 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3492: LD_INT 2
3494: PPUSH
3495: CALL 4358 0 1
// if multi_support then
3499: LD_EXP 22
3503: IFFALSE 3515
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3505: LD_ADDR_EXP 26
3509: PUSH
3510: CALL 3137 0 0
3514: ST_TO_ADDR
// if multi_sides [ your_side ] then
3515: LD_EXP 6
3519: PUSH
3520: LD_OWVAR 2
3524: ARRAY
3525: IFFALSE 3552
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3527: LD_INT 22
3529: PUSH
3530: LD_OWVAR 2
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PPUSH
3539: CALL_OW 69
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PPUSH
3548: CALL_OW 87
// end ;
3552: LD_VAR 0 1
3556: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
3557: LD_INT 0
3559: PPUSH
3560: PPUSH
3561: PPUSH
// repeat wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
3569: LD_OWVAR 1
3573: PUSH
3574: LD_EXP 27
3578: GREATER
3579: PUSH
3580: LD_EXP 22
3584: AND
3585: IFFALSE 3750
// begin if tick mod 1 1$00 = 0 then
3587: LD_OWVAR 1
3591: PUSH
3592: LD_INT 2100
3594: MOD
3595: PUSH
3596: LD_INT 0
3598: EQUAL
3599: IFFALSE 3750
// begin for i := 1 to 8 do
3601: LD_ADDR_VAR 0 2
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_INT 8
3613: PUSH
3614: FOR_TO
3615: IFFALSE 3748
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
3617: LD_EXP 6
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: LD_EXP 24
3632: PUSH
3633: LD_VAR 0 2
3637: ARRAY
3638: NOT
3639: AND
3640: PUSH
3641: LD_EXP 26
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: AND
3652: PUSH
3653: LD_INT 80
3655: PUSH
3656: LD_INT 60
3658: PUSH
3659: LD_INT 40
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: PUSH
3667: LD_OWVAR 67
3671: ARRAY
3672: PPUSH
3673: CALL_OW 13
3677: AND
3678: IFFALSE 3746
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
3680: LD_EXP 26
3684: PUSH
3685: LD_VAR 0 2
3689: ARRAY
3690: PUSH
3691: LD_INT 1
3693: ARRAY
3694: PPUSH
3695: LD_INT 7
3697: PPUSH
3698: LD_INT 1
3700: PPUSH
3701: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
3705: LD_ADDR_EXP 26
3709: PUSH
3710: LD_EXP 26
3714: PPUSH
3715: LD_VAR 0 2
3719: PPUSH
3720: LD_EXP 26
3724: PUSH
3725: LD_VAR 0 2
3729: ARRAY
3730: PPUSH
3731: LD_INT 1
3733: PPUSH
3734: CALL_OW 3
3738: PPUSH
3739: CALL_OW 1
3743: ST_TO_ADDR
// break ;
3744: GO 3748
// end ; end ;
3746: GO 3614
3748: POP
3749: POP
// end ; end ; if not multi_custom_commanders then
3750: LD_EXP 15
3754: NOT
3755: IFFALSE 3868
// begin for i := 1 to 8 do
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_INT 8
3769: PUSH
3770: FOR_TO
3771: IFFALSE 3842
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3773: LD_INT 22
3775: PUSH
3776: LD_VAR 0 2
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PPUSH
3785: CALL_OW 69
3789: PUSH
3790: LD_INT 0
3792: EQUAL
3793: PUSH
3794: LD_EXP 24
3798: PUSH
3799: LD_VAR 0 2
3803: ARRAY
3804: NOT
3805: AND
3806: IFFALSE 3840
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3808: LD_ADDR_EXP 24
3812: PUSH
3813: LD_EXP 24
3817: PPUSH
3818: LD_VAR 0 2
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL_OW 1
3830: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3831: LD_VAR 0 2
3835: PPUSH
3836: CALL 4428 0 1
// end ; end ;
3840: GO 3770
3842: POP
3843: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3844: LD_EXP 24
3848: PPUSH
3849: CALL 43882 0 1
3853: PUSH
3854: LD_EXP 6
3858: PPUSH
3859: CALL 43882 0 1
3863: EQUAL
3864: IFFALSE 3868
// break ;
3866: GO 3888
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
3868: CALL 4002 0 0
3872: NOT
3873: PUSH
3874: LD_EXP 2
3878: AND
3879: PUSH
3880: LD_EXP 23
3884: NOT
3885: OR
3886: IFFALSE 3562
// game := false ;
3888: LD_ADDR_EXP 2
3892: PUSH
3893: LD_INT 0
3895: ST_TO_ADDR
// for i := 1 to 8 do
3896: LD_ADDR_VAR 0 2
3900: PUSH
3901: DOUBLE
3902: LD_INT 1
3904: DEC
3905: ST_TO_ADDR
3906: LD_INT 8
3908: PUSH
3909: FOR_TO
3910: IFFALSE 3946
// begin if multi_sides [ i ] then
3912: LD_EXP 6
3916: PUSH
3917: LD_VAR 0 2
3921: ARRAY
3922: IFFALSE 3944
// SetMultiScore ( i , multi_points [ i ] ) ;
3924: LD_VAR 0 2
3928: PPUSH
3929: LD_EXP 29
3933: PUSH
3934: LD_VAR 0 2
3938: ARRAY
3939: PPUSH
3940: CALL_OW 506
// end ;
3944: GO 3909
3946: POP
3947: POP
// if multi_loosers [ your_side ] then
3948: LD_EXP 24
3952: PUSH
3953: LD_OWVAR 2
3957: ARRAY
3958: IFFALSE 3981
// begin if Multiplayer then
3960: LD_OWVAR 4
3964: IFFALSE 3972
// YouLostInMultiplayer else
3966: CALL_OW 107
3970: GO 3979
// YouLost (  ) ;
3972: LD_STRING 
3974: PPUSH
3975: CALL_OW 104
// end else
3979: GO 3997
// begin if Multiplayer then
3981: LD_OWVAR 4
3985: IFFALSE 3993
// YouWinInMultiplayer else
3987: CALL_OW 106
3991: GO 3997
// YouWin ;
3993: CALL_OW 103
// end ; end ;
3997: LD_VAR 0 1
4001: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4002: LD_INT 0
4004: PPUSH
4005: PPUSH
// result := false ;
4006: LD_ADDR_VAR 0 1
4010: PUSH
4011: LD_INT 0
4013: ST_TO_ADDR
// for side in botSides do
4014: LD_ADDR_VAR 0 2
4018: PUSH
4019: LD_EXP 3
4023: PUSH
4024: FOR_IN
4025: IFFALSE 4086
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4027: LD_ADDR_VAR 0 1
4031: PUSH
4032: LD_INT 22
4034: PUSH
4035: LD_VAR 0 2
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: LD_INT 21
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 50
4056: PUSH
4057: EMPTY
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PPUSH
4065: CALL_OW 69
4069: PUSH
4070: LD_INT 0
4072: GREATER
4073: ST_TO_ADDR
// if result then
4074: LD_VAR 0 1
4078: IFFALSE 4084
// exit ;
4080: POP
4081: POP
4082: GO 4088
// end ;
4084: GO 4024
4086: POP
4087: POP
// end ;
4088: LD_VAR 0 1
4092: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4093: LD_INT 0
4095: PPUSH
4096: PPUSH
// result := [ ] ;
4097: LD_ADDR_VAR 0 1
4101: PUSH
4102: EMPTY
4103: ST_TO_ADDR
// for i := 1 to 8 do
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: DOUBLE
4110: LD_INT 1
4112: DEC
4113: ST_TO_ADDR
4114: LD_INT 8
4116: PUSH
4117: FOR_TO
4118: IFFALSE 4175
// begin if multi_sides [ i ] then
4120: LD_EXP 6
4124: PUSH
4125: LD_VAR 0 2
4129: ARRAY
4130: IFFALSE 4173
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4132: LD_ADDR_VAR 0 1
4136: PUSH
4137: LD_VAR 0 1
4141: PUSH
4142: LD_STRING #coop-points
4144: PUSH
4145: LD_VAR 0 2
4149: PUSH
4150: LD_VAR 0 2
4154: PUSH
4155: LD_EXP 29
4159: PUSH
4160: LD_VAR 0 2
4164: ARRAY
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: ADD
4172: ST_TO_ADDR
// end ; end ;
4173: GO 4117
4175: POP
4176: POP
// end ;
4177: LD_VAR 0 1
4181: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4182: LD_INT 0
4184: PPUSH
4185: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4186: LD_ADDR_EXP 29
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: LD_INT 0
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: LD_INT 0
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 0
4211: PUSH
4212: LD_INT 0
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4225: LD_ADDR_EXP 30
4229: PUSH
4230: EMPTY
4231: ST_TO_ADDR
// end ;
4232: LD_VAR 0 1
4236: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4237: LD_INT 0
4239: PPUSH
// if not multi_points or not side or side > 8 then
4240: LD_EXP 29
4244: NOT
4245: PUSH
4246: LD_VAR 0 1
4250: NOT
4251: OR
4252: PUSH
4253: LD_VAR 0 1
4257: PUSH
4258: LD_INT 8
4260: GREATER
4261: OR
4262: IFFALSE 4266
// exit ;
4264: GO 4303
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4266: LD_ADDR_EXP 29
4270: PUSH
4271: LD_EXP 29
4275: PPUSH
4276: LD_VAR 0 1
4280: PPUSH
4281: LD_EXP 29
4285: PUSH
4286: LD_VAR 0 1
4290: ARRAY
4291: PUSH
4292: LD_VAR 0 2
4296: PLUS
4297: PPUSH
4298: CALL_OW 1
4302: ST_TO_ADDR
// end ;
4303: LD_VAR 0 3
4307: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4308: LD_INT 0
4310: PPUSH
// if not multi_points or not side or side > 8 then
4311: LD_EXP 29
4315: NOT
4316: PUSH
4317: LD_VAR 0 1
4321: NOT
4322: OR
4323: PUSH
4324: LD_VAR 0 1
4328: PUSH
4329: LD_INT 8
4331: GREATER
4332: OR
4333: IFFALSE 4337
// exit ;
4335: GO 4353
// result := multi_points [ side ] ;
4337: LD_ADDR_VAR 0 2
4341: PUSH
4342: LD_EXP 29
4346: PUSH
4347: LD_VAR 0 1
4351: ARRAY
4352: ST_TO_ADDR
// end ;
4353: LD_VAR 0 2
4357: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4358: LD_INT 0
4360: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4361: LD_ADDR_EXP 30
4365: PUSH
4366: LD_EXP 30
4370: PPUSH
4371: LD_EXP 30
4375: PUSH
4376: LD_INT 1
4378: PLUS
4379: PPUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: CALL_OW 1
4389: ST_TO_ADDR
// end ;
4390: LD_VAR 0 2
4394: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4395: LD_INT 0
4397: PPUSH
// if not id then
4398: LD_VAR 0 1
4402: NOT
4403: IFFALSE 4407
// exit ;
4405: GO 4423
// result := multi_points_conditions [ id ] ;
4407: LD_ADDR_VAR 0 2
4411: PUSH
4412: LD_EXP 30
4416: PUSH
4417: LD_VAR 0 1
4421: ARRAY
4422: ST_TO_ADDR
// end ;
4423: LD_VAR 0 2
4427: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4428: LD_INT 0
4430: PPUSH
4431: PPUSH
4432: PPUSH
4433: PPUSH
4434: PPUSH
// players := [ ] ;
4435: LD_ADDR_VAR 0 3
4439: PUSH
4440: EMPTY
4441: ST_TO_ADDR
// for i = 1 to 8 do
4442: LD_ADDR_VAR 0 4
4446: PUSH
4447: DOUBLE
4448: LD_INT 1
4450: DEC
4451: ST_TO_ADDR
4452: LD_INT 8
4454: PUSH
4455: FOR_TO
4456: IFFALSE 4515
// begin if i = side then
4458: LD_VAR 0 4
4462: PUSH
4463: LD_VAR 0 1
4467: EQUAL
4468: IFFALSE 4472
// continue ;
4470: GO 4455
// if multi_sides [ i ] and not multi_loosers [ i ] then
4472: LD_EXP 6
4476: PUSH
4477: LD_VAR 0 4
4481: ARRAY
4482: PUSH
4483: LD_EXP 24
4487: PUSH
4488: LD_VAR 0 4
4492: ARRAY
4493: NOT
4494: AND
4495: IFFALSE 4513
// players := players ^ i ;
4497: LD_ADDR_VAR 0 3
4501: PUSH
4502: LD_VAR 0 3
4506: PUSH
4507: LD_VAR 0 4
4511: ADD
4512: ST_TO_ADDR
// end ;
4513: GO 4455
4515: POP
4516: POP
// if not players then
4517: LD_VAR 0 3
4521: NOT
4522: IFFALSE 4526
// exit ;
4524: GO 4793
// if players = 1 then
4526: LD_VAR 0 3
4530: PUSH
4531: LD_INT 1
4533: EQUAL
4534: IFFALSE 4595
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4536: LD_ADDR_VAR 0 4
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_VAR 0 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 51
4555: PUSH
4556: EMPTY
4557: LIST
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PPUSH
4563: CALL_OW 69
4567: PUSH
4568: FOR_IN
4569: IFFALSE 4591
// SetSide ( i , players [ 1 ] ) ;
4571: LD_VAR 0 4
4575: PPUSH
4576: LD_VAR 0 3
4580: PUSH
4581: LD_INT 1
4583: ARRAY
4584: PPUSH
4585: CALL_OW 235
4589: GO 4568
4591: POP
4592: POP
// end else
4593: GO 4793
// begin j := 1 ;
4595: LD_ADDR_VAR 0 5
4599: PUSH
4600: LD_INT 1
4602: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4603: LD_ADDR_VAR 0 4
4607: PUSH
4608: LD_INT 22
4610: PUSH
4611: LD_VAR 0 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: LD_INT 2
4622: PUSH
4623: LD_INT 21
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 51
4635: PUSH
4636: EMPTY
4637: LIST
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 21
4645: PUSH
4646: LD_INT 2
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PPUSH
4662: CALL_OW 69
4666: PUSH
4667: FOR_IN
4668: IFFALSE 4791
// begin SetSide ( i , players [ j ] ) ;
4670: LD_VAR 0 4
4674: PPUSH
4675: LD_VAR 0 3
4679: PUSH
4680: LD_VAR 0 5
4684: ARRAY
4685: PPUSH
4686: CALL_OW 235
// if IsDrivenBy ( i ) then
4690: LD_VAR 0 4
4694: PPUSH
4695: CALL_OW 311
4699: IFFALSE 4726
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4701: LD_VAR 0 4
4705: PPUSH
4706: CALL_OW 311
4710: PPUSH
4711: LD_VAR 0 3
4715: PUSH
4716: LD_VAR 0 5
4720: ARRAY
4721: PPUSH
4722: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4726: LD_VAR 0 4
4730: PPUSH
4731: CALL_OW 310
4735: PPUSH
4736: CALL_OW 247
4740: PUSH
4741: LD_INT 3
4743: EQUAL
4744: IFFALSE 4755
// ComExitBuilding ( i ) ;
4746: LD_VAR 0 4
4750: PPUSH
4751: CALL_OW 122
// j := j + 1 ;
4755: LD_ADDR_VAR 0 5
4759: PUSH
4760: LD_VAR 0 5
4764: PUSH
4765: LD_INT 1
4767: PLUS
4768: ST_TO_ADDR
// if j > players then
4769: LD_VAR 0 5
4773: PUSH
4774: LD_VAR 0 3
4778: GREATER
4779: IFFALSE 4789
// j := 1 ;
4781: LD_ADDR_VAR 0 5
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// end ;
4789: GO 4667
4791: POP
4792: POP
// end ; end ;
4793: LD_VAR 0 2
4797: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4798: LD_INT 0
4800: PPUSH
4801: PPUSH
4802: PPUSH
// i := 3 ;
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: LD_INT 3
4810: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4811: LD_ADDR_VAR 0 3
4815: PUSH
4816: LD_INT 5
4818: PUSH
4819: LD_INT 10
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 120
4828: PUSH
4829: LD_INT 2
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 101
4838: PUSH
4839: LD_INT 8
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 27
4848: PUSH
4849: LD_INT 4
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4862: LD_INT 4
4864: PPUSH
4865: LD_INT 5
4867: PPUSH
4868: LD_VAR 0 3
4872: PUSH
4873: LD_VAR 0 2
4877: ARRAY
4878: PUSH
4879: LD_INT 1
4881: ARRAY
4882: PPUSH
4883: LD_VAR 0 3
4887: PUSH
4888: LD_VAR 0 2
4892: ARRAY
4893: PUSH
4894: LD_INT 2
4896: ARRAY
4897: PPUSH
4898: LD_INT 0
4900: PPUSH
4901: CALL_OW 58
// end ;
4905: LD_VAR 0 1
4909: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4910: LD_INT 0
4912: PPUSH
// if not side or side > 8 then
4913: LD_VAR 0 1
4917: NOT
4918: PUSH
4919: LD_VAR 0 1
4923: PUSH
4924: LD_INT 8
4926: GREATER
4927: OR
4928: IFFALSE 4932
// exit ;
4930: GO 4949
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4932: LD_VAR 0 1
4936: PPUSH
4937: LD_INT 6
4939: PPUSH
4940: CALL 4395 0 1
4944: PPUSH
4945: CALL 4237 0 2
// end ;
4949: LD_VAR 0 2
4953: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
4954: LD_INT 0
4956: PPUSH
// if not side or side > 8 then
4957: LD_VAR 0 1
4961: NOT
4962: PUSH
4963: LD_VAR 0 1
4967: PUSH
4968: LD_INT 8
4970: GREATER
4971: OR
4972: IFFALSE 4976
// exit ;
4974: GO 4993
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
4976: LD_VAR 0 1
4980: PPUSH
4981: LD_INT 4
4983: PPUSH
4984: CALL 4395 0 1
4988: PPUSH
4989: CALL 4237 0 2
// end ;
4993: LD_VAR 0 2
4997: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
4998: LD_INT 0
5000: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5001: LD_VAR 0 1
5005: NOT
5006: PUSH
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 8
5014: GREATER
5015: OR
5016: PUSH
5017: LD_VAR 0 2
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: LD_INT 36
5030: PUSH
5031: LD_INT 0
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: IN
5040: NOT
5041: OR
5042: IFFALSE 5046
// exit ;
5044: GO 5063
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5046: LD_VAR 0 1
5050: PPUSH
5051: LD_INT 3
5053: PPUSH
5054: CALL 4395 0 1
5058: PPUSH
5059: CALL 4237 0 2
// end ;
5063: LD_VAR 0 3
5067: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5068: LD_INT 0
5070: PPUSH
5071: PPUSH
// if not un then
5072: LD_VAR 0 1
5076: NOT
5077: IFFALSE 5081
// exit ;
5079: GO 5127
// if not points then
5081: LD_VAR 0 3
5085: NOT
5086: IFFALSE 5103
// gained_points := Multiplayer_GetCondition ( 1 ) else
5088: LD_ADDR_VAR 0 5
5092: PUSH
5093: LD_INT 1
5095: PPUSH
5096: CALL 4395 0 1
5100: ST_TO_ADDR
5101: GO 5113
// gained_points := points ;
5103: LD_ADDR_VAR 0 5
5107: PUSH
5108: LD_VAR 0 3
5112: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5113: LD_VAR 0 2
5117: PPUSH
5118: LD_VAR 0 5
5122: PPUSH
5123: CALL 4237 0 2
5127: LD_VAR 0 4
5131: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5132: LD_INT 0
5134: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5135: LD_VAR 0 1
5139: PPUSH
5140: LD_INT 2
5142: PPUSH
5143: CALL 4395 0 1
5147: PPUSH
5148: CALL 4237 0 2
// end ; end_of_file
5152: LD_VAR 0 2
5156: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5168: LD_ADDR_EXP 32
5172: PUSH
5173: LD_VAR 0 1
5177: PPUSH
5178: LD_INT 1
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL 41843 0 3
5188: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5189: LD_ADDR_EXP 33
5193: PUSH
5194: LD_INT 4
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: LD_INT 1
5202: PUSH
5203: LD_INT 6
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 3
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: LD_INT 5
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: PUSH
5230: LD_INT 3
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: LD_INT 1
5238: PUSH
5239: LD_INT 4
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 1
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: LD_INT 4
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_INT 2
5268: PUSH
5269: LD_INT 1
5271: PUSH
5272: LD_INT 1
5274: PUSH
5275: LD_INT 3
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: ST_TO_ADDR
// amBuildings := [ ] ;
5291: LD_ADDR_EXP 34
5295: PUSH
5296: EMPTY
5297: ST_TO_ADDR
// amVehicles := [ ] ;
5298: LD_ADDR_EXP 35
5302: PUSH
5303: EMPTY
5304: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
5305: LD_ADDR_EXP 36
5309: PUSH
5310: EMPTY
5311: ST_TO_ADDR
// amDrivers := [ ] ;
5312: LD_ADDR_EXP 37
5316: PUSH
5317: EMPTY
5318: ST_TO_ADDR
// amVehiclesCounter := 3 ;
5319: LD_ADDR_EXP 38
5323: PUSH
5324: LD_INT 3
5326: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
5327: LD_ADDR_EXP 41
5331: PUSH
5332: LD_INT 6
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: LD_INT 10
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5352: LD_ADDR_VAR 0 8
5356: PUSH
5357: LD_INT 3
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: LD_INT 5
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: ST_TO_ADDR
// uc_side := side ;
5377: LD_ADDR_OWVAR 20
5381: PUSH
5382: LD_VAR 0 1
5386: ST_TO_ADDR
// uc_nation := nation_american ;
5387: LD_ADDR_OWVAR 21
5391: PUSH
5392: LD_INT 1
5394: ST_TO_ADDR
// hc_gallery := us ;
5395: LD_ADDR_OWVAR 33
5399: PUSH
5400: LD_STRING us
5402: ST_TO_ADDR
// hc_face_number := 19 ;
5403: LD_ADDR_OWVAR 34
5407: PUSH
5408: LD_INT 19
5410: ST_TO_ADDR
// hc_importance := 100 ;
5411: LD_ADDR_OWVAR 32
5415: PUSH
5416: LD_INT 100
5418: ST_TO_ADDR
// hc_name := Sikorski ;
5419: LD_ADDR_OWVAR 26
5423: PUSH
5424: LD_STRING Sikorski
5426: ST_TO_ADDR
// hc_sex := sex_male ;
5427: LD_ADDR_OWVAR 27
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
5435: LD_ADDR_OWVAR 31
5439: PUSH
5440: LD_INT 5
5442: PUSH
5443: LD_INT 3
5445: PUSH
5446: LD_INT 2
5448: PUSH
5449: LD_INT 1
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5458: LD_ADDR_OWVAR 29
5462: PUSH
5463: LD_INT 10
5465: PUSH
5466: LD_INT 11
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: ST_TO_ADDR
// Sikorski := CreateHuman ;
5473: LD_ADDR_EXP 31
5477: PUSH
5478: CALL_OW 44
5482: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
5483: LD_EXP 31
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: CALL_OW 52
// InitHC_All ( ) ;
5495: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
5499: LD_ADDR_EXP 39
5503: PUSH
5504: LD_INT 1
5506: PPUSH
5507: LD_INT 3
5509: PPUSH
5510: LD_STRING 
5512: PPUSH
5513: LD_VAR 0 8
5517: PPUSH
5518: LD_INT 800
5520: PUSH
5521: LD_INT 120
5523: PUSH
5524: LD_INT 0
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: LIST
5531: PPUSH
5532: LD_INT 10
5534: PUSH
5535: LD_INT 11
5537: PUSH
5538: LD_INT 12
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_OWVAR 67
5550: ARRAY
5551: PUSH
5552: LD_INT 4
5554: PUSH
5555: LD_INT 6
5557: PUSH
5558: LD_INT 3
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL 50441 0 6
5571: ST_TO_ADDR
// amForceTmp := [ ] ;
5572: LD_ADDR_EXP 40
5576: PUSH
5577: EMPTY
5578: ST_TO_ADDR
// if Difficulty = 3 then
5579: LD_OWVAR 67
5583: PUSH
5584: LD_INT 3
5586: EQUAL
5587: IFFALSE 5618
// begin bc_type := b_breastwork ;
5589: LD_ADDR_OWVAR 42
5593: PUSH
5594: LD_INT 31
5596: ST_TO_ADDR
// bc_level := 7 ;
5597: LD_ADDR_OWVAR 43
5601: PUSH
5602: LD_INT 7
5604: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
5605: LD_INT 79
5607: PPUSH
5608: LD_INT 72
5610: PPUSH
5611: LD_INT 5
5613: PPUSH
5614: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_INT 22
5625: PUSH
5626: LD_VAR 0 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 30
5637: PUSH
5638: LD_INT 31
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 3
5647: PUSH
5648: LD_INT 95
5650: PUSH
5651: LD_INT 3
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 58
5664: PUSH
5665: EMPTY
5666: LIST
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: PPUSH
5674: CALL_OW 69
5678: PUSH
5679: FOR_IN
5680: IFFALSE 5809
// begin d := GetDir ( i ) ;
5682: LD_ADDR_VAR 0 4
5686: PUSH
5687: LD_VAR 0 3
5691: PPUSH
5692: CALL_OW 254
5696: ST_TO_ADDR
// if d < 3 then
5697: LD_VAR 0 4
5701: PUSH
5702: LD_INT 3
5704: LESS
5705: IFFALSE 5723
// d := d + 3 else
5707: LD_ADDR_VAR 0 4
5711: PUSH
5712: LD_VAR 0 4
5716: PUSH
5717: LD_INT 3
5719: PLUS
5720: ST_TO_ADDR
5721: GO 5737
// d := d - 3 ;
5723: LD_ADDR_VAR 0 4
5727: PUSH
5728: LD_VAR 0 4
5732: PUSH
5733: LD_INT 3
5735: MINUS
5736: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5737: LD_INT 0
5739: PPUSH
5740: LD_VAR 0 8
5744: PPUSH
5745: CALL_OW 381
// un := CreateHuman ;
5749: LD_ADDR_VAR 0 6
5753: PUSH
5754: CALL_OW 44
5758: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
5759: LD_ADDR_EXP 40
5763: PUSH
5764: LD_EXP 40
5768: PPUSH
5769: LD_VAR 0 6
5773: PPUSH
5774: CALL 79471 0 2
5778: ST_TO_ADDR
// SetDir ( un , d ) ;
5779: LD_VAR 0 6
5783: PPUSH
5784: LD_VAR 0 4
5788: PPUSH
5789: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5793: LD_VAR 0 6
5797: PPUSH
5798: LD_VAR 0 3
5802: PPUSH
5803: CALL_OW 52
// end ;
5807: GO 5679
5809: POP
5810: POP
// for i := 1 to 3 do
5811: LD_ADDR_VAR 0 3
5815: PUSH
5816: DOUBLE
5817: LD_INT 1
5819: DEC
5820: ST_TO_ADDR
5821: LD_INT 3
5823: PUSH
5824: FOR_TO
5825: IFFALSE 5886
// begin PrepareEngineer ( false , skill ) ;
5827: LD_INT 0
5829: PPUSH
5830: LD_VAR 0 8
5834: PPUSH
5835: CALL_OW 382
// un := CreateHuman ;
5839: LD_ADDR_VAR 0 6
5843: PUSH
5844: CALL_OW 44
5848: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
5849: LD_VAR 0 6
5853: PPUSH
5854: LD_INT 29
5856: PPUSH
5857: LD_INT 0
5859: PPUSH
5860: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
5864: LD_ADDR_EXP 40
5868: PUSH
5869: LD_EXP 40
5873: PPUSH
5874: LD_VAR 0 6
5878: PPUSH
5879: CALL 79471 0 2
5883: ST_TO_ADDR
// end ;
5884: GO 5824
5886: POP
5887: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
5888: LD_ADDR_VAR 0 3
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 1
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 21
5907: PUSH
5908: LD_INT 3
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PPUSH
5919: CALL_OW 69
5923: PUSH
5924: FOR_IN
5925: IFFALSE 5958
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_INT 3
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: LD_INT 7
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: PUSH
5946: LD_OWVAR 67
5950: ARRAY
5951: PPUSH
5952: CALL_OW 241
5956: GO 5924
5958: POP
5959: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
5960: LD_ADDR_VAR 0 3
5964: PUSH
5965: LD_INT 22
5967: PUSH
5968: LD_VAR 0 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PPUSH
5991: CALL_OW 69
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6038
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
5999: LD_VAR 0 3
6003: PPUSH
6004: LD_INT 5
6006: PUSH
6007: LD_INT 4
6009: PUSH
6010: LD_INT 5
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: PUSH
6018: LD_VAR 0 3
6022: PUSH
6023: LD_INT 3
6025: MOD
6026: PUSH
6027: LD_INT 1
6029: PLUS
6030: ARRAY
6031: PPUSH
6032: CALL_OW 431
6036: GO 5996
6038: POP
6039: POP
// end ;
6040: LD_VAR 0 2
6044: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6045: LD_INT 0
6047: PPUSH
6048: PPUSH
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
6068: PPUSH
6069: PPUSH
6070: PPUSH
6071: PPUSH
6072: PPUSH
6073: PPUSH
// enable ;
6074: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6075: LD_ADDR_VAR 0 10
6079: PUSH
6080: LD_INT 81
6082: PUSH
6083: LD_VAR 0 1
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PPUSH
6092: CALL_OW 69
6096: ST_TO_ADDR
// if tmp then
6097: LD_VAR 0 10
6101: IFFALSE 6122
// enemySide := GetSide ( tmp [ 1 ] ) ;
6103: LD_ADDR_VAR 0 34
6107: PUSH
6108: LD_VAR 0 10
6112: PUSH
6113: LD_INT 1
6115: ARRAY
6116: PPUSH
6117: CALL_OW 255
6121: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
6122: LD_ADDR_VAR 0 22
6126: PUSH
6127: LD_VAR 0 3
6131: PPUSH
6132: LD_INT 81
6134: PUSH
6135: LD_VAR 0 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PPUSH
6144: CALL_OW 70
6148: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6149: LD_ADDR_VAR 0 23
6153: PUSH
6154: LD_VAR 0 4
6158: PPUSH
6159: LD_INT 81
6161: PUSH
6162: LD_VAR 0 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PPUSH
6171: CALL_OW 70
6175: ST_TO_ADDR
// vehicles := amVehicles ;
6176: LD_ADDR_VAR 0 26
6180: PUSH
6181: LD_EXP 35
6185: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6186: LD_ADDR_VAR 0 32
6190: PUSH
6191: LD_VAR 0 3
6195: PPUSH
6196: LD_INT 22
6198: PUSH
6199: LD_VAR 0 1
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 2
6210: PUSH
6211: LD_INT 30
6213: PUSH
6214: LD_INT 0
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 30
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 70
6244: ST_TO_ADDR
// if depot then
6245: LD_VAR 0 32
6249: IFFALSE 6265
// depot := depot [ 1 ] ;
6251: LD_ADDR_VAR 0 32
6255: PUSH
6256: LD_VAR 0 32
6260: PUSH
6261: LD_INT 1
6263: ARRAY
6264: ST_TO_ADDR
// if amTech then
6265: LD_EXP 32
6269: IFFALSE 6428
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6271: LD_ADDR_VAR 0 12
6275: PUSH
6276: LD_VAR 0 3
6280: PPUSH
6281: LD_INT 22
6283: PUSH
6284: LD_VAR 0 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 50
6295: PUSH
6296: EMPTY
6297: LIST
6298: PUSH
6299: LD_INT 2
6301: PUSH
6302: LD_INT 30
6304: PUSH
6305: LD_INT 6
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 30
6314: PUSH
6315: LD_INT 7
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 30
6324: PUSH
6325: LD_INT 8
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: PPUSH
6343: CALL_OW 70
6347: ST_TO_ADDR
// if lab then
6348: LD_VAR 0 12
6352: IFFALSE 6428
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6354: LD_VAR 0 12
6358: PUSH
6359: LD_INT 1
6361: ARRAY
6362: PPUSH
6363: CALL_OW 461
6367: PUSH
6368: LD_INT 2
6370: EQUAL
6371: IFFALSE 6428
// begin for i in amTech do
6373: LD_ADDR_VAR 0 9
6377: PUSH
6378: LD_EXP 32
6382: PUSH
6383: FOR_IN
6384: IFFALSE 6426
// if CanBeResearched ( lab [ 1 ] , i ) then
6386: LD_VAR 0 12
6390: PUSH
6391: LD_INT 1
6393: ARRAY
6394: PPUSH
6395: LD_VAR 0 9
6399: PPUSH
6400: CALL_OW 430
6404: IFFALSE 6424
// begin AddComResearch ( lab [ 1 ] , i ) ;
6406: LD_VAR 0 12
6410: PUSH
6411: LD_INT 1
6413: ARRAY
6414: PPUSH
6415: LD_VAR 0 9
6419: PPUSH
6420: CALL_OW 184
// end ;
6424: GO 6383
6426: POP
6427: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
6428: LD_ADDR_VAR 0 29
6432: PUSH
6433: LD_VAR 0 3
6437: PPUSH
6438: LD_INT 22
6440: PUSH
6441: LD_VAR 0 1
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: PUSH
6450: LD_INT 30
6452: PUSH
6453: LD_INT 3
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: PUSH
6460: LD_INT 50
6462: PUSH
6463: EMPTY
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: PPUSH
6471: CALL_OW 70
6475: ST_TO_ADDR
// if fac then
6476: LD_VAR 0 29
6480: IFFALSE 6815
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
6482: LD_VAR 0 29
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: CALL_OW 461
6495: PUSH
6496: LD_INT 2
6498: EQUAL
6499: IFFALSE 6815
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
6501: LD_ADDR_VAR 0 30
6505: PUSH
6506: LD_VAR 0 3
6510: PPUSH
6511: LD_INT 2
6513: PUSH
6514: LD_INT 30
6516: PUSH
6517: LD_INT 32
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 30
6526: PUSH
6527: LD_INT 33
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 35
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 70
6557: ST_TO_ADDR
// if emptyTowers then
6558: LD_VAR 0 30
6562: IFFALSE 6612
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
6564: LD_ADDR_VAR 0 31
6568: PUSH
6569: LD_VAR 0 30
6573: PUSH
6574: LD_INT 1
6576: ARRAY
6577: PPUSH
6578: LD_VAR 0 3
6582: PPUSH
6583: CALL 52127 0 2
6587: ST_TO_ADDR
// if weapon then
6588: LD_VAR 0 31
6592: IFFALSE 6612
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
6594: LD_VAR 0 30
6598: PUSH
6599: LD_INT 1
6601: ARRAY
6602: PPUSH
6603: LD_VAR 0 31
6607: PPUSH
6608: CALL_OW 148
// end ; if amConstructList then
6612: LD_EXP 33
6616: IFFALSE 6815
// for i := 1 to Count ( amConstructList ) do
6618: LD_ADDR_VAR 0 9
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_EXP 33
6632: PPUSH
6633: CALL 43882 0 1
6637: PUSH
6638: FOR_TO
6639: IFFALSE 6813
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
6641: LD_VAR 0 29
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: PPUSH
6650: LD_EXP 33
6654: PUSH
6655: LD_VAR 0 9
6659: ARRAY
6660: PUSH
6661: LD_INT 1
6663: ARRAY
6664: PPUSH
6665: LD_EXP 33
6669: PUSH
6670: LD_VAR 0 9
6674: ARRAY
6675: PUSH
6676: LD_INT 2
6678: ARRAY
6679: PPUSH
6680: LD_EXP 33
6684: PUSH
6685: LD_VAR 0 9
6689: ARRAY
6690: PUSH
6691: LD_INT 3
6693: ARRAY
6694: PPUSH
6695: LD_EXP 33
6699: PUSH
6700: LD_VAR 0 9
6704: ARRAY
6705: PUSH
6706: LD_INT 4
6708: ARRAY
6709: PPUSH
6710: CALL_OW 448
6714: IFFALSE 6811
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
6716: LD_VAR 0 29
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_EXP 33
6729: PUSH
6730: LD_VAR 0 9
6734: ARRAY
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PPUSH
6740: LD_EXP 33
6744: PUSH
6745: LD_VAR 0 9
6749: ARRAY
6750: PUSH
6751: LD_INT 2
6753: ARRAY
6754: PPUSH
6755: LD_EXP 33
6759: PUSH
6760: LD_VAR 0 9
6764: ARRAY
6765: PUSH
6766: LD_INT 3
6768: ARRAY
6769: PPUSH
6770: LD_EXP 33
6774: PUSH
6775: LD_VAR 0 9
6779: ARRAY
6780: PUSH
6781: LD_INT 4
6783: ARRAY
6784: PPUSH
6785: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
6789: LD_ADDR_EXP 33
6793: PUSH
6794: LD_EXP 33
6798: PPUSH
6799: LD_VAR 0 9
6803: PPUSH
6804: CALL_OW 3
6808: ST_TO_ADDR
// break ;
6809: GO 6813
// end ; end ;
6811: GO 6638
6813: POP
6814: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6815: LD_ADDR_VAR 0 10
6819: PUSH
6820: LD_VAR 0 3
6824: PPUSH
6825: LD_INT 21
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 3
6837: PUSH
6838: LD_INT 57
6840: PUSH
6841: EMPTY
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 3
6850: PUSH
6851: LD_INT 24
6853: PUSH
6854: LD_INT 1000
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 70
6874: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
6875: LD_ADDR_VAR 0 17
6879: PUSH
6880: LD_VAR 0 3
6884: PPUSH
6885: CALL_OW 435
6889: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
6890: LD_ADDR_VAR 0 14
6894: PUSH
6895: LD_VAR 0 5
6899: PPUSH
6900: LD_INT 25
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 50
6912: PUSH
6913: EMPTY
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 72
6924: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_INT 3
6932: PUSH
6933: LD_INT 120
6935: PUSH
6936: LD_INT 7
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 3
6949: PUSH
6950: LD_INT 54
6952: PUSH
6953: EMPTY
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 72
6968: PUSH
6969: LD_VAR 0 29
6973: PUSH
6974: LD_INT 1
6976: ARRAY
6977: PPUSH
6978: CALL_OW 302
6982: AND
6983: IFFALSE 7042
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
6985: LD_VAR 0 14
6989: PPUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 120
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: LD_INT 54
7012: PUSH
7013: EMPTY
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 72
7028: PPUSH
7029: LD_VAR 0 29
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7042: LD_ADDR_VAR 0 18
7046: PUSH
7047: LD_VAR 0 5
7051: PPUSH
7052: LD_INT 25
7054: PUSH
7055: LD_INT 4
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 50
7064: PUSH
7065: EMPTY
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PPUSH
7072: CALL_OW 72
7076: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7077: LD_ADDR_VAR 0 12
7081: PUSH
7082: LD_VAR 0 3
7086: PPUSH
7087: LD_INT 2
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 6
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 7
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 30
7112: PUSH
7113: LD_INT 8
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: PPUSH
7126: CALL_OW 70
7130: ST_TO_ADDR
// if sci then
7131: LD_VAR 0 18
7135: IFFALSE 7296
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7137: LD_ADDR_VAR 0 20
7141: PUSH
7142: LD_VAR 0 5
7146: PPUSH
7147: LD_INT 95
7149: PUSH
7150: LD_VAR 0 3
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 120
7161: PUSH
7162: LD_INT 1
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PPUSH
7173: CALL_OW 72
7177: ST_TO_ADDR
// if hurtUnits then
7178: LD_VAR 0 20
7182: IFFALSE 7243
// begin for i in sci do
7184: LD_ADDR_VAR 0 9
7188: PUSH
7189: LD_VAR 0 18
7193: PUSH
7194: FOR_IN
7195: IFFALSE 7239
// if IsInUnit ( i ) then
7197: LD_VAR 0 9
7201: PPUSH
7202: CALL_OW 310
7206: IFFALSE 7219
// ComExitBuilding ( i ) else
7208: LD_VAR 0 9
7212: PPUSH
7213: CALL_OW 122
7217: GO 7237
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7219: LD_VAR 0 9
7223: PPUSH
7224: LD_VAR 0 20
7228: PUSH
7229: LD_INT 1
7231: ARRAY
7232: PPUSH
7233: CALL_OW 128
7237: GO 7194
7239: POP
7240: POP
// end else
7241: GO 7296
// if lab then
7243: LD_VAR 0 12
7247: IFFALSE 7296
// begin for i in sci do
7249: LD_ADDR_VAR 0 9
7253: PUSH
7254: LD_VAR 0 18
7258: PUSH
7259: FOR_IN
7260: IFFALSE 7294
// if not IsInUnit ( i ) then
7262: LD_VAR 0 9
7266: PPUSH
7267: CALL_OW 310
7271: NOT
7272: IFFALSE 7292
// ComEnterUnit ( i , lab [ 1 ] ) ;
7274: LD_VAR 0 9
7278: PPUSH
7279: LD_VAR 0 12
7283: PUSH
7284: LD_INT 1
7286: ARRAY
7287: PPUSH
7288: CALL_OW 120
7292: GO 7259
7294: POP
7295: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
7296: LD_ADDR_VAR 0 13
7300: PUSH
7301: LD_VAR 0 5
7305: PPUSH
7306: LD_INT 25
7308: PUSH
7309: LD_INT 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 72
7320: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
7321: LD_ADDR_VAR 0 33
7325: PUSH
7326: LD_EXP 34
7330: ST_TO_ADDR
// if eng then
7331: LD_VAR 0 13
7335: IFFALSE 8169
// begin for i in eng do
7337: LD_ADDR_VAR 0 9
7341: PUSH
7342: LD_VAR 0 13
7346: PUSH
7347: FOR_IN
7348: IFFALSE 8167
// begin tag := GetTag ( i ) ;
7350: LD_ADDR_VAR 0 15
7354: PUSH
7355: LD_VAR 0 9
7359: PPUSH
7360: CALL_OW 110
7364: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
7365: LD_VAR 0 9
7369: PPUSH
7370: LD_VAR 0 4
7374: PPUSH
7375: CALL_OW 308
7379: IFFALSE 7410
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
7381: LD_VAR 0 9
7385: PPUSH
7386: LD_VAR 0 7
7390: PUSH
7391: LD_INT 1
7393: ARRAY
7394: PPUSH
7395: LD_VAR 0 7
7399: PUSH
7400: LD_INT 2
7402: ARRAY
7403: PPUSH
7404: CALL_OW 111
// continue ;
7408: GO 7347
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
7410: LD_VAR 0 9
7414: PPUSH
7415: CALL_OW 256
7419: PUSH
7420: LD_INT 800
7422: LESS
7423: PUSH
7424: LD_VAR 0 15
7428: PUSH
7429: LD_INT 1
7431: NONEQUAL
7432: AND
7433: IFFALSE 7483
// begin SetTag ( i , tHeal ) ;
7435: LD_VAR 0 9
7439: PPUSH
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
7447: LD_VAR 0 9
7451: PPUSH
7452: LD_VAR 0 6
7456: PUSH
7457: LD_INT 1
7459: ARRAY
7460: PPUSH
7461: LD_VAR 0 6
7465: PUSH
7466: LD_INT 2
7468: ARRAY
7469: PPUSH
7470: CALL_OW 111
// AddComHold ( i ) ;
7474: LD_VAR 0 9
7478: PPUSH
7479: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7483: LD_VAR 0 15
7487: PUSH
7488: LD_INT 1
7490: EQUAL
7491: PUSH
7492: LD_VAR 0 9
7496: PPUSH
7497: CALL_OW 256
7501: PUSH
7502: LD_INT 1000
7504: EQUAL
7505: AND
7506: IFFALSE 7520
// SetTag ( i , 0 ) ;
7508: LD_VAR 0 9
7512: PPUSH
7513: LD_INT 0
7515: PPUSH
7516: CALL_OW 109
// if not tag then
7520: LD_VAR 0 15
7524: NOT
7525: IFFALSE 7692
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
7527: LD_ADDR_VAR 0 11
7531: PUSH
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_INT 57
7539: PUSH
7540: EMPTY
7541: LIST
7542: PPUSH
7543: CALL_OW 70
7547: ST_TO_ADDR
// if undone then
7548: LD_VAR 0 11
7552: IFFALSE 7574
// begin ComComplete ( i , undone [ 1 ] ) ;
7554: LD_VAR 0 9
7558: PPUSH
7559: LD_VAR 0 11
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: PPUSH
7568: CALL 49980 0 2
// continue ;
7572: GO 7347
// end ; if cr or tmp or buildingsToBuild then
7574: LD_VAR 0 17
7578: PUSH
7579: LD_VAR 0 10
7583: OR
7584: PUSH
7585: LD_VAR 0 33
7589: OR
7590: IFFALSE 7666
// begin if IsInUnit ( i ) then
7592: LD_VAR 0 9
7596: PPUSH
7597: CALL_OW 310
7601: IFFALSE 7612
// ComExitBuilding ( i ) ;
7603: LD_VAR 0 9
7607: PPUSH
7608: CALL_OW 122
// if tmp then
7612: LD_VAR 0 10
7616: IFFALSE 7632
// SetTag ( i , tRepair ) else
7618: LD_VAR 0 9
7622: PPUSH
7623: LD_INT 3
7625: PPUSH
7626: CALL_OW 109
7630: GO 7664
// if cr then
7632: LD_VAR 0 17
7636: IFFALSE 7652
// SetTag ( i , tCrates ) else
7638: LD_VAR 0 9
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: CALL_OW 109
7650: GO 7664
// SetTag ( i , tBuild ) ;
7652: LD_VAR 0 9
7656: PPUSH
7657: LD_INT 5
7659: PPUSH
7660: CALL_OW 109
// end else
7664: GO 7692
// if not IsInUnit ( i ) then
7666: LD_VAR 0 9
7670: PPUSH
7671: CALL_OW 310
7675: NOT
7676: IFFALSE 7692
// ComEnterUnit ( i , depot ) ;
7678: LD_VAR 0 9
7682: PPUSH
7683: LD_VAR 0 32
7687: PPUSH
7688: CALL_OW 120
// end ; if tag = tRepair then
7692: LD_VAR 0 15
7696: PUSH
7697: LD_INT 3
7699: EQUAL
7700: IFFALSE 7806
// begin if IsInUnit ( i ) then
7702: LD_VAR 0 9
7706: PPUSH
7707: CALL_OW 310
7711: IFFALSE 7724
// begin ComExitBuilding ( i ) ;
7713: LD_VAR 0 9
7717: PPUSH
7718: CALL_OW 122
// continue ;
7722: GO 7347
// end ; if not tmp then
7724: LD_VAR 0 10
7728: NOT
7729: IFFALSE 7745
// begin SetTag ( i , 0 ) ;
7731: LD_VAR 0 9
7735: PPUSH
7736: LD_INT 0
7738: PPUSH
7739: CALL_OW 109
// continue ;
7743: GO 7347
// end ; if not HasTask ( i ) then
7745: LD_VAR 0 9
7749: PPUSH
7750: CALL_OW 314
7754: NOT
7755: IFFALSE 7775
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
7757: LD_VAR 0 9
7761: PPUSH
7762: LD_VAR 0 10
7766: PUSH
7767: LD_INT 1
7769: ARRAY
7770: PPUSH
7771: CALL_OW 130
// if not IsInarea ( i , area ) then
7775: LD_VAR 0 9
7779: PPUSH
7780: LD_VAR 0 3
7784: PPUSH
7785: CALL_OW 308
7789: NOT
7790: IFFALSE 7806
// ComMoveToarea ( i , area ) ;
7792: LD_VAR 0 9
7796: PPUSH
7797: LD_VAR 0 3
7801: PPUSH
7802: CALL_OW 113
// end ; if tag = tBuild then
7806: LD_VAR 0 15
7810: PUSH
7811: LD_INT 5
7813: EQUAL
7814: IFFALSE 8020
// begin if IsInUnit ( i ) then
7816: LD_VAR 0 9
7820: PPUSH
7821: CALL_OW 310
7825: IFFALSE 7838
// begin ComExitBuilding ( i ) ;
7827: LD_VAR 0 9
7831: PPUSH
7832: CALL_OW 122
// continue ;
7836: GO 7347
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
7838: LD_VAR 0 33
7842: NOT
7843: PUSH
7844: LD_VAR 0 22
7848: OR
7849: PUSH
7850: LD_VAR 0 23
7854: OR
7855: IFFALSE 7873
// begin SetTag ( i , 0 ) ;
7857: LD_VAR 0 9
7861: PPUSH
7862: LD_INT 0
7864: PPUSH
7865: CALL_OW 109
// continue ;
7869: GO 7347
// end else
7871: GO 7912
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7873: LD_VAR 0 32
7877: PPUSH
7878: LD_VAR 0 33
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PPUSH
7891: CALL 83394 0 2
7895: NOT
7896: IFFALSE 7912
// begin SetTag ( i , 0 ) ;
7898: LD_VAR 0 9
7902: PPUSH
7903: LD_INT 0
7905: PPUSH
7906: CALL_OW 109
// continue ;
7910: GO 7347
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
7912: LD_ADDR_VAR 0 11
7916: PUSH
7917: LD_VAR 0 3
7921: PPUSH
7922: LD_INT 57
7924: PUSH
7925: EMPTY
7926: LIST
7927: PPUSH
7928: CALL_OW 70
7932: ST_TO_ADDR
// if undone then
7933: LD_VAR 0 11
7937: IFFALSE 7959
// begin ComComplete ( i , undone [ 1 ] ) ;
7939: LD_VAR 0 9
7943: PPUSH
7944: LD_VAR 0 11
7948: PUSH
7949: LD_INT 1
7951: ARRAY
7952: PPUSH
7953: CALL 49980 0 2
// continue ;
7957: GO 7347
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
7959: LD_VAR 0 9
7963: PPUSH
7964: LD_VAR 0 33
7968: PUSH
7969: LD_INT 1
7971: ARRAY
7972: PUSH
7973: LD_INT 1
7975: ARRAY
7976: PPUSH
7977: LD_VAR 0 33
7981: PUSH
7982: LD_INT 1
7984: ARRAY
7985: PUSH
7986: LD_INT 2
7988: ARRAY
7989: PPUSH
7990: LD_VAR 0 33
7994: PUSH
7995: LD_INT 1
7997: ARRAY
7998: PUSH
7999: LD_INT 3
8001: ARRAY
8002: PPUSH
8003: LD_VAR 0 33
8007: PUSH
8008: LD_INT 1
8010: ARRAY
8011: PUSH
8012: LD_INT 4
8014: ARRAY
8015: PPUSH
8016: CALL_OW 145
// end ; if tag = tCrates then
8020: LD_VAR 0 15
8024: PUSH
8025: LD_INT 2
8027: EQUAL
8028: IFFALSE 8165
// begin if IsInUnit ( i ) then
8030: LD_VAR 0 9
8034: PPUSH
8035: CALL_OW 310
8039: IFFALSE 8052
// begin ComExitBuilding ( i ) ;
8041: LD_VAR 0 9
8045: PPUSH
8046: CALL_OW 122
// continue ;
8050: GO 7347
// end ; if not cr then
8052: LD_VAR 0 17
8056: NOT
8057: IFFALSE 8073
// begin SetTag ( i , 0 ) ;
8059: LD_VAR 0 9
8063: PPUSH
8064: LD_INT 0
8066: PPUSH
8067: CALL_OW 109
// continue ;
8071: GO 7347
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8073: LD_VAR 0 9
8077: PPUSH
8078: CALL_OW 314
8082: NOT
8083: PUSH
8084: LD_INT 81
8086: PUSH
8087: LD_VAR 0 1
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 92
8098: PUSH
8099: LD_VAR 0 17
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PUSH
8108: LD_VAR 0 17
8112: PUSH
8113: LD_INT 2
8115: ARRAY
8116: PUSH
8117: LD_INT 12
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 69
8134: NOT
8135: AND
8136: IFFALSE 8165
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8138: LD_VAR 0 9
8142: PPUSH
8143: LD_VAR 0 17
8147: PUSH
8148: LD_INT 1
8150: ARRAY
8151: PPUSH
8152: LD_VAR 0 17
8156: PUSH
8157: LD_INT 2
8159: ARRAY
8160: PPUSH
8161: CALL_OW 117
// end ; end ;
8165: GO 7347
8167: POP
8168: POP
// end ; if vehicles then
8169: LD_VAR 0 26
8173: IFFALSE 8973
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8175: LD_ADDR_VAR 0 26
8179: PUSH
8180: LD_VAR 0 26
8184: PPUSH
8185: LD_INT 3
8187: PUSH
8188: LD_INT 2
8190: PUSH
8191: LD_INT 34
8193: PUSH
8194: LD_INT 13
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 34
8203: PUSH
8204: LD_INT 12
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 50
8222: PUSH
8223: EMPTY
8224: LIST
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PPUSH
8230: CALL_OW 72
8234: ST_TO_ADDR
// if vehicles then
8235: LD_VAR 0 26
8239: IFFALSE 8973
// begin for i in vehicles do
8241: LD_ADDR_VAR 0 9
8245: PUSH
8246: LD_VAR 0 26
8250: PUSH
8251: FOR_IN
8252: IFFALSE 8971
// begin tag := GetTag ( i ) ;
8254: LD_ADDR_VAR 0 15
8258: PUSH
8259: LD_VAR 0 9
8263: PPUSH
8264: CALL_OW 110
8268: ST_TO_ADDR
// if not tag then
8269: LD_VAR 0 15
8273: NOT
8274: IFFALSE 8420
// begin if GetControl ( i ) = control_manual then
8276: LD_VAR 0 9
8280: PPUSH
8281: CALL_OW 263
8285: PUSH
8286: LD_INT 1
8288: EQUAL
8289: IFFALSE 8406
// begin drivers := amDrivers ;
8291: LD_ADDR_VAR 0 24
8295: PUSH
8296: LD_EXP 37
8300: ST_TO_ADDR
// if not drivers then
8301: LD_VAR 0 24
8305: NOT
8306: IFFALSE 8386
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
8308: LD_ADDR_VAR 0 24
8312: PUSH
8313: LD_VAR 0 14
8317: PPUSH
8318: LD_INT 3
8320: PUSH
8321: LD_INT 120
8323: PUSH
8324: LD_INT 7
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PPUSH
8335: CALL_OW 72
8339: ST_TO_ADDR
// if drivers then
8340: LD_VAR 0 24
8344: IFFALSE 8386
// begin SetTag ( drivers [ 1 ] , tMech ) ;
8346: LD_VAR 0 24
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PPUSH
8355: LD_INT 7
8357: PPUSH
8358: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
8362: LD_ADDR_EXP 37
8366: PUSH
8367: LD_EXP 37
8371: PPUSH
8372: LD_VAR 0 24
8376: PUSH
8377: LD_INT 1
8379: ARRAY
8380: PPUSH
8381: CALL 79471 0 2
8385: ST_TO_ADDR
// end ; end ; if drivers then
8386: LD_VAR 0 24
8390: IFFALSE 8404
// SetTag ( i , tBusy ) ;
8392: LD_VAR 0 9
8396: PPUSH
8397: LD_INT 8
8399: PPUSH
8400: CALL_OW 109
// continue ;
8404: GO 8251
// end ; SetTag ( i , tBusy ) ;
8406: LD_VAR 0 9
8410: PPUSH
8411: LD_INT 8
8413: PPUSH
8414: CALL_OW 109
// end else
8418: GO 8969
// if tag = tBusy then
8420: LD_VAR 0 15
8424: PUSH
8425: LD_INT 8
8427: EQUAL
8428: IFFALSE 8640
// begin if GetLives ( i ) = 1000 then
8430: LD_VAR 0 9
8434: PPUSH
8435: CALL_OW 256
8439: PUSH
8440: LD_INT 1000
8442: EQUAL
8443: IFFALSE 8638
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
8445: LD_VAR 0 9
8449: PPUSH
8450: CALL_OW 263
8454: PUSH
8455: LD_INT 1
8457: EQUAL
8458: PUSH
8459: LD_VAR 0 9
8463: PPUSH
8464: CALL_OW 311
8468: NOT
8469: AND
8470: IFFALSE 8626
// begin drivers := amDrivers ;
8472: LD_ADDR_VAR 0 24
8476: PUSH
8477: LD_EXP 37
8481: ST_TO_ADDR
// if not drivers then
8482: LD_VAR 0 24
8486: NOT
8487: IFFALSE 8503
// begin SetTag ( i , 0 ) ;
8489: LD_VAR 0 9
8493: PPUSH
8494: LD_INT 0
8496: PPUSH
8497: CALL_OW 109
// continue ;
8501: GO 8251
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
8503: LD_VAR 0 24
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: PPUSH
8512: CALL_OW 310
8516: PUSH
8517: LD_VAR 0 24
8521: PUSH
8522: LD_INT 1
8524: ARRAY
8525: PPUSH
8526: CALL 77075 0 1
8530: NOT
8531: AND
8532: IFFALSE 8547
// ComExitBuilding ( drivers [ 1 ] ) ;
8534: LD_VAR 0 24
8538: PUSH
8539: LD_INT 1
8541: ARRAY
8542: PPUSH
8543: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
8547: LD_VAR 0 26
8551: PPUSH
8552: LD_INT 120
8554: PUSH
8555: LD_INT 3
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 72
8566: PUSH
8567: LD_VAR 0 24
8571: PUSH
8572: LD_INT 1
8574: ARRAY
8575: PPUSH
8576: CALL_OW 314
8580: NOT
8581: AND
8582: PUSH
8583: LD_VAR 0 26
8587: PPUSH
8588: LD_INT 120
8590: PUSH
8591: LD_INT 3
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 72
8602: NOT
8603: OR
8604: IFFALSE 8624
// ComEnterUnit ( drivers [ 1 ] , i ) ;
8606: LD_VAR 0 24
8610: PUSH
8611: LD_INT 1
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 9
8619: PPUSH
8620: CALL_OW 120
// continue ;
8624: GO 8251
// end ; SetTag ( i , tAttack ) ;
8626: LD_VAR 0 9
8630: PPUSH
8631: LD_INT 13
8633: PPUSH
8634: CALL_OW 109
// end ; end else
8638: GO 8969
// if tag = tAttack then
8640: LD_VAR 0 15
8644: PUSH
8645: LD_INT 13
8647: EQUAL
8648: IFFALSE 8828
// begin enemy := enemyInBase ;
8650: LD_ADDR_VAR 0 21
8654: PUSH
8655: LD_VAR 0 22
8659: ST_TO_ADDR
// if not enemy then
8660: LD_VAR 0 21
8664: NOT
8665: IFFALSE 8677
// enemy := enemyOuterBase ;
8667: LD_ADDR_VAR 0 21
8671: PUSH
8672: LD_VAR 0 23
8676: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8677: LD_VAR 0 21
8681: NOT
8682: PUSH
8683: LD_VAR 0 9
8687: PPUSH
8688: LD_VAR 0 7
8692: PUSH
8693: LD_INT 1
8695: ARRAY
8696: PPUSH
8697: LD_VAR 0 7
8701: PUSH
8702: LD_INT 2
8704: ARRAY
8705: PPUSH
8706: CALL_OW 297
8710: PUSH
8711: LD_INT 10
8713: GREATER
8714: AND
8715: IFFALSE 8746
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8717: LD_VAR 0 9
8721: PPUSH
8722: LD_VAR 0 7
8726: PUSH
8727: LD_INT 1
8729: ARRAY
8730: PPUSH
8731: LD_VAR 0 7
8735: PUSH
8736: LD_INT 2
8738: ARRAY
8739: PPUSH
8740: CALL_OW 111
// continue ;
8744: GO 8251
// end ; if GetLives ( i ) < 650 then
8746: LD_VAR 0 9
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 650
8758: LESS
8759: IFFALSE 8802
// begin SetTag ( i , tVehRepair ) ;
8761: LD_VAR 0 9
8765: PPUSH
8766: LD_INT 9
8768: PPUSH
8769: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8773: LD_VAR 0 9
8777: PPUSH
8778: LD_VAR 0 7
8782: PUSH
8783: LD_INT 1
8785: ARRAY
8786: PPUSH
8787: LD_VAR 0 7
8791: PUSH
8792: LD_INT 2
8794: ARRAY
8795: PPUSH
8796: CALL_OW 111
// continue ;
8800: GO 8251
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8802: LD_VAR 0 9
8806: PPUSH
8807: LD_VAR 0 21
8811: PPUSH
8812: LD_VAR 0 9
8816: PPUSH
8817: CALL_OW 74
8821: PPUSH
8822: CALL_OW 115
// end else
8826: GO 8969
// if tag = tVehRepair then
8828: LD_VAR 0 15
8832: PUSH
8833: LD_INT 9
8835: EQUAL
8836: IFFALSE 8969
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8838: LD_VAR 0 9
8842: PPUSH
8843: LD_VAR 0 7
8847: PUSH
8848: LD_INT 1
8850: ARRAY
8851: PPUSH
8852: LD_VAR 0 7
8856: PUSH
8857: LD_INT 2
8859: ARRAY
8860: PPUSH
8861: CALL_OW 297
8865: PUSH
8866: LD_INT 10
8868: GREATER
8869: IFFALSE 8900
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8871: LD_VAR 0 9
8875: PPUSH
8876: LD_VAR 0 7
8880: PUSH
8881: LD_INT 1
8883: ARRAY
8884: PPUSH
8885: LD_VAR 0 7
8889: PUSH
8890: LD_INT 2
8892: ARRAY
8893: PPUSH
8894: CALL_OW 111
// continue ;
8898: GO 8251
// end ; if GetLives ( i ) = 1000 then
8900: LD_VAR 0 9
8904: PPUSH
8905: CALL_OW 256
8909: PUSH
8910: LD_INT 1000
8912: EQUAL
8913: IFFALSE 8929
// begin SetTag ( i , tBusy ) ;
8915: LD_VAR 0 9
8919: PPUSH
8920: LD_INT 8
8922: PPUSH
8923: CALL_OW 109
// continue ;
8927: GO 8251
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
8929: LD_VAR 0 9
8933: PPUSH
8934: CALL_OW 263
8938: PUSH
8939: LD_INT 1
8941: EQUAL
8942: PUSH
8943: LD_VAR 0 9
8947: PPUSH
8948: CALL_OW 311
8952: AND
8953: IFFALSE 8969
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
8955: LD_VAR 0 9
8959: PPUSH
8960: CALL_OW 311
8964: PPUSH
8965: CALL 81171 0 1
// end ; end ;
8969: GO 8251
8971: POP
8972: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8973: LD_ADDR_VAR 0 19
8977: PUSH
8978: LD_VAR 0 5
8982: PPUSH
8983: LD_INT 2
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 1
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 8
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 25
9008: PUSH
9009: LD_INT 5
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 25
9018: PUSH
9019: LD_INT 9
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 50
9035: PUSH
9036: EMPTY
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PPUSH
9043: CALL_OW 72
9047: ST_TO_ADDR
// if sol then
9048: LD_VAR 0 19
9052: IFFALSE 9560
// begin if enemyInBase then
9054: LD_VAR 0 22
9058: IFFALSE 9237
// begin for i in sol do
9060: LD_ADDR_VAR 0 9
9064: PUSH
9065: LD_VAR 0 19
9069: PUSH
9070: FOR_IN
9071: IFFALSE 9233
// begin tw := IsInUnit ( i ) ;
9073: LD_ADDR_VAR 0 16
9077: PUSH
9078: LD_VAR 0 9
9082: PPUSH
9083: CALL_OW 310
9087: ST_TO_ADDR
// if tw then
9088: LD_VAR 0 16
9092: IFFALSE 9175
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9094: LD_VAR 0 16
9098: PUSH
9099: LD_INT 22
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 101
9113: PUSH
9114: LD_VAR 0 34
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 30
9128: PUSH
9129: LD_INT 32
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 30
9138: PUSH
9139: LD_INT 31
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: PPUSH
9156: CALL_OW 69
9160: IN
9161: NOT
9162: IFFALSE 9173
// ComExitBuilding ( i ) ;
9164: LD_VAR 0 9
9168: PPUSH
9169: CALL_OW 122
// end else
9173: GO 9231
// if IsInarea ( i , area ) then
9175: LD_VAR 0 9
9179: PPUSH
9180: LD_VAR 0 3
9184: PPUSH
9185: CALL_OW 308
9189: IFFALSE 9217
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9191: LD_VAR 0 9
9195: PPUSH
9196: LD_VAR 0 22
9200: PPUSH
9201: LD_VAR 0 9
9205: PPUSH
9206: CALL_OW 74
9210: PPUSH
9211: CALL_OW 115
9215: GO 9231
// ComMoveToarea ( i , area ) ;
9217: LD_VAR 0 9
9221: PPUSH
9222: LD_VAR 0 3
9226: PPUSH
9227: CALL_OW 113
// end ;
9231: GO 9070
9233: POP
9234: POP
// end else
9235: GO 9560
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9237: LD_ADDR_VAR 0 28
9241: PUSH
9242: LD_VAR 0 3
9246: PPUSH
9247: LD_INT 3
9249: PUSH
9250: LD_INT 62
9252: PUSH
9253: EMPTY
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: LD_INT 30
9265: PUSH
9266: LD_INT 32
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 30
9275: PUSH
9276: LD_INT 4
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 30
9285: PUSH
9286: LD_INT 5
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 30
9295: PUSH
9296: LD_INT 31
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 70
9318: ST_TO_ADDR
// if empty then
9319: LD_VAR 0 28
9323: IFFALSE 9340
// empty := ReverseArray ( empty ) ;
9325: LD_ADDR_VAR 0 28
9329: PUSH
9330: LD_VAR 0 28
9334: PPUSH
9335: CALL 74758 0 1
9339: ST_TO_ADDR
// for i in sol do
9340: LD_ADDR_VAR 0 9
9344: PUSH
9345: LD_VAR 0 19
9349: PUSH
9350: FOR_IN
9351: IFFALSE 9558
// begin tag := GetTag ( i ) ;
9353: LD_ADDR_VAR 0 15
9357: PUSH
9358: LD_VAR 0 9
9362: PPUSH
9363: CALL_OW 110
9367: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9368: LD_VAR 0 9
9372: PPUSH
9373: CALL_OW 256
9377: PUSH
9378: LD_INT 1000
9380: LESS
9381: PUSH
9382: LD_VAR 0 15
9386: PUSH
9387: LD_INT 1
9389: NONEQUAL
9390: AND
9391: IFFALSE 9443
// begin SetTag ( i , tHeal ) ;
9393: LD_VAR 0 9
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9405: LD_VAR 0 9
9409: PPUSH
9410: LD_VAR 0 6
9414: PUSH
9415: LD_INT 1
9417: ARRAY
9418: PPUSH
9419: LD_VAR 0 6
9423: PUSH
9424: LD_INT 2
9426: ARRAY
9427: PPUSH
9428: CALL_OW 111
// AddComHold ( i ) ;
9432: LD_VAR 0 9
9436: PPUSH
9437: CALL_OW 200
// continue ;
9441: GO 9350
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9443: LD_VAR 0 9
9447: PPUSH
9448: CALL_OW 256
9452: PUSH
9453: LD_INT 1000
9455: EQUAL
9456: PUSH
9457: LD_VAR 0 15
9461: PUSH
9462: LD_INT 1
9464: EQUAL
9465: AND
9466: IFFALSE 9482
// begin SetTag ( i , 0 ) ;
9468: LD_VAR 0 9
9472: PPUSH
9473: LD_INT 0
9475: PPUSH
9476: CALL_OW 109
// continue ;
9480: GO 9350
// end ; if HasTask ( i ) then
9482: LD_VAR 0 9
9486: PPUSH
9487: CALL_OW 314
9491: IFFALSE 9495
// continue ;
9493: GO 9350
// if not IsInUnit ( i ) and not tag and empty then
9495: LD_VAR 0 9
9499: PPUSH
9500: CALL_OW 310
9504: NOT
9505: PUSH
9506: LD_VAR 0 15
9510: NOT
9511: AND
9512: PUSH
9513: LD_VAR 0 28
9517: AND
9518: IFFALSE 9556
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9520: LD_VAR 0 9
9524: PPUSH
9525: LD_VAR 0 28
9529: PUSH
9530: LD_INT 1
9532: ARRAY
9533: PPUSH
9534: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9538: LD_ADDR_VAR 0 28
9542: PUSH
9543: LD_VAR 0 28
9547: PPUSH
9548: LD_INT 1
9550: PPUSH
9551: CALL_OW 3
9555: ST_TO_ADDR
// end ; end ;
9556: GO 9350
9558: POP
9559: POP
// end ; end ; end ;
9560: LD_VAR 0 8
9564: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
9565: LD_EXP 39
9569: PPUSH
9570: LD_INT 50
9572: PUSH
9573: EMPTY
9574: LIST
9575: PPUSH
9576: CALL_OW 72
9580: IFFALSE 9633
9582: GO 9584
9584: DISABLE
// begin enable ;
9585: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
9586: LD_EXP 3
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: LD_INT 3
9600: PPUSH
9601: LD_INT 4
9603: PPUSH
9604: LD_EXP 39
9608: PPUSH
9609: LD_INT 27
9611: PUSH
9612: LD_INT 33
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: LD_INT 22
9621: PUSH
9622: LD_INT 17
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL 6045 0 7
// end ;
9633: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
9634: LD_INT 1
9636: PPUSH
9637: CALL_OW 302
9641: PUSH
9642: LD_EXP 33
9646: NOT
9647: AND
9648: IFFALSE 9718
9650: GO 9652
9652: DISABLE
// begin enable ;
9653: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
9654: LD_ADDR_EXP 33
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: LD_INT 1
9664: PUSH
9665: LD_INT 1
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 3
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 1
9685: PUSH
9686: LD_INT 4
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 4
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: LD_INT 6
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: ST_TO_ADDR
// end ; end_of_file
9718: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
9719: LD_INT 0
9721: PPUSH
9722: PPUSH
9723: PPUSH
9724: PPUSH
9725: PPUSH
9726: PPUSH
9727: PPUSH
9728: PPUSH
9729: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
9730: LD_ADDR_EXP 42
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: LD_INT 2
9742: PPUSH
9743: LD_INT 1
9745: PPUSH
9746: CALL 41843 0 3
9750: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
9751: LD_ADDR_EXP 43
9755: PUSH
9756: LD_INT 13
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: LD_INT 27
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 13
9776: PUSH
9777: LD_INT 1
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: LD_INT 27
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 13
9794: PUSH
9795: LD_INT 1
9797: PUSH
9798: LD_INT 1
9800: PUSH
9801: LD_INT 26
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_INT 13
9812: PUSH
9813: LD_INT 1
9815: PUSH
9816: LD_INT 1
9818: PUSH
9819: LD_INT 25
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 13
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: LD_INT 27
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// arBuildings := [ ] ;
9853: LD_ADDR_EXP 44
9857: PUSH
9858: EMPTY
9859: ST_TO_ADDR
// arVehicles := [ ] ;
9860: LD_ADDR_EXP 45
9864: PUSH
9865: EMPTY
9866: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
9867: LD_ADDR_EXP 46
9871: PUSH
9872: EMPTY
9873: ST_TO_ADDR
// arDrivers := [ ] ;
9874: LD_ADDR_EXP 47
9878: PUSH
9879: EMPTY
9880: ST_TO_ADDR
// arVehiclesCounter := 3 ;
9881: LD_ADDR_EXP 49
9885: PUSH
9886: LD_INT 3
9888: ST_TO_ADDR
// arMinesList := [ ] ;
9889: LD_ADDR_EXP 50
9893: PUSH
9894: EMPTY
9895: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
9896: LD_ADDR_EXP 48
9900: PUSH
9901: LD_INT 8
9903: PUSH
9904: LD_INT 11
9906: PUSH
9907: LD_INT 12
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: PUSH
9915: LD_OWVAR 67
9919: ARRAY
9920: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
9921: LD_VAR 0 1
9925: PPUSH
9926: LD_INT 24
9928: PPUSH
9929: CALL 84410 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
9933: LD_INT 23
9935: PPUSH
9936: LD_INT 7
9938: PUSH
9939: LD_INT 9
9941: PUSH
9942: LD_INT 11
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: PUSH
9950: LD_OWVAR 67
9954: ARRAY
9955: PPUSH
9956: CALL 10521 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
9960: LD_ADDR_VAR 0 8
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: LD_OWVAR 67
9983: ARRAY
9984: ST_TO_ADDR
// uc_side := side ;
9985: LD_ADDR_OWVAR 20
9989: PUSH
9990: LD_VAR 0 1
9994: ST_TO_ADDR
// uc_nation := 2 ;
9995: LD_ADDR_OWVAR 21
9999: PUSH
10000: LD_INT 2
10002: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10003: LD_ADDR_EXP 51
10007: PUSH
10008: LD_INT 32
10010: PPUSH
10011: LD_INT 5
10013: PPUSH
10014: LD_STRING 
10016: PPUSH
10017: LD_VAR 0 8
10021: PPUSH
10022: LD_INT 800
10024: PUSH
10025: LD_INT 120
10027: PUSH
10028: LD_INT 0
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: PPUSH
10036: LD_INT 10
10038: PUSH
10039: LD_INT 11
10041: PUSH
10042: LD_INT 12
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: PUSH
10050: LD_OWVAR 67
10054: ARRAY
10055: PUSH
10056: LD_INT 4
10058: PUSH
10059: LD_INT 6
10061: PUSH
10062: LD_INT 3
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL 50441 0 6
10075: ST_TO_ADDR
// arForceTmp := [ ] ;
10076: LD_ADDR_EXP 52
10080: PUSH
10081: EMPTY
10082: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10083: LD_ADDR_VAR 0 3
10087: PUSH
10088: LD_INT 22
10090: PUSH
10091: LD_VAR 0 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 30
10102: PUSH
10103: LD_INT 31
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 3
10112: PUSH
10113: LD_INT 95
10115: PUSH
10116: LD_INT 5
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 58
10129: PUSH
10130: EMPTY
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: PPUSH
10139: CALL_OW 69
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10274
// begin d := GetDir ( i ) ;
10147: LD_ADDR_VAR 0 4
10151: PUSH
10152: LD_VAR 0 3
10156: PPUSH
10157: CALL_OW 254
10161: ST_TO_ADDR
// if d < 3 then
10162: LD_VAR 0 4
10166: PUSH
10167: LD_INT 3
10169: LESS
10170: IFFALSE 10188
// d := d + 3 else
10172: LD_ADDR_VAR 0 4
10176: PUSH
10177: LD_VAR 0 4
10181: PUSH
10182: LD_INT 3
10184: PLUS
10185: ST_TO_ADDR
10186: GO 10202
// d := d - 3 ;
10188: LD_ADDR_VAR 0 4
10192: PUSH
10193: LD_VAR 0 4
10197: PUSH
10198: LD_INT 3
10200: MINUS
10201: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10202: LD_INT 0
10204: PPUSH
10205: LD_VAR 0 8
10209: PPUSH
10210: CALL_OW 381
// un := CreateHuman ;
10214: LD_ADDR_VAR 0 6
10218: PUSH
10219: CALL_OW 44
10223: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10224: LD_ADDR_EXP 52
10228: PUSH
10229: LD_EXP 52
10233: PPUSH
10234: LD_VAR 0 6
10238: PPUSH
10239: CALL 79471 0 2
10243: ST_TO_ADDR
// SetDir ( un , d ) ;
10244: LD_VAR 0 6
10248: PPUSH
10249: LD_VAR 0 4
10253: PPUSH
10254: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
10258: LD_VAR 0 6
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: CALL_OW 52
// end ;
10272: GO 10144
10274: POP
10275: POP
// for i := 1 to Difficulty do
10276: LD_ADDR_VAR 0 3
10280: PUSH
10281: DOUBLE
10282: LD_INT 1
10284: DEC
10285: ST_TO_ADDR
10286: LD_OWVAR 67
10290: PUSH
10291: FOR_TO
10292: IFFALSE 10358
// begin PrepareSoldier ( false , skill ) ;
10294: LD_INT 0
10296: PPUSH
10297: LD_VAR 0 8
10301: PPUSH
10302: CALL_OW 381
// un := CreateHuman ;
10306: LD_ADDR_VAR 0 6
10310: PUSH
10311: CALL_OW 44
10315: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10316: LD_ADDR_EXP 52
10320: PUSH
10321: LD_EXP 52
10325: PPUSH
10326: LD_VAR 0 6
10330: PPUSH
10331: CALL 79471 0 2
10335: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
10336: LD_VAR 0 6
10340: PPUSH
10341: LD_INT 215
10343: PPUSH
10344: LD_INT 102
10346: PPUSH
10347: CALL_OW 428
10351: PPUSH
10352: CALL_OW 52
// end ;
10356: GO 10291
10358: POP
10359: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
10360: LD_ADDR_VAR 0 3
10364: PUSH
10365: LD_INT 22
10367: PUSH
10368: LD_VAR 0 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 21
10379: PUSH
10380: LD_INT 3
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: PUSH
10396: FOR_IN
10397: IFFALSE 10430
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
10399: LD_VAR 0 3
10403: PPUSH
10404: LD_INT 3
10406: PUSH
10407: LD_INT 5
10409: PUSH
10410: LD_INT 7
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: LIST
10417: PUSH
10418: LD_OWVAR 67
10422: ARRAY
10423: PPUSH
10424: CALL_OW 241
10428: GO 10396
10430: POP
10431: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10432: LD_ADDR_VAR 0 3
10436: PUSH
10437: LD_INT 22
10439: PUSH
10440: LD_VAR 0 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 30
10451: PUSH
10452: LD_INT 32
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PPUSH
10463: CALL_OW 69
10467: PUSH
10468: FOR_IN
10469: IFFALSE 10514
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
10471: LD_VAR 0 3
10475: PPUSH
10476: LD_INT 27
10478: PUSH
10479: LD_INT 25
10481: PUSH
10482: LD_INT 24
10484: PUSH
10485: LD_INT 27
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: PUSH
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 4
10501: MOD
10502: PUSH
10503: LD_INT 1
10505: PLUS
10506: ARRAY
10507: PPUSH
10508: CALL_OW 431
10512: GO 10468
10514: POP
10515: POP
// end ;
10516: LD_VAR 0 2
10520: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
10521: LD_INT 0
10523: PPUSH
10524: PPUSH
10525: PPUSH
10526: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10527: LD_ADDR_VAR 0 5
10531: PUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: LD_INT 0
10539: PPUSH
10540: CALL_OW 517
10544: ST_TO_ADDR
// if not tmp then
10545: LD_VAR 0 5
10549: NOT
10550: IFFALSE 10554
// exit ;
10552: GO 10796
// for i := 1 to n do
10554: LD_ADDR_VAR 0 4
10558: PUSH
10559: DOUBLE
10560: LD_INT 1
10562: DEC
10563: ST_TO_ADDR
10564: LD_VAR 0 2
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10794
// begin r := rand ( 1 , tmp [ 1 ] ) ;
10572: LD_ADDR_VAR 0 6
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_VAR 0 5
10584: PUSH
10585: LD_INT 1
10587: ARRAY
10588: PPUSH
10589: CALL_OW 12
10593: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
10594: LD_VAR 0 5
10598: PUSH
10599: LD_INT 1
10601: ARRAY
10602: PUSH
10603: LD_VAR 0 6
10607: ARRAY
10608: PPUSH
10609: LD_VAR 0 5
10613: PUSH
10614: LD_INT 2
10616: ARRAY
10617: PUSH
10618: LD_VAR 0 6
10622: ARRAY
10623: PPUSH
10624: LD_EXP 3
10628: PUSH
10629: LD_INT 2
10631: ARRAY
10632: PPUSH
10633: LD_INT 0
10635: PPUSH
10636: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
10640: LD_ADDR_EXP 50
10644: PUSH
10645: LD_EXP 50
10649: PPUSH
10650: LD_EXP 50
10654: PUSH
10655: LD_INT 1
10657: PLUS
10658: PPUSH
10659: LD_VAR 0 5
10663: PUSH
10664: LD_INT 1
10666: ARRAY
10667: PUSH
10668: LD_VAR 0 6
10672: ARRAY
10673: PPUSH
10674: CALL_OW 2
10678: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
10679: LD_ADDR_EXP 50
10683: PUSH
10684: LD_EXP 50
10688: PPUSH
10689: LD_EXP 50
10693: PUSH
10694: LD_INT 1
10696: PLUS
10697: PPUSH
10698: LD_VAR 0 5
10702: PUSH
10703: LD_INT 2
10705: ARRAY
10706: PUSH
10707: LD_VAR 0 6
10711: ARRAY
10712: PPUSH
10713: CALL_OW 2
10717: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_VAR 0 5
10727: PPUSH
10728: LD_INT 1
10730: PPUSH
10731: LD_VAR 0 5
10735: PUSH
10736: LD_INT 1
10738: ARRAY
10739: PPUSH
10740: LD_VAR 0 6
10744: PPUSH
10745: CALL_OW 3
10749: PPUSH
10750: CALL_OW 1
10754: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
10755: LD_ADDR_VAR 0 5
10759: PUSH
10760: LD_VAR 0 5
10764: PPUSH
10765: LD_INT 2
10767: PPUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_INT 2
10775: ARRAY
10776: PPUSH
10777: LD_VAR 0 6
10781: PPUSH
10782: CALL_OW 3
10786: PPUSH
10787: CALL_OW 1
10791: ST_TO_ADDR
// end ;
10792: GO 10569
10794: POP
10795: POP
// end ;
10796: LD_VAR 0 3
10800: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
10801: LD_INT 0
10803: PPUSH
10804: PPUSH
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
10810: PPUSH
10811: PPUSH
10812: PPUSH
10813: PPUSH
10814: PPUSH
10815: PPUSH
10816: PPUSH
10817: PPUSH
10818: PPUSH
10819: PPUSH
10820: PPUSH
10821: PPUSH
10822: PPUSH
10823: PPUSH
10824: PPUSH
10825: PPUSH
10826: PPUSH
10827: PPUSH
10828: PPUSH
10829: PPUSH
// enable ;
10830: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
10831: LD_ADDR_VAR 0 10
10835: PUSH
10836: LD_INT 81
10838: PUSH
10839: LD_VAR 0 1
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: ST_TO_ADDR
// if tmp then
10853: LD_VAR 0 10
10857: IFFALSE 10878
// enemySide := GetSide ( tmp [ 1 ] ) ;
10859: LD_ADDR_VAR 0 34
10863: PUSH
10864: LD_VAR 0 10
10868: PUSH
10869: LD_INT 1
10871: ARRAY
10872: PPUSH
10873: CALL_OW 255
10877: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10878: LD_ADDR_VAR 0 22
10882: PUSH
10883: LD_VAR 0 3
10887: PPUSH
10888: LD_INT 81
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PPUSH
10900: CALL_OW 70
10904: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
10905: LD_ADDR_VAR 0 23
10909: PUSH
10910: LD_VAR 0 4
10914: PPUSH
10915: LD_INT 81
10917: PUSH
10918: LD_VAR 0 1
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PPUSH
10927: CALL_OW 70
10931: ST_TO_ADDR
// vehicles := arVehicles ;
10932: LD_ADDR_VAR 0 26
10936: PUSH
10937: LD_EXP 45
10941: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10942: LD_ADDR_VAR 0 32
10946: PUSH
10947: LD_VAR 0 3
10951: PPUSH
10952: LD_INT 22
10954: PUSH
10955: LD_VAR 0 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 30
10969: PUSH
10970: LD_INT 0
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 30
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 70
11000: ST_TO_ADDR
// if depot then
11001: LD_VAR 0 32
11005: IFFALSE 11021
// depot := depot [ 1 ] ;
11007: LD_ADDR_VAR 0 32
11011: PUSH
11012: LD_VAR 0 32
11016: PUSH
11017: LD_INT 1
11019: ARRAY
11020: ST_TO_ADDR
// if arTech then
11021: LD_EXP 42
11025: IFFALSE 11184
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11027: LD_ADDR_VAR 0 12
11031: PUSH
11032: LD_VAR 0 3
11036: PPUSH
11037: LD_INT 22
11039: PUSH
11040: LD_VAR 0 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 50
11051: PUSH
11052: EMPTY
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 30
11060: PUSH
11061: LD_INT 6
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 30
11070: PUSH
11071: LD_INT 7
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 30
11080: PUSH
11081: LD_INT 8
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 70
11103: ST_TO_ADDR
// if lab then
11104: LD_VAR 0 12
11108: IFFALSE 11184
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11110: LD_VAR 0 12
11114: PUSH
11115: LD_INT 1
11117: ARRAY
11118: PPUSH
11119: CALL_OW 461
11123: PUSH
11124: LD_INT 2
11126: EQUAL
11127: IFFALSE 11184
// begin for i in arTech do
11129: LD_ADDR_VAR 0 9
11133: PUSH
11134: LD_EXP 42
11138: PUSH
11139: FOR_IN
11140: IFFALSE 11182
// if CanBeResearched ( lab [ 1 ] , i ) then
11142: LD_VAR 0 12
11146: PUSH
11147: LD_INT 1
11149: ARRAY
11150: PPUSH
11151: LD_VAR 0 9
11155: PPUSH
11156: CALL_OW 430
11160: IFFALSE 11180
// begin AddComResearch ( lab [ 1 ] , i ) ;
11162: LD_VAR 0 12
11166: PUSH
11167: LD_INT 1
11169: ARRAY
11170: PPUSH
11171: LD_VAR 0 9
11175: PPUSH
11176: CALL_OW 184
// end ;
11180: GO 11139
11182: POP
11183: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11184: LD_ADDR_VAR 0 29
11188: PUSH
11189: LD_VAR 0 3
11193: PPUSH
11194: LD_INT 22
11196: PUSH
11197: LD_VAR 0 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 30
11208: PUSH
11209: LD_INT 3
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 50
11218: PUSH
11219: EMPTY
11220: LIST
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 70
11231: ST_TO_ADDR
// if fac then
11232: LD_VAR 0 29
11236: IFFALSE 11571
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
11238: LD_VAR 0 29
11242: PUSH
11243: LD_INT 1
11245: ARRAY
11246: PPUSH
11247: CALL_OW 461
11251: PUSH
11252: LD_INT 2
11254: EQUAL
11255: IFFALSE 11571
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
11257: LD_ADDR_VAR 0 30
11261: PUSH
11262: LD_VAR 0 3
11266: PPUSH
11267: LD_INT 2
11269: PUSH
11270: LD_INT 30
11272: PUSH
11273: LD_INT 32
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 30
11282: PUSH
11283: LD_INT 33
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 35
11297: PUSH
11298: LD_INT 0
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PPUSH
11309: CALL_OW 70
11313: ST_TO_ADDR
// if emptyTowers then
11314: LD_VAR 0 30
11318: IFFALSE 11368
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
11320: LD_ADDR_VAR 0 31
11324: PUSH
11325: LD_VAR 0 30
11329: PUSH
11330: LD_INT 1
11332: ARRAY
11333: PPUSH
11334: LD_VAR 0 3
11338: PPUSH
11339: CALL 52127 0 2
11343: ST_TO_ADDR
// if weapon then
11344: LD_VAR 0 31
11348: IFFALSE 11368
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
11350: LD_VAR 0 30
11354: PUSH
11355: LD_INT 1
11357: ARRAY
11358: PPUSH
11359: LD_VAR 0 31
11363: PPUSH
11364: CALL_OW 148
// end ; if arConstructList then
11368: LD_EXP 43
11372: IFFALSE 11571
// for i := 1 to Count ( arConstructList ) do
11374: LD_ADDR_VAR 0 9
11378: PUSH
11379: DOUBLE
11380: LD_INT 1
11382: DEC
11383: ST_TO_ADDR
11384: LD_EXP 43
11388: PPUSH
11389: CALL 43882 0 1
11393: PUSH
11394: FOR_TO
11395: IFFALSE 11569
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
11397: LD_VAR 0 29
11401: PUSH
11402: LD_INT 1
11404: ARRAY
11405: PPUSH
11406: LD_EXP 43
11410: PUSH
11411: LD_VAR 0 9
11415: ARRAY
11416: PUSH
11417: LD_INT 1
11419: ARRAY
11420: PPUSH
11421: LD_EXP 43
11425: PUSH
11426: LD_VAR 0 9
11430: ARRAY
11431: PUSH
11432: LD_INT 2
11434: ARRAY
11435: PPUSH
11436: LD_EXP 43
11440: PUSH
11441: LD_VAR 0 9
11445: ARRAY
11446: PUSH
11447: LD_INT 3
11449: ARRAY
11450: PPUSH
11451: LD_EXP 43
11455: PUSH
11456: LD_VAR 0 9
11460: ARRAY
11461: PUSH
11462: LD_INT 4
11464: ARRAY
11465: PPUSH
11466: CALL_OW 448
11470: IFFALSE 11567
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
11472: LD_VAR 0 29
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PPUSH
11481: LD_EXP 43
11485: PUSH
11486: LD_VAR 0 9
11490: ARRAY
11491: PUSH
11492: LD_INT 1
11494: ARRAY
11495: PPUSH
11496: LD_EXP 43
11500: PUSH
11501: LD_VAR 0 9
11505: ARRAY
11506: PUSH
11507: LD_INT 2
11509: ARRAY
11510: PPUSH
11511: LD_EXP 43
11515: PUSH
11516: LD_VAR 0 9
11520: ARRAY
11521: PUSH
11522: LD_INT 3
11524: ARRAY
11525: PPUSH
11526: LD_EXP 43
11530: PUSH
11531: LD_VAR 0 9
11535: ARRAY
11536: PUSH
11537: LD_INT 4
11539: ARRAY
11540: PPUSH
11541: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
11545: LD_ADDR_EXP 43
11549: PUSH
11550: LD_EXP 43
11554: PPUSH
11555: LD_VAR 0 9
11559: PPUSH
11560: CALL_OW 3
11564: ST_TO_ADDR
// break ;
11565: GO 11569
// end ; end ;
11567: GO 11394
11569: POP
11570: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11571: LD_ADDR_VAR 0 10
11575: PUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 21
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 57
11596: PUSH
11597: EMPTY
11598: LIST
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 3
11606: PUSH
11607: LD_INT 24
11609: PUSH
11610: LD_INT 1000
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 70
11630: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
11631: LD_ADDR_VAR 0 17
11635: PUSH
11636: LD_VAR 0 3
11640: PPUSH
11641: CALL_OW 435
11645: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
11646: LD_ADDR_VAR 0 14
11650: PUSH
11651: LD_VAR 0 5
11655: PPUSH
11656: LD_INT 25
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 50
11668: PUSH
11669: EMPTY
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 72
11680: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
11681: LD_VAR 0 14
11685: PPUSH
11686: LD_INT 3
11688: PUSH
11689: LD_INT 120
11691: PUSH
11692: LD_INT 7
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 54
11708: PUSH
11709: EMPTY
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 72
11724: PUSH
11725: LD_VAR 0 29
11729: PUSH
11730: LD_INT 1
11732: ARRAY
11733: PPUSH
11734: CALL_OW 302
11738: AND
11739: IFFALSE 11798
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
11741: LD_VAR 0 14
11745: PPUSH
11746: LD_INT 3
11748: PUSH
11749: LD_INT 120
11751: PUSH
11752: LD_INT 7
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 3
11765: PUSH
11766: LD_INT 54
11768: PUSH
11769: EMPTY
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PPUSH
11780: CALL_OW 72
11784: PPUSH
11785: LD_VAR 0 29
11789: PUSH
11790: LD_INT 1
11792: ARRAY
11793: PPUSH
11794: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
11798: LD_ADDR_VAR 0 18
11802: PUSH
11803: LD_VAR 0 5
11807: PPUSH
11808: LD_INT 25
11810: PUSH
11811: LD_INT 4
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 50
11820: PUSH
11821: EMPTY
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 72
11832: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
11833: LD_ADDR_VAR 0 12
11837: PUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: LD_INT 2
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 6
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 30
11858: PUSH
11859: LD_INT 7
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 8
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 70
11886: ST_TO_ADDR
// if sci then
11887: LD_VAR 0 18
11891: IFFALSE 12052
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
11893: LD_ADDR_VAR 0 20
11897: PUSH
11898: LD_VAR 0 5
11902: PPUSH
11903: LD_INT 95
11905: PUSH
11906: LD_VAR 0 3
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 120
11917: PUSH
11918: LD_INT 1
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 72
11933: ST_TO_ADDR
// if hurtUnits then
11934: LD_VAR 0 20
11938: IFFALSE 11999
// begin for i in sci do
11940: LD_ADDR_VAR 0 9
11944: PUSH
11945: LD_VAR 0 18
11949: PUSH
11950: FOR_IN
11951: IFFALSE 11995
// if IsInUnit ( i ) then
11953: LD_VAR 0 9
11957: PPUSH
11958: CALL_OW 310
11962: IFFALSE 11975
// ComExitBuilding ( i ) else
11964: LD_VAR 0 9
11968: PPUSH
11969: CALL_OW 122
11973: GO 11993
// ComHeal ( i , hurtUnits [ 1 ] ) ;
11975: LD_VAR 0 9
11979: PPUSH
11980: LD_VAR 0 20
11984: PUSH
11985: LD_INT 1
11987: ARRAY
11988: PPUSH
11989: CALL_OW 128
11993: GO 11950
11995: POP
11996: POP
// end else
11997: GO 12052
// if lab then
11999: LD_VAR 0 12
12003: IFFALSE 12052
// begin for i in sci do
12005: LD_ADDR_VAR 0 9
12009: PUSH
12010: LD_VAR 0 18
12014: PUSH
12015: FOR_IN
12016: IFFALSE 12050
// if not IsInUnit ( i ) then
12018: LD_VAR 0 9
12022: PPUSH
12023: CALL_OW 310
12027: NOT
12028: IFFALSE 12048
// ComEnterUnit ( i , lab [ 1 ] ) ;
12030: LD_VAR 0 9
12034: PPUSH
12035: LD_VAR 0 12
12039: PUSH
12040: LD_INT 1
12042: ARRAY
12043: PPUSH
12044: CALL_OW 120
12048: GO 12015
12050: POP
12051: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12052: LD_ADDR_VAR 0 13
12056: PUSH
12057: LD_VAR 0 5
12061: PPUSH
12062: LD_INT 25
12064: PUSH
12065: LD_INT 2
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 72
12076: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12077: LD_ADDR_VAR 0 33
12081: PUSH
12082: LD_EXP 44
12086: ST_TO_ADDR
// if eng then
12087: LD_VAR 0 13
12091: IFFALSE 12925
// begin for i in eng do
12093: LD_ADDR_VAR 0 9
12097: PUSH
12098: LD_VAR 0 13
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12923
// begin tag := GetTag ( i ) ;
12106: LD_ADDR_VAR 0 15
12110: PUSH
12111: LD_VAR 0 9
12115: PPUSH
12116: CALL_OW 110
12120: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12121: LD_VAR 0 9
12125: PPUSH
12126: LD_VAR 0 4
12130: PPUSH
12131: CALL_OW 308
12135: IFFALSE 12166
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12137: LD_VAR 0 9
12141: PPUSH
12142: LD_VAR 0 7
12146: PUSH
12147: LD_INT 1
12149: ARRAY
12150: PPUSH
12151: LD_VAR 0 7
12155: PUSH
12156: LD_INT 2
12158: ARRAY
12159: PPUSH
12160: CALL_OW 111
// continue ;
12164: GO 12103
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12166: LD_VAR 0 9
12170: PPUSH
12171: CALL_OW 256
12175: PUSH
12176: LD_INT 800
12178: LESS
12179: PUSH
12180: LD_VAR 0 15
12184: PUSH
12185: LD_INT 1
12187: NONEQUAL
12188: AND
12189: IFFALSE 12239
// begin SetTag ( i , tHeal ) ;
12191: LD_VAR 0 9
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12203: LD_VAR 0 9
12207: PPUSH
12208: LD_VAR 0 6
12212: PUSH
12213: LD_INT 1
12215: ARRAY
12216: PPUSH
12217: LD_VAR 0 6
12221: PUSH
12222: LD_INT 2
12224: ARRAY
12225: PPUSH
12226: CALL_OW 111
// AddComHold ( i ) ;
12230: LD_VAR 0 9
12234: PPUSH
12235: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12239: LD_VAR 0 15
12243: PUSH
12244: LD_INT 1
12246: EQUAL
12247: PUSH
12248: LD_VAR 0 9
12252: PPUSH
12253: CALL_OW 256
12257: PUSH
12258: LD_INT 1000
12260: EQUAL
12261: AND
12262: IFFALSE 12276
// SetTag ( i , 0 ) ;
12264: LD_VAR 0 9
12268: PPUSH
12269: LD_INT 0
12271: PPUSH
12272: CALL_OW 109
// if not tag then
12276: LD_VAR 0 15
12280: NOT
12281: IFFALSE 12448
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12283: LD_ADDR_VAR 0 11
12287: PUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 57
12295: PUSH
12296: EMPTY
12297: LIST
12298: PPUSH
12299: CALL_OW 70
12303: ST_TO_ADDR
// if undone then
12304: LD_VAR 0 11
12308: IFFALSE 12330
// begin ComComplete ( i , undone [ 1 ] ) ;
12310: LD_VAR 0 9
12314: PPUSH
12315: LD_VAR 0 11
12319: PUSH
12320: LD_INT 1
12322: ARRAY
12323: PPUSH
12324: CALL 49980 0 2
// continue ;
12328: GO 12103
// end ; if cr or tmp or buildingsToBuild then
12330: LD_VAR 0 17
12334: PUSH
12335: LD_VAR 0 10
12339: OR
12340: PUSH
12341: LD_VAR 0 33
12345: OR
12346: IFFALSE 12422
// begin if IsInUnit ( i ) then
12348: LD_VAR 0 9
12352: PPUSH
12353: CALL_OW 310
12357: IFFALSE 12368
// ComExitBuilding ( i ) ;
12359: LD_VAR 0 9
12363: PPUSH
12364: CALL_OW 122
// if tmp then
12368: LD_VAR 0 10
12372: IFFALSE 12388
// SetTag ( i , tRepair ) else
12374: LD_VAR 0 9
12378: PPUSH
12379: LD_INT 3
12381: PPUSH
12382: CALL_OW 109
12386: GO 12420
// if cr then
12388: LD_VAR 0 17
12392: IFFALSE 12408
// SetTag ( i , tCrates ) else
12394: LD_VAR 0 9
12398: PPUSH
12399: LD_INT 2
12401: PPUSH
12402: CALL_OW 109
12406: GO 12420
// SetTag ( i , tBuild ) ;
12408: LD_VAR 0 9
12412: PPUSH
12413: LD_INT 5
12415: PPUSH
12416: CALL_OW 109
// end else
12420: GO 12448
// if not IsInUnit ( i ) then
12422: LD_VAR 0 9
12426: PPUSH
12427: CALL_OW 310
12431: NOT
12432: IFFALSE 12448
// ComEnterUnit ( i , depot ) ;
12434: LD_VAR 0 9
12438: PPUSH
12439: LD_VAR 0 32
12443: PPUSH
12444: CALL_OW 120
// end ; if tag = tRepair then
12448: LD_VAR 0 15
12452: PUSH
12453: LD_INT 3
12455: EQUAL
12456: IFFALSE 12562
// begin if IsInUnit ( i ) then
12458: LD_VAR 0 9
12462: PPUSH
12463: CALL_OW 310
12467: IFFALSE 12480
// begin ComExitBuilding ( i ) ;
12469: LD_VAR 0 9
12473: PPUSH
12474: CALL_OW 122
// continue ;
12478: GO 12103
// end ; if not tmp then
12480: LD_VAR 0 10
12484: NOT
12485: IFFALSE 12501
// begin SetTag ( i , 0 ) ;
12487: LD_VAR 0 9
12491: PPUSH
12492: LD_INT 0
12494: PPUSH
12495: CALL_OW 109
// continue ;
12499: GO 12103
// end ; if not HasTask ( i ) then
12501: LD_VAR 0 9
12505: PPUSH
12506: CALL_OW 314
12510: NOT
12511: IFFALSE 12531
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
12513: LD_VAR 0 9
12517: PPUSH
12518: LD_VAR 0 10
12522: PUSH
12523: LD_INT 1
12525: ARRAY
12526: PPUSH
12527: CALL_OW 130
// if not IsInArea ( i , area ) then
12531: LD_VAR 0 9
12535: PPUSH
12536: LD_VAR 0 3
12540: PPUSH
12541: CALL_OW 308
12545: NOT
12546: IFFALSE 12562
// ComMoveToArea ( i , area ) ;
12548: LD_VAR 0 9
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: CALL_OW 113
// end ; if tag = tBuild then
12562: LD_VAR 0 15
12566: PUSH
12567: LD_INT 5
12569: EQUAL
12570: IFFALSE 12776
// begin if IsInUnit ( i ) then
12572: LD_VAR 0 9
12576: PPUSH
12577: CALL_OW 310
12581: IFFALSE 12594
// begin ComExitBuilding ( i ) ;
12583: LD_VAR 0 9
12587: PPUSH
12588: CALL_OW 122
// continue ;
12592: GO 12103
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
12594: LD_VAR 0 33
12598: NOT
12599: PUSH
12600: LD_VAR 0 22
12604: OR
12605: PUSH
12606: LD_VAR 0 23
12610: OR
12611: IFFALSE 12629
// begin SetTag ( i , 0 ) ;
12613: LD_VAR 0 9
12617: PPUSH
12618: LD_INT 0
12620: PPUSH
12621: CALL_OW 109
// continue ;
12625: GO 12103
// end else
12627: GO 12668
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12629: LD_VAR 0 32
12633: PPUSH
12634: LD_VAR 0 33
12638: PUSH
12639: LD_INT 1
12641: ARRAY
12642: PUSH
12643: LD_INT 1
12645: ARRAY
12646: PPUSH
12647: CALL 83394 0 2
12651: NOT
12652: IFFALSE 12668
// begin SetTag ( i , 0 ) ;
12654: LD_VAR 0 9
12658: PPUSH
12659: LD_INT 0
12661: PPUSH
12662: CALL_OW 109
// continue ;
12666: GO 12103
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12668: LD_ADDR_VAR 0 11
12672: PUSH
12673: LD_VAR 0 3
12677: PPUSH
12678: LD_INT 57
12680: PUSH
12681: EMPTY
12682: LIST
12683: PPUSH
12684: CALL_OW 70
12688: ST_TO_ADDR
// if undone then
12689: LD_VAR 0 11
12693: IFFALSE 12715
// begin ComComplete ( i , undone [ 1 ] ) ;
12695: LD_VAR 0 9
12699: PPUSH
12700: LD_VAR 0 11
12704: PUSH
12705: LD_INT 1
12707: ARRAY
12708: PPUSH
12709: CALL 49980 0 2
// continue ;
12713: GO 12103
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
12715: LD_VAR 0 9
12719: PPUSH
12720: LD_VAR 0 33
12724: PUSH
12725: LD_INT 1
12727: ARRAY
12728: PUSH
12729: LD_INT 1
12731: ARRAY
12732: PPUSH
12733: LD_VAR 0 33
12737: PUSH
12738: LD_INT 1
12740: ARRAY
12741: PUSH
12742: LD_INT 2
12744: ARRAY
12745: PPUSH
12746: LD_VAR 0 33
12750: PUSH
12751: LD_INT 1
12753: ARRAY
12754: PUSH
12755: LD_INT 3
12757: ARRAY
12758: PPUSH
12759: LD_VAR 0 33
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PUSH
12768: LD_INT 4
12770: ARRAY
12771: PPUSH
12772: CALL_OW 145
// end ; if tag = tCrates then
12776: LD_VAR 0 15
12780: PUSH
12781: LD_INT 2
12783: EQUAL
12784: IFFALSE 12921
// begin if IsInUnit ( i ) then
12786: LD_VAR 0 9
12790: PPUSH
12791: CALL_OW 310
12795: IFFALSE 12808
// begin ComExitBuilding ( i ) ;
12797: LD_VAR 0 9
12801: PPUSH
12802: CALL_OW 122
// continue ;
12806: GO 12103
// end ; if not cr then
12808: LD_VAR 0 17
12812: NOT
12813: IFFALSE 12829
// begin SetTag ( i , 0 ) ;
12815: LD_VAR 0 9
12819: PPUSH
12820: LD_INT 0
12822: PPUSH
12823: CALL_OW 109
// continue ;
12827: GO 12103
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
12829: LD_VAR 0 9
12833: PPUSH
12834: CALL_OW 314
12838: NOT
12839: PUSH
12840: LD_INT 81
12842: PUSH
12843: LD_VAR 0 1
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 92
12854: PUSH
12855: LD_VAR 0 17
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PUSH
12864: LD_VAR 0 17
12868: PUSH
12869: LD_INT 2
12871: ARRAY
12872: PUSH
12873: LD_INT 12
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PPUSH
12886: CALL_OW 69
12890: NOT
12891: AND
12892: IFFALSE 12921
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
12894: LD_VAR 0 9
12898: PPUSH
12899: LD_VAR 0 17
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PPUSH
12908: LD_VAR 0 17
12912: PUSH
12913: LD_INT 2
12915: ARRAY
12916: PPUSH
12917: CALL_OW 117
// end ; end ;
12921: GO 12103
12923: POP
12924: POP
// end ; if vehicles then
12925: LD_VAR 0 26
12929: IFFALSE 13729
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
12931: LD_ADDR_VAR 0 26
12935: PUSH
12936: LD_VAR 0 26
12940: PPUSH
12941: LD_INT 3
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: LD_INT 34
12949: PUSH
12950: LD_INT 88
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 34
12959: PUSH
12960: LD_INT 32
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 50
12978: PUSH
12979: EMPTY
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 72
12990: ST_TO_ADDR
// if vehicles then
12991: LD_VAR 0 26
12995: IFFALSE 13729
// begin for i in vehicles do
12997: LD_ADDR_VAR 0 9
13001: PUSH
13002: LD_VAR 0 26
13006: PUSH
13007: FOR_IN
13008: IFFALSE 13727
// begin tag := GetTag ( i ) ;
13010: LD_ADDR_VAR 0 15
13014: PUSH
13015: LD_VAR 0 9
13019: PPUSH
13020: CALL_OW 110
13024: ST_TO_ADDR
// if not tag then
13025: LD_VAR 0 15
13029: NOT
13030: IFFALSE 13176
// begin if GetControl ( i ) = control_manual then
13032: LD_VAR 0 9
13036: PPUSH
13037: CALL_OW 263
13041: PUSH
13042: LD_INT 1
13044: EQUAL
13045: IFFALSE 13162
// begin drivers := arDrivers ;
13047: LD_ADDR_VAR 0 24
13051: PUSH
13052: LD_EXP 47
13056: ST_TO_ADDR
// if not drivers then
13057: LD_VAR 0 24
13061: NOT
13062: IFFALSE 13142
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13064: LD_ADDR_VAR 0 24
13068: PUSH
13069: LD_VAR 0 14
13073: PPUSH
13074: LD_INT 3
13076: PUSH
13077: LD_INT 120
13079: PUSH
13080: LD_INT 7
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PPUSH
13091: CALL_OW 72
13095: ST_TO_ADDR
// if drivers then
13096: LD_VAR 0 24
13100: IFFALSE 13142
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13102: LD_VAR 0 24
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PPUSH
13111: LD_INT 7
13113: PPUSH
13114: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13118: LD_ADDR_EXP 47
13122: PUSH
13123: LD_EXP 47
13127: PPUSH
13128: LD_VAR 0 24
13132: PUSH
13133: LD_INT 1
13135: ARRAY
13136: PPUSH
13137: CALL 79471 0 2
13141: ST_TO_ADDR
// end ; end ; if drivers then
13142: LD_VAR 0 24
13146: IFFALSE 13160
// SetTag ( i , tBusy ) ;
13148: LD_VAR 0 9
13152: PPUSH
13153: LD_INT 8
13155: PPUSH
13156: CALL_OW 109
// continue ;
13160: GO 13007
// end ; SetTag ( i , tBusy ) ;
13162: LD_VAR 0 9
13166: PPUSH
13167: LD_INT 8
13169: PPUSH
13170: CALL_OW 109
// end else
13174: GO 13725
// if tag = tBusy then
13176: LD_VAR 0 15
13180: PUSH
13181: LD_INT 8
13183: EQUAL
13184: IFFALSE 13396
// begin if GetLives ( i ) = 1000 then
13186: LD_VAR 0 9
13190: PPUSH
13191: CALL_OW 256
13195: PUSH
13196: LD_INT 1000
13198: EQUAL
13199: IFFALSE 13394
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13201: LD_VAR 0 9
13205: PPUSH
13206: CALL_OW 263
13210: PUSH
13211: LD_INT 1
13213: EQUAL
13214: PUSH
13215: LD_VAR 0 9
13219: PPUSH
13220: CALL_OW 311
13224: NOT
13225: AND
13226: IFFALSE 13382
// begin drivers := arDrivers ;
13228: LD_ADDR_VAR 0 24
13232: PUSH
13233: LD_EXP 47
13237: ST_TO_ADDR
// if not drivers then
13238: LD_VAR 0 24
13242: NOT
13243: IFFALSE 13259
// begin SetTag ( i , 0 ) ;
13245: LD_VAR 0 9
13249: PPUSH
13250: LD_INT 0
13252: PPUSH
13253: CALL_OW 109
// continue ;
13257: GO 13007
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13259: LD_VAR 0 24
13263: PUSH
13264: LD_INT 1
13266: ARRAY
13267: PPUSH
13268: CALL_OW 310
13272: PUSH
13273: LD_VAR 0 24
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: CALL 77075 0 1
13286: NOT
13287: AND
13288: IFFALSE 13303
// ComExitBuilding ( drivers [ 1 ] ) ;
13290: LD_VAR 0 24
13294: PUSH
13295: LD_INT 1
13297: ARRAY
13298: PPUSH
13299: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13303: LD_VAR 0 26
13307: PPUSH
13308: LD_INT 120
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 72
13322: PUSH
13323: LD_VAR 0 24
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 314
13336: NOT
13337: AND
13338: PUSH
13339: LD_VAR 0 26
13343: PPUSH
13344: LD_INT 120
13346: PUSH
13347: LD_INT 3
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PPUSH
13354: CALL_OW 72
13358: NOT
13359: OR
13360: IFFALSE 13380
// ComEnterUnit ( drivers [ 1 ] , i ) ;
13362: LD_VAR 0 24
13366: PUSH
13367: LD_INT 1
13369: ARRAY
13370: PPUSH
13371: LD_VAR 0 9
13375: PPUSH
13376: CALL_OW 120
// continue ;
13380: GO 13007
// end ; SetTag ( i , tAttack ) ;
13382: LD_VAR 0 9
13386: PPUSH
13387: LD_INT 13
13389: PPUSH
13390: CALL_OW 109
// end ; end else
13394: GO 13725
// if tag = tAttack then
13396: LD_VAR 0 15
13400: PUSH
13401: LD_INT 13
13403: EQUAL
13404: IFFALSE 13584
// begin enemy := enemyInBase ;
13406: LD_ADDR_VAR 0 21
13410: PUSH
13411: LD_VAR 0 22
13415: ST_TO_ADDR
// if not enemy then
13416: LD_VAR 0 21
13420: NOT
13421: IFFALSE 13433
// enemy := enemyOuterBase ;
13423: LD_ADDR_VAR 0 21
13427: PUSH
13428: LD_VAR 0 23
13432: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
13433: LD_VAR 0 21
13437: NOT
13438: PUSH
13439: LD_VAR 0 9
13443: PPUSH
13444: LD_VAR 0 7
13448: PUSH
13449: LD_INT 1
13451: ARRAY
13452: PPUSH
13453: LD_VAR 0 7
13457: PUSH
13458: LD_INT 2
13460: ARRAY
13461: PPUSH
13462: CALL_OW 297
13466: PUSH
13467: LD_INT 10
13469: GREATER
13470: AND
13471: IFFALSE 13502
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13473: LD_VAR 0 9
13477: PPUSH
13478: LD_VAR 0 7
13482: PUSH
13483: LD_INT 1
13485: ARRAY
13486: PPUSH
13487: LD_VAR 0 7
13491: PUSH
13492: LD_INT 2
13494: ARRAY
13495: PPUSH
13496: CALL_OW 111
// continue ;
13500: GO 13007
// end ; if GetLives ( i ) < 650 then
13502: LD_VAR 0 9
13506: PPUSH
13507: CALL_OW 256
13511: PUSH
13512: LD_INT 650
13514: LESS
13515: IFFALSE 13558
// begin SetTag ( i , tVehRepair ) ;
13517: LD_VAR 0 9
13521: PPUSH
13522: LD_INT 9
13524: PPUSH
13525: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13529: LD_VAR 0 9
13533: PPUSH
13534: LD_VAR 0 7
13538: PUSH
13539: LD_INT 1
13541: ARRAY
13542: PPUSH
13543: LD_VAR 0 7
13547: PUSH
13548: LD_INT 2
13550: ARRAY
13551: PPUSH
13552: CALL_OW 111
// continue ;
13556: GO 13007
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13558: LD_VAR 0 9
13562: PPUSH
13563: LD_VAR 0 21
13567: PPUSH
13568: LD_VAR 0 9
13572: PPUSH
13573: CALL_OW 74
13577: PPUSH
13578: CALL_OW 115
// end else
13582: GO 13725
// if tag = tVehRepair then
13584: LD_VAR 0 15
13588: PUSH
13589: LD_INT 9
13591: EQUAL
13592: IFFALSE 13725
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
13594: LD_VAR 0 9
13598: PPUSH
13599: LD_VAR 0 7
13603: PUSH
13604: LD_INT 1
13606: ARRAY
13607: PPUSH
13608: LD_VAR 0 7
13612: PUSH
13613: LD_INT 2
13615: ARRAY
13616: PPUSH
13617: CALL_OW 297
13621: PUSH
13622: LD_INT 10
13624: GREATER
13625: IFFALSE 13656
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13627: LD_VAR 0 9
13631: PPUSH
13632: LD_VAR 0 7
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PPUSH
13641: LD_VAR 0 7
13645: PUSH
13646: LD_INT 2
13648: ARRAY
13649: PPUSH
13650: CALL_OW 111
// continue ;
13654: GO 13007
// end ; if GetLives ( i ) = 1000 then
13656: LD_VAR 0 9
13660: PPUSH
13661: CALL_OW 256
13665: PUSH
13666: LD_INT 1000
13668: EQUAL
13669: IFFALSE 13685
// begin SetTag ( i , tBusy ) ;
13671: LD_VAR 0 9
13675: PPUSH
13676: LD_INT 8
13678: PPUSH
13679: CALL_OW 109
// continue ;
13683: GO 13007
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
13685: LD_VAR 0 9
13689: PPUSH
13690: CALL_OW 263
13694: PUSH
13695: LD_INT 1
13697: EQUAL
13698: PUSH
13699: LD_VAR 0 9
13703: PPUSH
13704: CALL_OW 311
13708: AND
13709: IFFALSE 13725
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
13711: LD_VAR 0 9
13715: PPUSH
13716: CALL_OW 311
13720: PPUSH
13721: CALL 81171 0 1
// end ; end ;
13725: GO 13007
13727: POP
13728: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
13729: LD_ADDR_VAR 0 19
13733: PUSH
13734: LD_VAR 0 5
13738: PPUSH
13739: LD_INT 2
13741: PUSH
13742: LD_INT 25
13744: PUSH
13745: LD_INT 1
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 25
13754: PUSH
13755: LD_INT 8
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 25
13764: PUSH
13765: LD_INT 5
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 25
13774: PUSH
13775: LD_INT 9
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 50
13791: PUSH
13792: EMPTY
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 72
13803: ST_TO_ADDR
// if sol then
13804: LD_VAR 0 19
13808: IFFALSE 14316
// begin if enemyInBase then
13810: LD_VAR 0 22
13814: IFFALSE 13993
// begin for i in sol do
13816: LD_ADDR_VAR 0 9
13820: PUSH
13821: LD_VAR 0 19
13825: PUSH
13826: FOR_IN
13827: IFFALSE 13989
// begin tw := IsInUnit ( i ) ;
13829: LD_ADDR_VAR 0 16
13833: PUSH
13834: LD_VAR 0 9
13838: PPUSH
13839: CALL_OW 310
13843: ST_TO_ADDR
// if tw then
13844: LD_VAR 0 16
13848: IFFALSE 13931
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
13850: LD_VAR 0 16
13854: PUSH
13855: LD_INT 22
13857: PUSH
13858: LD_VAR 0 1
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 101
13869: PUSH
13870: LD_VAR 0 34
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 2
13881: PUSH
13882: LD_INT 30
13884: PUSH
13885: LD_INT 32
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 30
13894: PUSH
13895: LD_INT 31
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: IN
13917: NOT
13918: IFFALSE 13929
// ComExitBuilding ( i ) ;
13920: LD_VAR 0 9
13924: PPUSH
13925: CALL_OW 122
// end else
13929: GO 13987
// if IsInArea ( i , area ) then
13931: LD_VAR 0 9
13935: PPUSH
13936: LD_VAR 0 3
13940: PPUSH
13941: CALL_OW 308
13945: IFFALSE 13973
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
13947: LD_VAR 0 9
13951: PPUSH
13952: LD_VAR 0 22
13956: PPUSH
13957: LD_VAR 0 9
13961: PPUSH
13962: CALL_OW 74
13966: PPUSH
13967: CALL_OW 115
13971: GO 13987
// ComMoveToArea ( i , area ) ;
13973: LD_VAR 0 9
13977: PPUSH
13978: LD_VAR 0 3
13982: PPUSH
13983: CALL_OW 113
// end ;
13987: GO 13826
13989: POP
13990: POP
// end else
13991: GO 14316
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
13993: LD_ADDR_VAR 0 28
13997: PUSH
13998: LD_VAR 0 3
14002: PPUSH
14003: LD_INT 3
14005: PUSH
14006: LD_INT 62
14008: PUSH
14009: EMPTY
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 2
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 32
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 4
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 5
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 30
14051: PUSH
14052: LD_INT 31
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PPUSH
14070: CALL_OW 70
14074: ST_TO_ADDR
// if empty then
14075: LD_VAR 0 28
14079: IFFALSE 14096
// empty := ReverseArray ( empty ) ;
14081: LD_ADDR_VAR 0 28
14085: PUSH
14086: LD_VAR 0 28
14090: PPUSH
14091: CALL 74758 0 1
14095: ST_TO_ADDR
// for i in sol do
14096: LD_ADDR_VAR 0 9
14100: PUSH
14101: LD_VAR 0 19
14105: PUSH
14106: FOR_IN
14107: IFFALSE 14314
// begin tag := GetTag ( i ) ;
14109: LD_ADDR_VAR 0 15
14113: PUSH
14114: LD_VAR 0 9
14118: PPUSH
14119: CALL_OW 110
14123: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14124: LD_VAR 0 9
14128: PPUSH
14129: CALL_OW 256
14133: PUSH
14134: LD_INT 1000
14136: LESS
14137: PUSH
14138: LD_VAR 0 15
14142: PUSH
14143: LD_INT 1
14145: NONEQUAL
14146: AND
14147: IFFALSE 14199
// begin SetTag ( i , tHeal ) ;
14149: LD_VAR 0 9
14153: PPUSH
14154: LD_INT 1
14156: PPUSH
14157: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14161: LD_VAR 0 9
14165: PPUSH
14166: LD_VAR 0 6
14170: PUSH
14171: LD_INT 1
14173: ARRAY
14174: PPUSH
14175: LD_VAR 0 6
14179: PUSH
14180: LD_INT 2
14182: ARRAY
14183: PPUSH
14184: CALL_OW 111
// AddComHold ( i ) ;
14188: LD_VAR 0 9
14192: PPUSH
14193: CALL_OW 200
// continue ;
14197: GO 14106
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14199: LD_VAR 0 9
14203: PPUSH
14204: CALL_OW 256
14208: PUSH
14209: LD_INT 1000
14211: EQUAL
14212: PUSH
14213: LD_VAR 0 15
14217: PUSH
14218: LD_INT 1
14220: EQUAL
14221: AND
14222: IFFALSE 14238
// begin SetTag ( i , 0 ) ;
14224: LD_VAR 0 9
14228: PPUSH
14229: LD_INT 0
14231: PPUSH
14232: CALL_OW 109
// continue ;
14236: GO 14106
// end ; if HasTask ( i ) then
14238: LD_VAR 0 9
14242: PPUSH
14243: CALL_OW 314
14247: IFFALSE 14251
// continue ;
14249: GO 14106
// if not IsInUnit ( i ) and not tag and empty then
14251: LD_VAR 0 9
14255: PPUSH
14256: CALL_OW 310
14260: NOT
14261: PUSH
14262: LD_VAR 0 15
14266: NOT
14267: AND
14268: PUSH
14269: LD_VAR 0 28
14273: AND
14274: IFFALSE 14312
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
14276: LD_VAR 0 9
14280: PPUSH
14281: LD_VAR 0 28
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PPUSH
14290: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
14294: LD_ADDR_VAR 0 28
14298: PUSH
14299: LD_VAR 0 28
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 3
14311: ST_TO_ADDR
// end ; end ;
14312: GO 14106
14314: POP
14315: POP
// end ; end ; end ;
14316: LD_VAR 0 8
14320: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
14321: LD_EXP 51
14325: PPUSH
14326: LD_INT 50
14328: PUSH
14329: EMPTY
14330: LIST
14331: PPUSH
14332: CALL_OW 72
14336: IFFALSE 14389
14338: GO 14340
14340: DISABLE
// begin enable ;
14341: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
14342: LD_EXP 3
14346: PUSH
14347: LD_INT 2
14349: ARRAY
14350: PPUSH
14351: LD_INT 2
14353: PPUSH
14354: LD_INT 5
14356: PPUSH
14357: LD_INT 6
14359: PPUSH
14360: LD_EXP 51
14364: PPUSH
14365: LD_INT 210
14367: PUSH
14368: LD_INT 43
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PPUSH
14375: LD_INT 194
14377: PUSH
14378: LD_INT 28
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PPUSH
14385: CALL 10801 0 7
// end ;
14389: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
14390: LD_EXP 50
14394: IFFALSE 14614
14396: GO 14398
14398: DISABLE
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
14403: PPUSH
// begin enable ;
14404: ENABLE
// p := 1 ;
14405: LD_ADDR_VAR 0 2
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
14413: LD_ADDR_VAR 0 1
14417: PUSH
14418: DOUBLE
14419: LD_INT 1
14421: DEC
14422: ST_TO_ADDR
14423: LD_EXP 50
14427: PPUSH
14428: CALL 43882 0 1
14432: PUSH
14433: LD_INT 2
14435: DIV
14436: PUSH
14437: FOR_TO
14438: IFFALSE 14612
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
14440: LD_ADDR_VAR 0 3
14444: PUSH
14445: LD_EXP 50
14449: PUSH
14450: LD_VAR 0 2
14454: ARRAY
14455: PPUSH
14456: LD_EXP 50
14460: PUSH
14461: LD_VAR 0 2
14465: PUSH
14466: LD_INT 1
14468: PLUS
14469: ARRAY
14470: PPUSH
14471: CALL_OW 428
14475: ST_TO_ADDR
// if tmp then
14476: LD_VAR 0 3
14480: IFFALSE 14596
// if GetSide ( tmp ) <> botSides [ 2 ] then
14482: LD_VAR 0 3
14486: PPUSH
14487: CALL_OW 255
14491: PUSH
14492: LD_EXP 3
14496: PUSH
14497: LD_INT 2
14499: ARRAY
14500: NONEQUAL
14501: IFFALSE 14596
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
14503: LD_EXP 50
14507: PUSH
14508: LD_VAR 0 2
14512: ARRAY
14513: PPUSH
14514: LD_EXP 50
14518: PUSH
14519: LD_VAR 0 2
14523: PUSH
14524: LD_INT 1
14526: PLUS
14527: ARRAY
14528: PPUSH
14529: LD_EXP 3
14533: PUSH
14534: LD_INT 2
14536: ARRAY
14537: PPUSH
14538: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
14542: LD_ADDR_EXP 50
14546: PUSH
14547: LD_EXP 50
14551: PPUSH
14552: LD_VAR 0 2
14556: PPUSH
14557: CALL_OW 3
14561: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
14562: LD_ADDR_EXP 50
14566: PUSH
14567: LD_EXP 50
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL_OW 3
14581: ST_TO_ADDR
// p := p - 2 ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_VAR 0 2
14591: PUSH
14592: LD_INT 2
14594: MINUS
14595: ST_TO_ADDR
// end ; p := p + 2 ;
14596: LD_ADDR_VAR 0 2
14600: PUSH
14601: LD_VAR 0 2
14605: PUSH
14606: LD_INT 2
14608: PLUS
14609: ST_TO_ADDR
// end ;
14610: GO 14437
14612: POP
14613: POP
// end ;
14614: PPOPN 3
14616: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
14617: LD_INT 32
14619: PPUSH
14620: CALL_OW 302
14624: PUSH
14625: LD_EXP 43
14629: NOT
14630: AND
14631: IFFALSE 14701
14633: GO 14635
14635: DISABLE
// begin enable ;
14636: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
14637: LD_ADDR_EXP 43
14641: PUSH
14642: LD_INT 14
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: LD_INT 1
14650: PUSH
14651: LD_INT 27
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 14
14662: PUSH
14663: LD_INT 1
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: LD_INT 26
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 14
14680: PUSH
14681: LD_INT 1
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: LD_INT 27
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: ST_TO_ADDR
// end ; end_of_file
14701: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 255
14711: PUSH
14712: LD_EXP 3
14716: IN
14717: NOT
14718: IFFALSE 14722
// exit ;
14720: GO 14779
// if not un in [ Sikorski ] then
14722: LD_VAR 0 1
14726: PUSH
14727: LD_EXP 31
14731: PUSH
14732: EMPTY
14733: LIST
14734: IN
14735: NOT
14736: IFFALSE 14757
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
14738: LD_VAR 0 1
14742: PPUSH
14743: LD_VAR 0 2
14747: PPUSH
14748: LD_INT 0
14750: PPUSH
14751: CALL 5068 0 3
14755: GO 14779
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_VAR 0 2
14766: PPUSH
14767: LD_INT 5
14769: PPUSH
14770: CALL 4395 0 1
14774: PPUSH
14775: CALL 5068 0 3
// end ;
14779: PPOPN 3
14781: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
14791: PPUSH
14792: PPUSH
14793: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL 36886 0 1
// side := GetSide ( un ) ;
14803: LD_ADDR_VAR 0 3
14807: PUSH
14808: LD_VAR 0 1
14812: PPUSH
14813: CALL_OW 255
14817: ST_TO_ADDR
// if multi_sides [ side ] then
14818: LD_EXP 6
14822: PUSH
14823: LD_VAR 0 3
14827: ARRAY
14828: IFFALSE 14854
// if GetType ( un ) = unit_human then
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL_OW 247
14839: PUSH
14840: LD_INT 1
14842: EQUAL
14843: IFFALSE 14854
// MultiplayerEvent_HumanLost ( side ) ;
14845: LD_VAR 0 3
14849: PPUSH
14850: CALL 4954 0 1
// if side in botSides then
14854: LD_VAR 0 3
14858: PUSH
14859: LD_EXP 3
14863: IN
14864: IFFALSE 15879
// begin if side = botSides [ 1 ] then
14866: LD_VAR 0 3
14870: PUSH
14871: LD_EXP 3
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: EQUAL
14880: IFFALSE 15365
// begin if un in amForce then
14882: LD_VAR 0 1
14886: PUSH
14887: LD_EXP 39
14891: IN
14892: IFFALSE 14910
// amForce := amForce diff un ;
14894: LD_ADDR_EXP 39
14898: PUSH
14899: LD_EXP 39
14903: PUSH
14904: LD_VAR 0 1
14908: DIFF
14909: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
14910: LD_VAR 0 1
14914: PPUSH
14915: CALL_OW 257
14919: PUSH
14920: LD_INT 3
14922: EQUAL
14923: PUSH
14924: LD_EXP 41
14928: AND
14929: IFFALSE 15070
// begin if not IsOk ( amDep ) then
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 302
14938: NOT
14939: IFFALSE 14943
// exit ;
14941: GO 15951
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
14943: LD_ADDR_EXP 41
14947: PUSH
14948: LD_EXP 41
14952: PPUSH
14953: CALL 80854 0 1
14957: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
14958: LD_ADDR_OWVAR 20
14962: PUSH
14963: LD_EXP 3
14967: PUSH
14968: LD_INT 1
14970: ARRAY
14971: ST_TO_ADDR
// uc_nation := nation_american ;
14972: LD_ADDR_OWVAR 21
14976: PUSH
14977: LD_INT 1
14979: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
14980: LD_INT 0
14982: PPUSH
14983: LD_INT 1
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 3
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PUSH
14997: LD_OWVAR 67
15001: ARRAY
15002: PPUSH
15003: CALL_OW 383
// un := CreateHuman ;
15007: LD_ADDR_VAR 0 1
15011: PUSH
15012: CALL_OW 44
15016: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: LD_INT 52
15024: PPUSH
15025: LD_INT 2
15027: PPUSH
15028: LD_INT 0
15030: PPUSH
15031: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_INT 23
15042: PPUSH
15043: LD_INT 19
15045: PPUSH
15046: CALL_OW 111
// amForce := Join ( amForce , un ) ;
15050: LD_ADDR_EXP 39
15054: PUSH
15055: LD_EXP 39
15059: PPUSH
15060: LD_VAR 0 1
15064: PPUSH
15065: CALL 79471 0 2
15069: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15070: LD_VAR 0 1
15074: PPUSH
15075: CALL_OW 247
15079: PUSH
15080: LD_INT 3
15082: EQUAL
15083: IFFALSE 15226
// begin btype := GetBType ( un ) ;
15085: LD_ADDR_VAR 0 11
15089: PUSH
15090: LD_VAR 0 1
15094: PPUSH
15095: CALL_OW 266
15099: ST_TO_ADDR
// if btype = b_barracks then
15100: LD_VAR 0 11
15104: PUSH
15105: LD_INT 5
15107: EQUAL
15108: IFFALSE 15118
// btype := b_armoury ;
15110: LD_ADDR_VAR 0 11
15114: PUSH
15115: LD_INT 4
15117: ST_TO_ADDR
// if btype = b_factory then
15118: LD_VAR 0 11
15122: PUSH
15123: LD_INT 3
15125: EQUAL
15126: IFFALSE 15136
// btype := b_workshop ;
15128: LD_ADDR_VAR 0 11
15132: PUSH
15133: LD_INT 2
15135: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15136: LD_VAR 0 11
15140: PUSH
15141: LD_INT 8
15143: PUSH
15144: LD_INT 7
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: IN
15151: IFFALSE 15161
// btype := b_lab ;
15153: LD_ADDR_VAR 0 11
15157: PUSH
15158: LD_INT 6
15160: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15161: LD_ADDR_EXP 34
15165: PUSH
15166: LD_EXP 34
15170: PPUSH
15171: LD_EXP 34
15175: PUSH
15176: LD_INT 1
15178: PLUS
15179: PPUSH
15180: LD_VAR 0 11
15184: PUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: CALL_OW 250
15194: PUSH
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 251
15204: PUSH
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 254
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: PPUSH
15221: CALL_OW 1
15225: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 247
15235: PUSH
15236: LD_INT 2
15238: EQUAL
15239: IFFALSE 15365
// begin chassis := GetChassis ( un ) ;
15241: LD_ADDR_VAR 0 5
15245: PUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 265
15255: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15256: LD_ADDR_VAR 0 6
15260: PUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 262
15270: ST_TO_ADDR
// control := GetControl ( un ) ;
15271: LD_ADDR_VAR 0 7
15275: PUSH
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 263
15285: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
15286: LD_ADDR_VAR 0 8
15290: PUSH
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 264
15300: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
15301: LD_ADDR_VAR 0 9
15305: PUSH
15306: LD_VAR 0 10
15310: PPUSH
15311: LD_VAR 0 5
15315: PPUSH
15316: LD_VAR 0 6
15320: PPUSH
15321: LD_VAR 0 7
15325: PPUSH
15326: LD_VAR 0 8
15330: PPUSH
15331: CALL 44240 0 5
15335: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
15336: LD_ADDR_EXP 33
15340: PUSH
15341: LD_EXP 33
15345: PPUSH
15346: LD_EXP 33
15350: PUSH
15351: LD_INT 1
15353: PLUS
15354: PPUSH
15355: LD_VAR 0 9
15359: PPUSH
15360: CALL_OW 1
15364: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
15365: LD_VAR 0 3
15369: PUSH
15370: LD_EXP 3
15374: PUSH
15375: LD_INT 2
15377: ARRAY
15378: EQUAL
15379: IFFALSE 15879
// begin if un in arForce then
15381: LD_VAR 0 1
15385: PUSH
15386: LD_EXP 51
15390: IN
15391: IFFALSE 15409
// arForce := arForce diff un ;
15393: LD_ADDR_EXP 51
15397: PUSH
15398: LD_EXP 51
15402: PUSH
15403: LD_VAR 0 1
15407: DIFF
15408: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
15409: LD_VAR 0 1
15413: PPUSH
15414: CALL_OW 257
15418: PUSH
15419: LD_INT 3
15421: EQUAL
15422: PUSH
15423: LD_VAR 0 1
15427: PPUSH
15428: CALL_OW 110
15432: PUSH
15433: LD_INT 999
15435: LESS
15436: AND
15437: PUSH
15438: LD_EXP 48
15442: AND
15443: IFFALSE 15584
// begin if not IsOk ( arDep ) then
15445: LD_INT 32
15447: PPUSH
15448: CALL_OW 302
15452: NOT
15453: IFFALSE 15457
// exit ;
15455: GO 15951
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
15457: LD_ADDR_EXP 48
15461: PUSH
15462: LD_EXP 48
15466: PPUSH
15467: CALL 80854 0 1
15471: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
15472: LD_ADDR_OWVAR 20
15476: PUSH
15477: LD_EXP 3
15481: PUSH
15482: LD_INT 2
15484: ARRAY
15485: ST_TO_ADDR
// uc_nation := nation_arabian ;
15486: LD_ADDR_OWVAR 21
15490: PUSH
15491: LD_INT 2
15493: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15494: LD_INT 0
15496: PPUSH
15497: LD_INT 1
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: LD_INT 3
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PUSH
15511: LD_OWVAR 67
15515: ARRAY
15516: PPUSH
15517: CALL_OW 383
// un := CreateHuman ;
15521: LD_ADDR_VAR 0 1
15525: PUSH
15526: CALL_OW 44
15530: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_INT 178
15538: PPUSH
15539: LD_INT 2
15541: PPUSH
15542: LD_INT 0
15544: PPUSH
15545: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
15549: LD_VAR 0 1
15553: PPUSH
15554: LD_INT 204
15556: PPUSH
15557: LD_INT 35
15559: PPUSH
15560: CALL_OW 111
// arForce := Join ( arForce , un ) ;
15564: LD_ADDR_EXP 51
15568: PUSH
15569: LD_EXP 51
15573: PPUSH
15574: LD_VAR 0 1
15578: PPUSH
15579: CALL 79471 0 2
15583: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15584: LD_VAR 0 1
15588: PPUSH
15589: CALL_OW 247
15593: PUSH
15594: LD_INT 3
15596: EQUAL
15597: IFFALSE 15740
// begin btype := GetBType ( un ) ;
15599: LD_ADDR_VAR 0 11
15603: PUSH
15604: LD_VAR 0 1
15608: PPUSH
15609: CALL_OW 266
15613: ST_TO_ADDR
// if btype = b_barracks then
15614: LD_VAR 0 11
15618: PUSH
15619: LD_INT 5
15621: EQUAL
15622: IFFALSE 15632
// btype := b_armoury ;
15624: LD_ADDR_VAR 0 11
15628: PUSH
15629: LD_INT 4
15631: ST_TO_ADDR
// if btype = b_factory then
15632: LD_VAR 0 11
15636: PUSH
15637: LD_INT 3
15639: EQUAL
15640: IFFALSE 15650
// btype := b_workshop ;
15642: LD_ADDR_VAR 0 11
15646: PUSH
15647: LD_INT 2
15649: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15650: LD_VAR 0 11
15654: PUSH
15655: LD_INT 8
15657: PUSH
15658: LD_INT 7
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: IN
15665: IFFALSE 15675
// btype := b_lab ;
15667: LD_ADDR_VAR 0 11
15671: PUSH
15672: LD_INT 6
15674: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15675: LD_ADDR_EXP 44
15679: PUSH
15680: LD_EXP 44
15684: PPUSH
15685: LD_EXP 44
15689: PUSH
15690: LD_INT 1
15692: PLUS
15693: PPUSH
15694: LD_VAR 0 11
15698: PUSH
15699: LD_VAR 0 1
15703: PPUSH
15704: CALL_OW 250
15708: PUSH
15709: LD_VAR 0 1
15713: PPUSH
15714: CALL_OW 251
15718: PUSH
15719: LD_VAR 0 1
15723: PPUSH
15724: CALL_OW 254
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 1
15739: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 247
15749: PUSH
15750: LD_INT 2
15752: EQUAL
15753: IFFALSE 15879
// begin chassis := GetChassis ( un ) ;
15755: LD_ADDR_VAR 0 5
15759: PUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 265
15769: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15770: LD_ADDR_VAR 0 6
15774: PUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 262
15784: ST_TO_ADDR
// control := GetControl ( un ) ;
15785: LD_ADDR_VAR 0 7
15789: PUSH
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL_OW 263
15799: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
15800: LD_ADDR_VAR 0 8
15804: PUSH
15805: LD_VAR 0 1
15809: PPUSH
15810: CALL_OW 264
15814: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
15815: LD_ADDR_VAR 0 9
15819: PUSH
15820: LD_VAR 0 10
15824: PPUSH
15825: LD_VAR 0 5
15829: PPUSH
15830: LD_VAR 0 6
15834: PPUSH
15835: LD_VAR 0 7
15839: PPUSH
15840: LD_VAR 0 8
15844: PPUSH
15845: CALL 44240 0 5
15849: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
15850: LD_ADDR_EXP 43
15854: PUSH
15855: LD_EXP 43
15859: PPUSH
15860: LD_EXP 43
15864: PUSH
15865: LD_INT 1
15867: PLUS
15868: PPUSH
15869: LD_VAR 0 9
15873: PPUSH
15874: CALL_OW 1
15878: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
15879: LD_EXP 23
15883: PUSH
15884: LD_EXP 15
15888: AND
15889: IFFALSE 15951
// if un in multi_commanders then
15891: LD_VAR 0 1
15895: PUSH
15896: LD_EXP 23
15900: IN
15901: IFFALSE 15951
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
15903: LD_ADDR_EXP 24
15907: PUSH
15908: LD_EXP 24
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 1
15925: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
15926: LD_ADDR_EXP 23
15930: PUSH
15931: LD_EXP 23
15935: PUSH
15936: LD_VAR 0 1
15940: DIFF
15941: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
15942: LD_VAR 0 3
15946: PPUSH
15947: CALL 4428 0 1
// end ; end ;
15951: PPOPN 11
15953: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
15958: PPUSH
15959: PPUSH
// begin side := GetSide ( building ) ;
15960: LD_ADDR_VAR 0 4
15964: PUSH
15965: LD_VAR 0 1
15969: PPUSH
15970: CALL_OW 255
15974: ST_TO_ADDR
// if multi_sides [ side ] then
15975: LD_EXP 6
15979: PUSH
15980: LD_VAR 0 4
15984: ARRAY
15985: IFFALSE 16006
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
15987: LD_VAR 0 4
15991: PPUSH
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 266
16001: PPUSH
16002: CALL 4998 0 2
// if side = botSides [ 1 ] then
16006: LD_VAR 0 4
16010: PUSH
16011: LD_EXP 3
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: EQUAL
16020: IFFALSE 16104
// begin amBuildings := Delete ( amBuildings , 1 ) ;
16022: LD_ADDR_EXP 34
16026: PUSH
16027: LD_EXP 34
16031: PPUSH
16032: LD_INT 1
16034: PPUSH
16035: CALL_OW 3
16039: ST_TO_ADDR
// btype := GetBType ( building ) ;
16040: LD_ADDR_VAR 0 5
16044: PUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 266
16054: ST_TO_ADDR
// case btype of b_workshop :
16055: LD_VAR 0 5
16059: PUSH
16060: LD_INT 2
16062: DOUBLE
16063: EQUAL
16064: IFTRUE 16068
16066: GO 16080
16068: POP
// ComUpgrade ( building ) ; b_lab :
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 146
16078: GO 16104
16080: LD_INT 6
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16088
16086: GO 16103
16088: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16089: LD_VAR 0 1
16093: PPUSH
16094: LD_INT 10
16096: PPUSH
16097: CALL_OW 207
// end ; end ;
16101: GO 16104
16103: POP
// end ; if side = botSides [ 2 ] then
16104: LD_VAR 0 4
16108: PUSH
16109: LD_EXP 3
16113: PUSH
16114: LD_INT 2
16116: ARRAY
16117: EQUAL
16118: IFFALSE 16214
// begin arBuildings := Delete ( arBuildings , 1 ) ;
16120: LD_ADDR_EXP 44
16124: PUSH
16125: LD_EXP 44
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 3
16137: ST_TO_ADDR
// btype := GetBType ( building ) ;
16138: LD_ADDR_VAR 0 5
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 266
16152: ST_TO_ADDR
// case btype of b_workshop :
16153: LD_VAR 0 5
16157: PUSH
16158: LD_INT 2
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16178
16166: POP
// ComUpgrade ( building ) ; b_lab :
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 146
16176: GO 16214
16178: LD_INT 6
16180: DOUBLE
16181: EQUAL
16182: IFTRUE 16186
16184: GO 16213
16186: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16187: LD_VAR 0 1
16191: PPUSH
16192: LD_INT 10
16194: PPUSH
16195: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
16199: LD_VAR 0 1
16203: PPUSH
16204: LD_INT 15
16206: PPUSH
16207: CALL_OW 207
// end ; end ;
16211: GO 16214
16213: POP
// end ; end ;
16214: PPOPN 5
16216: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
16217: LD_VAR 0 2
16221: PPUSH
16222: CALL_OW 255
16226: PUSH
16227: LD_EXP 3
16231: IN
16232: NOT
16233: IFFALSE 16237
// exit ;
16235: GO 16400
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
16237: LD_VAR 0 2
16241: PUSH
16242: LD_EXP 52
16246: IN
16247: PUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 266
16257: PUSH
16258: LD_INT 31
16260: EQUAL
16261: AND
16262: IFFALSE 16286
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
16264: LD_VAR 0 2
16268: PPUSH
16269: LD_INT 215
16271: PPUSH
16272: LD_INT 102
16274: PPUSH
16275: CALL_OW 428
16279: PPUSH
16280: CALL_OW 120
// exit ;
16284: GO 16400
// end ; if HexInfo ( 44 , 78 ) then
16286: LD_INT 44
16288: PPUSH
16289: LD_INT 78
16291: PPUSH
16292: CALL_OW 428
16296: IFFALSE 16335
// begin ComMoveXY ( unit , 26 , 40 ) ;
16298: LD_VAR 0 2
16302: PPUSH
16303: LD_INT 26
16305: PPUSH
16306: LD_INT 40
16308: PPUSH
16309: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
16313: LD_ADDR_EXP 39
16317: PUSH
16318: LD_EXP 39
16322: PPUSH
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL 79471 0 2
16332: ST_TO_ADDR
// exit ;
16333: GO 16400
// end ; if GetX ( building ) > 71 then
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 250
16344: PUSH
16345: LD_INT 71
16347: GREATER
16348: IFFALSE 16400
// begin ComMoveXY ( unit , 69 , 39 ) ;
16350: LD_VAR 0 2
16354: PPUSH
16355: LD_INT 69
16357: PPUSH
16358: LD_INT 39
16360: PPUSH
16361: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 26
16372: PPUSH
16373: LD_INT 40
16375: PPUSH
16376: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
16380: LD_ADDR_EXP 39
16384: PUSH
16385: LD_EXP 39
16389: PPUSH
16390: LD_VAR 0 2
16394: PPUSH
16395: CALL 79471 0 2
16399: ST_TO_ADDR
// end ; end ;
16400: PPOPN 2
16402: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
16403: LD_INT 0
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
16411: LD_VAR 0 1
16415: PPUSH
16416: LD_VAR 0 2
16420: PPUSH
16421: CALL 37006 0 2
// side := GetSide ( vehicle ) ;
16425: LD_ADDR_VAR 0 4
16429: PUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 255
16439: ST_TO_ADDR
// if multi_sides [ side ] then
16440: LD_EXP 6
16444: PUSH
16445: LD_VAR 0 4
16449: ARRAY
16450: IFFALSE 16461
// MultiplayerEvent_Produced ( side ) ;
16452: LD_VAR 0 4
16456: PPUSH
16457: CALL 4910 0 1
// if side = botSides [ 1 ] then
16461: LD_VAR 0 4
16465: PUSH
16466: LD_EXP 3
16470: PUSH
16471: LD_INT 1
16473: ARRAY
16474: EQUAL
16475: IFFALSE 16611
// begin driver := IsDrivenBy ( vehicle ) ;
16477: LD_ADDR_VAR 0 8
16481: PUSH
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 311
16491: ST_TO_ADDR
// if driver then
16492: LD_VAR 0 8
16496: IFFALSE 16530
// begin SetTag ( driver , tMech ) ;
16498: LD_VAR 0 8
16502: PPUSH
16503: LD_INT 7
16505: PPUSH
16506: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
16510: LD_ADDR_EXP 37
16514: PUSH
16515: LD_EXP 37
16519: PPUSH
16520: LD_VAR 0 8
16524: PPUSH
16525: CALL 79471 0 2
16529: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
16530: LD_EXP 38
16534: PUSH
16535: LD_EXP 35
16539: PPUSH
16540: CALL 43882 0 1
16544: GREATER
16545: PUSH
16546: LD_VAR 0 1
16550: PPUSH
16551: CALL_OW 266
16555: PUSH
16556: LD_INT 12
16558: PUSH
16559: LD_INT 13
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: IN
16566: OR
16567: IFFALSE 16591
// amVehicles := Join ( amVehicles , vehicle ) else
16569: LD_ADDR_EXP 35
16573: PUSH
16574: LD_EXP 35
16578: PPUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL 79471 0 2
16588: ST_TO_ADDR
16589: GO 16611
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
16591: LD_ADDR_EXP 36
16595: PUSH
16596: LD_EXP 36
16600: PPUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL 79471 0 2
16610: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
16611: LD_VAR 0 4
16615: PUSH
16616: LD_EXP 3
16620: PUSH
16621: LD_INT 2
16623: ARRAY
16624: EQUAL
16625: IFFALSE 16761
// begin driver := IsDrivenBy ( vehicle ) ;
16627: LD_ADDR_VAR 0 8
16631: PUSH
16632: LD_VAR 0 1
16636: PPUSH
16637: CALL_OW 311
16641: ST_TO_ADDR
// if driver then
16642: LD_VAR 0 8
16646: IFFALSE 16680
// begin SetTag ( driver , tMech ) ;
16648: LD_VAR 0 8
16652: PPUSH
16653: LD_INT 7
16655: PPUSH
16656: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
16660: LD_ADDR_EXP 47
16664: PUSH
16665: LD_EXP 47
16669: PPUSH
16670: LD_VAR 0 8
16674: PPUSH
16675: CALL 79471 0 2
16679: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
16680: LD_EXP 49
16684: PUSH
16685: LD_EXP 45
16689: PPUSH
16690: CALL 43882 0 1
16694: GREATER
16695: PUSH
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 266
16705: PUSH
16706: LD_INT 32
16708: PUSH
16709: LD_INT 88
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: IN
16716: OR
16717: IFFALSE 16741
// arVehicles := Join ( arVehicles , vehicle ) else
16719: LD_ADDR_EXP 45
16723: PUSH
16724: LD_EXP 45
16728: PPUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL 79471 0 2
16738: ST_TO_ADDR
16739: GO 16761
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
16741: LD_ADDR_EXP 46
16745: PUSH
16746: LD_EXP 46
16750: PPUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL 79471 0 2
16760: ST_TO_ADDR
// end ; end ;
16761: PPOPN 8
16763: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 110
16773: PUSH
16774: LD_INT 7
16776: EQUAL
16777: IFFALSE 16791
// SetTag ( driver , 0 ) ;
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_INT 0
16786: PPUSH
16787: CALL_OW 109
// end ;
16791: PPOPN 4
16793: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
16794: LD_VAR 0 2
16798: PPUSH
16799: CALL_OW 255
16803: PUSH
16804: LD_EXP 3
16808: PUSH
16809: LD_INT 1
16811: ARRAY
16812: EQUAL
16813: IFFALSE 16843
// if tech in amTech then
16815: LD_VAR 0 1
16819: PUSH
16820: LD_EXP 32
16824: IN
16825: IFFALSE 16843
// amTech := amTech diff tech ;
16827: LD_ADDR_EXP 32
16831: PUSH
16832: LD_EXP 32
16836: PUSH
16837: LD_VAR 0 1
16841: DIFF
16842: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
16843: LD_VAR 0 2
16847: PPUSH
16848: CALL_OW 255
16852: PUSH
16853: LD_EXP 3
16857: PUSH
16858: LD_INT 2
16860: ARRAY
16861: EQUAL
16862: IFFALSE 16892
// if tech in arTech then
16864: LD_VAR 0 1
16868: PUSH
16869: LD_EXP 42
16873: IN
16874: IFFALSE 16892
// arTech := arTech diff tech ;
16876: LD_ADDR_EXP 42
16880: PUSH
16881: LD_EXP 42
16885: PUSH
16886: LD_VAR 0 1
16890: DIFF
16891: ST_TO_ADDR
// end ; end_of_file
16892: PPOPN 2
16894: END
// every 10 10$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
16895: LD_INT 32
16897: PPUSH
16898: CALL_OW 302
16902: PUSH
16903: LD_INT 32
16905: PPUSH
16906: CALL_OW 255
16910: PUSH
16911: LD_EXP 3
16915: PUSH
16916: LD_INT 2
16918: ARRAY
16919: EQUAL
16920: AND
16921: IFFALSE 16958
16923: GO 16925
16925: DISABLE
// begin activeArabAttacks := true ;
16926: LD_ADDR_EXP 4
16930: PUSH
16931: LD_INT 1
16933: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
16934: LD_INT 73500
16936: PUSH
16937: LD_INT 2100
16939: PUSH
16940: LD_OWVAR 67
16944: MUL
16945: MINUS
16946: PPUSH
16947: CALL_OW 67
// ArabAttack ( 0 ) ;
16951: LD_INT 0
16953: PPUSH
16954: CALL 17056 0 1
// end ;
16958: END
// every 15 15$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
16959: LD_INT 1
16961: PPUSH
16962: CALL_OW 302
16966: PUSH
16967: LD_INT 1
16969: PPUSH
16970: CALL_OW 255
16974: PUSH
16975: LD_EXP 3
16979: PUSH
16980: LD_INT 1
16982: ARRAY
16983: EQUAL
16984: AND
16985: IFFALSE 17014
16987: GO 16989
16989: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
16990: LD_INT 10500
16992: PUSH
16993: LD_INT 2100
16995: PUSH
16996: LD_OWVAR 67
17000: MUL
17001: MINUS
17002: PPUSH
17003: CALL_OW 67
// AmericanAttack ( 0 ) ;
17007: LD_INT 0
17009: PPUSH
17010: CALL 19233 0 1
// end ;
17014: END
// every 45 45$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 302
17022: PUSH
17023: LD_INT 1
17025: PPUSH
17026: CALL_OW 255
17030: PUSH
17031: LD_EXP 3
17035: PUSH
17036: LD_INT 1
17038: ARRAY
17039: EQUAL
17040: AND
17041: IFFALSE 17055
17043: GO 17045
17045: DISABLE
// AmericanAttack ( Difficulty ) ;
17046: LD_OWVAR 67
17050: PPUSH
17051: CALL 19233 0 1
17055: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
17056: LD_INT 0
17058: PPUSH
17059: PPUSH
17060: PPUSH
17061: PPUSH
17062: PPUSH
// uc_side := botSides [ 2 ] ;
17063: LD_ADDR_OWVAR 20
17067: PUSH
17068: LD_EXP 3
17072: PUSH
17073: LD_INT 2
17075: ARRAY
17076: ST_TO_ADDR
// uc_nation := nation_arabian ;
17077: LD_ADDR_OWVAR 21
17081: PUSH
17082: LD_INT 2
17084: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17085: LD_ADDR_VAR 0 4
17089: PUSH
17090: LD_INT 3
17092: PUSH
17093: LD_INT 4
17095: PUSH
17096: LD_INT 5
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: LD_OWVAR 67
17108: ARRAY
17109: ST_TO_ADDR
// arAttackersInf := [ ] ;
17110: LD_ADDR_EXP 53
17114: PUSH
17115: EMPTY
17116: ST_TO_ADDR
// arAttackersVeh := [ ] ;
17117: LD_ADDR_EXP 54
17121: PUSH
17122: EMPTY
17123: ST_TO_ADDR
// InitHC_All ( ) ;
17124: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
17128: LD_ADDR_VAR 0 3
17132: PUSH
17133: DOUBLE
17134: LD_INT 1
17136: DEC
17137: ST_TO_ADDR
17138: LD_INT 3
17140: PUSH
17141: LD_INT 4
17143: PUSH
17144: LD_INT 5
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_OWVAR 67
17156: ARRAY
17157: PUSH
17158: LD_VAR 0 1
17162: PLUS
17163: PUSH
17164: FOR_TO
17165: IFFALSE 17267
// begin PrepareSoldier ( false , skill ) ;
17167: LD_INT 0
17169: PPUSH
17170: LD_VAR 0 4
17174: PPUSH
17175: CALL_OW 381
// un := CreateHuman ;
17179: LD_ADDR_VAR 0 5
17183: PUSH
17184: CALL_OW 44
17188: ST_TO_ADDR
// if i mod 2 = 0 then
17189: LD_VAR 0 3
17193: PUSH
17194: LD_INT 2
17196: MOD
17197: PUSH
17198: LD_INT 0
17200: EQUAL
17201: IFFALSE 17215
// SetClass ( un , class_mortar ) ;
17203: LD_VAR 0 5
17207: PPUSH
17208: LD_INT 8
17210: PPUSH
17211: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
17215: LD_VAR 0 5
17219: PPUSH
17220: LD_INT 25
17222: PPUSH
17223: LD_INT 0
17225: PPUSH
17226: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
17230: LD_ADDR_EXP 53
17234: PUSH
17235: LD_EXP 53
17239: PPUSH
17240: LD_VAR 0 5
17244: PPUSH
17245: CALL 79471 0 2
17249: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
17250: LD_VAR 0 5
17254: PPUSH
17255: LD_INT 230
17257: PPUSH
17258: LD_INT 143
17260: PPUSH
17261: CALL_OW 114
// end ;
17265: GO 17164
17267: POP
17268: POP
// for i := 1 to 3 + v do
17269: LD_ADDR_VAR 0 3
17273: PUSH
17274: DOUBLE
17275: LD_INT 1
17277: DEC
17278: ST_TO_ADDR
17279: LD_INT 3
17281: PUSH
17282: LD_VAR 0 1
17286: PLUS
17287: PUSH
17288: FOR_TO
17289: IFFALSE 17453
// begin PrepareMechanic ( false , skill ) ;
17291: LD_INT 0
17293: PPUSH
17294: LD_VAR 0 4
17298: PPUSH
17299: CALL_OW 383
// un := CreateHuman ;
17303: LD_ADDR_VAR 0 5
17307: PUSH
17308: CALL_OW 44
17312: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17313: LD_VAR 0 5
17317: PPUSH
17318: LD_INT 999
17320: PPUSH
17321: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
17325: LD_INT 14
17327: PPUSH
17328: LD_INT 1
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: LD_INT 27
17336: PUSH
17337: LD_INT 25
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_VAR 0 3
17348: PUSH
17349: LD_INT 2
17351: MOD
17352: PUSH
17353: LD_INT 1
17355: PLUS
17356: ARRAY
17357: PPUSH
17358: LD_INT 80
17360: PPUSH
17361: CALL 46620 0 5
// veh := CreateVehicle ;
17365: LD_ADDR_VAR 0 6
17369: PUSH
17370: CALL_OW 45
17374: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17375: LD_VAR 0 6
17379: PPUSH
17380: LD_INT 5
17382: PPUSH
17383: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17387: LD_VAR 0 6
17391: PPUSH
17392: LD_INT 26
17394: PPUSH
17395: LD_INT 0
17397: PPUSH
17398: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17402: LD_VAR 0 5
17406: PPUSH
17407: LD_VAR 0 6
17411: PPUSH
17412: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
17416: LD_VAR 0 5
17420: PPUSH
17421: LD_INT 236
17423: PPUSH
17424: LD_INT 127
17426: PPUSH
17427: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17431: LD_ADDR_EXP 54
17435: PUSH
17436: LD_EXP 54
17440: PPUSH
17441: LD_VAR 0 6
17445: PPUSH
17446: CALL 79471 0 2
17450: ST_TO_ADDR
// end ;
17451: GO 17288
17453: POP
17454: POP
// wait ( 0 0$2 ) ;
17455: LD_INT 70
17457: PPUSH
17458: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: DOUBLE
17468: LD_INT 1
17470: DEC
17471: ST_TO_ADDR
17472: LD_INT 1
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: LD_INT 3
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: PUSH
17486: LD_OWVAR 67
17490: ARRAY
17491: PUSH
17492: FOR_TO
17493: IFFALSE 17636
// begin PrepareMechanic ( false , skill ) ;
17495: LD_INT 0
17497: PPUSH
17498: LD_VAR 0 4
17502: PPUSH
17503: CALL_OW 383
// un := CreateHuman ;
17507: LD_ADDR_VAR 0 5
17511: PUSH
17512: CALL_OW 44
17516: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17517: LD_VAR 0 5
17521: PPUSH
17522: LD_INT 999
17524: PPUSH
17525: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
17529: LD_INT 14
17531: PPUSH
17532: LD_INT 1
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: LD_INT 26
17540: PPUSH
17541: LD_INT 80
17543: PPUSH
17544: CALL 46620 0 5
// veh := CreateVehicle ;
17548: LD_ADDR_VAR 0 6
17552: PUSH
17553: CALL_OW 45
17557: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17558: LD_VAR 0 6
17562: PPUSH
17563: LD_INT 5
17565: PPUSH
17566: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17570: LD_VAR 0 6
17574: PPUSH
17575: LD_INT 26
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17585: LD_VAR 0 5
17589: PPUSH
17590: LD_VAR 0 6
17594: PPUSH
17595: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
17599: LD_VAR 0 5
17603: PPUSH
17604: LD_INT 236
17606: PPUSH
17607: LD_INT 127
17609: PPUSH
17610: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17614: LD_ADDR_EXP 54
17618: PUSH
17619: LD_EXP 54
17623: PPUSH
17624: LD_VAR 0 6
17628: PPUSH
17629: CALL 79471 0 2
17633: ST_TO_ADDR
// end ;
17634: GO 17492
17636: POP
17637: POP
// wait ( 0 0$2 ) ;
17638: LD_INT 70
17640: PPUSH
17641: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: DOUBLE
17651: LD_INT 1
17653: DEC
17654: ST_TO_ADDR
17655: LD_INT 1
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: LD_INT 2
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: LD_OWVAR 67
17673: ARRAY
17674: PUSH
17675: FOR_TO
17676: IFFALSE 17850
// begin PrepareMechanic ( false , skill ) ;
17678: LD_INT 0
17680: PPUSH
17681: LD_VAR 0 4
17685: PPUSH
17686: CALL_OW 383
// un := CreateHuman ;
17690: LD_ADDR_VAR 0 5
17694: PUSH
17695: CALL_OW 44
17699: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17700: LD_VAR 0 5
17704: PPUSH
17705: LD_INT 999
17707: PPUSH
17708: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
17712: LD_INT 14
17714: PPUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_INT 1
17720: PPUSH
17721: LD_INT 28
17723: PPUSH
17724: LD_INT 80
17726: PPUSH
17727: CALL 46620 0 5
// veh := CreateVehicle ;
17731: LD_ADDR_VAR 0 6
17735: PUSH
17736: CALL_OW 45
17740: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
17741: LD_VAR 0 6
17745: PPUSH
17746: LD_INT 4
17748: PPUSH
17749: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17753: LD_VAR 0 6
17757: PPUSH
17758: LD_INT 26
17760: PPUSH
17761: LD_INT 0
17763: PPUSH
17764: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17768: LD_VAR 0 5
17772: PPUSH
17773: LD_VAR 0 6
17777: PPUSH
17778: CALL_OW 52
// if i mod 2 = 0 then
17782: LD_VAR 0 3
17786: PUSH
17787: LD_INT 2
17789: MOD
17790: PUSH
17791: LD_INT 0
17793: EQUAL
17794: IFFALSE 17813
// ComMoveXY ( un , 136 , 61 ) else
17796: LD_VAR 0 5
17800: PPUSH
17801: LD_INT 136
17803: PPUSH
17804: LD_INT 61
17806: PPUSH
17807: CALL_OW 111
17811: GO 17828
// ComMoveXY ( un , 137 , 41 ) ;
17813: LD_VAR 0 5
17817: PPUSH
17818: LD_INT 137
17820: PPUSH
17821: LD_INT 41
17823: PPUSH
17824: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17828: LD_ADDR_EXP 54
17832: PUSH
17833: LD_EXP 54
17837: PPUSH
17838: LD_VAR 0 6
17842: PPUSH
17843: CALL 79471 0 2
17847: ST_TO_ADDR
// end ;
17848: GO 17675
17850: POP
17851: POP
// end ;
17852: LD_VAR 0 2
17856: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
17857: LD_EXP 53
17861: IFFALSE 18388
17863: GO 17865
17865: DISABLE
17866: LD_INT 0
17868: PPUSH
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin enable ;
17872: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_EXP 53
17882: PPUSH
17883: LD_INT 50
17885: PUSH
17886: EMPTY
17887: LIST
17888: PPUSH
17889: CALL_OW 72
17893: ST_TO_ADDR
// arAttackersInf := [ ] ;
17894: LD_ADDR_EXP 53
17898: PUSH
17899: EMPTY
17900: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
17901: LD_VAR 0 2
17905: PPUSH
17906: LD_INT 173
17908: PPUSH
17909: LD_INT 139
17911: PPUSH
17912: CALL_OW 111
// wait ( 0 0$10 ) ;
17916: LD_INT 350
17918: PPUSH
17919: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_VAR 0 2
17932: PPUSH
17933: LD_INT 25
17935: PUSH
17936: LD_INT 1
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PPUSH
17943: CALL_OW 72
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18080
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
17951: LD_ADDR_VAR 0 3
17955: PUSH
17956: LD_INT 81
17958: PUSH
17959: LD_EXP 3
17963: PUSH
17964: LD_INT 2
17966: ARRAY
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 3
17974: PUSH
17975: LD_INT 120
17977: PUSH
17978: LD_INT 11
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 21
17994: PUSH
17995: LD_INT 2
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 69
18026: PPUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: CALL_OW 74
18036: ST_TO_ADDR
// if not nearest then
18037: LD_VAR 0 3
18041: NOT
18042: IFFALSE 18046
// break ;
18044: GO 18080
// SetTag ( nearest , tMined ) ;
18046: LD_VAR 0 3
18050: PPUSH
18051: LD_INT 11
18053: PPUSH
18054: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18058: LD_VAR 0 1
18062: PPUSH
18063: LD_INT 0
18065: PPUSH
18066: LD_INT 0
18068: PPUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: CALL_OW 192
// end ;
18078: GO 17948
18080: POP
18081: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18082: LD_ADDR_VAR 0 2
18086: PUSH
18087: LD_VAR 0 2
18091: PPUSH
18092: LD_INT 50
18094: PUSH
18095: EMPTY
18096: LIST
18097: PPUSH
18098: CALL_OW 72
18102: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
18103: LD_VAR 0 2
18107: PPUSH
18108: LD_INT 155
18110: PPUSH
18111: LD_INT 119
18113: PPUSH
18114: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
18118: LD_INT 70
18120: PPUSH
18121: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18125: LD_ADDR_VAR 0 2
18129: PUSH
18130: LD_VAR 0 2
18134: PPUSH
18135: LD_INT 50
18137: PUSH
18138: EMPTY
18139: LIST
18140: PPUSH
18141: CALL_OW 72
18145: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
18146: LD_ADDR_VAR 0 4
18150: PUSH
18151: LD_INT 81
18153: PUSH
18154: LD_EXP 3
18158: PUSH
18159: LD_INT 2
18161: ARRAY
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PPUSH
18167: CALL_OW 69
18171: ST_TO_ADDR
// for i in tmp do
18172: LD_ADDR_VAR 0 1
18176: PUSH
18177: LD_VAR 0 2
18181: PUSH
18182: FOR_IN
18183: IFFALSE 18379
// if GetClass ( i ) <> 1 then
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 257
18194: PUSH
18195: LD_INT 1
18197: NONEQUAL
18198: IFFALSE 18226
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18200: LD_VAR 0 1
18204: PPUSH
18205: LD_VAR 0 4
18209: PPUSH
18210: LD_VAR 0 1
18214: PPUSH
18215: CALL_OW 74
18219: PPUSH
18220: CALL_OW 115
18224: GO 18377
// if not HasTask ( i ) then
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 314
18235: NOT
18236: IFFALSE 18377
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18238: LD_ADDR_VAR 0 3
18242: PUSH
18243: LD_VAR 0 4
18247: PPUSH
18248: LD_INT 3
18250: PUSH
18251: LD_INT 120
18253: PUSH
18254: LD_INT 11
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: LD_INT 21
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 21
18280: PUSH
18281: LD_INT 3
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 72
18301: PPUSH
18302: LD_VAR 0 1
18306: PPUSH
18307: CALL_OW 74
18311: ST_TO_ADDR
// if not nearest then
18312: LD_VAR 0 3
18316: NOT
18317: IFFALSE 18345
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18319: LD_VAR 0 1
18323: PPUSH
18324: LD_VAR 0 4
18328: PPUSH
18329: LD_VAR 0 1
18333: PPUSH
18334: CALL_OW 74
18338: PPUSH
18339: CALL_OW 115
18343: GO 18377
// begin SetTag ( nearest , tMined ) ;
18345: LD_VAR 0 3
18349: PPUSH
18350: LD_INT 11
18352: PPUSH
18353: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18357: LD_VAR 0 1
18361: PPUSH
18362: LD_INT 0
18364: PPUSH
18365: LD_INT 0
18367: PPUSH
18368: LD_VAR 0 3
18372: PPUSH
18373: CALL_OW 132
// end ; end ;
18377: GO 18182
18379: POP
18380: POP
// until not tmp ;
18381: LD_VAR 0 2
18385: NOT
18386: IFFALSE 18118
// end ;
18388: PPOPN 4
18390: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
18391: LD_EXP 54
18395: IFFALSE 18507
18397: GO 18399
18399: DISABLE
18400: LD_INT 0
18402: PPUSH
18403: PPUSH
// begin enable ;
18404: ENABLE
// tmp := arAttackersVeh ;
18405: LD_ADDR_VAR 0 2
18409: PUSH
18410: LD_EXP 54
18414: ST_TO_ADDR
// arAttackersVeh := [ ] ;
18415: LD_ADDR_EXP 54
18419: PUSH
18420: EMPTY
18421: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
18422: LD_INT 70
18424: PPUSH
18425: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18429: LD_ADDR_VAR 0 2
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 50
18441: PUSH
18442: EMPTY
18443: LIST
18444: PPUSH
18445: CALL_OW 72
18449: ST_TO_ADDR
// for i in tmp do
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_VAR 0 2
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18498
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 207
18470: PUSH
18471: LD_INT 125
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 185
18480: PUSH
18481: LD_INT 114
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PPUSH
18492: CALL 82075 0 2
18496: GO 18460
18498: POP
18499: POP
18500: LD_VAR 0 2
18504: NOT
18505: IFFALSE 18422
// end ;
18507: PPOPN 2
18509: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
18510: LD_EXP 46
18514: PUSH
18515: LD_EXP 4
18519: AND
18520: IFFALSE 19110
18522: GO 18524
18524: DISABLE
18525: LD_INT 0
18527: PPUSH
18528: PPUSH
18529: PPUSH
// begin enable ;
18530: ENABLE
// if not arVehiclesAtttackers then
18531: LD_EXP 46
18535: NOT
18536: IFFALSE 18540
// exit ;
18538: GO 19110
// for i in arVehiclesAtttackers do
18540: LD_ADDR_VAR 0 1
18544: PUSH
18545: LD_EXP 46
18549: PUSH
18550: FOR_IN
18551: IFFALSE 19108
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 302
18562: NOT
18563: PUSH
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 255
18573: PUSH
18574: LD_EXP 3
18578: PUSH
18579: LD_INT 2
18581: ARRAY
18582: NONEQUAL
18583: OR
18584: IFFALSE 18604
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
18586: LD_ADDR_EXP 46
18590: PUSH
18591: LD_EXP 46
18595: PUSH
18596: LD_VAR 0 1
18600: DIFF
18601: ST_TO_ADDR
// continue ;
18602: GO 18550
// end ; if GetTag ( i ) = 300 then
18604: LD_VAR 0 1
18608: PPUSH
18609: CALL_OW 110
18613: PUSH
18614: LD_INT 300
18616: EQUAL
18617: IFFALSE 18732
// begin if GetFuel ( i ) < 50 then
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 261
18628: PUSH
18629: LD_INT 50
18631: LESS
18632: IFFALSE 18691
// begin ComMoveXY ( i , 198 , 28 ) ;
18634: LD_VAR 0 1
18638: PPUSH
18639: LD_INT 198
18641: PPUSH
18642: LD_INT 28
18644: PPUSH
18645: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18649: LD_INT 35
18651: PPUSH
18652: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
18656: LD_VAR 0 1
18660: PPUSH
18661: LD_INT 198
18663: PPUSH
18664: LD_INT 28
18666: PPUSH
18667: CALL_OW 297
18671: PUSH
18672: LD_INT 4
18674: LESS
18675: IFFALSE 18649
// SetFuel ( i , 100 ) ;
18677: LD_VAR 0 1
18681: PPUSH
18682: LD_INT 100
18684: PPUSH
18685: CALL_OW 240
// end else
18689: GO 18732
// if not IsInArea ( i , arParkingArea ) then
18691: LD_VAR 0 1
18695: PPUSH
18696: LD_INT 28
18698: PPUSH
18699: CALL_OW 308
18703: NOT
18704: IFFALSE 18720
// ComMoveToArea ( i , arParkingArea ) else
18706: LD_VAR 0 1
18710: PPUSH
18711: LD_INT 28
18713: PPUSH
18714: CALL_OW 113
18718: GO 18732
// SetTag ( i , 301 ) ;
18720: LD_VAR 0 1
18724: PPUSH
18725: LD_INT 301
18727: PPUSH
18728: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL_OW 110
18741: PUSH
18742: LD_INT 301
18744: EQUAL
18745: IFFALSE 18887
// begin if GetLives ( i ) < 1000 then
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 256
18756: PUSH
18757: LD_INT 1000
18759: LESS
18760: IFFALSE 18864
// begin if not IsDrivenBy ( i ) then
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 311
18771: NOT
18772: IFFALSE 18776
// continue ;
18774: GO 18550
// mech := IsDrivenBy ( i ) ;
18776: LD_ADDR_VAR 0 2
18780: PUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 311
18790: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
18791: LD_VAR 0 2
18795: PPUSH
18796: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
18800: LD_VAR 0 2
18804: PPUSH
18805: LD_VAR 0 1
18809: PPUSH
18810: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
18814: LD_INT 35
18816: PPUSH
18817: CALL_OW 67
// until GetLives ( i ) = 1000 ;
18821: LD_VAR 0 1
18825: PPUSH
18826: CALL_OW 256
18830: PUSH
18831: LD_INT 1000
18833: EQUAL
18834: IFFALSE 18814
// SetLives ( mech , 1000 ) ;
18836: LD_VAR 0 2
18840: PPUSH
18841: LD_INT 1000
18843: PPUSH
18844: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
18848: LD_VAR 0 2
18852: PPUSH
18853: LD_VAR 0 1
18857: PPUSH
18858: CALL_OW 120
// end else
18862: GO 18887
// if IsDrivenBy ( i ) then
18864: LD_VAR 0 1
18868: PPUSH
18869: CALL_OW 311
18873: IFFALSE 18887
// SetTag ( i , 0 ) ;
18875: LD_VAR 0 1
18879: PPUSH
18880: LD_INT 0
18882: PPUSH
18883: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
18887: LD_VAR 0 1
18891: PPUSH
18892: CALL_OW 110
18896: PUSH
18897: LD_INT 300
18899: LESS
18900: IFFALSE 19106
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
18902: LD_ADDR_VAR 0 3
18906: PUSH
18907: LD_INT 5
18909: PPUSH
18910: LD_INT 81
18912: PUSH
18913: LD_EXP 3
18917: PUSH
18918: LD_INT 2
18920: ARRAY
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PPUSH
18926: CALL_OW 70
18930: ST_TO_ADDR
// if GetLives ( i ) < 650 then
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 256
18940: PUSH
18941: LD_INT 650
18943: LESS
18944: IFFALSE 18969
// begin ComStop ( i ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 141
// SetTag ( i , 300 ) ;
18955: LD_VAR 0 1
18959: PPUSH
18960: LD_INT 300
18962: PPUSH
18963: CALL_OW 109
// continue ;
18967: GO 18550
// end ; if enemy then
18969: LD_VAR 0 3
18973: IFFALSE 19013
// begin if not HasTask ( i ) then
18975: LD_VAR 0 1
18979: PPUSH
18980: CALL_OW 314
18984: NOT
18985: IFFALSE 19011
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18987: LD_VAR 0 1
18991: PPUSH
18992: LD_VAR 0 3
18996: PPUSH
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL_OW 74
19006: PPUSH
19007: CALL_OW 115
// end else
19011: GO 19106
// if arVehiclesAtttackers then
19013: LD_EXP 46
19017: IFFALSE 19106
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19019: LD_ADDR_VAR 0 3
19023: PUSH
19024: LD_INT 81
19026: PUSH
19027: LD_EXP 3
19031: PUSH
19032: LD_INT 2
19034: ARRAY
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PPUSH
19040: CALL_OW 69
19044: ST_TO_ADDR
// if enemy then
19045: LD_VAR 0 3
19049: IFFALSE 19106
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_INT 215
19058: PUSH
19059: LD_INT 88
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 197
19068: PUSH
19069: LD_INT 90
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 178
19078: PUSH
19079: LD_INT 90
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 169
19088: PUSH
19089: LD_INT 104
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL 82075 0 2
// end ; end ; end ;
19106: GO 18550
19108: POP
19109: POP
// end ;
19110: PPOPN 3
19112: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19113: LD_INT 22
19115: PUSH
19116: LD_EXP 3
19120: PUSH
19121: LD_INT 2
19123: ARRAY
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 32
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PPUSH
19143: CALL_OW 69
19147: IFFALSE 19230
19149: GO 19151
19151: DISABLE
19152: LD_INT 0
19154: PPUSH
// begin enable ;
19155: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19156: LD_ADDR_VAR 0 1
19160: PUSH
19161: LD_INT 22
19163: PUSH
19164: LD_EXP 3
19168: PUSH
19169: LD_INT 2
19171: ARRAY
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 32
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: PUSH
19196: FOR_IN
19197: IFFALSE 19228
// if GetFuel ( i ) < 3 then
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 261
19208: PUSH
19209: LD_INT 3
19211: LESS
19212: IFFALSE 19226
// SetFuel ( i , 3 ) ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_INT 3
19221: PPUSH
19222: CALL_OW 240
19226: GO 19196
19228: POP
19229: POP
// end ;
19230: PPOPN 1
19232: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19233: LD_INT 0
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
// uc_side := botSides [ 1 ] ;
19240: LD_ADDR_OWVAR 20
19244: PUSH
19245: LD_EXP 3
19249: PUSH
19250: LD_INT 1
19252: ARRAY
19253: ST_TO_ADDR
// uc_nation := nation_american ;
19254: LD_ADDR_OWVAR 21
19258: PUSH
19259: LD_INT 1
19261: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19262: LD_ADDR_VAR 0 4
19266: PUSH
19267: LD_INT 3
19269: PUSH
19270: LD_INT 4
19272: PUSH
19273: LD_INT 5
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: PUSH
19281: LD_OWVAR 67
19285: ARRAY
19286: ST_TO_ADDR
// amAttackersInf := [ ] ;
19287: LD_ADDR_EXP 55
19291: PUSH
19292: EMPTY
19293: ST_TO_ADDR
// amAttackersVeh := [ ] ;
19294: LD_ADDR_EXP 56
19298: PUSH
19299: EMPTY
19300: ST_TO_ADDR
// InitHC_All ( ) ;
19301: CALL_OW 584
// for i := 1 to [ 2 , 4 , 5 ] [ Difficulty ] + v do
19305: LD_ADDR_VAR 0 3
19309: PUSH
19310: DOUBLE
19311: LD_INT 1
19313: DEC
19314: ST_TO_ADDR
19315: LD_INT 2
19317: PUSH
19318: LD_INT 4
19320: PUSH
19321: LD_INT 5
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: LD_OWVAR 67
19333: ARRAY
19334: PUSH
19335: LD_VAR 0 1
19339: PLUS
19340: PUSH
19341: FOR_TO
19342: IFFALSE 19418
// begin PrepareSoldier ( false , skill ) ;
19344: LD_INT 0
19346: PPUSH
19347: LD_VAR 0 4
19351: PPUSH
19352: CALL_OW 381
// un := CreateHuman ;
19356: LD_ADDR_VAR 0 5
19360: PUSH
19361: CALL_OW 44
19365: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
19366: LD_VAR 0 5
19370: PPUSH
19371: LD_INT 30
19373: PPUSH
19374: LD_INT 0
19376: PPUSH
19377: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
19381: LD_ADDR_EXP 55
19385: PUSH
19386: LD_EXP 55
19390: PPUSH
19391: LD_VAR 0 5
19395: PPUSH
19396: CALL 79471 0 2
19400: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
19401: LD_VAR 0 5
19405: PPUSH
19406: LD_INT 110
19408: PPUSH
19409: LD_INT 129
19411: PPUSH
19412: CALL_OW 114
// end ;
19416: GO 19341
19418: POP
19419: POP
// for i := 1 to 2 + v do
19420: LD_ADDR_VAR 0 3
19424: PUSH
19425: DOUBLE
19426: LD_INT 1
19428: DEC
19429: ST_TO_ADDR
19430: LD_INT 2
19432: PUSH
19433: LD_VAR 0 1
19437: PLUS
19438: PUSH
19439: FOR_TO
19440: IFFALSE 19608
// begin PrepareMechanic ( false , skill ) ;
19442: LD_INT 0
19444: PPUSH
19445: LD_VAR 0 4
19449: PPUSH
19450: CALL_OW 383
// un := CreateHuman ;
19454: LD_ADDR_VAR 0 5
19458: PUSH
19459: CALL_OW 44
19463: ST_TO_ADDR
// SetTag ( un , 999 ) ;
19464: LD_VAR 0 5
19468: PPUSH
19469: LD_INT 999
19471: PPUSH
19472: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
19476: LD_INT 3
19478: PPUSH
19479: LD_INT 1
19481: PPUSH
19482: LD_INT 1
19484: PPUSH
19485: LD_INT 3
19487: PUSH
19488: LD_INT 5
19490: PUSH
19491: LD_INT 4
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: PUSH
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 3
19506: MOD
19507: PUSH
19508: LD_INT 1
19510: PLUS
19511: ARRAY
19512: PPUSH
19513: LD_INT 80
19515: PPUSH
19516: CALL 46620 0 5
// veh := CreateVehicle ;
19520: LD_ADDR_VAR 0 6
19524: PUSH
19525: CALL_OW 45
19529: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
19530: LD_VAR 0 6
19534: PPUSH
19535: LD_INT 0
19537: PPUSH
19538: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
19542: LD_VAR 0 6
19546: PPUSH
19547: LD_INT 31
19549: PPUSH
19550: LD_INT 0
19552: PPUSH
19553: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
19557: LD_VAR 0 5
19561: PPUSH
19562: LD_VAR 0 6
19566: PPUSH
19567: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
19571: LD_VAR 0 5
19575: PPUSH
19576: LD_INT 96
19578: PPUSH
19579: LD_INT 137
19581: PPUSH
19582: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
19586: LD_ADDR_EXP 56
19590: PUSH
19591: LD_EXP 56
19595: PPUSH
19596: LD_VAR 0 6
19600: PPUSH
19601: CALL 79471 0 2
19605: ST_TO_ADDR
// end ;
19606: GO 19439
19608: POP
19609: POP
// end ;
19610: LD_VAR 0 2
19614: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
19615: LD_EXP 56
19619: IFFALSE 19744
19621: GO 19623
19623: DISABLE
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
// begin enable ;
19628: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_EXP 56
19638: PUSH
19639: LD_EXP 55
19643: UNION
19644: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19645: LD_ADDR_EXP 54
19649: PUSH
19650: EMPTY
19651: ST_TO_ADDR
// amAttackersInf := [ ] ;
19652: LD_ADDR_EXP 55
19656: PUSH
19657: EMPTY
19658: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19659: LD_INT 70
19661: PPUSH
19662: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: LD_INT 50
19678: PUSH
19679: EMPTY
19680: LIST
19681: PPUSH
19682: CALL_OW 72
19686: ST_TO_ADDR
// for i in tmp do
19687: LD_ADDR_VAR 0 1
19691: PUSH
19692: LD_VAR 0 2
19696: PUSH
19697: FOR_IN
19698: IFFALSE 19735
// AgressiveMove ( i , [ [ 99 , 136 ] , [ 88 , 110 ] ] ) until not tmp ;
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_INT 99
19707: PUSH
19708: LD_INT 136
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 88
19717: PUSH
19718: LD_INT 110
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PPUSH
19729: CALL 82075 0 2
19733: GO 19697
19735: POP
19736: POP
19737: LD_VAR 0 2
19741: NOT
19742: IFFALSE 19659
// end ;
19744: PPOPN 2
19746: END
// every 0 0$1 trigger amVehiclesAtttackers do var i , mech , enemy ;
19747: LD_EXP 36
19751: IFFALSE 20330
19753: GO 19755
19755: DISABLE
19756: LD_INT 0
19758: PPUSH
19759: PPUSH
19760: PPUSH
// begin enable ;
19761: ENABLE
// if not amVehiclesAtttackers then
19762: LD_EXP 36
19766: NOT
19767: IFFALSE 19771
// exit ;
19769: GO 20330
// for i in amVehiclesAtttackers do
19771: LD_ADDR_VAR 0 1
19775: PUSH
19776: LD_EXP 36
19780: PUSH
19781: FOR_IN
19782: IFFALSE 20328
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
19784: LD_VAR 0 1
19788: PPUSH
19789: CALL_OW 302
19793: NOT
19794: PUSH
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 255
19804: PUSH
19805: LD_EXP 3
19809: PUSH
19810: LD_INT 1
19812: ARRAY
19813: NONEQUAL
19814: OR
19815: IFFALSE 19835
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
19817: LD_ADDR_EXP 36
19821: PUSH
19822: LD_EXP 36
19826: PUSH
19827: LD_VAR 0 1
19831: DIFF
19832: ST_TO_ADDR
// continue ;
19833: GO 19781
// end ; if GetTag ( i ) = 300 then
19835: LD_VAR 0 1
19839: PPUSH
19840: CALL_OW 110
19844: PUSH
19845: LD_INT 300
19847: EQUAL
19848: IFFALSE 19963
// begin if GetFuel ( i ) < 50 then
19850: LD_VAR 0 1
19854: PPUSH
19855: CALL_OW 261
19859: PUSH
19860: LD_INT 50
19862: LESS
19863: IFFALSE 19922
// begin ComMoveXY ( i , 24 , 36 ) ;
19865: LD_VAR 0 1
19869: PPUSH
19870: LD_INT 24
19872: PPUSH
19873: LD_INT 36
19875: PPUSH
19876: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19880: LD_INT 35
19882: PPUSH
19883: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
19887: LD_VAR 0 1
19891: PPUSH
19892: LD_INT 24
19894: PPUSH
19895: LD_INT 36
19897: PPUSH
19898: CALL_OW 297
19902: PUSH
19903: LD_INT 4
19905: LESS
19906: IFFALSE 19880
// SetFuel ( i , 100 ) ;
19908: LD_VAR 0 1
19912: PPUSH
19913: LD_INT 100
19915: PPUSH
19916: CALL_OW 240
// end else
19920: GO 19963
// if not IsInArea ( i , amParkingArea ) then
19922: LD_VAR 0 1
19926: PPUSH
19927: LD_INT 27
19929: PPUSH
19930: CALL_OW 308
19934: NOT
19935: IFFALSE 19951
// ComMoveToArea ( i , amParkingArea ) else
19937: LD_VAR 0 1
19941: PPUSH
19942: LD_INT 27
19944: PPUSH
19945: CALL_OW 113
19949: GO 19963
// SetTag ( i , 301 ) ;
19951: LD_VAR 0 1
19955: PPUSH
19956: LD_INT 301
19958: PPUSH
19959: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19963: LD_VAR 0 1
19967: PPUSH
19968: CALL_OW 110
19972: PUSH
19973: LD_INT 301
19975: EQUAL
19976: IFFALSE 20118
// begin if GetLives ( i ) < 1000 then
19978: LD_VAR 0 1
19982: PPUSH
19983: CALL_OW 256
19987: PUSH
19988: LD_INT 1000
19990: LESS
19991: IFFALSE 20095
// begin if not IsDrivenBy ( i ) then
19993: LD_VAR 0 1
19997: PPUSH
19998: CALL_OW 311
20002: NOT
20003: IFFALSE 20007
// continue ;
20005: GO 19781
// mech := IsDrivenBy ( i ) ;
20007: LD_ADDR_VAR 0 2
20011: PUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 311
20021: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20022: LD_VAR 0 2
20026: PPUSH
20027: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20031: LD_VAR 0 2
20035: PPUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20045: LD_INT 35
20047: PPUSH
20048: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20052: LD_VAR 0 1
20056: PPUSH
20057: CALL_OW 256
20061: PUSH
20062: LD_INT 1000
20064: EQUAL
20065: IFFALSE 20045
// SetLives ( mech , 1000 ) ;
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_INT 1000
20074: PPUSH
20075: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20079: LD_VAR 0 2
20083: PPUSH
20084: LD_VAR 0 1
20088: PPUSH
20089: CALL_OW 120
// end else
20093: GO 20118
// if IsDrivenBy ( i ) then
20095: LD_VAR 0 1
20099: PPUSH
20100: CALL_OW 311
20104: IFFALSE 20118
// SetTag ( i , 0 ) ;
20106: LD_VAR 0 1
20110: PPUSH
20111: LD_INT 0
20113: PPUSH
20114: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20118: LD_VAR 0 1
20122: PPUSH
20123: CALL_OW 110
20127: PUSH
20128: LD_INT 300
20130: LESS
20131: IFFALSE 20326
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_INT 3
20140: PPUSH
20141: LD_INT 81
20143: PUSH
20144: LD_EXP 3
20148: PUSH
20149: LD_INT 1
20151: ARRAY
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 70
20161: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 256
20171: PUSH
20172: LD_INT 650
20174: LESS
20175: IFFALSE 20200
// begin ComStop ( i ) ;
20177: LD_VAR 0 1
20181: PPUSH
20182: CALL_OW 141
// SetTag ( i , 300 ) ;
20186: LD_VAR 0 1
20190: PPUSH
20191: LD_INT 300
20193: PPUSH
20194: CALL_OW 109
// continue ;
20198: GO 19781
// end ; if enemy then
20200: LD_VAR 0 3
20204: IFFALSE 20244
// begin if not HasTask ( i ) then
20206: LD_VAR 0 1
20210: PPUSH
20211: CALL_OW 314
20215: NOT
20216: IFFALSE 20242
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20218: LD_VAR 0 1
20222: PPUSH
20223: LD_VAR 0 3
20227: PPUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 74
20237: PPUSH
20238: CALL_OW 115
// end else
20242: GO 20326
// if amVehiclesAtttackers then
20244: LD_EXP 36
20248: IFFALSE 20326
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
20250: LD_ADDR_VAR 0 3
20254: PUSH
20255: LD_INT 81
20257: PUSH
20258: LD_EXP 3
20262: PUSH
20263: LD_INT 1
20265: ARRAY
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PPUSH
20271: CALL_OW 69
20275: ST_TO_ADDR
// if enemy then
20276: LD_VAR 0 3
20280: IFFALSE 20326
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
20282: LD_VAR 0 1
20286: PPUSH
20287: LD_INT 49
20289: PUSH
20290: LD_INT 43
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 63
20299: PUSH
20300: LD_INT 56
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 72
20309: PUSH
20310: LD_INT 67
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: PPUSH
20322: CALL 82075 0 2
// end ; end ; end ;
20326: GO 19781
20328: POP
20329: POP
// end ;
20330: PPOPN 3
20332: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
20333: LD_INT 22
20335: PUSH
20336: LD_EXP 3
20340: PUSH
20341: LD_INT 1
20343: ARRAY
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 32
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PPUSH
20363: CALL_OW 69
20367: IFFALSE 20450
20369: GO 20371
20371: DISABLE
20372: LD_INT 0
20374: PPUSH
// begin enable ;
20375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
20376: LD_ADDR_VAR 0 1
20380: PUSH
20381: LD_INT 22
20383: PUSH
20384: LD_EXP 3
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 32
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PPUSH
20411: CALL_OW 69
20415: PUSH
20416: FOR_IN
20417: IFFALSE 20448
// if GetFuel ( i ) < 3 then
20419: LD_VAR 0 1
20423: PPUSH
20424: CALL_OW 261
20428: PUSH
20429: LD_INT 3
20431: LESS
20432: IFFALSE 20446
// SetFuel ( i , 3 ) ;
20434: LD_VAR 0 1
20438: PPUSH
20439: LD_INT 3
20441: PPUSH
20442: CALL_OW 240
20446: GO 20416
20448: POP
20449: POP
// end ; end_of_file
20450: PPOPN 1
20452: END
// every 0 0$20 trigger game do
20453: LD_EXP 2
20457: IFFALSE 20506
20459: GO 20461
20461: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
20462: LD_INT 20
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_INT 21
20470: PUSH
20471: LD_INT 3
20473: PUSH
20474: LD_INT 5
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: PPUSH
20484: LD_EXP 20
20488: PUSH
20489: LD_INT 2
20491: ARRAY
20492: PPUSH
20493: LD_EXP 20
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: CALL 20507 0 3
20506: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
// if not areas then
20513: LD_VAR 0 1
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 20899
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
20522: LD_ADDR_VAR 0 7
20526: PUSH
20527: LD_INT 17
20529: PUSH
20530: LD_INT 18
20532: PUSH
20533: LD_INT 19
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: ST_TO_ADDR
// x := 5 ;
20541: LD_ADDR_VAR 0 6
20545: PUSH
20546: LD_INT 5
20548: ST_TO_ADDR
// repeat wait ( time ) ;
20549: LD_VAR 0 2
20553: PPUSH
20554: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
20558: LD_OWVAR 1
20562: PUSH
20563: LD_INT 37800
20565: PUSH
20566: LD_INT 31500
20568: PUSH
20569: LD_INT 25200
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: PUSH
20577: LD_OWVAR 67
20581: ARRAY
20582: LESS
20583: IFFALSE 20722
// begin for i := 1 to multi_sides do
20585: LD_ADDR_VAR 0 5
20589: PUSH
20590: DOUBLE
20591: LD_INT 1
20593: DEC
20594: ST_TO_ADDR
20595: LD_EXP 6
20599: PUSH
20600: FOR_TO
20601: IFFALSE 20713
// if multi_sides [ i ] then
20603: LD_EXP 6
20607: PUSH
20608: LD_VAR 0 5
20612: ARRAY
20613: IFFALSE 20711
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
20615: LD_VAR 0 7
20619: PUSH
20620: LD_EXP 6
20624: PUSH
20625: LD_VAR 0 5
20629: ARRAY
20630: ARRAY
20631: PPUSH
20632: LD_INT 1
20634: PPUSH
20635: CALL_OW 287
20639: PUSH
20640: LD_INT 32
20642: PUSH
20643: LD_INT 25
20645: PUSH
20646: LD_INT 23
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: PUSH
20654: LD_OWVAR 67
20658: ARRAY
20659: LESS
20660: IFFALSE 20711
// begin amount := amount - ( x * 10 ) ;
20662: LD_ADDR_VAR 0 3
20666: PUSH
20667: LD_VAR 0 3
20671: PUSH
20672: LD_VAR 0 6
20676: PUSH
20677: LD_INT 10
20679: MUL
20680: MINUS
20681: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
20682: LD_VAR 0 6
20686: PPUSH
20687: LD_VAR 0 7
20691: PUSH
20692: LD_EXP 6
20696: PUSH
20697: LD_VAR 0 5
20701: ARRAY
20702: ARRAY
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: CALL_OW 55
// end ; end ;
20711: GO 20600
20713: POP
20714: POP
// wait ( 0 0$2 ) ;
20715: LD_INT 70
20717: PPUSH
20718: CALL_OW 67
// end ; for i in areas do
20722: LD_ADDR_VAR 0 5
20726: PUSH
20727: LD_VAR 0 1
20731: PUSH
20732: FOR_IN
20733: IFFALSE 20816
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
20735: LD_VAR 0 5
20739: PPUSH
20740: LD_INT 1
20742: PPUSH
20743: CALL_OW 287
20747: PUSH
20748: LD_INT 25
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: LD_INT 20
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: LD_OWVAR 67
20766: ARRAY
20767: LESS
20768: IFFALSE 20814
// begin wait ( 0 0$5 ) ;
20770: LD_INT 175
20772: PPUSH
20773: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
20777: LD_VAR 0 6
20781: PPUSH
20782: LD_VAR 0 5
20786: PPUSH
20787: LD_INT 1
20789: PPUSH
20790: CALL_OW 55
// amount := amount - ( x * 10 ) ;
20794: LD_ADDR_VAR 0 3
20798: PUSH
20799: LD_VAR 0 3
20803: PUSH
20804: LD_VAR 0 6
20808: PUSH
20809: LD_INT 10
20811: MUL
20812: MINUS
20813: ST_TO_ADDR
// end ; end ;
20814: GO 20732
20816: POP
20817: POP
// time := time + 0 0$2 ;
20818: LD_ADDR_VAR 0 2
20822: PUSH
20823: LD_VAR 0 2
20827: PUSH
20828: LD_INT 70
20830: PLUS
20831: ST_TO_ADDR
// x := x - 1 ;
20832: LD_ADDR_VAR 0 6
20836: PUSH
20837: LD_VAR 0 6
20841: PUSH
20842: LD_INT 1
20844: MINUS
20845: ST_TO_ADDR
// if x = 0 then
20846: LD_VAR 0 6
20850: PUSH
20851: LD_INT 0
20853: EQUAL
20854: IFFALSE 20864
// x := 5 ;
20856: LD_ADDR_VAR 0 6
20860: PUSH
20861: LD_INT 5
20863: ST_TO_ADDR
// if time > 2 2$00 then
20864: LD_VAR 0 2
20868: PUSH
20869: LD_INT 4200
20871: GREATER
20872: IFFALSE 20882
// time := 0 0$30 ;
20874: LD_ADDR_VAR 0 2
20878: PUSH
20879: LD_INT 1050
20881: ST_TO_ADDR
// until not game or amount <= 0 ;
20882: LD_EXP 2
20886: NOT
20887: PUSH
20888: LD_VAR 0 3
20892: PUSH
20893: LD_INT 0
20895: LESSEQUAL
20896: OR
20897: IFFALSE 20549
// end ; end_of_file
20899: LD_VAR 0 4
20903: RET
// export globalGameSaveCounter ; every 0 0$1 do
20904: GO 20906
20906: DISABLE
// begin enable ;
20907: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20908: LD_STRING updateTimer(
20910: PUSH
20911: LD_OWVAR 1
20915: STR
20916: PUSH
20917: LD_STRING );
20919: STR
20920: PPUSH
20921: CALL_OW 559
// end ;
20925: END
// every 0 0$1 do
20926: GO 20928
20928: DISABLE
// begin globalGameSaveCounter := 0 ;
20929: LD_ADDR_EXP 57
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20937: LD_STRING setGameSaveCounter(0)
20939: PPUSH
20940: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20944: LD_STRING initStreamRollete();
20946: PPUSH
20947: CALL_OW 559
// InitStreamMode ;
20951: CALL 22294 0 0
// DefineStreamItems ( false ) ;
20955: LD_INT 0
20957: PPUSH
20958: CALL 22758 0 1
// end ;
20962: END
// export function SOS_MapStart ( ) ; begin
20963: LD_INT 0
20965: PPUSH
// if streamModeActive then
20966: LD_EXP 58
20970: IFFALSE 20979
// DefineStreamItems ( true ) ;
20972: LD_INT 1
20974: PPUSH
20975: CALL 22758 0 1
// UpdateLuaVariables ( ) ;
20979: CALL 20996 0 0
// UpdateFactoryWaypoints ( ) ;
20983: CALL 35627 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20987: CALL 35884 0 0
// end ;
20991: LD_VAR 0 1
20995: RET
// function UpdateLuaVariables ( ) ; begin
20996: LD_INT 0
20998: PPUSH
// if globalGameSaveCounter then
20999: LD_EXP 57
21003: IFFALSE 21037
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21005: LD_ADDR_EXP 57
21009: PUSH
21010: LD_EXP 57
21014: PPUSH
21015: CALL 80832 0 1
21019: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21020: LD_STRING setGameSaveCounter(
21022: PUSH
21023: LD_EXP 57
21027: STR
21028: PUSH
21029: LD_STRING )
21031: STR
21032: PPUSH
21033: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21037: LD_STRING setGameDifficulty(
21039: PUSH
21040: LD_OWVAR 67
21044: STR
21045: PUSH
21046: LD_STRING )
21048: STR
21049: PPUSH
21050: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
21054: LD_STRING displayDifficulty(
21056: PUSH
21057: LD_OWVAR 67
21061: STR
21062: PUSH
21063: LD_STRING )
21065: STR
21066: PPUSH
21067: CALL_OW 559
// end ;
21071: LD_VAR 0 1
21075: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21076: LD_INT 0
21078: PPUSH
// if p2 = stream_mode then
21079: LD_VAR 0 2
21083: PUSH
21084: LD_INT 100
21086: EQUAL
21087: IFFALSE 22090
// begin if not StreamModeActive then
21089: LD_EXP 58
21093: NOT
21094: IFFALSE 21104
// StreamModeActive := true ;
21096: LD_ADDR_EXP 58
21100: PUSH
21101: LD_INT 1
21103: ST_TO_ADDR
// if p3 = 0 then
21104: LD_VAR 0 3
21108: PUSH
21109: LD_INT 0
21111: EQUAL
21112: IFFALSE 21118
// InitStreamMode ;
21114: CALL 22294 0 0
// if p3 = 1 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 1
21125: EQUAL
21126: IFFALSE 21136
// sRocket := true ;
21128: LD_ADDR_EXP 63
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 2 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 2
21143: EQUAL
21144: IFFALSE 21154
// sSpeed := true ;
21146: LD_ADDR_EXP 62
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 3 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 3
21161: EQUAL
21162: IFFALSE 21172
// sEngine := true ;
21164: LD_ADDR_EXP 64
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 4 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 4
21179: EQUAL
21180: IFFALSE 21190
// sSpec := true ;
21182: LD_ADDR_EXP 61
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 5 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 5
21197: EQUAL
21198: IFFALSE 21208
// sLevel := true ;
21200: LD_ADDR_EXP 65
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 6 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 6
21215: EQUAL
21216: IFFALSE 21226
// sArmoury := true ;
21218: LD_ADDR_EXP 66
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 7 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 7
21233: EQUAL
21234: IFFALSE 21244
// sRadar := true ;
21236: LD_ADDR_EXP 67
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 8 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 8
21251: EQUAL
21252: IFFALSE 21262
// sBunker := true ;
21254: LD_ADDR_EXP 68
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 9 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 9
21269: EQUAL
21270: IFFALSE 21280
// sHack := true ;
21272: LD_ADDR_EXP 69
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 10 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 10
21287: EQUAL
21288: IFFALSE 21298
// sFire := true ;
21290: LD_ADDR_EXP 70
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 11 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 11
21305: EQUAL
21306: IFFALSE 21316
// sRefresh := true ;
21308: LD_ADDR_EXP 71
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 12 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 12
21323: EQUAL
21324: IFFALSE 21334
// sExp := true ;
21326: LD_ADDR_EXP 72
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 13 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 13
21341: EQUAL
21342: IFFALSE 21352
// sDepot := true ;
21344: LD_ADDR_EXP 73
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// if p3 = 14 then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_INT 14
21359: EQUAL
21360: IFFALSE 21370
// sFlag := true ;
21362: LD_ADDR_EXP 74
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// if p3 = 15 then
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 15
21377: EQUAL
21378: IFFALSE 21388
// sKamikadze := true ;
21380: LD_ADDR_EXP 82
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// if p3 = 16 then
21388: LD_VAR 0 3
21392: PUSH
21393: LD_INT 16
21395: EQUAL
21396: IFFALSE 21406
// sTroll := true ;
21398: LD_ADDR_EXP 83
21402: PUSH
21403: LD_INT 1
21405: ST_TO_ADDR
// if p3 = 17 then
21406: LD_VAR 0 3
21410: PUSH
21411: LD_INT 17
21413: EQUAL
21414: IFFALSE 21424
// sSlow := true ;
21416: LD_ADDR_EXP 84
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if p3 = 18 then
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 18
21431: EQUAL
21432: IFFALSE 21442
// sLack := true ;
21434: LD_ADDR_EXP 85
21438: PUSH
21439: LD_INT 1
21441: ST_TO_ADDR
// if p3 = 19 then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 19
21449: EQUAL
21450: IFFALSE 21460
// sTank := true ;
21452: LD_ADDR_EXP 87
21456: PUSH
21457: LD_INT 1
21459: ST_TO_ADDR
// if p3 = 20 then
21460: LD_VAR 0 3
21464: PUSH
21465: LD_INT 20
21467: EQUAL
21468: IFFALSE 21478
// sRemote := true ;
21470: LD_ADDR_EXP 88
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// if p3 = 21 then
21478: LD_VAR 0 3
21482: PUSH
21483: LD_INT 21
21485: EQUAL
21486: IFFALSE 21496
// sPowell := true ;
21488: LD_ADDR_EXP 89
21492: PUSH
21493: LD_INT 1
21495: ST_TO_ADDR
// if p3 = 22 then
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 22
21503: EQUAL
21504: IFFALSE 21514
// sTeleport := true ;
21506: LD_ADDR_EXP 92
21510: PUSH
21511: LD_INT 1
21513: ST_TO_ADDR
// if p3 = 23 then
21514: LD_VAR 0 3
21518: PUSH
21519: LD_INT 23
21521: EQUAL
21522: IFFALSE 21532
// sOilTower := true ;
21524: LD_ADDR_EXP 94
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
// if p3 = 24 then
21532: LD_VAR 0 3
21536: PUSH
21537: LD_INT 24
21539: EQUAL
21540: IFFALSE 21550
// sShovel := true ;
21542: LD_ADDR_EXP 95
21546: PUSH
21547: LD_INT 1
21549: ST_TO_ADDR
// if p3 = 25 then
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 25
21557: EQUAL
21558: IFFALSE 21568
// sSheik := true ;
21560: LD_ADDR_EXP 96
21564: PUSH
21565: LD_INT 1
21567: ST_TO_ADDR
// if p3 = 26 then
21568: LD_VAR 0 3
21572: PUSH
21573: LD_INT 26
21575: EQUAL
21576: IFFALSE 21586
// sEarthquake := true ;
21578: LD_ADDR_EXP 98
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// if p3 = 27 then
21586: LD_VAR 0 3
21590: PUSH
21591: LD_INT 27
21593: EQUAL
21594: IFFALSE 21604
// sAI := true ;
21596: LD_ADDR_EXP 99
21600: PUSH
21601: LD_INT 1
21603: ST_TO_ADDR
// if p3 = 28 then
21604: LD_VAR 0 3
21608: PUSH
21609: LD_INT 28
21611: EQUAL
21612: IFFALSE 21622
// sCargo := true ;
21614: LD_ADDR_EXP 102
21618: PUSH
21619: LD_INT 1
21621: ST_TO_ADDR
// if p3 = 29 then
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 29
21629: EQUAL
21630: IFFALSE 21640
// sDLaser := true ;
21632: LD_ADDR_EXP 103
21636: PUSH
21637: LD_INT 1
21639: ST_TO_ADDR
// if p3 = 30 then
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 30
21647: EQUAL
21648: IFFALSE 21658
// sExchange := true ;
21650: LD_ADDR_EXP 104
21654: PUSH
21655: LD_INT 1
21657: ST_TO_ADDR
// if p3 = 31 then
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 31
21665: EQUAL
21666: IFFALSE 21676
// sFac := true ;
21668: LD_ADDR_EXP 105
21672: PUSH
21673: LD_INT 1
21675: ST_TO_ADDR
// if p3 = 32 then
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 32
21683: EQUAL
21684: IFFALSE 21694
// sPower := true ;
21686: LD_ADDR_EXP 106
21690: PUSH
21691: LD_INT 1
21693: ST_TO_ADDR
// if p3 = 33 then
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 33
21701: EQUAL
21702: IFFALSE 21712
// sRandom := true ;
21704: LD_ADDR_EXP 107
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
// if p3 = 34 then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 34
21719: EQUAL
21720: IFFALSE 21730
// sShield := true ;
21722: LD_ADDR_EXP 108
21726: PUSH
21727: LD_INT 1
21729: ST_TO_ADDR
// if p3 = 35 then
21730: LD_VAR 0 3
21734: PUSH
21735: LD_INT 35
21737: EQUAL
21738: IFFALSE 21748
// sTime := true ;
21740: LD_ADDR_EXP 109
21744: PUSH
21745: LD_INT 1
21747: ST_TO_ADDR
// if p3 = 36 then
21748: LD_VAR 0 3
21752: PUSH
21753: LD_INT 36
21755: EQUAL
21756: IFFALSE 21766
// sTools := true ;
21758: LD_ADDR_EXP 110
21762: PUSH
21763: LD_INT 1
21765: ST_TO_ADDR
// if p3 = 101 then
21766: LD_VAR 0 3
21770: PUSH
21771: LD_INT 101
21773: EQUAL
21774: IFFALSE 21784
// sSold := true ;
21776: LD_ADDR_EXP 75
21780: PUSH
21781: LD_INT 1
21783: ST_TO_ADDR
// if p3 = 102 then
21784: LD_VAR 0 3
21788: PUSH
21789: LD_INT 102
21791: EQUAL
21792: IFFALSE 21802
// sDiff := true ;
21794: LD_ADDR_EXP 76
21798: PUSH
21799: LD_INT 1
21801: ST_TO_ADDR
// if p3 = 103 then
21802: LD_VAR 0 3
21806: PUSH
21807: LD_INT 103
21809: EQUAL
21810: IFFALSE 21820
// sFog := true ;
21812: LD_ADDR_EXP 79
21816: PUSH
21817: LD_INT 1
21819: ST_TO_ADDR
// if p3 = 104 then
21820: LD_VAR 0 3
21824: PUSH
21825: LD_INT 104
21827: EQUAL
21828: IFFALSE 21838
// sReset := true ;
21830: LD_ADDR_EXP 80
21834: PUSH
21835: LD_INT 1
21837: ST_TO_ADDR
// if p3 = 105 then
21838: LD_VAR 0 3
21842: PUSH
21843: LD_INT 105
21845: EQUAL
21846: IFFALSE 21856
// sSun := true ;
21848: LD_ADDR_EXP 81
21852: PUSH
21853: LD_INT 1
21855: ST_TO_ADDR
// if p3 = 106 then
21856: LD_VAR 0 3
21860: PUSH
21861: LD_INT 106
21863: EQUAL
21864: IFFALSE 21874
// sTiger := true ;
21866: LD_ADDR_EXP 77
21870: PUSH
21871: LD_INT 1
21873: ST_TO_ADDR
// if p3 = 107 then
21874: LD_VAR 0 3
21878: PUSH
21879: LD_INT 107
21881: EQUAL
21882: IFFALSE 21892
// sBomb := true ;
21884: LD_ADDR_EXP 78
21888: PUSH
21889: LD_INT 1
21891: ST_TO_ADDR
// if p3 = 108 then
21892: LD_VAR 0 3
21896: PUSH
21897: LD_INT 108
21899: EQUAL
21900: IFFALSE 21910
// sWound := true ;
21902: LD_ADDR_EXP 86
21906: PUSH
21907: LD_INT 1
21909: ST_TO_ADDR
// if p3 = 109 then
21910: LD_VAR 0 3
21914: PUSH
21915: LD_INT 109
21917: EQUAL
21918: IFFALSE 21928
// sBetray := true ;
21920: LD_ADDR_EXP 90
21924: PUSH
21925: LD_INT 1
21927: ST_TO_ADDR
// if p3 = 110 then
21928: LD_VAR 0 3
21932: PUSH
21933: LD_INT 110
21935: EQUAL
21936: IFFALSE 21946
// sContamin := true ;
21938: LD_ADDR_EXP 91
21942: PUSH
21943: LD_INT 1
21945: ST_TO_ADDR
// if p3 = 111 then
21946: LD_VAR 0 3
21950: PUSH
21951: LD_INT 111
21953: EQUAL
21954: IFFALSE 21964
// sOil := true ;
21956: LD_ADDR_EXP 93
21960: PUSH
21961: LD_INT 1
21963: ST_TO_ADDR
// if p3 = 112 then
21964: LD_VAR 0 3
21968: PUSH
21969: LD_INT 112
21971: EQUAL
21972: IFFALSE 21982
// sStu := true ;
21974: LD_ADDR_EXP 97
21978: PUSH
21979: LD_INT 1
21981: ST_TO_ADDR
// if p3 = 113 then
21982: LD_VAR 0 3
21986: PUSH
21987: LD_INT 113
21989: EQUAL
21990: IFFALSE 22000
// sBazooka := true ;
21992: LD_ADDR_EXP 100
21996: PUSH
21997: LD_INT 1
21999: ST_TO_ADDR
// if p3 = 114 then
22000: LD_VAR 0 3
22004: PUSH
22005: LD_INT 114
22007: EQUAL
22008: IFFALSE 22018
// sMortar := true ;
22010: LD_ADDR_EXP 101
22014: PUSH
22015: LD_INT 1
22017: ST_TO_ADDR
// if p3 = 115 then
22018: LD_VAR 0 3
22022: PUSH
22023: LD_INT 115
22025: EQUAL
22026: IFFALSE 22036
// sRanger := true ;
22028: LD_ADDR_EXP 111
22032: PUSH
22033: LD_INT 1
22035: ST_TO_ADDR
// if p3 = 116 then
22036: LD_VAR 0 3
22040: PUSH
22041: LD_INT 116
22043: EQUAL
22044: IFFALSE 22054
// sComputer := true ;
22046: LD_ADDR_EXP 112
22050: PUSH
22051: LD_INT 1
22053: ST_TO_ADDR
// if p3 = 117 then
22054: LD_VAR 0 3
22058: PUSH
22059: LD_INT 117
22061: EQUAL
22062: IFFALSE 22072
// s30 := true ;
22064: LD_ADDR_EXP 113
22068: PUSH
22069: LD_INT 1
22071: ST_TO_ADDR
// if p3 = 118 then
22072: LD_VAR 0 3
22076: PUSH
22077: LD_INT 118
22079: EQUAL
22080: IFFALSE 22090
// s60 := true ;
22082: LD_ADDR_EXP 114
22086: PUSH
22087: LD_INT 1
22089: ST_TO_ADDR
// end ; if p2 = hack_mode then
22090: LD_VAR 0 2
22094: PUSH
22095: LD_INT 101
22097: EQUAL
22098: IFFALSE 22226
// begin case p3 of 1 :
22100: LD_VAR 0 3
22104: PUSH
22105: LD_INT 1
22107: DOUBLE
22108: EQUAL
22109: IFTRUE 22113
22111: GO 22120
22113: POP
// hHackUnlimitedResources ; 2 :
22114: CALL 34373 0 0
22118: GO 22226
22120: LD_INT 2
22122: DOUBLE
22123: EQUAL
22124: IFTRUE 22128
22126: GO 22135
22128: POP
// hHackSetLevel10 ; 3 :
22129: CALL 34506 0 0
22133: GO 22226
22135: LD_INT 3
22137: DOUBLE
22138: EQUAL
22139: IFTRUE 22143
22141: GO 22150
22143: POP
// hHackSetLevel10YourUnits ; 4 :
22144: CALL 34591 0 0
22148: GO 22226
22150: LD_INT 4
22152: DOUBLE
22153: EQUAL
22154: IFTRUE 22158
22156: GO 22165
22158: POP
// hHackInvincible ; 5 :
22159: CALL 35039 0 0
22163: GO 22226
22165: LD_INT 5
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22180
22173: POP
// hHackInvisible ; 6 :
22174: CALL 35150 0 0
22178: GO 22226
22180: LD_INT 6
22182: DOUBLE
22183: EQUAL
22184: IFTRUE 22188
22186: GO 22195
22188: POP
// hHackChangeYourSide ; 7 :
22189: CALL 35207 0 0
22193: GO 22226
22195: LD_INT 7
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22203
22201: GO 22210
22203: POP
// hHackChangeUnitSide ; 8 :
22204: CALL 35249 0 0
22208: GO 22226
22210: LD_INT 8
22212: DOUBLE
22213: EQUAL
22214: IFTRUE 22218
22216: GO 22225
22218: POP
// hHackFog ; end ;
22219: CALL 35350 0 0
22223: GO 22226
22225: POP
// end ; if p2 = game_save_mode then
22226: LD_VAR 0 2
22230: PUSH
22231: LD_INT 102
22233: EQUAL
22234: IFFALSE 22289
// begin if p3 = 1 then
22236: LD_VAR 0 3
22240: PUSH
22241: LD_INT 1
22243: EQUAL
22244: IFFALSE 22256
// globalGameSaveCounter := p4 ;
22246: LD_ADDR_EXP 57
22250: PUSH
22251: LD_VAR 0 4
22255: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22256: LD_VAR 0 3
22260: PUSH
22261: LD_INT 2
22263: EQUAL
22264: PUSH
22265: LD_EXP 57
22269: AND
22270: IFFALSE 22289
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22272: LD_STRING setGameSaveCounter(
22274: PUSH
22275: LD_EXP 57
22279: STR
22280: PUSH
22281: LD_STRING )
22283: STR
22284: PPUSH
22285: CALL_OW 559
// end ; end ;
22289: LD_VAR 0 7
22293: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22294: LD_INT 0
22296: PPUSH
// streamModeActive := false ;
22297: LD_ADDR_EXP 58
22301: PUSH
22302: LD_INT 0
22304: ST_TO_ADDR
// normalCounter := 36 ;
22305: LD_ADDR_EXP 59
22309: PUSH
22310: LD_INT 36
22312: ST_TO_ADDR
// hardcoreCounter := 18 ;
22313: LD_ADDR_EXP 60
22317: PUSH
22318: LD_INT 18
22320: ST_TO_ADDR
// sRocket := false ;
22321: LD_ADDR_EXP 63
22325: PUSH
22326: LD_INT 0
22328: ST_TO_ADDR
// sSpeed := false ;
22329: LD_ADDR_EXP 62
22333: PUSH
22334: LD_INT 0
22336: ST_TO_ADDR
// sEngine := false ;
22337: LD_ADDR_EXP 64
22341: PUSH
22342: LD_INT 0
22344: ST_TO_ADDR
// sSpec := false ;
22345: LD_ADDR_EXP 61
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
// sLevel := false ;
22353: LD_ADDR_EXP 65
22357: PUSH
22358: LD_INT 0
22360: ST_TO_ADDR
// sArmoury := false ;
22361: LD_ADDR_EXP 66
22365: PUSH
22366: LD_INT 0
22368: ST_TO_ADDR
// sRadar := false ;
22369: LD_ADDR_EXP 67
22373: PUSH
22374: LD_INT 0
22376: ST_TO_ADDR
// sBunker := false ;
22377: LD_ADDR_EXP 68
22381: PUSH
22382: LD_INT 0
22384: ST_TO_ADDR
// sHack := false ;
22385: LD_ADDR_EXP 69
22389: PUSH
22390: LD_INT 0
22392: ST_TO_ADDR
// sFire := false ;
22393: LD_ADDR_EXP 70
22397: PUSH
22398: LD_INT 0
22400: ST_TO_ADDR
// sRefresh := false ;
22401: LD_ADDR_EXP 71
22405: PUSH
22406: LD_INT 0
22408: ST_TO_ADDR
// sExp := false ;
22409: LD_ADDR_EXP 72
22413: PUSH
22414: LD_INT 0
22416: ST_TO_ADDR
// sDepot := false ;
22417: LD_ADDR_EXP 73
22421: PUSH
22422: LD_INT 0
22424: ST_TO_ADDR
// sFlag := false ;
22425: LD_ADDR_EXP 74
22429: PUSH
22430: LD_INT 0
22432: ST_TO_ADDR
// sKamikadze := false ;
22433: LD_ADDR_EXP 82
22437: PUSH
22438: LD_INT 0
22440: ST_TO_ADDR
// sTroll := false ;
22441: LD_ADDR_EXP 83
22445: PUSH
22446: LD_INT 0
22448: ST_TO_ADDR
// sSlow := false ;
22449: LD_ADDR_EXP 84
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
// sLack := false ;
22457: LD_ADDR_EXP 85
22461: PUSH
22462: LD_INT 0
22464: ST_TO_ADDR
// sTank := false ;
22465: LD_ADDR_EXP 87
22469: PUSH
22470: LD_INT 0
22472: ST_TO_ADDR
// sRemote := false ;
22473: LD_ADDR_EXP 88
22477: PUSH
22478: LD_INT 0
22480: ST_TO_ADDR
// sPowell := false ;
22481: LD_ADDR_EXP 89
22485: PUSH
22486: LD_INT 0
22488: ST_TO_ADDR
// sTeleport := false ;
22489: LD_ADDR_EXP 92
22493: PUSH
22494: LD_INT 0
22496: ST_TO_ADDR
// sOilTower := false ;
22497: LD_ADDR_EXP 94
22501: PUSH
22502: LD_INT 0
22504: ST_TO_ADDR
// sShovel := false ;
22505: LD_ADDR_EXP 95
22509: PUSH
22510: LD_INT 0
22512: ST_TO_ADDR
// sSheik := false ;
22513: LD_ADDR_EXP 96
22517: PUSH
22518: LD_INT 0
22520: ST_TO_ADDR
// sEarthquake := false ;
22521: LD_ADDR_EXP 98
22525: PUSH
22526: LD_INT 0
22528: ST_TO_ADDR
// sAI := false ;
22529: LD_ADDR_EXP 99
22533: PUSH
22534: LD_INT 0
22536: ST_TO_ADDR
// sCargo := false ;
22537: LD_ADDR_EXP 102
22541: PUSH
22542: LD_INT 0
22544: ST_TO_ADDR
// sDLaser := false ;
22545: LD_ADDR_EXP 103
22549: PUSH
22550: LD_INT 0
22552: ST_TO_ADDR
// sExchange := false ;
22553: LD_ADDR_EXP 104
22557: PUSH
22558: LD_INT 0
22560: ST_TO_ADDR
// sFac := false ;
22561: LD_ADDR_EXP 105
22565: PUSH
22566: LD_INT 0
22568: ST_TO_ADDR
// sPower := false ;
22569: LD_ADDR_EXP 106
22573: PUSH
22574: LD_INT 0
22576: ST_TO_ADDR
// sRandom := false ;
22577: LD_ADDR_EXP 107
22581: PUSH
22582: LD_INT 0
22584: ST_TO_ADDR
// sShield := false ;
22585: LD_ADDR_EXP 108
22589: PUSH
22590: LD_INT 0
22592: ST_TO_ADDR
// sTime := false ;
22593: LD_ADDR_EXP 109
22597: PUSH
22598: LD_INT 0
22600: ST_TO_ADDR
// sTools := false ;
22601: LD_ADDR_EXP 110
22605: PUSH
22606: LD_INT 0
22608: ST_TO_ADDR
// sSold := false ;
22609: LD_ADDR_EXP 75
22613: PUSH
22614: LD_INT 0
22616: ST_TO_ADDR
// sDiff := false ;
22617: LD_ADDR_EXP 76
22621: PUSH
22622: LD_INT 0
22624: ST_TO_ADDR
// sFog := false ;
22625: LD_ADDR_EXP 79
22629: PUSH
22630: LD_INT 0
22632: ST_TO_ADDR
// sReset := false ;
22633: LD_ADDR_EXP 80
22637: PUSH
22638: LD_INT 0
22640: ST_TO_ADDR
// sSun := false ;
22641: LD_ADDR_EXP 81
22645: PUSH
22646: LD_INT 0
22648: ST_TO_ADDR
// sTiger := false ;
22649: LD_ADDR_EXP 77
22653: PUSH
22654: LD_INT 0
22656: ST_TO_ADDR
// sBomb := false ;
22657: LD_ADDR_EXP 78
22661: PUSH
22662: LD_INT 0
22664: ST_TO_ADDR
// sWound := false ;
22665: LD_ADDR_EXP 86
22669: PUSH
22670: LD_INT 0
22672: ST_TO_ADDR
// sBetray := false ;
22673: LD_ADDR_EXP 90
22677: PUSH
22678: LD_INT 0
22680: ST_TO_ADDR
// sContamin := false ;
22681: LD_ADDR_EXP 91
22685: PUSH
22686: LD_INT 0
22688: ST_TO_ADDR
// sOil := false ;
22689: LD_ADDR_EXP 93
22693: PUSH
22694: LD_INT 0
22696: ST_TO_ADDR
// sStu := false ;
22697: LD_ADDR_EXP 97
22701: PUSH
22702: LD_INT 0
22704: ST_TO_ADDR
// sBazooka := false ;
22705: LD_ADDR_EXP 100
22709: PUSH
22710: LD_INT 0
22712: ST_TO_ADDR
// sMortar := false ;
22713: LD_ADDR_EXP 101
22717: PUSH
22718: LD_INT 0
22720: ST_TO_ADDR
// sRanger := false ;
22721: LD_ADDR_EXP 111
22725: PUSH
22726: LD_INT 0
22728: ST_TO_ADDR
// sComputer := false ;
22729: LD_ADDR_EXP 112
22733: PUSH
22734: LD_INT 0
22736: ST_TO_ADDR
// s30 := false ;
22737: LD_ADDR_EXP 113
22741: PUSH
22742: LD_INT 0
22744: ST_TO_ADDR
// s60 := false ;
22745: LD_ADDR_EXP 114
22749: PUSH
22750: LD_INT 0
22752: ST_TO_ADDR
// end ;
22753: LD_VAR 0 1
22757: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22758: LD_INT 0
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
// result := [ ] ;
22767: LD_ADDR_VAR 0 2
22771: PUSH
22772: EMPTY
22773: ST_TO_ADDR
// if campaign_id = 1 then
22774: LD_OWVAR 69
22778: PUSH
22779: LD_INT 1
22781: EQUAL
22782: IFFALSE 25948
// begin case mission_number of 1 :
22784: LD_OWVAR 70
22788: PUSH
22789: LD_INT 1
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22873
22797: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22798: LD_ADDR_VAR 0 2
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 4
22808: PUSH
22809: LD_INT 11
22811: PUSH
22812: LD_INT 12
22814: PUSH
22815: LD_INT 15
22817: PUSH
22818: LD_INT 16
22820: PUSH
22821: LD_INT 22
22823: PUSH
22824: LD_INT 23
22826: PUSH
22827: LD_INT 26
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 101
22843: PUSH
22844: LD_INT 102
22846: PUSH
22847: LD_INT 106
22849: PUSH
22850: LD_INT 116
22852: PUSH
22853: LD_INT 117
22855: PUSH
22856: LD_INT 118
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: ST_TO_ADDR
22871: GO 25946
22873: LD_INT 2
22875: DOUBLE
22876: EQUAL
22877: IFTRUE 22881
22879: GO 22965
22881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22882: LD_ADDR_VAR 0 2
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 4
22892: PUSH
22893: LD_INT 11
22895: PUSH
22896: LD_INT 12
22898: PUSH
22899: LD_INT 15
22901: PUSH
22902: LD_INT 16
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_INT 23
22910: PUSH
22911: LD_INT 26
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 101
22927: PUSH
22928: LD_INT 102
22930: PUSH
22931: LD_INT 105
22933: PUSH
22934: LD_INT 106
22936: PUSH
22937: LD_INT 108
22939: PUSH
22940: LD_INT 116
22942: PUSH
22943: LD_INT 117
22945: PUSH
22946: LD_INT 118
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: ST_TO_ADDR
22963: GO 25946
22965: LD_INT 3
22967: DOUBLE
22968: EQUAL
22969: IFTRUE 22973
22971: GO 23061
22973: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 4
22984: PUSH
22985: LD_INT 5
22987: PUSH
22988: LD_INT 11
22990: PUSH
22991: LD_INT 12
22993: PUSH
22994: LD_INT 15
22996: PUSH
22997: LD_INT 16
22999: PUSH
23000: LD_INT 22
23002: PUSH
23003: LD_INT 26
23005: PUSH
23006: LD_INT 36
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 101
23023: PUSH
23024: LD_INT 102
23026: PUSH
23027: LD_INT 105
23029: PUSH
23030: LD_INT 106
23032: PUSH
23033: LD_INT 108
23035: PUSH
23036: LD_INT 116
23038: PUSH
23039: LD_INT 117
23041: PUSH
23042: LD_INT 118
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: ST_TO_ADDR
23059: GO 25946
23061: LD_INT 4
23063: DOUBLE
23064: EQUAL
23065: IFTRUE 23069
23067: GO 23165
23069: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23070: LD_ADDR_VAR 0 2
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 4
23080: PUSH
23081: LD_INT 5
23083: PUSH
23084: LD_INT 8
23086: PUSH
23087: LD_INT 11
23089: PUSH
23090: LD_INT 12
23092: PUSH
23093: LD_INT 15
23095: PUSH
23096: LD_INT 16
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_INT 23
23104: PUSH
23105: LD_INT 26
23107: PUSH
23108: LD_INT 36
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 101
23127: PUSH
23128: LD_INT 102
23130: PUSH
23131: LD_INT 105
23133: PUSH
23134: LD_INT 106
23136: PUSH
23137: LD_INT 108
23139: PUSH
23140: LD_INT 116
23142: PUSH
23143: LD_INT 117
23145: PUSH
23146: LD_INT 118
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: ST_TO_ADDR
23163: GO 25946
23165: LD_INT 5
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23285
23173: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 4
23184: PUSH
23185: LD_INT 5
23187: PUSH
23188: LD_INT 6
23190: PUSH
23191: LD_INT 8
23193: PUSH
23194: LD_INT 11
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 15
23202: PUSH
23203: LD_INT 16
23205: PUSH
23206: LD_INT 22
23208: PUSH
23209: LD_INT 23
23211: PUSH
23212: LD_INT 25
23214: PUSH
23215: LD_INT 26
23217: PUSH
23218: LD_INT 36
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 101
23239: PUSH
23240: LD_INT 102
23242: PUSH
23243: LD_INT 105
23245: PUSH
23246: LD_INT 106
23248: PUSH
23249: LD_INT 108
23251: PUSH
23252: LD_INT 109
23254: PUSH
23255: LD_INT 112
23257: PUSH
23258: LD_INT 116
23260: PUSH
23261: LD_INT 117
23263: PUSH
23264: LD_INT 118
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: ST_TO_ADDR
23283: GO 25946
23285: LD_INT 6
23287: DOUBLE
23288: EQUAL
23289: IFTRUE 23293
23291: GO 23425
23293: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23294: LD_ADDR_VAR 0 2
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 4
23304: PUSH
23305: LD_INT 5
23307: PUSH
23308: LD_INT 6
23310: PUSH
23311: LD_INT 8
23313: PUSH
23314: LD_INT 11
23316: PUSH
23317: LD_INT 12
23319: PUSH
23320: LD_INT 15
23322: PUSH
23323: LD_INT 16
23325: PUSH
23326: LD_INT 20
23328: PUSH
23329: LD_INT 21
23331: PUSH
23332: LD_INT 22
23334: PUSH
23335: LD_INT 23
23337: PUSH
23338: LD_INT 25
23340: PUSH
23341: LD_INT 26
23343: PUSH
23344: LD_INT 30
23346: PUSH
23347: LD_INT 31
23349: PUSH
23350: LD_INT 32
23352: PUSH
23353: LD_INT 36
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 101
23379: PUSH
23380: LD_INT 102
23382: PUSH
23383: LD_INT 105
23385: PUSH
23386: LD_INT 106
23388: PUSH
23389: LD_INT 108
23391: PUSH
23392: LD_INT 109
23394: PUSH
23395: LD_INT 112
23397: PUSH
23398: LD_INT 116
23400: PUSH
23401: LD_INT 117
23403: PUSH
23404: LD_INT 118
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: ST_TO_ADDR
23423: GO 25946
23425: LD_INT 7
23427: DOUBLE
23428: EQUAL
23429: IFTRUE 23433
23431: GO 23545
23433: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23434: LD_ADDR_VAR 0 2
23438: PUSH
23439: LD_INT 2
23441: PUSH
23442: LD_INT 4
23444: PUSH
23445: LD_INT 5
23447: PUSH
23448: LD_INT 7
23450: PUSH
23451: LD_INT 11
23453: PUSH
23454: LD_INT 12
23456: PUSH
23457: LD_INT 15
23459: PUSH
23460: LD_INT 16
23462: PUSH
23463: LD_INT 20
23465: PUSH
23466: LD_INT 21
23468: PUSH
23469: LD_INT 22
23471: PUSH
23472: LD_INT 23
23474: PUSH
23475: LD_INT 25
23477: PUSH
23478: LD_INT 26
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 101
23499: PUSH
23500: LD_INT 102
23502: PUSH
23503: LD_INT 103
23505: PUSH
23506: LD_INT 105
23508: PUSH
23509: LD_INT 106
23511: PUSH
23512: LD_INT 108
23514: PUSH
23515: LD_INT 112
23517: PUSH
23518: LD_INT 116
23520: PUSH
23521: LD_INT 117
23523: PUSH
23524: LD_INT 118
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: ST_TO_ADDR
23543: GO 25946
23545: LD_INT 8
23547: DOUBLE
23548: EQUAL
23549: IFTRUE 23553
23551: GO 23693
23553: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23554: LD_ADDR_VAR 0 2
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 4
23564: PUSH
23565: LD_INT 5
23567: PUSH
23568: LD_INT 6
23570: PUSH
23571: LD_INT 7
23573: PUSH
23574: LD_INT 8
23576: PUSH
23577: LD_INT 11
23579: PUSH
23580: LD_INT 12
23582: PUSH
23583: LD_INT 15
23585: PUSH
23586: LD_INT 16
23588: PUSH
23589: LD_INT 20
23591: PUSH
23592: LD_INT 21
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_INT 23
23600: PUSH
23601: LD_INT 25
23603: PUSH
23604: LD_INT 26
23606: PUSH
23607: LD_INT 30
23609: PUSH
23610: LD_INT 31
23612: PUSH
23613: LD_INT 32
23615: PUSH
23616: LD_INT 36
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 101
23643: PUSH
23644: LD_INT 102
23646: PUSH
23647: LD_INT 103
23649: PUSH
23650: LD_INT 105
23652: PUSH
23653: LD_INT 106
23655: PUSH
23656: LD_INT 108
23658: PUSH
23659: LD_INT 109
23661: PUSH
23662: LD_INT 112
23664: PUSH
23665: LD_INT 116
23667: PUSH
23668: LD_INT 117
23670: PUSH
23671: LD_INT 118
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: ST_TO_ADDR
23691: GO 25946
23693: LD_INT 9
23695: DOUBLE
23696: EQUAL
23697: IFTRUE 23701
23699: GO 23849
23701: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23702: LD_ADDR_VAR 0 2
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 4
23712: PUSH
23713: LD_INT 5
23715: PUSH
23716: LD_INT 6
23718: PUSH
23719: LD_INT 7
23721: PUSH
23722: LD_INT 8
23724: PUSH
23725: LD_INT 11
23727: PUSH
23728: LD_INT 12
23730: PUSH
23731: LD_INT 15
23733: PUSH
23734: LD_INT 16
23736: PUSH
23737: LD_INT 20
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 22
23745: PUSH
23746: LD_INT 23
23748: PUSH
23749: LD_INT 25
23751: PUSH
23752: LD_INT 26
23754: PUSH
23755: LD_INT 28
23757: PUSH
23758: LD_INT 30
23760: PUSH
23761: LD_INT 31
23763: PUSH
23764: LD_INT 32
23766: PUSH
23767: LD_INT 36
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 101
23795: PUSH
23796: LD_INT 102
23798: PUSH
23799: LD_INT 103
23801: PUSH
23802: LD_INT 105
23804: PUSH
23805: LD_INT 106
23807: PUSH
23808: LD_INT 108
23810: PUSH
23811: LD_INT 109
23813: PUSH
23814: LD_INT 112
23816: PUSH
23817: LD_INT 114
23819: PUSH
23820: LD_INT 116
23822: PUSH
23823: LD_INT 117
23825: PUSH
23826: LD_INT 118
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: ST_TO_ADDR
23847: GO 25946
23849: LD_INT 10
23851: DOUBLE
23852: EQUAL
23853: IFTRUE 23857
23855: GO 24053
23857: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23858: LD_ADDR_VAR 0 2
23862: PUSH
23863: LD_INT 2
23865: PUSH
23866: LD_INT 4
23868: PUSH
23869: LD_INT 5
23871: PUSH
23872: LD_INT 6
23874: PUSH
23875: LD_INT 7
23877: PUSH
23878: LD_INT 8
23880: PUSH
23881: LD_INT 9
23883: PUSH
23884: LD_INT 10
23886: PUSH
23887: LD_INT 11
23889: PUSH
23890: LD_INT 12
23892: PUSH
23893: LD_INT 13
23895: PUSH
23896: LD_INT 14
23898: PUSH
23899: LD_INT 15
23901: PUSH
23902: LD_INT 16
23904: PUSH
23905: LD_INT 17
23907: PUSH
23908: LD_INT 18
23910: PUSH
23911: LD_INT 19
23913: PUSH
23914: LD_INT 20
23916: PUSH
23917: LD_INT 21
23919: PUSH
23920: LD_INT 22
23922: PUSH
23923: LD_INT 23
23925: PUSH
23926: LD_INT 24
23928: PUSH
23929: LD_INT 25
23931: PUSH
23932: LD_INT 26
23934: PUSH
23935: LD_INT 28
23937: PUSH
23938: LD_INT 30
23940: PUSH
23941: LD_INT 31
23943: PUSH
23944: LD_INT 32
23946: PUSH
23947: LD_INT 36
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 101
23983: PUSH
23984: LD_INT 102
23986: PUSH
23987: LD_INT 103
23989: PUSH
23990: LD_INT 104
23992: PUSH
23993: LD_INT 105
23995: PUSH
23996: LD_INT 106
23998: PUSH
23999: LD_INT 107
24001: PUSH
24002: LD_INT 108
24004: PUSH
24005: LD_INT 109
24007: PUSH
24008: LD_INT 110
24010: PUSH
24011: LD_INT 111
24013: PUSH
24014: LD_INT 112
24016: PUSH
24017: LD_INT 114
24019: PUSH
24020: LD_INT 116
24022: PUSH
24023: LD_INT 117
24025: PUSH
24026: LD_INT 118
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: ST_TO_ADDR
24051: GO 25946
24053: LD_INT 11
24055: DOUBLE
24056: EQUAL
24057: IFTRUE 24061
24059: GO 24265
24061: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24062: LD_ADDR_VAR 0 2
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: LD_INT 3
24072: PUSH
24073: LD_INT 4
24075: PUSH
24076: LD_INT 5
24078: PUSH
24079: LD_INT 6
24081: PUSH
24082: LD_INT 7
24084: PUSH
24085: LD_INT 8
24087: PUSH
24088: LD_INT 9
24090: PUSH
24091: LD_INT 10
24093: PUSH
24094: LD_INT 11
24096: PUSH
24097: LD_INT 12
24099: PUSH
24100: LD_INT 13
24102: PUSH
24103: LD_INT 14
24105: PUSH
24106: LD_INT 15
24108: PUSH
24109: LD_INT 16
24111: PUSH
24112: LD_INT 17
24114: PUSH
24115: LD_INT 18
24117: PUSH
24118: LD_INT 19
24120: PUSH
24121: LD_INT 20
24123: PUSH
24124: LD_INT 21
24126: PUSH
24127: LD_INT 22
24129: PUSH
24130: LD_INT 23
24132: PUSH
24133: LD_INT 24
24135: PUSH
24136: LD_INT 25
24138: PUSH
24139: LD_INT 26
24141: PUSH
24142: LD_INT 28
24144: PUSH
24145: LD_INT 30
24147: PUSH
24148: LD_INT 31
24150: PUSH
24151: LD_INT 32
24153: PUSH
24154: LD_INT 34
24156: PUSH
24157: LD_INT 36
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 101
24195: PUSH
24196: LD_INT 102
24198: PUSH
24199: LD_INT 103
24201: PUSH
24202: LD_INT 104
24204: PUSH
24205: LD_INT 105
24207: PUSH
24208: LD_INT 106
24210: PUSH
24211: LD_INT 107
24213: PUSH
24214: LD_INT 108
24216: PUSH
24217: LD_INT 109
24219: PUSH
24220: LD_INT 110
24222: PUSH
24223: LD_INT 111
24225: PUSH
24226: LD_INT 112
24228: PUSH
24229: LD_INT 114
24231: PUSH
24232: LD_INT 116
24234: PUSH
24235: LD_INT 117
24237: PUSH
24238: LD_INT 118
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: ST_TO_ADDR
24263: GO 25946
24265: LD_INT 12
24267: DOUBLE
24268: EQUAL
24269: IFTRUE 24273
24271: GO 24493
24273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24274: LD_ADDR_VAR 0 2
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: LD_INT 3
24287: PUSH
24288: LD_INT 4
24290: PUSH
24291: LD_INT 5
24293: PUSH
24294: LD_INT 6
24296: PUSH
24297: LD_INT 7
24299: PUSH
24300: LD_INT 8
24302: PUSH
24303: LD_INT 9
24305: PUSH
24306: LD_INT 10
24308: PUSH
24309: LD_INT 11
24311: PUSH
24312: LD_INT 12
24314: PUSH
24315: LD_INT 13
24317: PUSH
24318: LD_INT 14
24320: PUSH
24321: LD_INT 15
24323: PUSH
24324: LD_INT 16
24326: PUSH
24327: LD_INT 17
24329: PUSH
24330: LD_INT 18
24332: PUSH
24333: LD_INT 19
24335: PUSH
24336: LD_INT 20
24338: PUSH
24339: LD_INT 21
24341: PUSH
24342: LD_INT 22
24344: PUSH
24345: LD_INT 23
24347: PUSH
24348: LD_INT 24
24350: PUSH
24351: LD_INT 25
24353: PUSH
24354: LD_INT 26
24356: PUSH
24357: LD_INT 27
24359: PUSH
24360: LD_INT 28
24362: PUSH
24363: LD_INT 30
24365: PUSH
24366: LD_INT 31
24368: PUSH
24369: LD_INT 32
24371: PUSH
24372: LD_INT 33
24374: PUSH
24375: LD_INT 34
24377: PUSH
24378: LD_INT 36
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 101
24419: PUSH
24420: LD_INT 102
24422: PUSH
24423: LD_INT 103
24425: PUSH
24426: LD_INT 104
24428: PUSH
24429: LD_INT 105
24431: PUSH
24432: LD_INT 106
24434: PUSH
24435: LD_INT 107
24437: PUSH
24438: LD_INT 108
24440: PUSH
24441: LD_INT 109
24443: PUSH
24444: LD_INT 110
24446: PUSH
24447: LD_INT 111
24449: PUSH
24450: LD_INT 112
24452: PUSH
24453: LD_INT 113
24455: PUSH
24456: LD_INT 114
24458: PUSH
24459: LD_INT 116
24461: PUSH
24462: LD_INT 117
24464: PUSH
24465: LD_INT 118
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: ST_TO_ADDR
24491: GO 25946
24493: LD_INT 13
24495: DOUBLE
24496: EQUAL
24497: IFTRUE 24501
24499: GO 24709
24501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24502: LD_ADDR_VAR 0 2
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 3
24515: PUSH
24516: LD_INT 4
24518: PUSH
24519: LD_INT 5
24521: PUSH
24522: LD_INT 8
24524: PUSH
24525: LD_INT 9
24527: PUSH
24528: LD_INT 10
24530: PUSH
24531: LD_INT 11
24533: PUSH
24534: LD_INT 12
24536: PUSH
24537: LD_INT 14
24539: PUSH
24540: LD_INT 15
24542: PUSH
24543: LD_INT 16
24545: PUSH
24546: LD_INT 17
24548: PUSH
24549: LD_INT 18
24551: PUSH
24552: LD_INT 19
24554: PUSH
24555: LD_INT 20
24557: PUSH
24558: LD_INT 21
24560: PUSH
24561: LD_INT 22
24563: PUSH
24564: LD_INT 23
24566: PUSH
24567: LD_INT 24
24569: PUSH
24570: LD_INT 25
24572: PUSH
24573: LD_INT 26
24575: PUSH
24576: LD_INT 27
24578: PUSH
24579: LD_INT 28
24581: PUSH
24582: LD_INT 30
24584: PUSH
24585: LD_INT 31
24587: PUSH
24588: LD_INT 32
24590: PUSH
24591: LD_INT 33
24593: PUSH
24594: LD_INT 34
24596: PUSH
24597: LD_INT 36
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 101
24635: PUSH
24636: LD_INT 102
24638: PUSH
24639: LD_INT 103
24641: PUSH
24642: LD_INT 104
24644: PUSH
24645: LD_INT 105
24647: PUSH
24648: LD_INT 106
24650: PUSH
24651: LD_INT 107
24653: PUSH
24654: LD_INT 108
24656: PUSH
24657: LD_INT 109
24659: PUSH
24660: LD_INT 110
24662: PUSH
24663: LD_INT 111
24665: PUSH
24666: LD_INT 112
24668: PUSH
24669: LD_INT 113
24671: PUSH
24672: LD_INT 114
24674: PUSH
24675: LD_INT 116
24677: PUSH
24678: LD_INT 117
24680: PUSH
24681: LD_INT 118
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: ST_TO_ADDR
24707: GO 25946
24709: LD_INT 14
24711: DOUBLE
24712: EQUAL
24713: IFTRUE 24717
24715: GO 24941
24717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24718: LD_ADDR_VAR 0 2
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 3
24731: PUSH
24732: LD_INT 4
24734: PUSH
24735: LD_INT 5
24737: PUSH
24738: LD_INT 6
24740: PUSH
24741: LD_INT 7
24743: PUSH
24744: LD_INT 8
24746: PUSH
24747: LD_INT 9
24749: PUSH
24750: LD_INT 10
24752: PUSH
24753: LD_INT 11
24755: PUSH
24756: LD_INT 12
24758: PUSH
24759: LD_INT 13
24761: PUSH
24762: LD_INT 14
24764: PUSH
24765: LD_INT 15
24767: PUSH
24768: LD_INT 16
24770: PUSH
24771: LD_INT 17
24773: PUSH
24774: LD_INT 18
24776: PUSH
24777: LD_INT 19
24779: PUSH
24780: LD_INT 20
24782: PUSH
24783: LD_INT 21
24785: PUSH
24786: LD_INT 22
24788: PUSH
24789: LD_INT 23
24791: PUSH
24792: LD_INT 24
24794: PUSH
24795: LD_INT 25
24797: PUSH
24798: LD_INT 26
24800: PUSH
24801: LD_INT 27
24803: PUSH
24804: LD_INT 28
24806: PUSH
24807: LD_INT 29
24809: PUSH
24810: LD_INT 30
24812: PUSH
24813: LD_INT 31
24815: PUSH
24816: LD_INT 32
24818: PUSH
24819: LD_INT 33
24821: PUSH
24822: LD_INT 34
24824: PUSH
24825: LD_INT 36
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 101
24867: PUSH
24868: LD_INT 102
24870: PUSH
24871: LD_INT 103
24873: PUSH
24874: LD_INT 104
24876: PUSH
24877: LD_INT 105
24879: PUSH
24880: LD_INT 106
24882: PUSH
24883: LD_INT 107
24885: PUSH
24886: LD_INT 108
24888: PUSH
24889: LD_INT 109
24891: PUSH
24892: LD_INT 110
24894: PUSH
24895: LD_INT 111
24897: PUSH
24898: LD_INT 112
24900: PUSH
24901: LD_INT 113
24903: PUSH
24904: LD_INT 114
24906: PUSH
24907: LD_INT 116
24909: PUSH
24910: LD_INT 117
24912: PUSH
24913: LD_INT 118
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 25946
24941: LD_INT 15
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 25173
24949: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24950: LD_ADDR_VAR 0 2
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: LD_INT 4
24966: PUSH
24967: LD_INT 5
24969: PUSH
24970: LD_INT 6
24972: PUSH
24973: LD_INT 7
24975: PUSH
24976: LD_INT 8
24978: PUSH
24979: LD_INT 9
24981: PUSH
24982: LD_INT 10
24984: PUSH
24985: LD_INT 11
24987: PUSH
24988: LD_INT 12
24990: PUSH
24991: LD_INT 13
24993: PUSH
24994: LD_INT 14
24996: PUSH
24997: LD_INT 15
24999: PUSH
25000: LD_INT 16
25002: PUSH
25003: LD_INT 17
25005: PUSH
25006: LD_INT 18
25008: PUSH
25009: LD_INT 19
25011: PUSH
25012: LD_INT 20
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 22
25020: PUSH
25021: LD_INT 23
25023: PUSH
25024: LD_INT 24
25026: PUSH
25027: LD_INT 25
25029: PUSH
25030: LD_INT 26
25032: PUSH
25033: LD_INT 27
25035: PUSH
25036: LD_INT 28
25038: PUSH
25039: LD_INT 29
25041: PUSH
25042: LD_INT 30
25044: PUSH
25045: LD_INT 31
25047: PUSH
25048: LD_INT 32
25050: PUSH
25051: LD_INT 33
25053: PUSH
25054: LD_INT 34
25056: PUSH
25057: LD_INT 36
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 101
25099: PUSH
25100: LD_INT 102
25102: PUSH
25103: LD_INT 103
25105: PUSH
25106: LD_INT 104
25108: PUSH
25109: LD_INT 105
25111: PUSH
25112: LD_INT 106
25114: PUSH
25115: LD_INT 107
25117: PUSH
25118: LD_INT 108
25120: PUSH
25121: LD_INT 109
25123: PUSH
25124: LD_INT 110
25126: PUSH
25127: LD_INT 111
25129: PUSH
25130: LD_INT 112
25132: PUSH
25133: LD_INT 113
25135: PUSH
25136: LD_INT 114
25138: PUSH
25139: LD_INT 116
25141: PUSH
25142: LD_INT 117
25144: PUSH
25145: LD_INT 118
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: ST_TO_ADDR
25171: GO 25946
25173: LD_INT 16
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25317
25181: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25182: LD_ADDR_VAR 0 2
25186: PUSH
25187: LD_INT 2
25189: PUSH
25190: LD_INT 4
25192: PUSH
25193: LD_INT 5
25195: PUSH
25196: LD_INT 7
25198: PUSH
25199: LD_INT 11
25201: PUSH
25202: LD_INT 12
25204: PUSH
25205: LD_INT 15
25207: PUSH
25208: LD_INT 16
25210: PUSH
25211: LD_INT 20
25213: PUSH
25214: LD_INT 21
25216: PUSH
25217: LD_INT 22
25219: PUSH
25220: LD_INT 23
25222: PUSH
25223: LD_INT 25
25225: PUSH
25226: LD_INT 26
25228: PUSH
25229: LD_INT 30
25231: PUSH
25232: LD_INT 31
25234: PUSH
25235: LD_INT 32
25237: PUSH
25238: LD_INT 33
25240: PUSH
25241: LD_INT 34
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 101
25267: PUSH
25268: LD_INT 102
25270: PUSH
25271: LD_INT 103
25273: PUSH
25274: LD_INT 106
25276: PUSH
25277: LD_INT 108
25279: PUSH
25280: LD_INT 112
25282: PUSH
25283: LD_INT 113
25285: PUSH
25286: LD_INT 114
25288: PUSH
25289: LD_INT 116
25291: PUSH
25292: LD_INT 117
25294: PUSH
25295: LD_INT 118
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: ST_TO_ADDR
25315: GO 25946
25317: LD_INT 17
25319: DOUBLE
25320: EQUAL
25321: IFTRUE 25325
25323: GO 25549
25325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25326: LD_ADDR_VAR 0 2
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: LD_INT 4
25342: PUSH
25343: LD_INT 5
25345: PUSH
25346: LD_INT 6
25348: PUSH
25349: LD_INT 7
25351: PUSH
25352: LD_INT 8
25354: PUSH
25355: LD_INT 9
25357: PUSH
25358: LD_INT 10
25360: PUSH
25361: LD_INT 11
25363: PUSH
25364: LD_INT 12
25366: PUSH
25367: LD_INT 13
25369: PUSH
25370: LD_INT 14
25372: PUSH
25373: LD_INT 15
25375: PUSH
25376: LD_INT 16
25378: PUSH
25379: LD_INT 17
25381: PUSH
25382: LD_INT 18
25384: PUSH
25385: LD_INT 19
25387: PUSH
25388: LD_INT 20
25390: PUSH
25391: LD_INT 21
25393: PUSH
25394: LD_INT 22
25396: PUSH
25397: LD_INT 23
25399: PUSH
25400: LD_INT 24
25402: PUSH
25403: LD_INT 25
25405: PUSH
25406: LD_INT 26
25408: PUSH
25409: LD_INT 27
25411: PUSH
25412: LD_INT 28
25414: PUSH
25415: LD_INT 29
25417: PUSH
25418: LD_INT 30
25420: PUSH
25421: LD_INT 31
25423: PUSH
25424: LD_INT 32
25426: PUSH
25427: LD_INT 33
25429: PUSH
25430: LD_INT 34
25432: PUSH
25433: LD_INT 36
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 101
25475: PUSH
25476: LD_INT 102
25478: PUSH
25479: LD_INT 103
25481: PUSH
25482: LD_INT 104
25484: PUSH
25485: LD_INT 105
25487: PUSH
25488: LD_INT 106
25490: PUSH
25491: LD_INT 107
25493: PUSH
25494: LD_INT 108
25496: PUSH
25497: LD_INT 109
25499: PUSH
25500: LD_INT 110
25502: PUSH
25503: LD_INT 111
25505: PUSH
25506: LD_INT 112
25508: PUSH
25509: LD_INT 113
25511: PUSH
25512: LD_INT 114
25514: PUSH
25515: LD_INT 116
25517: PUSH
25518: LD_INT 117
25520: PUSH
25521: LD_INT 118
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: ST_TO_ADDR
25547: GO 25946
25549: LD_INT 18
25551: DOUBLE
25552: EQUAL
25553: IFTRUE 25557
25555: GO 25705
25557: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25558: LD_ADDR_VAR 0 2
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 4
25568: PUSH
25569: LD_INT 5
25571: PUSH
25572: LD_INT 7
25574: PUSH
25575: LD_INT 11
25577: PUSH
25578: LD_INT 12
25580: PUSH
25581: LD_INT 15
25583: PUSH
25584: LD_INT 16
25586: PUSH
25587: LD_INT 20
25589: PUSH
25590: LD_INT 21
25592: PUSH
25593: LD_INT 22
25595: PUSH
25596: LD_INT 23
25598: PUSH
25599: LD_INT 25
25601: PUSH
25602: LD_INT 26
25604: PUSH
25605: LD_INT 30
25607: PUSH
25608: LD_INT 31
25610: PUSH
25611: LD_INT 32
25613: PUSH
25614: LD_INT 33
25616: PUSH
25617: LD_INT 34
25619: PUSH
25620: LD_INT 35
25622: PUSH
25623: LD_INT 36
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 101
25651: PUSH
25652: LD_INT 102
25654: PUSH
25655: LD_INT 103
25657: PUSH
25658: LD_INT 106
25660: PUSH
25661: LD_INT 108
25663: PUSH
25664: LD_INT 112
25666: PUSH
25667: LD_INT 113
25669: PUSH
25670: LD_INT 114
25672: PUSH
25673: LD_INT 115
25675: PUSH
25676: LD_INT 116
25678: PUSH
25679: LD_INT 117
25681: PUSH
25682: LD_INT 118
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: ST_TO_ADDR
25703: GO 25946
25705: LD_INT 19
25707: DOUBLE
25708: EQUAL
25709: IFTRUE 25713
25711: GO 25945
25713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25714: LD_ADDR_VAR 0 2
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 3
25727: PUSH
25728: LD_INT 4
25730: PUSH
25731: LD_INT 5
25733: PUSH
25734: LD_INT 6
25736: PUSH
25737: LD_INT 7
25739: PUSH
25740: LD_INT 8
25742: PUSH
25743: LD_INT 9
25745: PUSH
25746: LD_INT 10
25748: PUSH
25749: LD_INT 11
25751: PUSH
25752: LD_INT 12
25754: PUSH
25755: LD_INT 13
25757: PUSH
25758: LD_INT 14
25760: PUSH
25761: LD_INT 15
25763: PUSH
25764: LD_INT 16
25766: PUSH
25767: LD_INT 17
25769: PUSH
25770: LD_INT 18
25772: PUSH
25773: LD_INT 19
25775: PUSH
25776: LD_INT 20
25778: PUSH
25779: LD_INT 21
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_INT 23
25787: PUSH
25788: LD_INT 24
25790: PUSH
25791: LD_INT 25
25793: PUSH
25794: LD_INT 26
25796: PUSH
25797: LD_INT 27
25799: PUSH
25800: LD_INT 28
25802: PUSH
25803: LD_INT 29
25805: PUSH
25806: LD_INT 30
25808: PUSH
25809: LD_INT 31
25811: PUSH
25812: LD_INT 32
25814: PUSH
25815: LD_INT 33
25817: PUSH
25818: LD_INT 34
25820: PUSH
25821: LD_INT 35
25823: PUSH
25824: LD_INT 36
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 101
25867: PUSH
25868: LD_INT 102
25870: PUSH
25871: LD_INT 103
25873: PUSH
25874: LD_INT 104
25876: PUSH
25877: LD_INT 105
25879: PUSH
25880: LD_INT 106
25882: PUSH
25883: LD_INT 107
25885: PUSH
25886: LD_INT 108
25888: PUSH
25889: LD_INT 109
25891: PUSH
25892: LD_INT 110
25894: PUSH
25895: LD_INT 111
25897: PUSH
25898: LD_INT 112
25900: PUSH
25901: LD_INT 113
25903: PUSH
25904: LD_INT 114
25906: PUSH
25907: LD_INT 115
25909: PUSH
25910: LD_INT 116
25912: PUSH
25913: LD_INT 117
25915: PUSH
25916: LD_INT 118
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: ST_TO_ADDR
25943: GO 25946
25945: POP
// end else
25946: GO 26177
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25948: LD_ADDR_VAR 0 2
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: LD_INT 3
25961: PUSH
25962: LD_INT 4
25964: PUSH
25965: LD_INT 5
25967: PUSH
25968: LD_INT 6
25970: PUSH
25971: LD_INT 7
25973: PUSH
25974: LD_INT 8
25976: PUSH
25977: LD_INT 9
25979: PUSH
25980: LD_INT 10
25982: PUSH
25983: LD_INT 11
25985: PUSH
25986: LD_INT 12
25988: PUSH
25989: LD_INT 13
25991: PUSH
25992: LD_INT 14
25994: PUSH
25995: LD_INT 15
25997: PUSH
25998: LD_INT 16
26000: PUSH
26001: LD_INT 17
26003: PUSH
26004: LD_INT 18
26006: PUSH
26007: LD_INT 19
26009: PUSH
26010: LD_INT 20
26012: PUSH
26013: LD_INT 21
26015: PUSH
26016: LD_INT 22
26018: PUSH
26019: LD_INT 23
26021: PUSH
26022: LD_INT 24
26024: PUSH
26025: LD_INT 25
26027: PUSH
26028: LD_INT 26
26030: PUSH
26031: LD_INT 27
26033: PUSH
26034: LD_INT 28
26036: PUSH
26037: LD_INT 29
26039: PUSH
26040: LD_INT 30
26042: PUSH
26043: LD_INT 31
26045: PUSH
26046: LD_INT 32
26048: PUSH
26049: LD_INT 33
26051: PUSH
26052: LD_INT 34
26054: PUSH
26055: LD_INT 35
26057: PUSH
26058: LD_INT 36
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 101
26101: PUSH
26102: LD_INT 102
26104: PUSH
26105: LD_INT 103
26107: PUSH
26108: LD_INT 104
26110: PUSH
26111: LD_INT 105
26113: PUSH
26114: LD_INT 106
26116: PUSH
26117: LD_INT 107
26119: PUSH
26120: LD_INT 108
26122: PUSH
26123: LD_INT 109
26125: PUSH
26126: LD_INT 110
26128: PUSH
26129: LD_INT 111
26131: PUSH
26132: LD_INT 112
26134: PUSH
26135: LD_INT 113
26137: PUSH
26138: LD_INT 114
26140: PUSH
26141: LD_INT 115
26143: PUSH
26144: LD_INT 116
26146: PUSH
26147: LD_INT 117
26149: PUSH
26150: LD_INT 118
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// if result then
26177: LD_VAR 0 2
26181: IFFALSE 26967
// begin normal :=  ;
26183: LD_ADDR_VAR 0 5
26187: PUSH
26188: LD_STRING 
26190: ST_TO_ADDR
// hardcore :=  ;
26191: LD_ADDR_VAR 0 6
26195: PUSH
26196: LD_STRING 
26198: ST_TO_ADDR
// active :=  ;
26199: LD_ADDR_VAR 0 7
26203: PUSH
26204: LD_STRING 
26206: ST_TO_ADDR
// for i = 1 to normalCounter do
26207: LD_ADDR_VAR 0 8
26211: PUSH
26212: DOUBLE
26213: LD_INT 1
26215: DEC
26216: ST_TO_ADDR
26217: LD_EXP 59
26221: PUSH
26222: FOR_TO
26223: IFFALSE 26324
// begin tmp := 0 ;
26225: LD_ADDR_VAR 0 3
26229: PUSH
26230: LD_STRING 0
26232: ST_TO_ADDR
// if result [ 1 ] then
26233: LD_VAR 0 2
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: IFFALSE 26306
// if result [ 1 ] [ 1 ] = i then
26243: LD_VAR 0 2
26247: PUSH
26248: LD_INT 1
26250: ARRAY
26251: PUSH
26252: LD_INT 1
26254: ARRAY
26255: PUSH
26256: LD_VAR 0 8
26260: EQUAL
26261: IFFALSE 26306
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26263: LD_ADDR_VAR 0 2
26267: PUSH
26268: LD_VAR 0 2
26272: PPUSH
26273: LD_INT 1
26275: PPUSH
26276: LD_VAR 0 2
26280: PUSH
26281: LD_INT 1
26283: ARRAY
26284: PPUSH
26285: LD_INT 1
26287: PPUSH
26288: CALL_OW 3
26292: PPUSH
26293: CALL_OW 1
26297: ST_TO_ADDR
// tmp := 1 ;
26298: LD_ADDR_VAR 0 3
26302: PUSH
26303: LD_STRING 1
26305: ST_TO_ADDR
// end ; normal := normal & tmp ;
26306: LD_ADDR_VAR 0 5
26310: PUSH
26311: LD_VAR 0 5
26315: PUSH
26316: LD_VAR 0 3
26320: STR
26321: ST_TO_ADDR
// end ;
26322: GO 26222
26324: POP
26325: POP
// for i = 1 to hardcoreCounter do
26326: LD_ADDR_VAR 0 8
26330: PUSH
26331: DOUBLE
26332: LD_INT 1
26334: DEC
26335: ST_TO_ADDR
26336: LD_EXP 60
26340: PUSH
26341: FOR_TO
26342: IFFALSE 26447
// begin tmp := 0 ;
26344: LD_ADDR_VAR 0 3
26348: PUSH
26349: LD_STRING 0
26351: ST_TO_ADDR
// if result [ 2 ] then
26352: LD_VAR 0 2
26356: PUSH
26357: LD_INT 2
26359: ARRAY
26360: IFFALSE 26429
// if result [ 2 ] [ 1 ] = 100 + i then
26362: LD_VAR 0 2
26366: PUSH
26367: LD_INT 2
26369: ARRAY
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PUSH
26375: LD_INT 100
26377: PUSH
26378: LD_VAR 0 8
26382: PLUS
26383: EQUAL
26384: IFFALSE 26429
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26386: LD_ADDR_VAR 0 2
26390: PUSH
26391: LD_VAR 0 2
26395: PPUSH
26396: LD_INT 2
26398: PPUSH
26399: LD_VAR 0 2
26403: PUSH
26404: LD_INT 2
26406: ARRAY
26407: PPUSH
26408: LD_INT 1
26410: PPUSH
26411: CALL_OW 3
26415: PPUSH
26416: CALL_OW 1
26420: ST_TO_ADDR
// tmp := 1 ;
26421: LD_ADDR_VAR 0 3
26425: PUSH
26426: LD_STRING 1
26428: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26429: LD_ADDR_VAR 0 6
26433: PUSH
26434: LD_VAR 0 6
26438: PUSH
26439: LD_VAR 0 3
26443: STR
26444: ST_TO_ADDR
// end ;
26445: GO 26341
26447: POP
26448: POP
// if isGameLoad then
26449: LD_VAR 0 1
26453: IFFALSE 26928
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26455: LD_ADDR_VAR 0 4
26459: PUSH
26460: LD_EXP 63
26464: PUSH
26465: LD_EXP 62
26469: PUSH
26470: LD_EXP 64
26474: PUSH
26475: LD_EXP 61
26479: PUSH
26480: LD_EXP 65
26484: PUSH
26485: LD_EXP 66
26489: PUSH
26490: LD_EXP 67
26494: PUSH
26495: LD_EXP 68
26499: PUSH
26500: LD_EXP 69
26504: PUSH
26505: LD_EXP 70
26509: PUSH
26510: LD_EXP 71
26514: PUSH
26515: LD_EXP 72
26519: PUSH
26520: LD_EXP 73
26524: PUSH
26525: LD_EXP 74
26529: PUSH
26530: LD_EXP 82
26534: PUSH
26535: LD_EXP 83
26539: PUSH
26540: LD_EXP 84
26544: PUSH
26545: LD_EXP 85
26549: PUSH
26550: LD_EXP 87
26554: PUSH
26555: LD_EXP 88
26559: PUSH
26560: LD_EXP 89
26564: PUSH
26565: LD_EXP 92
26569: PUSH
26570: LD_EXP 94
26574: PUSH
26575: LD_EXP 95
26579: PUSH
26580: LD_EXP 96
26584: PUSH
26585: LD_EXP 98
26589: PUSH
26590: LD_EXP 99
26594: PUSH
26595: LD_EXP 102
26599: PUSH
26600: LD_EXP 103
26604: PUSH
26605: LD_EXP 104
26609: PUSH
26610: LD_EXP 105
26614: PUSH
26615: LD_EXP 106
26619: PUSH
26620: LD_EXP 107
26624: PUSH
26625: LD_EXP 108
26629: PUSH
26630: LD_EXP 109
26634: PUSH
26635: LD_EXP 110
26639: PUSH
26640: LD_EXP 75
26644: PUSH
26645: LD_EXP 76
26649: PUSH
26650: LD_EXP 79
26654: PUSH
26655: LD_EXP 80
26659: PUSH
26660: LD_EXP 81
26664: PUSH
26665: LD_EXP 77
26669: PUSH
26670: LD_EXP 78
26674: PUSH
26675: LD_EXP 86
26679: PUSH
26680: LD_EXP 90
26684: PUSH
26685: LD_EXP 91
26689: PUSH
26690: LD_EXP 93
26694: PUSH
26695: LD_EXP 97
26699: PUSH
26700: LD_EXP 100
26704: PUSH
26705: LD_EXP 101
26709: PUSH
26710: LD_EXP 111
26714: PUSH
26715: LD_EXP 112
26719: PUSH
26720: LD_EXP 113
26724: PUSH
26725: LD_EXP 114
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: ST_TO_ADDR
// tmp :=  ;
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_STRING 
26793: ST_TO_ADDR
// for i = 1 to normalCounter do
26794: LD_ADDR_VAR 0 8
26798: PUSH
26799: DOUBLE
26800: LD_INT 1
26802: DEC
26803: ST_TO_ADDR
26804: LD_EXP 59
26808: PUSH
26809: FOR_TO
26810: IFFALSE 26846
// begin if flags [ i ] then
26812: LD_VAR 0 4
26816: PUSH
26817: LD_VAR 0 8
26821: ARRAY
26822: IFFALSE 26844
// tmp := tmp & i & ; ;
26824: LD_ADDR_VAR 0 3
26828: PUSH
26829: LD_VAR 0 3
26833: PUSH
26834: LD_VAR 0 8
26838: STR
26839: PUSH
26840: LD_STRING ;
26842: STR
26843: ST_TO_ADDR
// end ;
26844: GO 26809
26846: POP
26847: POP
// for i = 1 to hardcoreCounter do
26848: LD_ADDR_VAR 0 8
26852: PUSH
26853: DOUBLE
26854: LD_INT 1
26856: DEC
26857: ST_TO_ADDR
26858: LD_EXP 60
26862: PUSH
26863: FOR_TO
26864: IFFALSE 26910
// begin if flags [ normalCounter + i ] then
26866: LD_VAR 0 4
26870: PUSH
26871: LD_EXP 59
26875: PUSH
26876: LD_VAR 0 8
26880: PLUS
26881: ARRAY
26882: IFFALSE 26908
// tmp := tmp & ( 100 + i ) & ; ;
26884: LD_ADDR_VAR 0 3
26888: PUSH
26889: LD_VAR 0 3
26893: PUSH
26894: LD_INT 100
26896: PUSH
26897: LD_VAR 0 8
26901: PLUS
26902: STR
26903: PUSH
26904: LD_STRING ;
26906: STR
26907: ST_TO_ADDR
// end ;
26908: GO 26863
26910: POP
26911: POP
// if tmp then
26912: LD_VAR 0 3
26916: IFFALSE 26928
// active := tmp ;
26918: LD_ADDR_VAR 0 7
26922: PUSH
26923: LD_VAR 0 3
26927: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26928: LD_STRING getStreamItemsFromMission("
26930: PUSH
26931: LD_VAR 0 5
26935: STR
26936: PUSH
26937: LD_STRING ","
26939: STR
26940: PUSH
26941: LD_VAR 0 6
26945: STR
26946: PUSH
26947: LD_STRING ","
26949: STR
26950: PUSH
26951: LD_VAR 0 7
26955: STR
26956: PUSH
26957: LD_STRING ")
26959: STR
26960: PPUSH
26961: CALL_OW 559
// end else
26965: GO 26974
// ToLua ( getStreamItemsFromMission("","","") ) ;
26967: LD_STRING getStreamItemsFromMission("","","")
26969: PPUSH
26970: CALL_OW 559
// end ;
26974: LD_VAR 0 2
26978: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26979: LD_EXP 58
26983: PUSH
26984: LD_EXP 63
26988: AND
26989: IFFALSE 27113
26991: GO 26993
26993: DISABLE
26994: LD_INT 0
26996: PPUSH
26997: PPUSH
// begin enable ;
26998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26999: LD_ADDR_VAR 0 2
27003: PUSH
27004: LD_INT 22
27006: PUSH
27007: LD_OWVAR 2
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 34
27021: PUSH
27022: LD_INT 7
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 34
27031: PUSH
27032: LD_INT 45
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 34
27041: PUSH
27042: LD_INT 28
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 34
27051: PUSH
27052: LD_INT 47
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PPUSH
27070: CALL_OW 69
27074: ST_TO_ADDR
// if not tmp then
27075: LD_VAR 0 2
27079: NOT
27080: IFFALSE 27084
// exit ;
27082: GO 27113
// for i in tmp do
27084: LD_ADDR_VAR 0 1
27088: PUSH
27089: LD_VAR 0 2
27093: PUSH
27094: FOR_IN
27095: IFFALSE 27111
// begin SetLives ( i , 0 ) ;
27097: LD_VAR 0 1
27101: PPUSH
27102: LD_INT 0
27104: PPUSH
27105: CALL_OW 234
// end ;
27109: GO 27094
27111: POP
27112: POP
// end ;
27113: PPOPN 2
27115: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27116: LD_EXP 58
27120: PUSH
27121: LD_EXP 64
27125: AND
27126: IFFALSE 27210
27128: GO 27130
27130: DISABLE
27131: LD_INT 0
27133: PPUSH
27134: PPUSH
// begin enable ;
27135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27136: LD_ADDR_VAR 0 2
27140: PUSH
27141: LD_INT 22
27143: PUSH
27144: LD_OWVAR 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 32
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PPUSH
27167: CALL_OW 69
27171: ST_TO_ADDR
// if not tmp then
27172: LD_VAR 0 2
27176: NOT
27177: IFFALSE 27181
// exit ;
27179: GO 27210
// for i in tmp do
27181: LD_ADDR_VAR 0 1
27185: PUSH
27186: LD_VAR 0 2
27190: PUSH
27191: FOR_IN
27192: IFFALSE 27208
// begin SetLives ( i , 0 ) ;
27194: LD_VAR 0 1
27198: PPUSH
27199: LD_INT 0
27201: PPUSH
27202: CALL_OW 234
// end ;
27206: GO 27191
27208: POP
27209: POP
// end ;
27210: PPOPN 2
27212: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27213: LD_EXP 58
27217: PUSH
27218: LD_EXP 61
27222: AND
27223: IFFALSE 27316
27225: GO 27227
27227: DISABLE
27228: LD_INT 0
27230: PPUSH
// begin enable ;
27231: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27232: LD_ADDR_VAR 0 1
27236: PUSH
27237: LD_INT 22
27239: PUSH
27240: LD_OWVAR 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: LD_INT 25
27254: PUSH
27255: LD_INT 5
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 25
27264: PUSH
27265: LD_INT 9
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 25
27274: PUSH
27275: LD_INT 8
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PPUSH
27292: CALL_OW 69
27296: PUSH
27297: FOR_IN
27298: IFFALSE 27314
// begin SetClass ( i , 1 ) ;
27300: LD_VAR 0 1
27304: PPUSH
27305: LD_INT 1
27307: PPUSH
27308: CALL_OW 336
// end ;
27312: GO 27297
27314: POP
27315: POP
// end ;
27316: PPOPN 1
27318: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27319: LD_EXP 58
27323: PUSH
27324: LD_EXP 62
27328: AND
27329: PUSH
27330: LD_OWVAR 65
27334: PUSH
27335: LD_INT 7
27337: LESS
27338: AND
27339: IFFALSE 27353
27341: GO 27343
27343: DISABLE
// begin enable ;
27344: ENABLE
// game_speed := 7 ;
27345: LD_ADDR_OWVAR 65
27349: PUSH
27350: LD_INT 7
27352: ST_TO_ADDR
// end ;
27353: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27354: LD_EXP 58
27358: PUSH
27359: LD_EXP 65
27363: AND
27364: IFFALSE 27566
27366: GO 27368
27368: DISABLE
27369: LD_INT 0
27371: PPUSH
27372: PPUSH
27373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27374: LD_ADDR_VAR 0 3
27378: PUSH
27379: LD_INT 81
27381: PUSH
27382: LD_OWVAR 2
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 21
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PPUSH
27405: CALL_OW 69
27409: ST_TO_ADDR
// if not tmp then
27410: LD_VAR 0 3
27414: NOT
27415: IFFALSE 27419
// exit ;
27417: GO 27566
// if tmp > 5 then
27419: LD_VAR 0 3
27423: PUSH
27424: LD_INT 5
27426: GREATER
27427: IFFALSE 27439
// k := 5 else
27429: LD_ADDR_VAR 0 2
27433: PUSH
27434: LD_INT 5
27436: ST_TO_ADDR
27437: GO 27449
// k := tmp ;
27439: LD_ADDR_VAR 0 2
27443: PUSH
27444: LD_VAR 0 3
27448: ST_TO_ADDR
// for i := 1 to k do
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: DOUBLE
27455: LD_INT 1
27457: DEC
27458: ST_TO_ADDR
27459: LD_VAR 0 2
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27564
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27467: LD_VAR 0 3
27471: PUSH
27472: LD_VAR 0 1
27476: ARRAY
27477: PPUSH
27478: LD_VAR 0 1
27482: PUSH
27483: LD_INT 4
27485: MOD
27486: PUSH
27487: LD_INT 1
27489: PLUS
27490: PPUSH
27491: CALL_OW 259
27495: PUSH
27496: LD_INT 10
27498: LESS
27499: IFFALSE 27562
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27501: LD_VAR 0 3
27505: PUSH
27506: LD_VAR 0 1
27510: ARRAY
27511: PPUSH
27512: LD_VAR 0 1
27516: PUSH
27517: LD_INT 4
27519: MOD
27520: PUSH
27521: LD_INT 1
27523: PLUS
27524: PPUSH
27525: LD_VAR 0 3
27529: PUSH
27530: LD_VAR 0 1
27534: ARRAY
27535: PPUSH
27536: LD_VAR 0 1
27540: PUSH
27541: LD_INT 4
27543: MOD
27544: PUSH
27545: LD_INT 1
27547: PLUS
27548: PPUSH
27549: CALL_OW 259
27553: PUSH
27554: LD_INT 1
27556: PLUS
27557: PPUSH
27558: CALL_OW 237
27562: GO 27464
27564: POP
27565: POP
// end ;
27566: PPOPN 3
27568: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27569: LD_EXP 58
27573: PUSH
27574: LD_EXP 66
27578: AND
27579: IFFALSE 27599
27581: GO 27583
27583: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27584: LD_INT 4
27586: PPUSH
27587: LD_OWVAR 2
27591: PPUSH
27592: LD_INT 0
27594: PPUSH
27595: CALL_OW 324
27599: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27600: LD_EXP 58
27604: PUSH
27605: LD_EXP 95
27609: AND
27610: IFFALSE 27630
27612: GO 27614
27614: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27615: LD_INT 19
27617: PPUSH
27618: LD_OWVAR 2
27622: PPUSH
27623: LD_INT 0
27625: PPUSH
27626: CALL_OW 324
27630: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27631: LD_EXP 58
27635: PUSH
27636: LD_EXP 67
27640: AND
27641: IFFALSE 27743
27643: GO 27645
27645: DISABLE
27646: LD_INT 0
27648: PPUSH
27649: PPUSH
// begin enable ;
27650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27651: LD_ADDR_VAR 0 2
27655: PUSH
27656: LD_INT 22
27658: PUSH
27659: LD_OWVAR 2
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: LD_INT 34
27673: PUSH
27674: LD_INT 11
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 34
27683: PUSH
27684: LD_INT 30
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PPUSH
27700: CALL_OW 69
27704: ST_TO_ADDR
// if not tmp then
27705: LD_VAR 0 2
27709: NOT
27710: IFFALSE 27714
// exit ;
27712: GO 27743
// for i in tmp do
27714: LD_ADDR_VAR 0 1
27718: PUSH
27719: LD_VAR 0 2
27723: PUSH
27724: FOR_IN
27725: IFFALSE 27741
// begin SetLives ( i , 0 ) ;
27727: LD_VAR 0 1
27731: PPUSH
27732: LD_INT 0
27734: PPUSH
27735: CALL_OW 234
// end ;
27739: GO 27724
27741: POP
27742: POP
// end ;
27743: PPOPN 2
27745: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27746: LD_EXP 58
27750: PUSH
27751: LD_EXP 68
27755: AND
27756: IFFALSE 27776
27758: GO 27760
27760: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27761: LD_INT 32
27763: PPUSH
27764: LD_OWVAR 2
27768: PPUSH
27769: LD_INT 0
27771: PPUSH
27772: CALL_OW 324
27776: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27777: LD_EXP 58
27781: PUSH
27782: LD_EXP 69
27786: AND
27787: IFFALSE 27968
27789: GO 27791
27791: DISABLE
27792: LD_INT 0
27794: PPUSH
27795: PPUSH
27796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27797: LD_ADDR_VAR 0 2
27801: PUSH
27802: LD_INT 22
27804: PUSH
27805: LD_OWVAR 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 33
27816: PUSH
27817: LD_INT 3
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 69
27832: ST_TO_ADDR
// if not tmp then
27833: LD_VAR 0 2
27837: NOT
27838: IFFALSE 27842
// exit ;
27840: GO 27968
// side := 0 ;
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_INT 0
27849: ST_TO_ADDR
// for i := 1 to 8 do
27850: LD_ADDR_VAR 0 1
27854: PUSH
27855: DOUBLE
27856: LD_INT 1
27858: DEC
27859: ST_TO_ADDR
27860: LD_INT 8
27862: PUSH
27863: FOR_TO
27864: IFFALSE 27912
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27866: LD_OWVAR 2
27870: PUSH
27871: LD_VAR 0 1
27875: NONEQUAL
27876: PUSH
27877: LD_OWVAR 2
27881: PPUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 81
27891: PUSH
27892: LD_INT 2
27894: EQUAL
27895: AND
27896: IFFALSE 27910
// begin side := i ;
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_VAR 0 1
27907: ST_TO_ADDR
// break ;
27908: GO 27912
// end ;
27910: GO 27863
27912: POP
27913: POP
// if not side then
27914: LD_VAR 0 3
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27968
// for i := 1 to tmp do
27923: LD_ADDR_VAR 0 1
27927: PUSH
27928: DOUBLE
27929: LD_INT 1
27931: DEC
27932: ST_TO_ADDR
27933: LD_VAR 0 2
27937: PUSH
27938: FOR_TO
27939: IFFALSE 27966
// if Prob ( 60 ) then
27941: LD_INT 60
27943: PPUSH
27944: CALL_OW 13
27948: IFFALSE 27964
// SetSide ( i , side ) ;
27950: LD_VAR 0 1
27954: PPUSH
27955: LD_VAR 0 3
27959: PPUSH
27960: CALL_OW 235
27964: GO 27938
27966: POP
27967: POP
// end ;
27968: PPOPN 3
27970: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27971: LD_EXP 58
27975: PUSH
27976: LD_EXP 71
27980: AND
27981: IFFALSE 28100
27983: GO 27985
27985: DISABLE
27986: LD_INT 0
27988: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27989: LD_ADDR_VAR 0 1
27993: PUSH
27994: LD_INT 22
27996: PUSH
27997: LD_OWVAR 2
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 21
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 23
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: PUSH
28043: FOR_IN
28044: IFFALSE 28098
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 257
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: LD_INT 3
28064: PUSH
28065: LD_INT 4
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: IN
28074: IFFALSE 28096
// SetClass ( un , rand ( 1 , 4 ) ) ;
28076: LD_VAR 0 1
28080: PPUSH
28081: LD_INT 1
28083: PPUSH
28084: LD_INT 4
28086: PPUSH
28087: CALL_OW 12
28091: PPUSH
28092: CALL_OW 336
28096: GO 28043
28098: POP
28099: POP
// end ;
28100: PPOPN 1
28102: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28103: LD_EXP 58
28107: PUSH
28108: LD_EXP 70
28112: AND
28113: IFFALSE 28192
28115: GO 28117
28117: DISABLE
28118: LD_INT 0
28120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28121: LD_ADDR_VAR 0 1
28125: PUSH
28126: LD_INT 22
28128: PUSH
28129: LD_OWVAR 2
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 21
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PPUSH
28152: CALL_OW 69
28156: ST_TO_ADDR
// if not tmp then
28157: LD_VAR 0 1
28161: NOT
28162: IFFALSE 28166
// exit ;
28164: GO 28192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28166: LD_VAR 0 1
28170: PUSH
28171: LD_INT 1
28173: PPUSH
28174: LD_VAR 0 1
28178: PPUSH
28179: CALL_OW 12
28183: ARRAY
28184: PPUSH
28185: LD_INT 100
28187: PPUSH
28188: CALL_OW 234
// end ;
28192: PPOPN 1
28194: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28195: LD_EXP 58
28199: PUSH
28200: LD_EXP 72
28204: AND
28205: IFFALSE 28303
28207: GO 28209
28209: DISABLE
28210: LD_INT 0
28212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28213: LD_ADDR_VAR 0 1
28217: PUSH
28218: LD_INT 22
28220: PUSH
28221: LD_OWVAR 2
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 21
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PPUSH
28244: CALL_OW 69
28248: ST_TO_ADDR
// if not tmp then
28249: LD_VAR 0 1
28253: NOT
28254: IFFALSE 28258
// exit ;
28256: GO 28303
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28258: LD_VAR 0 1
28262: PUSH
28263: LD_INT 1
28265: PPUSH
28266: LD_VAR 0 1
28270: PPUSH
28271: CALL_OW 12
28275: ARRAY
28276: PPUSH
28277: LD_INT 1
28279: PPUSH
28280: LD_INT 4
28282: PPUSH
28283: CALL_OW 12
28287: PPUSH
28288: LD_INT 3000
28290: PPUSH
28291: LD_INT 9000
28293: PPUSH
28294: CALL_OW 12
28298: PPUSH
28299: CALL_OW 492
// end ;
28303: PPOPN 1
28305: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28306: LD_EXP 58
28310: PUSH
28311: LD_EXP 73
28315: AND
28316: IFFALSE 28336
28318: GO 28320
28320: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28321: LD_INT 1
28323: PPUSH
28324: LD_OWVAR 2
28328: PPUSH
28329: LD_INT 0
28331: PPUSH
28332: CALL_OW 324
28336: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28337: LD_EXP 58
28341: PUSH
28342: LD_EXP 74
28346: AND
28347: IFFALSE 28430
28349: GO 28351
28351: DISABLE
28352: LD_INT 0
28354: PPUSH
28355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28356: LD_ADDR_VAR 0 2
28360: PUSH
28361: LD_INT 22
28363: PUSH
28364: LD_OWVAR 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 21
28375: PUSH
28376: LD_INT 3
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PPUSH
28387: CALL_OW 69
28391: ST_TO_ADDR
// if not tmp then
28392: LD_VAR 0 2
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28430
// for i in tmp do
28401: LD_ADDR_VAR 0 1
28405: PUSH
28406: LD_VAR 0 2
28410: PUSH
28411: FOR_IN
28412: IFFALSE 28428
// SetBLevel ( i , 10 ) ;
28414: LD_VAR 0 1
28418: PPUSH
28419: LD_INT 10
28421: PPUSH
28422: CALL_OW 241
28426: GO 28411
28428: POP
28429: POP
// end ;
28430: PPOPN 2
28432: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28433: LD_EXP 58
28437: PUSH
28438: LD_EXP 75
28442: AND
28443: IFFALSE 28554
28445: GO 28447
28447: DISABLE
28448: LD_INT 0
28450: PPUSH
28451: PPUSH
28452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28453: LD_ADDR_VAR 0 3
28457: PUSH
28458: LD_INT 22
28460: PUSH
28461: LD_OWVAR 2
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 25
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PPUSH
28484: CALL_OW 69
28488: ST_TO_ADDR
// if not tmp then
28489: LD_VAR 0 3
28493: NOT
28494: IFFALSE 28498
// exit ;
28496: GO 28554
// un := tmp [ rand ( 1 , tmp ) ] ;
28498: LD_ADDR_VAR 0 2
28502: PUSH
28503: LD_VAR 0 3
28507: PUSH
28508: LD_INT 1
28510: PPUSH
28511: LD_VAR 0 3
28515: PPUSH
28516: CALL_OW 12
28520: ARRAY
28521: ST_TO_ADDR
// if Crawls ( un ) then
28522: LD_VAR 0 2
28526: PPUSH
28527: CALL_OW 318
28531: IFFALSE 28542
// ComWalk ( un ) ;
28533: LD_VAR 0 2
28537: PPUSH
28538: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28542: LD_VAR 0 2
28546: PPUSH
28547: LD_INT 5
28549: PPUSH
28550: CALL_OW 336
// end ;
28554: PPOPN 3
28556: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28557: LD_EXP 58
28561: PUSH
28562: LD_EXP 76
28566: AND
28567: PUSH
28568: LD_OWVAR 67
28572: PUSH
28573: LD_INT 4
28575: LESS
28576: AND
28577: IFFALSE 28596
28579: GO 28581
28581: DISABLE
// begin Difficulty := Difficulty + 1 ;
28582: LD_ADDR_OWVAR 67
28586: PUSH
28587: LD_OWVAR 67
28591: PUSH
28592: LD_INT 1
28594: PLUS
28595: ST_TO_ADDR
// end ;
28596: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28597: LD_EXP 58
28601: PUSH
28602: LD_EXP 77
28606: AND
28607: IFFALSE 28710
28609: GO 28611
28611: DISABLE
28612: LD_INT 0
28614: PPUSH
// begin for i := 1 to 5 do
28615: LD_ADDR_VAR 0 1
28619: PUSH
28620: DOUBLE
28621: LD_INT 1
28623: DEC
28624: ST_TO_ADDR
28625: LD_INT 5
28627: PUSH
28628: FOR_TO
28629: IFFALSE 28708
// begin uc_nation := nation_nature ;
28631: LD_ADDR_OWVAR 21
28635: PUSH
28636: LD_INT 0
28638: ST_TO_ADDR
// uc_side := 0 ;
28639: LD_ADDR_OWVAR 20
28643: PUSH
28644: LD_INT 0
28646: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28647: LD_ADDR_OWVAR 29
28651: PUSH
28652: LD_INT 12
28654: PUSH
28655: LD_INT 12
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: ST_TO_ADDR
// hc_agressivity := 20 ;
28662: LD_ADDR_OWVAR 35
28666: PUSH
28667: LD_INT 20
28669: ST_TO_ADDR
// hc_class := class_tiger ;
28670: LD_ADDR_OWVAR 28
28674: PUSH
28675: LD_INT 14
28677: ST_TO_ADDR
// hc_gallery :=  ;
28678: LD_ADDR_OWVAR 33
28682: PUSH
28683: LD_STRING 
28685: ST_TO_ADDR
// hc_name :=  ;
28686: LD_ADDR_OWVAR 26
28690: PUSH
28691: LD_STRING 
28693: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28694: CALL_OW 44
28698: PPUSH
28699: LD_INT 0
28701: PPUSH
28702: CALL_OW 51
// end ;
28706: GO 28628
28708: POP
28709: POP
// end ;
28710: PPOPN 1
28712: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28713: LD_EXP 58
28717: PUSH
28718: LD_EXP 78
28722: AND
28723: IFFALSE 28732
28725: GO 28727
28727: DISABLE
// StreamSibBomb ;
28728: CALL 28733 0 0
28732: END
// export function StreamSibBomb ; var i , x , y ; begin
28733: LD_INT 0
28735: PPUSH
28736: PPUSH
28737: PPUSH
28738: PPUSH
// result := false ;
28739: LD_ADDR_VAR 0 1
28743: PUSH
28744: LD_INT 0
28746: ST_TO_ADDR
// for i := 1 to 16 do
28747: LD_ADDR_VAR 0 2
28751: PUSH
28752: DOUBLE
28753: LD_INT 1
28755: DEC
28756: ST_TO_ADDR
28757: LD_INT 16
28759: PUSH
28760: FOR_TO
28761: IFFALSE 28960
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28763: LD_ADDR_VAR 0 3
28767: PUSH
28768: LD_INT 10
28770: PUSH
28771: LD_INT 20
28773: PUSH
28774: LD_INT 30
28776: PUSH
28777: LD_INT 40
28779: PUSH
28780: LD_INT 50
28782: PUSH
28783: LD_INT 60
28785: PUSH
28786: LD_INT 70
28788: PUSH
28789: LD_INT 80
28791: PUSH
28792: LD_INT 90
28794: PUSH
28795: LD_INT 100
28797: PUSH
28798: LD_INT 110
28800: PUSH
28801: LD_INT 120
28803: PUSH
28804: LD_INT 130
28806: PUSH
28807: LD_INT 140
28809: PUSH
28810: LD_INT 150
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: PPUSH
28833: LD_INT 15
28835: PPUSH
28836: CALL_OW 12
28840: ARRAY
28841: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28842: LD_ADDR_VAR 0 4
28846: PUSH
28847: LD_INT 10
28849: PUSH
28850: LD_INT 20
28852: PUSH
28853: LD_INT 30
28855: PUSH
28856: LD_INT 40
28858: PUSH
28859: LD_INT 50
28861: PUSH
28862: LD_INT 60
28864: PUSH
28865: LD_INT 70
28867: PUSH
28868: LD_INT 80
28870: PUSH
28871: LD_INT 90
28873: PUSH
28874: LD_INT 100
28876: PUSH
28877: LD_INT 110
28879: PUSH
28880: LD_INT 120
28882: PUSH
28883: LD_INT 130
28885: PUSH
28886: LD_INT 140
28888: PUSH
28889: LD_INT 150
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PPUSH
28912: LD_INT 15
28914: PPUSH
28915: CALL_OW 12
28919: ARRAY
28920: ST_TO_ADDR
// if ValidHex ( x , y ) then
28921: LD_VAR 0 3
28925: PPUSH
28926: LD_VAR 0 4
28930: PPUSH
28931: CALL_OW 488
28935: IFFALSE 28958
// begin result := [ x , y ] ;
28937: LD_ADDR_VAR 0 1
28941: PUSH
28942: LD_VAR 0 3
28946: PUSH
28947: LD_VAR 0 4
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: ST_TO_ADDR
// break ;
28956: GO 28960
// end ; end ;
28958: GO 28760
28960: POP
28961: POP
// if result then
28962: LD_VAR 0 1
28966: IFFALSE 29026
// begin ToLua ( playSibBomb() ) ;
28968: LD_STRING playSibBomb()
28970: PPUSH
28971: CALL_OW 559
// wait ( 0 0$14 ) ;
28975: LD_INT 490
28977: PPUSH
28978: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28982: LD_VAR 0 1
28986: PUSH
28987: LD_INT 1
28989: ARRAY
28990: PPUSH
28991: LD_VAR 0 1
28995: PUSH
28996: LD_INT 2
28998: ARRAY
28999: PPUSH
29000: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29004: LD_VAR 0 1
29008: PUSH
29009: LD_INT 1
29011: ARRAY
29012: PPUSH
29013: LD_VAR 0 1
29017: PUSH
29018: LD_INT 2
29020: ARRAY
29021: PPUSH
29022: CALL_OW 429
// end ; end ;
29026: LD_VAR 0 1
29030: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29031: LD_EXP 58
29035: PUSH
29036: LD_EXP 80
29040: AND
29041: IFFALSE 29053
29043: GO 29045
29045: DISABLE
// YouLost (  ) ;
29046: LD_STRING 
29048: PPUSH
29049: CALL_OW 104
29053: END
// every 0 0$1 trigger StreamModeActive and sFog do
29054: LD_EXP 58
29058: PUSH
29059: LD_EXP 79
29063: AND
29064: IFFALSE 29078
29066: GO 29068
29068: DISABLE
// FogOff ( your_side ) ;
29069: LD_OWVAR 2
29073: PPUSH
29074: CALL_OW 344
29078: END
// every 0 0$1 trigger StreamModeActive and sSun do
29079: LD_EXP 58
29083: PUSH
29084: LD_EXP 81
29088: AND
29089: IFFALSE 29117
29091: GO 29093
29093: DISABLE
// begin solar_recharge_percent := 0 ;
29094: LD_ADDR_OWVAR 79
29098: PUSH
29099: LD_INT 0
29101: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29102: LD_INT 10500
29104: PPUSH
29105: CALL_OW 67
// solar_recharge_percent := 100 ;
29109: LD_ADDR_OWVAR 79
29113: PUSH
29114: LD_INT 100
29116: ST_TO_ADDR
// end ;
29117: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29118: LD_EXP 58
29122: PUSH
29123: LD_EXP 82
29127: AND
29128: IFFALSE 29367
29130: GO 29132
29132: DISABLE
29133: LD_INT 0
29135: PPUSH
29136: PPUSH
29137: PPUSH
// begin tmp := [ ] ;
29138: LD_ADDR_VAR 0 3
29142: PUSH
29143: EMPTY
29144: ST_TO_ADDR
// for i := 1 to 6 do
29145: LD_ADDR_VAR 0 1
29149: PUSH
29150: DOUBLE
29151: LD_INT 1
29153: DEC
29154: ST_TO_ADDR
29155: LD_INT 6
29157: PUSH
29158: FOR_TO
29159: IFFALSE 29264
// begin uc_nation := nation_nature ;
29161: LD_ADDR_OWVAR 21
29165: PUSH
29166: LD_INT 0
29168: ST_TO_ADDR
// uc_side := 0 ;
29169: LD_ADDR_OWVAR 20
29173: PUSH
29174: LD_INT 0
29176: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29177: LD_ADDR_OWVAR 29
29181: PUSH
29182: LD_INT 12
29184: PUSH
29185: LD_INT 12
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: ST_TO_ADDR
// hc_agressivity := 20 ;
29192: LD_ADDR_OWVAR 35
29196: PUSH
29197: LD_INT 20
29199: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29200: LD_ADDR_OWVAR 28
29204: PUSH
29205: LD_INT 17
29207: ST_TO_ADDR
// hc_gallery :=  ;
29208: LD_ADDR_OWVAR 33
29212: PUSH
29213: LD_STRING 
29215: ST_TO_ADDR
// hc_name :=  ;
29216: LD_ADDR_OWVAR 26
29220: PUSH
29221: LD_STRING 
29223: ST_TO_ADDR
// un := CreateHuman ;
29224: LD_ADDR_VAR 0 2
29228: PUSH
29229: CALL_OW 44
29233: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29234: LD_VAR 0 2
29238: PPUSH
29239: LD_INT 1
29241: PPUSH
29242: CALL_OW 51
// tmp := tmp ^ un ;
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: LD_VAR 0 3
29255: PUSH
29256: LD_VAR 0 2
29260: ADD
29261: ST_TO_ADDR
// end ;
29262: GO 29158
29264: POP
29265: POP
// repeat wait ( 0 0$1 ) ;
29266: LD_INT 35
29268: PPUSH
29269: CALL_OW 67
// for un in tmp do
29273: LD_ADDR_VAR 0 2
29277: PUSH
29278: LD_VAR 0 3
29282: PUSH
29283: FOR_IN
29284: IFFALSE 29358
// begin if IsDead ( un ) then
29286: LD_VAR 0 2
29290: PPUSH
29291: CALL_OW 301
29295: IFFALSE 29315
// begin tmp := tmp diff un ;
29297: LD_ADDR_VAR 0 3
29301: PUSH
29302: LD_VAR 0 3
29306: PUSH
29307: LD_VAR 0 2
29311: DIFF
29312: ST_TO_ADDR
// continue ;
29313: GO 29283
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29315: LD_VAR 0 2
29319: PPUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 22
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PPUSH
29337: CALL_OW 69
29341: PPUSH
29342: LD_VAR 0 2
29346: PPUSH
29347: CALL_OW 74
29351: PPUSH
29352: CALL_OW 115
// end ;
29356: GO 29283
29358: POP
29359: POP
// until not tmp ;
29360: LD_VAR 0 3
29364: NOT
29365: IFFALSE 29266
// end ;
29367: PPOPN 3
29369: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29370: LD_EXP 58
29374: PUSH
29375: LD_EXP 83
29379: AND
29380: IFFALSE 29434
29382: GO 29384
29384: DISABLE
// begin ToLua ( displayTroll(); ) ;
29385: LD_STRING displayTroll();
29387: PPUSH
29388: CALL_OW 559
// wait ( 3 3$00 ) ;
29392: LD_INT 6300
29394: PPUSH
29395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29399: LD_STRING hideTroll();
29401: PPUSH
29402: CALL_OW 559
// wait ( 1 1$00 ) ;
29406: LD_INT 2100
29408: PPUSH
29409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29413: LD_STRING displayTroll();
29415: PPUSH
29416: CALL_OW 559
// wait ( 1 1$00 ) ;
29420: LD_INT 2100
29422: PPUSH
29423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29427: LD_STRING hideTroll();
29429: PPUSH
29430: CALL_OW 559
// end ;
29434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29435: LD_EXP 58
29439: PUSH
29440: LD_EXP 84
29444: AND
29445: IFFALSE 29508
29447: GO 29449
29449: DISABLE
29450: LD_INT 0
29452: PPUSH
// begin p := 0 ;
29453: LD_ADDR_VAR 0 1
29457: PUSH
29458: LD_INT 0
29460: ST_TO_ADDR
// repeat game_speed := 1 ;
29461: LD_ADDR_OWVAR 65
29465: PUSH
29466: LD_INT 1
29468: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29469: LD_INT 35
29471: PPUSH
29472: CALL_OW 67
// p := p + 1 ;
29476: LD_ADDR_VAR 0 1
29480: PUSH
29481: LD_VAR 0 1
29485: PUSH
29486: LD_INT 1
29488: PLUS
29489: ST_TO_ADDR
// until p >= 60 ;
29490: LD_VAR 0 1
29494: PUSH
29495: LD_INT 60
29497: GREATEREQUAL
29498: IFFALSE 29461
// game_speed := 4 ;
29500: LD_ADDR_OWVAR 65
29504: PUSH
29505: LD_INT 4
29507: ST_TO_ADDR
// end ;
29508: PPOPN 1
29510: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29511: LD_EXP 58
29515: PUSH
29516: LD_EXP 85
29520: AND
29521: IFFALSE 29667
29523: GO 29525
29525: DISABLE
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29530: LD_ADDR_VAR 0 1
29534: PUSH
29535: LD_INT 22
29537: PUSH
29538: LD_OWVAR 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: LD_INT 30
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 30
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PPUSH
29579: CALL_OW 69
29583: ST_TO_ADDR
// if not depot then
29584: LD_VAR 0 1
29588: NOT
29589: IFFALSE 29593
// exit ;
29591: GO 29667
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29593: LD_ADDR_VAR 0 2
29597: PUSH
29598: LD_VAR 0 1
29602: PUSH
29603: LD_INT 1
29605: PPUSH
29606: LD_VAR 0 1
29610: PPUSH
29611: CALL_OW 12
29615: ARRAY
29616: PPUSH
29617: CALL_OW 274
29621: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29622: LD_VAR 0 2
29626: PPUSH
29627: LD_INT 1
29629: PPUSH
29630: LD_INT 0
29632: PPUSH
29633: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29637: LD_VAR 0 2
29641: PPUSH
29642: LD_INT 2
29644: PPUSH
29645: LD_INT 0
29647: PPUSH
29648: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29652: LD_VAR 0 2
29656: PPUSH
29657: LD_INT 3
29659: PPUSH
29660: LD_INT 0
29662: PPUSH
29663: CALL_OW 277
// end ;
29667: PPOPN 2
29669: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29670: LD_EXP 58
29674: PUSH
29675: LD_EXP 86
29679: AND
29680: IFFALSE 29777
29682: GO 29684
29684: DISABLE
29685: LD_INT 0
29687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29688: LD_ADDR_VAR 0 1
29692: PUSH
29693: LD_INT 22
29695: PUSH
29696: LD_OWVAR 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 21
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 23
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: PPUSH
29737: CALL_OW 69
29741: ST_TO_ADDR
// if not tmp then
29742: LD_VAR 0 1
29746: NOT
29747: IFFALSE 29751
// exit ;
29749: GO 29777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29751: LD_VAR 0 1
29755: PUSH
29756: LD_INT 1
29758: PPUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 12
29768: ARRAY
29769: PPUSH
29770: LD_INT 200
29772: PPUSH
29773: CALL_OW 234
// end ;
29777: PPOPN 1
29779: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29780: LD_EXP 58
29784: PUSH
29785: LD_EXP 87
29789: AND
29790: IFFALSE 29869
29792: GO 29794
29794: DISABLE
29795: LD_INT 0
29797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29798: LD_ADDR_VAR 0 1
29802: PUSH
29803: LD_INT 22
29805: PUSH
29806: LD_OWVAR 2
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 21
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PPUSH
29829: CALL_OW 69
29833: ST_TO_ADDR
// if not tmp then
29834: LD_VAR 0 1
29838: NOT
29839: IFFALSE 29843
// exit ;
29841: GO 29869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29843: LD_VAR 0 1
29847: PUSH
29848: LD_INT 1
29850: PPUSH
29851: LD_VAR 0 1
29855: PPUSH
29856: CALL_OW 12
29860: ARRAY
29861: PPUSH
29862: LD_INT 60
29864: PPUSH
29865: CALL_OW 234
// end ;
29869: PPOPN 1
29871: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29872: LD_EXP 58
29876: PUSH
29877: LD_EXP 88
29881: AND
29882: IFFALSE 29981
29884: GO 29886
29886: DISABLE
29887: LD_INT 0
29889: PPUSH
29890: PPUSH
// begin enable ;
29891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29892: LD_ADDR_VAR 0 1
29896: PUSH
29897: LD_INT 22
29899: PUSH
29900: LD_OWVAR 2
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 61
29911: PUSH
29912: EMPTY
29913: LIST
29914: PUSH
29915: LD_INT 33
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: PPUSH
29930: CALL_OW 69
29934: ST_TO_ADDR
// if not tmp then
29935: LD_VAR 0 1
29939: NOT
29940: IFFALSE 29944
// exit ;
29942: GO 29981
// for i in tmp do
29944: LD_ADDR_VAR 0 2
29948: PUSH
29949: LD_VAR 0 1
29953: PUSH
29954: FOR_IN
29955: IFFALSE 29979
// if IsControledBy ( i ) then
29957: LD_VAR 0 2
29961: PPUSH
29962: CALL_OW 312
29966: IFFALSE 29977
// ComUnlink ( i ) ;
29968: LD_VAR 0 2
29972: PPUSH
29973: CALL_OW 136
29977: GO 29954
29979: POP
29980: POP
// end ;
29981: PPOPN 2
29983: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29984: LD_EXP 58
29988: PUSH
29989: LD_EXP 89
29993: AND
29994: IFFALSE 30134
29996: GO 29998
29998: DISABLE
29999: LD_INT 0
30001: PPUSH
30002: PPUSH
// begin ToLua ( displayPowell(); ) ;
30003: LD_STRING displayPowell();
30005: PPUSH
30006: CALL_OW 559
// uc_side := 0 ;
30010: LD_ADDR_OWVAR 20
30014: PUSH
30015: LD_INT 0
30017: ST_TO_ADDR
// uc_nation := 2 ;
30018: LD_ADDR_OWVAR 21
30022: PUSH
30023: LD_INT 2
30025: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30026: LD_ADDR_OWVAR 37
30030: PUSH
30031: LD_INT 14
30033: ST_TO_ADDR
// vc_engine := engine_siberite ;
30034: LD_ADDR_OWVAR 39
30038: PUSH
30039: LD_INT 3
30041: ST_TO_ADDR
// vc_control := control_apeman ;
30042: LD_ADDR_OWVAR 38
30046: PUSH
30047: LD_INT 5
30049: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30050: LD_ADDR_OWVAR 40
30054: PUSH
30055: LD_INT 29
30057: ST_TO_ADDR
// un := CreateVehicle ;
30058: LD_ADDR_VAR 0 2
30062: PUSH
30063: CALL_OW 45
30067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30068: LD_VAR 0 2
30072: PPUSH
30073: LD_INT 1
30075: PPUSH
30076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30080: LD_INT 35
30082: PPUSH
30083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30087: LD_VAR 0 2
30091: PPUSH
30092: LD_INT 22
30094: PUSH
30095: LD_OWVAR 2
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PPUSH
30104: CALL_OW 69
30108: PPUSH
30109: LD_VAR 0 2
30113: PPUSH
30114: CALL_OW 74
30118: PPUSH
30119: CALL_OW 115
// until IsDead ( un ) ;
30123: LD_VAR 0 2
30127: PPUSH
30128: CALL_OW 301
30132: IFFALSE 30080
// end ;
30134: PPOPN 2
30136: END
// every 0 0$1 trigger StreamModeActive and sStu do
30137: LD_EXP 58
30141: PUSH
30142: LD_EXP 97
30146: AND
30147: IFFALSE 30163
30149: GO 30151
30151: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30152: LD_STRING displayStucuk();
30154: PPUSH
30155: CALL_OW 559
// ResetFog ;
30159: CALL_OW 335
// end ;
30163: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30164: LD_EXP 58
30168: PUSH
30169: LD_EXP 90
30173: AND
30174: IFFALSE 30315
30176: GO 30178
30178: DISABLE
30179: LD_INT 0
30181: PPUSH
30182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30183: LD_ADDR_VAR 0 2
30187: PUSH
30188: LD_INT 22
30190: PUSH
30191: LD_OWVAR 2
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 21
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PPUSH
30214: CALL_OW 69
30218: ST_TO_ADDR
// if not tmp then
30219: LD_VAR 0 2
30223: NOT
30224: IFFALSE 30228
// exit ;
30226: GO 30315
// un := tmp [ rand ( 1 , tmp ) ] ;
30228: LD_ADDR_VAR 0 1
30232: PUSH
30233: LD_VAR 0 2
30237: PUSH
30238: LD_INT 1
30240: PPUSH
30241: LD_VAR 0 2
30245: PPUSH
30246: CALL_OW 12
30250: ARRAY
30251: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30252: LD_VAR 0 1
30256: PPUSH
30257: LD_INT 0
30259: PPUSH
30260: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30264: LD_VAR 0 1
30268: PPUSH
30269: LD_OWVAR 3
30273: PUSH
30274: LD_VAR 0 1
30278: DIFF
30279: PPUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: CALL_OW 74
30289: PPUSH
30290: CALL_OW 115
// wait ( 0 0$20 ) ;
30294: LD_INT 700
30296: PPUSH
30297: CALL_OW 67
// SetSide ( un , your_side ) ;
30301: LD_VAR 0 1
30305: PPUSH
30306: LD_OWVAR 2
30310: PPUSH
30311: CALL_OW 235
// end ;
30315: PPOPN 2
30317: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30318: LD_EXP 58
30322: PUSH
30323: LD_EXP 91
30327: AND
30328: IFFALSE 30434
30330: GO 30332
30332: DISABLE
30333: LD_INT 0
30335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_INT 22
30343: PUSH
30344: LD_OWVAR 2
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 30
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PPUSH
30385: CALL_OW 69
30389: ST_TO_ADDR
// if not depot then
30390: LD_VAR 0 1
30394: NOT
30395: IFFALSE 30399
// exit ;
30397: GO 30434
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30399: LD_VAR 0 1
30403: PUSH
30404: LD_INT 1
30406: ARRAY
30407: PPUSH
30408: CALL_OW 250
30412: PPUSH
30413: LD_VAR 0 1
30417: PUSH
30418: LD_INT 1
30420: ARRAY
30421: PPUSH
30422: CALL_OW 251
30426: PPUSH
30427: LD_INT 70
30429: PPUSH
30430: CALL_OW 495
// end ;
30434: PPOPN 1
30436: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30437: LD_EXP 58
30441: PUSH
30442: LD_EXP 92
30446: AND
30447: IFFALSE 30658
30449: GO 30451
30451: DISABLE
30452: LD_INT 0
30454: PPUSH
30455: PPUSH
30456: PPUSH
30457: PPUSH
30458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30459: LD_ADDR_VAR 0 5
30463: PUSH
30464: LD_INT 22
30466: PUSH
30467: LD_OWVAR 2
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 21
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL_OW 69
30494: ST_TO_ADDR
// if not tmp then
30495: LD_VAR 0 5
30499: NOT
30500: IFFALSE 30504
// exit ;
30502: GO 30658
// for i in tmp do
30504: LD_ADDR_VAR 0 1
30508: PUSH
30509: LD_VAR 0 5
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30656
// begin d := rand ( 0 , 5 ) ;
30517: LD_ADDR_VAR 0 4
30521: PUSH
30522: LD_INT 0
30524: PPUSH
30525: LD_INT 5
30527: PPUSH
30528: CALL_OW 12
30532: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30533: LD_ADDR_VAR 0 2
30537: PUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: CALL_OW 250
30547: PPUSH
30548: LD_VAR 0 4
30552: PPUSH
30553: LD_INT 3
30555: PPUSH
30556: LD_INT 12
30558: PPUSH
30559: CALL_OW 12
30563: PPUSH
30564: CALL_OW 272
30568: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30569: LD_ADDR_VAR 0 3
30573: PUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 251
30583: PPUSH
30584: LD_VAR 0 4
30588: PPUSH
30589: LD_INT 3
30591: PPUSH
30592: LD_INT 12
30594: PPUSH
30595: CALL_OW 12
30599: PPUSH
30600: CALL_OW 273
30604: ST_TO_ADDR
// if ValidHex ( x , y ) then
30605: LD_VAR 0 2
30609: PPUSH
30610: LD_VAR 0 3
30614: PPUSH
30615: CALL_OW 488
30619: IFFALSE 30654
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30621: LD_VAR 0 1
30625: PPUSH
30626: LD_VAR 0 2
30630: PPUSH
30631: LD_VAR 0 3
30635: PPUSH
30636: LD_INT 3
30638: PPUSH
30639: LD_INT 6
30641: PPUSH
30642: CALL_OW 12
30646: PPUSH
30647: LD_INT 1
30649: PPUSH
30650: CALL_OW 483
// end ;
30654: GO 30514
30656: POP
30657: POP
// end ;
30658: PPOPN 5
30660: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30661: LD_EXP 58
30665: PUSH
30666: LD_EXP 93
30670: AND
30671: IFFALSE 30765
30673: GO 30675
30675: DISABLE
30676: LD_INT 0
30678: PPUSH
30679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30680: LD_ADDR_VAR 0 2
30684: PUSH
30685: LD_INT 22
30687: PUSH
30688: LD_OWVAR 2
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 32
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 21
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: PPUSH
30722: CALL_OW 69
30726: ST_TO_ADDR
// if not tmp then
30727: LD_VAR 0 2
30731: NOT
30732: IFFALSE 30736
// exit ;
30734: GO 30765
// for i in tmp do
30736: LD_ADDR_VAR 0 1
30740: PUSH
30741: LD_VAR 0 2
30745: PUSH
30746: FOR_IN
30747: IFFALSE 30763
// SetFuel ( i , 0 ) ;
30749: LD_VAR 0 1
30753: PPUSH
30754: LD_INT 0
30756: PPUSH
30757: CALL_OW 240
30761: GO 30746
30763: POP
30764: POP
// end ;
30765: PPOPN 2
30767: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30768: LD_EXP 58
30772: PUSH
30773: LD_EXP 94
30777: AND
30778: IFFALSE 30844
30780: GO 30782
30782: DISABLE
30783: LD_INT 0
30785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30786: LD_ADDR_VAR 0 1
30790: PUSH
30791: LD_INT 22
30793: PUSH
30794: LD_OWVAR 2
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 30
30805: PUSH
30806: LD_INT 29
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PPUSH
30817: CALL_OW 69
30821: ST_TO_ADDR
// if not tmp then
30822: LD_VAR 0 1
30826: NOT
30827: IFFALSE 30831
// exit ;
30829: GO 30844
// DestroyUnit ( tmp [ 1 ] ) ;
30831: LD_VAR 0 1
30835: PUSH
30836: LD_INT 1
30838: ARRAY
30839: PPUSH
30840: CALL_OW 65
// end ;
30844: PPOPN 1
30846: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30847: LD_EXP 58
30851: PUSH
30852: LD_EXP 96
30856: AND
30857: IFFALSE 30986
30859: GO 30861
30861: DISABLE
30862: LD_INT 0
30864: PPUSH
// begin uc_side := 0 ;
30865: LD_ADDR_OWVAR 20
30869: PUSH
30870: LD_INT 0
30872: ST_TO_ADDR
// uc_nation := nation_arabian ;
30873: LD_ADDR_OWVAR 21
30877: PUSH
30878: LD_INT 2
30880: ST_TO_ADDR
// hc_gallery :=  ;
30881: LD_ADDR_OWVAR 33
30885: PUSH
30886: LD_STRING 
30888: ST_TO_ADDR
// hc_name :=  ;
30889: LD_ADDR_OWVAR 26
30893: PUSH
30894: LD_STRING 
30896: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30897: LD_INT 1
30899: PPUSH
30900: LD_INT 11
30902: PPUSH
30903: LD_INT 10
30905: PPUSH
30906: CALL_OW 380
// un := CreateHuman ;
30910: LD_ADDR_VAR 0 1
30914: PUSH
30915: CALL_OW 44
30919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30920: LD_VAR 0 1
30924: PPUSH
30925: LD_INT 1
30927: PPUSH
30928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30932: LD_INT 35
30934: PPUSH
30935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30939: LD_VAR 0 1
30943: PPUSH
30944: LD_INT 22
30946: PUSH
30947: LD_OWVAR 2
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PPUSH
30956: CALL_OW 69
30960: PPUSH
30961: LD_VAR 0 1
30965: PPUSH
30966: CALL_OW 74
30970: PPUSH
30971: CALL_OW 115
// until IsDead ( un ) ;
30975: LD_VAR 0 1
30979: PPUSH
30980: CALL_OW 301
30984: IFFALSE 30932
// end ;
30986: PPOPN 1
30988: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30989: LD_EXP 58
30993: PUSH
30994: LD_EXP 98
30998: AND
30999: IFFALSE 31011
31001: GO 31003
31003: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31004: LD_STRING earthquake(getX(game), 0, 32)
31006: PPUSH
31007: CALL_OW 559
31011: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31012: LD_EXP 58
31016: PUSH
31017: LD_EXP 99
31021: AND
31022: IFFALSE 31113
31024: GO 31026
31026: DISABLE
31027: LD_INT 0
31029: PPUSH
// begin enable ;
31030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31031: LD_ADDR_VAR 0 1
31035: PUSH
31036: LD_INT 22
31038: PUSH
31039: LD_OWVAR 2
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 21
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 33
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: PPUSH
31073: CALL_OW 69
31077: ST_TO_ADDR
// if not tmp then
31078: LD_VAR 0 1
31082: NOT
31083: IFFALSE 31087
// exit ;
31085: GO 31113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31087: LD_VAR 0 1
31091: PUSH
31092: LD_INT 1
31094: PPUSH
31095: LD_VAR 0 1
31099: PPUSH
31100: CALL_OW 12
31104: ARRAY
31105: PPUSH
31106: LD_INT 1
31108: PPUSH
31109: CALL_OW 234
// end ;
31113: PPOPN 1
31115: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31116: LD_EXP 58
31120: PUSH
31121: LD_EXP 100
31125: AND
31126: IFFALSE 31267
31128: GO 31130
31130: DISABLE
31131: LD_INT 0
31133: PPUSH
31134: PPUSH
31135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31136: LD_ADDR_VAR 0 3
31140: PUSH
31141: LD_INT 22
31143: PUSH
31144: LD_OWVAR 2
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 25
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PPUSH
31167: CALL_OW 69
31171: ST_TO_ADDR
// if not tmp then
31172: LD_VAR 0 3
31176: NOT
31177: IFFALSE 31181
// exit ;
31179: GO 31267
// un := tmp [ rand ( 1 , tmp ) ] ;
31181: LD_ADDR_VAR 0 2
31185: PUSH
31186: LD_VAR 0 3
31190: PUSH
31191: LD_INT 1
31193: PPUSH
31194: LD_VAR 0 3
31198: PPUSH
31199: CALL_OW 12
31203: ARRAY
31204: ST_TO_ADDR
// if Crawls ( un ) then
31205: LD_VAR 0 2
31209: PPUSH
31210: CALL_OW 318
31214: IFFALSE 31225
// ComWalk ( un ) ;
31216: LD_VAR 0 2
31220: PPUSH
31221: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31225: LD_VAR 0 2
31229: PPUSH
31230: LD_INT 9
31232: PPUSH
31233: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31237: LD_INT 28
31239: PPUSH
31240: LD_OWVAR 2
31244: PPUSH
31245: LD_INT 2
31247: PPUSH
31248: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31252: LD_INT 29
31254: PPUSH
31255: LD_OWVAR 2
31259: PPUSH
31260: LD_INT 2
31262: PPUSH
31263: CALL_OW 322
// end ;
31267: PPOPN 3
31269: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31270: LD_EXP 58
31274: PUSH
31275: LD_EXP 101
31279: AND
31280: IFFALSE 31391
31282: GO 31284
31284: DISABLE
31285: LD_INT 0
31287: PPUSH
31288: PPUSH
31289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_INT 22
31297: PUSH
31298: LD_OWVAR 2
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 25
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 69
31325: ST_TO_ADDR
// if not tmp then
31326: LD_VAR 0 3
31330: NOT
31331: IFFALSE 31335
// exit ;
31333: GO 31391
// un := tmp [ rand ( 1 , tmp ) ] ;
31335: LD_ADDR_VAR 0 2
31339: PUSH
31340: LD_VAR 0 3
31344: PUSH
31345: LD_INT 1
31347: PPUSH
31348: LD_VAR 0 3
31352: PPUSH
31353: CALL_OW 12
31357: ARRAY
31358: ST_TO_ADDR
// if Crawls ( un ) then
31359: LD_VAR 0 2
31363: PPUSH
31364: CALL_OW 318
31368: IFFALSE 31379
// ComWalk ( un ) ;
31370: LD_VAR 0 2
31374: PPUSH
31375: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31379: LD_VAR 0 2
31383: PPUSH
31384: LD_INT 8
31386: PPUSH
31387: CALL_OW 336
// end ;
31391: PPOPN 3
31393: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31394: LD_EXP 58
31398: PUSH
31399: LD_EXP 102
31403: AND
31404: IFFALSE 31548
31406: GO 31408
31408: DISABLE
31409: LD_INT 0
31411: PPUSH
31412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31413: LD_ADDR_VAR 0 2
31417: PUSH
31418: LD_INT 22
31420: PUSH
31421: LD_OWVAR 2
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 21
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 34
31445: PUSH
31446: LD_INT 12
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 34
31455: PUSH
31456: LD_INT 51
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 34
31465: PUSH
31466: LD_INT 32
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: PPUSH
31484: CALL_OW 69
31488: ST_TO_ADDR
// if not tmp then
31489: LD_VAR 0 2
31493: NOT
31494: IFFALSE 31498
// exit ;
31496: GO 31548
// for i in tmp do
31498: LD_ADDR_VAR 0 1
31502: PUSH
31503: LD_VAR 0 2
31507: PUSH
31508: FOR_IN
31509: IFFALSE 31546
// if GetCargo ( i , mat_artifact ) = 0 then
31511: LD_VAR 0 1
31515: PPUSH
31516: LD_INT 4
31518: PPUSH
31519: CALL_OW 289
31523: PUSH
31524: LD_INT 0
31526: EQUAL
31527: IFFALSE 31544
// SetCargo ( i , mat_siberit , 100 ) ;
31529: LD_VAR 0 1
31533: PPUSH
31534: LD_INT 3
31536: PPUSH
31537: LD_INT 100
31539: PPUSH
31540: CALL_OW 290
31544: GO 31508
31546: POP
31547: POP
// end ;
31548: PPOPN 2
31550: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31551: LD_EXP 58
31555: PUSH
31556: LD_EXP 103
31560: AND
31561: IFFALSE 31744
31563: GO 31565
31565: DISABLE
31566: LD_INT 0
31568: PPUSH
31569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31570: LD_ADDR_VAR 0 2
31574: PUSH
31575: LD_INT 22
31577: PUSH
31578: LD_OWVAR 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PPUSH
31587: CALL_OW 69
31591: ST_TO_ADDR
// if not tmp then
31592: LD_VAR 0 2
31596: NOT
31597: IFFALSE 31601
// exit ;
31599: GO 31744
// for i := 1 to 2 do
31601: LD_ADDR_VAR 0 1
31605: PUSH
31606: DOUBLE
31607: LD_INT 1
31609: DEC
31610: ST_TO_ADDR
31611: LD_INT 2
31613: PUSH
31614: FOR_TO
31615: IFFALSE 31742
// begin uc_side := your_side ;
31617: LD_ADDR_OWVAR 20
31621: PUSH
31622: LD_OWVAR 2
31626: ST_TO_ADDR
// uc_nation := nation_american ;
31627: LD_ADDR_OWVAR 21
31631: PUSH
31632: LD_INT 1
31634: ST_TO_ADDR
// vc_chassis := us_morphling ;
31635: LD_ADDR_OWVAR 37
31639: PUSH
31640: LD_INT 5
31642: ST_TO_ADDR
// vc_engine := engine_siberite ;
31643: LD_ADDR_OWVAR 39
31647: PUSH
31648: LD_INT 3
31650: ST_TO_ADDR
// vc_control := control_computer ;
31651: LD_ADDR_OWVAR 38
31655: PUSH
31656: LD_INT 3
31658: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31659: LD_ADDR_OWVAR 40
31663: PUSH
31664: LD_INT 10
31666: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31667: LD_VAR 0 2
31671: PUSH
31672: LD_INT 1
31674: ARRAY
31675: PPUSH
31676: CALL_OW 310
31680: NOT
31681: IFFALSE 31728
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31683: CALL_OW 45
31687: PPUSH
31688: LD_VAR 0 2
31692: PUSH
31693: LD_INT 1
31695: ARRAY
31696: PPUSH
31697: CALL_OW 250
31701: PPUSH
31702: LD_VAR 0 2
31706: PUSH
31707: LD_INT 1
31709: ARRAY
31710: PPUSH
31711: CALL_OW 251
31715: PPUSH
31716: LD_INT 12
31718: PPUSH
31719: LD_INT 1
31721: PPUSH
31722: CALL_OW 50
31726: GO 31740
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31728: CALL_OW 45
31732: PPUSH
31733: LD_INT 1
31735: PPUSH
31736: CALL_OW 51
// end ;
31740: GO 31614
31742: POP
31743: POP
// end ;
31744: PPOPN 2
31746: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31747: LD_EXP 58
31751: PUSH
31752: LD_EXP 104
31756: AND
31757: IFFALSE 31979
31759: GO 31761
31761: DISABLE
31762: LD_INT 0
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
31769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31770: LD_ADDR_VAR 0 6
31774: PUSH
31775: LD_INT 22
31777: PUSH
31778: LD_OWVAR 2
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 21
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: PUSH
31800: LD_INT 23
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: PPUSH
31819: CALL_OW 69
31823: ST_TO_ADDR
// if not tmp then
31824: LD_VAR 0 6
31828: NOT
31829: IFFALSE 31833
// exit ;
31831: GO 31979
// s1 := rand ( 1 , 4 ) ;
31833: LD_ADDR_VAR 0 2
31837: PUSH
31838: LD_INT 1
31840: PPUSH
31841: LD_INT 4
31843: PPUSH
31844: CALL_OW 12
31848: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31849: LD_ADDR_VAR 0 4
31853: PUSH
31854: LD_VAR 0 6
31858: PUSH
31859: LD_INT 1
31861: ARRAY
31862: PPUSH
31863: LD_VAR 0 2
31867: PPUSH
31868: CALL_OW 259
31872: ST_TO_ADDR
// if s1 = 1 then
31873: LD_VAR 0 2
31877: PUSH
31878: LD_INT 1
31880: EQUAL
31881: IFFALSE 31901
// s2 := rand ( 2 , 4 ) else
31883: LD_ADDR_VAR 0 3
31887: PUSH
31888: LD_INT 2
31890: PPUSH
31891: LD_INT 4
31893: PPUSH
31894: CALL_OW 12
31898: ST_TO_ADDR
31899: GO 31909
// s2 := 1 ;
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_INT 1
31908: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31909: LD_ADDR_VAR 0 5
31913: PUSH
31914: LD_VAR 0 6
31918: PUSH
31919: LD_INT 1
31921: ARRAY
31922: PPUSH
31923: LD_VAR 0 3
31927: PPUSH
31928: CALL_OW 259
31932: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31933: LD_VAR 0 6
31937: PUSH
31938: LD_INT 1
31940: ARRAY
31941: PPUSH
31942: LD_VAR 0 2
31946: PPUSH
31947: LD_VAR 0 5
31951: PPUSH
31952: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31956: LD_VAR 0 6
31960: PUSH
31961: LD_INT 1
31963: ARRAY
31964: PPUSH
31965: LD_VAR 0 3
31969: PPUSH
31970: LD_VAR 0 4
31974: PPUSH
31975: CALL_OW 237
// end ;
31979: PPOPN 6
31981: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31982: LD_EXP 58
31986: PUSH
31987: LD_EXP 105
31991: AND
31992: IFFALSE 32071
31994: GO 31996
31996: DISABLE
31997: LD_INT 0
31999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32000: LD_ADDR_VAR 0 1
32004: PUSH
32005: LD_INT 22
32007: PUSH
32008: LD_OWVAR 2
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 30
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PPUSH
32031: CALL_OW 69
32035: ST_TO_ADDR
// if not tmp then
32036: LD_VAR 0 1
32040: NOT
32041: IFFALSE 32045
// exit ;
32043: GO 32071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32045: LD_VAR 0 1
32049: PUSH
32050: LD_INT 1
32052: PPUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 12
32062: ARRAY
32063: PPUSH
32064: LD_INT 1
32066: PPUSH
32067: CALL_OW 234
// end ;
32071: PPOPN 1
32073: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32074: LD_EXP 58
32078: PUSH
32079: LD_EXP 106
32083: AND
32084: IFFALSE 32196
32086: GO 32088
32088: DISABLE
32089: LD_INT 0
32091: PPUSH
32092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32093: LD_ADDR_VAR 0 2
32097: PUSH
32098: LD_INT 22
32100: PUSH
32101: LD_OWVAR 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: LD_INT 30
32115: PUSH
32116: LD_INT 27
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 30
32125: PUSH
32126: LD_INT 26
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 30
32135: PUSH
32136: LD_INT 28
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PPUSH
32153: CALL_OW 69
32157: ST_TO_ADDR
// if not tmp then
32158: LD_VAR 0 2
32162: NOT
32163: IFFALSE 32167
// exit ;
32165: GO 32196
// for i in tmp do
32167: LD_ADDR_VAR 0 1
32171: PUSH
32172: LD_VAR 0 2
32176: PUSH
32177: FOR_IN
32178: IFFALSE 32194
// SetLives ( i , 1 ) ;
32180: LD_VAR 0 1
32184: PPUSH
32185: LD_INT 1
32187: PPUSH
32188: CALL_OW 234
32192: GO 32177
32194: POP
32195: POP
// end ;
32196: PPOPN 2
32198: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32199: LD_EXP 58
32203: PUSH
32204: LD_EXP 107
32208: AND
32209: IFFALSE 32496
32211: GO 32213
32213: DISABLE
32214: LD_INT 0
32216: PPUSH
32217: PPUSH
32218: PPUSH
// begin i := rand ( 1 , 7 ) ;
32219: LD_ADDR_VAR 0 1
32223: PUSH
32224: LD_INT 1
32226: PPUSH
32227: LD_INT 7
32229: PPUSH
32230: CALL_OW 12
32234: ST_TO_ADDR
// case i of 1 :
32235: LD_VAR 0 1
32239: PUSH
32240: LD_INT 1
32242: DOUBLE
32243: EQUAL
32244: IFTRUE 32248
32246: GO 32258
32248: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32249: LD_STRING earthquake(getX(game), 0, 32)
32251: PPUSH
32252: CALL_OW 559
32256: GO 32496
32258: LD_INT 2
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32280
32266: POP
// begin ToLua ( displayStucuk(); ) ;
32267: LD_STRING displayStucuk();
32269: PPUSH
32270: CALL_OW 559
// ResetFog ;
32274: CALL_OW 335
// end ; 3 :
32278: GO 32496
32280: LD_INT 3
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32392
32288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32289: LD_ADDR_VAR 0 2
32293: PUSH
32294: LD_INT 22
32296: PUSH
32297: LD_OWVAR 2
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 25
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PPUSH
32320: CALL_OW 69
32324: ST_TO_ADDR
// if not tmp then
32325: LD_VAR 0 2
32329: NOT
32330: IFFALSE 32334
// exit ;
32332: GO 32496
// un := tmp [ rand ( 1 , tmp ) ] ;
32334: LD_ADDR_VAR 0 3
32338: PUSH
32339: LD_VAR 0 2
32343: PUSH
32344: LD_INT 1
32346: PPUSH
32347: LD_VAR 0 2
32351: PPUSH
32352: CALL_OW 12
32356: ARRAY
32357: ST_TO_ADDR
// if Crawls ( un ) then
32358: LD_VAR 0 3
32362: PPUSH
32363: CALL_OW 318
32367: IFFALSE 32378
// ComWalk ( un ) ;
32369: LD_VAR 0 3
32373: PPUSH
32374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32378: LD_VAR 0 3
32382: PPUSH
32383: LD_INT 8
32385: PPUSH
32386: CALL_OW 336
// end ; 4 :
32390: GO 32496
32392: LD_INT 4
32394: DOUBLE
32395: EQUAL
32396: IFTRUE 32400
32398: GO 32474
32400: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32401: LD_ADDR_VAR 0 2
32405: PUSH
32406: LD_INT 22
32408: PUSH
32409: LD_OWVAR 2
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 30
32420: PUSH
32421: LD_INT 29
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PPUSH
32432: CALL_OW 69
32436: ST_TO_ADDR
// if not tmp then
32437: LD_VAR 0 2
32441: NOT
32442: IFFALSE 32446
// exit ;
32444: GO 32496
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32446: LD_VAR 0 2
32450: PUSH
32451: LD_INT 1
32453: ARRAY
32454: PPUSH
32455: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32459: LD_VAR 0 2
32463: PUSH
32464: LD_INT 1
32466: ARRAY
32467: PPUSH
32468: CALL_OW 65
// end ; 5 .. 7 :
32472: GO 32496
32474: LD_INT 5
32476: DOUBLE
32477: GREATEREQUAL
32478: IFFALSE 32486
32480: LD_INT 7
32482: DOUBLE
32483: LESSEQUAL
32484: IFTRUE 32488
32486: GO 32495
32488: POP
// StreamSibBomb ; end ;
32489: CALL 28733 0 0
32493: GO 32496
32495: POP
// end ;
32496: PPOPN 3
32498: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32499: LD_EXP 58
32503: PUSH
32504: LD_EXP 108
32508: AND
32509: IFFALSE 32665
32511: GO 32513
32513: DISABLE
32514: LD_INT 0
32516: PPUSH
32517: PPUSH
32518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32519: LD_ADDR_VAR 0 2
32523: PUSH
32524: LD_INT 81
32526: PUSH
32527: LD_OWVAR 2
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 21
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 21
32551: PUSH
32552: LD_INT 2
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PPUSH
32568: CALL_OW 69
32572: ST_TO_ADDR
// if not tmp then
32573: LD_VAR 0 2
32577: NOT
32578: IFFALSE 32582
// exit ;
32580: GO 32665
// p := 0 ;
32582: LD_ADDR_VAR 0 3
32586: PUSH
32587: LD_INT 0
32589: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32590: LD_INT 35
32592: PPUSH
32593: CALL_OW 67
// p := p + 1 ;
32597: LD_ADDR_VAR 0 3
32601: PUSH
32602: LD_VAR 0 3
32606: PUSH
32607: LD_INT 1
32609: PLUS
32610: ST_TO_ADDR
// for i in tmp do
32611: LD_ADDR_VAR 0 1
32615: PUSH
32616: LD_VAR 0 2
32620: PUSH
32621: FOR_IN
32622: IFFALSE 32653
// if GetLives ( i ) < 1000 then
32624: LD_VAR 0 1
32628: PPUSH
32629: CALL_OW 256
32633: PUSH
32634: LD_INT 1000
32636: LESS
32637: IFFALSE 32651
// SetLives ( i , 1000 ) ;
32639: LD_VAR 0 1
32643: PPUSH
32644: LD_INT 1000
32646: PPUSH
32647: CALL_OW 234
32651: GO 32621
32653: POP
32654: POP
// until p > 20 ;
32655: LD_VAR 0 3
32659: PUSH
32660: LD_INT 20
32662: GREATER
32663: IFFALSE 32590
// end ;
32665: PPOPN 3
32667: END
// every 0 0$1 trigger StreamModeActive and sTime do
32668: LD_EXP 58
32672: PUSH
32673: LD_EXP 109
32677: AND
32678: IFFALSE 32713
32680: GO 32682
32682: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32683: LD_INT 28
32685: PPUSH
32686: LD_OWVAR 2
32690: PPUSH
32691: LD_INT 2
32693: PPUSH
32694: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32698: LD_INT 30
32700: PPUSH
32701: LD_OWVAR 2
32705: PPUSH
32706: LD_INT 2
32708: PPUSH
32709: CALL_OW 322
// end ;
32713: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32714: LD_EXP 58
32718: PUSH
32719: LD_EXP 110
32723: AND
32724: IFFALSE 32845
32726: GO 32728
32728: DISABLE
32729: LD_INT 0
32731: PPUSH
32732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32733: LD_ADDR_VAR 0 2
32737: PUSH
32738: LD_INT 22
32740: PUSH
32741: LD_OWVAR 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 21
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 23
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: LIST
32781: PPUSH
32782: CALL_OW 69
32786: ST_TO_ADDR
// if not tmp then
32787: LD_VAR 0 2
32791: NOT
32792: IFFALSE 32796
// exit ;
32794: GO 32845
// for i in tmp do
32796: LD_ADDR_VAR 0 1
32800: PUSH
32801: LD_VAR 0 2
32805: PUSH
32806: FOR_IN
32807: IFFALSE 32843
// begin if Crawls ( i ) then
32809: LD_VAR 0 1
32813: PPUSH
32814: CALL_OW 318
32818: IFFALSE 32829
// ComWalk ( i ) ;
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 138
// SetClass ( i , 2 ) ;
32829: LD_VAR 0 1
32833: PPUSH
32834: LD_INT 2
32836: PPUSH
32837: CALL_OW 336
// end ;
32841: GO 32806
32843: POP
32844: POP
// end ;
32845: PPOPN 2
32847: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32848: LD_EXP 58
32852: PUSH
32853: LD_EXP 111
32857: AND
32858: IFFALSE 33146
32860: GO 32862
32862: DISABLE
32863: LD_INT 0
32865: PPUSH
32866: PPUSH
32867: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32868: LD_OWVAR 2
32872: PPUSH
32873: LD_INT 9
32875: PPUSH
32876: LD_INT 1
32878: PPUSH
32879: LD_INT 1
32881: PPUSH
32882: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32886: LD_INT 9
32888: PPUSH
32889: LD_OWVAR 2
32893: PPUSH
32894: CALL_OW 343
// uc_side := 9 ;
32898: LD_ADDR_OWVAR 20
32902: PUSH
32903: LD_INT 9
32905: ST_TO_ADDR
// uc_nation := 2 ;
32906: LD_ADDR_OWVAR 21
32910: PUSH
32911: LD_INT 2
32913: ST_TO_ADDR
// hc_name := Dark Warrior ;
32914: LD_ADDR_OWVAR 26
32918: PUSH
32919: LD_STRING Dark Warrior
32921: ST_TO_ADDR
// hc_gallery :=  ;
32922: LD_ADDR_OWVAR 33
32926: PUSH
32927: LD_STRING 
32929: ST_TO_ADDR
// hc_noskilllimit := true ;
32930: LD_ADDR_OWVAR 76
32934: PUSH
32935: LD_INT 1
32937: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32938: LD_ADDR_OWVAR 31
32942: PUSH
32943: LD_INT 30
32945: PUSH
32946: LD_INT 30
32948: PUSH
32949: LD_INT 30
32951: PUSH
32952: LD_INT 30
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
// un := CreateHuman ;
32961: LD_ADDR_VAR 0 3
32965: PUSH
32966: CALL_OW 44
32970: ST_TO_ADDR
// hc_noskilllimit := false ;
32971: LD_ADDR_OWVAR 76
32975: PUSH
32976: LD_INT 0
32978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32979: LD_VAR 0 3
32983: PPUSH
32984: LD_INT 1
32986: PPUSH
32987: CALL_OW 51
// ToLua ( playRanger() ) ;
32991: LD_STRING playRanger()
32993: PPUSH
32994: CALL_OW 559
// p := 0 ;
32998: LD_ADDR_VAR 0 2
33002: PUSH
33003: LD_INT 0
33005: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33006: LD_INT 35
33008: PPUSH
33009: CALL_OW 67
// p := p + 1 ;
33013: LD_ADDR_VAR 0 2
33017: PUSH
33018: LD_VAR 0 2
33022: PUSH
33023: LD_INT 1
33025: PLUS
33026: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33027: LD_VAR 0 3
33031: PPUSH
33032: CALL_OW 256
33036: PUSH
33037: LD_INT 1000
33039: LESS
33040: IFFALSE 33054
// SetLives ( un , 1000 ) ;
33042: LD_VAR 0 3
33046: PPUSH
33047: LD_INT 1000
33049: PPUSH
33050: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33054: LD_VAR 0 3
33058: PPUSH
33059: LD_INT 81
33061: PUSH
33062: LD_OWVAR 2
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 91
33073: PUSH
33074: LD_VAR 0 3
33078: PUSH
33079: LD_INT 30
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PPUSH
33091: CALL_OW 69
33095: PPUSH
33096: LD_VAR 0 3
33100: PPUSH
33101: CALL_OW 74
33105: PPUSH
33106: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33110: LD_VAR 0 2
33114: PUSH
33115: LD_INT 80
33117: GREATER
33118: PUSH
33119: LD_VAR 0 3
33123: PPUSH
33124: CALL_OW 301
33128: OR
33129: IFFALSE 33006
// if un then
33131: LD_VAR 0 3
33135: IFFALSE 33146
// RemoveUnit ( un ) ;
33137: LD_VAR 0 3
33141: PPUSH
33142: CALL_OW 64
// end ;
33146: PPOPN 3
33148: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33149: LD_EXP 112
33153: IFFALSE 33269
33155: GO 33157
33157: DISABLE
33158: LD_INT 0
33160: PPUSH
33161: PPUSH
33162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33163: LD_ADDR_VAR 0 2
33167: PUSH
33168: LD_INT 81
33170: PUSH
33171: LD_OWVAR 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 21
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PPUSH
33194: CALL_OW 69
33198: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33199: LD_STRING playComputer()
33201: PPUSH
33202: CALL_OW 559
// if not tmp then
33206: LD_VAR 0 2
33210: NOT
33211: IFFALSE 33215
// exit ;
33213: GO 33269
// for i in tmp do
33215: LD_ADDR_VAR 0 1
33219: PUSH
33220: LD_VAR 0 2
33224: PUSH
33225: FOR_IN
33226: IFFALSE 33267
// for j := 1 to 4 do
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: DOUBLE
33234: LD_INT 1
33236: DEC
33237: ST_TO_ADDR
33238: LD_INT 4
33240: PUSH
33241: FOR_TO
33242: IFFALSE 33263
// SetSkill ( i , j , 10 ) ;
33244: LD_VAR 0 1
33248: PPUSH
33249: LD_VAR 0 3
33253: PPUSH
33254: LD_INT 10
33256: PPUSH
33257: CALL_OW 237
33261: GO 33241
33263: POP
33264: POP
33265: GO 33225
33267: POP
33268: POP
// end ;
33269: PPOPN 3
33271: END
// every 0 0$1 trigger s30 do var i , tmp ;
33272: LD_EXP 113
33276: IFFALSE 33345
33278: GO 33280
33280: DISABLE
33281: LD_INT 0
33283: PPUSH
33284: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33285: LD_ADDR_VAR 0 2
33289: PUSH
33290: LD_INT 22
33292: PUSH
33293: LD_OWVAR 2
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PPUSH
33302: CALL_OW 69
33306: ST_TO_ADDR
// if not tmp then
33307: LD_VAR 0 2
33311: NOT
33312: IFFALSE 33316
// exit ;
33314: GO 33345
// for i in tmp do
33316: LD_ADDR_VAR 0 1
33320: PUSH
33321: LD_VAR 0 2
33325: PUSH
33326: FOR_IN
33327: IFFALSE 33343
// SetLives ( i , 300 ) ;
33329: LD_VAR 0 1
33333: PPUSH
33334: LD_INT 300
33336: PPUSH
33337: CALL_OW 234
33341: GO 33326
33343: POP
33344: POP
// end ;
33345: PPOPN 2
33347: END
// every 0 0$1 trigger s60 do var i , tmp ;
33348: LD_EXP 114
33352: IFFALSE 33421
33354: GO 33356
33356: DISABLE
33357: LD_INT 0
33359: PPUSH
33360: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33361: LD_ADDR_VAR 0 2
33365: PUSH
33366: LD_INT 22
33368: PUSH
33369: LD_OWVAR 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PPUSH
33378: CALL_OW 69
33382: ST_TO_ADDR
// if not tmp then
33383: LD_VAR 0 2
33387: NOT
33388: IFFALSE 33392
// exit ;
33390: GO 33421
// for i in tmp do
33392: LD_ADDR_VAR 0 1
33396: PUSH
33397: LD_VAR 0 2
33401: PUSH
33402: FOR_IN
33403: IFFALSE 33419
// SetLives ( i , 600 ) ;
33405: LD_VAR 0 1
33409: PPUSH
33410: LD_INT 600
33412: PPUSH
33413: CALL_OW 234
33417: GO 33402
33419: POP
33420: POP
// end ;
33421: PPOPN 2
33423: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33424: LD_INT 0
33426: PPUSH
// case cmd of 301 :
33427: LD_VAR 0 1
33431: PUSH
33432: LD_INT 301
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33472
33440: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33441: LD_VAR 0 6
33445: PPUSH
33446: LD_VAR 0 7
33450: PPUSH
33451: LD_VAR 0 8
33455: PPUSH
33456: LD_VAR 0 4
33460: PPUSH
33461: LD_VAR 0 5
33465: PPUSH
33466: CALL 34681 0 5
33470: GO 33593
33472: LD_INT 302
33474: DOUBLE
33475: EQUAL
33476: IFTRUE 33480
33478: GO 33517
33480: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33481: LD_VAR 0 6
33485: PPUSH
33486: LD_VAR 0 7
33490: PPUSH
33491: LD_VAR 0 8
33495: PPUSH
33496: LD_VAR 0 9
33500: PPUSH
33501: LD_VAR 0 4
33505: PPUSH
33506: LD_VAR 0 5
33510: PPUSH
33511: CALL 34772 0 6
33515: GO 33593
33517: LD_INT 303
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33562
33525: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33526: LD_VAR 0 6
33530: PPUSH
33531: LD_VAR 0 7
33535: PPUSH
33536: LD_VAR 0 8
33540: PPUSH
33541: LD_VAR 0 9
33545: PPUSH
33546: LD_VAR 0 4
33550: PPUSH
33551: LD_VAR 0 5
33555: PPUSH
33556: CALL 33598 0 6
33560: GO 33593
33562: LD_INT 304
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33570
33568: GO 33592
33570: POP
// hHackTeleport ( unit , x , y ) ; end ;
33571: LD_VAR 0 2
33575: PPUSH
33576: LD_VAR 0 4
33580: PPUSH
33581: LD_VAR 0 5
33585: PPUSH
33586: CALL 35365 0 3
33590: GO 33593
33592: POP
// end ;
33593: LD_VAR 0 12
33597: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33598: LD_INT 0
33600: PPUSH
33601: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33602: LD_VAR 0 1
33606: PUSH
33607: LD_INT 1
33609: LESS
33610: PUSH
33611: LD_VAR 0 1
33615: PUSH
33616: LD_INT 3
33618: GREATER
33619: OR
33620: PUSH
33621: LD_VAR 0 5
33625: PPUSH
33626: LD_VAR 0 6
33630: PPUSH
33631: CALL_OW 428
33635: OR
33636: IFFALSE 33640
// exit ;
33638: GO 34368
// uc_side := your_side ;
33640: LD_ADDR_OWVAR 20
33644: PUSH
33645: LD_OWVAR 2
33649: ST_TO_ADDR
// uc_nation := nation ;
33650: LD_ADDR_OWVAR 21
33654: PUSH
33655: LD_VAR 0 1
33659: ST_TO_ADDR
// bc_level = 1 ;
33660: LD_ADDR_OWVAR 43
33664: PUSH
33665: LD_INT 1
33667: ST_TO_ADDR
// case btype of 1 :
33668: LD_VAR 0 2
33672: PUSH
33673: LD_INT 1
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33681
33679: GO 33692
33681: POP
// bc_type := b_depot ; 2 :
33682: LD_ADDR_OWVAR 42
33686: PUSH
33687: LD_INT 0
33689: ST_TO_ADDR
33690: GO 34312
33692: LD_INT 2
33694: DOUBLE
33695: EQUAL
33696: IFTRUE 33700
33698: GO 33711
33700: POP
// bc_type := b_warehouse ; 3 :
33701: LD_ADDR_OWVAR 42
33705: PUSH
33706: LD_INT 1
33708: ST_TO_ADDR
33709: GO 34312
33711: LD_INT 3
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33719
33717: GO 33730
33719: POP
// bc_type := b_lab ; 4 .. 9 :
33720: LD_ADDR_OWVAR 42
33724: PUSH
33725: LD_INT 6
33727: ST_TO_ADDR
33728: GO 34312
33730: LD_INT 4
33732: DOUBLE
33733: GREATEREQUAL
33734: IFFALSE 33742
33736: LD_INT 9
33738: DOUBLE
33739: LESSEQUAL
33740: IFTRUE 33744
33742: GO 33804
33744: POP
// begin bc_type := b_lab_half ;
33745: LD_ADDR_OWVAR 42
33749: PUSH
33750: LD_INT 7
33752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33753: LD_ADDR_OWVAR 44
33757: PUSH
33758: LD_INT 10
33760: PUSH
33761: LD_INT 11
33763: PUSH
33764: LD_INT 12
33766: PUSH
33767: LD_INT 15
33769: PUSH
33770: LD_INT 14
33772: PUSH
33773: LD_INT 13
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: PUSH
33784: LD_VAR 0 2
33788: PUSH
33789: LD_INT 3
33791: MINUS
33792: ARRAY
33793: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33794: LD_ADDR_OWVAR 45
33798: PUSH
33799: LD_INT 9
33801: ST_TO_ADDR
// end ; 10 .. 13 :
33802: GO 34312
33804: LD_INT 10
33806: DOUBLE
33807: GREATEREQUAL
33808: IFFALSE 33816
33810: LD_INT 13
33812: DOUBLE
33813: LESSEQUAL
33814: IFTRUE 33818
33816: GO 33895
33818: POP
// begin bc_type := b_lab_full ;
33819: LD_ADDR_OWVAR 42
33823: PUSH
33824: LD_INT 8
33826: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33827: LD_ADDR_OWVAR 44
33831: PUSH
33832: LD_INT 10
33834: PUSH
33835: LD_INT 12
33837: PUSH
33838: LD_INT 14
33840: PUSH
33841: LD_INT 13
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: PUSH
33850: LD_VAR 0 2
33854: PUSH
33855: LD_INT 9
33857: MINUS
33858: ARRAY
33859: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33860: LD_ADDR_OWVAR 45
33864: PUSH
33865: LD_INT 11
33867: PUSH
33868: LD_INT 15
33870: PUSH
33871: LD_INT 12
33873: PUSH
33874: LD_INT 15
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: PUSH
33883: LD_VAR 0 2
33887: PUSH
33888: LD_INT 9
33890: MINUS
33891: ARRAY
33892: ST_TO_ADDR
// end ; 14 :
33893: GO 34312
33895: LD_INT 14
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33903
33901: GO 33914
33903: POP
// bc_type := b_workshop ; 15 :
33904: LD_ADDR_OWVAR 42
33908: PUSH
33909: LD_INT 2
33911: ST_TO_ADDR
33912: GO 34312
33914: LD_INT 15
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33922
33920: GO 33933
33922: POP
// bc_type := b_factory ; 16 :
33923: LD_ADDR_OWVAR 42
33927: PUSH
33928: LD_INT 3
33930: ST_TO_ADDR
33931: GO 34312
33933: LD_INT 16
33935: DOUBLE
33936: EQUAL
33937: IFTRUE 33941
33939: GO 33952
33941: POP
// bc_type := b_ext_gun ; 17 :
33942: LD_ADDR_OWVAR 42
33946: PUSH
33947: LD_INT 17
33949: ST_TO_ADDR
33950: GO 34312
33952: LD_INT 17
33954: DOUBLE
33955: EQUAL
33956: IFTRUE 33960
33958: GO 33988
33960: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33961: LD_ADDR_OWVAR 42
33965: PUSH
33966: LD_INT 19
33968: PUSH
33969: LD_INT 23
33971: PUSH
33972: LD_INT 19
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: LIST
33979: PUSH
33980: LD_VAR 0 1
33984: ARRAY
33985: ST_TO_ADDR
33986: GO 34312
33988: LD_INT 18
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 33996
33994: GO 34007
33996: POP
// bc_type := b_ext_radar ; 19 :
33997: LD_ADDR_OWVAR 42
34001: PUSH
34002: LD_INT 20
34004: ST_TO_ADDR
34005: GO 34312
34007: LD_INT 19
34009: DOUBLE
34010: EQUAL
34011: IFTRUE 34015
34013: GO 34026
34015: POP
// bc_type := b_ext_radio ; 20 :
34016: LD_ADDR_OWVAR 42
34020: PUSH
34021: LD_INT 22
34023: ST_TO_ADDR
34024: GO 34312
34026: LD_INT 20
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34034
34032: GO 34045
34034: POP
// bc_type := b_ext_siberium ; 21 :
34035: LD_ADDR_OWVAR 42
34039: PUSH
34040: LD_INT 21
34042: ST_TO_ADDR
34043: GO 34312
34045: LD_INT 21
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34053
34051: GO 34064
34053: POP
// bc_type := b_ext_computer ; 22 :
34054: LD_ADDR_OWVAR 42
34058: PUSH
34059: LD_INT 24
34061: ST_TO_ADDR
34062: GO 34312
34064: LD_INT 22
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34083
34072: POP
// bc_type := b_ext_track ; 23 :
34073: LD_ADDR_OWVAR 42
34077: PUSH
34078: LD_INT 16
34080: ST_TO_ADDR
34081: GO 34312
34083: LD_INT 23
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 34102
34091: POP
// bc_type := b_ext_laser ; 24 :
34092: LD_ADDR_OWVAR 42
34096: PUSH
34097: LD_INT 25
34099: ST_TO_ADDR
34100: GO 34312
34102: LD_INT 24
34104: DOUBLE
34105: EQUAL
34106: IFTRUE 34110
34108: GO 34121
34110: POP
// bc_type := b_control_tower ; 25 :
34111: LD_ADDR_OWVAR 42
34115: PUSH
34116: LD_INT 36
34118: ST_TO_ADDR
34119: GO 34312
34121: LD_INT 25
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34140
34129: POP
// bc_type := b_breastwork ; 26 :
34130: LD_ADDR_OWVAR 42
34134: PUSH
34135: LD_INT 31
34137: ST_TO_ADDR
34138: GO 34312
34140: LD_INT 26
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34148
34146: GO 34159
34148: POP
// bc_type := b_bunker ; 27 :
34149: LD_ADDR_OWVAR 42
34153: PUSH
34154: LD_INT 32
34156: ST_TO_ADDR
34157: GO 34312
34159: LD_INT 27
34161: DOUBLE
34162: EQUAL
34163: IFTRUE 34167
34165: GO 34178
34167: POP
// bc_type := b_turret ; 28 :
34168: LD_ADDR_OWVAR 42
34172: PUSH
34173: LD_INT 33
34175: ST_TO_ADDR
34176: GO 34312
34178: LD_INT 28
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34197
34186: POP
// bc_type := b_armoury ; 29 :
34187: LD_ADDR_OWVAR 42
34191: PUSH
34192: LD_INT 4
34194: ST_TO_ADDR
34195: GO 34312
34197: LD_INT 29
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34205
34203: GO 34216
34205: POP
// bc_type := b_barracks ; 30 :
34206: LD_ADDR_OWVAR 42
34210: PUSH
34211: LD_INT 5
34213: ST_TO_ADDR
34214: GO 34312
34216: LD_INT 30
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34224
34222: GO 34235
34224: POP
// bc_type := b_solar_power ; 31 :
34225: LD_ADDR_OWVAR 42
34229: PUSH
34230: LD_INT 27
34232: ST_TO_ADDR
34233: GO 34312
34235: LD_INT 31
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34243
34241: GO 34254
34243: POP
// bc_type := b_oil_power ; 32 :
34244: LD_ADDR_OWVAR 42
34248: PUSH
34249: LD_INT 26
34251: ST_TO_ADDR
34252: GO 34312
34254: LD_INT 32
34256: DOUBLE
34257: EQUAL
34258: IFTRUE 34262
34260: GO 34273
34262: POP
// bc_type := b_siberite_power ; 33 :
34263: LD_ADDR_OWVAR 42
34267: PUSH
34268: LD_INT 28
34270: ST_TO_ADDR
34271: GO 34312
34273: LD_INT 33
34275: DOUBLE
34276: EQUAL
34277: IFTRUE 34281
34279: GO 34292
34281: POP
// bc_type := b_oil_mine ; 34 :
34282: LD_ADDR_OWVAR 42
34286: PUSH
34287: LD_INT 29
34289: ST_TO_ADDR
34290: GO 34312
34292: LD_INT 34
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34311
34300: POP
// bc_type := b_siberite_mine ; end ;
34301: LD_ADDR_OWVAR 42
34305: PUSH
34306: LD_INT 30
34308: ST_TO_ADDR
34309: GO 34312
34311: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34312: LD_ADDR_VAR 0 8
34316: PUSH
34317: LD_VAR 0 5
34321: PPUSH
34322: LD_VAR 0 6
34326: PPUSH
34327: LD_VAR 0 3
34331: PPUSH
34332: CALL_OW 47
34336: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34337: LD_OWVAR 42
34341: PUSH
34342: LD_INT 32
34344: PUSH
34345: LD_INT 33
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: IN
34352: IFFALSE 34368
// PlaceWeaponTurret ( b , weapon ) ;
34354: LD_VAR 0 8
34358: PPUSH
34359: LD_VAR 0 4
34363: PPUSH
34364: CALL_OW 431
// end ;
34368: LD_VAR 0 7
34372: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34373: LD_INT 0
34375: PPUSH
34376: PPUSH
34377: PPUSH
34378: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34379: LD_ADDR_VAR 0 4
34383: PUSH
34384: LD_INT 22
34386: PUSH
34387: LD_OWVAR 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: LD_INT 30
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 30
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PPUSH
34428: CALL_OW 69
34432: ST_TO_ADDR
// if not tmp then
34433: LD_VAR 0 4
34437: NOT
34438: IFFALSE 34442
// exit ;
34440: GO 34501
// for i in tmp do
34442: LD_ADDR_VAR 0 2
34446: PUSH
34447: LD_VAR 0 4
34451: PUSH
34452: FOR_IN
34453: IFFALSE 34499
// for j = 1 to 3 do
34455: LD_ADDR_VAR 0 3
34459: PUSH
34460: DOUBLE
34461: LD_INT 1
34463: DEC
34464: ST_TO_ADDR
34465: LD_INT 3
34467: PUSH
34468: FOR_TO
34469: IFFALSE 34495
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34471: LD_VAR 0 2
34475: PPUSH
34476: CALL_OW 274
34480: PPUSH
34481: LD_VAR 0 3
34485: PPUSH
34486: LD_INT 99999
34488: PPUSH
34489: CALL_OW 277
34493: GO 34468
34495: POP
34496: POP
34497: GO 34452
34499: POP
34500: POP
// end ;
34501: LD_VAR 0 1
34505: RET
// export function hHackSetLevel10 ; var i , j ; begin
34506: LD_INT 0
34508: PPUSH
34509: PPUSH
34510: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34511: LD_ADDR_VAR 0 2
34515: PUSH
34516: LD_INT 21
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PPUSH
34526: CALL_OW 69
34530: PUSH
34531: FOR_IN
34532: IFFALSE 34584
// if IsSelected ( i ) then
34534: LD_VAR 0 2
34538: PPUSH
34539: CALL_OW 306
34543: IFFALSE 34582
// begin for j := 1 to 4 do
34545: LD_ADDR_VAR 0 3
34549: PUSH
34550: DOUBLE
34551: LD_INT 1
34553: DEC
34554: ST_TO_ADDR
34555: LD_INT 4
34557: PUSH
34558: FOR_TO
34559: IFFALSE 34580
// SetSkill ( i , j , 10 ) ;
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_VAR 0 3
34570: PPUSH
34571: LD_INT 10
34573: PPUSH
34574: CALL_OW 237
34578: GO 34558
34580: POP
34581: POP
// end ;
34582: GO 34531
34584: POP
34585: POP
// end ;
34586: LD_VAR 0 1
34590: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34591: LD_INT 0
34593: PPUSH
34594: PPUSH
34595: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34596: LD_ADDR_VAR 0 2
34600: PUSH
34601: LD_INT 22
34603: PUSH
34604: LD_OWVAR 2
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 21
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PPUSH
34627: CALL_OW 69
34631: PUSH
34632: FOR_IN
34633: IFFALSE 34674
// begin for j := 1 to 4 do
34635: LD_ADDR_VAR 0 3
34639: PUSH
34640: DOUBLE
34641: LD_INT 1
34643: DEC
34644: ST_TO_ADDR
34645: LD_INT 4
34647: PUSH
34648: FOR_TO
34649: IFFALSE 34670
// SetSkill ( i , j , 10 ) ;
34651: LD_VAR 0 2
34655: PPUSH
34656: LD_VAR 0 3
34660: PPUSH
34661: LD_INT 10
34663: PPUSH
34664: CALL_OW 237
34668: GO 34648
34670: POP
34671: POP
// end ;
34672: GO 34632
34674: POP
34675: POP
// end ;
34676: LD_VAR 0 1
34680: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34681: LD_INT 0
34683: PPUSH
// uc_side := your_side ;
34684: LD_ADDR_OWVAR 20
34688: PUSH
34689: LD_OWVAR 2
34693: ST_TO_ADDR
// uc_nation := nation ;
34694: LD_ADDR_OWVAR 21
34698: PUSH
34699: LD_VAR 0 1
34703: ST_TO_ADDR
// InitHc ;
34704: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34708: LD_INT 0
34710: PPUSH
34711: LD_VAR 0 2
34715: PPUSH
34716: LD_VAR 0 3
34720: PPUSH
34721: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34725: LD_VAR 0 4
34729: PPUSH
34730: LD_VAR 0 5
34734: PPUSH
34735: CALL_OW 428
34739: PUSH
34740: LD_INT 0
34742: EQUAL
34743: IFFALSE 34767
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34745: CALL_OW 44
34749: PPUSH
34750: LD_VAR 0 4
34754: PPUSH
34755: LD_VAR 0 5
34759: PPUSH
34760: LD_INT 1
34762: PPUSH
34763: CALL_OW 48
// end ;
34767: LD_VAR 0 6
34771: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34772: LD_INT 0
34774: PPUSH
34775: PPUSH
// uc_side := your_side ;
34776: LD_ADDR_OWVAR 20
34780: PUSH
34781: LD_OWVAR 2
34785: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34786: LD_VAR 0 1
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: LD_INT 4
34802: PUSH
34803: LD_INT 5
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: IN
34813: IFFALSE 34825
// uc_nation := nation_american else
34815: LD_ADDR_OWVAR 21
34819: PUSH
34820: LD_INT 1
34822: ST_TO_ADDR
34823: GO 34868
// if chassis in [ 11 , 12 , 13 , 14 ] then
34825: LD_VAR 0 1
34829: PUSH
34830: LD_INT 11
34832: PUSH
34833: LD_INT 12
34835: PUSH
34836: LD_INT 13
34838: PUSH
34839: LD_INT 14
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: IN
34848: IFFALSE 34860
// uc_nation := nation_arabian else
34850: LD_ADDR_OWVAR 21
34854: PUSH
34855: LD_INT 2
34857: ST_TO_ADDR
34858: GO 34868
// uc_nation := nation_russian ;
34860: LD_ADDR_OWVAR 21
34864: PUSH
34865: LD_INT 3
34867: ST_TO_ADDR
// vc_chassis := chassis ;
34868: LD_ADDR_OWVAR 37
34872: PUSH
34873: LD_VAR 0 1
34877: ST_TO_ADDR
// vc_engine := engine ;
34878: LD_ADDR_OWVAR 39
34882: PUSH
34883: LD_VAR 0 2
34887: ST_TO_ADDR
// vc_control := control ;
34888: LD_ADDR_OWVAR 38
34892: PUSH
34893: LD_VAR 0 3
34897: ST_TO_ADDR
// vc_weapon := weapon ;
34898: LD_ADDR_OWVAR 40
34902: PUSH
34903: LD_VAR 0 4
34907: ST_TO_ADDR
// un := CreateVehicle ;
34908: LD_ADDR_VAR 0 8
34912: PUSH
34913: CALL_OW 45
34917: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34918: LD_VAR 0 8
34922: PPUSH
34923: LD_INT 0
34925: PPUSH
34926: LD_INT 5
34928: PPUSH
34929: CALL_OW 12
34933: PPUSH
34934: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34938: LD_VAR 0 8
34942: PPUSH
34943: LD_VAR 0 5
34947: PPUSH
34948: LD_VAR 0 6
34952: PPUSH
34953: LD_INT 1
34955: PPUSH
34956: CALL_OW 48
// end ;
34960: LD_VAR 0 7
34964: RET
// export hInvincible ; every 1 do
34965: GO 34967
34967: DISABLE
// hInvincible := [ ] ;
34968: LD_ADDR_EXP 115
34972: PUSH
34973: EMPTY
34974: ST_TO_ADDR
34975: END
// every 10 do var i ;
34976: GO 34978
34978: DISABLE
34979: LD_INT 0
34981: PPUSH
// begin enable ;
34982: ENABLE
// if not hInvincible then
34983: LD_EXP 115
34987: NOT
34988: IFFALSE 34992
// exit ;
34990: GO 35036
// for i in hInvincible do
34992: LD_ADDR_VAR 0 1
34996: PUSH
34997: LD_EXP 115
35001: PUSH
35002: FOR_IN
35003: IFFALSE 35034
// if GetLives ( i ) < 1000 then
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 256
35014: PUSH
35015: LD_INT 1000
35017: LESS
35018: IFFALSE 35032
// SetLives ( i , 1000 ) ;
35020: LD_VAR 0 1
35024: PPUSH
35025: LD_INT 1000
35027: PPUSH
35028: CALL_OW 234
35032: GO 35002
35034: POP
35035: POP
// end ;
35036: PPOPN 1
35038: END
// export function hHackInvincible ; var i ; begin
35039: LD_INT 0
35041: PPUSH
35042: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35043: LD_ADDR_VAR 0 2
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: LD_INT 21
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 21
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: PPUSH
35076: CALL_OW 69
35080: PUSH
35081: FOR_IN
35082: IFFALSE 35143
// if IsSelected ( i ) then
35084: LD_VAR 0 2
35088: PPUSH
35089: CALL_OW 306
35093: IFFALSE 35141
// begin if i in hInvincible then
35095: LD_VAR 0 2
35099: PUSH
35100: LD_EXP 115
35104: IN
35105: IFFALSE 35125
// hInvincible := hInvincible diff i else
35107: LD_ADDR_EXP 115
35111: PUSH
35112: LD_EXP 115
35116: PUSH
35117: LD_VAR 0 2
35121: DIFF
35122: ST_TO_ADDR
35123: GO 35141
// hInvincible := hInvincible union i ;
35125: LD_ADDR_EXP 115
35129: PUSH
35130: LD_EXP 115
35134: PUSH
35135: LD_VAR 0 2
35139: UNION
35140: ST_TO_ADDR
// end ;
35141: GO 35081
35143: POP
35144: POP
// end ;
35145: LD_VAR 0 1
35149: RET
// export function hHackInvisible ; var i , j ; begin
35150: LD_INT 0
35152: PPUSH
35153: PPUSH
35154: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35155: LD_ADDR_VAR 0 2
35159: PUSH
35160: LD_INT 21
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PPUSH
35170: CALL_OW 69
35174: PUSH
35175: FOR_IN
35176: IFFALSE 35200
// if IsSelected ( i ) then
35178: LD_VAR 0 2
35182: PPUSH
35183: CALL_OW 306
35187: IFFALSE 35198
// ComForceInvisible ( i ) ;
35189: LD_VAR 0 2
35193: PPUSH
35194: CALL_OW 496
35198: GO 35175
35200: POP
35201: POP
// end ;
35202: LD_VAR 0 1
35206: RET
// export function hHackChangeYourSide ; begin
35207: LD_INT 0
35209: PPUSH
// if your_side = 8 then
35210: LD_OWVAR 2
35214: PUSH
35215: LD_INT 8
35217: EQUAL
35218: IFFALSE 35230
// your_side := 0 else
35220: LD_ADDR_OWVAR 2
35224: PUSH
35225: LD_INT 0
35227: ST_TO_ADDR
35228: GO 35244
// your_side := your_side + 1 ;
35230: LD_ADDR_OWVAR 2
35234: PUSH
35235: LD_OWVAR 2
35239: PUSH
35240: LD_INT 1
35242: PLUS
35243: ST_TO_ADDR
// end ;
35244: LD_VAR 0 1
35248: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35249: LD_INT 0
35251: PPUSH
35252: PPUSH
35253: PPUSH
// for i in all_units do
35254: LD_ADDR_VAR 0 2
35258: PUSH
35259: LD_OWVAR 3
35263: PUSH
35264: FOR_IN
35265: IFFALSE 35343
// if IsSelected ( i ) then
35267: LD_VAR 0 2
35271: PPUSH
35272: CALL_OW 306
35276: IFFALSE 35341
// begin j := GetSide ( i ) ;
35278: LD_ADDR_VAR 0 3
35282: PUSH
35283: LD_VAR 0 2
35287: PPUSH
35288: CALL_OW 255
35292: ST_TO_ADDR
// if j = 8 then
35293: LD_VAR 0 3
35297: PUSH
35298: LD_INT 8
35300: EQUAL
35301: IFFALSE 35313
// j := 0 else
35303: LD_ADDR_VAR 0 3
35307: PUSH
35308: LD_INT 0
35310: ST_TO_ADDR
35311: GO 35327
// j := j + 1 ;
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_VAR 0 3
35322: PUSH
35323: LD_INT 1
35325: PLUS
35326: ST_TO_ADDR
// SetSide ( i , j ) ;
35327: LD_VAR 0 2
35331: PPUSH
35332: LD_VAR 0 3
35336: PPUSH
35337: CALL_OW 235
// end ;
35341: GO 35264
35343: POP
35344: POP
// end ;
35345: LD_VAR 0 1
35349: RET
// export function hHackFog ; begin
35350: LD_INT 0
35352: PPUSH
// FogOff ( true ) ;
35353: LD_INT 1
35355: PPUSH
35356: CALL_OW 344
// end ;
35360: LD_VAR 0 1
35364: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35365: LD_INT 0
35367: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35368: LD_VAR 0 1
35372: PPUSH
35373: LD_VAR 0 2
35377: PPUSH
35378: LD_VAR 0 3
35382: PPUSH
35383: LD_INT 1
35385: PPUSH
35386: LD_INT 1
35388: PPUSH
35389: CALL_OW 483
// CenterOnXY ( x , y ) ;
35393: LD_VAR 0 2
35397: PPUSH
35398: LD_VAR 0 3
35402: PPUSH
35403: CALL_OW 84
// end ;
35407: LD_VAR 0 4
35411: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35412: LD_INT 0
35414: PPUSH
35415: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35416: LD_VAR 0 1
35420: NOT
35421: PUSH
35422: LD_VAR 0 2
35426: PPUSH
35427: LD_VAR 0 3
35431: PPUSH
35432: CALL_OW 488
35436: NOT
35437: OR
35438: PUSH
35439: LD_VAR 0 1
35443: PPUSH
35444: CALL_OW 266
35448: PUSH
35449: LD_INT 3
35451: NONEQUAL
35452: PUSH
35453: LD_VAR 0 1
35457: PPUSH
35458: CALL_OW 247
35462: PUSH
35463: LD_INT 1
35465: EQUAL
35466: NOT
35467: AND
35468: OR
35469: IFFALSE 35473
// exit ;
35471: GO 35622
// if GetType ( factory ) = unit_human then
35473: LD_VAR 0 1
35477: PPUSH
35478: CALL_OW 247
35482: PUSH
35483: LD_INT 1
35485: EQUAL
35486: IFFALSE 35503
// factory := IsInUnit ( factory ) ;
35488: LD_ADDR_VAR 0 1
35492: PUSH
35493: LD_VAR 0 1
35497: PPUSH
35498: CALL_OW 310
35502: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35503: LD_VAR 0 1
35507: PPUSH
35508: CALL_OW 266
35512: PUSH
35513: LD_INT 3
35515: NONEQUAL
35516: IFFALSE 35520
// exit ;
35518: GO 35622
// if HexInfo ( x , y ) = factory then
35520: LD_VAR 0 2
35524: PPUSH
35525: LD_VAR 0 3
35529: PPUSH
35530: CALL_OW 428
35534: PUSH
35535: LD_VAR 0 1
35539: EQUAL
35540: IFFALSE 35567
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35542: LD_ADDR_EXP 116
35546: PUSH
35547: LD_EXP 116
35551: PPUSH
35552: LD_VAR 0 1
35556: PPUSH
35557: LD_INT 0
35559: PPUSH
35560: CALL_OW 1
35564: ST_TO_ADDR
35565: GO 35618
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35567: LD_ADDR_EXP 116
35571: PUSH
35572: LD_EXP 116
35576: PPUSH
35577: LD_VAR 0 1
35581: PPUSH
35582: LD_VAR 0 1
35586: PPUSH
35587: CALL_OW 255
35591: PUSH
35592: LD_VAR 0 1
35596: PUSH
35597: LD_VAR 0 2
35601: PUSH
35602: LD_VAR 0 3
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: PPUSH
35613: CALL_OW 1
35617: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35618: CALL 35627 0 0
// end ;
35622: LD_VAR 0 4
35626: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35627: LD_INT 0
35629: PPUSH
35630: PPUSH
35631: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35632: LD_STRING resetFactoryWaypoint();
35634: PPUSH
35635: CALL_OW 559
// if factoryWaypoints then
35639: LD_EXP 116
35643: IFFALSE 35769
// begin list := PrepareArray ( factoryWaypoints ) ;
35645: LD_ADDR_VAR 0 3
35649: PUSH
35650: LD_EXP 116
35654: PPUSH
35655: CALL 83233 0 1
35659: ST_TO_ADDR
// for i := 1 to list do
35660: LD_ADDR_VAR 0 2
35664: PUSH
35665: DOUBLE
35666: LD_INT 1
35668: DEC
35669: ST_TO_ADDR
35670: LD_VAR 0 3
35674: PUSH
35675: FOR_TO
35676: IFFALSE 35767
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35678: LD_STRING setFactoryWaypointXY(
35680: PUSH
35681: LD_VAR 0 3
35685: PUSH
35686: LD_VAR 0 2
35690: ARRAY
35691: PUSH
35692: LD_INT 1
35694: ARRAY
35695: STR
35696: PUSH
35697: LD_STRING ,
35699: STR
35700: PUSH
35701: LD_VAR 0 3
35705: PUSH
35706: LD_VAR 0 2
35710: ARRAY
35711: PUSH
35712: LD_INT 2
35714: ARRAY
35715: STR
35716: PUSH
35717: LD_STRING ,
35719: STR
35720: PUSH
35721: LD_VAR 0 3
35725: PUSH
35726: LD_VAR 0 2
35730: ARRAY
35731: PUSH
35732: LD_INT 3
35734: ARRAY
35735: STR
35736: PUSH
35737: LD_STRING ,
35739: STR
35740: PUSH
35741: LD_VAR 0 3
35745: PUSH
35746: LD_VAR 0 2
35750: ARRAY
35751: PUSH
35752: LD_INT 4
35754: ARRAY
35755: STR
35756: PUSH
35757: LD_STRING )
35759: STR
35760: PPUSH
35761: CALL_OW 559
35765: GO 35675
35767: POP
35768: POP
// end ; end ;
35769: LD_VAR 0 1
35773: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35774: LD_INT 0
35776: PPUSH
// if HexInfo ( x , y ) = warehouse then
35777: LD_VAR 0 2
35781: PPUSH
35782: LD_VAR 0 3
35786: PPUSH
35787: CALL_OW 428
35791: PUSH
35792: LD_VAR 0 1
35796: EQUAL
35797: IFFALSE 35824
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35799: LD_ADDR_EXP 117
35803: PUSH
35804: LD_EXP 117
35808: PPUSH
35809: LD_VAR 0 1
35813: PPUSH
35814: LD_INT 0
35816: PPUSH
35817: CALL_OW 1
35821: ST_TO_ADDR
35822: GO 35875
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35824: LD_ADDR_EXP 117
35828: PUSH
35829: LD_EXP 117
35833: PPUSH
35834: LD_VAR 0 1
35838: PPUSH
35839: LD_VAR 0 1
35843: PPUSH
35844: CALL_OW 255
35848: PUSH
35849: LD_VAR 0 1
35853: PUSH
35854: LD_VAR 0 2
35858: PUSH
35859: LD_VAR 0 3
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: PPUSH
35870: CALL_OW 1
35874: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35875: CALL 35884 0 0
// end ;
35879: LD_VAR 0 4
35883: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35884: LD_INT 0
35886: PPUSH
35887: PPUSH
35888: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35889: LD_STRING resetWarehouseGatheringPoints();
35891: PPUSH
35892: CALL_OW 559
// if warehouseGatheringPoints then
35896: LD_EXP 117
35900: IFFALSE 36026
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35902: LD_ADDR_VAR 0 3
35906: PUSH
35907: LD_EXP 117
35911: PPUSH
35912: CALL 83233 0 1
35916: ST_TO_ADDR
// for i := 1 to list do
35917: LD_ADDR_VAR 0 2
35921: PUSH
35922: DOUBLE
35923: LD_INT 1
35925: DEC
35926: ST_TO_ADDR
35927: LD_VAR 0 3
35931: PUSH
35932: FOR_TO
35933: IFFALSE 36024
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35935: LD_STRING setWarehouseGatheringPointXY(
35937: PUSH
35938: LD_VAR 0 3
35942: PUSH
35943: LD_VAR 0 2
35947: ARRAY
35948: PUSH
35949: LD_INT 1
35951: ARRAY
35952: STR
35953: PUSH
35954: LD_STRING ,
35956: STR
35957: PUSH
35958: LD_VAR 0 3
35962: PUSH
35963: LD_VAR 0 2
35967: ARRAY
35968: PUSH
35969: LD_INT 2
35971: ARRAY
35972: STR
35973: PUSH
35974: LD_STRING ,
35976: STR
35977: PUSH
35978: LD_VAR 0 3
35982: PUSH
35983: LD_VAR 0 2
35987: ARRAY
35988: PUSH
35989: LD_INT 3
35991: ARRAY
35992: STR
35993: PUSH
35994: LD_STRING ,
35996: STR
35997: PUSH
35998: LD_VAR 0 3
36002: PUSH
36003: LD_VAR 0 2
36007: ARRAY
36008: PUSH
36009: LD_INT 4
36011: ARRAY
36012: STR
36013: PUSH
36014: LD_STRING )
36016: STR
36017: PPUSH
36018: CALL_OW 559
36022: GO 35932
36024: POP
36025: POP
// end ; end ;
36026: LD_VAR 0 1
36030: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36031: LD_EXP 117
36035: IFFALSE 36720
36037: GO 36039
36039: DISABLE
36040: LD_INT 0
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
// begin enable ;
36051: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36052: LD_ADDR_VAR 0 3
36056: PUSH
36057: LD_EXP 117
36061: PPUSH
36062: CALL 83233 0 1
36066: ST_TO_ADDR
// if not list then
36067: LD_VAR 0 3
36071: NOT
36072: IFFALSE 36076
// exit ;
36074: GO 36720
// for i := 1 to list do
36076: LD_ADDR_VAR 0 1
36080: PUSH
36081: DOUBLE
36082: LD_INT 1
36084: DEC
36085: ST_TO_ADDR
36086: LD_VAR 0 3
36090: PUSH
36091: FOR_TO
36092: IFFALSE 36718
// begin depot := list [ i ] [ 2 ] ;
36094: LD_ADDR_VAR 0 8
36098: PUSH
36099: LD_VAR 0 3
36103: PUSH
36104: LD_VAR 0 1
36108: ARRAY
36109: PUSH
36110: LD_INT 2
36112: ARRAY
36113: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36114: LD_ADDR_VAR 0 5
36118: PUSH
36119: LD_VAR 0 3
36123: PUSH
36124: LD_VAR 0 1
36128: ARRAY
36129: PUSH
36130: LD_INT 1
36132: ARRAY
36133: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36134: LD_VAR 0 8
36138: PPUSH
36139: CALL_OW 301
36143: PUSH
36144: LD_VAR 0 5
36148: PUSH
36149: LD_VAR 0 8
36153: PPUSH
36154: CALL_OW 255
36158: NONEQUAL
36159: OR
36160: IFFALSE 36189
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36162: LD_ADDR_EXP 117
36166: PUSH
36167: LD_EXP 117
36171: PPUSH
36172: LD_VAR 0 8
36176: PPUSH
36177: LD_INT 0
36179: PPUSH
36180: CALL_OW 1
36184: ST_TO_ADDR
// exit ;
36185: POP
36186: POP
36187: GO 36720
// end ; x := list [ i ] [ 3 ] ;
36189: LD_ADDR_VAR 0 6
36193: PUSH
36194: LD_VAR 0 3
36198: PUSH
36199: LD_VAR 0 1
36203: ARRAY
36204: PUSH
36205: LD_INT 3
36207: ARRAY
36208: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36209: LD_ADDR_VAR 0 7
36213: PUSH
36214: LD_VAR 0 3
36218: PUSH
36219: LD_VAR 0 1
36223: ARRAY
36224: PUSH
36225: LD_INT 4
36227: ARRAY
36228: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36229: LD_ADDR_VAR 0 9
36233: PUSH
36234: LD_VAR 0 6
36238: PPUSH
36239: LD_VAR 0 7
36243: PPUSH
36244: LD_INT 16
36246: PPUSH
36247: CALL 81817 0 3
36251: ST_TO_ADDR
// if not cratesNearbyPoint then
36252: LD_VAR 0 9
36256: NOT
36257: IFFALSE 36263
// exit ;
36259: POP
36260: POP
36261: GO 36720
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36263: LD_ADDR_VAR 0 4
36267: PUSH
36268: LD_INT 22
36270: PUSH
36271: LD_VAR 0 5
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 3
36282: PUSH
36283: LD_INT 60
36285: PUSH
36286: EMPTY
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 91
36295: PUSH
36296: LD_VAR 0 8
36300: PUSH
36301: LD_INT 6
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 25
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 25
36324: PUSH
36325: LD_INT 16
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: PPUSH
36343: CALL_OW 69
36347: PUSH
36348: LD_VAR 0 8
36352: PPUSH
36353: CALL_OW 313
36357: PPUSH
36358: LD_INT 3
36360: PUSH
36361: LD_INT 60
36363: PUSH
36364: EMPTY
36365: LIST
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: LD_INT 25
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 25
36386: PUSH
36387: LD_INT 16
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PPUSH
36403: CALL_OW 72
36407: UNION
36408: ST_TO_ADDR
// if tmp then
36409: LD_VAR 0 4
36413: IFFALSE 36493
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36415: LD_ADDR_VAR 0 4
36419: PUSH
36420: LD_VAR 0 4
36424: PPUSH
36425: LD_INT 3
36427: PPUSH
36428: CALL 79786 0 2
36432: ST_TO_ADDR
// for j in tmp do
36433: LD_ADDR_VAR 0 2
36437: PUSH
36438: LD_VAR 0 4
36442: PUSH
36443: FOR_IN
36444: IFFALSE 36487
// begin if IsInUnit ( j ) then
36446: LD_VAR 0 2
36450: PPUSH
36451: CALL_OW 310
36455: IFFALSE 36466
// ComExit ( j ) ;
36457: LD_VAR 0 2
36461: PPUSH
36462: CALL 79869 0 1
// AddComCollect ( j , x , y ) ;
36466: LD_VAR 0 2
36470: PPUSH
36471: LD_VAR 0 6
36475: PPUSH
36476: LD_VAR 0 7
36480: PPUSH
36481: CALL_OW 177
// end ;
36485: GO 36443
36487: POP
36488: POP
// exit ;
36489: POP
36490: POP
36491: GO 36720
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36493: LD_ADDR_VAR 0 4
36497: PUSH
36498: LD_INT 22
36500: PUSH
36501: LD_VAR 0 5
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 91
36512: PUSH
36513: LD_VAR 0 8
36517: PUSH
36518: LD_INT 8
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: LD_INT 34
36531: PUSH
36532: LD_INT 12
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 34
36541: PUSH
36542: LD_INT 51
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 34
36551: PUSH
36552: LD_INT 32
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 34
36561: PUSH
36562: LD_INT 89
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL_OW 69
36585: ST_TO_ADDR
// if tmp then
36586: LD_VAR 0 4
36590: IFFALSE 36716
// begin for j in tmp do
36592: LD_ADDR_VAR 0 2
36596: PUSH
36597: LD_VAR 0 4
36601: PUSH
36602: FOR_IN
36603: IFFALSE 36714
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36605: LD_VAR 0 2
36609: PPUSH
36610: CALL_OW 262
36614: PUSH
36615: LD_INT 3
36617: EQUAL
36618: PUSH
36619: LD_VAR 0 2
36623: PPUSH
36624: CALL_OW 261
36628: PUSH
36629: LD_INT 20
36631: GREATER
36632: OR
36633: PUSH
36634: LD_VAR 0 2
36638: PPUSH
36639: CALL_OW 314
36643: NOT
36644: AND
36645: PUSH
36646: LD_VAR 0 2
36650: PPUSH
36651: CALL_OW 263
36655: PUSH
36656: LD_INT 1
36658: NONEQUAL
36659: PUSH
36660: LD_VAR 0 2
36664: PPUSH
36665: CALL_OW 311
36669: OR
36670: AND
36671: IFFALSE 36712
// begin ComCollect ( j , x , y ) ;
36673: LD_VAR 0 2
36677: PPUSH
36678: LD_VAR 0 6
36682: PPUSH
36683: LD_VAR 0 7
36687: PPUSH
36688: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36692: LD_VAR 0 2
36696: PPUSH
36697: LD_VAR 0 8
36701: PPUSH
36702: CALL_OW 172
// exit ;
36706: POP
36707: POP
36708: POP
36709: POP
36710: GO 36720
// end ;
36712: GO 36602
36714: POP
36715: POP
// end ; end ;
36716: GO 36091
36718: POP
36719: POP
// end ; end_of_file
36720: PPOPN 9
36722: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
36723: LD_VAR 0 1
36727: PUSH
36728: LD_INT 200
36730: DOUBLE
36731: GREATEREQUAL
36732: IFFALSE 36740
36734: LD_INT 299
36736: DOUBLE
36737: LESSEQUAL
36738: IFTRUE 36742
36740: GO 36774
36742: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
36743: LD_VAR 0 1
36747: PPUSH
36748: LD_VAR 0 2
36752: PPUSH
36753: LD_VAR 0 3
36757: PPUSH
36758: LD_VAR 0 4
36762: PPUSH
36763: LD_VAR 0 5
36767: PPUSH
36768: CALL 37262 0 5
36772: GO 36851
36774: LD_INT 300
36776: DOUBLE
36777: GREATEREQUAL
36778: IFFALSE 36786
36780: LD_INT 399
36782: DOUBLE
36783: LESSEQUAL
36784: IFTRUE 36788
36786: GO 36850
36788: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
36789: LD_VAR 0 1
36793: PPUSH
36794: LD_VAR 0 2
36798: PPUSH
36799: LD_VAR 0 3
36803: PPUSH
36804: LD_VAR 0 4
36808: PPUSH
36809: LD_VAR 0 5
36813: PPUSH
36814: LD_VAR 0 6
36818: PPUSH
36819: LD_VAR 0 7
36823: PPUSH
36824: LD_VAR 0 8
36828: PPUSH
36829: LD_VAR 0 9
36833: PPUSH
36834: LD_VAR 0 10
36838: PPUSH
36839: LD_VAR 0 11
36843: PPUSH
36844: CALL 33424 0 11
36848: GO 36851
36850: POP
// end ;
36851: PPOPN 11
36853: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
36854: LD_VAR 0 1
36858: PPUSH
36859: LD_VAR 0 2
36863: PPUSH
36864: LD_VAR 0 3
36868: PPUSH
36869: LD_VAR 0 4
36873: PPUSH
36874: LD_VAR 0 5
36878: PPUSH
36879: CALL 36998 0 5
// end ; end_of_file
36883: PPOPN 5
36885: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36886: LD_INT 0
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36892: LD_VAR 0 1
36896: PPUSH
36897: CALL_OW 264
36901: PUSH
36902: LD_INT 91
36904: EQUAL
36905: IFFALSE 36977
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36907: LD_INT 68
36909: PPUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 255
36919: PPUSH
36920: CALL_OW 321
36924: PUSH
36925: LD_INT 2
36927: EQUAL
36928: IFFALSE 36940
// eff := 70 else
36930: LD_ADDR_VAR 0 4
36934: PUSH
36935: LD_INT 70
36937: ST_TO_ADDR
36938: GO 36948
// eff := 30 ;
36940: LD_ADDR_VAR 0 4
36944: PUSH
36945: LD_INT 30
36947: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36948: LD_VAR 0 1
36952: PPUSH
36953: CALL_OW 250
36957: PPUSH
36958: LD_VAR 0 1
36962: PPUSH
36963: CALL_OW 251
36967: PPUSH
36968: LD_VAR 0 4
36972: PPUSH
36973: CALL_OW 495
// end ; end ;
36977: LD_VAR 0 2
36981: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36982: LD_INT 0
36984: PPUSH
// end ;
36985: LD_VAR 0 4
36989: RET
// export function SOS_Command ( cmd ) ; begin
36990: LD_INT 0
36992: PPUSH
// end ;
36993: LD_VAR 0 2
36997: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36998: LD_INT 0
37000: PPUSH
// end ;
37001: LD_VAR 0 6
37005: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37006: LD_INT 0
37008: PPUSH
37009: PPUSH
// if not vehicle or not factory then
37010: LD_VAR 0 1
37014: NOT
37015: PUSH
37016: LD_VAR 0 2
37020: NOT
37021: OR
37022: IFFALSE 37026
// exit ;
37024: GO 37257
// if factoryWaypoints >= factory then
37026: LD_EXP 116
37030: PUSH
37031: LD_VAR 0 2
37035: GREATEREQUAL
37036: IFFALSE 37257
// if factoryWaypoints [ factory ] then
37038: LD_EXP 116
37042: PUSH
37043: LD_VAR 0 2
37047: ARRAY
37048: IFFALSE 37257
// begin if GetControl ( vehicle ) = control_manual then
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL_OW 263
37059: PUSH
37060: LD_INT 1
37062: EQUAL
37063: IFFALSE 37144
// begin driver := IsDrivenBy ( vehicle ) ;
37065: LD_ADDR_VAR 0 4
37069: PUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL_OW 311
37079: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37080: LD_VAR 0 4
37084: PPUSH
37085: LD_EXP 116
37089: PUSH
37090: LD_VAR 0 2
37094: ARRAY
37095: PUSH
37096: LD_INT 3
37098: ARRAY
37099: PPUSH
37100: LD_EXP 116
37104: PUSH
37105: LD_VAR 0 2
37109: ARRAY
37110: PUSH
37111: LD_INT 4
37113: ARRAY
37114: PPUSH
37115: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37119: LD_VAR 0 4
37123: PPUSH
37124: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37128: LD_VAR 0 4
37132: PPUSH
37133: LD_VAR 0 2
37137: PPUSH
37138: CALL_OW 180
// end else
37142: GO 37257
// if GetControl ( vehicle ) = control_remote then
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 263
37153: PUSH
37154: LD_INT 2
37156: EQUAL
37157: IFFALSE 37218
// begin wait ( 0 0$2 ) ;
37159: LD_INT 70
37161: PPUSH
37162: CALL_OW 67
// if Connect ( vehicle ) then
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL 50088 0 1
37175: IFFALSE 37216
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37177: LD_VAR 0 1
37181: PPUSH
37182: LD_EXP 116
37186: PUSH
37187: LD_VAR 0 2
37191: ARRAY
37192: PUSH
37193: LD_INT 3
37195: ARRAY
37196: PPUSH
37197: LD_EXP 116
37201: PUSH
37202: LD_VAR 0 2
37206: ARRAY
37207: PUSH
37208: LD_INT 4
37210: ARRAY
37211: PPUSH
37212: CALL_OW 171
// end else
37216: GO 37257
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37218: LD_VAR 0 1
37222: PPUSH
37223: LD_EXP 116
37227: PUSH
37228: LD_VAR 0 2
37232: ARRAY
37233: PUSH
37234: LD_INT 3
37236: ARRAY
37237: PPUSH
37238: LD_EXP 116
37242: PUSH
37243: LD_VAR 0 2
37247: ARRAY
37248: PUSH
37249: LD_INT 4
37251: ARRAY
37252: PPUSH
37253: CALL_OW 171
// end ; end ;
37257: LD_VAR 0 3
37261: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37262: LD_INT 0
37264: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37265: LD_VAR 0 1
37269: PUSH
37270: LD_INT 250
37272: EQUAL
37273: PUSH
37274: LD_VAR 0 2
37278: PPUSH
37279: CALL_OW 264
37283: PUSH
37284: LD_INT 81
37286: EQUAL
37287: AND
37288: IFFALSE 37309
// MinerPlaceMine ( unit , x , y ) ;
37290: LD_VAR 0 2
37294: PPUSH
37295: LD_VAR 0 4
37299: PPUSH
37300: LD_VAR 0 5
37304: PPUSH
37305: CALL 40299 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37309: LD_VAR 0 1
37313: PUSH
37314: LD_INT 251
37316: EQUAL
37317: PUSH
37318: LD_VAR 0 2
37322: PPUSH
37323: CALL_OW 264
37327: PUSH
37328: LD_INT 81
37330: EQUAL
37331: AND
37332: IFFALSE 37353
// MinerDetonateMine ( unit , x , y ) ;
37334: LD_VAR 0 2
37338: PPUSH
37339: LD_VAR 0 4
37343: PPUSH
37344: LD_VAR 0 5
37348: PPUSH
37349: CALL 40574 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37353: LD_VAR 0 1
37357: PUSH
37358: LD_INT 252
37360: EQUAL
37361: PUSH
37362: LD_VAR 0 2
37366: PPUSH
37367: CALL_OW 264
37371: PUSH
37372: LD_INT 81
37374: EQUAL
37375: AND
37376: IFFALSE 37397
// MinerCreateMinefield ( unit , x , y ) ;
37378: LD_VAR 0 2
37382: PPUSH
37383: LD_VAR 0 4
37387: PPUSH
37388: LD_VAR 0 5
37392: PPUSH
37393: CALL 40991 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37397: LD_VAR 0 1
37401: PUSH
37402: LD_INT 253
37404: EQUAL
37405: PUSH
37406: LD_VAR 0 2
37410: PPUSH
37411: CALL_OW 257
37415: PUSH
37416: LD_INT 5
37418: EQUAL
37419: AND
37420: IFFALSE 37441
// ComBinocular ( unit , x , y ) ;
37422: LD_VAR 0 2
37426: PPUSH
37427: LD_VAR 0 4
37431: PPUSH
37432: LD_VAR 0 5
37436: PPUSH
37437: CALL 41360 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37441: LD_VAR 0 1
37445: PUSH
37446: LD_INT 254
37448: EQUAL
37449: PUSH
37450: LD_VAR 0 2
37454: PPUSH
37455: CALL_OW 264
37459: PUSH
37460: LD_INT 99
37462: EQUAL
37463: AND
37464: PUSH
37465: LD_VAR 0 3
37469: PPUSH
37470: CALL_OW 263
37474: PUSH
37475: LD_INT 3
37477: EQUAL
37478: AND
37479: IFFALSE 37495
// HackDestroyVehicle ( unit , selectedUnit ) ;
37481: LD_VAR 0 2
37485: PPUSH
37486: LD_VAR 0 3
37490: PPUSH
37491: CALL 39663 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37495: LD_VAR 0 1
37499: PUSH
37500: LD_INT 255
37502: EQUAL
37503: PUSH
37504: LD_VAR 0 2
37508: PPUSH
37509: CALL_OW 264
37513: PUSH
37514: LD_INT 14
37516: PUSH
37517: LD_INT 53
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: IN
37524: AND
37525: PUSH
37526: LD_VAR 0 4
37530: PPUSH
37531: LD_VAR 0 5
37535: PPUSH
37536: CALL_OW 488
37540: AND
37541: IFFALSE 37565
// CutTreeXYR ( unit , x , y , 12 ) ;
37543: LD_VAR 0 2
37547: PPUSH
37548: LD_VAR 0 4
37552: PPUSH
37553: LD_VAR 0 5
37557: PPUSH
37558: LD_INT 12
37560: PPUSH
37561: CALL 37660 0 4
// if cmd = 256 then
37565: LD_VAR 0 1
37569: PUSH
37570: LD_INT 256
37572: EQUAL
37573: IFFALSE 37594
// SetFactoryWaypoint ( unit , x , y ) ;
37575: LD_VAR 0 2
37579: PPUSH
37580: LD_VAR 0 4
37584: PPUSH
37585: LD_VAR 0 5
37589: PPUSH
37590: CALL 35412 0 3
// if cmd = 257 then
37594: LD_VAR 0 1
37598: PUSH
37599: LD_INT 257
37601: EQUAL
37602: IFFALSE 37623
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37604: LD_VAR 0 2
37608: PPUSH
37609: LD_VAR 0 4
37613: PPUSH
37614: LD_VAR 0 5
37618: PPUSH
37619: CALL 35774 0 3
// if cmd = 258 then
37623: LD_VAR 0 1
37627: PUSH
37628: LD_INT 258
37630: EQUAL
37631: IFFALSE 37655
// BurnTreeXYR ( unit , x , y , 8 ) ;
37633: LD_VAR 0 2
37637: PPUSH
37638: LD_VAR 0 4
37642: PPUSH
37643: LD_VAR 0 5
37647: PPUSH
37648: LD_INT 8
37650: PPUSH
37651: CALL 38054 0 4
// end ;
37655: LD_VAR 0 6
37659: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37660: LD_INT 0
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 302
37680: NOT
37681: PUSH
37682: LD_VAR 0 2
37686: PPUSH
37687: LD_VAR 0 3
37691: PPUSH
37692: CALL_OW 488
37696: NOT
37697: OR
37698: PUSH
37699: LD_VAR 0 4
37703: NOT
37704: OR
37705: IFFALSE 37709
// exit ;
37707: GO 38049
// list := [ ] ;
37709: LD_ADDR_VAR 0 13
37713: PUSH
37714: EMPTY
37715: ST_TO_ADDR
// if x - r < 0 then
37716: LD_VAR 0 2
37720: PUSH
37721: LD_VAR 0 4
37725: MINUS
37726: PUSH
37727: LD_INT 0
37729: LESS
37730: IFFALSE 37742
// min_x := 0 else
37732: LD_ADDR_VAR 0 7
37736: PUSH
37737: LD_INT 0
37739: ST_TO_ADDR
37740: GO 37758
// min_x := x - r ;
37742: LD_ADDR_VAR 0 7
37746: PUSH
37747: LD_VAR 0 2
37751: PUSH
37752: LD_VAR 0 4
37756: MINUS
37757: ST_TO_ADDR
// if y - r < 0 then
37758: LD_VAR 0 3
37762: PUSH
37763: LD_VAR 0 4
37767: MINUS
37768: PUSH
37769: LD_INT 0
37771: LESS
37772: IFFALSE 37784
// min_y := 0 else
37774: LD_ADDR_VAR 0 8
37778: PUSH
37779: LD_INT 0
37781: ST_TO_ADDR
37782: GO 37800
// min_y := y - r ;
37784: LD_ADDR_VAR 0 8
37788: PUSH
37789: LD_VAR 0 3
37793: PUSH
37794: LD_VAR 0 4
37798: MINUS
37799: ST_TO_ADDR
// max_x := x + r ;
37800: LD_ADDR_VAR 0 9
37804: PUSH
37805: LD_VAR 0 2
37809: PUSH
37810: LD_VAR 0 4
37814: PLUS
37815: ST_TO_ADDR
// max_y := y + r ;
37816: LD_ADDR_VAR 0 10
37820: PUSH
37821: LD_VAR 0 3
37825: PUSH
37826: LD_VAR 0 4
37830: PLUS
37831: ST_TO_ADDR
// for _x = min_x to max_x do
37832: LD_ADDR_VAR 0 11
37836: PUSH
37837: DOUBLE
37838: LD_VAR 0 7
37842: DEC
37843: ST_TO_ADDR
37844: LD_VAR 0 9
37848: PUSH
37849: FOR_TO
37850: IFFALSE 37967
// for _y = min_y to max_y do
37852: LD_ADDR_VAR 0 12
37856: PUSH
37857: DOUBLE
37858: LD_VAR 0 8
37862: DEC
37863: ST_TO_ADDR
37864: LD_VAR 0 10
37868: PUSH
37869: FOR_TO
37870: IFFALSE 37963
// begin if not ValidHex ( _x , _y ) then
37872: LD_VAR 0 11
37876: PPUSH
37877: LD_VAR 0 12
37881: PPUSH
37882: CALL_OW 488
37886: NOT
37887: IFFALSE 37891
// continue ;
37889: GO 37869
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37891: LD_VAR 0 11
37895: PPUSH
37896: LD_VAR 0 12
37900: PPUSH
37901: CALL_OW 351
37905: PUSH
37906: LD_VAR 0 11
37910: PPUSH
37911: LD_VAR 0 12
37915: PPUSH
37916: CALL_OW 554
37920: AND
37921: IFFALSE 37961
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37923: LD_ADDR_VAR 0 13
37927: PUSH
37928: LD_VAR 0 13
37932: PPUSH
37933: LD_VAR 0 13
37937: PUSH
37938: LD_INT 1
37940: PLUS
37941: PPUSH
37942: LD_VAR 0 11
37946: PUSH
37947: LD_VAR 0 12
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PPUSH
37956: CALL_OW 2
37960: ST_TO_ADDR
// end ;
37961: GO 37869
37963: POP
37964: POP
37965: GO 37849
37967: POP
37968: POP
// if not list then
37969: LD_VAR 0 13
37973: NOT
37974: IFFALSE 37978
// exit ;
37976: GO 38049
// for i in list do
37978: LD_ADDR_VAR 0 6
37982: PUSH
37983: LD_VAR 0 13
37987: PUSH
37988: FOR_IN
37989: IFFALSE 38047
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37991: LD_VAR 0 1
37995: PPUSH
37996: LD_STRING M
37998: PUSH
37999: LD_VAR 0 6
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PUSH
38008: LD_VAR 0 6
38012: PUSH
38013: LD_INT 2
38015: ARRAY
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: PUSH
38038: EMPTY
38039: LIST
38040: PPUSH
38041: CALL_OW 447
38045: GO 37988
38047: POP
38048: POP
// end ;
38049: LD_VAR 0 5
38053: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38054: LD_INT 0
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 302
38075: NOT
38076: PUSH
38077: LD_VAR 0 2
38081: PPUSH
38082: LD_VAR 0 3
38086: PPUSH
38087: CALL_OW 488
38091: NOT
38092: OR
38093: PUSH
38094: LD_VAR 0 4
38098: NOT
38099: OR
38100: IFFALSE 38104
// exit ;
38102: GO 38617
// list := [ ] ;
38104: LD_ADDR_VAR 0 13
38108: PUSH
38109: EMPTY
38110: ST_TO_ADDR
// if x - r < 0 then
38111: LD_VAR 0 2
38115: PUSH
38116: LD_VAR 0 4
38120: MINUS
38121: PUSH
38122: LD_INT 0
38124: LESS
38125: IFFALSE 38137
// min_x := 0 else
38127: LD_ADDR_VAR 0 7
38131: PUSH
38132: LD_INT 0
38134: ST_TO_ADDR
38135: GO 38153
// min_x := x - r ;
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: LD_VAR 0 2
38146: PUSH
38147: LD_VAR 0 4
38151: MINUS
38152: ST_TO_ADDR
// if y - r < 0 then
38153: LD_VAR 0 3
38157: PUSH
38158: LD_VAR 0 4
38162: MINUS
38163: PUSH
38164: LD_INT 0
38166: LESS
38167: IFFALSE 38179
// min_y := 0 else
38169: LD_ADDR_VAR 0 8
38173: PUSH
38174: LD_INT 0
38176: ST_TO_ADDR
38177: GO 38195
// min_y := y - r ;
38179: LD_ADDR_VAR 0 8
38183: PUSH
38184: LD_VAR 0 3
38188: PUSH
38189: LD_VAR 0 4
38193: MINUS
38194: ST_TO_ADDR
// max_x := x + r ;
38195: LD_ADDR_VAR 0 9
38199: PUSH
38200: LD_VAR 0 2
38204: PUSH
38205: LD_VAR 0 4
38209: PLUS
38210: ST_TO_ADDR
// max_y := y + r ;
38211: LD_ADDR_VAR 0 10
38215: PUSH
38216: LD_VAR 0 3
38220: PUSH
38221: LD_VAR 0 4
38225: PLUS
38226: ST_TO_ADDR
// for _x = min_x to max_x do
38227: LD_ADDR_VAR 0 11
38231: PUSH
38232: DOUBLE
38233: LD_VAR 0 7
38237: DEC
38238: ST_TO_ADDR
38239: LD_VAR 0 9
38243: PUSH
38244: FOR_TO
38245: IFFALSE 38362
// for _y = min_y to max_y do
38247: LD_ADDR_VAR 0 12
38251: PUSH
38252: DOUBLE
38253: LD_VAR 0 8
38257: DEC
38258: ST_TO_ADDR
38259: LD_VAR 0 10
38263: PUSH
38264: FOR_TO
38265: IFFALSE 38358
// begin if not ValidHex ( _x , _y ) then
38267: LD_VAR 0 11
38271: PPUSH
38272: LD_VAR 0 12
38276: PPUSH
38277: CALL_OW 488
38281: NOT
38282: IFFALSE 38286
// continue ;
38284: GO 38264
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38286: LD_VAR 0 11
38290: PPUSH
38291: LD_VAR 0 12
38295: PPUSH
38296: CALL_OW 351
38300: PUSH
38301: LD_VAR 0 11
38305: PPUSH
38306: LD_VAR 0 12
38310: PPUSH
38311: CALL_OW 554
38315: AND
38316: IFFALSE 38356
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38318: LD_ADDR_VAR 0 13
38322: PUSH
38323: LD_VAR 0 13
38327: PPUSH
38328: LD_VAR 0 13
38332: PUSH
38333: LD_INT 1
38335: PLUS
38336: PPUSH
38337: LD_VAR 0 11
38341: PUSH
38342: LD_VAR 0 12
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PPUSH
38351: CALL_OW 2
38355: ST_TO_ADDR
// end ;
38356: GO 38264
38358: POP
38359: POP
38360: GO 38244
38362: POP
38363: POP
// if not list then
38364: LD_VAR 0 13
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38617
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38373: LD_ADDR_VAR 0 13
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_VAR 0 13
38387: PPUSH
38388: LD_INT 1
38390: PPUSH
38391: LD_INT 1
38393: PPUSH
38394: CALL 47230 0 4
38398: ST_TO_ADDR
// ComStop ( flame ) ;
38399: LD_VAR 0 1
38403: PPUSH
38404: CALL_OW 141
// for i in list do
38408: LD_ADDR_VAR 0 6
38412: PUSH
38413: LD_VAR 0 13
38417: PUSH
38418: FOR_IN
38419: IFFALSE 38450
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38421: LD_VAR 0 1
38425: PPUSH
38426: LD_VAR 0 6
38430: PUSH
38431: LD_INT 1
38433: ARRAY
38434: PPUSH
38435: LD_VAR 0 6
38439: PUSH
38440: LD_INT 2
38442: ARRAY
38443: PPUSH
38444: CALL_OW 176
38448: GO 38418
38450: POP
38451: POP
// repeat wait ( 0 0$1 ) ;
38452: LD_INT 35
38454: PPUSH
38455: CALL_OW 67
// task := GetTaskList ( flame ) ;
38459: LD_ADDR_VAR 0 14
38463: PUSH
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 437
38473: ST_TO_ADDR
// if not task then
38474: LD_VAR 0 14
38478: NOT
38479: IFFALSE 38483
// exit ;
38481: GO 38617
// if task [ 1 ] [ 1 ] <> | then
38483: LD_VAR 0 14
38487: PUSH
38488: LD_INT 1
38490: ARRAY
38491: PUSH
38492: LD_INT 1
38494: ARRAY
38495: PUSH
38496: LD_STRING |
38498: NONEQUAL
38499: IFFALSE 38503
// exit ;
38501: GO 38617
// _x := task [ 1 ] [ 2 ] ;
38503: LD_ADDR_VAR 0 11
38507: PUSH
38508: LD_VAR 0 14
38512: PUSH
38513: LD_INT 1
38515: ARRAY
38516: PUSH
38517: LD_INT 2
38519: ARRAY
38520: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38521: LD_ADDR_VAR 0 12
38525: PUSH
38526: LD_VAR 0 14
38530: PUSH
38531: LD_INT 1
38533: ARRAY
38534: PUSH
38535: LD_INT 3
38537: ARRAY
38538: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38539: LD_VAR 0 11
38543: PPUSH
38544: LD_VAR 0 12
38548: PPUSH
38549: CALL_OW 351
38553: NOT
38554: PUSH
38555: LD_VAR 0 11
38559: PPUSH
38560: LD_VAR 0 12
38564: PPUSH
38565: CALL_OW 554
38569: NOT
38570: OR
38571: IFFALSE 38605
// begin task := Delete ( task , 1 ) ;
38573: LD_ADDR_VAR 0 14
38577: PUSH
38578: LD_VAR 0 14
38582: PPUSH
38583: LD_INT 1
38585: PPUSH
38586: CALL_OW 3
38590: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38591: LD_VAR 0 1
38595: PPUSH
38596: LD_VAR 0 14
38600: PPUSH
38601: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 314
38614: NOT
38615: IFFALSE 38452
// end ;
38617: LD_VAR 0 5
38621: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38622: LD_EXP 119
38626: NOT
38627: IFFALSE 38677
38629: GO 38631
38631: DISABLE
// begin initHack := true ;
38632: LD_ADDR_EXP 119
38636: PUSH
38637: LD_INT 1
38639: ST_TO_ADDR
// hackTanks := [ ] ;
38640: LD_ADDR_EXP 120
38644: PUSH
38645: EMPTY
38646: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38647: LD_ADDR_EXP 121
38651: PUSH
38652: EMPTY
38653: ST_TO_ADDR
// hackLimit := 3 ;
38654: LD_ADDR_EXP 122
38658: PUSH
38659: LD_INT 3
38661: ST_TO_ADDR
// hackDist := 12 ;
38662: LD_ADDR_EXP 123
38666: PUSH
38667: LD_INT 12
38669: ST_TO_ADDR
// hackCounter := [ ] ;
38670: LD_ADDR_EXP 124
38674: PUSH
38675: EMPTY
38676: ST_TO_ADDR
// end ;
38677: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38678: LD_EXP 119
38682: PUSH
38683: LD_INT 34
38685: PUSH
38686: LD_INT 99
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PPUSH
38693: CALL_OW 69
38697: AND
38698: IFFALSE 38951
38700: GO 38702
38702: DISABLE
38703: LD_INT 0
38705: PPUSH
38706: PPUSH
// begin enable ;
38707: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38708: LD_ADDR_VAR 0 1
38712: PUSH
38713: LD_INT 34
38715: PUSH
38716: LD_INT 99
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PPUSH
38723: CALL_OW 69
38727: PUSH
38728: FOR_IN
38729: IFFALSE 38949
// begin if not i in hackTanks then
38731: LD_VAR 0 1
38735: PUSH
38736: LD_EXP 120
38740: IN
38741: NOT
38742: IFFALSE 38825
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38744: LD_ADDR_EXP 120
38748: PUSH
38749: LD_EXP 120
38753: PPUSH
38754: LD_EXP 120
38758: PUSH
38759: LD_INT 1
38761: PLUS
38762: PPUSH
38763: LD_VAR 0 1
38767: PPUSH
38768: CALL_OW 1
38772: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38773: LD_ADDR_EXP 121
38777: PUSH
38778: LD_EXP 121
38782: PPUSH
38783: LD_EXP 121
38787: PUSH
38788: LD_INT 1
38790: PLUS
38791: PPUSH
38792: EMPTY
38793: PPUSH
38794: CALL_OW 1
38798: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38799: LD_ADDR_EXP 124
38803: PUSH
38804: LD_EXP 124
38808: PPUSH
38809: LD_EXP 124
38813: PUSH
38814: LD_INT 1
38816: PLUS
38817: PPUSH
38818: EMPTY
38819: PPUSH
38820: CALL_OW 1
38824: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38825: LD_VAR 0 1
38829: PPUSH
38830: CALL_OW 302
38834: NOT
38835: IFFALSE 38848
// begin HackUnlinkAll ( i ) ;
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL 38954 0 1
// continue ;
38846: GO 38728
// end ; HackCheckCapturedStatus ( i ) ;
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL 39397 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38857: LD_ADDR_VAR 0 2
38861: PUSH
38862: LD_INT 81
38864: PUSH
38865: LD_VAR 0 1
38869: PPUSH
38870: CALL_OW 255
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 33
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 91
38891: PUSH
38892: LD_VAR 0 1
38896: PUSH
38897: LD_EXP 123
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 50
38909: PUSH
38910: EMPTY
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: PPUSH
38919: CALL_OW 69
38923: ST_TO_ADDR
// if not tmp then
38924: LD_VAR 0 2
38928: NOT
38929: IFFALSE 38933
// continue ;
38931: GO 38728
// HackLink ( i , tmp ) ;
38933: LD_VAR 0 1
38937: PPUSH
38938: LD_VAR 0 2
38942: PPUSH
38943: CALL 39090 0 2
// end ;
38947: GO 38728
38949: POP
38950: POP
// end ;
38951: PPOPN 2
38953: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38954: LD_INT 0
38956: PPUSH
38957: PPUSH
38958: PPUSH
// if not hack in hackTanks then
38959: LD_VAR 0 1
38963: PUSH
38964: LD_EXP 120
38968: IN
38969: NOT
38970: IFFALSE 38974
// exit ;
38972: GO 39085
// index := GetElementIndex ( hackTanks , hack ) ;
38974: LD_ADDR_VAR 0 4
38978: PUSH
38979: LD_EXP 120
38983: PPUSH
38984: LD_VAR 0 1
38988: PPUSH
38989: CALL 46527 0 2
38993: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38994: LD_EXP 121
38998: PUSH
38999: LD_VAR 0 4
39003: ARRAY
39004: IFFALSE 39085
// begin for i in hackTanksCaptured [ index ] do
39006: LD_ADDR_VAR 0 3
39010: PUSH
39011: LD_EXP 121
39015: PUSH
39016: LD_VAR 0 4
39020: ARRAY
39021: PUSH
39022: FOR_IN
39023: IFFALSE 39049
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39025: LD_VAR 0 3
39029: PUSH
39030: LD_INT 1
39032: ARRAY
39033: PPUSH
39034: LD_VAR 0 3
39038: PUSH
39039: LD_INT 2
39041: ARRAY
39042: PPUSH
39043: CALL_OW 235
39047: GO 39022
39049: POP
39050: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39051: LD_ADDR_EXP 121
39055: PUSH
39056: LD_EXP 121
39060: PPUSH
39061: LD_VAR 0 4
39065: PPUSH
39066: EMPTY
39067: PPUSH
39068: CALL_OW 1
39072: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39073: LD_VAR 0 1
39077: PPUSH
39078: LD_INT 0
39080: PPUSH
39081: CALL_OW 505
// end ; end ;
39085: LD_VAR 0 2
39089: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39090: LD_INT 0
39092: PPUSH
39093: PPUSH
39094: PPUSH
// if not hack in hackTanks or not vehicles then
39095: LD_VAR 0 1
39099: PUSH
39100: LD_EXP 120
39104: IN
39105: NOT
39106: PUSH
39107: LD_VAR 0 2
39111: NOT
39112: OR
39113: IFFALSE 39117
// exit ;
39115: GO 39392
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39117: LD_ADDR_VAR 0 2
39121: PUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: LD_VAR 0 2
39131: PPUSH
39132: LD_INT 1
39134: PPUSH
39135: LD_INT 1
39137: PPUSH
39138: CALL 47177 0 4
39142: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39143: LD_ADDR_VAR 0 5
39147: PUSH
39148: LD_EXP 120
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL 46527 0 2
39162: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39163: LD_EXP 121
39167: PUSH
39168: LD_VAR 0 5
39172: ARRAY
39173: PUSH
39174: LD_EXP 122
39178: LESS
39179: IFFALSE 39368
// begin for i := 1 to vehicles do
39181: LD_ADDR_VAR 0 4
39185: PUSH
39186: DOUBLE
39187: LD_INT 1
39189: DEC
39190: ST_TO_ADDR
39191: LD_VAR 0 2
39195: PUSH
39196: FOR_TO
39197: IFFALSE 39366
// begin if hackTanksCaptured [ index ] = hackLimit then
39199: LD_EXP 121
39203: PUSH
39204: LD_VAR 0 5
39208: ARRAY
39209: PUSH
39210: LD_EXP 122
39214: EQUAL
39215: IFFALSE 39219
// break ;
39217: GO 39366
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39219: LD_ADDR_EXP 124
39223: PUSH
39224: LD_EXP 124
39228: PPUSH
39229: LD_VAR 0 5
39233: PPUSH
39234: LD_EXP 124
39238: PUSH
39239: LD_VAR 0 5
39243: ARRAY
39244: PUSH
39245: LD_INT 1
39247: PLUS
39248: PPUSH
39249: CALL_OW 1
39253: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39254: LD_ADDR_EXP 121
39258: PUSH
39259: LD_EXP 121
39263: PPUSH
39264: LD_VAR 0 5
39268: PUSH
39269: LD_EXP 121
39273: PUSH
39274: LD_VAR 0 5
39278: ARRAY
39279: PUSH
39280: LD_INT 1
39282: PLUS
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PPUSH
39288: LD_VAR 0 2
39292: PUSH
39293: LD_VAR 0 4
39297: ARRAY
39298: PUSH
39299: LD_VAR 0 2
39303: PUSH
39304: LD_VAR 0 4
39308: ARRAY
39309: PPUSH
39310: CALL_OW 255
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PPUSH
39319: CALL 46742 0 3
39323: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39324: LD_VAR 0 2
39328: PUSH
39329: LD_VAR 0 4
39333: ARRAY
39334: PPUSH
39335: LD_VAR 0 1
39339: PPUSH
39340: CALL_OW 255
39344: PPUSH
39345: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39349: LD_VAR 0 2
39353: PUSH
39354: LD_VAR 0 4
39358: ARRAY
39359: PPUSH
39360: CALL_OW 141
// end ;
39364: GO 39196
39366: POP
39367: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39368: LD_VAR 0 1
39372: PPUSH
39373: LD_EXP 121
39377: PUSH
39378: LD_VAR 0 5
39382: ARRAY
39383: PUSH
39384: LD_INT 0
39386: PLUS
39387: PPUSH
39388: CALL_OW 505
// end ;
39392: LD_VAR 0 3
39396: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39397: LD_INT 0
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
// if not hack in hackTanks then
39403: LD_VAR 0 1
39407: PUSH
39408: LD_EXP 120
39412: IN
39413: NOT
39414: IFFALSE 39418
// exit ;
39416: GO 39658
// index := GetElementIndex ( hackTanks , hack ) ;
39418: LD_ADDR_VAR 0 4
39422: PUSH
39423: LD_EXP 120
39427: PPUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL 46527 0 2
39437: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39438: LD_ADDR_VAR 0 3
39442: PUSH
39443: DOUBLE
39444: LD_EXP 121
39448: PUSH
39449: LD_VAR 0 4
39453: ARRAY
39454: INC
39455: ST_TO_ADDR
39456: LD_INT 1
39458: PUSH
39459: FOR_DOWNTO
39460: IFFALSE 39632
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39462: LD_ADDR_VAR 0 5
39466: PUSH
39467: LD_EXP 121
39471: PUSH
39472: LD_VAR 0 4
39476: ARRAY
39477: PUSH
39478: LD_VAR 0 3
39482: ARRAY
39483: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39484: LD_VAR 0 5
39488: PUSH
39489: LD_INT 1
39491: ARRAY
39492: PPUSH
39493: CALL_OW 302
39497: NOT
39498: PUSH
39499: LD_VAR 0 5
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: CALL_OW 255
39512: PUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: CALL_OW 255
39522: NONEQUAL
39523: OR
39524: IFFALSE 39630
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39526: LD_VAR 0 5
39530: PUSH
39531: LD_INT 1
39533: ARRAY
39534: PPUSH
39535: CALL_OW 305
39539: PUSH
39540: LD_VAR 0 5
39544: PUSH
39545: LD_INT 1
39547: ARRAY
39548: PPUSH
39549: CALL_OW 255
39553: PUSH
39554: LD_VAR 0 1
39558: PPUSH
39559: CALL_OW 255
39563: EQUAL
39564: AND
39565: IFFALSE 39589
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39567: LD_VAR 0 5
39571: PUSH
39572: LD_INT 1
39574: ARRAY
39575: PPUSH
39576: LD_VAR 0 5
39580: PUSH
39581: LD_INT 2
39583: ARRAY
39584: PPUSH
39585: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39589: LD_ADDR_EXP 121
39593: PUSH
39594: LD_EXP 121
39598: PPUSH
39599: LD_VAR 0 4
39603: PPUSH
39604: LD_EXP 121
39608: PUSH
39609: LD_VAR 0 4
39613: ARRAY
39614: PPUSH
39615: LD_VAR 0 3
39619: PPUSH
39620: CALL_OW 3
39624: PPUSH
39625: CALL_OW 1
39629: ST_TO_ADDR
// end ; end ;
39630: GO 39459
39632: POP
39633: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39634: LD_VAR 0 1
39638: PPUSH
39639: LD_EXP 121
39643: PUSH
39644: LD_VAR 0 4
39648: ARRAY
39649: PUSH
39650: LD_INT 0
39652: PLUS
39653: PPUSH
39654: CALL_OW 505
// end ;
39658: LD_VAR 0 2
39662: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39663: LD_INT 0
39665: PPUSH
39666: PPUSH
39667: PPUSH
39668: PPUSH
// if not hack in hackTanks then
39669: LD_VAR 0 1
39673: PUSH
39674: LD_EXP 120
39678: IN
39679: NOT
39680: IFFALSE 39684
// exit ;
39682: GO 39769
// index := GetElementIndex ( hackTanks , hack ) ;
39684: LD_ADDR_VAR 0 5
39688: PUSH
39689: LD_EXP 120
39693: PPUSH
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL 46527 0 2
39703: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39704: LD_ADDR_VAR 0 4
39708: PUSH
39709: DOUBLE
39710: LD_INT 1
39712: DEC
39713: ST_TO_ADDR
39714: LD_EXP 121
39718: PUSH
39719: LD_VAR 0 5
39723: ARRAY
39724: PUSH
39725: FOR_TO
39726: IFFALSE 39767
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39728: LD_EXP 121
39732: PUSH
39733: LD_VAR 0 5
39737: ARRAY
39738: PUSH
39739: LD_VAR 0 4
39743: ARRAY
39744: PUSH
39745: LD_INT 1
39747: ARRAY
39748: PUSH
39749: LD_VAR 0 2
39753: EQUAL
39754: IFFALSE 39765
// KillUnit ( vehicle ) ;
39756: LD_VAR 0 2
39760: PPUSH
39761: CALL_OW 66
39765: GO 39725
39767: POP
39768: POP
// end ;
39769: LD_VAR 0 3
39773: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39774: LD_EXP 125
39778: NOT
39779: IFFALSE 39814
39781: GO 39783
39783: DISABLE
// begin initMiner := true ;
39784: LD_ADDR_EXP 125
39788: PUSH
39789: LD_INT 1
39791: ST_TO_ADDR
// minersList := [ ] ;
39792: LD_ADDR_EXP 126
39796: PUSH
39797: EMPTY
39798: ST_TO_ADDR
// minerMinesList := [ ] ;
39799: LD_ADDR_EXP 127
39803: PUSH
39804: EMPTY
39805: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39806: LD_ADDR_EXP 128
39810: PUSH
39811: LD_INT 5
39813: ST_TO_ADDR
// end ;
39814: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39815: LD_EXP 125
39819: PUSH
39820: LD_INT 34
39822: PUSH
39823: LD_INT 81
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PPUSH
39830: CALL_OW 69
39834: AND
39835: IFFALSE 40296
39837: GO 39839
39839: DISABLE
39840: LD_INT 0
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
// begin enable ;
39846: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39847: LD_ADDR_VAR 0 1
39851: PUSH
39852: LD_INT 34
39854: PUSH
39855: LD_INT 81
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PPUSH
39862: CALL_OW 69
39866: PUSH
39867: FOR_IN
39868: IFFALSE 39940
// begin if not i in minersList then
39870: LD_VAR 0 1
39874: PUSH
39875: LD_EXP 126
39879: IN
39880: NOT
39881: IFFALSE 39938
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39883: LD_ADDR_EXP 126
39887: PUSH
39888: LD_EXP 126
39892: PPUSH
39893: LD_EXP 126
39897: PUSH
39898: LD_INT 1
39900: PLUS
39901: PPUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 1
39911: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39912: LD_ADDR_EXP 127
39916: PUSH
39917: LD_EXP 127
39921: PPUSH
39922: LD_EXP 127
39926: PUSH
39927: LD_INT 1
39929: PLUS
39930: PPUSH
39931: EMPTY
39932: PPUSH
39933: CALL_OW 1
39937: ST_TO_ADDR
// end end ;
39938: GO 39867
39940: POP
39941: POP
// for i := minerMinesList downto 1 do
39942: LD_ADDR_VAR 0 1
39946: PUSH
39947: DOUBLE
39948: LD_EXP 127
39952: INC
39953: ST_TO_ADDR
39954: LD_INT 1
39956: PUSH
39957: FOR_DOWNTO
39958: IFFALSE 40294
// begin if IsLive ( minersList [ i ] ) then
39960: LD_EXP 126
39964: PUSH
39965: LD_VAR 0 1
39969: ARRAY
39970: PPUSH
39971: CALL_OW 300
39975: IFFALSE 40003
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39977: LD_EXP 126
39981: PUSH
39982: LD_VAR 0 1
39986: ARRAY
39987: PPUSH
39988: LD_EXP 127
39992: PUSH
39993: LD_VAR 0 1
39997: ARRAY
39998: PPUSH
39999: CALL_OW 505
// if not minerMinesList [ i ] then
40003: LD_EXP 127
40007: PUSH
40008: LD_VAR 0 1
40012: ARRAY
40013: NOT
40014: IFFALSE 40018
// continue ;
40016: GO 39957
// for j := minerMinesList [ i ] downto 1 do
40018: LD_ADDR_VAR 0 2
40022: PUSH
40023: DOUBLE
40024: LD_EXP 127
40028: PUSH
40029: LD_VAR 0 1
40033: ARRAY
40034: INC
40035: ST_TO_ADDR
40036: LD_INT 1
40038: PUSH
40039: FOR_DOWNTO
40040: IFFALSE 40290
// begin side := GetSide ( minersList [ i ] ) ;
40042: LD_ADDR_VAR 0 3
40046: PUSH
40047: LD_EXP 126
40051: PUSH
40052: LD_VAR 0 1
40056: ARRAY
40057: PPUSH
40058: CALL_OW 255
40062: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40063: LD_ADDR_VAR 0 4
40067: PUSH
40068: LD_EXP 127
40072: PUSH
40073: LD_VAR 0 1
40077: ARRAY
40078: PUSH
40079: LD_VAR 0 2
40083: ARRAY
40084: PUSH
40085: LD_INT 1
40087: ARRAY
40088: PPUSH
40089: LD_EXP 127
40093: PUSH
40094: LD_VAR 0 1
40098: ARRAY
40099: PUSH
40100: LD_VAR 0 2
40104: ARRAY
40105: PUSH
40106: LD_INT 2
40108: ARRAY
40109: PPUSH
40110: CALL_OW 428
40114: ST_TO_ADDR
// if not tmp then
40115: LD_VAR 0 4
40119: NOT
40120: IFFALSE 40124
// continue ;
40122: GO 40039
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40124: LD_VAR 0 4
40128: PUSH
40129: LD_INT 81
40131: PUSH
40132: LD_VAR 0 3
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PPUSH
40141: CALL_OW 69
40145: IN
40146: PUSH
40147: LD_EXP 127
40151: PUSH
40152: LD_VAR 0 1
40156: ARRAY
40157: PUSH
40158: LD_VAR 0 2
40162: ARRAY
40163: PUSH
40164: LD_INT 1
40166: ARRAY
40167: PPUSH
40168: LD_EXP 127
40172: PUSH
40173: LD_VAR 0 1
40177: ARRAY
40178: PUSH
40179: LD_VAR 0 2
40183: ARRAY
40184: PUSH
40185: LD_INT 2
40187: ARRAY
40188: PPUSH
40189: CALL_OW 458
40193: AND
40194: IFFALSE 40288
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40196: LD_EXP 127
40200: PUSH
40201: LD_VAR 0 1
40205: ARRAY
40206: PUSH
40207: LD_VAR 0 2
40211: ARRAY
40212: PUSH
40213: LD_INT 1
40215: ARRAY
40216: PPUSH
40217: LD_EXP 127
40221: PUSH
40222: LD_VAR 0 1
40226: ARRAY
40227: PUSH
40228: LD_VAR 0 2
40232: ARRAY
40233: PUSH
40234: LD_INT 2
40236: ARRAY
40237: PPUSH
40238: LD_VAR 0 3
40242: PPUSH
40243: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40247: LD_ADDR_EXP 127
40251: PUSH
40252: LD_EXP 127
40256: PPUSH
40257: LD_VAR 0 1
40261: PPUSH
40262: LD_EXP 127
40266: PUSH
40267: LD_VAR 0 1
40271: ARRAY
40272: PPUSH
40273: LD_VAR 0 2
40277: PPUSH
40278: CALL_OW 3
40282: PPUSH
40283: CALL_OW 1
40287: ST_TO_ADDR
// end ; end ;
40288: GO 40039
40290: POP
40291: POP
// end ;
40292: GO 39957
40294: POP
40295: POP
// end ;
40296: PPOPN 4
40298: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40299: LD_INT 0
40301: PPUSH
40302: PPUSH
// result := false ;
40303: LD_ADDR_VAR 0 4
40307: PUSH
40308: LD_INT 0
40310: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 264
40320: PUSH
40321: LD_INT 81
40323: EQUAL
40324: NOT
40325: IFFALSE 40329
// exit ;
40327: GO 40569
// index := GetElementIndex ( minersList , unit ) ;
40329: LD_ADDR_VAR 0 5
40333: PUSH
40334: LD_EXP 126
40338: PPUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: CALL 46527 0 2
40348: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40349: LD_EXP 127
40353: PUSH
40354: LD_VAR 0 5
40358: ARRAY
40359: PUSH
40360: LD_EXP 128
40364: GREATEREQUAL
40365: IFFALSE 40369
// exit ;
40367: GO 40569
// ComMoveXY ( unit , x , y ) ;
40369: LD_VAR 0 1
40373: PPUSH
40374: LD_VAR 0 2
40378: PPUSH
40379: LD_VAR 0 3
40383: PPUSH
40384: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40388: LD_INT 35
40390: PPUSH
40391: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40395: LD_VAR 0 1
40399: PPUSH
40400: LD_VAR 0 2
40404: PPUSH
40405: LD_VAR 0 3
40409: PPUSH
40410: CALL 78268 0 3
40414: NOT
40415: PUSH
40416: LD_VAR 0 1
40420: PPUSH
40421: CALL_OW 314
40425: AND
40426: IFFALSE 40430
// exit ;
40428: GO 40569
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40430: LD_VAR 0 2
40434: PPUSH
40435: LD_VAR 0 3
40439: PPUSH
40440: CALL_OW 428
40444: PUSH
40445: LD_VAR 0 1
40449: EQUAL
40450: PUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: CALL_OW 314
40460: NOT
40461: AND
40462: IFFALSE 40388
// PlaySoundXY ( x , y , PlantMine ) ;
40464: LD_VAR 0 2
40468: PPUSH
40469: LD_VAR 0 3
40473: PPUSH
40474: LD_STRING PlantMine
40476: PPUSH
40477: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40481: LD_VAR 0 2
40485: PPUSH
40486: LD_VAR 0 3
40490: PPUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 255
40500: PPUSH
40501: LD_INT 0
40503: PPUSH
40504: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40508: LD_ADDR_EXP 127
40512: PUSH
40513: LD_EXP 127
40517: PPUSH
40518: LD_VAR 0 5
40522: PUSH
40523: LD_EXP 127
40527: PUSH
40528: LD_VAR 0 5
40532: ARRAY
40533: PUSH
40534: LD_INT 1
40536: PLUS
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PPUSH
40542: LD_VAR 0 2
40546: PUSH
40547: LD_VAR 0 3
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PPUSH
40556: CALL 46742 0 3
40560: ST_TO_ADDR
// result := true ;
40561: LD_ADDR_VAR 0 4
40565: PUSH
40566: LD_INT 1
40568: ST_TO_ADDR
// end ;
40569: LD_VAR 0 4
40573: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40574: LD_INT 0
40576: PPUSH
40577: PPUSH
40578: PPUSH
// if not unit in minersList then
40579: LD_VAR 0 1
40583: PUSH
40584: LD_EXP 126
40588: IN
40589: NOT
40590: IFFALSE 40594
// exit ;
40592: GO 40986
// index := GetElementIndex ( minersList , unit ) ;
40594: LD_ADDR_VAR 0 6
40598: PUSH
40599: LD_EXP 126
40603: PPUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL 46527 0 2
40613: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40614: LD_ADDR_VAR 0 5
40618: PUSH
40619: DOUBLE
40620: LD_EXP 127
40624: PUSH
40625: LD_VAR 0 6
40629: ARRAY
40630: INC
40631: ST_TO_ADDR
40632: LD_INT 1
40634: PUSH
40635: FOR_DOWNTO
40636: IFFALSE 40797
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40638: LD_EXP 127
40642: PUSH
40643: LD_VAR 0 6
40647: ARRAY
40648: PUSH
40649: LD_VAR 0 5
40653: ARRAY
40654: PUSH
40655: LD_INT 1
40657: ARRAY
40658: PUSH
40659: LD_VAR 0 2
40663: EQUAL
40664: PUSH
40665: LD_EXP 127
40669: PUSH
40670: LD_VAR 0 6
40674: ARRAY
40675: PUSH
40676: LD_VAR 0 5
40680: ARRAY
40681: PUSH
40682: LD_INT 2
40684: ARRAY
40685: PUSH
40686: LD_VAR 0 3
40690: EQUAL
40691: AND
40692: IFFALSE 40795
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40694: LD_EXP 127
40698: PUSH
40699: LD_VAR 0 6
40703: ARRAY
40704: PUSH
40705: LD_VAR 0 5
40709: ARRAY
40710: PUSH
40711: LD_INT 1
40713: ARRAY
40714: PPUSH
40715: LD_EXP 127
40719: PUSH
40720: LD_VAR 0 6
40724: ARRAY
40725: PUSH
40726: LD_VAR 0 5
40730: ARRAY
40731: PUSH
40732: LD_INT 2
40734: ARRAY
40735: PPUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: CALL_OW 255
40745: PPUSH
40746: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40750: LD_ADDR_EXP 127
40754: PUSH
40755: LD_EXP 127
40759: PPUSH
40760: LD_VAR 0 6
40764: PPUSH
40765: LD_EXP 127
40769: PUSH
40770: LD_VAR 0 6
40774: ARRAY
40775: PPUSH
40776: LD_VAR 0 5
40780: PPUSH
40781: CALL_OW 3
40785: PPUSH
40786: CALL_OW 1
40790: ST_TO_ADDR
// exit ;
40791: POP
40792: POP
40793: GO 40986
// end ; end ;
40795: GO 40635
40797: POP
40798: POP
// for i := minerMinesList [ index ] downto 1 do
40799: LD_ADDR_VAR 0 5
40803: PUSH
40804: DOUBLE
40805: LD_EXP 127
40809: PUSH
40810: LD_VAR 0 6
40814: ARRAY
40815: INC
40816: ST_TO_ADDR
40817: LD_INT 1
40819: PUSH
40820: FOR_DOWNTO
40821: IFFALSE 40984
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40823: LD_EXP 127
40827: PUSH
40828: LD_VAR 0 6
40832: ARRAY
40833: PUSH
40834: LD_VAR 0 5
40838: ARRAY
40839: PUSH
40840: LD_INT 1
40842: ARRAY
40843: PPUSH
40844: LD_EXP 127
40848: PUSH
40849: LD_VAR 0 6
40853: ARRAY
40854: PUSH
40855: LD_VAR 0 5
40859: ARRAY
40860: PUSH
40861: LD_INT 2
40863: ARRAY
40864: PPUSH
40865: LD_VAR 0 2
40869: PPUSH
40870: LD_VAR 0 3
40874: PPUSH
40875: CALL_OW 298
40879: PUSH
40880: LD_INT 6
40882: LESS
40883: IFFALSE 40982
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40885: LD_EXP 127
40889: PUSH
40890: LD_VAR 0 6
40894: ARRAY
40895: PUSH
40896: LD_VAR 0 5
40900: ARRAY
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PPUSH
40906: LD_EXP 127
40910: PUSH
40911: LD_VAR 0 6
40915: ARRAY
40916: PUSH
40917: LD_VAR 0 5
40921: ARRAY
40922: PUSH
40923: LD_INT 2
40925: ARRAY
40926: PPUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 255
40936: PPUSH
40937: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40941: LD_ADDR_EXP 127
40945: PUSH
40946: LD_EXP 127
40950: PPUSH
40951: LD_VAR 0 6
40955: PPUSH
40956: LD_EXP 127
40960: PUSH
40961: LD_VAR 0 6
40965: ARRAY
40966: PPUSH
40967: LD_VAR 0 5
40971: PPUSH
40972: CALL_OW 3
40976: PPUSH
40977: CALL_OW 1
40981: ST_TO_ADDR
// end ; end ;
40982: GO 40820
40984: POP
40985: POP
// end ;
40986: LD_VAR 0 4
40990: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40991: LD_INT 0
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 264
41011: PUSH
41012: LD_INT 81
41014: EQUAL
41015: NOT
41016: PUSH
41017: LD_VAR 0 1
41021: PUSH
41022: LD_EXP 126
41026: IN
41027: NOT
41028: OR
41029: IFFALSE 41033
// exit ;
41031: GO 41355
// index := GetElementIndex ( minersList , unit ) ;
41033: LD_ADDR_VAR 0 6
41037: PUSH
41038: LD_EXP 126
41042: PPUSH
41043: LD_VAR 0 1
41047: PPUSH
41048: CALL 46527 0 2
41052: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41053: LD_ADDR_VAR 0 8
41057: PUSH
41058: LD_EXP 128
41062: PUSH
41063: LD_EXP 127
41067: PUSH
41068: LD_VAR 0 6
41072: ARRAY
41073: MINUS
41074: ST_TO_ADDR
// if not minesFreeAmount then
41075: LD_VAR 0 8
41079: NOT
41080: IFFALSE 41084
// exit ;
41082: GO 41355
// tmp := [ ] ;
41084: LD_ADDR_VAR 0 7
41088: PUSH
41089: EMPTY
41090: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41091: LD_ADDR_VAR 0 5
41095: PUSH
41096: DOUBLE
41097: LD_INT 1
41099: DEC
41100: ST_TO_ADDR
41101: LD_VAR 0 8
41105: PUSH
41106: FOR_TO
41107: IFFALSE 41302
// begin _d := rand ( 0 , 5 ) ;
41109: LD_ADDR_VAR 0 11
41113: PUSH
41114: LD_INT 0
41116: PPUSH
41117: LD_INT 5
41119: PPUSH
41120: CALL_OW 12
41124: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41125: LD_ADDR_VAR 0 12
41129: PUSH
41130: LD_INT 2
41132: PPUSH
41133: LD_INT 6
41135: PPUSH
41136: CALL_OW 12
41140: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41141: LD_ADDR_VAR 0 9
41145: PUSH
41146: LD_VAR 0 2
41150: PPUSH
41151: LD_VAR 0 11
41155: PPUSH
41156: LD_VAR 0 12
41160: PPUSH
41161: CALL_OW 272
41165: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41166: LD_ADDR_VAR 0 10
41170: PUSH
41171: LD_VAR 0 3
41175: PPUSH
41176: LD_VAR 0 11
41180: PPUSH
41181: LD_VAR 0 12
41185: PPUSH
41186: CALL_OW 273
41190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41191: LD_VAR 0 9
41195: PPUSH
41196: LD_VAR 0 10
41200: PPUSH
41201: CALL_OW 488
41205: PUSH
41206: LD_VAR 0 9
41210: PUSH
41211: LD_VAR 0 10
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_VAR 0 7
41224: IN
41225: NOT
41226: AND
41227: PUSH
41228: LD_VAR 0 9
41232: PPUSH
41233: LD_VAR 0 10
41237: PPUSH
41238: CALL_OW 458
41242: NOT
41243: AND
41244: IFFALSE 41286
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41246: LD_ADDR_VAR 0 7
41250: PUSH
41251: LD_VAR 0 7
41255: PPUSH
41256: LD_VAR 0 7
41260: PUSH
41261: LD_INT 1
41263: PLUS
41264: PPUSH
41265: LD_VAR 0 9
41269: PUSH
41270: LD_VAR 0 10
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PPUSH
41279: CALL_OW 1
41283: ST_TO_ADDR
41284: GO 41300
// i := i - 1 ;
41286: LD_ADDR_VAR 0 5
41290: PUSH
41291: LD_VAR 0 5
41295: PUSH
41296: LD_INT 1
41298: MINUS
41299: ST_TO_ADDR
// end ;
41300: GO 41106
41302: POP
41303: POP
// for i in tmp do
41304: LD_ADDR_VAR 0 5
41308: PUSH
41309: LD_VAR 0 7
41313: PUSH
41314: FOR_IN
41315: IFFALSE 41353
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41317: LD_VAR 0 1
41321: PPUSH
41322: LD_VAR 0 5
41326: PUSH
41327: LD_INT 1
41329: ARRAY
41330: PPUSH
41331: LD_VAR 0 5
41335: PUSH
41336: LD_INT 2
41338: ARRAY
41339: PPUSH
41340: CALL 40299 0 3
41344: NOT
41345: IFFALSE 41351
// exit ;
41347: POP
41348: POP
41349: GO 41355
41351: GO 41314
41353: POP
41354: POP
// end ;
41355: LD_VAR 0 4
41359: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41360: LD_INT 0
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
// if not GetClass ( unit ) = class_sniper then
41369: LD_VAR 0 1
41373: PPUSH
41374: CALL_OW 257
41378: PUSH
41379: LD_INT 5
41381: EQUAL
41382: NOT
41383: IFFALSE 41387
// exit ;
41385: GO 41775
// dist := 8 ;
41387: LD_ADDR_VAR 0 5
41391: PUSH
41392: LD_INT 8
41394: ST_TO_ADDR
// viewRange := 12 ;
41395: LD_ADDR_VAR 0 7
41399: PUSH
41400: LD_INT 12
41402: ST_TO_ADDR
// side := GetSide ( unit ) ;
41403: LD_ADDR_VAR 0 6
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: CALL_OW 255
41417: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41418: LD_INT 61
41420: PPUSH
41421: LD_VAR 0 6
41425: PPUSH
41426: CALL_OW 321
41430: PUSH
41431: LD_INT 2
41433: EQUAL
41434: IFFALSE 41444
// viewRange := 16 ;
41436: LD_ADDR_VAR 0 7
41440: PUSH
41441: LD_INT 16
41443: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41444: LD_VAR 0 1
41448: PPUSH
41449: LD_VAR 0 2
41453: PPUSH
41454: LD_VAR 0 3
41458: PPUSH
41459: CALL_OW 297
41463: PUSH
41464: LD_VAR 0 5
41468: GREATER
41469: IFFALSE 41548
// begin ComMoveXY ( unit , x , y ) ;
41471: LD_VAR 0 1
41475: PPUSH
41476: LD_VAR 0 2
41480: PPUSH
41481: LD_VAR 0 3
41485: PPUSH
41486: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41490: LD_INT 35
41492: PPUSH
41493: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41497: LD_VAR 0 1
41501: PPUSH
41502: LD_VAR 0 2
41506: PPUSH
41507: LD_VAR 0 3
41511: PPUSH
41512: CALL 78268 0 3
41516: NOT
41517: IFFALSE 41521
// exit ;
41519: GO 41775
// until GetDistUnitXY ( unit , x , y ) < dist ;
41521: LD_VAR 0 1
41525: PPUSH
41526: LD_VAR 0 2
41530: PPUSH
41531: LD_VAR 0 3
41535: PPUSH
41536: CALL_OW 297
41540: PUSH
41541: LD_VAR 0 5
41545: LESS
41546: IFFALSE 41490
// end ; ComTurnXY ( unit , x , y ) ;
41548: LD_VAR 0 1
41552: PPUSH
41553: LD_VAR 0 2
41557: PPUSH
41558: LD_VAR 0 3
41562: PPUSH
41563: CALL_OW 118
// wait ( 5 ) ;
41567: LD_INT 5
41569: PPUSH
41570: CALL_OW 67
// _d := GetDir ( unit ) ;
41574: LD_ADDR_VAR 0 10
41578: PUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: CALL_OW 254
41588: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41589: LD_ADDR_VAR 0 8
41593: PUSH
41594: LD_VAR 0 1
41598: PPUSH
41599: CALL_OW 250
41603: PPUSH
41604: LD_VAR 0 10
41608: PPUSH
41609: LD_VAR 0 5
41613: PPUSH
41614: CALL_OW 272
41618: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41619: LD_ADDR_VAR 0 9
41623: PUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 251
41633: PPUSH
41634: LD_VAR 0 10
41638: PPUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: CALL_OW 273
41648: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41649: LD_VAR 0 8
41653: PPUSH
41654: LD_VAR 0 9
41658: PPUSH
41659: CALL_OW 488
41663: NOT
41664: IFFALSE 41668
// exit ;
41666: GO 41775
// ComAnimCustom ( unit , 1 ) ;
41668: LD_VAR 0 1
41672: PPUSH
41673: LD_INT 1
41675: PPUSH
41676: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41680: LD_VAR 0 8
41684: PPUSH
41685: LD_VAR 0 9
41689: PPUSH
41690: LD_VAR 0 6
41694: PPUSH
41695: LD_VAR 0 7
41699: PPUSH
41700: CALL_OW 330
// repeat wait ( 1 ) ;
41704: LD_INT 1
41706: PPUSH
41707: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 316
41720: PUSH
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 314
41730: OR
41731: PUSH
41732: LD_VAR 0 1
41736: PPUSH
41737: CALL_OW 302
41741: NOT
41742: OR
41743: PUSH
41744: LD_VAR 0 1
41748: PPUSH
41749: CALL_OW 301
41753: OR
41754: IFFALSE 41704
// RemoveSeeing ( _x , _y , side ) ;
41756: LD_VAR 0 8
41760: PPUSH
41761: LD_VAR 0 9
41765: PPUSH
41766: LD_VAR 0 6
41770: PPUSH
41771: CALL_OW 331
// end ; end_of_file
41775: LD_VAR 0 4
41779: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41780: LD_INT 0
41782: PPUSH
41783: PPUSH
// if exist_mode then
41784: LD_VAR 0 2
41788: IFFALSE 41813
// unit := CreateCharacter ( prefix & ident ) else
41790: LD_ADDR_VAR 0 5
41794: PUSH
41795: LD_VAR 0 3
41799: PUSH
41800: LD_VAR 0 1
41804: STR
41805: PPUSH
41806: CALL_OW 34
41810: ST_TO_ADDR
41811: GO 41828
// unit := NewCharacter ( ident ) ;
41813: LD_ADDR_VAR 0 5
41817: PUSH
41818: LD_VAR 0 1
41822: PPUSH
41823: CALL_OW 25
41827: ST_TO_ADDR
// result := unit ;
41828: LD_ADDR_VAR 0 4
41832: PUSH
41833: LD_VAR 0 5
41837: ST_TO_ADDR
// end ;
41838: LD_VAR 0 4
41842: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
// if not side or not nation then
41847: LD_VAR 0 1
41851: NOT
41852: PUSH
41853: LD_VAR 0 2
41857: NOT
41858: OR
41859: IFFALSE 41863
// exit ;
41861: GO 42631
// case nation of nation_american :
41863: LD_VAR 0 2
41867: PUSH
41868: LD_INT 1
41870: DOUBLE
41871: EQUAL
41872: IFTRUE 41876
41874: GO 42090
41876: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41877: LD_ADDR_VAR 0 4
41881: PUSH
41882: LD_INT 35
41884: PUSH
41885: LD_INT 45
41887: PUSH
41888: LD_INT 46
41890: PUSH
41891: LD_INT 47
41893: PUSH
41894: LD_INT 82
41896: PUSH
41897: LD_INT 83
41899: PUSH
41900: LD_INT 84
41902: PUSH
41903: LD_INT 85
41905: PUSH
41906: LD_INT 86
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: LD_INT 6
41917: PUSH
41918: LD_INT 15
41920: PUSH
41921: LD_INT 16
41923: PUSH
41924: LD_INT 7
41926: PUSH
41927: LD_INT 12
41929: PUSH
41930: LD_INT 13
41932: PUSH
41933: LD_INT 10
41935: PUSH
41936: LD_INT 14
41938: PUSH
41939: LD_INT 20
41941: PUSH
41942: LD_INT 21
41944: PUSH
41945: LD_INT 22
41947: PUSH
41948: LD_INT 25
41950: PUSH
41951: LD_INT 32
41953: PUSH
41954: LD_INT 27
41956: PUSH
41957: LD_INT 36
41959: PUSH
41960: LD_INT 69
41962: PUSH
41963: LD_INT 39
41965: PUSH
41966: LD_INT 34
41968: PUSH
41969: LD_INT 40
41971: PUSH
41972: LD_INT 48
41974: PUSH
41975: LD_INT 49
41977: PUSH
41978: LD_INT 50
41980: PUSH
41981: LD_INT 51
41983: PUSH
41984: LD_INT 52
41986: PUSH
41987: LD_INT 53
41989: PUSH
41990: LD_INT 54
41992: PUSH
41993: LD_INT 55
41995: PUSH
41996: LD_INT 56
41998: PUSH
41999: LD_INT 57
42001: PUSH
42002: LD_INT 58
42004: PUSH
42005: LD_INT 59
42007: PUSH
42008: LD_INT 60
42010: PUSH
42011: LD_INT 61
42013: PUSH
42014: LD_INT 62
42016: PUSH
42017: LD_INT 80
42019: PUSH
42020: LD_INT 82
42022: PUSH
42023: LD_INT 83
42025: PUSH
42026: LD_INT 84
42028: PUSH
42029: LD_INT 85
42031: PUSH
42032: LD_INT 86
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: ST_TO_ADDR
42088: GO 42555
42090: LD_INT 2
42092: DOUBLE
42093: EQUAL
42094: IFTRUE 42098
42096: GO 42324
42098: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42099: LD_ADDR_VAR 0 4
42103: PUSH
42104: LD_INT 35
42106: PUSH
42107: LD_INT 45
42109: PUSH
42110: LD_INT 46
42112: PUSH
42113: LD_INT 47
42115: PUSH
42116: LD_INT 82
42118: PUSH
42119: LD_INT 83
42121: PUSH
42122: LD_INT 84
42124: PUSH
42125: LD_INT 85
42127: PUSH
42128: LD_INT 87
42130: PUSH
42131: LD_INT 70
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 11
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 4
42145: PUSH
42146: LD_INT 5
42148: PUSH
42149: LD_INT 6
42151: PUSH
42152: LD_INT 15
42154: PUSH
42155: LD_INT 18
42157: PUSH
42158: LD_INT 7
42160: PUSH
42161: LD_INT 17
42163: PUSH
42164: LD_INT 8
42166: PUSH
42167: LD_INT 20
42169: PUSH
42170: LD_INT 21
42172: PUSH
42173: LD_INT 22
42175: PUSH
42176: LD_INT 72
42178: PUSH
42179: LD_INT 26
42181: PUSH
42182: LD_INT 69
42184: PUSH
42185: LD_INT 39
42187: PUSH
42188: LD_INT 40
42190: PUSH
42191: LD_INT 41
42193: PUSH
42194: LD_INT 42
42196: PUSH
42197: LD_INT 43
42199: PUSH
42200: LD_INT 48
42202: PUSH
42203: LD_INT 49
42205: PUSH
42206: LD_INT 50
42208: PUSH
42209: LD_INT 51
42211: PUSH
42212: LD_INT 52
42214: PUSH
42215: LD_INT 53
42217: PUSH
42218: LD_INT 54
42220: PUSH
42221: LD_INT 55
42223: PUSH
42224: LD_INT 56
42226: PUSH
42227: LD_INT 60
42229: PUSH
42230: LD_INT 61
42232: PUSH
42233: LD_INT 62
42235: PUSH
42236: LD_INT 66
42238: PUSH
42239: LD_INT 67
42241: PUSH
42242: LD_INT 68
42244: PUSH
42245: LD_INT 81
42247: PUSH
42248: LD_INT 82
42250: PUSH
42251: LD_INT 83
42253: PUSH
42254: LD_INT 84
42256: PUSH
42257: LD_INT 85
42259: PUSH
42260: LD_INT 87
42262: PUSH
42263: LD_INT 88
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
42322: GO 42555
42324: LD_INT 3
42326: DOUBLE
42327: EQUAL
42328: IFTRUE 42332
42330: GO 42554
42332: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42333: LD_ADDR_VAR 0 4
42337: PUSH
42338: LD_INT 46
42340: PUSH
42341: LD_INT 47
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 82
42352: PUSH
42353: LD_INT 83
42355: PUSH
42356: LD_INT 84
42358: PUSH
42359: LD_INT 85
42361: PUSH
42362: LD_INT 86
42364: PUSH
42365: LD_INT 11
42367: PUSH
42368: LD_INT 9
42370: PUSH
42371: LD_INT 20
42373: PUSH
42374: LD_INT 19
42376: PUSH
42377: LD_INT 21
42379: PUSH
42380: LD_INT 24
42382: PUSH
42383: LD_INT 22
42385: PUSH
42386: LD_INT 25
42388: PUSH
42389: LD_INT 28
42391: PUSH
42392: LD_INT 29
42394: PUSH
42395: LD_INT 30
42397: PUSH
42398: LD_INT 31
42400: PUSH
42401: LD_INT 37
42403: PUSH
42404: LD_INT 38
42406: PUSH
42407: LD_INT 32
42409: PUSH
42410: LD_INT 27
42412: PUSH
42413: LD_INT 33
42415: PUSH
42416: LD_INT 69
42418: PUSH
42419: LD_INT 39
42421: PUSH
42422: LD_INT 34
42424: PUSH
42425: LD_INT 40
42427: PUSH
42428: LD_INT 71
42430: PUSH
42431: LD_INT 23
42433: PUSH
42434: LD_INT 44
42436: PUSH
42437: LD_INT 48
42439: PUSH
42440: LD_INT 49
42442: PUSH
42443: LD_INT 50
42445: PUSH
42446: LD_INT 51
42448: PUSH
42449: LD_INT 52
42451: PUSH
42452: LD_INT 53
42454: PUSH
42455: LD_INT 54
42457: PUSH
42458: LD_INT 55
42460: PUSH
42461: LD_INT 56
42463: PUSH
42464: LD_INT 57
42466: PUSH
42467: LD_INT 58
42469: PUSH
42470: LD_INT 59
42472: PUSH
42473: LD_INT 63
42475: PUSH
42476: LD_INT 64
42478: PUSH
42479: LD_INT 65
42481: PUSH
42482: LD_INT 82
42484: PUSH
42485: LD_INT 83
42487: PUSH
42488: LD_INT 84
42490: PUSH
42491: LD_INT 85
42493: PUSH
42494: LD_INT 86
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
42552: GO 42555
42554: POP
// if state > - 1 and state < 3 then
42555: LD_VAR 0 3
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: GREATER
42564: PUSH
42565: LD_VAR 0 3
42569: PUSH
42570: LD_INT 3
42572: LESS
42573: AND
42574: IFFALSE 42631
// for i in result do
42576: LD_ADDR_VAR 0 5
42580: PUSH
42581: LD_VAR 0 4
42585: PUSH
42586: FOR_IN
42587: IFFALSE 42629
// if GetTech ( i , side ) <> state then
42589: LD_VAR 0 5
42593: PPUSH
42594: LD_VAR 0 1
42598: PPUSH
42599: CALL_OW 321
42603: PUSH
42604: LD_VAR 0 3
42608: NONEQUAL
42609: IFFALSE 42627
// result := result diff i ;
42611: LD_ADDR_VAR 0 4
42615: PUSH
42616: LD_VAR 0 4
42620: PUSH
42621: LD_VAR 0 5
42625: DIFF
42626: ST_TO_ADDR
42627: GO 42586
42629: POP
42630: POP
// end ;
42631: LD_VAR 0 4
42635: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42636: LD_INT 0
42638: PPUSH
42639: PPUSH
42640: PPUSH
// result := true ;
42641: LD_ADDR_VAR 0 3
42645: PUSH
42646: LD_INT 1
42648: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42649: LD_ADDR_VAR 0 5
42653: PUSH
42654: LD_VAR 0 2
42658: PPUSH
42659: CALL_OW 480
42663: ST_TO_ADDR
// if not tmp then
42664: LD_VAR 0 5
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 42722
// for i in tmp do
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: LD_VAR 0 5
42682: PUSH
42683: FOR_IN
42684: IFFALSE 42720
// if GetTech ( i , side ) <> state_researched then
42686: LD_VAR 0 4
42690: PPUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 321
42700: PUSH
42701: LD_INT 2
42703: NONEQUAL
42704: IFFALSE 42718
// begin result := false ;
42706: LD_ADDR_VAR 0 3
42710: PUSH
42711: LD_INT 0
42713: ST_TO_ADDR
// exit ;
42714: POP
42715: POP
42716: GO 42722
// end ;
42718: GO 42683
42720: POP
42721: POP
// end ;
42722: LD_VAR 0 3
42726: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42727: LD_INT 0
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42742: LD_VAR 0 1
42746: NOT
42747: PUSH
42748: LD_VAR 0 1
42752: PPUSH
42753: CALL_OW 257
42757: PUSH
42758: LD_INT 9
42760: NONEQUAL
42761: OR
42762: IFFALSE 42766
// exit ;
42764: GO 43339
// side := GetSide ( unit ) ;
42766: LD_ADDR_VAR 0 9
42770: PUSH
42771: LD_VAR 0 1
42775: PPUSH
42776: CALL_OW 255
42780: ST_TO_ADDR
// tech_space := tech_spacanom ;
42781: LD_ADDR_VAR 0 12
42785: PUSH
42786: LD_INT 29
42788: ST_TO_ADDR
// tech_time := tech_taurad ;
42789: LD_ADDR_VAR 0 13
42793: PUSH
42794: LD_INT 28
42796: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42797: LD_ADDR_VAR 0 11
42801: PUSH
42802: LD_VAR 0 1
42806: PPUSH
42807: CALL_OW 310
42811: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42812: LD_VAR 0 11
42816: PPUSH
42817: CALL_OW 247
42821: PUSH
42822: LD_INT 2
42824: EQUAL
42825: IFFALSE 42829
// exit ;
42827: GO 43339
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42829: LD_ADDR_VAR 0 8
42833: PUSH
42834: LD_INT 81
42836: PUSH
42837: LD_VAR 0 9
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 21
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PPUSH
42867: CALL_OW 69
42871: ST_TO_ADDR
// if not tmp then
42872: LD_VAR 0 8
42876: NOT
42877: IFFALSE 42881
// exit ;
42879: GO 43339
// if in_unit then
42881: LD_VAR 0 11
42885: IFFALSE 42909
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42887: LD_ADDR_VAR 0 10
42891: PUSH
42892: LD_VAR 0 8
42896: PPUSH
42897: LD_VAR 0 11
42901: PPUSH
42902: CALL_OW 74
42906: ST_TO_ADDR
42907: GO 42929
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42909: LD_ADDR_VAR 0 10
42913: PUSH
42914: LD_VAR 0 8
42918: PPUSH
42919: LD_VAR 0 1
42923: PPUSH
42924: CALL_OW 74
42928: ST_TO_ADDR
// if not enemy then
42929: LD_VAR 0 10
42933: NOT
42934: IFFALSE 42938
// exit ;
42936: GO 43339
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42938: LD_VAR 0 11
42942: PUSH
42943: LD_VAR 0 11
42947: PPUSH
42948: LD_VAR 0 10
42952: PPUSH
42953: CALL_OW 296
42957: PUSH
42958: LD_INT 13
42960: GREATER
42961: AND
42962: PUSH
42963: LD_VAR 0 1
42967: PPUSH
42968: LD_VAR 0 10
42972: PPUSH
42973: CALL_OW 296
42977: PUSH
42978: LD_INT 12
42980: GREATER
42981: OR
42982: IFFALSE 42986
// exit ;
42984: GO 43339
// missile := [ 1 ] ;
42986: LD_ADDR_VAR 0 14
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42997: LD_VAR 0 9
43001: PPUSH
43002: LD_VAR 0 12
43006: PPUSH
43007: CALL_OW 325
43011: IFFALSE 43040
// missile := Replace ( missile , missile + 1 , 2 ) ;
43013: LD_ADDR_VAR 0 14
43017: PUSH
43018: LD_VAR 0 14
43022: PPUSH
43023: LD_VAR 0 14
43027: PUSH
43028: LD_INT 1
43030: PLUS
43031: PPUSH
43032: LD_INT 2
43034: PPUSH
43035: CALL_OW 1
43039: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43040: LD_VAR 0 9
43044: PPUSH
43045: LD_VAR 0 13
43049: PPUSH
43050: CALL_OW 325
43054: PUSH
43055: LD_VAR 0 10
43059: PPUSH
43060: CALL_OW 255
43064: PPUSH
43065: LD_VAR 0 13
43069: PPUSH
43070: CALL_OW 325
43074: NOT
43075: AND
43076: IFFALSE 43105
// missile := Replace ( missile , missile + 1 , 3 ) ;
43078: LD_ADDR_VAR 0 14
43082: PUSH
43083: LD_VAR 0 14
43087: PPUSH
43088: LD_VAR 0 14
43092: PUSH
43093: LD_INT 1
43095: PLUS
43096: PPUSH
43097: LD_INT 3
43099: PPUSH
43100: CALL_OW 1
43104: ST_TO_ADDR
// if missile < 2 then
43105: LD_VAR 0 14
43109: PUSH
43110: LD_INT 2
43112: LESS
43113: IFFALSE 43117
// exit ;
43115: GO 43339
// x := GetX ( enemy ) ;
43117: LD_ADDR_VAR 0 4
43121: PUSH
43122: LD_VAR 0 10
43126: PPUSH
43127: CALL_OW 250
43131: ST_TO_ADDR
// y := GetY ( enemy ) ;
43132: LD_ADDR_VAR 0 5
43136: PUSH
43137: LD_VAR 0 10
43141: PPUSH
43142: CALL_OW 251
43146: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43147: LD_ADDR_VAR 0 6
43151: PUSH
43152: LD_VAR 0 4
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PPUSH
43161: LD_INT 1
43163: PPUSH
43164: CALL_OW 12
43168: PLUS
43169: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43170: LD_ADDR_VAR 0 7
43174: PUSH
43175: LD_VAR 0 5
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PPUSH
43184: LD_INT 1
43186: PPUSH
43187: CALL_OW 12
43191: PLUS
43192: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43193: LD_VAR 0 6
43197: PPUSH
43198: LD_VAR 0 7
43202: PPUSH
43203: CALL_OW 488
43207: NOT
43208: IFFALSE 43230
// begin _x := x ;
43210: LD_ADDR_VAR 0 6
43214: PUSH
43215: LD_VAR 0 4
43219: ST_TO_ADDR
// _y := y ;
43220: LD_ADDR_VAR 0 7
43224: PUSH
43225: LD_VAR 0 5
43229: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43230: LD_ADDR_VAR 0 3
43234: PUSH
43235: LD_INT 1
43237: PPUSH
43238: LD_VAR 0 14
43242: PPUSH
43243: CALL_OW 12
43247: ST_TO_ADDR
// case i of 1 :
43248: LD_VAR 0 3
43252: PUSH
43253: LD_INT 1
43255: DOUBLE
43256: EQUAL
43257: IFTRUE 43261
43259: GO 43278
43261: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43262: LD_VAR 0 1
43266: PPUSH
43267: LD_VAR 0 10
43271: PPUSH
43272: CALL_OW 115
43276: GO 43339
43278: LD_INT 2
43280: DOUBLE
43281: EQUAL
43282: IFTRUE 43286
43284: GO 43308
43286: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43287: LD_VAR 0 1
43291: PPUSH
43292: LD_VAR 0 6
43296: PPUSH
43297: LD_VAR 0 7
43301: PPUSH
43302: CALL_OW 153
43306: GO 43339
43308: LD_INT 3
43310: DOUBLE
43311: EQUAL
43312: IFTRUE 43316
43314: GO 43338
43316: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43317: LD_VAR 0 1
43321: PPUSH
43322: LD_VAR 0 6
43326: PPUSH
43327: LD_VAR 0 7
43331: PPUSH
43332: CALL_OW 154
43336: GO 43339
43338: POP
// end ;
43339: LD_VAR 0 2
43343: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43344: LD_INT 0
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
// if not unit or not building then
43352: LD_VAR 0 1
43356: NOT
43357: PUSH
43358: LD_VAR 0 2
43362: NOT
43363: OR
43364: IFFALSE 43368
// exit ;
43366: GO 43526
// x := GetX ( building ) ;
43368: LD_ADDR_VAR 0 5
43372: PUSH
43373: LD_VAR 0 2
43377: PPUSH
43378: CALL_OW 250
43382: ST_TO_ADDR
// y := GetY ( building ) ;
43383: LD_ADDR_VAR 0 6
43387: PUSH
43388: LD_VAR 0 2
43392: PPUSH
43393: CALL_OW 251
43397: ST_TO_ADDR
// for i = 0 to 5 do
43398: LD_ADDR_VAR 0 4
43402: PUSH
43403: DOUBLE
43404: LD_INT 0
43406: DEC
43407: ST_TO_ADDR
43408: LD_INT 5
43410: PUSH
43411: FOR_TO
43412: IFFALSE 43524
// begin _x := ShiftX ( x , i , 3 ) ;
43414: LD_ADDR_VAR 0 7
43418: PUSH
43419: LD_VAR 0 5
43423: PPUSH
43424: LD_VAR 0 4
43428: PPUSH
43429: LD_INT 3
43431: PPUSH
43432: CALL_OW 272
43436: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43437: LD_ADDR_VAR 0 8
43441: PUSH
43442: LD_VAR 0 6
43446: PPUSH
43447: LD_VAR 0 4
43451: PPUSH
43452: LD_INT 3
43454: PPUSH
43455: CALL_OW 273
43459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43460: LD_VAR 0 7
43464: PPUSH
43465: LD_VAR 0 8
43469: PPUSH
43470: CALL_OW 488
43474: NOT
43475: IFFALSE 43479
// continue ;
43477: GO 43411
// if HexInfo ( _x , _y ) = 0 then
43479: LD_VAR 0 7
43483: PPUSH
43484: LD_VAR 0 8
43488: PPUSH
43489: CALL_OW 428
43493: PUSH
43494: LD_INT 0
43496: EQUAL
43497: IFFALSE 43522
// begin ComMoveXY ( unit , _x , _y ) ;
43499: LD_VAR 0 1
43503: PPUSH
43504: LD_VAR 0 7
43508: PPUSH
43509: LD_VAR 0 8
43513: PPUSH
43514: CALL_OW 111
// exit ;
43518: POP
43519: POP
43520: GO 43526
// end ; end ;
43522: GO 43411
43524: POP
43525: POP
// end ;
43526: LD_VAR 0 3
43530: RET
// export function ScanBase ( side , base_area ) ; begin
43531: LD_INT 0
43533: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43534: LD_ADDR_VAR 0 3
43538: PUSH
43539: LD_VAR 0 2
43543: PPUSH
43544: LD_INT 81
43546: PUSH
43547: LD_VAR 0 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PPUSH
43556: CALL_OW 70
43560: ST_TO_ADDR
// end ;
43561: LD_VAR 0 3
43565: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43566: LD_INT 0
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
// result := false ;
43572: LD_ADDR_VAR 0 2
43576: PUSH
43577: LD_INT 0
43579: ST_TO_ADDR
// side := GetSide ( unit ) ;
43580: LD_ADDR_VAR 0 3
43584: PUSH
43585: LD_VAR 0 1
43589: PPUSH
43590: CALL_OW 255
43594: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43595: LD_ADDR_VAR 0 4
43599: PUSH
43600: LD_VAR 0 1
43604: PPUSH
43605: CALL_OW 248
43609: ST_TO_ADDR
// case nat of 1 :
43610: LD_VAR 0 4
43614: PUSH
43615: LD_INT 1
43617: DOUBLE
43618: EQUAL
43619: IFTRUE 43623
43621: GO 43634
43623: POP
// tech := tech_lassight ; 2 :
43624: LD_ADDR_VAR 0 5
43628: PUSH
43629: LD_INT 12
43631: ST_TO_ADDR
43632: GO 43673
43634: LD_INT 2
43636: DOUBLE
43637: EQUAL
43638: IFTRUE 43642
43640: GO 43653
43642: POP
// tech := tech_mortar ; 3 :
43643: LD_ADDR_VAR 0 5
43647: PUSH
43648: LD_INT 41
43650: ST_TO_ADDR
43651: GO 43673
43653: LD_INT 3
43655: DOUBLE
43656: EQUAL
43657: IFTRUE 43661
43659: GO 43672
43661: POP
// tech := tech_bazooka ; end ;
43662: LD_ADDR_VAR 0 5
43666: PUSH
43667: LD_INT 44
43669: ST_TO_ADDR
43670: GO 43673
43672: POP
// if Researched ( side , tech ) then
43673: LD_VAR 0 3
43677: PPUSH
43678: LD_VAR 0 5
43682: PPUSH
43683: CALL_OW 325
43687: IFFALSE 43714
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43689: LD_ADDR_VAR 0 2
43693: PUSH
43694: LD_INT 5
43696: PUSH
43697: LD_INT 8
43699: PUSH
43700: LD_INT 9
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: LIST
43707: PUSH
43708: LD_VAR 0 4
43712: ARRAY
43713: ST_TO_ADDR
// end ;
43714: LD_VAR 0 2
43718: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43719: LD_INT 0
43721: PPUSH
43722: PPUSH
43723: PPUSH
// if not mines then
43724: LD_VAR 0 2
43728: NOT
43729: IFFALSE 43733
// exit ;
43731: GO 43877
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43733: LD_ADDR_VAR 0 5
43737: PUSH
43738: LD_INT 81
43740: PUSH
43741: LD_VAR 0 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 21
43755: PUSH
43756: LD_INT 3
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PPUSH
43771: CALL_OW 69
43775: ST_TO_ADDR
// for i in mines do
43776: LD_ADDR_VAR 0 4
43780: PUSH
43781: LD_VAR 0 2
43785: PUSH
43786: FOR_IN
43787: IFFALSE 43875
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43789: LD_VAR 0 4
43793: PUSH
43794: LD_INT 1
43796: ARRAY
43797: PPUSH
43798: LD_VAR 0 4
43802: PUSH
43803: LD_INT 2
43805: ARRAY
43806: PPUSH
43807: CALL_OW 458
43811: NOT
43812: IFFALSE 43816
// continue ;
43814: GO 43786
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43816: LD_VAR 0 4
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: PPUSH
43825: LD_VAR 0 4
43829: PUSH
43830: LD_INT 2
43832: ARRAY
43833: PPUSH
43834: CALL_OW 428
43838: PUSH
43839: LD_VAR 0 5
43843: IN
43844: IFFALSE 43873
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43846: LD_VAR 0 4
43850: PUSH
43851: LD_INT 1
43853: ARRAY
43854: PPUSH
43855: LD_VAR 0 4
43859: PUSH
43860: LD_INT 2
43862: ARRAY
43863: PPUSH
43864: LD_VAR 0 1
43868: PPUSH
43869: CALL_OW 456
// end ;
43873: GO 43786
43875: POP
43876: POP
// end ;
43877: LD_VAR 0 3
43881: RET
// export function Count ( array ) ; begin
43882: LD_INT 0
43884: PPUSH
// result := array + 0 ;
43885: LD_ADDR_VAR 0 2
43889: PUSH
43890: LD_VAR 0 1
43894: PUSH
43895: LD_INT 0
43897: PLUS
43898: ST_TO_ADDR
// end ;
43899: LD_VAR 0 2
43903: RET
// export function IsEmpty ( building ) ; begin
43904: LD_INT 0
43906: PPUSH
// if not building then
43907: LD_VAR 0 1
43911: NOT
43912: IFFALSE 43916
// exit ;
43914: GO 43959
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43916: LD_ADDR_VAR 0 2
43920: PUSH
43921: LD_VAR 0 1
43925: PUSH
43926: LD_INT 22
43928: PUSH
43929: LD_VAR 0 1
43933: PPUSH
43934: CALL_OW 255
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 58
43945: PUSH
43946: EMPTY
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PPUSH
43953: CALL_OW 69
43957: IN
43958: ST_TO_ADDR
// end ;
43959: LD_VAR 0 2
43963: RET
// export function IsNotFull ( building ) ; var places ; begin
43964: LD_INT 0
43966: PPUSH
43967: PPUSH
// if not building then
43968: LD_VAR 0 1
43972: NOT
43973: IFFALSE 43977
// exit ;
43975: GO 44005
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43977: LD_ADDR_VAR 0 2
43981: PUSH
43982: LD_VAR 0 1
43986: PPUSH
43987: LD_INT 3
43989: PUSH
43990: LD_INT 62
43992: PUSH
43993: EMPTY
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PPUSH
44000: CALL_OW 72
44004: ST_TO_ADDR
// end ;
44005: LD_VAR 0 2
44009: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44010: LD_INT 0
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
// tmp := [ ] ;
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: EMPTY
44022: ST_TO_ADDR
// list := [ ] ;
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: EMPTY
44029: ST_TO_ADDR
// for i = 16 to 25 do
44030: LD_ADDR_VAR 0 4
44034: PUSH
44035: DOUBLE
44036: LD_INT 16
44038: DEC
44039: ST_TO_ADDR
44040: LD_INT 25
44042: PUSH
44043: FOR_TO
44044: IFFALSE 44117
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44046: LD_ADDR_VAR 0 3
44050: PUSH
44051: LD_VAR 0 3
44055: PUSH
44056: LD_INT 22
44058: PUSH
44059: LD_VAR 0 1
44063: PPUSH
44064: CALL_OW 255
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 91
44075: PUSH
44076: LD_VAR 0 1
44080: PUSH
44081: LD_INT 6
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 30
44091: PUSH
44092: LD_VAR 0 4
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: PUSH
44106: EMPTY
44107: LIST
44108: PPUSH
44109: CALL_OW 69
44113: ADD
44114: ST_TO_ADDR
44115: GO 44043
44117: POP
44118: POP
// for i = 1 to tmp do
44119: LD_ADDR_VAR 0 4
44123: PUSH
44124: DOUBLE
44125: LD_INT 1
44127: DEC
44128: ST_TO_ADDR
44129: LD_VAR 0 3
44133: PUSH
44134: FOR_TO
44135: IFFALSE 44223
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44137: LD_ADDR_VAR 0 5
44141: PUSH
44142: LD_VAR 0 5
44146: PUSH
44147: LD_VAR 0 3
44151: PUSH
44152: LD_VAR 0 4
44156: ARRAY
44157: PPUSH
44158: CALL_OW 266
44162: PUSH
44163: LD_VAR 0 3
44167: PUSH
44168: LD_VAR 0 4
44172: ARRAY
44173: PPUSH
44174: CALL_OW 250
44178: PUSH
44179: LD_VAR 0 3
44183: PUSH
44184: LD_VAR 0 4
44188: ARRAY
44189: PPUSH
44190: CALL_OW 251
44194: PUSH
44195: LD_VAR 0 3
44199: PUSH
44200: LD_VAR 0 4
44204: ARRAY
44205: PPUSH
44206: CALL_OW 254
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: PUSH
44217: EMPTY
44218: LIST
44219: ADD
44220: ST_TO_ADDR
44221: GO 44134
44223: POP
44224: POP
// result := list ;
44225: LD_ADDR_VAR 0 2
44229: PUSH
44230: LD_VAR 0 5
44234: ST_TO_ADDR
// end ;
44235: LD_VAR 0 2
44239: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44240: LD_INT 0
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
// if not factory then
44249: LD_VAR 0 1
44253: NOT
44254: IFFALSE 44258
// exit ;
44256: GO 44851
// if control = control_apeman then
44258: LD_VAR 0 4
44262: PUSH
44263: LD_INT 5
44265: EQUAL
44266: IFFALSE 44375
// begin tmp := UnitsInside ( factory ) ;
44268: LD_ADDR_VAR 0 8
44272: PUSH
44273: LD_VAR 0 1
44277: PPUSH
44278: CALL_OW 313
44282: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44283: LD_VAR 0 8
44287: PPUSH
44288: LD_INT 25
44290: PUSH
44291: LD_INT 12
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PPUSH
44298: CALL_OW 72
44302: NOT
44303: IFFALSE 44313
// control := control_manual ;
44305: LD_ADDR_VAR 0 4
44309: PUSH
44310: LD_INT 1
44312: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44313: LD_ADDR_VAR 0 8
44317: PUSH
44318: LD_VAR 0 1
44322: PPUSH
44323: CALL 44010 0 1
44327: ST_TO_ADDR
// if tmp then
44328: LD_VAR 0 8
44332: IFFALSE 44375
// begin for i in tmp do
44334: LD_ADDR_VAR 0 7
44338: PUSH
44339: LD_VAR 0 8
44343: PUSH
44344: FOR_IN
44345: IFFALSE 44373
// if i [ 1 ] = b_ext_radio then
44347: LD_VAR 0 7
44351: PUSH
44352: LD_INT 1
44354: ARRAY
44355: PUSH
44356: LD_INT 22
44358: EQUAL
44359: IFFALSE 44371
// begin control := control_remote ;
44361: LD_ADDR_VAR 0 4
44365: PUSH
44366: LD_INT 2
44368: ST_TO_ADDR
// break ;
44369: GO 44373
// end ;
44371: GO 44344
44373: POP
44374: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44375: LD_VAR 0 1
44379: PPUSH
44380: LD_VAR 0 2
44384: PPUSH
44385: LD_VAR 0 3
44389: PPUSH
44390: LD_VAR 0 4
44394: PPUSH
44395: LD_VAR 0 5
44399: PPUSH
44400: CALL_OW 448
44404: IFFALSE 44439
// begin result := [ chassis , engine , control , weapon ] ;
44406: LD_ADDR_VAR 0 6
44410: PUSH
44411: LD_VAR 0 2
44415: PUSH
44416: LD_VAR 0 3
44420: PUSH
44421: LD_VAR 0 4
44425: PUSH
44426: LD_VAR 0 5
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// exit ;
44437: GO 44851
// end ; _chassis := AvailableChassisList ( factory ) ;
44439: LD_ADDR_VAR 0 9
44443: PUSH
44444: LD_VAR 0 1
44448: PPUSH
44449: CALL_OW 475
44453: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44454: LD_ADDR_VAR 0 11
44458: PUSH
44459: LD_VAR 0 1
44463: PPUSH
44464: CALL_OW 476
44468: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44469: LD_ADDR_VAR 0 12
44473: PUSH
44474: LD_VAR 0 1
44478: PPUSH
44479: CALL_OW 477
44483: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44484: LD_ADDR_VAR 0 10
44488: PUSH
44489: LD_VAR 0 1
44493: PPUSH
44494: CALL_OW 478
44498: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44499: LD_VAR 0 9
44503: NOT
44504: PUSH
44505: LD_VAR 0 11
44509: NOT
44510: OR
44511: PUSH
44512: LD_VAR 0 12
44516: NOT
44517: OR
44518: PUSH
44519: LD_VAR 0 10
44523: NOT
44524: OR
44525: IFFALSE 44560
// begin result := [ chassis , engine , control , weapon ] ;
44527: LD_ADDR_VAR 0 6
44531: PUSH
44532: LD_VAR 0 2
44536: PUSH
44537: LD_VAR 0 3
44541: PUSH
44542: LD_VAR 0 4
44546: PUSH
44547: LD_VAR 0 5
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: ST_TO_ADDR
// exit ;
44558: GO 44851
// end ; if not chassis in _chassis then
44560: LD_VAR 0 2
44564: PUSH
44565: LD_VAR 0 9
44569: IN
44570: NOT
44571: IFFALSE 44597
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44573: LD_ADDR_VAR 0 2
44577: PUSH
44578: LD_VAR 0 9
44582: PUSH
44583: LD_INT 1
44585: PPUSH
44586: LD_VAR 0 9
44590: PPUSH
44591: CALL_OW 12
44595: ARRAY
44596: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44597: LD_VAR 0 2
44601: PPUSH
44602: LD_VAR 0 3
44606: PPUSH
44607: CALL 44856 0 2
44611: NOT
44612: IFFALSE 44671
// repeat engine := _engine [ 1 ] ;
44614: LD_ADDR_VAR 0 3
44618: PUSH
44619: LD_VAR 0 11
44623: PUSH
44624: LD_INT 1
44626: ARRAY
44627: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44628: LD_ADDR_VAR 0 11
44632: PUSH
44633: LD_VAR 0 11
44637: PPUSH
44638: LD_INT 1
44640: PPUSH
44641: CALL_OW 3
44645: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44646: LD_VAR 0 2
44650: PPUSH
44651: LD_VAR 0 3
44655: PPUSH
44656: CALL 44856 0 2
44660: PUSH
44661: LD_VAR 0 11
44665: PUSH
44666: EMPTY
44667: EQUAL
44668: OR
44669: IFFALSE 44614
// if not control in _control then
44671: LD_VAR 0 4
44675: PUSH
44676: LD_VAR 0 12
44680: IN
44681: NOT
44682: IFFALSE 44708
// control := _control [ rand ( 1 , _control ) ] ;
44684: LD_ADDR_VAR 0 4
44688: PUSH
44689: LD_VAR 0 12
44693: PUSH
44694: LD_INT 1
44696: PPUSH
44697: LD_VAR 0 12
44701: PPUSH
44702: CALL_OW 12
44706: ARRAY
44707: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44708: LD_VAR 0 2
44712: PPUSH
44713: LD_VAR 0 5
44717: PPUSH
44718: CALL 45076 0 2
44722: NOT
44723: IFFALSE 44782
// repeat weapon := _weapon [ 1 ] ;
44725: LD_ADDR_VAR 0 5
44729: PUSH
44730: LD_VAR 0 10
44734: PUSH
44735: LD_INT 1
44737: ARRAY
44738: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44739: LD_ADDR_VAR 0 10
44743: PUSH
44744: LD_VAR 0 10
44748: PPUSH
44749: LD_INT 1
44751: PPUSH
44752: CALL_OW 3
44756: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44757: LD_VAR 0 2
44761: PPUSH
44762: LD_VAR 0 5
44766: PPUSH
44767: CALL 45076 0 2
44771: PUSH
44772: LD_VAR 0 10
44776: PUSH
44777: EMPTY
44778: EQUAL
44779: OR
44780: IFFALSE 44725
// result := [ ] ;
44782: LD_ADDR_VAR 0 6
44786: PUSH
44787: EMPTY
44788: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44789: LD_VAR 0 1
44793: PPUSH
44794: LD_VAR 0 2
44798: PPUSH
44799: LD_VAR 0 3
44803: PPUSH
44804: LD_VAR 0 4
44808: PPUSH
44809: LD_VAR 0 5
44813: PPUSH
44814: CALL_OW 448
44818: IFFALSE 44851
// result := [ chassis , engine , control , weapon ] ;
44820: LD_ADDR_VAR 0 6
44824: PUSH
44825: LD_VAR 0 2
44829: PUSH
44830: LD_VAR 0 3
44834: PUSH
44835: LD_VAR 0 4
44839: PUSH
44840: LD_VAR 0 5
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// end ;
44851: LD_VAR 0 6
44855: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44856: LD_INT 0
44858: PPUSH
// if not chassis or not engine then
44859: LD_VAR 0 1
44863: NOT
44864: PUSH
44865: LD_VAR 0 2
44869: NOT
44870: OR
44871: IFFALSE 44875
// exit ;
44873: GO 45071
// case engine of engine_solar :
44875: LD_VAR 0 2
44879: PUSH
44880: LD_INT 2
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44888
44886: GO 44926
44888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44889: LD_ADDR_VAR 0 3
44893: PUSH
44894: LD_INT 11
44896: PUSH
44897: LD_INT 12
44899: PUSH
44900: LD_INT 13
44902: PUSH
44903: LD_INT 14
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
44924: GO 45055
44926: LD_INT 1
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 44996
44934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44935: LD_ADDR_VAR 0 3
44939: PUSH
44940: LD_INT 11
44942: PUSH
44943: LD_INT 12
44945: PUSH
44946: LD_INT 13
44948: PUSH
44949: LD_INT 14
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 3
44960: PUSH
44961: LD_INT 4
44963: PUSH
44964: LD_INT 5
44966: PUSH
44967: LD_INT 21
44969: PUSH
44970: LD_INT 23
44972: PUSH
44973: LD_INT 22
44975: PUSH
44976: LD_INT 24
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: ST_TO_ADDR
44994: GO 45055
44996: LD_INT 3
44998: DOUBLE
44999: EQUAL
45000: IFTRUE 45004
45002: GO 45054
45004: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45005: LD_ADDR_VAR 0 3
45009: PUSH
45010: LD_INT 13
45012: PUSH
45013: LD_INT 14
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: LD_INT 4
45024: PUSH
45025: LD_INT 5
45027: PUSH
45028: LD_INT 21
45030: PUSH
45031: LD_INT 22
45033: PUSH
45034: LD_INT 23
45036: PUSH
45037: LD_INT 24
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: ST_TO_ADDR
45052: GO 45055
45054: POP
// result := ( chassis in result ) ;
45055: LD_ADDR_VAR 0 3
45059: PUSH
45060: LD_VAR 0 1
45064: PUSH
45065: LD_VAR 0 3
45069: IN
45070: ST_TO_ADDR
// end ;
45071: LD_VAR 0 3
45075: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45076: LD_INT 0
45078: PPUSH
// if not chassis or not weapon then
45079: LD_VAR 0 1
45083: NOT
45084: PUSH
45085: LD_VAR 0 2
45089: NOT
45090: OR
45091: IFFALSE 45095
// exit ;
45093: GO 46155
// case weapon of us_machine_gun :
45095: LD_VAR 0 2
45099: PUSH
45100: LD_INT 2
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45108
45106: GO 45138
45108: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45109: LD_ADDR_VAR 0 3
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: LD_INT 4
45125: PUSH
45126: LD_INT 5
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
45136: GO 46139
45138: LD_INT 3
45140: DOUBLE
45141: EQUAL
45142: IFTRUE 45146
45144: GO 45176
45146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 3
45160: PUSH
45161: LD_INT 4
45163: PUSH
45164: LD_INT 5
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
45174: GO 46139
45176: LD_INT 11
45178: DOUBLE
45179: EQUAL
45180: IFTRUE 45184
45182: GO 45214
45184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45185: LD_ADDR_VAR 0 3
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: LD_INT 4
45201: PUSH
45202: LD_INT 5
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
45212: GO 46139
45214: LD_INT 4
45216: DOUBLE
45217: EQUAL
45218: IFTRUE 45222
45220: GO 45248
45222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45223: LD_ADDR_VAR 0 3
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: LD_INT 4
45236: PUSH
45237: LD_INT 5
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: ST_TO_ADDR
45246: GO 46139
45248: LD_INT 5
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45256
45254: GO 45282
45256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45257: LD_ADDR_VAR 0 3
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 3
45267: PUSH
45268: LD_INT 4
45270: PUSH
45271: LD_INT 5
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
45280: GO 46139
45282: LD_INT 9
45284: DOUBLE
45285: EQUAL
45286: IFTRUE 45290
45288: GO 45316
45290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45291: LD_ADDR_VAR 0 3
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 4
45304: PUSH
45305: LD_INT 5
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
45314: GO 46139
45316: LD_INT 7
45318: DOUBLE
45319: EQUAL
45320: IFTRUE 45324
45322: GO 45350
45324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45325: LD_ADDR_VAR 0 3
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 3
45335: PUSH
45336: LD_INT 4
45338: PUSH
45339: LD_INT 5
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
45348: GO 46139
45350: LD_INT 12
45352: DOUBLE
45353: EQUAL
45354: IFTRUE 45358
45356: GO 45384
45358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45359: LD_ADDR_VAR 0 3
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: LD_INT 4
45372: PUSH
45373: LD_INT 5
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
45382: GO 46139
45384: LD_INT 13
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45418
45392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45393: LD_ADDR_VAR 0 3
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: LD_INT 5
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
45416: GO 46139
45418: LD_INT 14
45420: DOUBLE
45421: EQUAL
45422: IFTRUE 45426
45424: GO 45444
45426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45427: LD_ADDR_VAR 0 3
45431: PUSH
45432: LD_INT 4
45434: PUSH
45435: LD_INT 5
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: ST_TO_ADDR
45442: GO 46139
45444: LD_INT 6
45446: DOUBLE
45447: EQUAL
45448: IFTRUE 45452
45450: GO 45470
45452: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45453: LD_ADDR_VAR 0 3
45457: PUSH
45458: LD_INT 4
45460: PUSH
45461: LD_INT 5
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: ST_TO_ADDR
45468: GO 46139
45470: LD_INT 10
45472: DOUBLE
45473: EQUAL
45474: IFTRUE 45478
45476: GO 45496
45478: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45479: LD_ADDR_VAR 0 3
45483: PUSH
45484: LD_INT 4
45486: PUSH
45487: LD_INT 5
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: ST_TO_ADDR
45494: GO 46139
45496: LD_INT 22
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 45530
45504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_INT 11
45512: PUSH
45513: LD_INT 12
45515: PUSH
45516: LD_INT 13
45518: PUSH
45519: LD_INT 14
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
45528: GO 46139
45530: LD_INT 23
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 45564
45538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45539: LD_ADDR_VAR 0 3
45543: PUSH
45544: LD_INT 11
45546: PUSH
45547: LD_INT 12
45549: PUSH
45550: LD_INT 13
45552: PUSH
45553: LD_INT 14
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
45562: GO 46139
45564: LD_INT 24
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45598
45572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_INT 11
45580: PUSH
45581: LD_INT 12
45583: PUSH
45584: LD_INT 13
45586: PUSH
45587: LD_INT 14
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: ST_TO_ADDR
45596: GO 46139
45598: LD_INT 30
45600: DOUBLE
45601: EQUAL
45602: IFTRUE 45606
45604: GO 45632
45606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45607: LD_ADDR_VAR 0 3
45611: PUSH
45612: LD_INT 11
45614: PUSH
45615: LD_INT 12
45617: PUSH
45618: LD_INT 13
45620: PUSH
45621: LD_INT 14
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
45630: GO 46139
45632: LD_INT 25
45634: DOUBLE
45635: EQUAL
45636: IFTRUE 45640
45638: GO 45658
45640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_INT 13
45648: PUSH
45649: LD_INT 14
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: ST_TO_ADDR
45656: GO 46139
45658: LD_INT 27
45660: DOUBLE
45661: EQUAL
45662: IFTRUE 45666
45664: GO 45684
45666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_INT 13
45674: PUSH
45675: LD_INT 14
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: ST_TO_ADDR
45682: GO 46139
45684: LD_INT 92
45686: DOUBLE
45687: EQUAL
45688: IFTRUE 45692
45690: GO 45718
45692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45693: LD_ADDR_VAR 0 3
45697: PUSH
45698: LD_INT 11
45700: PUSH
45701: LD_INT 12
45703: PUSH
45704: LD_INT 13
45706: PUSH
45707: LD_INT 14
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
45716: GO 46139
45718: LD_INT 28
45720: DOUBLE
45721: EQUAL
45722: IFTRUE 45726
45724: GO 45744
45726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45727: LD_ADDR_VAR 0 3
45731: PUSH
45732: LD_INT 13
45734: PUSH
45735: LD_INT 14
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: ST_TO_ADDR
45742: GO 46139
45744: LD_INT 29
45746: DOUBLE
45747: EQUAL
45748: IFTRUE 45752
45750: GO 45770
45752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45753: LD_ADDR_VAR 0 3
45757: PUSH
45758: LD_INT 13
45760: PUSH
45761: LD_INT 14
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: ST_TO_ADDR
45768: GO 46139
45770: LD_INT 31
45772: DOUBLE
45773: EQUAL
45774: IFTRUE 45778
45776: GO 45796
45778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45779: LD_ADDR_VAR 0 3
45783: PUSH
45784: LD_INT 13
45786: PUSH
45787: LD_INT 14
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: ST_TO_ADDR
45794: GO 46139
45796: LD_INT 26
45798: DOUBLE
45799: EQUAL
45800: IFTRUE 45804
45802: GO 45822
45804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45805: LD_ADDR_VAR 0 3
45809: PUSH
45810: LD_INT 13
45812: PUSH
45813: LD_INT 14
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: ST_TO_ADDR
45820: GO 46139
45822: LD_INT 42
45824: DOUBLE
45825: EQUAL
45826: IFTRUE 45830
45828: GO 45856
45830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45831: LD_ADDR_VAR 0 3
45835: PUSH
45836: LD_INT 21
45838: PUSH
45839: LD_INT 22
45841: PUSH
45842: LD_INT 23
45844: PUSH
45845: LD_INT 24
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
45854: GO 46139
45856: LD_INT 43
45858: DOUBLE
45859: EQUAL
45860: IFTRUE 45864
45862: GO 45890
45864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45865: LD_ADDR_VAR 0 3
45869: PUSH
45870: LD_INT 21
45872: PUSH
45873: LD_INT 22
45875: PUSH
45876: LD_INT 23
45878: PUSH
45879: LD_INT 24
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
45888: GO 46139
45890: LD_INT 44
45892: DOUBLE
45893: EQUAL
45894: IFTRUE 45898
45896: GO 45924
45898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45899: LD_ADDR_VAR 0 3
45903: PUSH
45904: LD_INT 21
45906: PUSH
45907: LD_INT 22
45909: PUSH
45910: LD_INT 23
45912: PUSH
45913: LD_INT 24
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: ST_TO_ADDR
45922: GO 46139
45924: LD_INT 45
45926: DOUBLE
45927: EQUAL
45928: IFTRUE 45932
45930: GO 45958
45932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45933: LD_ADDR_VAR 0 3
45937: PUSH
45938: LD_INT 21
45940: PUSH
45941: LD_INT 22
45943: PUSH
45944: LD_INT 23
45946: PUSH
45947: LD_INT 24
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
45956: GO 46139
45958: LD_INT 49
45960: DOUBLE
45961: EQUAL
45962: IFTRUE 45966
45964: GO 45992
45966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45967: LD_ADDR_VAR 0 3
45971: PUSH
45972: LD_INT 21
45974: PUSH
45975: LD_INT 22
45977: PUSH
45978: LD_INT 23
45980: PUSH
45981: LD_INT 24
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
45990: GO 46139
45992: LD_INT 51
45994: DOUBLE
45995: EQUAL
45996: IFTRUE 46000
45998: GO 46026
46000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46001: LD_ADDR_VAR 0 3
46005: PUSH
46006: LD_INT 21
46008: PUSH
46009: LD_INT 22
46011: PUSH
46012: LD_INT 23
46014: PUSH
46015: LD_INT 24
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
46024: GO 46139
46026: LD_INT 52
46028: DOUBLE
46029: EQUAL
46030: IFTRUE 46034
46032: GO 46060
46034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46035: LD_ADDR_VAR 0 3
46039: PUSH
46040: LD_INT 21
46042: PUSH
46043: LD_INT 22
46045: PUSH
46046: LD_INT 23
46048: PUSH
46049: LD_INT 24
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
46058: GO 46139
46060: LD_INT 53
46062: DOUBLE
46063: EQUAL
46064: IFTRUE 46068
46066: GO 46086
46068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46069: LD_ADDR_VAR 0 3
46073: PUSH
46074: LD_INT 23
46076: PUSH
46077: LD_INT 24
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: ST_TO_ADDR
46084: GO 46139
46086: LD_INT 46
46088: DOUBLE
46089: EQUAL
46090: IFTRUE 46094
46092: GO 46112
46094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46095: LD_ADDR_VAR 0 3
46099: PUSH
46100: LD_INT 23
46102: PUSH
46103: LD_INT 24
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: ST_TO_ADDR
46110: GO 46139
46112: LD_INT 47
46114: DOUBLE
46115: EQUAL
46116: IFTRUE 46120
46118: GO 46138
46120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46121: LD_ADDR_VAR 0 3
46125: PUSH
46126: LD_INT 23
46128: PUSH
46129: LD_INT 24
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: ST_TO_ADDR
46136: GO 46139
46138: POP
// result := ( chassis in result ) ;
46139: LD_ADDR_VAR 0 3
46143: PUSH
46144: LD_VAR 0 1
46148: PUSH
46149: LD_VAR 0 3
46153: IN
46154: ST_TO_ADDR
// end ;
46155: LD_VAR 0 3
46159: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46160: LD_INT 0
46162: PPUSH
46163: PPUSH
46164: PPUSH
46165: PPUSH
46166: PPUSH
46167: PPUSH
46168: PPUSH
// result := array ;
46169: LD_ADDR_VAR 0 5
46173: PUSH
46174: LD_VAR 0 1
46178: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46179: LD_VAR 0 1
46183: NOT
46184: PUSH
46185: LD_VAR 0 2
46189: NOT
46190: OR
46191: PUSH
46192: LD_VAR 0 3
46196: NOT
46197: OR
46198: PUSH
46199: LD_VAR 0 2
46203: PUSH
46204: LD_VAR 0 1
46208: GREATER
46209: OR
46210: PUSH
46211: LD_VAR 0 3
46215: PUSH
46216: LD_VAR 0 1
46220: GREATER
46221: OR
46222: IFFALSE 46226
// exit ;
46224: GO 46522
// if direction then
46226: LD_VAR 0 4
46230: IFFALSE 46294
// begin d := 1 ;
46232: LD_ADDR_VAR 0 9
46236: PUSH
46237: LD_INT 1
46239: ST_TO_ADDR
// if i_from > i_to then
46240: LD_VAR 0 2
46244: PUSH
46245: LD_VAR 0 3
46249: GREATER
46250: IFFALSE 46276
// length := ( array - i_from ) + i_to else
46252: LD_ADDR_VAR 0 11
46256: PUSH
46257: LD_VAR 0 1
46261: PUSH
46262: LD_VAR 0 2
46266: MINUS
46267: PUSH
46268: LD_VAR 0 3
46272: PLUS
46273: ST_TO_ADDR
46274: GO 46292
// length := i_to - i_from ;
46276: LD_ADDR_VAR 0 11
46280: PUSH
46281: LD_VAR 0 3
46285: PUSH
46286: LD_VAR 0 2
46290: MINUS
46291: ST_TO_ADDR
// end else
46292: GO 46355
// begin d := - 1 ;
46294: LD_ADDR_VAR 0 9
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: ST_TO_ADDR
// if i_from > i_to then
46303: LD_VAR 0 2
46307: PUSH
46308: LD_VAR 0 3
46312: GREATER
46313: IFFALSE 46333
// length := i_from - i_to else
46315: LD_ADDR_VAR 0 11
46319: PUSH
46320: LD_VAR 0 2
46324: PUSH
46325: LD_VAR 0 3
46329: MINUS
46330: ST_TO_ADDR
46331: GO 46355
// length := ( array - i_to ) + i_from ;
46333: LD_ADDR_VAR 0 11
46337: PUSH
46338: LD_VAR 0 1
46342: PUSH
46343: LD_VAR 0 3
46347: MINUS
46348: PUSH
46349: LD_VAR 0 2
46353: PLUS
46354: ST_TO_ADDR
// end ; if not length then
46355: LD_VAR 0 11
46359: NOT
46360: IFFALSE 46364
// exit ;
46362: GO 46522
// tmp := array ;
46364: LD_ADDR_VAR 0 10
46368: PUSH
46369: LD_VAR 0 1
46373: ST_TO_ADDR
// for i = 1 to length do
46374: LD_ADDR_VAR 0 6
46378: PUSH
46379: DOUBLE
46380: LD_INT 1
46382: DEC
46383: ST_TO_ADDR
46384: LD_VAR 0 11
46388: PUSH
46389: FOR_TO
46390: IFFALSE 46510
// begin for j = 1 to array do
46392: LD_ADDR_VAR 0 7
46396: PUSH
46397: DOUBLE
46398: LD_INT 1
46400: DEC
46401: ST_TO_ADDR
46402: LD_VAR 0 1
46406: PUSH
46407: FOR_TO
46408: IFFALSE 46496
// begin k := j + d ;
46410: LD_ADDR_VAR 0 8
46414: PUSH
46415: LD_VAR 0 7
46419: PUSH
46420: LD_VAR 0 9
46424: PLUS
46425: ST_TO_ADDR
// if k > array then
46426: LD_VAR 0 8
46430: PUSH
46431: LD_VAR 0 1
46435: GREATER
46436: IFFALSE 46446
// k := 1 ;
46438: LD_ADDR_VAR 0 8
46442: PUSH
46443: LD_INT 1
46445: ST_TO_ADDR
// if not k then
46446: LD_VAR 0 8
46450: NOT
46451: IFFALSE 46463
// k := array ;
46453: LD_ADDR_VAR 0 8
46457: PUSH
46458: LD_VAR 0 1
46462: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46463: LD_ADDR_VAR 0 10
46467: PUSH
46468: LD_VAR 0 10
46472: PPUSH
46473: LD_VAR 0 8
46477: PPUSH
46478: LD_VAR 0 1
46482: PUSH
46483: LD_VAR 0 7
46487: ARRAY
46488: PPUSH
46489: CALL_OW 1
46493: ST_TO_ADDR
// end ;
46494: GO 46407
46496: POP
46497: POP
// array := tmp ;
46498: LD_ADDR_VAR 0 1
46502: PUSH
46503: LD_VAR 0 10
46507: ST_TO_ADDR
// end ;
46508: GO 46389
46510: POP
46511: POP
// result := array ;
46512: LD_ADDR_VAR 0 5
46516: PUSH
46517: LD_VAR 0 1
46521: ST_TO_ADDR
// end ;
46522: LD_VAR 0 5
46526: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46527: LD_INT 0
46529: PPUSH
46530: PPUSH
// result := 0 ;
46531: LD_ADDR_VAR 0 3
46535: PUSH
46536: LD_INT 0
46538: ST_TO_ADDR
// if not array or not value in array then
46539: LD_VAR 0 1
46543: NOT
46544: PUSH
46545: LD_VAR 0 2
46549: PUSH
46550: LD_VAR 0 1
46554: IN
46555: NOT
46556: OR
46557: IFFALSE 46561
// exit ;
46559: GO 46615
// for i = 1 to array do
46561: LD_ADDR_VAR 0 4
46565: PUSH
46566: DOUBLE
46567: LD_INT 1
46569: DEC
46570: ST_TO_ADDR
46571: LD_VAR 0 1
46575: PUSH
46576: FOR_TO
46577: IFFALSE 46613
// if value = array [ i ] then
46579: LD_VAR 0 2
46583: PUSH
46584: LD_VAR 0 1
46588: PUSH
46589: LD_VAR 0 4
46593: ARRAY
46594: EQUAL
46595: IFFALSE 46611
// begin result := i ;
46597: LD_ADDR_VAR 0 3
46601: PUSH
46602: LD_VAR 0 4
46606: ST_TO_ADDR
// exit ;
46607: POP
46608: POP
46609: GO 46615
// end ;
46611: GO 46576
46613: POP
46614: POP
// end ;
46615: LD_VAR 0 3
46619: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46620: LD_INT 0
46622: PPUSH
// vc_chassis := chassis ;
46623: LD_ADDR_OWVAR 37
46627: PUSH
46628: LD_VAR 0 1
46632: ST_TO_ADDR
// vc_engine := engine ;
46633: LD_ADDR_OWVAR 39
46637: PUSH
46638: LD_VAR 0 2
46642: ST_TO_ADDR
// vc_control := control ;
46643: LD_ADDR_OWVAR 38
46647: PUSH
46648: LD_VAR 0 3
46652: ST_TO_ADDR
// vc_weapon := weapon ;
46653: LD_ADDR_OWVAR 40
46657: PUSH
46658: LD_VAR 0 4
46662: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46663: LD_ADDR_OWVAR 41
46667: PUSH
46668: LD_VAR 0 5
46672: ST_TO_ADDR
// end ;
46673: LD_VAR 0 6
46677: RET
// export function WantPlant ( unit ) ; var task ; begin
46678: LD_INT 0
46680: PPUSH
46681: PPUSH
// result := false ;
46682: LD_ADDR_VAR 0 2
46686: PUSH
46687: LD_INT 0
46689: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46690: LD_ADDR_VAR 0 3
46694: PUSH
46695: LD_VAR 0 1
46699: PPUSH
46700: CALL_OW 437
46704: ST_TO_ADDR
// if task then
46705: LD_VAR 0 3
46709: IFFALSE 46737
// if task [ 1 ] [ 1 ] = p then
46711: LD_VAR 0 3
46715: PUSH
46716: LD_INT 1
46718: ARRAY
46719: PUSH
46720: LD_INT 1
46722: ARRAY
46723: PUSH
46724: LD_STRING p
46726: EQUAL
46727: IFFALSE 46737
// result := true ;
46729: LD_ADDR_VAR 0 2
46733: PUSH
46734: LD_INT 1
46736: ST_TO_ADDR
// end ;
46737: LD_VAR 0 2
46741: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46742: LD_INT 0
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
// if pos < 1 then
46748: LD_VAR 0 2
46752: PUSH
46753: LD_INT 1
46755: LESS
46756: IFFALSE 46760
// exit ;
46758: GO 47063
// if pos = 1 then
46760: LD_VAR 0 2
46764: PUSH
46765: LD_INT 1
46767: EQUAL
46768: IFFALSE 46801
// result := Replace ( arr , pos [ 1 ] , value ) else
46770: LD_ADDR_VAR 0 4
46774: PUSH
46775: LD_VAR 0 1
46779: PPUSH
46780: LD_VAR 0 2
46784: PUSH
46785: LD_INT 1
46787: ARRAY
46788: PPUSH
46789: LD_VAR 0 3
46793: PPUSH
46794: CALL_OW 1
46798: ST_TO_ADDR
46799: GO 47063
// begin tmp := arr ;
46801: LD_ADDR_VAR 0 6
46805: PUSH
46806: LD_VAR 0 1
46810: ST_TO_ADDR
// s_arr := [ tmp ] ;
46811: LD_ADDR_VAR 0 7
46815: PUSH
46816: LD_VAR 0 6
46820: PUSH
46821: EMPTY
46822: LIST
46823: ST_TO_ADDR
// for i = 1 to pos - 1 do
46824: LD_ADDR_VAR 0 5
46828: PUSH
46829: DOUBLE
46830: LD_INT 1
46832: DEC
46833: ST_TO_ADDR
46834: LD_VAR 0 2
46838: PUSH
46839: LD_INT 1
46841: MINUS
46842: PUSH
46843: FOR_TO
46844: IFFALSE 46889
// begin tmp := tmp [ pos [ i ] ] ;
46846: LD_ADDR_VAR 0 6
46850: PUSH
46851: LD_VAR 0 6
46855: PUSH
46856: LD_VAR 0 2
46860: PUSH
46861: LD_VAR 0 5
46865: ARRAY
46866: ARRAY
46867: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46868: LD_ADDR_VAR 0 7
46872: PUSH
46873: LD_VAR 0 7
46877: PUSH
46878: LD_VAR 0 6
46882: PUSH
46883: EMPTY
46884: LIST
46885: ADD
46886: ST_TO_ADDR
// end ;
46887: GO 46843
46889: POP
46890: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46891: LD_ADDR_VAR 0 6
46895: PUSH
46896: LD_VAR 0 6
46900: PPUSH
46901: LD_VAR 0 2
46905: PUSH
46906: LD_VAR 0 2
46910: ARRAY
46911: PPUSH
46912: LD_VAR 0 3
46916: PPUSH
46917: CALL_OW 1
46921: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46922: LD_ADDR_VAR 0 7
46926: PUSH
46927: LD_VAR 0 7
46931: PPUSH
46932: LD_VAR 0 7
46936: PPUSH
46937: LD_VAR 0 6
46941: PPUSH
46942: CALL_OW 1
46946: ST_TO_ADDR
// for i = s_arr downto 2 do
46947: LD_ADDR_VAR 0 5
46951: PUSH
46952: DOUBLE
46953: LD_VAR 0 7
46957: INC
46958: ST_TO_ADDR
46959: LD_INT 2
46961: PUSH
46962: FOR_DOWNTO
46963: IFFALSE 47047
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46965: LD_ADDR_VAR 0 6
46969: PUSH
46970: LD_VAR 0 7
46974: PUSH
46975: LD_VAR 0 5
46979: PUSH
46980: LD_INT 1
46982: MINUS
46983: ARRAY
46984: PPUSH
46985: LD_VAR 0 2
46989: PUSH
46990: LD_VAR 0 5
46994: PUSH
46995: LD_INT 1
46997: MINUS
46998: ARRAY
46999: PPUSH
47000: LD_VAR 0 7
47004: PUSH
47005: LD_VAR 0 5
47009: ARRAY
47010: PPUSH
47011: CALL_OW 1
47015: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47016: LD_ADDR_VAR 0 7
47020: PUSH
47021: LD_VAR 0 7
47025: PPUSH
47026: LD_VAR 0 5
47030: PUSH
47031: LD_INT 1
47033: MINUS
47034: PPUSH
47035: LD_VAR 0 6
47039: PPUSH
47040: CALL_OW 1
47044: ST_TO_ADDR
// end ;
47045: GO 46962
47047: POP
47048: POP
// result := s_arr [ 1 ] ;
47049: LD_ADDR_VAR 0 4
47053: PUSH
47054: LD_VAR 0 7
47058: PUSH
47059: LD_INT 1
47061: ARRAY
47062: ST_TO_ADDR
// end ; end ;
47063: LD_VAR 0 4
47067: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47068: LD_INT 0
47070: PPUSH
47071: PPUSH
// if not list then
47072: LD_VAR 0 1
47076: NOT
47077: IFFALSE 47081
// exit ;
47079: GO 47172
// i := list [ pos1 ] ;
47081: LD_ADDR_VAR 0 5
47085: PUSH
47086: LD_VAR 0 1
47090: PUSH
47091: LD_VAR 0 2
47095: ARRAY
47096: ST_TO_ADDR
// if not i then
47097: LD_VAR 0 5
47101: NOT
47102: IFFALSE 47106
// exit ;
47104: GO 47172
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47106: LD_ADDR_VAR 0 1
47110: PUSH
47111: LD_VAR 0 1
47115: PPUSH
47116: LD_VAR 0 2
47120: PPUSH
47121: LD_VAR 0 1
47125: PUSH
47126: LD_VAR 0 3
47130: ARRAY
47131: PPUSH
47132: CALL_OW 1
47136: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47137: LD_ADDR_VAR 0 1
47141: PUSH
47142: LD_VAR 0 1
47146: PPUSH
47147: LD_VAR 0 3
47151: PPUSH
47152: LD_VAR 0 5
47156: PPUSH
47157: CALL_OW 1
47161: ST_TO_ADDR
// result := list ;
47162: LD_ADDR_VAR 0 4
47166: PUSH
47167: LD_VAR 0 1
47171: ST_TO_ADDR
// end ;
47172: LD_VAR 0 4
47176: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47177: LD_INT 0
47179: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47180: LD_ADDR_VAR 0 5
47184: PUSH
47185: LD_VAR 0 1
47189: PPUSH
47190: CALL_OW 250
47194: PPUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: CALL_OW 251
47204: PPUSH
47205: LD_VAR 0 2
47209: PPUSH
47210: LD_VAR 0 3
47214: PPUSH
47215: LD_VAR 0 4
47219: PPUSH
47220: CALL 47598 0 5
47224: ST_TO_ADDR
// end ;
47225: LD_VAR 0 5
47229: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47230: LD_INT 0
47232: PPUSH
47233: PPUSH
47234: PPUSH
47235: PPUSH
// if not list or not unit then
47236: LD_VAR 0 2
47240: NOT
47241: PUSH
47242: LD_VAR 0 1
47246: NOT
47247: OR
47248: IFFALSE 47252
// exit ;
47250: GO 47593
// result := [ ] ;
47252: LD_ADDR_VAR 0 5
47256: PUSH
47257: EMPTY
47258: ST_TO_ADDR
// for i in list do
47259: LD_ADDR_VAR 0 6
47263: PUSH
47264: LD_VAR 0 2
47268: PUSH
47269: FOR_IN
47270: IFFALSE 47488
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47272: LD_ADDR_VAR 0 8
47276: PUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: LD_VAR 0 6
47286: PUSH
47287: LD_INT 1
47289: ARRAY
47290: PPUSH
47291: LD_VAR 0 6
47295: PUSH
47296: LD_INT 2
47298: ARRAY
47299: PPUSH
47300: CALL_OW 297
47304: ST_TO_ADDR
// if not Count ( result ) then
47305: LD_VAR 0 5
47309: PPUSH
47310: CALL 43882 0 1
47314: NOT
47315: IFFALSE 47348
// begin result := Join ( result , [ i , tmp ] ) ;
47317: LD_ADDR_VAR 0 5
47321: PUSH
47322: LD_VAR 0 5
47326: PPUSH
47327: LD_VAR 0 6
47331: PUSH
47332: LD_VAR 0 8
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PPUSH
47341: CALL 79471 0 2
47345: ST_TO_ADDR
// continue ;
47346: GO 47269
// end ; if result [ result ] [ 2 ] <= tmp then
47348: LD_VAR 0 5
47352: PUSH
47353: LD_VAR 0 5
47357: ARRAY
47358: PUSH
47359: LD_INT 2
47361: ARRAY
47362: PUSH
47363: LD_VAR 0 8
47367: LESSEQUAL
47368: IFFALSE 47401
// result := Join ( result , [ i , tmp ] ) else
47370: LD_ADDR_VAR 0 5
47374: PUSH
47375: LD_VAR 0 5
47379: PPUSH
47380: LD_VAR 0 6
47384: PUSH
47385: LD_VAR 0 8
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PPUSH
47394: CALL 79471 0 2
47398: ST_TO_ADDR
47399: GO 47486
// begin for j := 1 to Count ( result ) do
47401: LD_ADDR_VAR 0 7
47405: PUSH
47406: DOUBLE
47407: LD_INT 1
47409: DEC
47410: ST_TO_ADDR
47411: LD_VAR 0 5
47415: PPUSH
47416: CALL 43882 0 1
47420: PUSH
47421: FOR_TO
47422: IFFALSE 47484
// begin if tmp < result [ j ] [ 2 ] then
47424: LD_VAR 0 8
47428: PUSH
47429: LD_VAR 0 5
47433: PUSH
47434: LD_VAR 0 7
47438: ARRAY
47439: PUSH
47440: LD_INT 2
47442: ARRAY
47443: LESS
47444: IFFALSE 47482
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47446: LD_ADDR_VAR 0 5
47450: PUSH
47451: LD_VAR 0 5
47455: PPUSH
47456: LD_VAR 0 7
47460: PPUSH
47461: LD_VAR 0 6
47465: PUSH
47466: LD_VAR 0 8
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PPUSH
47475: CALL_OW 2
47479: ST_TO_ADDR
// break ;
47480: GO 47484
// end ; end ;
47482: GO 47421
47484: POP
47485: POP
// end ; end ;
47486: GO 47269
47488: POP
47489: POP
// if result and not asc then
47490: LD_VAR 0 5
47494: PUSH
47495: LD_VAR 0 3
47499: NOT
47500: AND
47501: IFFALSE 47518
// result := ReverseArray ( result ) ;
47503: LD_ADDR_VAR 0 5
47507: PUSH
47508: LD_VAR 0 5
47512: PPUSH
47513: CALL 74758 0 1
47517: ST_TO_ADDR
// tmp := [ ] ;
47518: LD_ADDR_VAR 0 8
47522: PUSH
47523: EMPTY
47524: ST_TO_ADDR
// if mode then
47525: LD_VAR 0 4
47529: IFFALSE 47593
// begin for i := 1 to result do
47531: LD_ADDR_VAR 0 6
47535: PUSH
47536: DOUBLE
47537: LD_INT 1
47539: DEC
47540: ST_TO_ADDR
47541: LD_VAR 0 5
47545: PUSH
47546: FOR_TO
47547: IFFALSE 47581
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47549: LD_ADDR_VAR 0 8
47553: PUSH
47554: LD_VAR 0 8
47558: PPUSH
47559: LD_VAR 0 5
47563: PUSH
47564: LD_VAR 0 6
47568: ARRAY
47569: PUSH
47570: LD_INT 1
47572: ARRAY
47573: PPUSH
47574: CALL 79471 0 2
47578: ST_TO_ADDR
47579: GO 47546
47581: POP
47582: POP
// result := tmp ;
47583: LD_ADDR_VAR 0 5
47587: PUSH
47588: LD_VAR 0 8
47592: ST_TO_ADDR
// end ; end ;
47593: LD_VAR 0 5
47597: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47598: LD_INT 0
47600: PPUSH
47601: PPUSH
47602: PPUSH
47603: PPUSH
// if not list then
47604: LD_VAR 0 3
47608: NOT
47609: IFFALSE 47613
// exit ;
47611: GO 48001
// result := [ ] ;
47613: LD_ADDR_VAR 0 6
47617: PUSH
47618: EMPTY
47619: ST_TO_ADDR
// for i in list do
47620: LD_ADDR_VAR 0 7
47624: PUSH
47625: LD_VAR 0 3
47629: PUSH
47630: FOR_IN
47631: IFFALSE 47833
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47633: LD_ADDR_VAR 0 9
47637: PUSH
47638: LD_VAR 0 7
47642: PPUSH
47643: LD_VAR 0 1
47647: PPUSH
47648: LD_VAR 0 2
47652: PPUSH
47653: CALL_OW 297
47657: ST_TO_ADDR
// if not result then
47658: LD_VAR 0 6
47662: NOT
47663: IFFALSE 47689
// result := [ [ i , tmp ] ] else
47665: LD_ADDR_VAR 0 6
47669: PUSH
47670: LD_VAR 0 7
47674: PUSH
47675: LD_VAR 0 9
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: ST_TO_ADDR
47687: GO 47831
// begin if result [ result ] [ 2 ] < tmp then
47689: LD_VAR 0 6
47693: PUSH
47694: LD_VAR 0 6
47698: ARRAY
47699: PUSH
47700: LD_INT 2
47702: ARRAY
47703: PUSH
47704: LD_VAR 0 9
47708: LESS
47709: IFFALSE 47751
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47711: LD_ADDR_VAR 0 6
47715: PUSH
47716: LD_VAR 0 6
47720: PPUSH
47721: LD_VAR 0 6
47725: PUSH
47726: LD_INT 1
47728: PLUS
47729: PPUSH
47730: LD_VAR 0 7
47734: PUSH
47735: LD_VAR 0 9
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PPUSH
47744: CALL_OW 2
47748: ST_TO_ADDR
47749: GO 47831
// for j = 1 to result do
47751: LD_ADDR_VAR 0 8
47755: PUSH
47756: DOUBLE
47757: LD_INT 1
47759: DEC
47760: ST_TO_ADDR
47761: LD_VAR 0 6
47765: PUSH
47766: FOR_TO
47767: IFFALSE 47829
// begin if tmp < result [ j ] [ 2 ] then
47769: LD_VAR 0 9
47773: PUSH
47774: LD_VAR 0 6
47778: PUSH
47779: LD_VAR 0 8
47783: ARRAY
47784: PUSH
47785: LD_INT 2
47787: ARRAY
47788: LESS
47789: IFFALSE 47827
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47791: LD_ADDR_VAR 0 6
47795: PUSH
47796: LD_VAR 0 6
47800: PPUSH
47801: LD_VAR 0 8
47805: PPUSH
47806: LD_VAR 0 7
47810: PUSH
47811: LD_VAR 0 9
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PPUSH
47820: CALL_OW 2
47824: ST_TO_ADDR
// break ;
47825: GO 47829
// end ; end ;
47827: GO 47766
47829: POP
47830: POP
// end ; end ;
47831: GO 47630
47833: POP
47834: POP
// if result and not asc then
47835: LD_VAR 0 6
47839: PUSH
47840: LD_VAR 0 4
47844: NOT
47845: AND
47846: IFFALSE 47921
// begin tmp := result ;
47848: LD_ADDR_VAR 0 9
47852: PUSH
47853: LD_VAR 0 6
47857: ST_TO_ADDR
// for i = tmp downto 1 do
47858: LD_ADDR_VAR 0 7
47862: PUSH
47863: DOUBLE
47864: LD_VAR 0 9
47868: INC
47869: ST_TO_ADDR
47870: LD_INT 1
47872: PUSH
47873: FOR_DOWNTO
47874: IFFALSE 47919
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47876: LD_ADDR_VAR 0 6
47880: PUSH
47881: LD_VAR 0 6
47885: PPUSH
47886: LD_VAR 0 9
47890: PUSH
47891: LD_VAR 0 7
47895: MINUS
47896: PUSH
47897: LD_INT 1
47899: PLUS
47900: PPUSH
47901: LD_VAR 0 9
47905: PUSH
47906: LD_VAR 0 7
47910: ARRAY
47911: PPUSH
47912: CALL_OW 1
47916: ST_TO_ADDR
47917: GO 47873
47919: POP
47920: POP
// end ; tmp := [ ] ;
47921: LD_ADDR_VAR 0 9
47925: PUSH
47926: EMPTY
47927: ST_TO_ADDR
// if mode then
47928: LD_VAR 0 5
47932: IFFALSE 48001
// begin for i = 1 to result do
47934: LD_ADDR_VAR 0 7
47938: PUSH
47939: DOUBLE
47940: LD_INT 1
47942: DEC
47943: ST_TO_ADDR
47944: LD_VAR 0 6
47948: PUSH
47949: FOR_TO
47950: IFFALSE 47989
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47952: LD_ADDR_VAR 0 9
47956: PUSH
47957: LD_VAR 0 9
47961: PPUSH
47962: LD_VAR 0 7
47966: PPUSH
47967: LD_VAR 0 6
47971: PUSH
47972: LD_VAR 0 7
47976: ARRAY
47977: PUSH
47978: LD_INT 1
47980: ARRAY
47981: PPUSH
47982: CALL_OW 1
47986: ST_TO_ADDR
47987: GO 47949
47989: POP
47990: POP
// result := tmp ;
47991: LD_ADDR_VAR 0 6
47995: PUSH
47996: LD_VAR 0 9
48000: ST_TO_ADDR
// end ; end ;
48001: LD_VAR 0 6
48005: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48006: LD_INT 0
48008: PPUSH
48009: PPUSH
48010: PPUSH
48011: PPUSH
48012: PPUSH
48013: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48014: LD_ADDR_VAR 0 5
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: ST_TO_ADDR
// if not x or not y then
48036: LD_VAR 0 2
48040: NOT
48041: PUSH
48042: LD_VAR 0 3
48046: NOT
48047: OR
48048: IFFALSE 48052
// exit ;
48050: GO 49702
// if not range then
48052: LD_VAR 0 4
48056: NOT
48057: IFFALSE 48067
// range := 10 ;
48059: LD_ADDR_VAR 0 4
48063: PUSH
48064: LD_INT 10
48066: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48067: LD_ADDR_VAR 0 8
48071: PUSH
48072: LD_INT 81
48074: PUSH
48075: LD_VAR 0 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 92
48086: PUSH
48087: LD_VAR 0 2
48091: PUSH
48092: LD_VAR 0 3
48096: PUSH
48097: LD_VAR 0 4
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 21
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: PPUSH
48130: CALL_OW 69
48134: ST_TO_ADDR
// if not tmp then
48135: LD_VAR 0 8
48139: NOT
48140: IFFALSE 48144
// exit ;
48142: GO 49702
// for i in tmp do
48144: LD_ADDR_VAR 0 6
48148: PUSH
48149: LD_VAR 0 8
48153: PUSH
48154: FOR_IN
48155: IFFALSE 49677
// begin points := [ 0 , 0 , 0 ] ;
48157: LD_ADDR_VAR 0 9
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
// bpoints := 1 ;
48176: LD_ADDR_VAR 0 10
48180: PUSH
48181: LD_INT 1
48183: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48184: LD_VAR 0 6
48188: PPUSH
48189: CALL_OW 247
48193: PUSH
48194: LD_INT 1
48196: DOUBLE
48197: EQUAL
48198: IFTRUE 48202
48200: GO 48780
48202: POP
// begin if GetClass ( i ) = 1 then
48203: LD_VAR 0 6
48207: PPUSH
48208: CALL_OW 257
48212: PUSH
48213: LD_INT 1
48215: EQUAL
48216: IFFALSE 48237
// points := [ 10 , 5 , 3 ] ;
48218: LD_ADDR_VAR 0 9
48222: PUSH
48223: LD_INT 10
48225: PUSH
48226: LD_INT 5
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48237: LD_VAR 0 6
48241: PPUSH
48242: CALL_OW 257
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: LD_INT 4
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: IN
48261: IFFALSE 48282
// points := [ 3 , 2 , 1 ] ;
48263: LD_ADDR_VAR 0 9
48267: PUSH
48268: LD_INT 3
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48282: LD_VAR 0 6
48286: PPUSH
48287: CALL_OW 257
48291: PUSH
48292: LD_INT 5
48294: EQUAL
48295: IFFALSE 48316
// points := [ 130 , 5 , 2 ] ;
48297: LD_ADDR_VAR 0 9
48301: PUSH
48302: LD_INT 130
48304: PUSH
48305: LD_INT 5
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48316: LD_VAR 0 6
48320: PPUSH
48321: CALL_OW 257
48325: PUSH
48326: LD_INT 8
48328: EQUAL
48329: IFFALSE 48350
// points := [ 35 , 35 , 30 ] ;
48331: LD_ADDR_VAR 0 9
48335: PUSH
48336: LD_INT 35
48338: PUSH
48339: LD_INT 35
48341: PUSH
48342: LD_INT 30
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48350: LD_VAR 0 6
48354: PPUSH
48355: CALL_OW 257
48359: PUSH
48360: LD_INT 9
48362: EQUAL
48363: IFFALSE 48384
// points := [ 20 , 55 , 40 ] ;
48365: LD_ADDR_VAR 0 9
48369: PUSH
48370: LD_INT 20
48372: PUSH
48373: LD_INT 55
48375: PUSH
48376: LD_INT 40
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48384: LD_VAR 0 6
48388: PPUSH
48389: CALL_OW 257
48393: PUSH
48394: LD_INT 12
48396: PUSH
48397: LD_INT 16
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: IN
48404: IFFALSE 48425
// points := [ 5 , 3 , 2 ] ;
48406: LD_ADDR_VAR 0 9
48410: PUSH
48411: LD_INT 5
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48425: LD_VAR 0 6
48429: PPUSH
48430: CALL_OW 257
48434: PUSH
48435: LD_INT 17
48437: EQUAL
48438: IFFALSE 48459
// points := [ 100 , 50 , 75 ] ;
48440: LD_ADDR_VAR 0 9
48444: PUSH
48445: LD_INT 100
48447: PUSH
48448: LD_INT 50
48450: PUSH
48451: LD_INT 75
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48459: LD_VAR 0 6
48463: PPUSH
48464: CALL_OW 257
48468: PUSH
48469: LD_INT 15
48471: EQUAL
48472: IFFALSE 48493
// points := [ 10 , 5 , 3 ] ;
48474: LD_ADDR_VAR 0 9
48478: PUSH
48479: LD_INT 10
48481: PUSH
48482: LD_INT 5
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48493: LD_VAR 0 6
48497: PPUSH
48498: CALL_OW 257
48502: PUSH
48503: LD_INT 14
48505: EQUAL
48506: IFFALSE 48527
// points := [ 10 , 0 , 0 ] ;
48508: LD_ADDR_VAR 0 9
48512: PUSH
48513: LD_INT 10
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48527: LD_VAR 0 6
48531: PPUSH
48532: CALL_OW 257
48536: PUSH
48537: LD_INT 11
48539: EQUAL
48540: IFFALSE 48561
// points := [ 30 , 10 , 5 ] ;
48542: LD_ADDR_VAR 0 9
48546: PUSH
48547: LD_INT 30
48549: PUSH
48550: LD_INT 10
48552: PUSH
48553: LD_INT 5
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: LIST
48560: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48561: LD_VAR 0 1
48565: PPUSH
48566: LD_INT 5
48568: PPUSH
48569: CALL_OW 321
48573: PUSH
48574: LD_INT 2
48576: EQUAL
48577: IFFALSE 48594
// bpoints := bpoints * 1.8 ;
48579: LD_ADDR_VAR 0 10
48583: PUSH
48584: LD_VAR 0 10
48588: PUSH
48589: LD_REAL  1.80000000000000E+0000
48592: MUL
48593: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48594: LD_VAR 0 6
48598: PPUSH
48599: CALL_OW 257
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: LD_INT 4
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: IN
48622: PUSH
48623: LD_VAR 0 1
48627: PPUSH
48628: LD_INT 51
48630: PPUSH
48631: CALL_OW 321
48635: PUSH
48636: LD_INT 2
48638: EQUAL
48639: AND
48640: IFFALSE 48657
// bpoints := bpoints * 1.2 ;
48642: LD_ADDR_VAR 0 10
48646: PUSH
48647: LD_VAR 0 10
48651: PUSH
48652: LD_REAL  1.20000000000000E+0000
48655: MUL
48656: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48657: LD_VAR 0 6
48661: PPUSH
48662: CALL_OW 257
48666: PUSH
48667: LD_INT 5
48669: PUSH
48670: LD_INT 7
48672: PUSH
48673: LD_INT 9
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: IN
48681: PUSH
48682: LD_VAR 0 1
48686: PPUSH
48687: LD_INT 52
48689: PPUSH
48690: CALL_OW 321
48694: PUSH
48695: LD_INT 2
48697: EQUAL
48698: AND
48699: IFFALSE 48716
// bpoints := bpoints * 1.5 ;
48701: LD_ADDR_VAR 0 10
48705: PUSH
48706: LD_VAR 0 10
48710: PUSH
48711: LD_REAL  1.50000000000000E+0000
48714: MUL
48715: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48716: LD_VAR 0 1
48720: PPUSH
48721: LD_INT 66
48723: PPUSH
48724: CALL_OW 321
48728: PUSH
48729: LD_INT 2
48731: EQUAL
48732: IFFALSE 48749
// bpoints := bpoints * 1.1 ;
48734: LD_ADDR_VAR 0 10
48738: PUSH
48739: LD_VAR 0 10
48743: PUSH
48744: LD_REAL  1.10000000000000E+0000
48747: MUL
48748: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48749: LD_ADDR_VAR 0 10
48753: PUSH
48754: LD_VAR 0 10
48758: PUSH
48759: LD_VAR 0 6
48763: PPUSH
48764: LD_INT 1
48766: PPUSH
48767: CALL_OW 259
48771: PUSH
48772: LD_REAL  1.15000000000000E+0000
48775: MUL
48776: MUL
48777: ST_TO_ADDR
// end ; unit_vehicle :
48778: GO 49606
48780: LD_INT 2
48782: DOUBLE
48783: EQUAL
48784: IFTRUE 48788
48786: GO 49594
48788: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48789: LD_VAR 0 6
48793: PPUSH
48794: CALL_OW 264
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 42
48804: PUSH
48805: LD_INT 24
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: IN
48813: IFFALSE 48834
// points := [ 25 , 5 , 3 ] ;
48815: LD_ADDR_VAR 0 9
48819: PUSH
48820: LD_INT 25
48822: PUSH
48823: LD_INT 5
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48834: LD_VAR 0 6
48838: PPUSH
48839: CALL_OW 264
48843: PUSH
48844: LD_INT 4
48846: PUSH
48847: LD_INT 43
48849: PUSH
48850: LD_INT 25
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: IN
48858: IFFALSE 48879
// points := [ 40 , 15 , 5 ] ;
48860: LD_ADDR_VAR 0 9
48864: PUSH
48865: LD_INT 40
48867: PUSH
48868: LD_INT 15
48870: PUSH
48871: LD_INT 5
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48879: LD_VAR 0 6
48883: PPUSH
48884: CALL_OW 264
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: LD_INT 23
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: IN
48899: IFFALSE 48920
// points := [ 7 , 25 , 8 ] ;
48901: LD_ADDR_VAR 0 9
48905: PUSH
48906: LD_INT 7
48908: PUSH
48909: LD_INT 25
48911: PUSH
48912: LD_INT 8
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48920: LD_VAR 0 6
48924: PPUSH
48925: CALL_OW 264
48929: PUSH
48930: LD_INT 5
48932: PUSH
48933: LD_INT 27
48935: PUSH
48936: LD_INT 44
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: IN
48944: IFFALSE 48965
// points := [ 14 , 50 , 16 ] ;
48946: LD_ADDR_VAR 0 9
48950: PUSH
48951: LD_INT 14
48953: PUSH
48954: LD_INT 50
48956: PUSH
48957: LD_INT 16
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48965: LD_VAR 0 6
48969: PPUSH
48970: CALL_OW 264
48974: PUSH
48975: LD_INT 6
48977: PUSH
48978: LD_INT 46
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: IN
48985: IFFALSE 49006
// points := [ 32 , 120 , 70 ] ;
48987: LD_ADDR_VAR 0 9
48991: PUSH
48992: LD_INT 32
48994: PUSH
48995: LD_INT 120
48997: PUSH
48998: LD_INT 70
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49006: LD_VAR 0 6
49010: PPUSH
49011: CALL_OW 264
49015: PUSH
49016: LD_INT 7
49018: PUSH
49019: LD_INT 28
49021: PUSH
49022: LD_INT 45
49024: PUSH
49025: LD_INT 92
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: IN
49034: IFFALSE 49055
// points := [ 35 , 20 , 45 ] ;
49036: LD_ADDR_VAR 0 9
49040: PUSH
49041: LD_INT 35
49043: PUSH
49044: LD_INT 20
49046: PUSH
49047: LD_INT 45
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49055: LD_VAR 0 6
49059: PPUSH
49060: CALL_OW 264
49064: PUSH
49065: LD_INT 47
49067: PUSH
49068: EMPTY
49069: LIST
49070: IN
49071: IFFALSE 49092
// points := [ 67 , 45 , 75 ] ;
49073: LD_ADDR_VAR 0 9
49077: PUSH
49078: LD_INT 67
49080: PUSH
49081: LD_INT 45
49083: PUSH
49084: LD_INT 75
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49092: LD_VAR 0 6
49096: PPUSH
49097: CALL_OW 264
49101: PUSH
49102: LD_INT 26
49104: PUSH
49105: EMPTY
49106: LIST
49107: IN
49108: IFFALSE 49129
// points := [ 120 , 30 , 80 ] ;
49110: LD_ADDR_VAR 0 9
49114: PUSH
49115: LD_INT 120
49117: PUSH
49118: LD_INT 30
49120: PUSH
49121: LD_INT 80
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49129: LD_VAR 0 6
49133: PPUSH
49134: CALL_OW 264
49138: PUSH
49139: LD_INT 22
49141: PUSH
49142: EMPTY
49143: LIST
49144: IN
49145: IFFALSE 49166
// points := [ 40 , 1 , 1 ] ;
49147: LD_ADDR_VAR 0 9
49151: PUSH
49152: LD_INT 40
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49166: LD_VAR 0 6
49170: PPUSH
49171: CALL_OW 264
49175: PUSH
49176: LD_INT 29
49178: PUSH
49179: EMPTY
49180: LIST
49181: IN
49182: IFFALSE 49203
// points := [ 70 , 200 , 400 ] ;
49184: LD_ADDR_VAR 0 9
49188: PUSH
49189: LD_INT 70
49191: PUSH
49192: LD_INT 200
49194: PUSH
49195: LD_INT 400
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49203: LD_VAR 0 6
49207: PPUSH
49208: CALL_OW 264
49212: PUSH
49213: LD_INT 14
49215: PUSH
49216: LD_INT 53
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: IN
49223: IFFALSE 49244
// points := [ 40 , 10 , 20 ] ;
49225: LD_ADDR_VAR 0 9
49229: PUSH
49230: LD_INT 40
49232: PUSH
49233: LD_INT 10
49235: PUSH
49236: LD_INT 20
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49244: LD_VAR 0 6
49248: PPUSH
49249: CALL_OW 264
49253: PUSH
49254: LD_INT 9
49256: PUSH
49257: EMPTY
49258: LIST
49259: IN
49260: IFFALSE 49281
// points := [ 5 , 70 , 20 ] ;
49262: LD_ADDR_VAR 0 9
49266: PUSH
49267: LD_INT 5
49269: PUSH
49270: LD_INT 70
49272: PUSH
49273: LD_INT 20
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49281: LD_VAR 0 6
49285: PPUSH
49286: CALL_OW 264
49290: PUSH
49291: LD_INT 10
49293: PUSH
49294: EMPTY
49295: LIST
49296: IN
49297: IFFALSE 49318
// points := [ 35 , 110 , 70 ] ;
49299: LD_ADDR_VAR 0 9
49303: PUSH
49304: LD_INT 35
49306: PUSH
49307: LD_INT 110
49309: PUSH
49310: LD_INT 70
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49318: LD_VAR 0 6
49322: PPUSH
49323: CALL_OW 265
49327: PUSH
49328: LD_INT 25
49330: EQUAL
49331: IFFALSE 49352
// points := [ 80 , 65 , 100 ] ;
49333: LD_ADDR_VAR 0 9
49337: PUSH
49338: LD_INT 80
49340: PUSH
49341: LD_INT 65
49343: PUSH
49344: LD_INT 100
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49352: LD_VAR 0 6
49356: PPUSH
49357: CALL_OW 263
49361: PUSH
49362: LD_INT 1
49364: EQUAL
49365: IFFALSE 49400
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49367: LD_ADDR_VAR 0 10
49371: PUSH
49372: LD_VAR 0 10
49376: PUSH
49377: LD_VAR 0 6
49381: PPUSH
49382: CALL_OW 311
49386: PPUSH
49387: LD_INT 3
49389: PPUSH
49390: CALL_OW 259
49394: PUSH
49395: LD_INT 4
49397: MUL
49398: MUL
49399: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49400: LD_VAR 0 6
49404: PPUSH
49405: CALL_OW 263
49409: PUSH
49410: LD_INT 2
49412: EQUAL
49413: IFFALSE 49464
// begin j := IsControledBy ( i ) ;
49415: LD_ADDR_VAR 0 7
49419: PUSH
49420: LD_VAR 0 6
49424: PPUSH
49425: CALL_OW 312
49429: ST_TO_ADDR
// if j then
49430: LD_VAR 0 7
49434: IFFALSE 49464
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49436: LD_ADDR_VAR 0 10
49440: PUSH
49441: LD_VAR 0 10
49445: PUSH
49446: LD_VAR 0 7
49450: PPUSH
49451: LD_INT 3
49453: PPUSH
49454: CALL_OW 259
49458: PUSH
49459: LD_INT 3
49461: MUL
49462: MUL
49463: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49464: LD_VAR 0 6
49468: PPUSH
49469: CALL_OW 264
49473: PUSH
49474: LD_INT 5
49476: PUSH
49477: LD_INT 6
49479: PUSH
49480: LD_INT 46
49482: PUSH
49483: LD_INT 44
49485: PUSH
49486: LD_INT 47
49488: PUSH
49489: LD_INT 45
49491: PUSH
49492: LD_INT 28
49494: PUSH
49495: LD_INT 7
49497: PUSH
49498: LD_INT 27
49500: PUSH
49501: LD_INT 29
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: IN
49516: PUSH
49517: LD_VAR 0 1
49521: PPUSH
49522: LD_INT 52
49524: PPUSH
49525: CALL_OW 321
49529: PUSH
49530: LD_INT 2
49532: EQUAL
49533: AND
49534: IFFALSE 49551
// bpoints := bpoints * 1.2 ;
49536: LD_ADDR_VAR 0 10
49540: PUSH
49541: LD_VAR 0 10
49545: PUSH
49546: LD_REAL  1.20000000000000E+0000
49549: MUL
49550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49551: LD_VAR 0 6
49555: PPUSH
49556: CALL_OW 264
49560: PUSH
49561: LD_INT 6
49563: PUSH
49564: LD_INT 46
49566: PUSH
49567: LD_INT 47
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: IN
49575: IFFALSE 49592
// bpoints := bpoints * 1.2 ;
49577: LD_ADDR_VAR 0 10
49581: PUSH
49582: LD_VAR 0 10
49586: PUSH
49587: LD_REAL  1.20000000000000E+0000
49590: MUL
49591: ST_TO_ADDR
// end ; unit_building :
49592: GO 49606
49594: LD_INT 3
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49602
49600: GO 49605
49602: POP
// ; end ;
49603: GO 49606
49605: POP
// for j = 1 to 3 do
49606: LD_ADDR_VAR 0 7
49610: PUSH
49611: DOUBLE
49612: LD_INT 1
49614: DEC
49615: ST_TO_ADDR
49616: LD_INT 3
49618: PUSH
49619: FOR_TO
49620: IFFALSE 49673
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49622: LD_ADDR_VAR 0 5
49626: PUSH
49627: LD_VAR 0 5
49631: PPUSH
49632: LD_VAR 0 7
49636: PPUSH
49637: LD_VAR 0 5
49641: PUSH
49642: LD_VAR 0 7
49646: ARRAY
49647: PUSH
49648: LD_VAR 0 9
49652: PUSH
49653: LD_VAR 0 7
49657: ARRAY
49658: PUSH
49659: LD_VAR 0 10
49663: MUL
49664: PLUS
49665: PPUSH
49666: CALL_OW 1
49670: ST_TO_ADDR
49671: GO 49619
49673: POP
49674: POP
// end ;
49675: GO 48154
49677: POP
49678: POP
// result := Replace ( result , 4 , tmp ) ;
49679: LD_ADDR_VAR 0 5
49683: PUSH
49684: LD_VAR 0 5
49688: PPUSH
49689: LD_INT 4
49691: PPUSH
49692: LD_VAR 0 8
49696: PPUSH
49697: CALL_OW 1
49701: ST_TO_ADDR
// end ;
49702: LD_VAR 0 5
49706: RET
// export function DangerAtRange ( unit , range ) ; begin
49707: LD_INT 0
49709: PPUSH
// if not unit then
49710: LD_VAR 0 1
49714: NOT
49715: IFFALSE 49719
// exit ;
49717: GO 49764
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49719: LD_ADDR_VAR 0 3
49723: PUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 255
49733: PPUSH
49734: LD_VAR 0 1
49738: PPUSH
49739: CALL_OW 250
49743: PPUSH
49744: LD_VAR 0 1
49748: PPUSH
49749: CALL_OW 251
49753: PPUSH
49754: LD_VAR 0 2
49758: PPUSH
49759: CALL 48006 0 4
49763: ST_TO_ADDR
// end ;
49764: LD_VAR 0 3
49768: RET
// export function DangerInArea ( side , area ) ; begin
49769: LD_INT 0
49771: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49772: LD_ADDR_VAR 0 3
49776: PUSH
49777: LD_VAR 0 2
49781: PPUSH
49782: LD_INT 81
49784: PUSH
49785: LD_VAR 0 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PPUSH
49794: CALL_OW 70
49798: ST_TO_ADDR
// end ;
49799: LD_VAR 0 3
49803: RET
// export function IsExtension ( b ) ; begin
49804: LD_INT 0
49806: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49807: LD_ADDR_VAR 0 2
49811: PUSH
49812: LD_VAR 0 1
49816: PUSH
49817: LD_INT 23
49819: PUSH
49820: LD_INT 20
49822: PUSH
49823: LD_INT 22
49825: PUSH
49826: LD_INT 17
49828: PUSH
49829: LD_INT 24
49831: PUSH
49832: LD_INT 21
49834: PUSH
49835: LD_INT 19
49837: PUSH
49838: LD_INT 16
49840: PUSH
49841: LD_INT 25
49843: PUSH
49844: LD_INT 18
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: IN
49859: ST_TO_ADDR
// end ;
49860: LD_VAR 0 2
49864: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49865: LD_INT 0
49867: PPUSH
49868: PPUSH
49869: PPUSH
// result := [ ] ;
49870: LD_ADDR_VAR 0 4
49874: PUSH
49875: EMPTY
49876: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49877: LD_ADDR_VAR 0 5
49881: PUSH
49882: LD_VAR 0 2
49886: PPUSH
49887: LD_INT 21
49889: PUSH
49890: LD_INT 3
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PPUSH
49897: CALL_OW 70
49901: ST_TO_ADDR
// if not tmp then
49902: LD_VAR 0 5
49906: NOT
49907: IFFALSE 49911
// exit ;
49909: GO 49975
// if checkLink then
49911: LD_VAR 0 3
49915: IFFALSE 49965
// begin for i in tmp do
49917: LD_ADDR_VAR 0 6
49921: PUSH
49922: LD_VAR 0 5
49926: PUSH
49927: FOR_IN
49928: IFFALSE 49963
// if GetBase ( i ) <> base then
49930: LD_VAR 0 6
49934: PPUSH
49935: CALL_OW 274
49939: PUSH
49940: LD_VAR 0 1
49944: NONEQUAL
49945: IFFALSE 49961
// ComLinkToBase ( base , i ) ;
49947: LD_VAR 0 1
49951: PPUSH
49952: LD_VAR 0 6
49956: PPUSH
49957: CALL_OW 169
49961: GO 49927
49963: POP
49964: POP
// end ; result := tmp ;
49965: LD_ADDR_VAR 0 4
49969: PUSH
49970: LD_VAR 0 5
49974: ST_TO_ADDR
// end ;
49975: LD_VAR 0 4
49979: RET
// export function ComComplete ( units , b ) ; var i ; begin
49980: LD_INT 0
49982: PPUSH
49983: PPUSH
// if not units then
49984: LD_VAR 0 1
49988: NOT
49989: IFFALSE 49993
// exit ;
49991: GO 50083
// for i in units do
49993: LD_ADDR_VAR 0 4
49997: PUSH
49998: LD_VAR 0 1
50002: PUSH
50003: FOR_IN
50004: IFFALSE 50081
// if BuildingStatus ( b ) = bs_build then
50006: LD_VAR 0 2
50010: PPUSH
50011: CALL_OW 461
50015: PUSH
50016: LD_INT 1
50018: EQUAL
50019: IFFALSE 50079
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50021: LD_VAR 0 4
50025: PPUSH
50026: LD_STRING h
50028: PUSH
50029: LD_VAR 0 2
50033: PPUSH
50034: CALL_OW 250
50038: PUSH
50039: LD_VAR 0 2
50043: PPUSH
50044: CALL_OW 251
50048: PUSH
50049: LD_VAR 0 2
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: PPUSH
50075: CALL_OW 446
50079: GO 50003
50081: POP
50082: POP
// end ;
50083: LD_VAR 0 3
50087: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50088: LD_INT 0
50090: PPUSH
50091: PPUSH
50092: PPUSH
50093: PPUSH
50094: PPUSH
50095: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50096: LD_VAR 0 1
50100: NOT
50101: PUSH
50102: LD_VAR 0 1
50106: PPUSH
50107: CALL_OW 263
50111: PUSH
50112: LD_INT 2
50114: NONEQUAL
50115: OR
50116: IFFALSE 50120
// exit ;
50118: GO 50436
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50120: LD_ADDR_VAR 0 6
50124: PUSH
50125: LD_INT 22
50127: PUSH
50128: LD_VAR 0 1
50132: PPUSH
50133: CALL_OW 255
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: LD_INT 30
50147: PUSH
50148: LD_INT 36
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 34
50157: PUSH
50158: LD_INT 31
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PPUSH
50174: CALL_OW 69
50178: ST_TO_ADDR
// if not tmp then
50179: LD_VAR 0 6
50183: NOT
50184: IFFALSE 50188
// exit ;
50186: GO 50436
// result := [ ] ;
50188: LD_ADDR_VAR 0 2
50192: PUSH
50193: EMPTY
50194: ST_TO_ADDR
// for i in tmp do
50195: LD_ADDR_VAR 0 3
50199: PUSH
50200: LD_VAR 0 6
50204: PUSH
50205: FOR_IN
50206: IFFALSE 50277
// begin t := UnitsInside ( i ) ;
50208: LD_ADDR_VAR 0 4
50212: PUSH
50213: LD_VAR 0 3
50217: PPUSH
50218: CALL_OW 313
50222: ST_TO_ADDR
// if t then
50223: LD_VAR 0 4
50227: IFFALSE 50275
// for j in t do
50229: LD_ADDR_VAR 0 7
50233: PUSH
50234: LD_VAR 0 4
50238: PUSH
50239: FOR_IN
50240: IFFALSE 50273
// result := Replace ( result , result + 1 , j ) ;
50242: LD_ADDR_VAR 0 2
50246: PUSH
50247: LD_VAR 0 2
50251: PPUSH
50252: LD_VAR 0 2
50256: PUSH
50257: LD_INT 1
50259: PLUS
50260: PPUSH
50261: LD_VAR 0 7
50265: PPUSH
50266: CALL_OW 1
50270: ST_TO_ADDR
50271: GO 50239
50273: POP
50274: POP
// end ;
50275: GO 50205
50277: POP
50278: POP
// if not result then
50279: LD_VAR 0 2
50283: NOT
50284: IFFALSE 50288
// exit ;
50286: GO 50436
// mech := result [ 1 ] ;
50288: LD_ADDR_VAR 0 5
50292: PUSH
50293: LD_VAR 0 2
50297: PUSH
50298: LD_INT 1
50300: ARRAY
50301: ST_TO_ADDR
// if result > 1 then
50302: LD_VAR 0 2
50306: PUSH
50307: LD_INT 1
50309: GREATER
50310: IFFALSE 50422
// begin for i = 2 to result do
50312: LD_ADDR_VAR 0 3
50316: PUSH
50317: DOUBLE
50318: LD_INT 2
50320: DEC
50321: ST_TO_ADDR
50322: LD_VAR 0 2
50326: PUSH
50327: FOR_TO
50328: IFFALSE 50420
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50330: LD_ADDR_VAR 0 4
50334: PUSH
50335: LD_VAR 0 2
50339: PUSH
50340: LD_VAR 0 3
50344: ARRAY
50345: PPUSH
50346: LD_INT 3
50348: PPUSH
50349: CALL_OW 259
50353: PUSH
50354: LD_VAR 0 2
50358: PUSH
50359: LD_VAR 0 3
50363: ARRAY
50364: PPUSH
50365: CALL_OW 432
50369: MINUS
50370: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50371: LD_VAR 0 4
50375: PUSH
50376: LD_VAR 0 5
50380: PPUSH
50381: LD_INT 3
50383: PPUSH
50384: CALL_OW 259
50388: PUSH
50389: LD_VAR 0 5
50393: PPUSH
50394: CALL_OW 432
50398: MINUS
50399: GREATEREQUAL
50400: IFFALSE 50418
// mech := result [ i ] ;
50402: LD_ADDR_VAR 0 5
50406: PUSH
50407: LD_VAR 0 2
50411: PUSH
50412: LD_VAR 0 3
50416: ARRAY
50417: ST_TO_ADDR
// end ;
50418: GO 50327
50420: POP
50421: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50422: LD_VAR 0 1
50426: PPUSH
50427: LD_VAR 0 5
50431: PPUSH
50432: CALL_OW 135
// end ;
50436: LD_VAR 0 2
50440: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50441: LD_INT 0
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
// result := [ ] ;
50456: LD_ADDR_VAR 0 7
50460: PUSH
50461: EMPTY
50462: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50463: LD_VAR 0 1
50467: PPUSH
50468: CALL_OW 266
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: IN
50483: NOT
50484: IFFALSE 50488
// exit ;
50486: GO 52122
// if name then
50488: LD_VAR 0 3
50492: IFFALSE 50508
// SetBName ( base_dep , name ) ;
50494: LD_VAR 0 1
50498: PPUSH
50499: LD_VAR 0 3
50503: PPUSH
50504: CALL_OW 500
// base := GetBase ( base_dep ) ;
50508: LD_ADDR_VAR 0 15
50512: PUSH
50513: LD_VAR 0 1
50517: PPUSH
50518: CALL_OW 274
50522: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50523: LD_ADDR_VAR 0 16
50527: PUSH
50528: LD_VAR 0 1
50532: PPUSH
50533: CALL_OW 255
50537: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50538: LD_ADDR_VAR 0 17
50542: PUSH
50543: LD_VAR 0 1
50547: PPUSH
50548: CALL_OW 248
50552: ST_TO_ADDR
// if sources then
50553: LD_VAR 0 5
50557: IFFALSE 50604
// for i = 1 to 3 do
50559: LD_ADDR_VAR 0 8
50563: PUSH
50564: DOUBLE
50565: LD_INT 1
50567: DEC
50568: ST_TO_ADDR
50569: LD_INT 3
50571: PUSH
50572: FOR_TO
50573: IFFALSE 50602
// AddResourceType ( base , i , sources [ i ] ) ;
50575: LD_VAR 0 15
50579: PPUSH
50580: LD_VAR 0 8
50584: PPUSH
50585: LD_VAR 0 5
50589: PUSH
50590: LD_VAR 0 8
50594: ARRAY
50595: PPUSH
50596: CALL_OW 276
50600: GO 50572
50602: POP
50603: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50604: LD_ADDR_VAR 0 18
50608: PUSH
50609: LD_VAR 0 15
50613: PPUSH
50614: LD_VAR 0 2
50618: PPUSH
50619: LD_INT 1
50621: PPUSH
50622: CALL 49865 0 3
50626: ST_TO_ADDR
// InitHc ;
50627: CALL_OW 19
// InitUc ;
50631: CALL_OW 18
// uc_side := side ;
50635: LD_ADDR_OWVAR 20
50639: PUSH
50640: LD_VAR 0 16
50644: ST_TO_ADDR
// uc_nation := nation ;
50645: LD_ADDR_OWVAR 21
50649: PUSH
50650: LD_VAR 0 17
50654: ST_TO_ADDR
// if buildings then
50655: LD_VAR 0 18
50659: IFFALSE 51981
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50661: LD_ADDR_VAR 0 19
50665: PUSH
50666: LD_VAR 0 18
50670: PPUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 30
50676: PUSH
50677: LD_INT 29
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 30
50686: PUSH
50687: LD_INT 30
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: PPUSH
50699: CALL_OW 72
50703: ST_TO_ADDR
// if tmp then
50704: LD_VAR 0 19
50708: IFFALSE 50756
// for i in tmp do
50710: LD_ADDR_VAR 0 8
50714: PUSH
50715: LD_VAR 0 19
50719: PUSH
50720: FOR_IN
50721: IFFALSE 50754
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50723: LD_VAR 0 8
50727: PPUSH
50728: CALL_OW 250
50732: PPUSH
50733: LD_VAR 0 8
50737: PPUSH
50738: CALL_OW 251
50742: PPUSH
50743: LD_VAR 0 16
50747: PPUSH
50748: CALL_OW 441
50752: GO 50720
50754: POP
50755: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50756: LD_VAR 0 18
50760: PPUSH
50761: LD_INT 2
50763: PUSH
50764: LD_INT 30
50766: PUSH
50767: LD_INT 32
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 30
50776: PUSH
50777: LD_INT 33
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: PPUSH
50789: CALL_OW 72
50793: IFFALSE 50881
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50795: LD_ADDR_VAR 0 8
50799: PUSH
50800: LD_VAR 0 18
50804: PPUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 30
50810: PUSH
50811: LD_INT 32
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 30
50820: PUSH
50821: LD_INT 33
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: PPUSH
50833: CALL_OW 72
50837: PUSH
50838: FOR_IN
50839: IFFALSE 50879
// begin if not GetBWeapon ( i ) then
50841: LD_VAR 0 8
50845: PPUSH
50846: CALL_OW 269
50850: NOT
50851: IFFALSE 50877
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50853: LD_VAR 0 8
50857: PPUSH
50858: LD_VAR 0 8
50862: PPUSH
50863: LD_VAR 0 2
50867: PPUSH
50868: CALL 52127 0 2
50872: PPUSH
50873: CALL_OW 431
// end ;
50877: GO 50838
50879: POP
50880: POP
// end ; for i = 1 to personel do
50881: LD_ADDR_VAR 0 8
50885: PUSH
50886: DOUBLE
50887: LD_INT 1
50889: DEC
50890: ST_TO_ADDR
50891: LD_VAR 0 6
50895: PUSH
50896: FOR_TO
50897: IFFALSE 51961
// begin if i > 4 then
50899: LD_VAR 0 8
50903: PUSH
50904: LD_INT 4
50906: GREATER
50907: IFFALSE 50911
// break ;
50909: GO 51961
// case i of 1 :
50911: LD_VAR 0 8
50915: PUSH
50916: LD_INT 1
50918: DOUBLE
50919: EQUAL
50920: IFTRUE 50924
50922: GO 51004
50924: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50925: LD_ADDR_VAR 0 12
50929: PUSH
50930: LD_VAR 0 18
50934: PPUSH
50935: LD_INT 22
50937: PUSH
50938: LD_VAR 0 16
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 58
50949: PUSH
50950: EMPTY
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 30
50958: PUSH
50959: LD_INT 32
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 30
50968: PUSH
50969: LD_INT 4
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 30
50978: PUSH
50979: LD_INT 5
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: LIST
50996: PPUSH
50997: CALL_OW 72
51001: ST_TO_ADDR
51002: GO 51226
51004: LD_INT 2
51006: DOUBLE
51007: EQUAL
51008: IFTRUE 51012
51010: GO 51074
51012: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51013: LD_ADDR_VAR 0 12
51017: PUSH
51018: LD_VAR 0 18
51022: PPUSH
51023: LD_INT 22
51025: PUSH
51026: LD_VAR 0 16
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 30
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 30
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PPUSH
51067: CALL_OW 72
51071: ST_TO_ADDR
51072: GO 51226
51074: LD_INT 3
51076: DOUBLE
51077: EQUAL
51078: IFTRUE 51082
51080: GO 51144
51082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51083: LD_ADDR_VAR 0 12
51087: PUSH
51088: LD_VAR 0 18
51092: PPUSH
51093: LD_INT 22
51095: PUSH
51096: LD_VAR 0 16
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 30
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 30
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PPUSH
51137: CALL_OW 72
51141: ST_TO_ADDR
51142: GO 51226
51144: LD_INT 4
51146: DOUBLE
51147: EQUAL
51148: IFTRUE 51152
51150: GO 51225
51152: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51153: LD_ADDR_VAR 0 12
51157: PUSH
51158: LD_VAR 0 18
51162: PPUSH
51163: LD_INT 22
51165: PUSH
51166: LD_VAR 0 16
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 30
51180: PUSH
51181: LD_INT 6
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 30
51190: PUSH
51191: LD_INT 7
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 30
51200: PUSH
51201: LD_INT 8
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PPUSH
51218: CALL_OW 72
51222: ST_TO_ADDR
51223: GO 51226
51225: POP
// if i = 1 then
51226: LD_VAR 0 8
51230: PUSH
51231: LD_INT 1
51233: EQUAL
51234: IFFALSE 51345
// begin tmp := [ ] ;
51236: LD_ADDR_VAR 0 19
51240: PUSH
51241: EMPTY
51242: ST_TO_ADDR
// for j in f do
51243: LD_ADDR_VAR 0 9
51247: PUSH
51248: LD_VAR 0 12
51252: PUSH
51253: FOR_IN
51254: IFFALSE 51327
// if GetBType ( j ) = b_bunker then
51256: LD_VAR 0 9
51260: PPUSH
51261: CALL_OW 266
51265: PUSH
51266: LD_INT 32
51268: EQUAL
51269: IFFALSE 51296
// tmp := Insert ( tmp , 1 , j ) else
51271: LD_ADDR_VAR 0 19
51275: PUSH
51276: LD_VAR 0 19
51280: PPUSH
51281: LD_INT 1
51283: PPUSH
51284: LD_VAR 0 9
51288: PPUSH
51289: CALL_OW 2
51293: ST_TO_ADDR
51294: GO 51325
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51296: LD_ADDR_VAR 0 19
51300: PUSH
51301: LD_VAR 0 19
51305: PPUSH
51306: LD_VAR 0 19
51310: PUSH
51311: LD_INT 1
51313: PLUS
51314: PPUSH
51315: LD_VAR 0 9
51319: PPUSH
51320: CALL_OW 2
51324: ST_TO_ADDR
51325: GO 51253
51327: POP
51328: POP
// if tmp then
51329: LD_VAR 0 19
51333: IFFALSE 51345
// f := tmp ;
51335: LD_ADDR_VAR 0 12
51339: PUSH
51340: LD_VAR 0 19
51344: ST_TO_ADDR
// end ; x := personel [ i ] ;
51345: LD_ADDR_VAR 0 13
51349: PUSH
51350: LD_VAR 0 6
51354: PUSH
51355: LD_VAR 0 8
51359: ARRAY
51360: ST_TO_ADDR
// if x = - 1 then
51361: LD_VAR 0 13
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: EQUAL
51370: IFFALSE 51579
// begin for j in f do
51372: LD_ADDR_VAR 0 9
51376: PUSH
51377: LD_VAR 0 12
51381: PUSH
51382: FOR_IN
51383: IFFALSE 51575
// repeat InitHc ;
51385: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51389: LD_VAR 0 9
51393: PPUSH
51394: CALL_OW 266
51398: PUSH
51399: LD_INT 5
51401: EQUAL
51402: IFFALSE 51472
// begin if UnitsInside ( j ) < 3 then
51404: LD_VAR 0 9
51408: PPUSH
51409: CALL_OW 313
51413: PUSH
51414: LD_INT 3
51416: LESS
51417: IFFALSE 51453
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51419: LD_INT 0
51421: PPUSH
51422: LD_INT 5
51424: PUSH
51425: LD_INT 8
51427: PUSH
51428: LD_INT 9
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: PUSH
51436: LD_VAR 0 17
51440: ARRAY
51441: PPUSH
51442: LD_VAR 0 4
51446: PPUSH
51447: CALL_OW 380
51451: GO 51470
// PrepareHuman ( false , i , skill ) ;
51453: LD_INT 0
51455: PPUSH
51456: LD_VAR 0 8
51460: PPUSH
51461: LD_VAR 0 4
51465: PPUSH
51466: CALL_OW 380
// end else
51470: GO 51489
// PrepareHuman ( false , i , skill ) ;
51472: LD_INT 0
51474: PPUSH
51475: LD_VAR 0 8
51479: PPUSH
51480: LD_VAR 0 4
51484: PPUSH
51485: CALL_OW 380
// un := CreateHuman ;
51489: LD_ADDR_VAR 0 14
51493: PUSH
51494: CALL_OW 44
51498: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51499: LD_ADDR_VAR 0 7
51503: PUSH
51504: LD_VAR 0 7
51508: PPUSH
51509: LD_INT 1
51511: PPUSH
51512: LD_VAR 0 14
51516: PPUSH
51517: CALL_OW 2
51521: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51522: LD_VAR 0 14
51526: PPUSH
51527: LD_VAR 0 9
51531: PPUSH
51532: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51536: LD_VAR 0 9
51540: PPUSH
51541: CALL_OW 313
51545: PUSH
51546: LD_INT 6
51548: EQUAL
51549: PUSH
51550: LD_VAR 0 9
51554: PPUSH
51555: CALL_OW 266
51559: PUSH
51560: LD_INT 32
51562: PUSH
51563: LD_INT 31
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: IN
51570: OR
51571: IFFALSE 51385
51573: GO 51382
51575: POP
51576: POP
// end else
51577: GO 51959
// for j = 1 to x do
51579: LD_ADDR_VAR 0 9
51583: PUSH
51584: DOUBLE
51585: LD_INT 1
51587: DEC
51588: ST_TO_ADDR
51589: LD_VAR 0 13
51593: PUSH
51594: FOR_TO
51595: IFFALSE 51957
// begin InitHc ;
51597: CALL_OW 19
// if not f then
51601: LD_VAR 0 12
51605: NOT
51606: IFFALSE 51695
// begin PrepareHuman ( false , i , skill ) ;
51608: LD_INT 0
51610: PPUSH
51611: LD_VAR 0 8
51615: PPUSH
51616: LD_VAR 0 4
51620: PPUSH
51621: CALL_OW 380
// un := CreateHuman ;
51625: LD_ADDR_VAR 0 14
51629: PUSH
51630: CALL_OW 44
51634: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51635: LD_ADDR_VAR 0 7
51639: PUSH
51640: LD_VAR 0 7
51644: PPUSH
51645: LD_INT 1
51647: PPUSH
51648: LD_VAR 0 14
51652: PPUSH
51653: CALL_OW 2
51657: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51658: LD_VAR 0 14
51662: PPUSH
51663: LD_VAR 0 1
51667: PPUSH
51668: CALL_OW 250
51672: PPUSH
51673: LD_VAR 0 1
51677: PPUSH
51678: CALL_OW 251
51682: PPUSH
51683: LD_INT 10
51685: PPUSH
51686: LD_INT 0
51688: PPUSH
51689: CALL_OW 50
// continue ;
51693: GO 51594
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51695: LD_VAR 0 12
51699: PUSH
51700: LD_INT 1
51702: ARRAY
51703: PPUSH
51704: CALL_OW 313
51708: PUSH
51709: LD_VAR 0 12
51713: PUSH
51714: LD_INT 1
51716: ARRAY
51717: PPUSH
51718: CALL_OW 266
51722: PUSH
51723: LD_INT 32
51725: PUSH
51726: LD_INT 31
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: IN
51733: AND
51734: PUSH
51735: LD_VAR 0 12
51739: PUSH
51740: LD_INT 1
51742: ARRAY
51743: PPUSH
51744: CALL_OW 313
51748: PUSH
51749: LD_INT 6
51751: EQUAL
51752: OR
51753: IFFALSE 51773
// f := Delete ( f , 1 ) ;
51755: LD_ADDR_VAR 0 12
51759: PUSH
51760: LD_VAR 0 12
51764: PPUSH
51765: LD_INT 1
51767: PPUSH
51768: CALL_OW 3
51772: ST_TO_ADDR
// if not f then
51773: LD_VAR 0 12
51777: NOT
51778: IFFALSE 51796
// begin x := x + 2 ;
51780: LD_ADDR_VAR 0 13
51784: PUSH
51785: LD_VAR 0 13
51789: PUSH
51790: LD_INT 2
51792: PLUS
51793: ST_TO_ADDR
// continue ;
51794: GO 51594
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51796: LD_VAR 0 12
51800: PUSH
51801: LD_INT 1
51803: ARRAY
51804: PPUSH
51805: CALL_OW 266
51809: PUSH
51810: LD_INT 5
51812: EQUAL
51813: IFFALSE 51887
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51815: LD_VAR 0 12
51819: PUSH
51820: LD_INT 1
51822: ARRAY
51823: PPUSH
51824: CALL_OW 313
51828: PUSH
51829: LD_INT 3
51831: LESS
51832: IFFALSE 51868
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51834: LD_INT 0
51836: PPUSH
51837: LD_INT 5
51839: PUSH
51840: LD_INT 8
51842: PUSH
51843: LD_INT 9
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: PUSH
51851: LD_VAR 0 17
51855: ARRAY
51856: PPUSH
51857: LD_VAR 0 4
51861: PPUSH
51862: CALL_OW 380
51866: GO 51885
// PrepareHuman ( false , i , skill ) ;
51868: LD_INT 0
51870: PPUSH
51871: LD_VAR 0 8
51875: PPUSH
51876: LD_VAR 0 4
51880: PPUSH
51881: CALL_OW 380
// end else
51885: GO 51904
// PrepareHuman ( false , i , skill ) ;
51887: LD_INT 0
51889: PPUSH
51890: LD_VAR 0 8
51894: PPUSH
51895: LD_VAR 0 4
51899: PPUSH
51900: CALL_OW 380
// un := CreateHuman ;
51904: LD_ADDR_VAR 0 14
51908: PUSH
51909: CALL_OW 44
51913: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51914: LD_ADDR_VAR 0 7
51918: PUSH
51919: LD_VAR 0 7
51923: PPUSH
51924: LD_INT 1
51926: PPUSH
51927: LD_VAR 0 14
51931: PPUSH
51932: CALL_OW 2
51936: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51937: LD_VAR 0 14
51941: PPUSH
51942: LD_VAR 0 12
51946: PUSH
51947: LD_INT 1
51949: ARRAY
51950: PPUSH
51951: CALL_OW 52
// end ;
51955: GO 51594
51957: POP
51958: POP
// end ;
51959: GO 50896
51961: POP
51962: POP
// result := result ^ buildings ;
51963: LD_ADDR_VAR 0 7
51967: PUSH
51968: LD_VAR 0 7
51972: PUSH
51973: LD_VAR 0 18
51977: ADD
51978: ST_TO_ADDR
// end else
51979: GO 52122
// begin for i = 1 to personel do
51981: LD_ADDR_VAR 0 8
51985: PUSH
51986: DOUBLE
51987: LD_INT 1
51989: DEC
51990: ST_TO_ADDR
51991: LD_VAR 0 6
51995: PUSH
51996: FOR_TO
51997: IFFALSE 52120
// begin if i > 4 then
51999: LD_VAR 0 8
52003: PUSH
52004: LD_INT 4
52006: GREATER
52007: IFFALSE 52011
// break ;
52009: GO 52120
// x := personel [ i ] ;
52011: LD_ADDR_VAR 0 13
52015: PUSH
52016: LD_VAR 0 6
52020: PUSH
52021: LD_VAR 0 8
52025: ARRAY
52026: ST_TO_ADDR
// if x = - 1 then
52027: LD_VAR 0 13
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: EQUAL
52036: IFFALSE 52040
// continue ;
52038: GO 51996
// PrepareHuman ( false , i , skill ) ;
52040: LD_INT 0
52042: PPUSH
52043: LD_VAR 0 8
52047: PPUSH
52048: LD_VAR 0 4
52052: PPUSH
52053: CALL_OW 380
// un := CreateHuman ;
52057: LD_ADDR_VAR 0 14
52061: PUSH
52062: CALL_OW 44
52066: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52067: LD_VAR 0 14
52071: PPUSH
52072: LD_VAR 0 1
52076: PPUSH
52077: CALL_OW 250
52081: PPUSH
52082: LD_VAR 0 1
52086: PPUSH
52087: CALL_OW 251
52091: PPUSH
52092: LD_INT 10
52094: PPUSH
52095: LD_INT 0
52097: PPUSH
52098: CALL_OW 50
// result := result ^ un ;
52102: LD_ADDR_VAR 0 7
52106: PUSH
52107: LD_VAR 0 7
52111: PUSH
52112: LD_VAR 0 14
52116: ADD
52117: ST_TO_ADDR
// end ;
52118: GO 51996
52120: POP
52121: POP
// end ; end ;
52122: LD_VAR 0 7
52126: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52127: LD_INT 0
52129: PPUSH
52130: PPUSH
52131: PPUSH
52132: PPUSH
52133: PPUSH
52134: PPUSH
52135: PPUSH
52136: PPUSH
52137: PPUSH
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
52143: PPUSH
52144: PPUSH
// result := false ;
52145: LD_ADDR_VAR 0 3
52149: PUSH
52150: LD_INT 0
52152: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52153: LD_VAR 0 1
52157: NOT
52158: PUSH
52159: LD_VAR 0 1
52163: PPUSH
52164: CALL_OW 266
52168: PUSH
52169: LD_INT 32
52171: PUSH
52172: LD_INT 33
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: IN
52179: NOT
52180: OR
52181: IFFALSE 52185
// exit ;
52183: GO 53294
// nat := GetNation ( tower ) ;
52185: LD_ADDR_VAR 0 12
52189: PUSH
52190: LD_VAR 0 1
52194: PPUSH
52195: CALL_OW 248
52199: ST_TO_ADDR
// side := GetSide ( tower ) ;
52200: LD_ADDR_VAR 0 16
52204: PUSH
52205: LD_VAR 0 1
52209: PPUSH
52210: CALL_OW 255
52214: ST_TO_ADDR
// x := GetX ( tower ) ;
52215: LD_ADDR_VAR 0 10
52219: PUSH
52220: LD_VAR 0 1
52224: PPUSH
52225: CALL_OW 250
52229: ST_TO_ADDR
// y := GetY ( tower ) ;
52230: LD_ADDR_VAR 0 11
52234: PUSH
52235: LD_VAR 0 1
52239: PPUSH
52240: CALL_OW 251
52244: ST_TO_ADDR
// if not x or not y then
52245: LD_VAR 0 10
52249: NOT
52250: PUSH
52251: LD_VAR 0 11
52255: NOT
52256: OR
52257: IFFALSE 52261
// exit ;
52259: GO 53294
// weapon := 0 ;
52261: LD_ADDR_VAR 0 18
52265: PUSH
52266: LD_INT 0
52268: ST_TO_ADDR
// fac_list := [ ] ;
52269: LD_ADDR_VAR 0 17
52273: PUSH
52274: EMPTY
52275: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52276: LD_ADDR_VAR 0 6
52280: PUSH
52281: LD_VAR 0 1
52285: PPUSH
52286: CALL_OW 274
52290: PPUSH
52291: LD_VAR 0 2
52295: PPUSH
52296: LD_INT 0
52298: PPUSH
52299: CALL 49865 0 3
52303: PPUSH
52304: LD_INT 30
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PPUSH
52314: CALL_OW 72
52318: ST_TO_ADDR
// if not factories then
52319: LD_VAR 0 6
52323: NOT
52324: IFFALSE 52328
// exit ;
52326: GO 53294
// for i in factories do
52328: LD_ADDR_VAR 0 8
52332: PUSH
52333: LD_VAR 0 6
52337: PUSH
52338: FOR_IN
52339: IFFALSE 52364
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52341: LD_ADDR_VAR 0 17
52345: PUSH
52346: LD_VAR 0 17
52350: PUSH
52351: LD_VAR 0 8
52355: PPUSH
52356: CALL_OW 478
52360: UNION
52361: ST_TO_ADDR
52362: GO 52338
52364: POP
52365: POP
// if not fac_list then
52366: LD_VAR 0 17
52370: NOT
52371: IFFALSE 52375
// exit ;
52373: GO 53294
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52375: LD_ADDR_VAR 0 5
52379: PUSH
52380: LD_INT 4
52382: PUSH
52383: LD_INT 5
52385: PUSH
52386: LD_INT 9
52388: PUSH
52389: LD_INT 10
52391: PUSH
52392: LD_INT 6
52394: PUSH
52395: LD_INT 7
52397: PUSH
52398: LD_INT 11
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 27
52412: PUSH
52413: LD_INT 28
52415: PUSH
52416: LD_INT 26
52418: PUSH
52419: LD_INT 30
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 43
52430: PUSH
52431: LD_INT 44
52433: PUSH
52434: LD_INT 46
52436: PUSH
52437: LD_INT 45
52439: PUSH
52440: LD_INT 47
52442: PUSH
52443: LD_INT 49
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: PUSH
52459: LD_VAR 0 12
52463: ARRAY
52464: ST_TO_ADDR
// list := list isect fac_list ;
52465: LD_ADDR_VAR 0 5
52469: PUSH
52470: LD_VAR 0 5
52474: PUSH
52475: LD_VAR 0 17
52479: ISECT
52480: ST_TO_ADDR
// if not list then
52481: LD_VAR 0 5
52485: NOT
52486: IFFALSE 52490
// exit ;
52488: GO 53294
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52490: LD_VAR 0 12
52494: PUSH
52495: LD_INT 3
52497: EQUAL
52498: PUSH
52499: LD_INT 49
52501: PUSH
52502: LD_VAR 0 5
52506: IN
52507: AND
52508: PUSH
52509: LD_INT 31
52511: PPUSH
52512: LD_VAR 0 16
52516: PPUSH
52517: CALL_OW 321
52521: PUSH
52522: LD_INT 2
52524: EQUAL
52525: AND
52526: IFFALSE 52586
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52528: LD_INT 22
52530: PUSH
52531: LD_VAR 0 16
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 35
52542: PUSH
52543: LD_INT 49
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 91
52552: PUSH
52553: LD_VAR 0 1
52557: PUSH
52558: LD_INT 10
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: PPUSH
52571: CALL_OW 69
52575: NOT
52576: IFFALSE 52586
// weapon := ru_time_lapser ;
52578: LD_ADDR_VAR 0 18
52582: PUSH
52583: LD_INT 49
52585: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52586: LD_VAR 0 12
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: IN
52601: PUSH
52602: LD_INT 11
52604: PUSH
52605: LD_VAR 0 5
52609: IN
52610: PUSH
52611: LD_INT 30
52613: PUSH
52614: LD_VAR 0 5
52618: IN
52619: OR
52620: AND
52621: PUSH
52622: LD_INT 6
52624: PPUSH
52625: LD_VAR 0 16
52629: PPUSH
52630: CALL_OW 321
52634: PUSH
52635: LD_INT 2
52637: EQUAL
52638: AND
52639: IFFALSE 52804
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52641: LD_INT 22
52643: PUSH
52644: LD_VAR 0 16
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 35
52658: PUSH
52659: LD_INT 11
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 35
52668: PUSH
52669: LD_INT 30
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 91
52683: PUSH
52684: LD_VAR 0 1
52688: PUSH
52689: LD_INT 18
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: PPUSH
52702: CALL_OW 69
52706: NOT
52707: PUSH
52708: LD_INT 22
52710: PUSH
52711: LD_VAR 0 16
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: LD_INT 30
52725: PUSH
52726: LD_INT 32
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 30
52735: PUSH
52736: LD_INT 33
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 91
52750: PUSH
52751: LD_VAR 0 1
52755: PUSH
52756: LD_INT 12
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: PUSH
52769: EMPTY
52770: LIST
52771: PPUSH
52772: CALL_OW 69
52776: PUSH
52777: LD_INT 2
52779: GREATER
52780: AND
52781: IFFALSE 52804
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52783: LD_ADDR_VAR 0 18
52787: PUSH
52788: LD_INT 11
52790: PUSH
52791: LD_INT 30
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_VAR 0 12
52802: ARRAY
52803: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52804: LD_VAR 0 18
52808: NOT
52809: PUSH
52810: LD_INT 40
52812: PPUSH
52813: LD_VAR 0 16
52817: PPUSH
52818: CALL_OW 321
52822: PUSH
52823: LD_INT 2
52825: EQUAL
52826: AND
52827: PUSH
52828: LD_INT 7
52830: PUSH
52831: LD_VAR 0 5
52835: IN
52836: PUSH
52837: LD_INT 28
52839: PUSH
52840: LD_VAR 0 5
52844: IN
52845: OR
52846: PUSH
52847: LD_INT 45
52849: PUSH
52850: LD_VAR 0 5
52854: IN
52855: OR
52856: AND
52857: IFFALSE 53111
// begin hex := GetHexInfo ( x , y ) ;
52859: LD_ADDR_VAR 0 4
52863: PUSH
52864: LD_VAR 0 10
52868: PPUSH
52869: LD_VAR 0 11
52873: PPUSH
52874: CALL_OW 546
52878: ST_TO_ADDR
// if hex [ 1 ] then
52879: LD_VAR 0 4
52883: PUSH
52884: LD_INT 1
52886: ARRAY
52887: IFFALSE 52891
// exit ;
52889: GO 53294
// height := hex [ 2 ] ;
52891: LD_ADDR_VAR 0 15
52895: PUSH
52896: LD_VAR 0 4
52900: PUSH
52901: LD_INT 2
52903: ARRAY
52904: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52905: LD_ADDR_VAR 0 14
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: LD_INT 5
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: ST_TO_ADDR
// for i in tmp do
52928: LD_ADDR_VAR 0 8
52932: PUSH
52933: LD_VAR 0 14
52937: PUSH
52938: FOR_IN
52939: IFFALSE 53109
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52941: LD_ADDR_VAR 0 9
52945: PUSH
52946: LD_VAR 0 10
52950: PPUSH
52951: LD_VAR 0 8
52955: PPUSH
52956: LD_INT 5
52958: PPUSH
52959: CALL_OW 272
52963: PUSH
52964: LD_VAR 0 11
52968: PPUSH
52969: LD_VAR 0 8
52973: PPUSH
52974: LD_INT 5
52976: PPUSH
52977: CALL_OW 273
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52986: LD_VAR 0 9
52990: PUSH
52991: LD_INT 1
52993: ARRAY
52994: PPUSH
52995: LD_VAR 0 9
52999: PUSH
53000: LD_INT 2
53002: ARRAY
53003: PPUSH
53004: CALL_OW 488
53008: IFFALSE 53107
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53010: LD_ADDR_VAR 0 4
53014: PUSH
53015: LD_VAR 0 9
53019: PUSH
53020: LD_INT 1
53022: ARRAY
53023: PPUSH
53024: LD_VAR 0 9
53028: PUSH
53029: LD_INT 2
53031: ARRAY
53032: PPUSH
53033: CALL_OW 546
53037: ST_TO_ADDR
// if hex [ 1 ] then
53038: LD_VAR 0 4
53042: PUSH
53043: LD_INT 1
53045: ARRAY
53046: IFFALSE 53050
// continue ;
53048: GO 52938
// h := hex [ 2 ] ;
53050: LD_ADDR_VAR 0 13
53054: PUSH
53055: LD_VAR 0 4
53059: PUSH
53060: LD_INT 2
53062: ARRAY
53063: ST_TO_ADDR
// if h + 7 < height then
53064: LD_VAR 0 13
53068: PUSH
53069: LD_INT 7
53071: PLUS
53072: PUSH
53073: LD_VAR 0 15
53077: LESS
53078: IFFALSE 53107
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53080: LD_ADDR_VAR 0 18
53084: PUSH
53085: LD_INT 7
53087: PUSH
53088: LD_INT 28
53090: PUSH
53091: LD_INT 45
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_VAR 0 12
53103: ARRAY
53104: ST_TO_ADDR
// break ;
53105: GO 53109
// end ; end ; end ;
53107: GO 52938
53109: POP
53110: POP
// end ; if not weapon then
53111: LD_VAR 0 18
53115: NOT
53116: IFFALSE 53176
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53118: LD_ADDR_VAR 0 5
53122: PUSH
53123: LD_VAR 0 5
53127: PUSH
53128: LD_INT 11
53130: PUSH
53131: LD_INT 30
53133: PUSH
53134: LD_INT 49
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: DIFF
53142: ST_TO_ADDR
// if not list then
53143: LD_VAR 0 5
53147: NOT
53148: IFFALSE 53152
// exit ;
53150: GO 53294
// weapon := list [ rand ( 1 , list ) ] ;
53152: LD_ADDR_VAR 0 18
53156: PUSH
53157: LD_VAR 0 5
53161: PUSH
53162: LD_INT 1
53164: PPUSH
53165: LD_VAR 0 5
53169: PPUSH
53170: CALL_OW 12
53174: ARRAY
53175: ST_TO_ADDR
// end ; if weapon then
53176: LD_VAR 0 18
53180: IFFALSE 53294
// begin tmp := CostOfWeapon ( weapon ) ;
53182: LD_ADDR_VAR 0 14
53186: PUSH
53187: LD_VAR 0 18
53191: PPUSH
53192: CALL_OW 451
53196: ST_TO_ADDR
// j := GetBase ( tower ) ;
53197: LD_ADDR_VAR 0 9
53201: PUSH
53202: LD_VAR 0 1
53206: PPUSH
53207: CALL_OW 274
53211: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53212: LD_VAR 0 9
53216: PPUSH
53217: LD_INT 1
53219: PPUSH
53220: CALL_OW 275
53224: PUSH
53225: LD_VAR 0 14
53229: PUSH
53230: LD_INT 1
53232: ARRAY
53233: GREATEREQUAL
53234: PUSH
53235: LD_VAR 0 9
53239: PPUSH
53240: LD_INT 2
53242: PPUSH
53243: CALL_OW 275
53247: PUSH
53248: LD_VAR 0 14
53252: PUSH
53253: LD_INT 2
53255: ARRAY
53256: GREATEREQUAL
53257: AND
53258: PUSH
53259: LD_VAR 0 9
53263: PPUSH
53264: LD_INT 3
53266: PPUSH
53267: CALL_OW 275
53271: PUSH
53272: LD_VAR 0 14
53276: PUSH
53277: LD_INT 3
53279: ARRAY
53280: GREATEREQUAL
53281: AND
53282: IFFALSE 53294
// result := weapon ;
53284: LD_ADDR_VAR 0 3
53288: PUSH
53289: LD_VAR 0 18
53293: ST_TO_ADDR
// end ; end ;
53294: LD_VAR 0 3
53298: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53299: LD_INT 0
53301: PPUSH
53302: PPUSH
// result := true ;
53303: LD_ADDR_VAR 0 3
53307: PUSH
53308: LD_INT 1
53310: ST_TO_ADDR
// if array1 = array2 then
53311: LD_VAR 0 1
53315: PUSH
53316: LD_VAR 0 2
53320: EQUAL
53321: IFFALSE 53381
// begin for i = 1 to array1 do
53323: LD_ADDR_VAR 0 4
53327: PUSH
53328: DOUBLE
53329: LD_INT 1
53331: DEC
53332: ST_TO_ADDR
53333: LD_VAR 0 1
53337: PUSH
53338: FOR_TO
53339: IFFALSE 53377
// if array1 [ i ] <> array2 [ i ] then
53341: LD_VAR 0 1
53345: PUSH
53346: LD_VAR 0 4
53350: ARRAY
53351: PUSH
53352: LD_VAR 0 2
53356: PUSH
53357: LD_VAR 0 4
53361: ARRAY
53362: NONEQUAL
53363: IFFALSE 53375
// begin result := false ;
53365: LD_ADDR_VAR 0 3
53369: PUSH
53370: LD_INT 0
53372: ST_TO_ADDR
// break ;
53373: GO 53377
// end ;
53375: GO 53338
53377: POP
53378: POP
// end else
53379: GO 53389
// result := false ;
53381: LD_ADDR_VAR 0 3
53385: PUSH
53386: LD_INT 0
53388: ST_TO_ADDR
// end ;
53389: LD_VAR 0 3
53393: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53394: LD_INT 0
53396: PPUSH
53397: PPUSH
// if not array1 or not array2 then
53398: LD_VAR 0 1
53402: NOT
53403: PUSH
53404: LD_VAR 0 2
53408: NOT
53409: OR
53410: IFFALSE 53414
// exit ;
53412: GO 53478
// result := true ;
53414: LD_ADDR_VAR 0 3
53418: PUSH
53419: LD_INT 1
53421: ST_TO_ADDR
// for i = 1 to array1 do
53422: LD_ADDR_VAR 0 4
53426: PUSH
53427: DOUBLE
53428: LD_INT 1
53430: DEC
53431: ST_TO_ADDR
53432: LD_VAR 0 1
53436: PUSH
53437: FOR_TO
53438: IFFALSE 53476
// if array1 [ i ] <> array2 [ i ] then
53440: LD_VAR 0 1
53444: PUSH
53445: LD_VAR 0 4
53449: ARRAY
53450: PUSH
53451: LD_VAR 0 2
53455: PUSH
53456: LD_VAR 0 4
53460: ARRAY
53461: NONEQUAL
53462: IFFALSE 53474
// begin result := false ;
53464: LD_ADDR_VAR 0 3
53468: PUSH
53469: LD_INT 0
53471: ST_TO_ADDR
// break ;
53472: GO 53476
// end ;
53474: GO 53437
53476: POP
53477: POP
// end ;
53478: LD_VAR 0 3
53482: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53483: LD_INT 0
53485: PPUSH
53486: PPUSH
53487: PPUSH
// pom := GetBase ( fac ) ;
53488: LD_ADDR_VAR 0 5
53492: PUSH
53493: LD_VAR 0 1
53497: PPUSH
53498: CALL_OW 274
53502: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53503: LD_ADDR_VAR 0 4
53507: PUSH
53508: LD_VAR 0 2
53512: PUSH
53513: LD_INT 1
53515: ARRAY
53516: PPUSH
53517: LD_VAR 0 2
53521: PUSH
53522: LD_INT 2
53524: ARRAY
53525: PPUSH
53526: LD_VAR 0 2
53530: PUSH
53531: LD_INT 3
53533: ARRAY
53534: PPUSH
53535: LD_VAR 0 2
53539: PUSH
53540: LD_INT 4
53542: ARRAY
53543: PPUSH
53544: CALL_OW 449
53548: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53549: LD_ADDR_VAR 0 3
53553: PUSH
53554: LD_VAR 0 5
53558: PPUSH
53559: LD_INT 1
53561: PPUSH
53562: CALL_OW 275
53566: PUSH
53567: LD_VAR 0 4
53571: PUSH
53572: LD_INT 1
53574: ARRAY
53575: GREATEREQUAL
53576: PUSH
53577: LD_VAR 0 5
53581: PPUSH
53582: LD_INT 2
53584: PPUSH
53585: CALL_OW 275
53589: PUSH
53590: LD_VAR 0 4
53594: PUSH
53595: LD_INT 2
53597: ARRAY
53598: GREATEREQUAL
53599: AND
53600: PUSH
53601: LD_VAR 0 5
53605: PPUSH
53606: LD_INT 3
53608: PPUSH
53609: CALL_OW 275
53613: PUSH
53614: LD_VAR 0 4
53618: PUSH
53619: LD_INT 3
53621: ARRAY
53622: GREATEREQUAL
53623: AND
53624: ST_TO_ADDR
// end ;
53625: LD_VAR 0 3
53629: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53630: LD_INT 0
53632: PPUSH
53633: PPUSH
53634: PPUSH
53635: PPUSH
// pom := GetBase ( building ) ;
53636: LD_ADDR_VAR 0 3
53640: PUSH
53641: LD_VAR 0 1
53645: PPUSH
53646: CALL_OW 274
53650: ST_TO_ADDR
// if not pom then
53651: LD_VAR 0 3
53655: NOT
53656: IFFALSE 53660
// exit ;
53658: GO 53830
// btype := GetBType ( building ) ;
53660: LD_ADDR_VAR 0 5
53664: PUSH
53665: LD_VAR 0 1
53669: PPUSH
53670: CALL_OW 266
53674: ST_TO_ADDR
// if btype = b_armoury then
53675: LD_VAR 0 5
53679: PUSH
53680: LD_INT 4
53682: EQUAL
53683: IFFALSE 53693
// btype := b_barracks ;
53685: LD_ADDR_VAR 0 5
53689: PUSH
53690: LD_INT 5
53692: ST_TO_ADDR
// if btype = b_depot then
53693: LD_VAR 0 5
53697: PUSH
53698: LD_INT 0
53700: EQUAL
53701: IFFALSE 53711
// btype := b_warehouse ;
53703: LD_ADDR_VAR 0 5
53707: PUSH
53708: LD_INT 1
53710: ST_TO_ADDR
// if btype = b_workshop then
53711: LD_VAR 0 5
53715: PUSH
53716: LD_INT 2
53718: EQUAL
53719: IFFALSE 53729
// btype := b_factory ;
53721: LD_ADDR_VAR 0 5
53725: PUSH
53726: LD_INT 3
53728: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53729: LD_ADDR_VAR 0 4
53733: PUSH
53734: LD_VAR 0 5
53738: PPUSH
53739: LD_VAR 0 1
53743: PPUSH
53744: CALL_OW 248
53748: PPUSH
53749: CALL_OW 450
53753: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53754: LD_ADDR_VAR 0 2
53758: PUSH
53759: LD_VAR 0 3
53763: PPUSH
53764: LD_INT 1
53766: PPUSH
53767: CALL_OW 275
53771: PUSH
53772: LD_VAR 0 4
53776: PUSH
53777: LD_INT 1
53779: ARRAY
53780: GREATEREQUAL
53781: PUSH
53782: LD_VAR 0 3
53786: PPUSH
53787: LD_INT 2
53789: PPUSH
53790: CALL_OW 275
53794: PUSH
53795: LD_VAR 0 4
53799: PUSH
53800: LD_INT 2
53802: ARRAY
53803: GREATEREQUAL
53804: AND
53805: PUSH
53806: LD_VAR 0 3
53810: PPUSH
53811: LD_INT 3
53813: PPUSH
53814: CALL_OW 275
53818: PUSH
53819: LD_VAR 0 4
53823: PUSH
53824: LD_INT 3
53826: ARRAY
53827: GREATEREQUAL
53828: AND
53829: ST_TO_ADDR
// end ;
53830: LD_VAR 0 2
53834: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53835: LD_INT 0
53837: PPUSH
53838: PPUSH
53839: PPUSH
// pom := GetBase ( building ) ;
53840: LD_ADDR_VAR 0 4
53844: PUSH
53845: LD_VAR 0 1
53849: PPUSH
53850: CALL_OW 274
53854: ST_TO_ADDR
// if not pom then
53855: LD_VAR 0 4
53859: NOT
53860: IFFALSE 53864
// exit ;
53862: GO 53965
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53864: LD_ADDR_VAR 0 5
53868: PUSH
53869: LD_VAR 0 2
53873: PPUSH
53874: LD_VAR 0 1
53878: PPUSH
53879: CALL_OW 248
53883: PPUSH
53884: CALL_OW 450
53888: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53889: LD_ADDR_VAR 0 3
53893: PUSH
53894: LD_VAR 0 4
53898: PPUSH
53899: LD_INT 1
53901: PPUSH
53902: CALL_OW 275
53906: PUSH
53907: LD_VAR 0 5
53911: PUSH
53912: LD_INT 1
53914: ARRAY
53915: GREATEREQUAL
53916: PUSH
53917: LD_VAR 0 4
53921: PPUSH
53922: LD_INT 2
53924: PPUSH
53925: CALL_OW 275
53929: PUSH
53930: LD_VAR 0 5
53934: PUSH
53935: LD_INT 2
53937: ARRAY
53938: GREATEREQUAL
53939: AND
53940: PUSH
53941: LD_VAR 0 4
53945: PPUSH
53946: LD_INT 3
53948: PPUSH
53949: CALL_OW 275
53953: PUSH
53954: LD_VAR 0 5
53958: PUSH
53959: LD_INT 3
53961: ARRAY
53962: GREATEREQUAL
53963: AND
53964: ST_TO_ADDR
// end ;
53965: LD_VAR 0 3
53969: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53970: LD_INT 0
53972: PPUSH
53973: PPUSH
53974: PPUSH
53975: PPUSH
53976: PPUSH
53977: PPUSH
53978: PPUSH
53979: PPUSH
53980: PPUSH
53981: PPUSH
53982: PPUSH
// result := false ;
53983: LD_ADDR_VAR 0 8
53987: PUSH
53988: LD_INT 0
53990: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53991: LD_VAR 0 5
53995: NOT
53996: PUSH
53997: LD_VAR 0 1
54001: NOT
54002: OR
54003: PUSH
54004: LD_VAR 0 2
54008: NOT
54009: OR
54010: PUSH
54011: LD_VAR 0 3
54015: NOT
54016: OR
54017: IFFALSE 54021
// exit ;
54019: GO 54835
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54021: LD_ADDR_VAR 0 14
54025: PUSH
54026: LD_VAR 0 1
54030: PPUSH
54031: LD_VAR 0 2
54035: PPUSH
54036: LD_VAR 0 3
54040: PPUSH
54041: LD_VAR 0 4
54045: PPUSH
54046: LD_VAR 0 5
54050: PUSH
54051: LD_INT 1
54053: ARRAY
54054: PPUSH
54055: CALL_OW 248
54059: PPUSH
54060: LD_INT 0
54062: PPUSH
54063: CALL 56088 0 6
54067: ST_TO_ADDR
// if not hexes then
54068: LD_VAR 0 14
54072: NOT
54073: IFFALSE 54077
// exit ;
54075: GO 54835
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54077: LD_ADDR_VAR 0 17
54081: PUSH
54082: LD_VAR 0 5
54086: PPUSH
54087: LD_INT 22
54089: PUSH
54090: LD_VAR 0 13
54094: PPUSH
54095: CALL_OW 255
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: LD_INT 30
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 30
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: LIST
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PPUSH
54136: CALL_OW 72
54140: ST_TO_ADDR
// for i = 1 to hexes do
54141: LD_ADDR_VAR 0 9
54145: PUSH
54146: DOUBLE
54147: LD_INT 1
54149: DEC
54150: ST_TO_ADDR
54151: LD_VAR 0 14
54155: PUSH
54156: FOR_TO
54157: IFFALSE 54833
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54159: LD_ADDR_VAR 0 13
54163: PUSH
54164: LD_VAR 0 14
54168: PUSH
54169: LD_VAR 0 9
54173: ARRAY
54174: PUSH
54175: LD_INT 1
54177: ARRAY
54178: PPUSH
54179: LD_VAR 0 14
54183: PUSH
54184: LD_VAR 0 9
54188: ARRAY
54189: PUSH
54190: LD_INT 2
54192: ARRAY
54193: PPUSH
54194: CALL_OW 428
54198: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54199: LD_VAR 0 14
54203: PUSH
54204: LD_VAR 0 9
54208: ARRAY
54209: PUSH
54210: LD_INT 1
54212: ARRAY
54213: PPUSH
54214: LD_VAR 0 14
54218: PUSH
54219: LD_VAR 0 9
54223: ARRAY
54224: PUSH
54225: LD_INT 2
54227: ARRAY
54228: PPUSH
54229: CALL_OW 351
54233: PUSH
54234: LD_VAR 0 14
54238: PUSH
54239: LD_VAR 0 9
54243: ARRAY
54244: PUSH
54245: LD_INT 1
54247: ARRAY
54248: PPUSH
54249: LD_VAR 0 14
54253: PUSH
54254: LD_VAR 0 9
54258: ARRAY
54259: PUSH
54260: LD_INT 2
54262: ARRAY
54263: PPUSH
54264: CALL_OW 488
54268: NOT
54269: OR
54270: PUSH
54271: LD_VAR 0 13
54275: PPUSH
54276: CALL_OW 247
54280: PUSH
54281: LD_INT 3
54283: EQUAL
54284: OR
54285: IFFALSE 54291
// exit ;
54287: POP
54288: POP
54289: GO 54835
// if not tmp then
54291: LD_VAR 0 13
54295: NOT
54296: IFFALSE 54300
// continue ;
54298: GO 54156
// result := true ;
54300: LD_ADDR_VAR 0 8
54304: PUSH
54305: LD_INT 1
54307: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54308: LD_VAR 0 6
54312: PUSH
54313: LD_VAR 0 13
54317: PPUSH
54318: CALL_OW 247
54322: PUSH
54323: LD_INT 2
54325: EQUAL
54326: AND
54327: PUSH
54328: LD_VAR 0 13
54332: PPUSH
54333: CALL_OW 263
54337: PUSH
54338: LD_INT 1
54340: EQUAL
54341: AND
54342: IFFALSE 54506
// begin if IsDrivenBy ( tmp ) then
54344: LD_VAR 0 13
54348: PPUSH
54349: CALL_OW 311
54353: IFFALSE 54357
// continue ;
54355: GO 54156
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54357: LD_VAR 0 6
54361: PPUSH
54362: LD_INT 3
54364: PUSH
54365: LD_INT 60
54367: PUSH
54368: EMPTY
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: LD_INT 55
54380: PUSH
54381: EMPTY
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PPUSH
54392: CALL_OW 72
54396: IFFALSE 54504
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54398: LD_ADDR_VAR 0 18
54402: PUSH
54403: LD_VAR 0 6
54407: PPUSH
54408: LD_INT 3
54410: PUSH
54411: LD_INT 60
54413: PUSH
54414: EMPTY
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 55
54426: PUSH
54427: EMPTY
54428: LIST
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PPUSH
54438: CALL_OW 72
54442: PUSH
54443: LD_INT 1
54445: ARRAY
54446: ST_TO_ADDR
// if IsInUnit ( driver ) then
54447: LD_VAR 0 18
54451: PPUSH
54452: CALL_OW 310
54456: IFFALSE 54467
// ComExit ( driver ) ;
54458: LD_VAR 0 18
54462: PPUSH
54463: CALL 79869 0 1
// AddComEnterUnit ( driver , tmp ) ;
54467: LD_VAR 0 18
54471: PPUSH
54472: LD_VAR 0 13
54476: PPUSH
54477: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54481: LD_VAR 0 18
54485: PPUSH
54486: LD_VAR 0 7
54490: PPUSH
54491: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54495: LD_VAR 0 18
54499: PPUSH
54500: CALL_OW 181
// end ; continue ;
54504: GO 54156
// end ; if not cleaners or not tmp in cleaners then
54506: LD_VAR 0 6
54510: NOT
54511: PUSH
54512: LD_VAR 0 13
54516: PUSH
54517: LD_VAR 0 6
54521: IN
54522: NOT
54523: OR
54524: IFFALSE 54831
// begin if dep then
54526: LD_VAR 0 17
54530: IFFALSE 54666
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54532: LD_ADDR_VAR 0 16
54536: PUSH
54537: LD_VAR 0 17
54541: PUSH
54542: LD_INT 1
54544: ARRAY
54545: PPUSH
54546: CALL_OW 250
54550: PPUSH
54551: LD_VAR 0 17
54555: PUSH
54556: LD_INT 1
54558: ARRAY
54559: PPUSH
54560: CALL_OW 254
54564: PPUSH
54565: LD_INT 5
54567: PPUSH
54568: CALL_OW 272
54572: PUSH
54573: LD_VAR 0 17
54577: PUSH
54578: LD_INT 1
54580: ARRAY
54581: PPUSH
54582: CALL_OW 251
54586: PPUSH
54587: LD_VAR 0 17
54591: PUSH
54592: LD_INT 1
54594: ARRAY
54595: PPUSH
54596: CALL_OW 254
54600: PPUSH
54601: LD_INT 5
54603: PPUSH
54604: CALL_OW 273
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54613: LD_VAR 0 16
54617: PUSH
54618: LD_INT 1
54620: ARRAY
54621: PPUSH
54622: LD_VAR 0 16
54626: PUSH
54627: LD_INT 2
54629: ARRAY
54630: PPUSH
54631: CALL_OW 488
54635: IFFALSE 54666
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54637: LD_VAR 0 13
54641: PPUSH
54642: LD_VAR 0 16
54646: PUSH
54647: LD_INT 1
54649: ARRAY
54650: PPUSH
54651: LD_VAR 0 16
54655: PUSH
54656: LD_INT 2
54658: ARRAY
54659: PPUSH
54660: CALL_OW 111
// continue ;
54664: GO 54156
// end ; end ; r := GetDir ( tmp ) ;
54666: LD_ADDR_VAR 0 15
54670: PUSH
54671: LD_VAR 0 13
54675: PPUSH
54676: CALL_OW 254
54680: ST_TO_ADDR
// if r = 5 then
54681: LD_VAR 0 15
54685: PUSH
54686: LD_INT 5
54688: EQUAL
54689: IFFALSE 54699
// r := 0 ;
54691: LD_ADDR_VAR 0 15
54695: PUSH
54696: LD_INT 0
54698: ST_TO_ADDR
// for j = r to 5 do
54699: LD_ADDR_VAR 0 10
54703: PUSH
54704: DOUBLE
54705: LD_VAR 0 15
54709: DEC
54710: ST_TO_ADDR
54711: LD_INT 5
54713: PUSH
54714: FOR_TO
54715: IFFALSE 54829
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54717: LD_ADDR_VAR 0 11
54721: PUSH
54722: LD_VAR 0 13
54726: PPUSH
54727: CALL_OW 250
54731: PPUSH
54732: LD_VAR 0 10
54736: PPUSH
54737: LD_INT 2
54739: PPUSH
54740: CALL_OW 272
54744: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54745: LD_ADDR_VAR 0 12
54749: PUSH
54750: LD_VAR 0 13
54754: PPUSH
54755: CALL_OW 251
54759: PPUSH
54760: LD_VAR 0 10
54764: PPUSH
54765: LD_INT 2
54767: PPUSH
54768: CALL_OW 273
54772: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54773: LD_VAR 0 11
54777: PPUSH
54778: LD_VAR 0 12
54782: PPUSH
54783: CALL_OW 488
54787: PUSH
54788: LD_VAR 0 11
54792: PPUSH
54793: LD_VAR 0 12
54797: PPUSH
54798: CALL_OW 428
54802: NOT
54803: AND
54804: IFFALSE 54827
// begin ComMoveXY ( tmp , _x , _y ) ;
54806: LD_VAR 0 13
54810: PPUSH
54811: LD_VAR 0 11
54815: PPUSH
54816: LD_VAR 0 12
54820: PPUSH
54821: CALL_OW 111
// break ;
54825: GO 54829
// end ; end ;
54827: GO 54714
54829: POP
54830: POP
// end ; end ;
54831: GO 54156
54833: POP
54834: POP
// end ;
54835: LD_VAR 0 8
54839: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54840: LD_INT 0
54842: PPUSH
// result := true ;
54843: LD_ADDR_VAR 0 3
54847: PUSH
54848: LD_INT 1
54850: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54851: LD_VAR 0 2
54855: PUSH
54856: LD_INT 24
54858: DOUBLE
54859: EQUAL
54860: IFTRUE 54870
54862: LD_INT 33
54864: DOUBLE
54865: EQUAL
54866: IFTRUE 54870
54868: GO 54895
54870: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54871: LD_ADDR_VAR 0 3
54875: PUSH
54876: LD_INT 32
54878: PPUSH
54879: LD_VAR 0 1
54883: PPUSH
54884: CALL_OW 321
54888: PUSH
54889: LD_INT 2
54891: EQUAL
54892: ST_TO_ADDR
54893: GO 55211
54895: LD_INT 20
54897: DOUBLE
54898: EQUAL
54899: IFTRUE 54903
54901: GO 54928
54903: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54904: LD_ADDR_VAR 0 3
54908: PUSH
54909: LD_INT 6
54911: PPUSH
54912: LD_VAR 0 1
54916: PPUSH
54917: CALL_OW 321
54921: PUSH
54922: LD_INT 2
54924: EQUAL
54925: ST_TO_ADDR
54926: GO 55211
54928: LD_INT 22
54930: DOUBLE
54931: EQUAL
54932: IFTRUE 54942
54934: LD_INT 36
54936: DOUBLE
54937: EQUAL
54938: IFTRUE 54942
54940: GO 54967
54942: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54943: LD_ADDR_VAR 0 3
54947: PUSH
54948: LD_INT 15
54950: PPUSH
54951: LD_VAR 0 1
54955: PPUSH
54956: CALL_OW 321
54960: PUSH
54961: LD_INT 2
54963: EQUAL
54964: ST_TO_ADDR
54965: GO 55211
54967: LD_INT 30
54969: DOUBLE
54970: EQUAL
54971: IFTRUE 54975
54973: GO 55000
54975: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54976: LD_ADDR_VAR 0 3
54980: PUSH
54981: LD_INT 20
54983: PPUSH
54984: LD_VAR 0 1
54988: PPUSH
54989: CALL_OW 321
54993: PUSH
54994: LD_INT 2
54996: EQUAL
54997: ST_TO_ADDR
54998: GO 55211
55000: LD_INT 28
55002: DOUBLE
55003: EQUAL
55004: IFTRUE 55014
55006: LD_INT 21
55008: DOUBLE
55009: EQUAL
55010: IFTRUE 55014
55012: GO 55039
55014: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55015: LD_ADDR_VAR 0 3
55019: PUSH
55020: LD_INT 21
55022: PPUSH
55023: LD_VAR 0 1
55027: PPUSH
55028: CALL_OW 321
55032: PUSH
55033: LD_INT 2
55035: EQUAL
55036: ST_TO_ADDR
55037: GO 55211
55039: LD_INT 16
55041: DOUBLE
55042: EQUAL
55043: IFTRUE 55047
55045: GO 55072
55047: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55048: LD_ADDR_VAR 0 3
55052: PUSH
55053: LD_INT 84
55055: PPUSH
55056: LD_VAR 0 1
55060: PPUSH
55061: CALL_OW 321
55065: PUSH
55066: LD_INT 2
55068: EQUAL
55069: ST_TO_ADDR
55070: GO 55211
55072: LD_INT 19
55074: DOUBLE
55075: EQUAL
55076: IFTRUE 55086
55078: LD_INT 23
55080: DOUBLE
55081: EQUAL
55082: IFTRUE 55086
55084: GO 55111
55086: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55087: LD_ADDR_VAR 0 3
55091: PUSH
55092: LD_INT 83
55094: PPUSH
55095: LD_VAR 0 1
55099: PPUSH
55100: CALL_OW 321
55104: PUSH
55105: LD_INT 2
55107: EQUAL
55108: ST_TO_ADDR
55109: GO 55211
55111: LD_INT 17
55113: DOUBLE
55114: EQUAL
55115: IFTRUE 55119
55117: GO 55144
55119: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55120: LD_ADDR_VAR 0 3
55124: PUSH
55125: LD_INT 39
55127: PPUSH
55128: LD_VAR 0 1
55132: PPUSH
55133: CALL_OW 321
55137: PUSH
55138: LD_INT 2
55140: EQUAL
55141: ST_TO_ADDR
55142: GO 55211
55144: LD_INT 18
55146: DOUBLE
55147: EQUAL
55148: IFTRUE 55152
55150: GO 55177
55152: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55153: LD_ADDR_VAR 0 3
55157: PUSH
55158: LD_INT 40
55160: PPUSH
55161: LD_VAR 0 1
55165: PPUSH
55166: CALL_OW 321
55170: PUSH
55171: LD_INT 2
55173: EQUAL
55174: ST_TO_ADDR
55175: GO 55211
55177: LD_INT 27
55179: DOUBLE
55180: EQUAL
55181: IFTRUE 55185
55183: GO 55210
55185: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55186: LD_ADDR_VAR 0 3
55190: PUSH
55191: LD_INT 35
55193: PPUSH
55194: LD_VAR 0 1
55198: PPUSH
55199: CALL_OW 321
55203: PUSH
55204: LD_INT 2
55206: EQUAL
55207: ST_TO_ADDR
55208: GO 55211
55210: POP
// end ;
55211: LD_VAR 0 3
55215: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55216: LD_INT 0
55218: PPUSH
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
55223: PPUSH
55224: PPUSH
55225: PPUSH
55226: PPUSH
55227: PPUSH
55228: PPUSH
// result := false ;
55229: LD_ADDR_VAR 0 6
55233: PUSH
55234: LD_INT 0
55236: ST_TO_ADDR
// if btype = b_depot then
55237: LD_VAR 0 2
55241: PUSH
55242: LD_INT 0
55244: EQUAL
55245: IFFALSE 55257
// begin result := true ;
55247: LD_ADDR_VAR 0 6
55251: PUSH
55252: LD_INT 1
55254: ST_TO_ADDR
// exit ;
55255: GO 56083
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55257: LD_VAR 0 1
55261: NOT
55262: PUSH
55263: LD_VAR 0 1
55267: PPUSH
55268: CALL_OW 266
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: IN
55283: NOT
55284: OR
55285: PUSH
55286: LD_VAR 0 2
55290: NOT
55291: OR
55292: PUSH
55293: LD_VAR 0 5
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: LD_INT 4
55312: PUSH
55313: LD_INT 5
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: IN
55324: NOT
55325: OR
55326: PUSH
55327: LD_VAR 0 3
55331: PPUSH
55332: LD_VAR 0 4
55336: PPUSH
55337: CALL_OW 488
55341: NOT
55342: OR
55343: IFFALSE 55347
// exit ;
55345: GO 56083
// side := GetSide ( depot ) ;
55347: LD_ADDR_VAR 0 9
55351: PUSH
55352: LD_VAR 0 1
55356: PPUSH
55357: CALL_OW 255
55361: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55362: LD_VAR 0 9
55366: PPUSH
55367: LD_VAR 0 2
55371: PPUSH
55372: CALL 54840 0 2
55376: NOT
55377: IFFALSE 55381
// exit ;
55379: GO 56083
// pom := GetBase ( depot ) ;
55381: LD_ADDR_VAR 0 10
55385: PUSH
55386: LD_VAR 0 1
55390: PPUSH
55391: CALL_OW 274
55395: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55396: LD_ADDR_VAR 0 11
55400: PUSH
55401: LD_VAR 0 2
55405: PPUSH
55406: LD_VAR 0 1
55410: PPUSH
55411: CALL_OW 248
55415: PPUSH
55416: CALL_OW 450
55420: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55421: LD_VAR 0 10
55425: PPUSH
55426: LD_INT 1
55428: PPUSH
55429: CALL_OW 275
55433: PUSH
55434: LD_VAR 0 11
55438: PUSH
55439: LD_INT 1
55441: ARRAY
55442: GREATEREQUAL
55443: PUSH
55444: LD_VAR 0 10
55448: PPUSH
55449: LD_INT 2
55451: PPUSH
55452: CALL_OW 275
55456: PUSH
55457: LD_VAR 0 11
55461: PUSH
55462: LD_INT 2
55464: ARRAY
55465: GREATEREQUAL
55466: AND
55467: PUSH
55468: LD_VAR 0 10
55472: PPUSH
55473: LD_INT 3
55475: PPUSH
55476: CALL_OW 275
55480: PUSH
55481: LD_VAR 0 11
55485: PUSH
55486: LD_INT 3
55488: ARRAY
55489: GREATEREQUAL
55490: AND
55491: NOT
55492: IFFALSE 55496
// exit ;
55494: GO 56083
// if GetBType ( depot ) = b_depot then
55496: LD_VAR 0 1
55500: PPUSH
55501: CALL_OW 266
55505: PUSH
55506: LD_INT 0
55508: EQUAL
55509: IFFALSE 55521
// dist := 28 else
55511: LD_ADDR_VAR 0 14
55515: PUSH
55516: LD_INT 28
55518: ST_TO_ADDR
55519: GO 55529
// dist := 36 ;
55521: LD_ADDR_VAR 0 14
55525: PUSH
55526: LD_INT 36
55528: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55529: LD_VAR 0 1
55533: PPUSH
55534: LD_VAR 0 3
55538: PPUSH
55539: LD_VAR 0 4
55543: PPUSH
55544: CALL_OW 297
55548: PUSH
55549: LD_VAR 0 14
55553: GREATER
55554: IFFALSE 55558
// exit ;
55556: GO 56083
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55558: LD_ADDR_VAR 0 12
55562: PUSH
55563: LD_VAR 0 2
55567: PPUSH
55568: LD_VAR 0 3
55572: PPUSH
55573: LD_VAR 0 4
55577: PPUSH
55578: LD_VAR 0 5
55582: PPUSH
55583: LD_VAR 0 1
55587: PPUSH
55588: CALL_OW 248
55592: PPUSH
55593: LD_INT 0
55595: PPUSH
55596: CALL 56088 0 6
55600: ST_TO_ADDR
// if not hexes then
55601: LD_VAR 0 12
55605: NOT
55606: IFFALSE 55610
// exit ;
55608: GO 56083
// hex := GetHexInfo ( x , y ) ;
55610: LD_ADDR_VAR 0 15
55614: PUSH
55615: LD_VAR 0 3
55619: PPUSH
55620: LD_VAR 0 4
55624: PPUSH
55625: CALL_OW 546
55629: ST_TO_ADDR
// if hex [ 1 ] then
55630: LD_VAR 0 15
55634: PUSH
55635: LD_INT 1
55637: ARRAY
55638: IFFALSE 55642
// exit ;
55640: GO 56083
// height := hex [ 2 ] ;
55642: LD_ADDR_VAR 0 13
55646: PUSH
55647: LD_VAR 0 15
55651: PUSH
55652: LD_INT 2
55654: ARRAY
55655: ST_TO_ADDR
// for i = 1 to hexes do
55656: LD_ADDR_VAR 0 7
55660: PUSH
55661: DOUBLE
55662: LD_INT 1
55664: DEC
55665: ST_TO_ADDR
55666: LD_VAR 0 12
55670: PUSH
55671: FOR_TO
55672: IFFALSE 56002
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55674: LD_VAR 0 12
55678: PUSH
55679: LD_VAR 0 7
55683: ARRAY
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: PPUSH
55689: LD_VAR 0 12
55693: PUSH
55694: LD_VAR 0 7
55698: ARRAY
55699: PUSH
55700: LD_INT 2
55702: ARRAY
55703: PPUSH
55704: CALL_OW 488
55708: NOT
55709: PUSH
55710: LD_VAR 0 12
55714: PUSH
55715: LD_VAR 0 7
55719: ARRAY
55720: PUSH
55721: LD_INT 1
55723: ARRAY
55724: PPUSH
55725: LD_VAR 0 12
55729: PUSH
55730: LD_VAR 0 7
55734: ARRAY
55735: PUSH
55736: LD_INT 2
55738: ARRAY
55739: PPUSH
55740: CALL_OW 428
55744: PUSH
55745: LD_INT 0
55747: GREATER
55748: OR
55749: PUSH
55750: LD_VAR 0 12
55754: PUSH
55755: LD_VAR 0 7
55759: ARRAY
55760: PUSH
55761: LD_INT 1
55763: ARRAY
55764: PPUSH
55765: LD_VAR 0 12
55769: PUSH
55770: LD_VAR 0 7
55774: ARRAY
55775: PUSH
55776: LD_INT 2
55778: ARRAY
55779: PPUSH
55780: CALL_OW 351
55784: OR
55785: IFFALSE 55791
// exit ;
55787: POP
55788: POP
55789: GO 56083
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55791: LD_ADDR_VAR 0 8
55795: PUSH
55796: LD_VAR 0 12
55800: PUSH
55801: LD_VAR 0 7
55805: ARRAY
55806: PUSH
55807: LD_INT 1
55809: ARRAY
55810: PPUSH
55811: LD_VAR 0 12
55815: PUSH
55816: LD_VAR 0 7
55820: ARRAY
55821: PUSH
55822: LD_INT 2
55824: ARRAY
55825: PPUSH
55826: CALL_OW 546
55830: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55831: LD_VAR 0 8
55835: PUSH
55836: LD_INT 1
55838: ARRAY
55839: PUSH
55840: LD_VAR 0 8
55844: PUSH
55845: LD_INT 2
55847: ARRAY
55848: PUSH
55849: LD_VAR 0 13
55853: PUSH
55854: LD_INT 2
55856: PLUS
55857: GREATER
55858: OR
55859: PUSH
55860: LD_VAR 0 8
55864: PUSH
55865: LD_INT 2
55867: ARRAY
55868: PUSH
55869: LD_VAR 0 13
55873: PUSH
55874: LD_INT 2
55876: MINUS
55877: LESS
55878: OR
55879: PUSH
55880: LD_VAR 0 8
55884: PUSH
55885: LD_INT 3
55887: ARRAY
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 8
55894: PUSH
55895: LD_INT 9
55897: PUSH
55898: LD_INT 10
55900: PUSH
55901: LD_INT 11
55903: PUSH
55904: LD_INT 12
55906: PUSH
55907: LD_INT 13
55909: PUSH
55910: LD_INT 16
55912: PUSH
55913: LD_INT 17
55915: PUSH
55916: LD_INT 18
55918: PUSH
55919: LD_INT 19
55921: PUSH
55922: LD_INT 20
55924: PUSH
55925: LD_INT 21
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: IN
55943: NOT
55944: OR
55945: PUSH
55946: LD_VAR 0 8
55950: PUSH
55951: LD_INT 5
55953: ARRAY
55954: NOT
55955: OR
55956: PUSH
55957: LD_VAR 0 8
55961: PUSH
55962: LD_INT 6
55964: ARRAY
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 7
55974: PUSH
55975: LD_INT 9
55977: PUSH
55978: LD_INT 10
55980: PUSH
55981: LD_INT 11
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: IN
55992: NOT
55993: OR
55994: IFFALSE 56000
// exit ;
55996: POP
55997: POP
55998: GO 56083
// end ;
56000: GO 55671
56002: POP
56003: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56004: LD_VAR 0 9
56008: PPUSH
56009: LD_VAR 0 3
56013: PPUSH
56014: LD_VAR 0 4
56018: PPUSH
56019: LD_INT 20
56021: PPUSH
56022: CALL 48006 0 4
56026: PUSH
56027: LD_INT 4
56029: ARRAY
56030: IFFALSE 56034
// exit ;
56032: GO 56083
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56034: LD_VAR 0 2
56038: PUSH
56039: LD_INT 29
56041: PUSH
56042: LD_INT 30
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: IN
56049: PUSH
56050: LD_VAR 0 3
56054: PPUSH
56055: LD_VAR 0 4
56059: PPUSH
56060: LD_VAR 0 9
56064: PPUSH
56065: CALL_OW 440
56069: NOT
56070: AND
56071: IFFALSE 56075
// exit ;
56073: GO 56083
// result := true ;
56075: LD_ADDR_VAR 0 6
56079: PUSH
56080: LD_INT 1
56082: ST_TO_ADDR
// end ;
56083: LD_VAR 0 6
56087: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56088: LD_INT 0
56090: PPUSH
56091: PPUSH
56092: PPUSH
56093: PPUSH
56094: PPUSH
56095: PPUSH
56096: PPUSH
56097: PPUSH
56098: PPUSH
56099: PPUSH
56100: PPUSH
56101: PPUSH
56102: PPUSH
56103: PPUSH
56104: PPUSH
56105: PPUSH
56106: PPUSH
56107: PPUSH
56108: PPUSH
56109: PPUSH
56110: PPUSH
56111: PPUSH
56112: PPUSH
56113: PPUSH
56114: PPUSH
56115: PPUSH
56116: PPUSH
56117: PPUSH
56118: PPUSH
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
56125: PPUSH
56126: PPUSH
56127: PPUSH
56128: PPUSH
56129: PPUSH
56130: PPUSH
56131: PPUSH
56132: PPUSH
56133: PPUSH
56134: PPUSH
56135: PPUSH
56136: PPUSH
56137: PPUSH
56138: PPUSH
56139: PPUSH
56140: PPUSH
56141: PPUSH
56142: PPUSH
56143: PPUSH
56144: PPUSH
56145: PPUSH
56146: PPUSH
56147: PPUSH
// result = [ ] ;
56148: LD_ADDR_VAR 0 7
56152: PUSH
56153: EMPTY
56154: ST_TO_ADDR
// temp_list = [ ] ;
56155: LD_ADDR_VAR 0 9
56159: PUSH
56160: EMPTY
56161: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56162: LD_VAR 0 4
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: LD_INT 4
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: IN
56193: NOT
56194: PUSH
56195: LD_VAR 0 1
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: IN
56210: PUSH
56211: LD_VAR 0 5
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: IN
56230: NOT
56231: AND
56232: OR
56233: IFFALSE 56237
// exit ;
56235: GO 74628
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56237: LD_VAR 0 1
56241: PUSH
56242: LD_INT 6
56244: PUSH
56245: LD_INT 7
56247: PUSH
56248: LD_INT 8
56250: PUSH
56251: LD_INT 13
56253: PUSH
56254: LD_INT 12
56256: PUSH
56257: LD_INT 15
56259: PUSH
56260: LD_INT 11
56262: PUSH
56263: LD_INT 14
56265: PUSH
56266: LD_INT 10
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: IN
56280: IFFALSE 56290
// btype = b_lab ;
56282: LD_ADDR_VAR 0 1
56286: PUSH
56287: LD_INT 6
56289: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56290: LD_VAR 0 6
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: LIST
56308: IN
56309: NOT
56310: PUSH
56311: LD_VAR 0 1
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: LD_INT 6
56330: PUSH
56331: LD_INT 36
56333: PUSH
56334: LD_INT 4
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: LD_INT 31
56342: PUSH
56343: LD_INT 32
56345: PUSH
56346: LD_INT 33
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: IN
56362: NOT
56363: PUSH
56364: LD_VAR 0 6
56368: PUSH
56369: LD_INT 1
56371: EQUAL
56372: AND
56373: OR
56374: PUSH
56375: LD_VAR 0 1
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: IN
56390: NOT
56391: PUSH
56392: LD_VAR 0 6
56396: PUSH
56397: LD_INT 2
56399: EQUAL
56400: AND
56401: OR
56402: IFFALSE 56412
// mode = 0 ;
56404: LD_ADDR_VAR 0 6
56408: PUSH
56409: LD_INT 0
56411: ST_TO_ADDR
// case mode of 0 :
56412: LD_VAR 0 6
56416: PUSH
56417: LD_INT 0
56419: DOUBLE
56420: EQUAL
56421: IFTRUE 56425
56423: GO 67878
56425: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56426: LD_ADDR_VAR 0 11
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56619: LD_ADDR_VAR 0 12
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 3
56776: NEG
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56815: LD_ADDR_VAR 0 13
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57014: LD_ADDR_VAR 0 14
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57210: LD_ADDR_VAR 0 15
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57403: LD_ADDR_VAR 0 16
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57596: LD_ADDR_VAR 0 17
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57826: LD_ADDR_VAR 0 18
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58056: LD_ADDR_VAR 0 19
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58286: LD_ADDR_VAR 0 20
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: NEG
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58516: LD_ADDR_VAR 0 21
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58746: LD_ADDR_VAR 0 22
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58976: LD_ADDR_VAR 0 23
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 3
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59256: LD_ADDR_VAR 0 24
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59532: LD_ADDR_VAR 0 25
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59806: LD_ADDR_VAR 0 26
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60082: LD_ADDR_VAR 0 27
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60362: LD_ADDR_VAR 0 28
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60644: LD_ADDR_VAR 0 29
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 3
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: NEG
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60923: LD_ADDR_VAR 0 30
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61201: LD_ADDR_VAR 0 31
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 2
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61479: LD_ADDR_VAR 0 32
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 2
61711: NEG
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 3
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61757: LD_ADDR_VAR 0 33
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: NEG
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: NEG
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 3
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62036: LD_ADDR_VAR 0 34
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 2
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 3
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62316: LD_ADDR_VAR 0 35
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62428: LD_ADDR_VAR 0 36
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62540: LD_ADDR_VAR 0 37
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62652: LD_ADDR_VAR 0 38
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62764: LD_ADDR_VAR 0 39
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62876: LD_ADDR_VAR 0 40
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62988: LD_ADDR_VAR 0 41
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: NEG
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 3
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 3
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: LD_INT 3
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 3
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: LD_INT 2
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: NEG
63298: PUSH
63299: LD_INT 3
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63338: LD_ADDR_VAR 0 42
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 2
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 2
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: LD_INT 2
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: LD_INT 3
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 3
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: LD_INT 3
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: LD_INT 3
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: LD_INT 3
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 3
63635: NEG
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 3
63647: NEG
63648: PUSH
63649: LD_INT 3
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63688: LD_ADDR_VAR 0 43
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 2
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: LD_INT 2
63784: NEG
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 2
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: LD_INT 3
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 3
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 3
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 3
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: NEG
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 3
63995: NEG
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64036: LD_ADDR_VAR 0 44
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 2
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 1
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 2
64214: NEG
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: LD_INT 3
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 3
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 3
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 3
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 3
64279: PUSH
64280: LD_INT 3
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 3
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 3
64333: NEG
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 3
64345: NEG
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64386: LD_ADDR_VAR 0 45
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 2
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 2
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 2
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 2
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 2
64552: NEG
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 2
64564: NEG
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: NEG
64577: PUSH
64578: LD_INT 3
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 3
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 3
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 2
64614: NEG
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: LD_INT 3
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 3
64683: NEG
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 3
64695: NEG
64696: PUSH
64697: LD_INT 3
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64736: LD_ADDR_VAR 0 46
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 2
64913: NEG
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 3
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 3
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 2
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 3
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: PUSH
64991: LD_INT 3
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 3
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 2
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: NEG
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65084: LD_ADDR_VAR 0 47
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: NEG
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65235: LD_ADDR_VAR 0 48
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 1
65293: NEG
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 2
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 2
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65382: LD_ADDR_VAR 0 49
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 1
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 2
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 2
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65526: LD_ADDR_VAR 0 50
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: LD_INT 1
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65670: LD_ADDR_VAR 0 51
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: LD_INT 2
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: LD_INT 2
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 2
65782: NEG
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 2
65793: NEG
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65817: LD_ADDR_VAR 0 52
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 1
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: LD_INT 2
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 1
65910: NEG
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 2
65932: NEG
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: LD_INT 2
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65968: LD_ADDR_VAR 0 53
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 2
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 2
66144: NEG
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 2
66155: NEG
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: LD_INT 2
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66198: LD_ADDR_VAR 0 54
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 1
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: NEG
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 2
66385: NEG
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 2
66397: NEG
66398: PUSH
66399: LD_INT 2
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66428: LD_ADDR_VAR 0 55
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 2
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: LD_INT 2
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 2
66615: NEG
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 2
66627: NEG
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66658: LD_ADDR_VAR 0 56
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: LD_INT 2
66754: NEG
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 2
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 2
66793: PUSH
66794: LD_INT 2
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 1
66823: NEG
66824: PUSH
66825: LD_INT 1
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 2
66834: NEG
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 2
66845: NEG
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: LD_INT 2
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66888: LD_ADDR_VAR 0 57
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 0
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: NEG
66958: PUSH
66959: LD_INT 1
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: LD_INT 2
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 2
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: LD_INT 2
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: LD_INT 2
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 2
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 2
67075: NEG
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 2
67087: NEG
67088: PUSH
67089: LD_INT 2
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67118: LD_ADDR_VAR 0 58
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: LD_INT 1
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: LD_INT 2
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: LD_INT 2
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 1
67222: PUSH
67223: LD_INT 1
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 2
67243: PUSH
67244: LD_INT 1
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 1
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: LD_INT 2
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: NEG
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: LD_INT 1
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 2
67317: NEG
67318: PUSH
67319: LD_INT 2
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67348: LD_ADDR_VAR 0 59
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 1
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 1
67406: NEG
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: NEG
67418: PUSH
67419: LD_INT 1
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67436: LD_ADDR_VAR 0 60
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: LD_INT 1
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 1
67494: NEG
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 1
67505: NEG
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67524: LD_ADDR_VAR 0 61
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 1
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 1
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 1
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67612: LD_ADDR_VAR 0 62
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 1
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: LD_INT 1
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: NEG
67682: PUSH
67683: LD_INT 1
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67700: LD_ADDR_VAR 0 63
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67788: LD_ADDR_VAR 0 64
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 0
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: ST_TO_ADDR
// end ; 1 :
67876: GO 73773
67878: LD_INT 1
67880: DOUBLE
67881: EQUAL
67882: IFTRUE 67886
67884: GO 70509
67886: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67887: LD_ADDR_VAR 0 11
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 3
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67931: LD_ADDR_VAR 0 12
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: LD_INT 1
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 3
67959: PUSH
67960: LD_INT 1
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: LIST
67971: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67972: LD_ADDR_VAR 0 13
67976: PUSH
67977: LD_INT 3
67979: PUSH
67980: LD_INT 2
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: LD_INT 3
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: LIST
68011: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68012: LD_ADDR_VAR 0 14
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: LD_INT 3
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 1
68039: NEG
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68053: LD_ADDR_VAR 0 15
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 3
68082: NEG
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68097: LD_ADDR_VAR 0 16
68101: PUSH
68102: LD_INT 2
68104: NEG
68105: PUSH
68106: LD_INT 3
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 3
68116: NEG
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 3
68128: NEG
68129: PUSH
68130: LD_INT 3
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68143: LD_ADDR_VAR 0 17
68147: PUSH
68148: LD_INT 1
68150: NEG
68151: PUSH
68152: LD_INT 3
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 3
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: PUSH
68174: LD_INT 2
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: LIST
68186: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68187: LD_ADDR_VAR 0 18
68191: PUSH
68192: LD_INT 2
68194: PUSH
68195: LD_INT 1
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 3
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68228: LD_ADDR_VAR 0 19
68232: PUSH
68233: LD_INT 3
68235: PUSH
68236: LD_INT 2
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 3
68245: PUSH
68246: LD_INT 3
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 2
68255: PUSH
68256: LD_INT 3
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68268: LD_ADDR_VAR 0 20
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: LD_INT 3
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 3
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 1
68295: NEG
68296: PUSH
68297: LD_INT 2
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: LIST
68308: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68309: LD_ADDR_VAR 0 21
68313: PUSH
68314: LD_INT 2
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 3
68327: NEG
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 3
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68353: LD_ADDR_VAR 0 22
68357: PUSH
68358: LD_INT 2
68360: NEG
68361: PUSH
68362: LD_INT 3
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: NEG
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: NEG
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: LIST
68398: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68399: LD_ADDR_VAR 0 23
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: LD_INT 3
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: LD_INT 4
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: LD_INT 3
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: LIST
68442: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68443: LD_ADDR_VAR 0 24
68447: PUSH
68448: LD_INT 3
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: LD_INT 1
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 4
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68484: LD_ADDR_VAR 0 25
68488: PUSH
68489: LD_INT 3
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 4
68501: PUSH
68502: LD_INT 3
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 3
68511: PUSH
68512: LD_INT 4
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: LIST
68523: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68524: LD_ADDR_VAR 0 26
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: LD_INT 3
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: LD_INT 4
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: PUSH
68553: LD_INT 3
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68565: LD_ADDR_VAR 0 27
68569: PUSH
68570: LD_INT 3
68572: NEG
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 3
68583: NEG
68584: PUSH
68585: LD_INT 1
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 4
68594: NEG
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68609: LD_ADDR_VAR 0 28
68613: PUSH
68614: LD_INT 3
68616: NEG
68617: PUSH
68618: LD_INT 3
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 3
68628: NEG
68629: PUSH
68630: LD_INT 4
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 4
68640: NEG
68641: PUSH
68642: LD_INT 3
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68655: LD_ADDR_VAR 0 29
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: LD_INT 3
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: LD_INT 3
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 1
68685: PUSH
68686: LD_INT 2
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: PUSH
68698: LD_INT 4
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 4
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 1
68719: PUSH
68720: LD_INT 3
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: LD_INT 5
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 5
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 1
68753: PUSH
68754: LD_INT 4
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 1
68764: NEG
68765: PUSH
68766: LD_INT 6
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 0
68776: PUSH
68777: LD_INT 6
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 1
68787: PUSH
68788: LD_INT 5
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68810: LD_ADDR_VAR 0 30
68814: PUSH
68815: LD_INT 2
68817: PUSH
68818: LD_INT 1
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 3
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 3
68838: PUSH
68839: LD_INT 1
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 4
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 4
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 5
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 5
68900: PUSH
68901: LD_INT 1
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 5
68910: PUSH
68911: LD_INT 1
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 6
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 6
68931: PUSH
68932: LD_INT 1
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68953: LD_ADDR_VAR 0 31
68957: PUSH
68958: LD_INT 3
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 3
68970: PUSH
68971: LD_INT 3
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: LD_INT 3
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 4
68990: PUSH
68991: LD_INT 3
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 4
69000: PUSH
69001: LD_INT 4
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 3
69010: PUSH
69011: LD_INT 4
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 5
69020: PUSH
69021: LD_INT 4
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 5
69030: PUSH
69031: LD_INT 5
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 4
69040: PUSH
69041: LD_INT 5
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 6
69050: PUSH
69051: LD_INT 5
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 6
69060: PUSH
69061: LD_INT 6
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 5
69070: PUSH
69071: LD_INT 6
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69092: LD_ADDR_VAR 0 32
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: LD_INT 3
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: LD_INT 2
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 1
69130: PUSH
69131: LD_INT 4
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: LD_INT 4
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: LD_INT 3
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 1
69161: PUSH
69162: LD_INT 5
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: LD_INT 5
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: LD_INT 4
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 1
69192: PUSH
69193: LD_INT 6
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: LD_INT 6
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 1
69212: NEG
69213: PUSH
69214: LD_INT 5
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69235: LD_ADDR_VAR 0 33
69239: PUSH
69240: LD_INT 2
69242: NEG
69243: PUSH
69244: LD_INT 1
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 3
69253: NEG
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 3
69264: NEG
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 4
69287: NEG
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 4
69298: NEG
69299: PUSH
69300: LD_INT 1
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 4
69310: NEG
69311: PUSH
69312: LD_INT 1
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 5
69321: NEG
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 5
69332: NEG
69333: PUSH
69334: LD_INT 1
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 5
69344: NEG
69345: PUSH
69346: LD_INT 1
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 6
69355: NEG
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 6
69366: NEG
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69390: LD_ADDR_VAR 0 34
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: LD_INT 3
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 3
69421: NEG
69422: PUSH
69423: LD_INT 3
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 3
69433: NEG
69434: PUSH
69435: LD_INT 4
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 4
69445: NEG
69446: PUSH
69447: LD_INT 3
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 4
69457: NEG
69458: PUSH
69459: LD_INT 4
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 4
69469: NEG
69470: PUSH
69471: LD_INT 5
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 5
69481: NEG
69482: PUSH
69483: LD_INT 4
69485: NEG
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 5
69493: NEG
69494: PUSH
69495: LD_INT 5
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 5
69505: NEG
69506: PUSH
69507: LD_INT 6
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 6
69517: NEG
69518: PUSH
69519: LD_INT 5
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 6
69529: NEG
69530: PUSH
69531: LD_INT 6
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69553: LD_ADDR_VAR 0 41
69557: PUSH
69558: LD_INT 0
69560: PUSH
69561: LD_INT 2
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 1
69571: NEG
69572: PUSH
69573: LD_INT 3
69575: NEG
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 1
69583: PUSH
69584: LD_INT 2
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69597: LD_ADDR_VAR 0 42
69601: PUSH
69602: LD_INT 2
69604: PUSH
69605: LD_INT 0
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 2
69614: PUSH
69615: LD_INT 1
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 3
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69638: LD_ADDR_VAR 0 43
69642: PUSH
69643: LD_INT 2
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 3
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 2
69665: PUSH
69666: LD_INT 3
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: LIST
69677: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69678: LD_ADDR_VAR 0 44
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_INT 2
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 1
69705: NEG
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: LIST
69718: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69719: LD_ADDR_VAR 0 45
69723: PUSH
69724: LD_INT 2
69726: NEG
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: LD_INT 1
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 3
69748: NEG
69749: PUSH
69750: LD_INT 1
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: LIST
69762: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69763: LD_ADDR_VAR 0 46
69767: PUSH
69768: LD_INT 2
69770: NEG
69771: PUSH
69772: LD_INT 2
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 2
69782: NEG
69783: PUSH
69784: LD_INT 3
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 3
69794: NEG
69795: PUSH
69796: LD_INT 2
69798: NEG
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: LIST
69808: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69809: LD_ADDR_VAR 0 47
69813: PUSH
69814: LD_INT 2
69816: NEG
69817: PUSH
69818: LD_INT 3
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 1
69828: NEG
69829: PUSH
69830: LD_INT 3
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69842: LD_ADDR_VAR 0 48
69846: PUSH
69847: LD_INT 1
69849: PUSH
69850: LD_INT 2
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: LD_INT 1
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69873: LD_ADDR_VAR 0 49
69877: PUSH
69878: LD_INT 3
69880: PUSH
69881: LD_INT 1
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: LD_INT 2
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69902: LD_ADDR_VAR 0 50
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 1
69919: PUSH
69920: LD_INT 3
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69931: LD_ADDR_VAR 0 51
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 2
69949: NEG
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69962: LD_ADDR_VAR 0 52
69966: PUSH
69967: LD_INT 3
69969: NEG
69970: PUSH
69971: LD_INT 1
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 3
69981: NEG
69982: PUSH
69983: LD_INT 2
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69995: LD_ADDR_VAR 0 53
69999: PUSH
70000: LD_INT 1
70002: NEG
70003: PUSH
70004: LD_INT 3
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: LD_INT 3
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 1
70025: PUSH
70026: LD_INT 2
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: LIST
70038: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70039: LD_ADDR_VAR 0 54
70043: PUSH
70044: LD_INT 2
70046: PUSH
70047: LD_INT 1
70049: NEG
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 3
70067: PUSH
70068: LD_INT 1
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: LIST
70079: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70080: LD_ADDR_VAR 0 55
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: LD_INT 2
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 3
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 2
70107: PUSH
70108: LD_INT 3
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: LIST
70119: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70120: LD_ADDR_VAR 0 56
70124: PUSH
70125: LD_INT 1
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: LD_INT 3
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 1
70147: NEG
70148: PUSH
70149: LD_INT 2
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70161: LD_ADDR_VAR 0 57
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: NEG
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 3
70190: NEG
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: LIST
70204: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70205: LD_ADDR_VAR 0 58
70209: PUSH
70210: LD_INT 2
70212: NEG
70213: PUSH
70214: LD_INT 3
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: NEG
70225: PUSH
70226: LD_INT 2
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 3
70236: NEG
70237: PUSH
70238: LD_INT 3
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70251: LD_ADDR_VAR 0 59
70255: PUSH
70256: LD_INT 1
70258: NEG
70259: PUSH
70260: LD_INT 2
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: LD_INT 2
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 1
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: LIST
70294: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70295: LD_ADDR_VAR 0 60
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: LD_INT 0
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 2
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70336: LD_ADDR_VAR 0 61
70340: PUSH
70341: LD_INT 2
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 2
70353: PUSH
70354: LD_INT 2
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 2
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: LIST
70375: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70376: LD_ADDR_VAR 0 62
70380: PUSH
70381: LD_INT 1
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: LD_INT 2
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 1
70403: NEG
70404: PUSH
70405: LD_INT 1
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: LIST
70416: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70417: LD_ADDR_VAR 0 63
70421: PUSH
70422: LD_INT 1
70424: NEG
70425: PUSH
70426: LD_INT 1
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 2
70435: NEG
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 2
70446: NEG
70447: PUSH
70448: LD_INT 1
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70461: LD_ADDR_VAR 0 64
70465: PUSH
70466: LD_INT 1
70468: NEG
70469: PUSH
70470: LD_INT 2
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 2
70480: NEG
70481: PUSH
70482: LD_INT 1
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 2
70492: NEG
70493: PUSH
70494: LD_INT 2
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: LIST
70506: ST_TO_ADDR
// end ; 2 :
70507: GO 73773
70509: LD_INT 2
70511: DOUBLE
70512: EQUAL
70513: IFTRUE 70517
70515: GO 73772
70517: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70518: LD_ADDR_VAR 0 29
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: LD_INT 1
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 5
70546: PUSH
70547: LD_INT 0
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 5
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 4
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 3
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: LD_INT 1
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 3
70597: PUSH
70598: LD_INT 2
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: LD_INT 2
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: LD_INT 3
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 3
70628: PUSH
70629: LD_INT 2
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 4
70638: PUSH
70639: LD_INT 3
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: LD_INT 4
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 3
70658: PUSH
70659: LD_INT 4
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 2
70668: PUSH
70669: LD_INT 3
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: LD_INT 2
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: LD_INT 2
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 2
70698: PUSH
70699: LD_INT 4
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: LD_INT 4
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 0
70718: PUSH
70719: LD_INT 3
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 1
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 1
70738: PUSH
70739: LD_INT 5
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: LD_INT 5
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 1
70758: NEG
70759: PUSH
70760: LD_INT 4
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 1
70769: NEG
70770: PUSH
70771: LD_INT 3
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 2
70780: PUSH
70781: LD_INT 5
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 2
70790: NEG
70791: PUSH
70792: LD_INT 3
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 3
70812: NEG
70813: PUSH
70814: LD_INT 1
70816: NEG
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 2
70824: NEG
70825: PUSH
70826: LD_INT 0
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 2
70835: NEG
70836: PUSH
70837: LD_INT 1
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 3
70846: NEG
70847: PUSH
70848: LD_INT 1
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 4
70857: NEG
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 4
70868: NEG
70869: PUSH
70870: LD_INT 1
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 4
70880: NEG
70881: PUSH
70882: LD_INT 2
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: NEG
70893: PUSH
70894: LD_INT 2
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 4
70903: NEG
70904: PUSH
70905: LD_INT 4
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 4
70915: NEG
70916: PUSH
70917: LD_INT 5
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 3
70927: NEG
70928: PUSH
70929: LD_INT 4
70931: NEG
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 3
70939: NEG
70940: PUSH
70941: LD_INT 3
70943: NEG
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 4
70951: NEG
70952: PUSH
70953: LD_INT 3
70955: NEG
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 5
70963: NEG
70964: PUSH
70965: LD_INT 4
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 5
70975: NEG
70976: PUSH
70977: LD_INT 5
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: NEG
70988: PUSH
70989: LD_INT 5
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 5
70999: NEG
71000: PUSH
71001: LD_INT 3
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71056: LD_ADDR_VAR 0 30
71060: PUSH
71061: LD_INT 4
71063: PUSH
71064: LD_INT 4
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 4
71073: PUSH
71074: LD_INT 3
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 5
71083: PUSH
71084: LD_INT 4
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 5
71093: PUSH
71094: LD_INT 5
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: PUSH
71104: LD_INT 5
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 3
71113: PUSH
71114: LD_INT 4
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 3
71123: PUSH
71124: LD_INT 3
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 5
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 3
71143: PUSH
71144: LD_INT 5
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 0
71153: PUSH
71154: LD_INT 3
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 0
71163: PUSH
71164: LD_INT 2
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 1
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 1
71183: PUSH
71184: LD_INT 4
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: LD_INT 4
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 1
71203: NEG
71204: PUSH
71205: LD_INT 3
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 1
71214: NEG
71215: PUSH
71216: LD_INT 2
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 2
71225: PUSH
71226: LD_INT 4
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 2
71235: NEG
71236: PUSH
71237: LD_INT 2
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 4
71246: NEG
71247: PUSH
71248: LD_INT 0
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 4
71257: NEG
71258: PUSH
71259: LD_INT 1
71261: NEG
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 3
71269: NEG
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 4
71291: NEG
71292: PUSH
71293: LD_INT 1
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 5
71302: NEG
71303: PUSH
71304: LD_INT 0
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 5
71313: NEG
71314: PUSH
71315: LD_INT 1
71317: NEG
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 5
71325: NEG
71326: PUSH
71327: LD_INT 2
71329: NEG
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 3
71337: NEG
71338: PUSH
71339: LD_INT 2
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: NEG
71349: PUSH
71350: LD_INT 3
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 3
71360: NEG
71361: PUSH
71362: LD_INT 4
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 2
71372: NEG
71373: PUSH
71374: LD_INT 3
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 2
71384: NEG
71385: PUSH
71386: LD_INT 2
71388: NEG
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 3
71396: NEG
71397: PUSH
71398: LD_INT 2
71400: NEG
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 4
71408: NEG
71409: PUSH
71410: LD_INT 3
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 4
71420: NEG
71421: PUSH
71422: LD_INT 4
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 2
71432: NEG
71433: PUSH
71434: LD_INT 4
71436: NEG
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 4
71444: NEG
71445: PUSH
71446: LD_INT 2
71448: NEG
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 4
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: LD_INT 5
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: LD_INT 4
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 1
71489: PUSH
71490: LD_INT 3
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 0
71500: PUSH
71501: LD_INT 3
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 1
71511: NEG
71512: PUSH
71513: LD_INT 4
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 1
71523: NEG
71524: PUSH
71525: LD_INT 5
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: PUSH
71536: LD_INT 3
71538: NEG
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 2
71546: NEG
71547: PUSH
71548: LD_INT 5
71550: NEG
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71603: LD_ADDR_VAR 0 31
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: LD_INT 4
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: LD_INT 3
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 1
71630: PUSH
71631: LD_INT 4
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 1
71640: PUSH
71641: LD_INT 5
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 0
71650: PUSH
71651: LD_INT 5
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 1
71660: NEG
71661: PUSH
71662: LD_INT 4
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 1
71671: NEG
71672: PUSH
71673: LD_INT 3
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 2
71682: PUSH
71683: LD_INT 5
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 2
71692: NEG
71693: PUSH
71694: LD_INT 3
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: LD_INT 0
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 3
71714: NEG
71715: PUSH
71716: LD_INT 1
71718: NEG
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 2
71726: NEG
71727: PUSH
71728: LD_INT 0
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 2
71737: NEG
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 3
71748: NEG
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 4
71759: NEG
71760: PUSH
71761: LD_INT 0
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 4
71770: NEG
71771: PUSH
71772: LD_INT 1
71774: NEG
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 4
71782: NEG
71783: PUSH
71784: LD_INT 2
71786: NEG
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 2
71794: NEG
71795: PUSH
71796: LD_INT 2
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 4
71805: NEG
71806: PUSH
71807: LD_INT 4
71809: NEG
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 4
71817: NEG
71818: PUSH
71819: LD_INT 5
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 3
71829: NEG
71830: PUSH
71831: LD_INT 4
71833: NEG
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 3
71841: NEG
71842: PUSH
71843: LD_INT 3
71845: NEG
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 4
71853: NEG
71854: PUSH
71855: LD_INT 3
71857: NEG
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 5
71865: NEG
71866: PUSH
71867: LD_INT 4
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 5
71877: NEG
71878: PUSH
71879: LD_INT 5
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 3
71889: NEG
71890: PUSH
71891: LD_INT 5
71893: NEG
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 5
71901: NEG
71902: PUSH
71903: LD_INT 3
71905: NEG
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 0
71913: PUSH
71914: LD_INT 3
71916: NEG
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: LD_INT 4
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 1
71935: PUSH
71936: LD_INT 3
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 1
71946: PUSH
71947: LD_INT 2
71949: NEG
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 0
71957: PUSH
71958: LD_INT 2
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 1
71968: NEG
71969: PUSH
71970: LD_INT 3
71972: NEG
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 1
71980: NEG
71981: PUSH
71982: LD_INT 4
71984: NEG
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 2
71992: PUSH
71993: LD_INT 2
71995: NEG
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: NEG
72004: PUSH
72005: LD_INT 4
72007: NEG
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 4
72015: PUSH
72016: LD_INT 0
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 4
72025: PUSH
72026: LD_INT 1
72028: NEG
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 5
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 5
72046: PUSH
72047: LD_INT 1
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 4
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 3
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 3
72076: PUSH
72077: LD_INT 1
72079: NEG
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 3
72087: PUSH
72088: LD_INT 2
72090: NEG
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 5
72098: PUSH
72099: LD_INT 2
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72153: LD_ADDR_VAR 0 32
72157: PUSH
72158: LD_INT 4
72160: NEG
72161: PUSH
72162: LD_INT 0
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 4
72171: NEG
72172: PUSH
72173: LD_INT 1
72175: NEG
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 3
72183: NEG
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: LD_INT 1
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 4
72205: NEG
72206: PUSH
72207: LD_INT 1
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 5
72216: NEG
72217: PUSH
72218: LD_INT 0
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 5
72227: NEG
72228: PUSH
72229: LD_INT 1
72231: NEG
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 5
72239: NEG
72240: PUSH
72241: LD_INT 2
72243: NEG
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 3
72251: NEG
72252: PUSH
72253: LD_INT 2
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 3
72262: NEG
72263: PUSH
72264: LD_INT 3
72266: NEG
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 3
72274: NEG
72275: PUSH
72276: LD_INT 4
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 2
72286: NEG
72287: PUSH
72288: LD_INT 3
72290: NEG
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 2
72298: NEG
72299: PUSH
72300: LD_INT 2
72302: NEG
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 3
72310: NEG
72311: PUSH
72312: LD_INT 2
72314: NEG
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: LD_INT 4
72322: NEG
72323: PUSH
72324: LD_INT 3
72326: NEG
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 4
72334: NEG
72335: PUSH
72336: LD_INT 4
72338: NEG
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 2
72346: NEG
72347: PUSH
72348: LD_INT 4
72350: NEG
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 4
72358: NEG
72359: PUSH
72360: LD_INT 2
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 0
72370: PUSH
72371: LD_INT 4
72373: NEG
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: LD_INT 5
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 1
72392: PUSH
72393: LD_INT 4
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: LD_INT 3
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: LD_INT 3
72417: NEG
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 1
72425: NEG
72426: PUSH
72427: LD_INT 4
72429: NEG
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 1
72437: NEG
72438: PUSH
72439: LD_INT 5
72441: NEG
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 2
72449: PUSH
72450: LD_INT 3
72452: NEG
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 2
72460: NEG
72461: PUSH
72462: LD_INT 5
72464: NEG
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 3
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 3
72482: PUSH
72483: LD_INT 1
72485: NEG
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 4
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 4
72503: PUSH
72504: LD_INT 1
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 3
72513: PUSH
72514: LD_INT 1
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 2
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 2
72533: PUSH
72534: LD_INT 1
72536: NEG
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 2
72544: PUSH
72545: LD_INT 2
72547: NEG
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 4
72555: PUSH
72556: LD_INT 2
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 4
72565: PUSH
72566: LD_INT 4
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 4
72575: PUSH
72576: LD_INT 3
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 5
72585: PUSH
72586: LD_INT 4
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 5
72595: PUSH
72596: LD_INT 5
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 4
72605: PUSH
72606: LD_INT 5
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 3
72615: PUSH
72616: LD_INT 4
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 3
72625: PUSH
72626: LD_INT 3
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 5
72635: PUSH
72636: LD_INT 3
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 3
72645: PUSH
72646: LD_INT 5
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72700: LD_ADDR_VAR 0 33
72704: PUSH
72705: LD_INT 4
72707: NEG
72708: PUSH
72709: LD_INT 4
72711: NEG
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 4
72719: NEG
72720: PUSH
72721: LD_INT 5
72723: NEG
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 3
72731: NEG
72732: PUSH
72733: LD_INT 4
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 3
72743: NEG
72744: PUSH
72745: LD_INT 3
72747: NEG
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 4
72755: NEG
72756: PUSH
72757: LD_INT 3
72759: NEG
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 5
72767: NEG
72768: PUSH
72769: LD_INT 4
72771: NEG
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 5
72779: NEG
72780: PUSH
72781: LD_INT 5
72783: NEG
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 3
72791: NEG
72792: PUSH
72793: LD_INT 5
72795: NEG
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 5
72803: NEG
72804: PUSH
72805: LD_INT 3
72807: NEG
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 0
72815: PUSH
72816: LD_INT 3
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 0
72826: PUSH
72827: LD_INT 4
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 1
72837: PUSH
72838: LD_INT 3
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 1
72848: PUSH
72849: LD_INT 2
72851: NEG
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 0
72859: PUSH
72860: LD_INT 2
72862: NEG
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 1
72870: NEG
72871: PUSH
72872: LD_INT 3
72874: NEG
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 1
72882: NEG
72883: PUSH
72884: LD_INT 4
72886: NEG
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 2
72894: PUSH
72895: LD_INT 2
72897: NEG
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 2
72905: NEG
72906: PUSH
72907: LD_INT 4
72909: NEG
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 4
72917: PUSH
72918: LD_INT 0
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_INT 4
72927: PUSH
72928: LD_INT 1
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 5
72938: PUSH
72939: LD_INT 0
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 5
72948: PUSH
72949: LD_INT 1
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 4
72958: PUSH
72959: LD_INT 1
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 3
72968: PUSH
72969: LD_INT 0
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 3
72978: PUSH
72979: LD_INT 1
72981: NEG
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 3
72989: PUSH
72990: LD_INT 2
72992: NEG
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 5
73000: PUSH
73001: LD_INT 2
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 3
73010: PUSH
73011: LD_INT 3
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 3
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 4
73030: PUSH
73031: LD_INT 3
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 4
73040: PUSH
73041: LD_INT 4
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 3
73050: PUSH
73051: LD_INT 4
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 2
73060: PUSH
73061: LD_INT 3
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 2
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 4
73080: PUSH
73081: LD_INT 2
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 2
73090: PUSH
73091: LD_INT 4
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_INT 0
73100: PUSH
73101: LD_INT 4
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 0
73110: PUSH
73111: LD_INT 3
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 1
73120: PUSH
73121: LD_INT 4
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 1
73130: PUSH
73131: LD_INT 5
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 0
73140: PUSH
73141: LD_INT 5
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 1
73150: NEG
73151: PUSH
73152: LD_INT 4
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 1
73161: NEG
73162: PUSH
73163: LD_INT 3
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 2
73172: PUSH
73173: LD_INT 5
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 2
73182: NEG
73183: PUSH
73184: LD_INT 3
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73238: LD_ADDR_VAR 0 34
73242: PUSH
73243: LD_INT 0
73245: PUSH
73246: LD_INT 4
73248: NEG
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: LD_INT 0
73256: PUSH
73257: LD_INT 5
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 1
73267: PUSH
73268: LD_INT 4
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 1
73278: PUSH
73279: LD_INT 3
73281: NEG
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 0
73289: PUSH
73290: LD_INT 3
73292: NEG
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 1
73300: NEG
73301: PUSH
73302: LD_INT 4
73304: NEG
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 1
73312: NEG
73313: PUSH
73314: LD_INT 5
73316: NEG
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 2
73324: PUSH
73325: LD_INT 3
73327: NEG
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: LD_INT 2
73335: NEG
73336: PUSH
73337: LD_INT 5
73339: NEG
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 3
73347: PUSH
73348: LD_INT 0
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 3
73357: PUSH
73358: LD_INT 1
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 4
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 4
73378: PUSH
73379: LD_INT 1
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 3
73388: PUSH
73389: LD_INT 1
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 2
73398: PUSH
73399: LD_INT 0
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 2
73408: PUSH
73409: LD_INT 1
73411: NEG
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 2
73419: PUSH
73420: LD_INT 2
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 4
73430: PUSH
73431: LD_INT 2
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 4
73440: PUSH
73441: LD_INT 4
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 4
73450: PUSH
73451: LD_INT 3
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 5
73460: PUSH
73461: LD_INT 4
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: PUSH
73468: LD_INT 5
73470: PUSH
73471: LD_INT 5
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 4
73480: PUSH
73481: LD_INT 5
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 3
73490: PUSH
73491: LD_INT 4
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 3
73500: PUSH
73501: LD_INT 3
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 5
73510: PUSH
73511: LD_INT 3
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 3
73520: PUSH
73521: LD_INT 5
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 0
73530: PUSH
73531: LD_INT 3
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 0
73540: PUSH
73541: LD_INT 2
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: PUSH
73548: LD_INT 1
73550: PUSH
73551: LD_INT 3
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 1
73560: PUSH
73561: LD_INT 4
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: LD_INT 4
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 1
73580: NEG
73581: PUSH
73582: LD_INT 3
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 1
73591: NEG
73592: PUSH
73593: LD_INT 2
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 2
73602: PUSH
73603: LD_INT 4
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 2
73612: NEG
73613: PUSH
73614: LD_INT 2
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 4
73623: NEG
73624: PUSH
73625: LD_INT 0
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 4
73634: NEG
73635: PUSH
73636: LD_INT 1
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 3
73646: NEG
73647: PUSH
73648: LD_INT 0
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 3
73657: NEG
73658: PUSH
73659: LD_INT 1
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 4
73668: NEG
73669: PUSH
73670: LD_INT 1
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 5
73679: NEG
73680: PUSH
73681: LD_INT 0
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 5
73690: NEG
73691: PUSH
73692: LD_INT 1
73694: NEG
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 5
73702: NEG
73703: PUSH
73704: LD_INT 2
73706: NEG
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 3
73714: NEG
73715: PUSH
73716: LD_INT 2
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: ST_TO_ADDR
// end ; end ;
73770: GO 73773
73772: POP
// case btype of b_depot , b_warehouse :
73773: LD_VAR 0 1
73777: PUSH
73778: LD_INT 0
73780: DOUBLE
73781: EQUAL
73782: IFTRUE 73792
73784: LD_INT 1
73786: DOUBLE
73787: EQUAL
73788: IFTRUE 73792
73790: GO 73993
73792: POP
// case nation of nation_american :
73793: LD_VAR 0 5
73797: PUSH
73798: LD_INT 1
73800: DOUBLE
73801: EQUAL
73802: IFTRUE 73806
73804: GO 73862
73806: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73807: LD_ADDR_VAR 0 9
73811: PUSH
73812: LD_VAR 0 11
73816: PUSH
73817: LD_VAR 0 12
73821: PUSH
73822: LD_VAR 0 13
73826: PUSH
73827: LD_VAR 0 14
73831: PUSH
73832: LD_VAR 0 15
73836: PUSH
73837: LD_VAR 0 16
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: PUSH
73850: LD_VAR 0 4
73854: PUSH
73855: LD_INT 1
73857: PLUS
73858: ARRAY
73859: ST_TO_ADDR
73860: GO 73991
73862: LD_INT 2
73864: DOUBLE
73865: EQUAL
73866: IFTRUE 73870
73868: GO 73926
73870: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73871: LD_ADDR_VAR 0 9
73875: PUSH
73876: LD_VAR 0 17
73880: PUSH
73881: LD_VAR 0 18
73885: PUSH
73886: LD_VAR 0 19
73890: PUSH
73891: LD_VAR 0 20
73895: PUSH
73896: LD_VAR 0 21
73900: PUSH
73901: LD_VAR 0 22
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: PUSH
73914: LD_VAR 0 4
73918: PUSH
73919: LD_INT 1
73921: PLUS
73922: ARRAY
73923: ST_TO_ADDR
73924: GO 73991
73926: LD_INT 3
73928: DOUBLE
73929: EQUAL
73930: IFTRUE 73934
73932: GO 73990
73934: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73935: LD_ADDR_VAR 0 9
73939: PUSH
73940: LD_VAR 0 23
73944: PUSH
73945: LD_VAR 0 24
73949: PUSH
73950: LD_VAR 0 25
73954: PUSH
73955: LD_VAR 0 26
73959: PUSH
73960: LD_VAR 0 27
73964: PUSH
73965: LD_VAR 0 28
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: PUSH
73978: LD_VAR 0 4
73982: PUSH
73983: LD_INT 1
73985: PLUS
73986: ARRAY
73987: ST_TO_ADDR
73988: GO 73991
73990: POP
73991: GO 74546
73993: LD_INT 2
73995: DOUBLE
73996: EQUAL
73997: IFTRUE 74007
73999: LD_INT 3
74001: DOUBLE
74002: EQUAL
74003: IFTRUE 74007
74005: GO 74063
74007: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74008: LD_ADDR_VAR 0 9
74012: PUSH
74013: LD_VAR 0 29
74017: PUSH
74018: LD_VAR 0 30
74022: PUSH
74023: LD_VAR 0 31
74027: PUSH
74028: LD_VAR 0 32
74032: PUSH
74033: LD_VAR 0 33
74037: PUSH
74038: LD_VAR 0 34
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: PUSH
74051: LD_VAR 0 4
74055: PUSH
74056: LD_INT 1
74058: PLUS
74059: ARRAY
74060: ST_TO_ADDR
74061: GO 74546
74063: LD_INT 16
74065: DOUBLE
74066: EQUAL
74067: IFTRUE 74125
74069: LD_INT 17
74071: DOUBLE
74072: EQUAL
74073: IFTRUE 74125
74075: LD_INT 18
74077: DOUBLE
74078: EQUAL
74079: IFTRUE 74125
74081: LD_INT 19
74083: DOUBLE
74084: EQUAL
74085: IFTRUE 74125
74087: LD_INT 22
74089: DOUBLE
74090: EQUAL
74091: IFTRUE 74125
74093: LD_INT 20
74095: DOUBLE
74096: EQUAL
74097: IFTRUE 74125
74099: LD_INT 21
74101: DOUBLE
74102: EQUAL
74103: IFTRUE 74125
74105: LD_INT 23
74107: DOUBLE
74108: EQUAL
74109: IFTRUE 74125
74111: LD_INT 24
74113: DOUBLE
74114: EQUAL
74115: IFTRUE 74125
74117: LD_INT 25
74119: DOUBLE
74120: EQUAL
74121: IFTRUE 74125
74123: GO 74181
74125: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74126: LD_ADDR_VAR 0 9
74130: PUSH
74131: LD_VAR 0 35
74135: PUSH
74136: LD_VAR 0 36
74140: PUSH
74141: LD_VAR 0 37
74145: PUSH
74146: LD_VAR 0 38
74150: PUSH
74151: LD_VAR 0 39
74155: PUSH
74156: LD_VAR 0 40
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: LIST
74165: LIST
74166: LIST
74167: LIST
74168: PUSH
74169: LD_VAR 0 4
74173: PUSH
74174: LD_INT 1
74176: PLUS
74177: ARRAY
74178: ST_TO_ADDR
74179: GO 74546
74181: LD_INT 6
74183: DOUBLE
74184: EQUAL
74185: IFTRUE 74237
74187: LD_INT 7
74189: DOUBLE
74190: EQUAL
74191: IFTRUE 74237
74193: LD_INT 8
74195: DOUBLE
74196: EQUAL
74197: IFTRUE 74237
74199: LD_INT 13
74201: DOUBLE
74202: EQUAL
74203: IFTRUE 74237
74205: LD_INT 12
74207: DOUBLE
74208: EQUAL
74209: IFTRUE 74237
74211: LD_INT 15
74213: DOUBLE
74214: EQUAL
74215: IFTRUE 74237
74217: LD_INT 11
74219: DOUBLE
74220: EQUAL
74221: IFTRUE 74237
74223: LD_INT 14
74225: DOUBLE
74226: EQUAL
74227: IFTRUE 74237
74229: LD_INT 10
74231: DOUBLE
74232: EQUAL
74233: IFTRUE 74237
74235: GO 74293
74237: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74238: LD_ADDR_VAR 0 9
74242: PUSH
74243: LD_VAR 0 41
74247: PUSH
74248: LD_VAR 0 42
74252: PUSH
74253: LD_VAR 0 43
74257: PUSH
74258: LD_VAR 0 44
74262: PUSH
74263: LD_VAR 0 45
74267: PUSH
74268: LD_VAR 0 46
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: PUSH
74281: LD_VAR 0 4
74285: PUSH
74286: LD_INT 1
74288: PLUS
74289: ARRAY
74290: ST_TO_ADDR
74291: GO 74546
74293: LD_INT 36
74295: DOUBLE
74296: EQUAL
74297: IFTRUE 74301
74299: GO 74357
74301: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74302: LD_ADDR_VAR 0 9
74306: PUSH
74307: LD_VAR 0 47
74311: PUSH
74312: LD_VAR 0 48
74316: PUSH
74317: LD_VAR 0 49
74321: PUSH
74322: LD_VAR 0 50
74326: PUSH
74327: LD_VAR 0 51
74331: PUSH
74332: LD_VAR 0 52
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: PUSH
74345: LD_VAR 0 4
74349: PUSH
74350: LD_INT 1
74352: PLUS
74353: ARRAY
74354: ST_TO_ADDR
74355: GO 74546
74357: LD_INT 4
74359: DOUBLE
74360: EQUAL
74361: IFTRUE 74383
74363: LD_INT 5
74365: DOUBLE
74366: EQUAL
74367: IFTRUE 74383
74369: LD_INT 34
74371: DOUBLE
74372: EQUAL
74373: IFTRUE 74383
74375: LD_INT 37
74377: DOUBLE
74378: EQUAL
74379: IFTRUE 74383
74381: GO 74439
74383: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74384: LD_ADDR_VAR 0 9
74388: PUSH
74389: LD_VAR 0 53
74393: PUSH
74394: LD_VAR 0 54
74398: PUSH
74399: LD_VAR 0 55
74403: PUSH
74404: LD_VAR 0 56
74408: PUSH
74409: LD_VAR 0 57
74413: PUSH
74414: LD_VAR 0 58
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: PUSH
74427: LD_VAR 0 4
74431: PUSH
74432: LD_INT 1
74434: PLUS
74435: ARRAY
74436: ST_TO_ADDR
74437: GO 74546
74439: LD_INT 31
74441: DOUBLE
74442: EQUAL
74443: IFTRUE 74489
74445: LD_INT 32
74447: DOUBLE
74448: EQUAL
74449: IFTRUE 74489
74451: LD_INT 33
74453: DOUBLE
74454: EQUAL
74455: IFTRUE 74489
74457: LD_INT 27
74459: DOUBLE
74460: EQUAL
74461: IFTRUE 74489
74463: LD_INT 26
74465: DOUBLE
74466: EQUAL
74467: IFTRUE 74489
74469: LD_INT 28
74471: DOUBLE
74472: EQUAL
74473: IFTRUE 74489
74475: LD_INT 29
74477: DOUBLE
74478: EQUAL
74479: IFTRUE 74489
74481: LD_INT 30
74483: DOUBLE
74484: EQUAL
74485: IFTRUE 74489
74487: GO 74545
74489: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74490: LD_ADDR_VAR 0 9
74494: PUSH
74495: LD_VAR 0 59
74499: PUSH
74500: LD_VAR 0 60
74504: PUSH
74505: LD_VAR 0 61
74509: PUSH
74510: LD_VAR 0 62
74514: PUSH
74515: LD_VAR 0 63
74519: PUSH
74520: LD_VAR 0 64
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: PUSH
74533: LD_VAR 0 4
74537: PUSH
74538: LD_INT 1
74540: PLUS
74541: ARRAY
74542: ST_TO_ADDR
74543: GO 74546
74545: POP
// temp_list2 = [ ] ;
74546: LD_ADDR_VAR 0 10
74550: PUSH
74551: EMPTY
74552: ST_TO_ADDR
// for i in temp_list do
74553: LD_ADDR_VAR 0 8
74557: PUSH
74558: LD_VAR 0 9
74562: PUSH
74563: FOR_IN
74564: IFFALSE 74616
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74566: LD_ADDR_VAR 0 10
74570: PUSH
74571: LD_VAR 0 10
74575: PUSH
74576: LD_VAR 0 8
74580: PUSH
74581: LD_INT 1
74583: ARRAY
74584: PUSH
74585: LD_VAR 0 2
74589: PLUS
74590: PUSH
74591: LD_VAR 0 8
74595: PUSH
74596: LD_INT 2
74598: ARRAY
74599: PUSH
74600: LD_VAR 0 3
74604: PLUS
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: EMPTY
74611: LIST
74612: ADD
74613: ST_TO_ADDR
74614: GO 74563
74616: POP
74617: POP
// result = temp_list2 ;
74618: LD_ADDR_VAR 0 7
74622: PUSH
74623: LD_VAR 0 10
74627: ST_TO_ADDR
// end ;
74628: LD_VAR 0 7
74632: RET
// export function EnemyInRange ( unit , dist ) ; begin
74633: LD_INT 0
74635: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74636: LD_ADDR_VAR 0 3
74640: PUSH
74641: LD_VAR 0 1
74645: PPUSH
74646: CALL_OW 255
74650: PPUSH
74651: LD_VAR 0 1
74655: PPUSH
74656: CALL_OW 250
74660: PPUSH
74661: LD_VAR 0 1
74665: PPUSH
74666: CALL_OW 251
74670: PPUSH
74671: LD_VAR 0 2
74675: PPUSH
74676: CALL 48006 0 4
74680: PUSH
74681: LD_INT 4
74683: ARRAY
74684: ST_TO_ADDR
// end ;
74685: LD_VAR 0 3
74689: RET
// export function PlayerSeeMe ( unit ) ; begin
74690: LD_INT 0
74692: PPUSH
// result := See ( your_side , unit ) ;
74693: LD_ADDR_VAR 0 2
74697: PUSH
74698: LD_OWVAR 2
74702: PPUSH
74703: LD_VAR 0 1
74707: PPUSH
74708: CALL_OW 292
74712: ST_TO_ADDR
// end ;
74713: LD_VAR 0 2
74717: RET
// export function ReverseDir ( unit ) ; begin
74718: LD_INT 0
74720: PPUSH
// if not unit then
74721: LD_VAR 0 1
74725: NOT
74726: IFFALSE 74730
// exit ;
74728: GO 74753
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74730: LD_ADDR_VAR 0 2
74734: PUSH
74735: LD_VAR 0 1
74739: PPUSH
74740: CALL_OW 254
74744: PUSH
74745: LD_INT 3
74747: PLUS
74748: PUSH
74749: LD_INT 6
74751: MOD
74752: ST_TO_ADDR
// end ;
74753: LD_VAR 0 2
74757: RET
// export function ReverseArray ( array ) ; var i ; begin
74758: LD_INT 0
74760: PPUSH
74761: PPUSH
// if not array then
74762: LD_VAR 0 1
74766: NOT
74767: IFFALSE 74771
// exit ;
74769: GO 74826
// result := [ ] ;
74771: LD_ADDR_VAR 0 2
74775: PUSH
74776: EMPTY
74777: ST_TO_ADDR
// for i := array downto 1 do
74778: LD_ADDR_VAR 0 3
74782: PUSH
74783: DOUBLE
74784: LD_VAR 0 1
74788: INC
74789: ST_TO_ADDR
74790: LD_INT 1
74792: PUSH
74793: FOR_DOWNTO
74794: IFFALSE 74824
// result := Join ( result , array [ i ] ) ;
74796: LD_ADDR_VAR 0 2
74800: PUSH
74801: LD_VAR 0 2
74805: PPUSH
74806: LD_VAR 0 1
74810: PUSH
74811: LD_VAR 0 3
74815: ARRAY
74816: PPUSH
74817: CALL 79471 0 2
74821: ST_TO_ADDR
74822: GO 74793
74824: POP
74825: POP
// end ;
74826: LD_VAR 0 2
74830: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74831: LD_INT 0
74833: PPUSH
74834: PPUSH
74835: PPUSH
74836: PPUSH
74837: PPUSH
74838: PPUSH
// if not unit or not hexes then
74839: LD_VAR 0 1
74843: NOT
74844: PUSH
74845: LD_VAR 0 2
74849: NOT
74850: OR
74851: IFFALSE 74855
// exit ;
74853: GO 74978
// dist := 9999 ;
74855: LD_ADDR_VAR 0 5
74859: PUSH
74860: LD_INT 9999
74862: ST_TO_ADDR
// for i = 1 to hexes do
74863: LD_ADDR_VAR 0 4
74867: PUSH
74868: DOUBLE
74869: LD_INT 1
74871: DEC
74872: ST_TO_ADDR
74873: LD_VAR 0 2
74877: PUSH
74878: FOR_TO
74879: IFFALSE 74966
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74881: LD_ADDR_VAR 0 6
74885: PUSH
74886: LD_VAR 0 1
74890: PPUSH
74891: LD_VAR 0 2
74895: PUSH
74896: LD_VAR 0 4
74900: ARRAY
74901: PUSH
74902: LD_INT 1
74904: ARRAY
74905: PPUSH
74906: LD_VAR 0 2
74910: PUSH
74911: LD_VAR 0 4
74915: ARRAY
74916: PUSH
74917: LD_INT 2
74919: ARRAY
74920: PPUSH
74921: CALL_OW 297
74925: ST_TO_ADDR
// if tdist < dist then
74926: LD_VAR 0 6
74930: PUSH
74931: LD_VAR 0 5
74935: LESS
74936: IFFALSE 74964
// begin hex := hexes [ i ] ;
74938: LD_ADDR_VAR 0 8
74942: PUSH
74943: LD_VAR 0 2
74947: PUSH
74948: LD_VAR 0 4
74952: ARRAY
74953: ST_TO_ADDR
// dist := tdist ;
74954: LD_ADDR_VAR 0 5
74958: PUSH
74959: LD_VAR 0 6
74963: ST_TO_ADDR
// end ; end ;
74964: GO 74878
74966: POP
74967: POP
// result := hex ;
74968: LD_ADDR_VAR 0 3
74972: PUSH
74973: LD_VAR 0 8
74977: ST_TO_ADDR
// end ;
74978: LD_VAR 0 3
74982: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74983: LD_INT 0
74985: PPUSH
74986: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74987: LD_VAR 0 1
74991: NOT
74992: PUSH
74993: LD_VAR 0 1
74997: PUSH
74998: LD_INT 21
75000: PUSH
75001: LD_INT 2
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 23
75010: PUSH
75011: LD_INT 2
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PPUSH
75022: CALL_OW 69
75026: IN
75027: NOT
75028: OR
75029: IFFALSE 75033
// exit ;
75031: GO 75080
// for i = 1 to 3 do
75033: LD_ADDR_VAR 0 3
75037: PUSH
75038: DOUBLE
75039: LD_INT 1
75041: DEC
75042: ST_TO_ADDR
75043: LD_INT 3
75045: PUSH
75046: FOR_TO
75047: IFFALSE 75078
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75049: LD_VAR 0 1
75053: PPUSH
75054: CALL_OW 250
75058: PPUSH
75059: LD_VAR 0 1
75063: PPUSH
75064: CALL_OW 251
75068: PPUSH
75069: LD_INT 1
75071: PPUSH
75072: CALL_OW 453
75076: GO 75046
75078: POP
75079: POP
// end ;
75080: LD_VAR 0 2
75084: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75085: LD_INT 0
75087: PPUSH
75088: PPUSH
75089: PPUSH
75090: PPUSH
75091: PPUSH
75092: PPUSH
// if not unit or not enemy_unit then
75093: LD_VAR 0 1
75097: NOT
75098: PUSH
75099: LD_VAR 0 2
75103: NOT
75104: OR
75105: IFFALSE 75109
// exit ;
75107: GO 75576
// if GetLives ( i ) < 250 then
75109: LD_VAR 0 4
75113: PPUSH
75114: CALL_OW 256
75118: PUSH
75119: LD_INT 250
75121: LESS
75122: IFFALSE 75135
// begin ComAutodestruct ( i ) ;
75124: LD_VAR 0 4
75128: PPUSH
75129: CALL 74983 0 1
// exit ;
75133: GO 75576
// end ; x := GetX ( enemy_unit ) ;
75135: LD_ADDR_VAR 0 7
75139: PUSH
75140: LD_VAR 0 2
75144: PPUSH
75145: CALL_OW 250
75149: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75150: LD_ADDR_VAR 0 8
75154: PUSH
75155: LD_VAR 0 2
75159: PPUSH
75160: CALL_OW 251
75164: ST_TO_ADDR
// if not x or not y then
75165: LD_VAR 0 7
75169: NOT
75170: PUSH
75171: LD_VAR 0 8
75175: NOT
75176: OR
75177: IFFALSE 75181
// exit ;
75179: GO 75576
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75181: LD_ADDR_VAR 0 6
75185: PUSH
75186: LD_VAR 0 7
75190: PPUSH
75191: LD_INT 0
75193: PPUSH
75194: LD_INT 4
75196: PPUSH
75197: CALL_OW 272
75201: PUSH
75202: LD_VAR 0 8
75206: PPUSH
75207: LD_INT 0
75209: PPUSH
75210: LD_INT 4
75212: PPUSH
75213: CALL_OW 273
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_VAR 0 7
75226: PPUSH
75227: LD_INT 1
75229: PPUSH
75230: LD_INT 4
75232: PPUSH
75233: CALL_OW 272
75237: PUSH
75238: LD_VAR 0 8
75242: PPUSH
75243: LD_INT 1
75245: PPUSH
75246: LD_INT 4
75248: PPUSH
75249: CALL_OW 273
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: LD_VAR 0 7
75262: PPUSH
75263: LD_INT 2
75265: PPUSH
75266: LD_INT 4
75268: PPUSH
75269: CALL_OW 272
75273: PUSH
75274: LD_VAR 0 8
75278: PPUSH
75279: LD_INT 2
75281: PPUSH
75282: LD_INT 4
75284: PPUSH
75285: CALL_OW 273
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: LD_VAR 0 7
75298: PPUSH
75299: LD_INT 3
75301: PPUSH
75302: LD_INT 4
75304: PPUSH
75305: CALL_OW 272
75309: PUSH
75310: LD_VAR 0 8
75314: PPUSH
75315: LD_INT 3
75317: PPUSH
75318: LD_INT 4
75320: PPUSH
75321: CALL_OW 273
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_VAR 0 7
75334: PPUSH
75335: LD_INT 4
75337: PPUSH
75338: LD_INT 4
75340: PPUSH
75341: CALL_OW 272
75345: PUSH
75346: LD_VAR 0 8
75350: PPUSH
75351: LD_INT 4
75353: PPUSH
75354: LD_INT 4
75356: PPUSH
75357: CALL_OW 273
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_VAR 0 7
75370: PPUSH
75371: LD_INT 5
75373: PPUSH
75374: LD_INT 4
75376: PPUSH
75377: CALL_OW 272
75381: PUSH
75382: LD_VAR 0 8
75386: PPUSH
75387: LD_INT 5
75389: PPUSH
75390: LD_INT 4
75392: PPUSH
75393: CALL_OW 273
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: ST_TO_ADDR
// for i = tmp downto 1 do
75410: LD_ADDR_VAR 0 4
75414: PUSH
75415: DOUBLE
75416: LD_VAR 0 6
75420: INC
75421: ST_TO_ADDR
75422: LD_INT 1
75424: PUSH
75425: FOR_DOWNTO
75426: IFFALSE 75527
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75428: LD_VAR 0 6
75432: PUSH
75433: LD_VAR 0 4
75437: ARRAY
75438: PUSH
75439: LD_INT 1
75441: ARRAY
75442: PPUSH
75443: LD_VAR 0 6
75447: PUSH
75448: LD_VAR 0 4
75452: ARRAY
75453: PUSH
75454: LD_INT 2
75456: ARRAY
75457: PPUSH
75458: CALL_OW 488
75462: NOT
75463: PUSH
75464: LD_VAR 0 6
75468: PUSH
75469: LD_VAR 0 4
75473: ARRAY
75474: PUSH
75475: LD_INT 1
75477: ARRAY
75478: PPUSH
75479: LD_VAR 0 6
75483: PUSH
75484: LD_VAR 0 4
75488: ARRAY
75489: PUSH
75490: LD_INT 2
75492: ARRAY
75493: PPUSH
75494: CALL_OW 428
75498: PUSH
75499: LD_INT 0
75501: NONEQUAL
75502: OR
75503: IFFALSE 75525
// tmp := Delete ( tmp , i ) ;
75505: LD_ADDR_VAR 0 6
75509: PUSH
75510: LD_VAR 0 6
75514: PPUSH
75515: LD_VAR 0 4
75519: PPUSH
75520: CALL_OW 3
75524: ST_TO_ADDR
75525: GO 75425
75527: POP
75528: POP
// j := GetClosestHex ( unit , tmp ) ;
75529: LD_ADDR_VAR 0 5
75533: PUSH
75534: LD_VAR 0 1
75538: PPUSH
75539: LD_VAR 0 6
75543: PPUSH
75544: CALL 74831 0 2
75548: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75549: LD_VAR 0 1
75553: PPUSH
75554: LD_VAR 0 5
75558: PUSH
75559: LD_INT 1
75561: ARRAY
75562: PPUSH
75563: LD_VAR 0 5
75567: PUSH
75568: LD_INT 2
75570: ARRAY
75571: PPUSH
75572: CALL_OW 111
// end ;
75576: LD_VAR 0 3
75580: RET
// export function PrepareApemanSoldier ( ) ; begin
75581: LD_INT 0
75583: PPUSH
// uc_nation := 0 ;
75584: LD_ADDR_OWVAR 21
75588: PUSH
75589: LD_INT 0
75591: ST_TO_ADDR
// hc_sex := sex_male ;
75592: LD_ADDR_OWVAR 27
75596: PUSH
75597: LD_INT 1
75599: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75600: LD_ADDR_OWVAR 28
75604: PUSH
75605: LD_INT 15
75607: ST_TO_ADDR
// hc_gallery :=  ;
75608: LD_ADDR_OWVAR 33
75612: PUSH
75613: LD_STRING 
75615: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75616: LD_ADDR_OWVAR 31
75620: PUSH
75621: LD_INT 0
75623: PPUSH
75624: LD_INT 3
75626: PPUSH
75627: CALL_OW 12
75631: PUSH
75632: LD_INT 0
75634: PPUSH
75635: LD_INT 3
75637: PPUSH
75638: CALL_OW 12
75642: PUSH
75643: LD_INT 0
75645: PUSH
75646: LD_INT 0
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: ST_TO_ADDR
// end ;
75655: LD_VAR 0 1
75659: RET
// export function PrepareApemanEngineer ( ) ; begin
75660: LD_INT 0
75662: PPUSH
// uc_nation := 0 ;
75663: LD_ADDR_OWVAR 21
75667: PUSH
75668: LD_INT 0
75670: ST_TO_ADDR
// hc_sex := sex_male ;
75671: LD_ADDR_OWVAR 27
75675: PUSH
75676: LD_INT 1
75678: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75679: LD_ADDR_OWVAR 28
75683: PUSH
75684: LD_INT 16
75686: ST_TO_ADDR
// hc_gallery :=  ;
75687: LD_ADDR_OWVAR 33
75691: PUSH
75692: LD_STRING 
75694: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75695: LD_ADDR_OWVAR 31
75699: PUSH
75700: LD_INT 0
75702: PPUSH
75703: LD_INT 3
75705: PPUSH
75706: CALL_OW 12
75710: PUSH
75711: LD_INT 0
75713: PPUSH
75714: LD_INT 3
75716: PPUSH
75717: CALL_OW 12
75721: PUSH
75722: LD_INT 0
75724: PUSH
75725: LD_INT 0
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: ST_TO_ADDR
// end ;
75734: LD_VAR 0 1
75738: RET
// export function PrepareApeman ( agressivity ) ; begin
75739: LD_INT 0
75741: PPUSH
// uc_side := 0 ;
75742: LD_ADDR_OWVAR 20
75746: PUSH
75747: LD_INT 0
75749: ST_TO_ADDR
// uc_nation := 0 ;
75750: LD_ADDR_OWVAR 21
75754: PUSH
75755: LD_INT 0
75757: ST_TO_ADDR
// hc_sex := sex_male ;
75758: LD_ADDR_OWVAR 27
75762: PUSH
75763: LD_INT 1
75765: ST_TO_ADDR
// hc_class := class_apeman ;
75766: LD_ADDR_OWVAR 28
75770: PUSH
75771: LD_INT 12
75773: ST_TO_ADDR
// hc_gallery :=  ;
75774: LD_ADDR_OWVAR 33
75778: PUSH
75779: LD_STRING 
75781: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75782: LD_ADDR_OWVAR 35
75786: PUSH
75787: LD_VAR 0 1
75791: NEG
75792: PPUSH
75793: LD_VAR 0 1
75797: PPUSH
75798: CALL_OW 12
75802: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75803: LD_ADDR_OWVAR 31
75807: PUSH
75808: LD_INT 0
75810: PPUSH
75811: LD_INT 3
75813: PPUSH
75814: CALL_OW 12
75818: PUSH
75819: LD_INT 0
75821: PPUSH
75822: LD_INT 3
75824: PPUSH
75825: CALL_OW 12
75829: PUSH
75830: LD_INT 0
75832: PUSH
75833: LD_INT 0
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: ST_TO_ADDR
// end ;
75842: LD_VAR 0 2
75846: RET
// export function PrepareTiger ( agressivity ) ; begin
75847: LD_INT 0
75849: PPUSH
// uc_side := 0 ;
75850: LD_ADDR_OWVAR 20
75854: PUSH
75855: LD_INT 0
75857: ST_TO_ADDR
// uc_nation := 0 ;
75858: LD_ADDR_OWVAR 21
75862: PUSH
75863: LD_INT 0
75865: ST_TO_ADDR
// hc_class := class_tiger ;
75866: LD_ADDR_OWVAR 28
75870: PUSH
75871: LD_INT 14
75873: ST_TO_ADDR
// hc_gallery :=  ;
75874: LD_ADDR_OWVAR 33
75878: PUSH
75879: LD_STRING 
75881: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75882: LD_ADDR_OWVAR 35
75886: PUSH
75887: LD_VAR 0 1
75891: NEG
75892: PPUSH
75893: LD_VAR 0 1
75897: PPUSH
75898: CALL_OW 12
75902: ST_TO_ADDR
// end ;
75903: LD_VAR 0 2
75907: RET
// export function PrepareEnchidna ( ) ; begin
75908: LD_INT 0
75910: PPUSH
// uc_side := 0 ;
75911: LD_ADDR_OWVAR 20
75915: PUSH
75916: LD_INT 0
75918: ST_TO_ADDR
// uc_nation := 0 ;
75919: LD_ADDR_OWVAR 21
75923: PUSH
75924: LD_INT 0
75926: ST_TO_ADDR
// hc_class := class_baggie ;
75927: LD_ADDR_OWVAR 28
75931: PUSH
75932: LD_INT 13
75934: ST_TO_ADDR
// hc_gallery :=  ;
75935: LD_ADDR_OWVAR 33
75939: PUSH
75940: LD_STRING 
75942: ST_TO_ADDR
// end ;
75943: LD_VAR 0 1
75947: RET
// export function PrepareFrog ( ) ; begin
75948: LD_INT 0
75950: PPUSH
// uc_side := 0 ;
75951: LD_ADDR_OWVAR 20
75955: PUSH
75956: LD_INT 0
75958: ST_TO_ADDR
// uc_nation := 0 ;
75959: LD_ADDR_OWVAR 21
75963: PUSH
75964: LD_INT 0
75966: ST_TO_ADDR
// hc_class := class_frog ;
75967: LD_ADDR_OWVAR 28
75971: PUSH
75972: LD_INT 19
75974: ST_TO_ADDR
// hc_gallery :=  ;
75975: LD_ADDR_OWVAR 33
75979: PUSH
75980: LD_STRING 
75982: ST_TO_ADDR
// end ;
75983: LD_VAR 0 1
75987: RET
// export function PrepareFish ( ) ; begin
75988: LD_INT 0
75990: PPUSH
// uc_side := 0 ;
75991: LD_ADDR_OWVAR 20
75995: PUSH
75996: LD_INT 0
75998: ST_TO_ADDR
// uc_nation := 0 ;
75999: LD_ADDR_OWVAR 21
76003: PUSH
76004: LD_INT 0
76006: ST_TO_ADDR
// hc_class := class_fish ;
76007: LD_ADDR_OWVAR 28
76011: PUSH
76012: LD_INT 20
76014: ST_TO_ADDR
// hc_gallery :=  ;
76015: LD_ADDR_OWVAR 33
76019: PUSH
76020: LD_STRING 
76022: ST_TO_ADDR
// end ;
76023: LD_VAR 0 1
76027: RET
// export function PrepareBird ( ) ; begin
76028: LD_INT 0
76030: PPUSH
// uc_side := 0 ;
76031: LD_ADDR_OWVAR 20
76035: PUSH
76036: LD_INT 0
76038: ST_TO_ADDR
// uc_nation := 0 ;
76039: LD_ADDR_OWVAR 21
76043: PUSH
76044: LD_INT 0
76046: ST_TO_ADDR
// hc_class := class_phororhacos ;
76047: LD_ADDR_OWVAR 28
76051: PUSH
76052: LD_INT 18
76054: ST_TO_ADDR
// hc_gallery :=  ;
76055: LD_ADDR_OWVAR 33
76059: PUSH
76060: LD_STRING 
76062: ST_TO_ADDR
// end ;
76063: LD_VAR 0 1
76067: RET
// export function PrepareHorse ( ) ; begin
76068: LD_INT 0
76070: PPUSH
// uc_side := 0 ;
76071: LD_ADDR_OWVAR 20
76075: PUSH
76076: LD_INT 0
76078: ST_TO_ADDR
// uc_nation := 0 ;
76079: LD_ADDR_OWVAR 21
76083: PUSH
76084: LD_INT 0
76086: ST_TO_ADDR
// hc_class := class_horse ;
76087: LD_ADDR_OWVAR 28
76091: PUSH
76092: LD_INT 21
76094: ST_TO_ADDR
// hc_gallery :=  ;
76095: LD_ADDR_OWVAR 33
76099: PUSH
76100: LD_STRING 
76102: ST_TO_ADDR
// end ;
76103: LD_VAR 0 1
76107: RET
// export function PrepareMastodont ( ) ; begin
76108: LD_INT 0
76110: PPUSH
// uc_side := 0 ;
76111: LD_ADDR_OWVAR 20
76115: PUSH
76116: LD_INT 0
76118: ST_TO_ADDR
// uc_nation := 0 ;
76119: LD_ADDR_OWVAR 21
76123: PUSH
76124: LD_INT 0
76126: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76127: LD_ADDR_OWVAR 37
76131: PUSH
76132: LD_INT 31
76134: ST_TO_ADDR
// vc_control := control_rider ;
76135: LD_ADDR_OWVAR 38
76139: PUSH
76140: LD_INT 4
76142: ST_TO_ADDR
// end ;
76143: LD_VAR 0 1
76147: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76148: LD_INT 0
76150: PPUSH
76151: PPUSH
76152: PPUSH
// uc_side = 0 ;
76153: LD_ADDR_OWVAR 20
76157: PUSH
76158: LD_INT 0
76160: ST_TO_ADDR
// uc_nation = 0 ;
76161: LD_ADDR_OWVAR 21
76165: PUSH
76166: LD_INT 0
76168: ST_TO_ADDR
// InitHc_All ( ) ;
76169: CALL_OW 584
// InitVc ;
76173: CALL_OW 20
// if mastodonts then
76177: LD_VAR 0 6
76181: IFFALSE 76248
// for i = 1 to mastodonts do
76183: LD_ADDR_VAR 0 11
76187: PUSH
76188: DOUBLE
76189: LD_INT 1
76191: DEC
76192: ST_TO_ADDR
76193: LD_VAR 0 6
76197: PUSH
76198: FOR_TO
76199: IFFALSE 76246
// begin vc_chassis := 31 ;
76201: LD_ADDR_OWVAR 37
76205: PUSH
76206: LD_INT 31
76208: ST_TO_ADDR
// vc_control := control_rider ;
76209: LD_ADDR_OWVAR 38
76213: PUSH
76214: LD_INT 4
76216: ST_TO_ADDR
// animal := CreateVehicle ;
76217: LD_ADDR_VAR 0 12
76221: PUSH
76222: CALL_OW 45
76226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76227: LD_VAR 0 12
76231: PPUSH
76232: LD_VAR 0 8
76236: PPUSH
76237: LD_INT 0
76239: PPUSH
76240: CALL 78376 0 3
// end ;
76244: GO 76198
76246: POP
76247: POP
// if horses then
76248: LD_VAR 0 5
76252: IFFALSE 76319
// for i = 1 to horses do
76254: LD_ADDR_VAR 0 11
76258: PUSH
76259: DOUBLE
76260: LD_INT 1
76262: DEC
76263: ST_TO_ADDR
76264: LD_VAR 0 5
76268: PUSH
76269: FOR_TO
76270: IFFALSE 76317
// begin hc_class := 21 ;
76272: LD_ADDR_OWVAR 28
76276: PUSH
76277: LD_INT 21
76279: ST_TO_ADDR
// hc_gallery :=  ;
76280: LD_ADDR_OWVAR 33
76284: PUSH
76285: LD_STRING 
76287: ST_TO_ADDR
// animal := CreateHuman ;
76288: LD_ADDR_VAR 0 12
76292: PUSH
76293: CALL_OW 44
76297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76298: LD_VAR 0 12
76302: PPUSH
76303: LD_VAR 0 8
76307: PPUSH
76308: LD_INT 0
76310: PPUSH
76311: CALL 78376 0 3
// end ;
76315: GO 76269
76317: POP
76318: POP
// if birds then
76319: LD_VAR 0 1
76323: IFFALSE 76390
// for i = 1 to birds do
76325: LD_ADDR_VAR 0 11
76329: PUSH
76330: DOUBLE
76331: LD_INT 1
76333: DEC
76334: ST_TO_ADDR
76335: LD_VAR 0 1
76339: PUSH
76340: FOR_TO
76341: IFFALSE 76388
// begin hc_class := 18 ;
76343: LD_ADDR_OWVAR 28
76347: PUSH
76348: LD_INT 18
76350: ST_TO_ADDR
// hc_gallery =  ;
76351: LD_ADDR_OWVAR 33
76355: PUSH
76356: LD_STRING 
76358: ST_TO_ADDR
// animal := CreateHuman ;
76359: LD_ADDR_VAR 0 12
76363: PUSH
76364: CALL_OW 44
76368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76369: LD_VAR 0 12
76373: PPUSH
76374: LD_VAR 0 8
76378: PPUSH
76379: LD_INT 0
76381: PPUSH
76382: CALL 78376 0 3
// end ;
76386: GO 76340
76388: POP
76389: POP
// if tigers then
76390: LD_VAR 0 2
76394: IFFALSE 76478
// for i = 1 to tigers do
76396: LD_ADDR_VAR 0 11
76400: PUSH
76401: DOUBLE
76402: LD_INT 1
76404: DEC
76405: ST_TO_ADDR
76406: LD_VAR 0 2
76410: PUSH
76411: FOR_TO
76412: IFFALSE 76476
// begin hc_class = class_tiger ;
76414: LD_ADDR_OWVAR 28
76418: PUSH
76419: LD_INT 14
76421: ST_TO_ADDR
// hc_gallery =  ;
76422: LD_ADDR_OWVAR 33
76426: PUSH
76427: LD_STRING 
76429: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76430: LD_ADDR_OWVAR 35
76434: PUSH
76435: LD_INT 7
76437: NEG
76438: PPUSH
76439: LD_INT 7
76441: PPUSH
76442: CALL_OW 12
76446: ST_TO_ADDR
// animal := CreateHuman ;
76447: LD_ADDR_VAR 0 12
76451: PUSH
76452: CALL_OW 44
76456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76457: LD_VAR 0 12
76461: PPUSH
76462: LD_VAR 0 8
76466: PPUSH
76467: LD_INT 0
76469: PPUSH
76470: CALL 78376 0 3
// end ;
76474: GO 76411
76476: POP
76477: POP
// if apemans then
76478: LD_VAR 0 3
76482: IFFALSE 76605
// for i = 1 to apemans do
76484: LD_ADDR_VAR 0 11
76488: PUSH
76489: DOUBLE
76490: LD_INT 1
76492: DEC
76493: ST_TO_ADDR
76494: LD_VAR 0 3
76498: PUSH
76499: FOR_TO
76500: IFFALSE 76603
// begin hc_class = class_apeman ;
76502: LD_ADDR_OWVAR 28
76506: PUSH
76507: LD_INT 12
76509: ST_TO_ADDR
// hc_gallery =  ;
76510: LD_ADDR_OWVAR 33
76514: PUSH
76515: LD_STRING 
76517: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76518: LD_ADDR_OWVAR 35
76522: PUSH
76523: LD_INT 2
76525: NEG
76526: PPUSH
76527: LD_INT 2
76529: PPUSH
76530: CALL_OW 12
76534: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76535: LD_ADDR_OWVAR 31
76539: PUSH
76540: LD_INT 1
76542: PPUSH
76543: LD_INT 3
76545: PPUSH
76546: CALL_OW 12
76550: PUSH
76551: LD_INT 1
76553: PPUSH
76554: LD_INT 3
76556: PPUSH
76557: CALL_OW 12
76561: PUSH
76562: LD_INT 0
76564: PUSH
76565: LD_INT 0
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: LIST
76572: LIST
76573: ST_TO_ADDR
// animal := CreateHuman ;
76574: LD_ADDR_VAR 0 12
76578: PUSH
76579: CALL_OW 44
76583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76584: LD_VAR 0 12
76588: PPUSH
76589: LD_VAR 0 8
76593: PPUSH
76594: LD_INT 0
76596: PPUSH
76597: CALL 78376 0 3
// end ;
76601: GO 76499
76603: POP
76604: POP
// if enchidnas then
76605: LD_VAR 0 4
76609: IFFALSE 76676
// for i = 1 to enchidnas do
76611: LD_ADDR_VAR 0 11
76615: PUSH
76616: DOUBLE
76617: LD_INT 1
76619: DEC
76620: ST_TO_ADDR
76621: LD_VAR 0 4
76625: PUSH
76626: FOR_TO
76627: IFFALSE 76674
// begin hc_class = 13 ;
76629: LD_ADDR_OWVAR 28
76633: PUSH
76634: LD_INT 13
76636: ST_TO_ADDR
// hc_gallery =  ;
76637: LD_ADDR_OWVAR 33
76641: PUSH
76642: LD_STRING 
76644: ST_TO_ADDR
// animal := CreateHuman ;
76645: LD_ADDR_VAR 0 12
76649: PUSH
76650: CALL_OW 44
76654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76655: LD_VAR 0 12
76659: PPUSH
76660: LD_VAR 0 8
76664: PPUSH
76665: LD_INT 0
76667: PPUSH
76668: CALL 78376 0 3
// end ;
76672: GO 76626
76674: POP
76675: POP
// if fishes then
76676: LD_VAR 0 7
76680: IFFALSE 76747
// for i = 1 to fishes do
76682: LD_ADDR_VAR 0 11
76686: PUSH
76687: DOUBLE
76688: LD_INT 1
76690: DEC
76691: ST_TO_ADDR
76692: LD_VAR 0 7
76696: PUSH
76697: FOR_TO
76698: IFFALSE 76745
// begin hc_class = 20 ;
76700: LD_ADDR_OWVAR 28
76704: PUSH
76705: LD_INT 20
76707: ST_TO_ADDR
// hc_gallery =  ;
76708: LD_ADDR_OWVAR 33
76712: PUSH
76713: LD_STRING 
76715: ST_TO_ADDR
// animal := CreateHuman ;
76716: LD_ADDR_VAR 0 12
76720: PUSH
76721: CALL_OW 44
76725: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76726: LD_VAR 0 12
76730: PPUSH
76731: LD_VAR 0 9
76735: PPUSH
76736: LD_INT 0
76738: PPUSH
76739: CALL 78376 0 3
// end ;
76743: GO 76697
76745: POP
76746: POP
// end ;
76747: LD_VAR 0 10
76751: RET
// export function WantHeal ( sci , unit ) ; begin
76752: LD_INT 0
76754: PPUSH
// if GetTaskList ( sci ) > 0 then
76755: LD_VAR 0 1
76759: PPUSH
76760: CALL_OW 437
76764: PUSH
76765: LD_INT 0
76767: GREATER
76768: IFFALSE 76838
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76770: LD_VAR 0 1
76774: PPUSH
76775: CALL_OW 437
76779: PUSH
76780: LD_INT 1
76782: ARRAY
76783: PUSH
76784: LD_INT 1
76786: ARRAY
76787: PUSH
76788: LD_STRING l
76790: EQUAL
76791: PUSH
76792: LD_VAR 0 1
76796: PPUSH
76797: CALL_OW 437
76801: PUSH
76802: LD_INT 1
76804: ARRAY
76805: PUSH
76806: LD_INT 4
76808: ARRAY
76809: PUSH
76810: LD_VAR 0 2
76814: EQUAL
76815: AND
76816: IFFALSE 76828
// result := true else
76818: LD_ADDR_VAR 0 3
76822: PUSH
76823: LD_INT 1
76825: ST_TO_ADDR
76826: GO 76836
// result := false ;
76828: LD_ADDR_VAR 0 3
76832: PUSH
76833: LD_INT 0
76835: ST_TO_ADDR
// end else
76836: GO 76846
// result := false ;
76838: LD_ADDR_VAR 0 3
76842: PUSH
76843: LD_INT 0
76845: ST_TO_ADDR
// end ;
76846: LD_VAR 0 3
76850: RET
// export function HealTarget ( sci ) ; begin
76851: LD_INT 0
76853: PPUSH
// if not sci then
76854: LD_VAR 0 1
76858: NOT
76859: IFFALSE 76863
// exit ;
76861: GO 76928
// result := 0 ;
76863: LD_ADDR_VAR 0 2
76867: PUSH
76868: LD_INT 0
76870: ST_TO_ADDR
// if GetTaskList ( sci ) then
76871: LD_VAR 0 1
76875: PPUSH
76876: CALL_OW 437
76880: IFFALSE 76928
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76882: LD_VAR 0 1
76886: PPUSH
76887: CALL_OW 437
76891: PUSH
76892: LD_INT 1
76894: ARRAY
76895: PUSH
76896: LD_INT 1
76898: ARRAY
76899: PUSH
76900: LD_STRING l
76902: EQUAL
76903: IFFALSE 76928
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76905: LD_ADDR_VAR 0 2
76909: PUSH
76910: LD_VAR 0 1
76914: PPUSH
76915: CALL_OW 437
76919: PUSH
76920: LD_INT 1
76922: ARRAY
76923: PUSH
76924: LD_INT 4
76926: ARRAY
76927: ST_TO_ADDR
// end ;
76928: LD_VAR 0 2
76932: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76933: LD_INT 0
76935: PPUSH
76936: PPUSH
76937: PPUSH
76938: PPUSH
// if not base_units then
76939: LD_VAR 0 1
76943: NOT
76944: IFFALSE 76948
// exit ;
76946: GO 77035
// result := false ;
76948: LD_ADDR_VAR 0 2
76952: PUSH
76953: LD_INT 0
76955: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76956: LD_ADDR_VAR 0 5
76960: PUSH
76961: LD_VAR 0 1
76965: PPUSH
76966: LD_INT 21
76968: PUSH
76969: LD_INT 3
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: PPUSH
76976: CALL_OW 72
76980: ST_TO_ADDR
// if not tmp then
76981: LD_VAR 0 5
76985: NOT
76986: IFFALSE 76990
// exit ;
76988: GO 77035
// for i in tmp do
76990: LD_ADDR_VAR 0 3
76994: PUSH
76995: LD_VAR 0 5
76999: PUSH
77000: FOR_IN
77001: IFFALSE 77033
// begin result := EnemyInRange ( i , 22 ) ;
77003: LD_ADDR_VAR 0 2
77007: PUSH
77008: LD_VAR 0 3
77012: PPUSH
77013: LD_INT 22
77015: PPUSH
77016: CALL 74633 0 2
77020: ST_TO_ADDR
// if result then
77021: LD_VAR 0 2
77025: IFFALSE 77031
// exit ;
77027: POP
77028: POP
77029: GO 77035
// end ;
77031: GO 77000
77033: POP
77034: POP
// end ;
77035: LD_VAR 0 2
77039: RET
// export function FilterByTag ( units , tag ) ; begin
77040: LD_INT 0
77042: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77043: LD_ADDR_VAR 0 3
77047: PUSH
77048: LD_VAR 0 1
77052: PPUSH
77053: LD_INT 120
77055: PUSH
77056: LD_VAR 0 2
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PPUSH
77065: CALL_OW 72
77069: ST_TO_ADDR
// end ;
77070: LD_VAR 0 3
77074: RET
// export function IsDriver ( un ) ; begin
77075: LD_INT 0
77077: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77078: LD_ADDR_VAR 0 2
77082: PUSH
77083: LD_VAR 0 1
77087: PUSH
77088: LD_INT 55
77090: PUSH
77091: EMPTY
77092: LIST
77093: PPUSH
77094: CALL_OW 69
77098: IN
77099: ST_TO_ADDR
// end ;
77100: LD_VAR 0 2
77104: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77105: LD_INT 0
77107: PPUSH
77108: PPUSH
// list := [ ] ;
77109: LD_ADDR_VAR 0 5
77113: PUSH
77114: EMPTY
77115: ST_TO_ADDR
// case d of 0 :
77116: LD_VAR 0 3
77120: PUSH
77121: LD_INT 0
77123: DOUBLE
77124: EQUAL
77125: IFTRUE 77129
77127: GO 77262
77129: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77130: LD_ADDR_VAR 0 5
77134: PUSH
77135: LD_VAR 0 1
77139: PUSH
77140: LD_INT 4
77142: MINUS
77143: PUSH
77144: LD_VAR 0 2
77148: PUSH
77149: LD_INT 4
77151: MINUS
77152: PUSH
77153: LD_INT 2
77155: PUSH
77156: EMPTY
77157: LIST
77158: LIST
77159: LIST
77160: PUSH
77161: LD_VAR 0 1
77165: PUSH
77166: LD_INT 3
77168: MINUS
77169: PUSH
77170: LD_VAR 0 2
77174: PUSH
77175: LD_INT 1
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: LIST
77182: PUSH
77183: LD_VAR 0 1
77187: PUSH
77188: LD_INT 4
77190: PLUS
77191: PUSH
77192: LD_VAR 0 2
77196: PUSH
77197: LD_INT 4
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: LIST
77204: PUSH
77205: LD_VAR 0 1
77209: PUSH
77210: LD_INT 3
77212: PLUS
77213: PUSH
77214: LD_VAR 0 2
77218: PUSH
77219: LD_INT 3
77221: PLUS
77222: PUSH
77223: LD_INT 5
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: LIST
77230: PUSH
77231: LD_VAR 0 1
77235: PUSH
77236: LD_VAR 0 2
77240: PUSH
77241: LD_INT 4
77243: PLUS
77244: PUSH
77245: LD_INT 0
77247: PUSH
77248: EMPTY
77249: LIST
77250: LIST
77251: LIST
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: ST_TO_ADDR
// end ; 1 :
77260: GO 77960
77262: LD_INT 1
77264: DOUBLE
77265: EQUAL
77266: IFTRUE 77270
77268: GO 77403
77270: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77271: LD_ADDR_VAR 0 5
77275: PUSH
77276: LD_VAR 0 1
77280: PUSH
77281: LD_VAR 0 2
77285: PUSH
77286: LD_INT 4
77288: MINUS
77289: PUSH
77290: LD_INT 3
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: LIST
77297: PUSH
77298: LD_VAR 0 1
77302: PUSH
77303: LD_INT 3
77305: MINUS
77306: PUSH
77307: LD_VAR 0 2
77311: PUSH
77312: LD_INT 3
77314: MINUS
77315: PUSH
77316: LD_INT 2
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: LIST
77323: PUSH
77324: LD_VAR 0 1
77328: PUSH
77329: LD_INT 4
77331: MINUS
77332: PUSH
77333: LD_VAR 0 2
77337: PUSH
77338: LD_INT 1
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: LIST
77345: PUSH
77346: LD_VAR 0 1
77350: PUSH
77351: LD_VAR 0 2
77355: PUSH
77356: LD_INT 3
77358: PLUS
77359: PUSH
77360: LD_INT 0
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: LIST
77367: PUSH
77368: LD_VAR 0 1
77372: PUSH
77373: LD_INT 4
77375: PLUS
77376: PUSH
77377: LD_VAR 0 2
77381: PUSH
77382: LD_INT 4
77384: PLUS
77385: PUSH
77386: LD_INT 5
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: LIST
77393: PUSH
77394: EMPTY
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: ST_TO_ADDR
// end ; 2 :
77401: GO 77960
77403: LD_INT 2
77405: DOUBLE
77406: EQUAL
77407: IFTRUE 77411
77409: GO 77540
77411: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77412: LD_ADDR_VAR 0 5
77416: PUSH
77417: LD_VAR 0 1
77421: PUSH
77422: LD_VAR 0 2
77426: PUSH
77427: LD_INT 3
77429: MINUS
77430: PUSH
77431: LD_INT 3
77433: PUSH
77434: EMPTY
77435: LIST
77436: LIST
77437: LIST
77438: PUSH
77439: LD_VAR 0 1
77443: PUSH
77444: LD_INT 4
77446: PLUS
77447: PUSH
77448: LD_VAR 0 2
77452: PUSH
77453: LD_INT 4
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: LIST
77460: PUSH
77461: LD_VAR 0 1
77465: PUSH
77466: LD_VAR 0 2
77470: PUSH
77471: LD_INT 4
77473: PLUS
77474: PUSH
77475: LD_INT 0
77477: PUSH
77478: EMPTY
77479: LIST
77480: LIST
77481: LIST
77482: PUSH
77483: LD_VAR 0 1
77487: PUSH
77488: LD_INT 3
77490: MINUS
77491: PUSH
77492: LD_VAR 0 2
77496: PUSH
77497: LD_INT 1
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: LIST
77504: PUSH
77505: LD_VAR 0 1
77509: PUSH
77510: LD_INT 4
77512: MINUS
77513: PUSH
77514: LD_VAR 0 2
77518: PUSH
77519: LD_INT 4
77521: MINUS
77522: PUSH
77523: LD_INT 2
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: LIST
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: ST_TO_ADDR
// end ; 3 :
77538: GO 77960
77540: LD_INT 3
77542: DOUBLE
77543: EQUAL
77544: IFTRUE 77548
77546: GO 77681
77548: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77549: LD_ADDR_VAR 0 5
77553: PUSH
77554: LD_VAR 0 1
77558: PUSH
77559: LD_INT 3
77561: PLUS
77562: PUSH
77563: LD_VAR 0 2
77567: PUSH
77568: LD_INT 4
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: LIST
77575: PUSH
77576: LD_VAR 0 1
77580: PUSH
77581: LD_INT 4
77583: PLUS
77584: PUSH
77585: LD_VAR 0 2
77589: PUSH
77590: LD_INT 4
77592: PLUS
77593: PUSH
77594: LD_INT 5
77596: PUSH
77597: EMPTY
77598: LIST
77599: LIST
77600: LIST
77601: PUSH
77602: LD_VAR 0 1
77606: PUSH
77607: LD_INT 4
77609: MINUS
77610: PUSH
77611: LD_VAR 0 2
77615: PUSH
77616: LD_INT 1
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: LIST
77623: PUSH
77624: LD_VAR 0 1
77628: PUSH
77629: LD_VAR 0 2
77633: PUSH
77634: LD_INT 4
77636: MINUS
77637: PUSH
77638: LD_INT 3
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: LIST
77645: PUSH
77646: LD_VAR 0 1
77650: PUSH
77651: LD_INT 3
77653: MINUS
77654: PUSH
77655: LD_VAR 0 2
77659: PUSH
77660: LD_INT 3
77662: MINUS
77663: PUSH
77664: LD_INT 2
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: LIST
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: LIST
77676: LIST
77677: LIST
77678: ST_TO_ADDR
// end ; 4 :
77679: GO 77960
77681: LD_INT 4
77683: DOUBLE
77684: EQUAL
77685: IFTRUE 77689
77687: GO 77822
77689: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77690: LD_ADDR_VAR 0 5
77694: PUSH
77695: LD_VAR 0 1
77699: PUSH
77700: LD_VAR 0 2
77704: PUSH
77705: LD_INT 4
77707: PLUS
77708: PUSH
77709: LD_INT 0
77711: PUSH
77712: EMPTY
77713: LIST
77714: LIST
77715: LIST
77716: PUSH
77717: LD_VAR 0 1
77721: PUSH
77722: LD_INT 3
77724: PLUS
77725: PUSH
77726: LD_VAR 0 2
77730: PUSH
77731: LD_INT 3
77733: PLUS
77734: PUSH
77735: LD_INT 5
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: PUSH
77743: LD_VAR 0 1
77747: PUSH
77748: LD_INT 4
77750: PLUS
77751: PUSH
77752: LD_VAR 0 2
77756: PUSH
77757: LD_INT 4
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: LIST
77764: PUSH
77765: LD_VAR 0 1
77769: PUSH
77770: LD_VAR 0 2
77774: PUSH
77775: LD_INT 3
77777: MINUS
77778: PUSH
77779: LD_INT 3
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: LIST
77786: PUSH
77787: LD_VAR 0 1
77791: PUSH
77792: LD_INT 4
77794: MINUS
77795: PUSH
77796: LD_VAR 0 2
77800: PUSH
77801: LD_INT 4
77803: MINUS
77804: PUSH
77805: LD_INT 2
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: LIST
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: LIST
77817: LIST
77818: LIST
77819: ST_TO_ADDR
// end ; 5 :
77820: GO 77960
77822: LD_INT 5
77824: DOUBLE
77825: EQUAL
77826: IFTRUE 77830
77828: GO 77959
77830: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77831: LD_ADDR_VAR 0 5
77835: PUSH
77836: LD_VAR 0 1
77840: PUSH
77841: LD_INT 4
77843: MINUS
77844: PUSH
77845: LD_VAR 0 2
77849: PUSH
77850: LD_INT 1
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: LIST
77857: PUSH
77858: LD_VAR 0 1
77862: PUSH
77863: LD_VAR 0 2
77867: PUSH
77868: LD_INT 4
77870: MINUS
77871: PUSH
77872: LD_INT 3
77874: PUSH
77875: EMPTY
77876: LIST
77877: LIST
77878: LIST
77879: PUSH
77880: LD_VAR 0 1
77884: PUSH
77885: LD_INT 4
77887: PLUS
77888: PUSH
77889: LD_VAR 0 2
77893: PUSH
77894: LD_INT 4
77896: PLUS
77897: PUSH
77898: LD_INT 5
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: LIST
77905: PUSH
77906: LD_VAR 0 1
77910: PUSH
77911: LD_INT 3
77913: PLUS
77914: PUSH
77915: LD_VAR 0 2
77919: PUSH
77920: LD_INT 4
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: LIST
77927: PUSH
77928: LD_VAR 0 1
77932: PUSH
77933: LD_VAR 0 2
77937: PUSH
77938: LD_INT 3
77940: PLUS
77941: PUSH
77942: LD_INT 0
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: LIST
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: ST_TO_ADDR
// end ; end ;
77957: GO 77960
77959: POP
// result := list ;
77960: LD_ADDR_VAR 0 4
77964: PUSH
77965: LD_VAR 0 5
77969: ST_TO_ADDR
// end ;
77970: LD_VAR 0 4
77974: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77975: LD_INT 0
77977: PPUSH
77978: PPUSH
77979: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77980: LD_VAR 0 1
77984: NOT
77985: PUSH
77986: LD_VAR 0 2
77990: PUSH
77991: LD_INT 1
77993: PUSH
77994: LD_INT 2
77996: PUSH
77997: LD_INT 3
77999: PUSH
78000: LD_INT 4
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: LIST
78007: LIST
78008: IN
78009: NOT
78010: OR
78011: IFFALSE 78015
// exit ;
78013: GO 78098
// tmp := [ ] ;
78015: LD_ADDR_VAR 0 5
78019: PUSH
78020: EMPTY
78021: ST_TO_ADDR
// for i in units do
78022: LD_ADDR_VAR 0 4
78026: PUSH
78027: LD_VAR 0 1
78031: PUSH
78032: FOR_IN
78033: IFFALSE 78067
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78035: LD_ADDR_VAR 0 5
78039: PUSH
78040: LD_VAR 0 5
78044: PPUSH
78045: LD_VAR 0 4
78049: PPUSH
78050: LD_VAR 0 2
78054: PPUSH
78055: CALL_OW 259
78059: PPUSH
78060: CALL 79471 0 2
78064: ST_TO_ADDR
78065: GO 78032
78067: POP
78068: POP
// if not tmp then
78069: LD_VAR 0 5
78073: NOT
78074: IFFALSE 78078
// exit ;
78076: GO 78098
// result := SortListByListDesc ( units , tmp ) ;
78078: LD_ADDR_VAR 0 3
78082: PUSH
78083: LD_VAR 0 1
78087: PPUSH
78088: LD_VAR 0 5
78092: PPUSH
78093: CALL_OW 77
78097: ST_TO_ADDR
// end ;
78098: LD_VAR 0 3
78102: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78103: LD_INT 0
78105: PPUSH
78106: PPUSH
78107: PPUSH
// result := false ;
78108: LD_ADDR_VAR 0 3
78112: PUSH
78113: LD_INT 0
78115: ST_TO_ADDR
// if not building then
78116: LD_VAR 0 2
78120: NOT
78121: IFFALSE 78125
// exit ;
78123: GO 78263
// x := GetX ( building ) ;
78125: LD_ADDR_VAR 0 4
78129: PUSH
78130: LD_VAR 0 2
78134: PPUSH
78135: CALL_OW 250
78139: ST_TO_ADDR
// y := GetY ( building ) ;
78140: LD_ADDR_VAR 0 5
78144: PUSH
78145: LD_VAR 0 2
78149: PPUSH
78150: CALL_OW 251
78154: ST_TO_ADDR
// if not x or not y then
78155: LD_VAR 0 4
78159: NOT
78160: PUSH
78161: LD_VAR 0 5
78165: NOT
78166: OR
78167: IFFALSE 78171
// exit ;
78169: GO 78263
// if GetTaskList ( unit ) then
78171: LD_VAR 0 1
78175: PPUSH
78176: CALL_OW 437
78180: IFFALSE 78263
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78182: LD_STRING e
78184: PUSH
78185: LD_VAR 0 1
78189: PPUSH
78190: CALL_OW 437
78194: PUSH
78195: LD_INT 1
78197: ARRAY
78198: PUSH
78199: LD_INT 1
78201: ARRAY
78202: EQUAL
78203: PUSH
78204: LD_VAR 0 4
78208: PUSH
78209: LD_VAR 0 1
78213: PPUSH
78214: CALL_OW 437
78218: PUSH
78219: LD_INT 1
78221: ARRAY
78222: PUSH
78223: LD_INT 2
78225: ARRAY
78226: EQUAL
78227: AND
78228: PUSH
78229: LD_VAR 0 5
78233: PUSH
78234: LD_VAR 0 1
78238: PPUSH
78239: CALL_OW 437
78243: PUSH
78244: LD_INT 1
78246: ARRAY
78247: PUSH
78248: LD_INT 3
78250: ARRAY
78251: EQUAL
78252: AND
78253: IFFALSE 78263
// result := true end ;
78255: LD_ADDR_VAR 0 3
78259: PUSH
78260: LD_INT 1
78262: ST_TO_ADDR
// end ;
78263: LD_VAR 0 3
78267: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78268: LD_INT 0
78270: PPUSH
// result := false ;
78271: LD_ADDR_VAR 0 4
78275: PUSH
78276: LD_INT 0
78278: ST_TO_ADDR
// if GetTaskList ( unit ) then
78279: LD_VAR 0 1
78283: PPUSH
78284: CALL_OW 437
78288: IFFALSE 78371
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78290: LD_STRING M
78292: PUSH
78293: LD_VAR 0 1
78297: PPUSH
78298: CALL_OW 437
78302: PUSH
78303: LD_INT 1
78305: ARRAY
78306: PUSH
78307: LD_INT 1
78309: ARRAY
78310: EQUAL
78311: PUSH
78312: LD_VAR 0 2
78316: PUSH
78317: LD_VAR 0 1
78321: PPUSH
78322: CALL_OW 437
78326: PUSH
78327: LD_INT 1
78329: ARRAY
78330: PUSH
78331: LD_INT 2
78333: ARRAY
78334: EQUAL
78335: AND
78336: PUSH
78337: LD_VAR 0 3
78341: PUSH
78342: LD_VAR 0 1
78346: PPUSH
78347: CALL_OW 437
78351: PUSH
78352: LD_INT 1
78354: ARRAY
78355: PUSH
78356: LD_INT 3
78358: ARRAY
78359: EQUAL
78360: AND
78361: IFFALSE 78371
// result := true ;
78363: LD_ADDR_VAR 0 4
78367: PUSH
78368: LD_INT 1
78370: ST_TO_ADDR
// end ; end ;
78371: LD_VAR 0 4
78375: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78376: LD_INT 0
78378: PPUSH
78379: PPUSH
78380: PPUSH
78381: PPUSH
// if not unit or not area then
78382: LD_VAR 0 1
78386: NOT
78387: PUSH
78388: LD_VAR 0 2
78392: NOT
78393: OR
78394: IFFALSE 78398
// exit ;
78396: GO 78574
// tmp := AreaToList ( area , i ) ;
78398: LD_ADDR_VAR 0 6
78402: PUSH
78403: LD_VAR 0 2
78407: PPUSH
78408: LD_VAR 0 5
78412: PPUSH
78413: CALL_OW 517
78417: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78418: LD_ADDR_VAR 0 5
78422: PUSH
78423: DOUBLE
78424: LD_INT 1
78426: DEC
78427: ST_TO_ADDR
78428: LD_VAR 0 6
78432: PUSH
78433: LD_INT 1
78435: ARRAY
78436: PUSH
78437: FOR_TO
78438: IFFALSE 78572
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78440: LD_ADDR_VAR 0 7
78444: PUSH
78445: LD_VAR 0 6
78449: PUSH
78450: LD_INT 1
78452: ARRAY
78453: PUSH
78454: LD_VAR 0 5
78458: ARRAY
78459: PUSH
78460: LD_VAR 0 6
78464: PUSH
78465: LD_INT 2
78467: ARRAY
78468: PUSH
78469: LD_VAR 0 5
78473: ARRAY
78474: PUSH
78475: EMPTY
78476: LIST
78477: LIST
78478: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78479: LD_INT 92
78481: PUSH
78482: LD_VAR 0 7
78486: PUSH
78487: LD_INT 1
78489: ARRAY
78490: PUSH
78491: LD_VAR 0 7
78495: PUSH
78496: LD_INT 2
78498: ARRAY
78499: PUSH
78500: LD_INT 2
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: PPUSH
78509: CALL_OW 69
78513: PUSH
78514: LD_INT 0
78516: EQUAL
78517: IFFALSE 78570
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78519: LD_VAR 0 1
78523: PPUSH
78524: LD_VAR 0 7
78528: PUSH
78529: LD_INT 1
78531: ARRAY
78532: PPUSH
78533: LD_VAR 0 7
78537: PUSH
78538: LD_INT 2
78540: ARRAY
78541: PPUSH
78542: LD_VAR 0 3
78546: PPUSH
78547: CALL_OW 48
// result := IsPlaced ( unit ) ;
78551: LD_ADDR_VAR 0 4
78555: PUSH
78556: LD_VAR 0 1
78560: PPUSH
78561: CALL_OW 305
78565: ST_TO_ADDR
// exit ;
78566: POP
78567: POP
78568: GO 78574
// end ; end ;
78570: GO 78437
78572: POP
78573: POP
// end ;
78574: LD_VAR 0 4
78578: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78579: LD_INT 0
78581: PPUSH
78582: PPUSH
78583: PPUSH
// if not side or side > 8 then
78584: LD_VAR 0 1
78588: NOT
78589: PUSH
78590: LD_VAR 0 1
78594: PUSH
78595: LD_INT 8
78597: GREATER
78598: OR
78599: IFFALSE 78603
// exit ;
78601: GO 78790
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78603: LD_ADDR_VAR 0 4
78607: PUSH
78608: LD_INT 22
78610: PUSH
78611: LD_VAR 0 1
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PUSH
78620: LD_INT 21
78622: PUSH
78623: LD_INT 3
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: PPUSH
78634: CALL_OW 69
78638: ST_TO_ADDR
// if not tmp then
78639: LD_VAR 0 4
78643: NOT
78644: IFFALSE 78648
// exit ;
78646: GO 78790
// enable_addtolog := true ;
78648: LD_ADDR_OWVAR 81
78652: PUSH
78653: LD_INT 1
78655: ST_TO_ADDR
// AddToLog ( [ ) ;
78656: LD_STRING [
78658: PPUSH
78659: CALL_OW 561
// for i in tmp do
78663: LD_ADDR_VAR 0 3
78667: PUSH
78668: LD_VAR 0 4
78672: PUSH
78673: FOR_IN
78674: IFFALSE 78781
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78676: LD_STRING [
78678: PUSH
78679: LD_VAR 0 3
78683: PPUSH
78684: CALL_OW 266
78688: STR
78689: PUSH
78690: LD_STRING , 
78692: STR
78693: PUSH
78694: LD_VAR 0 3
78698: PPUSH
78699: CALL_OW 250
78703: STR
78704: PUSH
78705: LD_STRING , 
78707: STR
78708: PUSH
78709: LD_VAR 0 3
78713: PPUSH
78714: CALL_OW 251
78718: STR
78719: PUSH
78720: LD_STRING , 
78722: STR
78723: PUSH
78724: LD_VAR 0 3
78728: PPUSH
78729: CALL_OW 254
78733: STR
78734: PUSH
78735: LD_STRING , 
78737: STR
78738: PUSH
78739: LD_VAR 0 3
78743: PPUSH
78744: LD_INT 1
78746: PPUSH
78747: CALL_OW 268
78751: STR
78752: PUSH
78753: LD_STRING , 
78755: STR
78756: PUSH
78757: LD_VAR 0 3
78761: PPUSH
78762: LD_INT 2
78764: PPUSH
78765: CALL_OW 268
78769: STR
78770: PUSH
78771: LD_STRING ],
78773: STR
78774: PPUSH
78775: CALL_OW 561
// end ;
78779: GO 78673
78781: POP
78782: POP
// AddToLog ( ]; ) ;
78783: LD_STRING ];
78785: PPUSH
78786: CALL_OW 561
// end ;
78790: LD_VAR 0 2
78794: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78795: LD_INT 0
78797: PPUSH
78798: PPUSH
78799: PPUSH
78800: PPUSH
78801: PPUSH
// if not area or not rate or not max then
78802: LD_VAR 0 1
78806: NOT
78807: PUSH
78808: LD_VAR 0 2
78812: NOT
78813: OR
78814: PUSH
78815: LD_VAR 0 4
78819: NOT
78820: OR
78821: IFFALSE 78825
// exit ;
78823: GO 79014
// while 1 do
78825: LD_INT 1
78827: IFFALSE 79014
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78829: LD_ADDR_VAR 0 9
78833: PUSH
78834: LD_VAR 0 1
78838: PPUSH
78839: LD_INT 1
78841: PPUSH
78842: CALL_OW 287
78846: PUSH
78847: LD_INT 10
78849: MUL
78850: ST_TO_ADDR
// r := rate / 10 ;
78851: LD_ADDR_VAR 0 7
78855: PUSH
78856: LD_VAR 0 2
78860: PUSH
78861: LD_INT 10
78863: DIVREAL
78864: ST_TO_ADDR
// time := 1 1$00 ;
78865: LD_ADDR_VAR 0 8
78869: PUSH
78870: LD_INT 2100
78872: ST_TO_ADDR
// if amount < min then
78873: LD_VAR 0 9
78877: PUSH
78878: LD_VAR 0 3
78882: LESS
78883: IFFALSE 78901
// r := r * 2 else
78885: LD_ADDR_VAR 0 7
78889: PUSH
78890: LD_VAR 0 7
78894: PUSH
78895: LD_INT 2
78897: MUL
78898: ST_TO_ADDR
78899: GO 78927
// if amount > max then
78901: LD_VAR 0 9
78905: PUSH
78906: LD_VAR 0 4
78910: GREATER
78911: IFFALSE 78927
// r := r / 2 ;
78913: LD_ADDR_VAR 0 7
78917: PUSH
78918: LD_VAR 0 7
78922: PUSH
78923: LD_INT 2
78925: DIVREAL
78926: ST_TO_ADDR
// time := time / r ;
78927: LD_ADDR_VAR 0 8
78931: PUSH
78932: LD_VAR 0 8
78936: PUSH
78937: LD_VAR 0 7
78941: DIVREAL
78942: ST_TO_ADDR
// if time < 0 then
78943: LD_VAR 0 8
78947: PUSH
78948: LD_INT 0
78950: LESS
78951: IFFALSE 78968
// time := time * - 1 ;
78953: LD_ADDR_VAR 0 8
78957: PUSH
78958: LD_VAR 0 8
78962: PUSH
78963: LD_INT 1
78965: NEG
78966: MUL
78967: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78968: LD_VAR 0 8
78972: PUSH
78973: LD_INT 35
78975: PPUSH
78976: LD_INT 875
78978: PPUSH
78979: CALL_OW 12
78983: PLUS
78984: PPUSH
78985: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78989: LD_INT 1
78991: PPUSH
78992: LD_INT 5
78994: PPUSH
78995: CALL_OW 12
78999: PPUSH
79000: LD_VAR 0 1
79004: PPUSH
79005: LD_INT 1
79007: PPUSH
79008: CALL_OW 55
// end ;
79012: GO 78825
// end ;
79014: LD_VAR 0 5
79018: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79019: LD_INT 0
79021: PPUSH
79022: PPUSH
79023: PPUSH
79024: PPUSH
79025: PPUSH
79026: PPUSH
79027: PPUSH
79028: PPUSH
// if not turrets or not factories then
79029: LD_VAR 0 1
79033: NOT
79034: PUSH
79035: LD_VAR 0 2
79039: NOT
79040: OR
79041: IFFALSE 79045
// exit ;
79043: GO 79352
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79045: LD_ADDR_VAR 0 10
79049: PUSH
79050: LD_INT 5
79052: PUSH
79053: LD_INT 6
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 2
79062: PUSH
79063: LD_INT 4
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: LD_INT 3
79072: PUSH
79073: LD_INT 5
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: LIST
79084: PUSH
79085: LD_INT 24
79087: PUSH
79088: LD_INT 25
79090: PUSH
79091: EMPTY
79092: LIST
79093: LIST
79094: PUSH
79095: LD_INT 23
79097: PUSH
79098: LD_INT 27
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: PUSH
79105: EMPTY
79106: LIST
79107: LIST
79108: PUSH
79109: LD_INT 42
79111: PUSH
79112: LD_INT 43
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: PUSH
79119: LD_INT 44
79121: PUSH
79122: LD_INT 46
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PUSH
79129: LD_INT 45
79131: PUSH
79132: LD_INT 47
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: PUSH
79139: EMPTY
79140: LIST
79141: LIST
79142: LIST
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: LIST
79148: ST_TO_ADDR
// result := [ ] ;
79149: LD_ADDR_VAR 0 3
79153: PUSH
79154: EMPTY
79155: ST_TO_ADDR
// for i in turrets do
79156: LD_ADDR_VAR 0 4
79160: PUSH
79161: LD_VAR 0 1
79165: PUSH
79166: FOR_IN
79167: IFFALSE 79350
// begin nat := GetNation ( i ) ;
79169: LD_ADDR_VAR 0 7
79173: PUSH
79174: LD_VAR 0 4
79178: PPUSH
79179: CALL_OW 248
79183: ST_TO_ADDR
// weapon := 0 ;
79184: LD_ADDR_VAR 0 8
79188: PUSH
79189: LD_INT 0
79191: ST_TO_ADDR
// if not nat then
79192: LD_VAR 0 7
79196: NOT
79197: IFFALSE 79201
// continue ;
79199: GO 79166
// for j in list [ nat ] do
79201: LD_ADDR_VAR 0 5
79205: PUSH
79206: LD_VAR 0 10
79210: PUSH
79211: LD_VAR 0 7
79215: ARRAY
79216: PUSH
79217: FOR_IN
79218: IFFALSE 79259
// if GetBWeapon ( i ) = j [ 1 ] then
79220: LD_VAR 0 4
79224: PPUSH
79225: CALL_OW 269
79229: PUSH
79230: LD_VAR 0 5
79234: PUSH
79235: LD_INT 1
79237: ARRAY
79238: EQUAL
79239: IFFALSE 79257
// begin weapon := j [ 2 ] ;
79241: LD_ADDR_VAR 0 8
79245: PUSH
79246: LD_VAR 0 5
79250: PUSH
79251: LD_INT 2
79253: ARRAY
79254: ST_TO_ADDR
// break ;
79255: GO 79259
// end ;
79257: GO 79217
79259: POP
79260: POP
// if not weapon then
79261: LD_VAR 0 8
79265: NOT
79266: IFFALSE 79270
// continue ;
79268: GO 79166
// for k in factories do
79270: LD_ADDR_VAR 0 6
79274: PUSH
79275: LD_VAR 0 2
79279: PUSH
79280: FOR_IN
79281: IFFALSE 79346
// begin weapons := AvailableWeaponList ( k ) ;
79283: LD_ADDR_VAR 0 9
79287: PUSH
79288: LD_VAR 0 6
79292: PPUSH
79293: CALL_OW 478
79297: ST_TO_ADDR
// if not weapons then
79298: LD_VAR 0 9
79302: NOT
79303: IFFALSE 79307
// continue ;
79305: GO 79280
// if weapon in weapons then
79307: LD_VAR 0 8
79311: PUSH
79312: LD_VAR 0 9
79316: IN
79317: IFFALSE 79344
// begin result := [ i , weapon ] ;
79319: LD_ADDR_VAR 0 3
79323: PUSH
79324: LD_VAR 0 4
79328: PUSH
79329: LD_VAR 0 8
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: ST_TO_ADDR
// exit ;
79338: POP
79339: POP
79340: POP
79341: POP
79342: GO 79352
// end ; end ;
79344: GO 79280
79346: POP
79347: POP
// end ;
79348: GO 79166
79350: POP
79351: POP
// end ;
79352: LD_VAR 0 3
79356: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79357: LD_INT 0
79359: PPUSH
// if not side or side > 8 then
79360: LD_VAR 0 3
79364: NOT
79365: PUSH
79366: LD_VAR 0 3
79370: PUSH
79371: LD_INT 8
79373: GREATER
79374: OR
79375: IFFALSE 79379
// exit ;
79377: GO 79438
// if not range then
79379: LD_VAR 0 4
79383: NOT
79384: IFFALSE 79395
// range := - 12 ;
79386: LD_ADDR_VAR 0 4
79390: PUSH
79391: LD_INT 12
79393: NEG
79394: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79395: LD_VAR 0 1
79399: PPUSH
79400: LD_VAR 0 2
79404: PPUSH
79405: LD_VAR 0 3
79409: PPUSH
79410: LD_VAR 0 4
79414: PPUSH
79415: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79419: LD_VAR 0 1
79423: PPUSH
79424: LD_VAR 0 2
79428: PPUSH
79429: LD_VAR 0 3
79433: PPUSH
79434: CALL_OW 331
// end ;
79438: LD_VAR 0 5
79442: RET
// export function Video ( mode ) ; begin
79443: LD_INT 0
79445: PPUSH
// ingame_video = mode ;
79446: LD_ADDR_OWVAR 52
79450: PUSH
79451: LD_VAR 0 1
79455: ST_TO_ADDR
// interface_hidden = mode ;
79456: LD_ADDR_OWVAR 54
79460: PUSH
79461: LD_VAR 0 1
79465: ST_TO_ADDR
// end ;
79466: LD_VAR 0 2
79470: RET
// export function Join ( array , element ) ; begin
79471: LD_INT 0
79473: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79474: LD_ADDR_VAR 0 3
79478: PUSH
79479: LD_VAR 0 1
79483: PPUSH
79484: LD_VAR 0 1
79488: PUSH
79489: LD_INT 1
79491: PLUS
79492: PPUSH
79493: LD_VAR 0 2
79497: PPUSH
79498: CALL_OW 1
79502: ST_TO_ADDR
// end ;
79503: LD_VAR 0 3
79507: RET
// export function JoinUnion ( array , element ) ; begin
79508: LD_INT 0
79510: PPUSH
// result := array union element ;
79511: LD_ADDR_VAR 0 3
79515: PUSH
79516: LD_VAR 0 1
79520: PUSH
79521: LD_VAR 0 2
79525: UNION
79526: ST_TO_ADDR
// end ;
79527: LD_VAR 0 3
79531: RET
// export function GetBehemoths ( side ) ; begin
79532: LD_INT 0
79534: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79535: LD_ADDR_VAR 0 2
79539: PUSH
79540: LD_INT 22
79542: PUSH
79543: LD_VAR 0 1
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: PUSH
79552: LD_INT 31
79554: PUSH
79555: LD_INT 25
79557: PUSH
79558: EMPTY
79559: LIST
79560: LIST
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: PPUSH
79566: CALL_OW 69
79570: ST_TO_ADDR
// end ;
79571: LD_VAR 0 2
79575: RET
// export function Shuffle ( array ) ; var i , index ; begin
79576: LD_INT 0
79578: PPUSH
79579: PPUSH
79580: PPUSH
// result := [ ] ;
79581: LD_ADDR_VAR 0 2
79585: PUSH
79586: EMPTY
79587: ST_TO_ADDR
// if not array then
79588: LD_VAR 0 1
79592: NOT
79593: IFFALSE 79597
// exit ;
79595: GO 79696
// Randomize ;
79597: CALL_OW 10
// for i = array downto 1 do
79601: LD_ADDR_VAR 0 3
79605: PUSH
79606: DOUBLE
79607: LD_VAR 0 1
79611: INC
79612: ST_TO_ADDR
79613: LD_INT 1
79615: PUSH
79616: FOR_DOWNTO
79617: IFFALSE 79694
// begin index := rand ( 1 , array ) ;
79619: LD_ADDR_VAR 0 4
79623: PUSH
79624: LD_INT 1
79626: PPUSH
79627: LD_VAR 0 1
79631: PPUSH
79632: CALL_OW 12
79636: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79637: LD_ADDR_VAR 0 2
79641: PUSH
79642: LD_VAR 0 2
79646: PPUSH
79647: LD_VAR 0 2
79651: PUSH
79652: LD_INT 1
79654: PLUS
79655: PPUSH
79656: LD_VAR 0 1
79660: PUSH
79661: LD_VAR 0 4
79665: ARRAY
79666: PPUSH
79667: CALL_OW 2
79671: ST_TO_ADDR
// array := Delete ( array , index ) ;
79672: LD_ADDR_VAR 0 1
79676: PUSH
79677: LD_VAR 0 1
79681: PPUSH
79682: LD_VAR 0 4
79686: PPUSH
79687: CALL_OW 3
79691: ST_TO_ADDR
// end ;
79692: GO 79616
79694: POP
79695: POP
// end ;
79696: LD_VAR 0 2
79700: RET
// export function GetBaseMaterials ( base ) ; begin
79701: LD_INT 0
79703: PPUSH
// result := [ 0 , 0 , 0 ] ;
79704: LD_ADDR_VAR 0 2
79708: PUSH
79709: LD_INT 0
79711: PUSH
79712: LD_INT 0
79714: PUSH
79715: LD_INT 0
79717: PUSH
79718: EMPTY
79719: LIST
79720: LIST
79721: LIST
79722: ST_TO_ADDR
// if not base then
79723: LD_VAR 0 1
79727: NOT
79728: IFFALSE 79732
// exit ;
79730: GO 79781
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79732: LD_ADDR_VAR 0 2
79736: PUSH
79737: LD_VAR 0 1
79741: PPUSH
79742: LD_INT 1
79744: PPUSH
79745: CALL_OW 275
79749: PUSH
79750: LD_VAR 0 1
79754: PPUSH
79755: LD_INT 2
79757: PPUSH
79758: CALL_OW 275
79762: PUSH
79763: LD_VAR 0 1
79767: PPUSH
79768: LD_INT 3
79770: PPUSH
79771: CALL_OW 275
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: LIST
79780: ST_TO_ADDR
// end ;
79781: LD_VAR 0 2
79785: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79786: LD_INT 0
79788: PPUSH
79789: PPUSH
// result := array ;
79790: LD_ADDR_VAR 0 3
79794: PUSH
79795: LD_VAR 0 1
79799: ST_TO_ADDR
// if size >= result then
79800: LD_VAR 0 2
79804: PUSH
79805: LD_VAR 0 3
79809: GREATEREQUAL
79810: IFFALSE 79814
// exit ;
79812: GO 79864
// if size then
79814: LD_VAR 0 2
79818: IFFALSE 79864
// for i := array downto size do
79820: LD_ADDR_VAR 0 4
79824: PUSH
79825: DOUBLE
79826: LD_VAR 0 1
79830: INC
79831: ST_TO_ADDR
79832: LD_VAR 0 2
79836: PUSH
79837: FOR_DOWNTO
79838: IFFALSE 79862
// result := Delete ( result , result ) ;
79840: LD_ADDR_VAR 0 3
79844: PUSH
79845: LD_VAR 0 3
79849: PPUSH
79850: LD_VAR 0 3
79854: PPUSH
79855: CALL_OW 3
79859: ST_TO_ADDR
79860: GO 79837
79862: POP
79863: POP
// end ;
79864: LD_VAR 0 3
79868: RET
// export function ComExit ( unit ) ; var tmp ; begin
79869: LD_INT 0
79871: PPUSH
79872: PPUSH
// if not IsInUnit ( unit ) then
79873: LD_VAR 0 1
79877: PPUSH
79878: CALL_OW 310
79882: NOT
79883: IFFALSE 79887
// exit ;
79885: GO 79947
// tmp := IsInUnit ( unit ) ;
79887: LD_ADDR_VAR 0 3
79891: PUSH
79892: LD_VAR 0 1
79896: PPUSH
79897: CALL_OW 310
79901: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79902: LD_VAR 0 3
79906: PPUSH
79907: CALL_OW 247
79911: PUSH
79912: LD_INT 2
79914: EQUAL
79915: IFFALSE 79928
// ComExitVehicle ( unit ) else
79917: LD_VAR 0 1
79921: PPUSH
79922: CALL_OW 121
79926: GO 79937
// ComExitBuilding ( unit ) ;
79928: LD_VAR 0 1
79932: PPUSH
79933: CALL_OW 122
// result := tmp ;
79937: LD_ADDR_VAR 0 2
79941: PUSH
79942: LD_VAR 0 3
79946: ST_TO_ADDR
// end ;
79947: LD_VAR 0 2
79951: RET
// export function ComExitAll ( units ) ; var i ; begin
79952: LD_INT 0
79954: PPUSH
79955: PPUSH
// if not units then
79956: LD_VAR 0 1
79960: NOT
79961: IFFALSE 79965
// exit ;
79963: GO 79991
// for i in units do
79965: LD_ADDR_VAR 0 3
79969: PUSH
79970: LD_VAR 0 1
79974: PUSH
79975: FOR_IN
79976: IFFALSE 79989
// ComExit ( i ) ;
79978: LD_VAR 0 3
79982: PPUSH
79983: CALL 79869 0 1
79987: GO 79975
79989: POP
79990: POP
// end ;
79991: LD_VAR 0 2
79995: RET
// export function ResetHc ; begin
79996: LD_INT 0
79998: PPUSH
// InitHc ;
79999: CALL_OW 19
// hc_importance := 0 ;
80003: LD_ADDR_OWVAR 32
80007: PUSH
80008: LD_INT 0
80010: ST_TO_ADDR
// end ;
80011: LD_VAR 0 1
80015: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80016: LD_INT 0
80018: PPUSH
80019: PPUSH
80020: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80021: LD_ADDR_VAR 0 6
80025: PUSH
80026: LD_VAR 0 1
80030: PUSH
80031: LD_VAR 0 3
80035: PLUS
80036: PUSH
80037: LD_INT 2
80039: DIV
80040: ST_TO_ADDR
// if _x < 0 then
80041: LD_VAR 0 6
80045: PUSH
80046: LD_INT 0
80048: LESS
80049: IFFALSE 80066
// _x := _x * - 1 ;
80051: LD_ADDR_VAR 0 6
80055: PUSH
80056: LD_VAR 0 6
80060: PUSH
80061: LD_INT 1
80063: NEG
80064: MUL
80065: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80066: LD_ADDR_VAR 0 7
80070: PUSH
80071: LD_VAR 0 2
80075: PUSH
80076: LD_VAR 0 4
80080: PLUS
80081: PUSH
80082: LD_INT 2
80084: DIV
80085: ST_TO_ADDR
// if _y < 0 then
80086: LD_VAR 0 7
80090: PUSH
80091: LD_INT 0
80093: LESS
80094: IFFALSE 80111
// _y := _y * - 1 ;
80096: LD_ADDR_VAR 0 7
80100: PUSH
80101: LD_VAR 0 7
80105: PUSH
80106: LD_INT 1
80108: NEG
80109: MUL
80110: ST_TO_ADDR
// result := [ _x , _y ] ;
80111: LD_ADDR_VAR 0 5
80115: PUSH
80116: LD_VAR 0 6
80120: PUSH
80121: LD_VAR 0 7
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: ST_TO_ADDR
// end ;
80130: LD_VAR 0 5
80134: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80135: LD_INT 0
80137: PPUSH
80138: PPUSH
80139: PPUSH
80140: PPUSH
// task := GetTaskList ( unit ) ;
80141: LD_ADDR_VAR 0 7
80145: PUSH
80146: LD_VAR 0 1
80150: PPUSH
80151: CALL_OW 437
80155: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80156: LD_VAR 0 7
80160: NOT
80161: PUSH
80162: LD_VAR 0 1
80166: PPUSH
80167: LD_VAR 0 2
80171: PPUSH
80172: CALL_OW 308
80176: NOT
80177: AND
80178: IFFALSE 80182
// exit ;
80180: GO 80300
// if IsInArea ( unit , area ) then
80182: LD_VAR 0 1
80186: PPUSH
80187: LD_VAR 0 2
80191: PPUSH
80192: CALL_OW 308
80196: IFFALSE 80214
// begin ComMoveToArea ( unit , goAway ) ;
80198: LD_VAR 0 1
80202: PPUSH
80203: LD_VAR 0 3
80207: PPUSH
80208: CALL_OW 113
// exit ;
80212: GO 80300
// end ; if task [ 1 ] [ 1 ] <> M then
80214: LD_VAR 0 7
80218: PUSH
80219: LD_INT 1
80221: ARRAY
80222: PUSH
80223: LD_INT 1
80225: ARRAY
80226: PUSH
80227: LD_STRING M
80229: NONEQUAL
80230: IFFALSE 80234
// exit ;
80232: GO 80300
// x := task [ 1 ] [ 2 ] ;
80234: LD_ADDR_VAR 0 5
80238: PUSH
80239: LD_VAR 0 7
80243: PUSH
80244: LD_INT 1
80246: ARRAY
80247: PUSH
80248: LD_INT 2
80250: ARRAY
80251: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80252: LD_ADDR_VAR 0 6
80256: PUSH
80257: LD_VAR 0 7
80261: PUSH
80262: LD_INT 1
80264: ARRAY
80265: PUSH
80266: LD_INT 3
80268: ARRAY
80269: ST_TO_ADDR
// if InArea ( x , y , area ) then
80270: LD_VAR 0 5
80274: PPUSH
80275: LD_VAR 0 6
80279: PPUSH
80280: LD_VAR 0 2
80284: PPUSH
80285: CALL_OW 309
80289: IFFALSE 80300
// ComStop ( unit ) ;
80291: LD_VAR 0 1
80295: PPUSH
80296: CALL_OW 141
// end ;
80300: LD_VAR 0 4
80304: RET
// export function Abs ( value ) ; begin
80305: LD_INT 0
80307: PPUSH
// result := value ;
80308: LD_ADDR_VAR 0 2
80312: PUSH
80313: LD_VAR 0 1
80317: ST_TO_ADDR
// if value < 0 then
80318: LD_VAR 0 1
80322: PUSH
80323: LD_INT 0
80325: LESS
80326: IFFALSE 80343
// result := value * - 1 ;
80328: LD_ADDR_VAR 0 2
80332: PUSH
80333: LD_VAR 0 1
80337: PUSH
80338: LD_INT 1
80340: NEG
80341: MUL
80342: ST_TO_ADDR
// end ;
80343: LD_VAR 0 2
80347: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80348: LD_INT 0
80350: PPUSH
80351: PPUSH
80352: PPUSH
80353: PPUSH
80354: PPUSH
80355: PPUSH
80356: PPUSH
80357: PPUSH
// if not unit or not building then
80358: LD_VAR 0 1
80362: NOT
80363: PUSH
80364: LD_VAR 0 2
80368: NOT
80369: OR
80370: IFFALSE 80374
// exit ;
80372: GO 80600
// x := GetX ( building ) ;
80374: LD_ADDR_VAR 0 4
80378: PUSH
80379: LD_VAR 0 2
80383: PPUSH
80384: CALL_OW 250
80388: ST_TO_ADDR
// y := GetY ( building ) ;
80389: LD_ADDR_VAR 0 6
80393: PUSH
80394: LD_VAR 0 2
80398: PPUSH
80399: CALL_OW 251
80403: ST_TO_ADDR
// d := GetDir ( building ) ;
80404: LD_ADDR_VAR 0 8
80408: PUSH
80409: LD_VAR 0 2
80413: PPUSH
80414: CALL_OW 254
80418: ST_TO_ADDR
// r := 4 ;
80419: LD_ADDR_VAR 0 9
80423: PUSH
80424: LD_INT 4
80426: ST_TO_ADDR
// for i := 1 to 5 do
80427: LD_ADDR_VAR 0 10
80431: PUSH
80432: DOUBLE
80433: LD_INT 1
80435: DEC
80436: ST_TO_ADDR
80437: LD_INT 5
80439: PUSH
80440: FOR_TO
80441: IFFALSE 80598
// begin _x := ShiftX ( x , d , r + i ) ;
80443: LD_ADDR_VAR 0 5
80447: PUSH
80448: LD_VAR 0 4
80452: PPUSH
80453: LD_VAR 0 8
80457: PPUSH
80458: LD_VAR 0 9
80462: PUSH
80463: LD_VAR 0 10
80467: PLUS
80468: PPUSH
80469: CALL_OW 272
80473: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80474: LD_ADDR_VAR 0 7
80478: PUSH
80479: LD_VAR 0 6
80483: PPUSH
80484: LD_VAR 0 8
80488: PPUSH
80489: LD_VAR 0 9
80493: PUSH
80494: LD_VAR 0 10
80498: PLUS
80499: PPUSH
80500: CALL_OW 273
80504: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80505: LD_VAR 0 5
80509: PPUSH
80510: LD_VAR 0 7
80514: PPUSH
80515: CALL_OW 488
80519: PUSH
80520: LD_VAR 0 5
80524: PPUSH
80525: LD_VAR 0 7
80529: PPUSH
80530: CALL_OW 428
80534: PPUSH
80535: CALL_OW 247
80539: PUSH
80540: LD_INT 3
80542: PUSH
80543: LD_INT 2
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: IN
80550: NOT
80551: AND
80552: IFFALSE 80596
// begin ComMoveXY ( unit , _x , _y ) ;
80554: LD_VAR 0 1
80558: PPUSH
80559: LD_VAR 0 5
80563: PPUSH
80564: LD_VAR 0 7
80568: PPUSH
80569: CALL_OW 111
// result := [ _x , _y ] ;
80573: LD_ADDR_VAR 0 3
80577: PUSH
80578: LD_VAR 0 5
80582: PUSH
80583: LD_VAR 0 7
80587: PUSH
80588: EMPTY
80589: LIST
80590: LIST
80591: ST_TO_ADDR
// exit ;
80592: POP
80593: POP
80594: GO 80600
// end ; end ;
80596: GO 80440
80598: POP
80599: POP
// end ;
80600: LD_VAR 0 3
80604: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80605: LD_INT 0
80607: PPUSH
80608: PPUSH
80609: PPUSH
// result := 0 ;
80610: LD_ADDR_VAR 0 3
80614: PUSH
80615: LD_INT 0
80617: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80618: LD_VAR 0 1
80622: PUSH
80623: LD_INT 0
80625: LESS
80626: PUSH
80627: LD_VAR 0 1
80631: PUSH
80632: LD_INT 8
80634: GREATER
80635: OR
80636: PUSH
80637: LD_VAR 0 2
80641: PUSH
80642: LD_INT 0
80644: LESS
80645: OR
80646: PUSH
80647: LD_VAR 0 2
80651: PUSH
80652: LD_INT 8
80654: GREATER
80655: OR
80656: IFFALSE 80660
// exit ;
80658: GO 80735
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80660: LD_ADDR_VAR 0 4
80664: PUSH
80665: LD_INT 22
80667: PUSH
80668: LD_VAR 0 2
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PPUSH
80677: CALL_OW 69
80681: PUSH
80682: FOR_IN
80683: IFFALSE 80733
// begin un := UnitShoot ( i ) ;
80685: LD_ADDR_VAR 0 5
80689: PUSH
80690: LD_VAR 0 4
80694: PPUSH
80695: CALL_OW 504
80699: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80700: LD_VAR 0 5
80704: PPUSH
80705: CALL_OW 255
80709: PUSH
80710: LD_VAR 0 1
80714: EQUAL
80715: IFFALSE 80731
// begin result := un ;
80717: LD_ADDR_VAR 0 3
80721: PUSH
80722: LD_VAR 0 5
80726: ST_TO_ADDR
// exit ;
80727: POP
80728: POP
80729: GO 80735
// end ; end ;
80731: GO 80682
80733: POP
80734: POP
// end ;
80735: LD_VAR 0 3
80739: RET
// export function GetCargoBay ( units ) ; begin
80740: LD_INT 0
80742: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80743: LD_ADDR_VAR 0 2
80747: PUSH
80748: LD_VAR 0 1
80752: PPUSH
80753: LD_INT 2
80755: PUSH
80756: LD_INT 34
80758: PUSH
80759: LD_INT 12
80761: PUSH
80762: EMPTY
80763: LIST
80764: LIST
80765: PUSH
80766: LD_INT 34
80768: PUSH
80769: LD_INT 51
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: PUSH
80776: LD_INT 34
80778: PUSH
80779: LD_INT 32
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: PUSH
80786: LD_INT 34
80788: PUSH
80789: LD_INT 89
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: LIST
80802: PPUSH
80803: CALL_OW 72
80807: ST_TO_ADDR
// end ;
80808: LD_VAR 0 2
80812: RET
// export function Negate ( value ) ; begin
80813: LD_INT 0
80815: PPUSH
// result := not value ;
80816: LD_ADDR_VAR 0 2
80820: PUSH
80821: LD_VAR 0 1
80825: NOT
80826: ST_TO_ADDR
// end ;
80827: LD_VAR 0 2
80831: RET
// export function Inc ( value ) ; begin
80832: LD_INT 0
80834: PPUSH
// result := value + 1 ;
80835: LD_ADDR_VAR 0 2
80839: PUSH
80840: LD_VAR 0 1
80844: PUSH
80845: LD_INT 1
80847: PLUS
80848: ST_TO_ADDR
// end ;
80849: LD_VAR 0 2
80853: RET
// export function Dec ( value ) ; begin
80854: LD_INT 0
80856: PPUSH
// result := value - 1 ;
80857: LD_ADDR_VAR 0 2
80861: PUSH
80862: LD_VAR 0 1
80866: PUSH
80867: LD_INT 1
80869: MINUS
80870: ST_TO_ADDR
// end ;
80871: LD_VAR 0 2
80875: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80876: LD_INT 0
80878: PPUSH
80879: PPUSH
80880: PPUSH
80881: PPUSH
80882: PPUSH
80883: PPUSH
80884: PPUSH
80885: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80886: LD_VAR 0 1
80890: PPUSH
80891: LD_VAR 0 2
80895: PPUSH
80896: CALL_OW 488
80900: NOT
80901: PUSH
80902: LD_VAR 0 3
80906: PPUSH
80907: LD_VAR 0 4
80911: PPUSH
80912: CALL_OW 488
80916: NOT
80917: OR
80918: IFFALSE 80931
// begin result := - 1 ;
80920: LD_ADDR_VAR 0 5
80924: PUSH
80925: LD_INT 1
80927: NEG
80928: ST_TO_ADDR
// exit ;
80929: GO 81166
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80931: LD_ADDR_VAR 0 12
80935: PUSH
80936: LD_VAR 0 1
80940: PPUSH
80941: LD_VAR 0 2
80945: PPUSH
80946: LD_VAR 0 3
80950: PPUSH
80951: LD_VAR 0 4
80955: PPUSH
80956: CALL 80016 0 4
80960: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80961: LD_ADDR_VAR 0 11
80965: PUSH
80966: LD_VAR 0 1
80970: PPUSH
80971: LD_VAR 0 2
80975: PPUSH
80976: LD_VAR 0 12
80980: PUSH
80981: LD_INT 1
80983: ARRAY
80984: PPUSH
80985: LD_VAR 0 12
80989: PUSH
80990: LD_INT 2
80992: ARRAY
80993: PPUSH
80994: CALL_OW 298
80998: ST_TO_ADDR
// distance := 9999 ;
80999: LD_ADDR_VAR 0 10
81003: PUSH
81004: LD_INT 9999
81006: ST_TO_ADDR
// for i := 0 to 5 do
81007: LD_ADDR_VAR 0 6
81011: PUSH
81012: DOUBLE
81013: LD_INT 0
81015: DEC
81016: ST_TO_ADDR
81017: LD_INT 5
81019: PUSH
81020: FOR_TO
81021: IFFALSE 81164
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81023: LD_ADDR_VAR 0 7
81027: PUSH
81028: LD_VAR 0 1
81032: PPUSH
81033: LD_VAR 0 6
81037: PPUSH
81038: LD_VAR 0 11
81042: PPUSH
81043: CALL_OW 272
81047: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81048: LD_ADDR_VAR 0 8
81052: PUSH
81053: LD_VAR 0 2
81057: PPUSH
81058: LD_VAR 0 6
81062: PPUSH
81063: LD_VAR 0 11
81067: PPUSH
81068: CALL_OW 273
81072: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81073: LD_VAR 0 7
81077: PPUSH
81078: LD_VAR 0 8
81082: PPUSH
81083: CALL_OW 488
81087: NOT
81088: IFFALSE 81092
// continue ;
81090: GO 81020
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81092: LD_ADDR_VAR 0 9
81096: PUSH
81097: LD_VAR 0 12
81101: PUSH
81102: LD_INT 1
81104: ARRAY
81105: PPUSH
81106: LD_VAR 0 12
81110: PUSH
81111: LD_INT 2
81113: ARRAY
81114: PPUSH
81115: LD_VAR 0 7
81119: PPUSH
81120: LD_VAR 0 8
81124: PPUSH
81125: CALL_OW 298
81129: ST_TO_ADDR
// if tmp < distance then
81130: LD_VAR 0 9
81134: PUSH
81135: LD_VAR 0 10
81139: LESS
81140: IFFALSE 81162
// begin result := i ;
81142: LD_ADDR_VAR 0 5
81146: PUSH
81147: LD_VAR 0 6
81151: ST_TO_ADDR
// distance := tmp ;
81152: LD_ADDR_VAR 0 10
81156: PUSH
81157: LD_VAR 0 9
81161: ST_TO_ADDR
// end ; end ;
81162: GO 81020
81164: POP
81165: POP
// end ;
81166: LD_VAR 0 5
81170: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81171: LD_INT 0
81173: PPUSH
81174: PPUSH
// if not driver or not IsInUnit ( driver ) then
81175: LD_VAR 0 1
81179: NOT
81180: PUSH
81181: LD_VAR 0 1
81185: PPUSH
81186: CALL_OW 310
81190: NOT
81191: OR
81192: IFFALSE 81196
// exit ;
81194: GO 81286
// vehicle := IsInUnit ( driver ) ;
81196: LD_ADDR_VAR 0 3
81200: PUSH
81201: LD_VAR 0 1
81205: PPUSH
81206: CALL_OW 310
81210: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81211: LD_VAR 0 1
81215: PPUSH
81216: LD_STRING \
81218: PUSH
81219: LD_INT 0
81221: PUSH
81222: LD_INT 0
81224: PUSH
81225: LD_INT 0
81227: PUSH
81228: LD_INT 0
81230: PUSH
81231: LD_INT 0
81233: PUSH
81234: LD_INT 0
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: LIST
81241: LIST
81242: LIST
81243: LIST
81244: LIST
81245: PUSH
81246: LD_STRING E
81248: PUSH
81249: LD_INT 0
81251: PUSH
81252: LD_INT 0
81254: PUSH
81255: LD_VAR 0 3
81259: PUSH
81260: LD_INT 0
81262: PUSH
81263: LD_INT 0
81265: PUSH
81266: LD_INT 0
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: LIST
81273: LIST
81274: LIST
81275: LIST
81276: LIST
81277: PUSH
81278: EMPTY
81279: LIST
81280: LIST
81281: PPUSH
81282: CALL_OW 446
// end ;
81286: LD_VAR 0 2
81290: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81291: LD_INT 0
81293: PPUSH
81294: PPUSH
// if not driver or not IsInUnit ( driver ) then
81295: LD_VAR 0 1
81299: NOT
81300: PUSH
81301: LD_VAR 0 1
81305: PPUSH
81306: CALL_OW 310
81310: NOT
81311: OR
81312: IFFALSE 81316
// exit ;
81314: GO 81406
// vehicle := IsInUnit ( driver ) ;
81316: LD_ADDR_VAR 0 3
81320: PUSH
81321: LD_VAR 0 1
81325: PPUSH
81326: CALL_OW 310
81330: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81331: LD_VAR 0 1
81335: PPUSH
81336: LD_STRING \
81338: PUSH
81339: LD_INT 0
81341: PUSH
81342: LD_INT 0
81344: PUSH
81345: LD_INT 0
81347: PUSH
81348: LD_INT 0
81350: PUSH
81351: LD_INT 0
81353: PUSH
81354: LD_INT 0
81356: PUSH
81357: EMPTY
81358: LIST
81359: LIST
81360: LIST
81361: LIST
81362: LIST
81363: LIST
81364: LIST
81365: PUSH
81366: LD_STRING E
81368: PUSH
81369: LD_INT 0
81371: PUSH
81372: LD_INT 0
81374: PUSH
81375: LD_VAR 0 3
81379: PUSH
81380: LD_INT 0
81382: PUSH
81383: LD_INT 0
81385: PUSH
81386: LD_INT 0
81388: PUSH
81389: EMPTY
81390: LIST
81391: LIST
81392: LIST
81393: LIST
81394: LIST
81395: LIST
81396: LIST
81397: PUSH
81398: EMPTY
81399: LIST
81400: LIST
81401: PPUSH
81402: CALL_OW 447
// end ;
81406: LD_VAR 0 2
81410: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81411: LD_INT 0
81413: PPUSH
81414: PPUSH
81415: PPUSH
// tmp := [ ] ;
81416: LD_ADDR_VAR 0 5
81420: PUSH
81421: EMPTY
81422: ST_TO_ADDR
// for i in units do
81423: LD_ADDR_VAR 0 4
81427: PUSH
81428: LD_VAR 0 1
81432: PUSH
81433: FOR_IN
81434: IFFALSE 81472
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81436: LD_ADDR_VAR 0 5
81440: PUSH
81441: LD_VAR 0 5
81445: PPUSH
81446: LD_VAR 0 5
81450: PUSH
81451: LD_INT 1
81453: PLUS
81454: PPUSH
81455: LD_VAR 0 4
81459: PPUSH
81460: CALL_OW 256
81464: PPUSH
81465: CALL_OW 2
81469: ST_TO_ADDR
81470: GO 81433
81472: POP
81473: POP
// if not tmp then
81474: LD_VAR 0 5
81478: NOT
81479: IFFALSE 81483
// exit ;
81481: GO 81531
// if asc then
81483: LD_VAR 0 2
81487: IFFALSE 81511
// result := SortListByListAsc ( units , tmp ) else
81489: LD_ADDR_VAR 0 3
81493: PUSH
81494: LD_VAR 0 1
81498: PPUSH
81499: LD_VAR 0 5
81503: PPUSH
81504: CALL_OW 76
81508: ST_TO_ADDR
81509: GO 81531
// result := SortListByListDesc ( units , tmp ) ;
81511: LD_ADDR_VAR 0 3
81515: PUSH
81516: LD_VAR 0 1
81520: PPUSH
81521: LD_VAR 0 5
81525: PPUSH
81526: CALL_OW 77
81530: ST_TO_ADDR
// end ;
81531: LD_VAR 0 3
81535: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81536: LD_INT 0
81538: PPUSH
81539: PPUSH
// task := GetTaskList ( mech ) ;
81540: LD_ADDR_VAR 0 4
81544: PUSH
81545: LD_VAR 0 1
81549: PPUSH
81550: CALL_OW 437
81554: ST_TO_ADDR
// if not task then
81555: LD_VAR 0 4
81559: NOT
81560: IFFALSE 81564
// exit ;
81562: GO 81606
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81564: LD_ADDR_VAR 0 3
81568: PUSH
81569: LD_VAR 0 4
81573: PUSH
81574: LD_INT 1
81576: ARRAY
81577: PUSH
81578: LD_INT 1
81580: ARRAY
81581: PUSH
81582: LD_STRING r
81584: EQUAL
81585: PUSH
81586: LD_VAR 0 4
81590: PUSH
81591: LD_INT 1
81593: ARRAY
81594: PUSH
81595: LD_INT 4
81597: ARRAY
81598: PUSH
81599: LD_VAR 0 2
81603: EQUAL
81604: AND
81605: ST_TO_ADDR
// end ;
81606: LD_VAR 0 3
81610: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81611: LD_INT 0
81613: PPUSH
// SetDir ( unit , d ) ;
81614: LD_VAR 0 1
81618: PPUSH
81619: LD_VAR 0 4
81623: PPUSH
81624: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81628: LD_VAR 0 1
81632: PPUSH
81633: LD_VAR 0 2
81637: PPUSH
81638: LD_VAR 0 3
81642: PPUSH
81643: LD_VAR 0 5
81647: PPUSH
81648: CALL_OW 48
// end ;
81652: LD_VAR 0 6
81656: RET
// export function ToNaturalNumber ( number ) ; begin
81657: LD_INT 0
81659: PPUSH
// result := number div 1 ;
81660: LD_ADDR_VAR 0 2
81664: PUSH
81665: LD_VAR 0 1
81669: PUSH
81670: LD_INT 1
81672: DIV
81673: ST_TO_ADDR
// if number < 0 then
81674: LD_VAR 0 1
81678: PUSH
81679: LD_INT 0
81681: LESS
81682: IFFALSE 81692
// result := 0 ;
81684: LD_ADDR_VAR 0 2
81688: PUSH
81689: LD_INT 0
81691: ST_TO_ADDR
// end ;
81692: LD_VAR 0 2
81696: RET
// export function SortByClass ( units , class ) ; var un ; begin
81697: LD_INT 0
81699: PPUSH
81700: PPUSH
// if not units or not class then
81701: LD_VAR 0 1
81705: NOT
81706: PUSH
81707: LD_VAR 0 2
81711: NOT
81712: OR
81713: IFFALSE 81717
// exit ;
81715: GO 81812
// result := [ ] ;
81717: LD_ADDR_VAR 0 3
81721: PUSH
81722: EMPTY
81723: ST_TO_ADDR
// for un in units do
81724: LD_ADDR_VAR 0 4
81728: PUSH
81729: LD_VAR 0 1
81733: PUSH
81734: FOR_IN
81735: IFFALSE 81810
// if GetClass ( un ) = class then
81737: LD_VAR 0 4
81741: PPUSH
81742: CALL_OW 257
81746: PUSH
81747: LD_VAR 0 2
81751: EQUAL
81752: IFFALSE 81779
// result := Insert ( result , 1 , un ) else
81754: LD_ADDR_VAR 0 3
81758: PUSH
81759: LD_VAR 0 3
81763: PPUSH
81764: LD_INT 1
81766: PPUSH
81767: LD_VAR 0 4
81771: PPUSH
81772: CALL_OW 2
81776: ST_TO_ADDR
81777: GO 81808
// result := Replace ( result , result + 1 , un ) ;
81779: LD_ADDR_VAR 0 3
81783: PUSH
81784: LD_VAR 0 3
81788: PPUSH
81789: LD_VAR 0 3
81793: PUSH
81794: LD_INT 1
81796: PLUS
81797: PPUSH
81798: LD_VAR 0 4
81802: PPUSH
81803: CALL_OW 1
81807: ST_TO_ADDR
81808: GO 81734
81810: POP
81811: POP
// end ;
81812: LD_VAR 0 3
81816: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81817: LD_INT 0
81819: PPUSH
81820: PPUSH
81821: PPUSH
81822: PPUSH
81823: PPUSH
81824: PPUSH
81825: PPUSH
// result := [ ] ;
81826: LD_ADDR_VAR 0 4
81830: PUSH
81831: EMPTY
81832: ST_TO_ADDR
// if x - r < 0 then
81833: LD_VAR 0 1
81837: PUSH
81838: LD_VAR 0 3
81842: MINUS
81843: PUSH
81844: LD_INT 0
81846: LESS
81847: IFFALSE 81859
// min_x := 0 else
81849: LD_ADDR_VAR 0 8
81853: PUSH
81854: LD_INT 0
81856: ST_TO_ADDR
81857: GO 81875
// min_x := x - r ;
81859: LD_ADDR_VAR 0 8
81863: PUSH
81864: LD_VAR 0 1
81868: PUSH
81869: LD_VAR 0 3
81873: MINUS
81874: ST_TO_ADDR
// if y - r < 0 then
81875: LD_VAR 0 2
81879: PUSH
81880: LD_VAR 0 3
81884: MINUS
81885: PUSH
81886: LD_INT 0
81888: LESS
81889: IFFALSE 81901
// min_y := 0 else
81891: LD_ADDR_VAR 0 7
81895: PUSH
81896: LD_INT 0
81898: ST_TO_ADDR
81899: GO 81917
// min_y := y - r ;
81901: LD_ADDR_VAR 0 7
81905: PUSH
81906: LD_VAR 0 2
81910: PUSH
81911: LD_VAR 0 3
81915: MINUS
81916: ST_TO_ADDR
// max_x := x + r ;
81917: LD_ADDR_VAR 0 9
81921: PUSH
81922: LD_VAR 0 1
81926: PUSH
81927: LD_VAR 0 3
81931: PLUS
81932: ST_TO_ADDR
// max_y := y + r ;
81933: LD_ADDR_VAR 0 10
81937: PUSH
81938: LD_VAR 0 2
81942: PUSH
81943: LD_VAR 0 3
81947: PLUS
81948: ST_TO_ADDR
// for _x = min_x to max_x do
81949: LD_ADDR_VAR 0 5
81953: PUSH
81954: DOUBLE
81955: LD_VAR 0 8
81959: DEC
81960: ST_TO_ADDR
81961: LD_VAR 0 9
81965: PUSH
81966: FOR_TO
81967: IFFALSE 82068
// for _y = min_y to max_y do
81969: LD_ADDR_VAR 0 6
81973: PUSH
81974: DOUBLE
81975: LD_VAR 0 7
81979: DEC
81980: ST_TO_ADDR
81981: LD_VAR 0 10
81985: PUSH
81986: FOR_TO
81987: IFFALSE 82064
// begin if not ValidHex ( _x , _y ) then
81989: LD_VAR 0 5
81993: PPUSH
81994: LD_VAR 0 6
81998: PPUSH
81999: CALL_OW 488
82003: NOT
82004: IFFALSE 82008
// continue ;
82006: GO 81986
// if GetResourceTypeXY ( _x , _y ) then
82008: LD_VAR 0 5
82012: PPUSH
82013: LD_VAR 0 6
82017: PPUSH
82018: CALL_OW 283
82022: IFFALSE 82062
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82024: LD_ADDR_VAR 0 4
82028: PUSH
82029: LD_VAR 0 4
82033: PPUSH
82034: LD_VAR 0 4
82038: PUSH
82039: LD_INT 1
82041: PLUS
82042: PPUSH
82043: LD_VAR 0 5
82047: PUSH
82048: LD_VAR 0 6
82052: PUSH
82053: EMPTY
82054: LIST
82055: LIST
82056: PPUSH
82057: CALL_OW 1
82061: ST_TO_ADDR
// end ;
82062: GO 81986
82064: POP
82065: POP
82066: GO 81966
82068: POP
82069: POP
// end ;
82070: LD_VAR 0 4
82074: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82075: LD_INT 0
82077: PPUSH
82078: PPUSH
82079: PPUSH
82080: PPUSH
82081: PPUSH
82082: PPUSH
82083: PPUSH
82084: PPUSH
// if not units then
82085: LD_VAR 0 1
82089: NOT
82090: IFFALSE 82094
// exit ;
82092: GO 82622
// result := UnitFilter ( units , [ f_ok ] ) ;
82094: LD_ADDR_VAR 0 3
82098: PUSH
82099: LD_VAR 0 1
82103: PPUSH
82104: LD_INT 50
82106: PUSH
82107: EMPTY
82108: LIST
82109: PPUSH
82110: CALL_OW 72
82114: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82115: LD_ADDR_VAR 0 8
82119: PUSH
82120: LD_VAR 0 1
82124: PUSH
82125: LD_INT 1
82127: ARRAY
82128: PPUSH
82129: CALL_OW 255
82133: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82134: LD_ADDR_VAR 0 10
82138: PUSH
82139: LD_INT 29
82141: PUSH
82142: LD_INT 91
82144: PUSH
82145: LD_INT 49
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: LIST
82152: ST_TO_ADDR
// if not result then
82153: LD_VAR 0 3
82157: NOT
82158: IFFALSE 82162
// exit ;
82160: GO 82622
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82162: LD_ADDR_VAR 0 5
82166: PUSH
82167: LD_INT 81
82169: PUSH
82170: LD_VAR 0 8
82174: PUSH
82175: EMPTY
82176: LIST
82177: LIST
82178: PPUSH
82179: CALL_OW 69
82183: ST_TO_ADDR
// for i in result do
82184: LD_ADDR_VAR 0 4
82188: PUSH
82189: LD_VAR 0 3
82193: PUSH
82194: FOR_IN
82195: IFFALSE 82620
// begin tag := GetTag ( i ) + 1 ;
82197: LD_ADDR_VAR 0 9
82201: PUSH
82202: LD_VAR 0 4
82206: PPUSH
82207: CALL_OW 110
82211: PUSH
82212: LD_INT 1
82214: PLUS
82215: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82216: LD_ADDR_VAR 0 7
82220: PUSH
82221: LD_VAR 0 4
82225: PPUSH
82226: CALL_OW 250
82230: PPUSH
82231: LD_VAR 0 4
82235: PPUSH
82236: CALL_OW 251
82240: PPUSH
82241: LD_INT 4
82243: PPUSH
82244: CALL 81817 0 3
82248: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82249: LD_VAR 0 4
82253: PPUSH
82254: CALL_OW 247
82258: PUSH
82259: LD_INT 2
82261: EQUAL
82262: PUSH
82263: LD_VAR 0 7
82267: PUSH
82268: LD_INT 2
82270: GREATER
82271: AND
82272: PUSH
82273: LD_VAR 0 4
82277: PPUSH
82278: CALL_OW 264
82282: PUSH
82283: LD_VAR 0 10
82287: IN
82288: NOT
82289: AND
82290: IFFALSE 82329
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82292: LD_VAR 0 4
82296: PPUSH
82297: LD_VAR 0 7
82301: PUSH
82302: LD_INT 1
82304: ARRAY
82305: PUSH
82306: LD_INT 1
82308: ARRAY
82309: PPUSH
82310: LD_VAR 0 7
82314: PUSH
82315: LD_INT 1
82317: ARRAY
82318: PUSH
82319: LD_INT 2
82321: ARRAY
82322: PPUSH
82323: CALL_OW 116
82327: GO 82618
// if path > tag then
82329: LD_VAR 0 2
82333: PUSH
82334: LD_VAR 0 9
82338: GREATER
82339: IFFALSE 82547
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82341: LD_ADDR_VAR 0 6
82345: PUSH
82346: LD_VAR 0 5
82350: PPUSH
82351: LD_INT 91
82353: PUSH
82354: LD_VAR 0 4
82358: PUSH
82359: LD_INT 8
82361: PUSH
82362: EMPTY
82363: LIST
82364: LIST
82365: LIST
82366: PPUSH
82367: CALL_OW 72
82371: ST_TO_ADDR
// if nearEnemy then
82372: LD_VAR 0 6
82376: IFFALSE 82445
// begin if GetWeapon ( i ) = ru_time_lapser then
82378: LD_VAR 0 4
82382: PPUSH
82383: CALL_OW 264
82387: PUSH
82388: LD_INT 49
82390: EQUAL
82391: IFFALSE 82419
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82393: LD_VAR 0 4
82397: PPUSH
82398: LD_VAR 0 6
82402: PPUSH
82403: LD_VAR 0 4
82407: PPUSH
82408: CALL_OW 74
82412: PPUSH
82413: CALL_OW 112
82417: GO 82443
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82419: LD_VAR 0 4
82423: PPUSH
82424: LD_VAR 0 6
82428: PPUSH
82429: LD_VAR 0 4
82433: PPUSH
82434: CALL_OW 74
82438: PPUSH
82439: CALL 83693 0 2
// end else
82443: GO 82545
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82445: LD_VAR 0 4
82449: PPUSH
82450: LD_VAR 0 2
82454: PUSH
82455: LD_VAR 0 9
82459: ARRAY
82460: PUSH
82461: LD_INT 1
82463: ARRAY
82464: PPUSH
82465: LD_VAR 0 2
82469: PUSH
82470: LD_VAR 0 9
82474: ARRAY
82475: PUSH
82476: LD_INT 2
82478: ARRAY
82479: PPUSH
82480: CALL_OW 297
82484: PUSH
82485: LD_INT 6
82487: GREATER
82488: IFFALSE 82531
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82490: LD_VAR 0 4
82494: PPUSH
82495: LD_VAR 0 2
82499: PUSH
82500: LD_VAR 0 9
82504: ARRAY
82505: PUSH
82506: LD_INT 1
82508: ARRAY
82509: PPUSH
82510: LD_VAR 0 2
82514: PUSH
82515: LD_VAR 0 9
82519: ARRAY
82520: PUSH
82521: LD_INT 2
82523: ARRAY
82524: PPUSH
82525: CALL_OW 114
82529: GO 82545
// SetTag ( i , tag ) ;
82531: LD_VAR 0 4
82535: PPUSH
82536: LD_VAR 0 9
82540: PPUSH
82541: CALL_OW 109
// end else
82545: GO 82618
// if enemy then
82547: LD_VAR 0 5
82551: IFFALSE 82618
// begin if GetWeapon ( i ) = ru_time_lapser then
82553: LD_VAR 0 4
82557: PPUSH
82558: CALL_OW 264
82562: PUSH
82563: LD_INT 49
82565: EQUAL
82566: IFFALSE 82594
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82568: LD_VAR 0 4
82572: PPUSH
82573: LD_VAR 0 5
82577: PPUSH
82578: LD_VAR 0 4
82582: PPUSH
82583: CALL_OW 74
82587: PPUSH
82588: CALL_OW 112
82592: GO 82618
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82594: LD_VAR 0 4
82598: PPUSH
82599: LD_VAR 0 5
82603: PPUSH
82604: LD_VAR 0 4
82608: PPUSH
82609: CALL_OW 74
82613: PPUSH
82614: CALL 83693 0 2
// end ; end ;
82618: GO 82194
82620: POP
82621: POP
// end ;
82622: LD_VAR 0 3
82626: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82627: LD_INT 0
82629: PPUSH
82630: PPUSH
82631: PPUSH
// if not unit or IsInUnit ( unit ) then
82632: LD_VAR 0 1
82636: NOT
82637: PUSH
82638: LD_VAR 0 1
82642: PPUSH
82643: CALL_OW 310
82647: OR
82648: IFFALSE 82652
// exit ;
82650: GO 82743
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82652: LD_ADDR_VAR 0 4
82656: PUSH
82657: LD_VAR 0 1
82661: PPUSH
82662: CALL_OW 250
82666: PPUSH
82667: LD_VAR 0 2
82671: PPUSH
82672: LD_INT 1
82674: PPUSH
82675: CALL_OW 272
82679: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82680: LD_ADDR_VAR 0 5
82684: PUSH
82685: LD_VAR 0 1
82689: PPUSH
82690: CALL_OW 251
82694: PPUSH
82695: LD_VAR 0 2
82699: PPUSH
82700: LD_INT 1
82702: PPUSH
82703: CALL_OW 273
82707: ST_TO_ADDR
// if ValidHex ( x , y ) then
82708: LD_VAR 0 4
82712: PPUSH
82713: LD_VAR 0 5
82717: PPUSH
82718: CALL_OW 488
82722: IFFALSE 82743
// ComTurnXY ( unit , x , y ) ;
82724: LD_VAR 0 1
82728: PPUSH
82729: LD_VAR 0 4
82733: PPUSH
82734: LD_VAR 0 5
82738: PPUSH
82739: CALL_OW 118
// end ;
82743: LD_VAR 0 3
82747: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82748: LD_INT 0
82750: PPUSH
82751: PPUSH
// result := false ;
82752: LD_ADDR_VAR 0 3
82756: PUSH
82757: LD_INT 0
82759: ST_TO_ADDR
// if not units then
82760: LD_VAR 0 2
82764: NOT
82765: IFFALSE 82769
// exit ;
82767: GO 82814
// for i in units do
82769: LD_ADDR_VAR 0 4
82773: PUSH
82774: LD_VAR 0 2
82778: PUSH
82779: FOR_IN
82780: IFFALSE 82812
// if See ( side , i ) then
82782: LD_VAR 0 1
82786: PPUSH
82787: LD_VAR 0 4
82791: PPUSH
82792: CALL_OW 292
82796: IFFALSE 82810
// begin result := true ;
82798: LD_ADDR_VAR 0 3
82802: PUSH
82803: LD_INT 1
82805: ST_TO_ADDR
// exit ;
82806: POP
82807: POP
82808: GO 82814
// end ;
82810: GO 82779
82812: POP
82813: POP
// end ;
82814: LD_VAR 0 3
82818: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82819: LD_INT 0
82821: PPUSH
82822: PPUSH
82823: PPUSH
82824: PPUSH
// if not unit or not points then
82825: LD_VAR 0 1
82829: NOT
82830: PUSH
82831: LD_VAR 0 2
82835: NOT
82836: OR
82837: IFFALSE 82841
// exit ;
82839: GO 82931
// dist := 99999 ;
82841: LD_ADDR_VAR 0 5
82845: PUSH
82846: LD_INT 99999
82848: ST_TO_ADDR
// for i in points do
82849: LD_ADDR_VAR 0 4
82853: PUSH
82854: LD_VAR 0 2
82858: PUSH
82859: FOR_IN
82860: IFFALSE 82929
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82862: LD_ADDR_VAR 0 6
82866: PUSH
82867: LD_VAR 0 1
82871: PPUSH
82872: LD_VAR 0 4
82876: PUSH
82877: LD_INT 1
82879: ARRAY
82880: PPUSH
82881: LD_VAR 0 4
82885: PUSH
82886: LD_INT 2
82888: ARRAY
82889: PPUSH
82890: CALL_OW 297
82894: ST_TO_ADDR
// if tmpDist < dist then
82895: LD_VAR 0 6
82899: PUSH
82900: LD_VAR 0 5
82904: LESS
82905: IFFALSE 82927
// begin result := i ;
82907: LD_ADDR_VAR 0 3
82911: PUSH
82912: LD_VAR 0 4
82916: ST_TO_ADDR
// dist := tmpDist ;
82917: LD_ADDR_VAR 0 5
82921: PUSH
82922: LD_VAR 0 6
82926: ST_TO_ADDR
// end ; end ;
82927: GO 82859
82929: POP
82930: POP
// end ;
82931: LD_VAR 0 3
82935: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82936: LD_INT 0
82938: PPUSH
// uc_side := side ;
82939: LD_ADDR_OWVAR 20
82943: PUSH
82944: LD_VAR 0 1
82948: ST_TO_ADDR
// uc_nation := 3 ;
82949: LD_ADDR_OWVAR 21
82953: PUSH
82954: LD_INT 3
82956: ST_TO_ADDR
// vc_chassis := 25 ;
82957: LD_ADDR_OWVAR 37
82961: PUSH
82962: LD_INT 25
82964: ST_TO_ADDR
// vc_engine := engine_siberite ;
82965: LD_ADDR_OWVAR 39
82969: PUSH
82970: LD_INT 3
82972: ST_TO_ADDR
// vc_control := control_computer ;
82973: LD_ADDR_OWVAR 38
82977: PUSH
82978: LD_INT 3
82980: ST_TO_ADDR
// vc_weapon := 59 ;
82981: LD_ADDR_OWVAR 40
82985: PUSH
82986: LD_INT 59
82988: ST_TO_ADDR
// result := CreateVehicle ;
82989: LD_ADDR_VAR 0 5
82993: PUSH
82994: CALL_OW 45
82998: ST_TO_ADDR
// SetDir ( result , d ) ;
82999: LD_VAR 0 5
83003: PPUSH
83004: LD_VAR 0 4
83008: PPUSH
83009: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83013: LD_VAR 0 5
83017: PPUSH
83018: LD_VAR 0 2
83022: PPUSH
83023: LD_VAR 0 3
83027: PPUSH
83028: LD_INT 0
83030: PPUSH
83031: CALL_OW 48
// end ;
83035: LD_VAR 0 5
83039: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83040: LD_INT 0
83042: PPUSH
83043: PPUSH
83044: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83045: LD_ADDR_VAR 0 2
83049: PUSH
83050: LD_INT 0
83052: PUSH
83053: LD_INT 0
83055: PUSH
83056: LD_INT 0
83058: PUSH
83059: LD_INT 0
83061: PUSH
83062: EMPTY
83063: LIST
83064: LIST
83065: LIST
83066: LIST
83067: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83068: LD_VAR 0 1
83072: NOT
83073: PUSH
83074: LD_VAR 0 1
83078: PPUSH
83079: CALL_OW 264
83083: PUSH
83084: LD_INT 12
83086: PUSH
83087: LD_INT 51
83089: PUSH
83090: LD_INT 32
83092: PUSH
83093: LD_INT 89
83095: PUSH
83096: EMPTY
83097: LIST
83098: LIST
83099: LIST
83100: LIST
83101: IN
83102: NOT
83103: OR
83104: IFFALSE 83108
// exit ;
83106: GO 83206
// for i := 1 to 3 do
83108: LD_ADDR_VAR 0 3
83112: PUSH
83113: DOUBLE
83114: LD_INT 1
83116: DEC
83117: ST_TO_ADDR
83118: LD_INT 3
83120: PUSH
83121: FOR_TO
83122: IFFALSE 83204
// begin tmp := GetCargo ( cargo , i ) ;
83124: LD_ADDR_VAR 0 4
83128: PUSH
83129: LD_VAR 0 1
83133: PPUSH
83134: LD_VAR 0 3
83138: PPUSH
83139: CALL_OW 289
83143: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83144: LD_ADDR_VAR 0 2
83148: PUSH
83149: LD_VAR 0 2
83153: PPUSH
83154: LD_VAR 0 3
83158: PPUSH
83159: LD_VAR 0 4
83163: PPUSH
83164: CALL_OW 1
83168: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83169: LD_ADDR_VAR 0 2
83173: PUSH
83174: LD_VAR 0 2
83178: PPUSH
83179: LD_INT 4
83181: PPUSH
83182: LD_VAR 0 2
83186: PUSH
83187: LD_INT 4
83189: ARRAY
83190: PUSH
83191: LD_VAR 0 4
83195: PLUS
83196: PPUSH
83197: CALL_OW 1
83201: ST_TO_ADDR
// end ;
83202: GO 83121
83204: POP
83205: POP
// end ;
83206: LD_VAR 0 2
83210: RET
// export function Length ( array ) ; begin
83211: LD_INT 0
83213: PPUSH
// result := array + 0 ;
83214: LD_ADDR_VAR 0 2
83218: PUSH
83219: LD_VAR 0 1
83223: PUSH
83224: LD_INT 0
83226: PLUS
83227: ST_TO_ADDR
// end ;
83228: LD_VAR 0 2
83232: RET
// export function PrepareArray ( array ) ; begin
83233: LD_INT 0
83235: PPUSH
// result := array diff 0 ;
83236: LD_ADDR_VAR 0 2
83240: PUSH
83241: LD_VAR 0 1
83245: PUSH
83246: LD_INT 0
83248: DIFF
83249: ST_TO_ADDR
// if not result [ 1 ] then
83250: LD_VAR 0 2
83254: PUSH
83255: LD_INT 1
83257: ARRAY
83258: NOT
83259: IFFALSE 83279
// result := Delete ( result , 1 ) ;
83261: LD_ADDR_VAR 0 2
83265: PUSH
83266: LD_VAR 0 2
83270: PPUSH
83271: LD_INT 1
83273: PPUSH
83274: CALL_OW 3
83278: ST_TO_ADDR
// end ;
83279: LD_VAR 0 2
83283: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83284: LD_INT 0
83286: PPUSH
83287: PPUSH
83288: PPUSH
83289: PPUSH
// sibRocketRange := 25 ;
83290: LD_ADDR_VAR 0 6
83294: PUSH
83295: LD_INT 25
83297: ST_TO_ADDR
// result := false ;
83298: LD_ADDR_VAR 0 4
83302: PUSH
83303: LD_INT 0
83305: ST_TO_ADDR
// for i := 0 to 5 do
83306: LD_ADDR_VAR 0 5
83310: PUSH
83311: DOUBLE
83312: LD_INT 0
83314: DEC
83315: ST_TO_ADDR
83316: LD_INT 5
83318: PUSH
83319: FOR_TO
83320: IFFALSE 83387
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83322: LD_VAR 0 1
83326: PPUSH
83327: LD_VAR 0 5
83331: PPUSH
83332: LD_VAR 0 6
83336: PPUSH
83337: CALL_OW 272
83341: PPUSH
83342: LD_VAR 0 2
83346: PPUSH
83347: LD_VAR 0 5
83351: PPUSH
83352: LD_VAR 0 6
83356: PPUSH
83357: CALL_OW 273
83361: PPUSH
83362: LD_VAR 0 3
83366: PPUSH
83367: CALL_OW 309
83371: IFFALSE 83385
// begin result := true ;
83373: LD_ADDR_VAR 0 4
83377: PUSH
83378: LD_INT 1
83380: ST_TO_ADDR
// exit ;
83381: POP
83382: POP
83383: GO 83389
// end ;
83385: GO 83319
83387: POP
83388: POP
// end ;
83389: LD_VAR 0 4
83393: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83394: LD_INT 0
83396: PPUSH
83397: PPUSH
83398: PPUSH
// if btype = b_depot then
83399: LD_VAR 0 2
83403: PUSH
83404: LD_INT 0
83406: EQUAL
83407: IFFALSE 83419
// begin result := true ;
83409: LD_ADDR_VAR 0 3
83413: PUSH
83414: LD_INT 1
83416: ST_TO_ADDR
// exit ;
83417: GO 83535
// end ; pom := GetBase ( depot ) ;
83419: LD_ADDR_VAR 0 4
83423: PUSH
83424: LD_VAR 0 1
83428: PPUSH
83429: CALL_OW 274
83433: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83434: LD_ADDR_VAR 0 5
83438: PUSH
83439: LD_VAR 0 2
83443: PPUSH
83444: LD_VAR 0 1
83448: PPUSH
83449: CALL_OW 248
83453: PPUSH
83454: CALL_OW 450
83458: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83459: LD_ADDR_VAR 0 3
83463: PUSH
83464: LD_VAR 0 4
83468: PPUSH
83469: LD_INT 1
83471: PPUSH
83472: CALL_OW 275
83476: PUSH
83477: LD_VAR 0 5
83481: PUSH
83482: LD_INT 1
83484: ARRAY
83485: GREATEREQUAL
83486: PUSH
83487: LD_VAR 0 4
83491: PPUSH
83492: LD_INT 2
83494: PPUSH
83495: CALL_OW 275
83499: PUSH
83500: LD_VAR 0 5
83504: PUSH
83505: LD_INT 2
83507: ARRAY
83508: GREATEREQUAL
83509: AND
83510: PUSH
83511: LD_VAR 0 4
83515: PPUSH
83516: LD_INT 3
83518: PPUSH
83519: CALL_OW 275
83523: PUSH
83524: LD_VAR 0 5
83528: PUSH
83529: LD_INT 3
83531: ARRAY
83532: GREATEREQUAL
83533: AND
83534: ST_TO_ADDR
// end ;
83535: LD_VAR 0 3
83539: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83540: LD_INT 0
83542: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83543: LD_VAR 0 1
83547: PPUSH
83548: LD_VAR 0 2
83552: PPUSH
83553: LD_INT 0
83555: PPUSH
83556: LD_INT 0
83558: PPUSH
83559: LD_INT 1
83561: PPUSH
83562: LD_INT 0
83564: PPUSH
83565: CALL_OW 587
// end ;
83569: LD_VAR 0 3
83573: RET
// export function CenterOnNow ( unit ) ; begin
83574: LD_INT 0
83576: PPUSH
// result := IsInUnit ( unit ) ;
83577: LD_ADDR_VAR 0 2
83581: PUSH
83582: LD_VAR 0 1
83586: PPUSH
83587: CALL_OW 310
83591: ST_TO_ADDR
// if not result then
83592: LD_VAR 0 2
83596: NOT
83597: IFFALSE 83609
// result := unit ;
83599: LD_ADDR_VAR 0 2
83603: PUSH
83604: LD_VAR 0 1
83608: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83609: LD_VAR 0 1
83613: PPUSH
83614: CALL_OW 87
// end ;
83618: LD_VAR 0 2
83622: RET
// export function ComMoveHex ( unit , hex ) ; begin
83623: LD_INT 0
83625: PPUSH
// if not hex then
83626: LD_VAR 0 2
83630: NOT
83631: IFFALSE 83635
// exit ;
83633: GO 83688
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83635: LD_VAR 0 2
83639: PUSH
83640: LD_INT 1
83642: ARRAY
83643: PPUSH
83644: LD_VAR 0 2
83648: PUSH
83649: LD_INT 2
83651: ARRAY
83652: PPUSH
83653: CALL_OW 428
83657: IFFALSE 83661
// exit ;
83659: GO 83688
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83661: LD_VAR 0 1
83665: PPUSH
83666: LD_VAR 0 2
83670: PUSH
83671: LD_INT 1
83673: ARRAY
83674: PPUSH
83675: LD_VAR 0 2
83679: PUSH
83680: LD_INT 2
83682: ARRAY
83683: PPUSH
83684: CALL_OW 111
// end ;
83688: LD_VAR 0 3
83692: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83693: LD_INT 0
83695: PPUSH
83696: PPUSH
83697: PPUSH
// if not unit or not enemy then
83698: LD_VAR 0 1
83702: NOT
83703: PUSH
83704: LD_VAR 0 2
83708: NOT
83709: OR
83710: IFFALSE 83714
// exit ;
83712: GO 83838
// x := GetX ( enemy ) ;
83714: LD_ADDR_VAR 0 4
83718: PUSH
83719: LD_VAR 0 2
83723: PPUSH
83724: CALL_OW 250
83728: ST_TO_ADDR
// y := GetY ( enemy ) ;
83729: LD_ADDR_VAR 0 5
83733: PUSH
83734: LD_VAR 0 2
83738: PPUSH
83739: CALL_OW 251
83743: ST_TO_ADDR
// if ValidHex ( x , y ) then
83744: LD_VAR 0 4
83748: PPUSH
83749: LD_VAR 0 5
83753: PPUSH
83754: CALL_OW 488
83758: IFFALSE 83838
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83760: LD_VAR 0 2
83764: PPUSH
83765: CALL_OW 247
83769: PUSH
83770: LD_INT 3
83772: PUSH
83773: LD_INT 2
83775: PUSH
83776: EMPTY
83777: LIST
83778: LIST
83779: IN
83780: PUSH
83781: LD_VAR 0 1
83785: PPUSH
83786: CALL_OW 255
83790: PPUSH
83791: LD_VAR 0 2
83795: PPUSH
83796: CALL_OW 292
83800: OR
83801: IFFALSE 83819
// ComAttackUnit ( unit , enemy ) else
83803: LD_VAR 0 1
83807: PPUSH
83808: LD_VAR 0 2
83812: PPUSH
83813: CALL_OW 115
83817: GO 83838
// ComAgressiveMove ( unit , x , y ) ;
83819: LD_VAR 0 1
83823: PPUSH
83824: LD_VAR 0 4
83828: PPUSH
83829: LD_VAR 0 5
83833: PPUSH
83834: CALL_OW 114
// end ;
83838: LD_VAR 0 3
83842: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83843: LD_INT 0
83845: PPUSH
83846: PPUSH
83847: PPUSH
// list := AreaToList ( area , 0 ) ;
83848: LD_ADDR_VAR 0 5
83852: PUSH
83853: LD_VAR 0 1
83857: PPUSH
83858: LD_INT 0
83860: PPUSH
83861: CALL_OW 517
83865: ST_TO_ADDR
// if not list then
83866: LD_VAR 0 5
83870: NOT
83871: IFFALSE 83875
// exit ;
83873: GO 84005
// if all then
83875: LD_VAR 0 2
83879: IFFALSE 83967
// begin for i := 1 to list [ 1 ] do
83881: LD_ADDR_VAR 0 4
83885: PUSH
83886: DOUBLE
83887: LD_INT 1
83889: DEC
83890: ST_TO_ADDR
83891: LD_VAR 0 5
83895: PUSH
83896: LD_INT 1
83898: ARRAY
83899: PUSH
83900: FOR_TO
83901: IFFALSE 83963
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83903: LD_ADDR_VAR 0 3
83907: PUSH
83908: LD_VAR 0 3
83912: PPUSH
83913: LD_VAR 0 3
83917: PUSH
83918: LD_INT 1
83920: PLUS
83921: PPUSH
83922: LD_VAR 0 5
83926: PUSH
83927: LD_INT 1
83929: ARRAY
83930: PUSH
83931: LD_VAR 0 4
83935: ARRAY
83936: PUSH
83937: LD_VAR 0 5
83941: PUSH
83942: LD_INT 2
83944: ARRAY
83945: PUSH
83946: LD_VAR 0 4
83950: ARRAY
83951: PUSH
83952: EMPTY
83953: LIST
83954: LIST
83955: PPUSH
83956: CALL_OW 1
83960: ST_TO_ADDR
83961: GO 83900
83963: POP
83964: POP
// exit ;
83965: GO 84005
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83967: LD_ADDR_VAR 0 3
83971: PUSH
83972: LD_VAR 0 5
83976: PUSH
83977: LD_INT 1
83979: ARRAY
83980: PUSH
83981: LD_INT 1
83983: ARRAY
83984: PUSH
83985: LD_VAR 0 5
83989: PUSH
83990: LD_INT 2
83992: ARRAY
83993: PUSH
83994: LD_INT 1
83996: ARRAY
83997: PUSH
83998: EMPTY
83999: LIST
84000: LIST
84001: PUSH
84002: EMPTY
84003: LIST
84004: ST_TO_ADDR
// end ;
84005: LD_VAR 0 3
84009: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84010: LD_INT 0
84012: PPUSH
84013: PPUSH
// list := AreaToList ( area , 0 ) ;
84014: LD_ADDR_VAR 0 4
84018: PUSH
84019: LD_VAR 0 1
84023: PPUSH
84024: LD_INT 0
84026: PPUSH
84027: CALL_OW 517
84031: ST_TO_ADDR
// if not list then
84032: LD_VAR 0 4
84036: NOT
84037: IFFALSE 84041
// exit ;
84039: GO 84082
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84041: LD_ADDR_VAR 0 3
84045: PUSH
84046: LD_VAR 0 4
84050: PUSH
84051: LD_INT 1
84053: ARRAY
84054: PUSH
84055: LD_INT 1
84057: ARRAY
84058: PUSH
84059: LD_VAR 0 4
84063: PUSH
84064: LD_INT 2
84066: ARRAY
84067: PUSH
84068: LD_INT 1
84070: ARRAY
84071: PUSH
84072: LD_VAR 0 2
84076: PUSH
84077: EMPTY
84078: LIST
84079: LIST
84080: LIST
84081: ST_TO_ADDR
// end ;
84082: LD_VAR 0 3
84086: RET
// export function First ( array ) ; begin
84087: LD_INT 0
84089: PPUSH
// if not array then
84090: LD_VAR 0 1
84094: NOT
84095: IFFALSE 84099
// exit ;
84097: GO 84113
// result := array [ 1 ] ;
84099: LD_ADDR_VAR 0 2
84103: PUSH
84104: LD_VAR 0 1
84108: PUSH
84109: LD_INT 1
84111: ARRAY
84112: ST_TO_ADDR
// end ;
84113: LD_VAR 0 2
84117: RET
// export function Last ( array ) ; begin
84118: LD_INT 0
84120: PPUSH
// if not array then
84121: LD_VAR 0 1
84125: NOT
84126: IFFALSE 84130
// exit ;
84128: GO 84146
// result := array [ array ] ;
84130: LD_ADDR_VAR 0 2
84134: PUSH
84135: LD_VAR 0 1
84139: PUSH
84140: LD_VAR 0 1
84144: ARRAY
84145: ST_TO_ADDR
// end ;
84146: LD_VAR 0 2
84150: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84151: LD_INT 0
84153: PPUSH
84154: PPUSH
// result := [ ] ;
84155: LD_ADDR_VAR 0 5
84159: PUSH
84160: EMPTY
84161: ST_TO_ADDR
// if not array then
84162: LD_VAR 0 1
84166: NOT
84167: IFFALSE 84171
// exit ;
84169: GO 84283
// for i := 1 to array do
84171: LD_ADDR_VAR 0 6
84175: PUSH
84176: DOUBLE
84177: LD_INT 1
84179: DEC
84180: ST_TO_ADDR
84181: LD_VAR 0 1
84185: PUSH
84186: FOR_TO
84187: IFFALSE 84281
// if array [ i ] [ index ] = value then
84189: LD_VAR 0 1
84193: PUSH
84194: LD_VAR 0 6
84198: ARRAY
84199: PUSH
84200: LD_VAR 0 2
84204: ARRAY
84205: PUSH
84206: LD_VAR 0 3
84210: EQUAL
84211: IFFALSE 84279
// begin if indexColumn then
84213: LD_VAR 0 4
84217: IFFALSE 84253
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84219: LD_ADDR_VAR 0 5
84223: PUSH
84224: LD_VAR 0 5
84228: PPUSH
84229: LD_VAR 0 1
84233: PUSH
84234: LD_VAR 0 6
84238: ARRAY
84239: PUSH
84240: LD_VAR 0 4
84244: ARRAY
84245: PPUSH
84246: CALL 79471 0 2
84250: ST_TO_ADDR
84251: GO 84279
// result := Join ( result , array [ i ] ) ;
84253: LD_ADDR_VAR 0 5
84257: PUSH
84258: LD_VAR 0 5
84262: PPUSH
84263: LD_VAR 0 1
84267: PUSH
84268: LD_VAR 0 6
84272: ARRAY
84273: PPUSH
84274: CALL 79471 0 2
84278: ST_TO_ADDR
// end ;
84279: GO 84186
84281: POP
84282: POP
// end ;
84283: LD_VAR 0 5
84287: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84288: LD_INT 0
84290: PPUSH
// if not vehicles or not parkingPoint then
84291: LD_VAR 0 1
84295: NOT
84296: PUSH
84297: LD_VAR 0 2
84301: NOT
84302: OR
84303: IFFALSE 84307
// exit ;
84305: GO 84405
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84307: LD_ADDR_VAR 0 1
84311: PUSH
84312: LD_VAR 0 1
84316: PPUSH
84317: LD_INT 50
84319: PUSH
84320: EMPTY
84321: LIST
84322: PUSH
84323: LD_INT 3
84325: PUSH
84326: LD_INT 92
84328: PUSH
84329: LD_VAR 0 2
84333: PUSH
84334: LD_INT 1
84336: ARRAY
84337: PUSH
84338: LD_VAR 0 2
84342: PUSH
84343: LD_INT 2
84345: ARRAY
84346: PUSH
84347: LD_INT 8
84349: PUSH
84350: EMPTY
84351: LIST
84352: LIST
84353: LIST
84354: LIST
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: PUSH
84360: EMPTY
84361: LIST
84362: LIST
84363: PPUSH
84364: CALL_OW 72
84368: ST_TO_ADDR
// if not vehicles then
84369: LD_VAR 0 1
84373: NOT
84374: IFFALSE 84378
// exit ;
84376: GO 84405
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84378: LD_VAR 0 1
84382: PPUSH
84383: LD_VAR 0 2
84387: PUSH
84388: LD_INT 1
84390: ARRAY
84391: PPUSH
84392: LD_VAR 0 2
84396: PUSH
84397: LD_INT 2
84399: ARRAY
84400: PPUSH
84401: CALL_OW 111
// end ;
84405: LD_VAR 0 3
84409: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84410: LD_INT 0
84412: PPUSH
84413: PPUSH
84414: PPUSH
// if not side or not area then
84415: LD_VAR 0 1
84419: NOT
84420: PUSH
84421: LD_VAR 0 2
84425: NOT
84426: OR
84427: IFFALSE 84431
// exit ;
84429: GO 84550
// tmp := AreaToList ( area , 0 ) ;
84431: LD_ADDR_VAR 0 5
84435: PUSH
84436: LD_VAR 0 2
84440: PPUSH
84441: LD_INT 0
84443: PPUSH
84444: CALL_OW 517
84448: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84449: LD_ADDR_VAR 0 4
84453: PUSH
84454: DOUBLE
84455: LD_INT 1
84457: DEC
84458: ST_TO_ADDR
84459: LD_VAR 0 5
84463: PUSH
84464: LD_INT 1
84466: ARRAY
84467: PUSH
84468: FOR_TO
84469: IFFALSE 84548
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84471: LD_VAR 0 5
84475: PUSH
84476: LD_INT 1
84478: ARRAY
84479: PUSH
84480: LD_VAR 0 4
84484: ARRAY
84485: PPUSH
84486: LD_VAR 0 5
84490: PUSH
84491: LD_INT 2
84493: ARRAY
84494: PUSH
84495: LD_VAR 0 4
84499: ARRAY
84500: PPUSH
84501: CALL_OW 351
84505: IFFALSE 84546
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84507: LD_VAR 0 5
84511: PUSH
84512: LD_INT 1
84514: ARRAY
84515: PUSH
84516: LD_VAR 0 4
84520: ARRAY
84521: PPUSH
84522: LD_VAR 0 5
84526: PUSH
84527: LD_INT 2
84529: ARRAY
84530: PUSH
84531: LD_VAR 0 4
84535: ARRAY
84536: PPUSH
84537: LD_VAR 0 1
84541: PPUSH
84542: CALL_OW 244
// end ;
84546: GO 84468
84548: POP
84549: POP
// end ; end_of_file
84550: LD_VAR 0 3
84554: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84555: LD_VAR 0 1
84559: PPUSH
84560: LD_VAR 0 2
84564: PPUSH
84565: LD_VAR 0 3
84569: PPUSH
84570: LD_VAR 0 4
84574: PPUSH
84575: LD_VAR 0 5
84579: PPUSH
84580: LD_VAR 0 6
84584: PPUSH
84585: CALL 21076 0 6
// end ;
84589: PPOPN 6
84591: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84592: LD_INT 0
84594: PPUSH
// begin if not units then
84595: LD_VAR 0 1
84599: NOT
84600: IFFALSE 84604
// exit ;
84602: GO 84604
// end ;
84604: PPOPN 7
84606: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84607: CALL 20963 0 0
// end ;
84611: PPOPN 1
84613: END
