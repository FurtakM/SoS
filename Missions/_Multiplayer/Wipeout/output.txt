// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 149 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1607 0 1
  44: PPUSH
  45: CALL 5082 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1607 0 1
  56: PPUSH
  57: CALL 9644 0 1
// Multiplayer_Start ;
  61: CALL 3370 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 3482 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// end ;
 116: LD_VAR 0 1
 120: RET
// every 0 0$01 trigger game and not debug_strings do
 121: LD_EXP 2
 125: PUSH
 126: LD_OWVAR 48
 130: NOT
 131: AND
 132: IFFALSE 148
 134: GO 136
 136: DISABLE
// begin enable ;
 137: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 138: LD_ADDR_OWVAR 47
 142: PUSH
 143: CALL 4018 0 0
 147: ST_TO_ADDR
// end ; end_of_file
 148: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , mulit_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 149: LD_INT 0
 151: PPUSH
 152: PPUSH
 153: PPUSH
 154: PPUSH
 155: PPUSH
// multi_settings_counter := 6 ;
 156: LD_ADDR_EXP 17
 160: PUSH
 161: LD_INT 6
 163: ST_TO_ADDR
// multi_settings := [ ] ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: EMPTY
 170: ST_TO_ADDR
// if Multiplayer then
 171: LD_OWVAR 4
 175: IFFALSE 355
// begin your_side := mp_player_side ;
 177: LD_ADDR_OWVAR 2
 181: PUSH
 182: LD_OWVAR 7
 186: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 187: LD_ADDR_EXP 5
 191: PUSH
 192: LD_OWVAR 6
 196: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 197: LD_ADDR_EXP 6
 201: PUSH
 202: LD_OWVAR 17
 206: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 207: LD_ADDR_EXP 7
 211: PUSH
 212: LD_OWVAR 15
 216: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 217: LD_ADDR_EXP 8
 221: PUSH
 222: LD_OWVAR 16
 226: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 227: LD_ADDR_EXP 9
 231: PUSH
 232: EMPTY
 233: PUSH
 234: EMPTY
 235: LIST
 236: ST_TO_ADDR
// for i in mp_teams do
 237: LD_ADDR_VAR 0 2
 241: PUSH
 242: LD_OWVAR 12
 246: PUSH
 247: FOR_IN
 248: IFFALSE 291
// if i then
 250: LD_VAR 0 2
 254: IFFALSE 289
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 256: LD_ADDR_EXP 9
 260: PUSH
 261: LD_EXP 9
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_EXP 9
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PUSH
 278: LD_VAR 0 2
 282: UNION
 283: PPUSH
 284: CALL_OW 1
 288: ST_TO_ADDR
 289: GO 247
 291: POP
 292: POP
// for i := 1 to multi_settings_counter do
 293: LD_ADDR_VAR 0 2
 297: PUSH
 298: DOUBLE
 299: LD_INT 1
 301: DEC
 302: ST_TO_ADDR
 303: LD_EXP 17
 307: PUSH
 308: FOR_TO
 309: IFFALSE 351
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 311: LD_ADDR_EXP 16
 315: PUSH
 316: LD_EXP 16
 320: PPUSH
 321: LD_EXP 16
 325: PUSH
 326: LD_INT 1
 328: PLUS
 329: PPUSH
 330: LD_VAR 0 2
 334: PPUSH
 335: CALL_OW 426
 339: PUSH
 340: LD_INT 1
 342: PLUS
 343: PPUSH
 344: CALL_OW 1
 348: ST_TO_ADDR
 349: GO 308
 351: POP
 352: POP
// end else
 353: GO 541
// begin your_side := 3 ;
 355: LD_ADDR_OWVAR 2
 359: PUSH
 360: LD_INT 3
 362: ST_TO_ADDR
// multi_gametype := 1 ;
 363: LD_ADDR_EXP 5
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 371: LD_ADDR_EXP 6
 375: PUSH
 376: LD_INT 0
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 2
 387: PUSH
 388: LD_INT 3
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 410: LD_ADDR_EXP 7
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: LD_INT 0
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: LD_INT 1
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 449: LD_ADDR_EXP 8
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: LD_INT 3
 465: PUSH
 466: LD_INT 3
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 488: LD_ADDR_EXP 9
 492: PUSH
 493: LD_INT 3
 495: PUSH
 496: LD_INT 4
 498: PUSH
 499: LD_INT 5
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: EMPTY
 508: LIST
 509: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 510: LD_ADDR_EXP 16
 514: PUSH
 515: LD_INT 2
 517: PUSH
 518: LD_INT 4
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: LD_INT 1
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 580: LD_ADDR_EXP 13
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 0
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 619: LD_ADDR_EXP 24
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: LD_INT 0
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: ST_TO_ADDR
// multi_teamgame := true ;
 658: LD_ADDR_EXP 14
 662: PUSH
 663: LD_INT 1
 665: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 666: LD_ADDR_EXP 12
 670: PUSH
 671: LD_INT 3
 673: PUSH
 674: EMPTY
 675: LIST
 676: ST_TO_ADDR
// multi_custom_commanders := true ;
 677: LD_ADDR_EXP 15
 681: PUSH
 682: LD_INT 1
 684: ST_TO_ADDR
// multi_commanders := [ ] ;
 685: LD_ADDR_EXP 23
 689: PUSH
 690: EMPTY
 691: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 692: LD_ADDR_EXP 26
 696: PUSH
 697: EMPTY
 698: ST_TO_ADDR
// multi_players_amount := 0 ;
 699: LD_ADDR_EXP 25
 703: PUSH
 704: LD_INT 0
 706: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 707: LD_ADDR_EXP 11
 711: PUSH
 712: LD_INT 8
 714: PUSH
 715: LD_INT 9
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: LD_INT 10
 724: PUSH
 725: LD_INT 11
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_INT 12
 734: PUSH
 735: LD_INT 13
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] ] ] ;
 747: LD_ADDR_EXP 28
 751: PUSH
 752: LD_INT 0
 754: PUSH
 755: LD_INT 14
 757: PPUSH
 758: LD_INT 0
 760: PPUSH
 761: CALL 83949 0 2
 765: PUSH
 766: LD_STRING kagan
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: LD_INT 15
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL 83949 0 2
 790: PUSH
 791: LD_STRING beria
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 16
 807: PPUSH
 808: LD_INT 3
 810: PPUSH
 811: CALL 83949 0 2
 815: PUSH
 816: LD_STRING kirov
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: ST_TO_ADDR
// for i := 1 to 8 do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_INT 8
 844: PUSH
 845: FOR_TO
 846: IFFALSE 1175
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 848: LD_VAR 0 2
 852: PPUSH
 853: CALL_OW 530
 857: IFFALSE 1015
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 859: LD_ADDR_EXP 10
 863: PUSH
 864: LD_EXP 10
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL_OW 1
 881: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 882: LD_ADDR_EXP 8
 886: PUSH
 887: LD_EXP 8
 891: PPUSH
 892: LD_VAR 0 2
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 1
 904: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 905: LD_ADDR_EXP 6
 909: PUSH
 910: LD_EXP 6
 914: PPUSH
 915: LD_VAR 0 2
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 1
 927: ST_TO_ADDR
// for j = 1 to multi_teams do
 928: LD_ADDR_VAR 0 3
 932: PUSH
 933: DOUBLE
 934: LD_INT 1
 936: DEC
 937: ST_TO_ADDR
 938: LD_EXP 9
 942: PUSH
 943: FOR_TO
 944: IFFALSE 1013
// begin if i in multi_teams [ j ] then
 946: LD_VAR 0 2
 950: PUSH
 951: LD_EXP 9
 955: PUSH
 956: LD_VAR 0 3
 960: ARRAY
 961: IN
 962: IFFALSE 1011
// begin tmp := multi_teams [ j ] diff i ;
 964: LD_ADDR_VAR 0 5
 968: PUSH
 969: LD_EXP 9
 973: PUSH
 974: LD_VAR 0 3
 978: ARRAY
 979: PUSH
 980: LD_VAR 0 2
 984: DIFF
 985: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
 986: LD_ADDR_EXP 9
 990: PUSH
 991: LD_EXP 9
 995: PPUSH
 996: LD_VAR 0 3
1000: PPUSH
1001: LD_VAR 0 5
1005: PPUSH
1006: CALL_OW 1
1010: ST_TO_ADDR
// end ; end ;
1011: GO 943
1013: POP
1014: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1015: LD_EXP 8
1019: PUSH
1020: LD_VAR 0 2
1024: ARRAY
1025: PUSH
1026: LD_EXP 8
1030: PUSH
1031: LD_VAR 0 2
1035: ARRAY
1036: PUSH
1037: LD_EXP 12
1041: IN
1042: NOT
1043: AND
1044: IFFALSE 1085
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1046: LD_ADDR_EXP 8
1050: PUSH
1051: LD_EXP 8
1055: PPUSH
1056: LD_VAR 0 2
1060: PPUSH
1061: LD_EXP 12
1065: PUSH
1066: LD_INT 1
1068: PPUSH
1069: LD_EXP 12
1073: PPUSH
1074: CALL_OW 12
1078: ARRAY
1079: PPUSH
1080: CALL_OW 1
1084: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1085: LD_EXP 8
1089: PUSH
1090: LD_VAR 0 2
1094: ARRAY
1095: NOT
1096: PUSH
1097: LD_EXP 6
1101: PUSH
1102: LD_VAR 0 2
1106: ARRAY
1107: NOT
1108: AND
1109: PUSH
1110: LD_EXP 10
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: NOT
1121: AND
1122: IFFALSE 1147
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1124: LD_ADDR_EXP 13
1128: PUSH
1129: LD_EXP 13
1133: PPUSH
1134: LD_VAR 0 2
1138: PPUSH
1139: LD_INT 1
1141: PPUSH
1142: CALL_OW 1
1146: ST_TO_ADDR
// if multi_sides [ i ] then
1147: LD_EXP 6
1151: PUSH
1152: LD_VAR 0 2
1156: ARRAY
1157: IFFALSE 1173
// multi_players_amount := multi_players_amount + 1 ;
1159: LD_ADDR_EXP 25
1163: PUSH
1164: LD_EXP 25
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ST_TO_ADDR
// end ;
1173: GO 845
1175: POP
1176: POP
// for i in multi_teams do
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: LD_EXP 9
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1296
// begin for j = 2 to i do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 2
1198: DEC
1199: ST_TO_ADDR
1200: LD_VAR 0 2
1204: PUSH
1205: FOR_TO
1206: IFFALSE 1292
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 3
1217: ARRAY
1218: PPUSH
1219: LD_VAR 0 2
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 343
// for x = 1 to j - 1 do
1232: LD_ADDR_VAR 0 4
1236: PUSH
1237: DOUBLE
1238: LD_INT 1
1240: DEC
1241: ST_TO_ADDR
1242: LD_VAR 0 3
1246: PUSH
1247: LD_INT 1
1249: MINUS
1250: PUSH
1251: FOR_TO
1252: IFFALSE 1288
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1254: LD_VAR 0 2
1258: PUSH
1259: LD_VAR 0 3
1263: ARRAY
1264: PPUSH
1265: LD_VAR 0 2
1269: PUSH
1270: LD_VAR 0 4
1274: ARRAY
1275: PPUSH
1276: LD_INT 1
1278: PPUSH
1279: LD_INT 1
1281: PPUSH
1282: CALL_OW 80
1286: GO 1251
1288: POP
1289: POP
// end ;
1290: GO 1205
1292: POP
1293: POP
// end ;
1294: GO 1187
1296: POP
1297: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1298: LD_ADDR_OWVAR 67
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: LD_INT 2
1308: PUSH
1309: LD_INT 3
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 16
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: ARRAY
1326: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1327: LD_ADDR_EXP 18
1331: PUSH
1332: LD_INT 6
1334: PUSH
1335: LD_INT 7
1337: PUSH
1338: LD_INT 8
1340: PUSH
1341: LD_INT 9
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: PUSH
1350: LD_EXP 16
1354: PUSH
1355: LD_INT 2
1357: ARRAY
1358: ARRAY
1359: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
1360: LD_ADDR_EXP 19
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 2
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: PUSH
1383: LD_EXP 16
1387: PUSH
1388: LD_INT 3
1390: ARRAY
1391: ARRAY
1392: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1393: LD_ADDR_EXP 20
1397: PUSH
1398: LD_INT 3000
1400: PUSH
1401: LD_INT 1120
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 5000
1410: PUSH
1411: LD_INT 770
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 6000
1420: PUSH
1421: LD_INT 490
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 8000
1430: PUSH
1431: LD_INT 420
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: LD_EXP 16
1448: PUSH
1449: LD_INT 4
1451: ARRAY
1452: ARRAY
1453: ST_TO_ADDR
// mulit_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1454: LD_ADDR_EXP 21
1458: PUSH
1459: LD_INT 0
1461: PUSH
1462: LD_INT 1
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_EXP 16
1477: PUSH
1478: LD_INT 5
1480: ARRAY
1481: ARRAY
1482: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1483: LD_ADDR_EXP 22
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 1
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_EXP 16
1506: PUSH
1507: LD_INT 6
1509: ARRAY
1510: ARRAY
1511: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_INT 10500
1519: PUSH
1520: LD_INT 31500
1522: PUSH
1523: LD_INT 52500
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_OWVAR 67
1535: ARRAY
1536: ST_TO_ADDR
// if mulit_extra_oil then
1537: LD_EXP 21
1541: IFFALSE 1602
// begin if mulit_extra_oil = 1 then
1543: LD_EXP 21
1547: PUSH
1548: LD_INT 1
1550: EQUAL
1551: IFFALSE 1566
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1553: LD_INT 109
1555: PPUSH
1556: LD_INT 130
1558: PPUSH
1559: LD_INT 2
1561: PPUSH
1562: CALL_OW 62
// end ; if mulit_extra_oil = 2 then
1566: LD_EXP 21
1570: PUSH
1571: LD_INT 2
1573: EQUAL
1574: IFFALSE 1602
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1576: LD_INT 109
1578: PPUSH
1579: LD_INT 130
1581: PPUSH
1582: LD_INT 2
1584: PPUSH
1585: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1589: LD_INT 150
1591: PPUSH
1592: LD_INT 112
1594: PPUSH
1595: LD_INT 2
1597: PPUSH
1598: CALL_OW 62
// end ; end ; end ;
1602: LD_VAR 0 1
1606: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1607: LD_INT 0
1609: PPUSH
1610: PPUSH
// if not multi_sides [ preferSide ] then
1611: LD_EXP 6
1615: PUSH
1616: LD_VAR 0 1
1620: ARRAY
1621: NOT
1622: IFFALSE 1636
// begin result := preferSide ;
1624: LD_ADDR_VAR 0 2
1628: PUSH
1629: LD_VAR 0 1
1633: ST_TO_ADDR
// exit ;
1634: GO 1683
// end ; for i := 1 to 8 do
1636: LD_ADDR_VAR 0 3
1640: PUSH
1641: DOUBLE
1642: LD_INT 1
1644: DEC
1645: ST_TO_ADDR
1646: LD_INT 8
1648: PUSH
1649: FOR_TO
1650: IFFALSE 1681
// if not multi_sides [ i ] then
1652: LD_EXP 6
1656: PUSH
1657: LD_VAR 0 3
1661: ARRAY
1662: NOT
1663: IFFALSE 1679
// begin result := i ;
1665: LD_ADDR_VAR 0 2
1669: PUSH
1670: LD_VAR 0 3
1674: ST_TO_ADDR
// exit ;
1675: POP
1676: POP
1677: GO 1683
// end ;
1679: GO 1649
1681: POP
1682: POP
// end ;
1683: LD_VAR 0 2
1687: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1688: LD_INT 0
1690: PPUSH
// uc_side := side ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_VAR 0 1
1700: ST_TO_ADDR
// uc_nation := nation_russian ;
1701: LD_ADDR_OWVAR 21
1705: PUSH
1706: LD_INT 3
1708: ST_TO_ADDR
// hc_importance := 100 ;
1709: LD_ADDR_OWVAR 32
1713: PUSH
1714: LD_INT 100
1716: ST_TO_ADDR
// hc_class := class_soldier ;
1717: LD_ADDR_OWVAR 28
1721: PUSH
1722: LD_INT 1
1724: ST_TO_ADDR
// if num = 1 then
1725: LD_VAR 0 2
1729: PUSH
1730: LD_INT 1
1732: EQUAL
1733: IFFALSE 1815
// begin hc_gallery := ru ;
1735: LD_ADDR_OWVAR 33
1739: PUSH
1740: LD_STRING ru
1742: ST_TO_ADDR
// hc_face_number := 10 ;
1743: LD_ADDR_OWVAR 34
1747: PUSH
1748: LD_INT 10
1750: ST_TO_ADDR
// hc_name := Popov ;
1751: LD_ADDR_OWVAR 26
1755: PUSH
1756: LD_STRING Popov
1758: ST_TO_ADDR
// hc_sex := sex_male ;
1759: LD_ADDR_OWVAR 27
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 2 ] ;
1767: LD_ADDR_OWVAR 31
1771: PUSH
1772: LD_INT 3
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 2
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1790: LD_ADDR_OWVAR 29
1794: PUSH
1795: LD_INT 10
1797: PUSH
1798: LD_INT 10
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: ST_TO_ADDR
// result := CreateHuman ;
1805: LD_ADDR_VAR 0 3
1809: PUSH
1810: CALL_OW 44
1814: ST_TO_ADDR
// end ; if num = 2 then
1815: LD_VAR 0 2
1819: PUSH
1820: LD_INT 2
1822: EQUAL
1823: IFFALSE 1913
// begin hc_class := class_mechanic ;
1825: LD_ADDR_OWVAR 28
1829: PUSH
1830: LD_INT 3
1832: ST_TO_ADDR
// hc_gallery := ru ;
1833: LD_ADDR_OWVAR 33
1837: PUSH
1838: LD_STRING ru
1840: ST_TO_ADDR
// hc_face_number := 1 ;
1841: LD_ADDR_OWVAR 34
1845: PUSH
1846: LD_INT 1
1848: ST_TO_ADDR
// hc_name := Burlak ;
1849: LD_ADDR_OWVAR 26
1853: PUSH
1854: LD_STRING Burlak
1856: ST_TO_ADDR
// hc_sex := sex_male ;
1857: LD_ADDR_OWVAR 27
1861: PUSH
1862: LD_INT 1
1864: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 0 ] ;
1865: LD_ADDR_OWVAR 31
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 3
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1888: LD_ADDR_OWVAR 29
1892: PUSH
1893: LD_INT 10
1895: PUSH
1896: LD_INT 11
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// result := CreateHuman ;
1903: LD_ADDR_VAR 0 3
1907: PUSH
1908: CALL_OW 44
1912: ST_TO_ADDR
// end ; if num = 3 then
1913: LD_VAR 0 2
1917: PUSH
1918: LD_INT 3
1920: EQUAL
1921: IFFALSE 2003
// begin hc_gallery := ru ;
1923: LD_ADDR_OWVAR 33
1927: PUSH
1928: LD_STRING ru
1930: ST_TO_ADDR
// hc_face_number := 8 ;
1931: LD_ADDR_OWVAR 34
1935: PUSH
1936: LD_INT 8
1938: ST_TO_ADDR
// hc_name := Kurin ;
1939: LD_ADDR_OWVAR 26
1943: PUSH
1944: LD_STRING Kurin
1946: ST_TO_ADDR
// hc_sex := sex_male ;
1947: LD_ADDR_OWVAR 27
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 0 , 1 ] ;
1955: LD_ADDR_OWVAR 31
1959: PUSH
1960: LD_INT 4
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 0
1968: PUSH
1969: LD_INT 1
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1978: LD_ADDR_OWVAR 29
1982: PUSH
1983: LD_INT 12
1985: PUSH
1986: LD_INT 11
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: ST_TO_ADDR
// result := CreateHuman ;
1993: LD_ADDR_VAR 0 3
1997: PUSH
1998: CALL_OW 44
2002: ST_TO_ADDR
// end ; end ;
2003: LD_VAR 0 3
2007: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2008: LD_INT 0
2010: PPUSH
2011: PPUSH
2012: PPUSH
2013: PPUSH
2014: PPUSH
2015: PPUSH
2016: PPUSH
2017: PPUSH
2018: PPUSH
2019: PPUSH
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 3055
// begin if not multi_sides [ i ] then
2036: LD_EXP 6
2040: PUSH
2041: LD_VAR 0 2
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// if multi_buildings [ multi_sides [ i ] ] then
2051: LD_EXP 28
2055: PUSH
2056: LD_EXP 6
2060: PUSH
2061: LD_VAR 0 2
2065: ARRAY
2066: ARRAY
2067: IFFALSE 2301
// begin uc_side := i ;
2069: LD_ADDR_OWVAR 20
2073: PUSH
2074: LD_VAR 0 2
2078: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2079: LD_ADDR_OWVAR 21
2083: PUSH
2084: LD_EXP 8
2088: PUSH
2089: LD_VAR 0 2
2093: ARRAY
2094: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2095: LD_ADDR_VAR 0 3
2099: PUSH
2100: LD_EXP 28
2104: PUSH
2105: LD_EXP 6
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: ARRAY
2116: PUSH
2117: FOR_IN
2118: IFFALSE 2299
// begin bc_type := j [ 1 ] ;
2120: LD_ADDR_OWVAR 42
2124: PUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: ST_TO_ADDR
// bc_level := 2 ;
2134: LD_ADDR_OWVAR 43
2138: PUSH
2139: LD_INT 2
2141: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_VAR 0 3
2151: PUSH
2152: LD_INT 2
2154: ARRAY
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 2
2167: ARRAY
2168: PUSH
2169: LD_INT 2
2171: ARRAY
2172: PPUSH
2173: LD_VAR 0 3
2177: PUSH
2178: LD_INT 2
2180: ARRAY
2181: PUSH
2182: LD_INT 3
2184: ARRAY
2185: PPUSH
2186: CALL_OW 47
2190: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2191: LD_VAR 0 3
2195: PUSH
2196: LD_INT 1
2198: ARRAY
2199: PUSH
2200: LD_INT 0
2202: EQUAL
2203: IFFALSE 2297
// begin SetBName ( b , j [ 3 ] ) ;
2205: LD_VAR 0 4
2209: PPUSH
2210: LD_VAR 0 3
2214: PUSH
2215: LD_INT 3
2217: ARRAY
2218: PPUSH
2219: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
2223: LD_VAR 0 4
2227: PPUSH
2228: CALL_OW 274
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: LD_INT 120
2238: PUSH
2239: LD_INT 100
2241: PUSH
2242: LD_INT 80
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: PUSH
2250: LD_OWVAR 67
2254: ARRAY
2255: PPUSH
2256: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 274
2269: PPUSH
2270: LD_INT 2
2272: PPUSH
2273: LD_INT 90
2275: PUSH
2276: LD_INT 60
2278: PUSH
2279: LD_INT 30
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: LD_OWVAR 67
2291: ARRAY
2292: PPUSH
2293: CALL_OW 277
// end ; end ;
2297: GO 2117
2299: POP
2300: POP
// end ; if multi_custom_commanders then
2301: LD_EXP 15
2305: IFFALSE 2397
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_VAR 0 2
2316: PPUSH
2317: LD_EXP 6
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: PPUSH
2328: CALL 1688 0 2
2332: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2333: LD_ADDR_EXP 23
2337: PUSH
2338: LD_EXP 23
2342: PPUSH
2343: LD_EXP 23
2347: PUSH
2348: LD_INT 1
2350: PLUS
2351: PPUSH
2352: LD_VAR 0 6
2356: PPUSH
2357: CALL_OW 2
2361: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2362: LD_VAR 0 6
2366: PPUSH
2367: LD_EXP 11
2371: PUSH
2372: LD_EXP 6
2376: PUSH
2377: LD_VAR 0 2
2381: ARRAY
2382: ARRAY
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: LD_INT 0
2390: PPUSH
2391: CALL_OW 49
// end else
2395: GO 2608
// begin uc_side := i ;
2397: LD_ADDR_OWVAR 20
2401: PUSH
2402: LD_VAR 0 2
2406: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2407: LD_ADDR_OWVAR 21
2411: PUSH
2412: LD_EXP 8
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: ST_TO_ADDR
// hc_importance := 100 ;
2423: LD_ADDR_OWVAR 32
2427: PUSH
2428: LD_INT 100
2430: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2431: LD_INT 0
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: LD_EXP 19
2441: PPUSH
2442: CALL_OW 380
// if multiplayer then
2446: LD_OWVAR 4
2450: IFFALSE 2508
// begin hc_name := mp_sides_players_names [ i ] ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_OWVAR 19
2461: PUSH
2462: LD_VAR 0 2
2466: ARRAY
2467: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2468: LD_ADDR_OWVAR 33
2472: PUSH
2473: LD_STRING MULTIAVATARS
2475: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2476: LD_ADDR_OWVAR 34
2480: PUSH
2481: LD_VAR 0 2
2485: PPUSH
2486: CALL_OW 525
2490: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2491: LD_ADDR_OWVAR 27
2495: PUSH
2496: LD_VAR 0 2
2500: PPUSH
2501: CALL_OW 526
2505: ST_TO_ADDR
// end else
2506: GO 2540
// begin hc_gallery :=  ;
2508: LD_ADDR_OWVAR 33
2512: PUSH
2513: LD_STRING 
2515: ST_TO_ADDR
// hc_name :=  ;
2516: LD_ADDR_OWVAR 26
2520: PUSH
2521: LD_STRING 
2523: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2524: LD_ADDR_OWVAR 27
2528: PUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_INT 2
2534: PPUSH
2535: CALL_OW 12
2539: ST_TO_ADDR
// end ; un := CreateHuman ;
2540: LD_ADDR_VAR 0 6
2544: PUSH
2545: CALL_OW 44
2549: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2550: LD_VAR 0 6
2554: PPUSH
2555: LD_EXP 11
2559: PUSH
2560: LD_EXP 6
2564: PUSH
2565: LD_VAR 0 2
2569: ARRAY
2570: ARRAY
2571: PUSH
2572: LD_INT 1
2574: ARRAY
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2583: LD_ADDR_EXP 23
2587: PUSH
2588: LD_EXP 23
2592: PPUSH
2593: LD_VAR 0 2
2597: PPUSH
2598: LD_VAR 0 6
2602: PPUSH
2603: CALL_OW 1
2607: ST_TO_ADDR
// end ; InitHc ;
2608: CALL_OW 19
// InitUc ;
2612: CALL_OW 18
// uc_side := i ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_VAR 0 2
2625: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2626: LD_ADDR_OWVAR 21
2630: PUSH
2631: LD_EXP 8
2635: PUSH
2636: LD_VAR 0 2
2640: ARRAY
2641: ST_TO_ADDR
// hc_gallery :=  ;
2642: LD_ADDR_OWVAR 33
2646: PUSH
2647: LD_STRING 
2649: ST_TO_ADDR
// hc_name :=  ;
2650: LD_ADDR_OWVAR 26
2654: PUSH
2655: LD_STRING 
2657: ST_TO_ADDR
// hc_importance := 0 ;
2658: LD_ADDR_OWVAR 32
2662: PUSH
2663: LD_INT 0
2665: ST_TO_ADDR
// cl := 1 ;
2666: LD_ADDR_VAR 0 5
2670: PUSH
2671: LD_INT 1
2673: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
2674: LD_ADDR_VAR 0 3
2678: PUSH
2679: DOUBLE
2680: LD_INT 2
2682: DEC
2683: ST_TO_ADDR
2684: LD_EXP 18
2688: PUSH
2689: FOR_TO
2690: IFFALSE 3051
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2692: LD_VAR 0 3
2696: PUSH
2697: LD_INT 1
2699: MINUS
2700: PUSH
2701: LD_EXP 18
2705: PUSH
2706: LD_INT 1
2708: MINUS
2709: PUSH
2710: LD_INT 4
2712: DIVREAL
2713: MOD
2714: PUSH
2715: LD_INT 0
2717: EQUAL
2718: IFFALSE 2734
// cl := cl + 1 ;
2720: LD_ADDR_VAR 0 5
2724: PUSH
2725: LD_VAR 0 5
2729: PUSH
2730: LD_INT 1
2732: PLUS
2733: ST_TO_ADDR
// if cl > 4 then
2734: LD_VAR 0 5
2738: PUSH
2739: LD_INT 4
2741: GREATER
2742: IFFALSE 2752
// cl := 1 ;
2744: LD_ADDR_VAR 0 5
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2752: LD_INT 0
2754: PPUSH
2755: LD_VAR 0 5
2759: PPUSH
2760: LD_EXP 19
2764: PPUSH
2765: CALL_OW 380
// un := CreateHuman ;
2769: LD_ADDR_VAR 0 6
2773: PUSH
2774: CALL_OW 44
2778: ST_TO_ADDR
// if j > copy then
2779: LD_VAR 0 3
2783: PUSH
2784: LD_VAR 0 9
2788: GREATER
2789: IFFALSE 2818
// copy := Replace ( copy , j , un ) else
2791: LD_ADDR_VAR 0 9
2795: PUSH
2796: LD_VAR 0 9
2800: PPUSH
2801: LD_VAR 0 3
2805: PPUSH
2806: LD_VAR 0 6
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
2816: GO 2900
// begin CopySkills ( copy [ j ] , un ) ;
2818: LD_VAR 0 9
2822: PUSH
2823: LD_VAR 0 3
2827: ARRAY
2828: PPUSH
2829: LD_VAR 0 6
2833: PPUSH
2834: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2838: LD_VAR 0 6
2842: PPUSH
2843: LD_INT 2
2845: PPUSH
2846: LD_VAR 0 9
2850: PUSH
2851: LD_VAR 0 3
2855: ARRAY
2856: PPUSH
2857: LD_INT 2
2859: PPUSH
2860: CALL_OW 260
2864: PPUSH
2865: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2869: LD_VAR 0 6
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_VAR 0 9
2881: PUSH
2882: LD_VAR 0 3
2886: ARRAY
2887: PPUSH
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 260
2895: PPUSH
2896: CALL_OW 239
// end ; if multi_pos_area then
2900: LD_EXP 11
2904: IFFALSE 3049
// begin if GetClass ( un ) = 3 then
2906: LD_VAR 0 6
2910: PPUSH
2911: CALL_OW 257
2915: PUSH
2916: LD_INT 3
2918: EQUAL
2919: IFFALSE 3016
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
2921: LD_INT 21
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: LD_INT 1
2929: PPUSH
2930: LD_INT 43
2932: PUSH
2933: LD_INT 42
2935: PUSH
2936: LD_INT 42
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_OWVAR 67
2948: ARRAY
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: CALL 46563 0 5
// veh := CreateVehicle ;
2957: LD_ADDR_VAR 0 7
2961: PUSH
2962: CALL_OW 45
2966: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2967: LD_VAR 0 7
2971: PPUSH
2972: LD_EXP 11
2976: PUSH
2977: LD_EXP 6
2981: PUSH
2982: LD_VAR 0 2
2986: ARRAY
2987: ARRAY
2988: PUSH
2989: LD_INT 2
2991: ARRAY
2992: PPUSH
2993: LD_INT 0
2995: PPUSH
2996: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3000: LD_VAR 0 6
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: CALL_OW 52
// continue ;
3014: GO 2689
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3016: LD_VAR 0 6
3020: PPUSH
3021: LD_EXP 11
3025: PUSH
3026: LD_EXP 6
3030: PUSH
3031: LD_VAR 0 2
3035: ARRAY
3036: ARRAY
3037: PUSH
3038: LD_INT 1
3040: ARRAY
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: CALL_OW 49
// end ; end ;
3049: GO 2689
3051: POP
3052: POP
// end ;
3053: GO 2033
3055: POP
3056: POP
// end ;
3057: LD_VAR 0 1
3061: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3062: LD_INT 0
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
// if not multi_support then
3069: LD_EXP 22
3073: NOT
3074: IFFALSE 3078
// exit ;
3076: GO 3365
// result := [ ] ;
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 8 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 8
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3363
// begin result := Replace ( result , i , [ ] ) ;
3101: LD_ADDR_VAR 0 1
3105: PUSH
3106: LD_VAR 0 1
3110: PPUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: EMPTY
3117: PPUSH
3118: CALL_OW 1
3122: ST_TO_ADDR
// if multi_sides [ i ] then
3123: LD_EXP 6
3127: PUSH
3128: LD_VAR 0 2
3132: ARRAY
3133: IFFALSE 3361
// begin tmp := [ ] ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: EMPTY
3141: ST_TO_ADDR
// if multi_support = 1 then
3142: LD_EXP 22
3146: PUSH
3147: LD_INT 1
3149: EQUAL
3150: IFFALSE 3239
// begin uc_side := i ;
3152: LD_ADDR_OWVAR 20
3156: PUSH
3157: LD_VAR 0 2
3161: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3162: LD_ADDR_OWVAR 21
3166: PUSH
3167: LD_EXP 8
3171: PUSH
3172: LD_VAR 0 2
3176: ARRAY
3177: ST_TO_ADDR
// for j := 1 to 2 do
3178: LD_ADDR_VAR 0 3
3182: PUSH
3183: DOUBLE
3184: LD_INT 1
3186: DEC
3187: ST_TO_ADDR
3188: LD_INT 2
3190: PUSH
3191: FOR_TO
3192: IFFALSE 3237
// begin InitHC_All ( ) ;
3194: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 1
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 12
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3219: LD_ADDR_VAR 0 5
3223: PUSH
3224: LD_VAR 0 5
3228: PUSH
3229: CALL_OW 44
3233: ADD
3234: ST_TO_ADDR
// end ;
3235: GO 3191
3237: POP
3238: POP
// end ; if multi_support = 2 then
3239: LD_EXP 22
3243: PUSH
3244: LD_INT 2
3246: EQUAL
3247: IFFALSE 3336
// begin uc_side := i ;
3249: LD_ADDR_OWVAR 20
3253: PUSH
3254: LD_VAR 0 2
3258: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3259: LD_ADDR_OWVAR 21
3263: PUSH
3264: LD_EXP 8
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: ST_TO_ADDR
// for j := 1 to 4 do
3275: LD_ADDR_VAR 0 3
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 4
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3334
// begin InitHC_All ( ) ;
3291: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
3295: LD_INT 0
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: CALL_OW 12
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_VAR 0 5
3325: PUSH
3326: CALL_OW 44
3330: ADD
3331: ST_TO_ADDR
// end ;
3332: GO 3288
3334: POP
3335: POP
// end ; result := Replace ( result , i , tmp ) ;
3336: LD_ADDR_VAR 0 1
3340: PUSH
3341: LD_VAR 0 1
3345: PPUSH
3346: LD_VAR 0 2
3350: PPUSH
3351: LD_VAR 0 5
3355: PPUSH
3356: CALL_OW 1
3360: ST_TO_ADDR
// end ; end ;
3361: GO 3098
3363: POP
3364: POP
// end ;
3365: LD_VAR 0 1
3369: RET
// export function Multiplayer_Start ( ) ; begin
3370: LD_INT 0
3372: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3373: CALL 2008 0 0
// Multiplayer_InitPointSystem ( ) ;
3377: CALL 4107 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3381: LD_INT 20
3383: PPUSH
3384: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3388: LD_INT 150
3390: PPUSH
3391: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3395: LD_INT 5
3397: PPUSH
3398: CALL 4283 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3402: LD_INT 40
3404: NEG
3405: PPUSH
3406: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3410: LD_INT 200
3412: PPUSH
3413: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3417: LD_INT 2
3419: PPUSH
3420: CALL 4283 0 1
// if multi_support then
3424: LD_EXP 22
3428: IFFALSE 3440
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3430: LD_ADDR_EXP 26
3434: PUSH
3435: CALL 3062 0 0
3439: ST_TO_ADDR
// if multi_sides [ your_side ] then
3440: LD_EXP 6
3444: PUSH
3445: LD_OWVAR 2
3449: ARRAY
3450: IFFALSE 3477
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3452: LD_INT 22
3454: PUSH
3455: LD_OWVAR 2
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PPUSH
3464: CALL_OW 69
3468: PUSH
3469: LD_INT 1
3471: ARRAY
3472: PPUSH
3473: CALL_OW 87
// end ;
3477: LD_VAR 0 1
3481: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
// repeat wait ( 0 0$1 ) ;
3487: LD_INT 35
3489: PPUSH
3490: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
3494: LD_OWVAR 1
3498: PUSH
3499: LD_EXP 27
3503: GREATER
3504: PUSH
3505: LD_EXP 22
3509: AND
3510: IFFALSE 3675
// begin if tick mod 1 1$00 = 0 then
3512: LD_OWVAR 1
3516: PUSH
3517: LD_INT 2100
3519: MOD
3520: PUSH
3521: LD_INT 0
3523: EQUAL
3524: IFFALSE 3675
// begin for i := 1 to 8 do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: DOUBLE
3532: LD_INT 1
3534: DEC
3535: ST_TO_ADDR
3536: LD_INT 8
3538: PUSH
3539: FOR_TO
3540: IFFALSE 3673
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
3542: LD_EXP 6
3546: PUSH
3547: LD_VAR 0 2
3551: ARRAY
3552: PUSH
3553: LD_EXP 24
3557: PUSH
3558: LD_VAR 0 2
3562: ARRAY
3563: NOT
3564: AND
3565: PUSH
3566: LD_EXP 26
3570: PUSH
3571: LD_VAR 0 2
3575: ARRAY
3576: AND
3577: PUSH
3578: LD_INT 80
3580: PUSH
3581: LD_INT 60
3583: PUSH
3584: LD_INT 40
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: PUSH
3592: LD_OWVAR 67
3596: ARRAY
3597: PPUSH
3598: CALL_OW 13
3602: AND
3603: IFFALSE 3671
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
3605: LD_EXP 26
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_INT 7
3622: PPUSH
3623: LD_INT 1
3625: PPUSH
3626: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
3630: LD_ADDR_EXP 26
3634: PUSH
3635: LD_EXP 26
3639: PPUSH
3640: LD_VAR 0 2
3644: PPUSH
3645: LD_EXP 26
3649: PUSH
3650: LD_VAR 0 2
3654: ARRAY
3655: PPUSH
3656: LD_INT 1
3658: PPUSH
3659: CALL_OW 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// break ;
3669: GO 3673
// end ; end ;
3671: GO 3539
3673: POP
3674: POP
// end ; end ; if not multi_custom_commanders then
3675: LD_EXP 15
3679: NOT
3680: IFFALSE 3793
// begin for i := 1 to 8 do
3682: LD_ADDR_VAR 0 2
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_INT 8
3694: PUSH
3695: FOR_TO
3696: IFFALSE 3767
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3698: LD_INT 22
3700: PUSH
3701: LD_VAR 0 2
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PPUSH
3710: CALL_OW 69
3714: PUSH
3715: LD_INT 0
3717: EQUAL
3718: PUSH
3719: LD_EXP 24
3723: PUSH
3724: LD_VAR 0 2
3728: ARRAY
3729: NOT
3730: AND
3731: IFFALSE 3765
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3733: LD_ADDR_EXP 24
3737: PUSH
3738: LD_EXP 24
3742: PPUSH
3743: LD_VAR 0 2
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: CALL_OW 1
3755: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3756: LD_VAR 0 2
3760: PPUSH
3761: CALL 4353 0 1
// end ; end ;
3765: GO 3695
3767: POP
3768: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3769: LD_EXP 24
3773: PPUSH
3774: CALL 43825 0 1
3778: PUSH
3779: LD_EXP 6
3783: PPUSH
3784: CALL 43825 0 1
3788: EQUAL
3789: IFFALSE 3793
// break ;
3791: GO 3813
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
3793: CALL 3927 0 0
3797: NOT
3798: PUSH
3799: LD_EXP 2
3803: AND
3804: PUSH
3805: LD_EXP 23
3809: NOT
3810: OR
3811: IFFALSE 3487
// game := false ;
3813: LD_ADDR_EXP 2
3817: PUSH
3818: LD_INT 0
3820: ST_TO_ADDR
// for i := 1 to 8 do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 8
3833: PUSH
3834: FOR_TO
3835: IFFALSE 3871
// begin if multi_sides [ i ] then
3837: LD_EXP 6
3841: PUSH
3842: LD_VAR 0 2
3846: ARRAY
3847: IFFALSE 3869
// SetMultiScore ( i , multi_points [ i ] ) ;
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_EXP 29
3858: PUSH
3859: LD_VAR 0 2
3863: ARRAY
3864: PPUSH
3865: CALL_OW 506
// end ;
3869: GO 3834
3871: POP
3872: POP
// if multi_loosers [ your_side ] then
3873: LD_EXP 24
3877: PUSH
3878: LD_OWVAR 2
3882: ARRAY
3883: IFFALSE 3906
// begin if Multiplayer then
3885: LD_OWVAR 4
3889: IFFALSE 3897
// YouLostInMultiplayer else
3891: CALL_OW 107
3895: GO 3904
// YouLost (  ) ;
3897: LD_STRING 
3899: PPUSH
3900: CALL_OW 104
// end else
3904: GO 3922
// begin if Multiplayer then
3906: LD_OWVAR 4
3910: IFFALSE 3918
// YouWinInMultiplayer else
3912: CALL_OW 106
3916: GO 3922
// YouWin ;
3918: CALL_OW 103
// end ; end ;
3922: LD_VAR 0 1
3926: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
3927: LD_INT 0
3929: PPUSH
3930: PPUSH
// result := false ;
3931: LD_ADDR_VAR 0 1
3935: PUSH
3936: LD_INT 0
3938: ST_TO_ADDR
// for side in botSides do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: LD_EXP 3
3948: PUSH
3949: FOR_IN
3950: IFFALSE 4011
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: LD_INT 50
3981: PUSH
3982: EMPTY
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 69
3994: PUSH
3995: LD_INT 0
3997: GREATER
3998: ST_TO_ADDR
// if result then
3999: LD_VAR 0 1
4003: IFFALSE 4009
// exit ;
4005: POP
4006: POP
4007: GO 4013
// end ;
4009: GO 3949
4011: POP
4012: POP
// end ;
4013: LD_VAR 0 1
4017: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
// result := [ ] ;
4022: LD_ADDR_VAR 0 1
4026: PUSH
4027: EMPTY
4028: ST_TO_ADDR
// for i := 1 to 8 do
4029: LD_ADDR_VAR 0 2
4033: PUSH
4034: DOUBLE
4035: LD_INT 1
4037: DEC
4038: ST_TO_ADDR
4039: LD_INT 8
4041: PUSH
4042: FOR_TO
4043: IFFALSE 4100
// begin if multi_sides [ i ] then
4045: LD_EXP 6
4049: PUSH
4050: LD_VAR 0 2
4054: ARRAY
4055: IFFALSE 4098
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4057: LD_ADDR_VAR 0 1
4061: PUSH
4062: LD_VAR 0 1
4066: PUSH
4067: LD_STRING #coop-points
4069: PUSH
4070: LD_VAR 0 2
4074: PUSH
4075: LD_VAR 0 2
4079: PUSH
4080: LD_EXP 29
4084: PUSH
4085: LD_VAR 0 2
4089: ARRAY
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: ADD
4097: ST_TO_ADDR
// end ; end ;
4098: GO 4042
4100: POP
4101: POP
// end ;
4102: LD_VAR 0 1
4106: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4107: LD_INT 0
4109: PPUSH
4110: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4111: LD_ADDR_EXP 29
4115: PUSH
4116: LD_INT 0
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 0
4124: PUSH
4125: LD_INT 0
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: LD_INT 0
4133: PUSH
4134: LD_INT 0
4136: PUSH
4137: LD_INT 0
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4150: LD_ADDR_EXP 30
4154: PUSH
4155: EMPTY
4156: ST_TO_ADDR
// end ;
4157: LD_VAR 0 1
4161: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4162: LD_INT 0
4164: PPUSH
// if not multi_points or not side or side > 8 then
4165: LD_EXP 29
4169: NOT
4170: PUSH
4171: LD_VAR 0 1
4175: NOT
4176: OR
4177: PUSH
4178: LD_VAR 0 1
4182: PUSH
4183: LD_INT 8
4185: GREATER
4186: OR
4187: IFFALSE 4191
// exit ;
4189: GO 4228
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4191: LD_ADDR_EXP 29
4195: PUSH
4196: LD_EXP 29
4200: PPUSH
4201: LD_VAR 0 1
4205: PPUSH
4206: LD_EXP 29
4210: PUSH
4211: LD_VAR 0 1
4215: ARRAY
4216: PUSH
4217: LD_VAR 0 2
4221: PLUS
4222: PPUSH
4223: CALL_OW 1
4227: ST_TO_ADDR
// end ;
4228: LD_VAR 0 3
4232: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4233: LD_INT 0
4235: PPUSH
// if not multi_points or not side or side > 8 then
4236: LD_EXP 29
4240: NOT
4241: PUSH
4242: LD_VAR 0 1
4246: NOT
4247: OR
4248: PUSH
4249: LD_VAR 0 1
4253: PUSH
4254: LD_INT 8
4256: GREATER
4257: OR
4258: IFFALSE 4262
// exit ;
4260: GO 4278
// result := multi_points [ side ] ;
4262: LD_ADDR_VAR 0 2
4266: PUSH
4267: LD_EXP 29
4271: PUSH
4272: LD_VAR 0 1
4276: ARRAY
4277: ST_TO_ADDR
// end ;
4278: LD_VAR 0 2
4282: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4283: LD_INT 0
4285: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4286: LD_ADDR_EXP 30
4290: PUSH
4291: LD_EXP 30
4295: PPUSH
4296: LD_EXP 30
4300: PUSH
4301: LD_INT 1
4303: PLUS
4304: PPUSH
4305: LD_VAR 0 1
4309: PPUSH
4310: CALL_OW 1
4314: ST_TO_ADDR
// end ;
4315: LD_VAR 0 2
4319: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4320: LD_INT 0
4322: PPUSH
// if not id then
4323: LD_VAR 0 1
4327: NOT
4328: IFFALSE 4332
// exit ;
4330: GO 4348
// result := multi_points_conditions [ id ] ;
4332: LD_ADDR_VAR 0 2
4336: PUSH
4337: LD_EXP 30
4341: PUSH
4342: LD_VAR 0 1
4346: ARRAY
4347: ST_TO_ADDR
// end ;
4348: LD_VAR 0 2
4352: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
4358: PPUSH
4359: PPUSH
// players := [ ] ;
4360: LD_ADDR_VAR 0 3
4364: PUSH
4365: EMPTY
4366: ST_TO_ADDR
// for i = 1 to 8 do
4367: LD_ADDR_VAR 0 4
4371: PUSH
4372: DOUBLE
4373: LD_INT 1
4375: DEC
4376: ST_TO_ADDR
4377: LD_INT 8
4379: PUSH
4380: FOR_TO
4381: IFFALSE 4440
// begin if i = side then
4383: LD_VAR 0 4
4387: PUSH
4388: LD_VAR 0 1
4392: EQUAL
4393: IFFALSE 4397
// continue ;
4395: GO 4380
// if multi_sides [ i ] and not multi_loosers [ i ] then
4397: LD_EXP 6
4401: PUSH
4402: LD_VAR 0 4
4406: ARRAY
4407: PUSH
4408: LD_EXP 24
4412: PUSH
4413: LD_VAR 0 4
4417: ARRAY
4418: NOT
4419: AND
4420: IFFALSE 4438
// players := players ^ i ;
4422: LD_ADDR_VAR 0 3
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: LD_VAR 0 4
4436: ADD
4437: ST_TO_ADDR
// end ;
4438: GO 4380
4440: POP
4441: POP
// if not players then
4442: LD_VAR 0 3
4446: NOT
4447: IFFALSE 4451
// exit ;
4449: GO 4718
// if players = 1 then
4451: LD_VAR 0 3
4455: PUSH
4456: LD_INT 1
4458: EQUAL
4459: IFFALSE 4520
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4461: LD_ADDR_VAR 0 4
4465: PUSH
4466: LD_INT 22
4468: PUSH
4469: LD_VAR 0 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 51
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: FOR_IN
4494: IFFALSE 4516
// SetSide ( i , players [ 1 ] ) ;
4496: LD_VAR 0 4
4500: PPUSH
4501: LD_VAR 0 3
4505: PUSH
4506: LD_INT 1
4508: ARRAY
4509: PPUSH
4510: CALL_OW 235
4514: GO 4493
4516: POP
4517: POP
// end else
4518: GO 4718
// begin j := 1 ;
4520: LD_ADDR_VAR 0 5
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4528: LD_ADDR_VAR 0 4
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_VAR 0 1
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 51
4560: PUSH
4561: EMPTY
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 21
4570: PUSH
4571: LD_INT 2
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4716
// begin SetSide ( i , players [ j ] ) ;
4595: LD_VAR 0 4
4599: PPUSH
4600: LD_VAR 0 3
4604: PUSH
4605: LD_VAR 0 5
4609: ARRAY
4610: PPUSH
4611: CALL_OW 235
// if IsDrivenBy ( i ) then
4615: LD_VAR 0 4
4619: PPUSH
4620: CALL_OW 311
4624: IFFALSE 4651
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4626: LD_VAR 0 4
4630: PPUSH
4631: CALL_OW 311
4635: PPUSH
4636: LD_VAR 0 3
4640: PUSH
4641: LD_VAR 0 5
4645: ARRAY
4646: PPUSH
4647: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4651: LD_VAR 0 4
4655: PPUSH
4656: CALL_OW 310
4660: PPUSH
4661: CALL_OW 247
4665: PUSH
4666: LD_INT 3
4668: EQUAL
4669: IFFALSE 4680
// ComExitBuilding ( i ) ;
4671: LD_VAR 0 4
4675: PPUSH
4676: CALL_OW 122
// j := j + 1 ;
4680: LD_ADDR_VAR 0 5
4684: PUSH
4685: LD_VAR 0 5
4689: PUSH
4690: LD_INT 1
4692: PLUS
4693: ST_TO_ADDR
// if j > players then
4694: LD_VAR 0 5
4698: PUSH
4699: LD_VAR 0 3
4703: GREATER
4704: IFFALSE 4714
// j := 1 ;
4706: LD_ADDR_VAR 0 5
4710: PUSH
4711: LD_INT 1
4713: ST_TO_ADDR
// end ;
4714: GO 4592
4716: POP
4717: POP
// end ; end ;
4718: LD_VAR 0 2
4722: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// i := 3 ;
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: LD_INT 3
4735: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4736: LD_ADDR_VAR 0 3
4740: PUSH
4741: LD_INT 5
4743: PUSH
4744: LD_INT 10
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 120
4753: PUSH
4754: LD_INT 2
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 101
4763: PUSH
4764: LD_INT 8
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 27
4773: PUSH
4774: LD_INT 4
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4787: LD_INT 4
4789: PPUSH
4790: LD_INT 5
4792: PPUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_VAR 0 2
4802: ARRAY
4803: PUSH
4804: LD_INT 1
4806: ARRAY
4807: PPUSH
4808: LD_VAR 0 3
4812: PUSH
4813: LD_VAR 0 2
4817: ARRAY
4818: PUSH
4819: LD_INT 2
4821: ARRAY
4822: PPUSH
4823: LD_INT 0
4825: PPUSH
4826: CALL_OW 58
// end ;
4830: LD_VAR 0 1
4834: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4835: LD_INT 0
4837: PPUSH
// if not side or side > 8 then
4838: LD_VAR 0 1
4842: NOT
4843: PUSH
4844: LD_VAR 0 1
4848: PUSH
4849: LD_INT 8
4851: GREATER
4852: OR
4853: IFFALSE 4857
// exit ;
4855: GO 4874
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: LD_INT 6
4864: PPUSH
4865: CALL 4320 0 1
4869: PPUSH
4870: CALL 4162 0 2
// end ;
4874: LD_VAR 0 2
4878: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
4879: LD_INT 0
4881: PPUSH
// if not side or side > 8 then
4882: LD_VAR 0 1
4886: NOT
4887: PUSH
4888: LD_VAR 0 1
4892: PUSH
4893: LD_INT 8
4895: GREATER
4896: OR
4897: IFFALSE 4901
// exit ;
4899: GO 4918
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
4901: LD_VAR 0 1
4905: PPUSH
4906: LD_INT 4
4908: PPUSH
4909: CALL 4320 0 1
4913: PPUSH
4914: CALL 4162 0 2
// end ;
4918: LD_VAR 0 2
4922: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
4923: LD_INT 0
4925: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
4926: LD_VAR 0 1
4930: NOT
4931: PUSH
4932: LD_VAR 0 1
4936: PUSH
4937: LD_INT 8
4939: GREATER
4940: OR
4941: PUSH
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 2
4949: PUSH
4950: LD_INT 6
4952: PUSH
4953: LD_INT 36
4955: PUSH
4956: LD_INT 0
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: IN
4965: NOT
4966: OR
4967: IFFALSE 4971
// exit ;
4969: GO 4988
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
4971: LD_VAR 0 1
4975: PPUSH
4976: LD_INT 3
4978: PPUSH
4979: CALL 4320 0 1
4983: PPUSH
4984: CALL 4162 0 2
// end ;
4988: LD_VAR 0 3
4992: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
4993: LD_INT 0
4995: PPUSH
4996: PPUSH
// if not un then
4997: LD_VAR 0 1
5001: NOT
5002: IFFALSE 5006
// exit ;
5004: GO 5052
// if not points then
5006: LD_VAR 0 3
5010: NOT
5011: IFFALSE 5028
// gained_points := Multiplayer_GetCondition ( 1 ) else
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL 4320 0 1
5025: ST_TO_ADDR
5026: GO 5038
// gained_points := points ;
5028: LD_ADDR_VAR 0 5
5032: PUSH
5033: LD_VAR 0 3
5037: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5038: LD_VAR 0 2
5042: PPUSH
5043: LD_VAR 0 5
5047: PPUSH
5048: CALL 4162 0 2
5052: LD_VAR 0 4
5056: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5057: LD_INT 0
5059: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5060: LD_VAR 0 1
5064: PPUSH
5065: LD_INT 2
5067: PPUSH
5068: CALL 4320 0 1
5072: PPUSH
5073: CALL 4162 0 2
// end ; end_of_file
5077: LD_VAR 0 2
5081: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5082: LD_INT 0
5084: PPUSH
5085: PPUSH
5086: PPUSH
5087: PPUSH
5088: PPUSH
5089: PPUSH
5090: PPUSH
5091: PPUSH
5092: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5093: LD_ADDR_EXP 32
5097: PUSH
5098: LD_VAR 0 1
5102: PPUSH
5103: LD_INT 1
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: CALL 41786 0 3
5113: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5114: LD_ADDR_EXP 33
5118: PUSH
5119: LD_INT 4
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 3
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: LD_INT 1
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: LD_INT 1
5160: PUSH
5161: LD_INT 1
5163: PUSH
5164: LD_INT 4
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_INT 2
5175: PUSH
5176: LD_INT 1
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: LD_INT 4
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: LD_INT 1
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: LD_INT 3
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: ST_TO_ADDR
// amBuildings := [ ] ;
5216: LD_ADDR_EXP 34
5220: PUSH
5221: EMPTY
5222: ST_TO_ADDR
// amVehicles := [ ] ;
5223: LD_ADDR_EXP 35
5227: PUSH
5228: EMPTY
5229: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
5230: LD_ADDR_EXP 36
5234: PUSH
5235: EMPTY
5236: ST_TO_ADDR
// amDrivers := [ ] ;
5237: LD_ADDR_EXP 37
5241: PUSH
5242: EMPTY
5243: ST_TO_ADDR
// amVehiclesCounter := 3 ;
5244: LD_ADDR_EXP 38
5248: PUSH
5249: LD_INT 3
5251: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
5252: LD_ADDR_EXP 41
5256: PUSH
5257: LD_INT 6
5259: PUSH
5260: LD_INT 8
5262: PUSH
5263: LD_INT 10
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: LIST
5270: PUSH
5271: LD_OWVAR 67
5275: ARRAY
5276: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5277: LD_ADDR_VAR 0 8
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 4
5287: PUSH
5288: LD_INT 5
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: PUSH
5296: LD_OWVAR 67
5300: ARRAY
5301: ST_TO_ADDR
// uc_side := side ;
5302: LD_ADDR_OWVAR 20
5306: PUSH
5307: LD_VAR 0 1
5311: ST_TO_ADDR
// uc_nation := nation_american ;
5312: LD_ADDR_OWVAR 21
5316: PUSH
5317: LD_INT 1
5319: ST_TO_ADDR
// hc_gallery := us ;
5320: LD_ADDR_OWVAR 33
5324: PUSH
5325: LD_STRING us
5327: ST_TO_ADDR
// hc_face_number := 19 ;
5328: LD_ADDR_OWVAR 34
5332: PUSH
5333: LD_INT 19
5335: ST_TO_ADDR
// hc_importance := 100 ;
5336: LD_ADDR_OWVAR 32
5340: PUSH
5341: LD_INT 100
5343: ST_TO_ADDR
// hc_name := Sikorski ;
5344: LD_ADDR_OWVAR 26
5348: PUSH
5349: LD_STRING Sikorski
5351: ST_TO_ADDR
// hc_sex := sex_male ;
5352: LD_ADDR_OWVAR 27
5356: PUSH
5357: LD_INT 1
5359: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
5360: LD_ADDR_OWVAR 31
5364: PUSH
5365: LD_INT 5
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5383: LD_ADDR_OWVAR 29
5387: PUSH
5388: LD_INT 10
5390: PUSH
5391: LD_INT 11
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: ST_TO_ADDR
// Sikorski := CreateHuman ;
5398: LD_ADDR_EXP 31
5402: PUSH
5403: CALL_OW 44
5407: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
5408: LD_EXP 31
5412: PPUSH
5413: LD_INT 1
5415: PPUSH
5416: CALL_OW 52
// InitHC_All ( ) ;
5420: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
5424: LD_ADDR_EXP 39
5428: PUSH
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 3
5434: PPUSH
5435: LD_STRING 
5437: PPUSH
5438: LD_VAR 0 8
5442: PPUSH
5443: LD_INT 800
5445: PUSH
5446: LD_INT 120
5448: PUSH
5449: LD_INT 0
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: PPUSH
5457: LD_INT 10
5459: PUSH
5460: LD_INT 11
5462: PUSH
5463: LD_INT 12
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PUSH
5471: LD_OWVAR 67
5475: ARRAY
5476: PUSH
5477: LD_INT 4
5479: PUSH
5480: LD_INT 6
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL 50384 0 6
5496: ST_TO_ADDR
// amForceTmp := [ ] ;
5497: LD_ADDR_EXP 40
5501: PUSH
5502: EMPTY
5503: ST_TO_ADDR
// if Difficulty = 3 then
5504: LD_OWVAR 67
5508: PUSH
5509: LD_INT 3
5511: EQUAL
5512: IFFALSE 5543
// begin bc_type := b_breastwork ;
5514: LD_ADDR_OWVAR 42
5518: PUSH
5519: LD_INT 31
5521: ST_TO_ADDR
// bc_level := 7 ;
5522: LD_ADDR_OWVAR 43
5526: PUSH
5527: LD_INT 7
5529: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
5530: LD_INT 79
5532: PPUSH
5533: LD_INT 72
5535: PPUSH
5536: LD_INT 5
5538: PPUSH
5539: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_VAR 0 1
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 30
5562: PUSH
5563: LD_INT 31
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PUSH
5570: LD_INT 3
5572: PUSH
5573: LD_INT 95
5575: PUSH
5576: LD_INT 3
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PUSH
5587: LD_INT 58
5589: PUSH
5590: EMPTY
5591: LIST
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PUSH
5604: FOR_IN
5605: IFFALSE 5734
// begin d := GetDir ( i ) ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 254
5621: ST_TO_ADDR
// if d < 3 then
5622: LD_VAR 0 4
5626: PUSH
5627: LD_INT 3
5629: LESS
5630: IFFALSE 5648
// d := d + 3 else
5632: LD_ADDR_VAR 0 4
5636: PUSH
5637: LD_VAR 0 4
5641: PUSH
5642: LD_INT 3
5644: PLUS
5645: ST_TO_ADDR
5646: GO 5662
// d := d - 3 ;
5648: LD_ADDR_VAR 0 4
5652: PUSH
5653: LD_VAR 0 4
5657: PUSH
5658: LD_INT 3
5660: MINUS
5661: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5662: LD_INT 0
5664: PPUSH
5665: LD_VAR 0 8
5669: PPUSH
5670: CALL_OW 381
// un := CreateHuman ;
5674: LD_ADDR_VAR 0 6
5678: PUSH
5679: CALL_OW 44
5683: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
5684: LD_ADDR_EXP 40
5688: PUSH
5689: LD_EXP 40
5693: PPUSH
5694: LD_VAR 0 6
5698: PPUSH
5699: CALL 79414 0 2
5703: ST_TO_ADDR
// SetDir ( un , d ) ;
5704: LD_VAR 0 6
5708: PPUSH
5709: LD_VAR 0 4
5713: PPUSH
5714: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5718: LD_VAR 0 6
5722: PPUSH
5723: LD_VAR 0 3
5727: PPUSH
5728: CALL_OW 52
// end ;
5732: GO 5604
5734: POP
5735: POP
// for i := 1 to 3 do
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: DOUBLE
5742: LD_INT 1
5744: DEC
5745: ST_TO_ADDR
5746: LD_INT 3
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5811
// begin PrepareEngineer ( false , skill ) ;
5752: LD_INT 0
5754: PPUSH
5755: LD_VAR 0 8
5759: PPUSH
5760: CALL_OW 382
// un := CreateHuman ;
5764: LD_ADDR_VAR 0 6
5768: PUSH
5769: CALL_OW 44
5773: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
5774: LD_VAR 0 6
5778: PPUSH
5779: LD_INT 29
5781: PPUSH
5782: LD_INT 0
5784: PPUSH
5785: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
5789: LD_ADDR_EXP 40
5793: PUSH
5794: LD_EXP 40
5798: PPUSH
5799: LD_VAR 0 6
5803: PPUSH
5804: CALL 79414 0 2
5808: ST_TO_ADDR
// end ;
5809: GO 5749
5811: POP
5812: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
5813: LD_ADDR_VAR 0 3
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_VAR 0 1
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 21
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: PUSH
5849: FOR_IN
5850: IFFALSE 5883
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
5852: LD_VAR 0 3
5856: PPUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: LD_INT 7
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_OWVAR 67
5875: ARRAY
5876: PPUSH
5877: CALL_OW 241
5881: GO 5849
5883: POP
5884: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
5885: LD_ADDR_VAR 0 3
5889: PUSH
5890: LD_INT 22
5892: PUSH
5893: LD_VAR 0 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 30
5904: PUSH
5905: LD_INT 32
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 69
5920: PUSH
5921: FOR_IN
5922: IFFALSE 5963
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
5924: LD_VAR 0 3
5928: PPUSH
5929: LD_INT 5
5931: PUSH
5932: LD_INT 4
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: LIST
5942: PUSH
5943: LD_VAR 0 3
5947: PUSH
5948: LD_INT 3
5950: MOD
5951: PUSH
5952: LD_INT 1
5954: PLUS
5955: ARRAY
5956: PPUSH
5957: CALL_OW 431
5961: GO 5921
5963: POP
5964: POP
// end ;
5965: LD_VAR 0 2
5969: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
5970: LD_INT 0
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
// enable ;
5999: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6000: LD_ADDR_VAR 0 10
6004: PUSH
6005: LD_INT 81
6007: PUSH
6008: LD_VAR 0 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PPUSH
6017: CALL_OW 69
6021: ST_TO_ADDR
// if tmp then
6022: LD_VAR 0 10
6026: IFFALSE 6047
// enemySide := GetSide ( tmp [ 1 ] ) ;
6028: LD_ADDR_VAR 0 34
6032: PUSH
6033: LD_VAR 0 10
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: CALL_OW 255
6046: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
6047: LD_ADDR_VAR 0 22
6051: PUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: LD_INT 81
6059: PUSH
6060: LD_VAR 0 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: CALL_OW 70
6073: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6074: LD_ADDR_VAR 0 23
6078: PUSH
6079: LD_VAR 0 4
6083: PPUSH
6084: LD_INT 81
6086: PUSH
6087: LD_VAR 0 1
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 70
6100: ST_TO_ADDR
// vehicles := amVehicles ;
6101: LD_ADDR_VAR 0 26
6105: PUSH
6106: LD_EXP 35
6110: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6111: LD_ADDR_VAR 0 32
6115: PUSH
6116: LD_VAR 0 3
6120: PPUSH
6121: LD_INT 22
6123: PUSH
6124: LD_VAR 0 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 2
6135: PUSH
6136: LD_INT 30
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: LD_INT 30
6148: PUSH
6149: LD_INT 1
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PPUSH
6165: CALL_OW 70
6169: ST_TO_ADDR
// if depot then
6170: LD_VAR 0 32
6174: IFFALSE 6190
// depot := depot [ 1 ] ;
6176: LD_ADDR_VAR 0 32
6180: PUSH
6181: LD_VAR 0 32
6185: PUSH
6186: LD_INT 1
6188: ARRAY
6189: ST_TO_ADDR
// if amTech then
6190: LD_EXP 32
6194: IFFALSE 6353
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6196: LD_ADDR_VAR 0 12
6200: PUSH
6201: LD_VAR 0 3
6205: PPUSH
6206: LD_INT 22
6208: PUSH
6209: LD_VAR 0 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 50
6220: PUSH
6221: EMPTY
6222: LIST
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 30
6229: PUSH
6230: LD_INT 6
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 30
6239: PUSH
6240: LD_INT 7
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 8
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 70
6272: ST_TO_ADDR
// if lab then
6273: LD_VAR 0 12
6277: IFFALSE 6353
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 461
6292: PUSH
6293: LD_INT 2
6295: EQUAL
6296: IFFALSE 6353
// begin for i in amTech do
6298: LD_ADDR_VAR 0 9
6302: PUSH
6303: LD_EXP 32
6307: PUSH
6308: FOR_IN
6309: IFFALSE 6351
// if CanBeResearched ( lab [ 1 ] , i ) then
6311: LD_VAR 0 12
6315: PUSH
6316: LD_INT 1
6318: ARRAY
6319: PPUSH
6320: LD_VAR 0 9
6324: PPUSH
6325: CALL_OW 430
6329: IFFALSE 6349
// begin AddComResearch ( lab [ 1 ] , i ) ;
6331: LD_VAR 0 12
6335: PUSH
6336: LD_INT 1
6338: ARRAY
6339: PPUSH
6340: LD_VAR 0 9
6344: PPUSH
6345: CALL_OW 184
// end ;
6349: GO 6308
6351: POP
6352: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
6353: LD_ADDR_VAR 0 29
6357: PUSH
6358: LD_VAR 0 3
6362: PPUSH
6363: LD_INT 22
6365: PUSH
6366: LD_VAR 0 1
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 30
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 50
6387: PUSH
6388: EMPTY
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 70
6400: ST_TO_ADDR
// if fac then
6401: LD_VAR 0 29
6405: IFFALSE 6740
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
6407: LD_VAR 0 29
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: CALL_OW 461
6420: PUSH
6421: LD_INT 2
6423: EQUAL
6424: IFFALSE 6740
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
6426: LD_ADDR_VAR 0 30
6430: PUSH
6431: LD_VAR 0 3
6435: PPUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 30
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 30
6451: PUSH
6452: LD_INT 33
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 35
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PPUSH
6478: CALL_OW 70
6482: ST_TO_ADDR
// if emptyTowers then
6483: LD_VAR 0 30
6487: IFFALSE 6537
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
6489: LD_ADDR_VAR 0 31
6493: PUSH
6494: LD_VAR 0 30
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_VAR 0 3
6507: PPUSH
6508: CALL 52070 0 2
6512: ST_TO_ADDR
// if weapon then
6513: LD_VAR 0 31
6517: IFFALSE 6537
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
6519: LD_VAR 0 30
6523: PUSH
6524: LD_INT 1
6526: ARRAY
6527: PPUSH
6528: LD_VAR 0 31
6532: PPUSH
6533: CALL_OW 148
// end ; if amConstructList then
6537: LD_EXP 33
6541: IFFALSE 6740
// for i := 1 to Count ( amConstructList ) do
6543: LD_ADDR_VAR 0 9
6547: PUSH
6548: DOUBLE
6549: LD_INT 1
6551: DEC
6552: ST_TO_ADDR
6553: LD_EXP 33
6557: PPUSH
6558: CALL 43825 0 1
6562: PUSH
6563: FOR_TO
6564: IFFALSE 6738
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
6566: LD_VAR 0 29
6570: PUSH
6571: LD_INT 1
6573: ARRAY
6574: PPUSH
6575: LD_EXP 33
6579: PUSH
6580: LD_VAR 0 9
6584: ARRAY
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: LD_EXP 33
6594: PUSH
6595: LD_VAR 0 9
6599: ARRAY
6600: PUSH
6601: LD_INT 2
6603: ARRAY
6604: PPUSH
6605: LD_EXP 33
6609: PUSH
6610: LD_VAR 0 9
6614: ARRAY
6615: PUSH
6616: LD_INT 3
6618: ARRAY
6619: PPUSH
6620: LD_EXP 33
6624: PUSH
6625: LD_VAR 0 9
6629: ARRAY
6630: PUSH
6631: LD_INT 4
6633: ARRAY
6634: PPUSH
6635: CALL_OW 448
6639: IFFALSE 6736
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
6641: LD_VAR 0 29
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: PPUSH
6650: LD_EXP 33
6654: PUSH
6655: LD_VAR 0 9
6659: ARRAY
6660: PUSH
6661: LD_INT 1
6663: ARRAY
6664: PPUSH
6665: LD_EXP 33
6669: PUSH
6670: LD_VAR 0 9
6674: ARRAY
6675: PUSH
6676: LD_INT 2
6678: ARRAY
6679: PPUSH
6680: LD_EXP 33
6684: PUSH
6685: LD_VAR 0 9
6689: ARRAY
6690: PUSH
6691: LD_INT 3
6693: ARRAY
6694: PPUSH
6695: LD_EXP 33
6699: PUSH
6700: LD_VAR 0 9
6704: ARRAY
6705: PUSH
6706: LD_INT 4
6708: ARRAY
6709: PPUSH
6710: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
6714: LD_ADDR_EXP 33
6718: PUSH
6719: LD_EXP 33
6723: PPUSH
6724: LD_VAR 0 9
6728: PPUSH
6729: CALL_OW 3
6733: ST_TO_ADDR
// break ;
6734: GO 6738
// end ; end ;
6736: GO 6563
6738: POP
6739: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_VAR 0 3
6749: PPUSH
6750: LD_INT 21
6752: PUSH
6753: LD_INT 3
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: LD_INT 57
6765: PUSH
6766: EMPTY
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 3
6775: PUSH
6776: LD_INT 24
6778: PUSH
6779: LD_INT 1000
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 70
6799: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
6800: LD_ADDR_VAR 0 17
6804: PUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: CALL_OW 435
6814: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
6815: LD_ADDR_VAR 0 14
6819: PUSH
6820: LD_VAR 0 5
6824: PPUSH
6825: LD_INT 25
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 50
6837: PUSH
6838: EMPTY
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 72
6849: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
6850: LD_VAR 0 14
6854: PPUSH
6855: LD_INT 3
6857: PUSH
6858: LD_INT 120
6860: PUSH
6861: LD_INT 7
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: LD_INT 54
6877: PUSH
6878: EMPTY
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 72
6893: PUSH
6894: LD_VAR 0 29
6898: PUSH
6899: LD_INT 1
6901: ARRAY
6902: PPUSH
6903: CALL_OW 302
6907: AND
6908: IFFALSE 6967
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
6910: LD_VAR 0 14
6914: PPUSH
6915: LD_INT 3
6917: PUSH
6918: LD_INT 120
6920: PUSH
6921: LD_INT 7
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: LD_INT 54
6937: PUSH
6938: EMPTY
6939: LIST
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 72
6953: PPUSH
6954: LD_VAR 0 29
6958: PUSH
6959: LD_INT 1
6961: ARRAY
6962: PPUSH
6963: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
6967: LD_ADDR_VAR 0 18
6971: PUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 4
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 50
6989: PUSH
6990: EMPTY
6991: LIST
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 72
7001: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7002: LD_ADDR_VAR 0 12
7006: PUSH
7007: LD_VAR 0 3
7011: PPUSH
7012: LD_INT 2
7014: PUSH
7015: LD_INT 30
7017: PUSH
7018: LD_INT 6
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 30
7027: PUSH
7028: LD_INT 7
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 30
7037: PUSH
7038: LD_INT 8
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 70
7055: ST_TO_ADDR
// if sci then
7056: LD_VAR 0 18
7060: IFFALSE 7221
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7062: LD_ADDR_VAR 0 20
7066: PUSH
7067: LD_VAR 0 5
7071: PPUSH
7072: LD_INT 95
7074: PUSH
7075: LD_VAR 0 3
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 120
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 72
7102: ST_TO_ADDR
// if hurtUnits then
7103: LD_VAR 0 20
7107: IFFALSE 7168
// begin for i in sci do
7109: LD_ADDR_VAR 0 9
7113: PUSH
7114: LD_VAR 0 18
7118: PUSH
7119: FOR_IN
7120: IFFALSE 7164
// if IsInUnit ( i ) then
7122: LD_VAR 0 9
7126: PPUSH
7127: CALL_OW 310
7131: IFFALSE 7144
// ComExitBuilding ( i ) else
7133: LD_VAR 0 9
7137: PPUSH
7138: CALL_OW 122
7142: GO 7162
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7144: LD_VAR 0 9
7148: PPUSH
7149: LD_VAR 0 20
7153: PUSH
7154: LD_INT 1
7156: ARRAY
7157: PPUSH
7158: CALL_OW 128
7162: GO 7119
7164: POP
7165: POP
// end else
7166: GO 7221
// if lab then
7168: LD_VAR 0 12
7172: IFFALSE 7221
// begin for i in sci do
7174: LD_ADDR_VAR 0 9
7178: PUSH
7179: LD_VAR 0 18
7183: PUSH
7184: FOR_IN
7185: IFFALSE 7219
// if not IsInUnit ( i ) then
7187: LD_VAR 0 9
7191: PPUSH
7192: CALL_OW 310
7196: NOT
7197: IFFALSE 7217
// ComEnterUnit ( i , lab [ 1 ] ) ;
7199: LD_VAR 0 9
7203: PPUSH
7204: LD_VAR 0 12
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PPUSH
7213: CALL_OW 120
7217: GO 7184
7219: POP
7220: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
7221: LD_ADDR_VAR 0 13
7225: PUSH
7226: LD_VAR 0 5
7230: PPUSH
7231: LD_INT 25
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 72
7245: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
7246: LD_ADDR_VAR 0 33
7250: PUSH
7251: LD_EXP 34
7255: ST_TO_ADDR
// if eng then
7256: LD_VAR 0 13
7260: IFFALSE 8094
// begin for i in eng do
7262: LD_ADDR_VAR 0 9
7266: PUSH
7267: LD_VAR 0 13
7271: PUSH
7272: FOR_IN
7273: IFFALSE 8092
// begin tag := GetTag ( i ) ;
7275: LD_ADDR_VAR 0 15
7279: PUSH
7280: LD_VAR 0 9
7284: PPUSH
7285: CALL_OW 110
7289: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
7290: LD_VAR 0 9
7294: PPUSH
7295: LD_VAR 0 4
7299: PPUSH
7300: CALL_OW 308
7304: IFFALSE 7335
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
7306: LD_VAR 0 9
7310: PPUSH
7311: LD_VAR 0 7
7315: PUSH
7316: LD_INT 1
7318: ARRAY
7319: PPUSH
7320: LD_VAR 0 7
7324: PUSH
7325: LD_INT 2
7327: ARRAY
7328: PPUSH
7329: CALL_OW 111
// continue ;
7333: GO 7272
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
7335: LD_VAR 0 9
7339: PPUSH
7340: CALL_OW 256
7344: PUSH
7345: LD_INT 800
7347: LESS
7348: PUSH
7349: LD_VAR 0 15
7353: PUSH
7354: LD_INT 1
7356: NONEQUAL
7357: AND
7358: IFFALSE 7408
// begin SetTag ( i , tHeal ) ;
7360: LD_VAR 0 9
7364: PPUSH
7365: LD_INT 1
7367: PPUSH
7368: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
7372: LD_VAR 0 9
7376: PPUSH
7377: LD_VAR 0 6
7381: PUSH
7382: LD_INT 1
7384: ARRAY
7385: PPUSH
7386: LD_VAR 0 6
7390: PUSH
7391: LD_INT 2
7393: ARRAY
7394: PPUSH
7395: CALL_OW 111
// AddComHold ( i ) ;
7399: LD_VAR 0 9
7403: PPUSH
7404: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7408: LD_VAR 0 15
7412: PUSH
7413: LD_INT 1
7415: EQUAL
7416: PUSH
7417: LD_VAR 0 9
7421: PPUSH
7422: CALL_OW 256
7426: PUSH
7427: LD_INT 1000
7429: EQUAL
7430: AND
7431: IFFALSE 7445
// SetTag ( i , 0 ) ;
7433: LD_VAR 0 9
7437: PPUSH
7438: LD_INT 0
7440: PPUSH
7441: CALL_OW 109
// if not tag then
7445: LD_VAR 0 15
7449: NOT
7450: IFFALSE 7617
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
7452: LD_ADDR_VAR 0 11
7456: PUSH
7457: LD_VAR 0 3
7461: PPUSH
7462: LD_INT 57
7464: PUSH
7465: EMPTY
7466: LIST
7467: PPUSH
7468: CALL_OW 70
7472: ST_TO_ADDR
// if undone then
7473: LD_VAR 0 11
7477: IFFALSE 7499
// begin ComComplete ( i , undone [ 1 ] ) ;
7479: LD_VAR 0 9
7483: PPUSH
7484: LD_VAR 0 11
7488: PUSH
7489: LD_INT 1
7491: ARRAY
7492: PPUSH
7493: CALL 49923 0 2
// continue ;
7497: GO 7272
// end ; if cr or tmp or buildingsToBuild then
7499: LD_VAR 0 17
7503: PUSH
7504: LD_VAR 0 10
7508: OR
7509: PUSH
7510: LD_VAR 0 33
7514: OR
7515: IFFALSE 7591
// begin if IsInUnit ( i ) then
7517: LD_VAR 0 9
7521: PPUSH
7522: CALL_OW 310
7526: IFFALSE 7537
// ComExitBuilding ( i ) ;
7528: LD_VAR 0 9
7532: PPUSH
7533: CALL_OW 122
// if tmp then
7537: LD_VAR 0 10
7541: IFFALSE 7557
// SetTag ( i , tRepair ) else
7543: LD_VAR 0 9
7547: PPUSH
7548: LD_INT 3
7550: PPUSH
7551: CALL_OW 109
7555: GO 7589
// if cr then
7557: LD_VAR 0 17
7561: IFFALSE 7577
// SetTag ( i , tCrates ) else
7563: LD_VAR 0 9
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 109
7575: GO 7589
// SetTag ( i , tBuild ) ;
7577: LD_VAR 0 9
7581: PPUSH
7582: LD_INT 5
7584: PPUSH
7585: CALL_OW 109
// end else
7589: GO 7617
// if not IsInUnit ( i ) then
7591: LD_VAR 0 9
7595: PPUSH
7596: CALL_OW 310
7600: NOT
7601: IFFALSE 7617
// ComEnterUnit ( i , depot ) ;
7603: LD_VAR 0 9
7607: PPUSH
7608: LD_VAR 0 32
7612: PPUSH
7613: CALL_OW 120
// end ; if tag = tRepair then
7617: LD_VAR 0 15
7621: PUSH
7622: LD_INT 3
7624: EQUAL
7625: IFFALSE 7731
// begin if IsInUnit ( i ) then
7627: LD_VAR 0 9
7631: PPUSH
7632: CALL_OW 310
7636: IFFALSE 7649
// begin ComExitBuilding ( i ) ;
7638: LD_VAR 0 9
7642: PPUSH
7643: CALL_OW 122
// continue ;
7647: GO 7272
// end ; if not tmp then
7649: LD_VAR 0 10
7653: NOT
7654: IFFALSE 7670
// begin SetTag ( i , 0 ) ;
7656: LD_VAR 0 9
7660: PPUSH
7661: LD_INT 0
7663: PPUSH
7664: CALL_OW 109
// continue ;
7668: GO 7272
// end ; if not HasTask ( i ) then
7670: LD_VAR 0 9
7674: PPUSH
7675: CALL_OW 314
7679: NOT
7680: IFFALSE 7700
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
7682: LD_VAR 0 9
7686: PPUSH
7687: LD_VAR 0 10
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: PPUSH
7696: CALL_OW 130
// if not IsInarea ( i , area ) then
7700: LD_VAR 0 9
7704: PPUSH
7705: LD_VAR 0 3
7709: PPUSH
7710: CALL_OW 308
7714: NOT
7715: IFFALSE 7731
// ComMoveToarea ( i , area ) ;
7717: LD_VAR 0 9
7721: PPUSH
7722: LD_VAR 0 3
7726: PPUSH
7727: CALL_OW 113
// end ; if tag = tBuild then
7731: LD_VAR 0 15
7735: PUSH
7736: LD_INT 5
7738: EQUAL
7739: IFFALSE 7945
// begin if IsInUnit ( i ) then
7741: LD_VAR 0 9
7745: PPUSH
7746: CALL_OW 310
7750: IFFALSE 7763
// begin ComExitBuilding ( i ) ;
7752: LD_VAR 0 9
7756: PPUSH
7757: CALL_OW 122
// continue ;
7761: GO 7272
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
7763: LD_VAR 0 33
7767: NOT
7768: PUSH
7769: LD_VAR 0 22
7773: OR
7774: PUSH
7775: LD_VAR 0 23
7779: OR
7780: IFFALSE 7798
// begin SetTag ( i , 0 ) ;
7782: LD_VAR 0 9
7786: PPUSH
7787: LD_INT 0
7789: PPUSH
7790: CALL_OW 109
// continue ;
7794: GO 7272
// end else
7796: GO 7837
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7798: LD_VAR 0 32
7802: PPUSH
7803: LD_VAR 0 33
7807: PUSH
7808: LD_INT 1
7810: ARRAY
7811: PUSH
7812: LD_INT 1
7814: ARRAY
7815: PPUSH
7816: CALL 83333 0 2
7820: NOT
7821: IFFALSE 7837
// begin SetTag ( i , 0 ) ;
7823: LD_VAR 0 9
7827: PPUSH
7828: LD_INT 0
7830: PPUSH
7831: CALL_OW 109
// continue ;
7835: GO 7272
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
7837: LD_ADDR_VAR 0 11
7841: PUSH
7842: LD_VAR 0 3
7846: PPUSH
7847: LD_INT 57
7849: PUSH
7850: EMPTY
7851: LIST
7852: PPUSH
7853: CALL_OW 70
7857: ST_TO_ADDR
// if undone then
7858: LD_VAR 0 11
7862: IFFALSE 7884
// begin ComComplete ( i , undone [ 1 ] ) ;
7864: LD_VAR 0 9
7868: PPUSH
7869: LD_VAR 0 11
7873: PUSH
7874: LD_INT 1
7876: ARRAY
7877: PPUSH
7878: CALL 49923 0 2
// continue ;
7882: GO 7272
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
7884: LD_VAR 0 9
7888: PPUSH
7889: LD_VAR 0 33
7893: PUSH
7894: LD_INT 1
7896: ARRAY
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PPUSH
7902: LD_VAR 0 33
7906: PUSH
7907: LD_INT 1
7909: ARRAY
7910: PUSH
7911: LD_INT 2
7913: ARRAY
7914: PPUSH
7915: LD_VAR 0 33
7919: PUSH
7920: LD_INT 1
7922: ARRAY
7923: PUSH
7924: LD_INT 3
7926: ARRAY
7927: PPUSH
7928: LD_VAR 0 33
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PUSH
7937: LD_INT 4
7939: ARRAY
7940: PPUSH
7941: CALL_OW 145
// end ; if tag = tCrates then
7945: LD_VAR 0 15
7949: PUSH
7950: LD_INT 2
7952: EQUAL
7953: IFFALSE 8090
// begin if IsInUnit ( i ) then
7955: LD_VAR 0 9
7959: PPUSH
7960: CALL_OW 310
7964: IFFALSE 7977
// begin ComExitBuilding ( i ) ;
7966: LD_VAR 0 9
7970: PPUSH
7971: CALL_OW 122
// continue ;
7975: GO 7272
// end ; if not cr then
7977: LD_VAR 0 17
7981: NOT
7982: IFFALSE 7998
// begin SetTag ( i , 0 ) ;
7984: LD_VAR 0 9
7988: PPUSH
7989: LD_INT 0
7991: PPUSH
7992: CALL_OW 109
// continue ;
7996: GO 7272
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
7998: LD_VAR 0 9
8002: PPUSH
8003: CALL_OW 314
8007: NOT
8008: PUSH
8009: LD_INT 81
8011: PUSH
8012: LD_VAR 0 1
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 92
8023: PUSH
8024: LD_VAR 0 17
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_VAR 0 17
8037: PUSH
8038: LD_INT 2
8040: ARRAY
8041: PUSH
8042: LD_INT 12
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: NOT
8060: AND
8061: IFFALSE 8090
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8063: LD_VAR 0 9
8067: PPUSH
8068: LD_VAR 0 17
8072: PUSH
8073: LD_INT 1
8075: ARRAY
8076: PPUSH
8077: LD_VAR 0 17
8081: PUSH
8082: LD_INT 2
8084: ARRAY
8085: PPUSH
8086: CALL_OW 117
// end ; end ;
8090: GO 7272
8092: POP
8093: POP
// end ; if vehicles then
8094: LD_VAR 0 26
8098: IFFALSE 8898
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8100: LD_ADDR_VAR 0 26
8104: PUSH
8105: LD_VAR 0 26
8109: PPUSH
8110: LD_INT 3
8112: PUSH
8113: LD_INT 2
8115: PUSH
8116: LD_INT 34
8118: PUSH
8119: LD_INT 13
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 34
8128: PUSH
8129: LD_INT 12
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 50
8147: PUSH
8148: EMPTY
8149: LIST
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PPUSH
8155: CALL_OW 72
8159: ST_TO_ADDR
// if vehicles then
8160: LD_VAR 0 26
8164: IFFALSE 8898
// begin for i in vehicles do
8166: LD_ADDR_VAR 0 9
8170: PUSH
8171: LD_VAR 0 26
8175: PUSH
8176: FOR_IN
8177: IFFALSE 8896
// begin tag := GetTag ( i ) ;
8179: LD_ADDR_VAR 0 15
8183: PUSH
8184: LD_VAR 0 9
8188: PPUSH
8189: CALL_OW 110
8193: ST_TO_ADDR
// if not tag then
8194: LD_VAR 0 15
8198: NOT
8199: IFFALSE 8345
// begin if GetControl ( i ) = control_manual then
8201: LD_VAR 0 9
8205: PPUSH
8206: CALL_OW 263
8210: PUSH
8211: LD_INT 1
8213: EQUAL
8214: IFFALSE 8331
// begin drivers := amDrivers ;
8216: LD_ADDR_VAR 0 24
8220: PUSH
8221: LD_EXP 37
8225: ST_TO_ADDR
// if not drivers then
8226: LD_VAR 0 24
8230: NOT
8231: IFFALSE 8311
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
8233: LD_ADDR_VAR 0 24
8237: PUSH
8238: LD_VAR 0 14
8242: PPUSH
8243: LD_INT 3
8245: PUSH
8246: LD_INT 120
8248: PUSH
8249: LD_INT 7
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PPUSH
8260: CALL_OW 72
8264: ST_TO_ADDR
// if drivers then
8265: LD_VAR 0 24
8269: IFFALSE 8311
// begin SetTag ( drivers [ 1 ] , tMech ) ;
8271: LD_VAR 0 24
8275: PUSH
8276: LD_INT 1
8278: ARRAY
8279: PPUSH
8280: LD_INT 7
8282: PPUSH
8283: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
8287: LD_ADDR_EXP 37
8291: PUSH
8292: LD_EXP 37
8296: PPUSH
8297: LD_VAR 0 24
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: CALL 79414 0 2
8310: ST_TO_ADDR
// end ; end ; if drivers then
8311: LD_VAR 0 24
8315: IFFALSE 8329
// SetTag ( i , tBusy ) ;
8317: LD_VAR 0 9
8321: PPUSH
8322: LD_INT 8
8324: PPUSH
8325: CALL_OW 109
// continue ;
8329: GO 8176
// end ; SetTag ( i , tBusy ) ;
8331: LD_VAR 0 9
8335: PPUSH
8336: LD_INT 8
8338: PPUSH
8339: CALL_OW 109
// end else
8343: GO 8894
// if tag = tBusy then
8345: LD_VAR 0 15
8349: PUSH
8350: LD_INT 8
8352: EQUAL
8353: IFFALSE 8565
// begin if GetLives ( i ) = 1000 then
8355: LD_VAR 0 9
8359: PPUSH
8360: CALL_OW 256
8364: PUSH
8365: LD_INT 1000
8367: EQUAL
8368: IFFALSE 8563
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
8370: LD_VAR 0 9
8374: PPUSH
8375: CALL_OW 263
8379: PUSH
8380: LD_INT 1
8382: EQUAL
8383: PUSH
8384: LD_VAR 0 9
8388: PPUSH
8389: CALL_OW 311
8393: NOT
8394: AND
8395: IFFALSE 8551
// begin drivers := amDrivers ;
8397: LD_ADDR_VAR 0 24
8401: PUSH
8402: LD_EXP 37
8406: ST_TO_ADDR
// if not drivers then
8407: LD_VAR 0 24
8411: NOT
8412: IFFALSE 8428
// begin SetTag ( i , 0 ) ;
8414: LD_VAR 0 9
8418: PPUSH
8419: LD_INT 0
8421: PPUSH
8422: CALL_OW 109
// continue ;
8426: GO 8176
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
8428: LD_VAR 0 24
8432: PUSH
8433: LD_INT 1
8435: ARRAY
8436: PPUSH
8437: CALL_OW 310
8441: PUSH
8442: LD_VAR 0 24
8446: PUSH
8447: LD_INT 1
8449: ARRAY
8450: PPUSH
8451: CALL 77018 0 1
8455: NOT
8456: AND
8457: IFFALSE 8472
// ComExitBuilding ( drivers [ 1 ] ) ;
8459: LD_VAR 0 24
8463: PUSH
8464: LD_INT 1
8466: ARRAY
8467: PPUSH
8468: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
8472: LD_VAR 0 26
8476: PPUSH
8477: LD_INT 120
8479: PUSH
8480: LD_INT 3
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 72
8491: PUSH
8492: LD_VAR 0 24
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PPUSH
8501: CALL_OW 314
8505: NOT
8506: AND
8507: PUSH
8508: LD_VAR 0 26
8512: PPUSH
8513: LD_INT 120
8515: PUSH
8516: LD_INT 3
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: NOT
8528: OR
8529: IFFALSE 8549
// ComEnterUnit ( drivers [ 1 ] , i ) ;
8531: LD_VAR 0 24
8535: PUSH
8536: LD_INT 1
8538: ARRAY
8539: PPUSH
8540: LD_VAR 0 9
8544: PPUSH
8545: CALL_OW 120
// continue ;
8549: GO 8176
// end ; SetTag ( i , tAttack ) ;
8551: LD_VAR 0 9
8555: PPUSH
8556: LD_INT 13
8558: PPUSH
8559: CALL_OW 109
// end ; end else
8563: GO 8894
// if tag = tAttack then
8565: LD_VAR 0 15
8569: PUSH
8570: LD_INT 13
8572: EQUAL
8573: IFFALSE 8753
// begin enemy := enemyInBase ;
8575: LD_ADDR_VAR 0 21
8579: PUSH
8580: LD_VAR 0 22
8584: ST_TO_ADDR
// if not enemy then
8585: LD_VAR 0 21
8589: NOT
8590: IFFALSE 8602
// enemy := enemyOuterBase ;
8592: LD_ADDR_VAR 0 21
8596: PUSH
8597: LD_VAR 0 23
8601: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8602: LD_VAR 0 21
8606: NOT
8607: PUSH
8608: LD_VAR 0 9
8612: PPUSH
8613: LD_VAR 0 7
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 7
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: CALL_OW 297
8635: PUSH
8636: LD_INT 10
8638: GREATER
8639: AND
8640: IFFALSE 8671
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8642: LD_VAR 0 9
8646: PPUSH
8647: LD_VAR 0 7
8651: PUSH
8652: LD_INT 1
8654: ARRAY
8655: PPUSH
8656: LD_VAR 0 7
8660: PUSH
8661: LD_INT 2
8663: ARRAY
8664: PPUSH
8665: CALL_OW 111
// continue ;
8669: GO 8176
// end ; if GetLives ( i ) < 650 then
8671: LD_VAR 0 9
8675: PPUSH
8676: CALL_OW 256
8680: PUSH
8681: LD_INT 650
8683: LESS
8684: IFFALSE 8727
// begin SetTag ( i , tVehRepair ) ;
8686: LD_VAR 0 9
8690: PPUSH
8691: LD_INT 9
8693: PPUSH
8694: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8698: LD_VAR 0 9
8702: PPUSH
8703: LD_VAR 0 7
8707: PUSH
8708: LD_INT 1
8710: ARRAY
8711: PPUSH
8712: LD_VAR 0 7
8716: PUSH
8717: LD_INT 2
8719: ARRAY
8720: PPUSH
8721: CALL_OW 111
// continue ;
8725: GO 8176
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8727: LD_VAR 0 9
8731: PPUSH
8732: LD_VAR 0 21
8736: PPUSH
8737: LD_VAR 0 9
8741: PPUSH
8742: CALL_OW 74
8746: PPUSH
8747: CALL_OW 115
// end else
8751: GO 8894
// if tag = tVehRepair then
8753: LD_VAR 0 15
8757: PUSH
8758: LD_INT 9
8760: EQUAL
8761: IFFALSE 8894
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8763: LD_VAR 0 9
8767: PPUSH
8768: LD_VAR 0 7
8772: PUSH
8773: LD_INT 1
8775: ARRAY
8776: PPUSH
8777: LD_VAR 0 7
8781: PUSH
8782: LD_INT 2
8784: ARRAY
8785: PPUSH
8786: CALL_OW 297
8790: PUSH
8791: LD_INT 10
8793: GREATER
8794: IFFALSE 8825
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8796: LD_VAR 0 9
8800: PPUSH
8801: LD_VAR 0 7
8805: PUSH
8806: LD_INT 1
8808: ARRAY
8809: PPUSH
8810: LD_VAR 0 7
8814: PUSH
8815: LD_INT 2
8817: ARRAY
8818: PPUSH
8819: CALL_OW 111
// continue ;
8823: GO 8176
// end ; if GetLives ( i ) = 1000 then
8825: LD_VAR 0 9
8829: PPUSH
8830: CALL_OW 256
8834: PUSH
8835: LD_INT 1000
8837: EQUAL
8838: IFFALSE 8854
// begin SetTag ( i , tBusy ) ;
8840: LD_VAR 0 9
8844: PPUSH
8845: LD_INT 8
8847: PPUSH
8848: CALL_OW 109
// continue ;
8852: GO 8176
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
8854: LD_VAR 0 9
8858: PPUSH
8859: CALL_OW 263
8863: PUSH
8864: LD_INT 1
8866: EQUAL
8867: PUSH
8868: LD_VAR 0 9
8872: PPUSH
8873: CALL_OW 311
8877: AND
8878: IFFALSE 8894
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
8880: LD_VAR 0 9
8884: PPUSH
8885: CALL_OW 311
8889: PPUSH
8890: CALL 81114 0 1
// end ; end ;
8894: GO 8176
8896: POP
8897: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8898: LD_ADDR_VAR 0 19
8902: PUSH
8903: LD_VAR 0 5
8907: PPUSH
8908: LD_INT 2
8910: PUSH
8911: LD_INT 25
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 25
8923: PUSH
8924: LD_INT 8
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 25
8933: PUSH
8934: LD_INT 5
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 25
8943: PUSH
8944: LD_INT 9
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 50
8960: PUSH
8961: EMPTY
8962: LIST
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 72
8972: ST_TO_ADDR
// if sol then
8973: LD_VAR 0 19
8977: IFFALSE 9485
// begin if enemyInBase then
8979: LD_VAR 0 22
8983: IFFALSE 9162
// begin for i in sol do
8985: LD_ADDR_VAR 0 9
8989: PUSH
8990: LD_VAR 0 19
8994: PUSH
8995: FOR_IN
8996: IFFALSE 9158
// begin tw := IsInUnit ( i ) ;
8998: LD_ADDR_VAR 0 16
9002: PUSH
9003: LD_VAR 0 9
9007: PPUSH
9008: CALL_OW 310
9012: ST_TO_ADDR
// if tw then
9013: LD_VAR 0 16
9017: IFFALSE 9100
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9019: LD_VAR 0 16
9023: PUSH
9024: LD_INT 22
9026: PUSH
9027: LD_VAR 0 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 101
9038: PUSH
9039: LD_VAR 0 34
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 2
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 32
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 30
9063: PUSH
9064: LD_INT 31
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 69
9085: IN
9086: NOT
9087: IFFALSE 9098
// ComExitBuilding ( i ) ;
9089: LD_VAR 0 9
9093: PPUSH
9094: CALL_OW 122
// end else
9098: GO 9156
// if IsInarea ( i , area ) then
9100: LD_VAR 0 9
9104: PPUSH
9105: LD_VAR 0 3
9109: PPUSH
9110: CALL_OW 308
9114: IFFALSE 9142
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9116: LD_VAR 0 9
9120: PPUSH
9121: LD_VAR 0 22
9125: PPUSH
9126: LD_VAR 0 9
9130: PPUSH
9131: CALL_OW 74
9135: PPUSH
9136: CALL_OW 115
9140: GO 9156
// ComMoveToarea ( i , area ) ;
9142: LD_VAR 0 9
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: CALL_OW 113
// end ;
9156: GO 8995
9158: POP
9159: POP
// end else
9160: GO 9485
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9162: LD_ADDR_VAR 0 28
9166: PUSH
9167: LD_VAR 0 3
9171: PPUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 62
9177: PUSH
9178: EMPTY
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 2
9187: PUSH
9188: LD_INT 30
9190: PUSH
9191: LD_INT 32
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 30
9200: PUSH
9201: LD_INT 4
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 30
9210: PUSH
9211: LD_INT 5
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 30
9220: PUSH
9221: LD_INT 31
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PPUSH
9239: CALL_OW 70
9243: ST_TO_ADDR
// if empty then
9244: LD_VAR 0 28
9248: IFFALSE 9265
// empty := ReverseArray ( empty ) ;
9250: LD_ADDR_VAR 0 28
9254: PUSH
9255: LD_VAR 0 28
9259: PPUSH
9260: CALL 74701 0 1
9264: ST_TO_ADDR
// for i in sol do
9265: LD_ADDR_VAR 0 9
9269: PUSH
9270: LD_VAR 0 19
9274: PUSH
9275: FOR_IN
9276: IFFALSE 9483
// begin tag := GetTag ( i ) ;
9278: LD_ADDR_VAR 0 15
9282: PUSH
9283: LD_VAR 0 9
9287: PPUSH
9288: CALL_OW 110
9292: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9293: LD_VAR 0 9
9297: PPUSH
9298: CALL_OW 256
9302: PUSH
9303: LD_INT 1000
9305: LESS
9306: PUSH
9307: LD_VAR 0 15
9311: PUSH
9312: LD_INT 1
9314: NONEQUAL
9315: AND
9316: IFFALSE 9368
// begin SetTag ( i , tHeal ) ;
9318: LD_VAR 0 9
9322: PPUSH
9323: LD_INT 1
9325: PPUSH
9326: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9330: LD_VAR 0 9
9334: PPUSH
9335: LD_VAR 0 6
9339: PUSH
9340: LD_INT 1
9342: ARRAY
9343: PPUSH
9344: LD_VAR 0 6
9348: PUSH
9349: LD_INT 2
9351: ARRAY
9352: PPUSH
9353: CALL_OW 111
// AddComHold ( i ) ;
9357: LD_VAR 0 9
9361: PPUSH
9362: CALL_OW 200
// continue ;
9366: GO 9275
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9368: LD_VAR 0 9
9372: PPUSH
9373: CALL_OW 256
9377: PUSH
9378: LD_INT 1000
9380: EQUAL
9381: PUSH
9382: LD_VAR 0 15
9386: PUSH
9387: LD_INT 1
9389: EQUAL
9390: AND
9391: IFFALSE 9407
// begin SetTag ( i , 0 ) ;
9393: LD_VAR 0 9
9397: PPUSH
9398: LD_INT 0
9400: PPUSH
9401: CALL_OW 109
// continue ;
9405: GO 9275
// end ; if HasTask ( i ) then
9407: LD_VAR 0 9
9411: PPUSH
9412: CALL_OW 314
9416: IFFALSE 9420
// continue ;
9418: GO 9275
// if not IsInUnit ( i ) and not tag and empty then
9420: LD_VAR 0 9
9424: PPUSH
9425: CALL_OW 310
9429: NOT
9430: PUSH
9431: LD_VAR 0 15
9435: NOT
9436: AND
9437: PUSH
9438: LD_VAR 0 28
9442: AND
9443: IFFALSE 9481
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9445: LD_VAR 0 9
9449: PPUSH
9450: LD_VAR 0 28
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9463: LD_ADDR_VAR 0 28
9467: PUSH
9468: LD_VAR 0 28
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 3
9480: ST_TO_ADDR
// end ; end ;
9481: GO 9275
9483: POP
9484: POP
// end ; end ; end ;
9485: LD_VAR 0 8
9489: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
9490: LD_EXP 39
9494: PPUSH
9495: LD_INT 50
9497: PUSH
9498: EMPTY
9499: LIST
9500: PPUSH
9501: CALL_OW 72
9505: IFFALSE 9558
9507: GO 9509
9509: DISABLE
// begin enable ;
9510: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
9511: LD_EXP 3
9515: PUSH
9516: LD_INT 1
9518: ARRAY
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: LD_INT 3
9525: PPUSH
9526: LD_INT 4
9528: PPUSH
9529: LD_EXP 39
9533: PPUSH
9534: LD_INT 27
9536: PUSH
9537: LD_INT 33
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PPUSH
9544: LD_INT 22
9546: PUSH
9547: LD_INT 17
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PPUSH
9554: CALL 5970 0 7
// end ;
9558: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 302
9566: PUSH
9567: LD_EXP 33
9571: NOT
9572: AND
9573: IFFALSE 9643
9575: GO 9577
9577: DISABLE
// begin enable ;
9578: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
9579: LD_ADDR_EXP 33
9583: PUSH
9584: LD_INT 3
9586: PUSH
9587: LD_INT 1
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: LD_INT 5
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 3
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: LD_INT 1
9610: PUSH
9611: LD_INT 4
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 4
9622: PUSH
9623: LD_INT 1
9625: PUSH
9626: LD_INT 1
9628: PUSH
9629: LD_INT 6
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: ST_TO_ADDR
// end ; end_of_file
9643: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
9644: LD_INT 0
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
9651: PPUSH
9652: PPUSH
9653: PPUSH
9654: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
9655: LD_ADDR_EXP 42
9659: PUSH
9660: LD_VAR 0 1
9664: PPUSH
9665: LD_INT 2
9667: PPUSH
9668: LD_INT 1
9670: PPUSH
9671: CALL 41786 0 3
9675: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
9676: LD_ADDR_EXP 43
9680: PUSH
9681: LD_INT 13
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: LD_INT 27
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 13
9701: PUSH
9702: LD_INT 1
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: LD_INT 27
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 1
9722: PUSH
9723: LD_INT 1
9725: PUSH
9726: LD_INT 26
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 13
9737: PUSH
9738: LD_INT 1
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: LD_INT 25
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 13
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: LD_INT 27
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: ST_TO_ADDR
// arBuildings := [ ] ;
9778: LD_ADDR_EXP 44
9782: PUSH
9783: EMPTY
9784: ST_TO_ADDR
// arVehicles := [ ] ;
9785: LD_ADDR_EXP 45
9789: PUSH
9790: EMPTY
9791: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
9792: LD_ADDR_EXP 46
9796: PUSH
9797: EMPTY
9798: ST_TO_ADDR
// arDrivers := [ ] ;
9799: LD_ADDR_EXP 47
9803: PUSH
9804: EMPTY
9805: ST_TO_ADDR
// arVehiclesCounter := 3 ;
9806: LD_ADDR_EXP 49
9810: PUSH
9811: LD_INT 3
9813: ST_TO_ADDR
// arMinesList := [ ] ;
9814: LD_ADDR_EXP 50
9818: PUSH
9819: EMPTY
9820: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
9821: LD_ADDR_EXP 48
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: LD_INT 11
9831: PUSH
9832: LD_INT 12
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_OWVAR 67
9844: ARRAY
9845: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
9846: LD_VAR 0 1
9850: PPUSH
9851: LD_INT 24
9853: PPUSH
9854: CALL 84349 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
9858: LD_INT 23
9860: PPUSH
9861: LD_INT 7
9863: PUSH
9864: LD_INT 9
9866: PUSH
9867: LD_INT 11
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: PUSH
9875: LD_OWVAR 67
9879: ARRAY
9880: PPUSH
9881: CALL 10446 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
9885: LD_ADDR_VAR 0 8
9889: PUSH
9890: LD_INT 3
9892: PUSH
9893: LD_INT 4
9895: PUSH
9896: LD_INT 5
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: LD_OWVAR 67
9908: ARRAY
9909: ST_TO_ADDR
// uc_side := side ;
9910: LD_ADDR_OWVAR 20
9914: PUSH
9915: LD_VAR 0 1
9919: ST_TO_ADDR
// uc_nation := 2 ;
9920: LD_ADDR_OWVAR 21
9924: PUSH
9925: LD_INT 2
9927: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
9928: LD_ADDR_EXP 51
9932: PUSH
9933: LD_INT 32
9935: PPUSH
9936: LD_INT 5
9938: PPUSH
9939: LD_STRING 
9941: PPUSH
9942: LD_VAR 0 8
9946: PPUSH
9947: LD_INT 800
9949: PUSH
9950: LD_INT 120
9952: PUSH
9953: LD_INT 0
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: LD_INT 10
9963: PUSH
9964: LD_INT 11
9966: PUSH
9967: LD_INT 12
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: PUSH
9975: LD_OWVAR 67
9979: ARRAY
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: LD_INT 6
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL 50384 0 6
10000: ST_TO_ADDR
// arForceTmp := [ ] ;
10001: LD_ADDR_EXP 52
10005: PUSH
10006: EMPTY
10007: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10008: LD_ADDR_VAR 0 3
10012: PUSH
10013: LD_INT 22
10015: PUSH
10016: LD_VAR 0 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 30
10027: PUSH
10028: LD_INT 31
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 3
10037: PUSH
10038: LD_INT 95
10040: PUSH
10041: LD_INT 5
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 58
10054: PUSH
10055: EMPTY
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 69
10068: PUSH
10069: FOR_IN
10070: IFFALSE 10199
// begin d := GetDir ( i ) ;
10072: LD_ADDR_VAR 0 4
10076: PUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: CALL_OW 254
10086: ST_TO_ADDR
// if d < 3 then
10087: LD_VAR 0 4
10091: PUSH
10092: LD_INT 3
10094: LESS
10095: IFFALSE 10113
// d := d + 3 else
10097: LD_ADDR_VAR 0 4
10101: PUSH
10102: LD_VAR 0 4
10106: PUSH
10107: LD_INT 3
10109: PLUS
10110: ST_TO_ADDR
10111: GO 10127
// d := d - 3 ;
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_VAR 0 4
10122: PUSH
10123: LD_INT 3
10125: MINUS
10126: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10127: LD_INT 0
10129: PPUSH
10130: LD_VAR 0 8
10134: PPUSH
10135: CALL_OW 381
// un := CreateHuman ;
10139: LD_ADDR_VAR 0 6
10143: PUSH
10144: CALL_OW 44
10148: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10149: LD_ADDR_EXP 52
10153: PUSH
10154: LD_EXP 52
10158: PPUSH
10159: LD_VAR 0 6
10163: PPUSH
10164: CALL 79414 0 2
10168: ST_TO_ADDR
// SetDir ( un , d ) ;
10169: LD_VAR 0 6
10173: PPUSH
10174: LD_VAR 0 4
10178: PPUSH
10179: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
10183: LD_VAR 0 6
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: CALL_OW 52
// end ;
10197: GO 10069
10199: POP
10200: POP
// for i := 1 to Difficulty do
10201: LD_ADDR_VAR 0 3
10205: PUSH
10206: DOUBLE
10207: LD_INT 1
10209: DEC
10210: ST_TO_ADDR
10211: LD_OWVAR 67
10215: PUSH
10216: FOR_TO
10217: IFFALSE 10283
// begin PrepareSoldier ( false , skill ) ;
10219: LD_INT 0
10221: PPUSH
10222: LD_VAR 0 8
10226: PPUSH
10227: CALL_OW 381
// un := CreateHuman ;
10231: LD_ADDR_VAR 0 6
10235: PUSH
10236: CALL_OW 44
10240: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10241: LD_ADDR_EXP 52
10245: PUSH
10246: LD_EXP 52
10250: PPUSH
10251: LD_VAR 0 6
10255: PPUSH
10256: CALL 79414 0 2
10260: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
10261: LD_VAR 0 6
10265: PPUSH
10266: LD_INT 215
10268: PPUSH
10269: LD_INT 102
10271: PPUSH
10272: CALL_OW 428
10276: PPUSH
10277: CALL_OW 52
// end ;
10281: GO 10216
10283: POP
10284: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
10285: LD_ADDR_VAR 0 3
10289: PUSH
10290: LD_INT 22
10292: PUSH
10293: LD_VAR 0 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: PUSH
10321: FOR_IN
10322: IFFALSE 10355
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
10324: LD_VAR 0 3
10328: PPUSH
10329: LD_INT 3
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: LD_INT 7
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: PUSH
10343: LD_OWVAR 67
10347: ARRAY
10348: PPUSH
10349: CALL_OW 241
10353: GO 10321
10355: POP
10356: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10357: LD_ADDR_VAR 0 3
10361: PUSH
10362: LD_INT 22
10364: PUSH
10365: LD_VAR 0 1
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 30
10376: PUSH
10377: LD_INT 32
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PUSH
10393: FOR_IN
10394: IFFALSE 10439
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 27
10403: PUSH
10404: LD_INT 25
10406: PUSH
10407: LD_INT 24
10409: PUSH
10410: LD_INT 27
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: PUSH
10419: LD_VAR 0 3
10423: PUSH
10424: LD_INT 4
10426: MOD
10427: PUSH
10428: LD_INT 1
10430: PLUS
10431: ARRAY
10432: PPUSH
10433: CALL_OW 431
10437: GO 10393
10439: POP
10440: POP
// end ;
10441: LD_VAR 0 2
10445: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
10446: LD_INT 0
10448: PPUSH
10449: PPUSH
10450: PPUSH
10451: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10452: LD_ADDR_VAR 0 5
10456: PUSH
10457: LD_VAR 0 1
10461: PPUSH
10462: LD_INT 0
10464: PPUSH
10465: CALL_OW 517
10469: ST_TO_ADDR
// if not tmp then
10470: LD_VAR 0 5
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 10721
// for i := 1 to n do
10479: LD_ADDR_VAR 0 4
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_VAR 0 2
10493: PUSH
10494: FOR_TO
10495: IFFALSE 10719
// begin r := rand ( 1 , tmp [ 1 ] ) ;
10497: LD_ADDR_VAR 0 6
10501: PUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_VAR 0 5
10509: PUSH
10510: LD_INT 1
10512: ARRAY
10513: PPUSH
10514: CALL_OW 12
10518: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
10519: LD_VAR 0 5
10523: PUSH
10524: LD_INT 1
10526: ARRAY
10527: PUSH
10528: LD_VAR 0 6
10532: ARRAY
10533: PPUSH
10534: LD_VAR 0 5
10538: PUSH
10539: LD_INT 2
10541: ARRAY
10542: PUSH
10543: LD_VAR 0 6
10547: ARRAY
10548: PPUSH
10549: LD_EXP 3
10553: PUSH
10554: LD_INT 2
10556: ARRAY
10557: PPUSH
10558: LD_INT 0
10560: PPUSH
10561: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
10565: LD_ADDR_EXP 50
10569: PUSH
10570: LD_EXP 50
10574: PPUSH
10575: LD_EXP 50
10579: PUSH
10580: LD_INT 1
10582: PLUS
10583: PPUSH
10584: LD_VAR 0 5
10588: PUSH
10589: LD_INT 1
10591: ARRAY
10592: PUSH
10593: LD_VAR 0 6
10597: ARRAY
10598: PPUSH
10599: CALL_OW 2
10603: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
10604: LD_ADDR_EXP 50
10608: PUSH
10609: LD_EXP 50
10613: PPUSH
10614: LD_EXP 50
10618: PUSH
10619: LD_INT 1
10621: PLUS
10622: PPUSH
10623: LD_VAR 0 5
10627: PUSH
10628: LD_INT 2
10630: ARRAY
10631: PUSH
10632: LD_VAR 0 6
10636: ARRAY
10637: PPUSH
10638: CALL_OW 2
10642: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
10643: LD_ADDR_VAR 0 5
10647: PUSH
10648: LD_VAR 0 5
10652: PPUSH
10653: LD_INT 1
10655: PPUSH
10656: LD_VAR 0 5
10660: PUSH
10661: LD_INT 1
10663: ARRAY
10664: PPUSH
10665: LD_VAR 0 6
10669: PPUSH
10670: CALL_OW 3
10674: PPUSH
10675: CALL_OW 1
10679: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
10680: LD_ADDR_VAR 0 5
10684: PUSH
10685: LD_VAR 0 5
10689: PPUSH
10690: LD_INT 2
10692: PPUSH
10693: LD_VAR 0 5
10697: PUSH
10698: LD_INT 2
10700: ARRAY
10701: PPUSH
10702: LD_VAR 0 6
10706: PPUSH
10707: CALL_OW 3
10711: PPUSH
10712: CALL_OW 1
10716: ST_TO_ADDR
// end ;
10717: GO 10494
10719: POP
10720: POP
// end ;
10721: LD_VAR 0 3
10725: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
10726: LD_INT 0
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
10735: PPUSH
10736: PPUSH
10737: PPUSH
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
// enable ;
10755: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
10756: LD_ADDR_VAR 0 10
10760: PUSH
10761: LD_INT 81
10763: PUSH
10764: LD_VAR 0 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: ST_TO_ADDR
// if tmp then
10778: LD_VAR 0 10
10782: IFFALSE 10803
// enemySide := GetSide ( tmp [ 1 ] ) ;
10784: LD_ADDR_VAR 0 34
10788: PUSH
10789: LD_VAR 0 10
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 255
10802: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10803: LD_ADDR_VAR 0 22
10807: PUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: LD_INT 81
10815: PUSH
10816: LD_VAR 0 1
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 70
10829: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
10830: LD_ADDR_VAR 0 23
10834: PUSH
10835: LD_VAR 0 4
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 70
10856: ST_TO_ADDR
// vehicles := arVehicles ;
10857: LD_ADDR_VAR 0 26
10861: PUSH
10862: LD_EXP 45
10866: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10867: LD_ADDR_VAR 0 32
10871: PUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_INT 22
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 30
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 30
10904: PUSH
10905: LD_INT 1
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 70
10925: ST_TO_ADDR
// if depot then
10926: LD_VAR 0 32
10930: IFFALSE 10946
// depot := depot [ 1 ] ;
10932: LD_ADDR_VAR 0 32
10936: PUSH
10937: LD_VAR 0 32
10941: PUSH
10942: LD_INT 1
10944: ARRAY
10945: ST_TO_ADDR
// if arTech then
10946: LD_EXP 42
10950: IFFALSE 11109
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10952: LD_ADDR_VAR 0 12
10956: PUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: LD_INT 22
10964: PUSH
10965: LD_VAR 0 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 50
10976: PUSH
10977: EMPTY
10978: LIST
10979: PUSH
10980: LD_INT 2
10982: PUSH
10983: LD_INT 30
10985: PUSH
10986: LD_INT 6
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 30
10995: PUSH
10996: LD_INT 7
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 30
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: PPUSH
11024: CALL_OW 70
11028: ST_TO_ADDR
// if lab then
11029: LD_VAR 0 12
11033: IFFALSE 11109
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11035: LD_VAR 0 12
11039: PUSH
11040: LD_INT 1
11042: ARRAY
11043: PPUSH
11044: CALL_OW 461
11048: PUSH
11049: LD_INT 2
11051: EQUAL
11052: IFFALSE 11109
// begin for i in arTech do
11054: LD_ADDR_VAR 0 9
11058: PUSH
11059: LD_EXP 42
11063: PUSH
11064: FOR_IN
11065: IFFALSE 11107
// if CanBeResearched ( lab [ 1 ] , i ) then
11067: LD_VAR 0 12
11071: PUSH
11072: LD_INT 1
11074: ARRAY
11075: PPUSH
11076: LD_VAR 0 9
11080: PPUSH
11081: CALL_OW 430
11085: IFFALSE 11105
// begin AddComResearch ( lab [ 1 ] , i ) ;
11087: LD_VAR 0 12
11091: PUSH
11092: LD_INT 1
11094: ARRAY
11095: PPUSH
11096: LD_VAR 0 9
11100: PPUSH
11101: CALL_OW 184
// end ;
11105: GO 11064
11107: POP
11108: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11109: LD_ADDR_VAR 0 29
11113: PUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 22
11121: PUSH
11122: LD_VAR 0 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 30
11133: PUSH
11134: LD_INT 3
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 50
11143: PUSH
11144: EMPTY
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: PPUSH
11152: CALL_OW 70
11156: ST_TO_ADDR
// if fac then
11157: LD_VAR 0 29
11161: IFFALSE 11496
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
11163: LD_VAR 0 29
11167: PUSH
11168: LD_INT 1
11170: ARRAY
11171: PPUSH
11172: CALL_OW 461
11176: PUSH
11177: LD_INT 2
11179: EQUAL
11180: IFFALSE 11496
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
11182: LD_ADDR_VAR 0 30
11186: PUSH
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 2
11194: PUSH
11195: LD_INT 30
11197: PUSH
11198: LD_INT 32
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 30
11207: PUSH
11208: LD_INT 33
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 35
11222: PUSH
11223: LD_INT 0
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 70
11238: ST_TO_ADDR
// if emptyTowers then
11239: LD_VAR 0 30
11243: IFFALSE 11293
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
11245: LD_ADDR_VAR 0 31
11249: PUSH
11250: LD_VAR 0 30
11254: PUSH
11255: LD_INT 1
11257: ARRAY
11258: PPUSH
11259: LD_VAR 0 3
11263: PPUSH
11264: CALL 52070 0 2
11268: ST_TO_ADDR
// if weapon then
11269: LD_VAR 0 31
11273: IFFALSE 11293
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
11275: LD_VAR 0 30
11279: PUSH
11280: LD_INT 1
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 31
11288: PPUSH
11289: CALL_OW 148
// end ; if arConstructList then
11293: LD_EXP 43
11297: IFFALSE 11496
// for i := 1 to Count ( arConstructList ) do
11299: LD_ADDR_VAR 0 9
11303: PUSH
11304: DOUBLE
11305: LD_INT 1
11307: DEC
11308: ST_TO_ADDR
11309: LD_EXP 43
11313: PPUSH
11314: CALL 43825 0 1
11318: PUSH
11319: FOR_TO
11320: IFFALSE 11494
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
11322: LD_VAR 0 29
11326: PUSH
11327: LD_INT 1
11329: ARRAY
11330: PPUSH
11331: LD_EXP 43
11335: PUSH
11336: LD_VAR 0 9
11340: ARRAY
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: PPUSH
11346: LD_EXP 43
11350: PUSH
11351: LD_VAR 0 9
11355: ARRAY
11356: PUSH
11357: LD_INT 2
11359: ARRAY
11360: PPUSH
11361: LD_EXP 43
11365: PUSH
11366: LD_VAR 0 9
11370: ARRAY
11371: PUSH
11372: LD_INT 3
11374: ARRAY
11375: PPUSH
11376: LD_EXP 43
11380: PUSH
11381: LD_VAR 0 9
11385: ARRAY
11386: PUSH
11387: LD_INT 4
11389: ARRAY
11390: PPUSH
11391: CALL_OW 448
11395: IFFALSE 11492
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
11397: LD_VAR 0 29
11401: PUSH
11402: LD_INT 1
11404: ARRAY
11405: PPUSH
11406: LD_EXP 43
11410: PUSH
11411: LD_VAR 0 9
11415: ARRAY
11416: PUSH
11417: LD_INT 1
11419: ARRAY
11420: PPUSH
11421: LD_EXP 43
11425: PUSH
11426: LD_VAR 0 9
11430: ARRAY
11431: PUSH
11432: LD_INT 2
11434: ARRAY
11435: PPUSH
11436: LD_EXP 43
11440: PUSH
11441: LD_VAR 0 9
11445: ARRAY
11446: PUSH
11447: LD_INT 3
11449: ARRAY
11450: PPUSH
11451: LD_EXP 43
11455: PUSH
11456: LD_VAR 0 9
11460: ARRAY
11461: PUSH
11462: LD_INT 4
11464: ARRAY
11465: PPUSH
11466: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
11470: LD_ADDR_EXP 43
11474: PUSH
11475: LD_EXP 43
11479: PPUSH
11480: LD_VAR 0 9
11484: PPUSH
11485: CALL_OW 3
11489: ST_TO_ADDR
// break ;
11490: GO 11494
// end ; end ;
11492: GO 11319
11494: POP
11495: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11496: LD_ADDR_VAR 0 10
11500: PUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 21
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: LD_INT 57
11521: PUSH
11522: EMPTY
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 3
11531: PUSH
11532: LD_INT 24
11534: PUSH
11535: LD_INT 1000
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 70
11555: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
11556: LD_ADDR_VAR 0 17
11560: PUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: CALL_OW 435
11570: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
11571: LD_ADDR_VAR 0 14
11575: PUSH
11576: LD_VAR 0 5
11580: PPUSH
11581: LD_INT 25
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 50
11593: PUSH
11594: EMPTY
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL_OW 72
11605: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
11606: LD_VAR 0 14
11610: PPUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 120
11616: PUSH
11617: LD_INT 7
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 3
11630: PUSH
11631: LD_INT 54
11633: PUSH
11634: EMPTY
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 72
11649: PUSH
11650: LD_VAR 0 29
11654: PUSH
11655: LD_INT 1
11657: ARRAY
11658: PPUSH
11659: CALL_OW 302
11663: AND
11664: IFFALSE 11723
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
11666: LD_VAR 0 14
11670: PPUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 120
11676: PUSH
11677: LD_INT 7
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 54
11693: PUSH
11694: EMPTY
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PPUSH
11705: CALL_OW 72
11709: PPUSH
11710: LD_VAR 0 29
11714: PUSH
11715: LD_INT 1
11717: ARRAY
11718: PPUSH
11719: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
11723: LD_ADDR_VAR 0 18
11727: PUSH
11728: LD_VAR 0 5
11732: PPUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 4
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 50
11745: PUSH
11746: EMPTY
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 72
11757: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
11758: LD_ADDR_VAR 0 12
11762: PUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_INT 2
11770: PUSH
11771: LD_INT 30
11773: PUSH
11774: LD_INT 6
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 30
11783: PUSH
11784: LD_INT 7
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 30
11793: PUSH
11794: LD_INT 8
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PPUSH
11807: CALL_OW 70
11811: ST_TO_ADDR
// if sci then
11812: LD_VAR 0 18
11816: IFFALSE 11977
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
11818: LD_ADDR_VAR 0 20
11822: PUSH
11823: LD_VAR 0 5
11827: PPUSH
11828: LD_INT 95
11830: PUSH
11831: LD_VAR 0 3
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 120
11842: PUSH
11843: LD_INT 1
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PPUSH
11854: CALL_OW 72
11858: ST_TO_ADDR
// if hurtUnits then
11859: LD_VAR 0 20
11863: IFFALSE 11924
// begin for i in sci do
11865: LD_ADDR_VAR 0 9
11869: PUSH
11870: LD_VAR 0 18
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11920
// if IsInUnit ( i ) then
11878: LD_VAR 0 9
11882: PPUSH
11883: CALL_OW 310
11887: IFFALSE 11900
// ComExitBuilding ( i ) else
11889: LD_VAR 0 9
11893: PPUSH
11894: CALL_OW 122
11898: GO 11918
// ComHeal ( i , hurtUnits [ 1 ] ) ;
11900: LD_VAR 0 9
11904: PPUSH
11905: LD_VAR 0 20
11909: PUSH
11910: LD_INT 1
11912: ARRAY
11913: PPUSH
11914: CALL_OW 128
11918: GO 11875
11920: POP
11921: POP
// end else
11922: GO 11977
// if lab then
11924: LD_VAR 0 12
11928: IFFALSE 11977
// begin for i in sci do
11930: LD_ADDR_VAR 0 9
11934: PUSH
11935: LD_VAR 0 18
11939: PUSH
11940: FOR_IN
11941: IFFALSE 11975
// if not IsInUnit ( i ) then
11943: LD_VAR 0 9
11947: PPUSH
11948: CALL_OW 310
11952: NOT
11953: IFFALSE 11973
// ComEnterUnit ( i , lab [ 1 ] ) ;
11955: LD_VAR 0 9
11959: PPUSH
11960: LD_VAR 0 12
11964: PUSH
11965: LD_INT 1
11967: ARRAY
11968: PPUSH
11969: CALL_OW 120
11973: GO 11940
11975: POP
11976: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
11977: LD_ADDR_VAR 0 13
11981: PUSH
11982: LD_VAR 0 5
11986: PPUSH
11987: LD_INT 25
11989: PUSH
11990: LD_INT 2
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PPUSH
11997: CALL_OW 72
12001: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12002: LD_ADDR_VAR 0 33
12006: PUSH
12007: LD_EXP 44
12011: ST_TO_ADDR
// if eng then
12012: LD_VAR 0 13
12016: IFFALSE 12850
// begin for i in eng do
12018: LD_ADDR_VAR 0 9
12022: PUSH
12023: LD_VAR 0 13
12027: PUSH
12028: FOR_IN
12029: IFFALSE 12848
// begin tag := GetTag ( i ) ;
12031: LD_ADDR_VAR 0 15
12035: PUSH
12036: LD_VAR 0 9
12040: PPUSH
12041: CALL_OW 110
12045: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12046: LD_VAR 0 9
12050: PPUSH
12051: LD_VAR 0 4
12055: PPUSH
12056: CALL_OW 308
12060: IFFALSE 12091
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12062: LD_VAR 0 9
12066: PPUSH
12067: LD_VAR 0 7
12071: PUSH
12072: LD_INT 1
12074: ARRAY
12075: PPUSH
12076: LD_VAR 0 7
12080: PUSH
12081: LD_INT 2
12083: ARRAY
12084: PPUSH
12085: CALL_OW 111
// continue ;
12089: GO 12028
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12091: LD_VAR 0 9
12095: PPUSH
12096: CALL_OW 256
12100: PUSH
12101: LD_INT 800
12103: LESS
12104: PUSH
12105: LD_VAR 0 15
12109: PUSH
12110: LD_INT 1
12112: NONEQUAL
12113: AND
12114: IFFALSE 12164
// begin SetTag ( i , tHeal ) ;
12116: LD_VAR 0 9
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12128: LD_VAR 0 9
12132: PPUSH
12133: LD_VAR 0 6
12137: PUSH
12138: LD_INT 1
12140: ARRAY
12141: PPUSH
12142: LD_VAR 0 6
12146: PUSH
12147: LD_INT 2
12149: ARRAY
12150: PPUSH
12151: CALL_OW 111
// AddComHold ( i ) ;
12155: LD_VAR 0 9
12159: PPUSH
12160: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12164: LD_VAR 0 15
12168: PUSH
12169: LD_INT 1
12171: EQUAL
12172: PUSH
12173: LD_VAR 0 9
12177: PPUSH
12178: CALL_OW 256
12182: PUSH
12183: LD_INT 1000
12185: EQUAL
12186: AND
12187: IFFALSE 12201
// SetTag ( i , 0 ) ;
12189: LD_VAR 0 9
12193: PPUSH
12194: LD_INT 0
12196: PPUSH
12197: CALL_OW 109
// if not tag then
12201: LD_VAR 0 15
12205: NOT
12206: IFFALSE 12373
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12208: LD_ADDR_VAR 0 11
12212: PUSH
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 57
12220: PUSH
12221: EMPTY
12222: LIST
12223: PPUSH
12224: CALL_OW 70
12228: ST_TO_ADDR
// if undone then
12229: LD_VAR 0 11
12233: IFFALSE 12255
// begin ComComplete ( i , undone [ 1 ] ) ;
12235: LD_VAR 0 9
12239: PPUSH
12240: LD_VAR 0 11
12244: PUSH
12245: LD_INT 1
12247: ARRAY
12248: PPUSH
12249: CALL 49923 0 2
// continue ;
12253: GO 12028
// end ; if cr or tmp or buildingsToBuild then
12255: LD_VAR 0 17
12259: PUSH
12260: LD_VAR 0 10
12264: OR
12265: PUSH
12266: LD_VAR 0 33
12270: OR
12271: IFFALSE 12347
// begin if IsInUnit ( i ) then
12273: LD_VAR 0 9
12277: PPUSH
12278: CALL_OW 310
12282: IFFALSE 12293
// ComExitBuilding ( i ) ;
12284: LD_VAR 0 9
12288: PPUSH
12289: CALL_OW 122
// if tmp then
12293: LD_VAR 0 10
12297: IFFALSE 12313
// SetTag ( i , tRepair ) else
12299: LD_VAR 0 9
12303: PPUSH
12304: LD_INT 3
12306: PPUSH
12307: CALL_OW 109
12311: GO 12345
// if cr then
12313: LD_VAR 0 17
12317: IFFALSE 12333
// SetTag ( i , tCrates ) else
12319: LD_VAR 0 9
12323: PPUSH
12324: LD_INT 2
12326: PPUSH
12327: CALL_OW 109
12331: GO 12345
// SetTag ( i , tBuild ) ;
12333: LD_VAR 0 9
12337: PPUSH
12338: LD_INT 5
12340: PPUSH
12341: CALL_OW 109
// end else
12345: GO 12373
// if not IsInUnit ( i ) then
12347: LD_VAR 0 9
12351: PPUSH
12352: CALL_OW 310
12356: NOT
12357: IFFALSE 12373
// ComEnterUnit ( i , depot ) ;
12359: LD_VAR 0 9
12363: PPUSH
12364: LD_VAR 0 32
12368: PPUSH
12369: CALL_OW 120
// end ; if tag = tRepair then
12373: LD_VAR 0 15
12377: PUSH
12378: LD_INT 3
12380: EQUAL
12381: IFFALSE 12487
// begin if IsInUnit ( i ) then
12383: LD_VAR 0 9
12387: PPUSH
12388: CALL_OW 310
12392: IFFALSE 12405
// begin ComExitBuilding ( i ) ;
12394: LD_VAR 0 9
12398: PPUSH
12399: CALL_OW 122
// continue ;
12403: GO 12028
// end ; if not tmp then
12405: LD_VAR 0 10
12409: NOT
12410: IFFALSE 12426
// begin SetTag ( i , 0 ) ;
12412: LD_VAR 0 9
12416: PPUSH
12417: LD_INT 0
12419: PPUSH
12420: CALL_OW 109
// continue ;
12424: GO 12028
// end ; if not HasTask ( i ) then
12426: LD_VAR 0 9
12430: PPUSH
12431: CALL_OW 314
12435: NOT
12436: IFFALSE 12456
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
12438: LD_VAR 0 9
12442: PPUSH
12443: LD_VAR 0 10
12447: PUSH
12448: LD_INT 1
12450: ARRAY
12451: PPUSH
12452: CALL_OW 130
// if not IsInArea ( i , area ) then
12456: LD_VAR 0 9
12460: PPUSH
12461: LD_VAR 0 3
12465: PPUSH
12466: CALL_OW 308
12470: NOT
12471: IFFALSE 12487
// ComMoveToArea ( i , area ) ;
12473: LD_VAR 0 9
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: CALL_OW 113
// end ; if tag = tBuild then
12487: LD_VAR 0 15
12491: PUSH
12492: LD_INT 5
12494: EQUAL
12495: IFFALSE 12701
// begin if IsInUnit ( i ) then
12497: LD_VAR 0 9
12501: PPUSH
12502: CALL_OW 310
12506: IFFALSE 12519
// begin ComExitBuilding ( i ) ;
12508: LD_VAR 0 9
12512: PPUSH
12513: CALL_OW 122
// continue ;
12517: GO 12028
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
12519: LD_VAR 0 33
12523: NOT
12524: PUSH
12525: LD_VAR 0 22
12529: OR
12530: PUSH
12531: LD_VAR 0 23
12535: OR
12536: IFFALSE 12554
// begin SetTag ( i , 0 ) ;
12538: LD_VAR 0 9
12542: PPUSH
12543: LD_INT 0
12545: PPUSH
12546: CALL_OW 109
// continue ;
12550: GO 12028
// end else
12552: GO 12593
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12554: LD_VAR 0 32
12558: PPUSH
12559: LD_VAR 0 33
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: PUSH
12568: LD_INT 1
12570: ARRAY
12571: PPUSH
12572: CALL 83333 0 2
12576: NOT
12577: IFFALSE 12593
// begin SetTag ( i , 0 ) ;
12579: LD_VAR 0 9
12583: PPUSH
12584: LD_INT 0
12586: PPUSH
12587: CALL_OW 109
// continue ;
12591: GO 12028
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12593: LD_ADDR_VAR 0 11
12597: PUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: LD_INT 57
12605: PUSH
12606: EMPTY
12607: LIST
12608: PPUSH
12609: CALL_OW 70
12613: ST_TO_ADDR
// if undone then
12614: LD_VAR 0 11
12618: IFFALSE 12640
// begin ComComplete ( i , undone [ 1 ] ) ;
12620: LD_VAR 0 9
12624: PPUSH
12625: LD_VAR 0 11
12629: PUSH
12630: LD_INT 1
12632: ARRAY
12633: PPUSH
12634: CALL 49923 0 2
// continue ;
12638: GO 12028
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
12640: LD_VAR 0 9
12644: PPUSH
12645: LD_VAR 0 33
12649: PUSH
12650: LD_INT 1
12652: ARRAY
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: LD_VAR 0 33
12662: PUSH
12663: LD_INT 1
12665: ARRAY
12666: PUSH
12667: LD_INT 2
12669: ARRAY
12670: PPUSH
12671: LD_VAR 0 33
12675: PUSH
12676: LD_INT 1
12678: ARRAY
12679: PUSH
12680: LD_INT 3
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 33
12688: PUSH
12689: LD_INT 1
12691: ARRAY
12692: PUSH
12693: LD_INT 4
12695: ARRAY
12696: PPUSH
12697: CALL_OW 145
// end ; if tag = tCrates then
12701: LD_VAR 0 15
12705: PUSH
12706: LD_INT 2
12708: EQUAL
12709: IFFALSE 12846
// begin if IsInUnit ( i ) then
12711: LD_VAR 0 9
12715: PPUSH
12716: CALL_OW 310
12720: IFFALSE 12733
// begin ComExitBuilding ( i ) ;
12722: LD_VAR 0 9
12726: PPUSH
12727: CALL_OW 122
// continue ;
12731: GO 12028
// end ; if not cr then
12733: LD_VAR 0 17
12737: NOT
12738: IFFALSE 12754
// begin SetTag ( i , 0 ) ;
12740: LD_VAR 0 9
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 109
// continue ;
12752: GO 12028
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
12754: LD_VAR 0 9
12758: PPUSH
12759: CALL_OW 314
12763: NOT
12764: PUSH
12765: LD_INT 81
12767: PUSH
12768: LD_VAR 0 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 92
12779: PUSH
12780: LD_VAR 0 17
12784: PUSH
12785: LD_INT 1
12787: ARRAY
12788: PUSH
12789: LD_VAR 0 17
12793: PUSH
12794: LD_INT 2
12796: ARRAY
12797: PUSH
12798: LD_INT 12
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PPUSH
12811: CALL_OW 69
12815: NOT
12816: AND
12817: IFFALSE 12846
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
12819: LD_VAR 0 9
12823: PPUSH
12824: LD_VAR 0 17
12828: PUSH
12829: LD_INT 1
12831: ARRAY
12832: PPUSH
12833: LD_VAR 0 17
12837: PUSH
12838: LD_INT 2
12840: ARRAY
12841: PPUSH
12842: CALL_OW 117
// end ; end ;
12846: GO 12028
12848: POP
12849: POP
// end ; if vehicles then
12850: LD_VAR 0 26
12854: IFFALSE 13654
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
12856: LD_ADDR_VAR 0 26
12860: PUSH
12861: LD_VAR 0 26
12865: PPUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: LD_INT 34
12874: PUSH
12875: LD_INT 88
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 34
12884: PUSH
12885: LD_INT 32
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 50
12903: PUSH
12904: EMPTY
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PPUSH
12911: CALL_OW 72
12915: ST_TO_ADDR
// if vehicles then
12916: LD_VAR 0 26
12920: IFFALSE 13654
// begin for i in vehicles do
12922: LD_ADDR_VAR 0 9
12926: PUSH
12927: LD_VAR 0 26
12931: PUSH
12932: FOR_IN
12933: IFFALSE 13652
// begin tag := GetTag ( i ) ;
12935: LD_ADDR_VAR 0 15
12939: PUSH
12940: LD_VAR 0 9
12944: PPUSH
12945: CALL_OW 110
12949: ST_TO_ADDR
// if not tag then
12950: LD_VAR 0 15
12954: NOT
12955: IFFALSE 13101
// begin if GetControl ( i ) = control_manual then
12957: LD_VAR 0 9
12961: PPUSH
12962: CALL_OW 263
12966: PUSH
12967: LD_INT 1
12969: EQUAL
12970: IFFALSE 13087
// begin drivers := arDrivers ;
12972: LD_ADDR_VAR 0 24
12976: PUSH
12977: LD_EXP 47
12981: ST_TO_ADDR
// if not drivers then
12982: LD_VAR 0 24
12986: NOT
12987: IFFALSE 13067
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
12989: LD_ADDR_VAR 0 24
12993: PUSH
12994: LD_VAR 0 14
12998: PPUSH
12999: LD_INT 3
13001: PUSH
13002: LD_INT 120
13004: PUSH
13005: LD_INT 7
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PPUSH
13016: CALL_OW 72
13020: ST_TO_ADDR
// if drivers then
13021: LD_VAR 0 24
13025: IFFALSE 13067
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13027: LD_VAR 0 24
13031: PUSH
13032: LD_INT 1
13034: ARRAY
13035: PPUSH
13036: LD_INT 7
13038: PPUSH
13039: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13043: LD_ADDR_EXP 47
13047: PUSH
13048: LD_EXP 47
13052: PPUSH
13053: LD_VAR 0 24
13057: PUSH
13058: LD_INT 1
13060: ARRAY
13061: PPUSH
13062: CALL 79414 0 2
13066: ST_TO_ADDR
// end ; end ; if drivers then
13067: LD_VAR 0 24
13071: IFFALSE 13085
// SetTag ( i , tBusy ) ;
13073: LD_VAR 0 9
13077: PPUSH
13078: LD_INT 8
13080: PPUSH
13081: CALL_OW 109
// continue ;
13085: GO 12932
// end ; SetTag ( i , tBusy ) ;
13087: LD_VAR 0 9
13091: PPUSH
13092: LD_INT 8
13094: PPUSH
13095: CALL_OW 109
// end else
13099: GO 13650
// if tag = tBusy then
13101: LD_VAR 0 15
13105: PUSH
13106: LD_INT 8
13108: EQUAL
13109: IFFALSE 13321
// begin if GetLives ( i ) = 1000 then
13111: LD_VAR 0 9
13115: PPUSH
13116: CALL_OW 256
13120: PUSH
13121: LD_INT 1000
13123: EQUAL
13124: IFFALSE 13319
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13126: LD_VAR 0 9
13130: PPUSH
13131: CALL_OW 263
13135: PUSH
13136: LD_INT 1
13138: EQUAL
13139: PUSH
13140: LD_VAR 0 9
13144: PPUSH
13145: CALL_OW 311
13149: NOT
13150: AND
13151: IFFALSE 13307
// begin drivers := arDrivers ;
13153: LD_ADDR_VAR 0 24
13157: PUSH
13158: LD_EXP 47
13162: ST_TO_ADDR
// if not drivers then
13163: LD_VAR 0 24
13167: NOT
13168: IFFALSE 13184
// begin SetTag ( i , 0 ) ;
13170: LD_VAR 0 9
13174: PPUSH
13175: LD_INT 0
13177: PPUSH
13178: CALL_OW 109
// continue ;
13182: GO 12932
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13184: LD_VAR 0 24
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: PPUSH
13193: CALL_OW 310
13197: PUSH
13198: LD_VAR 0 24
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PPUSH
13207: CALL 77018 0 1
13211: NOT
13212: AND
13213: IFFALSE 13228
// ComExitBuilding ( drivers [ 1 ] ) ;
13215: LD_VAR 0 24
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13228: LD_VAR 0 26
13232: PPUSH
13233: LD_INT 120
13235: PUSH
13236: LD_INT 3
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PPUSH
13243: CALL_OW 72
13247: PUSH
13248: LD_VAR 0 24
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 314
13261: NOT
13262: AND
13263: PUSH
13264: LD_VAR 0 26
13268: PPUSH
13269: LD_INT 120
13271: PUSH
13272: LD_INT 3
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PPUSH
13279: CALL_OW 72
13283: NOT
13284: OR
13285: IFFALSE 13305
// ComEnterUnit ( drivers [ 1 ] , i ) ;
13287: LD_VAR 0 24
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_VAR 0 9
13300: PPUSH
13301: CALL_OW 120
// continue ;
13305: GO 12932
// end ; SetTag ( i , tAttack ) ;
13307: LD_VAR 0 9
13311: PPUSH
13312: LD_INT 13
13314: PPUSH
13315: CALL_OW 109
// end ; end else
13319: GO 13650
// if tag = tAttack then
13321: LD_VAR 0 15
13325: PUSH
13326: LD_INT 13
13328: EQUAL
13329: IFFALSE 13509
// begin enemy := enemyInBase ;
13331: LD_ADDR_VAR 0 21
13335: PUSH
13336: LD_VAR 0 22
13340: ST_TO_ADDR
// if not enemy then
13341: LD_VAR 0 21
13345: NOT
13346: IFFALSE 13358
// enemy := enemyOuterBase ;
13348: LD_ADDR_VAR 0 21
13352: PUSH
13353: LD_VAR 0 23
13357: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
13358: LD_VAR 0 21
13362: NOT
13363: PUSH
13364: LD_VAR 0 9
13368: PPUSH
13369: LD_VAR 0 7
13373: PUSH
13374: LD_INT 1
13376: ARRAY
13377: PPUSH
13378: LD_VAR 0 7
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: CALL_OW 297
13391: PUSH
13392: LD_INT 10
13394: GREATER
13395: AND
13396: IFFALSE 13427
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13398: LD_VAR 0 9
13402: PPUSH
13403: LD_VAR 0 7
13407: PUSH
13408: LD_INT 1
13410: ARRAY
13411: PPUSH
13412: LD_VAR 0 7
13416: PUSH
13417: LD_INT 2
13419: ARRAY
13420: PPUSH
13421: CALL_OW 111
// continue ;
13425: GO 12932
// end ; if GetLives ( i ) < 650 then
13427: LD_VAR 0 9
13431: PPUSH
13432: CALL_OW 256
13436: PUSH
13437: LD_INT 650
13439: LESS
13440: IFFALSE 13483
// begin SetTag ( i , tVehRepair ) ;
13442: LD_VAR 0 9
13446: PPUSH
13447: LD_INT 9
13449: PPUSH
13450: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13454: LD_VAR 0 9
13458: PPUSH
13459: LD_VAR 0 7
13463: PUSH
13464: LD_INT 1
13466: ARRAY
13467: PPUSH
13468: LD_VAR 0 7
13472: PUSH
13473: LD_INT 2
13475: ARRAY
13476: PPUSH
13477: CALL_OW 111
// continue ;
13481: GO 12932
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13483: LD_VAR 0 9
13487: PPUSH
13488: LD_VAR 0 21
13492: PPUSH
13493: LD_VAR 0 9
13497: PPUSH
13498: CALL_OW 74
13502: PPUSH
13503: CALL_OW 115
// end else
13507: GO 13650
// if tag = tVehRepair then
13509: LD_VAR 0 15
13513: PUSH
13514: LD_INT 9
13516: EQUAL
13517: IFFALSE 13650
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
13519: LD_VAR 0 9
13523: PPUSH
13524: LD_VAR 0 7
13528: PUSH
13529: LD_INT 1
13531: ARRAY
13532: PPUSH
13533: LD_VAR 0 7
13537: PUSH
13538: LD_INT 2
13540: ARRAY
13541: PPUSH
13542: CALL_OW 297
13546: PUSH
13547: LD_INT 10
13549: GREATER
13550: IFFALSE 13581
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13552: LD_VAR 0 9
13556: PPUSH
13557: LD_VAR 0 7
13561: PUSH
13562: LD_INT 1
13564: ARRAY
13565: PPUSH
13566: LD_VAR 0 7
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PPUSH
13575: CALL_OW 111
// continue ;
13579: GO 12932
// end ; if GetLives ( i ) = 1000 then
13581: LD_VAR 0 9
13585: PPUSH
13586: CALL_OW 256
13590: PUSH
13591: LD_INT 1000
13593: EQUAL
13594: IFFALSE 13610
// begin SetTag ( i , tBusy ) ;
13596: LD_VAR 0 9
13600: PPUSH
13601: LD_INT 8
13603: PPUSH
13604: CALL_OW 109
// continue ;
13608: GO 12932
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
13610: LD_VAR 0 9
13614: PPUSH
13615: CALL_OW 263
13619: PUSH
13620: LD_INT 1
13622: EQUAL
13623: PUSH
13624: LD_VAR 0 9
13628: PPUSH
13629: CALL_OW 311
13633: AND
13634: IFFALSE 13650
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
13636: LD_VAR 0 9
13640: PPUSH
13641: CALL_OW 311
13645: PPUSH
13646: CALL 81114 0 1
// end ; end ;
13650: GO 12932
13652: POP
13653: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
13654: LD_ADDR_VAR 0 19
13658: PUSH
13659: LD_VAR 0 5
13663: PPUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 25
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 25
13679: PUSH
13680: LD_INT 8
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 25
13689: PUSH
13690: LD_INT 5
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 25
13699: PUSH
13700: LD_INT 9
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 50
13716: PUSH
13717: EMPTY
13718: LIST
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 72
13728: ST_TO_ADDR
// if sol then
13729: LD_VAR 0 19
13733: IFFALSE 14241
// begin if enemyInBase then
13735: LD_VAR 0 22
13739: IFFALSE 13918
// begin for i in sol do
13741: LD_ADDR_VAR 0 9
13745: PUSH
13746: LD_VAR 0 19
13750: PUSH
13751: FOR_IN
13752: IFFALSE 13914
// begin tw := IsInUnit ( i ) ;
13754: LD_ADDR_VAR 0 16
13758: PUSH
13759: LD_VAR 0 9
13763: PPUSH
13764: CALL_OW 310
13768: ST_TO_ADDR
// if tw then
13769: LD_VAR 0 16
13773: IFFALSE 13856
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
13775: LD_VAR 0 16
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_VAR 0 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 101
13794: PUSH
13795: LD_VAR 0 34
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 2
13806: PUSH
13807: LD_INT 30
13809: PUSH
13810: LD_INT 32
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 31
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: IN
13842: NOT
13843: IFFALSE 13854
// ComExitBuilding ( i ) ;
13845: LD_VAR 0 9
13849: PPUSH
13850: CALL_OW 122
// end else
13854: GO 13912
// if IsInArea ( i , area ) then
13856: LD_VAR 0 9
13860: PPUSH
13861: LD_VAR 0 3
13865: PPUSH
13866: CALL_OW 308
13870: IFFALSE 13898
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
13872: LD_VAR 0 9
13876: PPUSH
13877: LD_VAR 0 22
13881: PPUSH
13882: LD_VAR 0 9
13886: PPUSH
13887: CALL_OW 74
13891: PPUSH
13892: CALL_OW 115
13896: GO 13912
// ComMoveToArea ( i , area ) ;
13898: LD_VAR 0 9
13902: PPUSH
13903: LD_VAR 0 3
13907: PPUSH
13908: CALL_OW 113
// end ;
13912: GO 13751
13914: POP
13915: POP
// end else
13916: GO 14241
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
13918: LD_ADDR_VAR 0 28
13922: PUSH
13923: LD_VAR 0 3
13927: PPUSH
13928: LD_INT 3
13930: PUSH
13931: LD_INT 62
13933: PUSH
13934: EMPTY
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: LD_INT 30
13946: PUSH
13947: LD_INT 32
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 30
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 30
13966: PUSH
13967: LD_INT 5
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 30
13976: PUSH
13977: LD_INT 31
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 70
13999: ST_TO_ADDR
// if empty then
14000: LD_VAR 0 28
14004: IFFALSE 14021
// empty := ReverseArray ( empty ) ;
14006: LD_ADDR_VAR 0 28
14010: PUSH
14011: LD_VAR 0 28
14015: PPUSH
14016: CALL 74701 0 1
14020: ST_TO_ADDR
// for i in sol do
14021: LD_ADDR_VAR 0 9
14025: PUSH
14026: LD_VAR 0 19
14030: PUSH
14031: FOR_IN
14032: IFFALSE 14239
// begin tag := GetTag ( i ) ;
14034: LD_ADDR_VAR 0 15
14038: PUSH
14039: LD_VAR 0 9
14043: PPUSH
14044: CALL_OW 110
14048: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14049: LD_VAR 0 9
14053: PPUSH
14054: CALL_OW 256
14058: PUSH
14059: LD_INT 1000
14061: LESS
14062: PUSH
14063: LD_VAR 0 15
14067: PUSH
14068: LD_INT 1
14070: NONEQUAL
14071: AND
14072: IFFALSE 14124
// begin SetTag ( i , tHeal ) ;
14074: LD_VAR 0 9
14078: PPUSH
14079: LD_INT 1
14081: PPUSH
14082: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14086: LD_VAR 0 9
14090: PPUSH
14091: LD_VAR 0 6
14095: PUSH
14096: LD_INT 1
14098: ARRAY
14099: PPUSH
14100: LD_VAR 0 6
14104: PUSH
14105: LD_INT 2
14107: ARRAY
14108: PPUSH
14109: CALL_OW 111
// AddComHold ( i ) ;
14113: LD_VAR 0 9
14117: PPUSH
14118: CALL_OW 200
// continue ;
14122: GO 14031
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14124: LD_VAR 0 9
14128: PPUSH
14129: CALL_OW 256
14133: PUSH
14134: LD_INT 1000
14136: EQUAL
14137: PUSH
14138: LD_VAR 0 15
14142: PUSH
14143: LD_INT 1
14145: EQUAL
14146: AND
14147: IFFALSE 14163
// begin SetTag ( i , 0 ) ;
14149: LD_VAR 0 9
14153: PPUSH
14154: LD_INT 0
14156: PPUSH
14157: CALL_OW 109
// continue ;
14161: GO 14031
// end ; if HasTask ( i ) then
14163: LD_VAR 0 9
14167: PPUSH
14168: CALL_OW 314
14172: IFFALSE 14176
// continue ;
14174: GO 14031
// if not IsInUnit ( i ) and not tag and empty then
14176: LD_VAR 0 9
14180: PPUSH
14181: CALL_OW 310
14185: NOT
14186: PUSH
14187: LD_VAR 0 15
14191: NOT
14192: AND
14193: PUSH
14194: LD_VAR 0 28
14198: AND
14199: IFFALSE 14237
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
14201: LD_VAR 0 9
14205: PPUSH
14206: LD_VAR 0 28
14210: PUSH
14211: LD_INT 1
14213: ARRAY
14214: PPUSH
14215: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
14219: LD_ADDR_VAR 0 28
14223: PUSH
14224: LD_VAR 0 28
14228: PPUSH
14229: LD_INT 1
14231: PPUSH
14232: CALL_OW 3
14236: ST_TO_ADDR
// end ; end ;
14237: GO 14031
14239: POP
14240: POP
// end ; end ; end ;
14241: LD_VAR 0 8
14245: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
14246: LD_EXP 51
14250: PPUSH
14251: LD_INT 50
14253: PUSH
14254: EMPTY
14255: LIST
14256: PPUSH
14257: CALL_OW 72
14261: IFFALSE 14314
14263: GO 14265
14265: DISABLE
// begin enable ;
14266: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
14267: LD_EXP 3
14271: PUSH
14272: LD_INT 2
14274: ARRAY
14275: PPUSH
14276: LD_INT 2
14278: PPUSH
14279: LD_INT 5
14281: PPUSH
14282: LD_INT 6
14284: PPUSH
14285: LD_EXP 51
14289: PPUSH
14290: LD_INT 210
14292: PUSH
14293: LD_INT 43
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PPUSH
14300: LD_INT 194
14302: PUSH
14303: LD_INT 28
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL 10726 0 7
// end ;
14314: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
14315: LD_EXP 50
14319: IFFALSE 14539
14321: GO 14323
14323: DISABLE
14324: LD_INT 0
14326: PPUSH
14327: PPUSH
14328: PPUSH
// begin enable ;
14329: ENABLE
// p := 1 ;
14330: LD_ADDR_VAR 0 2
14334: PUSH
14335: LD_INT 1
14337: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: DOUBLE
14344: LD_INT 1
14346: DEC
14347: ST_TO_ADDR
14348: LD_EXP 50
14352: PPUSH
14353: CALL 43825 0 1
14357: PUSH
14358: LD_INT 2
14360: DIV
14361: PUSH
14362: FOR_TO
14363: IFFALSE 14537
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
14365: LD_ADDR_VAR 0 3
14369: PUSH
14370: LD_EXP 50
14374: PUSH
14375: LD_VAR 0 2
14379: ARRAY
14380: PPUSH
14381: LD_EXP 50
14385: PUSH
14386: LD_VAR 0 2
14390: PUSH
14391: LD_INT 1
14393: PLUS
14394: ARRAY
14395: PPUSH
14396: CALL_OW 428
14400: ST_TO_ADDR
// if tmp then
14401: LD_VAR 0 3
14405: IFFALSE 14521
// if GetSide ( tmp ) <> botSides [ 2 ] then
14407: LD_VAR 0 3
14411: PPUSH
14412: CALL_OW 255
14416: PUSH
14417: LD_EXP 3
14421: PUSH
14422: LD_INT 2
14424: ARRAY
14425: NONEQUAL
14426: IFFALSE 14521
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
14428: LD_EXP 50
14432: PUSH
14433: LD_VAR 0 2
14437: ARRAY
14438: PPUSH
14439: LD_EXP 50
14443: PUSH
14444: LD_VAR 0 2
14448: PUSH
14449: LD_INT 1
14451: PLUS
14452: ARRAY
14453: PPUSH
14454: LD_EXP 3
14458: PUSH
14459: LD_INT 2
14461: ARRAY
14462: PPUSH
14463: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
14467: LD_ADDR_EXP 50
14471: PUSH
14472: LD_EXP 50
14476: PPUSH
14477: LD_VAR 0 2
14481: PPUSH
14482: CALL_OW 3
14486: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
14487: LD_ADDR_EXP 50
14491: PUSH
14492: LD_EXP 50
14496: PPUSH
14497: LD_VAR 0 2
14501: PPUSH
14502: CALL_OW 3
14506: ST_TO_ADDR
// p := p - 2 ;
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_VAR 0 2
14516: PUSH
14517: LD_INT 2
14519: MINUS
14520: ST_TO_ADDR
// end ; p := p + 2 ;
14521: LD_ADDR_VAR 0 2
14525: PUSH
14526: LD_VAR 0 2
14530: PUSH
14531: LD_INT 2
14533: PLUS
14534: ST_TO_ADDR
// end ;
14535: GO 14362
14537: POP
14538: POP
// end ;
14539: PPOPN 3
14541: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
14542: LD_INT 32
14544: PPUSH
14545: CALL_OW 302
14549: PUSH
14550: LD_EXP 43
14554: NOT
14555: AND
14556: IFFALSE 14607
14558: GO 14560
14560: DISABLE
// begin enable ;
14561: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ;
14562: LD_ADDR_EXP 43
14566: PUSH
14567: LD_INT 14
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: LD_INT 1
14575: PUSH
14576: LD_INT 27
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 14
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: LD_INT 1
14593: PUSH
14594: LD_INT 26
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: ST_TO_ADDR
// end ; end_of_file
14607: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
14608: LD_VAR 0 1
14612: PPUSH
14613: CALL_OW 255
14617: PUSH
14618: LD_EXP 3
14622: IN
14623: NOT
14624: IFFALSE 14628
// exit ;
14626: GO 14685
// if not un in [ Sikorski ] then
14628: LD_VAR 0 1
14632: PUSH
14633: LD_EXP 31
14637: PUSH
14638: EMPTY
14639: LIST
14640: IN
14641: NOT
14642: IFFALSE 14663
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_VAR 0 2
14653: PPUSH
14654: LD_INT 0
14656: PPUSH
14657: CALL 4993 0 3
14661: GO 14685
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_VAR 0 2
14672: PPUSH
14673: LD_INT 5
14675: PPUSH
14676: CALL 4320 0 1
14680: PPUSH
14681: CALL 4993 0 3
// end ;
14685: PPOPN 3
14687: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
14688: LD_INT 0
14690: PPUSH
14691: PPUSH
14692: PPUSH
14693: PPUSH
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL 36829 0 1
// side := GetSide ( un ) ;
14709: LD_ADDR_VAR 0 3
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 255
14723: ST_TO_ADDR
// if multi_sides [ side ] then
14724: LD_EXP 6
14728: PUSH
14729: LD_VAR 0 3
14733: ARRAY
14734: IFFALSE 14760
// if GetType ( un ) = unit_human then
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 247
14745: PUSH
14746: LD_INT 1
14748: EQUAL
14749: IFFALSE 14760
// MultiplayerEvent_HumanLost ( side ) ;
14751: LD_VAR 0 3
14755: PPUSH
14756: CALL 4879 0 1
// if side in botSides then
14760: LD_VAR 0 3
14764: PUSH
14765: LD_EXP 3
14769: IN
14770: IFFALSE 15785
// begin if side = botSides [ 1 ] then
14772: LD_VAR 0 3
14776: PUSH
14777: LD_EXP 3
14781: PUSH
14782: LD_INT 1
14784: ARRAY
14785: EQUAL
14786: IFFALSE 15271
// begin if un in amForce then
14788: LD_VAR 0 1
14792: PUSH
14793: LD_EXP 39
14797: IN
14798: IFFALSE 14816
// amForce := amForce diff un ;
14800: LD_ADDR_EXP 39
14804: PUSH
14805: LD_EXP 39
14809: PUSH
14810: LD_VAR 0 1
14814: DIFF
14815: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 257
14825: PUSH
14826: LD_INT 3
14828: EQUAL
14829: PUSH
14830: LD_EXP 41
14834: AND
14835: IFFALSE 14976
// begin if not IsOk ( amDep ) then
14837: LD_INT 1
14839: PPUSH
14840: CALL_OW 302
14844: NOT
14845: IFFALSE 14849
// exit ;
14847: GO 15857
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
14849: LD_ADDR_EXP 41
14853: PUSH
14854: LD_EXP 41
14858: PPUSH
14859: CALL 80797 0 1
14863: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
14864: LD_ADDR_OWVAR 20
14868: PUSH
14869: LD_EXP 3
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: ST_TO_ADDR
// uc_nation := nation_american ;
14878: LD_ADDR_OWVAR 21
14882: PUSH
14883: LD_INT 1
14885: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
14886: LD_INT 0
14888: PPUSH
14889: LD_INT 1
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: LIST
14902: PUSH
14903: LD_OWVAR 67
14907: ARRAY
14908: PPUSH
14909: CALL_OW 383
// un := CreateHuman ;
14913: LD_ADDR_VAR 0 1
14917: PUSH
14918: CALL_OW 44
14922: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
14923: LD_VAR 0 1
14927: PPUSH
14928: LD_INT 52
14930: PPUSH
14931: LD_INT 2
14933: PPUSH
14934: LD_INT 0
14936: PPUSH
14937: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
14941: LD_VAR 0 1
14945: PPUSH
14946: LD_INT 23
14948: PPUSH
14949: LD_INT 19
14951: PPUSH
14952: CALL_OW 111
// amForce := Join ( amForce , un ) ;
14956: LD_ADDR_EXP 39
14960: PUSH
14961: LD_EXP 39
14965: PPUSH
14966: LD_VAR 0 1
14970: PPUSH
14971: CALL 79414 0 2
14975: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 247
14985: PUSH
14986: LD_INT 3
14988: EQUAL
14989: IFFALSE 15132
// begin btype := GetBType ( un ) ;
14991: LD_ADDR_VAR 0 11
14995: PUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 266
15005: ST_TO_ADDR
// if btype = b_barracks then
15006: LD_VAR 0 11
15010: PUSH
15011: LD_INT 5
15013: EQUAL
15014: IFFALSE 15024
// btype := b_armoury ;
15016: LD_ADDR_VAR 0 11
15020: PUSH
15021: LD_INT 4
15023: ST_TO_ADDR
// if btype = b_factory then
15024: LD_VAR 0 11
15028: PUSH
15029: LD_INT 3
15031: EQUAL
15032: IFFALSE 15042
// btype := b_workshop ;
15034: LD_ADDR_VAR 0 11
15038: PUSH
15039: LD_INT 2
15041: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15042: LD_VAR 0 11
15046: PUSH
15047: LD_INT 8
15049: PUSH
15050: LD_INT 7
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: IN
15057: IFFALSE 15067
// btype := b_lab ;
15059: LD_ADDR_VAR 0 11
15063: PUSH
15064: LD_INT 6
15066: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15067: LD_ADDR_EXP 34
15071: PUSH
15072: LD_EXP 34
15076: PPUSH
15077: LD_EXP 34
15081: PUSH
15082: LD_INT 1
15084: PLUS
15085: PPUSH
15086: LD_VAR 0 11
15090: PUSH
15091: LD_VAR 0 1
15095: PPUSH
15096: CALL_OW 250
15100: PUSH
15101: LD_VAR 0 1
15105: PPUSH
15106: CALL_OW 251
15110: PUSH
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 254
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 1
15131: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15132: LD_VAR 0 1
15136: PPUSH
15137: CALL_OW 247
15141: PUSH
15142: LD_INT 2
15144: EQUAL
15145: IFFALSE 15271
// begin chassis := GetChassis ( un ) ;
15147: LD_ADDR_VAR 0 5
15151: PUSH
15152: LD_VAR 0 1
15156: PPUSH
15157: CALL_OW 265
15161: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15162: LD_ADDR_VAR 0 6
15166: PUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 262
15176: ST_TO_ADDR
// control := GetControl ( un ) ;
15177: LD_ADDR_VAR 0 7
15181: PUSH
15182: LD_VAR 0 1
15186: PPUSH
15187: CALL_OW 263
15191: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
15192: LD_ADDR_VAR 0 8
15196: PUSH
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 264
15206: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
15207: LD_ADDR_VAR 0 9
15211: PUSH
15212: LD_VAR 0 10
15216: PPUSH
15217: LD_VAR 0 5
15221: PPUSH
15222: LD_VAR 0 6
15226: PPUSH
15227: LD_VAR 0 7
15231: PPUSH
15232: LD_VAR 0 8
15236: PPUSH
15237: CALL 44183 0 5
15241: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
15242: LD_ADDR_EXP 33
15246: PUSH
15247: LD_EXP 33
15251: PPUSH
15252: LD_EXP 33
15256: PUSH
15257: LD_INT 1
15259: PLUS
15260: PPUSH
15261: LD_VAR 0 9
15265: PPUSH
15266: CALL_OW 1
15270: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_EXP 3
15280: PUSH
15281: LD_INT 2
15283: ARRAY
15284: EQUAL
15285: IFFALSE 15785
// begin if un in arForce then
15287: LD_VAR 0 1
15291: PUSH
15292: LD_EXP 51
15296: IN
15297: IFFALSE 15315
// arForce := arForce diff un ;
15299: LD_ADDR_EXP 51
15303: PUSH
15304: LD_EXP 51
15308: PUSH
15309: LD_VAR 0 1
15313: DIFF
15314: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 257
15324: PUSH
15325: LD_INT 3
15327: EQUAL
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 110
15338: PUSH
15339: LD_INT 999
15341: LESS
15342: AND
15343: PUSH
15344: LD_EXP 48
15348: AND
15349: IFFALSE 15490
// begin if not IsOk ( arDep ) then
15351: LD_INT 32
15353: PPUSH
15354: CALL_OW 302
15358: NOT
15359: IFFALSE 15363
// exit ;
15361: GO 15857
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
15363: LD_ADDR_EXP 48
15367: PUSH
15368: LD_EXP 48
15372: PPUSH
15373: CALL 80797 0 1
15377: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
15378: LD_ADDR_OWVAR 20
15382: PUSH
15383: LD_EXP 3
15387: PUSH
15388: LD_INT 2
15390: ARRAY
15391: ST_TO_ADDR
// uc_nation := nation_arabian ;
15392: LD_ADDR_OWVAR 21
15396: PUSH
15397: LD_INT 2
15399: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15400: LD_INT 0
15402: PPUSH
15403: LD_INT 1
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 3
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: PUSH
15417: LD_OWVAR 67
15421: ARRAY
15422: PPUSH
15423: CALL_OW 383
// un := CreateHuman ;
15427: LD_ADDR_VAR 0 1
15431: PUSH
15432: CALL_OW 44
15436: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
15437: LD_VAR 0 1
15441: PPUSH
15442: LD_INT 178
15444: PPUSH
15445: LD_INT 2
15447: PPUSH
15448: LD_INT 0
15450: PPUSH
15451: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
15455: LD_VAR 0 1
15459: PPUSH
15460: LD_INT 204
15462: PPUSH
15463: LD_INT 35
15465: PPUSH
15466: CALL_OW 111
// arForce := Join ( arForce , un ) ;
15470: LD_ADDR_EXP 51
15474: PUSH
15475: LD_EXP 51
15479: PPUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL 79414 0 2
15489: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15490: LD_VAR 0 1
15494: PPUSH
15495: CALL_OW 247
15499: PUSH
15500: LD_INT 3
15502: EQUAL
15503: IFFALSE 15646
// begin btype := GetBType ( un ) ;
15505: LD_ADDR_VAR 0 11
15509: PUSH
15510: LD_VAR 0 1
15514: PPUSH
15515: CALL_OW 266
15519: ST_TO_ADDR
// if btype = b_barracks then
15520: LD_VAR 0 11
15524: PUSH
15525: LD_INT 5
15527: EQUAL
15528: IFFALSE 15538
// btype := b_armoury ;
15530: LD_ADDR_VAR 0 11
15534: PUSH
15535: LD_INT 4
15537: ST_TO_ADDR
// if btype = b_factory then
15538: LD_VAR 0 11
15542: PUSH
15543: LD_INT 3
15545: EQUAL
15546: IFFALSE 15556
// btype := b_workshop ;
15548: LD_ADDR_VAR 0 11
15552: PUSH
15553: LD_INT 2
15555: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15556: LD_VAR 0 11
15560: PUSH
15561: LD_INT 8
15563: PUSH
15564: LD_INT 7
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: IN
15571: IFFALSE 15581
// btype := b_lab ;
15573: LD_ADDR_VAR 0 11
15577: PUSH
15578: LD_INT 6
15580: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15581: LD_ADDR_EXP 44
15585: PUSH
15586: LD_EXP 44
15590: PPUSH
15591: LD_EXP 44
15595: PUSH
15596: LD_INT 1
15598: PLUS
15599: PPUSH
15600: LD_VAR 0 11
15604: PUSH
15605: LD_VAR 0 1
15609: PPUSH
15610: CALL_OW 250
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 251
15624: PUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 254
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: PPUSH
15641: CALL_OW 1
15645: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15646: LD_VAR 0 1
15650: PPUSH
15651: CALL_OW 247
15655: PUSH
15656: LD_INT 2
15658: EQUAL
15659: IFFALSE 15785
// begin chassis := GetChassis ( un ) ;
15661: LD_ADDR_VAR 0 5
15665: PUSH
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 265
15675: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15676: LD_ADDR_VAR 0 6
15680: PUSH
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 262
15690: ST_TO_ADDR
// control := GetControl ( un ) ;
15691: LD_ADDR_VAR 0 7
15695: PUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL_OW 263
15705: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
15706: LD_ADDR_VAR 0 8
15710: PUSH
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 264
15720: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
15721: LD_ADDR_VAR 0 9
15725: PUSH
15726: LD_VAR 0 10
15730: PPUSH
15731: LD_VAR 0 5
15735: PPUSH
15736: LD_VAR 0 6
15740: PPUSH
15741: LD_VAR 0 7
15745: PPUSH
15746: LD_VAR 0 8
15750: PPUSH
15751: CALL 44183 0 5
15755: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
15756: LD_ADDR_EXP 43
15760: PUSH
15761: LD_EXP 43
15765: PPUSH
15766: LD_EXP 43
15770: PUSH
15771: LD_INT 1
15773: PLUS
15774: PPUSH
15775: LD_VAR 0 9
15779: PPUSH
15780: CALL_OW 1
15784: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
15785: LD_EXP 23
15789: PUSH
15790: LD_EXP 15
15794: AND
15795: IFFALSE 15857
// if un in multi_commanders then
15797: LD_VAR 0 1
15801: PUSH
15802: LD_EXP 23
15806: IN
15807: IFFALSE 15857
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
15809: LD_ADDR_EXP 24
15813: PUSH
15814: LD_EXP 24
15818: PPUSH
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 1
15831: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
15832: LD_ADDR_EXP 23
15836: PUSH
15837: LD_EXP 23
15841: PUSH
15842: LD_VAR 0 1
15846: DIFF
15847: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
15848: LD_VAR 0 3
15852: PPUSH
15853: CALL 4353 0 1
// end ; end ;
15857: PPOPN 11
15859: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
15860: LD_INT 0
15862: PPUSH
15863: PPUSH
15864: PPUSH
15865: PPUSH
// begin side := GetSide ( building ) ;
15866: LD_ADDR_VAR 0 4
15870: PUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL_OW 255
15880: ST_TO_ADDR
// if multi_sides [ side ] then
15881: LD_EXP 6
15885: PUSH
15886: LD_VAR 0 4
15890: ARRAY
15891: IFFALSE 15912
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
15893: LD_VAR 0 4
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 266
15907: PPUSH
15908: CALL 4923 0 2
// if side = botSides [ 1 ] then
15912: LD_VAR 0 4
15916: PUSH
15917: LD_EXP 3
15921: PUSH
15922: LD_INT 1
15924: ARRAY
15925: EQUAL
15926: IFFALSE 16010
// begin amBuildings := Delete ( amBuildings , 1 ) ;
15928: LD_ADDR_EXP 34
15932: PUSH
15933: LD_EXP 34
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 3
15945: ST_TO_ADDR
// btype := GetBType ( building ) ;
15946: LD_ADDR_VAR 0 5
15950: PUSH
15951: LD_VAR 0 1
15955: PPUSH
15956: CALL_OW 266
15960: ST_TO_ADDR
// case btype of b_workshop :
15961: LD_VAR 0 5
15965: PUSH
15966: LD_INT 2
15968: DOUBLE
15969: EQUAL
15970: IFTRUE 15974
15972: GO 15986
15974: POP
// ComUpgrade ( building ) ; b_lab :
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL_OW 146
15984: GO 16010
15986: LD_INT 6
15988: DOUBLE
15989: EQUAL
15990: IFTRUE 15994
15992: GO 16009
15994: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
15995: LD_VAR 0 1
15999: PPUSH
16000: LD_INT 10
16002: PPUSH
16003: CALL_OW 207
// end ; end ;
16007: GO 16010
16009: POP
// end ; if side = botSides [ 2 ] then
16010: LD_VAR 0 4
16014: PUSH
16015: LD_EXP 3
16019: PUSH
16020: LD_INT 2
16022: ARRAY
16023: EQUAL
16024: IFFALSE 16120
// begin arBuildings := Delete ( arBuildings , 1 ) ;
16026: LD_ADDR_EXP 44
16030: PUSH
16031: LD_EXP 44
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: CALL_OW 3
16043: ST_TO_ADDR
// btype := GetBType ( building ) ;
16044: LD_ADDR_VAR 0 5
16048: PUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 266
16058: ST_TO_ADDR
// case btype of b_workshop :
16059: LD_VAR 0 5
16063: PUSH
16064: LD_INT 2
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16072
16070: GO 16084
16072: POP
// ComUpgrade ( building ) ; b_lab :
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL_OW 146
16082: GO 16120
16084: LD_INT 6
16086: DOUBLE
16087: EQUAL
16088: IFTRUE 16092
16090: GO 16119
16092: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16093: LD_VAR 0 1
16097: PPUSH
16098: LD_INT 10
16100: PPUSH
16101: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
16105: LD_VAR 0 1
16109: PPUSH
16110: LD_INT 15
16112: PPUSH
16113: CALL_OW 207
// end ; end ;
16117: GO 16120
16119: POP
// end ; end ;
16120: PPOPN 5
16122: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 255
16132: PUSH
16133: LD_EXP 3
16137: IN
16138: NOT
16139: IFFALSE 16143
// exit ;
16141: GO 16302
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
16143: LD_VAR 0 2
16147: PUSH
16148: LD_EXP 52
16152: IN
16153: PUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 266
16163: PUSH
16164: LD_INT 31
16166: EQUAL
16167: AND
16168: IFFALSE 16190
// ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
16170: LD_VAR 0 2
16174: PPUSH
16175: LD_INT 215
16177: PPUSH
16178: LD_INT 102
16180: PPUSH
16181: CALL_OW 428
16185: PPUSH
16186: CALL_OW 120
// if HexInfo ( 44 , 78 ) then
16190: LD_INT 44
16192: PPUSH
16193: LD_INT 78
16195: PPUSH
16196: CALL_OW 428
16200: IFFALSE 16237
// begin ComMoveXY ( unit , 26 , 40 ) ;
16202: LD_VAR 0 2
16206: PPUSH
16207: LD_INT 26
16209: PPUSH
16210: LD_INT 40
16212: PPUSH
16213: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
16217: LD_ADDR_EXP 39
16221: PUSH
16222: LD_EXP 39
16226: PPUSH
16227: LD_VAR 0 2
16231: PPUSH
16232: CALL 79414 0 2
16236: ST_TO_ADDR
// end ; if GetX ( building ) > 71 then
16237: LD_VAR 0 1
16241: PPUSH
16242: CALL_OW 250
16246: PUSH
16247: LD_INT 71
16249: GREATER
16250: IFFALSE 16302
// begin ComMoveXY ( unit , 69 , 39 ) ;
16252: LD_VAR 0 2
16256: PPUSH
16257: LD_INT 69
16259: PPUSH
16260: LD_INT 39
16262: PPUSH
16263: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
16267: LD_VAR 0 2
16271: PPUSH
16272: LD_INT 26
16274: PPUSH
16275: LD_INT 40
16277: PPUSH
16278: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
16282: LD_ADDR_EXP 39
16286: PUSH
16287: LD_EXP 39
16291: PPUSH
16292: LD_VAR 0 2
16296: PPUSH
16297: CALL 79414 0 2
16301: ST_TO_ADDR
// end ; end ;
16302: PPOPN 2
16304: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
16305: LD_INT 0
16307: PPUSH
16308: PPUSH
16309: PPUSH
16310: PPUSH
16311: PPUSH
16312: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_VAR 0 2
16322: PPUSH
16323: CALL 36949 0 2
// side := GetSide ( vehicle ) ;
16327: LD_ADDR_VAR 0 4
16331: PUSH
16332: LD_VAR 0 1
16336: PPUSH
16337: CALL_OW 255
16341: ST_TO_ADDR
// if multi_sides [ side ] then
16342: LD_EXP 6
16346: PUSH
16347: LD_VAR 0 4
16351: ARRAY
16352: IFFALSE 16363
// MultiplayerEvent_Produced ( side ) ;
16354: LD_VAR 0 4
16358: PPUSH
16359: CALL 4835 0 1
// if side = botSides [ 1 ] then
16363: LD_VAR 0 4
16367: PUSH
16368: LD_EXP 3
16372: PUSH
16373: LD_INT 1
16375: ARRAY
16376: EQUAL
16377: IFFALSE 16513
// begin driver := IsDrivenBy ( vehicle ) ;
16379: LD_ADDR_VAR 0 8
16383: PUSH
16384: LD_VAR 0 1
16388: PPUSH
16389: CALL_OW 311
16393: ST_TO_ADDR
// if driver then
16394: LD_VAR 0 8
16398: IFFALSE 16432
// begin SetTag ( driver , tMech ) ;
16400: LD_VAR 0 8
16404: PPUSH
16405: LD_INT 7
16407: PPUSH
16408: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
16412: LD_ADDR_EXP 37
16416: PUSH
16417: LD_EXP 37
16421: PPUSH
16422: LD_VAR 0 8
16426: PPUSH
16427: CALL 79414 0 2
16431: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
16432: LD_EXP 38
16436: PUSH
16437: LD_EXP 35
16441: PPUSH
16442: CALL 43825 0 1
16446: GREATER
16447: PUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 266
16457: PUSH
16458: LD_INT 12
16460: PUSH
16461: LD_INT 13
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: IN
16468: OR
16469: IFFALSE 16493
// amVehicles := Join ( amVehicles , vehicle ) else
16471: LD_ADDR_EXP 35
16475: PUSH
16476: LD_EXP 35
16480: PPUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL 79414 0 2
16490: ST_TO_ADDR
16491: GO 16513
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
16493: LD_ADDR_EXP 36
16497: PUSH
16498: LD_EXP 36
16502: PPUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL 79414 0 2
16512: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
16513: LD_VAR 0 4
16517: PUSH
16518: LD_EXP 3
16522: PUSH
16523: LD_INT 2
16525: ARRAY
16526: EQUAL
16527: IFFALSE 16663
// begin driver := IsDrivenBy ( vehicle ) ;
16529: LD_ADDR_VAR 0 8
16533: PUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 311
16543: ST_TO_ADDR
// if driver then
16544: LD_VAR 0 8
16548: IFFALSE 16582
// begin SetTag ( driver , tMech ) ;
16550: LD_VAR 0 8
16554: PPUSH
16555: LD_INT 7
16557: PPUSH
16558: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
16562: LD_ADDR_EXP 47
16566: PUSH
16567: LD_EXP 47
16571: PPUSH
16572: LD_VAR 0 8
16576: PPUSH
16577: CALL 79414 0 2
16581: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
16582: LD_EXP 49
16586: PUSH
16587: LD_EXP 45
16591: PPUSH
16592: CALL 43825 0 1
16596: GREATER
16597: PUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 266
16607: PUSH
16608: LD_INT 32
16610: PUSH
16611: LD_INT 88
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: IN
16618: OR
16619: IFFALSE 16643
// arVehicles := Join ( arVehicles , vehicle ) else
16621: LD_ADDR_EXP 45
16625: PUSH
16626: LD_EXP 45
16630: PPUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL 79414 0 2
16640: ST_TO_ADDR
16641: GO 16663
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
16643: LD_ADDR_EXP 46
16647: PUSH
16648: LD_EXP 46
16652: PPUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL 79414 0 2
16662: ST_TO_ADDR
// end ; end ;
16663: PPOPN 8
16665: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 110
16675: PUSH
16676: LD_INT 7
16678: EQUAL
16679: IFFALSE 16693
// SetTag ( driver , 0 ) ;
16681: LD_VAR 0 1
16685: PPUSH
16686: LD_INT 0
16688: PPUSH
16689: CALL_OW 109
// end ;
16693: PPOPN 4
16695: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
16696: LD_VAR 0 2
16700: PPUSH
16701: CALL_OW 255
16705: PUSH
16706: LD_EXP 3
16710: PUSH
16711: LD_INT 1
16713: ARRAY
16714: EQUAL
16715: IFFALSE 16745
// if tech in amTech then
16717: LD_VAR 0 1
16721: PUSH
16722: LD_EXP 32
16726: IN
16727: IFFALSE 16745
// amTech := amTech diff tech ;
16729: LD_ADDR_EXP 32
16733: PUSH
16734: LD_EXP 32
16738: PUSH
16739: LD_VAR 0 1
16743: DIFF
16744: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
16745: LD_VAR 0 2
16749: PPUSH
16750: CALL_OW 255
16754: PUSH
16755: LD_EXP 3
16759: PUSH
16760: LD_INT 2
16762: ARRAY
16763: EQUAL
16764: IFFALSE 16794
// if tech in arTech then
16766: LD_VAR 0 1
16770: PUSH
16771: LD_EXP 42
16775: IN
16776: IFFALSE 16794
// arTech := arTech diff tech ;
16778: LD_ADDR_EXP 42
16782: PUSH
16783: LD_EXP 42
16787: PUSH
16788: LD_VAR 0 1
16792: DIFF
16793: ST_TO_ADDR
// end ; end_of_file
16794: PPOPN 2
16796: END
// every 25 25$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
16797: LD_INT 32
16799: PPUSH
16800: CALL_OW 302
16804: PUSH
16805: LD_INT 32
16807: PPUSH
16808: CALL_OW 255
16812: PUSH
16813: LD_EXP 3
16817: PUSH
16818: LD_INT 2
16820: ARRAY
16821: EQUAL
16822: AND
16823: IFFALSE 16860
16825: GO 16827
16827: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
16828: LD_INT 10500
16830: PUSH
16831: LD_INT 2100
16833: PUSH
16834: LD_OWVAR 67
16838: MUL
16839: MINUS
16840: PPUSH
16841: CALL_OW 67
// activeArabAttacks := true ;
16845: LD_ADDR_EXP 4
16849: PUSH
16850: LD_INT 1
16852: ST_TO_ADDR
// ArabAttack ( 0 ) ;
16853: LD_INT 0
16855: PPUSH
16856: CALL 16999 0 1
// end ;
16860: END
// every 45 45$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
16861: LD_INT 32
16863: PPUSH
16864: CALL_OW 302
16868: PUSH
16869: LD_INT 32
16871: PPUSH
16872: CALL_OW 255
16876: PUSH
16877: LD_EXP 3
16881: PUSH
16882: LD_INT 2
16884: ARRAY
16885: EQUAL
16886: AND
16887: IFFALSE 16901
16889: GO 16891
16891: DISABLE
// ArabAttack ( Difficulty ) ;
16892: LD_OWVAR 67
16896: PPUSH
16897: CALL 16999 0 1
16901: END
// every 15 15$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 302
16909: PUSH
16910: LD_INT 1
16912: PPUSH
16913: CALL_OW 255
16917: PUSH
16918: LD_EXP 3
16922: PUSH
16923: LD_INT 1
16925: ARRAY
16926: EQUAL
16927: AND
16928: IFFALSE 16957
16930: GO 16932
16932: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
16933: LD_INT 10500
16935: PUSH
16936: LD_INT 2100
16938: PUSH
16939: LD_OWVAR 67
16943: MUL
16944: MINUS
16945: PPUSH
16946: CALL_OW 67
// AmericanAttack ( 0 ) ;
16950: LD_INT 0
16952: PPUSH
16953: CALL 19176 0 1
// end ;
16957: END
// every 45 45$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
16958: LD_INT 1
16960: PPUSH
16961: CALL_OW 302
16965: PUSH
16966: LD_INT 1
16968: PPUSH
16969: CALL_OW 255
16973: PUSH
16974: LD_EXP 3
16978: PUSH
16979: LD_INT 1
16981: ARRAY
16982: EQUAL
16983: AND
16984: IFFALSE 16998
16986: GO 16988
16988: DISABLE
// AmericanAttack ( Difficulty ) ;
16989: LD_OWVAR 67
16993: PPUSH
16994: CALL 19176 0 1
16998: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
16999: LD_INT 0
17001: PPUSH
17002: PPUSH
17003: PPUSH
17004: PPUSH
17005: PPUSH
// uc_side := botSides [ 2 ] ;
17006: LD_ADDR_OWVAR 20
17010: PUSH
17011: LD_EXP 3
17015: PUSH
17016: LD_INT 2
17018: ARRAY
17019: ST_TO_ADDR
// uc_nation := nation_arabian ;
17020: LD_ADDR_OWVAR 21
17024: PUSH
17025: LD_INT 2
17027: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17028: LD_ADDR_VAR 0 4
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: LD_INT 4
17038: PUSH
17039: LD_INT 5
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: PUSH
17047: LD_OWVAR 67
17051: ARRAY
17052: ST_TO_ADDR
// arAttackersInf := [ ] ;
17053: LD_ADDR_EXP 53
17057: PUSH
17058: EMPTY
17059: ST_TO_ADDR
// arAttackersVeh := [ ] ;
17060: LD_ADDR_EXP 54
17064: PUSH
17065: EMPTY
17066: ST_TO_ADDR
// InitHC_All ( ) ;
17067: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
17071: LD_ADDR_VAR 0 3
17075: PUSH
17076: DOUBLE
17077: LD_INT 1
17079: DEC
17080: ST_TO_ADDR
17081: LD_INT 3
17083: PUSH
17084: LD_INT 4
17086: PUSH
17087: LD_INT 6
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: PUSH
17095: LD_OWVAR 67
17099: ARRAY
17100: PUSH
17101: LD_VAR 0 1
17105: PLUS
17106: PUSH
17107: FOR_TO
17108: IFFALSE 17210
// begin PrepareSoldier ( false , skill ) ;
17110: LD_INT 0
17112: PPUSH
17113: LD_VAR 0 4
17117: PPUSH
17118: CALL_OW 381
// un := CreateHuman ;
17122: LD_ADDR_VAR 0 5
17126: PUSH
17127: CALL_OW 44
17131: ST_TO_ADDR
// if i mod 2 = 0 then
17132: LD_VAR 0 3
17136: PUSH
17137: LD_INT 2
17139: MOD
17140: PUSH
17141: LD_INT 0
17143: EQUAL
17144: IFFALSE 17158
// SetClass ( un , class_mortar ) ;
17146: LD_VAR 0 5
17150: PPUSH
17151: LD_INT 8
17153: PPUSH
17154: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
17158: LD_VAR 0 5
17162: PPUSH
17163: LD_INT 25
17165: PPUSH
17166: LD_INT 0
17168: PPUSH
17169: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
17173: LD_ADDR_EXP 53
17177: PUSH
17178: LD_EXP 53
17182: PPUSH
17183: LD_VAR 0 5
17187: PPUSH
17188: CALL 79414 0 2
17192: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
17193: LD_VAR 0 5
17197: PPUSH
17198: LD_INT 230
17200: PPUSH
17201: LD_INT 143
17203: PPUSH
17204: CALL_OW 114
// end ;
17208: GO 17107
17210: POP
17211: POP
// for i := 1 to 3 + v do
17212: LD_ADDR_VAR 0 3
17216: PUSH
17217: DOUBLE
17218: LD_INT 1
17220: DEC
17221: ST_TO_ADDR
17222: LD_INT 3
17224: PUSH
17225: LD_VAR 0 1
17229: PLUS
17230: PUSH
17231: FOR_TO
17232: IFFALSE 17396
// begin PrepareMechanic ( false , skill ) ;
17234: LD_INT 0
17236: PPUSH
17237: LD_VAR 0 4
17241: PPUSH
17242: CALL_OW 383
// un := CreateHuman ;
17246: LD_ADDR_VAR 0 5
17250: PUSH
17251: CALL_OW 44
17255: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17256: LD_VAR 0 5
17260: PPUSH
17261: LD_INT 999
17263: PPUSH
17264: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
17268: LD_INT 14
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: LD_INT 27
17279: PUSH
17280: LD_INT 25
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_VAR 0 3
17291: PUSH
17292: LD_INT 2
17294: MOD
17295: PUSH
17296: LD_INT 1
17298: PLUS
17299: ARRAY
17300: PPUSH
17301: LD_INT 80
17303: PPUSH
17304: CALL 46563 0 5
// veh := CreateVehicle ;
17308: LD_ADDR_VAR 0 6
17312: PUSH
17313: CALL_OW 45
17317: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17318: LD_VAR 0 6
17322: PPUSH
17323: LD_INT 5
17325: PPUSH
17326: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17330: LD_VAR 0 6
17334: PPUSH
17335: LD_INT 26
17337: PPUSH
17338: LD_INT 0
17340: PPUSH
17341: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17345: LD_VAR 0 5
17349: PPUSH
17350: LD_VAR 0 6
17354: PPUSH
17355: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
17359: LD_VAR 0 5
17363: PPUSH
17364: LD_INT 236
17366: PPUSH
17367: LD_INT 127
17369: PPUSH
17370: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17374: LD_ADDR_EXP 54
17378: PUSH
17379: LD_EXP 54
17383: PPUSH
17384: LD_VAR 0 6
17388: PPUSH
17389: CALL 79414 0 2
17393: ST_TO_ADDR
// end ;
17394: GO 17231
17396: POP
17397: POP
// wait ( 0 0$2 ) ;
17398: LD_INT 70
17400: PPUSH
17401: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
17405: LD_ADDR_VAR 0 3
17409: PUSH
17410: DOUBLE
17411: LD_INT 1
17413: DEC
17414: ST_TO_ADDR
17415: LD_INT 1
17417: PUSH
17418: LD_INT 2
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: PUSH
17429: LD_OWVAR 67
17433: ARRAY
17434: PUSH
17435: FOR_TO
17436: IFFALSE 17579
// begin PrepareMechanic ( false , skill ) ;
17438: LD_INT 0
17440: PPUSH
17441: LD_VAR 0 4
17445: PPUSH
17446: CALL_OW 383
// un := CreateHuman ;
17450: LD_ADDR_VAR 0 5
17454: PUSH
17455: CALL_OW 44
17459: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17460: LD_VAR 0 5
17464: PPUSH
17465: LD_INT 999
17467: PPUSH
17468: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
17472: LD_INT 14
17474: PPUSH
17475: LD_INT 1
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: LD_INT 26
17483: PPUSH
17484: LD_INT 80
17486: PPUSH
17487: CALL 46563 0 5
// veh := CreateVehicle ;
17491: LD_ADDR_VAR 0 6
17495: PUSH
17496: CALL_OW 45
17500: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17501: LD_VAR 0 6
17505: PPUSH
17506: LD_INT 5
17508: PPUSH
17509: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17513: LD_VAR 0 6
17517: PPUSH
17518: LD_INT 26
17520: PPUSH
17521: LD_INT 0
17523: PPUSH
17524: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17528: LD_VAR 0 5
17532: PPUSH
17533: LD_VAR 0 6
17537: PPUSH
17538: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
17542: LD_VAR 0 5
17546: PPUSH
17547: LD_INT 236
17549: PPUSH
17550: LD_INT 127
17552: PPUSH
17553: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17557: LD_ADDR_EXP 54
17561: PUSH
17562: LD_EXP 54
17566: PPUSH
17567: LD_VAR 0 6
17571: PPUSH
17572: CALL 79414 0 2
17576: ST_TO_ADDR
// end ;
17577: GO 17435
17579: POP
17580: POP
// wait ( 0 0$2 ) ;
17581: LD_INT 70
17583: PPUSH
17584: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
17588: LD_ADDR_VAR 0 3
17592: PUSH
17593: DOUBLE
17594: LD_INT 1
17596: DEC
17597: ST_TO_ADDR
17598: LD_INT 1
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: LD_INT 2
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_OWVAR 67
17616: ARRAY
17617: PUSH
17618: FOR_TO
17619: IFFALSE 17793
// begin PrepareMechanic ( false , skill ) ;
17621: LD_INT 0
17623: PPUSH
17624: LD_VAR 0 4
17628: PPUSH
17629: CALL_OW 383
// un := CreateHuman ;
17633: LD_ADDR_VAR 0 5
17637: PUSH
17638: CALL_OW 44
17642: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17643: LD_VAR 0 5
17647: PPUSH
17648: LD_INT 999
17650: PPUSH
17651: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
17655: LD_INT 14
17657: PPUSH
17658: LD_INT 1
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: LD_INT 28
17666: PPUSH
17667: LD_INT 80
17669: PPUSH
17670: CALL 46563 0 5
// veh := CreateVehicle ;
17674: LD_ADDR_VAR 0 6
17678: PUSH
17679: CALL_OW 45
17683: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
17684: LD_VAR 0 6
17688: PPUSH
17689: LD_INT 4
17691: PPUSH
17692: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17696: LD_VAR 0 6
17700: PPUSH
17701: LD_INT 26
17703: PPUSH
17704: LD_INT 0
17706: PPUSH
17707: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17711: LD_VAR 0 5
17715: PPUSH
17716: LD_VAR 0 6
17720: PPUSH
17721: CALL_OW 52
// if i mod 2 = 0 then
17725: LD_VAR 0 3
17729: PUSH
17730: LD_INT 2
17732: MOD
17733: PUSH
17734: LD_INT 0
17736: EQUAL
17737: IFFALSE 17756
// ComMoveXY ( un , 136 , 61 ) else
17739: LD_VAR 0 5
17743: PPUSH
17744: LD_INT 136
17746: PPUSH
17747: LD_INT 61
17749: PPUSH
17750: CALL_OW 111
17754: GO 17771
// ComMoveXY ( un , 137 , 41 ) ;
17756: LD_VAR 0 5
17760: PPUSH
17761: LD_INT 137
17763: PPUSH
17764: LD_INT 41
17766: PPUSH
17767: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17771: LD_ADDR_EXP 54
17775: PUSH
17776: LD_EXP 54
17780: PPUSH
17781: LD_VAR 0 6
17785: PPUSH
17786: CALL 79414 0 2
17790: ST_TO_ADDR
// end ;
17791: GO 17618
17793: POP
17794: POP
// end ;
17795: LD_VAR 0 2
17799: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
17800: LD_EXP 53
17804: IFFALSE 18331
17806: GO 17808
17808: DISABLE
17809: LD_INT 0
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
// begin enable ;
17815: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
17816: LD_ADDR_VAR 0 2
17820: PUSH
17821: LD_EXP 53
17825: PPUSH
17826: LD_INT 50
17828: PUSH
17829: EMPTY
17830: LIST
17831: PPUSH
17832: CALL_OW 72
17836: ST_TO_ADDR
// arAttackersInf := [ ] ;
17837: LD_ADDR_EXP 53
17841: PUSH
17842: EMPTY
17843: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
17844: LD_VAR 0 2
17848: PPUSH
17849: LD_INT 173
17851: PPUSH
17852: LD_INT 139
17854: PPUSH
17855: CALL_OW 111
// wait ( 0 0$10 ) ;
17859: LD_INT 350
17861: PPUSH
17862: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
17866: LD_ADDR_VAR 0 1
17870: PUSH
17871: LD_VAR 0 2
17875: PPUSH
17876: LD_INT 25
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PPUSH
17886: CALL_OW 72
17890: PUSH
17891: FOR_IN
17892: IFFALSE 18023
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_INT 81
17901: PUSH
17902: LD_EXP 3
17906: PUSH
17907: LD_INT 2
17909: ARRAY
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 3
17917: PUSH
17918: LD_INT 120
17920: PUSH
17921: LD_INT 11
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: LD_INT 21
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 21
17947: PUSH
17948: LD_INT 3
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: PPUSH
17965: CALL_OW 69
17969: PPUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: CALL_OW 74
17979: ST_TO_ADDR
// if not nearest then
17980: LD_VAR 0 3
17984: NOT
17985: IFFALSE 17989
// break ;
17987: GO 18023
// SetTag ( nearest , tMined ) ;
17989: LD_VAR 0 3
17993: PPUSH
17994: LD_INT 11
17996: PPUSH
17997: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18001: LD_VAR 0 1
18005: PPUSH
18006: LD_INT 0
18008: PPUSH
18009: LD_INT 0
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: CALL_OW 192
// end ;
18021: GO 17891
18023: POP
18024: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18025: LD_ADDR_VAR 0 2
18029: PUSH
18030: LD_VAR 0 2
18034: PPUSH
18035: LD_INT 50
18037: PUSH
18038: EMPTY
18039: LIST
18040: PPUSH
18041: CALL_OW 72
18045: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
18046: LD_VAR 0 2
18050: PPUSH
18051: LD_INT 155
18053: PPUSH
18054: LD_INT 119
18056: PPUSH
18057: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
18061: LD_INT 70
18063: PPUSH
18064: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18068: LD_ADDR_VAR 0 2
18072: PUSH
18073: LD_VAR 0 2
18077: PPUSH
18078: LD_INT 50
18080: PUSH
18081: EMPTY
18082: LIST
18083: PPUSH
18084: CALL_OW 72
18088: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
18089: LD_ADDR_VAR 0 4
18093: PUSH
18094: LD_INT 81
18096: PUSH
18097: LD_EXP 3
18101: PUSH
18102: LD_INT 2
18104: ARRAY
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PPUSH
18110: CALL_OW 69
18114: ST_TO_ADDR
// for i in tmp do
18115: LD_ADDR_VAR 0 1
18119: PUSH
18120: LD_VAR 0 2
18124: PUSH
18125: FOR_IN
18126: IFFALSE 18322
// if GetClass ( i ) <> 1 then
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 257
18137: PUSH
18138: LD_INT 1
18140: NONEQUAL
18141: IFFALSE 18169
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18143: LD_VAR 0 1
18147: PPUSH
18148: LD_VAR 0 4
18152: PPUSH
18153: LD_VAR 0 1
18157: PPUSH
18158: CALL_OW 74
18162: PPUSH
18163: CALL_OW 115
18167: GO 18320
// if not HasTask ( i ) then
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 314
18178: NOT
18179: IFFALSE 18320
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18181: LD_ADDR_VAR 0 3
18185: PUSH
18186: LD_VAR 0 4
18190: PPUSH
18191: LD_INT 3
18193: PUSH
18194: LD_INT 120
18196: PUSH
18197: LD_INT 11
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: LD_INT 21
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 21
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PPUSH
18240: CALL_OW 72
18244: PPUSH
18245: LD_VAR 0 1
18249: PPUSH
18250: CALL_OW 74
18254: ST_TO_ADDR
// if not nearest then
18255: LD_VAR 0 3
18259: NOT
18260: IFFALSE 18288
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18262: LD_VAR 0 1
18266: PPUSH
18267: LD_VAR 0 4
18271: PPUSH
18272: LD_VAR 0 1
18276: PPUSH
18277: CALL_OW 74
18281: PPUSH
18282: CALL_OW 115
18286: GO 18320
// begin SetTag ( nearest , tMined ) ;
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_INT 11
18295: PPUSH
18296: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18300: LD_VAR 0 1
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: LD_INT 0
18310: PPUSH
18311: LD_VAR 0 3
18315: PPUSH
18316: CALL_OW 132
// end ; end ;
18320: GO 18125
18322: POP
18323: POP
// until not tmp ;
18324: LD_VAR 0 2
18328: NOT
18329: IFFALSE 18061
// end ;
18331: PPOPN 4
18333: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
18334: LD_EXP 54
18338: IFFALSE 18450
18340: GO 18342
18342: DISABLE
18343: LD_INT 0
18345: PPUSH
18346: PPUSH
// begin enable ;
18347: ENABLE
// tmp := arAttackersVeh ;
18348: LD_ADDR_VAR 0 2
18352: PUSH
18353: LD_EXP 54
18357: ST_TO_ADDR
// arAttackersVeh := [ ] ;
18358: LD_ADDR_EXP 54
18362: PUSH
18363: EMPTY
18364: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
18365: LD_INT 70
18367: PPUSH
18368: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18372: LD_ADDR_VAR 0 2
18376: PUSH
18377: LD_VAR 0 2
18381: PPUSH
18382: LD_INT 50
18384: PUSH
18385: EMPTY
18386: LIST
18387: PPUSH
18388: CALL_OW 72
18392: ST_TO_ADDR
// for i in tmp do
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_VAR 0 2
18402: PUSH
18403: FOR_IN
18404: IFFALSE 18441
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
18406: LD_VAR 0 1
18410: PPUSH
18411: LD_INT 207
18413: PUSH
18414: LD_INT 125
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 185
18423: PUSH
18424: LD_INT 114
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PPUSH
18435: CALL 82018 0 2
18439: GO 18403
18441: POP
18442: POP
18443: LD_VAR 0 2
18447: NOT
18448: IFFALSE 18365
// end ;
18450: PPOPN 2
18452: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
18453: LD_EXP 46
18457: PUSH
18458: LD_EXP 4
18462: AND
18463: IFFALSE 19053
18465: GO 18467
18467: DISABLE
18468: LD_INT 0
18470: PPUSH
18471: PPUSH
18472: PPUSH
// begin enable ;
18473: ENABLE
// if not arVehiclesAtttackers then
18474: LD_EXP 46
18478: NOT
18479: IFFALSE 18483
// exit ;
18481: GO 19053
// for i in arVehiclesAtttackers do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_EXP 46
18492: PUSH
18493: FOR_IN
18494: IFFALSE 19051
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 302
18505: NOT
18506: PUSH
18507: LD_VAR 0 1
18511: PPUSH
18512: CALL_OW 255
18516: PUSH
18517: LD_EXP 3
18521: PUSH
18522: LD_INT 2
18524: ARRAY
18525: NONEQUAL
18526: OR
18527: IFFALSE 18547
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
18529: LD_ADDR_EXP 46
18533: PUSH
18534: LD_EXP 46
18538: PUSH
18539: LD_VAR 0 1
18543: DIFF
18544: ST_TO_ADDR
// continue ;
18545: GO 18493
// end ; if GetTag ( i ) = 300 then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 110
18556: PUSH
18557: LD_INT 300
18559: EQUAL
18560: IFFALSE 18675
// begin if GetFuel ( i ) < 50 then
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 261
18571: PUSH
18572: LD_INT 50
18574: LESS
18575: IFFALSE 18634
// begin ComMoveXY ( i , 198 , 28 ) ;
18577: LD_VAR 0 1
18581: PPUSH
18582: LD_INT 198
18584: PPUSH
18585: LD_INT 28
18587: PPUSH
18588: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18592: LD_INT 35
18594: PPUSH
18595: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
18599: LD_VAR 0 1
18603: PPUSH
18604: LD_INT 198
18606: PPUSH
18607: LD_INT 28
18609: PPUSH
18610: CALL_OW 297
18614: PUSH
18615: LD_INT 4
18617: LESS
18618: IFFALSE 18592
// SetFuel ( i , 100 ) ;
18620: LD_VAR 0 1
18624: PPUSH
18625: LD_INT 100
18627: PPUSH
18628: CALL_OW 240
// end else
18632: GO 18675
// if not IsInArea ( i , arParkingArea ) then
18634: LD_VAR 0 1
18638: PPUSH
18639: LD_INT 28
18641: PPUSH
18642: CALL_OW 308
18646: NOT
18647: IFFALSE 18663
// ComMoveToArea ( i , arParkingArea ) else
18649: LD_VAR 0 1
18653: PPUSH
18654: LD_INT 28
18656: PPUSH
18657: CALL_OW 113
18661: GO 18675
// SetTag ( i , 301 ) ;
18663: LD_VAR 0 1
18667: PPUSH
18668: LD_INT 301
18670: PPUSH
18671: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
18675: LD_VAR 0 1
18679: PPUSH
18680: CALL_OW 110
18684: PUSH
18685: LD_INT 301
18687: EQUAL
18688: IFFALSE 18830
// begin if GetLives ( i ) < 1000 then
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 256
18699: PUSH
18700: LD_INT 1000
18702: LESS
18703: IFFALSE 18807
// begin if not IsDrivenBy ( i ) then
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 311
18714: NOT
18715: IFFALSE 18719
// continue ;
18717: GO 18493
// mech := IsDrivenBy ( i ) ;
18719: LD_ADDR_VAR 0 2
18723: PUSH
18724: LD_VAR 0 1
18728: PPUSH
18729: CALL_OW 311
18733: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
18734: LD_VAR 0 2
18738: PPUSH
18739: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
18743: LD_VAR 0 2
18747: PPUSH
18748: LD_VAR 0 1
18752: PPUSH
18753: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
18757: LD_INT 35
18759: PPUSH
18760: CALL_OW 67
// until GetLives ( i ) = 1000 ;
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 256
18773: PUSH
18774: LD_INT 1000
18776: EQUAL
18777: IFFALSE 18757
// SetLives ( mech , 1000 ) ;
18779: LD_VAR 0 2
18783: PPUSH
18784: LD_INT 1000
18786: PPUSH
18787: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
18791: LD_VAR 0 2
18795: PPUSH
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 120
// end else
18805: GO 18830
// if IsDrivenBy ( i ) then
18807: LD_VAR 0 1
18811: PPUSH
18812: CALL_OW 311
18816: IFFALSE 18830
// SetTag ( i , 0 ) ;
18818: LD_VAR 0 1
18822: PPUSH
18823: LD_INT 0
18825: PPUSH
18826: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL_OW 110
18839: PUSH
18840: LD_INT 300
18842: LESS
18843: IFFALSE 19049
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
18845: LD_ADDR_VAR 0 3
18849: PUSH
18850: LD_INT 5
18852: PPUSH
18853: LD_INT 81
18855: PUSH
18856: LD_EXP 3
18860: PUSH
18861: LD_INT 2
18863: ARRAY
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 70
18873: ST_TO_ADDR
// if GetLives ( i ) < 650 then
18874: LD_VAR 0 1
18878: PPUSH
18879: CALL_OW 256
18883: PUSH
18884: LD_INT 650
18886: LESS
18887: IFFALSE 18912
// begin ComStop ( i ) ;
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 141
// SetTag ( i , 300 ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: LD_INT 300
18905: PPUSH
18906: CALL_OW 109
// continue ;
18910: GO 18493
// end ; if enemy then
18912: LD_VAR 0 3
18916: IFFALSE 18956
// begin if not HasTask ( i ) then
18918: LD_VAR 0 1
18922: PPUSH
18923: CALL_OW 314
18927: NOT
18928: IFFALSE 18954
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18930: LD_VAR 0 1
18934: PPUSH
18935: LD_VAR 0 3
18939: PPUSH
18940: LD_VAR 0 1
18944: PPUSH
18945: CALL_OW 74
18949: PPUSH
18950: CALL_OW 115
// end else
18954: GO 19049
// if arVehiclesAtttackers then
18956: LD_EXP 46
18960: IFFALSE 19049
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
18962: LD_ADDR_VAR 0 3
18966: PUSH
18967: LD_INT 81
18969: PUSH
18970: LD_EXP 3
18974: PUSH
18975: LD_INT 2
18977: ARRAY
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PPUSH
18983: CALL_OW 69
18987: ST_TO_ADDR
// if enemy then
18988: LD_VAR 0 3
18992: IFFALSE 19049
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
18994: LD_VAR 0 1
18998: PPUSH
18999: LD_INT 215
19001: PUSH
19002: LD_INT 88
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 197
19011: PUSH
19012: LD_INT 90
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 178
19021: PUSH
19022: LD_INT 90
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 169
19031: PUSH
19032: LD_INT 104
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PPUSH
19045: CALL 82018 0 2
// end ; end ; end ;
19049: GO 18493
19051: POP
19052: POP
// end ;
19053: PPOPN 3
19055: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19056: LD_INT 22
19058: PUSH
19059: LD_EXP 3
19063: PUSH
19064: LD_INT 2
19066: ARRAY
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 32
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: IFFALSE 19173
19092: GO 19094
19094: DISABLE
19095: LD_INT 0
19097: PPUSH
// begin enable ;
19098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19099: LD_ADDR_VAR 0 1
19103: PUSH
19104: LD_INT 22
19106: PUSH
19107: LD_EXP 3
19111: PUSH
19112: LD_INT 2
19114: ARRAY
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 32
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PPUSH
19134: CALL_OW 69
19138: PUSH
19139: FOR_IN
19140: IFFALSE 19171
// if GetFuel ( i ) < 3 then
19142: LD_VAR 0 1
19146: PPUSH
19147: CALL_OW 261
19151: PUSH
19152: LD_INT 3
19154: LESS
19155: IFFALSE 19169
// SetFuel ( i , 3 ) ;
19157: LD_VAR 0 1
19161: PPUSH
19162: LD_INT 3
19164: PPUSH
19165: CALL_OW 240
19169: GO 19139
19171: POP
19172: POP
// end ;
19173: PPOPN 1
19175: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19176: LD_INT 0
19178: PPUSH
19179: PPUSH
19180: PPUSH
19181: PPUSH
19182: PPUSH
// uc_side := botSides [ 1 ] ;
19183: LD_ADDR_OWVAR 20
19187: PUSH
19188: LD_EXP 3
19192: PUSH
19193: LD_INT 1
19195: ARRAY
19196: ST_TO_ADDR
// uc_nation := nation_american ;
19197: LD_ADDR_OWVAR 21
19201: PUSH
19202: LD_INT 1
19204: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19205: LD_ADDR_VAR 0 4
19209: PUSH
19210: LD_INT 3
19212: PUSH
19213: LD_INT 4
19215: PUSH
19216: LD_INT 5
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: LIST
19223: PUSH
19224: LD_OWVAR 67
19228: ARRAY
19229: ST_TO_ADDR
// amAttackersInf := [ ] ;
19230: LD_ADDR_EXP 55
19234: PUSH
19235: EMPTY
19236: ST_TO_ADDR
// amAttackersVeh := [ ] ;
19237: LD_ADDR_EXP 56
19241: PUSH
19242: EMPTY
19243: ST_TO_ADDR
// InitHC_All ( ) ;
19244: CALL_OW 584
// for i := 1 to [ 2 , 4 , 5 ] [ Difficulty ] + v do
19248: LD_ADDR_VAR 0 3
19252: PUSH
19253: DOUBLE
19254: LD_INT 1
19256: DEC
19257: ST_TO_ADDR
19258: LD_INT 2
19260: PUSH
19261: LD_INT 4
19263: PUSH
19264: LD_INT 5
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: PUSH
19272: LD_OWVAR 67
19276: ARRAY
19277: PUSH
19278: LD_VAR 0 1
19282: PLUS
19283: PUSH
19284: FOR_TO
19285: IFFALSE 19361
// begin PrepareSoldier ( false , skill ) ;
19287: LD_INT 0
19289: PPUSH
19290: LD_VAR 0 4
19294: PPUSH
19295: CALL_OW 381
// un := CreateHuman ;
19299: LD_ADDR_VAR 0 5
19303: PUSH
19304: CALL_OW 44
19308: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
19309: LD_VAR 0 5
19313: PPUSH
19314: LD_INT 30
19316: PPUSH
19317: LD_INT 0
19319: PPUSH
19320: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
19324: LD_ADDR_EXP 55
19328: PUSH
19329: LD_EXP 55
19333: PPUSH
19334: LD_VAR 0 5
19338: PPUSH
19339: CALL 79414 0 2
19343: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
19344: LD_VAR 0 5
19348: PPUSH
19349: LD_INT 110
19351: PPUSH
19352: LD_INT 129
19354: PPUSH
19355: CALL_OW 114
// end ;
19359: GO 19284
19361: POP
19362: POP
// for i := 1 to 2 + v do
19363: LD_ADDR_VAR 0 3
19367: PUSH
19368: DOUBLE
19369: LD_INT 1
19371: DEC
19372: ST_TO_ADDR
19373: LD_INT 2
19375: PUSH
19376: LD_VAR 0 1
19380: PLUS
19381: PUSH
19382: FOR_TO
19383: IFFALSE 19551
// begin PrepareMechanic ( false , skill ) ;
19385: LD_INT 0
19387: PPUSH
19388: LD_VAR 0 4
19392: PPUSH
19393: CALL_OW 383
// un := CreateHuman ;
19397: LD_ADDR_VAR 0 5
19401: PUSH
19402: CALL_OW 44
19406: ST_TO_ADDR
// SetTag ( un , 999 ) ;
19407: LD_VAR 0 5
19411: PPUSH
19412: LD_INT 999
19414: PPUSH
19415: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
19419: LD_INT 3
19421: PPUSH
19422: LD_INT 1
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: LD_INT 3
19430: PUSH
19431: LD_INT 5
19433: PUSH
19434: LD_INT 4
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: PUSH
19442: LD_VAR 0 3
19446: PUSH
19447: LD_INT 3
19449: MOD
19450: PUSH
19451: LD_INT 1
19453: PLUS
19454: ARRAY
19455: PPUSH
19456: LD_INT 80
19458: PPUSH
19459: CALL 46563 0 5
// veh := CreateVehicle ;
19463: LD_ADDR_VAR 0 6
19467: PUSH
19468: CALL_OW 45
19472: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
19473: LD_VAR 0 6
19477: PPUSH
19478: LD_INT 0
19480: PPUSH
19481: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
19485: LD_VAR 0 6
19489: PPUSH
19490: LD_INT 31
19492: PPUSH
19493: LD_INT 0
19495: PPUSH
19496: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
19500: LD_VAR 0 5
19504: PPUSH
19505: LD_VAR 0 6
19509: PPUSH
19510: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
19514: LD_VAR 0 5
19518: PPUSH
19519: LD_INT 96
19521: PPUSH
19522: LD_INT 137
19524: PPUSH
19525: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
19529: LD_ADDR_EXP 56
19533: PUSH
19534: LD_EXP 56
19538: PPUSH
19539: LD_VAR 0 6
19543: PPUSH
19544: CALL 79414 0 2
19548: ST_TO_ADDR
// end ;
19549: GO 19382
19551: POP
19552: POP
// end ;
19553: LD_VAR 0 2
19557: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
19558: LD_EXP 56
19562: IFFALSE 19687
19564: GO 19566
19566: DISABLE
19567: LD_INT 0
19569: PPUSH
19570: PPUSH
// begin enable ;
19571: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
19572: LD_ADDR_VAR 0 2
19576: PUSH
19577: LD_EXP 56
19581: PUSH
19582: LD_EXP 55
19586: UNION
19587: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19588: LD_ADDR_EXP 54
19592: PUSH
19593: EMPTY
19594: ST_TO_ADDR
// amAttackersInf := [ ] ;
19595: LD_ADDR_EXP 55
19599: PUSH
19600: EMPTY
19601: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19602: LD_INT 70
19604: PPUSH
19605: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19609: LD_ADDR_VAR 0 2
19613: PUSH
19614: LD_VAR 0 2
19618: PPUSH
19619: LD_INT 50
19621: PUSH
19622: EMPTY
19623: LIST
19624: PPUSH
19625: CALL_OW 72
19629: ST_TO_ADDR
// for i in tmp do
19630: LD_ADDR_VAR 0 1
19634: PUSH
19635: LD_VAR 0 2
19639: PUSH
19640: FOR_IN
19641: IFFALSE 19678
// AgressiveMove ( i , [ [ 99 , 136 ] , [ 88 , 110 ] ] ) until not tmp ;
19643: LD_VAR 0 1
19647: PPUSH
19648: LD_INT 99
19650: PUSH
19651: LD_INT 136
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 88
19660: PUSH
19661: LD_INT 110
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PPUSH
19672: CALL 82018 0 2
19676: GO 19640
19678: POP
19679: POP
19680: LD_VAR 0 2
19684: NOT
19685: IFFALSE 19602
// end ;
19687: PPOPN 2
19689: END
// every 0 0$1 trigger amVehiclesAtttackers do var i , mech , enemy ;
19690: LD_EXP 36
19694: IFFALSE 20273
19696: GO 19698
19698: DISABLE
19699: LD_INT 0
19701: PPUSH
19702: PPUSH
19703: PPUSH
// begin enable ;
19704: ENABLE
// if not amVehiclesAtttackers then
19705: LD_EXP 36
19709: NOT
19710: IFFALSE 19714
// exit ;
19712: GO 20273
// for i in amVehiclesAtttackers do
19714: LD_ADDR_VAR 0 1
19718: PUSH
19719: LD_EXP 36
19723: PUSH
19724: FOR_IN
19725: IFFALSE 20271
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 302
19736: NOT
19737: PUSH
19738: LD_VAR 0 1
19742: PPUSH
19743: CALL_OW 255
19747: PUSH
19748: LD_EXP 3
19752: PUSH
19753: LD_INT 1
19755: ARRAY
19756: NONEQUAL
19757: OR
19758: IFFALSE 19778
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
19760: LD_ADDR_EXP 36
19764: PUSH
19765: LD_EXP 36
19769: PUSH
19770: LD_VAR 0 1
19774: DIFF
19775: ST_TO_ADDR
// continue ;
19776: GO 19724
// end ; if GetTag ( i ) = 300 then
19778: LD_VAR 0 1
19782: PPUSH
19783: CALL_OW 110
19787: PUSH
19788: LD_INT 300
19790: EQUAL
19791: IFFALSE 19906
// begin if GetFuel ( i ) < 50 then
19793: LD_VAR 0 1
19797: PPUSH
19798: CALL_OW 261
19802: PUSH
19803: LD_INT 50
19805: LESS
19806: IFFALSE 19865
// begin ComMoveXY ( i , 24 , 36 ) ;
19808: LD_VAR 0 1
19812: PPUSH
19813: LD_INT 24
19815: PPUSH
19816: LD_INT 36
19818: PPUSH
19819: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19823: LD_INT 35
19825: PPUSH
19826: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
19830: LD_VAR 0 1
19834: PPUSH
19835: LD_INT 24
19837: PPUSH
19838: LD_INT 36
19840: PPUSH
19841: CALL_OW 297
19845: PUSH
19846: LD_INT 4
19848: LESS
19849: IFFALSE 19823
// SetFuel ( i , 100 ) ;
19851: LD_VAR 0 1
19855: PPUSH
19856: LD_INT 100
19858: PPUSH
19859: CALL_OW 240
// end else
19863: GO 19906
// if not IsInArea ( i , amParkingArea ) then
19865: LD_VAR 0 1
19869: PPUSH
19870: LD_INT 27
19872: PPUSH
19873: CALL_OW 308
19877: NOT
19878: IFFALSE 19894
// ComMoveToArea ( i , amParkingArea ) else
19880: LD_VAR 0 1
19884: PPUSH
19885: LD_INT 27
19887: PPUSH
19888: CALL_OW 113
19892: GO 19906
// SetTag ( i , 301 ) ;
19894: LD_VAR 0 1
19898: PPUSH
19899: LD_INT 301
19901: PPUSH
19902: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19906: LD_VAR 0 1
19910: PPUSH
19911: CALL_OW 110
19915: PUSH
19916: LD_INT 301
19918: EQUAL
19919: IFFALSE 20061
// begin if GetLives ( i ) < 1000 then
19921: LD_VAR 0 1
19925: PPUSH
19926: CALL_OW 256
19930: PUSH
19931: LD_INT 1000
19933: LESS
19934: IFFALSE 20038
// begin if not IsDrivenBy ( i ) then
19936: LD_VAR 0 1
19940: PPUSH
19941: CALL_OW 311
19945: NOT
19946: IFFALSE 19950
// continue ;
19948: GO 19724
// mech := IsDrivenBy ( i ) ;
19950: LD_ADDR_VAR 0 2
19954: PUSH
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL_OW 311
19964: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19965: LD_VAR 0 2
19969: PPUSH
19970: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19974: LD_VAR 0 2
19978: PPUSH
19979: LD_VAR 0 1
19983: PPUSH
19984: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19988: LD_INT 35
19990: PPUSH
19991: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19995: LD_VAR 0 1
19999: PPUSH
20000: CALL_OW 256
20004: PUSH
20005: LD_INT 1000
20007: EQUAL
20008: IFFALSE 19988
// SetLives ( mech , 1000 ) ;
20010: LD_VAR 0 2
20014: PPUSH
20015: LD_INT 1000
20017: PPUSH
20018: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20022: LD_VAR 0 2
20026: PPUSH
20027: LD_VAR 0 1
20031: PPUSH
20032: CALL_OW 120
// end else
20036: GO 20061
// if IsDrivenBy ( i ) then
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 311
20047: IFFALSE 20061
// SetTag ( i , 0 ) ;
20049: LD_VAR 0 1
20053: PPUSH
20054: LD_INT 0
20056: PPUSH
20057: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 110
20070: PUSH
20071: LD_INT 300
20073: LESS
20074: IFFALSE 20269
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20076: LD_ADDR_VAR 0 3
20080: PUSH
20081: LD_INT 3
20083: PPUSH
20084: LD_INT 81
20086: PUSH
20087: LD_EXP 3
20091: PUSH
20092: LD_INT 1
20094: ARRAY
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PPUSH
20100: CALL_OW 70
20104: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 256
20114: PUSH
20115: LD_INT 650
20117: LESS
20118: IFFALSE 20143
// begin ComStop ( i ) ;
20120: LD_VAR 0 1
20124: PPUSH
20125: CALL_OW 141
// SetTag ( i , 300 ) ;
20129: LD_VAR 0 1
20133: PPUSH
20134: LD_INT 300
20136: PPUSH
20137: CALL_OW 109
// continue ;
20141: GO 19724
// end ; if enemy then
20143: LD_VAR 0 3
20147: IFFALSE 20187
// begin if not HasTask ( i ) then
20149: LD_VAR 0 1
20153: PPUSH
20154: CALL_OW 314
20158: NOT
20159: IFFALSE 20185
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20161: LD_VAR 0 1
20165: PPUSH
20166: LD_VAR 0 3
20170: PPUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 74
20180: PPUSH
20181: CALL_OW 115
// end else
20185: GO 20269
// if amVehiclesAtttackers then
20187: LD_EXP 36
20191: IFFALSE 20269
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_INT 81
20200: PUSH
20201: LD_EXP 3
20205: PUSH
20206: LD_INT 1
20208: ARRAY
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PPUSH
20214: CALL_OW 69
20218: ST_TO_ADDR
// if enemy then
20219: LD_VAR 0 3
20223: IFFALSE 20269
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
20225: LD_VAR 0 1
20229: PPUSH
20230: LD_INT 49
20232: PUSH
20233: LD_INT 43
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 63
20242: PUSH
20243: LD_INT 56
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 72
20252: PUSH
20253: LD_INT 67
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: PPUSH
20265: CALL 82018 0 2
// end ; end ; end ;
20269: GO 19724
20271: POP
20272: POP
// end ;
20273: PPOPN 3
20275: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
20276: LD_INT 22
20278: PUSH
20279: LD_EXP 3
20283: PUSH
20284: LD_INT 1
20286: ARRAY
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 32
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PPUSH
20306: CALL_OW 69
20310: IFFALSE 20393
20312: GO 20314
20314: DISABLE
20315: LD_INT 0
20317: PPUSH
// begin enable ;
20318: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
20319: LD_ADDR_VAR 0 1
20323: PUSH
20324: LD_INT 22
20326: PUSH
20327: LD_EXP 3
20331: PUSH
20332: LD_INT 1
20334: ARRAY
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 32
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PPUSH
20354: CALL_OW 69
20358: PUSH
20359: FOR_IN
20360: IFFALSE 20391
// if GetFuel ( i ) < 3 then
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 261
20371: PUSH
20372: LD_INT 3
20374: LESS
20375: IFFALSE 20389
// SetFuel ( i , 3 ) ;
20377: LD_VAR 0 1
20381: PPUSH
20382: LD_INT 3
20384: PPUSH
20385: CALL_OW 240
20389: GO 20359
20391: POP
20392: POP
// end ; end_of_file
20393: PPOPN 1
20395: END
// every 0 0$20 trigger game do
20396: LD_EXP 2
20400: IFFALSE 20449
20402: GO 20404
20404: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
20405: LD_INT 20
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 3
20416: PUSH
20417: LD_INT 5
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: PPUSH
20427: LD_EXP 20
20431: PUSH
20432: LD_INT 2
20434: ARRAY
20435: PPUSH
20436: LD_EXP 20
20440: PUSH
20441: LD_INT 1
20443: ARRAY
20444: PPUSH
20445: CALL 20450 0 3
20449: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
20450: LD_INT 0
20452: PPUSH
20453: PPUSH
20454: PPUSH
20455: PPUSH
// if not areas then
20456: LD_VAR 0 1
20460: NOT
20461: IFFALSE 20465
// exit ;
20463: GO 20842
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
20465: LD_ADDR_VAR 0 7
20469: PUSH
20470: LD_INT 17
20472: PUSH
20473: LD_INT 18
20475: PUSH
20476: LD_INT 19
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: ST_TO_ADDR
// x := 5 ;
20484: LD_ADDR_VAR 0 6
20488: PUSH
20489: LD_INT 5
20491: ST_TO_ADDR
// repeat wait ( time ) ;
20492: LD_VAR 0 2
20496: PPUSH
20497: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
20501: LD_OWVAR 1
20505: PUSH
20506: LD_INT 37800
20508: PUSH
20509: LD_INT 31500
20511: PUSH
20512: LD_INT 25200
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: PUSH
20520: LD_OWVAR 67
20524: ARRAY
20525: LESS
20526: IFFALSE 20665
// begin for i := 1 to multi_sides do
20528: LD_ADDR_VAR 0 5
20532: PUSH
20533: DOUBLE
20534: LD_INT 1
20536: DEC
20537: ST_TO_ADDR
20538: LD_EXP 6
20542: PUSH
20543: FOR_TO
20544: IFFALSE 20656
// if multi_sides [ i ] then
20546: LD_EXP 6
20550: PUSH
20551: LD_VAR 0 5
20555: ARRAY
20556: IFFALSE 20654
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
20558: LD_VAR 0 7
20562: PUSH
20563: LD_EXP 6
20567: PUSH
20568: LD_VAR 0 5
20572: ARRAY
20573: ARRAY
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: CALL_OW 287
20582: PUSH
20583: LD_INT 32
20585: PUSH
20586: LD_INT 25
20588: PUSH
20589: LD_INT 23
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: PUSH
20597: LD_OWVAR 67
20601: ARRAY
20602: LESS
20603: IFFALSE 20654
// begin amount := amount - ( x * 10 ) ;
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_VAR 0 3
20614: PUSH
20615: LD_VAR 0 6
20619: PUSH
20620: LD_INT 10
20622: MUL
20623: MINUS
20624: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
20625: LD_VAR 0 6
20629: PPUSH
20630: LD_VAR 0 7
20634: PUSH
20635: LD_EXP 6
20639: PUSH
20640: LD_VAR 0 5
20644: ARRAY
20645: ARRAY
20646: PPUSH
20647: LD_INT 1
20649: PPUSH
20650: CALL_OW 55
// end ; end ;
20654: GO 20543
20656: POP
20657: POP
// wait ( 0 0$2 ) ;
20658: LD_INT 70
20660: PPUSH
20661: CALL_OW 67
// end ; for i in areas do
20665: LD_ADDR_VAR 0 5
20669: PUSH
20670: LD_VAR 0 1
20674: PUSH
20675: FOR_IN
20676: IFFALSE 20759
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
20678: LD_VAR 0 5
20682: PPUSH
20683: LD_INT 1
20685: PPUSH
20686: CALL_OW 287
20690: PUSH
20691: LD_INT 25
20693: PUSH
20694: LD_INT 22
20696: PUSH
20697: LD_INT 20
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: LIST
20704: PUSH
20705: LD_OWVAR 67
20709: ARRAY
20710: LESS
20711: IFFALSE 20757
// begin wait ( 0 0$5 ) ;
20713: LD_INT 175
20715: PPUSH
20716: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
20720: LD_VAR 0 6
20724: PPUSH
20725: LD_VAR 0 5
20729: PPUSH
20730: LD_INT 1
20732: PPUSH
20733: CALL_OW 55
// amount := amount - ( x * 10 ) ;
20737: LD_ADDR_VAR 0 3
20741: PUSH
20742: LD_VAR 0 3
20746: PUSH
20747: LD_VAR 0 6
20751: PUSH
20752: LD_INT 10
20754: MUL
20755: MINUS
20756: ST_TO_ADDR
// end ; end ;
20757: GO 20675
20759: POP
20760: POP
// time := time + 0 0$2 ;
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: LD_VAR 0 2
20770: PUSH
20771: LD_INT 70
20773: PLUS
20774: ST_TO_ADDR
// x := x - 1 ;
20775: LD_ADDR_VAR 0 6
20779: PUSH
20780: LD_VAR 0 6
20784: PUSH
20785: LD_INT 1
20787: MINUS
20788: ST_TO_ADDR
// if x = 0 then
20789: LD_VAR 0 6
20793: PUSH
20794: LD_INT 0
20796: EQUAL
20797: IFFALSE 20807
// x := 5 ;
20799: LD_ADDR_VAR 0 6
20803: PUSH
20804: LD_INT 5
20806: ST_TO_ADDR
// if time > 2 2$00 then
20807: LD_VAR 0 2
20811: PUSH
20812: LD_INT 4200
20814: GREATER
20815: IFFALSE 20825
// time := 0 0$30 ;
20817: LD_ADDR_VAR 0 2
20821: PUSH
20822: LD_INT 1050
20824: ST_TO_ADDR
// until not game or amount <= 0 ;
20825: LD_EXP 2
20829: NOT
20830: PUSH
20831: LD_VAR 0 3
20835: PUSH
20836: LD_INT 0
20838: LESSEQUAL
20839: OR
20840: IFFALSE 20492
// end ; end_of_file
20842: LD_VAR 0 4
20846: RET
// export globalGameSaveCounter ; every 0 0$1 do
20847: GO 20849
20849: DISABLE
// begin enable ;
20850: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20851: LD_STRING updateTimer(
20853: PUSH
20854: LD_OWVAR 1
20858: STR
20859: PUSH
20860: LD_STRING );
20862: STR
20863: PPUSH
20864: CALL_OW 559
// end ;
20868: END
// every 0 0$1 do
20869: GO 20871
20871: DISABLE
// begin globalGameSaveCounter := 0 ;
20872: LD_ADDR_EXP 57
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20880: LD_STRING setGameSaveCounter(0)
20882: PPUSH
20883: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20887: LD_STRING initStreamRollete();
20889: PPUSH
20890: CALL_OW 559
// InitStreamMode ;
20894: CALL 22237 0 0
// DefineStreamItems ( false ) ;
20898: LD_INT 0
20900: PPUSH
20901: CALL 22701 0 1
// end ;
20905: END
// export function SOS_MapStart ( ) ; begin
20906: LD_INT 0
20908: PPUSH
// if streamModeActive then
20909: LD_EXP 58
20913: IFFALSE 20922
// DefineStreamItems ( true ) ;
20915: LD_INT 1
20917: PPUSH
20918: CALL 22701 0 1
// UpdateLuaVariables ( ) ;
20922: CALL 20939 0 0
// UpdateFactoryWaypoints ( ) ;
20926: CALL 35570 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20930: CALL 35827 0 0
// end ;
20934: LD_VAR 0 1
20938: RET
// function UpdateLuaVariables ( ) ; begin
20939: LD_INT 0
20941: PPUSH
// if globalGameSaveCounter then
20942: LD_EXP 57
20946: IFFALSE 20980
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20948: LD_ADDR_EXP 57
20952: PUSH
20953: LD_EXP 57
20957: PPUSH
20958: CALL 80775 0 1
20962: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20963: LD_STRING setGameSaveCounter(
20965: PUSH
20966: LD_EXP 57
20970: STR
20971: PUSH
20972: LD_STRING )
20974: STR
20975: PPUSH
20976: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20980: LD_STRING setGameDifficulty(
20982: PUSH
20983: LD_OWVAR 67
20987: STR
20988: PUSH
20989: LD_STRING )
20991: STR
20992: PPUSH
20993: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20997: LD_STRING displayDifficulty(
20999: PUSH
21000: LD_OWVAR 67
21004: STR
21005: PUSH
21006: LD_STRING )
21008: STR
21009: PPUSH
21010: CALL_OW 559
// end ;
21014: LD_VAR 0 1
21018: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21019: LD_INT 0
21021: PPUSH
// if p2 = stream_mode then
21022: LD_VAR 0 2
21026: PUSH
21027: LD_INT 100
21029: EQUAL
21030: IFFALSE 22033
// begin if not StreamModeActive then
21032: LD_EXP 58
21036: NOT
21037: IFFALSE 21047
// StreamModeActive := true ;
21039: LD_ADDR_EXP 58
21043: PUSH
21044: LD_INT 1
21046: ST_TO_ADDR
// if p3 = 0 then
21047: LD_VAR 0 3
21051: PUSH
21052: LD_INT 0
21054: EQUAL
21055: IFFALSE 21061
// InitStreamMode ;
21057: CALL 22237 0 0
// if p3 = 1 then
21061: LD_VAR 0 3
21065: PUSH
21066: LD_INT 1
21068: EQUAL
21069: IFFALSE 21079
// sRocket := true ;
21071: LD_ADDR_EXP 63
21075: PUSH
21076: LD_INT 1
21078: ST_TO_ADDR
// if p3 = 2 then
21079: LD_VAR 0 3
21083: PUSH
21084: LD_INT 2
21086: EQUAL
21087: IFFALSE 21097
// sSpeed := true ;
21089: LD_ADDR_EXP 62
21093: PUSH
21094: LD_INT 1
21096: ST_TO_ADDR
// if p3 = 3 then
21097: LD_VAR 0 3
21101: PUSH
21102: LD_INT 3
21104: EQUAL
21105: IFFALSE 21115
// sEngine := true ;
21107: LD_ADDR_EXP 64
21111: PUSH
21112: LD_INT 1
21114: ST_TO_ADDR
// if p3 = 4 then
21115: LD_VAR 0 3
21119: PUSH
21120: LD_INT 4
21122: EQUAL
21123: IFFALSE 21133
// sSpec := true ;
21125: LD_ADDR_EXP 61
21129: PUSH
21130: LD_INT 1
21132: ST_TO_ADDR
// if p3 = 5 then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 5
21140: EQUAL
21141: IFFALSE 21151
// sLevel := true ;
21143: LD_ADDR_EXP 65
21147: PUSH
21148: LD_INT 1
21150: ST_TO_ADDR
// if p3 = 6 then
21151: LD_VAR 0 3
21155: PUSH
21156: LD_INT 6
21158: EQUAL
21159: IFFALSE 21169
// sArmoury := true ;
21161: LD_ADDR_EXP 66
21165: PUSH
21166: LD_INT 1
21168: ST_TO_ADDR
// if p3 = 7 then
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 7
21176: EQUAL
21177: IFFALSE 21187
// sRadar := true ;
21179: LD_ADDR_EXP 67
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// if p3 = 8 then
21187: LD_VAR 0 3
21191: PUSH
21192: LD_INT 8
21194: EQUAL
21195: IFFALSE 21205
// sBunker := true ;
21197: LD_ADDR_EXP 68
21201: PUSH
21202: LD_INT 1
21204: ST_TO_ADDR
// if p3 = 9 then
21205: LD_VAR 0 3
21209: PUSH
21210: LD_INT 9
21212: EQUAL
21213: IFFALSE 21223
// sHack := true ;
21215: LD_ADDR_EXP 69
21219: PUSH
21220: LD_INT 1
21222: ST_TO_ADDR
// if p3 = 10 then
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 10
21230: EQUAL
21231: IFFALSE 21241
// sFire := true ;
21233: LD_ADDR_EXP 70
21237: PUSH
21238: LD_INT 1
21240: ST_TO_ADDR
// if p3 = 11 then
21241: LD_VAR 0 3
21245: PUSH
21246: LD_INT 11
21248: EQUAL
21249: IFFALSE 21259
// sRefresh := true ;
21251: LD_ADDR_EXP 71
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
// if p3 = 12 then
21259: LD_VAR 0 3
21263: PUSH
21264: LD_INT 12
21266: EQUAL
21267: IFFALSE 21277
// sExp := true ;
21269: LD_ADDR_EXP 72
21273: PUSH
21274: LD_INT 1
21276: ST_TO_ADDR
// if p3 = 13 then
21277: LD_VAR 0 3
21281: PUSH
21282: LD_INT 13
21284: EQUAL
21285: IFFALSE 21295
// sDepot := true ;
21287: LD_ADDR_EXP 73
21291: PUSH
21292: LD_INT 1
21294: ST_TO_ADDR
// if p3 = 14 then
21295: LD_VAR 0 3
21299: PUSH
21300: LD_INT 14
21302: EQUAL
21303: IFFALSE 21313
// sFlag := true ;
21305: LD_ADDR_EXP 74
21309: PUSH
21310: LD_INT 1
21312: ST_TO_ADDR
// if p3 = 15 then
21313: LD_VAR 0 3
21317: PUSH
21318: LD_INT 15
21320: EQUAL
21321: IFFALSE 21331
// sKamikadze := true ;
21323: LD_ADDR_EXP 82
21327: PUSH
21328: LD_INT 1
21330: ST_TO_ADDR
// if p3 = 16 then
21331: LD_VAR 0 3
21335: PUSH
21336: LD_INT 16
21338: EQUAL
21339: IFFALSE 21349
// sTroll := true ;
21341: LD_ADDR_EXP 83
21345: PUSH
21346: LD_INT 1
21348: ST_TO_ADDR
// if p3 = 17 then
21349: LD_VAR 0 3
21353: PUSH
21354: LD_INT 17
21356: EQUAL
21357: IFFALSE 21367
// sSlow := true ;
21359: LD_ADDR_EXP 84
21363: PUSH
21364: LD_INT 1
21366: ST_TO_ADDR
// if p3 = 18 then
21367: LD_VAR 0 3
21371: PUSH
21372: LD_INT 18
21374: EQUAL
21375: IFFALSE 21385
// sLack := true ;
21377: LD_ADDR_EXP 85
21381: PUSH
21382: LD_INT 1
21384: ST_TO_ADDR
// if p3 = 19 then
21385: LD_VAR 0 3
21389: PUSH
21390: LD_INT 19
21392: EQUAL
21393: IFFALSE 21403
// sTank := true ;
21395: LD_ADDR_EXP 87
21399: PUSH
21400: LD_INT 1
21402: ST_TO_ADDR
// if p3 = 20 then
21403: LD_VAR 0 3
21407: PUSH
21408: LD_INT 20
21410: EQUAL
21411: IFFALSE 21421
// sRemote := true ;
21413: LD_ADDR_EXP 88
21417: PUSH
21418: LD_INT 1
21420: ST_TO_ADDR
// if p3 = 21 then
21421: LD_VAR 0 3
21425: PUSH
21426: LD_INT 21
21428: EQUAL
21429: IFFALSE 21439
// sPowell := true ;
21431: LD_ADDR_EXP 89
21435: PUSH
21436: LD_INT 1
21438: ST_TO_ADDR
// if p3 = 22 then
21439: LD_VAR 0 3
21443: PUSH
21444: LD_INT 22
21446: EQUAL
21447: IFFALSE 21457
// sTeleport := true ;
21449: LD_ADDR_EXP 92
21453: PUSH
21454: LD_INT 1
21456: ST_TO_ADDR
// if p3 = 23 then
21457: LD_VAR 0 3
21461: PUSH
21462: LD_INT 23
21464: EQUAL
21465: IFFALSE 21475
// sOilTower := true ;
21467: LD_ADDR_EXP 94
21471: PUSH
21472: LD_INT 1
21474: ST_TO_ADDR
// if p3 = 24 then
21475: LD_VAR 0 3
21479: PUSH
21480: LD_INT 24
21482: EQUAL
21483: IFFALSE 21493
// sShovel := true ;
21485: LD_ADDR_EXP 95
21489: PUSH
21490: LD_INT 1
21492: ST_TO_ADDR
// if p3 = 25 then
21493: LD_VAR 0 3
21497: PUSH
21498: LD_INT 25
21500: EQUAL
21501: IFFALSE 21511
// sSheik := true ;
21503: LD_ADDR_EXP 96
21507: PUSH
21508: LD_INT 1
21510: ST_TO_ADDR
// if p3 = 26 then
21511: LD_VAR 0 3
21515: PUSH
21516: LD_INT 26
21518: EQUAL
21519: IFFALSE 21529
// sEarthquake := true ;
21521: LD_ADDR_EXP 98
21525: PUSH
21526: LD_INT 1
21528: ST_TO_ADDR
// if p3 = 27 then
21529: LD_VAR 0 3
21533: PUSH
21534: LD_INT 27
21536: EQUAL
21537: IFFALSE 21547
// sAI := true ;
21539: LD_ADDR_EXP 99
21543: PUSH
21544: LD_INT 1
21546: ST_TO_ADDR
// if p3 = 28 then
21547: LD_VAR 0 3
21551: PUSH
21552: LD_INT 28
21554: EQUAL
21555: IFFALSE 21565
// sCargo := true ;
21557: LD_ADDR_EXP 102
21561: PUSH
21562: LD_INT 1
21564: ST_TO_ADDR
// if p3 = 29 then
21565: LD_VAR 0 3
21569: PUSH
21570: LD_INT 29
21572: EQUAL
21573: IFFALSE 21583
// sDLaser := true ;
21575: LD_ADDR_EXP 103
21579: PUSH
21580: LD_INT 1
21582: ST_TO_ADDR
// if p3 = 30 then
21583: LD_VAR 0 3
21587: PUSH
21588: LD_INT 30
21590: EQUAL
21591: IFFALSE 21601
// sExchange := true ;
21593: LD_ADDR_EXP 104
21597: PUSH
21598: LD_INT 1
21600: ST_TO_ADDR
// if p3 = 31 then
21601: LD_VAR 0 3
21605: PUSH
21606: LD_INT 31
21608: EQUAL
21609: IFFALSE 21619
// sFac := true ;
21611: LD_ADDR_EXP 105
21615: PUSH
21616: LD_INT 1
21618: ST_TO_ADDR
// if p3 = 32 then
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 32
21626: EQUAL
21627: IFFALSE 21637
// sPower := true ;
21629: LD_ADDR_EXP 106
21633: PUSH
21634: LD_INT 1
21636: ST_TO_ADDR
// if p3 = 33 then
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 33
21644: EQUAL
21645: IFFALSE 21655
// sRandom := true ;
21647: LD_ADDR_EXP 107
21651: PUSH
21652: LD_INT 1
21654: ST_TO_ADDR
// if p3 = 34 then
21655: LD_VAR 0 3
21659: PUSH
21660: LD_INT 34
21662: EQUAL
21663: IFFALSE 21673
// sShield := true ;
21665: LD_ADDR_EXP 108
21669: PUSH
21670: LD_INT 1
21672: ST_TO_ADDR
// if p3 = 35 then
21673: LD_VAR 0 3
21677: PUSH
21678: LD_INT 35
21680: EQUAL
21681: IFFALSE 21691
// sTime := true ;
21683: LD_ADDR_EXP 109
21687: PUSH
21688: LD_INT 1
21690: ST_TO_ADDR
// if p3 = 36 then
21691: LD_VAR 0 3
21695: PUSH
21696: LD_INT 36
21698: EQUAL
21699: IFFALSE 21709
// sTools := true ;
21701: LD_ADDR_EXP 110
21705: PUSH
21706: LD_INT 1
21708: ST_TO_ADDR
// if p3 = 101 then
21709: LD_VAR 0 3
21713: PUSH
21714: LD_INT 101
21716: EQUAL
21717: IFFALSE 21727
// sSold := true ;
21719: LD_ADDR_EXP 75
21723: PUSH
21724: LD_INT 1
21726: ST_TO_ADDR
// if p3 = 102 then
21727: LD_VAR 0 3
21731: PUSH
21732: LD_INT 102
21734: EQUAL
21735: IFFALSE 21745
// sDiff := true ;
21737: LD_ADDR_EXP 76
21741: PUSH
21742: LD_INT 1
21744: ST_TO_ADDR
// if p3 = 103 then
21745: LD_VAR 0 3
21749: PUSH
21750: LD_INT 103
21752: EQUAL
21753: IFFALSE 21763
// sFog := true ;
21755: LD_ADDR_EXP 79
21759: PUSH
21760: LD_INT 1
21762: ST_TO_ADDR
// if p3 = 104 then
21763: LD_VAR 0 3
21767: PUSH
21768: LD_INT 104
21770: EQUAL
21771: IFFALSE 21781
// sReset := true ;
21773: LD_ADDR_EXP 80
21777: PUSH
21778: LD_INT 1
21780: ST_TO_ADDR
// if p3 = 105 then
21781: LD_VAR 0 3
21785: PUSH
21786: LD_INT 105
21788: EQUAL
21789: IFFALSE 21799
// sSun := true ;
21791: LD_ADDR_EXP 81
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// if p3 = 106 then
21799: LD_VAR 0 3
21803: PUSH
21804: LD_INT 106
21806: EQUAL
21807: IFFALSE 21817
// sTiger := true ;
21809: LD_ADDR_EXP 77
21813: PUSH
21814: LD_INT 1
21816: ST_TO_ADDR
// if p3 = 107 then
21817: LD_VAR 0 3
21821: PUSH
21822: LD_INT 107
21824: EQUAL
21825: IFFALSE 21835
// sBomb := true ;
21827: LD_ADDR_EXP 78
21831: PUSH
21832: LD_INT 1
21834: ST_TO_ADDR
// if p3 = 108 then
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 108
21842: EQUAL
21843: IFFALSE 21853
// sWound := true ;
21845: LD_ADDR_EXP 86
21849: PUSH
21850: LD_INT 1
21852: ST_TO_ADDR
// if p3 = 109 then
21853: LD_VAR 0 3
21857: PUSH
21858: LD_INT 109
21860: EQUAL
21861: IFFALSE 21871
// sBetray := true ;
21863: LD_ADDR_EXP 90
21867: PUSH
21868: LD_INT 1
21870: ST_TO_ADDR
// if p3 = 110 then
21871: LD_VAR 0 3
21875: PUSH
21876: LD_INT 110
21878: EQUAL
21879: IFFALSE 21889
// sContamin := true ;
21881: LD_ADDR_EXP 91
21885: PUSH
21886: LD_INT 1
21888: ST_TO_ADDR
// if p3 = 111 then
21889: LD_VAR 0 3
21893: PUSH
21894: LD_INT 111
21896: EQUAL
21897: IFFALSE 21907
// sOil := true ;
21899: LD_ADDR_EXP 93
21903: PUSH
21904: LD_INT 1
21906: ST_TO_ADDR
// if p3 = 112 then
21907: LD_VAR 0 3
21911: PUSH
21912: LD_INT 112
21914: EQUAL
21915: IFFALSE 21925
// sStu := true ;
21917: LD_ADDR_EXP 97
21921: PUSH
21922: LD_INT 1
21924: ST_TO_ADDR
// if p3 = 113 then
21925: LD_VAR 0 3
21929: PUSH
21930: LD_INT 113
21932: EQUAL
21933: IFFALSE 21943
// sBazooka := true ;
21935: LD_ADDR_EXP 100
21939: PUSH
21940: LD_INT 1
21942: ST_TO_ADDR
// if p3 = 114 then
21943: LD_VAR 0 3
21947: PUSH
21948: LD_INT 114
21950: EQUAL
21951: IFFALSE 21961
// sMortar := true ;
21953: LD_ADDR_EXP 101
21957: PUSH
21958: LD_INT 1
21960: ST_TO_ADDR
// if p3 = 115 then
21961: LD_VAR 0 3
21965: PUSH
21966: LD_INT 115
21968: EQUAL
21969: IFFALSE 21979
// sRanger := true ;
21971: LD_ADDR_EXP 111
21975: PUSH
21976: LD_INT 1
21978: ST_TO_ADDR
// if p3 = 116 then
21979: LD_VAR 0 3
21983: PUSH
21984: LD_INT 116
21986: EQUAL
21987: IFFALSE 21997
// sComputer := true ;
21989: LD_ADDR_EXP 112
21993: PUSH
21994: LD_INT 1
21996: ST_TO_ADDR
// if p3 = 117 then
21997: LD_VAR 0 3
22001: PUSH
22002: LD_INT 117
22004: EQUAL
22005: IFFALSE 22015
// s30 := true ;
22007: LD_ADDR_EXP 113
22011: PUSH
22012: LD_INT 1
22014: ST_TO_ADDR
// if p3 = 118 then
22015: LD_VAR 0 3
22019: PUSH
22020: LD_INT 118
22022: EQUAL
22023: IFFALSE 22033
// s60 := true ;
22025: LD_ADDR_EXP 114
22029: PUSH
22030: LD_INT 1
22032: ST_TO_ADDR
// end ; if p2 = hack_mode then
22033: LD_VAR 0 2
22037: PUSH
22038: LD_INT 101
22040: EQUAL
22041: IFFALSE 22169
// begin case p3 of 1 :
22043: LD_VAR 0 3
22047: PUSH
22048: LD_INT 1
22050: DOUBLE
22051: EQUAL
22052: IFTRUE 22056
22054: GO 22063
22056: POP
// hHackUnlimitedResources ; 2 :
22057: CALL 34316 0 0
22061: GO 22169
22063: LD_INT 2
22065: DOUBLE
22066: EQUAL
22067: IFTRUE 22071
22069: GO 22078
22071: POP
// hHackSetLevel10 ; 3 :
22072: CALL 34449 0 0
22076: GO 22169
22078: LD_INT 3
22080: DOUBLE
22081: EQUAL
22082: IFTRUE 22086
22084: GO 22093
22086: POP
// hHackSetLevel10YourUnits ; 4 :
22087: CALL 34534 0 0
22091: GO 22169
22093: LD_INT 4
22095: DOUBLE
22096: EQUAL
22097: IFTRUE 22101
22099: GO 22108
22101: POP
// hHackInvincible ; 5 :
22102: CALL 34982 0 0
22106: GO 22169
22108: LD_INT 5
22110: DOUBLE
22111: EQUAL
22112: IFTRUE 22116
22114: GO 22123
22116: POP
// hHackInvisible ; 6 :
22117: CALL 35093 0 0
22121: GO 22169
22123: LD_INT 6
22125: DOUBLE
22126: EQUAL
22127: IFTRUE 22131
22129: GO 22138
22131: POP
// hHackChangeYourSide ; 7 :
22132: CALL 35150 0 0
22136: GO 22169
22138: LD_INT 7
22140: DOUBLE
22141: EQUAL
22142: IFTRUE 22146
22144: GO 22153
22146: POP
// hHackChangeUnitSide ; 8 :
22147: CALL 35192 0 0
22151: GO 22169
22153: LD_INT 8
22155: DOUBLE
22156: EQUAL
22157: IFTRUE 22161
22159: GO 22168
22161: POP
// hHackFog ; end ;
22162: CALL 35293 0 0
22166: GO 22169
22168: POP
// end ; if p2 = game_save_mode then
22169: LD_VAR 0 2
22173: PUSH
22174: LD_INT 102
22176: EQUAL
22177: IFFALSE 22232
// begin if p3 = 1 then
22179: LD_VAR 0 3
22183: PUSH
22184: LD_INT 1
22186: EQUAL
22187: IFFALSE 22199
// globalGameSaveCounter := p4 ;
22189: LD_ADDR_EXP 57
22193: PUSH
22194: LD_VAR 0 4
22198: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22199: LD_VAR 0 3
22203: PUSH
22204: LD_INT 2
22206: EQUAL
22207: PUSH
22208: LD_EXP 57
22212: AND
22213: IFFALSE 22232
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22215: LD_STRING setGameSaveCounter(
22217: PUSH
22218: LD_EXP 57
22222: STR
22223: PUSH
22224: LD_STRING )
22226: STR
22227: PPUSH
22228: CALL_OW 559
// end ; end ;
22232: LD_VAR 0 7
22236: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22237: LD_INT 0
22239: PPUSH
// streamModeActive := false ;
22240: LD_ADDR_EXP 58
22244: PUSH
22245: LD_INT 0
22247: ST_TO_ADDR
// normalCounter := 36 ;
22248: LD_ADDR_EXP 59
22252: PUSH
22253: LD_INT 36
22255: ST_TO_ADDR
// hardcoreCounter := 18 ;
22256: LD_ADDR_EXP 60
22260: PUSH
22261: LD_INT 18
22263: ST_TO_ADDR
// sRocket := false ;
22264: LD_ADDR_EXP 63
22268: PUSH
22269: LD_INT 0
22271: ST_TO_ADDR
// sSpeed := false ;
22272: LD_ADDR_EXP 62
22276: PUSH
22277: LD_INT 0
22279: ST_TO_ADDR
// sEngine := false ;
22280: LD_ADDR_EXP 64
22284: PUSH
22285: LD_INT 0
22287: ST_TO_ADDR
// sSpec := false ;
22288: LD_ADDR_EXP 61
22292: PUSH
22293: LD_INT 0
22295: ST_TO_ADDR
// sLevel := false ;
22296: LD_ADDR_EXP 65
22300: PUSH
22301: LD_INT 0
22303: ST_TO_ADDR
// sArmoury := false ;
22304: LD_ADDR_EXP 66
22308: PUSH
22309: LD_INT 0
22311: ST_TO_ADDR
// sRadar := false ;
22312: LD_ADDR_EXP 67
22316: PUSH
22317: LD_INT 0
22319: ST_TO_ADDR
// sBunker := false ;
22320: LD_ADDR_EXP 68
22324: PUSH
22325: LD_INT 0
22327: ST_TO_ADDR
// sHack := false ;
22328: LD_ADDR_EXP 69
22332: PUSH
22333: LD_INT 0
22335: ST_TO_ADDR
// sFire := false ;
22336: LD_ADDR_EXP 70
22340: PUSH
22341: LD_INT 0
22343: ST_TO_ADDR
// sRefresh := false ;
22344: LD_ADDR_EXP 71
22348: PUSH
22349: LD_INT 0
22351: ST_TO_ADDR
// sExp := false ;
22352: LD_ADDR_EXP 72
22356: PUSH
22357: LD_INT 0
22359: ST_TO_ADDR
// sDepot := false ;
22360: LD_ADDR_EXP 73
22364: PUSH
22365: LD_INT 0
22367: ST_TO_ADDR
// sFlag := false ;
22368: LD_ADDR_EXP 74
22372: PUSH
22373: LD_INT 0
22375: ST_TO_ADDR
// sKamikadze := false ;
22376: LD_ADDR_EXP 82
22380: PUSH
22381: LD_INT 0
22383: ST_TO_ADDR
// sTroll := false ;
22384: LD_ADDR_EXP 83
22388: PUSH
22389: LD_INT 0
22391: ST_TO_ADDR
// sSlow := false ;
22392: LD_ADDR_EXP 84
22396: PUSH
22397: LD_INT 0
22399: ST_TO_ADDR
// sLack := false ;
22400: LD_ADDR_EXP 85
22404: PUSH
22405: LD_INT 0
22407: ST_TO_ADDR
// sTank := false ;
22408: LD_ADDR_EXP 87
22412: PUSH
22413: LD_INT 0
22415: ST_TO_ADDR
// sRemote := false ;
22416: LD_ADDR_EXP 88
22420: PUSH
22421: LD_INT 0
22423: ST_TO_ADDR
// sPowell := false ;
22424: LD_ADDR_EXP 89
22428: PUSH
22429: LD_INT 0
22431: ST_TO_ADDR
// sTeleport := false ;
22432: LD_ADDR_EXP 92
22436: PUSH
22437: LD_INT 0
22439: ST_TO_ADDR
// sOilTower := false ;
22440: LD_ADDR_EXP 94
22444: PUSH
22445: LD_INT 0
22447: ST_TO_ADDR
// sShovel := false ;
22448: LD_ADDR_EXP 95
22452: PUSH
22453: LD_INT 0
22455: ST_TO_ADDR
// sSheik := false ;
22456: LD_ADDR_EXP 96
22460: PUSH
22461: LD_INT 0
22463: ST_TO_ADDR
// sEarthquake := false ;
22464: LD_ADDR_EXP 98
22468: PUSH
22469: LD_INT 0
22471: ST_TO_ADDR
// sAI := false ;
22472: LD_ADDR_EXP 99
22476: PUSH
22477: LD_INT 0
22479: ST_TO_ADDR
// sCargo := false ;
22480: LD_ADDR_EXP 102
22484: PUSH
22485: LD_INT 0
22487: ST_TO_ADDR
// sDLaser := false ;
22488: LD_ADDR_EXP 103
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// sExchange := false ;
22496: LD_ADDR_EXP 104
22500: PUSH
22501: LD_INT 0
22503: ST_TO_ADDR
// sFac := false ;
22504: LD_ADDR_EXP 105
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// sPower := false ;
22512: LD_ADDR_EXP 106
22516: PUSH
22517: LD_INT 0
22519: ST_TO_ADDR
// sRandom := false ;
22520: LD_ADDR_EXP 107
22524: PUSH
22525: LD_INT 0
22527: ST_TO_ADDR
// sShield := false ;
22528: LD_ADDR_EXP 108
22532: PUSH
22533: LD_INT 0
22535: ST_TO_ADDR
// sTime := false ;
22536: LD_ADDR_EXP 109
22540: PUSH
22541: LD_INT 0
22543: ST_TO_ADDR
// sTools := false ;
22544: LD_ADDR_EXP 110
22548: PUSH
22549: LD_INT 0
22551: ST_TO_ADDR
// sSold := false ;
22552: LD_ADDR_EXP 75
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// sDiff := false ;
22560: LD_ADDR_EXP 76
22564: PUSH
22565: LD_INT 0
22567: ST_TO_ADDR
// sFog := false ;
22568: LD_ADDR_EXP 79
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// sReset := false ;
22576: LD_ADDR_EXP 80
22580: PUSH
22581: LD_INT 0
22583: ST_TO_ADDR
// sSun := false ;
22584: LD_ADDR_EXP 81
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
// sTiger := false ;
22592: LD_ADDR_EXP 77
22596: PUSH
22597: LD_INT 0
22599: ST_TO_ADDR
// sBomb := false ;
22600: LD_ADDR_EXP 78
22604: PUSH
22605: LD_INT 0
22607: ST_TO_ADDR
// sWound := false ;
22608: LD_ADDR_EXP 86
22612: PUSH
22613: LD_INT 0
22615: ST_TO_ADDR
// sBetray := false ;
22616: LD_ADDR_EXP 90
22620: PUSH
22621: LD_INT 0
22623: ST_TO_ADDR
// sContamin := false ;
22624: LD_ADDR_EXP 91
22628: PUSH
22629: LD_INT 0
22631: ST_TO_ADDR
// sOil := false ;
22632: LD_ADDR_EXP 93
22636: PUSH
22637: LD_INT 0
22639: ST_TO_ADDR
// sStu := false ;
22640: LD_ADDR_EXP 97
22644: PUSH
22645: LD_INT 0
22647: ST_TO_ADDR
// sBazooka := false ;
22648: LD_ADDR_EXP 100
22652: PUSH
22653: LD_INT 0
22655: ST_TO_ADDR
// sMortar := false ;
22656: LD_ADDR_EXP 101
22660: PUSH
22661: LD_INT 0
22663: ST_TO_ADDR
// sRanger := false ;
22664: LD_ADDR_EXP 111
22668: PUSH
22669: LD_INT 0
22671: ST_TO_ADDR
// sComputer := false ;
22672: LD_ADDR_EXP 112
22676: PUSH
22677: LD_INT 0
22679: ST_TO_ADDR
// s30 := false ;
22680: LD_ADDR_EXP 113
22684: PUSH
22685: LD_INT 0
22687: ST_TO_ADDR
// s60 := false ;
22688: LD_ADDR_EXP 114
22692: PUSH
22693: LD_INT 0
22695: ST_TO_ADDR
// end ;
22696: LD_VAR 0 1
22700: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
22705: PPUSH
22706: PPUSH
22707: PPUSH
22708: PPUSH
22709: PPUSH
// result := [ ] ;
22710: LD_ADDR_VAR 0 2
22714: PUSH
22715: EMPTY
22716: ST_TO_ADDR
// if campaign_id = 1 then
22717: LD_OWVAR 69
22721: PUSH
22722: LD_INT 1
22724: EQUAL
22725: IFFALSE 25891
// begin case mission_number of 1 :
22727: LD_OWVAR 70
22731: PUSH
22732: LD_INT 1
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22816
22740: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 11
22754: PUSH
22755: LD_INT 12
22757: PUSH
22758: LD_INT 15
22760: PUSH
22761: LD_INT 16
22763: PUSH
22764: LD_INT 22
22766: PUSH
22767: LD_INT 23
22769: PUSH
22770: LD_INT 26
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 101
22786: PUSH
22787: LD_INT 102
22789: PUSH
22790: LD_INT 106
22792: PUSH
22793: LD_INT 116
22795: PUSH
22796: LD_INT 117
22798: PUSH
22799: LD_INT 118
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: ST_TO_ADDR
22814: GO 25889
22816: LD_INT 2
22818: DOUBLE
22819: EQUAL
22820: IFTRUE 22824
22822: GO 22908
22824: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22825: LD_ADDR_VAR 0 2
22829: PUSH
22830: LD_INT 2
22832: PUSH
22833: LD_INT 4
22835: PUSH
22836: LD_INT 11
22838: PUSH
22839: LD_INT 12
22841: PUSH
22842: LD_INT 15
22844: PUSH
22845: LD_INT 16
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 23
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 101
22870: PUSH
22871: LD_INT 102
22873: PUSH
22874: LD_INT 105
22876: PUSH
22877: LD_INT 106
22879: PUSH
22880: LD_INT 108
22882: PUSH
22883: LD_INT 116
22885: PUSH
22886: LD_INT 117
22888: PUSH
22889: LD_INT 118
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: ST_TO_ADDR
22906: GO 25889
22908: LD_INT 3
22910: DOUBLE
22911: EQUAL
22912: IFTRUE 22916
22914: GO 23004
22916: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22917: LD_ADDR_VAR 0 2
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: LD_INT 4
22927: PUSH
22928: LD_INT 5
22930: PUSH
22931: LD_INT 11
22933: PUSH
22934: LD_INT 12
22936: PUSH
22937: LD_INT 15
22939: PUSH
22940: LD_INT 16
22942: PUSH
22943: LD_INT 22
22945: PUSH
22946: LD_INT 26
22948: PUSH
22949: LD_INT 36
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 101
22966: PUSH
22967: LD_INT 102
22969: PUSH
22970: LD_INT 105
22972: PUSH
22973: LD_INT 106
22975: PUSH
22976: LD_INT 108
22978: PUSH
22979: LD_INT 116
22981: PUSH
22982: LD_INT 117
22984: PUSH
22985: LD_INT 118
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: ST_TO_ADDR
23002: GO 25889
23004: LD_INT 4
23006: DOUBLE
23007: EQUAL
23008: IFTRUE 23012
23010: GO 23108
23012: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23013: LD_ADDR_VAR 0 2
23017: PUSH
23018: LD_INT 2
23020: PUSH
23021: LD_INT 4
23023: PUSH
23024: LD_INT 5
23026: PUSH
23027: LD_INT 8
23029: PUSH
23030: LD_INT 11
23032: PUSH
23033: LD_INT 12
23035: PUSH
23036: LD_INT 15
23038: PUSH
23039: LD_INT 16
23041: PUSH
23042: LD_INT 22
23044: PUSH
23045: LD_INT 23
23047: PUSH
23048: LD_INT 26
23050: PUSH
23051: LD_INT 36
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 101
23070: PUSH
23071: LD_INT 102
23073: PUSH
23074: LD_INT 105
23076: PUSH
23077: LD_INT 106
23079: PUSH
23080: LD_INT 108
23082: PUSH
23083: LD_INT 116
23085: PUSH
23086: LD_INT 117
23088: PUSH
23089: LD_INT 118
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: ST_TO_ADDR
23106: GO 25889
23108: LD_INT 5
23110: DOUBLE
23111: EQUAL
23112: IFTRUE 23116
23114: GO 23228
23116: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23117: LD_ADDR_VAR 0 2
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: LD_INT 4
23127: PUSH
23128: LD_INT 5
23130: PUSH
23131: LD_INT 6
23133: PUSH
23134: LD_INT 8
23136: PUSH
23137: LD_INT 11
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 15
23145: PUSH
23146: LD_INT 16
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 23
23154: PUSH
23155: LD_INT 25
23157: PUSH
23158: LD_INT 26
23160: PUSH
23161: LD_INT 36
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 101
23182: PUSH
23183: LD_INT 102
23185: PUSH
23186: LD_INT 105
23188: PUSH
23189: LD_INT 106
23191: PUSH
23192: LD_INT 108
23194: PUSH
23195: LD_INT 109
23197: PUSH
23198: LD_INT 112
23200: PUSH
23201: LD_INT 116
23203: PUSH
23204: LD_INT 117
23206: PUSH
23207: LD_INT 118
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: ST_TO_ADDR
23226: GO 25889
23228: LD_INT 6
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23368
23236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: LD_INT 4
23247: PUSH
23248: LD_INT 5
23250: PUSH
23251: LD_INT 6
23253: PUSH
23254: LD_INT 8
23256: PUSH
23257: LD_INT 11
23259: PUSH
23260: LD_INT 12
23262: PUSH
23263: LD_INT 15
23265: PUSH
23266: LD_INT 16
23268: PUSH
23269: LD_INT 20
23271: PUSH
23272: LD_INT 21
23274: PUSH
23275: LD_INT 22
23277: PUSH
23278: LD_INT 23
23280: PUSH
23281: LD_INT 25
23283: PUSH
23284: LD_INT 26
23286: PUSH
23287: LD_INT 30
23289: PUSH
23290: LD_INT 31
23292: PUSH
23293: LD_INT 32
23295: PUSH
23296: LD_INT 36
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 101
23322: PUSH
23323: LD_INT 102
23325: PUSH
23326: LD_INT 105
23328: PUSH
23329: LD_INT 106
23331: PUSH
23332: LD_INT 108
23334: PUSH
23335: LD_INT 109
23337: PUSH
23338: LD_INT 112
23340: PUSH
23341: LD_INT 116
23343: PUSH
23344: LD_INT 117
23346: PUSH
23347: LD_INT 118
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: ST_TO_ADDR
23366: GO 25889
23368: LD_INT 7
23370: DOUBLE
23371: EQUAL
23372: IFTRUE 23376
23374: GO 23488
23376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23377: LD_ADDR_VAR 0 2
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: LD_INT 4
23387: PUSH
23388: LD_INT 5
23390: PUSH
23391: LD_INT 7
23393: PUSH
23394: LD_INT 11
23396: PUSH
23397: LD_INT 12
23399: PUSH
23400: LD_INT 15
23402: PUSH
23403: LD_INT 16
23405: PUSH
23406: LD_INT 20
23408: PUSH
23409: LD_INT 21
23411: PUSH
23412: LD_INT 22
23414: PUSH
23415: LD_INT 23
23417: PUSH
23418: LD_INT 25
23420: PUSH
23421: LD_INT 26
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 101
23442: PUSH
23443: LD_INT 102
23445: PUSH
23446: LD_INT 103
23448: PUSH
23449: LD_INT 105
23451: PUSH
23452: LD_INT 106
23454: PUSH
23455: LD_INT 108
23457: PUSH
23458: LD_INT 112
23460: PUSH
23461: LD_INT 116
23463: PUSH
23464: LD_INT 117
23466: PUSH
23467: LD_INT 118
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: ST_TO_ADDR
23486: GO 25889
23488: LD_INT 8
23490: DOUBLE
23491: EQUAL
23492: IFTRUE 23496
23494: GO 23636
23496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_INT 2
23504: PUSH
23505: LD_INT 4
23507: PUSH
23508: LD_INT 5
23510: PUSH
23511: LD_INT 6
23513: PUSH
23514: LD_INT 7
23516: PUSH
23517: LD_INT 8
23519: PUSH
23520: LD_INT 11
23522: PUSH
23523: LD_INT 12
23525: PUSH
23526: LD_INT 15
23528: PUSH
23529: LD_INT 16
23531: PUSH
23532: LD_INT 20
23534: PUSH
23535: LD_INT 21
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 23
23543: PUSH
23544: LD_INT 25
23546: PUSH
23547: LD_INT 26
23549: PUSH
23550: LD_INT 30
23552: PUSH
23553: LD_INT 31
23555: PUSH
23556: LD_INT 32
23558: PUSH
23559: LD_INT 36
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 101
23586: PUSH
23587: LD_INT 102
23589: PUSH
23590: LD_INT 103
23592: PUSH
23593: LD_INT 105
23595: PUSH
23596: LD_INT 106
23598: PUSH
23599: LD_INT 108
23601: PUSH
23602: LD_INT 109
23604: PUSH
23605: LD_INT 112
23607: PUSH
23608: LD_INT 116
23610: PUSH
23611: LD_INT 117
23613: PUSH
23614: LD_INT 118
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: ST_TO_ADDR
23634: GO 25889
23636: LD_INT 9
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23792
23644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23645: LD_ADDR_VAR 0 2
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 4
23655: PUSH
23656: LD_INT 5
23658: PUSH
23659: LD_INT 6
23661: PUSH
23662: LD_INT 7
23664: PUSH
23665: LD_INT 8
23667: PUSH
23668: LD_INT 11
23670: PUSH
23671: LD_INT 12
23673: PUSH
23674: LD_INT 15
23676: PUSH
23677: LD_INT 16
23679: PUSH
23680: LD_INT 20
23682: PUSH
23683: LD_INT 21
23685: PUSH
23686: LD_INT 22
23688: PUSH
23689: LD_INT 23
23691: PUSH
23692: LD_INT 25
23694: PUSH
23695: LD_INT 26
23697: PUSH
23698: LD_INT 28
23700: PUSH
23701: LD_INT 30
23703: PUSH
23704: LD_INT 31
23706: PUSH
23707: LD_INT 32
23709: PUSH
23710: LD_INT 36
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 101
23738: PUSH
23739: LD_INT 102
23741: PUSH
23742: LD_INT 103
23744: PUSH
23745: LD_INT 105
23747: PUSH
23748: LD_INT 106
23750: PUSH
23751: LD_INT 108
23753: PUSH
23754: LD_INT 109
23756: PUSH
23757: LD_INT 112
23759: PUSH
23760: LD_INT 114
23762: PUSH
23763: LD_INT 116
23765: PUSH
23766: LD_INT 117
23768: PUSH
23769: LD_INT 118
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: ST_TO_ADDR
23790: GO 25889
23792: LD_INT 10
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23996
23800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 4
23811: PUSH
23812: LD_INT 5
23814: PUSH
23815: LD_INT 6
23817: PUSH
23818: LD_INT 7
23820: PUSH
23821: LD_INT 8
23823: PUSH
23824: LD_INT 9
23826: PUSH
23827: LD_INT 10
23829: PUSH
23830: LD_INT 11
23832: PUSH
23833: LD_INT 12
23835: PUSH
23836: LD_INT 13
23838: PUSH
23839: LD_INT 14
23841: PUSH
23842: LD_INT 15
23844: PUSH
23845: LD_INT 16
23847: PUSH
23848: LD_INT 17
23850: PUSH
23851: LD_INT 18
23853: PUSH
23854: LD_INT 19
23856: PUSH
23857: LD_INT 20
23859: PUSH
23860: LD_INT 21
23862: PUSH
23863: LD_INT 22
23865: PUSH
23866: LD_INT 23
23868: PUSH
23869: LD_INT 24
23871: PUSH
23872: LD_INT 25
23874: PUSH
23875: LD_INT 26
23877: PUSH
23878: LD_INT 28
23880: PUSH
23881: LD_INT 30
23883: PUSH
23884: LD_INT 31
23886: PUSH
23887: LD_INT 32
23889: PUSH
23890: LD_INT 36
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 101
23926: PUSH
23927: LD_INT 102
23929: PUSH
23930: LD_INT 103
23932: PUSH
23933: LD_INT 104
23935: PUSH
23936: LD_INT 105
23938: PUSH
23939: LD_INT 106
23941: PUSH
23942: LD_INT 107
23944: PUSH
23945: LD_INT 108
23947: PUSH
23948: LD_INT 109
23950: PUSH
23951: LD_INT 110
23953: PUSH
23954: LD_INT 111
23956: PUSH
23957: LD_INT 112
23959: PUSH
23960: LD_INT 114
23962: PUSH
23963: LD_INT 116
23965: PUSH
23966: LD_INT 117
23968: PUSH
23969: LD_INT 118
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: ST_TO_ADDR
23994: GO 25889
23996: LD_INT 11
23998: DOUBLE
23999: EQUAL
24000: IFTRUE 24004
24002: GO 24208
24004: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24005: LD_ADDR_VAR 0 2
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: LD_INT 4
24018: PUSH
24019: LD_INT 5
24021: PUSH
24022: LD_INT 6
24024: PUSH
24025: LD_INT 7
24027: PUSH
24028: LD_INT 8
24030: PUSH
24031: LD_INT 9
24033: PUSH
24034: LD_INT 10
24036: PUSH
24037: LD_INT 11
24039: PUSH
24040: LD_INT 12
24042: PUSH
24043: LD_INT 13
24045: PUSH
24046: LD_INT 14
24048: PUSH
24049: LD_INT 15
24051: PUSH
24052: LD_INT 16
24054: PUSH
24055: LD_INT 17
24057: PUSH
24058: LD_INT 18
24060: PUSH
24061: LD_INT 19
24063: PUSH
24064: LD_INT 20
24066: PUSH
24067: LD_INT 21
24069: PUSH
24070: LD_INT 22
24072: PUSH
24073: LD_INT 23
24075: PUSH
24076: LD_INT 24
24078: PUSH
24079: LD_INT 25
24081: PUSH
24082: LD_INT 26
24084: PUSH
24085: LD_INT 28
24087: PUSH
24088: LD_INT 30
24090: PUSH
24091: LD_INT 31
24093: PUSH
24094: LD_INT 32
24096: PUSH
24097: LD_INT 34
24099: PUSH
24100: LD_INT 36
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 101
24138: PUSH
24139: LD_INT 102
24141: PUSH
24142: LD_INT 103
24144: PUSH
24145: LD_INT 104
24147: PUSH
24148: LD_INT 105
24150: PUSH
24151: LD_INT 106
24153: PUSH
24154: LD_INT 107
24156: PUSH
24157: LD_INT 108
24159: PUSH
24160: LD_INT 109
24162: PUSH
24163: LD_INT 110
24165: PUSH
24166: LD_INT 111
24168: PUSH
24169: LD_INT 112
24171: PUSH
24172: LD_INT 114
24174: PUSH
24175: LD_INT 116
24177: PUSH
24178: LD_INT 117
24180: PUSH
24181: LD_INT 118
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: ST_TO_ADDR
24206: GO 25889
24208: LD_INT 12
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24436
24216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24217: LD_ADDR_VAR 0 2
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: LD_INT 3
24230: PUSH
24231: LD_INT 4
24233: PUSH
24234: LD_INT 5
24236: PUSH
24237: LD_INT 6
24239: PUSH
24240: LD_INT 7
24242: PUSH
24243: LD_INT 8
24245: PUSH
24246: LD_INT 9
24248: PUSH
24249: LD_INT 10
24251: PUSH
24252: LD_INT 11
24254: PUSH
24255: LD_INT 12
24257: PUSH
24258: LD_INT 13
24260: PUSH
24261: LD_INT 14
24263: PUSH
24264: LD_INT 15
24266: PUSH
24267: LD_INT 16
24269: PUSH
24270: LD_INT 17
24272: PUSH
24273: LD_INT 18
24275: PUSH
24276: LD_INT 19
24278: PUSH
24279: LD_INT 20
24281: PUSH
24282: LD_INT 21
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_INT 23
24290: PUSH
24291: LD_INT 24
24293: PUSH
24294: LD_INT 25
24296: PUSH
24297: LD_INT 26
24299: PUSH
24300: LD_INT 27
24302: PUSH
24303: LD_INT 28
24305: PUSH
24306: LD_INT 30
24308: PUSH
24309: LD_INT 31
24311: PUSH
24312: LD_INT 32
24314: PUSH
24315: LD_INT 33
24317: PUSH
24318: LD_INT 34
24320: PUSH
24321: LD_INT 36
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 101
24362: PUSH
24363: LD_INT 102
24365: PUSH
24366: LD_INT 103
24368: PUSH
24369: LD_INT 104
24371: PUSH
24372: LD_INT 105
24374: PUSH
24375: LD_INT 106
24377: PUSH
24378: LD_INT 107
24380: PUSH
24381: LD_INT 108
24383: PUSH
24384: LD_INT 109
24386: PUSH
24387: LD_INT 110
24389: PUSH
24390: LD_INT 111
24392: PUSH
24393: LD_INT 112
24395: PUSH
24396: LD_INT 113
24398: PUSH
24399: LD_INT 114
24401: PUSH
24402: LD_INT 116
24404: PUSH
24405: LD_INT 117
24407: PUSH
24408: LD_INT 118
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: ST_TO_ADDR
24434: GO 25889
24436: LD_INT 13
24438: DOUBLE
24439: EQUAL
24440: IFTRUE 24444
24442: GO 24652
24444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24445: LD_ADDR_VAR 0 2
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: LD_INT 3
24458: PUSH
24459: LD_INT 4
24461: PUSH
24462: LD_INT 5
24464: PUSH
24465: LD_INT 8
24467: PUSH
24468: LD_INT 9
24470: PUSH
24471: LD_INT 10
24473: PUSH
24474: LD_INT 11
24476: PUSH
24477: LD_INT 12
24479: PUSH
24480: LD_INT 14
24482: PUSH
24483: LD_INT 15
24485: PUSH
24486: LD_INT 16
24488: PUSH
24489: LD_INT 17
24491: PUSH
24492: LD_INT 18
24494: PUSH
24495: LD_INT 19
24497: PUSH
24498: LD_INT 20
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 22
24506: PUSH
24507: LD_INT 23
24509: PUSH
24510: LD_INT 24
24512: PUSH
24513: LD_INT 25
24515: PUSH
24516: LD_INT 26
24518: PUSH
24519: LD_INT 27
24521: PUSH
24522: LD_INT 28
24524: PUSH
24525: LD_INT 30
24527: PUSH
24528: LD_INT 31
24530: PUSH
24531: LD_INT 32
24533: PUSH
24534: LD_INT 33
24536: PUSH
24537: LD_INT 34
24539: PUSH
24540: LD_INT 36
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 101
24578: PUSH
24579: LD_INT 102
24581: PUSH
24582: LD_INT 103
24584: PUSH
24585: LD_INT 104
24587: PUSH
24588: LD_INT 105
24590: PUSH
24591: LD_INT 106
24593: PUSH
24594: LD_INT 107
24596: PUSH
24597: LD_INT 108
24599: PUSH
24600: LD_INT 109
24602: PUSH
24603: LD_INT 110
24605: PUSH
24606: LD_INT 111
24608: PUSH
24609: LD_INT 112
24611: PUSH
24612: LD_INT 113
24614: PUSH
24615: LD_INT 114
24617: PUSH
24618: LD_INT 116
24620: PUSH
24621: LD_INT 117
24623: PUSH
24624: LD_INT 118
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: ST_TO_ADDR
24650: GO 25889
24652: LD_INT 14
24654: DOUBLE
24655: EQUAL
24656: IFTRUE 24660
24658: GO 24884
24660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24661: LD_ADDR_VAR 0 2
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: LD_INT 3
24674: PUSH
24675: LD_INT 4
24677: PUSH
24678: LD_INT 5
24680: PUSH
24681: LD_INT 6
24683: PUSH
24684: LD_INT 7
24686: PUSH
24687: LD_INT 8
24689: PUSH
24690: LD_INT 9
24692: PUSH
24693: LD_INT 10
24695: PUSH
24696: LD_INT 11
24698: PUSH
24699: LD_INT 12
24701: PUSH
24702: LD_INT 13
24704: PUSH
24705: LD_INT 14
24707: PUSH
24708: LD_INT 15
24710: PUSH
24711: LD_INT 16
24713: PUSH
24714: LD_INT 17
24716: PUSH
24717: LD_INT 18
24719: PUSH
24720: LD_INT 19
24722: PUSH
24723: LD_INT 20
24725: PUSH
24726: LD_INT 21
24728: PUSH
24729: LD_INT 22
24731: PUSH
24732: LD_INT 23
24734: PUSH
24735: LD_INT 24
24737: PUSH
24738: LD_INT 25
24740: PUSH
24741: LD_INT 26
24743: PUSH
24744: LD_INT 27
24746: PUSH
24747: LD_INT 28
24749: PUSH
24750: LD_INT 29
24752: PUSH
24753: LD_INT 30
24755: PUSH
24756: LD_INT 31
24758: PUSH
24759: LD_INT 32
24761: PUSH
24762: LD_INT 33
24764: PUSH
24765: LD_INT 34
24767: PUSH
24768: LD_INT 36
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 101
24810: PUSH
24811: LD_INT 102
24813: PUSH
24814: LD_INT 103
24816: PUSH
24817: LD_INT 104
24819: PUSH
24820: LD_INT 105
24822: PUSH
24823: LD_INT 106
24825: PUSH
24826: LD_INT 107
24828: PUSH
24829: LD_INT 108
24831: PUSH
24832: LD_INT 109
24834: PUSH
24835: LD_INT 110
24837: PUSH
24838: LD_INT 111
24840: PUSH
24841: LD_INT 112
24843: PUSH
24844: LD_INT 113
24846: PUSH
24847: LD_INT 114
24849: PUSH
24850: LD_INT 116
24852: PUSH
24853: LD_INT 117
24855: PUSH
24856: LD_INT 118
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: ST_TO_ADDR
24882: GO 25889
24884: LD_INT 15
24886: DOUBLE
24887: EQUAL
24888: IFTRUE 24892
24890: GO 25116
24892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24893: LD_ADDR_VAR 0 2
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 3
24906: PUSH
24907: LD_INT 4
24909: PUSH
24910: LD_INT 5
24912: PUSH
24913: LD_INT 6
24915: PUSH
24916: LD_INT 7
24918: PUSH
24919: LD_INT 8
24921: PUSH
24922: LD_INT 9
24924: PUSH
24925: LD_INT 10
24927: PUSH
24928: LD_INT 11
24930: PUSH
24931: LD_INT 12
24933: PUSH
24934: LD_INT 13
24936: PUSH
24937: LD_INT 14
24939: PUSH
24940: LD_INT 15
24942: PUSH
24943: LD_INT 16
24945: PUSH
24946: LD_INT 17
24948: PUSH
24949: LD_INT 18
24951: PUSH
24952: LD_INT 19
24954: PUSH
24955: LD_INT 20
24957: PUSH
24958: LD_INT 21
24960: PUSH
24961: LD_INT 22
24963: PUSH
24964: LD_INT 23
24966: PUSH
24967: LD_INT 24
24969: PUSH
24970: LD_INT 25
24972: PUSH
24973: LD_INT 26
24975: PUSH
24976: LD_INT 27
24978: PUSH
24979: LD_INT 28
24981: PUSH
24982: LD_INT 29
24984: PUSH
24985: LD_INT 30
24987: PUSH
24988: LD_INT 31
24990: PUSH
24991: LD_INT 32
24993: PUSH
24994: LD_INT 33
24996: PUSH
24997: LD_INT 34
24999: PUSH
25000: LD_INT 36
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 101
25042: PUSH
25043: LD_INT 102
25045: PUSH
25046: LD_INT 103
25048: PUSH
25049: LD_INT 104
25051: PUSH
25052: LD_INT 105
25054: PUSH
25055: LD_INT 106
25057: PUSH
25058: LD_INT 107
25060: PUSH
25061: LD_INT 108
25063: PUSH
25064: LD_INT 109
25066: PUSH
25067: LD_INT 110
25069: PUSH
25070: LD_INT 111
25072: PUSH
25073: LD_INT 112
25075: PUSH
25076: LD_INT 113
25078: PUSH
25079: LD_INT 114
25081: PUSH
25082: LD_INT 116
25084: PUSH
25085: LD_INT 117
25087: PUSH
25088: LD_INT 118
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: ST_TO_ADDR
25114: GO 25889
25116: LD_INT 16
25118: DOUBLE
25119: EQUAL
25120: IFTRUE 25124
25122: GO 25260
25124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 4
25135: PUSH
25136: LD_INT 5
25138: PUSH
25139: LD_INT 7
25141: PUSH
25142: LD_INT 11
25144: PUSH
25145: LD_INT 12
25147: PUSH
25148: LD_INT 15
25150: PUSH
25151: LD_INT 16
25153: PUSH
25154: LD_INT 20
25156: PUSH
25157: LD_INT 21
25159: PUSH
25160: LD_INT 22
25162: PUSH
25163: LD_INT 23
25165: PUSH
25166: LD_INT 25
25168: PUSH
25169: LD_INT 26
25171: PUSH
25172: LD_INT 30
25174: PUSH
25175: LD_INT 31
25177: PUSH
25178: LD_INT 32
25180: PUSH
25181: LD_INT 33
25183: PUSH
25184: LD_INT 34
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 101
25210: PUSH
25211: LD_INT 102
25213: PUSH
25214: LD_INT 103
25216: PUSH
25217: LD_INT 106
25219: PUSH
25220: LD_INT 108
25222: PUSH
25223: LD_INT 112
25225: PUSH
25226: LD_INT 113
25228: PUSH
25229: LD_INT 114
25231: PUSH
25232: LD_INT 116
25234: PUSH
25235: LD_INT 117
25237: PUSH
25238: LD_INT 118
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: ST_TO_ADDR
25258: GO 25889
25260: LD_INT 17
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25492
25268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25269: LD_ADDR_VAR 0 2
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: LD_INT 4
25285: PUSH
25286: LD_INT 5
25288: PUSH
25289: LD_INT 6
25291: PUSH
25292: LD_INT 7
25294: PUSH
25295: LD_INT 8
25297: PUSH
25298: LD_INT 9
25300: PUSH
25301: LD_INT 10
25303: PUSH
25304: LD_INT 11
25306: PUSH
25307: LD_INT 12
25309: PUSH
25310: LD_INT 13
25312: PUSH
25313: LD_INT 14
25315: PUSH
25316: LD_INT 15
25318: PUSH
25319: LD_INT 16
25321: PUSH
25322: LD_INT 17
25324: PUSH
25325: LD_INT 18
25327: PUSH
25328: LD_INT 19
25330: PUSH
25331: LD_INT 20
25333: PUSH
25334: LD_INT 21
25336: PUSH
25337: LD_INT 22
25339: PUSH
25340: LD_INT 23
25342: PUSH
25343: LD_INT 24
25345: PUSH
25346: LD_INT 25
25348: PUSH
25349: LD_INT 26
25351: PUSH
25352: LD_INT 27
25354: PUSH
25355: LD_INT 28
25357: PUSH
25358: LD_INT 29
25360: PUSH
25361: LD_INT 30
25363: PUSH
25364: LD_INT 31
25366: PUSH
25367: LD_INT 32
25369: PUSH
25370: LD_INT 33
25372: PUSH
25373: LD_INT 34
25375: PUSH
25376: LD_INT 36
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 101
25418: PUSH
25419: LD_INT 102
25421: PUSH
25422: LD_INT 103
25424: PUSH
25425: LD_INT 104
25427: PUSH
25428: LD_INT 105
25430: PUSH
25431: LD_INT 106
25433: PUSH
25434: LD_INT 107
25436: PUSH
25437: LD_INT 108
25439: PUSH
25440: LD_INT 109
25442: PUSH
25443: LD_INT 110
25445: PUSH
25446: LD_INT 111
25448: PUSH
25449: LD_INT 112
25451: PUSH
25452: LD_INT 113
25454: PUSH
25455: LD_INT 114
25457: PUSH
25458: LD_INT 116
25460: PUSH
25461: LD_INT 117
25463: PUSH
25464: LD_INT 118
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: ST_TO_ADDR
25490: GO 25889
25492: LD_INT 18
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25648
25500: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25501: LD_ADDR_VAR 0 2
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: LD_INT 4
25511: PUSH
25512: LD_INT 5
25514: PUSH
25515: LD_INT 7
25517: PUSH
25518: LD_INT 11
25520: PUSH
25521: LD_INT 12
25523: PUSH
25524: LD_INT 15
25526: PUSH
25527: LD_INT 16
25529: PUSH
25530: LD_INT 20
25532: PUSH
25533: LD_INT 21
25535: PUSH
25536: LD_INT 22
25538: PUSH
25539: LD_INT 23
25541: PUSH
25542: LD_INT 25
25544: PUSH
25545: LD_INT 26
25547: PUSH
25548: LD_INT 30
25550: PUSH
25551: LD_INT 31
25553: PUSH
25554: LD_INT 32
25556: PUSH
25557: LD_INT 33
25559: PUSH
25560: LD_INT 34
25562: PUSH
25563: LD_INT 35
25565: PUSH
25566: LD_INT 36
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 101
25594: PUSH
25595: LD_INT 102
25597: PUSH
25598: LD_INT 103
25600: PUSH
25601: LD_INT 106
25603: PUSH
25604: LD_INT 108
25606: PUSH
25607: LD_INT 112
25609: PUSH
25610: LD_INT 113
25612: PUSH
25613: LD_INT 114
25615: PUSH
25616: LD_INT 115
25618: PUSH
25619: LD_INT 116
25621: PUSH
25622: LD_INT 117
25624: PUSH
25625: LD_INT 118
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: ST_TO_ADDR
25646: GO 25889
25648: LD_INT 19
25650: DOUBLE
25651: EQUAL
25652: IFTRUE 25656
25654: GO 25888
25656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25657: LD_ADDR_VAR 0 2
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: LD_INT 3
25670: PUSH
25671: LD_INT 4
25673: PUSH
25674: LD_INT 5
25676: PUSH
25677: LD_INT 6
25679: PUSH
25680: LD_INT 7
25682: PUSH
25683: LD_INT 8
25685: PUSH
25686: LD_INT 9
25688: PUSH
25689: LD_INT 10
25691: PUSH
25692: LD_INT 11
25694: PUSH
25695: LD_INT 12
25697: PUSH
25698: LD_INT 13
25700: PUSH
25701: LD_INT 14
25703: PUSH
25704: LD_INT 15
25706: PUSH
25707: LD_INT 16
25709: PUSH
25710: LD_INT 17
25712: PUSH
25713: LD_INT 18
25715: PUSH
25716: LD_INT 19
25718: PUSH
25719: LD_INT 20
25721: PUSH
25722: LD_INT 21
25724: PUSH
25725: LD_INT 22
25727: PUSH
25728: LD_INT 23
25730: PUSH
25731: LD_INT 24
25733: PUSH
25734: LD_INT 25
25736: PUSH
25737: LD_INT 26
25739: PUSH
25740: LD_INT 27
25742: PUSH
25743: LD_INT 28
25745: PUSH
25746: LD_INT 29
25748: PUSH
25749: LD_INT 30
25751: PUSH
25752: LD_INT 31
25754: PUSH
25755: LD_INT 32
25757: PUSH
25758: LD_INT 33
25760: PUSH
25761: LD_INT 34
25763: PUSH
25764: LD_INT 35
25766: PUSH
25767: LD_INT 36
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 101
25810: PUSH
25811: LD_INT 102
25813: PUSH
25814: LD_INT 103
25816: PUSH
25817: LD_INT 104
25819: PUSH
25820: LD_INT 105
25822: PUSH
25823: LD_INT 106
25825: PUSH
25826: LD_INT 107
25828: PUSH
25829: LD_INT 108
25831: PUSH
25832: LD_INT 109
25834: PUSH
25835: LD_INT 110
25837: PUSH
25838: LD_INT 111
25840: PUSH
25841: LD_INT 112
25843: PUSH
25844: LD_INT 113
25846: PUSH
25847: LD_INT 114
25849: PUSH
25850: LD_INT 115
25852: PUSH
25853: LD_INT 116
25855: PUSH
25856: LD_INT 117
25858: PUSH
25859: LD_INT 118
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: ST_TO_ADDR
25886: GO 25889
25888: POP
// end else
25889: GO 26120
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25891: LD_ADDR_VAR 0 2
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 4
25907: PUSH
25908: LD_INT 5
25910: PUSH
25911: LD_INT 6
25913: PUSH
25914: LD_INT 7
25916: PUSH
25917: LD_INT 8
25919: PUSH
25920: LD_INT 9
25922: PUSH
25923: LD_INT 10
25925: PUSH
25926: LD_INT 11
25928: PUSH
25929: LD_INT 12
25931: PUSH
25932: LD_INT 13
25934: PUSH
25935: LD_INT 14
25937: PUSH
25938: LD_INT 15
25940: PUSH
25941: LD_INT 16
25943: PUSH
25944: LD_INT 17
25946: PUSH
25947: LD_INT 18
25949: PUSH
25950: LD_INT 19
25952: PUSH
25953: LD_INT 20
25955: PUSH
25956: LD_INT 21
25958: PUSH
25959: LD_INT 22
25961: PUSH
25962: LD_INT 23
25964: PUSH
25965: LD_INT 24
25967: PUSH
25968: LD_INT 25
25970: PUSH
25971: LD_INT 26
25973: PUSH
25974: LD_INT 27
25976: PUSH
25977: LD_INT 28
25979: PUSH
25980: LD_INT 29
25982: PUSH
25983: LD_INT 30
25985: PUSH
25986: LD_INT 31
25988: PUSH
25989: LD_INT 32
25991: PUSH
25992: LD_INT 33
25994: PUSH
25995: LD_INT 34
25997: PUSH
25998: LD_INT 35
26000: PUSH
26001: LD_INT 36
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 101
26044: PUSH
26045: LD_INT 102
26047: PUSH
26048: LD_INT 103
26050: PUSH
26051: LD_INT 104
26053: PUSH
26054: LD_INT 105
26056: PUSH
26057: LD_INT 106
26059: PUSH
26060: LD_INT 107
26062: PUSH
26063: LD_INT 108
26065: PUSH
26066: LD_INT 109
26068: PUSH
26069: LD_INT 110
26071: PUSH
26072: LD_INT 111
26074: PUSH
26075: LD_INT 112
26077: PUSH
26078: LD_INT 113
26080: PUSH
26081: LD_INT 114
26083: PUSH
26084: LD_INT 115
26086: PUSH
26087: LD_INT 116
26089: PUSH
26090: LD_INT 117
26092: PUSH
26093: LD_INT 118
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: ST_TO_ADDR
// if result then
26120: LD_VAR 0 2
26124: IFFALSE 26910
// begin normal :=  ;
26126: LD_ADDR_VAR 0 5
26130: PUSH
26131: LD_STRING 
26133: ST_TO_ADDR
// hardcore :=  ;
26134: LD_ADDR_VAR 0 6
26138: PUSH
26139: LD_STRING 
26141: ST_TO_ADDR
// active :=  ;
26142: LD_ADDR_VAR 0 7
26146: PUSH
26147: LD_STRING 
26149: ST_TO_ADDR
// for i = 1 to normalCounter do
26150: LD_ADDR_VAR 0 8
26154: PUSH
26155: DOUBLE
26156: LD_INT 1
26158: DEC
26159: ST_TO_ADDR
26160: LD_EXP 59
26164: PUSH
26165: FOR_TO
26166: IFFALSE 26267
// begin tmp := 0 ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_STRING 0
26175: ST_TO_ADDR
// if result [ 1 ] then
26176: LD_VAR 0 2
26180: PUSH
26181: LD_INT 1
26183: ARRAY
26184: IFFALSE 26249
// if result [ 1 ] [ 1 ] = i then
26186: LD_VAR 0 2
26190: PUSH
26191: LD_INT 1
26193: ARRAY
26194: PUSH
26195: LD_INT 1
26197: ARRAY
26198: PUSH
26199: LD_VAR 0 8
26203: EQUAL
26204: IFFALSE 26249
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26206: LD_ADDR_VAR 0 2
26210: PUSH
26211: LD_VAR 0 2
26215: PPUSH
26216: LD_INT 1
26218: PPUSH
26219: LD_VAR 0 2
26223: PUSH
26224: LD_INT 1
26226: ARRAY
26227: PPUSH
26228: LD_INT 1
26230: PPUSH
26231: CALL_OW 3
26235: PPUSH
26236: CALL_OW 1
26240: ST_TO_ADDR
// tmp := 1 ;
26241: LD_ADDR_VAR 0 3
26245: PUSH
26246: LD_STRING 1
26248: ST_TO_ADDR
// end ; normal := normal & tmp ;
26249: LD_ADDR_VAR 0 5
26253: PUSH
26254: LD_VAR 0 5
26258: PUSH
26259: LD_VAR 0 3
26263: STR
26264: ST_TO_ADDR
// end ;
26265: GO 26165
26267: POP
26268: POP
// for i = 1 to hardcoreCounter do
26269: LD_ADDR_VAR 0 8
26273: PUSH
26274: DOUBLE
26275: LD_INT 1
26277: DEC
26278: ST_TO_ADDR
26279: LD_EXP 60
26283: PUSH
26284: FOR_TO
26285: IFFALSE 26390
// begin tmp := 0 ;
26287: LD_ADDR_VAR 0 3
26291: PUSH
26292: LD_STRING 0
26294: ST_TO_ADDR
// if result [ 2 ] then
26295: LD_VAR 0 2
26299: PUSH
26300: LD_INT 2
26302: ARRAY
26303: IFFALSE 26372
// if result [ 2 ] [ 1 ] = 100 + i then
26305: LD_VAR 0 2
26309: PUSH
26310: LD_INT 2
26312: ARRAY
26313: PUSH
26314: LD_INT 1
26316: ARRAY
26317: PUSH
26318: LD_INT 100
26320: PUSH
26321: LD_VAR 0 8
26325: PLUS
26326: EQUAL
26327: IFFALSE 26372
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26329: LD_ADDR_VAR 0 2
26333: PUSH
26334: LD_VAR 0 2
26338: PPUSH
26339: LD_INT 2
26341: PPUSH
26342: LD_VAR 0 2
26346: PUSH
26347: LD_INT 2
26349: ARRAY
26350: PPUSH
26351: LD_INT 1
26353: PPUSH
26354: CALL_OW 3
26358: PPUSH
26359: CALL_OW 1
26363: ST_TO_ADDR
// tmp := 1 ;
26364: LD_ADDR_VAR 0 3
26368: PUSH
26369: LD_STRING 1
26371: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26372: LD_ADDR_VAR 0 6
26376: PUSH
26377: LD_VAR 0 6
26381: PUSH
26382: LD_VAR 0 3
26386: STR
26387: ST_TO_ADDR
// end ;
26388: GO 26284
26390: POP
26391: POP
// if isGameLoad then
26392: LD_VAR 0 1
26396: IFFALSE 26871
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26398: LD_ADDR_VAR 0 4
26402: PUSH
26403: LD_EXP 63
26407: PUSH
26408: LD_EXP 62
26412: PUSH
26413: LD_EXP 64
26417: PUSH
26418: LD_EXP 61
26422: PUSH
26423: LD_EXP 65
26427: PUSH
26428: LD_EXP 66
26432: PUSH
26433: LD_EXP 67
26437: PUSH
26438: LD_EXP 68
26442: PUSH
26443: LD_EXP 69
26447: PUSH
26448: LD_EXP 70
26452: PUSH
26453: LD_EXP 71
26457: PUSH
26458: LD_EXP 72
26462: PUSH
26463: LD_EXP 73
26467: PUSH
26468: LD_EXP 74
26472: PUSH
26473: LD_EXP 82
26477: PUSH
26478: LD_EXP 83
26482: PUSH
26483: LD_EXP 84
26487: PUSH
26488: LD_EXP 85
26492: PUSH
26493: LD_EXP 87
26497: PUSH
26498: LD_EXP 88
26502: PUSH
26503: LD_EXP 89
26507: PUSH
26508: LD_EXP 92
26512: PUSH
26513: LD_EXP 94
26517: PUSH
26518: LD_EXP 95
26522: PUSH
26523: LD_EXP 96
26527: PUSH
26528: LD_EXP 98
26532: PUSH
26533: LD_EXP 99
26537: PUSH
26538: LD_EXP 102
26542: PUSH
26543: LD_EXP 103
26547: PUSH
26548: LD_EXP 104
26552: PUSH
26553: LD_EXP 105
26557: PUSH
26558: LD_EXP 106
26562: PUSH
26563: LD_EXP 107
26567: PUSH
26568: LD_EXP 108
26572: PUSH
26573: LD_EXP 109
26577: PUSH
26578: LD_EXP 110
26582: PUSH
26583: LD_EXP 75
26587: PUSH
26588: LD_EXP 76
26592: PUSH
26593: LD_EXP 79
26597: PUSH
26598: LD_EXP 80
26602: PUSH
26603: LD_EXP 81
26607: PUSH
26608: LD_EXP 77
26612: PUSH
26613: LD_EXP 78
26617: PUSH
26618: LD_EXP 86
26622: PUSH
26623: LD_EXP 90
26627: PUSH
26628: LD_EXP 91
26632: PUSH
26633: LD_EXP 93
26637: PUSH
26638: LD_EXP 97
26642: PUSH
26643: LD_EXP 100
26647: PUSH
26648: LD_EXP 101
26652: PUSH
26653: LD_EXP 111
26657: PUSH
26658: LD_EXP 112
26662: PUSH
26663: LD_EXP 113
26667: PUSH
26668: LD_EXP 114
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: ST_TO_ADDR
// tmp :=  ;
26729: LD_ADDR_VAR 0 3
26733: PUSH
26734: LD_STRING 
26736: ST_TO_ADDR
// for i = 1 to normalCounter do
26737: LD_ADDR_VAR 0 8
26741: PUSH
26742: DOUBLE
26743: LD_INT 1
26745: DEC
26746: ST_TO_ADDR
26747: LD_EXP 59
26751: PUSH
26752: FOR_TO
26753: IFFALSE 26789
// begin if flags [ i ] then
26755: LD_VAR 0 4
26759: PUSH
26760: LD_VAR 0 8
26764: ARRAY
26765: IFFALSE 26787
// tmp := tmp & i & ; ;
26767: LD_ADDR_VAR 0 3
26771: PUSH
26772: LD_VAR 0 3
26776: PUSH
26777: LD_VAR 0 8
26781: STR
26782: PUSH
26783: LD_STRING ;
26785: STR
26786: ST_TO_ADDR
// end ;
26787: GO 26752
26789: POP
26790: POP
// for i = 1 to hardcoreCounter do
26791: LD_ADDR_VAR 0 8
26795: PUSH
26796: DOUBLE
26797: LD_INT 1
26799: DEC
26800: ST_TO_ADDR
26801: LD_EXP 60
26805: PUSH
26806: FOR_TO
26807: IFFALSE 26853
// begin if flags [ normalCounter + i ] then
26809: LD_VAR 0 4
26813: PUSH
26814: LD_EXP 59
26818: PUSH
26819: LD_VAR 0 8
26823: PLUS
26824: ARRAY
26825: IFFALSE 26851
// tmp := tmp & ( 100 + i ) & ; ;
26827: LD_ADDR_VAR 0 3
26831: PUSH
26832: LD_VAR 0 3
26836: PUSH
26837: LD_INT 100
26839: PUSH
26840: LD_VAR 0 8
26844: PLUS
26845: STR
26846: PUSH
26847: LD_STRING ;
26849: STR
26850: ST_TO_ADDR
// end ;
26851: GO 26806
26853: POP
26854: POP
// if tmp then
26855: LD_VAR 0 3
26859: IFFALSE 26871
// active := tmp ;
26861: LD_ADDR_VAR 0 7
26865: PUSH
26866: LD_VAR 0 3
26870: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26871: LD_STRING getStreamItemsFromMission("
26873: PUSH
26874: LD_VAR 0 5
26878: STR
26879: PUSH
26880: LD_STRING ","
26882: STR
26883: PUSH
26884: LD_VAR 0 6
26888: STR
26889: PUSH
26890: LD_STRING ","
26892: STR
26893: PUSH
26894: LD_VAR 0 7
26898: STR
26899: PUSH
26900: LD_STRING ")
26902: STR
26903: PPUSH
26904: CALL_OW 559
// end else
26908: GO 26917
// ToLua ( getStreamItemsFromMission("","","") ) ;
26910: LD_STRING getStreamItemsFromMission("","","")
26912: PPUSH
26913: CALL_OW 559
// end ;
26917: LD_VAR 0 2
26921: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26922: LD_EXP 58
26926: PUSH
26927: LD_EXP 63
26931: AND
26932: IFFALSE 27056
26934: GO 26936
26936: DISABLE
26937: LD_INT 0
26939: PPUSH
26940: PPUSH
// begin enable ;
26941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26942: LD_ADDR_VAR 0 2
26946: PUSH
26947: LD_INT 22
26949: PUSH
26950: LD_OWVAR 2
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: LD_INT 34
26964: PUSH
26965: LD_INT 7
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 34
26974: PUSH
26975: LD_INT 45
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 34
26984: PUSH
26985: LD_INT 28
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 34
26994: PUSH
26995: LD_INT 47
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PPUSH
27013: CALL_OW 69
27017: ST_TO_ADDR
// if not tmp then
27018: LD_VAR 0 2
27022: NOT
27023: IFFALSE 27027
// exit ;
27025: GO 27056
// for i in tmp do
27027: LD_ADDR_VAR 0 1
27031: PUSH
27032: LD_VAR 0 2
27036: PUSH
27037: FOR_IN
27038: IFFALSE 27054
// begin SetLives ( i , 0 ) ;
27040: LD_VAR 0 1
27044: PPUSH
27045: LD_INT 0
27047: PPUSH
27048: CALL_OW 234
// end ;
27052: GO 27037
27054: POP
27055: POP
// end ;
27056: PPOPN 2
27058: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27059: LD_EXP 58
27063: PUSH
27064: LD_EXP 64
27068: AND
27069: IFFALSE 27153
27071: GO 27073
27073: DISABLE
27074: LD_INT 0
27076: PPUSH
27077: PPUSH
// begin enable ;
27078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27079: LD_ADDR_VAR 0 2
27083: PUSH
27084: LD_INT 22
27086: PUSH
27087: LD_OWVAR 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 32
27098: PUSH
27099: LD_INT 3
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PPUSH
27110: CALL_OW 69
27114: ST_TO_ADDR
// if not tmp then
27115: LD_VAR 0 2
27119: NOT
27120: IFFALSE 27124
// exit ;
27122: GO 27153
// for i in tmp do
27124: LD_ADDR_VAR 0 1
27128: PUSH
27129: LD_VAR 0 2
27133: PUSH
27134: FOR_IN
27135: IFFALSE 27151
// begin SetLives ( i , 0 ) ;
27137: LD_VAR 0 1
27141: PPUSH
27142: LD_INT 0
27144: PPUSH
27145: CALL_OW 234
// end ;
27149: GO 27134
27151: POP
27152: POP
// end ;
27153: PPOPN 2
27155: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27156: LD_EXP 58
27160: PUSH
27161: LD_EXP 61
27165: AND
27166: IFFALSE 27259
27168: GO 27170
27170: DISABLE
27171: LD_INT 0
27173: PPUSH
// begin enable ;
27174: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27175: LD_ADDR_VAR 0 1
27179: PUSH
27180: LD_INT 22
27182: PUSH
27183: LD_OWVAR 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 25
27197: PUSH
27198: LD_INT 5
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 25
27207: PUSH
27208: LD_INT 9
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 25
27217: PUSH
27218: LD_INT 8
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PPUSH
27235: CALL_OW 69
27239: PUSH
27240: FOR_IN
27241: IFFALSE 27257
// begin SetClass ( i , 1 ) ;
27243: LD_VAR 0 1
27247: PPUSH
27248: LD_INT 1
27250: PPUSH
27251: CALL_OW 336
// end ;
27255: GO 27240
27257: POP
27258: POP
// end ;
27259: PPOPN 1
27261: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27262: LD_EXP 58
27266: PUSH
27267: LD_EXP 62
27271: AND
27272: PUSH
27273: LD_OWVAR 65
27277: PUSH
27278: LD_INT 7
27280: LESS
27281: AND
27282: IFFALSE 27296
27284: GO 27286
27286: DISABLE
// begin enable ;
27287: ENABLE
// game_speed := 7 ;
27288: LD_ADDR_OWVAR 65
27292: PUSH
27293: LD_INT 7
27295: ST_TO_ADDR
// end ;
27296: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27297: LD_EXP 58
27301: PUSH
27302: LD_EXP 65
27306: AND
27307: IFFALSE 27509
27309: GO 27311
27311: DISABLE
27312: LD_INT 0
27314: PPUSH
27315: PPUSH
27316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27317: LD_ADDR_VAR 0 3
27321: PUSH
27322: LD_INT 81
27324: PUSH
27325: LD_OWVAR 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 21
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PPUSH
27348: CALL_OW 69
27352: ST_TO_ADDR
// if not tmp then
27353: LD_VAR 0 3
27357: NOT
27358: IFFALSE 27362
// exit ;
27360: GO 27509
// if tmp > 5 then
27362: LD_VAR 0 3
27366: PUSH
27367: LD_INT 5
27369: GREATER
27370: IFFALSE 27382
// k := 5 else
27372: LD_ADDR_VAR 0 2
27376: PUSH
27377: LD_INT 5
27379: ST_TO_ADDR
27380: GO 27392
// k := tmp ;
27382: LD_ADDR_VAR 0 2
27386: PUSH
27387: LD_VAR 0 3
27391: ST_TO_ADDR
// for i := 1 to k do
27392: LD_ADDR_VAR 0 1
27396: PUSH
27397: DOUBLE
27398: LD_INT 1
27400: DEC
27401: ST_TO_ADDR
27402: LD_VAR 0 2
27406: PUSH
27407: FOR_TO
27408: IFFALSE 27507
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27410: LD_VAR 0 3
27414: PUSH
27415: LD_VAR 0 1
27419: ARRAY
27420: PPUSH
27421: LD_VAR 0 1
27425: PUSH
27426: LD_INT 4
27428: MOD
27429: PUSH
27430: LD_INT 1
27432: PLUS
27433: PPUSH
27434: CALL_OW 259
27438: PUSH
27439: LD_INT 10
27441: LESS
27442: IFFALSE 27505
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27444: LD_VAR 0 3
27448: PUSH
27449: LD_VAR 0 1
27453: ARRAY
27454: PPUSH
27455: LD_VAR 0 1
27459: PUSH
27460: LD_INT 4
27462: MOD
27463: PUSH
27464: LD_INT 1
27466: PLUS
27467: PPUSH
27468: LD_VAR 0 3
27472: PUSH
27473: LD_VAR 0 1
27477: ARRAY
27478: PPUSH
27479: LD_VAR 0 1
27483: PUSH
27484: LD_INT 4
27486: MOD
27487: PUSH
27488: LD_INT 1
27490: PLUS
27491: PPUSH
27492: CALL_OW 259
27496: PUSH
27497: LD_INT 1
27499: PLUS
27500: PPUSH
27501: CALL_OW 237
27505: GO 27407
27507: POP
27508: POP
// end ;
27509: PPOPN 3
27511: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27512: LD_EXP 58
27516: PUSH
27517: LD_EXP 66
27521: AND
27522: IFFALSE 27542
27524: GO 27526
27526: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27527: LD_INT 4
27529: PPUSH
27530: LD_OWVAR 2
27534: PPUSH
27535: LD_INT 0
27537: PPUSH
27538: CALL_OW 324
27542: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27543: LD_EXP 58
27547: PUSH
27548: LD_EXP 95
27552: AND
27553: IFFALSE 27573
27555: GO 27557
27557: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27558: LD_INT 19
27560: PPUSH
27561: LD_OWVAR 2
27565: PPUSH
27566: LD_INT 0
27568: PPUSH
27569: CALL_OW 324
27573: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27574: LD_EXP 58
27578: PUSH
27579: LD_EXP 67
27583: AND
27584: IFFALSE 27686
27586: GO 27588
27588: DISABLE
27589: LD_INT 0
27591: PPUSH
27592: PPUSH
// begin enable ;
27593: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27594: LD_ADDR_VAR 0 2
27598: PUSH
27599: LD_INT 22
27601: PUSH
27602: LD_OWVAR 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 34
27616: PUSH
27617: LD_INT 11
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 34
27626: PUSH
27627: LD_INT 30
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PPUSH
27643: CALL_OW 69
27647: ST_TO_ADDR
// if not tmp then
27648: LD_VAR 0 2
27652: NOT
27653: IFFALSE 27657
// exit ;
27655: GO 27686
// for i in tmp do
27657: LD_ADDR_VAR 0 1
27661: PUSH
27662: LD_VAR 0 2
27666: PUSH
27667: FOR_IN
27668: IFFALSE 27684
// begin SetLives ( i , 0 ) ;
27670: LD_VAR 0 1
27674: PPUSH
27675: LD_INT 0
27677: PPUSH
27678: CALL_OW 234
// end ;
27682: GO 27667
27684: POP
27685: POP
// end ;
27686: PPOPN 2
27688: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27689: LD_EXP 58
27693: PUSH
27694: LD_EXP 68
27698: AND
27699: IFFALSE 27719
27701: GO 27703
27703: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27704: LD_INT 32
27706: PPUSH
27707: LD_OWVAR 2
27711: PPUSH
27712: LD_INT 0
27714: PPUSH
27715: CALL_OW 324
27719: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27720: LD_EXP 58
27724: PUSH
27725: LD_EXP 69
27729: AND
27730: IFFALSE 27911
27732: GO 27734
27734: DISABLE
27735: LD_INT 0
27737: PPUSH
27738: PPUSH
27739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27740: LD_ADDR_VAR 0 2
27744: PUSH
27745: LD_INT 22
27747: PUSH
27748: LD_OWVAR 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 33
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PPUSH
27771: CALL_OW 69
27775: ST_TO_ADDR
// if not tmp then
27776: LD_VAR 0 2
27780: NOT
27781: IFFALSE 27785
// exit ;
27783: GO 27911
// side := 0 ;
27785: LD_ADDR_VAR 0 3
27789: PUSH
27790: LD_INT 0
27792: ST_TO_ADDR
// for i := 1 to 8 do
27793: LD_ADDR_VAR 0 1
27797: PUSH
27798: DOUBLE
27799: LD_INT 1
27801: DEC
27802: ST_TO_ADDR
27803: LD_INT 8
27805: PUSH
27806: FOR_TO
27807: IFFALSE 27855
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27809: LD_OWVAR 2
27813: PUSH
27814: LD_VAR 0 1
27818: NONEQUAL
27819: PUSH
27820: LD_OWVAR 2
27824: PPUSH
27825: LD_VAR 0 1
27829: PPUSH
27830: CALL_OW 81
27834: PUSH
27835: LD_INT 2
27837: EQUAL
27838: AND
27839: IFFALSE 27853
// begin side := i ;
27841: LD_ADDR_VAR 0 3
27845: PUSH
27846: LD_VAR 0 1
27850: ST_TO_ADDR
// break ;
27851: GO 27855
// end ;
27853: GO 27806
27855: POP
27856: POP
// if not side then
27857: LD_VAR 0 3
27861: NOT
27862: IFFALSE 27866
// exit ;
27864: GO 27911
// for i := 1 to tmp do
27866: LD_ADDR_VAR 0 1
27870: PUSH
27871: DOUBLE
27872: LD_INT 1
27874: DEC
27875: ST_TO_ADDR
27876: LD_VAR 0 2
27880: PUSH
27881: FOR_TO
27882: IFFALSE 27909
// if Prob ( 60 ) then
27884: LD_INT 60
27886: PPUSH
27887: CALL_OW 13
27891: IFFALSE 27907
// SetSide ( i , side ) ;
27893: LD_VAR 0 1
27897: PPUSH
27898: LD_VAR 0 3
27902: PPUSH
27903: CALL_OW 235
27907: GO 27881
27909: POP
27910: POP
// end ;
27911: PPOPN 3
27913: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27914: LD_EXP 58
27918: PUSH
27919: LD_EXP 71
27923: AND
27924: IFFALSE 28043
27926: GO 27928
27928: DISABLE
27929: LD_INT 0
27931: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27932: LD_ADDR_VAR 0 1
27936: PUSH
27937: LD_INT 22
27939: PUSH
27940: LD_OWVAR 2
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 21
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: LD_INT 23
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: PPUSH
27981: CALL_OW 69
27985: PUSH
27986: FOR_IN
27987: IFFALSE 28041
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 257
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 4
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: IN
28017: IFFALSE 28039
// SetClass ( un , rand ( 1 , 4 ) ) ;
28019: LD_VAR 0 1
28023: PPUSH
28024: LD_INT 1
28026: PPUSH
28027: LD_INT 4
28029: PPUSH
28030: CALL_OW 12
28034: PPUSH
28035: CALL_OW 336
28039: GO 27986
28041: POP
28042: POP
// end ;
28043: PPOPN 1
28045: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28046: LD_EXP 58
28050: PUSH
28051: LD_EXP 70
28055: AND
28056: IFFALSE 28135
28058: GO 28060
28060: DISABLE
28061: LD_INT 0
28063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28064: LD_ADDR_VAR 0 1
28068: PUSH
28069: LD_INT 22
28071: PUSH
28072: LD_OWVAR 2
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 21
28083: PUSH
28084: LD_INT 3
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PPUSH
28095: CALL_OW 69
28099: ST_TO_ADDR
// if not tmp then
28100: LD_VAR 0 1
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28109: LD_VAR 0 1
28113: PUSH
28114: LD_INT 1
28116: PPUSH
28117: LD_VAR 0 1
28121: PPUSH
28122: CALL_OW 12
28126: ARRAY
28127: PPUSH
28128: LD_INT 100
28130: PPUSH
28131: CALL_OW 234
// end ;
28135: PPOPN 1
28137: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28138: LD_EXP 58
28142: PUSH
28143: LD_EXP 72
28147: AND
28148: IFFALSE 28246
28150: GO 28152
28152: DISABLE
28153: LD_INT 0
28155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28156: LD_ADDR_VAR 0 1
28160: PUSH
28161: LD_INT 22
28163: PUSH
28164: LD_OWVAR 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 21
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PPUSH
28187: CALL_OW 69
28191: ST_TO_ADDR
// if not tmp then
28192: LD_VAR 0 1
28196: NOT
28197: IFFALSE 28201
// exit ;
28199: GO 28246
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28201: LD_VAR 0 1
28205: PUSH
28206: LD_INT 1
28208: PPUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: CALL_OW 12
28218: ARRAY
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: LD_INT 4
28225: PPUSH
28226: CALL_OW 12
28230: PPUSH
28231: LD_INT 3000
28233: PPUSH
28234: LD_INT 9000
28236: PPUSH
28237: CALL_OW 12
28241: PPUSH
28242: CALL_OW 492
// end ;
28246: PPOPN 1
28248: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28249: LD_EXP 58
28253: PUSH
28254: LD_EXP 73
28258: AND
28259: IFFALSE 28279
28261: GO 28263
28263: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28264: LD_INT 1
28266: PPUSH
28267: LD_OWVAR 2
28271: PPUSH
28272: LD_INT 0
28274: PPUSH
28275: CALL_OW 324
28279: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28280: LD_EXP 58
28284: PUSH
28285: LD_EXP 74
28289: AND
28290: IFFALSE 28373
28292: GO 28294
28294: DISABLE
28295: LD_INT 0
28297: PPUSH
28298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28299: LD_ADDR_VAR 0 2
28303: PUSH
28304: LD_INT 22
28306: PUSH
28307: LD_OWVAR 2
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 21
28318: PUSH
28319: LD_INT 3
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PPUSH
28330: CALL_OW 69
28334: ST_TO_ADDR
// if not tmp then
28335: LD_VAR 0 2
28339: NOT
28340: IFFALSE 28344
// exit ;
28342: GO 28373
// for i in tmp do
28344: LD_ADDR_VAR 0 1
28348: PUSH
28349: LD_VAR 0 2
28353: PUSH
28354: FOR_IN
28355: IFFALSE 28371
// SetBLevel ( i , 10 ) ;
28357: LD_VAR 0 1
28361: PPUSH
28362: LD_INT 10
28364: PPUSH
28365: CALL_OW 241
28369: GO 28354
28371: POP
28372: POP
// end ;
28373: PPOPN 2
28375: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28376: LD_EXP 58
28380: PUSH
28381: LD_EXP 75
28385: AND
28386: IFFALSE 28497
28388: GO 28390
28390: DISABLE
28391: LD_INT 0
28393: PPUSH
28394: PPUSH
28395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_INT 22
28403: PUSH
28404: LD_OWVAR 2
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 25
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PPUSH
28427: CALL_OW 69
28431: ST_TO_ADDR
// if not tmp then
28432: LD_VAR 0 3
28436: NOT
28437: IFFALSE 28441
// exit ;
28439: GO 28497
// un := tmp [ rand ( 1 , tmp ) ] ;
28441: LD_ADDR_VAR 0 2
28445: PUSH
28446: LD_VAR 0 3
28450: PUSH
28451: LD_INT 1
28453: PPUSH
28454: LD_VAR 0 3
28458: PPUSH
28459: CALL_OW 12
28463: ARRAY
28464: ST_TO_ADDR
// if Crawls ( un ) then
28465: LD_VAR 0 2
28469: PPUSH
28470: CALL_OW 318
28474: IFFALSE 28485
// ComWalk ( un ) ;
28476: LD_VAR 0 2
28480: PPUSH
28481: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28485: LD_VAR 0 2
28489: PPUSH
28490: LD_INT 5
28492: PPUSH
28493: CALL_OW 336
// end ;
28497: PPOPN 3
28499: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28500: LD_EXP 58
28504: PUSH
28505: LD_EXP 76
28509: AND
28510: PUSH
28511: LD_OWVAR 67
28515: PUSH
28516: LD_INT 4
28518: LESS
28519: AND
28520: IFFALSE 28539
28522: GO 28524
28524: DISABLE
// begin Difficulty := Difficulty + 1 ;
28525: LD_ADDR_OWVAR 67
28529: PUSH
28530: LD_OWVAR 67
28534: PUSH
28535: LD_INT 1
28537: PLUS
28538: ST_TO_ADDR
// end ;
28539: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28540: LD_EXP 58
28544: PUSH
28545: LD_EXP 77
28549: AND
28550: IFFALSE 28653
28552: GO 28554
28554: DISABLE
28555: LD_INT 0
28557: PPUSH
// begin for i := 1 to 5 do
28558: LD_ADDR_VAR 0 1
28562: PUSH
28563: DOUBLE
28564: LD_INT 1
28566: DEC
28567: ST_TO_ADDR
28568: LD_INT 5
28570: PUSH
28571: FOR_TO
28572: IFFALSE 28651
// begin uc_nation := nation_nature ;
28574: LD_ADDR_OWVAR 21
28578: PUSH
28579: LD_INT 0
28581: ST_TO_ADDR
// uc_side := 0 ;
28582: LD_ADDR_OWVAR 20
28586: PUSH
28587: LD_INT 0
28589: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28590: LD_ADDR_OWVAR 29
28594: PUSH
28595: LD_INT 12
28597: PUSH
28598: LD_INT 12
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: ST_TO_ADDR
// hc_agressivity := 20 ;
28605: LD_ADDR_OWVAR 35
28609: PUSH
28610: LD_INT 20
28612: ST_TO_ADDR
// hc_class := class_tiger ;
28613: LD_ADDR_OWVAR 28
28617: PUSH
28618: LD_INT 14
28620: ST_TO_ADDR
// hc_gallery :=  ;
28621: LD_ADDR_OWVAR 33
28625: PUSH
28626: LD_STRING 
28628: ST_TO_ADDR
// hc_name :=  ;
28629: LD_ADDR_OWVAR 26
28633: PUSH
28634: LD_STRING 
28636: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28637: CALL_OW 44
28641: PPUSH
28642: LD_INT 0
28644: PPUSH
28645: CALL_OW 51
// end ;
28649: GO 28571
28651: POP
28652: POP
// end ;
28653: PPOPN 1
28655: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28656: LD_EXP 58
28660: PUSH
28661: LD_EXP 78
28665: AND
28666: IFFALSE 28675
28668: GO 28670
28670: DISABLE
// StreamSibBomb ;
28671: CALL 28676 0 0
28675: END
// export function StreamSibBomb ; var i , x , y ; begin
28676: LD_INT 0
28678: PPUSH
28679: PPUSH
28680: PPUSH
28681: PPUSH
// result := false ;
28682: LD_ADDR_VAR 0 1
28686: PUSH
28687: LD_INT 0
28689: ST_TO_ADDR
// for i := 1 to 16 do
28690: LD_ADDR_VAR 0 2
28694: PUSH
28695: DOUBLE
28696: LD_INT 1
28698: DEC
28699: ST_TO_ADDR
28700: LD_INT 16
28702: PUSH
28703: FOR_TO
28704: IFFALSE 28903
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: LD_INT 10
28713: PUSH
28714: LD_INT 20
28716: PUSH
28717: LD_INT 30
28719: PUSH
28720: LD_INT 40
28722: PUSH
28723: LD_INT 50
28725: PUSH
28726: LD_INT 60
28728: PUSH
28729: LD_INT 70
28731: PUSH
28732: LD_INT 80
28734: PUSH
28735: LD_INT 90
28737: PUSH
28738: LD_INT 100
28740: PUSH
28741: LD_INT 110
28743: PUSH
28744: LD_INT 120
28746: PUSH
28747: LD_INT 130
28749: PUSH
28750: LD_INT 140
28752: PUSH
28753: LD_INT 150
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PPUSH
28776: LD_INT 15
28778: PPUSH
28779: CALL_OW 12
28783: ARRAY
28784: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28785: LD_ADDR_VAR 0 4
28789: PUSH
28790: LD_INT 10
28792: PUSH
28793: LD_INT 20
28795: PUSH
28796: LD_INT 30
28798: PUSH
28799: LD_INT 40
28801: PUSH
28802: LD_INT 50
28804: PUSH
28805: LD_INT 60
28807: PUSH
28808: LD_INT 70
28810: PUSH
28811: LD_INT 80
28813: PUSH
28814: LD_INT 90
28816: PUSH
28817: LD_INT 100
28819: PUSH
28820: LD_INT 110
28822: PUSH
28823: LD_INT 120
28825: PUSH
28826: LD_INT 130
28828: PUSH
28829: LD_INT 140
28831: PUSH
28832: LD_INT 150
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: PPUSH
28855: LD_INT 15
28857: PPUSH
28858: CALL_OW 12
28862: ARRAY
28863: ST_TO_ADDR
// if ValidHex ( x , y ) then
28864: LD_VAR 0 3
28868: PPUSH
28869: LD_VAR 0 4
28873: PPUSH
28874: CALL_OW 488
28878: IFFALSE 28901
// begin result := [ x , y ] ;
28880: LD_ADDR_VAR 0 1
28884: PUSH
28885: LD_VAR 0 3
28889: PUSH
28890: LD_VAR 0 4
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// break ;
28899: GO 28903
// end ; end ;
28901: GO 28703
28903: POP
28904: POP
// if result then
28905: LD_VAR 0 1
28909: IFFALSE 28969
// begin ToLua ( playSibBomb() ) ;
28911: LD_STRING playSibBomb()
28913: PPUSH
28914: CALL_OW 559
// wait ( 0 0$14 ) ;
28918: LD_INT 490
28920: PPUSH
28921: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28925: LD_VAR 0 1
28929: PUSH
28930: LD_INT 1
28932: ARRAY
28933: PPUSH
28934: LD_VAR 0 1
28938: PUSH
28939: LD_INT 2
28941: ARRAY
28942: PPUSH
28943: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28947: LD_VAR 0 1
28951: PUSH
28952: LD_INT 1
28954: ARRAY
28955: PPUSH
28956: LD_VAR 0 1
28960: PUSH
28961: LD_INT 2
28963: ARRAY
28964: PPUSH
28965: CALL_OW 429
// end ; end ;
28969: LD_VAR 0 1
28973: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28974: LD_EXP 58
28978: PUSH
28979: LD_EXP 80
28983: AND
28984: IFFALSE 28996
28986: GO 28988
28988: DISABLE
// YouLost (  ) ;
28989: LD_STRING 
28991: PPUSH
28992: CALL_OW 104
28996: END
// every 0 0$1 trigger StreamModeActive and sFog do
28997: LD_EXP 58
29001: PUSH
29002: LD_EXP 79
29006: AND
29007: IFFALSE 29021
29009: GO 29011
29011: DISABLE
// FogOff ( your_side ) ;
29012: LD_OWVAR 2
29016: PPUSH
29017: CALL_OW 344
29021: END
// every 0 0$1 trigger StreamModeActive and sSun do
29022: LD_EXP 58
29026: PUSH
29027: LD_EXP 81
29031: AND
29032: IFFALSE 29060
29034: GO 29036
29036: DISABLE
// begin solar_recharge_percent := 0 ;
29037: LD_ADDR_OWVAR 79
29041: PUSH
29042: LD_INT 0
29044: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29045: LD_INT 10500
29047: PPUSH
29048: CALL_OW 67
// solar_recharge_percent := 100 ;
29052: LD_ADDR_OWVAR 79
29056: PUSH
29057: LD_INT 100
29059: ST_TO_ADDR
// end ;
29060: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29061: LD_EXP 58
29065: PUSH
29066: LD_EXP 82
29070: AND
29071: IFFALSE 29310
29073: GO 29075
29075: DISABLE
29076: LD_INT 0
29078: PPUSH
29079: PPUSH
29080: PPUSH
// begin tmp := [ ] ;
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: EMPTY
29087: ST_TO_ADDR
// for i := 1 to 6 do
29088: LD_ADDR_VAR 0 1
29092: PUSH
29093: DOUBLE
29094: LD_INT 1
29096: DEC
29097: ST_TO_ADDR
29098: LD_INT 6
29100: PUSH
29101: FOR_TO
29102: IFFALSE 29207
// begin uc_nation := nation_nature ;
29104: LD_ADDR_OWVAR 21
29108: PUSH
29109: LD_INT 0
29111: ST_TO_ADDR
// uc_side := 0 ;
29112: LD_ADDR_OWVAR 20
29116: PUSH
29117: LD_INT 0
29119: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29120: LD_ADDR_OWVAR 29
29124: PUSH
29125: LD_INT 12
29127: PUSH
29128: LD_INT 12
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: ST_TO_ADDR
// hc_agressivity := 20 ;
29135: LD_ADDR_OWVAR 35
29139: PUSH
29140: LD_INT 20
29142: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29143: LD_ADDR_OWVAR 28
29147: PUSH
29148: LD_INT 17
29150: ST_TO_ADDR
// hc_gallery :=  ;
29151: LD_ADDR_OWVAR 33
29155: PUSH
29156: LD_STRING 
29158: ST_TO_ADDR
// hc_name :=  ;
29159: LD_ADDR_OWVAR 26
29163: PUSH
29164: LD_STRING 
29166: ST_TO_ADDR
// un := CreateHuman ;
29167: LD_ADDR_VAR 0 2
29171: PUSH
29172: CALL_OW 44
29176: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29177: LD_VAR 0 2
29181: PPUSH
29182: LD_INT 1
29184: PPUSH
29185: CALL_OW 51
// tmp := tmp ^ un ;
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_VAR 0 3
29198: PUSH
29199: LD_VAR 0 2
29203: ADD
29204: ST_TO_ADDR
// end ;
29205: GO 29101
29207: POP
29208: POP
// repeat wait ( 0 0$1 ) ;
29209: LD_INT 35
29211: PPUSH
29212: CALL_OW 67
// for un in tmp do
29216: LD_ADDR_VAR 0 2
29220: PUSH
29221: LD_VAR 0 3
29225: PUSH
29226: FOR_IN
29227: IFFALSE 29301
// begin if IsDead ( un ) then
29229: LD_VAR 0 2
29233: PPUSH
29234: CALL_OW 301
29238: IFFALSE 29258
// begin tmp := tmp diff un ;
29240: LD_ADDR_VAR 0 3
29244: PUSH
29245: LD_VAR 0 3
29249: PUSH
29250: LD_VAR 0 2
29254: DIFF
29255: ST_TO_ADDR
// continue ;
29256: GO 29226
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29258: LD_VAR 0 2
29262: PPUSH
29263: LD_INT 3
29265: PUSH
29266: LD_INT 22
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PPUSH
29280: CALL_OW 69
29284: PPUSH
29285: LD_VAR 0 2
29289: PPUSH
29290: CALL_OW 74
29294: PPUSH
29295: CALL_OW 115
// end ;
29299: GO 29226
29301: POP
29302: POP
// until not tmp ;
29303: LD_VAR 0 3
29307: NOT
29308: IFFALSE 29209
// end ;
29310: PPOPN 3
29312: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29313: LD_EXP 58
29317: PUSH
29318: LD_EXP 83
29322: AND
29323: IFFALSE 29377
29325: GO 29327
29327: DISABLE
// begin ToLua ( displayTroll(); ) ;
29328: LD_STRING displayTroll();
29330: PPUSH
29331: CALL_OW 559
// wait ( 3 3$00 ) ;
29335: LD_INT 6300
29337: PPUSH
29338: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29342: LD_STRING hideTroll();
29344: PPUSH
29345: CALL_OW 559
// wait ( 1 1$00 ) ;
29349: LD_INT 2100
29351: PPUSH
29352: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29356: LD_STRING displayTroll();
29358: PPUSH
29359: CALL_OW 559
// wait ( 1 1$00 ) ;
29363: LD_INT 2100
29365: PPUSH
29366: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29370: LD_STRING hideTroll();
29372: PPUSH
29373: CALL_OW 559
// end ;
29377: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29378: LD_EXP 58
29382: PUSH
29383: LD_EXP 84
29387: AND
29388: IFFALSE 29451
29390: GO 29392
29392: DISABLE
29393: LD_INT 0
29395: PPUSH
// begin p := 0 ;
29396: LD_ADDR_VAR 0 1
29400: PUSH
29401: LD_INT 0
29403: ST_TO_ADDR
// repeat game_speed := 1 ;
29404: LD_ADDR_OWVAR 65
29408: PUSH
29409: LD_INT 1
29411: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29412: LD_INT 35
29414: PPUSH
29415: CALL_OW 67
// p := p + 1 ;
29419: LD_ADDR_VAR 0 1
29423: PUSH
29424: LD_VAR 0 1
29428: PUSH
29429: LD_INT 1
29431: PLUS
29432: ST_TO_ADDR
// until p >= 60 ;
29433: LD_VAR 0 1
29437: PUSH
29438: LD_INT 60
29440: GREATEREQUAL
29441: IFFALSE 29404
// game_speed := 4 ;
29443: LD_ADDR_OWVAR 65
29447: PUSH
29448: LD_INT 4
29450: ST_TO_ADDR
// end ;
29451: PPOPN 1
29453: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29454: LD_EXP 58
29458: PUSH
29459: LD_EXP 85
29463: AND
29464: IFFALSE 29610
29466: GO 29468
29468: DISABLE
29469: LD_INT 0
29471: PPUSH
29472: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29473: LD_ADDR_VAR 0 1
29477: PUSH
29478: LD_INT 22
29480: PUSH
29481: LD_OWVAR 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 30
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 30
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PPUSH
29522: CALL_OW 69
29526: ST_TO_ADDR
// if not depot then
29527: LD_VAR 0 1
29531: NOT
29532: IFFALSE 29536
// exit ;
29534: GO 29610
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29536: LD_ADDR_VAR 0 2
29540: PUSH
29541: LD_VAR 0 1
29545: PUSH
29546: LD_INT 1
29548: PPUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL_OW 12
29558: ARRAY
29559: PPUSH
29560: CALL_OW 274
29564: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29565: LD_VAR 0 2
29569: PPUSH
29570: LD_INT 1
29572: PPUSH
29573: LD_INT 0
29575: PPUSH
29576: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29580: LD_VAR 0 2
29584: PPUSH
29585: LD_INT 2
29587: PPUSH
29588: LD_INT 0
29590: PPUSH
29591: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29595: LD_VAR 0 2
29599: PPUSH
29600: LD_INT 3
29602: PPUSH
29603: LD_INT 0
29605: PPUSH
29606: CALL_OW 277
// end ;
29610: PPOPN 2
29612: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29613: LD_EXP 58
29617: PUSH
29618: LD_EXP 86
29622: AND
29623: IFFALSE 29720
29625: GO 29627
29627: DISABLE
29628: LD_INT 0
29630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29631: LD_ADDR_VAR 0 1
29635: PUSH
29636: LD_INT 22
29638: PUSH
29639: LD_OWVAR 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 21
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: LD_INT 23
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 69
29684: ST_TO_ADDR
// if not tmp then
29685: LD_VAR 0 1
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 29720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29694: LD_VAR 0 1
29698: PUSH
29699: LD_INT 1
29701: PPUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 12
29711: ARRAY
29712: PPUSH
29713: LD_INT 200
29715: PPUSH
29716: CALL_OW 234
// end ;
29720: PPOPN 1
29722: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29723: LD_EXP 58
29727: PUSH
29728: LD_EXP 87
29732: AND
29733: IFFALSE 29812
29735: GO 29737
29737: DISABLE
29738: LD_INT 0
29740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29741: LD_ADDR_VAR 0 1
29745: PUSH
29746: LD_INT 22
29748: PUSH
29749: LD_OWVAR 2
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 21
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PPUSH
29772: CALL_OW 69
29776: ST_TO_ADDR
// if not tmp then
29777: LD_VAR 0 1
29781: NOT
29782: IFFALSE 29786
// exit ;
29784: GO 29812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29786: LD_VAR 0 1
29790: PUSH
29791: LD_INT 1
29793: PPUSH
29794: LD_VAR 0 1
29798: PPUSH
29799: CALL_OW 12
29803: ARRAY
29804: PPUSH
29805: LD_INT 60
29807: PPUSH
29808: CALL_OW 234
// end ;
29812: PPOPN 1
29814: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29815: LD_EXP 58
29819: PUSH
29820: LD_EXP 88
29824: AND
29825: IFFALSE 29924
29827: GO 29829
29829: DISABLE
29830: LD_INT 0
29832: PPUSH
29833: PPUSH
// begin enable ;
29834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29835: LD_ADDR_VAR 0 1
29839: PUSH
29840: LD_INT 22
29842: PUSH
29843: LD_OWVAR 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 61
29854: PUSH
29855: EMPTY
29856: LIST
29857: PUSH
29858: LD_INT 33
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: PPUSH
29873: CALL_OW 69
29877: ST_TO_ADDR
// if not tmp then
29878: LD_VAR 0 1
29882: NOT
29883: IFFALSE 29887
// exit ;
29885: GO 29924
// for i in tmp do
29887: LD_ADDR_VAR 0 2
29891: PUSH
29892: LD_VAR 0 1
29896: PUSH
29897: FOR_IN
29898: IFFALSE 29922
// if IsControledBy ( i ) then
29900: LD_VAR 0 2
29904: PPUSH
29905: CALL_OW 312
29909: IFFALSE 29920
// ComUnlink ( i ) ;
29911: LD_VAR 0 2
29915: PPUSH
29916: CALL_OW 136
29920: GO 29897
29922: POP
29923: POP
// end ;
29924: PPOPN 2
29926: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29927: LD_EXP 58
29931: PUSH
29932: LD_EXP 89
29936: AND
29937: IFFALSE 30077
29939: GO 29941
29941: DISABLE
29942: LD_INT 0
29944: PPUSH
29945: PPUSH
// begin ToLua ( displayPowell(); ) ;
29946: LD_STRING displayPowell();
29948: PPUSH
29949: CALL_OW 559
// uc_side := 0 ;
29953: LD_ADDR_OWVAR 20
29957: PUSH
29958: LD_INT 0
29960: ST_TO_ADDR
// uc_nation := 2 ;
29961: LD_ADDR_OWVAR 21
29965: PUSH
29966: LD_INT 2
29968: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29969: LD_ADDR_OWVAR 37
29973: PUSH
29974: LD_INT 14
29976: ST_TO_ADDR
// vc_engine := engine_siberite ;
29977: LD_ADDR_OWVAR 39
29981: PUSH
29982: LD_INT 3
29984: ST_TO_ADDR
// vc_control := control_apeman ;
29985: LD_ADDR_OWVAR 38
29989: PUSH
29990: LD_INT 5
29992: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29993: LD_ADDR_OWVAR 40
29997: PUSH
29998: LD_INT 29
30000: ST_TO_ADDR
// un := CreateVehicle ;
30001: LD_ADDR_VAR 0 2
30005: PUSH
30006: CALL_OW 45
30010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30011: LD_VAR 0 2
30015: PPUSH
30016: LD_INT 1
30018: PPUSH
30019: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30023: LD_INT 35
30025: PPUSH
30026: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30030: LD_VAR 0 2
30034: PPUSH
30035: LD_INT 22
30037: PUSH
30038: LD_OWVAR 2
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PPUSH
30047: CALL_OW 69
30051: PPUSH
30052: LD_VAR 0 2
30056: PPUSH
30057: CALL_OW 74
30061: PPUSH
30062: CALL_OW 115
// until IsDead ( un ) ;
30066: LD_VAR 0 2
30070: PPUSH
30071: CALL_OW 301
30075: IFFALSE 30023
// end ;
30077: PPOPN 2
30079: END
// every 0 0$1 trigger StreamModeActive and sStu do
30080: LD_EXP 58
30084: PUSH
30085: LD_EXP 97
30089: AND
30090: IFFALSE 30106
30092: GO 30094
30094: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30095: LD_STRING displayStucuk();
30097: PPUSH
30098: CALL_OW 559
// ResetFog ;
30102: CALL_OW 335
// end ;
30106: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30107: LD_EXP 58
30111: PUSH
30112: LD_EXP 90
30116: AND
30117: IFFALSE 30258
30119: GO 30121
30121: DISABLE
30122: LD_INT 0
30124: PPUSH
30125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30126: LD_ADDR_VAR 0 2
30130: PUSH
30131: LD_INT 22
30133: PUSH
30134: LD_OWVAR 2
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 21
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PPUSH
30157: CALL_OW 69
30161: ST_TO_ADDR
// if not tmp then
30162: LD_VAR 0 2
30166: NOT
30167: IFFALSE 30171
// exit ;
30169: GO 30258
// un := tmp [ rand ( 1 , tmp ) ] ;
30171: LD_ADDR_VAR 0 1
30175: PUSH
30176: LD_VAR 0 2
30180: PUSH
30181: LD_INT 1
30183: PPUSH
30184: LD_VAR 0 2
30188: PPUSH
30189: CALL_OW 12
30193: ARRAY
30194: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30195: LD_VAR 0 1
30199: PPUSH
30200: LD_INT 0
30202: PPUSH
30203: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30207: LD_VAR 0 1
30211: PPUSH
30212: LD_OWVAR 3
30216: PUSH
30217: LD_VAR 0 1
30221: DIFF
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 74
30232: PPUSH
30233: CALL_OW 115
// wait ( 0 0$20 ) ;
30237: LD_INT 700
30239: PPUSH
30240: CALL_OW 67
// SetSide ( un , your_side ) ;
30244: LD_VAR 0 1
30248: PPUSH
30249: LD_OWVAR 2
30253: PPUSH
30254: CALL_OW 235
// end ;
30258: PPOPN 2
30260: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30261: LD_EXP 58
30265: PUSH
30266: LD_EXP 91
30270: AND
30271: IFFALSE 30377
30273: GO 30275
30275: DISABLE
30276: LD_INT 0
30278: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30279: LD_ADDR_VAR 0 1
30283: PUSH
30284: LD_INT 22
30286: PUSH
30287: LD_OWVAR 2
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 30
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 30
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PPUSH
30328: CALL_OW 69
30332: ST_TO_ADDR
// if not depot then
30333: LD_VAR 0 1
30337: NOT
30338: IFFALSE 30342
// exit ;
30340: GO 30377
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30342: LD_VAR 0 1
30346: PUSH
30347: LD_INT 1
30349: ARRAY
30350: PPUSH
30351: CALL_OW 250
30355: PPUSH
30356: LD_VAR 0 1
30360: PUSH
30361: LD_INT 1
30363: ARRAY
30364: PPUSH
30365: CALL_OW 251
30369: PPUSH
30370: LD_INT 70
30372: PPUSH
30373: CALL_OW 495
// end ;
30377: PPOPN 1
30379: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30380: LD_EXP 58
30384: PUSH
30385: LD_EXP 92
30389: AND
30390: IFFALSE 30601
30392: GO 30394
30394: DISABLE
30395: LD_INT 0
30397: PPUSH
30398: PPUSH
30399: PPUSH
30400: PPUSH
30401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30402: LD_ADDR_VAR 0 5
30406: PUSH
30407: LD_INT 22
30409: PUSH
30410: LD_OWVAR 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 21
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PPUSH
30433: CALL_OW 69
30437: ST_TO_ADDR
// if not tmp then
30438: LD_VAR 0 5
30442: NOT
30443: IFFALSE 30447
// exit ;
30445: GO 30601
// for i in tmp do
30447: LD_ADDR_VAR 0 1
30451: PUSH
30452: LD_VAR 0 5
30456: PUSH
30457: FOR_IN
30458: IFFALSE 30599
// begin d := rand ( 0 , 5 ) ;
30460: LD_ADDR_VAR 0 4
30464: PUSH
30465: LD_INT 0
30467: PPUSH
30468: LD_INT 5
30470: PPUSH
30471: CALL_OW 12
30475: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30476: LD_ADDR_VAR 0 2
30480: PUSH
30481: LD_VAR 0 1
30485: PPUSH
30486: CALL_OW 250
30490: PPUSH
30491: LD_VAR 0 4
30495: PPUSH
30496: LD_INT 3
30498: PPUSH
30499: LD_INT 12
30501: PPUSH
30502: CALL_OW 12
30506: PPUSH
30507: CALL_OW 272
30511: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30512: LD_ADDR_VAR 0 3
30516: PUSH
30517: LD_VAR 0 1
30521: PPUSH
30522: CALL_OW 251
30526: PPUSH
30527: LD_VAR 0 4
30531: PPUSH
30532: LD_INT 3
30534: PPUSH
30535: LD_INT 12
30537: PPUSH
30538: CALL_OW 12
30542: PPUSH
30543: CALL_OW 273
30547: ST_TO_ADDR
// if ValidHex ( x , y ) then
30548: LD_VAR 0 2
30552: PPUSH
30553: LD_VAR 0 3
30557: PPUSH
30558: CALL_OW 488
30562: IFFALSE 30597
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30564: LD_VAR 0 1
30568: PPUSH
30569: LD_VAR 0 2
30573: PPUSH
30574: LD_VAR 0 3
30578: PPUSH
30579: LD_INT 3
30581: PPUSH
30582: LD_INT 6
30584: PPUSH
30585: CALL_OW 12
30589: PPUSH
30590: LD_INT 1
30592: PPUSH
30593: CALL_OW 483
// end ;
30597: GO 30457
30599: POP
30600: POP
// end ;
30601: PPOPN 5
30603: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30604: LD_EXP 58
30608: PUSH
30609: LD_EXP 93
30613: AND
30614: IFFALSE 30708
30616: GO 30618
30618: DISABLE
30619: LD_INT 0
30621: PPUSH
30622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30623: LD_ADDR_VAR 0 2
30627: PUSH
30628: LD_INT 22
30630: PUSH
30631: LD_OWVAR 2
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 32
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 21
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 69
30669: ST_TO_ADDR
// if not tmp then
30670: LD_VAR 0 2
30674: NOT
30675: IFFALSE 30679
// exit ;
30677: GO 30708
// for i in tmp do
30679: LD_ADDR_VAR 0 1
30683: PUSH
30684: LD_VAR 0 2
30688: PUSH
30689: FOR_IN
30690: IFFALSE 30706
// SetFuel ( i , 0 ) ;
30692: LD_VAR 0 1
30696: PPUSH
30697: LD_INT 0
30699: PPUSH
30700: CALL_OW 240
30704: GO 30689
30706: POP
30707: POP
// end ;
30708: PPOPN 2
30710: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30711: LD_EXP 58
30715: PUSH
30716: LD_EXP 94
30720: AND
30721: IFFALSE 30787
30723: GO 30725
30725: DISABLE
30726: LD_INT 0
30728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30729: LD_ADDR_VAR 0 1
30733: PUSH
30734: LD_INT 22
30736: PUSH
30737: LD_OWVAR 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 30
30748: PUSH
30749: LD_INT 29
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PPUSH
30760: CALL_OW 69
30764: ST_TO_ADDR
// if not tmp then
30765: LD_VAR 0 1
30769: NOT
30770: IFFALSE 30774
// exit ;
30772: GO 30787
// DestroyUnit ( tmp [ 1 ] ) ;
30774: LD_VAR 0 1
30778: PUSH
30779: LD_INT 1
30781: ARRAY
30782: PPUSH
30783: CALL_OW 65
// end ;
30787: PPOPN 1
30789: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30790: LD_EXP 58
30794: PUSH
30795: LD_EXP 96
30799: AND
30800: IFFALSE 30929
30802: GO 30804
30804: DISABLE
30805: LD_INT 0
30807: PPUSH
// begin uc_side := 0 ;
30808: LD_ADDR_OWVAR 20
30812: PUSH
30813: LD_INT 0
30815: ST_TO_ADDR
// uc_nation := nation_arabian ;
30816: LD_ADDR_OWVAR 21
30820: PUSH
30821: LD_INT 2
30823: ST_TO_ADDR
// hc_gallery :=  ;
30824: LD_ADDR_OWVAR 33
30828: PUSH
30829: LD_STRING 
30831: ST_TO_ADDR
// hc_name :=  ;
30832: LD_ADDR_OWVAR 26
30836: PUSH
30837: LD_STRING 
30839: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30840: LD_INT 1
30842: PPUSH
30843: LD_INT 11
30845: PPUSH
30846: LD_INT 10
30848: PPUSH
30849: CALL_OW 380
// un := CreateHuman ;
30853: LD_ADDR_VAR 0 1
30857: PUSH
30858: CALL_OW 44
30862: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30863: LD_VAR 0 1
30867: PPUSH
30868: LD_INT 1
30870: PPUSH
30871: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30875: LD_INT 35
30877: PPUSH
30878: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30882: LD_VAR 0 1
30886: PPUSH
30887: LD_INT 22
30889: PUSH
30890: LD_OWVAR 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: PPUSH
30904: LD_VAR 0 1
30908: PPUSH
30909: CALL_OW 74
30913: PPUSH
30914: CALL_OW 115
// until IsDead ( un ) ;
30918: LD_VAR 0 1
30922: PPUSH
30923: CALL_OW 301
30927: IFFALSE 30875
// end ;
30929: PPOPN 1
30931: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30932: LD_EXP 58
30936: PUSH
30937: LD_EXP 98
30941: AND
30942: IFFALSE 30954
30944: GO 30946
30946: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30947: LD_STRING earthquake(getX(game), 0, 32)
30949: PPUSH
30950: CALL_OW 559
30954: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30955: LD_EXP 58
30959: PUSH
30960: LD_EXP 99
30964: AND
30965: IFFALSE 31056
30967: GO 30969
30969: DISABLE
30970: LD_INT 0
30972: PPUSH
// begin enable ;
30973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30974: LD_ADDR_VAR 0 1
30978: PUSH
30979: LD_INT 22
30981: PUSH
30982: LD_OWVAR 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 21
30993: PUSH
30994: LD_INT 2
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 33
31003: PUSH
31004: LD_INT 3
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: PPUSH
31016: CALL_OW 69
31020: ST_TO_ADDR
// if not tmp then
31021: LD_VAR 0 1
31025: NOT
31026: IFFALSE 31030
// exit ;
31028: GO 31056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31030: LD_VAR 0 1
31034: PUSH
31035: LD_INT 1
31037: PPUSH
31038: LD_VAR 0 1
31042: PPUSH
31043: CALL_OW 12
31047: ARRAY
31048: PPUSH
31049: LD_INT 1
31051: PPUSH
31052: CALL_OW 234
// end ;
31056: PPOPN 1
31058: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31059: LD_EXP 58
31063: PUSH
31064: LD_EXP 100
31068: AND
31069: IFFALSE 31210
31071: GO 31073
31073: DISABLE
31074: LD_INT 0
31076: PPUSH
31077: PPUSH
31078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 22
31086: PUSH
31087: LD_OWVAR 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 25
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PPUSH
31110: CALL_OW 69
31114: ST_TO_ADDR
// if not tmp then
31115: LD_VAR 0 3
31119: NOT
31120: IFFALSE 31124
// exit ;
31122: GO 31210
// un := tmp [ rand ( 1 , tmp ) ] ;
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_VAR 0 3
31133: PUSH
31134: LD_INT 1
31136: PPUSH
31137: LD_VAR 0 3
31141: PPUSH
31142: CALL_OW 12
31146: ARRAY
31147: ST_TO_ADDR
// if Crawls ( un ) then
31148: LD_VAR 0 2
31152: PPUSH
31153: CALL_OW 318
31157: IFFALSE 31168
// ComWalk ( un ) ;
31159: LD_VAR 0 2
31163: PPUSH
31164: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31168: LD_VAR 0 2
31172: PPUSH
31173: LD_INT 9
31175: PPUSH
31176: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31180: LD_INT 28
31182: PPUSH
31183: LD_OWVAR 2
31187: PPUSH
31188: LD_INT 2
31190: PPUSH
31191: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31195: LD_INT 29
31197: PPUSH
31198: LD_OWVAR 2
31202: PPUSH
31203: LD_INT 2
31205: PPUSH
31206: CALL_OW 322
// end ;
31210: PPOPN 3
31212: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31213: LD_EXP 58
31217: PUSH
31218: LD_EXP 101
31222: AND
31223: IFFALSE 31334
31225: GO 31227
31227: DISABLE
31228: LD_INT 0
31230: PPUSH
31231: PPUSH
31232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31233: LD_ADDR_VAR 0 3
31237: PUSH
31238: LD_INT 22
31240: PUSH
31241: LD_OWVAR 2
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 25
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PPUSH
31264: CALL_OW 69
31268: ST_TO_ADDR
// if not tmp then
31269: LD_VAR 0 3
31273: NOT
31274: IFFALSE 31278
// exit ;
31276: GO 31334
// un := tmp [ rand ( 1 , tmp ) ] ;
31278: LD_ADDR_VAR 0 2
31282: PUSH
31283: LD_VAR 0 3
31287: PUSH
31288: LD_INT 1
31290: PPUSH
31291: LD_VAR 0 3
31295: PPUSH
31296: CALL_OW 12
31300: ARRAY
31301: ST_TO_ADDR
// if Crawls ( un ) then
31302: LD_VAR 0 2
31306: PPUSH
31307: CALL_OW 318
31311: IFFALSE 31322
// ComWalk ( un ) ;
31313: LD_VAR 0 2
31317: PPUSH
31318: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31322: LD_VAR 0 2
31326: PPUSH
31327: LD_INT 8
31329: PPUSH
31330: CALL_OW 336
// end ;
31334: PPOPN 3
31336: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31337: LD_EXP 58
31341: PUSH
31342: LD_EXP 102
31346: AND
31347: IFFALSE 31491
31349: GO 31351
31351: DISABLE
31352: LD_INT 0
31354: PPUSH
31355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31356: LD_ADDR_VAR 0 2
31360: PUSH
31361: LD_INT 22
31363: PUSH
31364: LD_OWVAR 2
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 21
31375: PUSH
31376: LD_INT 2
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 34
31388: PUSH
31389: LD_INT 12
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 34
31398: PUSH
31399: LD_INT 51
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 34
31408: PUSH
31409: LD_INT 32
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: PPUSH
31427: CALL_OW 69
31431: ST_TO_ADDR
// if not tmp then
31432: LD_VAR 0 2
31436: NOT
31437: IFFALSE 31441
// exit ;
31439: GO 31491
// for i in tmp do
31441: LD_ADDR_VAR 0 1
31445: PUSH
31446: LD_VAR 0 2
31450: PUSH
31451: FOR_IN
31452: IFFALSE 31489
// if GetCargo ( i , mat_artifact ) = 0 then
31454: LD_VAR 0 1
31458: PPUSH
31459: LD_INT 4
31461: PPUSH
31462: CALL_OW 289
31466: PUSH
31467: LD_INT 0
31469: EQUAL
31470: IFFALSE 31487
// SetCargo ( i , mat_siberit , 100 ) ;
31472: LD_VAR 0 1
31476: PPUSH
31477: LD_INT 3
31479: PPUSH
31480: LD_INT 100
31482: PPUSH
31483: CALL_OW 290
31487: GO 31451
31489: POP
31490: POP
// end ;
31491: PPOPN 2
31493: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31494: LD_EXP 58
31498: PUSH
31499: LD_EXP 103
31503: AND
31504: IFFALSE 31687
31506: GO 31508
31508: DISABLE
31509: LD_INT 0
31511: PPUSH
31512: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31513: LD_ADDR_VAR 0 2
31517: PUSH
31518: LD_INT 22
31520: PUSH
31521: LD_OWVAR 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PPUSH
31530: CALL_OW 69
31534: ST_TO_ADDR
// if not tmp then
31535: LD_VAR 0 2
31539: NOT
31540: IFFALSE 31544
// exit ;
31542: GO 31687
// for i := 1 to 2 do
31544: LD_ADDR_VAR 0 1
31548: PUSH
31549: DOUBLE
31550: LD_INT 1
31552: DEC
31553: ST_TO_ADDR
31554: LD_INT 2
31556: PUSH
31557: FOR_TO
31558: IFFALSE 31685
// begin uc_side := your_side ;
31560: LD_ADDR_OWVAR 20
31564: PUSH
31565: LD_OWVAR 2
31569: ST_TO_ADDR
// uc_nation := nation_american ;
31570: LD_ADDR_OWVAR 21
31574: PUSH
31575: LD_INT 1
31577: ST_TO_ADDR
// vc_chassis := us_morphling ;
31578: LD_ADDR_OWVAR 37
31582: PUSH
31583: LD_INT 5
31585: ST_TO_ADDR
// vc_engine := engine_siberite ;
31586: LD_ADDR_OWVAR 39
31590: PUSH
31591: LD_INT 3
31593: ST_TO_ADDR
// vc_control := control_computer ;
31594: LD_ADDR_OWVAR 38
31598: PUSH
31599: LD_INT 3
31601: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31602: LD_ADDR_OWVAR 40
31606: PUSH
31607: LD_INT 10
31609: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31610: LD_VAR 0 2
31614: PUSH
31615: LD_INT 1
31617: ARRAY
31618: PPUSH
31619: CALL_OW 310
31623: NOT
31624: IFFALSE 31671
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31626: CALL_OW 45
31630: PPUSH
31631: LD_VAR 0 2
31635: PUSH
31636: LD_INT 1
31638: ARRAY
31639: PPUSH
31640: CALL_OW 250
31644: PPUSH
31645: LD_VAR 0 2
31649: PUSH
31650: LD_INT 1
31652: ARRAY
31653: PPUSH
31654: CALL_OW 251
31658: PPUSH
31659: LD_INT 12
31661: PPUSH
31662: LD_INT 1
31664: PPUSH
31665: CALL_OW 50
31669: GO 31683
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31671: CALL_OW 45
31675: PPUSH
31676: LD_INT 1
31678: PPUSH
31679: CALL_OW 51
// end ;
31683: GO 31557
31685: POP
31686: POP
// end ;
31687: PPOPN 2
31689: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31690: LD_EXP 58
31694: PUSH
31695: LD_EXP 104
31699: AND
31700: IFFALSE 31922
31702: GO 31704
31704: DISABLE
31705: LD_INT 0
31707: PPUSH
31708: PPUSH
31709: PPUSH
31710: PPUSH
31711: PPUSH
31712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31713: LD_ADDR_VAR 0 6
31717: PUSH
31718: LD_INT 22
31720: PUSH
31721: LD_OWVAR 2
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 21
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 23
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: PPUSH
31762: CALL_OW 69
31766: ST_TO_ADDR
// if not tmp then
31767: LD_VAR 0 6
31771: NOT
31772: IFFALSE 31776
// exit ;
31774: GO 31922
// s1 := rand ( 1 , 4 ) ;
31776: LD_ADDR_VAR 0 2
31780: PUSH
31781: LD_INT 1
31783: PPUSH
31784: LD_INT 4
31786: PPUSH
31787: CALL_OW 12
31791: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31792: LD_ADDR_VAR 0 4
31796: PUSH
31797: LD_VAR 0 6
31801: PUSH
31802: LD_INT 1
31804: ARRAY
31805: PPUSH
31806: LD_VAR 0 2
31810: PPUSH
31811: CALL_OW 259
31815: ST_TO_ADDR
// if s1 = 1 then
31816: LD_VAR 0 2
31820: PUSH
31821: LD_INT 1
31823: EQUAL
31824: IFFALSE 31844
// s2 := rand ( 2 , 4 ) else
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_INT 2
31833: PPUSH
31834: LD_INT 4
31836: PPUSH
31837: CALL_OW 12
31841: ST_TO_ADDR
31842: GO 31852
// s2 := 1 ;
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_INT 1
31851: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31852: LD_ADDR_VAR 0 5
31856: PUSH
31857: LD_VAR 0 6
31861: PUSH
31862: LD_INT 1
31864: ARRAY
31865: PPUSH
31866: LD_VAR 0 3
31870: PPUSH
31871: CALL_OW 259
31875: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31876: LD_VAR 0 6
31880: PUSH
31881: LD_INT 1
31883: ARRAY
31884: PPUSH
31885: LD_VAR 0 2
31889: PPUSH
31890: LD_VAR 0 5
31894: PPUSH
31895: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31899: LD_VAR 0 6
31903: PUSH
31904: LD_INT 1
31906: ARRAY
31907: PPUSH
31908: LD_VAR 0 3
31912: PPUSH
31913: LD_VAR 0 4
31917: PPUSH
31918: CALL_OW 237
// end ;
31922: PPOPN 6
31924: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31925: LD_EXP 58
31929: PUSH
31930: LD_EXP 105
31934: AND
31935: IFFALSE 32014
31937: GO 31939
31939: DISABLE
31940: LD_INT 0
31942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31943: LD_ADDR_VAR 0 1
31947: PUSH
31948: LD_INT 22
31950: PUSH
31951: LD_OWVAR 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 30
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PPUSH
31974: CALL_OW 69
31978: ST_TO_ADDR
// if not tmp then
31979: LD_VAR 0 1
31983: NOT
31984: IFFALSE 31988
// exit ;
31986: GO 32014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31988: LD_VAR 0 1
31992: PUSH
31993: LD_INT 1
31995: PPUSH
31996: LD_VAR 0 1
32000: PPUSH
32001: CALL_OW 12
32005: ARRAY
32006: PPUSH
32007: LD_INT 1
32009: PPUSH
32010: CALL_OW 234
// end ;
32014: PPOPN 1
32016: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32017: LD_EXP 58
32021: PUSH
32022: LD_EXP 106
32026: AND
32027: IFFALSE 32139
32029: GO 32031
32031: DISABLE
32032: LD_INT 0
32034: PPUSH
32035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32036: LD_ADDR_VAR 0 2
32040: PUSH
32041: LD_INT 22
32043: PUSH
32044: LD_OWVAR 2
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: LD_INT 30
32058: PUSH
32059: LD_INT 27
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 30
32068: PUSH
32069: LD_INT 26
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 30
32078: PUSH
32079: LD_INT 28
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PPUSH
32096: CALL_OW 69
32100: ST_TO_ADDR
// if not tmp then
32101: LD_VAR 0 2
32105: NOT
32106: IFFALSE 32110
// exit ;
32108: GO 32139
// for i in tmp do
32110: LD_ADDR_VAR 0 1
32114: PUSH
32115: LD_VAR 0 2
32119: PUSH
32120: FOR_IN
32121: IFFALSE 32137
// SetLives ( i , 1 ) ;
32123: LD_VAR 0 1
32127: PPUSH
32128: LD_INT 1
32130: PPUSH
32131: CALL_OW 234
32135: GO 32120
32137: POP
32138: POP
// end ;
32139: PPOPN 2
32141: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32142: LD_EXP 58
32146: PUSH
32147: LD_EXP 107
32151: AND
32152: IFFALSE 32439
32154: GO 32156
32156: DISABLE
32157: LD_INT 0
32159: PPUSH
32160: PPUSH
32161: PPUSH
// begin i := rand ( 1 , 7 ) ;
32162: LD_ADDR_VAR 0 1
32166: PUSH
32167: LD_INT 1
32169: PPUSH
32170: LD_INT 7
32172: PPUSH
32173: CALL_OW 12
32177: ST_TO_ADDR
// case i of 1 :
32178: LD_VAR 0 1
32182: PUSH
32183: LD_INT 1
32185: DOUBLE
32186: EQUAL
32187: IFTRUE 32191
32189: GO 32201
32191: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32192: LD_STRING earthquake(getX(game), 0, 32)
32194: PPUSH
32195: CALL_OW 559
32199: GO 32439
32201: LD_INT 2
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32223
32209: POP
// begin ToLua ( displayStucuk(); ) ;
32210: LD_STRING displayStucuk();
32212: PPUSH
32213: CALL_OW 559
// ResetFog ;
32217: CALL_OW 335
// end ; 3 :
32221: GO 32439
32223: LD_INT 3
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32335
32231: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32232: LD_ADDR_VAR 0 2
32236: PUSH
32237: LD_INT 22
32239: PUSH
32240: LD_OWVAR 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 25
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PPUSH
32263: CALL_OW 69
32267: ST_TO_ADDR
// if not tmp then
32268: LD_VAR 0 2
32272: NOT
32273: IFFALSE 32277
// exit ;
32275: GO 32439
// un := tmp [ rand ( 1 , tmp ) ] ;
32277: LD_ADDR_VAR 0 3
32281: PUSH
32282: LD_VAR 0 2
32286: PUSH
32287: LD_INT 1
32289: PPUSH
32290: LD_VAR 0 2
32294: PPUSH
32295: CALL_OW 12
32299: ARRAY
32300: ST_TO_ADDR
// if Crawls ( un ) then
32301: LD_VAR 0 3
32305: PPUSH
32306: CALL_OW 318
32310: IFFALSE 32321
// ComWalk ( un ) ;
32312: LD_VAR 0 3
32316: PPUSH
32317: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32321: LD_VAR 0 3
32325: PPUSH
32326: LD_INT 8
32328: PPUSH
32329: CALL_OW 336
// end ; 4 :
32333: GO 32439
32335: LD_INT 4
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32417
32343: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: LD_INT 22
32351: PUSH
32352: LD_OWVAR 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 30
32363: PUSH
32364: LD_INT 29
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PPUSH
32375: CALL_OW 69
32379: ST_TO_ADDR
// if not tmp then
32380: LD_VAR 0 2
32384: NOT
32385: IFFALSE 32389
// exit ;
32387: GO 32439
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32389: LD_VAR 0 2
32393: PUSH
32394: LD_INT 1
32396: ARRAY
32397: PPUSH
32398: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32402: LD_VAR 0 2
32406: PUSH
32407: LD_INT 1
32409: ARRAY
32410: PPUSH
32411: CALL_OW 65
// end ; 5 .. 7 :
32415: GO 32439
32417: LD_INT 5
32419: DOUBLE
32420: GREATEREQUAL
32421: IFFALSE 32429
32423: LD_INT 7
32425: DOUBLE
32426: LESSEQUAL
32427: IFTRUE 32431
32429: GO 32438
32431: POP
// StreamSibBomb ; end ;
32432: CALL 28676 0 0
32436: GO 32439
32438: POP
// end ;
32439: PPOPN 3
32441: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32442: LD_EXP 58
32446: PUSH
32447: LD_EXP 108
32451: AND
32452: IFFALSE 32608
32454: GO 32456
32456: DISABLE
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32462: LD_ADDR_VAR 0 2
32466: PUSH
32467: LD_INT 81
32469: PUSH
32470: LD_OWVAR 2
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 21
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 21
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PPUSH
32511: CALL_OW 69
32515: ST_TO_ADDR
// if not tmp then
32516: LD_VAR 0 2
32520: NOT
32521: IFFALSE 32525
// exit ;
32523: GO 32608
// p := 0 ;
32525: LD_ADDR_VAR 0 3
32529: PUSH
32530: LD_INT 0
32532: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32533: LD_INT 35
32535: PPUSH
32536: CALL_OW 67
// p := p + 1 ;
32540: LD_ADDR_VAR 0 3
32544: PUSH
32545: LD_VAR 0 3
32549: PUSH
32550: LD_INT 1
32552: PLUS
32553: ST_TO_ADDR
// for i in tmp do
32554: LD_ADDR_VAR 0 1
32558: PUSH
32559: LD_VAR 0 2
32563: PUSH
32564: FOR_IN
32565: IFFALSE 32596
// if GetLives ( i ) < 1000 then
32567: LD_VAR 0 1
32571: PPUSH
32572: CALL_OW 256
32576: PUSH
32577: LD_INT 1000
32579: LESS
32580: IFFALSE 32594
// SetLives ( i , 1000 ) ;
32582: LD_VAR 0 1
32586: PPUSH
32587: LD_INT 1000
32589: PPUSH
32590: CALL_OW 234
32594: GO 32564
32596: POP
32597: POP
// until p > 20 ;
32598: LD_VAR 0 3
32602: PUSH
32603: LD_INT 20
32605: GREATER
32606: IFFALSE 32533
// end ;
32608: PPOPN 3
32610: END
// every 0 0$1 trigger StreamModeActive and sTime do
32611: LD_EXP 58
32615: PUSH
32616: LD_EXP 109
32620: AND
32621: IFFALSE 32656
32623: GO 32625
32625: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32626: LD_INT 28
32628: PPUSH
32629: LD_OWVAR 2
32633: PPUSH
32634: LD_INT 2
32636: PPUSH
32637: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32641: LD_INT 30
32643: PPUSH
32644: LD_OWVAR 2
32648: PPUSH
32649: LD_INT 2
32651: PPUSH
32652: CALL_OW 322
// end ;
32656: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32657: LD_EXP 58
32661: PUSH
32662: LD_EXP 110
32666: AND
32667: IFFALSE 32788
32669: GO 32671
32671: DISABLE
32672: LD_INT 0
32674: PPUSH
32675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32676: LD_ADDR_VAR 0 2
32680: PUSH
32681: LD_INT 22
32683: PUSH
32684: LD_OWVAR 2
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 21
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 3
32705: PUSH
32706: LD_INT 23
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: PPUSH
32725: CALL_OW 69
32729: ST_TO_ADDR
// if not tmp then
32730: LD_VAR 0 2
32734: NOT
32735: IFFALSE 32739
// exit ;
32737: GO 32788
// for i in tmp do
32739: LD_ADDR_VAR 0 1
32743: PUSH
32744: LD_VAR 0 2
32748: PUSH
32749: FOR_IN
32750: IFFALSE 32786
// begin if Crawls ( i ) then
32752: LD_VAR 0 1
32756: PPUSH
32757: CALL_OW 318
32761: IFFALSE 32772
// ComWalk ( i ) ;
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 138
// SetClass ( i , 2 ) ;
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_INT 2
32779: PPUSH
32780: CALL_OW 336
// end ;
32784: GO 32749
32786: POP
32787: POP
// end ;
32788: PPOPN 2
32790: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32791: LD_EXP 58
32795: PUSH
32796: LD_EXP 111
32800: AND
32801: IFFALSE 33089
32803: GO 32805
32805: DISABLE
32806: LD_INT 0
32808: PPUSH
32809: PPUSH
32810: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32811: LD_OWVAR 2
32815: PPUSH
32816: LD_INT 9
32818: PPUSH
32819: LD_INT 1
32821: PPUSH
32822: LD_INT 1
32824: PPUSH
32825: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32829: LD_INT 9
32831: PPUSH
32832: LD_OWVAR 2
32836: PPUSH
32837: CALL_OW 343
// uc_side := 9 ;
32841: LD_ADDR_OWVAR 20
32845: PUSH
32846: LD_INT 9
32848: ST_TO_ADDR
// uc_nation := 2 ;
32849: LD_ADDR_OWVAR 21
32853: PUSH
32854: LD_INT 2
32856: ST_TO_ADDR
// hc_name := Dark Warrior ;
32857: LD_ADDR_OWVAR 26
32861: PUSH
32862: LD_STRING Dark Warrior
32864: ST_TO_ADDR
// hc_gallery :=  ;
32865: LD_ADDR_OWVAR 33
32869: PUSH
32870: LD_STRING 
32872: ST_TO_ADDR
// hc_noskilllimit := true ;
32873: LD_ADDR_OWVAR 76
32877: PUSH
32878: LD_INT 1
32880: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32881: LD_ADDR_OWVAR 31
32885: PUSH
32886: LD_INT 30
32888: PUSH
32889: LD_INT 30
32891: PUSH
32892: LD_INT 30
32894: PUSH
32895: LD_INT 30
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: ST_TO_ADDR
// un := CreateHuman ;
32904: LD_ADDR_VAR 0 3
32908: PUSH
32909: CALL_OW 44
32913: ST_TO_ADDR
// hc_noskilllimit := false ;
32914: LD_ADDR_OWVAR 76
32918: PUSH
32919: LD_INT 0
32921: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32922: LD_VAR 0 3
32926: PPUSH
32927: LD_INT 1
32929: PPUSH
32930: CALL_OW 51
// ToLua ( playRanger() ) ;
32934: LD_STRING playRanger()
32936: PPUSH
32937: CALL_OW 559
// p := 0 ;
32941: LD_ADDR_VAR 0 2
32945: PUSH
32946: LD_INT 0
32948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32949: LD_INT 35
32951: PPUSH
32952: CALL_OW 67
// p := p + 1 ;
32956: LD_ADDR_VAR 0 2
32960: PUSH
32961: LD_VAR 0 2
32965: PUSH
32966: LD_INT 1
32968: PLUS
32969: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32970: LD_VAR 0 3
32974: PPUSH
32975: CALL_OW 256
32979: PUSH
32980: LD_INT 1000
32982: LESS
32983: IFFALSE 32997
// SetLives ( un , 1000 ) ;
32985: LD_VAR 0 3
32989: PPUSH
32990: LD_INT 1000
32992: PPUSH
32993: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32997: LD_VAR 0 3
33001: PPUSH
33002: LD_INT 81
33004: PUSH
33005: LD_OWVAR 2
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 91
33016: PUSH
33017: LD_VAR 0 3
33021: PUSH
33022: LD_INT 30
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PPUSH
33034: CALL_OW 69
33038: PPUSH
33039: LD_VAR 0 3
33043: PPUSH
33044: CALL_OW 74
33048: PPUSH
33049: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33053: LD_VAR 0 2
33057: PUSH
33058: LD_INT 80
33060: GREATER
33061: PUSH
33062: LD_VAR 0 3
33066: PPUSH
33067: CALL_OW 301
33071: OR
33072: IFFALSE 32949
// if un then
33074: LD_VAR 0 3
33078: IFFALSE 33089
// RemoveUnit ( un ) ;
33080: LD_VAR 0 3
33084: PPUSH
33085: CALL_OW 64
// end ;
33089: PPOPN 3
33091: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33092: LD_EXP 112
33096: IFFALSE 33212
33098: GO 33100
33100: DISABLE
33101: LD_INT 0
33103: PPUSH
33104: PPUSH
33105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33106: LD_ADDR_VAR 0 2
33110: PUSH
33111: LD_INT 81
33113: PUSH
33114: LD_OWVAR 2
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 21
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PPUSH
33137: CALL_OW 69
33141: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33142: LD_STRING playComputer()
33144: PPUSH
33145: CALL_OW 559
// if not tmp then
33149: LD_VAR 0 2
33153: NOT
33154: IFFALSE 33158
// exit ;
33156: GO 33212
// for i in tmp do
33158: LD_ADDR_VAR 0 1
33162: PUSH
33163: LD_VAR 0 2
33167: PUSH
33168: FOR_IN
33169: IFFALSE 33210
// for j := 1 to 4 do
33171: LD_ADDR_VAR 0 3
33175: PUSH
33176: DOUBLE
33177: LD_INT 1
33179: DEC
33180: ST_TO_ADDR
33181: LD_INT 4
33183: PUSH
33184: FOR_TO
33185: IFFALSE 33206
// SetSkill ( i , j , 10 ) ;
33187: LD_VAR 0 1
33191: PPUSH
33192: LD_VAR 0 3
33196: PPUSH
33197: LD_INT 10
33199: PPUSH
33200: CALL_OW 237
33204: GO 33184
33206: POP
33207: POP
33208: GO 33168
33210: POP
33211: POP
// end ;
33212: PPOPN 3
33214: END
// every 0 0$1 trigger s30 do var i , tmp ;
33215: LD_EXP 113
33219: IFFALSE 33288
33221: GO 33223
33223: DISABLE
33224: LD_INT 0
33226: PPUSH
33227: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33228: LD_ADDR_VAR 0 2
33232: PUSH
33233: LD_INT 22
33235: PUSH
33236: LD_OWVAR 2
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PPUSH
33245: CALL_OW 69
33249: ST_TO_ADDR
// if not tmp then
33250: LD_VAR 0 2
33254: NOT
33255: IFFALSE 33259
// exit ;
33257: GO 33288
// for i in tmp do
33259: LD_ADDR_VAR 0 1
33263: PUSH
33264: LD_VAR 0 2
33268: PUSH
33269: FOR_IN
33270: IFFALSE 33286
// SetLives ( i , 300 ) ;
33272: LD_VAR 0 1
33276: PPUSH
33277: LD_INT 300
33279: PPUSH
33280: CALL_OW 234
33284: GO 33269
33286: POP
33287: POP
// end ;
33288: PPOPN 2
33290: END
// every 0 0$1 trigger s60 do var i , tmp ;
33291: LD_EXP 114
33295: IFFALSE 33364
33297: GO 33299
33299: DISABLE
33300: LD_INT 0
33302: PPUSH
33303: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33304: LD_ADDR_VAR 0 2
33308: PUSH
33309: LD_INT 22
33311: PUSH
33312: LD_OWVAR 2
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PPUSH
33321: CALL_OW 69
33325: ST_TO_ADDR
// if not tmp then
33326: LD_VAR 0 2
33330: NOT
33331: IFFALSE 33335
// exit ;
33333: GO 33364
// for i in tmp do
33335: LD_ADDR_VAR 0 1
33339: PUSH
33340: LD_VAR 0 2
33344: PUSH
33345: FOR_IN
33346: IFFALSE 33362
// SetLives ( i , 600 ) ;
33348: LD_VAR 0 1
33352: PPUSH
33353: LD_INT 600
33355: PPUSH
33356: CALL_OW 234
33360: GO 33345
33362: POP
33363: POP
// end ;
33364: PPOPN 2
33366: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33367: LD_INT 0
33369: PPUSH
// case cmd of 301 :
33370: LD_VAR 0 1
33374: PUSH
33375: LD_INT 301
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33415
33383: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33384: LD_VAR 0 6
33388: PPUSH
33389: LD_VAR 0 7
33393: PPUSH
33394: LD_VAR 0 8
33398: PPUSH
33399: LD_VAR 0 4
33403: PPUSH
33404: LD_VAR 0 5
33408: PPUSH
33409: CALL 34624 0 5
33413: GO 33536
33415: LD_INT 302
33417: DOUBLE
33418: EQUAL
33419: IFTRUE 33423
33421: GO 33460
33423: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33424: LD_VAR 0 6
33428: PPUSH
33429: LD_VAR 0 7
33433: PPUSH
33434: LD_VAR 0 8
33438: PPUSH
33439: LD_VAR 0 9
33443: PPUSH
33444: LD_VAR 0 4
33448: PPUSH
33449: LD_VAR 0 5
33453: PPUSH
33454: CALL 34715 0 6
33458: GO 33536
33460: LD_INT 303
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33505
33468: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33469: LD_VAR 0 6
33473: PPUSH
33474: LD_VAR 0 7
33478: PPUSH
33479: LD_VAR 0 8
33483: PPUSH
33484: LD_VAR 0 9
33488: PPUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: LD_VAR 0 5
33498: PPUSH
33499: CALL 33541 0 6
33503: GO 33536
33505: LD_INT 304
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33535
33513: POP
// hHackTeleport ( unit , x , y ) ; end ;
33514: LD_VAR 0 2
33518: PPUSH
33519: LD_VAR 0 4
33523: PPUSH
33524: LD_VAR 0 5
33528: PPUSH
33529: CALL 35308 0 3
33533: GO 33536
33535: POP
// end ;
33536: LD_VAR 0 12
33540: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33541: LD_INT 0
33543: PPUSH
33544: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33545: LD_VAR 0 1
33549: PUSH
33550: LD_INT 1
33552: LESS
33553: PUSH
33554: LD_VAR 0 1
33558: PUSH
33559: LD_INT 3
33561: GREATER
33562: OR
33563: PUSH
33564: LD_VAR 0 5
33568: PPUSH
33569: LD_VAR 0 6
33573: PPUSH
33574: CALL_OW 428
33578: OR
33579: IFFALSE 33583
// exit ;
33581: GO 34311
// uc_side := your_side ;
33583: LD_ADDR_OWVAR 20
33587: PUSH
33588: LD_OWVAR 2
33592: ST_TO_ADDR
// uc_nation := nation ;
33593: LD_ADDR_OWVAR 21
33597: PUSH
33598: LD_VAR 0 1
33602: ST_TO_ADDR
// bc_level = 1 ;
33603: LD_ADDR_OWVAR 43
33607: PUSH
33608: LD_INT 1
33610: ST_TO_ADDR
// case btype of 1 :
33611: LD_VAR 0 2
33615: PUSH
33616: LD_INT 1
33618: DOUBLE
33619: EQUAL
33620: IFTRUE 33624
33622: GO 33635
33624: POP
// bc_type := b_depot ; 2 :
33625: LD_ADDR_OWVAR 42
33629: PUSH
33630: LD_INT 0
33632: ST_TO_ADDR
33633: GO 34255
33635: LD_INT 2
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33654
33643: POP
// bc_type := b_warehouse ; 3 :
33644: LD_ADDR_OWVAR 42
33648: PUSH
33649: LD_INT 1
33651: ST_TO_ADDR
33652: GO 34255
33654: LD_INT 3
33656: DOUBLE
33657: EQUAL
33658: IFTRUE 33662
33660: GO 33673
33662: POP
// bc_type := b_lab ; 4 .. 9 :
33663: LD_ADDR_OWVAR 42
33667: PUSH
33668: LD_INT 6
33670: ST_TO_ADDR
33671: GO 34255
33673: LD_INT 4
33675: DOUBLE
33676: GREATEREQUAL
33677: IFFALSE 33685
33679: LD_INT 9
33681: DOUBLE
33682: LESSEQUAL
33683: IFTRUE 33687
33685: GO 33747
33687: POP
// begin bc_type := b_lab_half ;
33688: LD_ADDR_OWVAR 42
33692: PUSH
33693: LD_INT 7
33695: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33696: LD_ADDR_OWVAR 44
33700: PUSH
33701: LD_INT 10
33703: PUSH
33704: LD_INT 11
33706: PUSH
33707: LD_INT 12
33709: PUSH
33710: LD_INT 15
33712: PUSH
33713: LD_INT 14
33715: PUSH
33716: LD_INT 13
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: PUSH
33727: LD_VAR 0 2
33731: PUSH
33732: LD_INT 3
33734: MINUS
33735: ARRAY
33736: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33737: LD_ADDR_OWVAR 45
33741: PUSH
33742: LD_INT 9
33744: ST_TO_ADDR
// end ; 10 .. 13 :
33745: GO 34255
33747: LD_INT 10
33749: DOUBLE
33750: GREATEREQUAL
33751: IFFALSE 33759
33753: LD_INT 13
33755: DOUBLE
33756: LESSEQUAL
33757: IFTRUE 33761
33759: GO 33838
33761: POP
// begin bc_type := b_lab_full ;
33762: LD_ADDR_OWVAR 42
33766: PUSH
33767: LD_INT 8
33769: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33770: LD_ADDR_OWVAR 44
33774: PUSH
33775: LD_INT 10
33777: PUSH
33778: LD_INT 12
33780: PUSH
33781: LD_INT 14
33783: PUSH
33784: LD_INT 13
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: PUSH
33793: LD_VAR 0 2
33797: PUSH
33798: LD_INT 9
33800: MINUS
33801: ARRAY
33802: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33803: LD_ADDR_OWVAR 45
33807: PUSH
33808: LD_INT 11
33810: PUSH
33811: LD_INT 15
33813: PUSH
33814: LD_INT 12
33816: PUSH
33817: LD_INT 15
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: PUSH
33826: LD_VAR 0 2
33830: PUSH
33831: LD_INT 9
33833: MINUS
33834: ARRAY
33835: ST_TO_ADDR
// end ; 14 :
33836: GO 34255
33838: LD_INT 14
33840: DOUBLE
33841: EQUAL
33842: IFTRUE 33846
33844: GO 33857
33846: POP
// bc_type := b_workshop ; 15 :
33847: LD_ADDR_OWVAR 42
33851: PUSH
33852: LD_INT 2
33854: ST_TO_ADDR
33855: GO 34255
33857: LD_INT 15
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33865
33863: GO 33876
33865: POP
// bc_type := b_factory ; 16 :
33866: LD_ADDR_OWVAR 42
33870: PUSH
33871: LD_INT 3
33873: ST_TO_ADDR
33874: GO 34255
33876: LD_INT 16
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33895
33884: POP
// bc_type := b_ext_gun ; 17 :
33885: LD_ADDR_OWVAR 42
33889: PUSH
33890: LD_INT 17
33892: ST_TO_ADDR
33893: GO 34255
33895: LD_INT 17
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33903
33901: GO 33931
33903: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33904: LD_ADDR_OWVAR 42
33908: PUSH
33909: LD_INT 19
33911: PUSH
33912: LD_INT 23
33914: PUSH
33915: LD_INT 19
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: LIST
33922: PUSH
33923: LD_VAR 0 1
33927: ARRAY
33928: ST_TO_ADDR
33929: GO 34255
33931: LD_INT 18
33933: DOUBLE
33934: EQUAL
33935: IFTRUE 33939
33937: GO 33950
33939: POP
// bc_type := b_ext_radar ; 19 :
33940: LD_ADDR_OWVAR 42
33944: PUSH
33945: LD_INT 20
33947: ST_TO_ADDR
33948: GO 34255
33950: LD_INT 19
33952: DOUBLE
33953: EQUAL
33954: IFTRUE 33958
33956: GO 33969
33958: POP
// bc_type := b_ext_radio ; 20 :
33959: LD_ADDR_OWVAR 42
33963: PUSH
33964: LD_INT 22
33966: ST_TO_ADDR
33967: GO 34255
33969: LD_INT 20
33971: DOUBLE
33972: EQUAL
33973: IFTRUE 33977
33975: GO 33988
33977: POP
// bc_type := b_ext_siberium ; 21 :
33978: LD_ADDR_OWVAR 42
33982: PUSH
33983: LD_INT 21
33985: ST_TO_ADDR
33986: GO 34255
33988: LD_INT 21
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 33996
33994: GO 34007
33996: POP
// bc_type := b_ext_computer ; 22 :
33997: LD_ADDR_OWVAR 42
34001: PUSH
34002: LD_INT 24
34004: ST_TO_ADDR
34005: GO 34255
34007: LD_INT 22
34009: DOUBLE
34010: EQUAL
34011: IFTRUE 34015
34013: GO 34026
34015: POP
// bc_type := b_ext_track ; 23 :
34016: LD_ADDR_OWVAR 42
34020: PUSH
34021: LD_INT 16
34023: ST_TO_ADDR
34024: GO 34255
34026: LD_INT 23
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34034
34032: GO 34045
34034: POP
// bc_type := b_ext_laser ; 24 :
34035: LD_ADDR_OWVAR 42
34039: PUSH
34040: LD_INT 25
34042: ST_TO_ADDR
34043: GO 34255
34045: LD_INT 24
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34053
34051: GO 34064
34053: POP
// bc_type := b_control_tower ; 25 :
34054: LD_ADDR_OWVAR 42
34058: PUSH
34059: LD_INT 36
34061: ST_TO_ADDR
34062: GO 34255
34064: LD_INT 25
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34083
34072: POP
// bc_type := b_breastwork ; 26 :
34073: LD_ADDR_OWVAR 42
34077: PUSH
34078: LD_INT 31
34080: ST_TO_ADDR
34081: GO 34255
34083: LD_INT 26
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 34102
34091: POP
// bc_type := b_bunker ; 27 :
34092: LD_ADDR_OWVAR 42
34096: PUSH
34097: LD_INT 32
34099: ST_TO_ADDR
34100: GO 34255
34102: LD_INT 27
34104: DOUBLE
34105: EQUAL
34106: IFTRUE 34110
34108: GO 34121
34110: POP
// bc_type := b_turret ; 28 :
34111: LD_ADDR_OWVAR 42
34115: PUSH
34116: LD_INT 33
34118: ST_TO_ADDR
34119: GO 34255
34121: LD_INT 28
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34140
34129: POP
// bc_type := b_armoury ; 29 :
34130: LD_ADDR_OWVAR 42
34134: PUSH
34135: LD_INT 4
34137: ST_TO_ADDR
34138: GO 34255
34140: LD_INT 29
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34148
34146: GO 34159
34148: POP
// bc_type := b_barracks ; 30 :
34149: LD_ADDR_OWVAR 42
34153: PUSH
34154: LD_INT 5
34156: ST_TO_ADDR
34157: GO 34255
34159: LD_INT 30
34161: DOUBLE
34162: EQUAL
34163: IFTRUE 34167
34165: GO 34178
34167: POP
// bc_type := b_solar_power ; 31 :
34168: LD_ADDR_OWVAR 42
34172: PUSH
34173: LD_INT 27
34175: ST_TO_ADDR
34176: GO 34255
34178: LD_INT 31
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34197
34186: POP
// bc_type := b_oil_power ; 32 :
34187: LD_ADDR_OWVAR 42
34191: PUSH
34192: LD_INT 26
34194: ST_TO_ADDR
34195: GO 34255
34197: LD_INT 32
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34205
34203: GO 34216
34205: POP
// bc_type := b_siberite_power ; 33 :
34206: LD_ADDR_OWVAR 42
34210: PUSH
34211: LD_INT 28
34213: ST_TO_ADDR
34214: GO 34255
34216: LD_INT 33
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34224
34222: GO 34235
34224: POP
// bc_type := b_oil_mine ; 34 :
34225: LD_ADDR_OWVAR 42
34229: PUSH
34230: LD_INT 29
34232: ST_TO_ADDR
34233: GO 34255
34235: LD_INT 34
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34243
34241: GO 34254
34243: POP
// bc_type := b_siberite_mine ; end ;
34244: LD_ADDR_OWVAR 42
34248: PUSH
34249: LD_INT 30
34251: ST_TO_ADDR
34252: GO 34255
34254: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34255: LD_ADDR_VAR 0 8
34259: PUSH
34260: LD_VAR 0 5
34264: PPUSH
34265: LD_VAR 0 6
34269: PPUSH
34270: LD_VAR 0 3
34274: PPUSH
34275: CALL_OW 47
34279: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34280: LD_OWVAR 42
34284: PUSH
34285: LD_INT 32
34287: PUSH
34288: LD_INT 33
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: IN
34295: IFFALSE 34311
// PlaceWeaponTurret ( b , weapon ) ;
34297: LD_VAR 0 8
34301: PPUSH
34302: LD_VAR 0 4
34306: PPUSH
34307: CALL_OW 431
// end ;
34311: LD_VAR 0 7
34315: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34316: LD_INT 0
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34322: LD_ADDR_VAR 0 4
34326: PUSH
34327: LD_INT 22
34329: PUSH
34330: LD_OWVAR 2
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: LD_INT 30
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 30
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PPUSH
34371: CALL_OW 69
34375: ST_TO_ADDR
// if not tmp then
34376: LD_VAR 0 4
34380: NOT
34381: IFFALSE 34385
// exit ;
34383: GO 34444
// for i in tmp do
34385: LD_ADDR_VAR 0 2
34389: PUSH
34390: LD_VAR 0 4
34394: PUSH
34395: FOR_IN
34396: IFFALSE 34442
// for j = 1 to 3 do
34398: LD_ADDR_VAR 0 3
34402: PUSH
34403: DOUBLE
34404: LD_INT 1
34406: DEC
34407: ST_TO_ADDR
34408: LD_INT 3
34410: PUSH
34411: FOR_TO
34412: IFFALSE 34438
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34414: LD_VAR 0 2
34418: PPUSH
34419: CALL_OW 274
34423: PPUSH
34424: LD_VAR 0 3
34428: PPUSH
34429: LD_INT 99999
34431: PPUSH
34432: CALL_OW 277
34436: GO 34411
34438: POP
34439: POP
34440: GO 34395
34442: POP
34443: POP
// end ;
34444: LD_VAR 0 1
34448: RET
// export function hHackSetLevel10 ; var i , j ; begin
34449: LD_INT 0
34451: PPUSH
34452: PPUSH
34453: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34454: LD_ADDR_VAR 0 2
34458: PUSH
34459: LD_INT 21
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PPUSH
34469: CALL_OW 69
34473: PUSH
34474: FOR_IN
34475: IFFALSE 34527
// if IsSelected ( i ) then
34477: LD_VAR 0 2
34481: PPUSH
34482: CALL_OW 306
34486: IFFALSE 34525
// begin for j := 1 to 4 do
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: DOUBLE
34494: LD_INT 1
34496: DEC
34497: ST_TO_ADDR
34498: LD_INT 4
34500: PUSH
34501: FOR_TO
34502: IFFALSE 34523
// SetSkill ( i , j , 10 ) ;
34504: LD_VAR 0 2
34508: PPUSH
34509: LD_VAR 0 3
34513: PPUSH
34514: LD_INT 10
34516: PPUSH
34517: CALL_OW 237
34521: GO 34501
34523: POP
34524: POP
// end ;
34525: GO 34474
34527: POP
34528: POP
// end ;
34529: LD_VAR 0 1
34533: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
34538: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34539: LD_ADDR_VAR 0 2
34543: PUSH
34544: LD_INT 22
34546: PUSH
34547: LD_OWVAR 2
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 21
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PPUSH
34570: CALL_OW 69
34574: PUSH
34575: FOR_IN
34576: IFFALSE 34617
// begin for j := 1 to 4 do
34578: LD_ADDR_VAR 0 3
34582: PUSH
34583: DOUBLE
34584: LD_INT 1
34586: DEC
34587: ST_TO_ADDR
34588: LD_INT 4
34590: PUSH
34591: FOR_TO
34592: IFFALSE 34613
// SetSkill ( i , j , 10 ) ;
34594: LD_VAR 0 2
34598: PPUSH
34599: LD_VAR 0 3
34603: PPUSH
34604: LD_INT 10
34606: PPUSH
34607: CALL_OW 237
34611: GO 34591
34613: POP
34614: POP
// end ;
34615: GO 34575
34617: POP
34618: POP
// end ;
34619: LD_VAR 0 1
34623: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34624: LD_INT 0
34626: PPUSH
// uc_side := your_side ;
34627: LD_ADDR_OWVAR 20
34631: PUSH
34632: LD_OWVAR 2
34636: ST_TO_ADDR
// uc_nation := nation ;
34637: LD_ADDR_OWVAR 21
34641: PUSH
34642: LD_VAR 0 1
34646: ST_TO_ADDR
// InitHc ;
34647: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34651: LD_INT 0
34653: PPUSH
34654: LD_VAR 0 2
34658: PPUSH
34659: LD_VAR 0 3
34663: PPUSH
34664: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34668: LD_VAR 0 4
34672: PPUSH
34673: LD_VAR 0 5
34677: PPUSH
34678: CALL_OW 428
34682: PUSH
34683: LD_INT 0
34685: EQUAL
34686: IFFALSE 34710
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34688: CALL_OW 44
34692: PPUSH
34693: LD_VAR 0 4
34697: PPUSH
34698: LD_VAR 0 5
34702: PPUSH
34703: LD_INT 1
34705: PPUSH
34706: CALL_OW 48
// end ;
34710: LD_VAR 0 6
34714: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34715: LD_INT 0
34717: PPUSH
34718: PPUSH
// uc_side := your_side ;
34719: LD_ADDR_OWVAR 20
34723: PUSH
34724: LD_OWVAR 2
34728: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34729: LD_VAR 0 1
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 4
34745: PUSH
34746: LD_INT 5
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: IN
34756: IFFALSE 34768
// uc_nation := nation_american else
34758: LD_ADDR_OWVAR 21
34762: PUSH
34763: LD_INT 1
34765: ST_TO_ADDR
34766: GO 34811
// if chassis in [ 11 , 12 , 13 , 14 ] then
34768: LD_VAR 0 1
34772: PUSH
34773: LD_INT 11
34775: PUSH
34776: LD_INT 12
34778: PUSH
34779: LD_INT 13
34781: PUSH
34782: LD_INT 14
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: IN
34791: IFFALSE 34803
// uc_nation := nation_arabian else
34793: LD_ADDR_OWVAR 21
34797: PUSH
34798: LD_INT 2
34800: ST_TO_ADDR
34801: GO 34811
// uc_nation := nation_russian ;
34803: LD_ADDR_OWVAR 21
34807: PUSH
34808: LD_INT 3
34810: ST_TO_ADDR
// vc_chassis := chassis ;
34811: LD_ADDR_OWVAR 37
34815: PUSH
34816: LD_VAR 0 1
34820: ST_TO_ADDR
// vc_engine := engine ;
34821: LD_ADDR_OWVAR 39
34825: PUSH
34826: LD_VAR 0 2
34830: ST_TO_ADDR
// vc_control := control ;
34831: LD_ADDR_OWVAR 38
34835: PUSH
34836: LD_VAR 0 3
34840: ST_TO_ADDR
// vc_weapon := weapon ;
34841: LD_ADDR_OWVAR 40
34845: PUSH
34846: LD_VAR 0 4
34850: ST_TO_ADDR
// un := CreateVehicle ;
34851: LD_ADDR_VAR 0 8
34855: PUSH
34856: CALL_OW 45
34860: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34861: LD_VAR 0 8
34865: PPUSH
34866: LD_INT 0
34868: PPUSH
34869: LD_INT 5
34871: PPUSH
34872: CALL_OW 12
34876: PPUSH
34877: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34881: LD_VAR 0 8
34885: PPUSH
34886: LD_VAR 0 5
34890: PPUSH
34891: LD_VAR 0 6
34895: PPUSH
34896: LD_INT 1
34898: PPUSH
34899: CALL_OW 48
// end ;
34903: LD_VAR 0 7
34907: RET
// export hInvincible ; every 1 do
34908: GO 34910
34910: DISABLE
// hInvincible := [ ] ;
34911: LD_ADDR_EXP 115
34915: PUSH
34916: EMPTY
34917: ST_TO_ADDR
34918: END
// every 10 do var i ;
34919: GO 34921
34921: DISABLE
34922: LD_INT 0
34924: PPUSH
// begin enable ;
34925: ENABLE
// if not hInvincible then
34926: LD_EXP 115
34930: NOT
34931: IFFALSE 34935
// exit ;
34933: GO 34979
// for i in hInvincible do
34935: LD_ADDR_VAR 0 1
34939: PUSH
34940: LD_EXP 115
34944: PUSH
34945: FOR_IN
34946: IFFALSE 34977
// if GetLives ( i ) < 1000 then
34948: LD_VAR 0 1
34952: PPUSH
34953: CALL_OW 256
34957: PUSH
34958: LD_INT 1000
34960: LESS
34961: IFFALSE 34975
// SetLives ( i , 1000 ) ;
34963: LD_VAR 0 1
34967: PPUSH
34968: LD_INT 1000
34970: PPUSH
34971: CALL_OW 234
34975: GO 34945
34977: POP
34978: POP
// end ;
34979: PPOPN 1
34981: END
// export function hHackInvincible ; var i ; begin
34982: LD_INT 0
34984: PPUSH
34985: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34986: LD_ADDR_VAR 0 2
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: LD_INT 21
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 21
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: PPUSH
35019: CALL_OW 69
35023: PUSH
35024: FOR_IN
35025: IFFALSE 35086
// if IsSelected ( i ) then
35027: LD_VAR 0 2
35031: PPUSH
35032: CALL_OW 306
35036: IFFALSE 35084
// begin if i in hInvincible then
35038: LD_VAR 0 2
35042: PUSH
35043: LD_EXP 115
35047: IN
35048: IFFALSE 35068
// hInvincible := hInvincible diff i else
35050: LD_ADDR_EXP 115
35054: PUSH
35055: LD_EXP 115
35059: PUSH
35060: LD_VAR 0 2
35064: DIFF
35065: ST_TO_ADDR
35066: GO 35084
// hInvincible := hInvincible union i ;
35068: LD_ADDR_EXP 115
35072: PUSH
35073: LD_EXP 115
35077: PUSH
35078: LD_VAR 0 2
35082: UNION
35083: ST_TO_ADDR
// end ;
35084: GO 35024
35086: POP
35087: POP
// end ;
35088: LD_VAR 0 1
35092: RET
// export function hHackInvisible ; var i , j ; begin
35093: LD_INT 0
35095: PPUSH
35096: PPUSH
35097: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35098: LD_ADDR_VAR 0 2
35102: PUSH
35103: LD_INT 21
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PPUSH
35113: CALL_OW 69
35117: PUSH
35118: FOR_IN
35119: IFFALSE 35143
// if IsSelected ( i ) then
35121: LD_VAR 0 2
35125: PPUSH
35126: CALL_OW 306
35130: IFFALSE 35141
// ComForceInvisible ( i ) ;
35132: LD_VAR 0 2
35136: PPUSH
35137: CALL_OW 496
35141: GO 35118
35143: POP
35144: POP
// end ;
35145: LD_VAR 0 1
35149: RET
// export function hHackChangeYourSide ; begin
35150: LD_INT 0
35152: PPUSH
// if your_side = 8 then
35153: LD_OWVAR 2
35157: PUSH
35158: LD_INT 8
35160: EQUAL
35161: IFFALSE 35173
// your_side := 0 else
35163: LD_ADDR_OWVAR 2
35167: PUSH
35168: LD_INT 0
35170: ST_TO_ADDR
35171: GO 35187
// your_side := your_side + 1 ;
35173: LD_ADDR_OWVAR 2
35177: PUSH
35178: LD_OWVAR 2
35182: PUSH
35183: LD_INT 1
35185: PLUS
35186: ST_TO_ADDR
// end ;
35187: LD_VAR 0 1
35191: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35192: LD_INT 0
35194: PPUSH
35195: PPUSH
35196: PPUSH
// for i in all_units do
35197: LD_ADDR_VAR 0 2
35201: PUSH
35202: LD_OWVAR 3
35206: PUSH
35207: FOR_IN
35208: IFFALSE 35286
// if IsSelected ( i ) then
35210: LD_VAR 0 2
35214: PPUSH
35215: CALL_OW 306
35219: IFFALSE 35284
// begin j := GetSide ( i ) ;
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_VAR 0 2
35230: PPUSH
35231: CALL_OW 255
35235: ST_TO_ADDR
// if j = 8 then
35236: LD_VAR 0 3
35240: PUSH
35241: LD_INT 8
35243: EQUAL
35244: IFFALSE 35256
// j := 0 else
35246: LD_ADDR_VAR 0 3
35250: PUSH
35251: LD_INT 0
35253: ST_TO_ADDR
35254: GO 35270
// j := j + 1 ;
35256: LD_ADDR_VAR 0 3
35260: PUSH
35261: LD_VAR 0 3
35265: PUSH
35266: LD_INT 1
35268: PLUS
35269: ST_TO_ADDR
// SetSide ( i , j ) ;
35270: LD_VAR 0 2
35274: PPUSH
35275: LD_VAR 0 3
35279: PPUSH
35280: CALL_OW 235
// end ;
35284: GO 35207
35286: POP
35287: POP
// end ;
35288: LD_VAR 0 1
35292: RET
// export function hHackFog ; begin
35293: LD_INT 0
35295: PPUSH
// FogOff ( true ) ;
35296: LD_INT 1
35298: PPUSH
35299: CALL_OW 344
// end ;
35303: LD_VAR 0 1
35307: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35308: LD_INT 0
35310: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35311: LD_VAR 0 1
35315: PPUSH
35316: LD_VAR 0 2
35320: PPUSH
35321: LD_VAR 0 3
35325: PPUSH
35326: LD_INT 1
35328: PPUSH
35329: LD_INT 1
35331: PPUSH
35332: CALL_OW 483
// CenterOnXY ( x , y ) ;
35336: LD_VAR 0 2
35340: PPUSH
35341: LD_VAR 0 3
35345: PPUSH
35346: CALL_OW 84
// end ;
35350: LD_VAR 0 4
35354: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35355: LD_INT 0
35357: PPUSH
35358: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35359: LD_VAR 0 1
35363: NOT
35364: PUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_VAR 0 3
35374: PPUSH
35375: CALL_OW 488
35379: NOT
35380: OR
35381: PUSH
35382: LD_VAR 0 1
35386: PPUSH
35387: CALL_OW 266
35391: PUSH
35392: LD_INT 3
35394: NONEQUAL
35395: PUSH
35396: LD_VAR 0 1
35400: PPUSH
35401: CALL_OW 247
35405: PUSH
35406: LD_INT 1
35408: EQUAL
35409: NOT
35410: AND
35411: OR
35412: IFFALSE 35416
// exit ;
35414: GO 35565
// if GetType ( factory ) = unit_human then
35416: LD_VAR 0 1
35420: PPUSH
35421: CALL_OW 247
35425: PUSH
35426: LD_INT 1
35428: EQUAL
35429: IFFALSE 35446
// factory := IsInUnit ( factory ) ;
35431: LD_ADDR_VAR 0 1
35435: PUSH
35436: LD_VAR 0 1
35440: PPUSH
35441: CALL_OW 310
35445: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 266
35455: PUSH
35456: LD_INT 3
35458: NONEQUAL
35459: IFFALSE 35463
// exit ;
35461: GO 35565
// if HexInfo ( x , y ) = factory then
35463: LD_VAR 0 2
35467: PPUSH
35468: LD_VAR 0 3
35472: PPUSH
35473: CALL_OW 428
35477: PUSH
35478: LD_VAR 0 1
35482: EQUAL
35483: IFFALSE 35510
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35485: LD_ADDR_EXP 116
35489: PUSH
35490: LD_EXP 116
35494: PPUSH
35495: LD_VAR 0 1
35499: PPUSH
35500: LD_INT 0
35502: PPUSH
35503: CALL_OW 1
35507: ST_TO_ADDR
35508: GO 35561
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35510: LD_ADDR_EXP 116
35514: PUSH
35515: LD_EXP 116
35519: PPUSH
35520: LD_VAR 0 1
35524: PPUSH
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL_OW 255
35534: PUSH
35535: LD_VAR 0 1
35539: PUSH
35540: LD_VAR 0 2
35544: PUSH
35545: LD_VAR 0 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: PPUSH
35556: CALL_OW 1
35560: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35561: CALL 35570 0 0
// end ;
35565: LD_VAR 0 4
35569: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35570: LD_INT 0
35572: PPUSH
35573: PPUSH
35574: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35575: LD_STRING resetFactoryWaypoint();
35577: PPUSH
35578: CALL_OW 559
// if factoryWaypoints then
35582: LD_EXP 116
35586: IFFALSE 35712
// begin list := PrepareArray ( factoryWaypoints ) ;
35588: LD_ADDR_VAR 0 3
35592: PUSH
35593: LD_EXP 116
35597: PPUSH
35598: CALL 83172 0 1
35602: ST_TO_ADDR
// for i := 1 to list do
35603: LD_ADDR_VAR 0 2
35607: PUSH
35608: DOUBLE
35609: LD_INT 1
35611: DEC
35612: ST_TO_ADDR
35613: LD_VAR 0 3
35617: PUSH
35618: FOR_TO
35619: IFFALSE 35710
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35621: LD_STRING setFactoryWaypointXY(
35623: PUSH
35624: LD_VAR 0 3
35628: PUSH
35629: LD_VAR 0 2
35633: ARRAY
35634: PUSH
35635: LD_INT 1
35637: ARRAY
35638: STR
35639: PUSH
35640: LD_STRING ,
35642: STR
35643: PUSH
35644: LD_VAR 0 3
35648: PUSH
35649: LD_VAR 0 2
35653: ARRAY
35654: PUSH
35655: LD_INT 2
35657: ARRAY
35658: STR
35659: PUSH
35660: LD_STRING ,
35662: STR
35663: PUSH
35664: LD_VAR 0 3
35668: PUSH
35669: LD_VAR 0 2
35673: ARRAY
35674: PUSH
35675: LD_INT 3
35677: ARRAY
35678: STR
35679: PUSH
35680: LD_STRING ,
35682: STR
35683: PUSH
35684: LD_VAR 0 3
35688: PUSH
35689: LD_VAR 0 2
35693: ARRAY
35694: PUSH
35695: LD_INT 4
35697: ARRAY
35698: STR
35699: PUSH
35700: LD_STRING )
35702: STR
35703: PPUSH
35704: CALL_OW 559
35708: GO 35618
35710: POP
35711: POP
// end ; end ;
35712: LD_VAR 0 1
35716: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35717: LD_INT 0
35719: PPUSH
// if HexInfo ( x , y ) = warehouse then
35720: LD_VAR 0 2
35724: PPUSH
35725: LD_VAR 0 3
35729: PPUSH
35730: CALL_OW 428
35734: PUSH
35735: LD_VAR 0 1
35739: EQUAL
35740: IFFALSE 35767
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35742: LD_ADDR_EXP 117
35746: PUSH
35747: LD_EXP 117
35751: PPUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: LD_INT 0
35759: PPUSH
35760: CALL_OW 1
35764: ST_TO_ADDR
35765: GO 35818
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35767: LD_ADDR_EXP 117
35771: PUSH
35772: LD_EXP 117
35776: PPUSH
35777: LD_VAR 0 1
35781: PPUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 255
35791: PUSH
35792: LD_VAR 0 1
35796: PUSH
35797: LD_VAR 0 2
35801: PUSH
35802: LD_VAR 0 3
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: PPUSH
35813: CALL_OW 1
35817: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35818: CALL 35827 0 0
// end ;
35822: LD_VAR 0 4
35826: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35827: LD_INT 0
35829: PPUSH
35830: PPUSH
35831: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35832: LD_STRING resetWarehouseGatheringPoints();
35834: PPUSH
35835: CALL_OW 559
// if warehouseGatheringPoints then
35839: LD_EXP 117
35843: IFFALSE 35969
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35845: LD_ADDR_VAR 0 3
35849: PUSH
35850: LD_EXP 117
35854: PPUSH
35855: CALL 83172 0 1
35859: ST_TO_ADDR
// for i := 1 to list do
35860: LD_ADDR_VAR 0 2
35864: PUSH
35865: DOUBLE
35866: LD_INT 1
35868: DEC
35869: ST_TO_ADDR
35870: LD_VAR 0 3
35874: PUSH
35875: FOR_TO
35876: IFFALSE 35967
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35878: LD_STRING setWarehouseGatheringPointXY(
35880: PUSH
35881: LD_VAR 0 3
35885: PUSH
35886: LD_VAR 0 2
35890: ARRAY
35891: PUSH
35892: LD_INT 1
35894: ARRAY
35895: STR
35896: PUSH
35897: LD_STRING ,
35899: STR
35900: PUSH
35901: LD_VAR 0 3
35905: PUSH
35906: LD_VAR 0 2
35910: ARRAY
35911: PUSH
35912: LD_INT 2
35914: ARRAY
35915: STR
35916: PUSH
35917: LD_STRING ,
35919: STR
35920: PUSH
35921: LD_VAR 0 3
35925: PUSH
35926: LD_VAR 0 2
35930: ARRAY
35931: PUSH
35932: LD_INT 3
35934: ARRAY
35935: STR
35936: PUSH
35937: LD_STRING ,
35939: STR
35940: PUSH
35941: LD_VAR 0 3
35945: PUSH
35946: LD_VAR 0 2
35950: ARRAY
35951: PUSH
35952: LD_INT 4
35954: ARRAY
35955: STR
35956: PUSH
35957: LD_STRING )
35959: STR
35960: PPUSH
35961: CALL_OW 559
35965: GO 35875
35967: POP
35968: POP
// end ; end ;
35969: LD_VAR 0 1
35973: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35974: LD_EXP 117
35978: IFFALSE 36663
35980: GO 35982
35982: DISABLE
35983: LD_INT 0
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
// begin enable ;
35994: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35995: LD_ADDR_VAR 0 3
35999: PUSH
36000: LD_EXP 117
36004: PPUSH
36005: CALL 83172 0 1
36009: ST_TO_ADDR
// if not list then
36010: LD_VAR 0 3
36014: NOT
36015: IFFALSE 36019
// exit ;
36017: GO 36663
// for i := 1 to list do
36019: LD_ADDR_VAR 0 1
36023: PUSH
36024: DOUBLE
36025: LD_INT 1
36027: DEC
36028: ST_TO_ADDR
36029: LD_VAR 0 3
36033: PUSH
36034: FOR_TO
36035: IFFALSE 36661
// begin depot := list [ i ] [ 2 ] ;
36037: LD_ADDR_VAR 0 8
36041: PUSH
36042: LD_VAR 0 3
36046: PUSH
36047: LD_VAR 0 1
36051: ARRAY
36052: PUSH
36053: LD_INT 2
36055: ARRAY
36056: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36057: LD_ADDR_VAR 0 5
36061: PUSH
36062: LD_VAR 0 3
36066: PUSH
36067: LD_VAR 0 1
36071: ARRAY
36072: PUSH
36073: LD_INT 1
36075: ARRAY
36076: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36077: LD_VAR 0 8
36081: PPUSH
36082: CALL_OW 301
36086: PUSH
36087: LD_VAR 0 5
36091: PUSH
36092: LD_VAR 0 8
36096: PPUSH
36097: CALL_OW 255
36101: NONEQUAL
36102: OR
36103: IFFALSE 36132
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36105: LD_ADDR_EXP 117
36109: PUSH
36110: LD_EXP 117
36114: PPUSH
36115: LD_VAR 0 8
36119: PPUSH
36120: LD_INT 0
36122: PPUSH
36123: CALL_OW 1
36127: ST_TO_ADDR
// exit ;
36128: POP
36129: POP
36130: GO 36663
// end ; x := list [ i ] [ 3 ] ;
36132: LD_ADDR_VAR 0 6
36136: PUSH
36137: LD_VAR 0 3
36141: PUSH
36142: LD_VAR 0 1
36146: ARRAY
36147: PUSH
36148: LD_INT 3
36150: ARRAY
36151: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36152: LD_ADDR_VAR 0 7
36156: PUSH
36157: LD_VAR 0 3
36161: PUSH
36162: LD_VAR 0 1
36166: ARRAY
36167: PUSH
36168: LD_INT 4
36170: ARRAY
36171: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36172: LD_ADDR_VAR 0 9
36176: PUSH
36177: LD_VAR 0 6
36181: PPUSH
36182: LD_VAR 0 7
36186: PPUSH
36187: LD_INT 16
36189: PPUSH
36190: CALL 81760 0 3
36194: ST_TO_ADDR
// if not cratesNearbyPoint then
36195: LD_VAR 0 9
36199: NOT
36200: IFFALSE 36206
// exit ;
36202: POP
36203: POP
36204: GO 36663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36206: LD_ADDR_VAR 0 4
36210: PUSH
36211: LD_INT 22
36213: PUSH
36214: LD_VAR 0 5
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 3
36225: PUSH
36226: LD_INT 60
36228: PUSH
36229: EMPTY
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 91
36238: PUSH
36239: LD_VAR 0 8
36243: PUSH
36244: LD_INT 6
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: LD_INT 25
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 25
36267: PUSH
36268: LD_INT 16
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: PPUSH
36286: CALL_OW 69
36290: PUSH
36291: LD_VAR 0 8
36295: PPUSH
36296: CALL_OW 313
36300: PPUSH
36301: LD_INT 3
36303: PUSH
36304: LD_INT 60
36306: PUSH
36307: EMPTY
36308: LIST
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 25
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 25
36329: PUSH
36330: LD_INT 16
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PPUSH
36346: CALL_OW 72
36350: UNION
36351: ST_TO_ADDR
// if tmp then
36352: LD_VAR 0 4
36356: IFFALSE 36436
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36358: LD_ADDR_VAR 0 4
36362: PUSH
36363: LD_VAR 0 4
36367: PPUSH
36368: LD_INT 3
36370: PPUSH
36371: CALL 79729 0 2
36375: ST_TO_ADDR
// for j in tmp do
36376: LD_ADDR_VAR 0 2
36380: PUSH
36381: LD_VAR 0 4
36385: PUSH
36386: FOR_IN
36387: IFFALSE 36430
// begin if IsInUnit ( j ) then
36389: LD_VAR 0 2
36393: PPUSH
36394: CALL_OW 310
36398: IFFALSE 36409
// ComExit ( j ) ;
36400: LD_VAR 0 2
36404: PPUSH
36405: CALL 79812 0 1
// AddComCollect ( j , x , y ) ;
36409: LD_VAR 0 2
36413: PPUSH
36414: LD_VAR 0 6
36418: PPUSH
36419: LD_VAR 0 7
36423: PPUSH
36424: CALL_OW 177
// end ;
36428: GO 36386
36430: POP
36431: POP
// exit ;
36432: POP
36433: POP
36434: GO 36663
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36436: LD_ADDR_VAR 0 4
36440: PUSH
36441: LD_INT 22
36443: PUSH
36444: LD_VAR 0 5
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 91
36455: PUSH
36456: LD_VAR 0 8
36460: PUSH
36461: LD_INT 8
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 34
36474: PUSH
36475: LD_INT 12
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 34
36484: PUSH
36485: LD_INT 51
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 34
36494: PUSH
36495: LD_INT 32
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 34
36504: PUSH
36505: LD_INT 89
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: PPUSH
36524: CALL_OW 69
36528: ST_TO_ADDR
// if tmp then
36529: LD_VAR 0 4
36533: IFFALSE 36659
// begin for j in tmp do
36535: LD_ADDR_VAR 0 2
36539: PUSH
36540: LD_VAR 0 4
36544: PUSH
36545: FOR_IN
36546: IFFALSE 36657
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36548: LD_VAR 0 2
36552: PPUSH
36553: CALL_OW 262
36557: PUSH
36558: LD_INT 3
36560: EQUAL
36561: PUSH
36562: LD_VAR 0 2
36566: PPUSH
36567: CALL_OW 261
36571: PUSH
36572: LD_INT 20
36574: GREATER
36575: OR
36576: PUSH
36577: LD_VAR 0 2
36581: PPUSH
36582: CALL_OW 314
36586: NOT
36587: AND
36588: PUSH
36589: LD_VAR 0 2
36593: PPUSH
36594: CALL_OW 263
36598: PUSH
36599: LD_INT 1
36601: NONEQUAL
36602: PUSH
36603: LD_VAR 0 2
36607: PPUSH
36608: CALL_OW 311
36612: OR
36613: AND
36614: IFFALSE 36655
// begin ComCollect ( j , x , y ) ;
36616: LD_VAR 0 2
36620: PPUSH
36621: LD_VAR 0 6
36625: PPUSH
36626: LD_VAR 0 7
36630: PPUSH
36631: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36635: LD_VAR 0 2
36639: PPUSH
36640: LD_VAR 0 8
36644: PPUSH
36645: CALL_OW 172
// exit ;
36649: POP
36650: POP
36651: POP
36652: POP
36653: GO 36663
// end ;
36655: GO 36545
36657: POP
36658: POP
// end ; end ;
36659: GO 36034
36661: POP
36662: POP
// end ; end_of_file
36663: PPOPN 9
36665: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
36666: LD_VAR 0 1
36670: PUSH
36671: LD_INT 200
36673: DOUBLE
36674: GREATEREQUAL
36675: IFFALSE 36683
36677: LD_INT 299
36679: DOUBLE
36680: LESSEQUAL
36681: IFTRUE 36685
36683: GO 36717
36685: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
36686: LD_VAR 0 1
36690: PPUSH
36691: LD_VAR 0 2
36695: PPUSH
36696: LD_VAR 0 3
36700: PPUSH
36701: LD_VAR 0 4
36705: PPUSH
36706: LD_VAR 0 5
36710: PPUSH
36711: CALL 37205 0 5
36715: GO 36794
36717: LD_INT 300
36719: DOUBLE
36720: GREATEREQUAL
36721: IFFALSE 36729
36723: LD_INT 399
36725: DOUBLE
36726: LESSEQUAL
36727: IFTRUE 36731
36729: GO 36793
36731: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
36732: LD_VAR 0 1
36736: PPUSH
36737: LD_VAR 0 2
36741: PPUSH
36742: LD_VAR 0 3
36746: PPUSH
36747: LD_VAR 0 4
36751: PPUSH
36752: LD_VAR 0 5
36756: PPUSH
36757: LD_VAR 0 6
36761: PPUSH
36762: LD_VAR 0 7
36766: PPUSH
36767: LD_VAR 0 8
36771: PPUSH
36772: LD_VAR 0 9
36776: PPUSH
36777: LD_VAR 0 10
36781: PPUSH
36782: LD_VAR 0 11
36786: PPUSH
36787: CALL 33367 0 11
36791: GO 36794
36793: POP
// end ;
36794: PPOPN 11
36796: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
36797: LD_VAR 0 1
36801: PPUSH
36802: LD_VAR 0 2
36806: PPUSH
36807: LD_VAR 0 3
36811: PPUSH
36812: LD_VAR 0 4
36816: PPUSH
36817: LD_VAR 0 5
36821: PPUSH
36822: CALL 36941 0 5
// end ; end_of_file
36826: PPOPN 5
36828: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36829: LD_INT 0
36831: PPUSH
36832: PPUSH
36833: PPUSH
36834: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36835: LD_VAR 0 1
36839: PPUSH
36840: CALL_OW 264
36844: PUSH
36845: LD_INT 91
36847: EQUAL
36848: IFFALSE 36920
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36850: LD_INT 68
36852: PPUSH
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 255
36862: PPUSH
36863: CALL_OW 321
36867: PUSH
36868: LD_INT 2
36870: EQUAL
36871: IFFALSE 36883
// eff := 70 else
36873: LD_ADDR_VAR 0 4
36877: PUSH
36878: LD_INT 70
36880: ST_TO_ADDR
36881: GO 36891
// eff := 30 ;
36883: LD_ADDR_VAR 0 4
36887: PUSH
36888: LD_INT 30
36890: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36891: LD_VAR 0 1
36895: PPUSH
36896: CALL_OW 250
36900: PPUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL_OW 251
36910: PPUSH
36911: LD_VAR 0 4
36915: PPUSH
36916: CALL_OW 495
// end ; end ;
36920: LD_VAR 0 2
36924: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36925: LD_INT 0
36927: PPUSH
// end ;
36928: LD_VAR 0 4
36932: RET
// export function SOS_Command ( cmd ) ; begin
36933: LD_INT 0
36935: PPUSH
// end ;
36936: LD_VAR 0 2
36940: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36941: LD_INT 0
36943: PPUSH
// end ;
36944: LD_VAR 0 6
36948: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36949: LD_INT 0
36951: PPUSH
36952: PPUSH
// if not vehicle or not factory then
36953: LD_VAR 0 1
36957: NOT
36958: PUSH
36959: LD_VAR 0 2
36963: NOT
36964: OR
36965: IFFALSE 36969
// exit ;
36967: GO 37200
// if factoryWaypoints >= factory then
36969: LD_EXP 116
36973: PUSH
36974: LD_VAR 0 2
36978: GREATEREQUAL
36979: IFFALSE 37200
// if factoryWaypoints [ factory ] then
36981: LD_EXP 116
36985: PUSH
36986: LD_VAR 0 2
36990: ARRAY
36991: IFFALSE 37200
// begin if GetControl ( vehicle ) = control_manual then
36993: LD_VAR 0 1
36997: PPUSH
36998: CALL_OW 263
37002: PUSH
37003: LD_INT 1
37005: EQUAL
37006: IFFALSE 37087
// begin driver := IsDrivenBy ( vehicle ) ;
37008: LD_ADDR_VAR 0 4
37012: PUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 311
37022: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37023: LD_VAR 0 4
37027: PPUSH
37028: LD_EXP 116
37032: PUSH
37033: LD_VAR 0 2
37037: ARRAY
37038: PUSH
37039: LD_INT 3
37041: ARRAY
37042: PPUSH
37043: LD_EXP 116
37047: PUSH
37048: LD_VAR 0 2
37052: ARRAY
37053: PUSH
37054: LD_INT 4
37056: ARRAY
37057: PPUSH
37058: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37062: LD_VAR 0 4
37066: PPUSH
37067: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37071: LD_VAR 0 4
37075: PPUSH
37076: LD_VAR 0 2
37080: PPUSH
37081: CALL_OW 180
// end else
37085: GO 37200
// if GetControl ( vehicle ) = control_remote then
37087: LD_VAR 0 1
37091: PPUSH
37092: CALL_OW 263
37096: PUSH
37097: LD_INT 2
37099: EQUAL
37100: IFFALSE 37161
// begin wait ( 0 0$2 ) ;
37102: LD_INT 70
37104: PPUSH
37105: CALL_OW 67
// if Connect ( vehicle ) then
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL 50031 0 1
37118: IFFALSE 37159
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37120: LD_VAR 0 1
37124: PPUSH
37125: LD_EXP 116
37129: PUSH
37130: LD_VAR 0 2
37134: ARRAY
37135: PUSH
37136: LD_INT 3
37138: ARRAY
37139: PPUSH
37140: LD_EXP 116
37144: PUSH
37145: LD_VAR 0 2
37149: ARRAY
37150: PUSH
37151: LD_INT 4
37153: ARRAY
37154: PPUSH
37155: CALL_OW 171
// end else
37159: GO 37200
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37161: LD_VAR 0 1
37165: PPUSH
37166: LD_EXP 116
37170: PUSH
37171: LD_VAR 0 2
37175: ARRAY
37176: PUSH
37177: LD_INT 3
37179: ARRAY
37180: PPUSH
37181: LD_EXP 116
37185: PUSH
37186: LD_VAR 0 2
37190: ARRAY
37191: PUSH
37192: LD_INT 4
37194: ARRAY
37195: PPUSH
37196: CALL_OW 171
// end ; end ;
37200: LD_VAR 0 3
37204: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37205: LD_INT 0
37207: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37208: LD_VAR 0 1
37212: PUSH
37213: LD_INT 250
37215: EQUAL
37216: PUSH
37217: LD_VAR 0 2
37221: PPUSH
37222: CALL_OW 264
37226: PUSH
37227: LD_INT 81
37229: EQUAL
37230: AND
37231: IFFALSE 37252
// MinerPlaceMine ( unit , x , y ) ;
37233: LD_VAR 0 2
37237: PPUSH
37238: LD_VAR 0 4
37242: PPUSH
37243: LD_VAR 0 5
37247: PPUSH
37248: CALL 40242 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37252: LD_VAR 0 1
37256: PUSH
37257: LD_INT 251
37259: EQUAL
37260: PUSH
37261: LD_VAR 0 2
37265: PPUSH
37266: CALL_OW 264
37270: PUSH
37271: LD_INT 81
37273: EQUAL
37274: AND
37275: IFFALSE 37296
// MinerDetonateMine ( unit , x , y ) ;
37277: LD_VAR 0 2
37281: PPUSH
37282: LD_VAR 0 4
37286: PPUSH
37287: LD_VAR 0 5
37291: PPUSH
37292: CALL 40517 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37296: LD_VAR 0 1
37300: PUSH
37301: LD_INT 252
37303: EQUAL
37304: PUSH
37305: LD_VAR 0 2
37309: PPUSH
37310: CALL_OW 264
37314: PUSH
37315: LD_INT 81
37317: EQUAL
37318: AND
37319: IFFALSE 37340
// MinerCreateMinefield ( unit , x , y ) ;
37321: LD_VAR 0 2
37325: PPUSH
37326: LD_VAR 0 4
37330: PPUSH
37331: LD_VAR 0 5
37335: PPUSH
37336: CALL 40934 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37340: LD_VAR 0 1
37344: PUSH
37345: LD_INT 253
37347: EQUAL
37348: PUSH
37349: LD_VAR 0 2
37353: PPUSH
37354: CALL_OW 257
37358: PUSH
37359: LD_INT 5
37361: EQUAL
37362: AND
37363: IFFALSE 37384
// ComBinocular ( unit , x , y ) ;
37365: LD_VAR 0 2
37369: PPUSH
37370: LD_VAR 0 4
37374: PPUSH
37375: LD_VAR 0 5
37379: PPUSH
37380: CALL 41303 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37384: LD_VAR 0 1
37388: PUSH
37389: LD_INT 254
37391: EQUAL
37392: PUSH
37393: LD_VAR 0 2
37397: PPUSH
37398: CALL_OW 264
37402: PUSH
37403: LD_INT 99
37405: EQUAL
37406: AND
37407: PUSH
37408: LD_VAR 0 3
37412: PPUSH
37413: CALL_OW 263
37417: PUSH
37418: LD_INT 3
37420: EQUAL
37421: AND
37422: IFFALSE 37438
// HackDestroyVehicle ( unit , selectedUnit ) ;
37424: LD_VAR 0 2
37428: PPUSH
37429: LD_VAR 0 3
37433: PPUSH
37434: CALL 39606 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37438: LD_VAR 0 1
37442: PUSH
37443: LD_INT 255
37445: EQUAL
37446: PUSH
37447: LD_VAR 0 2
37451: PPUSH
37452: CALL_OW 264
37456: PUSH
37457: LD_INT 14
37459: PUSH
37460: LD_INT 53
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: IN
37467: AND
37468: PUSH
37469: LD_VAR 0 4
37473: PPUSH
37474: LD_VAR 0 5
37478: PPUSH
37479: CALL_OW 488
37483: AND
37484: IFFALSE 37508
// CutTreeXYR ( unit , x , y , 12 ) ;
37486: LD_VAR 0 2
37490: PPUSH
37491: LD_VAR 0 4
37495: PPUSH
37496: LD_VAR 0 5
37500: PPUSH
37501: LD_INT 12
37503: PPUSH
37504: CALL 37603 0 4
// if cmd = 256 then
37508: LD_VAR 0 1
37512: PUSH
37513: LD_INT 256
37515: EQUAL
37516: IFFALSE 37537
// SetFactoryWaypoint ( unit , x , y ) ;
37518: LD_VAR 0 2
37522: PPUSH
37523: LD_VAR 0 4
37527: PPUSH
37528: LD_VAR 0 5
37532: PPUSH
37533: CALL 35355 0 3
// if cmd = 257 then
37537: LD_VAR 0 1
37541: PUSH
37542: LD_INT 257
37544: EQUAL
37545: IFFALSE 37566
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37547: LD_VAR 0 2
37551: PPUSH
37552: LD_VAR 0 4
37556: PPUSH
37557: LD_VAR 0 5
37561: PPUSH
37562: CALL 35717 0 3
// if cmd = 258 then
37566: LD_VAR 0 1
37570: PUSH
37571: LD_INT 258
37573: EQUAL
37574: IFFALSE 37598
// BurnTreeXYR ( unit , x , y , 8 ) ;
37576: LD_VAR 0 2
37580: PPUSH
37581: LD_VAR 0 4
37585: PPUSH
37586: LD_VAR 0 5
37590: PPUSH
37591: LD_INT 8
37593: PPUSH
37594: CALL 37997 0 4
// end ;
37598: LD_VAR 0 6
37602: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37603: LD_INT 0
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37614: LD_VAR 0 1
37618: PPUSH
37619: CALL_OW 302
37623: NOT
37624: PUSH
37625: LD_VAR 0 2
37629: PPUSH
37630: LD_VAR 0 3
37634: PPUSH
37635: CALL_OW 488
37639: NOT
37640: OR
37641: PUSH
37642: LD_VAR 0 4
37646: NOT
37647: OR
37648: IFFALSE 37652
// exit ;
37650: GO 37992
// list := [ ] ;
37652: LD_ADDR_VAR 0 13
37656: PUSH
37657: EMPTY
37658: ST_TO_ADDR
// if x - r < 0 then
37659: LD_VAR 0 2
37663: PUSH
37664: LD_VAR 0 4
37668: MINUS
37669: PUSH
37670: LD_INT 0
37672: LESS
37673: IFFALSE 37685
// min_x := 0 else
37675: LD_ADDR_VAR 0 7
37679: PUSH
37680: LD_INT 0
37682: ST_TO_ADDR
37683: GO 37701
// min_x := x - r ;
37685: LD_ADDR_VAR 0 7
37689: PUSH
37690: LD_VAR 0 2
37694: PUSH
37695: LD_VAR 0 4
37699: MINUS
37700: ST_TO_ADDR
// if y - r < 0 then
37701: LD_VAR 0 3
37705: PUSH
37706: LD_VAR 0 4
37710: MINUS
37711: PUSH
37712: LD_INT 0
37714: LESS
37715: IFFALSE 37727
// min_y := 0 else
37717: LD_ADDR_VAR 0 8
37721: PUSH
37722: LD_INT 0
37724: ST_TO_ADDR
37725: GO 37743
// min_y := y - r ;
37727: LD_ADDR_VAR 0 8
37731: PUSH
37732: LD_VAR 0 3
37736: PUSH
37737: LD_VAR 0 4
37741: MINUS
37742: ST_TO_ADDR
// max_x := x + r ;
37743: LD_ADDR_VAR 0 9
37747: PUSH
37748: LD_VAR 0 2
37752: PUSH
37753: LD_VAR 0 4
37757: PLUS
37758: ST_TO_ADDR
// max_y := y + r ;
37759: LD_ADDR_VAR 0 10
37763: PUSH
37764: LD_VAR 0 3
37768: PUSH
37769: LD_VAR 0 4
37773: PLUS
37774: ST_TO_ADDR
// for _x = min_x to max_x do
37775: LD_ADDR_VAR 0 11
37779: PUSH
37780: DOUBLE
37781: LD_VAR 0 7
37785: DEC
37786: ST_TO_ADDR
37787: LD_VAR 0 9
37791: PUSH
37792: FOR_TO
37793: IFFALSE 37910
// for _y = min_y to max_y do
37795: LD_ADDR_VAR 0 12
37799: PUSH
37800: DOUBLE
37801: LD_VAR 0 8
37805: DEC
37806: ST_TO_ADDR
37807: LD_VAR 0 10
37811: PUSH
37812: FOR_TO
37813: IFFALSE 37906
// begin if not ValidHex ( _x , _y ) then
37815: LD_VAR 0 11
37819: PPUSH
37820: LD_VAR 0 12
37824: PPUSH
37825: CALL_OW 488
37829: NOT
37830: IFFALSE 37834
// continue ;
37832: GO 37812
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37834: LD_VAR 0 11
37838: PPUSH
37839: LD_VAR 0 12
37843: PPUSH
37844: CALL_OW 351
37848: PUSH
37849: LD_VAR 0 11
37853: PPUSH
37854: LD_VAR 0 12
37858: PPUSH
37859: CALL_OW 554
37863: AND
37864: IFFALSE 37904
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37866: LD_ADDR_VAR 0 13
37870: PUSH
37871: LD_VAR 0 13
37875: PPUSH
37876: LD_VAR 0 13
37880: PUSH
37881: LD_INT 1
37883: PLUS
37884: PPUSH
37885: LD_VAR 0 11
37889: PUSH
37890: LD_VAR 0 12
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PPUSH
37899: CALL_OW 2
37903: ST_TO_ADDR
// end ;
37904: GO 37812
37906: POP
37907: POP
37908: GO 37792
37910: POP
37911: POP
// if not list then
37912: LD_VAR 0 13
37916: NOT
37917: IFFALSE 37921
// exit ;
37919: GO 37992
// for i in list do
37921: LD_ADDR_VAR 0 6
37925: PUSH
37926: LD_VAR 0 13
37930: PUSH
37931: FOR_IN
37932: IFFALSE 37990
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37934: LD_VAR 0 1
37938: PPUSH
37939: LD_STRING M
37941: PUSH
37942: LD_VAR 0 6
37946: PUSH
37947: LD_INT 1
37949: ARRAY
37950: PUSH
37951: LD_VAR 0 6
37955: PUSH
37956: LD_INT 2
37958: ARRAY
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: PPUSH
37984: CALL_OW 447
37988: GO 37931
37990: POP
37991: POP
// end ;
37992: LD_VAR 0 5
37996: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37997: LD_INT 0
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38009: LD_VAR 0 1
38013: PPUSH
38014: CALL_OW 302
38018: NOT
38019: PUSH
38020: LD_VAR 0 2
38024: PPUSH
38025: LD_VAR 0 3
38029: PPUSH
38030: CALL_OW 488
38034: NOT
38035: OR
38036: PUSH
38037: LD_VAR 0 4
38041: NOT
38042: OR
38043: IFFALSE 38047
// exit ;
38045: GO 38560
// list := [ ] ;
38047: LD_ADDR_VAR 0 13
38051: PUSH
38052: EMPTY
38053: ST_TO_ADDR
// if x - r < 0 then
38054: LD_VAR 0 2
38058: PUSH
38059: LD_VAR 0 4
38063: MINUS
38064: PUSH
38065: LD_INT 0
38067: LESS
38068: IFFALSE 38080
// min_x := 0 else
38070: LD_ADDR_VAR 0 7
38074: PUSH
38075: LD_INT 0
38077: ST_TO_ADDR
38078: GO 38096
// min_x := x - r ;
38080: LD_ADDR_VAR 0 7
38084: PUSH
38085: LD_VAR 0 2
38089: PUSH
38090: LD_VAR 0 4
38094: MINUS
38095: ST_TO_ADDR
// if y - r < 0 then
38096: LD_VAR 0 3
38100: PUSH
38101: LD_VAR 0 4
38105: MINUS
38106: PUSH
38107: LD_INT 0
38109: LESS
38110: IFFALSE 38122
// min_y := 0 else
38112: LD_ADDR_VAR 0 8
38116: PUSH
38117: LD_INT 0
38119: ST_TO_ADDR
38120: GO 38138
// min_y := y - r ;
38122: LD_ADDR_VAR 0 8
38126: PUSH
38127: LD_VAR 0 3
38131: PUSH
38132: LD_VAR 0 4
38136: MINUS
38137: ST_TO_ADDR
// max_x := x + r ;
38138: LD_ADDR_VAR 0 9
38142: PUSH
38143: LD_VAR 0 2
38147: PUSH
38148: LD_VAR 0 4
38152: PLUS
38153: ST_TO_ADDR
// max_y := y + r ;
38154: LD_ADDR_VAR 0 10
38158: PUSH
38159: LD_VAR 0 3
38163: PUSH
38164: LD_VAR 0 4
38168: PLUS
38169: ST_TO_ADDR
// for _x = min_x to max_x do
38170: LD_ADDR_VAR 0 11
38174: PUSH
38175: DOUBLE
38176: LD_VAR 0 7
38180: DEC
38181: ST_TO_ADDR
38182: LD_VAR 0 9
38186: PUSH
38187: FOR_TO
38188: IFFALSE 38305
// for _y = min_y to max_y do
38190: LD_ADDR_VAR 0 12
38194: PUSH
38195: DOUBLE
38196: LD_VAR 0 8
38200: DEC
38201: ST_TO_ADDR
38202: LD_VAR 0 10
38206: PUSH
38207: FOR_TO
38208: IFFALSE 38301
// begin if not ValidHex ( _x , _y ) then
38210: LD_VAR 0 11
38214: PPUSH
38215: LD_VAR 0 12
38219: PPUSH
38220: CALL_OW 488
38224: NOT
38225: IFFALSE 38229
// continue ;
38227: GO 38207
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38229: LD_VAR 0 11
38233: PPUSH
38234: LD_VAR 0 12
38238: PPUSH
38239: CALL_OW 351
38243: PUSH
38244: LD_VAR 0 11
38248: PPUSH
38249: LD_VAR 0 12
38253: PPUSH
38254: CALL_OW 554
38258: AND
38259: IFFALSE 38299
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38261: LD_ADDR_VAR 0 13
38265: PUSH
38266: LD_VAR 0 13
38270: PPUSH
38271: LD_VAR 0 13
38275: PUSH
38276: LD_INT 1
38278: PLUS
38279: PPUSH
38280: LD_VAR 0 11
38284: PUSH
38285: LD_VAR 0 12
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PPUSH
38294: CALL_OW 2
38298: ST_TO_ADDR
// end ;
38299: GO 38207
38301: POP
38302: POP
38303: GO 38187
38305: POP
38306: POP
// if not list then
38307: LD_VAR 0 13
38311: NOT
38312: IFFALSE 38316
// exit ;
38314: GO 38560
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38316: LD_ADDR_VAR 0 13
38320: PUSH
38321: LD_VAR 0 1
38325: PPUSH
38326: LD_VAR 0 13
38330: PPUSH
38331: LD_INT 1
38333: PPUSH
38334: LD_INT 1
38336: PPUSH
38337: CALL 47173 0 4
38341: ST_TO_ADDR
// ComStop ( flame ) ;
38342: LD_VAR 0 1
38346: PPUSH
38347: CALL_OW 141
// for i in list do
38351: LD_ADDR_VAR 0 6
38355: PUSH
38356: LD_VAR 0 13
38360: PUSH
38361: FOR_IN
38362: IFFALSE 38393
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38364: LD_VAR 0 1
38368: PPUSH
38369: LD_VAR 0 6
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: PPUSH
38378: LD_VAR 0 6
38382: PUSH
38383: LD_INT 2
38385: ARRAY
38386: PPUSH
38387: CALL_OW 176
38391: GO 38361
38393: POP
38394: POP
// repeat wait ( 0 0$1 ) ;
38395: LD_INT 35
38397: PPUSH
38398: CALL_OW 67
// task := GetTaskList ( flame ) ;
38402: LD_ADDR_VAR 0 14
38406: PUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 437
38416: ST_TO_ADDR
// if not task then
38417: LD_VAR 0 14
38421: NOT
38422: IFFALSE 38426
// exit ;
38424: GO 38560
// if task [ 1 ] [ 1 ] <> | then
38426: LD_VAR 0 14
38430: PUSH
38431: LD_INT 1
38433: ARRAY
38434: PUSH
38435: LD_INT 1
38437: ARRAY
38438: PUSH
38439: LD_STRING |
38441: NONEQUAL
38442: IFFALSE 38446
// exit ;
38444: GO 38560
// _x := task [ 1 ] [ 2 ] ;
38446: LD_ADDR_VAR 0 11
38450: PUSH
38451: LD_VAR 0 14
38455: PUSH
38456: LD_INT 1
38458: ARRAY
38459: PUSH
38460: LD_INT 2
38462: ARRAY
38463: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38464: LD_ADDR_VAR 0 12
38468: PUSH
38469: LD_VAR 0 14
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: PUSH
38478: LD_INT 3
38480: ARRAY
38481: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38482: LD_VAR 0 11
38486: PPUSH
38487: LD_VAR 0 12
38491: PPUSH
38492: CALL_OW 351
38496: NOT
38497: PUSH
38498: LD_VAR 0 11
38502: PPUSH
38503: LD_VAR 0 12
38507: PPUSH
38508: CALL_OW 554
38512: NOT
38513: OR
38514: IFFALSE 38548
// begin task := Delete ( task , 1 ) ;
38516: LD_ADDR_VAR 0 14
38520: PUSH
38521: LD_VAR 0 14
38525: PPUSH
38526: LD_INT 1
38528: PPUSH
38529: CALL_OW 3
38533: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38534: LD_VAR 0 1
38538: PPUSH
38539: LD_VAR 0 14
38543: PPUSH
38544: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38548: LD_VAR 0 1
38552: PPUSH
38553: CALL_OW 314
38557: NOT
38558: IFFALSE 38395
// end ;
38560: LD_VAR 0 5
38564: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38565: LD_EXP 119
38569: NOT
38570: IFFALSE 38620
38572: GO 38574
38574: DISABLE
// begin initHack := true ;
38575: LD_ADDR_EXP 119
38579: PUSH
38580: LD_INT 1
38582: ST_TO_ADDR
// hackTanks := [ ] ;
38583: LD_ADDR_EXP 120
38587: PUSH
38588: EMPTY
38589: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38590: LD_ADDR_EXP 121
38594: PUSH
38595: EMPTY
38596: ST_TO_ADDR
// hackLimit := 3 ;
38597: LD_ADDR_EXP 122
38601: PUSH
38602: LD_INT 3
38604: ST_TO_ADDR
// hackDist := 12 ;
38605: LD_ADDR_EXP 123
38609: PUSH
38610: LD_INT 12
38612: ST_TO_ADDR
// hackCounter := [ ] ;
38613: LD_ADDR_EXP 124
38617: PUSH
38618: EMPTY
38619: ST_TO_ADDR
// end ;
38620: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38621: LD_EXP 119
38625: PUSH
38626: LD_INT 34
38628: PUSH
38629: LD_INT 99
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 69
38640: AND
38641: IFFALSE 38894
38643: GO 38645
38645: DISABLE
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
// begin enable ;
38650: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38651: LD_ADDR_VAR 0 1
38655: PUSH
38656: LD_INT 34
38658: PUSH
38659: LD_INT 99
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 69
38670: PUSH
38671: FOR_IN
38672: IFFALSE 38892
// begin if not i in hackTanks then
38674: LD_VAR 0 1
38678: PUSH
38679: LD_EXP 120
38683: IN
38684: NOT
38685: IFFALSE 38768
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38687: LD_ADDR_EXP 120
38691: PUSH
38692: LD_EXP 120
38696: PPUSH
38697: LD_EXP 120
38701: PUSH
38702: LD_INT 1
38704: PLUS
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 1
38715: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38716: LD_ADDR_EXP 121
38720: PUSH
38721: LD_EXP 121
38725: PPUSH
38726: LD_EXP 121
38730: PUSH
38731: LD_INT 1
38733: PLUS
38734: PPUSH
38735: EMPTY
38736: PPUSH
38737: CALL_OW 1
38741: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38742: LD_ADDR_EXP 124
38746: PUSH
38747: LD_EXP 124
38751: PPUSH
38752: LD_EXP 124
38756: PUSH
38757: LD_INT 1
38759: PLUS
38760: PPUSH
38761: EMPTY
38762: PPUSH
38763: CALL_OW 1
38767: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38768: LD_VAR 0 1
38772: PPUSH
38773: CALL_OW 302
38777: NOT
38778: IFFALSE 38791
// begin HackUnlinkAll ( i ) ;
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL 38897 0 1
// continue ;
38789: GO 38671
// end ; HackCheckCapturedStatus ( i ) ;
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL 39340 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38800: LD_ADDR_VAR 0 2
38804: PUSH
38805: LD_INT 81
38807: PUSH
38808: LD_VAR 0 1
38812: PPUSH
38813: CALL_OW 255
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 33
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 91
38834: PUSH
38835: LD_VAR 0 1
38839: PUSH
38840: LD_EXP 123
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 50
38852: PUSH
38853: EMPTY
38854: LIST
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: PPUSH
38862: CALL_OW 69
38866: ST_TO_ADDR
// if not tmp then
38867: LD_VAR 0 2
38871: NOT
38872: IFFALSE 38876
// continue ;
38874: GO 38671
// HackLink ( i , tmp ) ;
38876: LD_VAR 0 1
38880: PPUSH
38881: LD_VAR 0 2
38885: PPUSH
38886: CALL 39033 0 2
// end ;
38890: GO 38671
38892: POP
38893: POP
// end ;
38894: PPOPN 2
38896: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38897: LD_INT 0
38899: PPUSH
38900: PPUSH
38901: PPUSH
// if not hack in hackTanks then
38902: LD_VAR 0 1
38906: PUSH
38907: LD_EXP 120
38911: IN
38912: NOT
38913: IFFALSE 38917
// exit ;
38915: GO 39028
// index := GetElementIndex ( hackTanks , hack ) ;
38917: LD_ADDR_VAR 0 4
38921: PUSH
38922: LD_EXP 120
38926: PPUSH
38927: LD_VAR 0 1
38931: PPUSH
38932: CALL 46470 0 2
38936: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38937: LD_EXP 121
38941: PUSH
38942: LD_VAR 0 4
38946: ARRAY
38947: IFFALSE 39028
// begin for i in hackTanksCaptured [ index ] do
38949: LD_ADDR_VAR 0 3
38953: PUSH
38954: LD_EXP 121
38958: PUSH
38959: LD_VAR 0 4
38963: ARRAY
38964: PUSH
38965: FOR_IN
38966: IFFALSE 38992
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38968: LD_VAR 0 3
38972: PUSH
38973: LD_INT 1
38975: ARRAY
38976: PPUSH
38977: LD_VAR 0 3
38981: PUSH
38982: LD_INT 2
38984: ARRAY
38985: PPUSH
38986: CALL_OW 235
38990: GO 38965
38992: POP
38993: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38994: LD_ADDR_EXP 121
38998: PUSH
38999: LD_EXP 121
39003: PPUSH
39004: LD_VAR 0 4
39008: PPUSH
39009: EMPTY
39010: PPUSH
39011: CALL_OW 1
39015: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39016: LD_VAR 0 1
39020: PPUSH
39021: LD_INT 0
39023: PPUSH
39024: CALL_OW 505
// end ; end ;
39028: LD_VAR 0 2
39032: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39033: LD_INT 0
39035: PPUSH
39036: PPUSH
39037: PPUSH
// if not hack in hackTanks or not vehicles then
39038: LD_VAR 0 1
39042: PUSH
39043: LD_EXP 120
39047: IN
39048: NOT
39049: PUSH
39050: LD_VAR 0 2
39054: NOT
39055: OR
39056: IFFALSE 39060
// exit ;
39058: GO 39335
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39060: LD_ADDR_VAR 0 2
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: LD_VAR 0 2
39074: PPUSH
39075: LD_INT 1
39077: PPUSH
39078: LD_INT 1
39080: PPUSH
39081: CALL 47120 0 4
39085: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39086: LD_ADDR_VAR 0 5
39090: PUSH
39091: LD_EXP 120
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL 46470 0 2
39105: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39106: LD_EXP 121
39110: PUSH
39111: LD_VAR 0 5
39115: ARRAY
39116: PUSH
39117: LD_EXP 122
39121: LESS
39122: IFFALSE 39311
// begin for i := 1 to vehicles do
39124: LD_ADDR_VAR 0 4
39128: PUSH
39129: DOUBLE
39130: LD_INT 1
39132: DEC
39133: ST_TO_ADDR
39134: LD_VAR 0 2
39138: PUSH
39139: FOR_TO
39140: IFFALSE 39309
// begin if hackTanksCaptured [ index ] = hackLimit then
39142: LD_EXP 121
39146: PUSH
39147: LD_VAR 0 5
39151: ARRAY
39152: PUSH
39153: LD_EXP 122
39157: EQUAL
39158: IFFALSE 39162
// break ;
39160: GO 39309
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39162: LD_ADDR_EXP 124
39166: PUSH
39167: LD_EXP 124
39171: PPUSH
39172: LD_VAR 0 5
39176: PPUSH
39177: LD_EXP 124
39181: PUSH
39182: LD_VAR 0 5
39186: ARRAY
39187: PUSH
39188: LD_INT 1
39190: PLUS
39191: PPUSH
39192: CALL_OW 1
39196: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39197: LD_ADDR_EXP 121
39201: PUSH
39202: LD_EXP 121
39206: PPUSH
39207: LD_VAR 0 5
39211: PUSH
39212: LD_EXP 121
39216: PUSH
39217: LD_VAR 0 5
39221: ARRAY
39222: PUSH
39223: LD_INT 1
39225: PLUS
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PPUSH
39231: LD_VAR 0 2
39235: PUSH
39236: LD_VAR 0 4
39240: ARRAY
39241: PUSH
39242: LD_VAR 0 2
39246: PUSH
39247: LD_VAR 0 4
39251: ARRAY
39252: PPUSH
39253: CALL_OW 255
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PPUSH
39262: CALL 46685 0 3
39266: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39267: LD_VAR 0 2
39271: PUSH
39272: LD_VAR 0 4
39276: ARRAY
39277: PPUSH
39278: LD_VAR 0 1
39282: PPUSH
39283: CALL_OW 255
39287: PPUSH
39288: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39292: LD_VAR 0 2
39296: PUSH
39297: LD_VAR 0 4
39301: ARRAY
39302: PPUSH
39303: CALL_OW 141
// end ;
39307: GO 39139
39309: POP
39310: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39311: LD_VAR 0 1
39315: PPUSH
39316: LD_EXP 121
39320: PUSH
39321: LD_VAR 0 5
39325: ARRAY
39326: PUSH
39327: LD_INT 0
39329: PLUS
39330: PPUSH
39331: CALL_OW 505
// end ;
39335: LD_VAR 0 3
39339: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39340: LD_INT 0
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
// if not hack in hackTanks then
39346: LD_VAR 0 1
39350: PUSH
39351: LD_EXP 120
39355: IN
39356: NOT
39357: IFFALSE 39361
// exit ;
39359: GO 39601
// index := GetElementIndex ( hackTanks , hack ) ;
39361: LD_ADDR_VAR 0 4
39365: PUSH
39366: LD_EXP 120
39370: PPUSH
39371: LD_VAR 0 1
39375: PPUSH
39376: CALL 46470 0 2
39380: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39381: LD_ADDR_VAR 0 3
39385: PUSH
39386: DOUBLE
39387: LD_EXP 121
39391: PUSH
39392: LD_VAR 0 4
39396: ARRAY
39397: INC
39398: ST_TO_ADDR
39399: LD_INT 1
39401: PUSH
39402: FOR_DOWNTO
39403: IFFALSE 39575
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39405: LD_ADDR_VAR 0 5
39409: PUSH
39410: LD_EXP 121
39414: PUSH
39415: LD_VAR 0 4
39419: ARRAY
39420: PUSH
39421: LD_VAR 0 3
39425: ARRAY
39426: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39427: LD_VAR 0 5
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: PPUSH
39436: CALL_OW 302
39440: NOT
39441: PUSH
39442: LD_VAR 0 5
39446: PUSH
39447: LD_INT 1
39449: ARRAY
39450: PPUSH
39451: CALL_OW 255
39455: PUSH
39456: LD_VAR 0 1
39460: PPUSH
39461: CALL_OW 255
39465: NONEQUAL
39466: OR
39467: IFFALSE 39573
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39469: LD_VAR 0 5
39473: PUSH
39474: LD_INT 1
39476: ARRAY
39477: PPUSH
39478: CALL_OW 305
39482: PUSH
39483: LD_VAR 0 5
39487: PUSH
39488: LD_INT 1
39490: ARRAY
39491: PPUSH
39492: CALL_OW 255
39496: PUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 255
39506: EQUAL
39507: AND
39508: IFFALSE 39532
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39510: LD_VAR 0 5
39514: PUSH
39515: LD_INT 1
39517: ARRAY
39518: PPUSH
39519: LD_VAR 0 5
39523: PUSH
39524: LD_INT 2
39526: ARRAY
39527: PPUSH
39528: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39532: LD_ADDR_EXP 121
39536: PUSH
39537: LD_EXP 121
39541: PPUSH
39542: LD_VAR 0 4
39546: PPUSH
39547: LD_EXP 121
39551: PUSH
39552: LD_VAR 0 4
39556: ARRAY
39557: PPUSH
39558: LD_VAR 0 3
39562: PPUSH
39563: CALL_OW 3
39567: PPUSH
39568: CALL_OW 1
39572: ST_TO_ADDR
// end ; end ;
39573: GO 39402
39575: POP
39576: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39577: LD_VAR 0 1
39581: PPUSH
39582: LD_EXP 121
39586: PUSH
39587: LD_VAR 0 4
39591: ARRAY
39592: PUSH
39593: LD_INT 0
39595: PLUS
39596: PPUSH
39597: CALL_OW 505
// end ;
39601: LD_VAR 0 2
39605: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39606: LD_INT 0
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
// if not hack in hackTanks then
39612: LD_VAR 0 1
39616: PUSH
39617: LD_EXP 120
39621: IN
39622: NOT
39623: IFFALSE 39627
// exit ;
39625: GO 39712
// index := GetElementIndex ( hackTanks , hack ) ;
39627: LD_ADDR_VAR 0 5
39631: PUSH
39632: LD_EXP 120
39636: PPUSH
39637: LD_VAR 0 1
39641: PPUSH
39642: CALL 46470 0 2
39646: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39647: LD_ADDR_VAR 0 4
39651: PUSH
39652: DOUBLE
39653: LD_INT 1
39655: DEC
39656: ST_TO_ADDR
39657: LD_EXP 121
39661: PUSH
39662: LD_VAR 0 5
39666: ARRAY
39667: PUSH
39668: FOR_TO
39669: IFFALSE 39710
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39671: LD_EXP 121
39675: PUSH
39676: LD_VAR 0 5
39680: ARRAY
39681: PUSH
39682: LD_VAR 0 4
39686: ARRAY
39687: PUSH
39688: LD_INT 1
39690: ARRAY
39691: PUSH
39692: LD_VAR 0 2
39696: EQUAL
39697: IFFALSE 39708
// KillUnit ( vehicle ) ;
39699: LD_VAR 0 2
39703: PPUSH
39704: CALL_OW 66
39708: GO 39668
39710: POP
39711: POP
// end ;
39712: LD_VAR 0 3
39716: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39717: LD_EXP 125
39721: NOT
39722: IFFALSE 39757
39724: GO 39726
39726: DISABLE
// begin initMiner := true ;
39727: LD_ADDR_EXP 125
39731: PUSH
39732: LD_INT 1
39734: ST_TO_ADDR
// minersList := [ ] ;
39735: LD_ADDR_EXP 126
39739: PUSH
39740: EMPTY
39741: ST_TO_ADDR
// minerMinesList := [ ] ;
39742: LD_ADDR_EXP 127
39746: PUSH
39747: EMPTY
39748: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39749: LD_ADDR_EXP 128
39753: PUSH
39754: LD_INT 5
39756: ST_TO_ADDR
// end ;
39757: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39758: LD_EXP 125
39762: PUSH
39763: LD_INT 34
39765: PUSH
39766: LD_INT 81
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PPUSH
39773: CALL_OW 69
39777: AND
39778: IFFALSE 40239
39780: GO 39782
39782: DISABLE
39783: LD_INT 0
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
// begin enable ;
39789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39790: LD_ADDR_VAR 0 1
39794: PUSH
39795: LD_INT 34
39797: PUSH
39798: LD_INT 81
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PPUSH
39805: CALL_OW 69
39809: PUSH
39810: FOR_IN
39811: IFFALSE 39883
// begin if not i in minersList then
39813: LD_VAR 0 1
39817: PUSH
39818: LD_EXP 126
39822: IN
39823: NOT
39824: IFFALSE 39881
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39826: LD_ADDR_EXP 126
39830: PUSH
39831: LD_EXP 126
39835: PPUSH
39836: LD_EXP 126
39840: PUSH
39841: LD_INT 1
39843: PLUS
39844: PPUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 1
39854: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39855: LD_ADDR_EXP 127
39859: PUSH
39860: LD_EXP 127
39864: PPUSH
39865: LD_EXP 127
39869: PUSH
39870: LD_INT 1
39872: PLUS
39873: PPUSH
39874: EMPTY
39875: PPUSH
39876: CALL_OW 1
39880: ST_TO_ADDR
// end end ;
39881: GO 39810
39883: POP
39884: POP
// for i := minerMinesList downto 1 do
39885: LD_ADDR_VAR 0 1
39889: PUSH
39890: DOUBLE
39891: LD_EXP 127
39895: INC
39896: ST_TO_ADDR
39897: LD_INT 1
39899: PUSH
39900: FOR_DOWNTO
39901: IFFALSE 40237
// begin if IsLive ( minersList [ i ] ) then
39903: LD_EXP 126
39907: PUSH
39908: LD_VAR 0 1
39912: ARRAY
39913: PPUSH
39914: CALL_OW 300
39918: IFFALSE 39946
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39920: LD_EXP 126
39924: PUSH
39925: LD_VAR 0 1
39929: ARRAY
39930: PPUSH
39931: LD_EXP 127
39935: PUSH
39936: LD_VAR 0 1
39940: ARRAY
39941: PPUSH
39942: CALL_OW 505
// if not minerMinesList [ i ] then
39946: LD_EXP 127
39950: PUSH
39951: LD_VAR 0 1
39955: ARRAY
39956: NOT
39957: IFFALSE 39961
// continue ;
39959: GO 39900
// for j := minerMinesList [ i ] downto 1 do
39961: LD_ADDR_VAR 0 2
39965: PUSH
39966: DOUBLE
39967: LD_EXP 127
39971: PUSH
39972: LD_VAR 0 1
39976: ARRAY
39977: INC
39978: ST_TO_ADDR
39979: LD_INT 1
39981: PUSH
39982: FOR_DOWNTO
39983: IFFALSE 40233
// begin side := GetSide ( minersList [ i ] ) ;
39985: LD_ADDR_VAR 0 3
39989: PUSH
39990: LD_EXP 126
39994: PUSH
39995: LD_VAR 0 1
39999: ARRAY
40000: PPUSH
40001: CALL_OW 255
40005: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40006: LD_ADDR_VAR 0 4
40010: PUSH
40011: LD_EXP 127
40015: PUSH
40016: LD_VAR 0 1
40020: ARRAY
40021: PUSH
40022: LD_VAR 0 2
40026: ARRAY
40027: PUSH
40028: LD_INT 1
40030: ARRAY
40031: PPUSH
40032: LD_EXP 127
40036: PUSH
40037: LD_VAR 0 1
40041: ARRAY
40042: PUSH
40043: LD_VAR 0 2
40047: ARRAY
40048: PUSH
40049: LD_INT 2
40051: ARRAY
40052: PPUSH
40053: CALL_OW 428
40057: ST_TO_ADDR
// if not tmp then
40058: LD_VAR 0 4
40062: NOT
40063: IFFALSE 40067
// continue ;
40065: GO 39982
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40067: LD_VAR 0 4
40071: PUSH
40072: LD_INT 81
40074: PUSH
40075: LD_VAR 0 3
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PPUSH
40084: CALL_OW 69
40088: IN
40089: PUSH
40090: LD_EXP 127
40094: PUSH
40095: LD_VAR 0 1
40099: ARRAY
40100: PUSH
40101: LD_VAR 0 2
40105: ARRAY
40106: PUSH
40107: LD_INT 1
40109: ARRAY
40110: PPUSH
40111: LD_EXP 127
40115: PUSH
40116: LD_VAR 0 1
40120: ARRAY
40121: PUSH
40122: LD_VAR 0 2
40126: ARRAY
40127: PUSH
40128: LD_INT 2
40130: ARRAY
40131: PPUSH
40132: CALL_OW 458
40136: AND
40137: IFFALSE 40231
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40139: LD_EXP 127
40143: PUSH
40144: LD_VAR 0 1
40148: ARRAY
40149: PUSH
40150: LD_VAR 0 2
40154: ARRAY
40155: PUSH
40156: LD_INT 1
40158: ARRAY
40159: PPUSH
40160: LD_EXP 127
40164: PUSH
40165: LD_VAR 0 1
40169: ARRAY
40170: PUSH
40171: LD_VAR 0 2
40175: ARRAY
40176: PUSH
40177: LD_INT 2
40179: ARRAY
40180: PPUSH
40181: LD_VAR 0 3
40185: PPUSH
40186: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40190: LD_ADDR_EXP 127
40194: PUSH
40195: LD_EXP 127
40199: PPUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: LD_EXP 127
40209: PUSH
40210: LD_VAR 0 1
40214: ARRAY
40215: PPUSH
40216: LD_VAR 0 2
40220: PPUSH
40221: CALL_OW 3
40225: PPUSH
40226: CALL_OW 1
40230: ST_TO_ADDR
// end ; end ;
40231: GO 39982
40233: POP
40234: POP
// end ;
40235: GO 39900
40237: POP
40238: POP
// end ;
40239: PPOPN 4
40241: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40242: LD_INT 0
40244: PPUSH
40245: PPUSH
// result := false ;
40246: LD_ADDR_VAR 0 4
40250: PUSH
40251: LD_INT 0
40253: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 264
40263: PUSH
40264: LD_INT 81
40266: EQUAL
40267: NOT
40268: IFFALSE 40272
// exit ;
40270: GO 40512
// index := GetElementIndex ( minersList , unit ) ;
40272: LD_ADDR_VAR 0 5
40276: PUSH
40277: LD_EXP 126
40281: PPUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL 46470 0 2
40291: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40292: LD_EXP 127
40296: PUSH
40297: LD_VAR 0 5
40301: ARRAY
40302: PUSH
40303: LD_EXP 128
40307: GREATEREQUAL
40308: IFFALSE 40312
// exit ;
40310: GO 40512
// ComMoveXY ( unit , x , y ) ;
40312: LD_VAR 0 1
40316: PPUSH
40317: LD_VAR 0 2
40321: PPUSH
40322: LD_VAR 0 3
40326: PPUSH
40327: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40331: LD_INT 35
40333: PPUSH
40334: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40338: LD_VAR 0 1
40342: PPUSH
40343: LD_VAR 0 2
40347: PPUSH
40348: LD_VAR 0 3
40352: PPUSH
40353: CALL 78211 0 3
40357: NOT
40358: PUSH
40359: LD_VAR 0 1
40363: PPUSH
40364: CALL_OW 314
40368: AND
40369: IFFALSE 40373
// exit ;
40371: GO 40512
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40373: LD_VAR 0 2
40377: PPUSH
40378: LD_VAR 0 3
40382: PPUSH
40383: CALL_OW 428
40387: PUSH
40388: LD_VAR 0 1
40392: EQUAL
40393: PUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: CALL_OW 314
40403: NOT
40404: AND
40405: IFFALSE 40331
// PlaySoundXY ( x , y , PlantMine ) ;
40407: LD_VAR 0 2
40411: PPUSH
40412: LD_VAR 0 3
40416: PPUSH
40417: LD_STRING PlantMine
40419: PPUSH
40420: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40424: LD_VAR 0 2
40428: PPUSH
40429: LD_VAR 0 3
40433: PPUSH
40434: LD_VAR 0 1
40438: PPUSH
40439: CALL_OW 255
40443: PPUSH
40444: LD_INT 0
40446: PPUSH
40447: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40451: LD_ADDR_EXP 127
40455: PUSH
40456: LD_EXP 127
40460: PPUSH
40461: LD_VAR 0 5
40465: PUSH
40466: LD_EXP 127
40470: PUSH
40471: LD_VAR 0 5
40475: ARRAY
40476: PUSH
40477: LD_INT 1
40479: PLUS
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PPUSH
40485: LD_VAR 0 2
40489: PUSH
40490: LD_VAR 0 3
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL 46685 0 3
40503: ST_TO_ADDR
// result := true ;
40504: LD_ADDR_VAR 0 4
40508: PUSH
40509: LD_INT 1
40511: ST_TO_ADDR
// end ;
40512: LD_VAR 0 4
40516: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40517: LD_INT 0
40519: PPUSH
40520: PPUSH
40521: PPUSH
// if not unit in minersList then
40522: LD_VAR 0 1
40526: PUSH
40527: LD_EXP 126
40531: IN
40532: NOT
40533: IFFALSE 40537
// exit ;
40535: GO 40929
// index := GetElementIndex ( minersList , unit ) ;
40537: LD_ADDR_VAR 0 6
40541: PUSH
40542: LD_EXP 126
40546: PPUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL 46470 0 2
40556: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40557: LD_ADDR_VAR 0 5
40561: PUSH
40562: DOUBLE
40563: LD_EXP 127
40567: PUSH
40568: LD_VAR 0 6
40572: ARRAY
40573: INC
40574: ST_TO_ADDR
40575: LD_INT 1
40577: PUSH
40578: FOR_DOWNTO
40579: IFFALSE 40740
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40581: LD_EXP 127
40585: PUSH
40586: LD_VAR 0 6
40590: ARRAY
40591: PUSH
40592: LD_VAR 0 5
40596: ARRAY
40597: PUSH
40598: LD_INT 1
40600: ARRAY
40601: PUSH
40602: LD_VAR 0 2
40606: EQUAL
40607: PUSH
40608: LD_EXP 127
40612: PUSH
40613: LD_VAR 0 6
40617: ARRAY
40618: PUSH
40619: LD_VAR 0 5
40623: ARRAY
40624: PUSH
40625: LD_INT 2
40627: ARRAY
40628: PUSH
40629: LD_VAR 0 3
40633: EQUAL
40634: AND
40635: IFFALSE 40738
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40637: LD_EXP 127
40641: PUSH
40642: LD_VAR 0 6
40646: ARRAY
40647: PUSH
40648: LD_VAR 0 5
40652: ARRAY
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: PPUSH
40658: LD_EXP 127
40662: PUSH
40663: LD_VAR 0 6
40667: ARRAY
40668: PUSH
40669: LD_VAR 0 5
40673: ARRAY
40674: PUSH
40675: LD_INT 2
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 255
40688: PPUSH
40689: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40693: LD_ADDR_EXP 127
40697: PUSH
40698: LD_EXP 127
40702: PPUSH
40703: LD_VAR 0 6
40707: PPUSH
40708: LD_EXP 127
40712: PUSH
40713: LD_VAR 0 6
40717: ARRAY
40718: PPUSH
40719: LD_VAR 0 5
40723: PPUSH
40724: CALL_OW 3
40728: PPUSH
40729: CALL_OW 1
40733: ST_TO_ADDR
// exit ;
40734: POP
40735: POP
40736: GO 40929
// end ; end ;
40738: GO 40578
40740: POP
40741: POP
// for i := minerMinesList [ index ] downto 1 do
40742: LD_ADDR_VAR 0 5
40746: PUSH
40747: DOUBLE
40748: LD_EXP 127
40752: PUSH
40753: LD_VAR 0 6
40757: ARRAY
40758: INC
40759: ST_TO_ADDR
40760: LD_INT 1
40762: PUSH
40763: FOR_DOWNTO
40764: IFFALSE 40927
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40766: LD_EXP 127
40770: PUSH
40771: LD_VAR 0 6
40775: ARRAY
40776: PUSH
40777: LD_VAR 0 5
40781: ARRAY
40782: PUSH
40783: LD_INT 1
40785: ARRAY
40786: PPUSH
40787: LD_EXP 127
40791: PUSH
40792: LD_VAR 0 6
40796: ARRAY
40797: PUSH
40798: LD_VAR 0 5
40802: ARRAY
40803: PUSH
40804: LD_INT 2
40806: ARRAY
40807: PPUSH
40808: LD_VAR 0 2
40812: PPUSH
40813: LD_VAR 0 3
40817: PPUSH
40818: CALL_OW 298
40822: PUSH
40823: LD_INT 6
40825: LESS
40826: IFFALSE 40925
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40828: LD_EXP 127
40832: PUSH
40833: LD_VAR 0 6
40837: ARRAY
40838: PUSH
40839: LD_VAR 0 5
40843: ARRAY
40844: PUSH
40845: LD_INT 1
40847: ARRAY
40848: PPUSH
40849: LD_EXP 127
40853: PUSH
40854: LD_VAR 0 6
40858: ARRAY
40859: PUSH
40860: LD_VAR 0 5
40864: ARRAY
40865: PUSH
40866: LD_INT 2
40868: ARRAY
40869: PPUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: CALL_OW 255
40879: PPUSH
40880: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40884: LD_ADDR_EXP 127
40888: PUSH
40889: LD_EXP 127
40893: PPUSH
40894: LD_VAR 0 6
40898: PPUSH
40899: LD_EXP 127
40903: PUSH
40904: LD_VAR 0 6
40908: ARRAY
40909: PPUSH
40910: LD_VAR 0 5
40914: PPUSH
40915: CALL_OW 3
40919: PPUSH
40920: CALL_OW 1
40924: ST_TO_ADDR
// end ; end ;
40925: GO 40763
40927: POP
40928: POP
// end ;
40929: LD_VAR 0 4
40933: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40934: LD_INT 0
40936: PPUSH
40937: PPUSH
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40945: LD_VAR 0 1
40949: PPUSH
40950: CALL_OW 264
40954: PUSH
40955: LD_INT 81
40957: EQUAL
40958: NOT
40959: PUSH
40960: LD_VAR 0 1
40964: PUSH
40965: LD_EXP 126
40969: IN
40970: NOT
40971: OR
40972: IFFALSE 40976
// exit ;
40974: GO 41298
// index := GetElementIndex ( minersList , unit ) ;
40976: LD_ADDR_VAR 0 6
40980: PUSH
40981: LD_EXP 126
40985: PPUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL 46470 0 2
40995: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40996: LD_ADDR_VAR 0 8
41000: PUSH
41001: LD_EXP 128
41005: PUSH
41006: LD_EXP 127
41010: PUSH
41011: LD_VAR 0 6
41015: ARRAY
41016: MINUS
41017: ST_TO_ADDR
// if not minesFreeAmount then
41018: LD_VAR 0 8
41022: NOT
41023: IFFALSE 41027
// exit ;
41025: GO 41298
// tmp := [ ] ;
41027: LD_ADDR_VAR 0 7
41031: PUSH
41032: EMPTY
41033: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41034: LD_ADDR_VAR 0 5
41038: PUSH
41039: DOUBLE
41040: LD_INT 1
41042: DEC
41043: ST_TO_ADDR
41044: LD_VAR 0 8
41048: PUSH
41049: FOR_TO
41050: IFFALSE 41245
// begin _d := rand ( 0 , 5 ) ;
41052: LD_ADDR_VAR 0 11
41056: PUSH
41057: LD_INT 0
41059: PPUSH
41060: LD_INT 5
41062: PPUSH
41063: CALL_OW 12
41067: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41068: LD_ADDR_VAR 0 12
41072: PUSH
41073: LD_INT 2
41075: PPUSH
41076: LD_INT 6
41078: PPUSH
41079: CALL_OW 12
41083: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41084: LD_ADDR_VAR 0 9
41088: PUSH
41089: LD_VAR 0 2
41093: PPUSH
41094: LD_VAR 0 11
41098: PPUSH
41099: LD_VAR 0 12
41103: PPUSH
41104: CALL_OW 272
41108: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41109: LD_ADDR_VAR 0 10
41113: PUSH
41114: LD_VAR 0 3
41118: PPUSH
41119: LD_VAR 0 11
41123: PPUSH
41124: LD_VAR 0 12
41128: PPUSH
41129: CALL_OW 273
41133: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41134: LD_VAR 0 9
41138: PPUSH
41139: LD_VAR 0 10
41143: PPUSH
41144: CALL_OW 488
41148: PUSH
41149: LD_VAR 0 9
41153: PUSH
41154: LD_VAR 0 10
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_VAR 0 7
41167: IN
41168: NOT
41169: AND
41170: PUSH
41171: LD_VAR 0 9
41175: PPUSH
41176: LD_VAR 0 10
41180: PPUSH
41181: CALL_OW 458
41185: NOT
41186: AND
41187: IFFALSE 41229
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41189: LD_ADDR_VAR 0 7
41193: PUSH
41194: LD_VAR 0 7
41198: PPUSH
41199: LD_VAR 0 7
41203: PUSH
41204: LD_INT 1
41206: PLUS
41207: PPUSH
41208: LD_VAR 0 9
41212: PUSH
41213: LD_VAR 0 10
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PPUSH
41222: CALL_OW 1
41226: ST_TO_ADDR
41227: GO 41243
// i := i - 1 ;
41229: LD_ADDR_VAR 0 5
41233: PUSH
41234: LD_VAR 0 5
41238: PUSH
41239: LD_INT 1
41241: MINUS
41242: ST_TO_ADDR
// end ;
41243: GO 41049
41245: POP
41246: POP
// for i in tmp do
41247: LD_ADDR_VAR 0 5
41251: PUSH
41252: LD_VAR 0 7
41256: PUSH
41257: FOR_IN
41258: IFFALSE 41296
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41260: LD_VAR 0 1
41264: PPUSH
41265: LD_VAR 0 5
41269: PUSH
41270: LD_INT 1
41272: ARRAY
41273: PPUSH
41274: LD_VAR 0 5
41278: PUSH
41279: LD_INT 2
41281: ARRAY
41282: PPUSH
41283: CALL 40242 0 3
41287: NOT
41288: IFFALSE 41294
// exit ;
41290: POP
41291: POP
41292: GO 41298
41294: GO 41257
41296: POP
41297: POP
// end ;
41298: LD_VAR 0 4
41302: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41303: LD_INT 0
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
// if not GetClass ( unit ) = class_sniper then
41312: LD_VAR 0 1
41316: PPUSH
41317: CALL_OW 257
41321: PUSH
41322: LD_INT 5
41324: EQUAL
41325: NOT
41326: IFFALSE 41330
// exit ;
41328: GO 41718
// dist := 8 ;
41330: LD_ADDR_VAR 0 5
41334: PUSH
41335: LD_INT 8
41337: ST_TO_ADDR
// viewRange := 12 ;
41338: LD_ADDR_VAR 0 7
41342: PUSH
41343: LD_INT 12
41345: ST_TO_ADDR
// side := GetSide ( unit ) ;
41346: LD_ADDR_VAR 0 6
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 255
41360: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41361: LD_INT 61
41363: PPUSH
41364: LD_VAR 0 6
41368: PPUSH
41369: CALL_OW 321
41373: PUSH
41374: LD_INT 2
41376: EQUAL
41377: IFFALSE 41387
// viewRange := 16 ;
41379: LD_ADDR_VAR 0 7
41383: PUSH
41384: LD_INT 16
41386: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41387: LD_VAR 0 1
41391: PPUSH
41392: LD_VAR 0 2
41396: PPUSH
41397: LD_VAR 0 3
41401: PPUSH
41402: CALL_OW 297
41406: PUSH
41407: LD_VAR 0 5
41411: GREATER
41412: IFFALSE 41491
// begin ComMoveXY ( unit , x , y ) ;
41414: LD_VAR 0 1
41418: PPUSH
41419: LD_VAR 0 2
41423: PPUSH
41424: LD_VAR 0 3
41428: PPUSH
41429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41433: LD_INT 35
41435: PPUSH
41436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41440: LD_VAR 0 1
41444: PPUSH
41445: LD_VAR 0 2
41449: PPUSH
41450: LD_VAR 0 3
41454: PPUSH
41455: CALL 78211 0 3
41459: NOT
41460: IFFALSE 41464
// exit ;
41462: GO 41718
// until GetDistUnitXY ( unit , x , y ) < dist ;
41464: LD_VAR 0 1
41468: PPUSH
41469: LD_VAR 0 2
41473: PPUSH
41474: LD_VAR 0 3
41478: PPUSH
41479: CALL_OW 297
41483: PUSH
41484: LD_VAR 0 5
41488: LESS
41489: IFFALSE 41433
// end ; ComTurnXY ( unit , x , y ) ;
41491: LD_VAR 0 1
41495: PPUSH
41496: LD_VAR 0 2
41500: PPUSH
41501: LD_VAR 0 3
41505: PPUSH
41506: CALL_OW 118
// wait ( 5 ) ;
41510: LD_INT 5
41512: PPUSH
41513: CALL_OW 67
// _d := GetDir ( unit ) ;
41517: LD_ADDR_VAR 0 10
41521: PUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: CALL_OW 254
41531: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41532: LD_ADDR_VAR 0 8
41536: PUSH
41537: LD_VAR 0 1
41541: PPUSH
41542: CALL_OW 250
41546: PPUSH
41547: LD_VAR 0 10
41551: PPUSH
41552: LD_VAR 0 5
41556: PPUSH
41557: CALL_OW 272
41561: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41562: LD_ADDR_VAR 0 9
41566: PUSH
41567: LD_VAR 0 1
41571: PPUSH
41572: CALL_OW 251
41576: PPUSH
41577: LD_VAR 0 10
41581: PPUSH
41582: LD_VAR 0 5
41586: PPUSH
41587: CALL_OW 273
41591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41592: LD_VAR 0 8
41596: PPUSH
41597: LD_VAR 0 9
41601: PPUSH
41602: CALL_OW 488
41606: NOT
41607: IFFALSE 41611
// exit ;
41609: GO 41718
// ComAnimCustom ( unit , 1 ) ;
41611: LD_VAR 0 1
41615: PPUSH
41616: LD_INT 1
41618: PPUSH
41619: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41623: LD_VAR 0 8
41627: PPUSH
41628: LD_VAR 0 9
41632: PPUSH
41633: LD_VAR 0 6
41637: PPUSH
41638: LD_VAR 0 7
41642: PPUSH
41643: CALL_OW 330
// repeat wait ( 1 ) ;
41647: LD_INT 1
41649: PPUSH
41650: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 316
41663: PUSH
41664: LD_VAR 0 1
41668: PPUSH
41669: CALL_OW 314
41673: OR
41674: PUSH
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 302
41684: NOT
41685: OR
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 301
41696: OR
41697: IFFALSE 41647
// RemoveSeeing ( _x , _y , side ) ;
41699: LD_VAR 0 8
41703: PPUSH
41704: LD_VAR 0 9
41708: PPUSH
41709: LD_VAR 0 6
41713: PPUSH
41714: CALL_OW 331
// end ; end_of_file
41718: LD_VAR 0 4
41722: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41723: LD_INT 0
41725: PPUSH
41726: PPUSH
// if exist_mode then
41727: LD_VAR 0 2
41731: IFFALSE 41756
// unit := CreateCharacter ( prefix & ident ) else
41733: LD_ADDR_VAR 0 5
41737: PUSH
41738: LD_VAR 0 3
41742: PUSH
41743: LD_VAR 0 1
41747: STR
41748: PPUSH
41749: CALL_OW 34
41753: ST_TO_ADDR
41754: GO 41771
// unit := NewCharacter ( ident ) ;
41756: LD_ADDR_VAR 0 5
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 25
41770: ST_TO_ADDR
// result := unit ;
41771: LD_ADDR_VAR 0 4
41775: PUSH
41776: LD_VAR 0 5
41780: ST_TO_ADDR
// end ;
41781: LD_VAR 0 4
41785: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41786: LD_INT 0
41788: PPUSH
41789: PPUSH
// if not side or not nation then
41790: LD_VAR 0 1
41794: NOT
41795: PUSH
41796: LD_VAR 0 2
41800: NOT
41801: OR
41802: IFFALSE 41806
// exit ;
41804: GO 42574
// case nation of nation_american :
41806: LD_VAR 0 2
41810: PUSH
41811: LD_INT 1
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 42033
41819: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41820: LD_ADDR_VAR 0 4
41824: PUSH
41825: LD_INT 35
41827: PUSH
41828: LD_INT 45
41830: PUSH
41831: LD_INT 46
41833: PUSH
41834: LD_INT 47
41836: PUSH
41837: LD_INT 82
41839: PUSH
41840: LD_INT 83
41842: PUSH
41843: LD_INT 84
41845: PUSH
41846: LD_INT 85
41848: PUSH
41849: LD_INT 86
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: LD_INT 6
41860: PUSH
41861: LD_INT 15
41863: PUSH
41864: LD_INT 16
41866: PUSH
41867: LD_INT 7
41869: PUSH
41870: LD_INT 12
41872: PUSH
41873: LD_INT 13
41875: PUSH
41876: LD_INT 10
41878: PUSH
41879: LD_INT 14
41881: PUSH
41882: LD_INT 20
41884: PUSH
41885: LD_INT 21
41887: PUSH
41888: LD_INT 22
41890: PUSH
41891: LD_INT 25
41893: PUSH
41894: LD_INT 32
41896: PUSH
41897: LD_INT 27
41899: PUSH
41900: LD_INT 36
41902: PUSH
41903: LD_INT 69
41905: PUSH
41906: LD_INT 39
41908: PUSH
41909: LD_INT 34
41911: PUSH
41912: LD_INT 40
41914: PUSH
41915: LD_INT 48
41917: PUSH
41918: LD_INT 49
41920: PUSH
41921: LD_INT 50
41923: PUSH
41924: LD_INT 51
41926: PUSH
41927: LD_INT 52
41929: PUSH
41930: LD_INT 53
41932: PUSH
41933: LD_INT 54
41935: PUSH
41936: LD_INT 55
41938: PUSH
41939: LD_INT 56
41941: PUSH
41942: LD_INT 57
41944: PUSH
41945: LD_INT 58
41947: PUSH
41948: LD_INT 59
41950: PUSH
41951: LD_INT 60
41953: PUSH
41954: LD_INT 61
41956: PUSH
41957: LD_INT 62
41959: PUSH
41960: LD_INT 80
41962: PUSH
41963: LD_INT 82
41965: PUSH
41966: LD_INT 83
41968: PUSH
41969: LD_INT 84
41971: PUSH
41972: LD_INT 85
41974: PUSH
41975: LD_INT 86
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: ST_TO_ADDR
42031: GO 42498
42033: LD_INT 2
42035: DOUBLE
42036: EQUAL
42037: IFTRUE 42041
42039: GO 42267
42041: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42042: LD_ADDR_VAR 0 4
42046: PUSH
42047: LD_INT 35
42049: PUSH
42050: LD_INT 45
42052: PUSH
42053: LD_INT 46
42055: PUSH
42056: LD_INT 47
42058: PUSH
42059: LD_INT 82
42061: PUSH
42062: LD_INT 83
42064: PUSH
42065: LD_INT 84
42067: PUSH
42068: LD_INT 85
42070: PUSH
42071: LD_INT 87
42073: PUSH
42074: LD_INT 70
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 11
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 4
42088: PUSH
42089: LD_INT 5
42091: PUSH
42092: LD_INT 6
42094: PUSH
42095: LD_INT 15
42097: PUSH
42098: LD_INT 18
42100: PUSH
42101: LD_INT 7
42103: PUSH
42104: LD_INT 17
42106: PUSH
42107: LD_INT 8
42109: PUSH
42110: LD_INT 20
42112: PUSH
42113: LD_INT 21
42115: PUSH
42116: LD_INT 22
42118: PUSH
42119: LD_INT 72
42121: PUSH
42122: LD_INT 26
42124: PUSH
42125: LD_INT 69
42127: PUSH
42128: LD_INT 39
42130: PUSH
42131: LD_INT 40
42133: PUSH
42134: LD_INT 41
42136: PUSH
42137: LD_INT 42
42139: PUSH
42140: LD_INT 43
42142: PUSH
42143: LD_INT 48
42145: PUSH
42146: LD_INT 49
42148: PUSH
42149: LD_INT 50
42151: PUSH
42152: LD_INT 51
42154: PUSH
42155: LD_INT 52
42157: PUSH
42158: LD_INT 53
42160: PUSH
42161: LD_INT 54
42163: PUSH
42164: LD_INT 55
42166: PUSH
42167: LD_INT 56
42169: PUSH
42170: LD_INT 60
42172: PUSH
42173: LD_INT 61
42175: PUSH
42176: LD_INT 62
42178: PUSH
42179: LD_INT 66
42181: PUSH
42182: LD_INT 67
42184: PUSH
42185: LD_INT 68
42187: PUSH
42188: LD_INT 81
42190: PUSH
42191: LD_INT 82
42193: PUSH
42194: LD_INT 83
42196: PUSH
42197: LD_INT 84
42199: PUSH
42200: LD_INT 85
42202: PUSH
42203: LD_INT 87
42205: PUSH
42206: LD_INT 88
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: ST_TO_ADDR
42265: GO 42498
42267: LD_INT 3
42269: DOUBLE
42270: EQUAL
42271: IFTRUE 42275
42273: GO 42497
42275: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42276: LD_ADDR_VAR 0 4
42280: PUSH
42281: LD_INT 46
42283: PUSH
42284: LD_INT 47
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 82
42295: PUSH
42296: LD_INT 83
42298: PUSH
42299: LD_INT 84
42301: PUSH
42302: LD_INT 85
42304: PUSH
42305: LD_INT 86
42307: PUSH
42308: LD_INT 11
42310: PUSH
42311: LD_INT 9
42313: PUSH
42314: LD_INT 20
42316: PUSH
42317: LD_INT 19
42319: PUSH
42320: LD_INT 21
42322: PUSH
42323: LD_INT 24
42325: PUSH
42326: LD_INT 22
42328: PUSH
42329: LD_INT 25
42331: PUSH
42332: LD_INT 28
42334: PUSH
42335: LD_INT 29
42337: PUSH
42338: LD_INT 30
42340: PUSH
42341: LD_INT 31
42343: PUSH
42344: LD_INT 37
42346: PUSH
42347: LD_INT 38
42349: PUSH
42350: LD_INT 32
42352: PUSH
42353: LD_INT 27
42355: PUSH
42356: LD_INT 33
42358: PUSH
42359: LD_INT 69
42361: PUSH
42362: LD_INT 39
42364: PUSH
42365: LD_INT 34
42367: PUSH
42368: LD_INT 40
42370: PUSH
42371: LD_INT 71
42373: PUSH
42374: LD_INT 23
42376: PUSH
42377: LD_INT 44
42379: PUSH
42380: LD_INT 48
42382: PUSH
42383: LD_INT 49
42385: PUSH
42386: LD_INT 50
42388: PUSH
42389: LD_INT 51
42391: PUSH
42392: LD_INT 52
42394: PUSH
42395: LD_INT 53
42397: PUSH
42398: LD_INT 54
42400: PUSH
42401: LD_INT 55
42403: PUSH
42404: LD_INT 56
42406: PUSH
42407: LD_INT 57
42409: PUSH
42410: LD_INT 58
42412: PUSH
42413: LD_INT 59
42415: PUSH
42416: LD_INT 63
42418: PUSH
42419: LD_INT 64
42421: PUSH
42422: LD_INT 65
42424: PUSH
42425: LD_INT 82
42427: PUSH
42428: LD_INT 83
42430: PUSH
42431: LD_INT 84
42433: PUSH
42434: LD_INT 85
42436: PUSH
42437: LD_INT 86
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: ST_TO_ADDR
42495: GO 42498
42497: POP
// if state > - 1 and state < 3 then
42498: LD_VAR 0 3
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: GREATER
42507: PUSH
42508: LD_VAR 0 3
42512: PUSH
42513: LD_INT 3
42515: LESS
42516: AND
42517: IFFALSE 42574
// for i in result do
42519: LD_ADDR_VAR 0 5
42523: PUSH
42524: LD_VAR 0 4
42528: PUSH
42529: FOR_IN
42530: IFFALSE 42572
// if GetTech ( i , side ) <> state then
42532: LD_VAR 0 5
42536: PPUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: CALL_OW 321
42546: PUSH
42547: LD_VAR 0 3
42551: NONEQUAL
42552: IFFALSE 42570
// result := result diff i ;
42554: LD_ADDR_VAR 0 4
42558: PUSH
42559: LD_VAR 0 4
42563: PUSH
42564: LD_VAR 0 5
42568: DIFF
42569: ST_TO_ADDR
42570: GO 42529
42572: POP
42573: POP
// end ;
42574: LD_VAR 0 4
42578: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42579: LD_INT 0
42581: PPUSH
42582: PPUSH
42583: PPUSH
// result := true ;
42584: LD_ADDR_VAR 0 3
42588: PUSH
42589: LD_INT 1
42591: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42592: LD_ADDR_VAR 0 5
42596: PUSH
42597: LD_VAR 0 2
42601: PPUSH
42602: CALL_OW 480
42606: ST_TO_ADDR
// if not tmp then
42607: LD_VAR 0 5
42611: NOT
42612: IFFALSE 42616
// exit ;
42614: GO 42665
// for i in tmp do
42616: LD_ADDR_VAR 0 4
42620: PUSH
42621: LD_VAR 0 5
42625: PUSH
42626: FOR_IN
42627: IFFALSE 42663
// if GetTech ( i , side ) <> state_researched then
42629: LD_VAR 0 4
42633: PPUSH
42634: LD_VAR 0 1
42638: PPUSH
42639: CALL_OW 321
42643: PUSH
42644: LD_INT 2
42646: NONEQUAL
42647: IFFALSE 42661
// begin result := false ;
42649: LD_ADDR_VAR 0 3
42653: PUSH
42654: LD_INT 0
42656: ST_TO_ADDR
// exit ;
42657: POP
42658: POP
42659: GO 42665
// end ;
42661: GO 42626
42663: POP
42664: POP
// end ;
42665: LD_VAR 0 3
42669: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42670: LD_INT 0
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42685: LD_VAR 0 1
42689: NOT
42690: PUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 257
42700: PUSH
42701: LD_INT 9
42703: NONEQUAL
42704: OR
42705: IFFALSE 42709
// exit ;
42707: GO 43282
// side := GetSide ( unit ) ;
42709: LD_ADDR_VAR 0 9
42713: PUSH
42714: LD_VAR 0 1
42718: PPUSH
42719: CALL_OW 255
42723: ST_TO_ADDR
// tech_space := tech_spacanom ;
42724: LD_ADDR_VAR 0 12
42728: PUSH
42729: LD_INT 29
42731: ST_TO_ADDR
// tech_time := tech_taurad ;
42732: LD_ADDR_VAR 0 13
42736: PUSH
42737: LD_INT 28
42739: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42740: LD_ADDR_VAR 0 11
42744: PUSH
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 310
42754: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42755: LD_VAR 0 11
42759: PPUSH
42760: CALL_OW 247
42764: PUSH
42765: LD_INT 2
42767: EQUAL
42768: IFFALSE 42772
// exit ;
42770: GO 43282
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42772: LD_ADDR_VAR 0 8
42776: PUSH
42777: LD_INT 81
42779: PUSH
42780: LD_VAR 0 9
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 21
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PPUSH
42810: CALL_OW 69
42814: ST_TO_ADDR
// if not tmp then
42815: LD_VAR 0 8
42819: NOT
42820: IFFALSE 42824
// exit ;
42822: GO 43282
// if in_unit then
42824: LD_VAR 0 11
42828: IFFALSE 42852
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42830: LD_ADDR_VAR 0 10
42834: PUSH
42835: LD_VAR 0 8
42839: PPUSH
42840: LD_VAR 0 11
42844: PPUSH
42845: CALL_OW 74
42849: ST_TO_ADDR
42850: GO 42872
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42852: LD_ADDR_VAR 0 10
42856: PUSH
42857: LD_VAR 0 8
42861: PPUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 74
42871: ST_TO_ADDR
// if not enemy then
42872: LD_VAR 0 10
42876: NOT
42877: IFFALSE 42881
// exit ;
42879: GO 43282
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42881: LD_VAR 0 11
42885: PUSH
42886: LD_VAR 0 11
42890: PPUSH
42891: LD_VAR 0 10
42895: PPUSH
42896: CALL_OW 296
42900: PUSH
42901: LD_INT 13
42903: GREATER
42904: AND
42905: PUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 10
42915: PPUSH
42916: CALL_OW 296
42920: PUSH
42921: LD_INT 12
42923: GREATER
42924: OR
42925: IFFALSE 42929
// exit ;
42927: GO 43282
// missile := [ 1 ] ;
42929: LD_ADDR_VAR 0 14
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42940: LD_VAR 0 9
42944: PPUSH
42945: LD_VAR 0 12
42949: PPUSH
42950: CALL_OW 325
42954: IFFALSE 42983
// missile := Replace ( missile , missile + 1 , 2 ) ;
42956: LD_ADDR_VAR 0 14
42960: PUSH
42961: LD_VAR 0 14
42965: PPUSH
42966: LD_VAR 0 14
42970: PUSH
42971: LD_INT 1
42973: PLUS
42974: PPUSH
42975: LD_INT 2
42977: PPUSH
42978: CALL_OW 1
42982: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42983: LD_VAR 0 9
42987: PPUSH
42988: LD_VAR 0 13
42992: PPUSH
42993: CALL_OW 325
42997: PUSH
42998: LD_VAR 0 10
43002: PPUSH
43003: CALL_OW 255
43007: PPUSH
43008: LD_VAR 0 13
43012: PPUSH
43013: CALL_OW 325
43017: NOT
43018: AND
43019: IFFALSE 43048
// missile := Replace ( missile , missile + 1 , 3 ) ;
43021: LD_ADDR_VAR 0 14
43025: PUSH
43026: LD_VAR 0 14
43030: PPUSH
43031: LD_VAR 0 14
43035: PUSH
43036: LD_INT 1
43038: PLUS
43039: PPUSH
43040: LD_INT 3
43042: PPUSH
43043: CALL_OW 1
43047: ST_TO_ADDR
// if missile < 2 then
43048: LD_VAR 0 14
43052: PUSH
43053: LD_INT 2
43055: LESS
43056: IFFALSE 43060
// exit ;
43058: GO 43282
// x := GetX ( enemy ) ;
43060: LD_ADDR_VAR 0 4
43064: PUSH
43065: LD_VAR 0 10
43069: PPUSH
43070: CALL_OW 250
43074: ST_TO_ADDR
// y := GetY ( enemy ) ;
43075: LD_ADDR_VAR 0 5
43079: PUSH
43080: LD_VAR 0 10
43084: PPUSH
43085: CALL_OW 251
43089: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43090: LD_ADDR_VAR 0 6
43094: PUSH
43095: LD_VAR 0 4
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PPUSH
43104: LD_INT 1
43106: PPUSH
43107: CALL_OW 12
43111: PLUS
43112: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43113: LD_ADDR_VAR 0 7
43117: PUSH
43118: LD_VAR 0 5
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PPUSH
43127: LD_INT 1
43129: PPUSH
43130: CALL_OW 12
43134: PLUS
43135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43136: LD_VAR 0 6
43140: PPUSH
43141: LD_VAR 0 7
43145: PPUSH
43146: CALL_OW 488
43150: NOT
43151: IFFALSE 43173
// begin _x := x ;
43153: LD_ADDR_VAR 0 6
43157: PUSH
43158: LD_VAR 0 4
43162: ST_TO_ADDR
// _y := y ;
43163: LD_ADDR_VAR 0 7
43167: PUSH
43168: LD_VAR 0 5
43172: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43173: LD_ADDR_VAR 0 3
43177: PUSH
43178: LD_INT 1
43180: PPUSH
43181: LD_VAR 0 14
43185: PPUSH
43186: CALL_OW 12
43190: ST_TO_ADDR
// case i of 1 :
43191: LD_VAR 0 3
43195: PUSH
43196: LD_INT 1
43198: DOUBLE
43199: EQUAL
43200: IFTRUE 43204
43202: GO 43221
43204: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43205: LD_VAR 0 1
43209: PPUSH
43210: LD_VAR 0 10
43214: PPUSH
43215: CALL_OW 115
43219: GO 43282
43221: LD_INT 2
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43251
43229: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43230: LD_VAR 0 1
43234: PPUSH
43235: LD_VAR 0 6
43239: PPUSH
43240: LD_VAR 0 7
43244: PPUSH
43245: CALL_OW 153
43249: GO 43282
43251: LD_INT 3
43253: DOUBLE
43254: EQUAL
43255: IFTRUE 43259
43257: GO 43281
43259: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43260: LD_VAR 0 1
43264: PPUSH
43265: LD_VAR 0 6
43269: PPUSH
43270: LD_VAR 0 7
43274: PPUSH
43275: CALL_OW 154
43279: GO 43282
43281: POP
// end ;
43282: LD_VAR 0 2
43286: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43287: LD_INT 0
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
// if not unit or not building then
43295: LD_VAR 0 1
43299: NOT
43300: PUSH
43301: LD_VAR 0 2
43305: NOT
43306: OR
43307: IFFALSE 43311
// exit ;
43309: GO 43469
// x := GetX ( building ) ;
43311: LD_ADDR_VAR 0 5
43315: PUSH
43316: LD_VAR 0 2
43320: PPUSH
43321: CALL_OW 250
43325: ST_TO_ADDR
// y := GetY ( building ) ;
43326: LD_ADDR_VAR 0 6
43330: PUSH
43331: LD_VAR 0 2
43335: PPUSH
43336: CALL_OW 251
43340: ST_TO_ADDR
// for i = 0 to 5 do
43341: LD_ADDR_VAR 0 4
43345: PUSH
43346: DOUBLE
43347: LD_INT 0
43349: DEC
43350: ST_TO_ADDR
43351: LD_INT 5
43353: PUSH
43354: FOR_TO
43355: IFFALSE 43467
// begin _x := ShiftX ( x , i , 3 ) ;
43357: LD_ADDR_VAR 0 7
43361: PUSH
43362: LD_VAR 0 5
43366: PPUSH
43367: LD_VAR 0 4
43371: PPUSH
43372: LD_INT 3
43374: PPUSH
43375: CALL_OW 272
43379: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43380: LD_ADDR_VAR 0 8
43384: PUSH
43385: LD_VAR 0 6
43389: PPUSH
43390: LD_VAR 0 4
43394: PPUSH
43395: LD_INT 3
43397: PPUSH
43398: CALL_OW 273
43402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43403: LD_VAR 0 7
43407: PPUSH
43408: LD_VAR 0 8
43412: PPUSH
43413: CALL_OW 488
43417: NOT
43418: IFFALSE 43422
// continue ;
43420: GO 43354
// if HexInfo ( _x , _y ) = 0 then
43422: LD_VAR 0 7
43426: PPUSH
43427: LD_VAR 0 8
43431: PPUSH
43432: CALL_OW 428
43436: PUSH
43437: LD_INT 0
43439: EQUAL
43440: IFFALSE 43465
// begin ComMoveXY ( unit , _x , _y ) ;
43442: LD_VAR 0 1
43446: PPUSH
43447: LD_VAR 0 7
43451: PPUSH
43452: LD_VAR 0 8
43456: PPUSH
43457: CALL_OW 111
// exit ;
43461: POP
43462: POP
43463: GO 43469
// end ; end ;
43465: GO 43354
43467: POP
43468: POP
// end ;
43469: LD_VAR 0 3
43473: RET
// export function ScanBase ( side , base_area ) ; begin
43474: LD_INT 0
43476: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43477: LD_ADDR_VAR 0 3
43481: PUSH
43482: LD_VAR 0 2
43486: PPUSH
43487: LD_INT 81
43489: PUSH
43490: LD_VAR 0 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PPUSH
43499: CALL_OW 70
43503: ST_TO_ADDR
// end ;
43504: LD_VAR 0 3
43508: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43509: LD_INT 0
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
// result := false ;
43515: LD_ADDR_VAR 0 2
43519: PUSH
43520: LD_INT 0
43522: ST_TO_ADDR
// side := GetSide ( unit ) ;
43523: LD_ADDR_VAR 0 3
43527: PUSH
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 255
43537: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43538: LD_ADDR_VAR 0 4
43542: PUSH
43543: LD_VAR 0 1
43547: PPUSH
43548: CALL_OW 248
43552: ST_TO_ADDR
// case nat of 1 :
43553: LD_VAR 0 4
43557: PUSH
43558: LD_INT 1
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43566
43564: GO 43577
43566: POP
// tech := tech_lassight ; 2 :
43567: LD_ADDR_VAR 0 5
43571: PUSH
43572: LD_INT 12
43574: ST_TO_ADDR
43575: GO 43616
43577: LD_INT 2
43579: DOUBLE
43580: EQUAL
43581: IFTRUE 43585
43583: GO 43596
43585: POP
// tech := tech_mortar ; 3 :
43586: LD_ADDR_VAR 0 5
43590: PUSH
43591: LD_INT 41
43593: ST_TO_ADDR
43594: GO 43616
43596: LD_INT 3
43598: DOUBLE
43599: EQUAL
43600: IFTRUE 43604
43602: GO 43615
43604: POP
// tech := tech_bazooka ; end ;
43605: LD_ADDR_VAR 0 5
43609: PUSH
43610: LD_INT 44
43612: ST_TO_ADDR
43613: GO 43616
43615: POP
// if Researched ( side , tech ) then
43616: LD_VAR 0 3
43620: PPUSH
43621: LD_VAR 0 5
43625: PPUSH
43626: CALL_OW 325
43630: IFFALSE 43657
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43632: LD_ADDR_VAR 0 2
43636: PUSH
43637: LD_INT 5
43639: PUSH
43640: LD_INT 8
43642: PUSH
43643: LD_INT 9
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: PUSH
43651: LD_VAR 0 4
43655: ARRAY
43656: ST_TO_ADDR
// end ;
43657: LD_VAR 0 2
43661: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43662: LD_INT 0
43664: PPUSH
43665: PPUSH
43666: PPUSH
// if not mines then
43667: LD_VAR 0 2
43671: NOT
43672: IFFALSE 43676
// exit ;
43674: GO 43820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43676: LD_ADDR_VAR 0 5
43680: PUSH
43681: LD_INT 81
43683: PUSH
43684: LD_VAR 0 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 3
43695: PUSH
43696: LD_INT 21
43698: PUSH
43699: LD_INT 3
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PPUSH
43714: CALL_OW 69
43718: ST_TO_ADDR
// for i in mines do
43719: LD_ADDR_VAR 0 4
43723: PUSH
43724: LD_VAR 0 2
43728: PUSH
43729: FOR_IN
43730: IFFALSE 43818
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43732: LD_VAR 0 4
43736: PUSH
43737: LD_INT 1
43739: ARRAY
43740: PPUSH
43741: LD_VAR 0 4
43745: PUSH
43746: LD_INT 2
43748: ARRAY
43749: PPUSH
43750: CALL_OW 458
43754: NOT
43755: IFFALSE 43759
// continue ;
43757: GO 43729
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43759: LD_VAR 0 4
43763: PUSH
43764: LD_INT 1
43766: ARRAY
43767: PPUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 2
43775: ARRAY
43776: PPUSH
43777: CALL_OW 428
43781: PUSH
43782: LD_VAR 0 5
43786: IN
43787: IFFALSE 43816
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43789: LD_VAR 0 4
43793: PUSH
43794: LD_INT 1
43796: ARRAY
43797: PPUSH
43798: LD_VAR 0 4
43802: PUSH
43803: LD_INT 2
43805: ARRAY
43806: PPUSH
43807: LD_VAR 0 1
43811: PPUSH
43812: CALL_OW 456
// end ;
43816: GO 43729
43818: POP
43819: POP
// end ;
43820: LD_VAR 0 3
43824: RET
// export function Count ( array ) ; begin
43825: LD_INT 0
43827: PPUSH
// result := array + 0 ;
43828: LD_ADDR_VAR 0 2
43832: PUSH
43833: LD_VAR 0 1
43837: PUSH
43838: LD_INT 0
43840: PLUS
43841: ST_TO_ADDR
// end ;
43842: LD_VAR 0 2
43846: RET
// export function IsEmpty ( building ) ; begin
43847: LD_INT 0
43849: PPUSH
// if not building then
43850: LD_VAR 0 1
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 43902
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43859: LD_ADDR_VAR 0 2
43863: PUSH
43864: LD_VAR 0 1
43868: PUSH
43869: LD_INT 22
43871: PUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: CALL_OW 255
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 58
43888: PUSH
43889: EMPTY
43890: LIST
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PPUSH
43896: CALL_OW 69
43900: IN
43901: ST_TO_ADDR
// end ;
43902: LD_VAR 0 2
43906: RET
// export function IsNotFull ( building ) ; var places ; begin
43907: LD_INT 0
43909: PPUSH
43910: PPUSH
// if not building then
43911: LD_VAR 0 1
43915: NOT
43916: IFFALSE 43920
// exit ;
43918: GO 43948
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43920: LD_ADDR_VAR 0 2
43924: PUSH
43925: LD_VAR 0 1
43929: PPUSH
43930: LD_INT 3
43932: PUSH
43933: LD_INT 62
43935: PUSH
43936: EMPTY
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PPUSH
43943: CALL_OW 72
43947: ST_TO_ADDR
// end ;
43948: LD_VAR 0 2
43952: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43953: LD_INT 0
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
// tmp := [ ] ;
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: EMPTY
43965: ST_TO_ADDR
// list := [ ] ;
43966: LD_ADDR_VAR 0 5
43970: PUSH
43971: EMPTY
43972: ST_TO_ADDR
// for i = 16 to 25 do
43973: LD_ADDR_VAR 0 4
43977: PUSH
43978: DOUBLE
43979: LD_INT 16
43981: DEC
43982: ST_TO_ADDR
43983: LD_INT 25
43985: PUSH
43986: FOR_TO
43987: IFFALSE 44060
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43989: LD_ADDR_VAR 0 3
43993: PUSH
43994: LD_VAR 0 3
43998: PUSH
43999: LD_INT 22
44001: PUSH
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 255
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 91
44018: PUSH
44019: LD_VAR 0 1
44023: PUSH
44024: LD_INT 6
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 30
44034: PUSH
44035: LD_VAR 0 4
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: PPUSH
44052: CALL_OW 69
44056: ADD
44057: ST_TO_ADDR
44058: GO 43986
44060: POP
44061: POP
// for i = 1 to tmp do
44062: LD_ADDR_VAR 0 4
44066: PUSH
44067: DOUBLE
44068: LD_INT 1
44070: DEC
44071: ST_TO_ADDR
44072: LD_VAR 0 3
44076: PUSH
44077: FOR_TO
44078: IFFALSE 44166
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44080: LD_ADDR_VAR 0 5
44084: PUSH
44085: LD_VAR 0 5
44089: PUSH
44090: LD_VAR 0 3
44094: PUSH
44095: LD_VAR 0 4
44099: ARRAY
44100: PPUSH
44101: CALL_OW 266
44105: PUSH
44106: LD_VAR 0 3
44110: PUSH
44111: LD_VAR 0 4
44115: ARRAY
44116: PPUSH
44117: CALL_OW 250
44121: PUSH
44122: LD_VAR 0 3
44126: PUSH
44127: LD_VAR 0 4
44131: ARRAY
44132: PPUSH
44133: CALL_OW 251
44137: PUSH
44138: LD_VAR 0 3
44142: PUSH
44143: LD_VAR 0 4
44147: ARRAY
44148: PPUSH
44149: CALL_OW 254
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: PUSH
44160: EMPTY
44161: LIST
44162: ADD
44163: ST_TO_ADDR
44164: GO 44077
44166: POP
44167: POP
// result := list ;
44168: LD_ADDR_VAR 0 2
44172: PUSH
44173: LD_VAR 0 5
44177: ST_TO_ADDR
// end ;
44178: LD_VAR 0 2
44182: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
// if not factory then
44192: LD_VAR 0 1
44196: NOT
44197: IFFALSE 44201
// exit ;
44199: GO 44794
// if control = control_apeman then
44201: LD_VAR 0 4
44205: PUSH
44206: LD_INT 5
44208: EQUAL
44209: IFFALSE 44318
// begin tmp := UnitsInside ( factory ) ;
44211: LD_ADDR_VAR 0 8
44215: PUSH
44216: LD_VAR 0 1
44220: PPUSH
44221: CALL_OW 313
44225: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44226: LD_VAR 0 8
44230: PPUSH
44231: LD_INT 25
44233: PUSH
44234: LD_INT 12
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PPUSH
44241: CALL_OW 72
44245: NOT
44246: IFFALSE 44256
// control := control_manual ;
44248: LD_ADDR_VAR 0 4
44252: PUSH
44253: LD_INT 1
44255: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44256: LD_ADDR_VAR 0 8
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL 43953 0 1
44270: ST_TO_ADDR
// if tmp then
44271: LD_VAR 0 8
44275: IFFALSE 44318
// begin for i in tmp do
44277: LD_ADDR_VAR 0 7
44281: PUSH
44282: LD_VAR 0 8
44286: PUSH
44287: FOR_IN
44288: IFFALSE 44316
// if i [ 1 ] = b_ext_radio then
44290: LD_VAR 0 7
44294: PUSH
44295: LD_INT 1
44297: ARRAY
44298: PUSH
44299: LD_INT 22
44301: EQUAL
44302: IFFALSE 44314
// begin control := control_remote ;
44304: LD_ADDR_VAR 0 4
44308: PUSH
44309: LD_INT 2
44311: ST_TO_ADDR
// break ;
44312: GO 44316
// end ;
44314: GO 44287
44316: POP
44317: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44318: LD_VAR 0 1
44322: PPUSH
44323: LD_VAR 0 2
44327: PPUSH
44328: LD_VAR 0 3
44332: PPUSH
44333: LD_VAR 0 4
44337: PPUSH
44338: LD_VAR 0 5
44342: PPUSH
44343: CALL_OW 448
44347: IFFALSE 44382
// begin result := [ chassis , engine , control , weapon ] ;
44349: LD_ADDR_VAR 0 6
44353: PUSH
44354: LD_VAR 0 2
44358: PUSH
44359: LD_VAR 0 3
44363: PUSH
44364: LD_VAR 0 4
44368: PUSH
44369: LD_VAR 0 5
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// exit ;
44380: GO 44794
// end ; _chassis := AvailableChassisList ( factory ) ;
44382: LD_ADDR_VAR 0 9
44386: PUSH
44387: LD_VAR 0 1
44391: PPUSH
44392: CALL_OW 475
44396: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44397: LD_ADDR_VAR 0 11
44401: PUSH
44402: LD_VAR 0 1
44406: PPUSH
44407: CALL_OW 476
44411: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44412: LD_ADDR_VAR 0 12
44416: PUSH
44417: LD_VAR 0 1
44421: PPUSH
44422: CALL_OW 477
44426: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44427: LD_ADDR_VAR 0 10
44431: PUSH
44432: LD_VAR 0 1
44436: PPUSH
44437: CALL_OW 478
44441: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44442: LD_VAR 0 9
44446: NOT
44447: PUSH
44448: LD_VAR 0 11
44452: NOT
44453: OR
44454: PUSH
44455: LD_VAR 0 12
44459: NOT
44460: OR
44461: PUSH
44462: LD_VAR 0 10
44466: NOT
44467: OR
44468: IFFALSE 44503
// begin result := [ chassis , engine , control , weapon ] ;
44470: LD_ADDR_VAR 0 6
44474: PUSH
44475: LD_VAR 0 2
44479: PUSH
44480: LD_VAR 0 3
44484: PUSH
44485: LD_VAR 0 4
44489: PUSH
44490: LD_VAR 0 5
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
// exit ;
44501: GO 44794
// end ; if not chassis in _chassis then
44503: LD_VAR 0 2
44507: PUSH
44508: LD_VAR 0 9
44512: IN
44513: NOT
44514: IFFALSE 44540
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44516: LD_ADDR_VAR 0 2
44520: PUSH
44521: LD_VAR 0 9
44525: PUSH
44526: LD_INT 1
44528: PPUSH
44529: LD_VAR 0 9
44533: PPUSH
44534: CALL_OW 12
44538: ARRAY
44539: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44540: LD_VAR 0 2
44544: PPUSH
44545: LD_VAR 0 3
44549: PPUSH
44550: CALL 44799 0 2
44554: NOT
44555: IFFALSE 44614
// repeat engine := _engine [ 1 ] ;
44557: LD_ADDR_VAR 0 3
44561: PUSH
44562: LD_VAR 0 11
44566: PUSH
44567: LD_INT 1
44569: ARRAY
44570: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44571: LD_ADDR_VAR 0 11
44575: PUSH
44576: LD_VAR 0 11
44580: PPUSH
44581: LD_INT 1
44583: PPUSH
44584: CALL_OW 3
44588: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44589: LD_VAR 0 2
44593: PPUSH
44594: LD_VAR 0 3
44598: PPUSH
44599: CALL 44799 0 2
44603: PUSH
44604: LD_VAR 0 11
44608: PUSH
44609: EMPTY
44610: EQUAL
44611: OR
44612: IFFALSE 44557
// if not control in _control then
44614: LD_VAR 0 4
44618: PUSH
44619: LD_VAR 0 12
44623: IN
44624: NOT
44625: IFFALSE 44651
// control := _control [ rand ( 1 , _control ) ] ;
44627: LD_ADDR_VAR 0 4
44631: PUSH
44632: LD_VAR 0 12
44636: PUSH
44637: LD_INT 1
44639: PPUSH
44640: LD_VAR 0 12
44644: PPUSH
44645: CALL_OW 12
44649: ARRAY
44650: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44651: LD_VAR 0 2
44655: PPUSH
44656: LD_VAR 0 5
44660: PPUSH
44661: CALL 45019 0 2
44665: NOT
44666: IFFALSE 44725
// repeat weapon := _weapon [ 1 ] ;
44668: LD_ADDR_VAR 0 5
44672: PUSH
44673: LD_VAR 0 10
44677: PUSH
44678: LD_INT 1
44680: ARRAY
44681: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44682: LD_ADDR_VAR 0 10
44686: PUSH
44687: LD_VAR 0 10
44691: PPUSH
44692: LD_INT 1
44694: PPUSH
44695: CALL_OW 3
44699: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44700: LD_VAR 0 2
44704: PPUSH
44705: LD_VAR 0 5
44709: PPUSH
44710: CALL 45019 0 2
44714: PUSH
44715: LD_VAR 0 10
44719: PUSH
44720: EMPTY
44721: EQUAL
44722: OR
44723: IFFALSE 44668
// result := [ ] ;
44725: LD_ADDR_VAR 0 6
44729: PUSH
44730: EMPTY
44731: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44732: LD_VAR 0 1
44736: PPUSH
44737: LD_VAR 0 2
44741: PPUSH
44742: LD_VAR 0 3
44746: PPUSH
44747: LD_VAR 0 4
44751: PPUSH
44752: LD_VAR 0 5
44756: PPUSH
44757: CALL_OW 448
44761: IFFALSE 44794
// result := [ chassis , engine , control , weapon ] ;
44763: LD_ADDR_VAR 0 6
44767: PUSH
44768: LD_VAR 0 2
44772: PUSH
44773: LD_VAR 0 3
44777: PUSH
44778: LD_VAR 0 4
44782: PUSH
44783: LD_VAR 0 5
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// end ;
44794: LD_VAR 0 6
44798: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44799: LD_INT 0
44801: PPUSH
// if not chassis or not engine then
44802: LD_VAR 0 1
44806: NOT
44807: PUSH
44808: LD_VAR 0 2
44812: NOT
44813: OR
44814: IFFALSE 44818
// exit ;
44816: GO 45014
// case engine of engine_solar :
44818: LD_VAR 0 2
44822: PUSH
44823: LD_INT 2
44825: DOUBLE
44826: EQUAL
44827: IFTRUE 44831
44829: GO 44869
44831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_INT 11
44839: PUSH
44840: LD_INT 12
44842: PUSH
44843: LD_INT 13
44845: PUSH
44846: LD_INT 14
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: ST_TO_ADDR
44867: GO 44998
44869: LD_INT 1
44871: DOUBLE
44872: EQUAL
44873: IFTRUE 44877
44875: GO 44939
44877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44878: LD_ADDR_VAR 0 3
44882: PUSH
44883: LD_INT 11
44885: PUSH
44886: LD_INT 12
44888: PUSH
44889: LD_INT 13
44891: PUSH
44892: LD_INT 14
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: LD_INT 4
44906: PUSH
44907: LD_INT 5
44909: PUSH
44910: LD_INT 21
44912: PUSH
44913: LD_INT 23
44915: PUSH
44916: LD_INT 22
44918: PUSH
44919: LD_INT 24
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
44937: GO 44998
44939: LD_INT 3
44941: DOUBLE
44942: EQUAL
44943: IFTRUE 44947
44945: GO 44997
44947: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44948: LD_ADDR_VAR 0 3
44952: PUSH
44953: LD_INT 13
44955: PUSH
44956: LD_INT 14
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: LD_INT 5
44970: PUSH
44971: LD_INT 21
44973: PUSH
44974: LD_INT 22
44976: PUSH
44977: LD_INT 23
44979: PUSH
44980: LD_INT 24
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: ST_TO_ADDR
44995: GO 44998
44997: POP
// result := ( chassis in result ) ;
44998: LD_ADDR_VAR 0 3
45002: PUSH
45003: LD_VAR 0 1
45007: PUSH
45008: LD_VAR 0 3
45012: IN
45013: ST_TO_ADDR
// end ;
45014: LD_VAR 0 3
45018: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45019: LD_INT 0
45021: PPUSH
// if not chassis or not weapon then
45022: LD_VAR 0 1
45026: NOT
45027: PUSH
45028: LD_VAR 0 2
45032: NOT
45033: OR
45034: IFFALSE 45038
// exit ;
45036: GO 46098
// case weapon of us_machine_gun :
45038: LD_VAR 0 2
45042: PUSH
45043: LD_INT 2
45045: DOUBLE
45046: EQUAL
45047: IFTRUE 45051
45049: GO 45081
45051: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45052: LD_ADDR_VAR 0 3
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: LD_INT 4
45068: PUSH
45069: LD_INT 5
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
45079: GO 46082
45081: LD_INT 3
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45119
45089: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 4
45106: PUSH
45107: LD_INT 5
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
45117: GO 46082
45119: LD_INT 11
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45157
45127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45128: LD_ADDR_VAR 0 3
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: LD_INT 4
45144: PUSH
45145: LD_INT 5
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: ST_TO_ADDR
45155: GO 46082
45157: LD_INT 4
45159: DOUBLE
45160: EQUAL
45161: IFTRUE 45165
45163: GO 45191
45165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45166: LD_ADDR_VAR 0 3
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 3
45176: PUSH
45177: LD_INT 4
45179: PUSH
45180: LD_INT 5
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: ST_TO_ADDR
45189: GO 46082
45191: LD_INT 5
45193: DOUBLE
45194: EQUAL
45195: IFTRUE 45199
45197: GO 45225
45199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45200: LD_ADDR_VAR 0 3
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 3
45210: PUSH
45211: LD_INT 4
45213: PUSH
45214: LD_INT 5
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
45223: GO 46082
45225: LD_INT 9
45227: DOUBLE
45228: EQUAL
45229: IFTRUE 45233
45231: GO 45259
45233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45234: LD_ADDR_VAR 0 3
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: LD_INT 4
45247: PUSH
45248: LD_INT 5
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: ST_TO_ADDR
45257: GO 46082
45259: LD_INT 7
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45267
45265: GO 45293
45267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45268: LD_ADDR_VAR 0 3
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: LD_INT 4
45281: PUSH
45282: LD_INT 5
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
45291: GO 46082
45293: LD_INT 12
45295: DOUBLE
45296: EQUAL
45297: IFTRUE 45301
45299: GO 45327
45301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45302: LD_ADDR_VAR 0 3
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: LD_INT 4
45315: PUSH
45316: LD_INT 5
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
45325: GO 46082
45327: LD_INT 13
45329: DOUBLE
45330: EQUAL
45331: IFTRUE 45335
45333: GO 45361
45335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45336: LD_ADDR_VAR 0 3
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: LD_INT 4
45349: PUSH
45350: LD_INT 5
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: ST_TO_ADDR
45359: GO 46082
45361: LD_INT 14
45363: DOUBLE
45364: EQUAL
45365: IFTRUE 45369
45367: GO 45387
45369: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45370: LD_ADDR_VAR 0 3
45374: PUSH
45375: LD_INT 4
45377: PUSH
45378: LD_INT 5
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: ST_TO_ADDR
45385: GO 46082
45387: LD_INT 6
45389: DOUBLE
45390: EQUAL
45391: IFTRUE 45395
45393: GO 45413
45395: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45396: LD_ADDR_VAR 0 3
45400: PUSH
45401: LD_INT 4
45403: PUSH
45404: LD_INT 5
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: ST_TO_ADDR
45411: GO 46082
45413: LD_INT 10
45415: DOUBLE
45416: EQUAL
45417: IFTRUE 45421
45419: GO 45439
45421: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45422: LD_ADDR_VAR 0 3
45426: PUSH
45427: LD_INT 4
45429: PUSH
45430: LD_INT 5
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: ST_TO_ADDR
45437: GO 46082
45439: LD_INT 22
45441: DOUBLE
45442: EQUAL
45443: IFTRUE 45447
45445: GO 45473
45447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45448: LD_ADDR_VAR 0 3
45452: PUSH
45453: LD_INT 11
45455: PUSH
45456: LD_INT 12
45458: PUSH
45459: LD_INT 13
45461: PUSH
45462: LD_INT 14
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: ST_TO_ADDR
45471: GO 46082
45473: LD_INT 23
45475: DOUBLE
45476: EQUAL
45477: IFTRUE 45481
45479: GO 45507
45481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45482: LD_ADDR_VAR 0 3
45486: PUSH
45487: LD_INT 11
45489: PUSH
45490: LD_INT 12
45492: PUSH
45493: LD_INT 13
45495: PUSH
45496: LD_INT 14
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: ST_TO_ADDR
45505: GO 46082
45507: LD_INT 24
45509: DOUBLE
45510: EQUAL
45511: IFTRUE 45515
45513: GO 45541
45515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45516: LD_ADDR_VAR 0 3
45520: PUSH
45521: LD_INT 11
45523: PUSH
45524: LD_INT 12
45526: PUSH
45527: LD_INT 13
45529: PUSH
45530: LD_INT 14
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
45539: GO 46082
45541: LD_INT 30
45543: DOUBLE
45544: EQUAL
45545: IFTRUE 45549
45547: GO 45575
45549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45550: LD_ADDR_VAR 0 3
45554: PUSH
45555: LD_INT 11
45557: PUSH
45558: LD_INT 12
45560: PUSH
45561: LD_INT 13
45563: PUSH
45564: LD_INT 14
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: ST_TO_ADDR
45573: GO 46082
45575: LD_INT 25
45577: DOUBLE
45578: EQUAL
45579: IFTRUE 45583
45581: GO 45601
45583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45584: LD_ADDR_VAR 0 3
45588: PUSH
45589: LD_INT 13
45591: PUSH
45592: LD_INT 14
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: ST_TO_ADDR
45599: GO 46082
45601: LD_INT 27
45603: DOUBLE
45604: EQUAL
45605: IFTRUE 45609
45607: GO 45627
45609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45610: LD_ADDR_VAR 0 3
45614: PUSH
45615: LD_INT 13
45617: PUSH
45618: LD_INT 14
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: ST_TO_ADDR
45625: GO 46082
45627: LD_INT 92
45629: DOUBLE
45630: EQUAL
45631: IFTRUE 45635
45633: GO 45661
45635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45636: LD_ADDR_VAR 0 3
45640: PUSH
45641: LD_INT 11
45643: PUSH
45644: LD_INT 12
45646: PUSH
45647: LD_INT 13
45649: PUSH
45650: LD_INT 14
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: ST_TO_ADDR
45659: GO 46082
45661: LD_INT 28
45663: DOUBLE
45664: EQUAL
45665: IFTRUE 45669
45667: GO 45687
45669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45670: LD_ADDR_VAR 0 3
45674: PUSH
45675: LD_INT 13
45677: PUSH
45678: LD_INT 14
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: ST_TO_ADDR
45685: GO 46082
45687: LD_INT 29
45689: DOUBLE
45690: EQUAL
45691: IFTRUE 45695
45693: GO 45713
45695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45696: LD_ADDR_VAR 0 3
45700: PUSH
45701: LD_INT 13
45703: PUSH
45704: LD_INT 14
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: ST_TO_ADDR
45711: GO 46082
45713: LD_INT 31
45715: DOUBLE
45716: EQUAL
45717: IFTRUE 45721
45719: GO 45739
45721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45722: LD_ADDR_VAR 0 3
45726: PUSH
45727: LD_INT 13
45729: PUSH
45730: LD_INT 14
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: ST_TO_ADDR
45737: GO 46082
45739: LD_INT 26
45741: DOUBLE
45742: EQUAL
45743: IFTRUE 45747
45745: GO 45765
45747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45748: LD_ADDR_VAR 0 3
45752: PUSH
45753: LD_INT 13
45755: PUSH
45756: LD_INT 14
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: ST_TO_ADDR
45763: GO 46082
45765: LD_INT 42
45767: DOUBLE
45768: EQUAL
45769: IFTRUE 45773
45771: GO 45799
45773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45774: LD_ADDR_VAR 0 3
45778: PUSH
45779: LD_INT 21
45781: PUSH
45782: LD_INT 22
45784: PUSH
45785: LD_INT 23
45787: PUSH
45788: LD_INT 24
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
45797: GO 46082
45799: LD_INT 43
45801: DOUBLE
45802: EQUAL
45803: IFTRUE 45807
45805: GO 45833
45807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45808: LD_ADDR_VAR 0 3
45812: PUSH
45813: LD_INT 21
45815: PUSH
45816: LD_INT 22
45818: PUSH
45819: LD_INT 23
45821: PUSH
45822: LD_INT 24
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
45831: GO 46082
45833: LD_INT 44
45835: DOUBLE
45836: EQUAL
45837: IFTRUE 45841
45839: GO 45867
45841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45842: LD_ADDR_VAR 0 3
45846: PUSH
45847: LD_INT 21
45849: PUSH
45850: LD_INT 22
45852: PUSH
45853: LD_INT 23
45855: PUSH
45856: LD_INT 24
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: ST_TO_ADDR
45865: GO 46082
45867: LD_INT 45
45869: DOUBLE
45870: EQUAL
45871: IFTRUE 45875
45873: GO 45901
45875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45876: LD_ADDR_VAR 0 3
45880: PUSH
45881: LD_INT 21
45883: PUSH
45884: LD_INT 22
45886: PUSH
45887: LD_INT 23
45889: PUSH
45890: LD_INT 24
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
45899: GO 46082
45901: LD_INT 49
45903: DOUBLE
45904: EQUAL
45905: IFTRUE 45909
45907: GO 45935
45909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45910: LD_ADDR_VAR 0 3
45914: PUSH
45915: LD_INT 21
45917: PUSH
45918: LD_INT 22
45920: PUSH
45921: LD_INT 23
45923: PUSH
45924: LD_INT 24
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
45933: GO 46082
45935: LD_INT 51
45937: DOUBLE
45938: EQUAL
45939: IFTRUE 45943
45941: GO 45969
45943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45944: LD_ADDR_VAR 0 3
45948: PUSH
45949: LD_INT 21
45951: PUSH
45952: LD_INT 22
45954: PUSH
45955: LD_INT 23
45957: PUSH
45958: LD_INT 24
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
45967: GO 46082
45969: LD_INT 52
45971: DOUBLE
45972: EQUAL
45973: IFTRUE 45977
45975: GO 46003
45977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45978: LD_ADDR_VAR 0 3
45982: PUSH
45983: LD_INT 21
45985: PUSH
45986: LD_INT 22
45988: PUSH
45989: LD_INT 23
45991: PUSH
45992: LD_INT 24
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
46001: GO 46082
46003: LD_INT 53
46005: DOUBLE
46006: EQUAL
46007: IFTRUE 46011
46009: GO 46029
46011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46012: LD_ADDR_VAR 0 3
46016: PUSH
46017: LD_INT 23
46019: PUSH
46020: LD_INT 24
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: ST_TO_ADDR
46027: GO 46082
46029: LD_INT 46
46031: DOUBLE
46032: EQUAL
46033: IFTRUE 46037
46035: GO 46055
46037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46038: LD_ADDR_VAR 0 3
46042: PUSH
46043: LD_INT 23
46045: PUSH
46046: LD_INT 24
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: ST_TO_ADDR
46053: GO 46082
46055: LD_INT 47
46057: DOUBLE
46058: EQUAL
46059: IFTRUE 46063
46061: GO 46081
46063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46064: LD_ADDR_VAR 0 3
46068: PUSH
46069: LD_INT 23
46071: PUSH
46072: LD_INT 24
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: ST_TO_ADDR
46079: GO 46082
46081: POP
// result := ( chassis in result ) ;
46082: LD_ADDR_VAR 0 3
46086: PUSH
46087: LD_VAR 0 1
46091: PUSH
46092: LD_VAR 0 3
46096: IN
46097: ST_TO_ADDR
// end ;
46098: LD_VAR 0 3
46102: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46103: LD_INT 0
46105: PPUSH
46106: PPUSH
46107: PPUSH
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
// result := array ;
46112: LD_ADDR_VAR 0 5
46116: PUSH
46117: LD_VAR 0 1
46121: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46122: LD_VAR 0 1
46126: NOT
46127: PUSH
46128: LD_VAR 0 2
46132: NOT
46133: OR
46134: PUSH
46135: LD_VAR 0 3
46139: NOT
46140: OR
46141: PUSH
46142: LD_VAR 0 2
46146: PUSH
46147: LD_VAR 0 1
46151: GREATER
46152: OR
46153: PUSH
46154: LD_VAR 0 3
46158: PUSH
46159: LD_VAR 0 1
46163: GREATER
46164: OR
46165: IFFALSE 46169
// exit ;
46167: GO 46465
// if direction then
46169: LD_VAR 0 4
46173: IFFALSE 46237
// begin d := 1 ;
46175: LD_ADDR_VAR 0 9
46179: PUSH
46180: LD_INT 1
46182: ST_TO_ADDR
// if i_from > i_to then
46183: LD_VAR 0 2
46187: PUSH
46188: LD_VAR 0 3
46192: GREATER
46193: IFFALSE 46219
// length := ( array - i_from ) + i_to else
46195: LD_ADDR_VAR 0 11
46199: PUSH
46200: LD_VAR 0 1
46204: PUSH
46205: LD_VAR 0 2
46209: MINUS
46210: PUSH
46211: LD_VAR 0 3
46215: PLUS
46216: ST_TO_ADDR
46217: GO 46235
// length := i_to - i_from ;
46219: LD_ADDR_VAR 0 11
46223: PUSH
46224: LD_VAR 0 3
46228: PUSH
46229: LD_VAR 0 2
46233: MINUS
46234: ST_TO_ADDR
// end else
46235: GO 46298
// begin d := - 1 ;
46237: LD_ADDR_VAR 0 9
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: ST_TO_ADDR
// if i_from > i_to then
46246: LD_VAR 0 2
46250: PUSH
46251: LD_VAR 0 3
46255: GREATER
46256: IFFALSE 46276
// length := i_from - i_to else
46258: LD_ADDR_VAR 0 11
46262: PUSH
46263: LD_VAR 0 2
46267: PUSH
46268: LD_VAR 0 3
46272: MINUS
46273: ST_TO_ADDR
46274: GO 46298
// length := ( array - i_to ) + i_from ;
46276: LD_ADDR_VAR 0 11
46280: PUSH
46281: LD_VAR 0 1
46285: PUSH
46286: LD_VAR 0 3
46290: MINUS
46291: PUSH
46292: LD_VAR 0 2
46296: PLUS
46297: ST_TO_ADDR
// end ; if not length then
46298: LD_VAR 0 11
46302: NOT
46303: IFFALSE 46307
// exit ;
46305: GO 46465
// tmp := array ;
46307: LD_ADDR_VAR 0 10
46311: PUSH
46312: LD_VAR 0 1
46316: ST_TO_ADDR
// for i = 1 to length do
46317: LD_ADDR_VAR 0 6
46321: PUSH
46322: DOUBLE
46323: LD_INT 1
46325: DEC
46326: ST_TO_ADDR
46327: LD_VAR 0 11
46331: PUSH
46332: FOR_TO
46333: IFFALSE 46453
// begin for j = 1 to array do
46335: LD_ADDR_VAR 0 7
46339: PUSH
46340: DOUBLE
46341: LD_INT 1
46343: DEC
46344: ST_TO_ADDR
46345: LD_VAR 0 1
46349: PUSH
46350: FOR_TO
46351: IFFALSE 46439
// begin k := j + d ;
46353: LD_ADDR_VAR 0 8
46357: PUSH
46358: LD_VAR 0 7
46362: PUSH
46363: LD_VAR 0 9
46367: PLUS
46368: ST_TO_ADDR
// if k > array then
46369: LD_VAR 0 8
46373: PUSH
46374: LD_VAR 0 1
46378: GREATER
46379: IFFALSE 46389
// k := 1 ;
46381: LD_ADDR_VAR 0 8
46385: PUSH
46386: LD_INT 1
46388: ST_TO_ADDR
// if not k then
46389: LD_VAR 0 8
46393: NOT
46394: IFFALSE 46406
// k := array ;
46396: LD_ADDR_VAR 0 8
46400: PUSH
46401: LD_VAR 0 1
46405: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46406: LD_ADDR_VAR 0 10
46410: PUSH
46411: LD_VAR 0 10
46415: PPUSH
46416: LD_VAR 0 8
46420: PPUSH
46421: LD_VAR 0 1
46425: PUSH
46426: LD_VAR 0 7
46430: ARRAY
46431: PPUSH
46432: CALL_OW 1
46436: ST_TO_ADDR
// end ;
46437: GO 46350
46439: POP
46440: POP
// array := tmp ;
46441: LD_ADDR_VAR 0 1
46445: PUSH
46446: LD_VAR 0 10
46450: ST_TO_ADDR
// end ;
46451: GO 46332
46453: POP
46454: POP
// result := array ;
46455: LD_ADDR_VAR 0 5
46459: PUSH
46460: LD_VAR 0 1
46464: ST_TO_ADDR
// end ;
46465: LD_VAR 0 5
46469: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46470: LD_INT 0
46472: PPUSH
46473: PPUSH
// result := 0 ;
46474: LD_ADDR_VAR 0 3
46478: PUSH
46479: LD_INT 0
46481: ST_TO_ADDR
// if not array or not value in array then
46482: LD_VAR 0 1
46486: NOT
46487: PUSH
46488: LD_VAR 0 2
46492: PUSH
46493: LD_VAR 0 1
46497: IN
46498: NOT
46499: OR
46500: IFFALSE 46504
// exit ;
46502: GO 46558
// for i = 1 to array do
46504: LD_ADDR_VAR 0 4
46508: PUSH
46509: DOUBLE
46510: LD_INT 1
46512: DEC
46513: ST_TO_ADDR
46514: LD_VAR 0 1
46518: PUSH
46519: FOR_TO
46520: IFFALSE 46556
// if value = array [ i ] then
46522: LD_VAR 0 2
46526: PUSH
46527: LD_VAR 0 1
46531: PUSH
46532: LD_VAR 0 4
46536: ARRAY
46537: EQUAL
46538: IFFALSE 46554
// begin result := i ;
46540: LD_ADDR_VAR 0 3
46544: PUSH
46545: LD_VAR 0 4
46549: ST_TO_ADDR
// exit ;
46550: POP
46551: POP
46552: GO 46558
// end ;
46554: GO 46519
46556: POP
46557: POP
// end ;
46558: LD_VAR 0 3
46562: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46563: LD_INT 0
46565: PPUSH
// vc_chassis := chassis ;
46566: LD_ADDR_OWVAR 37
46570: PUSH
46571: LD_VAR 0 1
46575: ST_TO_ADDR
// vc_engine := engine ;
46576: LD_ADDR_OWVAR 39
46580: PUSH
46581: LD_VAR 0 2
46585: ST_TO_ADDR
// vc_control := control ;
46586: LD_ADDR_OWVAR 38
46590: PUSH
46591: LD_VAR 0 3
46595: ST_TO_ADDR
// vc_weapon := weapon ;
46596: LD_ADDR_OWVAR 40
46600: PUSH
46601: LD_VAR 0 4
46605: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46606: LD_ADDR_OWVAR 41
46610: PUSH
46611: LD_VAR 0 5
46615: ST_TO_ADDR
// end ;
46616: LD_VAR 0 6
46620: RET
// export function WantPlant ( unit ) ; var task ; begin
46621: LD_INT 0
46623: PPUSH
46624: PPUSH
// result := false ;
46625: LD_ADDR_VAR 0 2
46629: PUSH
46630: LD_INT 0
46632: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46633: LD_ADDR_VAR 0 3
46637: PUSH
46638: LD_VAR 0 1
46642: PPUSH
46643: CALL_OW 437
46647: ST_TO_ADDR
// if task then
46648: LD_VAR 0 3
46652: IFFALSE 46680
// if task [ 1 ] [ 1 ] = p then
46654: LD_VAR 0 3
46658: PUSH
46659: LD_INT 1
46661: ARRAY
46662: PUSH
46663: LD_INT 1
46665: ARRAY
46666: PUSH
46667: LD_STRING p
46669: EQUAL
46670: IFFALSE 46680
// result := true ;
46672: LD_ADDR_VAR 0 2
46676: PUSH
46677: LD_INT 1
46679: ST_TO_ADDR
// end ;
46680: LD_VAR 0 2
46684: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46685: LD_INT 0
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
// if pos < 1 then
46691: LD_VAR 0 2
46695: PUSH
46696: LD_INT 1
46698: LESS
46699: IFFALSE 46703
// exit ;
46701: GO 47006
// if pos = 1 then
46703: LD_VAR 0 2
46707: PUSH
46708: LD_INT 1
46710: EQUAL
46711: IFFALSE 46744
// result := Replace ( arr , pos [ 1 ] , value ) else
46713: LD_ADDR_VAR 0 4
46717: PUSH
46718: LD_VAR 0 1
46722: PPUSH
46723: LD_VAR 0 2
46727: PUSH
46728: LD_INT 1
46730: ARRAY
46731: PPUSH
46732: LD_VAR 0 3
46736: PPUSH
46737: CALL_OW 1
46741: ST_TO_ADDR
46742: GO 47006
// begin tmp := arr ;
46744: LD_ADDR_VAR 0 6
46748: PUSH
46749: LD_VAR 0 1
46753: ST_TO_ADDR
// s_arr := [ tmp ] ;
46754: LD_ADDR_VAR 0 7
46758: PUSH
46759: LD_VAR 0 6
46763: PUSH
46764: EMPTY
46765: LIST
46766: ST_TO_ADDR
// for i = 1 to pos - 1 do
46767: LD_ADDR_VAR 0 5
46771: PUSH
46772: DOUBLE
46773: LD_INT 1
46775: DEC
46776: ST_TO_ADDR
46777: LD_VAR 0 2
46781: PUSH
46782: LD_INT 1
46784: MINUS
46785: PUSH
46786: FOR_TO
46787: IFFALSE 46832
// begin tmp := tmp [ pos [ i ] ] ;
46789: LD_ADDR_VAR 0 6
46793: PUSH
46794: LD_VAR 0 6
46798: PUSH
46799: LD_VAR 0 2
46803: PUSH
46804: LD_VAR 0 5
46808: ARRAY
46809: ARRAY
46810: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46811: LD_ADDR_VAR 0 7
46815: PUSH
46816: LD_VAR 0 7
46820: PUSH
46821: LD_VAR 0 6
46825: PUSH
46826: EMPTY
46827: LIST
46828: ADD
46829: ST_TO_ADDR
// end ;
46830: GO 46786
46832: POP
46833: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46834: LD_ADDR_VAR 0 6
46838: PUSH
46839: LD_VAR 0 6
46843: PPUSH
46844: LD_VAR 0 2
46848: PUSH
46849: LD_VAR 0 2
46853: ARRAY
46854: PPUSH
46855: LD_VAR 0 3
46859: PPUSH
46860: CALL_OW 1
46864: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46865: LD_ADDR_VAR 0 7
46869: PUSH
46870: LD_VAR 0 7
46874: PPUSH
46875: LD_VAR 0 7
46879: PPUSH
46880: LD_VAR 0 6
46884: PPUSH
46885: CALL_OW 1
46889: ST_TO_ADDR
// for i = s_arr downto 2 do
46890: LD_ADDR_VAR 0 5
46894: PUSH
46895: DOUBLE
46896: LD_VAR 0 7
46900: INC
46901: ST_TO_ADDR
46902: LD_INT 2
46904: PUSH
46905: FOR_DOWNTO
46906: IFFALSE 46990
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46908: LD_ADDR_VAR 0 6
46912: PUSH
46913: LD_VAR 0 7
46917: PUSH
46918: LD_VAR 0 5
46922: PUSH
46923: LD_INT 1
46925: MINUS
46926: ARRAY
46927: PPUSH
46928: LD_VAR 0 2
46932: PUSH
46933: LD_VAR 0 5
46937: PUSH
46938: LD_INT 1
46940: MINUS
46941: ARRAY
46942: PPUSH
46943: LD_VAR 0 7
46947: PUSH
46948: LD_VAR 0 5
46952: ARRAY
46953: PPUSH
46954: CALL_OW 1
46958: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46959: LD_ADDR_VAR 0 7
46963: PUSH
46964: LD_VAR 0 7
46968: PPUSH
46969: LD_VAR 0 5
46973: PUSH
46974: LD_INT 1
46976: MINUS
46977: PPUSH
46978: LD_VAR 0 6
46982: PPUSH
46983: CALL_OW 1
46987: ST_TO_ADDR
// end ;
46988: GO 46905
46990: POP
46991: POP
// result := s_arr [ 1 ] ;
46992: LD_ADDR_VAR 0 4
46996: PUSH
46997: LD_VAR 0 7
47001: PUSH
47002: LD_INT 1
47004: ARRAY
47005: ST_TO_ADDR
// end ; end ;
47006: LD_VAR 0 4
47010: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47011: LD_INT 0
47013: PPUSH
47014: PPUSH
// if not list then
47015: LD_VAR 0 1
47019: NOT
47020: IFFALSE 47024
// exit ;
47022: GO 47115
// i := list [ pos1 ] ;
47024: LD_ADDR_VAR 0 5
47028: PUSH
47029: LD_VAR 0 1
47033: PUSH
47034: LD_VAR 0 2
47038: ARRAY
47039: ST_TO_ADDR
// if not i then
47040: LD_VAR 0 5
47044: NOT
47045: IFFALSE 47049
// exit ;
47047: GO 47115
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47049: LD_ADDR_VAR 0 1
47053: PUSH
47054: LD_VAR 0 1
47058: PPUSH
47059: LD_VAR 0 2
47063: PPUSH
47064: LD_VAR 0 1
47068: PUSH
47069: LD_VAR 0 3
47073: ARRAY
47074: PPUSH
47075: CALL_OW 1
47079: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47080: LD_ADDR_VAR 0 1
47084: PUSH
47085: LD_VAR 0 1
47089: PPUSH
47090: LD_VAR 0 3
47094: PPUSH
47095: LD_VAR 0 5
47099: PPUSH
47100: CALL_OW 1
47104: ST_TO_ADDR
// result := list ;
47105: LD_ADDR_VAR 0 4
47109: PUSH
47110: LD_VAR 0 1
47114: ST_TO_ADDR
// end ;
47115: LD_VAR 0 4
47119: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47120: LD_INT 0
47122: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47123: LD_ADDR_VAR 0 5
47127: PUSH
47128: LD_VAR 0 1
47132: PPUSH
47133: CALL_OW 250
47137: PPUSH
47138: LD_VAR 0 1
47142: PPUSH
47143: CALL_OW 251
47147: PPUSH
47148: LD_VAR 0 2
47152: PPUSH
47153: LD_VAR 0 3
47157: PPUSH
47158: LD_VAR 0 4
47162: PPUSH
47163: CALL 47541 0 5
47167: ST_TO_ADDR
// end ;
47168: LD_VAR 0 5
47172: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47173: LD_INT 0
47175: PPUSH
47176: PPUSH
47177: PPUSH
47178: PPUSH
// if not list or not unit then
47179: LD_VAR 0 2
47183: NOT
47184: PUSH
47185: LD_VAR 0 1
47189: NOT
47190: OR
47191: IFFALSE 47195
// exit ;
47193: GO 47536
// result := [ ] ;
47195: LD_ADDR_VAR 0 5
47199: PUSH
47200: EMPTY
47201: ST_TO_ADDR
// for i in list do
47202: LD_ADDR_VAR 0 6
47206: PUSH
47207: LD_VAR 0 2
47211: PUSH
47212: FOR_IN
47213: IFFALSE 47431
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47215: LD_ADDR_VAR 0 8
47219: PUSH
47220: LD_VAR 0 1
47224: PPUSH
47225: LD_VAR 0 6
47229: PUSH
47230: LD_INT 1
47232: ARRAY
47233: PPUSH
47234: LD_VAR 0 6
47238: PUSH
47239: LD_INT 2
47241: ARRAY
47242: PPUSH
47243: CALL_OW 297
47247: ST_TO_ADDR
// if not Count ( result ) then
47248: LD_VAR 0 5
47252: PPUSH
47253: CALL 43825 0 1
47257: NOT
47258: IFFALSE 47291
// begin result := Join ( result , [ i , tmp ] ) ;
47260: LD_ADDR_VAR 0 5
47264: PUSH
47265: LD_VAR 0 5
47269: PPUSH
47270: LD_VAR 0 6
47274: PUSH
47275: LD_VAR 0 8
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PPUSH
47284: CALL 79414 0 2
47288: ST_TO_ADDR
// continue ;
47289: GO 47212
// end ; if result [ result ] [ 2 ] <= tmp then
47291: LD_VAR 0 5
47295: PUSH
47296: LD_VAR 0 5
47300: ARRAY
47301: PUSH
47302: LD_INT 2
47304: ARRAY
47305: PUSH
47306: LD_VAR 0 8
47310: LESSEQUAL
47311: IFFALSE 47344
// result := Join ( result , [ i , tmp ] ) else
47313: LD_ADDR_VAR 0 5
47317: PUSH
47318: LD_VAR 0 5
47322: PPUSH
47323: LD_VAR 0 6
47327: PUSH
47328: LD_VAR 0 8
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PPUSH
47337: CALL 79414 0 2
47341: ST_TO_ADDR
47342: GO 47429
// begin for j := 1 to Count ( result ) do
47344: LD_ADDR_VAR 0 7
47348: PUSH
47349: DOUBLE
47350: LD_INT 1
47352: DEC
47353: ST_TO_ADDR
47354: LD_VAR 0 5
47358: PPUSH
47359: CALL 43825 0 1
47363: PUSH
47364: FOR_TO
47365: IFFALSE 47427
// begin if tmp < result [ j ] [ 2 ] then
47367: LD_VAR 0 8
47371: PUSH
47372: LD_VAR 0 5
47376: PUSH
47377: LD_VAR 0 7
47381: ARRAY
47382: PUSH
47383: LD_INT 2
47385: ARRAY
47386: LESS
47387: IFFALSE 47425
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47389: LD_ADDR_VAR 0 5
47393: PUSH
47394: LD_VAR 0 5
47398: PPUSH
47399: LD_VAR 0 7
47403: PPUSH
47404: LD_VAR 0 6
47408: PUSH
47409: LD_VAR 0 8
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PPUSH
47418: CALL_OW 2
47422: ST_TO_ADDR
// break ;
47423: GO 47427
// end ; end ;
47425: GO 47364
47427: POP
47428: POP
// end ; end ;
47429: GO 47212
47431: POP
47432: POP
// if result and not asc then
47433: LD_VAR 0 5
47437: PUSH
47438: LD_VAR 0 3
47442: NOT
47443: AND
47444: IFFALSE 47461
// result := ReverseArray ( result ) ;
47446: LD_ADDR_VAR 0 5
47450: PUSH
47451: LD_VAR 0 5
47455: PPUSH
47456: CALL 74701 0 1
47460: ST_TO_ADDR
// tmp := [ ] ;
47461: LD_ADDR_VAR 0 8
47465: PUSH
47466: EMPTY
47467: ST_TO_ADDR
// if mode then
47468: LD_VAR 0 4
47472: IFFALSE 47536
// begin for i := 1 to result do
47474: LD_ADDR_VAR 0 6
47478: PUSH
47479: DOUBLE
47480: LD_INT 1
47482: DEC
47483: ST_TO_ADDR
47484: LD_VAR 0 5
47488: PUSH
47489: FOR_TO
47490: IFFALSE 47524
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47492: LD_ADDR_VAR 0 8
47496: PUSH
47497: LD_VAR 0 8
47501: PPUSH
47502: LD_VAR 0 5
47506: PUSH
47507: LD_VAR 0 6
47511: ARRAY
47512: PUSH
47513: LD_INT 1
47515: ARRAY
47516: PPUSH
47517: CALL 79414 0 2
47521: ST_TO_ADDR
47522: GO 47489
47524: POP
47525: POP
// result := tmp ;
47526: LD_ADDR_VAR 0 5
47530: PUSH
47531: LD_VAR 0 8
47535: ST_TO_ADDR
// end ; end ;
47536: LD_VAR 0 5
47540: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47541: LD_INT 0
47543: PPUSH
47544: PPUSH
47545: PPUSH
47546: PPUSH
// if not list then
47547: LD_VAR 0 3
47551: NOT
47552: IFFALSE 47556
// exit ;
47554: GO 47944
// result := [ ] ;
47556: LD_ADDR_VAR 0 6
47560: PUSH
47561: EMPTY
47562: ST_TO_ADDR
// for i in list do
47563: LD_ADDR_VAR 0 7
47567: PUSH
47568: LD_VAR 0 3
47572: PUSH
47573: FOR_IN
47574: IFFALSE 47776
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47576: LD_ADDR_VAR 0 9
47580: PUSH
47581: LD_VAR 0 7
47585: PPUSH
47586: LD_VAR 0 1
47590: PPUSH
47591: LD_VAR 0 2
47595: PPUSH
47596: CALL_OW 297
47600: ST_TO_ADDR
// if not result then
47601: LD_VAR 0 6
47605: NOT
47606: IFFALSE 47632
// result := [ [ i , tmp ] ] else
47608: LD_ADDR_VAR 0 6
47612: PUSH
47613: LD_VAR 0 7
47617: PUSH
47618: LD_VAR 0 9
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: ST_TO_ADDR
47630: GO 47774
// begin if result [ result ] [ 2 ] < tmp then
47632: LD_VAR 0 6
47636: PUSH
47637: LD_VAR 0 6
47641: ARRAY
47642: PUSH
47643: LD_INT 2
47645: ARRAY
47646: PUSH
47647: LD_VAR 0 9
47651: LESS
47652: IFFALSE 47694
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47654: LD_ADDR_VAR 0 6
47658: PUSH
47659: LD_VAR 0 6
47663: PPUSH
47664: LD_VAR 0 6
47668: PUSH
47669: LD_INT 1
47671: PLUS
47672: PPUSH
47673: LD_VAR 0 7
47677: PUSH
47678: LD_VAR 0 9
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PPUSH
47687: CALL_OW 2
47691: ST_TO_ADDR
47692: GO 47774
// for j = 1 to result do
47694: LD_ADDR_VAR 0 8
47698: PUSH
47699: DOUBLE
47700: LD_INT 1
47702: DEC
47703: ST_TO_ADDR
47704: LD_VAR 0 6
47708: PUSH
47709: FOR_TO
47710: IFFALSE 47772
// begin if tmp < result [ j ] [ 2 ] then
47712: LD_VAR 0 9
47716: PUSH
47717: LD_VAR 0 6
47721: PUSH
47722: LD_VAR 0 8
47726: ARRAY
47727: PUSH
47728: LD_INT 2
47730: ARRAY
47731: LESS
47732: IFFALSE 47770
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47734: LD_ADDR_VAR 0 6
47738: PUSH
47739: LD_VAR 0 6
47743: PPUSH
47744: LD_VAR 0 8
47748: PPUSH
47749: LD_VAR 0 7
47753: PUSH
47754: LD_VAR 0 9
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PPUSH
47763: CALL_OW 2
47767: ST_TO_ADDR
// break ;
47768: GO 47772
// end ; end ;
47770: GO 47709
47772: POP
47773: POP
// end ; end ;
47774: GO 47573
47776: POP
47777: POP
// if result and not asc then
47778: LD_VAR 0 6
47782: PUSH
47783: LD_VAR 0 4
47787: NOT
47788: AND
47789: IFFALSE 47864
// begin tmp := result ;
47791: LD_ADDR_VAR 0 9
47795: PUSH
47796: LD_VAR 0 6
47800: ST_TO_ADDR
// for i = tmp downto 1 do
47801: LD_ADDR_VAR 0 7
47805: PUSH
47806: DOUBLE
47807: LD_VAR 0 9
47811: INC
47812: ST_TO_ADDR
47813: LD_INT 1
47815: PUSH
47816: FOR_DOWNTO
47817: IFFALSE 47862
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47819: LD_ADDR_VAR 0 6
47823: PUSH
47824: LD_VAR 0 6
47828: PPUSH
47829: LD_VAR 0 9
47833: PUSH
47834: LD_VAR 0 7
47838: MINUS
47839: PUSH
47840: LD_INT 1
47842: PLUS
47843: PPUSH
47844: LD_VAR 0 9
47848: PUSH
47849: LD_VAR 0 7
47853: ARRAY
47854: PPUSH
47855: CALL_OW 1
47859: ST_TO_ADDR
47860: GO 47816
47862: POP
47863: POP
// end ; tmp := [ ] ;
47864: LD_ADDR_VAR 0 9
47868: PUSH
47869: EMPTY
47870: ST_TO_ADDR
// if mode then
47871: LD_VAR 0 5
47875: IFFALSE 47944
// begin for i = 1 to result do
47877: LD_ADDR_VAR 0 7
47881: PUSH
47882: DOUBLE
47883: LD_INT 1
47885: DEC
47886: ST_TO_ADDR
47887: LD_VAR 0 6
47891: PUSH
47892: FOR_TO
47893: IFFALSE 47932
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47895: LD_ADDR_VAR 0 9
47899: PUSH
47900: LD_VAR 0 9
47904: PPUSH
47905: LD_VAR 0 7
47909: PPUSH
47910: LD_VAR 0 6
47914: PUSH
47915: LD_VAR 0 7
47919: ARRAY
47920: PUSH
47921: LD_INT 1
47923: ARRAY
47924: PPUSH
47925: CALL_OW 1
47929: ST_TO_ADDR
47930: GO 47892
47932: POP
47933: POP
// result := tmp ;
47934: LD_ADDR_VAR 0 6
47938: PUSH
47939: LD_VAR 0 9
47943: ST_TO_ADDR
// end ; end ;
47944: LD_VAR 0 6
47948: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47949: LD_INT 0
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
47955: PPUSH
47956: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47957: LD_ADDR_VAR 0 5
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// if not x or not y then
47979: LD_VAR 0 2
47983: NOT
47984: PUSH
47985: LD_VAR 0 3
47989: NOT
47990: OR
47991: IFFALSE 47995
// exit ;
47993: GO 49645
// if not range then
47995: LD_VAR 0 4
47999: NOT
48000: IFFALSE 48010
// range := 10 ;
48002: LD_ADDR_VAR 0 4
48006: PUSH
48007: LD_INT 10
48009: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48010: LD_ADDR_VAR 0 8
48014: PUSH
48015: LD_INT 81
48017: PUSH
48018: LD_VAR 0 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 92
48029: PUSH
48030: LD_VAR 0 2
48034: PUSH
48035: LD_VAR 0 3
48039: PUSH
48040: LD_VAR 0 4
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: LD_INT 21
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: PPUSH
48073: CALL_OW 69
48077: ST_TO_ADDR
// if not tmp then
48078: LD_VAR 0 8
48082: NOT
48083: IFFALSE 48087
// exit ;
48085: GO 49645
// for i in tmp do
48087: LD_ADDR_VAR 0 6
48091: PUSH
48092: LD_VAR 0 8
48096: PUSH
48097: FOR_IN
48098: IFFALSE 49620
// begin points := [ 0 , 0 , 0 ] ;
48100: LD_ADDR_VAR 0 9
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// bpoints := 1 ;
48119: LD_ADDR_VAR 0 10
48123: PUSH
48124: LD_INT 1
48126: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48127: LD_VAR 0 6
48131: PPUSH
48132: CALL_OW 247
48136: PUSH
48137: LD_INT 1
48139: DOUBLE
48140: EQUAL
48141: IFTRUE 48145
48143: GO 48723
48145: POP
// begin if GetClass ( i ) = 1 then
48146: LD_VAR 0 6
48150: PPUSH
48151: CALL_OW 257
48155: PUSH
48156: LD_INT 1
48158: EQUAL
48159: IFFALSE 48180
// points := [ 10 , 5 , 3 ] ;
48161: LD_ADDR_VAR 0 9
48165: PUSH
48166: LD_INT 10
48168: PUSH
48169: LD_INT 5
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48180: LD_VAR 0 6
48184: PPUSH
48185: CALL_OW 257
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: LD_INT 4
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: IN
48204: IFFALSE 48225
// points := [ 3 , 2 , 1 ] ;
48206: LD_ADDR_VAR 0 9
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48225: LD_VAR 0 6
48229: PPUSH
48230: CALL_OW 257
48234: PUSH
48235: LD_INT 5
48237: EQUAL
48238: IFFALSE 48259
// points := [ 130 , 5 , 2 ] ;
48240: LD_ADDR_VAR 0 9
48244: PUSH
48245: LD_INT 130
48247: PUSH
48248: LD_INT 5
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48259: LD_VAR 0 6
48263: PPUSH
48264: CALL_OW 257
48268: PUSH
48269: LD_INT 8
48271: EQUAL
48272: IFFALSE 48293
// points := [ 35 , 35 , 30 ] ;
48274: LD_ADDR_VAR 0 9
48278: PUSH
48279: LD_INT 35
48281: PUSH
48282: LD_INT 35
48284: PUSH
48285: LD_INT 30
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48293: LD_VAR 0 6
48297: PPUSH
48298: CALL_OW 257
48302: PUSH
48303: LD_INT 9
48305: EQUAL
48306: IFFALSE 48327
// points := [ 20 , 55 , 40 ] ;
48308: LD_ADDR_VAR 0 9
48312: PUSH
48313: LD_INT 20
48315: PUSH
48316: LD_INT 55
48318: PUSH
48319: LD_INT 40
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48327: LD_VAR 0 6
48331: PPUSH
48332: CALL_OW 257
48336: PUSH
48337: LD_INT 12
48339: PUSH
48340: LD_INT 16
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: IN
48347: IFFALSE 48368
// points := [ 5 , 3 , 2 ] ;
48349: LD_ADDR_VAR 0 9
48353: PUSH
48354: LD_INT 5
48356: PUSH
48357: LD_INT 3
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48368: LD_VAR 0 6
48372: PPUSH
48373: CALL_OW 257
48377: PUSH
48378: LD_INT 17
48380: EQUAL
48381: IFFALSE 48402
// points := [ 100 , 50 , 75 ] ;
48383: LD_ADDR_VAR 0 9
48387: PUSH
48388: LD_INT 100
48390: PUSH
48391: LD_INT 50
48393: PUSH
48394: LD_INT 75
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48402: LD_VAR 0 6
48406: PPUSH
48407: CALL_OW 257
48411: PUSH
48412: LD_INT 15
48414: EQUAL
48415: IFFALSE 48436
// points := [ 10 , 5 , 3 ] ;
48417: LD_ADDR_VAR 0 9
48421: PUSH
48422: LD_INT 10
48424: PUSH
48425: LD_INT 5
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48436: LD_VAR 0 6
48440: PPUSH
48441: CALL_OW 257
48445: PUSH
48446: LD_INT 14
48448: EQUAL
48449: IFFALSE 48470
// points := [ 10 , 0 , 0 ] ;
48451: LD_ADDR_VAR 0 9
48455: PUSH
48456: LD_INT 10
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48470: LD_VAR 0 6
48474: PPUSH
48475: CALL_OW 257
48479: PUSH
48480: LD_INT 11
48482: EQUAL
48483: IFFALSE 48504
// points := [ 30 , 10 , 5 ] ;
48485: LD_ADDR_VAR 0 9
48489: PUSH
48490: LD_INT 30
48492: PUSH
48493: LD_INT 10
48495: PUSH
48496: LD_INT 5
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48504: LD_VAR 0 1
48508: PPUSH
48509: LD_INT 5
48511: PPUSH
48512: CALL_OW 321
48516: PUSH
48517: LD_INT 2
48519: EQUAL
48520: IFFALSE 48537
// bpoints := bpoints * 1.8 ;
48522: LD_ADDR_VAR 0 10
48526: PUSH
48527: LD_VAR 0 10
48531: PUSH
48532: LD_REAL  1.80000000000000E+0000
48535: MUL
48536: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48537: LD_VAR 0 6
48541: PPUSH
48542: CALL_OW 257
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 3
48555: PUSH
48556: LD_INT 4
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: IN
48565: PUSH
48566: LD_VAR 0 1
48570: PPUSH
48571: LD_INT 51
48573: PPUSH
48574: CALL_OW 321
48578: PUSH
48579: LD_INT 2
48581: EQUAL
48582: AND
48583: IFFALSE 48600
// bpoints := bpoints * 1.2 ;
48585: LD_ADDR_VAR 0 10
48589: PUSH
48590: LD_VAR 0 10
48594: PUSH
48595: LD_REAL  1.20000000000000E+0000
48598: MUL
48599: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48600: LD_VAR 0 6
48604: PPUSH
48605: CALL_OW 257
48609: PUSH
48610: LD_INT 5
48612: PUSH
48613: LD_INT 7
48615: PUSH
48616: LD_INT 9
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: IN
48624: PUSH
48625: LD_VAR 0 1
48629: PPUSH
48630: LD_INT 52
48632: PPUSH
48633: CALL_OW 321
48637: PUSH
48638: LD_INT 2
48640: EQUAL
48641: AND
48642: IFFALSE 48659
// bpoints := bpoints * 1.5 ;
48644: LD_ADDR_VAR 0 10
48648: PUSH
48649: LD_VAR 0 10
48653: PUSH
48654: LD_REAL  1.50000000000000E+0000
48657: MUL
48658: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48659: LD_VAR 0 1
48663: PPUSH
48664: LD_INT 66
48666: PPUSH
48667: CALL_OW 321
48671: PUSH
48672: LD_INT 2
48674: EQUAL
48675: IFFALSE 48692
// bpoints := bpoints * 1.1 ;
48677: LD_ADDR_VAR 0 10
48681: PUSH
48682: LD_VAR 0 10
48686: PUSH
48687: LD_REAL  1.10000000000000E+0000
48690: MUL
48691: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48692: LD_ADDR_VAR 0 10
48696: PUSH
48697: LD_VAR 0 10
48701: PUSH
48702: LD_VAR 0 6
48706: PPUSH
48707: LD_INT 1
48709: PPUSH
48710: CALL_OW 259
48714: PUSH
48715: LD_REAL  1.15000000000000E+0000
48718: MUL
48719: MUL
48720: ST_TO_ADDR
// end ; unit_vehicle :
48721: GO 49549
48723: LD_INT 2
48725: DOUBLE
48726: EQUAL
48727: IFTRUE 48731
48729: GO 49537
48731: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48732: LD_VAR 0 6
48736: PPUSH
48737: CALL_OW 264
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 42
48747: PUSH
48748: LD_INT 24
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: IN
48756: IFFALSE 48777
// points := [ 25 , 5 , 3 ] ;
48758: LD_ADDR_VAR 0 9
48762: PUSH
48763: LD_INT 25
48765: PUSH
48766: LD_INT 5
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48777: LD_VAR 0 6
48781: PPUSH
48782: CALL_OW 264
48786: PUSH
48787: LD_INT 4
48789: PUSH
48790: LD_INT 43
48792: PUSH
48793: LD_INT 25
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: IN
48801: IFFALSE 48822
// points := [ 40 , 15 , 5 ] ;
48803: LD_ADDR_VAR 0 9
48807: PUSH
48808: LD_INT 40
48810: PUSH
48811: LD_INT 15
48813: PUSH
48814: LD_INT 5
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48822: LD_VAR 0 6
48826: PPUSH
48827: CALL_OW 264
48831: PUSH
48832: LD_INT 3
48834: PUSH
48835: LD_INT 23
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: IN
48842: IFFALSE 48863
// points := [ 7 , 25 , 8 ] ;
48844: LD_ADDR_VAR 0 9
48848: PUSH
48849: LD_INT 7
48851: PUSH
48852: LD_INT 25
48854: PUSH
48855: LD_INT 8
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48863: LD_VAR 0 6
48867: PPUSH
48868: CALL_OW 264
48872: PUSH
48873: LD_INT 5
48875: PUSH
48876: LD_INT 27
48878: PUSH
48879: LD_INT 44
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: IN
48887: IFFALSE 48908
// points := [ 14 , 50 , 16 ] ;
48889: LD_ADDR_VAR 0 9
48893: PUSH
48894: LD_INT 14
48896: PUSH
48897: LD_INT 50
48899: PUSH
48900: LD_INT 16
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48908: LD_VAR 0 6
48912: PPUSH
48913: CALL_OW 264
48917: PUSH
48918: LD_INT 6
48920: PUSH
48921: LD_INT 46
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: IN
48928: IFFALSE 48949
// points := [ 32 , 120 , 70 ] ;
48930: LD_ADDR_VAR 0 9
48934: PUSH
48935: LD_INT 32
48937: PUSH
48938: LD_INT 120
48940: PUSH
48941: LD_INT 70
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48949: LD_VAR 0 6
48953: PPUSH
48954: CALL_OW 264
48958: PUSH
48959: LD_INT 7
48961: PUSH
48962: LD_INT 28
48964: PUSH
48965: LD_INT 45
48967: PUSH
48968: LD_INT 92
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: IN
48977: IFFALSE 48998
// points := [ 35 , 20 , 45 ] ;
48979: LD_ADDR_VAR 0 9
48983: PUSH
48984: LD_INT 35
48986: PUSH
48987: LD_INT 20
48989: PUSH
48990: LD_INT 45
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48998: LD_VAR 0 6
49002: PPUSH
49003: CALL_OW 264
49007: PUSH
49008: LD_INT 47
49010: PUSH
49011: EMPTY
49012: LIST
49013: IN
49014: IFFALSE 49035
// points := [ 67 , 45 , 75 ] ;
49016: LD_ADDR_VAR 0 9
49020: PUSH
49021: LD_INT 67
49023: PUSH
49024: LD_INT 45
49026: PUSH
49027: LD_INT 75
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: LIST
49034: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49035: LD_VAR 0 6
49039: PPUSH
49040: CALL_OW 264
49044: PUSH
49045: LD_INT 26
49047: PUSH
49048: EMPTY
49049: LIST
49050: IN
49051: IFFALSE 49072
// points := [ 120 , 30 , 80 ] ;
49053: LD_ADDR_VAR 0 9
49057: PUSH
49058: LD_INT 120
49060: PUSH
49061: LD_INT 30
49063: PUSH
49064: LD_INT 80
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49072: LD_VAR 0 6
49076: PPUSH
49077: CALL_OW 264
49081: PUSH
49082: LD_INT 22
49084: PUSH
49085: EMPTY
49086: LIST
49087: IN
49088: IFFALSE 49109
// points := [ 40 , 1 , 1 ] ;
49090: LD_ADDR_VAR 0 9
49094: PUSH
49095: LD_INT 40
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49109: LD_VAR 0 6
49113: PPUSH
49114: CALL_OW 264
49118: PUSH
49119: LD_INT 29
49121: PUSH
49122: EMPTY
49123: LIST
49124: IN
49125: IFFALSE 49146
// points := [ 70 , 200 , 400 ] ;
49127: LD_ADDR_VAR 0 9
49131: PUSH
49132: LD_INT 70
49134: PUSH
49135: LD_INT 200
49137: PUSH
49138: LD_INT 400
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: LIST
49145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49146: LD_VAR 0 6
49150: PPUSH
49151: CALL_OW 264
49155: PUSH
49156: LD_INT 14
49158: PUSH
49159: LD_INT 53
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: IN
49166: IFFALSE 49187
// points := [ 40 , 10 , 20 ] ;
49168: LD_ADDR_VAR 0 9
49172: PUSH
49173: LD_INT 40
49175: PUSH
49176: LD_INT 10
49178: PUSH
49179: LD_INT 20
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49187: LD_VAR 0 6
49191: PPUSH
49192: CALL_OW 264
49196: PUSH
49197: LD_INT 9
49199: PUSH
49200: EMPTY
49201: LIST
49202: IN
49203: IFFALSE 49224
// points := [ 5 , 70 , 20 ] ;
49205: LD_ADDR_VAR 0 9
49209: PUSH
49210: LD_INT 5
49212: PUSH
49213: LD_INT 70
49215: PUSH
49216: LD_INT 20
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49224: LD_VAR 0 6
49228: PPUSH
49229: CALL_OW 264
49233: PUSH
49234: LD_INT 10
49236: PUSH
49237: EMPTY
49238: LIST
49239: IN
49240: IFFALSE 49261
// points := [ 35 , 110 , 70 ] ;
49242: LD_ADDR_VAR 0 9
49246: PUSH
49247: LD_INT 35
49249: PUSH
49250: LD_INT 110
49252: PUSH
49253: LD_INT 70
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49261: LD_VAR 0 6
49265: PPUSH
49266: CALL_OW 265
49270: PUSH
49271: LD_INT 25
49273: EQUAL
49274: IFFALSE 49295
// points := [ 80 , 65 , 100 ] ;
49276: LD_ADDR_VAR 0 9
49280: PUSH
49281: LD_INT 80
49283: PUSH
49284: LD_INT 65
49286: PUSH
49287: LD_INT 100
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49295: LD_VAR 0 6
49299: PPUSH
49300: CALL_OW 263
49304: PUSH
49305: LD_INT 1
49307: EQUAL
49308: IFFALSE 49343
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49310: LD_ADDR_VAR 0 10
49314: PUSH
49315: LD_VAR 0 10
49319: PUSH
49320: LD_VAR 0 6
49324: PPUSH
49325: CALL_OW 311
49329: PPUSH
49330: LD_INT 3
49332: PPUSH
49333: CALL_OW 259
49337: PUSH
49338: LD_INT 4
49340: MUL
49341: MUL
49342: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49343: LD_VAR 0 6
49347: PPUSH
49348: CALL_OW 263
49352: PUSH
49353: LD_INT 2
49355: EQUAL
49356: IFFALSE 49407
// begin j := IsControledBy ( i ) ;
49358: LD_ADDR_VAR 0 7
49362: PUSH
49363: LD_VAR 0 6
49367: PPUSH
49368: CALL_OW 312
49372: ST_TO_ADDR
// if j then
49373: LD_VAR 0 7
49377: IFFALSE 49407
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49379: LD_ADDR_VAR 0 10
49383: PUSH
49384: LD_VAR 0 10
49388: PUSH
49389: LD_VAR 0 7
49393: PPUSH
49394: LD_INT 3
49396: PPUSH
49397: CALL_OW 259
49401: PUSH
49402: LD_INT 3
49404: MUL
49405: MUL
49406: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49407: LD_VAR 0 6
49411: PPUSH
49412: CALL_OW 264
49416: PUSH
49417: LD_INT 5
49419: PUSH
49420: LD_INT 6
49422: PUSH
49423: LD_INT 46
49425: PUSH
49426: LD_INT 44
49428: PUSH
49429: LD_INT 47
49431: PUSH
49432: LD_INT 45
49434: PUSH
49435: LD_INT 28
49437: PUSH
49438: LD_INT 7
49440: PUSH
49441: LD_INT 27
49443: PUSH
49444: LD_INT 29
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: IN
49459: PUSH
49460: LD_VAR 0 1
49464: PPUSH
49465: LD_INT 52
49467: PPUSH
49468: CALL_OW 321
49472: PUSH
49473: LD_INT 2
49475: EQUAL
49476: AND
49477: IFFALSE 49494
// bpoints := bpoints * 1.2 ;
49479: LD_ADDR_VAR 0 10
49483: PUSH
49484: LD_VAR 0 10
49488: PUSH
49489: LD_REAL  1.20000000000000E+0000
49492: MUL
49493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49494: LD_VAR 0 6
49498: PPUSH
49499: CALL_OW 264
49503: PUSH
49504: LD_INT 6
49506: PUSH
49507: LD_INT 46
49509: PUSH
49510: LD_INT 47
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: IN
49518: IFFALSE 49535
// bpoints := bpoints * 1.2 ;
49520: LD_ADDR_VAR 0 10
49524: PUSH
49525: LD_VAR 0 10
49529: PUSH
49530: LD_REAL  1.20000000000000E+0000
49533: MUL
49534: ST_TO_ADDR
// end ; unit_building :
49535: GO 49549
49537: LD_INT 3
49539: DOUBLE
49540: EQUAL
49541: IFTRUE 49545
49543: GO 49548
49545: POP
// ; end ;
49546: GO 49549
49548: POP
// for j = 1 to 3 do
49549: LD_ADDR_VAR 0 7
49553: PUSH
49554: DOUBLE
49555: LD_INT 1
49557: DEC
49558: ST_TO_ADDR
49559: LD_INT 3
49561: PUSH
49562: FOR_TO
49563: IFFALSE 49616
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49565: LD_ADDR_VAR 0 5
49569: PUSH
49570: LD_VAR 0 5
49574: PPUSH
49575: LD_VAR 0 7
49579: PPUSH
49580: LD_VAR 0 5
49584: PUSH
49585: LD_VAR 0 7
49589: ARRAY
49590: PUSH
49591: LD_VAR 0 9
49595: PUSH
49596: LD_VAR 0 7
49600: ARRAY
49601: PUSH
49602: LD_VAR 0 10
49606: MUL
49607: PLUS
49608: PPUSH
49609: CALL_OW 1
49613: ST_TO_ADDR
49614: GO 49562
49616: POP
49617: POP
// end ;
49618: GO 48097
49620: POP
49621: POP
// result := Replace ( result , 4 , tmp ) ;
49622: LD_ADDR_VAR 0 5
49626: PUSH
49627: LD_VAR 0 5
49631: PPUSH
49632: LD_INT 4
49634: PPUSH
49635: LD_VAR 0 8
49639: PPUSH
49640: CALL_OW 1
49644: ST_TO_ADDR
// end ;
49645: LD_VAR 0 5
49649: RET
// export function DangerAtRange ( unit , range ) ; begin
49650: LD_INT 0
49652: PPUSH
// if not unit then
49653: LD_VAR 0 1
49657: NOT
49658: IFFALSE 49662
// exit ;
49660: GO 49707
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49662: LD_ADDR_VAR 0 3
49666: PUSH
49667: LD_VAR 0 1
49671: PPUSH
49672: CALL_OW 255
49676: PPUSH
49677: LD_VAR 0 1
49681: PPUSH
49682: CALL_OW 250
49686: PPUSH
49687: LD_VAR 0 1
49691: PPUSH
49692: CALL_OW 251
49696: PPUSH
49697: LD_VAR 0 2
49701: PPUSH
49702: CALL 47949 0 4
49706: ST_TO_ADDR
// end ;
49707: LD_VAR 0 3
49711: RET
// export function DangerInArea ( side , area ) ; begin
49712: LD_INT 0
49714: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49715: LD_ADDR_VAR 0 3
49719: PUSH
49720: LD_VAR 0 2
49724: PPUSH
49725: LD_INT 81
49727: PUSH
49728: LD_VAR 0 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PPUSH
49737: CALL_OW 70
49741: ST_TO_ADDR
// end ;
49742: LD_VAR 0 3
49746: RET
// export function IsExtension ( b ) ; begin
49747: LD_INT 0
49749: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49750: LD_ADDR_VAR 0 2
49754: PUSH
49755: LD_VAR 0 1
49759: PUSH
49760: LD_INT 23
49762: PUSH
49763: LD_INT 20
49765: PUSH
49766: LD_INT 22
49768: PUSH
49769: LD_INT 17
49771: PUSH
49772: LD_INT 24
49774: PUSH
49775: LD_INT 21
49777: PUSH
49778: LD_INT 19
49780: PUSH
49781: LD_INT 16
49783: PUSH
49784: LD_INT 25
49786: PUSH
49787: LD_INT 18
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: IN
49802: ST_TO_ADDR
// end ;
49803: LD_VAR 0 2
49807: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49808: LD_INT 0
49810: PPUSH
49811: PPUSH
49812: PPUSH
// result := [ ] ;
49813: LD_ADDR_VAR 0 4
49817: PUSH
49818: EMPTY
49819: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49820: LD_ADDR_VAR 0 5
49824: PUSH
49825: LD_VAR 0 2
49829: PPUSH
49830: LD_INT 21
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PPUSH
49840: CALL_OW 70
49844: ST_TO_ADDR
// if not tmp then
49845: LD_VAR 0 5
49849: NOT
49850: IFFALSE 49854
// exit ;
49852: GO 49918
// if checkLink then
49854: LD_VAR 0 3
49858: IFFALSE 49908
// begin for i in tmp do
49860: LD_ADDR_VAR 0 6
49864: PUSH
49865: LD_VAR 0 5
49869: PUSH
49870: FOR_IN
49871: IFFALSE 49906
// if GetBase ( i ) <> base then
49873: LD_VAR 0 6
49877: PPUSH
49878: CALL_OW 274
49882: PUSH
49883: LD_VAR 0 1
49887: NONEQUAL
49888: IFFALSE 49904
// ComLinkToBase ( base , i ) ;
49890: LD_VAR 0 1
49894: PPUSH
49895: LD_VAR 0 6
49899: PPUSH
49900: CALL_OW 169
49904: GO 49870
49906: POP
49907: POP
// end ; result := tmp ;
49908: LD_ADDR_VAR 0 4
49912: PUSH
49913: LD_VAR 0 5
49917: ST_TO_ADDR
// end ;
49918: LD_VAR 0 4
49922: RET
// export function ComComplete ( units , b ) ; var i ; begin
49923: LD_INT 0
49925: PPUSH
49926: PPUSH
// if not units then
49927: LD_VAR 0 1
49931: NOT
49932: IFFALSE 49936
// exit ;
49934: GO 50026
// for i in units do
49936: LD_ADDR_VAR 0 4
49940: PUSH
49941: LD_VAR 0 1
49945: PUSH
49946: FOR_IN
49947: IFFALSE 50024
// if BuildingStatus ( b ) = bs_build then
49949: LD_VAR 0 2
49953: PPUSH
49954: CALL_OW 461
49958: PUSH
49959: LD_INT 1
49961: EQUAL
49962: IFFALSE 50022
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49964: LD_VAR 0 4
49968: PPUSH
49969: LD_STRING h
49971: PUSH
49972: LD_VAR 0 2
49976: PPUSH
49977: CALL_OW 250
49981: PUSH
49982: LD_VAR 0 2
49986: PPUSH
49987: CALL_OW 251
49991: PUSH
49992: LD_VAR 0 2
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: PPUSH
50018: CALL_OW 446
50022: GO 49946
50024: POP
50025: POP
// end ;
50026: LD_VAR 0 3
50030: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50031: LD_INT 0
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50039: LD_VAR 0 1
50043: NOT
50044: PUSH
50045: LD_VAR 0 1
50049: PPUSH
50050: CALL_OW 263
50054: PUSH
50055: LD_INT 2
50057: NONEQUAL
50058: OR
50059: IFFALSE 50063
// exit ;
50061: GO 50379
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50063: LD_ADDR_VAR 0 6
50067: PUSH
50068: LD_INT 22
50070: PUSH
50071: LD_VAR 0 1
50075: PPUSH
50076: CALL_OW 255
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 30
50090: PUSH
50091: LD_INT 36
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 34
50100: PUSH
50101: LD_INT 31
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PPUSH
50117: CALL_OW 69
50121: ST_TO_ADDR
// if not tmp then
50122: LD_VAR 0 6
50126: NOT
50127: IFFALSE 50131
// exit ;
50129: GO 50379
// result := [ ] ;
50131: LD_ADDR_VAR 0 2
50135: PUSH
50136: EMPTY
50137: ST_TO_ADDR
// for i in tmp do
50138: LD_ADDR_VAR 0 3
50142: PUSH
50143: LD_VAR 0 6
50147: PUSH
50148: FOR_IN
50149: IFFALSE 50220
// begin t := UnitsInside ( i ) ;
50151: LD_ADDR_VAR 0 4
50155: PUSH
50156: LD_VAR 0 3
50160: PPUSH
50161: CALL_OW 313
50165: ST_TO_ADDR
// if t then
50166: LD_VAR 0 4
50170: IFFALSE 50218
// for j in t do
50172: LD_ADDR_VAR 0 7
50176: PUSH
50177: LD_VAR 0 4
50181: PUSH
50182: FOR_IN
50183: IFFALSE 50216
// result := Replace ( result , result + 1 , j ) ;
50185: LD_ADDR_VAR 0 2
50189: PUSH
50190: LD_VAR 0 2
50194: PPUSH
50195: LD_VAR 0 2
50199: PUSH
50200: LD_INT 1
50202: PLUS
50203: PPUSH
50204: LD_VAR 0 7
50208: PPUSH
50209: CALL_OW 1
50213: ST_TO_ADDR
50214: GO 50182
50216: POP
50217: POP
// end ;
50218: GO 50148
50220: POP
50221: POP
// if not result then
50222: LD_VAR 0 2
50226: NOT
50227: IFFALSE 50231
// exit ;
50229: GO 50379
// mech := result [ 1 ] ;
50231: LD_ADDR_VAR 0 5
50235: PUSH
50236: LD_VAR 0 2
50240: PUSH
50241: LD_INT 1
50243: ARRAY
50244: ST_TO_ADDR
// if result > 1 then
50245: LD_VAR 0 2
50249: PUSH
50250: LD_INT 1
50252: GREATER
50253: IFFALSE 50365
// begin for i = 2 to result do
50255: LD_ADDR_VAR 0 3
50259: PUSH
50260: DOUBLE
50261: LD_INT 2
50263: DEC
50264: ST_TO_ADDR
50265: LD_VAR 0 2
50269: PUSH
50270: FOR_TO
50271: IFFALSE 50363
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50273: LD_ADDR_VAR 0 4
50277: PUSH
50278: LD_VAR 0 2
50282: PUSH
50283: LD_VAR 0 3
50287: ARRAY
50288: PPUSH
50289: LD_INT 3
50291: PPUSH
50292: CALL_OW 259
50296: PUSH
50297: LD_VAR 0 2
50301: PUSH
50302: LD_VAR 0 3
50306: ARRAY
50307: PPUSH
50308: CALL_OW 432
50312: MINUS
50313: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50314: LD_VAR 0 4
50318: PUSH
50319: LD_VAR 0 5
50323: PPUSH
50324: LD_INT 3
50326: PPUSH
50327: CALL_OW 259
50331: PUSH
50332: LD_VAR 0 5
50336: PPUSH
50337: CALL_OW 432
50341: MINUS
50342: GREATEREQUAL
50343: IFFALSE 50361
// mech := result [ i ] ;
50345: LD_ADDR_VAR 0 5
50349: PUSH
50350: LD_VAR 0 2
50354: PUSH
50355: LD_VAR 0 3
50359: ARRAY
50360: ST_TO_ADDR
// end ;
50361: GO 50270
50363: POP
50364: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50365: LD_VAR 0 1
50369: PPUSH
50370: LD_VAR 0 5
50374: PPUSH
50375: CALL_OW 135
// end ;
50379: LD_VAR 0 2
50383: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50384: LD_INT 0
50386: PPUSH
50387: PPUSH
50388: PPUSH
50389: PPUSH
50390: PPUSH
50391: PPUSH
50392: PPUSH
50393: PPUSH
50394: PPUSH
50395: PPUSH
50396: PPUSH
50397: PPUSH
50398: PPUSH
// result := [ ] ;
50399: LD_ADDR_VAR 0 7
50403: PUSH
50404: EMPTY
50405: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50406: LD_VAR 0 1
50410: PPUSH
50411: CALL_OW 266
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: IN
50426: NOT
50427: IFFALSE 50431
// exit ;
50429: GO 52065
// if name then
50431: LD_VAR 0 3
50435: IFFALSE 50451
// SetBName ( base_dep , name ) ;
50437: LD_VAR 0 1
50441: PPUSH
50442: LD_VAR 0 3
50446: PPUSH
50447: CALL_OW 500
// base := GetBase ( base_dep ) ;
50451: LD_ADDR_VAR 0 15
50455: PUSH
50456: LD_VAR 0 1
50460: PPUSH
50461: CALL_OW 274
50465: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50466: LD_ADDR_VAR 0 16
50470: PUSH
50471: LD_VAR 0 1
50475: PPUSH
50476: CALL_OW 255
50480: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50481: LD_ADDR_VAR 0 17
50485: PUSH
50486: LD_VAR 0 1
50490: PPUSH
50491: CALL_OW 248
50495: ST_TO_ADDR
// if sources then
50496: LD_VAR 0 5
50500: IFFALSE 50547
// for i = 1 to 3 do
50502: LD_ADDR_VAR 0 8
50506: PUSH
50507: DOUBLE
50508: LD_INT 1
50510: DEC
50511: ST_TO_ADDR
50512: LD_INT 3
50514: PUSH
50515: FOR_TO
50516: IFFALSE 50545
// AddResourceType ( base , i , sources [ i ] ) ;
50518: LD_VAR 0 15
50522: PPUSH
50523: LD_VAR 0 8
50527: PPUSH
50528: LD_VAR 0 5
50532: PUSH
50533: LD_VAR 0 8
50537: ARRAY
50538: PPUSH
50539: CALL_OW 276
50543: GO 50515
50545: POP
50546: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50547: LD_ADDR_VAR 0 18
50551: PUSH
50552: LD_VAR 0 15
50556: PPUSH
50557: LD_VAR 0 2
50561: PPUSH
50562: LD_INT 1
50564: PPUSH
50565: CALL 49808 0 3
50569: ST_TO_ADDR
// InitHc ;
50570: CALL_OW 19
// InitUc ;
50574: CALL_OW 18
// uc_side := side ;
50578: LD_ADDR_OWVAR 20
50582: PUSH
50583: LD_VAR 0 16
50587: ST_TO_ADDR
// uc_nation := nation ;
50588: LD_ADDR_OWVAR 21
50592: PUSH
50593: LD_VAR 0 17
50597: ST_TO_ADDR
// if buildings then
50598: LD_VAR 0 18
50602: IFFALSE 51924
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50604: LD_ADDR_VAR 0 19
50608: PUSH
50609: LD_VAR 0 18
50613: PPUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 30
50619: PUSH
50620: LD_INT 29
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 30
50629: PUSH
50630: LD_INT 30
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: PPUSH
50642: CALL_OW 72
50646: ST_TO_ADDR
// if tmp then
50647: LD_VAR 0 19
50651: IFFALSE 50699
// for i in tmp do
50653: LD_ADDR_VAR 0 8
50657: PUSH
50658: LD_VAR 0 19
50662: PUSH
50663: FOR_IN
50664: IFFALSE 50697
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50666: LD_VAR 0 8
50670: PPUSH
50671: CALL_OW 250
50675: PPUSH
50676: LD_VAR 0 8
50680: PPUSH
50681: CALL_OW 251
50685: PPUSH
50686: LD_VAR 0 16
50690: PPUSH
50691: CALL_OW 441
50695: GO 50663
50697: POP
50698: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50699: LD_VAR 0 18
50703: PPUSH
50704: LD_INT 2
50706: PUSH
50707: LD_INT 30
50709: PUSH
50710: LD_INT 32
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 30
50719: PUSH
50720: LD_INT 33
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: PPUSH
50732: CALL_OW 72
50736: IFFALSE 50824
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50738: LD_ADDR_VAR 0 8
50742: PUSH
50743: LD_VAR 0 18
50747: PPUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 30
50753: PUSH
50754: LD_INT 32
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 30
50763: PUSH
50764: LD_INT 33
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: PPUSH
50776: CALL_OW 72
50780: PUSH
50781: FOR_IN
50782: IFFALSE 50822
// begin if not GetBWeapon ( i ) then
50784: LD_VAR 0 8
50788: PPUSH
50789: CALL_OW 269
50793: NOT
50794: IFFALSE 50820
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50796: LD_VAR 0 8
50800: PPUSH
50801: LD_VAR 0 8
50805: PPUSH
50806: LD_VAR 0 2
50810: PPUSH
50811: CALL 52070 0 2
50815: PPUSH
50816: CALL_OW 431
// end ;
50820: GO 50781
50822: POP
50823: POP
// end ; for i = 1 to personel do
50824: LD_ADDR_VAR 0 8
50828: PUSH
50829: DOUBLE
50830: LD_INT 1
50832: DEC
50833: ST_TO_ADDR
50834: LD_VAR 0 6
50838: PUSH
50839: FOR_TO
50840: IFFALSE 51904
// begin if i > 4 then
50842: LD_VAR 0 8
50846: PUSH
50847: LD_INT 4
50849: GREATER
50850: IFFALSE 50854
// break ;
50852: GO 51904
// case i of 1 :
50854: LD_VAR 0 8
50858: PUSH
50859: LD_INT 1
50861: DOUBLE
50862: EQUAL
50863: IFTRUE 50867
50865: GO 50947
50867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50868: LD_ADDR_VAR 0 12
50872: PUSH
50873: LD_VAR 0 18
50877: PPUSH
50878: LD_INT 22
50880: PUSH
50881: LD_VAR 0 16
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 58
50892: PUSH
50893: EMPTY
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 30
50901: PUSH
50902: LD_INT 32
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 30
50911: PUSH
50912: LD_INT 4
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 30
50921: PUSH
50922: LD_INT 5
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: LIST
50939: PPUSH
50940: CALL_OW 72
50944: ST_TO_ADDR
50945: GO 51169
50947: LD_INT 2
50949: DOUBLE
50950: EQUAL
50951: IFTRUE 50955
50953: GO 51017
50955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50956: LD_ADDR_VAR 0 12
50960: PUSH
50961: LD_VAR 0 18
50965: PPUSH
50966: LD_INT 22
50968: PUSH
50969: LD_VAR 0 16
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 30
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 30
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PPUSH
51010: CALL_OW 72
51014: ST_TO_ADDR
51015: GO 51169
51017: LD_INT 3
51019: DOUBLE
51020: EQUAL
51021: IFTRUE 51025
51023: GO 51087
51025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51026: LD_ADDR_VAR 0 12
51030: PUSH
51031: LD_VAR 0 18
51035: PPUSH
51036: LD_INT 22
51038: PUSH
51039: LD_VAR 0 16
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 30
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 30
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PPUSH
51080: CALL_OW 72
51084: ST_TO_ADDR
51085: GO 51169
51087: LD_INT 4
51089: DOUBLE
51090: EQUAL
51091: IFTRUE 51095
51093: GO 51168
51095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51096: LD_ADDR_VAR 0 12
51100: PUSH
51101: LD_VAR 0 18
51105: PPUSH
51106: LD_INT 22
51108: PUSH
51109: LD_VAR 0 16
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 30
51123: PUSH
51124: LD_INT 6
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 30
51133: PUSH
51134: LD_INT 7
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 30
51143: PUSH
51144: LD_INT 8
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PPUSH
51161: CALL_OW 72
51165: ST_TO_ADDR
51166: GO 51169
51168: POP
// if i = 1 then
51169: LD_VAR 0 8
51173: PUSH
51174: LD_INT 1
51176: EQUAL
51177: IFFALSE 51288
// begin tmp := [ ] ;
51179: LD_ADDR_VAR 0 19
51183: PUSH
51184: EMPTY
51185: ST_TO_ADDR
// for j in f do
51186: LD_ADDR_VAR 0 9
51190: PUSH
51191: LD_VAR 0 12
51195: PUSH
51196: FOR_IN
51197: IFFALSE 51270
// if GetBType ( j ) = b_bunker then
51199: LD_VAR 0 9
51203: PPUSH
51204: CALL_OW 266
51208: PUSH
51209: LD_INT 32
51211: EQUAL
51212: IFFALSE 51239
// tmp := Insert ( tmp , 1 , j ) else
51214: LD_ADDR_VAR 0 19
51218: PUSH
51219: LD_VAR 0 19
51223: PPUSH
51224: LD_INT 1
51226: PPUSH
51227: LD_VAR 0 9
51231: PPUSH
51232: CALL_OW 2
51236: ST_TO_ADDR
51237: GO 51268
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51239: LD_ADDR_VAR 0 19
51243: PUSH
51244: LD_VAR 0 19
51248: PPUSH
51249: LD_VAR 0 19
51253: PUSH
51254: LD_INT 1
51256: PLUS
51257: PPUSH
51258: LD_VAR 0 9
51262: PPUSH
51263: CALL_OW 2
51267: ST_TO_ADDR
51268: GO 51196
51270: POP
51271: POP
// if tmp then
51272: LD_VAR 0 19
51276: IFFALSE 51288
// f := tmp ;
51278: LD_ADDR_VAR 0 12
51282: PUSH
51283: LD_VAR 0 19
51287: ST_TO_ADDR
// end ; x := personel [ i ] ;
51288: LD_ADDR_VAR 0 13
51292: PUSH
51293: LD_VAR 0 6
51297: PUSH
51298: LD_VAR 0 8
51302: ARRAY
51303: ST_TO_ADDR
// if x = - 1 then
51304: LD_VAR 0 13
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: EQUAL
51313: IFFALSE 51522
// begin for j in f do
51315: LD_ADDR_VAR 0 9
51319: PUSH
51320: LD_VAR 0 12
51324: PUSH
51325: FOR_IN
51326: IFFALSE 51518
// repeat InitHc ;
51328: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51332: LD_VAR 0 9
51336: PPUSH
51337: CALL_OW 266
51341: PUSH
51342: LD_INT 5
51344: EQUAL
51345: IFFALSE 51415
// begin if UnitsInside ( j ) < 3 then
51347: LD_VAR 0 9
51351: PPUSH
51352: CALL_OW 313
51356: PUSH
51357: LD_INT 3
51359: LESS
51360: IFFALSE 51396
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51362: LD_INT 0
51364: PPUSH
51365: LD_INT 5
51367: PUSH
51368: LD_INT 8
51370: PUSH
51371: LD_INT 9
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: PUSH
51379: LD_VAR 0 17
51383: ARRAY
51384: PPUSH
51385: LD_VAR 0 4
51389: PPUSH
51390: CALL_OW 380
51394: GO 51413
// PrepareHuman ( false , i , skill ) ;
51396: LD_INT 0
51398: PPUSH
51399: LD_VAR 0 8
51403: PPUSH
51404: LD_VAR 0 4
51408: PPUSH
51409: CALL_OW 380
// end else
51413: GO 51432
// PrepareHuman ( false , i , skill ) ;
51415: LD_INT 0
51417: PPUSH
51418: LD_VAR 0 8
51422: PPUSH
51423: LD_VAR 0 4
51427: PPUSH
51428: CALL_OW 380
// un := CreateHuman ;
51432: LD_ADDR_VAR 0 14
51436: PUSH
51437: CALL_OW 44
51441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51442: LD_ADDR_VAR 0 7
51446: PUSH
51447: LD_VAR 0 7
51451: PPUSH
51452: LD_INT 1
51454: PPUSH
51455: LD_VAR 0 14
51459: PPUSH
51460: CALL_OW 2
51464: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51465: LD_VAR 0 14
51469: PPUSH
51470: LD_VAR 0 9
51474: PPUSH
51475: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51479: LD_VAR 0 9
51483: PPUSH
51484: CALL_OW 313
51488: PUSH
51489: LD_INT 6
51491: EQUAL
51492: PUSH
51493: LD_VAR 0 9
51497: PPUSH
51498: CALL_OW 266
51502: PUSH
51503: LD_INT 32
51505: PUSH
51506: LD_INT 31
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: IN
51513: OR
51514: IFFALSE 51328
51516: GO 51325
51518: POP
51519: POP
// end else
51520: GO 51902
// for j = 1 to x do
51522: LD_ADDR_VAR 0 9
51526: PUSH
51527: DOUBLE
51528: LD_INT 1
51530: DEC
51531: ST_TO_ADDR
51532: LD_VAR 0 13
51536: PUSH
51537: FOR_TO
51538: IFFALSE 51900
// begin InitHc ;
51540: CALL_OW 19
// if not f then
51544: LD_VAR 0 12
51548: NOT
51549: IFFALSE 51638
// begin PrepareHuman ( false , i , skill ) ;
51551: LD_INT 0
51553: PPUSH
51554: LD_VAR 0 8
51558: PPUSH
51559: LD_VAR 0 4
51563: PPUSH
51564: CALL_OW 380
// un := CreateHuman ;
51568: LD_ADDR_VAR 0 14
51572: PUSH
51573: CALL_OW 44
51577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51578: LD_ADDR_VAR 0 7
51582: PUSH
51583: LD_VAR 0 7
51587: PPUSH
51588: LD_INT 1
51590: PPUSH
51591: LD_VAR 0 14
51595: PPUSH
51596: CALL_OW 2
51600: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51601: LD_VAR 0 14
51605: PPUSH
51606: LD_VAR 0 1
51610: PPUSH
51611: CALL_OW 250
51615: PPUSH
51616: LD_VAR 0 1
51620: PPUSH
51621: CALL_OW 251
51625: PPUSH
51626: LD_INT 10
51628: PPUSH
51629: LD_INT 0
51631: PPUSH
51632: CALL_OW 50
// continue ;
51636: GO 51537
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51638: LD_VAR 0 12
51642: PUSH
51643: LD_INT 1
51645: ARRAY
51646: PPUSH
51647: CALL_OW 313
51651: PUSH
51652: LD_VAR 0 12
51656: PUSH
51657: LD_INT 1
51659: ARRAY
51660: PPUSH
51661: CALL_OW 266
51665: PUSH
51666: LD_INT 32
51668: PUSH
51669: LD_INT 31
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: IN
51676: AND
51677: PUSH
51678: LD_VAR 0 12
51682: PUSH
51683: LD_INT 1
51685: ARRAY
51686: PPUSH
51687: CALL_OW 313
51691: PUSH
51692: LD_INT 6
51694: EQUAL
51695: OR
51696: IFFALSE 51716
// f := Delete ( f , 1 ) ;
51698: LD_ADDR_VAR 0 12
51702: PUSH
51703: LD_VAR 0 12
51707: PPUSH
51708: LD_INT 1
51710: PPUSH
51711: CALL_OW 3
51715: ST_TO_ADDR
// if not f then
51716: LD_VAR 0 12
51720: NOT
51721: IFFALSE 51739
// begin x := x + 2 ;
51723: LD_ADDR_VAR 0 13
51727: PUSH
51728: LD_VAR 0 13
51732: PUSH
51733: LD_INT 2
51735: PLUS
51736: ST_TO_ADDR
// continue ;
51737: GO 51537
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51739: LD_VAR 0 12
51743: PUSH
51744: LD_INT 1
51746: ARRAY
51747: PPUSH
51748: CALL_OW 266
51752: PUSH
51753: LD_INT 5
51755: EQUAL
51756: IFFALSE 51830
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51758: LD_VAR 0 12
51762: PUSH
51763: LD_INT 1
51765: ARRAY
51766: PPUSH
51767: CALL_OW 313
51771: PUSH
51772: LD_INT 3
51774: LESS
51775: IFFALSE 51811
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51777: LD_INT 0
51779: PPUSH
51780: LD_INT 5
51782: PUSH
51783: LD_INT 8
51785: PUSH
51786: LD_INT 9
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: PUSH
51794: LD_VAR 0 17
51798: ARRAY
51799: PPUSH
51800: LD_VAR 0 4
51804: PPUSH
51805: CALL_OW 380
51809: GO 51828
// PrepareHuman ( false , i , skill ) ;
51811: LD_INT 0
51813: PPUSH
51814: LD_VAR 0 8
51818: PPUSH
51819: LD_VAR 0 4
51823: PPUSH
51824: CALL_OW 380
// end else
51828: GO 51847
// PrepareHuman ( false , i , skill ) ;
51830: LD_INT 0
51832: PPUSH
51833: LD_VAR 0 8
51837: PPUSH
51838: LD_VAR 0 4
51842: PPUSH
51843: CALL_OW 380
// un := CreateHuman ;
51847: LD_ADDR_VAR 0 14
51851: PUSH
51852: CALL_OW 44
51856: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51857: LD_ADDR_VAR 0 7
51861: PUSH
51862: LD_VAR 0 7
51866: PPUSH
51867: LD_INT 1
51869: PPUSH
51870: LD_VAR 0 14
51874: PPUSH
51875: CALL_OW 2
51879: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51880: LD_VAR 0 14
51884: PPUSH
51885: LD_VAR 0 12
51889: PUSH
51890: LD_INT 1
51892: ARRAY
51893: PPUSH
51894: CALL_OW 52
// end ;
51898: GO 51537
51900: POP
51901: POP
// end ;
51902: GO 50839
51904: POP
51905: POP
// result := result ^ buildings ;
51906: LD_ADDR_VAR 0 7
51910: PUSH
51911: LD_VAR 0 7
51915: PUSH
51916: LD_VAR 0 18
51920: ADD
51921: ST_TO_ADDR
// end else
51922: GO 52065
// begin for i = 1 to personel do
51924: LD_ADDR_VAR 0 8
51928: PUSH
51929: DOUBLE
51930: LD_INT 1
51932: DEC
51933: ST_TO_ADDR
51934: LD_VAR 0 6
51938: PUSH
51939: FOR_TO
51940: IFFALSE 52063
// begin if i > 4 then
51942: LD_VAR 0 8
51946: PUSH
51947: LD_INT 4
51949: GREATER
51950: IFFALSE 51954
// break ;
51952: GO 52063
// x := personel [ i ] ;
51954: LD_ADDR_VAR 0 13
51958: PUSH
51959: LD_VAR 0 6
51963: PUSH
51964: LD_VAR 0 8
51968: ARRAY
51969: ST_TO_ADDR
// if x = - 1 then
51970: LD_VAR 0 13
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: EQUAL
51979: IFFALSE 51983
// continue ;
51981: GO 51939
// PrepareHuman ( false , i , skill ) ;
51983: LD_INT 0
51985: PPUSH
51986: LD_VAR 0 8
51990: PPUSH
51991: LD_VAR 0 4
51995: PPUSH
51996: CALL_OW 380
// un := CreateHuman ;
52000: LD_ADDR_VAR 0 14
52004: PUSH
52005: CALL_OW 44
52009: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52010: LD_VAR 0 14
52014: PPUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 250
52024: PPUSH
52025: LD_VAR 0 1
52029: PPUSH
52030: CALL_OW 251
52034: PPUSH
52035: LD_INT 10
52037: PPUSH
52038: LD_INT 0
52040: PPUSH
52041: CALL_OW 50
// result := result ^ un ;
52045: LD_ADDR_VAR 0 7
52049: PUSH
52050: LD_VAR 0 7
52054: PUSH
52055: LD_VAR 0 14
52059: ADD
52060: ST_TO_ADDR
// end ;
52061: GO 51939
52063: POP
52064: POP
// end ; end ;
52065: LD_VAR 0 7
52069: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52070: LD_INT 0
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
52083: PPUSH
52084: PPUSH
52085: PPUSH
52086: PPUSH
52087: PPUSH
// result := false ;
52088: LD_ADDR_VAR 0 3
52092: PUSH
52093: LD_INT 0
52095: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52096: LD_VAR 0 1
52100: NOT
52101: PUSH
52102: LD_VAR 0 1
52106: PPUSH
52107: CALL_OW 266
52111: PUSH
52112: LD_INT 32
52114: PUSH
52115: LD_INT 33
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: IN
52122: NOT
52123: OR
52124: IFFALSE 52128
// exit ;
52126: GO 53237
// nat := GetNation ( tower ) ;
52128: LD_ADDR_VAR 0 12
52132: PUSH
52133: LD_VAR 0 1
52137: PPUSH
52138: CALL_OW 248
52142: ST_TO_ADDR
// side := GetSide ( tower ) ;
52143: LD_ADDR_VAR 0 16
52147: PUSH
52148: LD_VAR 0 1
52152: PPUSH
52153: CALL_OW 255
52157: ST_TO_ADDR
// x := GetX ( tower ) ;
52158: LD_ADDR_VAR 0 10
52162: PUSH
52163: LD_VAR 0 1
52167: PPUSH
52168: CALL_OW 250
52172: ST_TO_ADDR
// y := GetY ( tower ) ;
52173: LD_ADDR_VAR 0 11
52177: PUSH
52178: LD_VAR 0 1
52182: PPUSH
52183: CALL_OW 251
52187: ST_TO_ADDR
// if not x or not y then
52188: LD_VAR 0 10
52192: NOT
52193: PUSH
52194: LD_VAR 0 11
52198: NOT
52199: OR
52200: IFFALSE 52204
// exit ;
52202: GO 53237
// weapon := 0 ;
52204: LD_ADDR_VAR 0 18
52208: PUSH
52209: LD_INT 0
52211: ST_TO_ADDR
// fac_list := [ ] ;
52212: LD_ADDR_VAR 0 17
52216: PUSH
52217: EMPTY
52218: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52219: LD_ADDR_VAR 0 6
52223: PUSH
52224: LD_VAR 0 1
52228: PPUSH
52229: CALL_OW 274
52233: PPUSH
52234: LD_VAR 0 2
52238: PPUSH
52239: LD_INT 0
52241: PPUSH
52242: CALL 49808 0 3
52246: PPUSH
52247: LD_INT 30
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PPUSH
52257: CALL_OW 72
52261: ST_TO_ADDR
// if not factories then
52262: LD_VAR 0 6
52266: NOT
52267: IFFALSE 52271
// exit ;
52269: GO 53237
// for i in factories do
52271: LD_ADDR_VAR 0 8
52275: PUSH
52276: LD_VAR 0 6
52280: PUSH
52281: FOR_IN
52282: IFFALSE 52307
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52284: LD_ADDR_VAR 0 17
52288: PUSH
52289: LD_VAR 0 17
52293: PUSH
52294: LD_VAR 0 8
52298: PPUSH
52299: CALL_OW 478
52303: UNION
52304: ST_TO_ADDR
52305: GO 52281
52307: POP
52308: POP
// if not fac_list then
52309: LD_VAR 0 17
52313: NOT
52314: IFFALSE 52318
// exit ;
52316: GO 53237
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52318: LD_ADDR_VAR 0 5
52322: PUSH
52323: LD_INT 4
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: LD_INT 9
52331: PUSH
52332: LD_INT 10
52334: PUSH
52335: LD_INT 6
52337: PUSH
52338: LD_INT 7
52340: PUSH
52341: LD_INT 11
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 27
52355: PUSH
52356: LD_INT 28
52358: PUSH
52359: LD_INT 26
52361: PUSH
52362: LD_INT 30
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 43
52373: PUSH
52374: LD_INT 44
52376: PUSH
52377: LD_INT 46
52379: PUSH
52380: LD_INT 45
52382: PUSH
52383: LD_INT 47
52385: PUSH
52386: LD_INT 49
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: PUSH
52402: LD_VAR 0 12
52406: ARRAY
52407: ST_TO_ADDR
// list := list isect fac_list ;
52408: LD_ADDR_VAR 0 5
52412: PUSH
52413: LD_VAR 0 5
52417: PUSH
52418: LD_VAR 0 17
52422: ISECT
52423: ST_TO_ADDR
// if not list then
52424: LD_VAR 0 5
52428: NOT
52429: IFFALSE 52433
// exit ;
52431: GO 53237
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52433: LD_VAR 0 12
52437: PUSH
52438: LD_INT 3
52440: EQUAL
52441: PUSH
52442: LD_INT 49
52444: PUSH
52445: LD_VAR 0 5
52449: IN
52450: AND
52451: PUSH
52452: LD_INT 31
52454: PPUSH
52455: LD_VAR 0 16
52459: PPUSH
52460: CALL_OW 321
52464: PUSH
52465: LD_INT 2
52467: EQUAL
52468: AND
52469: IFFALSE 52529
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52471: LD_INT 22
52473: PUSH
52474: LD_VAR 0 16
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 35
52485: PUSH
52486: LD_INT 49
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 91
52495: PUSH
52496: LD_VAR 0 1
52500: PUSH
52501: LD_INT 10
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: PPUSH
52514: CALL_OW 69
52518: NOT
52519: IFFALSE 52529
// weapon := ru_time_lapser ;
52521: LD_ADDR_VAR 0 18
52525: PUSH
52526: LD_INT 49
52528: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52529: LD_VAR 0 12
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: IN
52544: PUSH
52545: LD_INT 11
52547: PUSH
52548: LD_VAR 0 5
52552: IN
52553: PUSH
52554: LD_INT 30
52556: PUSH
52557: LD_VAR 0 5
52561: IN
52562: OR
52563: AND
52564: PUSH
52565: LD_INT 6
52567: PPUSH
52568: LD_VAR 0 16
52572: PPUSH
52573: CALL_OW 321
52577: PUSH
52578: LD_INT 2
52580: EQUAL
52581: AND
52582: IFFALSE 52747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52584: LD_INT 22
52586: PUSH
52587: LD_VAR 0 16
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 35
52601: PUSH
52602: LD_INT 11
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 35
52611: PUSH
52612: LD_INT 30
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 91
52626: PUSH
52627: LD_VAR 0 1
52631: PUSH
52632: LD_INT 18
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: PPUSH
52645: CALL_OW 69
52649: NOT
52650: PUSH
52651: LD_INT 22
52653: PUSH
52654: LD_VAR 0 16
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 30
52668: PUSH
52669: LD_INT 32
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 30
52678: PUSH
52679: LD_INT 33
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 91
52693: PUSH
52694: LD_VAR 0 1
52698: PUSH
52699: LD_INT 12
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: PPUSH
52715: CALL_OW 69
52719: PUSH
52720: LD_INT 2
52722: GREATER
52723: AND
52724: IFFALSE 52747
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52726: LD_ADDR_VAR 0 18
52730: PUSH
52731: LD_INT 11
52733: PUSH
52734: LD_INT 30
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_VAR 0 12
52745: ARRAY
52746: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52747: LD_VAR 0 18
52751: NOT
52752: PUSH
52753: LD_INT 40
52755: PPUSH
52756: LD_VAR 0 16
52760: PPUSH
52761: CALL_OW 321
52765: PUSH
52766: LD_INT 2
52768: EQUAL
52769: AND
52770: PUSH
52771: LD_INT 7
52773: PUSH
52774: LD_VAR 0 5
52778: IN
52779: PUSH
52780: LD_INT 28
52782: PUSH
52783: LD_VAR 0 5
52787: IN
52788: OR
52789: PUSH
52790: LD_INT 45
52792: PUSH
52793: LD_VAR 0 5
52797: IN
52798: OR
52799: AND
52800: IFFALSE 53054
// begin hex := GetHexInfo ( x , y ) ;
52802: LD_ADDR_VAR 0 4
52806: PUSH
52807: LD_VAR 0 10
52811: PPUSH
52812: LD_VAR 0 11
52816: PPUSH
52817: CALL_OW 546
52821: ST_TO_ADDR
// if hex [ 1 ] then
52822: LD_VAR 0 4
52826: PUSH
52827: LD_INT 1
52829: ARRAY
52830: IFFALSE 52834
// exit ;
52832: GO 53237
// height := hex [ 2 ] ;
52834: LD_ADDR_VAR 0 15
52838: PUSH
52839: LD_VAR 0 4
52843: PUSH
52844: LD_INT 2
52846: ARRAY
52847: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52848: LD_ADDR_VAR 0 14
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: LD_INT 5
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// for i in tmp do
52871: LD_ADDR_VAR 0 8
52875: PUSH
52876: LD_VAR 0 14
52880: PUSH
52881: FOR_IN
52882: IFFALSE 53052
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52884: LD_ADDR_VAR 0 9
52888: PUSH
52889: LD_VAR 0 10
52893: PPUSH
52894: LD_VAR 0 8
52898: PPUSH
52899: LD_INT 5
52901: PPUSH
52902: CALL_OW 272
52906: PUSH
52907: LD_VAR 0 11
52911: PPUSH
52912: LD_VAR 0 8
52916: PPUSH
52917: LD_INT 5
52919: PPUSH
52920: CALL_OW 273
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52929: LD_VAR 0 9
52933: PUSH
52934: LD_INT 1
52936: ARRAY
52937: PPUSH
52938: LD_VAR 0 9
52942: PUSH
52943: LD_INT 2
52945: ARRAY
52946: PPUSH
52947: CALL_OW 488
52951: IFFALSE 53050
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52953: LD_ADDR_VAR 0 4
52957: PUSH
52958: LD_VAR 0 9
52962: PUSH
52963: LD_INT 1
52965: ARRAY
52966: PPUSH
52967: LD_VAR 0 9
52971: PUSH
52972: LD_INT 2
52974: ARRAY
52975: PPUSH
52976: CALL_OW 546
52980: ST_TO_ADDR
// if hex [ 1 ] then
52981: LD_VAR 0 4
52985: PUSH
52986: LD_INT 1
52988: ARRAY
52989: IFFALSE 52993
// continue ;
52991: GO 52881
// h := hex [ 2 ] ;
52993: LD_ADDR_VAR 0 13
52997: PUSH
52998: LD_VAR 0 4
53002: PUSH
53003: LD_INT 2
53005: ARRAY
53006: ST_TO_ADDR
// if h + 7 < height then
53007: LD_VAR 0 13
53011: PUSH
53012: LD_INT 7
53014: PLUS
53015: PUSH
53016: LD_VAR 0 15
53020: LESS
53021: IFFALSE 53050
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53023: LD_ADDR_VAR 0 18
53027: PUSH
53028: LD_INT 7
53030: PUSH
53031: LD_INT 28
53033: PUSH
53034: LD_INT 45
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: PUSH
53042: LD_VAR 0 12
53046: ARRAY
53047: ST_TO_ADDR
// break ;
53048: GO 53052
// end ; end ; end ;
53050: GO 52881
53052: POP
53053: POP
// end ; if not weapon then
53054: LD_VAR 0 18
53058: NOT
53059: IFFALSE 53119
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53061: LD_ADDR_VAR 0 5
53065: PUSH
53066: LD_VAR 0 5
53070: PUSH
53071: LD_INT 11
53073: PUSH
53074: LD_INT 30
53076: PUSH
53077: LD_INT 49
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: DIFF
53085: ST_TO_ADDR
// if not list then
53086: LD_VAR 0 5
53090: NOT
53091: IFFALSE 53095
// exit ;
53093: GO 53237
// weapon := list [ rand ( 1 , list ) ] ;
53095: LD_ADDR_VAR 0 18
53099: PUSH
53100: LD_VAR 0 5
53104: PUSH
53105: LD_INT 1
53107: PPUSH
53108: LD_VAR 0 5
53112: PPUSH
53113: CALL_OW 12
53117: ARRAY
53118: ST_TO_ADDR
// end ; if weapon then
53119: LD_VAR 0 18
53123: IFFALSE 53237
// begin tmp := CostOfWeapon ( weapon ) ;
53125: LD_ADDR_VAR 0 14
53129: PUSH
53130: LD_VAR 0 18
53134: PPUSH
53135: CALL_OW 451
53139: ST_TO_ADDR
// j := GetBase ( tower ) ;
53140: LD_ADDR_VAR 0 9
53144: PUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 274
53154: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53155: LD_VAR 0 9
53159: PPUSH
53160: LD_INT 1
53162: PPUSH
53163: CALL_OW 275
53167: PUSH
53168: LD_VAR 0 14
53172: PUSH
53173: LD_INT 1
53175: ARRAY
53176: GREATEREQUAL
53177: PUSH
53178: LD_VAR 0 9
53182: PPUSH
53183: LD_INT 2
53185: PPUSH
53186: CALL_OW 275
53190: PUSH
53191: LD_VAR 0 14
53195: PUSH
53196: LD_INT 2
53198: ARRAY
53199: GREATEREQUAL
53200: AND
53201: PUSH
53202: LD_VAR 0 9
53206: PPUSH
53207: LD_INT 3
53209: PPUSH
53210: CALL_OW 275
53214: PUSH
53215: LD_VAR 0 14
53219: PUSH
53220: LD_INT 3
53222: ARRAY
53223: GREATEREQUAL
53224: AND
53225: IFFALSE 53237
// result := weapon ;
53227: LD_ADDR_VAR 0 3
53231: PUSH
53232: LD_VAR 0 18
53236: ST_TO_ADDR
// end ; end ;
53237: LD_VAR 0 3
53241: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53242: LD_INT 0
53244: PPUSH
53245: PPUSH
// result := true ;
53246: LD_ADDR_VAR 0 3
53250: PUSH
53251: LD_INT 1
53253: ST_TO_ADDR
// if array1 = array2 then
53254: LD_VAR 0 1
53258: PUSH
53259: LD_VAR 0 2
53263: EQUAL
53264: IFFALSE 53324
// begin for i = 1 to array1 do
53266: LD_ADDR_VAR 0 4
53270: PUSH
53271: DOUBLE
53272: LD_INT 1
53274: DEC
53275: ST_TO_ADDR
53276: LD_VAR 0 1
53280: PUSH
53281: FOR_TO
53282: IFFALSE 53320
// if array1 [ i ] <> array2 [ i ] then
53284: LD_VAR 0 1
53288: PUSH
53289: LD_VAR 0 4
53293: ARRAY
53294: PUSH
53295: LD_VAR 0 2
53299: PUSH
53300: LD_VAR 0 4
53304: ARRAY
53305: NONEQUAL
53306: IFFALSE 53318
// begin result := false ;
53308: LD_ADDR_VAR 0 3
53312: PUSH
53313: LD_INT 0
53315: ST_TO_ADDR
// break ;
53316: GO 53320
// end ;
53318: GO 53281
53320: POP
53321: POP
// end else
53322: GO 53332
// result := false ;
53324: LD_ADDR_VAR 0 3
53328: PUSH
53329: LD_INT 0
53331: ST_TO_ADDR
// end ;
53332: LD_VAR 0 3
53336: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53337: LD_INT 0
53339: PPUSH
53340: PPUSH
// if not array1 or not array2 then
53341: LD_VAR 0 1
53345: NOT
53346: PUSH
53347: LD_VAR 0 2
53351: NOT
53352: OR
53353: IFFALSE 53357
// exit ;
53355: GO 53421
// result := true ;
53357: LD_ADDR_VAR 0 3
53361: PUSH
53362: LD_INT 1
53364: ST_TO_ADDR
// for i = 1 to array1 do
53365: LD_ADDR_VAR 0 4
53369: PUSH
53370: DOUBLE
53371: LD_INT 1
53373: DEC
53374: ST_TO_ADDR
53375: LD_VAR 0 1
53379: PUSH
53380: FOR_TO
53381: IFFALSE 53419
// if array1 [ i ] <> array2 [ i ] then
53383: LD_VAR 0 1
53387: PUSH
53388: LD_VAR 0 4
53392: ARRAY
53393: PUSH
53394: LD_VAR 0 2
53398: PUSH
53399: LD_VAR 0 4
53403: ARRAY
53404: NONEQUAL
53405: IFFALSE 53417
// begin result := false ;
53407: LD_ADDR_VAR 0 3
53411: PUSH
53412: LD_INT 0
53414: ST_TO_ADDR
// break ;
53415: GO 53419
// end ;
53417: GO 53380
53419: POP
53420: POP
// end ;
53421: LD_VAR 0 3
53425: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53426: LD_INT 0
53428: PPUSH
53429: PPUSH
53430: PPUSH
// pom := GetBase ( fac ) ;
53431: LD_ADDR_VAR 0 5
53435: PUSH
53436: LD_VAR 0 1
53440: PPUSH
53441: CALL_OW 274
53445: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53446: LD_ADDR_VAR 0 4
53450: PUSH
53451: LD_VAR 0 2
53455: PUSH
53456: LD_INT 1
53458: ARRAY
53459: PPUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_INT 2
53467: ARRAY
53468: PPUSH
53469: LD_VAR 0 2
53473: PUSH
53474: LD_INT 3
53476: ARRAY
53477: PPUSH
53478: LD_VAR 0 2
53482: PUSH
53483: LD_INT 4
53485: ARRAY
53486: PPUSH
53487: CALL_OW 449
53491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53492: LD_ADDR_VAR 0 3
53496: PUSH
53497: LD_VAR 0 5
53501: PPUSH
53502: LD_INT 1
53504: PPUSH
53505: CALL_OW 275
53509: PUSH
53510: LD_VAR 0 4
53514: PUSH
53515: LD_INT 1
53517: ARRAY
53518: GREATEREQUAL
53519: PUSH
53520: LD_VAR 0 5
53524: PPUSH
53525: LD_INT 2
53527: PPUSH
53528: CALL_OW 275
53532: PUSH
53533: LD_VAR 0 4
53537: PUSH
53538: LD_INT 2
53540: ARRAY
53541: GREATEREQUAL
53542: AND
53543: PUSH
53544: LD_VAR 0 5
53548: PPUSH
53549: LD_INT 3
53551: PPUSH
53552: CALL_OW 275
53556: PUSH
53557: LD_VAR 0 4
53561: PUSH
53562: LD_INT 3
53564: ARRAY
53565: GREATEREQUAL
53566: AND
53567: ST_TO_ADDR
// end ;
53568: LD_VAR 0 3
53572: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53573: LD_INT 0
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
// pom := GetBase ( building ) ;
53579: LD_ADDR_VAR 0 3
53583: PUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: CALL_OW 274
53593: ST_TO_ADDR
// if not pom then
53594: LD_VAR 0 3
53598: NOT
53599: IFFALSE 53603
// exit ;
53601: GO 53773
// btype := GetBType ( building ) ;
53603: LD_ADDR_VAR 0 5
53607: PUSH
53608: LD_VAR 0 1
53612: PPUSH
53613: CALL_OW 266
53617: ST_TO_ADDR
// if btype = b_armoury then
53618: LD_VAR 0 5
53622: PUSH
53623: LD_INT 4
53625: EQUAL
53626: IFFALSE 53636
// btype := b_barracks ;
53628: LD_ADDR_VAR 0 5
53632: PUSH
53633: LD_INT 5
53635: ST_TO_ADDR
// if btype = b_depot then
53636: LD_VAR 0 5
53640: PUSH
53641: LD_INT 0
53643: EQUAL
53644: IFFALSE 53654
// btype := b_warehouse ;
53646: LD_ADDR_VAR 0 5
53650: PUSH
53651: LD_INT 1
53653: ST_TO_ADDR
// if btype = b_workshop then
53654: LD_VAR 0 5
53658: PUSH
53659: LD_INT 2
53661: EQUAL
53662: IFFALSE 53672
// btype := b_factory ;
53664: LD_ADDR_VAR 0 5
53668: PUSH
53669: LD_INT 3
53671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53672: LD_ADDR_VAR 0 4
53676: PUSH
53677: LD_VAR 0 5
53681: PPUSH
53682: LD_VAR 0 1
53686: PPUSH
53687: CALL_OW 248
53691: PPUSH
53692: CALL_OW 450
53696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53697: LD_ADDR_VAR 0 2
53701: PUSH
53702: LD_VAR 0 3
53706: PPUSH
53707: LD_INT 1
53709: PPUSH
53710: CALL_OW 275
53714: PUSH
53715: LD_VAR 0 4
53719: PUSH
53720: LD_INT 1
53722: ARRAY
53723: GREATEREQUAL
53724: PUSH
53725: LD_VAR 0 3
53729: PPUSH
53730: LD_INT 2
53732: PPUSH
53733: CALL_OW 275
53737: PUSH
53738: LD_VAR 0 4
53742: PUSH
53743: LD_INT 2
53745: ARRAY
53746: GREATEREQUAL
53747: AND
53748: PUSH
53749: LD_VAR 0 3
53753: PPUSH
53754: LD_INT 3
53756: PPUSH
53757: CALL_OW 275
53761: PUSH
53762: LD_VAR 0 4
53766: PUSH
53767: LD_INT 3
53769: ARRAY
53770: GREATEREQUAL
53771: AND
53772: ST_TO_ADDR
// end ;
53773: LD_VAR 0 2
53777: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53778: LD_INT 0
53780: PPUSH
53781: PPUSH
53782: PPUSH
// pom := GetBase ( building ) ;
53783: LD_ADDR_VAR 0 4
53787: PUSH
53788: LD_VAR 0 1
53792: PPUSH
53793: CALL_OW 274
53797: ST_TO_ADDR
// if not pom then
53798: LD_VAR 0 4
53802: NOT
53803: IFFALSE 53807
// exit ;
53805: GO 53908
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53807: LD_ADDR_VAR 0 5
53811: PUSH
53812: LD_VAR 0 2
53816: PPUSH
53817: LD_VAR 0 1
53821: PPUSH
53822: CALL_OW 248
53826: PPUSH
53827: CALL_OW 450
53831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53832: LD_ADDR_VAR 0 3
53836: PUSH
53837: LD_VAR 0 4
53841: PPUSH
53842: LD_INT 1
53844: PPUSH
53845: CALL_OW 275
53849: PUSH
53850: LD_VAR 0 5
53854: PUSH
53855: LD_INT 1
53857: ARRAY
53858: GREATEREQUAL
53859: PUSH
53860: LD_VAR 0 4
53864: PPUSH
53865: LD_INT 2
53867: PPUSH
53868: CALL_OW 275
53872: PUSH
53873: LD_VAR 0 5
53877: PUSH
53878: LD_INT 2
53880: ARRAY
53881: GREATEREQUAL
53882: AND
53883: PUSH
53884: LD_VAR 0 4
53888: PPUSH
53889: LD_INT 3
53891: PPUSH
53892: CALL_OW 275
53896: PUSH
53897: LD_VAR 0 5
53901: PUSH
53902: LD_INT 3
53904: ARRAY
53905: GREATEREQUAL
53906: AND
53907: ST_TO_ADDR
// end ;
53908: LD_VAR 0 3
53912: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53913: LD_INT 0
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
// result := false ;
53926: LD_ADDR_VAR 0 8
53930: PUSH
53931: LD_INT 0
53933: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53934: LD_VAR 0 5
53938: NOT
53939: PUSH
53940: LD_VAR 0 1
53944: NOT
53945: OR
53946: PUSH
53947: LD_VAR 0 2
53951: NOT
53952: OR
53953: PUSH
53954: LD_VAR 0 3
53958: NOT
53959: OR
53960: IFFALSE 53964
// exit ;
53962: GO 54778
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53964: LD_ADDR_VAR 0 14
53968: PUSH
53969: LD_VAR 0 1
53973: PPUSH
53974: LD_VAR 0 2
53978: PPUSH
53979: LD_VAR 0 3
53983: PPUSH
53984: LD_VAR 0 4
53988: PPUSH
53989: LD_VAR 0 5
53993: PUSH
53994: LD_INT 1
53996: ARRAY
53997: PPUSH
53998: CALL_OW 248
54002: PPUSH
54003: LD_INT 0
54005: PPUSH
54006: CALL 56031 0 6
54010: ST_TO_ADDR
// if not hexes then
54011: LD_VAR 0 14
54015: NOT
54016: IFFALSE 54020
// exit ;
54018: GO 54778
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54020: LD_ADDR_VAR 0 17
54024: PUSH
54025: LD_VAR 0 5
54029: PPUSH
54030: LD_INT 22
54032: PUSH
54033: LD_VAR 0 13
54037: PPUSH
54038: CALL_OW 255
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 30
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 30
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PPUSH
54079: CALL_OW 72
54083: ST_TO_ADDR
// for i = 1 to hexes do
54084: LD_ADDR_VAR 0 9
54088: PUSH
54089: DOUBLE
54090: LD_INT 1
54092: DEC
54093: ST_TO_ADDR
54094: LD_VAR 0 14
54098: PUSH
54099: FOR_TO
54100: IFFALSE 54776
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54102: LD_ADDR_VAR 0 13
54106: PUSH
54107: LD_VAR 0 14
54111: PUSH
54112: LD_VAR 0 9
54116: ARRAY
54117: PUSH
54118: LD_INT 1
54120: ARRAY
54121: PPUSH
54122: LD_VAR 0 14
54126: PUSH
54127: LD_VAR 0 9
54131: ARRAY
54132: PUSH
54133: LD_INT 2
54135: ARRAY
54136: PPUSH
54137: CALL_OW 428
54141: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54142: LD_VAR 0 14
54146: PUSH
54147: LD_VAR 0 9
54151: ARRAY
54152: PUSH
54153: LD_INT 1
54155: ARRAY
54156: PPUSH
54157: LD_VAR 0 14
54161: PUSH
54162: LD_VAR 0 9
54166: ARRAY
54167: PUSH
54168: LD_INT 2
54170: ARRAY
54171: PPUSH
54172: CALL_OW 351
54176: PUSH
54177: LD_VAR 0 14
54181: PUSH
54182: LD_VAR 0 9
54186: ARRAY
54187: PUSH
54188: LD_INT 1
54190: ARRAY
54191: PPUSH
54192: LD_VAR 0 14
54196: PUSH
54197: LD_VAR 0 9
54201: ARRAY
54202: PUSH
54203: LD_INT 2
54205: ARRAY
54206: PPUSH
54207: CALL_OW 488
54211: NOT
54212: OR
54213: PUSH
54214: LD_VAR 0 13
54218: PPUSH
54219: CALL_OW 247
54223: PUSH
54224: LD_INT 3
54226: EQUAL
54227: OR
54228: IFFALSE 54234
// exit ;
54230: POP
54231: POP
54232: GO 54778
// if not tmp then
54234: LD_VAR 0 13
54238: NOT
54239: IFFALSE 54243
// continue ;
54241: GO 54099
// result := true ;
54243: LD_ADDR_VAR 0 8
54247: PUSH
54248: LD_INT 1
54250: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54251: LD_VAR 0 6
54255: PUSH
54256: LD_VAR 0 13
54260: PPUSH
54261: CALL_OW 247
54265: PUSH
54266: LD_INT 2
54268: EQUAL
54269: AND
54270: PUSH
54271: LD_VAR 0 13
54275: PPUSH
54276: CALL_OW 263
54280: PUSH
54281: LD_INT 1
54283: EQUAL
54284: AND
54285: IFFALSE 54449
// begin if IsDrivenBy ( tmp ) then
54287: LD_VAR 0 13
54291: PPUSH
54292: CALL_OW 311
54296: IFFALSE 54300
// continue ;
54298: GO 54099
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54300: LD_VAR 0 6
54304: PPUSH
54305: LD_INT 3
54307: PUSH
54308: LD_INT 60
54310: PUSH
54311: EMPTY
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 55
54323: PUSH
54324: EMPTY
54325: LIST
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PPUSH
54335: CALL_OW 72
54339: IFFALSE 54447
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54341: LD_ADDR_VAR 0 18
54345: PUSH
54346: LD_VAR 0 6
54350: PPUSH
54351: LD_INT 3
54353: PUSH
54354: LD_INT 60
54356: PUSH
54357: EMPTY
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: LD_INT 55
54369: PUSH
54370: EMPTY
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PPUSH
54381: CALL_OW 72
54385: PUSH
54386: LD_INT 1
54388: ARRAY
54389: ST_TO_ADDR
// if IsInUnit ( driver ) then
54390: LD_VAR 0 18
54394: PPUSH
54395: CALL_OW 310
54399: IFFALSE 54410
// ComExit ( driver ) ;
54401: LD_VAR 0 18
54405: PPUSH
54406: CALL 79812 0 1
// AddComEnterUnit ( driver , tmp ) ;
54410: LD_VAR 0 18
54414: PPUSH
54415: LD_VAR 0 13
54419: PPUSH
54420: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54424: LD_VAR 0 18
54428: PPUSH
54429: LD_VAR 0 7
54433: PPUSH
54434: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54438: LD_VAR 0 18
54442: PPUSH
54443: CALL_OW 181
// end ; continue ;
54447: GO 54099
// end ; if not cleaners or not tmp in cleaners then
54449: LD_VAR 0 6
54453: NOT
54454: PUSH
54455: LD_VAR 0 13
54459: PUSH
54460: LD_VAR 0 6
54464: IN
54465: NOT
54466: OR
54467: IFFALSE 54774
// begin if dep then
54469: LD_VAR 0 17
54473: IFFALSE 54609
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54475: LD_ADDR_VAR 0 16
54479: PUSH
54480: LD_VAR 0 17
54484: PUSH
54485: LD_INT 1
54487: ARRAY
54488: PPUSH
54489: CALL_OW 250
54493: PPUSH
54494: LD_VAR 0 17
54498: PUSH
54499: LD_INT 1
54501: ARRAY
54502: PPUSH
54503: CALL_OW 254
54507: PPUSH
54508: LD_INT 5
54510: PPUSH
54511: CALL_OW 272
54515: PUSH
54516: LD_VAR 0 17
54520: PUSH
54521: LD_INT 1
54523: ARRAY
54524: PPUSH
54525: CALL_OW 251
54529: PPUSH
54530: LD_VAR 0 17
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PPUSH
54539: CALL_OW 254
54543: PPUSH
54544: LD_INT 5
54546: PPUSH
54547: CALL_OW 273
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54556: LD_VAR 0 16
54560: PUSH
54561: LD_INT 1
54563: ARRAY
54564: PPUSH
54565: LD_VAR 0 16
54569: PUSH
54570: LD_INT 2
54572: ARRAY
54573: PPUSH
54574: CALL_OW 488
54578: IFFALSE 54609
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54580: LD_VAR 0 13
54584: PPUSH
54585: LD_VAR 0 16
54589: PUSH
54590: LD_INT 1
54592: ARRAY
54593: PPUSH
54594: LD_VAR 0 16
54598: PUSH
54599: LD_INT 2
54601: ARRAY
54602: PPUSH
54603: CALL_OW 111
// continue ;
54607: GO 54099
// end ; end ; r := GetDir ( tmp ) ;
54609: LD_ADDR_VAR 0 15
54613: PUSH
54614: LD_VAR 0 13
54618: PPUSH
54619: CALL_OW 254
54623: ST_TO_ADDR
// if r = 5 then
54624: LD_VAR 0 15
54628: PUSH
54629: LD_INT 5
54631: EQUAL
54632: IFFALSE 54642
// r := 0 ;
54634: LD_ADDR_VAR 0 15
54638: PUSH
54639: LD_INT 0
54641: ST_TO_ADDR
// for j = r to 5 do
54642: LD_ADDR_VAR 0 10
54646: PUSH
54647: DOUBLE
54648: LD_VAR 0 15
54652: DEC
54653: ST_TO_ADDR
54654: LD_INT 5
54656: PUSH
54657: FOR_TO
54658: IFFALSE 54772
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54660: LD_ADDR_VAR 0 11
54664: PUSH
54665: LD_VAR 0 13
54669: PPUSH
54670: CALL_OW 250
54674: PPUSH
54675: LD_VAR 0 10
54679: PPUSH
54680: LD_INT 2
54682: PPUSH
54683: CALL_OW 272
54687: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54688: LD_ADDR_VAR 0 12
54692: PUSH
54693: LD_VAR 0 13
54697: PPUSH
54698: CALL_OW 251
54702: PPUSH
54703: LD_VAR 0 10
54707: PPUSH
54708: LD_INT 2
54710: PPUSH
54711: CALL_OW 273
54715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54716: LD_VAR 0 11
54720: PPUSH
54721: LD_VAR 0 12
54725: PPUSH
54726: CALL_OW 488
54730: PUSH
54731: LD_VAR 0 11
54735: PPUSH
54736: LD_VAR 0 12
54740: PPUSH
54741: CALL_OW 428
54745: NOT
54746: AND
54747: IFFALSE 54770
// begin ComMoveXY ( tmp , _x , _y ) ;
54749: LD_VAR 0 13
54753: PPUSH
54754: LD_VAR 0 11
54758: PPUSH
54759: LD_VAR 0 12
54763: PPUSH
54764: CALL_OW 111
// break ;
54768: GO 54772
// end ; end ;
54770: GO 54657
54772: POP
54773: POP
// end ; end ;
54774: GO 54099
54776: POP
54777: POP
// end ;
54778: LD_VAR 0 8
54782: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54783: LD_INT 0
54785: PPUSH
// result := true ;
54786: LD_ADDR_VAR 0 3
54790: PUSH
54791: LD_INT 1
54793: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54794: LD_VAR 0 2
54798: PUSH
54799: LD_INT 24
54801: DOUBLE
54802: EQUAL
54803: IFTRUE 54813
54805: LD_INT 33
54807: DOUBLE
54808: EQUAL
54809: IFTRUE 54813
54811: GO 54838
54813: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54814: LD_ADDR_VAR 0 3
54818: PUSH
54819: LD_INT 32
54821: PPUSH
54822: LD_VAR 0 1
54826: PPUSH
54827: CALL_OW 321
54831: PUSH
54832: LD_INT 2
54834: EQUAL
54835: ST_TO_ADDR
54836: GO 55154
54838: LD_INT 20
54840: DOUBLE
54841: EQUAL
54842: IFTRUE 54846
54844: GO 54871
54846: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54847: LD_ADDR_VAR 0 3
54851: PUSH
54852: LD_INT 6
54854: PPUSH
54855: LD_VAR 0 1
54859: PPUSH
54860: CALL_OW 321
54864: PUSH
54865: LD_INT 2
54867: EQUAL
54868: ST_TO_ADDR
54869: GO 55154
54871: LD_INT 22
54873: DOUBLE
54874: EQUAL
54875: IFTRUE 54885
54877: LD_INT 36
54879: DOUBLE
54880: EQUAL
54881: IFTRUE 54885
54883: GO 54910
54885: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54886: LD_ADDR_VAR 0 3
54890: PUSH
54891: LD_INT 15
54893: PPUSH
54894: LD_VAR 0 1
54898: PPUSH
54899: CALL_OW 321
54903: PUSH
54904: LD_INT 2
54906: EQUAL
54907: ST_TO_ADDR
54908: GO 55154
54910: LD_INT 30
54912: DOUBLE
54913: EQUAL
54914: IFTRUE 54918
54916: GO 54943
54918: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54919: LD_ADDR_VAR 0 3
54923: PUSH
54924: LD_INT 20
54926: PPUSH
54927: LD_VAR 0 1
54931: PPUSH
54932: CALL_OW 321
54936: PUSH
54937: LD_INT 2
54939: EQUAL
54940: ST_TO_ADDR
54941: GO 55154
54943: LD_INT 28
54945: DOUBLE
54946: EQUAL
54947: IFTRUE 54957
54949: LD_INT 21
54951: DOUBLE
54952: EQUAL
54953: IFTRUE 54957
54955: GO 54982
54957: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54958: LD_ADDR_VAR 0 3
54962: PUSH
54963: LD_INT 21
54965: PPUSH
54966: LD_VAR 0 1
54970: PPUSH
54971: CALL_OW 321
54975: PUSH
54976: LD_INT 2
54978: EQUAL
54979: ST_TO_ADDR
54980: GO 55154
54982: LD_INT 16
54984: DOUBLE
54985: EQUAL
54986: IFTRUE 54990
54988: GO 55015
54990: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54991: LD_ADDR_VAR 0 3
54995: PUSH
54996: LD_INT 84
54998: PPUSH
54999: LD_VAR 0 1
55003: PPUSH
55004: CALL_OW 321
55008: PUSH
55009: LD_INT 2
55011: EQUAL
55012: ST_TO_ADDR
55013: GO 55154
55015: LD_INT 19
55017: DOUBLE
55018: EQUAL
55019: IFTRUE 55029
55021: LD_INT 23
55023: DOUBLE
55024: EQUAL
55025: IFTRUE 55029
55027: GO 55054
55029: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55030: LD_ADDR_VAR 0 3
55034: PUSH
55035: LD_INT 83
55037: PPUSH
55038: LD_VAR 0 1
55042: PPUSH
55043: CALL_OW 321
55047: PUSH
55048: LD_INT 2
55050: EQUAL
55051: ST_TO_ADDR
55052: GO 55154
55054: LD_INT 17
55056: DOUBLE
55057: EQUAL
55058: IFTRUE 55062
55060: GO 55087
55062: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55063: LD_ADDR_VAR 0 3
55067: PUSH
55068: LD_INT 39
55070: PPUSH
55071: LD_VAR 0 1
55075: PPUSH
55076: CALL_OW 321
55080: PUSH
55081: LD_INT 2
55083: EQUAL
55084: ST_TO_ADDR
55085: GO 55154
55087: LD_INT 18
55089: DOUBLE
55090: EQUAL
55091: IFTRUE 55095
55093: GO 55120
55095: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55096: LD_ADDR_VAR 0 3
55100: PUSH
55101: LD_INT 40
55103: PPUSH
55104: LD_VAR 0 1
55108: PPUSH
55109: CALL_OW 321
55113: PUSH
55114: LD_INT 2
55116: EQUAL
55117: ST_TO_ADDR
55118: GO 55154
55120: LD_INT 27
55122: DOUBLE
55123: EQUAL
55124: IFTRUE 55128
55126: GO 55153
55128: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55129: LD_ADDR_VAR 0 3
55133: PUSH
55134: LD_INT 35
55136: PPUSH
55137: LD_VAR 0 1
55141: PPUSH
55142: CALL_OW 321
55146: PUSH
55147: LD_INT 2
55149: EQUAL
55150: ST_TO_ADDR
55151: GO 55154
55153: POP
// end ;
55154: LD_VAR 0 3
55158: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55159: LD_INT 0
55161: PPUSH
55162: PPUSH
55163: PPUSH
55164: PPUSH
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
55171: PPUSH
// result := false ;
55172: LD_ADDR_VAR 0 6
55176: PUSH
55177: LD_INT 0
55179: ST_TO_ADDR
// if btype = b_depot then
55180: LD_VAR 0 2
55184: PUSH
55185: LD_INT 0
55187: EQUAL
55188: IFFALSE 55200
// begin result := true ;
55190: LD_ADDR_VAR 0 6
55194: PUSH
55195: LD_INT 1
55197: ST_TO_ADDR
// exit ;
55198: GO 56026
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55200: LD_VAR 0 1
55204: NOT
55205: PUSH
55206: LD_VAR 0 1
55210: PPUSH
55211: CALL_OW 266
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: IN
55226: NOT
55227: OR
55228: PUSH
55229: LD_VAR 0 2
55233: NOT
55234: OR
55235: PUSH
55236: LD_VAR 0 5
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: LD_INT 5
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: IN
55267: NOT
55268: OR
55269: PUSH
55270: LD_VAR 0 3
55274: PPUSH
55275: LD_VAR 0 4
55279: PPUSH
55280: CALL_OW 488
55284: NOT
55285: OR
55286: IFFALSE 55290
// exit ;
55288: GO 56026
// side := GetSide ( depot ) ;
55290: LD_ADDR_VAR 0 9
55294: PUSH
55295: LD_VAR 0 1
55299: PPUSH
55300: CALL_OW 255
55304: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55305: LD_VAR 0 9
55309: PPUSH
55310: LD_VAR 0 2
55314: PPUSH
55315: CALL 54783 0 2
55319: NOT
55320: IFFALSE 55324
// exit ;
55322: GO 56026
// pom := GetBase ( depot ) ;
55324: LD_ADDR_VAR 0 10
55328: PUSH
55329: LD_VAR 0 1
55333: PPUSH
55334: CALL_OW 274
55338: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55339: LD_ADDR_VAR 0 11
55343: PUSH
55344: LD_VAR 0 2
55348: PPUSH
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 248
55358: PPUSH
55359: CALL_OW 450
55363: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55364: LD_VAR 0 10
55368: PPUSH
55369: LD_INT 1
55371: PPUSH
55372: CALL_OW 275
55376: PUSH
55377: LD_VAR 0 11
55381: PUSH
55382: LD_INT 1
55384: ARRAY
55385: GREATEREQUAL
55386: PUSH
55387: LD_VAR 0 10
55391: PPUSH
55392: LD_INT 2
55394: PPUSH
55395: CALL_OW 275
55399: PUSH
55400: LD_VAR 0 11
55404: PUSH
55405: LD_INT 2
55407: ARRAY
55408: GREATEREQUAL
55409: AND
55410: PUSH
55411: LD_VAR 0 10
55415: PPUSH
55416: LD_INT 3
55418: PPUSH
55419: CALL_OW 275
55423: PUSH
55424: LD_VAR 0 11
55428: PUSH
55429: LD_INT 3
55431: ARRAY
55432: GREATEREQUAL
55433: AND
55434: NOT
55435: IFFALSE 55439
// exit ;
55437: GO 56026
// if GetBType ( depot ) = b_depot then
55439: LD_VAR 0 1
55443: PPUSH
55444: CALL_OW 266
55448: PUSH
55449: LD_INT 0
55451: EQUAL
55452: IFFALSE 55464
// dist := 28 else
55454: LD_ADDR_VAR 0 14
55458: PUSH
55459: LD_INT 28
55461: ST_TO_ADDR
55462: GO 55472
// dist := 36 ;
55464: LD_ADDR_VAR 0 14
55468: PUSH
55469: LD_INT 36
55471: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55472: LD_VAR 0 1
55476: PPUSH
55477: LD_VAR 0 3
55481: PPUSH
55482: LD_VAR 0 4
55486: PPUSH
55487: CALL_OW 297
55491: PUSH
55492: LD_VAR 0 14
55496: GREATER
55497: IFFALSE 55501
// exit ;
55499: GO 56026
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55501: LD_ADDR_VAR 0 12
55505: PUSH
55506: LD_VAR 0 2
55510: PPUSH
55511: LD_VAR 0 3
55515: PPUSH
55516: LD_VAR 0 4
55520: PPUSH
55521: LD_VAR 0 5
55525: PPUSH
55526: LD_VAR 0 1
55530: PPUSH
55531: CALL_OW 248
55535: PPUSH
55536: LD_INT 0
55538: PPUSH
55539: CALL 56031 0 6
55543: ST_TO_ADDR
// if not hexes then
55544: LD_VAR 0 12
55548: NOT
55549: IFFALSE 55553
// exit ;
55551: GO 56026
// hex := GetHexInfo ( x , y ) ;
55553: LD_ADDR_VAR 0 15
55557: PUSH
55558: LD_VAR 0 3
55562: PPUSH
55563: LD_VAR 0 4
55567: PPUSH
55568: CALL_OW 546
55572: ST_TO_ADDR
// if hex [ 1 ] then
55573: LD_VAR 0 15
55577: PUSH
55578: LD_INT 1
55580: ARRAY
55581: IFFALSE 55585
// exit ;
55583: GO 56026
// height := hex [ 2 ] ;
55585: LD_ADDR_VAR 0 13
55589: PUSH
55590: LD_VAR 0 15
55594: PUSH
55595: LD_INT 2
55597: ARRAY
55598: ST_TO_ADDR
// for i = 1 to hexes do
55599: LD_ADDR_VAR 0 7
55603: PUSH
55604: DOUBLE
55605: LD_INT 1
55607: DEC
55608: ST_TO_ADDR
55609: LD_VAR 0 12
55613: PUSH
55614: FOR_TO
55615: IFFALSE 55945
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55617: LD_VAR 0 12
55621: PUSH
55622: LD_VAR 0 7
55626: ARRAY
55627: PUSH
55628: LD_INT 1
55630: ARRAY
55631: PPUSH
55632: LD_VAR 0 12
55636: PUSH
55637: LD_VAR 0 7
55641: ARRAY
55642: PUSH
55643: LD_INT 2
55645: ARRAY
55646: PPUSH
55647: CALL_OW 488
55651: NOT
55652: PUSH
55653: LD_VAR 0 12
55657: PUSH
55658: LD_VAR 0 7
55662: ARRAY
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PPUSH
55668: LD_VAR 0 12
55672: PUSH
55673: LD_VAR 0 7
55677: ARRAY
55678: PUSH
55679: LD_INT 2
55681: ARRAY
55682: PPUSH
55683: CALL_OW 428
55687: PUSH
55688: LD_INT 0
55690: GREATER
55691: OR
55692: PUSH
55693: LD_VAR 0 12
55697: PUSH
55698: LD_VAR 0 7
55702: ARRAY
55703: PUSH
55704: LD_INT 1
55706: ARRAY
55707: PPUSH
55708: LD_VAR 0 12
55712: PUSH
55713: LD_VAR 0 7
55717: ARRAY
55718: PUSH
55719: LD_INT 2
55721: ARRAY
55722: PPUSH
55723: CALL_OW 351
55727: OR
55728: IFFALSE 55734
// exit ;
55730: POP
55731: POP
55732: GO 56026
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55734: LD_ADDR_VAR 0 8
55738: PUSH
55739: LD_VAR 0 12
55743: PUSH
55744: LD_VAR 0 7
55748: ARRAY
55749: PUSH
55750: LD_INT 1
55752: ARRAY
55753: PPUSH
55754: LD_VAR 0 12
55758: PUSH
55759: LD_VAR 0 7
55763: ARRAY
55764: PUSH
55765: LD_INT 2
55767: ARRAY
55768: PPUSH
55769: CALL_OW 546
55773: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55774: LD_VAR 0 8
55778: PUSH
55779: LD_INT 1
55781: ARRAY
55782: PUSH
55783: LD_VAR 0 8
55787: PUSH
55788: LD_INT 2
55790: ARRAY
55791: PUSH
55792: LD_VAR 0 13
55796: PUSH
55797: LD_INT 2
55799: PLUS
55800: GREATER
55801: OR
55802: PUSH
55803: LD_VAR 0 8
55807: PUSH
55808: LD_INT 2
55810: ARRAY
55811: PUSH
55812: LD_VAR 0 13
55816: PUSH
55817: LD_INT 2
55819: MINUS
55820: LESS
55821: OR
55822: PUSH
55823: LD_VAR 0 8
55827: PUSH
55828: LD_INT 3
55830: ARRAY
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 8
55837: PUSH
55838: LD_INT 9
55840: PUSH
55841: LD_INT 10
55843: PUSH
55844: LD_INT 11
55846: PUSH
55847: LD_INT 12
55849: PUSH
55850: LD_INT 13
55852: PUSH
55853: LD_INT 16
55855: PUSH
55856: LD_INT 17
55858: PUSH
55859: LD_INT 18
55861: PUSH
55862: LD_INT 19
55864: PUSH
55865: LD_INT 20
55867: PUSH
55868: LD_INT 21
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: IN
55886: NOT
55887: OR
55888: PUSH
55889: LD_VAR 0 8
55893: PUSH
55894: LD_INT 5
55896: ARRAY
55897: NOT
55898: OR
55899: PUSH
55900: LD_VAR 0 8
55904: PUSH
55905: LD_INT 6
55907: ARRAY
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 7
55917: PUSH
55918: LD_INT 9
55920: PUSH
55921: LD_INT 10
55923: PUSH
55924: LD_INT 11
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: IN
55935: NOT
55936: OR
55937: IFFALSE 55943
// exit ;
55939: POP
55940: POP
55941: GO 56026
// end ;
55943: GO 55614
55945: POP
55946: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55947: LD_VAR 0 9
55951: PPUSH
55952: LD_VAR 0 3
55956: PPUSH
55957: LD_VAR 0 4
55961: PPUSH
55962: LD_INT 20
55964: PPUSH
55965: CALL 47949 0 4
55969: PUSH
55970: LD_INT 4
55972: ARRAY
55973: IFFALSE 55977
// exit ;
55975: GO 56026
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55977: LD_VAR 0 2
55981: PUSH
55982: LD_INT 29
55984: PUSH
55985: LD_INT 30
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: IN
55992: PUSH
55993: LD_VAR 0 3
55997: PPUSH
55998: LD_VAR 0 4
56002: PPUSH
56003: LD_VAR 0 9
56007: PPUSH
56008: CALL_OW 440
56012: NOT
56013: AND
56014: IFFALSE 56018
// exit ;
56016: GO 56026
// result := true ;
56018: LD_ADDR_VAR 0 6
56022: PUSH
56023: LD_INT 1
56025: ST_TO_ADDR
// end ;
56026: LD_VAR 0 6
56030: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56031: LD_INT 0
56033: PPUSH
56034: PPUSH
56035: PPUSH
56036: PPUSH
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
56044: PPUSH
56045: PPUSH
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
56050: PPUSH
56051: PPUSH
56052: PPUSH
56053: PPUSH
56054: PPUSH
56055: PPUSH
56056: PPUSH
56057: PPUSH
56058: PPUSH
56059: PPUSH
56060: PPUSH
56061: PPUSH
56062: PPUSH
56063: PPUSH
56064: PPUSH
56065: PPUSH
56066: PPUSH
56067: PPUSH
56068: PPUSH
56069: PPUSH
56070: PPUSH
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
56077: PPUSH
56078: PPUSH
56079: PPUSH
56080: PPUSH
56081: PPUSH
56082: PPUSH
56083: PPUSH
56084: PPUSH
56085: PPUSH
56086: PPUSH
56087: PPUSH
56088: PPUSH
56089: PPUSH
56090: PPUSH
// result = [ ] ;
56091: LD_ADDR_VAR 0 7
56095: PUSH
56096: EMPTY
56097: ST_TO_ADDR
// temp_list = [ ] ;
56098: LD_ADDR_VAR 0 9
56102: PUSH
56103: EMPTY
56104: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56105: LD_VAR 0 4
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 3
56121: PUSH
56122: LD_INT 4
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: IN
56136: NOT
56137: PUSH
56138: LD_VAR 0 1
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: IN
56153: PUSH
56154: LD_VAR 0 5
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: LIST
56172: IN
56173: NOT
56174: AND
56175: OR
56176: IFFALSE 56180
// exit ;
56178: GO 74571
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56180: LD_VAR 0 1
56184: PUSH
56185: LD_INT 6
56187: PUSH
56188: LD_INT 7
56190: PUSH
56191: LD_INT 8
56193: PUSH
56194: LD_INT 13
56196: PUSH
56197: LD_INT 12
56199: PUSH
56200: LD_INT 15
56202: PUSH
56203: LD_INT 11
56205: PUSH
56206: LD_INT 14
56208: PUSH
56209: LD_INT 10
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: IN
56223: IFFALSE 56233
// btype = b_lab ;
56225: LD_ADDR_VAR 0 1
56229: PUSH
56230: LD_INT 6
56232: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56233: LD_VAR 0 6
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: IN
56252: NOT
56253: PUSH
56254: LD_VAR 0 1
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: LD_INT 6
56273: PUSH
56274: LD_INT 36
56276: PUSH
56277: LD_INT 4
56279: PUSH
56280: LD_INT 5
56282: PUSH
56283: LD_INT 31
56285: PUSH
56286: LD_INT 32
56288: PUSH
56289: LD_INT 33
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: IN
56305: NOT
56306: PUSH
56307: LD_VAR 0 6
56311: PUSH
56312: LD_INT 1
56314: EQUAL
56315: AND
56316: OR
56317: PUSH
56318: LD_VAR 0 1
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: IN
56333: NOT
56334: PUSH
56335: LD_VAR 0 6
56339: PUSH
56340: LD_INT 2
56342: EQUAL
56343: AND
56344: OR
56345: IFFALSE 56355
// mode = 0 ;
56347: LD_ADDR_VAR 0 6
56351: PUSH
56352: LD_INT 0
56354: ST_TO_ADDR
// case mode of 0 :
56355: LD_VAR 0 6
56359: PUSH
56360: LD_INT 0
56362: DOUBLE
56363: EQUAL
56364: IFTRUE 56368
56366: GO 67821
56368: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56369: LD_ADDR_VAR 0 11
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56562: LD_ADDR_VAR 0 12
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56758: LD_ADDR_VAR 0 13
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 3
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56957: LD_ADDR_VAR 0 14
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57153: LD_ADDR_VAR 0 15
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 3
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57346: LD_ADDR_VAR 0 16
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 3
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57539: LD_ADDR_VAR 0 17
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57769: LD_ADDR_VAR 0 18
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57999: LD_ADDR_VAR 0 19
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58229: LD_ADDR_VAR 0 20
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58459: LD_ADDR_VAR 0 21
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58689: LD_ADDR_VAR 0 22
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58919: LD_ADDR_VAR 0 23
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59199: LD_ADDR_VAR 0 24
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59475: LD_ADDR_VAR 0 25
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59749: LD_ADDR_VAR 0 26
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60025: LD_ADDR_VAR 0 27
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 3
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: NEG
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60305: LD_ADDR_VAR 0 28
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60587: LD_ADDR_VAR 0 29
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 2
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 3
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60866: LD_ADDR_VAR 0 30
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 3
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 3
61109: NEG
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61144: LD_ADDR_VAR 0 31
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: NEG
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: LD_INT 3
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61422: LD_ADDR_VAR 0 32
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61700: LD_ADDR_VAR 0 33
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: NEG
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: LD_INT 3
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: NEG
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61979: LD_ADDR_VAR 0 34
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 2
62158: NEG
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62259: LD_ADDR_VAR 0 35
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62371: LD_ADDR_VAR 0 36
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62483: LD_ADDR_VAR 0 37
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62595: LD_ADDR_VAR 0 38
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62707: LD_ADDR_VAR 0 39
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62819: LD_ADDR_VAR 0 40
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62931: LD_ADDR_VAR 0 41
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: LD_INT 2
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: LD_INT 2
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 3
63205: NEG
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 3
63240: NEG
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63281: LD_ADDR_VAR 0 42
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: LD_INT 1
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: NEG
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 3
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: LD_INT 3
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: PUSH
63538: LD_INT 3
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 3
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 3
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 3
63578: NEG
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: NEG
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63631: LD_ADDR_VAR 0 43
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 3
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 3
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: LD_INT 3
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 3
63927: NEG
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63979: LD_ADDR_VAR 0 44
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: LD_INT 2
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 3
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 3
64222: PUSH
64223: LD_INT 3
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 3
64253: NEG
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: LD_INT 2
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 3
64288: NEG
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64329: LD_ADDR_VAR 0 45
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: NEG
64411: PUSH
64412: LD_INT 2
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 2
64454: PUSH
64455: LD_INT 2
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 2
64519: NEG
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: LD_INT 3
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 3
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 2
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 3
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 3
64626: NEG
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 3
64638: NEG
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64679: LD_ADDR_VAR 0 46
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: LD_INT 2
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 2
64845: NEG
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: NEG
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: LD_INT 3
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: LD_INT 2
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 3
64975: NEG
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 3
64986: NEG
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65027: LD_ADDR_VAR 0 47
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: LD_INT 2
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 2
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 2
65154: NEG
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65178: LD_ADDR_VAR 0 48
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: LD_INT 2
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65325: LD_ADDR_VAR 0 49
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: LD_INT 2
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65469: LD_ADDR_VAR 0 50
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 1
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65613: LD_ADDR_VAR 0 51
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65760: LD_ADDR_VAR 0 52
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: LD_INT 1
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65911: LD_ADDR_VAR 0 53
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 2
66046: PUSH
66047: LD_INT 2
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 2
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66141: LD_ADDR_VAR 0 54
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 0
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: LD_INT 1
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: LD_INT 2
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66371: LD_ADDR_VAR 0 55
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: LD_INT 1
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: LD_INT 2
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 2
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: PUSH
66517: LD_INT 2
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: LD_INT 1
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: LD_INT 2
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66601: LD_ADDR_VAR 0 56
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: LD_INT 1
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: LD_INT 2
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 2
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 2
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: LD_INT 2
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: NEG
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: NEG
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 2
66788: NEG
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66831: LD_ADDR_VAR 0 57
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: LD_INT 1
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 1
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: LD_INT 1
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: LD_INT 0
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: LD_INT 2
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: LD_INT 1
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: LD_INT 2
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: LD_INT 2
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 2
67007: NEG
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 2
67018: NEG
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: LD_INT 2
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67061: LD_ADDR_VAR 0 58
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: LD_INT 1
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 2
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 1
67165: PUSH
67166: LD_INT 1
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 2
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: LD_INT 2
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: LD_INT 2
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 2
67237: NEG
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 2
67260: NEG
67261: PUSH
67262: LD_INT 2
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67291: LD_ADDR_VAR 0 59
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 1
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67379: LD_ADDR_VAR 0 60
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: LD_INT 1
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67467: LD_ADDR_VAR 0 61
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: LD_INT 0
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_INT 1
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 1
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: LD_INT 1
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: NEG
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67555: LD_ADDR_VAR 0 62
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 1
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 1
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67643: LD_ADDR_VAR 0 63
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 1
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67731: LD_ADDR_VAR 0 64
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 1
67789: NEG
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: ST_TO_ADDR
// end ; 1 :
67819: GO 73716
67821: LD_INT 1
67823: DOUBLE
67824: EQUAL
67825: IFTRUE 67829
67827: GO 70452
67829: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67830: LD_ADDR_VAR 0 11
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: LD_INT 3
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 3
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: PUSH
67861: LD_INT 2
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: LIST
67873: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67874: LD_ADDR_VAR 0 12
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 3
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: LIST
67914: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67915: LD_ADDR_VAR 0 13
67919: PUSH
67920: LD_INT 3
67922: PUSH
67923: LD_INT 2
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: LD_INT 3
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: LD_INT 3
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: LIST
67954: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67955: LD_ADDR_VAR 0 14
67959: PUSH
67960: LD_INT 1
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 0
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 1
67982: NEG
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67996: LD_ADDR_VAR 0 15
68000: PUSH
68001: LD_INT 2
68003: NEG
68004: PUSH
68005: LD_INT 1
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: NEG
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68040: LD_ADDR_VAR 0 16
68044: PUSH
68045: LD_INT 2
68047: NEG
68048: PUSH
68049: LD_INT 3
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 3
68059: NEG
68060: PUSH
68061: LD_INT 2
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: LD_INT 3
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68086: LD_ADDR_VAR 0 17
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: LD_INT 3
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: LD_INT 3
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: LD_INT 2
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68130: LD_ADDR_VAR 0 18
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 3
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: LIST
68170: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68171: LD_ADDR_VAR 0 19
68175: PUSH
68176: LD_INT 3
68178: PUSH
68179: LD_INT 2
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 2
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: LIST
68210: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68211: LD_ADDR_VAR 0 20
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: LD_INT 3
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 1
68238: NEG
68239: PUSH
68240: LD_INT 2
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: LIST
68251: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68252: LD_ADDR_VAR 0 21
68256: PUSH
68257: LD_INT 2
68259: NEG
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 3
68270: NEG
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 3
68281: NEG
68282: PUSH
68283: LD_INT 1
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: LIST
68295: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68296: LD_ADDR_VAR 0 22
68300: PUSH
68301: LD_INT 2
68303: NEG
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 3
68315: NEG
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 3
68327: NEG
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: LIST
68341: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68342: LD_ADDR_VAR 0 23
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: LD_INT 3
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 1
68360: NEG
68361: PUSH
68362: LD_INT 4
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: LD_INT 3
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68386: LD_ADDR_VAR 0 24
68390: PUSH
68391: LD_INT 3
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 3
68403: PUSH
68404: LD_INT 1
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 4
68414: PUSH
68415: LD_INT 1
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: LIST
68426: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68427: LD_ADDR_VAR 0 25
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 4
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 3
68454: PUSH
68455: LD_INT 4
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: LIST
68466: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68467: LD_ADDR_VAR 0 26
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: LD_INT 3
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 1
68484: PUSH
68485: LD_INT 4
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: LD_INT 3
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: LIST
68507: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68508: LD_ADDR_VAR 0 27
68512: PUSH
68513: LD_INT 3
68515: NEG
68516: PUSH
68517: LD_INT 0
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 3
68526: NEG
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 4
68537: NEG
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: LIST
68551: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68552: LD_ADDR_VAR 0 28
68556: PUSH
68557: LD_INT 3
68559: NEG
68560: PUSH
68561: LD_INT 3
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 3
68571: NEG
68572: PUSH
68573: LD_INT 4
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 4
68583: NEG
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68598: LD_ADDR_VAR 0 29
68602: PUSH
68603: LD_INT 1
68605: NEG
68606: PUSH
68607: LD_INT 3
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: LD_INT 3
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: LD_INT 2
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 1
68639: NEG
68640: PUSH
68641: LD_INT 4
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: LD_INT 4
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 1
68662: PUSH
68663: LD_INT 3
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 1
68673: NEG
68674: PUSH
68675: LD_INT 5
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 0
68685: PUSH
68686: LD_INT 5
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: PUSH
68697: LD_INT 4
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 1
68707: NEG
68708: PUSH
68709: LD_INT 6
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: LD_INT 6
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: LD_INT 5
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68753: LD_ADDR_VAR 0 30
68757: PUSH
68758: LD_INT 2
68760: PUSH
68761: LD_INT 1
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 3
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: LD_INT 1
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 3
68791: PUSH
68792: LD_INT 1
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 4
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 4
68812: PUSH
68813: LD_INT 1
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 4
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 5
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 5
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 5
68853: PUSH
68854: LD_INT 1
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 6
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 6
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68896: LD_ADDR_VAR 0 31
68900: PUSH
68901: LD_INT 3
68903: PUSH
68904: LD_INT 2
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 2
68923: PUSH
68924: LD_INT 3
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 4
68933: PUSH
68934: LD_INT 3
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 4
68943: PUSH
68944: LD_INT 4
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 3
68953: PUSH
68954: LD_INT 4
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 5
68963: PUSH
68964: LD_INT 4
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 5
68973: PUSH
68974: LD_INT 5
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 4
68983: PUSH
68984: LD_INT 5
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 6
68993: PUSH
68994: LD_INT 5
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 6
69003: PUSH
69004: LD_INT 6
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 5
69013: PUSH
69014: LD_INT 6
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69035: LD_ADDR_VAR 0 32
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: LD_INT 3
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: LD_INT 2
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: LD_INT 4
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 0
69083: PUSH
69084: LD_INT 4
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 1
69093: NEG
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 1
69104: PUSH
69105: LD_INT 5
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 0
69114: PUSH
69115: LD_INT 5
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 1
69124: NEG
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: LD_INT 6
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 6
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: NEG
69156: PUSH
69157: LD_INT 5
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69178: LD_ADDR_VAR 0 33
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: LD_INT 1
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: LD_INT 0
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 3
69207: NEG
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 4
69230: NEG
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 4
69241: NEG
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 4
69253: NEG
69254: PUSH
69255: LD_INT 1
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 5
69264: NEG
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 5
69275: NEG
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 5
69287: NEG
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 6
69298: NEG
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 6
69309: NEG
69310: PUSH
69311: LD_INT 1
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69333: LD_ADDR_VAR 0 34
69337: PUSH
69338: LD_INT 2
69340: NEG
69341: PUSH
69342: LD_INT 3
69344: NEG
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 3
69352: NEG
69353: PUSH
69354: LD_INT 2
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 3
69364: NEG
69365: PUSH
69366: LD_INT 3
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: LD_INT 4
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: LD_INT 3
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 4
69400: NEG
69401: PUSH
69402: LD_INT 4
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 4
69412: NEG
69413: PUSH
69414: LD_INT 5
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 5
69424: NEG
69425: PUSH
69426: LD_INT 4
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 5
69436: NEG
69437: PUSH
69438: LD_INT 5
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 5
69448: NEG
69449: PUSH
69450: LD_INT 6
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 6
69460: NEG
69461: PUSH
69462: LD_INT 5
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 6
69472: NEG
69473: PUSH
69474: LD_INT 6
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69496: LD_ADDR_VAR 0 41
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: NEG
69515: PUSH
69516: LD_INT 3
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: LD_INT 2
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: LIST
69539: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69540: LD_ADDR_VAR 0 42
69544: PUSH
69545: LD_INT 2
69547: PUSH
69548: LD_INT 0
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 2
69557: PUSH
69558: LD_INT 1
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 1
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: LIST
69580: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69581: LD_ADDR_VAR 0 43
69585: PUSH
69586: LD_INT 2
69588: PUSH
69589: LD_INT 2
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: LD_INT 2
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 2
69608: PUSH
69609: LD_INT 3
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: LIST
69620: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69621: LD_ADDR_VAR 0 44
69625: PUSH
69626: LD_INT 0
69628: PUSH
69629: LD_INT 2
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: LD_INT 3
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: LIST
69661: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69662: LD_ADDR_VAR 0 45
69666: PUSH
69667: LD_INT 2
69669: NEG
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 2
69680: NEG
69681: PUSH
69682: LD_INT 1
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: LD_INT 1
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: LIST
69705: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69706: LD_ADDR_VAR 0 46
69710: PUSH
69711: LD_INT 2
69713: NEG
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 2
69725: NEG
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 3
69737: NEG
69738: PUSH
69739: LD_INT 2
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: LIST
69751: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69752: LD_ADDR_VAR 0 47
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: LD_INT 3
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: LD_INT 3
69775: NEG
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69785: LD_ADDR_VAR 0 48
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: LD_INT 2
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: LD_INT 1
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69816: LD_ADDR_VAR 0 49
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 3
69833: PUSH
69834: LD_INT 2
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69845: LD_ADDR_VAR 0 50
69849: PUSH
69850: LD_INT 2
69852: PUSH
69853: LD_INT 3
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69874: LD_ADDR_VAR 0 51
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: LD_INT 2
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 2
69892: NEG
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69905: LD_ADDR_VAR 0 52
69909: PUSH
69910: LD_INT 3
69912: NEG
69913: PUSH
69914: LD_INT 1
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 3
69924: NEG
69925: PUSH
69926: LD_INT 2
69928: NEG
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69938: LD_ADDR_VAR 0 53
69942: PUSH
69943: LD_INT 1
69945: NEG
69946: PUSH
69947: LD_INT 3
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 0
69957: PUSH
69958: LD_INT 3
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 1
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: LIST
69981: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69982: LD_ADDR_VAR 0 54
69986: PUSH
69987: LD_INT 2
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 3
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70023: LD_ADDR_VAR 0 55
70027: PUSH
70028: LD_INT 3
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 2
70050: PUSH
70051: LD_INT 3
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: LIST
70062: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70063: LD_ADDR_VAR 0 56
70067: PUSH
70068: LD_INT 1
70070: PUSH
70071: LD_INT 3
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 1
70090: NEG
70091: PUSH
70092: LD_INT 2
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: LIST
70103: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70104: LD_ADDR_VAR 0 57
70108: PUSH
70109: LD_INT 2
70111: NEG
70112: PUSH
70113: LD_INT 1
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 3
70122: NEG
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 3
70133: NEG
70134: PUSH
70135: LD_INT 1
70137: NEG
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: LIST
70147: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70148: LD_ADDR_VAR 0 58
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: LD_INT 3
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: NEG
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70194: LD_ADDR_VAR 0 59
70198: PUSH
70199: LD_INT 1
70201: NEG
70202: PUSH
70203: LD_INT 2
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 0
70213: PUSH
70214: LD_INT 2
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: PUSH
70225: LD_INT 1
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: LIST
70237: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70238: LD_ADDR_VAR 0 60
70242: PUSH
70243: LD_INT 1
70245: PUSH
70246: LD_INT 1
70248: NEG
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 2
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: LIST
70278: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70279: LD_ADDR_VAR 0 61
70283: PUSH
70284: LD_INT 2
70286: PUSH
70287: LD_INT 1
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 2
70296: PUSH
70297: LD_INT 2
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 1
70306: PUSH
70307: LD_INT 2
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70319: LD_ADDR_VAR 0 62
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: LD_INT 2
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: LD_INT 2
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 1
70346: NEG
70347: PUSH
70348: LD_INT 1
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: LIST
70359: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70360: LD_ADDR_VAR 0 63
70364: PUSH
70365: LD_INT 1
70367: NEG
70368: PUSH
70369: LD_INT 1
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 2
70378: NEG
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 2
70389: NEG
70390: PUSH
70391: LD_INT 1
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: LIST
70403: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70404: LD_ADDR_VAR 0 64
70408: PUSH
70409: LD_INT 1
70411: NEG
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 2
70435: NEG
70436: PUSH
70437: LD_INT 2
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: LIST
70449: ST_TO_ADDR
// end ; 2 :
70450: GO 73716
70452: LD_INT 2
70454: DOUBLE
70455: EQUAL
70456: IFTRUE 70460
70458: GO 73715
70460: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70461: LD_ADDR_VAR 0 29
70465: PUSH
70466: LD_INT 4
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 4
70478: PUSH
70479: LD_INT 1
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 5
70489: PUSH
70490: LD_INT 0
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 5
70499: PUSH
70500: LD_INT 1
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 4
70509: PUSH
70510: LD_INT 1
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: PUSH
70530: LD_INT 1
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 3
70540: PUSH
70541: LD_INT 2
70543: NEG
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 5
70551: PUSH
70552: LD_INT 2
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 3
70561: PUSH
70562: LD_INT 3
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 3
70571: PUSH
70572: LD_INT 2
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 4
70581: PUSH
70582: LD_INT 3
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 4
70591: PUSH
70592: LD_INT 4
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 3
70601: PUSH
70602: LD_INT 4
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 2
70611: PUSH
70612: LD_INT 3
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 2
70621: PUSH
70622: LD_INT 2
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 4
70631: PUSH
70632: LD_INT 2
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 2
70641: PUSH
70642: LD_INT 4
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: LD_INT 4
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: LD_INT 3
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: LD_INT 5
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 0
70691: PUSH
70692: LD_INT 5
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 1
70701: NEG
70702: PUSH
70703: LD_INT 4
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 1
70712: NEG
70713: PUSH
70714: LD_INT 3
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 2
70723: PUSH
70724: LD_INT 5
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 2
70733: NEG
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: NEG
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 3
70755: NEG
70756: PUSH
70757: LD_INT 1
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 2
70767: NEG
70768: PUSH
70769: LD_INT 0
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 2
70778: NEG
70779: PUSH
70780: LD_INT 1
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: LD_INT 1
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 4
70800: NEG
70801: PUSH
70802: LD_INT 0
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 4
70811: NEG
70812: PUSH
70813: LD_INT 1
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 4
70823: NEG
70824: PUSH
70825: LD_INT 2
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 2
70835: NEG
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 4
70846: NEG
70847: PUSH
70848: LD_INT 4
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 4
70858: NEG
70859: PUSH
70860: LD_INT 5
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 3
70870: NEG
70871: PUSH
70872: LD_INT 4
70874: NEG
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 3
70882: NEG
70883: PUSH
70884: LD_INT 3
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 4
70894: NEG
70895: PUSH
70896: LD_INT 3
70898: NEG
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 5
70906: NEG
70907: PUSH
70908: LD_INT 4
70910: NEG
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 5
70918: NEG
70919: PUSH
70920: LD_INT 5
70922: NEG
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 3
70930: NEG
70931: PUSH
70932: LD_INT 5
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 5
70942: NEG
70943: PUSH
70944: LD_INT 3
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70999: LD_ADDR_VAR 0 30
71003: PUSH
71004: LD_INT 4
71006: PUSH
71007: LD_INT 4
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 4
71016: PUSH
71017: LD_INT 3
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 5
71026: PUSH
71027: LD_INT 4
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 5
71036: PUSH
71037: LD_INT 5
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 4
71046: PUSH
71047: LD_INT 5
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 3
71056: PUSH
71057: LD_INT 4
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: LD_INT 3
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 5
71076: PUSH
71077: LD_INT 3
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: LD_INT 5
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: LD_INT 3
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 2
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 1
71116: PUSH
71117: LD_INT 3
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: LD_INT 4
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: LD_INT 4
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 1
71146: NEG
71147: PUSH
71148: LD_INT 3
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 1
71157: NEG
71158: PUSH
71159: LD_INT 2
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 2
71178: NEG
71179: PUSH
71180: LD_INT 2
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 4
71189: NEG
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 4
71200: NEG
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 3
71212: NEG
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 3
71223: NEG
71224: PUSH
71225: LD_INT 1
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 4
71234: NEG
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 5
71245: NEG
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 5
71256: NEG
71257: PUSH
71258: LD_INT 1
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 5
71268: NEG
71269: PUSH
71270: LD_INT 2
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: LD_INT 2
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 3
71291: NEG
71292: PUSH
71293: LD_INT 3
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: LD_INT 4
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 2
71315: NEG
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 2
71327: NEG
71328: PUSH
71329: LD_INT 2
71331: NEG
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 3
71339: NEG
71340: PUSH
71341: LD_INT 2
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 4
71351: NEG
71352: PUSH
71353: LD_INT 3
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 4
71363: NEG
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 2
71375: NEG
71376: PUSH
71377: LD_INT 4
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 4
71387: NEG
71388: PUSH
71389: LD_INT 2
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: LD_INT 4
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 5
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 1
71421: PUSH
71422: LD_INT 4
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: LD_INT 3
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 1
71454: NEG
71455: PUSH
71456: LD_INT 4
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 1
71466: NEG
71467: PUSH
71468: LD_INT 5
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 2
71478: PUSH
71479: LD_INT 3
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 2
71489: NEG
71490: PUSH
71491: LD_INT 5
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71546: LD_ADDR_VAR 0 31
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: LD_INT 4
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: LD_INT 3
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 1
71573: PUSH
71574: LD_INT 4
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 1
71583: PUSH
71584: LD_INT 5
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: LD_INT 5
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 1
71603: NEG
71604: PUSH
71605: LD_INT 4
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 1
71614: NEG
71615: PUSH
71616: LD_INT 3
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: LD_INT 5
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 2
71635: NEG
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 3
71646: NEG
71647: PUSH
71648: LD_INT 0
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 3
71657: NEG
71658: PUSH
71659: LD_INT 1
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 2
71669: NEG
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 2
71680: NEG
71681: PUSH
71682: LD_INT 1
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 3
71691: NEG
71692: PUSH
71693: LD_INT 1
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 4
71702: NEG
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 4
71713: NEG
71714: PUSH
71715: LD_INT 1
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 4
71725: NEG
71726: PUSH
71727: LD_INT 2
71729: NEG
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 2
71737: NEG
71738: PUSH
71739: LD_INT 2
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 4
71748: NEG
71749: PUSH
71750: LD_INT 4
71752: NEG
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 4
71760: NEG
71761: PUSH
71762: LD_INT 5
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: LD_INT 4
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 3
71784: NEG
71785: PUSH
71786: LD_INT 3
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 4
71796: NEG
71797: PUSH
71798: LD_INT 3
71800: NEG
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 5
71808: NEG
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 5
71820: NEG
71821: PUSH
71822: LD_INT 5
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 3
71832: NEG
71833: PUSH
71834: LD_INT 5
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 5
71844: NEG
71845: PUSH
71846: LD_INT 3
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: LD_INT 3
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: LD_INT 4
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 1
71878: PUSH
71879: LD_INT 3
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 1
71889: PUSH
71890: LD_INT 2
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 1
71911: NEG
71912: PUSH
71913: LD_INT 3
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 1
71923: NEG
71924: PUSH
71925: LD_INT 4
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 2
71935: PUSH
71936: LD_INT 2
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 2
71946: NEG
71947: PUSH
71948: LD_INT 4
71950: NEG
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 4
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 4
71968: PUSH
71969: LD_INT 1
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 5
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 5
71989: PUSH
71990: LD_INT 1
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 4
71999: PUSH
72000: LD_INT 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 3
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 3
72019: PUSH
72020: LD_INT 1
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 3
72030: PUSH
72031: LD_INT 2
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 5
72041: PUSH
72042: LD_INT 2
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72096: LD_ADDR_VAR 0 32
72100: PUSH
72101: LD_INT 4
72103: NEG
72104: PUSH
72105: LD_INT 0
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 4
72114: NEG
72115: PUSH
72116: LD_INT 1
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 3
72126: NEG
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 3
72137: NEG
72138: PUSH
72139: LD_INT 1
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 4
72148: NEG
72149: PUSH
72150: LD_INT 1
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 5
72159: NEG
72160: PUSH
72161: LD_INT 0
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 5
72170: NEG
72171: PUSH
72172: LD_INT 1
72174: NEG
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 5
72182: NEG
72183: PUSH
72184: LD_INT 2
72186: NEG
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: LD_INT 2
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 3
72205: NEG
72206: PUSH
72207: LD_INT 3
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: NEG
72218: PUSH
72219: LD_INT 4
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 2
72229: NEG
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 2
72241: NEG
72242: PUSH
72243: LD_INT 2
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 3
72253: NEG
72254: PUSH
72255: LD_INT 2
72257: NEG
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 4
72265: NEG
72266: PUSH
72267: LD_INT 3
72269: NEG
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 4
72277: NEG
72278: PUSH
72279: LD_INT 4
72281: NEG
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 2
72289: NEG
72290: PUSH
72291: LD_INT 4
72293: NEG
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 4
72301: NEG
72302: PUSH
72303: LD_INT 2
72305: NEG
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 0
72313: PUSH
72314: LD_INT 4
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 0
72324: PUSH
72325: LD_INT 5
72327: NEG
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 1
72335: PUSH
72336: LD_INT 4
72338: NEG
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 1
72346: PUSH
72347: LD_INT 3
72349: NEG
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: LD_INT 3
72360: NEG
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: LD_INT 4
72372: NEG
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 1
72380: NEG
72381: PUSH
72382: LD_INT 5
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: LD_INT 3
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 2
72403: NEG
72404: PUSH
72405: LD_INT 5
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 3
72415: PUSH
72416: LD_INT 0
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 3
72425: PUSH
72426: LD_INT 1
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 4
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 4
72446: PUSH
72447: LD_INT 1
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 3
72456: PUSH
72457: LD_INT 1
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 2
72466: PUSH
72467: LD_INT 0
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 2
72476: PUSH
72477: LD_INT 1
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 2
72487: PUSH
72488: LD_INT 2
72490: NEG
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 4
72498: PUSH
72499: LD_INT 2
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 4
72508: PUSH
72509: LD_INT 4
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 4
72518: PUSH
72519: LD_INT 3
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 5
72528: PUSH
72529: LD_INT 4
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 5
72538: PUSH
72539: LD_INT 5
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 4
72548: PUSH
72549: LD_INT 5
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 3
72558: PUSH
72559: LD_INT 4
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 3
72568: PUSH
72569: LD_INT 3
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 5
72578: PUSH
72579: LD_INT 3
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 3
72588: PUSH
72589: LD_INT 5
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72643: LD_ADDR_VAR 0 33
72647: PUSH
72648: LD_INT 4
72650: NEG
72651: PUSH
72652: LD_INT 4
72654: NEG
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 4
72662: NEG
72663: PUSH
72664: LD_INT 5
72666: NEG
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 3
72674: NEG
72675: PUSH
72676: LD_INT 4
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 3
72686: NEG
72687: PUSH
72688: LD_INT 3
72690: NEG
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 4
72698: NEG
72699: PUSH
72700: LD_INT 3
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 5
72710: NEG
72711: PUSH
72712: LD_INT 4
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 5
72722: NEG
72723: PUSH
72724: LD_INT 5
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 3
72734: NEG
72735: PUSH
72736: LD_INT 5
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 5
72746: NEG
72747: PUSH
72748: LD_INT 3
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 0
72758: PUSH
72759: LD_INT 3
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: LD_INT 4
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 1
72780: PUSH
72781: LD_INT 3
72783: NEG
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 1
72791: PUSH
72792: LD_INT 2
72794: NEG
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: LD_INT 2
72805: NEG
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 1
72813: NEG
72814: PUSH
72815: LD_INT 3
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 1
72825: NEG
72826: PUSH
72827: LD_INT 4
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 2
72837: PUSH
72838: LD_INT 2
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 2
72848: NEG
72849: PUSH
72850: LD_INT 4
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 4
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 4
72870: PUSH
72871: LD_INT 1
72873: NEG
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 5
72881: PUSH
72882: LD_INT 0
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 5
72891: PUSH
72892: LD_INT 1
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 4
72901: PUSH
72902: LD_INT 1
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 3
72911: PUSH
72912: LD_INT 0
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 3
72921: PUSH
72922: LD_INT 1
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 3
72932: PUSH
72933: LD_INT 2
72935: NEG
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 5
72943: PUSH
72944: LD_INT 2
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 3
72953: PUSH
72954: LD_INT 3
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: LD_INT 2
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 4
72973: PUSH
72974: LD_INT 3
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 4
72983: PUSH
72984: LD_INT 4
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 3
72993: PUSH
72994: LD_INT 4
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 2
73003: PUSH
73004: LD_INT 3
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 2
73013: PUSH
73014: LD_INT 2
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 4
73023: PUSH
73024: LD_INT 2
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 2
73033: PUSH
73034: LD_INT 4
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 0
73043: PUSH
73044: LD_INT 4
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 0
73053: PUSH
73054: LD_INT 3
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 1
73063: PUSH
73064: LD_INT 4
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 1
73073: PUSH
73074: LD_INT 5
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 0
73083: PUSH
73084: LD_INT 5
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 1
73093: NEG
73094: PUSH
73095: LD_INT 4
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 1
73104: NEG
73105: PUSH
73106: LD_INT 3
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 2
73115: PUSH
73116: LD_INT 5
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 2
73125: NEG
73126: PUSH
73127: LD_INT 3
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73181: LD_ADDR_VAR 0 34
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: LD_INT 4
73191: NEG
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 0
73199: PUSH
73200: LD_INT 5
73202: NEG
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 1
73210: PUSH
73211: LD_INT 4
73213: NEG
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 1
73221: PUSH
73222: LD_INT 3
73224: NEG
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PUSH
73230: LD_INT 0
73232: PUSH
73233: LD_INT 3
73235: NEG
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: LD_INT 4
73247: NEG
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 1
73255: NEG
73256: PUSH
73257: LD_INT 5
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 2
73267: PUSH
73268: LD_INT 3
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 2
73278: NEG
73279: PUSH
73280: LD_INT 5
73282: NEG
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 3
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 3
73300: PUSH
73301: LD_INT 1
73303: NEG
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 4
73311: PUSH
73312: LD_INT 0
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 4
73321: PUSH
73322: LD_INT 1
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_INT 3
73331: PUSH
73332: LD_INT 1
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 2
73341: PUSH
73342: LD_INT 0
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 2
73351: PUSH
73352: LD_INT 1
73354: NEG
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 2
73362: PUSH
73363: LD_INT 2
73365: NEG
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 4
73373: PUSH
73374: LD_INT 2
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 4
73383: PUSH
73384: LD_INT 4
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 4
73393: PUSH
73394: LD_INT 3
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 5
73403: PUSH
73404: LD_INT 4
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 5
73413: PUSH
73414: LD_INT 5
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 4
73423: PUSH
73424: LD_INT 5
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 3
73433: PUSH
73434: LD_INT 4
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 3
73443: PUSH
73444: LD_INT 3
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 5
73453: PUSH
73454: LD_INT 3
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 3
73463: PUSH
73464: LD_INT 5
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 0
73473: PUSH
73474: LD_INT 3
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 0
73483: PUSH
73484: LD_INT 2
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 1
73493: PUSH
73494: LD_INT 3
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 1
73503: PUSH
73504: LD_INT 4
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 0
73513: PUSH
73514: LD_INT 4
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 1
73523: NEG
73524: PUSH
73525: LD_INT 3
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 1
73534: NEG
73535: PUSH
73536: LD_INT 2
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: LD_INT 2
73545: PUSH
73546: LD_INT 4
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 2
73555: NEG
73556: PUSH
73557: LD_INT 2
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 4
73566: NEG
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 4
73577: NEG
73578: PUSH
73579: LD_INT 1
73581: NEG
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 3
73589: NEG
73590: PUSH
73591: LD_INT 0
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 3
73600: NEG
73601: PUSH
73602: LD_INT 1
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 4
73611: NEG
73612: PUSH
73613: LD_INT 1
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 5
73622: NEG
73623: PUSH
73624: LD_INT 0
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 5
73633: NEG
73634: PUSH
73635: LD_INT 1
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 5
73645: NEG
73646: PUSH
73647: LD_INT 2
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 3
73657: NEG
73658: PUSH
73659: LD_INT 2
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: ST_TO_ADDR
// end ; end ;
73713: GO 73716
73715: POP
// case btype of b_depot , b_warehouse :
73716: LD_VAR 0 1
73720: PUSH
73721: LD_INT 0
73723: DOUBLE
73724: EQUAL
73725: IFTRUE 73735
73727: LD_INT 1
73729: DOUBLE
73730: EQUAL
73731: IFTRUE 73735
73733: GO 73936
73735: POP
// case nation of nation_american :
73736: LD_VAR 0 5
73740: PUSH
73741: LD_INT 1
73743: DOUBLE
73744: EQUAL
73745: IFTRUE 73749
73747: GO 73805
73749: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73750: LD_ADDR_VAR 0 9
73754: PUSH
73755: LD_VAR 0 11
73759: PUSH
73760: LD_VAR 0 12
73764: PUSH
73765: LD_VAR 0 13
73769: PUSH
73770: LD_VAR 0 14
73774: PUSH
73775: LD_VAR 0 15
73779: PUSH
73780: LD_VAR 0 16
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: PUSH
73793: LD_VAR 0 4
73797: PUSH
73798: LD_INT 1
73800: PLUS
73801: ARRAY
73802: ST_TO_ADDR
73803: GO 73934
73805: LD_INT 2
73807: DOUBLE
73808: EQUAL
73809: IFTRUE 73813
73811: GO 73869
73813: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73814: LD_ADDR_VAR 0 9
73818: PUSH
73819: LD_VAR 0 17
73823: PUSH
73824: LD_VAR 0 18
73828: PUSH
73829: LD_VAR 0 19
73833: PUSH
73834: LD_VAR 0 20
73838: PUSH
73839: LD_VAR 0 21
73843: PUSH
73844: LD_VAR 0 22
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: PUSH
73857: LD_VAR 0 4
73861: PUSH
73862: LD_INT 1
73864: PLUS
73865: ARRAY
73866: ST_TO_ADDR
73867: GO 73934
73869: LD_INT 3
73871: DOUBLE
73872: EQUAL
73873: IFTRUE 73877
73875: GO 73933
73877: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73878: LD_ADDR_VAR 0 9
73882: PUSH
73883: LD_VAR 0 23
73887: PUSH
73888: LD_VAR 0 24
73892: PUSH
73893: LD_VAR 0 25
73897: PUSH
73898: LD_VAR 0 26
73902: PUSH
73903: LD_VAR 0 27
73907: PUSH
73908: LD_VAR 0 28
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: PUSH
73921: LD_VAR 0 4
73925: PUSH
73926: LD_INT 1
73928: PLUS
73929: ARRAY
73930: ST_TO_ADDR
73931: GO 73934
73933: POP
73934: GO 74489
73936: LD_INT 2
73938: DOUBLE
73939: EQUAL
73940: IFTRUE 73950
73942: LD_INT 3
73944: DOUBLE
73945: EQUAL
73946: IFTRUE 73950
73948: GO 74006
73950: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73951: LD_ADDR_VAR 0 9
73955: PUSH
73956: LD_VAR 0 29
73960: PUSH
73961: LD_VAR 0 30
73965: PUSH
73966: LD_VAR 0 31
73970: PUSH
73971: LD_VAR 0 32
73975: PUSH
73976: LD_VAR 0 33
73980: PUSH
73981: LD_VAR 0 34
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: PUSH
73994: LD_VAR 0 4
73998: PUSH
73999: LD_INT 1
74001: PLUS
74002: ARRAY
74003: ST_TO_ADDR
74004: GO 74489
74006: LD_INT 16
74008: DOUBLE
74009: EQUAL
74010: IFTRUE 74068
74012: LD_INT 17
74014: DOUBLE
74015: EQUAL
74016: IFTRUE 74068
74018: LD_INT 18
74020: DOUBLE
74021: EQUAL
74022: IFTRUE 74068
74024: LD_INT 19
74026: DOUBLE
74027: EQUAL
74028: IFTRUE 74068
74030: LD_INT 22
74032: DOUBLE
74033: EQUAL
74034: IFTRUE 74068
74036: LD_INT 20
74038: DOUBLE
74039: EQUAL
74040: IFTRUE 74068
74042: LD_INT 21
74044: DOUBLE
74045: EQUAL
74046: IFTRUE 74068
74048: LD_INT 23
74050: DOUBLE
74051: EQUAL
74052: IFTRUE 74068
74054: LD_INT 24
74056: DOUBLE
74057: EQUAL
74058: IFTRUE 74068
74060: LD_INT 25
74062: DOUBLE
74063: EQUAL
74064: IFTRUE 74068
74066: GO 74124
74068: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74069: LD_ADDR_VAR 0 9
74073: PUSH
74074: LD_VAR 0 35
74078: PUSH
74079: LD_VAR 0 36
74083: PUSH
74084: LD_VAR 0 37
74088: PUSH
74089: LD_VAR 0 38
74093: PUSH
74094: LD_VAR 0 39
74098: PUSH
74099: LD_VAR 0 40
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: PUSH
74112: LD_VAR 0 4
74116: PUSH
74117: LD_INT 1
74119: PLUS
74120: ARRAY
74121: ST_TO_ADDR
74122: GO 74489
74124: LD_INT 6
74126: DOUBLE
74127: EQUAL
74128: IFTRUE 74180
74130: LD_INT 7
74132: DOUBLE
74133: EQUAL
74134: IFTRUE 74180
74136: LD_INT 8
74138: DOUBLE
74139: EQUAL
74140: IFTRUE 74180
74142: LD_INT 13
74144: DOUBLE
74145: EQUAL
74146: IFTRUE 74180
74148: LD_INT 12
74150: DOUBLE
74151: EQUAL
74152: IFTRUE 74180
74154: LD_INT 15
74156: DOUBLE
74157: EQUAL
74158: IFTRUE 74180
74160: LD_INT 11
74162: DOUBLE
74163: EQUAL
74164: IFTRUE 74180
74166: LD_INT 14
74168: DOUBLE
74169: EQUAL
74170: IFTRUE 74180
74172: LD_INT 10
74174: DOUBLE
74175: EQUAL
74176: IFTRUE 74180
74178: GO 74236
74180: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74181: LD_ADDR_VAR 0 9
74185: PUSH
74186: LD_VAR 0 41
74190: PUSH
74191: LD_VAR 0 42
74195: PUSH
74196: LD_VAR 0 43
74200: PUSH
74201: LD_VAR 0 44
74205: PUSH
74206: LD_VAR 0 45
74210: PUSH
74211: LD_VAR 0 46
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: PUSH
74224: LD_VAR 0 4
74228: PUSH
74229: LD_INT 1
74231: PLUS
74232: ARRAY
74233: ST_TO_ADDR
74234: GO 74489
74236: LD_INT 36
74238: DOUBLE
74239: EQUAL
74240: IFTRUE 74244
74242: GO 74300
74244: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74245: LD_ADDR_VAR 0 9
74249: PUSH
74250: LD_VAR 0 47
74254: PUSH
74255: LD_VAR 0 48
74259: PUSH
74260: LD_VAR 0 49
74264: PUSH
74265: LD_VAR 0 50
74269: PUSH
74270: LD_VAR 0 51
74274: PUSH
74275: LD_VAR 0 52
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: PUSH
74288: LD_VAR 0 4
74292: PUSH
74293: LD_INT 1
74295: PLUS
74296: ARRAY
74297: ST_TO_ADDR
74298: GO 74489
74300: LD_INT 4
74302: DOUBLE
74303: EQUAL
74304: IFTRUE 74326
74306: LD_INT 5
74308: DOUBLE
74309: EQUAL
74310: IFTRUE 74326
74312: LD_INT 34
74314: DOUBLE
74315: EQUAL
74316: IFTRUE 74326
74318: LD_INT 37
74320: DOUBLE
74321: EQUAL
74322: IFTRUE 74326
74324: GO 74382
74326: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74327: LD_ADDR_VAR 0 9
74331: PUSH
74332: LD_VAR 0 53
74336: PUSH
74337: LD_VAR 0 54
74341: PUSH
74342: LD_VAR 0 55
74346: PUSH
74347: LD_VAR 0 56
74351: PUSH
74352: LD_VAR 0 57
74356: PUSH
74357: LD_VAR 0 58
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: PUSH
74370: LD_VAR 0 4
74374: PUSH
74375: LD_INT 1
74377: PLUS
74378: ARRAY
74379: ST_TO_ADDR
74380: GO 74489
74382: LD_INT 31
74384: DOUBLE
74385: EQUAL
74386: IFTRUE 74432
74388: LD_INT 32
74390: DOUBLE
74391: EQUAL
74392: IFTRUE 74432
74394: LD_INT 33
74396: DOUBLE
74397: EQUAL
74398: IFTRUE 74432
74400: LD_INT 27
74402: DOUBLE
74403: EQUAL
74404: IFTRUE 74432
74406: LD_INT 26
74408: DOUBLE
74409: EQUAL
74410: IFTRUE 74432
74412: LD_INT 28
74414: DOUBLE
74415: EQUAL
74416: IFTRUE 74432
74418: LD_INT 29
74420: DOUBLE
74421: EQUAL
74422: IFTRUE 74432
74424: LD_INT 30
74426: DOUBLE
74427: EQUAL
74428: IFTRUE 74432
74430: GO 74488
74432: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74433: LD_ADDR_VAR 0 9
74437: PUSH
74438: LD_VAR 0 59
74442: PUSH
74443: LD_VAR 0 60
74447: PUSH
74448: LD_VAR 0 61
74452: PUSH
74453: LD_VAR 0 62
74457: PUSH
74458: LD_VAR 0 63
74462: PUSH
74463: LD_VAR 0 64
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: PUSH
74476: LD_VAR 0 4
74480: PUSH
74481: LD_INT 1
74483: PLUS
74484: ARRAY
74485: ST_TO_ADDR
74486: GO 74489
74488: POP
// temp_list2 = [ ] ;
74489: LD_ADDR_VAR 0 10
74493: PUSH
74494: EMPTY
74495: ST_TO_ADDR
// for i in temp_list do
74496: LD_ADDR_VAR 0 8
74500: PUSH
74501: LD_VAR 0 9
74505: PUSH
74506: FOR_IN
74507: IFFALSE 74559
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74509: LD_ADDR_VAR 0 10
74513: PUSH
74514: LD_VAR 0 10
74518: PUSH
74519: LD_VAR 0 8
74523: PUSH
74524: LD_INT 1
74526: ARRAY
74527: PUSH
74528: LD_VAR 0 2
74532: PLUS
74533: PUSH
74534: LD_VAR 0 8
74538: PUSH
74539: LD_INT 2
74541: ARRAY
74542: PUSH
74543: LD_VAR 0 3
74547: PLUS
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: EMPTY
74554: LIST
74555: ADD
74556: ST_TO_ADDR
74557: GO 74506
74559: POP
74560: POP
// result = temp_list2 ;
74561: LD_ADDR_VAR 0 7
74565: PUSH
74566: LD_VAR 0 10
74570: ST_TO_ADDR
// end ;
74571: LD_VAR 0 7
74575: RET
// export function EnemyInRange ( unit , dist ) ; begin
74576: LD_INT 0
74578: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74579: LD_ADDR_VAR 0 3
74583: PUSH
74584: LD_VAR 0 1
74588: PPUSH
74589: CALL_OW 255
74593: PPUSH
74594: LD_VAR 0 1
74598: PPUSH
74599: CALL_OW 250
74603: PPUSH
74604: LD_VAR 0 1
74608: PPUSH
74609: CALL_OW 251
74613: PPUSH
74614: LD_VAR 0 2
74618: PPUSH
74619: CALL 47949 0 4
74623: PUSH
74624: LD_INT 4
74626: ARRAY
74627: ST_TO_ADDR
// end ;
74628: LD_VAR 0 3
74632: RET
// export function PlayerSeeMe ( unit ) ; begin
74633: LD_INT 0
74635: PPUSH
// result := See ( your_side , unit ) ;
74636: LD_ADDR_VAR 0 2
74640: PUSH
74641: LD_OWVAR 2
74645: PPUSH
74646: LD_VAR 0 1
74650: PPUSH
74651: CALL_OW 292
74655: ST_TO_ADDR
// end ;
74656: LD_VAR 0 2
74660: RET
// export function ReverseDir ( unit ) ; begin
74661: LD_INT 0
74663: PPUSH
// if not unit then
74664: LD_VAR 0 1
74668: NOT
74669: IFFALSE 74673
// exit ;
74671: GO 74696
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74673: LD_ADDR_VAR 0 2
74677: PUSH
74678: LD_VAR 0 1
74682: PPUSH
74683: CALL_OW 254
74687: PUSH
74688: LD_INT 3
74690: PLUS
74691: PUSH
74692: LD_INT 6
74694: MOD
74695: ST_TO_ADDR
// end ;
74696: LD_VAR 0 2
74700: RET
// export function ReverseArray ( array ) ; var i ; begin
74701: LD_INT 0
74703: PPUSH
74704: PPUSH
// if not array then
74705: LD_VAR 0 1
74709: NOT
74710: IFFALSE 74714
// exit ;
74712: GO 74769
// result := [ ] ;
74714: LD_ADDR_VAR 0 2
74718: PUSH
74719: EMPTY
74720: ST_TO_ADDR
// for i := array downto 1 do
74721: LD_ADDR_VAR 0 3
74725: PUSH
74726: DOUBLE
74727: LD_VAR 0 1
74731: INC
74732: ST_TO_ADDR
74733: LD_INT 1
74735: PUSH
74736: FOR_DOWNTO
74737: IFFALSE 74767
// result := Join ( result , array [ i ] ) ;
74739: LD_ADDR_VAR 0 2
74743: PUSH
74744: LD_VAR 0 2
74748: PPUSH
74749: LD_VAR 0 1
74753: PUSH
74754: LD_VAR 0 3
74758: ARRAY
74759: PPUSH
74760: CALL 79414 0 2
74764: ST_TO_ADDR
74765: GO 74736
74767: POP
74768: POP
// end ;
74769: LD_VAR 0 2
74773: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74774: LD_INT 0
74776: PPUSH
74777: PPUSH
74778: PPUSH
74779: PPUSH
74780: PPUSH
74781: PPUSH
// if not unit or not hexes then
74782: LD_VAR 0 1
74786: NOT
74787: PUSH
74788: LD_VAR 0 2
74792: NOT
74793: OR
74794: IFFALSE 74798
// exit ;
74796: GO 74921
// dist := 9999 ;
74798: LD_ADDR_VAR 0 5
74802: PUSH
74803: LD_INT 9999
74805: ST_TO_ADDR
// for i = 1 to hexes do
74806: LD_ADDR_VAR 0 4
74810: PUSH
74811: DOUBLE
74812: LD_INT 1
74814: DEC
74815: ST_TO_ADDR
74816: LD_VAR 0 2
74820: PUSH
74821: FOR_TO
74822: IFFALSE 74909
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74824: LD_ADDR_VAR 0 6
74828: PUSH
74829: LD_VAR 0 1
74833: PPUSH
74834: LD_VAR 0 2
74838: PUSH
74839: LD_VAR 0 4
74843: ARRAY
74844: PUSH
74845: LD_INT 1
74847: ARRAY
74848: PPUSH
74849: LD_VAR 0 2
74853: PUSH
74854: LD_VAR 0 4
74858: ARRAY
74859: PUSH
74860: LD_INT 2
74862: ARRAY
74863: PPUSH
74864: CALL_OW 297
74868: ST_TO_ADDR
// if tdist < dist then
74869: LD_VAR 0 6
74873: PUSH
74874: LD_VAR 0 5
74878: LESS
74879: IFFALSE 74907
// begin hex := hexes [ i ] ;
74881: LD_ADDR_VAR 0 8
74885: PUSH
74886: LD_VAR 0 2
74890: PUSH
74891: LD_VAR 0 4
74895: ARRAY
74896: ST_TO_ADDR
// dist := tdist ;
74897: LD_ADDR_VAR 0 5
74901: PUSH
74902: LD_VAR 0 6
74906: ST_TO_ADDR
// end ; end ;
74907: GO 74821
74909: POP
74910: POP
// result := hex ;
74911: LD_ADDR_VAR 0 3
74915: PUSH
74916: LD_VAR 0 8
74920: ST_TO_ADDR
// end ;
74921: LD_VAR 0 3
74925: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74926: LD_INT 0
74928: PPUSH
74929: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74930: LD_VAR 0 1
74934: NOT
74935: PUSH
74936: LD_VAR 0 1
74940: PUSH
74941: LD_INT 21
74943: PUSH
74944: LD_INT 2
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_INT 23
74953: PUSH
74954: LD_INT 2
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PPUSH
74965: CALL_OW 69
74969: IN
74970: NOT
74971: OR
74972: IFFALSE 74976
// exit ;
74974: GO 75023
// for i = 1 to 3 do
74976: LD_ADDR_VAR 0 3
74980: PUSH
74981: DOUBLE
74982: LD_INT 1
74984: DEC
74985: ST_TO_ADDR
74986: LD_INT 3
74988: PUSH
74989: FOR_TO
74990: IFFALSE 75021
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74992: LD_VAR 0 1
74996: PPUSH
74997: CALL_OW 250
75001: PPUSH
75002: LD_VAR 0 1
75006: PPUSH
75007: CALL_OW 251
75011: PPUSH
75012: LD_INT 1
75014: PPUSH
75015: CALL_OW 453
75019: GO 74989
75021: POP
75022: POP
// end ;
75023: LD_VAR 0 2
75027: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75028: LD_INT 0
75030: PPUSH
75031: PPUSH
75032: PPUSH
75033: PPUSH
75034: PPUSH
75035: PPUSH
// if not unit or not enemy_unit then
75036: LD_VAR 0 1
75040: NOT
75041: PUSH
75042: LD_VAR 0 2
75046: NOT
75047: OR
75048: IFFALSE 75052
// exit ;
75050: GO 75519
// if GetLives ( i ) < 250 then
75052: LD_VAR 0 4
75056: PPUSH
75057: CALL_OW 256
75061: PUSH
75062: LD_INT 250
75064: LESS
75065: IFFALSE 75078
// begin ComAutodestruct ( i ) ;
75067: LD_VAR 0 4
75071: PPUSH
75072: CALL 74926 0 1
// exit ;
75076: GO 75519
// end ; x := GetX ( enemy_unit ) ;
75078: LD_ADDR_VAR 0 7
75082: PUSH
75083: LD_VAR 0 2
75087: PPUSH
75088: CALL_OW 250
75092: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75093: LD_ADDR_VAR 0 8
75097: PUSH
75098: LD_VAR 0 2
75102: PPUSH
75103: CALL_OW 251
75107: ST_TO_ADDR
// if not x or not y then
75108: LD_VAR 0 7
75112: NOT
75113: PUSH
75114: LD_VAR 0 8
75118: NOT
75119: OR
75120: IFFALSE 75124
// exit ;
75122: GO 75519
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75124: LD_ADDR_VAR 0 6
75128: PUSH
75129: LD_VAR 0 7
75133: PPUSH
75134: LD_INT 0
75136: PPUSH
75137: LD_INT 4
75139: PPUSH
75140: CALL_OW 272
75144: PUSH
75145: LD_VAR 0 8
75149: PPUSH
75150: LD_INT 0
75152: PPUSH
75153: LD_INT 4
75155: PPUSH
75156: CALL_OW 273
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_VAR 0 7
75169: PPUSH
75170: LD_INT 1
75172: PPUSH
75173: LD_INT 4
75175: PPUSH
75176: CALL_OW 272
75180: PUSH
75181: LD_VAR 0 8
75185: PPUSH
75186: LD_INT 1
75188: PPUSH
75189: LD_INT 4
75191: PPUSH
75192: CALL_OW 273
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_VAR 0 7
75205: PPUSH
75206: LD_INT 2
75208: PPUSH
75209: LD_INT 4
75211: PPUSH
75212: CALL_OW 272
75216: PUSH
75217: LD_VAR 0 8
75221: PPUSH
75222: LD_INT 2
75224: PPUSH
75225: LD_INT 4
75227: PPUSH
75228: CALL_OW 273
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: LD_VAR 0 7
75241: PPUSH
75242: LD_INT 3
75244: PPUSH
75245: LD_INT 4
75247: PPUSH
75248: CALL_OW 272
75252: PUSH
75253: LD_VAR 0 8
75257: PPUSH
75258: LD_INT 3
75260: PPUSH
75261: LD_INT 4
75263: PPUSH
75264: CALL_OW 273
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_VAR 0 7
75277: PPUSH
75278: LD_INT 4
75280: PPUSH
75281: LD_INT 4
75283: PPUSH
75284: CALL_OW 272
75288: PUSH
75289: LD_VAR 0 8
75293: PPUSH
75294: LD_INT 4
75296: PPUSH
75297: LD_INT 4
75299: PPUSH
75300: CALL_OW 273
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_VAR 0 7
75313: PPUSH
75314: LD_INT 5
75316: PPUSH
75317: LD_INT 4
75319: PPUSH
75320: CALL_OW 272
75324: PUSH
75325: LD_VAR 0 8
75329: PPUSH
75330: LD_INT 5
75332: PPUSH
75333: LD_INT 4
75335: PPUSH
75336: CALL_OW 273
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: ST_TO_ADDR
// for i = tmp downto 1 do
75353: LD_ADDR_VAR 0 4
75357: PUSH
75358: DOUBLE
75359: LD_VAR 0 6
75363: INC
75364: ST_TO_ADDR
75365: LD_INT 1
75367: PUSH
75368: FOR_DOWNTO
75369: IFFALSE 75470
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75371: LD_VAR 0 6
75375: PUSH
75376: LD_VAR 0 4
75380: ARRAY
75381: PUSH
75382: LD_INT 1
75384: ARRAY
75385: PPUSH
75386: LD_VAR 0 6
75390: PUSH
75391: LD_VAR 0 4
75395: ARRAY
75396: PUSH
75397: LD_INT 2
75399: ARRAY
75400: PPUSH
75401: CALL_OW 488
75405: NOT
75406: PUSH
75407: LD_VAR 0 6
75411: PUSH
75412: LD_VAR 0 4
75416: ARRAY
75417: PUSH
75418: LD_INT 1
75420: ARRAY
75421: PPUSH
75422: LD_VAR 0 6
75426: PUSH
75427: LD_VAR 0 4
75431: ARRAY
75432: PUSH
75433: LD_INT 2
75435: ARRAY
75436: PPUSH
75437: CALL_OW 428
75441: PUSH
75442: LD_INT 0
75444: NONEQUAL
75445: OR
75446: IFFALSE 75468
// tmp := Delete ( tmp , i ) ;
75448: LD_ADDR_VAR 0 6
75452: PUSH
75453: LD_VAR 0 6
75457: PPUSH
75458: LD_VAR 0 4
75462: PPUSH
75463: CALL_OW 3
75467: ST_TO_ADDR
75468: GO 75368
75470: POP
75471: POP
// j := GetClosestHex ( unit , tmp ) ;
75472: LD_ADDR_VAR 0 5
75476: PUSH
75477: LD_VAR 0 1
75481: PPUSH
75482: LD_VAR 0 6
75486: PPUSH
75487: CALL 74774 0 2
75491: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75492: LD_VAR 0 1
75496: PPUSH
75497: LD_VAR 0 5
75501: PUSH
75502: LD_INT 1
75504: ARRAY
75505: PPUSH
75506: LD_VAR 0 5
75510: PUSH
75511: LD_INT 2
75513: ARRAY
75514: PPUSH
75515: CALL_OW 111
// end ;
75519: LD_VAR 0 3
75523: RET
// export function PrepareApemanSoldier ( ) ; begin
75524: LD_INT 0
75526: PPUSH
// uc_nation := 0 ;
75527: LD_ADDR_OWVAR 21
75531: PUSH
75532: LD_INT 0
75534: ST_TO_ADDR
// hc_sex := sex_male ;
75535: LD_ADDR_OWVAR 27
75539: PUSH
75540: LD_INT 1
75542: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75543: LD_ADDR_OWVAR 28
75547: PUSH
75548: LD_INT 15
75550: ST_TO_ADDR
// hc_gallery :=  ;
75551: LD_ADDR_OWVAR 33
75555: PUSH
75556: LD_STRING 
75558: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75559: LD_ADDR_OWVAR 31
75563: PUSH
75564: LD_INT 0
75566: PPUSH
75567: LD_INT 3
75569: PPUSH
75570: CALL_OW 12
75574: PUSH
75575: LD_INT 0
75577: PPUSH
75578: LD_INT 3
75580: PPUSH
75581: CALL_OW 12
75585: PUSH
75586: LD_INT 0
75588: PUSH
75589: LD_INT 0
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: ST_TO_ADDR
// end ;
75598: LD_VAR 0 1
75602: RET
// export function PrepareApemanEngineer ( ) ; begin
75603: LD_INT 0
75605: PPUSH
// uc_nation := 0 ;
75606: LD_ADDR_OWVAR 21
75610: PUSH
75611: LD_INT 0
75613: ST_TO_ADDR
// hc_sex := sex_male ;
75614: LD_ADDR_OWVAR 27
75618: PUSH
75619: LD_INT 1
75621: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75622: LD_ADDR_OWVAR 28
75626: PUSH
75627: LD_INT 16
75629: ST_TO_ADDR
// hc_gallery :=  ;
75630: LD_ADDR_OWVAR 33
75634: PUSH
75635: LD_STRING 
75637: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75638: LD_ADDR_OWVAR 31
75642: PUSH
75643: LD_INT 0
75645: PPUSH
75646: LD_INT 3
75648: PPUSH
75649: CALL_OW 12
75653: PUSH
75654: LD_INT 0
75656: PPUSH
75657: LD_INT 3
75659: PPUSH
75660: CALL_OW 12
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: LD_INT 0
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: ST_TO_ADDR
// end ;
75677: LD_VAR 0 1
75681: RET
// export function PrepareApeman ( agressivity ) ; begin
75682: LD_INT 0
75684: PPUSH
// uc_side := 0 ;
75685: LD_ADDR_OWVAR 20
75689: PUSH
75690: LD_INT 0
75692: ST_TO_ADDR
// uc_nation := 0 ;
75693: LD_ADDR_OWVAR 21
75697: PUSH
75698: LD_INT 0
75700: ST_TO_ADDR
// hc_sex := sex_male ;
75701: LD_ADDR_OWVAR 27
75705: PUSH
75706: LD_INT 1
75708: ST_TO_ADDR
// hc_class := class_apeman ;
75709: LD_ADDR_OWVAR 28
75713: PUSH
75714: LD_INT 12
75716: ST_TO_ADDR
// hc_gallery :=  ;
75717: LD_ADDR_OWVAR 33
75721: PUSH
75722: LD_STRING 
75724: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75725: LD_ADDR_OWVAR 35
75729: PUSH
75730: LD_VAR 0 1
75734: NEG
75735: PPUSH
75736: LD_VAR 0 1
75740: PPUSH
75741: CALL_OW 12
75745: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75746: LD_ADDR_OWVAR 31
75750: PUSH
75751: LD_INT 0
75753: PPUSH
75754: LD_INT 3
75756: PPUSH
75757: CALL_OW 12
75761: PUSH
75762: LD_INT 0
75764: PPUSH
75765: LD_INT 3
75767: PPUSH
75768: CALL_OW 12
75772: PUSH
75773: LD_INT 0
75775: PUSH
75776: LD_INT 0
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: LIST
75783: LIST
75784: ST_TO_ADDR
// end ;
75785: LD_VAR 0 2
75789: RET
// export function PrepareTiger ( agressivity ) ; begin
75790: LD_INT 0
75792: PPUSH
// uc_side := 0 ;
75793: LD_ADDR_OWVAR 20
75797: PUSH
75798: LD_INT 0
75800: ST_TO_ADDR
// uc_nation := 0 ;
75801: LD_ADDR_OWVAR 21
75805: PUSH
75806: LD_INT 0
75808: ST_TO_ADDR
// hc_class := class_tiger ;
75809: LD_ADDR_OWVAR 28
75813: PUSH
75814: LD_INT 14
75816: ST_TO_ADDR
// hc_gallery :=  ;
75817: LD_ADDR_OWVAR 33
75821: PUSH
75822: LD_STRING 
75824: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75825: LD_ADDR_OWVAR 35
75829: PUSH
75830: LD_VAR 0 1
75834: NEG
75835: PPUSH
75836: LD_VAR 0 1
75840: PPUSH
75841: CALL_OW 12
75845: ST_TO_ADDR
// end ;
75846: LD_VAR 0 2
75850: RET
// export function PrepareEnchidna ( ) ; begin
75851: LD_INT 0
75853: PPUSH
// uc_side := 0 ;
75854: LD_ADDR_OWVAR 20
75858: PUSH
75859: LD_INT 0
75861: ST_TO_ADDR
// uc_nation := 0 ;
75862: LD_ADDR_OWVAR 21
75866: PUSH
75867: LD_INT 0
75869: ST_TO_ADDR
// hc_class := class_baggie ;
75870: LD_ADDR_OWVAR 28
75874: PUSH
75875: LD_INT 13
75877: ST_TO_ADDR
// hc_gallery :=  ;
75878: LD_ADDR_OWVAR 33
75882: PUSH
75883: LD_STRING 
75885: ST_TO_ADDR
// end ;
75886: LD_VAR 0 1
75890: RET
// export function PrepareFrog ( ) ; begin
75891: LD_INT 0
75893: PPUSH
// uc_side := 0 ;
75894: LD_ADDR_OWVAR 20
75898: PUSH
75899: LD_INT 0
75901: ST_TO_ADDR
// uc_nation := 0 ;
75902: LD_ADDR_OWVAR 21
75906: PUSH
75907: LD_INT 0
75909: ST_TO_ADDR
// hc_class := class_frog ;
75910: LD_ADDR_OWVAR 28
75914: PUSH
75915: LD_INT 19
75917: ST_TO_ADDR
// hc_gallery :=  ;
75918: LD_ADDR_OWVAR 33
75922: PUSH
75923: LD_STRING 
75925: ST_TO_ADDR
// end ;
75926: LD_VAR 0 1
75930: RET
// export function PrepareFish ( ) ; begin
75931: LD_INT 0
75933: PPUSH
// uc_side := 0 ;
75934: LD_ADDR_OWVAR 20
75938: PUSH
75939: LD_INT 0
75941: ST_TO_ADDR
// uc_nation := 0 ;
75942: LD_ADDR_OWVAR 21
75946: PUSH
75947: LD_INT 0
75949: ST_TO_ADDR
// hc_class := class_fish ;
75950: LD_ADDR_OWVAR 28
75954: PUSH
75955: LD_INT 20
75957: ST_TO_ADDR
// hc_gallery :=  ;
75958: LD_ADDR_OWVAR 33
75962: PUSH
75963: LD_STRING 
75965: ST_TO_ADDR
// end ;
75966: LD_VAR 0 1
75970: RET
// export function PrepareBird ( ) ; begin
75971: LD_INT 0
75973: PPUSH
// uc_side := 0 ;
75974: LD_ADDR_OWVAR 20
75978: PUSH
75979: LD_INT 0
75981: ST_TO_ADDR
// uc_nation := 0 ;
75982: LD_ADDR_OWVAR 21
75986: PUSH
75987: LD_INT 0
75989: ST_TO_ADDR
// hc_class := class_phororhacos ;
75990: LD_ADDR_OWVAR 28
75994: PUSH
75995: LD_INT 18
75997: ST_TO_ADDR
// hc_gallery :=  ;
75998: LD_ADDR_OWVAR 33
76002: PUSH
76003: LD_STRING 
76005: ST_TO_ADDR
// end ;
76006: LD_VAR 0 1
76010: RET
// export function PrepareHorse ( ) ; begin
76011: LD_INT 0
76013: PPUSH
// uc_side := 0 ;
76014: LD_ADDR_OWVAR 20
76018: PUSH
76019: LD_INT 0
76021: ST_TO_ADDR
// uc_nation := 0 ;
76022: LD_ADDR_OWVAR 21
76026: PUSH
76027: LD_INT 0
76029: ST_TO_ADDR
// hc_class := class_horse ;
76030: LD_ADDR_OWVAR 28
76034: PUSH
76035: LD_INT 21
76037: ST_TO_ADDR
// hc_gallery :=  ;
76038: LD_ADDR_OWVAR 33
76042: PUSH
76043: LD_STRING 
76045: ST_TO_ADDR
// end ;
76046: LD_VAR 0 1
76050: RET
// export function PrepareMastodont ( ) ; begin
76051: LD_INT 0
76053: PPUSH
// uc_side := 0 ;
76054: LD_ADDR_OWVAR 20
76058: PUSH
76059: LD_INT 0
76061: ST_TO_ADDR
// uc_nation := 0 ;
76062: LD_ADDR_OWVAR 21
76066: PUSH
76067: LD_INT 0
76069: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76070: LD_ADDR_OWVAR 37
76074: PUSH
76075: LD_INT 31
76077: ST_TO_ADDR
// vc_control := control_rider ;
76078: LD_ADDR_OWVAR 38
76082: PUSH
76083: LD_INT 4
76085: ST_TO_ADDR
// end ;
76086: LD_VAR 0 1
76090: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76091: LD_INT 0
76093: PPUSH
76094: PPUSH
76095: PPUSH
// uc_side = 0 ;
76096: LD_ADDR_OWVAR 20
76100: PUSH
76101: LD_INT 0
76103: ST_TO_ADDR
// uc_nation = 0 ;
76104: LD_ADDR_OWVAR 21
76108: PUSH
76109: LD_INT 0
76111: ST_TO_ADDR
// InitHc_All ( ) ;
76112: CALL_OW 584
// InitVc ;
76116: CALL_OW 20
// if mastodonts then
76120: LD_VAR 0 6
76124: IFFALSE 76191
// for i = 1 to mastodonts do
76126: LD_ADDR_VAR 0 11
76130: PUSH
76131: DOUBLE
76132: LD_INT 1
76134: DEC
76135: ST_TO_ADDR
76136: LD_VAR 0 6
76140: PUSH
76141: FOR_TO
76142: IFFALSE 76189
// begin vc_chassis := 31 ;
76144: LD_ADDR_OWVAR 37
76148: PUSH
76149: LD_INT 31
76151: ST_TO_ADDR
// vc_control := control_rider ;
76152: LD_ADDR_OWVAR 38
76156: PUSH
76157: LD_INT 4
76159: ST_TO_ADDR
// animal := CreateVehicle ;
76160: LD_ADDR_VAR 0 12
76164: PUSH
76165: CALL_OW 45
76169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76170: LD_VAR 0 12
76174: PPUSH
76175: LD_VAR 0 8
76179: PPUSH
76180: LD_INT 0
76182: PPUSH
76183: CALL 78319 0 3
// end ;
76187: GO 76141
76189: POP
76190: POP
// if horses then
76191: LD_VAR 0 5
76195: IFFALSE 76262
// for i = 1 to horses do
76197: LD_ADDR_VAR 0 11
76201: PUSH
76202: DOUBLE
76203: LD_INT 1
76205: DEC
76206: ST_TO_ADDR
76207: LD_VAR 0 5
76211: PUSH
76212: FOR_TO
76213: IFFALSE 76260
// begin hc_class := 21 ;
76215: LD_ADDR_OWVAR 28
76219: PUSH
76220: LD_INT 21
76222: ST_TO_ADDR
// hc_gallery :=  ;
76223: LD_ADDR_OWVAR 33
76227: PUSH
76228: LD_STRING 
76230: ST_TO_ADDR
// animal := CreateHuman ;
76231: LD_ADDR_VAR 0 12
76235: PUSH
76236: CALL_OW 44
76240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76241: LD_VAR 0 12
76245: PPUSH
76246: LD_VAR 0 8
76250: PPUSH
76251: LD_INT 0
76253: PPUSH
76254: CALL 78319 0 3
// end ;
76258: GO 76212
76260: POP
76261: POP
// if birds then
76262: LD_VAR 0 1
76266: IFFALSE 76333
// for i = 1 to birds do
76268: LD_ADDR_VAR 0 11
76272: PUSH
76273: DOUBLE
76274: LD_INT 1
76276: DEC
76277: ST_TO_ADDR
76278: LD_VAR 0 1
76282: PUSH
76283: FOR_TO
76284: IFFALSE 76331
// begin hc_class := 18 ;
76286: LD_ADDR_OWVAR 28
76290: PUSH
76291: LD_INT 18
76293: ST_TO_ADDR
// hc_gallery =  ;
76294: LD_ADDR_OWVAR 33
76298: PUSH
76299: LD_STRING 
76301: ST_TO_ADDR
// animal := CreateHuman ;
76302: LD_ADDR_VAR 0 12
76306: PUSH
76307: CALL_OW 44
76311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76312: LD_VAR 0 12
76316: PPUSH
76317: LD_VAR 0 8
76321: PPUSH
76322: LD_INT 0
76324: PPUSH
76325: CALL 78319 0 3
// end ;
76329: GO 76283
76331: POP
76332: POP
// if tigers then
76333: LD_VAR 0 2
76337: IFFALSE 76421
// for i = 1 to tigers do
76339: LD_ADDR_VAR 0 11
76343: PUSH
76344: DOUBLE
76345: LD_INT 1
76347: DEC
76348: ST_TO_ADDR
76349: LD_VAR 0 2
76353: PUSH
76354: FOR_TO
76355: IFFALSE 76419
// begin hc_class = class_tiger ;
76357: LD_ADDR_OWVAR 28
76361: PUSH
76362: LD_INT 14
76364: ST_TO_ADDR
// hc_gallery =  ;
76365: LD_ADDR_OWVAR 33
76369: PUSH
76370: LD_STRING 
76372: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76373: LD_ADDR_OWVAR 35
76377: PUSH
76378: LD_INT 7
76380: NEG
76381: PPUSH
76382: LD_INT 7
76384: PPUSH
76385: CALL_OW 12
76389: ST_TO_ADDR
// animal := CreateHuman ;
76390: LD_ADDR_VAR 0 12
76394: PUSH
76395: CALL_OW 44
76399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76400: LD_VAR 0 12
76404: PPUSH
76405: LD_VAR 0 8
76409: PPUSH
76410: LD_INT 0
76412: PPUSH
76413: CALL 78319 0 3
// end ;
76417: GO 76354
76419: POP
76420: POP
// if apemans then
76421: LD_VAR 0 3
76425: IFFALSE 76548
// for i = 1 to apemans do
76427: LD_ADDR_VAR 0 11
76431: PUSH
76432: DOUBLE
76433: LD_INT 1
76435: DEC
76436: ST_TO_ADDR
76437: LD_VAR 0 3
76441: PUSH
76442: FOR_TO
76443: IFFALSE 76546
// begin hc_class = class_apeman ;
76445: LD_ADDR_OWVAR 28
76449: PUSH
76450: LD_INT 12
76452: ST_TO_ADDR
// hc_gallery =  ;
76453: LD_ADDR_OWVAR 33
76457: PUSH
76458: LD_STRING 
76460: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76461: LD_ADDR_OWVAR 35
76465: PUSH
76466: LD_INT 2
76468: NEG
76469: PPUSH
76470: LD_INT 2
76472: PPUSH
76473: CALL_OW 12
76477: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76478: LD_ADDR_OWVAR 31
76482: PUSH
76483: LD_INT 1
76485: PPUSH
76486: LD_INT 3
76488: PPUSH
76489: CALL_OW 12
76493: PUSH
76494: LD_INT 1
76496: PPUSH
76497: LD_INT 3
76499: PPUSH
76500: CALL_OW 12
76504: PUSH
76505: LD_INT 0
76507: PUSH
76508: LD_INT 0
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: ST_TO_ADDR
// animal := CreateHuman ;
76517: LD_ADDR_VAR 0 12
76521: PUSH
76522: CALL_OW 44
76526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76527: LD_VAR 0 12
76531: PPUSH
76532: LD_VAR 0 8
76536: PPUSH
76537: LD_INT 0
76539: PPUSH
76540: CALL 78319 0 3
// end ;
76544: GO 76442
76546: POP
76547: POP
// if enchidnas then
76548: LD_VAR 0 4
76552: IFFALSE 76619
// for i = 1 to enchidnas do
76554: LD_ADDR_VAR 0 11
76558: PUSH
76559: DOUBLE
76560: LD_INT 1
76562: DEC
76563: ST_TO_ADDR
76564: LD_VAR 0 4
76568: PUSH
76569: FOR_TO
76570: IFFALSE 76617
// begin hc_class = 13 ;
76572: LD_ADDR_OWVAR 28
76576: PUSH
76577: LD_INT 13
76579: ST_TO_ADDR
// hc_gallery =  ;
76580: LD_ADDR_OWVAR 33
76584: PUSH
76585: LD_STRING 
76587: ST_TO_ADDR
// animal := CreateHuman ;
76588: LD_ADDR_VAR 0 12
76592: PUSH
76593: CALL_OW 44
76597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76598: LD_VAR 0 12
76602: PPUSH
76603: LD_VAR 0 8
76607: PPUSH
76608: LD_INT 0
76610: PPUSH
76611: CALL 78319 0 3
// end ;
76615: GO 76569
76617: POP
76618: POP
// if fishes then
76619: LD_VAR 0 7
76623: IFFALSE 76690
// for i = 1 to fishes do
76625: LD_ADDR_VAR 0 11
76629: PUSH
76630: DOUBLE
76631: LD_INT 1
76633: DEC
76634: ST_TO_ADDR
76635: LD_VAR 0 7
76639: PUSH
76640: FOR_TO
76641: IFFALSE 76688
// begin hc_class = 20 ;
76643: LD_ADDR_OWVAR 28
76647: PUSH
76648: LD_INT 20
76650: ST_TO_ADDR
// hc_gallery =  ;
76651: LD_ADDR_OWVAR 33
76655: PUSH
76656: LD_STRING 
76658: ST_TO_ADDR
// animal := CreateHuman ;
76659: LD_ADDR_VAR 0 12
76663: PUSH
76664: CALL_OW 44
76668: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76669: LD_VAR 0 12
76673: PPUSH
76674: LD_VAR 0 9
76678: PPUSH
76679: LD_INT 0
76681: PPUSH
76682: CALL 78319 0 3
// end ;
76686: GO 76640
76688: POP
76689: POP
// end ;
76690: LD_VAR 0 10
76694: RET
// export function WantHeal ( sci , unit ) ; begin
76695: LD_INT 0
76697: PPUSH
// if GetTaskList ( sci ) > 0 then
76698: LD_VAR 0 1
76702: PPUSH
76703: CALL_OW 437
76707: PUSH
76708: LD_INT 0
76710: GREATER
76711: IFFALSE 76781
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76713: LD_VAR 0 1
76717: PPUSH
76718: CALL_OW 437
76722: PUSH
76723: LD_INT 1
76725: ARRAY
76726: PUSH
76727: LD_INT 1
76729: ARRAY
76730: PUSH
76731: LD_STRING l
76733: EQUAL
76734: PUSH
76735: LD_VAR 0 1
76739: PPUSH
76740: CALL_OW 437
76744: PUSH
76745: LD_INT 1
76747: ARRAY
76748: PUSH
76749: LD_INT 4
76751: ARRAY
76752: PUSH
76753: LD_VAR 0 2
76757: EQUAL
76758: AND
76759: IFFALSE 76771
// result := true else
76761: LD_ADDR_VAR 0 3
76765: PUSH
76766: LD_INT 1
76768: ST_TO_ADDR
76769: GO 76779
// result := false ;
76771: LD_ADDR_VAR 0 3
76775: PUSH
76776: LD_INT 0
76778: ST_TO_ADDR
// end else
76779: GO 76789
// result := false ;
76781: LD_ADDR_VAR 0 3
76785: PUSH
76786: LD_INT 0
76788: ST_TO_ADDR
// end ;
76789: LD_VAR 0 3
76793: RET
// export function HealTarget ( sci ) ; begin
76794: LD_INT 0
76796: PPUSH
// if not sci then
76797: LD_VAR 0 1
76801: NOT
76802: IFFALSE 76806
// exit ;
76804: GO 76871
// result := 0 ;
76806: LD_ADDR_VAR 0 2
76810: PUSH
76811: LD_INT 0
76813: ST_TO_ADDR
// if GetTaskList ( sci ) then
76814: LD_VAR 0 1
76818: PPUSH
76819: CALL_OW 437
76823: IFFALSE 76871
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76825: LD_VAR 0 1
76829: PPUSH
76830: CALL_OW 437
76834: PUSH
76835: LD_INT 1
76837: ARRAY
76838: PUSH
76839: LD_INT 1
76841: ARRAY
76842: PUSH
76843: LD_STRING l
76845: EQUAL
76846: IFFALSE 76871
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76848: LD_ADDR_VAR 0 2
76852: PUSH
76853: LD_VAR 0 1
76857: PPUSH
76858: CALL_OW 437
76862: PUSH
76863: LD_INT 1
76865: ARRAY
76866: PUSH
76867: LD_INT 4
76869: ARRAY
76870: ST_TO_ADDR
// end ;
76871: LD_VAR 0 2
76875: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76876: LD_INT 0
76878: PPUSH
76879: PPUSH
76880: PPUSH
76881: PPUSH
// if not base_units then
76882: LD_VAR 0 1
76886: NOT
76887: IFFALSE 76891
// exit ;
76889: GO 76978
// result := false ;
76891: LD_ADDR_VAR 0 2
76895: PUSH
76896: LD_INT 0
76898: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76899: LD_ADDR_VAR 0 5
76903: PUSH
76904: LD_VAR 0 1
76908: PPUSH
76909: LD_INT 21
76911: PUSH
76912: LD_INT 3
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: PPUSH
76919: CALL_OW 72
76923: ST_TO_ADDR
// if not tmp then
76924: LD_VAR 0 5
76928: NOT
76929: IFFALSE 76933
// exit ;
76931: GO 76978
// for i in tmp do
76933: LD_ADDR_VAR 0 3
76937: PUSH
76938: LD_VAR 0 5
76942: PUSH
76943: FOR_IN
76944: IFFALSE 76976
// begin result := EnemyInRange ( i , 22 ) ;
76946: LD_ADDR_VAR 0 2
76950: PUSH
76951: LD_VAR 0 3
76955: PPUSH
76956: LD_INT 22
76958: PPUSH
76959: CALL 74576 0 2
76963: ST_TO_ADDR
// if result then
76964: LD_VAR 0 2
76968: IFFALSE 76974
// exit ;
76970: POP
76971: POP
76972: GO 76978
// end ;
76974: GO 76943
76976: POP
76977: POP
// end ;
76978: LD_VAR 0 2
76982: RET
// export function FilterByTag ( units , tag ) ; begin
76983: LD_INT 0
76985: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76986: LD_ADDR_VAR 0 3
76990: PUSH
76991: LD_VAR 0 1
76995: PPUSH
76996: LD_INT 120
76998: PUSH
76999: LD_VAR 0 2
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PPUSH
77008: CALL_OW 72
77012: ST_TO_ADDR
// end ;
77013: LD_VAR 0 3
77017: RET
// export function IsDriver ( un ) ; begin
77018: LD_INT 0
77020: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77021: LD_ADDR_VAR 0 2
77025: PUSH
77026: LD_VAR 0 1
77030: PUSH
77031: LD_INT 55
77033: PUSH
77034: EMPTY
77035: LIST
77036: PPUSH
77037: CALL_OW 69
77041: IN
77042: ST_TO_ADDR
// end ;
77043: LD_VAR 0 2
77047: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77048: LD_INT 0
77050: PPUSH
77051: PPUSH
// list := [ ] ;
77052: LD_ADDR_VAR 0 5
77056: PUSH
77057: EMPTY
77058: ST_TO_ADDR
// case d of 0 :
77059: LD_VAR 0 3
77063: PUSH
77064: LD_INT 0
77066: DOUBLE
77067: EQUAL
77068: IFTRUE 77072
77070: GO 77205
77072: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77073: LD_ADDR_VAR 0 5
77077: PUSH
77078: LD_VAR 0 1
77082: PUSH
77083: LD_INT 4
77085: MINUS
77086: PUSH
77087: LD_VAR 0 2
77091: PUSH
77092: LD_INT 4
77094: MINUS
77095: PUSH
77096: LD_INT 2
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: LIST
77103: PUSH
77104: LD_VAR 0 1
77108: PUSH
77109: LD_INT 3
77111: MINUS
77112: PUSH
77113: LD_VAR 0 2
77117: PUSH
77118: LD_INT 1
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: LIST
77125: PUSH
77126: LD_VAR 0 1
77130: PUSH
77131: LD_INT 4
77133: PLUS
77134: PUSH
77135: LD_VAR 0 2
77139: PUSH
77140: LD_INT 4
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: LIST
77147: PUSH
77148: LD_VAR 0 1
77152: PUSH
77153: LD_INT 3
77155: PLUS
77156: PUSH
77157: LD_VAR 0 2
77161: PUSH
77162: LD_INT 3
77164: PLUS
77165: PUSH
77166: LD_INT 5
77168: PUSH
77169: EMPTY
77170: LIST
77171: LIST
77172: LIST
77173: PUSH
77174: LD_VAR 0 1
77178: PUSH
77179: LD_VAR 0 2
77183: PUSH
77184: LD_INT 4
77186: PLUS
77187: PUSH
77188: LD_INT 0
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: LIST
77195: PUSH
77196: EMPTY
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: ST_TO_ADDR
// end ; 1 :
77203: GO 77903
77205: LD_INT 1
77207: DOUBLE
77208: EQUAL
77209: IFTRUE 77213
77211: GO 77346
77213: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77214: LD_ADDR_VAR 0 5
77218: PUSH
77219: LD_VAR 0 1
77223: PUSH
77224: LD_VAR 0 2
77228: PUSH
77229: LD_INT 4
77231: MINUS
77232: PUSH
77233: LD_INT 3
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: LIST
77240: PUSH
77241: LD_VAR 0 1
77245: PUSH
77246: LD_INT 3
77248: MINUS
77249: PUSH
77250: LD_VAR 0 2
77254: PUSH
77255: LD_INT 3
77257: MINUS
77258: PUSH
77259: LD_INT 2
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: LIST
77266: PUSH
77267: LD_VAR 0 1
77271: PUSH
77272: LD_INT 4
77274: MINUS
77275: PUSH
77276: LD_VAR 0 2
77280: PUSH
77281: LD_INT 1
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: LIST
77288: PUSH
77289: LD_VAR 0 1
77293: PUSH
77294: LD_VAR 0 2
77298: PUSH
77299: LD_INT 3
77301: PLUS
77302: PUSH
77303: LD_INT 0
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: LIST
77310: PUSH
77311: LD_VAR 0 1
77315: PUSH
77316: LD_INT 4
77318: PLUS
77319: PUSH
77320: LD_VAR 0 2
77324: PUSH
77325: LD_INT 4
77327: PLUS
77328: PUSH
77329: LD_INT 5
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: LIST
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: ST_TO_ADDR
// end ; 2 :
77344: GO 77903
77346: LD_INT 2
77348: DOUBLE
77349: EQUAL
77350: IFTRUE 77354
77352: GO 77483
77354: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77355: LD_ADDR_VAR 0 5
77359: PUSH
77360: LD_VAR 0 1
77364: PUSH
77365: LD_VAR 0 2
77369: PUSH
77370: LD_INT 3
77372: MINUS
77373: PUSH
77374: LD_INT 3
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: LIST
77381: PUSH
77382: LD_VAR 0 1
77386: PUSH
77387: LD_INT 4
77389: PLUS
77390: PUSH
77391: LD_VAR 0 2
77395: PUSH
77396: LD_INT 4
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: LIST
77403: PUSH
77404: LD_VAR 0 1
77408: PUSH
77409: LD_VAR 0 2
77413: PUSH
77414: LD_INT 4
77416: PLUS
77417: PUSH
77418: LD_INT 0
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: LIST
77425: PUSH
77426: LD_VAR 0 1
77430: PUSH
77431: LD_INT 3
77433: MINUS
77434: PUSH
77435: LD_VAR 0 2
77439: PUSH
77440: LD_INT 1
77442: PUSH
77443: EMPTY
77444: LIST
77445: LIST
77446: LIST
77447: PUSH
77448: LD_VAR 0 1
77452: PUSH
77453: LD_INT 4
77455: MINUS
77456: PUSH
77457: LD_VAR 0 2
77461: PUSH
77462: LD_INT 4
77464: MINUS
77465: PUSH
77466: LD_INT 2
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: LIST
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: LIST
77480: ST_TO_ADDR
// end ; 3 :
77481: GO 77903
77483: LD_INT 3
77485: DOUBLE
77486: EQUAL
77487: IFTRUE 77491
77489: GO 77624
77491: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77492: LD_ADDR_VAR 0 5
77496: PUSH
77497: LD_VAR 0 1
77501: PUSH
77502: LD_INT 3
77504: PLUS
77505: PUSH
77506: LD_VAR 0 2
77510: PUSH
77511: LD_INT 4
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: LIST
77518: PUSH
77519: LD_VAR 0 1
77523: PUSH
77524: LD_INT 4
77526: PLUS
77527: PUSH
77528: LD_VAR 0 2
77532: PUSH
77533: LD_INT 4
77535: PLUS
77536: PUSH
77537: LD_INT 5
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: LIST
77544: PUSH
77545: LD_VAR 0 1
77549: PUSH
77550: LD_INT 4
77552: MINUS
77553: PUSH
77554: LD_VAR 0 2
77558: PUSH
77559: LD_INT 1
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: LIST
77566: PUSH
77567: LD_VAR 0 1
77571: PUSH
77572: LD_VAR 0 2
77576: PUSH
77577: LD_INT 4
77579: MINUS
77580: PUSH
77581: LD_INT 3
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: LIST
77588: PUSH
77589: LD_VAR 0 1
77593: PUSH
77594: LD_INT 3
77596: MINUS
77597: PUSH
77598: LD_VAR 0 2
77602: PUSH
77603: LD_INT 3
77605: MINUS
77606: PUSH
77607: LD_INT 2
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: LIST
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: ST_TO_ADDR
// end ; 4 :
77622: GO 77903
77624: LD_INT 4
77626: DOUBLE
77627: EQUAL
77628: IFTRUE 77632
77630: GO 77765
77632: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77633: LD_ADDR_VAR 0 5
77637: PUSH
77638: LD_VAR 0 1
77642: PUSH
77643: LD_VAR 0 2
77647: PUSH
77648: LD_INT 4
77650: PLUS
77651: PUSH
77652: LD_INT 0
77654: PUSH
77655: EMPTY
77656: LIST
77657: LIST
77658: LIST
77659: PUSH
77660: LD_VAR 0 1
77664: PUSH
77665: LD_INT 3
77667: PLUS
77668: PUSH
77669: LD_VAR 0 2
77673: PUSH
77674: LD_INT 3
77676: PLUS
77677: PUSH
77678: LD_INT 5
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: LIST
77685: PUSH
77686: LD_VAR 0 1
77690: PUSH
77691: LD_INT 4
77693: PLUS
77694: PUSH
77695: LD_VAR 0 2
77699: PUSH
77700: LD_INT 4
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: LIST
77707: PUSH
77708: LD_VAR 0 1
77712: PUSH
77713: LD_VAR 0 2
77717: PUSH
77718: LD_INT 3
77720: MINUS
77721: PUSH
77722: LD_INT 3
77724: PUSH
77725: EMPTY
77726: LIST
77727: LIST
77728: LIST
77729: PUSH
77730: LD_VAR 0 1
77734: PUSH
77735: LD_INT 4
77737: MINUS
77738: PUSH
77739: LD_VAR 0 2
77743: PUSH
77744: LD_INT 4
77746: MINUS
77747: PUSH
77748: LD_INT 2
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: LIST
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: LIST
77760: LIST
77761: LIST
77762: ST_TO_ADDR
// end ; 5 :
77763: GO 77903
77765: LD_INT 5
77767: DOUBLE
77768: EQUAL
77769: IFTRUE 77773
77771: GO 77902
77773: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77774: LD_ADDR_VAR 0 5
77778: PUSH
77779: LD_VAR 0 1
77783: PUSH
77784: LD_INT 4
77786: MINUS
77787: PUSH
77788: LD_VAR 0 2
77792: PUSH
77793: LD_INT 1
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: LIST
77800: PUSH
77801: LD_VAR 0 1
77805: PUSH
77806: LD_VAR 0 2
77810: PUSH
77811: LD_INT 4
77813: MINUS
77814: PUSH
77815: LD_INT 3
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: LIST
77822: PUSH
77823: LD_VAR 0 1
77827: PUSH
77828: LD_INT 4
77830: PLUS
77831: PUSH
77832: LD_VAR 0 2
77836: PUSH
77837: LD_INT 4
77839: PLUS
77840: PUSH
77841: LD_INT 5
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: LIST
77848: PUSH
77849: LD_VAR 0 1
77853: PUSH
77854: LD_INT 3
77856: PLUS
77857: PUSH
77858: LD_VAR 0 2
77862: PUSH
77863: LD_INT 4
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: LIST
77870: PUSH
77871: LD_VAR 0 1
77875: PUSH
77876: LD_VAR 0 2
77880: PUSH
77881: LD_INT 3
77883: PLUS
77884: PUSH
77885: LD_INT 0
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: LIST
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: ST_TO_ADDR
// end ; end ;
77900: GO 77903
77902: POP
// result := list ;
77903: LD_ADDR_VAR 0 4
77907: PUSH
77908: LD_VAR 0 5
77912: ST_TO_ADDR
// end ;
77913: LD_VAR 0 4
77917: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77918: LD_INT 0
77920: PPUSH
77921: PPUSH
77922: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77923: LD_VAR 0 1
77927: NOT
77928: PUSH
77929: LD_VAR 0 2
77933: PUSH
77934: LD_INT 1
77936: PUSH
77937: LD_INT 2
77939: PUSH
77940: LD_INT 3
77942: PUSH
77943: LD_INT 4
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: IN
77952: NOT
77953: OR
77954: IFFALSE 77958
// exit ;
77956: GO 78041
// tmp := [ ] ;
77958: LD_ADDR_VAR 0 5
77962: PUSH
77963: EMPTY
77964: ST_TO_ADDR
// for i in units do
77965: LD_ADDR_VAR 0 4
77969: PUSH
77970: LD_VAR 0 1
77974: PUSH
77975: FOR_IN
77976: IFFALSE 78010
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77978: LD_ADDR_VAR 0 5
77982: PUSH
77983: LD_VAR 0 5
77987: PPUSH
77988: LD_VAR 0 4
77992: PPUSH
77993: LD_VAR 0 2
77997: PPUSH
77998: CALL_OW 259
78002: PPUSH
78003: CALL 79414 0 2
78007: ST_TO_ADDR
78008: GO 77975
78010: POP
78011: POP
// if not tmp then
78012: LD_VAR 0 5
78016: NOT
78017: IFFALSE 78021
// exit ;
78019: GO 78041
// result := SortListByListDesc ( units , tmp ) ;
78021: LD_ADDR_VAR 0 3
78025: PUSH
78026: LD_VAR 0 1
78030: PPUSH
78031: LD_VAR 0 5
78035: PPUSH
78036: CALL_OW 77
78040: ST_TO_ADDR
// end ;
78041: LD_VAR 0 3
78045: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78046: LD_INT 0
78048: PPUSH
78049: PPUSH
78050: PPUSH
// result := false ;
78051: LD_ADDR_VAR 0 3
78055: PUSH
78056: LD_INT 0
78058: ST_TO_ADDR
// if not building then
78059: LD_VAR 0 2
78063: NOT
78064: IFFALSE 78068
// exit ;
78066: GO 78206
// x := GetX ( building ) ;
78068: LD_ADDR_VAR 0 4
78072: PUSH
78073: LD_VAR 0 2
78077: PPUSH
78078: CALL_OW 250
78082: ST_TO_ADDR
// y := GetY ( building ) ;
78083: LD_ADDR_VAR 0 5
78087: PUSH
78088: LD_VAR 0 2
78092: PPUSH
78093: CALL_OW 251
78097: ST_TO_ADDR
// if not x or not y then
78098: LD_VAR 0 4
78102: NOT
78103: PUSH
78104: LD_VAR 0 5
78108: NOT
78109: OR
78110: IFFALSE 78114
// exit ;
78112: GO 78206
// if GetTaskList ( unit ) then
78114: LD_VAR 0 1
78118: PPUSH
78119: CALL_OW 437
78123: IFFALSE 78206
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78125: LD_STRING e
78127: PUSH
78128: LD_VAR 0 1
78132: PPUSH
78133: CALL_OW 437
78137: PUSH
78138: LD_INT 1
78140: ARRAY
78141: PUSH
78142: LD_INT 1
78144: ARRAY
78145: EQUAL
78146: PUSH
78147: LD_VAR 0 4
78151: PUSH
78152: LD_VAR 0 1
78156: PPUSH
78157: CALL_OW 437
78161: PUSH
78162: LD_INT 1
78164: ARRAY
78165: PUSH
78166: LD_INT 2
78168: ARRAY
78169: EQUAL
78170: AND
78171: PUSH
78172: LD_VAR 0 5
78176: PUSH
78177: LD_VAR 0 1
78181: PPUSH
78182: CALL_OW 437
78186: PUSH
78187: LD_INT 1
78189: ARRAY
78190: PUSH
78191: LD_INT 3
78193: ARRAY
78194: EQUAL
78195: AND
78196: IFFALSE 78206
// result := true end ;
78198: LD_ADDR_VAR 0 3
78202: PUSH
78203: LD_INT 1
78205: ST_TO_ADDR
// end ;
78206: LD_VAR 0 3
78210: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78211: LD_INT 0
78213: PPUSH
// result := false ;
78214: LD_ADDR_VAR 0 4
78218: PUSH
78219: LD_INT 0
78221: ST_TO_ADDR
// if GetTaskList ( unit ) then
78222: LD_VAR 0 1
78226: PPUSH
78227: CALL_OW 437
78231: IFFALSE 78314
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78233: LD_STRING M
78235: PUSH
78236: LD_VAR 0 1
78240: PPUSH
78241: CALL_OW 437
78245: PUSH
78246: LD_INT 1
78248: ARRAY
78249: PUSH
78250: LD_INT 1
78252: ARRAY
78253: EQUAL
78254: PUSH
78255: LD_VAR 0 2
78259: PUSH
78260: LD_VAR 0 1
78264: PPUSH
78265: CALL_OW 437
78269: PUSH
78270: LD_INT 1
78272: ARRAY
78273: PUSH
78274: LD_INT 2
78276: ARRAY
78277: EQUAL
78278: AND
78279: PUSH
78280: LD_VAR 0 3
78284: PUSH
78285: LD_VAR 0 1
78289: PPUSH
78290: CALL_OW 437
78294: PUSH
78295: LD_INT 1
78297: ARRAY
78298: PUSH
78299: LD_INT 3
78301: ARRAY
78302: EQUAL
78303: AND
78304: IFFALSE 78314
// result := true ;
78306: LD_ADDR_VAR 0 4
78310: PUSH
78311: LD_INT 1
78313: ST_TO_ADDR
// end ; end ;
78314: LD_VAR 0 4
78318: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78319: LD_INT 0
78321: PPUSH
78322: PPUSH
78323: PPUSH
78324: PPUSH
// if not unit or not area then
78325: LD_VAR 0 1
78329: NOT
78330: PUSH
78331: LD_VAR 0 2
78335: NOT
78336: OR
78337: IFFALSE 78341
// exit ;
78339: GO 78517
// tmp := AreaToList ( area , i ) ;
78341: LD_ADDR_VAR 0 6
78345: PUSH
78346: LD_VAR 0 2
78350: PPUSH
78351: LD_VAR 0 5
78355: PPUSH
78356: CALL_OW 517
78360: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78361: LD_ADDR_VAR 0 5
78365: PUSH
78366: DOUBLE
78367: LD_INT 1
78369: DEC
78370: ST_TO_ADDR
78371: LD_VAR 0 6
78375: PUSH
78376: LD_INT 1
78378: ARRAY
78379: PUSH
78380: FOR_TO
78381: IFFALSE 78515
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78383: LD_ADDR_VAR 0 7
78387: PUSH
78388: LD_VAR 0 6
78392: PUSH
78393: LD_INT 1
78395: ARRAY
78396: PUSH
78397: LD_VAR 0 5
78401: ARRAY
78402: PUSH
78403: LD_VAR 0 6
78407: PUSH
78408: LD_INT 2
78410: ARRAY
78411: PUSH
78412: LD_VAR 0 5
78416: ARRAY
78417: PUSH
78418: EMPTY
78419: LIST
78420: LIST
78421: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78422: LD_INT 92
78424: PUSH
78425: LD_VAR 0 7
78429: PUSH
78430: LD_INT 1
78432: ARRAY
78433: PUSH
78434: LD_VAR 0 7
78438: PUSH
78439: LD_INT 2
78441: ARRAY
78442: PUSH
78443: LD_INT 2
78445: PUSH
78446: EMPTY
78447: LIST
78448: LIST
78449: LIST
78450: LIST
78451: PPUSH
78452: CALL_OW 69
78456: PUSH
78457: LD_INT 0
78459: EQUAL
78460: IFFALSE 78513
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78462: LD_VAR 0 1
78466: PPUSH
78467: LD_VAR 0 7
78471: PUSH
78472: LD_INT 1
78474: ARRAY
78475: PPUSH
78476: LD_VAR 0 7
78480: PUSH
78481: LD_INT 2
78483: ARRAY
78484: PPUSH
78485: LD_VAR 0 3
78489: PPUSH
78490: CALL_OW 48
// result := IsPlaced ( unit ) ;
78494: LD_ADDR_VAR 0 4
78498: PUSH
78499: LD_VAR 0 1
78503: PPUSH
78504: CALL_OW 305
78508: ST_TO_ADDR
// exit ;
78509: POP
78510: POP
78511: GO 78517
// end ; end ;
78513: GO 78380
78515: POP
78516: POP
// end ;
78517: LD_VAR 0 4
78521: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78522: LD_INT 0
78524: PPUSH
78525: PPUSH
78526: PPUSH
// if not side or side > 8 then
78527: LD_VAR 0 1
78531: NOT
78532: PUSH
78533: LD_VAR 0 1
78537: PUSH
78538: LD_INT 8
78540: GREATER
78541: OR
78542: IFFALSE 78546
// exit ;
78544: GO 78733
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78546: LD_ADDR_VAR 0 4
78550: PUSH
78551: LD_INT 22
78553: PUSH
78554: LD_VAR 0 1
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PUSH
78563: LD_INT 21
78565: PUSH
78566: LD_INT 3
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PPUSH
78577: CALL_OW 69
78581: ST_TO_ADDR
// if not tmp then
78582: LD_VAR 0 4
78586: NOT
78587: IFFALSE 78591
// exit ;
78589: GO 78733
// enable_addtolog := true ;
78591: LD_ADDR_OWVAR 81
78595: PUSH
78596: LD_INT 1
78598: ST_TO_ADDR
// AddToLog ( [ ) ;
78599: LD_STRING [
78601: PPUSH
78602: CALL_OW 561
// for i in tmp do
78606: LD_ADDR_VAR 0 3
78610: PUSH
78611: LD_VAR 0 4
78615: PUSH
78616: FOR_IN
78617: IFFALSE 78724
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78619: LD_STRING [
78621: PUSH
78622: LD_VAR 0 3
78626: PPUSH
78627: CALL_OW 266
78631: STR
78632: PUSH
78633: LD_STRING , 
78635: STR
78636: PUSH
78637: LD_VAR 0 3
78641: PPUSH
78642: CALL_OW 250
78646: STR
78647: PUSH
78648: LD_STRING , 
78650: STR
78651: PUSH
78652: LD_VAR 0 3
78656: PPUSH
78657: CALL_OW 251
78661: STR
78662: PUSH
78663: LD_STRING , 
78665: STR
78666: PUSH
78667: LD_VAR 0 3
78671: PPUSH
78672: CALL_OW 254
78676: STR
78677: PUSH
78678: LD_STRING , 
78680: STR
78681: PUSH
78682: LD_VAR 0 3
78686: PPUSH
78687: LD_INT 1
78689: PPUSH
78690: CALL_OW 268
78694: STR
78695: PUSH
78696: LD_STRING , 
78698: STR
78699: PUSH
78700: LD_VAR 0 3
78704: PPUSH
78705: LD_INT 2
78707: PPUSH
78708: CALL_OW 268
78712: STR
78713: PUSH
78714: LD_STRING ],
78716: STR
78717: PPUSH
78718: CALL_OW 561
// end ;
78722: GO 78616
78724: POP
78725: POP
// AddToLog ( ]; ) ;
78726: LD_STRING ];
78728: PPUSH
78729: CALL_OW 561
// end ;
78733: LD_VAR 0 2
78737: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78738: LD_INT 0
78740: PPUSH
78741: PPUSH
78742: PPUSH
78743: PPUSH
78744: PPUSH
// if not area or not rate or not max then
78745: LD_VAR 0 1
78749: NOT
78750: PUSH
78751: LD_VAR 0 2
78755: NOT
78756: OR
78757: PUSH
78758: LD_VAR 0 4
78762: NOT
78763: OR
78764: IFFALSE 78768
// exit ;
78766: GO 78957
// while 1 do
78768: LD_INT 1
78770: IFFALSE 78957
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78772: LD_ADDR_VAR 0 9
78776: PUSH
78777: LD_VAR 0 1
78781: PPUSH
78782: LD_INT 1
78784: PPUSH
78785: CALL_OW 287
78789: PUSH
78790: LD_INT 10
78792: MUL
78793: ST_TO_ADDR
// r := rate / 10 ;
78794: LD_ADDR_VAR 0 7
78798: PUSH
78799: LD_VAR 0 2
78803: PUSH
78804: LD_INT 10
78806: DIVREAL
78807: ST_TO_ADDR
// time := 1 1$00 ;
78808: LD_ADDR_VAR 0 8
78812: PUSH
78813: LD_INT 2100
78815: ST_TO_ADDR
// if amount < min then
78816: LD_VAR 0 9
78820: PUSH
78821: LD_VAR 0 3
78825: LESS
78826: IFFALSE 78844
// r := r * 2 else
78828: LD_ADDR_VAR 0 7
78832: PUSH
78833: LD_VAR 0 7
78837: PUSH
78838: LD_INT 2
78840: MUL
78841: ST_TO_ADDR
78842: GO 78870
// if amount > max then
78844: LD_VAR 0 9
78848: PUSH
78849: LD_VAR 0 4
78853: GREATER
78854: IFFALSE 78870
// r := r / 2 ;
78856: LD_ADDR_VAR 0 7
78860: PUSH
78861: LD_VAR 0 7
78865: PUSH
78866: LD_INT 2
78868: DIVREAL
78869: ST_TO_ADDR
// time := time / r ;
78870: LD_ADDR_VAR 0 8
78874: PUSH
78875: LD_VAR 0 8
78879: PUSH
78880: LD_VAR 0 7
78884: DIVREAL
78885: ST_TO_ADDR
// if time < 0 then
78886: LD_VAR 0 8
78890: PUSH
78891: LD_INT 0
78893: LESS
78894: IFFALSE 78911
// time := time * - 1 ;
78896: LD_ADDR_VAR 0 8
78900: PUSH
78901: LD_VAR 0 8
78905: PUSH
78906: LD_INT 1
78908: NEG
78909: MUL
78910: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78911: LD_VAR 0 8
78915: PUSH
78916: LD_INT 35
78918: PPUSH
78919: LD_INT 875
78921: PPUSH
78922: CALL_OW 12
78926: PLUS
78927: PPUSH
78928: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78932: LD_INT 1
78934: PPUSH
78935: LD_INT 5
78937: PPUSH
78938: CALL_OW 12
78942: PPUSH
78943: LD_VAR 0 1
78947: PPUSH
78948: LD_INT 1
78950: PPUSH
78951: CALL_OW 55
// end ;
78955: GO 78768
// end ;
78957: LD_VAR 0 5
78961: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78962: LD_INT 0
78964: PPUSH
78965: PPUSH
78966: PPUSH
78967: PPUSH
78968: PPUSH
78969: PPUSH
78970: PPUSH
78971: PPUSH
// if not turrets or not factories then
78972: LD_VAR 0 1
78976: NOT
78977: PUSH
78978: LD_VAR 0 2
78982: NOT
78983: OR
78984: IFFALSE 78988
// exit ;
78986: GO 79295
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78988: LD_ADDR_VAR 0 10
78992: PUSH
78993: LD_INT 5
78995: PUSH
78996: LD_INT 6
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PUSH
79003: LD_INT 2
79005: PUSH
79006: LD_INT 4
79008: PUSH
79009: EMPTY
79010: LIST
79011: LIST
79012: PUSH
79013: LD_INT 3
79015: PUSH
79016: LD_INT 5
79018: PUSH
79019: EMPTY
79020: LIST
79021: LIST
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: LIST
79027: PUSH
79028: LD_INT 24
79030: PUSH
79031: LD_INT 25
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: LD_INT 23
79040: PUSH
79041: LD_INT 27
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 42
79054: PUSH
79055: LD_INT 43
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 44
79064: PUSH
79065: LD_INT 46
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 45
79074: PUSH
79075: LD_INT 47
79077: PUSH
79078: EMPTY
79079: LIST
79080: LIST
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: LIST
79086: PUSH
79087: EMPTY
79088: LIST
79089: LIST
79090: LIST
79091: ST_TO_ADDR
// result := [ ] ;
79092: LD_ADDR_VAR 0 3
79096: PUSH
79097: EMPTY
79098: ST_TO_ADDR
// for i in turrets do
79099: LD_ADDR_VAR 0 4
79103: PUSH
79104: LD_VAR 0 1
79108: PUSH
79109: FOR_IN
79110: IFFALSE 79293
// begin nat := GetNation ( i ) ;
79112: LD_ADDR_VAR 0 7
79116: PUSH
79117: LD_VAR 0 4
79121: PPUSH
79122: CALL_OW 248
79126: ST_TO_ADDR
// weapon := 0 ;
79127: LD_ADDR_VAR 0 8
79131: PUSH
79132: LD_INT 0
79134: ST_TO_ADDR
// if not nat then
79135: LD_VAR 0 7
79139: NOT
79140: IFFALSE 79144
// continue ;
79142: GO 79109
// for j in list [ nat ] do
79144: LD_ADDR_VAR 0 5
79148: PUSH
79149: LD_VAR 0 10
79153: PUSH
79154: LD_VAR 0 7
79158: ARRAY
79159: PUSH
79160: FOR_IN
79161: IFFALSE 79202
// if GetBWeapon ( i ) = j [ 1 ] then
79163: LD_VAR 0 4
79167: PPUSH
79168: CALL_OW 269
79172: PUSH
79173: LD_VAR 0 5
79177: PUSH
79178: LD_INT 1
79180: ARRAY
79181: EQUAL
79182: IFFALSE 79200
// begin weapon := j [ 2 ] ;
79184: LD_ADDR_VAR 0 8
79188: PUSH
79189: LD_VAR 0 5
79193: PUSH
79194: LD_INT 2
79196: ARRAY
79197: ST_TO_ADDR
// break ;
79198: GO 79202
// end ;
79200: GO 79160
79202: POP
79203: POP
// if not weapon then
79204: LD_VAR 0 8
79208: NOT
79209: IFFALSE 79213
// continue ;
79211: GO 79109
// for k in factories do
79213: LD_ADDR_VAR 0 6
79217: PUSH
79218: LD_VAR 0 2
79222: PUSH
79223: FOR_IN
79224: IFFALSE 79289
// begin weapons := AvailableWeaponList ( k ) ;
79226: LD_ADDR_VAR 0 9
79230: PUSH
79231: LD_VAR 0 6
79235: PPUSH
79236: CALL_OW 478
79240: ST_TO_ADDR
// if not weapons then
79241: LD_VAR 0 9
79245: NOT
79246: IFFALSE 79250
// continue ;
79248: GO 79223
// if weapon in weapons then
79250: LD_VAR 0 8
79254: PUSH
79255: LD_VAR 0 9
79259: IN
79260: IFFALSE 79287
// begin result := [ i , weapon ] ;
79262: LD_ADDR_VAR 0 3
79266: PUSH
79267: LD_VAR 0 4
79271: PUSH
79272: LD_VAR 0 8
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: ST_TO_ADDR
// exit ;
79281: POP
79282: POP
79283: POP
79284: POP
79285: GO 79295
// end ; end ;
79287: GO 79223
79289: POP
79290: POP
// end ;
79291: GO 79109
79293: POP
79294: POP
// end ;
79295: LD_VAR 0 3
79299: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79300: LD_INT 0
79302: PPUSH
// if not side or side > 8 then
79303: LD_VAR 0 3
79307: NOT
79308: PUSH
79309: LD_VAR 0 3
79313: PUSH
79314: LD_INT 8
79316: GREATER
79317: OR
79318: IFFALSE 79322
// exit ;
79320: GO 79381
// if not range then
79322: LD_VAR 0 4
79326: NOT
79327: IFFALSE 79338
// range := - 12 ;
79329: LD_ADDR_VAR 0 4
79333: PUSH
79334: LD_INT 12
79336: NEG
79337: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79338: LD_VAR 0 1
79342: PPUSH
79343: LD_VAR 0 2
79347: PPUSH
79348: LD_VAR 0 3
79352: PPUSH
79353: LD_VAR 0 4
79357: PPUSH
79358: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79362: LD_VAR 0 1
79366: PPUSH
79367: LD_VAR 0 2
79371: PPUSH
79372: LD_VAR 0 3
79376: PPUSH
79377: CALL_OW 331
// end ;
79381: LD_VAR 0 5
79385: RET
// export function Video ( mode ) ; begin
79386: LD_INT 0
79388: PPUSH
// ingame_video = mode ;
79389: LD_ADDR_OWVAR 52
79393: PUSH
79394: LD_VAR 0 1
79398: ST_TO_ADDR
// interface_hidden = mode ;
79399: LD_ADDR_OWVAR 54
79403: PUSH
79404: LD_VAR 0 1
79408: ST_TO_ADDR
// end ;
79409: LD_VAR 0 2
79413: RET
// export function Join ( array , element ) ; begin
79414: LD_INT 0
79416: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79417: LD_ADDR_VAR 0 3
79421: PUSH
79422: LD_VAR 0 1
79426: PPUSH
79427: LD_VAR 0 1
79431: PUSH
79432: LD_INT 1
79434: PLUS
79435: PPUSH
79436: LD_VAR 0 2
79440: PPUSH
79441: CALL_OW 1
79445: ST_TO_ADDR
// end ;
79446: LD_VAR 0 3
79450: RET
// export function JoinUnion ( array , element ) ; begin
79451: LD_INT 0
79453: PPUSH
// result := array union element ;
79454: LD_ADDR_VAR 0 3
79458: PUSH
79459: LD_VAR 0 1
79463: PUSH
79464: LD_VAR 0 2
79468: UNION
79469: ST_TO_ADDR
// end ;
79470: LD_VAR 0 3
79474: RET
// export function GetBehemoths ( side ) ; begin
79475: LD_INT 0
79477: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79478: LD_ADDR_VAR 0 2
79482: PUSH
79483: LD_INT 22
79485: PUSH
79486: LD_VAR 0 1
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 31
79497: PUSH
79498: LD_INT 25
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: EMPTY
79506: LIST
79507: LIST
79508: PPUSH
79509: CALL_OW 69
79513: ST_TO_ADDR
// end ;
79514: LD_VAR 0 2
79518: RET
// export function Shuffle ( array ) ; var i , index ; begin
79519: LD_INT 0
79521: PPUSH
79522: PPUSH
79523: PPUSH
// result := [ ] ;
79524: LD_ADDR_VAR 0 2
79528: PUSH
79529: EMPTY
79530: ST_TO_ADDR
// if not array then
79531: LD_VAR 0 1
79535: NOT
79536: IFFALSE 79540
// exit ;
79538: GO 79639
// Randomize ;
79540: CALL_OW 10
// for i = array downto 1 do
79544: LD_ADDR_VAR 0 3
79548: PUSH
79549: DOUBLE
79550: LD_VAR 0 1
79554: INC
79555: ST_TO_ADDR
79556: LD_INT 1
79558: PUSH
79559: FOR_DOWNTO
79560: IFFALSE 79637
// begin index := rand ( 1 , array ) ;
79562: LD_ADDR_VAR 0 4
79566: PUSH
79567: LD_INT 1
79569: PPUSH
79570: LD_VAR 0 1
79574: PPUSH
79575: CALL_OW 12
79579: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79580: LD_ADDR_VAR 0 2
79584: PUSH
79585: LD_VAR 0 2
79589: PPUSH
79590: LD_VAR 0 2
79594: PUSH
79595: LD_INT 1
79597: PLUS
79598: PPUSH
79599: LD_VAR 0 1
79603: PUSH
79604: LD_VAR 0 4
79608: ARRAY
79609: PPUSH
79610: CALL_OW 2
79614: ST_TO_ADDR
// array := Delete ( array , index ) ;
79615: LD_ADDR_VAR 0 1
79619: PUSH
79620: LD_VAR 0 1
79624: PPUSH
79625: LD_VAR 0 4
79629: PPUSH
79630: CALL_OW 3
79634: ST_TO_ADDR
// end ;
79635: GO 79559
79637: POP
79638: POP
// end ;
79639: LD_VAR 0 2
79643: RET
// export function GetBaseMaterials ( base ) ; begin
79644: LD_INT 0
79646: PPUSH
// result := [ 0 , 0 , 0 ] ;
79647: LD_ADDR_VAR 0 2
79651: PUSH
79652: LD_INT 0
79654: PUSH
79655: LD_INT 0
79657: PUSH
79658: LD_INT 0
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: LIST
79665: ST_TO_ADDR
// if not base then
79666: LD_VAR 0 1
79670: NOT
79671: IFFALSE 79675
// exit ;
79673: GO 79724
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79675: LD_ADDR_VAR 0 2
79679: PUSH
79680: LD_VAR 0 1
79684: PPUSH
79685: LD_INT 1
79687: PPUSH
79688: CALL_OW 275
79692: PUSH
79693: LD_VAR 0 1
79697: PPUSH
79698: LD_INT 2
79700: PPUSH
79701: CALL_OW 275
79705: PUSH
79706: LD_VAR 0 1
79710: PPUSH
79711: LD_INT 3
79713: PPUSH
79714: CALL_OW 275
79718: PUSH
79719: EMPTY
79720: LIST
79721: LIST
79722: LIST
79723: ST_TO_ADDR
// end ;
79724: LD_VAR 0 2
79728: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79729: LD_INT 0
79731: PPUSH
79732: PPUSH
// result := array ;
79733: LD_ADDR_VAR 0 3
79737: PUSH
79738: LD_VAR 0 1
79742: ST_TO_ADDR
// if size >= result then
79743: LD_VAR 0 2
79747: PUSH
79748: LD_VAR 0 3
79752: GREATEREQUAL
79753: IFFALSE 79757
// exit ;
79755: GO 79807
// if size then
79757: LD_VAR 0 2
79761: IFFALSE 79807
// for i := array downto size do
79763: LD_ADDR_VAR 0 4
79767: PUSH
79768: DOUBLE
79769: LD_VAR 0 1
79773: INC
79774: ST_TO_ADDR
79775: LD_VAR 0 2
79779: PUSH
79780: FOR_DOWNTO
79781: IFFALSE 79805
// result := Delete ( result , result ) ;
79783: LD_ADDR_VAR 0 3
79787: PUSH
79788: LD_VAR 0 3
79792: PPUSH
79793: LD_VAR 0 3
79797: PPUSH
79798: CALL_OW 3
79802: ST_TO_ADDR
79803: GO 79780
79805: POP
79806: POP
// end ;
79807: LD_VAR 0 3
79811: RET
// export function ComExit ( unit ) ; var tmp ; begin
79812: LD_INT 0
79814: PPUSH
79815: PPUSH
// if not IsInUnit ( unit ) then
79816: LD_VAR 0 1
79820: PPUSH
79821: CALL_OW 310
79825: NOT
79826: IFFALSE 79830
// exit ;
79828: GO 79890
// tmp := IsInUnit ( unit ) ;
79830: LD_ADDR_VAR 0 3
79834: PUSH
79835: LD_VAR 0 1
79839: PPUSH
79840: CALL_OW 310
79844: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79845: LD_VAR 0 3
79849: PPUSH
79850: CALL_OW 247
79854: PUSH
79855: LD_INT 2
79857: EQUAL
79858: IFFALSE 79871
// ComExitVehicle ( unit ) else
79860: LD_VAR 0 1
79864: PPUSH
79865: CALL_OW 121
79869: GO 79880
// ComExitBuilding ( unit ) ;
79871: LD_VAR 0 1
79875: PPUSH
79876: CALL_OW 122
// result := tmp ;
79880: LD_ADDR_VAR 0 2
79884: PUSH
79885: LD_VAR 0 3
79889: ST_TO_ADDR
// end ;
79890: LD_VAR 0 2
79894: RET
// export function ComExitAll ( units ) ; var i ; begin
79895: LD_INT 0
79897: PPUSH
79898: PPUSH
// if not units then
79899: LD_VAR 0 1
79903: NOT
79904: IFFALSE 79908
// exit ;
79906: GO 79934
// for i in units do
79908: LD_ADDR_VAR 0 3
79912: PUSH
79913: LD_VAR 0 1
79917: PUSH
79918: FOR_IN
79919: IFFALSE 79932
// ComExit ( i ) ;
79921: LD_VAR 0 3
79925: PPUSH
79926: CALL 79812 0 1
79930: GO 79918
79932: POP
79933: POP
// end ;
79934: LD_VAR 0 2
79938: RET
// export function ResetHc ; begin
79939: LD_INT 0
79941: PPUSH
// InitHc ;
79942: CALL_OW 19
// hc_importance := 0 ;
79946: LD_ADDR_OWVAR 32
79950: PUSH
79951: LD_INT 0
79953: ST_TO_ADDR
// end ;
79954: LD_VAR 0 1
79958: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79959: LD_INT 0
79961: PPUSH
79962: PPUSH
79963: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79964: LD_ADDR_VAR 0 6
79968: PUSH
79969: LD_VAR 0 1
79973: PUSH
79974: LD_VAR 0 3
79978: PLUS
79979: PUSH
79980: LD_INT 2
79982: DIV
79983: ST_TO_ADDR
// if _x < 0 then
79984: LD_VAR 0 6
79988: PUSH
79989: LD_INT 0
79991: LESS
79992: IFFALSE 80009
// _x := _x * - 1 ;
79994: LD_ADDR_VAR 0 6
79998: PUSH
79999: LD_VAR 0 6
80003: PUSH
80004: LD_INT 1
80006: NEG
80007: MUL
80008: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80009: LD_ADDR_VAR 0 7
80013: PUSH
80014: LD_VAR 0 2
80018: PUSH
80019: LD_VAR 0 4
80023: PLUS
80024: PUSH
80025: LD_INT 2
80027: DIV
80028: ST_TO_ADDR
// if _y < 0 then
80029: LD_VAR 0 7
80033: PUSH
80034: LD_INT 0
80036: LESS
80037: IFFALSE 80054
// _y := _y * - 1 ;
80039: LD_ADDR_VAR 0 7
80043: PUSH
80044: LD_VAR 0 7
80048: PUSH
80049: LD_INT 1
80051: NEG
80052: MUL
80053: ST_TO_ADDR
// result := [ _x , _y ] ;
80054: LD_ADDR_VAR 0 5
80058: PUSH
80059: LD_VAR 0 6
80063: PUSH
80064: LD_VAR 0 7
80068: PUSH
80069: EMPTY
80070: LIST
80071: LIST
80072: ST_TO_ADDR
// end ;
80073: LD_VAR 0 5
80077: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80078: LD_INT 0
80080: PPUSH
80081: PPUSH
80082: PPUSH
80083: PPUSH
// task := GetTaskList ( unit ) ;
80084: LD_ADDR_VAR 0 7
80088: PUSH
80089: LD_VAR 0 1
80093: PPUSH
80094: CALL_OW 437
80098: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80099: LD_VAR 0 7
80103: NOT
80104: PUSH
80105: LD_VAR 0 1
80109: PPUSH
80110: LD_VAR 0 2
80114: PPUSH
80115: CALL_OW 308
80119: NOT
80120: AND
80121: IFFALSE 80125
// exit ;
80123: GO 80243
// if IsInArea ( unit , area ) then
80125: LD_VAR 0 1
80129: PPUSH
80130: LD_VAR 0 2
80134: PPUSH
80135: CALL_OW 308
80139: IFFALSE 80157
// begin ComMoveToArea ( unit , goAway ) ;
80141: LD_VAR 0 1
80145: PPUSH
80146: LD_VAR 0 3
80150: PPUSH
80151: CALL_OW 113
// exit ;
80155: GO 80243
// end ; if task [ 1 ] [ 1 ] <> M then
80157: LD_VAR 0 7
80161: PUSH
80162: LD_INT 1
80164: ARRAY
80165: PUSH
80166: LD_INT 1
80168: ARRAY
80169: PUSH
80170: LD_STRING M
80172: NONEQUAL
80173: IFFALSE 80177
// exit ;
80175: GO 80243
// x := task [ 1 ] [ 2 ] ;
80177: LD_ADDR_VAR 0 5
80181: PUSH
80182: LD_VAR 0 7
80186: PUSH
80187: LD_INT 1
80189: ARRAY
80190: PUSH
80191: LD_INT 2
80193: ARRAY
80194: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80195: LD_ADDR_VAR 0 6
80199: PUSH
80200: LD_VAR 0 7
80204: PUSH
80205: LD_INT 1
80207: ARRAY
80208: PUSH
80209: LD_INT 3
80211: ARRAY
80212: ST_TO_ADDR
// if InArea ( x , y , area ) then
80213: LD_VAR 0 5
80217: PPUSH
80218: LD_VAR 0 6
80222: PPUSH
80223: LD_VAR 0 2
80227: PPUSH
80228: CALL_OW 309
80232: IFFALSE 80243
// ComStop ( unit ) ;
80234: LD_VAR 0 1
80238: PPUSH
80239: CALL_OW 141
// end ;
80243: LD_VAR 0 4
80247: RET
// export function Abs ( value ) ; begin
80248: LD_INT 0
80250: PPUSH
// result := value ;
80251: LD_ADDR_VAR 0 2
80255: PUSH
80256: LD_VAR 0 1
80260: ST_TO_ADDR
// if value < 0 then
80261: LD_VAR 0 1
80265: PUSH
80266: LD_INT 0
80268: LESS
80269: IFFALSE 80286
// result := value * - 1 ;
80271: LD_ADDR_VAR 0 2
80275: PUSH
80276: LD_VAR 0 1
80280: PUSH
80281: LD_INT 1
80283: NEG
80284: MUL
80285: ST_TO_ADDR
// end ;
80286: LD_VAR 0 2
80290: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80291: LD_INT 0
80293: PPUSH
80294: PPUSH
80295: PPUSH
80296: PPUSH
80297: PPUSH
80298: PPUSH
80299: PPUSH
80300: PPUSH
// if not unit or not building then
80301: LD_VAR 0 1
80305: NOT
80306: PUSH
80307: LD_VAR 0 2
80311: NOT
80312: OR
80313: IFFALSE 80317
// exit ;
80315: GO 80543
// x := GetX ( building ) ;
80317: LD_ADDR_VAR 0 4
80321: PUSH
80322: LD_VAR 0 2
80326: PPUSH
80327: CALL_OW 250
80331: ST_TO_ADDR
// y := GetY ( building ) ;
80332: LD_ADDR_VAR 0 6
80336: PUSH
80337: LD_VAR 0 2
80341: PPUSH
80342: CALL_OW 251
80346: ST_TO_ADDR
// d := GetDir ( building ) ;
80347: LD_ADDR_VAR 0 8
80351: PUSH
80352: LD_VAR 0 2
80356: PPUSH
80357: CALL_OW 254
80361: ST_TO_ADDR
// r := 4 ;
80362: LD_ADDR_VAR 0 9
80366: PUSH
80367: LD_INT 4
80369: ST_TO_ADDR
// for i := 1 to 5 do
80370: LD_ADDR_VAR 0 10
80374: PUSH
80375: DOUBLE
80376: LD_INT 1
80378: DEC
80379: ST_TO_ADDR
80380: LD_INT 5
80382: PUSH
80383: FOR_TO
80384: IFFALSE 80541
// begin _x := ShiftX ( x , d , r + i ) ;
80386: LD_ADDR_VAR 0 5
80390: PUSH
80391: LD_VAR 0 4
80395: PPUSH
80396: LD_VAR 0 8
80400: PPUSH
80401: LD_VAR 0 9
80405: PUSH
80406: LD_VAR 0 10
80410: PLUS
80411: PPUSH
80412: CALL_OW 272
80416: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80417: LD_ADDR_VAR 0 7
80421: PUSH
80422: LD_VAR 0 6
80426: PPUSH
80427: LD_VAR 0 8
80431: PPUSH
80432: LD_VAR 0 9
80436: PUSH
80437: LD_VAR 0 10
80441: PLUS
80442: PPUSH
80443: CALL_OW 273
80447: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80448: LD_VAR 0 5
80452: PPUSH
80453: LD_VAR 0 7
80457: PPUSH
80458: CALL_OW 488
80462: PUSH
80463: LD_VAR 0 5
80467: PPUSH
80468: LD_VAR 0 7
80472: PPUSH
80473: CALL_OW 428
80477: PPUSH
80478: CALL_OW 247
80482: PUSH
80483: LD_INT 3
80485: PUSH
80486: LD_INT 2
80488: PUSH
80489: EMPTY
80490: LIST
80491: LIST
80492: IN
80493: NOT
80494: AND
80495: IFFALSE 80539
// begin ComMoveXY ( unit , _x , _y ) ;
80497: LD_VAR 0 1
80501: PPUSH
80502: LD_VAR 0 5
80506: PPUSH
80507: LD_VAR 0 7
80511: PPUSH
80512: CALL_OW 111
// result := [ _x , _y ] ;
80516: LD_ADDR_VAR 0 3
80520: PUSH
80521: LD_VAR 0 5
80525: PUSH
80526: LD_VAR 0 7
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: ST_TO_ADDR
// exit ;
80535: POP
80536: POP
80537: GO 80543
// end ; end ;
80539: GO 80383
80541: POP
80542: POP
// end ;
80543: LD_VAR 0 3
80547: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80548: LD_INT 0
80550: PPUSH
80551: PPUSH
80552: PPUSH
// result := 0 ;
80553: LD_ADDR_VAR 0 3
80557: PUSH
80558: LD_INT 0
80560: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80561: LD_VAR 0 1
80565: PUSH
80566: LD_INT 0
80568: LESS
80569: PUSH
80570: LD_VAR 0 1
80574: PUSH
80575: LD_INT 8
80577: GREATER
80578: OR
80579: PUSH
80580: LD_VAR 0 2
80584: PUSH
80585: LD_INT 0
80587: LESS
80588: OR
80589: PUSH
80590: LD_VAR 0 2
80594: PUSH
80595: LD_INT 8
80597: GREATER
80598: OR
80599: IFFALSE 80603
// exit ;
80601: GO 80678
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80603: LD_ADDR_VAR 0 4
80607: PUSH
80608: LD_INT 22
80610: PUSH
80611: LD_VAR 0 2
80615: PUSH
80616: EMPTY
80617: LIST
80618: LIST
80619: PPUSH
80620: CALL_OW 69
80624: PUSH
80625: FOR_IN
80626: IFFALSE 80676
// begin un := UnitShoot ( i ) ;
80628: LD_ADDR_VAR 0 5
80632: PUSH
80633: LD_VAR 0 4
80637: PPUSH
80638: CALL_OW 504
80642: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80643: LD_VAR 0 5
80647: PPUSH
80648: CALL_OW 255
80652: PUSH
80653: LD_VAR 0 1
80657: EQUAL
80658: IFFALSE 80674
// begin result := un ;
80660: LD_ADDR_VAR 0 3
80664: PUSH
80665: LD_VAR 0 5
80669: ST_TO_ADDR
// exit ;
80670: POP
80671: POP
80672: GO 80678
// end ; end ;
80674: GO 80625
80676: POP
80677: POP
// end ;
80678: LD_VAR 0 3
80682: RET
// export function GetCargoBay ( units ) ; begin
80683: LD_INT 0
80685: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80686: LD_ADDR_VAR 0 2
80690: PUSH
80691: LD_VAR 0 1
80695: PPUSH
80696: LD_INT 2
80698: PUSH
80699: LD_INT 34
80701: PUSH
80702: LD_INT 12
80704: PUSH
80705: EMPTY
80706: LIST
80707: LIST
80708: PUSH
80709: LD_INT 34
80711: PUSH
80712: LD_INT 51
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: PUSH
80719: LD_INT 34
80721: PUSH
80722: LD_INT 32
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: PUSH
80729: LD_INT 34
80731: PUSH
80732: LD_INT 89
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: LIST
80743: LIST
80744: LIST
80745: PPUSH
80746: CALL_OW 72
80750: ST_TO_ADDR
// end ;
80751: LD_VAR 0 2
80755: RET
// export function Negate ( value ) ; begin
80756: LD_INT 0
80758: PPUSH
// result := not value ;
80759: LD_ADDR_VAR 0 2
80763: PUSH
80764: LD_VAR 0 1
80768: NOT
80769: ST_TO_ADDR
// end ;
80770: LD_VAR 0 2
80774: RET
// export function Inc ( value ) ; begin
80775: LD_INT 0
80777: PPUSH
// result := value + 1 ;
80778: LD_ADDR_VAR 0 2
80782: PUSH
80783: LD_VAR 0 1
80787: PUSH
80788: LD_INT 1
80790: PLUS
80791: ST_TO_ADDR
// end ;
80792: LD_VAR 0 2
80796: RET
// export function Dec ( value ) ; begin
80797: LD_INT 0
80799: PPUSH
// result := value - 1 ;
80800: LD_ADDR_VAR 0 2
80804: PUSH
80805: LD_VAR 0 1
80809: PUSH
80810: LD_INT 1
80812: MINUS
80813: ST_TO_ADDR
// end ;
80814: LD_VAR 0 2
80818: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80819: LD_INT 0
80821: PPUSH
80822: PPUSH
80823: PPUSH
80824: PPUSH
80825: PPUSH
80826: PPUSH
80827: PPUSH
80828: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80829: LD_VAR 0 1
80833: PPUSH
80834: LD_VAR 0 2
80838: PPUSH
80839: CALL_OW 488
80843: NOT
80844: PUSH
80845: LD_VAR 0 3
80849: PPUSH
80850: LD_VAR 0 4
80854: PPUSH
80855: CALL_OW 488
80859: NOT
80860: OR
80861: IFFALSE 80874
// begin result := - 1 ;
80863: LD_ADDR_VAR 0 5
80867: PUSH
80868: LD_INT 1
80870: NEG
80871: ST_TO_ADDR
// exit ;
80872: GO 81109
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80874: LD_ADDR_VAR 0 12
80878: PUSH
80879: LD_VAR 0 1
80883: PPUSH
80884: LD_VAR 0 2
80888: PPUSH
80889: LD_VAR 0 3
80893: PPUSH
80894: LD_VAR 0 4
80898: PPUSH
80899: CALL 79959 0 4
80903: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80904: LD_ADDR_VAR 0 11
80908: PUSH
80909: LD_VAR 0 1
80913: PPUSH
80914: LD_VAR 0 2
80918: PPUSH
80919: LD_VAR 0 12
80923: PUSH
80924: LD_INT 1
80926: ARRAY
80927: PPUSH
80928: LD_VAR 0 12
80932: PUSH
80933: LD_INT 2
80935: ARRAY
80936: PPUSH
80937: CALL_OW 298
80941: ST_TO_ADDR
// distance := 9999 ;
80942: LD_ADDR_VAR 0 10
80946: PUSH
80947: LD_INT 9999
80949: ST_TO_ADDR
// for i := 0 to 5 do
80950: LD_ADDR_VAR 0 6
80954: PUSH
80955: DOUBLE
80956: LD_INT 0
80958: DEC
80959: ST_TO_ADDR
80960: LD_INT 5
80962: PUSH
80963: FOR_TO
80964: IFFALSE 81107
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80966: LD_ADDR_VAR 0 7
80970: PUSH
80971: LD_VAR 0 1
80975: PPUSH
80976: LD_VAR 0 6
80980: PPUSH
80981: LD_VAR 0 11
80985: PPUSH
80986: CALL_OW 272
80990: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80991: LD_ADDR_VAR 0 8
80995: PUSH
80996: LD_VAR 0 2
81000: PPUSH
81001: LD_VAR 0 6
81005: PPUSH
81006: LD_VAR 0 11
81010: PPUSH
81011: CALL_OW 273
81015: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81016: LD_VAR 0 7
81020: PPUSH
81021: LD_VAR 0 8
81025: PPUSH
81026: CALL_OW 488
81030: NOT
81031: IFFALSE 81035
// continue ;
81033: GO 80963
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81035: LD_ADDR_VAR 0 9
81039: PUSH
81040: LD_VAR 0 12
81044: PUSH
81045: LD_INT 1
81047: ARRAY
81048: PPUSH
81049: LD_VAR 0 12
81053: PUSH
81054: LD_INT 2
81056: ARRAY
81057: PPUSH
81058: LD_VAR 0 7
81062: PPUSH
81063: LD_VAR 0 8
81067: PPUSH
81068: CALL_OW 298
81072: ST_TO_ADDR
// if tmp < distance then
81073: LD_VAR 0 9
81077: PUSH
81078: LD_VAR 0 10
81082: LESS
81083: IFFALSE 81105
// begin result := i ;
81085: LD_ADDR_VAR 0 5
81089: PUSH
81090: LD_VAR 0 6
81094: ST_TO_ADDR
// distance := tmp ;
81095: LD_ADDR_VAR 0 10
81099: PUSH
81100: LD_VAR 0 9
81104: ST_TO_ADDR
// end ; end ;
81105: GO 80963
81107: POP
81108: POP
// end ;
81109: LD_VAR 0 5
81113: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81114: LD_INT 0
81116: PPUSH
81117: PPUSH
// if not driver or not IsInUnit ( driver ) then
81118: LD_VAR 0 1
81122: NOT
81123: PUSH
81124: LD_VAR 0 1
81128: PPUSH
81129: CALL_OW 310
81133: NOT
81134: OR
81135: IFFALSE 81139
// exit ;
81137: GO 81229
// vehicle := IsInUnit ( driver ) ;
81139: LD_ADDR_VAR 0 3
81143: PUSH
81144: LD_VAR 0 1
81148: PPUSH
81149: CALL_OW 310
81153: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81154: LD_VAR 0 1
81158: PPUSH
81159: LD_STRING \
81161: PUSH
81162: LD_INT 0
81164: PUSH
81165: LD_INT 0
81167: PUSH
81168: LD_INT 0
81170: PUSH
81171: LD_INT 0
81173: PUSH
81174: LD_INT 0
81176: PUSH
81177: LD_INT 0
81179: PUSH
81180: EMPTY
81181: LIST
81182: LIST
81183: LIST
81184: LIST
81185: LIST
81186: LIST
81187: LIST
81188: PUSH
81189: LD_STRING E
81191: PUSH
81192: LD_INT 0
81194: PUSH
81195: LD_INT 0
81197: PUSH
81198: LD_VAR 0 3
81202: PUSH
81203: LD_INT 0
81205: PUSH
81206: LD_INT 0
81208: PUSH
81209: LD_INT 0
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: LIST
81216: LIST
81217: LIST
81218: LIST
81219: LIST
81220: PUSH
81221: EMPTY
81222: LIST
81223: LIST
81224: PPUSH
81225: CALL_OW 446
// end ;
81229: LD_VAR 0 2
81233: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81234: LD_INT 0
81236: PPUSH
81237: PPUSH
// if not driver or not IsInUnit ( driver ) then
81238: LD_VAR 0 1
81242: NOT
81243: PUSH
81244: LD_VAR 0 1
81248: PPUSH
81249: CALL_OW 310
81253: NOT
81254: OR
81255: IFFALSE 81259
// exit ;
81257: GO 81349
// vehicle := IsInUnit ( driver ) ;
81259: LD_ADDR_VAR 0 3
81263: PUSH
81264: LD_VAR 0 1
81268: PPUSH
81269: CALL_OW 310
81273: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81274: LD_VAR 0 1
81278: PPUSH
81279: LD_STRING \
81281: PUSH
81282: LD_INT 0
81284: PUSH
81285: LD_INT 0
81287: PUSH
81288: LD_INT 0
81290: PUSH
81291: LD_INT 0
81293: PUSH
81294: LD_INT 0
81296: PUSH
81297: LD_INT 0
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: LIST
81304: LIST
81305: LIST
81306: LIST
81307: LIST
81308: PUSH
81309: LD_STRING E
81311: PUSH
81312: LD_INT 0
81314: PUSH
81315: LD_INT 0
81317: PUSH
81318: LD_VAR 0 3
81322: PUSH
81323: LD_INT 0
81325: PUSH
81326: LD_INT 0
81328: PUSH
81329: LD_INT 0
81331: PUSH
81332: EMPTY
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: LIST
81340: PUSH
81341: EMPTY
81342: LIST
81343: LIST
81344: PPUSH
81345: CALL_OW 447
// end ;
81349: LD_VAR 0 2
81353: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81354: LD_INT 0
81356: PPUSH
81357: PPUSH
81358: PPUSH
// tmp := [ ] ;
81359: LD_ADDR_VAR 0 5
81363: PUSH
81364: EMPTY
81365: ST_TO_ADDR
// for i in units do
81366: LD_ADDR_VAR 0 4
81370: PUSH
81371: LD_VAR 0 1
81375: PUSH
81376: FOR_IN
81377: IFFALSE 81415
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81379: LD_ADDR_VAR 0 5
81383: PUSH
81384: LD_VAR 0 5
81388: PPUSH
81389: LD_VAR 0 5
81393: PUSH
81394: LD_INT 1
81396: PLUS
81397: PPUSH
81398: LD_VAR 0 4
81402: PPUSH
81403: CALL_OW 256
81407: PPUSH
81408: CALL_OW 2
81412: ST_TO_ADDR
81413: GO 81376
81415: POP
81416: POP
// if not tmp then
81417: LD_VAR 0 5
81421: NOT
81422: IFFALSE 81426
// exit ;
81424: GO 81474
// if asc then
81426: LD_VAR 0 2
81430: IFFALSE 81454
// result := SortListByListAsc ( units , tmp ) else
81432: LD_ADDR_VAR 0 3
81436: PUSH
81437: LD_VAR 0 1
81441: PPUSH
81442: LD_VAR 0 5
81446: PPUSH
81447: CALL_OW 76
81451: ST_TO_ADDR
81452: GO 81474
// result := SortListByListDesc ( units , tmp ) ;
81454: LD_ADDR_VAR 0 3
81458: PUSH
81459: LD_VAR 0 1
81463: PPUSH
81464: LD_VAR 0 5
81468: PPUSH
81469: CALL_OW 77
81473: ST_TO_ADDR
// end ;
81474: LD_VAR 0 3
81478: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81479: LD_INT 0
81481: PPUSH
81482: PPUSH
// task := GetTaskList ( mech ) ;
81483: LD_ADDR_VAR 0 4
81487: PUSH
81488: LD_VAR 0 1
81492: PPUSH
81493: CALL_OW 437
81497: ST_TO_ADDR
// if not task then
81498: LD_VAR 0 4
81502: NOT
81503: IFFALSE 81507
// exit ;
81505: GO 81549
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81507: LD_ADDR_VAR 0 3
81511: PUSH
81512: LD_VAR 0 4
81516: PUSH
81517: LD_INT 1
81519: ARRAY
81520: PUSH
81521: LD_INT 1
81523: ARRAY
81524: PUSH
81525: LD_STRING r
81527: EQUAL
81528: PUSH
81529: LD_VAR 0 4
81533: PUSH
81534: LD_INT 1
81536: ARRAY
81537: PUSH
81538: LD_INT 4
81540: ARRAY
81541: PUSH
81542: LD_VAR 0 2
81546: EQUAL
81547: AND
81548: ST_TO_ADDR
// end ;
81549: LD_VAR 0 3
81553: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81554: LD_INT 0
81556: PPUSH
// SetDir ( unit , d ) ;
81557: LD_VAR 0 1
81561: PPUSH
81562: LD_VAR 0 4
81566: PPUSH
81567: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81571: LD_VAR 0 1
81575: PPUSH
81576: LD_VAR 0 2
81580: PPUSH
81581: LD_VAR 0 3
81585: PPUSH
81586: LD_VAR 0 5
81590: PPUSH
81591: CALL_OW 48
// end ;
81595: LD_VAR 0 6
81599: RET
// export function ToNaturalNumber ( number ) ; begin
81600: LD_INT 0
81602: PPUSH
// result := number div 1 ;
81603: LD_ADDR_VAR 0 2
81607: PUSH
81608: LD_VAR 0 1
81612: PUSH
81613: LD_INT 1
81615: DIV
81616: ST_TO_ADDR
// if number < 0 then
81617: LD_VAR 0 1
81621: PUSH
81622: LD_INT 0
81624: LESS
81625: IFFALSE 81635
// result := 0 ;
81627: LD_ADDR_VAR 0 2
81631: PUSH
81632: LD_INT 0
81634: ST_TO_ADDR
// end ;
81635: LD_VAR 0 2
81639: RET
// export function SortByClass ( units , class ) ; var un ; begin
81640: LD_INT 0
81642: PPUSH
81643: PPUSH
// if not units or not class then
81644: LD_VAR 0 1
81648: NOT
81649: PUSH
81650: LD_VAR 0 2
81654: NOT
81655: OR
81656: IFFALSE 81660
// exit ;
81658: GO 81755
// result := [ ] ;
81660: LD_ADDR_VAR 0 3
81664: PUSH
81665: EMPTY
81666: ST_TO_ADDR
// for un in units do
81667: LD_ADDR_VAR 0 4
81671: PUSH
81672: LD_VAR 0 1
81676: PUSH
81677: FOR_IN
81678: IFFALSE 81753
// if GetClass ( un ) = class then
81680: LD_VAR 0 4
81684: PPUSH
81685: CALL_OW 257
81689: PUSH
81690: LD_VAR 0 2
81694: EQUAL
81695: IFFALSE 81722
// result := Insert ( result , 1 , un ) else
81697: LD_ADDR_VAR 0 3
81701: PUSH
81702: LD_VAR 0 3
81706: PPUSH
81707: LD_INT 1
81709: PPUSH
81710: LD_VAR 0 4
81714: PPUSH
81715: CALL_OW 2
81719: ST_TO_ADDR
81720: GO 81751
// result := Replace ( result , result + 1 , un ) ;
81722: LD_ADDR_VAR 0 3
81726: PUSH
81727: LD_VAR 0 3
81731: PPUSH
81732: LD_VAR 0 3
81736: PUSH
81737: LD_INT 1
81739: PLUS
81740: PPUSH
81741: LD_VAR 0 4
81745: PPUSH
81746: CALL_OW 1
81750: ST_TO_ADDR
81751: GO 81677
81753: POP
81754: POP
// end ;
81755: LD_VAR 0 3
81759: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81760: LD_INT 0
81762: PPUSH
81763: PPUSH
81764: PPUSH
81765: PPUSH
81766: PPUSH
81767: PPUSH
81768: PPUSH
// result := [ ] ;
81769: LD_ADDR_VAR 0 4
81773: PUSH
81774: EMPTY
81775: ST_TO_ADDR
// if x - r < 0 then
81776: LD_VAR 0 1
81780: PUSH
81781: LD_VAR 0 3
81785: MINUS
81786: PUSH
81787: LD_INT 0
81789: LESS
81790: IFFALSE 81802
// min_x := 0 else
81792: LD_ADDR_VAR 0 8
81796: PUSH
81797: LD_INT 0
81799: ST_TO_ADDR
81800: GO 81818
// min_x := x - r ;
81802: LD_ADDR_VAR 0 8
81806: PUSH
81807: LD_VAR 0 1
81811: PUSH
81812: LD_VAR 0 3
81816: MINUS
81817: ST_TO_ADDR
// if y - r < 0 then
81818: LD_VAR 0 2
81822: PUSH
81823: LD_VAR 0 3
81827: MINUS
81828: PUSH
81829: LD_INT 0
81831: LESS
81832: IFFALSE 81844
// min_y := 0 else
81834: LD_ADDR_VAR 0 7
81838: PUSH
81839: LD_INT 0
81841: ST_TO_ADDR
81842: GO 81860
// min_y := y - r ;
81844: LD_ADDR_VAR 0 7
81848: PUSH
81849: LD_VAR 0 2
81853: PUSH
81854: LD_VAR 0 3
81858: MINUS
81859: ST_TO_ADDR
// max_x := x + r ;
81860: LD_ADDR_VAR 0 9
81864: PUSH
81865: LD_VAR 0 1
81869: PUSH
81870: LD_VAR 0 3
81874: PLUS
81875: ST_TO_ADDR
// max_y := y + r ;
81876: LD_ADDR_VAR 0 10
81880: PUSH
81881: LD_VAR 0 2
81885: PUSH
81886: LD_VAR 0 3
81890: PLUS
81891: ST_TO_ADDR
// for _x = min_x to max_x do
81892: LD_ADDR_VAR 0 5
81896: PUSH
81897: DOUBLE
81898: LD_VAR 0 8
81902: DEC
81903: ST_TO_ADDR
81904: LD_VAR 0 9
81908: PUSH
81909: FOR_TO
81910: IFFALSE 82011
// for _y = min_y to max_y do
81912: LD_ADDR_VAR 0 6
81916: PUSH
81917: DOUBLE
81918: LD_VAR 0 7
81922: DEC
81923: ST_TO_ADDR
81924: LD_VAR 0 10
81928: PUSH
81929: FOR_TO
81930: IFFALSE 82007
// begin if not ValidHex ( _x , _y ) then
81932: LD_VAR 0 5
81936: PPUSH
81937: LD_VAR 0 6
81941: PPUSH
81942: CALL_OW 488
81946: NOT
81947: IFFALSE 81951
// continue ;
81949: GO 81929
// if GetResourceTypeXY ( _x , _y ) then
81951: LD_VAR 0 5
81955: PPUSH
81956: LD_VAR 0 6
81960: PPUSH
81961: CALL_OW 283
81965: IFFALSE 82005
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81967: LD_ADDR_VAR 0 4
81971: PUSH
81972: LD_VAR 0 4
81976: PPUSH
81977: LD_VAR 0 4
81981: PUSH
81982: LD_INT 1
81984: PLUS
81985: PPUSH
81986: LD_VAR 0 5
81990: PUSH
81991: LD_VAR 0 6
81995: PUSH
81996: EMPTY
81997: LIST
81998: LIST
81999: PPUSH
82000: CALL_OW 1
82004: ST_TO_ADDR
// end ;
82005: GO 81929
82007: POP
82008: POP
82009: GO 81909
82011: POP
82012: POP
// end ;
82013: LD_VAR 0 4
82017: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82018: LD_INT 0
82020: PPUSH
82021: PPUSH
82022: PPUSH
82023: PPUSH
82024: PPUSH
82025: PPUSH
82026: PPUSH
82027: PPUSH
// if not units then
82028: LD_VAR 0 1
82032: NOT
82033: IFFALSE 82037
// exit ;
82035: GO 82561
// result := UnitFilter ( units , [ f_ok ] ) ;
82037: LD_ADDR_VAR 0 3
82041: PUSH
82042: LD_VAR 0 1
82046: PPUSH
82047: LD_INT 50
82049: PUSH
82050: EMPTY
82051: LIST
82052: PPUSH
82053: CALL_OW 72
82057: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82058: LD_ADDR_VAR 0 8
82062: PUSH
82063: LD_VAR 0 1
82067: PUSH
82068: LD_INT 1
82070: ARRAY
82071: PPUSH
82072: CALL_OW 255
82076: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82077: LD_ADDR_VAR 0 10
82081: PUSH
82082: LD_INT 29
82084: PUSH
82085: LD_INT 91
82087: PUSH
82088: LD_INT 49
82090: PUSH
82091: EMPTY
82092: LIST
82093: LIST
82094: LIST
82095: ST_TO_ADDR
// if not result then
82096: LD_VAR 0 3
82100: NOT
82101: IFFALSE 82105
// exit ;
82103: GO 82561
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82105: LD_ADDR_VAR 0 5
82109: PUSH
82110: LD_INT 81
82112: PUSH
82113: LD_VAR 0 8
82117: PUSH
82118: EMPTY
82119: LIST
82120: LIST
82121: PPUSH
82122: CALL_OW 69
82126: ST_TO_ADDR
// for i in result do
82127: LD_ADDR_VAR 0 4
82131: PUSH
82132: LD_VAR 0 3
82136: PUSH
82137: FOR_IN
82138: IFFALSE 82559
// begin tag := GetTag ( i ) + 1 ;
82140: LD_ADDR_VAR 0 9
82144: PUSH
82145: LD_VAR 0 4
82149: PPUSH
82150: CALL_OW 110
82154: PUSH
82155: LD_INT 1
82157: PLUS
82158: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
82159: LD_ADDR_VAR 0 7
82163: PUSH
82164: LD_VAR 0 4
82168: PPUSH
82169: CALL_OW 250
82173: PPUSH
82174: LD_VAR 0 4
82178: PPUSH
82179: CALL_OW 251
82183: PPUSH
82184: LD_INT 6
82186: PPUSH
82187: CALL 81760 0 3
82191: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
82192: LD_VAR 0 4
82196: PPUSH
82197: CALL_OW 247
82201: PUSH
82202: LD_INT 2
82204: EQUAL
82205: PUSH
82206: LD_VAR 0 7
82210: AND
82211: PUSH
82212: LD_VAR 0 4
82216: PPUSH
82217: CALL_OW 264
82221: PUSH
82222: LD_VAR 0 10
82226: IN
82227: NOT
82228: AND
82229: IFFALSE 82268
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82231: LD_VAR 0 4
82235: PPUSH
82236: LD_VAR 0 7
82240: PUSH
82241: LD_INT 1
82243: ARRAY
82244: PUSH
82245: LD_INT 1
82247: ARRAY
82248: PPUSH
82249: LD_VAR 0 7
82253: PUSH
82254: LD_INT 1
82256: ARRAY
82257: PUSH
82258: LD_INT 2
82260: ARRAY
82261: PPUSH
82262: CALL_OW 116
82266: GO 82557
// if path > tag then
82268: LD_VAR 0 2
82272: PUSH
82273: LD_VAR 0 9
82277: GREATER
82278: IFFALSE 82486
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82280: LD_ADDR_VAR 0 6
82284: PUSH
82285: LD_VAR 0 5
82289: PPUSH
82290: LD_INT 91
82292: PUSH
82293: LD_VAR 0 4
82297: PUSH
82298: LD_INT 8
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: LIST
82305: PPUSH
82306: CALL_OW 72
82310: ST_TO_ADDR
// if nearEnemy then
82311: LD_VAR 0 6
82315: IFFALSE 82384
// begin if GetWeapon ( i ) = ru_time_lapser then
82317: LD_VAR 0 4
82321: PPUSH
82322: CALL_OW 264
82326: PUSH
82327: LD_INT 49
82329: EQUAL
82330: IFFALSE 82358
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82332: LD_VAR 0 4
82336: PPUSH
82337: LD_VAR 0 6
82341: PPUSH
82342: LD_VAR 0 4
82346: PPUSH
82347: CALL_OW 74
82351: PPUSH
82352: CALL_OW 112
82356: GO 82382
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82358: LD_VAR 0 4
82362: PPUSH
82363: LD_VAR 0 6
82367: PPUSH
82368: LD_VAR 0 4
82372: PPUSH
82373: CALL_OW 74
82377: PPUSH
82378: CALL 83632 0 2
// end else
82382: GO 82484
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82384: LD_VAR 0 4
82388: PPUSH
82389: LD_VAR 0 2
82393: PUSH
82394: LD_VAR 0 9
82398: ARRAY
82399: PUSH
82400: LD_INT 1
82402: ARRAY
82403: PPUSH
82404: LD_VAR 0 2
82408: PUSH
82409: LD_VAR 0 9
82413: ARRAY
82414: PUSH
82415: LD_INT 2
82417: ARRAY
82418: PPUSH
82419: CALL_OW 297
82423: PUSH
82424: LD_INT 6
82426: GREATER
82427: IFFALSE 82470
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82429: LD_VAR 0 4
82433: PPUSH
82434: LD_VAR 0 2
82438: PUSH
82439: LD_VAR 0 9
82443: ARRAY
82444: PUSH
82445: LD_INT 1
82447: ARRAY
82448: PPUSH
82449: LD_VAR 0 2
82453: PUSH
82454: LD_VAR 0 9
82458: ARRAY
82459: PUSH
82460: LD_INT 2
82462: ARRAY
82463: PPUSH
82464: CALL_OW 114
82468: GO 82484
// SetTag ( i , tag ) ;
82470: LD_VAR 0 4
82474: PPUSH
82475: LD_VAR 0 9
82479: PPUSH
82480: CALL_OW 109
// end else
82484: GO 82557
// if enemy then
82486: LD_VAR 0 5
82490: IFFALSE 82557
// begin if GetWeapon ( i ) = ru_time_lapser then
82492: LD_VAR 0 4
82496: PPUSH
82497: CALL_OW 264
82501: PUSH
82502: LD_INT 49
82504: EQUAL
82505: IFFALSE 82533
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82507: LD_VAR 0 4
82511: PPUSH
82512: LD_VAR 0 5
82516: PPUSH
82517: LD_VAR 0 4
82521: PPUSH
82522: CALL_OW 74
82526: PPUSH
82527: CALL_OW 112
82531: GO 82557
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82533: LD_VAR 0 4
82537: PPUSH
82538: LD_VAR 0 5
82542: PPUSH
82543: LD_VAR 0 4
82547: PPUSH
82548: CALL_OW 74
82552: PPUSH
82553: CALL 83632 0 2
// end ; end ;
82557: GO 82137
82559: POP
82560: POP
// end ;
82561: LD_VAR 0 3
82565: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82566: LD_INT 0
82568: PPUSH
82569: PPUSH
82570: PPUSH
// if not unit or IsInUnit ( unit ) then
82571: LD_VAR 0 1
82575: NOT
82576: PUSH
82577: LD_VAR 0 1
82581: PPUSH
82582: CALL_OW 310
82586: OR
82587: IFFALSE 82591
// exit ;
82589: GO 82682
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82591: LD_ADDR_VAR 0 4
82595: PUSH
82596: LD_VAR 0 1
82600: PPUSH
82601: CALL_OW 250
82605: PPUSH
82606: LD_VAR 0 2
82610: PPUSH
82611: LD_INT 1
82613: PPUSH
82614: CALL_OW 272
82618: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82619: LD_ADDR_VAR 0 5
82623: PUSH
82624: LD_VAR 0 1
82628: PPUSH
82629: CALL_OW 251
82633: PPUSH
82634: LD_VAR 0 2
82638: PPUSH
82639: LD_INT 1
82641: PPUSH
82642: CALL_OW 273
82646: ST_TO_ADDR
// if ValidHex ( x , y ) then
82647: LD_VAR 0 4
82651: PPUSH
82652: LD_VAR 0 5
82656: PPUSH
82657: CALL_OW 488
82661: IFFALSE 82682
// ComTurnXY ( unit , x , y ) ;
82663: LD_VAR 0 1
82667: PPUSH
82668: LD_VAR 0 4
82672: PPUSH
82673: LD_VAR 0 5
82677: PPUSH
82678: CALL_OW 118
// end ;
82682: LD_VAR 0 3
82686: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82687: LD_INT 0
82689: PPUSH
82690: PPUSH
// result := false ;
82691: LD_ADDR_VAR 0 3
82695: PUSH
82696: LD_INT 0
82698: ST_TO_ADDR
// if not units then
82699: LD_VAR 0 2
82703: NOT
82704: IFFALSE 82708
// exit ;
82706: GO 82753
// for i in units do
82708: LD_ADDR_VAR 0 4
82712: PUSH
82713: LD_VAR 0 2
82717: PUSH
82718: FOR_IN
82719: IFFALSE 82751
// if See ( side , i ) then
82721: LD_VAR 0 1
82725: PPUSH
82726: LD_VAR 0 4
82730: PPUSH
82731: CALL_OW 292
82735: IFFALSE 82749
// begin result := true ;
82737: LD_ADDR_VAR 0 3
82741: PUSH
82742: LD_INT 1
82744: ST_TO_ADDR
// exit ;
82745: POP
82746: POP
82747: GO 82753
// end ;
82749: GO 82718
82751: POP
82752: POP
// end ;
82753: LD_VAR 0 3
82757: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82758: LD_INT 0
82760: PPUSH
82761: PPUSH
82762: PPUSH
82763: PPUSH
// if not unit or not points then
82764: LD_VAR 0 1
82768: NOT
82769: PUSH
82770: LD_VAR 0 2
82774: NOT
82775: OR
82776: IFFALSE 82780
// exit ;
82778: GO 82870
// dist := 99999 ;
82780: LD_ADDR_VAR 0 5
82784: PUSH
82785: LD_INT 99999
82787: ST_TO_ADDR
// for i in points do
82788: LD_ADDR_VAR 0 4
82792: PUSH
82793: LD_VAR 0 2
82797: PUSH
82798: FOR_IN
82799: IFFALSE 82868
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82801: LD_ADDR_VAR 0 6
82805: PUSH
82806: LD_VAR 0 1
82810: PPUSH
82811: LD_VAR 0 4
82815: PUSH
82816: LD_INT 1
82818: ARRAY
82819: PPUSH
82820: LD_VAR 0 4
82824: PUSH
82825: LD_INT 2
82827: ARRAY
82828: PPUSH
82829: CALL_OW 297
82833: ST_TO_ADDR
// if tmpDist < dist then
82834: LD_VAR 0 6
82838: PUSH
82839: LD_VAR 0 5
82843: LESS
82844: IFFALSE 82866
// begin result := i ;
82846: LD_ADDR_VAR 0 3
82850: PUSH
82851: LD_VAR 0 4
82855: ST_TO_ADDR
// dist := tmpDist ;
82856: LD_ADDR_VAR 0 5
82860: PUSH
82861: LD_VAR 0 6
82865: ST_TO_ADDR
// end ; end ;
82866: GO 82798
82868: POP
82869: POP
// end ;
82870: LD_VAR 0 3
82874: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82875: LD_INT 0
82877: PPUSH
// uc_side := side ;
82878: LD_ADDR_OWVAR 20
82882: PUSH
82883: LD_VAR 0 1
82887: ST_TO_ADDR
// uc_nation := 3 ;
82888: LD_ADDR_OWVAR 21
82892: PUSH
82893: LD_INT 3
82895: ST_TO_ADDR
// vc_chassis := 25 ;
82896: LD_ADDR_OWVAR 37
82900: PUSH
82901: LD_INT 25
82903: ST_TO_ADDR
// vc_engine := engine_siberite ;
82904: LD_ADDR_OWVAR 39
82908: PUSH
82909: LD_INT 3
82911: ST_TO_ADDR
// vc_control := control_computer ;
82912: LD_ADDR_OWVAR 38
82916: PUSH
82917: LD_INT 3
82919: ST_TO_ADDR
// vc_weapon := 59 ;
82920: LD_ADDR_OWVAR 40
82924: PUSH
82925: LD_INT 59
82927: ST_TO_ADDR
// result := CreateVehicle ;
82928: LD_ADDR_VAR 0 5
82932: PUSH
82933: CALL_OW 45
82937: ST_TO_ADDR
// SetDir ( result , d ) ;
82938: LD_VAR 0 5
82942: PPUSH
82943: LD_VAR 0 4
82947: PPUSH
82948: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82952: LD_VAR 0 5
82956: PPUSH
82957: LD_VAR 0 2
82961: PPUSH
82962: LD_VAR 0 3
82966: PPUSH
82967: LD_INT 0
82969: PPUSH
82970: CALL_OW 48
// end ;
82974: LD_VAR 0 5
82978: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82979: LD_INT 0
82981: PPUSH
82982: PPUSH
82983: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82984: LD_ADDR_VAR 0 2
82988: PUSH
82989: LD_INT 0
82991: PUSH
82992: LD_INT 0
82994: PUSH
82995: LD_INT 0
82997: PUSH
82998: LD_INT 0
83000: PUSH
83001: EMPTY
83002: LIST
83003: LIST
83004: LIST
83005: LIST
83006: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83007: LD_VAR 0 1
83011: NOT
83012: PUSH
83013: LD_VAR 0 1
83017: PPUSH
83018: CALL_OW 264
83022: PUSH
83023: LD_INT 12
83025: PUSH
83026: LD_INT 51
83028: PUSH
83029: LD_INT 32
83031: PUSH
83032: LD_INT 89
83034: PUSH
83035: EMPTY
83036: LIST
83037: LIST
83038: LIST
83039: LIST
83040: IN
83041: NOT
83042: OR
83043: IFFALSE 83047
// exit ;
83045: GO 83145
// for i := 1 to 3 do
83047: LD_ADDR_VAR 0 3
83051: PUSH
83052: DOUBLE
83053: LD_INT 1
83055: DEC
83056: ST_TO_ADDR
83057: LD_INT 3
83059: PUSH
83060: FOR_TO
83061: IFFALSE 83143
// begin tmp := GetCargo ( cargo , i ) ;
83063: LD_ADDR_VAR 0 4
83067: PUSH
83068: LD_VAR 0 1
83072: PPUSH
83073: LD_VAR 0 3
83077: PPUSH
83078: CALL_OW 289
83082: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83083: LD_ADDR_VAR 0 2
83087: PUSH
83088: LD_VAR 0 2
83092: PPUSH
83093: LD_VAR 0 3
83097: PPUSH
83098: LD_VAR 0 4
83102: PPUSH
83103: CALL_OW 1
83107: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83108: LD_ADDR_VAR 0 2
83112: PUSH
83113: LD_VAR 0 2
83117: PPUSH
83118: LD_INT 4
83120: PPUSH
83121: LD_VAR 0 2
83125: PUSH
83126: LD_INT 4
83128: ARRAY
83129: PUSH
83130: LD_VAR 0 4
83134: PLUS
83135: PPUSH
83136: CALL_OW 1
83140: ST_TO_ADDR
// end ;
83141: GO 83060
83143: POP
83144: POP
// end ;
83145: LD_VAR 0 2
83149: RET
// export function Length ( array ) ; begin
83150: LD_INT 0
83152: PPUSH
// result := array + 0 ;
83153: LD_ADDR_VAR 0 2
83157: PUSH
83158: LD_VAR 0 1
83162: PUSH
83163: LD_INT 0
83165: PLUS
83166: ST_TO_ADDR
// end ;
83167: LD_VAR 0 2
83171: RET
// export function PrepareArray ( array ) ; begin
83172: LD_INT 0
83174: PPUSH
// result := array diff 0 ;
83175: LD_ADDR_VAR 0 2
83179: PUSH
83180: LD_VAR 0 1
83184: PUSH
83185: LD_INT 0
83187: DIFF
83188: ST_TO_ADDR
// if not result [ 1 ] then
83189: LD_VAR 0 2
83193: PUSH
83194: LD_INT 1
83196: ARRAY
83197: NOT
83198: IFFALSE 83218
// result := Delete ( result , 1 ) ;
83200: LD_ADDR_VAR 0 2
83204: PUSH
83205: LD_VAR 0 2
83209: PPUSH
83210: LD_INT 1
83212: PPUSH
83213: CALL_OW 3
83217: ST_TO_ADDR
// end ;
83218: LD_VAR 0 2
83222: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83223: LD_INT 0
83225: PPUSH
83226: PPUSH
83227: PPUSH
83228: PPUSH
// sibRocketRange := 25 ;
83229: LD_ADDR_VAR 0 6
83233: PUSH
83234: LD_INT 25
83236: ST_TO_ADDR
// result := false ;
83237: LD_ADDR_VAR 0 4
83241: PUSH
83242: LD_INT 0
83244: ST_TO_ADDR
// for i := 0 to 5 do
83245: LD_ADDR_VAR 0 5
83249: PUSH
83250: DOUBLE
83251: LD_INT 0
83253: DEC
83254: ST_TO_ADDR
83255: LD_INT 5
83257: PUSH
83258: FOR_TO
83259: IFFALSE 83326
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83261: LD_VAR 0 1
83265: PPUSH
83266: LD_VAR 0 5
83270: PPUSH
83271: LD_VAR 0 6
83275: PPUSH
83276: CALL_OW 272
83280: PPUSH
83281: LD_VAR 0 2
83285: PPUSH
83286: LD_VAR 0 5
83290: PPUSH
83291: LD_VAR 0 6
83295: PPUSH
83296: CALL_OW 273
83300: PPUSH
83301: LD_VAR 0 3
83305: PPUSH
83306: CALL_OW 309
83310: IFFALSE 83324
// begin result := true ;
83312: LD_ADDR_VAR 0 4
83316: PUSH
83317: LD_INT 1
83319: ST_TO_ADDR
// exit ;
83320: POP
83321: POP
83322: GO 83328
// end ;
83324: GO 83258
83326: POP
83327: POP
// end ;
83328: LD_VAR 0 4
83332: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83333: LD_INT 0
83335: PPUSH
83336: PPUSH
83337: PPUSH
// if btype = b_depot then
83338: LD_VAR 0 2
83342: PUSH
83343: LD_INT 0
83345: EQUAL
83346: IFFALSE 83358
// begin result := true ;
83348: LD_ADDR_VAR 0 3
83352: PUSH
83353: LD_INT 1
83355: ST_TO_ADDR
// exit ;
83356: GO 83474
// end ; pom := GetBase ( depot ) ;
83358: LD_ADDR_VAR 0 4
83362: PUSH
83363: LD_VAR 0 1
83367: PPUSH
83368: CALL_OW 274
83372: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83373: LD_ADDR_VAR 0 5
83377: PUSH
83378: LD_VAR 0 2
83382: PPUSH
83383: LD_VAR 0 1
83387: PPUSH
83388: CALL_OW 248
83392: PPUSH
83393: CALL_OW 450
83397: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83398: LD_ADDR_VAR 0 3
83402: PUSH
83403: LD_VAR 0 4
83407: PPUSH
83408: LD_INT 1
83410: PPUSH
83411: CALL_OW 275
83415: PUSH
83416: LD_VAR 0 5
83420: PUSH
83421: LD_INT 1
83423: ARRAY
83424: GREATEREQUAL
83425: PUSH
83426: LD_VAR 0 4
83430: PPUSH
83431: LD_INT 2
83433: PPUSH
83434: CALL_OW 275
83438: PUSH
83439: LD_VAR 0 5
83443: PUSH
83444: LD_INT 2
83446: ARRAY
83447: GREATEREQUAL
83448: AND
83449: PUSH
83450: LD_VAR 0 4
83454: PPUSH
83455: LD_INT 3
83457: PPUSH
83458: CALL_OW 275
83462: PUSH
83463: LD_VAR 0 5
83467: PUSH
83468: LD_INT 3
83470: ARRAY
83471: GREATEREQUAL
83472: AND
83473: ST_TO_ADDR
// end ;
83474: LD_VAR 0 3
83478: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83479: LD_INT 0
83481: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83482: LD_VAR 0 1
83486: PPUSH
83487: LD_VAR 0 2
83491: PPUSH
83492: LD_INT 0
83494: PPUSH
83495: LD_INT 0
83497: PPUSH
83498: LD_INT 1
83500: PPUSH
83501: LD_INT 0
83503: PPUSH
83504: CALL_OW 587
// end ;
83508: LD_VAR 0 3
83512: RET
// export function CenterOnNow ( unit ) ; begin
83513: LD_INT 0
83515: PPUSH
// result := IsInUnit ( unit ) ;
83516: LD_ADDR_VAR 0 2
83520: PUSH
83521: LD_VAR 0 1
83525: PPUSH
83526: CALL_OW 310
83530: ST_TO_ADDR
// if not result then
83531: LD_VAR 0 2
83535: NOT
83536: IFFALSE 83548
// result := unit ;
83538: LD_ADDR_VAR 0 2
83542: PUSH
83543: LD_VAR 0 1
83547: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83548: LD_VAR 0 1
83552: PPUSH
83553: CALL_OW 87
// end ;
83557: LD_VAR 0 2
83561: RET
// export function ComMoveHex ( unit , hex ) ; begin
83562: LD_INT 0
83564: PPUSH
// if not hex then
83565: LD_VAR 0 2
83569: NOT
83570: IFFALSE 83574
// exit ;
83572: GO 83627
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83574: LD_VAR 0 2
83578: PUSH
83579: LD_INT 1
83581: ARRAY
83582: PPUSH
83583: LD_VAR 0 2
83587: PUSH
83588: LD_INT 2
83590: ARRAY
83591: PPUSH
83592: CALL_OW 428
83596: IFFALSE 83600
// exit ;
83598: GO 83627
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83600: LD_VAR 0 1
83604: PPUSH
83605: LD_VAR 0 2
83609: PUSH
83610: LD_INT 1
83612: ARRAY
83613: PPUSH
83614: LD_VAR 0 2
83618: PUSH
83619: LD_INT 2
83621: ARRAY
83622: PPUSH
83623: CALL_OW 111
// end ;
83627: LD_VAR 0 3
83631: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83632: LD_INT 0
83634: PPUSH
83635: PPUSH
83636: PPUSH
// if not unit or not enemy then
83637: LD_VAR 0 1
83641: NOT
83642: PUSH
83643: LD_VAR 0 2
83647: NOT
83648: OR
83649: IFFALSE 83653
// exit ;
83651: GO 83777
// x := GetX ( enemy ) ;
83653: LD_ADDR_VAR 0 4
83657: PUSH
83658: LD_VAR 0 2
83662: PPUSH
83663: CALL_OW 250
83667: ST_TO_ADDR
// y := GetY ( enemy ) ;
83668: LD_ADDR_VAR 0 5
83672: PUSH
83673: LD_VAR 0 2
83677: PPUSH
83678: CALL_OW 251
83682: ST_TO_ADDR
// if ValidHex ( x , y ) then
83683: LD_VAR 0 4
83687: PPUSH
83688: LD_VAR 0 5
83692: PPUSH
83693: CALL_OW 488
83697: IFFALSE 83777
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83699: LD_VAR 0 2
83703: PPUSH
83704: CALL_OW 247
83708: PUSH
83709: LD_INT 3
83711: PUSH
83712: LD_INT 2
83714: PUSH
83715: EMPTY
83716: LIST
83717: LIST
83718: IN
83719: PUSH
83720: LD_VAR 0 1
83724: PPUSH
83725: CALL_OW 255
83729: PPUSH
83730: LD_VAR 0 2
83734: PPUSH
83735: CALL_OW 292
83739: OR
83740: IFFALSE 83758
// ComAttackUnit ( unit , enemy ) else
83742: LD_VAR 0 1
83746: PPUSH
83747: LD_VAR 0 2
83751: PPUSH
83752: CALL_OW 115
83756: GO 83777
// ComAgressiveMove ( unit , x , y ) ;
83758: LD_VAR 0 1
83762: PPUSH
83763: LD_VAR 0 4
83767: PPUSH
83768: LD_VAR 0 5
83772: PPUSH
83773: CALL_OW 114
// end ;
83777: LD_VAR 0 3
83781: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83782: LD_INT 0
83784: PPUSH
83785: PPUSH
83786: PPUSH
// list := AreaToList ( area , 0 ) ;
83787: LD_ADDR_VAR 0 5
83791: PUSH
83792: LD_VAR 0 1
83796: PPUSH
83797: LD_INT 0
83799: PPUSH
83800: CALL_OW 517
83804: ST_TO_ADDR
// if not list then
83805: LD_VAR 0 5
83809: NOT
83810: IFFALSE 83814
// exit ;
83812: GO 83944
// if all then
83814: LD_VAR 0 2
83818: IFFALSE 83906
// begin for i := 1 to list [ 1 ] do
83820: LD_ADDR_VAR 0 4
83824: PUSH
83825: DOUBLE
83826: LD_INT 1
83828: DEC
83829: ST_TO_ADDR
83830: LD_VAR 0 5
83834: PUSH
83835: LD_INT 1
83837: ARRAY
83838: PUSH
83839: FOR_TO
83840: IFFALSE 83902
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83842: LD_ADDR_VAR 0 3
83846: PUSH
83847: LD_VAR 0 3
83851: PPUSH
83852: LD_VAR 0 3
83856: PUSH
83857: LD_INT 1
83859: PLUS
83860: PPUSH
83861: LD_VAR 0 5
83865: PUSH
83866: LD_INT 1
83868: ARRAY
83869: PUSH
83870: LD_VAR 0 4
83874: ARRAY
83875: PUSH
83876: LD_VAR 0 5
83880: PUSH
83881: LD_INT 2
83883: ARRAY
83884: PUSH
83885: LD_VAR 0 4
83889: ARRAY
83890: PUSH
83891: EMPTY
83892: LIST
83893: LIST
83894: PPUSH
83895: CALL_OW 1
83899: ST_TO_ADDR
83900: GO 83839
83902: POP
83903: POP
// exit ;
83904: GO 83944
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83906: LD_ADDR_VAR 0 3
83910: PUSH
83911: LD_VAR 0 5
83915: PUSH
83916: LD_INT 1
83918: ARRAY
83919: PUSH
83920: LD_INT 1
83922: ARRAY
83923: PUSH
83924: LD_VAR 0 5
83928: PUSH
83929: LD_INT 2
83931: ARRAY
83932: PUSH
83933: LD_INT 1
83935: ARRAY
83936: PUSH
83937: EMPTY
83938: LIST
83939: LIST
83940: PUSH
83941: EMPTY
83942: LIST
83943: ST_TO_ADDR
// end ;
83944: LD_VAR 0 3
83948: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83949: LD_INT 0
83951: PPUSH
83952: PPUSH
// list := AreaToList ( area , 0 ) ;
83953: LD_ADDR_VAR 0 4
83957: PUSH
83958: LD_VAR 0 1
83962: PPUSH
83963: LD_INT 0
83965: PPUSH
83966: CALL_OW 517
83970: ST_TO_ADDR
// if not list then
83971: LD_VAR 0 4
83975: NOT
83976: IFFALSE 83980
// exit ;
83978: GO 84021
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83980: LD_ADDR_VAR 0 3
83984: PUSH
83985: LD_VAR 0 4
83989: PUSH
83990: LD_INT 1
83992: ARRAY
83993: PUSH
83994: LD_INT 1
83996: ARRAY
83997: PUSH
83998: LD_VAR 0 4
84002: PUSH
84003: LD_INT 2
84005: ARRAY
84006: PUSH
84007: LD_INT 1
84009: ARRAY
84010: PUSH
84011: LD_VAR 0 2
84015: PUSH
84016: EMPTY
84017: LIST
84018: LIST
84019: LIST
84020: ST_TO_ADDR
// end ;
84021: LD_VAR 0 3
84025: RET
// export function First ( array ) ; begin
84026: LD_INT 0
84028: PPUSH
// if not array then
84029: LD_VAR 0 1
84033: NOT
84034: IFFALSE 84038
// exit ;
84036: GO 84052
// result := array [ 1 ] ;
84038: LD_ADDR_VAR 0 2
84042: PUSH
84043: LD_VAR 0 1
84047: PUSH
84048: LD_INT 1
84050: ARRAY
84051: ST_TO_ADDR
// end ;
84052: LD_VAR 0 2
84056: RET
// export function Last ( array ) ; begin
84057: LD_INT 0
84059: PPUSH
// if not array then
84060: LD_VAR 0 1
84064: NOT
84065: IFFALSE 84069
// exit ;
84067: GO 84085
// result := array [ array ] ;
84069: LD_ADDR_VAR 0 2
84073: PUSH
84074: LD_VAR 0 1
84078: PUSH
84079: LD_VAR 0 1
84083: ARRAY
84084: ST_TO_ADDR
// end ;
84085: LD_VAR 0 2
84089: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84090: LD_INT 0
84092: PPUSH
84093: PPUSH
// result := [ ] ;
84094: LD_ADDR_VAR 0 5
84098: PUSH
84099: EMPTY
84100: ST_TO_ADDR
// if not array then
84101: LD_VAR 0 1
84105: NOT
84106: IFFALSE 84110
// exit ;
84108: GO 84222
// for i := 1 to array do
84110: LD_ADDR_VAR 0 6
84114: PUSH
84115: DOUBLE
84116: LD_INT 1
84118: DEC
84119: ST_TO_ADDR
84120: LD_VAR 0 1
84124: PUSH
84125: FOR_TO
84126: IFFALSE 84220
// if array [ i ] [ index ] = value then
84128: LD_VAR 0 1
84132: PUSH
84133: LD_VAR 0 6
84137: ARRAY
84138: PUSH
84139: LD_VAR 0 2
84143: ARRAY
84144: PUSH
84145: LD_VAR 0 3
84149: EQUAL
84150: IFFALSE 84218
// begin if indexColumn then
84152: LD_VAR 0 4
84156: IFFALSE 84192
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84158: LD_ADDR_VAR 0 5
84162: PUSH
84163: LD_VAR 0 5
84167: PPUSH
84168: LD_VAR 0 1
84172: PUSH
84173: LD_VAR 0 6
84177: ARRAY
84178: PUSH
84179: LD_VAR 0 4
84183: ARRAY
84184: PPUSH
84185: CALL 79414 0 2
84189: ST_TO_ADDR
84190: GO 84218
// result := Join ( result , array [ i ] ) ;
84192: LD_ADDR_VAR 0 5
84196: PUSH
84197: LD_VAR 0 5
84201: PPUSH
84202: LD_VAR 0 1
84206: PUSH
84207: LD_VAR 0 6
84211: ARRAY
84212: PPUSH
84213: CALL 79414 0 2
84217: ST_TO_ADDR
// end ;
84218: GO 84125
84220: POP
84221: POP
// end ;
84222: LD_VAR 0 5
84226: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84227: LD_INT 0
84229: PPUSH
// if not vehicles or not parkingPoint then
84230: LD_VAR 0 1
84234: NOT
84235: PUSH
84236: LD_VAR 0 2
84240: NOT
84241: OR
84242: IFFALSE 84246
// exit ;
84244: GO 84344
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84246: LD_ADDR_VAR 0 1
84250: PUSH
84251: LD_VAR 0 1
84255: PPUSH
84256: LD_INT 50
84258: PUSH
84259: EMPTY
84260: LIST
84261: PUSH
84262: LD_INT 3
84264: PUSH
84265: LD_INT 92
84267: PUSH
84268: LD_VAR 0 2
84272: PUSH
84273: LD_INT 1
84275: ARRAY
84276: PUSH
84277: LD_VAR 0 2
84281: PUSH
84282: LD_INT 2
84284: ARRAY
84285: PUSH
84286: LD_INT 8
84288: PUSH
84289: EMPTY
84290: LIST
84291: LIST
84292: LIST
84293: LIST
84294: PUSH
84295: EMPTY
84296: LIST
84297: LIST
84298: PUSH
84299: EMPTY
84300: LIST
84301: LIST
84302: PPUSH
84303: CALL_OW 72
84307: ST_TO_ADDR
// if not vehicles then
84308: LD_VAR 0 1
84312: NOT
84313: IFFALSE 84317
// exit ;
84315: GO 84344
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84317: LD_VAR 0 1
84321: PPUSH
84322: LD_VAR 0 2
84326: PUSH
84327: LD_INT 1
84329: ARRAY
84330: PPUSH
84331: LD_VAR 0 2
84335: PUSH
84336: LD_INT 2
84338: ARRAY
84339: PPUSH
84340: CALL_OW 111
// end ;
84344: LD_VAR 0 3
84348: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84349: LD_INT 0
84351: PPUSH
84352: PPUSH
84353: PPUSH
// if not side or not area then
84354: LD_VAR 0 1
84358: NOT
84359: PUSH
84360: LD_VAR 0 2
84364: NOT
84365: OR
84366: IFFALSE 84370
// exit ;
84368: GO 84489
// tmp := AreaToList ( area , 0 ) ;
84370: LD_ADDR_VAR 0 5
84374: PUSH
84375: LD_VAR 0 2
84379: PPUSH
84380: LD_INT 0
84382: PPUSH
84383: CALL_OW 517
84387: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84388: LD_ADDR_VAR 0 4
84392: PUSH
84393: DOUBLE
84394: LD_INT 1
84396: DEC
84397: ST_TO_ADDR
84398: LD_VAR 0 5
84402: PUSH
84403: LD_INT 1
84405: ARRAY
84406: PUSH
84407: FOR_TO
84408: IFFALSE 84487
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84410: LD_VAR 0 5
84414: PUSH
84415: LD_INT 1
84417: ARRAY
84418: PUSH
84419: LD_VAR 0 4
84423: ARRAY
84424: PPUSH
84425: LD_VAR 0 5
84429: PUSH
84430: LD_INT 2
84432: ARRAY
84433: PUSH
84434: LD_VAR 0 4
84438: ARRAY
84439: PPUSH
84440: CALL_OW 351
84444: IFFALSE 84485
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84446: LD_VAR 0 5
84450: PUSH
84451: LD_INT 1
84453: ARRAY
84454: PUSH
84455: LD_VAR 0 4
84459: ARRAY
84460: PPUSH
84461: LD_VAR 0 5
84465: PUSH
84466: LD_INT 2
84468: ARRAY
84469: PUSH
84470: LD_VAR 0 4
84474: ARRAY
84475: PPUSH
84476: LD_VAR 0 1
84480: PPUSH
84481: CALL_OW 244
// end ;
84485: GO 84407
84487: POP
84488: POP
// end ; end_of_file
84489: LD_VAR 0 3
84493: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84494: LD_VAR 0 1
84498: PPUSH
84499: LD_VAR 0 2
84503: PPUSH
84504: LD_VAR 0 3
84508: PPUSH
84509: LD_VAR 0 4
84513: PPUSH
84514: LD_VAR 0 5
84518: PPUSH
84519: LD_VAR 0 6
84523: PPUSH
84524: CALL 21019 0 6
// end ;
84528: PPOPN 6
84530: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84531: LD_INT 0
84533: PPUSH
// begin if not units then
84534: LD_VAR 0 1
84538: NOT
84539: IFFALSE 84543
// exit ;
84541: GO 84543
// end ;
84543: PPOPN 7
84545: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84546: CALL 20906 0 0
// end ;
84550: PPOPN 1
84552: END
